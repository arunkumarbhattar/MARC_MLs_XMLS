<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20180130000326</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-30 00:03:26-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 24 Jan 2017, at 14:01, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; 
&gt;&gt; On 10 Jan 2017, at 09:17, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt; For example, maybe I want to use OnionShare to send my friend a 2GB
&gt;&gt;&gt; video clip, but anonymity doesn't matter to me. My friend and I already
&gt;&gt;&gt; know who each other are, and I'm not concerned about leaking what we're
&gt;&gt;&gt; doing, I just don't want to leak the plaintext video footage. In this
&gt;&gt;&gt; case, I might want to use a non-anonymous onion service just to make the
&gt;&gt;&gt; file transfer faster.
&gt;&gt; 
&gt;&gt; Ok, so you trust your friend with your IP and onion address in this use
&gt;&gt; case.
&gt;&gt; 
&gt;&gt; But do you also trust the entire Tor network?
&gt; 
&gt; I opened a ticket for the OnionShare single onion service use case:
&gt; https://trac.torproject.org/projects/tor/ticket/21295
&gt; 
&gt; We'll see what we can do, and try to work out the anonymity implications
&gt; of leaking your IP address to the intro and rendezvous points.

I closed this ticket as "wontfix" with the following comment:

I just don't think this is safe, particularly as part of Tor's current
design.

We are adding vanguards to make onion services harder to discover.
And we want to reject connections to HSDir, intro, and rendezvous points
where there is a client directly connected on both sides.

If someone does want to give up their anonymity, they should run another
tor instance, or restart their current instance in non-anonymous mode.
Or we should develop a feature where controllers can set custom onion
service paths.

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpvtk4ACgkQdA2eOQJS
cqK7aQ/+NOWPmpYp9nRFAnlEUC9tM6C8EeW3aMQbGo+j/vb64isb4fjE1OPANhJ5
KUC4pWvODnQ2A0YUwTsuiz4ZevXstewd7VSNFkc0LTV4SA9swtj8bOUtgaewp6eX
PpD4xSUjOpjHUdulmb2NCo5qAyre4MyEiYZ4fVjT5UQNy4zHtW/4qBNkIBXtUT62
C/NriDCGDME+kh/WujzGuo1WDHZ1FexZ31UGEa/ghHN6sXsUsDw4cMtFryj2PpwD
WOgbRY1BWYrLI7JG/raWUY8KNLZQyGbj8KDrko4I8iEqBcrRwQS+DMl9U/N1Rj62
355CnDWy2R0UfbRKZMBKLCXYhnHkg1UnhQKVmee6cqbdMMER4RYGFGv1T2jnhtSH
5rBJiNttLzcfZYC/2rsmeOJTpgNvhue2ChI9nstZO7XCgu8XyPe1f6EJVlOUUnIr
C2RicMolux3gUOc7Uis0e5K8PLWwkmaOP4VGs6xe6pzMZqKHWPGaVCjtgN5OsMpF
30YaE2sk1ph0p7C31obyP/M2quKXgWPo6INSPwC/rQggJ+XrYwJWP6g54/5cyW4I
RbyFuiHPi+81kOtIC+mpr4hTsjA49462TbMrONXOJRhkHsDaDPwDi14EJ1p+3y4v
jfnM0Ksdn6s0KL05FQFCwvj1CrwJ89jrrlBL1nmex7vmgPV02HM=
=jRdH
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180130000843</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-01-30 00:08:43-0400</timestampReceived><subject>Re: [tor-dev] non-anonymous ephemeral onion services with stem</subject><body>

On Tue, Jan 30, 2018 at 11:03:26AM +1100, teor wrote:
&gt; &gt;&gt; Ok, so you trust your friend with your IP and onion address in this use
&gt; &gt;&gt; case.
&gt; &gt;&gt; 
&gt; &gt;&gt; But do you also trust the entire Tor network?
&gt; &gt; 
&gt; &gt; I opened a ticket for the OnionShare single onion service use case:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/21295
&gt; &gt; 
&gt; &gt; We'll see what we can do, and try to work out the anonymity implications
&gt; &gt; of leaking your IP address to the intro and rendezvous points.
&gt; 
&gt; I closed this ticket as "wontfix" with the following comment:
&gt; 
&gt; I just don't think this is safe, particularly as part of Tor's current
&gt; design.

Agreed.

I think the trend of people saying "well I don't need anonymity" is no
different from the trend of people trying to justify their use of random
public proxies, VPNs, etc instead of Tor.

The fact is that people are often surprised to learn, after the fact when
it's too late and now they regret it, that they should have wanted some
more security. At Tor we should aim to give them that security by default,
and if they don't want it, we shouldn't give them an opportunity to think
"well I'm still using Tor so maybe I'm still making a good choice".

(I think this reasoning argues for jettisoning the whole single onion
service design too, but I won't try to make that argument in this thread.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180826225047</emailId><senderName>ESAUL PARRA GARCIA</senderName><senderEmail>epg323@ucla.edu</senderEmail><timestampReceived>2018-08-26 22:50:47-0400</timestampReceived><subject>[tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


Hello everyone,

I want to volunteer my time for the tor project. I have a background in
statistics, python, R, and web development(react, nodejs, monbodb, aws,
dynamob). Let me know what I can do to help. Email me back so I can send
you my resume.

Best,

Esaul Parra Garcia


-- 
University of California, Los Angeles
B.S. Statistics  | 2017
Email: epg323@ucla.edu | Mobile: 323.984.1204

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;Hello \
everyone,&lt;/span&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;I \
want to volunteer my time for the tor project. I have a background in statistics, \
python, R, and web development(react, nodejs, monbodb, aws, dynamob). Let me know \
what I can do to help. Email me back so I can send you my resume.&lt;/div&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;Best,&lt;/div&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="font-size:12.8px;text-decoration-style:initial;text-decoration-color:initial"&gt;Esaul \
Parra Garcia&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;University of California, Los Angeles&lt;br&gt;B.S. \
Statistics   | 2017&lt;br&gt;Email: &lt;a href="mailto:epg323@ucla.edu" \
target="_blank"&gt;epg323@ucla.edu&lt;/a&gt; | Mobile: 323.984.1204&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827005131</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-27 00:51:31-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]


Hi Esaul,

&gt; On 27 Aug 2018, at 08:50, ESAUL PARRA GARCIA &lt;epg323@ucla.edu&gt; wrote:
&gt; 
&gt; I want to volunteer my time for the tor project. I have a background in statistics, \
&gt; python, R, and web development(react, nodejs, monbodb, aws, dynamob). Let me know \
&gt; what I can do to help. Email me back so I can send you my resume.

It sounds like you'd be a great fit for the metrics team.

Here is the metrics website:
https://metrics.torproject.org/

And here is the list of all the projects in tor:
https://www.torproject.org/getinvolved/volunteer.html.en#Projects

It's the weekend in Europe right now, so they probably won't be at
work for another 8–12 hours.

If you don't hear back from them by Wednesday, please email:
metrics-team@lists.torproject.org


T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAluDSxMACgkQEP6qDnB1
Zyo7bhAAl3VA7LOTnkEwV9R99sG4UXYOkNWM58tDTyCJED2aObxgxBTassVZj40E
BhK4GwENdlWIjWo9AOSXhERxETIUnbxbTIMRfg01XUyqyLGCcAEbUHq5TM2Gifnl
BNiZ9FZFkhRRk6Swhewi0q7igKvCXDs3nE4mS1sXJ84c3EX4lrSbITIa36ZuPtjk
tz9PbctrHotWx3mUldVJh9gYxTanCCIeJYv1uksgYfC7aG5alObL18pm3X8UEmGB
OTEdDQC8fqvEGQssPnMkB301xAbsNt3Ax5C1hH5FUUIqPiV/rgA0Heq8zGBZbbnx
Lu0WTRXw/1IfRQdEf1doz5dZGStPNBo1vsoSVUpY9T/JNvF4hx4sFRFeAVJyq/Of
lbLneI56tShOl946m8EadXIv4JvHe0iBxHH27tOyvVB1DXTsb5ibldWh4Io6rfSj
fmWgNXP8488Yu4AUYN0eHOVI4FRg/IdaY+70e40M5a1D/KI2yQyZNH8F8WZ/bTRS
YW2380hxga7WysPZbUz4H/ckuRmGZFkQnDT8m7ZrkKDMVYn25JnF9885ismWsvtU
44RvV0od7SLxLSk8/asubIVixht9kZ4lcpJsPSr3evnh7tnEBmn2apA7mmFC+D6W
B8Sz5b41HHsDV5PxV4oJqn13vv/fiurOmR0aNv2iKlWXu8GldOg=
=a20A
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827020229</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-08-27 02:02:29-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


Im also interested in volunteer. I have pretty much the same skill set +
Linux - nodejs.
Is there anything I can be engaged with?

Tnx

On Mon, Aug 27, 2018 at 2:51 AM teor &lt;teor@riseup.net&gt; wrote:

&gt; Hi Esaul,
&gt;
&gt; &gt; On 27 Aug 2018, at 08:50, ESAUL PARRA GARCIA &lt;epg323@ucla.edu&gt; wrote:
&gt; &gt;
&gt; &gt; I want to volunteer my time for the tor project. I have a background in
&gt; statistics, python, R, and web development(react, nodejs, monbodb, aws,
&gt; dynamob). Let me know what I can do to help. Email me back so I can send
&gt; you my resume.
&gt;
&gt; It sounds like you'd be a great fit for the metrics team.
&gt;
&gt; Here is the metrics website:
&gt; https://metrics.torproject.org/
&gt;
&gt; And here is the list of all the projects in tor:
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt;
&gt; It's the weekend in Europe right now, so they probably won't be at
&gt; work for another 8–12 hours.
&gt;
&gt; If you don't hear back from them by Wednesday, please email:
&gt; metrics-team@lists.torproject.org
&gt;
&gt;
&gt; T
&gt;
&gt; --
&gt; teor
&gt;
&gt; Please reply @torproject.org
&gt; New subkeys 1 July 2018
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ----------------------------------------------------------------------
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Im also interested in volunteer. I have pretty much the same skill set \
+ Linux - nodejs.&lt;br&gt;Is there anything I can be engaged \
with?&lt;br&gt;&lt;br&gt;Tnx&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon, Aug 27, \
2018 at 2:51 AM teor &lt;&lt;a href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi Esaul,&lt;br&gt; &lt;br&gt;
&gt; On 27 Aug 2018, at 08:50, ESAUL PARRA GARCIA &lt;&lt;a \
href="mailto:epg323@ucla.edu" target="_blank"&gt;epg323@ucla.edu&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; \
&lt;br&gt; &gt; I want to volunteer my time for the tor project. I have a background in \
statistics, python, R, and web development(react, nodejs, monbodb, aws, dynamob). Let \
me know what I can do to help. Email me back so I can send you my resume.&lt;br&gt; &lt;br&gt;
It sounds like you'd be a great fit for the metrics team.&lt;br&gt;
&lt;br&gt;
Here is the metrics website:&lt;br&gt;
&lt;a href="https://metrics.torproject.org/" rel="noreferrer" \
target="_blank"&gt;https://metrics.torproject.org/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
And here is the list of all the projects in tor:&lt;br&gt;
&lt;a href="https://www.torproject.org/getinvolved/volunteer.html.en#Projects" \
rel="noreferrer" target="_blank"&gt;https://www.torproject.org/getinvolved/volunteer.html.en#Projects&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
It's the weekend in Europe right now, so they probably won't be at&lt;br&gt;
work for another 8–12 hours.&lt;br&gt;
&lt;br&gt;
If you don't hear back from them by Wednesday, please email:&lt;br&gt;
&lt;a href="mailto:metrics-team@lists.torproject.org" \
target="_blank"&gt;metrics-team@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
teor&lt;br&gt;
&lt;br&gt;
Please reply @&lt;a href="http://torproject.org" rel="noreferrer" \
target="_blank"&gt;torproject.org&lt;/a&gt;&lt;br&gt; New subkeys 1 July 2018&lt;br&gt;
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;
----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827035523</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-27 03:55:23-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 27 Aug 2018, at 12:02, Milan Damjanovic &lt;milan.damjanovic.mbs@gmail.com&gt; wrote:
&gt; 
&gt; Im also interested in volunteer. I have pretty much the same skill set + Linux - nodejs.
&gt; Is there anything I can be engaged with?

It seems like you'd also be a good fit for the metrics team.

Look at what the metrics team is doing, and read their responses
over the next few days:

&gt; On Mon, Aug 27, 2018 at 2:51 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; Here is the metrics website:
&gt; https://metrics.torproject.org/
&gt; 
&gt; And here is the list of all the projects in tor:
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt; 
&gt; It's the weekend in Europe right now, so they probably won't be at
&gt; work for another 8–12 hours.
&gt; 
&gt; If you don't hear back from them by Wednesday, please email:
&gt; metrics-team@lists.torproject.org
&gt; 
&gt; T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAluDdisACgkQEP6qDnB1
ZyonihAAt5ENp47XLbiagRd+MjwO/QmA/mH7FtfI1J4BF/7j5T0VQgrWJsUcINv0
FEbJhGv0bjLidkXMmO5rvZEQNpRUTBHAu3aplKT5dbhiUlam0MZ9gdqxxaN3tGQC
IhncNInA3CIdi2f9a/Oj6L05Lu1bsoAmgEL7tRUatesDTVq+v2r/TSbp+EeE6AA0
hvcuECzly1EaKKixMfvlUEMKeoUxwuIwmllV7RNQXWS6F+o0weOeFzDTbFbSggru
F5yaLd+5oetN9RLF5QXa3VRa0eK7uy9BLvLtREdxeEJF2JXJN6IRfQQsX+kb1ej7
lr85Z5yaNoNKyvN+fmHJ7CxCVWonD5xwW0BqANn+zBSuembphiscH1dZYdKF9XCq
5h3jxoXJHvLidc89E+BJLjn2YwYt1KifhbdZFXxun1r9VDkw8gP/UGYTz4W7uFOM
gNr/hpD0D6DANfgrHavY3+jMmIi49qi2YSf0DwFM5ySbVx5OUsl92S8ZLbObliUQ
NTDc7HltZSnH1zsqcKMGs57dPgwGHkJ22KDx7LuL8ySwNyz27ELON+EIr4sy2RC6
piE/lZvxbx8Jljqt/1BXSV0jg5MK4U+pyidZnmNpL9Pn4wfF4iq3smvFk/Fa9aGN
Vtoangl+dfKLgK3FyKxTqF3UIVrbPzvX+C8O40pCaD9M6xF0rbE=
=BiQ3
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827084655</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-08-27 08:46:55-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Esaul and Milan,

thanks for reaching out!

And yes, with the background you two mention you might indeed be great
fits for the metrics team. Going through the lists:

 - statistics: Here is an idea that I wrote down three weeks ago for
another volunteer who might already have started with it, in which case
it would be great to coordinate work a little bit:

We recently finished writing a specification for reproducing the data
behind our graphs. It's still a work in progress. One remaining step is
that we'd love people to take a section or two out of that
specification, take original Tor network data, and actually try to
reproduce our aggregated numbers. And maybe there are still things in
our text that can be phrased more clearly, things that are described
wrong, or possibly even interesting facts to be found while working with
the data. In any case, the specification page is here:

https://metrics.torproject.org/reproducible-metrics.html

 - python: Most of our code is written in Java, so we don't really need
help with Python at the moment.

 - R: Quick idea: We recently started refactoring our R code to use more
libraries of the tidyverse, including dplyr and tidyr. The easy
functions are already refactored, but more work remains with the more
difficult functions. If somebody would want to pick this up and refactor
the remaining functions, that would be cool:

https://trac.torproject.org/projects/tor/ticket/22423

 - web development(react, nodejs, monbodb, aws, dynamob): Not much to do
here at the moment. This may change in the future.

 - Linux: Same. Not much to do here right now. Unless Iain has an idea.

Would you want to drop by our next team meeting? It happens today
(Monday, August 27) at 14:30 UTC in #tor-meeting on OFTC. Here's the
announcement:

https://lists.torproject.org/pipermail/metrics-team/2018-August/000887.html

Thanks!

All the best,
Karsten


On 2018-08-27 04:02, Milan Damjanovic wrote:
&gt; Im also interested in volunteer. I have pretty much the same skill set  +
&gt; Linux - nodejs.
&gt; Is there anything I can be engaged with?
&gt; 
&gt; Tnx
&gt; 
&gt; On Mon, Aug 27, 2018 at 2:51 AM teor &lt;teor@riseup.net
&gt; &lt;mailto:teor@riseup.net&gt;&gt; wrote:
&gt; 
&gt;     Hi Esaul,
&gt; 
&gt;     &gt; On 27 Aug 2018, at 08:50, ESAUL PARRA GARCIA &lt;epg323@ucla.edu
&gt;     &lt;mailto:epg323@ucla.edu&gt;&gt; wrote:
&gt;     &gt;
&gt;     &gt; I want to volunteer my time for the tor project. I have a
&gt;     background in statistics, python, R, and web development(react,
&gt;     nodejs, monbodb, aws, dynamob). Let me know what I can do to help.
&gt;     Email me back so I can send you my resume.
&gt; 
&gt;     It sounds like you'd be a great fit for the metrics team.
&gt; 
&gt;     Here is the metrics website:
&gt;     https://metrics.torproject.org/
&gt; 
&gt;     And here is the list of all the projects in tor:
&gt;     https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt; 
&gt;     It's the weekend in Europe right now, so they probably won't be at
&gt;     work for another 8–12 hours.
&gt; 
&gt;     If you don't hear back from them by Wednesday, please email:
&gt;     metrics-team@lists.torproject.org
&gt;     &lt;mailto:metrics-team@lists.torproject.org&gt;
&gt; 
&gt; 
&gt;     T
&gt; 
&gt;     --
&gt;     teor
&gt; 
&gt;     Please reply @torproject.org &lt;http://torproject.org&gt;
&gt;     New subkeys 1 July 2018
&gt;     PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt;     ----------------------------------------------------------------------
&gt; 
&gt;     _______________________________________________
&gt;     tor-dev mailing list
&gt;     tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt;     https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827181247</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-27 18:12:47-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 27/08/18 09:46, Karsten Loesing wrote:
&gt; Would you want to drop by our next team meeting? It happens today
&gt; (Monday, August 27) at 14:30 UTC in #tor-meeting on OFTC.
It looks like this was too short notice. Our next meeting will be
Friday, 7th September at 14:30 UTC.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180828122150</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-08-28 12:21:50-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


I was late for yesterdays meeting.

Talk to you on the 7th to see how can we contribute
Cheers

On Mon, Aug 27, 2018 at 8:13 PM Iain Learmonth &lt;irl@torproject.org&gt; wrote:

&gt; Hi,
&gt;
&gt; On 27/08/18 09:46, Karsten Loesing wrote:
&gt; &gt; Would you want to drop by our next team meeting? It happens today
&gt; &gt; (Monday, August 27) at 14:30 UTC in #tor-meeting on OFTC.
&gt; It looks like this was too short notice. Our next meeting will be
&gt; Friday, 7th September at 14:30 UTC.
&gt;
&gt; Thanks,
&gt; Iain.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I was late for yesterdays meeting.&lt;br&gt;&lt;br&gt;Talk to you on the 7th to \
see how can we contribute&lt;br&gt;Cheers&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div \
dir="ltr"&gt;On Mon, Aug 27, 2018 at 8:13 PM Iain Learmonth &lt;&lt;a \
href="mailto:irl@torproject.org" target="_blank"&gt;irl@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
On 27/08/18 09:46, Karsten Loesing wrote:&lt;br&gt;
&gt; Would you want to drop by our next team meeting? It happens today&lt;br&gt;
&gt; (Monday, August 27) at 14:30 UTC in #tor-meeting on OFTC.&lt;br&gt;
It looks like this was too short notice. Our next meeting will be&lt;br&gt;
Friday, 7th September at 14:30 UTC.&lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
Iain.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180828122947</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-28 12:29:47-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 28/08/18 13:21, Milan Damjanovic wrote:
&gt; I was late for yesterdays meeting.

You can see what was discussed here:

http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.l=
og.html


Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829042748</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-08-29 04:27:48-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks Ian

On Tue, 28 Aug 2018, 14:30 Iain Learmonth, &lt;irl@torproject.org&gt; wrote:

&gt; Hi,
&gt;
&gt; On 28/08/18 13:21, Milan Damjanovic wrote:
&gt; &gt; I was late for yesterdays meeting.
&gt;
&gt; You can see what was discussed here:
&gt;
&gt;
&gt; http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html
&gt;
&gt;
&gt; Thanks,
&gt; Iain.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Thanks Ian&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Tue, \
28 Aug 2018, 14:30 Iain Learmonth, &lt;&lt;a \
href="mailto:irl@torproject.org"&gt;irl@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
On 28/08/18 13:21, Milan Damjanovic wrote:&lt;br&gt;
&gt; I was late for yesterdays meeting.&lt;br&gt;
&lt;br&gt;
You can see what was discussed here:&lt;br&gt;
&lt;br&gt;
&lt;a href="http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html" \
rel="noreferrer noreferrer" \
target="_blank"&gt;http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
Iain.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180907143527</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-09-07 14:35:27-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/alternative)]


No meeting today?

On Tue, 28 Aug 2018, 14:30 Iain Learmonth, &lt;irl@torproject.org&gt; wrote:

&gt; Hi,
&gt;
&gt; On 28/08/18 13:21, Milan Damjanovic wrote:
&gt; &gt; I was late for yesterdays meeting.
&gt;
&gt; You can see what was discussed here:
&gt;
&gt;
&gt; http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html
&gt;
&gt;
&gt; Thanks,
&gt; Iain.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="auto"&gt;No meeting today?&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Tue, 28 Aug 2018, 14:30 Iain Learmonth, &lt;&lt;a \
href="mailto:irl@torproject.org" target="_blank"&gt;irl@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
On 28/08/18 13:21, Milan Damjanovic wrote:&lt;br&gt;
&gt; I was late for yesterdays meeting.&lt;br&gt;
&lt;br&gt;
You can see what was discussed here:&lt;br&gt;
&lt;br&gt;
&lt;a href="http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html" \
rel="noreferrer noreferrer" \
target="_blank"&gt;http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-08-27-14.28.log.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
Iain.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" rel="noreferrer" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180909183058</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-09-09 18:30:58-0400</timestampReceived><subject>Re: [tor-dev] Tor Volunteer</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Milan,

On 2018-09-07 16:35, Milan Damjanovic wrote:
&gt; No meeting today?

No, we had to move the meeting to tomorrow, Monday, September 10:

https://lists.torproject.org/pipermail/metrics-team/2018-September/000895=
=2Ehtml

https://lists.torproject.org/pipermail/metrics-team/2018-September/000896=
=2Ehtml

Feel free to subscribe to the metrics-team@ mailing list if you want to
learn about such things in advance.

Hope to see you tomorrow!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180101223653</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2018-01-01 22:36:53-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

&gt; Date: Sun, 31 Dec 2017 11:46:28 +0000
&gt; From: Alec Muffett &lt;alec.muffett@gmail.com&gt;
&gt; 
&gt; Or, indeed, you could leave out the hyphens and do the same; the Prop224
&gt; Onion address is 59 characters, leaving a budget of 63-59==4 characters or
&gt; 20 bits; we could put these at the end, in the space marked "@@@@":
&gt; 
&gt;   https://www4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad@@@@.onion/

Existing checksum in v3 addresses aside, what would prevent using a
second DNS label for a longer checksum if you wanted a bigger budget?

The labels are limited to 63 octets, but the whole name can be up to
255 (including label length bytes).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180101235114</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-01 23:51:14-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>

[Attachment #2 (multipart/signed)]


On 2018-01-01 at 22:36:53 +0000, Taylor R Campbell 
&lt;campbell+tor-dev@mumble.net&gt; wrote:
&gt;&gt; Date: Sun, 31 Dec 2017 11:46:28 +0000
&gt;&gt; From: Alec Muffett &lt;alec.muffett@gmail.com&gt;
&gt;&gt;
&gt;&gt; Or, indeed, you could leave out the hyphens and do the same; the Prop224
&gt;&gt; Onion address is 59 characters, leaving a budget of 63-59==4 characters or
&gt;&gt; 20 bits; we could put these at the end, in the space marked "@@@@":
&gt;&gt;
&gt;&gt;   https://www4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad@@@@.onion/

Actually, the label part is 56 characters, not 59 characters.  
rend-spec-v3.txt,  § 6 [ONIONADDRESS].  See also  § 1.2 [NAMING] ("The 
result is a 56-character domain name"â€”nit, that should be "label").  
Using the first example example address therefrom:

$ bech32 -e pg6mmjiyjmcrsslvykfwnntlaru7p5svn6y2ymmju6nubxndf4pscryd.onion
onion10x7vvfgcfvz3jjt4c29kddntq35l0aj4d7c6cvvf57d5phdr9u0jz3crm5jhsx

Of course, 56 + 6 = ...

$ echo -n \
	0x7vvfgcfvz3jjt4c29kddntq35l0aj4d7c6cvvf57d5phdr9u0jz3crm5jhsx \
	| wc -c
62

N.b. that this still includes the two octets of truncated SHA3-256, 
wrapped inside a format with 30 bits of error-correcting BCH code.  
Decoding/re-encoding the name to drop the SHA3 bits would cut the 
payload from 280 to 264 octets, which could be represented in 53+6=59 
Bech32 characters with the BCH ECC.

I also question whether the onion version needs a whole octet.  In the 
specific application of Bech32 to Bitcoin, the "witness version" 
(version of encoded tx auth program) is restricted to 0â€“16, inclusive; 
and the Bech32 coding is done with one of what I will call a "quintet" 
char (5 bits) for the version, followed by the encoding of 8-bit octets 
of the witness program.[0]  If the .onion version were resticted to 0â€“15 
so as to fit in 4 bits, then only 260 bits = 52 quintets would be needed 
to express the version plus the 256-bit master identity key.  How many 
.onion address versions are expected in, say, the next 20â€“30 years?  
Adding a 6-char BCH code, the total label length would be 58 quintet 
characters.

At these lengths, I think every character of pseudorandom data which can 
be reasonably shaved off is a significant win for wetware UX.

0. Note, Bech32 encoding rules do not require that the encoded bit 
length be a multiple of 5.  The standard prescribes the simple rule that 
strings of octets be zero-padded to a multiple of 5 bits when encoding, 
and decoded to octets with up to 4 trailing 0 bits discarded.
https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki

&gt;Existing checksum in v3 addresses aside, what would prevent using a
&gt;second DNS label for a longer checksum if you wanted a bigger budget?
&gt;
&gt;The labels are limited to 63 octets, but the whole name can be up to
&gt;255 (including label length bytes).

I expect that the user burden of a greater length of pseudorandom 
gibberish would outweigh any possible UX benefit of adding more checksum 
data.  A 6-quintet BCH code already provides error correction, 
guarantees detection of errors affecting not more than 4 characters, and 
has a &lt;10^-9 probability of failing to detect a greater number of 
errors.  Is better than that really needed?

Upon the same cryptographic self-validation principle which .onion 
applies in the first place, I have also considered such possibilities as 
encoding a TLS public key fingerprint in subdomain labels.  The 
fingerprint could be automatically verified by the connecting TLS client 
against the same data it itself provides via SNI.  This could alleviate 
the current need to get CAB Forum to approve some form of DV for .onion 
certificates.  However, the results must be considered absolutely 
impracticable for humans transcription.  The usage model would rely 
exclusively on bookmarks, copypaste, etc.

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"â€˜If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." â€” nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180102024746</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-02 02:47:46-0400</timestampReceived><subject>Re: [tor-dev] Error-Correcting Onions with Bech32</subject><body>


&gt; On 2 Jan 2018, at 10:51, nullius &lt;nullius@nym.zone&gt; wrote:
&gt; 
&gt; On 2018-01-01 at 22:36:53 +0000, Taylor R Campbell &lt;campbell+tor-dev@mumble.net&gt; \
&gt; wrote:
&gt; &gt; &gt; Date: Sun, 31 Dec 2017 11:46:28 +0000
&gt; &gt; &gt; From: Alec Muffett &lt;alec.muffett@gmail.com&gt;
&gt; &gt; &gt; 
&gt; &gt; &gt; Or, indeed, you could leave out the hyphens and do the same; the Prop224
&gt; &gt; &gt; Onion address is 59 characters, leaving a budget of 63-59==4 characters or
&gt; &gt; &gt; 20 bits; we could put these at the end, in the space marked "@@@@":
&gt; &gt; &gt; 
&gt; &gt; &gt; https://www4acth47i6kxnvkewtm6q7ib2s3ufpo5sqbsnzjpbi7utijcltosqemad@@@@.onion/
&gt; 
&gt; Actually, the label part is 56 characters, not 59 characters.  rend-spec-v3.txt,  § \
&gt; 6 [ONIONADDRESS].  See also  § 1.2 [NAMING] ("The result is a 56-character domain \
&gt; name"â€”nit, that should be "label").

We would happily take a patch that makes the wording more
precise throughout the proposal and Tor's other specifications.

&gt; â€¦
&gt; 
&gt; N.b. that this still includes the two octets of truncated SHA3-256, wrapped inside \
&gt; a format with 30 bits of error-correcting BCH code.  Decoding/re-encoding the name \
&gt; to drop the SHA3 bits would cut the payload from 280 to 264 octets, which could be \
&gt; represented in 53+6=59 Bech32 characters with the BCH ECC.

You could safely drop and recalculate the hash, but if the onion
address encoding changes in a future version, you would have
to patch all the bech code.

&gt; I also question whether the onion version needs a whole octet.  In the specific \
&gt; application of Bech32 to Bitcoin, the "witness version" (version of encoded tx auth \
&gt; program) is restricted to 0â€“16, inclusive; and the Bech32 coding is done with one \
&gt; of what I will call a "quintet" char (5 bits) for the version, followed by the \
&gt; encoding of 8-bit octets of the witness program.[0]  If the .onion version were \
&gt; resticted to 0â€“15 so as to fit in 4 bits, then only 260 bits = 52 quintets would \
&gt; be needed to express the version plus the 256-bit master identity key.  How many \
&gt; .onion address versions are expected in, say, the next 20â€“30 years?  Adding a \
&gt; 6-char BCH code, the total label length would be 58 quintet characters. 
&gt; At these lengths, I think every character of pseudorandom data which can be \
&gt; reasonably shaved off is a significant win for wetware UX.

We won't be revising the spec at this point, because it's been
implemented. However, you could suggest that the next
version of onion services only uses 5 bits to encode the version.

You could safely encode the current version 3 in zero bits, but if
the onion address encoding changes in a future version, you
would have to patch all the bech code.

One way of doing this is to make the bech prefix "onion3".

&gt; ...

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180103225600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-03 22:56:00-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


thanks for bringing this service back!



--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180104183232</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-01-04 18:32:32-0400</timestampReceived><subject>Re: [tor-dev] #24526: neeeds review: require ContactInfo+MyFamily for multi-relay operators</subject><body>

On Thu, Jan 04, 2018 at 05:14:00PM +0000, nusenu wrote:
&gt; Hi,
&gt; 
&gt; it would be great if someone could review this change 
&gt; so we can move forward on this topic:
&gt; 
&gt; https://gitweb.torproject.org/nickm/tor.git/commit/?h=bug24526&amp;id=fbb6f9a1865a923ca97c57757a694532faf9fe93
&gt; 

The added "n" and "s" at the beginnings of lines in
src/config/torrc.sample.in look suspicious to me?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180105171000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-05 17:10:00-0400</timestampReceived><subject>[tor-dev] Call for review of Tor Relay Guide (#24497)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

since the instructions on the website on how to setup a Tor 
relay are lacking information and clear guidance we have been
working on improving it. 

The current version lives in the wiki and it reached a point
where it makes sense to get reviews.

https://trac.torproject.org/projects/tor/wiki/TorRelayGuide

If there are major changes you would like to see please discuss 
them on the ticket before proceeding in the wiki:
https://trac.torproject.org/projects/tor/ticket/24497


looking forward to your feedback and reviews!

thanks,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180106155718</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-01-06 15:57:18-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 06/01/18 15:52, Iain Learmonth wrote:
&gt; Ok, I'll see if I can do a quick hack workaround to generate the list
&gt; for Relay Search until the data is available through Tor Metrics.

In fact, my original quick hack workaround still works, as it's only
extracting fingerprints. (Tested that there is no lines changed in a
diff against the same file in the old format).

I'm ready to update as soon as there's a new list available.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180107130702</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-07 13:07:02-0400</timestampReceived><subject>Re: [tor-dev] A suggestion for differential private statistics gathering</subject><body>

[Attachment #2 (multipart/signed)]


Hi Eyal,

Thank you for letting us know about your research.

You've emailed an internal discussion list, so I'm going to direct all
responses to the public tor-dev@ list. That is the list where we discuss
changes to Tor.

Please see my response below:

&gt; On 7 Jan 2018, at 20:31, Eyal Ronen &lt;eyal.ronen@weizmann.ac.il&gt; wrote:
&gt; 
&gt; I am a PHD student, and have just published online a paper, that shows a protocol \
&gt; that I think might be relevant to the TOR network. The protocol allows a server to \
&gt; privately learn information from a client, and is resilient to a situation where a \
&gt; malicious adversary wants to temper with the statistics. The main use case in our \
&gt; paper is learning popular passwords,

Are you aware of this password list?
(It has no privacy apart from hashing the passwords, because the
passwords are already publicly available in data breaches.)

https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/

&gt; but we believe that it might also be usable for other cases in the TOR network. As \
&gt; we do not know the needs and challenges in the  TOR network, we would greatly \
&gt; appreciate any feedback from the TOR metrics community.

I would be interested in an explanation of the tradeoffs between the
16 and 32 bit versions of the protocol. In particular, we may not be
able to provide servers with 4 GB of RAM for the 32 bit protocol.

What would we lose with a 16 bit version? Is a 24 bit version possible?

&gt; The paper is titles "How to (not) share a password: Privacy preserving protocols \
&gt; for finding heavy hitters with adversarial behavior" and can be found at \
&gt; https://eprint.iacr.org/2018/003 
&gt; The abstract is:
&gt; "Bad choices of passwords were and are a pervasive problem. Most password \
&gt; alternatives (such as two-factor authentication) may increase cost and arguably \
&gt; hurt the usability of the system. This is of special significance for low cost IoT \
&gt; devices. 
&gt; Users choosing weak passwords do not only compromise themselves, but the whole eco \
&gt; system. For example, common and default passwords in IoT devices were exploited by \
&gt; hackers to create botnets and mount severe attacks on large Internet services, such \
&gt; as the Mirai botnet DDoS attack. 
&gt; We present a method to help protect the Internet from such large scale attacks. We \
&gt; enable a server to identify popular passwords (heavy hitters), and publish a list \
&gt; of over-popular passwords that must be avoided. This filter ensures that no single \
&gt; password can be used to comprise a large percentage of the users. The list is \
&gt; dynamic and can be changed as new users are added or when current users change \
&gt; their passwords. We apply maliciously secure two-party computation and differential \
&gt; privacy to protect the users' password privacy. Our solution does not require extra \
&gt; hardware or cost, and is transparent to the user. 
&gt; The construction is secure even against a malicious coalition of devices which \
&gt; tries to manipulate the protocol in order to hide the popularity of some password \
&gt; that the attacker is exploiting. We show a proof-of-concept implementation and \
&gt; analyze its performance. 
&gt; Our construction can also be used in any setting where one would desire to \
&gt; privately learn heavy hitters in the presence of an active malicious adversary. For \
&gt; example, learning the most popular sites accessed by the TOR network."

Tor Proposals

There is a current proposal to add privacy-preserving statistics to Tor
using a scheme that's based on PrivCount:

https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt


PrivCount is limited to counters with integer increments, so we can't
easily find the most popular site (the mode), or calculate the median.

We discussed the proposal on tor-dev@, and decided that we could add
more sophisticated statistics later. We would appreciate your feedback
on the proposal. In particular, please let us know if there is anything
we should change in the proposal to make it easier to extend with schemes
like yours in future.

Here is the proposal thread:

https://lists.torproject.org/pipermail/tor-dev/2017-December/012699.html


Anyone is welcome to submit Tor proposals, the process is described here:

https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt


Related Research

There was a paper at CCS 2017 that sounds very similar to your scheme:

Ellis Fenske, Akshaya Mani, Aaron Johnson, and Micah Sherr. Distributed
Measurement with Private Set-Union Cardinality. In ACM Conference on
Computer and Communications Security (CCS), November 2017.

Source: http://safecounting.com/

Can you explain how your scheme differs from PSC?


There's a forthcoming paper at NDSS 2018 that measures a single onion
site's popularity with differential privacy using PrivCount:

Inside Job: Applying Traffic Analysis to Measure Tor from Within
25th Symposium on Network and Distributed System Security (NDSS 2018)
Rob Jansen, Marc Juarez, Rafael Galvez, Tariq Elahi, and Claudia Diaz

Source: https://onionpop.github.io/

But the measurement was limited to one site, because PrivCount can't
calculate the modal value from  set of samples. So I can see the
advantages of a scheme like yours over PrivCount.


Your Own Research

And finally, if you do want to do research on the public Tor network, I
would recommend contacting the Tor Research Safety Board for advice:

https://research.torproject.org/safetyboard.html

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpSG3YACgkQdA2eOQJS
cqIERhAAuWB5iThhNVH6i9ammKk54IhAD48N+BuxtK1e0j46ERo2enZbToGOjvul
ikWMx5vL7MActhSmK/zsVkzurYMJR3Lp2ZU2isUwWZAj4SilSCu8iIFKqoUzNPwK
VEUkDRCjA7JFlE0qV4Cdj9p+a8zDkSYxqs9xVYdA6PtDzAC1thGl32KC0V5zMdO3
R8k8CX+w0c5+wlEh1IPduIVA8SqF1O2XMYEJsAMwMV84lwnrQO9eTxHHz6TYpgfl
/HGePG+oUY2fI/JXwTH/2T380WMWRjkb62whAvSg5RIemBa7A0ZwXKrykym0UYdr
U+rp/Wl4bi0S0+DrH9YeEDE2sj3UDrq0rJVg6ItJvtc3xLoHWMs55PhbFh5Ovhdi
SG5OV8FBuXdlgGQ+1WTwvZA/6WYtbGDHdwfguIaVVTa0kbaxKNnQuhaOssv12yzS
f+dyZGK9JMnlHhBJChk/uamn4GjHYcMRpVuNe3V8d+m2VFNafAw5QsnUpnqUQiRs
zR4MEMf0IlDA/vF1SrvPYr001FfUrs8zxvb1mAdktiW583BDNE966rI4ZHaalUc9
xYXmw5g8C0VNmlgiseDKj6jCG5R35jmSQ5FhOra/p6BHs8fMkNetm88Q0OVZwT1+
XTOjvu0R2t9JfWmrCyVnEWbhxjc8LW05V6h6dUs/w1GxoLSZwYQ=
=kDfv
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180107204021</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-01-07 20:40:21-0400</timestampReceived><subject>Re: [tor-dev] Relay diversity master thesis</subject><body>

On Sun, Jan 7, 2018 at 8:29 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; On 22 Dec 2017, at 11:23, Robin Descamps &lt;robin.descamps@outlook.com&gt; wrote:
&gt;&gt; May I ask you advices/feedback about this master thesis plan?
&gt;&gt; The master thesis plan: https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx
&gt;&gt; The poster: https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4

&gt; In particular, operators that could perform end-to-end correlation?

&gt; Have you considered the relay's Operating System?

If considering as yet non tor daemon, non measured, non consensus voted
things like operators and OS, then you should extend research into similar
meta parameters about the relays themselves such as datacenter hosted vs
cable/dsl/fiber "home" relays, country locations, opposing legal jurisdictions,
operation by "known" or "trusted" operators / entities or not, by
working / fake / no
contact info, by any PKI Web Of Trust asserted among operators, funding
sources, employer / corporate / political / other affiliations,
statistical analysis
of historical relay "presence" on the network (add/drop/uptime, nicknames,
movement, versions, bulk turnups, correlation groups, etc), and many more
possible metas that people should think up and add to this list.

That research then followed by development of third party subscription
lists of categorized / ranked relays the user or tor daemon may further
pluggably select from when choosing nodes to path through.

There have been posts on tor-relays@ and tor-talk@ that mention more
about these sorts of meta parameters. AFAIK, no one has done any
research into them or their potential impact / benefits, whether to particularly
affected, or for plain preferential choice users, or to the network as a whole.
So the chance of a first good paper in the area awaits whoever does that
meta analysis project.

[xpost for open project oppurtunity]
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180104171400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-04 17:14:00-0400</timestampReceived><subject>[tor-dev] #24526: neeeds review: require ContactInfo+MyFamily for multi-relay operators</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

it would be great if someone could review this change 
so we can move forward on this topic:

https://gitweb.torproject.org/nickm/tor.git/commit/?h=bug24526&amp;id=fbb6f9a1865a923ca97c57757a694532faf9fe93


https://trac.torproject.org/projects/tor/ticket/24526#comment:7

thanks,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180107132936</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-07 13:29:36-0400</timestampReceived><subject>Re: [tor-dev] Relay diversity master thesis</subject><body>

[Attachment #2 (multipart/signed)]


Hi Robin,

Sorry it's taken a while for someone to respond to your email.
Many of us have been on leave from the start of December until this week.

Please see my response below:

&gt; On 22 Dec 2017, at 11:23, Robin Descamps &lt;robin.descamps@outlook.com&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; I already sent this message to the metrics team, but they advice me to address it \
&gt; to the dev team, which seem to be more relevant. 
&gt; I realise this year a master thesis, in the Université catholique de Louvain in \
&gt; Belgium, about measuring the utility brought to the Tor network diversity by adding \
&gt; a new relay, according to its configuration. I added to this message my master \
&gt; thesis plan, as well as a poster that presents a summary of the key elements. 
&gt; May I ask you advices/feedback about this master thesis plan? Since I would like \
&gt; this project to bring a real contribution to the Tor development, I want to make \
&gt; sure that all the steps I will perform are useful and/or worth it. 
&gt; The master thesis plan: \
&gt; https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx The poster: \
&gt; https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4

Have you considered relay bandwidth capacity, measured bandwidth,
consensus weight, or bandwidth authorities in your plan?

When using the Tor path selection algorithm, relay consensus weight has
a big impact on the paths selected by clients.

At the moment, relay consensus weight is a function of relay bandwidth
capacity, and geographic location. For a map of consensus weights, see
"Consensus Weight versus Bandwidth" on:

https://atlas.torproject.org/#map


Have you considered relay operators or relay families?
In particular, operators that could perform end-to-end correlation?

https://nusenu.github.io/OrNetStats/


Have you considered the relay's Operating System?
Are you aware that the Tor network has historically been a Linux
monoculture, and 90% of relays still run Linux?

https://nusenu.github.io/OrNetStats/
https://torbsd.github.io/blog.html


Have you considered the Tor version that the relay is running?

https://nusenu.github.io/OrNetStats/


Recently, someone created a website that gave badges for different
kinds of relay diversity. But I can't remember what it was called.


I've also cc'd nusenu, who has done some work in this area.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpSIMAACgkQdA2eOQJS
cqKZUBAAqETBbwPabzFUdF0HYIJqSm+IBCTke2RTrJukoMd/wMJCufLZT1/nxinR
z74UGILSBwpYOoMgYP52GnGmF/f3pTSctrQUXtoBtzjQFbWOreMsmIIHKNjwxJ6n
zQgLAMNwCM1AnvF5C64ua1olVFXvzn3+AlbOsallRcHlyFAqvqv/vEEczchY3GyW
lkSRnlq5HR22ylvfUwwE8xQaMgU7kjWwZzkpFU5GdI9dOwwFcMScEy9JeyDxi+Y5
nUcmIhxyuUEMevkKOT1f/o9AClKqi1Ran3CUSvbodAphYPVgBoBduiZBHCi8J+ed
R9RuY5OD9VhHXEKZpPditpWqZHukLaIk/otXPvKEAdREjrwDcq9LlntXFNAqyH0j
5x5gCpVrDNBDkoHMu5NX36LTKAOsnYFr35SVQo0lnsKasknGQMhbnJLceNgmnIhX
B2Du2DyMSbd83PajQPTa35kR49Ppm8dT0Hf4Iws5AFw6nq1rleUfhNWmM5m+HQ7U
0N55Vw/7763RVoF+NDNhhR7hmn45krMmOs18aBR09dNogUn6priQv67tXOmT0Yuc
XUMZufYSTWIvjkv+LOjeleUZHgwl51F0sRXPCPGKIHaEtEvwjWWBNz6HzlwqFNjE
5h/pEls6wYUCKGxyhx9jIuxCkrwUfXykNPDYN4iAoWSrjfOk/K8=
=81QK
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180821142326</emailId><senderName>Robin Descamps</senderName><senderEmail>robin.descamps@outlook.com</senderEmail><timestampReceived>2018-08-21 14:23:26-0400</timestampReceived><subject>Re: [tor-dev] Relay diversity master thesis</subject><body>

[Attachment #2 (text/plain)]

Hello,

I would like to share with you the master thesis I wrote this year on a topic \
concerning diversity in Tor, that I evoked earlier this year. I would like to thanks \
all the dev that have shared feedback with me about my thesis plan. This work may not \
be perfect, but could start/influence the research in the future hopefully. Here is \
the abstract and the access link:

Tor is the most popular anonymous communication system nowadays, that set up a \
excellent compromise between anonymity and performance. However, Tor is by design \
vulnerable to end-to-end correlation attacks. Many techniques have been and are being \
developed in order to mitigate these attacks. This master thesis objective is to \
define the utility of a new relay, and to give a measure of its contribution to the \
diversity of the network. This is achieved with a modified version of the TorPS , \
which simulate the Tor network against both relay and network adversaries. More \
diversity means less end-to-end correlation attacks possible by the latter. At the \
end, we would like the volunteers to be aware of the utility they bring to the Tor \
network security with a certain relay configuration.

https://dial.uclouvain.be/memoire/ucl/fr/object/thesis%3A14661&lt;https://dial.uclouvain.be/memoire/ucl/fr/object/thesis:14661&gt;


Thanks,

Robin Descamps

Le 22 dÃ©c. 2017 Ã  01:23, Robin Descamps \
&lt;robin.descamps@outlook.com&lt;mailto:robin.descamps@outlook.com&gt;&gt; a Ã©crit :

Hello,

I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.

I realise this year a master thesis, in the UniversitÃ© catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as well as a poster that presents a summary of the key elements.

May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it.

The master thesis plan: \
https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx The poster: \
https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4

Thanks,
Robin Descamps


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; line-break: \
after-white-space;" class=""&gt; Hello,
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;I would like to share with you the master thesis I wrote this year on a \
topic concerning diversity in Tor, that I evoked earlier this year. I would like to \
thanks all the dev that have shared feedback with me about my thesis plan. This work \
may  not be perfect, but could start/influence the research in the future hopefully. \
Here is the abstract and the access link:&lt;/div&gt; &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;span style="color: rgb(68, 68, 68); font-family: "PT Sans", \
HelveticaNeue, "Helvetica Neue", Helvetica, Arial, sans-serif; \
font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, \
255, 255);" class=""&gt;Tor is the most  popular anonymous communication system \
nowadays, that set up a excellent compromise between anonymity and performance. \
However, Tor is by design vulnerable to end-to-end correlation attacks. Many \
techniques have been and are being developed in order to mitigate  these attacks. \
This master thesis objective is to define the utility of a new relay, and to give a \
measure of its contribution to the diversity of the network. This is achieved with a \
modified version of the TorPS , which simulate the Tor network against both  relay \
and network adversaries. More diversity means less end-to-end correlation attacks \
possible by the latter. At the end, we would like the volunteers to be aware of the \
utility they bring to the Tor network security with a certain relay \
configuration.&lt;/span&gt;&lt;/div&gt; &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;a href="https://dial.uclouvain.be/memoire/ucl/fr/object/thesis:14661" \
class=""&gt;https://dial.uclouvain.be/memoire/ucl/fr/object/thesis%3A14661&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; &lt;/div&gt;
&lt;div class=""&gt;Thanks,&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;Robin Descamps&lt;br class=""&gt;
&lt;div&gt;&lt;br class=""&gt;
&lt;blockquote type="cite" class=""&gt;
&lt;div class=""&gt;Le 22 dÃ©c. 2017 Ã  01:23, Robin Descamps &lt;&lt;a \
href="mailto:robin.descamps@outlook.com" class=""&gt;robin.descamps@outlook.com&lt;/a&gt;&gt; \
a Ã©crit :&lt;/div&gt; &lt;br class="Apple-interchange-newline"&gt;
&lt;div class=""&gt;
&lt;div style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: \
after-white-space;" class=""&gt; Hello,&lt;br class=""&gt;
&lt;br class=""&gt;
I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.&lt;br class=""&gt; &lt;br class=""&gt;
I realise this year a master thesis, in the UniversitÃ© catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as  well as a poster that presents a summary of the key elements.&lt;br class=""&gt;
&lt;br class=""&gt;
May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it. &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;The master thesis plan: &lt;a \
href="https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx" \
class=""&gt;https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;The poster: &lt;a \
href="https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4" \
class=""&gt;https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; Thanks,&lt;br class=""&gt;
Robin Descamps
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;br class=""&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180822013326</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-22 01:33:26-0400</timestampReceived><subject>Re: [tor-dev] Relay diversity master thesis</subject><body>

[Attachment #2 (multipart/signed)]


Hi Robin,

When I use Tor Browser to go to:
https://dial.uclouvain.be/memoire/ucl/fr/object/thesis:14661

I see the error:

Message d'erreur

	â€¢ Notice : Trying to get property of non-object dans \
DialMarcxmlObject-&gt;__construct() (ligne 16 dans /usr/share/php/dial/dial-pr.php).  \
â€¢ Notice : Trying to get property of non-object dans \
DialMarcxmlObject-&gt;__construct() (ligne 17 dans /usr/share/php/dial/dial-pr.php).  \
â€¢ Exception : This object must contain a MARCXML datastream. dans \
DialMarcxmlObject-&gt;validate() (ligne 29 dans /usr/share/php/dial/dial-pr.php). Le \
site Web a rencontrÃ© une erreur inattendue. Veuillez essayer de nouveau plus tard.

Which is a glorious mix of French and English that even I can understand.

Any idea when it will be fixed?

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------

&gt; On 22 Aug 2018, at 00:23, Robin Descamps &lt;robin.descamps@outlook.com&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; I would like to share with you the master thesis I wrote this year on a topic \
&gt; concerning diversity in Tor, that I evoked earlier this year. I would like to \
&gt; thanks all the dev that have shared feedback with me about my thesis plan. This \
&gt; work may not be perfect, but could start/influence the research in the future \
&gt; hopefully. Here is the abstract and the access link: 
&gt; Tor is the most popular anonymous communication system nowadays, that set up a \
&gt; excellent compromise between anonymity and performance. However, Tor is by design \
&gt; vulnerable to end-to-end correlation attacks. Many techniques have been and are \
&gt; being developed in order to mitigate these attacks. This master thesis objective is \
&gt; to define the utility of a new relay, and to give a measure of its contribution to \
&gt; the diversity of the network. This is achieved with a modified version of the TorPS \
&gt; , which simulate the Tor network against both relay and network adversaries. More \
&gt; diversity means less end-to-end correlation attacks possible by the latter. At the \
&gt; end, we would like the volunteers to be aware of the utility they bring to the Tor \
&gt; network security with a certain relay configuration. 
&gt; https://dial.uclouvain.be/memoire/ucl/fr/object/thesis%3A14661
&gt; 
&gt; Thanks,
&gt; 
&gt; Robin Descamps
&gt; 
&gt; &gt; Le 22 dÃ©c. 2017 Ã  01:23, Robin Descamps &lt;robin.descamps@outlook.com&gt; a Ã©crit :
&gt; &gt; 
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; I already sent this message to the metrics team, but they advice me to address it \
&gt; &gt; to the dev team, which seem to be more relevant. 
&gt; &gt; I realise this year a master thesis, in the UniversitÃ© catholique de Louvain in \
&gt; &gt; Belgium, about measuring the utility brought to the Tor network diversity by \
&gt; &gt; adding a new relay, according to its configuration. I added to this message my \
&gt; &gt; master thesis plan, as well as a poster that presents a summary of the key \
&gt; &gt; elements. 
&gt; &gt; May I ask you advices/feedback about this master thesis plan? Since I would like \
&gt; &gt; this project to bring a real contribution to the Tor development, I want to make \
&gt; &gt; sure that all the steps I will perform are useful and/or worth it. 
&gt; &gt; The master thesis plan: \
&gt; &gt; https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx The poster: \
&gt; &gt; https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4 
&gt; &gt; Thanks,
&gt; &gt; Robin Descamps
&gt; &gt; 
&gt; &gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlt8vWYACgkQEP6qDnB1
ZypwZRAAkyM/3mJ8ndsCo9lXR7DyD8gQCA4O/9Z0uxy/Fd9GDSpLOIsaoC5ejunf
ABgNDhpbMwCPYPhYpmfZLTwK6ormvwe0ZOuBBPdaFhmgks3UcBqKbTzuCOfdTkr7
3BRtl9nz26VXuncACAavs1xs8oFgFeuhx1+nBSbWIWRjD8YqbJJMPzMBPjIcmWFS
Sz8gWBVEvPjGLOM3Q4JBYUj6ov71hjqsaw2sIj2IMcLZ3SIKPYbq5qs44PTjK82j
HH0dsc5/kIr9/9oKoxWiyDmFrfFncAQYQuZRGbqH/rrH46yn6XYOrf15HKTWJKiZ
Hbmcet5lVoVk79MmzPqd8nxKYYeZnluocKZ56679VyoVnjSp8VDeF+YHDBB+uoME
b3/QAO/KDr5OW3TN/Ef4H2uAVaac5/9dhIg6Bp6Jq6uYYOolfJ9tKO86BULzan7s
sya90n4o1Uff+oQH9IRUNuYCZ73HIA5n/rkfaPj4paDlHtMMkm0PzQUbwuXL3myi
frPNZol8nxgMMxZB7GOGLtiqATSjSehra7p+tyErRyM9QNuLW6Q0La2JbaziRxJG
yTpoPF9mx6fPAC08wIKrLeM2aX0nd0JcXsW0z38BKCJfIw5OM2a3WWYruuLQaxDm
7c7Cpun6QzvhVq28M7xXw+jau+jN2p3CoS3A/jowJ55hLuKH28A=
=zjsM
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180822150536</emailId><senderName>Robin Descamps</senderName><senderEmail>robin.descamps@outlook.com</senderEmail><timestampReceived>2018-08-22 15:05:36-0400</timestampReceived><subject>Re: [tor-dev] Relay diversity master thesis</subject><body>

[Attachment #2 (text/plain)]

Since there is trouble accessing the thesis through the university website, I give to \
you an alternative link:

https://drive.google.com/open?id=1UVDeJc_N7GgJz1y5_e4KSxhfaNETy42m

Sorry for the inconvenience,

Robin Descamps

Le 21 aoÃ»t 2018 Ã  16:23, Robin Descamps \
&lt;robin.descamps@outlook.com&lt;mailto:robin.descamps@outlook.com&gt;&gt; a Ã©crit :

Hello,

I would like to share with you the master thesis I wrote this year on a topic \
concerning diversity in Tor, that I evoked earlier this year. I would like to thanks \
all the dev that have shared feedback with me about my thesis plan. This work may not \
be perfect, but could start/influence the research in the future hopefully. Here is \
the abstract and the access link:

Tor is the most popular anonymous communication system nowadays, that set up a \
excellent compromise between anonymity and performance. However, Tor is by design \
vulnerable to end-to-end correlation attacks. Many techniques have been and are being \
developed in order to mitigate these attacks. This master thesis objective is to \
define the utility of a new relay, and to give a measure of its contribution to the \
diversity of the network. This is achieved with a modified version of the TorPS , \
which simulate the Tor network against both relay and network adversaries. More \
diversity means less end-to-end correlation attacks possible by the latter. At the \
end, we would like the volunteers to be aware of the utility they bring to the Tor \
network security with a certain relay configuration.

https://dial.uclouvain.be/memoire/ucl/fr/object/thesis%3A14661&lt;https://dial.uclouvain.be/memoire/ucl/fr/object/thesis:14661&gt;


Thanks,

Robin Descamps

Le 22 dÃ©c. 2017 Ã  01:23, Robin Descamps \
&lt;robin.descamps@outlook.com&lt;mailto:robin.descamps@outlook.com&gt;&gt; a Ã©crit :

Hello,

I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.

I realise this year a master thesis, in the UniversitÃ© catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as well as a poster that presents a summary of the key elements.

May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it.

The master thesis plan: \
https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx The poster: \
https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4

Thanks,
Robin Descamps


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; line-break: \
after-white-space;" class=""&gt; Since there is trouble accessing the thesis through the \
university website, I give to you an alternative link: &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;a href="https://drive.google.com/open?id=1UVDeJc_N7GgJz1y5_e4KSxhfaNETy42m" \
class=""&gt;https://drive.google.com/open?id=1UVDeJc_N7GgJz1y5_e4KSxhfaNETy42m&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; &lt;/div&gt;
&lt;div class=""&gt;Sorry for the inconvenience,&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;Robin Descamps&lt;br class=""&gt;
&lt;div&gt;&lt;br class=""&gt;
&lt;blockquote type="cite" class=""&gt;
&lt;div class=""&gt;Le 21 aoÃ»t 2018 Ã  16:23, Robin Descamps &lt;&lt;a \
href="mailto:robin.descamps@outlook.com" class=""&gt;robin.descamps@outlook.com&lt;/a&gt;&gt; \
a Ã©crit :&lt;/div&gt; &lt;br class="Apple-interchange-newline"&gt;
&lt;div class=""&gt;
&lt;div style="word-wrap: break-word; -webkit-nbsp-mode: space; line-break: \
after-white-space;" class=""&gt; Hello,
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;I would like to share with you the master thesis I wrote this year on a \
topic concerning diversity in Tor, that I evoked earlier this year. I would like to \
thanks all the dev that have shared feedback with me about my thesis plan. This work \
may  not be perfect, but could start/influence the research in the future hopefully. \
Here is the abstract and the access link:&lt;/div&gt; &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;span style="color: rgb(68, 68, 68); font-family: "PT Sans", \
HelveticaNeue, "Helvetica Neue", Helvetica, Arial, sans-serif; \
font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, \
255, 255);" class=""&gt;Tor is the most  popular anonymous communication system \
nowadays, that set up a excellent compromise between anonymity and performance. \
However, Tor is by design vulnerable to end-to-end correlation attacks. Many \
techniques have been and are being developed in order to mitigate  these attacks. \
This master thesis objective is to define the utility of a new relay, and to give a \
measure of its contribution to the diversity of the network. This is achieved with a \
modified version of the TorPS , which simulate the Tor network against both  relay \
and network adversaries. More diversity means less end-to-end correlation attacks \
possible by the latter. At the end, we would like the volunteers to be aware of the \
utility they bring to the Tor network security with a certain relay \
configuration.&lt;/span&gt;&lt;/div&gt; &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;a href="https://dial.uclouvain.be/memoire/ucl/fr/object/thesis:14661" \
class=""&gt;https://dial.uclouvain.be/memoire/ucl/fr/object/thesis%3A14661&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; &lt;/div&gt;
&lt;div class=""&gt;Thanks,&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;Robin Descamps&lt;br class=""&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;blockquote type="cite" class=""&gt;
&lt;div class=""&gt;Le 22 dÃ©c. 2017 Ã  01:23, Robin Descamps &lt;&lt;a \
href="mailto:robin.descamps@outlook.com" class=""&gt;robin.descamps@outlook.com&lt;/a&gt;&gt; \
a Ã©crit :&lt;/div&gt; &lt;br class="Apple-interchange-newline"&gt;
&lt;div class=""&gt;
&lt;div style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: \
after-white-space;" class=""&gt; Hello,&lt;br class=""&gt;
&lt;br class=""&gt;
I already sent this message to the metrics team, but they advice me to address it to \
the dev team, which seem to be more relevant.&lt;br class=""&gt; &lt;br class=""&gt;
I realise this year a master thesis, in the UniversitÃ© catholique de Louvain in \
Belgium, about measuring the utility brought to the Tor network diversity by adding a \
new relay, according to its configuration. I added to this message my master thesis \
plan, as  well as a poster that presents a summary of the key elements.&lt;br class=""&gt;
&lt;br class=""&gt;
May I ask you advices/feedback about this master thesis plan? Since I would like this \
project to bring a real contribution to the Tor development, I want to make sure that \
all the steps I will perform are useful and/or worth it. &lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;The master thesis plan: &lt;a \
href="https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx" \
class=""&gt;https://drive.google.com/open?id=1XEOSS29owavKJ_cJJAVaPiJe34Ez6XXx&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;The poster: &lt;a \
href="https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4" \
class=""&gt;https://drive.google.com/open?id=1BlF2U-Kexyz6ihVSqvsVHv4PUsvXATc4&lt;/a&gt;&lt;/div&gt; \
&lt;div class=""&gt;&lt;br class=""&gt; Thanks,&lt;br class=""&gt;
Robin Descamps
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;br class=""&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;br class=""&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180105223332</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-05 22:33:32-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 27 Dec 2017, at 21:53, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt;&gt; On 26 Dec 2017, at 18:47, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; On 25 Dec 2017, at 07:26, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; As we are planning to also add a parser to metrics-lib (#24434), would
&gt;&gt;&gt; it be possible to get a full description of the format of the file
&gt;&gt;&gt; possibly in RFC5234 format so that we can check that the generator and
&gt;&gt;&gt; parsers all match up to that specification?
&gt;&gt; 
&gt;&gt; I have written up a format in the standard torspec style:
&gt;&gt; 
&gt;&gt; https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt
&gt;&gt; 
&gt;&gt; It is deliberately under-specified, please let me know if this causes
&gt;&gt; any trouble when writing the parser, and I will tighten it up.
&gt;&gt; 
&gt;&gt; It's not ABNF/RFC5234, it's rather restrictive, and strict ABNF is
&gt;&gt; unreadable for case sensitive strings. I am happy to put an ABNF spec in
&gt;&gt; an appendix, if someone wants to write one.
&gt; 
&gt; We've added separators to each section, and a timestamp field in the header.
&gt; 
&gt; The revised spec is here:
&gt; 
&gt; https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt
&gt; 
&gt; The revised sample file is here:
&gt; 
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_new_format_version.4.inc
&gt; 
&gt; We're tracking the details in this ticket:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/24742

We have merged the list format change to Tor's master branch.

The fallback 2.0.0 spec hasn't been merged yet, but atagar has reviewed it.
It's at:
https://github.com/teor2345/torspec/blob/fallback-format-2-v2/fallback-spec.txt

The fallback list is now in the 2.0.0 format, but it has exactly the same fallbacks in it:
https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc

Some time over the next few days, we will generate a new list of fallbacks in
the 2.0.0 format, and backport it to Tor 0.2.9 and later.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;div&gt;On 27 Dec 2017, at 21:53, \
teor &lt;&lt;a href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 26 Dec 2017, at 18:47, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 25 Dec 2017, at 07:26, Iain Learmonth &lt;&lt;a \
href="mailto:irl@torproject.org"&gt;irl@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;As we are planning to also add a parser to \
metrics-lib (#24434), would&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;it be possible to get a full description of \
the format of the file&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;possibly in RFC5234 format so that we can \
check that the generator and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;parsers all match up to that \
specification?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I have \
written up a format in the standard torspec style:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt"&gt;ht \
tps://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It is \
deliberately under-specified, please let me know if this \
causes&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;any trouble when writing \
the parser, and I will tighten it up.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It's not \
ABNF/RFC5234, it's rather restrictive, and strict ABNF \
is&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;unreadable for case sensitive \
strings. I am happy to put an ABNF spec in&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;an appendix, if someone wants to write \
one.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;We've added separators to each \
section, and a timestamp field in the header.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The \
revised spec is here:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt"&gt;ht \
tps://github.com/teor2345/torspec/blob/fallback-format-2/fallback-spec.txt&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The \
revised sample file is here:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/22759/fallback_dirs_n \
ew_format_version.4.inc"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/22 \
759/fallback_dirs_new_format_version.4.inc&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;We're \
tracking the details in this ticket:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24742"&gt;https://trac.torproject.org/projects/tor/ticket/24742&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;We \
have merged the list format change to Tor's master \
branch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The fallback 2.0.0 spec hasn't been merged yet, but \
atagar has reviewed it.&lt;/div&gt;&lt;div&gt;It's at:&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://github.com/teor2345/torspec/blob/fallback-format-2-v2/fallback-spec.txt" \
&gt;https://github.com/teor2345/torspec/blob/fallback-format-2-v2/fallback-spec.txt&lt;/a&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
&gt; fallback list is now in the 2.0.0 format, but it has exactly the same fallbacks in \
&gt; it:&lt;/div&gt;&lt;div&gt;&lt;a href="https://gitweb.torproject.org/tor.git/tree/src/or/fallback_di \
&gt; rs.inc"&gt;https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Some \
&gt; time over the next few days, we will generate a new list of fallbacks \
&gt; in&lt;/div&gt;&lt;div&gt;the 2.0.0 format, and backport it to Tor 0.2.9 and \
&gt; later.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180106155245</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-01-06 15:52:45-0400</timestampReceived><subject>Re: [tor-dev] New Fallback Directory File Format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 05/01/18 22:33, teor wrote:
&gt; The fallback 2.0.0 spec hasn't been merged yet, but atagar has reviewed it.
&gt; It's at:
&gt; https://github.com/teor2345/torspec/blob/fallback-format-2-v2/fallback-spec.txt

I've added this link to the Metrics ticket #24434, I started work on
this but ran out of time after not getting very far at all.

&gt; The fallback list is now in the 2.0.0 format, but it has exactly the
&gt; same fallbacks in it:
&gt; https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc
&gt; 
&gt; Some time over the next few days, we will generate a new list of
&gt; fallbacks in
&gt; the 2.0.0 format, and backport it to Tor 0.2.9 and later.

Ok, I'll see if I can do a quick hack workaround to generate the list
for Relay Search until the data is available through Tor Metrics.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180103103700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-03 10:37:00-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello Damian,

Damian Johnson:
&gt; Hi nusenu. Yup, I was just thinking about that. CenturyLink did some
&gt; work on my apartment's connection yesterday that knocked it offline.
&gt; Probably just needs the router to be rebooted but I'm visiting with
&gt; family through new years so the r2e instance will be unavailable until
&gt; then.

are you planing to bring this functionality back any time soon? 

thanks for considering it,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180103165809</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-01-03 16:58:09-0400</timestampReceived><subject>Re: [tor-dev] Did tor-wiki-changes ML break?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi nusenu. Yup, a CenturyLink technician is coming in a few hours to
restore my connection. Note to self: losing home internet connectivity
sucks.

Cheers! -Damian from a coffee shop

On Jan 3, 2018 2:38 AM, "nusenu" &lt;nusenu-lists@riseup.net&gt; wrote:

Hello Damian,

Damian Johnson:
&gt; Hi nusenu. Yup, I was just thinking about that. CenturyLink did some
&gt; work on my apartment's connection yesterday that knocked it offline.
&gt; Probably just needs the router to be rebooted but I'm visiting with
&gt; family through new years so the r2e instance will be unavailable until
&gt; then.

are you planing to bring this functionality back any time soon?

thanks for considering it,
nusenu

--
https://mastodon.social/@nusenu
twitter: @nusenu_


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;Hi nusenu. Yup, a CenturyLink technician is coming in a few \
hours to restore my connection. Note to self: losing home internet connectivity \
sucks.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Cheers! -Damian from a coffee \
shop&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div class="gmail_extra" dir="auto"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Jan 3, 2018 2:38 AM, "nusenu" &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;Hello Damian,&lt;br&gt; &lt;br&gt;
Damian Johnson:&lt;br&gt;
&lt;div class="quoted-text"&gt;&gt; Hi nusenu. Yup, I was just thinking about that. \
CenturyLink did some&lt;br&gt; &gt; work on my apartment's connection yesterday that \
knocked it offline.&lt;br&gt; &gt; Probably just needs the router to be rebooted but \
I'm visiting with&lt;br&gt; &gt; family through new years so the r2e instance will be \
unavailable until&lt;br&gt; &gt; then.&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;are you planing to bring this functionality back any time soon?&lt;br&gt;
&lt;br&gt;
thanks for considering it,&lt;br&gt;
&lt;div class="elided-text"&gt;nusenu&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
&lt;a href="https://mastodon.social/@nusenu" rel="noreferrer" \
                target="_blank"&gt;https://mastodon.social/@&lt;wbr&gt;nusenu&lt;/a&gt;&lt;br&gt;
twitter: @nusenu_&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180109025625</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-09 02:56:25-0400</timestampReceived><subject>Re: [tor-dev] [tor-project] Intent to Minimise Effort: Fallback Directory Mirrors</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

I'd like to move this thread to the tor-dev list. I made a list of
Core Tor tickets at the end of this email. Let's talk about them
on tor-dev.

Here's some background:

Rebuilding the fallback list takes a lot of effort!

So I'm picking up this tor-project thread while the latest fallback rebuild
is fresh in my mind.

The rebuild took a day or two of my time for regular changes.
And another day or two for once-off changes.

We made a few changes to streamline the process:
* atagar and I wrote scripts that make it easier to generate fallback lines,
  and get operator contact details [0]
* pastly, atagar and irl helped out with code reviews and list format changes,
  which should make the list easier to read and parse
* pastly and nickm helped out with fallback list updates and backport

Having this help meant that I had time to make the process better.
Thanks!

But there's still more we can do:

&gt; On 29 Aug 2017, at 11:12, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt;&gt; On 28 Aug 2017, at 18:15, Linus Nordberg &lt;linus@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; teor &lt;teor2345@gmail.com&gt; wrote
&gt;&gt; Sat, 26 Aug 2017 22:39:52 +1000:
&gt;&gt; 
&gt;&gt;&gt; So I can't see any reasons to keep running opt-ins.
&gt;&gt; 
&gt;&gt; Are we listing non-exits?
&gt; 
&gt; Yes. Non-exits and under-used exits are the best fallback directory
&gt; mirrors, because they are under less load.
&gt; 
&gt;&gt; I suppose those might see a radical change in
&gt;&gt; their "IP reputation" when they end up on the blocklists after the next
&gt;&gt; ransomware attack. Exits are already in the lists.
&gt; 
&gt; Yes, there is a higher risk that a fallback will end up on one of these
&gt; lists. But all public Tor relays are at risk of ending up on a list like
&gt; this.

Because of the higher risk, we will continue to ask relay operators to
opt-in [1]. So we need to find people to help with this process every
6-12 months. And make it more efficient.

&gt;&gt; On 28 Aug 2017, at 19:34, Silvia [Hiro] &lt;hiro@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; On 26/08/17 15:44, nusenu wrote:
&gt;&gt;&gt;&gt;&gt; use ContactInfo
&gt;&gt;&gt;&gt;&gt; as a way to collect the intention of relay operators to opt-in/opt-out
&gt;&gt;&gt;&gt;&gt; of the fallback directory mirrors list.
&gt;&gt;&gt;&gt; This is a good idea, *if* we still think an opt-in is necessary.
&gt;&gt;&gt; 
&gt;&gt;&gt; Isn't that way to collect operator intentions also useful in opt-out
&gt;&gt;&gt; mode? (instead of continuing to use emails) Or how do you plan to
&gt;&gt;&gt; collect the opt-out info?
&gt;&gt; 
&gt;&gt; Why are emails preferred over other methods? Another options would be
&gt;&gt; wrapping a script that ops can run to create a cyberpunk trac ticket and
&gt;&gt; opt-out. This is probably easier than merging emails. But maybe we do
&gt;&gt; not want to handle this through trac.
&gt;&gt; 
&gt;&gt; I'd be happy to help w/ that eventually, and the fallback script.
&gt; 
&gt; This is a good idea.
&gt; 
&gt; At the moment, I take emails sent to me or tor-relays, and turn them
&gt; into trac comments or trac tickets. If we put it directly on trac,
&gt; anyone could handle the ticket.

The most time-consuming part of the rebuild is the opt-in process.

Here's what we do at the moment: [2]

0. Send an email to tor-relays to ask operators to opt-in
1. Run a script to find fallbacks whose details have changed, and email
   tor-relays to ask operators if their details are permanent

Here are the most time-consuming steps:

2a. Receive personal emails and emails to the list with fallback details
2b. Generate an updated fallback line for each relay [0]
2c. Update the whitelist

And these steps are quick:

3. Run the update script to generate a new list
4. Write a changes file
5. Announce the new list
6. Backport the list to all supported Tor versions

Here are some things I'd like to change:

Just have relay fingerprints in the fallback whitelist [3]

The fallback script checks relay details, but it can just rely on Onionoo
to say when the address last changed.

This removes step 1 and step 2b.


Add a torrc option and descriptor line to opt-in as a FallbackDir [4]

This is inspired by nusenu's "ContactInfo" idea, and Hiro's "bot" idea.
Having a descriptor line and torrc option gets us a more reliable
implementation, and it's easier for relay operators to use. And
there's no need for an email bot or trac bot.

This removes step 2a and step 2c, for tor versions with this feature.
For tor versions without this feature, we can use the simpler fingerprint
list.


Make the hard-coded authorities into a separate include file with a standard format [5]

We'll also change the fallback file format (again, sorry!) to make
them consistent. This makes it easier for stem, metrics-lib, and
other Tor implementations to use the same authorities and fallbacks.

This makes step 5 easier (for libraries that use fallbacks).


Let's discuss these changes on the tor-dev list!

T

[0]: https://gitweb.torproject.org/tor.git/tree/scripts/maint/generateFallbackDirLine.py
     https://gitweb.torproject.org/tor.git/tree/scripts/maint/lookupFallbackDirContact.py
[1]: https://trac.torproject.org/projects/tor/ticket/24789
[2]: https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors
[3]: https://trac.torproject.org/projects/tor/ticket/24838
[4]: https://trac.torproject.org/projects/tor/ticket/24839
[5]: https://trac.torproject.org/projects/tor/ticket/24818

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpUL1kACgkQdA2eOQJS
cqJymQ//cue2mIbmneeaiQBld9/apKMJm1GhhGtlqxfs2KhR6OsjhouxwBOWOGy5
b7t/z/HraMgKeKWiysnyufdYsKcDMZASx5g5Ltc6YYD6xcGhAkaxaCLYu77o3ekw
9VMUiHzWkLEoH+7YvCq/UigIacM+RY0gGvStaxqJrcdvgh+vBrvH31roCAywaC3g
gYRHIPcDusnuhatOoouTVV3xD+FoZF+fmGkS49jCE5ckIXZN7tt/0TWRUaOuVUNa
Qf9ce3pnU5VbbvuxhYMtDoui2qldexgdubJ1Zk+biQ6CR54AMFJiH9zT3B8Fp4jt
YPcEId2r/ztdTYUSJw0Dp3f88ANedxIPeCCrGaLY8pPv9Cp9NV1NEj9qvCUG/HlR
dmLV3P8IWsHAL6jHg11OmlnBAdlkR3TbTQM+qXULa50PjEShYNM+xjjBc7NJMU6z
YSlw0jjCM9tZR1QKQHPtIGGZLtab8w334QQdmd6NhrpIVE7tu0zLBGo7qfNzVr4x
l+9TE2kJB8RZGFyfFiP81Y68++aJbGrL9bP+A8mpDc1CSRH4SPx5iimwqJ0C+T0y
Q47PKiyUOq0HlU0918sygIEqO4uAogr/YFPBPIvtN8/NJGzj9LbAtSODVi5l0MF7
RM3/gWoty5AdW5KRw2rXXizHSBdy3AytneyWfDtfAii14ZlQiIk=
=HjU1
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110134300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-10 13:43:00-0400</timestampReceived><subject>[tor-dev] Why do DirAuths take that long to update a relay's version information?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

the goal of this email is to avoid a false positive warning for relay operators
on atlas but the root cause might be in core tor.

background:
I really liked when irl added the big red warning to atlas when a tor relay
runs an outdated (aka not running a "recommended") tor version
because it actually triggered operators to upgrade, an important step toward a more \
healthy network. The problem is: This big red banner on atlas has false-positives \
which confuses operators [0].

Originally this has been an onionoo bug which
has been fixed in v1.8.0, but it happens again and Karsten had the feeling
that tor dir auths do not update  the version information of a relay after it
upgraded (and uploaded a new descriptor). I looked into one example and can confirm \
what Karsten suggested [1].

Let me show you that example of FP 1283EBDEEC2B9D745F1E7FBE83407655B984FD66.
Data has been provided by Karsten and is available here: [2].

That relay was running 0.3.0.10 and upgraded to 0.3.0.13 and uploaded his first 
descriptor with 0.3.0.13 on:

2018-01-09 10:14:00,server,,0.3.0.13

except for bastet dir auths did not care and still said this relay runs
0.3.0.10:

2018-01-09 11:00:00,consensus,,0.3.0.10
2018-01-09 11:00:00,vote,bastet,0.3.0.13  &lt;&lt;&lt;&lt; note 
2018-01-09 11:00:00,vote,dannenberg,0.3.0.10
2018-01-09 11:00:00,vote,dizum,0.3.0.10
2018-01-09 11:00:00,vote,Faravahar,0.3.0.10
2018-01-09 11:00:00,vote,gabelmoo,0.3.0.10
2018-01-09 11:00:00,vote,longclaw,0.3.0.10
2018-01-09 11:00:00,vote,maatuska,0.3.0.10
2018-01-09 11:00:00,vote,moria1,0.3.0.10
2018-01-09 11:00:00,vote,tor26,0.3.0.10
2018-01-09 12:00:00,consensus,,0.3.0.10
2018-01-09 12:00:00,vote,bastet,0.3.0.13 &lt;&lt;&lt;&lt;&lt;&lt;
2018-01-09 12:00:00,vote,dannenberg,0.3.0.10
2018-01-09 12:00:00,vote,dizum,0.3.0.10
2018-01-09 12:00:00,vote,Faravahar,0.3.0.10
2018-01-09 12:00:00,vote,gabelmoo,0.3.0.10
2018-01-09 12:00:00,vote,longclaw,0.3.0.10
2018-01-09 12:00:00,vote,maatuska,0.3.0.10
2018-01-09 12:00:00,vote,moria1,0.3.0.10
2018-01-09 12:00:00,vote,tor26,0.3.0.10

even 6 hours later this is unchanged.

Then the operator upgraded from 0.3.0.13 to 0.3.1.9
and uploaded his first descriptor:

2018-01-09 16:39:01,server,,0.3.1.9

this remained "unnoticed" by all dir auths until
longclaw voted for the new version:

2018-01-09 23:00:00,consensus,,0.3.0.10
2018-01-09 23:00:00,vote,bastet,0.3.0.10
2018-01-09 23:00:00,vote,dannenberg,0.3.0.10
2018-01-09 23:00:00,vote,dizum,0.3.0.10
2018-01-09 23:00:00,vote,Faravahar,0.3.0.10
2018-01-09 23:00:00,vote,gabelmoo,0.3.0.10
2018-01-09 23:00:00,vote,longclaw,0.3.1.9 &lt;&lt;&lt;&lt;&lt;
2018-01-09 23:00:00,vote,maatuska,0.3.0.10
2018-01-09 23:00:00,vote,moria1,0.3.0.10
2018-01-09 23:00:00,vote,tor26,0.3.0.10 

On 2018-01-10 02:38:07 the relay uploaded a second descriptor with
v0.3.1.9 and almost all dir auths agreed immediately:

2018-01-10 02:38:07,server,,0.3.1.9
2018-01-10 03:00:00,consensus,,0.3.1.9
2018-01-10 03:00:00,vote,bastet,0.3.0.10
2018-01-10 03:00:00,vote,dannenberg,0.3.1.9
2018-01-10 03:00:00,vote,dizum,0.3.1.9
2018-01-10 03:00:00,vote,Faravahar,0.3.1.9
2018-01-10 03:00:00,vote,gabelmoo,0.3.1.9
2018-01-10 03:00:00,vote,longclaw,0.3.1.9
2018-01-10 03:00:00,vote,maatuska,0.3.1.9
2018-01-10 03:00:00,vote,moria1,0.3.1.9
2018-01-10 03:00:00,vote,tor26,0.3.1.9


So it took the operator 17 hours to convince enough 
dir auths that he upgraded.
I can see multiple reasons why this can make sense (as the tor version
is actually not that relevant consensus data) but maybe it was
not clear what the side effects of not updating that field are.

While I believe there is still another onionoo issue,
this should also be improved.

Thoughts?



[0] http://lists.nycbug.org/pipermail/tor-bsd/2018-January/000620.html
[1] https://trac.torproject.org/projects/tor/ticket/22488#comment:11
[2] https://trac.torproject.org/projects/tor/attachment/ticket/22488/task-22488-relay-versions.csv.gz




-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110224836</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 22:48:36-0400</timestampReceived><subject>Re: [tor-dev] Why do DirAuths take that long to update a relay's version information?</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 11 Jan 2018, at 00:43, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; the goal of this email is to avoid a false positive warning for relay operators
&gt; on atlas but the root cause might be in core tor.
&gt; 
&gt; background:
&gt; I really liked when irl added the big red warning to atlas when a tor relay
&gt; runs an outdated (aka not running a "recommended") tor version
&gt; because it actually triggered operators to upgrade, an important step toward a more \
&gt; healthy network. The problem is: This big red banner on atlas has false-positives \
&gt; which confuses operators [0]. 
&gt; Originally this has been an onionoo bug which
&gt; has been fixed in v1.8.0, but it happens again and Karsten had the feeling
&gt; that tor dir auths do not update  the version information of a relay after it
&gt; upgraded (and uploaded a new descriptor). I looked into one example and can confirm \
&gt; what Karsten suggested [1].

I have opened a feature request for consensus-health to show per-relay
versions in the details and overlap tables:

https://trac.torproject.org/projects/tor/ticket/24862

Unfortunately, consensus-health does not parse descriptors, so we will
have to rely on at least one authority picking up the new version. But
it's a start, and it will help us monitor the fix and any regressions.

&gt; Let me show you that example of FP 1283EBDEEC2B9D745F1E7FBE83407655B984FD66.
&gt; Data has been provided by Karsten and is available here: [2].
&gt; 
&gt; That relay was running 0.3.0.10 and upgraded to 0.3.0.13 and uploaded his first 
&gt; descriptor with 0.3.0.13 on:
&gt; 
&gt; 2018-01-09 10:14:00,server,,0.3.0.13
&gt; 
&gt; except for bastet dir auths did not care and still said this relay runs
&gt; 0.3.0.10:
&gt; 
&gt; 2018-01-09 11:00:00,consensus,,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,bastet,0.3.0.13  &lt;&lt;&lt;&lt; note 
&gt; 2018-01-09 11:00:00,vote,dannenberg,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,dizum,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,Faravahar,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,gabelmoo,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,longclaw,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,maatuska,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,moria1,0.3.0.10
&gt; 2018-01-09 11:00:00,vote,tor26,0.3.0.10
&gt; 2018-01-09 12:00:00,consensus,,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,bastet,0.3.0.13 &lt;&lt;&lt;&lt;&lt;&lt;
&gt; 2018-01-09 12:00:00,vote,dannenberg,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,dizum,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,Faravahar,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,gabelmoo,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,longclaw,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,maatuska,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,moria1,0.3.0.10
&gt; 2018-01-09 12:00:00,vote,tor26,0.3.0.10
&gt; 
&gt; even 6 hours later this is unchanged.
&gt; 
&gt; Then the operator upgraded from 0.3.0.13 to 0.3.1.9
&gt; and uploaded his first descriptor:
&gt; 
&gt; 2018-01-09 16:39:01,server,,0.3.1.9
&gt; 
&gt; this remained "unnoticed" by all dir auths until
&gt; longclaw voted for the new version:
&gt; 
&gt; 2018-01-09 23:00:00,consensus,,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,bastet,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,dannenberg,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,dizum,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,Faravahar,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,gabelmoo,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,longclaw,0.3.1.9 &lt;&lt;&lt;&lt;&lt;
&gt; 2018-01-09 23:00:00,vote,maatuska,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,moria1,0.3.0.10
&gt; 2018-01-09 23:00:00,vote,tor26,0.3.0.10 
&gt; 
&gt; On 2018-01-10 02:38:07 the relay uploaded a second descriptor with
&gt; v0.3.1.9 and almost all dir auths agreed immediately:
&gt; 
&gt; 2018-01-10 02:38:07,server,,0.3.1.9
&gt; 2018-01-10 03:00:00,consensus,,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,bastet,0.3.0.10
&gt; 2018-01-10 03:00:00,vote,dannenberg,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,dizum,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,Faravahar,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,gabelmoo,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,longclaw,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,maatuska,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,moria1,0.3.1.9
&gt; 2018-01-10 03:00:00,vote,tor26,0.3.1.9
&gt; 
&gt; 
&gt; So it took the operator 17 hours to convince enough 
&gt; dir auths that he upgraded.
&gt; I can see multiple reasons why this can make sense (as the tor version
&gt; is actually not that relevant consensus data) but maybe it was
&gt; not clear what the side effects of not updating that field are.
&gt; 
&gt; While I believe there is still another onionoo issue,
&gt; this should also be improved.
&gt; 
&gt; Thoughts?

I've looked at the Tor source code that handles versions. Version
parsing and voting seem to happen unconditionally.

I also checked router_differences_are_cosmetic(), and it seems to
handle platform string changes correctly.

So maybe the issue is in the descriptor fetching and updating logic?
How many authorities received the new descriptor?
Did any of the other fields in the vote change when the new descriptor
was updated?

Can we get logs from the relays that are affected by this issue, so we
can see how many authorities they uploaded to?
Can we get logs from some authorities so we see how they handled the
new descriptor?

It might also help to open a core tor ticket to track this.

&gt; [0] http://lists.nycbug.org/pipermail/tor-bsd/2018-January/000620.html
&gt; [1] https://trac.torproject.org/projects/tor/ticket/22488#comment:11
&gt; [2] https://trac.torproject.org/projects/tor/attachment/ticket/22488/task-22488-relay-versions.csv.gz
&gt; 


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 11 Jan 2018, at 00:43, nusenu \
&lt;&lt;a href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;the goal of this email is \
to avoid a false positive warning for relay operators&lt;/span&gt;&lt;br&gt;&lt;span&gt;on atlas but \
the root cause might be in core \
tor.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;background:&lt;/span&gt;&lt;br&gt;&lt;span&gt;I really liked when \
irl added the big red warning to atlas when a tor relay&lt;/span&gt;&lt;br&gt;&lt;span&gt;runs an \
outdated (aka not running a "recommended") tor version&lt;/span&gt;&lt;br&gt;&lt;span&gt;because it \
actually triggered operators to upgrade, an important step toward a more healthy \
network.&lt;/span&gt;&lt;br&gt;&lt;span&gt;The problem is: This big red banner on atlas has \
false-positives which confuses operators \
[0].&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Originally this has been an onionoo bug \
which&lt;/span&gt;&lt;br&gt;&lt;span&gt;has been fixed in v1.8.0, but it happens again and Karsten had \
the feeling&lt;/span&gt;&lt;br&gt;&lt;span&gt;that tor dir auths do not update  the version \
information of a relay after it&lt;/span&gt;&lt;br&gt;&lt;span&gt;upgraded (and uploaded a new \
descriptor). I looked into one example and can confirm what Karsten suggested \
[1].&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have opened a feature request \
for consensus-health to show per-relay&lt;/div&gt;&lt;div&gt;versions in the details and overlap \
tables:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24862#ticket"&gt;https://trac.torproject.org/projects/tor/ticket/24862&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Unfortunately, \
consensus-health does not parse descriptors, so we will&lt;/div&gt;&lt;div&gt;have to rely on at \
least one authority picking up the new version. But&lt;/div&gt;&lt;div&gt;it's a start, and it \
will help us monitor the fix and any regressions.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Let me show you that example of FP \
1283EBDEEC2B9D745F1E7FBE83407655B984FD66.&lt;/span&gt;&lt;br&gt;&lt;span&gt;Data has been provided by \
Karsten and is available here: [2].&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;That relay was \
running 0.3.0.10 and upgraded to 0.3.0.13 and uploaded his first \
&lt;/span&gt;&lt;br&gt;&lt;span&gt;descriptor with 0.3.0.13 \
on:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
10:14:00,server,,0.3.0.13&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;except for bastet dir \
auths did not care and still said this relay \
runs&lt;/span&gt;&lt;br&gt;&lt;span&gt;0.3.0.10:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,consensus,,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 11:00:00,vote,bastet,0.3.0.13 \
 &lt;&lt;&lt;&lt; note &lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,dannenberg,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,dizum,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,Faravahar,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,gabelmoo,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,longclaw,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,maatuska,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,moria1,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
11:00:00,vote,tor26,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,consensus,,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 12:00:00,vote,bastet,0.3.0.13 \
&lt;&lt;&lt;&lt;&lt;&lt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,dannenberg,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,dizum,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,Faravahar,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,gabelmoo,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,longclaw,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,maatuska,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,moria1,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
12:00:00,vote,tor26,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;even 6 hours later this \
is unchanged.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Then the operator upgraded from \
0.3.0.13 to 0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;and uploaded his first \
descriptor:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
16:39:01,server,,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;this remained "unnoticed" \
by all dir auths until&lt;/span&gt;&lt;br&gt;&lt;span&gt;longclaw voted for the new \
version:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,consensus,,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,bastet,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,dannenberg,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,dizum,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,Faravahar,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,gabelmoo,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,longclaw,0.3.1.9 &lt;&lt;&lt;&lt;&lt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,maatuska,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 \
23:00:00,vote,moria1,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-09 23:00:00,vote,tor26,0.3.0.10 \
&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;On 2018-01-10 02:38:07 the relay uploaded a second \
descriptor with&lt;/span&gt;&lt;br&gt;&lt;span&gt;v0.3.1.9 and almost all dir auths agreed \
immediately:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
02:38:07,server,,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,consensus,,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,bastet,0.3.0.10&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,dannenberg,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,dizum,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,Faravahar,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,gabelmoo,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,longclaw,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,maatuska,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,moria1,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;2018-01-10 \
03:00:00,vote,tor26,0.3.1.9&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;So it \
took the operator 17 hours to convince enough &lt;/span&gt;&lt;br&gt;&lt;span&gt;dir auths that he \
upgraded.&lt;/span&gt;&lt;br&gt;&lt;span&gt;I can see multiple reasons why this can make sense (as the \
tor version&lt;/span&gt;&lt;br&gt;&lt;span&gt;is actually not that relevant consensus data) but maybe \
it was&lt;/span&gt;&lt;br&gt;&lt;span&gt;not clear what the side effects of not updating that field \
are.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;While I believe there is still another onionoo \
issue,&lt;/span&gt;&lt;br&gt;&lt;span&gt;this should also be \
improved.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Thoughts?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've \
looked at the Tor source code that handles versions. Version&lt;/div&gt;&lt;div&gt;parsing and \
voting seem to happen unconditionally.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I also checked \
router_differences_are_cosmetic(), and it seems to&lt;/div&gt;&lt;div&gt;handle platform string \
changes correctly.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So maybe the issue is in the descriptor \
fetching and updating logic?&lt;/div&gt;&lt;div&gt;How many authorities received the new \
descriptor?&lt;/div&gt;&lt;div&gt;Did any of the other fields in the vote change when the new \
descriptor&lt;/div&gt;&lt;div&gt;was updated?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can we get logs from the \
relays that are affected by this issue, so we&lt;/div&gt;&lt;div&gt;can see how many authorities \
they uploaded to?&lt;/div&gt;&lt;div&gt;Can we get logs from some authorities so we see how they \
handled the&lt;/div&gt;&lt;div&gt;new descriptor?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It might also help to \
open a core tor ticket to track this.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;[0] \
&lt;a href="http://lists.nycbug.org/pipermail/tor-bsd/2018-January/000620.html"&gt;http://li \
sts.nycbug.org/pipermail/tor-bsd/2018-January/000620.html&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;[1] &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/22488#comment:11"&gt;https://trac.torproject.org/projects/tor/ticket/22488#comment:11&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;[2] \
&lt;a href="https://trac.torproject.org/projects/tor/attachment/ticket/22488/task-22488-r \
elay-versions.csv.gz"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/22488 \
/task-22488-relay-versions.csv.gz&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110003847</emailId><senderName>Beastr0</senderName><senderEmail>beastr0@protonmail.com</senderEmail><timestampReceived>2018-01-10 00:38:47-0400</timestampReceived><subject>[tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hey guys,

For the time being I would prefer to not have my real name attached to Tor so I hope \
you don't mind if I introduce myself as Beastro.

I love Tor and its mission. I was wondering if you guys had any projects that I could \
help out with? I can write code in python, java, C and also have plenty of experience \
with plenty other languages. As a student, I don't have a ton of time, so I can only \
spend maybe an hour or two a day helping out. Let me know if there's anything I can \
do!

Best,
- Beastro

Sent with [ProtonMail](https://protonmail.com) Secure Email.


[Attachment #5 (text/html)]

&lt;div&gt;Hey guys,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For the time being I would prefer to not \
have my real name attached to Tor so I hope you don't mind if I introduce myself as \
Beastro. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I love Tor and its mission. I was wondering if \
you guys had any projects that I could help out with? I can write code in python, \
java, C and also have plenty of experience with plenty other languages. As a student, \
I don't have a ton of time, so I can only spend maybe an hour or two a day helping \
out. Let me know if there's anything I can \
do!&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;br&gt;&lt;/div&gt;&lt;div&gt;- \
Beastro&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block"&gt;&lt;div class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110011525</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 01:15:25-0400</timestampReceived><subject>Re: [tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2018, at 11:38, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt; 
&gt; Hey guys,
&gt; 
&gt; For the time being I would prefer to not have my real name attached to Tor so I \
&gt; hope you don't mind if I introduce myself as Beastro. 
&gt; I love Tor and its mission. I was wondering if you guys had any projects that I \
&gt; could help out with? I can write code in python, java, C and also have plenty of \
&gt; experience with plenty other languages. As a student, I don't have a ton of time, \
&gt; so I can only spend maybe an hour or two a day helping out. Let me know if there's \
&gt; anything I can do!

Hi,

Take a look at our list of volunteer projects:

https://www.torproject.org/getinvolved/volunteer.html.en

What are you interested in?
What types of programs do you usually write?
(Network, file handling, calculation?)
Do you know how to use git?

If you're specifically interested in Core Tor (the network daemon), get
started by cloning and compiling Tor:

git clone https://git.torproject.org/tor.git

Follow the install instructions at:
tor/INSTALL

And run:
make check

If everything passes, you're all set up to make changes to tor.
Find a ticket, make some changes, and submit them as a patch or a branch.

Look for tickets marked "easy" or "intro" on:
https://trac.torproject.org/projects/tor/report/30

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpVaS0ACgkQdA2eOQJS
cqKGZg//WQSsL+VGwRSyBglEXbH8s8kQvlMQJmrAWe4rU86lR2N1GBapSwJs/2T1
w6KhrJPCVb37xUT8AfNSXiJK2lmec9mj2fJo/k+77fQ93m3PzYYRvZUxvZFM35bJ
zVOhF1jqzMJuvBAHF6uGfByVD3fOMSEYewCu88bzC6y9Xhf8HCw3tYUVDARIz4AG
mbEhGGuSbjOiNfiNooZOlDGgGtHVsog9lgr8mG0N+irrnv2O3P6CjM1ktMgtNr5H
GZ45AMo6dZg7WKVwKO5wVAbE9NFq3ab42CLlNi3rbDu/gBW4BBPaF8Tqn/Jh9qQs
TzETapa2o0Kh5Davg/w/ASHGgeSiVNj750K0+ez4R70NV+yE7+7Pq0qjFiS490hb
9wX8p1G+t2jIyeoxZEWaQFPZ678aCcXrhqAwJrIlIR0Vf3UiGbX0Wktf68x4NhaJ
t6UyCLhMZMMLhKv0ycFNYpc4E/3MH3B9ksMMeMxumnUDr5LNPqI7/7VanKkxMGat
f9PnfmHsqwO0yE0LMedo21a0VlJvEbV4JxsQ0EYaHEBisQle653ybc+J1n8CJci9
b230LtmDRugc+qO6u5V8kzlRL6vjUuYbM7V00qmZ5607i+LY+AR+NTYA4joP5mBz
sMjxtOuuFJ1nZY2nGOW8irfiXHLkXPyyYmZblIpYDz25JNydi88=
=IHXZ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110112222</emailId><senderName>Beastr0</senderName><senderEmail>beastr0@protonmail.com</senderEmail><timestampReceived>2018-01-10 11:22:22-0400</timestampReceived><subject>Re: [tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

T,

I'm interested in helping you guys with Tor development. I don't really care what I \
work on, except I do not support .onion websites (though I am willing to be convinced \
otherwise) so I would prefer not to participate directly in their development. I have \
plenty of experience with writing code for networks and for various calculations, as \
well a few programs for file handling. Yeah, I'm familiar with git, I've used it \
before on several projects. I think for now I'm going to stick with Tor networking, \
for the time being. I've already got Tor up and running in a vm on my machine. Should \
I also try to contact dgoulet (assigned to bug triage for the week) as well as taking \
look at those tickets?

- Beastro

Sent with [ProtonMail](https://protonmail.com) Secure Email.

&gt; -------- Original Message --------
&gt; Subject: Re: [tor-dev] Tor dev help
&gt; Local Time: January 10, 2018 1:15 AM
&gt; UTC Time: January 10, 2018 1:15 AM
&gt; From: teor2345@gmail.com
&gt; To: tor-dev@lists.torproject.org
&gt; 
&gt; &gt; On 10 Jan 2018, at 11:38, Beastr0 beastr0@protonmail.com wrote:
&gt; &gt; Hey guys,
&gt; &gt; For the time being I would prefer to not have my real name attached to Tor so I \
&gt; &gt; hope you don't mind if I introduce myself as Beastro. I love Tor and its mission. \
&gt; &gt; I was wondering if you guys had any projects that I could help out with? I can \
&gt; &gt; write code in python, java, C and also have plenty of experience with plenty \
&gt; &gt; other languages. As a student, I don't have a ton of time, so I can only spend \
&gt; &gt; maybe an hour or two a day helping out. Let me know if there's anything I can do!
&gt; 
&gt; Hi,
&gt; 
&gt; Take a look at our list of volunteer projects:
&gt; 
&gt; https://www.torproject.org/getinvolved/volunteer.html.en
&gt; 
&gt; What are you interested in?
&gt; What types of programs do you usually write?
&gt; (Network, file handling, calculation?)
&gt; Do you know how to use git?
&gt; 
&gt; If you're specifically interested in Core Tor (the network daemon), get
&gt; started by cloning and compiling Tor:
&gt; 
&gt; git clone https://git.torproject.org/tor.git
&gt; 
&gt; Follow the install instructions at:
&gt; tor/INSTALL
&gt; 
&gt; And run:
&gt; make check
&gt; 
&gt; If everything passes, you're all set up to make changes to tor.
&gt; Find a ticket, make some changes, and submit them as a patch or a branch.
&gt; 
&gt; Look for tickets marked "easy" or "intro" on:
&gt; https://trac.torproject.org/projects/tor/report/30
&gt; 
&gt; T
&gt; 
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; 
&gt; ---------------------------------------------------------------
&gt; 
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;div&gt;T,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;I'm interested in helping you guys \
with Tor development. I don't really care what I work on, except I do not support \
.onion websites (though I am willing to be convinced otherwise) so I would prefer not \
to participate directly in their development. I have plenty of experience with \
writing code for networks and for various calculations, as well a few programs for \
file handling. Yeah, I'm familiar with git, I've used it before on several projects. \
I think for now I'm going to stick with Tor networking, for the time being. I've \
already got Tor up and running in a vm on my machine. Should I also try to contact \
dgoulet (assigned to bug triage for the week) as well as taking look at those \
tickets?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;- \
Beastro&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block"&gt;&lt;div class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote class="protonmail_quote" \
type="cite"&gt;&lt;div&gt;-------- Original Message --------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: Re: \
[tor-dev] Tor dev help&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: January 10, 2018 1:15 \
AM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: January 10, 2018 1:15 AM&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: \
teor2345@gmail.com&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;On 10 Jan 2018, at 11:38, Beastr0 &lt;a \
href="mailto:beastr0@protonmail.com"&gt;beastr0@protonmail.com&lt;/a&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hey guys,&lt;br&gt;&lt;/div&gt;&lt;div&gt;For the time being I would prefer to not \
have my real name attached to Tor so I hope you don't mind if I introduce myself as \
Beastro.&lt;br&gt;&lt;/div&gt;&lt;div&gt;I love Tor and its mission. I was wondering if you guys had \
any projects that I could help out with? I can write code in python, java, C and also \
have plenty of experience with plenty other languages. As a student, I don't have a \
ton of time, so I can only spend maybe an hour or two a day helping out. Let me know \
if there's anything I can do!&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
Hi,&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; Take a look at our list of volunteer \
projects:&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://www.torproject.org/getinvolved/volunteer.html.en"&gt;https://www.torproject.org/getinvolved/volunteer.html.en&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; What are you interested in?&lt;br&gt;&lt;/div&gt;&lt;div&gt; What types of \
programs do you usually write?&lt;br&gt;&lt;/div&gt;&lt;div&gt; (Network, file handling, \
calculation?)&lt;br&gt;&lt;/div&gt;&lt;div&gt; Do you know how to use git?&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; If you're specifically interested in Core Tor (the network \
daemon), get&lt;br&gt;&lt;/div&gt;&lt;div&gt; started by cloning and compiling Tor:&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; git clone &lt;a \
href="https://git.torproject.org/tor.git"&gt;https://git.torproject.org/tor.git&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; Follow the install instructions at:&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
tor/INSTALL&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; And run:&lt;br&gt;&lt;/div&gt;&lt;div&gt; make \
check&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; If everything passes, you're all set up to \
make changes to tor.&lt;br&gt;&lt;/div&gt;&lt;div&gt; Find a ticket, make some changes, and submit them \
as a patch or a branch.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; Look for tickets marked \
"easy" or "intro" on:&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/report/30"&gt;https://trac.torproject.org/projects/tor/report/30&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; T&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;/h2&gt;&lt;h2&gt;&lt;div&gt;Tim Wilson-Brown \
(teor)&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; teor2345 at gmail dot com&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;&lt;/div&gt;&lt;/h2&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;hr&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;tor-dev mailing \
list&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists. \
torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180109232300</emailId><senderName>debug</senderName><senderEmail>tracdebug@riseup.net</senderEmail><timestampReceived>2018-01-09 23:23:00-0400</timestampReceived><subject>[tor-dev] Block Global Active Adversary Cloudflare</subject><body>

Is there any specific reason why there is no comment from Tor-team for this issue?

https://trac.torproject.org/projects/tor/ticket/24351
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180110005753</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 00:57:53-0400</timestampReceived><subject>Re: [tor-dev] Block Global Active Adversary Cloudflare</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2018, at 10:23, debug &lt;tracdebug@riseup.net&gt; wrote:
&gt; 
&gt; Is there any specific reason why there is no comment from Tor-team for this issue?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/24351

Many of us have been on holidays.

Also, the discussion on the ticket is hard to follow.
It's long, and it doesn't appear to be progressing.
Tickets aren't designed for that kind of discussion.

There also appear to be several similar tickets on the same topic.
This makes it harder for people to keep up.
Maybe there is a response on one of the other similar tickets?

Here's what I suggest you do:

Blocking an entire CDN would be a major change to either Tor or
Tor Browser's design. It's not likely to happen, because of the
security vs usability tradeoff. Significantly reducing the usability of
Tor would decrease the number of users, making Tor's anonymity set
smaller, and reducing anonymity for everyone.

Please do some background reading on this part of Tor's design before
responding to this email, or adding anything to the bug tracker.

Then, if you think this change belongs in Tor, Tor has a proposals process:
https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt

Please submit a proposal with reasons for the change, and a design.

If you think this change belongs in Tor Browser, please send a short
change proposal to the tbb-dev list.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------





["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpVZRIACgkQdA2eOQJS
cqILpA/+KbvZKKjFnq6y+fcX8Ye95Bjq7V8qnAZK5CCF0Tu3Yzt3+/nEypBuAwEu
Q2XS4K+LpvZrg5MOzDqaGPB8YsuAi1UEVPRrSkEmYOVH767pKJbRB+rhHQ9OssJ9
QKLNc2pMNuEDGzJUPsobH9uXBPHpcDR2CA9Fb4uq97j2opVgVworUZsz6kqTvopB
JXgZ+SuFeGYb7CSQXAprMORBOP+4WS27IPdLT+52BB3FxNeOOFOhJe8zY1ephgCp
5njsOgLXM5l0CCW5vfz95zVBiInIUJDZ4Vp+ULUzqIv3Cgd4Kl5CYkf3tjxFaCYM
IxEetRgbriU75DFKYI9neKSDxS9S97CKEZCJ81EyxKRdhVFp20uB4+HUtTpnv7Nv
XWzByY1n1oWgwhH5ZwES4pVceBZ7uHRyTmFLIqgxMqNpQt1/ZSD0XCSmrtBDdo5n
AiQffodSxIiyLye9Goh9LIQ417dSGcO2GzbwdxpBzSrK8fd7Ywd/P65g3rhv8DlX
bbwGHey9cs/9N6SQlTm/tUk1x/MVcAnRrFsNeibn26xH0fYjE+dnxH2pZl8RwLKq
GUWiSzSfHLmlx8ISK3wOsQWjPXNGjHdJdGD8b5Wz8VUHqvHTj07abuL+174+ylfu
jGdVvkdTfdqiDc4pn/ZJmhe8WKPiMNSPAZID0WfPhoBPHgVvITs=
=PffE
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110183858</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-10 18:38:58-0400</timestampReceived><subject>Re: [tor-dev] Block Global Active Adversary Cloudflare</subject><body>

[Attachment #2 (multipart/signed)]


I am the reporter of #24351.  As thereto, thanks for your thoughts, 
teor; I will respond accordingly:

2018-01-10 at 00:57:53 +0000, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;On 10 Jan 2018, at 10:23, debug &lt;tracdebug@riseup.net&gt; wrote:
&gt;&gt;
&gt;&gt;Is there any specific reason why there is no comment from Tor-team for 
&gt;&gt;this issue?
&gt;&gt;
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/24351
&gt;
&gt;Many of us have been on holidays.
&gt;
&gt;Also, the discussion on the ticket is hard to follow.
&gt;It's long, and it doesn't appear to be progressing.
&gt;Tickets aren't designed for that kind of discussion.
&gt;
&gt;There also appear to be several similar tickets on the same topic.
&gt;This makes it harder for people to keep up.
&gt;Maybe there is a response on one of the other similar tickets?

Indeed, I infer that you mean #18361, which generated well over two 
hundred comments within its first month.  Unfortunately, after its 
reporter was disappeared, discussion eventually petered out; and the 
last substantial comment for almost 14 months was by Cloudflare CTO 
jgrahamc,[0] mentioning the blinded tokens which wound up in #24321.

[0] https://trac.torproject.org/projects/tor/ticket/18361#comment:241

#24321 proposes to add third-party code to Tor Browser for the purpose 
of kowtowing to Cloudflare.  I strongly object to that, for the reasons 
I (and others!) set forth at #24321 (q.v.).  Moreover, the demand that 
Tor Browser change its behaviour to avoid being blocked by Cloudflare is 
backwards and upside-down:  It is Cloudflare which should be blocked; 
whereas with their CAPTCHA policy, they've done a bang-up job of 
psyching users into begging to them.

I've been concerned about Cloudflare for years.  The foregoing 
juxtaposition provided the momentary impetus for me to step forth and 
suggest a security feature I have desired ever since I first paused to 
think about what Cloudflare actually does.  I wish that more people 
would do that last.  I think most tech-industry people don't even 
realize that Cloudflare fully decrypts and reads/modifies the plaintext 
of *all* TLS connections passing through their network.

&gt;Here's what I suggest you do:
&gt;
&gt;Blocking an entire CDN would be a major change to either Tor or Tor 
&gt;Browser's design. It's not likely to happen, because of the security vs 
&gt;usability tradeoff. Significantly reducing the usability of Tor would 
&gt;decrease the number of users, making Tor's anonymity set smaller, and 
&gt;reducing anonymity for everyone.

My suggestion is to tie blocking behaviour to the Security Slider.  I do 
understand that blocking Javascript, etc. by default would have the same 
"anonymity set" impact as you describe; and that's why we have the 
Security Slider to begin with, so let's use it!

I do almost all my web surfing on "High"; and I can attest, that already 
breaks most of today's Web.  Users who surf on "High" security can be 
expected to *desire* some additional breakage, if that helps protect the 
confidentiality and integrity of their communications.  Thus, I suggest 
that Cloudflare should be blocked by default on "High" (with an "Add 
exception" style override button).

On "Medium" security, I suggest that at least clear warning should be 
displayed.  I'm on the fence about whether it should block by default 
here, or offer to set an option to block with the same popup widget used 
for various other permissions issues ("Allow this: Always/Never").

On "Low" security—well, users who surf on "Low" security are already 
suicidal, anyway.  (I myself *never* use the "Low" security 
level—never!)  The lock icon should still be changed, perhaps with the 
same display as used on mixed-content sites.  But I do not think 
Cloudflare should be blocked by default on the "Low" security level.

I believe the foregoing should address your concerns about the "security 
vs. usability tradeoff", for reasons identical to those discussed at:

https://www.torproject.org/projects/torbrowser/design/#security-slider

https://www.torproject.org/docs/faq.html.en#TBBJavaScriptEnabled

&gt;Please do some background reading on this part of Tor's design before
&gt;responding to this email, or adding anything to the bug tracker.

I will respond to that myself, since I am the one who added #24351 to 
the bug tracker.

I am deeply familiar with Tor's design.  Indeed, years ago, before I 
first installed Tor, I read Torspec and skimmed a bunch of pertinent 
references in anonbib.  On occasion, I have also audited Tor's source 
code[1] to my own satisfaction; this is how I discovered the ignomious 
buglet #22103 (found 2014, reported 2017).  I have not recently followed 
the cutting edge of Tor development or the latest proposals; but I do 
know how Tor works, and how its development process works.

[1] (I'm good with C, not with Javascript; I am @nym-zone on Github.)

&gt;Then, if you think this change belongs in Tor, Tor has a proposals 
&gt;process:
&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt
&gt;
&gt;Please submit a proposal with reasons for the change, and a design.

I don't see this as a suitable change for Core Tor.

With no need for a proposal, it *should* be relatively straightforward 
to build a generalized blacklisting (sort of IP null-routing) utility 
using the Tor Control Protocol—perhaps using __LeaveStreamsUnattached 
and juggling streams and circuits ourselves?  It is only a bit tricky 
due to name resolution occurring on the exit:  We usually won't know the 
destination IP address until Tor receives a RELAY_CONNECTED cell.

Add a list of IP addresses registered to Cloudflare in the RIR 
databases, and we're done.  (I assume that they have all their own 
allocations, though I'd investigate that assumption if I were actually 
doing this.)

But this would provide no application-level UI integration or override 
mechanism for the user.  Cloudflare is easy to detect at the application 
level, due to their injection of Cloudflare-specific HTTP headers.  
Wherefore I filed #24351 against Tor Browser, not Core Tor.

&gt;If you think this change belongs in Tor Browser, please send a short 
&gt;change proposal to the tbb-dev list.

Good idea, thanks.  When time permits, I may try to work up something 
suitable.

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110101052</emailId><senderName></senderName><senderEmail>thomas.hluchnik</senderEmail><timestampReceived>2018-01-10 10:10:52-0400</timestampReceived><subject>[tor-dev] Public Key Chaos</subject><body>

Hello all,

I am just going to update my tor server, building packages from source. I do that not \
only for tor but also for libevent. So I downloaded the tarballs plus signature from \
libevent.org and that's what I found:

$ gpg --verify libevent-2.0.22-stable.tar.gz.asc
gpg: Signature made Mon Jan  5 16:16:20 2015 CET using RSA key ID 8D29319A
gpg: Good signature from "Nick Mathewson &lt;nickm@alum.mit.edu&gt;"
gpg:                 aka "Nick Mathewson &lt;nickm@wangafu.net&gt;"
gpg:                 aka "Nick Mathewson &lt;nickm@freehaven.net&gt;"
gpg:                 aka "[jpeg image of size 3369]"


$ gpg --verify libevent-2.1.8-stable.tar.gz.asc
gpg: Signature made Sun Jan 29 19:42:03 2017 CET using RSA key ID 8EF8686D
gpg: Good signature from "Azat Khuzhin &lt;a3at.mail@gmail.com&gt;"
gpg: WARNING: This key is not certified with a trusted signature!
gpg:          There is no indication that the signature belongs to the owner.
Primary key fingerprint: 9E3A C83A 2797 4B84 D1B3  401D B860 8684 8EF8 686D


$ gpg --list-sigs "Azat Khuzhin"
pub   2048R/8EF8686D 2010-06-10
uid                  Azat Khuzhin &lt;a3at.mail@gmail.com&gt;
sig 3        8EF8686D 2010-06-10  Azat Khuzhin &lt;a3at.mail@gmail.com&gt;
sub   2048R/7A34F923 2010-06-10
sig          8EF8686D 2010-06-10  Azat Khuzhin &lt;a3at.mail@gmail.com&gt;


While nickm@alum.mit.edu was signed by many, many people, I find no signature for \
"Azat Khuzhin &lt;a3at.mail@gmail.com&gt;" at all. How can I trust that key? How can I be \
sure that libevent 2.1.8 is a good package? Why has Azat Khuzhin public key no \
signature from Nick Mathewson or anyone else? I don't trust that package for now \
until I find it signed with the keys of at least Nick Mathewson and Niels Provos.

Correct me if I a wrong.

Best Regards, Thomas
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111210104</emailId><senderName>Charles Hunt</senderName><senderEmail>charles.hunt@protonmail.com</senderEmail><timestampReceived>2018-01-11 21:01:04-0400</timestampReceived><subject>[tor-dev] Volunteering for Tor</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

After 15 years of desktop support, I am following my passion to be a Python3 \
programmer. I am still an amature programmer, but I aced the python fundamentals \
course from Coursera to flesh out my skills. I would like to continue developing my \
programming skills by volunteering for Tor. Do you have something I can help with? \
Thank you.

Charles


[Attachment #5 (text/html)]

After 15 years of desktop support, I am following my passion to be a Python3 \
programmer. I am still an amature programmer, but I aced the python fundamentals \
course from Coursera to flesh out my skills. I would like to continue developing my \
programming skills by volunteering for Tor. Do you have something I can help with? \
Thank you.&lt;br&gt;&lt;br&gt;Charles&lt;br&gt;&lt;br&gt;&lt;br&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111183621</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-01-11 18:36:21-0400</timestampReceived><subject>[tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

&gt; I'm interested in helping you guys with Tor development. I don't really care
&gt; what I work on, except I do not support .onion websites (though I am willing
&gt; to be convinced otherwise) so I would prefer not to participate directly in
&gt; their development. I have plenty of experience with writing code

Folks in convo before have covered some of these areas
and more that one could surely find or think of...

Philosophical...

Why does someone want to support and develop for Tor, or any other
overlay p2p anonymity network, or crypto, for that matter?
When even a fix to the manpage could be read and used by onion users
and operators, same for metrics, lists, or any other part of the ecosystem.
Does one fear "bad" things, association, or support "good" things?
Does freespeech, anonymity, privacy, human rights sound "good"?
What is "bad"? Censorship? Theft, Dictatorships, Police States,
whether one's own, that of the Enemy, or that of the Oppressed?
Cryptocurrency, anonymity, free markets, privacy, messaging... "bad"?
"Good" [only] when used to defeat "bad" things inside or outside
of [mal]functional democracies that assert majority force over
minorities who have forced no one? Ricochet, Signal, GPG... "bad"?
New technology that forces change over old entrenched ways... "bad"?
Are anonymous forums where professional therapists give pro bono
counseling to even the most reviled, depraved, criminal, socially
scarlet lettered and outcast... "bad"? Materials and talk of religion?
Are datamining, traffic archiving, exploits, cleartext... "good"?
Tor has exits... do people realize how much of both what they like
to "support", and abhor, travels over those exits? The variety of
traffic there is no different than onions. Should exits be unsupported?
What about the internet, or printing presses, should those tools
be unsupported? Are they "bad", get their makers looked askew?
Onions, exits, internet, presses, hammers... all simply agnostic
tools. Tools can be used to build great things, to defend, or to
wield in bloody murder.
And what of biases over certain agnostic tools instead of over the
separate "good" or "bad" uses of them? Do other tool builders and
users have to wonder if their tools are being compromised by those
with such biases?
What of when those with biases end up needing the tools themselves,
what will be the tool quality, or their ability to do "good" with them?
Have people taken the time to explore the onion space to find and
participate in all the "good" things they like therein, to create and
grow them, or even engage in counsel and advocacy against the "bad"?
What tools would be needed to do that?

Yes, people are free to work on what they like...
including giving deep thought as to what they like and don't, and
why, and how supporting agnostic tools can actually fit with that.

Are not your pens tools?
Who likes those?
Who supports those?
What if they didn't?
Pens... write code.


Tech, fun, politic...

Amounting to consideration feature X may prevent or diminish a
better archictecture on balance for some higher importance feature Y.
That should be covered open devops as usual.

Or if the *technology* or *code* of eg: eepsites onions, or other
subsets of various projects are not in their interest or knowledge
practice area. Ok.

Or if the features provided by any overlay network or tool are
deemed flawed, and the technical or political effort to get them
fixed, or rearchitecture, or correctly advertised, or called out
within as bunk, is too high, therein it may be better to abandon
them and or speak out freely as such.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180110115737</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 11:57:37-0400</timestampReceived><subject>[tor-dev] New Authority File (was: Re: New Fallback Directory File Format)</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

We've merged a new list of fallbacks in the version 2.0.0 format.

But we also want to keep a separate list of authorities, rather than hiding
them in the middle of config.c:

https://trac.torproject.org/projects/tor/ticket/24818

So we are changing the current authority and fallback list formats,
to make them consistent with each other. (Sorry about doing the two changes
separately, we had to do fallbacks for the 0.3.2.9 release deadline.)

Here's what will change in version 3.0.0:

https://github.com/teor2345/torspec/commits/dir-list

Hopefully, you can use the same parser for both file formats.

&gt; On 7 Jan 2018, at 02:52, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; On 05/01/18 22:33, teor wrote:
&gt;&gt; The fallback 2.0.0 spec hasn't been merged yet, but atagar has reviewed it.
&gt;&gt; It's at:
&gt;&gt; https://github.com/teor2345/torspec/blob/fallback-format-2-v2/fallback-spec.txt
&gt; 
&gt; I've added this link to the Metrics ticket #24434, I started work on
&gt; this but ran out of time after not getting very far at all.

The fallback list spec version 2.0.0 has been merged, it's now at:

https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt

&gt;&gt; The fallback list is now in the 2.0.0 format, but it has exactly the
&gt;&gt; same fallbacks in it:
&gt;&gt; https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc
&gt;&gt; 
&gt;&gt; Some time over the next few days, we will generate a new list of
&gt;&gt; fallbacks in
&gt;&gt; the 2.0.0 format, and backport it to Tor 0.2.9 and later.
&gt; 
&gt; Ok, I'll see if I can do a quick hack workaround to generate the list
&gt; for Relay Search until the data is available through Tor Metrics.

I'm glad this worked out!
Thanks for doing this update.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------





["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpV/7EACgkQdA2eOQJS
cqJGuBAApLNu9kAsvzc+axRhKZcJdhVkwQZRrQ+L72KdYbt8bnsG8OkZjvgIl5Kj
FD7CzHr+/T5ik5ewkXiCNjFaPJmSo6Y1JrjYWsuHFc3WKWOaAit0/MvdVhtT+Fs9
MEdif0ZXOsJHvmV2iuAEDFw+w6CyYSNbhE7tA7n0Yp+6URAMwzBEfLHAw/mlah5f
3VCsU7Oaw5K09cjhlPhXff7YZS4ElEOMUEPKQlFI2JyzFf59TPsa5xn+8KrJR//R
ry82npPDMC2zAN+EDmVSqXuz9bC5rw6vrcY/kK+js7ujWL/AOXLeE4NyQpw4WgEF
drNeKzFttqVu8HirhC7qzVGXjM4dhRHpYkhHBH8PCSBV3ByYDc3mTnCxkrMfeQmp
1GGmsmik6k5dclYksKs+i/oLZkExEk6czZL9S5lDF8/SMI7mwYsRD3h2EzdriR09
kL0JrsWkXRP8TqWGZ2iv37noq54a1K6gTJTyEL8rNOWUiBxGWMtBKTdVrrZVgbmw
bUjqcULoF7flh9poneWcgPjuxjUZnEm/WayRqcZPIocntWjCyA+iIvne221DwHK5
8ReNingzRqiBrzMlvguOKPstlYexF2mhHhgBuU9ckwkpFoY2r+o1MQ5vxb49g9kx
sBcAg2Opx7xvN2QcNzb79MJDY4S9Qvd4pveWWJeclAZS0qqm6h4=
=kXYw
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180119232200</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-01-19 23:22:00-0400</timestampReceived><subject>[tor-dev] No Control Socket when DisableNetwork 1</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Dear Tor Developers,

According to the Tor manual:
https://www.torproject.org/docs/tor-manual-dev.html.en

&gt; DisableNetwork 0|1 When this option is set, we don't listen for or
&gt; accept any connections other than controller connections, and we
&gt; close (and don't reattempt) any outbound connections. Controllers
&gt; sometimes use this option to avoid using the network until Tor is
&gt; fully configured. (Default: 0)

However, it seems when DisableNetwork is set to 1,
/var/run/tor/control does not exist anymore making us cannot get a
controller from socket file.
(stem.control.Controller.from_socket_file() is affected in this case:
https://stem.torproject.org/api/control.html#stem.control.Controller.fro
m_socket_file)

To reproduce this, I tested both Tor 0.3.1.9 and 0.3.2.9 on Debian
Stretch:

When DisableNetwork 0, run:
systemctl --no-pager restart tor@default

&gt; user@host:~$ ls -l /var/run/tor/ total 1328 srw-rw---- 1 debian-tor
&gt; debian-tor       0 Jan 19 21:14 control -rw-r----- 1 debian-tor
&gt; debian-tor      32 Jan 19 21:14 control.authcookie -rw-r----- 1
&gt; debian-tor debian-tor 1350116 Jan 19 21:14 log srw-rw-rw- 1
&gt; debian-tor debian-tor       0 Jan 19 21:14 socks -rw-r--r-- 1
&gt; debian-tor debian-tor       6 Jan 19 21:14 tor.pid

When DisableNetwork 1, run:
systemctl --no-pager restart tor@default

&gt; user@host:~$ ls -l /var/run/tor/ total 1244 -rw-r----- 1 debian-tor
&gt; debian-tor      32 Jan 19 21:00 control.authcookie -rw-r----- 1
&gt; debian-tor debian-tor 1269005 Jan 19 21:00 log

I searched on Tor-trac but did not find any similar report. Therefore,
would you please tell me wether Tor intentionally behaves like this or
this is a bug? (If this is a bug, I can definitely help to report it
to Tor-trac.)

Thank you so much!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlpifX0ACgkQoUtNvG3N
1TwLsBAAn8W3H7VMwiR9UwnVJoXOZ0iWRLbF/JdtDUjXcG1/cQmK5aEHtbVCy4Jl
VOWYKBJeHxZAmHlBC+ZR3E/vyDesatjPDIPvzUuwYN3T0COFpMyN71ipOjs1KqYP
GFFgLFzClQHvnThe59TIEomVcdXIt9ebPU3QmVxnNhvB/KKggKOgTuYd/n8R0efe
0kAl5/8vZZv4/IiorRkF/ltQwmnOTR1V2H1OrOOHM/AyxLGfwGO9KffznRDX/BN4
AdM4MWpMh3+DKCKgJZpf3Gzwcn7d6DvL74YQVIhmwofoxEOCBD/f+iYeJKkoVPw7
Pd8YHkYvXqCRqHBFfTEe4BtZdcxK2k3FXbUcbKahFDYMtdotdzknf542f6+Bbt+p
hmiuJT8bX/Kn2dBzonbqJuh2XEBA2y6OqqhJaVoJr5l6tWyghp18BsA2m6W4mg2H
ApkUTv0YsQ8guXckfJP2LOhXxKWN0yncQ7bMzGZSfSwtqGwrDxFFWk2V8vXIrWWL
X5pz3oObvQB9eUJcKix2C29kJSGBry68Ts1x4MnL14CDw0WqNqAqe0O3IAiCANjl
CU+z9P129eb/pdYXW/OTFnVyWhQBXNvCRHTZB7Yvym+dN4B6MD3uOkH9THf9BaCF
yVCOK1c04/sfqADnpE3Rhkr98iix3N2gbdOod/10T+GyG4OBh64=
=Oh0M
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180120084746</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-01-20 08:47:46-0400</timestampReceived><subject>Re: [tor-dev] No Control Socket when DisableNetwork 1</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, 19 Jan 2018 23:22:00 +0000
iry &lt;iry@riseup.net&gt; wrote: 
&gt; According to the Tor manual:
&gt; https://www.torproject.org/docs/tor-manual-dev.html.en
&gt; 
&gt; &gt; DisableNetwork 0|1 When this option is set, we don't listen for or
&gt; &gt; accept any connections other than controller connections, and we
&gt; &gt; close (and don't reattempt) any outbound connections. Controllers
&gt; &gt; sometimes use this option to avoid using the network until Tor is
&gt; &gt; fully configured. (Default: 0)  
&gt; 
&gt; However, it seems when DisableNetwork is set to 1,
&gt; /var/run/tor/control does not exist anymore making us cannot get a
&gt; controller from socket file.
&gt; (stem.control.Controller.from_socket_file() is affected in this case:
&gt; https://stem.torproject.org/api/control.html#stem.control.Controller.fro
&gt; m_socket_file)

I'm fairly certain you are doing something wrong, because I'm using a
tor process that was launched with DisableNetwork set to 1 in the torrc,
and toggled to 0 via the ControlPort right now to browse the web (Tested
with the copy of 0.3.1.9 that is distributed with Tor Browser).

https://gitweb.torproject.org/tor-browser/sandboxed-tor-browser.git/tree/data/torrc
https://gitweb.torproject.org/tor-browser/sandboxed-tor-browser.git/tree/src/cmd/sandboxed-tor-browser/internal/tor/tor.go#n342


To reproduce this working, if anyone out there still uses the sandbox I
wrote, and can get a working browser without using an external tor
instance, ta dah, it's working.

Normal Tor Browser has a similar launch process, and can even be coaxed
into using AF_UNIX sockets (though it's utterly pointless to do so).

nb: It can take a while for the control port to actually be available
after the tor daemon is spawned.  The best way I found to deal with
this is via using `ControlPortWriteToFile` since the file gets
created after the control port listener is created.  You could also use
something like inotify on Linux, but that's non-portable.

Regards,

-- 
Yawning Angel


[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180120094053</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-01-20 09:40:53-0400</timestampReceived><subject>Re: [tor-dev] No Control Socket when DisableNetwork 1</subject><body>

On Fri, Jan 19, 2018 at 11:22:00PM +0000, iry wrote:
&gt; However, it seems when DisableNetwork is set to 1,
&gt; /var/run/tor/control does not exist anymore making us cannot get a
&gt; controller from socket file.
&gt;[...]
&gt; I searched on Tor-trac but did not find any similar report. Therefore,
&gt; would you please tell me wether Tor intentionally behaves like this or
&gt; this is a bug? (If this is a bug, I can definitely help to report it
&gt; to Tor-trac.)

Yeah, I think this is supposed to work. In fact, I agree with Yawning
in that I think it *does* work.

My first suggestion would be to see if your Tor process actually
successfully started in the "DisableNetwork 1" case. Maybe it didn't
actually start up? Maybe the logs give you some hints?

My second suggestion would be to get a Tor binary and run it yourself,
not as part of a package. If it works there, then you know that your
next steps are to figure out why your package isn't working for you.

If you can get a minimal case reproducing the bug without a package,
systemd, etc, in the picture, that's a great time to file a trac ticket.

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180203213700</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-03 21:37:00-0400</timestampReceived><subject>Re: [tor-dev] No Control Socket when DisableNetwork 1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; My first suggestion would be 
&gt; [...]
&gt; My second suggestion would be to get a Tor binary and run it yourself,
&gt; not as part of a package. If it works there, then you know that your
&gt; next steps are to figure out why your package isn't working for you

Hi Yawning and Roger!

Thank you so much for trying to reproduce the bug and teaching me on the
generic Tor debugging steps! I agree with you that:

&gt; If you can get a minimal case reproducing the bug without a package,
&gt; systemd, etc, in the picture, that's a great time to file a trac ticket.

It turns out, to successfully reproduce this, we need:

0. set DisableNetwork to 1
1. use User option as part of the Tor configuration
2. run sudo Tor from a different user in a different group

Here are the specific steps to reproduce it. I tested it on Debian
Stretch but it should be distribution independent:

user@host:~$ cat /home/user/my.torrc
DataDirectory /tmp/tor
ControlSocket /tmp/tor/control.sock
ControlSocketsGroupWritable 1
CookieAuthentication 1
CookieAuthFileGroupReadable 1
CookieAuthFile /tmp/tor/control.authcookie
SocksPort unix:/tmp/tor/socks.sock

user@host:~$ sudo /usr/bin/install -Z \
-m 02755 -o debian-tor \
-g debian-tor -d /tmp/tor

user@host:~$ ls -ld /tmp/tor/; ls -l /tmp/tor/
drwxr-s--- 2 debian-tor debian-tor 40 Feb  3 18:19 /tmp/tor/
total 0

user@host:~$ sudo /usr/bin/tor \
-f /home/user/my.torrc \
--User debian-tor \
--DisableNetwork 1

There should be control.sock, but not:

user@host:~$ ls -ld /tmp/tor/; sudo ls -l /tmp/tor/
drwx--S--- 2 debian-tor debian-tor 100 Feb  3 20:00 /tmp/tor/
total 8
-rw-r----- 1 debian-tor debian-tor  32 Feb  3 20:00 control.authcookie
-rw------- 1 debian-tor debian-tor   0 Feb  3 20:00 lock
-rw------- 1 debian-tor debian-tor 215 Feb  3 20:00 state

To let Tor really open the control.sock, we need to reload Tor (yes,
even though we just start it):

user@host:~$ ps -A | grep tor
  863 ?        00:00:00 xenstore-watch
  927 ?        00:00:04 tor-controlport
11851 pts/0    00:00:00 tor

user@host:~$ sudo /bin/kill -HUP 11851

user@host:~$ ls -ld /tmp/tor/; sudo ls -l /tmp/tor/
drwx--S--- 2 debian-tor debian-tor 120 Feb  3 20:01 /tmp/tor/
total 8
-rw-r----- 1 debian-tor debian-tor  32 Feb  3 20:01 control.authcookie
srw-rw---- 1 debian-tor debian-tor   0 Feb  3 20:01 control.sock
-rw------- 1 debian-tor debian-tor   0 Feb  3 20:01 lock
-rw------- 1 debian-tor debian-tor 215 Feb  3 20:01 state

I guess the reason Yawning was not able to reproduce it is because User
option was not set:

user@host:~$ sudo -u debian-tor \
/usr/bin/tor -f /home/user/my.torrc \
--DisableNetwork 1

[notice] Opening Control listener on /tmp/tor/control.sock

I was thinking Tor fixing /tmp/tor/ to 2700 may be the reason, but then
I cannot explain why this will work with /tmp/tor/ set to 2700:

user@host:~$ sudo /usr/bin/tor \
-f /home/user/my.torrc \
--User debian-tor \
--DisableNetwork 0

[notice] Opening Control listener on /tmp/tor/control.sock

Would you please share some insights on the this?

For temporary workaround using systemd in Debian, I put this line in the
[Service] section of /lib/systemd/system/tor@default.service :

ExecStartPost=/bin/kill -HUP ${MAINPID}

Best Regards,
iry




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180101084557</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-01 08:45:57-0400</timestampReceived><subject>Re: [tor-dev] Prop-279 for Onion Alternative Name Representations (Re: Error-Correcting Onions with </subject><body>

[Attachment #2 (multipart/signed)]


On 2017-12-31 at 10:48:52 +0000, Yawning Angel &lt;yawning@schwanenlied.me&gt; 
wrote:
&gt; This is pointless because internationalized domain names are 
&gt; standardized around Punycode encoding (Unicode&lt;-&gt;ASCII), and said 
&gt; standard is supported by applications that support IDN queries.
&gt; 
&gt; I am firmly against this change, and I'm not particularly thrilled by 
&gt; the thought of homograph attacks either.

Happy New Year, Yawning; and apologies for the delayed reply.  I thought 
I'd best work up some code for an object demonstration of why I urge the 
importance of UTF-8 (and also embedded spaces, which I forgot to mention 
explicitly).

Here is an 8-word mnemonic phrase encoding for Wikileaks 
(http://wlupld3ptjvsgwqw.onion/), in 8 different languages or writing 
systems:

real element glow tennis pluck museum hair shuffle
洁 爱 唱 仰 泪 吴 乎 怒
潔 愛 唱 仰 淚 吳 乎 怒
parole distance fautif sombre notoire loyal flairer ratisser
retina erba idillio suonare potassio opposto india scuderia
にもつ　けろけろ　しちりん　ほめる　とかす　たんまつ　しゃうん　はんしゃ
 잠자리 반죽 상품 큰딸 \
이불 열차 선풍기 중반 pie dulce \
gimnasio tabla oscuro molde guerra repetir

Imagine an activist whispering this address in someone's ear, in the 
people's native tongue!

Respectively, those mnemonics are in English, Chinese (Simplified), 
Chinese (Traditional), French, Italian, Japanese, Korean, and Spanish.  
Those are not my selections; they are the languages for which wordlists 
are currently available in the standard I am adapting.  Here is a hint 
on how to produce these phrases:
https://github.com/nym-zone/easyseed/commit/ba77be1b1a1f0c6af50ceba5c89f4adece7e5dff

As for Punycode vs. UTF-8:

Homograph attacks are not "solved" by Punycode any more than they would 
be fixed by base64ing all addresses.  Punycode is not a security 
feature; to the contrary!  CVE-2013-7424, CVE-2015-8948, CVE-2016-6261, 
CVE-2016-6262, CVE-2017-14062....  Need I say more?

With some care, I can write a perfectly secure UTF-8 handler (forbidding 
non-shortest form, with a proper U+FFFD replacement algorithm, etc.).  
Whereas I have never seen a Punycode decoder which gives me confidence 
in its behaviour under all possible inputs.  I assiduously avoid 
interacting with the bloat and pitfalls of IDNA and Punycode, insofar as 
I can.  By contrast, UTF-8 has been happily in use on Unix/Plan9 systems 
for a quarter-century.

I know that as you say, applications which handle a string as a "domain" 
will Punycode it before Tor even sees it.  But my thinking from the 
beginning was not in terms of DNS names.  One of my constructive 
criticisms of prop-279 is that it makes that assumption.

The proper question is not, "How do we make more flexible pseudo-DNS 
lookups?", but rather more generally: **How can we turn the pseudorandom 
binary data from .onion names into forms friendlier to humans?**  If the 
Name System API could be in some way modified to admit better answers in 
the long term, then it would be my pleasure to help achieve that.

Now since I know that Alec Muffett is reading this thread, here are 
mnemonics in the same languages for facebookcorewwwi.onion:

chimney capital common neither demand certain hen athlete
身 热 界 巨 置 证 假 然
身 熱 界 巨 置 證 假 然
caméra boussole chasseur mairie crayon butiner fougère annuel
casuale buffone collare osare derivare capello intuito apatico
かいさつ　おこす　かんそう　ちせい　ぐうせい　おもたい　しゅらば　いはつ
 노력 기획 답변 예방 매장 \
남자 세월 고급 calor brazo centro mover crema cabeza \
helio antojo

Dare to dream outside the quasi-DNS box about how .onion addresses can 
be represented!

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180101090428</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-01-01 09:04:28-0400</timestampReceived><subject>Re: [tor-dev] Prop-279 for Onion Alternative Name Representations (Re: Error-Correcting Onions with </subject><body>

[Attachment #2 (multipart/signed)]


On Mon, 1 Jan 2018 08:45:57 +0000
nullius &lt;nullius@nym.zone&gt; wrote:
&gt; On 2017-12-31 at 10:48:52 +0000, Yawning Angel
&gt; &lt;yawning@schwanenlied.me&gt; wrote:
&gt; &gt;This is pointless because internationalized domain names are 
&gt; &gt;standardized around Punycode encoding (Unicode&lt;-&gt;ASCII), and said 
&gt; &gt;standard is supported by applications that support IDN queries.
&gt; &gt;
&gt; &gt;I am firmly against this change, and I'm not particularly thrilled
&gt; &gt;by the thought of homograph attacks either.  
&gt; 
&gt; Happy New Year, Yawning; and apologies for the delayed reply.  I
&gt; thought I'd best work up some code for an object demonstration of why
&gt; I urge the importance of UTF-8 (and also embedded spaces, which I
&gt; forgot to mention explicitly).

I'm aware of the use cases for IDNs.

&gt; As for Punycode vs. UTF-8:
&gt; 
&gt; Homograph attacks are not "solved" by Punycode any more than they
&gt; would be fixed by base64ing all addresses.  Punycode is not a
&gt; security feature; to the contrary!  CVE-2013-7424, CVE-2015-8948,
&gt; CVE-2016-6261, CVE-2016-6262, CVE-2017-14062....  Need I say more?

Sigh, the problem is encoding format agnostic.

My point was, by allowing non-ASCII characters the onus is on *someone*
to solve the problem of homograph attacks (which admittedly is a bit of
a tangent). I'm painfully aware that all browsers, including Tor
Browser have utterly inadequate solutions here.

&gt; I know that as you say, applications which handle a string as a
&gt; "domain" will Punycode it before Tor even sees it.  But my thinking
&gt; from the beginning was not in terms of DNS names.  One of my
&gt; constructive criticisms of prop-279 is that it makes that assumption.

It makes that assumption because it is an entirely reasonable thing
to do in the context of Tor.

&gt; Dare to dream outside the quasi-DNS box about how .onion addresses
&gt; can be represented!
 
I will quote Alec Muffet here:
&gt; a) if Onion addresses suddenly stop looking very-similar-to DNS
&gt; addresses, Tor risks returning to a world where special expertise is
&gt; necessary to build software for it, thereby harming growth/adoption

The current proposal can get "very similar-to DNS addresses" IDNs by
using the same encoding format that DNS uses.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111200045</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-11 20:00:45-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

[Attachment #2 (multipart/signed)]


On 2018-01-10 11:22:22 at +0000, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt;I don't really care what I work on, except I do not support .onion 
&gt;websites (though I am willing to be convinced otherwise) so I would 
&gt;prefer not to participate directly in their development.
&gt;
&gt;[...]
&gt;Sent with [ProtonMail](https://protonmail.com) Secure Email.

On 2018-01-11 18:36:21 at +0000, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt;Philosophical...
&gt;
&gt;Why does someone want to support and develop for Tor, or any other 
&gt;overlay p2p anonymity network, or crypto, for that matter? When even a 
&gt;fix to the manpage could be read and used by onion users and operators, 
&gt;same for metrics, lists, or any other part of the ecosystem. Does one 
&gt;fear "bad" things, association, or support "good" things?

I immediately observed that "Beastr0" posted via a Protonmail address.  
Whereas Protonmail supports .onion, and has its own .onion:

https://protonirockerxow.onion/

https://protonmail.com/tor

https://protonmail.com/blog/tor-encrypted-email/

https://protonmail.com/blog/protonmail-tor-censorship/

https://protonmail.com/support/knowledge-base/tor-setup/

Why does an individual who does not support .onion use a service which 
promotes its own .onion?

&gt;Philosophical...

Tor supports the *right to read*.

Imagine that you were in the biggest library in the world—but a 
librarian (or security camera) watched over your shoulder to observe and 
record everything you read.  You'd find that you self-censor your 
selections.  You would avoid anything too controversial—even if it were 
something you wanted to read so that you could write an argument against 
it!  You would only read things you guess were acceptable to those 
watching you.  Adapt "Beastr0's" statement, "I would prefer to not have 
my real name attached" (to this controversial book).

**That is the Web without Tor.**  Tor shields readers from the 
shoulder-surfing librarian, the eye-tracking security cameras which 
observe each *word* you read, the third-party analytics trackers and 
"social media" buttons...

Tor also supports the *right to write*.

The ability to read without being tracked must be matched by the ability 
to publish anonymously, or pseudonymously.  The right of anonymous 
publication is the cornerstone of the freedom of speech.  .onion 
protects that right.

/*
 * .onion also has many additional uses; for but a few examples:
 *
 * 0. Taking load off exit nodes; e.g. if you run Debian, switch your
 * `apt` updates to download from the repositories listed at
 * https://onion.debian.org/ A/K/A http://5nca3wxl33tzlzj5.onion/ .
 * See also https://onion.torproject.org/
 * A/K/A http://yz7lpwfhhzcdyc5y.onion/ .
 *
 * 1. Enabling Bitcoin nodes to accept incoming connections without
 * exposing their IP addresses.
 *
 * 2. Enabling communications tools such as Ricochet.
 *
 * 3. [...add your own here...]
 */

&gt;Pens... write code.

Code is speech.  I observe that just as many fine .onion operators, 
"Beastr0" desires to exercise the right to publish free speech under a 
pseudonym:

On 2018-01-10 00:38:47 at +0000, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt;For the time being I would prefer to not have my real name attached to 
&gt;Tor so I hope you don't mind if I introduce myself as Beastro.
&gt;
&gt;I love Tor and its mission.

I hope that "Beastr0" will reconsider his/her/its pseudonymously 
expressed opposition to .onion.

/*
 * Cf. my current .sig motto, a matter of conceptual juxtaposition in
 * popular propaganda as observed by yours truly.  I am innocent.
 * Aren't "bad guys" the ones who should be tapped, tracked, and
 * searched?  How does anybody dare suggest that I should submit to
 * surveillance *because* I am innocent, i.e. "have nothing to hide"?
 *
 * "‘If you're not doing anything wrong, you have nothing to hide.'
 *
 * "No!  Because I do nothing wrong, I have nothing to show."
 *
 *				— nullius@nym.zone
 */

#endif /* !_ON_TOPIC_FOR_DEV_LIST_ */

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111224126</emailId><senderName>Beastr0</senderName><senderEmail>beastr0@protonmail.com</senderEmail><timestampReceived>2018-01-11 22:41:26-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Some interesting points, guys, thank you for sending them. Perhaps I will change my \
opinion one day and if I do I'm sure some of your thoughts on the subject will \
contribute to that. Best,

- Bstro

p.s. I'm well aware that Proton Mail has .onion sites. I have nothing against them \
for having .onion websites. The same way I'm not against Qubes or even Tor for having \
.onion sites. As to why I use it... I'm not sure to be honest. I study and work in \
the security field so I guess like most of us I'm just paranoid.

Sent with [ProtonMail](https://protonmail.com) Secure Email.

&gt; -------- Original Message --------
&gt; Subject: Re: [tor-dev] Agnostic Tools: Code Dev and Support For
&gt; Local Time: January 11, 2018 8:00 PM
&gt; UTC Time: January 11, 2018 8:00 PM
&gt; From: nullius@nym.zone
&gt; To: tor-dev@lists.torproject.org
&gt; 
&gt; On 2018-01-10 11:22:22 at +0000, Beastr0 beastr0@protonmail.com wrote:
&gt; 
&gt; &gt; I don't really care what I work on, except I do not support .onion
&gt; &gt; websites (though I am willing to be convinced otherwise) so I would
&gt; &gt; prefer not to participate directly in their development.
&gt; &gt; [...]
&gt; &gt; Sent with [ProtonMail](https://protonmail.com) Secure Email.
&gt; 
&gt; On 2018-01-11 18:36:21 at +0000, grarpamp grarpamp@gmail.com wrote:
&gt; 
&gt; &gt; Philosophical...
&gt; &gt; Why does someone want to support and develop for Tor, or any other
&gt; &gt; overlay p2p anonymity network, or crypto, for that matter? When even a
&gt; &gt; fix to the manpage could be read and used by onion users and operators,
&gt; &gt; same for metrics, lists, or any other part of the ecosystem. Does one
&gt; &gt; fear "bad" things, association, or support "good" things?
&gt; 
&gt; I immediately observed that "Beastr0" posted via a Protonmail address.
&gt; Whereas Protonmail supports .onion, and has its own .onion:
&gt; 
&gt; https://protonirockerxow.onion/
&gt; 
&gt; https://protonmail.com/tor
&gt; 
&gt; https://protonmail.com/blog/tor-encrypted-email/
&gt; 
&gt; https://protonmail.com/blog/protonmail-tor-censorship/
&gt; 
&gt; https://protonmail.com/support/knowledge-base/tor-setup/
&gt; 
&gt; Why does an individual who does not support .onion use a service which
&gt; promotes its own .onion?
&gt; 
&gt; &gt; Philosophical...
&gt; 
&gt; Tor supports the right to read.
&gt; 
&gt; Imagine that you were in the biggest library in the world—but a
&gt; librarian (or security camera) watched over your shoulder to observe and
&gt; record everything you read. You'd find that you self-censor your
&gt; selections. You would avoid anything too controversial—even if it were
&gt; something you wanted to read so that you could write an argument against
&gt; it! You would only read things you guess were acceptable to those
&gt; watching you. Adapt "Beastr0's" statement, "I would prefer to not have
&gt; my real name attached" (to this controversial book).
&gt; 
&gt; That is the Web without Tor. Tor shields readers from the
&gt; shoulder-surfing librarian, the eye-tracking security cameras which
&gt; observe each word you read, the third-party analytics trackers and
&gt; "social media" buttons...
&gt; 
&gt; Tor also supports the right to write.
&gt; 
&gt; The ability to read without being tracked must be matched by the ability
&gt; to publish anonymously, or pseudonymously. The right of anonymous
&gt; publication is the cornerstone of the freedom of speech. .onion
&gt; protects that right.
&gt; 
&gt; /*
&gt; 
&gt; - .onion also has many additional uses; for but a few examples:
&gt; -
&gt; 
&gt; -
&gt; 
&gt; - Taking load off exit nodes; e.g. if you run Debian, switch your
&gt; 
&gt; - apt updates to download from the repositories listed at
&gt; - https://onion.debian.org/ A/K/A http://5nca3wxl33tzlzj5.onion/ .
&gt; - See also https://onion.torproject.org/
&gt; 
&gt; - A/K/A http://yz7lpwfhhzcdyc5y.onion/ .
&gt; -
&gt; 
&gt; -
&gt; 
&gt; - Enabling Bitcoin nodes to accept incoming connections without
&gt; 
&gt; - exposing their IP addresses.
&gt; -
&gt; 
&gt; -
&gt; 
&gt; - Enabling communications tools such as Ricochet.
&gt; 
&gt; -
&gt; 
&gt; -
&gt; 
&gt; - [...add your own here...]
&gt; */
&gt; 
&gt; &gt; Pens... write code.
&gt; 
&gt; Code is speech. I observe that just as many fine .onion operators,
&gt; "Beastr0" desires to exercise the right to publish free speech under a
&gt; pseudonym:
&gt; 
&gt; On 2018-01-10 00:38:47 at +0000, Beastr0 beastr0@protonmail.com wrote:
&gt; 
&gt; &gt; For the time being I would prefer to not have my real name attached to
&gt; &gt; Tor so I hope you don't mind if I introduce myself as Beastro.
&gt; &gt; I love Tor and its mission.
&gt; 
&gt; I hope that "Beastr0" will reconsider his/her/its pseudonymously
&gt; expressed opposition to .onion.
&gt; 
&gt; /*
&gt; 
&gt; - Cf. my current .sig motto, a matter of conceptual juxtaposition in
&gt; - popular propaganda as observed by yours truly. I am innocent.
&gt; - Aren't "bad guys" the ones who should be tapped, tracked, and
&gt; - searched? How does anybody dare suggest that I should submit to
&gt; - surveillance because I am innocent, i.e. "have nothing to hide"?
&gt; -
&gt; 
&gt; - "‘If you're not doing anything wrong, you have nothing to hide.'
&gt; -
&gt; 
&gt; - "No! Because I do nothing wrong, I have nothing to show."
&gt; -
&gt; 
&gt; -
&gt; 
&gt; — nullius@nym.zone
&gt; 
&gt; /
&gt; 
&gt; #endif / !ON_TOPIC_FOR_DEV_LIST */
&gt; 
&gt; nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
&gt; Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
&gt; 3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG) (PGP RSA: 0x36EBB4AB699A10EE)
&gt; "‘If you're not doing anything wrong, you have nothing to hide.'
&gt; No! Because I do nothing wrong, I have nothing to show." — nullius
&gt; ---------------------------------------------------------------
&gt; 
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;div&gt;Some interesting points, guys, thank you for sending them. Perhaps I will change \
my opinion one day and if I do I'm sure some of your thoughts on the subject will \
contribute to that.&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- \
Bstro&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;p.s. I'm well aware that Proton Mail has .onion \
sites. I have nothing against them for having .onion websites. The same way I'm not \
against Qubes or even Tor for having .onion sites. As to why I use it... I'm not sure \
to be honest. I study and work in the security field so I guess like most of us I'm \
just paranoid.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block"&gt;&lt;div \
class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="protonmail_quote" \
type="cite"&gt;&lt;div&gt;-------- Original Message --------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: Re: \
[tor-dev] Agnostic Tools: Code Dev and Support For&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: January \
11, 2018 8:00 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: January 11, 2018 8:00 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: \
nullius@nym.zone&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 2018-01-10 11:22:22 at \
+0000, Beastr0 &lt;a href="mailto:beastr0@protonmail.com"&gt;beastr0@protonmail.com&lt;/a&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;div&gt;I don't really care what I work on, except I do \
not support .onion&lt;br&gt;&lt;/div&gt;&lt;div&gt; websites (though I am willing to be convinced \
otherwise) so I would&lt;br&gt;&lt;/div&gt;&lt;div&gt; prefer not to participate directly in their \
development.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;[...]&lt;br&gt;&lt;/div&gt;&lt;div&gt; Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; On 2018-01-11 \
18:36:21 at +0000, grarpamp &lt;a \
href="mailto:grarpamp@gmail.com"&gt;grarpamp@gmail.com&lt;/a&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;Philosophical...&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Why does \
someone want to support and develop for Tor, or any other&lt;br&gt;&lt;/div&gt;&lt;div&gt; overlay p2p \
anonymity network, or crypto, for that matter? When even a&lt;br&gt;&lt;/div&gt;&lt;div&gt; fix to the \
manpage could be read and used by onion users and operators,&lt;br&gt;&lt;/div&gt;&lt;div&gt; same for \
metrics, lists, or any other part of the ecosystem. Does one&lt;br&gt;&lt;/div&gt;&lt;div&gt; fear \
"bad" things, association, or support "good" \
things?&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; I immediately \
observed that "Beastr0" posted via a Protonmail address.&lt;br&gt;&lt;/div&gt;&lt;div&gt; Whereas \
Protonmail supports .onion, and has its own .onion:&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://protonirockerxow.onion/"&gt;https://protonirockerxow.onion/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://protonmail.com/tor"&gt;https://protonmail.com/tor&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://protonmail.com/blog/tor-encrypted-email/"&gt;https://protonmail.com/blog/tor-encrypted-email/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://protonmail.com/blog/protonmail-tor-censorship/"&gt;https://protonmail.com/blog/protonmail-tor-censorship/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://protonmail.com/support/knowledge-base/tor-setup/"&gt;https://protonmail.com/support/knowledge-base/tor-setup/&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; Why does an individual who does not support .onion use a \
service which&lt;br&gt;&lt;/div&gt;&lt;div&gt; promotes its own .onion?&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;Philosophical...&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
Tor supports the &lt;i&gt;right to read&lt;/i&gt;.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; Imagine \
that you were in the biggest library in the world—but a&lt;br&gt;&lt;/div&gt;&lt;div&gt; librarian \
(or security camera) watched over your shoulder to observe and&lt;br&gt;&lt;/div&gt;&lt;div&gt; record \
everything you read.  You'd find that you self-censor your&lt;br&gt;&lt;/div&gt;&lt;div&gt; selections. \
You would avoid anything too controversial—even if it were&lt;br&gt;&lt;/div&gt;&lt;div&gt; something \
you wanted to read so that you could write an argument against&lt;br&gt;&lt;/div&gt;&lt;div&gt; it!  \
You would only read things you guess were acceptable to those&lt;br&gt;&lt;/div&gt;&lt;div&gt; watching \
you.  Adapt "Beastr0's" statement, "I would prefer to not have&lt;br&gt;&lt;/div&gt;&lt;div&gt; my real \
name attached" (to this controversial book).&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;b&gt;That is the Web without Tor.&lt;/b&gt; Tor shields readers from the&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
shoulder-surfing librarian, the eye-tracking security cameras which&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
observe each &lt;i&gt;word&lt;/i&gt; you read, the third-party analytics trackers \
and&lt;br&gt;&lt;/div&gt;&lt;div&gt; "social media" buttons...&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; Tor \
also supports the &lt;i&gt;right to write&lt;/i&gt;.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; The \
ability to read without being tracked must be matched by the ability&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
to publish anonymously, or pseudonymously.  The right of anonymous&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
publication is the cornerstone of the freedom of speech.  .onion&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
protects that right.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
/*&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;.onion also has many additional uses; for but a few \
examples:&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;ol start="0"&gt;&lt;li&gt;Taking load off exit nodes; e.g. \
if you run Debian, switch your&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;apt&lt;/code&gt; updates to \
download from the repositories listed at&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a \
href="https://onion.debian.org/"&gt;https://onion.debian.org/&lt;/a&gt; A/K/A &lt;a \
href="http://5nca3wxl33tzlzj5.onion/"&gt;http://5nca3wxl33tzlzj5.onion/&lt;/a&gt; \
.&lt;br&gt;&lt;/li&gt;&lt;li&gt;See also &lt;a \
href="https://onion.torproject.org/"&gt;https://onion.torproject.org/&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;A/K/A \
&lt;a href="http://yz7lpwfhhzcdyc5y.onion/"&gt;http://yz7lpwfhhzcdyc5y.onion/&lt;/a&gt; \
.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;ol&gt;&lt;li&gt;Enabling Bitcoin nodes to accept incoming \
connections without&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;exposing their IP \
addresses.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;ol start="2"&gt;&lt;li&gt;Enabling communications tools \
such as Ricochet.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;ol start="3"&gt;&lt;li&gt;&lt;div&gt;[...add \
your own here...]&lt;br&gt;&lt;/div&gt;&lt;div&gt; */&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;div&gt;Pens... write \
code.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; Code is speech.  I \
observe that just as many fine .onion operators,&lt;br&gt;&lt;/div&gt;&lt;div&gt; "Beastr0" desires to \
exercise the right to publish free speech under a&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
pseudonym:&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; On 2018-01-10 00:38:47 at +0000, \
Beastr0 &lt;a href="mailto:beastr0@protonmail.com"&gt;beastr0@protonmail.com&lt;/a&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;&lt;div&gt;For the time being I would prefer to not \
have my real name attached to&lt;br&gt;&lt;/div&gt;&lt;div&gt; Tor so I hope you don't mind if I \
introduce myself as Beastro.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;I love Tor and its \
mission.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; I hope that "Beastr0" \
will reconsider his/her/its pseudonymously&lt;br&gt;&lt;/div&gt;&lt;div&gt; expressed opposition to \
.onion.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; /*&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Cf. my current \
.sig motto, a matter of conceptual juxtaposition in&lt;br&gt;&lt;/li&gt;&lt;li&gt;popular propaganda as \
observed by yours truly.  I am innocent.&lt;br&gt;&lt;/li&gt;&lt;li&gt;Aren't "bad guys" the ones who \
should be tapped, tracked, and&lt;br&gt;&lt;/li&gt;&lt;li&gt;searched?  How does anybody dare suggest \
that I should submit to&lt;br&gt;&lt;/li&gt;&lt;li&gt;surveillance &lt;i&gt;because&lt;/i&gt; I am innocent, i.e. \
"have nothing to hide"?&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;"‘If you're not doing anything \
wrong, you have nothing to hide.'&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;"No!  Because I do nothing \
wrong, I have nothing to show."&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;pre&gt;&lt;code&gt; 		— \
nullius@nym.zone &lt;/code&gt;&lt;br&gt;&lt;/pre&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;&lt;div&gt;&lt;i&gt;/&lt;br&gt;  &lt;br&gt; #endif /&lt;/i&gt; \
!&lt;i&gt;ON_TOPIC_FOR_DEV_LIST&lt;/i&gt; */&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/h2&gt;&lt;div&gt;&lt;div&gt;nullius@nym.zone | PGP ECC: \
0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C&lt;br&gt;&lt;/div&gt;&lt;div&gt; Bitcoin: \
bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
"‘If you're not doing anything wrong, you have nothing to hide.'&lt;br&gt;&lt;/div&gt;&lt;div&gt; No! \
Because I do nothing wrong, I have nothing to show." — \
nullius&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;hr&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;tor-dev mailing \
list&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists. \
torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111224456</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-11 22:44:56-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

This thread is off-topic, and unwelcoming to new contributors.
Please stop.

This list is used for developing new features, bug fixes, and
removing old features.

Criticising how people choose to volunteer their time doesn't
help us develop tor.

Writing multiple, long, critical emails to respond to one line in
someone's first thread, does not help new people do tor
development.

I want everyone to be free to express themselves: but this list
has a purpose, and we need to stick to that purpose.

I said this in the original thread as well:

&gt; On 10 Jan 2018, at 23:17, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; That's fine. People are free to work on what they like.
&gt; Convincing people to support Tor features is not a topic for this list :-)

If you want to continue a general discussion about the benefits
of developing agnostic tools, or onion services, please move it
to tor-talk.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Hi,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;br&gt;This thread is off-topic, and unwelcoming to new \
contributors.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Please stop.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;This list is used for developing new features, bug \
fixes, &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;and&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;removing old features.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;Criticising how people choose to&lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt; volunteer their \
time &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;doesn't&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;help &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;us \
develop tor.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Writing multiple, long, critical emails to respond &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;to one line \
in&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;someone's \
first thread, does not help new people do&lt;/span&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt; tor&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;development.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;I want everyone to be free to express themselves: but \
this list&lt;br&gt;has a purpose, and we need to stick to that \
purpose.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;I said this in the original thread as well:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;On 10 Jan \
2018, at 23:17, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;That's fine. People are free to \
work on what they like.&lt;br&gt;Convincing people to support Tor features is not a topic \
for this list :-)&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;If you want to continue a general discussion about the \
benefits&lt;br&gt;of developing agnostic tools, or onion services, please move \
it&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;to \
tor-talk.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112072652</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-01-12 07:26:52-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

On Thu, Jan 11, 2018 at 5:44 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; This thread is off-topic
&gt; This list is used for developing new features, bug fixes, and
&gt; removing old features.

Here are three easily found and directly quoted charters
for this list, none of which are strictly constrained to only
the feature and bug topics described above...

"discussion regarding Tor development"
"Development related discussion list"
"for discussion by the developers"

&gt; unwelcoming to new contributors.
&gt; Criticising how people choose to volunteer their time

Hardly. At least one email was newthreaded and deattributed,
using no monikers or personal pronouns, being void of any directives
or aggressive / abusive speech, and surely naught but positing
free and open questions.

&gt; doesn't help us develop tor.

Nay but benefit... It can help make developers stronger through providing
perhaps a rarely present oppurtunity outside the code routine for
self thought, reflection and review, to reaffirm or even adapt / modify
ones own course and efforts.

This has been noted as "interesting" by, and received "thank you"
from, at least one tor developer.

Should we not welcome and collaborate with all who might have
and allow for such occaisional thought time... are they not the
most welcome of any devs.

- A fourth, the list... "is very low traffic"

As any such reflection therein should perhaps be.

&gt; I want everyone to be free to express themselves

As all are.

&gt; we need to stick to that purpose.

For were there to be no such general prevailing focus on the
tech at hand, there might be few, and lesser, agnostic tools.

To wit, one lesser...

&gt; #endif

nullius.c:1:2: error: #endif without #if

;)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180112080146</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-12 08:01:46-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

[Attachment #2 (multipart/signed)]


(I began writing this earlier, but returned (-1) with ENOTIME.)

On 2018-01-11 at 22:44:56 +0000, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;This thread is off-topic,

I know.  But for understandable reasons, as stated below; and with all 
due apologies for a "-dev" list:

&gt;On 2018-01-11 20:00:45 at +0000, nullius &lt;nullius@nym.zone&gt; wrote:
&gt;&gt;#endif /* !_ON_TOPIC_FOR_DEV_LIST_ */

teor:
&gt;and unwelcoming to new contributors.

0. I disagree in principle with the "welcoming environment" notion; but 
that's hereto irrelevant, for nothing an ordinary reasonable person 
would deem "unwelcoming" was said on this thread.

1. It's an awful trick, soliciting contributions for a project which is 
ideological in nature—and then expecting people to avoid speaking out 
for their motivating ideological passions, when those are entwined with 
the context of a technical discussion.  Some might even consider that 
unwelcoming to potential (quasi-)new contributors, such as myself.

2. I didn't state any sort of personalized invective; and I certainly 
didn't read grarpamp's post that way, either.  For my part, to the 
contrary, I stated constructive criticisms and counterarguments as to an 
abstract opinion.  That was more than warranted, given Tor's stated 
mission—and whereas "Beastr0" had expressed reasonable open-mindedness, 
as I fairly quoted ("(though I am willing to be convinced otherwise)").  
I also thought that "Beastr0" replied to me quite reasonably:

https://lists.torproject.org/pipermail/tor-dev/2018-January/012802.html

On 2018-01-11 at 22:41:26 +0000, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt;Some interesting points, guys, thank you for sending them. Perhaps I 
&gt;will change my opinion one day and if I do I'm sure some of your 
&gt;thoughts on the subject will contribute to that.
&gt;Best,
&gt;
&gt;- Bstro

"Beastr0", you're welcome—and thanks for thinking it over!  Given my 
aforestated "motivating ideological passions" about the right to 
anonymous publication, that little note made my day.

If anything I said in this thread could potentially help bring someone 
out there to reconsider and perhaps support .onion in the future, then I 
would call that a happy ending all-around.

&gt;Please stop.

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111230616</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-11 23:06:16-0400</timestampReceived><subject>Re: [tor-dev] Volunteering for Tor</subject><body>

[Attachment #2 (--Apple-Mail-4A54F05C-ED9B-4264-A5BB-B92148F77597)]


Hi Charles,

&gt; On 12 Jan 2018, at 08:01, Charles Hunt &lt;charles.hunt@protonmail.com&gt; wrote:
&gt; 
&gt; After 15 years of desktop support, I am following my passion to be a Python3 \
&gt; programmer. I am still an amature programmer, but I aced the python fundamentals \
&gt; course from Coursera to flesh out my skills. I would like to continue developing my \
&gt; programming skills by volunteering for Tor. Do you have something I can help with?

Thanks for writing to us.

Here is a list of the different Tor projects and the main languages they are in:
https://www.torproject.org/getinvolved/volunteer.html.en#Projects
Some projects use other languages for minor components or scripts.

Here is a list of tickets for first time contributors:
https://trac.torproject.org/projects/tor/report/30

And if you're interested in skipping that and just diving into coding,
here is an active ticket in Tor to write a python script to update the
list of directory authorities in the Tor source code:
https://trac.torproject.org/projects/tor/ticket/24851#comment:1

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Hi \
Charles,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;On 12 Jan 2018, at 08:01, Charles Hunt &lt;&lt;a \
href="mailto:charles.hunt@protonmail.com"&gt;charles.hunt@protonmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;After 15 years of desktop support, I \
am following my passion to be a Python3 programmer. I am still an amature programmer, \
but I aced the python fundamentals course from Coursera to flesh out my skills. I \
would like to continue developing my programming skills by volunteering for Tor. Do \
you have something I can help \
with?&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Thanks for writing to \
us.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a list of the different Tor projects and the \
main languages they are in:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://www.torproject.org/getinvolved/volunteer.html.en#Projects"&gt;https://www.torproject.org/getinvolved/volunteer.html.en#Projects&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Some \
projects use other languages for minor components or \
scripts.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a list of tickets for first time \
contributors:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/report/30"&gt;https://trac.torproject.org/projects/tor/report/30&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
if you're interested in skipping that and just diving into coding,&lt;/div&gt;&lt;div&gt;here is \
an active ticket in Tor to write a python script to update the&lt;/div&gt;&lt;div&gt;list of \
directory authorities in the Tor source code:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24851#comment:1"&gt;https://trac.to \
rproject.org/projects/tor/ticket/24851#comment:1&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112013246</emailId><senderName>Charles Hunt</senderName><senderEmail>charles.hunt@protonmail.com</senderEmail><timestampReceived>2018-01-12 01:32:46-0400</timestampReceived><subject>Re: [tor-dev] Volunteering for Tor</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Thank you so much. If you don't mind I think I will start off with the "tickets for \
first time contributors". When I have a question do I just email this address for \
assistance? Once again thank you.

Sent with [ProtonMail](https://protonmail.com) Secure Email.

&gt; -------- Original Message --------
&gt; Subject: Re: [tor-dev] Volunteering for Tor
&gt; Local Time: January 11, 2018 11:06 PM
&gt; UTC Time: January 11, 2018 11:06 PM
&gt; From: teor2345@gmail.com
&gt; To: tor-dev@lists.torproject.org
&gt; 
&gt; Hi Charles,
&gt; 
&gt; On 12 Jan 2018, at 08:01, Charles Hunt &lt;charles.hunt@protonmail.com&gt; wrote:
&gt; 
&gt; &gt; After 15 years of desktop support, I am following my passion to be a Python3 \
&gt; &gt; programmer. I am still an amature programmer, but I aced the python fundamentals \
&gt; &gt; course from Coursera to flesh out my skills. I would like to continue developing \
&gt; &gt; my programming skills by volunteering for Tor. Do you have something I can help \
&gt; &gt; with?
&gt; 
&gt; Thanks for writing to us.
&gt; 
&gt; Here is a list of the different Tor projects and the main languages they are in:
&gt; https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt; Some projects use other languages for minor components or scripts.
&gt; 
&gt; Here is a list of tickets for first time contributors:
&gt; https://trac.torproject.org/projects/tor/report/30
&gt; 
&gt; And if you're interested in skipping that and just diving into coding,
&gt; here is an active ticket in Tor to write a python script to update the
&gt; list of directory authorities in the Tor source code:
&gt; https://trac.torproject.org/projects/tor/ticket/24851#comment:1
&gt; 
&gt; T


[Attachment #5 (text/html)]

&lt;div&gt;Thank you so much. If you don't mind I think I will start off with the "tickets \
for first time contributors". When I have a question do I just email this address for \
assistance? Once again thank you. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block"&gt;&lt;div \
class="protonmail_signature_block-user"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;Sent with &lt;a \
href="https://protonmail.com"&gt;ProtonMail&lt;/a&gt; Secure \
Email.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="protonmail_quote" \
type="cite"&gt;&lt;div&gt;-------- Original Message --------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: Re: \
[tor-dev] Volunteering for Tor&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: January 11, 2018 11:06 \
PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: January 11, 2018 11:06 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: \
teor2345@gmail.com&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Hi \
Charles,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;On 12 Jan 2018, at 08:01, Charles \
Hunt &lt;&lt;a href="mailto:charles.hunt@protonmail.com"&gt;charles.hunt@protonmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;After 15 years of desktop support, \
I am following my passion to be a Python3 programmer. I am still an amature \
programmer, but I aced the python fundamentals course from Coursera to flesh out my \
skills. I would like to continue developing my programming skills by volunteering for \
Tor. Do you have something I can help \
with?&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Thanks for writing to \
us.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a list of the different Tor projects and the \
main languages they are in:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://www.torproject.org/getinvolved/volunteer.html.en#Projects"&gt;https://www.torproject.org/getinvolved/volunteer.html.en#Projects&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Some \
projects use other languages for minor components or \
scripts.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is a list of tickets for first time \
contributors:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/report/30"&gt;https://trac.torproject.org/projects/tor/report/30&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
if you're interested in skipping that and just diving into coding,&lt;br&gt;&lt;/div&gt;&lt;div&gt;here \
is an active ticket in Tor to write a python script to update the&lt;br&gt;&lt;/div&gt;&lt;div&gt;list \
of directory authorities in the Tor source code:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24851#comment:1"&gt;https://trac.to \
rproject.org/projects/tor/ticket/24851#comment:1&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110232505</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 23:25:05-0400</timestampReceived><subject>Re: [tor-dev] Block Global Active Adversary Cloudflare</subject><body>

Hi,

On 11 Jan 2018, at 05:38, nullius &lt;nullius@nym.zone&gt; wrote:

&gt; &gt; Here's what I suggest you do:
&gt; &gt; 
&gt; &gt; Blocking an entire CDN would be a major change to either Tor or Tor Browser's \
&gt; &gt; design. It's not likely to happen, because of the security vs usability tradeoff. \
&gt; &gt; Significantly reducing the usability of Tor would decrease the number of users, \
&gt; &gt; making Tor's anonymity set smaller, and reducing anonymity for everyone.
&gt; 
&gt; My suggestion is to tie blocking behaviour to the Security Slider.  I do understand \
&gt; that blocking Javascript, etc. by default would have the same "anonymity set" \
&gt; impact as you describe; and that's why we have the Security Slider to begin with, \
&gt; so let's use it! 
&gt; I do almost all my web surfing on "High"; and I can attest, that already breaks \
&gt; most of today's Web.  Users who surf on "High" security can be expected to *desire* \
&gt; some additional breakage, if that helps protect the confidentiality and integrity \
&gt; of their communications.  Thus, I suggest that Cloudflare should be blocked by \
&gt; default on "High" (with an "Add exception" style override button). 
&gt; On "Medium" security, I suggest that at least clear warning should be displayed.  \
&gt; I'm on the fence about whether it should block by default here, or offer to set an \
&gt; option to block with the same popup widget used for various other permissions \
&gt; issues ("Allow this: Always/Never"). 
&gt; On "Low" security—well, users who surf on "Low" security are already suicidal, \
&gt; anyway.  (I myself *never* use the "Low" security level—never!)  The lock icon \
&gt; should still be changed, perhaps with the same display as used on mixed-content \
&gt; sites.  But I do not think Cloudflare should be blocked by default on the "Low" \
&gt; security level. 
&gt; I believe the foregoing should address your concerns about the "security vs. \
&gt; usability tradeoff", for reasons identical to those discussed at: 
&gt; https://www.torproject.org/projects/torbrowser/design/#security-slider
&gt; 
&gt; https://www.torproject.org/docs/faq.html.en#TBBJavaScriptEnabled
&gt; 
&gt; &gt; … 
&gt; 
&gt; &gt; Then, if you think this change belongs in Tor, Tor has a proposals process:
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt
&gt; &gt; 
&gt; &gt; Please submit a proposal with reasons for the change, and a design.
&gt; 
&gt; I don't see this as a suitable change for Core Tor.
&gt; 
&gt; With no need for a proposal, it *should* be relatively straightforward to build a \
&gt; generalized blacklisting (sort of IP null-routing) utility using the Tor Control \
&gt; Protocol—perhaps using __LeaveStreamsUnattached and juggling streams and circuits \
&gt; ourselves?  It is only a bit tricky due to name resolution occurring on the exit:  \
&gt; We usually won't know the destination IP address until Tor receives a \
&gt; RELAY_CONNECTED cell.

Sending every remote site address from the Tor process to an extension
increases the surface area for attacks. The browser needs to have URLs to
do its job, but even it doesn't get IP addresses. Each extension that we add
to the browser should have the minimum information it needs to operate.

Another alternative is to add an option to Tor that rejects remote site
addresses, much like the existing ReachableAddresses option for entry
nodes, or the ExcludeNodes options for relays. I can see this being a
plausible feature for people who want to resist DNS poisoning,  if they
know the netblocks in advance.

&gt; Add a list of IP addresses registered to Cloudflare in the RIR databases, and we're \
&gt; done.  (I assume that they have all their own allocations, though I'd investigate \
&gt; that assumption if I were actually doing this.) 
&gt; But this would provide no application-level UI integration or override mechanism \
&gt; for the user.  Cloudflare is easy to detect at the application level, due to their \
&gt; injection of Cloudflare-specific HTTP headers.  Wherefore I filed #24351 against \
&gt; Tor Browser, not Core Tor.

This gives the extension access to the content of every encrypted page.
This is a greater level of access than CloudFlare. The same objections
to CloudFlare apply, But the extension knows more, because it runs on
the local user's machine, knows about multiple remote sites, and could
collect local information as well.

&gt; &gt; If you think this change belongs in Tor Browser, please send a short change \
&gt; &gt; proposal to the tbb-dev list.
&gt; 
&gt; Good idea, thanks.  When time permits, I may try to work up something suitable.

Please develop a least-authority design. Don't become the new CloudFlare.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180116231605</emailId><senderName>blaze glory</senderName><senderEmail>bglory@yandex.com</senderEmail><timestampReceived>2018-01-16 23:16:05-0400</timestampReceived><subject>[tor-dev] tor failing to resolve some dns records</subject><body>

[Attachment #2 (text/html)]

&lt;div&gt;&lt;div&gt;I'm having a strange problem with torsocks and resolving some dns records - \
one of the example i've managed to replicate on torsocks v2.2.0 and v2.1., tor \
version 0.2.9.11 (git-aa&lt;span&gt;8950022562&lt;/span&gt;be76), version 0.3.2.9 \
(git-64a719dd25a21acb).. I've tested this on several different machines/ips/isps so \
it not localized.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ telnet node.moneroworld.com&lt;/div&gt;&lt;div&gt;Trying \
45.63.14.175...&lt;/div&gt;&lt;div&gt;Trying 96.43.139.226...&lt;/div&gt;&lt;div&gt;^C&lt;/div&gt;&lt;div&gt;$ torsocks \
telnet node.moneroworld.com&lt;/div&gt;&lt;div&gt;&lt;span&gt;1516143453&lt;/span&gt; ERROR torsocks[4459]: \
Unable to resolve. Status reply: 4 (in socks5_recv_resolve_reply() at \
socks5.c:683)&lt;/div&gt;&lt;div&gt;telnet: could not resolve node.moneroworld.com/telnet: \
Non-recoverable failure in name resolution&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;same issue can be \
replicated with node.xmr.be. Both domain have round robin configured for this record \
- they return multiple A records. Could this be the issue with this?&lt;/div&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;If anyone could shed some light on this it would be greatly \
appreciate.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;best regards, B&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;p.s. sorry \
for the duplicate, adding subject&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #3 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180123085300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-23 08:53:00-0400</timestampReceived><subject>Re: [tor-dev] tor failing to resolve some dns records</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


I can confirm that you can apparently not resolve 
"node.moneroworld.com"
and
"node.xmr.be"
via tor. 
I didn't test across multiple exits because I assume it is not related to the exit.

I tested it against a tor DNSPort, I don't think that has anything todo with torsocks.
(That is why I changed the component for this ticket on trac)


It is probably worth mentioning that 
node.moneroworld.com resolves to 32 A records,
node.xmr.be resolve to 55 A records,
which might be the problem here?
 
Has tor a limit on how much it can take?


https://trac.torproject.org/projects/tor/ticket/24937




-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180110121718</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 12:17:18-0400</timestampReceived><subject>Re: [tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2018, at 22:22, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt; 
&gt; T,
&gt; 
&gt; I'm interested in helping you guys with Tor development. I don't really care what I \
&gt; work on, except I do not support .onion websites (though I am willing to be \
&gt; convinced otherwise) so I would prefer not to participate directly in their \
&gt; development.

That's fine. People are free to work on what they like.
Convincing people to support Tor features is not a topic for this list :-)

&gt; I have plenty of experience with writing code for networks and for various \
&gt; calculations, as well a few programs for file handling. Yeah, I'm familiar with \
&gt; git, I've used it before on several projects. I think for now I'm going to stick \
&gt; with Tor networking, for the time being.

Sounds great!
Are there any particular parts of Tor you want to help improve?
(Clients, Relays, Exits? IPv6?)

Do you want a suggestion?

I am working on making it easier for external libraries to use Tor's
hard-coded directory lists:

https://trac.torproject.org/projects/tor/ticket/24818

The next task is to split the directory authority list into its own file:

https://trac.torproject.org/projects/tor/ticket/24854

And then after that, we want to generate the lists in a standard format.
This would be a good way to learn how Tor contacts the network when it
starts up.

&gt; I've already got Tor up and running in a vm on my machine. Should I also try to \
&gt; contact dgoulet (assigned to bug triage for the week) as well as taking look at \
&gt; those tickets?

dgoulet is on this list.

(We do almost all our development in public. Contacting people
directly means that only one person can help you.)

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpWBE4ACgkQdA2eOQJS
cqLvTxAAsBEV+k+vL9t/WDVoscfyApuukb/jbh5jv04eNEvo9k/4q9ggNJtqGhAw
Mgi6HdMSSMiyupwAnLt7is8a8fUkIxYOOSpbI+FORXD+tPnDS5CyjOH9A3lLLMwr
RU8MqXbs6RY73TwnXbH1PXMlkA/giNZ9mmsx4uUhhhYtqGac7QN8MsLcCPEHrJNt
oXwgoI2eID9x4VtFGWAjwblN9GhkefY/dIuT3DCeO7515H6YEaRrogXfbxxnMmI/
e0eARX/A9JGQqsPKXms+3o1zJ281DxFH2hoGYTXNUTdk81eMtVyrfvZm6Yi46gR9
3jQFuFaYY9Wl04sd8lgHpqXB01GmVm54OKfWM+5xhGKFla2z0DYscGUYxlxnzb0g
Y7gVF6JzrbPAHgJf8Ei4Wpi7jmkQXkN5cuo4R+OmrrZ7HQdrNufmoC8oN6N9s7I9
ViM/VT52jz9lMubZrgceyc8uN8sqvMMmkiEXQLOIYJ6qADcwn1XStyIU2ZYyuQD+
rA6SV6+d1OwNe0PmAJ1daKhH+pnUrNXKaNgy/r4Eh4q+bRKdR9eFGZUiaTBsYpRG
ocW6L45Gk+YV8ZsXHMuXVSnknqkKtRjKHURfA2XLz27SfJ0W6TzqPwAMkvtFLaTl
ffObQJAlAGOKy8vx9+swQLqSA69EDlhSD+CHDL6cumoJeIcr+1o=
=lI3s
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111003013</emailId><senderName>Beastr0</senderName><senderEmail>beastr0@protonmail.com</senderEmail><timestampReceived>2018-01-11 00:30:13-0400</timestampReceived><subject>Re: [tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

On 10 Jan 2018, Teor wrote:            (yeah, ik you guys got this running on some \
automated script or something but I don't have access and that sounds unnecessarily \
complicated so I'm just gonna do this quick header for context)

&gt; Sounds great!

&gt; &gt; Are there any particular parts of Tor you want to help improve?
&gt; &gt; (Clients, Relays, Exits? IPv6?)
&gt; 
&gt; No, nothing I can think of now. I'll let you guys know if that changes or something \
&gt; though. 
&gt; &gt; Do you want a suggestion?
&gt; 
&gt; Sure
&gt; 
&gt; &gt; I am working on making it easier for external libraries to use Tor's
&gt; hard-coded directory lists:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/24818
&gt; &gt; The next task is to split the directory authority list into its own file:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/24854
&gt; &gt; And then after that, we want to generate the lists in a standard format.
&gt; &gt; This would be a good way to learn how Tor contacts the network when it
&gt; starts up.

           Assuming this is what you meant by your suggestion then yes, I would \
definitely love to help you out with these tickets! I can start working on them right \
now.

- Bstro

&gt; -------- Original Message --------
&gt; Subject: Re: [tor-dev] Tor dev help
&gt; Local Time: January 10, 2018 12:17 PM
&gt; UTC Time: January 10, 2018 12:17 PM
&gt; From: teor2345@gmail.com
&gt; To: tor-dev@lists.torproject.org
&gt; 
&gt; &gt; On 10 Jan 2018, at 22:22, Beastr0 beastr0@protonmail.com wrote:
&gt; &gt; T,
&gt; &gt; I'm interested in helping you guys with Tor development. I don't really care what \
&gt; &gt; I work on, except I do not support .onion websites (though I am willing to be \
&gt; &gt; convinced otherwise) so I would prefer not to participate directly in their \
&gt; &gt; development.
&gt; 
&gt; That's fine. People are free to work on what they like.
&gt; Convincing people to support Tor features is not a topic for this list :-)
&gt; 
&gt; &gt; I have plenty of experience with writing code for networks and for various \
&gt; &gt; calculations, as well a few programs for file handling. Yeah, I'm familiar with \
&gt; &gt; git, I've used it before on several projects. I think for now I'm going to stick \
&gt; &gt; with Tor networking, for the time being.
&gt; 
&gt; Sounds great!
&gt; Are there any particular parts of Tor you want to help improve?
&gt; (Clients, Relays, Exits? IPv6?)
&gt; 
&gt; Do you want a suggestion?
&gt; 
&gt; I am working on making it easier for external libraries to use Tor's
&gt; hard-coded directory lists:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/24818
&gt; 
&gt; The next task is to split the directory authority list into its own file:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/24854
&gt; 
&gt; And then after that, we want to generate the lists in a standard format.
&gt; This would be a good way to learn how Tor contacts the network when it
&gt; starts up.
&gt; 
&gt; &gt; I've already got Tor up and running in a vm on my machine. Should I also try to \
&gt; &gt; contact dgoulet (assigned to bug triage for the week) as well as taking look at \
&gt; &gt; those tickets?
&gt; 
&gt; dgoulet is on this list.
&gt; 
&gt; (We do almost all our development in public. Contacting people
&gt; directly means that only one person can help you.)
&gt; 
&gt; T
&gt; 
&gt; Tim Wilson-Brown (teor)
&gt; 
&gt; teor2345 at gmail dot com
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; 
&gt; ---------------------------------------------------------------
&gt; 
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;div&gt;On 10 Jan 2018, Teor \
wrote:            (yeah, ik \
you guys got this running on some automated script or something but I don't have \
access and that sounds unnecessarily complicated so I'm just gonna do this quick \
header for context)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;Sounds \
great!&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite" class="protonmail_quote"&gt;&lt;div&gt;&lt;div&gt;&gt;Are \
there any particular parts of Tor you want to help \
improve?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;(Clients, Relays, Exits? \
IPv6?)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      No, nothing I can \
think of now. I'll let you guys know if that changes or something \
though.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;Do you want a \
suggestion?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;      Sure \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;I am working on making it easier for external \
libraries to use Tor's&lt;br&gt;&lt;/div&gt;&lt;div&gt;hard-coded directory lists:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24818"&gt;https://trac.torproject.org/projects/tor/ticket/24818&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;The \
next task is to split the directory authority list into its own \
file:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24854"&gt;https://trac.torproject.org/projects/tor/ticket/24854&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;And \
then after that, we want to generate the lists in a standard \
format.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&gt;This would be a good way to learn how Tor contacts the \
network when it&lt;br&gt;&lt;/div&gt;&lt;div&gt;starts up.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
class="protonmail_signature_block"&gt;&lt;div class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;           \
Assuming this is what you meant by your suggestion then yes, I would definitely love \
to help you out with these tickets! I can start working on them right \
now.&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block-proton"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton"&gt;- \
Bstro&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="protonmail_quote" \
type="cite"&gt;&lt;div&gt;-------- Original Message --------&lt;br&gt;&lt;/div&gt;&lt;div&gt;Subject: Re: \
[tor-dev] Tor dev help&lt;br&gt;&lt;/div&gt;&lt;div&gt;Local Time: January 10, 2018 12:17 \
PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;UTC Time: January 10, 2018 12:17 PM&lt;br&gt;&lt;/div&gt;&lt;div&gt;From: \
teor2345@gmail.com&lt;br&gt;&lt;/div&gt;&lt;div&gt;To: \
tor-dev@lists.torproject.org&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;On 10 Jan 2018, at 22:22, Beastr0 &lt;a \
href="mailto:beastr0@protonmail.com"&gt;beastr0@protonmail.com&lt;/a&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;div&gt;T,&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm interested in helping you guys with Tor \
development. I don't really care what I work on, except I do not support .onion \
websites (though I am willing to be convinced otherwise) so I would prefer not to \
participate directly in their \
development.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; That's fine. \
People are free to work on what they like.&lt;br&gt;&lt;/div&gt;&lt;div&gt; Convincing people to \
support Tor features is not a topic for this list :-)&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;I have plenty of experience with writing code \
for networks and for various calculations, as well a few programs for file handling. \
Yeah, I'm familiar with git, I've used it before on several projects. I think for now \
I'm going to stick with Tor networking, for the time \
being.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; Sounds \
great!&lt;br&gt;&lt;/div&gt;&lt;div&gt; Are there any particular parts of Tor you want to help \
improve?&lt;br&gt;&lt;/div&gt;&lt;div&gt; (Clients, Relays, Exits? IPv6?)&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; Do you want a suggestion?&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
I am working on making it easier for external libraries to use Tor's&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
hard-coded directory lists:&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24818"&gt;https://trac.torproject.org/projects/tor/ticket/24818&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; The next task is to split the directory authority list into its \
own file:&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24854"&gt;https://trac.torproject.org/projects/tor/ticket/24854&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; And then after that, we want to generate the lists in a \
standard format.&lt;br&gt;&lt;/div&gt;&lt;div&gt; This would be a good way to learn how Tor contacts \
the network when it&lt;br&gt;&lt;/div&gt;&lt;div&gt; starts up.&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;blockquote&gt;&lt;div&gt;I've already got Tor up and running in a vm on \
my machine. Should I also try to contact dgoulet (assigned to bug triage for the \
week) as well as taking look at those \
tickets?&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;h2&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; dgoulet is on this \
list.&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; (We do almost all our development in \
public. Contacting people&lt;br&gt;&lt;/div&gt;&lt;div&gt; directly means that only one person can help \
you.)&lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; T&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/h2&gt;&lt;h2&gt;&lt;div&gt;Tim Wilson-Brown (teor)&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt; teor2345 at gmail dot com&lt;br&gt;&lt;/div&gt;&lt;div&gt; PGP C855 6CED 5D90 \
A0C5 29F6 4D43 450C BA7F 968F 094B&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
ricochet:ekmygaiu4rzgsk6n&lt;br&gt;&lt;/div&gt;&lt;/h2&gt;&lt;div&gt;&lt;div&gt; &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;div&gt;  &lt;br&gt;&lt;/div&gt;&lt;div&gt; \
 &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;hr&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;tor-dev mailing \
list&lt;br&gt;&lt;/div&gt;&lt;div&gt; &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; \
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists. \
torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180109171933</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-01-09 17:19:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

On Fri, Nov 24, 2017 at 4:05 PM, chelsea komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt; It is great that we are identifying places to improve support for Rust in
&gt; Tor.
&gt;
&gt; Along this same line of thinking, are there other places in Tor where we
&gt; will need to move to supporting UTF-8? For example, should the statefile be
&gt; UTF-8 also?

I think we could safely say that the torrc and state files need to be
UTF-8, though that wouldn't need a design proposal.  We'd want to do a
two-phase transition, though: first warning, then disallowing.

We could also, at some point, specify that the control protocol needs
to be UTF-8 too, I think.  That one would need a proposal, and a
transition plan.
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180109173406</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-01-09 17:34:06-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

Hi, Teor, and sorry for the long delay!  You had a lot of good
questions on this proposal, and I didn't know how to answer them all.
So in hopes of making progress here, I'm taking wild guesses and
asking for help in making the wild guesses better :)


On Mon, Nov 13, 2017 at 5:28 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; On 14 Nov 2017, at 05:51, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;
&gt; Filename: 285-utf-8.txt
&gt; Title: Directory documents should be standardized as UTF-8
&gt; Author: Nick Mathewson
&gt; Created: 13 November 2017
&gt; Status: Open
&gt;
&gt; 1. Summary and motivation
&gt;
&gt;    People frequently want to include non-ASCII text in their router
&gt;    descriptors.  The Contact line is a favorite place to do this, but in
&gt;    principle the platform line would also be pretty logical.
&gt;
&gt;    Unfortunately, there's no specified way to encode non-ASCII in our
&gt;    directory documents.
&gt;
&gt;    Fortunately, almost everybody who does it, uses UTF-8 anyway.
&gt;
&gt;
&gt; How many current descriptors will be rejected as non-UTF-8?

I think that when last I checked, the number was something like 3.

&gt;    As we move towards Rust support in Tor, we gain another motivation
&gt;    for standarding on UTF-8, since Rust's native strings strongly prefer
&gt;    UTF-8.
&gt;
&gt;    So, in this proposal, we describe a migration path to having all
&gt;    directory documents be fully UTF-8.
&gt;
&gt; 2. Proposal
&gt;
&gt;    First, we should have Tor relays reject ContactInfo lines (and any
&gt;    other lines copied directly into router descriptors) that are not
&gt;    UTF-8.
&gt;
&gt;
&gt; How do we define UTF-8?

I tried to do so as follows:

   We define the allowable set of UTF-8 as:
        * Encoding the codepoints U+01 through U+10FFFF,
        * but excluding the codepoints U+D800 through U+DFFF,
        * each encoded with the shortest possible encoding.
        * without any BOM

Are there other restrictions we should make?  If so, how should we phrase them?

[...]
&gt; How do we carry forward existing ASCII restrictions into UTF-8?

I don't understand this question.

&gt; We will need to update the directory spec to acknowledge that
&gt; contact and platform lines may be parsed as UTF-8 or
&gt; ASCII-including-arbitrary-bytes-except-NUL, and that they are
&gt; terminated by single-byte newlines regardless.

Ack.

&gt; How do we deal with format confusion attacks?
&gt;
&gt; UTF-8 has a few alternative whitespace characters. These could
&gt; be used in an attack that confuses either humans viewing the file,
&gt; or automated software:
&gt;
&gt; If a human uses a UTF-8 compatible viewer or editor, it likely shows
&gt; Unicode newlines and ASCII newlines in an identical way. Similarly,
&gt; it may show Unicode spaces and ASCII spaces in the same way.
&gt; This may confuse the human reader.

Right.  I don't see an obvious attack here, but we should keep it in mind.

Do you have a different suggestion of what to do here?

&gt; Similarly, if automated software parses using a Unicode whitespace
&gt; or newline character class, it will mis-parse directory documents.
&gt; (Our Rust protover code looks for ASCII spaces, so it appears to
&gt; be fine.)
&gt;
&gt; Note that we already have this issue with line feeds and carriage
&gt; returns, which I thought we had solved by banning carriage returns
&gt; in directory documents. But it appears we allow "any printing ASCII
&gt; character". (We will have to edit this to include Unicode.)

Also let's consider all the nonprinting ASCII: it's already a
potential display problem if you're using a bad editor, or whatever.

&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n218
&gt;
&gt;    At the same time, we should have authorities reject any router
&gt;    descriptors or extrainfo documents that are not valid UTF-8.
&gt;    Simultaneously, we can have all Tor instances reject all
&gt;    non-directory-descriptor directory documents that are not UTF-8,
&gt;    since none should exist today.
&gt;
&gt;
&gt; If we apply the existing restrictions in dir-spec, which require
&gt; non-directory-descriptor directory documents to be ASCII, they will
&gt; also be UTF-8.
&gt;
&gt; Isn't it confusing to say "UTF-8", when what we really mean is "ASCII"?
&gt; Do we expect to migrate these to non-ASCII UTF-8 at some point?

I think having non-ASCII in extrainfos is a reasonable possibility.
I'm not so sure about the others: there could be reasons in the
future.

My rationale for declaring everything to be UTF-8 was that it seemed
more reasonable to have a single set of rules for parsing everything
than to have different rules for different documents.

&gt; Also, does "non-directory-descriptor directory documents" mean we
&gt; can reject non-UTF-8 microdescriptors? I think we should.

I think so.

&gt; Does the NS consensus contain any lines that are copied verbatim from
&gt; descriptors?

I don't think so.

[...]
&gt;    should be rejected entirely: "reject-encrypted-non-utf-8".  If that
&gt;    parameter is set to 1, then hidden service clients will not only
&gt;    warn, but reject the descriptors.
&gt;
&gt;    Once the vast majority of clients are running versions that support
&gt;    the "reject-encrypted-non-utf-8" parameter, that parameter can be set
&gt;    to 1.
&gt;
&gt;
&gt; We also can't reject bridge descriptors at the authority level.
&gt; (Bridge clients download bridge descriptors directly from bridges.)
&gt; Do we need bridge clients to also use this consensus parameter?

I added an extra section for this, basically saying "bridge clients
should do that too":

2.2. Bridge descriptors

   Since clients download bridge descriptors directly from the bridges, they
   also need a two-phase plan as for hidden service descriptors above.  Here
   we take the same approach as in section 2.1 above, except using the
   parameter "reject-bridge-descriptor-non-utf-8".
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180110001954</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-10 00:19:54-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 10 Jan 2018, at 04:34, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; On Mon, Nov 13, 2017 at 5:28 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; On 14 Nov 2017, at 05:51, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; Filename: 285-utf-8.txt
&gt;&gt; Title: Directory documents should be standardized as UTF-8
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 13 November 2017
&gt;&gt; Status: Open
&gt;&gt; 
&gt;&gt; 1. Summary and motivation
&gt;&gt; 
&gt;&gt;   People frequently want to include non-ASCII text in their router
&gt;&gt;   descriptors.  The Contact line is a favorite place to do this, but in
&gt;&gt;   principle the platform line would also be pretty logical.
&gt;&gt; 
&gt;&gt;   Unfortunately, there's no specified way to encode non-ASCII in our
&gt;&gt;   directory documents.
&gt;&gt; 
&gt;&gt;   Fortunately, almost everybody who does it, uses UTF-8 anyway.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; How many current descriptors will be rejected as non-UTF-8?
&gt; 
&gt; I think that when last I checked, the number was something like 3.
&gt; 
&gt;&gt;   As we move towards Rust support in Tor, we gain another motivation
&gt;&gt;   for standarding on UTF-8, since Rust's native strings strongly prefer
&gt;&gt;   UTF-8.
&gt;&gt; 
&gt;&gt;   So, in this proposal, we describe a migration path to having all
&gt;&gt;   directory documents be fully UTF-8.
&gt;&gt; 
&gt;&gt; 2. Proposal
&gt;&gt; 
&gt;&gt;   First, we should have Tor relays reject ContactInfo lines (and any
&gt;&gt;   other lines copied directly into router descriptors) that are not
&gt;&gt;   UTF-8.
&gt;&gt; 
&gt;&gt; 
&gt;&gt; How do we define UTF-8?
&gt; 
&gt; I tried to do so as follows:
&gt; 
&gt;   We define the allowable set of UTF-8 as:
&gt;        * Encoding the codepoints U+01 through U+10FFFF,
&gt;        * but excluding the codepoints U+D800 through U+DFFF,

These are called "Unicode Scalar Values".
https://www.unicode.org/glossary/#unicode_scalar_value

Let's reference that.

&gt;        * each encoded with the shortest possible encoding.
&gt;        * without any BOM
&gt; 
&gt; Are there other restrictions we should make?  If so, how should we phrase them?

These seem fine, and not tied to a particular unicode version.

But I don't know enough about Unicode to know if there is anything else we should
specify.

I know how we'd do this in C (raw bytes with a check before parsing), and I think
we can do this in Rust using char:
https://doc.rust-lang.org/1.0.0/unicode/char/


Here are some other things we might want to document:

Unassigned Code Points

Accepting arbitrary unassigned unicode code points may cause issues for some
parsers, because as far as I am aware, parsers typically only handle a particular
unicode version. We should note this in the spec.

The potential attack here is that Tor accepts a newly introduced character, and
a downstream parser rejects it. But that's not Tor's problem.

The right way for parsers to handle this is to replace unknown characters with
an appropriate replacement character. (Unicode has rules for this.) Or possibly
throw an error. We can't make this decision for them: it depends on the goals of
the parser.

Equality and Normalisation

We should also make sure that equality is specified as byte-for-byte equality.
This means that several different byte sequences could be visually similar, and
even have identical normalised forms, but we would treat them as different.

Unicode has several levels of normalisation:
https://en.wikipedia.org/wiki/Unicode_equivalence#Normalization
We should not require any of them in our inputs.

Again, normalisation may be a potential issue for parsers. Again, we can't
decide how they will want to handle it, but we should document it.

Also, if we change our minds about this in future, we can make tor relays
normalise the contents of their descriptors, and the authority implementation
will continue to work. And then we can make authorities reject non-normalised
inputs a few releases later.

&gt; [...]
&gt;&gt; How do we carry forward existing ASCII restrictions into UTF-8?
&gt; 
&gt; I don't understand this question.

I think it was intended as a general question.
Then I wrote some specific questions.

&gt;&gt; We will need to update the directory spec to acknowledge that
&gt;&gt; contact and platform lines may be parsed as UTF-8 or
&gt;&gt; ASCII-including-arbitrary-bytes-except-NUL, and that they are
&gt;&gt; terminated by single-byte newlines regardless.
&gt; 
&gt; Ack.
&gt; 
&gt;&gt; How do we deal with format confusion attacks?
&gt;&gt; 
&gt;&gt; UTF-8 has a few alternative whitespace characters. These could
&gt;&gt; be used in an attack that confuses either humans viewing the file,
&gt;&gt; or automated software:
&gt;&gt; 
&gt;&gt; If a human uses a UTF-8 compatible viewer or editor, it likely shows
&gt;&gt; Unicode newlines and ASCII newlines in an identical way. Similarly,
&gt;&gt; it may show Unicode spaces and ASCII spaces in the same way.
&gt;&gt; This may confuse the human reader.
&gt; 
&gt; Right.  I don't see an obvious attack here, but we should keep it in mind.
&gt; 
&gt; Do you have a different suggestion of what to do here?

No, I really think this is like the potential parser bugs: not our problem.
People should get a better editor. And editors should get better.

&gt;&gt; Similarly, if automated software parses using a Unicode whitespace
&gt;&gt; or newline character class, it will mis-parse directory documents.
&gt;&gt; (Our Rust protover code looks for ASCII spaces, so it appears to
&gt;&gt; be fine.)
&gt;&gt; 
&gt;&gt; Note that we already have this issue with line feeds and carriage
&gt;&gt; returns, which I thought we had solved by banning carriage returns
&gt;&gt; in directory documents. But it appears we allow "any printing ASCII
&gt;&gt; character". (We will have to edit this to include Unicode.)
&gt; 
&gt; Also let's consider all the nonprinting ASCII: it's already a
&gt; potential display problem if you're using a bad editor, or whatever.

Yes. Just like we can't decide how editors or parsers handle bad ASCII,
we can't decide how they handle bad (or new) Unicode.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------





["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpVXCoACgkQdA2eOQJS
cqLoXxAAniP4HV7DLeN0PiXhg8HRN0oKgD/KWVo5MXaE0g440VFlLXOmqjnt6vu+
47q4YOZ51UxJLHwKQTVGC4ci2i0r3BZT/YWKlxT5g37SG72hFvKta41dOGZ5nMKy
+oDjuW0toskf5DluWN9dyBLUHW4MbtDPaCRKsfP5NlUggKwazCuyP0budwTD380s
057ZGwdBz/mYLF0XdxFfScRWamL/9dObVAOi8j2Fd2MhHc7hQ/Vp8ThMNhb3W7V3
etN8GoRy9xSu65mjq1LPeIYRhqa8L2/MsjIIxxjp+Et2ykaqWcxm9oItyLuzZy/X
VL/eaSaftFOFuQc1G4p3J+4uRzb+6f68edIh5N4V+2XgrObq7860TY2ouxTHjp6n
01q+wtR+f6HPM3QHR+dkNeKnPkfTJMONok93RR2MDtO27RAvou1M6YtlRp6GpVls
YVA5xm6LZoPg1VOJZFVEHzsc1/Jj0aMUPSjTejrcBBCVYaj4hyrI0HVjdimQzyUN
5Ybh5myVqIMyXOHPGJM6z9WfKL+6TB0C2zQ+Kxc4Y3FZyPScTjcT30ZcYqPzS77x
VxXeLIwM9mxtPTIoPWoPR4L7/K2/mpBfpQZILrKibigrEDkqCVcgG6/sAOrqtRQu
siL1LNDs9z7Wk8Wq7vx5wZ5zQmfOXe7VoR9/ihgL4s0pRYmtAEc=
=P8Sv
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180109032343</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-01-09 03:23:43-0400</timestampReceived><subject>Re: [tor-dev] [tor-project] Intent to Minimise Effort: Fallback Directory Mirrors</subject><body>

On 8 January 2018 at 20:56, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; Add a torrc option and descriptor line to opt-in as a FallbackDir [4]

Setting a config entry is easy and requires no thought. It's easy to
set without understanding the requirements or implications. Getting a
personal email and request for one's relay to keep a stable IP lends a
lot of gravity to the importance of it.

Are you worried about that?

Work-wise, the worst thing that would happen is that the list just
needs to be regenerated more frequently - I think? But user-wise
people on those older versions will have significantly increased
startup times if only 20% of their FallbackDirs are working...

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180109040826</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-09 04:08:26-0400</timestampReceived><subject>Re: [tor-dev] [tor-project] Intent to Minimise Effort: Fallback Directory Mirrors</subject><body>


&gt; On 9 Jan 2018, at 14:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt;&gt; On 8 January 2018 at 20:56, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; Add a torrc option and descriptor line to opt-in as a FallbackDir [4]
&gt; 
&gt; Setting a config entry is easy and requires no thought. It's easy to
&gt; set without understanding the requirements or implications. Getting a
&gt; personal email and request for one's relay to keep a stable IP lends a
&gt; lot of gravity to the importance of it.
&gt; 
&gt; Are you worried about that?

My experience is that personal emails don't actually make much
difference. Operators try hard to keep things stable, but sometimes
their provider makes changes, or their circumstances change.

Here's what I've tried in the past:
* I sent personal emails the first few times,
* I sent list emails,
* I sent no emails at all, because we wanted to get seized relays
   off the list quickly.

Every time, we rebuilt the list after 6-12 months.
So this time, we only selected fallbacks that had the same address for
at least 3 months. I'm hoping that makes a difference.

Even if it doesn't change fallback stability, it's still good to tell people.

I would be happy if someone else sent personal emails to:
* potential operators of high-bandwidth relays
* every fallback operator when there is a new list
* any fallback operator when their relay details change, or their
   fallback goes down, asking them to fix it if they can

I think a bot or a human could do a very good job of these things.
(But I'm not that human.)

Hiro, did you want to write an email bot?
Or anyone else?
(The bot would need to work out how to deal with obfuscated email
addresses. We might need a human to code this part, and a list of
any particularly difficult ones.)

&gt; Work-wise, the worst thing that would happen is that the list just
&gt; needs to be regenerated more frequently - I think?

I want to reduce the time it takes to rebuild the list.
It takes days right now. If I'm going to keep on doing it, I'd like
to cut that down to hours.

The features I suggested let me do that.
And they make it easier for others to rebuild the list.
(I don't want to be the only one who can rebuild the list.)

And they don't stop people sending personal emails.
They just mean that the process doesn't rely on them.

&gt; But user-wise
&gt; people on those older versions will have significantly increased
&gt; startup times if only 20% of their FallbackDirs are working...

Tor is designed to bootstrap if 0% of the fallbacks and 50% of the
authorities are working.

Recent tor versions wait 6 seconds before trying an authority.
(Older versions try an authority and a fallback straight away.)
They will try 5 fallbacks and 3 authorities in the first 30 seconds.

And we backport the new fallback list to all supported versions.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180110013622</emailId><senderName>Alex Xu</senderName><senderEmail>alex_y_xu@yahoo.ca</senderEmail><timestampReceived>2018-01-10 01:36:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 285: Directory documents should be standardized as UTF-8</subject><body>

Quoting teor (2018-01-10 00:19:54)
&gt; These are called "Unicode Scalar Values".
&gt; https://www.unicode.org/glossary/#unicode_scalar_value
&gt; 
&gt; Let's reference that.

"Unicode Scalar Value" includes U+0, which I think we probably want to
exclude.

&gt; &gt;        * each encoded with the shortest possible encoding.
&gt; &gt;        * without any BOM
&gt; &gt; 
&gt; &gt; Are there other restrictions we should make?  If so, how should we phrase them?
&gt; 
&gt; These seem fine, and not tied to a particular unicode version.
&gt; 
&gt; But I don't know enough about Unicode to know if there is anything else we should
&gt; specify.

Skimming through
https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt, I think it
might be good to additionally forbid the code points listed at the end:
U+nFFF{E,F} for n = 0..10, and U+FDD0 through U+FDEF.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180110201821</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-10 20:18:21-0400</timestampReceived><subject>[tor-dev] prop279 global wildcard '*' exploits</subject><body>

[Attachment #2 (multipart/signed)]


At https://trac.torproject.org/projects/tor/ticket/24774#comment:5 , 
nickm stated:

&gt;I'm not sure that the sandboxing section is necessary. We should say 
&gt;that _all_ plugins should only access the network over Tor, unless they 
&gt;are using some comparably strong anonymity mechanism. [...]

In reply https://trac.torproject.org/projects/tor/ticket/24774#comment:6 
, I ask:

&gt;The proposal as written states under  §3.2, specifically discussing 
&gt;`'*'`:
&gt;
&gt;&gt;Perhaps we trust the name plugin itself, but maybe the name system 
&gt;&gt;network could exploit this?
&gt;
&gt;What does this mean?  Is there any specific information on what 
&gt;potential exploits the spec authors have thought of?  '''Would 
&gt;requiring Tor-only connections prevent these potential exploits?'''  I 
&gt;should ask on `tor-dev`.

Per the discussion in the current version of the spec (686aaf1), there 
is concern that a '*' plugin may try to resolve ordinary DNS names.  But 
this separate, quoted statement assumes a trustworthy plugin, which I 
take to mean that it would not grab .com, etc.

So, what was the concern behind that statement?  (And are there any 
other potential exploits, which may or may not be prevented by requiring 
name resolution through Tor?)

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"â€˜If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." â€” nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111002600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-11 00:26:00-0400</timestampReceived><subject>Re: [tor-dev] Why do DirAuths take that long to update a relay's version information?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; I've looked at the Tor source code that handles versions. Version
&gt; parsing and voting seem to happen unconditionally.
&gt; 
&gt; I also checked router_differences_are_cosmetic(), and it seems to
&gt; handle platform string changes correctly.

I'll need to read a spec to know what "correctly" exactly means here.

&gt; 
&gt; So maybe the issue is in the descriptor fetching and updating logic?
&gt; How many authorities received the new descriptor?
&gt; Did any of the other fields in the vote change when the new descriptor
&gt; was updated?
&gt; Can we get logs from the relays that are affected by this issue, so we
&gt; can see how many authorities they uploaded to?
&gt; Can we get logs from some authorities so we see how they handled the
&gt; new descriptor?

I'll collect affected relays on the trac ticket.


&gt; It might also help to open a core tor ticket to track this

https://trac.torproject.org/projects/tor/ticket/24864



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111011557</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-11 01:15:57-0400</timestampReceived><subject>Re: [tor-dev] Tor dev help</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 11 Jan 2018, at 11:30, Beastr0 &lt;beastr0@protonmail.com&gt; wrote:
&gt; 
&gt; (yeah, ik you guys got this running on some automated script or something but I \
&gt; don't have access and that sounds unnecessarily complicated so I'm just gonna do \
&gt; this quick header for context)

We have fallback directory mirrors to make it easier for
clients to bootstrap (initial Tor network connection):

https://trac.torproject.org/projects/tor/wiki/doc/FallbackDirectoryMirrors

It's a manual script that anyone can run:

scripts/maint/updateFallbackDirs.py

Instructions:

https://trac.torproject.org/projects/tor/wiki/doc/UpdatingFallbackDirectoryMirrors

We commit the results every 6-12 months.

We want to create another script for authority updates.
They don't happen very often.

&gt; &gt; Sounds great!
&gt; &gt; &gt; Are there any particular parts of Tor you want to help improve?
&gt; &gt; &gt; (Clients, Relays, Exits? IPv6?)
&gt; &gt; 
&gt; &gt; No, nothing I can think of now. I'll let you guys know if that changes or \
&gt; &gt; something though. 
&gt; &gt; &gt; Do you want a suggestion?
&gt; &gt; 
&gt; &gt; Sure
&gt; &gt; 
&gt; &gt; &gt; I am working on making it easier for external libraries to use Tor's
&gt; &gt; hard-coded directory lists:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/24818
&gt; &gt; &gt; The next task is to split the directory authority list into its own file:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/24854
&gt; &gt; &gt; And then after that, we want to generate the lists in a standard format.
&gt; &gt; &gt; This would be a good way to learn how Tor contacts the network when it
&gt; &gt; starts up.
&gt; 
&gt; 
&gt; Assuming this is what you meant by your suggestion then yes, I would definitely \
&gt; love to help you out with these tickets! I can start working on them right now.

Great!

Can you set your mail client to send plain text emails?
I'm seeing some weird formatting in your replies.

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpWus0ACgkQdA2eOQJS
cqJiig/8Cdu01i5H/jI+cPWgGBdJDeogm4bQUlcGs2JJDXWIgvI5nTtSPWubXeqa
a31Qj5WIuUdhMcumRyZM+8ASCVVrLGIJ4snWuByZLB1jIqCIs19PfHLmgtG1M58T
VSCrx0H4eDZsyo/djrRPEOq7vFOuMDBiLX4zwcSqX9uDQF4MX6S9tp3z5I+i3xeT
EA+lxiV4pGHEYazHLb3cUi1bIpTWFd+P/X7I6OCQDcPloKutXhX98i+YpIHMqPEd
V3A4d6M6T0Q5gbbDolQ+nWAuMPJ6ZwCcf1fP5VvanjB85JhfL6bdffcs3e9XVssk
69PKnLt22PmchHFH0CdE1yJJVYm1tilBAOB1qHNNIqDr2Tb9bjsnkbnJBkPa5/zR
neFY3RGuVdEtcmfruWCv+L22MUpyJKEArLs84UVzQNXyzeamp5i9T2P+hN9lPQEl
fUtwn1i9oDIEd8EEh66/IGxDAwuFPO24HLz5prDmapTw/0wkD5vwe4RntRX61cJk
Y2AxNNeZtpqvuhicJmEmemAWn6Ftb9OudF6crKASg1rdbB+fR9Hf4zGqPybhzpzh
lDjSRnJv5O53Cq4wv6tI4jtaCbb6g597/+Lb0ZNqwuUGsSpzKoYzCDa0Q/xhrAZj
+dcVB1pzsYQTNP2TvS6Hypg728V6lR5pUmWIFCHkv4vEi8ldYvY=
=8l8D
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111034502</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-11 03:45:02-0400</timestampReceived><subject>Re: [tor-dev] Block Global Active Adversary Cloudflare</subject><body>

[Attachment #2 (multipart/signed)]


On 2018-01-10 at 23:25:05 +0000, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;Sending every remote site address from the Tor process to an extension 
&gt;increases the surface area for attacks.
&gt;
&gt;[...]
&gt;
&gt;This gives the extension access to the content of every encrypted page.
&gt;
&gt;[...]
&gt;
&gt;Please develop a least-authority design. Don't become the new 
&gt;CloudFlare.

Hello, teor,

You evidently conflated two discrete options I discussed:  One for an 
IP-blacklisting Tor controller process completely separate from the 
browser or any other application; and the other for an application-level 
browser extension which would be as benign as NoScript.  (N.b., NoScript 
has "access to the content of every encrypted page".)

The former was just an off-the-cuff thought of how Core Tor could be 
made to block undesired destinations in the manner of a firewall (or 
router null-route), without modifying Core Tor or requiring any sort of 
proposal process.  It would *not* interact with the browser.  Even if it 
somehow did, I don't see how you think it would obtain the contents of 
encrypted pages.  What I described does not work that way, on its face.  
Most of all, it would NOT be part of the browser.  Giving the browser 
(or extensions living inside the browser process) unfettered control 
port access would be both stupid and insane, and I am neither; indeed, I 
never run Tor Browser in its stock configuration because that gives it 
*far* too much access to Tor already (and I agree with pretty much 
everything Yawning said here: [0]).

The latter is a browser extension which already exists, in the wild, 
today.  It works by detecting Cloudflare-specific HTTP response headers 
which Cloudflare injects (and which Cloudflare would not be able to 
inject, if they did not actively MITM the TLS connection).  It also 
works with non-Tor Firefox, without any Tor at all; it obviously does 
not interact with the Tor process in any way, shape, or form.

https://addons.mozilla.org/en-US/firefox/addon/block-cloudflare-mitm-attack/

https://github.com/nym-zone/block_cloudflare_mitm_fx

(Not written by me.  I'm really a C guy, not a Javascript guy.  I am 
simply trying to facilitate and encourage development.)

Really, please, don't mistake my proposal as something totally moronic.  
I will not be accused of trying to build some wack-job Tor controller 
into a web browser extension (!), or anything tantamount to that.

[0] https://lists.torproject.org/pipermail/tbb-dev/2018-January/000736.html

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111112409</emailId><senderName></senderName><senderEmail>thomas.hluchnik</senderEmail><timestampReceived>2018-01-11 11:24:09-0400</timestampReceived><subject>Re: [tor-dev] Public Key Chaos</subject><body>

Am Wednesday 10 January 2018 17:37:57 schrieb Azat Khuzhin:

&gt; Nick suggested me to upload my key to repo (github), to make people know
&gt; that at least I have admin rights to that repo.
&gt; 
&gt; But now I remembered, that my github account has attached gpg key to it,
&gt; you can see it here:
&gt; https://github.com/libevent/libevent/releases/tag/release-2.1.8-stable
&gt; 
&gt; Does this enough for your needs?

No, not really. Let's assume, an evil 3rd party is redirecting my download (by DNS \
spoofing or that), using a fake web server certificate. This would enable the \
attacker to exchange the libevent package + the checksum files + signature file. This \
fake signing key could be uploaded to the key servers by them, pretending it were \
your personal key. If I would trust in that, the tor network would be in danger. TOR \
executables would rely on insecure shared libraries.

The only way for establishing trust is: the signature must be created with a GPG key \
which was signed by other trustworthy persons. For example, Nick's key is signed by \
many people since many years. So I have no doubt that files which are signed with \
that key are really from Nick. If he signs your key, then I can trust in files, \
signed with your key.

If you are going to sign more packages in the future, don't hesitate to collect \
further signatures from other trustworthy persons or organizations.

Best Regards, Thomas Hluchnik
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111134509</emailId><senderName>Eyal Ronen</senderName><senderEmail>eyal.ronen@weizmann.ac.il</senderEmail><timestampReceived>2018-01-11 13:45:09-0400</timestampReceived><subject>Re: [tor-dev] A suggestion for differential private	statistics gathering</subject><body>

[Attachment #2 (text/plain)]

Hi Tim,

First of all thanks for your detailed and quick response. I am sorry for my delayed \
response as I am attending Real World Crypto (BTW if there are any devs here it will \
be nice to try and meet).  I will try to answer your questions and remarks below.

&gt; Hi Eyal,
&gt; 
&gt; Thank you for letting us know about your research.
&gt; 
&gt; You've emailed an internal discussion list, so I'm going to direct all
&gt; responses to the public tor-dev@ list. That is the list where we discuss
&gt; changes to Tor.
&gt; 
&gt; Please see my response below:
&gt; 
&gt; &gt; On 7 Jan 2018, at 20:31, Eyal Ronen &lt;eyal.ronen@weizmann.ac.il&gt; wrote:
&gt; &gt; 
&gt; &gt; I am a PHD student, and have just published online a paper, that shows a protocol \
&gt; &gt; that I think might be relevant to the TOR network. The protocol allows a server \
&gt; &gt; to privately learn information from a client, and is resilient to a situation \
&gt; &gt; where a malicious adversary wants to temper with the statistics. The main use \
&gt; &gt; case in our paper is learning popular passwords,
&gt; 
&gt; Are you aware of this password list?
&gt; (It has no privacy apart from hashing the passwords, because the
&gt; passwords are already publicly available in data breaches.)
&gt; 
&gt; https://www.troyhunt.com/introducing-306-million-freely-downloadable-&lt;https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/&gt; \
&gt; pwned&lt;https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/&gt; \
&gt; -passwords/&lt;https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/&gt;
&gt; 

One of the assumptions of our paper is that if we blacklist known vulnerable \
passwords, we will change the passwords distribution and new passwords will become \
"popular". We enable the server to continually learn the changing password \
distribution. Another example is that the previously popular password "superman" \
might be replaced today with the password "wonderwoman", and we want to be able to \
learn this kind of changes.

&gt; 
&gt; &gt; but we believe that it might also be usable for other cases in the TOR network. \
&gt; &gt; As we do not know the needs and challenges in the  TOR network, we would greatly \
&gt; &gt; appreciate any feedback from the TOR metrics community.
&gt; 
&gt; I would be interested in an explanation of the tradeoffs between the
&gt; 16 and 32 bit versions of the protocol. In particular, we may not be
&gt; able to provide servers with 4 GB of RAM for the 32 bit protocol.
&gt; 
&gt; What would we lose with a 16 bit version? Is a 24 bit version possible?


Any bit number is possible , and without any impact on security. The number of bit is \
the size of the domain or histogram of items you want to measure. If you use a low \
number of bits, you can have collision between different measured  values, that may \
change the statistics. For example, lets assume we want to find out popular sites in \
the TOR network. We encode the sites IP. If you use 32 bit version, you can measure \
each IP individually. Otherwise you use a truncated a hash of the IP address. Now \
when you find a heavy hitter, you know what possible IP contributed to this \
measurement. But you can't know which one or more IP addresses are the popular ones.

However I believe that this might not be a problem. One of the main differences to \
other solutions is that we work in the "Local model" and do no require any "Tally \
Reporters" to protect the data or for answers to be aggregate on the relay servers. \
The only place that needs to store the whole histogram is the one server that \
aggregates all of the information.  I think that it greatly reduce the communication \
and implementation overheads of the solution.

I think that the main differences are the one above  and our provable malicious \
resilient. There are other differences but I think that this is the most relevant \
one.

If we don't care about malicious users or relays we can use the semi honest version, \
that takes have almost zero computation requirements, and can be done either by the \
user, or by the relay. If we want to use the malicious resilient, it is a bit more \
costly, and we need to think of the right way and place to incorporate it.

If it sounds interesting I will like to find a possible use case that I can try and \
design the best tailored solution for you. And we can try to prove the security and \
complexity of the solution, and verify this with safety board.

If needed I have a POC written in Python to be easily understandable, but I can \
easily implement it using TOR's cryptographic package of choice.

I will also try to go over the current proposal on the other papers in more details.

Thanks again,
Eyal Ronen

&gt; 
&gt; &gt; The paper is titles "How to (not) share a password: Privacy preserving protocols \
&gt; &gt; for finding heavy hitters with adversarial behavior" and can be found at \
&gt; &gt; https://eprint.iacr.org/2018/003 
&gt; &gt; The abstract is:
&gt; &gt; "Bad choices of passwords were and are a pervasive problem. Most password \
&gt; &gt; alternatives (such as two-factor authentication) may increase cost and arguably \
&gt; &gt; hurt the usability of the system. This is of special significance for low cost \
&gt; &gt; IoT devices. 
&gt; &gt; Users choosing weak passwords do not only compromise themselves, but the whole \
&gt; &gt; eco system. For example, common and default passwords in IoT devices were \
&gt; &gt; exploited by hackers to create botnets and mount severe attacks on large Internet \
&gt; &gt; services, such as the Mirai botnet DDoS attack. 
&gt; &gt; We present a method to help protect the Internet from such large scale attacks. \
&gt; &gt; We enable a server to identify popular passwords (heavy hitters), and publish a \
&gt; &gt; list of over-popular passwords that must be avoided. This filter ensures that no \
&gt; &gt; single password can be used to comprise a large percentage of the users. The list \
&gt; &gt; is dynamic and can be changed as new users are added or when current users change \
&gt; &gt; their passwords. We apply maliciously secure two-party computation and \
&gt; &gt; differential privacy to protect the users' password privacy. Our solution does \
&gt; &gt; not require extra hardware or cost, and is transparent to the user. 
&gt; &gt; The construction is secure even against a malicious coalition of devices which \
&gt; &gt; tries to manipulate the protocol in order to hide the popularity of some password \
&gt; &gt; that the attacker is exploiting. We show a proof-of-concept implementation and \
&gt; &gt; analyze its performance. 
&gt; &gt; Our construction can also be used in any setting where one would desire to \
&gt; &gt; privately learn heavy hitters in the presence of an active malicious adversary. \
&gt; &gt; For example, learning the most popular sites accessed by the TOR network."
&gt; 
&gt; Tor Proposals
&gt; 
&gt; There is a current proposal to add privacy-preserving statistics to Tor
&gt; using a scheme that's based on PrivCount:
&gt; 
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/288-&lt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&gt; \
&gt; privcount&lt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&gt; \
&gt; -with-shamir.txt&lt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&gt;
&gt;  
&gt; PrivCount is limited to counters with integer increments, so we can't
&gt; easily find the most popular site (the mode), or calculate the median.
&gt; 
&gt; We discussed the proposal on tor-dev@, and decided that we could add
&gt; more sophisticated statistics later. We would appreciate your feedback
&gt; on the proposal. In particular, please let us know if there is anything
&gt; we should change in the proposal to make it easier to extend with schemes
&gt; like yours in future.
&gt; 
&gt; Here is the proposal thread:
&gt; 
&gt; https://lists.torproject.org/&lt;https://lists.torproject.org/pipermail/tor-dev/2017-De \
&gt; cember/012699.html&gt;pipermail&lt;https://lists.torproject.org/pipermail/tor-dev/2017-Dec \
&gt; ember/012699.html&gt;/tor-dev/2017-December/012699.html&lt;https://lists.torproject.org/pipermail/tor-dev/2017-December/012699.html&gt;
&gt;  
&gt; 
&gt; Anyone is welcome to submit Tor proposals, the process is described here:
&gt; 
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt
&gt; 
&gt; 
&gt; Related Research
&gt; 
&gt; There was a paper at CCS 2017 that sounds very similar to your scheme:
&gt; 
&gt; Ellis Fenske, Akshaya Mani, Aaron Johnson, and Micah Sherr. Distributed
&gt; Measurement with Private Set-Union Cardinality. In ACM Conference on
&gt; Computer and Communications Security (CCS), November 2017.
&gt; 
&gt; Source: http://safecounting.com/
&gt; 
&gt; Can you explain how your scheme differs from PSC?
&gt; 
&gt; 
&gt; There's a forthcoming paper at NDSS 2018 that measures a single onion
&gt; site's popularity with differential privacy using PrivCount:
&gt; 
&gt; Inside Job: Applying Traffic Analysis to Measure Tor from Within
&gt; 25th Symposium on Network and Distributed System Security (NDSS 2018)
&gt; Rob Jansen, Marc Juarez, Rafael Galvez, Tariq Elahi, and Claudia Diaz
&gt; 
&gt; Source: https://onionpop.github.io/
&gt; 
&gt; But the measurement was limited to one site, because PrivCount can't
&gt; calculate the modal value from  set of samples. So I can see the
&gt; advantages of a scheme like yours over PrivCount.
&gt; 
&gt; 
&gt; Your Own Research
&gt; 
&gt; And finally, if you do want to do research on the public Tor network, I
&gt; would recommend contacting the Tor Research Safety Board for advice:
&gt; 
&gt; https://research.torproject.org/safetyboard.html
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim Wilson-Brown (teor)

Best regards,

Eyal


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; Hi Tim, &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; First of all thanks for your detailed \
and quick response. I am sorry for my delayed response as I am attending Real World \
Crypto (BTW if there are any devs here it will be nice to try and meet).  I will \
try to answer your questions and remarks below. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Hi Eyal, &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Thank you for letting us know about \
your research. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;You've emailed an internal \
discussion list, so I'm going to direct all &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;responses to the public tor-dev@ \
list. That is the list where we discuss &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;changes to Tor. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Please see my response below: &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; On 7 Jan 2018, at 20:31, Eyal \
Ronen &lt;eyal.ronen@weizmann.ac.il&gt; wrote: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; I am a PHD student, and have \
just published online a paper, that shows a protocol that I think might be relevant \
to the TOR network. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; The protocol allows a server \
to privately learn information from a client, and is resilient to a situation where a \
malicious adversary wants to temper with the statistics. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; The main use case in our paper \
is learning popular passwords, &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Are you aware of this password \
list? &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;(It has no privacy apart from \
hashing the passwords, because the &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;passwords are already publicly \
available in data breaches.) &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;a \
href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/"&gt;
 https://www.troyhunt.com/introducing-306-million-freely-downloadable-&lt;/a&gt; &lt;a \
href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/"&gt;
 pwned&lt;/a&gt; &lt;a href="https://www.troyhunt.com/introducing-306-million-freely-downloadable-pwned-passwords/"&gt;
                
-passwords/&lt;/a&gt; &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; One of the assumptions of our paper is \
that if we blacklist known vulnerable passwords, we will change the passwords \
distribution and new passwords will become "popular". We enable the server \
to continually learn the changing password distribution. Another  example is that the \
previously popular password "superman" might be replaced today with the \
password "wonderwoman", and we want to be able to learn this kind of \
changes. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; but we believe that it might \
also be usable for other cases in the TOR network. As we do not know the needs and \
challenges in the  TOR network, we would greatly appreciate any feedback from \
the TOR metrics community. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;I would be interested in an \
explanation of the tradeoffs between the &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;16 and 32 bit versions of the \
protocol. In particular, we may not be &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;able to provide servers with 4 GB \
of RAM for the 32 bit protocol. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;What would we lose with a 16 bit \
version? Is a 24 bit version possible? &lt;br&gt; &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; Any bit number is possible , and \
without any impact on security. The number of bit is the size of the domain or \
histogram of items you want to measure. If you use a low number of bits, you can have \
collision between different measured  values, that may change  the statistics. \
For example, lets assume we want to find out popular sites in the TOR network. We \
encode the sites IP. If you use 32 bit version, you can measure each IP individually. \
Otherwise you use a truncated a hash of the IP address. Now when you find  a heavy \
hitter, you know what possible IP contributed to this measurement. But you can't know \
which one or more IP addresses are the popular ones. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; However I believe that this might not \
be a problem. One of the main differences to other solutions is that we work in the \
"Local model" and do no require any "Tally Reporters" to protect \
the data or for answers to be aggregate on the relay servers. The only  place that \
needs to store the whole histogram is the one server that aggregates all of the \
information.  I think that it greatly reduce the communication and \
implementation overheads of the solution. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; I think that the main differences are \
the one above  and our provable malicious resilient. There are other differences \
but I think that this is the most relevant one. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; If we don't care about malicious users \
or relays we can use the semi honest version, that takes have almost zero computation \
requirements, and can be done either by the user, or by the relay. If we want to use \
the malicious resilient, it is a bit more costly,  and we need to think of the right \
way and place to incorporate it. &lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; If it sounds interesting I will like to \
find a possible use case that I can try and design the best tailored solution for \
you. And we can try to prove the security and complexity of the solution, and verify \
this with safety board. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; If needed I have a POC written in \
Python to be easily understandable, but I can easily implement it using TOR's \
cryptographic package of choice. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; I will also try to go over the current \
proposal on the other papers in more details. &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; Thanks again, &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; Eyal Ronen &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; The paper is titles "How \
to (not) share a password: Privacy preserving protocols for finding heavy hitters \
with adversarial behavior" and can be found at &lt;a \
href="https://eprint.iacr.org/2018/003"&gt;https://eprint.iacr.org/2018/003&lt;/a&gt; &lt;br&gt; \
&lt;/div&gt; &lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; The abstract is: &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; "Bad choices of passwords \
were and are a pervasive problem. Most password alternatives (such as two-factor \
authentication) may increase cost and arguably hurt the usability of the system. This \
is of special significance for low cost IoT devices. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; Users choosing weak passwords \
do not only compromise themselves, but the whole eco system. For example, common and \
default passwords in IoT devices were exploited by hackers to create botnets and \
mount severe attacks on large Internet services, such as the  Mirai botnet DDoS \
attack. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; We present a method to help \
protect the Internet from such large scale attacks. We enable a server to identify \
popular passwords (heavy hitters), and publish a list of over-popular passwords that \
must be avoided. This filter ensures that no single password  can be used to comprise \
a large percentage of the users. The list is dynamic and can be changed as new users \
are added or when current users change their passwords. We apply maliciously secure \
two-party computation and differential privacy to protect the users'  password \
privacy. Our solution does not require extra hardware or cost, and is transparent to \
the user. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; The construction is secure \
even against a malicious coalition of devices which tries to manipulate the protocol \
in order to hide the popularity of some password that the attacker is exploiting. We \
show a proof-of-concept implementation and analyze its performance. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;&gt; Our construction can also be \
used in any setting where one would desire to privately learn heavy hitters in the \
presence of an active malicious adversary. For example, learning the most popular \
sites accessed by the TOR network." &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Tor Proposals &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;There is a current proposal to add \
privacy-preserving statistics to Tor &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;using a scheme that's based on \
PrivCount: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt"&gt;
 https://gitweb.torproject.org/torspec.git/tree/proposals/288-&lt;/a&gt; &lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt"&gt;
 privcount&lt;/a&gt; &lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt"&gt;
                
-with-shamir.txt&lt;/a&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;PrivCount is limited to counters \
with integer increments, so we can't &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;easily find the most popular site \
(the mode), or calculate the median. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;We discussed the proposal on \
tor-dev@, and decided that we could add &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;more sophisticated statistics \
later. We would appreciate your feedback &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;on the proposal. In particular, \
please let us know if there is anything &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;we should change in the proposal to \
make it easier to extend with schemes &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;like yours in future. &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Here is the proposal thread: &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2017-December/012699.html"&gt; \
https://lists.torproject.org/&lt;/a&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2017-December/012699.html"&gt;pipermail&lt;/a&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2017-December/012699.html"&gt;/tor-dev/2017-December/012699.html&lt;/a&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Anyone is welcome to submit Tor \
proposals, the process is described here: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt"&gt; \
https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt&lt;/a&gt; &lt;br&gt; \
&lt;/div&gt; &lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Related Research &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;There was a paper at CCS 2017 that \
sounds very similar to your scheme: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Ellis Fenske, Akshaya Mani, Aaron \
Johnson, and Micah Sherr. Distributed &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Measurement with Private Set-Union \
Cardinality. In ACM Conference on &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Computer and Communications \
Security (CCS), November 2017. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Source: &lt;a \
href="http://safecounting.com/"&gt;http://safecounting.com/&lt;/a&gt; &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Can you explain how your scheme \
differs from PSC? &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;There's a forthcoming paper at NDSS \
2018 that measures a single onion &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;site's popularity with differential \
privacy using PrivCount: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Inside Job: Applying Traffic \
Analysis to Measure Tor from Within &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;25th Symposium on Network and \
Distributed System Security (NDSS 2018) &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Rob Jansen, Marc Juarez, Rafael \
Galvez, Tariq Elahi, and Claudia Diaz &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Source: &lt;a \
href="https://onionpop.github.io/"&gt;https://onionpop.github.io/&lt;/a&gt; &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;But the measurement was limited to \
one site, because PrivCount can't &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;calculate the modal value \
from  set of samples. So I can see the &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;advantages of a scheme like yours \
over PrivCount. &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Your Own Research &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;And finally, if you do want to do \
research on the public Tor network, I &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;would recommend contacting the Tor \
Research Safety Board for advice: &lt;br&gt; &lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;a \
href="https://research.torproject.org/safetyboard.html"&gt;https://research.torproject.org/safetyboard.html&lt;/a&gt;
 &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;T &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;-- &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &gt;Tim Wilson-Brown (teor) &lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; &lt;div dir="auto" style="direction: ltr; \
margin: 0; padding: 0; font-family: sans-serif; font-size: 11pt; color: black; "&gt; \
Best regards, &lt;br&gt; &lt;br&gt;
&lt;/div&gt;
&lt;div dir="auto" style="direction: ltr; margin: 0; padding: 0; font-family: \
sans-serif; font-size: 11pt; color: black; "&gt; Eyal &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180125004252</emailId><senderName>Jodi Spacek</senderName><senderEmail>jodi.spacek@gmail.com</senderEmail><timestampReceived>2018-01-25 00:42:52-0400</timestampReceived><subject>[tor-dev] Pluggable transports research</subject><body>

[Attachment #2 (multipart/alternative)]


I'm a master's student at the University of British Columbia (Vancouver,
Canada) where I'm primarily researching anonymous systems and censorship. I
would be delighted to contribute to pluggable transports.

Of particular interest is image and audio data stenography - is anything is
in the works for this or is it outdated? My aim is to add this
functionality while fully testing and evaluating it as part of my thesis
project. I refer to the list of idea suggestions here:
https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas

Any guidance is greatly appreciated. Thanks so much!

Jodi

p.s.: Please advise if this is not the correct mailing list. and perhaps
belongs in tor-assistants. If so, I will inquire there once my access is
(hopefully!) granted.

--
www.jodispacek.com

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;I'm a master's student at the University of British \
Columbia (Vancouver, Canada) where I'm primarily researching anonymous systems \
and censorship. I would be delighted to contribute to pluggable transports.  \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Of particular interest is image and audio data \
stenography - is anything is in the works for this or is it outdated? My aim is to \
add this functionality while fully testing and evaluating it as part of my thesis \
project. I refer to the list of idea suggestions here:  &lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas" \
target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/wiki/doc/&lt;wbr&gt;PluggableTransports/ideas&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any guidance is greatly appreciated. Thanks so \
much!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Jodi&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;p.s.: Please advise if \
this is not the correct mailing list. and perhaps belongs in tor-assistants. If so, I \
will inquire there once my access is (hopefully!) \
granted.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--&lt;/div&gt;&lt;div&gt;&lt;a href="http://www.jodispacek.com/" \
target="_blank"&gt;www.jodispacek.com&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180107134916</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-07 13:49:16-0400</timestampReceived><subject>Re: [tor-dev] Marker branch for current tor release(s)</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Tor branches are a question for tor-dev@, I am directing all responses there.
Also, I fixed the top-post.

&gt; On Jan 5, 2018 00:48, "Andreas Krey" &lt;a.krey@gmx.de&gt; wrote:
&gt; 
&gt; https://www.torproject.org/download/download.html.en in the source code 'tab'
&gt; states the current stable and alpha version of tor.
&gt; 
&gt; Would it be possible to publish the current states as branches 'stable' and
&gt; 'alpha' (or 'testing', or 'unstable') in the git repo?

What do you mean by "alpha" and "stable" ?

When tor 0.3.2.9 is released next week, there will be no alpha version.
When this happens, do you want master, or the latest stable?

When there are multiple supported tor versions, which one should be stable?
At the moment, we support 0.2.5 and 0.2.9 as long-term support, and 0.3.0 and
0.3.1 as regular releases.

Should stable be 0.3.1 (and change to 0.3.2 next week)?

Do you want a long-term support branch as well?
Should it be 0.2.5 or 0.2.9?

&gt; That would help us tor-from-source builders to just fetch the repo, and
&gt; if the respective branch changes, to rebuild and redeploy. Looking for a
&gt; new release tag or screen-scraping said web page is a bit hairy, and feels
&gt; unnecessary.

If you want something that's easier to scrape, and signed, check for
new source releases at:

https://dist.torproject.org/

We provide the latest Tor Browser version through a URL (which I can't
remember right now). Maybe we could do the same thing with Tor.

&gt; On 5 Jan 2018, at 23:17, Chad MILLER &lt;chad@cornsilk.net&gt; wrote:
&gt; 
&gt; I second this.
&gt; 
&gt; There's a recommended-versions list in the consensus, but you have to already have \
&gt; Tor available and running to get it.

No, you don't need Tor:

$ curl http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc | grep \
server-versions | tr "," "\n" | tail -1 0.3.2.8-rc

Or you can do this far more reliably in Python using stem:

https://stem.torproject.org/

&gt; Maybe also publish in a DNS TXT record or something?

Is that secure?
Can you sign a TXT record?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
xmpp: teor at torproject dot org
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpSJVwACgkQdA2eOQJS
cqLYIBAAxBb8CAAbGkJfAeg+LtsDsM0RyXsyfkPBNnVlHHP3/g9aJk27OcZDHN29
0mvM9wZh5drm4/YykW8aHdGBliR31e6RnrBaQCd1mvgXTflToxW79EUnmWeQ5uVe
ea/xx2mgX7JlsH0sifGtUp20hDi/5OzVKcz1JAUkvhxXtXmK3bstgAR5gImt9f/c
Dt6CUrFCJ960ZqnW7FYoyzFDEfZ/PJJXcTa+gZCukTCEyUy5RQuA7ENQYftyFpr1
BNQJpya6shapiSYHo0fBqSfHQVVKBFij2BUv2X0Zmi3KOezRNLnJPETvuvZyv6Q5
7631aSixiaxdQJvsEX58fqQAFfDRvj0wngnPkTcb5xRdbkH4duQBdsGUI/mIifyf
mAWhENqZdG4gC2lzdMSvZRoF9rHEjd+4T9vZwymsM6R8w30BkfPseMFydWfcEWfq
TG4bzn4sf6STVVp3mI2UoUxZZaajkqTVAVM5mbDxRtcf/N6mIB9YY0L3YqyQD9nj
EuhppuuIc+g59/AeoQeBsDqDsR3t6+hr4X5x1xd5VDpU93nX6fIYy/pSEX2+eY3R
W7EwUvDlWrLn0rQUxSyrl53Yyy7sR7RiJFuv+hq9+QlhrABqB85TbwKU7v2OhV/b
wL8V89nQPytWz4yBydVJdm6Qy4aKFtnjll11wDUlJhXAN/qZxSk=
=1oa2
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180122080300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-22 08:03:00-0400</timestampReceived><subject>[tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Karsten,

just wanted to let you know that the delta between
relays_published and current time is unusually high.


https://onionoo.torproject.org/details?limit=0

{"version":"5.0",
"build_revision":"0bce98a",
"relays_published":"2018-01-21 22:00:00",

This is currently blocking ornetradar reports.

thanks for having a look,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180126224900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-26 22:49:00-0400</timestampReceived><subject>[tor-dev] trac component for check.tpo?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


what is the correct trac component to report
that check.tpo is down?

Webpages/Website?

http://downforeveryoneorjustme.com/check.torproject.org

--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180123100300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-23 10:03:00-0400</timestampReceived><subject>[tor-dev] website patches for new Tor relay guide sidenav entry</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Silvia,

I submitted a (trivial) patch (in #24881) to add links to the new tor relay guide 
on the website and to remove previous guides that have been merged into 
the new guide.

I noticed that since than new commits have been merged and these patches
will probably no longer apply cleanly.

I will try to ensure they apply (rebase) shortly before you have time 
to look at them if you can tell me approximately when that will be. 

thanks,
nusenu



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180131115414</emailId><senderName>Aruna Maurya</senderName><senderEmail>aruna.maurya12@gmail.com</senderEmail><timestampReceived>2018-01-31 11:54:14-0400</timestampReceived><subject>[tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/alternative)]


Hey!

I was going through the Tor Volunteer page and came across the Anonymous
local count statistics project. As a student it would be a great starting
point and an even bigger opportunity to get a chance to collaborate and
learn in the process.

I would like to contribute to it, and would love to start as soon as
possible. It would be great if someone could guide me through.

Thanks for your time!!

-- 
Regards,
Aruna Maurya,
CSE,B.tech,
Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&lt;https://medium.com/@arunamaurya&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Hey!&lt;br&gt;&lt;br&gt;&lt;/div&gt;I was going through the Tor Volunteer page \
 and came across the Anonymous local count statistics project. As a 
student it would be a great starting point and an even bigger 
opportunity to get a chance to collaborate and learn in the process. &lt;br&gt;&lt;br&gt;I would \
like to contribute to it, and would love to start as soon as possible. It would be \
great if someone could guide me through.&lt;br&gt;&lt;br&gt;&lt;/div&gt;Thanks for your time!!&lt;div \
class="gmail-yj6qo gmail-ajU"&gt;&lt;div id="gmail-:sz" class="gmail-ajR" tabindex="0"&gt;&lt;img \
class="gmail-ajT" src="https://ssl.gstatic.com/ui/v1/icons/mail/images/cleardot.gif"&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;-- \
&lt;br&gt;&lt;div class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180202101242</emailId><senderName>Aruna Maurya</senderName><senderEmail>aruna.maurya12@gmail.com</senderEmail><timestampReceived>2018-02-02 10:12:42-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/alternative)]


Hey!

What is the current status of the project, how much work has been done and
where can I pick up from?

On Fri, Feb 2, 2018 at 3:04 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
wrote:

&gt;
&gt; ---------- Forwarded message ----------
&gt; From: George Kadianakis &lt;desnacked@riseup.net&gt;
&gt; Date: Wed, Jan 31, 2018 at 6:32 PM
&gt; Subject: Re: [tor-dev] Starting with contributing to Anonymous Local Count
&gt; Statistics.
&gt; To: Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;, tor-dev@lists.torproject.org
&gt;
&gt;
&gt; Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:
&gt;
&gt; &gt; [ text/plain ]
&gt; &gt; Hey!
&gt; &gt;
&gt; &gt; I was going through the Tor Volunteer page and came across the Anonymous
&gt; &gt; local count statistics project. As a student it would be a great starting
&gt; &gt; point and an even bigger opportunity to get a chance to collaborate and
&gt; &gt; learn in the process.
&gt; &gt;
&gt; &gt; I would like to contribute to it, and would love to start as soon as
&gt; &gt; possible. It would be great if someone could guide me through.
&gt; &gt;
&gt;
&gt; Hello Aruna,
&gt;
&gt; thanks for reaching out.
&gt;
&gt; I also find this project interesting. I'd like to help you but my time
&gt; is quite limited lately.
&gt;
&gt; What would you like guidance with?
&gt;
&gt; With regards to design, I suggest you take a look at the last comments
&gt; of this trac ticket:  https://trac.torproject.org/pr
&gt; ojects/tor/ticket/7532#comment:22
&gt; Particularly it seems like the PCSA algorithm might be a reasonable way
&gt; forward.
&gt;
&gt; With regards to coding, I suggest you familiarize yourself with the Tor
&gt; codebase. Some specific places to look at would be the way that Tor
&gt; currently counts users. For example, see geoip_note_client_seen() and
&gt; its callers, for when bridges register new clients to their stats
&gt; subsystem. Also check geoip_format_bridge_stats() for when bridges
&gt; finally report those stats.
&gt;
&gt; Let us know if you have any specific questions!
&gt;
&gt; Cheers!
&gt;
&gt;
&gt;
&gt; --
&gt; Regards,
&gt; Aruna Maurya,
&gt; CSE,B.tech,
&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;
&gt;


-- 
Regards,
Aruna Maurya,
CSE,B.tech,
Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&lt;https://medium.com/@arunamaurya&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hey!&lt;br&gt;&lt;br&gt;&lt;/div&gt;What is the current status of the project, how \
much work has been done and where can I pick up from?&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Feb 2, 2018 at 3:04 PM, \
Aruna Maurya &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
class="m_-7338732706292270277h5"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;---------- Forwarded \
message ----------&lt;br&gt;From: &lt;b class="gmail_sendername"&gt;George Kadianakis&lt;/b&gt; &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:desnacked@riseup.net" \
target="_blank"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;Date: Wed, Jan 31, 2018 at \
6:32 PM&lt;br&gt;Subject: Re: [tor-dev] Starting with contributing to Anonymous Local Count \
Statistics.&lt;br&gt;To: Aruna Maurya &lt;&lt;a href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;, &lt;a \
href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;Aruna Maurya &lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com" \
target="_blank"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt; writes:&lt;br&gt; &lt;br&gt;
&gt; [ text/plain ]&lt;br&gt;
&lt;span&gt;&gt; Hey!&lt;br&gt;
&gt;&lt;br&gt;
&gt; I was going through the Tor Volunteer page and came across the Anonymous&lt;br&gt;
&gt; local count statistics project. As a student it would be a great starting&lt;br&gt;
&gt; point and an even bigger opportunity to get a chance to collaborate and&lt;br&gt;
&gt; learn in the process.&lt;br&gt;
&gt;&lt;br&gt;
&gt; I would like to contribute to it, and would love to start as soon as&lt;br&gt;
&gt; possible. It would be great if someone could guide me through.&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Hello Aruna,&lt;br&gt;
&lt;br&gt;
thanks for reaching out.&lt;br&gt;
&lt;br&gt;
I also find this project interesting. I'd like to help you but my time&lt;br&gt;
is quite limited lately.&lt;br&gt;
&lt;br&gt;
What would you like guidance with?&lt;br&gt;
&lt;br&gt;
With regards to design, I suggest you take a look at the last comments&lt;br&gt;
of this trac ticket:   &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/7532#comment:22" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/pr&lt;wbr&gt;ojects/tor/ticket/7532#comment&lt;wbr&gt;:22&lt;/a&gt;&lt;br&gt;
 Particularly it seems like the PCSA algorithm might be a reasonable way&lt;br&gt;
forward.&lt;br&gt;
&lt;br&gt;
With regards to coding, I suggest you familiarize yourself with the Tor&lt;br&gt;
codebase. Some specific places to look at would be the way that Tor&lt;br&gt;
currently counts users. For example, see geoip_note_client_seen() and&lt;br&gt;
its callers, for when bridges register new clients to their stats&lt;br&gt;
subsystem. Also check geoip_format_bridge_stats() for when bridges&lt;br&gt;
finally report those stats.&lt;br&gt;
&lt;br&gt;
Let us know if you have any specific questions!&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;span&gt;-- &lt;br&gt;&lt;div \
class="m_-7338732706292270277m_-1165278205950229794gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/span&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div \
class="m_-7338732706292270277gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124181458</emailId><senderName>Micah Lee</senderName><senderEmail>micah@micahflee.com</senderEmail><timestampReceived>2018-01-24 18:14:58-0400</timestampReceived><subject>[tor-dev] stem support for v3 ephemeral onion services</subject><body>

Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
which supports next generation onion services, I would love to make
OnionShare use these by default. Here is the issue [1].

OnionShare is written in python3 and relies on stem to communicate with
the Tor controller. Although tor now supports v3 ephemeral onion
services, stem still doesn't. Just take make sure, here's a quick test,
with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
using stem 1.6.0:

==

from stem.control import Controller

c = Controller.from_port(port=9151)
c.authenticate()

tor_version = c.get_version().version_str
print("Tor version: {}".format(tor_version))

print("Creating ephemeral onion service")
res = c.create_ephemeral_hidden_service({ 80: 8080 },
await_publication=True, key_type='NEW', key_content='BEST')
print("{}.onion".format(res.service_id))

==

When executed, it still creates a v2 onion address:

(env) user@dev ~/tmp $ python3 onionv3.py
Tor version: 0.3.2.9
Creating ephemeral onion service
wrvsjo4nlww3edsi.onion

Right now OnionShare is blocked by stem supporting v3 onions. Does
anyone know when we can expect support for this?

[1] https://github.com/micahflee/onionshare/issues/461
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180124195030</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-24 19:50:30-0400</timestampReceived><subject>Re: [tor-dev] stem support for v3 ephemeral onion services</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 25 Jan 2018, at 05:14, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt; 
&gt; Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
&gt; which supports next generation onion services, I would love to make
&gt; OnionShare use these by default. Here is the issue [1].
&gt; 
&gt; OnionShare is written in python3 and relies on stem to communicate with
&gt; the Tor controller. Although tor now supports v3 ephemeral onion
&gt; services, stem still doesn't. Just take make sure, here's a quick test,
&gt; with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
&gt; using stem 1.6.0:

Here is the current status of v3 onion control port support:

This proposal is listed as "Finished":
https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt

And the code was merged into 0.3.3 (not 0.3.2):
https://trac.torproject.org/projects/tor/ticket/20699

Stem typically tracks Tor's control spec.
But the changed commands have not been integrated into control-spec.txt:
https://trac.torproject.org/projects/tor/ticket/24847

And as a related issue, there is currently no way to ask Tor if it supports
v3 onion control port events:
https://trac.torproject.org/projects/tor/ticket/24617
(But "try it and see" probably works.)

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 25 Jan 2018, at 05:14, Micah Lee \
&lt;&lt;a href="mailto:micah@micahflee.com"&gt;micah@micahflee.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Now that Tor Browser 7.5 is \
released and includes the tor 0.3.2 series,&lt;/span&gt;&lt;br&gt;&lt;span&gt;which supports next \
generation onion services, I would love to make&lt;/span&gt;&lt;br&gt;&lt;span&gt;OnionShare use these \
by default. Here is the issue [1].&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;OnionShare is \
written in python3 and relies on stem to communicate with&lt;/span&gt;&lt;br&gt;&lt;span&gt;the Tor \
controller. Although tor now supports v3 ephemeral onion&lt;/span&gt;&lt;br&gt;&lt;span&gt;services, \
stem still doesn't. Just take make sure, here's a quick test,&lt;/span&gt;&lt;br&gt;&lt;span&gt;with \
Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, \
and&lt;/span&gt;&lt;br&gt;&lt;span&gt;using stem 1.6.0:&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Here is the \
current status of v3 onion control port support:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This \
proposal is listed as "Finished":&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.t \
xt"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
the code was merged into 0.3.3 (not 0.3.2):&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/20699"&gt;https://trac.torproject.org/projects/tor/ticket/20699&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Stem \
typically tracks Tor's control spec.&lt;/div&gt;&lt;div&gt;But the changed commands have not been \
integrated into control-spec.txt:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24847"&gt;https://trac.torproject.org/projects/tor/ticket/24847&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
as a related issue, there is currently no way to ask Tor if it supports&lt;/div&gt;&lt;div&gt;v3 \
onion control port events:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24617#comment:3"&gt;https://trac.torproject.org/projects/tor/ticket/24617&lt;/a&gt;&lt;/div&gt;&lt;div&gt;(But \
"try it and see" probably works.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180125131000</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-01-25 13:10:00-0400</timestampReceived><subject>Re: [tor-dev] stem support for v3 ephemeral onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 25 Jan (06:50:30), teor wrote:
&gt; 
&gt; &gt; On 25 Jan 2018, at 05:14, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
&gt; &gt; which supports next generation onion services, I would love to make
&gt; &gt; OnionShare use these by default. Here is the issue [1].
&gt; &gt; 
&gt; &gt; OnionShare is written in python3 and relies on stem to communicate with
&gt; &gt; the Tor controller. Although tor now supports v3 ephemeral onion
&gt; &gt; services, stem still doesn't. Just take make sure, here's a quick test,
&gt; &gt; with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
&gt; &gt; using stem 1.6.0:
&gt; 
&gt; Here is the current status of v3 onion control port support:
&gt; 
&gt; This proposal is listed as "Finished":
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt
&gt; 
&gt; And the code was merged into 0.3.3 (not 0.3.2):
&gt; https://trac.torproject.org/projects/tor/ticket/20699
&gt; 
&gt; Stem typically tracks Tor's control spec.
&gt; But the changed commands have not been integrated into control-spec.txt:
&gt; https://trac.torproject.org/projects/tor/ticket/24847

This one is on me and I apologize... I haven't took the time to make a proper
control-spec.txt patch from the prop#284.

I'll put this on my priority list so when 0.3.3 goes stable (~ April 15th),
we'll have a up to date control spec for Stem to work with.

Cheers!
David

-- 
6Swl3Ho3WPfuToRBmU/VqJyeGkbf9yd3uucj/BJVoKk=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180125183418</emailId><senderName>Micah Lee</senderName><senderEmail>micah@micahflee.com</senderEmail><timestampReceived>2018-01-25 18:34:18-0400</timestampReceived><subject>Re: [tor-dev] stem support for v3 ephemeral onion services</subject><body>

On 01/25/2018 05:10 AM, David Goulet wrote:
&gt; On 25 Jan (06:50:30), teor wrote:
&gt;&gt;
&gt;&gt;&gt; On 25 Jan 2018, at 05:14, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
&gt;&gt;&gt; which supports next generation onion services, I would love to make
&gt;&gt;&gt; OnionShare use these by default. Here is the issue [1].
&gt;&gt;&gt;
&gt;&gt;&gt; OnionShare is written in python3 and relies on stem to communicate with
&gt;&gt;&gt; the Tor controller. Although tor now supports v3 ephemeral onion
&gt;&gt;&gt; services, stem still doesn't. Just take make sure, here's a quick test,
&gt;&gt;&gt; with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
&gt;&gt;&gt; using stem 1.6.0:
&gt;&gt;
&gt;&gt; Here is the current status of v3 onion control port support:
&gt;&gt;
&gt;&gt; This proposal is listed as "Finished":
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt
&gt;&gt;
&gt;&gt; And the code was merged into 0.3.3 (not 0.3.2):
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/20699
&gt;&gt;
&gt;&gt; Stem typically tracks Tor's control spec.
&gt;&gt; But the changed commands have not been integrated into control-spec.txt:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/24847
&gt; 
&gt; This one is on me and I apologize... I haven't took the time to make a proper
&gt; control-spec.txt patch from the prop#284.
&gt; 
&gt; I'll put this on my priority list so when 0.3.3 goes stable (~ April 15th),
&gt; we'll have a up to date control spec for Stem to work with.
&gt; 
&gt; Cheers!
&gt; David


Excellent, thank you so much for the updates.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180131205600</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-01-31 20:56:00-0400</timestampReceived><subject>Re: [tor-dev] stem support for v3 ephemeral onion services</subject><body>

[Attachment #2 (multipart/signed)]


On 25 Jan (08:10:00), David Goulet wrote:
&gt; On 25 Jan (06:50:30), teor wrote:
&gt; &gt; 
&gt; &gt; &gt; On 25 Jan 2018, at 05:14, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
&gt; &gt; &gt; which supports next generation onion services, I would love to make
&gt; &gt; &gt; OnionShare use these by default. Here is the issue [1].
&gt; &gt; &gt; 
&gt; &gt; &gt; OnionShare is written in python3 and relies on stem to communicate with
&gt; &gt; &gt; the Tor controller. Although tor now supports v3 ephemeral onion
&gt; &gt; &gt; services, stem still doesn't. Just take make sure, here's a quick test,
&gt; &gt; &gt; with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
&gt; &gt; &gt; using stem 1.6.0:
&gt; &gt; 
&gt; &gt; Here is the current status of v3 onion control port support:
&gt; &gt; 
&gt; &gt; This proposal is listed as "Finished":
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt
&gt; &gt; 
&gt; &gt; And the code was merged into 0.3.3 (not 0.3.2):
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/20699
&gt; &gt; 
&gt; &gt; Stem typically tracks Tor's control spec.
&gt; &gt; But the changed commands have not been integrated into control-spec.txt:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/24847
&gt; 
&gt; This one is on me and I apologize... I haven't took the time to make a proper
&gt; control-spec.txt patch from the prop#284.
&gt; 
&gt; I'll put this on my priority list so when 0.3.3 goes stable (~ April 15th),
&gt; we'll have a up to date control spec for Stem to work with.

Hi!

Ok the proposal 284 has landed in the control-spec.txt officially. Could be
some fix up here and there once atagar looks at it ;) but overall the proposal
is officially closed and merged.

https://gitweb.torproject.org/torspec.git/commit/?id=6bd0a699a0856240480a4bc339722db142beec0a

David

&gt; 
&gt; Cheers!
&gt; David
&gt; 
&gt; -- 
&gt; 6Swl3Ho3WPfuToRBmU/VqJyeGkbf9yd3uucj/BJVoKk=



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
aVYoXwD2iAuCmaVVnSs4Ds40PAgernzXRM/WFwLLoEU=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180202101849</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-02-02 10:18:49-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:

&gt; [ text/plain ]
&gt; Hey!
&gt;
&gt; What is the current status of the project, how much work has been done and
&gt; where can I pick up from?
&gt;

Hi!

The project is currently not being worked on.

Mainly design work has been done so far; no code has been written.
See:   https://lists.torproject.org/pipermail/tor-dev/2017-March/012001.html
       https://lists.torproject.org/pipermail/tor-dev/2017-March/012073.html

I suggest you pick it up by fleshing out the design work and seeing if
it works for you, and then checking out the code to see where you need
to inject the code. Perhaps you can also get in touch with Jaskaran
Singh (jvsg1303@gmail.com) who did all the previous design work to see
if he is interested in collaborating!

Cheers!



&gt; On Fri, Feb 2, 2018 at 3:04 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt; wrote:
&gt;
&gt;&gt;
&gt;&gt; ---------- Forwarded message ----------
&gt;&gt; From: George Kadianakis &lt;desnacked@riseup.net&gt;
&gt;&gt; Date: Wed, Jan 31, 2018 at 6:32 PM
&gt;&gt; Subject: Re: [tor-dev] Starting with contributing to Anonymous Local Count
&gt;&gt; Statistics.
&gt;&gt; To: Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;, tor-dev@lists.torproject.org
&gt;&gt;
&gt;&gt;
&gt;&gt; Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:
&gt;&gt;
&gt;&gt; &gt; [ text/plain ]
&gt;&gt; &gt; Hey!
&gt;&gt; &gt;
&gt;&gt; &gt; I was going through the Tor Volunteer page and came across the Anonymous
&gt;&gt; &gt; local count statistics project. As a student it would be a great starting
&gt;&gt; &gt; point and an even bigger opportunity to get a chance to collaborate and
&gt;&gt; &gt; learn in the process.
&gt;&gt; &gt;
&gt;&gt; &gt; I would like to contribute to it, and would love to start as soon as
&gt;&gt; &gt; possible. It would be great if someone could guide me through.
&gt;&gt; &gt;
&gt;&gt;
&gt;&gt; Hello Aruna,
&gt;&gt;
&gt;&gt; thanks for reaching out.
&gt;&gt;
&gt;&gt; I also find this project interesting. I'd like to help you but my time
&gt;&gt; is quite limited lately.
&gt;&gt;
&gt;&gt; What would you like guidance with?
&gt;&gt;
&gt;&gt; With regards to design, I suggest you take a look at the last comments
&gt;&gt; of this trac ticket:  https://trac.torproject.org/pr
&gt;&gt; ojects/tor/ticket/7532#comment:22
&gt;&gt; Particularly it seems like the PCSA algorithm might be a reasonable way
&gt;&gt; forward.
&gt;&gt;
&gt;&gt; With regards to coding, I suggest you familiarize yourself with the Tor
&gt;&gt; codebase. Some specific places to look at would be the way that Tor
&gt;&gt; currently counts users. For example, see geoip_note_client_seen() and
&gt;&gt; its callers, for when bridges register new clients to their stats
&gt;&gt; subsystem. Also check geoip_format_bridge_stats() for when bridges
&gt;&gt; finally report those stats.
&gt;&gt;
&gt;&gt; Let us know if you have any specific questions!
&gt;&gt;
&gt;&gt; Cheers!
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; --
&gt;&gt; Regards,
&gt;&gt; Aruna Maurya,
&gt;&gt; CSE,B.tech,
&gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt;&gt;
&gt;&gt;
&gt;
&gt;
&gt; -- 
&gt; Regards,
&gt; Aruna Maurya,
&gt; CSE,B.tech,
&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt; [ text/plain ]
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180202105315</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2018-02-02 10:53:15-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

I thought the project idea had already been depreciated in favor of
counting unique users by directory fetches. No?

Regards,
Jaskaran

On Fri, Feb 2, 2018 at 3:48 PM, George Kadianakis &lt;desnacked@riseup.net&gt;
wrote:

&gt; Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:
&gt;
&gt; &gt; [ text/plain ]
&gt; &gt; Hey!
&gt; &gt;
&gt; &gt; What is the current status of the project, how much work has been done
&gt; and
&gt; &gt; where can I pick up from?
&gt; &gt;
&gt;
&gt; Hi!
&gt;
&gt; The project is currently not being worked on.
&gt;
&gt; Mainly design work has been done so far; no code has been written.
&gt; See:   https://lists.torproject.org/pipermail/tor-dev/2017-March/
&gt; 012001.html
&gt;        https://lists.torproject.org/pipermail/tor-dev/2017-March/
&gt; 012073.html
&gt;
&gt; I suggest you pick it up by fleshing out the design work and seeing if
&gt; it works for you, and then checking out the code to see where you need
&gt; to inject the code. Perhaps you can also get in touch with Jaskaran
&gt; Singh (jvsg1303@gmail.com) who did all the previous design work to see
&gt; if he is interested in collaborating!
&gt;
&gt; Cheers!
&gt;
&gt;
&gt;
&gt; &gt; On Fri, Feb 2, 2018 at 3:04 PM, Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;
&gt; &gt; wrote:
&gt; &gt;
&gt; &gt;&gt;
&gt; &gt;&gt; ---------- Forwarded message ----------
&gt; &gt;&gt; From: George Kadianakis &lt;desnacked@riseup.net&gt;
&gt; &gt;&gt; Date: Wed, Jan 31, 2018 at 6:32 PM
&gt; &gt;&gt; Subject: Re: [tor-dev] Starting with contributing to Anonymous Local
&gt; Count
&gt; &gt;&gt; Statistics.
&gt; &gt;&gt; To: Aruna Maurya &lt;aruna.maurya12@gmail.com&gt;,
&gt; tor-dev@lists.torproject.org
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt; Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:
&gt; &gt;&gt;
&gt; &gt;&gt; &gt; [ text/plain ]
&gt; &gt;&gt; &gt; Hey!
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; I was going through the Tor Volunteer page and came across the
&gt; Anonymous
&gt; &gt;&gt; &gt; local count statistics project. As a student it would be a great
&gt; starting
&gt; &gt;&gt; &gt; point and an even bigger opportunity to get a chance to collaborate
&gt; and
&gt; &gt;&gt; &gt; learn in the process.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; I would like to contribute to it, and would love to start as soon as
&gt; &gt;&gt; &gt; possible. It would be great if someone could guide me through.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt;
&gt; &gt;&gt; Hello Aruna,
&gt; &gt;&gt;
&gt; &gt;&gt; thanks for reaching out.
&gt; &gt;&gt;
&gt; &gt;&gt; I also find this project interesting. I'd like to help you but my time
&gt; &gt;&gt; is quite limited lately.
&gt; &gt;&gt;
&gt; &gt;&gt; What would you like guidance with?
&gt; &gt;&gt;
&gt; &gt;&gt; With regards to design, I suggest you take a look at the last comments
&gt; &gt;&gt; of this trac ticket:  https://trac.torproject.org/pr
&gt; &gt;&gt; ojects/tor/ticket/7532#comment:22
&gt; &gt;&gt; Particularly it seems like the PCSA algorithm might be a reasonable way
&gt; &gt;&gt; forward.
&gt; &gt;&gt;
&gt; &gt;&gt; With regards to coding, I suggest you familiarize yourself with the Tor
&gt; &gt;&gt; codebase. Some specific places to look at would be the way that Tor
&gt; &gt;&gt; currently counts users. For example, see geoip_note_client_seen() and
&gt; &gt;&gt; its callers, for when bridges register new clients to their stats
&gt; &gt;&gt; subsystem. Also check geoip_format_bridge_stats() for when bridges
&gt; &gt;&gt; finally report those stats.
&gt; &gt;&gt;
&gt; &gt;&gt; Let us know if you have any specific questions!
&gt; &gt;&gt;
&gt; &gt;&gt; Cheers!
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt; --
&gt; &gt;&gt; Regards,
&gt; &gt;&gt; Aruna Maurya,
&gt; &gt;&gt; CSE,B.tech,
&gt; &gt;&gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &gt;&gt; &lt;https://medium.com/@arunamaurya&gt;
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;
&gt; &gt;
&gt; &gt; --
&gt; &gt; Regards,
&gt; &gt; Aruna Maurya,
&gt; &gt; CSE,B.tech,
&gt; &gt; Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&gt; &gt; &lt;https://medium.com/@arunamaurya&gt;
&gt; &gt; [ text/plain ]
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I thought the project idea had already been \
depreciated in favor of&lt;/div&gt;&lt;div&gt;counting unique users by directory fetches. \
No?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Jaskaran&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Feb 2, 2018 at 3:48 PM, \
George Kadianakis &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:desnacked@riseup.net" \
target="_blank"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;Aruna Maurya &lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt; writes:&lt;br&gt; \
&lt;br&gt; &gt; [ text/plain ]&lt;br&gt;
&gt; Hey!&lt;br&gt;
&gt;&lt;br&gt;
&lt;/span&gt;&lt;span class=""&gt;&gt; What is the current status of the project, how much work \
has been done and&lt;br&gt; &gt; where can I pick up from?&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Hi!&lt;br&gt;
&lt;br&gt;
The project is currently not being worked on.&lt;br&gt;
&lt;br&gt;
Mainly design work has been done so far; no code has been written.&lt;br&gt;
See:     &lt;a href="https://lists.torproject.org/pipermail/tor-dev/2017-March/012001.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;pipermail/tor-dev/2017-March/&lt;wbr&gt;012001.html&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://lists.torproject.org/pipermail/tor-dev/2017-March/012073.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;pipermail/tor-dev/2017-March/&lt;wbr&gt;012073.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
I suggest you pick it up by fleshing out the design work and seeing if&lt;br&gt;
it works for you, and then checking out the code to see where you need&lt;br&gt;
to inject the code. Perhaps you can also get in touch with Jaskaran&lt;br&gt;
Singh (&lt;a href="mailto:jvsg1303@gmail.com"&gt;jvsg1303@gmail.com&lt;/a&gt;) who did all the \
previous design work to see&lt;br&gt; if he is interested in collaborating!&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
&lt;div&gt;&lt;div class="h5"&gt;&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&gt; On Fri, Feb 2, 2018 at 3:04 PM, Aruna Maurya &lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;&lt;br&gt; &gt; \
wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; ---------- Forwarded message ----------&lt;br&gt;
&gt;&gt; From: George Kadianakis &lt;&lt;a \
href="mailto:desnacked@riseup.net"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;br&gt; &gt;&gt; Date: \
Wed, Jan 31, 2018 at 6:32 PM&lt;br&gt; &gt;&gt; Subject: Re: [tor-dev] Starting with \
contributing to Anonymous Local Count&lt;br&gt; &gt;&gt; Statistics.&lt;br&gt;
&gt;&gt; To: Aruna Maurya &lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt;, &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; \
&gt;&gt;&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&gt; Aruna Maurya &lt;&lt;a \
href="mailto:aruna.maurya12@gmail.com"&gt;aruna.maurya12@gmail.com&lt;/a&gt;&gt; writes:&lt;br&gt; \
&gt;&gt;&lt;br&gt; &gt;&gt; &gt; [ text/plain ]&lt;br&gt;
&gt;&gt; &gt; Hey!&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; I was going through the Tor Volunteer page and came across the \
Anonymous&lt;br&gt; &gt;&gt; &gt; local count statistics project. As a student it would be \
a great starting&lt;br&gt; &gt;&gt; &gt; point and an even bigger opportunity to get a \
chance to collaborate and&lt;br&gt; &gt;&gt; &gt; learn in the process.&lt;br&gt;
&gt;&gt; &gt;&lt;br&gt;
&gt;&gt; &gt; I would like to contribute to it, and would love to start as soon \
as&lt;br&gt; &gt;&gt; &gt; possible. It would be great if someone could guide me \
through.&lt;br&gt; &gt;&gt; &gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Hello Aruna,&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; thanks for reaching out.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; I also find this project interesting. I'd like to help you but my \
time&lt;br&gt; &gt;&gt; is quite limited lately.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; What would you like guidance with?&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; With regards to design, I suggest you take a look at the last comments&lt;br&gt;
&gt;&gt; of this trac ticket:   &lt;a href="https://trac.torproject.org/pr" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/pr&lt;/a&gt;&lt;br&gt; &gt;&gt; \
ojects/tor/ticket/7532#&lt;wbr&gt;comment:22&lt;br&gt; &gt;&gt; Particularly it seems like the \
PCSA algorithm might be a reasonable way&lt;br&gt; &gt;&gt; forward.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; With regards to coding, I suggest you familiarize yourself with the Tor&lt;br&gt;
&gt;&gt; codebase. Some specific places to look at would be the way that Tor&lt;br&gt;
&gt;&gt; currently counts users. For example, see geoip_note_client_seen() and&lt;br&gt;
&gt;&gt; its callers, for when bridges register new clients to their stats&lt;br&gt;
&gt;&gt; subsystem. Also check geoip_format_bridge_stats() for when bridges&lt;br&gt;
&gt;&gt; finally report those stats.&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Let us know if you have any specific questions!&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; Cheers!&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; --&lt;br&gt;
&gt;&gt; Regards,&lt;br&gt;
&gt;&gt; Aruna Maurya,&lt;br&gt;
&gt;&gt; CSE,B.tech,&lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&gt;&gt; Blog &lt;&lt;a href="https://themindreserves.wordpress.com/" \
rel="noreferrer" target="_blank"&gt;https://themindreserves.&lt;wbr&gt;wordpress.com/&lt;/a&gt;&gt; \
| Medium&lt;br&gt; &gt;&gt; &lt;&lt;a href="https://medium.com/@arunamaurya" rel="noreferrer" \
target="_blank"&gt;https://medium.com/@&lt;wbr&gt;arunamaurya&lt;/a&gt;&gt;&lt;br&gt; &lt;span \
class=""&gt;&gt;&gt;&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; --&lt;br&gt;
&gt; Regards,&lt;br&gt;
&gt; Aruna Maurya,&lt;br&gt;
&gt; CSE,B.tech,&lt;br&gt;
&lt;/span&gt;&gt; Blog &lt;&lt;a href="https://themindreserves.wordpress.com/" \
rel="noreferrer" target="_blank"&gt;https://themindreserves.&lt;wbr&gt;wordpress.com/&lt;/a&gt;&gt; \
| Medium&lt;br&gt; &gt; &lt;&lt;a href="https://medium.com/@arunamaurya" rel="noreferrer" \
target="_blank"&gt;https://medium.com/@&lt;wbr&gt;arunamaurya&lt;/a&gt;&gt;&lt;br&gt; &gt; [ text/plain \
]&lt;br&gt; &lt;div class="HOEnZb"&gt;&lt;div class="h5"&gt;&gt; \
______________________________&lt;wbr&gt;_________________&lt;br&gt; &gt; tor-dev mailing \
list&lt;br&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 ______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111100050</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-01-11 10:00:50-0400</timestampReceived><subject>[tor-dev] Proposal Waterfilling</subject><body>

Hello everyone,

In order that our paper does not fall into the list of "yet another 
seems-to-be-cool-feature is that never going to be discussed because 
researchers moved on another topic", here is an attached proposal in 
which we summarize our work published in the last PETS event and how it 
can be implemented.

And, if you find this interesting, I would be glad to submit a patch :)

Any kind of feedbacks is more than welcome!

Cheers!

Florentin


["waterfilling-balancing-with-max-diversity.txt" (text/plain)]

Filename: waterfilling-balancing-with-max-diversity.txt
Title: Waterfilling
Authors: Florentin Rochet and Olivier Pereira
Reviewed by (thanks!): George Kadianakis, Edouard Cuvelier
Created:  Jan 2018
Status: Open                                                          

0  Motivation

  An adversary who monitors the entry and exit of a Tor communication
  path is usually able to de-anonymize that communication by traffic
  correlation. In order to limit the number of users that a single
  corrupted entry node could attack, the users keep using the same entry
  node, also called a "guard" for long periods of time: since guard
  rotation is limited, the users are less likely to use a corrupted
  guard at some point in their communication. In the current design, the
  amount of traffic that a given guard sees is directly proportional to
  the bandwidth that is provided by this guard. As a result, the few
  guards offering the highest amount of bandwidth become very attractive
  targets for an attacker.

  Waterfilling is a new path selection mechanism designed to make the
  guard selection even more efficient: if an adversary wants to profile
  more users, she has to increase her bandwidth _and_ increase the
  number of relays injected/hacked into the network.

  Waterfilling mitigates the risks of end-to-end traffic correlation
  by balancing the load as evenly as possible on endpoints of user
  circuits. More precisely, waterfilling modifies the probability
  distribution according to which users select guard nodes my making
  that distribution closer to the uniform distribution, without
  impacting the performance of the Tor network.

1  Overview

  The current Tor path selection algorithm is designed to satisfy two
  important properties:

  1) Each relay should handle a fraction of connections that is
  proportional to its bandwidth.

  2) The nodes in each circuit position (entry-middle-exit) should
  be able to handle the same volume of connections.

  Hence, in addition to select paths in a probabilistic manner, the
  path selection algorithm is responsible for balancing the network,
  that is, making sure that enough bandwidth is made available in all
  the positions.  The current balance of the network is decided by the
  bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
  Waterfilling PETS2017 paper
  https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
  This balance does not achieve maximum diversity in end-positions of
  user paths: the same network throughput could be achieved by
  decreasing the use of high-bandwidth relays and increasing the use
  of lower-bandwidth relays in the guard position, instead of using
  these relays in a way that is just proportional to their bandwidth.
  Such a change would make top relays less attractive targets to
  adversaries, and would increase the number of relays that need to be
  compromised in order to obtain a given probability of mounting a
  successful correlation attack.

  Our proposal only modifies the balance between the relays in a given
  position in the network. It does not modify, and actually takes as
  its starting point, any allocation mechanism used to decide the
  bandwidth that is allocated in guard, middle and exit positions.  As
  a consequence, the changes that we propose are quite minimal in
  terms of code base and performance and, in particular, they do not
  interfere with prop 265.

2  Design

  Correlation attacks require to control guard and exit nodes, but the
  scarcity of exit bandwidth is such that there is no real freedom in
  the way to use it.  As a result, the Waterfilling proposal focuses
  on the guard position. However, it could be easily extended to the
  exit position if, someday, nodes in that position happen not to be
  exploited to their full capacity.

  _Recall_: Tor currently computes bandwidth-weights in order to balance
  the bandwidth made available by nodes between the different path
  positions. In particular the Wgg weight indicates to each guard which
  proportion of its bandwidth should be used for entry traffic (the rest
  being normally devoted to the middle position).  This proportion is
  the same for all guards.
  
  _Proposal_: We use Tor's bandwidth-weight Wgg as the basis of
  Waterfilling. This Wgg, combined with the total bandwidth made
  available by all guards, defines the total bandwidth made available
  in the guard position. In order to allocate this bandwidth, the
  Waterfilling proposal proceeds by "raising the water level": it
  requires all guard relays to devote to their guard role all the
  bandwidth that they have, until a so-called "water level" is
  reached.  This water level is positioned in such a way that he total
  bandwidth provided in the guard position is exactly the same as the
  one that is currently made available in the Tor network. 

  As a result, guards offering a small amount of bandwidth, below the
  water level, will fully allocate their bandwidth to guard traffic,
  while all the guards offering a bandwidth that is higher than the
  water level will limit their guard bandwidth to the water level, and
  allocate the rest to the middle traffic (assuming that they are not
  exit relays). 

  Concretely, we compute the weight Wgg_i for each guard-flagged relay_i
  as follows:

  1) Sort all the guard relays by bandwidth in decreasing order
  (i.e. the i-th guard has more bandwidth than the i+1-th).

  2) Let K be the total number of guards, BW_i be the bandwidth of the
  i-th ranked guard and G be the total bandwidth that guards make
  available.  Compute a "pivot" N and the weight Wgg_i assigned to
  relay_i in such a way that:
     
     (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1, N]
     (b) Wgg_i == 1 forall i in [N+1, K] 
     (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)

  As a result of this process, each guard ranked before the pivot N
  dedicates the same bandwidth to its guard role (equation (a)) -- we
  say that these guards achieve the water level, while each guard
  ranked after the pivot N dedicates its full bandwidth to the guard
  role (equation (b)) -- they are below the water level.  Equation (c)
  makes sure that the pivot and the water level are positioned in a
  way that guarantees that the total amount of bandwidth dedicated to
  the guard position is the same as before. In practice, the value of
  N can be efficiently computed by dichotomic search on Equation (c),
  and the value of the Wgg_i then immediately follows from Equations
  (a) and (b). 

  Once Wgg_i is computed, we can compute Wmg_i = 1 - Wgg_i, which
  allocates to the middle position all the bandwidth that is left
  above the water level in the first N relays.  The bigger the node
  is, the more it contributes to the middle position compared to the
  others. A visual representation of this process is available in
  Figure 1 in the Waterfilling paper.

2.1 Going further by tweaking original bandwidth-weights computation

  As explained above, our Waterfilling equations are based on: 1) the
  Wgg weight computed by Tor 2) the assumption that the bandwidth
  available in exit is scarce, i.e., it is lower than the one
  available for guard (and middle) positions.
  
  The second point is satisfied most of the time in Tor, and we do take
  it for granted here.
  
  We, however, observe that Waterfilling could be made even more
  effective by applying a minor change in the way Tor computes the
  Wgg.  For the moment, Tor computes Wgg in such a way that the same
  bandwidth is allocated to the guard and middle positions. As a
  result, both positions are in excess compared to the exit position.

  The water level could be decreased and, as a result, the uniformity
  of the guard selection process could be improved, by computing Wgg
  in a way that allocates the same bandwidth to the guard and exit
  positions, putting the middle position as the only position in
  excess.
  
  We show in the performance section of the Waterfilling paper that
  scarcity on two positions does not reduce performance compared to
  vanilla bandwidth-weights.

3  Security implications

  An analysis of the security impact of the Waterfilling proposal is
  made in Section 6 of the Waterfilling paper. It studies the
  expectation of the number of relays that an adversary needs to
  control in order to mount a successful correlation attack at a given
  time, as well as an analysis of the evolution of the time until
  first path compromise, based on TorPS.

  Given that the distribution produced by Waterfilling is closer to
  the uniform distribution, the use of Waterfilling increases the
  expectation of the number of relays that an adversary needs to
  compromise in order mount a successful correlation
  attack. Concretely, and based on real data from 2015, this
  expectation increases by approximately 150 relays.

  Waterfilling also considerably decreases the benefits of
  compromising a top Tor relay: based on the same data, we computed
  that around 35 relays need to be compromised in order to obtain the
  benefits that would be obtained today by compromising Tor's top
  guard. On the flip side, the total bandwidth that those 35 relays
  would need to provide is 38% smaller than the one of the top relay,
  if they are designed to offer a bandwidth that is just at the water
  level. Moreover, these 35 relays used to equalize the impact of the
  current top guard is the lower bound. In practice, the adversary needs
  to predict the water level of all upcoming consensus to stay below it
  and not to waste bandwidth. A safe manner to achieve this is to split
  the resource into way more than 35 relays. At some point, the
  adversary would struggle between the need to stay off the radar with
  many machines and the waste of bandwidth if she has not enough of them.

4  Performance implications

  This proposal aims at improving the anonymity provided by the Tor
  network without impacting its performance negatively.

  From a theoretical viewpoint, since Waterfilling does not change the
  amount of bandwidth dedicated to the guard, middle and exit
  position, we should not observe any difference compared to vanilla
  Tor. The intuition is that, even if the top bandwidth relays that
  are currently affected to the guard position are less likely to be
  selected as guards, they become more likely to be selected as middle
  nodes, hence maintaining their contribution to fast Tor circuits.

  We confirmed this intuition by running Shadow experiments with a Tor
  implementation of Waterfilling. Our results give the same CDF for
  ttfb and ttlb metrics under different network loads. Of course,
  these results depend on the accuracy with which the behavior of
  current relays is measured and reported. 

  However, an interesting feature of the Waterfilling proposal is that
  it is fully compatible with vanilla Tor: some Tor clients may run
  the current Tor path selection algorithm, and others may run
  Waterfilling without impacting the performance. This makes an
  experimental deployment fairly easy to operate at a small or medium
  scale, while maintaining the possibility to fall back to vanilla Tor
  if an unexpected behavior is detected. 

5 Implementation

5.1 Overview

  Most of the implementation of Waterfilling is on the directory
  authority side: only a few changes are needed on the client side and
  no change is needed on the relay side. A prototype implementation is
  available at https://github.com/frochet/waterfilling. Here is how it
  works:

  Every hour, directory authorities vote on a new consensus. Once the
  votes are collected, the dirauths produce a deterministic network
  consensus document containing information about each relay,
  including the waterfilling bandwidth-weights produced from the
  equations described above. e.g.:
  
  ...(more relays)
  r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
  51.254.112.52 9111 9112 
  m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
  s Fast Guard HSDir Running Stable V2Dir Valid
  v Tor 0.2.6.7
  w Bandwidth=10200
  wfbw wgg=8029 wmg=1971.
  r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
  9111 9112 
  m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
  s Authority Fast Guard HSDir Running Stable V2Dir Valid
  v Tor 0.2.6.7
  w Bandwidth=1890
  wfbw wgg=10000 wmg=0.
  ...(more relays)

  In this example, we see two relays having the Guard flag and their
  new waterfilling bandwidth allocation given on the lines starting
  with wfbw. The first relay has a high bandwidth, above the water
  level, and shares that bandwidth between the guard and the middle
  positions, as indicated by the wgg and wmg variables.  The second
  relay has a lower bandwidth, below the water level, and fully uses
  it for guard traffic.

  If no wgg or wmg weights are specified for a given relay, the
  vanilla bandwidth-weights are used, as provided at the bottom of the
  consensus.

  Eventually, a modification of the client code is needed in order to
  parse and use the waterfilling weights. The changes are
  straightforward with a few lines of codes in existing functions.

6 Deployment discussion

  Deploying a new feature that has a central role in security and
  performance of the network can be difficult due to the distributed
  nature of the network. Hopefully, this proposal does not suffer from
  such issue. We give here some arguments supporting this claim.

  - About performance: The balancing equations designed by the current
    path selection are kept untouched. Hence mixing a set of clients
    using Waterfilling in the network and another set of clients using
    the vanilla path selection is not a problem: they will both
    enforce the same allocation of bandwidth between the different
    path positions. We confirmed this with experiments in Shadow.

  - About user security: A co-existence of path selection algorithms
    may be a threat to anonymity if the transition is not handled
    carefully. A set of compromised middle relays may distinguish
    users with Waterfilling configuration from others. This is a
    problem if the anonymity set is not large enough. Hopefully,
    "large enough" can be ensured with a consensus parameter that only
    enables this feature when enough users have updated their client.
                                                                       

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180131215900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-31 21:59:00-0400</timestampReceived><subject>[tor-dev] small fixes for the sources.list generator (and new options)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

since the tor relay guide depends on that page and
it has a few issues I made some small fixes to it:

https://www.torproject.org/docs/debian.html.en

    Bug 25107: sources.list generator: remove yakkety (we do not offer packages for it)
    Bug 25107: sources.list generator: add Ubuntu Artful Aardvark (17.10)
    Bug 25107: sources.list generator: remove zesty (we do not offer packages for it)
    Bug 25107: sources.list generator: add nightly-master option
    Bug 24994: point to the actual content describing alpha/stable differences
    Bug 25107: sources.list generator: update tor alpha version to 0.3.3.x
    Bug 25107: Update the tor alpha version (noscript page version)
    Bug 25107: fix sources.list generator for Debian Buster

If someone with commit privileges has time to review and merge 
before the weekend that would be great.

https://github.com/nusenu/torproject-webwml/tree/debian_sources.list_generator_fixes

Note: I did not care about the "(from source)" option.

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180131221131</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-31 22:11:31-0400</timestampReceived><subject>Re: [tor-dev] small fixes for the sources.list generator (and new options)</subject><body>


&gt; On 1 Feb 2018, at 08:59, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; since the tor relay guide depends on that page and
&gt; it has a few issues I made some small fixes to it:
&gt; 
&gt; https://www.torproject.org/docs/debian.html.en
&gt; 
&gt;    Bug 25107: sources.list generator: remove yakkety (we do not offer packages for it)
&gt;    Bug 25107: sources.list generator: add Ubuntu Artful Aardvark (17.10)
&gt;    Bug 25107: sources.list generator: remove zesty (we do not offer packages for it)
&gt;    Bug 25107: sources.list generator: add nightly-master option
&gt;    Bug 24994: point to the actual content describing alpha/stable differences
&gt;    Bug 25107: sources.list generator: update tor alpha version to 0.3.3.x
&gt;    Bug 25107: Update the tor alpha version (noscript page version)
&gt;    Bug 25107: fix sources.list generator for Debian Buster
&gt; 
&gt; If someone with commit privileges has time to review and merge 
&gt; before the weekend that would be great.
&gt; 
&gt; https://github.com/nusenu/torproject-webwml/tree/debian_sources.list_generator_fixes
&gt; 
&gt; Note: I did not care about the "(from source)" option.

It is confusing for users to have different options available in "from source"
and "compiled packages".

Please fix "from source", or open another ticket so we don't forget to fix it.

Did you fix the JavaScript and non-JavaScript versions of the page?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180203160300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-03 16:03:00-0400</timestampReceived><subject>Re: [tor-dev] small fixes for the sources.list generator (and new options)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; If someone with commit privileges has time to review and merge 
&gt; before the weekend that would be great.


teor marked the ticket as merge_ready on 2018-01-31, does anyone with 
commit privileges have time to merge it?

https://trac.torproject.org/projects/tor/ticket/25107

thanks,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180111134744</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-11 13:47:44-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Florentin,

I have copied your proposal below, so I can respond to it inline.

&gt; On 11 Jan 2018, at 21:00, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; Hello everyone,
&gt; 
&gt; In order that our paper does not fall into the list of "yet another \
&gt; seems-to-be-cool-feature is that never going to be discussed because researchers \
&gt; moved on another topic", here is an attached proposal in which we summarize our \
&gt; work published in the last PETS event and how it can be implemented. 
&gt; And, if you find this interesting, I would be glad to submit a patch :)
&gt; 
&gt; Any kind of feedbacks is more than welcome!
&gt; 
&gt; Cheers!
&gt; 
&gt; Florentin
&gt; 
&gt; Filename: waterfilling-balancing-with-max-diversity.txt
&gt; Title: Waterfilling
&gt; Authors: Florentin Rochet and Olivier Pereira
&gt; Reviewed by (thanks!): George Kadianakis, Edouard Cuvelier
&gt; Created:  Jan 2018
&gt; Status: Open                                                          
&gt; 
&gt; 0  Motivation
&gt; 
&gt; An adversary who monitors the entry and exit of a Tor communication
&gt; path is usually able to de-anonymize that communication by traffic
&gt; correlation. In order to limit the number of users that a single
&gt; corrupted entry node could attack, the users keep using the same entry
&gt; node, also called a "guard" for long periods of time: since guard
&gt; rotation is limited, the users are less likely to use a corrupted
&gt; guard at some point in their communication. In the current design, the
&gt; amount of traffic that a given guard sees is directly proportional to
&gt; the bandwidth that is provided by this guard. As a result, the few
&gt; guards offering the highest amount of bandwidth become very attractive
&gt; targets for an attacker.
&gt; 
&gt; Waterfilling is a new path selection mechanism designed to make the
&gt; guard selection even more efficient: if an adversary wants to profile
&gt; more users, she has to increase her bandwidth _and_ increase the
&gt; number of relays injected/hacked into the network.
&gt; 
&gt; Waterfilling mitigates the risks of end-to-end traffic correlation
&gt; by balancing the load as evenly as possible on endpoints of user
&gt; circuits. More precisely, waterfilling modifies the probability
&gt; distribution according to which users select guard nodes my making
&gt; that distribution closer to the uniform distribution, without
&gt; impacting the performance of the Tor network.
&gt; 
&gt; 1  Overview
&gt; 
&gt; The current Tor path selection algorithm is designed to satisfy two
&gt; important properties:
&gt; 
&gt; 1) Each relay should handle a fraction of connections that is
&gt; proportional to its bandwidth.
&gt; 
&gt; 2) The nodes in each circuit position (entry-middle-exit) should
&gt; be able to handle the same volume of connections.

What about onion service circuits?

They consist of entry - middle - middle, and for the purposes of this
analysis, make up about 4% of the network.
(2% of traffic at rend points, going through 2 x 3-hop circuits.)

https://metrics.torproject.org/hidserv-rend-relayed-cells.html

&gt; Hence, in addition to select paths in a probabilistic manner, the
&gt; path selection algorithm is responsible for balancing the network,
&gt; that is, making sure that enough bandwidth is made available in all
&gt; the positions.  The current balance of the network is decided by the
&gt; bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
&gt; Waterfilling PETS2017 paper
&gt; https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
&gt; This balance does not achieve maximum diversity in end-positions of
&gt; user paths: the same network throughput could be achieved by
&gt; decreasing the use of high-bandwidth relays and increasing the use
&gt; of lower-bandwidth relays in the guard position, instead of using
&gt; these relays in a way that is just proportional to their bandwidth.

When you say "bandwidth", it's not clear whether you mean consensus
weight (measured bandwidth) or advertised bandwidth (bandwidth
capacity). They're not the same.

I'm going to assume consensus weight from now on.
Please fix all uses of bandwidth in the rest of the proposal.

&gt; Such a change would make top relays less attractive targets to
&gt; adversaries, and would increase the number of relays that need to be
&gt; compromised in order to obtain a given probability of mounting a
&gt; successful correlation attack.
&gt; 
&gt; Our proposal only modifies the balance between the relays in a given
&gt; position in the network. It does not modify, and actually takes as
&gt; its starting point, any allocation mechanism used to decide the
&gt; bandwidth that is allocated in guard, middle and exit positions.  As
&gt; a consequence, the changes that we propose are quite minimal in
&gt; terms of code base and performance and, in particular, they do not
&gt; interfere with prop 265.
&gt; 
&gt; 2  Design
&gt; 
&gt; Correlation attacks require to control guard and exit nodes, but the
&gt; scarcity of exit bandwidth is such that there is no real freedom in
&gt; the way to use it.
&gt; 
&gt; As a result, the Waterfilling proposal focuses
&gt; on the guard position. However, it could be easily extended to the
&gt; exit position if, someday, nodes in that position happen not to be
&gt; exploited to their full capacity.

No, exit bandwidth is only exploited to its full capacity on
high-bandwidth exits in the northern EU and North America.

Select "Consensus Weight vs Bandwidth" on this map:
https://atlas.torproject.org/#map/flag:Exit
All the exits in all the purple countries are probably under-loaded.
And some exits elsewhere are under-loaded.
(That's why we let Exits be fallback directories.)

So the network might actually benefit the most from a reallocation
of Exit bandwidth. But you'd have to use the advertised bandwidth
rather than Wee and Wed.

What would it look like if we used waterfilling on the advertised
bandwidths of Exits?
Is there a way to do this that avoids gaming the system by
increasing advertised bandwidth?
Does the feedback loop with bandwidth authority measurements
mitigate this risk?

&gt; _Recall_: Tor currently computes bandwidth-weights in order to balance
&gt; the bandwidth made available by nodes between the different path
&gt; positions. In particular the Wgg weight indicates to each guard which
&gt; proportion of its bandwidth should be used for entry traffic (the rest
&gt; being normally devoted to the middle position).  This proportion is
&gt; the same for all guards.

Wgg indicates to *clients* how often they should select guards
in the guard position in *circuits*.

It doesn't influence relays themselves, and it only indirectly
affects bandwidth.

Please fix similar wording in the rest of the proposal.

&gt; _Proposal_: We use Tor's bandwidth-weight Wgg as the basis of
&gt; Waterfilling. This Wgg, combined with the total bandwidth made
&gt; available by all guards, defines the total bandwidth made available
&gt; in the guard position. In order to allocate this bandwidth, the
&gt; Waterfilling proposal proceeds by "raising the water level": it
&gt; requires all guard relays to devote to their guard role all the
&gt; bandwidth that they have, until a so-called "water level" is
&gt; reached.  This water level is positioned in such a way that he total

typo: the

&gt; bandwidth provided in the guard position is exactly the same as the
&gt; one that is currently made available in the Tor network. 
&gt; 
&gt; As a result, guards offering a small amount of bandwidth, below the
&gt; water level, will fully allocate their bandwidth to guard traffic,
&gt; while all the guards offering a bandwidth that is higher than the
&gt; water level will limit their guard bandwidth to the water level, and
&gt; allocate the rest to the middle traffic (assuming that they are not
&gt; exit relays). 


flagged as Exits
(some relays which allow exiting aren't flagged as Exits, because they
don't have ports that are useful for web traffic).

&gt; Concretely, we compute the weight Wgg_i for each guard-flagged relay_i
&gt; as follows:
&gt; 
&gt; 1) Sort all the guard relays by bandwidth in decreasing order
&gt; (i.e. the i-th guard has more bandwidth than the i+1-th).

a greater or equal consensus weight?

&gt; 2) Let K be the total number of guards, BW_i be the bandwidth of the
&gt; i-th ranked guard and G be the total bandwidth that guards make
&gt; available.  
&gt; 
&gt; Compute a "pivot" N and the weight Wgg_i assigned to
&gt; relay_i in such a way that:
&gt; 
&gt; (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1, N]

subscripts in brackets, otherwise it's ambiguous:

&gt; Wgg_(i+1) * BW_(i+1)

&gt; (b) Wgg_i == 1 forall i in [N+1, K] 
&gt; (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)

These equations are under-specified, because they allow solutions with:
Wgg*G &gt; 0
Wgg_1 == 0
That is, no guard selections for high-bandwidth relays.

From the descriptions, I think the missing condition is:
Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)

Also, Wgg is provided by the Tor directory authorities based on
consensus weights from the bandwidth authorities.

And what happens to any remainder in the calculations?
(This is most important for small, low bandwidth test networks.)

For example, if:
G = 10
Wgg = 0.6
BW_i = 6, 2, 2
What are the final weighted bandwidths?
2, 2, 2?

What if:
Wgg = 0.5
Are the bandwidths:
1, 2, 2?
2, 1, 2
2, 2, 1?

&gt; As a result of this process, each guard ranked before the pivot N
&gt; dedicates the same bandwidth to its guard role (equation (a)) -- we
&gt; say that these guards achieve the water level, while each guard
&gt; ranked after the pivot N dedicates its full bandwidth to the guard
&gt; role (equation (b)) -- they are below the water level.  Equation (c)
&gt; makes sure that the pivot and the water level are positioned in a
&gt; way that guarantees that the total amount of bandwidth dedicated to
&gt; the guard position is the same as before. In practice, the value of
&gt; N can be efficiently computed by dichotomic search on Equation (c),

Is this the same as a binary search?
Does it require any division?
Because division is slow on some Tor client architectures.

&gt; and the value of the Wgg_i then immediately follows from Equations
&gt; (a) and (b). 
&gt; 
&gt; Once Wgg_i is computed, we can compute Wmg_i = 1 - Wgg_i, which
&gt; allocates to the middle position all the bandwidth that is left
&gt; above the water level in the first N relays.  The bigger the node
&gt; is, the more it contributes to the middle position compared to the
&gt; others. A visual representation of this process is available in
&gt; Figure 1 in the Waterfilling paper.
&gt; 
&gt; 2.1 Going further by tweaking original bandwidth-weights computation
&gt; 
&gt; As explained above, our Waterfilling equations are based on: 1) the
&gt; Wgg weight computed by Tor 2) the assumption that the bandwidth
&gt; available in exit is scarce, i.e., it is lower than the one
&gt; available for guard (and middle) positions.
&gt; 
&gt; The second point is satisfied most of the time in Tor, and we do take
&gt; it for granted here.
&gt; 
&gt; We, however, observe that Waterfilling could be made even more
&gt; effective by applying a minor change in the way Tor computes the
&gt; Wgg.  For the moment, Tor computes Wgg in such a way that the same
&gt; bandwidth is allocated to the guard and middle positions. As a
&gt; result, both positions are in excess compared to the exit position.
&gt; 
&gt; The water level could be decreased and, as a result, the uniformity
&gt; of the guard selection process could be improved, by computing Wgg
&gt; in a way that allocates the same bandwidth to the guard and exit
&gt; positions, putting the middle position as the only position in
&gt; excess.

No, this would slow down Guards, and everything that isn't an exit circuit:
* directory fetches (3% of total bandwidth to guard position)
* onion services (rend is 4% of total bandwidth to guard and middle)
* HSDir is unweighted, and we don't know how much bandwidth it uses
* FallbackDir is unweighted, but mostly Guards, and small

&gt; We show in the performance section of the Waterfilling paper that
&gt; scarcity on two positions does not reduce performance compared to
&gt; vanilla bandwidth-weights.

What about guards that have low consensus weight due to latency,
rather than available bandwidth?

I think this could also cause you huge latency issues as you push more
bandwidth away from fast relays. I'm not sure if shadow captures this
accurately.

&gt; 3  Security implications
&gt; 
&gt; An analysis of the security impact of the Waterfilling proposal is
&gt; made in Section 6 of the Waterfilling paper. It studies the
&gt; expectation of the number of relays that an adversary needs to
&gt; control in order to mount a successful correlation attack at a given
&gt; time, as well as an analysis of the evolution of the time until
&gt; first path compromise, based on TorPS.
&gt; 
&gt; Given that the distribution produced by Waterfilling is closer to
&gt; the uniform distribution, the use of Waterfilling increases the
&gt; expectation of the number of relays that an adversary needs to
&gt; compromise in order mount a successful correlation
&gt; attack. Concretely, and based on real data from 2015, this
&gt; expectation increases by approximately 150 relays.

What percentage is this?

&gt; Waterfilling also considerably decreases the benefits of
&gt; compromising a top Tor relay: based on the same data, we computed
&gt; that around 35 relays

What percentage?

&gt; need to be compromised in order to obtain the
&gt; benefits that would be obtained today by compromising Tor's top
&gt; guard. On the flip side, the total bandwidth that those 35 relays
&gt; would need to provide is 38% smaller than the one of the top relay,
&gt; if they are designed to offer a bandwidth that is just at the water
&gt; level. Moreover, these 35 relays used to equalize the impact of the
&gt; current top guard is the lower bound. In practice, the adversary needs
&gt; to predict the water level of all upcoming consensus to stay below it
&gt; and not to waste bandwidth. A safe manner to achieve this is to split
&gt; the resource into way more than 35 relays. At some point, the
&gt; adversary would struggle between the need to stay off the radar with
&gt; many machines and the waste of bandwidth if she has not enough of them.
&gt; 
&gt; 4  Performance implications
&gt; 
&gt; This proposal aims at improving the anonymity provided by the Tor
&gt; network without impacting its performance negatively.
&gt; 
&gt; From a theoretical viewpoint, since Waterfilling does not change the
&gt; amount of bandwidth dedicated to the guard, middle and exit
&gt; position, we should not observe any difference compared to vanilla
&gt; Tor. The intuition is that, even if the top bandwidth relays that
&gt; are currently affected to the guard position are less likely to be
&gt; selected as guards, they become more likely to be selected as middle
&gt; nodes, hence maintaining their contribution to fast Tor circuits.
&gt; 
&gt; We confirmed this intuition by running Shadow experiments with a Tor
&gt; implementation of Waterfilling. Our results give the same CDF for
&gt; ttfb and ttlb metrics under different network loads.

Please expand acronyms, and explain how similar the distributions
are, and how latencies In shadow compare to the public network

&gt; Of course,
&gt; these results depend on the accuracy with which the behavior of
&gt; current relays is measured and reported. 
&gt; 
&gt; However, an interesting feature of the Waterfilling proposal is that
&gt; it is fully compatible with vanilla Tor: some Tor clients may run
&gt; the current Tor path selection algorithm, and others may run
&gt; Waterfilling without impacting the performance. This makes an
&gt; experimental deployment fairly easy to operate at a small or medium
&gt; scale, while maintaining the possibility to fall back to vanilla Tor
&gt; if an unexpected behavior is detected. 
&gt; 
&gt; 5 Implementation
&gt; 
&gt; 5.1 Overview
&gt; 
&gt; Most of the implementation of Waterfilling is on the directory
&gt; authority side: only a few changes are needed on the client side and
&gt; no change is needed on the relay side. A prototype implementation is
&gt; available at https://github.com/frochet/waterfilling

I'm sorry, I can't read this, there are build files everywhere.
I can't even find which files were changed.
Can you provide clean commits in a fork, based on the Tor master branch?

Also, I think you will need a new consensus method for this change.
We don't use consensus parameters or torrc options to modify the
content of the consensus, we use consensus methods.

&gt; Here is how it
&gt; works:
&gt; 
&gt; Every hour, directory authorities vote on a new consensus. Once the
&gt; votes are collected, the dirauths produce a deterministic network
&gt; consensus document containing information about each relay,
&gt; including the waterfilling bandwidth-weights produced from the
&gt; equations described above. e.g.:
&gt; 
&gt; ...(more relays)
&gt; r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
&gt; 51.254.112.52 9111 9112 
&gt; m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
&gt; s Fast Guard HSDir Running Stable V2Dir Valid
&gt; v Tor 0.2.6.7
&gt; w Bandwidth=10200
&gt; wfbw wgg=8029 wmg=1971.
&gt; r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
&gt; 9111 9112 
&gt; m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
&gt; s Authority Fast Guard HSDir Running Stable V2Dir Valid
&gt; v Tor 0.2.6.7
&gt; w Bandwidth=1890
&gt; wfbw wgg=10000 wmg=0.
&gt; ...(more relays)
&gt; 
&gt; In this example, we see two relays having the Guard flag and their
&gt; new waterfilling bandwidth allocation given on the lines starting
&gt; with wfbw.

These are redundant, and could significantly expand the size of the
consensus, and consensus diffs. (Consensus weights are one of the
largest contributors to consensus diff size.)

Why not calculate wmg on clients?
Why not calculate both wgg and wmg on clients?

If you must keep them in the consensus, please put these on the
existing "w" lines, which are intended for this purpose:

"Other weighting keywords may be added later. Clients MUST ignore
keywords they do not recognize."

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2234

&gt; The first relay has a high bandwidth, above the water
&gt; level, and shares that bandwidth between the guard and the middle
&gt; positions, as indicated by the wgg and wmg variables.  The second
&gt; relay has a lower bandwidth, below the water level, and fully uses
&gt; it for guard traffic.
&gt; 
&gt; If no wgg or wmg weights are specified for a given relay, the
&gt; vanilla bandwidth-weights are used, as provided at the bottom of the
&gt; consensus.
&gt; 
&gt; Eventually, a modification of the client code is needed in order to
&gt; parse and use the waterfilling weights. The changes are
&gt; straightforward with a few lines of codes in existing functions.
&gt; 
&gt; 6 Deployment discussion
&gt; 
&gt; Deploying a new feature that has a central role in security and
&gt; performance of the network can be difficult due to the distributed
&gt; nature of the network. Hopefully, this proposal does not suffer from
&gt; such issue. We give here some arguments supporting this claim.
&gt; 
&gt; - About performance: The balancing equations designed by the current
&gt; path selection are kept untouched. Hence mixing a set of clients
&gt; using Waterfilling in the network and another set of clients using
&gt; the vanilla path selection is not a problem: they will both
&gt; enforce the same allocation of bandwidth between the different
&gt; path positions. We confirmed this with experiments in Shadow.
&gt; 
&gt; - About user security: A co-existence of path selection algorithms
&gt; may be a threat to anonymity if the transition is not handled
&gt; carefully. A set of compromised middle relays may distinguish
&gt; users with Waterfilling configuration from others. This is a
&gt; problem if the anonymity set is not large enough. Hopefully,
&gt; "large enough" can be ensured with a consensus parameter that only
&gt; enables this feature when enough users have updated their client.


Unanswered questions:

What about the feedback loop between this new allocation system
and the bandwidth authorities?

Should bandwidth authority clients use the new system?

How do we report on the new system?
How can we determine whether it is better for security in practice?
How can we determine if it is faster or slower in practice?
How can we work out if someone is trying to game the system?

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;Hi Florentin,&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
have copied your proposal below, so I can respond to it \
inline.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 11 Jan 2018, at 21:00, Florentin Rochet &lt;&lt;a \
href="mailto:florentin.rochet@uclouvain.be"&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Hello \
everyone,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;In order that our paper does not fall into \
the list of "yet another seems-to-be-cool-feature is that never going to be discussed \
because researchers moved on another topic", here is an attached proposal in which we \
summarize our work published in the last PETS event and how it can be \
implemented.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;And, if you find this interesting, I \
would be glad to submit a patch :)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Any kind of \
feedbacks is more than \
welcome!&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Cheers!&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Florentin&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;Filename: \
waterfilling-balancing-with-max-diversity.txt&lt;/div&gt;&lt;div&gt;Title: \
Waterfilling&lt;/div&gt;&lt;div&gt;Authors: Florentin Rochet and Olivier \
Pereira&lt;/div&gt;&lt;div&gt;Reviewed by (thanks!): George Kadianakis, Edouard \
Cuvelier&lt;/div&gt;&lt;div&gt;Created:  Jan 2018&lt;/div&gt;&lt;div&gt;Status: Open     \
                        \
                        \
     &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;0 \
 Motivation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  An adversary who monitors the entry \
and exit of a Tor communication&lt;/div&gt;&lt;div&gt;  path is usually able to de-anonymize \
that communication by traffic&lt;/div&gt;&lt;div&gt;  correlation. In order to limit the \
number of users that a single&lt;/div&gt;&lt;div&gt;  corrupted entry node could attack, the \
users keep using the same entry&lt;/div&gt;&lt;div&gt;  node, also called a "guard" for long \
periods of time: since guard&lt;/div&gt;&lt;div&gt;  rotation is limited, the users are less \
likely to use a corrupted&lt;/div&gt;&lt;div&gt;  guard at some point in their \
communication. In the current design, the&lt;/div&gt;&lt;div&gt;  amount of traffic that a \
given guard sees is directly proportional to&lt;/div&gt;&lt;div&gt;  the bandwidth that is \
provided by this guard. As a result, the few&lt;/div&gt;&lt;div&gt;  guards offering the \
highest amount of bandwidth become very attractive&lt;/div&gt;&lt;div&gt;  targets for an \
attacker.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Waterfilling is a new path selection \
mechanism designed to make the&lt;/div&gt;&lt;div&gt;  guard selection even more efficient: \
if an adversary wants to profile&lt;/div&gt;&lt;div&gt;  more users, she has to increase her \
bandwidth _and_ increase the&lt;/div&gt;&lt;div&gt;  number of relays injected/hacked into \
the network.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Waterfilling mitigates the risks of \
end-to-end traffic correlation&lt;/div&gt;&lt;div&gt;  by balancing the load as evenly as \
possible on endpoints of user&lt;/div&gt;&lt;div&gt;  circuits. More precisely, waterfilling \
modifies the probability&lt;/div&gt;&lt;div&gt;  distribution according to which users \
select guard nodes my making&lt;/div&gt;&lt;div&gt;  that distribution closer to the uniform \
distribution, without&lt;/div&gt;&lt;div&gt;  impacting the performance of the Tor \
network.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1  Overview&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
The current Tor path selection algorithm is designed to satisfy two&lt;/div&gt;&lt;div&gt;  \
important properties:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  1) Each relay should handle a \
fraction of connections that is&lt;/div&gt;&lt;div&gt;  proportional to its \
bandwidth.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  2) The nodes in each circuit position \
(entry-middle-exit) should&lt;/div&gt;&lt;div&gt;  be able to handle the same volume of \
connections.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What about onion service \
circuits?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;They consist of entry - middle - middle, and for \
the purposes of this&lt;/div&gt;&lt;div&gt;analysis, make up about 4% of the \
network.&lt;/div&gt;&lt;div&gt;(2% of traffic at rend points, going through 2 x 3-hop \
circuits.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://metrics.torproject.org/hidserv-rend-relayed-cells.html"&gt;https://metrics.torproject.org/hidserv-rend-relayed-cells.html&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div&gt;  Hence, in addition to select paths in a probabilistic \
manner, the&lt;/div&gt;&lt;div&gt;  path selection algorithm is responsible for balancing \
the network,&lt;/div&gt;&lt;div&gt;  that is, making sure that enough bandwidth is made \
available in all&lt;/div&gt;&lt;div&gt;  the positions.  The current balance of the \
network is decided by the&lt;/div&gt;&lt;div&gt;  bandwidth-weights (see dir-spec.txt \
section 3.8.3.  or/and the&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;  Waterfilling PETS2017 paper&lt;/div&gt;&lt;div&gt;  &lt;a \
href="https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf"&gt;https://p \
etsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf&lt;/a&gt;).&lt;/div&gt;&lt;div&gt;  \
This balance does not achieve maximum diversity in end-positions of&lt;/div&gt;&lt;div&gt;  \
user paths: the same network throughput could be achieved by&lt;/div&gt;&lt;div&gt;  \
decreasing the use of high-bandwidth relays and increasing the use&lt;/div&gt;&lt;div&gt;  \
of lower-bandwidth relays in the guard position, instead of using&lt;/div&gt;&lt;div&gt;  \
these relays in a way that is just proportional to their \
bandwidth.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;When you say "bandwidth", it's not \
clear whether you mean consensus&lt;/div&gt;&lt;div&gt;weight (&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;measured bandwidth) &lt;/span&gt;or advertised bandwidth \
(bandwidth&lt;/div&gt;&lt;div&gt;capacity). They're not the same.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm \
going to assume consensus weight from now on.&lt;/div&gt;&lt;div&gt;Please fix all uses of \
bandwidth in the rest of the proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div&gt;  Such a change would make top relays less attractive \
targets to&lt;/div&gt;&lt;div&gt;  adversaries, and would increase the number of relays that \
need to be&lt;/div&gt;&lt;div&gt;  compromised in order to obtain a given probability of \
mounting a&lt;/div&gt;&lt;div&gt;  successful correlation \
attack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Our proposal only modifies the balance \
between the relays in a given&lt;/div&gt;&lt;div&gt;  position in the network. It does not \
modify, and actually takes as&lt;/div&gt;&lt;div&gt;  its starting point, any allocation \
mechanism used to decide the&lt;/div&gt;&lt;div&gt;  bandwidth that is allocated in guard, \
middle and exit positions.  As&lt;/div&gt;&lt;div&gt;  a consequence, the changes that \
we propose are quite minimal in&lt;/div&gt;&lt;div&gt;  terms of code base and performance \
and, in particular, they do not&lt;/div&gt;&lt;div&gt;  interfere with prop \
265.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;2 \
 Design&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Correlation attacks require to control \
guard and exit nodes, but the&lt;/div&gt;&lt;div&gt;  scarcity of exit bandwidth is such \
that there is no real freedom in&lt;/div&gt;&lt;div&gt;  the way to use \
it.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;As a result, the \
Waterfilling proposal focuses&lt;/div&gt;&lt;div&gt;  on the guard position. However, it \
could be easily extended to the&lt;/div&gt;&lt;div&gt;  exit position if, someday, nodes in \
that position happen not to be&lt;/div&gt;&lt;div&gt;  exploited to their full \
capacity.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;No, exit bandwidth is only exploited to its full capacity \
on&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;high-bandwidth exits in the &lt;/span&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;northern EU and North America.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Select "Consensus Weight vs \
Bandwidth" on this map:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://atlas.torproject.org/#map/flag:Exit" style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;font \
color="#000000"&gt;https://atlas.torproject.org/#map/flag:Exit&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;All the exits in all the purple \
countries are probably under-loaded.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;And some exits elsewhere are \
under-loaded.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;(That's why we let Exits be fallback directories.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;So the network might actually \
benefit the most from a reallocation&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;of Exit bandwidth. But you'd have to use the advertised \
bandwidth&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;rather than Wee and Wed.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;What would it look like if we used waterfilling on the \
advertised&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;bandwidths of Exits?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Is there a way to do this that avoids gaming the system \
by&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;increasing advertised bandwidth?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Does the feedback loop with bandwidth authority \
measurements&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;mitigate this risk?&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  \
_Recall_: Tor currently computes bandwidth-weights in order to \
balance&lt;/div&gt;&lt;div&gt;  the bandwidth made available by nodes between the different \
path&lt;/div&gt;&lt;div&gt;  positions. In particular the Wgg weight indicates to each guard \
which&lt;/div&gt;&lt;div&gt;  proportion of its bandwidth should be used for entry traffic \
(the rest&lt;/div&gt;&lt;div&gt;  being normally devoted to the middle position).  This \
proportion is&lt;/div&gt;&lt;div&gt;  the same for all \
guards.&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Wgg indicates to *clients* how often \
they should select guards&lt;/div&gt;&lt;div&gt;in the guard position in \
*circuits*.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It doesn't influence relays themselves, and it \
only indirectly&lt;/div&gt;&lt;div&gt;affects bandwidth.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please fix \
similar wording in the rest of the proposal.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div&gt;  _Proposal_: We use Tor's bandwidth-weight Wgg as the \
basis of&lt;/div&gt;&lt;div&gt;  Waterfilling. This Wgg, combined with the total bandwidth \
made&lt;/div&gt;&lt;div&gt;  available by all guards, defines the total bandwidth made \
available&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  in the guard \
position. In order to allocate this bandwidth, the&lt;/div&gt;&lt;div&gt;  Waterfilling \
proposal proceeds by "raising the water level": it&lt;/div&gt;&lt;div&gt;  requires all \
guard relays to devote to their guard role all the&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;  bandwidth that they have, until a so-called "water level" \
is&lt;/div&gt;&lt;div&gt;  reached.  This water level is positioned in such a way that \
he total&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;typo: \
the&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;  bandwidth provided \
in the guard position is exactly the same as the&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;  one that is currently made available in the Tor \
network. &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  As a result, guards offering a small \
amount of bandwidth, below the&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  \
water level, will fully allocate their bandwidth to guard \
traffic,&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  while all the guards \
offering a bandwidth that is higher than the&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;  water level will limit their guard bandwidth to the water \
level, and&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  allocate the rest to \
the middle traffic (assuming that they are not&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;  exit relays). &lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;flagged \
as Exits&lt;/div&gt;&lt;div&gt;(some relays which allow exiting aren't flagged as Exits, because \
they&lt;/div&gt;&lt;div&gt;don't have ports that are useful for web \
traffic).&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;  Concretely, we compute \
the weight Wgg_i for each guard-flagged relay_i&lt;/div&gt;&lt;div&gt;  as \
follows:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  1) Sort all the guard relays by bandwidth in \
decreasing order&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;  (i.e. \
the i-th guard has more bandwidth than the \
i+1-th).&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a greater or equal consensus \
weight?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;  2) Let K be the total \
number of guards, BW_i be the bandwidth of the&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div&gt;  i-th ranked guard and G be the total bandwidth that \
guards make&lt;/div&gt;&lt;div&gt;  available.  &lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;Compute a "pivot" N \
and the weight Wgg_i assigned to&lt;/div&gt;&lt;div&gt;  relay_i in such a way \
that:&lt;/div&gt;&lt;div&gt;     &lt;/div&gt;&lt;div&gt;     (a) Wgg_i * BW_i \
== Wgg_i+1 * BW_i+1 forall i in [1, \
N]&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;subscripts in brackets, otherwise it's \
ambiguous:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Wgg_(i+1) * \
BW_(i+1)&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;  \
   (b) Wgg_i == 1 forall i in [N+1, K] &lt;/div&gt;&lt;div&gt;    \
 (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by \
Tor)&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;These equations are under-specified, \
because they allow solutions with:&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Wgg*G &gt; 0&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Wgg_1 == 0&lt;/div&gt;&lt;div&gt;That is, no \
guard selections for high-bandwidth relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From the \
descriptions, I think the missing condition is:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Wgg_N * BW_N \
&gt;= Wgg_(N+1) * BW_(N+1)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Also, \
Wgg is provided by the Tor directory authorities based on&lt;/div&gt;&lt;div&gt;consensus weights \
from the bandwidth authorities.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And what happens to any \
remainder in the calculations?&lt;/div&gt;&lt;div&gt;(This is most important for small, low \
bandwidth test networks.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For example, if:&lt;/div&gt;&lt;div&gt;G = \
10&lt;/div&gt;&lt;div&gt;Wgg = 0.6&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;BW_i = 6, 2, 2&lt;/span&gt;&lt;/div&gt;&lt;div&gt;What are the final weighted \
bandwidths?&lt;/div&gt;&lt;div&gt;2, 2, 2?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What if:&lt;/div&gt;&lt;div&gt;Wgg = \
0.5&lt;/div&gt;&lt;div&gt;Are the bandwidths:&lt;/div&gt;&lt;div&gt;1, 2, 2?&lt;/div&gt;&lt;div&gt;2, 1, 2&lt;/div&gt;&lt;div&gt;2, \
2, 1?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;  As a result of this process, \
each guard ranked before the pivot N&lt;/div&gt;&lt;div&gt;  dedicates the same bandwidth to \
its guard role (equation (a)) -- we&lt;/div&gt;&lt;div&gt;  say that these guards achieve \
the water level, while each guard&lt;/div&gt;&lt;div&gt;  ranked after the pivot N dedicates \
        Clients MUST ignore&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; margin-top: \
0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;keywords they \
do not recognize."&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; margin-top: 0px; \
margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2234"&gt;https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2234&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;The first relay has a high bandwidth, above the \
water&lt;/div&gt;&lt;div&gt;  level, and shares that bandwidth between the guard and the \
middle&lt;/div&gt;&lt;div&gt;  positions, as indicated by the wgg and wmg variables. \
 The second&lt;/div&gt;&lt;div&gt;  relay has a lower bandwidth, below the water level, \
and fully uses&lt;/div&gt;&lt;div&gt;  it for guard traffic.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  \
If no wgg or wmg weights are specified for a given relay, the&lt;/div&gt;&lt;div&gt;  \
vanilla bandwidth-weights are used, as provided at the bottom of the&lt;/div&gt;&lt;div&gt;  \
consensus.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Eventually, a modification of the client \
code is needed in order to&lt;/div&gt;&lt;div&gt;  parse and use the waterfilling weights. \
The changes are&lt;/div&gt;&lt;div&gt;  straightforward with a few lines of codes in \
existing functions.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;6 Deployment \
discussion&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  Deploying a new feature that has a central \
role in security and&lt;/div&gt;&lt;div&gt;  performance of the network can be difficult due \
to the distributed&lt;/div&gt;&lt;div&gt;  nature of the network. Hopefully, this proposal \
does not suffer from&lt;/div&gt;&lt;div&gt;  such issue. We give here some arguments \
supporting this claim.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  - About performance: The \
balancing equations designed by the current&lt;/div&gt;&lt;div&gt;    path selection \
are kept untouched. Hence mixing a set of clients&lt;/div&gt;&lt;div&gt;    using \
Waterfilling in the network and another set of clients using&lt;/div&gt;&lt;div&gt;    \
the vanilla path selection is not a problem: they will both&lt;/div&gt;&lt;div&gt;    \
enforce the same allocation of bandwidth between the different&lt;/div&gt;&lt;div&gt;  \
  path positions. We confirmed this with experiments in \
Shadow.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;  - About user security: A co-existence of path \
selection algorithms&lt;/div&gt;&lt;div&gt;    may be a threat to anonymity if the \
transition is not handled&lt;/div&gt;&lt;div&gt;    carefully. A set of compromised \
middle relays may distinguish&lt;/div&gt;&lt;div&gt;    users with Waterfilling \
configuration from others. This is a&lt;/div&gt;&lt;div&gt;    problem if the anonymity \
set is not large enough. Hopefully,&lt;/div&gt;&lt;div&gt;    "large enough" can be \
ensured with a consensus parameter that only&lt;/div&gt;&lt;div&gt;    enables this \
feature when enough users have updated their \
client.&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Unanswered \
questions:&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;What about the feedback loop between this new allocation \
system&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;and \
the bandwidth authorities?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;Should bandwidth authority clients use the new \
system?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;How do we report on the new system?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;How can we determine whether it is \
better for security in practice?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;How can we determine if it is faster or slower in \
practice?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;How can we work out if someone is trying to game the \
system?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112060924</emailId><senderName>Justin Tracey</senderName><senderEmail>j2tracey@gmail.com</senderEmail><timestampReceived>2018-01-12 06:09:24-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

On 2018-01-11 08:47 AM, teor wrote:
&gt; What about guards that have low consensus weight due to latency,
&gt; rather than available bandwidth?
&gt; 
&gt; I think this could also cause you huge latency issues as you push more
&gt; bandwidth away from fast relays. I'm not sure if shadow captures this
&gt; accurately.

FWIW, Shadow does accurately reflect latencies, assuming you supply a
realistic network topology file and used relatively recent Tor metrics.

https://github.com/shadow/shadow/wiki/3.2-Network-Config
https://github.com/shadow/shadow-plugin-tor/wiki#generating-a-new-tor-network

 - Justin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180112141742</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-01-12 14:17:42-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

Thank you for your helpful review, teor.

I updated the proposal from most of your comments (see attached .txt) 
and I respond inline to add some precisions relative to a few of your 
questions.

Btw, I've mirrored my private repo to github 
https://github.com/frochet/Waterfilling, such that you have the proper 
commit history.

On 2018-01-11 14:47, teor wrote:
&gt; Hi Florentin,
&gt;
&gt; I have copied your proposal below, so I can respond to it inline.
&gt;
&gt; On 11 Jan 2018, at 21:00, Florentin Rochet 
&gt; &lt;florentin.rochet@uclouvain.be &lt;mailto:florentin.rochet@uclouvain.be&gt;&gt; 
&gt; wrote:
&gt;
&gt; &lt;skip&gt;
&gt; 1  Overview
&gt;
&gt;   The current Tor path selection algorithm is designed to satisfy two
&gt;   important properties:
&gt;
&gt;   1) Each relay should handle a fraction of connections that is
&gt;   proportional to its bandwidth.
&gt;
&gt;   2) The nodes in each circuit position (entry-middle-exit) should
&gt;   be able to handle the same volume of connections.
&gt;
&gt; What about onion service circuits?
&gt;
&gt; They consist of entry - middle - middle, and for the purposes of this
&gt; analysis, make up about 4% of the network.
&gt; (2% of traffic at rend points, going through 2 x 3-hop circuits.)
&gt;
&gt; https://metrics.torproject.org/hidserv-rend-relayed-cells.html
&gt;

That's a good point. Waterfilling uses the current bandwidth-weights 
logic as a basis and they doesn't account for onion service circuit, 
hence it also ignore this sort of traffic. Prop 265 tries to address 
that problem when producing the bandwidth-weights; Since our method 
achieves the same total consensus weight balance between position as the 
one produced by bandwidth-weights, Waterfilling would directly inherit 
Prop 265's properties if this proposal is merged.


&gt;&gt;   Hence, in addition to select paths in a probabilistic manner, the
&gt;&gt;   path selection algorithm is responsible for balancing the network,
&gt;&gt;   that is, making sure that enough bandwidth is made available in all
&gt;&gt;   the positions.  The current balance of the network is decided by the
&gt;&gt;   bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
&gt;&gt;   Waterfilling PETS2017 paper
&gt;&gt; https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
&gt;&gt;   This balance does not achieve maximum diversity in end-positions of
&gt;&gt;   user paths: the same network throughput could be achieved by
&gt;&gt;   decreasing the use of high-bandwidth relays and increasing the use
&gt;&gt;   of lower-bandwidth relays in the guard position, instead of using
&gt;&gt;   these relays in a way that is just proportional to their bandwidth.
&gt;
&gt; When you say "bandwidth", it's not clear whether you mean consensus
&gt; weight (measured bandwidth) or advertised bandwidth (bandwidth
&gt; capacity). They're not the same.
&gt;
&gt; I'm going to assume consensus weight from now on.
&gt; Please fix all uses of bandwidth in the rest of the proposal.

Yes, we mean consensus weight :) I did s/bandwidth/consensus weight 
within the proposal

&gt;
&gt; &lt;skip&gt;
&gt;&gt; 2  Design
&gt;&gt;
&gt;&gt;   Correlation attacks require to control guard and exit nodes, but the
&gt;&gt;   scarcity of exit bandwidth is such that there is no real freedom in
&gt;&gt;   the way to use it.
&gt;&gt;
&gt;&gt; As a result, the Waterfilling proposal focuses
&gt;&gt;   on the guard position. However, it could be easily extended to the
&gt;&gt;   exit position if, someday, nodes in that position happen not to be
&gt;&gt;   exploited to their full capacity.
&gt;
&gt; No, exit bandwidth is only exploited to its full capacity on
&gt; high-bandwidth exits in the northern EU and North America.
&gt;

Well, I changed my wording here to avoid ambiguity. I was talking about 
relays flagged as Exits being used only in the exit position (Wee and 
Wed have the max value), which means that we cannot apply our method 
over those relays with the current state of the Tor network.

&gt; Select "Consensus Weight vs Bandwidth" on this map:
&gt; https://atlas.torproject.org/#map/flag:Exit
&gt; All the exits in all the purple countries are probably under-loaded.
&gt; And some exits elsewhere are under-loaded.
&gt; (That's why we let Exits be fallback directories.)
&gt;
&gt; So the network might actually benefit the most from a reallocation
&gt; of Exit bandwidth. But you'd have to use the advertised bandwidth
&gt; rather than Wee and Wed.
&gt;
&gt; What would it look like if we used waterfilling on the advertised
&gt; bandwidths of Exits?

The problem your mention is more a measurement problem that would not 
exist if the bwauths were perfect, within a perfect network. I believe 
that research such as Peerflow[0] is the right path to track down such 
issue, and this is compatible to our proposal.

[0] www.robgjansen.com/publications/peerflow-popets2017.pdf
&gt; Is there a way to do this that avoids gaming the system by
&gt; increasing advertised bandwidth?
&gt; Does the feedback loop with bandwidth authority measurements
&gt; mitigate this risk?
&gt;
&gt;&gt;   _Recall_: Tor currently computes bandwidth-weights in order to balance
&gt;&gt;   the bandwidth made available by nodes between the different path
&gt;&gt;   positions. In particular the Wgg weight indicates to each guard which
&gt;&gt;   proportion of its bandwidth should be used for entry traffic (the rest
&gt;&gt;   being normally devoted to the middle position).  This proportion is
&gt;&gt;   the same for all guards.
&gt;
&gt; Wgg indicates to *clients* how often they should select guards
&gt; in the guard position in *circuits*.
&gt;
&gt; It doesn't influence relays themselves, and it only indirectly
&gt; affects bandwidth.
&gt;
&gt; Please fix similar wording in the rest of the proposal.

Yep, this is basically what we tried to say. In fact, what I wrote was 
the description of the *consequence* of bandwidth-weights. I tried to 
re-word with your suggestion, thank you.

&gt; &lt;skip&gt;
&gt;&gt; Compute a "pivot" N and the weight Wgg_i assigned to
&gt;&gt;   relay_i in such a way that:
&gt;&gt;      (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1, N]
&gt;
&gt; subscripts in brackets, otherwise it's ambiguous:
&gt;
&gt;&gt; Wgg_(i+1) * BW_(i+1)
&gt;
&gt;&gt;      (b) Wgg_i == 1 forall i in [N+1, K]
&gt;&gt;      (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)
&gt;
&gt; These equations are under-specified, because they allow solutions with:
&gt; Wgg*G &gt; 0
&gt; Wgg_1 == 0
&gt; That is, no guard selections for high-bandwidth relays.
&gt;
&gt; From the descriptions, I think the missing condition is:
&gt; Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)

Yes, this can be added. But I think that this condition is redundant, 
since BW_i are sorted in decreasing order.

&gt;
&gt; Also, Wgg is provided by the Tor directory authorities based on
&gt; consensus weights from the bandwidth authorities.
&gt;
&gt; And what happens to any remainder in the calculations?

This is a very good question. Currently in my implementation, I ignore 
the remainder. This is negligible for large network but can be weird for 
small one (of a few relays).

A possible solution would be to use floating precision for consensus 
weights.

&gt; (This is most important for small, low bandwidth test networks.)
&gt;
&gt; For example, if:
&gt; G = 10
&gt; Wgg = 0.6
&gt; BW_i = 6, 2, 2
&gt; What are the final weighted bandwidths?
&gt; 2, 2, 2?

 From my note, my current implementation would crash if the water level 
reaches the smallest relay. Since it was prototype code, I didn't mind 
to think about it, and I let it that way.

I think that below a fixed size of the network, it does not make sense 
to use this proposal. In this example, the remainder accounts for a 
large part of the network capacity and would just be wasted.

&gt; &lt;skip&gt;
&gt;&gt;   As a result of this process, each guard ranked before the pivot N
&gt;&gt;   dedicates the same bandwidth to its guard role (equation (a)) -- we
&gt;&gt;   say that these guards achieve the water level, while each guard
&gt;&gt;   ranked after the pivot N dedicates its full bandwidth to the guard
&gt;&gt;   role (equation (b)) -- they are below the water level.  Equation (c)
&gt;&gt;   makes sure that the pivot and the water level are positioned in a
&gt;&gt;   way that guarantees that the total amount of bandwidth dedicated to
&gt;&gt;   the guard position is the same as before. In practice, the value of
&gt;&gt;   N can be efficiently computed by dichotomic search on Equation (c),
&gt;
&gt; Is this the same as a binary search?
&gt; Does it require any division?
&gt; Because division is slow on some Tor client architectures.

Yes, binary search. It does require division. However, waterfilling is 
designed to be executed in the authority side and called only when the 
consensus document is produced. Moreover, my tests indicates that the 
computation consumes a few ms.

&gt; &lt;skip&gt;
&gt;&gt; 2.1 Going further by tweaking original bandwidth-weights computation
&gt;&gt;
&gt;&gt;   As explained above, our Waterfilling equations are based on: 1) the
&gt;&gt;   Wgg weight computed by Tor 2) the assumption that the bandwidth
&gt;&gt;   available in exit is scarce, i.e., it is lower than the one
&gt;&gt;   available for guard (and middle) positions.
&gt;&gt;   The second point is satisfied most of the time in Tor, and we do take
&gt;&gt;   it for granted here.
&gt;&gt;   We, however, observe that Waterfilling could be made even more
&gt;&gt;   effective by applying a minor change in the way Tor computes the
&gt;&gt;   Wgg.  For the moment, Tor computes Wgg in such a way that the same
&gt;&gt;   bandwidth is allocated to the guard and middle positions. As a
&gt;&gt;   result, both positions are in excess compared to the exit position.
&gt;&gt;
&gt;&gt;   The water level could be decreased and, as a result, the uniformity
&gt;&gt;   of the guard selection process could be improved, by computing Wgg
&gt;&gt;   in a way that allocates the same bandwidth to the guard and exit
&gt;&gt;   positions, putting the middle position as the only position in
&gt;&gt;   excess.
&gt;
&gt; No, this would slow down Guards, and everything that isn't an exit 
&gt; circuit:
&gt; * directory fetches (3% of total bandwidth to guard position)
&gt; * onion services (rend is 4% of total bandwidth to guard and middle)
&gt; * HSDir is unweighted, and we don't know how much bandwidth it uses
&gt; * FallbackDir is unweighted, but mostly Guards, and small
&gt;

That's difficult to predict, I cannot be sure if it is better or worse 
for that type of traffic since internal circuits use at least 2 middle 
relays + the guard and sometimes, even not the guard. Hence we might 
also think that pushing a bit more to the middle position could be a 
good thing to do. Moreover, middle relays are unstable and often at the 
edge of the internet, while guard are stable and most of them within the 
core of the internet. Hence, a little more of them within the middle 
position *could* be a good thing, especially if it makes entry's 
selection probability more uniform. Anyway, I don't have any proof to 
assert this, as well that I don't have any proof to assert that this 
optimization could be bad. What I got, is that, for exit circuits, it 
does not slow down anything.

This optimization is not mandatory, and could also be enabled/disabled 
at will by the directory auths.

&gt;&gt;   We show in the performance section of the Waterfilling paper that
&gt;&gt;   scarcity on two positions does not reduce performance compared to
&gt;&gt;   vanilla bandwidth-weights.
&gt;
&gt; What about guards that have low consensus weight due to latency,
&gt; rather than available bandwidth?
&gt;
&gt; I think this could also cause you huge latency issues as you push more
&gt; bandwidth away from fast relays. I'm not sure if shadow captures this
&gt; accurately.
&gt;

If it happens that any bandwidth is pushed away from fast relays within 
the entry position and make the entry position slower, at average, then 
it will make the middle position faster (because it got that bandwidth 
pushed away). Since the latency of your traffic flow just care about the 
global latency of the circuit, this will not appear to be slower or 
faster, on average. This is exactly what we observe in Shadow, and yes, 
it captures latency accurately. At least, better than any other simulator.

&gt;&gt; 3  Security implications
&gt;&gt;
&gt;&gt;   An analysis of the security impact of the Waterfilling proposal is
&gt;&gt;   made in Section 6 of the Waterfilling paper. It studies the
&gt;&gt;   expectation of the number of relays that an adversary needs to
&gt;&gt;   control in order to mount a successful correlation attack at a given
&gt;&gt;   time, as well as an analysis of the evolution of the time until
&gt;&gt;   first path compromise, based on TorPS.
&gt;&gt;
&gt;&gt;   Given that the distribution produced by Waterfilling is closer to
&gt;&gt;   the uniform distribution, the use of Waterfilling increases the
&gt;&gt;   expectation of the number of relays that an adversary needs to
&gt;&gt;   compromise in order mount a successful correlation
&gt;&gt;   attack. Concretely, and based on real data from 2015, this
&gt;&gt;   expectation increases by approximately 150 relays.
&gt;
&gt; What percentage is this?

  ~ 25 %

&gt;
&gt; &lt;skip&gt;
&gt;
&gt; I'm sorry, I can't read this, there are build files everywhere.
&gt; I can't even find which files were changed.
&gt; Can you provide clean commits in a fork, based on the Tor master branch?
&gt;
&gt; Also, I think you will need a new consensus method for this change.
&gt; We don't use consensus parameters or torrc options to modify the
&gt; content of the consensus, we use consensus methods.
&gt;

Sorry about this. I've updated the repo with a proper commit history 
based on my fork. The code gives an idea about the easiness to plug-in 
this method to the current path selection.

&lt;skip&gt;
&gt; These are redundant, and could significantly expand the size of the
&gt; consensus, and consensus diffs. (Consensus weights are one of the
&gt; largest contributors to consensus diff size.)

True, each time the consensus weights are modified, those waterfilling 
weights need to be recomputed. It adds one line per guard, which is 
about 2~3% of the size of the full consensus. Is such a thing a problem?

&gt;
&gt; Why not calculate wmg on clients?
&gt; Why not calculate both wgg and wmg on clients?
&gt;

This is again a very good question: for such a critical feature (path 
selection), it is important that the directory auths have full power 
over the weight computation. If it happens that some change are needed, 
then the Tor network is updated in a straightforward way. This is not 
the case if those weights are computed in client code. In fact, I 
believe that one of the strength of this proposal is the oriented design 
towards the dirauths.

&gt; &lt;skip&gt;
&gt;
&gt; Unanswered questions:
&gt;
&gt; What about the feedback loop between this new allocation system
&gt; and the bandwidth authorities?
&gt;

I am sorry, I don't really understand why a feedback loop is needed. 
Measuring bandwidth and producing bandwidth-weights seems orthogonal to me.

&gt; Should bandwidth authority clients use the new system?
&gt;
&gt; How do we report on the new system?
&gt; How can we determine whether it is better for security in practice?
&gt; How can we determine if it is faster or slower in practice?
&gt; How can we work out if someone is trying to game the system?
&gt;
&gt; T
&gt;

I've added a section within the proposal for all upcoming questions.

Best,
Florentin

&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
    &lt;title&gt;Re: [tor-dev] Proposal Waterfilling&lt;/title&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hello,&lt;/p&gt;
    &lt;p&gt;Thank you for your helpful review, teor.&lt;/p&gt;
    &lt;p&gt; I updated the proposal from most of your comments (see attached
      .txt) and I respond inline to add some precisions relative to a
      few of your questions.&lt;/p&gt;
    &lt;p&gt;Btw, I've mirrored my private repo to github
      &lt;a class="moz-txt-link-freetext" \
href="https://github.com/frochet/Waterfilling"&gt;https://github.com/frochet/Waterfilling&lt;/a&gt;, \
such that you have the  proper commit history.&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 2018-01-11 14:47, teor wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
      &lt;div&gt;Hi Florentin,&lt;br&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;I have copied your proposal below, so I can respond to it
          inline.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;On 11 Jan 2018, at 21:00, Florentin Rochet &lt;&lt;a
            href="mailto:florentin.rochet@uclouvain.be"
            moz-do-not-send="true"&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt;
          wrote:&lt;br&gt;
          &lt;br&gt;
          &lt;skip&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;1  Overview&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;  The current Tor path selection algorithm is designed to
          satisfy two&lt;/div&gt;
        &lt;div&gt;  important properties:&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;  1) Each relay should handle a fraction of connections
          that is&lt;/div&gt;
        &lt;div&gt;  proportional to its bandwidth.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;  2) The nodes in each circuit position (entry-middle-exit)
          should&lt;/div&gt;
        &lt;div&gt;  be able to handle the same volume of connections.&lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;What about onion service circuits?&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;They consist of entry - middle - middle, and for the purposes
        of this&lt;/div&gt;
      &lt;div&gt;analysis, make up about 4% of the network.&lt;/div&gt;
      &lt;div&gt;(2% of traffic at rend points, going through 2 x 3-hop
        circuits.)&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;a
          href="https://metrics.torproject.org/hidserv-rend-relayed-cells.html"
          moz-do-not-send="true"&gt;https://metrics.torproject.org/hidserv-rend-relayed-cells.html&lt;/a&gt;&lt;/div&gt;
  &lt;br&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    That's a good point. Waterfilling uses the current bandwidth-weights
    logic as a basis and they doesn't account for onion service circuit,
    hence it also ignore this sort of traffic. Prop 265 tries to address
    that problem when producing the bandwidth-weights; Since our method
    achieves the same total consensus weight balance between position as
    the one produced by bandwidth-weights, Waterfilling would directly
    inherit Prop 265's properties if this proposal is merged. &lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;  Hence, in addition to select paths in a probabilistic
            manner, the&lt;/div&gt;
          &lt;div&gt;  path selection algorithm is responsible for balancing
            the network,&lt;/div&gt;
          &lt;div&gt;  that is, making sure that enough bandwidth is made
            available in all&lt;/div&gt;
          &lt;div&gt;  the positions.  The current balance of the network is
            decided by the&lt;/div&gt;
          &lt;div&gt;  bandwidth-weights (see dir-spec.txt section 3.8.3.
             or/and the&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;  Waterfilling PETS2017 paper&lt;/div&gt;
        &lt;div&gt;  &lt;a
href="https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf"
            moz-do-not-send="true"&gt;https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf&lt;/a&gt;).&lt;/div&gt;
  &lt;div&gt;  This balance does not achieve maximum diversity in
          end-positions of&lt;/div&gt;
        &lt;div&gt;  user paths: the same network throughput could be achieved
          by&lt;/div&gt;
        &lt;div&gt;  decreasing the use of high-bandwidth relays and
          increasing the use&lt;/div&gt;
        &lt;div&gt;  of lower-bandwidth relays in the guard position, instead
          of using&lt;/div&gt;
        &lt;div&gt;  these relays in a way that is just proportional to their
          bandwidth.&lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;When you say "bandwidth", it's not clear whether you mean
        consensus&lt;/div&gt;
      &lt;div&gt;weight (&lt;span style="background-color: rgba(255, 255, 255,
          0);"&gt;measured bandwidth) &lt;/span&gt;or advertised bandwidth
        (bandwidth&lt;/div&gt;
      &lt;div&gt;capacity). They're not the same.&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;I'm going to assume consensus weight from now on.&lt;/div&gt;
      &lt;div&gt;Please fix all uses of bandwidth in the rest of the proposal.&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Yes, we mean consensus weight :) I did s/bandwidth/consensus weight
    within the proposal&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;skip&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;2  Design&lt;/div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;  Correlation attacks require to control guard and exit
            nodes, but the&lt;/div&gt;
          &lt;div&gt;  scarcity of exit bandwidth is such that there is no
            real freedom in&lt;/div&gt;
          &lt;div&gt;  the way to use it.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;
        &lt;blockquote type="cite"&gt;&lt;br&gt;
        &lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;As a result, the Waterfilling proposal focuses&lt;/div&gt;
        &lt;div&gt;  on the guard position. However, it could be easily
          extended to the&lt;/div&gt;
        &lt;div&gt;  exit position if, someday, nodes in that position happen
          not to be&lt;/div&gt;
        &lt;div&gt;  exploited to their full capacity.&lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;No,
            exit bandwidth is only exploited to its full capacity on&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;high-bandwidth
            exits in the &lt;/span&gt;&lt;span style="background-color: rgba(255,
            255, 255, 0);"&gt;northern EU and North America.&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Well, I changed my wording here to avoid ambiguity. I was talking
    about relays flagged as Exits being used only in the exit position
    (Wee and Wed have the max value), which means that we cannot apply
    our method over those relays with the current state of the Tor
    network. &lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Select
            "Consensus Weight vs Bandwidth" on this map:&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;a href="https://atlas.torproject.org/#map/flag:Exit"
            style="background-color: rgba(255, 255, 255, 0);"
            moz-do-not-send="true"&gt;&lt;font \
color="#000000"&gt;https://atlas.torproject.org/#map/flag:Exit&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;  \
&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;All  the exits in all \
the purple countries are probably  under-loaded.&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;And
            some exits elsewhere are under-loaded.&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;(That's
            why we let Exits be fallback directories.)&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;So
            the network might actually benefit the most from a
            reallocation&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;of
            Exit bandwidth. But you'd have to use the advertised
            bandwidth&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;rather
            than Wee and Wed.&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;What
            would it look like if we used waterfilling on the advertised&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;bandwidths
            of Exits?&lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    The problem your mention is more a measurement problem that would
    not exist if the bwauths were perfect, within a perfect network. I
    believe that research such as Peerflow[0] is the right path to track
    down such issue, and this is compatible to our proposal.&lt;br&gt;
    &lt;br&gt;
    [0] &lt;cite class="_Rm"&gt;&lt;a class="moz-txt-link-abbreviated" \
href="http://www.robgjansen.com/publications/peerflow-popets2017.pdf"&gt;www.robgjansen.com/publications/peerflow-popets2017.pdf&lt;/a&gt;&lt;/cite&gt;
  &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Is
            there a way to do this that avoids gaming the system by&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;increasing
            advertised bandwidth?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Does
            the feedback loop with bandwidth authority measurements&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;mitigate
            this risk?&lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;  _Recall_: Tor currently computes bandwidth-weights in
          order to balance&lt;/div&gt;
        &lt;div&gt;  the bandwidth made available by nodes between the
          different path&lt;/div&gt;
        &lt;div&gt;  positions. In particular the Wgg weight indicates to each
          guard which&lt;/div&gt;
        &lt;div&gt;  proportion of its bandwidth should be used for entry
          traffic (the rest&lt;/div&gt;
        &lt;div&gt;  being normally devoted to the middle position).  This
          proportion is&lt;/div&gt;
        &lt;div&gt;  the same for all guards.&lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;Wgg indicates to *clients* how often they should select
        guards&lt;/div&gt;
      &lt;div&gt;in the guard position in *circuits*.&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;It doesn't influence relays themselves, and it only
        indirectly&lt;/div&gt;
      &lt;div&gt;affects bandwidth.&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;Please fix similar wording in the rest of the proposal.&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Yep, this is basically what we tried to say. In fact, what I wrote
    was the description of the *consequence* of bandwidth-weights. I
    tried to re-word with your suggestion, thank you.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;&lt;skip&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;Compute a "pivot" N and the weight Wgg_i assigned to&lt;/div&gt;
          &lt;div&gt;  relay_i in such a way that:&lt;/div&gt;
          &lt;div&gt;     &lt;/div&gt;
          &lt;div&gt;     (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1,
            N]&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;subscripts in brackets, otherwise it's ambiguous:&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span
              style="background-color: rgba(255, 255, 255, 0);"&gt;Wgg_(i+1)
              * BW_(i+1)&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;     (b) Wgg_i == 1 forall i in [N+1, K] &lt;/div&gt;
          &lt;div&gt;     (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is
            provided by Tor)&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;These equations are under-specified, because they allow
        solutions with:&lt;/div&gt;
      &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Wgg*G &gt;
          0&lt;/span&gt;&lt;/div&gt;
      &lt;div&gt;Wgg_1 == 0&lt;/div&gt;
      &lt;div&gt;That is, no guard selections for high-bandwidth relays.&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;From the descriptions, I think the missing condition is:&lt;/div&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;Wgg_N * BW_N &gt;= Wgg_(N+1) *
              BW_(N+1)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Yes, this can be added. But I think that this condition is
    redundant, since BW_i are sorted in decreasing order.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;Also, Wgg is provided by the Tor directory authorities based
        on&lt;/div&gt;
      &lt;div&gt;consensus weights from the bandwidth authorities.&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;And what happens to any remainder in the calculations?&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    This is a very good question. Currently in my implementation, I
    ignore the remainder. This is negligible for large network but can
    be weird for small one (of a few relays).&lt;br&gt;
    &lt;br&gt;
    A possible solution would be to use floating precision for consensus
    weights.  &lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;(This is most important for small, low bandwidth test
        networks.)&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;For example, if:&lt;/div&gt;
      &lt;div&gt;G = 10&lt;/div&gt;
      &lt;div&gt;Wgg = 0.6&lt;/div&gt;
      &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;BW_i
          = 6, 2, 2&lt;/span&gt;&lt;/div&gt;
      &lt;div&gt;What are the final weighted bandwidths?&lt;/div&gt;
      &lt;div&gt;2, 2, 2?&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    From my note, my current implementation would crash if the water
    level reaches the smallest relay. Since it was prototype code, I
    didn't mind to think about it, and I let it that way.&lt;br&gt;
    &lt;br&gt;
    I think that below a fixed size of the network, it does not make
    sense to use this proposal. In this example, the remainder accounts
    for a large part of the network capacity and would just be wasted.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;&lt;skip&gt;&lt;br&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;  As a result of this process, each guard ranked before
            the pivot N&lt;/div&gt;
          &lt;div&gt;  dedicates the same bandwidth to its guard role
            (equation (a)) -- we&lt;/div&gt;
          &lt;div&gt;  say that these guards achieve the water level, while
            each guard&lt;/div&gt;
          &lt;div&gt;  ranked after the pivot N dedicates its full bandwidth
            to the guard&lt;/div&gt;
          &lt;div&gt;  role (equation (b)) -- they are below the water level.
             Equation (c)&lt;/div&gt;
          &lt;div&gt;  makes sure that the pivot and the water level are
            positioned in a&lt;/div&gt;
          &lt;div&gt;  way that guarantees that the total amount of bandwidth
            dedicated to&lt;/div&gt;
          &lt;div&gt;  the guard position is the same as before. In practice,
            the value of&lt;/div&gt;
          &lt;div&gt;  N can be efficiently computed by dichotomic search on
            Equation (c),&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;Is this the same as a binary search?&lt;/div&gt;
      &lt;div&gt;Does it require any division?&lt;/div&gt;
      &lt;div&gt;Because division is slow on some Tor client architectures.&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Yes, binary search. It does require division. However, waterfilling
    is designed to be executed in the authority side and called only
    when the consensus document is produced. Moreover, my tests
    indicates that the computation consumes a few ms.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;&lt;skip&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;2.1 Going further by tweaking original bandwidth-weights
            computation&lt;/div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;  As explained above, our Waterfilling equations are
            based on: 1) the&lt;/div&gt;
          &lt;div&gt;  Wgg weight computed by Tor 2) the assumption that the
            bandwidth&lt;/div&gt;
          &lt;div&gt;  available in exit is scarce, i.e., it is lower than the
            one&lt;/div&gt;
          &lt;div&gt;  available for guard (and middle) positions.&lt;/div&gt;
          &lt;div&gt;  &lt;/div&gt;
          &lt;div&gt;  The second point is satisfied most of the time in Tor,
            and we do take&lt;/div&gt;
          &lt;div&gt;  it for granted here.&lt;/div&gt;
          &lt;div&gt;  &lt;/div&gt;
          &lt;div&gt;  We, however, observe that Waterfilling could be made
            even more&lt;/div&gt;
          &lt;div&gt;  effective by applying a minor change in the way Tor
            computes the&lt;/div&gt;
          &lt;div&gt;  Wgg.  For the moment, Tor computes Wgg in such a way
            that the same&lt;/div&gt;
          &lt;div&gt;  bandwidth is allocated to the guard and middle
            positions. As a&lt;/div&gt;
          &lt;div&gt;  result, both positions are in excess compared to the
            exit position.&lt;/div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;  The water level could be decreased and, as a result,
            the uniformity&lt;/div&gt;
          &lt;div&gt;  of the guard selection process could be improved, by
            computing Wgg&lt;/div&gt;
          &lt;div&gt;  in a way that allocates the same bandwidth to the guard
            and exit&lt;/div&gt;
          &lt;div&gt;  positions, putting the middle position as the only
            position in&lt;/div&gt;
          &lt;div&gt;  excess.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;No, this would slow down Guards, and everything that isn't an
        exit circuit:&lt;/div&gt;
      &lt;div&gt;* directory fetches (3% of total bandwidth to guard position)&lt;/div&gt;
      &lt;div&gt;* onion services (rend is 4% of total bandwidth to guard and
        middle)&lt;/div&gt;
      &lt;div&gt;* HSDir is unweighted, and we don't know how much bandwidth
        it uses&lt;/div&gt;
      &lt;div&gt;* FallbackDir is unweighted, but mostly Guards, and small&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    That's difficult to predict, I cannot be sure if it is better or
    worse for that type of traffic since internal circuits use at least
    2 middle relays + the guard and sometimes, even not the guard. Hence
    we might also think that pushing a bit more to the middle position
    could be a good thing to do. Moreover, middle relays are unstable
    and often at the edge of the internet, while guard are stable and
    most of them within the core of the internet. Hence, a little more
    of them within the middle position *could* be a good thing,
    especially if it makes entry's selection probability more uniform.
    Anyway, I don't have any proof to assert this, as well that I don't
    have any proof to assert that this optimization could be bad. What I
    got, is that, for exit circuits, it does not slow down anything.&lt;br&gt;
    &lt;br&gt;
    This optimization is not mandatory, and could also be
    enabled/disabled at will by the directory auths.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;  We show in the performance section of the Waterfilling
            paper that&lt;/div&gt;
          &lt;div&gt;  scarcity on two positions does not reduce performance
            compared to&lt;/div&gt;
          &lt;div&gt;  vanilla bandwidth-weights.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;What
            about guards that have low consensus weight due to latency,&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;rather
            than available bandwidth?&lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;I think this could also cause you huge latency issues as you
        push more&lt;/div&gt;
      &lt;div&gt;bandwidth away from fast relays. I'm not sure if shadow
        captures this&lt;/div&gt;
      &lt;div&gt;accurately.&lt;/div&gt;
      &lt;br&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    If it happens that any bandwidth is pushed away from fast relays
    within the entry position and make the entry position slower, at
    average, then it will make the middle position faster (because it
    got that bandwidth pushed away). Since the latency of your traffic
    flow just care about the global latency of the circuit, this will
    not appear to be slower or faster, on average. This is exactly what
    we observe in Shadow, and yes, it captures latency accurately. At
    least, better than any other simulator.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;blockquote type="cite"&gt;
        &lt;div&gt;
          &lt;div&gt;3  Security implications&lt;/div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;  An analysis of the security impact of the Waterfilling
            proposal is&lt;/div&gt;
          &lt;div&gt;  made in Section 6 of the Waterfilling paper. It studies
            the&lt;/div&gt;
          &lt;div&gt;  expectation of the number of relays that an adversary
            needs to&lt;/div&gt;
          &lt;div&gt;  control in order to mount a successful correlation
            attack at a given&lt;/div&gt;
          &lt;div&gt;  time, as well as an analysis of the evolution of the
            time until&lt;/div&gt;
          &lt;div&gt;  first path compromise, based on TorPS.&lt;/div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;  Given that the distribution produced by Waterfilling is
            closer to&lt;/div&gt;
          &lt;div&gt;  the uniform distribution, the use of Waterfilling
            increases the&lt;/div&gt;
          &lt;div&gt;  expectation of the number of relays that an adversary
            needs to&lt;/div&gt;
          &lt;div&gt;  compromise in order mount a successful correlation&lt;/div&gt;
          &lt;div&gt;  attack. Concretely, and based on real data from 2015,
            this&lt;/div&gt;
          &lt;div&gt;  expectation increases by approximately 150 relays.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/blockquote&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;What percentage is this?&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
     ~ 25 %&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;&lt;br&gt;
      &lt;skip&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;I'm sorry, I can't read this, there are build files
        everywhere.&lt;/div&gt;
      &lt;div&gt;I can't even find which files were changed.&lt;/div&gt;
      &lt;div&gt;Can you provide clean commits in a fork, based on the Tor
        master branch?&lt;/div&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;Also, I think you will need a new consensus method for this
        change.&lt;/div&gt;
      &lt;div&gt;We don't use consensus parameters or torrc options to modify
        the&lt;/div&gt;
      &lt;div&gt;content of the consensus, we use consensus methods.&lt;/div&gt;
      &lt;br&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Sorry about this. I've updated the repo with a proper commit history
    based on my fork. The code gives an idea about the easiness to
    plug-in this method to the current path selection.&lt;br&gt;
    &lt;br&gt;
    &lt;skip&gt;&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;These
      are redundant, and could significantly expand the size of the
      &lt;div&gt;consensus, and consensus diffs. (Consensus weights are one of
        the&lt;/div&gt;
      &lt;div&gt;largest contributors to consensus diff size.)&lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    True, each time the consensus weights are modified, those
    waterfilling weights need to be recomputed. It adds one line per
    guard, which is about 2~3% of the size of the full consensus. Is
    such a thing a problem?&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div&gt;Why not calculate wmg on clients?&lt;/div&gt;
      &lt;div&gt;Why not calculate both wgg and wmg on clients?&lt;/div&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    This is again a very good question: for such a critical feature
    (path selection), it is important that the directory auths have full
    power over the weight computation. If it happens that some change
    are needed, then the Tor network is updated in a straightforward
    way. This is not the case if those weights are computed in client
    code. In fact, I believe that one of the strength of this proposal
    is the oriented design towards the dirauths.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;&lt;skip&gt;&lt;/div&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;Unanswered questions:&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;What
            about the feedback loop between this new allocation system&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;and
            the bandwidth authorities?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    I am sorry, I don't really understand why a feedback loop is needed.
    Measuring bandwidth and producing bandwidth-weights seems orthogonal
    to me.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Should
            bandwidth authority clients use the new system?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;How
            do we report on the new system?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;How
            can we determine whether it is better for security in
            practice?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;How
            can we determine if it is faster or slower in practice?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;How
            can we work out if someone is trying to game the system?&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;T&lt;/span&gt;&lt;/div&gt;
        &lt;div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    I've added a section within the proposal for all upcoming questions.&lt;br&gt;
    &lt;br&gt;
    Best,&lt;br&gt;
    Florentin&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:8D5F3E15-CB26-4DFC-A5C1-456049241C38@gmail.com"&gt;
      &lt;div&gt;
        &lt;div&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


["waterfilling-balancing-with-max-diversity.txt" (text/plain)]

Filename: waterfilling-balancing-with-max-diversity.txt
Title: Waterfilling
Authors: Florentin Rochet and Olivier Pereira
Reviewed by (thanks!): George Kadianakis, Edouard Cuvelier, teor
Created:  Jan 2018
Status: Open                                                          

0  Motivation

  An adversary who monitors the entry and exit of a Tor communication
  path is usually able to de-anonymize that communication by traffic
  correlation. In order to limit the number of users that a single
  corrupted entry node could attack, the users keep using the same entry
  node, also called a "guard" for long periods of time: since guard
  rotation is limited, the users are less likely to use a corrupted
  guard at some point in their communication. In the current design, the
  amount of traffic that a given guard sees is directly proportional to
  the bandwidth that is provided by this guard. As a result, the few
  guards offering the highest amount of bandwidth become very attractive
  targets for an attacker.

  Waterfilling is a new path selection mechanism designed to make the
  guard selection even more efficient: if an adversary wants to profile
  more users, she has to increase her bandwidth _and_ increase the
  number of relays injected/hacked into the network.

  Waterfilling mitigates the risks of end-to-end traffic correlation
  by balancing the load as evenly as possible on endpoints of user
  circuits. More precisely, waterfilling modifies the probability
  distribution according to which users select guard nodes my making
  that distribution closer to the uniform distribution, without
  impacting the performance of the Tor network.

1  Overview

  The current Tor path selection algorithm is designed to satisfy two
  important properties:

  1) Each relay should handle a fraction of connections that is
  proportional to its consensus weight.

  2) The nodes in each circuit position (entry-middle-exit) should
  be able to handle the same volume of connections.

  Hence, in addition to select paths in a probabilistic manner, the
  path selection algorithm is responsible for balancing the network,
  that is, making sure that enough consensus weight is made available in
  all the positions.  The current balance of the network is decided by
  the bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
  Waterfilling PETS2017 paper
  https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
  This balance does not achieve maximum diversity in end-positions of
  user paths: the same network throughput could be achieved by
  decreasing the use of high consensus weight relays and increasing the
  use of lower consensus weight relays in the guard position, instead of
  using these relays in a way that is just proportional to their
  consensus weight. Such a change would make top relays less attractive
  targets to adversaries, and would increase the number of relays that
  need to be
  compromised in order to obtain a given probability of mounting a
  successful correlation attack.

  Our proposal only modifies the balance between the relays in a given
  position in the network. It does not modify, and actually takes as
  its starting point, any allocation mechanism used to decide the
  consensus weight that is allocated in guard, middle and exit
  positions.  As a consequence, the changes that we propose are quite
  minimal in terms of code base and performance and, in particular, they
  do not interfere with prop 265.

2  Design

  Correlation attacks require to control guard and exit nodes, but the
  scarcity of exit consensus weight is such that there is no real
  freedom in the way to use it.  As a result, the Waterfilling proposal
  focuses on the guard position. However, it could be easily extended to
  the exit position if, someday, nodes in that position happen not to be
  exploited to their full capacity at the exit position. Indeed, relays
  flagged as Exits are currently using all their resource at the exit
  position due to bandwidth-weights Wee and Wed being maximum.

  _Recall_: Tor currently computes bandwidth-weights in order to balance
  the consensus weight made available by nodes between the different
  path positions. In particular the Wgg weight indicates to *clients* how
  often they should select guards in the guard position in *circuits*.
  Consequently, Wgg can be seen as the proportion of guards consensus
  weight which should be used for entry traffic (the rest being normally
  devoted to the middle position). This proportion is the same for all
  guards.
  
  _Proposal_: We use Tor's bandwidth-weight Wgg as the basis of
  Waterfilling. This Wgg, combined with the total consensus weight made
  available by all guards, defines the total consensus weight made
  available in the guard position. In order to allocate this bandwidth,
  the Waterfilling proposal proceeds by "raising the water level": it
  requires all guard relays to devote to their guard role all the
  consensus weight that they have, until a so-called "water level" is
  reached.  This water level is positioned in such a way that the total
  consensus weight provided in the guard position is exactly the same as
  the one that is currently made available in the Tor network. 

  As a result, guards offering a small amount of consensus weight, below
  the water level, will fully allocate their consensus weight to guard
  traffic, while all the guards offering a consensus weight that is
  higher than the water level will limit their guard consensus weight to
  the water level, and allocate the rest to the middle traffic (assuming
  that they are not exit flagged as Exits). 

  Concretely, we compute the weight Wgg_i for each guard-flagged relay_i
  as follows:

  1) Sort all the guard relays by consensus weight in decreasing order
  (i.e. the i-th guard has more consensus weight than the i+1-th).

     (i) BW_i &gt;= BW_{i+1}

  2) Let K be the total number of guards, BW_i be the consensus weight
  of the i-th ranked guard and G be the total consensus weight that
  guards make available.  Compute a "pivot" N and the weight Wgg_i
  assigned to relay_i in such a way that:
     
     (a) Wgg_i * BW_i == Wgg_{i+1} * BW_{i+1} forall i in [1, N]
     (b) Wgg_i == 1 forall i in [N+1, K] 
     (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)

  As a result of this process, each guard ranked before the pivot N
  dedicates the same consensus weight to its guard role (equation (a))
  -- we say that these guards achieve the water level, while each guard
  ranked after the pivot N dedicates its full consensus weight to the
  guard role (equation (b)) -- they are below the water level.  Equation
  (c) makes sure that the pivot and the water level are positioned in a
  way that guarantees that the total amount of consensus weight
  dedicated to the guard position is the same as before. In practice,
  the value of N can be efficiently computed by binary search on
  Equation (c), and the value of the Wgg_i then immediately follows from
  Equations (a) and (b). 

  Once Wgg_i is computed, we can compute Wmg_i = 1 - Wgg_i, which
  allocates to the middle position all the consensus weight that is left
  above the water level in the first N relays.  The bigger the node is,
  the more it contributes to the middle position compared to the others.
  A visual representation of this process is available in Figure 1 in
  the Waterfilling paper.

2.1 Going further by tweaking original bandwidth-weights computation

  As explained above, our Waterfilling equations are based on: 1) the
  Wgg weight computed by Tor 2) the assumption that the consensus weight
  available in exit is scarce, i.e., it is lower than the one available
  for guard (and middle) positions.
  
  The second point is satisfied most of the time in Tor, and we do take
  it for granted here.
  
  We, however, observe that Waterfilling could be made even more
  effective by applying a minor change in the way Tor computes the
  Wgg.  For the moment, Tor computes Wgg in such a way that the same
  total consensus weight is allocated to the guard and middle positions.
  As a result, both positions are in excess compared to the exit
  position.

  The water level could be decreased and, as a result, the uniformity
  of the guard selection process could be improved, by computing Wgg
  in a way that allocates the same total consensus weight to the guard
  and exit positions, putting the middle position as the only position
  in excess.
  
  We show in the performance section of the Waterfilling paper that
  scarcity on two positions does not reduce performance compared to
  vanilla bandwidth-weights.

3  Security implications

  An analysis of the security impact of the Waterfilling proposal is
  made in Section 6 of the Waterfilling paper. It studies the
  expectation of the number of relays that an adversary needs to
  control in order to mount a successful correlation attack at a given
  time, as well as an analysis of the evolution of the time until
  first path compromise, based on TorPS.

  Given that the distribution produced by Waterfilling is closer to
  the uniform distribution, the use of Waterfilling increases the
  expectation of the number of relays that an adversary needs to
  compromise in order mount a successful correlation
  attack. Concretely, and based on real data from 2015, this
  expectation increases by approximately 150 relays (about 25%).

  Waterfilling also considerably decreases the benefits of
  compromising a top Tor relay: based on the same data, we computed
  that around 35 relays need to be compromised in order to obtain the
  benefits that would be obtained today by compromising Tor's top
  guard. On the flip side, the total consensus weight that those 35
  relays would need to provide is 38% smaller than the one of the top
  relay, if they are designed to offer a consensus weight that is just
  at the water level. Moreover, these 35 relays used to equalize the
  impact of the current top guard is the lower bound. In practice, the
  adversary needs to predict the water level of all upcoming consensus
  to stay below it and not to waste consensus weight. A safe manner to
  achieve this is to split the resource into way more than 35 relays. At
  some point, the adversary would struggle between the need to stay off
  the radar with many machines and the waste of consensus weight if she
  has not enough of them.

4  Performance implications

  This proposal aims at improving the anonymity provided by the Tor
  network without impacting its performance negatively.

  From a theoretical viewpoint, since Waterfilling does not change the
  amount of consensus weight dedicated to the guard, middle and exit
  position, we should not observe any difference compared to vanilla
  Tor. The intuition is that, even if the top consensus weight relays
  that are currently affected to the guard position are less likely to
  be selected as guards, they become more likely to be selected as
  middle nodes, hence maintaining their contribution to fast Tor
  circuits.

  We confirmed this intuition by running Shadow experiments with a Tor
  implementation of Waterfilling. Our results give the same CDF for
  time-to-fist-byte (ttfb) and time-to-last-byte (ttlb) metrics under
  different network loads. We have run two classes of experiments, one
  in a low network load and one with an heavy loaded network
  proportionnaly close to the throughput of the real Tor nework.  Of
  course, these results depend on the accuracy with which the behavior
  of current relays is measured and reported. 

  However, an interesting feature of the Waterfilling proposal is that
  it is fully compatible with vanilla Tor: some Tor clients may run
  the current Tor path selection algorithm, and others may run
  Waterfilling without impacting the performance. This makes an
  experimental deployment fairly easy to operate at a small or medium
  scale, while maintaining the possibility to fall back to vanilla Tor
  if an unexpected behavior is detected. 

5 Implementation

5.1 Overview

  Most of the implementation of Waterfilling is on the directory
  authority side: only a few changes are needed on the client side and
  no change is needed on the relay side. A prototype implementation is
  available at https://github.com/frochet/waterfilling. Here is how it
  works:

  Every hour, directory authorities vote on a new consensus. Once the
  votes are collected, the dirauths produce a deterministic network
  consensus document containing information about each relay,
  including the waterfilling bandwidth-weights produced from the
  equations described above. e.g.:
  
  ...(more relays)
  r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
  51.254.112.52 9111 9112 
  m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
  s Fast Guard HSDir Running Stable V2Dir Valid
  v Tor 0.2.6.7
  w Bandwidth=10200
  wfbw wgg=8029 wmg=1971.
  r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
  9111 9112 
  m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
  s Authority Fast Guard HSDir Running Stable V2Dir Valid
  v Tor 0.2.6.7
  w Bandwidth=1890
  wfbw wgg=10000 wmg=0.
  ...(more relays)

  In this example, we see two relays having the Guard flag and their new
  waterfilling bandwidth-weights allocation given on the lines starting
  with wfbw. The first relay has a high consensus weight (Bandwidth),
  above the water level (was around 8k for this consensus), and shares
  that consensus weight between the guard and the middle positions, as
  indicated by the wgg and wmg variables.  The second relay has a lower
  consensus weight, below the water level, and fully uses it for guard
  traffic.

  If no wgg or wmg weights are specified for a given relay, the
  vanilla bandwidth-weights are used, as provided at the bottom of the
  consensus.

  Eventually, a modification of the client code is needed in order to
  parse and use the waterfilling weights. The changes are
  straightforward with a few lines of codes in existing functions.

6 Deployment discussion

  Deploying a new feature that has a central role in security and
  performance of the network can be difficult due to the distributed
  nature of the network. Hopefully, this proposal does not suffer from
  such issue. We give here some arguments supporting this claim.

  - About performance: The balancing equations designed by the current
    path selection are kept untouched. Hence mixing a set of clients
    using Waterfilling in the network and another set of clients using
    the vanilla path selection is not a problem: they will both
    enforce the same allocation of total consensus weight between the
    different path positions. We confirmed this with experiments in
    Shadow.

  - About user security: A co-existence of path selection algorithms
    may be a threat to anonymity if the transition is not handled
    carefully. A set of compromised middle relays may distinguish
    users with Waterfilling configuration from others. This is a
    problem if the anonymity set is not large enough. Hopefully,
    "large enough" can be ensured with a consensus parameter that only
    enables this feature when enough users have updated their client.

7 Note

Some important questions raised on the mailing list:

- How can we determine whether it is better for security in practice?

  Whether this proposal is indeed better for security can be
  summarized with the following fact: if the adversary wants to profile
  more users against a Tor network using this Proposal, she has to
  increase her consensus weight _and_ increase the number of IPs she
  uses in the network. And, this is not true for the current path
  selection (she has to increase bandwidth).

  Moreover, the paper linked to this proposal offers a detailed security
  analysis.

- How can we determine if it is faster or slower in practice?

  Well, if Shadow missed capturing some important performance impact
  within our simulations, then looking at the output of
  metrics.torproject.org after such proposal is deployed, as well as
  asking relay operators if they notice some burden is probably the best
  we can do.
 
- How can we work out if someone is trying to game the system?

  The optimal strategy for an adversary is explained in the paper. It
  might be possible to detect an adversary applying the optimal
  strategy, since we know it but it was out of the scope of the paper.
  
  E.g., a bunch of new relays appearing with a consensus weight at the
  water level could be considered suspicious.

7.1 Unanswered questions

  - What about the feedback loop between this new allocation system
  and the bandwidth authorities?

  - Should bandwidth authority clients use the new system?

  - How do we report on the new system?

                                                                       

[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180115022652</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-15 02:26:52-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 13 Jan 2018, at 01:17, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; Thank you for your helpful review, teor.
&gt; 
&gt; I updated the proposal from most of your comments (see attached .txt) and I respond \
&gt; inline to add some precisions relative to a few of your questions. 
&gt; Btw, I've mirrored my private repo to github \
&gt; https://github.com/frochet/Waterfilling, such that you have the proper commit \
&gt; history.

Thanks!

I replied below in context.

&gt; On 2018-01-11 14:47, teor wrote:
&gt; &gt; Hi Florentin,
&gt; &gt; 
&gt; &gt; I have copied your proposal below, so I can respond to it inline.
&gt; &gt; ...
&gt; 
&gt; 
&gt; &gt; &gt; Hence, in addition to select paths in a probabilistic manner, the
&gt; &gt; &gt; path selection algorithm is responsible for balancing the network,
&gt; &gt; &gt; that is, making sure that enough bandwidth is made available in all
&gt; &gt; &gt; the positions.  The current balance of the network is decided by the
&gt; &gt; &gt; bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
&gt; &gt; &gt; Waterfilling PETS2017 paper
&gt; &gt; &gt; https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
&gt; &gt; &gt; This balance does not achieve maximum diversity in end-positions of
&gt; &gt; &gt; user paths: the same network throughput could be achieved by
&gt; &gt; &gt; decreasing the use of high-bandwidth relays and increasing the use
&gt; &gt; &gt; of lower-bandwidth relays in the guard position, instead of using
&gt; &gt; &gt; these relays in a way that is just proportional to their bandwidth.
&gt; &gt; 
&gt; &gt; When you say "bandwidth", it's not clear whether you mean consensus
&gt; &gt; weight (measured bandwidth) or advertised bandwidth (bandwidth
&gt; &gt; capacity). They're not the same.
&gt; &gt; 
&gt; &gt; I'm going to assume consensus weight from now on.
&gt; &gt; Please fix all uses of bandwidth in the rest of the proposal.
&gt; 
&gt; Yes, we mean consensus weight :) I did s/bandwidth/consensus weight within the \
&gt; proposal

In some cases, you seem to expect the consensus weight to be the available
bandwidth (or advertised bandwidth) of the relay. I'll try to find them,
but you should check as well.

&gt; &gt; ...
&gt; 
&gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; Compute a "pivot" N and the weight Wgg_i assigned to
&gt; &gt; &gt; relay_i in such a way that:
&gt; &gt; &gt; 
&gt; &gt; &gt; (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1, N]
&gt; &gt; 
&gt; &gt; subscripts in brackets, otherwise it's ambiguous:
&gt; &gt; 
&gt; &gt; &gt; Wgg_(i+1) * BW_(i+1)
&gt; &gt; 
&gt; &gt; &gt; (b) Wgg_i == 1 forall i in [N+1, K]
&gt; &gt; &gt; (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)
&gt; &gt; 
&gt; &gt; These equations are under-specified, because they allow solutions with:
&gt; &gt; Wgg*G &gt; 0
&gt; &gt; Wgg_1 == 0
&gt; &gt; That is, no guard selections for high-bandwidth relays.

This is a really important point:

Your equations allow the largest guard to have zero guard weighting and zero
guard bandwidth. They should require it to have at least as much guard
bandwidth as the water level.

&gt; &gt; From the descriptions, I think the missing condition is:
&gt; &gt; Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)
&gt; 
&gt; Yes, this can be added. But I think that this condition is redundant, since BW_i \
&gt; are sorted in decreasing order.

No, it's not, because it's a condition on the *guard-weighted* consensus
weights. The sorting is a condition on the *original* consensus weights.

It might help to provide a procedural algorithm for assigning
bandwidth, as well as equations. It would resolve some ambiguity.

&gt; &gt; Also, Wgg is provided by the Tor directory authorities based on
&gt; &gt; consensus weights from the bandwidth authorities.
&gt; &gt; 
&gt; &gt; And what happens to any remainder in the calculations?
&gt; 
&gt; This is a very good question. Currently in my implementation, I ignore the \
&gt; remainder. This is negligible for large network but can be weird for small one (of \
&gt; a few relays). 
&gt; A possible solution would be to use floating precision for consensus weights.

No, this is not a good solution. It simply passes the issue to the
floating-point implementation. And the result will depend on the
libraries, processor, and compiler.

For this reason, we work very hard to use as little floating point as
possible in Tor. We really don't want to use it when generating the
consensus, because mismatches will break consensus.

Instead, I suggest you apply this missing condition:

&gt; &gt; From the descriptions, I think the missing condition is:
&gt; &gt; Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)

And then allocate the remainder to the highest-bandwidth relays, perhaps
in proportion to their consensus weight. Please allocate bandwidth to
equally weighted relays using a stable sort that is the same on all
directory authorities. (The existing relay sorting code might already do
this for you.)

&gt; &gt; (This is most important for small, low bandwidth test networks.)
&gt; &gt; 
&gt; &gt; For example, if:
&gt; &gt; G = 10
&gt; &gt; Wgg = 0.6
&gt; &gt; BW_i = 6, 2, 2
&gt; &gt; What are the final weighted bandwidths?
&gt; &gt; 2, 2, 2?
&gt; 
&gt; From my note, my current implementation would crash if the water level reaches the \
&gt; smallest relay. Since it was prototype code, I didn't mind to think about it, and I \
&gt; let it that way.

We would need a solution for this crash as part of the proposal.

&gt; I think that below a fixed size of the network, it does not make sense to use this \
&gt; proposal. In this example, the remainder accounts for a large part of the network \
&gt; capacity and would just be wasted.

We will test this in small networks, and it must work.
I suggest you allocate the remainder to high-bandwidth relays.

&gt; &gt; ...
&gt; 
&gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; 2.1 Going further by tweaking original bandwidth-weights computation
&gt; &gt; &gt; 
&gt; &gt; &gt; As explained above, our Waterfilling equations are based on: 1) the
&gt; &gt; &gt; Wgg weight computed by Tor 2) the assumption that the bandwidth
&gt; &gt; &gt; available in exit is scarce, i.e., it is lower than the one
&gt; &gt; &gt; available for guard (and middle) positions.
&gt; &gt; &gt; 
&gt; &gt; &gt; The second point is satisfied most of the time in Tor, and we do take
&gt; &gt; &gt; it for granted here.
&gt; &gt; &gt; 
&gt; &gt; &gt; We, however, observe that Waterfilling could be made even more
&gt; &gt; &gt; effective by applying a minor change in the way Tor computes the
&gt; &gt; &gt; Wgg.  For the moment, Tor computes Wgg in such a way that the same
&gt; &gt; &gt; bandwidth is allocated to the guard and middle positions. As a
&gt; &gt; &gt; result, both positions are in excess compared to the exit position.
&gt; &gt; &gt; 
&gt; &gt; &gt; The water level could be decreased and, as a result, the uniformity
&gt; &gt; &gt; of the guard selection process could be improved, by computing Wgg
&gt; &gt; &gt; in a way that allocates the same bandwidth to the guard and exit
&gt; &gt; &gt; positions, putting the middle position as the only position in
&gt; &gt; &gt; excess.
&gt; &gt; 
&gt; &gt; No, this would slow down Guards, and everything that isn't an exit circuit:
&gt; &gt; * directory fetches (3% of total bandwidth to guard position)

If we reduce guard weights on large relays, does this slow down Tor bootstrap?
(Because smaller relays with higher latency get more micro descriptor requests.)

Does it slow down directory fetches in general?

&gt; &gt; * onion services (rend is 4% of total bandwidth to guard and middle)
&gt; &gt; * HSDir is unweighted, and we don't know how much bandwidth it uses
&gt; &gt; * FallbackDir is unweighted, but mostly Guards, and small
&gt; &gt; 
&gt; 
&gt; That's difficult to predict, I cannot be sure if it is better or worse for that \
&gt; type of traffic since internal circuits use at least 2 middle relays + the guard \
&gt; and sometimes, even not the guard. Hence we might also think that pushing a bit \
&gt; more to the middle position could be a good thing to do. Moreover, middle relays \
&gt; are unstable and often at the edge of the internet, while guard are stable and most \
&gt; of them within the core of the internet. Hence, a little more of them within the \
&gt; middle position *could* be a good thing, especially if it makes entry's selection \
&gt; probability more uniform. Anyway, I don't have any proof to assert this, as well \
&gt; that I don't have any proof to assert that this optimization could be bad. What I \
&gt; got, is that, for exit circuits, it does not slow down anything. 
&gt; This optimization is not mandatory, and could also be enabled/disabled at will by \
&gt; the directory auths. 
&gt; &gt; &gt; We show in the performance section of the Waterfilling paper that
&gt; &gt; &gt; scarcity on two positions does not reduce performance compared to
&gt; &gt; &gt; vanilla bandwidth-weights.
&gt; &gt; 
&gt; &gt; What about guards that have low consensus weight due to latency,
&gt; &gt; rather than available bandwidth?
&gt; &gt; 
&gt; &gt; I think this could also cause you huge latency issues as you push more
&gt; &gt; bandwidth away from fast relays. I'm not sure if shadow captures this
&gt; &gt; accurately.
&gt; &gt; 
&gt; 
&gt; If it happens that any bandwidth is pushed away from fast relays within the entry \
&gt; position and make the entry position slower, at average, then it will make the \
&gt; middle position faster (because it got that bandwidth pushed away). Since the \
&gt; latency of your traffic flow just care about the global latency of the circuit, \
&gt; this will not appear to be slower or faster, on average. This is exactly what we \
&gt; observe in Shadow, and yes, it captures latency accurately. At least, better than \
&gt; any other simulator.

I am also concerned that this proposal may overload small guards and
underload large guards. Because it does not consider advertised
bandwidth.

For example, some guards are weighted at 10x their advertised bandwidth.
Others are weighted at 0.1x their advertised bandwidth.

There is also a geographical bias to guard bandwidth:
https://atlas.torproject.org/#map_consensus_weight_to_bandwidth/flag:Guard

Does shadow capture the consensus weight to advertised bandwidth ratio?
(That is, the actual load on the relay.)
Or the advertised bandwidth?
(The approximate actual capacity of the relay.)

I think this proposal will actually be good for the network, because some
large consensus weight relays are overloaded. And giving them more middle
weight will reduce their overall load. (Middles get less load than guards.)

But I would like others to think through this, too.

&gt; &gt; &gt; 3  Security implications
&gt; &gt; &gt; 
&gt; &gt; &gt; An analysis of the security impact of the Waterfilling proposal is
&gt; &gt; &gt; made in Section 6 of the Waterfilling paper. It studies the
&gt; &gt; &gt; expectation of the number of relays that an adversary needs to
&gt; &gt; &gt; control in order to mount a successful correlation attack at a given
&gt; &gt; &gt; time, as well as an analysis of the evolution of the time until
&gt; &gt; &gt; first path compromise, based on TorPS.
&gt; &gt; &gt; 
&gt; &gt; &gt; Given that the distribution produced by Waterfilling is closer to
&gt; &gt; &gt; the uniform distribution, the use of Waterfilling increases the
&gt; &gt; &gt; expectation of the number of relays that an adversary needs to
&gt; &gt; &gt; compromise in order mount a successful correlation
&gt; &gt; &gt; attack. Concretely, and based on real data from 2015, this
&gt; &gt; &gt; expectation increases by approximately 150 relays.
&gt; &gt; 
&gt; &gt; What percentage is this?
&gt; 
&gt; ~ 25 %
&gt; 
&gt; &gt; 
&gt; &gt; &lt;skip&gt;
&gt; &gt; 
&gt; &gt; I'm sorry, I can't read this, there are build files everywhere.
&gt; &gt; I can't even find which files were changed.
&gt; &gt; Can you provide clean commits in a fork, based on the Tor master branch?
&gt; &gt; 
&gt; &gt; Also, I think you will need a new consensus method for this change.
&gt; &gt; We don't use consensus parameters or torrc options to modify the
&gt; &gt; content of the consensus, we use consensus methods.
&gt; &gt; 
&gt; 
&gt; Sorry about this. I've updated the repo with a proper commit history based on my \
&gt; fork. The code gives an idea about the easiness to plug-in this method to the \
&gt; current path selection.

I tried reviewing this code, but it's hard.
The changes are scattered through a lot of different commits.

Usually, we group changes into commits by topic or function area.
And we use the commit title to say what the commit changes.

Then, when we fix a bug, we use "git commit --fixup" so we can see
when the bug was fixed.

For example, I have to look at 20 commits to find out if this bug in
the array size for commit e81a55ea has been fixed:

+   if (exits) {
+     if (search_pivot_and_compute_wfbw_weights_(exits, bwweights-&gt;wee, 0,
+           guards-&gt;num_used) &lt; 0)

This function is also missing a case for guardsexits.

&gt; &lt;skip&gt;

You skipped this, but it's really important for the implementation:

&gt; &gt; On 12 Jan 2018, at 00:47, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; Also, I think you will need a new consensus method for this change.
&gt; &gt; We don't use consensus parameters or torrc options to modify the
&gt; &gt; content of the consensus, we use consensus methods.

Someone who understands consensus methods will need to revise your
proposal and code before it is merged.

&gt; &gt; &gt; Here is how it
&gt; &gt; &gt; works:
&gt; &gt; &gt; 
&gt; &gt; &gt; Every hour, directory authorities vote on a new consensus. Once the
&gt; &gt; &gt; votes are collected, the dirauths produce a deterministic network
&gt; &gt; &gt; consensus document containing information about each relay,
&gt; &gt; &gt; including the waterfilling bandwidth-weights produced from the
&gt; &gt; &gt; equations described above. e.g.:
&gt; &gt; &gt; 
&gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
&gt; &gt; &gt; 51.254.112.52 9111 9112
&gt; &gt; &gt; m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
&gt; &gt; &gt; s Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; w Bandwidth=10200
&gt; &gt; &gt; wfbw wgg=8029 wmg=1971.
&gt; &gt; &gt; r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
&gt; &gt; &gt; 9111 9112
&gt; &gt; &gt; m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
&gt; &gt; &gt; s Authority Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; w Bandwidth=1890
&gt; &gt; &gt; wfbw wgg=10000 wmg=0.
&gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; 
&gt; &gt; &gt; In this example, we see two relays having the Guard flag and their
&gt; &gt; &gt; new waterfilling bandwidth allocation given on the lines starting
&gt; &gt; &gt; with wfbw.
&gt; &gt; 
&gt; &gt; These are redundant, and could significantly expand the size of the
&gt; &gt; consensus, and consensus diffs. (Consensus weights are one of the
&gt; &gt; largest contributors to consensus diff size.)
&gt; 
&gt; True, each time the consensus weights are modified, those waterfilling weights need \
&gt; to be recomputed. It adds one line per guard, which is about 2~3% of the size of \
&gt; the full consensus. Is such a thing a problem?

Changing bandwidths in each consensus makes consensus diffs *much* bigger.

See this proposal for details and an analysis:
https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt

The same issue applies to any bandwidth figures.
Would it be sufficient to publish a small ratio instead?

For example, you could publish lines like:

w Bandwidth=100000 wfratio=1

or

w Bandwidth=100000 wfratio=3

And have clients calculate wfbw as follows:

wfbw = Bandwidth * 2^-wfratio

This would be much smaller, much more compressible, and would also solve
some of your other issues around remainders, and also equal-weight guards
and stable sorts.

You would need to use equations something like this:

Compute a "pivot" N and a weight ratio Wggr_i assigned to
relay_i in such a way that:

Each high-bandwidth guard has a guard consensus weight within a factor of 2 of water \
level:

     (a) 2 * 2^-Wggr_(N+1) * BW_(N+1) &gt; 2^-Wggr_i * BW_i &gt;= 2^-Wggr_(N+1) * BW_(N+1) \
forall i in [1, N]

Each low-bandwidth guard is under the water level: (unchanged)

     (b) Wggr_i == 0 forall i in [N+1, K]

The total guard weight is within a ratio of the desired guard weight:

     (c) 2 * Wgg * G &gt; sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G

The upper bound on (c) is actually a worst-case for a single-relay network.
We could get closer to Wgg * G by finding the lowest Wggr for the largest
relay that satisfies:

      (c.1) sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G

This might make the largest relay an exception to (a).
I'm not sure if we'll need this optimisation or not.

&gt; &gt; Why not calculate wmg on clients?
&gt; &gt; Why not calculate both wgg and wmg on clients?
&gt; &gt; 
&gt; 
&gt; This is again a very good question: for such a critical feature (path selection), \
&gt; it is important that the directory auths have full power over the weight \
&gt; computation. If it happens that some change are needed, then the Tor network is \
&gt; updated in a straightforward way. This is not the case if those weights are \
&gt; computed in client code. In fact, I believe that one of the strength of this \
&gt; proposal is the oriented design towards the dirauths.

Consensus changes on dirauths:
* need to use consensus methods
* require a 6-12 month deployment time
* increases the size of all directory documents
* change the whole network
* if designed carefully, can be turned off using a network-wide parameter

Weight changes on clients:
* require a 3-6 month deployment time
* can be deployed to small numbers of clients
* if designed carefully, can be turned off using a network-wide parameter

I don't know which we'll prefer if we deploy this.

You skipped this, but it's really important for the implementation:

&gt; &gt; If you must keep them in the consensus, please put these on the
&gt; &gt; existing "w" lines, which are intended for this purpose:
&gt; &gt; 
&gt; &gt; "Other weighting keywords may be added later. Clients MUST ignore
&gt; &gt; keywords they do not recognize."
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2234

Please revise the proposal to conform to the existing directory spec.

&gt; &gt; Unanswered questions:
&gt; &gt; 
&gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; and the bandwidth authorities?
&gt; &gt; 
&gt; 
&gt; I am sorry, I don't really understand why a feedback loop is needed. Measuring \
&gt; bandwidth and producing bandwidth-weights seems orthogonal to me.

You do not need to add a feedback loop, one already exists:
1. Consensus weights on guards and middles change
2. Client use of guards and middles change
3. Bandwidth authority measurements of guards and middles change
4. Repeat from 1

My question is:

How does this existing feedback loop affect your proposal?
Does it increase or reduce the size of the guard and middle weight changes?

&gt; &gt; Should bandwidth authority clients use the new system?
&gt; &gt; 
&gt; &gt; How do we report on the new system?
&gt; &gt; How can we determine whether it is better for security in practice?
&gt; &gt; How can we determine if it is faster or slower in practice?
&gt; &gt; How can we work out if someone is trying to game the system?
&gt; 
&gt; I've added a section within the proposal for all upcoming questions.

Thanks.

If you skip sections with unanswered questions or issues that need to
be fixed, please put them in this section as well.
Otherwise, it's easy to lose track of them.

Can you store the proposal in a git repository somewhere, so people can
see what you've changed in each revision?
Otherwise, they have to re-read the whole proposal each time.

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpcEWwACgkQdA2eOQJS
cqLMyA//Z4EupGHM52d0cuKFSp8VyK9ECiwO1DKY8NRp7CySAL96oCDgmzwg7CYs
BsVw8X++fW/OU6S7ESbmiomSF1f8eseYHhFumjUyoVEpzL+ENo8b2iU2xbNO58mf
HI6G9LsaAswvKTu+0EESBsu/a3gg+G4ExUgrPlBEf1Q/kTjljCx8krBkWtA7OAf0
DVVPJBlfN8kGB80oOS5CqdARr4ltURSBRUL1Cre3IiTxnLq+lqGrQAIlVzcCsIgY
0jdKey/xnWqJffhlM4C9wjDPTVnyc8OQ5ZrcBRzT8hF3oEYyqALL16un55mLXnSc
hLgLPLF0gTi3vmW0ot4qId79Bd1kqRMdqKs/b6yJLpjxO9CEjI9dh/EuAHCNaDxk
qszsYp4S3A1dsgABiBNrGBWyw6MfeE3bnUD6JDu5hASMXX+Z6gRgdSYppL8XOzAW
FaeGiZS04vxCioqIBUmq4c99Bu5PDBTPV4L10x5rrMmq3PhWj/lF2t65P0BFlKtK
+wxnLJhlwbwNIiPhrQhjlh0M0KalCGddGvn2eBjwDyU3CergG2V6kwSjYAPsWHoD
nxCZcicKF1N+blBRK03NYkY9P/5tGh1paVsyv8AfYbOdE+fhH5TPfV4+ngh3Fh0Z
LeHXR6d+ffxTtXvlzDIpfGN4Y8d/IyzoHLy485beAkZaV4fVz1g=
=HbIV
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180117211058</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-01-17 21:10:58-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hello,

Thank you again for your valuable comments and efforts for improving!

I have added the proposal here: https://github.com/frochet/wf_proposal.
And, btw, the slides from the talk might help to understand the proposal
(for anyone that hesitates to dive into it: You can browse the slide at
http://ndouuqkqdsd6v56h.onion/and get the big picture. Especially from
slides 14.1, 14.2, .3, .4 and .5).


On 15/01/18 03:26, teor wrote:
&gt; &gt; On 13 Jan 2018, at 01:17, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; &gt; 
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; Thank you for your helpful review, teor.
&gt; &gt; 
&gt; &gt; I updated the proposal from most of your comments (see attached .txt) and I \
&gt; &gt; respond inline to add some precisions relative to a few of your questions. 
&gt; &gt; Btw, I've mirrored my private repo to github \
&gt; &gt; https://github.com/frochet/Waterfilling, such that you have the proper commit \
&gt; &gt; history.
&gt; Thanks!
&gt; 
&gt; I replied below in context.
&gt; 
&gt; &gt; On 2018-01-11 14:47, teor wrote:
&gt; &gt; &gt; Hi Florentin,
&gt; &gt; &gt; 
&gt; &gt; &gt; I have copied your proposal below, so I can respond to it inline.
&gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; Hence, in addition to select paths in a probabilistic manner, the
&gt; &gt; &gt; &gt; path selection algorithm is responsible for balancing the network,
&gt; &gt; &gt; &gt; that is, making sure that enough bandwidth is made available in all
&gt; &gt; &gt; &gt; the positions.  The current balance of the network is decided by the
&gt; &gt; &gt; &gt; bandwidth-weights (see dir-spec.txt section 3.8.3.  or/and the
&gt; &gt; &gt; &gt; Waterfilling PETS2017 paper
&gt; &gt; &gt; &gt; https://petsymposium.org/2017/papers/issue2/paper05-2017-2-source.pdf).
&gt; &gt; &gt; &gt; This balance does not achieve maximum diversity in end-positions of
&gt; &gt; &gt; &gt; user paths: the same network throughput could be achieved by
&gt; &gt; &gt; &gt; decreasing the use of high-bandwidth relays and increasing the use
&gt; &gt; &gt; &gt; of lower-bandwidth relays in the guard position, instead of using
&gt; &gt; &gt; &gt; these relays in a way that is just proportional to their bandwidth.
&gt; &gt; &gt; When you say "bandwidth", it's not clear whether you mean consensus
&gt; &gt; &gt; weight (measured bandwidth) or advertised bandwidth (bandwidth
&gt; &gt; &gt; capacity). They're not the same.
&gt; &gt; &gt; 
&gt; &gt; &gt; I'm going to assume consensus weight from now on.
&gt; &gt; &gt; Please fix all uses of bandwidth in the rest of the proposal.
&gt; &gt; Yes, we mean consensus weight :) I did s/bandwidth/consensus weight within the \
&gt; &gt; proposal
&gt; In some cases, you seem to expect the consensus weight to be the available
&gt; bandwidth (or advertised bandwidth) of the relay. I'll try to find them,
&gt; but you should check as well.


Ok, I will look into it. If you see some, let me know :)

&gt; &gt; &gt; ...
&gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; Compute a "pivot" N and the weight Wgg_i assigned to
&gt; &gt; &gt; &gt; relay_i in such a way that:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; (a) Wgg_i * BW_i == Wgg_i+1 * BW_i+1 forall i in [1, N]
&gt; &gt; &gt; subscripts in brackets, otherwise it's ambiguous:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Wgg_(i+1) * BW_(i+1)
&gt; &gt; &gt; &gt; (b) Wgg_i == 1 forall i in [N+1, K]
&gt; &gt; &gt; &gt; (c) sum_{i=1}^{K} Wgg_i*BW_i = Wgg*G  (Wgg is provided by Tor)
&gt; &gt; &gt; These equations are under-specified, because they allow solutions with:
&gt; &gt; &gt; Wgg*G &gt; 0
&gt; &gt; &gt; Wgg_1 == 0
&gt; &gt; &gt; That is, no guard selections for high-bandwidth relays.
&gt; This is a really important point:
&gt; 
&gt; Your equations allow the largest guard to have zero guard weighting and zero
&gt; guard bandwidth. They should require it to have at least as much guard
&gt; bandwidth as the water level.
&gt; 
&gt; &gt; &gt; From the descriptions, I think the missing condition is:
&gt; &gt; &gt; Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)
&gt; &gt; Yes, this can be added. But I think that this condition is redundant, since BW_i \
&gt; &gt; are sorted in decreasing order.
&gt; No, it's not, because it's a condition on the *guard-weighted* consensus
&gt; weights. The sorting is a condition on the *original* consensus weights.


I have added the condition, thanks :)

&gt; It might help to provide a procedural algorithm for assigning
&gt; bandwidth, as well as equations. It would resolve some ambiguity.

Not sure to understand what 'bandwidth' signifies here. I can provide a
procedural algorithm to compute the waterfilling bandwidth-weights, if
this is what you meant?

&gt; &gt; &gt; Also, Wgg is provided by the Tor directory authorities based on
&gt; &gt; &gt; consensus weights from the bandwidth authorities.
&gt; &gt; &gt; 
&gt; &gt; &gt; And what happens to any remainder in the calculations?
&gt; &gt; This is a very good question. Currently in my implementation, I ignore the \
&gt; &gt; remainder. This is negligible for large network but can be weird for small one \
&gt; &gt; (of a few relays). 
&gt; &gt; A possible solution would be to use floating precision for consensus weights.
&gt; No, this is not a good solution. It simply passes the issue to the
&gt; floating-point implementation. And the result will depend on the
&gt; libraries, processor, and compiler.
&gt; 
&gt; For this reason, we work very hard to use as little floating point as
&gt; possible in Tor. We really don't want to use it when generating the
&gt; consensus, because mismatches will break consensus.
&gt; 
&gt; Instead, I suggest you apply this missing condition:
&gt; 
&gt; &gt; &gt; From the descriptions, I think the missing condition is:
&gt; &gt; &gt; Wgg_N * BW_N &gt;= Wgg_(N+1) * BW_(N+1)
&gt; And then allocate the remainder to the highest-bandwidth relays, perhaps
&gt; in proportion to their consensus weight. Please allocate bandwidth to
&gt; equally weighted relays using a stable sort that is the same on all
&gt; directory authorities. (The existing relay sorting code might already do
&gt; this for you.)

I've added the condition and also added a section for implementation
note with your comments. Thanks for pointing this out!
 
&gt; &gt; &gt; (This is most important for small, low bandwidth test networks.)
&gt; &gt; &gt; 
&gt; &gt; &gt; For example, if:
&gt; &gt; &gt; G = 10
&gt; &gt; &gt; Wgg = 0.6
&gt; &gt; &gt; BW_i = 6, 2, 2
&gt; &gt; &gt; What are the final weighted bandwidths?
&gt; &gt; &gt; 2, 2, 2?
&gt; &gt; From my note, my current implementation would crash if the water level reaches \
&gt; &gt; the smallest relay. Since it was prototype code, I didn't mind to think about it, \
&gt; &gt; and I let it that way.
&gt; We would need a solution for this crash as part of the proposal.
&gt; 
Added in implementation note.

&gt; &gt; I think that below a fixed size of the network, it does not make sense to use \
&gt; &gt; this proposal. In this example, the remainder accounts for a large part of the \
&gt; &gt; network capacity and would just be wasted.
&gt; We will test this in small networks, and it must work.
&gt; I suggest you allocate the remainder to high-bandwidth relays.
&gt; 

Fine with me :) Added in implementation note.


&gt; &gt; &gt; ...
&gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; 2.1 Going further by tweaking original bandwidth-weights computation
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; As explained above, our Waterfilling equations are based on: 1) the
&gt; &gt; &gt; &gt; Wgg weight computed by Tor 2) the assumption that the bandwidth
&gt; &gt; &gt; &gt; available in exit is scarce, i.e., it is lower than the one
&gt; &gt; &gt; &gt; available for guard (and middle) positions.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; The second point is satisfied most of the time in Tor, and we do take
&gt; &gt; &gt; &gt; it for granted here.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; We, however, observe that Waterfilling could be made even more
&gt; &gt; &gt; &gt; effective by applying a minor change in the way Tor computes the
&gt; &gt; &gt; &gt; Wgg.  For the moment, Tor computes Wgg in such a way that the same
&gt; &gt; &gt; &gt; bandwidth is allocated to the guard and middle positions. As a
&gt; &gt; &gt; &gt; result, both positions are in excess compared to the exit position.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; The water level could be decreased and, as a result, the uniformity
&gt; &gt; &gt; &gt; of the guard selection process could be improved, by computing Wgg
&gt; &gt; &gt; &gt; in a way that allocates the same bandwidth to the guard and exit
&gt; &gt; &gt; &gt; positions, putting the middle position as the only position in
&gt; &gt; &gt; &gt; excess.
&gt; &gt; &gt; No, this would slow down Guards, and everything that isn't an exit circuit:
&gt; &gt; &gt; * directory fetches (3% of total bandwidth to guard position)
&gt; If we reduce guard weights on large relays, does this slow down Tor bootstrap?
&gt; (Because smaller relays with higher latency get more micro descriptor requests.)
&gt; 
&gt; Does it slow down directory fetches in general?
&gt; 

Assuming smallest guards have an higher latency in average, this could
indeed slow down directory fetches and then, maybe it would slow down
Tor bootstrapping. I guess that measuring this with Shadow is possible,
as well as collecting statistics on a small set of deployed Tor clients.

&gt; &gt; &gt; * onion services (rend is 4% of total bandwidth to guard and middle)
&gt; &gt; &gt; * HSDir is unweighted, and we don't know how much bandwidth it uses
&gt; &gt; &gt; * FallbackDir is unweighted, but mostly Guards, and small
&gt; &gt; &gt; 
&gt; &gt; That's difficult to predict, I cannot be sure if it is better or worse for that \
&gt; &gt; type of traffic since internal circuits use at least 2 middle relays + the guard \
&gt; &gt; and sometimes, even not the guard. Hence we might also think that pushing a bit \
&gt; &gt; more to the middle position could be a good thing to do. Moreover, middle relays \
&gt; &gt; are unstable and often at the edge of the internet, while guard are stable and \
&gt; &gt; most of them within the core of the internet. Hence, a little more of them within \
&gt; &gt; the middle position *could* be a good thing, especially if it makes entry's \
&gt; &gt; selection probability more uniform. Anyway, I don't have any proof to assert \
&gt; &gt; this, as well that I don't have any proof to assert that this optimization could \
&gt; &gt; be bad. What I got, is that, for exit circuits, it does not slow down anything. 
&gt; &gt; This optimization is not mandatory, and could also be enabled/disabled at will by \
&gt; &gt; the directory auths. 
&gt; &gt; &gt; &gt; We show in the performance section of the Waterfilling paper that
&gt; &gt; &gt; &gt; scarcity on two positions does not reduce performance compared to
&gt; &gt; &gt; &gt; vanilla bandwidth-weights.
&gt; &gt; &gt; What about guards that have low consensus weight due to latency,
&gt; &gt; &gt; rather than available bandwidth?
&gt; &gt; &gt; 
&gt; &gt; &gt; I think this could also cause you huge latency issues as you push more
&gt; &gt; &gt; bandwidth away from fast relays. I'm not sure if shadow captures this
&gt; &gt; &gt; accurately.
&gt; &gt; &gt; 
&gt; &gt; If it happens that any bandwidth is pushed away from fast relays within the entry \
&gt; &gt; position and make the entry position slower, at average, then it will make the \
&gt; &gt; middle position faster (because it got that bandwidth pushed away). Since the \
&gt; &gt; latency of your traffic flow just care about the global latency of the circuit, \
&gt; &gt; this will not appear to be slower or faster, on average. This is exactly what we \
&gt; &gt; observe in Shadow, and yes, it captures latency accurately. At least, better than \
&gt; &gt; any other simulator.
&gt; I am also concerned that this proposal may overload small guards and
&gt; underload large guards. Because it does not consider advertised
&gt; bandwidth.

I've added this concern within the 'unanswered questions' section. This
proposal assumes relay measurement are reliable (consensus weight). If
this is not the case, then strange things might happen. In our Shadow
results, we have seen that the tails of the CDFs for measurements were a
little bit "longer", meaning that the few worst circuits (3%) that we
can obtain with the current path selection were a little bit worse with
Waterfilling on a loaded network (no change on a light network). And,
this fraction of worse circuits was even reduced (less than 1%) when we
applied Section 2.1 of the proposal (moving more bandwidth to the middle
position).

How does the current path selection considers advertised bandwidth?
(Apart bwauths when measuring relays?).

&gt; For example, some guards are weighted at 10x their advertised bandwidth.
&gt; Others are weighted at 0.1x their advertised bandwidth.
&gt; 
&gt; There is also a geographical bias to guard bandwidth:
&gt; https://atlas.torproject.org/#map_consensus_weight_to_bandwidth/flag:Guard

Yep, Thanks for the link. Atlas becomes nicer :) For what it worth, a
possible explanation for this bias would be to consider how big ISPs
route internal traffics to their own AS: most of internal links are good
10GBits optic fiber while the connections to the outside world is mostly
through smaller links. Bwauths can be tricked to believe that some
relays have larger capacity because they have build circuits with relays
internally connected to strong 10 Gbits. I don't know how the bwauths
account for such thing? But, it is an another topic of discussion.

&gt; Does shadow capture the consensus weight to advertised bandwidth ratio?
&gt; (That is, the actual load on the relay.)
&gt; Or the advertised bandwidth?
&gt; (The approximate actual capacity of the relay.)

Well, Shadow uses both. See doc of function
https://github.com/shadow/shadow-plugin-tor/blob/master/tools/generate.py#L80
used to generate topology and set up link speed from the relay's
advertised bandwidth. Then, for the path selection, Shadow uses the
measured bandwidth from torflow plugins or from a static v3bw file.


&gt; I think this proposal will actually be good for the network, because some
&gt; large consensus weight relays are overloaded. And giving them more middle
&gt; weight will reduce their overall load. (Middles get less load than guards.)
&gt; 
&gt; But I would like others to think through this, too.

Cool :) And regarding the main point of this proposal? Removing
top-guard threat anonymity and hardening path compromise? Do you think
that the method presented here is valuable? And, how this 'weight'
compared to performance concerns?

&gt; &gt; &gt; &gt; 3  Security implications
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; An analysis of the security impact of the Waterfilling proposal is
&gt; &gt; &gt; &gt; made in Section 6 of the Waterfilling paper. It studies the
&gt; &gt; &gt; &gt; expectation of the number of relays that an adversary needs to
&gt; &gt; &gt; &gt; control in order to mount a successful correlation attack at a given
&gt; &gt; &gt; &gt; time, as well as an analysis of the evolution of the time until
&gt; &gt; &gt; &gt; first path compromise, based on TorPS.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Given that the distribution produced by Waterfilling is closer to
&gt; &gt; &gt; &gt; the uniform distribution, the use of Waterfilling increases the
&gt; &gt; &gt; &gt; expectation of the number of relays that an adversary needs to
&gt; &gt; &gt; &gt; compromise in order mount a successful correlation
&gt; &gt; &gt; &gt; attack. Concretely, and based on real data from 2015, this
&gt; &gt; &gt; &gt; expectation increases by approximately 150 relays.
&gt; &gt; &gt; What percentage is this?
&gt; &gt; ~ 25 %
&gt; &gt; 
&gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; 
&gt; &gt; &gt; I'm sorry, I can't read this, there are build files everywhere.
&gt; &gt; &gt; I can't even find which files were changed.
&gt; &gt; &gt; Can you provide clean commits in a fork, based on the Tor master branch?
&gt; &gt; &gt; 
&gt; &gt; &gt; Also, I think you will need a new consensus method for this change.
&gt; &gt; &gt; We don't use consensus parameters or torrc options to modify the
&gt; &gt; &gt; content of the consensus, we use consensus methods.
&gt; &gt; &gt; 
&gt; &gt; Sorry about this. I've updated the repo with a proper commit history based on my \
&gt; &gt; fork. The code gives an idea about the easiness to plug-in this method to the \
&gt; &gt; current path selection.
&gt; I tried reviewing this code, but it's hard.
&gt; The changes are scattered through a lot of different commits.
&gt; 
&gt; Usually, we group changes into commits by topic or function area.
&gt; And we use the commit title to say what the commit changes.
&gt; 
&gt; Then, when we fix a bug, we use "git commit --fixup" so we can see
&gt; when the bug was fixed.

I will pay attention to that, thanks for the advice.

&gt; For example, I have to look at 20 commits to find out if this bug in
&gt; the array size for commit e81a55ea has been fixed:
&gt; 
&gt; +   if (exits) {
&gt; +     if (search_pivot_and_compute_wfbw_weights_(exits, bwweights-&gt;wee, 0,
&gt; +           guards-&gt;num_used) &lt; 0)
&gt; 
&gt; This function is also missing a case for guardsexits.

It appears afterwards, in another commit. Yep, sorry for the mess.

&gt; &gt; &lt;skip&gt;
&gt; You skipped this, but it's really important for the implementation:
&gt; 
&gt; &gt; &gt; On 12 Jan 2018, at 00:47, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; Also, I think you will need a new consensus method for this change.
&gt; &gt; &gt; We don't use consensus parameters or torrc options to modify the
&gt; &gt; &gt; content of the consensus, we use consensus methods.
&gt; Someone who understands consensus methods will need to revise your
&gt; proposal and code before it is merged.

Added in the section "implementation note".

&gt; &gt; &gt; &gt; Here is how it
&gt; &gt; &gt; &gt; works:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Every hour, directory authorities vote on a new consensus. Once the
&gt; &gt; &gt; &gt; votes are collected, the dirauths produce a deterministic network
&gt; &gt; &gt; &gt; consensus document containing information about each relay,
&gt; &gt; &gt; &gt; including the waterfilling bandwidth-weights produced from the
&gt; &gt; &gt; &gt; equations described above. e.g.:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; &gt; r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
&gt; &gt; &gt; &gt; 51.254.112.52 9111 9112
&gt; &gt; &gt; &gt; m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
&gt; &gt; &gt; &gt; s Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; &gt; w Bandwidth=10200
&gt; &gt; &gt; &gt; wfbw wgg=8029 wmg=1971.
&gt; &gt; &gt; &gt; r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
&gt; &gt; &gt; &gt; 9111 9112
&gt; &gt; &gt; &gt; m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
&gt; &gt; &gt; &gt; s Authority Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; &gt; w Bandwidth=1890
&gt; &gt; &gt; &gt; wfbw wgg=10000 wmg=0.
&gt; &gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; In this example, we see two relays having the Guard flag and their
&gt; &gt; &gt; &gt; new waterfilling bandwidth allocation given on the lines starting
&gt; &gt; &gt; &gt; with wfbw.
&gt; &gt; &gt; These are redundant, and could significantly expand the size of the
&gt; &gt; &gt; consensus, and consensus diffs. (Consensus weights are one of the
&gt; &gt; &gt; largest contributors to consensus diff size.)
&gt; &gt; True, each time the consensus weights are modified, those waterfilling weights \
&gt; &gt; need to be recomputed. It adds one line per guard, which is about 2~3% of the \
&gt; &gt; size of the full consensus. Is such a thing a problem?
&gt; Changing bandwidths in each consensus makes consensus diffs *much* bigger.
&gt; 
&gt; See this proposal for details and an analysis:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt; 

Ok. If I understand correctly, any bandwidth change would need a full
re-calculation and a broadcast of the new weights (1 per guard) in the
next consensus diff. I didn't imagine that it could be a problem. But if
consensus diff size matters, then moving the weight calculation to the
client code would fix it.

&gt; The same issue applies to any bandwidth figures.
&gt; Would it be sufficient to publish a small ratio instead?
&gt; 
&gt; For example, you could publish lines like:
&gt; 
&gt; w Bandwidth=100000 wfratio=1
&gt; 
&gt; or
&gt; 
&gt; w Bandwidth=100000 wfratio=3
&gt; 
&gt; And have clients calculate wfbw as follows:
&gt; 
&gt; wfbw = Bandwidth * 2^-wfratio
&gt; 
&gt; This would be much smaller, much more compressible, and would also solve
&gt; some of your other issues around remainders, and also equal-weight guards
&gt; and stable sorts.
&gt; 
&gt; You would need to use equations something like this:
&gt; 
&gt; Compute a "pivot" N and a weight ratio Wggr_i assigned to
&gt; relay_i in such a way that:
&gt; 
&gt; Each high-bandwidth guard has a guard consensus weight within a factor of 2 of \
&gt; water level: 
&gt; (a) 2 * 2^-Wggr_(N+1) * BW_(N+1) &gt; 2^-Wggr_i * BW_i &gt;= 2^-Wggr_(N+1) * BW_(N+1) \
&gt; forall i in [1, N] 
&gt; Each low-bandwidth guard is under the water level: (unchanged)
&gt; 
&gt; (b) Wggr_i == 0 forall i in [N+1, K]
&gt; 
&gt; The total guard weight is within a ratio of the desired guard weight:
&gt; 
&gt; (c) 2 * Wgg * G &gt; sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G
&gt; 
&gt; The upper bound on (c) is actually a worst-case for a single-relay network.
&gt; We could get closer to Wgg * G by finding the lowest Wggr for the largest
&gt; relay that satisfies:
&gt; 
&gt; (c.1) sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G
&gt; 
&gt; This might make the largest relay an exception to (a).
&gt; I'm not sure if we'll need this optimisation or not.

Wow, so first of all, thanks for suggesting new ways of resolving
issues. I really appreciate your consideration for this work.

This suggestion indeed reduces the diff problem, and I find it elegant.
But, I have the following concerns:

 - The upper bound in (a) is huge, and would be appreciated for an
adversary running relays. The adversary could manage to set relays with
almost 2 times the consensus weight of the water level, and still being
used at 100% in the entry position. This would reduce a lot the benefits
of this proposal, right?.
 - The analysis in our paper works for equations we showed. Even if
these ones are very similar, I am not sure we can say that it would be
good without re-doing the research.

With your explanations below (weight change on clients), and given that
the consensus diff size is a thing, I am leaning to believe that the
weight calculation should be done on clients. Anyway, I have added a
remark about this possibility within the proposal.

&gt; &gt; &gt; Why not calculate wmg on clients?
&gt; &gt; &gt; Why not calculate both wgg and wmg on clients?
&gt; &gt; &gt; 
&gt; &gt; This is again a very good question: for such a critical feature (path selection), \
&gt; &gt; it is important that the directory auths have full power over the weight \
&gt; &gt; computation. If it happens that some change are needed, then the Tor network is \
&gt; &gt; updated in a straightforward way. This is not the case if those weights are \
&gt; &gt; computed in client code. In fact, I believe that one of the strength of this \
&gt; &gt; proposal is the oriented design towards the dirauths.
&gt; Consensus changes on dirauths:
&gt; * need to use consensus methods
&gt; * require a 6-12 month deployment time
&gt; * increases the size of all directory documents
&gt; * change the whole network
&gt; * if designed carefully, can be turned off using a network-wide parameter
&gt; 
&gt; Weight changes on clients:
&gt; * require a 3-6 month deployment time
&gt; * can be deployed to small numbers of clients
&gt; * if designed carefully, can be turned off using a network-wide parameter
&gt; 
&gt; I don't know which we'll prefer if we deploy this.

I have added a subsection in the proposal with those lines. Looks like
we have to agree on this topic first before going in details in the
implementation section?

&gt; You skipped this, but it's really important for the implementation:
&gt; 
&gt; &gt; &gt; If you must keep them in the consensus, please put these on the
&gt; &gt; &gt; existing "w" lines, which are intended for this purpose:
&gt; &gt; &gt; 
&gt; &gt; &gt; "Other weighting keywords may be added later. Clients MUST ignore
&gt; &gt; &gt; keywords they do not recognize."
&gt; &gt; &gt; 
&gt; &gt; &gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2234
&gt; Please revise the proposal to conform to the existing directory spec.

OK, I have modified the example and opened discussion for other
directions within the implementation (client side and your suggestion
above).

&gt; &gt; &gt; Unanswered questions:
&gt; &gt; &gt; 
&gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; 
&gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. Measuring \
&gt; &gt; bandwidth and producing bandwidth-weights seems orthogonal to me.
&gt; You do not need to add a feedback loop, one already exists:
&gt; 1. Consensus weights on guards and middles change
&gt; 2. Client use of guards and middles change
&gt; 3. Bandwidth authority measurements of guards and middles change
&gt; 4. Repeat from 1
&gt; 
&gt; My question is:
&gt; 
&gt; How does this existing feedback loop affect your proposal?
&gt; Does it increase or reduce the size of the guard and middle weight changes?

I have added those questions to the proposal. This looks difficult to know.

&gt; &gt; &gt; Should bandwidth authority clients use the new system?
&gt; &gt; &gt; 
&gt; &gt; &gt; How do we report on the new system?
&gt; &gt; &gt; How can we determine whether it is better for security in practice?
&gt; &gt; &gt; How can we determine if it is faster or slower in practice?
&gt; &gt; &gt; How can we work out if someone is trying to game the system?
&gt; &gt; I've added a section within the proposal for all upcoming questions.
&gt; Thanks.
&gt; 
&gt; If you skip sections with unanswered questions or issues that need to
&gt; be fixed, please put them in this section as well.
&gt; Otherwise, it's easy to lose track of them.

I should have added everything now. Thanks!

Best,
Florentin
&gt; Can you store the proposal in a git repository somewhere, so people can
&gt; see what you've changed in each revision?
&gt; Otherwise, they have to re-read the whole proposal each time.
&gt; 
&gt; T
&gt; 
&gt; --
&gt; Tim / teor
&gt; 
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180118000350</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-18 00:03:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 18 Jan 2018, at 08:10, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; ...
&gt; &gt; It might help to provide a procedural algorithm for assigning
&gt; &gt; bandwidth, as well as equations. It would resolve some ambiguity.
&gt; 
&gt; Not sure to understand what 'bandwidth' signifies here. I can provide a
&gt; procedural algorithm to compute the waterfilling bandwidth-weights, if
&gt; this is what you meant?

Yes.

&gt; ...
&gt; 
&gt; &gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; &gt; 2.1 Going further by tweaking original bandwidth-weights computation
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; As explained above, our Waterfilling equations are based on: 1) the
&gt; &gt; &gt; &gt; &gt; Wgg weight computed by Tor 2) the assumption that the bandwidth
&gt; &gt; &gt; &gt; &gt; available in exit is scarce, i.e., it is lower than the one
&gt; &gt; &gt; &gt; &gt; available for guard (and middle) positions.
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; The second point is satisfied most of the time in Tor, and we do take
&gt; &gt; &gt; &gt; &gt; it for granted here.
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; We, however, observe that Waterfilling could be made even more
&gt; &gt; &gt; &gt; &gt; effective by applying a minor change in the way Tor computes the
&gt; &gt; &gt; &gt; &gt; Wgg.  For the moment, Tor computes Wgg in such a way that the same
&gt; &gt; &gt; &gt; &gt; bandwidth is allocated to the guard and middle positions. As a
&gt; &gt; &gt; &gt; &gt; result, both positions are in excess compared to the exit position.
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; The water level could be decreased and, as a result, the uniformity
&gt; &gt; &gt; &gt; &gt; of the guard selection process could be improved, by computing Wgg
&gt; &gt; &gt; &gt; &gt; in a way that allocates the same bandwidth to the guard and exit
&gt; &gt; &gt; &gt; &gt; positions, putting the middle position as the only position in
&gt; &gt; &gt; &gt; &gt; excess.
&gt; &gt; &gt; &gt; No, this would slow down Guards, and everything that isn't an exit circuit:
&gt; &gt; &gt; &gt; * directory fetches (3% of total bandwidth to guard position)
&gt; &gt; If we reduce guard weights on large relays, does this slow down Tor bootstrap?
&gt; &gt; (Because smaller relays with higher latency get more micro descriptor requests.)
&gt; &gt; 
&gt; &gt; Does it slow down directory fetches in general?
&gt; 
&gt; Assuming smallest guards have an higher latency in average, this could
&gt; indeed slow down directory fetches and then, maybe it would slow down
&gt; Tor bootstrapping. I guess that measuring this with Shadow is possible,
&gt; as well as collecting statistics on a small set of deployed Tor clients.

This would be helpful.
Although the overall effect might not be measurable.
If it is, we could use the unmodified guard weights for directory fetches.

&gt; &gt; &gt; &gt; * onion services (rend is 4% of total bandwidth to guard and middle)
&gt; &gt; &gt; &gt; * HSDir is unweighted, and we don't know how much bandwidth it uses
&gt; &gt; &gt; &gt; * FallbackDir is unweighted, but mostly Guards, and small
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; That's difficult to predict, I cannot be sure if it is better or worse for that \
&gt; &gt; &gt; type of traffic since internal circuits use at least 2 middle relays + the \
&gt; &gt; &gt; guard and sometimes, even not the guard. Hence we might also think that pushing \
&gt; &gt; &gt; a bit more to the middle position could be a good thing to do. Moreover, middle \
&gt; &gt; &gt; relays are unstable and often at the edge of the internet, while guard are \
&gt; &gt; &gt; stable and most of them within the core of the internet. Hence, a little more \
&gt; &gt; &gt; of them within the middle position *could* be a good thing, especially if it \
&gt; &gt; &gt; makes entry's selection probability more uniform. Anyway, I don't have any \
&gt; &gt; &gt; proof to assert this, as well that I don't have any proof to assert that this \
&gt; &gt; &gt; optimization could be bad. What I got, is that, for exit circuits, it does not \
&gt; &gt; &gt; slow down anything. 
&gt; &gt; &gt; This optimization is not mandatory, and could also be enabled/disabled at will \
&gt; &gt; &gt; by the directory auths. 
&gt; &gt; &gt; &gt; &gt; We show in the performance section of the Waterfilling paper that
&gt; &gt; &gt; &gt; &gt; scarcity on two positions does not reduce performance compared to
&gt; &gt; &gt; &gt; &gt; vanilla bandwidth-weights.
&gt; &gt; &gt; &gt; What about guards that have low consensus weight due to latency,
&gt; &gt; &gt; &gt; rather than available bandwidth?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I think this could also cause you huge latency issues as you push more
&gt; &gt; &gt; &gt; bandwidth away from fast relays. I'm not sure if shadow captures this
&gt; &gt; &gt; &gt; accurately.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; If it happens that any bandwidth is pushed away from fast relays within the \
&gt; &gt; &gt; entry position and make the entry position slower, at average, then it will \
&gt; &gt; &gt; make the middle position faster (because it got that bandwidth pushed away). \
&gt; &gt; &gt; Since the latency of your traffic flow just care about the global latency of \
&gt; &gt; &gt; the circuit, this will not appear to be slower or faster, on average. This is \
&gt; &gt; &gt; exactly what we observe in Shadow, and yes, it captures latency accurately. At \
&gt; &gt; &gt; least, better than any other simulator.
&gt; &gt; I am also concerned that this proposal may overload small guards and
&gt; &gt; underload large guards. Because it does not consider advertised
&gt; &gt; bandwidth.
&gt; 
&gt; I've added this concern within the 'unanswered questions' section. This
&gt; proposal assumes relay measurement are reliable (consensus weight).

How reliable?

Current variance is 30% - 40% between identical bandwidth authorities, and
30% - 60% between all bandwidth authorities.

Sources:
https://tomrittervg.github.io/bwauth-tools/#apples-to-apples-comparison
https://tomrittervg.github.io/bwauth-tools/#updated-01

Is this sufficient?

&gt; If
&gt; this is not the case, then strange things might happen. In our Shadow
&gt; results, we have seen that the tails of the CDFs for measurements were a
&gt; little bit "longer", meaning that the few worst circuits (3%) that we
&gt; can obtain with the current path selection were a little bit worse with
&gt; Waterfilling on a loaded network (no change on a light network).

This might not be great. UX studies show that users notice the worst
delays, and the variance between the best and worst delays.

&gt; And,
&gt; this fraction of worse circuits was even reduced (less than 1%) when we
&gt; applied Section 2.1 of the proposal (moving more bandwidth to the middle
&gt; position).

Maybe we should do this then.

&gt; How does the current path selection considers advertised bandwidth?
&gt; (Apart bwauths when measuring relays?).

It does not, because advertised bandwidth is easily modified by each relay.

&gt; &gt; For example, some guards are weighted at 10x their advertised bandwidth.
&gt; &gt; Others are weighted at 0.1x their advertised bandwidth.
&gt; &gt; 
&gt; &gt; There is also a geographical bias to guard bandwidth:
&gt; &gt; https://atlas.torproject.org/#map_consensus_weight_to_bandwidth/flag:Guard
&gt; 
&gt; Yep, Thanks for the link. Atlas becomes nicer :) For what it worth, a
&gt; possible explanation for this bias would be to consider how big ISPs
&gt; route internal traffics to their own AS: most of internal links are good
&gt; 10GBits optic fiber while the connections to the outside world is mostly
&gt; through smaller links. Bwauths can be tricked to believe that some
&gt; relays have larger capacity because they have build circuits with relays
&gt; internally connected to strong 10 Gbits. I don't know how the bwauths
&gt; account for such thing? But, it is an another topic of discussion.

They do not.

&gt; &gt; Does shadow capture the consensus weight to advertised bandwidth ratio?
&gt; &gt; (That is, the actual load on the relay.)
&gt; &gt; Or the advertised bandwidth?
&gt; &gt; (The approximate actual capacity of the relay.)
&gt; 
&gt; Well, Shadow uses both. See doc of function
&gt; https://github.com/shadow/shadow-plugin-tor/blob/master/tools/generate.py#L80
&gt; used to generate topology and set up link speed from the relay's
&gt; advertised bandwidth. Then, for the path selection, Shadow uses the
&gt; measured bandwidth from torflow plugins or from a static v3bw file.

Ok, this is pretty close to the public network.

&gt; &gt; I think this proposal will actually be good for the network, because some
&gt; &gt; large consensus weight relays are overloaded. And giving them more middle
&gt; &gt; weight will reduce their overall load. (Middles get less load than guards.)
&gt; &gt; 
&gt; &gt; But I would like others to think through this, too.
&gt; 
&gt; Cool :) And regarding the main point of this proposal? Removing
&gt; top-guard threat anonymity and hardening path compromise? Do you think
&gt; that the method presented here is valuable?

You assume that many smaller relays are harder to run/compromise than fewer
large relays. I do not know if this is true. But it seems that limited IPv4
address space makes it partly true.

Maybe it will make malicious operators split large relays into smaller relays.
This is bad for client anonymity in general. But so are malicious operators.

&gt; And, how this 'weight'
&gt; compared to performance concerns?

It seems ok to me, if we can limit the increase in the slow tail.

&gt; ...
&gt; &gt; &gt; &gt; &gt; Here is how it
&gt; &gt; &gt; &gt; &gt; works:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; Every hour, directory authorities vote on a new consensus. Once the
&gt; &gt; &gt; &gt; &gt; votes are collected, the dirauths produce a deterministic network
&gt; &gt; &gt; &gt; &gt; consensus document containing information about each relay,
&gt; &gt; &gt; &gt; &gt; including the waterfilling bandwidth-weights produced from the
&gt; &gt; &gt; &gt; &gt; equations described above. e.g.:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; &gt; &gt; r relayguard34 PPTH75+WkHl1GGw07DRE/S+JNdo 1970-01-01 00:02:37
&gt; &gt; &gt; &gt; &gt; 51.254.112.52 9111 9112
&gt; &gt; &gt; &gt; &gt; m lp08MLTivsSZPhpZQy88i8NPeBNx10tPKBpHZsM3gYM
&gt; &gt; &gt; &gt; &gt; s Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; &gt; &gt; w Bandwidth=10200
&gt; &gt; &gt; &gt; &gt; wfbw wgg=8029 wmg=1971.
&gt; &gt; &gt; &gt; &gt; r 4uthority3 PYnzXGQ+67m0WtO64qtJkwsUzME 1970-01-01 00:02:33 11.0.5.71
&gt; &gt; &gt; &gt; &gt; 9111 9112
&gt; &gt; &gt; &gt; &gt; m d8G2/8UQzAN3a9DixCtmaivhfUFTvlFKAxCAV1xHVKk
&gt; &gt; &gt; &gt; &gt; s Authority Fast Guard HSDir Running Stable V2Dir Valid
&gt; &gt; &gt; &gt; &gt; v Tor 0.2.6.7
&gt; &gt; &gt; &gt; &gt; w Bandwidth=1890
&gt; &gt; &gt; &gt; &gt; wfbw wgg=10000 wmg=0.
&gt; &gt; &gt; &gt; &gt; ...(more relays)
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; In this example, we see two relays having the Guard flag and their
&gt; &gt; &gt; &gt; &gt; new waterfilling bandwidth allocation given on the lines starting
&gt; &gt; &gt; &gt; &gt; with wfbw.
&gt; &gt; &gt; &gt; These are redundant, and could significantly expand the size of the
&gt; &gt; &gt; &gt; consensus, and consensus diffs. (Consensus weights are one of the
&gt; &gt; &gt; &gt; largest contributors to consensus diff size.)
&gt; &gt; &gt; True, each time the consensus weights are modified, those waterfilling weights \
&gt; &gt; &gt; need to be recomputed. It adds one line per guard, which is about 2~3% of the \
&gt; &gt; &gt; size of the full consensus. Is such a thing a problem?
&gt; &gt; Changing bandwidths in each consensus makes consensus diffs *much* bigger.
&gt; &gt; 
&gt; &gt; See this proposal for details and an analysis:
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt; &gt; 
&gt; 
&gt; Ok. If I understand correctly, any bandwidth change would need a full
&gt; re-calculation and a broadcast of the new weights (1 per guard) in the
&gt; next consensus diff. I didn't imagine that it could be a problem. But if
&gt; consensus diff size matters, then moving the weight calculation to the
&gt; client code would fix it.

Consensus diff size does matter, particularly on mobile and slow connections.

&gt; &gt; The same issue applies to any bandwidth figures.
&gt; &gt; Would it be sufficient to publish a small ratio instead?
&gt; &gt; 
&gt; &gt; For example, you could publish lines like:
&gt; &gt; 
&gt; &gt; w Bandwidth=100000 wfratio=1
&gt; &gt; 
&gt; &gt; or
&gt; &gt; 
&gt; &gt; w Bandwidth=100000 wfratio=3
&gt; &gt; 
&gt; &gt; And have clients calculate wfbw as follows:
&gt; &gt; 
&gt; &gt; wfbw = Bandwidth * 2^-wfratio
&gt; &gt; 
&gt; &gt; This would be much smaller, much more compressible, and would also solve
&gt; &gt; some of your other issues around remainders, and also equal-weight guards
&gt; &gt; and stable sorts.
&gt; &gt; 
&gt; &gt; You would need to use equations something like this:
&gt; &gt; 
&gt; &gt; Compute a "pivot" N and a weight ratio Wggr_i assigned to
&gt; &gt; relay_i in such a way that:
&gt; &gt; 
&gt; &gt; Each high-bandwidth guard has a guard consensus weight within a factor of 2 of \
&gt; &gt; water level: 
&gt; &gt; (a) 2 * 2^-Wggr_(N+1) * BW_(N+1) &gt; 2^-Wggr_i * BW_i &gt;= 2^-Wggr_(N+1) * BW_(N+1) \
&gt; &gt; forall i in [1, N] 
&gt; &gt; Each low-bandwidth guard is under the water level: (unchanged)
&gt; &gt; 
&gt; &gt; (b) Wggr_i == 0 forall i in [N+1, K]
&gt; &gt; 
&gt; &gt; The total guard weight is within a ratio of the desired guard weight:
&gt; &gt; 
&gt; &gt; (c) 2 * Wgg * G &gt; sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G
&gt; &gt; 
&gt; &gt; The upper bound on (c) is actually a worst-case for a single-relay network.
&gt; &gt; We could get closer to Wgg * G by finding the lowest Wggr for the largest
&gt; &gt; relay that satisfies:
&gt; &gt; 
&gt; &gt; (c.1) sum_{i=1}^{K} 2^-Wggr_i * BW_i &gt;= Wgg * G
&gt; &gt; 
&gt; &gt; This might make the largest relay an exception to (a).
&gt; &gt; I'm not sure if we'll need this optimisation or not.
&gt; 
&gt; Wow, so first of all, thanks for suggesting new ways of resolving
&gt; issues. I really appreciate your consideration for this work.
&gt; 
&gt; This suggestion indeed reduces the diff problem, and I find it elegant.
&gt; But, I have the following concerns:
&gt; 
&gt; - The upper bound in (a) is huge, and would be appreciated for an
&gt; adversary running relays. The adversary could manage to set relays with
&gt; almost 2 times the consensus weight of the water level, and still being
&gt; used at 100% in the entry position. This would reduce a lot the benefits
&gt; of this proposal, right?

I do not know how much the benefits of the proposal depend on the exact
water level, and how close relays are to the water level.

I chose the exponent "2" as an example that is easy to calculate.
Smaller exponents are possible.

How much variance will your proposal tolerate?
Because current variance is 30% - 60% anyway (see above).
(I think using the median reduces this, but I can't see it going below 40%,
because that's what identical authorities get.)

&gt; - The analysis in our paper works for equations we showed. Even if
&gt; these ones are very similar, I am not sure we can say that it would be
&gt; good without re-doing the research.

I do not know enough to answer this.

&gt; With your explanations below (weight change on clients), and given that
&gt; the consensus diff size is a thing, I am leaning to believe that the
&gt; weight calculation should be done on clients. Anyway, I have added a
&gt; remark about this possibility within the proposal.

Another alternative is to apply proposal 276 weight rounding to these
weights as well.

https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt

I think this may be our best option. Because running all these divisions on
some mobile clients will be very slow and cost a lot of power.

&gt; &gt; &gt; &gt; Why not calculate wmg on clients?
&gt; &gt; &gt; &gt; Why not calculate both wgg and wmg on clients?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; This is again a very good question: for such a critical feature (path \
&gt; &gt; &gt; selection), it is important that the directory auths have full power over the \
&gt; &gt; &gt; weight computation. If it happens that some change are needed, then the Tor \
&gt; &gt; &gt; network is updated in a straightforward way. This is not the case if those \
&gt; &gt; &gt; weights are computed in client code. In fact, I believe that one of the \
&gt; &gt; &gt; strength of this proposal is the oriented design towards the dirauths.
&gt; &gt; Consensus changes on dirauths:
&gt; &gt; * need to use consensus methods
&gt; &gt; * require a 6-12 month deployment time
&gt; &gt; * increases the size of all directory documents
&gt; &gt; * change the whole network
&gt; &gt; * if designed carefully, can be turned off using a network-wide parameter
&gt; &gt; 
&gt; &gt; Weight changes on clients:
&gt; &gt; * require a 3-6 month deployment time
&gt; &gt; * can be deployed to small numbers of clients
&gt; &gt; * if designed carefully, can be turned off using a network-wide parameter
&gt; &gt; 
&gt; &gt; I don't know which we'll prefer if we deploy this.
&gt; 
&gt; I have added a subsection in the proposal with those lines. Looks like
&gt; we have to agree on this topic first before going in details in the
&gt; implementation section?

It is ok to preset two alternatives with pros and cons in a proposal.
The implementation section can provide an algorithm for assigning
waterfilling weights. And then we can decide later where to run it.

&gt; &gt; ...

&gt; &gt; &gt; &gt; Unanswered questions:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. Measuring \
&gt; &gt; &gt; bandwidth and producing bandwidth-weights seems orthogonal to me.
&gt; &gt; You do not need to add a feedback loop, one already exists:
&gt; &gt; 1. Consensus weights on guards and middles change
&gt; &gt; 2. Client use of guards and middles change
&gt; &gt; 3. Bandwidth authority measurements of guards and middles change
&gt; &gt; 4. Repeat from 1
&gt; &gt; 
&gt; &gt; My question is:
&gt; &gt; 
&gt; &gt; How does this existing feedback loop affect your proposal?
&gt; &gt; Does it increase or reduce the size of the guard and middle weight changes?
&gt; 
&gt; I have added those questions to the proposal. This looks difficult to know.

Can shadow simulate this?

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpf5GYACgkQdA2eOQJS
cqLTRA/+JUJSgrwoU5U1GA1bfCnVfoYRQ9dOb55TgcdY7s5APs8mXQBaQSx2r+Oq
QtO4ZkoNSCR1R8KEp5vtWZe/xddHHZR3NlQfG43Wab2fEzhQfuyGAOVsC34x8oyV
gkbtXZshs3ZMmIy2aWBJuwoEH1f2+EMi6GioMc6tlGF8V6fWAt+4xdie1QUWLJ6B
zpZ5CDNNzHH49wa22SgRqJUYhKlZurC5WCSKItVc5RzClXhmAtujXrnkb7ysSkwh
QtrOKmHhD1RO5MN26u0URqXib5SIGb6xfoM0TcfM8q+QP54TPgdaZllnJlAXoyZO
d6V14m+cyvwaUxRdfP0TdWQFukWUPWgX0GnCBGyzFnyoqDzRNXx6iK4PC5Oc0qfF
8bPHi8esaTw3zJ8T+1/MdUM4ByNdWPiMuRx6J7/HZhu6HFpVxqnZgxZHKstY/z8u
moWYHJ4d/RUZjcvhTjP5uSL0HPCxqnM5Kp/PI5bBWx+s+bt/RKr2HSMa2WomP0eW
9jQ+0lqVI0L9UIRxyx74DzAxedWT+24K/5u3pADq8XKDIu/zduBQbirJaK895FG0
T6K4F24CswqT2eBK5d+dpqne+tgorb3YFUwn1fuQ5n1kqF9461pxvwHZ33LGnXex
zHfAGbvPAvWmbqbqzg00KgQEAkFTNq9wIlKPTYAu9nhpad+m6Ig=
=1w8y
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180128105217</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-28 10:52:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hi,

I have some more questions:

On 18 Jan 2018, at 11:03, teor &lt;teor2345@gmail.com&gt; wrote:

&gt; &gt; &gt; &gt; &gt; Unanswered questions:

The Tor network has been experiencing excessive load on guards and 
middles since December 2017.

Does the waterfilling proposal make excessive load on guards worse, by
allocating more guard weight to lower capacity relays?
Is the extra security worth the increased risk of failure?

Does the waterfilling proposal make excessive load on middles better, by
allocating more middle weight to higher capacity relays?
Is there a cascading failure mode, where excess middle weight overwhelms
our top relays one by one? (It seems unlikely.)


I also have another practical question:

We struggle to have time to maintain the current bandwidth authority
system.

Is it a good idea to make it more complicated?
Who will maintain the new code we add to Tor to implement waterfilling?
Who will build the analysis tools to show that waterfilling benefits the
network?

Do the benefits of waterfilling justify this extra effort?

And even if they do, should we focus on getting the bandwidth authorities
in a maintainable state, before adding new features?
(I just gave similar advice to another developer who has some great ideas
about improving bandwidth measurement.)

&gt; &gt; &gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. \
&gt; &gt; &gt; &gt; Measuring bandwidth and producing bandwidth-weights seems orthogonal to me.
&gt; &gt; &gt; You do not need to add a feedback loop, one already exists:
&gt; &gt; &gt; 1. Consensus weights on guards and middles change
&gt; &gt; &gt; 2. Client use of guards and middles change
&gt; &gt; &gt; 3. Bandwidth authority measurements of guards and middles change
&gt; &gt; &gt; 4. Repeat from 1
&gt; &gt; &gt; 
&gt; &gt; &gt; My question is:
&gt; &gt; &gt; 
&gt; &gt; &gt; How does this existing feedback loop affect your proposal?
&gt; &gt; &gt; Does it increase or reduce the size of the guard and middle weight changes?
&gt; &gt; 
&gt; &gt; I have added those questions to the proposal. This looks difficult to know.
&gt; 
&gt; Can shadow simulate this?

I am still interested in this feedback loop.
If it fails to converge, the system will break down.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180128210052</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-01-28 21:00:52-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hello,


On 28/01/18 11:52, teor wrote:
&gt; Hi,
&gt; 
&gt; I have some more questions:

Nice, thanks! I still have to answer your previous email and push an
update to the proposal. I should do it this week, sorry for late answers :)

See inline a few answers to your questions:

&gt; 
&gt; On 18 Jan 2018, at 11:03, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; &gt; &gt; &gt; &gt; &gt; Unanswered questions:
&gt; The Tor network has been experiencing excessive load on guards and 
&gt; middles since December 2017.

If I have correctly followed what was happening: around 1M tor2web
clients appeared at OVH and started to overload the network with circuit
creation requests using the old and costly TAP handshake. Tor2web
clients make direct connections to the intro point and to the rendezvous
point, right? And, looking into the code right now, it does not looks
like Tor2webs make any distinction to flags. So, basically, the Tor2web
load is only weighted by consensus weight (bandwidth-weights have no
impact) on the overall network (exits too).
Guess: shouldn't that the reason why all exits logs are flooded with the
message "[warn] Tried to establish rendezvous on non-OR circuit with
purpose Acting as rendevous (pending)"? Those messages would be caused
by tor2web clients picking exit relays as rendezvous node :/ I started
to see them increasing more and more since August 2017.

So basically, I *think* we can drop the questions below because
bandwidth-weights do not play any role in the excessive load that the
network is handling with those tor2webs.


&gt; Does the waterfilling proposal make excessive load on guards worse, by
&gt; allocating more guard weight to lower capacity relays?
&gt; Is the extra security worth the increased risk of failure?
&gt; 
&gt; Does the waterfilling proposal make excessive load on middles better, by
&gt; allocating more middle weight to higher capacity relays?
&gt; Is there a cascading failure mode, where excess middle weight overwhelms
&gt; our top relays one by one? (It seems unlikely.)
&gt; 
&gt; 
&gt; I also have another practical question:
&gt; 
&gt; We struggle to have time to maintain the current bandwidth authority
&gt; system.
&gt; 
&gt; Is it a good idea to make it more complicated?

Hm, I don't see how Waterfilling plays any role with torflow or
bwscanner? I mean, there is still this feedback loop thing but it has no
impact on the design of the current torflow or bwscanner? Could you be
more specific about your concerns with the bandwidth authorities and
this proposal?

&gt; Who will maintain the new code we add to Tor to implement waterfilling?

I would volunteer to that.

&gt; Who will build the analysis tools to show that waterfilling benefits the
&gt; network?

Volunteers or master students. I can definitely suggest this topic in my
university.

&gt; Do the benefits of waterfilling justify this extra effort?

Question for the other Tor devs :) I am definitely biased towards the "yes"

&gt; And even if they do, should we focus on getting the bandwidth authorities
&gt; in a maintainable state, before adding new features?
&gt; (I just gave similar advice to another developer who has some great ideas
&gt; about improving bandwidth measurement.)
&gt; 

Bandwidth-weights and measurements (consensus weights) are two different
things that solve 2 different problems. So, we can work independently on
improving measurements (like what is currently done with bwscanner) and
improving Tor's balancing (bandwidth-weights) with this proposal.

&gt; &gt; &gt; &gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; &gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. \
&gt; &gt; &gt; &gt; &gt; Measuring bandwidth and producing bandwidth-weights seems orthogonal to me.
&gt; &gt; &gt; &gt; You do not need to add a feedback loop, one already exists:
&gt; &gt; &gt; &gt; 1. Consensus weights on guards and middles change
&gt; &gt; &gt; &gt; 2. Client use of guards and middles change
&gt; &gt; &gt; &gt; 3. Bandwidth authority measurements of guards and middles change
&gt; &gt; &gt; &gt; 4. Repeat from 1
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; My question is:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; How does this existing feedback loop affect your proposal?
&gt; &gt; &gt; &gt; Does it increase or reduce the size of the guard and middle weight changes?
&gt; &gt; &gt; I have added those questions to the proposal. This looks difficult to know.
&gt; &gt; Can shadow simulate this?
&gt; I am still interested in this feedback loop.
&gt; If it fails to converge, the system will break down.

Yup. Going to answer this on your previous email.

Best,
Florentin

&gt; 
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180128224050</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-28 22:40:50-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 29 Jan 2018, at 08:00, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; &gt; On 28/01/18 11:52, teor wrote:
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; I have some more questions:
&gt; 
&gt; Nice, thanks! I still have to answer your previous email and push an
&gt; update to the proposal. I should do it this week, sorry for late answers :)
&gt; 
&gt; See inline a few answers to your questions:
&gt; 
&gt; &gt; 
&gt; &gt; On 18 Jan 2018, at 11:03, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; &gt; Unanswered questions:
&gt; &gt; The Tor network has been experiencing excessive load on guards and 
&gt; &gt; middles since December 2017.
&gt; 
&gt; If I have correctly followed what was happening: around 1M tor2web
&gt; clients appeared at OVH

Not just OVH, at least 3 different providers.

And not just Tor2web, either.
There are onion services which are overloading the network
as well, probably in response to these clients. The onion services
are mostly overloading guard-weighted nodes.

&gt; and started to overload the network with circuit
&gt; creation requests using the old and costly TAP handshake.

Not just TAP. The sheer number of entry connections, extend requests,
and destroy cells is also creating overloads on some relays.

&gt; Tor2web
&gt; clients make direct connections to the intro point and to the rendezvous
&gt; point, right?

Yes.

&gt; And, looking into the code right now, it does not looks
&gt; like Tor2webs make any distinction to flags. So, basically, the Tor2web
&gt; load is only weighted by consensus weight (bandwidth-weights have no
&gt; impact) on the overall network (exits too).

This only applies if Tor2webRendezvousPoints is set.
Otherwise, the nodes are middle-weighted.

&gt; Guess: shouldn't that the reason why all exits logs are flooded with the
&gt; message "[warn] Tried to establish rendezvous on non-OR circuit with
&gt; purpose Acting as rendevous (pending)"? Those messages would be caused
&gt; by tor2web clients picking exit relays as rendezvous node :/ I started
&gt; to see them increasing more and more since August 2017.

No, this is a different issue.
Exit relays are allowed as rendezvous nodes.

&gt; So basically, I *think* we can drop the questions below because
&gt; bandwidth-weights do not play any role in the excessive load that the
&gt; network is handling with those tor2webs.

Guard weights are used by overloading onion services, and middle
weights are used by overloading Tor2web clients.

&gt; &gt; Does the waterfilling proposal make excessive load on guards worse, by
&gt; &gt; allocating more guard weight to lower capacity relays?
&gt; &gt; Is the extra security worth the increased risk of failure?

We want to design a network that can handle different kinds of extra load.
So these questions are important, even if they don't apply right now.

&gt; &gt; Does the waterfilling proposal make excessive load on middles better, by
&gt; &gt; allocating more middle weight to higher capacity relays?
&gt; &gt; Is there a cascading failure mode, where excess middle weight overwhelms
&gt; &gt; our top relays one by one? (It seems unlikely.)

I'm going to re-ask this questions, in light of the extra middle load from
Tor2web clients:

Does the waterfilling proposal make excessive load on middles worse, by
allocating more middle weight to higher capacity relays?

In particular, connections are limited by file descriptors, and file descriptor
limits typically don't scale with the bandwidth of the relay. As far as I can tell,
waterfilling would have directed additional Tor2web traffic to large guards.
It would have brought down my guards faster, and made it much harder for me
to keep them up.

If we had implemented waterfilling before this attack, would it have lead to
cascading failures on our top guards? They would have been carrying
significantly more middle load, and mine barely managed to cope.

Can you redesign the proposal so there is some limit on the extra middle load
assigned to a guard? Or does this ruin the security properties?

Is there a compelling argument for security over network robustness?

&gt; &gt; I also have another practical question:
&gt; &gt; 
&gt; &gt; We struggle to have time to maintain the current bandwidth authority
&gt; &gt; system.
&gt; &gt; 
&gt; &gt; Is it a good idea to make it more complicated?
&gt; 
&gt; Hm, I don't see how Waterfilling plays any role with torflow or
&gt; bwscanner? I mean, there is still this feedback loop thing but it has no
&gt; impact on the design of the current torflow or bwscanner?

I can't really say.
I look forward to your explanation of the feedback loop. 

&gt; Could you be
&gt; more specific about your concerns with the bandwidth authorities and
&gt; this proposal?

It takes time and effort from Tor people to integrate and maintain the
code and monitoring for a new proposal like this one.

We will need to take extra time on this proposal, because we already need
more monitoring for the current bandwidth authority system. And only then
would we have time to build monitoring specific to this proposal.

Also, when we change bandwidth measurement or allocation, we need to
change one thing at a time, and then monitor the change. So depending
on our priorities, this proposal may need to wait until after we implement
and monitor other urgent fixes.

&gt; &gt; Who will maintain the new code we add to Tor to implement waterfilling?
&gt; 
&gt; I would volunteer to that.

Typically, experienced Core Tor team members review and maintain code.

And there's still a lot of development and testing work to be done before
the code is ready to merge. Are you able to do this development?

How much help will you need to write a new consensus method?
How much help will you need to write unit tests?
(This help will come from existing team members.)

Does your current code pass:
* make check
* make test-network-all
  * in particular, any new consensus method must pass the "mixed" network,
    with an unpatched Tor version in your path as "tor-stable"

&gt; &gt; Who will build the analysis tools to show that waterfilling benefits the
&gt; &gt; network?
&gt; 
&gt; Volunteers or master students. I can definitely suggest this topic in my
&gt; university.

Typically, experienced Tor Metrics team members write, review, and maintain
monitoring systems. And they don't have a lot of extra capacity right now.

Even if students do this task, they would need help from existing team
members.

&gt; &gt; Do the benefits of waterfilling justify this extra effort?
&gt; 
&gt; Question for the other Tor devs :) I am definitely biased towards the "yes"

It seems plausible, but I don't feel I have seen a compelling enough argument
to prioritise it above fixing bandwidth authorities.

At the moment, reasonably fast guards in Eastern North America and Western
Europe are overloaded with client traffic. And guards in the rest of the world
are under-loaded. Reducing this bias is something we need to do.

And this proposal gets us better security if we fix this geographical bias first.
Otherwise, adversaries can simply pick a location that massively increases
their consensus weight, and get lots of client traffic.

&gt; &gt; And even if they do, should we focus on getting the bandwidth authorities
&gt; &gt; in a maintainable state, before adding new features?
&gt; &gt; (I just gave similar advice to another developer who has some great ideas
&gt; &gt; about improving bandwidth measurement.)
&gt; &gt; 
&gt; 
&gt; Bandwidth-weights and measurements (consensus weights) are two different
&gt; things that solve 2 different problems. So, we can work independently on
&gt; improving measurements (like what is currently done with bwscanner) and
&gt; improving Tor's balancing (bandwidth-weights) with this proposal.

I don't think this is realistic.
There is always contention for shared resources.

Integrating and testing new code, and monitoring its effects, will take effort from
the teams I mentioned above. This takes away from the urgent work of fixing the
bandwidth authority system. Which also takes effort from the Core Tor and
Metrics teams.

&gt; &gt; &gt; &gt; &gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; &gt; &gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. \
&gt; &gt; &gt; &gt; &gt; &gt; Measuring bandwidth and producing bandwidth-weights seems orthogonal to \
&gt; &gt; &gt; &gt; &gt; &gt; me.
&gt; &gt; &gt; &gt; &gt; You do not need to add a feedback loop, one already exists:
&gt; &gt; &gt; &gt; &gt; 1. Consensus weights on guards and middles change
&gt; &gt; &gt; &gt; &gt; 2. Client use of guards and middles change
&gt; &gt; &gt; &gt; &gt; 3. Bandwidth authority measurements of guards and middles change
&gt; &gt; &gt; &gt; &gt; 4. Repeat from 1
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; My question is:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; How does this existing feedback loop affect your proposal?
&gt; &gt; &gt; &gt; &gt; Does it increase or reduce the size of the guard and middle weight changes?
&gt; &gt; &gt; &gt; I have added those questions to the proposal. This looks difficult to know.
&gt; &gt; &gt; Can shadow simulate this?
&gt; &gt; I am still interested in this feedback loop.
&gt; &gt; If it fails to converge, the system will break down.
&gt; 
&gt; Yup. Going to answer this on your previous email.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 29 Jan 2018, at 08:00, Florentin \
Rochet &lt;&lt;a href="mailto:florentin.rochet@uclouvain.be"&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Hello,&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;On \
28/01/18 11:52, teor wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I have some \
more questions:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Nice, thanks! I still \
have to answer your previous email and push an&lt;/span&gt;&lt;br&gt;&lt;span&gt;update to the \
proposal. I should do it this week, sorry for late answers \
:)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;See inline a few answers to your \
questions:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On 18 Jan \
2018, at 11:03, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Unanswered \
questions:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;The Tor network has been experiencing excessive load on guards and \
&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;middles since December \
2017.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;If I have correctly followed what \
was happening: around 1M tor2web&lt;/span&gt;&lt;br&gt;&lt;span&gt;clients appeared at \
OVH&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Not just OVH, at least 3 different \
providers.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And not just Tor2web, either.&lt;/div&gt;&lt;div&gt;There are \
onion services which are overloading the network&lt;/div&gt;&lt;div&gt;as well, probably in \
response to these clients. The onion services&lt;/div&gt;&lt;div&gt;are mostly overloading \
guard-weighted nodes.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;and started to \
overload the network with circuit&lt;/span&gt;&lt;br&gt;&lt;span&gt;creation requests using the old and \
costly TAP handshake.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Not just TAP. The \
sheer number of entry connections, extend requests,&lt;/div&gt;&lt;div&gt;and destroy cells is \
also creating overloads on some relays.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Tor2web&lt;/span&gt;&lt;br&gt;&lt;span&gt;clients make direct connections to the \
intro point and to the rendezvous&lt;/span&gt;&lt;br&gt;&lt;span&gt;point, \
right?&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;And, looking into the code right now, it does not \
looks&lt;/span&gt;&lt;br&gt;&lt;span&gt;like Tor2webs make any distinction to flags. So, basically, the \
Tor2web&lt;/span&gt;&lt;br&gt;&lt;span&gt;load is only weighted by consensus weight (bandwidth-weights \
have no&lt;/span&gt;&lt;br&gt;&lt;span&gt;impact) on the overall network (exits \
too).&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This only applies if \
Tor2webRendezvousPoints is set.&lt;/div&gt;&lt;div&gt;Otherwise, the nodes are \
middle-weighted.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Guess: shouldn't that \
the reason why all exits logs are flooded with the&lt;/span&gt;&lt;br&gt;&lt;span&gt;message "[warn] \
Tried to establish rendezvous on non-OR circuit with&lt;/span&gt;&lt;br&gt;&lt;span&gt;purpose Acting \
as rendevous (pending)"? Those messages would be caused&lt;/span&gt;&lt;br&gt;&lt;span&gt;by tor2web \
clients picking exit relays as rendezvous node :/ I started&lt;/span&gt;&lt;br&gt;&lt;span&gt;to see \
them increasing more and more since August \
2017.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No, this is a different \
issue.&lt;/div&gt;&lt;div&gt;Exit relays are allowed as rendezvous nodes.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;So basically, I *think* we can drop the questions below \
because&lt;/span&gt;&lt;br&gt;&lt;span&gt;bandwidth-weights do not play any role in the excessive load \
that the&lt;/span&gt;&lt;br&gt;&lt;span&gt;network is handling with those \
tor2webs.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Guard weights are \
used by overloading onion services, and middle&lt;/div&gt;&lt;div&gt;weights are used by \
overloading Tor2web clients.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Does the waterfilling proposal make excessive load on guards worse, \
by&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;allocating more guard weight \
to lower capacity relays?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Is the \
extra security worth the increased risk of \
failure?&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;We want to design a network that \
can handle different kinds of extra load.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;So these questions are important, \
even if they don't apply right now.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Does the waterfilling proposal make \
excessive load on middles better, by&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;allocating more middle weight to higher capacity \
relays?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Is there a cascading \
failure mode, where excess middle weight \
overwhelms&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;our top relays one by \
one? (It seems unlikely.)&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm \
going to re-ask this questions, in light of the extra middle load \
from&lt;/div&gt;&lt;div&gt;Tor2web clients:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Does the \
waterfilling proposal make excessive load on middles worse, \
by&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;allocating more middle weight to higher capacity \
relays?&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;In \
particular, connections are limited by file descriptors, and file \
descriptor&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;limits typically don't scale with \
the bandwidth of the relay. As far as I can tell,&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;waterfilling \
would have directed additional Tor2web traffic to large \
guards.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;It would have brought down my guards faster, and made it \
much &lt;/span&gt;&lt;/font&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;harder for me&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;to keep them up.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;If we had implemented waterfilling \
before this attack, would it have lead to&lt;/div&gt;&lt;div&gt;cascading failures on our top \
guards? They would have been carrying&lt;/div&gt;&lt;div&gt;significantly more middle load, and \
mine barely managed to cope.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can you redesign the proposal \
so there is some limit on the extra middle load&lt;/div&gt;&lt;div&gt;assigned to a guard? Or \
does this ruin the security properties?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is there a \
compelling argument for security over network robustness?&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;I also have another practical \
question:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We struggle \
to have time to maintain the current bandwidth \
authority&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;system.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Is it a good \
idea to make it more complicated?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Hm, I \
don't see how Waterfilling plays any role with torflow or&lt;/span&gt;&lt;br&gt;&lt;span&gt;bwscanner? \
I mean, there is still this feedback loop thing but it has no&lt;/span&gt;&lt;br&gt;&lt;span&gt;impact \
on the design of the current torflow or \
bwscanner?&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I can't really \
say.&lt;/div&gt;&lt;div&gt;I look forward to your explanation of the feedback \
loop. &lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Could you \
be&lt;/span&gt;&lt;br&gt;&lt;span&gt;more specific about your concerns with the bandwidth authorities \
and&lt;/span&gt;&lt;br&gt;&lt;span&gt;this proposal?&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
takes time and effort from Tor people to integrate and maintain the&lt;/div&gt;&lt;div&gt;code \
and monitoring for a new proposal like this one.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We will \
need to take extra time on this proposal, because we already need&lt;/div&gt;&lt;div&gt;more \
monitoring for the current bandwidth authority system. And only then&lt;/div&gt;&lt;div&gt;would \
we have time to build monitoring specific to this \
proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, when we change bandwidth measurement or \
allocation, we need to&lt;/div&gt;&lt;div&gt;change one thing at a time, and then monitor the \
change. So depending&lt;/div&gt;&lt;div&gt;on our priorities, this proposal may need to wait \
until after we implement&lt;/div&gt;&lt;div&gt;and monitor other urgent \
fixes.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Who will \
maintain the new code we add to Tor to implement \
waterfilling?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I would volunteer to \
that.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Typically, experienced Core \
Tor team members review and maintain code.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And there's still \
a lot of development and testing work to be done before&lt;/div&gt;&lt;div&gt;the code is ready \
to merge. Are you able to do this development?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How much help \
will you need to write a new consensus method?&lt;/div&gt;&lt;div&gt;How much help will you need \
to write unit tests?&lt;/div&gt;&lt;div&gt;(This help will come from existing team \
members.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Does your current code pass:&lt;/div&gt;&lt;div&gt;* make \
check&lt;/div&gt;&lt;div&gt;* make test-network-all&lt;/div&gt;&lt;div&gt;  * in particular, any new \
consensus method must pass the "mixed" network,&lt;/div&gt;&lt;div&gt;    with an \
unpatched Tor version in your path as "tor-stable"&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Who will build the analysis tools to \
show that waterfilling benefits the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;network?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Volunteers \
or master students. I can definitely suggest this topic in \
my&lt;/span&gt;&lt;br&gt;&lt;span&gt;university.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Typically, \
experienced Tor Metrics team members write, review, and maintain&lt;/div&gt;&lt;div&gt;monitoring \
systems. And they don't have a lot of extra capacity right \
now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Even if students do this task, they would need help \
from existing team&lt;/div&gt;&lt;div&gt;members.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Do the benefits of waterfilling \
justify this extra effort?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Question for \
the other Tor devs :) I am definitely biased towards the \
"yes"&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;It seems plausible, but I don't \
feel I have seen a compelling enough argument&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;to prioritise it above fixing \
bandwidth authorities.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;At the moment, reasonably fast guards &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;in Eastern North America and \
Western&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Europe are overloaded with client traffic. &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;And guards in the rest of the \
world&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;are \
under-loaded. &lt;/span&gt;Reducing this bias is something we need to \
do.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And this proposal gets us better security if we \
fix this geographical bias first.&lt;/div&gt;&lt;div&gt;Otherwise, adversaries can simply pick a \
location that massively increases&lt;/div&gt;&lt;div&gt;their consensus weight, and get lots of \
client traffic.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;And even if they do, should we focus on getting the bandwidth \
authorities&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;in a maintainable \
state, before adding new features?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;(I just gave similar advice to another developer who has some great \
ideas&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;about improving bandwidth \
measurement.)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Bandwidth-weights \
and measurements (consensus weights) are two different&lt;/span&gt;&lt;br&gt;&lt;span&gt;things that \
solve 2 different problems. So, we can work independently \
on&lt;/span&gt;&lt;br&gt;&lt;span&gt;improving measurements (like what is currently done with \
bwscanner) and&lt;/span&gt;&lt;br&gt;&lt;span&gt;improving Tor's balancing (bandwidth-weights) with \
this proposal.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I don't think this is \
realistic.&lt;/div&gt;&lt;div&gt;There is always contention for shared \
resources.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Integrating and testing new code, and monitoring \
its effects, will take effort from&lt;/div&gt;&lt;div&gt;the teams I mentioned above. This takes \
away from the urgent work of fixing the&lt;/div&gt;&lt;div&gt;bandwidth authority system. Which \
also takes effort from the Core Tor and&lt;/div&gt;&lt;div&gt;Metrics teams.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;What about the feedback loop between this new allocation \
system&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;and the bandwidth \
authorities?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I am sorry, I don't really understand why a \
feedback loop is needed. Measuring bandwidth and producing bandwidth-weights seems \
orthogonal to me.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;You do not need to add a feedback loop, one already \
exists:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180131201545</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-01-31 20:15:45-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hi,

I updated the proposal with some more of your advises, questions and
concerns.

On 18/01/18 01:03, teor wrote:
&gt; 
&gt; &gt; I've added this concern within the 'unanswered questions' section. This
&gt; &gt; proposal assumes relay measurement are reliable (consensus weight).
&gt; How reliable?
&gt; 
&gt; Current variance is 30% - 40% between identical bandwidth authorities, and
&gt; 30% - 60% between all bandwidth authorities.
&gt; 
&gt; Sources:
&gt; https://tomrittervg.github.io/bwauth-tools/#apples-to-apples-comparison
&gt; https://tomrittervg.github.io/bwauth-tools/#updated-01
&gt; 
&gt; Is this sufficient?

My apologies, I was not enough specific: we assume bandwidth
measurements reliable as an hypothesis to make the claim that
Waterfilling is not going to reduce or improve the performance. If these
measurements are not reliable enough, then Waterfilling might make
things better, worse or both compared to the current bandwidth-weights
is some unpredictable way. All of this depends on the bandwidth
authority. Anyway, I willingly agree that we need some kind of tools
able to report on such modification. Besides, those tools could be
reused for any new proposal impacting the path selection, such as
research protecting against network adversaries or even some of the
changes you already plan to do (such as Prop 276).

&gt; &lt;skip&gt;
&gt; &gt; Wow, so first of all, thanks for suggesting new ways of resolving
&gt; &gt; issues. I really appreciate your consideration for this work.
&gt; &gt; 
&gt; &gt; This suggestion indeed reduces the diff problem, and I find it elegant.
&gt; &gt; But, I have the following concerns:
&gt; &gt; 
&gt; &gt; - The upper bound in (a) is huge, and would be appreciated for an
&gt; &gt; adversary running relays. The adversary could manage to set relays with
&gt; &gt; almost 2 times the consensus weight of the water level, and still being
&gt; &gt; used at 100% in the entry position. This would reduce a lot the benefits
&gt; &gt; of this proposal, right?
&gt; I do not know how much the benefits of the proposal depend on the exact
&gt; water level, and how close relays are to the water level.
&gt; 
&gt; I chose the exponent "2" as an example that is easy to calculate.
&gt; Smaller exponents are possible.
&gt; 
&gt; How much variance will your proposal tolerate?
&gt; Because current variance is 30% - 60% anyway (see above).

The variance is not a problem if the water level is adapted
(re-computed) at each consensus.

&gt; (I think using the median reduces this, but I can't see it going below 40%,
&gt; because that's what identical authorities get.)
&gt; 
&gt; &gt; - The analysis in our paper works for equations we showed. Even if
&gt; &gt; these ones are very similar, I am not sure we can say that it would be
&gt; &gt; good without re-doing the research.
&gt; I do not know enough to answer this.
&gt; 
&gt; &gt; With your explanations below (weight change on clients), and given that
&gt; &gt; the consensus diff size is a thing, I am leaning to believe that the
&gt; &gt; weight calculation should be done on clients. Anyway, I have added a
&gt; &gt; remark about this possibility within the proposal.
&gt; Another alternative is to apply proposal 276 weight rounding to these
&gt; weights as well.
&gt; 
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt;  
&gt; I think this may be our best option. Because running all these divisions on
&gt; some mobile clients will be very slow and cost a lot of power.

Added this to the proposal. We might also "divide" the algorithm: what
about computing the weights on dirauths but broadcasting only the pivot
(the index of the relay at the water level). Clients can then resume the
computation and produce the weights themselves with a reduced cost.
Strength:
  - The weight calculation would be O(n) on clients (n being the size of
the guard set) instead of O(n*log(n))
  - No impact on the consensus diff (well, except 1 line, the pivot value).
Weakness:
  - We still have O(n) divisions on the client, each time we download a
new consensus.

&gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; &gt; Unanswered questions:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; What about the feedback loop between this new allocation system
&gt; &gt; &gt; &gt; &gt; and the bandwidth authorities?
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I am sorry, I don't really understand why a feedback loop is needed. \
&gt; &gt; &gt; &gt; Measuring bandwidth and producing bandwidth-weights seems orthogonal to me.
&gt; &gt; &gt; You do not need to add a feedback loop, one already exists:
&gt; &gt; &gt; 1. Consensus weights on guards and middles change
&gt; &gt; &gt; 2. Client use of guards and middles change
&gt; &gt; &gt; 3. Bandwidth authority measurements of guards and middles change
&gt; &gt; &gt; 4. Repeat from 1
&gt; &gt; &gt; 
&gt; &gt; &gt; My question is:
&gt; &gt; &gt; 
&gt; &gt; &gt; How does this existing feedback loop affect your proposal?
&gt; &gt; &gt; Does it increase or reduce the size of the guard and middle weight changes?
&gt; &gt; I have added those questions to the proposal. This looks difficult to know.
&gt; Can shadow simulate this?

I am not fully sure about this. Shadow's topology is static, meaning
that a change in advertised bandwidth does not change the uplink and
downlink bandwidth configured by the initial advertised bandwidth. But,
Shadow can use a Torflow plugin and continuously measure the virtual
network, which would produce the feedback loop you describe. However, we
have to run the simulation long enough to observe this effect, which was
not done in our research. We ran 1 virtual hour for each simulation
during our experiments (1 week of real time for each...).

Best,
Florentin

&gt; --
&gt; Tim / teor
&gt; 
&gt; PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
&gt; ricochet:ekmygaiu4rzgsk6n
&gt; ------------------------------------------------------------------------
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180303153718</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-03 15:37:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hi teor,

Sorry about the huge delay :)

I've added your following idea to the proposal (seems we come up to the
right way to do it :-)):

&gt; Why not list the waterfilling level on a single line in the consensus?
&gt;
&gt; That way:
&gt; * authorities do the expensive calculation
&gt; * clients can re-weight relays using a simple calculation:
&gt;
&gt; if it is less than or equal to the waterfilling level:
&gt;   use the relay's weight as its guard weight
&gt;   use 0 as its middle weight
&gt; otherwise:
&gt;   use the waterfilling level as the relay's guard weight
&gt;   use the relay's weight minus the waterfilling level as its middle weight
&gt;
&gt; This is O(n) and requires one comparison and one subtraction in the worst case.

I have a few questions about convergence/divergence of weights, but
maybe we could take advantage of the meeting in Rome to discuss this avenue?

On 28/01/18 23:40, teor wrote:
&gt; &lt;skip&gt;
&gt; I'm going to re-ask this questions, in light of the extra middle load from
&gt; Tor2web clients:
&gt;
&gt; Does the waterfilling proposal make excessive load on middles worse, by
&gt; allocating more middle weight to higher capacity relays?
&gt;

If bwauths overestimate top relays, or if we reach some soft limit, yes.
But the reverse would be true too: if we have excessive load of guards,
then this proposal will make things better.

&gt; In particular, connections are limited by file descriptors, and file
&gt; descriptor
&gt; limits typically don't scale with the bandwidth of the relay. As far
&gt; as I can tell,
&gt; waterfilling would have directed additional Tor2web traffic to large
&gt; guards.
&gt; It would have brought down my guards faster, and made it much harder
&gt; for me
&gt; to keep them up.
&gt;
&gt; If we had implemented waterfilling before this attack, would it have
&gt; lead to
&gt; cascading failures on our top guards? They would have been carrying
&gt; significantly more middle load, and mine barely managed to cope.
&gt;

Probably yes, but they would also carrying less load at the guard
position from normal Tor users. In normal condition, that should tie. In
a DDoS situation, I would say we face difficulties no matter what we do.

&gt; Can you redesign the proposal so there is some limit on the extra
&gt; middle load
&gt; assigned to a guard? Or does this ruin the security properties?
&gt;
&gt; Is there a compelling argument for security over network robustness?
&gt;

Questions added to the proposal :)

&gt; &lt;skip&gt;
&gt;&gt; Could you be
&gt;&gt; more specific about your concerns with the bandwidth authorities and
&gt;&gt; this proposal?
&gt;
&gt; It takes time and effort from Tor people to integrate and maintain the
&gt; code and monitoring for a new proposal like this one.
&gt;
&gt; We will need to take extra time on this proposal, because we already need
&gt; more monitoring for the current bandwidth authority system. And only then
&gt; would we have time to build monitoring specific to this proposal.
&gt;
&gt; Also, when we change bandwidth measurement or allocation, we need to
&gt; change one thing at a time, and then monitor the change. So depending
&gt; on our priorities, this proposal may need to wait until after we implement
&gt; and monitor other urgent fixes.
&gt;

Yes, this proposal can wait, it's totally up to you. I agree that fixing
the current bwauthorities should be somewhat on the top of priorities.
But nothing prevents us to further discuss this proposal and make plans.

&gt;&gt;&gt; Who will maintain the new code we add to Tor to implement waterfilling?
&gt;&gt;
&gt;&gt; I would volunteer to that.
&gt;
&gt; Typically, experienced Core Tor team members review and maintain code.
&gt;
&gt; And there's still a lot of development and testing work to be done before
&gt; the code is ready to merge. Are you able to do this development?
&gt;

If I can make this as a research project, that can be very fast. If I
have to do this on my spare time, that's going to be a bit slower.

&gt; How much help will you need to write a new consensus method?
&gt; How much help will you need to write unit tests?
&gt; (This help will come from existing team members.)
&gt;

I should be fine with both. Adding a new consensus method does not seem
too much difficult at first glance, but removing one looks a bit more
challenging. Hopefully, I just need to add one :)

&gt; Does your current code pass:
&gt; * make check
&gt; * make test-network-all
&gt;   * in particular, any new consensus method must pass the "mixed" network,
&gt;     with an unpatched Tor version in your path as "tor-stable"
&gt;

As much as I recall, make check passed as well as chutney networks. I
don't remember what test I did back at that time, though. If we go for
an up-to-date implementation, I willl make sure everything's ok :)

&gt; &lt;skip&gt;
&gt;&gt; Bandwidth-weights and measurements (consensus weights) are two different
&gt;&gt; things that solve 2 different problems. So, we can work independently on
&gt;&gt; improving measurements (like what is currently done with bwscanner) and
&gt;&gt; improving Tor's balancing (bandwidth-weights) with this proposal.
&gt;
&gt; I don't think this is realistic.
&gt; There is always contention for shared resources.
&gt;
&gt; Integrating and testing new code, and monitoring its effects, will
&gt; take effort from
&gt; the teams I mentioned above. This takes away from the urgent work of
&gt; fixing the
&gt; bandwidth authority system. Which also takes effort from the Core Tor and
&gt; Metrics teams.

Right, totally agree that the first focus should be on bwauths. Could we
try to make plan, or at least move this proposal into the todo list?
Looking forward to meet you in Rome :)

Best,
Florentin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180303210236</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-03 21:02:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 4 Mar 2018, at 02:37, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; I have a few questions about convergence/divergence of weights, but
&gt; maybe we could take advantage of the meeting in Rome to discuss this avenue?

I was wrong. The current network doesn't attempt to converge
on a stable set of weights, because the feedback loop is too
weak. So I think we can disregard this question.

&gt;&gt; On 28/01/18 23:40, teor wrote:
&gt;&gt; &lt;skip&gt;
&gt;&gt; I'm going to re-ask this questions, in light of the extra middle load from
&gt;&gt; Tor2web clients:
&gt;&gt; 
&gt;&gt; Does the waterfilling proposal make excessive load on middles worse, by
&gt;&gt; allocating more middle weight to higher capacity relays?
&gt; 
&gt; If bwauths overestimate top relays, or if we reach some soft limit, yes.
&gt; But the reverse would be true too: if we have excessive load of guards,
&gt; then this proposal will make things better.

I'm not sure that this statement is true.

Rather:
If we have excessive load on middles, then top relays will suffer more.
If we have excessive load on guards, then lower relays will suffer more.

You can actually lose both ways when you unbalance network load.
It depends on the type of load.

&gt;&gt; In particular, connections are limited by file descriptors, and file
&gt;&gt; descriptor
&gt;&gt; limits typically don't scale with the bandwidth of the relay. As far
&gt;&gt; as I can tell,
&gt;&gt; waterfilling would have directed additional Tor2web traffic to large
&gt;&gt; guards.
&gt;&gt; It would have brought down my guards faster, and made it much harder
&gt;&gt; for me
&gt;&gt; to keep them up.
&gt;&gt; 
&gt;&gt; If we had implemented waterfilling before this attack, would it have
&gt;&gt; lead to
&gt;&gt; cascading failures on our top guards? They would have been carrying
&gt;&gt; significantly more middle load, and mine barely managed to cope.
&gt;&gt; 
&gt; 
&gt; Probably yes, but they would also carrying less load at the guard
&gt; position from normal Tor users. In normal condition, that should tie. In
&gt; a DDoS situation, I would say we face difficulties no matter what we do.

I think that unbalanced networks tend to suffer more during a DDoS.

&gt; …
&gt;&gt; &lt;skip&gt;
&gt;&gt;&gt; Bandwidth-weights and measurements (consensus weights) are two different
&gt;&gt;&gt; things that solve 2 different problems. So, we can work independently on
&gt;&gt;&gt; improving measurements (like what is currently done with bwscanner) and
&gt;&gt;&gt; improving Tor's balancing (bandwidth-weights) with this proposal.
&gt;&gt; 
&gt;&gt; I don't think this is realistic.
&gt;&gt; There is always contention for shared resources.
&gt;&gt; 
&gt;&gt; Integrating and testing new code, and monitoring its effects, will
&gt;&gt; take effort from
&gt;&gt; the teams I mentioned above. This takes away from the urgent work of
&gt;&gt; fixing the
&gt;&gt; bandwidth authority system. Which also takes effort from the Core Tor and
&gt;&gt; Metrics teams.
&gt; 
&gt; Right, totally agree that the first focus should be on bwauths. Could we
&gt; try to make plan, or at least move this proposal into the todo list?

While we're talking priorities, I would also prioritise fixing the
guardfraction code over this proposal. When we work out how to test
guardfraction, we can use similar tests for this proposal.

At the moment, this proposal is "OPEN", because it is still under
discussion:
https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n148

If you want to move it to "ACCEPTED":
* answer as many open questions as you can
* reply to this thread with a link to the final version of the proposal
* we will open a ticket for the proposal
* we will schedule a proposal meeting on IRC to discuss the proposal

Please be aware:
* It sometimes takes years for research to make it into Tor.
* Some research is good research, but it is not a good fit for the public
  Tor network.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 4 Mar 2018, at 02:37, \
Florentin Rochet &lt;&lt;a \
href="mailto:florentin.rochet@uclouvain.be"&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;I have a few questions about \
convergence/divergence of weights, but&lt;/span&gt;&lt;br&gt;&lt;span&gt;maybe we could take advantage \
of the meeting in Rome to discuss this \
avenue?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I was wrong. The current \
network doesn't attempt to converge&lt;/div&gt;&lt;div&gt;on a stable set of weights, because the \
feedback loop is too&lt;/div&gt;&lt;div&gt;weak. So I think we can disregard this \
question.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;On 28/01/18 23:40, teor \
wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;skip&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;I'm going to re-ask this questions, in light of the extra middle \
load from&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Tor2web \
clients:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Does the \
waterfilling proposal make excessive load on middles worse, \
by&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;allocating more middle weight \
to higher capacity relays?&lt;/span&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;If bwauths \
overestimate top relays, or if we reach some soft limit, yes.&lt;/span&gt;&lt;br&gt;&lt;span&gt;But the \
reverse would be true too: if we have excessive load of guards,&lt;/span&gt;&lt;br&gt;&lt;span&gt;then \
this proposal will make things \
better.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm not sure that this \
statement is true.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Rather:&lt;/div&gt;&lt;div&gt;If we have excessive \
load on middles, then top relays will suffer more.&lt;/div&gt;&lt;div&gt;If we have excessive \
load on guards, then lower relays will suffer more.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can \
actually lose both ways when you unbalance network load.&lt;/div&gt;&lt;div&gt;It depends on the \
type of load.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;In \
particular, connections are limited by file descriptors, and \
file&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;limits typically don't scale with the bandwidth of the relay. As \
far&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;as I can \
tell,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;waterfilling would have \
directed additional Tor2web traffic to large&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;guards.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It \
would have brought down my guards faster, and made it \
much harder&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;for \
me&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;to keep them \
up.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If we had \
implemented waterfilling before this attack, would it \
have&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;lead \
to&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;cascading failures on our top \
guards? They would have been carrying&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;significantly more middle load, and mine barely managed to \
cope.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Probably yes, but \
they would also carrying less load at the guard&lt;/span&gt;&lt;br&gt;&lt;span&gt;position from normal \
Tor users. In normal condition, that should tie. In&lt;/span&gt;&lt;br&gt;&lt;span&gt;a DDoS situation, \
I would say we face difficulties no matter what we \
do.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think that unbalanced networks \
tend to suffer more during a DDoS.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#00afcd"&gt;…&lt;/font&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;skip&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Bandwidth-weights and measurements \
(consensus weights) are two different&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;things that solve 2 different problems. So, \
we can work independently on&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;improving measurements (like what is \
currently done with bwscanner) and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;improving Tor's balancing \
(bandwidth-weights) with this \
proposal.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I don't think \
this is realistic.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;There is \
always contention for shared resources.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Integrating \
and testing new code, and monitoring its effects, \
will&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;take effort \
from&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;the teams I mentioned \
above. This takes away from the urgent work of&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;fixing the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;bandwidth authority system. Which also takes effort from the Core \
Tor and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Metrics \
teams.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Right, totally agree that the \
first focus should be on bwauths. Could we&lt;/span&gt;&lt;br&gt;&lt;span&gt;try to make plan, or at \
least move this proposal into the todo \
list?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;While we're talking priorities, I would \
also prioritise fixing the&lt;div&gt;guardfraction code over this proposal. When we work \
out how to test&lt;/div&gt;&lt;div&gt;guardfraction, we can use similar tests for this \
proposal.&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;At the moment, this proposal is "OPEN", because it is \
still under&lt;/div&gt;&lt;div&gt;discussion:&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n148"&gt;h \
ttps://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n148&lt;/a&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
you want to move it to "ACCEPTED":&lt;/div&gt;&lt;div&gt;* answer as many open questions as you \
can&lt;/div&gt;&lt;div&gt;* reply to this thread with a link to the final version of the \
proposal&lt;/div&gt;&lt;div&gt;* we will open a ticket for the proposal&lt;/div&gt;&lt;div&gt;* we will \
schedule a proposal meeting on IRC to discuss the \
proposal&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please be aware:&lt;/div&gt;&lt;div&gt;* It sometimes takes \
years for research to make it into Tor.&lt;/div&gt;&lt;div&gt;* Some research is good research, \
but it is not a good fit for the public&lt;/div&gt;&lt;div&gt;  Tor \
network.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180305223000</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-05 22:30:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hello,

I recently took the time to read the waterfilling paper. I'm not sure its a good idea \
even for the goal of increasing the cost of traffic correlation attacks. It depends \
on whether it is easier for an adversary to run many small relays of total weight x \
or a few large relays of total weight y, where x = y*c with c the fraction of a \
Guard-flagged relay used in the guard position (I believe that c=2/3 currently, as \
Wgg=7268 and Wmg=2732). Just to emphasize it: waterfilling requires *less bandwidth* \
to achieve a given guard probability as is needed in Tor currently.

Based on prices I've seen (~$2/IP/month vs. ~$500/Gbps/month), its significantly \
cheaper to add a new relay than it is to add bandwidth commensurate with the \
highest-bandwidth relays. If an adversary finds it easier to compromise machines, \
then waterfilling might help as it lowers the guard probability of high-bandwidth \
relays. However, for adversaries with the resources to posses zero-day \
vulnerabilities against the well-run high-bandwidth relays, it seems to me that those \
adversaries would easily also have the resources to run relays instead, and in fact \
it would probably be cheaper for them to run relays as zero-days are expensive. \
Adversaries with botnets, which have many IPs but generally low bandwidth, would \
benefit from waterfilling, as it would increase the number of clients choosing them \
as guards that they can then attack. Waterfilling doesn't clearly make things better \
or worse against network-level adversaries.

Thus, it doesn't seem to me that waterfilling protects Tor's users against their \
likely adversaries, and in fact is likely to make things less secure in a few \
important cases.

Best,
Aaron

&gt; On Jan 31, 2018, at 5:01 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; 
&gt; On 1 Feb 2018, at 07:15, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; &gt; &gt; On 18/01/18 01:03, teor wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I've added this concern within the 'unanswered questions' section. This
&gt; &gt; &gt; &gt; proposal assumes relay measurement are reliable (consensus weight).
&gt; &gt; &gt; How reliable?
&gt; &gt; &gt; 
&gt; &gt; &gt; Current variance is 30% - 40% between identical bandwidth authorities, and
&gt; &gt; &gt; 30% - 60% between all bandwidth authorities.
&gt; &gt; &gt; 
&gt; &gt; &gt; Sources:
&gt; &gt; &gt; https://tomrittervg.github.io/bwauth-tools/#apples-to-apples-comparison
&gt; &gt; &gt; https://tomrittervg.github.io/bwauth-tools/#updated-01
&gt; &gt; &gt; 
&gt; &gt; &gt; Is this sufficient?
&gt; &gt; 
&gt; &gt; My apologies, I was not enough specific: we assume bandwidth
&gt; &gt; measurements reliable as an hypothesis to make the claim that
&gt; &gt; Waterfilling is not going to reduce or improve the performance. If these
&gt; &gt; measurements are not reliable enough, then Waterfilling might make
&gt; &gt; things better, worse or both compared to the current bandwidth-weights
&gt; &gt; is some unpredictable way.
&gt; 
&gt; This variance is measurement error. In this case, discretization error is
&gt; less than 1%.
&gt; 
&gt; We need to know whether measurement inaccuracy makes the network
&gt; weights converge or diverge under your scheme.
&gt; 
&gt; It looks like they converge on the current network with the current
&gt; bandwidth authorities. This is an essential property we need to keep.
&gt; 
&gt; &gt; All of this depends on the bandwidth
&gt; &gt; authority. Anyway, I willingly agree that we need some kind of tools
&gt; &gt; able to report on such modification. Besides, those tools could be
&gt; &gt; reused for any new proposal impacting the path selection, such as
&gt; &gt; research protecting against network adversaries or even some of the
&gt; &gt; changes you already plan to do (such as Prop 276).
&gt; 
&gt; Yes, we are hoping to introduce better tools over time.
&gt; 
&gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; …
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; - The upper bound in (a) is huge, and would be appreciated for an
&gt; &gt; &gt; &gt; adversary running relays. The adversary could manage to set relays with
&gt; &gt; &gt; &gt; almost 2 times the consensus weight of the water level, and still being
&gt; &gt; &gt; &gt; used at 100% in the entry position. This would reduce a lot the benefits
&gt; &gt; &gt; &gt; of this proposal, right?
&gt; &gt; &gt; I do not know how much the benefits of the proposal depend on the exact
&gt; &gt; &gt; water level, and how close relays are to the water level.
&gt; &gt; &gt; 
&gt; &gt; &gt; …
&gt; &gt; &gt; 
&gt; &gt; &gt; How much variance will your proposal tolerate?
&gt; &gt; &gt; Because current variance is 30% - 60% anyway (see above).
&gt; &gt; 
&gt; &gt; The variance is not a problem if the water level is adapted
&gt; &gt; (re-computed) at each consensus.
&gt; 
&gt; I'm not sure we're talking about the same thing here.
&gt; The variance I am talking about here is measurement error and
&gt; discretization error. Re-computation doesn't change the error.
&gt; (And going from relay measurement to consensus bandwidth can take hours.)
&gt; 
&gt; See my comment above about convergence: we need to converge in
&gt; the presence of discretization error, too.
&gt; 
&gt; &gt; &gt; …
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; With your explanations below (weight change on clients), and given that
&gt; &gt; &gt; &gt; the consensus diff size is a thing, I am leaning to believe that the
&gt; &gt; &gt; &gt; weight calculation should be done on clients. Anyway, I have added a
&gt; &gt; &gt; &gt; remark about this possibility within the proposal.
&gt; &gt; &gt; Another alternative is to apply proposal 276 weight rounding to these
&gt; &gt; &gt; weights as well.
&gt; &gt; &gt; 
&gt; &gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt; &gt; &gt;  
&gt; &gt; &gt; I think this may be our best option. Because running all these divisions on
&gt; &gt; &gt; some mobile clients will be very slow and cost a lot of power.
&gt; &gt; 
&gt; &gt; Added this to the proposal. We might also "divide" the algorithm: what
&gt; &gt; about computing the weights on dirauths but broadcasting only the pivot
&gt; &gt; (the index of the relay at the water level). Clients can then resume the
&gt; &gt; computation and produce the weights themselves with a reduced cost.
&gt; &gt; Strength:
&gt; &gt; - The weight calculation would be O(n) on clients (n being the size of
&gt; &gt; the guard set) instead of O(n*log(n))
&gt; &gt; - No impact on the consensus diff (well, except 1 line, the pivot value).
&gt; &gt; Weakness:
&gt; &gt; - We still have O(n) divisions on the client, each time we download a
&gt; &gt; new consensus.
&gt; 
&gt; Why not list the waterfilling level on a single line in the consensus?
&gt; 
&gt; That way:
&gt; * authorities do the expensive calculation
&gt; * clients can re-weight relays using a simple calculation:
&gt; 
&gt; if it is less than or equal to the waterfilling level:
&gt; use the relay's weight as its guard weight
&gt; use 0 as its middle weight
&gt; otherwise:
&gt; use the waterfilling level as the relay's guard weight
&gt; use the relay's weight minus the waterfilling level as its middle weight
&gt; 
&gt; This is O(n) and requires one comparison and one subtraction in the worst case.
&gt; 
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307082804</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-07 08:28:04-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hi Aaron,

Thanks for your comments, you are definitely touching interesting aspects.

Here are thoughts regarding your objections:

1) The cost of IPs vs. bandwidth is definitely a function of market 
offers. Your $500/Gbps/month seems quite expensive compared to what can 
be found on OVH (which is hosting a large number of relays): they ask ~3 
euros/IP/month, including unlimited 100 Mbps traffic. If we assume that 
wgg = 2/3 and a water level at 10Mbps, this means that, if you want to 
have 1Gbps of guard bandwidth,
- the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
- the waterfilling mechanism would cost you 3 * 100 = 300 euros/month

We do not believe that this is conclusive, as the market changes, and 
there certainly are dozens of other providers.

The same applies for 0-day attacks: if you need to buy them just for 
attacking Tor, then they are expensive. If you are an organization in 
the business of handling 0-day attacks for various other reasons, then 
the costs are very different. And it may be unclear to determine if it 
is easier/cheaper to compromise 1 top relay or 20 mid-level relays.

And we are not sure that the picture is so clear about botnets either: 
bots that can become guards need to have high availability (in order to 
pass the guard stability requirements), and such high availability bots 
are also likely to have a bandwidth that is higher than the water level 
(abandoned machines in university networks, ...). As a result, 
waterfilling would increase the number of high availability bots that 
are needed, which is likely to be hard.

2) Waterfilling makes it necessary for an adversary to run a larger 
number of relays. Apart from the costs of service providers, this large 
number of relays need to be managed in an apparently independent way, 
otherwise they would become suspicious to community  members, like 
nusenu who is doing a great job spotting all anomalies. It seems 
plausible that running 100 relays in such a way that they look 
independent is at least as difficult as doing that with 10 relays.

3) The question of the protection from relays, ASes or IXPs is puzzling, 
and we do not have a strong opinion about it. We focused on relays 
because they are what is available to any attacker, compared to ASes or 
IXPs which are more specific adversaries. But, if there is a consensus 
that ASes or IXPs should rather be considered as the main target, it is 
easy to implement waterfilling at the AS or IXP level rather than at the 
IP level: just aggregate the bandwidth relayed per AS or IXP, and apply 
the waterfilling level computation method to them. Or we could mix the 
weights obtained for all these adversaries, in order to get some 
improvement against all of them instead of an improvement against only 
one and being agnostic about the others.

4) More fundamentally, since the fundamental idea of Tor is to mix 
traffic through a large number of relays, it seems to be a sound design 
principle to make the choice of the critical relays as uniform as 
possible, as Waterfilling aims to do. A casual Tor user may be concerned 
to see that his traffic is very likely to be routed through a very small 
number of top relays, and this effect is likely to increase as soon as 
a  multi-cores compliant implementation of Tor rises (rust dev). Current 
top relays which suffer from the main CPU bottleneck will probably be 
free to relay even more bandwidth than they already do, and gain an even 
more disproportionate consensus weight. Waterfilling might prevent that, 
and keep those useful relays doing their job at the middle position of 
paths.

We hope those thoughts can help, and thanks again for sharing yours.

Best,

Florentin and Olivier

On 2018-03-05 23:30, Aaron Johnson wrote:
&gt; Hello,
&gt; 
&gt; I recently took the time to read the waterfilling paper. I’m not sure its a good \
&gt; idea even for the goal of increasing the cost of traffic correlation attacks. It \
&gt; depends on whether it is easier for an adversary to run many small relays of total \
&gt; weight x or a few large relays of total weight y, where x = y*c with c the fraction \
&gt; of a Guard-flagged relay used in the guard position (I believe that c=2/3 \
&gt; currently, as Wgg=7268 and Wmg=2732). Just to emphasize it: waterfilling requires \
&gt; *less bandwidth* to achieve a given guard probability as is needed in Tor \
&gt; currently. 
&gt; Based on prices I’ve seen (~$2/IP/month vs. ~$500/Gbps/month), its significantly \
&gt; cheaper to add a new relay than it is to add bandwidth commensurate with the \
&gt; highest-bandwidth relays. If an adversary finds it easier to compromise machines, \
&gt; then waterfilling might help as it lowers the guard probability of high-bandwidth \
&gt; relays. However, for adversaries with the resources to posses zero-day \
&gt; vulnerabilities against the well-run high-bandwidth relays, it seems to me that \
&gt; those adversaries would easily also have the resources to run relays instead, and \
&gt; in fact it would probably be cheaper for them to run relays as zero-days are \
&gt; expensive. Adversaries with botnets, which have many IPs but generally low \
&gt; bandwidth, would benefit from waterfilling, as it would increase the number of \
&gt; clients choosing them as guards that they can then attack. Waterfilling doesn’t \
&gt; clearly make things better or worse against network-level adversaries. 
&gt; Thus, it doesn’t seem to me that waterfilling protects Tor’s users against their \
&gt; likely adversaries, and in fact is likely to make things less secure in a few \
&gt; important cases. 
&gt; Best,
&gt; Aaron
&gt; 
&gt; &gt; On Jan 31, 2018, at 5:01 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; On 1 Feb 2018, at 07:15, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; &gt; On 18/01/18 01:03, teor wrote:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; I've added this concern within the 'unanswered questions' section. This
&gt; &gt; &gt; &gt; &gt; proposal assumes relay measurement are reliable (consensus weight).
&gt; &gt; &gt; &gt; How reliable?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Current variance is 30% - 40% between identical bandwidth authorities, and
&gt; &gt; &gt; &gt; 30% - 60% between all bandwidth authorities.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Sources:
&gt; &gt; &gt; &gt; https://tomrittervg.github.io/bwauth-tools/#apples-to-apples-comparison
&gt; &gt; &gt; &gt; https://tomrittervg.github.io/bwauth-tools/#updated-01
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Is this sufficient?
&gt; &gt; &gt; My apologies, I was not enough specific: we assume bandwidth
&gt; &gt; &gt; measurements reliable as an hypothesis to make the claim that
&gt; &gt; &gt; Waterfilling is not going to reduce or improve the performance. If these
&gt; &gt; &gt; measurements are not reliable enough, then Waterfilling might make
&gt; &gt; &gt; things better, worse or both compared to the current bandwidth-weights
&gt; &gt; &gt; is some unpredictable way.
&gt; &gt; This variance is measurement error. In this case, discretization error is
&gt; &gt; less than 1%.
&gt; &gt; 
&gt; &gt; We need to know whether measurement inaccuracy makes the network
&gt; &gt; weights converge or diverge under your scheme.
&gt; &gt; 
&gt; &gt; It looks like they converge on the current network with the current
&gt; &gt; bandwidth authorities. This is an essential property we need to keep.
&gt; &gt; 
&gt; &gt; &gt; All of this depends on the bandwidth
&gt; &gt; &gt; authority. Anyway, I willingly agree that we need some kind of tools
&gt; &gt; &gt; able to report on such modification. Besides, those tools could be
&gt; &gt; &gt; reused for any new proposal impacting the path selection, such as
&gt; &gt; &gt; research protecting against network adversaries or even some of the
&gt; &gt; &gt; changes you already plan to do (such as Prop 276).
&gt; &gt; Yes, we are hoping to introduce better tools over time.
&gt; &gt; 
&gt; &gt; &gt; &gt; &lt;skip&gt;
&gt; &gt; &gt; &gt; &gt; …
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; - The upper bound in (a) is huge, and would be appreciated for an
&gt; &gt; &gt; &gt; &gt; adversary running relays. The adversary could manage to set relays with
&gt; &gt; &gt; &gt; &gt; almost 2 times the consensus weight of the water level, and still being
&gt; &gt; &gt; &gt; &gt; used at 100% in the entry position. This would reduce a lot the benefits
&gt; &gt; &gt; &gt; &gt; of this proposal, right?
&gt; &gt; &gt; &gt; I do not know how much the benefits of the proposal depend on the exact
&gt; &gt; &gt; &gt; water level, and how close relays are to the water level.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; …
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; How much variance will your proposal tolerate?
&gt; &gt; &gt; &gt; Because current variance is 30% - 60% anyway (see above).
&gt; &gt; &gt; The variance is not a problem if the water level is adapted
&gt; &gt; &gt; (re-computed) at each consensus.
&gt; &gt; I'm not sure we're talking about the same thing here.
&gt; &gt; The variance I am talking about here is measurement error and
&gt; &gt; discretization error. Re-computation doesn't change the error.
&gt; &gt; (And going from relay measurement to consensus bandwidth can take hours.)
&gt; &gt; 
&gt; &gt; See my comment above about convergence: we need to converge in
&gt; &gt; the presence of discretization error, too.
&gt; &gt; 
&gt; &gt; &gt; &gt; …
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; With your explanations below (weight change on clients), and given that
&gt; &gt; &gt; &gt; &gt; the consensus diff size is a thing, I am leaning to believe that the
&gt; &gt; &gt; &gt; &gt; weight calculation should be done on clients. Anyway, I have added a
&gt; &gt; &gt; &gt; &gt; remark about this possibility within the proposal.
&gt; &gt; &gt; &gt; Another alternative is to apply proposal 276 weight rounding to these
&gt; &gt; &gt; &gt; weights as well.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt; &gt; &gt; &gt;  
&gt; &gt; &gt; &gt; I think this may be our best option. Because running all these divisions on
&gt; &gt; &gt; &gt; some mobile clients will be very slow and cost a lot of power.
&gt; &gt; &gt; Added this to the proposal. We might also "divide" the algorithm: what
&gt; &gt; &gt; about computing the weights on dirauths but broadcasting only the pivot
&gt; &gt; &gt; (the index of the relay at the water level). Clients can then resume the
&gt; &gt; &gt; computation and produce the weights themselves with a reduced cost.
&gt; &gt; &gt; Strength:
&gt; &gt; &gt; - The weight calculation would be O(n) on clients (n being the size of
&gt; &gt; &gt; the guard set) instead of O(n*log(n))
&gt; &gt; &gt; - No impact on the consensus diff (well, except 1 line, the pivot value).
&gt; &gt; &gt; Weakness:
&gt; &gt; &gt; - We still have O(n) divisions on the client, each time we download a
&gt; &gt; &gt; new consensus.
&gt; &gt; Why not list the waterfilling level on a single line in the consensus?
&gt; &gt; 
&gt; &gt; That way:
&gt; &gt; * authorities do the expensive calculation
&gt; &gt; * clients can re-weight relays using a simple calculation:
&gt; &gt; 
&gt; &gt; if it is less than or equal to the waterfilling level:
&gt; &gt; use the relay's weight as its guard weight
&gt; &gt; use 0 as its middle weight
&gt; &gt; otherwise:
&gt; &gt; use the waterfilling level as the relay's guard weight
&gt; &gt; use the relay's weight minus the waterfilling level as its middle weight
&gt; &gt; 
&gt; &gt; This is O(n) and requires one comparison and one subtraction in the worst case.
&gt; &gt; 
&gt; &gt; T
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307133107</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 13:31:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hello friends,

&gt; 1) The cost of IPs vs. bandwidth is definitely a function of market offers. Your \
&gt; $500/Gbps/month seems quite expensive compared to what can be found on OVH (which \
&gt; is hosting a large number of relays): they ask ~3 euros/IP/month, including \
&gt; unlimited 100 Mbps traffic. If we assume that wgg = 2/3 and a water level at \
&gt;                 10Mbps, this means that, if you want to have 1Gbps of guard \
&gt;                 bandwidth,
&gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month

The question of what the cheapest attack is can indeed be estimated by looking at \
market prices for the required resources. Your cost estimate of 3.72 USD/Gbps/month \
for bandwidth seems off by two orders of magnitude.

The numbers I gave ($2/IP/month and $500/Gbps/month) are the amounts currently \
charged by my US hosting provider. At the time that I shopped around (which was in \
2015), it was by far the best bandwidth cost that I was able to find, and those costs \
haven't changed much since then.

Currently on OVH the best I could find for hosting just now was $93.02/per month for \
250Mbps unlimited (https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml). \
This yields $372.08/Gbps/month. I am far from certain that this is the best price \
that one could find - please do point me to better pricing if you have it!

I also just looked at Hetzter - another major Tor-friendly hosting provider. The best \
I could find was 1Gbps link capped at 100TB/month for $310.49 \
(https://wiki.hetzner.de/index.php/Traffic/en \
&lt;https://wiki.hetzner.de/index.php/Traffic/en&gt;). 1Gbps sustained upload is \
334.8Terabytes (i.e. 1e12 bytes) for a 31-day month. If you exceed that limit, you \
can arrange to pay $1.24/TB. Therefore I would estimate the cost to be \
$601.64/Gbps/month. Again, I maybe missing an option more tailored to a high-traffic \
server, and I would be happy to be pointed to it :-)

Moreover, European bandwidth costs are among the lowest in the world. Other locations \
are likely to have even higher bandwidth costs (Australia, for example, has \
notoriously high bandwidth costs).

&gt; We do not believe that this is conclusive, as the market changes, and there \
&gt; certainly are dozens of other providers.

I do agree that the market changes, and in fact I expect the cost fo IPs to plummet \
as the shift to IPv6 becomes pervasive. The current high cost of IPv4 addresses is \
due to their recent scarcity. In any case, a good question to ask would be how Tor \
should adjust to changes in market pricing over time.

&gt; The same applies for 0-day attacks: if you need to buy them just for attacking Tor, \
&gt; then they are expensive. If you are an organization in the business of handling \
&gt; 0-day attacks for various other reasons, then the costs are very different. And it \
&gt; may be unclear to determine if it is easier/cheaper to compromise 1 top relay or 20 \
&gt; mid-level relays.

I agree that the cost of compromising machines is unclear. However, we should guess, \
and the business of 0-days has provided some signals of their value in terms of their \
price. 0-days for the Tor software stack are expensive, as, for security reasons, \
(well-run) Tor relays run few services other than the tor process. I haven't seen \
great data on Linux zero-days, but recently a Windows zero-day (Windows being the \
second most-common Tor relays OS) appeared to cost $90K \
(https://www.csoonline.com/article/3077447/security/cost-of-a-windows-zero-day-exploit-this-one-goes-for-90000.html \
&lt;https://www.csoonline.com/article/3077447/security/cost-of-a-windows-zero-day-exploit-this-one-goes-for-90000.html&gt;). \
Deploying a zero-day does impose a cost, as it increases the chance of that exploit \
being discovered and its value lost. Therefore, such exploits are likely to be \
deployed only on high-value targets. I would argue that Tor relays are unlikely to be \
such a target because it is so much cheaper to simply run your own relays. An \
exception could be a specific targeted investigation in which some suspect is behind \
a known relay (say, a hidden service behind a guard), because running other relays \
doesn't help dislodge the target from behind its existing guard.

&gt; And we are not sure that the picture is so clear about botnets either: bots that \
&gt; can become guards need to have high availability (in order to pass the guard \
&gt; stability requirements), and such high availability bots are also likely to have a \
&gt; bandwidth that is higher than the water level (abandoned machines in university \
&gt; networks, ...). As a result, waterfilling would increase the number of high \
&gt; availability bots that are needed, which is likely to be hard.

This doesn't seem like a good argument to me: "bots that become guards must have high \
availability, and thus they likely have high bandwidth". How many bots would become \
guards in the first place? And why would availability (by which I understand you to \
mean uptime) imply bandwidth? The economics matter here, and I don't know too much \
about botnet economics, but my impressions is that they generally include many \
thousands of machines and that each bot is generally quickly shut down by its service \
provider once it starts spewing traffic (i.e. acting as a high-bandwidth Tor relay). \
Thus waterfilling could benefit botnets by giving them more clients to attack while \
providing a small amount of bandwidth that falls below the radar of their ISP. This \
is a speculative argument, I admit, but seems to me to be somewhat more logical than \
the argument you outlined.

&gt; 2) Waterfilling makes it necessary for an adversary to run a larger number of \
&gt; relays. Apart from the costs of service providers, this large number of relays need \
&gt; to be managed in an apparently independent way, otherwise they would become \
&gt; suspicious to community  members, like nusenu who is doing a great job spotting all \
&gt; anomalies. It seems plausible that running 100 relays in such a way that they look \
&gt; independent is at least as difficult as doing that with 10 relays.

Why is running a large number of relays more noticeable than running a high-bandwidth \
relay? Actually, it seems, if anything, *less* noticeable. An attacker could even \
indicate that all the relays are in the same family, and there is no Tor policy that \
would kick them out of the network for being "too large" of a family. If Tor wants to \
limit the size of single entities, then they would have to kick out some large \
existing families (Team Cymru, torservers.net &lt;http://torservers.net/&gt;, and the Chaos \
Communicration Congress come to mind), and moreover such a policy could apply equally \
well to total amounts of bandwidth as to total number of relays.

&gt; 3) The question of the protection from relays, ASes or IXPs is puzzling, and we do \
&gt; not have a strong opinion about it. We focused on relays because they are what is \
&gt; available to any attacker, compared to ASes or IXPs which are more specific \
&gt; adversaries. But, if there is a consensus that ASes or IXPs should rather be \
&gt; considered as the main target, it is easy to implement waterfilling at the AS or \
&gt; IXP level rather than at the IP level: just aggregate the bandwidth relayed per AS \
&gt; or IXP, and apply the waterfilling level computation method to them. Or we could \
&gt; mix the weights obtained for all these adversaries, in order to get some \
&gt; improvement against all of them instead of an improvement against only one and \
&gt; being agnostic about the others.

This suggestion of applying waterfilling to individual ASes is intriguing, but would \
require some a more developed design and argument. Would the attacker model be one \
that has a fixed cost to compromise/observe a given AS?

&gt; 
&gt; 4) More fundamentally, since the fundamental idea of Tor is to mix traffic through \
&gt; a large number of relays, it seems to be a sound design principle to make the \
&gt; choice of the critical relays as uniform as possible, as Waterfilling aims to do. A \
&gt; casual Tor user may be concerned to see that his traffic is very likely to be \
&gt; routed through a very small number of top relays, and this effect is likely to \
&gt; increase as soon as a  multi-cores compliant implementation of Tor rises (rust \
&gt; dev). Current top relays which suffer from the main CPU bottleneck will probably be \
&gt; free to relay even more bandwidth than they already do, and gain an even more \
&gt; disproportionate consensus weight. Waterfilling might prevent that, and keep those \
&gt; useful relays doing their job at the middle position of paths.

I disagree that uniform relay selection is a sound design principle. Instead, one \
should consider various likely attackers and consider what design maximizes the \
attack cost (or maybe maximizes the minimum design cost among likely attackers). In \
the absence of detailed attacker information, a good design principle might be for \
clients to choose "diverse" relays, where diversity should take into account country, \
operator, operating system, AS, IXP connectivity, among other things.

Best,
Aaron


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;&lt;div&gt;Hello friends,&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;1) The cost of \
IPs vs. bandwidth is definitely a function of market offers. Your $500/Gbps/month \
seems quite expensive compared to what can be found on OVH (which is hosting a large \
number of relays): they ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. \
If we assume that wgg = 2/3 and a water level at 10Mbps, this means that, if you want \
to have 1Gbps of guard bandwidth,&lt;br class=""&gt;- the current Tor mechanisms would cost \
you 3 * 10 * 3/2 = 45 euros/month&lt;br class=""&gt;- the waterfilling mechanism would cost \
you 3 * 100 = 300 euros/month&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;The question of what the cheapest attack is can indeed be \
estimated by looking at market prices for the required resources. Your cost estimate \
of 3.72 USD/Gbps/month for bandwidth seems off by two orders of \
magnitude.&lt;/div&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;The numbers I gave ($2/IP/month and \
$500/Gbps/month) are the amounts currently charged by my US hosting provider. At the \
time that I shopped around (which was in 2015), it was by far the best bandwidth cost \
that I was able to find, and those costs haven't changed much since \
then.&lt;/div&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;Currently on OVH the best I could find for \
hosting just now was $93.02/per month for 250Mbps unlimited (&lt;a \
href="https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml" \
class=""&gt;https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml&lt;/a&gt;). This \
yields $372.08/Gbps/month. I am far from certain that this is the best price that one \
could find - please do point me to better pricing if you have it!&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;I also just looked at Hetzter - another major Tor-friendly \
hosting provider. The best I could find was 1Gbps link capped at 100TB/month for \
$310.49 (&lt;a href="https://wiki.hetzner.de/index.php/Traffic/en" \
class=""&gt;https://wiki.hetzner.de/index.php/Traffic/en&lt;/a&gt;). 1Gbps sustained upload is \
334.8Terabytes (i.e. 1e12 bytes) for a 31-day month. If you exceed that limit, you \
can arrange to pay $1.24/TB. Therefore I would estimate the cost to be \
$601.64/Gbps/month. Again, I maybe missing an option more tailored to a high-traffic \
server, and I would be happy to be pointed to it :-)&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;Moreover, European bandwidth costs are among the lowest in the \
world. Other locations are likely to have even higher bandwidth costs (Australia, for \
example, has notoriously high bandwidth costs).&lt;/div&gt;&lt;br class=""&gt;&lt;blockquote \
type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;We do not believe that this is \
conclusive, as the market changes, and there certainly are dozens of other \
providers.&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;I do \
agree that the market changes, and in fact I expect the cost fo IPs to plummet as the \
shift to IPv6 becomes pervasive. The current high cost of IPv4 addresses is due to \
their recent scarcity. In any case, a good question to ask would be how Tor should \
adjust to changes in market pricing over time.&lt;/div&gt;&lt;br class=""&gt;&lt;blockquote \
type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;The same applies for 0-day attacks: \
if you need to buy them just for attacking Tor, then they are expensive. If you are \
an organization in the business of handling 0-day attacks for various other reasons, \
then the costs are very different. And it may be unclear to determine if it is \
easier/cheaper to compromise 1 top relay or 20 mid-level relays.&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;I agree that the cost \
of compromising machines is unclear. However, we should guess, and the business of \
0-days has provided some signals of their value in terms of their price. 0-days for \
the Tor software stack are expensive, as, for security reasons, (well-run) Tor relays \
run few services other than the tor process. I haven't seen great data on Linux \
zero-days, but recently a Windows zero-day (Windows being the second most-common Tor \
relays OS) appeared to cost $90K (&lt;a \
href="https://www.csoonline.com/article/3077447/security/cost-of-a-windows-zero-day-exploit-this-one-goes-for-90000.html" \
class=""&gt;https://www.csoonline.com/article/3077447/security/cost-of-a-windows-zero-day-exploit-this-one-goes-for-90000.html&lt;/a&gt;). \
Deploying a zero-day does impose a cost, as it increases the chance of that exploit \
being discovered and its value lost. Therefore, such exploits are likely to be \
deployed only on high-value targets. I would argue that Tor relays are unlikely to be \
such a target because it is so much cheaper to simply run your own relays. An \
exception could be a specific targeted investigation in which some suspect is behind \
a known relay (say, a hidden service behind a guard), because running other relays \
doesn't help dislodge the target from behind its existing guard.&lt;/div&gt;&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;And we are not \
sure that the picture is so clear about botnets either: bots that can become guards \
need to have high availability (in order to pass the guard stability requirements), \
and such high availability bots are also likely to have a bandwidth that is higher \
than the water level (abandoned machines in university networks, ...). As a result, \
waterfilling would increase the number of high availability bots that are needed, \
which is likely to be hard.&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;This doesn't seem like a good argument to me: "bots that become \
guards must have high availability, and thus they likely have high bandwidth". How \
many bots would become guards in the first place? And why would availability (by \
which I understand you to mean uptime) imply bandwidth? The economics matter here, \
and I don't know too much about botnet economics, but my impressions is that they \
generally include many thousands of machines and that each bot is generally quickly \
shut down by its service provider once it starts spewing traffic (i.e. acting as a \
high-bandwidth Tor relay). Thus waterfilling could benefit botnets by giving them \
more clients to attack while providing a small amount of bandwidth that falls below \
the radar of their ISP. This is a speculative argument, I admit, but seems to me to \
be somewhat more logical than the argument you outlined.&lt;/div&gt;&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;2) Waterfilling \
makes it necessary for an adversary to run a larger number of relays. Apart from the \
costs of service providers, this large number of relays need to be managed in an \
apparently independent way, otherwise they would become suspicious to community  \
members, like nusenu who is doing a great job spotting all anomalies. It seems \
plausible that running 100 relays in such a way that they look independent is at \
least as difficult as doing that with 10 relays.&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;Why is running a large \
number of relays more noticeable than running a high-bandwidth relay? Actually, it \
seems, if anything, *less* noticeable. An attacker could even indicate that all the \
relays are in the same family, and there is no Tor policy that would kick them out of \
the network for being "too large" of a family. If Tor wants to limit the size of \
single entities, then they would have to kick out some large existing families (Team \
Cymru, &lt;a href="http://torservers.net" class=""&gt;torservers.net&lt;/a&gt;, and the \
Chaos Communicration Congress come to mind), and moreover such a policy could \
apply equally well to total amounts of bandwidth as to total number of \
relays.&lt;/div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div \
class=""&gt;3) The question of the protection from relays, ASes or IXPs is puzzling, and \
we do not have a strong opinion about it. We focused on relays because they are what \
is available to any attacker, compared to ASes or IXPs which are more specific \
adversaries. But, if there is a consensus that ASes or IXPs should rather be \
considered as the main target, it is easy to implement waterfilling at the AS or IXP \
level rather than at the IP level: just aggregate the bandwidth relayed per AS or \
IXP, and apply the waterfilling level computation method to them. Or we could mix the \
weights obtained for all these adversaries, in order to get some improvement against \
all of them instead of an improvement against only one and being agnostic about the \
others.&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;This \
suggestion of applying waterfilling to individual ASes is intriguing, but would \
require some a more developed design and argument. Would the attacker model be one \
that has a fixed cost to compromise/observe a given AS?&lt;/div&gt;&lt;br class=""&gt;&lt;blockquote \
type="cite" class=""&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;br class=""&gt;4) More fundamentally, \
since the fundamental idea of Tor is to mix traffic through a large number of relays, \
it seems to be a sound design principle to make the choice of the critical relays as \
uniform as possible, as Waterfilling aims to do. A casual Tor user may be concerned \
to see that his traffic is very likely to be routed through a very small number of \
top relays, and this effect is likely to increase as soon as a  multi-cores \
compliant implementation of Tor rises (rust dev). Current top relays which suffer \
from the main CPU bottleneck will probably be free to relay even more bandwidth than \
they already do, and gain an even more disproportionate consensus weight. \
Waterfilling might prevent that, and keep those useful relays doing their job at the \
middle position of paths.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;I disagree \
that uniform relay selection is a sound design principle. Instead, one should \
consider various likely attackers and consider what design maximizes the attack cost \
(or maybe maximizes the minimum design cost among likely attackers). In the absence \
of detailed attacker information, a good design principle might be for clients to \
choose "diverse" relays, where diversity should take into account country, operator, \
operating system, AS, IXP connectivity, among other things.&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Aaron&lt;/div&gt;&lt;br class=""&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307135436</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 13:54:36-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

&gt; &gt; 1) The cost of IPs vs. bandwidth is definitely a function of market offers. Your \
&gt; &gt; $500/Gbps/month seems quite expensive compared to what can be found on OVH (which \
&gt; &gt; is hosting a large number of relays): they ask ~3 euros/IP/month, including \
&gt; &gt; unlimited 100 Mbps traffic. If we assume that wgg = 2/3 and a water level at \
&gt; &gt;                 10Mbps, this means that, if you want to have 1Gbps of guard \
&gt; &gt;                 bandwidth,
&gt; &gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; &gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; 
&gt; The question of what the cheapest attack is can indeed be estimated by looking at \
&gt; market prices for the required resources. Your cost estimate of 3.72 USD/Gbps/month \
&gt; for bandwidth seems off by two orders of magnitude.

I see that I misread your cost calculation, and that you estimated $37.20/Gbps/month \
instead of $3.72/Gbps/month. This still seems low by an order of magnitude. Thus, my \
argument stands: waterfilling would appear to decrease the cost to an adversary of \
getting guard probability compared to Tor's current weighting scheme.

Best,
Aaron
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307173458</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 17:34:58-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]


Hi Florentin,

I've added some comments below.

Overall, I think a useful discussion for the community to have is to discuss whether \
or not we think Waterfilling is even a good idea in the first place, before you go \
ahead and do a bunch of work writing and fixing a proposal that may just end up in \
the pile of old grad student research ideas. (Maybe I'm too late, or maybe you want a \
proposal out there in any case.)

&gt; On Mar 7, 2018, at 3:28 AM, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; Hi Aaron,
&gt; 
&gt; Thanks for your comments, you are definitely touching interesting aspects.
&gt; 
&gt; Here are thoughts regarding your objections:
&gt; 
&gt; 1) The cost of IPs vs. bandwidth is definitely a function of market offers. Your \
&gt; $500/Gbps/month seems quite expensive compared to what can be found on OVH (which \
&gt; is hosting a large number of relays): they ask ~3 euros/IP/month, including \
&gt; unlimited 100 Mbps traffic. If we assume that wgg = 2/3 and a water level at \
&gt;                 10Mbps, this means that, if you want to have 1Gbps of guard \
&gt;                 bandwidth,
&gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; 
&gt; We do not believe that this is conclusive, as the market changes, and there \
&gt; certainly are dozens of other providers. 

Have you purchased service from OVH and run relays yourself? Have you talked to \
anyone who has? I strongly believe that you will not find a provider that \
legitimately offers you continuous 100 Mbit/s over a long period of time for 3 euros. \
Providers tend to use "unmetered" and "unlimited" bandwidth as marketing terms, but \
they don't actually mean what you think unlimited means. What they mean is that you \
have a 100 MBit/s network card, and they allow you to burst up to the full 100 \
MBit/s. However, they usually have a total bandwidth cap on such service, or become \
angry and threaten to disconnect your service if you don't cut down your usage (this \
has happened to me).

It is far more expensive to obtain *continuous*, i.e., *sustained* bandwidth usage \
over time. Generally, it's cheaper to buy in bulk. In the US, the cheapest bandwidth \
service we found (that also allows us to run Tor relays) was one that offers \
sustained 1 Gbit/s for an average of $500/month (including service fees).

&gt; The same applies for 0-day attacks: if you need to buy them just for attacking Tor, \
&gt; then they are expensive. If you are an organization in the business of handling \
&gt; 0-day attacks for various other reasons, then the costs are very different. And it \
&gt; may be unclear to determine if it is easier/cheaper to compromise 1 top relay or 20 \
&gt; mid-level relays. 

It's hard to reason about this, since I'm not in the business. However, it you \
already have a zero-day, why would you want to waste it on a Tor relay? You would \
risk being discovered accessing the machine of a likely security-consious relay \
operator, and you could just run your own relays. Running your own relays does have \
some cost, but is far easier to manage and more reliable since you don't have to \
worry about being discovered or losing access because the software is patched.

&gt; And we are not sure that the picture is so clear about botnets either: bots that \
&gt; can become guards need to have high availability (in order to pass the guard \
&gt; stability requirements), and such high availability bots are also likely to have a \
&gt; bandwidth that is higher than the water level (abandoned machines in university \
&gt; networks, ...). As a result, waterfilling would increase the number of high \
&gt; availability bots that are needed, which is likely to be hard. 

I think its much more likely that bots are running on my parents Windows machines \
than on high-bandwidth University machines. Sure, there might be some machines with \
outdated OSes out there on University networks, but they are also monitored pretty \
heavily for suspicious activity by the University IT folks, who regularly check in \
with the machine owners with anything suspicious occurs on the network.

&gt; 2) Waterfilling makes it necessary for an adversary to run a larger number of \
&gt; relays. Apart from the costs of service providers, this large number of relays need \
&gt; to be managed in an apparently independent way, otherwise they would become \
&gt; suspicious to community  members, like nusenu who is doing a great job spotting all \
&gt; anomalies. It seems plausible that running 100 relays in such a way that they look \
&gt; independent is at least as difficult as doing that with 10 relays. 

But not much more difficult, and not difficult enough that an intern could not whip \
up a managed deployment in a few weeks. There are various tools out there that can \
automate software installation and configuration. Ansible, Chef, and Puppet are \
popular ones, but here is a longer list:

https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software


I would be surprised if at least TorServers.net didn't already use something like \
this, since they manage a large number of relays.

&gt; 3) The question of the protection from relays, ASes or IXPs is puzzling, and we do \
&gt; not have a strong opinion about it. We focused on relays because they are what is \
&gt; available to any attacker, compared to ASes or IXPs which are more specific \
&gt; adversaries. But, if there is a consensus that ASes or IXPs should rather be \
&gt; considered as the main target, it is easy to implement waterfilling at the AS or \
&gt; IXP level rather than at the IP level: just aggregate the bandwidth relayed per AS \
&gt; or IXP, and apply the waterfilling level computation method to them. Or we could \
&gt; mix the weights obtained for all these adversaries, in order to get some \
&gt; improvement against all of them instead of an improvement against only one and \
&gt; being agnostic about the others. 
&gt; 4) More fundamentally, since the fundamental idea of Tor is to mix traffic through \
&gt; a large number of relays, it seems to be a sound design principle to make the \
&gt; choice of the critical relays as uniform as possible, as Waterfilling aims to do.

I think this is the crux of my disagreement. We should base relay choice on security \
and/or performance, whether or not that means uniform choice. In a world where it is \
more costly to start up new relays than it is to run high bandwidth relays, the \
waterfilling approach may improve security. But, in my opinion, there are too many \
open questions and speculations going on here to be convinced that that's the world \
we live in.

&gt; A casual Tor user may be concerned to see that his traffic is very likely to be \
&gt; routed through a very small number of top relays, and this effect is likely to \
&gt; increase as soon as a  multi-cores compliant implementation of Tor rises (rust \
&gt; dev). Current top relays which suffer from the main CPU bottleneck will probably be \
&gt; free to relay even more bandwidth than they already do, and gain an even more \
&gt; disproportionate consensus weight. Waterfilling might prevent that, and keep those \
&gt; useful relays doing their job at the middle position of paths. 

I run several high bandwidth relays. I can say that the only thing that eliminating \
the CPU bottleneck would do for me is allow me to run fewer relays in order to \
consume the bandwidth available on my machine; I still control the same amount of \
bandwidth overall. The fact that I have to run 4 relays to consume my bandwidth vs. 1 \
relay does not have any impact on my decision of whether or not I will run more; the \
main criterion in that decision is cost.

&gt; We hope those thoughts can help, and thanks again for sharing yours.

I hope my perspective on things is useful in some way!

Best,
Rob


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlqgIsIACgkQnFIMfTqQ
qoSyohAAiZzjuixYHeGy1UiBhqzUz2n1RHmFsMyUe6hPu1CBAHkQZj/Lzfj2/0a7
oaj5rYj+JJHbZ3bwW9b433PgLSy3bmXnMjZcedC9PlH5x5lhAVvMR+LCVKOsOWBg
NLyyWhwMxSHXGmc9LDqcFqZqbRpxwUf+iEzOqicRgxoPVGzXp6MRgdQ53+/48Yuk
QKKTSW2Sx4VDXltrd7R50qvHwj0BOgz3rUh8htTXL6uVRxOOK5w5HZDwm3F2/iWY
6IU3WcbgcWorRpUy913md2A5SvZvTa13oMN+2Rgga38/ZMvvemG8UxBuh7BJHGJ0
US2IfZIhX6LWeqlTtHzXz8OVN195a1zfmRffhzgoLZHOrx/hCvStBV9pz/uYi+R1
hJjtvOuvqCbXUxV1iyzA2PQQs3MFa3FUy8lGwRDPO/jTY/Of/olWL2qezkWWykDz
5HmV4igaiEfLB1Tk5antDaYjcU8CUhZvUCNx1oUdqB6Afzf9igqDhWNUFDtEhMM0
l8yvQfiJa5n6P4IBb0gP2rLPg3pgkm2ax9908qOoinEb4g/CeM8R5cF2n/3UBMXm
0eYHGdwmd51OZKchfRG+k8/eQiD+Gq6WbVB7+99pi9zastNnueG1uVL5c0kbaarX
osSMYhSiI+Ds3tAC2hC+O7RPCYyKaRePT3Utmb/0eHIWr37NHRg=
=EkUL
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307190210</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 19:02:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On Mar 7, 2018, at 12:34 PM, Rob Jansen &lt;rob.g.jansen@nrl.navy.mil&gt; wrote:
&gt; 
&gt; Hi Florentin,
&gt; 
&gt; I've added some comments below.

(I just found out that Aaron responded to your reply this morning, but I didn't get \
that email (it probably got stuck somewhere in the NRL email filters). Sorry if I \
made any points that were already made, but they were made independently.)

Best,
Rob


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlqgNzIACgkQnFIMfTqQ
qoSeOA/8D6mNXNQWe9zIW+nzKjVATcOzuSaIc7LOK9VWm4SH3FqEi14pIHVdzfMH
U/Tc5cLlVhhmZUXDSm8QiV/YK0aAFKZFWIKSUeJmOcxdZmc0TEaAKmepj2RiNexa
iWO9we1E1GOk1GFmfIyZILMcsqml45XIqKM3egVqEkTJtMyr8LZCMsRXBh/RZFgY
azAUIzHQqeV4d9kBYAxXClkxF1cqwTrN0/z68rdxdRgNmWJZwUgDtYj45UdlgwUr
lUKGb1f+6ieNxzuGJQi1HLLouFSPziYGWk/n6eaoDxQwY/1B1aKnmedzOXWzJKUn
4EYH+BhgrkVOJeNsFo7bnkyBw6Lqus8UK2PEkId4H/VLRyR0cg66qxceq8Tu7fng
OmW/RY3LlC6Zabyq29qn3LyHT+Lg5xfnDcNfMcKpOmEpfSKARbFguqhP6GcXcEWO
HCyPHxunybf55AMvv+mimKwn3Im4Ex4ABiYnv8/erY97s195+rOG8uxigXL7Xqa8
wxtMnqeow0WBGCHsWRgky8YT75VdNTOl/5dsr50cSc9iPcFc+FtnNRSujWdcN+vs
+MyJ6fG+zBRsvXeBXIP0T5LPTgsOhSY36ozfcLW6ufnuPDdnShHBdLB2T5/Auo8b
Qvyj4INUhRJKJwkpINS6BYoi1NJcLOAub0Vs1CBXsFpprDPBl3M=
=agWr
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307193746</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-07 19:37:46-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>



&gt; On 7 Mar 2018, at 18:34, Rob Jansen &lt;rob.g.jansen@nrl.navy.mil&gt; wrote:
&gt; 
&gt; It is far more expensive to obtain *continuous*, i.e., *sustained* bandwidth usage \
&gt; over time. Generally, it's cheaper to buy in bulk. In the US, the cheapest \
&gt; bandwidth service we found (that also allows us to run Tor relays) was one that \
&gt; offers sustained 1 Gbit/s for an average of $500/month (including service fees).

In 2016, OVH was offering a discount for 1 Gbps servers in Europe
for USD 200/month. The ordinary price was USD 300/month.

We can also purchase a 250 Mbps server in Canada for USD 60/month,
but it doesn't get as much Guard bandwidth, because of its location or
connectivity.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307210107</emailId><senderName>Alexander Nasonov</senderName><senderEmail>alnsn@yandex.ru</senderEmail><timestampReceived>2018-03-07 21:01:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]


Aaron Johnson wrote:
&gt; Currently on OVH the best I could find for hosting just now was
&gt; $93.02/per month for 250Mbps unlimited
&gt; (https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml).

https://www.ovh.com/world/discover/poland.xml

$49.99/per month, 500 Mbps bandwidth (burst   1 Gbps ) unlimited

My new relay runs there
http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD

but I'm not very happy with the setup because this particular offer
doesn't come with IPMI console and I had to install Proxmox Linux
and run NetBSD in a virtual machine. Clock isn't very stable even
with ntpd, I setup a cronjob to hard reset it periodically.

Alex

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307211813</emailId><senderName>"A. Johnson"</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 21:18:13-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


OVH and OVH resellers do seem to have some insane prices.

On the other end, the waterfilling assumption we were working off of was a water \
level of 10Mbps. A server that can sustain that seems quite cheap. In fact, a quick \
Google search for "cheap vps" yielded this offer of a VPS with one IPv4 address and a \
1Gbps port capped at 2TB/month for $0.63/month: \
&lt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0 \
&lt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0&gt;&gt;. 2TB/month is about 6Mbps \
sustained, which falls below the supposed water level and thus gets fully allocated \
to guard probability. Thus to achieve in waterfilling a total guard probability equal \
to that of 1Gbps relay in today's Tor (taking into account the 1/3 loss of bandwidth \
to the middle position in today's Tor), one could run 1000*(2/3)/6 ~= 112 of these at \
$71/month. This would be cheaper than the price below of $100/month for 1Gbps.

Can we get even lower attacking either system…? :-)

Best,
Aaron

&gt; On Mar 7, 2018, at 4:01 PM, Alexander Nasonov &lt;alnsn@yandex.ru&gt; wrote:
&gt; 
&gt; Aaron Johnson wrote:
&gt; &gt; Currently on OVH the best I could find for hosting just now was
&gt; &gt; $93.02/per month for 250Mbps unlimited
&gt; &gt; (https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml).
&gt; 
&gt; https://www.ovh.com/world/discover/poland.xml
&gt; 
&gt; $49.99/per month, 500 Mbps bandwidth (burst   1 Gbps ) unlimited
&gt; 
&gt; My new relay runs there
&gt; http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD
&gt;  
&gt; but I'm not very happy with the setup because this particular offer
&gt; doesn't come with IPMI console and I had to install Proxmox Linux
&gt; and run NetBSD in a virtual machine. Clock isn't very stable even
&gt; with ntpd, I setup a cronjob to hard reset it periodically.
&gt; 
&gt; Alex
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;OVH and OVH resellers do seem to \
have some insane prices.&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;On the other \
end, the waterfilling assumption we were working off of was a water level of 10Mbps. \
A server that can sustain that seems quite cheap. In fact, a quick Google search for \
"cheap vps" yielded this offer of a VPS with one IPv4 address and a 1Gbps port capped \
at 2TB/month for $0.63/month: &lt;&lt;a \
href="https://my.hiformance.com/cart.php?a=confproduct&amp;i=0" \
class=""&gt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0&lt;/a&gt;&gt;. 2TB/month \
is about 6Mbps sustained, which falls below the supposed water level and thus gets \
fully allocated to guard probability. Thus to achieve in waterfilling a total guard \
probability equal to that of 1Gbps relay in today's Tor (taking into account the 1/3 \
loss of bandwidth to the middle position in today's Tor), one could run 1000*(2/3)/6 \
~= 112 of these at $71/month. This would be cheaper than the price below of \
$100/month for 1Gbps.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Can we get \
even lower attacking either system…? :-)&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On Mar 7, 2018, at 4:01 \
PM, Alexander Nasonov &lt;&lt;a href="mailto:alnsn@yandex.ru" \
class=""&gt;alnsn@yandex.ru&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Aaron Johnson wrote:&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;Currently on OVH the best I could find for \
hosting just now was&lt;br class=""&gt;$93.02/per month for 250Mbps unlimited&lt;br \
class=""&gt;(&lt;a href="https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml" \
class=""&gt;https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml&lt;/a&gt;).&lt;br \
class=""&gt;&lt;/blockquote&gt;&lt;br class=""&gt;&lt;a \
href="https://www.ovh.com/world/discover/poland.xml" \
class=""&gt;https://www.ovh.com/world/discover/poland.xml&lt;/a&gt;&lt;br class=""&gt;&lt;br \
class=""&gt;$49.99/per month, 500 Mbps bandwidth (burst   1 Gbps ) \
unlimited&lt;br class=""&gt;&lt;br class=""&gt;My new relay runs there&lt;br \
class=""&gt;http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD&lt;br \
class=""&gt;&lt;br class=""&gt;but I'm not very happy with the setup because this particular \
offer&lt;br class=""&gt;doesn't come with IPMI console and I had to install Proxmox \
Linux&lt;br class=""&gt;and run NetBSD in a virtual machine. Clock isn't very stable \
even&lt;br class=""&gt;with ntpd, I setup a cronjob to hard reset it periodically.&lt;br \
class=""&gt;&lt;br class=""&gt;Alex&lt;br \
class=""&gt;_______________________________________________&lt;br class=""&gt;tor-dev mailing \
list&lt;br class=""&gt;tor-dev@lists.torproject.org&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307214129</emailId><senderName>"A. Johnson"</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 21:41:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry, that link should have been &lt;https://my.hiformance.com/cart.php?a=add&amp;pid=165 \
&lt;https://my.hiformance.com/cart.php?a=add&amp;pid=165&gt;&gt;.

Best,
Aaron

&gt; On Mar 7, 2018, at 4:18 PM, A. Johnson &lt;aaron.m.johnson@nrl.navy.mil&gt; wrote:
&gt; 
&gt; OVH and OVH resellers do seem to have some insane prices.
&gt; 
&gt; On the other end, the waterfilling assumption we were working off of was a water \
&gt; level of 10Mbps. A server that can sustain that seems quite cheap. In fact, a quick \
&gt; Google search for "cheap vps" yielded this offer of a VPS with one IPv4 address and \
&gt; a 1Gbps port capped at 2TB/month for $0.63/month: \
&gt; &lt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0 \
&gt; &lt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0&gt;&gt;. 2TB/month is about 6Mbps \
&gt; sustained, which falls below the supposed water level and thus gets fully allocated \
&gt; to guard probability. Thus to achieve in waterfilling a total guard probability \
&gt; equal to that of 1Gbps relay in today's Tor (taking into account the 1/3 loss of \
&gt; bandwidth to the middle position in today's Tor), one could run 1000*(2/3)/6 ~= 112 \
&gt; of these at $71/month. This would be cheaper than the price below of $100/month for \
&gt; 1Gbps. 
&gt; Can we get even lower attacking either system…? :-)
&gt; 
&gt; Best,
&gt; Aaron
&gt; 
&gt; &gt; On Mar 7, 2018, at 4:01 PM, Alexander Nasonov &lt;alnsn@yandex.ru \
&gt; &gt; &lt;mailto:alnsn@yandex.ru&gt;&gt; wrote: 
&gt; &gt; Aaron Johnson wrote:
&gt; &gt; &gt; Currently on OVH the best I could find for hosting just now was
&gt; &gt; &gt; $93.02/per month for 250Mbps unlimited
&gt; &gt; &gt; (https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml \
&gt; &gt; &gt; &lt;https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml&gt;).
&gt; &gt; 
&gt; &gt; https://www.ovh.com/world/discover/poland.xml \
&gt; &gt; &lt;https://www.ovh.com/world/discover/poland.xml&gt; 
&gt; &gt; $49.99/per month, 500 Mbps bandwidth (burst   1 Gbps ) unlimited
&gt; &gt; 
&gt; &gt; My new relay runs there
&gt; &gt; http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD
&gt; &gt;  
&gt; &gt; but I'm not very happy with the setup because this particular offer
&gt; &gt; doesn't come with IPMI console and I had to install Proxmox Linux
&gt; &gt; and run NetBSD in a virtual machine. Clock isn't very stable even
&gt; &gt; with ntpd, I setup a cronjob to hard reset it periodically.
&gt; &gt; 
&gt; &gt; Alex
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;Sorry, that link should have been \
&lt;&lt;a href="https://my.hiformance.com/cart.php?a=add&amp;pid=165" \
class=""&gt;https://my.hiformance.com/cart.php?a=add&amp;pid=165&lt;/a&gt;&gt;.&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On Mar 7, \
2018, at 4:18 PM, A. Johnson &lt;&lt;a href="mailto:aaron.m.johnson@nrl.navy.mil" \
class=""&gt;aaron.m.johnson@nrl.navy.mil&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;meta http-equiv="Content-Type" \
content="text/html charset=utf-8" class=""&gt;&lt;div style="word-wrap: break-word; \
-webkit-nbsp-mode: space; -webkit-line-break: after-white-space;" class=""&gt;OVH and \
OVH resellers do seem to have some insane prices.&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;On the other end, the waterfilling assumption we were \
working off of was a water level of 10Mbps. A server that can sustain that seems \
quite cheap. In fact, a quick Google search for "cheap vps" yielded this offer of a \
VPS with one IPv4 address and a 1Gbps port capped at 2TB/month for $0.63/month: \
&lt;&lt;a href="https://my.hiformance.com/cart.php?a=confproduct&amp;i=0" \
class=""&gt;https://my.hiformance.com/cart.php?a=confproduct&amp;i=0&lt;/a&gt;&gt;. 2TB/month \
is about 6Mbps sustained, which falls below the supposed water level and thus gets \
fully allocated to guard probability. Thus to achieve in waterfilling a total guard \
probability equal to that of 1Gbps relay in today's Tor (taking into account the 1/3 \
loss of bandwidth to the middle position in today's Tor), one could run 1000*(2/3)/6 \
~= 112 of these at $71/month. This would be cheaper than the price below of \
$100/month for 1Gbps.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Can we get \
even lower attacking either system…? :-)&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;div \
class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On Mar 7, 2018, at 4:01 PM, \
Alexander Nasonov &lt;&lt;a href="mailto:alnsn@yandex.ru" \
class=""&gt;alnsn@yandex.ru&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Aaron Johnson wrote:&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;Currently on OVH the best I could find for \
hosting just now was&lt;br class=""&gt;$93.02/per month for 250Mbps unlimited&lt;br \
class=""&gt;(&lt;a href="https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml" \
class=""&gt;https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml&lt;/a&gt;).&lt;br \
class=""&gt;&lt;/blockquote&gt;&lt;br class=""&gt;&lt;a \
href="https://www.ovh.com/world/discover/poland.xml" \
class=""&gt;https://www.ovh.com/world/discover/poland.xml&lt;/a&gt;&lt;br class=""&gt;&lt;br \
class=""&gt;$49.99/per month, 500 Mbps bandwidth (burst   1 Gbps ) \
unlimited&lt;br class=""&gt;&lt;br class=""&gt;My new relay runs there&lt;br class=""&gt;&lt;a \
href="http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD" \
class=""&gt;http://rougmnvswfsmd4dq.onion/rs.html#details/2235E316DF8E737081A365A1386F36035592A6BD&lt;/a&gt;&lt;br \
class=""&gt;&lt;br class=""&gt;but I'm not very happy with the setup because this particular \
offer&lt;br class=""&gt;doesn't come with IPMI console and I had to install Proxmox \
Linux&lt;br class=""&gt;and run NetBSD in a virtual machine. Clock isn't very stable \
even&lt;br class=""&gt;with ntpd, I setup a cronjob to hard reset it periodically.&lt;br \
class=""&gt;&lt;br class=""&gt;Alex&lt;br \
class=""&gt;_______________________________________________&lt;br class=""&gt;tor-dev mailing \
list&lt;br class=""&gt;tor-dev@lists.torproject.org&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307221219</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-07 22:12:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hello,


On 2018-03-07 14:31, Aaron Johnson wrote:
&gt; Hello friends,
&gt; 
&gt; &gt; 1) The cost of IPs vs. bandwidth is definitely a function of market
&gt; &gt; offers. Your $500/Gbps/month seems quite expensive compared to what
&gt; &gt; can be found on OVH (which is hosting a large number of relays): they
&gt; &gt; ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. If we
&gt; &gt; assume that wgg = 2/3 and a water level at 10Mbps, this means that,
&gt; &gt; if you want to have 1Gbps of guard bandwidth,
&gt; &gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; &gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; 
&gt; The question of what the cheapest attack is can indeed be estimated by
&gt; looking at market prices for the required resources. Your cost
&gt; estimate of 3.72 USD/Gbps/month for bandwidth seems off by two orders
&gt; of magnitude.
&gt; 

Let me merge your second answer here:

&gt; I see that I misread your cost calculation, and that you estimated \
&gt; $37.20/Gbps/month instead of $3.72/Gbps/month. This still seems low by an order of \
&gt; magnitude. Thus, my argument stands: waterfilling would appear to decrease the cost \
&gt; to an adversary of getting guard probability compared to Tor’s current weighting \
&gt; scheme.

There is still something wrong.  Let's assume the adversary wants to run
1 Gbps of real guard bandwidth.

With vanilla Tor, the cheapest (considering only OVH) is:

VPS SSD 1 (https://www.ovh.com/fr/vps/vps-ssd.xml): You need 10 of them
to reach 1Gbps of bandwidth, but you need 15 of them to actually relay 1
Gbps in the guard position (due to wgg = 2/3 roughly). This is our
calculation above: 3*10*3/2 = 45 euros/month (or a few more dollars).

With Waterfilling, we assume above a water level of 10 Mbits, so we need:

100 VPS SSD 1 relaying 1Gbps at the guard position, which the cost turns
to be 3*100 = 300 euros/month.

&gt; The numbers I gave ($2/IP/month and $500/Gbps/month) are the amounts
&gt; currently charged by my US hosting provider. At the time that I
&gt; shopped around (which was in 2015), it was by far the best bandwidth
&gt; cost that I was able to find, and those costs haven’t changed much
&gt; since then.
&gt; 
&gt; Currently on OVH the best I could find for hosting just now was
&gt; $93.02/per month for 250Mbps unlimited
&gt; (https://www.ovh.co.uk/dedicated_servers/hosting/1801host01.xml). This
&gt; yields $372.08/Gbps/month. I am far from certain that this is the best
&gt; price that one could find - please do point me to better pricing if
&gt; you have it!
&gt; 
&gt; I also just looked at Hetzter - another major Tor-friendly hosting
&gt; provider. The best I could find was 1Gbps link capped at 100TB/month
&gt; for $310.49 (https://wiki.hetzner.de/index.php/Traffic/en). 1Gbps
&gt; sustained upload is 334.8Terabytes (i.e. 1e12 bytes) for a 31-day
&gt; month. If you exceed that limit, you can arrange to pay $1.24/TB.
&gt; Therefore I would estimate the cost to be $601.64/Gbps/month. Again, I
&gt; maybe missing an option more tailored to a high-traffic server, and I
&gt; would be happy to be pointed to it :-)
&gt; 
&gt; Moreover, European bandwidth costs are among the lowest in the world.
&gt; Other locations are likely to have even higher bandwidth costs
&gt; (Australia, for example, has notoriously high bandwidth costs).
&gt; 
&gt; &gt; We do not believe that this is conclusive, as the market changes, and
&gt; &gt; there certainly are dozens of other providers.
&gt; 
&gt; I do agree that the market changes, and in fact I expect the cost fo
&gt; IPs to plummet as the shift to IPv6 becomes pervasive. The current
&gt; high cost of IPv4 addresses is due to their recent scarcity. In any
&gt; case, a good question to ask would be how Tor should adjust to changes
&gt; in market pricing over time.
&gt; 
&gt; &gt; The same applies for 0-day attacks: if you need to buy them just for
&gt; &gt; attacking Tor, then they are expensive. If you are an organization in
&gt; &gt; the business of handling 0-day attacks for various other reasons,
&gt; &gt; then the costs are very different. And it may be unclear to determine
&gt; &gt; if it is easier/cheaper to compromise 1 top relay or 20 mid-level relays.
&gt; 
&gt; I agree that the cost of compromising machines is unclear. However, we
&gt; should guess, and the business of 0-days has provided some signals of
&gt; their value in terms of their price. 0-days for the Tor software stack
&gt; are expensive, as, for security reasons, (well-run) Tor relays run few
&gt; services other than the tor process. I haven’t seen great data on
&gt; Linux zero-days, but recently a Windows zero-day (Windows being the
&gt; second most-common Tor relays OS) appeared to cost $90K
&gt; (https://www.csoonline.com/article/3077447/security/cost-of-a-windows-zero-day-exploit-this-one-goes-for-90000.html).
&gt;  Deploying a zero-day does impose a cost, as it increases the chance of
&gt; that exploit being discovered and its value lost. Therefore, such
&gt; exploits are likely to be deployed only on high-value targets. I would
&gt; argue that Tor relays are unlikely to be such a target because it is
&gt; so much cheaper to simply run your own relays. An exception could be a
&gt; specific targeted investigation in which some suspect is behind a
&gt; known relay (say, a hidden service behind a guard), because running
&gt; other relays doesn’t help dislodge the target from behind its existing
&gt; guard.
&gt; 
&gt; &gt; And we are not sure that the picture is so clear about botnets
&gt; &gt; either: bots that can become guards need to have high availability
&gt; &gt; (in order to pass the guard stability requirements), and such high
&gt; &gt; availability bots are also likely to have a bandwidth that is higher
&gt; &gt; than the water level (abandoned machines in university networks,
&gt; &gt; ...). As a result, waterfilling would increase the number of high
&gt; &gt; availability bots that are needed, which is likely to be hard.
&gt; 
&gt; This doesn’t seem like a good argument to me: “bots that become guards
&gt; must have high availability, and thus they likely have high
&gt; bandwidth”. How many bots would become guards in the first place? And
&gt; why would availability (by which I understand you to mean uptime)
&gt; imply bandwidth?

Our argument is speculative but here it is: Many computers in botnets
have a diurnal behavior (home computers), which could not get the guard
flag. Computers which have good uptime are located in more or less large
companies or universities, because people are lazy to turn them off or
the internal sysadmins don't want them to do that. Those structures have
also good connectivity, and would probably be *above* the water level.

Anyway, I think our two opinions about botnets are just speculative, and
we might be both wrong, right or a bit of the two. I suggest we debate
the other points :)

&gt; The economics matter here, and I don’t know too much about botnet
&gt; economics, but my impressions is that they generally include many
&gt; thousands of machines and that each bot is generally quickly shut down
&gt; by its service provider once it starts spewing traffic (i.e. acting as
&gt; a high-bandwidth Tor relay). Thus waterfilling could benefit botnets
&gt; by giving them more clients to attack while providing a small amount
&gt; of bandwidth that falls below the radar of their ISP. This is a
&gt; speculative argument, I admit, but seems to me to be somewhat more
&gt; logical than the argument you outlined.
&gt; 
&gt; &gt; 2) Waterfilling makes it necessary for an adversary to run a larger
&gt; &gt; number of relays. Apart from the costs of service providers, this
&gt; &gt; large number of relays need to be managed in an apparently
&gt; &gt; independent way, otherwise they would become suspicious to community 
&gt; &gt; members, like nusenu who is doing a great job spotting all anomalies.
&gt; &gt; It seems plausible that running 100 relays in such a way that they
&gt; &gt; look independent is at least as difficult as doing that with 10 relays.
&gt; 
&gt; Why is running a large number of relays more noticeable than running a
&gt; high-bandwidth relay? Actually, it seems, if anything, *less*
&gt; noticeable. An attacker could even indicate that all the relays are in
&gt; the same family, and there is no Tor policy that would kick them out
&gt; of the network for being “too large” of a family. If Tor wants to
&gt; limit the size of single entities, then they would have to kick out
&gt; some large existing families (Team Cymru, torservers.net
&gt; &lt;http://torservers.net&gt;, and the Chaos Communicration Congress come to
&gt; mind), and moreover such a policy could apply equally well to total
&gt; amounts of bandwidth as to total number of relays.
&gt; 

That depends on the kind of policy that the Tor network could put in
place. If we decide that large families become a threat in
end-positions, we may just aggregate all the bandwidth of the family,
and apply Waterfilling. That would not kick them off, but would create a
kind of 'quarantine'. Same kind of suggestion than the one just below.

&gt; &gt; 3) The question of the protection from relays, ASes or IXPs is
&gt; &gt; puzzling, and we do not have a strong opinion about it. We focused on
&gt; &gt; relays because they are what is available to any attacker, compared
&gt; &gt; to ASes or IXPs which are more specific adversaries. But, if there is
&gt; &gt; a consensus that ASes or IXPs should rather be considered as the main
&gt; &gt; target, it is easy to implement waterfilling at the AS or IXP level
&gt; &gt; rather than at the IP level: just aggregate the bandwidth relayed per
&gt; &gt; AS or IXP, and apply the waterfilling level computation method to
&gt; &gt; them. Or we could mix the weights obtained for all these adversaries,
&gt; &gt; in order to get some improvement against all of them instead of an
&gt; &gt; improvement against only one and being agnostic about the others.
&gt; 
&gt; This suggestion of applying waterfilling to individual ASes is
&gt; intriguing, but would require some a more developed design and
&gt; argument. Would the attacker model be one that has a fixed cost to
&gt; compromise/observe a given AS?

Yes, we agree that this specific point requires more research. We just
laid those possibilities in our paper but we did not explore this avenue
with details yet. So, to answer your question, I *think* the attacker
model should be rather different than some budget, as it is not clear to
me what budget is needed to take control over an AS. But, if you have a
different opinion, I would be interested to heat it :) In our paper, we
suggest to use the guessing entropy to evaluate the number of AS needed
to compromise your path. That's still something, but probably not sound
enough by itself.

&gt; 
&gt; &gt; 
&gt; &gt; 4) More fundamentally, since the fundamental idea of Tor is to mix
&gt; &gt; traffic through a large number of relays, it seems to be a sound
&gt; &gt; design principle to make the choice of the critical relays as uniform
&gt; &gt; as possible, as Waterfilling aims to do. A casual Tor user may be
&gt; &gt; concerned to see that his traffic is very likely to be routed through
&gt; &gt; a very small number of top relays, and this effect is likely to
&gt; &gt; increase as soon as a  multi-cores compliant implementation of Tor
&gt; &gt; rises (rust dev). Current top relays which suffer from the main CPU
&gt; &gt; bottleneck will probably be free to relay even more bandwidth than
&gt; &gt; they already do, and gain an even more disproportionate consensus
&gt; &gt; weight. Waterfilling might prevent that, and keep those useful relays
&gt; &gt; doing their job at the middle position of paths.
&gt; 
&gt; I disagree that uniform relay selection is a sound design principle.
&gt; Instead, one should consider various likely attackers and consider
&gt; what design maximizes the attack cost (or maybe maximizes the minimum
&gt; design cost among likely attackers). In the absence of detailed
&gt; attacker information, a good design principle might be for clients to
&gt; choose “diverse” relays

This is what Waterfilling does: increase the cost of a well-defined
attacker and offer clients to choose into a more "diverse" network.

Thanks again for all your opinions and arguments,

Florentin

&gt; , where diversity should take into account country, operator,
&gt; operating system, AS, IXP connectivity, among other things.
&gt; 
&gt; Best,
&gt; Aaron
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307225334</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-07 22:53:34-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

Hi Rob,

Thank you for your comments!


On 07/03/18 18:34, Rob Jansen wrote:
&gt; Hi Florentin,
&gt; 
&gt; I've added some comments below.
&gt; 
&gt; Overall, I think a useful discussion for the community to have is to discuss \
&gt; whether or not we think Waterfilling is even a good idea in the first place, before \
&gt; you go ahead and do a bunch of work writing and fixing a proposal that may just end \
&gt; up in the pile of old grad student research ideas. (Maybe I'm too late, or maybe \
&gt; you want a proposal out there in any case.)

Agree. Most of the work is already done, though. Details remain, but
let's try to reach a consensus before :)

&gt; &gt; On Mar 7, 2018, at 3:28 AM, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; \
&gt; &gt; wrote: 
&gt; &gt; Hi Aaron,
&gt; &gt; 
&gt; &gt; Thanks for your comments, you are definitely touching interesting aspects.
&gt; &gt; 
&gt; &gt; Here are thoughts regarding your objections:
&gt; &gt; 
&gt; &gt; 1) The cost of IPs vs. bandwidth is definitely a function of market offers. Your \
&gt; &gt; $500/Gbps/month seems quite expensive compared to what can be found on OVH (which \
&gt; &gt; is hosting a large number of relays): they ask ~3 euros/IP/month, including \
&gt; &gt; unlimited 100 Mbps traffic. If we assume that wgg = 2/3 and a water level at \
&gt; &gt;                 10Mbps, this means that, if you want to have 1Gbps of guard \
&gt; &gt;                 bandwidth,
&gt; &gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; &gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; &gt; 
&gt; &gt; We do not believe that this is conclusive, as the market changes, and there \
&gt; &gt; certainly are dozens of other providers. 
&gt; Have you purchased service from OVH and run relays yourself? Have you talked to \
&gt; anyone who has? I strongly believe that you will not find a provider that \
&gt; legitimately offers you continuous 100 Mbit/s over a long period of time for 3 \
&gt; euros. Providers tend to use "unmetered" and "unlimited" bandwidth as marketing \
&gt; terms, but they don't actually mean what you think unlimited means.

I do run several 100 Mbits relay, all used at full 100 Mbits with
unmetered and unlimited traffic, for 3€/month. One of them is online
since almost a year, no problem from the provider. I must have relayed
thousands of TB, and still there.

I agree with your arguments, some providers are indeed using that as a
marketing term: the small ones. I don't think OVH or other big providers
bother that you fully use what they *must* give you, and my relays
uptime confirms that. Probably because they have enough clients paying
VPS which do nothing. Basically, we're running cheap Tor relays thanks
to all other people buying OVH services and not really using them.

&gt; What they mean is that you have a 100 MBit/s network card, and they allow you to \
&gt; burst up to the full 100 MBit/s. However, they usually have a total bandwidth cap \
&gt; on such service, or become angry and threaten to disconnect your service if you \
&gt; don't cut down your usage (this has happened to me). 
&gt; It is far more expensive to obtain *continuous*, i.e., *sustained* bandwidth usage \
&gt; over time. Generally, it's cheaper to buy in bulk. In the US, the cheapest \
&gt; bandwidth service we found (that also allows us to run Tor relays) was one that \
&gt; offers sustained 1 Gbit/s for an average of $500/month (including service fees). 
&gt; &gt; The same applies for 0-day attacks: if you need to buy them just for attacking \
&gt; &gt; Tor, then they are expensive. If you are an organization in the business of \
&gt; &gt; handling 0-day attacks for various other reasons, then the costs are very \
&gt; &gt; different. And it may be unclear to determine if it is easier/cheaper to \
&gt; &gt; compromise 1 top relay or 20 mid-level relays. 
&gt; It's hard to reason about this, since I'm not in the business. However, it you \
&gt; already have a zero-day, why would you want to waste it on a Tor relay? You would \
&gt; risk being discovered accessing the machine of a likely security-consious relay \
&gt; operator, and you could just run your own relays. Running your own relays does have \
&gt; some cost, but is far easier to manage and more reliable since you don't have to \
&gt; worry about being discovered or losing access because the software is patched. 
&gt; &gt; And we are not sure that the picture is so clear about botnets either: bots that \
&gt; &gt; can become guards need to have high availability (in order to pass the guard \
&gt; &gt; stability requirements), and such high availability bots are also likely to have \
&gt; &gt; a bandwidth that is higher than the water level (abandoned machines in university \
&gt; &gt; networks, ...). As a result, waterfilling would increase the number of high \
&gt; &gt; availability bots that are needed, which is likely to be hard. 
&gt; I think its much more likely that bots are running on my parents Windows machines \
&gt; than on high-bandwidth University machines.

Sure, but all those windows computers have no chance to get the guard
flag due to the likely diurnal behavior.

&gt; Sure, there might be some machines with outdated OSes out there on University \
&gt; networks, but they are also monitored pretty heavily for suspicious activity by the \
&gt; University IT folks, who regularly check in with the machine owners with anything \
&gt; suspicious occurs on the network. 
&gt; &gt; 2) Waterfilling makes it necessary for an adversary to run a larger number of \
&gt; &gt; relays. Apart from the costs of service providers, this large number of relays \
&gt; &gt; need to be managed in an apparently independent way, otherwise they would become \
&gt; &gt; suspicious to community  members, like nusenu who is doing a great job spotting \
&gt; &gt; all anomalies. It seems plausible that running 100 relays in such a way that they \
&gt; &gt; look independent is at least as difficult as doing that with 10 relays. 
&gt; But not much more difficult, and not difficult enough that an intern could not whip \
&gt; up a managed deployment in a few weeks. There are various tools out there that can \
&gt; automate software installation and configuration. Ansible, Chef, and Puppet are \
&gt; popular ones, but here is a longer list: 
&gt; https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software
&gt;  
&gt; I would be surprised if at least TorServers.net didn't already use something like \
&gt; this, since they manage a large number of relays. 
&gt; &gt; 3) The question of the protection from relays, ASes or IXPs is puzzling, and we \
&gt; &gt; do not have a strong opinion about it. We focused on relays because they are what \
&gt; &gt; is available to any attacker, compared to ASes or IXPs which are more specific \
&gt; &gt; adversaries. But, if there is a consensus that ASes or IXPs should rather be \
&gt; &gt; considered as the main target, it is easy to implement waterfilling at the AS or \
&gt; &gt; IXP level rather than at the IP level: just aggregate the bandwidth relayed per \
&gt; &gt; AS or IXP, and apply the waterfilling level computation method to them. Or we \
&gt; &gt; could mix the weights obtained for all these adversaries, in order to get some \
&gt; &gt; improvement against all of them instead of an improvement against only one and \
&gt; &gt; being agnostic about the others. 
&gt; &gt; 4) More fundamentally, since the fundamental idea of Tor is to mix traffic \
&gt; &gt; through a large number of relays, it seems to be a sound design principle to make \
&gt; &gt; the choice of the critical relays as uniform as possible, as Waterfilling aims to \
&gt; &gt; do.
&gt; I think this is the crux of my disagreement. We should base relay choice on \
&gt; security and/or performance, whether or not that means uniform choice. In a world \
&gt; where it is more costly to start up new relays than it is to run high bandwidth \
&gt; relays, the waterfilling approach may improve security. But, in my opinion, there \
&gt; are too many open questions and speculations going on here to be convinced that \
&gt; that's the world we live in.

Yes, going toward uniformity just because it is uniformity (or because
some entropy says it's better) is not the good approach. It is not our
point here, though. Our "as uniform as possible" takes into account
security as defined by several models and takes into account
performance. If making more uniform reduces security or performance, we
stop there.

Funny how we all want the same, but find difficulties to agree on some
principles.

Best,
Florentin

&gt; &gt; A casual Tor user may be concerned to see that his traffic is very likely to be \
&gt; &gt; routed through a very small number of top relays, and this effect is likely to \
&gt; &gt; increase as soon as a  multi-cores compliant implementation of Tor rises (rust \
&gt; &gt; dev). Current top relays which suffer from the main CPU bottleneck will probably \
&gt; &gt; be free to relay even more bandwidth than they already do, and gain an even more \
&gt; &gt; disproportionate consensus weight. Waterfilling might prevent that, and keep \
&gt; &gt; those useful relays doing their job at the middle position of paths. 
&gt; I run several high bandwidth relays. I can say that the only thing that eliminating \
&gt; the CPU bottleneck would do for me is allow me to run fewer relays in order to \
&gt; consume the bandwidth available on my machine; I still control the same amount of \
&gt; bandwidth overall. The fact that I have to run 4 relays to consume my bandwidth vs. \
&gt; 1 relay does not have any impact on my decision of whether or not I will run more; \
&gt; the main criterion in that decision is cost. 
&gt; &gt; We hope those thoughts can help, and thanks again for sharing yours.
&gt; I hope my perspective on things is useful in some way!
&gt; 
&gt; Best,
&gt; Rob
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307225417</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2018-03-07 22:54:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello

Florentin Rochet wrote:
&gt; Hello,
&gt; 
&gt; 
&gt; On 2018-03-07 14:31, Aaron Johnson wrote:
&gt; &gt; Hello friends,
&gt; &gt; 
&gt; &gt; &gt; 1) The cost of IPs vs. bandwidth is definitely a function of market
&gt; &gt; &gt; offers. Your $500/Gbps/month seems quite expensive compared to what
&gt; &gt; &gt; can be found on OVH (which is hosting a large number of relays): they
&gt; &gt; &gt; ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. If we
&gt; &gt; &gt; assume that wgg = 2/3 and a water level at 10Mbps, this means that,
&gt; &gt; &gt; if you want to have 1Gbps of guard bandwidth,
&gt; &gt; &gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; &gt; &gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; &gt; 
&gt; &gt; The question of what the cheapest attack is can indeed be estimated by
&gt; &gt; looking at market prices for the required resources. Your cost
&gt; &gt; estimate of 3.72 USD/Gbps/month for bandwidth seems off by two orders
&gt; &gt; of magnitude.
&gt; &gt; 
&gt; 
&gt; Let me merge your second answer here:
&gt; 
&gt; &gt; I see that I misread your cost calculation, and that you estimated \
&gt; &gt; $37.20/Gbps/month instead of $3.72/Gbps/month. This still seems low by an order \
&gt; &gt; of magnitude. Thus, my argument stands: waterfilling would appear to decrease the \
&gt; &gt; cost to an adversary of getting guard probability compared to Tor's current \
&gt; &gt; weighting scheme.
&gt; 
&gt; There is still something wrong.   Let's assume the adversary wants to run
&gt; 1 Gbps of real guard bandwidth.
&gt; 
&gt; With vanilla Tor, the cheapest (considering only OVH) is:
&gt; 
&gt; VPS SSD 1 (https://www.ovh.com/fr/vps/vps-ssd.xml): You need 10 of them
&gt; to reach 1Gbps of bandwidth, but you need 15 of them to actually relay 1
&gt; Gbps in the guard position (due to wgg = 2/3 roughly). This is our
&gt; calculation above: 3*10*3/2 = 45 euros/month (or a few more dollars).
&gt; 
&gt; With Waterfilling, we assume above a water level of 10 Mbits, so we need:
&gt; 
&gt; 100 VPS SSD 1 relaying 1Gbps at the guard position, which the cost turns
&gt; to be 3*100 = 300 euros/month.
&gt; 
[....]


A VPS is a shared resource environment. All VPSes on a single physical
server share the same NIC(s). While they do advertise a port speed (like
unlimited traffic at 100 mbps, 250 mbps, 1gbps, etc) they actually refer
to the theoretical physical NIC speed. Absolutely all of them have
something like a 'fair usage policy', which means that if you use more
than n % of your port's theoretical max speed during m % of time, they
will either:

a) throttle your VPS to something they find reasonable, like 5mbps or
10mbps maximum (could be far less);

b) suspend your service and force you to get dedicated hardware +
dedicated switch port and bandwidth.

I can guarantee you will never ever _ever_ run 1gpbs of total real
effective bandwidth at the guard position at the cost of 45 euros /
month nowhere in the world (doesn't matter if it's Europe, US or
whatever). Try getting a 3 euros VPS and you'll see that you won't be
able to saturate its port for too long.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307233157</emailId><senderName>"A. Johnson"</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-07 23:31:57-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On Mar 7, 2018, at 5:12 PM, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:
&gt; 
&gt; Hello,
&gt; 
&gt; 
&gt; On 2018-03-07 14:31, Aaron Johnson wrote:
&gt; &gt; Hello friends,
&gt; &gt; 
&gt; &gt; &gt; 1) The cost of IPs vs. bandwidth is definitely a function of market
&gt; &gt; &gt; offers. Your $500/Gbps/month seems quite expensive compared to what
&gt; &gt; &gt; can be found on OVH (which is hosting a large number of relays): they
&gt; &gt; &gt; ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. If we
&gt; &gt; &gt; assume that wgg = 2/3 and a water level at 10Mbps, this means that,
&gt; &gt; &gt; if you want to have 1Gbps of guard bandwidth,
&gt; &gt; &gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month
&gt; &gt; &gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt; &gt; 
&gt; &gt; The question of what the cheapest attack is can indeed be estimated by
&gt; &gt; looking at market prices for the required resources. Your cost
&gt; &gt; estimate of 3.72 USD/Gbps/month for bandwidth seems off by two orders
&gt; &gt; of magnitude.
&gt; &gt; 
&gt; 
&gt; Let me merge your second answer here:
&gt; 
&gt; &gt; I see that I misread your cost calculation, and that you estimated \
&gt; &gt; $37.20/Gbps/month instead of $3.72/Gbps/month. This still seems low by an order \
&gt; &gt; of magnitude. Thus, my argument stands: waterfilling would appear to decrease the \
&gt; &gt; cost to an adversary of getting guard probability compared to Tor's current \
&gt; &gt; weighting scheme.
&gt; 
&gt; There is still something wrong.

What's wrong? $37.20Gbps/month = 30 Euros/Gbps/month, which is what you are claiming. \
This would be the lowest price for a sustained Gbps transfer by a significant margin \
among all of the deals that have appeared on this thread. The other lowest was from \
Alex, who found $100/Gbps/month. I somewhat doubt that you could actually achieve \
1Gbps sustained for 30 Euros/month on a shared VPS or that OVH would actually \
tolerate using this much bandwidth at this little cost. It would at least be a \
notable new record for the cheapest possible Tor bandwidth, as far as I can tell.

&gt; With Waterfilling, we assume above a water level of 10 Mbits, so we need:
&gt; 
&gt; 100 VPS SSD 1 relaying 1Gbps at the guard position, which the cost turns
&gt; to be 3*100 = 300 euros/month.

This calculation is much too kind to waterfilling :-) Why pay for a full 100Mbps with \
only 1 IPv4 address when you only need 10Mbps/IP to achieve the same guard \
probability? Earlier I showed an example of a cheaper VPS \
(https://my.hiformance.com/cart.php?a=add&amp;pid=165 \
&lt;https://my.hiformance.com/cart.php?a=add&amp;pid=165&gt;) that appears to provide for just \
$0.63/month a VPS with an IPv4 address that is capped at 6Mbps sustained througput. \
This would be a more economical way (3.5x cheaper) to attack waterfilling. \
Alternatively, I bet you could get bulk IPv4 addresses for much cheaper than the \
$3/month that OVH charges for its SSD VPS, which you could then potentially apply to \
your 100Mbps (or larger) server to get 10Mbps and more cheaply attack waterfilling. \
For example, OVH provides 256 IP addresses for its dedicated servers at no monthly \
cost (https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml \
&lt;https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml&gt;). \
These servers can be had for at least 55 euros/month, which provides 500Mbps \
unlimited. With two of those, you could achieve the above attack on waterfilling for \
110 euros = $136.36/month instead of 300 euros/month = $371.92/month. Once we're \
talking about trying to achieve a large fraction of the Tor network, which requires \
many Gbps in vanilla Tor, the fixed cost of a server becomes a smaller fraction of \
the total cost and the savings from the free extra IPs become greater.

&gt; That depends on the kind of policy that the Tor network could put in
&gt; place. If we decide that large families become a threat in
&gt; end-positions, we may just aggregate all the bandwidth of the family,
&gt; and apply Waterfilling. That would not kick them off, but would create a
&gt; kind of 'quarantine'. Same kind of suggestion than the one just below.

This seems to be a different argument than you were making, which was that the many \
servers must appear to be run independently, which I still disagree with.

&gt; This is what Waterfilling does: increase the cost of a well-defined
&gt; attacker and offer clients to choose into a more "diverse" network.

Sorry, I still don't agree. It increases the cost in terms of number of IP addresses \
required and causes clients to spread out more across guards with different IP \
addresses. This is a narrow notion of diversity and not one that I think is useful as \
a design principle.

Best,
Aaron


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;&lt;br class=""&gt;&lt;div&gt;&lt;blockquote \
type="cite" class=""&gt;&lt;div class=""&gt;On Mar 7, 2018, at 5:12 PM, Florentin Rochet \
&lt;&lt;a href="mailto:florentin.rochet@uclouvain.be" \
class=""&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;Hello,&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;span style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; \
float: none; display: inline !important;" class=""&gt;On 2018-03-07 14:31, Aaron Johnson \
wrote:&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" \
class=""&gt;&lt;blockquote type="cite" style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;Hello friends,&lt;br class=""&gt;&lt;br class=""&gt;&lt;blockquote type="cite" \
class=""&gt;1) The cost of IPs vs. bandwidth is definitely a function of market&lt;br \
class=""&gt;offers. Your $500/Gbps/month seems quite expensive compared to what&lt;br \
class=""&gt;can be found on OVH (which is hosting a large number of relays): they&lt;br \
class=""&gt;ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. If we&lt;br \
class=""&gt;assume that wgg = 2/3 and a water level at 10Mbps, this means that,&lt;br \
class=""&gt;if you want to have 1Gbps of guard bandwidth,&lt;br class=""&gt;- the current Tor \
mechanisms would cost you 3 * 10 * 3/2 = 45 euros/month&lt;br class=""&gt;- the \
waterfilling mechanism would cost you 3 * 100 = 300 euros/month&lt;br \
class=""&gt;&lt;/blockquote&gt;&lt;br class=""&gt;The question of what the cheapest attack is can \
indeed be estimated by&lt;br class=""&gt;looking at market prices for the required \
resources. Your cost&lt;br class=""&gt;estimate of 3.72 USD/Gbps/month for bandwidth seems \
off by two orders&lt;br class=""&gt;of magnitude.&lt;br class=""&gt;&lt;br class=""&gt;&lt;/blockquote&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;Let me merge your second answer here:&lt;/span&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" \
class=""&gt;&lt;blockquote type="cite" style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;I see that I misread your cost calculation, and that you estimated \
$37.20/Gbps/month instead of $3.72/Gbps/month. This still seems low by an order of \
magnitude. Thus, my argument stands: waterfilling would appear to decrease the cost \
to an adversary of getting guard probability compared to Tor's current weighting \
scheme.&lt;br class=""&gt;&lt;/blockquote&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;span style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; \
float: none; display: inline !important;" class=""&gt;There is still something \
wrong.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;What's wrong? \
$37.20Gbps/month = 30 Euros/Gbps/month, which is what you are claiming. This would be \
the lowest price for a sustained Gbps transfer by a significant margin among all of \
the deals that have appeared on this thread. The other lowest was from Alex, who \
found $100/Gbps/month. I somewhat doubt that you could actually achieve 1Gbps \
sustained for 30 Euros/month on a shared VPS or that OVH would actually tolerate \
using this much bandwidth at this little cost. It would at least be a notable new \
record for the cheapest possible Tor bandwidth, as far as I can tell.&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;With Waterfilling, we assume above a water \
level of 10 Mbits, so we need:&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: \
12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;br style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;100 VPS SSD 1 relaying 1Gbps at the guard position, which the cost \
turns&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;to be 3*100 = 300 euros/month.&lt;/span&gt;&lt;br \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;This calculation is much too \
kind to waterfilling :-) Why pay for a full 100Mbps with only 1 IPv4 address when you \
only need 10Mbps/IP to achieve the same guard probability? Earlier I showed an \
example of a cheaper VPS (&lt;a \
href="https://my.hiformance.com/cart.php?a=add&amp;pid=165" \
class=""&gt;https://my.hiformance.com/cart.php?a=add&amp;pid=165&lt;/a&gt;) that appears to \
provide for just $0.63/month a VPS with an IPv4 address that is capped at 6Mbps \
sustained througput. This would be a more economical way (3.5x cheaper) to attack \
waterfilling. Alternatively, I bet you could get bulk IPv4 addresses for much cheaper \
than the $3/month that OVH charges for its SSD VPS, which you could then potentially \
apply to your 100Mbps (or larger) server to get 10Mbps and more cheaply attack \
waterfilling. For example, OVH provides 256 IP addresses for its dedicated servers at \
no monthly cost (&lt;a href="https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml" \
class=""&gt;https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml&lt;/a&gt;). \
These servers can be had for at least 55 euros/month, which provides 500Mbps \
unlimited. With two of those, you could achieve the above attack on waterfilling for \
110 euros = $136.36/month instead of 300 euros/month = $371.92/month. Once we're \
talking about trying to achieve a large fraction of the Tor network, which requires \
many Gbps in vanilla Tor, the fixed cost of a server becomes a smaller fraction of \
the total cost and the savings from the free extra IPs become greater.&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;That depends on the kind of policy that the Tor \
network could put in&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;span style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; \
float: none; display: inline !important;" class=""&gt;place. If we decide that large \
families become a threat in&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;span style="font-family: Helvetica; font-size: 12px; font-style: \
normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; \
orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; \
float: none; display: inline !important;" class=""&gt;end-positions, we may just \
aggregate all the bandwidth of the family,&lt;/span&gt;&lt;br style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px;" class=""&gt;&lt;span style="font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; float: none; display: inline !important;" \
class=""&gt;and apply Waterfilling. That would not kick them off, but would create \
a&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px;" class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;kind of 'quarantine'. Same kind of suggestion \
than the one just below.&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \
normal; orphans: auto; text-align: start; text-indent: 0px; text-transform: none; \
white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: \
0px;" class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;This seems to be a \
different argument than you were making, which was that the many servers must appear \
to be run independently, which I still disagree with.&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;span \
style="font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; float: none; \
display: inline !important;" class=""&gt;This is what Waterfilling does: increase the \
cost of a well-defined&lt;/span&gt;&lt;br style="font-family: Helvetica; font-size: 12px; \
font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180309162114</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-09 16:21:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all :)


On 2018-03-08 00:31, A. Johnson wrote:
&gt;
&gt;&gt; On Mar 7, 2018, at 5:12 PM, Florentin Rochet 
&gt;&gt; &lt;florentin.rochet@uclouvain.be 
&gt;&gt; &lt;mailto:florentin.rochet@uclouvain.be&gt;&gt; wrote:
&gt;&gt;
&gt;&gt; Hello,
&gt;&gt;
&gt;&gt;
&gt;&gt; On 2018-03-07 14:31, Aaron Johnson wrote:
&gt;&gt;&gt; Hello friends,
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; 1) The cost of IPs vs. bandwidth is definitely a function of market
&gt;&gt;&gt;&gt; offers. Your $500/Gbps/month seems quite expensive compared to what
&gt;&gt;&gt;&gt; can be found on OVH (which is hosting a large number of relays): they
&gt;&gt;&gt;&gt; ask ~3 euros/IP/month, including unlimited 100 Mbps traffic. If we
&gt;&gt;&gt;&gt; assume that wgg = 2/3 and a water level at 10Mbps, this means that,
&gt;&gt;&gt;&gt; if you want to have 1Gbps of guard bandwidth,
&gt;&gt;&gt;&gt; - the current Tor mechanisms would cost you 3 * 10 * 3/2 = 45 
&gt;&gt;&gt;&gt; euros/month
&gt;&gt;&gt;&gt; - the waterfilling mechanism would cost you 3 * 100 = 300 euros/month
&gt;&gt;&gt;
&gt;&gt;&gt; The question of what the cheapest attack is can indeed be estimated by
&gt;&gt;&gt; looking at market prices for the required resources. Your cost
&gt;&gt;&gt; estimate of 3.72 USD/Gbps/month for bandwidth seems off by two orders
&gt;&gt;&gt; of magnitude.
&gt;&gt;&gt;
&gt;&gt;
&gt;&gt; Let me merge your second answer here:
&gt;&gt;
&gt;&gt;&gt; I see that I misread your cost calculation, and that you estimated 
&gt;&gt;&gt; $37.20/Gbps/month instead of $3.72/Gbps/month. This still seems low 
&gt;&gt;&gt; by an order of magnitude. Thus, my argument stands: waterfilling 
&gt;&gt;&gt; would appear to decrease the cost to an adversary of getting guard 
&gt;&gt;&gt; probability compared to Tor's current weighting scheme.
&gt;&gt;
&gt;&gt; There is still something wrong.
&gt;
&gt; What's wrong? $37.20Gbps/month = 30 Euros/Gbps/month, which is what 
&gt; you are claiming.

I am sorry, "wrong" was a bad chosen word. It is just that we are not 
comparing the same bandwidth. What is written above is 1Gbps of *guard* 
bandwidth, which means 1,5 Gbps of bandwidth due to the 2/3 ratio on 
vanilla Tor. Either one are fine, but since we started with 1Gbps of 
*guard* bandwidth, let's keep using this baseline not to get confused :)


&gt; This would be the lowest price for a sustained Gbps transfer by a 
&gt; significant margin among all of the deals that have appeared on this 
&gt; thread. The other lowest was from Alex, who found $100/Gbps/month. I 
&gt; somewhat doubt that you could actually achieve 1Gbps sustained for 30 
&gt; Euros/month on a shared VPS or that OVH would actually tolerate using 
&gt; this much bandwidth at this little cost.

Rob and s7r also raised the same argument. So, let me share my complete 
experience regarding this topic:

I decided some time ago to invest 500$ in running relays, I did some 
research to look for the cheapest offers and also to try to setup my 
relays in different AS, if possible. I did find some interesting deals 
in different countries, with different providers and I made a list to 
try them all. All of the deals were quite similar: 100 Mbits unlimited, 
at an insane low price. So insane that I was suspicious as you are all. 
I started my relays and got a few bad experiences that I can list here:

- One of the deal was 50€/year for an unlimited 100Mbits in Sweden. 
After 3 or 4 weeks, my access got simply revoked with no warning or 
message. I contacted the support and got some clumsy arguments about the 
fact that I was running an hacking tool. Needless to say, the probable 
reason was my bandwidth consumption.
- Another one was an unlimited 100 Mbits in UK for 4pounds/month. The 
first few days were nice, relaying ~70Mbits. Then I got throttled to 
8Mbits until the end of the month.
- Another one was a reseller. I managed to run 200Mbits during a few 
days of Exit bandwidth on 1 machine, for less than 8€/month. Then, my 
access were revoked due to some external complain. The funny things was 
that I did ask if I could run an Exit Tor relay before and the support 
answered that they had no problems with Tor relays.

The list can go on, I had the same kind of problems with other 
providers. All of them have something is common, they are all small 
companies using what Rob said "unlimited bandwidth as marketing term".

Hopefully I had some good experience too (all of them are exit relays):

- I run a few relays at OVH (France, Poland), 100 Mbits for 3€/month 
like the offer linked in this thread. A different datacenter for each. 
No complain from the provider and the relays are used since months.
- I run one unlimited 100Mbits relay in Moldova since months
- I run one unlimited 100Mbits relay in Canada since months

Now, If we take the /16 prefix of the IP I got from my 3 OVH European 
relays: "54.37", "137.74", "145.239", and if we do some atlas relay search:

https://metrics.torproject.org/rs.html#search/137.74
https://metrics.torproject.org/rs.html#search/%20%0954.37
https://metrics.torproject.org/rs.html#search/145.239

All relays appearing to advertise around 10~12 MiB/s are *probably* the 
offer I linked in this thread. These relays even have a huge consensus 
weight :(.

Moreover, there is some people running more than 1Gbps with this method, 
such as this relay operator: 
https://metrics.torproject.org/rs.html#details/117B99D5CE22174DEA7F1AD3BE25ECE993F486B5 
and this guy is doing it with the price I gave above :)

So why is it working? I come up the following conclusion: OVH is a big 
enough company not to lie with "unlimited, unmetered 100Mbits". I did 
not try other big providers, but that would be likely the same result.

Conclusion: we can run many Gbps of bandwidth with the price I gave 
above, for now.

&gt; It would at least be a notable new record for the cheapest possible 
&gt; Tor bandwidth, as far as I can tell.
&gt;
&gt;&gt; With Waterfilling, we assume above a water level of 10 Mbits, so we need:
&gt;&gt;
&gt;&gt; 100 VPS SSD 1 relaying 1Gbps at the guard position, which the cost turns
&gt;&gt; to be 3*100 = 300 euros/month.
&gt;
&gt; This calculation is much too kind to waterfilling :-) Why pay for a 
&gt; full 100Mbps with only 1 IPv4 address when you only need 10Mbps/IP to 
&gt; achieve the same guard probability? Earlier I showed an example of a 
&gt; cheaper VPS (https://my.hiformance.com/cart.php?a=add&amp;pid=165) that 
&gt; appears to provide for just $0.63/month a VPS with an IPv4 address 
&gt; that is capped at 6Mbps sustained througput. This would be a more 
&gt; economical way (3.5x cheaper) to attack waterfilling.

Yes, you are right. This is insane price and theoretically stronger 
against Waterfilling. But let me count the number of relays needed to 
achieve, let's say 10% of bandwidth with that provider, and let's 
suppose 10% is 15 Gbps 
(https://metrics.torproject.org/bandwidth-flags.html). Waterfilling 
reduces the bandwidth that the adversary needs by (currently) a 2/3 
ratio. So, the adversary needs 10 Gbits:

10000/6 = 1666 relays.

 From this number, I wonder the following things:

Can an adversary puts 1666 Guard relays in the network such that this 
community would not notice that something strange is happening? Given 
the fact that we don't even have 2000 Guards by now.

Does the provider have enough IPv4? Are they the same /16?

Would it be as compliant than OVH?

Given those numbers, is it a good thing to reason over security with 
money only?

&gt; Alternatively, I bet you could get bulk IPv4 addresses for much 
&gt; cheaper than the $3/month that OVH charges for its SSD VPS, which you 
&gt; could then potentially apply to your 100Mbps (or larger) server to get 
&gt; 10Mbps and more cheaply attack waterfilling. For example, OVH provides 
&gt; 256 IP addresses for its dedicated servers at no monthly cost 
&gt; (https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml). 
&gt; These servers can be had for at least 55 euros/month, which provides 
&gt; 500Mbps unlimited. With two of those, you could achieve the above 
&gt; attack on waterfilling for 110 euros = $136.36/month instead of 300 
&gt; euros/month = $371.92/month.

You're right. But you're also having the same /24 for all your relays 
running on this machine. Some easy rule on the directory server can 
prevent this to happen. Limiting the number of relays over a same /24 
for example.

&gt; Once we're talking about trying to achieve a large fraction of the Tor 
&gt; network, which requires many Gbps in vanilla Tor, the fixed cost of a 
&gt; server becomes a smaller fraction of the total cost and the savings 
&gt; from the free extra IPs become greater.
&gt;
&gt;&gt; That depends on the kind of policy that the Tor network could put in
&gt;&gt; place. If we decide that large families become a threat in
&gt;&gt; end-positions, we may just aggregate all the bandwidth of the family,
&gt;&gt; and apply Waterfilling. That would not kick them off, but would create a
&gt;&gt; kind of 'quarantine'. Same kind of suggestion than the one just below.
&gt;
&gt; This seems to be a different argument than you were making, which was 
&gt; that the many servers must appear to be run independently, which I 
&gt; still disagree with.
&gt;
&gt;&gt; This is what Waterfilling does: increase the cost of a well-defined
&gt;&gt; attacker and offer clients to choose into a more "diverse" network.
&gt;
&gt; Sorry, I still don't agree. It increases the cost in terms of number 
&gt; of IP addresses required and causes clients to spread out more across 
&gt; guards with different IP addresses. This is a narrow notion of 
&gt; diversity and not one that I think is useful as a design principle.

I agree that this is a narrow notion of diversity. Waterfilling is 
currently applied over IP, but this is not a *mandatory* design. What 
Tor does now, is an attacker-agnostic balance of bandwidth. Waterfilling 
should be seen as a technique that allows to take into account an 
attacker in the balance of the network. It can be applied with a wider 
notion of diversity and security, as we already outlined.

I hope it helps and many thanks for your comments :)

Best,
Florentin

&gt;
&gt; Best,
&gt; Aaron
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hi all :)&lt;br&gt;
    &lt;/p&gt;
    &lt;br&gt;
    &lt;div class="moz-cite-prefix"&gt;On 2018-03-08 00:31, A. Johnson wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
      &lt;br class=""&gt;
      &lt;div&gt;
        &lt;blockquote type="cite" class=""&gt;
          &lt;div class=""&gt;On Mar 7, 2018, at 5:12 PM, Florentin Rochet
            &lt;&lt;a href="mailto:florentin.rochet@uclouvain.be" class=""
              moz-do-not-send="true"&gt;florentin.rochet@uclouvain.be&lt;/a&gt;&gt;
            wrote:&lt;/div&gt;
          &lt;br class="Apple-interchange-newline"&gt;
          &lt;div class=""&gt;&lt;span style="font-family: Helvetica; font-size:
              12px; font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;Hello,&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;On 2018-03-07 14:31, Aaron
              Johnson wrote:&lt;/span&gt;&lt;br style="font-family: Helvetica;
              font-size: 12px; font-style: normal; font-variant-caps:
              normal; font-weight: normal; letter-spacing: normal;
              orphans: auto; text-align: start; text-indent: 0px;
              text-transform: none; white-space: normal; widows: auto;
              word-spacing: 0px; -webkit-text-stroke-width: 0px;"
              class=""&gt;
            &lt;blockquote type="cite" style="font-family: Helvetica;
              font-size: 12px; font-style: normal; font-variant-caps:
              normal; font-weight: normal; letter-spacing: normal;
              orphans: auto; text-align: start; text-indent: 0px;
              text-transform: none; white-space: normal; widows: auto;
              word-spacing: 0px; -webkit-text-stroke-width: 0px;"
              class=""&gt;Hello friends,&lt;br class=""&gt;
              &lt;br class=""&gt;
              &lt;blockquote type="cite" class=""&gt;1) The cost of IPs vs.
                bandwidth is definitely a function of market&lt;br class=""&gt;
                offers. Your $500/Gbps/month seems quite expensive
                compared to what&lt;br class=""&gt;
                can be found on OVH (which is hosting a large number of
                relays): they&lt;br class=""&gt;
                ask ~3 euros/IP/month, including unlimited 100 Mbps
                traffic. If we&lt;br class=""&gt;
                assume that wgg = 2/3 and a water level at 10Mbps, this
                means that,&lt;br class=""&gt;
                if you want to have 1Gbps of guard bandwidth,&lt;br
                  class=""&gt;
                - the current Tor mechanisms would cost you 3 * 10 * 3/2
                = 45 euros/month&lt;br class=""&gt;
                - the waterfilling mechanism would cost you 3 * 100 =
                300 euros/month&lt;br class=""&gt;
              &lt;/blockquote&gt;
              &lt;br class=""&gt;
              The question of what the cheapest attack is can indeed be
              estimated by&lt;br class=""&gt;
              looking at market prices for the required resources. Your
              cost&lt;br class=""&gt;
              estimate of 3.72 USD/Gbps/month for bandwidth seems off by
              two orders&lt;br class=""&gt;
              of magnitude.&lt;br class=""&gt;
              &lt;br class=""&gt;
            &lt;/blockquote&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;Let me merge your second
              answer here:&lt;/span&gt;&lt;br style="font-family: Helvetica;
              font-size: 12px; font-style: normal; font-variant-caps:
              normal; font-weight: normal; letter-spacing: normal;
              orphans: auto; text-align: start; text-indent: 0px;
              text-transform: none; white-space: normal; widows: auto;
              word-spacing: 0px; -webkit-text-stroke-width: 0px;"
              class=""&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;blockquote type="cite" style="font-family: Helvetica;
              font-size: 12px; font-style: normal; font-variant-caps:
              normal; font-weight: normal; letter-spacing: normal;
              orphans: auto; text-align: start; text-indent: 0px;
              text-transform: none; white-space: normal; widows: auto;
              word-spacing: 0px; -webkit-text-stroke-width: 0px;"
              class=""&gt;I see that I misread your cost calculation, and
              that you estimated $37.20/Gbps/month instead of
              $3.72/Gbps/month. This still seems low by an order of
              magnitude. Thus, my argument stands: waterfilling would
              appear to decrease the cost to an adversary of getting
              guard probability compared to Tor's current weighting
              scheme.&lt;br class=""&gt;
            &lt;/blockquote&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;There is still something
              wrong.&lt;/span&gt;&lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;div&gt;What's wrong? $37.20Gbps/month = 30 Euros/Gbps/month, which
          is what you are claiming. &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    I am sorry, "wrong" was a bad chosen word. It is just that we are
    not comparing the same bandwidth. What is written above is 1Gbps of
    *guard* bandwidth, which means 1,5 Gbps of bandwidth due to the 2/3
    ratio on vanilla Tor. Either one are fine, but since we started with
    1Gbps of *guard* bandwidth, let's keep using this baseline not to
    get confused :)&lt;br&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;div&gt;
        &lt;div&gt;This would be the lowest price for a sustained Gbps
          transfer by a significant margin among all of the deals that
          have appeared on this thread. The other lowest was from Alex,
          who found $100/Gbps/month. I somewhat doubt that you could
          actually achieve 1Gbps sustained for 30 Euros/month on a
          shared VPS or that OVH would actually tolerate using this much
          bandwidth at this little cost.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Rob and s7r also raised the same argument. So, let me share my
    complete experience regarding this topic:&lt;br&gt;
    &lt;br&gt;
    I decided some time ago to invest 500$ in running relays, I did some
    research to look for the cheapest offers and also to try to setup my
    relays in different AS, if possible. I did find some interesting
    deals in different countries, with different providers and I made a
    list to try them all. All of the deals were quite similar: 100 Mbits
    unlimited, at an insane low price. So insane that I was suspicious
    as you are all. I started my relays and got a few bad experiences
    that I can list here:&lt;br&gt;
    &lt;br&gt;
    - One of the deal was 50€/year for an unlimited 100Mbits in Sweden.
    After 3 or 4 weeks, my access got simply revoked with no warning or
    message. I contacted the support and got some clumsy arguments about
    the fact that I was running an hacking tool. Needless to say, the
    probable reason was my bandwidth consumption.&lt;br&gt;
    - Another one was an unlimited 100 Mbits in UK for 4pounds/month.
    The first few days were nice, relaying ~70Mbits. Then I got
    throttled to 8Mbits until the end of the month.&lt;br&gt;
    - Another one was a reseller. I managed to run 200Mbits during a few
    days of Exit bandwidth on 1 machine, for less than 8€/month. Then,
    my access were revoked due to some external complain. The funny
    things was that I did ask if I could run an Exit Tor relay before
    and the support answered that they had no problems with Tor relays.&lt;br&gt;
    &lt;br&gt;
    The list can go on, I had the same kind of problems with other
    providers. All of them have something is common, they are all small
    companies using what Rob said "unlimited bandwidth as marketing
    term".&lt;br&gt;
    &lt;br&gt;
    Hopefully I had some good experience too (all of them are exit
    relays):&lt;br&gt;
    &lt;br&gt;
    - I run a few relays at OVH (France, Poland), 100 Mbits for 3€/month
    like the offer linked in this thread. A different datacenter for
    each. No complain from the provider and the relays are used since
    months.&lt;br&gt;
    - I run one unlimited 100Mbits relay in Moldova since months&lt;br&gt;
    - I run one unlimited 100Mbits relay in Canada since months&lt;br&gt;
    &lt;br&gt;
    Now, If we take the /16 prefix of the IP I got from my 3 OVH
    European relays: "54.37", "137.74", "145.239", and if we do some
    atlas relay search:&lt;br&gt;
    &lt;br&gt;
    &lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/rs.html#search/137.74"&gt;https://metrics.torproject.org/rs.html#search/137.74&lt;/a&gt;&lt;br&gt;
  &lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/rs.html#search/%20%0954.37"&gt;https://metrics.torproject.org/rs.html#search/%20%0954.37&lt;/a&gt;&lt;br&gt;
  &lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/rs.html#search/145.239"&gt;https://metrics.torproject.org/rs.html#search/145.239&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
    All relays appearing to advertise around 10~12 MiB/s are *probably*
    the offer I linked in this thread. These relays even have a huge
    consensus weight :(. &lt;br&gt;
    &lt;br&gt;
    Moreover, there is some people running more than 1Gbps with this
    method, such as this relay operator:
&lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/rs.html#details/117B99D5CE22174DEA7F1AD3BE25ECE99 \
3F486B5"&gt;https://metrics.torproject.org/rs.html#details/117B99D5CE22174DEA7F1AD3BE25ECE993F486B5&lt;/a&gt;
  and this guy is doing it with the price I gave above :)&lt;br&gt;
    &lt;br&gt;
    So why is it working? I come up the following conclusion: OVH is a
    big enough company not to lie with "unlimited, unmetered 100Mbits".
    I did not try other big providers, but that would be likely the same
    result.&lt;br&gt;
    &lt;br&gt;
    Conclusion: we can run many Gbps of bandwidth with the price I gave
    above, for now.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;div&gt;
        &lt;div&gt; It would at least be a notable new record for the cheapest
          possible Tor bandwidth, as far as I can tell.&lt;/div&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;blockquote type="cite" class=""&gt;
          &lt;div class=""&gt;&lt;span style="font-family: Helvetica; font-size:
              12px; font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;With Waterfilling, we assume
              above a water level of 10 Mbits, so we need:&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;br style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;100 VPS SSD 1 relaying 1Gbps
              at the guard position, which the cost turns&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;to be 3*100 = 300
              euros/month.&lt;/span&gt;&lt;br style="font-family: Helvetica;
              font-size: 12px; font-style: normal; font-variant-caps:
              normal; font-weight: normal; letter-spacing: normal;
              orphans: auto; text-align: start; text-indent: 0px;
              text-transform: none; white-space: normal; widows: auto;
              word-spacing: 0px; -webkit-text-stroke-width: 0px;"
              class=""&gt;
          &lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;div&gt;This calculation is much too kind to waterfilling :-) Why
          pay for a full 100Mbps with only 1 IPv4 address when you only
          need 10Mbps/IP to achieve the same guard probability? Earlier
          I showed an example of a cheaper VPS (&lt;a
            href="https://my.hiformance.com/cart.php?a=add&amp;pid=165"
            class="" \
moz-do-not-send="true"&gt;https://my.hiformance.com/cart.php?a=add&amp;pid=165&lt;/a&gt;)  \
that appears to provide for just $0.63/month a VPS with an  IPv4 address that is \
capped at 6Mbps sustained througput. This  would be a more economical way (3.5x \
cheaper) to attack  waterfilling.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Yes, you are right. This is insane price and theoretically stronger
    against Waterfilling. But let me count the number of relays needed
    to achieve, let's say 10% of bandwidth with that provider, and let's
    suppose 10% is 15 Gbps
    (&lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/bandwidth-flags.html"&gt;https://metrics.torproject.org/bandwidth-flags.html&lt;/a&gt;). \
Waterfilling  reduces the bandwidth that the adversary needs by (currently) a 2/3
    ratio. So, the adversary needs 10 Gbits:&lt;br&gt;
    &lt;br&gt;
    10000/6 = 1666 relays.&lt;br&gt;
    &lt;br&gt;
    From this number, I wonder the following things:&lt;br&gt;
    &lt;br&gt;
    Can an adversary puts 1666 Guard relays in the network such that
    this community would not notice that something strange is happening?
    Given the fact that we don't even have 2000 Guards by now.&lt;br&gt;
    &lt;br&gt;
    Does the provider have enough IPv4? Are they the same /16?&lt;br&gt;
    &lt;br&gt;
    Would it be as compliant than OVH?&lt;br&gt;
    &lt;br&gt;
    Given those numbers, is it a good thing to reason over security with
    money only?&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;div&gt;
        &lt;div&gt; Alternatively, I bet you could get bulk IPv4 addresses for
          much cheaper than the $3/month that OVH charges for its SSD
          VPS, which you could then potentially apply to your 100Mbps
          (or larger) server to get 10Mbps and more cheaply attack
          waterfilling. For example, OVH provides 256 IP addresses for
          its dedicated servers at no monthly cost (&lt;a
href="https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml"
                
            class="" \
moz-do-not-send="true"&gt;https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml&lt;/a&gt;).
  These servers can be had for at least 55 euros/month, which
          provides 500Mbps unlimited. With two of those, you could
          achieve the above attack on waterfilling for 110 euros =
          $136.36/month instead of 300 euros/month = $371.92/month.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    You're right. But you're also having the same /24 for all your
    relays running on this machine. Some easy rule on the directory
    server can prevent this to happen. Limiting the number of relays
    over a same /24 for example.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;div&gt;
        &lt;div&gt; Once we're talking about trying to achieve a large
          fraction of the Tor network, which requires many Gbps in
          vanilla Tor, the fixed cost of a server becomes a smaller
          fraction of the total cost and the savings from the free extra
          IPs become greater.&lt;/div&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;blockquote type="cite" class=""&gt;
          &lt;div class=""&gt;&lt;span style="font-family: Helvetica; font-size:
              12px; font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;That depends on the kind of
              policy that the Tor network could put in&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;place. If we decide that
              large families become a threat in&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;end-positions, we may just
              aggregate all the bandwidth of the family,&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;and apply Waterfilling. That
              would not kick them off, but would create a&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;kind of 'quarantine'. Same
              kind of suggestion than the one just below.&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
          &lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;div&gt;This seems to be a different argument than you were making,
          which was that the many servers must appear to be run
          independently, which I still disagree with.&lt;/div&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;blockquote type="cite" class=""&gt;
          &lt;div class=""&gt;&lt;span style="font-family: Helvetica; font-size:
              12px; font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;This is what Waterfilling
              does: increase the cost of a well-defined&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
            &lt;span style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px; float: none; display:
              inline !important;" class=""&gt;attacker and offer clients to
              choose into a more "diverse" network.&lt;/span&gt;&lt;br
              style="font-family: Helvetica; font-size: 12px;
              font-style: normal; font-variant-caps: normal;
              font-weight: normal; letter-spacing: normal; orphans:
              auto; text-align: start; text-indent: 0px; text-transform:
              none; white-space: normal; widows: auto; word-spacing:
              0px; -webkit-text-stroke-width: 0px;" class=""&gt;
          &lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;div&gt;Sorry, I still don't agree. It increases the cost in terms
          of number of IP addresses required and causes clients to
          spread out more across guards with different IP addresses.
          This is a narrow notion of diversity and not one that I think
          is useful as a design principle.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    I agree that this is a narrow notion of diversity. Waterfilling is
    currently applied over IP, but this is not a *mandatory* design.
    What Tor does now, is an attacker-agnostic balance of bandwidth.
    Waterfilling should be seen as a technique that allows to take into
    account an attacker in the balance of the network. It can be applied
    with a wider notion of diversity and security, as we already
    outlined.&lt;br&gt;
    &lt;br&gt;
    I hope it helps and many thanks for your comments :)&lt;br&gt;
    &lt;br&gt;
    Best,&lt;br&gt;
    Florentin&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil"&gt;
      &lt;div&gt;
        &lt;div&gt;&lt;br class=""&gt;
        &lt;/div&gt;
        &lt;div&gt;Best,&lt;/div&gt;
        &lt;div&gt;Aaron&lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180309212649</emailId><senderName>"A. Johnson"</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-03-09 21:26:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Florentin,

Thanks for the thoughtful response!


&gt; So why is it working? I come up the following conclusion: OVH is a big enough \
&gt; company not to lie with "unlimited, unmetered 100Mbits". I did not try other big \
&gt; providers, but that would be likely the same result. 
&gt; Conclusion: we can run many Gbps of bandwidth with the price I gave above, for now.

I wonder how confident we can be about this situation. If we are most worried about \
an attacker trying to get, say, 10% of the network, would the provider be as \
oblivious/generous? Your numbers below (10% = 15Gbps) would require running 15*(3/2) \
/ 0.1 = 225 relays at 3 euros/month each. Would OVH still ignore 225 cheap VPSs at \
100% bandwidth utilization? Would they still be able to provide 100Mbps at that \
number?

&gt; Yes, you are right. This is insane price and theoretically stronger against \
&gt; Waterfilling. But let me count the number of relays needed to achieve, let's say \
&gt; 10% of bandwidth with that provider, and let's suppose 10% is 15 Gbps \
&gt; (https://metrics.torproject.org/bandwidth-flags.html \
&gt; &lt;https://metrics.torproject.org/bandwidth-flags.html&gt;). Waterfilling reduces the \
&gt; bandwidth that the adversary needs by (currently) a 2/3 ratio. So, the adversary \
&gt; needs 10 Gbits: 
&gt; 10000/6 = 1666 relays.
&gt; 
&gt; From this number, I wonder the following things:
&gt; 
&gt; Can an adversary puts 1666 Guard relays in the network such that this community \
&gt; would not notice that something strange is happening? Given the fact that we don't \
&gt; even have 2000 Guards by now.

Again, I don't see how this would be more noticeable or alarming than a single entity \
providing 10% of the guard bandwidth. Moreover, the security argument that "someone \
will surely notice and do something" doesn't have a good track record. Absent a \
specific plan of how to notice it and respond automatically, I wouldn't want to rely \
on it.

&gt; Does the provider have enough IPv4? Are they the same /16?

Are you sure there aren't many providers with such cheap deals (I fairly easily found \
another with $9/year for an IP and a 2TB cap: \
&lt;https://www.woothosting.com/pulse/cart.php?gid=16&gt;)? Being in the same /16 won't \
make a difference in their guard probability.

&gt; &gt; Alternatively, I bet you could get bulk IPv4 addresses for much cheaper than the \
&gt; &gt; $3/month that OVH charges for its SSD VPS, which you could then potentially apply \
&gt; &gt; to your 100Mbps (or larger) server to get 10Mbps and more cheaply attack \
&gt; &gt; waterfilling. For example, OVH provides 256 IP addresses for its dedicated \
&gt; &gt; servers at no monthly cost \
&gt; &gt; (https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml \
&gt; &gt; &lt;https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml&gt;). \
&gt; &gt; These servers can be had for at least 55 euros/month, which provides 500Mbps \
&gt; &gt; unlimited. With two of those, you could achieve the above attack on waterfilling \
&gt; &gt; for 110 euros = $136.36/month instead of 300 euros/month = $371.92/month.
&gt; 
&gt; You're right. But you're also having the same /24 for all your relays running on \
&gt; this machine. Some easy rule on the directory server can prevent this to happen. \
&gt; Limiting the number of relays over a same /24 for example.

Incorporating IP prefix diversity in Tor's path selection does seem like a good idea \
in general. It sounds like you are suggesting that waterfilling should include a \
fixed limit on the number of relays in a /24. This is now a new scheme that would \
need its security analyzed. A few things that come to mind:  1. Would there be limits \
for larger prefixes than an adversary might obtain (e.g. /16)? If not, the limit is \
only effective for adversaries without resources to obtain a larger prefix.  2. \
Wouldn't this allow an adversary to squat on a prefix? For example, he could run a \
bunch of cheap relays on prefixes owned by the Tor-friendly ISPs and keep anybody \
else from contributing more resources using that ISP.  3. If resource limits are a \
reasonable strategy, instead of waterfilling, why not apply such limits to bandwidth \
(e.g. no more than 10Gbps per /24)? It seems simpler. It is also not susceptible to \
an attack on water filling in which the water level is raised by contributing to both \
guard and exit bandwidth.

Best,
Aaron


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;&lt;div&gt;Hi Florentin,&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;Thanks for the thoughtful response!&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div \
class=""&gt;&lt;div text="#000000" bgcolor="#FFFFFF" class=""&gt;So why is it working? I come \
up the following conclusion: OVH is a  big enough company not to lie with "unlimited, \
unmetered 100Mbits".  I did not try other big providers, but that would be likely the \
same  result.&lt;br class=""&gt;
    &lt;br class=""&gt;
    Conclusion: we can run many Gbps of bandwidth with the price I gave
    above, for now.&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;I wonder how confident we can be about this situation. If we are \
most worried about an attacker trying to get, say, 10% of the network, would the \
provider be as oblivious/generous? Your numbers below (10% = 15Gbps) would require \
running 15*(3/2) / 0.1 = 225 relays at 3 euros/month each. Would OVH still ignore 225 \
cheap VPSs at 100% bandwidth utilization? Would they still be able to provide 100Mbps \
at that number?&lt;/div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div \
text="#000000" bgcolor="#FFFFFF" class=""&gt;  Yes, you are right. This is insane price \
and theoretically stronger  against Waterfilling. But let me count the number of \
relays needed  to achieve, let's say 10% of bandwidth with that provider, and let's
    suppose 10% is 15 Gbps
    (&lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/bandwidth-flags.html"&gt;https://metrics.torproject.org/bandwidth-flags.html&lt;/a&gt;). \
Waterfilling  reduces the bandwidth that the adversary needs by (currently) a 2/3
    ratio. So, the adversary needs 10 Gbits:&lt;br class=""&gt;
    &lt;br class=""&gt;
    10000/6 = 1666 relays.&lt;br class=""&gt;
    &lt;br class=""&gt;
    From this number, I wonder the following things:&lt;br class=""&gt;
    &lt;br class=""&gt;
    Can an adversary puts 1666 Guard relays in the network such that
    this community would not notice that something strange is happening?
    Given the fact that we don't even have 2000 Guards by now.&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div&gt;Again, I don't see how \
this would be more noticeable or alarming than a single entity providing 10% of the \
guard bandwidth. Moreover, the security argument that "someone will surely notice and \
do something" doesn't have a good track record. Absent a specific plan of how to \
notice it and respond automatically, I wouldn't want to rely on it.&lt;/div&gt;&lt;br \
class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div text="#000000" \
bgcolor="#FFFFFF" class=""&gt;  
    Does the provider have enough IPv4? Are they the same /16?&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;Are you sure there aren't \
many providers with such cheap deals (I fairly easily found another with $9/year for \
an IP and a 2TB cap: &lt;&lt;a href="https://www.woothosting.com/pulse/cart.php?gid=16" \
class=""&gt;https://www.woothosting.com/pulse/cart.php?gid=16&lt;/a&gt;&gt;)? Being in the \
same /16 won't make a difference in their guard probability.&lt;/div&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;&lt;div \
text="#000000" bgcolor="#FFFFFF" class=""&gt;  &lt;blockquote type="cite" \
cite="mid:7070BBBD-5623-45B2-A011-D4C1E831DBAC@nrl.navy.mil" class=""&gt;  &lt;div \
                class=""&gt;
        &lt;div class=""&gt; Alternatively, I bet you could get bulk IPv4 addresses for
          much cheaper than the $3/month that OVH charges for its SSD
          VPS, which you could then potentially apply to your 100Mbps
          (or larger) server to get 10Mbps and more cheaply attack
          waterfilling. For example, OVH provides 256 IP addresses for
          its dedicated servers at no monthly cost (&lt;a \
href="https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml" \
class="" moz-do-not-send="true"&gt;https://www.ovh.co.uk/dedicated_servers/details-servers-range-GAME-id-MC-64-OC.xml&lt;/a&gt;).
  These servers can be had for at least 55 euros/month, which
          provides 500Mbps unlimited. With two of those, you could
          achieve the above attack on waterfilling for 110 euros =
          $136.36/month instead of 300 euros/month = $371.92/month.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;br class=""&gt;
    You're right. But you're also having the same /24 for all your
    relays running on this machine. Some easy rule on the directory
    server can prevent this to happen. Limiting the number of relays
    over a same /24 for example.&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div&gt;Incorporating IP prefix diversity in Tor's path selection does \
seem like a good idea in general. It sounds like you are suggesting that waterfilling \
should include a fixed limit on the number of relays in a /24. This is now a new \
scheme that would need its security analyzed. A few things that come to \
mind:&lt;/div&gt;&lt;div&gt;  1. Would there be limits for larger prefixes than an adversary \
might obtain (e.g. /16)? If not, the limit is only effective for adversaries without \
resources to obtain a larger prefix.&lt;/div&gt;&lt;div&gt;  2. Wouldn't this allow an \
adversary to squat on a prefix? For example, he could run a bunch of cheap relays on \
prefixes owned by the Tor-friendly ISPs and keep anybody else from contributing more \
resources using that ISP.&lt;/div&gt;&lt;div&gt;  3. If resource limits are a reasonable \
strategy, instead of waterfilling, why not apply such limits to bandwidth (e.g. no \
more than 10Gbps per /24)? It seems simpler. It is also not susceptible to an attack \
on water filling in which the water level is raised by contributing to both guard and \
exit bandwidth.&lt;/div&gt;&lt;div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div \
class=""&gt;Aaron&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180202110347</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-02-02 11:03:47-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

Jaskaran Singh &lt;jvsg1303@gmail.com&gt; writes:

&gt; [ text/plain ]
&gt; Hi,
&gt; 
&gt; I thought the project idea had already been depreciated in favor of
&gt; counting unique users by directory fetches. No?
&gt; 

Yes, we do count unique users by directory fetches for the "active Tor
users" metric: https://metrics.torproject.org/userstats-relay-country.html

But we also use in-memory data structures tracking IP addresses to count
unique users per-country: \
https://metrics.torproject.org/userstats-bridge-combined.html?start=2017-11-04&amp;end=2018-02-02&amp;country=dz


I was not aware that we are planning to deprecate the latter in favor of
counting directory fetches. Did you get that from somewhere? Perhaps it
could make sense, not sure.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180202122025</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2018-02-02 12:20:25-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Oops. I meant "counting unique users just like we do with directory
fetches". The argument given was that most users are already behind NAT and
hence counting unique IP addrs would not be accurate anyway. It was
suggested that we count per connection country statistics (that is, total
number of connections coming from a country) and divide that by average
number of connections a user makes, to arrive at estimated number of unique
users. I cannot find where I got to know this. Maybe on IRC, but I don't
have logs of an year ago.

Also, the Metrics team has(?) to come up with a proposal on this IIRC.
Until then it would not be considered a valid project?

Karsten would have something to say on this.

cc: karsten

On Fri, Feb 2, 2018 at 4:33 PM, George Kadianakis &lt;desnacked@riseup.net&gt;
wrote:

&gt; Jaskaran Singh &lt;jvsg1303@gmail.com&gt; writes:
&gt;
&gt; &gt; [ text/plain ]
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt; I thought the project idea had already been depreciated in favor of
&gt; &gt; counting unique users by directory fetches. No?
&gt; &gt;
&gt;
&gt; Yes, we do count unique users by directory fetches for the "active Tor
&gt; users" metric: https://metrics.torproject.org/userstats-relay-country.html
&gt;
&gt; But we also use in-memory data structures tracking IP addresses to count
&gt; unique users per-country: https://metrics.torproject.
&gt; org/userstats-bridge-combined.html?start=2017-11-04&amp;end=
&gt; 2018-02-02&amp;country=dz
&gt;
&gt; I was not aware that we are planning to deprecate the latter in favor of
&gt; counting directory fetches. Did you get that from somewhere? Perhaps it
&gt; could make sense, not sure.
&gt;
&gt; Cheers!
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Oops. I meant "counting unique users just \
like we do with directory fetches". The argument given was that most users are \
already behind NAT and hence counting unique IP addrs would not be accurate anyway. \
It was suggested that we count per connection country statistics (that is, total \
number of connections coming from a country) and divide that by average number of \
connections a user makes, to arrive at estimated number of unique users. I cannot \
find where I got to know this. Maybe on IRC, but I don't have logs of an year \
ago.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, the Metrics team has(?) to come up with a \
proposal on this IIRC. Until then it would not be considered a valid \
project?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Karsten would have something to say on \
this.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;cc: karsten&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Fri, Feb 2, 2018 at 4:33 PM, \
George Kadianakis &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:desnacked@riseup.net" \
target="_blank"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Jaskaran Singh &lt;&lt;a \
href="mailto:jvsg1303@gmail.com"&gt;jvsg1303@gmail.com&lt;/a&gt;&gt; writes:&lt;br&gt; &lt;br&gt;
&gt; [ text/plain ]&lt;br&gt;
&lt;span class=""&gt;&gt; Hi,&lt;br&gt;
&gt;&lt;br&gt;
&gt; I thought the project idea had already been depreciated in favor of&lt;br&gt;
&gt; counting unique users by directory fetches. No?&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Yes, we do count unique users by directory fetches for the "active \
Tor&lt;br&gt; users" metric: &lt;a \
href="https://metrics.torproject.org/userstats-relay-country.html" rel="noreferrer" \
target="_blank"&gt;https://metrics.torproject.&lt;wbr&gt;org/userstats-relay-country.&lt;wbr&gt;html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
But we also use in-memory data structures tracking IP addresses to count&lt;br&gt;
unique users per-country: &lt;a \
href="https://metrics.torproject.org/userstats-bridge-combined.html?start=2017-11-04&amp;end=2018-02-02&amp;country=dz" \
rel="noreferrer" target="_blank"&gt;https://metrics.torproject.&lt;wbr&gt;org/userstats-bridge- \
combined.&lt;wbr&gt;html?start=2017-11-04&amp;end=&lt;wbr&gt;2018-02-02&amp;country=dz&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; I was not aware that we are planning to deprecate the latter in favor of&lt;br&gt;
counting directory fetches. Did you get that from somewhere? Perhaps it&lt;br&gt;
could make sense, not sure.&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180203104925</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-02-03 10:49:25-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 02/02/18 12:08, Jaskaran Singh wrote:
&gt; Also, the Metrics team has(?) to come up with a proposal on this IIRC.
&gt; Until then it would not be considered a valid project?

Considered a valid project by whom?

Metrics is currently very busy and may not have time to assist with the
project, but it doesn't mean that the work shouldn't be done or that it
isn't "valid".

It's more important that the project is safe than that Metrics has put
time into it. If the work shows promise then maybe that would be a
reason for Metrics to reprioritise it later.

Until an analysis of the safety is done (which may have already happened
from the design, I've not followed this) just use a test network for the
development. In this way, you can only be attacking yourself.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180209173449</emailId><senderName>Aruna Maurya</senderName><senderEmail>aruna.maurya12@gmail.com</senderEmail><timestampReceived>2018-02-09 17:34:49-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

[Attachment #2 (multipart/alternative)]


Hey!

Is anybody willing to mentor me on this project?

On Sat, Feb 3, 2018 at 4:19 PM, Iain Learmonth &lt;irl@torproject.org&gt; wrote:

&gt; Hi,
&gt;
&gt; On 02/02/18 12:08, Jaskaran Singh wrote:
&gt; &gt; Also, the Metrics team has(?) to come up with a proposal on this IIRC.
&gt; &gt; Until then it would not be considered a valid project?
&gt;
&gt; Considered a valid project by whom?
&gt;
&gt; Metrics is currently very busy and may not have time to assist with the
&gt; project, but it doesn't mean that the work shouldn't be done or that it
&gt; isn't "valid".
&gt;
&gt; It's more important that the project is safe than that Metrics has put
&gt; time into it. If the work shows promise then maybe that would be a
&gt; reason for Metrics to reprioritise it later.
&gt;
&gt; Until an analysis of the safety is done (which may have already happened
&gt; from the design, I've not followed this) just use a test network for the
&gt; development. In this way, you can only be attacking yourself.
&gt;
&gt; Thanks,
&gt; Iain.
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;


-- 
Regards,
Aruna Maurya,
CSE,B.tech,
Blog &lt;https://themindreserves.wordpress.com/&gt; | Medium
&lt;https://medium.com/@arunamaurya&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hey!&lt;br&gt;&lt;br&gt;&lt;/div&gt;Is anybody willing to mentor me on this \
project?&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Feb \
3, 2018 at 4:19 PM, Iain Learmonth &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:irl@torproject.org" target="_blank"&gt;irl@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;span class=""&gt;&lt;br&gt;
On 02/02/18 12:08, Jaskaran Singh wrote:&lt;br&gt;
&gt; Also, the Metrics team has(?) to come up with a proposal on this IIRC.&lt;br&gt;
&gt; Until then it would not be considered a valid project?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Considered a valid project by whom?&lt;br&gt;
&lt;br&gt;
Metrics is currently very busy and may not have time to assist with the&lt;br&gt;
project, but it doesn't mean that the work shouldn't be done or that it&lt;br&gt;
isn't "valid".&lt;br&gt;
&lt;br&gt;
It's more important that the project is safe than that Metrics has put&lt;br&gt;
time into it. If the work shows promise then maybe that would be a&lt;br&gt;
reason for Metrics to reprioritise it later.&lt;br&gt;
&lt;br&gt;
Until an analysis of the safety is done (which may have already happened&lt;br&gt;
from the design, I've not followed this) just use a test network for the&lt;br&gt;
development. In this way, you can only be attacking yourself.&lt;br&gt;
&lt;br&gt;
Thanks,&lt;br&gt;
Iain.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Regards,&lt;br&gt;&lt;/div&gt;Aruna Maurya,&lt;br&gt;&lt;/div&gt;CSE,B.tech,&lt;br&gt;&lt;a \
href="https://themindreserves.wordpress.com/" target="_blank"&gt;Blog&lt;/a&gt;  | &lt;a \
href="https://medium.com/@arunamaurya" target="_blank"&gt;Medium \
&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180123103549</emailId><senderName>"Silvia [Hiro]"</senderName><senderEmail>hiro@torproject.org</senderEmail><timestampReceived>2018-01-23 10:35:49-0400</timestampReceived><subject>Re: [tor-dev] website patches for new Tor relay guide sidenav entry</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,
thanks for letting me know.
I have fixed the merge conflicts myself and merged.

-hiro

On 23/01/18 11:03, nusenu wrote:
&gt; Hi Silvia,
&gt; 
&gt; I submitted a (trivial) patch (in #24881) to add links to the new tor relay guide 
&gt; on the website and to remove previous guides that have been merged into 
&gt; the new guide.
&gt; 
&gt; I noticed that since than new commits have been merged and these patches
&gt; will probably no longer apply cleanly.
&gt; 
&gt; I will try to ensure they apply (rebase) shortly before you have time 
&gt; to look at them if you can tell me approximately when that will be. 
&gt; 
&gt; thanks,
&gt; nusenu
&gt; 
&gt; 
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180122103232</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-01-22 10:32:32-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-01-22 09:03, nusenu wrote:
&gt; Hi Karsten,

Hi nusenu,

&gt; just wanted to let you know that the delta between
&gt; relays_published and current time is unusually high.
&gt; 
&gt; 
&gt; https://onionoo.torproject.org/details?limit=0
&gt; 
&gt; {"version":"5.0",
&gt; "build_revision":"0bce98a",
&gt; "relays_published":"2018-01-21 22:00:00",
&gt; 
&gt; This is currently blocking ornetradar reports.

Looks like the primary CollecTor instance had a problem between 22:00
and 08:00 UTC. It works again now, as does Onionoo.

We didn't lose any data, because the primary CollecTor instance obtained
all descriptors it had missed earlier from the backup CollecTor instance.

&gt; thanks for having a look,

Thanks for the report!

&gt; nusenu

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180122175700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-22 17:57:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Looks like the primary CollecTor instance had a problem between 22:00
&gt; and 08:00 UTC. It works again now, as does Onionoo.

Karsten, thanks for the fast reaction.

&gt; We didn't lose any data, because the primary CollecTor instance obtained
&gt; all descriptors it had missed earlier from the backup CollecTor instance.


Since I'm archiving onionoo data I'm "loosing" data (causing blind spots) everytime a \
"relays_published"  timestamp is skipped. In theory one could spin up an onionoo \
instance to generate data for skipped timestamps but in practice this is hard \
(requires lots of resources).  (I know, you are probably talking about not loosing \
any raw CollecTor data, but wanted to mention that nonetheless.)

Do you monitor onionoo for such problems ("relays_published" timestamp remaining \
unchanged for &gt;1-2 hours)?  Would you find something like that useful?

Thanks for keeping it running besides all the other things you do. 

I'm wondering if the admin team would be available to cover such cases to reduce
the operations load for developers.

kind regards,
nusenu


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124145033</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-01-24 14:50:33-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi nusenu,

On 2018-01-22 18:57, nusenu wrote:
&gt; &gt; Looks like the primary CollecTor instance had a problem between 22:00
&gt; &gt; and 08:00 UTC. It works again now, as does Onionoo.
&gt; 
&gt; Karsten, thanks for the fast reaction.
&gt; 
&gt; &gt; We didn't lose any data, because the primary CollecTor instance obtained
&gt; &gt; all descriptors it had missed earlier from the backup CollecTor instance.
&gt; 
&gt; 
&gt; Since I'm archiving onionoo data I'm "loosing" data (causing blind spots) everytime \
&gt; a "relays_published"  timestamp is skipped. In theory one could spin up an onionoo \
&gt; instance to generate data for skipped timestamps but in practice this is hard \
&gt; (requires lots of resources).  (I know, you are probably talking about not loosing \
&gt; any raw CollecTor data, but wanted to mention that nonetheless.)

Right, I meant not losing any raw CollecTor data. Your use case of
archiving Onionoo data is special. It's okay that you do this, but it's
not what Onionoo was designed for. Most people will find Onionoo data
that is 6 or 12 hours behind still useful. But if we had lost 6 or 12
hours of CollecTor data, that would have been pretty bad.

What we can do, though, is think about providing more history in
Onionoo, so that you can give up on archiving Onionoo data. After all,
Onionoo already provides quite some history, including graph data like
in bandwidth documents and others, times when a relay last changed its
IP address or port, the time it was first seen, and so on. If you have
ideas what else would be valuable to have history for, please open a ticket.

&gt; Do you monitor onionoo for such problems ("relays_published" timestamp remaining \
&gt; unchanged for &gt;1-2 hours)?  Would you find something like that useful?

We do have such monitoring, yes. Here's the Nagios script we're using:

https://gitweb.torproject.org/admin/tor-nagios.git/tree/tor-nagios-checks/checks/tor-check-onionoo


&gt; Thanks for keeping it running besides all the other things you do. 
&gt; 
&gt; I'm wondering if the admin team would be available to cover such cases to reduce
&gt; the operations load for developers.

The admin team already handles operational issues with the hosts, though
the metrics team is still in charge for running the services. I think
that's a fine separation, and it has worked quite well for the last
couple of years.

&gt; kind regards,
&gt; nusenu

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180126103400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-26 10:34:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; What we can do, though, is think about providing more history in
&gt; Onionoo, so that you can give up on archiving Onionoo data.

It is nice of you to consider that but it is not necessary (at least for me)
I can life with my current hacks and other probably don't need more history, 
and you have already enough stuff on your plate.


&gt; &gt; Do you monitor onionoo for such problems ("relays_published" timestamp remaining \
&gt; &gt; unchanged for &gt;1-2 hours)?  Would you find something like that useful?
&gt; 
&gt; We do have such monitoring, yes. 

So my email was redundant to your nagios check?

Would it be possible to publish these alerts on a mailing list? :)



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112210727</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2018-01-12 21:07:27-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

(Earlier reply has somehow vanished...)

On Mon, 08 Jan 2018 00:49:16 +0000, teor wrote:
...
&gt; When there are multiple supported tor versions, which one should be stable?
&gt; At the moment, we support 0.2.5 and 0.2.9 as long-term support, and 0.3.0 and
&gt; 0.3.1 as regular releases.

The newest/highest, probably. Essentially the one also
proclaimed as stable on the source download page.

&gt; Should stable be 0.3.1 (and change to 0.3.2 next week)?

Yes.

&gt; Do you want a long-term support branch as well?

No. I just need one version to build a relay.

...
&gt; If you want something that's easier to scrape, and signed, check for
&gt; new source releases at:

Scraping would be a fallback.

...
&gt; $ curl http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc | \
&gt; grep server-versions | tr "," "\n" | tail -1 0.3.2.8-rc

Basically current would be the highest non-rc on the list,
and alpha would be the -rc (or current if no -rc present).

Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112220653</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-12 22:06:53-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 13 Jan 2018, at 08:07, Andreas Krey &lt;a.krey@gmx.de&gt; wrote:
&gt; 
&gt; (Earlier reply has somehow vanished...)
&gt; 
&gt; &gt; On Mon, 08 Jan 2018 00:49:16 +0000, teor wrote:
&gt; &gt; ...
&gt; &gt; When there are multiple supported tor versions, which one should be stable?
&gt; &gt; At the moment, we support 0.2.5 and 0.2.9 as long-term support, and 0.3.0 and
&gt; &gt; 0.3.1 as regular releases.
&gt; 
&gt; The newest/highest, probably. Essentially the one also
&gt; proclaimed as stable on the source download page.
&gt; 
&gt; &gt; Should stable be 0.3.1 (and change to 0.3.2 next week)?
&gt; 
&gt; Yes.
&gt; 
&gt; &gt; Do you want a long-term support branch as well?
&gt; 
&gt; No. I just need one version to build a relay.
&gt; 
&gt; ...
&gt; &gt; If you want something that's easier to scrape, and signed, check for
&gt; &gt; new source releases at:
&gt; 
&gt; Scraping would be a fallback.
&gt; 
&gt; ...
&gt; &gt; $ curl http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc | \
&gt; &gt; grep server-versions | tr "," "\n" | tail -1 0.3.2.8-rc
&gt; 
&gt; Basically current would be the highest non-rc on the list,
&gt; and alpha would be the -rc (or current if no -rc present).

We also tag releases with "alpha", so these should be included
in the alpha branch as well.

Is there any reason you can't use the source tarballs for this?
They are signed, unlike git branches.

https://dist.torproject.org/

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;On 13 \
Jan 2018, at 08:07, Andreas Krey &lt;&lt;a \
href="mailto:a.krey@gmx.de"&gt;a.krey@gmx.de&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;(Earlier reply has somehow \
vanished...)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;div preoffsettop="65"&gt;&lt;blockquote \
type="cite" __apple_fixed_attribute="true" preoffsettop="65"&gt;&lt;span&gt;On Mon, 08 Jan \
2018 00:49:16 +0000, teor \
wrote:&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="117"&gt;&lt;span&gt;When there are multiple supported tor versions, which one \
should be stable?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="143"&gt;&lt;span&gt;At the moment, we support 0.2.5 and 0.2.9 as long-term \
support, and 0.3.0 and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;span&gt;0.3.1 as regular \
releases.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The newest/highest, \
probably. Essentially the one also&lt;/span&gt;&lt;br&gt;&lt;span&gt;proclaimed as stable on the source \
download page.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;span&gt;Should stable be 0.3.1 (and change to 0.3.2 next \
week)?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Yes.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite" preoffsettop="403"&gt;&lt;span&gt;Do you want a long-term support branch as \
well?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;No. I just need one version to \
build a relay.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="533"&gt;&lt;blockquote type="cite" preoffsettop="533"&gt;&lt;span&gt;If you want \
something that's easier to scrape, and signed, check \
for&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="559"&gt;&lt;span&gt;new \
source releases at:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Scraping \
would be a fallback.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="689"&gt;&lt;blockquote type="cite" preoffsettop="689"&gt;&lt;span&gt;$ curl &lt;span&gt;&lt;a \
href="http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc"&gt;http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc&lt;/a&gt;&lt;/span&gt; \
| grep server-versions | tr "," "\n" | tail -1&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="741"&gt;&lt;span&gt;0.3.2.8-rc&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Basically \
current would be the highest non-rc on the list,&lt;/span&gt;&lt;br&gt;&lt;span&gt;and alpha would be \
the -rc (or current if no -rc present).&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;We also tag \
releases with "alpha", so these should be included&lt;/div&gt;&lt;div&gt;in the alpha branch as \
well.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is there any reason you can't use the source \
tarballs for this?&lt;/div&gt;&lt;div&gt;They are signed, unlike git \
branches.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://dist.torproject.org/"&gt;https://dist.torproject.org/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124090217</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-24 09:02:17-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

[Attachment #2 (multipart/alternative)]


(I dropped tor-relays, we can tell them when we reach a conclusion.)

Hi Nick,

Can we maintain an "alpha" branch with the latest Tor alpha,
and a "stable" branch with the latest Tor stable?

It would help some relay operators.

And it would also help us get more alpha testing:
https://trac.torproject.org/projects/tor/ticket/24994#comment:4

Because the experimental deb repos on this page are tied to a
particular release of Tor:
https://www.torproject.org/docs/debian.html.en

&gt; On 13 Jan 2018, at 09:06, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; 
&gt; &gt; On 13 Jan 2018, at 08:07, Andreas Krey &lt;a.krey@gmx.de&gt; wrote:
&gt; &gt; 
&gt; &gt; (Earlier reply has somehow vanished...)
&gt; &gt; 
&gt; &gt; &gt; On Mon, 08 Jan 2018 00:49:16 +0000, teor wrote:
&gt; &gt; &gt; ...
&gt; &gt; &gt; When there are multiple supported tor versions, which one should be stable?
&gt; &gt; &gt; At the moment, we support 0.2.5 and 0.2.9 as long-term support, and 0.3.0 and
&gt; &gt; &gt; 0.3.1 as regular releases.
&gt; &gt; 
&gt; &gt; The newest/highest, probably. Essentially the one also
&gt; &gt; proclaimed as stable on the source download page.
&gt; &gt; 
&gt; &gt; &gt; Should stable be 0.3.1 (and change to 0.3.2 next week)?
&gt; &gt; 
&gt; &gt; Yes.
&gt; &gt; 
&gt; &gt; &gt; Do you want a long-term support branch as well?
&gt; &gt; 
&gt; &gt; No. I just need one version to build a relay.
&gt; &gt; 
&gt; &gt; ...
&gt; &gt; &gt; If you want something that's easier to scrape, and signed, check for
&gt; &gt; &gt; new source releases at:
&gt; &gt; 
&gt; &gt; Scraping would be a fallback.
&gt; &gt; 
&gt; &gt; ...
&gt; &gt; &gt; $ curl http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc \
&gt; &gt; &gt; | grep server-versions | tr "," "\n" | tail -1 0.3.2.8-rc
&gt; &gt; 
&gt; &gt; Basically current would be the highest non-rc on the list,
&gt; &gt; and alpha would be the -rc (or current if no -rc present).
&gt; 
&gt; We also tag releases with "alpha", so these should be included
&gt; in the alpha branch as well.
&gt; 
&gt; Is there any reason you can't use the source tarballs for this?
&gt; They are signed, unlike git branches.
&gt; 
&gt; https://dist.torproject.org/


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;(I dropped tor-relays, we can tell them when \
we reach a conclusion.)&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi Nick,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can we \
maintain an "alpha" branch with the latest Tor alpha,&lt;/div&gt;&lt;div&gt;and a "stable" branch \
with the latest Tor stable?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It would help some relay \
operators.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And it would also help us get more alpha \
testing:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24994#comment:4"&gt;https://trac.to \
rproject.org/projects/tor/ticket/24994#comment:4&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because \
the experimental deb repos on this page are tied to a&lt;/div&gt;&lt;div&gt;particular release of \
Tor:&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.torproject.org/docs/debian.html.en#development"&gt;https://www.torproject.org/docs/debian.html.en&lt;/a&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;On \
13 Jan 2018, at 09:06, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;meta http-equiv="content-type" \
content="text/html; charset=utf-8"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;On 13 Jan \
2018, at 08:07, Andreas Krey &lt;&lt;a href="mailto:a.krey@gmx.de"&gt;a.krey@gmx.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;(Earlier reply has somehow \
vanished...)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;div preoffsettop="65"&gt;&lt;blockquote \
type="cite" __apple_fixed_attribute="true" preoffsettop="65"&gt;&lt;span&gt;On Mon, 08 Jan \
2018 00:49:16 +0000, teor \
wrote:&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="117"&gt;&lt;span&gt;When there are multiple supported tor versions, which one \
should be stable?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="143"&gt;&lt;span&gt;At the moment, we support 0.2.5 and 0.2.9 as long-term \
support, and 0.3.0 and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;span&gt;0.3.1 as regular \
releases.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The newest/highest, \
probably. Essentially the one also&lt;/span&gt;&lt;br&gt;&lt;span&gt;proclaimed as stable on the source \
download page.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;span&gt;Should stable be 0.3.1 (and change to 0.3.2 next \
week)?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Yes.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite" preoffsettop="403"&gt;&lt;span&gt;Do you want a long-term support branch as \
well?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;No. I just need one version to \
build a relay.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="533"&gt;&lt;blockquote type="cite" preoffsettop="533"&gt;&lt;span&gt;If you want \
something that's easier to scrape, and signed, check \
for&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="559"&gt;&lt;span&gt;new \
source releases at:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Scraping \
would be a fallback.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="689"&gt;&lt;blockquote type="cite" preoffsettop="689"&gt;&lt;span&gt;$ curl &lt;span&gt;&lt;a \
href="http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc"&gt;http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc&lt;/a&gt;&lt;/span&gt; \
| grep server-versions | tr "," "\n" | tail -1&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="741"&gt;&lt;span&gt;0.3.2.8-rc&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Basically \
current would be the highest non-rc on the list,&lt;/span&gt;&lt;br&gt;&lt;span&gt;and alpha would be \
the -rc (or current if no -rc present).&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;We also tag \
releases with "alpha", so these should be included&lt;/div&gt;&lt;div&gt;in the alpha branch as \
well.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is there any reason you can't use the source \
tarballs for this?&lt;/div&gt;&lt;div&gt;They are signed, unlike git \
branches.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://dist.torproject.org/"&gt;https://dist.torproject.org/&lt;/a&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124092038</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-24 09:20:38-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 24 Jan 2018, at 20:02, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; (I dropped tor-relays, we can tell them when we reach a conclusion.)
&gt; 
&gt; Hi Nick,
&gt; 
&gt; Can we maintain an "alpha" branch with the latest Tor alpha,
&gt; and a "stable" branch with the latest Tor stable?

I was just told about the previous thread and ticket for this feature:
https://lists.torproject.org/pipermail/tor-dev/2015-March/008582.html
https://trac.torproject.org/projects/tor/ticket/14997

weasel wrote:
&gt; Running the current alpha should always be a deliberate decision.
&gt; If you can't be bothered to change your sources.list once or twice
&gt; a year, then you probably should be running stable.

Has the reasoning changed?

&gt; It would help some relay operators.
&gt; 
&gt; And it would also help us get more alpha testing:
&gt; https://trac.torproject.org/projects/tor/ticket/24994#comment:4
&gt; 
&gt; Because the experimental deb repos on this page are tied to a
&gt; particular release of Tor:
&gt; https://www.torproject.org/docs/debian.html.en
&gt; 
&gt; &gt; On 13 Jan 2018, at 09:06, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; &gt; On 13 Jan 2018, at 08:07, Andreas Krey &lt;a.krey@gmx.de&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; (Earlier reply has somehow vanished...)
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; On Mon, 08 Jan 2018 00:49:16 +0000, teor wrote:
&gt; &gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; When there are multiple supported tor versions, which one should be stable?
&gt; &gt; &gt; &gt; At the moment, we support 0.2.5 and 0.2.9 as long-term support, and 0.3.0 and
&gt; &gt; &gt; &gt; 0.3.1 as regular releases.
&gt; &gt; &gt; 
&gt; &gt; &gt; The newest/highest, probably. Essentially the one also
&gt; &gt; &gt; proclaimed as stable on the source download page.
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Should stable be 0.3.1 (and change to 0.3.2 next week)?
&gt; &gt; &gt; 
&gt; &gt; &gt; Yes.
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Do you want a long-term support branch as well?
&gt; &gt; &gt; 
&gt; &gt; &gt; No. I just need one version to build a relay.
&gt; &gt; &gt; 
&gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; If you want something that's easier to scrape, and signed, check for
&gt; &gt; &gt; &gt; new source releases at:
&gt; &gt; &gt; 
&gt; &gt; &gt; Scraping would be a fallback.
&gt; &gt; &gt; 
&gt; &gt; &gt; ...
&gt; &gt; &gt; &gt; $ curl http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc \
&gt; &gt; &gt; &gt; | grep server-versions | tr "," "\n" | tail -1 0.3.2.8-rc
&gt; &gt; &gt; 
&gt; &gt; &gt; Basically current would be the highest non-rc on the list,
&gt; &gt; &gt; and alpha would be the -rc (or current if no -rc present).
&gt; &gt; 
&gt; &gt; We also tag releases with "alpha", so these should be included
&gt; &gt; in the alpha branch as well.
&gt; &gt; 
&gt; &gt; Is there any reason you can't use the source tarballs for this?
&gt; &gt; They are signed, unlike git branches.
&gt; &gt; 
&gt; &gt; https://dist.torproject.org/


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;br&gt;&lt;div&gt;On 24 Jan 2018, at 20:02, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;meta http-equiv="content-type" \
content="text/html; charset=utf-8"&gt;(I dropped tor-relays, we can tell them when we \
reach a conclusion.)&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi Nick,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can we \
maintain an "alpha" branch with the latest Tor alpha,&lt;/div&gt;&lt;div&gt;and a "stable" branch \
with the latest Tor stable?&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I was just \
told about the previous thread and ticket for this feature:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2015-March/008582.html"&gt;https://lists.torproject.org/pipermail/tor-dev/2015-March/008582.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/14997"&gt;https://trac.torproject.org/projects/tor/ticket/14997&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;weasel wrote:&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;&gt;&lt;/span&gt;&lt;i style="white-space: normal; \
background-color: rgba(255, 255, 255, 0); font-family: UICTFontTextStyleTallBody;"&gt; \
Running the current alpha should always be a deliberate decision.&lt;/i&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;&gt;&lt;/span&gt;&lt;i style="white-space: normal; \
background-color: rgba(255, 255, 255, 0); font-family: UICTFontTextStyleTallBody;"&gt; \
If you can't be bothered to change your sources.list once or \
twice&lt;/i&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style="white-space: normal; background-color: rgba(255, \
255, 255, 0); font-family: UICTFontTextStyleTallBody;"&gt;&gt;&lt;/span&gt;&lt;i \
style="white-space: normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt; a year, then you probably should be running \
stable.&lt;/i&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Has the reasoning \
changed?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div&gt;It would help some relay \
operators.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And it would also help us get more alpha \
testing:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/24994#comment:4"&gt;https://trac.to \
rproject.org/projects/tor/ticket/24994#comment:4&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because \
the experimental deb repos on this page are tied to a&lt;/div&gt;&lt;div&gt;particular release of \
Tor:&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.torproject.org/docs/debian.html.en#development"&gt;https://www.torproject.org/docs/debian.html.en&lt;/a&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;On \
13 Jan 2018, at 09:06, teor &lt;&lt;a \
href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;meta http-equiv="content-type" \
content="text/html; charset=utf-8"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;On 13 Jan \
2018, at 08:07, Andreas Krey &lt;&lt;a href="mailto:a.krey@gmx.de"&gt;a.krey@gmx.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;(Earlier reply has somehow \
vanished...)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;div preoffsettop="65"&gt;&lt;blockquote \
type="cite" __apple_fixed_attribute="true" preoffsettop="65"&gt;&lt;span&gt;On Mon, 08 Jan \
2018 00:49:16 +0000, teor \
wrote:&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="117"&gt;&lt;span&gt;When there are multiple supported tor versions, which one \
should be stable?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="143"&gt;&lt;span&gt;At the moment, we support 0.2.5 and 0.2.9 as long-term \
support, and 0.3.0 and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" \
preoffsettop="169"&gt;&lt;span&gt;0.3.1 as regular \
releases.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The newest/highest, \
probably. Essentially the one also&lt;/span&gt;&lt;br&gt;&lt;span&gt;proclaimed as stable on the source \
download page.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite" \
preoffsettop="299"&gt;&lt;span&gt;Should stable be 0.3.1 (and change to 0.3.2 next \
week)?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Yes.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite" preoffsettop="403"&gt;&lt;span&gt;Do you want a long-term support branch as \
well?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;No. I just need one version to \
build a relay.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="533"&gt;&lt;blockquote type="cite" preoffsettop="533"&gt;&lt;span&gt;If you want \
something that's easier to scrape, and signed, check \
for&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite" preoffsettop="559"&gt;&lt;span&gt;new \
source releases at:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Scraping \
would be a fallback.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;...&lt;/span&gt;&lt;br&gt;&lt;div \
preoffsettop="689"&gt;&lt;blockquote type="cite" preoffsettop="689"&gt;&lt;span&gt;$ curl &lt;span&gt;&lt;a \
href="http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc"&gt;http://197.231.221.211:9030/tor/status-vote/current/consensus-microdesc&lt;/a&gt;&lt;/span&gt; \
| grep server-versions | tr "," "\n" | tail -1&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" preoffsettop="741"&gt;&lt;span&gt;0.3.2.8-rc&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Basically \
current would be the highest non-rc on the list,&lt;/span&gt;&lt;br&gt;&lt;span&gt;and alpha would be \
the -rc (or current if no -rc present).&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;We also tag \
releases with "alpha", so these should be included&lt;/div&gt;&lt;div&gt;in the alpha branch as \
well.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is there any reason you can't use the source \
tarballs for this?&lt;/div&gt;&lt;div&gt;They are signed, unlike git \
branches.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://dist.torproject.org/"&gt;https://dist.torproject.org/&lt;/a&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124094000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-24 09:40:00-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; Can we maintain an "alpha" branch with the latest Tor alpha,
&gt;&gt; and a "stable" branch with the latest Tor stable?
&gt; I was just told about the previous thread and ticket for this feature:
&gt; https://lists.torproject.org/pipermail/tor-dev/2015-March/008582.html
&gt; https://trac.torproject.org/projects/tor/ticket/14997
&gt; 
&gt; weasel wrote:
&gt;&gt; Running the current alpha should always be a deliberate decision.
&gt;&gt; If you can't be bothered to change your sources.list once or twice
&gt;&gt; a year, then you probably should be running stable.
&gt; Has the reasoning changed?
 

If there will be a canonical alpha release branch in git, a debian
repo based on that might happen more likely?
(like the debian repo following master)


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180124154242</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-01-24 15:42:42-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

On Wed, Jan 24, 2018 at 4:02 AM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; (I dropped tor-relays, we can tell them when we reach a conclusion.)
&gt;
&gt; Hi Nick,
&gt;
&gt; Can we maintain an "alpha" branch with the latest Tor alpha,
&gt; and a "stable" branch with the latest Tor stable?

Hm. I'm not strictly opposed to the idea, but I'd like to think about
how it would work. The history of such branches would get pretty
convoluted.  While everything released from master precedes other
stuff released from master in history, the releases that we cut from
release-0.x.y don't precede releases in other series.  So we'd either
need to do force-pushes or weird merges here.   And we really really
don't want to have force-pushes in the canonical repo.

I'm also wondering about tags here: If we do the force-push route,
then tags stay simple.  But if we do the "weird merges" route, we'd
not actually be giving the actual tagged versions of the releases,
which suggests a downgrade.

One possibility is more structured tags: whenever a release becomes
the latest stable, we could tag it "latest-stable-YYYYMMDD"; whenever
a branch becomes latest alpha, we could tag it
"latest-alpha-YYYYMMDD".  That would make it easy to automatically
find the latest release (git tag | grep ^latest-alpha | tail -1),  but
not require any force-pushes or weird history.

Another possibility here: what if instead of using separate branches
for this, we used a separate repository, and said "this repository
will get force-pushes; it's only meant for tracking releases."  That
way we could keep our git history clean, and keep force-pushes out of
the official repo.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180125005705</emailId><senderName>Will Scott</senderName><senderEmail>will@wills.co.tt</senderEmail><timestampReceived>2018-01-25 00:57:05-0400</timestampReceived><subject>Re: [tor-dev] Pluggable transports research</subject><body>

Hi Jodi,

There's some discussion of pluggable transport issues on 
https://groups.google.com/forum/#!forum/traffic-obf
that may be of interest.

In terms of stenography, you end up with a couple choices.
If you try to mimic existing protocols, you'll want to have 
read up on
"The Parrot is Dead" by Houmansadr et al

In the last couple years, there were a couple prototype 
transports embedding data within video games, namely
rook - https://dl.acm.org/citation.cfm?id=2808141
and
castle - https://arxiv.org/abs/1503.05904

I'm not aware of anything active on the image steganography 
front, but I think the question remains how the activity 
remains difficult to differentiate from legitimate activity.

--Will

On Wed, Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:
&gt; I'm a master's student at the University of British Columbia (Vancouver,
&gt; Canada) where I'm primarily researching anonymous systems and censorship. I
&gt; would be delighted to contribute to pluggable transports.
&gt; 
&gt; Of particular interest is image and audio data stenography - is anything is
&gt; in the works for this or is it outdated? My aim is to add this
&gt; functionality while fully testing and evaluating it as part of my thesis
&gt; project. I refer to the list of idea suggestions here:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas
&gt; 
&gt; Any guidance is greatly appreciated. Thanks so much!
&gt; 
&gt; Jodi
&gt; 
&gt; p.s.: Please advise if this is not the correct mailing list. and perhaps
&gt; belongs in tor-assistants. If so, I will inquire there once my access is
&gt; (hopefully!) granted.
&gt; 
&gt; --
&gt; www.jodispacek.com

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180125010807</emailId><senderName>Brandon Wiley</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2018-01-25 01:08:07-0400</timestampReceived><subject>Re: [tor-dev] Pluggable transports research</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Jodi. I would like to point out some additional resources for you if
you are interested in Pluggable Transports. First of all check out
https://www.pluggabletransports.info/.

Also, some work has been done in the past on audio data as a transport.
There is of course the venerable SkypeMorph (
http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf) and also
SkypeLine (
http://hgi.rub.de/media/attachments/files/2016/02/technical_report.pdf).

I have some general advice for implementing transports as well. Consider
your threat model before you design a transport using novel techniques. See
for instance the paper "Seeing Through Network-Protocol Obfuscation" (
https://kpdyer.com/publications/ccs2015-measurement.pdf). Also, if you want
to design a transport specifically for use with Tor, consider Tor's
specific needs. Tor has specific bandwidth requirements that need to be met
by the transport. Also, if you are going to attempt to mimic a protocol for
an existing audio or video application, consider what networks block Tor
and what audio and video applications are available on those networks.
Skype, for instance, is blocked on some of the same networks as Tor, and so
for those networks mimicking Skype traffic would not be an effective means
to circumvent blocking.


On Wed, Jan 24, 2018 at 6:57 PM, Will Scott &lt;will@wills.co.tt&gt; wrote:

&gt; Hi Jodi,
&gt;
&gt; There's some discussion of pluggable transport issues on
&gt; https://groups.google.com/forum/#!forum/traffic-obf
&gt; that may be of interest.
&gt;
&gt; In terms of stenography, you end up with a couple choices.
&gt; If you try to mimic existing protocols, you'll want to have
&gt; read up on
&gt; "The Parrot is Dead" by Houmansadr et al
&gt;
&gt; In the last couple years, there were a couple prototype
&gt; transports embedding data within video games, namely
&gt; rook - https://dl.acm.org/citation.cfm?id=2808141
&gt; and
&gt; castle - https://arxiv.org/abs/1503.05904
&gt;
&gt; I'm not aware of anything active on the image steganography
&gt; front, but I think the question remains how the activity
&gt; remains difficult to differentiate from legitimate activity.
&gt;
&gt; --Will
&gt;
&gt; On Wed, Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:
&gt; &gt; I'm a master's student at the University of British Columbia (Vancouver,
&gt; &gt; Canada) where I'm primarily researching anonymous systems and
&gt; censorship. I
&gt; &gt; would be delighted to contribute to pluggable transports.
&gt; &gt;
&gt; &gt; Of particular interest is image and audio data stenography - is anything
&gt; is
&gt; &gt; in the works for this or is it outdated? My aim is to add this
&gt; &gt; functionality while fully testing and evaluating it as part of my thesis
&gt; &gt; project. I refer to the list of idea suggestions here:
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/doc/
&gt; PluggableTransports/ideas
&gt; &gt;
&gt; &gt; Any guidance is greatly appreciated. Thanks so much!
&gt; &gt;
&gt; &gt; Jodi
&gt; &gt;
&gt; &gt; p.s.: Please advise if this is not the correct mailing list. and perhaps
&gt; &gt; belongs in tor-assistants. If so, I will inquire there once my access is
&gt; &gt; (hopefully!) granted.
&gt; &gt;
&gt; &gt; --
&gt; &gt; www.jodispacek.com
&gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Hello Jodi. I would like to point out some 
additional resources for you if you are interested in Pluggable 
Transports. First of all check out
 &lt;a href="https://www.pluggabletransports.info/"&gt;https://www.pluggabletransports.info/&lt;/a&gt;.&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;Also, \
some work has been  done in the past on audio data as a transport. There is of course \
the  venerable SkypeMorph 
(&lt;a href="http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf"&gt;http://cacr.uwaterloo.ca/techreports/2012/cacr2012-08.pdf&lt;/a&gt;) \
and also  SkypeLine 
(&lt;a href="http://hgi.rub.de/media/attachments/files/2016/02/technical_report.pdf"&gt;http \
://hgi.rub.de/media/attachments/files/2016/02/technical_report.pdf&lt;/a&gt;).&lt;br&gt;&lt;br&gt;&lt;/div&gt;I
  have some general advice for implementing transports as well. Consider 
your threat model before you design a transport using novel techniques. 
See for instance the paper "Seeing Through Network-Protocol Obfuscation"
 (&lt;a href="https://kpdyer.com/publications/ccs2015-measurement.pdf"&gt;https://kpdyer.com/publications/ccs2015-measurement.pdf&lt;/a&gt;). \
Also, if you  want to design a transport specifically for use with Tor, consider 
Tor's specific needs. Tor has specific bandwidth requirements that need 
to be met by the transport. Also, if you are going to attempt to mimic a
 protocol for an existing audio or video application, consider what 
networks block Tor and what audio and video applications are available 
on those networks. Skype, for instance, is blocked on some of the same 
networks as Tor, and so for those networks mimicking Skype traffic would
 not be an effective means to circumvent blocking.&lt;br&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Wed, Jan 24, 2018 at 6:57 PM, Will Scott &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:will@wills.co.tt" \
target="_blank"&gt;will@wills.co.tt&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi Jodi,&lt;br&gt; &lt;br&gt;
There's some discussion of pluggable transport issues on&lt;br&gt;
&lt;a href="https://groups.google.com/forum/#!forum/traffic-obf" rel="noreferrer" \
target="_blank"&gt;https://groups.google.com/&lt;wbr&gt;forum/#!forum/traffic-obf&lt;/a&gt;&lt;br&gt; that \
may be of interest.&lt;br&gt; &lt;br&gt;
In terms of stenography, you end up with a couple choices.&lt;br&gt;
If you try to mimic existing protocols, you'll want to have&lt;br&gt;
read up on&lt;br&gt;
"The Parrot is Dead" by Houmansadr et al&lt;br&gt;
&lt;br&gt;
In the last couple years, there were a couple prototype&lt;br&gt;
transports embedding data within video games, namely&lt;br&gt;
rook - &lt;a href="https://dl.acm.org/citation.cfm?id=2808141" rel="noreferrer" \
target="_blank"&gt;https://dl.acm.org/citation.&lt;wbr&gt;cfm?id=2808141&lt;/a&gt;&lt;br&gt; and&lt;br&gt;
castle - &lt;a href="https://arxiv.org/abs/1503.05904" rel="noreferrer" \
target="_blank"&gt;https://arxiv.org/abs/1503.&lt;wbr&gt;05904&lt;/a&gt;&lt;br&gt; &lt;br&gt;
I'm not aware of anything active on the image steganography&lt;br&gt;
front, but I think the question remains how the activity&lt;br&gt;
remains difficult to differentiate from legitimate activity.&lt;br&gt;
&lt;br&gt;
--Will&lt;br&gt;
&lt;div&gt;&lt;div class="h5"&gt;&lt;br&gt;
On Wed, Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:&lt;br&gt;
&gt; I'm a master's student at the University of British Columbia \
(Vancouver,&lt;br&gt; &gt; Canada) where I'm primarily researching anonymous systems \
and censorship. I&lt;br&gt; &gt; would be delighted to contribute to pluggable \
transports.&lt;br&gt; &gt;&lt;br&gt;
&gt; Of particular interest is image and audio data stenography - is anything is&lt;br&gt;
&gt; in the works for this or is it outdated? My aim is to add this&lt;br&gt;
&gt; functionality while fully testing and evaluating it as part of my thesis&lt;br&gt;
&gt; project. I refer to the list of idea suggestions here:&lt;br&gt;
&gt; &lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/wiki/doc/&lt;wbr&gt;PluggableTransports/ideas&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&gt; Any guidance is greatly appreciated. Thanks so much!&lt;br&gt;
&gt;&lt;br&gt;
&gt; Jodi&lt;br&gt;
&gt;&lt;br&gt;
&gt; p.s.: Please advise if this is not the correct mailing list. and perhaps&lt;br&gt;
&gt; belongs in tor-assistants. If so, I will inquire there once my access is&lt;br&gt;
&gt; (hopefully!) granted.&lt;br&gt;
&gt;&lt;br&gt;
&gt; --&lt;br&gt;
&gt; &lt;a href="http://www.jodispacek.com" rel="noreferrer" \
target="_blank"&gt;www.jodispacek.com&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;/div&gt;&lt;/div&gt;&gt; ______________________________&lt;wbr&gt;_________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180125013241</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-01-25 01:32:41-0400</timestampReceived><subject>Re: [tor-dev] Pluggable transports research</subject><body>

On Wed, Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:
&gt; I'm a master's student at the University of British Columbia (Vancouver,
&gt; Canada) where I'm primarily researching anonymous systems and censorship. I
&gt; would be delighted to contribute to pluggable transports. 
&gt; 
&gt; Of particular interest is image and audio data stenography - is anything is in
&gt; the works for this or is it outdated? My aim is to add this functionality while
&gt; fully testing and evaluating it as part of my thesis project. I refer to the
&gt; list of idea suggestions here: 
&gt; https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas 

Circumvention research can probably learn a lot from steganography
research. Most of the "mainstream" research on circumvention (read: the
work I'm familiar with :D) is in CensorBib:
	https://censorbib.nymity.ch/
However I've been meaning to see what else we can learn by bringing
related research into its scope. There's a thread of research by
Sebastian Zander et al. on covert channels that hardly intersects with
circumvention research; it would be a good contribution if you could
determine to what extent the two worlds can be joined. For example
"Reliable Transmission Over Covert Channels in First Person Shooter
Multiplayer Games" predates Rook and Castle. They developed an
evaluation framework that to my knowledge hasn't been applied to
circumvention protocols.
	http://caia.swin.edu.au/cv/szander/cc/index.html
	http://caia.swin.edu.au/cv/szander/cc/cchef/
"Provably Secure Steganography" by Hopper et al. could be relevant to
certain kinds of circumvention protocols.
	https://www-users.cs.umn.edu/~hoppernj/tc-stego.pdf

The traffic-obf list is a group of circumvention researchers. They are
scheduling biweekly meetings on IRC. You could discuss some ideas there.
https://groups.google.com/d/msg/traffic-obf/VtsKZA2Akmk/-v3Ajct-AwAJ
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180125021107</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-01-25 02:11:07-0400</timestampReceived><subject>Re: [tor-dev] Pluggable transports research</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, 24 Jan 2018 16:42:52 -0800
Jodi Spacek &lt;jodi.spacek@gmail.com&gt; wrote:
&gt; I'm a master's student at the University of British Columbia
&gt; (Vancouver, Canada) where I'm primarily researching anonymous systems
&gt; and censorship. I would be delighted to contribute to pluggable
&gt; transports.
&gt; 
&gt; Of particular interest is image and audio data stenography - is
&gt; anything is in the works for this or is it outdated? My aim is to add
&gt; this functionality while fully testing and evaluating it as part of
&gt; my thesis project. I refer to the list of idea suggestions here:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas

As far as I am aware (nb: haven't been keeping up with research in
this area), no one has come up with a good solution to the
issues mentioned in:

  Geddes, J., Schuchard, M., Hopper, N., "Cover Your ACKs: Pitfalls of
  Covert Channel Censorship Circumvention".

  https://www-users.cs.umn.edu/~hoppernj/ccs13-cya.pdf

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112013645</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-01-12 01:36:45-0400</timestampReceived><subject>Re: [tor-dev] Volunteering for Tor</subject><body>

Charles Hunt &lt;charles.hunt@protonmail.com&gt; writes:

&gt; Thank you so much. If you don't mind I think I will start off with the
&gt; "tickets for first time contributors". When I have a question do I
&gt; just email this address for assistance? Once again thank you.

It might be best to ask in the #tor-dev IRC channel on the OFTC network,
for "possibly real-time answers". (More information on how to connect to
that is at https://www.oftc.net/)

Feel free to ping me in that channel for specific Python help

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180112080432</emailId><senderName>nullius</senderName><senderEmail>nullius@nym.zone</senderEmail><timestampReceived>2018-01-12 08:04:32-0400</timestampReceived><subject>Re: [tor-dev] Agnostic Tools: Code Dev and Support For</subject><body>

[Attachment #2 (multipart/signed)]


On 2018-01-12 07:26:52 at +0000, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt;To wit, one lesser...
&gt;
&gt;&gt; #endif
&gt;
&gt;nullius.c:1:2: error: #endif without #if
&gt;
&gt;;)

Touché.  I suppose I'll be babysitting the build for awhile.  Fair 
enough?

-- 
nullius@nym.zone | PGP ECC: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
Bitcoin: bc1qcash96s5jqppzsp8hy8swkggf7f6agex98an7h | (Segwit nested:
3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG)  (PGP RSA: 0x36EBB4AB699A10EE)
"‘If you're not doing anything wrong, you have nothing to hide.'
No!  Because I do nothing wrong, I have nothing to show." — nullius

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180112194500</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-01-12 19:45:00-0400</timestampReceived><subject>Re: [tor-dev] New Authority File (was: Re: New Fallback Directory File Format)</subject><body>

&gt; We've merged a new list of fallbacks in the version 2.0.0 format.

Hi Tim. Last couple weeks I've been working on a Fallback and Endosome
branch for Stem. Just finished and merged the former...

https://gitweb.torproject.org/stem.git/commit/?id=ea2752c

Stem now supports the v2 format, has additional test coverage, and is
synced with Tor's current fallback file.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180112220057</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-01-12 22:00:57-0400</timestampReceived><subject>Re: [tor-dev] Prop-279 for Onion Alternative Name Representations (Re: Error-Correcting Onions with </subject><body>

Yawning Angel &lt;yawning@schwanenlied.me&gt; writes:

&gt; It's worth keeping in mind that no one to my knowledge has implemented
&gt; prop 279 in the tor code itself, though there is (IIRC) a python kludge
&gt; that kind of allows development.

Said kludge is here, for completeness:

   https://github.com/meejah/torns

(It's definitely not a thing you should use "in production" or whatever,
but a nice toy if you want to play with a Prop279 implementation). I'm
happy to merge PRs to fix things etc but I'm not "actively developing"
it.

Also worth noting that Tor doesn't play nicely with multiple controllers
that try to do stream-attaching; the above thing does stream-attaching.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180116020132</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-16 02:01:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 16 Jan 2018, at 09:17, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt;&gt; Also, Tor has new compression options for zstd and lzma.
&gt;&gt; 
&gt;&gt; Given that this is an externally-controlled file, we could stream it
&gt;&gt; from disk and compress it on the fly with something cheap like gzip
&gt;&gt; or zstd.
&gt; 
&gt; I haven't seen any indicated in dir-spec how to handle those? Or how I
&gt; should change the proposal to accommodate them? Should I make the url
&gt; .gz and say that the DirAuth should compress it and stream it from
&gt; disk?

There is this section about gzip-compression, the extension is ".z":
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n3777

I have opened this ticket to document how other compression formats
work in tor-spec:

https://trac.torproject.org/projects/tor/ticket/24909

T

--
Tim / teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlpdXPwACgkQdA2eOQJS
cqJ2jA/7BRzPN4AX6IA87mbuK5hx7jDugWQX+oRH0XbNAyhYTmVnIIAyOdowchmN
A1+5ZBwIxEg5gJ8OLY5Doc9J2Y5Ey/XeivzHZXuTB+INE5/JKtYb0gweuYLzDa52
7Hxzo/s27k7LUl+g8vxzRniJTUy+s7poR0DhXkj/lcOM1mK7NvNwp+ScsZlbrnMo
9LKv6PbdsrpEW9fX4NixTLcLAKEeV4hum5ir6b20lWNVJ0Q9nM02lDmf32xkym43
DgJtDAEmrLtyVxHAAOiOLldOH8Yi+FAfOzVWS0TsbuJEh4N3OyzgOpHrIaMlcqCH
Ftv3ucohWMFCXSWtmuKt+AGWbgu+GvMPUtH6D28YNJZ0BJAVMbEoxd6wYMnNhsyU
inndXssE+qZ6vmWGaU3atMUIBJVicHMjGviSxIpp+smR0L3qh+BGi8U27vJ87dn2
Rm7As+S/YjNS/KOQIfA0qeKS+cp6j+dFT7C7vZxijzTUVh690QsHK5h7Gdm8JwO1
MAcc/MjbqT+OnzfMAXlzQ2Hr+jMHHr0gaKoFdyqTE8mEqh0rEHx6fUpSt+X7hRrl
7l7zIrsFjiE6QqSD97nZPVzFsJE7Qf9iXFcGHIM5c46rQvlE8fgKX2aZW9m3We1c
ml+IQX9XSo2JlkOKVVewsPsyTiuNWDNhbkRH7iOLf6Tl4btjD8Y=
=+Z09
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180116231346</emailId><senderName>blaze glory</senderName><senderEmail>bglory@yandex.com</senderEmail><timestampReceived>2018-01-16 23:13:46-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (text/html)]

&lt;div&gt;I'm having a strange problem with torsocks and resolving some dns records - one \
of the example i've managed to replicate on torsocks v2.2.0 and v2.1., tor version \
0.2.9.11 (git-aa8950022562be76), version 0.3.2.9 (git-64a719dd25a21acb).. I've tested \
this on several different machines/ips/isps so it not localized.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ \
telnet node.moneroworld.com&lt;/div&gt;&lt;div&gt;Trying 45.63.14.175...&lt;/div&gt;&lt;div&gt;Trying \
96.43.139.226...&lt;/div&gt;&lt;div&gt;^C&lt;/div&gt;&lt;div&gt;$ torsocks telnet \
node.moneroworld.com&lt;/div&gt;&lt;div&gt;1516143453 ERROR torsocks[4459]: Unable to resolve. \
Status reply: 4 (in socks5_recv_resolve_reply() at socks5.c:683)&lt;/div&gt;&lt;div&gt;telnet: \
could not resolve node.moneroworld.com/telnet: Non-recoverable failure in name \
resolution&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;same issue can be replicated with node.xmr.be. Both \
domain have round robin configured for this record - they return multiple A records. \
Could this be the issue with this?&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;If anyone could shed some \
light on this it would be greatly appreciate.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;best regards, \
B&lt;/div&gt;&lt;/div&gt;


[Attachment #3 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180120133957</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-01-20 13:39:57-0400</timestampReceived><subject>Re: [tor-dev] No Control Socket when DisableNetwork 1</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, 20 Jan 2018 04:40:53 -0500
Roger Dingledine &lt;arma@mit.edu&gt; wrote: 
&gt; My second suggestion would be to get a Tor binary and run it yourself,
&gt; not as part of a package. If it works there, then you know that your
&gt; next steps are to figure out why your package isn't working for you.

With a torrc that looks like this:

  DataDirectory /tmp/tor
  ControlPort unix:/tmp/tor/control.sock
  SocksPort unix:/tmp/tor/socks.sock
  DisableNetwork 1

Running 0.3.1.9 I got from my distribution's package manager:

  Jan 2013:31:28.986 [notice] Opening Control listener on /tmp/tor/control.sock

And a trivial test that exercises the control port works:

  amiens :: ~ % nc -U /tmp/tor/control.sock
  PROTOCOLINFO
  250-PROTOCOLINFO 1
  250-AUTH METHODS=NULL
  250-VERSION Tor="0.3.1.9"
  250 OK

So digging into this further probably requires the "next steps".  I
still recommend a bit of a wait for tor to open the AF_UNIX socket.
While it usually is nearly instantaneous on modern systems, I had
intermittent problems with "the socket isn't there" related to trying
too fast.

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180123010007</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-01-23 01:00:07-0400</timestampReceived><subject>[tor-dev] WIP proposal for migration to TLS 1.3</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

It's not done yet; it probably has errors; it definitely has omissions; it's
still riddled with "XXX"s everywhere… but here's a work-in-progress draft
proposal for migrating our link protocol(s) to use TLS 1.3:

https://gitweb.torproject.org/user/isis/torspec.git/log/?h=tls13

It's not quite ready for a whole bunch of feedback yet, since I'm still
reading through all the specs and writing the proposal. However, if you're
super knowledgeable about TLS 1.3 and have opinions or ideas or see a
mistake/misunderstanding somewhere, please feel free to share!  Thanks!

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180123093447</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-01-23 09:34:47-0400</timestampReceived><subject>Re: [tor-dev] tor failing to resolve some dns records</subject><body>

On Tue, Jan 23, 2018 at 08:53:00AM +0000, nusenu wrote:
&gt; It is probably worth mentioning that 
&gt; node.moneroworld.com resolves to 32 A records,
&gt; node.xmr.be resolve to 55 A records,
&gt; which might be the problem here?

When you do a "host node.moneroworld.com", its answer starts with:
;; Truncated, retrying in TCP mode.

I'm guessing that could be a good hint.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180125064303</emailId><senderName>Jodi Spacek</senderName><senderEmail>jodi.spacek@gmail.com</senderEmail><timestampReceived>2018-01-25 06:43:03-0400</timestampReceived><subject>Re: [tor-dev] Pluggable transports research</subject><body>

[Attachment #2 (multipart/alternative)]


On Wed, Jan 24, 2018 at 5:32 PM, David Fifield &lt;david@bamsoftware.com&gt;
wrote:

&gt; On Wed, Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:
&gt; &gt; I'm a master's student at the University of British Columbia (Vancouver,
&gt; &gt; Canada) where I'm primarily researching anonymous systems and
&gt; censorship. I
&gt; &gt; would be delighted to contribute to pluggable transports.
&gt; &gt;
&gt; &gt; Of particular interest is image and audio data stenography - is anything
&gt; is in
&gt; &gt; the works for this or is it outdated? My aim is to add this
&gt; functionality while
&gt; &gt; fully testing and evaluating it as part of my thesis project. I refer to
&gt; the
&gt; &gt; list of idea suggestions here:
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/doc/PluggableT
&gt; ransports/ideas
&gt;
&gt; Circumvention research can probably learn a lot from steganography
&gt; research. Most of the "mainstream" research on circumvention (read: the
&gt; work I'm familiar with :D) is in CensorBib:
&gt;         https://censorbib.nymity.ch/
&gt; However I've been meaning to see what else we can learn by bringing
&gt; related research into its scope. There's a thread of research by
&gt; Sebastian Zander et al. on covert channels that hardly intersects with
&gt; circumvention research; it would be a good contribution if you could
&gt; determine to what extent the two worlds can be joined. For example
&gt; "Reliable Transmission Over Covert Channels in First Person Shooter
&gt; Multiplayer Games" predates Rook and Castle. They developed an
&gt; evaluation framework that to my knowledge hasn't been applied to
&gt; circumvention protocols.
&gt;         http://caia.swin.edu.au/cv/szander/cc/index.html
&gt;         http://caia.swin.edu.au/cv/szander/cc/cchef/
&gt; "Provably Secure Steganography" by Hopper et al. could be relevant to
&gt; certain kinds of circumvention protocols.
&gt;         https://www-users.cs.umn.edu/~hoppernj/tc-stego.pdf
&gt;
&gt; The traffic-obf list is a group of circumvention researchers. They are
&gt; scheduling biweekly meetings on IRC. You could discuss some ideas there.
&gt; https://groups.google.com/d/msg/traffic-obf/VtsKZA2Akmk/-v3Ajct-AwAJ
&gt;

This is a promising direction! I'll look into covert channels with
steganography in mind and its overlap with circumvention.


Actually, I just finished reading your thesis - it's an excellent resource
for navigating related works and comprehending the interplay of
circumvention and censorship. Thanks very much for the additional links (:

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;







&lt;p class="m_-1567972521822874407gmail-p1" \
style="margin:0px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:12px;line-height:normal;font-family:"Helvetica \
Neue";color:rgb(69,69,69)"&gt;&lt;br&gt;&lt;/p&gt;&lt;div class="gmail_extra"&gt;&lt;div \
class="gmail_quote"&gt;On Wed, Jan 24, 2018 at 5:32 PM, David Fifield &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="m_-1567972521822874407gmail-"&gt;On Wed, \
Jan 24, 2018 at 04:42:52PM -0800, Jodi Spacek wrote:&lt;br&gt; &gt; I'm a master's \
student at the University of British Columbia (Vancouver,&lt;br&gt; &gt; Canada) where \
I'm primarily researching anonymous systems and censorship. I&lt;br&gt; &gt; would be \
delighted to contribute to pluggable transports.  &lt;br&gt; &gt;&lt;br&gt;
&gt; Of particular interest is image and audio data stenography - is anything is \
in&lt;br&gt; &gt; the works for this or is it outdated? My aim is to add this functionality \
while&lt;br&gt; &gt; fully testing and evaluating it as part of my thesis project. I refer \
to the&lt;br&gt; &gt; list of idea suggestions here:  &lt;br&gt;
&gt; &lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/PluggableTransports/ideas" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/pr&lt;wbr&gt;ojects/tor/wiki/doc/PluggableT&lt;wbr&gt;ransports/ideas&lt;/a&gt; \
&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Circumvention research can probably learn a lot from steganography&lt;br&gt;
research. Most of the "mainstream" research on circumvention (read: the&lt;br&gt;
work I'm familiar with :D) is in CensorBib:&lt;br&gt;
            &lt;a href="https://censorbib.nymity.ch/" rel="noreferrer" \
target="_blank"&gt;https://censorbib.nymity.ch/&lt;/a&gt;&lt;br&gt; However I've been meaning to \
see what else we can learn by bringing&lt;br&gt; related research into its scope. \
There's a thread of research by&lt;br&gt; Sebastian Zander et al. on covert channels \
that hardly intersects with&lt;br&gt; circumvention research; it would be a good \
contribution if you could&lt;br&gt; determine to what extent the two worlds can be joined. \
For example&lt;br&gt; "Reliable Transmission Over Covert Channels in First Person \
Shooter&lt;br&gt; Multiplayer Games" predates Rook and Castle. They developed an&lt;br&gt;
evaluation framework that to my knowledge hasn't been applied to&lt;br&gt;
circumvention protocols.&lt;br&gt;
            &lt;a href="http://caia.swin.edu.au/cv/szander/cc/index.html" \
rel="noreferrer" target="_blank"&gt;http://caia.swin.edu.au/cv/sza&lt;wbr&gt;nder/cc/index.html&lt;/a&gt;&lt;br&gt;
                
            &lt;a href="http://caia.swin.edu.au/cv/szander/cc/cchef/" rel="noreferrer" \
target="_blank"&gt;http://caia.swin.edu.au/cv/sza&lt;wbr&gt;nder/cc/cchef/&lt;/a&gt;&lt;br&gt; \
"Provably Secure Steganography" by Hopper et al. could be relevant to&lt;br&gt; \
certain kinds of circumvention protocols.&lt;br&gt;  &lt;a \
href="https://www-users.cs.umn.edu/~hoppernj/tc-stego.pdf" rel="noreferrer" \
target="_blank"&gt;https://www-users.cs.umn.edu/~&lt;wbr&gt;hoppernj/tc-stego.pdf&lt;/a&gt;&lt;br&gt; &lt;br&gt;
The traffic-obf list is a group of circumvention researchers. They are&lt;br&gt;
scheduling biweekly meetings on IRC. You could discuss some ideas there.&lt;br&gt;
&lt;a href="https://groups.google.com/d/msg/traffic-obf/VtsKZA2Akmk/-v3Ajct-AwAJ" \
rel="noreferrer" target="_blank"&gt;https://groups.google.com/d/ms&lt;wbr&gt;g/traffic-obf/VtsKZA2Akmk/-v3A&lt;wbr&gt;jct-AwAJ&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;p \
class="m_-1567972521822874407gmail-p1" \
style="font-variant-numeric:normal;font-variant-east-asian:normal;margin:0px;font-stretch:normal;line-height:normal;color:rgb(69,69,69)"&gt;&lt;font \
face="arial, helvetica, sans-serif"&gt;This is a promising direction! I'll look into \
covert channels with steganography in mind and its overlap with circumvention.&lt;span \
class="m_-1567972521822874407gmail-Apple-converted-space"&gt;  &lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;p \
class="m_-1567972521822874407gmail-p2" \
style="font-variant-numeric:normal;font-variant-east-asian:normal;margin:0px;font-stretch:normal;line-height:normal;color:rgb(69,69,69);min-height:14px"&gt;&lt;font \
face="arial, helvetica, sans-serif"&gt;&lt;br&gt;&lt;/font&gt;&lt;/p&gt;&lt;p \
class="m_-1567972521822874407gmail-p1" \
style="font-variant-numeric:normal;font-variant-east-asian:normal;margin:0px;font-stretch:normal;line-height:normal;color:rgb(69,69,69)"&gt;&lt;font \
face="arial, helvetica, sans-serif"&gt;Actually, I just finished reading your thesis - \
it's an excellent resource for navigating related works and comprehending the \
interplay of circumvention and censorship. Thanks very much for the additional links \
(:&lt;span class="m_-1567972521822874407gmail-Apple-converted-space"&gt;  \
&lt;/span&gt;&lt;/font&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180125090807</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2018-01-25 09:08:07-0400</timestampReceived><subject>Re: [tor-dev] [tor-relays] Marker branch for current tor release(s)</subject><body>

On Wed, 24 Jan 2018 10:42:42 +0000, Nick Mathewson wrote:
...
&gt; &gt; Can we maintain an "alpha" branch with the latest Tor alpha,
&gt; &gt; and a "stable" branch with the latest Tor stable?
&gt; 
&gt; Hm. I'm not strictly opposed to the idea, but I'd like to think about
&gt; how it would work. The history of such branches would get pretty
&gt; convoluted....
&gt; And we really really
&gt; don't want to have force-pushes in the canonical repo.

You don't want force-pushes to anything but 'current' and 'alpha',
and to make that policy clear.

E.g. git.git itself has a branch 'pu' that does forced updates
daily, as some topic branches are re-merged onto the current
master (or similar) and republished as that 'pu'. That branch
just serves as a means to show some current state; and master
etc. don't get force-pushed.

The 'weird merges' way is sufficiently weird that I rather
not have a 'current' that have a weird 'current'. :-)

...
&gt; Another possibility here: what if instead of using separate branches
&gt; for this, we used a separate repository, and said "this repository
&gt; will get force-pushes; it's only meant for tracking releases."

Also a way, would be good for me. I was already thinking of setting up
a github repo that is a mirror of https://git.torproject.org/tor.git
plus the 'current' and 'alpha' branches, but such a thing wouldn't get
any blessing or traction.

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180126105407</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-01-26 10:54:07-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-01-21 22:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-01-26 11:34, nusenu wrote:
&gt; &gt; What we can do, though, is think about providing more history in
&gt; &gt; Onionoo, so that you can give up on archiving Onionoo data.
&gt; 
&gt; It is nice of you to consider that but it is not necessary (at least for me)
&gt; I can life with my current hacks and other probably don't need more history, 
&gt; and you have already enough stuff on your plate.

Okay.

&gt; &gt; &gt; Do you monitor onionoo for such problems ("relays_published" timestamp \
&gt; &gt; &gt; remaining unchanged for &gt;1-2 hours)?  Would you find something like that \
&gt; &gt; &gt; useful?
&gt; &gt; 
&gt; &gt; We do have such monitoring, yes. 
&gt; 
&gt; So my email was redundant to your nagios check?
&gt; 
&gt; Would it be possible to publish these alerts on a mailing list? :)

Not a crazy idea! I opened a ticket for further discussing this:

https://trac.torproject.org/projects/tor/ticket/25035

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180126231815</emailId><senderName>Arlo Breault</senderName><senderEmail>arlo@torproject.org</senderEmail><timestampReceived>2018-01-26 23:18:15-0400</timestampReceived><subject>Re: [tor-dev] trac component for check.tpo?</subject><body>



&gt; On Jan 26, 2018, at 5:49 PM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; what is the correct trac component to report
&gt; that check.tpo is down?

Applications / Tor Check

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180129200717</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-01-29 20:07:17-0400</timestampReceived><subject>Re: [tor-dev] Nominate/vote for future proposal discussion meetings!</subject><body>

[Attachment #2 (multipart/signed)]


isis agora lovecruft transcribed 2.9K bytes:
&gt; Hello all,
&gt; 
&gt; Is there an existing Tor proposal you'd like to discuss?  Please use
&gt; the following pad to nominate and vote for proposals for discussion.
&gt; 
&gt; https://pad.riseup.net/p/Pxo2fQiiaSWo
&gt; 
&gt; We'll be reviving our proposal discussion meetings soon, likely at the
&gt; beginning of January once people have returned from their winter
&gt; holidays.
&gt; 
&gt; After the nominations/votes are taken, I'll start arranging meeting
&gt; times.  If you nominate and/or vote for a proposal, I may reach out to
&gt; you at some point for your opinions on discussion items, open
&gt; questions/concerns, etc. to include for the meeting preparation.
&gt; 
&gt; Thanks!

Hello!

Last chance (for this round) to get your nominations/votes in!  This week I
will be creating subthreads (of this thread) for each proposal meeting, which
will have doodles/polls for dates and times.

Unless someone requests otherwise, I'm not going to group proposals into
batches for meetings: hopefully this way the meetings will be shorter and
people only have to pay attention to the things they are interested in.

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180129202352</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-01-29 20:23:52-0400</timestampReceived><subject>[tor-dev] [prop-meeting] [prop#239] "Consensus Chain Hashing" (was: Nominate/vote for future proposa</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

Let's schedule a proposal discussion for prop#239 "Consensus Hash Chaining"
[0] sometime next week (between 7 - 9 Feb).  If you're CCed, it's because
you put your name down on the pad as being interested in this discussion.
If anyone has requests or concerns, or if I forgot to take your timezone
into account, please let me know.

https://doodle.com/poll/iahmzu95hpvxciex

[0]: https://gitweb.torproject.org/torspec.git/tree/proposals/239-consensus-hash-chaining.txt

-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180129203631</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-01-29 20:36:31-0400</timestampReceived><subject>[tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8" (was: Nomi</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

Let's schedule a proposal discussion for prop#285 "Directory documents
should be standardized as UTF-8" [0] sometime between 12 - 13 Feb.  If
you're CCed, it's because you put your name down on the pad as being
interested in this discussion.  If anyone has requests or concerns, or if I
forgot to take your timezone into account, please let me know.

https://doodle.com/poll/cnc6scybbfpky5f8

[0]: https://gitweb.torproject.org/torspec.git/tree/proposals/285-utf-8.txt

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180130005200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-30 00:52:00-0400</timestampReceived><subject>Re: [tor-dev] website patches for new Tor relay guide sidenav entry</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Silvia [Hiro]:
&gt; Hi,
&gt; thanks for letting me know.
&gt; I have fixed the merge conflicts myself and merged.

Since the page did no longer build after 
"Fix merge conflicts in sidenav"
​https://gitweb.torproject.org/project/web/webwml.git/commit/?id=c257c6ccac167d74206771f13d63e04335272661


I attempted to fix this with my comment and branch at 
https://trac.torproject.org/projects/tor/ticket/24881#comment:7

Do you have time to look into this?

I'd like to get this fixed before submitting upcoming
patches and I'd like to get them deployed before Alison is going 
to release an upcoming blog post.

thanks,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180131130222</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-01-31 13:02:22-0400</timestampReceived><subject>Re: [tor-dev] Starting with contributing to Anonymous Local Count Statistics.</subject><body>

Aruna Maurya &lt;aruna.maurya12@gmail.com&gt; writes:

&gt; [ text/plain ]
&gt; Hey!
&gt;
&gt; I was going through the Tor Volunteer page and came across the Anonymous
&gt; local count statistics project. As a student it would be a great starting
&gt; point and an even bigger opportunity to get a chance to collaborate and
&gt; learn in the process.
&gt;
&gt; I would like to contribute to it, and would love to start as soon as
&gt; possible. It would be great if someone could guide me through.
&gt;

Hello Aruna,

thanks for reaching out.

I also find this project interesting. I'd like to help you but my time
is quite limited lately.

What would you like guidance with?

With regards to design, I suggest you take a look at the last comments
of this trac ticket:  https://trac.torproject.org/projects/tor/ticket/7532#comment:22
Particularly it seems like the PCSA algorithm might be a reasonable way
forward.

With regards to coding, I suggest you familiarize yourself with the Tor
codebase. Some specific places to look at would be the way that Tor
currently counts users. For example, see geoip_note_client_seen() and
its callers, for when bridges register new clients to their stats
subsystem. Also check geoip_format_bridge_stats() for when bridges
finally report those stats.

Let us know if you have any specific questions!

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180131211848</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-01-31 21:18:48-0400</timestampReceived><subject>Re: [tor-dev] stem support for v3 ephemeral onion services</subject><body>

Great! Thanks David. Juggling some other things but I'll try to give
this a pass in the next week or two.


On Wed, Jan 31, 2018 at 12:56 PM, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; On 25 Jan (08:10:00), David Goulet wrote:
&gt;&gt; On 25 Jan (06:50:30), teor wrote:
&gt;&gt; &gt;
&gt;&gt; &gt; &gt; On 25 Jan 2018, at 05:14, Micah Lee &lt;micah@micahflee.com&gt; wrote:
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; Now that Tor Browser 7.5 is released and includes the tor 0.3.2 series,
&gt;&gt; &gt; &gt; which supports next generation onion services, I would love to make
&gt;&gt; &gt; &gt; OnionShare use these by default. Here is the issue [1].
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; OnionShare is written in python3 and relies on stem to communicate with
&gt;&gt; &gt; &gt; the Tor controller. Although tor now supports v3 ephemeral onion
&gt;&gt; &gt; &gt; services, stem still doesn't. Just take make sure, here's a quick test,
&gt;&gt; &gt; &gt; with Tor Browser 7.5 (providing tor 0.3.2.9) open in the background, and
&gt;&gt; &gt; &gt; using stem 1.6.0:
&gt;&gt; &gt;
&gt;&gt; &gt; Here is the current status of v3 onion control port support:
&gt;&gt; &gt;
&gt;&gt; &gt; This proposal is listed as "Finished":
&gt;&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/284-hsv3-control-port.txt
&gt;&gt; &gt;
&gt;&gt; &gt; And the code was merged into 0.3.3 (not 0.3.2):
&gt;&gt; &gt; https://trac.torproject.org/projects/tor/ticket/20699
&gt;&gt; &gt;
&gt;&gt; &gt; Stem typically tracks Tor's control spec.
&gt;&gt; &gt; But the changed commands have not been integrated into control-spec.txt:
&gt;&gt; &gt; https://trac.torproject.org/projects/tor/ticket/24847
&gt;&gt;
&gt;&gt; This one is on me and I apologize... I haven't took the time to make a proper
&gt;&gt; control-spec.txt patch from the prop#284.
&gt;&gt;
&gt;&gt; I'll put this on my priority list so when 0.3.3 goes stable (~ April 15th),
&gt;&gt; we'll have a up to date control spec for Stem to work with.
&gt;
&gt; Hi!
&gt;
&gt; Ok the proposal 284 has landed in the control-spec.txt officially. Could be
&gt; some fix up here and there once atagar looks at it ;) but overall the proposal
&gt; is officially closed and merged.
&gt;
&gt; https://gitweb.torproject.org/torspec.git/commit/?id=6bd0a699a0856240480a4bc339722db142beec0a
&gt;
&gt; David
&gt;
&gt;&gt;
&gt;&gt; Cheers!
&gt;&gt; David
&gt;&gt;
&gt;&gt; --
&gt;&gt; 6Swl3Ho3WPfuToRBmU/VqJyeGkbf9yd3uucj/BJVoKk=
&gt;
&gt;
&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; --
&gt; aVYoXwD2iAuCmaVVnSs4Ds40PAgernzXRM/WFwLLoEU=
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180131220105</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-01-31 22:01:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal Waterfilling</subject><body>


On 1 Feb 2018, at 07:15, Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt; wrote:

&gt;&gt; On 18/01/18 01:03, teor wrote:
&gt;&gt; 
&gt;&gt;&gt; I've added this concern within the 'unanswered questions' section. This
&gt;&gt;&gt; proposal assumes relay measurement are reliable (consensus weight).
&gt;&gt; How reliable?
&gt;&gt; 
&gt;&gt; Current variance is 30% - 40% between identical bandwidth authorities, and
&gt;&gt; 30% - 60% between all bandwidth authorities.
&gt;&gt; 
&gt;&gt; Sources:
&gt;&gt; https://tomrittervg.github.io/bwauth-tools/#apples-to-apples-comparison
&gt;&gt; https://tomrittervg.github.io/bwauth-tools/#updated-01
&gt;&gt; 
&gt;&gt; Is this sufficient?
&gt; 
&gt; My apologies, I was not enough specific: we assume bandwidth
&gt; measurements reliable as an hypothesis to make the claim that
&gt; Waterfilling is not going to reduce or improve the performance. If these
&gt; measurements are not reliable enough, then Waterfilling might make
&gt; things better, worse or both compared to the current bandwidth-weights
&gt; is some unpredictable way.

This variance is measurement error. In this case, discretization error is
less than 1%.

We need to know whether measurement inaccuracy makes the network
weights converge or diverge under your scheme.

It looks like they converge on the current network with the current
bandwidth authorities. This is an essential property we need to keep.

&gt; All of this depends on the bandwidth
&gt; authority. Anyway, I willingly agree that we need some kind of tools
&gt; able to report on such modification. Besides, those tools could be
&gt; reused for any new proposal impacting the path selection, such as
&gt; research protecting against network adversaries or even some of the
&gt; changes you already plan to do (such as Prop 276).

Yes, we are hoping to introduce better tools over time.

&gt;&gt; &lt;skip&gt;
&gt;&gt;&gt; …
&gt;&gt;&gt; 
&gt;&gt;&gt; - The upper bound in (a) is huge, and would be appreciated for an
&gt;&gt;&gt; adversary running relays. The adversary could manage to set relays with
&gt;&gt;&gt; almost 2 times the consensus weight of the water level, and still being
&gt;&gt;&gt; used at 100% in the entry position. This would reduce a lot the benefits
&gt;&gt;&gt; of this proposal, right?
&gt;&gt; I do not know how much the benefits of the proposal depend on the exact
&gt;&gt; water level, and how close relays are to the water level.
&gt;&gt; 
&gt;&gt; …
&gt;&gt; 
&gt;&gt; How much variance will your proposal tolerate?
&gt;&gt; Because current variance is 30% - 60% anyway (see above).
&gt; 
&gt; The variance is not a problem if the water level is adapted
&gt; (re-computed) at each consensus.

I'm not sure we're talking about the same thing here.
The variance I am talking about here is measurement error and
discretization error. Re-computation doesn't change the error.
(And going from relay measurement to consensus bandwidth can take hours.)

See my comment above about convergence: we need to converge in
the presence of discretization error, too.

&gt;&gt; …
&gt;&gt; 
&gt;&gt;&gt; With your explanations below (weight change on clients), and given that
&gt;&gt;&gt; the consensus diff size is a thing, I am leaning to believe that the
&gt;&gt;&gt; weight calculation should be done on clients. Anyway, I have added a
&gt;&gt;&gt; remark about this possibility within the proposal.
&gt;&gt; Another alternative is to apply proposal 276 weight rounding to these
&gt;&gt; weights as well.
&gt;&gt; 
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt;&gt; 
&gt;&gt; I think this may be our best option. Because running all these divisions on
&gt;&gt; some mobile clients will be very slow and cost a lot of power.
&gt; 
&gt; Added this to the proposal. We might also "divide" the algorithm: what
&gt; about computing the weights on dirauths but broadcasting only the pivot
&gt; (the index of the relay at the water level). Clients can then resume the
&gt; computation and produce the weights themselves with a reduced cost.
&gt; Strength:
&gt;   - The weight calculation would be O(n) on clients (n being the size of
&gt; the guard set) instead of O(n*log(n))
&gt;   - No impact on the consensus diff (well, except 1 line, the pivot value).
&gt; Weakness:
&gt;   - We still have O(n) divisions on the client, each time we download a
&gt; new consensus.

Why not list the waterfilling level on a single line in the consensus?

That way:
* authorities do the expensive calculation
* clients can re-weight relays using a simple calculation:

if it is less than or equal to the waterfilling level:
  use the relay's weight as its guard weight
  use 0 as its middle weight
otherwise:
  use the waterfilling level as the relay's guard weight
  use the relay's weight minus the waterfilling level as its middle weight

This is O(n) and requires one comparison and one subtraction in the worst case.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180131222500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-01-31 22:25:00-0400</timestampReceived><subject>Re: [tor-dev] small fixes for the sources.list generator (and new options)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Please fix "from source", or open another ticket so we don't forget to fix it.

done.

&gt; Did you fix the JavaScript and non-JavaScript versions of the page?

yes.


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180202103236</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-02-02 10:32:36-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

Georg Koppen &lt;gk@torproject.org&gt; writes:

&gt; [ text/plain ]
&gt; George Kadianakis:
&gt; &gt; As discussed in this mailing list and in IRC, I'm posting a subsequent
&gt; &gt; version of this proposal. Basic improvements:
&gt; &gt; - Uses a new custom HTTP header, instead of Alt-Svc or Location.
&gt; &gt; - Does not do auto-redirect; it instead suggests the onion based on
&gt; &gt; antonella's mockup: \
&gt; &gt; https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
&gt; 
&gt; I don't see that or any particular idea of informing the user in the
&gt; proposal itself, though. I think more about those browser side plans
&gt; should be specified in it (probably in section 2). Right now you are
&gt; quite specific about the redirection part and its pro and cons but
&gt; rather vague on the actual UX improvements (having the header is just
&gt; half of what you need).
&gt; 

Hello,

pushed another commit to the onion-location branch in my repo for
addressing the concerns in GeKo's email:
           https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=onion-location&amp;id=14fc750e3afcd759f4235ab955535a07eed24286


I was not sure what other stuff to put in section 2 but please let me
know if you don't feel fullfiled with the current ones!!!

Also, I wiped out the improvements section because i was not sure what
to put there.

As a side thing, I found this extension which does the bottombar part of
this proposal, but it gets the redirection list from a local file
instead of an HTTP header: https://github.com/Someguy123/HiddenEverywhere

Cheers!


&gt; &gt; 
&gt; &gt; 
&gt; &gt; ========================================================================
&gt; &gt; UX improvement proposal: Onion redirects using Onion-Location HTTP header
&gt; &gt; ========================================================================
&gt; &gt; 
&gt; &gt; 1. Motivation:
&gt; &gt; 
&gt; &gt; Lots of high-profile websites have onion addresses these days (e.g. Tor ,
&gt; 
&gt; Tor,
&gt; 
&gt; &gt; NYT, blockchain, ProPublica).  All those websites seem confused on what's
&gt; &gt; the right way to inform their users about their onion addresses. Here are
&gt; &gt; some confusion examples:
&gt; &gt; a) torproject.org does not even advertise their onion address to Tor users (!!!)
&gt; &gt; b) blockchain.info throws an ugly ASCII page to Tor users mentioning their onion
&gt; &gt; address and completely wrecking the UX (loses URL params, etc.)
&gt; &gt; c) ProPublica has a "Browse via Tor" section which redirects to the onion site.
&gt; &gt; 
&gt; &gt; Ideally there would be a consistent way for websites to inform their users
&gt; &gt; about their onion counterpart. This would provide the following positives:
&gt; &gt; + Tor users would use onions more often. That's important for user
&gt; &gt; education and user perception, and also to partially dispell the darkweb myth.
&gt; &gt; + Website operators wouldn't have to come up with ad-hoc ways to advertise
&gt; &gt; their onion services, which sometimes results in complete breakage of
&gt; &gt; the user experience (particularly with blockchain)
&gt; &gt; 
&gt; &gt; This proposal specifies a simple way forward here that's far from perfect,
&gt; &gt; but can still provide benefits and also improve user-education around onions
&gt; &gt; so that in the future we could employ more advanced techniques.
&gt; &gt; 
&gt; &gt; Also see Tor ticket #21952 for more discussion on this:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/21952
&gt; &gt; 
&gt; &gt; 2. Proposal
&gt; &gt; 
&gt; &gt; We introduce a new HTTP header called "Onion-Location" with the exact same
&gt; &gt; restrictions and semantics as the Location HTTP header. Websites can use the
&gt; &gt; Onion-Location HTTP header to specify their onion counterpart, in the same
&gt; &gt; way that they would use the Location header.
&gt; &gt; 
&gt; &gt; The Tor Browser intercepts the Onion-Location header (if any) and informs
&gt; &gt; the user of the existense of the onion site, giving them the option to visit
&gt; 
&gt; s/existense/existence/
&gt; 
&gt; &gt; it. Tor Browser only does so if the header is served over HTTPS.
&gt; &gt; 
&gt; &gt; Browsers that don't support Tor SHOULD ignore the Onion-Location header.
&gt; &gt; 
&gt; &gt; 3. Improvements
&gt; 
&gt; Did you plan to write anything here? I guess there are at least UX
&gt; improvements to the ad-hoc things you mentioned at the beginning of the
&gt; proposal.
&gt; 
&gt; &gt; 4. Drawbacks
&gt; &gt; 
&gt; &gt; 4.1. No security/performance benefits
&gt; &gt; 
&gt; &gt; While we could come up with onion redirection proposals that provide
&gt; &gt; security and performance benefits, this proposal does not actually provide
&gt; &gt; any of those.
&gt; &gt; 
&gt; &gt; As a matter of fact, the security remains the same as connecting to normal
&gt; &gt; websites (since we trust its HTTP headers), and the performance gets worse
&gt; 
&gt; s/its/their/
&gt; 
&gt; &gt; since we first need to connect to the website, get its headers, and then
&gt; &gt; also connect to the onion.
&gt; &gt; 
&gt; &gt; Still _all_ the website approaches mentioned in the "Motivation" section
&gt; &gt; suffer from the above drawbacks, and sysadmins still come up with ad-hoc
&gt; &gt; ways to inform users abou their onions. So this simple proposal will still
&gt; 
&gt; s/abou/about/
&gt; 
&gt; &gt; help those websites and also pave the way forward for future auto-redirect
&gt; &gt; techniques.
&gt; &gt; 
&gt; &gt; 4.2. Defining new HTTP headers is not the best idea
&gt; &gt; 
&gt; &gt; This proposal defines a new non-standard HTTP header. This is not great
&gt; &gt; because it makes Tor into a "special" thing that needs to be supported with
&gt; &gt; special headers. However, the fact that it's a new HTTP header that only
&gt; &gt; works for Tor is a positive thing since it means that non-Tor browsers will
&gt; &gt; just ignore it.
&gt; &gt; 
&gt; &gt; Furthermore, another drawback is that this HTTP header will increase the
&gt; &gt; bandwidth needlessly if it's also served to non-Tor clients. Hence websites
&gt; &gt; with lots of client traffic are encouraged to use tools that detect Tor
&gt; &gt; users and only serve the header to them (e.g. tordnsel).
&gt; &gt; 
&gt; &gt; 5. The future
&gt; &gt; 
&gt; &gt; As previously discussed, this is just a simple proposal to introduce the
&gt; &gt; redirection concept to people, and also to help some sysadmins who are
&gt; &gt; currently coming up with weird ways to inform people about their
&gt; &gt; onions. It's not the best way to do this, but it's definitely one of the
&gt; &gt; simplest ways.
&gt; &gt; 
&gt; &gt; In the future we could implement with more advanced auto-redirect proposals like:
&gt; 
&gt; s/with// maybe?
&gt; 
&gt; [snip]
&gt; 
&gt; Georg
&gt; 
&gt; [ signature.asc: application/pgp-signature ]
&gt; [ text/plain ]
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180707180706</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-07 18:07:06-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I've had a go at implementing this for my personal blog. Here are some
things:

&gt; We introduce a new HTTP header called "Onion-Location"
&gt; with the exact same restrictions and semantics as the
&gt; Location HTTP header. Websites can use the Onion-Location
&gt; HTTP header to specify their onion counterpart, in the
&gt; same way that they would use the Location header.
&gt;
&gt; Example:
&gt;  Onion-Location: http://vwc43ag5jyewlfgf.onion

This example is perhaps not the best example. I tried to get things
working with the Healthy Onions add-on, but found that the developer had
interpreted this to mean that the Onion-Location value is just a
replacement for the protocol and domain parts of the URL, not a
replacement for the whole URL.

There may not be a 1:1 mapping in the URL space between the two URL
domains. At the very least, I would add a trailing slash (/) to the
example. The Healthy Onions developer seems to expect the string to end
with ".onion".

My personal website is a static site (mostly). In my implementation, I
took a list of all possible HTML URLs (excluding images, stylesheets,
etc.) and generated a list of corresponding onion locations.

I figured that being a blog, people often link to individual pages
instead of just to my homepage (which is probably the least useful page
on the site). Having the Onion-Location header on every page someone
could land on gives the best chance that they will discover the onion
service.

But then I realised that some of the locations I had generated
Onion-Locations for would also be serving Location headers as they were
old URLs. What should a browser do in this case? What should an
implementer do? In my implementation, I've thrown in the Onion-Location
headers regardless of whether or not a Location header is also present
because it was easier.

It could be preferable that the redirection is followed after switching
to the Onion service (i.e. Location header is ignored until user
responds to the Onion-Location header prompt), but this would mean the
page wouldn't have loaded before you get the prompt to go to the Onion
service, which may be confusing for users. Alternatively, if the page
has a Location header then the Onion-Location header should be ignored.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180713152442</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-07-13 15:24:42-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

On 7 July 2018 at 13:07, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; Hi,
&gt;
&gt; I've had a go at implementing this for my personal blog. Here are some
&gt; things:

Good feedback!

&gt; My personal website is a static site (mostly). In my implementation, I
&gt; took a list of all possible HTML URLs (excluding images, stylesheets,
&gt; etc.) and generated a list of corresponding onion locations.
&gt;
&gt; I figured that being a blog, people often link to individual pages
&gt; instead of just to my homepage (which is probably the least useful page
&gt; on the site). Having the Onion-Location header on every page someone
&gt; could land on gives the best chance that they will discover the onion
&gt; service.

Ah, that makes sense. You want /foo.html to serve an Onion-Location
that goes to /foo.html

But you're saying you did this manually for each file?  I guess I
hadn't thought about how I would implement this (for Apache)... http
-&gt; https redirection is done with mod_write, typically something like

RewriteEngine On
RewriteCond %{HTTPS} off
RewriteRule (.*) https://%{SERVER_NAME}/$1 [R,L]

I don't mess with Apache/mod_rewrite much, but surely there's a way to
write out the Onion-Location header with the supplied path/querystring
automatically?


&gt; But then I realised that some of the locations I had generated
&gt; Onion-Locations for would also be serving Location headers as they were
&gt; old URLs. What should a browser do in this case? What should an
&gt; implementer do? In my implementation, I've thrown in the Onion-Location
&gt; headers regardless of whether or not a Location header is also present
&gt; because it was easier.

I think that is fine but....

&gt; It could be preferable that the redirection is followed after switching
&gt; to the Onion service (i.e. Location header is ignored until user
&gt; responds to the Onion-Location header prompt), but this would mean the
&gt; page wouldn't have loaded before you get the prompt to go to the Onion
&gt; service, which may be confusing for users. Alternatively, if the page
&gt; has a Location header then the Onion-Location header should be ignored.

I agree that if a Location header is present, the browser should
follow it immediately. If the subsequent location has an
Onion-Location header (and no Location header) then the browser should
prompt.

Location is a non-prompt, non-negotiable redirect.
Onion-Location is a prompted, user-chosen redirect.

The only question in my mind is if the user has opted in to always
following Onion-Location redirects, then the question is: which header
do you follow? And I would suggest Onion-Location although I don't
have a strong argument for that choice besides "It's our feature, we
should give it precedence."

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180713192341</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-13 19:23:41-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi,

On 13/07/18 16:24, Tom Ritter wrote:
&gt; Ah, that makes sense. You want /foo.html to serve an Onion-Location
&gt; that goes to /foo.html

Exactly! But I might also want that /foo/bar.html goes to /bar.html on
the onion service while /baz/bar.html goes to /bar.html on another onion
service. Otherwise I don't think we can claim that the Onion-Location
header is similar to the Location header.

&gt; But you're saying you did this manually for each file?  I guess I
&gt; hadn't thought about how I would implement this (for Apache)... http
&gt; -&gt; https redirection is done with mod_write, typically something like

My personal website is currently hosted by Netlify. They allow you to
provide a file that is used to send custom headers on a per-URL basis.

https://www.netlify.com/docs/headers-and-basic-auth/

I've attached the script I'm using for this. It's a manual step in that
I have to run the script. I could probably automate it if I learnt a
little more Hugo.

&gt; I don't mess with Apache/mod_rewrite much, but surely there's a way to
&gt; write out the Onion-Location header with the supplied path/querystring
&gt; automatically?

I would imagine there are ways to configure this, but I don't know what
they are.

&gt; I agree that if a Location header is present, the browser should
&gt; follow it immediately. If the subsequent location has an
&gt; Onion-Location header (and no Location header) then the browser should
&gt; prompt.

This sounds reasonable.

&gt; Location is a non-prompt, non-negotiable redirect.
&gt; Onion-Location is a prompted, user-chosen redirect.
&gt;=20
&gt; The only question in my mind is if the user has opted in to always
&gt; following Onion-Location redirects, then the question is: which header
&gt; do you follow? And I would suggest Onion-Location although I don't
&gt; have a strong argument for that choice besides "It's our feature, we
&gt; should give it precedence."

I think in this case, I would prefer to follow the Onion-Location header
first, as the user has chosen to make the usability trade-off for
security by enabling the automatic redirects.

Would it be worthwhile for me to write some text to this effect as a
patch for the proposal document?

Thanks,
Iain.

["onion-location.txt" (text/plain)]

#!/usr/bin/zsh

hugo

find public | \
	grep index.html | \
	sed 's/^public//' | \
	sed 's/index.html$//' | \
	awk '{ print $0 "\n  Onion-Location: \
http://tvin5bvfwew3ldttg5t6ynlif4t53y3mbmb7sgbyud7h5q6gblrpsnyd.onion" $0 }' \  &gt; \
static/_headers

# Limited compatibility with Healthy Onions add-on
sed -i 's,^  Onion-Location: \
http://tvin5bvfwew3ldttg5t6ynlif4t53y3mbmb7sgbyud7h5q6gblrpsnyd.onion/$,  \
Onion-Location: http://tvin5bvfwew3ldttg5t6ynlif4t53y3mbmb7sgbyud7h5q6gblrpsnyd.onion,' \
static/_headers


["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180921104400</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-09-21 10:44:00-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis:
&gt; Georg Koppen &lt;gk@torproject.org&gt; writes:
&gt; 
&gt; &gt; [ text/plain ]
&gt; &gt; George Kadianakis:
&gt; &gt; &gt; As discussed in this mailing list and in IRC, I'm posting a subsequent
&gt; &gt; &gt; version of this proposal. Basic improvements:
&gt; &gt; &gt; - Uses a new custom HTTP header, instead of Alt-Svc or Location.
&gt; &gt; &gt; - Does not do auto-redirect; it instead suggests the onion based on
&gt; &gt; &gt; antonella's mockup: \
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
&gt; &gt; 
&gt; &gt; I don't see that or any particular idea of informing the user in the
&gt; &gt; proposal itself, though. I think more about those browser side plans
&gt; &gt; should be specified in it (probably in section 2). Right now you are
&gt; &gt; quite specific about the redirection part and its pro and cons but
&gt; &gt; rather vague on the actual UX improvements (having the header is just
&gt; &gt; half of what you need).
&gt; &gt; 
&gt; 
&gt; Hello,
&gt; 
&gt; pushed another commit to the onion-location branch in my repo for
&gt; addressing the concerns in GeKo's email:
&gt; https://gitweb.torproject.org/user/asn/torspec.git/commit/?h=onion-location&amp;id=14fc750e3afcd759f4235ab955535a07eed24286
&gt; 

FYI: the proposal is now the first Tor Browser proposal:
https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt


Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180921125931</emailId><senderName>Rusty Bird</senderName><senderEmail>rustybird@net-c.com</senderEmail><timestampReceived>2018-09-21 12:59:31-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]


Georg Koppen:
&gt; FYI: the proposal is now the first Tor Browser proposal:
&gt; https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt

Sounds great. One nit:

| Website operators should be aware that tools like tordnsel have
| false positive potential (they might treat Tor users as non-Tor users)

-&gt; "false negative"

Rusty

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180921154659</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-09-21 15:46:59-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

&gt; with the exact same
&gt; restrictions and semantics as the Location HTTP header

Maybe that should be 'syntax'?  Semantics would mean that the header
behaves the same way right?  But it doesn't. Location is a prompt-less
redirect, O-L is a prompted redirect.  Additionally, O-L has an
additional restriction that the URI specified must be .onion?

&gt; websites with lots of client traffic are encouraged

Why do we need to encourage them? Aren't they sufficiently motivated
themselves? I would go so far as to suggest they do _not_ do that,
because there is no fully reliable detection mechanism.  But if they
want to, we 'can provide suggestions for them'?

And perhaps one suggestion is to detect User-Agent and only serve it
to one of the five user-agents that support Tor? (Since we discourage
anything else?)  (TB, TBA, Brave, Orfox, OnionBrowser)

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180922195500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-09-22 19:55:00-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


(changed the subject to make clear that this is NOT about Alt-Svc anymore)

I assume this is limited to onions for sites that do not aim for server side location anonymity.

&gt; FYI: the proposal is now the first Tor Browser proposal:
&gt; https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt

in the light of the fact that this proposal has been started before
Tor Browser 8 with Alt-Svc support for .onions was a thing (and CF jumping on it [0])
I'm wondering how you think about it compared to what benefits Alt-Svc provides
over what Onion-Location provides?

Are you unsatisfied with what RFC 7838 - HTTP Alternative Services
provides or is "onion address is displayed in URL bar" one of your goals/requirements of this proposal?

Although Alt-Svc does not work reliably _yet_ and the UI part is missing [3]
I find it addresses some rather important issues that 'Onion-Location' does not:

- users get the transport security benefits of .onions without Tor Browser displaying 
hard/impossible to remember/recognize randomly looking strings.

Long randomly looking  strings in the domain part of the URL that would probably 
confuse many users and make it harder to answer the question "Am I still on the page I want to be?" 
(I consider it a major UX improvement that you can display the non 
.onion domain name while the traffic actually goes to the .onion)


- users will use onions transparently 
without asking them questions they probably don't understand or don't want
to be bothered with everytime they visit a website [1]
I believe asking fewer questions, safe defaults and configuration options for advanced users
are some reasonable goals.

- it solves the ".onions can't get DV certs (yet)" issue






[0] https://blog.cloudflare.com/cloudflare-onion-service/
[1] https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
[2] https://trac.torproject.org/projects/tor/ticket/27590
[3] https://trac.torproject.org/projects/tor/ticket/27590#comment:2

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180926065043</emailId><senderName></senderName><senderEmail>dinovirus</senderEmail><timestampReceived>2018-09-26 06:50:43-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


Before moving on from Alt-Svc, one idea that I thought would be great is
adding a new ALPN protocol ID [1] for HTTP/2 over onions, similar to "h2"
for HTTP/2 over TLS. Alec's post [2] reminded me of this and I'm sure
someone has considered this before, but if not now's a good time.

First, let's all agree that all non-onion websites have to use https,
otherwise none of this matters.

*Here's the gist of it:*

Let's consider the case of "h2" ALPN for HTTP/2 over TLS:
1. browser requests "https://foo.com", receives 'alt-svc:
h2="bar.onion:443"'
3. browser connects to bar.onion:443 port (this fails if tor socks isn't
set up)
4. the host must pass authentication [3], which for "h2" means giving a
valid certificate for "foo.com"
5. if authentication succeeds, browser displays "foo.com" but connects
using "bar.onion" and shows "bar.onion" in the circuit display.

This scenario is great for common websites because the cookie space is
always "foo.com", so the onion address can be transitory. In particular,
even if the website doesn't own the private key to the onion service,
authentication depends on TLS certificate for "foo.com", which the website
owns.


Now, the idea is to add "h2o" ALPN for HTTP/2 over TCP via an onion service:
1. browser requests"https://foo.com", receives 'alt-svc: *h2o*
="bar.onion:80'
3. normal browsers would ignore this, but Tor Browser connects to
bar.onion:80
4. the host *must still pass an authentication* step for "h2o" that Tor
Browser can invent
5. if authentication succeeds, *Tor Browser redirects to "bar.onion"*,
optionally noting "foo.com" in the circuit display.

For the "h2o" authentication step, TBB could:
1. Use a HTTPS Everywhere type extension
2. Require UI announcement + confirmation

This scenario is great for websites that want to separate cookie spaces "
foo.com" and "bar.onion" (you probably don't want a whistle-blower logged
in to your onion service suddenly send cookies over an exit node) or don't
want https+onion. Also, this is pretty much compatible with the Alt-Svc
specifications, so it doesn't require adding a new header.

Note that in this case the onion address is no longer transitory, so it's
important that the website should own the private key. This is critical
because unlike IP addresses, domain names, or even HTTPS certificates, the
private key to onion addresses doesn't expire (until offline/delegate keys
are implemented).

Thoughts?

[1]
https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1
 [2]
https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974
[3] https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1

On Sat, Sep 22, 2018 at 2:55 PM nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt; (changed the subject to make clear that this is NOT about Alt-Svc anymore)
&gt; 
&gt; I assume this is limited to onions for sites that do not aim for server
&gt; side location anonymity.
&gt; 
&gt; &gt; FYI: the proposal is now the first Tor Browser proposal:
&gt; &gt; 
&gt; https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt
&gt;  
&gt; in the light of the fact that this proposal has been started before
&gt; Tor Browser 8 with Alt-Svc support for .onions was a thing (and CF jumping
&gt; on it [0])
&gt; I'm wondering how you think about it compared to what benefits Alt-Svc
&gt; provides
&gt; over what Onion-Location provides?
&gt; 
&gt; Are you unsatisfied with what RFC 7838 - HTTP Alternative Services
&gt; provides or is "onion address is displayed in URL bar" one of your
&gt; goals/requirements of this proposal?
&gt; 
&gt; Although Alt-Svc does not work reliably _yet_ and the UI part is missing
&gt; [3]
&gt; I find it addresses some rather important issues that 'Onion-Location'
&gt; does not:
&gt; 
&gt; - users get the transport security benefits of .onions without Tor Browser
&gt; displaying
&gt; hard/impossible to remember/recognize randomly looking strings.
&gt; 
&gt; Long randomly looking  strings in the domain part of the URL that would
&gt; probably
&gt; confuse many users and make it harder to answer the question "Am I still
&gt; on the page I want to be?"
&gt; (I consider it a major UX improvement that you can display the non
&gt; .onion domain name while the traffic actually goes to the .onion)
&gt; 
&gt; 
&gt; - users will use onions transparently
&gt; without asking them questions they probably don't understand or don't want
&gt; to be bothered with everytime they visit a website [1]
&gt; I believe asking fewer questions, safe defaults and configuration options
&gt; for advanced users
&gt; are some reasonable goals.
&gt; 
&gt; - it solves the ".onions can't get DV certs (yet)" issue
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; [0] https://blog.cloudflare.com/cloudflare-onion-service/
&gt; [1]
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
&gt; [2] https://trac.torproject.org/projects/tor/ticket/27590
&gt; [3] https://trac.torproject.org/projects/tor/ticket/27590#comment:2
&gt; 
&gt; --
&gt; https://twitter.com/nusenu_
&gt; https://mastodon.social/@nusenu
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


-- 
mahrud &lt;algorithms.jux-foundation.org/~mahrud/blog&gt;


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Before moving on from Alt-Svc, one idea that I thought would be great \
is adding a new ALPN protocol ID [1] for HTTP/2 over onions, similar to \
"h2" for HTTP/2 over TLS. Alec's post [2] reminded me of this and \
I'm sure someone has considered this before, but if not now's a good \
time.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;First, let's all agree that all non-onion \
websites have to use https, otherwise none of this matters.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Here's the gist of \
it:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Let's consider the case of "h2" \
ALPN for HTTP/2 over TLS:&lt;br&gt;1. browser requests "&lt;a \
href="https://foo.com"&gt;https://foo.com&lt;/a&gt;", receives 'alt-svc: \
h2="bar.onion:443"'&lt;br&gt;3. browser connects to bar.onion:443 port (this \
fails if tor socks isn't set up)&lt;br&gt;4. the host must pass authentication [3], \
which for "h2" means giving a valid certificate for "&lt;a \
href="http://foo.com"&gt;foo.com&lt;/a&gt;"&lt;br&gt;5. if authentication succeeds, browser \
displays "&lt;a href="http://foo.com"&gt;foo.com&lt;/a&gt;" but connects using \
"bar.onion" and shows "bar.onion" in the circuit \
display.&lt;br&gt;&lt;br&gt;This scenario is great for common websites because the cookie space \
is always "&lt;a href="http://foo.com"&gt;foo.com&lt;/a&gt;", so the onion address can \
be transitory. In particular, even if the website doesn't own the private key to \
the onion service, authentication depends on TLS certificate for "&lt;a \
href="http://foo.com"&gt;foo.com&lt;/a&gt;", which the website \
owns.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Now, the idea is to add "h2o" ALPN for \
HTTP/2 over TCP via an onion service:&lt;br&gt;1. browser requests"&lt;a \
href="https://foo.com"&gt;https://foo.com&lt;/a&gt;", receives  'alt-svc: \
&lt;b&gt;h2o&lt;/b&gt;="bar.onion:80'&lt;br&gt;3. normal browsers would ignore this, but Tor \
Browser connects to bar.onion:80&lt;br&gt;4. the host &lt;b&gt;must still pass an \
authentication&lt;/b&gt; step for "h2o" that Tor Browser can invent&lt;br&gt;5. if \
authentication succeeds, &lt;b&gt;Tor Browser redirects to "bar.onion"&lt;/b&gt;, \
optionally noting "&lt;a href="http://foo.com"&gt;foo.com&lt;/a&gt;" in  the circuit \
display.&lt;br&gt;&lt;br&gt;For the "h2o" authentication step, TBB could:&lt;/div&gt;&lt;div&gt;1. \
Use a HTTPS Everywhere type extension&lt;br&gt;2. Require UI announcement + \
confirmation&lt;br&gt;&lt;br&gt;This scenario is great for websites that want to separate cookie \
spaces "&lt;a href="http://foo.com"&gt;foo.com&lt;/a&gt;" and "bar.onion" \
(you probably don't want a whistle-blower logged in to your onion service \
suddenly send cookies over an exit node) or don't want https+onion. Also, this is \
pretty much compatible with the Alt-Svc specifications, so it doesn't require \
adding a new header.&lt;/div&gt;&lt;div&gt;&lt;br&gt;Note that in this case the onion address is no \
longer transitory, so it's important that the website should own the private key. \
This is critical because unlike IP addresses, domain names, or even HTTPS \
certificates, the private key to onion addresses doesn't expire (until \
offline/delegate keys are implemented).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thoughts?&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1" \
target="_blank"&gt;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[2] \
&lt;a href="https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974" \
target="_blank"&gt;https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] \
&lt;a href="https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1" \
target="_blank"&gt;https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Sat, Sep 22, 2018 at 2:55 PM nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net" target="_blank"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;(changed the subject to make clear \
that this is NOT about Alt-Svc anymore)&lt;br&gt; &lt;br&gt;
I assume this is limited to onions for sites that do not aim for server side location \
anonymity.&lt;br&gt; &lt;br&gt;
&gt; FYI: the proposal is now the first Tor Browser proposal:&lt;br&gt;
&gt; &lt;a href="https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
in the light of the fact that this proposal has been started before&lt;br&gt;
Tor Browser 8 with Alt-Svc support for .onions was a thing (and CF jumping on it \
[0])&lt;br&gt; I'm wondering how you think about it compared to what benefits Alt-Svc \
provides&lt;br&gt; over what Onion-Location provides?&lt;br&gt;
&lt;br&gt;
Are you unsatisfied with what RFC 7838 - HTTP Alternative Services&lt;br&gt;
provides or is "onion address is displayed in URL bar" one of your \
goals/requirements of this proposal?&lt;br&gt; &lt;br&gt;
Although Alt-Svc does not work reliably _yet_ and the UI part is missing [3]&lt;br&gt;
I find it addresses some rather important issues that 'Onion-Location' does \
not:&lt;br&gt; &lt;br&gt;
- users get the transport security benefits of .onions without Tor Browser displaying \
&lt;br&gt; hard/impossible to remember/recognize randomly looking strings.&lt;br&gt;
&lt;br&gt;
Long randomly looking   strings in the domain part of the URL that would probably \
&lt;br&gt; confuse many users and make it harder to answer the question "Am I still on \
the page I want to be?" &lt;br&gt; (I consider it a major UX improvement that you can \
                display the non &lt;br&gt;
.onion domain name while the traffic actually goes to the .onion)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
- users will use onions transparently &lt;br&gt;
without asking them questions they probably don't understand or don't \
want&lt;br&gt; to be bothered with everytime they visit a website [1]&lt;br&gt;
I believe asking fewer questions, safe defaults and configuration options for \
advanced users&lt;br&gt; are some reasonable goals.&lt;br&gt;
&lt;br&gt;
- it solves the ".onions can't get DV certs (yet)" issue&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
[0] &lt;a href="https://blog.cloudflare.com/cloudflare-onion-service/" rel="noreferrer" \
target="_blank"&gt;https://blog.cloudflare.com/cloudflare-onion-service/&lt;/a&gt;&lt;br&gt; [1] &lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png&lt;/a&gt;&lt;br&gt;
 [2] &lt;a href="https://trac.torproject.org/projects/tor/ticket/27590" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/27590&lt;/a&gt;&lt;br&gt; [3] &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27590#comment:2" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/27590#comment:2&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
-- &lt;br&gt;
&lt;a href="https://twitter.com/nusenu_" rel="noreferrer" \
target="_blank"&gt;https://twitter.com/nusenu_&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://mastodon.social/@nusenu" rel="noreferrer" \
target="_blank"&gt;https://mastodon.social/@nusenu&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="m_-7437533324309335270m_-2911047112915825947m_-1289653454655230058m_2967126315234336355m_-714718963163009756gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;mahrud &lt;&lt;a \
href="http://algorithms.jux-foundation.org/~mahrud/blog" \
target="_blank"&gt;algorithms.jux-foundation.org/~mahrud/blog&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180926065402</emailId><senderName></senderName><senderEmail>dinovirus</senderEmail><timestampReceived>2018-09-26 06:54:02-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry, the second reference should have been this:
https://medium.com/@alecmuffett/different-ways-to-add-tor-onion-addresses-to-your-website-39106e2506f9



On Wed, Sep 26, 2018 at 1:50 AM &lt;dinovirus@gmail.com&gt; wrote:

&gt; Before moving on from Alt-Svc, one idea that I thought would be great is
&gt; adding a new ALPN protocol ID [1] for HTTP/2 over onions, similar to "h2"
&gt; for HTTP/2 over TLS. Alec's post [2] reminded me of this and I'm sure
&gt; someone has considered this before, but if not now's a good time.
&gt; 
&gt; First, let's all agree that all non-onion websites have to use https,
&gt; otherwise none of this matters.
&gt; 
&gt; *Here's the gist of it:*
&gt; 
&gt; Let's consider the case of "h2" ALPN for HTTP/2 over TLS:
&gt; 1. browser requests "https://foo.com", receives 'alt-svc:
&gt; h2="bar.onion:443"'
&gt; 3. browser connects to bar.onion:443 port (this fails if tor socks isn't
&gt; set up)
&gt; 4. the host must pass authentication [3], which for "h2" means giving a
&gt; valid certificate for "foo.com"
&gt; 5. if authentication succeeds, browser displays "foo.com" but connects
&gt; using "bar.onion" and shows "bar.onion" in the circuit display.
&gt; 
&gt; This scenario is great for common websites because the cookie space is
&gt; always "foo.com", so the onion address can be transitory. In particular,
&gt; even if the website doesn't own the private key to the onion service,
&gt; authentication depends on TLS certificate for "foo.com", which the
&gt; website owns.
&gt; 
&gt; 
&gt; Now, the idea is to add "h2o" ALPN for HTTP/2 over TCP via an onion
&gt; service:
&gt; 1. browser requests"https://foo.com", receives 'alt-svc: *h2o*
&gt; ="bar.onion:80'
&gt; 3. normal browsers would ignore this, but Tor Browser connects to
&gt; bar.onion:80
&gt; 4. the host *must still pass an authentication* step for "h2o" that Tor
&gt; Browser can invent
&gt; 5. if authentication succeeds, *Tor Browser redirects to "bar.onion"*,
&gt; optionally noting "foo.com" in the circuit display.
&gt; 
&gt; For the "h2o" authentication step, TBB could:
&gt; 1. Use a HTTPS Everywhere type extension
&gt; 2. Require UI announcement + confirmation
&gt; 
&gt; This scenario is great for websites that want to separate cookie spaces "
&gt; foo.com" and "bar.onion" (you probably don't want a whistle-blower logged
&gt; in to your onion service suddenly send cookies over an exit node) or don't
&gt; want https+onion. Also, this is pretty much compatible with the Alt-Svc
&gt; specifications, so it doesn't require adding a new header.
&gt; 
&gt; Note that in this case the onion address is no longer transitory, so it's
&gt; important that the website should own the private key. This is critical
&gt; because unlike IP addresses, domain names, or even HTTPS certificates, the
&gt; private key to onion addresses doesn't expire (until offline/delegate keys
&gt; are implemented).
&gt; 
&gt; Thoughts?
&gt; 
&gt; [1]
&gt; https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1
&gt;  [2]
&gt; https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974
&gt; [3] https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1
&gt; 
&gt; On Sat, Sep 22, 2018 at 2:55 PM nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; &gt; (changed the subject to make clear that this is NOT about Alt-Svc anymore)
&gt; &gt; 
&gt; &gt; I assume this is limited to onions for sites that do not aim for server
&gt; &gt; side location anonymity.
&gt; &gt; 
&gt; &gt; &gt; FYI: the proposal is now the first Tor Browser proposal:
&gt; &gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt
&gt; &gt;  
&gt; &gt; in the light of the fact that this proposal has been started before
&gt; &gt; Tor Browser 8 with Alt-Svc support for .onions was a thing (and CF
&gt; &gt; jumping on it [0])
&gt; &gt; I'm wondering how you think about it compared to what benefits Alt-Svc
&gt; &gt; provides
&gt; &gt; over what Onion-Location provides?
&gt; &gt; 
&gt; &gt; Are you unsatisfied with what RFC 7838 - HTTP Alternative Services
&gt; &gt; provides or is "onion address is displayed in URL bar" one of your
&gt; &gt; goals/requirements of this proposal?
&gt; &gt; 
&gt; &gt; Although Alt-Svc does not work reliably _yet_ and the UI part is missing
&gt; &gt; [3]
&gt; &gt; I find it addresses some rather important issues that 'Onion-Location'
&gt; &gt; does not:
&gt; &gt; 
&gt; &gt; - users get the transport security benefits of .onions without Tor
&gt; &gt; Browser displaying
&gt; &gt; hard/impossible to remember/recognize randomly looking strings.
&gt; &gt; 
&gt; &gt; Long randomly looking  strings in the domain part of the URL that would
&gt; &gt; probably
&gt; &gt; confuse many users and make it harder to answer the question "Am I still
&gt; &gt; on the page I want to be?"
&gt; &gt; (I consider it a major UX improvement that you can display the non
&gt; &gt; .onion domain name while the traffic actually goes to the .onion)
&gt; &gt; 
&gt; &gt; 
&gt; &gt; - users will use onions transparently
&gt; &gt; without asking them questions they probably don't understand or don't want
&gt; &gt; to be bothered with everytime they visit a website [1]
&gt; &gt; I believe asking fewer questions, safe defaults and configuration options
&gt; &gt; for advanced users
&gt; &gt; are some reasonable goals.
&gt; &gt; 
&gt; &gt; - it solves the ".onions can't get DV certs (yet)" issue
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; [0] https://blog.cloudflare.com/cloudflare-onion-service/
&gt; &gt; [1]
&gt; &gt; https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png
&gt; &gt; [2] https://trac.torproject.org/projects/tor/ticket/27590
&gt; &gt; [3] https://trac.torproject.org/projects/tor/ticket/27590#comment:2
&gt; &gt; 
&gt; &gt; --
&gt; &gt; https://twitter.com/nusenu_
&gt; &gt; https://mastodon.social/@nusenu
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 
&gt; 
&gt; 
&gt; --
&gt; mahrud &lt;algorithms.jux-foundation.org/~mahrud/blog&gt;
&gt; 


-- 
mahrud &lt;algorithms.jux-foundation.org/~mahrud/blog&gt;


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Sorry, the second reference should have been this:  &lt;a \
href="https://medium.com/@alecmuffett/different-ways-to-add-tor-onion-addresses-to-you \
r-website-39106e2506f9"&gt;https://medium.com/@alecmuffett/different-ways-to-add-tor-onion-addresses-to-your-website-39106e2506f9&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Wed, Sep 26, \
2018 at 1:50 AM &lt;&lt;a href="mailto:dinovirus@gmail.com"&gt;dinovirus@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Before moving on from \
Alt-Svc, one idea that I thought would be great is adding a new ALPN protocol ID [1] \
for HTTP/2 over onions, similar to "h2" for HTTP/2 over TLS. Alec's \
post [2] reminded me of this and I'm sure someone has considered this before, but \
if not now's a good time.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;First, let's all agree \
that all non-onion websites have to use https, otherwise none of this \
matters.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Here's the gist of \
it:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Let's consider the case of "h2" \
ALPN for HTTP/2 over TLS:&lt;br&gt;1. browser requests "&lt;a href="https://foo.com" \
target="_blank"&gt;https://foo.com&lt;/a&gt;", receives 'alt-svc: \
h2="bar.onion:443"'&lt;br&gt;3. browser connects to bar.onion:443 port (this \
fails if tor socks isn't set up)&lt;br&gt;4. the host must pass authentication [3], \
which for "h2" means giving a valid certificate for "&lt;a \
href="http://foo.com" target="_blank"&gt;foo.com&lt;/a&gt;"&lt;br&gt;5. if authentication \
succeeds, browser displays "&lt;a href="http://foo.com" \
target="_blank"&gt;foo.com&lt;/a&gt;" but connects using "bar.onion" and shows \
"bar.onion" in the circuit display.&lt;br&gt;&lt;br&gt;This scenario is great for \
common websites because the cookie space is always "&lt;a href="http://foo.com" \
target="_blank"&gt;foo.com&lt;/a&gt;", so the onion address can be transitory. In \
particular, even if the website doesn't own the private key to the onion service, \
authentication depends on TLS certificate for "&lt;a href="http://foo.com" \
target="_blank"&gt;foo.com&lt;/a&gt;", which the website \
owns.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Now, the idea is to add "h2o" ALPN for \
HTTP/2 over TCP via an onion service:&lt;br&gt;1. browser requests"&lt;a \
href="https://foo.com" target="_blank"&gt;https://foo.com&lt;/a&gt;", receives  \
'alt-svc: &lt;b&gt;h2o&lt;/b&gt;="bar.onion:80'&lt;br&gt;3. normal browsers would ignore \
this, but Tor Browser connects to bar.onion:80&lt;br&gt;4. the host &lt;b&gt;must still pass an \
authentication&lt;/b&gt; step for "h2o" that Tor Browser can invent&lt;br&gt;5. if \
authentication succeeds, &lt;b&gt;Tor Browser redirects to "bar.onion"&lt;/b&gt;, \
optionally noting "&lt;a href="http://foo.com" target="_blank"&gt;foo.com&lt;/a&gt;" in \
the circuit display.&lt;br&gt;&lt;br&gt;For the "h2o" authentication step, TBB \
could:&lt;/div&gt;&lt;div&gt;1. Use a HTTPS Everywhere type extension&lt;br&gt;2. Require UI \
announcement + confirmation&lt;br&gt;&lt;br&gt;This scenario is great for websites that want to \
separate cookie spaces "&lt;a href="http://foo.com" \
target="_blank"&gt;foo.com&lt;/a&gt;" and "bar.onion" (you probably don't \
want a whistle-blower logged in to your onion service suddenly send cookies over an \
exit node) or don't want https+onion. Also, this is pretty much compatible with \
the Alt-Svc specifications, so it doesn't require adding a new \
header.&lt;/div&gt;&lt;div&gt;&lt;br&gt;Note that in this case the onion address is no longer \
transitory, so it's important that the website should own the private key. This \
is critical because unlike IP addresses, domain names, or even HTTPS certificates, \
the private key to onion addresses doesn't expire (until offline/delegate keys \
are implemented).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thoughts?&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1" \
target="_blank"&gt;https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#tls-extensiontype-values-1&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[2] \
&lt;a href="https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974" \
target="_blank"&gt;https://medium.com/@alecmuffett/onion-synopsis-for-susan-hennesey-b28a92f0e974&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] \
&lt;a href="https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1" \
target="_blank"&gt;https://tools.ietf.org/html/draft-ietf-httpbis-alt-svc-12#section-2.1&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Sat, Sep 22, 2018 at 2:55 PM nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net" target="_blank"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;(changed the subject to make clear \
that this is NOT about Alt-Svc anymore)&lt;br&gt; &lt;br&gt;
I assume this is limited to onions for sites that do not aim for server side location \
anonymity.&lt;br&gt; &lt;br&gt;
&gt; FYI: the proposal is now the first Tor Browser proposal:&lt;br&gt;
&gt; &lt;a href="https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
in the light of the fact that this proposal has been started before&lt;br&gt;
Tor Browser 8 with Alt-Svc support for .onions was a thing (and CF jumping on it \
[0])&lt;br&gt; I'm wondering how you think about it compared to what benefits Alt-Svc \
provides&lt;br&gt; over what Onion-Location provides?&lt;br&gt;
&lt;br&gt;
Are you unsatisfied with what RFC 7838 - HTTP Alternative Services&lt;br&gt;
provides or is "onion address is displayed in URL bar" one of your \
goals/requirements of this proposal?&lt;br&gt; &lt;br&gt;
Although Alt-Svc does not work reliably _yet_ and the UI part is missing [3]&lt;br&gt;
I find it addresses some rather important issues that 'Onion-Location' does \
not:&lt;br&gt; &lt;br&gt;
- users get the transport security benefits of .onions without Tor Browser displaying \
&lt;br&gt; hard/impossible to remember/recognize randomly looking strings.&lt;br&gt;
&lt;br&gt;
Long randomly looking   strings in the domain part of the URL that would probably \
&lt;br&gt; confuse many users and make it harder to answer the question "Am I still on \
the page I want to be?" &lt;br&gt; (I consider it a major UX improvement that you can \
                display the non &lt;br&gt;
.onion domain name while the traffic actually goes to the .onion)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
- users will use onions transparently &lt;br&gt;
without asking them questions they probably don't understand or don't \
want&lt;br&gt; to be bothered with everytime they visit a website [1]&lt;br&gt;
I believe asking fewer questions, safe defaults and configuration options for \
advanced users&lt;br&gt; are some reasonable goals.&lt;br&gt;
&lt;br&gt;
- it solves the ".onions can't get DV certs (yet)" issue&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
[0] &lt;a href="https://blog.cloudflare.com/cloudflare-onion-service/" rel="noreferrer" \
target="_blank"&gt;https://blog.cloudflare.com/cloudflare-onion-service/&lt;/a&gt;&lt;br&gt; [1] &lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/21952/21952.png&lt;/a&gt;&lt;br&gt;
 [2] &lt;a href="https://trac.torproject.org/projects/tor/ticket/27590" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/27590&lt;/a&gt;&lt;br&gt; [3] &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27590#comment:2" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/27590#comment:2&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
-- &lt;br&gt;
&lt;a href="https://twitter.com/nusenu_" rel="noreferrer" \
target="_blank"&gt;https://twitter.com/nusenu_&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://mastodon.social/@nusenu" rel="noreferrer" \
target="_blank"&gt;https://mastodon.social/@nusenu&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="m_5648196094180709325m_-7437533324309335270m_-2911047112915825947m_-1289653454655230058m_2967126315234336355m_-714718963163009756gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;mahrud &lt;&lt;a \
href="http://algorithms.jux-foundation.org/~mahrud/blog" \
target="_blank"&gt;algorithms.jux-foundation.org/~mahrud/blog&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;mahrud &lt;&lt;a \
href="http://algorithms.jux-foundation.org/~mahrud/blog" \
target="_blank"&gt;algorithms.jux-foundation.org/~mahrud/blog&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181012110600</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-10-12 11:06:00-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Alt-Svc HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Rusty Bird:
&gt; Georg Koppen:
&gt;&gt; FYI: the proposal is now the first Tor Browser proposal:
&gt;&gt; https://gitweb.torproject.org/tor-browser-spec.git/tree/proposals/100-onion-location-header.txt
&gt; 
&gt; Sounds great. One nit:
&gt; 
&gt; | Website operators should be aware that tools like tordnsel have
&gt; | false positive potential (they might treat Tor users as non-Tor users)
&gt; 
&gt; -&gt; "false negative"

Thanks, fixed (with commit 1582a35eb10c20c24bcfd008edea75d2803bbe0e).

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181023162456</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-10-23 16:24:56-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

On Wed, 26 Sep 2018 at 06:51, &lt;dinovirus@gmail.com&gt; wrote:
&gt; ...

I want to compare your proposal with the simple situation of "If the
server gets a connection from a Tor exit node, return Location:
blah.onion."  (This would also separate the cookie space)

If I understand your proposal correctly, the differences are:

1) Because the client offers h2o in ALPN, the server knows (at initial
TLS connection time) the client supports .onion transport.  (We also
leak this out onto the network in plaintext; but since it comes from
an exit node it's not too concerning?)

2) The server offers h2o as an Alt-Svc protocol, so any client not
supporting onions will ignore it gracefully. There is no concern that
the server could send a Location: blah.onion header to a client not
supporting onions; or omit it from a client supporting onions.

3) Tor Browser can implement additional authentication checks for the
transfer from blah.com -&gt; blah.onion

I'm not clear if the connection to blah.onion involves HTTPS or HTTP;
but I suppose both are possible.

Because the response from the server comes from


So I like to try and keep the intent of headers as close as possible.
Alt-Svc is used to redirect routing without visible changes and
without user prompting. That's why I'm opposed to Alt-Svc:
h2/blah.onion prompting the user, and opposed to the Location: header
prompting the user but am perfectly supportive of a new Onion-Location
header prompting the user.  Creating h2o for Alt-Svc and implementing
it in a way that redirects the user violates the intent of Alt-Svc.

Additionally, ALPN is designed for negotiating an Application Layer
Protocol - what you speak inside TLS. h1 and h2 are different
protocols, so one uses ALPN to negotiate h2 in the TLS connection, and
the first byte of the application layer protocol is HTTP2. In your
proposal; you negotiate a different protocol, but still speak h2.
Actually it's not clear if one should speak HTTP or HTTP2 to the
server! (We could require http2 but that seems like a bad idea.)

The response from the server still comes in the Alt-Svc header; so
there's no connection latency to be avoided.

I like the goal of giving server operators the ability to separate
cookie spaces.  But I think that's accomplished by both a prompted
Onion-Location redirect or a non-prompted Location redirect.

I like the goal of having no ambiguity or confusion about what a
browser that does/doesn't support onion should do with an onion
address or possibility of not serving an onion address to someone who
should get.  Onion-Location solves this for prompted redirects.
Location does not solve this for promptless redirects. (We could add a
'force' parameter to Onion-Location to bypass the prompt. I think this
is a good idea and would suggest we add it to the proposal.)

I think the idea of allowing Tor Browser to require and perform
additional security checks for the transfer from http(s) -&gt; onion. But
I don't see why they couldn't be added/performed as part of the
Onion-Location transfer.

I like the idea of using ALPN for something; but I don't think this is
the right problem to use it for.  Because it's used for Application
Layer Protocol selection, it is the perfect choice to use to negotiate
a Tor connection or a Pluggable Transport connection to a server
supporting both a website and Tor.  (Imagine if that were deployed on
something like Github!) But it's _in plaintext_. So any connection
offering such an ALPN could be blocked. I'm still disappointed the WG
chose ALPN instead of NPN. With this plaintext limitation, I don't
know what we could use ALPN for.  Maybe we could use it inside normal
Tor connections to negotiate a new Tor protocol that didn't nicely fit
into the existing tor protocol version negotiation.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181023171505</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2018-10-23 17:15:05-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


1) the best and proper way to redirect from site A to site B is to use
"Location:" and/or an appropriate 3xx code. It already works.

2) having an "h2o" ALPN for Alt-Svc would literally make things worse,
retard adoption, confuse implementations, break almost all of my future
plans for onionification of corporations, and generally make life a pain.
It's hard enough getting people to implement functionality in early stages
when there are merely bugs, let alone forcing them to jump through hoops to
implement special, redundant magical headers that literally do not serve
any additional functional value above the extant, open, standard, supported
ones.

3) if sites wish to follow Privacy International's example and redirect
from a DNS TLD to ".onion" then that is something they should implement at
layer 7, by dint of identifying whether the user has arrived over Tor. (See
below)

4) if sites want to advertise the existence of an alternate onion site by
leveraging some form of tor-specific browser pop down, then sure, knock
yourself out with a magical header but nobody in their right mind is going
to deploy it in the Enterprise. It would be a massive waste of human / tech
bandwidth and hassle. It would be far easier and cheaper instead to react
having first identified whether the user has arrived over Tor.

5) onion networking already works for h2 ALPN under alt-svc; please do not
mess this up by fragmenting it / imagining that it needs to take-on a
special syntax to reflect it's "onion nature". I get what you are saying,
it's very clever, but please: no. There is a vast amount of potential for
organisations to "turbocharge" their Tor user-experience by simply offering
an "h2" onion address amongst Alt-Svc when a user connects to them via an
exit node. Everything is already sufficiently disambiguated by the ".onion"
suffix. We're good.

6) a moment's consideration will illuminate that the underlying problem
here is the increasing fallacy which Tor continues to suffer, that sites
should/do not know that a user is arriving over Tor. That half of the
websites in the world should be kept in ignorance that a user is arriving
via Tor, while the other half - the popular sites by volume - actively want
to know that the user is arriving over Tor in order to optimise the user's
experience.

In short we have conflicting desires: some tor users want to pretend that
they are just some schmoe (sp?) running Firefox on Windows on a "random
machine somewhere on the internet" - e.g. a fat exit node run by Mozilla=E2=
=80=A6

But any website that takes an interest (e.g. tracks Cloudflare's "xx-tor"
country geolocation, or whatever it is called) - regarding the reputation
of the source IP address will KNOW that the user is coming from Tor.

We live in a weird world where the Tor community still believes that
systems administrators don't have trivial access to IP reputation databases=
.

The world has changed since Tor was first invented; perhaps it's time that
we stopped trying to hide the fact that we are using Tor? Certainly we
should attempt to retain the uniformity across all tor users - everybody
using Firefox on Windows and so forth - but the fact that/when traffic
arrives from Tor is virtually unhideable.

Consciously sacrificing that myth would make uplift to onion networking so
much simpler.

- a

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;1) the best and proper way to redirect from site A to site B is to \
use "Location:" and/or an appropriate 3xx code. It already works.&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;2) having an "h2o" ALPN for Alt-Svc \
would literally make things worse, retard adoption, confuse implementations, break \
almost all of my future plans for onionification of corporations, and generally make \
life a pain. It's hard enough getting people to implement functionality in early \
stages when there are merely bugs, let alone forcing them to jump through hoops to \
implement special, redundant magical headers that literally do not serve any \
additional functional value above the extant, open, standard, supported \
ones.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;3) if sites wish to follow \
Privacy International's example and redirect from a DNS TLD to ".onion" \
then that is something they should implement at layer 7, by dint of identifying \
whether the user has arrived over Tor. (See below)&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;4) if sites want to advertise the existence of \
an alternate onion site by leveraging some form of tor-specific browser pop down, \
then sure, knock yourself out with a magical header but nobody in their right mind is \
going to deploy it in the Enterprise. It would be a massive waste of human / tech \
bandwidth and hassle. It would be far easier and cheaper instead to react having \
first identified whether the user has arrived over Tor.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;5) onion networking already works for h2 ALPN \
under alt-svc; please do not mess this up by fragmenting it / imagining that it needs \
to take-on a special syntax to reflect it's "onion nature". I get what \
you are saying, it's very clever, but please: no. There is a vast amount of \
potential for organisations to "turbocharge" their Tor user-experience by \
simply offering an "h2" onion address amongst Alt-Svc when a user connects \
to them via an exit node. Everything is already sufficiently disambiguated by the \
".onion" suffix. We're good.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;6) a moment's consideration will illuminate that the underlying \
problem here is the increasing fallacy which Tor continues to suffer, that sites \
should/do not know that a user is arriving over Tor. That half of the websites in the \
world should be kept in ignorance that a user is arriving via Tor, while the other \
half - the popular sites by volume - actively want to know that the user is arriving \
over Tor in order to optimise the user's experience.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;In short we have conflicting desires: some tor \
users want to pretend that they are just some schmoe (sp?) running Firefox on Windows \
on a "random machine somewhere on the internet" - e.g. a fat exit node run \
by Mozilla…&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;But any website that \
takes an interest (e.g. tracks Cloudflare's "xx-tor" country \
geolocation, or whatever it is called) - regarding the reputation of the source IP \
address will KNOW that the user is coming from Tor.  &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;We live in a weird world where the Tor community \
still believes that systems administrators don't have trivial access to IP \
reputation databases.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;The world has \
changed since Tor was first invented; perhaps it's time that we stopped trying to \
hide the fact that we are using Tor? Certainly we should attempt to retain the \
uniformity across all tor users - everybody using Firefox on Windows and so forth - \
but the fact that/when traffic arrives from Tor is virtually unhideable.  &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Consciously sacrificing that myth would make \
uplift to onion networking so much simpler.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;- a&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181023224711</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-10-23 22:47:11-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, Oct 23, 2018, 12:15 PM Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:

&gt;
&gt; The world has changed since Tor was first invented; perhaps it's time that
&gt; we stopped trying to hide the fact that we are using Tor? Certainly we
&gt; should attempt to retain the uniformity across all tor users - everybody
&gt; using Firefox on Windows and so forth - but the fact that/when traffic
&gt; arrives from Tor is virtually unhideable.
&gt;
&gt; Consciously sacrificing that myth would make uplift to onion networking so
&gt; much simpler.
&gt;

I agree.

In particular because I want to avoid false positives and false negatives
in the reputation system.

But by what mechanism do we expose this information? I can't think of one
that doesn't have significant drawbacks.  And what do we say/what do we
mean? (I am onion capable?)

&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote" dir="auto"&gt;&lt;div dir="ltr"&gt;On Tue, \
Oct 23, 2018, 12:15 PM Alec Muffett &lt;&lt;a \
href="mailto:alec.muffett@gmail.com"&gt;alec.muffett@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;The world has changed since Tor was first invented; perhaps it's time \
that we stopped trying to hide the fact that we are using Tor? Certainly we should \
attempt to retain the uniformity across all tor users - everybody using Firefox on \
Windows and so forth - but the fact that/when traffic arrives from Tor is virtually \
unhideable.  &lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Consciously sacrificing \
that myth would make uplift to onion networking so much \
simpler.&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;I \
agree.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;In particular because I want to \
avoid false positives and false negatives in the reputation system.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;But by what mechanism do we expose this \
information? I can't think of one that doesn't have significant drawbacks.   \
And what do we say/what do we mean? (I am onion capable?)&lt;/div&gt;&lt;div \
class="gmail_quote" dir="auto"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181025215700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-10-25 21:57:00-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


(just pasting the references from twitter threads, I'm not
sure if there is a nice way to view the entire thread and all subthreads without missing any)

Alec Muffett:
&gt; perhaps it's time that
&gt; we stopped trying to hide the fact that we are using Tor? 

https://twitter.com/sjmurdoch/status/1054797781343330307
https://twitter.com/arthuredelstein/status/1054835301028253696

&gt; the fact that/when traffic
&gt; arrives from Tor is virtually unhideable.

related
https://lists.torproject.org/pipermail/metrics-team/2018-September/000914.html



-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181026103858</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-10-26 10:38:58-0400</timestampReceived><subject>Re: [tor-dev] UX improvement proposal: Onion auto-redirects using Onion-Location HTTP header</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 23/10/18 18:15, Alec Muffett wrote:
&gt; But any website that takes an interest (e.g. tracks Cloudflare's
&gt; "xx-tor" country geolocation, or whatever it is called) - regarding the
&gt; reputation of the source IP address will KNOW that the user is coming
&gt; from Tor.  
&gt; 
&gt; We live in a weird world where the Tor community still believes that
&gt; systems administrators don't have trivial access to IP reputation databases.

IP reputation databases do not reflect the current state of the Tor
network exactly. They may be pretty close, even 99%, but they're not
exact. You will get false positives, and a lot of false negatives too.

Improving exit detection is on the list of tasks for Tor Metrics but it
is not our top priority.

&gt; 3) if sites wish to follow Privacy International's example and
redirect from a DNS TLD to ".onion" then that is something they should
implement at layer 7, by dint of identifying whether the user has
arrived over Tor.

Given that false positives are possible, doing this conditionally is
going to give some people a terrible user experience by redirecting them
to an onion they cannot possibly reach in their browser.

This is why I like the Onion-Location header. You don't have to have
this conditional. You don't need to have any infrastructure to provide
lookups from databases (which ideally would need to be refreshed
constantly). You just always serve the header. This also gives you the
opportunity to advertise that a service is available via Onion service
to all users, some of which might have a browser add-on that lets them
know about these things.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180115221748</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-01-15 22:17:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

Sending two replies, with an updated proposal in the second.

On 11 December 2017 at 18:38, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt; It should make the file available
&gt;&gt; at
&gt;&gt;   http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z
&gt;
&gt; We shouldn't use next/ unless we're willing to cache a copy of the file
&gt; we actually used to vote. If we do, we should serve it from next/ as
&gt; soon as we vote using it, then serve it from current/ as soon as the
&gt; consensus is created.
&gt;
&gt; If we don't store a copy of the file, we should use a different URL,
&gt; like status-vote/now/bwauth, and recommend that the file is fetched at
&gt; hh:50, when the votes are created. This would allow us to implement
&gt; current/bwauth and next/bwauth in a future version.

Sure.

&gt; Have you thought about versioning the URL if we have multiple flavours
&gt; of bwauth file? We could use bwauth-&lt;FLAVOR&gt; like consensuses.

For lack of a better name I'll propose bwauth-legacy?

&gt; Also, Tor has new compression options for zstd and lzma.
&gt;
&gt; Given that this is an externally-controlled file, we could stream it
&gt; from disk and compress it on the fly with something cheap like gzip
&gt; or zstd.

I haven't seen any indicated in dir-spec how to handle those? Or how I
should change the proposal to accommodate them? Should I make the url
.gz and say that the DirAuth should compress it and stream it from
disk?



&gt;&gt; The raw bwauth vote file does not [really: is not believed to] expose
&gt;&gt; any sensitive information.  All authorities currently make this
&gt;&gt; document public already, an example is at
&gt;&gt;   https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile
&gt;
&gt; How large is the file?
&gt; Maybe we should pre-compress it, to avoid CPU exhaustion attacks.
&gt; If we did this, we could say that it's safe, as long as it is smaller
&gt; than the full consensus or full set of descriptors.

~2.6MB. See above.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180115222339</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-01-15 22:23:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

Updated proposal attached.

On 12 December 2017 at 12:44, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt;&gt; Status: Open
&gt;
&gt; I changed things recently, you'll need a "Ticket:" field if your proposal is
&gt; in state {OPEN,ACCEPTED,CLOSED,FINISHED}. [0]
&gt;
&gt; (Although, maybe we shouldn't require "Ticket:" for state OPEN, so as not to
&gt; hinder calling it OPEN and discussing it even for those things which don't
&gt; yet have tickets?)

I added Ticket: https://trac.torproject.org/projects/tor/ticket/21377


&gt;&gt; An authority SHOULD publish the bwauth vote used to calculate its
&gt;&gt; current vote. It should make the bwauth vote file available at the
&gt;&gt; same time as its normal vote file. It should make the file available
&gt;&gt; at
&gt;&gt;   http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z
&gt;
&gt; If it's "next", how is it possible to expose it at the same time as its vote
&gt; which is based upon it?  Maybe we should change the URL to be "current"?

teor suggested 'now'?  I'll make it whichever you think it should be =)


&gt;&gt; The raw bwauth vote file does not [really: is not believed to] expose
&gt;&gt; any sensitive information.  All authorities currently make this
&gt;&gt; document public already, an example is at
&gt;&gt;   https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile
&gt;
&gt; Maybe we want to think about resource exhaustion attacks if we're making a
&gt; standarised interface available to it?  The response after all is going
&gt; likely always be much larger than the request.

teor suggested compressing and streaming from disk?

-tom

["xxx-expose-bwauth_votes.txt" (text/plain)]

Filename: xxx-expose-bwauth_votes.txt
Title: Have Directory Authorities expose raw bwauth vote documents
Author: Tom Ritter
Created: 11-December-2017
Status: Open
Ticket: https://trac.torproject.org/projects/tor/ticket/21377

1. Introduction

Bandwidth Authorities (bwauths) perform scanning of the Tor Network
and calculate observed speeds for each relay. They produce a 'bwauth
vote file' that is given to a Directory Authority. The Directory
Authority uses the speed value from this file in its vote file
denoting its view of the speed of the relay.

After collecting all of the votes from other Authorities, a consensus
is calculated, and the consensus's view of a relay's speed is
determined by choosing the low-median value of all the authorities'
values for each relay.

Only a single metric from the bwauth vote file is exposed by a 
Directory Authority's vote, however the original file contains
considerably more diagnostic information about how the bwauth arrives
at that measurement for that relay.

2. Motivation

The bwauth vote file contains more information than is exposed in the
overall vote file. This information is useful to debug anomalies in
relays' utilization and suspected bugs in the (decrepit) bwauth code.

Currently, all bwauths expose the raw vote file through various (non-
standard) means, and that file is downloaded (hourly) by a single person
(as long as his home internet connection and home server is working)
and archived (with a small amount of robustness.)  

It would be preferable to have this exposed in a standard manner.
Doing so would no longer require bwauths to run HTTP servers to expose
the file, no longer require them to take additional manual steps to
provide it, and would enable public consumption by any interested
parties.  We hope that Collector will begin archiving the files.

3. Specification

An authority SHOULD publish the bwauth vote used to calculate its
current vote. It SHOULD make the bwauth vote file available at all
times, and provide the file that it has most recently used for its
vote (even if the vote is not currently published.) It SHOULD make
the file available at
  http://&lt;hostname&gt;/tor/status-vote/now/bwauth-legacy.z

It MUST NOT attempt to send its bwauth vote file in a HTTP POST to
other authorities and it SHOULD NOT make bwauth vote files from other
authorities available.

Clients interested in consuming the document should download it when
votes are created. (For the existing Tor network, this is at HH:50,
or 50 minutes after each hour.)

4. Security Implications

The raw bwauth vote file does not [really: is not believed to] expose
any sensitive information.  All authorities currently make this
document public already, an example is at
  https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile

5. Compatibility

Exposing the document presents no compatibility concerns.

The compatibility concern is with applications that want to consume
the document. The bwauth vote file has no specification, and has been
extended in ad-hoc ways. Applications that merely wish to archive the
document (e.g. Collector) won't have a problems. Applications that
want to parse it may encounter errors if a new (unexpected) field is
added, if a new format is specified and fields are removed, or
assumptions are made about the text encoding or formatting of the
document. 
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180716031253</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-16 03:12:53-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

It looks like this proposal was lost, and never committed to torspec.
Sorry about that!

Juga and I have updated the proposal.
Please see the full text inline below.

We have also written the corresponding dir-spec patch:
https://github.com/torproject/torspec/pull/26/files

We are tracking the spec and proposal in:
https://trac.torproject.org/projects/tor/ticket/26694

The Tor implementation in:
https://trac.torproject.org/projects/tor/ticket/21377

And the Collector implementation in:
https://trac.torproject.org/projects/tor/ticket/21378

&gt; On 16 Jan 2018, at 08:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; On 12 December 2017 at 12:44, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; 
&gt;&gt;&gt; An authority SHOULD publish the bwauth vote used to calculate its
&gt;&gt;&gt; current vote. It should make the bwauth vote file available at the
&gt;&gt;&gt; same time as its normal vote file. It should make the file available
&gt;&gt;&gt; at
&gt;&gt;&gt;  http://&lt;hostname&gt;/tor/status-vote/next/bwauth.z
&gt;&gt; 
&gt;&gt; If it's "next", how is it possible to expose it at the same time as its vote
&gt;&gt; which is based upon it?  Maybe we should change the URL to be "current"?
&gt; 
&gt; teor suggested 'now'?  I'll make it whichever you think it should be =)

We changed the scheme so the bandwidth file at
   status-vote/(next|current)/bandwidth.z

is the bandwidth file used to produce:
   status-vote/(next|current)/authority.z

We publish the bandwidth file to next/ when the vote is published to next/.
And the same with current.

It should be relatively easy to implement this publishing in the tor code.
And to implement downloads in Collector.

&gt;&gt;&gt; The raw bwauth vote file does not [really: is not believed to] expose
&gt;&gt;&gt; any sensitive information.  All authorities currently make this
&gt;&gt;&gt; document public already, an example is at
&gt;&gt;&gt;  https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile
&gt;&gt; 
&gt;&gt; Maybe we want to think about resource exhaustion attacks if we're making a
&gt;&gt; standarised interface available to it?  The response after all is going
&gt;&gt; likely always be much larger than the request.
&gt; 
&gt; teor suggested compressing and streaming from disk?

We'll need to take a copy of the file anyway, to avoid race conditions.
We can use the same code we use for the rest of the directory documents.

T

Filename: xxx-expose-bandwidth-files.txt
Title: Have Directory Authorities expose raw bandwidth list files
Author: Tom Ritter
Created: 11-December-2017
Status: Open
Ticket: https://trac.torproject.org/projects/tor/ticket/21377

1. Introduction

Bandwidth Authorities (bwauths) perform scanning of the Tor Network
and calculate observed bandwidths for each relay. They produce a bandwidth
list file that is given to a Directory Authority. The Directory
Authority uses the bw (bandwidth) value from this file in its vote file
denoting its view of the bandwidth of the relay.

After collecting all of the votes from other Authorities, a consensus
is calculated, and the consensus's view of a relay's speed is
determined by choosing the low-median value of all the authorities'
values for each relay.

Only a single metric from the bandwidth list file is exposed by a
Directory Authority's vote, however the original file contains
considerably more diagnostic information about how the bwauth arrives
at that measurement for that relay.

For more details, see the bandwidth list file specification in
bandwidth-file-spec.txt.

2. Motivation

The bandwidth list file contains more information than is exposed in the
overall vote file. This information is useful to debug:
  * anomalies in relays' utilization,
  * suspected bugs in the (decrepit) bwauth code, and
  * the transition to a replacement bwauth implementation.

Currently, all bwauths expose the bandwidth list file through various (non-
standard) means, and that file is downloaded (hourly) by a single person
(as long as his home internet connection and home server is working)
and archived (with a small amount of robustness.)

It would be preferable to have this exposed in a standard manner.
Doing so would no longer require bwauths to run HTTP servers to expose
the file, no longer require them to take additional manual steps to
provide it, and would enable public consumption by any interested
parties.  We hope that Collector will begin archiving the files.

3. Specification

An authority SHOULD publish the bandwidth list file used to calculate its
next vote. It SHOULD make the bandwidth list file available whenever the
corresponding vote is available, at the corresponding URL. (See
dir-spec for the exact details.)

It SHOULD make the file available at
  http://&lt;hostname&gt;/tor/status-vote/next/bandwidth.z
  http://&lt;hostname&gt;/tor/status-vote/current/bandwidth.z

It MUST NOT attempt to send its bandwidth list file in a HTTP POST to
other authorities and it SHOULD NOT make bandwidth list files from other
authorities available.

Clients interested in consuming these documents should download them from
each authority's:
  * next URL when votes are created. (In the public Tor network, this is
    after HH:50 during normal operation, and after HH:20 during a
    consensus failure.)
  * current URL after the valid-after time in the consensus.
    (After HH:00, and HH:30 during consensus failure.)

4. Security Implications

The raw bandwidth list file does not [really: is not believed to] expose
any sensitive information.  All authorities currently make this
document public already, an example is at
  https://bwauth.ritter.vg/bwauth/bwscan.V3BandwidthsFile

5. Compatibility

Exposing the document presents no compatibility concerns.

Applications that parse the document should follow the bandwidth list file
specification in bandwidth-file-spec.txt.
If a new bandwidth list format version is added, the applications MAY need
to upgrade to that version.


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltMDTUACgkQEP6qDnB1
Zyp/dg//ccfzCCkOuX00nyxXe1FbmqOGkCUQD0NrZuAZUfh4CFDcAT+JiPG4VAyk
kRqa7GdomJeRhjUZJLM2gGyelplmuA/gO+dKFjGN7b8Y5A8dORbx9ww+ur7MeN5D
LilLpOxUIJg9ZYYn7tvjmfzV35NZDOZv2OKSWxRN4APZ7CvVvs43U+qtaGyuXD5/
R1adpttO6dqVw2xEzAoJLhBoaJnRizZX5i+MOrmqNiMhTpshQ99OMy+K/RxbyNsB
xlxpP5ehQCjMcZow/wjoEl6+A4wwHv+sa2BEgyuDIk0gYJdvE5Ii9DFmzEsiTePb
blk1cQEbl54bbjIvRBFXVxKXTtXYL62/gopJN5+/K1aot7vDkD4fZzbSWFF23rWG
oFbqjX72mOjYgJy5NhgjdixQRGD5qI/DGs41YhstP3OoKxaRaBAlnPE9b4P1Zk7e
ekx28tTmeRdAOGVgNXCcjlYQtcg2ZHKPE3Rk06nr/wjhioiuESO5rdBFnQY4nPiZ
hGqElCLN6eiNpkO2UG5bF7ZwltpAIbOrQLbUnDoY/+oL5eqcM5EgdGyjTy+b145b
bAfbK19WEl+k4I/nku7Ug4WUAAmhNR275RY7FiFALngKScJo0PhJeZGxXi4e0yEK
aFQ/E4OtiKTXCq3HDakEUjiAOLWAnR+FEEYHhIhxgVV2T+QKM24=
=3ee7
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180716080338</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-16 08:03:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 16/07/18 04:12, teor wrote:
&gt; It MUST NOT attempt to send its bandwidth list file in a HTTP POST to
&gt; other authorities and it SHOULD NOT make bandwidth list files from othe=
r
&gt; authorities available.

There is no mechanism specified that could be used to send this file via
an HTTP POST. There is also no mechanism to make available bandwidth
list files from other authorities specified. I wonder if this paragraph
has to be here.

I can also see a future where, to support more robust metrics
collection, we might want to have authorities also provide mirrors of
other authorities' documents.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180716221241</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-16 22:12:41-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Expose raw bwauth votes</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 16 Jul 2018, at 18:03, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; On 16/07/18 04:12, teor wrote:
&gt;&gt; It MUST NOT attempt to send its bandwidth list file in a HTTP POST to
&gt;&gt; other authorities and it SHOULD NOT make bandwidth list files from other
&gt;&gt; authorities available.
&gt; 
&gt; There is no mechanism specified that could be used to send this file via
&gt; an HTTP POST.

But there is a mechanism for sending votes via HTTP POST:

   An authority SHOULD publish its vote immediately at the start of each voting
   period (minus VoteSeconds+DistSeconds).  It does this by making it
   available at
     http://&lt;hostname&gt;/tor/status-vote/next/authority.z
   and sending it in an HTTP POST request to each other authority at the URL
     http://&lt;hostname&gt;/tor/post/vote

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1586

&gt; There is also no mechanism to make available bandwidth
&gt; list files from other authorities specified.

   Once an authority has a vote from another authority, it makes it available
   at
      http://&lt;hostname&gt;/tor/status-vote/next/&lt;fp&gt;.z
   where &lt;fp&gt; is the fingerprint of the other authority's identity key.
   And at
      http://&lt;hostname&gt;/tor/status-vote/next/d/&lt;d&gt;.z
   where &lt;d&gt; is the digest of the vote document.

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1597

&gt; I wonder if this paragraph
&gt; has to be here.

We included this paragraph to avoid implementing unnecessary features.
We wanted a minimal implementation to start with.

&gt; I can also see a future where, to support more robust metrics
&gt; collection, we might want to have authorities also provide mirrors of
&gt; other authorities' documents.

I think this would be a good feature, but it's outside the scope of a
minimal implementation.

If someone would like to help out:
* I would happily merge a spec or proposal patch
* Please open tickets for the POST and GET features
* See "Authorities should put a hash of the bandwidth file in their votes"
  https://trac.torproject.org/projects/tor/ticket/26698

T




["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltNGFkACgkQEP6qDnB1
ZyoukQ//Xta3AdcwUfbTlmvLrnDbLxQ20uCKjcN+y3AJVcBzy82TMDXOii5evlCS
IhaZS2wi+KJSsyJBHWskHmBfybb8cee5croxpGGxGgWrxAoMLS7ZE6S865zmzFBF
R3FfaWQ98htSKihKb43/FEsdt7K75kqlhdG/6biCarTIcoRfhyzBpMn0wGUf6956
RI6q2nSuKVgV5qYPUubYf52/yE1Ao1bRtds31HniGQtxps8aH2zYUOnNCrMJnBHw
RaRlX3xUoKknxMK6kILTHs/X008tO/lYWc2Lz03NH6cpTvhWy+i0mNMtyCjET30K
z+TP1JPGNmFbwjK7XhXN5AA4wubr5UIcjNAVere/k4yM7xej4ICHqOHO9ET0kpH7
dU6sClyitQ8mCX6HwWehiZGnybiqdDePbNXEYVWPz76EJBkv8KW2yKat6rNvWYc9
Ar9psPUaCaexbhUnXCSKfAcT3WYEDj0KId66E1TMhVyl4L0U9iVZjHxXBaC+PG96
VbYrSf8Sl4CJ2YVzBP6NAvCjHhExRjUBOLA8ts2YZWnUjRx55Cbdv8mkUyme6Dcx
opjbEd4JtaLEzq0je6MealS5Ssv7pvVQzlZY3nTPAMvHIhJHz3Vz+keBoWn2eSKi
3liwrY1KnVSBKzTdkfagjA3MrAqaY7KMULy1QjRl3tDxUt4khvA=
=vtub
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180203003200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-03 00:32:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


thanks for looking into it


--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180307172214</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-03-07 17:22:14-0400</timestampReceived><subject>[tor-dev] Consensus-health single-relay data</subject><body>

teor suggested the other day that it'd be really useful to be able to
see the vote data for a single relay; since the _entire_ detailed page
is huge and unwieldy.

I've been pondering how I could support this without complicating the
server, which results in a few constraints:
a) I really don't want to create one file per-relay
b) I really don't want to make any server-side logic, I'd like to keep
it as static HTML and client-side javascript.  (With the client-side
javascript optional for most of the information.)


I think I can make something work using AJAX and Range requests
though. Before I fly forward with that though, I wanted to understand
a bit more about the use cases where one wants to see per-relay vote
data.

The biggest question I have for you teor (and anyone else who wants to
chime in) is how do you know what relay you want the information for?
Do you know the fingerprint?

If so, I could try adding a text box at the bottom of the index page
saying "Supply a fingerprint, and I will populate vote data for this
relay inline".

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180413003814</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-13 00:38:14-0400</timestampReceived><subject>[tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

See below for the pad notes. Next meeting is scheduled 19 April 2018 at
2200 UTC in #tor-meeting. (This one was held in #tor-dev, but we should
use meetbot).

-------------


Simple Bandwidth Scanner meeting 12 April 2018

#### Updates/Status messages ####

pastly:
    What's on my plate? &lt;- doesn't have to be all in your plate :P
    - Test coverage getting closer to 100%
    - Immediate future: switch to standard python logging module, which
is quite good
    - Improving documentation
    - Checking results against torflow
    - Monitor CPU of sbws client/server
    - +1 on considering asyncio
    - See how chutney generates random strings
    - Run testnet authority
    - Reach out to current auths about running sbws/torflow and adding
me as an auth

juga:
    - open/close PRs/issues about things to improve in doc, refactor
code, etc..., but not changing functionality
    - re. doc:
        - thought to update sbws spec (or create other) to doc
differences with Torflow, not sure it's useful
        - i'd document further some of the classes/functions (as
measure_relay)
        - code doc vs spec (see below)
    - find box to run other sbws, bwauth also in testnet?

## Topic: what is still missing for milestone 1? (aka 1st release, v1.0.0)
- could we create all tickets needed to achive it?
- maybe previous list is enough?
Missing:
- A consensus parameter stating the scaling factor
- sbws config option to set fallback if no consensus param
- `sbws generate` code to use the consensus param

    -
https://stem.torproject.org/api/descriptor/networkstatus.html#stem.descriptor.networkstatus.NetworkStatusDocumentV3


- Correlation coefficient on comparision graphs




## Topic: comparing to torflow
tah
- Can we make the test sbws deployment a little bigger?
- What else needs to be compared?

teor: actually running it in a voting network, to check the feedback
loop (if any) the scaling

- Conclusions after comparing?
- what we could think to change/improve after comparing?

Graphs pastly can explain:
    - sbws vs moria, sorted by sbws:
https://share.riseup.net/#-W_zqcv-08AX4SnOgTatUw
    - sorted by moria: https://share.riseup.net/#URXp6NccZHEhOPFJQcfO4w


teor: the correlation seems good here
If we're going to use these charts to compare, please compare two
existing bwauths
See: https://share.riseup.net/#lPGcIrgHp3ftnvTHUKqOKg (but ignore the
sbws-scaled line, it's wrong wrong wrong)


## Topic: convincing people to run sbws
juga: maybe something to do when 1st sbws release?
pastly: yes, probalby. unless we need to convince testnet people &lt;- ah,
right i was thinking on the Tor net


## Topic: status of open sourcing sbws
- No real update. Time is still passing.

## Topic: specifications

torflow/BwAuthority:
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt,
 https://ohmygodel.com/publications/peerflow-popets2017.pdf has a section
that also makes a nice summary
sbws:
https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst
(ask Pastly for access)
bwscanner: no spec, but reading
https://github.com/TheTorProject/bwscanner/blob/develop/bwscanner/circuit.py#L45
it looks like a Torflow clone &lt;- almost :)

We need a spec for the v3bw file that tor reads (in torspec/dir-spec.txt)
We need a spec for bwauth migration, including acceptance criteria for
new bwauth implementations
Scanners should have their own detailed design documents

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502085613</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-05-02 08:56:13-0400</timestampReceived><subject>[tor-dev] Tor Terminology + torspec</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi All,

Looking at the recent work on the Tor bandwidth measurements document
format, I've noticed there are a few places where language can be
ambiguous [0]. This morning, I noticed more ambiguity in some metrics
tools [1]. We could do with a glossary.

The problem though is not the lack of a glossary, but that we have at
least 3 [2][3][4].

I've just been discussing this with juga in IRC. For the Metrics
glossary, I think (but please correct me if I'm wrong) that the Metrics
team would be happy to have our glossary's definitions match up with
torspec. I also think it would be cool if we only add new terms to the
Metrics glossary if they have a corresponding term in torspec's glossary.=


Would the torspec maintainers be happy to review and merge patches for
new terms to facilitate that?

The community glossary is perhaps more broad than the Metrics or torspec
glossaries, and so having all those terms in torspec would probably not
be a useful thing to do.

Would it be agreeable with the community team that terms that are
already defined in torspec should not be overloaded and that new terms
shouldn't be defined in torspec if they would have conflicting meanings
with terms defined in the community glossary?

If you have other ideas, then please do also suggest them.

Thanks,
Iain.

[0] https://lists.torproject.org/pipermail/tor-dev/2018-May/013145.html
[1] https://lists.torproject.org/pipermail/tor-relays/2018-May/015132.htm=
l
[2] https://gitweb.torproject.org/torspec.git/tree/glossary.txt
[3] https://metrics.torproject.org/glossary.html
[4] https://trac.torproject.org/projects/tor/wiki/doc/community/glossary


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180605131900</emailId><senderName>President Camacho</senderName><senderEmail>presidentcamacho@420blaze.it</senderEmail><timestampReceived>2018-06-05 13:19:00-0400</timestampReceived><subject>[tor-dev] Debug or a high level of logging still present when using obfs4 bridges</subject><body>

Debug or a high level of logging still present in
/var/log/tor/log - when using obf4 (or whatever) bridges

This is a reminder that this problem continues to exist in Tails 3.7.
(and several versions prior)

"[warn] Your log may contain sensitive information - you're logging
more than "notice". Don't log unless it serves an important reason.
Overwrite the log afterwards."

The logging is crazy and consumes several MB per session.

** I have not tested this with plain Tor and/or TBB outside of Tails.

** Nevertheless, this is being posted to tor-dev just in case the
problem exists there, too. (and for historical purposes as the
problem continues to exist in Tails)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180727152654</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-27 15:26:54-0400</timestampReceived><subject>[tor-dev] WTF-PAD and the future</subject><body>

Hello Mike,

I had a talk with Marc and Mohsen today about WTF-PAD. I now understand
much more about WTF-PAD and how it works with regards to histograms.  I
think I might even understand enough to start some sort of conversation
about it:

Here are some takeaways:

1) Marc and Mohsen think that WTF-PAD might not be the way forward
   because of its various drawbacks and its complexity. Apparently there
   are various attacks on WTF-PAD that Roger has discovered (SENDME
   cells side-channels?) and also the deep learning crowd has done some
   pretty good damage to the WTF-PAD padding (90%-60% accuracy?). They
   also told me that achieving needed precision on the timings might be
   a PITA.

2) From what I understand you are also hoping to use WTF-PAD to protect
   against circuit fingerprinting and not just website
   fingerprinting. They told me that while this might be plausible,
   there is no current research on how well it can achieve that.  Are we
   hoping to do that? And what research remains here? How can I help?
   Which parts of the Tor circuit protocol are we hoping to hide?

3) Marc and Mohsen suggested using application-layer defences because
   the application-layer has much better view of the actual structures
   that are sent on the wire, instead of the black box view that the
   network layer has.

   In particular they were mainly concerned about onion services
   fingerprinting because they are part of a restricted closed world,
   whereas they were less concerned about the entire internet because of
   its vast size.

   They suggested that we could investigate using the service-side
   "alpaca" library for onion services (e.g. as part of securedrop?)
   which should resolve the most pressing concern of HS identification.

4) They also told me of research by Tobias Pulls which eliminates the
   needs for histograms in WTF-PAD and instead it samples from the
   probability distribution directly. They think that this can simplify
   things somewhat. Any thoughts on this?

Let me know what you think. I still don't understand the entire space
completely yet, so please be gentle. ;) 

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180904145242</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-09-04 14:52:42-0400</timestampReceived><subject>[tor-dev] PDF versions of Marionette Documents</subject><body>

[Attachment #2 (multipart/alternative)]


These are the PDF versions of the Marionette Documents for easier reading.
The markdown versions of them can be found on the github distribution at
https://github.com/redjack/marionette/doc

-- 
John Helmsen
john.helmsen@redjack.com
C: (301) 273-4372

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;These are the PDF versions of the Marionette Documents \
for easier reading.   The markdown versions of them can be found on the github \
distribution at  &lt;a href="https://github.com/redjack/marionette/doc"&gt;https://github.com/redjack/marionette/doc&lt;/a&gt;&lt;br \
clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;John Helmsen&lt;div&gt;&lt;a \
href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (301) \
273-4372&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180924174610</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-09-24 17:46:10-0400</timestampReceived><subject>[tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

[Attachment #2 (multipart/alternative)]


Hi everyone,

Cloudflare has added support to TLS 1.3 for encrypted server name
indication (SNI). This mailing list post is a high level overview of how
meek could take advantage of this in relation to Cloudflare who until just
now wasn't an option for domain fronting.

What this means:
Effectively domain fronting works by sending a different SNI and host
header. CDN providers like Cloudflare started double checking to make
governments happy, scratch that line, I mean to protect their customers
from fraud and abuse. They seem to of backtracked now. Encrypted SNI means
that a firewall or coffee shop owner won't be able to use SNI to see the
real origin of TLS traffic.

Why this matters:
With the right adjustments for TLS 1.3 and Encrypted SNI support,
Cloudflare may be a viable option for Meek.

Risks:
* Firewall products could always use DPI and block TLS 1.3 altogether.
* Firewall products could block all requests with encrypted SNI.

Thoughts anyone?

References:
* https://blog.cloudflare.com/encrypted-sni/
* https://blog.cloudflare.com/esni

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hi everyone,&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;Cloudflare has added support to TLS 1.3 for encrypted server name \
indication (SNI). This mailing list post is a high level overview of how meek could \
take advantage of this in relation to Cloudflare who until just now wasn't an option \
for domain fronting.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;What this \
means:&lt;/div&gt;&lt;div dir="auto"&gt;Effectively domain fronting works by sending a different \
SNI and host header. CDN providers like Cloudflare started double checking to make \
governments happy, scratch that line, I mean to protect their customers from fraud \
and abuse. They seem to of backtracked now. Encrypted SNI means that a firewall or \
coffee shop owner won't be able to use SNI to see the real origin of TLS \
traffic.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Why this matters:&lt;/div&gt;&lt;div \
dir="auto"&gt;With the right adjustments for TLS 1.3 and Encrypted SNI support, \
Cloudflare may be a viable option for Meek.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;Risks:&lt;/div&gt;&lt;div dir="auto"&gt;* Firewall products could always use DPI and \
block TLS 1.3 altogether.&lt;/div&gt;&lt;div dir="auto"&gt;* Firewall products could block all \
requests with encrypted SNI.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Thoughts \
anyone?&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;References:&lt;/div&gt;&lt;div \
dir="auto"&gt;* &lt;a href="https://blog.cloudflare.com/encrypted-sni/" \
target="_blank"&gt;https://blog.cloudflare.com/encrypted-sni/&lt;/a&gt;&lt;div dir="auto"&gt;* &lt;a \
href="https://blog.cloudflare.com/esni"&gt;https://blog.cloudflare.com/esni&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181105002457</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-05 00:24:57-0400</timestampReceived><subject>[tor-dev] Network team meeting on Tuesday at 2300 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Hi everyone,

This week's network team meeting is on Tuesday at 2300 UTC.
(If this time doesn't work for you, we'll see you the week after.)

Our meetings are held on #tor-meeting on OFTC.

We'll be back to our regular schedule next week, but we'll meet an
hour earlier due to daylight saving time.

First meeting each month: Tuesday at 2300 UTC.
Other meetings each month: Mondays at 1700 UTC.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlvfjdkACgkQEP6qDnB1
ZyrfBhAAtd4B/votMLYBA/3PH51hJs0ZqeG5eRKoEjM3s4eylsvkxUXGoe6aZWF9
sZ/gexZcv52qLaDxkRCetzM9NAV6L85JWsLEm8IY5lGnYGGEheYw34AlEc3Hw2TB
YL9cs9ODfZ0W42jgzRVXlGA+FYwvnbqO436ytmRMpSQqMbs1+7VnnVxU2TNTqnw+
JeWpKIfa17ZHE4NOrcg7GDVZJ6tDMxx7Ph+vedoD47ZEHXTReplqu1kFNA7FWO3k
thiIAvKuTsxlBq75ZLdnU0H2FGcgNKY0NP/Ez+pqsj4T1eCX+QU4j1Mz3OFj2013
RgSRiWHW7GS6H4CDR4dRgWcq+2YsQNiqWgs4uf6dXjGbihX6XJVxoHAjs0PPIl7B
SFiMCXS3fmKZXcchwXlO2MPG9rc6I05bZx+GJHRhDWLpXNQEkN+ZbhF6nRbkR90U
SUxjsWclnSyceeU0CoCbhmVktobblbPZf1ZAyOLi0bTlORENcmCb1pgUjZtL7MCG
j+lNCHsEu5hXwqwNRd3SsDhZ/CY4ZjglJJo6/kg8hsClb9mTKcA1UAe7Nv2KUsNT
2ybpHKjZ8H2XV0ozR7V6FOL2hkYGzB8BYZ9FgYu88RybwqFDm4X584FHHptfjUvt
R2/d8P5rSAlw1pxjH8hNahMcBX22HNzUTO68+gqugVzRoTVX1dQ=
=EPbb
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181205061522</emailId><senderName>marziyeh latifi</senderName><senderEmail>marziyeh.latifi95@gmail.com</senderEmail><timestampReceived>2018-12-05 06:15:22-0400</timestampReceived><subject>[tor-dev] Throughput of each circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
I want to count the number of cells that are sent from circuit queue to the
output buffer in each relay. How can I do this?
Any opinion?
thanks,
marziyeh

[Attachment #5 (text/html)]

&lt;div dir="rtl"&gt;&lt;div dir="ltr"&gt;Hello,&lt;/div&gt;&lt;div dir="ltr"&gt;I want to count the number \
of cells that are sent from circuit queue to the output buffer in each relay. How can \
I do this?&lt;/div&gt;&lt;div dir="ltr"&gt; Any opinion? &lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;thanks,&lt;/div&gt;&lt;div dir="ltr"&gt;marziyeh&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181213205650</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-12-13 20:56:50-0400</timestampReceived><subject>[tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

Hello!

This email is about a new feature that has some implications here for
applications that use Tor. I want to make sure we've thought about and
prepared for those implications, since we still have time to tweak
this feature.

== Overview

In 0.4.0.x, Tor will begin supporting a new "dormant" mode in which it
does not initiate network activity, and tries to avoid CPU wakeups.
This mode is intended to help mobile devices sleep, and to minimize
the impact of unused Tor clients on the network, and on the devices
that run them.  For the implementation history, see:
   https://trac.torproject.org/projects/tor/ticket/28335
and
   https://trac.torproject.org/projects/tor/ticket/28624

By default, Tor will become dormant if it is a pure client (not a
relay, not an onion service[*]), and if it has received not client
activity for 24 hours.  (You can change the interval with
DormantClientTimeout.)

Unlike "DisableNetwork 1", Tor in dormant mode will not close any
listener ports, and will become active again as soon as it receives a
client connection.  But like a "DisableNetwork 1" Tor, a dormant Tor
will not build predicted circuits, and will not download directory
information -- and therefore, will not bootstrap.

Controllers can make Tor become dormant or non-dormant by sending the
commands "SIGNAL DORMANT" and "SIGNAL ACTIVE" respectively -- these
are now documented in control-spec.txt.

Dormant state is persistent: if Tor has been idle for 20 hours, and
you stop tor and start it again, and idle for 4 more hours, Tor will
become dormant. If you stop tor and start it again, Tor will start in
dormant mode.

== Documentation

Here's the documentation we have so far -- please let me know if you
have ideas for clarification:

       DormantClientTimeout N minutes|hours|days|weeks
           If Tor spends this much time without any client activity, enter a
           dormant state where automatic circuits are not built, and directory
           information is not fetched. Does not affect servers or onion
           services. Must be at least 10 minutes. (Default: 24 hours)

       DormantTimeoutDisabledByIdleStreams 0|1
           If true, then any open client stream (even one not reading or
           writing) counts as client activity for the purpose of
           DormantClientTimeout. If false, then only network activity counts.
           (Default: 1)

       DormantOnFirstStartup 0|1
           If true, then the first time Tor starts up with a fresh
           DataDirectory, it starts in dormant mode, and takes no actions
           until the user has made a request. (This mode is recommended if
           installing a Tor client for a user who might not actually use it.)
           If false, Tor bootstraps the first time it is started, whether it
           sees a user request or not.

           After the first time Tor starts, it begins in dormant mode if it
           was dormant before, and not otherwise. (Default: 0)


== Compatibility issues

I see two issues here: one minor, and one major.

Minor issue: some applications periodically make requests to the tor
network on their own -- for example, Tor Browser's update requests.
These requests prevent Tor from becoming dormant.  If this is
undesired, we can add some way around this.

Major issue: some applications expect that Tor will always bootstrap
when it starts, and delay presenting their own UI until Tor is ready.
But if Tor starts as dormant, then it will not bootstrap until it
receives a request from the client or a "SIGNAL ACTIVE"  command from
the controller. This could lead to breakage as the application waits
for Tor to tell it that it's ready, and Tor waits for somebody to tell
it that it's needed.

Are all application developers okay with the issues above, and okay
with working around them?  If not, we may need changes in Tor before
0.4.0.x is released.  Let's talk!


[*] I'd like to add support for dormant onion services, but that's
harder. See https://trac.torproject.org/projects/tor/ticket/28424 .

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180630212200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-30 21:22:00-0400</timestampReceived><subject>[tor-dev] man: "IPv6 addresses should be wrapped in square brackets"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

tor's man page for OutboundBindAddress* options say:

&gt; IPv6 addresses should be wrapped in square brackets

since it does not throw an error without square brackets:
does it make any difference?

Previously I forgot the square brackets when generating torrc
files with relayor and I would like to document the impact
of my bug (if there is any).

thanks,
nusenu


--=20
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180630222914</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-06-30 22:29:14-0400</timestampReceived><subject>Re: [tor-dev] man: "IPv6 addresses should be wrapped in square brackets"</subject><body>

On Sat, Jun 30, 2018 at 5:22 PM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; tor's man page for OutboundBindAddress* options say:
&gt;
&gt;&gt; IPv6 addresses should be wrapped in square brackets
&gt;
&gt; since it does not throw an error without square brackets:
&gt; does it make any difference?
&gt;
&gt; Previously I forgot the square brackets when generating torrc
&gt; files with relayor and I would like to document the impact
&gt; of my bug (if there is any).

I posting somewhere about normalizing IPv6 address format,
it might have listed the RFC, for which the man page and code was
probably inconsistant. Similar to how fingerprints are a mess.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180701000350</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-01 00:03:50-0400</timestampReceived><subject>Re: [tor-dev] man: "IPv6 addresses should be wrapped in square brackets"</subject><body>


&gt; On 1 Jul 2018, at 07:22, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; tor's man page for OutboundBindAddress* options say:
&gt; 
&gt;&gt; IPv6 addresses should be wrapped in square brackets
&gt; 
&gt; since it does not throw an error without square brackets:
&gt; does it make any difference?

When an option only takes an IP address, it does not make a difference.
(As long as the underlying code uses tor_addr_parse().)

When an option takes an IP address and port, the brackets are required to
separate the port from the IPv6 address. That's why we say that all IPv6
addresses should have square brackets.

&gt; Previously I forgot the square brackets when generating torrc
&gt; files with relayor and I would like to document the impact
&gt; of my bug (if there is any).

No impact, but you should use square brackets for consistency.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181220145043</emailId><senderName>Mark Smith</senderName><senderEmail>mcs@pearlcrescent.com</senderEmail><timestampReceived>2018-12-20 14:50:43-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 12/13/18 3:56 PM, Nick Mathewson wrote:
&gt; ...
&gt; In 0.4.0.x, Tor will begin supporting a new "dormant" mode in which it
&gt; does not initiate network activity, and tries to avoid CPU wakeups.
&gt; ...
&gt; 
&gt; == Compatibility issues
&gt; 
&gt; I see two issues here: one minor, and one major.
&gt; 
&gt; Minor issue: some applications periodically make requests to the tor
&gt; network on their own -- for example, Tor Browser's update requests.
&gt; These requests prevent Tor from becoming dormant.  If this is
&gt; undesired, we can add some way around this.

Tor Browser's update requests happen twice per day (and only for desktop
browsers). I am not 100% sure, but I don't think any other timer-based
requests occur more frequently in Tor Browser, so I don't think this
will cause too much activity.

&gt; Major issue: some applications expect that Tor will always bootstrap
&gt; when it starts, and delay presenting their own UI until Tor is ready.
&gt; But if Tor starts as dormant, then it will not bootstrap until it
&gt; receives a request from the client or a "SIGNAL ACTIVE"  command from
&gt; the controller. This could lead to breakage as the application waits
&gt; for Tor to tell it that it's ready, and Tor waits for somebody to tell
&gt; it that it's needed.

Since most users will use their browser very soon after they start it,
for Tor Browser we will probably need to do "SIGNAL ACTIVE" each time
during startup.  For us it would be convenient if there was a way to do
that on the command line or equivalently via a torrc option.
&gt; 
&gt; Are all application developers okay with the issues above, and okay
&gt; with working around them?  If not, we may need changes in Tor before
&gt; 0.4.0.x is released.  Let's talk!

I am sure I can find out somewhere, but what is the approximate schedule
for 0.4.0.x?

Thanks!

-- 
Mark Smith
Pearl Crescent
http://pearlcrescent.com/


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181220145948</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-12-20 14:59:48-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

On Thu, Dec 20, 2018 at 9:51 AM Mark Smith &lt;mcs@pearlcrescent.com&gt; wrote:
&gt;
&gt; On 12/13/18 3:56 PM, Nick Mathewson wrote:
&gt; &gt; ...
&gt; &gt; In 0.4.0.x, Tor will begin supporting a new "dormant" mode in which it
&gt; &gt; does not initiate network activity, and tries to avoid CPU wakeups.
&gt; &gt; ...
&gt; &gt;
&gt; &gt; == Compatibility issues
&gt; &gt;
&gt; &gt; I see two issues here: one minor, and one major.
&gt; &gt;
&gt; &gt; Minor issue: some applications periodically make requests to the tor
&gt; &gt; network on their own -- for example, Tor Browser's update requests.
&gt; &gt; These requests prevent Tor from becoming dormant.  If this is
&gt; &gt; undesired, we can add some way around this.
&gt;
&gt; Tor Browser's update requests happen twice per day (and only for desktop
&gt; browsers). I am not 100% sure, but I don't think any other timer-based
&gt; requests occur more frequently in Tor Browser, so I don't think this
&gt; will cause too much activity.

This is enough activity to make sure that under the (current) default
schedule, Tor will never become dormant. We should think of a
workaround if this is not the intended behavior.

&gt; &gt; Major issue: some applications expect that Tor will always bootstrap
&gt; &gt; when it starts, and delay presenting their own UI until Tor is ready.
&gt; &gt; But if Tor starts as dormant, then it will not bootstrap until it
&gt; &gt; receives a request from the client or a "SIGNAL ACTIVE"  command from
&gt; &gt; the controller. This could lead to breakage as the application waits
&gt; &gt; for Tor to tell it that it's ready, and Tor waits for somebody to tell
&gt; &gt; it that it's needed.
&gt;
&gt; Since most users will use their browser very soon after they start it,
&gt; for Tor Browser we will probably need to do "SIGNAL ACTIVE" each time
&gt; during startup.  For us it would be convenient if there was a way to do
&gt; that on the command line or equivalently via a torrc option.

We could add an option like that, sure.

&gt; &gt; Are all application developers okay with the issues above, and okay
&gt; &gt; with working around them?  If not, we may need changes in Tor before
&gt; &gt; 0.4.0.x is released.  Let's talk!
&gt;
&gt; I am sure I can find out somewhere, but what is the approximate schedule
&gt; for 0.4.0.x?

We're planning to put the first alpha out in mid-January, and aim for
a stable in mid-April.  Our alpha plans usually run on schedule; our
stables seem to be happening late.

cheers
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181221113354</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-12-21 11:33:54-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi Nick,

Is the guard connection closed when becoming dormant?

On 13/12/2018 20:56, Nick Mathewson wrote:
&gt;        DormantTimeoutDisabledByIdleStreams 0|1
&gt;            If true, then any open client stream (even one not reading o=
r
&gt;            writing) counts as client activity for the purpose of
&gt;            DormantClientTimeout. If false, then only network activity c=
ounts.
&gt;            (Default: 1)

When this option's set to 0 and Tor becomes dormant, will it close any
idle client connections that are still open?

Will it close client connections on receiving SIGNAL DORMANT?

If Tor doesn't close client connections when becoming dormant, will it
become active again (or send an event that the controller can use to
trigger SIGNAL ACTIVE) if there's activity on an open client stream?

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180924175748</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-09-24 17:57:48-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Mon, Sep 24, 2018 at 01:46:10PM -0400, Nathaniel Suchy wrote:
&gt; Why this matters:
&gt; With the right adjustments for TLS 1.3 and Encrypted SNI support, Cloudflare
&gt; may be a viable option for Meek.
&gt; 
&gt; Risks:
&gt; * Firewall products could always use DPI and block TLS 1.3 altogether.
&gt; * Firewall products could block all requests with encrypted SNI.

I wrote an essay on some of the implications of encrypted SNI here:
https://groups.google.com/d/msg/traffic-obf/UyaLc9jPNmY/ovNImK5HEQAJ
tl;dr: yes, encrypted SNI is a very good thing for censorship
circumvention and privacy more generally; a risk though is that it
further centralizes access to online resources.


----

2018-08-18

Efforts are underway to add SNI encryption as an extension in TLS 1.3.
 * https://tools.ietf.org/html/draft-rescorla-tls-esni-00
 * https://www.ietf.org/mail-archive/web/tls/current/msg26842.html
I find this a really hopeful development. I appreciate the work of
everyone who is helping to make it a reality (some of them are on this
list). Encrypted SNI will of course be a boon for online privacy
generally, but in our world of censorship circumvention it could be the
biggest thing since the ascendance of TLS. Along with its benefits, I
foresee that encrypted SNI will change the basic game in ways that we
need to be ready for. I expect that we'll need to reevaluate our
customary models and begin to consider new challenges.

At first glance, encrypted SNI—in whatever form it may eventually
take—is a silver bullet. It's domain fronting without the downsides. It
solves all our problems, up to traffic analysis: payload encryption
prevents blocking by content, and SNI encryption protects the
destination address. The censor cannot distinguish various connections
to a TLS server and faces the old dilemma: block all, or block none. And
experience shows that we can find servers with a sufficient degree of
co-hosting that a censor will hesitate to "block all."

So what's the catch? I don't really think there is one, at least not a
major one. SNI encryption is poised to put censorship circumvention on
substantially securer footing. As
https://tools.ietf.org/html/draft-ietf-tls-sni-encryption-03 (which I
encourage you to read) says, "Historically, adversaries have been able
to monitor the use of web services through three channels... These
channels are getting progressively closed." But what I do think SNI
encryption will do is force us to reconsider our threat models. Solving
our current batch of problems is going to uncover new problems—lesser
problems, to be sure—but ones that we have until now mostly ignored
because they were not the most pressing. Censors, too, will be forced
evolve, when they are finally deprived of their last easy traffic
distinguisher. I predict a displacement of the battleground, from the
land of firewalls to new arenas.

It's a credit to everyone's work on domain fronting, and the basic
soundness of the idea, that when it began to falter, it was not because
of the Great Firewalls of the world, but because of the Googles and
Amazons. This phenomenon is an example of what I mean when I say that
old challenges will give way to new ones. We beat the censors at their
game, and resisted direct blocking long enough for another weakness to
reveal itself; i.e., that network intermediaries don't reliably perform
the functions that we depended on. I mean that as an observation of
fact, not as implied judgement—personally I don't really blame Google
and Amazon for their policy change regarding domain fronting. While the
wisdom of the decision is debatable, and I suspect there is more to
their rationale than they have stated publicly, certainly they are under
no obligation to continue supporting an unintended feature, no matter
how useful we find it. But whatever the cause, the fact is that domain
fronting, while demonstrably robust against border-firewall censors, is
susceptible to the changing dispositions of intermediary services. We
reached this frontier of experiential knowledge only because we had
beaten the censor's usual tricks—we transcended the cat-and-mouse game.
I like to draw an analogy with human health: our caveman forebears
didn't worry about dying from heart disease, because it was almost
certain that they would be killed by something else first, a woolly
mammoth, say. It was only after the immediate threat of death by mammoth
had subsided, that humans had the comparative luxury of being concerned
about heart disease. So it is with us now: we built a cat-proof mouse,
and now we see what other worries a mouse has.

I can see something similar playing out with encrypted SNI, only on a
larger and more pervasive scale. Network intermediaries—CDNs, app
stores, hosting providers—are going to face more and more pressure: as
other links in the chain of communication are strengthened, those
intermediaries will become attractive targets of action by censors. We
already see examples of censors having to step out of their accustomed
comfort zones because of generally increasing Internet security, for
example when the government of China pressured Apple to yank VPN apps
from its app store. I contend that if the government had the ability to
block apps all by itself, without petitioning Apple, then that's what it
would have done. That the censor resorted to pressuring a third party
shows a certain weakness, but the fact that it succeeded shows it is
still strong enough for its purposes. It also highlights a shift in
moral responsibility. If the government were able to block apps without
asking, then Apple could just throw up its hands and say: "not my
fault." But because the censor has no choice but to ask, Apple must make
the deliberate choice of whether to become an agent—however unwilling—of
censorship.

We circumvention designers have customarily assumed that network
intermediaries are benevolent, or at least non-malicious—that they do
not collaborate with a censor. We assumed so, because the risk of direct
blocking by a censor overshadowed any other risk. In a world of
encrypted SNI, where the direct risk from the censor is greatly
diminished, we will need to reexamine this assumption. Intermediaries
will become de-facto gatekeepers of information, to an even greater
degree than they are now, and they'll be in the unenviable position of
being the logical place at which to implement censorship. As things
stand now, when a court in India orders a site blocked, it's Airtel's
problem to block it. But when encrypted SNI renders Airtel unable, it'll
be Cloudflare's problem. Now, if I had to choose between the good will
of Cloudflare et al. and that of the GFW, there's no comparison:
obviously you choose Cloudflare every time. And yet, we can't overlook
that Cloudflare once booted a site on a CEO's whim; nor that Google
secretly started building a censored search engine for China. The
operators of network intermediaries, and their commitment to human
rights, will be tested more than ever, and the population of Internet
users will increasingly rely on them to do the right thing.

As circumvention designers, one thing we can do to help those services
help themselves is not to proxy directly from the services themselves,
but to use at least one additional encrypted hop to an separate proxy
server. That way, it becomes technically harder for the services to do
surgical blocking.

I have to admit that I don't fully understand the apparent enthusiasm
for encrypted SNI from groups that formerly were not excited about
domain fronting. It's possible I misunderstand some subtlety, but to my
mind, they both should amount to about the same thing from the their
perspective. The primary difference is one of scale. The stated concerns
with domain fronting also apply to encrypted SNI; in particular that if
one customer gets blocked, it will have a collateral effect on other
customers. Maybe the difference in scale is really it: the cloud
companies are happier to bet against blocking when *all* their
customer's domains are potentially affected, rather than just one. It's
a rational enough viewpoint (greater potential collateral damage → lower
probability of blocking), but to my mind encrypted SNI doesn't
fundamentally alter the nature of the game, it just raises the stakes.
Don't get me wrong: I welcome the adoption of encrypted SNI for whatever
reason. It's better than domain fronting, it'll be nice to have it in a
standard, and once we have it we won't want to go back. But I hope that
operators understand what they're getting into. Will they get cold feet
when push comes to shove—when a future version of Telegram uses
encrypted SNI and Russia again blocks millions of IPs? Or malware adopts
it for C&amp;C and infosec blue teamers get annoyed?

I said earlier that I didn't see any major catch with encrypted SNI. The
minor catch I see is the potential for increased centralization. TLS
with encrypted SNI is likely to be the most effective form of
circumvention, which means that unless you're a major player, or hosted
on one, you'll be at increased risk of being blocked. I've read some
criticism online of circumvention systems, like domain fronting, that
route traffic through the major cloud companies. One the one hand, I
find that kind of criticism annoying, because it's not that the use of
centralized services is a desired, designed-in feature; it's that we
don't yet know how to do it better. Circumvention is already hard
enough, and by demanding that is be simultaneously decentralized, these
critics are asking us not only to juggle, but to do so backwards on
roller skates. But on the other hand, I can sympathize with their point
of view. Despite the difficulty, we *should* aspire to better designs. I
dislike giving connection metadata to Amazon and Microsoft as much as
anyone. Unfortunately, encrypted SNI is likely to move us even farther
from the decentralized end of the scale. It will be so effective, and so
easy to use, that I predict there will be a convergence of systems using
it. We see something like that effect today, where there is a perception
that if you want to resist DoS, you have no choice but to be on one of
the big CDNs. The outcome I fear for the web is something like we have
today with SMTP, where the costs of setting up an independent server are
so great as to make the choice effectively impossible. But I don't want
to overblow my concern here. We should be thinking about ways to
decentralize, but encrypted SNI is worth pursuing even if we can't think
of any.

What are the risks to reaching a future of easy and effective
circumvention using encrypted SNI? The worst case is if the proposal
fails or is permanently stalled: we'll be stuck in a world that is
pretty much like the world of today, except more hostile to domain
fronting, waiting for something else to come along. As I understand it,
draft-rescorla-tls-esni-00 is subject to change before standardization,
and I suppose there's a chance it could morph into something so unwieldy
or undeployable that it fails despite standardization. Most of the
discussion that I've seen so far has been positive, but not all
stakeholders at the IETF love the idea; in particular I get the
impression that some people rely on plaintext SNI for monitoring or
regulatory compliance, and encrypted SNI will make their lives more
difficult. So we have to watch out for it being neutered in a way that
enables censorship. Crucially, the value of encrypted SNI for
circumvention depends on its adoption. If at first it's only
circumventors and malware authors using encrypted SNI, then censors and
security firewalls will start to block it, and then it's permanently
skunked, no use to anybody. What we need is for at least one of the
major browsers to implement encrypted SNI and (importantly) enable it by
default. It's browsers that have to lead the way here, just as they
effectively snuck TLS deployment past the censors' notice, until it was
too late to do anything about it.

And what about traffic analysis; that is, classification based on the
timing and size of packets in an SNI-encrypted TLS stream? My gut
feeling is that it still won't be the first tool that censors reach for.
I see pressure on third parties as a more likely threat. But it becomes
more likely with each passing day, and anyway, my instinct could be
wrong. So I think that research on traffic analysis obfuscation will
become more and more relevant.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180924181537</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-09-24 18:15:37-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

[Attachment #2 (multipart/alternative)]


On Mon, Sep 24, 2018, 12:46 PM Nathaniel Suchy &lt;me@lunorian.is&gt; wrote:

&gt; Hi everyone,
&gt;
&gt; Cloudflare has added support to TLS 1.3 for encrypted server name
&gt; indication (SNI). This mailing list post is a high level overview of how
&gt; meek could take advantage of this in relation to Cloudflare who until just
&gt; now wasn't an option for domain fronting.
&gt;
&gt; What this means:
&gt; Effectively domain fronting works by sending a different SNI and host
&gt; header. CDN providers like Cloudflare started double checking to make
&gt; governments happy, scratch that line, I mean to protect their customers
&gt; from fraud and abuse. They seem to of backtracked now. Encrypted SNI means
&gt; that a firewall or coffee shop owner won't be able to use SNI to see the
&gt; real origin of TLS traffic.
&gt;
&gt; Why this matters:
&gt; With the right adjustments for TLS 1.3 and Encrypted SNI support,
&gt; Cloudflare may be a viable option for Meek.
&gt;
&gt; Risks:
&gt; * Firewall products could always use DPI and block TLS 1.3 altogether.
&gt; * Firewall products could block all requests with encrypted SNI.
&gt;
&gt; Thoughts anyone?
&gt;

The latter concern seems real enough for me that we should consider not
front-running major adoption in browsers.

-tom

&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon, Sep 24, \
2018, 12:46 PM Nathaniel Suchy &lt;&lt;a \
href="mailto:me@lunorian.is"&gt;me@lunorian.is&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;Hi everyone,&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Cloudflare has added support to TLS 1.3 for \
encrypted server name indication (SNI). This mailing list post is a high level \
overview of how meek could take advantage of this in relation to Cloudflare who until \
just now wasn't an option for domain fronting.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;What this means:&lt;/div&gt;&lt;div dir="auto"&gt;Effectively domain fronting works by \
sending a different SNI and host header. CDN providers like Cloudflare started double \
checking to make governments happy, scratch that line, I mean to protect their \
customers from fraud and abuse. They seem to of backtracked now. Encrypted SNI means \
that a firewall or coffee shop owner won't be able to use SNI to see the real origin \
of TLS traffic.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Why this \
matters:&lt;/div&gt;&lt;div dir="auto"&gt;With the right adjustments for TLS 1.3 and Encrypted \
SNI support, Cloudflare may be a viable option for Meek.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Risks:&lt;/div&gt;&lt;div dir="auto"&gt;* Firewall products \
could always use DPI and block TLS 1.3 altogether.&lt;/div&gt;&lt;div dir="auto"&gt;* Firewall \
products could block all requests with encrypted SNI.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Thoughts \
anyone?&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;The \
latter concern seems real enough for me that we should consider not front-running \
major adoption in browsers.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;-tom&lt;/div&gt;&lt;div dir="auto"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181001175531</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2018-10-01 17:55:31-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Mon, 24 Sep 2018 20:23:58 +0000, David Fifield wrote:
...
&gt; "encrypted SNI" part. But it's possible to do better: if you're willing
&gt; to abandon HTTP/1.1 compatibility and require HTTP/2, you can use the
&gt; "server push" feature to implement a serialization that's much more
&gt; efficient than the current one in meek.

How about websockets instead of trying to cram this into HTTP/2?

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181001181215</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2018-10-01 18:12:15-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Mon, 24 Sep 2018 11:57:48 +0000, David Fifield wrote:
&gt; I have to admit that I don't fully understand the apparent enthusiasm
&gt; for encrypted SNI from groups that formerly were not excited about
&gt; domain fronting.

It's simply wrong to use different names in SNI and the host header. :-)

&gt; customer's domains are potentially affected, rather than just one. It's
&gt; a rational enough viewpoint (greater potential collateral damage ??? lower
&gt; probability of blocking), but to my mind encrypted SNI doesn't
&gt; fundamentally alter the nature of the game, it just raises the stakes.

But in a game-changingly massive way. Remember the github blocking?

When you block one domain that is on cloudflare, almost noboby will care.
When you block all of cloudflare you will get an outcry of a lot of
people, and probably worse for the censors, businesses.

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181004010121</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-04 01:01:21-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Mon, Oct 01, 2018 at 07:55:31PM +0200, Andreas Krey wrote:
&gt; On Mon, 24 Sep 2018 20:23:58 +0000, David Fifield wrote:
&gt; ...
&gt; &gt; "encrypted SNI" part. But it's possible to do better: if you're willing
&gt; &gt; to abandon HTTP/1.1 compatibility and require HTTP/2, you can use the
&gt; &gt; "server push" feature to implement a serialization that's much more
&gt; &gt; efficient than the current one in meek.
&gt; 
&gt; How about websockets instead of trying to cram this into HTTP/2?

And for that matter, why not a plain old HTTP CONNECT proxy? That would
be even more efficient. But we're limited to what the CDN supports. Most
CDNs only support basic methods like GET and POST, not CONNECT or the
special headers needed by WebSocket.

Cloudflare does support WebSocket, though:
https://www.cloudflare.com/website-optimization/web-sockets/
https://blog.cloudflare.com/cloudflare-now-supports-websockets/
So this, combined with encrypted SNI, could be a viable technique when
tunneling through Cloudflare--it just wouldn't be portable to other
services. We even already have an existing WebSocket-based pluggable
transport implementation--it would need changes to the client to support
encrypted SNI.
https://gitweb.torproject.org/pluggable-transports/websocket.git/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181004011902</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-04 01:19:02-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Wed, Oct 03, 2018 at 07:01:21PM -0600, David Fifield wrote:
&gt; And for that matter, why not a plain old HTTP CONNECT proxy? That would
&gt; be even more efficient.

I should add that--leaving out domain fronting/encrypted SNI--there's an
implementation of exactly this, a pluggable transport built on an HTTP
proxy, by Sergey Frolov et al. He has been trying to get some attention
or buy-in to get it integrated into Tor Browser, but hasn't had much
luck so far. In my opinion, it will make a great alternative to obfs4
and be effective in many situations.

There's a bit more to it than I've described above. It can work with any
HTTP proxy (with HTTPS encryption to hide the destination from the
censor, of course)--but they've also implemented a proxy plugin for the
Caddy web server, which supports authentication. The authentication is
to resist active probing like the GFW does: a genuine client who got the
password through BridgeDB will be able to use the proxy, while a censor
probing IP address will just get the web server's normal pages. Check
the links for more info.

https://bugs.torproject.org/26923
https://github.com/sergeyfrolov/httpsproxy
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181004073718</emailId><senderName>Andreas Krey</senderName><senderEmail>a.krey@gmx.de</senderEmail><timestampReceived>2018-10-04 07:37:18-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Wed, 03 Oct 2018 19:01:21 +0000, David Fifield wrote:
...
&gt; And for that matter, why not a plain old HTTP CONNECT proxy?

Because the typical load balancer/forwarder would have to
decide whether to forward that CONNECT or do it itself,
and some other. CONNECT with a Host: header - I'm not
sure there is such a thing.

&gt; That would
&gt; be even more efficient. But we're limited to what the CDN supports. Most
&gt; CDNs only support basic methods like GET and POST, not CONNECT or the
&gt; special headers needed by WebSocket.

Yes. No. A quick search indicates that aws and azure are already
supporting it, although I'm unable to interpret whether that is
actually the respective product you are/were using.

But websockets are a relevant thing unlike CONNECT, so I do expect
all major players to implement that (and the components I know of
(haproxy, nginx, apache, golang) are there already).

- Andreas

-- 
"Totally trivial. Famous last words."
From: Linus Torvalds &lt;torvalds@*.org&gt;
Date: Fri, 22 Jan 2010 07:29:21 -0800
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180904161458</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-09-04 16:14:58-0400</timestampReceived><subject>Re: [tor-dev] PDF versions of Marionette Documents</subject><body>

[Attachment #2 (multipart/alternative)]


I get a 404 when clicking your GitHub link.

On Tue, Sep 4, 2018 at 10:52 AM John Helmsen &lt;john.helmsen@redjack.com&gt;
wrote:

&gt; These are the PDF versions of the Marionette Documents for easier
&gt; reading.  The markdown versions of them can be found on the github
&gt; distribution at https://github.com/redjack/marionette/doc
&gt;
&gt; --
&gt; John Helmsen
&gt; john.helmsen@redjack.com
&gt; C: (301) 273-4372
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I get a 404 when clicking your GitHub link.&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Tue, Sep 4, 2018 at 10:52 AM John Helmsen \
&lt;&lt;a href="mailto:john.helmsen@redjack.com"&gt;john.helmsen@redjack.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;These \
are the PDF versions of the Marionette Documents for easier reading.   The markdown \
versions of them can be found on the github distribution at  \
&lt;a&gt;https://github.com/redjack/marionette/doc&lt;/a&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;&lt;div class="m_7794385309153064725gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;John Helmsen&lt;div&gt;&lt;a&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (301) \
273-4372&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a rel="noreferrer"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180727190315</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-07-27 19:03:15-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

[Attachment #2 (multipart/signed)]


George Kadianakis:
&gt; Hello Mike,
&gt; 
&gt; I had a talk with Marc and Mohsen today about WTF-PAD. I now understand
&gt; much more about WTF-PAD and how it works with regards to histograms.  I
&gt; think I might even understand enough to start some sort of conversation
&gt; about it:
&gt; 
&gt; Here are some takeaways:
&gt; 
&gt; 1) Marc and Mohsen think that WTF-PAD might not be the way forward
&gt;    because of its various drawbacks and its complexity. Apparently there
&gt;    are various attacks on WTF-PAD that Roger has discovered (SENDME
&gt;    cells side-channels?) and also the deep learning crowd has done some
&gt;    pretty good damage to the WTF-PAD padding (90%-60% accuracy?). They
&gt;    also told me that achieving needed precision on the timings might be
&gt;    a PITA.

Are there citations for any of this? Last I heard Matt Wright was
working on a deep learning study but the results were mixed.

Furthermore, we need to do adversarial learning and other optimizations
on these histograms to tune them. They are a generalized approach. Just
like it is not a valid evaluation to train a classifier on a dataset and
then add a new defense and show that it can't classify the defended
traffic using the old model, it is similarly not accurate to develop an
attack on WTF-PAD with a new classifier without also adversarially
optimizing the WTF-PAD histograms under that classifier. When you do
this, your results are not invalidating WTF-PAD, they are only
invalidating the histograms that were tuned against the previous
classifier/attack.

The same thing applies to the SENDME concern. The core piece of the
SENDME issue is "Tor should never send more than 1000 cells without a
SENDME. So *IF* I can tell which cells are SENDMEs, and *IF* I see more
than 1000 cells between them, then AHA I know that some cells are
actually padding and not real traffic".

Both of these are very big *IF*s, and even if they were shown to be
valid assumptions (which AFAIK they have not been), that does not mean
that it is actually useful for a classifier to know the percentage of
padding after 1000 cells, and it also does not mean that there isn't a
simple tweak to the histograms that encodes what looks like SENDME
transmission to that classifier.

&gt; 2) From what I understand you are also hoping to use WTF-PAD to protect
&gt;    against circuit fingerprinting and not just website
&gt;    fingerprinting. They told me that while this might be plausible,
&gt;    there is no current research on how well it can achieve that.  Are we
&gt;    hoping to do that? And what research remains here? How can I help?
&gt;    Which parts of the Tor circuit protocol are we hoping to hide?

I am designing WTF-PAD to be a framework for deploying padding against
arbitrary traffic analysis attacks. It is meant to allow us to define
histograms on the fly (in the Tor consensus) as these are studied. The
fact that they have not yet been studied is not super relevant to
deploying the framework for it now.

&gt; 3) Marc and Mohsen suggested using application-layer defences because
&gt;    the application-layer has much better view of the actual structures
&gt;    that are sent on the wire, instead of the black box view that the
&gt;    network layer has.
&gt; 
&gt;    In particular they were mainly concerned about onion services
&gt;    fingerprinting because they are part of a restricted closed world,
&gt;    whereas they were less concerned about the entire internet because of
&gt;    its vast size.
&gt; 
&gt;    They suggested that we could investigate using the service-side
&gt;    "alpaca" library for onion services (e.g. as part of securedrop?)
&gt;    which should resolve the most pressing concern of HS identification.

I mean yeah application-layer defenses are useful for website traffic
fingerprinting, but that is a very narrow slice of the traffic analysis
problems that I want this framework to solve.

WTF-PAD also doesn't rule out hidden service operators using alpaca,
either. 

&gt; 4) They also told me of research by Tobias Pulls which eliminates the
&gt;    needs for histograms in WTF-PAD and instead it samples from the
&gt;    probability distribution directly. They think that this can simplify
&gt;    things somewhat. Any thoughts on this?

Yes this is actually exactly what I want to do with the next iteration
of WTF-PAD! The question is what form/model to use for these probability
distributions. Right now we're encoding inter-burst and inter-packet
timings with some weird geometric distribution determining how long
these bursts should go on for, when it might be more natural to encode
and sample from length-based distributions/histograms.

(Histograms vs distribution is not the problem -- its what they encode
and how they encode it that matters).

I don't see this paper on Tobias's website. Is it up anywhere yet?
 
&gt; Let me know what you think. I still don't understand the entire space
&gt; completely yet, so please be gentle. ;) 

I hope I was gentle enough. If there's anything that triggers rage mode
in me me more than someone being wrong on the internet, it's FUD and
hand-wringing being spread on the internet. ;)

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180729134243</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-29 13:42:43-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; George Kadianakis:
&gt;&gt; Hello Mike,
&gt;&gt; 
&gt;&gt; I had a talk with Marc and Mohsen today about WTF-PAD. I now understand
&gt;&gt; much more about WTF-PAD and how it works with regards to histograms.  I
&gt;&gt; think I might even understand enough to start some sort of conversation
&gt;&gt; about it:
&gt;&gt; 
&gt;&gt; Here are some takeaways:
&gt;&gt; 
&gt;&gt; 1) Marc and Mohsen think that WTF-PAD might not be the way forward
&gt;&gt;    because of its various drawbacks and its complexity. Apparently there
&gt;&gt;    are various attacks on WTF-PAD that Roger has discovered (SENDME
&gt;&gt;    cells side-channels?) and also the deep learning crowd has done some
&gt;&gt;    pretty good damage to the WTF-PAD padding (90%-60% accuracy?). They
&gt;&gt;    also told me that achieving needed precision on the timings might be
&gt;&gt;    a PITA.
&gt;
&gt; Are there citations for any of this? Last I heard Matt Wright was
&gt; working on a deep learning study but the results were mixed.
&gt;

I think this is the best we have in terms of public results:
  https://arxiv.org/abs/1801.02265

&gt;&gt; 2) From what I understand you are also hoping to use WTF-PAD to protect
&gt;&gt;    against circuit fingerprinting and not just website
&gt;&gt;    fingerprinting. They told me that while this might be plausible,
&gt;&gt;    there is no current research on how well it can achieve that.  Are we
&gt;&gt;    hoping to do that? And what research remains here? How can I help?
&gt;&gt;    Which parts of the Tor circuit protocol are we hoping to hide?
&gt;
&gt; I am designing WTF-PAD to be a framework for deploying padding against
&gt; arbitrary traffic analysis attacks. It is meant to allow us to define
&gt; histograms on the fly (in the Tor consensus) as these are studied. The
&gt; fact that they have not yet been studied is not super relevant to
&gt; deploying the framework for it now.
&gt;

ACK.

What other traffic analysis attacks are we looking at addressing here?

I'm thinking of stuff like "circuit fingerprinting of onion services",
but I wonder if histograms and random sampling is too crude to actually
be able to help against sophisticated attacks. I don't have a suggestion
for something better currently.

On that topic, is it decided whether the adaptive padding of WTF-PAD
will also happen during circuit construction, or only after that?

&gt;&gt; 3) Marc and Mohsen suggested using application-layer defences because
&gt;&gt;    the application-layer has much better view of the actual structures
&gt;&gt;    that are sent on the wire, instead of the black box view that the
&gt;&gt;    network layer has.
&gt;&gt; 
&gt;&gt;    In particular they were mainly concerned about onion services
&gt;&gt;    fingerprinting because they are part of a restricted closed world,
&gt;&gt;    whereas they were less concerned about the entire internet because of
&gt;&gt;    its vast size.
&gt;&gt; 
&gt;&gt;    They suggested that we could investigate using the service-side
&gt;&gt;    "alpaca" library for onion services (e.g. as part of securedrop?)
&gt;&gt;    which should resolve the most pressing concern of HS identification.
&gt;
&gt; I mean yeah application-layer defenses are useful for website traffic
&gt; fingerprinting, but that is a very narrow slice of the traffic analysis
&gt; problems that I want this framework to solve.
&gt;
&gt; WTF-PAD also doesn't rule out hidden service operators using alpaca,
&gt; either. 
&gt;

Agreed.

&gt;&gt; 4) They also told me of research by Tobias Pulls which eliminates the
&gt;&gt;    needs for histograms in WTF-PAD and instead it samples from the
&gt;&gt;    probability distribution directly. They think that this can simplify
&gt;&gt;    things somewhat. Any thoughts on this?
&gt;
&gt; Yes this is actually exactly what I want to do with the next iteration
&gt; of WTF-PAD! The question is what form/model to use for these probability
&gt; distributions. Right now we're encoding inter-burst and inter-packet
&gt; timings with some weird geometric distribution determining how long
&gt; these bursts should go on for, when it might be more natural to encode
&gt; and sample from length-based distributions/histograms.
&gt;
&gt; (Histograms vs distribution is not the problem -- its what they encode
&gt; and how they encode it that matters).
&gt;
&gt; I don't see this paper on Tobias's website. Is it up anywhere yet?
&gt;  

Hmm. Looking at the README of wtfpad (see the APE section), I think this
blog post is the best resource we have on this:
     https://www.cs.kau.se/pulls/hot/thebasketcase-ape/

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180729160811</emailId><senderName>Tobias Pulls</senderName><senderEmail>tobias.pulls@kau.se</senderEmail><timestampReceived>2018-07-29 16:08:11-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

On 29/07/18 15:42, George Kadianakis wrote:
&gt;&gt;&gt; 4) They also told me of research by Tobias Pulls which eliminates the
&gt;&gt;&gt;    needs for histograms in WTF-PAD and instead it samples from the
&gt;&gt;&gt;    probability distribution directly. They think that this can simplify
&gt;&gt;&gt;    things somewhat. Any thoughts on this?
&gt;&gt; Yes this is actually exactly what I want to do with the next iteration
&gt;&gt; of WTF-PAD! The question is what form/model to use for these probability
&gt;&gt; distributions. Right now we're encoding inter-burst and inter-packet
&gt;&gt; timings with some weird geometric distribution determining how long
&gt;&gt; these bursts should go on for, when it might be more natural to encode
&gt;&gt; and sample from length-based distributions/histograms.
&gt;&gt;
&gt;&gt; (Histograms vs distribution is not the problem -- its what they encode
&gt;&gt; and how they encode it that matters).
&gt;&gt;
&gt;&gt; I don't see this paper on Tobias's website. Is it up anywhere yet?
&gt;&gt;  
&gt; Hmm. Looking at the README of wtfpad (see the APE section), I think this
&gt; blog post is the best resource we have on this:
&gt;      https://www.cs.kau.se/pulls/hot/thebasketcase-ape/

Hi George and Mike,

You found the main writeup of the hasty work I did in this direction a
while back, also some comments in the source [0]. Unfortunately my
funding took me in other directions and I didn't want to publish any
paper without spending more time on it. As written on the blog post it
looks like a promising direction, but please also note that the attack
implementation of Wa-kNN used has some rough edges for example when it
comes to time-based features (so robustness of the naive distributions
when moving around the PT server far from a given). If someone wants to
collaborate on this I'd be more than happy to contribute, got funding to
work on Tor-related things again starting August.

Best,
Tobias

[0]: https://github.com/pylls/basket2/blob/master/padding_ape.go
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180802202621</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-08-02 20:26:21-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

[Attachment #2 (multipart/signed)]


Tobias Pulls:
&gt; On 29/07/18 15:42, George Kadianakis wrote:
&gt; &gt;&gt;&gt; 4) They also told me of research by Tobias Pulls which eliminates the
&gt; &gt;&gt;&gt;    needs for histograms in WTF-PAD and instead it samples from the
&gt; &gt;&gt;&gt;    probability distribution directly. They think that this can simplify
&gt; &gt;&gt;&gt;    things somewhat. Any thoughts on this?
&gt; &gt;&gt; Yes this is actually exactly what I want to do with the next iteration
&gt; &gt;&gt; of WTF-PAD! The question is what form/model to use for these probability
&gt; &gt;&gt; distributions. Right now we're encoding inter-burst and inter-packet
&gt; &gt;&gt; timings with some weird geometric distribution determining how long
&gt; &gt;&gt; these bursts should go on for, when it might be more natural to encode
&gt; &gt;&gt; and sample from length-based distributions/histograms.
&gt; &gt;&gt;
&gt; &gt;&gt; (Histograms vs distribution is not the problem -- its what they encode
&gt; &gt;&gt; and how they encode it that matters).
&gt; &gt;&gt;
&gt; &gt;&gt; I don't see this paper on Tobias's website. Is it up anywhere yet?
&gt; &gt;&gt;  
&gt; &gt; Hmm. Looking at the README of wtfpad (see the APE section), I think this
&gt; &gt; blog post is the best resource we have on this:
&gt; &gt;      https://www.cs.kau.se/pulls/hot/thebasketcase-ape/
&gt; 
&gt; Hi George and Mike,
&gt; 
&gt; You found the main writeup of the hasty work I did in this direction a
&gt; while back, also some comments in the source [0]. Unfortunately my
&gt; funding took me in other directions and I didn't want to publish any
&gt; paper without spending more time on it. As written on the blog post it
&gt; looks like a promising direction, but please also note that the attack
&gt; implementation of Wa-kNN used has some rough edges for example when it
&gt; comes to time-based features (so robustness of the naive distributions
&gt; when moving around the PT server far from a given). If someone wants to
&gt; collaborate on this I'd be more than happy to contribute, got funding to
&gt; work on Tor-related things again starting August.

This is great! Sorry it took me so long to reply. I've been deep in it
thinking about related traffic analysis issues with onion services.

I'm very much interested in this direction. This is the post, right:
https://www.cs.kau.se/pulls/hot/thebasketcase-ape/

Did you handle deplenishing the distributions when normal traffic is
transmitted? Counting traffic that fits the target distribution as
"already sent padding" (and thus sending padding less overall traffic in
that case) is a key piece of WTF-PAD that allows it to have better
goodput. This is in fact why the original e2e defense was called
"Adaptive Padding". Because its padding distributions adapt to observed
traffic.

If we could alter the distribution in this same way, it may be the a
good way to go. However, histograms tend to be easier to do this with,
and they also encode distributions (just perhaps more tediously and
verbosely).

One of the other things I want to try, that may overlap, is changing the
type of information the distribution/histogram encodes. Inter-packet and
inter-burst delay (encoded as two separate states in the state machines)
is perhaps not as optimal or useful or easy to specify/optimize as
something more naturally resembling web traffic, such as a distribution
of request sizes and object sizes, and some way to simulate concurrent
fetch (selection of overlap) of these object sizes, and subtract these
objects-size instances from the distribution when we see them.

What do you think about that? Does that make sense?

Do you think we should try to do this as a parameterized distribution,
or as a histogram?

Are you interested in attempting to implement both/either?

&gt; [0]: https://github.com/pylls/basket2/blob/master/padding_ape.go

Ooh nice! This is done as a PT implementation. 

You might like:
https://github.com/mikeperry-tor/vanguards/blob/master/README_SECURITY.md

In it, I recommend obfs4 with iat-mode=2 because it does some limited
traffic packet size and timing obfuscation. Should we consider
recommending basket2 also? Is anyone running bridges with it? Probably
not, I guess :/.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180803122653</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-08-03 12:26:53-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 08/02/2018 08:26 PM, Mike Perry wrote:
&gt; Should we consider recommending basket2 also?

No.

&gt; Is anyone running bridges with it? Probably not, I guess :/.

No one should be, it is incomplete, buggy, and needs a re-design.

As a side note, I question the utility of a PT that has the AGPL3
network interaction requirement, though there is an exception for
bridges distributed via BridgeDB and those shipped with Tor Browser.

Regards,

--=20
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180413015053</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-04-13 01:50:53-0400</timestampReceived><subject>Re: [tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

[Attachment #2 (multipart/alternative)]


I'm happy to run a sbws alongside my torflow. It will let us compare bw
numbers apples to apples too.  My only difficulty is being unable to spend
significant time to diagnose why it doesn't work, if it doesn't work.

If it's at the point I should give it a shot, point me at some instructions
&gt; )

-tom

On Thu, Apr 12, 2018, 7:38 PM Matt Traudt &lt;pastly@torproject.org&gt; wrote:

&gt; See below for the pad notes. Next meeting is scheduled 19 April 2018 at
&gt; 2200 UTC in #tor-meeting. (This one was held in #tor-dev, but we should
&gt; use meetbot).
&gt; 
&gt; -------------
&gt; 
&gt; 
&gt; Simple Bandwidth Scanner meeting 12 April 2018
&gt; 
&gt; #### Updates/Status messages ####
&gt; 
&gt; pastly:
&gt; What's on my plate? &lt;- doesn't have to be all in your plate :P
&gt; - Test coverage getting closer to 100%
&gt; - Immediate future: switch to standard python logging module, which
&gt; is quite good
&gt; - Improving documentation
&gt; - Checking results against torflow
&gt; - Monitor CPU of sbws client/server
&gt; - +1 on considering asyncio
&gt; - See how chutney generates random strings
&gt; - Run testnet authority
&gt; - Reach out to current auths about running sbws/torflow and adding
&gt; me as an auth
&gt; 
&gt; juga:
&gt; - open/close PRs/issues about things to improve in doc, refactor
&gt; code, etc..., but not changing functionality
&gt; - re. doc:
&gt; - thought to update sbws spec (or create other) to doc
&gt; differences with Torflow, not sure it's useful
&gt; - i'd document further some of the classes/functions (as
&gt; measure_relay)
&gt; - code doc vs spec (see below)
&gt; - find box to run other sbws, bwauth also in testnet?
&gt; 
&gt; ## Topic: what is still missing for milestone 1? (aka 1st release, v1.0.0)
&gt; - could we create all tickets needed to achive it?
&gt; - maybe previous list is enough?
&gt; Missing:
&gt; - A consensus parameter stating the scaling factor
&gt; - sbws config option to set fallback if no consensus param
&gt; - `sbws generate` code to use the consensus param
&gt; 
&gt; -
&gt; 
&gt; https://stem.torproject.org/api/descriptor/networkstatus.html#stem.descriptor.networkstatus.NetworkStatusDocumentV3
&gt;  
&gt; - Correlation coefficient on comparision graphs
&gt; 
&gt; 
&gt; 
&gt; 
&gt; ## Topic: comparing to torflow
&gt; tah
&gt; - Can we make the test sbws deployment a little bigger?
&gt; - What else needs to be compared?
&gt; 
&gt; teor: actually running it in a voting network, to check the feedback
&gt; loop (if any) the scaling
&gt; 
&gt; - Conclusions after comparing?
&gt; - what we could think to change/improve after comparing?
&gt; 
&gt; Graphs pastly can explain:
&gt; - sbws vs moria, sorted by sbws:
&gt; https://share.riseup.net/#-W_zqcv-08AX4SnOgTatUw
&gt; - sorted by moria: https://share.riseup.net/#URXp6NccZHEhOPFJQcfO4w
&gt; 
&gt; 
&gt; teor: the correlation seems good here
&gt; If we're going to use these charts to compare, please compare two
&gt; existing bwauths
&gt; See: https://share.riseup.net/#lPGcIrgHp3ftnvTHUKqOKg (but ignore the
&gt; sbws-scaled line, it's wrong wrong wrong)
&gt; 
&gt; 
&gt; ## Topic: convincing people to run sbws
&gt; juga: maybe something to do when 1st sbws release?
&gt; pastly: yes, probalby. unless we need to convince testnet people &lt;- ah,
&gt; right i was thinking on the Tor net
&gt; 
&gt; 
&gt; ## Topic: status of open sourcing sbws
&gt; - No real update. Time is still passing.
&gt; 
&gt; ## Topic: specifications
&gt; 
&gt; torflow/BwAuthority:
&gt; 
&gt; https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt
&gt;  ,
&gt; https://ohmygodel.com/publications/peerflow-popets2017.pdf has a section
&gt; that also makes a nice summary
&gt; sbws:
&gt; 
&gt; https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst
&gt;  (ask Pastly for access)
&gt; bwscanner: no spec, but reading
&gt; 
&gt; https://github.com/TheTorProject/bwscanner/blob/develop/bwscanner/circuit.py#L45
&gt; it looks like a Torflow clone &lt;- almost :)
&gt; 
&gt; We need a spec for the v3bw file that tor reads (in torspec/dir-spec.txt)
&gt; We need a spec for bwauth migration, including acceptance criteria for
&gt; new bwauth implementations
&gt; Scanners should have their own detailed design documents
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;I'm happy to run a sbws alongside my torflow. It will let us \
compare bw numbers apples to apples too.   My only difficulty is being unable to \
spend significant time to diagnose why it doesn't work, if it doesn't \
work.&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;If it's at the point I should give \
it a shot, point me at some instructions :)&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;-tom&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu, Apr \
12, 2018, 7:38 PM Matt Traudt &lt;&lt;a \
href="mailto:pastly@torproject.org"&gt;pastly@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;See below for the pad notes. Next \
meeting is scheduled 19 April 2018 at&lt;br&gt; 2200 UTC in #tor-meeting. (This one was \
held in #tor-dev, but we should&lt;br&gt; use meetbot).&lt;br&gt;
&lt;br&gt;
-------------&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Simple Bandwidth Scanner meeting 12 April 2018&lt;br&gt;
&lt;br&gt;
#### Updates/Status messages ####&lt;br&gt;
&lt;br&gt;
pastly:&lt;br&gt;
      What's on my plate? &lt;- doesn't have to be all in your plate :P&lt;br&gt;
      - Test coverage getting closer to 100%&lt;br&gt;
      - Immediate future: switch to standard python logging module, which&lt;br&gt;
is quite good&lt;br&gt;
      - Improving documentation&lt;br&gt;
      - Checking results against torflow&lt;br&gt;
      - Monitor CPU of sbws client/server&lt;br&gt;
      - +1 on considering asyncio&lt;br&gt;
      - See how chutney generates random strings&lt;br&gt;
      - Run testnet authority&lt;br&gt;
      - Reach out to current auths about running sbws/torflow and adding&lt;br&gt;
me as an auth&lt;br&gt;
&lt;br&gt;
juga:&lt;br&gt;
      - open/close PRs/issues about things to improve in doc, refactor&lt;br&gt;
code, etc..., but not changing functionality&lt;br&gt;
      - re. doc:&lt;br&gt;
            - thought to update sbws spec (or create other) to doc&lt;br&gt;
differences with Torflow, not sure it's useful&lt;br&gt;
            - i'd document further some of the classes/functions (as&lt;br&gt;
measure_relay)&lt;br&gt;
            - code doc vs spec (see below)&lt;br&gt;
      - find box to run other sbws, bwauth also in testnet?&lt;br&gt;
&lt;br&gt;
## Topic: what is still missing for milestone 1? (aka 1st release, v1.0.0)&lt;br&gt;
- could we create all tickets needed to achive it?&lt;br&gt;
- maybe previous list is enough?&lt;br&gt;
Missing:&lt;br&gt;
- A consensus parameter stating the scaling factor&lt;br&gt;
- sbws config option to set fallback if no consensus param&lt;br&gt;
- `sbws generate` code to use the consensus param&lt;br&gt;
&lt;br&gt;
      -&lt;br&gt;
&lt;a href="https://stem.torproject.org/api/descriptor/networkstatus.html#stem.descriptor.networkstatus.NetworkStatusDocumentV3" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://stem.torproject.org/api/descriptor/networkstatus.html#stem.descriptor.networkstatus.NetworkStatusDocumentV3&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
- Correlation coefficient on comparision graphs&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
## Topic: comparing to torflow&lt;br&gt;
tah&lt;br&gt;
- Can we make the test sbws deployment a little bigger?&lt;br&gt;
- What else needs to be compared?&lt;br&gt;
&lt;br&gt;
teor: actually running it in a voting network, to check the feedback&lt;br&gt;
loop (if any) the scaling&lt;br&gt;
&lt;br&gt;
- Conclusions after comparing?&lt;br&gt;
- what we could think to change/improve after comparing?&lt;br&gt;
&lt;br&gt;
Graphs pastly can explain:&lt;br&gt;
      - sbws vs moria, sorted by sbws:&lt;br&gt;
&lt;a href="https://share.riseup.net/#-W_zqcv-08AX4SnOgTatUw" rel="noreferrer \
                noreferrer" \
                target="_blank"&gt;https://share.riseup.net/#-W_zqcv-08AX4SnOgTatUw&lt;/a&gt;&lt;br&gt;
                
      - sorted by moria: &lt;a href="https://share.riseup.net/#URXp6NccZHEhOPFJQcfO4w" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://share.riseup.net/#URXp6NccZHEhOPFJQcfO4w&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
teor: the correlation seems good here&lt;br&gt;
If we're going to use these charts to compare, please compare two&lt;br&gt;
existing bwauths&lt;br&gt;
See: &lt;a href="https://share.riseup.net/#lPGcIrgHp3ftnvTHUKqOKg" rel="noreferrer \
noreferrer" target="_blank"&gt;https://share.riseup.net/#lPGcIrgHp3ftnvTHUKqOKg&lt;/a&gt; (but \
ignore the&lt;br&gt; sbws-scaled line, it's wrong wrong wrong)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
## Topic: convincing people to run sbws&lt;br&gt;
juga: maybe something to do when 1st sbws release?&lt;br&gt;
pastly: yes, probalby. unless we need to convince testnet people &lt;- ah,&lt;br&gt;
right i was thinking on the Tor net&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
## Topic: status of open sourcing sbws&lt;br&gt;
- No real update. Time is still passing.&lt;br&gt;
&lt;br&gt;
## Topic: specifications&lt;br&gt;
&lt;br&gt;
torflow/BwAuthority:&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt&lt;/a&gt;,&lt;br&gt;
 &lt;a href="https://ohmygodel.com/publications/peerflow-popets2017.pdf" rel="noreferrer \
noreferrer" target="_blank"&gt;https://ohmygodel.com/publications/peerflow-popets2017.pdf&lt;/a&gt; \
has a section&lt;br&gt; that also makes a nice summary&lt;br&gt;
sbws:&lt;br&gt;
&lt;a href="https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst&lt;/a&gt;&lt;br&gt;
 (ask Pastly for access)&lt;br&gt;
bwscanner: no spec, but reading&lt;br&gt;
&lt;a href="https://github.com/TheTorProject/bwscanner/blob/develop/bwscanner/circuit.py#L45" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://github.com/TheTorProject/bwscanner/blob/develop/bwscanner/circuit.py#L45&lt;/a&gt;&lt;br&gt;
 it looks like a Torflow clone &lt;- almost :)&lt;br&gt;
&lt;br&gt;
We need a spec for the v3bw file that tor reads (in torspec/dir-spec.txt)&lt;br&gt;
We need a spec for bwauth migration, including acceptance criteria for&lt;br&gt;
new bwauth implementations&lt;br&gt;
Scanners should have their own detailed design documents&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180413121601</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-13 12:16:01-0400</timestampReceived><subject>Re: [tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

Thanks Tom!

There's a few more things that I think we need to figure out before we
take you up on this offer.

I'll keep you in mind though, because I think having sbws and torflow
running side by side is something that should happen very soon.

Stay tuned! And thanks for your help obtaining torflow data recently.

Matt

On 4/12/18 21:50, Tom Ritter wrote:
&gt; I'm happy to run a sbws alongside my torflow. It will let us compare bw
&gt; numbers apples to apples too.   My only difficulty is being unable to
&gt; spend significant time to diagnose why it doesn't work, if it doesn't work.
&gt; 
&gt; If it's at the point I should give it a shot, point me at some
&gt; instructions :)
&gt; 
&gt; -tom
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180413162632</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-04-13 16:26:32-0400</timestampReceived><subject>Re: [tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

&gt; https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst
&gt; (ask Pastly for access)

Hi Matt, why is this repo read restricted? I was idly curious to see
the code of sbws and was surprised it's effectively closed source.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180413163455</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-13 16:34:55-0400</timestampReceived><subject>Re: [tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

On 4/13/18 12:26, Damian Johnson wrote:
&gt;&gt; https://github.com/pastly/simple-bw-scanner/blob/master/docs/source/specification.rst
&gt;&gt; (ask Pastly for access)
&gt; 
&gt; Hi Matt, why is this repo read restricted? I was idly curious to see
&gt; the code of sbws and was surprised it's effectively closed source.

Good question!

While I didn't necessarily work on sbws while at my place of work, I
couldn't rationalize that it is unrelated to my day job. Thus I need to
get permission from my employer in order to release sbws.

I've already submitted that paperwork and expect to get it back in about
2 weeks.

It is licensed under CC0 and is therefore in the public domain (or will
be... depending on how you want to interpret the situation).

Fun side note: little-t-tor itself had to go through the same process.

Sorry for the inconvenience.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180307193025</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-07 19:30:25-0400</timestampReceived><subject>Re: [tor-dev] Consensus-health single-relay data</subject><body>


&gt; On 7 Mar 2018, at 18:22, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; teor suggested the other day that it'd be really useful to be able to
&gt; see the vote data for a single relay; since the _entire_ detailed page
&gt; is huge and unwieldy.
&gt; 
&gt; I've been pondering how I could support this without complicating the
&gt; server, which results in a few constraints:
&gt; a) I really don't want to create one file per-relay
&gt; b) I really don't want to make any server-side logic, I'd like to keep
&gt; it as static HTML and client-side javascript.  (With the client-side
&gt; javascript optional for most of the information.)
&gt; 
&gt; 
&gt; I think I can make something work using AJAX and Range requests
&gt; though. Before I fly forward with that though, I wanted to understand
&gt; a bit more about the use cases where one wants to see per-relay vote
&gt; data.
&gt; 
&gt; The biggest question I have for you teor (and anyone else who wants to
&gt; chime in) is how do you know what relay you want the information for?
&gt; Do you know the fingerprint?

I know whatever the relay operator supplies.
Usually, that's a fingerprint.
Sometimes, it's just a name or part of a name.

But most of the time, I have looked up the relay on Relay Search
before using Consensus Health. Or I could look it up, to avoid having
my browser grind for a minute downloading the large consensus
health page.

&gt; If so, I could try adding a text box at the bottom of the index page
&gt; saying "Supply a fingerprint, and I will populate vote data for this
&gt; relay inline".

That would work for me.
And I think it would make consensus health more usable for
(some) relay operators.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180307214300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-03-07 21:43:00-0400</timestampReceived><subject>Re: [tor-dev] Consensus-health single-relay data</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Tom Ritter:
&gt; teor suggested the other day that it'd be really useful to be able to
&gt; see the vote data for a single relay; 

great to see this is being worked on - thanks for that!
Previously we also mentioned this feature in the context of onionoo,
but processing votes is not something onionoo does currently (and it is a lot
more data to take).


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180309192849</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-03-09 19:28:49-0400</timestampReceived><subject>Re: [tor-dev] Consensus-health single-relay data</subject><body>

Please test http://utternoncesense.com/ : check the end of the page.
(Note this is a static link, I'm not updating it every hour).

I have tested it on Tor Browser and High Security Slider, seems to
work for me, but I want feedback on the UX and for bugs. Obviously
this doesn't work with js disabled, but it should at least tell you
what the issue is.

---

Under the covers while generating the detailed page, I also generate a
list of indexes for each relay. I lazy-load that list at the end of
the index page load (about 700kb). When you ask for a fingerprint it
makes a range request using that index. Even trying to be as speedy as
I could be, the lazy-load is quite fast. I'm hopeful the use case of
trying to paste a fingerprint in as fast as one can is acceptable and
speedy, so give that a shot.

I almost was able to do with with no apache config, but it turns out
that the HTTP spec is ambiguous about how to handle Range requests on
gzipped content, so Apache just doesn't. '    SetEnvIf
X-Requested-With XMLHttpRequest no-gzip' will fix it for this use
case.

In the future I expect to be able to extend this to inline-load
historical data from the prior consensus when you click the &lt;- button;
but I have to give some more thought to how I want to display that.
(And it's more complicated in general.)

-tom

On 7 March 2018 at 15:43, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;
&gt;
&gt; Tom Ritter:
&gt;&gt; teor suggested the other day that it'd be really useful to be able to
&gt;&gt; see the vote data for a single relay;
&gt;
&gt; great to see this is being worked on - thanks for that!
&gt; Previously we also mentioned this feature in the context of onionoo,
&gt; but processing votes is not something onionoo does currently (and it is a lot
&gt; more data to take).
&gt;
&gt;
&gt; --
&gt; https://mastodon.social/@nusenu
&gt; twitter: @nusenu_
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180203081022</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-02-03 08:10:22-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

On 2018-02-03 01:32, nusenu wrote:
&gt; thanks for looking into it

Looks like the CollecTor host is down, along with several other hosts. I
sent mail to the admins.

All the best,
Karsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180203115300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-03 11:53:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; On 2018-02-03 01:32, nusenu wrote:
&gt;&gt; thanks for looking into it
&gt; 
&gt; Looks like the CollecTor host is down, along with several other hosts. I
&gt; sent mail to the admins.

Does that imply that we are actually loosing raw CollecTor data until it comes back?

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180203121059</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-02-03 12:10:59-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-02-03 12:53, nusenu wrote:
&gt; 
&gt; 
&gt; Karsten Loesing:
&gt;&gt; On 2018-02-03 01:32, nusenu wrote:
&gt;&gt;&gt; thanks for looking into it
&gt;&gt;
&gt;&gt; Looks like the CollecTor host is down, along with several other hosts. I
&gt;&gt; sent mail to the admins.
&gt; 
&gt; Does that imply that we are actually loosing raw CollecTor data until it comes back?

No, we still have the backup CollecTor host that downloads Tor
descriptors and that the primary CollecTor host will sync from once it
comes back.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180203121200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-03 12:12:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Karsten Loesing:
&gt; On 2018-02-03 12:53, nusenu wrote:
&gt;&gt;
&gt;&gt;
&gt;&gt; Karsten Loesing:
&gt;&gt;&gt; On 2018-02-03 01:32, nusenu wrote:
&gt;&gt;&gt;&gt; thanks for looking into it
&gt;&gt;&gt;
&gt;&gt;&gt; Looks like the CollecTor host is down, along with several other hosts. I
&gt;&gt;&gt; sent mail to the admins.
&gt;&gt;
&gt;&gt; Does that imply that we are actually loosing raw CollecTor data until it comes back?
&gt; 
&gt; No, we still have the backup CollecTor host that downloads Tor
&gt; descriptors and that the primary CollecTor host will sync from once it
&gt; comes back.

great!

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180701015552</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-07-01 01:55:52-0400</timestampReceived><subject>Re: [tor-dev] man: "IPv6 addresses should be wrapped in square brackets"</subject><body>

On Sun, Jul 01, 2018 at 10:03:50AM +1000, teor wrote:
&gt; When an option only takes an IP address, it does not make a difference.
&gt; (As long as the underlying code uses tor_addr_parse().)

BTW there's currently a bug relating to this: if an address starts with
'[', tor_addr_parse strips the final byte whether or not it is ']'.
https://bugs.torproject.org/23082
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180702230800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-02 23:08:00-0400</timestampReceived><subject>Re: [tor-dev] documenting reload vs. restart requirements per torrc option</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; 
&gt;&gt; On 3 Jul 2018, at 05:52, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;&gt;
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; I like unbound's documentation with this regards, for example they say
&gt;&gt; in their man page:
&gt;&gt;
&gt;&gt;&gt; The  interfaces  are not changed on a reload (kill -HUP)
&gt;&gt;&gt;             but only on restart.
&gt;&gt;
&gt;&gt; Could we add such information to every torrc option in the manual?
&gt; 
&gt; torrc options can be changed by a HUP by default.
&gt; There are about 20 torrc options that are documented as exceptions.
&gt; Search the man page for "while tor is running."

thanks that hint is very useful

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180702235409</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-07-02 23:54:09-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>

Iain Learmonth &lt;irl@torproject.org&gt; writes:

&gt; I will look again once this is resolved.

I believe 18.0.2 fixes this (also reported by Brian Warner for
magic-wormhole). Sorry about that!

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180702195200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-02 19:52:00-0400</timestampReceived><subject>[tor-dev] documenting reload vs. restart requirements per torrc option</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I like unbound's documentation with this regards, for example they say
in their man page:

&gt; The  interfaces  are not changed on a reload (kill -HUP)
&gt;              but only on restart.


Could we add such information to every torrc option in the manual?


background: 

In relayor I need to reload/restart tor daemons on configuration changes
currently I blindly assume reload is fine, because in most cases it is
but it comes with the prices of accepting a certain level of error
since not all configuration changes can be applied by reloads.
To fix this I'd need to have authoritative information about
what changes require restarts vs. reloads.



[1] https://unbound.net/documentation/unbound.conf.html

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180701150926</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-01 15:09:26-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi meejah,

On 30/06/18 06:11, meejah wrote:
&gt; Unfortunately there was a problem when parsing onion services on
&gt; Python2, which is fixed by txtorcon 18.0.1

Is it possible for you to make a GitHub "release" for 18.0.1? For the
Debian packaging I fetch the signatures from here and verify them, which
doesn't work if you've only tagged the release.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180701153033</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-07-01 15:30:33-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>


What's a github release?
I think you mean a commit which is tagged and I'm
pretty sure meejah tags release commits.

On Sun, Jul 01, 2018 at 04:09:26PM +0100, Iain Learmonth wrote:
&gt; Hi meejah,
&gt; 
&gt; On 30/06/18 06:11, meejah wrote:
&gt; &gt; Unfortunately there was a problem when parsing onion services on
&gt; &gt; Python2, which is fixed by txtorcon 18.0.1
&gt; 
&gt; Is it possible for you to make a GitHub "release" for 18.0.1? For the
&gt; Debian packaging I fetch the signatures from here and verify them, which
&gt; doesn't work if you've only tagged the release.
&gt; 
&gt; Thanks,
&gt; Iain.
&gt; 




&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180701160441</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-01 16:04:41-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 01/07/18 16:30, dawuud wrote:
&gt; What's a github release?
&gt; I think you mean a commit which is tagged and I'm
&gt; pretty sure meejah tags release commits.

I mean what GitHub calls a "release" which is different to a tag. It
allows me to base the Debian packaging on a signed tarball from meejah
as opposed to me signing a tarball to say "I checked this matches up
with meejah's signed commit, trust me".

See:
https://github.com/meejah/txtorcon/releases

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180702053842</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-07-02 05:38:42-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>

Iain Learmonth &lt;irl@torproject.org&gt; writes:

&gt; Is it possible for you to make a GitHub "release" for 18.0.1? For the
&gt; Debian packaging I fetch the signatures from here and verify them, which
&gt; doesn't work if you've only tagged the release.

Ah, sorry yes I missed this step. The GitHub release is updated.

thanks,
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180702130955</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-02 13:09:55-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi meejah,

On 02/07/18 06:38, meejah wrote:
&gt; Ah, sorry yes I missed this step. The GitHub release is updated.

Thanks!

I've just looked at updating the Debian packaging with this but
unfortunately I'm blocked by Debian#902766 which appears to be a Python
3.7 issue (async is now a reserved keyword).

I will look again once this is resolved.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180702235353</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-07-02 23:53:53-0400</timestampReceived><subject>Re: [tor-dev] txtorcon 18.0.1</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Python3.4 doesn't support async-def or await, but the guards being
used only accounted for Python2 -- this is fixed by txtorcon 18.0.2

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.2
   https://github.com/meejah/txtorcon/releases/tag/v18.0.2

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.2.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.2.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.2.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.2.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
ce50fdd00abb8b490b72809a2c664684f67f3c9467f392642d36f58309395a87  \
dist/txtorcon-18.0.2.tar.gz \
cb1a681e424744c50eefb02b7b777cce80a505da1e89ee4886fe62013afaf858  \
dist/txtorcon-18.0.2-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAls6cqwRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaaeltQf/QoBXZhLudXUVlvAGCyxcLBuz4IEWarW6
NANpFpO4xrmi192o50RcKhplG16j5ooBRinFq52eLosPkkEQibl8BQYQYilO3Qup
wTRFRDJKlz390rzCUhokRs+VcUSrbysFOfoUgXcOLJXU1WRLkLqJAAlOS/+v9iHy
6fH2Yq/OH/f982wSKLaJ+dfIInJAGEdQbqcVaCsCHRhViC82ZDbSmHBGBDG4LKXX
FEfXXpwUkDTI4qTyWuW9WkNKwRDevthCKZwsc5UGm1wkuRY8/LRu2FJxmeCUjKE2
R914p59xgoIH7qxpxUZmI9aW2vPEdG/c02uH4Ry72Ndgqtd422Bg4w==
=qzyc
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180702225727</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-02 22:57:27-0400</timestampReceived><subject>Re: [tor-dev] documenting reload vs. restart requirements per torrc option</subject><body>


&gt; On 3 Jul 2018, at 05:52, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; I like unbound's documentation with this regards, for example they say
&gt; in their man page:
&gt; 
&gt;&gt; The  interfaces  are not changed on a reload (kill -HUP)
&gt;&gt;             but only on restart.
&gt; 
&gt; Could we add such information to every torrc option in the manual?

torrc options can be changed by a HUP by default.
There are about 20 torrc options that are documented as exceptions.
Search the man page for "while tor is running."
(We reviewed and updated this documentation in 0.3.0.)

NoExec has a slightly different format, it says:
"Once this option has been set to 1, it cannot be set back to 0 without
restarting Tor."

If it would help automated searches, we can change it to:
"Once this option has been set to 1, it cannot be set back to 0 while Tor
is running."

&gt; background: 
&gt; 
&gt; In relayor I need to reload/restart tor daemons on configuration changes
&gt; currently I blindly assume reload is fine, because in most cases it is
&gt; but it comes with the prices of accepting a certain level of error
&gt; since not all configuration changes can be applied by reloads.
&gt; To fix this I'd need to have authoritative information about
&gt; what changes require restarts vs. reloads.

If you find options that can't be changed while tor is running, but aren't
documented, please feel free to submit a patch.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181026203432</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2018-10-26 20:34:32-0400</timestampReceived><subject>[tor-dev] #3600 tech doc</subject><body>

Hey y'all,

For the past little while I've been working on a technical overview doc for #3600 \
(Prevent redirects from transmitting+storing cookies+identifiers) detailing the \
problems, scenarios and possible solutions.  Please take a look and feel free to \
comment, edit or add!

Link: https://storm.torproject.org/grain/X4nhdNqR9fGRc7sgTefFkg/

best,
-Richard
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181204180711</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-12-04 18:07:11-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 26/11/2018 21:46, Nick Mathewson wrote:
&gt; On Wed, Nov 21, 2018 at 5:10 PM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; On 20/11/2018 19:28, Nick Mathewson wrote:
&gt;&gt;&gt; Hi!  I don't know if this will be useful or not, but I'm wondering if
&gt;&gt;&gt; you've seen this ticket:
&gt;&gt;&gt;   https://trac.torproject.org/projects/tor/ticket/28335
&gt;&gt;&gt;
&gt;&gt;&gt; The goal of this branch is to create a "dormant mode" where Tor does
&gt;&gt;&gt; not run any but the most delay- and rescheduling-tolerant of its
&gt;&gt;&gt; periodic events.  Tor enters this mode if a controller tells it to, or
&gt;&gt;&gt; if (as a client) it passes long enough without user activity.  When in
&gt;&gt;&gt; dormant mode, it doesn't disconnect from the network, and it will wake
&gt;&gt;&gt; up again if the controller tells it to, or it receives a new client
&gt;&gt;&gt; connection.
&gt;&gt;&gt;
&gt;&gt;&gt; Would this be at all helpful for any of this?
&gt;&gt;
&gt;&gt; This looks really useful for mobile clients, thank you!
&gt; 
&gt; Glad to hear it -- it's now merged into Tor's master branch.

Fantastic.

&gt;&gt; The comments on the pull request
&gt;&gt; (https://github.com/torproject/tor/pull/502) suggest that Tor won't
&gt;&gt; enter dormant mode if it's running a hidden service. Are there any plans
&gt;&gt; to support that in future?
&gt; 
&gt; I want to support this for hidden services.  Here's the ticket to
&gt; track that: https://trac.torproject.org/projects/tor/ticket/28424
&gt; 
&gt; This is going to be harder than the other cases, though, so we decided
&gt; to defer it for now and see if we have time later.

Makes sense. I added some simulation results to the ticket that support
dgoulet's assessment that the descriptor may become unreachable within a
few hours if not republished, due to HSDir churn.

However, even one hour in dormant mode would be a huge improvement over
what we can do now. What are the other blockers for running a hidden
service in dormant mode?

Would it be possible/easier to keep an ordinary client circuit alive in
dormant mode? That would allow us to keep a connection to a mailbox*
while dormant.

Cheers,
Michael

* Briar term for a device connected to power and internet that runs a
hidden service on behalf of the owner's main device.

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181205112625</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-12-05 11:26:25-0400</timestampReceived><subject>Re: [tor-dev] Throughput of each circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 5 Dec 2018, at 16:15, marziyeh latifi &lt;marziyeh.latifi95@gmail.com&gt; wrote:
&gt; 
&gt; I want to count the number of cells that are sent from circuit queue to the output \
&gt; buffer in each relay. How can I do this? Any opinion?

You already asked this question in tor-relays:
https://lists.torproject.org/pipermail/tor-relays/2018-December/016696.html

Continuing on from that reply:

CIRC_BW events are only sent for origin circuits:
https://github.com/torproject/tor/blob/7d8e0cc9abf2a74789e635d2fd4d0e18b8e0d1fe/src/feature/control/control.c#L6082
 An origin circuit starts at the tor instance sending the event.

Why do you want to see the number of cells?

Do you want to count cells on a public relay?
Tor is an anonymity network, so we ask relay operators to protect
user privacy. If you are running a Tor relay on the public network,
please don't collect this information.

If you need to collect this information for research, ask the Tor
research safety board for help:
https://research.torproject.org/safetyboard.html

The research safety board suggests using traffic simulation, rather
than experimenting on real tor users. The chutney and shadow tools
are useful for Tor traffic simulation:
https://gitweb.torproject.org/chutney.git
https://shadow.github.io/

In a simulated Tor network, with TestingTorNetwork 1, you can
use the CELL_STATS event to count cells:
https://github.com/torproject/torspec/blob/master/control-spec.txt#L3041

If you can't use a simulation, use a tool that protects user privacy,
like PrivCount:
https://github.com/privcount/privcount

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 5 Dec 2018, at 16:15, \
marziyeh latifi &lt;&lt;a \
href="mailto:marziyeh.latifi95@gmail.com"&gt;marziyeh.latifi95@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="rtl"&gt;&lt;div \
dir="ltr"&gt;I want to count the number of cells that are sent from circuit queue to the \
output buffer in each relay. How can I do this?&lt;/div&gt;&lt;div dir="ltr"&gt; Any \
opinion?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;You already asked this question in tor-relays:&lt;/span&gt;&lt;div&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-relays/2018-December/016696.html" \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;font \
color="#000000"&gt;https://lists.torproject.org/pipermail/tor-relays/2018-December/016696.html&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Continuing on from that \
reply:&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;CIRC_BW events are only sent for origin circuits:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/torproject/tor/blob/7d8e0cc9abf2a74789e635d2fd4d0e18b8e0d1fe/src/feature/control/control.c#L6082" \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;font \
color="#000000"&gt;https://github.com/torproject/tor/blob/7d8e0cc9abf2a74789e635d2fd4d0e18b8e0d1fe/src/feature/control/control.c#L6082&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;An origin circuit starts at the tor \
instance sending the event.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Why do you want to see the \
number of cells?&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do you want to count cells on a public \
relay?&lt;/div&gt;&lt;div&gt;Tor is an anonymity network, so we ask relay operators to \
protect&lt;/div&gt;&lt;div&gt;user privacy. If you are running a Tor relay on the public \
network,&lt;/div&gt;&lt;div&gt;please don't collect this information.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
you need to collect this information for research, ask the Tor&lt;/div&gt;&lt;div&gt;research \
safety board for help:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://research.torproject.org/safetyboard.html"&gt;https://research.torproject.org/safetyboard.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
research safety board suggests using traffic simulation, rather&lt;/div&gt;&lt;div&gt;than \
experimenting on real tor users. The chutney and shadow tools&lt;/div&gt;&lt;div&gt;are useful \
for Tor traffic simulation:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/chutney.git"&gt;https://gitweb.torproject.org/chutney.git&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://shadow.github.io/"&gt;https://shadow.github.io/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In \
a simulated Tor network, with TestingTorNetwork 1, you can&lt;/div&gt;&lt;div&gt;use the \
CELL_STATS event to count cells:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/torproject/torspec/blob/master/control-spec.txt#L3041"&gt;https: \
//github.com/torproject/torspec/blob/master/control-spec.txt#L3041&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
you can't use a simulation, use a tool that protects user privacy,&lt;/div&gt;&lt;div&gt;like \
PrivCount:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/privcount/privcount"&gt;https://github.com/privcount/privcount&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181206205337</emailId><senderName>Griffin Boyce</senderName><senderEmail>griffin@cryptolab.net</senderEmail><timestampReceived>2018-12-06 20:53:37-0400</timestampReceived><subject>Re: [tor-dev] Scheduled changes to Tor Metrics CSV files in the Performance and the Traffic category</subject><body>

[Attachment #2 (multipart/alternative)]


Thanks for the heads up 👍

On December 6, 2018 3:52:43 PM EST, Karsten Loesing &lt;karsten@torproject.org&gt; wrote:
&gt;Hi,
&gt;
&gt;if you're not pulling CSV files from the Tor Metrics website in an
&gt;automated fashion, you can stop reading now.
&gt;
&gt;We just scheduled some changes to the Tor Metrics CSV files in the
&gt;Performance and the Traffic category:
&gt;
&gt; - December 20, 2018 (scheduled): Remove source parameters and output
&gt;rows with aggregates over all sources from Time to download files over
&gt;Tor, Timeouts and failures of downloading files over Tor, Circuit build
&gt;times, Circuit round-trip latencies graphs.
&gt;
&gt; - December 20, 2018 (scheduled): Remove two graphs Total relay
&gt;bandwidth and Consumed bandwidth by Exit/Guard flag combination, and
&gt;update the data format of the Advertised and consumed bandwidth by
&gt;relay
&gt;flag graph to cover all data previously contained in the first two
&gt;graphs.
&gt;
&gt;For more details, see: https://metrics.torproject.org/stats.html
&gt;
&gt;I'm posting this note here, because some folks might pull these CSV
&gt;files automatically, and they should have at least a two-weeks warning
&gt;to update their scripts.
&gt;
&gt;All the best,
&gt;Karsten

-- 
Transmitted via Minitel -- the New Wave in telephonics! 
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Thanks for the heads up 👍&lt;br&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On December 6, 2018 3:52:43 PM EST, Karsten Loesing \
&lt;karsten@torproject.org&gt; wrote:&lt;blockquote class="gmail_quote" style="margin: \
0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;"&gt; \
&lt;pre class="k9mail"&gt;Hi,&lt;br&gt;&lt;br&gt;if you're not pulling CSV files from the Tor Metrics \
website in an&lt;br&gt;automated fashion, you can stop reading now.&lt;br&gt;&lt;br&gt;We just \
scheduled some changes to the Tor Metrics CSV files in the&lt;br&gt;Performance and the \
Traffic category:&lt;br&gt;&lt;br&gt; - December 20, 2018 (scheduled): Remove source parameters \
and output&lt;br&gt;rows with aggregates over all sources from Time to download files \
over&lt;br&gt;Tor, Timeouts and failures of downloading files over Tor, Circuit \
build&lt;br&gt;times, Circuit round-trip latencies graphs.&lt;br&gt;&lt;br&gt; - December 20, 2018 \
(scheduled): Remove two graphs Total relay&lt;br&gt;bandwidth and Consumed bandwidth by \
Exit/Guard flag combination, and&lt;br&gt;update the data format of the Advertised and \
consumed bandwidth by relay&lt;br&gt;flag graph to cover all data previously contained in \
the first two graphs.&lt;br&gt;&lt;br&gt;For more details, see: &lt;a \
href="https://metrics.torproject.org/stats.html"&gt;https://metrics.torproject.org/stats.html&lt;/a&gt;&lt;br&gt;&lt;br&gt;I'm \
posting this note here, because some folks might pull these CSV&lt;br&gt;files \
automatically, and they should have at least a two-weeks warning&lt;br&gt;to update their \
scripts.&lt;br&gt;&lt;br&gt;All the best,&lt;br&gt;Karsten&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;-- \
&lt;br&gt;Transmitted via Minitel -- the New Wave in telephonics! &lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181207145542</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2018-12-07 14:55:42-0400</timestampReceived><subject>Re: [tor-dev] Easy(?) adaptation of meek-client for ESNI</subject><body>

Nathan of Guardian:
&gt; On Mon, Sep 24, 2018 at 08:23:58PM -0600, David Fifield wrote:
&gt;&gt; What we would need in order for meek to used encrypted SNI would be
&gt;&gt; either:
&gt;&gt;  1) support for encrypted SNI in Go's crypto/tls package; or
&gt;&gt;  2) support for encrypted SNI in the Firefox that ships with Tor
&gt;&gt;     Browser, which meek-client could use through its TLS camouflage
&gt;&gt;     helper support.
&gt;&gt;
&gt;&gt; IMO (2) is less desirable because I'd like to get rid of the TLS
&gt;&gt; camouflage helper support and replace it with a Go-level TLS camouflage
&gt;&gt; library: https://github.com/refraction-networking/utls. The TLS helper
&gt;&gt; works, but its complexity is a pain to deal with and leads to problems
&gt;&gt; like https://bugs.torproject.org/12774 https://bugs.torproject.org/25405.
&gt; 
&gt; I wrote an untested overview of how to adapt meek to use ESNI, using an
&gt; external copy of Firefox Nightly rather than Tor Browser's built-in copy
&gt; of Firefox. Testing this out to see if it works would be a good task for
&gt; someone who wants to get involved with pluggable transports.
&gt; 
&gt; Use ESNI via Firefox HTTPS helper
&gt; https://bugs.torproject.org/28168
&gt; 
&gt; 1. Download Tor Browser and Firefox Nightly.
&gt; 2. Go to about:config in Firefox nightly and set
&gt;      network.trr.mode=3
&gt;      network.trr.uri=https://1.1.1.1/dns-query
&gt;      network.security.esni.enabled=true
&gt; 3. Copy the meek-http-helper@bamsoftware.com.xpi from Tor Browser to
&gt;    Firefox Nightly.
&gt; 4. Hack meek-client-torbrowser/{mac,linux,windows}.go to point
&gt;    firefoxPath at the copy of Firefox Nightly and disable the custom
&gt;    profile. (Additional hacks to remove hardcoded Tor Browser
&gt;    assumptions may be required.)
&gt; 5. Set up a Cloudflare instance pointing to https://meek.bamsoftware.com/,
&gt;    call it https://meek.example.com/.
&gt; 6. Set up a custom bridge in Tor Browser, using url= without front=
&gt;    (because we're no longer domain fronting).
&gt;      bridge meek 0.0.2.0:3 url=https://meek.example.com/ 
&gt; 
&gt; The only slightly weird part I foresee is hacking
&gt; meek-client-torbrowser; it has some internal hardcoded paths and
&gt; profiles that are specific to the Tor Browser directory layout, and
&gt; you'll have to point those to an external Firefox Nightly. Of course,
&gt; once ESNI support makes its way into Tor Browser itself, there won't be
&gt; a need for another external copy of Firefox.

Two things to follow up on this thread:

1) I believe ESNI support is now in the Firefox betas, so that approach
is looking like an option

2) Guardian Project got a grant to work on a full stack prototype of
using Pluggable Transports.  We're going to try to do it with ESNI using
Stephen Farrell's patches to openssl.

My last thought on this topic for today: we should be careful about
making it too easy to use ESNI for circumvention before its gained any
server side implementers.  If it gets branded a activist tool, I could
see many orgs failing to adopt ESNI.  I think Cloudflare is the only
active provider offering it.

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181208212614</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-12-08 21:26:14-0400</timestampReceived><subject>Re: [tor-dev] Failure to connect to a 0.3.4.9 bridge--downgrading to 0.2.9.17 fixes it</subject><body>

On Thu, Dec 06, 2018 at 10:19:09PM -0700, David Fifield wrote:
&gt; Here, a user reported a failure to connect to their own bridge, stopping
&gt; at 25% bootstrapped. teor and I went through the basic troubleshooting
&gt; steps of checking the bridge syntax, system time, and firewall settings.
&gt; With or without obfs4 didn't make a difference. The user eventually
&gt; tried downgrading the bridge from 0.3.4.9 to 0.2.9.17--and that fixed
&gt; it. Their client version was 0.3.4.9.
&gt; https://bugs.torproject.org/28717#comment:18
&gt; 
&gt; They also tried with two bridges from BridgeDB. The one running 0.3.4.9
&gt; didn't work, and the one running 0.2.9.17 did.
&gt; 
&gt; A possible lead are these client log messages:
&gt; [info] handle_response_fetch_desc(): Received server info (body size 0) from server \
&gt; 'X.X.X.X:YYYY' [info] handle_response_fetch_desc(): Received http status code 404 \
&gt; ("Servers unavailable") from server 'X.X.X.X:YYYY' while fetching \
&gt; "/tor/server/authority.z". I'll try again soon.

The problem started in 0.3.4.1-alpha, according to the user's tests of
multiple versions on the bridge.

https://bugs.torproject.org/28717#comment:20
working		0.2.9.17
working		0.3.2.10 (git-31cc63deb69db819)
working		0.3.3.10 (git-2e94df92caee0fca)
working		0.3.3.6 (git-7dd0813e783ae16e)
working		0.3.3.7 (git-035a35178c92da94)
working		0.3.3.9 (git-45028085ea188baf)
not working	0.3.4.1-alpha (git-deb8970a29ef7427)
not working	0.3.4.2-alpha (git-bc951e83aac770d1)
not working	0.3.4.6-rc (git-6045c26d8442913e)
not working	0.3.4.7-rc (git-8465a8d84647c349)
not working	0.3.4.8 (git-da95b91355248ad8)
not working 	0.3.4.9 (git-4ac3ccf2863b86e7)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181210010329</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-12-10 01:03:29-0400</timestampReceived><subject>[tor-dev] Network team meeting Monday at 1800 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

The next network team meeting is on Monday 10 December at 1800 UTC.

Our meetings are held on #tor-meeting on OFTC.

We'll also be meeting on Monday at 1800 UTC on 17 December.

The Tor office is closed for the holidays from 24 December to 1 January.
Many of us will take leave during that time, so there won't be any meetings.

Our first meeting in 2019 will be Tuesday 8 January at 2300 UTC.
(If this time doesn't work for you, we'll see you the week after.)

Here's our usual schedule:

First meeting each month: Tuesday at 2300 UTC.
Other meetings each month: Mondays at 1800 UTC.

T



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlwNu2EACgkQEP6qDnB1
Zyq2zw/+KlZhZqnjrrYmHgQZ2Tpc5BHBJ4xWlRS38M6F48FwnKHo1kT3kOlb6Hah
id7hieDzov1jyQPwFyy4Yah4W3vQ0+1XmA1ORx7xvlg5Jyvoq2i6ncxm8yEduPHn
NfOYfwMidjlLr27loRT1NOmOm64IZpIbTwSo9Jt+C2X8bMypepr9NzPL7IFHGsml
ox9Z0Km4un96aoLH/ohzTGj0mY4AG2YmlP9yoVmF6TBwZp2E1SDxewyNFTuuHoCe
O7RYzg3Kzrh4S04yEXn6EqQtxq8DVO/7mRpaYbNjKU20iwjdV1Hv2eOgx3McvLy8
y8Zr85gpaqYcuNuznZzN8jY+nTzI63IEPfu0Z6Bwwq93HR0Lg38e8oVaPgWCREgx
ODmRQHKwWGzTg2ynaeiJsch5NENLIwGeqXPVVjtSQ+/6W8purb9DhVQ2u2wtoglr
UeTjN10ZSQRgpCj096C5PfMz8UiYcawsikSA2xjv7tCOPXQJpMfEWMRiz63e0gux
7kTDxXdY1CMyWD0mn8FlWYtk8VCoIrObwQNGinAoFbE9jMD22JGt++EC672rcQDw
cQdGLl6+KNlVwPqaKbt6Xd1njZMCrxdTbMpFB7lZTdWSpIPG6b8u6bD5nvJW5uOi
AQUdfyV405bZFxDi4Riu4cuNR/xnG9fw69SqoqVGRHT6Tsjjm+Q=
=RdsU
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181213160503</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2018-12-13 16:05:03-0400</timestampReceived><subject>Re: [tor-dev] prob_distr.c: LogLogistic fails stochastic tests on 32-bits mingw</subject><body>

&gt; Date: Thu, 13 Dec 2018 03:25:30 +0000
&gt; From: Taylor R Campbell &lt;campbell+tor-dev@mumble.net&gt;
&gt; 
&gt; Binary80 arithmetic tickled a problem in the lerp used for binning --
&gt; [...]

Correction: while making the lerp less naive addresses this problem,
it also arises only when binary80 arithmetic and binary64 arithmetic
are mixed, which you get on 32-bit x86 in C double with the x87 unit
in binary80 mode so (a) double is binary64, but (b) intermediate
expressions are evaluated in binary80.

The attached program shows this, by putting either one (bad) or two
(good) intermediate expressions in double variables.  On x86, if you
compile it with -mfpmath=387 (default on 32-bit), you'll see the bad
result, a negative answer; if you compile it with -mfpmath=sse
(default on 64-bit), you'll see only good results, zero.  Convert
everything to use long double (and %Le) instead so that all the
arithmetic and intermediate quantities are binary80, and it's fine.

% cc -o loser -mfpmath=387 loser.c &amp;&amp; ./loser
bad -2.45760000000000000e+04
good 0.00000000000000000e+00
% cc -o loser -mfpmath=sse loser.c &amp;&amp; ./loser
bad 0.00000000000000000e+00
good 0.00000000000000000e+00

(This is why I don't like x87 and the automagic evaluation of
expressions in higher precision...)

["loser" (text/plain)]

#include &lt;stdio.h&gt;

#ifdef __NetBSD__

#include &lt;ieeefp.h&gt;

#else

#include &lt;stdint.h&gt;

#define	FP_PS	0
#define	FP_PRS	1
#define	FP_PD	2
#define	FP_PE	3

int
fpsetprec(int nprec)
{
	uint32_t ocw, ncw;
	int oprec;

	asm volatile("fnstcw %0" : "=m"(ocw));

	oprec = (ocw &gt;&gt; 8) &amp; 3;
	ncw = (ocw &amp; ~(uint32_t)(3 &lt;&lt; 8)) | (uint32_t)((nprec &amp; 3) &lt;&lt; 8);

	asm volatile("fldcw %0" : : "m"(ncw));

	return oprec;
}

#endif

int
main(void)
{
	volatile double lo = 2.4608250784829636e-20;
	volatile double hi = 3.0026742508190853e+20;
	volatile double w, d;
	volatile size_t n = 100;

	fpsetprec(FP_PE);
	w = (hi - lo)/(n - 2);
	d = (n - 2)*w;
	printf("bad %.17e\n", hi - (n - 2)*w);
	printf("good %.17e\n", hi - d);

	fflush(stdout);
	return ferror(stdout);
}

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181213202800</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2018-12-13 20:28:00-0400</timestampReceived><subject>[tor-dev] Update on Guardian Project Pluggable Transport work</subject><body>


The Guardian Project "PLUTO" project is our name for the work we're
doing around Pluggable Transports.  If you want to follow this work more
closely, you can ask n8fr8 to add you to our semi-private PLUTO mailing
list.

n8fr8 is currently working on integrating PTs into Android apps in a
reusable way.   That work is mostly in
https://github.com/guardianproject/AndroidPluggableTransports

I recently did some work to port snowflake to Android.  That should be
useable now, but with some open issues about repeatable builds and
verification that non-free libs are not linked in.  That's mostly here:

https://github.com/keroserene/snowflake/pull/43

Then we're doing full stack prototypes for using PTs in Android apps,
based on Wikipedia, F-Droid and an RFA app.  That stuff is scattered around.

From that work, uniqx (Michael Poehn) has produced a PT bridge server
setup automation:
https://gitlab.com/uniqx/pt-socks5-over-obfs4proxy

uniqx and I are now focused on Encrypted SNI for use as a PT, so there
will be some server automation around that, e.g. custom openssl/mod_ssl
build included.

.hc
-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181215051128</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-12-15 05:11:28-0400</timestampReceived><subject>Re: [tor-dev] Dormant Mode and pluggable transports</subject><body>

On Fri, Dec 14, 2018 at 04:28:26AM +0100, Alexander Færøy wrote:
&gt; On Thu, Dec 13, 2018 at 04:15:56PM -0700, David Fifield wrote:
&gt; &gt; If transports need to become dormant too, then there needs to be some
&gt; &gt; way for tor to tell them to be. Now that https://bugs.torproject.org/28179
&gt; &gt; (Handle output from PT processes with the event loop) is almost
&gt; &gt; finished, perhaps the stdin/stdout channel would work for it. A request
&gt; &gt; to become dormant really does apply to the entire PT process (not just a
&gt; &gt; single transport or connection), so it's a good match for a
&gt; &gt; process-global channel like stdin. The PT process could respond with a
&gt; &gt; "SIGNAL DORMANT" message on its stdout, which would inform tor that the
&gt; &gt; PT has understood the request and will try to become dormant.
&gt; 
&gt; I've just opened bug #28849 for us to try to figure out how this should
&gt; work both for the new process module itself, but especially for the only
&gt; consumer of the process module right now: the pluggable transports.
&gt; 
&gt; One part of this that especially affects PT's running on Windows is that
&gt; we would like to disable the Process I/O timer on Windows (which
&gt; currently ticks once a second) when we are in the dormant mode. This
&gt; would probably mean that once the stdout or stderr pipe's buffer, in the
&gt; PT process, is full writing to stdout/stderr will block which would
&gt; effectively be the same result as described in ticket #26360 (which
&gt; #28179 as a side-effect also happens to fix).
&gt; 
&gt; The easy way out here would of course be to "just" terminate the PT's
&gt; when we enter the dormant mode and re-spawn them when we leave the
&gt; dormant mode.  If we decide to extend the PT protocol to handle `SIGNAL
&gt; DORMANT` would we also need to have a method to inform the PT that it
&gt; can start interacting with the rest of the world again?

As I think about it, I'm thinking that terminating the subprocess is
better from a KISS perspective. It's forward-compatible too, in the
sense that you can decide to start sending a "SIGNAL DORMANT" stdin
message in the future. And yes, if there's a "SIGNAL DORMANT" there
should also be a "SIGNAL ACTIVE" or something.

&gt; Would it be bad if `SIGNAL DORMANT` also means that the PT should not
&gt; write to stdout/stderr until it's been informed that we are no longer
&gt; dormant?  :-)

That could be tricky. It may not be worth it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181221042529</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-12-21 04:25:29-0400</timestampReceived><subject>Re: [tor-dev] Regarding projects and a begineer guide.</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Here's the torsocks README:
https://gitweb.torproject.org/torsocks.git/tree/README.md

You could start by building and installing torsocks:
https://gitweb.torproject.org/torsocks.git/tree/INSTALL

T

-- 
teor
----------------------------------------------------------------------


&gt; On 16 Dec 2018, at 01:26, Durgesh Kumar &lt;durgesh.17bcs1179@abes.ac.in&gt; wrote:
&gt; 
&gt; Thanks for your reply..
&gt; 
&gt; I am intrested in TORSOCKS under usability category.
&gt; Can you please provide me a begineer guide about the project so that i can get \
&gt; familiar with it. 
&gt; Sorry for late reply.
&gt; 
&gt; 
&gt; 
&gt; &gt; On Mon 10 Dec, 2018, 6:40 AM teor, &lt;teor@riseup.net&gt; wrote:
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; &gt; On 7 Dec 2018, at 02:28, Durgesh Kumar &lt;durgesh.17bcs1179@abes.ac.in&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; Dear sir/mam
&gt; &gt; &gt; I am durgesh kumar from ABES engineering college,ghaziabad,uttar pradesh,india.
&gt; &gt; &gt; 
&gt; &gt; &gt; I am currently in 2nd year of my graduation(Btech CSE )
&gt; &gt; &gt; 
&gt; &gt; &gt; I want to contribute in some of your prestigious project. So i request you to \
&gt; &gt; &gt; please provide me some of your top priority project and a begineer guide. 
&gt; &gt; &gt; I hope you will concern my request.
&gt; &gt; 
&gt; &gt; Here's a list of our projects and some project ideas:
&gt; &gt; https://www.torproject.org/getinvolved/volunteer.html.en#Projects
&gt; &gt; 
&gt; &gt; Let us know which ones you're interested in.
&gt; &gt; 
&gt; &gt; T
&gt; &gt; 


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's the torsocks \
README:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torsocks.git/tree/README.md"&gt;https://gitweb.torproject.org/torsocks.git/tree/README.md&lt;/a&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You \
could start by building and installing torsocks:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torsocks.git/tree/INSTALL"&gt;https://gitweb.torproject.org/torsocks.git/tree/INSTALL&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div \
id="AppleMailSignature" dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;-- &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;teor&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;On 16 Dec 2018, at 01:26, Durgesh Kumar &lt;&lt;a \
href="mailto:durgesh.17bcs1179@abes.ac.in"&gt;durgesh.17bcs1179@abes.ac.in&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="auto"&gt;Thanks for \
your reply..&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;I am intrested in TORSOCKS \
under usability category.&lt;/div&gt;&lt;div dir="auto"&gt;Can you please provide me a begineer \
guide about the project so that i can get familiar with it.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Sorry for late reply.&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon 10 Dec, 2018, 6:40 AM teor, &lt;&lt;a \
href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
&gt; On 7 Dec 2018, at 02:28, Durgesh Kumar &lt;&lt;a \
href="mailto:durgesh.17bcs1179@abes.ac.in" target="_blank" \
rel="noreferrer"&gt;durgesh.17bcs1179@abes.ac.in&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; &lt;br&gt;
&gt; Dear sir/mam&lt;br&gt;
&gt; I am durgesh kumar from ABES engineering college,ghaziabad,uttar \
pradesh,india.&lt;br&gt; &gt; &lt;br&gt;
&gt; I am currently in 2nd year of my graduation(Btech CSE )&lt;br&gt;
&gt; &lt;br&gt;
&gt; I want to contribute in some of your prestigious project. So i request you to \
please provide me some of your top priority project and a begineer guide.&lt;br&gt; &gt; \
&lt;br&gt; &gt; I hope you will concern my request.&lt;br&gt;
&lt;br&gt;
Here's a list of our projects and some project ideas:&lt;br&gt;
&lt;a href="https://www.torproject.org/getinvolved/volunteer.html.en#Projects" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://www.torproject.org/getinvolved/volunteer.html.en#Projects&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Let us know which ones you're interested in.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181206205243</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-12-06 20:52:43-0400</timestampReceived><subject>[tor-dev] Scheduled changes to Tor Metrics CSV files in the Performance and the Traffic category</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

if you're not pulling CSV files from the Tor Metrics website in an
automated fashion, you can stop reading now.

We just scheduled some changes to the Tor Metrics CSV files in the
Performance and the Traffic category:

 - December 20, 2018 (scheduled): Remove source parameters and output
rows with aggregates over all sources from Time to download files over
Tor, Timeouts and failures of downloading files over Tor, Circuit build
times, Circuit round-trip latencies graphs.

 - December 20, 2018 (scheduled): Remove two graphs Total relay
bandwidth and Consumed bandwidth by Exit/Guard flag combination, and
update the data format of the Advertised and consumed bandwidth by relay
flag graph to cover all data previously contained in the first two graphs=
=2E

For more details, see: https://metrics.torproject.org/stats.html

I'm posting this note here, because some folks might pull these CSV
files automatically, and they should have at least a two-weeks warning
to update their scripts.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181222050633</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-12-22 05:06:33-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

Regarding mobile, dormant, battery, etc...

There may still be a ticket for phone, mobile, laptop, wifi users...
if an interface change happens, typically interface
down event or IP change, then tor should tear down
all internet associated state, to not expose traveling user
to identifying IP traffic retries sequence nums id nums
same tor node sets, etc. Controller should accept
pre and post interface change signals too.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181226132306</emailId><senderName>Pranav Vardia</senderName><senderEmail>pranavvardia@gmail.com</senderEmail><timestampReceived>2018-12-26 13:23:06-0400</timestampReceived><subject>[tor-dev] Queries regarding Summer of Privacy 2019</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,
I am Pranav Vardia , third year student from International Institute of
Information Technology, Bangalore. I am writing this mail to clarify few of
my queries regarding Summer of Privacy.

Firstly, I would like to ask that is there a list of projects whcih we can
work on or do we need to come up with our own proposal ?
Secondly, I cannot find any timeline and project lists for previous years
Summer of Privacy. It would be great if you could provide me links to the
aforementioned.

Regards,
Pranav Vardia

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi,&lt;div&gt;I am Pranav Vardia , third year student from International \
Institute of Information  Technology, Bangalore. I am writing this mail to clarify \
few of my queries regarding Summer of Privacy.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Firstly, I \
would like to ask that is there a list of projects whcih we can work on or do we need \
to come up with our own proposal ?&lt;/div&gt;&lt;div&gt;Secondly, I cannot find any timeline and \
project lists for previous years Summer of Privacy. It would be great if you could \
provide me links to the \
aforementioned.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Pranav Vardia&lt;/div&gt;&lt;div&gt;  \
&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181228193429</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-12-28 19:34:29-0400</timestampReceived><subject>Re: [tor-dev] HTTPS and Tor Onion v3 Services</subject><body>

&gt; rewriting onion proxies

Though it should be noted that if users already
can't get their own simple human link and
bookmark usage right... they're probably not
going to get any higher level naming or
authority config and usage right either.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181207051909</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-12-07 05:19:09-0400</timestampReceived><subject>[tor-dev] Failure to connect to a 0.3.4.9 bridge--downgrading to 0.2.9.17 fixes it</subject><body>

Here, a user reported a failure to connect to their own bridge, stopping
at 25% bootstrapped. teor and I went through the basic troubleshooting
steps of checking the bridge syntax, system time, and firewall settings.
With or without obfs4 didn't make a difference. The user eventually
tried downgrading the bridge from 0.3.4.9 to 0.2.9.17--and that fixed
it. Their client version was 0.3.4.9.
https://bugs.torproject.org/28717#comment:18

They also tried with two bridges from BridgeDB. The one running 0.3.4.9
didn't work, and the one running 0.2.9.17 did.

A possible lead are these client log messages:
[info] handle_response_fetch_desc(): Received server info (body size 0) from server \
'X.X.X.X:YYYY' [info] handle_response_fetch_desc(): Received http status code 404 \
("Servers unavailable") from server 'X.X.X.X:YYYY' while fetching \
"/tor/server/authority.z". I'll try again soon. \
_______________________________________________ tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181211165621</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-12-11 16:56:21-0400</timestampReceived><subject>[tor-dev] prob_distr.c: LogLogistic fails stochastic tests on 32-bits mingw</subject><body>

Hello Riastradh,

as discussed on IRC, Appveyor recently started failing the stochastic
tests of LogLogistic on 32-bit builds:
     https://github.com/torproject/tor/pull/576
     https://ci.appveyor.com/project/torproject/tor/builds/20897462

I managed to reproduce the breakage by cross-compiling Tor and running
the tests with wine, using this script of ahf: https://github.com/ahf/tor-win32/

Here are my findings:

The following two test cases are breaking 100% reproducibly:

    ok = test_stochastic_log_logistic_impl(M_E, 1e-1);
    ok = test_stochastic_log_logistic_impl(exp(-10), 1e-2);

The breakage seems to be because of the beta parameter. In particular,
it seems like the test will break with any beta &lt;= 0.26, and will
succeed with a beta &gt;= 0.27. The space in between is still unclear ;)

I haven't managed to figure out what's actually offending the test but I
can reproduce this so I can do some digging if you have any ideas.

FWIW, I haven't noticed any other stochastic test breakage.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181213231556</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-12-13 23:15:56-0400</timestampReceived><subject>[tor-dev] Dormant Mode and pluggable transports</subject><body>

On Thu, Dec 13, 2018 at 03:56:50PM -0500, Nick Mathewson wrote:
&gt; == Compatibility issues
&gt; 
&gt; I see two issues here: one minor, and one major.
&gt; 
&gt; Minor issue: some applications periodically make requests to the tor
&gt; network on their own -- for example, Tor Browser's update requests.
&gt; These requests prevent Tor from becoming dormant.  If this is
&gt; undesired, we can add some way around this.
&gt; 
&gt; Major issue: some applications expect that Tor will always bootstrap
&gt; when it starts, and delay presenting their own UI until Tor is ready.
&gt; But if Tor starts as dormant, then it will not bootstrap until it
&gt; receives a request from the client or a "SIGNAL ACTIVE"  command from
&gt; the controller. This could lead to breakage as the application waits
&gt; for Tor to tell it that it's ready, and Tor waits for somebody to tell
&gt; it that it's needed.
&gt; 
&gt; Are all application developers okay with the issues above, and okay
&gt; with working around them?  If not, we may need changes in Tor before
&gt; 0.4.0.x is released.  Let's talk!

I'm thinking about how Dormant Mode will interact with pluggable
transports. Our current transports will (I think) become dormant when
tor does, because they only send something when tor does. At most, they
may chop up and pad some of tor's packets (like obfs4 iat-mode does),
but they don't send traffic of their own while tor is quiet. There's
nothing requiring that though: a transport is in general free to send
dummy traffic whenever it wants, perhaps as a form of traffic flow
obfuscation.

If transports need to become dormant too, then there needs to be some
way for tor to tell them to be. Now that https://bugs.torproject.org/28179
(Handle output from PT processes with the event loop) is almost
finished, perhaps the stdin/stdout channel would work for it. A request
to become dormant really does apply to the entire PT process (not just a
single transport or connection), so it's a good match for a
process-global channel like stdin. The PT process could respond with a
"SIGNAL DORMANT" message on its stdout, which would inform tor that the
PT has understood the request and will try to become dormant.

Or simpler but more drastic, tor could terminate its PT subprocesses
when it goes dormant (cleanly, by closing their stdin).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181206164003</emailId><senderName>Durgesh Kumar</senderName><senderEmail>durgesh.17bcs1179@abes.ac.in</senderEmail><timestampReceived>2018-12-06 16:40:03-0400</timestampReceived><subject>[tor-dev] Regarding projects and a begineer guide.</subject><body>

[Attachment #2 (multipart/alternative)]


Dear sir/mam
I am durgesh kumar from ABES engineering college,ghaziabad,uttar
pradesh,india.

I am currently in 2nd year of my graduation(Btech CSE )

I want to contribute in some of your prestigious project. So i request you
to please provide me some of your top priority project and a begineer guide.

I hope you will concern my request.

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;&lt;span style="font-size:12.8px;font-family:sans-serif"&gt;Dear \
sir/mam&lt;/span&gt;&lt;div dir="auto" style="font-size:12.8px;font-family:sans-serif"&gt;I am \
durgesh kumar from ABES engineering college,ghaziabad,uttar pradesh,india.&lt;/div&gt;&lt;div \
dir="auto" style="font-size:12.8px;font-family:sans-serif"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto" \
style="font-size:12.8px;font-family:sans-serif"&gt;I am currently in 2nd year of my \
graduation(Btech CSE )&lt;/div&gt;&lt;div dir="auto" \
style="font-size:12.8px;font-family:sans-serif"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto" \
style="font-size:12.8px;font-family:sans-serif"&gt;I want to contribute in some of your \
prestigious project. So i request you to please provide me some of your top priority \
project and a begineer guide.&lt;/div&gt;&lt;div dir="auto" \
style="font-size:12.8px;font-family:sans-serif"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto" \
style="font-size:12.8px;font-family:sans-serif"&gt;I hope you will concern my \
request.&lt;/div&gt;&lt;div dir="auto" \
style="color:rgb(136,136,136);font-family:sans-serif;font-size:12.8px"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181210011005</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-12-10 01:10:05-0400</timestampReceived><subject>Re: [tor-dev] Regarding projects and a begineer guide.</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 7 Dec 2018, at 02:28, Durgesh Kumar &lt;durgesh.17bcs1179@abes.ac.in&gt; wrote:
&gt; 
&gt; Dear sir/mam
&gt; I am durgesh kumar from ABES engineering college,ghaziabad,uttar pradesh,india.
&gt; 
&gt; I am currently in 2nd year of my graduation(Btech CSE )
&gt; 
&gt; I want to contribute in some of your prestigious project. So i request you to \
&gt; please provide me some of your top priority project and a begineer guide. 
&gt; I hope you will concern my request.

Here's a list of our projects and some project ideas:
https://www.torproject.org/getinvolved/volunteer.html.en#Projects

Let us know which ones you're interested in.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlwNvO0ACgkQEP6qDnB1
ZyrtsA//bBoz9m4uUs+JYrqrQv7BhLmPTt14tjJjkmD7YjiAD5C/KvAPu4lONHJJ
o9SMumBaeLemlo0QUnLnpzU6xX29prKYv9OEa9ClWqHl3ORP3stuKZ4JCyoTB3lj
ixxD7+gaICHbwWHQQYP7lb3d7mKvKunF4XGtDK4H8aQI0Vq181qr20J1wEs1dJy+
vwFKUUENZyDNk7vwjsfQKAL0bPJe2VH7ly7Z3jaJFr/2boS5+KzraK9a/EMG/OOE
VorBpIDkcRCPE+d8VIj8V52UGAk5cxJwGBzLCjzODsmWeO8WWzxHvDi3OOJX44+x
M0rCm0xWGtrhQMbBm7ILrH3DwFDG3gxIaDd+euPaw6jGzm+GkLia+fzDwvdTaU6+
sPDHgSviyirGRm0+Vf0B4bXRit5sZAowN10m4s/E0g6Mbh1b5JiHnd9iYgXB038F
zendkj5acXfj7ZszHkib6nZZE/34INRWmhTQvg+qWpcP3ModBV8g3ErkD6Qs4cYv
mWJsgVeGVZjCUfqjMvG0OMiH5F/bZQsSs/fmYWMXOcpEM/DXeN7YirF+cQRzVm+W
hvs8d/IjTzpMpE9N8fvE3a+OWOnU9nkyulQkQK0IB43hcpVn4weAflLM+43PAtJB
luQSx+MT8jkvtWhUQek2zCXerdc8IIyheWrF1CHKyke8OHT6h1M=
=FM31
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181214032826</emailId><senderName>Alexander =?iso-8859-1?B?RuZy+Hk=?=</senderName><senderEmail>ahf@torproject.org</senderEmail><timestampReceived>2018-12-14 03:28:26-0400</timestampReceived><subject>Re: [tor-dev] Dormant Mode and pluggable transports</subject><body>

Hi,

On Thu, Dec 13, 2018 at 04:15:56PM -0700, David Fifield wrote:
&gt; If transports need to become dormant too, then there needs to be some
&gt; way for tor to tell them to be. Now that https://bugs.torproject.org/28179
&gt; (Handle output from PT processes with the event loop) is almost
&gt; finished, perhaps the stdin/stdout channel would work for it. A request
&gt; to become dormant really does apply to the entire PT process (not just a
&gt; single transport or connection), so it's a good match for a
&gt; process-global channel like stdin. The PT process could respond with a
&gt; "SIGNAL DORMANT" message on its stdout, which would inform tor that the
&gt; PT has understood the request and will try to become dormant.

I've just opened bug #28849 for us to try to figure out how this should
work both for the new process module itself, but especially for the only
consumer of the process module right now: the pluggable transports.

One part of this that especially affects PT's running on Windows is that
we would like to disable the Process I/O timer on Windows (which
currently ticks once a second) when we are in the dormant mode. This
would probably mean that once the stdout or stderr pipe's buffer, in the
PT process, is full writing to stdout/stderr will block which would
effectively be the same result as described in ticket #26360 (which
#28179 as a side-effect also happens to fix).

The easy way out here would of course be to "just" terminate the PT's
when we enter the dormant mode and re-spawn them when we leave the
dormant mode.  If we decide to extend the PT protocol to handle `SIGNAL
DORMANT` would we also need to have a method to inform the PT that it
can start interacting with the rest of the world again?

Would it be bad if `SIGNAL DORMANT` also means that the PT should not
write to stdout/stderr until it's been informed that we are no longer
dormant?  :-)

Cheers,
Alex.

-- 
Alexander Færøy
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181212154705</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-12-12 15:47:05-0400</timestampReceived><subject>Re: [tor-dev] prob_distr.c: LogLogistic fails stochastic tests on 32-bits mingw</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hello Riastradh,
&gt;
&gt; as discussed on IRC, Appveyor recently started failing the stochastic
&gt; tests of LogLogistic on 32-bit builds:
&gt;      https://github.com/torproject/tor/pull/576
&gt;      https://ci.appveyor.com/project/torproject/tor/builds/20897462
&gt;
&gt; I managed to reproduce the breakage by cross-compiling Tor and running
&gt; the tests with wine, using this script of ahf: https://github.com/ahf/tor-win32/
&gt;
&gt; Here are my findings:
&gt;
&gt; The following two test cases are breaking 100% reproducibly:
&gt;
&gt;     ok = test_stochastic_log_logistic_impl(M_E, 1e-1);
&gt;     ok = test_stochastic_log_logistic_impl(exp(-10), 1e-2);
&gt;

Aaaaand here are some updates:

I followed your suggestion and turned the tests into deterministic by
sampling from a deterministic randomness source. I verified that all the
crypto_rand() call outputs are now the same between the 32-bit mingw
build and the 64-bit gcc one:
      https://github.com/asn-d6/tor/commit/3d8c86c2f08ad2cc7ed030bbf8e11b110351f5c8

I then focused on the test_stochastic_log_logistic_impl(M_E, 1e-1) test
case and tried to figure out where the deviation was happening between
64-bit gcc and 32-bit mingw... That took a while but I finally got some
figures. Check out my commit that adds some printfs as well:
      https://github.com/asn-d6/tor/commit/36999c640fe824ab9fb85b5d2cd15017a97a532f

So using the output from that that commit I noticed that many times
log_logistic_sample() would give different outputs in these two
systems. In particular sometimes the x value would differ even with the
same (s, p0) pair, and other times the x value would be the same but the
final alpha*pow(x,1/beta) value would differ. Even tho this is the case,
the test would only fail for certain values for beta (as mentioned in my
previous email).

I now inline various such failure cases and one correct one:

Case #1 (same x, different sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 3122729323, p0: 0x1.68d18a44b82fbp-1
        x: 0x1.d686a1e7fa35p+0
        alpha*pow(x, 1/beta): 0x1.2affd5bfff433p+10

     gcc-64:
        beta: 0x1.999999999999ap-4        
        s: 3122729323, p0: 0x1.68d18a44b82fbp-1
        x: 0x1.d686a1e7fa35p+0
        alpha*pow(x, 1/beta): 0x1.2affd5bfff434p+10        

Case #2 (same x, different sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 738208646, p0: 0x1.a1ecd53def5d3p-2
        x: 0x1.068987864c2aep-2
        alpha*pow(x, 1/beta): 0x1.bfba380255bb8p-19
        
     linux:
        beta: 0x1.999999999999ap-4
        s: 738208646, p0: 0x1.a1ecd53def5d3p-2
        x: 0x1.068987864c2aep-2
        alpha*pow(x, 1/beta): 0x1.bfba380255bb9p-19
         
Case #3 (different x, different sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 95364755, p0: 0x1.575b5ea720e3cp-1
        x: 0x1.fb7949976ab04p+0
        alpha*pow(x, 1/beta): 0x1.3e605e169e8cbp+11

     gcc-64:
        beta: 0x1.999999999999ap-4
        s: 95364755, p0: 0x1.575b5ea720e3cp-1
        x: 0x1.fb7949976ab03p+0
        alpha*pow(x, 1/beta): 0x1.3e605e169e8c5p+11

Case #4 (different x, different sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 2082443965, p0: 0x1.530a8759113bp-2
        x: 0x1.42989e50ac641p+2
        alpha*pow(x, 1/beta): 0x1.b724d48bf0f6cp+24

     gcc-64:
        beta: 0x1.999999999999ap-4
        s: 2082443965, p0: 0x1.530a8759113bp-2
        x: 0x1.42989e50ac64p+2
        alpha*pow(x, 1/beta): 0x1.b724d48bf0f5ep+24

Case #5 (different x, different sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 443038967, p0: 0x1.b0124b971bbf3p-4
        x: 0x1.1f5b72f5f6a3ep+4
        alpha*pow(x, 1/beta): 0x1.143a16cdae94fp+43
        
     gcc-64:
        beta: 0x1.999999999999ap-4
        s: 443038967, p0: 0x1.b0124b971bbf3p-4
        x: 0x1.1f5b72f5f6a3fp+4
        alpha*pow(x, 1/beta): 0x1.143a16cdae958p+43

Case #6 (same sample value):

     mingw-32:
        beta: 0x1.999999999999ap-4
        s: 2932701594, p0: 0x1.b407f600e6d87p-1
        x: 0x1.7bb183ccc47efp-1
        alpha*pow(x, 1/beta): 0x1.181016f03c09p-3

     gcc-64:
        beta: 0x1.999999999999ap-4
        s: 2932701594, p0: 0x1.b407f600e6d87p-1
        x: 0x1.7bb183ccc47efp-1
        alpha*pow(x, 1/beta): 0x1.181016f03c09p-3
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181213032530</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2018-12-13 03:25:30-0400</timestampReceived><subject>Re: [tor-dev] prob_distr.c: LogLogistic fails stochastic tests on 32-bits mingw</subject><body>

&gt; Date: Wed, 12 Dec 2018 17:47:05 +0200
&gt; From: George Kadianakis &lt;desnacked@riseup.net&gt;
&gt; 
&gt; I followed your suggestion and turned the tests into deterministic by
&gt; sampling from a deterministic randomness source. I verified that all the
&gt; crypto_rand() call outputs are now the same between the 32-bit mingw
&gt; build and the 64-bit gcc one: [...]

Although it is worthwhile to separate (a) a nondeterministic entropy
source from (b) a deterministic PRNG with seeds you can save to get
reproducible results...it turns out all that was a red herring, and
the culprit was an incautious linear interpolation I had written in
the binning for stochastic tests.  Fortunately the problematic code is
limited to the tests and does not run in the tor daemon!

Lerping -- computing t |---&gt; a + (b - a)*t = (1 - t)*a + t*b -- is
deceptive in its apparent simplicity, and it just happened that no
trouble arose in binary64 arithmetic, which is what you get on just
about every machine on the planet _except_ 32-bit x86 in binary80 mode
-- which mingw32 uses.  (And the m68k floating-point coprocessor, but
one doesn't see those much these days.)  Fortunately you don't have to
use Windows to run tests -- `gcc -m32' on an amd64 system should do
just as well, and you can make sure you're in binary80 mode with

   uint32_t cwsave, cw = 0x037f;
   asm volatile("fnstcw %0; fldcw %1" : "=m"(cwsave) : "m"(cw));
   ...
   asm volatile("fldcw %0" : : "m"(cwsave));

(On NetBSD, this is spelled `fp_prec_t p = fpsetprec(FP_PE); ...;
fpsetprec(p)', but I'm not sure anyone else has adopted that.)

Binary80 arithmetic tickled a problem in the lerp used for binning --
a problem which I took some pains to avoid in sample_uniform_interval
(see the long theorem in the comments there).  By `binning' I mean
dividing the support of each distribution into histogram bins,
starting at the 1st percentile and ending at the 99th percentile, and
uniformly spaced in the support with a linear interpolation to pick
the bin boundaries.

We then use the CDF or SF to compute the probability a sample falls
into each bin, count a lot of samples, and use a psi test to assess
whether the sample counts are close enough to the expected counts.
(There's nothing magic about uniform spacing; I just pulled it out of
my arse, and it helped me catch bugs.)

When beta is small, the log-logistic distribution has a very fat tail,
so the 1st percentile and the 99th percentile are very far away (e.g.,
for alpha=e and beta=1/10, the 1st percentile is ~2.5e-20 and the 99th
percentile is ~3e+20).  The naive lerp I had written in bin_cdfs to
compute an equispaced partition between these two points overshot in
this case in binary80 arithmetic, which led to an intermediate NaN
computation, which made the test fail 100% of the time.

The attached patch uses a slightly less naive lerp.  It's not
necessarily monotonic but that doesn't really matter here since we're
only examining 100 histogram bins -- overcounting by the width of one
or two consecutive floating-point numbers is essentially
inconsequential at this scale for these tests.

["lerp" (text/plain)]

From 1338258a0d6a76bbe30bf03b90acff4559c24120 Mon Sep 17 00:00:00 2001
From: Taylor R Campbell &lt;campbell+tor@mumble.net&gt;
Date: Thu, 13 Dec 2018 02:46:27 +0000
Subject: [PATCH] Use a lerp that never overshoots when determining bin
 boundaries.

In binary80 arithmetic, the bins for the log-logistic distribution,
which has a very fat tail, were computed with a value that overshot
the bounds, leading to a NaN intermediate.

One defensive way to avoid this would be to change the cdf_* and sf_*
functions for distributions of bounded support -- like log-logistic,
which is supported only on (0, +\infty) -- to return -/+inf for
points outside the bounds.  But for testing purposes it might be
better not to work defensively like that because it might mask
upstream problems.
---
 src/test/test_prob_distr.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/test/test_prob_distr.c b/src/test/test_prob_distr.c
index 002497e08..16919e0f4 100644
--- a/src/test/test_prob_distr.c
+++ b/src/test/test_prob_distr.c
@@ -1002,14 +1002,14 @@ bin_cdfs(const struct dist *dist, double lo, double hi, double *logP, size_t n)
   logP[0] = log(CDF(x_1) - 0); /* 0 = CDF(-inf) */
   for (i = 1; i &lt; n2; i++) {
     x_0 = x_1;
-    x_1 = lo + i*w;
+    x_1 = (i &lt;= n/2 ? lo + i*w : hi - (n - 2 - i)*w);
     logP[i] = log(CDF(x_1) - CDF(x_0));
   }
   x_0 = hi;
   logP[n - 1] = log(SF(x_0) - 0); /* 0 = SF(+inf) = 1 - CDF(+inf) */
   for (i = 1; i &lt; n - n2; i++) {
     x_1 = x_0;
-    x_0 = hi - i*w;
+    x_0 = (i &lt;= n/2 ? hi - i*w : lo + (n - 2 - i)*w);
     logP[n - i - 1] = log(SF(x_0) - SF(x_1));
   }
 #undef SF
-- 
2.19.1


[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181228171736</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-12-28 17:17:36-0400</timestampReceived><subject>[tor-dev] HTTPS and Tor Onion v3 Services</subject><body>

Hi everyone,

So I have an idea which may or may not be a possibility. Currently Tor Onion Services \
do not need HTTPS since they are already end to end encrypted. That said multiple \
layers of crypto cannot hurt, Facebook for example uses this approach. So I have the \
idea of some sort of mechanism that lets you sign a self-signed tls certificate with \
your Onion Service's hs_ed25519_secret_key and Tor Browser trusting the tls \
certificate based on this signature. Would this approach work? Would it be worth the \
effort? Look forward to hearing your thoughts :)

Cordially,
Nathaniel Suchy
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181228175150</emailId><senderName>Chad Retz</senderName><senderEmail>chad.retz@gmail.com</senderEmail><timestampReceived>2018-12-28 17:51:50-0400</timestampReceived><subject>Re: [tor-dev] HTTPS and Tor Onion v3 Services</subject><body>

"That said multiple layers of crypto cannot hurt, Facebook for example
uses this approach."

The first part is not strictly true. For the second part, FB uses an
identity-verified EV cert from a known CA to let their users confirm
their identity, not for increased encryption. Creating an onion
service is essentially creating a self-signed cert, so no, I'd say not
worth the effort to do it again at the HTTP level.

Chad

On Fri, Dec 28, 2018 at 11:17 AM Nathaniel Suchy &lt;me@lunorian.is&gt; wrote:
&gt; 
&gt; Hi everyone,
&gt; 
&gt; So I have an idea which may or may not be a possibility. Currently Tor Onion \
&gt; Services do not need HTTPS since they are already end to end encrypted. That said \
&gt; multiple layers of crypto cannot hurt, Facebook for example uses this approach. So \
&gt; I have the idea of some sort of mechanism that lets you sign a self-signed tls \
&gt; certificate with your Onion Service's hs_ed25519_secret_key and Tor Browser \
&gt; trusting the tls certificate based on this signature. Would this approach work? \
&gt; Would it be worth the effort? Look forward to hearing your thoughts :) 
&gt; Cordially,
&gt; Nathaniel Suchy
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181228190627</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-12-28 19:06:27-0400</timestampReceived><subject>Re: [tor-dev] HTTPS and Tor Onion v3 Services</subject><body>

&gt; sign a
&gt; self-signed tls certificate with your Onion Service's hs_ed25519_secret_key
&gt; and Tor Browser trusting the tls certificate based on this signature

- In unlikely case tor crypto fails or breaks, e2e TLS
is good there.
- An admin might terminate onions on one box, and
forward the plaintext off to other places, e2e TLS
is good there.
- Onionland does have some PKI, CA, pinning, and
tor signing infrastructures.
- Admins might want to play, learn, and do it just
because they can.

The browser either has options to import and trust an
onion sig over a cert, or you need to add it, or skip it
and use today's typical cert methods.

The concepts apply to both v2 and v3 onions.

&gt; Would this approach work?

Manually for you, and by users, loading and configuring things, yes.
Automagically, browser would need to fetch pubkeys from
controller hsdir consensus, observatories, or other methods.

&gt; Would it be worth the effort?

For whatever ca / pki structures are already good for, or not.
And might help against the rewriting onion proxies...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181105020030</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-05 02:00:30-0400</timestampReceived><subject>Re: [tor-dev] Network team meeting on Tuesday at 2300 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

I got the daylight saving change for next week mixed up.

&gt; On 5 Nov 2018, at 10:24, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; This week's network team meeting is on Tuesday at 2300 UTC.
&gt; (If this time doesn't work for you, we'll see you the week after.)
&gt; 
&gt; Our meetings are held on #tor-meeting on OFTC.

We'll be back to our regular schedule next week, but we'll meet an hour
*later* for the northern hemisphere daylight saving time.

First meeting each month: Tuesday at 2300 UTC.
Other meetings each month: Mondays at *1800 UTC*.

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlvfpD4ACgkQEP6qDnB1
ZypORA/+No9Fk88k3wSu9A+jb7jeNf+75sTeoQtzuujE2fJW1CGSJkNK6coY6q97
PZjyuQGP8iOpdaaDkuDGg9zk1fxklPqLXqYGLt23P8sFOrvq4XSbxh9nhEIbmHAE
kb6DcHonO1d4kFdkOK3JHV/7nkidaQS07CdEzRItL1gfugEzrm4l0tedRlIxOyZv
JN8tOOcIi5SBumqc3SdlqSprQo/Mf8arexB0GvDk2qBqQwYNbrsoseHAakEEgFFE
jtlYwamtL7UqzNAKtSxGWlFVzzwda81o3mWIYvHlMp9F2NLWAq7PZibTkTjHcyXm
c1ujgDepNhzg6+nc7oyPFGPVmvXSUyZMQHvv4JCjNdOjH1aQZ7mWvs8RhelmDXF3
SgsRUB43L8ACqkTtlUrG9YB6ATLursQbfJ/myjzVpcnh5LneEdtRbN9LxAThqzOU
EjjYnajosFTxHpldO6xLQKlsXvCrfrZ0m1UJeDKLsqxNsvtub7yNxWByOQ1HoyWv
d1nWdRm3IpQ0BDnOAlIIFxnnprWsNseI1s9JkMp5pD2A6MRTakkq1UbtQq9poGYK
Xg3vTl8qlD9oUD4M6F6nJ6hji2Td1sIwl7AQLZOJMjHCaDv+u0iZ2LCsLBuVjdVN
Pypkbm7Ed9Oysa7UKr+uX2FsDwHrfFbryMfpQ3QmXyyh6LtDY6o=
=OP2T
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181107230508</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-07 23:05:08-0400</timestampReceived><subject>Re: [tor-dev] A few wtf-pad/prop254 questions</subject><body>

On Wed, Nov 7, 2018 at 5:41 PM Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; Nick Mathewson:
&gt; &gt; Hi!  I'm looking over prop254 and I have a few questions or
&gt; &gt; clarification requests that I hope will make things clearer to me.
&gt; &gt; Some of these are probably "wrong questions" that stem from a
&gt; &gt; misunderstanding of the underlying proposal.
&gt; &gt; 
&gt; &gt; 1) What does "ito" stand for?  Is it documented?
&gt; 
&gt; "Inactive TimeOut". It is documented in Proposal #251 (Section 2.1).

Okay. Can we rename it to "timeout_{min,max}"?

&gt; &gt; 2) How is RTT measurement meant to work?  It seems to me from reading
&gt; &gt; section 3.1 that middle if a middle node sees a delay of N ms between
&gt; &gt; getting a cell in the forward direction, and getting a cell in the
&gt; &gt; backward direction, then it will conclude that the RTT is at least N
&gt; &gt; ms.
&gt; 
&gt; Yes, where "forward" means "away from origin" and backward means
&gt; "towards origin". What the middle node is trying to measure is the
&gt; remaining RTT of the rest of the circuit towards the exit, so that it
&gt; can simulate response delays if it wishes.

Let's document that.

&gt; I found Tor's interchanging use of "forward", "outgoing", "incoming",
&gt; and "backward" to be somewhat maddening for reasoning about the state
&gt; machines. So I defined everything in terms of direction of packets *from
&gt; the perspective of the state machine*.

Okay, but let's make that vocab shift explicit so that people who feel
like they grok the old (janky?) status quo can still understand the
new hotness :)

&gt; &gt; But that doesn't make sense to me -- the latter cell might have been
&gt; &gt; sent in response to a different cell, or sent asynchonously, and not
&gt; &gt; in response to the first cell at all.  AFAICT unless we can be
&gt; &gt; reasonably sure that we are seeing a packet that is sent in response
&gt; &gt; to an earlier cell, be sure that we're actually measuring min(rtt).
&gt; 
&gt; This is why the RTT measurement stops as soon as two back-to-back cells
&gt; arrive in either direction on a circuit. Two back-to-back cells in
&gt; either direction means the 1:1 request/response pattern of circuit
&gt; setup/RELAY_BEGIN is now over (though we do wait for one more response
&gt; counting time from the head of the first request packet train, to
&gt; measure optimistic data response times).

This still seems to me that we're going to get wrong answers!

For EXTEND/EXTENDED pairs, there is an unusual delay in between
because of the delay from onionskin queues and crypto delays.

For BEGIN/CONNECTED pairs, there is an unusual delay in waiting for
the target service to respond to the exit node.

For EXTENDED/BEGIN pairs, there could be a HUGE delay, since the
circuit might be preemptive, and the client might wait indefinitely to
actually use it.


&gt; Note that there is a huge looming issue with how we decide to handle
&gt; var_cell_t. Right now, Proposal #249 is very ambiguous wrt how
&gt; RELAY_EARLY and var cells interact. If we instead made it a MUST that
&gt; the first var_cell piece is always RELAY_EARLY and subsequent fragments
&gt; are RELAY, then middle nodes could still compute RTT during circuit
&gt; setup using this back-to-back heuristic for RELAY_EARLY cells.
&gt; Otherwise, I am not sure what we can do here.
&gt; 
&gt; &gt; Maybe some pseudocode would help me understand better.
&gt; 
&gt; Current implementation is in circpad_estimate_circ_rtt_on_receieved()
&gt; and circpad_estimate_circ_rtt_on_send()
&gt; https://github.com/mikeperry-tor/tor/blob/adaptive_padding-rebased_0.3.6-squashed/src/core/or/circuitpadding.c#L1245
&gt; 

For this and other questions where you reference the code: I like this
and it's great, but the spec will need to explain what the code needs
to do.  If we make the proposal explain what the code does, that will
make updating the spec easier.

&gt; &gt; 3) In section 3.1, I'm assuming that "cell sent" and "cell received"
&gt; &gt; refer to a cell that we are originating, and a cell that we are
&gt; &gt; receiving, recognizing, and processing: relayed cells don't count.  Is
&gt; &gt; that correct?
&gt; 
&gt; Relayed cells do count. Relayed cells are always "non-padding".
&gt; 
&gt; But yes you are correct about the directionality here.
&gt; 
&gt; To see exactly what this means, please look at this commit, which adds
&gt; the hooks into Tor's cell processing for both relayed cells and
&gt; originating cells:
&gt; https://github.com/mikeperry-tor/tor/commit/12ff82aa23baec4a6421fa299d152126870f6caf
&gt;  
&gt; And the circpad_deliver_* functions, which dissect those into sent and
&gt; received padding and non-padding events:
&gt; https://github.com/mikeperry-tor/tor/blob/adaptive_padding-rebased_0.3.6-squashed/src/core/or/circuitpadding.c#L1782
&gt; 

As above; let's incorporate this information about what the code does
into the proposal/spec, so it can explain what the code is _supposed_
to do.

&gt; &gt; 4) I like that section 3.1.1 specified delays in terms of
&gt; &gt; microseconds, but we should be aware that with current implementation
&gt; &gt; restrictions, microsecond-level precision is unlikely to actually be
&gt; &gt; realistic.  I hope that's okay.
&gt; 
&gt; Yeah I think it should be fine but we'll see..
&gt; 
&gt; &gt; 5) In section 3.1.1, can we include a formula for the bounds of the n'th bin?
&gt; 
&gt; Hrmm, I had one in the form of pseudocode but asn said it was not
&gt; useful. He asked for this prose description instead... But maybe I can
&gt; write a succinct one-liner that is not too confusing. We certainly had
&gt; them, and have them in the source (see circpad_histogram_bin_to_usec()
&gt; and circpad_histogram_usec_to_bin()).
&gt; 
&gt; &gt; 6) In section 3.1.1, why is a uniform distribution used, and not some
&gt; &gt; other distribution?
&gt; 
&gt; Interpolating seemed excessively complex, and it was not clear it is
&gt; worth it. In order to interpolate, we'd have to get the relative bin
&gt; counts of the current bin, the next bin, compute those weights relative
&gt; to total remaining weight, and then pick some probability distribution
&gt; to sample piece-wise between these two weights?
&gt; 
&gt; Could be done but none of the research so far has indicated that very
&gt; high distribution resolution was that important (though I am not sure if
&gt; the effects of distribution resolution was comparatively studied though,
&gt; either).

This is plausible; can/should we amend the proposal to _allow_ interpolation?

As it stands, any implementation that does anything other than a
uniform distribution is wrong. Is that what we want to say?

&gt; &gt; 7) In section 3.1 (I'm not sure where) can we specify how bins are
&gt; &gt; initialized, and how they are refilled (if at all)?
&gt; 
&gt; Oh this should definitely be in 3.1.2, where we mention the internal
&gt; "bins empty" event. If the "bins empty" event does not cause a state
&gt; transition, the bins are refilled. I can do a fixup to add this
&gt; sentence.
&gt; 
&gt; Maybe we want to make this token refill optional.. Would be kind of
&gt; weird, though.
&gt; 
&gt; &gt; 8) For machine negotiation (in section 3.3), I'd suggest that we have
&gt; &gt; the client send a list of acceptable machines in preference order,
&gt; &gt; rather than demanding a particular machine.  I think a 16-bit
&gt; &gt; identifier is safer than an 8-bit one.  We should reserve an area of
&gt; &gt; the identifier space for experimental use.
&gt; 
&gt; These are good ideas. I'll put them in the TODO file for the
&gt; implementation and update the code and proposal for this.
&gt; 
&gt; &gt; 9) Can we include an example definition of one of these state
&gt; &gt; machines, with pseudocode included?
&gt; 
&gt; Hrmm.. I highly suggest checking out Tobias's blog posts, which the
&gt; proposal cites in Section 4. They are very succinct and accurate. If
&gt; they are insufficient, please explain how they fall short of what you
&gt; want.

That's good but let's summarize one in an appendix or something, so
it's clear what we mean? Feel free to just copy and past from the
appropriate part of one of these posts (with permission of course).

&gt; &gt; 10) Should clients (eventually) begin killing circuits if they receive
&gt; &gt; padding from an unexpected place?
&gt; 
&gt; Yes. This is mentioned in Section 5.3. The vanguards addon will already
&gt; do this when run with the branch.

IIUC, 5.3 only says that the vanguards add-on should do this.  If
clients should do so too, let's say so.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181112143939</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2018-11-12 14:39:39-0400</timestampReceived><subject>[tor-dev] network team weekly meeting - nov 12th</subject><body>

Hi!

This week's network team meeting is on Monday at 1800 UTC.

Our meetings are held on #tor-meeting on OFTC.

cheers,
gaba



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181107171312</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-11-07 17:13:12-0400</timestampReceived><subject>[tor-dev] A few wtf-pad/prop254 questions</subject><body>

Hi!  I'm looking over prop254 and I have a few questions or
clarification requests that I hope will make things clearer to me.
Some of these are probably "wrong questions" that stem from a
misunderstanding of the underlying proposal.

1) What does "ito" stand for?  Is it documented?

2) How is RTT measurement meant to work?  It seems to me from reading
section 3.1 that middle if a middle node sees a delay of N ms between
getting a cell in the forward direction, and getting a cell in the
backward direction, then it will conclude that the RTT is at least N
ms.

But that doesn't make sense to me -- the latter cell might have been
sent in response to a different cell, or sent asynchonously, and not
in response to the first cell at all.  AFAICT unless we can be
reasonably sure that we are seeing a packet that is sent in response
to an earlier cell, be sure that we're actually measuring min(rtt).

Maybe some pseudocode would help me understand better.

3) In section 3.1, I'm assuming that "cell sent" and "cell received"
refer to a cell that we are originating, and a cell that we are
receiving, recognizing, and processing: relayed cells don't count.  Is
that correct?

4) I like that section 3.1.1 specified delays in terms of
microseconds, but we should be aware that with current implementation
restrictions, microsecond-level precision is unlikely to actually be
realistic.  I hope that's okay.

5) In section 3.1.1, can we include a formula for the bounds of the n'th bin?

6) In section 3.1.1, why is a uniform distribution used, and not some
other distribution?

7) In section 3.1 (I'm not sure where) can we specify how bins are
initialized, and how they are refilled (if at all)?

8) For machine negotiation (in section 3.3), I'd suggest that we have
the client send a list of acceptable machines in preference order,
rather than demanding a particular machine.  I think a 16-bit
identifier is safer than an 8-bit one.  We should reserve an area of
the identifier space for experimental use.

9) Can we include an example definition of one of these state
machines, with pseudocode included?

10) Should clients (eventually) begin killing circuits if they receive
padding from an unexpected place?


cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181112183827</emailId><senderName>scootergrisen</senderName><senderEmail>scootergrisen@gmail.com</senderEmail><timestampReceived>2018-11-12 18:38:27-0400</timestampReceived><subject>[tor-dev] Icon misaligned in macOS drag icon dialog</subject><body>

The icon is misaligned in macOS for the installer or whatever it is called.

["torbrowserikon.png" (image/png)]
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181107223912</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-11-07 22:39:12-0400</timestampReceived><subject>Re: [tor-dev] A few wtf-pad/prop254 questions</subject><body>

Nick Mathewson:
&gt; Hi!  I'm looking over prop254 and I have a few questions or
&gt; clarification requests that I hope will make things clearer to me.
&gt; Some of these are probably "wrong questions" that stem from a
&gt; misunderstanding of the underlying proposal.
&gt; 
&gt; 1) What does "ito" stand for?  Is it documented?

"Inactive TimeOut". It is documented in Proposal #251 (Section 2.1).

&gt; 2) How is RTT measurement meant to work?  It seems to me from reading
&gt; section 3.1 that middle if a middle node sees a delay of N ms between
&gt; getting a cell in the forward direction, and getting a cell in the
&gt; backward direction, then it will conclude that the RTT is at least N
&gt; ms.

Yes, where "forward" means "away from origin" and backward means
"towards origin". What the middle node is trying to measure is the
remaining RTT of the rest of the circuit towards the exit, so that it
can simulate response delays if it wishes.

I found Tor's interchanging use of "forward", "outgoing", "incoming",
and "backward" to be somewhat maddening for reasoning about the state
machines. So I defined everything in terms of direction of packets *from
the perspective of the state machine*.
 
&gt; But that doesn't make sense to me -- the latter cell might have been
&gt; sent in response to a different cell, or sent asynchonously, and not
&gt; in response to the first cell at all.  AFAICT unless we can be
&gt; reasonably sure that we are seeing a packet that is sent in response
&gt; to an earlier cell, be sure that we're actually measuring min(rtt).

This is why the RTT measurement stops as soon as two back-to-back cells
arrive in either direction on a circuit. Two back-to-back cells in
either direction means the 1:1 request/response pattern of circuit
setup/RELAY_BEGIN is now over (though we do wait for one more response
counting time from the head of the first request packet train, to
measure optimistic data response times).

Note that there is a huge looming issue with how we decide to handle
var_cell_t. Right now, Proposal #249 is very ambiguous wrt how
RELAY_EARLY and var cells interact. If we instead made it a MUST that
the first var_cell piece is always RELAY_EARLY and subsequent fragments
are RELAY, then middle nodes could still compute RTT during circuit
setup using this back-to-back heuristic for RELAY_EARLY cells.
Otherwise, I am not sure what we can do here.
 
&gt; Maybe some pseudocode would help me understand better.

Current implementation is in circpad_estimate_circ_rtt_on_receieved()
and circpad_estimate_circ_rtt_on_send()
https://github.com/mikeperry-tor/tor/blob/adaptive_padding-rebased_0.3.6-squashed/src/core/or/circuitpadding.c#L1245
  
&gt; 3) In section 3.1, I'm assuming that "cell sent" and "cell received"
&gt; refer to a cell that we are originating, and a cell that we are
&gt; receiving, recognizing, and processing: relayed cells don't count.  Is
&gt; that correct?

Relayed cells do count. Relayed cells are always "non-padding".

But yes you are correct about the directionality here. 

To see exactly what this means, please look at this commit, which adds
the hooks into Tor's cell processing for both relayed cells and
originating cells:
https://github.com/mikeperry-tor/tor/commit/12ff82aa23baec4a6421fa299d152126870f6caf

And the circpad_deliver_* functions, which dissect those into sent and
received padding and non-padding events:
https://github.com/mikeperry-tor/tor/blob/adaptive_padding-rebased_0.3.6-squashed/src/core/or/circuitpadding.c#L1782


&gt; 4) I like that section 3.1.1 specified delays in terms of
&gt; microseconds, but we should be aware that with current implementation
&gt; restrictions, microsecond-level precision is unlikely to actually be
&gt; realistic.  I hope that's okay.

Yeah I think it should be fine but we'll see..

&gt; 5) In section 3.1.1, can we include a formula for the bounds of the n'th bin?

Hrmm, I had one in the form of pseudocode but asn said it was not
useful. He asked for this prose description instead... But maybe I can
write a succinct one-liner that is not too confusing. We certainly had
them, and have them in the source (see circpad_histogram_bin_to_usec()
and circpad_histogram_usec_to_bin()). 
 
&gt; 6) In section 3.1.1, why is a uniform distribution used, and not some
&gt; other distribution?

Interpolating seemed excessively complex, and it was not clear it is
worth it. In order to interpolate, we'd have to get the relative bin
counts of the current bin, the next bin, compute those weights relative
to total remaining weight, and then pick some probability distribution
to sample piece-wise between these two weights?

Could be done but none of the research so far has indicated that very
high distribution resolution was that important (though I am not sure if
the effects of distribution resolution was comparatively studied though,
either).

&gt; 7) In section 3.1 (I'm not sure where) can we specify how bins are
&gt; initialized, and how they are refilled (if at all)?

Oh this should definitely be in 3.1.2, where we mention the internal
"bins empty" event. If the "bins empty" event does not cause a state
transition, the bins are refilled. I can do a fixup to add this
sentence.

Maybe we want to make this token refill optional.. Would be kind of
weird, though.

&gt; 8) For machine negotiation (in section 3.3), I'd suggest that we have
&gt; the client send a list of acceptable machines in preference order,
&gt; rather than demanding a particular machine.  I think a 16-bit
&gt; identifier is safer than an 8-bit one.  We should reserve an area of
&gt; the identifier space for experimental use.

These are good ideas. I'll put them in the TODO file for the
implementation and update the code and proposal for this.
 
&gt; 9) Can we include an example definition of one of these state
&gt; machines, with pseudocode included?

Hrmm.. I highly suggest checking out Tobias's blog posts, which the
proposal cites in Section 4. They are very succinct and accurate. If
they are insufficient, please explain how they fall short of what you
want.
 
&gt; 10) Should clients (eventually) begin killing circuits if they receive
&gt; padding from an unexpected place?

Yes. This is mentioned in Section 5.3. The vanguards addon will already
do this when run with the branch.


-- 
Mike Perry
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181112200847</emailId><senderName>Kathleen Brade</senderName><senderEmail>brade@pearlcrescent.com</senderEmail><timestampReceived>2018-11-12 20:08:47-0400</timestampReceived><subject>Re: [tor-dev] Icon misaligned in macOS drag icon dialog</subject><body>

On 11/12/18 1:38 PM, scootergrisen wrote:
&gt; The icon is misaligned in macOS for the installer or whatever it is called.

Hi.  This is issue #26263.
See:  https://trac.torproject.org/projects/tor/ticket/26263

The fix is already present in our alpha series.
Thanks for reporting this!

-- Kathy

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181112180652</emailId><senderName>scootergrisen</senderName><senderEmail>scootergrisen@gmail.com</senderEmail><timestampReceived>2018-11-12 18:06:52-0400</timestampReceived><subject>[tor-dev] Empty menu item in Help menu</subject><body>

I tried testing Tor Browser in macOS (VirtualBox) and at the bottom of 
the Help menu i see a empty menu item.

If i remember correct nothing happened if i clicked it.

["torbrowser.png" (image/png)]
[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181112201700</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-11-12 20:17:00-0400</timestampReceived><subject>Re: [tor-dev] Empty menu item in Help menu</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


scootergrisen:
&gt; I tried testing Tor Browser in macOS (VirtualBox) and at the bottom of
&gt; the Help menu i see a empty menu item.
&gt;=20
&gt; If i remember correct nothing happened if i clicked it.

Yeah, that's https://trac.torproject.org/projects/tor/ticket/22942.

Thanks,
Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181115222508</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-11-15 22:25:08-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

I spent some time reading through the Mix and Match proposal. I'm not
sure I understand it.

In particular, I am confused about:

The proposal seems to focus heavily on what we do with state we
receive as part of the redirect. Do we promote it, do we leave it
double keyed. It doesn't seem to explain how we choose what state to
_send_. For example:

&gt; For instance, in a redirect chain from foo.com -&gt; tracker.com -&gt; bar.com,
&gt; the tracker.com cookies will be double keyed foo.com|tracker.com, while
&gt; the bar.com cookies will be double keyed foo.com|bar.com. However, after
&gt; the user begins to interact with bar.com, bar.com is promoted to be the
&gt; First Party Domain, and Cookies set on the initial redirect need to be
&gt; moved under the bar.com key.

When we send a request to foo.com, I assume we will send any current
cookies we have keyed under foo.com|foo.com[0]. When we receive a
redirect to tracker.com - how do we choose what state to send? We
don't know head of time whether it will give us a redirect or not, so
are we sending it any state we have under tracker.com|tracker.com
(treating it as a first party) or are we sending it any state we have
under foo.com|tracker.com?

The latter is better for privacy; but it would require you to
re-sign-in via Oauth a lot (pretend tracker.com is oauth.com); and I'm
nervous it would break login flows. Especially if you interact with
oauth.com and that seems to promote it into oauth.com|oauth.com and
then you later go through foo.com|oauth.com and there's no state
there...


[0] I'm pretty sure that we use the First Party Domain as both the
primary and secondary key for state under the first party; right? In
any event, when I say foo.com|foo.com I mean data keyed under the
foo.com first party.


I'm also a bit confused about the difference between different targets
of redirects.  It seems like:
- If the target is example.com: we don't double-key or need to promote
upon interaction
- If the target is example.com?lang=en: we do double-key any state
set, and upon user interaction promote the state to first party.
- If the target is example.com/foo/bar.html: we do double-key any
state set, and upon user interaction promote the state to first party.


Finally, in a multi-redirect scenario like a.com -&gt; b.com -&gt; c.com,
I'm unsure if there is a difference in how we handle state we receive
for b.com if:
- The target is b.com
- The target is b.com?lang=en
- The target is b.com/foo/bar.html




I started drawing out a matrix of what happens when. I came up with
the following. I don't think I understand the proposal well enough to
fill it out.  I'm hoping I will be able to do so though! I'm going to
paste it in its entirety:


----------
Single-Redirect, Before User Interaction

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com (before any user interaction):
- To aaa.com you send state keyed under aaa.com|aaa.com
- To ccc.com you send state keyed under ccc.com|ccc.com
- The browser deposits you at ccc.com
- Any cookies or other state set by aaa.com is set normally according
to FPI rules, so will be keyed under aaa.com|aaa.com
- Any cookies or other state set by ccc.com is set normally according
to FPI rules, so will be keyed under ccc.com|ccc.com

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com?lang=en (before any user interaction):
- To aaa.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is keyed under ??
- Any cookies or other state set by ccc.com is keyed under ??

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com/new-foo/blah.html (before any user interaction):
- To aaa.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is keyed under ??
- Any cookies or other state set by ccc.com is keyed under ??

----------
Single-Redirect, After User Interaction
Perhaps you scroll the page at ccc.com or perhaps click a link or
highlight some text.

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com, and then you interact:
- To aaa.com you send state keyed under aaa.com|aaa.com
- To ccc.com you send state keyed under ccc.com|ccc.com
- The browser deposits you at ccc.com
- There is no change to state for aaa.com, as it is already stored
under aaa.com|aaa.com
- There is no change to state for ccc.com, as it is already stored
under ccc.com|ccc.com

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com?lang=en, and then you interact:
- To aaa.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is migrated(?) and now
keyed under ??
- Any cookies or other state set by ccc.com is migrated(?) and now
keyed under ??

Click a link for aaa.com/foo/blah.html and the response redirects to
ccc.com/new-foo/blah.html, and then you interact:
- To aaa.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is migrated(?) and now
keyed under ??
- Any cookies or other state set by ccc.com is migrated(?) and now
keyed under ??


----------
Multi-Redirect, Before User Interaction

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and the bbb.com response then redirects to ccc.com (before any
user interaction):
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ccc.com
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and then bbb.com response then redirects you to
ccc.com?lang=en (before any user interaction):
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and then the bbb.com response redirects you to
ccc.com/new-foo/blah.html (before any user interaction):
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???


*** Is there any behavior change between a the middle redirect that
goes to bbb.com vs bbb.com/?querystring or bbb.com/foo/bar.html ***


----------
Multi-Redirect, After User Interaction
Perhaps you scroll the page at ccc.com or perhaps click a link or
highlight some text.

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and the bbb.com response then redirects to ccc.com, and then
you interact:
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ccc.com
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and then bbb.com response then redirects you to
ccc.com?lang=en, and then you interact:
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???

Click a link for aaa.com/foo/blah.html and the response redirects to
bbb.com and then the bbb.com response redirects you to
ccc.com/new-foo/blah.html, and then you interact:
- To aaa.com you send state keyed under ???
- To bbb.com you send state keyed under ???
- To ccc.com you send state keyed under ???
- The browser deposits you at ??
- Any cookies or other state set by aaa.com is ???
- Any cookies or other state set by bbb.com is ???
- Any cookies or other state set by ccc.com is ???

*** Is there any behavior change between a the middle redirect that
goes to bbb.com vs bbb.com/?querystring or bbb.com/foo/bar.html ***
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181117164020</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-11-17 16:40:20-0400</timestampReceived><subject>Re: [tor-dev] How does Tor plan to deal with HTTP/3 (HTTP over QUIC)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 15/11/18 02:02, neel@neelc.org wrote:
&gt; How would Tor deal with HTTP/3 (a.k.a. HTTP over QUIC), considering tha=
t Tor is a TCP anonymizer, and HTTP over QUIC (and QUIC itseld) uses UDP?=
 Would we need Tor to support UDP? Just QUIC?

One reason we don't support UDP in Tor because it is connection-less,
and the connection concept in TCP means that the server at the other end
needs to accept the connection before we start sending larger amounts of
data to it.

Saying this, QUIC is not UDP. It may use UDP for the sake of middlebox
traversal but is in fact a connection-oriented transport protocol. (If
you ignore the unreliable datagrams draft currently in the IETF QUIC WG).=


This recent presentation at the IETF looks at some of the ways that QUIC
and HTTP/QUIC can be tunneled from the perspective of the client
interface and the exit relay:

https://datatracker.ietf.org/meeting/102/materials/slides-102-httpbis-hin=
t-and-helium-for-udp-and-ip-tunnelling-00

To really get benefits from things like streams, it could be necessary
to map some of the QUIC internals into the Tor protocol.

Note that SOCKS 5 actually does already support UDP, we just don't
implement this part of the protocol for clients.

I'm not a Network Team person so I don't know if this is currently
something being considered, but given that the IETF hasn't actually
standardized QUIC yet this is probably not going to be needed urgently.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181115020259</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2018-11-15 02:02:59-0400</timestampReceived><subject>[tor-dev] How does Tor plan to deal with HTTP/3 (HTTP over QUIC)</subject><body>

Hi @tor-dev mailing list,

How would Tor deal with HTTP/3 (a.k.a. HTTP over QUIC), considering that Tor is a TCP \
anonymizer, and HTTP over QUIC (and QUIC itseld) uses UDP? Would we need Tor to \
support UDP? Just QUIC?

Thanks,

Neel Chauhan

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827035001</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-27 03:50:01-0400</timestampReceived><subject>[tor-dev] Bandwidth scanner: request for feedback</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Juga and pastly have been working hard on sbws.

Sbws' results are now similar to torflow's results:
https://trac.torproject.org/projects/tor/attachment/ticket/27135/20180826_081902.png

Now that sbws is close to torflow, we want some feedback on its
design. We'll work on the design at the tor meeting in September.

Please feel free to give feedback by email, or on the tickets:


What happens when sbws doesn't match torflow?

https://trac.torproject.org/projects/tor/ticket/27339

We suggest this rule:

If an sbws deployment is within X% of an existing bandwidth
authority, sbws is ok. (The total consensus weights of the
existing bandwidth authorities are within 25% - 50% of each
other, see #25459.)


How long should sbws keep relay bandwidths?

https://trac.torproject.org/projects/tor/ticket/27338

Torflow uses the latest self-reported relay observed bandwidth
and bandwidth rate.

Torflow uses a complex feedback loop for measured bandwidths.
We think sbws can use a simple average or exponentially
decaying weighted average.


How should we scale sbws consensus weights?

https://trac.torproject.org/projects/tor/ticket/27340

If sbws' total consensus weight is different to torflow's total
consensus weight, how should we scale sbws?

(The weights might differ because the measurement method is
different, or because scanners and servers are in different
locations.)

In the bandwidth file spec, we suggest linear scaling.


How should we round sbws consensus weights?

https://trac.torproject.org/projects/tor/ticket/27337

Torflow currently rounds to 3 significant figures (which is a maximum
of 0.5%). But I suggest 2 significant figures for sbws (or max 5%),
because:
- tor has a daily usage cycle that varies by 10% - 20%
- existing bandwidth authorities vary by 25% - 50%

Proposal 276 contains a slightly more complicated rounding algorithm,
which we may want to implement in sbws or in tor:

https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt


Does sbws need a maximum consensus weight fraction?

https://trac.torproject.org/projects/tor/ticket/27336

Torflow uses 5%, but I suggest 1%, because the largest relay right
now is only 0.5%.

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAluDdOkACgkQEP6qDnB1
ZyocUw/9EoBb8YdvUErdwdcK6cIKLV1WsrCCbccxE1rNvZGK7Df9QUDvqz+T8usU
cqTJWKpIpCXi4vihjXCBzyRER6JJaJmrlMl+Z+78U5gzkL7zv7pKU+mfyrepdmU2
CG9HdVNZ90X13dbRseWt3iNYnQJsTf0+rf6TEUvKklB0uHs0l828VLGsCfWl7MVg
2NXKXa1FG5e/7WLDM094gKBBViQjcRZtHnqJ/OpCak3sIp4Grr37lv7vqVqs0ALM
VQ4lIFlZhRyPNKaPN+XxnUf+42/juVBCD93IlrT2Cs1vv2Ul2reJkqR+trm8CmYt
68Z5xE+OZKHek71xMW+wPkou6ICvGVkQLQgMErFW93wED0GpBLaQSnk8nYCGj7Vq
7Z4i1WQx2WsG5htwtoS2gISnBhx82SQvPP1AlId7QNNpKBPrzSqlQfTLHmDjXaae
6ftHN209RZUpcejsqB8SbUr6QJ1/4v4+a9BSGNAcuKaWz5IKniX6WyXtBiuqbZsj
fbzbW/JBzZlx0eD0qwtj2OS7wGNXpm+fnUtL62HzCcJl/Jtg5bhh8h/fQbpKy2vC
MPBfsudHZwHRHXxOePrOBdV0bvuTKFf846GN6D2vilc+WUdC/mgKB1s8yCgxKtvg
9UbUdUy5vCShz07FC9FfzyAqFJdvkQHJrtY7XlL2HRbB4uNyEQ8=
=zdrZ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829211157</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-08-29 21:11:57-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth scanner: request for feedback</subject><body>

[Attachment #2 (multipart/signed)]


teor:
&gt; Hi,
&gt; 
&gt; Juga and pastly have been working hard on sbws.
&gt; 
&gt; Sbws' results are now similar to torflow's results:
&gt; https://trac.torproject.org/projects/tor/attachment/ticket/27135/20180826_081902.png

Congratulations, Juga and pastly! 
 
&gt; Now that sbws is close to torflow, we want some feedback on its
&gt; design. We'll work on the design at the tor meeting in September.
&gt; 
&gt; Please feel free to give feedback by email, or on the tickets:
&gt; 
&gt; 
&gt; What happens when sbws doesn't match torflow?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/27339
&gt; 
&gt; We suggest this rule:
&gt; 
&gt; If an sbws deployment is within X% of an existing bandwidth
&gt; authority, sbws is ok. (The total consensus weights of the
&gt; existing bandwidth authorities are within 25% - 50% of each
&gt; other, see #25459.)

I would like an additional criteria for when we finally replace torflow
with sbws.

Ideally, I would like us to perform A/B experiments to ensure that our
performance metrics do not degrade in terms of average *or* quartile
range/performance variance. (Ie: alternate torflow results for a week vs
sbws for a week, and repeat for a few weeks). I realize this might be
complicated for dirauth operators, though. Can we make it easier
somehow, so that it is easy to switch which result files they are voting
with?

If we can't do this, at minimum, we should definitely watch the change
in our average and quartile variance performance metrics when we first
switch to sbws.

Additionally, if we ever change how sbws behaves to be different than
torflow, I would like sbws to have a well-defined load balancing
equilibrium goal, and I would like us to not change this load balancing
equilibrium goal unless we perform A/B testing and compare the average
and variance of our performance metrics.

I'll explain what I mean by "load balancing equilibrium goal" below,
when I try to explain the PID mechanism again.

&gt; How long should sbws keep relay bandwidths?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/27338
&gt; 
&gt; Torflow uses the latest self-reported relay observed bandwidth
&gt; and bandwidth rate.
&gt; 
&gt; Torflow uses a complex feedback loop for measured bandwidths.
&gt; We think sbws can use a simple average or exponentially
&gt; decaying weighted average.

As I said in
https://lists.torproject.org/pipermail/tor-dev/2017-December/012714.html,
this feedback loop is disabled. I know you don't believe that the
bandwidth auth spec is accurate, but I'm telling you it is.  There's
just a lot going on there because the bwauths have required a long
history of experimentation to get to where they are now, just as sbws is
now encountering with trying to make various measurement and scaling
decisions. (As you A/B test ways to improve performance on the live
network, you tend to accumulate a lot of options for different ways of
doing things).

The point of the PID control stuff was to formalize the type of load
balancing equilibrium goal that the bandwidth auths are using, and to
experiment with convergence on a specific target load balancing
equilibrium point (where that target equilibrium point is "all relays
have the same spare capacity for one additional client stream"). The
problem was that when you only use this criteria, faster relays run out
of CPU, memory, or sockets before this criteria was satisfied for them.
Hence all of the circuit failure reason statistics in the code base (to
try to back off on PID control if we hit a different limiting factor
other than bandwidth).

Unfortunately, Tor does not provide enough error code feedback to
reliably determine if a relay is low on memory, sockets, or CPU. Funding
ended for the bandwidths auths before we could implement proper overload
error feedback in Tor, and we got funding for me to work on Tor Browser
instead.

With the parameters in the current consensus (currently bwauthpid=1, and
no others), the PID control is operating as only "Proportional control":
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n476
(The default values for K_i and K_d are 0, as per Section 3.6 of the
spec).

In section 3.1 of the spec, I have a proof that using "Proportional
control" (ie PID control with no I or D) is equivalent to what we were
doing in Section 2.2. This means that Section 2.2 does describe what we
are doing now:
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n390
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n298

I left the PID code itself enabled (but in "Proportional-only" mode)
because it is cleaner, and it makes it formally clear that the bandwidth
authorities are actually measuring the difference in the ability of
relays to carry additional client traffic, and correcting for that
difference by adjusting weights in proportion to that difference. I
naively assumed that eventually Tor would get funding to implement
better feedback for CPU, memory, and socket overload. That was almost 10
years ago. 

(Incidentally, the trickiest non-bandwidth overload condition to report
was memory shortage -- a problem that effectively goes away in a
datagram Tor world with bounded queue lengths.. In fact, CPU limits
could also be implemented as a congestion drop condition in a datagram
scenario, and measured indirectly via relay throughput, leaving only
socket limits.)

 
I'm glad that we are exploring load balancing again, and with a modern,
simpler, and well-tested code base. That's all good. But as you make
choices about how to load balance, please have a specific goal as to
what target load balancing equilibrium point you're actually going for.

(The reason why I did not consider raw measured stream bandwidth to be a
valid equilibrium is because it is *not* measuring the total capacity of
a relay, and it does not have an equilibrium point in terms of expected
client performance or overall load balancing. In order to use raw
measurements directly as a load balancing equilibrium point, you
actually need to measure total relay throughput in some way, such as
Peerflow did).

&gt; How should we scale sbws consensus weights?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/27340
&gt; 
&gt; If sbws' total consensus weight is different to torflow's total
&gt; consensus weight, how should we scale sbws?
&gt; 
&gt; (The weights might differ because the measurement method is
&gt; different, or because scanners and servers are in different
&gt; locations.)
&gt; 
&gt; In the bandwidth file spec, we suggest linear scaling.

This seems reasonable.

I am wary of the idea of trying to use some kind of ideal distribution
for relays, that you mention in #27135. That is not something that you
can enforce in measurement without causing performance variance to
suffer tremendously. It can only be enforced by a consensus cutoff
threshold and/or relay operator incentive mechanisms.

I believe quite strongly that even if the Tor network gets faster on
average, if this comes at the cost of increased performance variance,
user experience and perceived speed of Tor will be much worse. There's
nothing more annoying than a system that is *usually* fast enough to do
what you need it to do, but fails to be fast enough for that activity at
unpredictable times.

&gt; How should we round sbws consensus weights?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/27337
&gt; 
&gt; Torflow currently rounds to 3 significant figures (which is a maximum
&gt; of 0.5%). But I suggest 2 significant figures for sbws (or max 5%),
&gt; because:
&gt; - tor has a daily usage cycle that varies by 10% - 20%
&gt; - existing bandwidth authorities vary by 25% - 50%
&gt; 
&gt; Proposal 276 contains a slightly more complicated rounding algorithm,
&gt; which we may want to implement in sbws or in tor:
&gt; 
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt

If we can measure relays frequently enough such that we can accurately
report the effects of Tor's daily usage cycle and adjust our weights
accordingly, then I think that retaining the ability to represent this
variance is worth the overhead.

Again, this comes back to my belief that performance variance is
actually the major performance problem facing Tor right now.

On the other hand, if we cannot measure accurately or often enough for
this to matter, then it doesn't matter.

But a successor to sbws might, if we can manage to build one sooner than
a decade from now, so it would be wise not to bake this sig fig limit
into our actual consensus format.

&gt; Does sbws need a maximum consensus weight fraction?
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/27336
&gt; 
&gt; Torflow uses 5%, but I suggest 1%, because the largest relay right
&gt; now is only 0.5%.

Sounds reasonable.

If we ever get working multi-core crypto+networking, this number will
change, though.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181119123628</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-19 12:36:28-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth scanner: request for feedback</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

We have deployed sbws on one bandwidth authority (longclaw).

Here's a request for additional feedback, and a progress update:


Request for Feedback: Relay Bandwidth Self-Tests

Torflow and sbws use relays' self-reported observed bandwidths for
load balancing. But relays can have really low bandwidths because
they're new, or due to random path selection.

In torflow, relays can get stuck in a low-bandwidth partition. sbws
doesn't have partitions. But in both systems, low bandwidths can
cause inaccurate or unstable load balancing.

Since torflow and sbws need accurate self-reported relay bandwidths,
some component of the Tor network needs to send enough bandwidth
through every relay.

Here are our current choices:

Tor relays can do a regular bandwidth self-test, so that their
first descriptor has an accurate bandwidth (up to some minimum). But
the current self-test is too small, and buggy.

sbws already sends bandwidth to all relays to measure them. sbws gets
accurate bandwidths for most relays within 2 weeks, but the fastest
relays can take a month to ramp up. (sbws starts measuring at the
median relay bandwidth, and can double every 5 days.)

Should we improve relay bandwidth self-tests? (#22453)
Or should we rely on sbws to create the bandwidths it needs?
What about test networks?

Should we make bandwidths grow faster in sbws?
Or is a ramp-up period of 2-5 weeks fast enough?

(We won't modify and re-deploy torflow.)


Progress Update

&gt; On 30 Aug 2018, at 07:11, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; teor:
&gt; &gt; 
&gt; &gt; What happens when sbws doesn't match torflow?
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27339
&gt; &gt; 
&gt; &gt; We suggest this rule:
&gt; &gt; 
&gt; &gt; If an sbws deployment is within X% of an existing bandwidth
&gt; &gt; authority, sbws is ok. (The total consensus weights of the
&gt; &gt; existing bandwidth authorities are within 25% - 50% of each
&gt; &gt; other, see #25459.)

We have successfully used this rule to discover and fix some bugs in
sbws.

&gt; I would like an additional criteria for when we finally replace torflow
&gt; with sbws.
&gt; 
&gt; Ideally, I would like us to perform A/B experiments to ensure that our
&gt; performance metrics do not degrade in terms of average *or* quartile
&gt; range/performance variance. (Ie: alternate torflow results for a week vs
&gt; sbws for a week, and repeat for a few weeks). I realize this might be
&gt; complicated for dirauth operators, though. Can we make it easier
&gt; somehow, so that it is easy to switch which result files they are voting
&gt; with?

We do not have the capacity to A/B test sbws and torflow.
(As far as I understand, we don't have enough people, and we don't have
enough servers.)

&gt; If we can't do this, at minimum, we should definitely watch the change
&gt; in our average and quartile variance performance metrics when we first
&gt; switch to sbws.

We deployed sbws on 1/6 bandwidth authorities, and the performance of
the network has been stable:
https://metrics.torproject.org/torperf.html?start=2018-01-21&amp;end=2018-11-19&amp;source=all&amp;server=public&amp;filesize=50kb


(The drop in performance at the start of the year was due to extra
network load.)

&gt; Additionally, if we ever change how sbws behaves to be different than
&gt; torflow, I would like sbws to have a well-defined load balancing
&gt; equilibrium goal, and I would like us to not change this load balancing
&gt; equilibrium goal unless we perform A/B testing and compare the average
&gt; and variance of our performance metrics.
&gt; 
&gt; I'll explain what I mean by "load balancing equilibrium goal" below,
&gt; when I try to explain the PID mechanism again.

sbws has adopted Torflow's load-balancing equilibrium goal.

Our priority is transitioning away from Torflow successfully.

We've deferred changes to the load-balancing goal until a later sbws
release. We may never make this change.

&gt; &gt; How long should sbws keep relay bandwidths?
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27338
&gt; &gt; 
&gt; &gt; Torflow uses the latest self-reported relay observed bandwidth
&gt; &gt; and bandwidth rate.
&gt; &gt; 
&gt; &gt; Torflow uses a complex feedback loop for measured bandwidths.
&gt; &gt; We think sbws can use a simple average or exponentially
&gt; &gt; decaying weighted average.
&gt; 
&gt; As I said in
&gt; https://lists.torproject.org/pipermail/tor-dev/2017-December/012714.html,
&gt; this feedback loop is disabled. I know you don't believe that the
&gt; bandwidth auth spec is accurate, but I'm telling you it is.

Improving bandwidth measurement has been one of the most difficult
things I have done with Tor.

You're right: I don't know if the Torflow spec is accurate, because I
often struggle to find the information I need in the spec.

That's not anyone's fault: it's a difficult and complex topic. But it
does mean that I need your help to answer some questions about Torflow.

&gt; The point of the PID control stuff was to formalize the type of load
&gt; balancing equilibrium goal that the bandwidth auths are using, and to
&gt; experiment with convergence on a specific target load balancing
&gt; equilibrium point (where that target equilibrium point is "all relays
&gt; have the same spare capacity for one additional client stream"). The
&gt; problem was that when you only use this criteria, faster relays run out
&gt; of CPU, memory, or sockets before this criteria was satisfied for them.
&gt; Hence all of the circuit failure reason statistics in the code base (to
&gt; try to back off on PID control if we hit a different limiting factor
&gt; other than bandwidth).
&gt; 
&gt; ...
&gt; 
&gt; I'm glad that we are exploring load balancing again, and with a modern,
&gt; simpler, and well-tested code base. That's all good. But as you make
&gt; choices about how to load balance, please have a specific goal as to
&gt; what target load balancing equilibrium point you're actually going for.

sbws has adopted Torflow's goals.

&gt; &gt; How should we scale sbws consensus weights?
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27340
&gt; &gt; 
&gt; &gt; If sbws' total consensus weight is different to torflow's total
&gt; &gt; consensus weight, how should we scale sbws?
&gt; &gt; 
&gt; &gt; (The weights might differ because the measurement method is
&gt; &gt; different, or because scanners and servers are in different
&gt; &gt; locations.)
&gt; &gt; 
&gt; &gt; In the bandwidth file spec, we suggest linear scaling.
&gt; 
&gt; This seems reasonable.

Unfortunately, linear scaling did not work.

sbws now uses Torflow's scaling method, with relay observed bandwidths.

&gt; ...
&gt; 
&gt; I believe quite strongly that even if the Tor network gets faster on
&gt; average, if this comes at the cost of increased performance variance,
&gt; user experience and perceived speed of Tor will be much worse. There's
&gt; nothing more annoying than a system that is *usually* fast enough to do
&gt; what you need it to do, but fails to be fast enough for that activity at
&gt; unpredictable times.

I agree. And I'm usually using Tor in high-latency locations, so I see
this variance every day.

&gt; &gt; How should we round sbws consensus weights?
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27337
&gt; &gt; 
&gt; &gt; Torflow currently rounds to 3 significant figures (which is a maximum
&gt; &gt; of 0.5%). But I suggest 2 significant figures for sbws (or max 5%),
&gt; &gt; because:
&gt; &gt; - tor has a daily usage cycle that varies by 10% - 20%
&gt; &gt; - existing bandwidth authorities vary by 25% - 50%
&gt; &gt; 
&gt; &gt; Proposal 276 contains a slightly more complicated rounding algorithm,
&gt; &gt; which we may want to implement in sbws or in tor:
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/276-lower-bw-granularity.txt
&gt; &gt; 
&gt; 
&gt; If we can measure relays frequently enough such that we can accurately
&gt; report the effects of Tor's daily usage cycle and adjust our weights
&gt; accordingly, then I think that retaining the ability to represent this
&gt; variance is worth the overhead.
&gt; 
&gt; Again, this comes back to my belief that performance variance is
&gt; actually the major performance problem facing Tor right now.
&gt; 
&gt; On the other hand, if we cannot measure accurately or often enough for
&gt; this to matter, then it doesn't matter.

I don't believe sbws can measure relays fast enough for it to matter.

sbws was rounding to the nearest 1000 kilobytes on 1/6 authorities, with
no discernible performance on the network. We've fixed this bug, and
sbws will now round to 2 significant figures. (We haven't implemented the
extra last-digit rounding in prop276.)

If sbws can measure fast enough in future, we can modify it to report more
accurate bandwidths.

&gt; But a successor to sbws might, if we can manage to build one sooner than
&gt; a decade from now, so it would be wise not to bake this sig fig limit
&gt; into our actual consensus format.

Thanks, we won't modify tor to round bandwidths: that responsibility
belongs in the bandwidth measurement code.

But tor's consensus diffs and compression benefit from rounded relay
bandwidths, so any performance gain needs to be measured against an
increase in consensus download sizes.

&gt; &gt; Does sbws need a maximum consensus weight fraction?
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27336
&gt; &gt; 
&gt; &gt; Torflow uses 5%, but I suggest 1%, because the largest relay right
&gt; &gt; now is only 0.5%.
&gt; 
&gt; Sounds reasonable.
&gt; 
&gt; If we ever get working multi-core crypto+networking, this number will
&gt; change, though.

We went with 5%, to match Torflow.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlvyrkwACgkQEP6qDnB1
ZyqCHA//WE27lXf89O4kWgrWgXacqP0BMieiECOMEG7CYh1NNbIPmTNBBxtyhOlt
D/bPLzGHN5cxjjEfd5CHyCD+9wGw33HghTD5W7jze4dkC4dr76cT7FOVcvebJE5o
BWscuOOelBPwxCKlsWSfEvkz30uS5Z63kYCWlTPY1sgxjlchlfX7jTY939atsiz4
gzqNkaOxoxTsXFZLPrlh3ry0JUUHTO8E3Td3ClyAKU3aoUsLzaJ9xju4OMdfKtP5
5HHw6bH7a7z+vQiSXcFQc5pEryrzN2WHZGs1arCG3T3C/tMFiRmVj8aO3bxGozOM
LmofZpZQprJQlfwt6xzx5qtGBobiDckhALPbm5eOVMl/PjkNnj/0Mi3D3MXznnVe
i8rdCIpYOtdhGgHLLDsHAmTtmS1pkpP0C+O3Vr5oEDOoIvo/RDl7fGenPcj020Ys
HzuWfO5MZ6xGovuonlcx0S+Hhtw30fnanRdLWBbP+RMfmhDUeB3Nrs+DaNVdK5j+
6r3OXhV5Pz3LloFO2s1IBex6fkmiGnmx1U8CZyECJgZaKFFVKDMy2+Nqm3rMpKDg
x+4Ih7JhoYxiQU4MKQJ0k+UnhuQPdz4jvzC7Sb3V12CnHmOJyHYdHqTCBCO5L/br
QPRAeUKKsYebQ1Dj1X8/Lbrs1vTxRdpWa18emluLI+gAHTRqDzk=
=oxgH
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181120001922</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-20 00:19:22-0400</timestampReceived><subject>[tor-dev] PrivCount and Prio IRC Meeting</subject><body>

[Attachment #2 (--Apple-Mail-7E063FCC-BBFD-49A7-ABD4-E594A9617B5E)]


Hi all,

We are meeting to discuss PrivCount and Prio at 2200 UTC on
Tuesday 20 November in #tor-meeting on irc.oftc.net.

We will log the meeting, so that people who can't attend can catch
up later.

Here's some background:

Henry Corrigan-Gibbs recently built a private statistics system
called Prio &lt;https://crypto.stanford.edu/prio/&gt; that is now used for
privately collecting telemetry at Mozilla
&lt;https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/&gt;.
 It provides a similar functionality to PrivCount
&lt;https://ohmygodel.com/publications/privcount-ccs2016.pdf&gt; that Tor is
planning to use, and also provides strong robustness against malformed or
malicious reports.


Some questions we'll discuss:

How can we design Tor's statistics to make it easy to:
* defend against corruption attacks, and
* support more complex aggregate statistics.

How does PrivCount in Tor's design handle aggregation
server failures?

Some background:

Here's my quick comparison of Prio and PrivCount in Tor:
* Prio servers can do complex calculations using linear data structures
* PrivCount is limited to additive totals (and histograms)

* Prio servers can defend against corruption attacks using SNIPs
  (secret non-interactive proofs)
* PrivCount in Tor has an optional scheme to defend against corruption,
  but it requires adding additional noise

* Prio doesn't have differential privacy (yet)
* PrivCount guarantees differential privacy across the entire set of
  statistics

* Prio increases security by failing when one server fails
* PrivCount in Tor is robust to server failure, and compensates
  for the decreased security by adding more noise
  (The PrivCount design used for our research papers was not
   robust, and failed whenever any server or client failed.)


Here are our latest specs, notes, and code for PrivCount in Tor:
https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt
https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount
https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical
https://github.com/nmathewson/privcount_shamir

T

-- 
teor
----------------------------------------------------------------------


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;Hi \
all,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We are meeting to discuss PrivCount and Prio at 2200 UTC \
on&lt;/div&gt;&lt;div&gt;Tuesday 20 November in #tor-meeting on &lt;a \
href="http://irc.oftc.net"&gt;irc.oftc.net&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We will log the \
meeting, so that people who can't attend can catch&lt;/div&gt;&lt;div&gt;up \
later.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's some \
background:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Henry Corrigan-Gibbs recently built a private statistics \
system&lt;br&gt;called Prio &lt;&lt;a href="https://crypto.stanford.edu/prio/" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="8"&gt;https://crypto.stanford.edu/prio/&lt;/a&gt;&gt; that is \
now used for&lt;br&gt;privately collecting telemetry at Mozilla&lt;br&gt;&lt;&lt;a \
href="https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="9"&gt;https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/&lt;/a&gt;&gt;.&lt;br&gt; It \
provides a similar functionality to PrivCount&lt;br&gt;&lt;&lt;a \
href="https://ohmygodel.com/publications/privcount-ccs2016.pdf" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="10"&gt;https://ohmygodel.com/publications/privcount-ccs2016.pdf&lt;/a&gt;&gt; \
that Tor is&lt;br&gt;planning to use, and also provides strong robustness against malformed \
or&lt;br&gt;malicious reports.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;Some questions we'll discuss:&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;How can \
we design Tor's statistics to make it easy to:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;* defend against corruption attacks, and&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;* support more complex aggregate \
statistics.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;How does PrivCount in Tor's \
design handle aggregation&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;server \
failures?&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Some background:&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;Here's \
my quick comparison of Prio and PrivCount in Tor:&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;* Prio servers can do complex calculations using linear data \
structures&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;* \
PrivCount is limited to additive totals (and \
histograms)&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;* Prio servers can defend \
against corruption attacks using SNIPs&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;  (secret non-interactive proofs)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;* PrivCount in Tor has an optional scheme to defend against \
corruption,&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;  but \
it &lt;/span&gt;&lt;/font&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;requires adding additional noise&lt;/span&gt;&lt;/div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;* Prio \
doesn't have differential privacy (yet)&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;* PrivCount guarantees differential privacy across the entire set \
of&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, \
0, 0); background-color: rgba(255, 255, 255, 0);"&gt;  \
statistics&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
background-color: rgba(255, 255, 255, 0);"&gt;* Prio increases security by failing when \
one server fails&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;* \
PrivCount in Tor is robust to server failure, and \
compensates&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;  \
for the decreased security by adding more noise&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;  (The PrivCount design used for our research papers was \
not&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;   robust, and \
failed whenever any server or client failed.)&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;Here are \
our latest specs, notes, and code for PrivCount in \
Tor:&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="1"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;&lt;a href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="2"&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;&lt;a href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="3"&gt;https://trac.torproject.org/projects/tor/wiki/org/me \
etings/2018MexicoCity/Notes/PrivCountTechnical&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;&lt;a href="https://github.com/nmathewson/privcount_shamir" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="4"&gt;https://github.com/nmathewson/privcount_shamir&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
id="AppleMailSignature" dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;-- &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;teor&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181124212248</emailId><senderName>Ziad Marghany</senderName><senderEmail>ziad_marghany@protonmail.com</senderEmail><timestampReceived>2018-11-24 21:22:48-0400</timestampReceived><subject>[tor-dev] Tor summer of privacy</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hi,
I would like to participate in Tor summer of privacy, and I would like how I can \
start preparing from now on. Also, I would like to ask about if I want to propose a \
project idea, how I should present my idea and should I make a prototype ? I know \
this is maybe a bit early but I wasn't able to participate last year because I \
haven't prepared early so, I would like to take my time this year. Thank you for your \
help and your time.


[Attachment #5 (text/html)]

&lt;div&gt;Hi,&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would like to participate in Tor summer of privacy, and I \
would like how I can start preparing from now on. Also, I would like to ask about if \
I want to propose a project idea, how I should present my idea and should I make a \
prototype ?&lt;br&gt;&lt;/div&gt;&lt;div&gt;I know this is maybe a bit early but I wasn't able to \
participate last year because I haven't prepared early so, I would like to take my \
time this year.&lt;br&gt;&lt;/div&gt;&lt;div&gt; Thank you for your help and your \
time.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block"&gt;&lt;div \
class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181125053016</emailId><senderName>Micah Lee</senderName><senderEmail>micah@micahflee.com</senderEmail><timestampReceived>2018-11-25 05:30:16-0400</timestampReceived><subject>[tor-dev] OnionShare bug that's possibly caused by an upstream v3 onion bug</subject><body>

I've been working on a major OnionShare release that, among other 
things, will use v3 onion services by default. But it appears that 
either something in stem or in Tor deals with v3 onions differently than 
v2 onions, and causes a critical bug in OnionShare. It took a lot of 
work to track down exactly how to reproduce this bug, and I haven't 
opened an upstream issue for either stem or tor because I feel like I 
don't understand it enough yet.

Here is the OnionShare issue [1]. Does anyone know if this is an issue 
with stem or tor, and how to go about mitigating it? Here's some 
background:

When you share files with OnionShare it starts a local web server and 
then makes it an ephemeral onion service. Someone else loads this onion 
service in Tor Browser and downloads your files. If the setting "Stop 
sharing after first download" is checked (this is the default behavior), 
then as soon as the download completes, OnionShare stops the onion 
service and web server.

If I share a 1mb file and a Tor Browser client makes an HTTP request to 
download it, OnionShare will respond with a 1mb HTTP response. As soon 
as it's done sending the 1mb, OnionShare stops the server and alerts the 
user that transfer is complete -- however, it's not actually complete 
yet. If you look at the client in Tor Browser, it's still downloading. 
It depends on the Tor circuit, but it might be only ~32% done, and you 
have to wait a few seconds for it to finish. This is because when the 
final byte of the 1mb file leaves the OnionShare web server, it takes a 
few seconds for that final byte to make it through the onion circuit and 
into Tor Browser download.

This works fine with v2 onion services.

But with v3 onion services, as soon as the OnionShare web server 
finishes sending the full HTTP response, the torified HTTP client stops 
downloading. I made a small python script, onion-bug.py, that reproduces 
the issue that you can test [2].

This script connects to the default Tor control port for Tor Browser, so 
open Tor Browser in the background. It then start an HTTP server and 
creates an onion service, and if you make a GET request to the server it 
responds with 2mb of "A" characters, and then immediately stops the web 
server and onion service. You have to pass in either "v2" or "v3", 
depending on which type of onion service to make. Like OnionShare, this 
script uses stem, and specifically the 
Controller.create_ephemeral_hidden_service method [3].

I just ran "./onion-bug.py v2" in one terminal and waited for it to 
start:

```
$ ./onion-bug.py v2
http service: http://127.0.0.1:8080/

starting onion service with: key_type='NEW', key_content='RSA1024'
http://d7vomh45i7ryhhfw.onion/
```

Then in a second terminal, I made the GET request:

```
$ torify curl http://d7vomh45i7ryhhfw.onion/ &gt; out2
   % Total    % Received % Xferd  Average Speed   Time    Time     Time  
Current
                                  Dload  Upload   Total   Spent    Left  
Speed
100 1024k    0 1024k    0     0   125k      0 --:--:--  0:00:08 --:--:-- 
  245k
```

The script in the first terminal finished and quit (while curl on the 
second term finished the download for a few more seconds):

```
127.0.0.1 - - [24/Nov/2018 21:12:52] "GET / HTTP/1.1" 200 -
shutting down http server
```

The file, out1, is exactly 1mb.

Now I tried doing the same, but with a v3 onion service:

```
$ ./onion-bug.py v3
http service: http://127.0.0.1:8080/

starting onion service with: key_type='NEW', key_content='ED25519-V3'
http://htrzngqgb7ogyifsvah6qz7t6spe3rr7bikdws7d3rigkpwy5kuyrlqd.onion/

127.0.0.1 - - [24/Nov/2018 21:14:22] "GET / HTTP/1.1" 200 -
shutting down http server
```

And in the other terminal:

```
$ torify curl 
http://htrzngqgb7ogyifsvah6qz7t6spe3rr7bikdws7d3rigkpwy5kuyrlqd.onion/ &gt; 
out2
   % Total    % Received % Xferd  Average Speed   Time    Time     Time  
Current
                                  Dload  Upload   Total   Spent    Left  
Speed
100 29830    0 29830    0     0   3399      0 --:--:--  0:00:08 --:--:-- 
  3399
```

It only downloaded 29830 bytes before the download connection stopped, 
so out2 is only 30kb. I just tried it again, and this time only got 12kb 
downloaded. And I tried it again, and got 41kb downloaded. It appears to 
depend on the speed of the Tor circuit.

The download only stops when the v3 onion service is shut down -- if you 
uncomment out the time.sleep(5) before calling 
remove_ephemeral_hidden_service at the end of the script, you'll be able 
to download the full 1mb using the v3 onion server.

I'm pretty stumped on how to fix this and I'd appreciate any help.

Until it's fixed, we'll either have to not include support for v3 onion 
services in OnionShare in the next major release (version 2.0), or 
include support but with the "Stop sharing after first download" only 
available for v2 onion services -- so probably we'd default to using v2 
onion services, and users could optionally use v3 if they don't need the 
autostop feature. Of course, I'd much prefer to find a way to solve this 
and release with v3 onion services by default.


[1] https://github.com/micahflee/onionshare/issues/812
[2] https://gist.github.com/micahflee/bade960e96d35007bc5c182a0ca61b56
[3] 
https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephemeral_hidden_service
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127132321</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-11-27 13:23:21-0400</timestampReceived><subject>[tor-dev] Whitepaper draft: Towards Side Channel Analysis of Datagram Tor vs Current Tor</subject><body>

# Towards Side Channel Analysis of Datagram Tor vs Current Tor

                     Version 0.6, 27 Nov 2018

                 by Nick Mathewson and Mike Perry

## Disclaimers

This whitepaper assumes that you know how Tor works.

There are probably some very good references here that we didn't
remember to cite.

## Introduction

Tor's current design requires that its data cells be transmitted
from one end of a circuit to the other using a reliable, in-order
delivery mechanism.  To meet this requirement, Tor relays need to
buffer cells--spending resources, hurting performance, and risking
susceptibility to out-of-memory attacks.

In order to improve Tor's performance and resilience, researchers
have made several proposals for ways to relax the requirement for
reliable in-order delivery.  In general, these "datagram-based"
proposals would allow relays to drop or reorder cells as needed,
and move the responsibility for providing a reliable stream protocol
to the endpoints (the client and the exit relays).

But by increasing flexibility for the relays, and by increasing the
complexity of the endpoints, these datagram proposals also create
some new attack vectors.  Before we can deploy any of these designs,
we need to consider whether these attacks weaken Tor's security, or
whether they are irrelevant given other, stronger attacks against
Onion Routing.

This whitepaper tries to list these attacks, and to provide a
framework for thinking about them as we move forward with our design
analysis.

We hope that this whitepaper will help researchers and others in the Tor
community to understand these issues, so that we can work together to
find new ideas to analyze and mitigate the attacks described here, and
to help deploy a faster and more reliable network while still
maintaining our current (or better) security guarantees.  We hope that
our description of the problem space will inspire, not discourage,
future experiments in this area, and help with a holistic understanding
of the risks, rewards, and future areas of work.

### A toy system

We will be analyzing a system that differs from Tor in the following
ways.

  * The link between a client and its guard, and between each pair
    of relays uses DTLS over UDP: packets can be dropped or
    re-ordered by an attacker on the link, but not modified, read,
    or forged. Each DTLS packet contains an integer number of cells.

  * Each circuit between a client and an exit traverse several
    relays, as before. The cells on a circuit are no longer
    guaranteed to arrive reliably, but can be dropped or re-ordered
    on the wire, or by a relay.

  * To provide reliable service end-to-end, the client and the
    exit each use a TCP-like protocol to track which application
    bytes have been sent and received.  Received data is
    acknowledged;  dropped data is retransmitted.

  * The cryptography to be used for circuit encryption is not
    specified here.

  * A reliable signaling mechanism between relays (to create,
    destroy, and maintain circuits) is not specified here.

(It is likely that many readers will be able to design a system that
resists the attacks below better than the design above.  But please
remember as you do, that a design which improves a system in one way
may constrain it in others, or may offer insufficient benefits to be
clearly superior to Tor as it is today.  Before we can deploy, we
will need not just defenses, but also a systemic way to compare the
effect of these defenses, used together, to the Tor status quo.)

## Some preexisting attacks to consider

To put the datagram-based attacks into context, we'll start out by
listing some attacks against the current non-datagram Tor design
(and proposed defenses for those, where they exist).

We assume, as usual, an adversary who controls some but not all
relays, and some but not all ISPs.

A note on attack power: the accuracy of many of these attacks,
particularly the passive ones, depends on the type of traffic being
sent, the quantity of similar traffic elsewhere on the Tor network,
the quantity of concurrent activity by the same client, the
adversary's observation position and data retention resolution, the
quantity of padding, and the tendency of the network to preserve or
alter packet timing information in transit.

In many cases, we don't have good metrics or evaluation methodology
to determine how much harder or easier one attack is than another.

### End-to-end passive traffic correlation attacks.

Here's the gold-standard base-line attack: an attacker who can watch
any two points on the same circuit is assumed to be able to realize,
without having observed very much traffic at all, that the two
points are indeed on the same circuit by correlating the timing and
volume of data sent at those two points.

When one of these points is also linked to the client, and one is
linked to the client's activity, this attack deanonymizes the
client.

Tor's current design focuses on minimizing this probability, and
also shifting its characteristics, through things like network
diversity and long-term entry points. The attack may also become
harder (and/or slower) when there is a lot of similar concurrent
traffic on the Tor
network, which means that adding users who use Tor for many things
is in itself a form of mitigation.

Proposed defenses in this area include deliberate obfuscation of
message volume through padding, and of message timing through random
delays, as well as things like traffic splitting and more complex
traffic scheduling for loud flows. While we have completed some work on
link padding, and are progressing on a deployment for circuit
padding, it is not yet clear if we can use these defenses in an
affordable way against a correlation attack, and it is hard to
measure their effectiveness on a realistic Tor-sized network.

### Data tagging side-channels by relays

If two relays are on the same circuit, they can surreptitiously
communicate with one another transforming the data in the RELAY
cells, and un-transforming the data before passing it on.  Since
Tor's current encryption protocol is malleable, this allows them to
send a large number of bits per cell.

This attack can also be used when two relays do not know if they are
on the same circuit.  One relay modifies a cell, and the other one
looks for such modifications.  If the data is processed by an honest
relay, it will destroy the circuit, but the client may or may not
notice that the circuit has destroyed.  (And the dishonest relay may
delay informing the client!)

To defend against this, we plan to replace our encryption with a
non-malleable algorithm.  See for example proposals 202, 261, and
295.

### Destructive side-channels (internal)

Even if we remove the malleability in Tor's encryption, a smaller
side-channel remains: A dishonest relay can destroy a circuit at any
time, either by corrupting the circuit or simply sending a DESTROY
cell along it.  A third party can destroy a large number of circuits
at once by remotely attacking a client or relay -- either disabling
that relay, or making it close circuits because of the OOM
handler. (See the Sniper Attack paper.)

If a circuit is corrupted (as would happen if a relay attempted data
tagging against one of the non-malleable cryptographic algorithms
mentioned above), other points on the circuit can tell which cell is
the first corrupted cell.  If a circuit is destroyed at one point,
other points on the circuit can tell how many cells were sent before
the destruction.

It is likely that based on data or traffic patterns, most parties on
a circuit will be able to distinguish a prematurely destroyed
circuit from one that was shut down normally.

In each case, this attack can be used to send (log n) bits of
information per circuit, at the cost of destroying the circuit,
where n is the number of cells that might be sent over the circuit in
total.  Some noise will exist, since we expect some circuits to be
prematurely closed on their own.  We don't know how much noise.

We also have various heuristics that can attempt to detect if this
happens too often; however at best they likely reduce the rate that
information that can be sent in this way rather than eliminate it.
We also lack methodology to measure the rate of information in this
case, to help determine if we can successfully reduce it further.

### Destructive network probes (external)

Though TLS is resilient against many forms of active attacks, it
can't resist an attacker who focuses against the underlying TCP
layer.  Such an attacker can, by forging TCP resets, cause all the
entire TLS connection to be dropped, thereby closing all the circuits
on it.  This kind of attack can be observed at other points on the
network in a way similar to the destructive side-channels noted above.

This class of attack seems to be easier against Tor's current design
than it would be against (some) datagram-based designs, since
datagram-based designs are resilient to more kinds of traffic
interference.

### Timing-based watermarking attacks

Hostile relays can also introduce a side channels to a circuit by
introducing patterned delays into the cells.  For example, a relay
could buffer a large number of cells, then transmit a "1" bit by
sending a cell in a given time period, or a "0" by not sending cells
in that time period.

An attacker can also mount this attack without controlling relays:
if the attacker performs a DoS attack against a relay or its
traffic, it can observe changes in the traffic volume elsewhere on
the network.

[See https://www.freehaven.net/anonbib/cache/ccs07-latency-leak.pdf and
http://cybercentre.cs.ttu.ee/wp/wp-content/uploads/2017/01/crw2017_final.pdf ]

The bandwidth of this side-channel will be limited, since other
relays on the network will naturally buffer and delay traffic,
obscuring the pattern some.  There are also limits to how long
packets can be delayed before the relay is no longer usable.

[See:
   - Rainbow: https://www.freehaven.net/anonbib/cache/ndss09-rainbow.pdf
   - Swirl: https://www.freehaven.net/anonbib/cache/ndss11-swirl.pdf
   - Backlit (detection):
     https://www.freehaven.net/anonbib/cache/acsac11-backlit.pdf ]

Proposals for resisting this type of watermarking attack are mostly
of the same type that would be needed for resisting end-to-end
correlation. An adversary that can perform active attacks to
introduce their own unique traffic patterns intuitively seems much
stronger than one that must passively use potentially common
patterns. We lack a unified framework to tell us how much stronger
this adversary is than the passive one, especially against various
defenses.

### Traffic injection attacks

Related to the active timing attack, in some positions (like exit
and RP) relays can inject cells that are ignored by the other
endpoint. These injected patterns will not impact the user's
experience, but will allow unique traffic patterns to be sent and
detected by the adversary at crucial times.

[See
https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf]

These injection attacks arise from former adherence to Postel's
Maxim. Tor has since departed from this maxim, and instead opted for
stricter forward compatibility through feature versioning, but
removing instances in the codebase where injected cells can be
permitted has proven challenging.

## Attacks unique to datagram designs

Here are some attacks that are enabled by (or at any rate behave
differently under) datagram-based designs.

### Traffic-stream tagging (by relays and internet links)

Because the new system permits a number of transformations on
traffic that were not previously allowed, we need to look at how
those transformations can be used to attack users.

As a trivial example, any router can relay an arbitrary subset of
the cells that it receives on a circuit, in an arbitrary order, due
to the exact properties the reliable transport aims to provide. The
pattern induced in this way will be detectable by the exit relay
when it attempts to reconstruct the stream.  Because we explicitly
allow this kind of transformation, the circuit will not be killed
after a single dropped cell, but rather will continue working
silently.

Moreover, any ISP can mount the same attack by dropping and/or
re-ordering DTLS calls.

A remote attacker may also be able to mount this attack by flooding
any router between a client and its guard, thereby causing some of
the DTLS messages to get dropped.

If we are using TCP between client and exit, the acknowledgments
sent by each endpoint will provide confirmation about which data it
received and which it did not. If instead of TCP, we use some other
protocol where the end-points communicate even more information
about which packets they did and did not receive, this can provide
an even higher-bandwidth side-channel.

The bandwidth of this side-channel is fairly high, since it allows
the attacker to send over a bit per cell. But it will be somewhat
noisy, since some cells will dropped and reordered naturally.

Padding, traffic splitting, and concurrent activity will increase
the noise of this attack; we lack metrics to tell us how much, and
we have no framework as of yet to measure the throughput of the
resulting side channel in these conditions.

### Traffic Fingerprinting of TCP-like systems

Today, because Tor terminates TCP at the guard node, there is
limited ability for the exit node to fingerprint client TCP
behavior (aside from perhaps measuring some effects on traffic
volume, but those are not likely preserved across the Tor network).

However, when using a TCP-like system for end-to-end congestion
control, flow control, and reliability, the exit relay will be able
to make inferences about client implementation and conditions based
on its behavior.

Different implementations of TCP-like systems behave differently.
Either party on a stream can observe the packets as they arrive to
notice cells from an unusual implementation.  They can probe the
other side of the stream, nmap-style, to see how it responds to
various inputs.

If two TCP-like implementations differ in their retransmit or timeout
behavior, an attacker can use this to distinguish them by carefully
chosen patterns of dropped traffic.  Such an attacker does not even
need to be a relay, if it can cause DTLS packets between relays to
be dropped or reordered.

This class of attacks is solvable, especially if the exact same
TCP-like implementation is used by all clients, but it also requires
careful consideration and additional constraints to be placed on the
TCP stack(s) in use that are not usually considered by TCP
implementations -- particularly to ensure that they do not depend on
OS-specific features or try to learn things about their environment
over time, across different connections.


### Retransmit-based watermarking

Even if all TCP-like implementations are identical, they will
retransmit with different timing and volume based on which cells
have been acked or not acked.  These differences may be observable
from many points on the circuit, or from outside the network.  Such
retransmissions can be induced from outside the network, by hostile
relays, or even by a hostile endpoint that pretends not to have
received some of the packets.

We again lack metrics to indicate that it is substantially worse
(or not worse) than other similar attacks. Intuitively, the key
difference in degree would come from how much easier it is to
perform this attack than the delay based watermarking attacks on
traditional Tor above.

### Congestion and flow control interference

To the extent that the TCP-like stack uses information learned from
one stream to alter its behavior on another stream, an attacker can
exploit this interference between streams make all of the streams
from a given party more linkable.

All implementations will have some amount of interference, to the
extent that their bandwidth is limited.  But some may have more than
necessary.


### Non-malleable encryption designs only currently exist for in-order
transports (or the return of data tagging attacks)

Our proposed defenses against data tagging require us to move to
non-malleable encryption, with each cell's encryption tweaked by a
function of all previous cells, so that if even a single cell is
modified, not only is that cell corrupted, but no subsequent cell
can be decrypted.

It seems nontrivial to achieve this property with datagram based
designs, since we require that cells on a circuit can be decrypted
even when previous cells have not arrived.  We can achieve
data-based non-malleability by using a per-hop MAC for each cell --
but we would no longer be able to get the property that a since
altered cell would make the whole circuit unrecoverable.  This would
enable a one-bit-per-cell side-channel, similar but possibly more
powerful than the packet dropping side-channel above. (Because the
congestion window is essentially a bit vector of received cells,
the adversary in this scenario gets to corrupt cells in carefully
chosen ways instead of merely dropping them.)

Perhaps other cryptographic schemes could be found to resist
data-tagging in a datagram-based environment or limit its impact,
but we'll need to figure out what the requirements and models are.

As a proof-by-example of a mitigating system: Proposal 253 describes
a way to send a rolling MAC out of band, to ensure integrity of
packets between those cells. But can we do better? Can middle nodes
enforce integrity in some other way?

### The risks of success: lower latency strengthens timing attacks?

There are two factors that make timing-correlation and
timing-watermark attacks more difficult in practice: similarity
between different users' traffic, and distortion in timing patterns
caused by variance in cell latency on the network.  To whatever
extent we successfully reduce this distortion by lowering latency,
it seems that we'll make these attacks more powerful.

In particular, geolocation attacks based on observed circuit setup
times may get worse [See again
https://www.freehaven.net/anonbib/cache/ccs07-latency-leak.pdf].

We're already making improvements to Tor that may make these attacks
worse -- Tor latency has dropped and will continue to drop due to
improvements like KIST, more relays, and better load balancing.
Further incremental improvements like explicit congestion control on
the existing Tor network will reduce latency even further.

It may be that a more performant Tor becomes less safe than a
slower, less usable Tor. On the other hand, a more usable Tor will
likely be used by more people, which we know makes many forms of
traffic analysis harder (slower?) in general. However, we have no way to
measure this tradeoff on many different attack types.

Delay and latency can also be added back in, and this has been a common
defense against both active adversaries and timing attacks in the
anonymity literature, but such delays have user-facing consequences,
unless they are carefully restricted to the cases where the
adversary can directly measure RTT and can be amortized away by
things like pre-emptive circuit building. In this and other cases,
it is also not clear to what degree adding delay is more useful than
adding more padding.


## Towards comparing attacks

A high-bandwidth attack is worse than a low-bandwidth attack.  One
bit is enough to send "is this the targeted user?", but 32 bits is
enough to send a whole IP address.

The impact of these attacks become worse if they can be repeated
over time.

An attack that can be performed by an ISP relaying traffic is worse
than one that can be performed by a relay. An attack that can be
performed remotely against either of these is worse still.

We need some kind of methodology to help us compare the new side
channels that datagram transports may enable to the existing side
channels in Tor, particularly delay-based and congestion-based side
channels.  Ideally, these metrics or evaluation methodology would
also allow us to compare these side channels under various forms of
defense, such as padding.

At the very least, we need some way to compare the side channels in
datagram transports to those that already exist.

We also likely need a common reference research prototype and/or
platform to experiment with and study, so that attacks and defenses
are reproducibly comparable. Reproducibility in attack and defense
literature is often not reliable, due to differing implementations,
in addition to differing methodology and evaluation frameworks.


## Open Questions

Why permit reordering? There are schemes (like order-preserving
encryption) that we could deploy on middle nodes to prevent
reordering, without allowing earlier nodes to differentiate
padding from non-padding. Do we derive any benefit by allowing a
relay to send cells on a single circuit in a different order than
the order in which it receives those cells on that circuit? This
may be an answered question in congestion control research, but we
lack the domain expertise to know what this tradeoff is.

Related: what cryptography to use?  Our current stateful encryption
schemes benefit from having access to "all previous cells" when
encrypting or decrypting each following cell.  If we allow a cell to
be {de,en}crypted before previous cells are received, we'll need a
new model for onion-routing cryptography -- possibly one with
significantly bigger headers.

## Future work

We hope to investigate these issues with researchers and others in the
Tor community as we work towards solutions to help scale and strengthen
the Tor network. Understanding the risks and rewards that datagram-based
transports introduce to Tor is important to help us select designs that
both help improve performance but also guarantee safety for Tor
users. We hope that by cataloging these risks, future conversations
about improved network designs can bring answers and broader
improvements. We look forward to working with others interested in
helping solve these problems to design a better Tor.

## Acknowledgments

Our thanks to Chelsea Komlo for many helpful suggestions and
comments on earlier drafts of this whitepaper, and for writing the
request for future work.

## Further reading

Steven Murdoch, "Comparison of Tor Datagram Designs", 2011.
https://murdoch.is/papers/tor11datagramcomparison.pdf

Mashael AlSabah and Ian Goldberg. "PCTCP: per-circuit
TCP-over-IPsec transport for anonymous communication overlay
networks", 2013.
http://cacr.uwaterloo.ca/techreports/2013/cacr2013-09.pdf

Michael F. Nowlan, David Wolinsky, and Bryan Ford.
"Reducing Latency in Tor Circuits with Unordered Delivery",
2013.
https://www.usenix.org/system/files/conference/foci13/foci13-nowlan.pdf

Rob Jansen, Florian Tschorsch, Aaron Johnson, and Björn Scheuermann
The Sniper attack: Anonymously Deanonymizing and Disabling the Tor
Network", 2013
https://www.nrl.navy.mil/itd/chacs/sites/edit-www.nrl.navy.mil.itd.chacs/files/pdfs/13-1231-3743.pdf
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181105173805</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-11-05 17:38:05-0400</timestampReceived><subject>[tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi all,

It's great to see that some children of #25500 have already been
released in the 0.3.4 series. Can I ask about the longer-term plan for
this work, and whether #23289 (or something similar) is part of it?

The context for my question is that we're trying to reduce Briar's power
consumption. Until now we've held a wake lock to keep the CPU awake all
the time, but normally an Android device would go into "deep sleep"
(which corresponds to suspend on other platforms) whenever the screen's
turned off, apart from brief wakeups for alarms and incoming network
traffic. Holding a permanent wake lock has a big impact on battery life.

Most of our background work can be handled with alarms, but we still
need to hold a wake lock whenever Tor's running because libevent timers
don't fire when the CPU's asleep, and Tor gets a nasty surprise when it
wakes up and all its timers are late.

It looks like most of the work has been moved off the one-second
periodic timer, which is great, but I assume that work's now being
scheduled by other means and still needs to be done punctually, which we
can't currently guarantee on Android without a wake lock.

As far as I can tell, getting rid of the wake lock requires one of the
following:

1. Tor becomes extremely tolerant of unannounced CPU sleeps. I don't
know enough about Tor's software architecture to know how feasible this
is, but my starting assumption would be that adapting a network-oriented
codebase that's been written for a world where time passes at a steady
rate and timers fire punctually, to a world where time passes in fits
and starts and timers fire eventually, would be a nightmare.

2. Tor tolerates unannounced CPU sleeps within some limits. This is
similar to the previous scenario, except the controller sets a regular
alarm to ensure the CPU never sleeps for too long, and libevent ensures
that when the CPU wakes up, any overdue timers fire immediately (maybe
this happens already?). Again, I'd assume that adapting Tor to this
environment would be a huge task, but at least there'd be limits on the
insanity.

One of the difficulties with this option is that under some conditions,
the controller can only schedule one alarm every 15 minutes. Traffic
from the guard would also wake the CPU, so if we could ask the guard for
regular keepalives, we might be able to promise that the CPU will wake
once every keepalive interval, unless the guard connection's lost, in
which case it will wake once every 15 minutes. But keepalives from the
guard would require a protocol change, which would take time to roll
out, and would let the guard know (if it doesn't already) that the
client's running on Android.

3. Tor knows when it next needs to wake up, and relies on the controller
to wake it. This requires a way for the controller to query Tor, and Tor
to query libevent, for the next timer that needs to fire (perhaps from
some subset of timers that must fire punctually even if the CPU's
asleep). Libevent doesn't need to detect overdue timers by itself, but
it needs to provide a hook for re-checking whether timers are overdue.
The delay until the next timer needs to be at least a few seconds long,
at least some of the time, for sleeping to be worthwhile. And finally,
even if all those conditions are met, we run up against the 15-minute
limit on alarms again.

None of these options are good. I'm not even sure if the first and third
are feasible. But I don't know enough about Tor or libevent to be sure.
If you do, I'd be really grateful for your help in understanding the
constraints here.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181129002316</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2018-11-29 00:23:16-0400</timestampReceived><subject>[tor-dev] Merging Tor Bug #27490</subject><body>

Hi,

I noticed that while you all have accepted bug #27490 (When ClientPreferIPv6ORPort is \
set to auto, and a relay is being chosen for a directory or orport connection, prefer \
IPv4 or IPv6 at random), it has not been merged. Is there anything I can do to speed \
up the process since I also have code ready for #27491 and #27492 but am awaiting the \
merger of #27490 before I submit them?

I am also currently working on Bug #27647.

Thank You,

Neel Chauhan
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181106013833</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-06 01:38:33-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 6 Nov 2018, at 03:38, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; 
&gt; One of the difficulties with this option is that under some conditions,
&gt; the controller can only schedule one alarm every 15 minutes. Traffic
&gt; from the guard would also wake the CPU, so if we could ask the guard for
&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt; once every keepalive interval, unless the guard connection's lost, in
&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt; guard would require a protocol change, which would take time to roll
&gt; out, and would let the guard know (if it doesn't already) that the
&gt; client's running on Android.

Tor implemented netflow padding in 0.3.1.1-alpha (May 2017):
https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt

Connection padding may act like a keepalive, we should consider this
use case as we improve our padding designs.

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlvg8JkACgkQEP6qDnB1
ZypMIg/9FTbXXu/0/PqShEajSt3yVGtRjAiuMG4D7cibHPzhxxmCsaFnvD+XUYZW
dWDTGsEv6DrNnwAsOMUR/aPKfzT+C/QKCcExooNKhB7PZHv21TZmjHutbKtWYTeY
kz5DIzdzmu9Iz763aJSCcjPxv74+PDpGifkmarZW3HixB67QMVSxGthHnoDx4QO1
cmolDPvc3PHsRT6yEGZHPG37E63qzYI+hMKiZwgLl5S+rnV2jOXxAIbjRzBSIeta
SVszvDzsfUaw+8txC5OflKcXLWaAxyWEh0diEK7jsghYpevQCRAwlA9J6rpSIBno
ibFhHNm5HeIS92sHoYirg7Fq36P7D6DAEMHfzkwjRIOTd8ZEKkxoqSgaktnmq15G
QRmqBoGM+Eut5VCY+QuV1JlMoTKvdQ9ti515XJOX9geDf6upBnbRLnYo7fYEFaZU
FZDLgiaXTSjW4YN+oKsXP/3xWcu5aNa53zIPZFc8Du8hijbLK5NQD6pwUDcsyYWL
pvnpknONHfs8hpB56RyuFSDolj207b3cG/Q+Yx1TMn+rD2xtexCvsOj79TfO7hPJ
RX2X6Eb1ldtUEBAgVlmTR2nDHZbqxJpyKalllotU7eKd5Y6N5NLg0Mu0gcqGkj0p
i5SPCEUcoOft4RMgavgluA8bMOJANj3fZ76sxmWx+QBBAq+5uTg=
=nMBJ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181106015808</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-11-06 01:58:08-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

On Tue, Nov 06, 2018 at 11:38:33AM +1000, teor wrote:
&gt; &gt;  so if we could ask the guard for
&gt; &gt; regular keepalives, we might be able to promise that the CPU will wake
&gt; &gt; once every keepalive interval, unless the guard connection's lost, in
&gt; &gt; which case it will wake once every 15 minutes. But keepalives from the
&gt; &gt; guard would require a protocol change, which would take time to roll
&gt; &gt; out, and would let the guard know (if it doesn't already) that the
&gt; &gt; client's running on Android.
&gt; 
&gt; Tor implemented netflow padding in 0.3.1.1-alpha (May 2017):
&gt; https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt
&gt; 
&gt; Connection padding may act like a keepalive, we should consider this
&gt; use case as we improve our padding designs.

Relays already send a keepalive (padding) cell every 5 minutes: see
the KeepalivePeriod config option. That's separate from any of the new
netflow padding. Clients send them too.

The netflow padding is more interesting for the Briar case, since it
comes way way more often than keepalives: so if you're trying for deep
sleep but you wake up for network activity every several seconds, you'll
probably end up sad.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181106181042</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-11-06 18:10:42-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 06/11/2018 01:58, Roger Dingledine wrote:
&gt; On Tue, Nov 06, 2018 at 11:38:33AM +1000, teor wrote:
&gt;&gt;&gt;  so if we could ask the guard for
&gt;&gt;&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt;&gt;&gt; once every keepalive interval, unless the guard connection's lost, in
&gt;&gt;&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt;&gt;&gt; guard would require a protocol change, which would take time to roll
&gt;&gt;&gt; out, and would let the guard know (if it doesn't already) that the
&gt;&gt;&gt; client's running on Android.
&gt;&gt;
&gt;&gt; Tor implemented netflow padding in 0.3.1.1-alpha (May 2017):
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt
&gt;&gt;
&gt;&gt; Connection padding may act like a keepalive, we should consider this
&gt;&gt; use case as we improve our padding designs.
&gt; 
&gt; Relays already send a keepalive (padding) cell every 5 minutes: see
&gt; the KeepalivePeriod config option. That's separate from any of the new
&gt; netflow padding. Clients send them too.

Ah, thanks! I didn't realise keepalives were sent from relays to clients
as well as vice versa.

That gives us a max sleep of 5 minutes when a guard connection's open
and 15 minutes when it's not, which is a great improvement.

Would it have much impact on the network to reduce the default keepalive
interval to, say, one minute?

&gt; The netflow padding is more interesting for the Briar case, since it
&gt; comes way way more often than keepalives: so if you're trying for deep
&gt; sleep but you wake up for network activity every several seconds, you'll
&gt; probably end up sad.

Unfortunately we've disabled netflow padding due to bandwidth and
battery usage.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181107090421</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-07 09:04:21-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 7 Nov 2018, at 04:10, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; 
&gt; On 06/11/2018 01:58, Roger Dingledine wrote:
&gt;&gt; On Tue, Nov 06, 2018 at 11:38:33AM +1000, teor wrote:
&gt;&gt;&gt;&gt; so if we could ask the guard for
&gt;&gt;&gt;&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt;&gt;&gt;&gt; once every keepalive interval, unless the guard connection's lost, in
&gt;&gt;&gt;&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt;&gt;&gt;&gt; guard would require a protocol change, which would take time to roll
&gt;&gt;&gt;&gt; out, and would let the guard know (if it doesn't already) that the
&gt;&gt;&gt;&gt; client's running on Android.
&gt;&gt;&gt; 
&gt;&gt;&gt; Tor implemented netflow padding in 0.3.1.1-alpha (May 2017):
&gt;&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt
&gt;&gt;&gt; 
&gt;&gt;&gt; Connection padding may act like a keepalive, we should consider this
&gt;&gt;&gt; use case as we improve our padding designs.
&gt;&gt; 
&gt;&gt; Relays already send a keepalive (padding) cell every 5 minutes: see
&gt;&gt; the KeepalivePeriod config option. That's separate from any of the new
&gt;&gt; netflow padding. Clients send them too.
&gt; 
&gt; Ah, thanks! I didn't realise keepalives were sent from relays to clients
&gt; as well as vice versa.
&gt; 
&gt; That gives us a max sleep of 5 minutes when a guard connection's open
&gt; and 15 minutes when it's not, which is a great improvement.
&gt; 
&gt; Would it have much impact on the network to reduce the default keepalive
&gt; interval to, say, one minute?

It's doable, but it would take a while to roll out to all relays.
And it seems like a strange solution to a platform-specific problem.

We might also have to be careful, because a multiple of the keepalive
interval is used to close connections without any circuits.

&gt;&gt; The netflow padding is more interesting for the Briar case, since it
&gt;&gt; comes way way more often than keepalives: so if you're trying for deep
&gt;&gt; sleep but you wake up for network activity every several seconds, you'll
&gt;&gt; probably end up sad.
&gt; 
&gt; Unfortunately we've disabled netflow padding due to bandwidth and
&gt; battery usage.

Even with ReducedConnectionPadding?

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlviqpUACgkQEP6qDnB1
ZyrOdA/5ASAtV//dof6mlugqQBe4O5K7/DAHLnN1/tgC+Kv55ovrAZprAD04f/+3
fZBiXoDxhl/agTJq96SNlWkY+VzAjUAJqCEA+KVoC4AYGjfrfDyapBFQ+hCjYvI6
nt7kaT3DrntUz6Fw+TL8RtrGXnttQ3sv+C7pXwStqz2OVcUSP5tua7Cha4We4l5S
F+xF9co6Otg0DovzT1SjR8bsjE4VUWomTClCL9XW3jsDSKNR98966nJtGk1l02zk
6IAbgs1obSgJbO5dSG2yDbdi5gmwa5jdGp8wM7sn1bYoPv5JGKKSAlCWQMN4rTbG
hdL+1RwNioeKYYwOkHQNmgnIwYijZJt44LlIIL/e5kXxwz+oIDxfEtoaFu2For2w
I30vlHkM6EVyx7Kap1v1kJECWWIaifIE7s3CVHQVcNNqT207zioXfjVhr2s+ofHk
1dLLbreTqHhPN+Nz+9C0FofAu3zAocYG/SRG5O7Zm7QnJaPWXwviRlMJb8ivvQ6g
H+VqO10mIpircpiiEAz7L3VIQanNaAdAM2ePjVx3CoihJuu5hHfOnIGcHqBrO0NQ
W84e87290GdFtP9b4z3+d8j3KKOOg3d/jxtszk0Jh9LCWvwRDo9htk23BBig20fl
pn3IcoHJ3/w1uLWDpyUXQ7LDZ1uKKXwqBAoMWZflTIcvgXlKzzU=
=pj8a
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181112105235</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-11-12 10:52:35-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 07/11/2018 09:04, teor wrote:
&gt; 
&gt; 
&gt;&gt; On 7 Nov 2018, at 04:10, Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; On 06/11/2018 01:58, Roger Dingledine wrote:
&gt;&gt;&gt; On Tue, Nov 06, 2018 at 11:38:33AM +1000, teor wrote:
&gt;&gt;&gt;&gt;&gt; so if we could ask the guard for
&gt;&gt;&gt;&gt;&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt;&gt;&gt;&gt;&gt; once every keepalive interval, unless the guard connection's lost, in
&gt;&gt;&gt;&gt;&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt;&gt;&gt;&gt;&gt; guard would require a protocol change, which would take time to roll
&gt;&gt;&gt;&gt;&gt; out, and would let the guard know (if it doesn't already) that the
&gt;&gt;&gt;&gt;&gt; client's running on Android.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Tor implemented netflow padding in 0.3.1.1-alpha (May 2017):
&gt;&gt;&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Connection padding may act like a keepalive, we should consider this
&gt;&gt;&gt;&gt; use case as we improve our padding designs.
&gt;&gt;&gt;
&gt;&gt;&gt; Relays already send a keepalive (padding) cell every 5 minutes: see
&gt;&gt;&gt; the KeepalivePeriod config option. That's separate from any of the new
&gt;&gt;&gt; netflow padding. Clients send them too.
&gt;&gt;
&gt;&gt; Ah, thanks! I didn't realise keepalives were sent from relays to clients
&gt;&gt; as well as vice versa.
&gt;&gt;
&gt;&gt; That gives us a max sleep of 5 minutes when a guard connection's open
&gt;&gt; and 15 minutes when it's not, which is a great improvement.
&gt;&gt;
&gt;&gt; Would it have much impact on the network to reduce the default keepalive
&gt;&gt; interval to, say, one minute?
&gt; 
&gt; It's doable, but it would take a while to roll out to all relays.
&gt; And it seems like a strange solution to a platform-specific problem.

You're right, it's not pretty. Using this hack on the client is bad
enough, and asking the network to support the hack is worse.

On the other hand, Android has a lot of users, and battery-friendly
hidden services on mobile devices would be a great building block for
privacy tools (assuming we could overcome the other obstacles too).

&gt; We might also have to be careful, because a multiple of the keepalive
&gt; interval is used to close connections without any circuits.
&gt; 
&gt;&gt;&gt; The netflow padding is more interesting for the Briar case, since it
&gt;&gt;&gt; comes way way more often than keepalives: so if you're trying for deep
&gt;&gt;&gt; sleep but you wake up for network activity every several seconds, you'll
&gt;&gt;&gt; probably end up sad.
&gt;&gt;
&gt;&gt; Unfortunately we've disabled netflow padding due to bandwidth and
&gt;&gt; battery usage.
&gt; 
&gt; Even with ReducedConnectionPadding?

Interestingly we found that ReducedConnectionPadding didn't make much of
a difference for our use case, perhaps because the hidden service keeps
the OR connection open. If I understand right, closing the connection is
one of the ways ReducedConnectionPadding would normally save bandwidth.

I ran some experiments over the weekend to double-check this. Here's the
traffic per hour for Tor 0.3.4.8 running a hidden service with no
incoming or outgoing connections, averaged over 12 hours:

Default: sent 415 kB (stdev 90 k), received 434 kB (stdev 114 k)
No padding: sent 176 kB (stdev 74 k), received 232 kB (stdev 182 k)
Reduced padding: sent 418 kB (stdev 87 k), received 312 kB (stdev 183 k)

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181120192835</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-20 19:28:35-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

On Mon, Nov 5, 2018 at 12:38 PM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;
&gt; Hi all,
&gt;
&gt; It's great to see that some children of #25500 have already been
&gt; released in the 0.3.4 series. Can I ask about the longer-term plan for
&gt; this work, and whether #23289 (or something similar) is part of it?
&gt;
&gt; The context for my question is that we're trying to reduce Briar's power
&gt; consumption. Until now we've held a wake lock to keep the CPU awake all
&gt; the time, but normally an Android device would go into "deep sleep"
&gt; (which corresponds to suspend on other platforms) whenever the screen's
&gt; turned off, apart from brief wakeups for alarms and incoming network
&gt; traffic. Holding a permanent wake lock has a big impact on battery life.
&gt;
&gt; Most of our background work can be handled with alarms, but we still
&gt; need to hold a wake lock whenever Tor's running because libevent timers
&gt; don't fire when the CPU's asleep, and Tor gets a nasty surprise when it
&gt; wakes up and all its timers are late.
&gt;
&gt; It looks like most of the work has been moved off the one-second
&gt; periodic timer, which is great, but I assume that work's now being
&gt; scheduled by other means and still needs to be done punctually, which we
&gt; can't currently guarantee on Android without a wake lock.
&gt;
&gt; As far as I can tell, getting rid of the wake lock requires one of the
&gt; following:
&gt;
&gt; 1. Tor becomes extremely tolerant of unannounced CPU sleeps. I don't
&gt; know enough about Tor's software architecture to know how feasible this
&gt; is, but my starting assumption would be that adapting a network-oriented
&gt; codebase that's been written for a world where time passes at a steady
&gt; rate and timers fire punctually, to a world where time passes in fits
&gt; and starts and timers fire eventually, would be a nightmare.
&gt;
&gt; 2. Tor tolerates unannounced CPU sleeps within some limits. This is
&gt; similar to the previous scenario, except the controller sets a regular
&gt; alarm to ensure the CPU never sleeps for too long, and libevent ensures
&gt; that when the CPU wakes up, any overdue timers fire immediately (maybe
&gt; this happens already?). Again, I'd assume that adapting Tor to this
&gt; environment would be a huge task, but at least there'd be limits on the
&gt; insanity.
&gt;
&gt; One of the difficulties with this option is that under some conditions,
&gt; the controller can only schedule one alarm every 15 minutes. Traffic
&gt; from the guard would also wake the CPU, so if we could ask the guard for
&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt; once every keepalive interval, unless the guard connection's lost, in
&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt; guard would require a protocol change, which would take time to roll
&gt; out, and would let the guard know (if it doesn't already) that the
&gt; client's running on Android.
&gt;
&gt; 3. Tor knows when it next needs to wake up, and relies on the controller
&gt; to wake it. This requires a way for the controller to query Tor, and Tor
&gt; to query libevent, for the next timer that needs to fire (perhaps from
&gt; some subset of timers that must fire punctually even if the CPU's
&gt; asleep). Libevent doesn't need to detect overdue timers by itself, but
&gt; it needs to provide a hook for re-checking whether timers are overdue.
&gt; The delay until the next timer needs to be at least a few seconds long,
&gt; at least some of the time, for sleeping to be worthwhile. And finally,
&gt; even if all those conditions are met, we run up against the 15-minute
&gt; limit on alarms again.
&gt;
&gt; None of these options are good. I'm not even sure if the first and third
&gt; are feasible. But I don't know enough about Tor or libevent to be sure.
&gt; If you do, I'd be really grateful for your help in understanding the
&gt; constraints here.

Hi!  I don't know if this will be useful or not, but I'm wondering if
you've seen this ticket:
  https://trac.torproject.org/projects/tor/ticket/28335

The goal of this branch is to create a "dormant mode" where Tor does
not run any but the most delay- and rescheduling-tolerant of its
periodic events.  Tor enters this mode if a controller tells it to, or
if (as a client) it passes long enough without user activity.  When in
dormant mode, it doesn't disconnect from the network, and it will wake
up again if the controller tells it to, or it receives a new client
connection.

Would this be at all helpful for any of this?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181121221002</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-11-21 22:10:02-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 20/11/2018 19:28, Nick Mathewson wrote:
&gt; Hi!  I don't know if this will be useful or not, but I'm wondering if
&gt; you've seen this ticket:
&gt;   https://trac.torproject.org/projects/tor/ticket/28335
&gt; 
&gt; The goal of this branch is to create a "dormant mode" where Tor does
&gt; not run any but the most delay- and rescheduling-tolerant of its
&gt; periodic events.  Tor enters this mode if a controller tells it to, or
&gt; if (as a client) it passes long enough without user activity.  When in
&gt; dormant mode, it doesn't disconnect from the network, and it will wake
&gt; up again if the controller tells it to, or it receives a new client
&gt; connection.
&gt; 
&gt; Would this be at all helpful for any of this?

This looks really useful for mobile clients, thank you!

The comments on the pull request
(https://github.com/torproject/tor/pull/502) suggest that Tor won't
enter dormant mode if it's running a hidden service. Are there any plans
to support that in future?

One of the comments mentions a break-even point for consensus diffs,
where it costs less bandwidth to fetch a fresh consensus than all the
diffs from the last consensus you know about. Are diffs likely to remain
available up to the break-even point, or are there times when it would
be cheaper to use diffs, but you have to fetch a fresh consensus because
some of the diffs have expired? Essentially I'm wondering whether we'd
want to wake Tor from dormant mode occasionally to fetch diffs before
they expire, so we can avoid fetching a fresh consensus later.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181126214658</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-26 21:46:58-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

On Wed, Nov 21, 2018 at 5:10 PM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;
&gt; On 20/11/2018 19:28, Nick Mathewson wrote:
&gt; &gt; Hi!  I don't know if this will be useful or not, but I'm wondering if
&gt; &gt; you've seen this ticket:
&gt; &gt;   https://trac.torproject.org/projects/tor/ticket/28335
&gt; &gt;
&gt; &gt; The goal of this branch is to create a "dormant mode" where Tor does
&gt; &gt; not run any but the most delay- and rescheduling-tolerant of its
&gt; &gt; periodic events.  Tor enters this mode if a controller tells it to, or
&gt; &gt; if (as a client) it passes long enough without user activity.  When in
&gt; &gt; dormant mode, it doesn't disconnect from the network, and it will wake
&gt; &gt; up again if the controller tells it to, or it receives a new client
&gt; &gt; connection.
&gt; &gt;
&gt; &gt; Would this be at all helpful for any of this?
&gt;
&gt; This looks really useful for mobile clients, thank you!

Glad to hear it -- it's now merged into Tor's master branch.

&gt; The comments on the pull request
&gt; (https://github.com/torproject/tor/pull/502) suggest that Tor won't
&gt; enter dormant mode if it's running a hidden service. Are there any plans
&gt; to support that in future?

I want to support this for hidden services.  Here's the ticket to
track that: https://trac.torproject.org/projects/tor/ticket/28424

This is going to be harder than the other cases, though, so we decided
to defer it for now and see if we have time later.

&gt; One of the comments mentions a break-even point for consensus diffs,
&gt; where it costs less bandwidth to fetch a fresh consensus than all the
&gt; diffs from the last consensus you know about. Are diffs likely to remain
&gt; available up to the break-even point, or are there times when it would
&gt; be cheaper to use diffs, but you have to fetch a fresh consensus because
&gt; some of the diffs have expired?

This shouldn't be a problem: directory caches will (by default) keep
diffs slightly beyond the break-even point.

(I think. I haven't measured this in a while.)

&gt; Essentially I'm wondering whether we'd
&gt; want to wake Tor from dormant mode occasionally to fetch diffs before
&gt; they expire, so we can avoid fetching a fresh consensus later.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127130435</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2018-11-27 13:04:35-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

Nick Mathewson:
&gt; On Mon, Nov 5, 2018 at 12:38 PM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hi all,
&gt;&gt;
&gt;&gt; It's great to see that some children of #25500 have already been
&gt;&gt; released in the 0.3.4 series. Can I ask about the longer-term plan for
&gt;&gt; this work, and whether #23289 (or something similar) is part of it?
&gt;&gt;
&gt;&gt; The context for my question is that we're trying to reduce Briar's power
&gt;&gt; consumption. Until now we've held a wake lock to keep the CPU awake all
&gt;&gt; the time, but normally an Android device would go into "deep sleep"
&gt;&gt; (which corresponds to suspend on other platforms) whenever the screen's
&gt;&gt; turned off, apart from brief wakeups for alarms and incoming network
&gt;&gt; traffic. Holding a permanent wake lock has a big impact on battery life.
&gt;&gt;
&gt;&gt; Most of our background work can be handled with alarms, but we still
&gt;&gt; need to hold a wake lock whenever Tor's running because libevent timers
&gt;&gt; don't fire when the CPU's asleep, and Tor gets a nasty surprise when it
&gt;&gt; wakes up and all its timers are late.
&gt;&gt;
&gt;&gt; It looks like most of the work has been moved off the one-second
&gt;&gt; periodic timer, which is great, but I assume that work's now being
&gt;&gt; scheduled by other means and still needs to be done punctually, which we
&gt;&gt; can't currently guarantee on Android without a wake lock.
&gt;&gt;
&gt;&gt; As far as I can tell, getting rid of the wake lock requires one of the
&gt;&gt; following:
&gt;&gt;
&gt;&gt; 1. Tor becomes extremely tolerant of unannounced CPU sleeps. I don't
&gt;&gt; know enough about Tor's software architecture to know how feasible this
&gt;&gt; is, but my starting assumption would be that adapting a network-oriented
&gt;&gt; codebase that's been written for a world where time passes at a steady
&gt;&gt; rate and timers fire punctually, to a world where time passes in fits
&gt;&gt; and starts and timers fire eventually, would be a nightmare.
&gt;&gt;
&gt;&gt; 2. Tor tolerates unannounced CPU sleeps within some limits. This is
&gt;&gt; similar to the previous scenario, except the controller sets a regular
&gt;&gt; alarm to ensure the CPU never sleeps for too long, and libevent ensures
&gt;&gt; that when the CPU wakes up, any overdue timers fire immediately (maybe
&gt;&gt; this happens already?). Again, I'd assume that adapting Tor to this
&gt;&gt; environment would be a huge task, but at least there'd be limits on the
&gt;&gt; insanity.
&gt;&gt;
&gt;&gt; One of the difficulties with this option is that under some conditions,
&gt;&gt; the controller can only schedule one alarm every 15 minutes. Traffic
&gt;&gt; from the guard would also wake the CPU, so if we could ask the guard for
&gt;&gt; regular keepalives, we might be able to promise that the CPU will wake
&gt;&gt; once every keepalive interval, unless the guard connection's lost, in
&gt;&gt; which case it will wake once every 15 minutes. But keepalives from the
&gt;&gt; guard would require a protocol change, which would take time to roll
&gt;&gt; out, and would let the guard know (if it doesn't already) that the
&gt;&gt; client's running on Android.
&gt;&gt;
&gt;&gt; 3. Tor knows when it next needs to wake up, and relies on the controller
&gt;&gt; to wake it. This requires a way for the controller to query Tor, and Tor
&gt;&gt; to query libevent, for the next timer that needs to fire (perhaps from
&gt;&gt; some subset of timers that must fire punctually even if the CPU's
&gt;&gt; asleep). Libevent doesn't need to detect overdue timers by itself, but
&gt;&gt; it needs to provide a hook for re-checking whether timers are overdue.
&gt;&gt; The delay until the next timer needs to be at least a few seconds long,
&gt;&gt; at least some of the time, for sleeping to be worthwhile. And finally,
&gt;&gt; even if all those conditions are met, we run up against the 15-minute
&gt;&gt; limit on alarms again.
&gt;&gt;
&gt;&gt; None of these options are good. I'm not even sure if the first and third
&gt;&gt; are feasible. But I don't know enough about Tor or libevent to be sure.
&gt;&gt; If you do, I'd be really grateful for your help in understanding the
&gt;&gt; constraints here.
&gt; 
&gt; Hi!  I don't know if this will be useful or not, but I'm wondering if
&gt; you've seen this ticket:
&gt;   https://trac.torproject.org/projects/tor/ticket/28335
&gt; 
&gt; The goal of this branch is to create a "dormant mode" where Tor does
&gt; not run any but the most delay- and rescheduling-tolerant of its
&gt; periodic events.  Tor enters this mode if a controller tells it to, or
&gt; if (as a client) it passes long enough without user activity.  When in
&gt; dormant mode, it doesn't disconnect from the network, and it will wake
&gt; up again if the controller tells it to, or it receives a new client
&gt; connection.
&gt; 
&gt; Would this be at all helpful for any of this?

I think dormant mode sounds like it goes a long way towards making Tor
operate the way that Android and iOS apps are expected to.  The last
missing piece towards making tor daemon behave like native service on
those platforms would be a method to make the dormant mode survive being
killed and restarted.

In Android and iOS, there isn't really a "dormant" or "sleeping" state
for processes like there is for desktop processes.  The idea in mobile
is that the process serializes any required state out, and is then
killed entirely.  That process might then be restarted within a minute,
5 minutes, a day, a week depending on what the user does.  iOS is
especially strict with this.

So if this dormant mode would survive being killed and restarted, then
we'll see big gains in battery usage.  Usually, the best way to achieve
this is to always write required state out to disk as it changes, e.g.
to the built-in sqlite.  That is because Android/iOS will try to give a
process warning before killing it, but they do not _guarantee_ that any
warning will be given.  It is fully valid and indeed common for a
process to be killed without any warning whatsoever.

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127170127</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-27 17:01:27-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

On Tue, Nov 27, 2018 at 8:04 AM Hans-Christoph Steiner
&lt;hans@guardianproject.info&gt; wrote:
 [...]
&gt; I think dormant mode sounds like it goes a long way towards making Tor
&gt; operate the way that Android and iOS apps are expected to.  The last
&gt; missing piece towards making tor daemon behave like native service on
&gt; those platforms would be a method to make the dormant mode survive being
&gt; killed and restarted.

FWIW, it looks like Roger opened a ticket for this: see
https://trac.torproject.org/projects/tor/ticket/28624 .  I bet we
could squeeze it in before the feature freeze for 0.4.0.x.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127213609</emailId><senderName>Torsten Grote</senderName><senderEmail>t@grobox.de</senderEmail><timestampReceived>2018-11-27 21:36:09-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

On 11/27/18 3:01 PM, Nick Mathewson wrote:
&gt; I bet we could squeeze it in before the feature freeze for 0.4.0.x.

On Android you still can (who knows for how long) mark your app as
running in the foreground. This prevents it from getting killed and is
what Briar is doing. It would therefore benefit more from #28424 going
into 0.4.x than from #28624.

Kind Regards,
Torsten
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127171250</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-11-27 17:12:50-0400</timestampReceived><subject>Re: [tor-dev] Whitepaper draft: Towards Side Channel Analysis of Datagram Tor vs Current Tor (traffi</subject><body>

On Tue, Nov 27, 2018 at 08:23:21AM -0500, Nick Mathewson wrote:
&gt; ### Traffic Fingerprinting of TCP-like systems
&gt; 
&gt; Today, because Tor terminates TCP at the guard node, there is
&gt; limited ability for the exit node to fingerprint client TCP
&gt; behavior (aside from perhaps measuring some effects on traffic
&gt; volume, but those are not likely preserved across the Tor network).
&gt; 
&gt; However, when using a TCP-like system for end-to-end congestion
&gt; control, flow control, and reliability, the exit relay will be able
&gt; to make inferences about client implementation and conditions based
&gt; on its behavior.
&gt; 
&gt; Different implementations of TCP-like systems behave differently.
&gt; Either party on a stream can observe the packets as they arrive to
&gt; notice cells from an unusual implementation.  They can probe the
&gt; other side of the stream, nmap-style, to see how it responds to
&gt; various inputs.
&gt; 
&gt; If two TCP-like implementations differ in their retransmit or timeout
&gt; behavior, an attacker can use this to distinguish them by carefully
&gt; chosen patterns of dropped traffic.  Such an attacker does not even
&gt; need to be a relay, if it can cause DTLS packets between relays to
&gt; be dropped or reordered.
&gt; 
&gt; This class of attacks is solvable, especially if the exact same
&gt; TCP-like implementation is used by all clients, but it also requires
&gt; careful consideration and additional constraints to be placed on the
&gt; TCP stack(s) in use that are not usually considered by TCP
&gt; implementations -- particularly to ensure that they do not depend on
&gt; OS-specific features or try to learn things about their environment
&gt; over time, across different connections.

Thanks, this is nice and thoughtful analysis.

Does the word "clients" in the last paragraph meant to exclude servers?
Or should I understand something like "peers" that includes clients and
servers? I'm trying to think of how fingerprinting a server could be
useful to an attacker. An onion service doesn't count as a server--at
the layer of the TCP-like protocol, it's a client, with the RP as
server.

Related to implementation differences is configuration. If there are
knobs that let a user control, say, the reassembly buffer size, then
some users will use them and make their protocol fingerprint differ.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181125231509</emailId><senderName>Ivan Markin</senderName><senderEmail>twim@riseup.net</senderEmail><timestampReceived>2018-11-25 23:15:09-0400</timestampReceived><subject>Re: [tor-dev] OnionShare bug that's possibly caused by an upstream v3 onion bug</subject><body>

On 2018-11-25 05:30, Micah Lee wrote:
&gt; I've been working on a major OnionShare release that, among other
&gt; things, will use v3 onion services by default. But it appears that
&gt; either something in stem or in Tor deals with v3 onions differently
&gt; than v2 onions, and causes a critical bug in OnionShare. It took a lot
&gt; of work to track down exactly how to reproduce this bug, and I haven't
&gt; opened an upstream issue for either stem or tor because I feel like I
&gt; don't understand it enough yet.

Hi Micah and all,

Thanks for the heads-up!

I write here only to confirm that I can reproduce the issue without
stem (using bulb) [1]. It seems that the underlying issue should be
in little-t-tor and not in stem.
Or yes, maybe it's not even a bug (though it seems weird to me).

[1] https://github.com/nogoegst/onion-abort-issue

--
Ivan Markin
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181126155504</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-11-26 15:55:04-0400</timestampReceived><subject>Re: [tor-dev] OnionShare bug that's possibly caused by an upstream v3 onion bug</subject><body>

[Attachment #2 (multipart/signed)]


On 24 Nov (21:30:16), Micah Lee wrote:

[snip]

Greetings Micah!

&gt; But with v3 onion services, as soon as the OnionShare web server finishes
&gt; sending the full HTTP response, the torified HTTP client stops downloading.
&gt; I made a small python script, onion-bug.py, that reproduces the issue that
&gt; you can test [2].

This is definitely on "tor" side. Here is what is going on:

When a DEL_ONION command is received, the v3 subsystem will close _all_
related circuits including the rendezvous circuit (where the data is being
transferred).

This is something the v2 subsystem does *not* do so there is your difference
between the two versions. Not closing the rendezvous circuit has the side
effect that the connected client can still talk to the .onion as long as the
application is still running behind. In the case of OnionShare, I don't think
it matters since the Web server is simply gone by then.

That being said, I see that your Python script waits until everything has been
given to "tor" before sending a DEL_ONION (correct me if I'm wrong). So then
the question is how can the circuit dies _before_ everything was sent to the
client if tor has recevied everything?

This is due to how tor handles cells. A DESTROY cell (which closes the circuit
down the path) can be sent even if cells still exist on the circuit queue. In
other words, once a DESTROY cell is issued, it will be high priority and thus
can leave behind some data cells. There are reasons for that so this isn't a
"weird behavior" but by design.

The solution here is to make v3 act like v2 does, that is close everything
except the existing established RP circuit(s) so any transfer can be finalized
and let the application on the other side close connections or simply stop
serving.

I've opened this and marked it for backport:
https://trac.torproject.org/projects/tor/ticket/28619

Big thanks to everyone on that OnionShare ticket for the thorough report!
David

-- 
cMwz8tlpxhpLpDEqM20YhohHUy3beqADHIjBSitF4P4=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181120144811</emailId><senderName>Aaron Johnson</senderName><senderEmail>aaron.m.johnson@nrl.navy.mil</senderEmail><timestampReceived>2018-11-20 14:48:11-0400</timestampReceived><subject>Re: [tor-dev] PrivCount and Prio IRC Meeting</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

I won't be able to be at this meeting, but I would like to make some comments:
  1. Prio's zero-knowledge proofs (i.e. SNIPs) are not secure against a single \
malicious server. If you are using them the decide whether or not to include a given \
input, then a malicious server can cause good inputs to be excluded or bad inputs to \
be included. This could be used to exclude all good inputs except for one target one \
or to repeatedly exclude-then-include the input of a target party over a sequence of \
meaurement periods to see how much it tends to affect the aggregate. The SNIP \
protocols can no doubt be upgraded to provide security against malicious servers, but \
as of yet no such protocol has been published, implemented, or evaluated.  2. A main \
application for using client-provided zero-knowledge proofs is to allow Boolean \
inputs to be added. A client's proof would guarantee that a given input is 0 or 1, \
despite the input being secret-shared using shares in a larger field (say, 32-bit \
values) and thus impossible to otherwise learn anything about its value. The server \
then could add up the inputs to determine how many clients had the Boolean flag set. \
This may well be useful for inputs from clients directly, which is the Mozilla case. \
In Tor's case, there is no plan to have clients submit statistics themselves (e.g. \
from Tor Browser), because it raises obvious privacy/PR concerns (I believe these \
could be mitigated, but that discussion has yet to even seriously start as far as I \
can tell). In the Tor case, the inputs are coming from relays. To the extent that \
relays are reporting on client activity, the Boolean input case seems less useful, as \
the relays should really be reporting the total amount activity they saw instead of \
just if they saw something ever happen. I could imagine, however, that figuring out \
how many relays saw some weird event (like an error, or evidence of some attack) \
happen might be useful. Other than Boolean inputs, I'm not sure what we would want to \
be proved about the inputs. Of the examples in the Prio paper (Sec. 5.2), only \
frequency count and variance seem to use client proofs. Frequency count is the \
Boolean case I discussed. I'm not sure what would justify gathering the variance of \
the per-relay values.  3. PrivCount is compatible with Prio's Affine Function \
Encodings, as such encodings compute aggregates simply by adding inputs.

My overall opinion about Prio is that could be very useful to collect per-client \
statistics, such as from Tor Browser, but that doing so would require an upgraded \
version secure against malicious servers.

Best,
Aaron

&gt; On Nov 19, 2018, at 7:19 PM, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; Hi all,
&gt; 
&gt; We are meeting to discuss PrivCount and Prio at 2200 UTC on
&gt; Tuesday 20 November in #tor-meeting on irc.oftc.net &lt;http://irc.oftc.net/&gt;.
&gt; 
&gt; We will log the meeting, so that people who can't attend can catch
&gt; up later.
&gt; 
&gt; Here's some background:
&gt; 
&gt; Henry Corrigan-Gibbs recently built a private statistics system
&gt; called Prio &lt;https://crypto.stanford.edu/prio/ &lt;https://crypto.stanford.edu/prio/&gt;&gt; \
&gt; that is now used for privately collecting telemetry at Mozilla
&gt; &lt;https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/ \
&gt; &lt;https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/&gt;&gt;.
&gt;  It provides a similar functionality to PrivCount
&gt; &lt;https://ohmygodel.com/publications/privcount-ccs2016.pdf \
&gt; &lt;https://ohmygodel.com/publications/privcount-ccs2016.pdf&gt;&gt; that Tor is planning to \
&gt; use, and also provides strong robustness against malformed or malicious reports.
&gt; 
&gt; 
&gt; Some questions we'll discuss:
&gt; 
&gt; How can we design Tor's statistics to make it easy to:
&gt; * defend against corruption attacks, and
&gt; * support more complex aggregate statistics.
&gt; 
&gt; How does PrivCount in Tor's design handle aggregation
&gt; server failures?
&gt; 
&gt; Some background:
&gt; 
&gt; Here's my quick comparison of Prio and PrivCount in Tor:
&gt; * Prio servers can do complex calculations using linear data structures
&gt; * PrivCount is limited to additive totals (and histograms)
&gt; 
&gt; * Prio servers can defend against corruption attacks using SNIPs
&gt; (secret non-interactive proofs)
&gt; * PrivCount in Tor has an optional scheme to defend against corruption,
&gt; but it requires adding additional noise
&gt; 
&gt; * Prio doesn't have differential privacy (yet)
&gt; * PrivCount guarantees differential privacy across the entire set of
&gt; statistics
&gt; 
&gt; * Prio increases security by failing when one server fails
&gt; * PrivCount in Tor is robust to server failure, and compensates
&gt; for the decreased security by adding more noise
&gt; (The PrivCount design used for our research papers was not
&gt; robust, and failed whenever any server or client failed.)
&gt; 
&gt; 
&gt; Here are our latest specs, notes, and code for PrivCount in Tor:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt \
&gt; &lt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&gt;
&gt;  https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount \
&gt; &lt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount&gt;
&gt;  https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical \
&gt; &lt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical&gt;
&gt;  https://github.com/nmathewson/privcount_shamir \
&gt; &lt;https://github.com/nmathewson/privcount_shamir&gt; 
&gt; T
&gt; 
&gt; -- 
&gt; teor
&gt; ----------------------------------------------------------------------
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hello,&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;I won't be able to be at this meeting, but I would like to make some \
comments:&lt;/div&gt;&lt;div class=""&gt;  1. Prio's zero-knowledge proofs (i.e. SNIPs) are \
not secure against a single malicious server. If you are using them the decide \
whether or not to include a given input, then a malicious server can cause good \
inputs to be excluded or bad inputs to be included. This could be used to exclude all \
good inputs except for one target one or to repeatedly exclude-then-include the input \
of a target party over a sequence of meaurement periods to see how much it tends to \
affect the aggregate. The SNIP protocols can no doubt be upgraded to provide security \
against malicious servers, but as of yet no such protocol has been published, \
implemented, or evaluated.&lt;/div&gt;&lt;div class=""&gt;  2. A main application for using \
client-provided zero-knowledge proofs is to allow Boolean inputs to be added. A \
client's proof would guarantee that a given input is 0 or 1, despite the input being \
secret-shared using shares in a larger field (say, 32-bit values) and thus impossible \
to otherwise learn anything about its value. The server then could add up the inputs \
to determine how many clients had the Boolean flag set. This may well be useful for \
inputs from clients directly, which is the Mozilla case. In Tor's case, there is no \
plan to have clients submit statistics themselves (e.g. from Tor Browser), because it \
raises obvious privacy/PR concerns (I believe these could be mitigated, but that \
discussion has yet to even seriously start as far as I can tell). In the Tor case, \
the inputs are coming from relays. To the extent that relays are reporting on client \
activity, the Boolean input case seems less useful, as the relays should really be \
reporting the total amount activity they saw instead of just if they saw something \
ever happen. I could imagine, however, that figuring out how many relays saw some \
weird event (like an error, or evidence of some attack) happen might be useful. Other \
than Boolean inputs, I'm not sure what we would want to be proved about the inputs. \
Of the examples in the Prio paper (Sec. 5.2), only frequency count and variance seem \
to use client proofs. Frequency count is the Boolean case I discussed. I'm not sure \
what would justify gathering the variance of the per-relay values.&lt;/div&gt;&lt;div \
class=""&gt;  3. PrivCount is compatible with Prio's Affine Function Encodings, as \
such encodings compute aggregates simply by adding inputs.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;My overall opinion about Prio is that could be very \
useful to collect per-client statistics, such as from Tor Browser, but that doing so \
would require an upgraded version secure against malicious servers.&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Best,&lt;/div&gt;&lt;div class=""&gt;Aaron&lt;/div&gt;&lt;div \
class=""&gt;&lt;div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On Nov 19, \
2018, at 7:19 PM, teor &lt;&lt;a href="mailto:teor@riseup.net" \
class=""&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;meta http-equiv="content-type" \
content="text/html; charset=utf-8" class=""&gt;&lt;div dir="auto" class=""&gt;&lt;div dir="ltr" \
class=""&gt;&lt;span class=""&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" class=""&gt;&lt;meta \
http-equiv="content-type" content="text/html; charset=utf-8" class=""&gt;Hi all,&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;We are meeting to discuss PrivCount and \
Prio at 2200 UTC on&lt;/div&gt;&lt;div class=""&gt;Tuesday 20 November in #tor-meeting on &lt;a \
href="http://irc.oftc.net/" class=""&gt;irc.oftc.net&lt;/a&gt;.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;We will log the meeting, so that people who can't attend \
can catch&lt;/div&gt;&lt;div class=""&gt;up later.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Here's some background:&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;Henry Corrigan-Gibbs recently built a private statistics system&lt;br \
class=""&gt;called Prio &lt;&lt;a href="https://crypto.stanford.edu/prio/" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="8" class=""&gt;https://crypto.stanford.edu/prio/&lt;/a&gt;&gt; \
that is now used for&lt;br class=""&gt;privately collecting telemetry at Mozilla&lt;br \
class=""&gt;&lt;&lt;a href="https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="9" \
class=""&gt;https://hacks.mozilla.org/2018/10/testing-privacy-preserving-telemetry-with-prio/&lt;/a&gt;&gt;.&lt;br \
class=""&gt; It provides a similar functionality to PrivCount&lt;br class=""&gt;&lt;&lt;a \
href="https://ohmygodel.com/publications/privcount-ccs2016.pdf" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="10" \
class=""&gt;https://ohmygodel.com/publications/privcount-ccs2016.pdf&lt;/a&gt;&gt; that Tor \
is&lt;br class=""&gt;planning to use, and also provides strong robustness against malformed \
or&lt;br class=""&gt;malicious reports.&lt;/span&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;Some questions we'll discuss:&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;How can we design Tor's statistics to make it easy \
to:&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, \
0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;* defend against \
corruption attacks, and&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;* support more complex aggregate statistics.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;How does PrivCount in Tor's design handle \
aggregation&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;server \
failures?&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;&lt;div class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);" class=""&gt;Some background:&lt;/span&gt;&lt;/div&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
background-color: rgba(255, 255, 255, 0);" class=""&gt;Here's my quick comparison of \
Prio and PrivCount in Tor:&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font \
class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, \
255, 0);" class=""&gt;* Prio servers can do complex calculations using linear data \
structures&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;* PrivCount is limited to additive totals (and histograms)&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;* Prio servers can \
defend against corruption attacks using SNIPs&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font \
class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, \
255, 0);" class=""&gt;  (secret non-interactive proofs)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;* PrivCount in Tor has an optional scheme to defend \
against corruption,&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;  but it &lt;/span&gt;&lt;/font&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);" class=""&gt;requires adding additional noise&lt;/span&gt;&lt;/div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;* Prio doesn't have differential privacy (yet)&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;* PrivCount \
guarantees differential privacy across the entire set of&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;  \
statistics&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);" class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;* Prio increases security by failing when one server fails&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;* PrivCount in Tor \
is robust to server failure, and compensates&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: \
rgba(255, 255, 255, 0);" class=""&gt;  for the decreased security by adding more \
noise&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;  (The PrivCount design used for our research papers was not&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;  \
 robust, and failed whenever any server or client failed.)&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;&lt;div class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;div class=""&gt;&lt;font \
class=""&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, \
255, 0);" class=""&gt;Here are our latest specs, notes, and code for PrivCount in \
Tor:&lt;br class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" \
class=""&gt;&lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="1" \
class=""&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/288-privcount-with-shamir.txt&lt;/a&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="2" \
class=""&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCount&lt;/a&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="3" \
class=""&gt;https://trac.torproject.org/projects/tor/wiki/org/meetings/2018MexicoCity/Notes/PrivCountTechnical&lt;/a&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font class=""&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;a \
href="https://github.com/nmathewson/privcount_shamir" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="4" \
class=""&gt;https://github.com/nmathewson/privcount_shamir&lt;/a&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;div \
dir="ltr" class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;T&lt;/span&gt;&lt;div class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);" class=""&gt;&lt;br class=""&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);" class=""&gt;-- &lt;/span&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);" class=""&gt;teor&lt;/span&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" \
class=""&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div \
class=""&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);" class=""&gt;&lt;br \
class=""&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;_______________________________________________&lt;br \
class=""&gt;tor-dev mailing list&lt;br class=""&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181120190631</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-20 19:06:31-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth scanner: request for feedback</subject><body>

On Mon, Nov 19, 2018 at 7:36 AM teor &lt;teor@riseup.net&gt; wrote:
&gt;
&gt; Hi,
&gt;
&gt; We have deployed sbws on one bandwidth authority (longclaw).
&gt;
&gt; Here's a request for additional feedback, and a progress update:
&gt;
&gt;
&gt; Request for Feedback: Relay Bandwidth Self-Tests
&gt;
&gt; Torflow and sbws use relays' self-reported observed bandwidths for
&gt; load balancing. But relays can have really low bandwidths because
&gt; they're new, or due to random path selection.
&gt;
&gt; In torflow, relays can get stuck in a low-bandwidth partition. sbws
&gt; doesn't have partitions. But in both systems, low bandwidths can
&gt; cause inaccurate or unstable load balancing.
&gt;
&gt; Since torflow and sbws need accurate self-reported relay bandwidths,
&gt; some component of the Tor network needs to send enough bandwidth
&gt; through every relay.
&gt;
&gt; Here are our current choices:
&gt;
&gt; Tor relays can do a regular bandwidth self-test, so that their
&gt; first descriptor has an accurate bandwidth (up to some minimum). But
&gt; the current self-test is too small, and buggy.
&gt;
&gt; sbws already sends bandwidth to all relays to measure them. sbws gets
&gt; accurate bandwidths for most relays within 2 weeks, but the fastest
&gt; relays can take a month to ramp up. (sbws starts measuring at the
&gt; median relay bandwidth, and can double every 5 days.)
&gt;
&gt; Should we improve relay bandwidth self-tests? (#22453)
&gt; Or should we rely on sbws to create the bandwidths it needs?
&gt; What about test networks?

Hi!  I don't think I have the answers here, but maybe I can think
aloud in a useful way.

From my point of view, either of these is a fine idea, if it works.
We could decide based on a lot of factors, like:

* Which one is easier to do?
* Which creates the greater maintenance burden, moving forward?
* Which is more robust if something breaks in the future?
* Which consumes the most relay bandwidth?
* Which requires SBWS to use the most bandwidth?

Maybe if we had those figured out, we'd have a better time deciding.

&gt; Should we make bandwidths grow faster in sbws?
&gt; Or is a ramp-up period of 2-5 weeks fast enough?

I think that's fast enough, though I'm not sure.  How does it compare
with the current average torflow ramp-up time?

&gt; (We won't modify and re-deploy torflow.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181120230302</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-20 23:03:02-0400</timestampReceived><subject>Re: [tor-dev] PrivCount and Prio IRC Meeting</subject><body>

[Attachment #2 (multipart/signed)]


Hi All,

The notes for the PrivCount and Prio meeting are at:

http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-11-20-22.05.html

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlv0kqYACgkQEP6qDnB1
ZyqumQ/+NG3KILQRdoavLc8KKNzoLhjeKwQO/5kMY913TxxSuuI12HmsOit1bgoo
SNogYgfLJWMkug4PUSRS8hzz4Q54TJ6IBCb/IoQ4CDBMYMGAUrBeTaqX57F6iSPx
xBxItROtMLKr40Bzwx+2Z6rDNEv7A+hU8OnLP+IJstl+VnyK5QaYVHO01aP5aVLz
xNfymiSMN/VS9s1FOWnvIBot/4eFwlccGaBDKk3ppnDSVy46WJb0HAkpx2b3Fqq9
esOUclE+ce/azqAyhECcKBZpaK5c5TiugNynUv3P+b3RXJmtpWjylzpE3wQhUAZv
gldHb7vQPDYLQwHRLgK8qiAvITaMM+vr9bZwpzGgNJTa4ufLw6an/O81dkSzNkPq
wEA+vaXFCEJMsdOGQFZPjefkPDk37Pe5ad1DUz3q6/N/gQEjjMsBo9LLsidz30Tg
PLqeEzBL6bfPDJ2OaBBPStnla0oEJdTQbdbQQXHxSSzPaY5Ya+Sa9ZPsO6xJO75r
l3fRsjyERRqkuAaab1KL3VX6GQvK5RZaWv7tFzgSEqv6DrFGI5/OsxE8kDBWz+k8
p3ynsV7ITljG5VK488Dy1UhMkhMS+dkqjvA1tQ6J4In1eLKBKjJ0ghEWRdnQ/pZe
ILiGsxVwQO9Ih6v+wM5ofPV1Hcpcs+FOIdgCMke0Yh8o4rgCJQs=
=E50W
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181121141352</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-11-21 14:13:52-0400</timestampReceived><subject>[tor-dev] Pastly stepping away from sbws</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


I don't have the resources to continue paying attention to the going-ons
of sbws development. It's time for me to clearly and cleanly step away
from sbws and let Tor do with it what they will. It's in good hands.

I've taken the steps I could think of:

- Removed myself from the sbws-admins github team
- Removed myself from the default CC list on trac
- #28559 to revoke my push power to gitweb.tpo/sbws.git

You should feel free to CC me on tickets or grab my attention for
specific issues.

Matt


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181124232131</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-11-24 23:21:31-0400</timestampReceived><subject>Re: [tor-dev] Tor summer of privacy</subject><body>

On Sat, Nov 24, 2018 at 09:22:48PM +0000, Ziad Marghany wrote:
&gt; Hi,
&gt; I would like to participate in Tor summer of privacy, and I would like how I can \
&gt; start preparing from now on. Also, I would like to ask about if I want to propose a \
&gt; project idea, how I should present my idea and should I make a prototype ? I know \
&gt; this is maybe a bit early but I wasn't able to participate last year because I \
&gt; haven't prepared early so, I would like to take my time this year. Thank you for \
&gt; your help and your time.

Hi! Thanks for your interest.

You are indeed very early in the process -- and that's good.

I hear Google is doing another Google Summer of Code next year, so with
luck we will participate in that, and if not, we might run another Tor
Summer of Privacy on our own.

Assuming we do one of these programs, the best way for you to get
selected is for us to already be familiar with your interests and
skills. That is, pick some project in the Tor world that interests you,
and get involved. Help fix the documentation, write some patches, fix
some bugs, whatever you're good at.

You can find projects on 
https://www.torproject.org/getinvolved/volunteer
or
https://www.torproject.org/projects/projects
or by watching the tor-project list:
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-project
https://lists.torproject.org/pipermail/tor-project/
or by watching the irc discussion in #tor-dev, #tor, and #tor-project.

To reiterate: your best shot of being chosen is if you do things now to
make us recognize you (that is, to stand out) when we're choosing people
for the summer spots.

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181126192643</emailId><senderName>Micah Lee</senderName><senderEmail>micah@micahflee.com</senderEmail><timestampReceived>2018-11-26 19:26:43-0400</timestampReceived><subject>Re: [tor-dev] OnionShare bug that's possibly caused by an upstream v3 onion bug</subject><body>

On 11/26/18 7:55 AM, David Goulet wrote:
&gt; I've opened this and marked it for backport:
&gt; https://trac.torproject.org/projects/tor/ticket/28619
&gt; 
&gt; Big thanks to everyone on that OnionShare ticket for the thorough report!
&gt; David

Thank you!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181127193230</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-11-27 19:32:30-0400</timestampReceived><subject>Re: [tor-dev] Whitepaper draft: Towards Side Channel Analysis of Datagram Tor vs Current Tor (traffi</subject><body>

On Tue, Nov 27, 2018 at 12:13 PM David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt;
&gt; On Tue, Nov 27, 2018 at 08:23:21AM -0500, Nick Mathewson wrote:
&gt; &gt; ### Traffic Fingerprinting of TCP-like systems
 [...]
&gt; &gt; This class of attacks is solvable, especially if the exact same
&gt; &gt; TCP-like implementation is used by all clients, but it also requires
&gt; &gt; careful consideration and additional constraints to be placed on the
&gt; &gt; TCP stack(s) in use that are not usually considered by TCP
&gt; &gt; implementations -- particularly to ensure that they do not depend on
&gt; &gt; OS-specific features or try to learn things about their environment
&gt; &gt; over time, across different connections.
&gt;
&gt; Thanks, this is nice and thoughtful analysis.
&gt;
&gt; Does the word "clients" in the last paragraph meant to exclude servers?
&gt; Or should I understand something like "peers" that includes clients and
&gt; servers? I'm trying to think of how fingerprinting a server could be
&gt; useful to an attacker. An onion service doesn't count as a server--at
&gt; the layer of the TCP-like protocol, it's a client, with the RP as
&gt; server.

Right.  I *think* that only parties that need anonymity need to avoid
TCP fingerprinting.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181128030408</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-28 03:04:08-0400</timestampReceived><subject>[tor-dev] New sbws milestones on trac</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

I just made some changes to the simple bandwidth scanner (sbws)
milestones on trac.

sbws 1.0.0 was released a while ago, the latest release is sbws 1.0.2.

We had two sbws 1.0 milestones: sbws 1.0 (MVP must) and
sbws 1.0 (MVP nice). Putting priorities in milestone names is
confusing, and it makes it hard to do queries in trac.

Here's what I did with the remaining 1.0 tickets:
(Using the same naming system as Core Tor/Tor.)

sbws: 1.0.x-final
Bugfixes that we need before we deploy sbws to another directory
authority.
Due date: December before Tor's Christmas shutdown
https://trac.torproject.org/projects/tor/report/70

sbws: 1.1.x-final
Features that we need to diagnose slow and missing relays.
(sbws uses semantic versioning, so features require a minor version
bump.)
Due date: February after the network team hackfest

sbws: 1.2.x-final
Future changes that we might make to the bandwidth measurement system.
No Due Date

We can change the due dates depending on how much progress we make.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlv+BagACgkQEP6qDnB1
Zyo/Og/+MV/4cWT4scxVBsqpcNy6emspxJdYXK0E0IgsySRSjPr2G2Zy62G6u1o8
aE9Li48hpan1yrTGNjj2x6KLmKRIMalRQD3OAdHPQjAJuy8CWns82jQRkeRBDWEi
t99h/FRaPQcbtLPujgBtAtHbnlvpvBVc1G1qqhbns2wB+cN615jGJmujP3LAceL3
ca5sZanqW5lL1d4XaSfEYpj8PfcsHCqvxff156Ny9hcmzsqUukFlC66o7LGF+8CR
1kLzxud081Mw76gLww5OV+YFrQc5w1Q6Fw4oBhxn43U3bAahGBdfUcXBCXmjw1kg
AzL0Ckk2WozVaKBjumC6hb6586EjcxWXVx1ie/O3l/3dRzJXHCBKOGIcLi4MKdEm
kK7zTqCVbx6/N21GeblyORDdagDB+aYUWSb4A+/xQMF6OC+gqUwC9NmT3kpj3Tyw
Jh0Y6DPB+hcTAGWAVO4citeW1IbNGTrfOVd55VeLms41dk4zymKgamVr1VSLilp0
BLY3rLiAEpoY8rH9MEi5SiKi+0dDa4Gn01X8uHHSTuOW2p4VDK6NXyay81Qc02Gf
4ojTweU7zdu9W3f11iyVIeAALTjkRXvnnXP2i6jDTPgGDT3VWzCiXH9kTG9/G+Qg
VhgI7OVsDpi/WHA2YW0EMJyICWVoMFnZwudfyQHpGqE2seqT8p0=
=NnTd
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181128222435</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-28 22:24:35-0400</timestampReceived><subject>Re: [tor-dev] Dealing with frequent suspends on Android</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 27 Nov 2018, at 07:46, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; On Wed, Nov 21, 2018 at 5:10 PM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; On 20/11/2018 19:28, Nick Mathewson wrote:
&gt; &gt; &gt; Hi!  I don't know if this will be useful or not, but I'm wondering if
&gt; &gt; &gt; you've seen this ticket:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/28335
&gt; &gt; &gt; 
&gt; &gt; &gt; The goal of this branch is to create a "dormant mode" where Tor does
&gt; &gt; &gt; not run any but the most delay- and rescheduling-tolerant of its
&gt; &gt; &gt; periodic events.  Tor enters this mode if a controller tells it to, or
&gt; &gt; &gt; if (as a client) it passes long enough without user activity.  When in
&gt; &gt; &gt; dormant mode, it doesn't disconnect from the network, and it will wake
&gt; &gt; &gt; up again if the controller tells it to, or it receives a new client
&gt; &gt; &gt; connection.
&gt; 
&gt; &gt; The comments on the pull request
&gt; &gt; (https://github.com/torproject/tor/pull/502) ...
&gt; 
&gt; &gt; One of the comments mentions a break-even point for consensus diffs,
&gt; &gt; where it costs less bandwidth to fetch a fresh consensus than all the
&gt; &gt; diffs from the last consensus you know about. Are diffs likely to remain
&gt; &gt; available up to the break-even point, or are there times when it would
&gt; &gt; be cheaper to use diffs, but you have to fetch a fresh consensus because
&gt; &gt; some of the diffs have expired?
&gt; 
&gt; This shouldn't be a problem: directory caches will (by default) keep
&gt; diffs slightly beyond the break-even point.
&gt; 
&gt; (I think. I haven't measured this in a while.)

We measured the number of cached consensuses after a collector outage in
August:

https://lists.torproject.org/pipermail/tor-relays/2018-August/015850.html

Some relays had ~16 consensuses, others had ~24 or ~48.

If a relay is using lzma, zstd, and gzip compression, then it will only
store about 16 past consensuses:
https://github.com/torproject/tor/blob/672e26cad837e368dfe39d53546b85afd69ad75c/src/feature/dircache/consdiffmgr.c#L180


If my sums are correct, that is:
128 files / 2 consensus flavours / (1 consensus + 3 compressed diffs) = 16 \
consensuses

Should we increase cache_max_num to 196?
Should we increase cache_max_num when the sandbox isn't being used?

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlv/FaMACgkQEP6qDnB1
Zyp05hAAs+wEPVPoJuSnpLQWjy7G7ThDvQZ23quVLOE+9A4Znhl6Wc+n5wl8LNp8
3ctjnAReZGEWORyoXJcQfgQ69bLAlQKIULSG8ILdAcOGINw4DjKFYPxtyCrNCvJ2
94AYiKpve28MpfY+hx0sxRTEtEnMC5/6DnK9LV69hXEJrGvRTyze6ZSAsnTY1kfM
pVJynhhP0KFHKzCuXr6BqKldv0Zopz71R4TKwn3OitUcjYMH2qVQAiRZ7W5Scqai
roJ5IH6NULt3Rg+m9DZW7oJMy4y+FI7zZnC/BprUdSDvPPqXkAamqdE3ukAyXfnP
Jl2UK2cLrPkD1wrPacW3ubIbPPlDuunA6v6gvVgTaZ5BIaXTlMACcxBrexhZaddi
LpwwbhalR7Rt+yk+PIud1Wi3Bf/zB3btJPnk6mUojKnTfXSF9JYP1JuL1a+x8DEk
eyr4F+4g4wfGFORgtMQFH0td6UhVVv3mA3GvtVtqngBKR+5UkVUA5IqRulilsBDa
Yqg3NzXriT1oQ/cuZjWGqj2e08v2Ftnfu4Jr57fCHkQ1wbvhtoriNudebWv2WsKx
1WWS/c4EP8RvJABYYYpaWO07bf9D2zuwe652Ki85yNszMYsUezTSFp2txcFudtNv
pFKKDRgzXgBdq6MSxlVOYrh7eHTo/wYD1+wrX323Eq5/CIWFxDk=
=UClK
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181129002919</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-29 00:29:19-0400</timestampReceived><subject>[tor-dev] Network team meeting Tuesday at 2300 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,


The next network team meeting is on Tuesday 4 December at 2300 UTC.
(If this time doesn't work for you, we'll see you the week after.)

Our meetings are held on #tor-meeting on OFTC.

We'll be meeting on Monday at 1800 UTC for 10 December and 17 December.

The Tor office is closed for the holidays from 24 December to 1 January.
Many of us will take leave during that time, so there won't be any meetings.

Here's the schedule:

First meeting each month: Tuesday at 2300 UTC.
Other meetings each month: Mondays at 1800 UTC.

T



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlv/Mt8ACgkQEP6qDnB1
ZyoZjRAAr0a/cdDHSacz6hLwCio6sFbImf37AipP9hZV0gglMbbMpRcLaIqMmGlM
enDoMdpJ/w/HI4MOxkWZHYL/EhMQmzwyZwqOpp0w/0Z1fnYnTzAg1TNNwnCpPUjC
WiayzE9fJf2DBNspYN18qodNIGYgHajTlAH8urKg9RoB3pPqSMG+hDbHh1yI/CRi
mYqOa4qYcpIVMbTUzWGAjETlfVyJDc75OawjzQ1fefWWlyvJ5Umd5KSgLI3KGgKD
gKhz2EB0VMu1BgMoyuPk1sZnhfws3Hc7FM4Wj1NCvsO5k4sPNqsAsfVNDxJHWzV4
mO5iVE60+IqNNfOGupq1kCsUBeo31TznBzuknHfxGoFqY3sOkPKq00ZSmbAVrcjX
la0tdS2djN/miHy/N31huivLIAGIFWYOxYA6rNpd6FOJIV1X9PSmc9tw5RVoagzh
qSpDkXEaXBku2z2ajcF6NE4cCJoNE0MgtIXkjzSxCfiY0wTYQgHqiE1EKlAbIkfV
eOHukoTlUmjIlQg5Q61nRBBvD0A3NELM9H//6w84AfHrLxGeyabyTyTStmQzSjNA
CGOrM7mzKFrL5xK/OtIKcHqdovxXd7J9vmGM93pgFcwKSF9tj0UZuU+04bEiTz/o
IWQPIf7GClJ2e05k3zBL/VW3z9YxCJPvFWvmp33xyJDrPiIrBzI=
=nPYn
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181129010301</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-11-29 01:03:01-0400</timestampReceived><subject>Re: [tor-dev] Merging Tor Bug #27490</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Thanks for your patience.

&gt; On 29 Nov 2018, at 10:23, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; I noticed that while you all have accepted bug #27490 (When ClientPreferIPv6ORPort \
&gt; is set to auto, and a relay is being chosen for a directory or orport connection, \
&gt; prefer IPv4 or IPv6 at random), it has not been merged. Is there anything I can do \
&gt; to speed up the process

I left a note on the ticket, it should be merged soon.

&gt; since I also have code ready for #27491 and #27492 but am awaiting the merger of \
&gt; #27490 before I submit them? 
&gt; I am also currently working on Bug #27647.

You can continue with these tickets based on master, or your branch in #27490.
When you're done, you can post pull requests to the tickets.

If the merge causes problems, we will help clean up your branches.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlv/OsUACgkQEP6qDnB1
ZyoJJw//azqHMBv8l/SZAjfIZ6HD7kwTt015XKI8JBsvqZoTV0UowlVymKNwGKlN
TGA7wb1KZFEUVWNM06GMhwGfO3iSUSGuKdKOif4MwbNhPtsKtdPW5wAt7NmkGyJU
dH5zEM+j1mOpKajtF9z6w6UZQuZx12NL0dDv2ZnVtEBqWHBODLCSjQZKdMn9PySA
K5zzZwA6D7EwkRm0Q+TX3urtTeqt+xGAV45+Emu/HRtekB018UMLdufrUvShHGqg
fF0ex14j7M+Ktb9A17QC39ygJ4phDMQNzRXeQC8OIptsGQwbceUTCOAmbPrnRg3+
ehWQwpxYU/daIU5y90m0CsaYl3dFimqg6ZlqsJAZPsSHjZ8DI/BSyTfUqNYUo2yc
xWiNF02z0RplQ10cI/pdPf+yfsMZEDT9cU1JgZuxGNDpsiYuoEs/bOCtlOQzjeHE
mW19K1t7KhQsq4ohu4hqhzK+T7w5steLan8P1wtS/AfVQM0k6v5d8EcZNWozkMt1
IAkZcN33fy9IWf+NJhHMf+aHSf2r6iMRCW9Sj6zoz2GBCEA8ta6zulpZhf3a5Vk9
GHPmZ3AWi1RURRVsUl7/OTY40Ln+lxrfdVeUxPH8rYnxj3n2gdWHgFPLjScKVLej
vBvTldUQweLw/ICkzya0VodKbdRzh00XxPv3wMfbu7Mvtt3RwVA=
=f6Lv
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181004151406</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-04 15:14:06-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Thu, Oct 04, 2018 at 09:37:18AM +0200, Andreas Krey wrote:
&gt; A quick search indicates that aws and azure are already
&gt; supporting it, although I'm unable to interpret whether that is
&gt; actually the respective product you are/were using.

That's exactly it. Of course you can spin up a random EC2 machine or
Azure VM and connect to it with WebSocket. But a random AWS or Azure IP
address doesn't have the properties we want--it is easily blockable.
Why? Because there are no other valuable services running on the same IP
address, once it is discovered, the censor can block it with virtually
zero cost. (Not that it's an unworkable model--that's basically how
obfs4 works--it means you have to have to be careful about distributing
bridges, and keep replenishing the pool as they are inevitably blocked.)
Encrypted SNI does not help you here, not when there is only one service
running on the IP address.

We specifically use the CDN service, because the high degree of
co-hosting behind a CDN edge server makes it more expensive to block. In
this case, encrypted SNI (or formerly domain fronting) really does help,
because there are many and valuable sites hosted there, and connections
to different sites look the same from the censor's point of view. We're
not connecting via a cloud service just for fun, but because we depend
critically on that co-hosting to make blocking difficult. It's possible
that services other than the CDN services also have that property--it
would require some investigation to uncover--but then you would have to
ensure that the other service, too, supports WebSocket.

I'm not saying a WebSocket-in-TLS transport is a bad idea. It's just
that there's more to it than the protocol you use. You also have to go
through a proxy server that's expensive to block. As a proxy server,
most CDNs will support an HTTP/2 tunnel, but not WebSocket. And if you
don't have a CDN in the middle, you may as well use a plain CONNECT
proxy rather than WebSocket.

Related reading:
https://tools.ietf.org/html/draft-ietf-tls-sni-encryption-03#section-2.2
	Many deployments still allocate different IP addresses to
	different services, so that different services can be identified
	by their IP addresses. However, content distribution networks
	(CDN) commonly serve a large number of services through a small
	number of addresses.
https://tools.ietf.org/html/draft-ietf-tls-esni-01#section-3.1
	In principle, the provider might not be the origin for any
	domains, but as a practical matter, it is probably the origin
	for a large set of innocuous domains, but is also providing
	protection for some private domains.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181005001911</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-10-05 00:19:11-0400</timestampReceived><subject>[tor-dev] txtorcon 18.2.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm glad to announce txtorcon 18.2.0. This adds or fixes the
following:

 * add `privateKeyFile=` option to endpoint parser (ticket 313)
 * use `privateKey=` option properly in endpoint parser
 * support `NonAnonymous` mode for `ADD_ONION` via `single_hop=` kwarg

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.2.0
   https://github.com/meejah/txtorcon/releases/tag/v18.2.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.2.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.2.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.2.0.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.2.0.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
b1714dfa633cb4097c9ea649c8c49657d9d22a990cc465bb904620428c5e684e  \
dist/txtorcon-18.2.0.tar.gz \
9d05f2b1144dfbc63844e78fbc51a195e3b39a79f280db50a81b346476c47e7b  \
dist/txtorcon-18.2.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlu2qS0RHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaafvxAgAxsqlJ7LcnX2SxU89NHXJZ/og9ZkcKF89
RCAdYm/G1R4cJpqX9wjd0Kt38NJJyt/SuT95wGtYInLjrrTs3lzg7ToLoRxIodaF
rXdlnUKaNJBStpIW62oJ1WRq8AFsjtjnxFv9iuIyUCA7BMh/nkKwCMoEOqtQ/KbO
V43DjZpTr9cQmn62c1b6H+x+TVXhyZxiTK0d7WTHrrKbMOIpSKIJTezZvOfDV7MC
dQdmLlhE1qxW8X5UjlNeWApuGWtY6U9aSVJcglN6Ecp8bZcvvS9LSWxn+KHkbzFX
uLOgTyfp9/mQsAeVosp9HQ7iB+6BD27blJlMIBFPNLoBaFNjX91H7A==
=v2ac
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181005231458</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-10-05 23:14:58-0400</timestampReceived><subject>[tor-dev] txtorcon 18.3.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Hot on the heels of 18.2.0 comes 18.3.0 because I forgot to add the
"single_hop=" feature to endpoint-strings:

 * add `singleHop={true,false}` for endpoint-strings as well

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.3.0
   https://github.com/meejah/txtorcon/releases/tag/v18.3.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.3.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.3.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.3.0.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.3.0.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
5601956b3a2452526cd1ea31662696a51ddbf8ed6452633ee464fc1ff275f8b0  \
dist/txtorcon-18.3.0.tar.gz \
8edac3b6d9c633b9182b4e5a2ed3ac86953ed44b9ea230aac3e0708c30b73861  \
dist/txtorcon-18.3.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlu37ycRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaafaFAf/e4pVR7bL+gDMq2sJVaFVFzsQqPTV2RLi
9e5A7RRfCPfDSPMyJg71I5qnXXY7aXMP5kBOmK1WF7hN06NRrYGuVifWzijogosP
l/2KIGp1I6nK77JTNdjPqnSfQ9N+/ZXaXK3ILzlmSiyI3PMaLgPjB0x2JM6NhcfQ
pPPKuL9K0bw94slGSTJa29py4yBV4VhAG0qwHEigw3Zwie2iAejk1GwSW9UEhJnp
GBDECiaBdgDZZozn43Q9WXoVIcTnsjTBIN9Km3gNgIcn+ZbwH461HKDXvW7yDfsV
oZ7thGr5xD9ENErOzWgU52kMOOuo/pM50vAlzJC518iV39deCD1GQA==
=6d14
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181007225215</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2018-10-07 22:52:15-0400</timestampReceived><subject>[tor-dev] Network team meeting postponed to Tuesday</subject><body>

Hi!

A lot of people are off on Monday, so we'll try to have our weekly
meeting on Tuesday Oct 9, at the regular time.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181008085900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-10-08 08:59:00-0400</timestampReceived><subject>Re: [tor-dev] deb.tpo 0.3.5 repos intentionally empty?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Peter Palfrader:
&gt;&gt;
&gt;&gt; the tor 0.3.5.x repos (example [1]) exist since some time
&gt;&gt; but are empty since then, is that intentional?
&gt; 
&gt; All existing 0.3.5.x releases fail to build from source (#27781).

thanks for that info. 
Let's wait for the next release then I guess.


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181012212622</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2018-10-12 21:26:22-0400</timestampReceived><subject>[tor-dev] Orbot 16.0.3-BETA-2 (tor-0.3.4.8) release for testing</subject><body>


Highlights
- Tor 0.3.4.8 / OpenSSL 1.0.2p with dirauth module disabled (not used
for client devices)
- Updated Obfs4/Meek pluggable transport support and built-in bridges
- Simplified (less memory, network &amp; battery intensive) notification
with "New Identity" button

APKs up here:
https://github.com/n8fr8/orbot/releases/tag/16.0.3-BETA-2
https://guardianproject.info/releases/Orbot-16.0.3-BETA-2-tor-0.3.4.8-fullperm-universal-release.apk
(.asc)

****
@n8fr8 n8fr8 released this just now
Assets 6

    Orbot-16.0.3-BETA-2-tor-0.3.4.8-fullperm-armeabi-release.apk 8.77 MB
    Orbot-16.0.3-BETA-2-tor-0.3.4.8-fullperm-armeabi-release.apk.asc 862
Bytes
    Orbot-16.0.3-BETA-2-tor-0.3.4.8-fullperm-universal-release.apk 17.8 MB
    Orbot-16.0.3-BETA-2-tor-0.3.4.8-fullperm-universal-release.apk.asc
862 Bytes
    Source code (zip)
    Source code (tar.gz)

f06939b (HEAD -&gt; master, tag: 16.0.3-BETA-2-tor-0.3.4.8, public/master,
origin/master, origin/HEAD, dev/master) update build 16030020
9d3bd82 udpate default bridges
c207a1e update new simpler notification with "new identity" button
bcae003 add permission to service manifest
a7130ab update to latest tor android 0.3.4.8
a5d1978 update default bridges
ffda769 update NDK build script
3349454 update to latest Pluto obfs4proxy builds
048ed9f Merge branch 'master' of github.com:n8fr8/orbot
84e0433 (tag: 16.0.3-BETA-1-tor-0.3.4.8) update version to
16.0.3-BETA-1-tor-0.3.4.8 and build to 16030010
66cc8ad improve service checking for running Tor instance
6bc161b update to Tor 0.3.4.8
0ff8d7c Merge pull request #173 from haghighi-ahmad/patch-1
772e0db Improve Persian translation and fix grammar.
129b55a Merge branch 'master' of github.com:n8fr8/orbot
1bef963 Merge branch 'Unpublished-deprecated_torrc'
b2bf3d9 Merge branch 'deprecated_torrc' of
https://github.com/Unpublished/orbot into Unpublished-deprecated_torrc
06c343c update launcher web graphic
3433112 update launcher graphics
bd61739 update version and constrains library
9a866aa update gradle tooling
31238af update tor to 0.3.4.7 RC

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181013170933</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-13 17:09:33-0400</timestampReceived><subject>Re: [tor-dev] Idea which may or may not of been discussed</subject><body>

On Sat, Oct 13, 2018 at 12:21:49PM -0400, Matt Traudt wrote:
&gt; Why wouldn't it be just as easy for censors to identify the small set of
&gt; registered domains that Tor relays use and block TLS connections that
&gt; involve them?

And in general, IMO pluggable transports are the right layer to address
this, not the Tor TLS layer. The way Tor uses TLS is already way more
complicated than it needs to be, partly because of past attempts to
build obfuscation into the core protocol rather than handling it as a
separate layer.
https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/TLSHistory

The certificate server name is a pretty easy distinguishing feature--but
it's not the only one. But there are other ways in which the Tor TLS
handshake stands out, even if you use real server names with legit
certs. It's not easy to hack OpenSSL into perfectly imitating e.g., a
Firefox TLS fingerprint. That's why meek uses an instance of Firefox to
do its TLS, and why https://github.com/refraction-networking/utls
exists.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181015033905</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-10-15 03:39:05-0400</timestampReceived><subject>Re: [tor-dev] Characterizing Tor flows using DPI</subject><body>

Hi,


&gt; On 12 Oct 2018, at 21:40, Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; wrote:
&gt; 
&gt; I have some confusion regarding the characterization of Tor traffic using DPI.
&gt; I was following the link \
&gt; (https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/TLSHistory ) and \
&gt; understood that Tor did TLS renogotiation at some point and then discontinued doing \
&gt; it.  As an improvement there are basically two handshakes that are done.
&gt; (i) "outer handshake" which is made to look as real as possible.
&gt; (ii) "inner handshake" which is actually used to authenticate and exchange "real" \
&gt; certificates. 
&gt; I am just not able to understand as to why we need two handshakes, also why do we \
&gt; need "real" and "fake" certificates.

Historically, the tor protocol was modified to avoid censorship.
But now we use pluggable transports to avoid censorship.

Tor's inner handshake also does not rely on TLS/SSL security, which has historically
made Tor traffic harder to compromise using TLS/SSL attacks.

&gt; Or if i am missing something, can someone point me to the right resources where i \
&gt; can get the current tor TLS implementation details.

The "Connections" section in the Tor specification describes the current
Tor handshake, and legacy versions:

https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n197

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181015150750</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-10-15 15:07:50-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.8.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi, everyone!

A new release is available:

  https://dist.torproject.org/collector/1.8.0/

From the change log:

 * Medium changes
   - Properly clean up sanitized web server logs in the recent/
     directory when they turn older than three days.

 * Minor changes
   - Once more, fix the bug in the tarball-creation script where
     tarballs are not compressed in a run following an aborted run.
   - Improve logging to find possible issue with missing server
     descriptors.
   - Update directory authority IP addresses in default properties
     file.

This CollecTor release is already deployed on all Tor Metrics CollecTor
instances.

Please direct comments and questions to the metrics-team mailing list:

  https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181015223320</emailId><senderName>"Dr. Brandon Wiley"</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2018-10-15 22:33:20-0400</timestampReceived><subject>Re: [tor-dev] Information on Pluggable Transports</subject><body>

[Attachment #2 (multipart/alternative)]


Yes, there are implementations of PT 2.0 and 2.1 specifications. One of the
criteria that we have adopted in the 2.1 specification process is that
proposals need to have an implementation available before they can be
considered for inclusion in a release of the specification.

Tor uses the part of the specification known as the Dispatcher IPC
Interface to control a Pluggable Transport provider (known as a dispatcher)
running in a separate process. The 2.0 and 2.1 versions of this protocol
are compatible.

You can find a dispatcher implementation which conforms to the 2.1
specification and is backwards-compatible with the 2.0 Dispatcher IPC
Interface specification here:
https://github.com/OperatorFoundation/shapeshifter-dispatcher
This dispatcher implementation currently provides the obfs2, obfs4, and
Shadowsocks transports.

At one point, we (Operator Foundation) provided a patch to Tor implementing
the 2.0 Dispatcher IPC Interface. You can find the fork here:
https://oniongit.eu/nickm/tor/tree/dasyatid-rtt2017
You can find the associated Trac ticket here:
https://trac.torproject.org/projects/tor/ticket/21816

Operator Foundation does not currently have any plans to commit additional
resources to the Tor patch, but it is there as a starting point if anyone
is interested in pursuing the project of updating Tor to conform to the PT
2.0 (and 2.1) protocol. We will be continuing to update the dispatcher
implementation to match the specification as it evolves, as well as adding
new transports as they are developed.


On Mon, Oct 15, 2018 at 4:52 PM teor &lt;teor@riseup.net&gt; wrote:

&gt; Hi Brandon,
&gt;
&gt; On 16 Oct 2018, at 02:59, Dr. Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt;
&gt; If you are looking for information about Pluggable Transports, the
&gt; Pluggable Transports website has up-to-date information:
&gt; https://www.pluggabletransports.info/
&gt;
&gt; If you want to follow the specification process, drafts and proposal are
&gt; available here:
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec
&gt;
&gt; The current stable version of the specification is PT 2.0:
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf
&gt; The current draft of the next version being working on is PT 2.1 draft 1:
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/releases/PTSpecV2.1Draft1
&gt;
&gt;
&gt; Is there any code that implements version 2.0 or 2.1 of these specs?
&gt;
&gt; Tor currently implements the PT 1.0 specification:
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-1_0.txt
&gt;
&gt;
&gt; T
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Yes, there are \
implementations of PT 2.0 and 2.1 specifications. One of the criteria that we have \
adopted in the 2.1 specification process is that proposals need to have an \
implementation available before they can be considered for inclusion in a release of \
the specification.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor uses the part of the \
specification known as the Dispatcher IPC Interface to control a Pluggable Transport \
provider (known as a dispatcher) running in a separate process. The 2.0 and 2.1 \
versions of this protocol are compatible.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can find a \
dispatcher implementation which conforms to the 2.1 specification and is \
backwards-compatible with the 2.0 Dispatcher IPC Interface specification here: &lt;a \
href="https://github.com/OperatorFoundation/shapeshifter-dispatcher"&gt;https://github.com/OperatorFoundation/shapeshifter-dispatcher&lt;/a&gt;&lt;/div&gt;&lt;div&gt;This \
dispatcher implementation currently provides the obfs2, obfs4, and Shadowsocks \
transports.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;At one point, we (Operator Foundation) \
provided a patch to Tor implementing the 2.0 Dispatcher IPC Interface. You can find \
the fork here: &lt;a href="https://oniongit.eu/nickm/tor/tree/dasyatid-rtt2017"&gt;https://oniongit.eu/nickm/tor/tree/dasyatid-rtt2017&lt;/a&gt;&lt;/div&gt;&lt;div&gt;You \
can find the associated Trac ticket here: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/21816"&gt;https://trac.torproject.org/projects/tor/ticket/21816&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Operator \
Foundation does not currently have any plans to commit additional resources to the \
Tor patch, but it is there as a starting point if anyone is interested in pursuing \
the project of updating Tor to conform to the PT 2.0 (and 2.1) protocol. We will be \
continuing to update the dispatcher implementation to match the specification as it \
evolves, as well as adding new transports as they are \
developed.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon, Oct 15, 2018 at 4:52 PM teor &lt;&lt;a \
href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;div&gt;Hi \
Brandon,&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 16 Oct 2018, at 02:59, Dr. Brandon Wiley \
&lt;&lt;a href="mailto:brandon@blanu.net" target="_blank"&gt;brandon@blanu.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;If you are looking for \
information about Pluggable Transports, the Pluggable Transports website has \
up-to-date information: &lt;a href="https://www.pluggabletransports.info/" \
target="_blank"&gt;https://www.pluggabletransports.info/&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you want to follow the specification process, drafts and \
proposal are available here: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec" \
target="_blank"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
current stable version of the specification is PT 2.0: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf" \
target="_blank"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf&lt;/a&gt;&lt;/div&gt;&lt;div&gt;The \
current draft of the next version being working on is PT 2.1 draft 1: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/releases/PTSpecV2.1Draft1" \
target="_blank"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree \
/master/releases/PTSpecV2.1Draft1&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is \
there any code that implements version 2.0 or 2.1 of these \
specs?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Tor currently implements the PT 1.0 \
specification: &lt;a href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-1_0.txt" \
target="_blank"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob \
/master/releases/pt-1_0.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt; \
&lt;div&gt;&lt;br&gt;&lt;/div&gt;T&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;_______________________________________________&lt;br&gt;
 tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181022142608</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-22 14:26:08-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 19/10/2018 16:05, Leif Ryge wrote:
&gt; On Wed, Oct 17, 2018 at 07:27:32PM +0100, Michael Rogers wrote:
&gt; [...] 
&gt;&gt; If we decided not to use the key blinding trick, and just allowed both
&gt;&gt; parties to know the private key, do you see any attacks?
&gt; [...]
&gt; 
&gt; If I'm understanding your proposal correctly, I believe it would leave
&gt; you vulnerable to a Key Compromise Impersonation (KCI) attack.
&gt; 
&gt; Imagine the scenario where Alice and Bob exchange the information to
&gt; establish their temporary rendezvous onion which they both know the
&gt; private key to, and they agree that Bob will be the client and Alice
&gt; will be the server.
&gt; 
&gt; But, before Bob connects to it, the adversary somehow obtains a copy of
&gt; everything Bob knows (but they don't have the ability to modify data or
&gt; software on his computer - they just got a copy of his secrets somehow).
&gt; 
&gt; Obviously the adversary could then impersonate Bob to Alice, because
&gt; they know everything that Bob knows. But, perhaps less obviously, in the
&gt; case that Bob is supposed to connect to Alice's temporary onion which
&gt; Bob (and now the adversary) know the key to, the adversary can also
&gt; now impersonate Alice to Bob (by overwriting Alice's descriptors and
&gt; taking over her temporary onion service).
&gt; 
&gt; In this scenario, if Bob hadn't known the private key for Alice's
&gt; temporary onion that he is connecting to, impersonating Alice to Bob
&gt; would not have been possible.
&gt; 
&gt; And of course, if the adversary can successfully impersonate both
&gt; parties to eachother at this phase, they can provide their own long-term
&gt; keys to each of them, and establish a long-term bidirectional mitm -
&gt; which, I think, would otherwise not be possible even in the event that
&gt; one party's long-term key was compromised.
&gt; 
&gt; Bob losing control of the key material before using it (without his
&gt; computer being otherwise compromised) admittedly seems like an unlikely
&gt; scenario, but you asked for "any attacks", so, I think KCI is one (if
&gt; I'm understanding your proposal correctly).

Hi Leif,

Thanks for pointing this out - I'd heard about this kind of attack but
I'd forgotten to consider it.

We're planning to do a key exchange at the application layer after
making the hidden service connection, so I don't think the adversary's
ability to impersonate Alice's hidden service to Bob would necessarily
lead to application-layer impersonation on its own. But if you hadn't
raised this we might have designed the application-layer key exchange in
a way that was vulnerable to KCI as well, so thanks!

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181023223241</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-23 22:32:41-0400</timestampReceived><subject>[tor-dev] Easy(?) adaptation of meek-client for ESNI</subject><body>

On Mon, Sep 24, 2018 at 08:23:58PM -0600, David Fifield wrote:
&gt; What we would need in order for meek to used encrypted SNI would be
&gt; either:
&gt;  1) support for encrypted SNI in Go's crypto/tls package; or
&gt;  2) support for encrypted SNI in the Firefox that ships with Tor
&gt;     Browser, which meek-client could use through its TLS camouflage
&gt;     helper support.
&gt; 
&gt; IMO (2) is less desirable because I'd like to get rid of the TLS
&gt; camouflage helper support and replace it with a Go-level TLS camouflage
&gt; library: https://github.com/refraction-networking/utls. The TLS helper
&gt; works, but its complexity is a pain to deal with and leads to problems
&gt; like https://bugs.torproject.org/12774 https://bugs.torproject.org/25405.

I wrote an untested overview of how to adapt meek to use ESNI, using an
external copy of Firefox Nightly rather than Tor Browser's built-in copy
of Firefox. Testing this out to see if it works would be a good task for
someone who wants to get involved with pluggable transports.

Use ESNI via Firefox HTTPS helper
https://bugs.torproject.org/28168

1. Download Tor Browser and Firefox Nightly.
2. Go to about:config in Firefox nightly and set
     network.trr.mode=3
     network.trr.uri=https://1.1.1.1/dns-query
     network.security.esni.enabled=true
3. Copy the meek-http-helper@bamsoftware.com.xpi from Tor Browser to
   Firefox Nightly.
4. Hack meek-client-torbrowser/{mac,linux,windows}.go to point
   firefoxPath at the copy of Firefox Nightly and disable the custom
   profile. (Additional hacks to remove hardcoded Tor Browser
   assumptions may be required.)
5. Set up a Cloudflare instance pointing to https://meek.bamsoftware.com/,
   call it https://meek.example.com/.
6. Set up a custom bridge in Tor Browser, using url= without front=
   (because we're no longer domain fronting).
     bridge meek 0.0.2.0:3 url=https://meek.example.com/ 

The only slightly weird part I foresee is hacking
meek-client-torbrowser; it has some internal hardcoded paths and
profiles that are specific to the Tor Browser directory layout, and
you'll have to point those to an external Firefox Nightly. Of course,
once ESNI support makes its way into Tor Browser itself, there won't be
a need for another external copy of Firefox.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181007122800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-10-07 12:28:00-0400</timestampReceived><subject>[tor-dev] deb.tpo 0.3.5 repos intentionally empty?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi, 

the tor 0.3.5.x repos (example [1]) exist since some time
but are empty since then, is that intentional?

kind regards,
nusenu

[1] https://deb.torproject.org/torproject.org/dists/tor-experimental-0.3.5.x-stretch/main/binary-amd64/Packages


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181013040715</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-10-13 04:07:15-0400</timestampReceived><subject>[tor-dev] Idea which may or may not of been discussed</subject><body>

[Attachment #2 (multipart/alternative)]


Currently tor traffic uses an TLS handshake hostname like the following:

$ sudo tcpdump -An "tcp" | grep "www"
listening on pktap, link-type PKTAP (Apple DLT_PKTAP), capture size 262144 bytes
.............".
...www.odezz26nvv7jeqz1xghzs.com......................#.!...www.bxbko3qi7vacgwyk4ggulh \
.com..........6....m.....&gt;...:.........|../*	Z....W....X=..6...C../................... \
.................0...0..0.......'....F./0..	*.H........0%1#0!..U....www.b6zazzahl3h3fa \
f4x2.com0...160402000000Z..170317000000Z0'1%0#..U....www.tm3ddrghe22wgqna5u8g.net0..0..


A network observer could run a DNS lookup on the hostnames and see if they
are real or not. So my idea would be to register a set of random hostnames
which are legitimate and point the IPs somewhere to avoid looking for an NX
Domain response and dropping the stream. You could even give each relay a
unique subdomain and rotate these every few weeks. This may be expensive to
implement but could make blocking Tor traffic with this method harder.
Thoughts?

Cordially,
Nathaniel Suchy


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Currently tor traffic uses an TLS \
handshake hostname like the following:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;$ sudo tcpdump \
-An &lt;span class="gmail-pl-s"&gt;&lt;span class="gmail-pl-pds"&gt;"&lt;/span&gt;tcp&lt;span \
class="gmail-pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="gmail-pl-k"&gt;|&lt;/span&gt; grep \
&lt;span class="gmail-pl-s"&gt;&lt;span class="gmail-pl-pds"&gt;"&lt;/span&gt;www&lt;span \
class="gmail-pl-pds"&gt;"&lt;/span&gt;&lt;/span&gt; listening on pktap, link-type PKTAP (Apple \
                DLT_PKTAP), capture size 262144 bytes
.............&lt;span class="gmail-pl-s"&gt;&lt;span class="gmail-pl-pds"&gt;"&lt;/span&gt;. \
...www.odezz26nvv7jeqz1xghzs.com.........&lt;/span&gt; &lt;span \
class="gmail-pl-s"&gt;.............#.!...www.bxbko3qi7vacgwyk4ggulh.com.........&lt;/span&gt; \
&lt;span class="gmail-pl-s"&gt;.6....m.....&gt;...:.........|../*	Z....W....X=..6...C../.... \
................................0...0..0.......'....F./0..	*.H........0%1#0!..U... \
.www.b6zazzahl3h3faf4x2.com0...160402000000Z..170317000000Z0'1%0#..U....www.tm3ddrghe22wgqna5u8g.net0..0..&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/pre&gt;A \
network observer could run a DNS lookup on the hostnames and see if they are real or \
not. So my idea would be to register a set of random hostnames which are legitimate \
and point the IPs somewhere to avoid looking for an NX Domain response and dropping \
the stream. You could even give each relay a unique subdomain and rotate these every \
few weeks. This may be expensive to implement but could make blocking Tor traffic \
with this method harder. Thoughts?&lt;br&gt;&lt;br&gt;Cordially,&lt;br&gt;Nathaniel Suchy&lt;br&gt;&lt;pre&gt;&lt;span \
class="gmail-pl-s"&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181012115242</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2018-10-12 11:52:42-0400</timestampReceived><subject>Re: [tor-dev] Characterizing Tor flows using DPI</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

I have some confusion regarding the characterization of Tor traffic using
DPI.
I was following the link (
https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/TLSHistory )
and understood that Tor did TLS renogotiation at some point and then
discontinued doing it.
As an improvement there are basically two handshakes that are done.
(i) "outer handshake" which is made to look as real as possible.
(ii) "inner handshake" which is actually used to authenticate and exchange
"real" certificates.

I am just not able to understand as to why we need two handshakes, also why
do we need "real" and "fake" certificates.
Or if i am missing something, can someone point me to the right resources
where i can get the current tor TLS implementation details.


Regards

Piyush
PhD CSE
IIITD

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hello all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have some \
confusion regarding the characterization of Tor traffic using DPI.&lt;/div&gt;&lt;div&gt; I was \
following the link (&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/TLSHistory"&gt;https://trac.torproject.org/projects/tor/wiki/org/projects/Tor/TLSHistory&lt;/a&gt; \
) and understood that Tor did TLS renogotiation at some point and then discontinued \
doing it. &lt;br&gt;&lt;/div&gt;&lt;div&gt;As an improvement there are basically two handshakes that \
are done.&lt;/div&gt;&lt;div&gt;(i) "outer handshake" which is made to look as real as \
possible.&lt;/div&gt;&lt;div&gt;(ii) "inner handshake" which is actually used to \
authenticate and exchange "real" certificates.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
am just not able to understand as to why we need two handshakes, also why do we need \
"real" and "fake" certificates.&lt;/div&gt;&lt;div&gt;Or if i am missing \
something, can someone point me to the right resources where i can get the current \
tor TLS implementation details.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
dir="ltr" class="gmail-m_5127729804692137953gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;&lt;br&gt;&lt;/div&gt;Piyush&lt;br&gt;&lt;/div&gt;&lt;div&gt;PhD \
CSE&lt;br&gt;&lt;/div&gt;&lt;div&gt;IIITD &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181014141810</emailId><senderName>Pritam Kadasi</senderName><senderEmail>kadasipritam@gmail.com</senderEmail><timestampReceived>2018-10-14 14:18:10-0400</timestampReceived><subject>[tor-dev] Information on Pluggable Transports</subject><body>

[Attachment #2 (multipart/alternative)]


 Hi all,

i'am currectly working on a project on tor. can you help me to get enough
resources for Pluggable Transports.

i would like to know more on how obfuscation happens in detail.

thanking you.

Pritam

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;
	  &lt;div&gt;Hi all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;i'am currectly working on a project on \
tor. can you help me to get enough resources for Pluggable \
Transports.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;i would like to know more on how obfuscation \
happens in detail.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;thanking \
you.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Pritam&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180927124354</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-09-27 12:43:54-0400</timestampReceived><subject>[tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi all,

The Briar team is working on a way for users to add each other as
contacts by exchanging links without having to meet in person.

We don't want to include the address of the user's long-term Tor hidden
service in the link, as we assume the link may be observed by an
adversary, who would then be able to use the availability of the hidden
service to tell whether the user was online at any future time.

We're considering two solutions to this issue. The first is to use a
temporary hidden service that's discarded after, say, 24 hours. The
address of the temporary hidden service is included in the link. This
limits the window during which the user's activity is exposed to an
adversary who observes the link, but it also requires the contact to use
the link before it expires.

The second solution is to include an ECDH public key in the link,
exchange links with the contact, and derive a hidden service key pair
from the shared secret. The key pair is known to both the user and the
contact. One of them publishes the hidden service, the other connects to
it. They exchange long-term hidden service addresses via the temporary
hidden service, which is then discarded.

The advantage of the second solution is that the user's link is static -
it doesn't expire and can be shared with any number of contacts. A
different shared secret, and thus a different temporary hidden service,
is used for adding each contact.

But using a hidden service in such a way that the client connecting to
the service knows the service's private key is clearly a departure from
the normal way of doing things. So before pursuing this idea I wanted to
check whether it's safe, in the sense that the hidden service still
conceals its owner's identity from the client.

Attacks against the availability of the service (such as uploading a
different descriptor) are pointless in this scenario because the client
is the only one who would connect to the service anyway. So I'm just
interested in attacks against anonymity.

Can anyone shed any light on this question? Or is this way of using
hidden services too disgusting to even discuss? :-)

Thanks,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181026145721</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-10-26 14:57:21-0400</timestampReceived><subject>[tor-dev] Add EVENT message to pt-spec.txt and control-spec.txt</subject><body>

[Attachment #2 (multipart/signed)]


Greetings tor-dev!

We've been working on improving PT reporting towards Tor so for instance Tor
Browser can better inform the user or take actions based on the PT state when
connecting to the network.

The following ticket summarize it:
https://trac.torproject.org/projects/tor/ticket/28180

To achieve this, we are submitting these to torspec.git patches to extend both
the pt-spec.txt and control-spec.txt to support such mechanism. This is the
first draft.

Below is the link to the PT spec patch. It adds the EVENT message that for now
is only used, as you will see, for reporting connection status message.
However, you should see this EVENT message as extendable to whatever the PT
would like to report to Tor that we can think of in the future:

https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28181_01&amp;id=0814114fb39f9f7ddf16de35f97092ed74ffd1ee


The second, is simpler, it is how Tor will send it back to the control port:

https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28182_01&amp;id=b57d272f570847cdcf073b5fdf5b523d3f57d889


Please, any questions or feedbacks is very welcome! The main idea here is to
keep things simple and extendable.

Note that since Tor doesn't implement the PT 2.0 spec yet, we haven't done
anything for that spec but after skimming the version 2, I think we can easily
move this EVENT message concept if we want it.

Cheers!
David

-- 
t2Mtu4qBote14xSTFee/xnHlXp1eabwHFbehBlktnus=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181026183127</emailId><senderName>"Dr. Brandon Wiley"</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2018-10-26 18:31:27-0400</timestampReceived><subject>Re: [tor-dev] Add EVENT message to pt-spec.txt and control-spec.txt</subject><body>

[Attachment #2 (multipart/alternative)]


Well I think this is a great feature and it's something which people have
been requesting for a while now, and which I know was discussed at the PT
meeting at the last TorDev. I think this is the sort of feature that just
makes transports better for everyone, both transport designers and
applications that use transports. Several different options for this sort
of signalling have been discussed in the past at the Pluggable Transport
Implementers Meetings and it's nice to see a concrete proposal.

We have spent several years building a Pluggable Transport community which
includes a diverse group of tool developers that all use Pluggable
Transports. Tor is a key member of this group and has participated in all
of our meetings and the development of our community process for revision
of the Pluggable Transport specification. By following the community
process for proposing changes to the PT specification, all stakeholders get
a chance to provide feedback on the proposal and we an ensure ease of use
for developers in terms of clarity on backwards compatibility and semantic
versioning.

I would love to see this proposal submitted through the community
specification process for inclusion in the next release of the
specification. Simply add a proposal to the proposals/ directory of the
specification repository (
https://github.com/Pluggable-Transports/Pluggable-Transports-spec) and
issue a pull request. We will then add it to the schedule for review,
discussion, and eventual inclusion in a specification release.

Great work, and I look forward to working with you to get this useful
functionality for all transports and transport-enabled applications!


On Fri, Oct 26, 2018 at 9:57 AM David Goulet &lt;dgoulet@torproject.org&gt; wrote:

&gt; Greetings tor-dev!
&gt; 
&gt; We've been working on improving PT reporting towards Tor so for instance
&gt; Tor
&gt; Browser can better inform the user or take actions based on the PT state
&gt; when
&gt; connecting to the network.
&gt; 
&gt; The following ticket summarize it:
&gt; https://trac.torproject.org/projects/tor/ticket/28180
&gt; 
&gt; To achieve this, we are submitting these to torspec.git patches to extend
&gt; both
&gt; the pt-spec.txt and control-spec.txt to support such mechanism. This is the
&gt; first draft.
&gt; 
&gt; Below is the link to the PT spec patch. It adds the EVENT message that for
&gt; now
&gt; is only used, as you will see, for reporting connection status message.
&gt; However, you should see this EVENT message as extendable to whatever the PT
&gt; would like to report to Tor that we can think of in the future:
&gt; 
&gt; 
&gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28181_01&amp;id=0814114fb39f9f7ddf16de35f97092ed74ffd1ee
&gt;  
&gt; The second, is simpler, it is how Tor will send it back to the control
&gt; port:
&gt; 
&gt; 
&gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28182_01&amp;id=b57d272f570847cdcf073b5fdf5b523d3f57d889
&gt;  
&gt; Please, any questions or feedbacks is very welcome! The main idea here is
&gt; to
&gt; keep things simple and extendable.
&gt; 
&gt; Note that since Tor doesn't implement the PT 2.0 spec yet, we haven't done
&gt; anything for that spec but after skimming the version 2, I think we can
&gt; easily
&gt; move this EVENT message concept if we want it.
&gt; 
&gt; Cheers!
&gt; David
&gt; 
&gt; --
&gt; t2Mtu4qBote14xSTFee/xnHlXp1eabwHFbehBlktnus=
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Well I think this is a great feature and it's \
something which people have been requesting for a while now, and which I know was \
discussed at the PT meeting at the last TorDev. I think this is the sort of feature \
that just makes transports better for everyone, both transport designers and \
applications that use transports. Several different options for this sort of \
signalling have been discussed in the past at the Pluggable Transport Implementers \
Meetings and it's nice to see a concrete proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
have spent several years building a Pluggable Transport community which includes a \
diverse group of tool developers that all use Pluggable Transports. Tor is a key \
member of this group and has participated in all of our meetings and the development \
of our community process for revision of the Pluggable Transport specification. By \
following the community process for proposing changes to the PT specification, all \
stakeholders get a chance to provide feedback on the proposal and we an ensure ease \
of use for developers in terms of clarity on backwards compatibility and semantic \
versioning.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would love to see this proposal submitted \
through the community specification process for inclusion in the next release of the \
specification. Simply add a proposal to the proposals/ directory of the specification \
repository (&lt;a href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec&lt;/a&gt;) \
and issue a pull request. We will then add it to the schedule for review, discussion, \
and eventual inclusion in a specification release.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Great \
work, and I look forward to working with you to get this useful functionality for all \
transports and transport-enabled \
applications!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div \
dir="ltr"&gt;On Fri, Oct 26, 2018 at 9:57 AM David Goulet &lt;&lt;a \
href="mailto:dgoulet@torproject.org" target="_blank"&gt;dgoulet@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Greetings tor-dev!&lt;br&gt; &lt;br&gt;
We've been working on improving PT reporting towards Tor so for instance Tor&lt;br&gt;
Browser can better inform the user or take actions based on the PT state when&lt;br&gt;
connecting to the network.&lt;br&gt;
&lt;br&gt;
The following ticket summarize it:&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/ticket/28180" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/28180&lt;/a&gt;&lt;br&gt; &lt;br&gt;
To achieve this, we are submitting these to torspec.git patches to extend both&lt;br&gt;
the pt-spec.txt and control-spec.txt to support such mechanism. This is the&lt;br&gt;
first draft.&lt;br&gt;
&lt;br&gt;
Below is the link to the PT spec patch. It adds the EVENT message that for now&lt;br&gt;
is only used, as you will see, for reporting connection status message.&lt;br&gt;
However, you should see this EVENT message as extendable to whatever the PT&lt;br&gt;
would like to report to Tor that we can think of in the future:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28181_01&amp;id=0814114fb39f9f7ddf16de35f97092ed74ffd1ee" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/user/dgoulet/torspec.gi \
t/commit/?h=ticket28181_01&amp;id=0814114fb39f9f7ddf16de35f97092ed74ffd1ee&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; The second, is simpler, it is how Tor will send it back to the control port:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28182_01&amp;id=b57d272f570847cdcf073b5fdf5b523d3f57d889" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/user/dgoulet/torspec.gi \
t/commit/?h=ticket28182_01&amp;id=b57d272f570847cdcf073b5fdf5b523d3f57d889&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; Please, any questions or feedbacks is very welcome! The main idea here is to&lt;br&gt;
keep things simple and extendable.&lt;br&gt;
&lt;br&gt;
Note that since Tor doesn't implement the PT 2.0 spec yet, we haven't \
done&lt;br&gt; anything for that spec but after skimming the version 2, I think we can \
easily&lt;br&gt; move this EVENT message concept if we want it.&lt;br&gt;
&lt;br&gt;
Cheers!&lt;br&gt;
David&lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
t2Mtu4qBote14xSTFee/xnHlXp1eabwHFbehBlktnus=&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180927190201</emailId><senderName>Chad Retz</senderName><senderEmail>chad.retz@gmail.com</senderEmail><timestampReceived>2018-09-27 19:02:01-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

I am no expert here, but I'm confused by "the client connecting to the
service knows the service's private key". Why not just create an onion
service (per contact) and then use the client authentication feature
to ensure they share the same secret? Client auth is built in to
discovery and from what I understand, retains anonymity of the owner.
Also, why derive the hidden service key pair from the shared secret
instead of having the sender provide the address based on a privately
derived key pair? To your primary question, I to would like to know
that, given the private key of an onion service, the anonymity of the
original publisher is maintained. I would guess that it is (granted
they can overwrite the descriptor and take it over and what not).

Chad
On Thu, Sep 27, 2018 at 8:26 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;
&gt; Hi all,
&gt;
&gt; The Briar team is working on a way for users to add each other as
&gt; contacts by exchanging links without having to meet in person.
&gt;
&gt; We don't want to include the address of the user's long-term Tor hidden
&gt; service in the link, as we assume the link may be observed by an
&gt; adversary, who would then be able to use the availability of the hidden
&gt; service to tell whether the user was online at any future time.
&gt;
&gt; We're considering two solutions to this issue. The first is to use a
&gt; temporary hidden service that's discarded after, say, 24 hours. The
&gt; address of the temporary hidden service is included in the link. This
&gt; limits the window during which the user's activity is exposed to an
&gt; adversary who observes the link, but it also requires the contact to use
&gt; the link before it expires.
&gt;
&gt; The second solution is to include an ECDH public key in the link,
&gt; exchange links with the contact, and derive a hidden service key pair
&gt; from the shared secret. The key pair is known to both the user and the
&gt; contact. One of them publishes the hidden service, the other connects to
&gt; it. They exchange long-term hidden service addresses via the temporary
&gt; hidden service, which is then discarded.
&gt;
&gt; The advantage of the second solution is that the user's link is static -
&gt; it doesn't expire and can be shared with any number of contacts. A
&gt; different shared secret, and thus a different temporary hidden service,
&gt; is used for adding each contact.
&gt;
&gt; But using a hidden service in such a way that the client connecting to
&gt; the service knows the service's private key is clearly a departure from
&gt; the normal way of doing things. So before pursuing this idea I wanted to
&gt; check whether it's safe, in the sense that the hidden service still
&gt; conceals its owner's identity from the client.
&gt;
&gt; Attacks against the availability of the service (such as uploading a
&gt; different descriptor) are pointless in this scenario because the client
&gt; is the only one who would connect to the service anyway. So I'm just
&gt; interested in attacks against anonymity.
&gt;
&gt; Can anyone shed any light on this question? Or is this way of using
&gt; hidden services too disgusting to even discuss? :-)
&gt;
&gt; Thanks,
&gt; Michael
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181027120206</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2018-10-27 12:02:06-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,
I have a few specific questions related to the pluggable transports.

1.) I believe that obfs4 stops active probing(the latest problem as brought
to notice by Ensafi et al, IMC 2015 and Shinying Cho, FOCI 2018), and hence
discovering obfs4 Tor bridges using active probing is not possible. Is that
true? If so, then we are good to go and hence we don't need any other
pluggable transport to work for us as long as obfs4 is working?

2.) What was the motivation to bring in meek as a pluggable transport,
given the fact that obfs4 works great to cover all the existing problems
with Tor detection. Was the motivation just the fact that, it will be much
easier for the users to use meek than obfs4 or something other than this?

3.) I searched a lot but could not find the timeline in which pluggable
transports were built. As in what was developed and deployed first, obfs4
or meek?

Regards

Piyush
IIITD

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hello all,&lt;/div&gt;&lt;div&gt;I have a few specific \
questions related to the pluggable transports.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1.) I believe \
that obfs4 stops active probing(the latest problem as brought to notice by Ensafi et \
al, IMC 2015 and Shinying Cho, FOCI 2018), and hence discovering obfs4 Tor bridges \
using active probing is not possible. Is that true? If so, then we are good to go and \
hence we don't need any other pluggable transport to work for us as long as obfs4 \
is working? &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.) What was the motivation to bring in \
meek as a pluggable transport, given the fact that obfs4 works great to cover all the \
existing problems with Tor detection. Was the motivation just the fact that, it will \
be much easier for the users to use meek than obfs4 or something other than \
this?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3.) I searched a lot but could not find the timeline \
in which pluggable transports were built. As in what was developed and deployed \
first, obfs4 or meek? &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir="ltr" \
class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;&lt;br&gt;&lt;/div&gt;Piyush&lt;br&gt;&lt;/div&gt;&lt;div&gt;IIITD \
&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181027220705</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2018-10-27 22:07:05-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

Hi :),

I can't give you an answer to your history questions, since I wasn't
involved in the history of PTs but I have the feeling you have this
fundamental question "Why we should work on an other PT, as long as the
stuff which we already have works fine?" (?)

Simple answer: You should always have an active role (beeing faster
like the other party in development) and not a passive role (waiting
until your stuff doesn't work anymore before you work on something new)
in the fight against censorship.

Best regards,
Carolin

Am Samstag, den 27.10.2018, 17:20 +0530 schrieb Piyush Kumar Sharma:
&gt; Hello all,
&gt; I have a few specific questions related to the pluggable transports.
&gt; 
&gt; 1.) I believe that obfs4 stops active probing(the latest problem as
&gt; brought to notice by Ensafi et al, IMC 2015 and Shinying Cho, FOCI
&gt; 2018), and hence discovering obfs4 Tor bridges using active probing
&gt; is not possible. Is that true? If so, then we are good to go and
&gt; hence we don't need any other pluggable transport to work for us as
&gt; long as obfs4 is working? 
&gt; 
&gt; 2.) What was the motivation to bring in meek as a pluggable
&gt; transport, given the fact that obfs4 works great to cover all the
&gt; existing problems with Tor detection. Was the motivation just the
&gt; fact that, it will be much easier for the users to use meek than
&gt; obfs4 or something other than this?
&gt; 
&gt; 3.) I searched a lot but could not find the timeline in which
&gt; pluggable transports were built. As in what was developed and
&gt; deployed first, obfs4 or meek? 
&gt; 
&gt; Regards
&gt; 
&gt; Piyush
&gt; IIITD 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181027224214</emailId><senderName>Sambuddho Chakravarty</senderName><senderEmail>sambuddho@iiitd.ac.in</senderEmail><timestampReceived>2018-10-27 22:42:14-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

[Attachment #2 (multipart/alternative)]


Obfs4 can apparently solve most of the problems pertinent to identifying
Tor bridge traffic by inspection of TLS headers...

Meek relies on SNI field of TLS headers to communicate to bridges via a
"front end ".

From an overall cursory glance it appears that obfs4 was introduced in 2014
while Meek came later (probably 2015). Thus why would one choose to go back
to relying on TLS traffic that could potentially be identified by the
adversary is a bit unclear (considering that there already existed a
superior solution then , i.e. obfs4).

On Sun, Oct 28, 2018, 03:37 Carolin Z=C3=B6belein &lt;contact@carolin-zoebelei=
n.de&gt;
wrote:

&gt; Hi :),
&gt;
&gt; I can't give you an answer to your history questions, since I wasn't
&gt; involved in the history of PTs but I have the feeling you have this
&gt; fundamental question "Why we should work on an other PT, as long as the
&gt; stuff which we already have works fine?" (?)
&gt;
&gt; Simple answer: You should always have an active role (beeing faster
&gt; like the other party in development) and not a passive role (waiting
&gt; until your stuff doesn't work anymore before you work on something new)
&gt; in the fight against censorship.
&gt;
&gt; Best regards,
&gt; Carolin
&gt;
&gt; Am Samstag, den 27.10.2018, 17:20 +0530 schrieb Piyush Kumar Sharma:
&gt; &gt; Hello all,
&gt; &gt; I have a few specific questions related to the pluggable transports.
&gt; &gt;
&gt; &gt; 1.) I believe that obfs4 stops active probing(the latest problem as
&gt; &gt; brought to notice by Ensafi et al, IMC 2015 and Shinying Cho, FOCI
&gt; &gt; 2018), and hence discovering obfs4 Tor bridges using active probing
&gt; &gt; is not possible. Is that true? If so, then we are good to go and
&gt; &gt; hence we don't need any other pluggable transport to work for us as
&gt; &gt; long as obfs4 is working?
&gt; &gt;
&gt; &gt; 2.) What was the motivation to bring in meek as a pluggable
&gt; &gt; transport, given the fact that obfs4 works great to cover all the
&gt; &gt; existing problems with Tor detection. Was the motivation just the
&gt; &gt; fact that, it will be much easier for the users to use meek than
&gt; &gt; obfs4 or something other than this?
&gt; &gt;
&gt; &gt; 3.) I searched a lot but could not find the timeline in which
&gt; &gt; pluggable transports were built. As in what was developed and
&gt; &gt; deployed first, obfs4 or meek?
&gt; &gt;
&gt; &gt; Regards
&gt; &gt;
&gt; &gt; Piyush
&gt; &gt; IIITD
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Obfs4 can apparently solve most of the problems pertinent to \
identifying Tor bridge traffic by inspection of TLS headers...&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Meek relies on SNI field of TLS headers to \
communicate to bridges via a "front end ".&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;From an overall cursory glance it appears that \
obfs4 was introduced in 2014 while Meek came later (probably 2015). Thus why would \
one choose to go back to relying on TLS traffic that could potentially be identified \
by the adversary is a bit unclear (considering that there already existed a superior \
solution then , i.e. obfs4).&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div \
dir="ltr"&gt;On Sun, Oct 28, 2018, 03:37 Carolin Zöbelein &lt;&lt;a \
href="mailto:contact@carolin-zoebelein.de"&gt;contact@carolin-zoebelein.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi :),&lt;br&gt; &lt;br&gt;
I can't give you an answer to your history questions, since I wasn't&lt;br&gt;
involved in the history of PTs but I have the feeling you have this&lt;br&gt;
fundamental question "Why we should work on an other PT, as long as the&lt;br&gt;
stuff which we already have works fine?" (?)&lt;br&gt;
&lt;br&gt;
Simple answer: You should always have an active role (beeing faster&lt;br&gt;
like the other party in development) and not a passive role (waiting&lt;br&gt;
until your stuff doesn't work anymore before you work on something new)&lt;br&gt;
in the fight against censorship.&lt;br&gt;
&lt;br&gt;
Best regards,&lt;br&gt;
Carolin&lt;br&gt;
&lt;br&gt;
Am Samstag, den 27.10.2018, 17:20 +0530 schrieb Piyush Kumar Sharma:&lt;br&gt;
&gt; Hello all,&lt;br&gt;
&gt; I have a few specific questions related to the pluggable transports.&lt;br&gt;
&gt; &lt;br&gt;
&gt; 1.) I believe that obfs4 stops active probing(the latest problem as&lt;br&gt;
&gt; brought to notice by Ensafi et al, IMC 2015 and Shinying Cho, FOCI&lt;br&gt;
&gt; 2018), and hence discovering obfs4 Tor bridges using active probing&lt;br&gt;
&gt; is not possible. Is that true? If so, then we are good to go and&lt;br&gt;
&gt; hence we don't need any other pluggable transport to work for us as&lt;br&gt;
&gt; long as obfs4 is working? &lt;br&gt;
&gt; &lt;br&gt;
&gt; 2.) What was the motivation to bring in meek as a pluggable&lt;br&gt;
&gt; transport, given the fact that obfs4 works great to cover all the&lt;br&gt;
&gt; existing problems with Tor detection. Was the motivation just the&lt;br&gt;
&gt; fact that, it will be much easier for the users to use meek than&lt;br&gt;
&gt; obfs4 or something other than this?&lt;br&gt;
&gt; &lt;br&gt;
&gt; 3.) I searched a lot but could not find the timeline in which&lt;br&gt;
&gt; pluggable transports were built. As in what was developed and&lt;br&gt;
&gt; deployed first, obfs4 or meek? &lt;br&gt;
&gt; &lt;br&gt;
&gt; Regards&lt;br&gt;
&gt; &lt;br&gt;
&gt; Piyush&lt;br&gt;
&gt; IIITD &lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 _______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029115557</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-29 11:55:57-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 27/10/2018 12:50, Piyush Kumar Sharma wrote:
&gt; 2.) What was the motivation to bring in meek as a pluggable transport,
&gt; given the fact that obfs4 works great to cover all the existing problem=
s
&gt; with Tor detection. Was the motivation just the fact that, it will be
&gt; much easier for the users to use meek than obfs4 or something other tha=
n
&gt; this?

Hi Piyush,

I'm not a Tor dev but I'll try to answer this.

To use obfs4 the client needs to know the IP address of an obfs4 bridge.
If these addresses are distributed in a public or semi-private way,
eventually the adversary may learn them in the same way that clients do,
in which case they can be blacklisted without active probing.

Meek allows the client to connect to any server that belongs to a "front
domain". If the front domain also hosts a lot of popular services or
important infrastructure then the adversary may be reluctant to block
it, in which case it isn't necessary to keep the front domain secret
from the adversary.

Until recently, Meek used AWS and Google App Engine as front domains. I
believe those services have stopped supporting domain fronting, but a
similar tactic may soon become possible with encrypted SNI, which is now
supported by Cloudflare.

If anyone on the list knows whether/when we're likely to see a pluggable
transport based on encrypted SNI I'd love to hear about it.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029142501</emailId><senderName>Nicolas Vigier</senderName><senderEmail>boklm@mars-attacks.org</senderEmail><timestampReceived>2018-10-29 14:25:01-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

[Attachment #2 (multipart/signed)]


On Mon, 29 Oct 2018, Michael Rogers wrote:

&gt;=20
&gt; If anyone on the list knows whether/when we're likely to see a pluggable
&gt; transport based on encrypted SNI I'd love to hear about it.

There was a thread on this topic recently:
https://lists.torproject.org/pipermail/tor-dev/2018-September/013453.html

So it seems the first step is having major adoption by browsers and
websites, before using it for anti-censorship. Otherwise censors could
just block all encrypted SNI requests.


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029145719</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-10-29 14:57:19-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

[Attachment #2 (multipart/alternative)]


Firefox Nightly let's you manually enable it. I'd wait until at least
Firefox and Chromium add support to avoid setting off red flags for a
censor. Having collateral damage is important with pluggable transports 😑

Cordially,
Nathaniel

On Mon, Oct 29, 2018 at 10:25 AM Nicolas Vigier &lt;boklm@mars-attacks.org&gt;
wrote:

&gt; On Mon, 29 Oct 2018, Michael Rogers wrote:
&gt;
&gt; &gt;
&gt; &gt; If anyone on the list knows whether/when we're likely to see a pluggable
&gt; &gt; transport based on encrypted SNI I'd love to hear about it.
&gt;
&gt; There was a thread on this topic recently:
&gt; https://lists.torproject.org/pipermail/tor-dev/2018-September/013453.html
&gt;
&gt; So it seems the first step is having major adoption by browsers and
&gt; websites, before using it for anti-censorship. Otherwise censors could
&gt; just block all encrypted SNI requests.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div&gt;&lt;div dir="auto"&gt;Firefox Nightly let's you manually enable it. I'd wait until at \
least Firefox and Chromium add support to avoid setting off red flags for a censor. \
Having collateral damage is important with pluggable transports 😑&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Cordially,&lt;/div&gt;&lt;div \
dir="auto"&gt;Nathaniel&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Mon, \
Oct 29, 2018 at 10:25 AM Nicolas Vigier &lt;&lt;a \
href="mailto:boklm@mars-attacks.org"&gt;boklm@mars-attacks.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Mon, 29 Oct 2018, Michael Rogers \
wrote:&lt;br&gt; &lt;br&gt;
&gt; &lt;br&gt;
&gt; If anyone on the list knows whether/when we're likely to see a pluggable&lt;br&gt;
&gt; transport based on encrypted SNI I'd love to hear about it.&lt;br&gt;
&lt;br&gt;
There was a thread on this topic recently:&lt;br&gt;
&lt;a href="https://lists.torproject.org/pipermail/tor-dev/2018-September/013453.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/pipermail/tor-dev/2018-September/013453.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
So it seems the first step is having major adoption by browsers and&lt;br&gt;
websites, before using it for anti-censorship. Otherwise censors could&lt;br&gt;
just block all encrypted SNI requests.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180928014033</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-09-28 01:40:33-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

On Thu, Sep 27, 2018 at 9:26 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;
&gt; Hi all,
&gt;
&gt; The Briar team is working on a way for users to add each other as
&gt; contacts by exchanging links without having to meet in person.
&gt;
&gt; We don't want to include the address of the user's long-term Tor hidden
&gt; service in the link, as we assume the link may be observed by an
&gt; adversary, who would then be able to use the availability of the hidden
&gt; service to tell whether the user was online at any future time.
&gt;
&gt; We're considering two solutions to this issue. The first is to use a
&gt; temporary hidden service that's discarded after, say, 24 hours. The
&gt; address of the temporary hidden service is included in the link. This
&gt; limits the window during which the user's activity is exposed to an
&gt; adversary who observes the link, but it also requires the contact to use
&gt; the link before it expires.
&gt;
&gt; The second solution is to include an ECDH public key in the link,
&gt; exchange links with the contact, and derive a hidden service key pair
&gt; from the shared secret. The key pair is known to both the user and the
&gt; contact. One of them publishes the hidden service, the other connects to
&gt; it. They exchange long-term hidden service addresses via the temporary
&gt; hidden service, which is then discarded.


Here's a third idea to think about:  What if you use the same key
derivation trick we use in v3 onion services?

That is, every user could have a long term private key x and a public
key g^x.  If the user with key g^x wants to allow a user with g^y to
meet them with them, they derive s=h( g^xy) as the shared secret...
but instead of using s as a private key, they do the key derivation
trick, so that the single-use public key is derived as (g^x)*(g^s) =
g^(x+s), and the single use secret key is derived as (x + s).  This
way, each of them winds up with a private/public keypair for use with
the other; each user is the only one that knows their private key; and
the two of them are the only ones who can derive the public key.

You could do this in Tor's v3 onion-service design as-is: Just put
h(g^xy) as the the "optional secret s" input when deriving the daily
key.

For more info on this key derivation mechanism, see rend-spec-v3.txt,
appendix A.

(Warning: I am not a cryptographer; I haven't thought about this idea
very hard yet.)

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181001111521</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-01 11:15:21-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi Chad,

On 27/09/2018 20:02, Chad Retz wrote:
&gt; I am no expert here, but I'm confused by "the client connecting to the
&gt; service knows the service's private key". Why not just create an onion
&gt; service (per contact) and then use the client authentication feature
&gt; to ensure they share the same secret? Client auth is built in to
&gt; discovery and from what I understand, retains anonymity of the owner.

Creating an onion service per contact would be a possibility, and
although some information about the user's online and offline periods
would still be leaked to an adversary who observed the link, via the
publication and renewal of the hidden service descriptor, I think you're
right that client auth would reduce the leakage by preventing the
adversary from connecting to the service to test whether it was online
at any given moment. Thanks for the suggestion!

&gt; Also, why derive the hidden service key pair from the shared secret
&gt; instead of having the sender provide the address based on a privately
&gt; derived key pair?

I admit it's a weird way of doing things. The shared secret approach
allows the user to use the same link for all contacts over a long
period, without exposing a long-term hidden service address to an
adversary who observes the links.

This has some advantages, such as being able to publish your link via
multiple channels (email sig, social media profile, etc) that recipients
can check to increase their confidence that they've received your
authentic link.

On the other hand, time-limited or single-use links are less likely to
become surveillance selectors in their own right, and the "key
fingerprints on business cards" pattern has never really caught on. So
there are pros and cons to both approaches.

Cheers,
Michael

&gt; To your primary question, I to would like to know
&gt; that, given the private key of an onion service, the anonymity of the
&gt; original publisher is maintained. I would guess that it is (granted
&gt; they can overwrite the descriptor and take it over and what not).
&gt; 
&gt; Chad
&gt; On Thu, Sep 27, 2018 at 8:26 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hi all,
&gt;&gt;
&gt;&gt; The Briar team is working on a way for users to add each other as
&gt;&gt; contacts by exchanging links without having to meet in person.
&gt;&gt;
&gt;&gt; We don't want to include the address of the user's long-term Tor hidden
&gt;&gt; service in the link, as we assume the link may be observed by an
&gt;&gt; adversary, who would then be able to use the availability of the hidden
&gt;&gt; service to tell whether the user was online at any future time.
&gt;&gt;
&gt;&gt; We're considering two solutions to this issue. The first is to use a
&gt;&gt; temporary hidden service that's discarded after, say, 24 hours. The
&gt;&gt; address of the temporary hidden service is included in the link. This
&gt;&gt; limits the window during which the user's activity is exposed to an
&gt;&gt; adversary who observes the link, but it also requires the contact to use
&gt;&gt; the link before it expires.
&gt;&gt;
&gt;&gt; The second solution is to include an ECDH public key in the link,
&gt;&gt; exchange links with the contact, and derive a hidden service key pair
&gt;&gt; from the shared secret. The key pair is known to both the user and the
&gt;&gt; contact. One of them publishes the hidden service, the other connects to
&gt;&gt; it. They exchange long-term hidden service addresses via the temporary
&gt;&gt; hidden service, which is then discarded.
&gt;&gt;
&gt;&gt; The advantage of the second solution is that the user's link is static -
&gt;&gt; it doesn't expire and can be shared with any number of contacts. A
&gt;&gt; different shared secret, and thus a different temporary hidden service,
&gt;&gt; is used for adding each contact.
&gt;&gt;
&gt;&gt; But using a hidden service in such a way that the client connecting to
&gt;&gt; the service knows the service's private key is clearly a departure from
&gt;&gt; the normal way of doing things. So before pursuing this idea I wanted to
&gt;&gt; check whether it's safe, in the sense that the hidden service still
&gt;&gt; conceals its owner's identity from the client.
&gt;&gt;
&gt;&gt; Attacks against the availability of the service (such as uploading a
&gt;&gt; different descriptor) are pointless in this scenario because the client
&gt;&gt; is the only one who would connect to the service anyway. So I'm just
&gt;&gt; interested in attacks against anonymity.
&gt;&gt;
&gt;&gt; Can anyone shed any light on this question? Or is this way of using
&gt;&gt; hidden services too disgusting to even discuss? :-)
&gt;&gt;
&gt;&gt; Thanks,
&gt;&gt; Michael
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181001113742</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-01 11:37:42-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 28/09/2018 02:40, Nick Mathewson wrote:
&gt; On Thu, Sep 27, 2018 at 9:26 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hi all,
&gt;&gt;
&gt;&gt; The Briar team is working on a way for users to add each other as
&gt;&gt; contacts by exchanging links without having to meet in person.
&gt;&gt;
&gt;&gt; We don't want to include the address of the user's long-term Tor hidden
&gt;&gt; service in the link, as we assume the link may be observed by an
&gt;&gt; adversary, who would then be able to use the availability of the hidden
&gt;&gt; service to tell whether the user was online at any future time.
&gt;&gt;
&gt;&gt; We're considering two solutions to this issue. The first is to use a
&gt;&gt; temporary hidden service that's discarded after, say, 24 hours. The
&gt;&gt; address of the temporary hidden service is included in the link. This
&gt;&gt; limits the window during which the user's activity is exposed to an
&gt;&gt; adversary who observes the link, but it also requires the contact to use
&gt;&gt; the link before it expires.
&gt;&gt;
&gt;&gt; The second solution is to include an ECDH public key in the link,
&gt;&gt; exchange links with the contact, and derive a hidden service key pair
&gt;&gt; from the shared secret. The key pair is known to both the user and the
&gt;&gt; contact. One of them publishes the hidden service, the other connects to
&gt;&gt; it. They exchange long-term hidden service addresses via the temporary
&gt;&gt; hidden service, which is then discarded.
&gt; 
&gt; 
&gt; Here's a third idea to think about:  What if you use the same key
&gt; derivation trick we use in v3 onion services?
&gt; 
&gt; That is, every user could have a long term private key x and a public
&gt; key g^x.  If the user with key g^x wants to allow a user with g^y to
&gt; meet them with them, they derive s=h( g^xy) as the shared secret...
&gt; but instead of using s as a private key, they do the key derivation
&gt; trick, so that the single-use public key is derived as (g^x)*(g^s) =
&gt; g^(x+s), and the single use secret key is derived as (x + s).  This
&gt; way, each of them winds up with a private/public keypair for use with
&gt; the other; each user is the only one that knows their private key; and
&gt; the two of them are the only ones who can derive the public key.
&gt; 
&gt; You could do this in Tor's v3 onion-service design as-is: Just put
&gt; h(g^xy) as the the "optional secret s" input when deriving the daily
&gt; key.
&gt; 
&gt; For more info on this key derivation mechanism, see rend-spec-v3.txt,
&gt; appendix A.
&gt; 
&gt; (Warning: I am not a cryptographer; I haven't thought about this idea
&gt; very hard yet.)

Hi Nick,

This is a really interesting idea, thanks. I'm kicking myself because we
tried to come up with a way to derive a key pair such that the user gets
the private key and the contact gets the public key, and we couldn't
come up with anything - but it's already there as part of the HS design!

However, I'm much further away from being a cryptographer than you are,
and there are aspects of this that definitely go beyond my expertise.

The biggest one is that the user and her contact need to start with ECDH
key pairs (in order to derive a shared secret) and end up with an
Ed25519 key pair (in order to use it for a hidden service), whereas the
v3 key blinding scheme starts and ends with Ed21159 key pairs. I believe
there are ways to convert between X25519 and Ed25519 keys, but I don't
know what caveats would come with doing that, especially considering
that we want to reuse the DH keys for other exchanges.

I understand that the Tor devs are at a meeting this week, but hoping to
pick this up when you get back.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181015181104</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-10-15 18:11:04-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; Hi all,
&gt;
&gt; The Briar team is working on a way for users to add each other as
&gt; contacts by exchanging links without having to meet in person.
&gt;
&gt; We don't want to include the address of the user's long-term Tor hidden
&gt; service in the link, as we assume the link may be observed by an
&gt; adversary, who would then be able to use the availability of the hidden
&gt; service to tell whether the user was online at any future time.
&gt;
&gt; We're considering two solutions to this issue. The first is to use a
&gt; temporary hidden service that's discarded after, say, 24 hours. The
&gt; address of the temporary hidden service is included in the link. This
&gt; limits the window during which the user's activity is exposed to an
&gt; adversary who observes the link, but it also requires the contact to use
&gt; the link before it expires.
&gt;
&gt; The second solution is to include an ECDH public key in the link,
&gt; exchange links with the contact, and derive a hidden service key pair
&gt; from the shared secret. The key pair is known to both the user and the
&gt; contact. One of them publishes the hidden service, the other connects to
&gt; it. They exchange long-term hidden service addresses via the temporary
&gt; hidden service, which is then discarded.
&gt;
&gt; The advantage of the second solution is that the user's link is static -
&gt; it doesn't expire and can be shared with any number of contacts. A
&gt; different shared secret, and thus a different temporary hidden service,
&gt; is used for adding each contact.
&gt;
&gt; But using a hidden service in such a way that the client connecting to
&gt; the service knows the service's private key is clearly a departure from
&gt; the normal way of doing things. So before pursuing this idea I wanted to
&gt; check whether it's safe, in the sense that the hidden service still
&gt; conceals its owner's identity from the client.
&gt;

Hello Michael,

Nick's trick seems like a reasonable way to avoid the issue with both parties
knowing the private key.

I have a separate question wrt the threat model:

It seems to me that adversary in this game can observe the link, and all
these stunts are done just for the case where the adversary steals the
link (i.e. the temporary ECDH public keys).

In that case, given that both Alice and Bob are completely
unauthenticated and there is no root trust, how can you ensure that the
adversary Eve won't perform the ECDH herself, then connect to the
temporary onion service, and steal the long-term onion service link
(thereby destroying the secrecy of the long-term onion service for ever,
even if the attack is detected in the future through Alice and Bob
communicating in an out-of-band way).

Are we assuming that Alice and Bob have no common shared-secret in
place?  Because if they did, then you could use that from the start to
encrypt the long-term onion service identifier. If you don't, you could
potentially fall into attacks like the one above.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181017182732</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-17 18:27:32-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi George,

On 15/10/2018 19:11, George Kadianakis wrote:
&gt; Nick's trick seems like a reasonable way to avoid the issue with both parties
&gt; knowing the private key.

Thanks! Good to know. Any thoughts about how to handle the conversion
between ECDH and EdDSA keys?

If we decided not to use the key blinding trick, and just allowed both
parties to know the private key, do you see any attacks?

&gt; I have a separate question wrt the threat model:
&gt; 
&gt; It seems to me that adversary in this game can observe the link, and all
&gt; these stunts are done just for the case where the adversary steals the
&gt; link (i.e. the temporary ECDH public keys).
&gt; 
&gt; In that case, given that both Alice and Bob are completely
&gt; unauthenticated and there is no root trust, how can you ensure that the
&gt; adversary Eve won't perform the ECDH herself, then connect to the
&gt; temporary onion service, and steal the long-term onion service link
&gt; (thereby destroying the secrecy of the long-term onion service for ever,
&gt; even if the attack is detected in the future through Alice and Bob
&gt; communicating in an out-of-band way).
&gt; 
&gt; Are we assuming that Alice and Bob have no common shared-secret in
&gt; place?  Because if they did, then you could use that from the start to
&gt; encrypt the long-term onion service identifier. If you don't, you could
&gt; potentially fall into attacks like the one above.

Great question. We assume the channel over which the links are exchanged
is insecure, so an adversary who can read and modify the channel can
carry out a man-in-the-middle attack as you describe. However, we also
assume there are some adversaries that can read but not modify the
channel, and it's worth protecting against those adversaries even if we
can't protect against stronger ones that can also modify the channel.

A realistic example of a read-only adversary would be one that gets
retrospective access to chat logs.

As you pointed out, modification can potentially be detected later
(although we haven't designed the protocol for doing that yet). I guess
that may help to deter adversaries who don't want to reveal that they
can read and modify the channel.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181018122602</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-10-18 12:26:02-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; Hi George,
&gt;
&gt; On 15/10/2018 19:11, George Kadianakis wrote:
&gt;&gt; Nick's trick seems like a reasonable way to avoid the issue with both parties
&gt;&gt; knowing the private key.
&gt;
&gt; Thanks! Good to know. Any thoughts about how to handle the conversion
&gt; between ECDH and EdDSA keys?
&gt;

Hmm, that's a tricky topic! Using the same x25519 keypair for DH and
signing is something that should be done only under supervision by a
proper cryptographer(tm). I'm not a proper cryptographer so I'm
literally unable to evaluate whether doing it in your case would be
secure. If it's possible I would avoid it altogether...

I think one of the issues is that when you transform your x25519 DH key
to an ed25519 key and use it for signing, if the attacker is able to
choose what you sign, the resulting signature will basically provide a
DH oracle to the attacker, which can result in your privkey getting
completely pwned. We actually do this x25519&lt;-&gt;ed255519 conversion for
onionkeys cross-certificates (proposal228) but we had the design
carefully reviewed by people who know what's going on (unlike me).

In your case, the resulting ed25519 key would be used to sign the
temporary HS descriptor. The HS descriptor is of course not entirely
attacker-controlled data, but part of it *could be considered* attacker
controlled (e.g. the encrypted introduction points), and I really don't
know whether security can be impacted in this case. Also there might be
other attacks that I'm unaware of... Again, you need a proper
cryptographer for this.

A cheap way to avoid this, might be to include both an x25519 and an
ed25519 key in the "link" you send to the other person. You use the
x25519 key to do the DH and derive the shared secret, and then both
parties use the shared secret to blind the ed25519 key and derive the
blinded (aka hierarchically key derived) temporary onion service
address... Maybe that works for you but it will increase the link size
to double, which might impact UX.

And talking about UX, this is definitely a messy protocol UX-wise. One
person has to wait for the other person to start up a temporary HS. What
happens if the HS never comes up? Every when does the other person check
for the HS? How long does the first person keep the HS up? You can
probably hide all these details on the UI, but it still seems like a
messy situation.

I think the easiest approach here would be to just encrypt the permanent
onion address to the other person using a pre-shared-secret, but I guess
your protocol assumes that the two participants don't really know each other...

Good luck! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181019105158</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-19 10:51:58-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 18/10/2018 13:26, George Kadianakis wrote:
&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt; 
&gt;&gt; Hi George,
&gt;&gt;
&gt;&gt; On 15/10/2018 19:11, George Kadianakis wrote:
&gt;&gt;&gt; Nick's trick seems like a reasonable way to avoid the issue with both parties
&gt;&gt;&gt; knowing the private key.
&gt;&gt;
&gt;&gt; Thanks! Good to know. Any thoughts about how to handle the conversion
&gt;&gt; between ECDH and EdDSA keys?
&gt;&gt;
&gt; 
&gt; Hmm, that's a tricky topic! Using the same x25519 keypair for DH and
&gt; signing is something that should be done only under supervision by a
&gt; proper cryptographer(tm). I'm not a proper cryptographer so I'm
&gt; literally unable to evaluate whether doing it in your case would be
&gt; secure. If it's possible I would avoid it altogether...
&gt; 
&gt; I think one of the issues is that when you transform your x25519 DH key
&gt; to an ed25519 key and use it for signing, if the attacker is able to
&gt; choose what you sign, the resulting signature will basically provide a
&gt; DH oracle to the attacker, which can result in your privkey getting
&gt; completely pwned. We actually do this x25519&lt;-&gt;ed255519 conversion for
&gt; onionkeys cross-certificates (proposal228) but we had the design
&gt; carefully reviewed by people who know what's going on (unlike me).
&gt; 
&gt; In your case, the resulting ed25519 key would be used to sign the
&gt; temporary HS descriptor. The HS descriptor is of course not entirely
&gt; attacker-controlled data, but part of it *could be considered* attacker
&gt; controlled (e.g. the encrypted introduction points), and I really don't
&gt; know whether security can be impacted in this case. Also there might be
&gt; other attacks that I'm unaware of... Again, you need a proper
&gt; cryptographer for this.

Thanks, that confirms my reservations about converting between ECDH and
EdDSA keys, especially when we don't fully control what each key will be
used for. I think we'd better hold off on that approach unless/until the
crypto community comes up with idiot-proof instructions.

&gt; A cheap way to avoid this, might be to include both an x25519 and an
&gt; ed25519 key in the "link" you send to the other person. You use the
&gt; x25519 key to do the DH and derive the shared secret, and then both
&gt; parties use the shared secret to blind the ed25519 key and derive the
&gt; blinded (aka hierarchically key derived) temporary onion service
&gt; address... Maybe that works for you but it will increase the link size
&gt; to double, which might impact UX.

Nice! Link size aside, that sounds like it ought to work.

A given user's temporary hidden service addresses would all be related
to each other in the sense of being derived from the same root Ed25519
key pair. If I understand right, the security proof for the key blinding
scheme says the blinded keys are unlinkable from the point of view of
someone who doesn't know the root public key (and obviously that's a
property the original use of key blinding requires). I don't think the
proof says whether the keys are unlinkable from the point of view of
someone who does know the root public key, but doesn't know the blinding
factors (which would apply to the link-reading adversary in this case,
and also to each contact who received a link). It seem like common sense
that you can't use the root key (and one blinding factor, in the case of
a contact) to find or distinguish other blinded keys without knowing the
corresponding blinding factors. But what seems like common sense to me
doesn't count for much in crypto...

We'd also have to be careful about the number of blinded keys generated
from a given root key. The security proof uses T = 2^16 as an example
for the maximum number of epochs, giving a 16-bit security loss vs
normal Ed25519. In this scheme T would be the maximum number of contacts
rather than epochs. 2^16 is more than enough for the current context,
where contacts are added manually, but we'd have to bear in mind that it
wouldn't be safe to use this for automatic exchanges initiated by other
parties.

&gt; And talking about UX, this is definitely a messy protocol UX-wise. One
&gt; person has to wait for the other person to start up a temporary HS. What
&gt; happens if the HS never comes up? Every when does the other person check
&gt; for the HS? How long does the first person keep the HS up? You can
&gt; probably hide all these details on the UI, but it still seems like a
&gt; messy situation.

Messy? Yeah, welcome to P2P. ;-)

We're testing a prototype of the UX at the moment.

Bringing up the hidden service tends to take around 30 seconds, which is
a long time if you make the user sit there and watch a progress wheel,
but not too bad if you let them go away and do other things until a
notification tells them it's done.

Of course that's the happy path, where the contact's online and has
already opened the user's link. If the contact sent their link and then
went offline, the user has to wait for them to come back online. So we
keep a list of pending contact requests and show the status for each
one. After some time, perhaps 7 days, we stop trying to connect and mark
the contact request as failed.

(In my first email I mentioned an alternative approach, where we set up
a temporary hidden service in advance and just send its address in the
link, which expires after 24 hours. In that case we can shave 30 seconds
off the happy path, but we need to work out the UX for explaining that
links will expire and dealing with expired links. So there are pros and
cons to both approaches.)

&gt; I think the easiest approach here would be to just encrypt the permanent
&gt; onion address to the other person using a pre-shared-secret, but I guess
&gt; your protocol assumes that the two participants don't really know each other...

Sure, a pre-shared secret would solve all our problems, but the use case
here is adding contacts without meeting in person. We already have a
completely different, equally messy UX for users who can meet face to
face. ;-)

&gt; Good luck! :)

Thanks!

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181019130126</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-10-19 13:01:26-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; On 18/10/2018 13:26, George Kadianakis wrote:
&gt;&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt;&gt; 
&gt;&gt;&gt; Hi George,
&gt;&gt;&gt;
&gt;&gt;&gt; On 15/10/2018 19:11, George Kadianakis wrote:
&gt;&gt;&gt;&gt; Nick's trick seems like a reasonable way to avoid the issue with both parties
&gt;&gt;&gt;&gt; knowing the private key.
&gt;&gt;&gt;
&gt;&gt;&gt; Thanks! Good to know. Any thoughts about how to handle the conversion
&gt;&gt;&gt; between ECDH and EdDSA keys?
&gt;&gt;&gt;
&gt;&gt; 
&gt;&gt; Hmm, that's a tricky topic! Using the same x25519 keypair for DH and
&gt;&gt; signing is something that should be done only under supervision by a
&gt;&gt; proper cryptographer(tm). I'm not a proper cryptographer so I'm
&gt;&gt; literally unable to evaluate whether doing it in your case would be
&gt;&gt; secure. If it's possible I would avoid it altogether...
&gt;&gt; 
&gt;&gt; I think one of the issues is that when you transform your x25519 DH key
&gt;&gt; to an ed25519 key and use it for signing, if the attacker is able to
&gt;&gt; choose what you sign, the resulting signature will basically provide a
&gt;&gt; DH oracle to the attacker, which can result in your privkey getting
&gt;&gt; completely pwned. We actually do this x25519&lt;-&gt;ed255519 conversion for
&gt;&gt; onionkeys cross-certificates (proposal228) but we had the design
&gt;&gt; carefully reviewed by people who know what's going on (unlike me).
&gt;&gt; 
&gt;&gt; In your case, the resulting ed25519 key would be used to sign the
&gt;&gt; temporary HS descriptor. The HS descriptor is of course not entirely
&gt;&gt; attacker-controlled data, but part of it *could be considered* attacker
&gt;&gt; controlled (e.g. the encrypted introduction points), and I really don't
&gt;&gt; know whether security can be impacted in this case. Also there might be
&gt;&gt; other attacks that I'm unaware of... Again, you need a proper
&gt;&gt; cryptographer for this.
&gt;
&gt; Thanks, that confirms my reservations about converting between ECDH and
&gt; EdDSA keys, especially when we don't fully control what each key will be
&gt; used for. I think we'd better hold off on that approach unless/until the
&gt; crypto community comes up with idiot-proof instructions.
&gt;
&gt;&gt; A cheap way to avoid this, might be to include both an x25519 and an
&gt;&gt; ed25519 key in the "link" you send to the other person. You use the
&gt;&gt; x25519 key to do the DH and derive the shared secret, and then both
&gt;&gt; parties use the shared secret to blind the ed25519 key and derive the
&gt;&gt; blinded (aka hierarchically key derived) temporary onion service
&gt;&gt; address... Maybe that works for you but it will increase the link size
&gt;&gt; to double, which might impact UX.
&gt;
&gt; Nice! Link size aside, that sounds like it ought to work.
&gt;
&gt; A given user's temporary hidden service addresses would all be related
&gt; to each other in the sense of being derived from the same root Ed25519
&gt; key pair. If I understand right, the security proof for the key blinding
&gt; scheme says the blinded keys are unlinkable from the point of view of
&gt; someone who doesn't know the root public key (and obviously that's a
&gt; property the original use of key blinding requires). I don't think the
&gt; proof says whether the keys are unlinkable from the point of view of
&gt; someone who does know the root public key, but doesn't know the blinding
&gt; factors (which would apply to the link-reading adversary in this case,
&gt; and also to each contact who received a link). It seem like common sense
&gt; that you can't use the root key (and one blinding factor, in the case of
&gt; a contact) to find or distinguish other blinded keys without knowing the
&gt; corresponding blinding factors. But what seems like common sense to me
&gt; doesn't count for much in crypto...
&gt;

Hm, where did you get this about the security proof? The only security
proof I know of is https://www-users.cs.umn.edu/~hoppernj/basic-proof.pdf and I don't see
that assumption anywhere in there, but it's also been a long while since
I read it.

I think in general you are OK here. An informal argument: according to
rend-spec-v3.txt appendix A.2 the key derivation is as follows:

derived private key: a' = h a (mod l)
derived public key: A' = h A = (h a) B

In your case, the attacker does not know 'h' (the blinding factor),
whereas in the case of onion service the attacker does not know 'a' or
'a*B' (the private/public key). In both cases, the attacker is missing
knowledge of a secret scalar, so it does not seem to make a difference
which scalar the attacker does not know.

Of course, the above is super informal, and I'm not a cryptographer,
yada yada.

&gt; We'd also have to be careful about the number of blinded keys generated
&gt; from a given root key. The security proof uses T = 2^16 as an example
&gt; for the maximum number of epochs, giving a 16-bit security loss vs
&gt; normal Ed25519. In this scheme T would be the maximum number of contacts
&gt; rather than epochs. 2^16 is more than enough for the current context,
&gt; where contacts are added manually, but we'd have to bear in mind that it
&gt; wouldn't be safe to use this for automatic exchanges initiated by other
&gt; parties.
&gt;
&gt;&gt; And talking about UX, this is definitely a messy protocol UX-wise. One
&gt;&gt; person has to wait for the other person to start up a temporary HS. What
&gt;&gt; happens if the HS never comes up? Every when does the other person check
&gt;&gt; for the HS? How long does the first person keep the HS up? You can
&gt;&gt; probably hide all these details on the UI, but it still seems like a
&gt;&gt; messy situation.
&gt;
&gt; Messy? Yeah, welcome to P2P. ;-)
&gt;
&gt; We're testing a prototype of the UX at the moment.
&gt;
&gt; Bringing up the hidden service tends to take around 30 seconds, which is
&gt; a long time if you make the user sit there and watch a progress wheel,
&gt; but not too bad if you let them go away and do other things until a
&gt; notification tells them it's done.
&gt;
&gt; Of course that's the happy path, where the contact's online and has
&gt; already opened the user's link. If the contact sent their link and then
&gt; went offline, the user has to wait for them to come back online. So we
&gt; keep a list of pending contact requests and show the status for each
&gt; one. After some time, perhaps 7 days, we stop trying to connect and mark
&gt; the contact request as failed.
&gt;

Yeah, I don't think a progress wheel is what you want here. You probably
want a greyed out contact saying "Contact pending..." like in the case
of adding a contact in Ricochet.

&gt; (In my first email I mentioned an alternative approach, where we set up
&gt; a temporary hidden service in advance and just send its address in the
&gt; link, which expires after 24 hours. In that case we can shave 30 seconds
&gt; off the happy path, but we need to work out the UX for explaining that
&gt; links will expire and dealing with expired links. So there are pros and
&gt; cons to both approaches.)
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181019150512</emailId><senderName>Leif Ryge</senderName><senderEmail>leif@synthesize.us</senderEmail><timestampReceived>2018-10-19 15:05:12-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

On Wed, Oct 17, 2018 at 07:27:32PM +0100, Michael Rogers wrote:
[...] 
&gt; If we decided not to use the key blinding trick, and just allowed both
&gt; parties to know the private key, do you see any attacks?
[...]

If I'm understanding your proposal correctly, I believe it would leave
you vulnerable to a Key Compromise Impersonation (KCI) attack.

Imagine the scenario where Alice and Bob exchange the information to
establish their temporary rendezvous onion which they both know the
private key to, and they agree that Bob will be the client and Alice
will be the server.

But, before Bob connects to it, the adversary somehow obtains a copy of
everything Bob knows (but they don't have the ability to modify data or
software on his computer - they just got a copy of his secrets somehow).

Obviously the adversary could then impersonate Bob to Alice, because
they know everything that Bob knows. But, perhaps less obviously, in the
case that Bob is supposed to connect to Alice's temporary onion which
Bob (and now the adversary) know the key to, the adversary can also
now impersonate Alice to Bob (by overwriting Alice's descriptors and
taking over her temporary onion service).

In this scenario, if Bob hadn't known the private key for Alice's
temporary onion that he is connecting to, impersonating Alice to Bob
would not have been possible.

And of course, if the adversary can successfully impersonate both
parties to eachother at this phase, they can provide their own long-term
keys to each of them, and establish a long-term bidirectional mitm -
which, I think, would otherwise not be possible even in the event that
one party's long-term key was compromised.

Bob losing control of the key material before using it (without his
computer being otherwise compromised) admittedly seems like an unlikely
scenario, but you asked for "any attacks", so, I think KCI is one (if
I'm understanding your proposal correctly).

~leif
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181022105108</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-10-22 10:51:08-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 19/10/2018 14:01, George Kadianakis wrote:
&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt;&gt; A given user's temporary hidden service addresses would all be related
&gt;&gt; to each other in the sense of being derived from the same root Ed25519
&gt;&gt; key pair. If I understand right, the security proof for the key blinding
&gt;&gt; scheme says the blinded keys are unlinkable from the point of view of
&gt;&gt; someone who doesn't know the root public key (and obviously that's a
&gt;&gt; property the original use of key blinding requires). I don't think the
&gt;&gt; proof says whether the keys are unlinkable from the point of view of
&gt;&gt; someone who does know the root public key, but doesn't know the blinding
&gt;&gt; factors (which would apply to the link-reading adversary in this case,
&gt;&gt; and also to each contact who received a link). It seem like common sense
&gt;&gt; that you can't use the root key (and one blinding factor, in the case of
&gt;&gt; a contact) to find or distinguish other blinded keys without knowing the
&gt;&gt; corresponding blinding factors. But what seems like common sense to me
&gt;&gt; doesn't count for much in crypto...
&gt;&gt;
&gt; 
&gt; Hm, where did you get this about the security proof? The only security
&gt; proof I know of is https://www-users.cs.umn.edu/~hoppernj/basic-proof.pdf and I don't see
&gt; that assumption anywhere in there, but it's also been a long while since
&gt; I read it.

I may have misunderstood the paper, but I was talking about the
unlinkability property defined in section 4.1.

If I understand right, the proof says that descriptors created with a
given identity key are unlinkable to each other, in the sense that an
adversary who's allowed to query for descriptors created with the
identity key can't tell whether one of the descriptors has been replaced
with one created with a different identity key.

It seems to follow that the blinded keys used to sign the descriptors*
are unlinkable, in the sense that an adversary who's allowed to query
for blinded keys derived from the identity key can't tell whether one of
the blinded keys has been replaced with one derived from a different
identity key - otherwise the adversary could use that ability to
distinguish the corresponding descriptors.

What I was trying to say before is that although I don't understand the
proof in section 5.1 of the paper, I *think* it's based on an adversary
who only sees the descriptors and doesn't also know the identity public
key. This is totally reasonable for the original setting, where we're
not aiming to provide unlinkability from the perspective of someone who
knows the identity public key. But it becomes problematic in this new
setting we're discussing, where the adversary is assumed to know the
identity public key and we still want the blinded keys to be unlinkable.

* OK, strictly speaking the blinded keys aren't used to sign the
descriptors directly, they're used to certify descriptor-signing keys -
but the paper argues that the distinction doesn't affect the proof.

&gt; I think in general you are OK here. An informal argument: according to
&gt; rend-spec-v3.txt appendix A.2 the key derivation is as follows:
&gt; 
&gt; derived private key: a' = h a (mod l)
&gt; derived public key: A' = h A = (h a) B
&gt; 
&gt; In your case, the attacker does not know 'h' (the blinding factor),
&gt; whereas in the case of onion service the attacker does not know 'a' or
&gt; 'a*B' (the private/public key). In both cases, the attacker is missing
&gt; knowledge of a secret scalar, so it does not seem to make a difference
&gt; which scalar the attacker does not know.
&gt; 
&gt; Of course, the above is super informal, and I'm not a cryptographer,
&gt; yada yada.

I agree it seems like it should be safe. My point is really just that we
seem to have gone beyond what's covered by the proof, which tends to
make me think I should prefer a solution that I understand a bit better.

(At the risk of wasting your time though, I just want to suggest an
interesting parallel. Imagine we're just dealing with a single ordinary
key pair, no blinding involved. The public key X = xB, where x is the
private key and B is the base point. Now obviously we rely on this property:

1. Nobody can find x given X and B

But we don't usually require that:

2. Nobody can tell whether public keys X and Y share the same base point
without knowing x, y, or the base point
3. Nobody can tell whether X has base point B without knowing x

We don't usually care about these properties because the base point is
public knowledge. But in the key blinding setting, the base point is
replaced with the identity public key. As far as I can see, the proof in
the paper covers property 2 but not property 3. I'm certainly not saying
that I know whether property 3 is true - I just want to point out that
it seems to be distinct from properties 1 and 2.)

&gt;&gt; We're testing a prototype of the UX at the moment.
&gt;&gt;
&gt;&gt; Bringing up the hidden service tends to take around 30 seconds, which is
&gt;&gt; a long time if you make the user sit there and watch a progress wheel,
&gt;&gt; but not too bad if you let them go away and do other things until a
&gt;&gt; notification tells them it's done.
&gt;&gt;
&gt;&gt; Of course that's the happy path, where the contact's online and has
&gt;&gt; already opened the user's link. If the contact sent their link and then
&gt;&gt; went offline, the user has to wait for them to come back online. So we
&gt;&gt; keep a list of pending contact requests and show the status for each
&gt;&gt; one. After some time, perhaps 7 days, we stop trying to connect and mark
&gt;&gt; the contact request as failed.
&gt;&gt;
&gt; 
&gt; Yeah, I don't think a progress wheel is what you want here. You probably
&gt; want a greyed out contact saying "Contact pending..." like in the case
&gt; of adding a contact in Ricochet.

Right, what we have at the moment is essentially that, but the pending
contacts are in a separate list. Moving them into the main contact list
might be clearer though - thanks for the idea.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181014143314</emailId><senderName>Carolin =?ISO-8859-1?Q?Z=F6belein?=</senderName><senderEmail>contact@carolin-zoebelein.de</senderEmail><timestampReceived>2018-10-14 14:33:14-0400</timestampReceived><subject>Re: [tor-dev] Information on Pluggable Transports</subject><body>

Hi,

here you can find the PT and their specifications:

In general, you can find the source code and specifications here:
https://gitweb.torproject.org/

For obfs2, obfs3 and scramblesuit
https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/
https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc

For obfs4
https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/
https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt

For meek
https://gitweb.torproject.org/pluggable-transports/meek.git/tree/
https://gitweb.torproject.org/pluggable-transports/meek.git/tree/doc

Also a nice site with explanation is here:
https://trac.torproject.org/projects/tor/wiki/doc/AChildsGardenOfPluggableTransports

Best regards,
Carolin


Am Sonntag, den 14.10.2018, 19:36 +0530 schrieb Pritam Kadasi:
&gt; Hi all,
&gt; 
&gt; i'am currectly working on a project on tor. can you help me to get
&gt; enough resources for Pluggable Transports.
&gt; 
&gt; i would like to know more on how obfuscation happens in detail.
&gt; 
&gt; thanking you.
&gt; 
&gt; Pritam
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
-- 
-----------------------------------------------------------------------
Carolin Zöbelein / Nick: Samdney
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
-----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181015165901</emailId><senderName>"Dr. Brandon Wiley"</senderName><senderEmail>brandon@blanu.net</senderEmail><timestampReceived>2018-10-15 16:59:01-0400</timestampReceived><subject>Re: [tor-dev] Information on Pluggable Transports</subject><body>

[Attachment #2 (multipart/alternative)]


If you are looking for information about Pluggable Transports, the
Pluggable Transports website has up-to-date information:
https://www.pluggabletransports.info/

If you want to follow the specification process, drafts and proposal are
available here:
https://github.com/Pluggable-Transports/Pluggable-Transports-spec

The current stable version of the specification is PT 2.0:
https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/mast=
er/releases/pt-2_0.pdf
The current draft of the next version being working on is PT 2.1 draft 1:
https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/mast=
er/releases/PTSpecV2.1Draft1
Tor currently implements the PT 1.0 specification:
https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/mast=
er/releases/pt-1_0.txt

On Sun, Oct 14, 2018 at 9:33 AM Carolin Z=C3=B6belein &lt;
contact@carolin-zoebelein.de&gt; wrote:

&gt; Hi,
&gt;
&gt; here you can find the PT and their specifications:
&gt;
&gt; In general, you can find the source code and specifications here:
&gt; https://gitweb.torproject.org/
&gt;
&gt; For obfs2, obfs3 and scramblesuit
&gt; https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/
&gt; https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc
&gt;
&gt; For obfs4
&gt; https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/
&gt;
&gt; https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obf=
s4-spec.txt
&gt;
&gt; For meek
&gt; https://gitweb.torproject.org/pluggable-transports/meek.git/tree/
&gt; https://gitweb.torproject.org/pluggable-transports/meek.git/tree/doc
&gt;
&gt; Also a nice site with explanation is here:
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/doc/AChildsGardenOfPluggabl=
eTransports
&gt;
&gt; Best regards,
&gt; Carolin
&gt;
&gt;
&gt; Am Sonntag, den 14.10.2018, 19:36 +0530 schrieb Pritam Kadasi:
&gt; &gt; Hi all,
&gt; &gt;
&gt; &gt; i'am currectly working on a project on tor. can you help me to get
&gt; &gt; enough resources for Pluggable Transports.
&gt; &gt;
&gt; &gt; i would like to know more on how obfuscation happens in detail.
&gt; &gt;
&gt; &gt; thanking you.
&gt; &gt;
&gt; &gt; Pritam
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; --
&gt; -----------------------------------------------------------------------
&gt; Carolin Z=C3=B6belein / Nick: Samdney
&gt; PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B
&gt; -----------------------------------------------------------------------
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;If you are looking for information about Pluggable Transports, the \
Pluggable Transports website has up-to-date information: &lt;a \
href="https://www.pluggabletransports.info/"&gt;https://www.pluggabletransports.info/&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you want to follow the specification process, drafts and \
proposal are available here: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec"&gt;https://githu \
b.com/Pluggable-Transports/Pluggable-Transports-spec&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
current stable version of the specification is PT 2.0: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/re \
leases/pt-2_0.pdf"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf&lt;/a&gt;&lt;/div&gt;&lt;div&gt;The \
current draft of the next version being working on is PT 2.1 draft 1: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/re \
leases/PTSpecV2.1Draft1"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/releases/PTSpecV2.1Draft1&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Tor \
currently implements the PT 1.0 specification: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/re \
leases/pt-1_0.txt"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-1_0.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Sun, Oct 14, 2018 at 9:33 AM Carolin Zöbelein \
&lt;&lt;a href="mailto:contact@carolin-zoebelein.de"&gt;contact@carolin-zoebelein.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
here you can find the PT and their specifications:&lt;br&gt;
&lt;br&gt;
In general, you can find the source code and specifications here:&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/" rel="noreferrer" \
target="_blank"&gt;https://gitweb.torproject.org/&lt;/a&gt;&lt;br&gt; &lt;br&gt;
For obfs2, obfs3 and scramblesuit&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/obfsproxy.git/tree/doc&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
For obfs4&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/obfs4.git/tree/doc/obfs4-spec.txt&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
For meek&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/pluggable-transports/meek.git/tree/" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/meek.git/tree/&lt;/a&gt;&lt;br&gt;
 &lt;a href="https://gitweb.torproject.org/pluggable-transports/meek.git/tree/doc" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/pluggable-transports/meek.git/tree/doc&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Also a nice site with explanation is here:&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/AChildsGardenOfPluggableTransports" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/doc/AChildsGardenOfPluggableTransports&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Best regards,&lt;br&gt;
Carolin&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Am Sonntag, den 14.10.2018, 19:36 +0530 schrieb Pritam Kadasi:&lt;br&gt;
&gt; Hi all,&lt;br&gt;
&gt; &lt;br&gt;
&gt; i'am currectly working on a project on tor. can you help me to get&lt;br&gt;
&gt; enough resources for Pluggable Transports.&lt;br&gt;
&gt; &lt;br&gt;
&gt; i would like to know more on how obfuscation happens in detail.&lt;br&gt;
&gt; &lt;br&gt;
&gt; thanking you.&lt;br&gt;
&gt; &lt;br&gt;
&gt; Pritam&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
                target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
                
-- &lt;br&gt;
-----------------------------------------------------------------------&lt;br&gt;
Carolin Zöbelein / Nick: Samdney&lt;br&gt;
PGP: D4A7 35E8 D47F 801F 2CF6 2BA7 927A FD3C DE47 E13B&lt;br&gt;
-----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181015215151</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-10-15 21:51:51-0400</timestampReceived><subject>Re: [tor-dev] Information on Pluggable Transports</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Brandon,

&gt; On 16 Oct 2018, at 02:59, Dr. Brandon Wiley &lt;brandon@blanu.net&gt; wrote:
&gt; 
&gt; If you are looking for information about Pluggable Transports, the Pluggable \
&gt; Transports website has up-to-date information: \
&gt; https://www.pluggabletransports.info/ 
&gt; If you want to follow the specification process, drafts and proposal are available \
&gt; here: https://github.com/Pluggable-Transports/Pluggable-Transports-spec 
&gt; The current stable version of the specification is PT 2.0: \
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf
&gt;  The current draft of the next version being working on is PT 2.1 draft 1: \
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/releases/PTSpecV2.1Draft1
&gt; 

Is there any code that implements version 2.0 or 2.1 of these specs?

&gt; Tor currently implements the PT 1.0 specification: \
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-1_0.txt
&gt; 

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;div&gt;Hi \
Brandon,&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 16 Oct 2018, at 02:59, Dr. Brandon Wiley \
&lt;&lt;a href="mailto:brandon@blanu.net"&gt;brandon@blanu.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;If you are looking for \
information about Pluggable Transports, the Pluggable Transports website has \
up-to-date information: &lt;a \
href="https://www.pluggabletransports.info/"&gt;https://www.pluggabletransports.info/&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you want to follow the specification process, drafts and \
proposal are available here: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec"&gt;https://githu \
b.com/Pluggable-Transports/Pluggable-Transports-spec&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
current stable version of the specification is PT 2.0: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/re \
leases/pt-2_0.pdf"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports-spec/blob/master/releases/pt-2_0.pdf&lt;/a&gt;&lt;/div&gt;&lt;div&gt;The \
current draft of the next version being working on is PT 2.1 draft 1: &lt;a \
href="https://github.com/Pluggable-Transports/Pluggable-Transports-spec/tree/master/re \
leases/PTSpecV2.1Draft1"&gt;https://github.com/Pluggable-Transports/Pluggable-Transports- \
spec/tree/master/releases/PTSpecV2.1Draft1&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is \
there any code that implements version 2.0 or 2.1 of these \
specs?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Tor currently implements the PT 1.0 \
specification: &lt;a href="https://github.com/Pluggable-Transports/Pluggable-Transports-s \
pec/blob/master/releases/pt-1_0.txt"&gt;https://github.com/Pluggable-Transports/Pluggable \
-Transports-spec/blob/master/releases/pt-1_0.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;T&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181013162149</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-10-13 16:21:49-0400</timestampReceived><subject>Re: [tor-dev] Idea which may or may not of been discussed</subject><body>



On 10/13/2018 12:07 AM, Nathaniel Suchy wrote:
&gt; Currently tor traffic uses an TLS handshake hostname like the following:
&gt; 
&gt; $ sudo tcpdump -An "tcp" | grep "www"
&gt; listening on pktap, link-type PKTAP (Apple DLT_PKTAP), capture size 262144 bytes
&gt; .............". ...www.odezz26nvv7jeqz1xghzs.com.........
&gt; .............#.!...www.bxbko3qi7vacgwyk4ggulh.com.........
&gt; .6....m.....&gt;...:.........|../*
&gt; Z....W....X=..6...C../....................................0...0..0.......'....F./0..
&gt;                 
&gt; *.H........0%1#0!..U....www.b6zazzahl3h3faf4x2.com0...160402000000Z..170317000000Z0'1%0#..U....www.tm3ddrghe22wgqna5u8g.net0..0..
&gt;  
&gt; A network observer could run a DNS lookup on the hostnames and see if
&gt; they are real or not. So my idea would be to register a set of random
&gt; hostnames which are legitimate and point the IPs somewhere to avoid
&gt; looking for an NX Domain response and dropping the stream. You could
&gt; even give each relay a unique subdomain and rotate these every few
&gt; weeks. This may be expensive to implement but could make blocking Tor
&gt; traffic with this method harder. Thoughts?
&gt; 

Why wouldn't it be just as easy for censors to identify the small set of
registered domains that Tor relays use and block TLS connections that
involve them?

I don't see how changing the domain a relay uses from aaaaaa.foo.com to
bbbbbb.foo.com helps. The censor would just notice 'foo.com' and block it.

In fact, I think this would make censorship easier.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181008082350</emailId><senderName>Peter Palfrader</senderName><senderEmail>weasel@torproject.org</senderEmail><timestampReceived>2018-10-08 08:23:50-0400</timestampReceived><subject>Re: [tor-dev] deb.tpo 0.3.5 repos intentionally empty?</subject><body>

On Sun, 07 Oct 2018, nusenu wrote:

&gt; Hi, 
&gt; 
&gt; the tor 0.3.5.x repos (example [1]) exist since some time
&gt; but are empty since then, is that intentional?

All existing 0.3.5.x releases fail to build from source (#27781).


-- 
                            |  .''`.       ** Debian **
      Peter Palfrader       | : :' :      The  universal
 https://www.palfrader.org/ | `. `'      Operating System
                            |   `-    https://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181026132416</emailId><senderName>sarpedon montecarlo</senderName><senderEmail>sarpedon000@gmail.com</senderEmail><timestampReceived>2018-10-26 13:24:16-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Hi!
I am supposed to implement, a python application that runs tor in
background.
The running tor is under direct control of the python app via control port.
This running tor, is the proxy for the Tor Browser; By this I mean, when
the Tor Browser starts, it will connect to this process, instead of the
bundled tor provided by itself.
The controlling features I am into, are as below:
A) I want to attach streams coming from each tabs of the Tor Browser,
attached to a separate circuit; By this I mean each tab of the browser, use
a separate circuit, and do not share circuits with each other.(just like
the way ordinary TBB does that)
for this I am aware that Tor Button plugin does something with the streams
to separate streams of a specific tab from other streams.
Then by using IsolateSocksStream option on the tor side, tor will
successfully isolate each tabs streams.
My problem here, is that I am handling the routing and stream attaching all
by myself and I can not use the provided IsolateSocksStream option because
I am handling the circuit generation by myself because of the specific
policies I am using for generating circuits, and their related paths.
So if I am facing a bunch of streams, and I have a bunch of circuits
myself, How am I going to detect that Stream A is from tab A of TBB and
Stream B is from tab B of TBB, so I attach stream A to circuit A, and
attach stream B to circuit B.
Thanks in advance.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi!&lt;div&gt;I am supposed to implement, a python application that runs tor \
in background.&lt;/div&gt;&lt;div&gt;The running tor is under direct control of the python app \
via control port.&lt;/div&gt;&lt;div&gt;This running tor, is the proxy for the Tor Browser; By \
this I mean, when the Tor Browser starts, it will connect to this process, instead of \
the bundled tor provided by itself.&lt;/div&gt;&lt;div&gt;The controlling features I am into, are \
as below:&lt;/div&gt;&lt;div&gt;A) I want to attach streams coming from each tabs of the Tor \
Browser, attached to a separate circuit; By this I mean each tab of the browser, use \
a separate circuit, and do not share circuits with each other.(just like the way \
ordinary TBB does that)&lt;/div&gt;&lt;div&gt;for this I am aware that Tor Button plugin does \
something with the streams to separate streams of a specific tab from other \
streams.&lt;/div&gt;&lt;div&gt;Then by using IsolateSocksStream option on the tor side, tor will \
successfully isolate each tabs streams.&lt;/div&gt;&lt;div&gt;My problem here, is that I am \
handling the routing and stream attaching all by myself and I can not use the \
provided IsolateSocksStream option because I am handling the circuit generation by \
myself because of the specific policies I am using for generating circuits, and their \
related paths.&lt;/div&gt;&lt;div&gt;So if I am facing a bunch of streams, and I have a bunch of \
circuits myself, How am I going to detect that Stream A is from tab A of TBB and \
Stream B is from tab B of TBB, so I attach stream A to circuit A, and attach stream B \
to circuit B.&lt;/div&gt;&lt;div&gt;Thanks in advance.&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181026230907</emailId><senderName>Traumschule</senderName><senderEmail>traumschuleriebau@riseup.net</senderEmail><timestampReceived>2018-10-26 23:09:07-0400</timestampReceived><subject>Re: [tor-dev] Stream Isolation</subject><body>

Hi,

without checking the list archive,

On Fri, 26 Oct 2018 16:42:16 +0330
sarpedon montecarlo &lt;sarpedon000@gmail.com&gt; wrote:

&gt; My problem here, is that I am handling the routing and stream
&gt; attaching all by myself and I can not use the provided
&gt; IsolateSocksStream option because I am handling the circuit
&gt; generation by myself because of the specific policies I am using for
&gt; generating circuits, and their related paths. So if I am facing a
&gt; bunch of streams, and I have a bunch of circuits myself, How am I
&gt; going to detect that Stream A is from tab A of TBB and Stream B is
&gt; from tab B of TBB, so I attach stream A to circuit A, and attach
&gt; stream B to circuit B. Thanks in advance.

It sounds like you looked at the code already, so excuse me if this
doesn't help too much. You could use authentication like here:
http://jqs44zhtxl2uo6gk.onion/torbutton.git/tree/src/components/domain-isolator.js#n128
 https://gitweb.torproject.org/torbutton.git/tree/src/components/domain-isolator.js#n128


Stem is another option to control circuits using circuit IDs:
http://vt5hknv6sblkgf22.onion/api/control.html#stem.control.Controller.new_circuit
https://stem.torproject.org/api/control.html#stem.control.Controller.new_circuit

Tails implements stream isolation by using a different SocksPort per
application (the document is slightly outdated, #3455 is fixed already):
https://tails.boum.org/contribute/design/stream_isolation/

More developer info can be found here:
https://kkkkkkkkkk63ava6.onion.si/wiki/Stream_Isolation#Information
https://tor.stackexchange.com/questions/10559/whats-the-best-way-to-isolate-applications-as-they-enter-the-tor-network


Hope that helps!

-- 
traumschule.org

gpg fingerprint:
9356 4DED 8546 8D9A C290  3605 12EE 7D70 7111 2056

/otr info
OTR: traumschule@irc.indymedia.org fingerprint:
OTR: 35AACA83 4564616C B6EBEC66 56B6B2FC C8D572F1
OTR: traumschule@irc.oftc.net fingerprint:
OTR: D1CCD207 B60C1866 56A975AE ACE090E9 45E90846
OTR: traumschule@chat.freenode.net fingerprint:
OTR: 51BF8BB9 434840CC 24F264BC 76450C27 A6AADB12
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029153522</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-10-29 15:35:22-0400</timestampReceived><subject>Re: [tor-dev] Add EVENT message to pt-spec.txt and control-spec.txt</subject><body>

[Attachment #2 (multipart/signed)]


On 26 Oct (13:31:27), Dr. Brandon Wiley wrote:
&gt; Well I think this is a great feature and it's something which people have
&gt; been requesting for a while now, and which I know was discussed at the PT
&gt; meeting at the last TorDev. I think this is the sort of feature that just
&gt; makes transports better for everyone, both transport designers and
&gt; applications that use transports. Several different options for this sort
&gt; of signalling have been discussed in the past at the Pluggable Transport
&gt; Implementers Meetings and it's nice to see a concrete proposal.
&gt; 
&gt; We have spent several years building a Pluggable Transport community which
&gt; includes a diverse group of tool developers that all use Pluggable
&gt; Transports. Tor is a key member of this group and has participated in all
&gt; of our meetings and the development of our community process for revision
&gt; of the Pluggable Transport specification. By following the community
&gt; process for proposing changes to the PT specification, all stakeholders get
&gt; a chance to provide feedback on the proposal and we an ensure ease of use
&gt; for developers in terms of clarity on backwards compatibility and semantic
&gt; versioning.
&gt; 
&gt; I would love to see this proposal submitted through the community
&gt; specification process for inclusion in the next release of the
&gt; specification. Simply add a proposal to the proposals/ directory of the
&gt; specification repository (
&gt; https://github.com/Pluggable-Transports/Pluggable-Transports-spec) and
&gt; issue a pull request. We will then add it to the schedule for review,
&gt; discussion, and eventual inclusion in a specification release.

https://github.com/Pluggable-Transports/Pluggable-Transports-spec/pull/3

Hope I did this correctly. You sure you don't want to switch to .txt file in
the proposal/. Seems PDF are hard to review on Github? ...

Cheers!
David

&gt; 
&gt; Great work, and I look forward to working with you to get this useful
&gt; functionality for all transports and transport-enabled applications!
&gt; 
&gt; 
&gt; On Fri, Oct 26, 2018 at 9:57 AM David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; &gt; Greetings tor-dev!
&gt; &gt; 
&gt; &gt; We've been working on improving PT reporting towards Tor so for instance
&gt; &gt; Tor
&gt; &gt; Browser can better inform the user or take actions based on the PT state
&gt; &gt; when
&gt; &gt; connecting to the network.
&gt; &gt; 
&gt; &gt; The following ticket summarize it:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/28180
&gt; &gt; 
&gt; &gt; To achieve this, we are submitting these to torspec.git patches to extend
&gt; &gt; both
&gt; &gt; the pt-spec.txt and control-spec.txt to support such mechanism. This is the
&gt; &gt; first draft.
&gt; &gt; 
&gt; &gt; Below is the link to the PT spec patch. It adds the EVENT message that for
&gt; &gt; now
&gt; &gt; is only used, as you will see, for reporting connection status message.
&gt; &gt; However, you should see this EVENT message as extendable to whatever the PT
&gt; &gt; would like to report to Tor that we can think of in the future:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28181_01&amp;id=0814114fb39f9f7ddf16de35f97092ed74ffd1ee
&gt; &gt;  
&gt; &gt; The second, is simpler, it is how Tor will send it back to the control
&gt; &gt; port:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket28182_01&amp;id=b57d272f570847cdcf073b5fdf5b523d3f57d889
&gt; &gt;  
&gt; &gt; Please, any questions or feedbacks is very welcome! The main idea here is
&gt; &gt; to
&gt; &gt; keep things simple and extendable.
&gt; &gt; 
&gt; &gt; Note that since Tor doesn't implement the PT 2.0 spec yet, we haven't done
&gt; &gt; anything for that spec but after skimming the version 2, I think we can
&gt; &gt; easily
&gt; &gt; move this EVENT message concept if we want it.
&gt; &gt; 
&gt; &gt; Cheers!
&gt; &gt; David
&gt; &gt; 
&gt; &gt; --
&gt; &gt; t2Mtu4qBote14xSTFee/xnHlXp1eabwHFbehBlktnus=
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
SHL0/USNzRrWTeGVvAVD4EyegSyFXMZ+kwG64G9rEbg=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029173824</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2018-10-29 17:38:24-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

And here's a link that actually works:
https://storm.torproject.org/shared/Kw99Ow0ExZFFC6FKD5CeryfVFAoAL9Z_iEVlflI0fiL

On 10/26/18 1:34 PM, Richard Pospesel wrote:
&gt; Hey y'all,
&gt; 
&gt; For the past little while I've been working on a technical overview doc for #3600 \
&gt; (Prevent redirects from transmitting+storing cookies+identifiers) detailing the \
&gt; problems, scenarios and possible solutions.  Please take a look and feel free to \
&gt; comment, edit or add! 
&gt; Link: https://storm.torproject.org/grain/X4nhdNqR9fGRc7sgTefFkg/
&gt; 
&gt; best,
&gt; -Richard
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20181029233618</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-10-29 23:36:18-0400</timestampReceived><subject>Re: [tor-dev] obfs4, meek, active probing and the timeline of pluggable transports</subject><body>

On Sat, Oct 27, 2018 at 05:20:06PM +0530, Piyush Kumar Sharma wrote:
&gt; 3.) I searched a lot but could not find the timeline in which pluggable
&gt; transports were built. As in what was developed and deployed first, obfs4 or
&gt; meek?

For questions like this, see our metrics timeline page:
https://trac.torproject.org/projects/tor/wiki/doc/MetricsTimeline

The three transports meek, ScrambleSuit, and obfs4  were deployed in Tor
Browser roughly at the same time. ScrambleSuit was a predecessor of
obfs4 that also deals with active probing. meek and ScrambleSuit were
first in 4.0-alpha-1 (Aug 2014) and 4.0 (Oct 2014). obfs4 was first in
4.5-alpha1 (Nov 2014) and 4.5 (Apr 2015).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181030161304</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-10-30 16:13:04-0400</timestampReceived><subject>[tor-dev] Updates and review on "Proposal 254: Padding Negotiation"</subject><body>

Hey Mike,

I took another look at prop#254 and made some changes of my own in my
torspec branch circuitpadding-proposal-updates (see commit ab37543). Let
me know if they look right to you. Some of those I had to look into the
code to understand, and I hope I got them right.

Furthermore, I opened a pull request with a few questions and comments
for further improvements and clarifications:
       https://github.com/torproject/torspec/pull/39

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20181031144933</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-10-31 14:49:33-0400</timestampReceived><subject>[tor-dev] Proposal 298: Putting family lines in canonical form</subject><body>

Filename: 298-canonical-families.txt
Title: Putting family lines in canonical form
Author: Nick Mathewson
Created: 31-Oct-2018
Status: Open
Target: 0.3.6.x

1. Introduction

   With ticket #27359, we begin encoding microdescriptor families in
   memory in a reference-counted form, so that if 10 relays all list the
   same family, their family only needs to be stored once.  For large
   families, this has the potential to save a lot of RAM -- but only if
   the families are the same across those relays.

   Right now, family lines are often encoded in different ways, and
   placed into consensuses and microdescriptor lines in whatever format
   the relay reported.

   This proposal describes an algorithm that authorities should use
   while voting to place families into a canonical format.

   This algorithm is forward-compatible, so that new family line formats
   can be supported in the future.

2. The canonicalizing algorithm

   To make a the family listed in a router descriptor canonical:

      For all entries of the form $hexid=name or $hexid~name, remove
      the =name or ~name portion.

      Remove all entries of the form $hexid, where hexid is not 40
      hexadecimal characters long.

      If an entry is a valid nickname, put it into lower case.

      If an entry is a valid $hexid, put it into upper case.

      If there are any entries, add a single $hexid entry for the relay
      in question, so that it is a member of its own family.

      Sort all entries in lexical order.

      Remove duplicate entries.

   Note that if an entry is not of the form "nickname", "$hexid",
   "$hexid=nickname" or "$hexid~nickname", then it will be unchanged:
   this is what makes the algorithm forward-compatible.

3. When to apply this algorithm

   We allocate a new consensus method number.  When building a consensus
   using this method or later, before encoding a family entry into a
   microdescriptor, the authorities should apply the algorithm above.

   Relay MAY apply this algorithm to their own families before
   publishing them.  Unlike authorities, relays SHOULD warn about
   unrecognized family items.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180904083306</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-09-04 08:33:06-0400</timestampReceived><subject>[tor-dev] Network Team Meeting: Tuesday 1700 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

It's a public holiday in the US on Monday.

So we moved the network team meeting from Monday to Tuesday 1700 UTC
for this week.

Sorry for the late notice!

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAluOQ0IACgkQEP6qDnB1
ZypDOQ/+IS6QM9C3o9lapcmIG+yFuiYI3admWoOUcCIt/cydDD+MvDxaty4yDkQN
N6+8HJ0QzuGVUF1R2LsAdQOGhDdz9KWfuRBe67T63qkhfz1OjwMY5eLVVrhZu3B9
YhoEgJhStoXSVq6UNhIdEtsfq19ZUq0O6wpT5WDozifY40nATF7D9Rj5STBmVsr3
qYCW4/4tOdPuE5uTS6b7mnH3VfO4Nl7UusoB4UQLLRR2jIZIkOO1SqSj306abu/2
5eyd1ZktQnFAuOunBXpJZzTok1AQbbGBpu9MbhbPm76mKwBXpwdUyH1EkQr4oAtT
cHJMTjJvblUvjXveFmCfJkijMpB2Mh+Ve+qt1ALiKw3DonuOSgO2q8+vavWbs4DR
3E3h6hpBkmkcrgtkiBcguvV9+5AfezWYlTbtUjZgGKOLKFssO3+E9HpuHZbT8WUE
TIcdbeuMfWkQzoPd6ZCKasa9BFh+c0XIX1q/ldUHidS0E6d6V451Y/uRaDxUidPs
Rjl432OgLZdxRZFab0rFyT3Tp3y7FkCL18lZa3aqkOnUy9O+MEEyI2rulScnO5+p
5zcatM4DogISfiP8CuCzuS/tCqNIWTds3D33APE2Ca9z1aPMdOItWI6GIlzg2wvg
p72AMbfrCj8kfUGo+qgyM8gPvw8KPadwG3RQI4KmzRmBeAEiBZg=
=V7my
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180904144514</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-09-04 14:45:14-0400</timestampReceived><subject>[tor-dev] Fwd: Manuals</subject><body>

[Attachment #2 (multipart/alternative)]


FYI

The Marionette documentation.

Marionette Manuals for review

---------- Forwarded message ----------
From: John Helmsen &lt;john.helmsen@redjack.com&gt;
Date: Fri, Aug 31, 2018 at 9:34 AM
Subject: Manuals
To: "Ianculovici, Ciprian" &lt;IanculoviciC@state.gov&gt;




-- 
John Helmsen
john.helmsen@redjack.com
C: (301) 273-4372




-- 
John Helmsen
john.helmsen@redjack.com
C: (301) 273-4372

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;FYI&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Marionette \
documentation.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Marionette Manuals for review&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;---------- Forwarded message ----------&lt;br&gt;From: &lt;b \
class="gmail_sendername"&gt;John Helmsen&lt;/b&gt; &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:john.helmsen@redjack.com"&gt;john.helmsen@redjack.com&lt;/a&gt;&gt;&lt;/span&gt;&lt;br&gt;Date: \
Fri, Aug 31, 2018 at 9:34 AM&lt;br&gt;Subject: Manuals&lt;br&gt;To: "Ianculovici, \
Ciprian" &lt;&lt;a \
href="mailto:IanculoviciC@state.gov"&gt;IanculoviciC@state.gov&lt;/a&gt;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;div \
dir="ltr"&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="m_-8670067280710532645gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;John Helmsen&lt;div&gt;&lt;a \
href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (301) \
273-4372&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;
&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;John \
Helmsen&lt;div&gt;&lt;a href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (301) \
273-4372&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


["BrowserDemo.md" (text/markdown)]

BrowserDemo
===========

This is the browser demonstration page

## Browser Setup

Testing Marionette is best done through the Firefox browser.  If you do not have a \
copy of Firefox, download it [here](https://www.mozilla.org/en-US/firefox/new/).

### Activate the Proxy

Go to:

``Firefox &gt; Preferences &gt; General &gt; Network Proxy``

- Set the proxy button to Manual Proxy Configuration.
- Set the SOCKS host to the machine to the incoming port on the Marionette client \
                (Probably localhost and port 8079)
- Make sure that the SOCKS v5 Radio button is depressed.
- Check the box marked "Proxy DNS when using SOCKS v5"

### Secure the DNS

Although the code can work through the proxy with the above data, Firefox does not \
yet have its DNS fully going through the proxy.  To fix this:

- Type about:config into the search bar.  This will open the advanced settings for \
                the browser.
- Go to the term media.peerconnection.enabled 
- Set it to false by double clicking on it.

## Installation (Docker)

For this demo, please we will use the v0.1 Docker image. You'll need to have Docker
installed. You can find instructions for specific operating system here:
https://docs.docker.com/install

Once docker is installed, then download the appropriate docker file from the v0.1 \
release of Marionette.  The file can be found here:

https://github.com/redjack/marionette/releases/tag/v0.1

To install the docker file in docker:

```
$ gunzip redjack-marionette-0.1.gz
```
```
$ docker load -i redjack-marionette-0.1
```

### Running using the Docker image

Next, run the Docker image and use the appropriate port mappings for the
Marionette format you're using. `http_simple_blocking` uses
port `8081`:

```sh
$ docker run -p 8081:8081 redjack/marionette server -format http_simple_blocking
```

```sh
$ docker run -p 8079:8079 redjack/marionette client -bind 0.0.0.0:8079 -format \
http_simple_blocking ```

If you're running _Docker for Mac_ then you'll also need to add a `-server` argument:

```sh
$ docker run -p 8079:8079 redjack/marionette client -bind 0.0.0.0:8079 -server \
docker.for.mac.host.internal -format http_simple_blocking ```

Start wireshark on the loopback network and watch the packets.

(Note, if wireshark is not displaying the packets as HTTP, go to:

``WireShark &gt; Preferences &gt; Protocols &gt; HTTP``
 
 and add port 8081 to the port list.

### Surf

Look at your favorite webpage(s).  The system is fairly reliable now, but in the \
event that the connection drops, then:

- Stop the server and the client
- Restart the server and the client (in order)
- Refresh the page
- Report the error


["README.md" (text/markdown)]

marionette
==========

This is a Go port of the [marionette][] programmable networy proxy.

## WebBrowser Demonstration

Please install Marionette as described below, and then go to the web browser
demonstration page [here](./BrowserDemo.md)


## Development

### Installing on CentOS

Ensure you have a C/C++ compiler installed:

```sh
$ yum group install -y "Development Tools"
```

also make sure that you have the proper version of shasum installed by running:

```sh
$ yum install -y perl-Digest-SHA
```
### Installing Third Party Libraries

Marionette requires several dependencies to be installed first. Two of them
are in the `third_party` directory and the third one can be downloaded from
the web.

You can use the `./build_third_party.sh` script in the root of this repository
to build the third party libraries:

* OpenFST
* re2
* GMP

or follow the instructions below to manually
build them or install them system wide.

### Installing OpenFST

You must use the included `third_party/openfst` implementation. Also note that
static builds must be enabled via the `--enable-static` flag.

```sh
$ cd third_party/openfst
$ ./configure --enable-static=yes
$ make
$ sudo make install
```


### Installing re2

You must use the included `third_party/re2` implementation:

```sh
$ cd third_party/re2
$ make
$ sudo make install
```


### GMP

Download the latest version of [GMP][], unpack the
archive and run:

```sh
$ wget https://gmplib.org/download/gmp/gmp-6.1.2.tar.bz2
$ tar -xvjf gmp-6.1.2.tar.bz2
$ cd gmp-6.1.2

$ ./configure --enable-cxx
$ make
$ sudo make install
$ make check
```



### Building the Marionette Binary

First, make sure you have installed Go from [https://golang.org/][go]. Next,
install `dep` using [these instructions][dep].

Finally, retrieve the source, update project dependencies, and install the
`marionette` binary:

```sh
$ go get github.com/redjack/marionette
$ cd $GOPATH/src/github.com/redjack/marionette
$ dep ensure
$ go install ./cmd/marionette
```

The `marionette` binary is now installed in your `$GOPATH/bin` folder.


[marionette]: https://github.com/marionette-tg/marionette
[GMP]: https://gmplib.org
[go]: https://golang.org/
[dep]: https://github.com/golang/dep#installation


## Installing new build-in formats

When adding new formats, you'll need to first install `go-bindata`:

```sh
$ go get -u github.com/jteeuwen/go-bindata/...
```

Then you can use `go generate` to convert the asset files to Go files:

```sh
$ go generate ./...
```

To install the original [marionette][] library for comparing tests, download
the latest version, unpack the archive and run:


## Testing

Use the built-in go testing command to run the unit tests:

```sh
$ go test ./...
```

If you have the original Python marionette installed then you can run tests
of the ports using the `python` tag:

```sh
$ go test -tags python ./regex2dfa
$ go test -tags python ./fte
```


## Demo

### HTTP-over-FTP

In this example, we'll mask our HTTP traffic as FTP packets.

First, follow the installation instructions above on your client &amp; server machines.

Start the server proxy on your server machine and forward traffic to a server
such as `google.com`.

```sh
$ marionette server -format ftp_simple_blocking -proxy google.com:80
listening on [::]:2121, proxying to google.com:80
```

Start the client proxy on your client machine and connect to your server proxy.
Replace `$SERVER_IP` with the IP address of your server.

```sh
$ marionette client -format ftp_simple_blocking -server $SERVER_IP
listening on 127.0.0.1:8079, connected to &lt;SERVER_IP&gt;
```

Finally, send a `curl` to `127.0.0.1:8079` and you should see a response from
`google.com`:

```sh
$ curl 127.0.0.1:8079
```


["DESIGN.md" (text/markdown)]

Design Document
===============

This document describes the overall design of the marionette system and how
each piece works together to form the whole program.


## Overview

From a high level, marionette exists as a client proxy and a server proxy.
These proxies allow the client to send data to a port and the proxies encrypt
data which can be formatted to look like other data (e.g. HTTP traffic, FTP
data, etc). The server proxy receives this formatted data and decrypts it and
sends the original data to an endpoint (a hostport or SOCKS5 proxy).

Initially, the user must start up both the `marionette client` &amp;
`marionette server` using to connect to each other. Both must specify the same
MAR specification document. This document declares a deterministic, finite state
machine that each side will execute. By executing the same steps in the same
sequence, both sides can encrypt/decrypt data together.

The overall data flow works as such:

1. Client application connects to the _client proxy_'s incoming port.

2. The client proxy opens a new _stream_ which is given a unique identifier.

3. The client proxy has a continually running _finite state machine_ running
   internally. When this FSM executes a directive to send data, the FSM will
   request data from any incoming stream. This data is marshalled into a _cell_
   which specifies the stream identifier, stream sequence number, document hash,
   payload size, and payload.

4. The marshalled cell is then encoded using either `fte` (Format-Transforming
   Encryption) or `tg` (Template Grammar). The `fte` encoding works by passing
   a regular expression to `libfte` and it will format the cell data to match
   the expression. The template grammar uses more specific rules encoded within
   the `tg` plugin.

5. The encrypted, formatted data is sent over the connection to the server
   proxy.

6. The server proxy is also running the same finite state machine but instead of
   sending data it expects to receive data. When the FSM executes the directive
   to receive data, it will read from the incoming connection and pass to
   `libfte` to decrypt the formatted message to produce the original cell data.

7. The cell data is passed to a _stream set_ which multiplexes many streams
   over the single connection.

8. The original payload data is then forwarded onto a hostport or to a SOCKS5
   interface.


## Components

### Client Proxy

The client proxy is a simple proxy which opens an incoming port and waits for
new connections. When a new connection is opened, a new stream within the
client stream set is created using the `Dialer`. Separate goroutines are
started to copy the incoming connection data to the stream and to copy
incoming stream data to the connection.

By default, the client proxy opens a listener on port `8079`.


### Server Proxy

The server proxy is similar to the client proxy—it opens an incoming port and
waits for new connections. The port opened by the server proxy, however, is
defined by the MAR document format used. For example, `http_simple_blocking`
specifies port `8081` in its header:

```
connection(tcp, 8081):
```

Once a connection is received, it is handed off to a SOCKS5 server, if
specified, otherwise a network connection is opened to a specified hostport.
Separate goroutines are created to copy to &amp; from the incoming connection and
outgoing connection.


### Dialer

The marionette dialer opens a single network connection to the marionette server
on initialization. It implements a `Dial()` method with the same signature as
Go's `net.Dialer.Dial()` so it can be used interchangeably. When `Dial()` is
invoked, the dialer obtains a new stream from the associated stream set which
handles multiplexing over the single connection.

The dialer handles the continuous execution of the FSM as well to ensure that
send &amp; receieve directives are constantly being made available for any incoming
and outgoing data.


### Listener

The marionette listener works similar to the dialer but for the server side. It
implements the `net.Listener` interface. When a listener accepts a network
connection from a dialer, it creates a new stream set to multiplex individual
streams over that connection. A new FSM is also created and continually executed
so that it is in sync with the FSM on the dialer side.


### Stream &amp; Cells

A stream represents a logical connection between the client and server. Streams
are multiplexed over a single network connection by using cells which are
essentially packets of data with additional identifying information.

In addition to the payload, cells have several fields:

- Type: Identifies cell as a normal payload or an end-of-stream.

- StreamID: Which stream this belongs to. Used for multiplexing.

- SequenceID: Allows for ordering of cells. Each new cell gets an incrementing
  sequence number. This allows for cells to arrive out of order.

- UUID: A hash of the MAR document. This ensures a connection is executing the
  same finite state machine.

- InstanceID: A randomly generated unique identifier for the connection. This
  is generated by the initiating party (typically the `client`).

On the read side, streams contain a sorted list of received cells. If a new cell
is the next expected sequence then it is unpacked and the payload is added to
the read buffer until it is full. When the user reads from the stream, the
buffer is drained and new cell data can be added to the end.

On the write side, data is added to a write buffer by the user. When the FSM
invokes a directive to send data then it requests a certain number of bytes
from the write buffer and those are wrapped into a cell with the appropriate
type, stream id, sequence id, UUID, &amp; instance id.

The stream maintains notification channels (`ReadNotify()` &amp; `WriteNotify()`)
to allow the FSM to determine when new data is made available on the read or
write side, respectively.


### Stream Set

The stream set contains the set of all open streams and performs the
multiplexing of streams over a single connection on both the client side and
server side. It also generates the random stream id on stream creation.

On the read side, the stream set chooses a random stream from the set of all
streams with pending data and extracts a cell. On the write side, the stream set
inspects the cell's stream id and delegates the cell to the appropriate stream
in the set.

The stream set also maintains a write notification channel to notify the user
when any stream in the set has a write available.


### FSM

The finite state machine (FSM) is the execution engine for the MAR document
format processed in unison by the client and server. The FSM is party aware
(e.g. `client` or `server`) and only executes actions for its party.

An FSM is executed from its `start` state to its `end` state and finally
transitioned to a `dead` state when it is complete. When `Execute()` is called,
the FSM continuously calls `Next()` to attempt to transition to the next
available state. A transition is successful when all actions in the transition's
action block for the party are completed without error. An error in an action
can occur for several reasons such as not having enough data received to
decrypt.

One special error state exists when the non-initiating party first receives a
cell with the instance id. The instance id is used by  both parties to seed a
PRNG (psuedo-random number generator) which is used to "randomly" select steps
in the MAR document where applicable. Because these "random" choices need to be
the same for both the client &amp; server, a party that receives a new instance id
restarts the FSM from the beginning and replays all its steps that have
occurred.

MAR documents can have multiple transitions from a single state:

1. Non-error transitions with a given probability.
2. Error transition.

First, all non-error transitions are collected and one is chosen based on
probability. If it can be executed successfully then the state is transitioned
to the new destination state. Next, the error transition is executed if the
non-error transition fails. If the error transition is successful then the
state is moved to the error transition's destination state.

A transition's actions are executed in order. If any returns an error then the
whole transition fails. Some actions can be conditionally executed based on 
a regex match of incoming data. Actions are simply invocations of plugin
functions.

FSMs provide a few additional services to plugins such as a variable scope as
well as FTE cipher &amp; DFA caches for faster encryption/decryption.


### regex2dfa

The `regex2dfa` library is used by marionette to generate a state transition
table for a given regular expression. This table, however, is opaquely generated
and passed to the `libfte` library and is not inspected by marionette.

The `regex2dfa.Regex2DFA()` function wraps this library to provide safe
concurrent access to the underlying C++ library.

This library relies on `OpenFST` and `re2` for converting regular expressions
to state transition tables.


### fte

The `libfte` library's `Rank()` and `Unrank()` functions are used by marionette
to convert to &amp; from binary data and a `big.Int` in order to generate covertext
that matches a given input regular expression.

The `fte` package also provides an encryption layer before converting to
covertext using AES-ECB for the message length, AES-CTR for the plaintext body,
and a SHA512+HMAC signature.

This library relies on `gmp` for big number support.

["DEVELOPER_MANUAL.md" (text/markdown)]

Developer Manual
================

This is guide for developers interested in writing their own Marionette
specifications using the MAR language. End users can refer to the user
manual instead to simply use the client and server tools with existing
MAR documents.


## Overview

The MAR language specifies a state machine that Marionette uses to obfuscate
communication between the client and server. Because the language is
deterministic, the client and server can both independently execute the same
MAR document and achieve the same result.

A list of pre-built MAR files can be found in the `mar/formats` folder of the
`marionette` repository.


## Structure

The MAR document contains 3 main parts:

1. Header
2. Transitions
3. Action Blocks


### Header

The header specifies the transport and port on the first line in the following
format:

```
connection(TRANSPORT, PORT):
```

- `TRANSPORT` must be `tcp` or `udp`.
- `PORT` must be a number in the valid TCP range (1-65535).

The `PORT` may also be a variable name that can be used by `channel.bind()` &amp;
`model.spawn()`. An example of this can found in the `ftp_simple_blocking` &amp;
`ftp_pasv_transfer` documents.


### Transitions

The lines that follow specify the FSM state machine transitions in the following
format:

```
SOURCE DESTINATION ACTION_BLOCK PROBABILITY
```

- `SOURCE` is the state to transition from.
- `DESTINATION` is the state to transition to.
- `ACTION_BLOCK` is the name of the action block to execute.
- `PROBABILITY` is the probability of execution, between `0.0` and `1.0`. This format \
location can also take on the value `error`.

The state machine always starts in the `start` state and document should always
end up in the `end` state. A special `dead` state is added after the `end` state
by the FSM evaluator. The `action` state name is not allowed.

The probability for transitions that share a common source state should add up
to `1.0`.

The error transition is an epsilon state which is activated when none of the other \
states can be transitioned to.


### Action Blocks

Action blocks specify a series of actions to perform by either the client or
server when a transition is made. If any actions fail then the transition is
retried.

Action blocks are specified as follows:

```
action NAME:
  ACTIONS
```

- `NAME` is the name used by the transition.
- `ACTIONS` is zero or more lines of actions to be executed.


#### Actions

Actions represent a call to the built-in plugins in `marionette`. These are 
specified as follows:

```
PARTY MODULE.NAME([ARG, [ARG, ...]]) [if regex_match_incoming("REGEX")]
```

- `PARTY` must be either `client` or `server`.
- `MODULE` specifies the plugin module where the function exists.
- `NAME` specifies the plugin name.
- `ARG...` represents zero or more comma-delimited arguments passed to the plugin.
- `REGEX` is a regular expression that incoming data must match to execute.  The \
regular expression is also the form that outgoing data will be shaped into.

Actions are only performed by one party (either `client` or `server`), however,
some actions have built-in counter actions. For example, when a client sends
data the server will implicitly have an action to read the data.

Arguments must be a quoted string (single or double quotes), an integer, or a
floating point number.


## Plugins

There are several modules of built-in plugins. Each plugin is the basis for an
action in Marionette and each one has specific arguments as documented below.
All plugin code can be found in the `plugins` package.


### Module: channel

The `channel` module provides plugins related to creating additional incoming
TCP connections.

#### `channel.bind()`

Arguments:

1. `name:string`

The `bind()` plugin opens a listener on a random port and saves the port number
to the `name` variable in the FSM. This is used in conjunction with
`model.spawn()` to use this random port for a child FSM.


### Module: fte

The `fte` module provides plugins to send and receive data using FTE
(Format-Transforming Encryption). This encrypts plaintext data and then conforms
it to a given regular expression for transport.

#### `fte.send()` &amp; `fte.send_async()`

Arguments:

1. `regex:string`
2. `msg_len:integer`

The `send()` plugin encrypts and sends queued incoming data to the counter
party, up to `msg_len` bytes. If there is no available data then an empty cell
is sent. If `send_async()` is used and no data is available then the send is
ignored.

`recv()` and `recv_async()` are counter actions to `send()` and `send_async()`.


#### `fte.recv()` &amp; `fte.recv_async()`

Arguments:

1. `regex:string`
2. `msg_len:integer`

The `recv()` &amp; `recv_async()` plugins decrypt data sent by `fte.send()` &amp;
`fte.send_async()`. These actions should not be specified by the protocol author
but instead are added automatically as counter actions by the FSM evaluator.


### Module: io

The `io` module provides plaintext input/output plugins.

#### `io.puts()`

Arguments:

1. `data:string` is the data to send to the counter party.

The `puts()` plugin simply writes `data` to the outgoing connection.

`gets()` is the counter action to `puts()`.


#### `io.gets()`

Arguments:

1. `expects:string` is the data expected to be read from the 

The `gets()` plugin reads `expects` data from the incoming connection. Fails
if the expected data is not read. On failure, any read data is returned to the
incoming connection's buffer.

The `gets()` plugin should not be specified by the protocol author but instead
it is added automatically as a counter action by the FSM evaluator.


### Module: model

The `model` module provides plugins for creating child FSMs and for sleeping.

#### `model.sleep()`

Arguments:

1. `distribution:string` is a mapping of sleep times (in seconds) to probabilities.

The `sleep()` plugin sleeps for an amount of time randomly chosen from
`distribution`. The `distribution` string must be formatted as a curly-brace
contained mapping of `float` sleep times to `float` probabilities.

For example, this is a distribution containing `0.1` seconds and `0.01` seconds.
The first timing has a 25% probability and the second timing has a 75% 
probability.

```
model.sleep("{'0.1': 0.25, '0.01': 0.75}")
```

#### `model.spawn()`

Arguments:

1. `format:string` is the MAR document format name.
2. `n:integer` is the number of instances to spawn.

The `spawn()` plugin executes a child FSM with the name specified by `format`.
This child FSM is executed `n` times. The child FSM copies all variables from
the parent FSM.


### Module: tg

The `tg` module provides a _template grammar_ for executing more specific
protocol formats such as specific HTTP variants, FTP, POP3, DNS, etc. Many
settings for these models are hardcoded and are not extensible within the MAR
file.

The following formats are available:

- `http_request_keep_alive`
- `http_response_keep_alive`
- `http_request_close`
- `http_response_close`
- `pop3_message_response`
- `pop3_password`
- `http_request_keep_alive_with_msg_lens`
- `http_response_keep_alive_with_msg_lens`
- `http_amazon_request`
- `http_amazon_response`
- `ftp_entering_passive`
- `dns_request`
- `dns_response`


#### `tg.send()`

Arguments:

1. `grammar:string` is the name of the grammar to execute.

The `send()` plugin executes the grammar specified by the `grammar` argument.

`recv()` is the counter action to `send()`.


#### `tg.recv()`

Arguments:

1. `grammar:string` is the name of the grammar to execute.

The `recv()` plugin executes the grammar specified by the `grammar` argument.

`send()` is the counter action to `recv()`.


## Plugin Development

All plugins exist as Go functions within subpackages of the `plugins` package.
Adding a new plugin requires two steps:

1. Write the plugin function.
2. Register it with [`RegisterPlugin()`](https://godoc.org/github.com/redjack/marionette#RegisterPlugin).


### Writing a plugin

All plugin functions implement the \
[`PluginFunc`](https://godoc.org/github.com/redjack/marionette#PluginFunc) interface:

```go
type PluginFunc func(ctx context.Context, fsm FSM, args ...interface{}) error
```

Let's say we want to build a `test.echo()` plugin that simply prints our
arguments to STDOUT. First we'll create a `plugins/test` package and we can
write our function like this:

```go
func Echo(ctx context.Context, fsm marionette.FSM, args ...interface{}) error {
	if len(args) &lt; 1 {
		return errors.New("not enough arguments")
	}

	fmt.Println(args...)
	return nil
}
```

### Registering a plugin

Next we let `marionette` know about the plugin by registering it. We'll do this
by adding an `init()` function with the call to `RegisterPlugin()` so it is 
included any time we import our `plugins/test` package:

```
package test

func init() {
	marionette.RegisterPlugin("test", "echo", Echo)
}
```

We'll need to also import our package in the `plugins/plugins.go` file which is
imported by the `cmd/marionette` binary:

```
import _ "github.com/redjack/marionette/plugins/test"
```


### Invoking our plugin

Now we can write an _action_ line using our new plugin:

```
connection(tcp, 8000):
  start echo NULL 1.0
  echo  end  echo 1.0

action echo:
  client test.echo("hello", "world")
```


## References

Below are some references to see how these plugins are used in practice within
the built-in formats. All formats can be found in the `mar/formats` directory.

- `http_simple_blocking`: Uses `fte.send()` calls to send &amp; receive HTTP
  formatted messages. Messages are sent and received continuously—even when
  there is no available data to be sent.

- `http_simple_nonblocking`: Uses `fte.send_async()` to send &amp; receive HTTP
  formatted messages. Messages are only sent when there is data available.

- `ftp_simple_blocking`: Uses the `tg` plugins to send FTP formatted messages
  and embed data to connect to random ports created by the `channel.bind()`
  plugin and managed by the `model.spawn()` plugin.

- `http_active_probing2`: Uses the `regex_match_incoming()` directive to
  conditionally send responses based on what data is sent to the server.

- `https_simple_blocking`: Uses the `io` plugins to hardcode the TLS handshake
  and then uses the `fte` plugins to exchange data.


["Protocol.md" (text/markdown)]

Protocols and how to design them for obfuscation strategies
======

## Overview

The MAR language specifies a state machine that Marionette uses to obfuscate
communication between the client and server. Because the language is
deterministic, the client and server can both independently execute the same
MAR document and achieve the same result.

A list of pre-built MAR files can be found in the `mar/formats` folder of the
`marionette` repository.


## Structure

The MAR document contains 3 main parts:

1. Header
2. Transitions
3. Action Blocks


### Header

The header specifies the transport and port on the first line in the following
format:

```
connection(TRANSPORT, PORT):
```

- `TRANSPORT` must be `tcp` or `udp`.
- `PORT` must be a number in the valid TCP range (1-65535).

The `PORT` may also be a variable name that can be used by `channel.bind()` &amp;
`model.spawn()`. An example of this can found in the `ftp_simple_blocking` &amp;
`ftp_pasv_transfer` documents.


### Transitions

The lines that follow specify the FSM state machine transitions in the following
format:

```
SOURCE DESTINATION ACTION_BLOCK PROBABILITY
```

- `SOURCE` is the state to transition from.
- `DESTINATION` is the state to transition to.
- `ACTION_BLOCK` is the name of the action block to execute.
- `PROBABILITY` is the probability of execution, between `0.0` and `1.0`.  This \
format location can also take on the value `error`.

The state machine always starts in the `start` state and document should always
end up in the `end` state. A special `dead` state is added after the `end` state
by the FSM evaluator. The `action` state name is not allowed.

The probability for transitions that share a common source state should add up
to `1.0`.

The error transition is an epsilon state which is activated when none of the other \
states can be transitioned to.

### Action Blocks

Action blocks specify a series of actions to perform by either the client or
server when a transition is made. If any actions fail then the transition is
retried.

Action blocks are specified as follows:

```
action NAME:
  ACTIONS
```

- `NAME` is the name used by the transition.
- `ACTIONS` is zero or more lines of actions to be executed.

### Hello World (http\_simple\_blocking) Protocol

Given the above description of how to construct a mar file in general, let's look at \
one in particular.

#### http\_simple\_blocking.mar
```
connection(tcp, 8081):
  start      upstream   NULL     1.0
  upstream   downstream http_get 1.0
  downstream end        http_ok  1.0

action http_get:
  client fte.send("^GET\ \/([a-zA-Z0-9\.\/]*) HTTP/1\.1\r\n\r\n$", 128)

action http_ok:
  server fte.send("^HTTP/1\.1\ 200 OK\r\nContent-Type:\ ([a-zA-Z0-9]+)\r\n\r\n\C*$", \
128) ```
This is the protocol `http_simple_blocking`.  The format file is called \
`http_simple_blocking.mar` and is found in the `mar/formats` directory.

#### Header Line

We can see that the server will open its connection on tcp port 8081, based on the \
header line.

#### Transitions
The next three lines are the transitions, which define the finite state machine. \
Let's go through it in detail.

These first line is the transition from the `start` state to the `upstream` state.  \
There is no action taken for this transition, which is what `NULL` means in the third \
column.  This transition happens with a probability 1.0.  Therefore, this is \
transition is certain to happen.  The only real purpose of this transition, is to get \
the system out of the `start` state and into the `upstream` state where something \
interesting can occur.

The second line is the transition from the `upstream` state to the `downstream` \
state.  This transition contains an action `http_get`.

Finally, the third line is a transition from the `downstream` state to the `end` \
state.  This transition contains an action `http_ok`.

There is a hidden fourth line, which occurs in all protocols that looks like this:

```
  end      start    NULL     1.0
```
This line closes the loop on the protocol, and allows the system to continue looping \
as long as there is data to transmit.  The system assumes that this line always \
exists, therefore we do not write it.

#### Actions
There are two actions.

The first is `http_get`:

```
action http_get:
  client fte.send("^GET\ \/([a-zA-Z0-9\.\/]*) HTTP/1\.1\r\n\r\n$", 128)
```
This line has two parts.  First, the `client` keyword means that the command on this \
line is to be considered from the client's perspective.  The second part is the \
`fte.send` command.  This command, provided by the `fte` plugin, translates a portion \
of the Marionette information into a tcp packet whose data satisfy the regular \
expression in the first argument.  The maximum length of the data is the second \
argument.  This command is interpreted on the server side as a command to receive a \
packet that satisfies the regex, and to decode it accordingly.

The second action is `http_ok`:

```
action http_ok:
  server fte.send("^HTTP/1\.1\ 200 OK\r\nContent-Type:\ ([a-zA-Z0-9]+)\r\n\r\n\C*$", \
128) ```

This action is identical to the action `http_get`, but it uses `fte.send` initiated \
on the server side.  This allows the server to send its own information, in the form \
of the given regex, allowing the response to be decoded on the client side.

This handshake completes the connection between the client and the server, allowing \
information transfer in both directions.  Proper construction of regexes disguises \
the information transfer as a set of  http GET commands and responses.

#### Summary

To form basic protocol disguise based on sequences of packets formed by regular \
expressions driven by a sequence of states, perform the following:

* Make sure that each node of the sequence of states is uniquely labeled.
* Make sure that the initial node of the sequence of states is labeled `start` and \
                that the terminal node is labeled `end`.
* Write down the sequence of transition edges between the states.  Include actions \
                where appropriate.  Ensure that each line ends with a 1.0.
* Generate the list of actions.  Use client `fte.send` commands and server `fte.send` \
                commands as appropriate with the desired regular expressions.
* Make sure to include at least one server `fte.send` command and one client \
`fte.send` command.

### Finite State Machine (http\_probabilistic\_blocking) Protocol

#### http\_probabilistic\_blocking.mar

```
connection(tcp, 8080):
  start http_get http_get 0.5
  start http_post http_post 0.5
  http_get http10_ok http10_ok 0.5
  http_get http11_ok http11_ok 0.5
  http_post http10_ok http10_ok 0.5
  http_post http11_ok http11_ok 0.5
  http10_ok http_get NULL 0.33
  http10_ok http_post NULL 0.33
  http10_ok end NULL 0.33
  http11_ok http_get NULL 0.33
  http11_ok http_post NULL 0.33
  http11_ok end NULL 0.33

action http_get:
  client fte.send("GET\s/.*", 128)

action http10_ok:
  server fte.send("HTTP/1\.0.*", 128)

action http_post:
  client fte.send("POST\s/.*", 128)

action http11_ok:
  server fte.send("HTTP/1\.1.*", 128)
```
Simple sequences of packets are all well and good, but protocols typically have more \
variety than that.  We need to make non-deterministic transitions between states.  \
Fortunately, Marionette has that ability.

By changing the value 1.0 at the end of each transition line to a smaller value, we \
make each transition a probabilistic change instead of a determined change.  In this \
manner, we can widen the variety of behaviors, and implement a complete finite state \
machine.

#### Transitions

There are two transitions from the `start` state.  One proceeds to the `http_get` \
state with 50% probability:

```
start http_get http_get 0.5
```
and the other proceeds to the `http_post` state with 50% probability:

```
start http_post http_post 0.5
```
because there are two possible actions that can be taken from the start state, \
behavioral variety beyond the variation due to regular expressions can be expressed.  \
This allows far more realistic behaviors to be generated.

Note, that although the transitions out of a state do not strictly have to add up to \
1.0, (see `http11_ok`) it is recommended if it does not impact understandability.

#### Summary

* Use probabilistic transitions to model protocol behavior where the transmission \
                types vary non-deterministically.
* Set the probabilities of transition to appear as realistic transitions, by either \
making reasonable estimates or using data to determine how often the transitions \
really occur.

### Active Probing (http\_active\_probing) Protocol

#### http\_active\_probing.mar

```
connection(tcp, 8080):
  start          upstream       NULL        1.0
  upstream       downstream     http_get    1.0
  upstream       downstream_err NULL        error
  downstream_err end            http_ok_err 1.0
  downstream     end            http_ok     1.0
  
action http_get:
  client fte.send("^GET\ \/([a-zA-Z0-9\.\/]*) HTTP/1\.1\r\n\r\n$", 128)

action http_ok:
  server fte.send("^HTTP/1\.1\ 200 OK\r\nContent-Type:\ ([a-zA-Z0-9]+)\r\n\r\n\C*$", \
128)

action http_ok_err:
  server io.puts("HTTP/1.1 200 OK\r\n\r\nHello, World!
```

When the system receives information, it checks to see if any of the transitions that \
it can make are valid.  If there are no valid transitions that can be performed, the \
system fails unless there is an available error transition.

If the error transition is available, then it accepts the transition.  This can be \
exploited to reject scanning.  If additional packets are sent to the server port that \
do not belong, then the system can execute the error command in response.  Typically, \
the response is to present a banner or other fixed set of bits back to the offending \
location.

The action `http_ok_err` transmits back a fixed string using the `io.puts` command.  \
This command, instead of using a regular expression transmits a set string.  No \
actual encoded data is transferred across the connection, but it `io.puts` can be \
very useful for banners and other protocol information that can be considered static.

#### Summary

When you wish to have a good response for additional packets being injected into your \
flow, such as port scanning, use error transitions.  These transitions can send back \
information to offending systems that will make your ports appear normal.

### Secure (web_conn443) Protocol

#### web\_conn443.mar

```
connection(tcp, 443):
  start  c_hello NULL 1.0
  c_hello s_hello do_c_hello 1.0
  s_hello s_certificate do_s_hello 1.0
  s_certificate c_key_exchange do_s_certificate 1.0
  c_key_exchange s_change_cipher_spec do_c_key_exchange 1.0
  s_change_cipher_spec cstart do_s_change_cipher_spec 1.0
  cstart conn1 NULL 0.28
  cstart conn2 NULL 0.19
  cstart conn3 NULL 0.14
  cstart conn4 NULL 0.13
  cstart conn5 NULL 0.05
  cstart conn6 NULL 0.1
  cstart conn7 NULL 0.01
  cstart conn8 NULL 0.02
  cstart conn9 NULL 0.03
  cstart conn10 NULL 0.01
  cstart conn15 NULL 0.01
  cstart conn18 NULL 0.01
  cstart conn28 NULL 0.01
  cstart conn31 NULL 0.01
  conn1 requestx1x0 request 1.0
  requestx1x0 responsex1x1 response 1.0
  responsex1x1 end NULL 1.0
  conn2 requestx2x0 request 1.0
  requestx2x0 responsex2x1 response 1.0
  responsex2x1 requestx2x2 request 1.0
  requestx2x2 responsex2x3 response 1.0
  responsex2x3 end NULL 1.0
  conn3 requestx3x0 request 1.0
  requestx3x0 responsex3x1 response 1.0
  responsex3x1 requestx3x2 request 1.0
  requestx3x2 responsex3x3 response 1.0
  responsex3x3 end NULL 1.0
  conn4 requestx4x0 request 1.0
  requestx4x0 responsex4x1 response 1.0
  responsex4x1 requestx4x2 request 1.0
  requestx4x2 responsex4x3 response 1.0
  responsex4x3 requestx4x4 request 1.0
  requestx4x4 responsex4x5 response 1.0
  responsex4x5 end NULL 1.0
  conn5 requestx5x0 request 1.0
  requestx5x0 responsex5x1 response 1.0
  responsex5x1 requestx5x2 request 1.0
  requestx5x2 responsex5x3 response 1.0
  responsex5x3 requestx5x4 request 1.0
  requestx5x4 responsex5x5 response 1.0
  responsex5x5 end NULL 1.0
  conn6 requestx6x0 request 1.0
  requestx6x0 responsex6x1 response 1.0
  responsex6x1 requestx6x2 request 1.0
  requestx6x2 responsex6x3 response 1.0
  responsex6x3 requestx6x4 request 1.0
  requestx6x4 responsex6x5 response 1.0
  responsex6x5 requestx6x6 request 1.0
  requestx6x6 responsex6x7 response 1.0
  responsex6x7 end NULL 1.0
  conn7 requestx7x0 request 1.0
  requestx7x0 responsex7x1 response 1.0
  responsex7x1 requestx7x2 request 1.0
  requestx7x2 responsex7x3 response 1.0
  responsex7x3 requestx7x4 request 1.0
  requestx7x4 responsex7x5 response 1.0
  responsex7x5 requestx7x6 request 1.0
  requestx7x6 responsex7x7 response 1.0
  responsex7x7 end NULL 1.0
  conn8 requestx8x0 request 1.0
  requestx8x0 responsex8x1 response 1.0
  responsex8x1 requestx8x2 request 1.0
  requestx8x2 responsex8x3 response 1.0
  responsex8x3 requestx8x4 request 1.0
  requestx8x4 responsex8x5 response 1.0
  responsex8x5 requestx8x6 request 1.0
  requestx8x6 responsex8x7 response 1.0
  responsex8x7 requestx8x8 request 1.0
  requestx8x8 responsex8x9 response 1.0
  responsex8x9 end NULL 1.0
  conn9 requestx9x0 request 1.0
  requestx9x0 responsex9x1 response 1.0
  responsex9x1 requestx9x2 request 1.0
  requestx9x2 responsex9x3 response 1.0
  responsex9x3 requestx9x4 request 1.0
  requestx9x4 responsex9x5 response 1.0
  responsex9x5 requestx9x6 request 1.0
  requestx9x6 responsex9x7 response 1.0
  responsex9x7 requestx9x8 request 1.0
  requestx9x8 responsex9x9 response 1.0
  responsex9x9 end NULL 1.0
  conn10 requestx10x0 request 1.0
  requestx10x0 responsex10x1 response 1.0
  responsex10x1 requestx10x2 request 1.0
  requestx10x2 responsex10x3 response 1.0
  responsex10x3 requestx10x4 request 1.0
  requestx10x4 responsex10x5 response 1.0
  responsex10x5 requestx10x6 request 1.0
  requestx10x6 responsex10x7 response 1.0
  responsex10x7 requestx10x8 request 1.0
  requestx10x8 responsex10x9 response 1.0
  responsex10x9 requestx10x10 request 1.0
  requestx10x10 responsex10x11 response 1.0
  responsex10x11 end NULL 1.0
  conn15 requestx15x0 request 1.0
  requestx15x0 responsex15x1 response 1.0
  responsex15x1 requestx15x2 request 1.0
  requestx15x2 responsex15x3 response 1.0
  responsex15x3 requestx15x4 request 1.0
  requestx15x4 responsex15x5 response 1.0
  responsex15x5 requestx15x6 request 1.0
  requestx15x6 responsex15x7 response 1.0
  responsex15x7 requestx15x8 request 1.0
  requestx15x8 responsex15x9 response 1.0
  responsex15x9 requestx15x10 request 1.0
  requestx15x10 responsex15x11 response 1.0
  responsex15x11 requestx15x12 request 1.0
  requestx15x12 responsex15x13 response 1.0
  responsex15x13 requestx15x14 request 1.0
  requestx15x14 responsex15x15 response 1.0
  responsex15x15 end NULL 1.0
  conn18 requestx18x0 request 1.0
  requestx18x0 responsex18x1 response 1.0
  responsex18x1 requestx18x2 request 1.0
  requestx18x2 responsex18x3 response 1.0
  responsex18x3 requestx18x4 request 1.0
  requestx18x4 responsex18x5 response 1.0
  responsex18x5 requestx18x6 request 1.0
  requestx18x6 responsex18x7 response 1.0
  responsex18x7 requestx18x8 request 1.0
  requestx18x8 responsex18x9 response 1.0
  responsex18x9 requestx18x10 request 1.0
  requestx18x10 responsex18x11 response 1.0
  responsex18x11 requestx18x12 request 1.0
  requestx18x12 responsex18x13 response 1.0
  responsex18x13 requestx18x14 request 1.0
  requestx18x14 responsex18x15 response 1.0
  responsex18x15 requestx18x16 request 1.0
  requestx18x16 responsex18x17 response 1.0
  responsex18x17 requestx18x18 request 1.0
  requestx18x18 responsex18x19 response 1.0
  responsex18x19 end NULL 1.0
  conn28 requestx28x0 request 1.0
  requestx28x0 responsex28x1 response 1.0
  responsex28x1 requestx28x2 request 1.0
  requestx28x2 responsex28x3 response 1.0
  responsex28x3 requestx28x4 request 1.0
  requestx28x4 responsex28x5 response 1.0
  responsex28x5 requestx28x6 request 1.0
  requestx28x6 responsex28x7 response 1.0
  responsex28x7 requestx28x8 request 1.0
  requestx28x8 responsex28x9 response 1.0
  responsex28x9 requestx28x10 request 1.0
  requestx28x10 responsex28x11 response 1.0
  responsex28x11 requestx28x12 request 1.0
  requestx28x12 responsex28x13 response 1.0
  responsex28x13 requestx28x14 request 1.0
  requestx28x14 responsex28x15 response 1.0
  responsex28x15 requestx28x16 request 1.0
  requestx28x16 responsex28x17 response 1.0
  responsex28x17 requestx28x18 request 1.0
  requestx28x18 responsex28x19 response 1.0
  responsex28x19 requestx28x20 request 1.0
  requestx28x20 responsex28x21 response 1.0
  responsex28x21 requestx28x22 request 1.0
  requestx28x22 responsex28x23 response 1.0
  responsex28x23 requestx28x24 request 1.0
  requestx28x24 responsex28x25 response 1.0
  responsex28x25 requestx28x26 request 1.0
  requestx28x26 responsex28x27 response 1.0
  responsex28x27 requestx28x28 request 1.0
  requestx28x28 responsex28x29 response 1.0
  responsex28x29 end NULL 1.0
  conn31 requestx31x0 request 1.0
  requestx31x0 responsex31x1 response 1.0
  responsex31x1 requestx31x2 request 1.0
  requestx31x2 responsex31x3 response 1.0
  responsex31x3 requestx31x4 request 1.0
  requestx31x4 responsex31x5 response 1.0
  responsex31x5 requestx31x6 request 1.0
  requestx31x6 responsex31x7 response 1.0
  responsex31x7 requestx31x8 request 1.0
  requestx31x8 responsex31x9 response 1.0
  responsex31x9 requestx31x10 request 1.0
  requestx31x10 responsex31x11 response 1.0
  responsex31x11 requestx31x12 request 1.0
  requestx31x12 responsex31x13 response 1.0
  responsex31x13 requestx31x14 request 1.0
  requestx31x14 responsex31x15 response 1.0
  responsex31x15 requestx31x16 request 1.0
  requestx31x16 responsex31x17 response 1.0
  responsex31x17 requestx31x18 request 1.0
  requestx31x18 responsex31x19 response 1.0
  responsex31x19 requestx31x20 request 1.0
  requestx31x20 responsex31x21 response 1.0
  responsex31x21 requestx31x22 request 1.0
  requestx31x22 responsex31x23 response 1.0
  responsex31x23 requestx31x24 request 1.0
  requestx31x24 responsex31x25 response 1.0
  responsex31x25 requestx31x26 request 1.0
  requestx31x26 responsex31x27 response 1.0
  responsex31x27 requestx31x28 request 1.0
  requestx31x28 responsex31x29 response 1.0
  responsex31x29 requestx31x30 request 1.0
  requestx31x30 responsex31x31 response 1.0
  responsex31x31 end NULL 1.0

action request:
  client fte.send("^\x17\x03\x03\x01\xbe.*$", 426)

action response:
  server fte.send("^\x17\x03\x03\x01\xbe.*$", 426)

# Client Hello
action do_c_hello:
  client io.puts('\x16\x03\x01\x00\xcc\x01\x00\x00\xc8\x03\x03\x86\x4b\xde\x9d\x60\x7a \
\x88\x55\x37\xcc\xc8\x16\x88\x18\xd5\xab\x6b\x9d\x2d\xc0\x4b\x6c\x7f\x2b\x25\x1a\xe9\x \
94\x82\x16\xcd\x74\x00\x00\x22\xc0\x2b\xc0\x2f\x00\x9e\xcc\x14\xcc\x13\xcc\x15\xc0\x0a \
\xc0\x14\x00\x39\xc0\x09\xc0\x13\x00\x33\x00\x9c\x00\x35\x00\x2f\x00\x0a\x00\xff\x01\x \
00\x00\x7d\x00\x00\x00\x11\x00\x0f\x00\x00\x0c\x77\x77\x77\x2e\x69\x61\x6e\x61\x2e\x6f \
\x72\x67\x00\x17\x00\x00\x00\x23\x00\x00\x00\x0d\x00\x16\x00\x14\x06\x01\x06\x03\x05\x \
01\x05\x03\x04\x01\x04\x03\x03\x01\x03\x03\x02\x01\x02\x03\x00\x05\x00\x05\x01\x00\x00 \
\x00\x00\x33\x74\x00\x00\x00\x12\x00\x00\x00\x10\x00\x1d\x00\x1b\x08\x68\x74\x74\x70\x \
2f\x31\x2e\x31\x08\x73\x70\x64\x79\x2f\x33\x2e\x31\x05\x68\x32\x2d\x31\x34\x02\x68\x32 \
\x75\x50\x00\x00\x00\x0b\x00\x02\x01\x00\x00\x0a\x00\x06\x00\x04\x00\x17\x00\x18')

# Server Hello
action do_s_hello:
  server io.puts('\x16\x03\x03\x00\x55\x02\x00\x00\x51\x03\x03\x56\x73\x20\x01\x0b\x7b \
\xb5\x97\xa8\x88\xee\xac\x07\xcd\x25\xb1\x5b\xa2\xaf\x08\x14\x76\xee\x8e\x89\xdb\xb6\x \
09\x98\xe5\x2a\x6f\x20\x50\x40\x22\xdf\xd3\x3a\xe3\x19\x19\xcb\xcc\x3b\xb7\x96\xb8\x57 \
\xb3\xbb\xd7\xd2\x8d\xee\xd7\xd0\x3d\x33\x33\x0f\x69\x0f\x48\x76\x00\x35\x00\x00\x09\xff\x01\x00\x01\x00\x00\x00\x00\x00')


# Server Certificate -
action do_s_certificate:
  server io.puts('\x16\x03\x03\x0b\x49\x0b\x00\x0b\x45\x00\x0b\x42\x00\x06\x87\x30\x82 \
\x06\x83\x30\x82\x05\x6b\xa0\x03\x02\x01\x02\x02\x10\x09\xca\xbb\xe2\x19\x1c\x8f\x56\x \
9d\xd4\xb6\xdd\x25\x0f\x21\xd8\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05 \
\x00\x30\x70\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x15\x30\x13\x06\x \
03\x55\x04\x0a\x13\x0c\x44\x69\x67\x69\x43\x65\x72\x74\x20\x49\x6e\x63\x31\x19\x30\x17 \
\x06\x03\x55\x04\x0b\x13\x10\x77\x77\x77\x2e\x64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x \
6f\x6d\x31\x2f\x30\x2d\x06\x03\x55\x04\x03\x13\x26\x44\x69\x67\x69\x43\x65\x72\x74\x20 \
\x53\x48\x41\x32\x20\x48\x69\x67\x68\x20\x41\x73\x73\x75\x72\x61\x6e\x63\x65\x20\x53\x \
65\x72\x76\x65\x72\x20\x43\x41\x30\x1e\x17\x0d\x31\x34\x31\x30\x32\x37\x30\x30\x30\x30 \
\x30\x30\x5a\x17\x0d\x31\x38\x30\x31\x30\x33\x31\x32\x30\x30\x30\x30\x5a\x30\x81\xa3\x \
31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x13\x30\x11\x06\x03\x55\x04\x08 \
\x13\x0a\x43\x61\x6c\x69\x66\x6f\x72\x6e\x69\x61\x31\x14\x30\x12\x06\x03\x55\x04\x07\x \
13\x0b\x4c\x6f\x73\x20\x41\x6e\x67\x65\x6c\x65\x73\x31\x3c\x30\x3a\x06\x03\x55\x04\x0a \
\x13\x33\x49\x6e\x74\x65\x72\x6e\x65\x74\x20\x43\x6f\x72\x70\x6f\x72\x61\x74\x69\x6f\x \
6e\x20\x66\x6f\x72\x20\x41\x73\x73\x69\x67\x6e\x65\x64\x20\x4e\x61\x6d\x65\x73\x20\x61 \
\x6e\x64\x20\x4e\x75\x6d\x62\x65\x72\x73\x31\x16\x30\x14\x06\x03\x55\x04\x0b\x13\x0d\x \
49\x54\x20\x4f\x70\x65\x72\x61\x74\x69\x6f\x6e\x73\x31\x13\x30\x11\x06\x03\x55\x04\x03 \
\x0c\x0a\x2a\x2e\x69\x61\x6e\x61\x2e\x6f\x72\x67\x30\x82\x02\x22\x30\x0d\x06\x09\x2a\x \
86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x02\x0f\x00\x30\x82\x02\x0a\x02\x82\x02 \
\x01\x00\x9d\xbd\xfd\xde\xb5\xca\xe5\x3a\x55\x97\x47\xe2\xfd\xa6\x37\x28\xe4\xab\xa6\x \
0f\x18\xb7\x9a\x69\xf0\x33\x10\xbf\x01\x64\xe5\xee\x7d\xb6\xb1\x5b\xf5\x6d\xf2\x3f\xdd \
\xba\xe6\xa1\xbb\x38\x44\x9b\x8c\x88\x3f\x18\x10\x2b\xbd\x8b\xb6\x55\xac\x0e\x2d\xac\x \
2e\xe3\xed\x5c\xf4\x31\x58\x68\xd2\xc5\x98\x06\x82\x84\x85\x4b\x24\x89\x4d\xcd\x4b\xd3 \
\x78\x11\xf0\xad\x3a\x28\x2c\xd4\xb4\xe5\x99\xff\xd0\x7d\x8d\x2d\x3f\x24\x78\x55\x4f\x \
81\x02\x0b\x32\x0e\xe1\x2f\x44\x94\x8e\x2e\xa1\xed\xbc\x99\x0b\x83\x0c\xa5\xcc\xa6\xb4 \
\xa8\x39\xfb\x27\xb5\x18\x50\xc9\x84\x7e\xac\x74\xf2\x66\x09\xeb\x24\x36\x5b\x97\x51\x \
fb\x1c\x32\x08\xf5\x69\x13\xba\xcb\xca\xe4\x92\x01\x34\x7c\x78\xb7\xe5\x4a\x9d\x99\x97 \
\x94\x04\xc3\x7f\x00\xfb\x65\xdb\x84\x9f\xd7\x5e\x3a\x68\x77\x0c\x30\xf2\xab\xe6\x5b\x \
33\x25\x6f\xb5\x9b\x45\x00\x50\xb0\x0d\x81\x39\xd4\xd8\x0d\x36\xf7\xbc\x46\xda\xf3\x03 \
\xe4\x8f\x0f\x07\x91\xb2\xfd\xd7\x2e\xc6\x0b\x2c\xb3\xad\x53\x3c\x3f\x28\x8c\x9c\x19\x \
4e\x49\x33\x7a\x69\xc4\x96\x73\x1f\x08\x6d\x4f\x1f\x98\x25\x90\x07\x13\xe2\xa5\x51\xd0 \
\x5c\xb6\x05\x75\x67\x85\x0d\x91\xe6\x00\x1c\x4c\xe2\x71\x76\xf0\x95\x78\x73\xa9\x5b\x \
88\x0a\xcb\xec\x19\xe7\xbd\x9b\xcf\x12\x86\xd0\x45\x2b\x73\x78\x9c\x41\x90\x5d\xd4\x70 \
\x97\x1c\xd7\x3a\xea\x52\xc7\x7b\x08\x0c\xd7\x79\xaf\x58\x23\x4f\x33\x72\x25\xc2\x6f\x \
87\xa8\xc1\x3e\x2a\x65\xe9\xdd\x4e\x03\xa5\xb4\x1d\x7e\x06\xb3\x35\x3f\x38\x12\x9b\x23 \
\x27\xa5\x31\xec\x96\x27\xa2\x1d\xc4\x23\x73\x3a\xa0\x29\xd4\x98\x94\x48\xba\x33\x22\x \
89\x1c\x1a\x56\x90\xdd\xf2\xd2\x5c\x8e\xc8\xaa\xa8\x94\xb1\x4a\xa9\x21\x30\xc6\xb6\xd9 \
\x69\xa2\x1f\xf6\x71\xb6\x0c\x4c\x92\x3a\x94\xa9\x3e\xa1\xdd\x04\x92\xc9\x33\x93\xca\x \
6e\xdd\x61\xf3\x3c\xa7\x7e\x92\x08\xd0\x1d\x6b\xd1\x51\x07\x66\x2e\xc0\x88\x73\x3d\xf4 \
\xc8\x76\xa7\xe1\x60\x8b\x82\x97\x3a\x0f\x75\x92\xe8\x4e\xd1\x55\x79\xd1\x81\xe7\x90\x \
24\xae\x8a\x7e\x4b\x9f\x00\x78\xeb\x20\x05\xb2\x3f\x9d\x09\xa1\xdf\x1b\xbc\x7d\xe2\xa5 \
\xa6\x08\x5a\x36\x46\xd9\xfa\xdb\x0e\x9d\xa2\x73\xa5\xf4\x03\xcd\xd4\x28\x31\xce\x6f\x \
0c\xa4\x68\x89\x58\x56\x02\xbb\x8b\xc3\x6b\xb3\xbe\x86\x1f\xf6\xd1\xa6\x2e\x35\x02\x03 \
\x01\x00\x01\xa3\x82\x01\xe3\x30\x82\x01\xdf\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x \
16\x80\x14\x51\x68\xff\x90\xaf\x02\x07\x75\x3c\xcc\xd9\x65\x64\x62\xa2\x12\xb8\x59\x72 \
\x3b\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\xc7\xd0\xac\xef\x89\x8b\x20\xe4\xb9\x \
14\x66\x89\x33\x03\x23\x94\xf6\xbf\x3a\x61\x30\x1f\x06\x03\x55\x1d\x11\x04\x18\x30\x16 \
\x82\x0a\x2a\x2e\x69\x61\x6e\x61\x2e\x6f\x72\x67\x82\x08\x69\x61\x6e\x61\x2e\x6f\x72\x \
67\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x05\xa0\x30\x1d\x06\x03\x55 \
\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x06\x08\x2b\x06\x01\x \
05\x05\x07\x03\x02\x30\x75\x06\x03\x55\x1d\x1f\x04\x6e\x30\x6c\x30\x34\xa0\x32\xa0\x30 \
\x86\x2e\x68\x74\x74\x70\x3a\x2f\x2f\x63\x72\x6c\x33\x2e\x64\x69\x67\x69\x63\x65\x72\x \
74\x2e\x63\x6f\x6d\x2f\x73\x68\x61\x32\x2d\x68\x61\x2d\x73\x65\x72\x76\x65\x72\x2d\x67 \
\x33\x2e\x63\x72\x6c\x30\x34\xa0\x32\xa0\x30\x86\x2e\x68\x74\x74\x70\x3a\x2f\x2f\x63\x \
72\x6c\x34\x2e\x64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x2f\x73\x68\x61\x32\x2d \
\x68\x61\x2d\x73\x65\x72\x76\x65\x72\x2d\x67\x33\x2e\x63\x72\x6c\x30\x42\x06\x03\x55\x \
1d\x20\x04\x3b\x30\x39\x30\x37\x06\x09\x60\x86\x48\x01\x86\xfd\x6c\x01\x01\x30\x2a\x30 \
\x28\x06\x08\x2b\x06\x01\x05\x05\x07\x02\x01\x16\x1c\x68\x74\x74\x70\x73\x3a\x2f\x2f\x \
77\x77\x77\x2e\x64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x2f\x43\x50\x53\x30\x81 \
\x83\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x77\x30\x75\x30\x24\x06\x08\x2b\x06\x \
01\x05\x05\x07\x30\x01\x86\x18\x68\x74\x74\x70\x3a\x2f\x2f\x6f\x63\x73\x70\x2e\x64\x69 \
\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x30\x4d\x06\x08\x2b\x06\x01\x05\x05\x07\x30\x \
02\x86\x41\x68\x74\x74\x70\x3a\x2f\x2f\x63\x61\x63\x65\x72\x74\x73\x2e\x64\x69\x67\x69 \
\x63\x65\x72\x74\x2e\x63\x6f\x6d\x2f\x44\x69\x67\x69\x43\x65\x72\x74\x53\x48\x41\x32\x \
48\x69\x67\x68\x41\x73\x73\x75\x72\x61\x6e\x63\x65\x53\x65\x72\x76\x65\x72\x43\x41\x2e \
\x63\x72\x74\x30\x0c\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x02\x30\x00\x30\x0d\x06\x09\x \
2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x70\x31\x4c\x38\xe7\xc0 \
\x2f\xd8\x08\x10\x50\x0b\x9d\xf6\xda\xe8\x5d\xe9\xb2\x3e\x29\xfb\xd6\x8b\xfd\xb5\xf2\x \
34\x11\xc8\x9a\xcf\xaf\x9a\xe0\x5a\xf9\x12\x3a\x8a\xa6\xbc\xe6\x95\x4a\x4e\x68\xdc\x7c \
\xfc\x48\x0a\x65\xd7\x6f\x22\x9c\x4b\xd5\xf5\x67\x4b\x0c\x9a\xc6\xd0\x6a\x37\xa1\xa1\x \
c1\x45\xc3\x95\x61\x20\xb8\xef\xe6\x7c\x88\x7a\xb4\xff\x7d\x6a\xa9\x50\xff\x36\x98\xf2 \
\x7c\x4a\x19\xd5\x9d\x93\xa3\x9a\xca\x5a\x7b\x6d\x6c\x75\xe3\x49\x74\xe5\x0f\x5a\x59\x \
00\x05\xb3\xcb\x66\x5d\xdb\xd7\x07\x4f\x9f\xcb\xcb\xf9\xc5\x02\x28\xd5\xe2\x55\x96\xb6 \
\x4a\xda\x16\x0b\x48\xf7\x7a\x93\xaa\xce\xd2\x26\x17\xbf\xe0\x05\xe0\x0f\xe2\x0a\x53\x \
2a\x0a\xdc\xb8\x18\xc8\x78\xdc\x5d\x66\x49\x27\x77\x77\xca\x1a\x81\x4e\x21\xd0\xb5\x33 \
\x08\xaf\x40\x78\xbe\x45\x54\x71\x5e\x4c\xe4\x82\x8b\x01\x2f\x25\xff\xa1\x3a\x6c\xeb\x \
30\xd2\x0a\x75\xde\xba\x8a\x34\x4e\x41\xd6\x27\xfa\x63\x8f\xef\xf3\x8a\x30\x63\xa0\x18 \
\x75\x19\xb3\x9b\x05\x3f\x71\x34\xd9\xcd\x83\xe6\x09\x1a\xcc\xf5\xd2\xe3\xa0\x5e\xdf\x \
a1\xdf\xbe\x18\x1a\x87\xad\x86\xba\x24\xfe\x6b\x97\xfe\x00\x04\xb5\x30\x82\x04\xb1\x30 \
\x82\x03\x99\xa0\x03\x02\x01\x02\x02\x10\x04\xe1\xe7\xa4\xdc\x5c\xf2\xf3\x6d\xc0\x2b\x \
42\xb8\x5d\x15\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x6c \
\x31\x0b\x30\x09\x06\x03\x55\x04\x06\x13\x02\x55\x53\x31\x15\x30\x13\x06\x03\x55\x04\x \
0a\x13\x0c\x44\x69\x67\x69\x43\x65\x72\x74\x20\x49\x6e\x63\x31\x19\x30\x17\x06\x03\x55 \
\x04\x0b\x13\x10\x77\x77\x77\x2e\x64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x31\x \
2b\x30\x29\x06\x03\x55\x04\x03\x13\x22\x44\x69\x67\x69\x43\x65\x72\x74\x20\x48\x69\x67 \
\x68\x20\x41\x73\x73\x75\x72\x61\x6e\x63\x65\x20\x45\x56\x20\x52\x6f\x6f\x74\x20\x43\x \
41\x30\x1e\x17\x0d\x31\x33\x31\x30\x32\x32\x31\x32\x30\x30\x30\x30\x5a\x17\x0d\x32\x38 \
\x31\x30\x32\x32\x31\x32\x30\x30\x30\x30\x5a\x30\x70\x31\x0b\x30\x09\x06\x03\x55\x04\x \
06\x13\x02\x55\x53\x31\x15\x30\x13\x06\x03\x55\x04\x0a\x13\x0c\x44\x69\x67\x69\x43\x65 \
\x72\x74\x20\x49\x6e\x63\x31\x19\x30\x17\x06\x03\x55\x04\x0b\x13\x10\x77\x77\x77\x2e\x \
64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x31\x2f\x30\x2d\x06\x03\x55\x04\x03\x13 \
\x26\x44\x69\x67\x69\x43\x65\x72\x74\x20\x53\x48\x41\x32\x20\x48\x69\x67\x68\x20\x41\x \
73\x73\x75\x72\x61\x6e\x63\x65\x20\x53\x65\x72\x76\x65\x72\x20\x43\x41\x30\x82\x01\x22 \
\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x82\x01\x0f\x00\x30\x \
82\x01\x0a\x02\x82\x01\x01\x00\xb6\xe0\x2f\xc2\x24\x06\xc8\x6d\x04\x5f\xd7\xef\x0a\x64 \
\x06\xb2\x7d\x22\x26\x65\x16\xae\x42\x40\x9b\xce\xdc\x9f\x9f\x76\x07\x3e\xc3\x30\x55\x \
87\x19\xb9\x4f\x94\x0e\x5a\x94\x1f\x55\x56\xb4\xc2\x02\x2a\xaf\xd0\x98\xee\x0b\x40\xd7 \
\xc4\xd0\x3b\x72\xc8\x14\x9e\xef\x90\xb1\x11\xa9\xae\xd2\xc8\xb8\x43\x3a\xd9\x0b\x0b\x \
d5\xd5\x95\xf5\x40\xaf\xc8\x1d\xed\x4d\x9c\x5f\x57\xb7\x86\x50\x68\x99\xf5\x8a\xda\xd2 \
\xc7\x05\x1f\xa8\x97\xc9\xdc\xa4\xb1\x82\x84\x2d\xc6\xad\xa5\x9c\xc7\x19\x82\xa6\x85\x \
0f\x5e\x44\x58\x2a\x37\x8f\xfd\x35\xf1\x0b\x08\x27\x32\x5a\xf5\xbb\x8b\x9e\xa4\xbd\x51 \
\xd0\x27\xe2\xdd\x3b\x42\x33\xa3\x05\x28\xc4\xbb\x28\xcc\x9a\xac\x2b\x23\x0d\x78\xc6\x \
7b\xe6\x5e\x71\xb7\x4a\x3e\x08\xfb\x81\xb7\x16\x16\xa1\x9d\x23\x12\x4d\xe5\xd7\x92\x08 \
\xac\x75\xa4\x9c\xba\xcd\x17\xb2\x1e\x44\x35\x65\x7f\x53\x25\x39\xd1\x1c\x0a\x9a\x63\x \
1b\x19\x92\x74\x68\x0a\x37\xc2\xc2\x52\x48\xcb\x39\x5a\xa2\xb6\xe1\x5d\xc1\xdd\xa0\x20 \
\xb8\x21\xa2\x93\x26\x6f\x14\x4a\x21\x41\xc7\xed\x6d\x9b\xf2\x48\x2f\xf3\x03\xf5\xa2\x \
68\x92\x53\x2f\x5e\xe3\x02\x03\x01\x00\x01\xa3\x82\x01\x49\x30\x82\x01\x45\x30\x12\x06 \
\x03\x55\x1d\x13\x01\x01\xff\x04\x08\x30\x06\x01\x01\xff\x02\x01\x00\x30\x0e\x06\x03\x \
55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x01\x86\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30 \
\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x \
30\x34\x06\x08\x2b\x06\x01\x05\x05\x07\x01\x01\x04\x28\x30\x26\x30\x24\x06\x08\x2b\x06 \
\x01\x05\x05\x07\x30\x01\x86\x18\x68\x74\x74\x70\x3a\x2f\x2f\x6f\x63\x73\x70\x2e\x64\x \
69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x30\x4b\x06\x03\x55\x1d\x1f\x04\x44\x30\x42 \
\x30\x40\xa0\x3e\xa0\x3c\x86\x3a\x68\x74\x74\x70\x3a\x2f\x2f\x63\x72\x6c\x34\x2e\x64\x \
69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x2f\x44\x69\x67\x69\x43\x65\x72\x74\x48\x69 \
\x67\x68\x41\x73\x73\x75\x72\x61\x6e\x63\x65\x45\x56\x52\x6f\x6f\x74\x43\x41\x2e\x63\x \
72\x6c\x30\x3d\x06\x03\x55\x1d\x20\x04\x36\x30\x34\x30\x32\x06\x04\x55\x1d\x20\x00\x30 \
\x2a\x30\x28\x06\x08\x2b\x06\x01\x05\x05\x07\x02\x01\x16\x1c\x68\x74\x74\x70\x73\x3a\x \
2f\x2f\x77\x77\x77\x2e\x64\x69\x67\x69\x63\x65\x72\x74\x2e\x63\x6f\x6d\x2f\x43\x50\x53 \
\x30\x1d\x06\x03\x55\x1d\x0e\x04\x16\x04\x14\x51\x68\xff\x90\xaf\x02\x07\x75\x3c\xcc\x \
d9\x65\x64\x62\xa2\x12\xb8\x59\x72\x3b\x30\x1f\x06\x03\x55\x1d\x23\x04\x18\x30\x16\x80 \
\x14\xb1\x3e\xc3\x69\x03\xf8\xbf\x47\x01\xd4\x98\x26\x1a\x08\x02\xef\x63\x64\x2b\xc3\x \
30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x82\x01\x01\x00\x18\x8a \
\x95\x89\x03\xe6\x6d\xdf\x5c\xfc\x1d\x68\xea\x4a\x8f\x83\xd6\x51\x2f\x8d\x6b\x44\x16\x \
9e\xac\x63\xf5\xd2\x6e\x6c\x84\x99\x8b\xaa\x81\x71\x84\x5b\xed\x34\x4e\xb0\xb7\x79\x92 \
\x29\xcc\x2d\x80\x6a\xf0\x8e\x20\xe1\x79\xa4\xfe\x03\x47\x13\xea\xf5\x86\xca\x59\x71\x \
7d\xf4\x04\x96\x6b\xd3\x59\x58\x3d\xfe\xd3\x31\x25\x5c\x18\x38\x84\xa3\xe6\x9f\x82\xfd \
\x8c\x5b\x98\x31\x4e\xcd\x78\x9e\x1a\xfd\x85\xcb\x49\xaa\xf2\x27\x8b\x99\x72\xfc\x3e\x \
aa\xd5\x41\x0b\xda\xd5\x36\xa1\xbf\x1c\x6e\x47\x49\x7f\x5e\xd9\x48\x7c\x03\xd9\xfd\x8b \
\x49\xa0\x98\x26\x42\x40\xeb\xd6\x92\x11\xa4\x64\x0a\x57\x54\xc4\xf5\x1d\xd6\x02\x5e\x \
6b\xac\xee\xc4\x80\x9a\x12\x72\xfa\x56\x93\xd7\xff\xbf\x30\x85\x06\x30\xbf\x0b\x7f\x4e \
\xff\x57\x05\x9d\x24\xed\x85\xc3\x2b\xfb\xa6\x75\xa8\xac\x2d\x16\xef\x7d\x79\x27\xb2\x \
eb\xc2\x9d\x0b\x07\xea\xaa\x85\xd3\x01\xa3\x20\x28\x41\x59\x43\x28\xd2\x81\xe3\xaa\xf6 \
\xec\x7b\x3b\x77\xb6\x40\x62\x80\x05\x41\x45\x01\xef\x17\x06\x3e\xde\xc0\x33\x9b\x67\x \
d3\x61\x2e\x72\x87\xe4\x69\xfc\x12\x00\x57\x40\x1e\x70\xf5\x1e\xc9\xb4\x16\x03\x03\x00\x04\x0e\x00\x00\x00')


# Client Key Exchange, Change Cipher Spec, and Encrypted Handshake Message
action do_c_key_exchange:
  client io.puts('\x16\x03\x03\x02\x06\x10\x00\x02\x02\x02\x00\x18\x95\xd1\x32\x1e\x90 \
\x0d\xa6\x72\xf2\xb4\xe7\x0d\x55\x1b\x6e\x4a\xf3\x8d\xf2\x5a\xbb\x25\x19\x18\x69\x95\x \
97\x09\x74\x5f\x72\xbd\x41\x01\x49\x9f\xae\x7e\xda\xec\x33\xaa\x91\x59\x4d\x44\x8f\x86 \
\x46\xdc\x53\xda\x83\xf9\x97\xa1\xde\x91\x01\xbc\x10\x8f\x86\x1a\x2a\x58\x78\x0a\xb8\x \
6f\x30\x27\x30\xc5\xbc\x1a\xed\xe5\x4b\xfb\xbc\x04\x31\xbb\x0c\x57\xb5\xce\x7d\x04\xeb \
\xf7\x69\x53\xfd\x55\xfa\x4d\x9f\x3d\x17\x07\xd4\x22\xba\x64\xed\x5a\x73\x8d\xdf\x62\x \
d8\xf5\xe0\x34\x06\x89\xc6\x7b\x39\x96\x4e\x6c\xb8\x1c\x08\x65\xa8\xbb\xfe\x54\x86\xbf \
\x55\x99\x66\x46\xfa\x1d\x99\xd1\xf3\xaa\x3f\x44\x82\xcc\x9a\x6d\x6f\x6d\xcd\x6f\xa7\x \
de\xdb\x48\xbd\x2e\xdb\xa1\xe4\x03\x9a\x94\xe2\xcf\x20\x2c\xba\xa0\x1b\x31\xfe\x53\x17 \
\x46\xf6\xca\xcd\xa1\x08\x5e\x72\x13\x07\x5d\x69\xb4\xa6\x41\x36\xb1\xbf\xa9\xf6\xf9\x \
c1\x8d\xa7\x6f\x72\x94\x12\x92\x57\x9b\x5b\x1e\x7d\x4c\x8a\xfa\x2c\x2e\x83\xb6\xdd\xf5 \
\xcb\x4c\xfd\x78\x6b\xe7\x17\xfd\x3c\x77\xc6\x80\x16\x43\xce\xef\x95\x09\xca\x00\x21\x \
3c\xc4\x5d\xa7\x76\xee\x91\x5b\xea\xfa\xee\xd1\xab\x4d\x97\x99\xeb\xc4\x5d\x1b\x51\x98 \
\xcd\x3a\x8e\xf6\x68\xf5\x5a\x5b\x46\xc3\x3c\x53\x4a\x97\xa3\x64\x4a\x5a\xd1\x5d\x33\x \
37\xec\x4e\x56\xad\x83\x8b\x69\x8e\xb7\xb3\xbe\x81\x0f\x1b\xad\xd9\x3b\x82\x35\xf0\x3e \
\x02\x28\x14\xb9\xdc\xab\xa0\x76\x12\x75\x1e\x84\xf0\x92\xc0\xbb\xc6\x08\xe3\x8e\x9d\x \
3f\xd9\x8d\x70\x53\x7c\xab\xe8\xd3\x5c\xd3\xf6\xb9\x01\x66\x62\x11\x0d\xa6\xa2\xbc\x17 \
\x6b\x07\xa5\x4c\x49\x3c\x9b\x1d\xb1\x48\xd6\xb7\xaf\xef\x5b\xec\xb3\xf8\xba\x9d\xa9\x \
b6\xaa\x1b\x16\xa6\x82\xc8\xda\x83\x63\x34\x7c\x2e\x21\xf0\xbf\x9e\xb4\x28\xdc\x7c\xa4 \
\x76\x69\x3d\x1e\x0e\x05\x1a\xe5\x04\xf0\xe5\xd9\xde\x14\xe0\xd0\xe6\xae\xee\x60\x6e\x \
52\xe5\x3a\x5f\x7c\xd5\xca\x2e\xb8\x01\x4f\x58\xa1\xee\xb7\x22\x68\xa6\x92\x71\x8c\xe0 \
\x11\xdb\xee\x3b\x0c\xce\xc6\x84\x5a\x3d\xf3\xce\x63\x2a\x98\x8a\x81\xbe\xeb\xf7\x74\x \
a4\x68\xd3\xed\x31\x82\xa7\xef\x75\x3b\x37\xba\x45\x15\x12\x8c\xfe\xfb\xc4\x9e\x45\xbc \
\x3a\x43\x40\x9c\xfe\xa4\x27\xd0\xd0\xab\xb3\x8a\x4d\x83\x45\x9c\xf1\xec\x1c\xd9\xc3\x \
f3\x3e\x33\xc6\x2f\x4f\x81\x06\xe5\xdc\xe0\xd5\x14\x03\x03\x00\x01\x01\x16\x03\x03\x00 \
\x40\x40\x47\x40\x39\x48\x8b\xe0\x51\xf0\x7a\xda\x3f\x1a\xb9\xc8\x1b\xa2\xb2\x3d\x44\x \
9a\xc1\x8e\x49\xb5\x47\x09\x5e\x87\x3c\xc6\x67\xe8\xe0\x82\xa9\xdd\x30\x21\x65\x9b\x03 \
\xd9\x72\xfb\x9b\x4c\x10\xa9\xdc\xea\x0b\xb0\xde\x7b\x49\x78\xc7\xf5\x38\x5b\x1b\x4d\xc8')


# Server Change Cipher Spec, and Encrypted Handshake Message
action do_s_change_cipher_spec:
  server io.puts('\x14\x03\x03\x00\x01\x01\x16\x03\x03\x00\x40\xf6\x53\x99\x89\xdf\x44 \
\xa1\x28\x5a\xc5\x85\xd3\x60\x09\xc6\x99\xe2\x9a\x3a\xea\x9f\xcb\xb2\x5d\x89\x40\x21\x \
cc\xf0\x9f\xcb\x1f\x01\x93\x66\x88\xb9\xd4\x56\xf0\xf0\x0f\x14\xcf\x19\x34\x13\xc7\xf5\x0a\xb2\x10\x42\x9c\x19\x2a\x56\x7b\x9c\xd3\x85\x71\x7d\x23')


# Client Application Data - \x01\xbe is the length of the "TLS encrypted" data in hex
action do_c_app_data:
  client fte.send("^\x17\x03\x03\x01\xbe.*$", 426)

# Server Application Data - \x01\xbe is the length of the "TLS encrypted" data in hex
action do_s_app_data:
  server fte.send("^\x17\x03\x03\x01\xbe.*$", 426)
```

This protocol simulates a secure web connection with encryption handshake and \
certificate exchange.  To simulate the secure handshake, a set of transitions leads \
the activity that statically describe the exchange are first executed.  These contain \
data strings which encode certificates, handshaking protocols and other activities.  \
This information has been scraped from actual https sessions, and therefore, can be \
used to great effect.  

The following sets of transitions from the `cstart` state simulate sets of secure \
packets being transferred back and forth.  Each has a different length, thereby \
allowing simulation of connections where different numbers of a packets are possible. \
By using sequences of fixed numbers of packets, the probabilities of transition from \
the `cstart` state determine the frequency of these packet sets.  This allows the \
protocol to take on the traffic patters of actually observed web browsing.

#### Summary

* Sophisticated protocol behaviour, such as key exchange, can be simulated through \
the use of fixed strings based on data scraped from actual packet capture and the use \
                of the `io.puts` command.
* Other traffic patterns, such as the number of packets per connection, can be \
simulated through probabilistic transitions, using probabilites derived from actual \
                packet capture.
* Large .mar files should not be feared.  They are the best way to model real-world \
behavior. 

### SubModel (web\_sess443) Protocol

#### web\_sess443 Protocol

This is our most sophisticated protocol and is an excellent example of traffic \
manipulation to appear as if a person is actually using an application.  It simulates \
secure web browsing of amazon.com with actual certificates, appropriate time delays \
between accesses to simulate human interaction and sub-models for each web browser \
connection.

```
connection(tcp, 110):
  start do33 NULL 0.35
  do33 do33x2 sess33 1.0
  do33x2 end sleep33 1.0
  start do34 NULL 0.15
  do34 do34x2 sess34 1.0
  do34x2 end sleep34 1.0
  start do35 NULL 0.15
  do35 do35x2 sess35 1.0
  do35x2 end sleep35 1.0
  start do37 NULL 0.15
  do37 do37x2 sess37 1.0
  do37x2 end sleep37 1.0
  start do39 NULL 0.20
  do39 do39x2 sess39 1.0
  do39x2 end sleep39 1.0

action sess33:
  client model.spawn("web_conn443", 33)
  server model.spawn("web_conn443", 33)

action sess34:
  client model.spawn("web_conn443", 34)
  server model.spawn("web_conn443", 34)

action sess35:
  client model.spawn("web_conn443", 35)
  server model.spawn("web_conn443", 35)

action sess37:
  client model.spawn("web_conn443", 37)
  server model.spawn("web_conn443", 37)

action sess39:
  client model.spawn("web_conn443", 39)
  server model.spawn("web_conn443", 39)

action sleep33:
  server model.sleep("{'5.0' : 1.0}")

action sleep34: 
  server model.sleep("{'4.0' : 1.0}")

action sleep35: 
  server model.sleep("{'3.0' : 1.0}")

action sleep37: 
  server model.sleep("{'2.0' : 1.0}")

action sleep39: 
  server model.sleep("{'1.0' : 1.0}")
``` 

This model is demonstrates two behaviors that make it appear to be a standard web \
browsing session.  The statistics are captured from actual recorded web behavior.

#### Model.spawn

The command `model.spawn` instantiates a protocol model as a submodel of the current \
protocol.  This command has two arguments.  First, the model of the protocol that is \
to be used, which is `web_connn443` in this case.  The second argument is the number \
of times that the model will perform its `start` to `end` loop before returning.  \
This allows the protocols to be specified hierarchically.

Note, that the model needs to be identically spawned for both the client and server \
sides.  This is not done automatically as in the case of `fte.send`.  

#### Sleep

The command `sleep` instantiates a period of time when the protocol is inactive.  \
This command is extremely useful for shaping the appearance of web traffic.  Human \
interaction, if it is being simulated, is considerably slower than automated systems. \
Shaping of such web traffic requires delays to be injected into the protocol.  The \
sleep command takes an array of numerical pairs as an argument.  Each numerical pair \
represents the sleep time in seconds and the probability that the time will be \
utilized.

#### Summary

Although in the `web_conn443` protocol we saw that the size of the file was not truly \
relevant, by using hierarchical models, we can make protocols far more manageable.

Sleep is an important command for use with systems that have human interaction.  Use \
it.


[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180904195456</emailId><senderName>Dave Rolek</senderName><senderEmail>dmr-x@riseup.net</senderEmail><timestampReceived>2018-09-04 19:54:56-0400</timestampReceived><subject>Re: [tor-dev] PDF versions of Marionette Documents</subject><body>

On 2018-09-04 09:14, Nathaniel Suchy wrote:
&gt; I get a 404 when clicking your GitHub link.
&gt; 
&gt; On Tue, Sep 4, 2018 at 10:52 AM John Helmsen
&gt; &lt;john.helmsen@redjack.com&gt; wrote:
&gt; 
&gt;&gt; [...] https://github.com/redjack/marionette/doc

Just slightly different:
https://github.com/redjack/marionette/tree/master/doc

Best,
Dave
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180911114711</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-09-11 11:47:11-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 7.0-1.18.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

Onionoo's protocol was extended and has a major version bump to 7.0.

Download available at:
     https://dist.torproject.org/onionoo/7.0-1.18.1/

Protocol changes (also summarized in [0]):

Extended the "version" parameter to support lists and ranges
Removed redundant "1_week" and "1_month" graphs from clients documents
Changed "3_months" graphs to "6_months" graphs in all documents
containing history objects
Removed the "fingerprint" parameter
Removed the previously deprecated "as_number" field from details documents

Software changes are summarized in the changelog [1].

The changes are already deployed on all onionoo.torproject.org instances.

Note that the 7.0-1.18.0 release suffered from a bug that did not
surface until deployment and the deployment was rolled back until the
7.0-1.18.1 release could be made. This issue only affected the web
server, not the updater or state files.

Please direct comments and questions to the metrics-team mailing list [2].

Thanks,
Iain -- on behalf of the Metrics Team.

[0] https://metrics.torproject.org/onionoo.html#versions_6_1
[1]
https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?h=onionoo-6.2-1.16.0
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180914063908</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-09-14 06:39:08-0400</timestampReceived><subject>Re: [tor-dev] Upcoming changes to CSV files provided by Tor Metrics</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello again,

this is a quick reminder about changes to CSV files provided by Tor Metrics.

On 2018-07-31 16:50, Karsten Loesing wrote:
&gt; Hello tor-dev@,
&gt; 
&gt; today we finally published specifications [0] for the per-graph CSV
&gt; files that we added to Tor Metrics earlier this year.
&gt; 
&gt; At the same time we're announcing two upcoming changes to CSV files
&gt; provided by Tor Metrics:
&gt; 
&gt;  - August 15: We're going to make the first batch of changes to
&gt; per-graph CSV files marked as "Suggested change" on the linked page. If
&gt; you're currently working with per-graph CSV files, you should watch out
&gt; for those changes. We're tracking these changes on #26998 [1].

These changes have been made and deployed last month.

&gt;  - September 15: We're going to remove pre-aggregated CSV files after
&gt; providing working alternatives with the per-graph CSV files for all use
&gt; cases we thought of or that were brought to our attention. If you're
&gt; currently working with pre-aggregated CSV files, you should consider
&gt; switching after August 15 but before September 15. The relevant ticket
&gt; for this change is #27000 [2].

I'm planning to make this change either over the weekend or on Monday.

&gt; Please direct any questions or comments to the metrics-team@ mailing
&gt; list [3] or comment on either of the two tickets mentioned above.

This is still possible.

&gt; All the best,
&gt; Karsten
&gt; 
&gt;  [0] https://metrics.torproject.org/stats.html
&gt;  [1] https://bugs.torproject.org/26998
&gt;  [2] https://bugs.torproject.org/27000
&gt;  [3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180917015211</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-09-17 01:52:11-0400</timestampReceived><subject>[tor-dev] Tor master exits with a required protocol error</subject><body>

[Attachment #2 (multipart/signed)]


(CC'd tor-relays, please direct replies to tor-dev.)

Hi,

If you are running Tor master, your Tor may exit with a required
protocol error.

The issue was introduced in commit 991bec67ee (about 8 hours ago).

The following conditions will make Tor exit:
* Tor will exit on startup if it has a cached consensus from the 14th
  of September (or earlier). It does not matter how old the consensus
  is.
* If certain directory authorities go down, the remaining authorities
  may generate a consensus that will cause your Tor to exit.

These consensuses require the LinkAuth=1 protocol, which Tor master
believes it does not support. (The change was intended for NSS Tors,
but mistakenly applies to all Tors.)

Here's how you can mitigate this issue:
* downgrade to 0.3.4.8 or earlier, or
* delete the cached consensuses in your data directory. These
  consensuses may be called cached-consensus,
  cached-microdesc-consensus, unverified-consensus, and
  unverified-microdesc-consensus. Some may not be present.

We should resolve this issue in master in the next 24 hours. Then it
may take another 24 hours for packages to be rebuilt.

The master ticket for this change is:
https://trac.torproject.org/projects/tor/ticket/27288

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlufCMsACgkQEP6qDnB1
ZypCiA//c9qUi3rsLcZT9izQlFuMpgvBTXdjbuJKmmReYcbVHHor2/beeXI5NTe+
Fg++csp9yl2arnD+UjvLakbONjopYwktLwuFZtYimQJPDNBFNOD9sFF12t85L9QE
QS7FlHkCHqrOjI0r/LFv3gHPwnjvI+bNCZP9Tp1qjOtmi6z2yxyMvPnGTulGfxrz
fr4q2d3LPdmflF0dQuBMmNhzuB3i0/zfgIkfjGKaj1ElcYdNSG4WApa9fRPBgUwe
KRMVOGxbrf6N+pXxneKllNS/ZhaXb7JJmwjWz1oLfhfgU0BjUfKmjZb8EFf17ByI
HyOeVrteJcVnM4x1Zd3G4rCVPWxdn15KrbHj603JpBwRgiV2AVbOURneRjkgKr9V
b7tsZ9NsnQuCONjwtbUD1iv5itdVxidOSbf8KirgPeG7UMAin68EhjlxtF/Aqej5
x+gGKK47rx4KCaf45XsFq0DezGta27pmJbwv8aOFYbRrh4Zme4NORnNXzzgrgg7l
O/GzV4VD6zTxQkxB1xmGOLXOcj6Sknr6UfH+Rf8FoGLbT5H1FZfu+sM8NRicvmpm
fyQEv5EBi4KAOF79biOt4x7QV1W0hYo8ns34QqeDUzyx0NOQ+p6JkJmWW2GJD6VU
4D2hnJs/51cvbwxK3mTL4fzs8rT5AgGUWfgVe9KAAY8kjZjqtJ0=
=FdCK
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180917180531</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-09-17 18:05:31-0400</timestampReceived><subject>Re: [tor-dev] State of the HA proxy onion patch</subject><body>

Mahrud S &lt;dinovirus@gmail.com&gt; writes:

&gt; Hi George,
&gt;
&gt; I think it looks good. Only comment I have is that it would be nice to have
&gt; an option to change the ipv6 subset, though I imagine people who would use
&gt; it can easily recompile with their own setting.
&gt;

Agreed.

IMO we should open a ticket about making the subnet configurable, and handle that in the future.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180918085850</emailId><senderName>Fernando Fernandez Mancera</senderName><senderEmail>ffmancera@riseup.net</senderEmail><timestampReceived>2018-09-18 08:58:50-0400</timestampReceived><subject>[tor-dev] Back to the action!</subject><body>

Greetings!

I have been out this summer but I am back and I want to continue 
contributing. Starting next week I will attend the network-team meetings 
if you don't mind.

If there is any task you could think it fits with my experience, please 
let me know. If there isn't, I am going to search in the ticket list. I 
am preparing my environment right now, and by tomorrow I will be ready 
to work!

Thank you and see you soon at #tor-dev,
ffmancera.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180921125633</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-09-21 12:56:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 20/09/18 17:03, Ian Goldberg wrote:
&gt; To be clear, the place this is used in otr is exactly to build the
&gt; released *source tarball* from git, so that even the source tarball is
&gt; reproducible.  The binary package builders then build (reproducible)
&gt; binaries from the reproducible source tarball.

I guess this is less bad. Still it is nice to have a backup mechanism in
place to allow for things to work when git isn't around.

I notice that tor's changelogs do have dates. Can we reliably parse that
out and set it to midnight or midday or whatever for time if git
information isn't around (which would likely be the case when you're
looking at a release not in between releases where the date might still
be ??)?

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180921162000</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-09-21 16:20:00-0400</timestampReceived><subject>[tor-dev] Strong Flow Correlation Attacks on Tor Using Deep Learning</subject><body>

Hi I wanted to bring your attention to this recent Tor attack paper
published at the CCS conference:

https://arxiv.org/pdf/1808.07285.pdf


&gt; We show that with moderate learning, DeepCorr can correlate Tor connections (and \
&gt; therefore break its anonymity) with accuracies significantly higher than existing \
&gt; algorithms, and using substantially shorter lengths of flow observations. For \
&gt; instance, by collecting only about 900 packets of each target Tor flow (roughly \
&gt; 900KB of Tor data), DeepCorr provides a flow correlation accuracy of 96% compared \
&gt; to 4% by the state-of-the-art system of RAPTOR using the same exact setting. 
&gt; We hope that our work demonstrates the escalating threat of flow correlation \
&gt; attacks on Tor given recent advances in learning algorithms, calling for the timely \
&gt; deployment of effective countermeasures by the Tor community.


It has an extremely high true positive rate under real world conditions.
The two main suggested countermeasures are padding and AS-aware path
selection. I think you are working on the former but no practical
implementation of the latter is  ready?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180924121100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-09-24 12:11:00-0400</timestampReceived><subject>Re: [tor-dev] Memory usage on 0.3.4.8</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi r1610091651,

thanks for your report.

please add that information and your OS+version to
https://trac.torproject.org/projects/tor/ticket/27813



--=20
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180924235957</emailId><senderName>john loughlin</senderName><senderEmail>jloughlin@mykolab.ch</senderEmail><timestampReceived>2018-09-24 23:59:57-0400</timestampReceived><subject>[tor-dev] I</subject><body>



Sent from my iPhone b 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180925022358</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-09-25 02:23:58-0400</timestampReceived><subject>Re: [tor-dev] Domain Fronting, Meek, Cloudflare, and Encrypted SNI...</subject><body>

On Mon, Sep 24, 2018 at 01:46:10PM -0400, Nathaniel Suchy wrote:
&gt; What this means:
&gt; Effectively domain fronting works by sending a different SNI and host header.
&gt; CDN providers like Cloudflare started double checking to make governments
&gt; happy, scratch that line, I mean to protect their customers from fraud and
&gt; abuse. They seem to of backtracked now. Encrypted SNI means that a firewall or
&gt; coffee shop owner won't be able to use SNI to see the real origin of TLS
&gt; traffic.

What we would need in order for meek to used encrypted SNI would be
either:
 1) support for encrypted SNI in Go's crypto/tls package; or
 2) support for encrypted SNI in the Firefox that ships with Tor
    Browser, which meek-client could use through its TLS camouflage
    helper support.

IMO (2) is less desirable because I'd like to get rid of the TLS
camouflage helper support and replace it with a Go-level TLS camouflage
library: https://github.com/refraction-networking/utls. The TLS helper
works, but its complexity is a pain to deal with and leads to problems
like https://bugs.torproject.org/12774 https://bugs.torproject.org/25405.

Note, however, that a transport based on encrypted SNI doesn't have to
be meek per se. I use "meek" to refer to a specific combination of
domain fronting and a certain (fairly stupid and inefficient) HTTP/1.1
serialization of a bidirectional byte stream. It's conceptually
straightforward to simply replace the "domain fronting" part with an
"encrypted SNI" part. But it's possible to do better: if you're willing
to abandon HTTP/1.1 compatibility and require HTTP/2, you can use the
"server push" feature to implement a serialization that's much more
efficient than the current one in meek. It may even be better to start
over with a new codebase, it's not like meek's code is that large.

But tjr's point stands: I think it's best not to push anything like this
out until after encrypted SNI has seen some level of adoption by
browsers.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180926154353</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-09-26 15:43:53-0400</timestampReceived><subject>[tor-dev] [release] Tor Metrics Library 2.5.0 and Tor Metrics Website 1.2.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

we just released new versions of the Tor Metrics Library, metrics-lib
2.5.0, and Tor Metrics Website, metrics-web 1.2.0.

The primary reason for these new releases is that libraries contained in
the tarball match the ones needed to build current master.

Downloads are available at:

https://dist.torproject.org/metrics-lib/2.5.0/

https://dist.torproject.org/metrics-web/1.2.0/

Please direct comments and questions to the metrics-team mailing list:

https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team

All the best,
Karsten -- on behalf of the Metrics Team.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180905104509</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-09-05 10:45:09-0400</timestampReceived><subject>[tor-dev] State of the HA proxy onion patch</subject><body>

Hello Mahrud,

I wanted to ask if you've been using the #4700 branch and how is it going?

We've been planning to include #4700 in the upcoming 0.3.5 release if
possible, and we remember that you had some pending patches to it. Do
you think you can publish those somewhere if they are to be included upstream?

There are also some further mods that need to happen that I'm not sure
if you've performed in your local branch (torrc option &amp; restricting the
feature only to onion connections, as per #4700).

Let us know how it's working for you and whether you have any patches
that we should have in mind, so that we can see if we can fit it in the
035 release.

Thank you! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180919162033</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-09-19 16:20:33-0400</timestampReceived><subject>[tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

Filename: 297-safer-protover-shutdowns.txt
Title: Relaxing the protover-based shutdown rules
Author: Nick Mathewson
Created: 19-Sep-2018
Status: Open
Target: 0.3.5.x

1. Introduction

   In proposal 264 (now implemented) we introduced the subprotocol
   versioning mechanism to better handle forward-compatibility in
   the Tor network.  Included was a mechanism for safely disabling
   obsolete versions of Tor that no longer ran any supported
   protocols.  If a version of Tor receives a consensus that lists
   as "required" any protocol version that it cannot speak, Tor will
   not start--even if the consensus is in its cache.

   The intended use case for this is that once some protocol has
   been provided by all supported versions for a long time, the
   authorities can mark it as "required".  We had thought about the
   "adding a requirement" case mostly.

   This past weekend, though, we found an unwanted side-effect: it
   is hard to safely *un*-require a currently required protocol.

   Here's what happened:

      - Long ago, we created the LinkAuth=1 protocol, which required
        direct access to the ClientRandom and ServerRandom fields.
        (0.2.3.6-alpha)

      - Later, once we implemented Ed25519 identity keys, we added
        an improved LinkAuth=3 protocol, which uses the RFC5705 "key
        export" mechanism. (0.3.0.1-alpha)

      - When we added the subprotocols mechanism, we listed
        LinkAuth=1 as required. (backported to 0.2.9.x)

      - While porting Tor to NSS, we found that LinkAuth=1 couldn't
        be supported, because NSS wisely declines to expose the TLS
        fields it uses.  So we removed "LinkAuth=1" from the
        required list (backported to 0.3.2.x), and got a bunch of
        authorities to upgrade.

      - In 0.3.5.1-alpha, once enough authorities had upgraded, we
        removed "LinkAuth=1" from the supported subprotocols list
        when Tor is running with NSS. [*]

      - We found, however, that this change could cause a bug when
        Tor+NSS started with a cached consensus that was created before
        LinkAuth=1 was removed from the requirements.  Tor would
        decline to start, because the (old) consensus told it that
        LinkAuth=1 was required.

   This proposal discusses two alternatives for making it safe to
   remove required subprotocol versions in the future.


   [*] There was actually a bug here where OpenSSL removed LinkAuth=1
       too, but that's mostly beside the point for this timeline, other
       than the fact it would have made things waaay worse if people
       hadn't caught it.

2. Recommended change: consider the consensus date.

   I propose that when deciding whether to shut down because of
   subprotocol requirements, a Tor implementation should only shut
   down if the consensus is dated to some time after the
   implementation's release date.

   With this change, an old cached consensus cannot cause the
   implementation to shut down, but a newer one can.  This makes it
   safe to put out a release that does not support a formerly
   required protocol, so long as the authorities have upgraded to
   stop requiring that protocol.

   (It is safe to use the *scheduled* release date for the
   implementation, plus a few months -- just so long as we don't
   plan to start requiring a subprotocol that's not supported by the
   latest version of Tor.)

3. Not-recommended change: ignore the cached consensus.

   Was it a mistake to have Tor consider a cached consensus when
   deciding whether to shut down?

   The rationale for considering the cached consensus was that when
   a Tor implementation is obsolete, we don't want it hammering on
   the network, probing for new consensuses, and possibly
   reconnecting aggressively as its handshakes fail.  That still
   seems compelling to me, though it's possible that if we find some
   problem with the methodology from section 2 above, we'll need to
   find some other way to achieve this goal.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180924113953</emailId><senderName>r1610091651</senderName><senderEmail>r1610091651@telenet.be</senderEmail><timestampReceived>2018-09-24 11:39:53-0400</timestampReceived><subject>[tor-dev] Memory usage on 0.3.4.8</subject><body>

[Attachment #2 (multipart/related)]

[Attachment #4 (multipart/alternative)]


Hi devs

After upgrade from 3.3.7 -&gt; 3.4.8, I've noticed that memory usage is
erratic. Please consult the image below, showing memory available in green
and memory used in blue on a tor dedicate system.

[image: image.png]

The upgrade to 3.4.8 took place on Saturday in week 37. The connection
count / load was relativity stable:
[image: image.png]
(green inbound, blue outbound)
I was wondering if there were any changes from 3.3.7 to 3.4.8 which might
impact memory behaviour on a middle-relay.
I'm also wander what is the "source" of this usage?

Potentially relevant config entries (remainder is port/ip, accounting &amp;
exit(no)):
MaxConsensusAgeForDiffs 4 hours
DirCache 0
MaxMemInQueues 64 MB (but "defaulting" to 256mb now)

Thanks in advance
Seb

[Attachment #7 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi \
devs&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;After upgrade from 3.3.7 -&gt; 3.4.8, I've noticed that \
memory usage is erratic. Please consult the image below, showing memory available in \
green and memory used in blue on a tor dedicate \
system.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;img src="cid:ii_jmg72jf20" alt="image.png" \
width="480" height="130"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The upgrade to 3.4.8 \
took place on Saturday in week 37. The connection count / load was relativity \
stable:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;img src="cid:ii_jmg75lnt1" alt="image.png" width="480" \
height="130"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;(green inbound, blue outbound)&lt;/div&gt;&lt;div&gt;I was \
wondering if there were any changes from 3.3.7 to 3.4.8 which might impact memory \
behaviour on a middle-relay.&lt;/div&gt;&lt;div&gt;I'm also wander what is the \
"source" of this usage?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Potentially relevant \
config entries (remainder is port/ip, accounting &amp; \
exit(no)):&lt;/div&gt;&lt;div&gt;MaxConsensusAgeForDiffs 4 hours&lt;br&gt;&lt;/div&gt;&lt;div&gt;DirCache \
0&lt;br&gt;&lt;/div&gt;&lt;div&gt;MaxMemInQueues 64 MB (but "defaulting" to 256mb \
now)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks in \
advance&lt;/div&gt;&lt;div&gt;Seb&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


["image.png" (image/png)]
["image.png" (image/png)]
[Attachment #10 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180919234049</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-09-19 23:40:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

Hi,

This proposal seems good to me.

&gt; On 20 Sep 2018, at 02:20, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt;   I propose that when deciding whether to shut down because of
&gt;   subprotocol requirements, a Tor implementation should only shut
&gt;   down if the consensus is dated to some time after the
&gt;   implementation's release date.

How does an implementation discover its' release date?
Are we going to hard-code a date in the code?
If so, how are we going to remember to update that date?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180919235113</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-09-19 23:51:13-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

On Thu, Sep 20, 2018 at 09:40:49AM +1000, teor wrote:
&gt; Hi,
&gt; 
&gt; This proposal seems good to me.
&gt; 
&gt; &gt; On 20 Sep 2018, at 02:20, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt;   I propose that when deciding whether to shut down because of
&gt; &gt;   subprotocol requirements, a Tor implementation should only shut
&gt; &gt;   down if the consensus is dated to some time after the
&gt; &gt;   implementation's release date.
&gt; 
&gt; How does an implementation discover its' release date?
&gt; Are we going to hard-code a date in the code?
&gt; If so, how are we going to remember to update that date?

If you make it use, say, the timestamp on the tip git commit of the
source, then it's (a) automated, and (b) reproducible.  But that's more
of a build date than a release date, of course.  (That's what otr uses.)

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180920134723</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-09-20 13:47:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 20/09/18 00:51, Ian Goldberg wrote:
&gt; If you make it use, say, the timestamp on the tip git commit of the
&gt; source, then it's (a) automated, and (b) reproducible.  But that's more=

&gt; of a build date than a release date, of course.  (That's what otr uses.=
)

Please don't make your build system depend on git!

Distributions don't want to ship the entire project history with every
package release.

stem had been doing this and as a result the test suite had never been
run as part of the build process for the Debian package, which always
starts from a tarball with no VCS information. (This is now fixed in stem=
).

https://trac.torproject.org/projects/tor/ticket/26984

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180927172212</emailId><senderName>Adrien Luxey</senderName><senderEmail>adrien@luxeylab.net</senderEmail><timestampReceived>2018-09-27 17:22:12-0400</timestampReceived><subject>[tor-dev] Information on the handling of relays churn</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/alternative)]


Dear Tor developers,

As a PhD student in distributed systems, I am studying onion routing.

We would like to investigate an onion routing system that would run on
users devices, i.e. a lot of nodes with crappy bandwidth and
intermittent connection.
To compare against Tor, I have been looking for information about how
you currently handle the disconnection of relays, but I found no
"digest" on the Web. Your code seems to point to the direction of
core/or/circuit*, that I need to investigate further. I still would love
some first-hand high-level description from you guys.

I have the following questions:

  * When an OR disconnects while supporting active circuits, how is the
    failure detected?
  * How are the paths subsequently rebuilt?
  * To which extent would you say that Tor is resilient to churn? What
    would be the effects of a massive churn of relays? Where would be
    the bottleneck?

If you have any questions on my work, I will be pleased to answer
(though a little ashamed, because I know our system will never hold your
security properties so tight)!

With much respect for your work and philosophy,
Adrien Luxey


[Attachment #9 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    &lt;p&gt;Dear Tor developers,&lt;/p&gt;
    &lt;p&gt;As a PhD student in distributed systems, I am studying onion
      routing. &lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;We would like to investigate an onion routing system that would
      run on users devices, i.e. a lot of nodes with crappy bandwidth
      and intermittent connection.&lt;br&gt;
      To compare against Tor, I have been looking for information about
      how you currently handle the disconnection of relays, but I found
      no "digest" on the Web. Your code seems to point to the direction
      of core/or/circuit*, that I need to investigate further. I still
      would love some first-hand high-level description from you guys.&lt;/p&gt;
    &lt;p&gt;I have the following questions:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;When an OR disconnects while supporting active circuits, how
        is the failure detected?&lt;/li&gt;
      &lt;li&gt;How are the paths subsequently rebuilt? &lt;br&gt;
      &lt;/li&gt;
      &lt;li&gt;To which extent would you say that Tor is resilient to churn?
        What would be the effects of a massive churn of relays? Where
        would be the bottleneck? &lt;br&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;If you have any questions on my work, I will be pleased to answer
      (though a little ashamed, because I know our system will never
      hold your security properties so tight)!&lt;/p&gt;
    &lt;p&gt;With much respect for your work and philosophy,&lt;br&gt;
      Adrien Luxey&lt;br&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;

["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180927173038</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-09-27 17:30:38-0400</timestampReceived><subject>Re: [tor-dev] Information on the handling of relays churn</subject><body>

On Thu, Sep 27, 2018 at 08:21:06PM +0200, Adrien Luxey wrote:
&gt;   • To which extent would you say that Tor is resilient to churn? What would be
&gt;     the effects of a massive churn of relays? Where would be the bottleneck?

About churn specifically, the Sybil research of Winter, Ensafi, Loesing,
and Feamster has past measurements of churn rates, as well as source
code.

https://nymity.ch/sybilhunting/#Data
https://nymity.ch/sybilhunting/churn-values/
https://lists.torproject.org/pipermail/metrics-team/2016-February/000064.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180927184937</emailId><senderName></senderName><senderEmail>alex_y_xu</senderEmail><timestampReceived>2018-09-27 18:49:37-0400</timestampReceived><subject>Re: [tor-dev] Information on the handling of relays churn</subject><body>

Quoting Adrien Luxey (2018-09-27 18:21:06)
&gt; Dear Tor developers,
&gt; 
&gt; As a PhD student in distributed systems, I am studying onion routing.
&gt; 
&gt; We would like to investigate an onion routing system that would run on users
&gt; devices, i.e. a lot of nodes with crappy bandwidth and intermittent connection.
&gt; To compare against Tor, I have been looking for information about how you
&gt; currently handle the disconnection of relays, but I found no "digest" on the
&gt; Web. Your code seems to point to the direction of core/or/circuit*, that I need
&gt; to investigate further. I still would love some first-hand high-level
&gt; description from you guys.
&gt; 
&gt; I have the following questions:
&gt; 
&gt;   • When an OR disconnects while supporting active circuits, how is the failure
&gt;     detected?

If it shuts down properly, then it will send a DESTROY cell in both
directions notifying them that the circuit is now broken. Otherwise, Tor
relies on the operating system TCP timeout to tell it when the
connection has failed. Then, it generates DESTROY cells as needed to
propagate the error.

&gt;   • How are the paths subsequently rebuilt?

The same way they were built in the first place.

&gt;   • To which extent would you say that Tor is resilient to churn? What would be
&gt;     the effects of a massive churn of relays? Where would be the bottleneck?

It depends on what you mean by churn. If you just mean the relays
reboot, then that will cause circuits to fail frequently. If relays
frequently disappear though, that will make it difficult to measure
relay bandwidth (for proportioning network load) as well as maintain
guard persistence. These problems likely do not have any solution.

&gt; If you have any questions on my work, I will be pleased to answer (though a
&gt; little ashamed, because I know our system will never hold your security
&gt; properties so tight)!

Consider reading the Tor protocol specification:
https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt.

It seems that your idea can basically be summarized as "implement
circuit resumption". This is likely not inherently difficult to
implement, except for the problem of knowing when to expire old
sessions. If you just use the TCP rules, then you might as well just run
Tor over multipath TCP or QUIC or something.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180928023657</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-09-28 02:36:57-0400</timestampReceived><subject>Re: [tor-dev] Information on the handling of relays churn</subject><body>

On Thu, Sep 27, 2018 at 06:49:37PM +0000, alex_y_xu@yahoo.ca wrote:
&gt; It seems that your idea can basically be summarized as "implement
&gt; circuit resumption". This is likely not inherently difficult to
&gt; implement, except for the problem of knowing when to expire old
&gt; sessions. If you just use the TCP rules, then you might as well just run
&gt; Tor over multipath TCP or QUIC or something.

So long as the exit relay doesn't go down (because it has the TCP
connections between the Tor network and external destinations), circuit
resumption should be pretty easy -- you just stick a little header on
the front of cells that gives them counters (to put them into the right
order), and then put some ability to buffer and acknowledge and retry
on the endpoints. You could hack it together yourself (probably a bad
idea) or you could use one of these end-to-end reliability protocols
that people already work on.

And once you've done that, you're quite close to being able to do two
(or multiple) paths in parallel for a given circuit, which can get you
some really intriguing performance, robustness, and security properties:
https://www.freehaven.net/anonbib/#pets13-splitting

And once you've done *that*, you might as well swap out Tor's hacky
end-to-end flow control for something fancier, like as you say QUIC.

For way more in this area, check out
https://blog.torproject.org/tors-open-research-topics-2018-edition

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180920160340</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-09-20 16:03:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

On Thu, Sep 20, 2018 at 02:47:23PM +0100, Iain Learmonth wrote:
&gt; Hi,
&gt; 
&gt; On 20/09/18 00:51, Ian Goldberg wrote:
&gt; &gt; If you make it use, say, the timestamp on the tip git commit of the
&gt; &gt; source, then it's (a) automated, and (b) reproducible.  But that's more
&gt; &gt; of a build date than a release date, of course.  (That's what otr uses.)
&gt; 
&gt; Please don't make your build system depend on git!
&gt; 
&gt; Distributions don't want to ship the entire project history with every
&gt; package release.
&gt; 
&gt; stem had been doing this and as a result the test suite had never been
&gt; run as part of the build process for the Debian package, which always
&gt; starts from a tarball with no VCS information. (This is now fixed in stem).
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/26984

To be clear, the place this is used in otr is exactly to build the
released *source tarball* from git, so that even the source tarball is
reproducible.  The binary package builders then build (reproducible)
binaries from the reproducible source tarball.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180920161547</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-09-20 16:15:47-0400</timestampReceived><subject>Re: [tor-dev] Proposal 297: Relaxing the protover-based shutdown rules</subject><body>

On Wed, Sep 19, 2018 at 7:41 PM teor &lt;teor@riseup.net&gt; wrote:
&gt;
&gt; Hi,
&gt;
&gt; This proposal seems good to me.
&gt;
&gt; &gt; On 20 Sep 2018, at 02:20, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; &gt;
&gt; &gt;   I propose that when deciding whether to shut down because of
&gt; &gt;   subprotocol requirements, a Tor implementation should only shut
&gt; &gt;   down if the consensus is dated to some time after the
&gt; &gt;   implementation's release date.
&gt;
&gt; How does an implementation discover its' release date?
&gt; Are we going to hard-code a date in the code?
&gt; If so, how are we going to remember to update that date?

I suggest that when we start a new release series, we set the release
date to three months after the planned stable date for that series.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180905113828</emailId><senderName>Mahrud S</senderName><senderEmail>dinovirus@gmail.com</senderEmail><timestampReceived>2018-09-05 11:38:28-0400</timestampReceived><subject>Re: [tor-dev] State of the HA proxy onion patch</subject><body>

[Attachment #2 (multipart/alternative)]


Hi George,

I was trying to find a way to use the virtual port (i.e.
blahblah.onion:*port*) as dst_port, but I couldn't find a suitable in time.
For our purposes specifically, we only needed virtual port 443 for https,
so I hard-coded 443 in an almost identical branch on top of
0.3.5.0-alpha-dev here:
https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd

As far as I know we haven't run into any issues so I kept it minimal, but
the torrc option would be very much appreciated!

Thanks,
Mahrud

On Wed, Sep 5, 2018 at 5:45 AM George Kadianakis &lt;desnacked@riseup.net&gt;
wrote:

&gt; Hello Mahrud,
&gt;
&gt; I wanted to ask if you've been using the #4700 branch and how is it going?
&gt;
&gt; We've been planning to include #4700 in the upcoming 0.3.5 release if
&gt; possible, and we remember that you had some pending patches to it. Do
&gt; you think you can publish those somewhere if they are to be included
&gt; upstream?
&gt;
&gt; There are also some further mods that need to happen that I'm not sure
&gt; if you've performed in your local branch (torrc option &amp; restricting the
&gt; feature only to onion connections, as per #4700).
&gt;
&gt; Let us know how it's working for you and whether you have any patches
&gt; that we should have in mind, so that we can see if we can fit it in the
&gt; 035 release.
&gt;
&gt; Thank you! :)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;


-- 
mahrud &lt;algorithms.jux-foundation.org/~mahrud/blog&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi George,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I was trying to find a way to \
use the virtual port (i.e. blahblah.onion:*port*) as dst_port, but I couldn't \
find a suitable in time. For our purposes specifically, we only needed virtual port \
443 for https, so I hard-coded 443 in an almost identical branch on top of \
0.3.5.0-alpha-dev here: &lt;a \
href="https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd"&gt;h \
ttps://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As \
far as I know we haven't run into any issues so I kept it minimal, but the torrc \
option would be very much \
appreciated!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks,&lt;/div&gt;&lt;div&gt;Mahrud&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Wed, Sep 5, 2018 at 5:45 AM George Kadianakis \
&lt;&lt;a href="mailto:desnacked@riseup.net"&gt;desnacked@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hello Mahrud,&lt;br&gt; &lt;br&gt;
I wanted to ask if you've been using the #4700 branch and how is it going?&lt;br&gt;
&lt;br&gt;
We've been planning to include #4700 in the upcoming 0.3.5 release if&lt;br&gt;
possible, and we remember that you had some pending patches to it. Do&lt;br&gt;
you think you can publish those somewhere if they are to be included upstream?&lt;br&gt;
&lt;br&gt;
There are also some further mods that need to happen that I'm not sure&lt;br&gt;
if you've performed in your local branch (torrc option &amp; restricting the&lt;br&gt;
feature only to onion connections, as per #4700).&lt;br&gt;
&lt;br&gt;
Let us know how it's working for you and whether you have any patches&lt;br&gt;
that we should have in mind, so that we can see if we can fit it in the&lt;br&gt;
035 release.&lt;br&gt;
&lt;br&gt;
Thank you! :)&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;mahrud &lt;&lt;a \
href="http://algorithms.jux-foundation.org/~mahrud/blog" \
target="_blank"&gt;algorithms.jux-foundation.org/~mahrud/blog&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180915140739</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-09-15 14:07:39-0400</timestampReceived><subject>Re: [tor-dev] State of the HA proxy onion patch</subject><body>

Mahrud S &lt;dinovirus@gmail.com&gt; writes:

&gt; Hi George,
&gt;
&gt; I was trying to find a way to use the virtual port (i.e.
&gt; blahblah.onion:*port*) as dst_port, but I couldn't find a suitable in time.
&gt; For our purposes specifically, we only needed virtual port 443 for https,
&gt; so I hard-coded 443 in an almost identical branch on top of
&gt; 0.3.5.0-alpha-dev here:
&gt; https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd
&gt;
&gt; As far as I know we haven't run into any issues so I kept it minimal, but
&gt; the torrc option would be very much appreciated!
&gt;

Hey Mahrud,

we have a ready-to-merge version of #4700 ready.

Check: https://github.com/torproject/tor/pull/343
for the latest PR.

and https://trac.torproject.org/projects/tor/ticket/4700#comment:21
    https://github.com/torproject/tor/pull/327 (the old PR)
if you want to read the review comments and bugs.

Let us know if you have any questions or if you don't like something.

Thanks! :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180917172741</emailId><senderName>Mahrud S</senderName><senderEmail>dinovirus@gmail.com</senderEmail><timestampReceived>2018-09-17 17:27:41-0400</timestampReceived><subject>Re: [tor-dev] State of the HA proxy onion patch</subject><body>

[Attachment #2 (multipart/alternative)]


Hi George,

I think it looks good. Only comment I have is that it would be nice to have
an option to change the ipv6 subset, though I imagine people who would use
it can easily recompile with their own setting.

I'm also including Gabbi who is working on this now.

Best,
Mahrud

On Sat, Sep 15, 2018 at 10:07 AM George Kadianakis &lt;desnacked@riseup.net&gt;
wrote:

&gt; Mahrud S &lt;dinovirus@gmail.com&gt; writes:
&gt;
&gt; &gt; Hi George,
&gt; &gt;
&gt; &gt; I was trying to find a way to use the virtual port (i.e.
&gt; &gt; blahblah.onion:*port*) as dst_port, but I couldn't find a suitable in
&gt; time.
&gt; &gt; For our purposes specifically, we only needed virtual port 443 for https,
&gt; &gt; so I hard-coded 443 in an almost identical branch on top of
&gt; &gt; 0.3.5.0-alpha-dev here:
&gt; &gt;
&gt; https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd
&gt; &gt;
&gt; &gt; As far as I know we haven't run into any issues so I kept it minimal, but
&gt; &gt; the torrc option would be very much appreciated!
&gt; &gt;
&gt;
&gt; Hey Mahrud,
&gt;
&gt; we have a ready-to-merge version of #4700 ready.
&gt;
&gt; Check: https://github.com/torproject/tor/pull/343
&gt; for the latest PR.
&gt;
&gt; and https://trac.torproject.org/projects/tor/ticket/4700#comment:21
&gt;     https://github.com/torproject/tor/pull/327 (the old PR)
&gt; if you want to read the review comments and bugs.
&gt;
&gt; Let us know if you have any questions or if you don't like something.
&gt;
&gt; Thanks! :)
&gt;
&gt;

-- 
mahrud &lt;algorithms.jux-foundation.org/~mahrud/blog&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi George,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think it looks good. Only comment I \
have is that it would be nice to have an option to change the ipv6 subset, though I \
imagine people who would use it can easily recompile with their own \
setting.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm also including Gabbi who is working on this \
now.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;Mahrud&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Sat, Sep 15, 2018 at 10:07 AM George Kadianakis \
&lt;&lt;a href="mailto:desnacked@riseup.net"&gt;desnacked@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Mahrud S &lt;&lt;a \
href="mailto:dinovirus@gmail.com" target="_blank"&gt;dinovirus@gmail.com&lt;/a&gt;&gt; \
writes:&lt;br&gt; &lt;br&gt;
&gt; Hi George,&lt;br&gt;
&gt;&lt;br&gt;
&gt; I was trying to find a way to use the virtual port (i.e.&lt;br&gt;
&gt; blahblah.onion:*port*) as dst_port, but I couldn't find a suitable in \
time.&lt;br&gt; &gt; For our purposes specifically, we only needed virtual port 443 for \
https,&lt;br&gt; &gt; so I hard-coded 443 in an almost identical branch on top of&lt;br&gt;
&gt; 0.3.5.0-alpha-dev here:&lt;br&gt;
&gt; &lt;a href="https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd" \
rel="noreferrer" target="_blank"&gt;https://github.com/mahrud/tor/commit/a81eac6d0c0a35adc6036e736565f4a8e2f806fd&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&gt; As far as I know we haven't run into any issues so I kept it minimal, \
but&lt;br&gt; &gt; the torrc option would be very much appreciated!&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
Hey Mahrud,&lt;br&gt;
&lt;br&gt;
we have a ready-to-merge version of #4700 ready.&lt;br&gt;
&lt;br&gt;
Check: &lt;a href="https://github.com/torproject/tor/pull/343" rel="noreferrer" \
target="_blank"&gt;https://github.com/torproject/tor/pull/343&lt;/a&gt;&lt;br&gt; for the latest \
PR.&lt;br&gt; &lt;br&gt;
and &lt;a href="https://trac.torproject.org/projects/tor/ticket/4700#comment:21" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/4700#comment:21&lt;/a&gt;&lt;br&gt;
                
      &lt;a href="https://github.com/torproject/tor/pull/327" rel="noreferrer" \
target="_blank"&gt;https://github.com/torproject/tor/pull/327&lt;/a&gt; (the old PR)&lt;br&gt; if \
you want to read the review comments and bugs.&lt;br&gt; &lt;br&gt;
Let us know if you have any questions or if you don't like something.&lt;br&gt;
&lt;br&gt;
Thanks! :)&lt;br&gt;
&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;mahrud &lt;&lt;a \
href="http://algorithms.jux-foundation.org/~mahrud/blog" \
target="_blank"&gt;algorithms.jux-foundation.org/~mahrud/blog&lt;/a&gt;&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180927024515</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-09-27 02:45:15-0400</timestampReceived><subject>[tor-dev] txtorcon 18.1.0</subject><body>



-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.1.0. This adds or fixes the
following:

 * better error-reporting (include REASON and REMOTE_REASON if
   available) when circuit-builds fail (thanks David Stainton)
 * more-robust detection of "do we have Python3" (thanks Balint
   Reczey)
 * fix parsing of Unix-sockets for SOCKS
 * better handling of concurrent Web agent requests before SOCKS ports
   are known
 * allow fowarding to ip:port pairs for Onion services when using the
   "list of 2-tuples" method of specifying the remote vs local
   connections.

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.1.0
   https://github.com/meejah/txtorcon/releases/tag/v18.1.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.1.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.1.0.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
b61cf175a5f1d4092609caf05d178fcdcabf513928eec98d38125c501afea43c  \
dist/txtorcon-18.1.0.tar.gz \
98aba4a96c355c55ee5d8290b67a09380b02e1044fb2e76737f47f5a33659dce  \
dist/txtorcon-18.1.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlusMDQRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadz3wgAk+UbYuw0lIwEqQZbhQ6oTk0cTu5GrB5q
WkSbqPkj5Ph+y1iYMQoEgAZdD97zjpfGR+/JcyXbPyh4ZDcqkL8Hhay9yF2/PAkd
agu1LBuBjVXOFvcw3D8Xi91miFwjmMKznAuR1Jv9gp66emw3qbZRZE9g1S9o1lCX
3Cx6o3kLiq8h7UmOiqFfCFGjNBFsaiDqf35P7FH7Btg4FYIGtI5/uQ3qgDtyqlhD
YKA91KxZQoZFGiAhp5h84WXrvtuQ5tDjRNiIfh76xRFiFRnWe9ofELidKqEgnyzF
shBqdGpaIT0g0NTQRhCnzBM7m3u0RHxkRblJWBLa6t4KYNFTMJ8Pag==
=z+Lo
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180928015150</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-09-28 01:51:50-0400</timestampReceived><subject>Re: [tor-dev] Temporary hidden services</subject><body>


In this realm, perhaps https://github.com/warner/magic-wormhole could be
used to construct a solution?

Some person has to "initiate" the wormhole and pass the (short) code to
the other person -- this could be via some established channel, like
"over the phone" (the codes exchanged are only usable once)...

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180928101313</emailId><senderName>Adrien Luxey</senderName><senderEmail>adrien@luxeylab.net</senderEmail><timestampReceived>2018-09-28 10:13:13-0400</timestampReceived><subject>Re: [tor-dev] Information on the handling of relays churn</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Dear David,

Thanks for the information. I did skim through the first paper a while
back, but there is indeed more valuable info than meets the eye inside
these studies.

Thanks for your advice,
Adrien


On 27/09/2018 19:30, David Fifield wrote:
&gt; On Thu, Sep 27, 2018 at 08:21:06PM +0200, Adrien Luxey wrote:
&gt;&gt;   • To which extent would you say that Tor is resilient to churn? What would be
&gt;&gt;     the effects of a massive churn of relays? Where would be the bottleneck?
&gt; About churn specifically, the Sybil research of Winter, Ensafi, Loesing,
&gt; and Feamster has past measurements of churn rates, as well as source
&gt; code.
&gt;
&gt; https://nymity.ch/sybilhunting/#Data
&gt; https://nymity.ch/sybilhunting/churn-values/
&gt; https://lists.torproject.org/pipermail/metrics-team/2016-February/000064.html



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180803214159</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-08-03 21:41:59-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

[Attachment #2 (multipart/signed)]


Hi Yawning!

Yawning Angel:
&gt; On 08/02/2018 08:26 PM, Mike Perry wrote:
&gt; &gt; Should we consider recommending basket2 also?
&gt; 
&gt; No.
&gt; 
&gt; &gt; Is anyone running bridges with it? Probably not, I guess :/.
&gt; 
&gt; No one should be, it is incomplete, buggy, and needs a re-design.

Thanks for the heads up.
 
&gt; As a side note, I question the utility of a PT that has the AGPL3
&gt; network interaction requirement, though there is an exception for
&gt; bridges distributed via BridgeDB and those shipped with Tor Browser.

Would you recommend anything else other than obfs4 at this time, as per
that README_SECURITY doc?
(https://github.com/mikeperry-tor/vanguards/blob/master/README_SECURITY.md)


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180803234800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-08-03 23:48:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Relay Guide Disagreements</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Going forward I'd propose the following to minimize the fraction and overhead:
&gt; 
&gt; I assume you maintain:
&gt; /TorRelayGuide-ptbr
&gt; /TorRelayGuide/OpenBSD
&gt; /TorRelayGuide/NetBSD
&gt; /TorRelayGuide/DragonFlyBSD
&gt; 
&gt; 
&gt; I'll keep maintaining:
&gt; /TorRelayGuide
&gt; /TorRelayGuide/DebianUbuntu
&gt; /TorRelayGuide/CentOSRHEL
&gt; /TorRelayGuide/Fedora
&gt; /TorRelayGuide/FreeBSD
&gt; /TorRelayGuide/openSUSE
  /BSDUpdates (I might split that so we can assign that as easily as the rest)

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180806144641</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-08-06 14:46:41-0400</timestampReceived><subject>Re: [tor-dev] Reviewing Trac #18642 (Teach the OOM handler about the DNS cache)</subject><body>

neel@neelc.org writes:

&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; I have a patch for Bug #18642 (Teach the OOM handler about the DNS cache) which I \
&gt; would like reviewed. 
&gt; The URL is here: https://trac.torproject.org/projects/tor/ticket/18642 \
&gt; (https://trac.torproject.org/projects/tor/ticket/18642) 
&gt; Originally, dgoulet chose he would review, but after no response on the patch, he \
&gt; has emailed me that he's on vacation until the 16th of August, hence the reason why \
&gt; I'm emailing here. I am really keen on getting this patch in, and if there's any \
&gt; Tor developer here, could someone please review and merge it? 

Hey Neel!

Sorry about that! We are still working on our review-assignment workflow
so that kinda got stuck in the pipeline!

It has been defragged and I plan to assign it to someone-not-dgoulet today!

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180808102306</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-08 10:23:06-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 6.2-1.16.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

Onionoo's protocol was extended and has a minor version jump to 6.2.

Download available at:
     https://dist.torproject.org/onionoo/6.2-1.16.0/

Protocol changes (also summarized in [0]):

Added an "as" field to details document, deprecated the "as_number"
field, added an "as_name" parameter to search for relays by AS name, and
added support for comma-separated lists in the "as" and the "lookup"
parameters.

Software changes are summarized in the changelog [1].

The changes are already deployed on all onionoo.torproject.org instances.

Unfortunately there are two known bugs affecting this release that were
not fixed before deployment:

Timestamps in graph history documents are incorrectly formatted which is
currently breaking graphs in relay search. No data is lost and the
graphs will reappear once this is resolved. (See #27039 [2])

Reverse DNS names are still being looked up slowly and so are missing
for most relays. (See #27050 [3])

Please direct comments and questions to the metrics-team mailing list [4].

Thanks,
Iain -- on behalf of the Metrics Team.

[0] https://metrics.torproject.org/onionoo.html#versions_6_1
[1]
https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?h=onionoo-6.2-1.16.0
[2] https://bugs.torproject.org/27039
[3] https://bugs.torproject.org/27050
[4] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180808155000</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-08-08 15:50:00-0400</timestampReceived><subject>[tor-dev]  Tor Browser for arm64/v8 on RPi3</subject><body>

@intrigeri I'll post there. Thanks for the heads up.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180809103358</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-08-09 10:33:58-0400</timestampReceived><subject>Re: [tor-dev] [release] Onionoo 7.0 will be released after September 3, 2018</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-08-09 12:26, nusenu wrote:
&gt; Hello Karsten,

Hi nusenu,

&gt;&gt; yesterday we announced Onionoo protocol version 6.2 that we released a
&gt;&gt; few days before on August 3, 2018.
&gt;&gt;
&gt;&gt; One month later, after September 3, 2018, we're going to release Onionoo
&gt;&gt; protocol version 7.0
&gt; 
&gt; 
&gt; does this also mean that there will be no version between these two, to address
&gt; the regression in 6.2 (#27039) before September?

Ah, no, there will be another release to fix those bugs as soon as we're
certain that the fixes work.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180813135406</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-13 13:54:06-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 6.2-1.16.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

A patch release has been made for Onionoo to fix an error in the
serialization of history documents.

Download available at:
     https://dist.torproject.org/onionoo/6.2-1.16.1/

Software changes are summarized in the changelog [0].

The changes are already deployed on all onionoo.torproject.org instances.

In order to benefit from this fix immediately you may wish to follow the
advanced instructions listed below. If you do not do this, then after a
week you should find that the problem is resolved, it will just happen
more slowly as the documents are rewritten.

1. Checkout ​commit 18e5c04 in karsten's task-27039 branch

https://gitweb.torproject.org/user/karsten/onionoo.git/commit/?h=task-27039&amp;id=18e5c04b9cfc9ca4b08ab7509a756d7cca814ac7
 2. Run ant jar to build the jar file at
generated/dist/onionoo-6.2-1.16.0-dev.jar. (You will not need the war
file built.)
3. Upload this jar file along with the jar and war files for the
6.2-1.16.1 release.
4. Wait for hourly updater to end.
5. Stop hourly updater and the web server.
6. Run java -jar onionoo-6.2-1.16.0-dev.jar --rewrite-only.
7. Remove the intermediate jar file to avoid confusion.
8. Re-start the web server and the hourly updater using the files from
the 6.2-1.16.1 release.

Please direct comments and questions to the metrics-team mailing list [1].

Thanks,
Iain -- on behalf of the Metrics Team.

[0]
https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?h=onionoo-6.2-1.16.1
[1] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180814112508</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-08-14 11:25:08-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; George Kadianakis &lt;desnacked@riseup.net&gt; writes:
&gt;
&gt;&gt; Hello haxxpop and David,
&gt;&gt;
&gt;&gt; here is a patch with an alternative directory format for v3 client auth
&gt;&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;&gt;        https://github.com/torproject/torspec/pull/23
&gt;&gt;
&gt;&gt; Thanks for making me edit the spec because it made me think of various
&gt;&gt; details that had to be thought of.
&gt;
&gt; Hello again,
&gt;
&gt; there have been many discussions about client auth since that last email
&gt; a month ago. Here is a newer branch that we want to get merged so that
&gt; we proceed with implementation: https://github.com/torproject/torspec/pull/33
&gt;
&gt; The first commit is the same as in the original post, and all subsequent
&gt; commits are improvements on top of it.
&gt;
&gt; Here are a few high-level changes that were made after discussion:
&gt;
&gt; - Ditched intro auth for now, since descriptor auth is sufficient for
&gt;   our threat model, and trying to support two different auth types would
&gt;   complicate things.
&gt;
&gt; - Opted for a KISS design for now where we don't ask Tor to generate
&gt;   client auth keys neither on the client side or on the service side.
&gt;   For now we assume that client/service-side generated their keys with
&gt;   an external tool, and we will build such tools in the future, instead
&gt;   of spending too much time bikeshedding about it right now.
&gt;
&gt; - Client auth is enabled if the client auth directory is populated with
&gt;   the right files, instead of relying on torrc switches etc.
&gt;
&gt; Furthermore, the last three commits are quick mainly-cosmetic changes I
&gt; did alone before posting this here. Inform me if you don't like those.
&gt;
&gt; I'll let this simmer here for a few days before merging it in torspec.
&gt; Let me know if you have questions! Thanks for reading!
&gt;

FWIW, the above spec branch has been merged upstream to torspec.git!

Feedback is still welcome and we will patch upstream if needed! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180803221600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-08-03 22:16:00-0400</timestampReceived><subject>[tor-dev] Tor Relay Guide Disagreements</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Vinícius,

(moving this discussion to the tor-dev mailing list since this isn't limited to the \
OpenBSD ticket scope https://trac.torproject.org/projects/tor/ticket/26619#comment:14 \
)

Vinícius wrote:
&gt; you [nusenu] took over /FreeBSD, /BSDUpdates, and /OpenBSD and enabled the 'read-
&gt; only' mode all by yourself without even consulting the original author or
&gt; anyone else 
[...]
&gt; is there any particular reason why you enabled the read-only mode on
&gt; /FreeBSD, /BSDUpdates, and /OpenBSD? I think this a pretty odd behavior.
&gt; I'm sorry. if you do want to own all these pages (and many other more),
&gt; please tell us. 

The Tor Relay Guide wiki page [1] has been 'read-only' pretty much since we launched \
it, it has been decided a few months ago in [0]. Anyway read-only mode shouldn't \
affect you personally. Since you are listed on the tor people page  I assume you can \
simply ask for the permissions to edit 'read-only' pages.

I'd still ask you to open tickets for changes like your change to the FreeBSD page \
instead of applying them directly so we can discuss them before applying and to avoid \
the necessary efforts.


On 2018-07-10 I split out the OS specific instructions into their subpages:
/DebianUbuntu
/FreeBSD
...

because of this move content that was previously read-only until then became writable
but that wasn't an intentional step.

On 2018-08-02 you changed the FreeBSD page [4], here are two lines (examples) of your \
replacements:

my text:
change the nickname "myNiceRelay" to a name that you like
Change the email address bellow and be aware that it will be published

got replaced with:
CHANGE THE NICKNAME
WRITE YOUR EMAIL ADDRESS

I'm not sure I would consider these replacements an improvement since they remove
information without giving any reasoning for removing it in the comment.
Besides the removal of information this also introduces inconsistency in the 
torrc file we used so far in the guide.

I reverted your change and addressed the issue you brought up 
(net.inet.ip.random_id ordering, /etc/pkg/FreeBSD.conf modification)
and made the content read-only again (like it was until 2018-07-10).


&gt; ggus is that page's [/OpenBSD]  author and he allowed me to edit the contents of \
&gt; that page (the same is also applied to the /FreeBSD page; 

There has been no comment by ggus on #26619 (/OpenBSD) for a month so I went ahead \
and assigned it to me, but I'll pull out of that ticket now.
https://trac.torproject.org/projects/tor/ticket/26619
ggus didn't create /FreeBSD [3].


&gt; should we always open tickets with suggestions? - sadly it
&gt; also sounds extra odd, because when I did open tickets (#27006 and
&gt; #27007), a few minutes later you changed contents all by yourself 

#27006 is about /DragonFlyBSD
I've never touched that page?
https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DragonFlyBSD?action=history


#27007 was about creating /NetBSD - which you did.

I didn't consider my change - where I replaced the ORPort to use 443 (because
we used that port everytime that works out of the box on a platform) 
to be part of the "create the /NetBSD page":
https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/NetBSD?action=diff&amp;version=2



Going forward I'd propose the following to minimize the fraction and overhead:

I assume you maintain:
/TorRelayGuide-ptbr
/TorRelayGuide/OpenBSD
/TorRelayGuide/NetBSD
/TorRelayGuide/DragonFlyBSD


I'll keep maintaining:
/TorRelayGuide
/TorRelayGuide/DebianUbuntu
/TorRelayGuide/CentOSRHEL
/TorRelayGuide/Fedora
/TorRelayGuide/FreeBSD
/TorRelayGuide/openSUSE

All pages should be read-only and writable to authorized users/maintainer, 
but feel free to have the pages you maintain world writable.

All non-maintainer changes are expected to go through a ticket.
After a timeout of 7 days with no maintainer response the ticket opener might
proceed with applying the proposed change.
I'll propose a list of requirements for a platform to be listed on the main page.

kind regards,
nusenu

[0] https://trac.torproject.org/projects/tor/ticket/24497
[1] https://trac.torproject.org/projects/tor/wiki/TorRelayGuide
[2] https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/FreeBSD
[3] https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/FreeBSD?action=history
 [4] https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/FreeBSD?sfp_email=&amp;sfph_mail=&amp;action=diff&amp;version=2&amp;old_version=1



-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180801154144</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2018-08-01 15:41:44-0400</timestampReceived><subject>[tor-dev] Reviewing Trac #18642 (Teach the OOM handler about the DNS cache)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi tor-dev@ mailing list,

I have a patch for Bug #18642 (Teach the OOM handler about the DNS cache) which I \
would like reviewed.

The URL is here: https://trac.torproject.org/projects/tor/ticket/18642 \
(https://trac.torproject.org/projects/tor/ticket/18642)

Originally, dgoulet chose he would review, but after no response on the patch, he has \
emailed me that he's on vacation until the 16th of August, hence the reason why I'm \
emailing here. I am really keen on getting this patch in, and if there's any Tor \
developer here, could someone please review and merge it?

Thank You,

Neel Chauhan

===

https://www.neelc.org/


[Attachment #5 (text/html)]

&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt;&lt;div data-html-editor-font-wrapper="true" \
style="font-family: arial, sans-serif; font-size: 13px;"&gt;Hi tor-dev@ mailing \
list,&lt;br&gt;&lt;br&gt;I have a patch for Bug #18642 (Teach the OOM handler about the DNS \
cache) which I would like reviewed.&lt;br&gt;&lt;br&gt;The URL is here: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/18642"&gt;https://trac.torproject.org/projects/tor/ticket/18642&lt;/a&gt;&lt;br&gt;&lt;br&gt;Originally, \
dgoulet chose he would review, but after no response on the patch, he has emailed me \
that he's on vacation until the 16th of August, hence the reason why I'm emailing \
here. I am really keen on getting this patch in, and if there's any Tor developer \
here, could someone please review and merge it?&lt;br&gt;&lt;br&gt;Thank You,&lt;br&gt;&lt;br&gt;Neel \
Chauhan&lt;br&gt;&lt;br&gt;===&lt;br&gt;&lt;br&gt;https://www.neelc.org/&lt;br&gt;&lt;br&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180805164037</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-08-05 16:40:37-0400</timestampReceived><subject>[tor-dev] Tor Browser for arm64/v8 on RPi3</subject><body>

We at Whonix are currently porting to (non-VM) physical builds on arm64
- specifically RPi3. While this is great for headless applications we
are interested in GUI user adoption. Without Tor Browser for arm64 this
won't be as safe as it can be. Can you please consider releasing builds
for this hardware platform?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180806133628</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2018-08-06 13:36:28-0400</timestampReceived><subject>Re: [tor-dev] Tor Browser for arm64/v8 on RPi3</subject><body>

Hi,

procmem:
&gt; We at Whonix are currently porting to (non-VM) physical builds on arm64
&gt; - specifically RPi3. While this is great for headless applications we
&gt; are interested in GUI user adoption. Without Tor Browser for arm64 this
&gt; won't be as safe as it can be. Can you please consider releasing builds
&gt; for this hardware platform?

A few suggestions to improve the chances your proposal/request gets
some more traction:

 - describe the expected benefits for users

 - send this to tbb-dev:
   https://lists.torproject.org/cgi-bin/mailman/listinfo/tbb-dev

 - give it (building on arm64) a try so everybody can have an idea of
   how much work is required

 - look at the work done on Tor Browser for Android, that probably
   builds for some kind of ARM platform

:)

Cheers,
-- 
intrigeri
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180806015824</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-06 01:58:24-0400</timestampReceived><subject>Re: [tor-dev] Reviewing Trac #18642 (Teach the OOM handler about the DNS cache)</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 2 Aug 2018, at 01:41, neel@neelc.org wrote:
&gt; 
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; I have a patch for Bug #18642 (Teach the OOM handler about the DNS cache) which I \
&gt; would like reviewed. 
&gt; The URL is here: https://trac.torproject.org/projects/tor/ticket/18642
&gt; 
&gt; Originally, dgoulet chose he would review, but after no response on the patch, he \
&gt; has emailed me that he's on vacation until the 16th of August, hence the reason why \
&gt; I'm emailing here. I am really keen on getting this patch in, and if there's any \
&gt; Tor developer here, could someone please review and merge it?

I have removed dgoulet as the reviewer on the ticket.

Someone else will get assigned to review the ticket today,
and they will try to review it by the end of the week.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltnq0AACgkQEP6qDnB1
ZypuaA//QmK3mbbKeL9Gpg/k8wHlfl94DgrPD2mZeGd/uS9D1RhMoXFlNyCw54t5
06Avscr90ShPB1BFt2JDss9LwDkZkGrZRgy8bKs/9neNOMumcondMuCD7ykuJnSc
FThWbvZm8CBrlQFoj8ioZp+0DwHKWIX+112Cym1MpF4SX2iKdBdeqLgh1SjeZvOI
+0edcB10OirwQeJIA6AzrzvoYMKii8FAg/3G1deyLoaTA5o3v+NvgOax/nCjMI3L
T923JJyc5XEWHXmw0M4rz+3FzKrE4+NTcSURWYir6pxRiU1XjAXzXdXH1DIKvdAR
XRNx0oWCAHzun1zoQJtSf0EfEj58lD7lUl2LdJnfSVKCGUEXvAKE3t/rqbdVqSUd
p6NAYzQA/aFsMougut2gZSXfJI7XQ/C2yJOPwUUKSkl7z606blH1KJEtJmkO+sW7
AO8JFKGaFUXWnSmjuysNOvMVgE0AQN2qulpY65w3EP7FKCSzse0WsYI49TsPvNX0
O/Gf/n4X0vMX7cAWO9a7UL15C531ACty4JD0rAQHzdecqbYLPGbXoFyuJz24nW2x
BXmZU03RkMw55uOIUJKFtyYrESeWnXFwLoAH9YOWnxLnrgdwlOQcwlTr+lT7d5Pb
fDxUCqRwGIDnOO2HQkcbv1dQ+iVjfxFu1GNn2IZ0bhi6IxZcEa0=
=HFE9
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180809072806</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-08-09 07:28:06-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 7.0 will be released after September 3, 2018</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello tor-dev@,

yesterday we announced Onionoo protocol version 6.2 that we released a
few days before on August 3, 2018.

One month later, after September 3, 2018, we're going to release Onionoo
protocol version 7.0 which will make a couple backward-incompatible chang=
es:

 - extend the "version" parameter to support lists and ranges,
 - remove redundant "1_week" and "1_month" graphs from clients documents,=

 - change "3_months" graphs to "6_months" graphs in all documents
containing history objects,
 - remove the "fingerprint" parameter, and
 - remove the previously deprecated "as_number" field from details
documents.

You can find more details on the Onionoo protocol page:

https://metrics.torproject.org/onionoo.html

If you're using any of these fields or parameters, be sure to either
update your Onionoo client to support the new protocol version, or
pester your Onionoo client developer to do that for you.

On behalf of the Tor metrics team,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180809102600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-08-09 10:26:00-0400</timestampReceived><subject>Re: [tor-dev] [release] Onionoo 7.0 will be released after September 3, 2018</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello Karsten,

&gt; yesterday we announced Onionoo protocol version 6.2 that we released a
&gt; few days before on August 3, 2018.
&gt; 
&gt; One month later, after September 3, 2018, we're going to release Onionoo
&gt; protocol version 7.0


does this also mean that there will be no version between these two, to address
the regression in 6.2 (#27039) before September?


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180710185833</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-10 18:58:33-0400</timestampReceived><subject>[tor-dev] Alternative directory format for v3 client auth</subject><body>

Hello haxxpop and David,

here is a patch with an alternative directory format for v3 client auth
crypto key bookkeeping as discussed yesterday on IRC:
       https://github.com/torproject/torspec/pull/23

Thanks for making me edit the spec because it made me think of various
details that had to be thought of.

Let me know if you don't like it or if something is wrong.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180820165523</emailId><senderName>KUSHAL BORKAR</senderName><senderEmail>kushal.b15@iiits.in</senderEmail><timestampReceived>2018-08-20 16:55:23-0400</timestampReceived><subject>[tor-dev] Unable to access '#tor-dev' IRC Channel</subject><body>

[Attachment #2 (multipart/alternative)]


Greetings All,
                     This is to inform you that, I, Kushal Borkar, IRC
Alias 'Lashuk', am unable to access the '#tor-dev' IRC channel. I tried
using Pidgin Internet Messenger to properly connect to the channel but I
face the same problem: "Cannot join #tor-dev: Registration is required."
      I also checked whether I'm linked to the internet and also verified
by using the command "/msg NickServ IDENTIFY". I cannot access the
'#tor-dev' IRC channel on OFTC neither using my registered nick on desktop
client nor through the web interface. I also tried OFTC IRC Service to
check my Nickname which indicated me "An error occurred fetching the
nickname data. It may be private or there may be a problem with the server."
     I eagerly want to discuss the specific project "Ahmia - Onion Service
Search" and would like to know about the Outreachy Internship which starts
from December to March.
     I politely request you all help me and direct me in the right
direction in order to start thinking about what I could do for Tor.

With Regards,
*Kushal Borkar*



*B.Tech - 4th Year,Electronics and Communication Engineering,IIIT
Chittoor,Sri City-517588*
Email Id*: kushal.b15@iiits.in &lt;kushal.b15@iiits.in&gt;*

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Greetings All,&lt;/div&gt;&lt;div&gt;                                This is \
to inform you that, I, Kushal Borkar, IRC Alias 'Lashuk', am unable to access \
the '#tor-dev' IRC channel. I tried using Pidgin Internet Messenger to \
properly connect to the channel but I face the same problem: "Cannot join \
#tor-dev: Registration is required."&lt;/div&gt;&lt;div&gt;         I also checked whether \
I'm linked to the internet and also verified by using the command "/msg \
NickServ IDENTIFY". I cannot access the '#tor-dev' IRC channel on OFTC \
neither using my registered nick on desktop client nor through the web interface. I \
also tried OFTC IRC Service to check my Nickname which indicated me "An error \
occurred fetching the nickname data. It may be private or there may be a problem with \
the server."&lt;/div&gt;&lt;div&gt;        I eagerly want to discuss the specific project \
"Ahmia - Onion Service Search" and would like to know about the Outreachy \
Internship which starts from December to March.&lt;/div&gt;&lt;div&gt;        I politely request \
you all help me and direct me in the right direction in order to start thinking about \
what I could do for Tor.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;With Regards,&lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;table \
style="font-family:sans-serif;font-size:12.8px" cellspacing="0" \
cellpadding="0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td colspan="2"&gt;&lt;div \
style="padding-bottom:15px"&gt;&lt;div&gt;&lt;i&gt;&lt;font size="2" face="times new roman, \
serif"&gt;Kushal Borkar&lt;/font&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="border-top:2px solid \
gray;padding-top:3px;margin-top:3px"&gt;&lt;i&gt;&lt;font size="2" face="times new roman, \
serif"&gt;B.Tech - 4th Year,&lt;br&gt;Electronics and Communication Engineering,&lt;br&gt;IIIT \
Chittoor,&lt;br&gt;Sri City-517588&lt;/font&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td \
style="vertical-align:top"&gt;&lt;/td&gt;&lt;td&gt;&lt;div style="white-space:nowrap;border-left:2px \
solid gray;margin-left:20px;padding-left:20px"&gt;&lt;div&gt;&lt;font size="2" face="arial, \
helvetica, sans-serif"&gt;Email Id&lt;b&gt;:  &lt;a href="mailto:kushal.b15@iiits.in" \
style="color:rgb(17,85,204)"&gt;kushal.b15@iiits.in&lt;/a&gt;&lt;/b&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180821073600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-08-21 07:36:00-0400</timestampReceived><subject>[tor-dev] routing security handling in the tor network</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I looked at the routing security state
of the &gt;3k BGP prefixes that make up the tor network [1].

I believe it is important for tor to have a discussion on how
the network should deal with relays that will increasingly be only partially reachable
due to the increase of RPKI route origin validation (ROV) in big IXPs (AMS-IX to name one).

to quote the relevant part from [1]:
&gt; "Virtual" Route Origin Validation in the Tor Context
&gt; 
&gt; The are two good reasons why Tor should care about relays located in
&gt; RPKI ‘Invalid' prefixes:
&gt; 
&gt; It will eventually break the "the Tor network is a full mesh"
&gt; assumption. Relays in such RPKI ‘invalid' prefixes with no
&gt; alternative valid route will not be reachable from ASes performing
&gt; ROV, but the Tor network assumes that every relay can reach every
&gt; other relay. When ROV breaks that assumption it is better to exclude
&gt; these relays than to keep only partially reachable relays. An RPKI
&gt; ‘Invalid' route might as well be an actual BGP hijacking attempt and
&gt; why not stop that?
&gt; 
&gt; The obvious place to enforce ROV for the Tor network would be the Tor
&gt; directory authorities that would run RPKI validators and vote for
&gt; relays accordingly. At this point this is no more than an idea.

There are certainly some challenges and trade-offs when doing ROV from a
non-BGP-router perspective, but they are solvable.

There is no need to panic - this affects less than 5 relays currently but 
we should have a discussion and reach some form of consensus on the topic
to move forward instead of waiting until it significantly affects reachability.

Would be nice to have an initial discussion even before writing a proposal to
gather opinions if that would be actually worth doing.

kind regards,
nusenu

[1] https://medium.com/@nusenu/how-vulnerable-is-the-tor-network-to-bgp-hijacking-attacks-56d3b2ebfd92

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711131952</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-07-11 13:19:52-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 10/07/18 19:58, George Kadianakis wrote:
&gt; here is a patch with an alternative directory format for v3 client auth
&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;        https://github.com/torproject/torspec/pull/23
&gt; 
&gt; Thanks for making me edit the spec because it made me think of various
&gt; details that had to be thought of.
&gt; 
&gt; Let me know if you don't like it or if something is wrong.

Minor clarification: line 2298 says the keypair is stored, it might be
clearer to say the private key is stored.

Nitpick: should the directory be called "client_authorized_privkeys" if
it might contain private keys, public keys, or a mixture of the two?

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711132245</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-11 13:22:45-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; On 10/07/18 19:58, George Kadianakis wrote:
&gt;&gt; here is a patch with an alternative directory format for v3 client auth
&gt;&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;&gt;        https://github.com/torproject/torspec/pull/23
&gt;&gt; 
&gt;&gt; Thanks for making me edit the spec because it made me think of various
&gt;&gt; details that had to be thought of.
&gt;&gt; 
&gt;&gt; Let me know if you don't like it or if something is wrong.
&gt;
&gt; Minor clarification: line 2298 says the keypair is stored, it might be
&gt; clearer to say the private key is stored.
&gt;
&gt; Nitpick: should the directory be called "client_authorized_privkeys" if
&gt; it might contain private keys, public keys, or a mixture of the two?
&gt;

Good points in both cases. Will fix soon (along with other feedback if received).

Other than that, what do you think about the whole concept? Too complex?
Logical? Too much?

Cheers for the feedback! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180711142427</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2018-07-11 14:24:27-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 11/07/18 14:22, George Kadianakis wrote:
&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt; 
&gt;&gt; On 10/07/18 19:58, George Kadianakis wrote:
&gt;&gt;&gt; here is a patch with an alternative directory format for v3 client auth
&gt;&gt;&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;&gt;&gt;        https://github.com/torproject/torspec/pull/23
&gt;&gt;&gt;
&gt;&gt;&gt; Thanks for making me edit the spec because it made me think of various
&gt;&gt;&gt; details that had to be thought of.
&gt;&gt;&gt;
&gt;&gt;&gt; Let me know if you don't like it or if something is wrong.
&gt;&gt;
&gt;&gt; Minor clarification: line 2298 says the keypair is stored, it might be
&gt;&gt; clearer to say the private key is stored.
&gt;&gt;
&gt;&gt; Nitpick: should the directory be called "client_authorized_privkeys" if
&gt;&gt; it might contain private keys, public keys, or a mixture of the two?
&gt;&gt;
&gt; 
&gt; Good points in both cases. Will fix soon (along with other feedback if received).
&gt; 
&gt; Other than that, what do you think about the whole concept? Too complex?
&gt; Logical? Too much?
&gt; 
&gt; Cheers for the feedback! :)

Sorry for being late to the party - I just this morning finished reading
the thread from 2016 where the client auth design was hashed out. :-/

I think putting each client's keys in a separate file makes a lot of sense.

At a higher level there are some things I'm not sure about. Sorry if
this is threadjacking, but you said the magic words "whole concept". ;-)

First, Ed25519-based authentication ("intro auth"). Could this be punted
to the application layer, or is there a reason it has to happen at the
Tor layer?

Second, X25519-based authorization ("desc auth"). If I understand right,
using asymmetric keypairs here rather than symmetric keys makes it
possible for the client to generate a keypair and send the public key to
the service over an authenticated but not confidential channel. But the
client may not know how to do that, so we also need to support an
alternative workflow where the service generates the keypair and sends
the private key to the client over an authenticated and confidential
channel.

The upside of this design is the ability to use an authenticated but not
confidential channel (as long as the client and service understand which
workflow they need to use). The downside is extra complexity. I'm not
really convinced this is a good tradeoff. But I'm guessing this argument
has already been had, and my side lost. :-)

Third, what's the purpose of the fake auth-client lines for a service
that doesn't use client auth? I understand that when a service does use
client auth, it may not want clients (or anyone else who knows the onion
address) to know the exact number of clients. But when a service doesn't
use client auth, anyone who can decrypt the first layer of the
descriptor can also decrypt the second layer, and therefore knows that
the auth-client lines are fake. So are they just for padding in that
case? But the first layer's padded before encryption anyway.

Fourth, what goals does desc auth achieve in the v3 design? If I
understand right, in v2 its major goal was to hide the intro points from
everyone except authorised clients (including HSDirs). In v3 the intro
points are already hidden from anyone who doesn't know the onion address
(including HSDirs), so this goal can be achieved by not revealing the
onion address to anyone except authorised clients.

I'm probably missing something, but as far as I can see the only other
goal achieved by desc auth is the ability to revoke a client's access
without needing to distribute a new onion address to other clients. This
seems useful. But again, I'd ask whether it could be punted to the
application layer. The only advantage I can see from putting it at the
Tor layer is that the list of intro points is hidden from revoked
clients. Is there a real world use case where that's a big enough
advantage to justify putting all this authorisation machinery at the Tor
layer? Or maybe there are other things this design achieves that I
haven't thought of.

Anyway, sorry for the bag of assorted questions. I've been meaning to
catch up on all the discussions where they've probably been answered
already, but it's becoming clear that's a losing battle, so I'd better
just send them. Apologies if they're redundant or uninformed.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829001033</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-29 00:10:33-0400</timestampReceived><subject>[tor-dev] Archiving old Components in Trac</subject><body>

Hi,

Is anyone still using these trac components?

Applications/Tor Messenger
Applications/Tor Mail
Applications/TorBirdy

Core Tor/Erebus

Obfuscation/FTE

If no-one is using them, we can move them to Archived/

T

-- 
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6  4D43 450C BA7F 968F 094B
----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180829005358</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-08-29 00:53:58-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

Hi teor, 'Core Tor/Erebus' is mine. Feel free to drop it. That's the
name of a prospective web UI for relays but I won't be getting to it
in the near future.

No need to archive it. It doesn't have any tickets. We can always
re-add it if I cobble together time to make it a thing.

Thanks for cleaning these up!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180829014919</emailId><senderName>Mirimir</senderName><senderEmail>mirimir@riseup.net</senderEmail><timestampReceived>2018-08-29 01:49:19-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

On 08/28/2018 05:10 PM, teor wrote:
&gt; Hi,
&gt; 
&gt; Is anyone still using these trac components?
&gt; 
&gt; Applications/Tor Messenger
&gt; Applications/Tor Mail
&gt; Applications/TorBirdy

Huh?

| Current TorBirdy version is 0.2.5 released on 04 May 2018.

https://trac.torproject.org/projects/tor/wiki/torbirdy

What else would one use for Thunderbird with Tor? Just the network proxy
settings? Or is there something better now?

&gt; Core Tor/Erebus
&gt; 
&gt; Obfuscation/FTE
&gt; 
&gt; If no-one is using them, we can move them to Archived/
&gt; 
&gt; T
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180829025945</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-29 02:59:45-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 29 Aug 2018, at 11:49, Mirimir &lt;mirimir@riseup.net&gt; wrote:
&gt; 
&gt; On 08/28/2018 05:10 PM, teor wrote:
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; Is anyone still using these trac components?
&gt;&gt; 
&gt;&gt; Applications/Tor Messenger
&gt;&gt; Applications/Tor Mail
&gt;&gt; Applications/TorBirdy
&gt; 
&gt; Huh?
&gt; 
&gt; | Current TorBirdy version is 0.2.5 released on 04 May 2018.
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/torbirdy
&gt; 
&gt; What else would one use for Thunderbird with Tor? Just the network proxy
&gt; settings? Or is there something better now?

Sorry, I must have confused TorBirdy with Tor Messenger.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAluGDCEACgkQEP6qDnB1
ZyoLIA//XcHgpYAYMt/J2+rLZrEp4hSNoQJNkOI3JbVKeF+CD7uAKl57i01g3kwX
Zniu8meitDQvAWe4vJnn86iROx45ltaRTdJUdOKZ3k9sEKdv0KnQcNisU8+WBjyu
om1lF3/WhCZAUdkUgXgsFB/AqSnlCm8W+9pg5liwjOAyVP/dnbA+DLKAJKzkObs7
EsXtgRKE7OKPTnIS5QLHNOJHslGfxfHDbR8xaVegBq1pZhiVTlOqUWwOeFcMCss8
CJmmu5zuuwf6K/qCN1MRmHqpr0UOQV4KNn9iDDbn7KDuWrxc8KvzpcoMNcqFP/Wx
dH/1h1SeKFBq91OtvXGsGwL0Oy381ibj0DX9qnDX0MogTF8fJ9X5U9+BchOEkih6
o3EL9+R4vUpDranZPS07bHKzY6oufgDtRSxEyr9DoiqNoupyUXG+PTYwFM6OozFO
LAPZElN0ji9KDLddsIPnBQae/QU4R6+0VOQI///sHaqCodo5wOH/OCVtxkAoOL1L
Hc9WE5pPy+KPfi8kW3pL4myqVaGjWQrT5hTI6QOVjNNtS4mTfE61dkNbZBDAukU1
sE2L4VMLcVn0se/xHeB/mv38se9wQppICsFi7Q2SjaX9VDNNIDJI2f4CUlpl72IG
IR1i8ED0Bz12ZjxISsck9vIUGH/Cpw4HCxz5HT1kW/jSdhZj1sE=
=Z8LW
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829083100</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-08-29 08:31:00-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; Hi,
&gt;=20
&gt; Is anyone still using these trac components?

[snip]

&gt; Obfuscation/FTE

Let's leave that one right now. We still ship FTE on some platforms in
Tor Browser. We'll probably reevalute that soon and then can deal with
the trac component in case we think it's not worth keeping it.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829113651</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-08-29 11:36:51-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

[Attachment #2 (multipart/alternative)]


FTE is available on the Linux builds. I've tested it out with the built in
bridges. It's quite an interesting PT but overshadowed by the other ones.
It'd be nice if there were more people distributing FTE Bridges, increasing
diversity of the PTs used would be a good long term goal.

Cordially,
Nathaniel Suchy
On Wed, Aug 29, 2018 at 4:32 AM Georg Koppen &lt;gk@torproject.org&gt; wrote:

&gt; teor:
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt; Is anyone still using these trac components?
&gt;
&gt; [snip]
&gt;
&gt; &gt; Obfuscation/FTE
&gt;
&gt; Let's leave that one right now. We still ship FTE on some platforms in
&gt; Tor Browser. We'll probably reevalute that soon and then can deal with
&gt; the trac component in case we think it's not worth keeping it.
&gt;
&gt; Georg
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

FTE is available on the Linux builds. I've tested it out with the built in bridges. \
It's quite an interesting PT but overshadowed by the other ones. It'd be nice if \
there were more people distributing FTE Bridges, increasing diversity of the PTs used \
would be a good long term goal.&lt;br&gt;&lt;br&gt;Cordially,&lt;br&gt;Nathaniel Suchy&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Wed, Aug 29, 2018 at 4:32 AM Georg Koppen \
&lt;&lt;a href="mailto:gk@torproject.org"&gt;gk@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;teor:&lt;br&gt; &gt; Hi,&lt;br&gt;
&gt; &lt;br&gt;
&gt; Is anyone still using these trac components?&lt;br&gt;
&lt;br&gt;
[snip]&lt;br&gt;
&lt;br&gt;
&gt; Obfuscation/FTE&lt;br&gt;
&lt;br&gt;
Let's leave that one right now. We still ship FTE on some platforms in&lt;br&gt;
Tor Browser. We'll probably reevalute that soon and then can deal with&lt;br&gt;
the trac component in case we think it's not worth keeping it.&lt;br&gt;
&lt;br&gt;
Georg&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829150056</emailId><senderName>Sukhbir Singh</senderName><senderEmail>azadi@riseup.net</senderEmail><timestampReceived>2018-08-29 15:00:56-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

* teor:

&gt; Hi,
&gt; 
&gt; Is anyone still using these trac components?
&gt; 
&gt; Applications/Tor Messenger
&gt; Applications/Tor Mail

We can archive both these components.

&gt; Applications/TorBirdy

TorBirdy is an active project.

-- 
Sukhbir
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180711192606</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-11 19:26:06-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

Michael Rogers &lt;michael@briarproject.org&gt; writes:

&gt; On 11/07/18 14:22, George Kadianakis wrote:
&gt;&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt;&gt; 
&gt;&gt;&gt; On 10/07/18 19:58, George Kadianakis wrote:
&gt;&gt;&gt;&gt; here is a patch with an alternative directory format for v3 client auth
&gt;&gt;&gt;&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;&gt;&gt;&gt;        https://github.com/torproject/torspec/pull/23
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Thanks for making me edit the spec because it made me think of various
&gt;&gt;&gt;&gt; details that had to be thought of.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Let me know if you don't like it or if something is wrong.
&gt;&gt;&gt;
&gt;&gt;&gt; Minor clarification: line 2298 says the keypair is stored, it might be
&gt;&gt;&gt; clearer to say the private key is stored.
&gt;&gt;&gt;
&gt;&gt;&gt; Nitpick: should the directory be called "client_authorized_privkeys" if
&gt;&gt;&gt; it might contain private keys, public keys, or a mixture of the two?
&gt;&gt;&gt;
&gt;&gt; 
&gt;&gt; Good points in both cases. Will fix soon (along with other feedback if received).
&gt;&gt; 
&gt;&gt; Other than that, what do you think about the whole concept? Too complex?
&gt;&gt; Logical? Too much?
&gt;&gt; 
&gt;&gt; Cheers for the feedback! :)
&gt;
&gt; Sorry for being late to the party - I just this morning finished reading
&gt; the thread from 2016 where the client auth design was hashed out. :-/
&gt;
&gt; I think putting each client's keys in a separate file makes a lot of sense.
&gt;
&gt; At a higher level there are some things I'm not sure about. Sorry if
&gt; this is threadjacking, but you said the magic words "whole concept". ;-)
&gt;

Thanks for raising these issues and for taking the time to read the
previous thread. We really need feedback like this from people who have
used our systems like you :)

&gt; First, Ed25519-based authentication ("intro auth"). Could this be punted
&gt; to the application layer, or is there a reason it has to happen at the
&gt; Tor layer?
&gt;

Yes, it could be stuffed into the application layer. However that could be
an argument for everything (including end-to-end encryption of onions).

It might be the case that some application-layer protocols don't allow
any sort of pluggable authentication to happen on top of them, or that
users wouldn't want to enable them for some reason. Does this feel like
an artificial reason to you?

Another positive thing about intro auth is that it allows fine-grained
control over authentication, potentially allowing different tiers of
users etc.

Also see https://lists.torproject.org/pipermail/tor-dev/2018-May/013155.html

&gt; Second, X25519-based authorization ("desc auth"). If I understand right,
&gt; using asymmetric keypairs here rather than symmetric keys makes it
&gt; possible for the client to generate a keypair and send the public key to
&gt; the service over an authenticated but not confidential channel. But the
&gt; client may not know how to do that, so we also need to support an
&gt; alternative workflow where the service generates the keypair and sends
&gt; the private key to the client over an authenticated and confidential
&gt; channel.
&gt;
&gt; The upside of this design is the ability to use an authenticated but not
&gt; confidential channel (as long as the client and service understand which
&gt; workflow they need to use). The downside is extra complexity. I'm not
&gt; really convinced this is a good tradeoff. But I'm guessing this argument
&gt; has already been had, and my side lost. :-)
&gt;

Yes, you have described it very well.
And I agree that the tradeoff is complicated.

&gt; Third, what's the purpose of the fake auth-client lines for a service
&gt; that doesn't use client auth? I understand that when a service does use
&gt; client auth, it may not want clients (or anyone else who knows the onion
&gt; address) to know the exact number of clients. But when a service doesn't
&gt; use client auth, anyone who can decrypt the first layer of the
&gt; descriptor can also decrypt the second layer, and therefore knows that
&gt; the auth-client lines are fake. So are they just for padding in that
&gt; case? But the first layer's padded before encryption anyway.
&gt;

Yes, fake auth-client lines when client auth is disabled are not very
useful as you point out (also see #23641).

&gt; Fourth, what goals does desc auth achieve in the v3 design? If I
&gt; understand right, in v2 its major goal was to hide the intro points from
&gt; everyone except authorised clients (including HSDirs). In v3 the intro
&gt; points are already hidden from anyone who doesn't know the onion address
&gt; (including HSDirs), so this goal can be achieved by not revealing the
&gt; onion address to anyone except authorised clients.
&gt;
&gt; I'm probably missing something, but as far as I can see the only other
&gt; goal achieved by desc auth is the ability to revoke a client's access
&gt; without needing to distribute a new onion address to other clients. This
&gt; seems useful. But again, I'd ask whether it could be punted to the
&gt; application layer. The only advantage I can see from putting it at the
&gt; Tor layer is that the list of intro points is hidden from revoked
&gt; clients. Is there a real world use case where that's a big enough
&gt; advantage to justify putting all this authorisation machinery at the Tor
&gt; layer? Or maybe there are other things this design achieves that I
&gt; haven't thought of.
&gt;

Yes, you identified the point of desc auth correctly.

Another very important reason to have an authorization system inside
Tor, is because it allows only authorized clients to rendezvous (and in
general directly interact) with the onion service. That can mitigate all
sorts of guard discovery and correlation attacks that could be doable by
anyone, and restrict them only to authorized users.

Of course the above is achieved with either desc auth or intro
auth. Having both of them does not offer any benefits in this direction.

&gt; Anyway, sorry for the bag of assorted questions. I've been meaning to
&gt; catch up on all the discussions where they've probably been answered
&gt; already, but it's becoming clear that's a losing battle, so I'd better
&gt; just send them. Apologies if they're redundant or uninformed.
&gt;

Thanks for raising these questions, they are very important. Please keep
them coming.

We might be trying to achieve too many things here, or trying to design
a too convoluted system, so we need feedback to understand the user
expectations and threat models we should be trying to satisfy.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726113238</emailId><senderName>Alex Xu</senderName><senderEmail>alex_y_xu@yahoo.ca</senderEmail><timestampReceived>2018-07-26 11:32:38-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

Quoting George Kadianakis (2018-07-11 19:26:06), as excerpted
&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt; 
&gt; &gt; On 11/07/18 14:22, George Kadianakis wrote:
&gt; &gt;&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt; &gt;&gt; 
&gt; &gt; First, Ed25519-based authentication ("intro auth"). Could this be punted
&gt; &gt; to the application layer, or is there a reason it has to happen at the
&gt; &gt; Tor layer?
&gt; &gt;
&gt; 
&gt; Yes, it could be stuffed into the application layer. However that could be
&gt; an argument for everything (including end-to-end encryption of onions).
&gt; 
&gt; It might be the case that some application-layer protocols don't allow
&gt; any sort of pluggable authentication to happen on top of them, or that
&gt; users wouldn't want to enable them for some reason. Does this feel like
&gt; an artificial reason to you?
&gt; 
&gt; Another positive thing about intro auth is that it allows fine-grained
&gt; control over authentication, potentially allowing different tiers of
&gt; users etc.

That might be true, but it's not an argument for intro auth, because
application-layer authentication offers that too.

&gt; Also see https://lists.torproject.org/pipermail/tor-dev/2018-May/013155.html
&gt; 
&gt; &gt; Fourth, what goals does desc auth achieve in the v3 design? If I
&gt; &gt; understand right, in v2 its major goal was to hide the intro points from
&gt; &gt; everyone except authorised clients (including HSDirs). In v3 the intro
&gt; &gt; points are already hidden from anyone who doesn't know the onion address
&gt; &gt; (including HSDirs), so this goal can be achieved by not revealing the
&gt; &gt; onion address to anyone except authorised clients.
&gt; &gt;
&gt; &gt; I'm probably missing something, but as far as I can see the only other
&gt; &gt; goal achieved by desc auth is the ability to revoke a client's access
&gt; &gt; without needing to distribute a new onion address to other clients. This
&gt; &gt; seems useful. But again, I'd ask whether it could be punted to the
&gt; &gt; application layer. The only advantage I can see from putting it at the
&gt; &gt; Tor layer is that the list of intro points is hidden from revoked
&gt; &gt; clients. Is there a real world use case where that's a big enough
&gt; &gt; advantage to justify putting all this authorisation machinery at the Tor
&gt; &gt; layer? Or maybe there are other things this design achieves that I
&gt; &gt; haven't thought of.
&gt; &gt;
&gt; 
&gt; Yes, you identified the point of desc auth correctly.
&gt; 
&gt; Another very important reason to have an authorization system inside
&gt; Tor, is because it allows only authorized clients to rendezvous (and in
&gt; general directly interact) with the onion service. That can mitigate all
&gt; sorts of guard discovery and correlation attacks that could be doable by
&gt; anyone, and restrict them only to authorized users.
&gt; 
&gt; Of course the above is achieved with either desc auth or intro
&gt; auth. Having both of them does not offer any benefits in this direction.

asn said that a benefit of Tor-level authentication is that users may be
likely to accidentally reveal their onion service address, e.g. by
posting screenshots, or copying and pasting the URL, but are less likely
to accidentally reveal their separate authentication credentials.

I thought of a minor benefit of desc auth: revoked clients are prevented
entirely from attacking the onion service, e.g. by DDoS.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180808162522</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-08-08 16:25:22-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hello haxxpop and David,
&gt;
&gt; here is a patch with an alternative directory format for v3 client auth
&gt; crypto key bookkeeping as discussed yesterday on IRC:
&gt;        https://github.com/torproject/torspec/pull/23
&gt;
&gt; Thanks for making me edit the spec because it made me think of various
&gt; details that had to be thought of.

Hello again,

there have been many discussions about client auth since that last email
a month ago. Here is a newer branch that we want to get merged so that
we proceed with implementation: https://github.com/torproject/torspec/pull/33

The first commit is the same as in the original post, and all subsequent
commits are improvements on top of it.

Here are a few high-level changes that were made after discussion:

- Ditched intro auth for now, since descriptor auth is sufficient for
  our threat model, and trying to support two different auth types would
  complicate things.

- Opted for a KISS design for now where we don't ask Tor to generate
  client auth keys neither on the client side or on the service side.
  For now we assume that client/service-side generated their keys with
  an external tool, and we will build such tools in the future, instead
  of spending too much time bikeshedding about it right now.

- Client auth is enabled if the client auth directory is populated with
  the right files, instead of relying on torrc switches etc.

Furthermore, the last three commits are quick mainly-cosmetic changes I
did alone before posting this here. Inform me if you don't like those.

I'll let this simmer here for a few days before merging it in torspec.
Let me know if you have questions! Thanks for reading!

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180806021336</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2018-08-06 02:13:36-0400</timestampReceived><subject>Re: [tor-dev] Reviewing Trac #18642 (Teach the OOM handler about the DNS cache)</subject><body>

Hi teor,

Thank you so much for doing this!

Best,

Neel Chauhan

===

https://www.neelc.org/

August 5, 2018 9:58 PM, "teor" &lt;teor@riseup.net&gt; wrote:

&gt;&gt; On 2 Aug 2018, at 01:41, neel@neelc.org wrote:
&gt;&gt; 
&gt;&gt; Hi tor-dev@ mailing list,
&gt;&gt; 
&gt;&gt; I have a patch for Bug #18642 (Teach the OOM handler about the DNS cache) which I would like
&gt;&gt; reviewed.
&gt;&gt; 
&gt;&gt; The URL is here: https://trac.torproject.org/projects/tor/ticket/18642
&gt;&gt; 
&gt;&gt; Originally, dgoulet chose he would review, but after no response on the patch, he has emailed me
&gt;&gt; that he's on vacation until the 16th of August, hence the reason why I'm emailing here. I am really
&gt;&gt; keen on getting this patch in, and if there's any Tor developer here, could someone please review
&gt;&gt; and merge it?
&gt; 
&gt; I have removed dgoulet as the reviewer on the ticket.
&gt; 
&gt; Someone else will get assigned to review the ticket today,
&gt; and they will try to review it by the end of the week.
&gt; 
&gt; T
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180803224214</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-08-03 22:42:14-0400</timestampReceived><subject>Re: [tor-dev] Tor Relay Guide Disagreements</subject><body>

&gt; /TorRelayGuide
&gt; /TorRelayGuide/DebianUbuntu

The former, in context wiith the latter, cannot be
treated as both a file and a directory (hier) by web
mirror / archvers such as wget onto disk.
And wiki / trac exports aren't available either :(
So instead push the page down into the hier,
thus ensuring safely collision free, like...

/TorRelayGuide/TorRelayGuide
/TorRelayGuide/DebianUbuntu
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180817135413</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-17 13:54:13-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 6.2-1.17.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

A patch release has been made for Onionoo to fix errors with the
searching for relays with unknown AS numbers.

Additionally, we announce today the fixes from version 6.2-1.17.0 which
were released yesterday but not deployed as this additional patch was
ready for release and so we postponed. This fixes issues with slow
reverse DNS lookups.

Download available at:
     https://dist.torproject.org/onionoo/6.2-1.17.1/

Software changes are summarized in the changelog [0].

The changes are already deployed on all onionoo.torproject.org instances.

Not all reverse DNS names will be looked up immediately, but should all
be present once the updater has run at least once 13 hours after the
upgrade.

Please direct comments and questions to the metrics-team mailing list [1].

Thanks,
Iain -- on behalf of the Metrics Team.

[0]
https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?h=onionoo-6.2-1.17.1
[1] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180820170514</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-08-20 17:05:14-0400</timestampReceived><subject>Re: [tor-dev] Unable to access '#tor-dev' IRC Channel</subject><body>

Hello

For assistance beyond the contents of this email, please join and ask #oftc.

Some of the Tor IRC channels on OFTC are protected from unregistered
nicks from joining as an anti-spam measure.

The nick "Lashuk" is not registered with NickServ.

To join #tor-dev (and #tor-project, and some others...), you need to

1. Register your nick with nickserv

    /msg nickserv help register

    After confirming there was no errors ...

2. Verify your nick at https://services.oftc.net

    - Click login in the top right
    - Login with the credentials you created in (1)
    - Click Account at the top
    - Click Verify on the left
    - Solve a captcha

    After confirming there was no errors ...

3. Tell nickserv you've verified your nick

    /msg nickserv checkverify

    If this works, your nick will gain +R mode
    and can join #tor-dev (and others)

In the future when you connect to OFTC, you will only need to do

    /msg nickserv identify YourPassword YourNick

Matt


On 8/20/18 12:54, KUSHAL BORKAR wrote:
&gt; Greetings All,
&gt;                      This is to inform you that, I, Kushal Borkar, IRC
&gt; Alias 'Lashuk', am unable to access the '#tor-dev' IRC channel. I tried
&gt; using Pidgin Internet Messenger to properly connect to the channel but I
&gt; face the same problem: "Cannot join #tor-dev: Registration is required."
&gt;       I also checked whether I'm linked to the internet and also
&gt; verified by using the command "/msg NickServ IDENTIFY". I cannot access
&gt; the '#tor-dev' IRC channel on OFTC neither using my registered nick on
&gt; desktop client nor through the web interface. I also tried OFTC IRC
&gt; Service to check my Nickname which indicated me "An error occurred
&gt; fetching the nickname data. It may be private or there may be a problem
&gt; with the server."
&gt;      I eagerly want to discuss the specific project "Ahmia - Onion
&gt; Service Search" and would like to know about the Outreachy Internship
&gt; which starts from December to March.
&gt;      I politely request you all help me and direct me in the right
&gt; direction in order to start thinking about what I could do for Tor.
&gt; 
&gt; With Regards,
&gt; /Kushal Borkar/
&gt; /B.Tech - 4th Year,
&gt; Electronics and Communication Engineering,
&gt; IIIT Chittoor,
&gt; Sri City-517588/
&gt; 	
&gt; Email Id*: kushal.b15@iiits.in &lt;mailto:kushal.b15@iiits.in&gt;*
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180827114200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-08-27 11:42:00-0400</timestampReceived><subject>Re: [tor-dev] routing security handling in the tor network</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


to underline the relevance of this:

one of the most important IP blocks (185.222.100.0/22) on the internet
with regards to Tor created route origin authorizations (ROAs)
for their prefixes. These prefixes are use by 3 major exit operators 
(including the biggest exit operator).

they make up &gt;15% of the Tor network's exit capacity,
which means that we are around 50% RPKI ROA coverage for Tor exit capacity now.



-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180827181852</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-08-27 18:18:52-0400</timestampReceived><subject>[tor-dev] Highlights from ACM SIGCOMM</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi All,

I attended ACM's SIGCOMM last week. A few things caught my attention
that I thought might be of interest here:

"CircuitStart: A Slow Start For Multi-Hop Anonymity
Systems" Christoph D=C3=B6pmann and Florian Tschorsch.

Link: https://dl.acm.org/authorize?N666917

"Design of SOCKS Version 6" Vladimir Olteanu and Drago=C5=9F Niculescu.

Link: https://dl.acm.org/authorize?N666057
Related Internet Draft:
https://datatracker.ietf.org/doc/draft-olteanu-intarea-socks-6/

One thing about their design for SOCKS 6 is that is has options, and
those options could be used to specify some sort of isolation property
instead of overloading username/password.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180829154850</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-08-29 15:48:50-0400</timestampReceived><subject>[tor-dev] oss-fuzz Coverage</subject><body>

tor is in OSS-Fuzz, and I recently found this very slick dashboard
that shows you just what coverage tor is getting out of it:
https://storage.googleapis.com/oss-fuzz-coverage/tor/reports/20180829/linux/report.html

Thought I'd share in case others hadn't seen it (I think it's fairly new.)

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180829230042</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-08-29 23:00:42-0400</timestampReceived><subject>Re: [tor-dev] Archiving old Components in Trac</subject><body>

Thanks everyone, these components have been archived:

Applications/Tor Messenger
Applications/Tor Mail

And this one deleted:

Core Tor/Erebus

T

-- 
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6  4D43 450C BA7F 968F 094B
----------------------------------------------------------------------


&gt; On 30 Aug 2018, at 01:00, Sukhbir Singh &lt;azadi@riseup.net&gt; wrote:
&gt; 
&gt; * teor:
&gt; 
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; Is anyone still using these trac components?
&gt;&gt; 
&gt;&gt; Applications/Tor Messenger
&gt;&gt; Applications/Tor Mail
&gt; 
&gt; We can archive both these components.
&gt; 
&gt;&gt; Applications/TorBirdy
&gt; 
&gt; TorBirdy is an active project.
&gt; 
&gt; -- 
&gt; Sukhbir
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180830213506</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-08-30 21:35:06-0400</timestampReceived><subject>Re: [tor-dev] Bandwidth scanner: request for feedback</subject><body>

On 29 August 2018 at 16:11, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; Ideally, I would like us to perform A/B experiments to ensure that our
&gt; performance metrics do not degrade in terms of average *or* quartile
&gt; range/performance variance. (Ie: alternate torflow results for a week vs
&gt; sbws for a week, and repeat for a few weeks). I realize this might be
&gt; complicated for dirauth operators, though. Can we make it easier
&gt; somehow, so that it is easy to switch which result files they are voting
&gt; with?

Having both voting files means running both scanners at the same time.
Depending on one's pipes, that might skew the results from the
scanners.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180701145705</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-01 14:57:05-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 30/06/18 15:42, nusenu wrote:
&gt; but maybe someone else would be willing to invoke a
&gt; "ln" commands everytime a new new alpha repo is born.
&gt;=20
&gt; tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie

As an alternative strategy, symbolic links for old alpha repositories
point to the current stable repository. If you're not updating your
sources.list you end up on the stable branch. I think this would mean
"less surprises" than jumping to a new alpha branch.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180701145411</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-01 14:54:11-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Check Maxmind GeoIP DB before distributing</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 30/06/18 12:53, Jaskaran Singh wrote:
&gt; 0. Motivation and Overview
&gt; We're using Maxmind's (company registered in the US) GeoIP Database,
&gt; which is not just antithetical to the philosophy that one should not
&gt; totally rely on a service/software for all needs, but has some serious
&gt; security repercussions too.

I would love to see a full list of all the places we currently use this
database and what security consequences could be.

Relevant tickets to this discussion that you may want to read have the
keyword "metrics-geoip" in trac.

Also, you may be interested in karsten's comment on #22203 where we talk
about downloading signed GeoIP files from the dirauths instead of
shipping them in the distribution.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704074429</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-04 07:44:29-0400</timestampReceived><subject>[tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

On the newer versions of tor browser, I have noticed that the "does this computer's \
internet connection go through a firewall that only allows certain ports?" was \
removed. I think this should be put back in the tor browser configuration options for \
users who are trying from behind firewalls that only allow certain ports.

Thanks.


[Attachment #5 (unknown)]

&lt;html xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US&gt;&lt;div class=WordSection1&gt;&lt;p \
class=MsoNormal&gt;Hello,&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;On the newer versions of tor browser, I have noticed that the "does \
this computer's internet connection go through a firewall that only allows certain \
ports?" was removed. I think this should be put back in the tor browser configuration \
options for users who are trying from behind firewalls that only allow certain \
ports.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Thanks.&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180705234743</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-07-05 23:47:43-0400</timestampReceived><subject>[tor-dev] Nearly everything in the Tor source code is moving in 0.3.5</subject><body>

Hello, friends!

For quite a while now, the program "tor" has been built from source
code in just two directories: src/common and src/or.

This has become more-or-less untenable, for a few reasons -- most
notably of which is that it has led our code to become more
spaghetti-ish than I can endorse with a clean conscience.

So to fix that, we've gone and done a huge code movement in our git
master branch, which will land in a release once Tor 0.3.5.1-alpha is
out.

Here's what we did:

  * src/common has been turned into a set of static libraries.  These
all live in the "src/lib/*" directories.  The dependencies between
these libraries should have no cycles.  The libraries are:

    arch -- Headers to handle architectural differences
    cc -- headers to handle differences among compilers
    compress -- wraps zlib, zstd, lzma
    container -- high-level container types
    crypt_ops -- Cryptographic operations. Planning to split this into
a higher and lower level library
    ctime -- Operations that need to run in constant-time. (Properly,
data-invariant time)
    defs -- miscelaneous definitions needed throughout Tor.
    encoding -- transforming one data type into another, and various
data types into strings.
    err -- lowest-level error handling, in cases where we can't use
the logs because something that the logging system needs has broken.
    evloop -- Generic event-loop handling logic
    fdio -- Low-level IO wrapper functions for file descriptors.
    fs -- Operations on the filesystem
    intmath -- low-level integer math and misc bit-twiddling hacks
    lock -- low-level locking code
    log -- Tor's logging module.  This library sits roughly halfway up
the library dependency diagram, since everything it depends on has to
be carefully crafted to *not* log.
    malloc -- Low-level wrappers for the platform memory allocation functions.
    math -- Higher-level mathematical functions, and floating-point math
    memarea -- An arena allocator
    meminfo -- Functions for querying the current process's memory
status and resources
    net -- Networking compatibility and convenience code
    osinfo -- Querying information about the operating system
    process -- Launching and querying the status of other processes
    sandbox -- Backend for the linux seccomp2 sandbox
    smartlist_core -- The lowest-level of the smartlist_t data type.
Separated from the rest of the containers library because the logging
subsystem depends on it.
    string -- Compatibility and convenience functions for manipulating
C strings.
    term -- Terminal-related functions (currently limited to a getpass
function).
    testsupport -- Macros for mocking, unit tests, etc.
    thread -- Higher-level thread compatibility code
    time -- Higher-level time management code, including format
conversions and monotonic time
    tls -- Our wrapper around our TLS library
    trace -- Formerly src/trace -- a generic event tracing API
    wallclock -- Low-level time code, used by the log module.

  * To ensure that the dependency graph in src/common remains under
control, there is a tool that you can run called "make
check-includes".  It verifies that each module in Tor only includes
the headers that it is permitted to include, using a per-directory
".may_include" file.

  * The src/or/or.h header has been split into numerous smaller
headers.  Notably, many important structures are now declared in a
header called foo_st.h, where "foo" is the name of the structure.

  * The src/or directory, which had most of Tor's code, had been split
up into several directories.  This is still a work in progress:  This
code has not itself been refactored, and its dependency graph is still
a tangled web.  I hope we'll be working on that over the coming
releases, but it will take a while to do.

    The new top-level source directories are:

     src/core -- Code necessary to actually perform or use onion routing.
     src/feature -- Code used only by some onion routing
configurations, or only for a special purpose.
     src/app -- Top-level code to run, invoke, and configure the
lower-level code

   The new second-level source directories are:
     src/core/crypto -- High-level cryptographic protocols used in Tor
     src/core/mainloop -- Tor's event loop, connection-handling, and
traffic-routing code.
     src/core/or -- Parts related to handling onion routing itself
     src/core/proto -- Support for encoding

  * The "tor" executable is now built in src/app/tor rather than src/or/tor.

  * There are more static libraries than before that you need to build
into your application if you want to embed Tor.  Rather than
maintaining this list yourself, I recommend that you run "make
show-libs" to have Tor emit a list of what you need to link.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180706121600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-06 12:16:00-0400</timestampReceived><subject>[tor-dev] anchors in the Tor Browser design document?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; It would be nice if every subsection (i.e. "SPDY and HTTP/2" would have an anchor 
&gt; so we can easily link to it)

in what trac component would I file this request?

"Webpages/Website"?


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180707043828</emailId><senderName></senderName><senderEmail>starlight.2018q2</senderEmail><timestampReceived>2018-07-07 04:38:28-0400</timestampReceived><subject>[tor-dev] locked out of my bug report #26675</subject><body>

Today I opened a ticket regarding difficult to understand
Torflow behavior.  Subsequently I figured out the behavior,
realizing it is a non-material bug that has no serious
implication.  However I can no longer revise the ticket,
possibly due to

https://trac.torproject.org/projects/tor/ticket/26675#comment:2

or perhaps due to the next change which somehow reversed

&gt;Date: Sat, 07 Jul 2018 01:33:46 -0000
&gt;Changes (by cypherpunks):
&gt; * status:  new =&gt; closed
&gt; * resolution:   =&gt; fixed

I find this troubling.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180709231633</emailId><senderName>Saurav Malani</senderName><senderEmail>sauravmalani1@gmail.com</senderEmail><timestampReceived>2018-07-09 23:16:33-0400</timestampReceived><subject>[tor-dev] Anonymous local count statistics</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Everyone,

I am 4th year student at IIIT-H, India. I want to contribute to TOR project
specifically to "*Anonymous local count statistics". *I am done with
building TOR. I looked at the ticket and had an overview of Tor
documentation. But, I feel like being lost. So, it would be great if
someone here can guide me on this further, as I am a bit novice in this
field, by providing links with relevant info related to the project and
also by guiding me on what to do next? and what is done till now?

Thank-you,
Regards,
Saurav Malani

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="auto"&gt;Hello Everyone,&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;div \
dir="auto"&gt;I am 4th year student at IIIT-H, India. I want to contribute to TOR \
project specifically to "&lt;b \
style="color:rgb(26,26,26);font-family:helvetica,arial,sans-serif;font-size:13.3333px;background-color:rgb(255,255,255)"&gt;Anonymous \
local count statistics". &lt;/b&gt;&lt;span \
style="color:rgb(26,26,26);font-family:helvetica,arial,sans-serif;font-size:13.3333px;background-color:rgb(255,255,255)"&gt;I \
am done with building TOR. I looked at the ticket and had an overview of Tor \
documentation. But, I feel like being lost. So, it would be great if someone here can \
guide me on this further, as I am a bit novice in this field, by providing links with \
relevant info related to the project and also by guiding me on what to do next? and \
what is done till now? &lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;div data-smartmail="gmail_signature" \
dir="auto"&gt;Thank-you,&lt;br&gt;Regards,&lt;br&gt;Saurav Malani&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180709143255</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-09 14:32:55-0400</timestampReceived><subject>[tor-dev] The case with Tor2Web</subject><body>

Hello!

It's a semi-secret that tor2web traffic has been blocked from the Tor
network when we introduced the DoS subsystem this March [0]. The reason
is that a big part of the DoS traffic was coming from one-hop clients
continuously hammering onion services.

This is something that we've been considering doing for a while (for
security and code-complexity reasons), and it just happened naturally
during the DoS incident.

As part of this, and since the DoS subsystem is going to stick around,
we are planning to permanently kill the Tor2Web subsystem of Tor, in an
effort to simplify our codebase and our feature list.

If you've been relying on tor2web for something, please consider
switching to a normal 3-hop client indeed. This is a heads up so that
you can let us know if that won't work for you, or you need help
transitioning out.

Cheers and hope we are not making you sad.

[0]: https://trac.torproject.org/projects/tor/ticket/24902
     https://blog.torproject.org/new-stable-tor-releases-security-fixes-and-dos-prevention-03210-03110-02915
 _______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711163700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-11 16:37:00-0400</timestampReceived><subject>[tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


I'd like to see 'working DNS' as a requirement for the exit flag.

If there are no major objections and if I'm able to find
someone to implement it I'd like to proceed with writing
a small proposal.

Would anyone be willing to implement it in tor?



https://trac.torproject.org/projects/tor/ticket/26691


--=20
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427200814</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-04-27 20:08:14-0400</timestampReceived><subject>[tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


As I am currently implementing the client authorization for onion
service v3 (https://github.com/torproject/tor/pull/36), I found some
problems in how we should let the users configure the client auth for
their services.

Before getting into the problem, I will explain how it works first.

--
Each client will have two private keys to authenticate with the service.
One is x25519 key and the other is ed25519 key.

The x25519 one is used to decrypt the descriptor when the client wants
to access the service, so if the client is not authorized, it will never
know the introduction points, the intro auth keys, and so on, and then
it absolutely cannot access the service.

The ed25519 one is for another layer of authentication. Even if the
client can decrypt the descriptor using the x25519 private key, it still
need to have the ed25519 to authenticate itself directly to the service
using the extension field in INTRODUCE1 cell.

At first glance, it seems that the ed25519 one is not necessary because,
if the client is able to decrypt the descriptor, it already means the
client is already authenticated. Why do we need to have another layer of
authenticate?

The answer is that the ed25519 provides more find-grained access control
for example:
	
1) you could use it to revoke a client without the need to rotate all
the intro points and push new descriptor.
2) you can have more fine-grained control on your users and potentially
offer different types of access structure to different users using their
ed25519 keys as identifier.
--

The spec says that the client must have both keys and use both to
authenticate, but, for me, these two things are quite independent. I
think they can be considered two different authentication types. The
service should be able to enable one and disable the other. For example,
If I disable the x25519 while I enable ed25519, I can add a new client
immediately without the need to rotate the intro points.

If rotating intro points is not an issue and the only purpose of ed25519
is to have more fine-grained access control, the current spec is fine.
But if rotating intro points is an issue, we should rethink about this.

So, I created a PR for the change in torspec.
https://github.com/torproject/torspec/pull/7
(in the PR, the x25519 auth is called 'basic' and the ed25519 auth is
called 'intro')

We need your opinions about this.
Should we let the service enable one while disable the other?
Or should we require the service to enable both for all clients?

If you want to let the service be able to enable one while disable the
other, do you have any opinion on how to configure the torrc?

Cheers,
haxxpop

This is a discussion log that we had earlier.

[22:39:23] &lt;meejah&gt; v3 "basic" auth is different from v2 "basic" auth,
right? Perhaps a different name-string for the v3 one would be good?
[22:39:44] &lt;asn&gt; meejah: good point
[22:39:57] &lt;asn&gt; perhaps we can name it "pubkey" auth or something more UX-y
[22:40:35] &lt;meejah&gt; asn: sounds good to me (my perspective is to avoid
naming-weirdness for controllers and having to explain to users "well,
this 'basic' is different from this other 'basic' because you said
version=3")
[22:40:43] &lt;asn&gt; right
[22:40:44] &lt;asn&gt; makse sense
[22:40:51] &lt;asn&gt; haxxpop: ^ what do u think
[22:40:51] &lt;asn&gt; ?
[22:45:01] &lt;haxxpop&gt; meejah, asn yes I agreed. maybe we should change it
to something else
[22:46:10] &lt;haxxpop&gt; meejah, asn In fact, the word 'basic' appears only
once in the v3 spec !
[22:48:05] &lt;asn&gt; haxxpop: yeah... perhaps we can rename it to "pubkey"
which describes it pretty well for nerds. or to "standard" which is a
synonym for "basic" and it will confuse everyone.
[22:50:59] &lt;haxxpop&gt; asn, I think both "basic" and "intro" use pubkeys.
[22:51:26] &lt;haxxpop&gt; asn, I think if we call "basic" "pubkey", it may
imply that "intro" doesn't use pubkeys.
[22:51:35] &lt;asn&gt; true
[22:52:20] &lt;asn&gt; i'm still not sure if i like:
[22:52:20] &lt;asn&gt;  +        HiddenServiceAuthorizeClient basic
client-name,client-name,...
[22:52:20] &lt;asn&gt;  +        HiddenServiceAuthorizeClient intro
client-name,client-name,...
[22:52:30] &lt;asn&gt; mainly because it's gonna be quite hard to explain to
people what these two lines mean
[22:52:34] &lt;asn&gt; (to hs operators)
[22:52:37] &lt;asn&gt; like what's the difference
[22:52:42] &lt;asn&gt; and usually they should have both enabled
[22:52:53] &lt;asn&gt; what i imagined initially is that we would keep the
torrc logic the same
[22:53:04] &lt;asn&gt; and maybe expose a torrc option for advanced users to
do HiddenServiceDisableIntroAuth
[22:53:07] &lt;asn&gt; or something
[22:53:11] &lt;asn&gt; anyway i need to think about this!
[22:53:25] &lt;haxxpop&gt; asn, Nice point
[23:08:35] &lt;meejah&gt; asn: haxxpop: "pubkey" sounds good to me. People who
are "just clients" probably don't care what the string is (? maybe? UX
people?) and people running the services probably count as "nerds" :)
[23:08:59] &lt;asn&gt; agreed
[23:09:02] &lt;meejah&gt; (but, I don't personally understand what these
schemes are so maybe I shouldn't be naming them ;)
[23:09:08] &lt;asn&gt; ideally those things should not be exposed to the users
anyway
[23:09:19] &lt;asn&gt; they should be wrapped by the browser or something
[23:11:46] &lt;meejah&gt; asn: in txtorcon at least, they aren't really;
preferred new-API is "async with tor.onion_authentication(onion_host,
some_auth_object)" for py3, or "tor.add_onion_authentication(..)" --
ideally this can be used by "actual application" to transmit the
credentials to users in some way
[23:11:52] &lt;meejah&gt; (e.g. maybe via magic-wormhole)
[23:12:35] &lt;meejah&gt; I assume that *ideally* the clients generate
keypairs, and send pubkeys to the service..?
[23:22:45] &lt;asn&gt; meejah: yes ideally clients generate keypairs
[23:23:00] &lt;asn&gt; meejah: but service-generated keypairs can also be
done, to immitate current symmetric-key design
[23:26:08] &lt;dmr&gt; asn: there's lots of reasons to keep v2 "basic"
separate from v3 "basic" - limited bug reports, presentations, error/log
messages, internet searches, ...
[23:26:34] &lt;dmr&gt; like meejah I also don't know what the schemes are, so
that's the extent of my input :)
[23:26:51] &lt;dmr&gt; glad to hear it sounds like we're all in agreement to
use something other than "basic" for v3
[23:46:12] &lt;meejah&gt; asn: okay, ack. It would be neat to see an
application using magic-wormhole for an "invite a new client" flow;
perhaps I'll try a PoC when v3-auth is available; is it in master already??


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180713180253</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-13 18:02:53-0400</timestampReceived><subject>[tor-dev] Tor browser for Chrome OS</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

So I am wondering, are there plans to develop a version of tor browser that
will run on Chromebooks? I though that might be a good idea as those are
getting somewhat popular in the US. Thanks.

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hello,&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;So I am \
wondering, are there plans to develop a version of tor browser that will run on \
Chromebooks? I though that might be a good idea as those are getting somewhat popular \
in the US. Thanks.&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180719135618</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-07-19 13:56:18-0400</timestampReceived><subject>[tor-dev] Brief state of sbws thoughts</subject><body>

Teor, Juga

There's a lot of things fighting for my attention right now, so you
might have noticed I've slowed way down on attending to sbws
tickets/PRs/etc. I think time will free up in the next few days.

I think sbws is in a very good place code-wise right now. I don't think
much more **has** to be done to the code. Even though I enjoy adding
things like the state file (GHPR#236 [2]), I don't think that was a good
use of my time.

It looks like there's a lot of check boxes Juga has made regarding
making a Debian package[0]. Those should get checked. These are important.

However, I think the absolute most important thing for us to be spending
our time on right now is deciding what "good" results are and verifying
sbws produces "good" results.

To accomplish this, I think one of the two suggestions I made in a
comment on GH#182 [1] (quoted here) is what we should be doing.

1. Run torflow and sbws side-by-side (but not at the same time) to
remove more variables. This has the added benefit of us having access to
the raw scanner results from torflow before it does whatever magic
scaling it does. OR

2. Ask for access to raw scanner results from someone running torflow.

I fear sbws is doomed to die the death of the new bandwidth scanners
before it if we don't start seriously verifying sbws is "good" or if I
personally slowly stop working/coordinating work on it.

Thanks

Matt

[0]: https://trac.torproject.org/projects/tor/ticket/26848
[1]:
https://github.com/pastly/simple-bw-scanner/issues/182#issuecomment-404250053
[2]: https://github.com/pastly/simple-bw-scanner/pull/236
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180720171700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-20 17:17:00-0400</timestampReceived><subject>[tor-dev] restoring 'cypherpunks' trac account with more anti-automation?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

is there any timeline when the cypherpunks trac account will be restored?

I would suggest to require _every_ single submission (and maybe even the login itself) 
by that account to go through the captcha test (not just in case there are to many URLs
in the submitted comment) to reduce the vandalism.

thanks!


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180723112200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-23 11:22:00-0400</timestampReceived><subject>[tor-dev] Could tor drop privileges even earlier? (before trying to access anything on the filesyste</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Fedora/CentOS starts the tor service as root and drops
privileges to user 'toranon' due to the torrc 'User' parameter by default.

Also by default the tor service runs in a SELinux confined domain (tor_t). That means 
root in that domain can NOT access just any files regardless
of DAC filesystem permissions (DAC_OVERRIDE is not granted by default). 

Which results in the situation that during startup (before privileges
are dropped and user is switched to 'toranon') tor can not access
the hiddenservicedir without allowing DAC_OVERRIDE or changing filesystem permissions, 
but it could if at that point privileges were already switched to the user specified in the torrc file.


From my point of view the nicest solution would be if tor drops
privileges before it accesses anything on the filesystem - 
which would solve above problem. Would that introduce other problems?

Is there a specific reason why tor drops privileges later?

(this is about running tor and tor in --verify-config mode)


context:
https://bugzilla.redhat.com/show_bug.cgi?id=1602171 
(I consider this problem solved via the workaround but
I'm still interested in the above question)

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180723015618</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-23 01:56:18-0400</timestampReceived><subject>Re: [tor-dev] restoring 'cypherpunks' trac account with more anti-automation?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Jul 2018, at 03:17, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; is there any timeline when the cypherpunks trac account will be restored?
&gt; 
&gt; I would suggest to require _every_ single submission (and maybe even the login itself)
&gt; by that account to go through the captcha test (not just in case there are to many URLs
&gt; in the submitted comment) to reduce the vandalism.

That won't help as much as you might think.

The vandal(s) are already passing the captcha test, which is why they post updates every
minute or so.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltVNcIACgkQEP6qDnB1
Zyp+uw/+NCeehMisVxyROecm5yuxIf0NEm4OFaJJWaOvoqstRclak6tfa+78ZoXR
gLiT30n1vzAdXwxxmPoiS/IsWCu07mkj2M+Nl1oRcLGqGh8scpdiHI+9onaFSXDP
/yaqIK288gIV+RGt55JgV1/mwjS3zy6E0rrOBSP8eDvwyUrq9o+NVAs8b86bLq6G
CxdY6khvAiyC2rLmtsMVSw6tEzkXYkZ1537L6VGdyqGZjzGz4HVvgUJvWhAKpNwr
blv6PoBvtqlx6CdRM7QjK+BpdXncE1t+nS7jZqAS6guPczY/bFmZPULgBOmH2Fec
Y94hwSJDr3QSAYRzQkiRXokyrEJHJRHvb4DBDYoO4GwgreLyWHmcnHzgmZx1ClJn
ji8kDsTbfQulgeDSHtmG83y7uFQaNqbZ2stReRftU13CC2EMnqFpYjcKxxiblsvh
r98NGFK+Q5zJmzQUQm0B5yufrfN6180Qnf+8Gna9Drr3hEpUBSunqOOZLIFdPDVw
7nlIvieoYK9pPEa+uvSXuityif9Q8kXfCnQv+zihW9vXCB1GNgEJ3F/e8cWGBd5G
IrPWTiY+iSNi48x1/sE1REy1E2/vc5LBCve08E1l183mTXMQ1QuLC/p7VWHxjIRm
N7XH67W1H86EOKPVxpzZ1Uha9bGPMAP+4T0ok16xrsyTjViW5V8=
=f2qF
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180703214125</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-07-03 21:41:25-0400</timestampReceived><subject>[tor-dev] Proposal 295: Using the ATL construction for relay cryptography (solving the crypto-taggin</subject><body>

Hi, all!

I've got the privilege to relay the following proposal from Tomer
Ashur: it reflects a whole lot of work.  I didn't make any changes,
other than wrapping the lines: please let  me know if corrupted
anything.

Filename: 295-relay-crypto-with-atl.txt
Title: Using the ATL construction for relay cryptography (solving the
crypto-tagging attack)
Author: Tomer Ashur
Created: 09 Apr 2018
Status: Open


0. Context

   Although Crypto Tagging Attacks were identified already in the
   original Tor design, it was not before the rise of the Procyonidae in
   2012 that their severity was fully realized. In Proposal 202 (Two
   improved relay encryption protocols for Tor cells) Nick Mathewson
   discussed two approaches to stymie tagging attacks and generally
   improve Tor's cryptography. In Proposal 261 (AEZ for relay
   cryptography) Nick put forward a concrete approach which uses the
   tweakable wide-block cipher AEZ.

1. Motivation

   For motivations, see proposal 202.

2. Summary and preliminaries

   This proposal suggests an alternative approach to Proposal 261 using
   the notion of Release (of) Unverified Plaintexts (RUP-security). It
   describes an improved algorithm for circuit encryption based on
   CTR-mode which is already used in Tor, and an additional component
   for hashing. When this additional component is GHash, a GCM-based
   solution can be used from the OpenSSL library. If a solution that is
   based solely on components that already exist in Tor is desirable,
   SHA-1 can be used for hashing (however, this is highly discouraged as
   SHA-1 is broken!).

   Incidentally, and similar to Proposal 261, this proposal employs the
   ENCODE-then-ENCIPHER approach thus it improves Tor's E2E integrity by
   using (sufficiently enough) redundancy.

    For more information about the scheme and a security proof for its
    RUP-security see

      Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting Authenticated
      Encryption Robustness with Minimal Modifications. CRYPTO (3) 2017:
      3-33 available online at https://eprint.iacr.org/2017/239 .

2.1 An instructive 1-node circuit

   Noting that in CTR-mode the nonce is essential for the
   encryption/decryption operations, the proposed solution is based on
   encrypting its value in such a way that any change to the ciphertext
   or the tag (e.g., through a tagging attack) would randomize the nonce
   and result in a random value as the output of CTR-mode.

    The basic crypto components of the proposal are:
        * a block cipher E( ·)
        * A universal hash function, H( ·);

   Using the block cipher E( ·) and a non-repeating nonce N, one can
   construct the CTR mode-of-operation:

        CTR(N) = E(N)||E(N+1)||...||E(N+l)

  For simplicity, let us for now consider normal encryption using
  CTR-mode (This is akin to building a circuit with a single node. In
  the sequel we will see what happens when this idea is used in a 3-node
  circuit):

        * Input: a nonce N, a message M = (m_0,...,m_l)
        1. (z_0,...,z_l) = CTR(N)
        2. (c_0,...,c_l) = (z_0 ^ m_0, ... z_l ^ m_l)

   The client sends C = (c_0,...,c_l) to the receiver which repeats Step
   (1) to generate the random stream Z = (z_0,...,z_l) and recovers the
   message through M = C ^ Z. A protocol using this scheme is vulnerable
   to the crypto tagging attack due to the malleability of
   CTR-mode. Indeed, since Z depends only on N rather than on the
   message M itself, a change to a ciphertext bit affects the respective
   plaintext bit and nothing else.

   Our solution is based on the idea that linking N and C makes it
   impossible to change C without affecting N (and hence Z) in such a
   way that it is impossible to recover M. This can be done by extending
   the protocol in the following way:

        3. X = H(C)
        4. S = X ^ E(N ^ X)

   Now, instead of sending C, the client sends C||S to the receiver. To
   decrypt, the receiver first repeats Step (3) to obtain X, then
   inverts Step (4) to obtain N: N = D(S ^ X) ^ X (where D( ·) is the
   inverse function of E( ·)).  Then, having obtained N, the receiver
   continues to decrypt C as before. If the receiver already knows N
   (e.g., in the case of a synchronized nonce), they can authenticate C
   by comparing N = D(S ^ X) ^ X to the nonce they expect.

   Let us consider what happens when a change is made to C. Let C' be a
   variant of C with one or more bits flipped. Since H( ·) is a universal
   hash function, X' = H(C' â‰  C) is random. Trying to execute D(S ^ X')
   ^ X' would result in a random N' â‰  N which in turn would result in a
   random Z' (and hence a random M'). Similarly for a change in S.

2.2 Extending to a 3-node Tor circuit

   The Tor protocol uses layered encryption to encapsulate the
  message. Generally speaking, this can be written as:

    * input: synchronized nonces (N^0, N^1, N^2), a message M = (m_0,...,m_l)
    1. (z^2_0,...,z^2_l) = CTR(N^2)
    2. (c^2_0,...,c^2_l) = (z^2_0 ^ m_0, ... z^2_l ^ m_l)
    3. (z^1_0,...,z^1_l) = CTR(N^1)
    4. (c^1_0,...,c^1_l) = (z^1_0 ^ c^2_0, ... z^1_l ^ c^2_l)
    5. (z^0_0,...,z^0_l) = CTR(N^0)
    6. (c^0_0,...,c^0_l) = (z^0_0 ^ c^1_0, ... z^0_l ^ c^0_l)

   The crypto-tagging stems from the fact that a change to C affects M
   directly since all z^j_i depend only on N^j rather than on C^j.

   An extension of the 1-layer solution presented in Section 2.1 would
   look like this:

    * Input: a nonce N, a message M = (m_0,...,m_l)
    1.  (z^2_0,...,z^2_l) = CTR(N)
    2.  (c^2_0,...,c^2_l) = (z^2_0 ^ m_0, ... z^2_l ^ m_l)
    3.  X^2 = H(C^2)
    4.  S^2 = X^2 ^ E(N^2 ^ X^2)

    5.  (z^1_0,...,z^1_l) = CTR(S^2)
    6.  (c^1_0,...,c^1_l) = (z^1_0 ^ c^2_0, ... z^1_l ^ c^2_l)
    7.  X^1 = H(C^1)
    8.  S^1 = X^1 ^ E(S^2 ^ X^1)

    9.  (z^0_0,...,z^0_l) = CTR(S^1)
    10. (c^0_0,...,c^0_l) = (z^0_0 ^ c^1_0, ... z^1_l ^ c^0_l)
    11. X^0 = H(C^0)
    12. S^0 = X^0 ^ E(S^1 ^ X^0)

   The client sends the message C^0||S^0 = ((c^0_0,...,c^0_l)||S^0) to
   the guard. To decrypt, the guard repeats Step (11) and inverts Step
   (12) to obtain S^1 which it uses to generate Z^0 and decrypt C^0 into
   C^1. The guard then forwards C^1||S^1 to the middle node which
   repeats this process and forwards C^2||S^2 to the exit. The exit
   removes the final encryption layer and processes the cell as in the
   old protocol.

   Let us now consider what happens when the crypto tagging attack is
   applied to this protocol. Without loss of generality, after inverting
   Step (11) the guard tags either C^1 or S^1 and forwards C'^1||S'^1 to
   the middle node. The middle node, unaware of the change follows the
   protocol to decrypt C'^1||S'^1 which results in a random string as
   per the explanation above. Since both CircID and CMD are not part of
   the payload, the middle node can still forward the random string
   (unaware of this fact) to the exit node. Upon receiving the random
   string, the exit node decrypts it, sees that the 'Rec' field is not
   all-zero and acts accordingly.


3. Design considerations

3.1 Choice of primitives

   We stress that the proposed protocol is primitive agnostic.

   Noting that Tor currently uses AES_CTR we tried to design a solution
   that requires only minimal changes. Most importantly, the encryption
   is still performed using CTR-mode, and can be instantiated using
   AES_CTR (however, the solution works just as well with any other
   block cipher).

   The hashing of the ciphertext requires a universal hash function. The
   GCM mode of operation uses CTR+GHash and is available from the
   OpenSSL crypto library which is already used within Tor. Any
   available universal hash function can be used instead of GHash if the
   latter introduces an unacceptable latency.

   The nonce-encryption step uses a tweakable block cipher. In the
   example above we used the XEX trick to transform a "regular" block
   cipher into a tweakable block cipher which allows reusing whatever
   underlying primitive is used in CTR-mode. A tweakable block cipher
   can be used directly (with X as the tweak) if one is available but
   this is not required.

3.2 Security requirements

   In Proposal 202, Nick Mathewson outlined the security requirements
   for any solution. We copy them here verbatim and discuss how each of
   them is addressed in the proposed solution:

      * " ... we'd like any attacker who controls a node on the circuit
        not to have a good way to learn any other nodes, even if he/she
        controls those nodes" - By construction, once processed by an
        honest node the cell's payload is completely destroyed, thus
        unlinking any relation between what is seen by nodes further
        down the circuit and the original message. An adversary
        controlling the exit node can still see that the circuit turned
        into junk (borrowing the professional jargon of Proposal 202);
        this seems unavoidable (if any of the other proposals somehow
        solved this, we would like to know so we can see if it can
        somehow be adapted here.

     * "no relay should be able to alter a cell between an honest sender
       and an honest recipient in a way that they cannot detect" - Any
       alternation of a cell between a sender and a recipient will be
       decrypted to junk and never delivered to the recipient. (**)

     * "Relay cells should be secret: nobody but the sender and
       recipient of a relay cell should be able to learn what it says."
       - since the protocol is an extension of the existing one,
       whatever secrecy was present before remains so.

     * "... Circuits should resist transparent, recoverable tagging
       attacks... " - that's the whole point. Once a change was injected
       and passed to an adjacent honest node, no node further down the
       circuit can recover the relay cell.

    * "... The above properties should apply to sequences of cells
      too... " - this one is more tricky. To the best of my
      understanding this property is currently ensured through the
      'Digest' field in the payload. Keeping this field, our solution
      can provide the same functionality as before. However,
      re-arranging the 'Rec' and 'Digest' fields in a way similar to
      Proposal 261 would reduce the overhead but would require
      developing a different solution. It seems possible though. (*)

   In addition to supporting these security requirements, this proposal
   improves Tor's E2E authentication by replacing the broken SHA-1 with
   an ENCODE-then-ENCIPHER authentication. By introducing redundancy to
   the cell (either through the 'Rec' and 'Digest' fields or otherwise)
   the exit node can verify that the cell was not altered en route. This
   is similar to what is done in Proposal 261 but without the trouble of
   using a tweakable wide-block cipher.

    (*) a possible solution would be to digest X as part of H(C) but
    this requires further discussion.

    (**) my understanding is that a single circuit can be used for
    more than one TCP stream. If this is not the case, then the
    recipient receives a random string and can identify that this is
    not a valid message.


3.3 Feature requirements


   In addition to security requirements, Proposal 202 also discusses
   some feature requirements. We discuss two of them here as the others
   seems to be trivially supported (although this needs to be verified
   by someone who understands Tor better than me).


    * "Any new approach should be able to coexist on a circuit with the
      old approach" - following the IRC discussion, we had an internal
      discussion and we think that the proposed solution works even if
      only the middle node supports the new protocol. This involves
      encrypting the nonce only for the middle nonce. We came up with
      two ways to achieve this, both have their pro's and con's and
      should be discussed once we agree on the general idea.

      Since the Crypto tagging attack requires a collusion between a
      corrupted guard and a corrupted exit, it does not make sense to
      discuss what happens when one of them runs the new protocol.

    * "Cell length needs to be constant as cells move through the
      network." - The solution was designed to allow for a fixed cell
      size. this should be discussed though.

4. Specifications
    TBD

5. Compatibility
    See Section 3.3

6. Implementation
    TBD

7. Performance and scalability notes
    TBD
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180704181609</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-07-04 18:16:09-0400</timestampReceived><subject>Re: [tor-dev] Proposal 295: Using the ATL construction for relay cryptography (solving the crypto-ta</subject><body>

Oh no!  I uploaded the wrong version of this.  I'll replace it once I
reformat the new one, but in the meantime, I'm attaching (what I hope
is) the latest version from Tomer.

["Proposal.txt" (text/plain)]

Filename: ???
Title: Using ADL-GCM for relay cryptography (solving the crypto-tagging attack)
Author: Tomer Ashur
Created: 09 Apr 2018
Status: TBD

0. Context

   Although Crypto Tagging Attacks were identified already in the original Tor \
design, it was not before the rise of the Procyonidae in 2012 that their severity was \
fully realized. In Proposal 202 (Two improved relay encryption protocols for Tor \
cells) Nick Mathewson discussed two approaches to stymie tagging attacks and \
generally improve Tor's cryptography. In Proposal 261 (AEZ for relay cryptography) \
Mathewson puts forward a concrete approach which uses the tweakable wide-block cipher \
AEZ. 

1. Motivation

	For motivations, see proposal 202.

2. Summary and preliminaries

	This proposal suggests an alternative approach to Proposal 261 using the notion of \
Release (of) Unverified Plaintexts (RUP-security). It describes an improved algorithm \
for circuit encryption based on CTR-mode which is already used in Tor, and an \
additional component for hashing. When this additional component is GHash, a \
GCM-based solution can be used from the OpenSSL library.   
	Incidentally, and similar to Proposal 261, this proposal employs the \
ENCODE-then-ENCIPHER approach thus it improves Tor's E2E integrity by using \
(sufficiently enough) redundancy.   
    For more information about the scheme and a security proof for its RUP-security \
see   Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting Authenticated Encryption \
Robustness with Minimal Modifications. CRYPTO (3) 2017: 3-33  available online at \
https://eprint.iacr.org/2017/239 .  
2.1 Cryptographic algorithms 
	As an encryption primitive we use AES. We denote one call to the primitive by E( ·), \
e.g.,  Z = E_k(X) 
	where k is a K-bit key, X is the input to AES and Z is the output. We omit k where \
it is irrelevant or is clear from context. While we propose to set K=256 to ensure \
long-term post-quantum resistance, we stress that the solution also works for other \
key lengths.   
	To encrypt, we use AES is counter mode and a nonce N to produce a random bit stream, \
e.g.,   CTR(N) = E(N)||E(N+1)||...||E(N+l) = z_1||z_2||...||Z_{n+1} = Z
	and XOR Z with the message M to produce the ciphertext C, e.g., 
		C = Z ^ M
	
	For authentication, we use the universal hash function GHASH and a key k, e.g., 
		T = H(K||X) = H_k(X)
	where K is a 256-bit key, X an arbitrary length string, and T a unique \
authentication tag for X. While we propose to set K=256 to ensure long-term \
post-quantum resistance, we stress that the solution works for any universal hash \
function as well as for keys of length K!=256.  
3. The proposed solution

3.1 An overview of the proposed solution
   
   Noting that in CTR-mode the nonce is essential for the encryption/decryption \
operations, the proposed solution is based on linking the nonce and the transmitted \
data in such a way that any change to the data (e.g., through a tagging attack) \
randomizes the nonce and results in a random value Z' != Z for CTR(N' != N).

3.1.1 'Forward' direction (same direction as CREATE):

   When preparing a message to be sent in the forward direction, the client is \
responsible for encrypting all layers. The client starts by digesting the message to \
create a synthetic tweak T_0 = H_{k_fM}(M) and uses this tweak to encrypt an all-zero \
string to create a synthetic IV: S_0 = T_0 ^ E_{k_fE}(0 ^ T_0).  
   The message and the synthetic IV (i.e., M||S_0) are passed as input to the first \
encryption layer which uses S_0 to produce the random stream Z = CTR_k1(S_0) and the \
ciphertext C = Z ^ M. Then, a tweak T = H_k2(C) is generated by digesting the \
ciphertext of this layer. Finally, S_0 is encrypted using AES and the tweak T to \
produce an encrypted nonce S = T ^ E_k3(N ^ T) which is appended to the the \
ciphertext and is used as the nonce for the next encryption layer.   
   After encrypting 3 times, the client sends C||S to the guard. Whereas the protocol \
previously required that the nonce be kept in sync between each node and the client, \
this is no longer required as it can now be recovered from C||S. To decrypt, the node \
first computes T = H_k2(C) then uses it to obtain S = D_k3(S ^ T) ^ T. Finally, \
CTR(S) is used to decrypt C into M. The once-decrypted nonce is appended to the data \
and M||S is sent to the next node which repeats this process.  
   The exit verifies the integrity of the message by digesting it and using the \
resulting T to decrypt S_0 into N. If N=0, the message is authenticated. Otherwise, \
if the message has been changed by an adversary, N!=0 and the circuit is destroyed.   \
 3.1.2 'Back' direction (opposite direction from CREATE):
   
   When sending back a message from the exit to the client, each node adds an \
additional layer of encryption. The exit starts by digesting the message to create a \
synthetic tweak T_0 = H_{k_bM}(M) and uses this tweak to encrypt an all-zero string \
to create a synthetic IV: S_0 = T_0 ^ E_{k_bE}(0 ^ T_0). The synthetic IV is then \
used to produce the random stream Z = CTR_k1(S_0) and uses that to encrypt the \
plaintext through C = Z ^ M. The nonce is appended to the ciphertext and C||S_0 is \
sent to the next node.   
   Receiving a message from the exit, the middle starts by producing a tweak T = \
H_k2(C). The tweak is then used to encrypt the nonce through S = T ^ E_k3(N ^ T) \
which is then used to produce the random stream Z' = CTR_k1(S). Finally, the message \
is encrypted via C' = Z' ^ C and the encrypted nonce is appended to C'. The message \
C'||S is sent to the next node which repeats this procedure.   
   When the message arrives at the client, the client peels each layer using the \
nonce that is appended at the end of the message. The decrypted layer is used to \
compute the tweak T = H_k2(P), which is used to decrypt this layer's nonce into the \
next layer's nonce.   
   The client verifies the integrity of the message by digesting it and using the \
resulting T to decrypt S_0 into N. If N=0, the message is authenticated. Otherwise, \
if the message has been changed by an adversary, N!=0 and the circuit is destroyed.   \
 3.2 Circuit management

3.2.1 Creating circuits
	
	The general process of creating a circuit remains the same (see tor-spec.txt), \
except for step 5 where instead of creating a pair of keys (kf_1,kb_1) for forward \
and backward communication, respectively, 2 triplets of keys (kf_1,kf_2,kf_3) and \
(kb_1,kb_2,kb_3) are created for communication in the forward and backward \
directions, respectively. Two additional pairs of "authentication keys" (k_fM,k_fE) \
and (k_bM,k_bE) are created between the client and the exit in the forward and \
backward directions, respectively.   
	note: the keys can be created by running KDF-RFC5869 3 times in each direction, or \
by running it once in each direction to create a master-key and derive the rest as \
subkeys from this master key

3.2.2 Routing relay cells

	When an OR receives a RELAY or RELAY_EARLY cell, it checks the cell's circID and \
determines whether it has a corresponding circuit along that connection.  If not, the \
OR drops the cell.  
	Otherwise, if the OR is not at the OP edge of the circuit (that is, either an 'exit \
node' or a non-edge node), it de/encrypts the payload with the stream cipher, as \
follows (the message structure is C||S):  
		'Forward' relay cell (same direction as CREATE) (input structure is: C||S):
            1. T = H_{kf_2}(T'||C); digest ciphertext (T' is a running digest of all \
previous cells, i.e., last round's T)  2. N = T ^ D_{kf_3}(S ^ T); decrypt nonce
			3. M = CTR_{kf_1}(N) ^ C; decrypt message
		(output structure is M||N)
        
		'Back' relay cell (opposite direction from CREATE) (input structure is: M||N):
			1. T = H_{kb_2}(T'||M); digest ciphertext (T' is a running digest of all previous \
cells, i.e., last round's T)  2. S = T ^ E_{kb_3}(N ^ T); encrypt nonce
			3. C = CTR_{kb_1}(S) ^ M; encrypt message
		(output structure is C||S)
	
	Note that in counter mode, decrypt (D) and encrypt (E) are the same operation.

   The OR then decides whether it recognizes the relay cell, by
   inspecting the payload as described in Section 4.1 below.  If the OR
   recognizes the cell, it processes the contents of the relay cell.
   Otherwise, it passes the decrypted relay cell along the circuit if
   the circuit continues.  If the OR at the end of the circuit
   encounters an unrecognized relay cell, an error has occurred: the OR
   sends a DESTROY cell to tear down the circuit.   
   
4. Application connections and stream management

4.1 Relay cells
	Within a circuit, the OP and the exit node use the contents of RELAY packets to \
tunnel end-to-end commands and TCP connections ("Streams") across circuits.  \
End-to-end commands can be initiated by either edge; streams are initiated by the OP.

	The payload of each unencrypted RELAY cell consists of:
		Relay command           [1 byte]
		'Recognized'            [2 bytes]
		StreamID                [2 bytes]
		Length                  [2 bytes]
		Data                    [PAYLOAD_LEN-23 bytes]
	
	The 'recognized' field is used for a simple indication if the cell still encrypted \
or not. When sending cells, the unencrypted 'recognized' MUST be set to zero.  
	When receiving and decrypting cells the 'recognized' will always be zero if we're \
the endpoint that the cell is destined for.  For cells that we should relay, the \
'recognized' field will usually be nonzero, but will accidentally be zero with \
P=2^-32.  
	The old Digest field is removed, since sufficient information for authentication is \
now included in the all-zero string used to create the nonce for the first encryption \
layer. 

	The 'Length' field of a relay cell contains the number of bytes in the relay payload \
which contain real payload data. The remainder of the payload is padded with NUL \
bytes.   
4.2 Appending the encrypted nonce 
	
	When a cell is prepared by the client to be sent in the 'forward' direction, as \
explained in Section 3.2.2, the encrypted nonce S is appended to the encrypted cell \
(occupying the last 16 bytes of the cell). If the cell is prepared to be sent to a \
node supporting the new protocol, S is used as the nonce for the next round's \
encryption. Otherwise, if the next node only supports the old protocol, S is still \
appended to the encrypted cell, but a synchronized nonce (as per the old protocol) is \
used for encryption.   
	When a cell is sent along the circuit in the 'backward' direction, nodes supporting \
the new protocol always assume that the last 16 bytes of the input are the nonce used \
by the previous node, which they process as per Section 3.2.2. If the previous node \
also supports the new protocol, these cells are indeed the nonce. If the previous \
node only supports the old protocol, these bytes are either encrypted NUL bytes or \
encrypted data. 

4.3 Authenticating the message
	End-to-end authentication is performed in both directions in the same way. Once the \
final layer of encryption is removed, the message-to-be-authenticated is digested and \
this digest is used to decrypt the nonce used in this layer. If the decrypted nonce \
is all-zero, the message is authentic. Otherwise, if a change was made to the \
ciphertext or the encrypted nonce somewhere along the circuit, the nonce decrypts \
into a random value and the circuit is destroyed. 


[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704204231</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-07-04 20:42:31-0400</timestampReceived><subject>Re: [tor-dev] Proposal 295: Using the ATL construction for relay cryptography (solving the crypto-ta</subject><body>

Here is (I hope) the correct version of this proposal, reformatted.
Filename: 295-relay-crypto-with-atl.txt
Title: Using ADL-GCM for relay cryptography (solving the crypto-tagging attack)
Author: Tomer Ashur
Created: 09 Apr 2018
Status: Open

0. Context

   Although Crypto Tagging Attacks were identified already in the
   original Tor design, it was not before the rise of the Procyonidae in
   2012 that their severity was fully realized. In Proposal 202 (Two
   improved relay encryption protocols for Tor cells) Nick Mathewson
   discussed two approaches to stymie tagging attacks and generally
   improve Tor's cryptography. In Proposal 261 (AEZ for relay
   cryptography) Mathewson puts forward a concrete approach which uses
   the tweakable wide-block cipher AEZ.

1. Motivation

   For motivations, see proposal 202.

2. Summary and preliminaries

   This proposal suggests an alternative approach to Proposal 261 using
   the notion of Release (of) Unverified Plaintexts (RUP-security). It
   describes an improved algorithm for circuit encryption based on
   CTR-mode which is already used in Tor, and an additional component
   for hashing. When this additional component is GHash, a GCM-based
   solution can be used from the OpenSSL library.

   Incidentally, and similar to Proposal 261, this proposal employs the
   ENCODE-then-ENCIPHER approach thus it improves Tor's E2E integrity by
   using (sufficiently enough) redundancy.

   For more information about the scheme and a security proof for its
   RUP-security see

       Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting Authenticated
       Encryption Robustness with Minimal Modifications. CRYPTO (3)
       2017: 3-33 available online at https://eprint.iacr.org/2017/239 .

2.1. Cryptographic algorithms

   As an encryption primitive we use AES. We denote one call to the
   primitive by E( ·), e.g.,

       Z = E_k(X)

   where k is a K-bit key, X is the input to AES and Z is the output. We
   omit k where it is irrelevant or is clear from context. While we
   propose to set K=256 to ensure long-term post-quantum resistance, we
   stress that the solution also works for other key lengths.

   To encrypt, we use AES is counter mode and a nonce N to produce a
   random bit stream, e.g.,

       CTR(N) = E(N)||E(N+1)||...||E(N+l) = z_1||z_2||...||Z_{n+1} = Z

   and XOR Z with the message M to produce the ciphertext C, e.g.,

       C = Z ^ M

   For authentication, we use the universal hash function GHASH and a
   key k, e.g.,

       T = H(K||X) = H_k(X)

   where K is a 256-bit key, X an arbitrary length string, and T a
   unique authentication tag for X. While we propose to set K=256 to
   ensure long-term post-quantum resistance, we stress that the solution
   works for any universal hash function as well as for keys of length
   K!=256.

3. The proposed solution

3.1 An overview of the proposed solution

   Noting that in CTR-mode the nonce is essential for the
   encryption/decryption operations, the proposed solution is based on
   linking the nonce and the transmitted data in such a way that any
   change to the data (e.g., through a tagging attack) randomizes the
   nonce and results in a random value Z' != Z for CTR(N' != N).

3.1.1. 'Forward' direction (same direction as CREATE):

   When preparing a message to be sent in the forward direction, the
   client is responsible for encrypting all layers. The client starts by
   digesting the message to create a synthetic tweak T_0 = H_{k_fM}(M)
   and uses this tweak to encrypt an all-zero string to create a
   synthetic IV: S_0 = T_0 ^ E_{k_fE}(0 ^ T_0).

   The message and the synthetic IV (i.e., M||S_0) are passed as input
   to the first encryption layer which uses S_0 to produce the random
   stream Z = CTR_k1(S_0) and the ciphertext C = Z ^ M. Then, a tweak T
   = H_k2(C) is generated by digesting the ciphertext of this
   layer. Finally, S_0 is encrypted using AES and the tweak T to produce
   an encrypted nonce S = T ^ E_k3(N ^ T) which is appended to the the
   ciphertext and is used as the nonce for the next encryption layer.

   After encrypting 3 times, the client sends C||S to the guard. Whereas
   the protocol previously required that the nonce be kept in sync
   between each node and the client, this is no longer required as it
   can now be recovered from C||S. To decrypt, the node first computes T
   = H_k2(C) then uses it to obtain S = D_k3(S ^ T) ^ T. Finally, CTR(S)
   is used to decrypt C into M. The once-decrypted nonce is appended to
   the data and M||S is sent to the next node which repeats this
   process.

   The exit verifies the integrity of the message by digesting it and
   using the resulting T to decrypt S_0 into N. If N=0, the message is
   authenticated. Otherwise, if the message has been changed by an
   adversary, N!=0 and the circuit is destroyed.

3.1.2 'Back' direction (opposite direction from CREATE):

   When sending back a message from the exit to the client, each node
   adds an additional layer of encryption. The exit starts by digesting
   the message to create a synthetic tweak T_0 = H_{k_bM}(M) and uses
   this tweak to encrypt an all-zero string to create a synthetic IV:
   S_0 = T_0 ^ E_{k_bE}(0 ^ T_0). The synthetic IV is then used to
   produce the random stream Z = CTR_k1(S_0) and uses that to encrypt
   the plaintext through C = Z ^ M. The nonce is appended to the
   ciphertext and C||S_0 is sent to the next node.

   Receiving a message from the exit, the middle starts by producing a
   tweak T = H_k2(C). The tweak is then used to encrypt the nonce
   through S = T ^ E_k3(N ^ T) which is then used to produce the random
   stream Z' = CTR_k1(S). Finally, the message is encrypted via C' = Z'
   ^ C and the encrypted nonce is appended to C'. The message C'||S is
   sent to the next node which repeats this procedure.

   When the message arrives at the client, the client peels each layer
   using the nonce that is appended at the end of the message. The
   decrypted layer is used to compute the tweak T = H_k2(P), which is
   used to decrypt this layer's nonce into the next layer's nonce.

   The client verifies the integrity of the message by digesting it and using
   the resulting T to decrypt S_0 into N. If N=0, the message is
   authenticated. Otherwise, if the message has been changed by an adversary,
   N!=0 and the circuit is destroyed.

3.2 Circuit management

3.2.1 Creating circuits

   The general process of creating a circuit remains the same (see
   tor-spec.txt), except for step 5 where instead of creating a pair of
   keys (kf_1,kb_1) for forward and backward communication,
   respectively, 2 triplets of keys (kf_1,kf_2,kf_3) and
   (kb_1,kb_2,kb_3) are created for communication in the forward and
   backward directions, respectively. Two additional pairs of
   "authentication keys" (k_fM,k_fE) and (k_bM,k_bE) are created between
   the client and the exit in the forward and backward directions,
   respectively.

   note: the keys can be created by running KDF-RFC5869 3 times in each
   direction, or by running it once in each direction to create a
   master-key and derive the rest as subkeys from this master key

3.2.2 Routing relay cells

   When an OR receives a RELAY or RELAY_EARLY cell, it checks the cell's
   circID and determines whether it has a corresponding circuit along
   that connection.  If not, the OR drops the cell.

   Otherwise, if the OR is not at the OP edge of the circuit (that is,
   either an 'exit node' or a non-edge node), it de/encrypts the payload
   with the stream cipher, as follows (the message structure is C||S):

      'Forward' relay cell (same direction as CREATE)
      (input structure is: C||S):

       1. T = H_{kf_2}(T'||C); digest ciphertext (T' is a running digest
          of all previous cells, i.e., last round's T)

       2. N = T ^ D_{kf_3}(S ^ T); decrypt nonce

       3. M = CTR_{kf_1}(N) ^ C; decrypt message
          (output structure is M||N)

       'Back' relay cell (opposite direction from CREATE)
       (input structure is: M||N):

       1. T = H_{kb_2}(T'||M); digest ciphertext (T' is a running digest
          of all previous cells, i.e., last round's T)

       2. S = T ^ E_{kb_3}(N ^ T); encrypt nonce

       3. C = CTR_{kb_1}(S) ^ M; encrypt message
          (output structure is C||S)

   Note that in counter mode, decrypt (D) and encrypt (E) are the same
   operation.

   The OR then decides whether it recognizes the relay cell, by
   inspecting the payload as described in Section 4.1 below.  If the OR
   recognizes the cell, it processes the contents of the relay cell.
   Otherwise, it passes the decrypted relay cell along the circuit if
   the circuit continues.  If the OR at the end of the circuit
   encounters an unrecognized relay cell, an error has occurred: the OR
   sends a DESTROY cell to tear down the circuit.

4. Application connections and stream management

4.1 Relay cells

   Within a circuit, the OP and the exit node use the contents of RELAY
   packets to tunnel end-to-end commands and TCP connections ("Streams")
   across circuits.  End-to-end commands can be initiated by either
   edge; streams are initiated by the OP.

        The payload of each unencrypted RELAY cell consists of:
                Relay command           [1 byte]
                'Recognized'            [2 bytes]
                StreamID                [2 bytes]
                Length                  [2 bytes]
                Data                    [PAYLOAD_LEN-23 bytes]

   The 'recognized' field is used for a simple indication if the cell
   still encrypted or not. When sending cells, the unencrypted
   'recognized' MUST be set to zero.

   When receiving and decrypting cells the 'recognized' will always be
   zero if we're the endpoint that the cell is destined for.  For cells
   that we should relay, the 'recognized' field will usually be nonzero,
   but will accidentally be zero with P=2^-32.

   The old Digest field is removed, since sufficient information for
   authentication is now included in the all-zero string used to create the
   nonce for the first encryption layer.

   The 'Length' field of a relay cell contains the number of bytes in
   the relay payload which contain real payload data. The remainder of
   the payload is padded with NUL bytes.

4.2 Appending the encrypted nonce

   When a cell is prepared by the client to be sent in the 'forward'
   direction, as explained in Section 3.2.2, the encrypted nonce S is
   appended to the encrypted cell (occupying the last 16 bytes of the
   cell). If the cell is prepared to be sent to a node supporting the
   new protocol, S is used as the nonce for the next round's
   encryption. Otherwise, if the next node only supports the old
   protocol, S is still appended to the encrypted cell, but a
   synchronized nonce (as per the old protocol) is used for encryption.

   When a cell is sent along the circuit in the 'backward' direction,
   nodes supporting the new protocol always assume that the last 16
   bytes of the input are the nonce used by the previous node, which
   they process as per Section 3.2.2. If the previous node also supports
   the new protocol, these cells are indeed the nonce. If the previous
   node only supports the old protocol, these bytes are either encrypted
   NUL bytes or encrypted data.

4.3 Authenticating the message

   End-to-end authentication is performed in both directions in the same
   way. Once the final layer of encryption is removed, the
   message-to-be-authenticated is digested and this digest is used to
   decrypt the nonce used in this layer. If the decrypted nonce is
   all-zero, the message is authentic. Otherwise, if a change was made
   to the ciphertext or the encrypted nonce somewhere along the circuit,
   the nonce decrypts into a random value and the circuit is destroyed.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180720072742</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-20 07:27:42-0400</timestampReceived><subject>Re: [tor-dev] Proposal 295: Using the ATL construction for relay cryptography (solving the crypto-ta</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

A few of us discussed this proposal in the #tor-dev IRC earlier this week.

There are still a few things in the proposal that we found confusing.
(Some of these things are our mistakes in tor-spec, which were copied
to the proposal. We're working on fixing them in tor-spec.)

Once the proposal has been revised, we would like to:
* try condensing the proposal into an algorithm in pseudocode
* estimate how it will perform compared to Tor's current relay crypto
* write a tor-spec patch based on the proposal


Here's a summary of our feedback:


Changing the Proposal Structure

We're confused by 3.1 and 3.2, which seem to be duplicate sections using
different notation.

We think the following structure would help us understand the proposal
better:
* 3.1. Describe key derivation for a single hop circuit, like tor-spec
       section 5.2.2 at:
       https://github.com/torproject/torspec/blob/master/tor-spec.txt#L1210
* 3.2. Describe encryption and decryption for a single-hop circuit, like
       tor-spec sections 0.3 and 0.4 at:
       https://github.com/torproject/torspec/blob/master/tor-spec.txt#L77
       https://github.com/torproject/torspec/blob/master/tor-spec.txt#L124
* 3.3. Describe encryption and decryption for multi-hop circuits, based on
       the latest tor-spec section 5.5 at:
       https://github.com/torproject/torspec/pull/27/files#diff-390fa89f5c74e769e6e5bef55fc1918bR1366


Making Re-Keying and Tweaking more Explicit

Tor's current cell crypto keeps the AES-CTR counters synchronized and
incrementing, while this proposal sems to derive them from the cell
contents.

In this proposal, we had trouble working out:
* when the AES is re-keyed vs tweaked
* when the GHASH is re-keyed vs updated

So we wondered if the proposed scheme is not IND-CPA. i.e., if the client
repeats a plaintext cell, it will produce identical ciphertext cells,
because the AES-CTR nonce is based solely on the message and keys.

We think the new structure will be clearer, because the re-keying should
all be in section 3.1, and the tweaks/updates should be in section 3.2.


Generalising to Different Numbers of Hops

The proposal assumes that all circuits are 3-hop circuits, but Tor typically
builds 1, 3, 4, and 5-hop circuits. Also, Tor currently generates the same
number of keys for each hop. There's no way it can just generate kf_M, kf_E,
kb_M, and kb_E for the final hop, because sometimes the final hop changes.
(Due to circuit cannibalisation, or failed intro extension.)

Please generalise the proposal so that:
* all references to "3-hop circuit" are changed to "N-hop circuit".
* all references to kf_1,2,3, kb_1,2,3, k_fM, k_fE, k_bM and k_bE;
  are changed to kf_N, kb_N, kfM_N, kfE_N, kbM_N and kbE_N.

Do we really need 6 keys per hop?
It's ok if we do, let's make sure there are no redundant keys.


Explaining which Hops do Integrity Checks

Are kfM_N, kfE_N, kbM_N and kbE_N only used for the innermost encryption and
decryption?  (That is, when N is the client's target hop, or the cell is sent
from hop N to the client.)
If so, please explain that the integrity checks only apply to the lowest
layer, and how this is secure.
If we can do the integrity checks for each layer, perhaps we should, because
then we are protecting against tagging attacks on some nodes, even when the
exit doesn't support the protocol.

For example, in a standard 3-hop circuit:
C = G = M - E
Where:
= means end-to-end integrity checks
- means no integrity checks
If C and M support the proposed protocol, can they protect against tagging
between G and E, even if G and E don't support the proposed protocol?
(Perhaps this could be a good example for the proposal?)


Protecting Onion Services

When onion services communicate with clients, we want to make sure that
they aren't vulnerable to tagging attacks.

For example, in a standard onion service rendezvous, two circuits are
spliced at the rendezvous point R:
C = G = M1 = R ~ M2 ~ M3 ~ G ~ S
Where:
= means end-to-end integrity checks between C and R
~ means end-to-end integrity checks between S and R
- means no integrity checks

We think that the cells from C to S are protected from tagging, if the
C to R and S to R circuits are protected from tagging, because tagging
requires two unprotected nodes, one to add the tag, and one to remove it.
(Also, like the scenario above with the exit circuit, if some of the hops
support the protocol, then any hops closer to the client or service can't
add or remove tags.)

If onion services are protected, let's explain that in the proposal.


Minor Stylistic Comments

We're not used to the notation that you're using, so it's hard for us
to follow some sections.

In particular:
* Using the notation X||Y to represent a tuple of arguments to an
  operation is confusing, because || usually means concatenation.
  (e.g., H(K||X) should probably be H(K, X) because GHASH doesn't do a
  simple concatentation of K and X)
* The capitalization of "K" vs "k" is inconsistent, so it's hard to
  tell if keys are the same or different.


Here are some of our notes for our future reference:

Impact on Relay Performance

We would like to estimate how the proposed encryption will perform,
compared to Tor's current relay crypto.

We think the proposed scheme could be faster, because:
* If we can throw out SHA1, we're saving a lot in practice: SHA1 is
  expensive compared to AES_CTR on current cpus
* We should figure this out with the assumption that we do/don't have
  aesni and/or carryless-multiply
  * If we have a no-carry multiply (*CLMUL*), fast ghash is  easy
  * If not, it's a bit of a dark art to get it without timing sidechannels

It looks like we trade 1 SHA1 for N+1 GHASHes, where N is the number of
hops. (GHASH is much faster than SHA1, we think more than 3x.)


Here are some other minor corrections or questions, inline on the proposal:

&gt; On 5 Jul 2018, at 06:42, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Here is (I hope) the correct version of this proposal, reformatted.
&gt; Filename: 295-relay-crypto-with-atl.txt
&gt; Title: Using ADL-GCM for relay cryptography (solving the crypto-tagging attack)
&gt; Author: Tomer Ashur
&gt; Created: 09 Apr 2018
&gt; Status: Open
&gt; 
&gt; 0. Context
&gt; 
&gt;  Although Crypto Tagging Attacks were identified already in the
&gt;  original Tor design, it was not before the rise of the Procyonidae in
&gt;  2012 that their severity was fully realized. In Proposal 202 (Two
&gt;  improved relay encryption protocols for Tor cells) Nick Mathewson
&gt;  discussed two approaches to stymie tagging attacks and generally
&gt;  improve Tor's cryptography. In Proposal 261 (AEZ for relay
&gt;  cryptography) Mathewson puts forward a concrete approach which uses
&gt;  the tweakable wide-block cipher AEZ.
&gt; 
&gt; 1. Motivation
&gt; 
&gt;  For motivations, see proposal 202.
&gt; 
&gt; 2. Summary and preliminaries
&gt; 
&gt;  This proposal suggests an alternative approach to Proposal 261 using
&gt;  the notion of Release (of) Unverified Plaintexts (RUP-security). It
&gt;  describes an improved algorithm for circuit encryption based on
&gt;  CTR-mode which is already used in Tor, and an additional component
&gt;  for hashing. When this additional component is GHash, a GCM-based
&gt;  solution can be used from the OpenSSL library.
&gt; 
&gt;  Incidentally, and similar to Proposal 261, this proposal employs the
&gt;  ENCODE-then-ENCIPHER approach thus it improves Tor's E2E integrity by
&gt;  using (sufficiently enough) redundancy.
&gt; 
&gt;  For more information about the scheme and a security proof for its
&gt;  RUP-security see
&gt; 
&gt;      Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting Authenticated
&gt;      Encryption Robustness with Minimal Modifications. CRYPTO (3)
&gt;      2017: 3-33 available online at https://eprint.iacr.org/2017/239 .
&gt; 
&gt; 2.1. Cryptographic algorithms
&gt; 
&gt;  As an encryption primitive we use AES. We denote one call to the
&gt;  primitive by E( ·), e.g.,
&gt; 
&gt;      Z = E_k(X)
&gt; 
&gt;  where k is a K-bit key, X is the input to AES and Z is the output. We
&gt;  omit k where it is irrelevant or is clear from context. While we
&gt;  propose to set K=256 to ensure long-term post-quantum resistance, we
&gt;  stress that the solution also works for other key lengths.
&gt; 
&gt;  To encrypt, we use AES is counter mode and a nonce N to produce a
&gt;  random bit stream, e.g.,
&gt; 
&gt;      CTR(N) = E(N)||E(N+1)||...||E(N+l) = z_1||z_2||...||Z_{n+1} = Z
&gt; 
&gt;  and XOR Z with the message M to produce the ciphertext C, e.g.,
&gt; 
&gt;      C = Z ^ M
&gt; 
&gt;  For authentication, we use the universal hash function GHASH and a
&gt;  key k, e.g.,
&gt; 
&gt;      T = H(K||X) = H_k(X)
&gt; 
&gt;  where K is a 256-bit key, X an arbitrary length string, and T a
&gt;  unique authentication tag for X. While we propose to set K=256 to
&gt;  ensure long-term post-quantum resistance, we stress that the solution
&gt;  works for any universal hash function as well as for keys of length
&gt;  K!=256.
&gt; 
&gt; 3. The proposed solution
&gt; 
&gt; 3.1 An overview of the proposed solution
&gt; 
&gt;  Noting that in CTR-mode the nonce is essential for the
&gt;  encryption/decryption operations, the proposed solution is based on
&gt;  linking the nonce and the transmitted data in such a way that any
&gt;  change to the data (e.g., through a tagging attack) randomizes the
&gt;  nonce and results in a random value Z' != Z for CTR(N' != N).
&gt; 
&gt; 3.1.1. 'Forward' direction (same direction as CREATE):
&gt; 
&gt;  When preparing a message to be sent in the forward direction, the
&gt;  client is responsible for encrypting all layers. The client starts by
&gt;  digesting the message to create a synthetic tweak T_0 = H_{k_fM}(M)
&gt;  and uses this tweak to encrypt an all-zero string to create a
&gt;  synthetic IV: S_0 = T_0 ^ E_{k_fE}(0 ^ T_0).
&gt; 
&gt;  The message and the synthetic IV (i.e., M||S_0) are passed as input
&gt;  to the first encryption layer which uses S_0 to produce the random
&gt;  stream Z = CTR_k1(S_0) and the ciphertext C = Z ^ M. Then, a tweak T
&gt;  = H_k2(C) is generated by digesting the ciphertext of this
&gt;  layer. Finally, S_0 is encrypted using AES and the tweak T to produce
&gt;  an encrypted nonce S = T ^ E_k3(N ^ T) which is appended to the the

Duplicate word "the the".

Also the N should probably be S_0.

&gt;  ciphertext and is used as the nonce for the next encryption layer.
&gt; 
&gt;  After encrypting 3 times, the client sends C||S to the guard. Whereas

Some circuits are not 3 hops, see above.

Entry nodes can be bridges or guards or a random node (when UseEntryGuards
is 0). So let's say "entry", not "guard".

&gt;  the protocol previously required that the nonce be kept in sync
&gt;  between each node and the client, this is no longer required as it
&gt;  can now be recovered from C||S. To decrypt, the node first computes T
&gt;  = H_k2(C) then uses it to obtain S = D_k3(S ^ T) ^ T. Finally, CTR(S)

should be S_0 = D_k3(S ^ T) ^ T and CTR_k1(S_0)?

&gt;  is used to decrypt C into M. The once-decrypted nonce is appended to
&gt;  the data and M||S is sent to the next node which repeats this
&gt;  process.
&gt; 
&gt;  The exit verifies the integrity of the message by digesting it and

End nodes can be exits or directories or intro or rend nodes.
This is an existing problem in tor-spec, see:
https://trac.torproject.org/projects/tor/ticket/26885

&gt;  using the resulting T to decrypt S_0 into N. If N=0, the message is
&gt;  authenticated. Otherwise, if the message has been changed by an
&gt;  adversary, N!=0 and the circuit is destroyed.
&gt; 
&gt; 3.1.2 'Back' direction (opposite direction from CREATE):
&gt; 
&gt;  When sending back a message from the exit to the client, each node
&gt;  adds an additional layer of encryption. The exit starts by digesting
&gt;  the message to create a synthetic tweak T_0 = H_{k_bM}(M) and uses
&gt;  this tweak to encrypt an all-zero string to create a synthetic IV:
&gt;  S_0 = T_0 ^ E_{k_bE}(0 ^ T_0). The synthetic IV is then used to
&gt;  produce the random stream Z = CTR_k1(S_0) and uses that to encrypt
&gt;  the plaintext through C = Z ^ M. The nonce is appended to the
&gt;  ciphertext and C||S_0 is sent to the next node.
&gt; 
&gt;  Receiving a message from the exit, the middle starts by producing a
&gt;  tweak T = H_k2(C). The tweak is then used to encrypt the nonce
&gt;  through S = T ^ E_k3(N ^ T) which is then used to produce the random
&gt;  stream Z' = CTR_k1(S). Finally, the message is encrypted via C' = Z'
&gt;  ^ C and the encrypted nonce is appended to C'. The message C'||S is
&gt;  sent to the next node which repeats this procedure.

Some circuits are not 3 hops, see above.

&gt;  When the message arrives at the client, the client peels each layer
&gt;  using the nonce that is appended at the end of the message. The
&gt;  decrypted layer is used to compute the tweak T = H_k2(P), which is
&gt;  used to decrypt this layer's nonce into the next layer's nonce.

During our review, we noticed that the decryption order in tor-spec is
wrong, so we fixed it:
https://trac.torproject.org/projects/tor/ticket/26860

It looks like this proposal has the correct order, but we think it will be
clearer if it is re-structured. (See above.)

&gt;  The client verifies the integrity of the message by digesting it and using
&gt;  the resulting T to decrypt S_0 into N. If N=0, the message is
&gt;  authenticated. Otherwise, if the message has been changed by an adversary,
&gt;  N!=0 and the circuit is destroyed.
&gt; 
&gt; 3.2 Circuit management
&gt; 
&gt; 3.2.1 Creating circuits
&gt; 
&gt;  The general process of creating a circuit remains the same (see
&gt;  tor-spec.txt), except for step 5 where instead of creating a pair of
&gt;  keys (kf_1,kb_1) for forward and backward communication,
&gt;  respectively, 2 triplets of keys (kf_1,kf_2,kf_3) and
&gt;  (kb_1,kb_2,kb_3) are created for communication in the forward and
&gt;  backward directions, respectively.

Some circuits are not 3 hops, see above.

&gt; Two additional pairs of
&gt;  "authentication keys" (k_fM,k_fE) and (k_bM,k_bE) are created between
&gt;  the client and the exit in the forward and backward directions,

We think we might need these keys for each node, not just the exit.
(See above.)

&gt;  respectively.
&gt; 
&gt;  note: the keys can be created by running KDF-RFC5869 3 times in each
&gt;  direction, or by running it once in each direction to create a
&gt;  master-key and derive the rest as subkeys from this master key

Let's use the same construction as tor-spec to derive the keys, but
generate more data when we need more keys.

&gt; 3.2.2 Routing relay cells
&gt; 
&gt;  When an OR receives a RELAY or RELAY_EARLY cell, it checks the cell's
&gt;  circID and determines whether it has a corresponding circuit along
&gt;  that connection.  If not, the OR drops the cell.

This paragraph is copied from tor-spec.txt.
I think we can drop it from the proposal, and reference tor-spec instead.

&gt;  Otherwise, if the OR is not at the OP edge of the circuit (that is,
&gt;  either an 'exit node' or a non-edge node), it de/encrypts the payload
&gt;  with the stream cipher,

This sentence is copied from tor-spec.txt.
It's confusing by itself.

The corresponding section in tor-spec.txt contains some errors.
And it's also hard to read.

We opened a ticket for this issue:
https://trac.torproject.org/projects/tor/ticket/26859

And then we fixed it in this ticket, because the modified the same sections:
https://trac.torproject.org/projects/tor/ticket/26860

We'd like to see the proposal revised so it matches the new tor-spec structure:
* forward encryption at the client
* forward decryption at ORs
* backward encryption at the end (exit)
* backward decryption at the client

&gt; as follows (the message structure is C||S):
&gt; 
&gt;     'Forward' relay cell (same direction as CREATE)
&gt;     (input structure is: C||S):
&gt; 
&gt;      1. T = H_{kf_2}(T'||C); digest ciphertext (T' is a running digest
&gt;         of all previous cells, i.e., last round's T)
&gt; 
&gt;      2. N = T ^ D_{kf_3}(S ^ T); decrypt nonce
&gt; 
&gt;      3. M = CTR_{kf_1}(N) ^ C; decrypt message
&gt;         (output structure is M||N)
&gt; 
&gt;      'Back' relay cell (opposite direction from CREATE)
&gt;      (input structure is: M||N):
&gt; 
&gt;      1. T = H_{kb_2}(T'||M); digest ciphertext (T' is a running digest
&gt;         of all previous cells, i.e., last round's T)
&gt; 
&gt;      2. S = T ^ E_{kb_3}(N ^ T); encrypt nonce
&gt; 
&gt;      3. C = CTR_{kb_1}(S) ^ M; encrypt message
&gt;         (output structure is C||S)

Is T' the previous T (tweak) held over as a piece of state?

Because the "running digest" doesn't seem to be the internal state of
a digest algorithm.

&gt;  Note that in counter mode, decrypt (D) and encrypt (E) are the same
&gt;  operation.

This paragraph is copied from tor-spec.txt.
In this context, it's incorrect.

&gt;  The OR then decides whether it recognizes the relay cell, by
&gt;  inspecting the payload as described in Section 4.1 below.  If the OR
&gt;  recognizes the cell, it processes the contents of the relay cell.
&gt;  Otherwise, it passes the decrypted relay cell along the circuit if
&gt;  the circuit continues.  If the OR at the end of the circuit
&gt;  encounters an unrecognized relay cell, an error has occurred: the OR
&gt;  sends a DESTROY cell to tear down the circuit.

This paragraph is copied from tor-spec.txt.
I think we can drop it from the proposal, and reference tor-spec instead.

&gt; 4. Application connections and stream management
&gt; 
&gt; 4.1 Relay cells
&gt; 
&gt;  Within a circuit, the OP and the exit node use the contents of RELAY
&gt;  packets to tunnel end-to-end commands and TCP connections ("Streams")
&gt;  across circuits.  End-to-end commands can be initiated by either
&gt;  edge; streams are initiated by the OP.
&gt; 
&gt;       The payload of each unencrypted RELAY cell consists of:
&gt;               Relay command           [1 byte]
&gt;               'Recognized'            [2 bytes]
&gt;               StreamID                [2 bytes]
&gt;               Length                  [2 bytes]
&gt;               Data                    [PAYLOAD_LEN-23 bytes]
&gt; 
&gt;  The 'recognized' field is used for a simple indication if the cell
&gt;  still encrypted or not. When sending cells, the unencrypted
&gt;  'recognized' MUST be set to zero.

We revised this paragraph in tor-spec, see below.

Maybe the proposal can just reference tor-spec, rather than copying
this text?

&gt;  When receiving and decrypting cells the 'recognized' will always be
&gt;  zero if we're the endpoint that the cell is destined for.  For cells
&gt;  that we should relay, the 'recognized' field will usually be nonzero,
&gt;  but will accidentally be zero with P=2^-32.

2 bytes, P=2^-16

This error seems to be copied from tor-spec.txt section 6.1.

For a fix, see:
https://trac.torproject.org/projects/tor/ticket/26860

&gt;  The old Digest field is removed, since sufficient information for
&gt;  authentication is now included in the all-zero string used to create the
&gt;  nonce for the first encryption layer.
&gt; 
&gt;  The 'Length' field of a relay cell contains the number of bytes in
&gt;  the relay payload which contain real payload data. The remainder of
&gt;  the payload is padded with NUL bytes.

We have open proposals and tickets on padding, so I suggest that we use
this wording:

"The remainder of the payload is padded with padding bytes.
See tor-spec Section 3 for details."


For those who are interested, here's the list of upcoming changes:

Clarify/determine specification for padding
https://trac.torproject.org/projects/tor/ticket/26228

prop289: Implement authenticated SENDME
https://trac.torproject.org/projects/tor/ticket/26288

In particular:

prop289: Leave unused random bytes in relay cell payload
https://trac.torproject.org/projects/tor/ticket/26846

prop289: randomize the unused part of relay payloads
https://trac.torproject.org/projects/tor/ticket/26871

&gt; 4.2 Appending the encrypted nonce
&gt; 
&gt;  When a cell is prepared by the client to be sent in the 'forward'
&gt;  direction, as explained in Section 3.2.2, the encrypted nonce S is
&gt;  appended to the encrypted cell (occupying the last 16 bytes of the
&gt;  cell).

Tor's current digest is in the cell header. But this proposal moves
the integrity check from the header to end of the cell.
Is there any reason why we can't put S in the cell header?

If we did, we'd need a specification like the existing tor-spec
digest:

"The nonce S is generated based on the content of the entire cell,
with the nonce field filled with NUL bytes."

We should decide if it's better to:
* have non-data fields at the start and end of the cell, or
* fill a field with NUL bytes, calculate the nonce, then replace
  the NUL bytes with the nonce.

&gt; If the cell is prepared to be sent to a node supporting the
&gt;  new protocol, S is used as the nonce for the next round's
&gt;  encryption. Otherwise, if the next node only supports the old
&gt;  protocol, S is still appended to the encrypted cell, but a
&gt;  synchronized nonce (as per the old protocol) is used for encryption.

Mixed version networks will be easier to implement if we derive keys
pairwise with each node based on the handshake.
(See above.)

We should probably say something like:
"Both the client and the node need to support the new protocol in this
proposal, otherwise we fall back to the old one."

&gt;  When a cell is sent along the circuit in the 'backward' direction,
&gt;  nodes supporting the new protocol always assume that the last 16
&gt;  bytes of the input are the nonce used by the previous node, which
&gt;  they process as per Section 3.2.2. If the previous node also supports
&gt;  the new protocol, these cells are indeed the nonce. If the previous
&gt;  node only supports the old protocol, these bytes are either encrypted
&gt;  NUL bytes or encrypted data.

"encrypted padding bytes", see above.

&gt; 4.3 Authenticating the message
&gt; 
&gt;  End-to-end authentication is performed in both directions in the same
&gt;  way. Once the final layer of encryption is removed, the
&gt;  message-to-be-authenticated is digested and this digest is used to
&gt;  decrypt the nonce used in this layer. If the decrypted nonce is
&gt;  all-zero, the message is authentic. Otherwise, if a change was made
&gt;  to the ciphertext or the encrypted nonce somewhere along the circuit,
&gt;  the nonce decrypts into a random value and the circuit is destroyed.

We think every hop should authenticate, at least in the transition
period. (See above.)

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltRju4ACgkQEP6qDnB1
ZyrrFg//Z1Gm4uX3maDJM1CpzL+ulfZoPEwP+pp0v2PxQsHmtDE2GlHhmO8o8pV1
jLgyfg/tpI6MDBIPy83mZo2N6JFUseWlCNU/kEy+UsGZZ7IGNJ7ZDtWMLY9BZWbt
D1MrCwhpbPOKfZMGQtp0JPUFK81IE2Z5JRvnrP95N1Gx749WtjcvoWiRcGSsdvcf
F3Rn0Bn1ACRGBe9AgFx3Q+mV7LqFfRuzrq+MVx3oiTHNTbvB/TlKq7yCwr5USbPb
+0e3YrM5Pzpf+QLp7D9379sg3w15kSwARjsYLy5P2A2s/47iu7jndEbH+uf/LiXP
DJCTjf+pFu6VDTAgCkGcCr8HGYKY/iZK2nvQ0FZQCk+hH4nzle+2s5/2wJfSLzKh
Y8SSe0F8I/VSztiZEsaYlpKp9b7wD6ocmWNqGafBnJ7UOdyJDgLbHCIaiSmklBWb
9bnIKingRKxOaKlEOcTJ/x5If/a2k2G6E5A+kOmC2+HUY9jNJfn3x+aZdvrZh0Vc
4X4Zco+b8qvooEQsM76kueRKmpszPw1q9AFnVjleOwNzurnrIOuN2NmiJY5tqQbp
XBGj4KSq6AxI6+o2+xmGTgdJ+Rm/BNijltthXYfohq8DwAObdHjHEbkASdVBMMJi
FDY0eRvBOX1gw6CM/wr7hz4pab+ftSCxdEloi9vNKR6s7C9/ys8=
=wiGa
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180723071200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-23 07:12:00-0400</timestampReceived><subject>Re: [tor-dev] restoring 'cypherpunks' trac account with more anti-automation?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; is there any timeline when the cypherpunks trac account will be restored?

does the tor project plan to restore it or work on this problem?

I believe it is important that the tor project keeps anonymous submissions
open otherwise others can point to the tor project itself as a reference 
"if not even them allow anonymous submission why should I do?"


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180719151600</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-07-19 15:16:00-0400</timestampReceived><subject>Re: [tor-dev] Brief state of sbws thoughts</subject><body>

Matt Traudt:
&gt; Teor, Juga
&gt; 
&gt; There's a lot of things fighting for my attention right now, so you
&gt; might have noticed I've slowed way down on attending to sbws
&gt; tickets/PRs/etc. I think time will free up in the next few days.
&gt; 
&gt; I think sbws is in a very good place code-wise right now. I don't think
&gt; much more **has** to be done to the code. Even though I enjoy adding
&gt; things like the state file (GHPR#236 [2]), I don't think that was a good
&gt; use of my time.
&gt; 
&gt; It looks like there's a lot of check boxes Juga has made regarding
&gt; making a Debian package[0]. Those should get checked. These are important.
&gt; 
&gt; However, I think the absolute most important thing for us to be spending
&gt; our time on right now is deciding what "good" results are and verifying
&gt; sbws produces "good" results.
&gt; 
&gt; To accomplish this, I think one of the two suggestions I made in a
&gt; comment on GH#182 [1] (quoted here) is what we should be doing.
&gt; 
&gt; 1. Run torflow and sbws side-by-side (but not at the same time) to
&gt; remove more variables. This has the added benefit of us having access to
&gt; the raw scanner results from torflow before it does whatever magic
&gt; scaling it does. OR

In that ticket you also mentioned that someone that already runs torflow
should also run sbws.
I said i can run both, and still the case if needed.

&gt; 2. Ask for access to raw scanner results from someone running torflow.
&gt; 
&gt; I fear sbws is doomed to die the death of the new bandwidth scanners
&gt; before it if we don't start seriously verifying sbws is "good" or if I
&gt; personally slowly stop working/coordinating work on it.

I don't think that's the case. I've not forget it... and i'm sure teor
neither.
Some of the last work we have done is regarding getting the bandwidth
files archived, what will also help to determine whether sbws results
are "good".

If 1. would be run by someone else, getting [0] done is indeed important
and i'm currently working on it.

And maybe we aren't able to determine how "good" sbws results are until
it actually starts being run by dirauths, for which [0] is still important.

Thanks for sharing your thoughts,
juga.

&gt; Thanks
&gt; 
&gt; Matt
&gt; 
&gt; [0]: https://trac.torproject.org/projects/tor/ticket/26848
&gt; [1]:
&gt; https://github.com/pastly/simple-bw-scanner/issues/182#issuecomment-404250053
&gt; [2]: https://github.com/pastly/simple-bw-scanner/pull/236
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180719153445</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-07-19 15:34:45-0400</timestampReceived><subject>Re: [tor-dev] Brief state of sbws thoughts</subject><body>

I'm happy and prepared to run sbws and torflow side by side. I'm a
little less swamped than I was a month ago.  I don't need a debian
package; I'd rather run it from a git clone.

I think the only things I can't do are
a) give you access to the box directly (but I can make whatever
files/logs/raw results that you want available to you over HTTP)
b) stop running torflow. (Unless we're ready to switch a live bwauth
over to sbws.)

FWIW, I have the advantage of having archived my (semi-)raw bwauth
data for a while: https://bwauth.ritter.vg/bwauth/

-tom

On 19 July 2018 at 10:16, juga &lt;juga@riseup.net&gt; wrote:
&gt; Matt Traudt:
&gt;&gt; Teor, Juga
&gt;&gt;
&gt;&gt; There's a lot of things fighting for my attention right now, so you
&gt;&gt; might have noticed I've slowed way down on attending to sbws
&gt;&gt; tickets/PRs/etc. I think time will free up in the next few days.
&gt;&gt;
&gt;&gt; I think sbws is in a very good place code-wise right now. I don't think
&gt;&gt; much more **has** to be done to the code. Even though I enjoy adding
&gt;&gt; things like the state file (GHPR#236 [2]), I don't think that was a good
&gt;&gt; use of my time.
&gt;&gt;
&gt;&gt; It looks like there's a lot of check boxes Juga has made regarding
&gt;&gt; making a Debian package[0]. Those should get checked. These are important.
&gt;&gt;
&gt;&gt; However, I think the absolute most important thing for us to be spending
&gt;&gt; our time on right now is deciding what "good" results are and verifying
&gt;&gt; sbws produces "good" results.
&gt;&gt;
&gt;&gt; To accomplish this, I think one of the two suggestions I made in a
&gt;&gt; comment on GH#182 [1] (quoted here) is what we should be doing.
&gt;&gt;
&gt;&gt; 1. Run torflow and sbws side-by-side (but not at the same time) to
&gt;&gt; remove more variables. This has the added benefit of us having access to
&gt;&gt; the raw scanner results from torflow before it does whatever magic
&gt;&gt; scaling it does. OR
&gt;
&gt; In that ticket you also mentioned that someone that already runs torflow
&gt; should also run sbws.
&gt; I said i can run both, and still the case if needed.
&gt;
&gt;&gt; 2. Ask for access to raw scanner results from someone running torflow.
&gt;&gt;
&gt;&gt; I fear sbws is doomed to die the death of the new bandwidth scanners
&gt;&gt; before it if we don't start seriously verifying sbws is "good" or if I
&gt;&gt; personally slowly stop working/coordinating work on it.
&gt;
&gt; I don't think that's the case. I've not forget it... and i'm sure teor
&gt; neither.
&gt; Some of the last work we have done is regarding getting the bandwidth
&gt; files archived, what will also help to determine whether sbws results
&gt; are "good".
&gt;
&gt; If 1. would be run by someone else, getting [0] done is indeed important
&gt; and i'm currently working on it.
&gt;
&gt; And maybe we aren't able to determine how "good" sbws results are until
&gt; it actually starts being run by dirauths, for which [0] is still important.
&gt;
&gt; Thanks for sharing your thoughts,
&gt; juga.
&gt;
&gt;&gt; Thanks
&gt;&gt;
&gt;&gt; Matt
&gt;&gt;
&gt;&gt; [0]: https://trac.torproject.org/projects/tor/ticket/26848
&gt;&gt; [1]:
&gt;&gt; https://github.com/pastly/simple-bw-scanner/issues/182#issuecomment-404250053
&gt;&gt; [2]: https://github.com/pastly/simple-bw-scanner/pull/236
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180713183713</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2018-07-13 18:37:13-0400</timestampReceived><subject>Re: [tor-dev] Tor browser for Chrome OS</subject><body>

On Fri, Jul 13, 2018 at 11:02:53AM -0700, Keifer Bly wrote:
&gt; Hello,
&gt; 
&gt; So I am wondering, are there plans to develop a version of tor browser that
&gt; will run on Chromebooks? I though that might be a good idea as those are
&gt; getting somewhat popular in the US. Thanks.

Yes! And, not only are they popular in the US but they are gaining
traction globally in primary/secondary education institutions. Most
likely there are two avenues for achieving this.

1) Tor Browser for Android will be available from the Play Store, and
that will support ChromeOS. This will likely be the easiest and
most-supported way for using Tor Browser.

2) Linux on Chromebooks may provide the ability for running Tor Browser
for GNU/Linux. I don't know anyone who's done or tried this, but it may
be worth investigating.

https://blog.google/products/chromebooks/linux-on-chromebooks/

&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427205902</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-04-27 20:59:02-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; writes:

After reading the spec diff and your mail, I'm still not sure I
understand the distinction -- if the x25519 is used to decrypt the
descriptor then:

&gt; The spec says that the client must have both keys and use both to
&gt; authenticate, but, for me, these two things are quite independent. I
&gt; think they can be considered two different authentication types. The
&gt; service should be able to enable one and disable the other. For example,
&gt; If I disable the x25519 while I enable ed25519, I can add a new client
&gt; immediately without the need to rotate the intro points.

...how does this work? If the client doesn't have the x25519 key how can
it access the descriptor?


Also, separately addressing the issue of configuration and terminology, I
think it's probably best if "users" (service operators and clients)
don't actually have to touch the keys.

This sounds fraught with peril: a service operator has to copy-pasta the
right half of the correct two keys, securely deliver them to a client
and the client has to put them in the right place in a
config-file. Then, if the service client has a problem later they have
to remember NOT copy-paste the whole config when asking for
help... sounds like lots to go wrong :) and I don't think this can be
solved by tinkering with the names/layout of torrc options,
personally...

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427231926</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-27 23:19:26-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 28 Apr 2018, at 06:59, meejah &lt;meejah@meejah.ca&gt; wrote:
&gt; 

&gt; After reading the spec diff and your mail, I'm still not sure I
&gt; understand the distinction -- if the x25519 is used to decrypt the
&gt; descriptor then:
&gt; 
&gt;&gt; The spec says that the client must have both keys and use both to
&gt;&gt; authenticate, but, for me, these two things are quite independent. I
&gt;&gt; think they can be considered two different authentication types. The
&gt;&gt; service should be able to enable one and disable the other. For example,
&gt;&gt; If I disable the x25519 while I enable ed25519, I can add a new client
&gt;&gt; immediately without the need to rotate the intro points.
&gt; 
&gt; ...how does this work? If the client doesn't have the x25519 key how can
&gt; it access the descriptor?

If the service does not encrypt the descriptor with an x25519 key, then the
client does not need a key to read it.

&gt; The spec says that the client must have both keys and use both to
&gt; authenticate, but, for me, these two things are quite independent. I
&gt; think they can be considered two different authentication types. The
&gt; service should be able to enable one and disable the other. For example,
&gt; If I disable the x25519 while I enable ed25519, I can add a new client
&gt; immediately without the need to rotate the intro points.
&gt; 
&gt; If rotating intro points is not an issue and the only purpose of ed25519
&gt; is to have more fine-grained access control, the current spec is fine.
&gt; But if rotating intro points is an issue, we should rethink about this.
&gt; 
&gt; So, I created a PR for the change in torspec.
&gt; https://github.com/torproject/torspec/pull/7
&gt; (in the PR, the x25519 auth is called 'basic' and the ed25519 auth is
&gt; called 'intro')

Please use different words from v2 to avoid confusion.

Please use words that describe what a thing *is*, not how secure it
is, or what it should be used for, or what level of the design it is on.
(We made that mistake when naming "hidden services".)

I would recommend:
* "descriptor" for descriptor auth
* "intro" for into auth

&gt; We need your opinions about this.
&gt; Should we let the service enable one while disable the other?

Yes, they have different security properties.

For example, a Ricochet-like peer to peer messaging protocol
would like to be able to revoke one contact (intro auth), without
disconnecting all the rest (descriptor auth).

&gt; Or should we require the service to enable both for all clients?
&gt; 
&gt; If you want to let the service be able to enable one while disable the
&gt; other, do you have any opinion on how to configure the torrc?

If someone doesn't understand client auth in detail, and just wants
to be more secure, we should give them a single option that enables
both kinds of client auth. (Security by default.)

OnionServiceClientAuthentication 1
(Default: 0)

If someone knows they only want a particular client auth method,
we should give them another option that contains a list of active
client auth methods. (Describe what you have, not what you don't
have, because negatives confuse humans.)

OnionServiceClientAuthenticationMethods intro
(Default: descriptor, intro)

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;/span&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;On 28 Apr 2018, at 06:59, meejah &lt;&lt;a \
href="mailto:meejah@meejah.ca"&gt;meejah@meejah.ca&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;After reading the spec diff and \
your mail, I'm still not sure I&lt;br&gt;understand the distinction -- if the x25519 is \
used to decrypt the&lt;br&gt;descriptor then:&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;The spec says that the client must have both keys and use both \
to&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, \
0);"&gt;authenticate, but, for me, these two things are quite independent. \
I&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;think \
they can be considered two different authentication types. \
The&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;service \
should be able to enable one and disable the other. For \
example,&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;If I disable the x25519 while I enable ed25519, I can add a new \
client&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;immediately without the need to rotate the intro \
points.&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;br&gt;...how does this work? If the client doesn't have the x25519 key how \
can&lt;br&gt;it access the descriptor?&lt;/span&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If the service \
does not encrypt the descriptor with an &lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;x25519 key&lt;/span&gt;, then the&lt;/div&gt;&lt;div&gt;client does not need a key to \
read it.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;blockquote type="cite"&gt;The spec says that the client must have both keys and \
use both to&lt;br&gt;authenticate, but, for me, these two things are quite independent. \
I&lt;br&gt;think they can be considered two different authentication types. The&lt;br&gt;service \
should be able to enable one and disable the other. For example,&lt;br&gt;If I disable the \
x25519 while I enable ed25519, I can add a new client&lt;br&gt;immediately without the need \
to rotate the intro points.&lt;br&gt;&lt;br&gt;If rotating intro points is not an issue and the \
only purpose of ed25519&lt;br&gt;is to have more fine-grained access control, the current \
spec is fine.&lt;br&gt;But if rotating intro points is an issue, we should rethink about \
this.&lt;br&gt;&lt;br&gt;So, I created a PR for the change in torspec.&lt;br&gt;&lt;a \
href="https://github.com/torproject/torspec/pull/7" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="link" \
x-apple-data-detectors-result="1"&gt;https://github.com/torproject/torspec/pull/7&lt;/a&gt;&lt;br&gt;(in \
the PR, the x25519 auth is called 'basic' and the ed25519 auth is&lt;br&gt;called \
'intro')&lt;/blockquote&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;Please use different words from v2 to avoid \
confusion.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Please use words that describe what a thing *is*, not &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;how secure \
it&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;is, or \
what it should be used for, or what &lt;/span&gt;level of the design it is \
on.&lt;/div&gt;&lt;div&gt;(We made that mistake when naming "hidden services".)&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;I would \
recommend:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;* \
"descriptor" for descriptor auth&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;* "intro" for into auth&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;blockquote type="cite"&gt;We need \
your opinions about this.&lt;br&gt;Should we let the service enable one while disable the \
other?&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Yes, they have different security properties.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;For example, a Ricochet-like peer \
to peer messaging protocol&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;would like to be able to revoke one contact (intro auth), \
without&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;disconnecting all the rest (descriptor auth).&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;Or should we require the service to enable both for all \
clients?&lt;br&gt;&lt;br&gt;If you want to let the service be able to enable one while disable \
the&lt;br&gt;other, do you have any opinion on how to configure the \
torrc?&lt;/blockquote&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;If someone doesn't understand client auth in \
detail, and just wants&lt;/div&gt;&lt;div&gt;to be more secure, we should give them a single \
option that enables&lt;/div&gt;&lt;div&gt;both kinds of client auth. (Security by \
default.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;OnionServiceClientAuthentication \
1&lt;/div&gt;&lt;div&gt;(Default: 0)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If someone knows they only want a \
particular client auth method,&lt;/div&gt;&lt;div&gt;we should give them another option that \
contains a list of active&lt;/div&gt;&lt;div&gt;client auth methods. (Describe what you have, not \
what you don't&lt;/div&gt;&lt;div&gt;have, because negatives confuse \
humans.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;OnionServiceClientAuthenticationMethods intro&lt;/span&gt;&lt;/div&gt;&lt;div&gt;(Default: \
descriptor, intro)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180430100837</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-04-30 10:08:37-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 04/28/2018 06:19 AM, teor wrote:
&gt;&gt; Or should we require the service to enable both for all clients?
&gt;&gt;
&gt;&gt; If you want to let the service be able to enable one while disable the
&gt;&gt; other, do you have any opinion on how to configure the torrc?
&gt; 
&gt; If someone doesn't understand client auth in detail, and just wants
&gt; to be more secure, we should give them a single option that enables
&gt; both kinds of client auth. (Security by default.)
&gt; 
&gt; OnionServiceClientAuthentication 1
&gt; (Default: 0)
&gt; 
&gt; If someone knows they only want a particular client auth method,
&gt; we should give them another option that contains a list of active
&gt; client auth methods. (Describe what you have, not what you don't
&gt; have, because negatives confuse humans.)
&gt; 
&gt; OnionServiceClientAuthenticationMethods intro
&gt; (Default: descriptor, intro)


Do you have any opinion on specifying the client names in your
recommendation? and the list of client names in "descriptor" and "intro"
should be independent.

However, what i am currently think of is that we can use the existing
format.

HiddenServiceAuthorizeClient auth-type client-name,client-name,...

But instead of allowing only two auth-types "descriptor" and "intro", we
allow another type called "default" which includes both "descriptor" and
"intro"

So if I put an option:
HiddenServiceAuthorizeClient default client-name,client-name,...

It will be equivalent to two lines of:
HiddenServiceAuthorizeClient descriptor client-name,client-name,...
HiddenServiceAuthorizeClient intro client-name,client-name,...

And on the client side, if I put an option:
HidServAuth onion-address default x25519-private-key ed25519-private-key

It will be equivalent to two lines of:
HidServAuth onion-address descriptor x25519-private-key
HidServAuth onion-address intro ed25519-private-key


What do you all think?

Cheers,
haxxpop


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502160912</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-02 16:09:12-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; writes:

&gt; Hi,
&gt;
&gt; On 04/28/2018 06:19 AM, teor wrote:
&gt;&gt;&gt; Or should we require the service to enable both for all clients?
&gt;&gt;&gt;
&gt;&gt;&gt; If you want to let the service be able to enable one while disable the
&gt;&gt;&gt; other, do you have any opinion on how to configure the torrc?
&gt;&gt; 
&gt;&gt; If someone doesn't understand client auth in detail, and just wants
&gt;&gt; to be more secure, we should give them a single option that enables
&gt;&gt; both kinds of client auth. (Security by default.)
&gt;&gt; 
&gt;&gt; OnionServiceClientAuthentication 1
&gt;&gt; (Default: 0)
&gt;&gt; 
&gt;&gt; If someone knows they only want a particular client auth method,
&gt;&gt; we should give them another option that contains a list of active
&gt;&gt; client auth methods. (Describe what you have, not what you don't
&gt;&gt; have, because negatives confuse humans.)
&gt;&gt; 
&gt;&gt; OnionServiceClientAuthenticationMethods intro
&gt;&gt; (Default: descriptor, intro)
&gt;
&gt;
&gt; Do you have any opinion on specifying the client names in your
&gt; recommendation? and the list of client names in "descriptor" and "intro"
&gt; should be independent.
&gt;
&gt; However, what i am currently think of is that we can use the existing
&gt; format.
&gt;
&gt; HiddenServiceAuthorizeClient auth-type client-name,client-name,...
&gt;
&gt; But instead of allowing only two auth-types "descriptor" and "intro", we
&gt; allow another type called "default" which includes both "descriptor" and
&gt; "intro"
&gt;
&gt; So if I put an option:
&gt; HiddenServiceAuthorizeClient default client-name,client-name,...
&gt;
&gt; It will be equivalent to two lines of:
&gt; HiddenServiceAuthorizeClient descriptor client-name,client-name,...
&gt; HiddenServiceAuthorizeClient intro client-name,client-name,...
&gt;
&gt; And on the client side, if I put an option:
&gt; HidServAuth onion-address default x25519-private-key ed25519-private-key
&gt;
&gt; It will be equivalent to two lines of:
&gt; HidServAuth onion-address descriptor x25519-private-key
&gt; HidServAuth onion-address intro ed25519-private-key
&gt;

In general, I feel like being able to individually enable "intro" or
"descriptor" auth might be a worthwhile approach for advanced use cases
(see end of my email).  However, I can see the following issues:

a) It's gonna be hard to communicate what "intro" or "descriptor" auth
   do when enabled individually, and motivate people to use them. I
   think it might actually confuse most operators, except from the super
   advanced ones.

b) It will be more complicated in terms of engineering. Because we would
   have to support three auth types instead of one. Especially so if we
   try to support the special benefits you mentioned in the top post,
   like "If only intro auth is enabled, we can revoke a client without
   republishing the descriptor".

I think my approach here would be to try to support both auth types by
the time we launch this feature (under the "standard" auth type), and
then in the future as we get more insight on how people use them, we
should start allowing to individually switch them on and off.

---

For reference here is how I see the various auth types:

"desc" auth:
       Encrypts the descriptor using x25519.  Protects against HSDirs
       who know the onion address from snooping into the descriptor and
       learning intro points, etc.

"intro" auth:
       Authentication at the introduction layer. Allows end-to-end
       authentication with the onion service. Allows more fine-grained
       control over authentication. Also allows the service to know
       which client is visiting it (see #4700).

"standard" auth:
       The combination of "desc" auth and "intro" auth. This basically
       provides the same security logic as v2 "basic" auth.  IMO, this
       is what most operators want when they turn on client auth.

And here are use cases for switching the auths individually:

"intro" auth without "desc" auth:
       Like haxxpop said in top post, if we only have intro auth we can
       revoke/add clients without needing to republish our descriptor.

"desc" auth without "intro" auth:
       This might be useful if a use case does not appreciate the
       anti-feature of intro auth where it allows the HS to know which
       client is visiting it at any given time (see #4700).

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180616160104</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2018-06-16 16:01:04-0400</timestampReceived><subject>[tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/alternative)]


I do not understand why Sandboxed Tor Browser is now deprecated when it 
should be the new thing in security features. It works well and stopped 
already some 0days in the past and today I see that not only is 
officially "*WARNING: Active development is on indefinite hiatus"* 
(https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux), 
the last commit is from 3 months ago, but still it works well. And today 
I see that for the Firefox 60 ESR this support will be removed 
(https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).


Is there a hidden agenda to allow LEA/governments to exploit Tor Browser 
users easily? Because I don't think maintaining the sandboxed version is 
that much work and it is a great protection for many users.

So please, make Sandboxed Tor Browser an official thing.


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;I do not understand why Sandboxed Tor Browser is now deprecated
      when it should be the new thing in security features. It works
      well and stopped already some 0days in the past and today I see
      that not only is officially "&lt;strong&gt;WARNING: Active development
        is on indefinite hiatus"&lt;/strong&gt;
(&lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux"&gt;https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux&lt;/a&gt;),
  the last commit is from 3 months ago, but still it works well. And
      today I see that for the Firefox 60 ESR this support will be
      removed
(&lt;a class="moz-txt-link-freetext" \
href="https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882 \
e235178d0a1889a7d96c5721faad2716"&gt;https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716&lt;/a&gt;).&lt;/p&gt;
  &lt;p&gt;Is there a hidden agenda to allow LEA/governments to exploit Tor
      Browser users easily? Because I don't think maintaining the
      sandboxed version is that much work and it is a great protection
      for many users.&lt;/p&gt;
    &lt;p&gt;So please, make Sandboxed Tor Browser an official thing.&lt;br&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180616183617</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-06-16 18:36:17-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>



On 06/16/2018 12:01 PM, juanjo wrote:
&gt; I do not understand why Sandboxed Tor Browser is now deprecated when it
&gt; should be the new thing in security features. It works well and stopped
&gt; already some 0days in the past and today I see that not only is
&gt; officially "*WARNING: Active development is on indefinite hiatus"*
&gt; (https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux),
&gt; the last commit is from 3 months ago, but still it works well. And today
&gt; I see that for the Firefox 60 ESR this support will be removed
&gt; (https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).
&gt;  
&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor Browser
&gt; users easily?

Come on. Be reasonable.

&gt; Because I don't think maintaining the sandboxed version is
&gt; that much work and it is a great protection for many users.
&gt; 

Then put forward the time and effort to maintain it.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180616183832</emailId><senderName>Ryan Duff</senderName><senderEmail>ry@nduff.com</senderEmail><timestampReceived>2018-06-16 18:38:32-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/alternative)]


I'm always amazed at the demands people will make about free software.

On Sat, Jun 16, 2018 at 2:36 PM, Matt Traudt &lt;pastly@torproject.org&gt; wrote:

&gt;
&gt;
&gt; On 06/16/2018 12:01 PM, juanjo wrote:
&gt; &gt; I do not understand why Sandboxed Tor Browser is now deprecated when it
&gt; &gt; should be the new thing in security features. It works well and stopped
&gt; &gt; already some 0days in the past and today I see that not only is
&gt; &gt; officially "*WARNING: Active development is on indefinite hiatus"*
&gt; &gt; (https://trac.torproject.org/projects/tor/wiki/doc/
&gt; TorBrowser/Sandbox/Linux),
&gt; &gt; the last commit is from 3 months ago, but still it works well. And today
&gt; &gt; I see that for the Firefox 60 ESR this support will be removed
&gt; &gt; (https://gitweb.torproject.org/builders/tor-browser-
&gt; build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).
&gt; &gt;
&gt; &gt; Is there a hidden agenda to allow LEA/governments to exploit Tor Browser
&gt; &gt; users easily?
&gt;
&gt; Come on. Be reasonable.
&gt;
&gt; &gt; Because I don't think maintaining the sandboxed version is
&gt; &gt; that much work and it is a great protection for many users.
&gt; &gt;
&gt;
&gt; Then put forward the time and effort to maintain it.
&gt;
&gt; Matt
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I'm always amazed at the demands people will make about free \
software.&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Sat, Jun 16, \
2018 at 2:36 PM, Matt Traudt &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:pastly@torproject.org" \
target="_blank"&gt;pastly@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;&lt;br&gt; &lt;br&gt;
On 06/16/2018 12:01 PM, juanjo wrote:&lt;br&gt;
&gt; I do not understand why Sandboxed Tor Browser is now deprecated when it&lt;br&gt;
&gt; should be the new thing in security features. It works well and stopped&lt;br&gt;
&gt; already some 0days in the past and today I see that not only is&lt;br&gt;
&lt;/span&gt;&gt; officially "*WARNING: Active development is on indefinite \
hiatus"*&lt;br&gt; &lt;span class=""&gt;&gt; (&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/wiki/doc/&lt;wbr&gt;TorBrowser/Sandbox/Linux&lt;/a&gt;),&lt;br&gt;
 &gt; the last commit is from 3 months ago, but still it works well. And today&lt;br&gt;
&gt; I see that for the Firefox 60 ESR this support will be removed&lt;br&gt;
&gt; (&lt;a href="https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.&lt;wbr&gt;org/builders/tor-brows \
er-&lt;wbr&gt;build.git/commit/?id=&lt;wbr&gt;dc355882e235178d0a1889a7d96c57&lt;wbr&gt;21faad2716&lt;/a&gt;).&lt;br&gt;
 &gt; &lt;br&gt;
&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor Browser&lt;br&gt;
&gt; users easily?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Come on. Be reasonable.&lt;br&gt;
&lt;span class=""&gt;&lt;br&gt;
&gt; Because I don't think maintaining the sandboxed version is&lt;br&gt;
&gt; that much work and it is a great protection for many users.&lt;br&gt;
&gt; &lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Then put forward the time and effort to maintain it.&lt;br&gt;
&lt;br&gt;
Matt&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617015940</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-06-17 01:59:40-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/alternative)]


Have you heard of the TAILS OS?

https://tails.boum.org/

Unfortunately I feel your pain. It does not work on all hardware (such as mine) but \
it is a tor operating system so you don't have to worry about downloading files, etc. \
Try it to see if it works for you.

From: Ryan Duff
Sent: Saturday, June 16, 2018 11:38 AM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] Sandboxed Tor Browser should be officially developed

I'm always amazed at the demands people will make about free software.

On Sat, Jun 16, 2018 at 2:36 PM, Matt Traudt &lt;pastly@torproject.org&gt; wrote:


On 06/16/2018 12:01 PM, juanjo wrote:
&gt; I do not understand why Sandboxed Tor Browser is now deprecated when it
&gt; should be the new thing in security features. It works well and stopped
&gt; already some 0days in the past and today I see that not only is
&gt; officially "*WARNING: Active development is on indefinite hiatus"*
&gt; (https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux),
&gt; the last commit is from 3 months ago, but still it works well. And today
&gt; I see that for the Firefox 60 ESR this support will be removed
&gt; (https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).
&gt;  
&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor Browser
&gt; users easily?

Come on. Be reasonable.

&gt; Because I don't think maintaining the sandboxed version is
&gt; that much work and it is a great protection for many users.
&gt; 

Then put forward the time and effort to maintain it.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink="#954F72"&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Have you heard of the TAILS OS?&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;a \
href="https://tails.boum.org/"&gt;https://tails.boum.org/&lt;/a&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Unfortunately I feel your \
pain. It does not work on all hardware (such as mine) but it is a tor operating \
system so you don't have to worry about downloading files, etc. Try it to see if it \
works for you.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div \
style='mso-element:para-border-div;border:none;border-top:solid #E1E1E1 \
1.0pt;padding:3.0pt 0in 0in 0in'&gt;&lt;p class=MsoNormal \
style='border:none;padding:0in'&gt;&lt;b&gt;From: &lt;/b&gt;&lt;a href="mailto:ry@nduff.com"&gt;Ryan \
Duff&lt;/a&gt;&lt;br&gt;&lt;b&gt;Sent: &lt;/b&gt;Saturday, June 16, 2018 11:38 AM&lt;br&gt;&lt;b&gt;To: &lt;/b&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;b&gt;Subject: \
&lt;/b&gt;Re: [tor-dev] Sandboxed Tor Browser should be officially developed&lt;/p&gt;&lt;/div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div&gt;&lt;p class=MsoNormal&gt;I'm always amazed at the \
demands people will make about free software.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div&gt;&lt;p class=MsoNormal&gt;On Sat, Jun 16, 2018 at \
2:36 PM, Matt Traudt &lt;&lt;a href="mailto:pastly@torproject.org" \
target="_blank"&gt;pastly@torproject.org&lt;/a&gt;&gt; wrote:&lt;/p&gt;&lt;blockquote \
style='border:none;border-left:solid #CCCCCC 1.0pt;padding:0in 0in 0in \
6.0pt;margin-left:4.8pt;margin-right:0in'&gt;&lt;p class=MsoNormal&gt;&lt;br&gt;&lt;br&gt;On 06/16/2018 \
12:01 PM, juanjo wrote:&lt;br&gt;&gt; I do not understand why Sandboxed Tor Browser is now \
deprecated when it&lt;br&gt;&gt; should be the new thing in security features. It works \
well and stopped&lt;br&gt;&gt; already some 0days in the past and today I see that not only \
is&lt;br&gt;&gt; officially "*WARNING: Active development is on indefinite \
hiatus"*&lt;br&gt;&gt; (&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux&lt;/a&gt;),&lt;br&gt;&gt; \
the last commit is from 3 months ago, but still it works well. And today&lt;br&gt;&gt; I \
see that for the Firefox 60 ESR this support will be removed&lt;br&gt;&gt; (&lt;a \
href="https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716" \
target="_blank"&gt;https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716&lt;/a&gt;).&lt;br&gt;&gt; \
&lt;br&gt;&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor \
Browser&lt;br&gt;&gt; users easily?&lt;br&gt;&lt;br&gt;Come on. Be reasonable.&lt;br&gt;&lt;br&gt;&gt; Because I \
don't think maintaining the sandboxed version is&lt;br&gt;&gt; that much work and it is a \
great protection for many users.&lt;br&gt;&gt; &lt;br&gt;&lt;br&gt;Then put forward the time and effort \
to maintain it.&lt;br&gt;&lt;br&gt;Matt&lt;br&gt;_______________________________________________&lt;br&gt;tor-dev \
mailing list&lt;br&gt;&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617033403</emailId><senderName>Chelsea Holland Komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2018-06-17 03:34:03-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

Hi,

Thanks for the question.

On 2018-06-16 12:01, juanjo wrote:
&gt; I do not understand why Sandboxed Tor Browser is now deprecated when
&gt; it should be the new thing in security features. It works well and
&gt; stopped already some 0days in the past and today I see that not only
&gt; is officially "WARNING: ACTIVE DEVELOPMENT IS ON INDEFINITE HIATUS"
&gt; (https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux),
&gt; the last commit is from 3 months ago, but still it works well. And
&gt; today I see that for the Firefox 60 ESR this support will be removed
&gt; (https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).
&gt; 

As you pointed out, this project is no longer being actively maintained.
While someone on the Tor Browser development team can answer more
thoroughly, my understanding is that the original maintainer moved on
from working on this project. The Tor development teams are quite small,
so (like many open source projects) there are more projects than people
to support them.

&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor
&gt; Browser users easily? Because I don't think maintaining the sandboxed
&gt; version is that much work and it is a great protection for many users.

There isn't. If you have more concerns or questions feel free to have a
conversation with someone working on Tor directly- we are active on irc:
https://www.torproject.org/about/contact.html.en#irc

&gt; So please, make Sandboxed Tor Browser an official thing.

We definitely welcome community-supported projects. If you or anyone you
know wants to contribute to this project. let us know.

All best,
Chelsea
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617124551</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-06-17 12:45:51-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/signed)]


I wasn't going to reply to this because the last time I posted to this
list, I got flooded with spam, but fine.

On Sat, 16 Jun 2018 18:01:04 +0200
juanjo &lt;juanjo@avanix.es&gt; wrote:
&gt; I do not understand why Sandboxed Tor Browser is now deprecated when
&gt; it should be the new thing in security features. It works well and
&gt; stopped already some 0days in the past and today I see that not only
&gt; is officially "*WARNING: Active development is on indefinite hiatus"* 
&gt; (https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Sandbox/Linux), 
&gt; the last commit is from 3 months ago, but still it works well. And
&gt; today I see that for the Firefox 60 ESR this support will be removed 
&gt; (https://gitweb.torproject.org/builders/tor-browser-build.git/commit/?id=dc355882e235178d0a1889a7d96c5721faad2716).
&gt; 

Because there was no funding for development.

&gt; Is there a hidden agenda to allow LEA/governments to exploit Tor
&gt; Browser users easily? Because I don't think maintaining the sandboxed
&gt; version is that much work and it is a great protection for many users.

LOL.

&gt; So please, make Sandboxed Tor Browser an official thing.

Fuck you, pay me.

Regards,

-- 
Yawning Angel


[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180716013219</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2018-07-16 01:32:19-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

Hi Everyone,

We'll discuss this at a meeting next Tuesday, 24 July at 15:00 UTC in
#tor-meeting on OTFC.

There was some discussion on the tbb-dev@ mailing list, but this meeting
will cover the details, implementation plan, roadmap, timeline, etc
(maybe we won't have enough time for all of these topics).

Please feel free to join the channel and watch and/or contribute
productively. There will be logs available after the meeting, as well.

https://lists.torproject.org/pipermail/tbb-dev/2018-July/000874.html

Thanks,
Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180724013710</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2018-07-24 01:37:10-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

On Mon, Jul 16, 2018 at 01:32:19AM +0000, Matthew Finkel wrote:
&gt; Hi Everyone,
&gt; 
&gt; We'll discuss this at a meeting next Tuesday, 24 July at 15:00 UTC in
&gt; #tor-meeting on OTFC.

Reminder!

&gt; 
&gt; There was some discussion on the tbb-dev@ mailing list, but this meeting
&gt; will cover the details, implementation plan, roadmap, timeline, etc
&gt; (maybe we won't have enough time for all of these topics).
&gt; 
&gt; Please feel free to join the channel and watch and/or contribute
&gt; productively. There will be logs available after the meeting, as well.
&gt; 
&gt; https://lists.torproject.org/pipermail/tbb-dev/2018-July/000874.html

We'll be discussing the available platform-specific features, some are
described (to some extent) in the above thread. Another option that
wasn't included was Docker-on-each-OS - at this point, Docker is
supported on some versions of Windows, Mac OS X and Linux. However,
this doesn't include all OS versions supported by Tor Browser, so we
must choose our sandboxing techniques carefully.

I believe we can use/abuse many of the same features used by Docker on
these systems when they are available, but we'll need a safe fallback
option when they aren't available (while still providing as much
protection as we can).

As Tom mentioned in his response on the tbb-dev@ thread, the Windows
container features are only available on Windows 10 Professional and
Enterprise editions - so we can't rely on them right now. The API is
completely undocumented, but we have reference implementations.
Containers on Mac OS X are provided through an OS-provided hypervisor
layer. This may be an interesting avenue we can explore[0]. On Linux,
Sandboxed Tor Browser remains a good example of what we can accomplish.

[0] https://github.com/mist64/xhyve

&gt; 
&gt; Thanks,
&gt; Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726021847</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2018-07-26 02:18:47-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

On Tue, Jul 24, 2018 at 01:37:10AM +0000, Matthew Finkel wrote:
&gt; On Mon, Jul 16, 2018 at 01:32:19AM +0000, Matthew Finkel wrote:
&gt; &gt; Hi Everyone,
&gt; &gt; 
&gt; &gt; We'll discuss this at a meeting next Tuesday, 24 July at 15:00 UTC in
&gt; &gt; #tor-meeting on OTFC.
&gt; 
&gt; Reminder!
&gt; 

We had a good meeting yesterday - meeting notes are available online[0].

During the meeting we briefly discussed the different methods we can use
for sandboxing Tor Browser on the different platforms. We then moved on
to discussing our goals with sandboxing Tor Browser and what are the
criteria for the solution we choose. That conversation led us to
enumerate the criteria[1] and start thinking about the trade-offs
associated with them and how we evaluate them (not exhaustive).

Types of sandbox:
  a) one standard VM on all desktop OSes running Tor Browser on Linux
  b) Per-OS container/virtualization solution
  c) No container/vm, but sandboxing the parent and content processes
     using OS-specific mechanisms (dropping privs etc.)
  d) a mix of all options choosing the best per platform
  
Evaluation criteria for a)-d)
  1) (in the face of a browser exploit) tracking protection
  2) (no browser exploit) tracking protection
  3) (in the face of a browser exploit) proxy bypass protection
  4) (no browser exploit) proxy bypass protection
  5) user experience 
  6) development effort (including time to market with improved
     security)
  7) maintainability
  8) uplift possibilities
  9) installation size? (part of user experience?)
  10) ability to take advantage of expected future security improvements
  11) Compatibility with future browser/app development plans at the Tor
      Project

We ran out of time, and we didn't finish, but we'll continue this
discussion on the tbb-dev@lists.torproject.org mailing list. Please come
join us if you're interested!

[0]
http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-07-24-14.59.txt
[1] https://pad.riseup.net/p/sandbox-07-24

&gt; &gt; 
&gt; &gt; Thanks,
&gt; &gt; Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726062400</emailId><senderName>u</senderName><senderEmail>u@451f.org</senderEmail><timestampReceived>2018-07-26 06:24:00-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

Hi!

Yawning Angel:

&gt;&gt; So please, make Sandboxed Tor Browser an official thing.&gt;&gt; Fuck you, pay me.
While I believe that it is hard for some people to understand the free
software ecosystem and personal development efforts, I think that this
kind of reply is absolutely off-putting and intimidating. And it has the
unfortunate side effect of not helping anybody understand what's gping on.

Cheers,
u.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726144256</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-07-26 14:42:56-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/alternative)]


Perhaps the developers could make something like Tor Tails but stripped
down bare bones to converse system resources with just Tor Browser
afterwards packaging it all into a nice Virtual Machine program that's
invisible to the user.
On Thu, Jul 26, 2018 at 2:24 AM u &lt;u@451f.org&gt; wrote:

&gt; Hi!
&gt;
&gt; Yawning Angel:
&gt;
&gt; &gt;&gt; So please, make Sandboxed Tor Browser an official thing.&gt;&gt; Fuck you,
&gt; pay me.
&gt; While I believe that it is hard for some people to understand the free
&gt; software ecosystem and personal development efforts, I think that this
&gt; kind of reply is absolutely off-putting and intimidating. And it has the
&gt; unfortunate side effect of not helping anybody understand what's gping on.
&gt;
&gt; Cheers,
&gt; u.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

Perhaps the developers could make something like Tor Tails but stripped down bare \
bones to converse system resources with just Tor Browser afterwards packaging it all \
into a nice Virtual Machine program that's invisible to the user.&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu, Jul 26, 2018 at 2:24 AM u &lt;&lt;a \
href="mailto:u@451f.org"&gt;u@451f.org&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi!&lt;br&gt; &lt;br&gt;
Yawning Angel:&lt;br&gt;
&lt;br&gt;
&gt;&gt; So please, make Sandboxed Tor Browser an official thing.&gt;&gt; Fuck you, \
pay me.&lt;br&gt; While I believe that it is hard for some people to understand the \
free&lt;br&gt; software ecosystem and personal development efforts, I think that this&lt;br&gt;
kind of reply is absolutely off-putting and intimidating. And it has the&lt;br&gt;
unfortunate side effect of not helping anybody understand what's gping on.&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
u.&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502225250</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-02 22:52:50-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>


&gt; On 3 May 2018, at 02:09, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; I think my approach here would be to try to support both auth types by
&gt; the time we launch this feature (under the "standard" auth type), and
&gt; then in the future as we get more insight on how people use them, we
&gt; should start allowing to individually switch them on and off.

Careful. If we start by turning both options on or off together, then we won't
have any tests for them being on and off separately.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180509085035</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-09 08:50:35-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; writes:
&gt;
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; On 04/28/2018 06:19 AM, teor wrote:
&gt;&gt;&gt;&gt; Or should we require the service to enable both for all clients?
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; If you want to let the service be able to enable one while disable the
&gt;&gt;&gt;&gt; other, do you have any opinion on how to configure the torrc?
&gt;&gt;&gt; 
&gt;&gt;&gt; If someone doesn't understand client auth in detail, and just wants
&gt;&gt;&gt; to be more secure, we should give them a single option that enables
&gt;&gt;&gt; both kinds of client auth. (Security by default.)
&gt;&gt;&gt; 
&gt;&gt;&gt; OnionServiceClientAuthentication 1
&gt;&gt;&gt; (Default: 0)
&gt;&gt;&gt; 
&gt;&gt;&gt; If someone knows they only want a particular client auth method,
&gt;&gt;&gt; we should give them another option that contains a list of active
&gt;&gt;&gt; client auth methods. (Describe what you have, not what you don't
&gt;&gt;&gt; have, because negatives confuse humans.)
&gt;&gt;&gt; 
&gt;&gt;&gt; OnionServiceClientAuthenticationMethods intro
&gt;&gt;&gt; (Default: descriptor, intro)
&gt;&gt;
&gt;&gt;
&gt;&gt; Do you have any opinion on specifying the client names in your
&gt;&gt; recommendation? and the list of client names in "descriptor" and "intro"
&gt;&gt; should be independent.
&gt;&gt;
&gt;&gt; However, what i am currently think of is that we can use the existing
&gt;&gt; format.
&gt;&gt;
&gt;&gt; HiddenServiceAuthorizeClient auth-type client-name,client-name,...
&gt;&gt;
&gt;&gt; But instead of allowing only two auth-types "descriptor" and "intro", we
&gt;&gt; allow another type called "default" which includes both "descriptor" and
&gt;&gt; "intro"
&gt;&gt;
&gt;&gt; So if I put an option:
&gt;&gt; HiddenServiceAuthorizeClient default client-name,client-name,...
&gt;&gt;
&gt;&gt; It will be equivalent to two lines of:
&gt;&gt; HiddenServiceAuthorizeClient descriptor client-name,client-name,...
&gt;&gt; HiddenServiceAuthorizeClient intro client-name,client-name,...
&gt;&gt;
&gt;&gt; And on the client side, if I put an option:
&gt;&gt; HidServAuth onion-address default x25519-private-key ed25519-private-key
&gt;&gt;
&gt;&gt; It will be equivalent to two lines of:
&gt;&gt; HidServAuth onion-address descriptor x25519-private-key
&gt;&gt; HidServAuth onion-address intro ed25519-private-key
&gt;&gt;
&gt;
&gt; In general, I feel like being able to individually enable "intro" or
&gt; "descriptor" auth might be a worthwhile approach for advanced use cases
&gt; (see end of my email).  However, I can see the following issues:
&gt;
&gt; a) It's gonna be hard to communicate what "intro" or "descriptor" auth
&gt;    do when enabled individually, and motivate people to use them. I
&gt;    think it might actually confuse most operators, except from the super
&gt;    advanced ones.
&gt;
&gt; b) It will be more complicated in terms of engineering. Because we would
&gt;    have to support three auth types instead of one. Especially so if we
&gt;    try to support the special benefits you mentioned in the top post,
&gt;    like "If only intro auth is enabled, we can revoke a client without
&gt;    republishing the descriptor".
&gt;
&gt; I think my approach here would be to try to support both auth types by
&gt; the time we launch this feature (under the "standard" auth type), and
&gt; then in the future as we get more insight on how people use them, we
&gt; should start allowing to individually switch them on and off.
&gt;
&gt; ---
&gt;
&gt; For reference here is how I see the various auth types:
&gt;
&gt; "desc" auth:
&gt;        Encrypts the descriptor using x25519.  Protects against HSDirs
&gt;        who know the onion address from snooping into the descriptor and
&gt;        learning intro points, etc.
&gt;
&gt; "intro" auth:
&gt;        Authentication at the introduction layer. Allows end-to-end
&gt;        authentication with the onion service. Allows more fine-grained
&gt;        control over authentication. Also allows the service to know
&gt;        which client is visiting it (see #4700).
&gt;
&gt; "standard" auth:
&gt;        The combination of "desc" auth and "intro" auth. This basically
&gt;        provides the same security logic as v2 "basic" auth.  IMO, this
&gt;        is what most operators want when they turn on client auth.
&gt;
&gt; And here are use cases for switching the auths individually:
&gt;
&gt; "intro" auth without "desc" auth:
&gt;        Like haxxpop said in top post, if we only have intro auth we can
&gt;        revoke/add clients without needing to republish our descriptor.
&gt;
&gt; "desc" auth without "intro" auth:
&gt;        This might be useful if a use case does not appreciate the
&gt;        anti-feature of intro auth where it allows the HS to know which
&gt;        client is visiting it at any given time (see #4700).
&gt;

I thought about this some more and discussed it with haxxpop on IRC. In
the end, I think that perhaps starting with just desc auth and then in
the future implementing intro auth is also an acceptable plan forward.

A few more things to think about:

a) Desc auth uses x25519 keys. They look like this:

      2B6vNPLQkvRaMnuP9jmfdnCEU+dp82vwTRpMleEPjUA=

   Do we want these keys prefixed with some string? So that it doesn't
   look like a random base64 string that could also be confused with an
   ed25519 key (that's used in intro auth), and so that Tor could throw
   warnings if someone tries to use a wrong key (e.g. give the public
   key to Tor instead of the private key). 

b) We might also want to look into XEdDSA and see if we can potentially
   use the same keypair for both intro auth (ed25519) and desc auth (x25519).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180509172005</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-05-09 17:20:05-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt; I thought about this some more and discussed it with haxxpop on IRC. In=

&gt; the end, I think that perhaps starting with just desc auth and then in
&gt; the future implementing intro auth is also an acceptable plan forward.

I think we have two more things to think about.

1. I forgot to think about the format of client_authorized_pubkeys file.
In the client_authorized_pubkeys file, each line should indicate the
auth type for which the pubkey is used instead of just specifying the
client name and the pubkey. So the line should be as follows.

&lt;client-name&gt; &lt;auth-type&gt; &lt;pubkey&gt;

and, if auth-type is "standard", it will be equivalent to two lines of
"desc" and "intro".

2. If we want to release the "desc" auth first, I want to say something
about the config lines.

The "standard" auth config on the client side will not contain the
ed25519 private key and it will look like this:

HidServAuth onion-address standard x25519-private-key

However, after we release the intro auth, that config line (which does
not contain the ed25519 private key) should still be valid because, if
the client upgrades its version, it doesn't need to change the word
"standard" to the word "desc" in the HidServAuth config line.

On the service side, it will be different. After releasing "desc" auth
but before releasing "intro" auth, the line in client_authorized_pubkeys
will look like this (without ed25519 pubkey).

&lt;client-name&gt; standard x25519-public-key

But after we release the "intro" auth, that line shouldn't be valid
anymore because the "standard" line should contain both x25519 and
ed25519 public keys. It's different from the client side.

--

I think (1) may not have problems (I guess) but for (2) is it acceptable
to make ed25519-private-key optional on the HidServAuth "standard"
config line?

--

On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt; b) We might also want to look into XEdDSA and see if we can potentially=

&gt;    use the same keypair for both intro auth (ed25519) and desc auth
(x25519).

This will be a great advantage if we can do that because putting two
private keys in the HidServAuth is so frustrating.




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180514102632</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-14 10:26:32-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; writes:

&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt;&gt; I thought about this some more and discussed it with haxxpop on IRC. In
&gt;&gt; the end, I think that perhaps starting with just desc auth and then in
&gt;&gt; the future implementing intro auth is also an acceptable plan forward.
&gt;
&gt; I think we have two more things to think about.
&gt;
&gt; 1. I forgot to think about the format of client_authorized_pubkeys file.
&gt; In the client_authorized_pubkeys file, each line should indicate the
&gt; auth type for which the pubkey is used instead of just specifying the
&gt; client name and the pubkey. So the line should be as follows.
&gt;
&gt; &lt;client-name&gt; &lt;auth-type&gt; &lt;pubkey&gt;
&gt;
&gt; and, if auth-type is "standard", it will be equivalent to two lines of
&gt; "desc" and "intro".
&gt;

Sounds plausible.

BTW, what's the role of `client_authorized_pubkeys` in your opinion? Is
it only used by little-t-tor internally to see which clients are
recognized or not? IIUC, the onion service operator should not really
need to use it since it contains pubkeys.

BTW, I noticed that in v2, when we enable client auth, the onion service
also edits the `hostname` file to produce different lines for each
client, so that the operator can copy-paste them directly to the
users. Do you find that useful? Do you think we should do it too for v3?

Ideally we should ask for feedback from people who use client auth here,
because all these questions are basically UX questions...

&gt; 2. If we want to release the "desc" auth first, I want to say something
&gt; about the config lines.
&gt;
&gt; The "standard" auth config on the client side will not contain the
&gt; ed25519 private key and it will look like this:
&gt;
&gt; HidServAuth onion-address standard x25519-private-key
&gt;
&gt; However, after we release the intro auth, that config line (which does
&gt; not contain the ed25519 private key) should still be valid because, if
&gt; the client upgrades its version, it doesn't need to change the word
&gt; "standard" to the word "desc" in the HidServAuth config line.
&gt;
&gt; On the service side, it will be different. After releasing "desc" auth
&gt; but before releasing "intro" auth, the line in client_authorized_pubkeys
&gt; will look like this (without ed25519 pubkey).
&gt;
&gt; &lt;client-name&gt; standard x25519-public-key
&gt;
&gt; But after we release the "intro" auth, that line shouldn't be valid
&gt; anymore because the "standard" line should contain both x25519 and
&gt; ed25519 public keys. It's different from the client side.
&gt;

Yeah this is another great UX question I'm not entirely sure about...

Perhaps the "standard" type should use the keys provided and do the best
it can with those keys. If both keys are provided it should do both "desc"
and "intro" auth, otherwise it should just do the best it can. But to do
this, we need to be able to differentiate "desc" keys from "intro" keys...

&gt; --
&gt;
&gt; I think (1) may not have problems (I guess) but for (2) is it acceptable
&gt; to make ed25519-private-key optional on the HidServAuth "standard"
&gt; config line?
&gt;

Sounds reasonable perhaps... But we need to think more about the UX implications!

&gt; --
&gt;
&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt;&gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt;&gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt; (x25519).
&gt;
&gt; This will be a great advantage if we can do that because putting two
&gt; private keys in the HidServAuth is so frustrating.
&gt;

Yeah we should think about this too. I'll try do some research this week.

BTW an alternative approach here when both keys are used would be to
concatenate them into one string so that the user does not need to care
about two different keys, and they should just care about a single
"authentication token".

Thanks for raising these issues haxxpop and sorry for not having
straightforward answers for them just yet!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180514143817</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-05-14 14:38:17-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

On Thu, May 10, 2018 at 12:20:05AM +0700, Suphanat Chunhapanya wrote:
&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt; &gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt; &gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt; (x25519).
&gt; 
&gt; This will be a great advantage if we can do that because putting two
&gt; private keys in the HidServAuth is so frustrating.

The private key for intro auth is used to make a signature (that will be
different per client), while the private key for desc auth is used to
decrypt the descriptor (which will be the same for all clients), no?

(Not to mention that you should never use the same key for decryption
and signing.)

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180516180832</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-05-16 18:08:32-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>



On 05/14/2018 05:26 PM, George Kadianakis wrote:
&gt; Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; writes:
&gt; 
&gt;&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt;&gt;&gt; I thought about this some more and discussed it with haxxpop on IRC. In
&gt;&gt;&gt; the end, I think that perhaps starting with just desc auth and then in
&gt;&gt;&gt; the future implementing intro auth is also an acceptable plan forward.
&gt;&gt;
&gt;&gt; I think we have two more things to think about.
&gt;&gt;
&gt;&gt; 1. I forgot to think about the format of client_authorized_pubkeys file.
&gt;&gt; In the client_authorized_pubkeys file, each line should indicate the
&gt;&gt; auth type for which the pubkey is used instead of just specifying the
&gt;&gt; client name and the pubkey. So the line should be as follows.
&gt;&gt;
&gt;&gt; &lt;client-name&gt; &lt;auth-type&gt; &lt;pubkey&gt;
&gt;&gt;
&gt;&gt; and, if auth-type is "standard", it will be equivalent to two lines of
&gt;&gt; "desc" and "intro".
&gt;&gt;
&gt; 
&gt; Sounds plausible.
&gt; 
&gt; BTW, what's the role of `client_authorized_pubkeys` in your opinion? Is
&gt; it only used by little-t-tor internally to see which clients are
&gt; recognized or not? IIUC, the onion service operator should not really
&gt; need to use it since it contains pubkeys.

The role of `client_authorized_pubkeys` is to keep all pubkeys of
clients so that we can use them to encrypt the descriptor when the
client auth is enabled.

To specify which clients are recognized, the operator must put the
client names in `HiddenServAuthorizeClient` directive. After that, the
service will use the names in `HiddenServAuthorizeclient` to search for
pubkeys in `client_authorized_pubkeys`. So, if there is a pubkey in
`client_authorized_pubkeys` whose client name is not in
`HiddenServAuthorizeClient`, that key will not be used.

I think the operator needs to use it because, in case the client wants
to generate a keypair itself, the operator needs to put the client's
pubkey in this file.

&gt; 
&gt; BTW, I noticed that in v2, when we enable client auth, the onion service
&gt; also edits the `hostname` file to produce different lines for each
&gt; client, so that the operator can copy-paste them directly to the
&gt; users. Do you find that useful? Do you think we should do it too for v3?

I think we did that because in stealth mode, the hostname will change
depending on the client. In v3, the hostname is always static, so I
think we don't have to do that.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180712154813</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-07-12 15:48:13-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]


On 18 May (19:03:09), George Kadianakis wrote:
&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt; 
&gt; &gt; On Thu, May 10, 2018 at 12:20:05AM +0700, Suphanat Chunhapanya wrote:
&gt; &gt;&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt; &gt;&gt; &gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt; &gt;&gt; &gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt; &gt;&gt; (x25519).
&gt; &gt;&gt; 
&gt; &gt;&gt; This will be a great advantage if we can do that because putting two
&gt; &gt;&gt; private keys in the HidServAuth is so frustrating.
&gt; &gt;
&gt; &gt; The private key for intro auth is used to make a signature (that will be
&gt; &gt; different per client), while the private key for desc auth is used to
&gt; &gt; decrypt the descriptor (which will be the same for all clients), no?
&gt; &gt;
&gt; 
&gt; Hm. Both intro auth and desc auth keys are different for each client. In
&gt; the case of desc auth we do that so that we can revoke a client without
&gt; needing to refresh desc auth keys for all other clients.

Following yesterday's discussion on IRC with haxxpop and asn, and some more
today, I worked on a revised version of the spec:

https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket20700_01

Probably will be easier to just read the whole thing instead of the diff:

https://gitweb.torproject.org/user/dgoulet/torspec.git/tree/rend-spec-v3.txt?h=ticket20700_01#n2279

So the idea is that instead of making the HS client/operator have to pass
around portions of a file containing private and public keys, it is to
logically seperate them so that the operator only deals with one single file
when wanting to transmit the keys to a client.

Thoughts?
David

-- 
fbv5H3G6O9hLu6Txl6sNIg/unJ95a7iOi43Afzw8ROs=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180712172454</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-12 17:24:54-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; On 18 May (19:03:09), George Kadianakis wrote:
&gt;&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; On Thu, May 10, 2018 at 12:20:05AM +0700, Suphanat Chunhapanya wrote:
&gt;&gt; &gt;&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt;&gt; &gt;&gt; &gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt;&gt; &gt;&gt; &gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt;&gt; &gt;&gt; (x25519).
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt;&gt; This will be a great advantage if we can do that because putting two
&gt;&gt; &gt;&gt; private keys in the HidServAuth is so frustrating.
&gt;&gt; &gt;
&gt;&gt; &gt; The private key for intro auth is used to make a signature (that will be
&gt;&gt; &gt; different per client), while the private key for desc auth is used to
&gt;&gt; &gt; decrypt the descriptor (which will be the same for all clients), no?
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Hm. Both intro auth and desc auth keys are different for each client. In
&gt;&gt; the case of desc auth we do that so that we can revoke a client without
&gt;&gt; needing to refresh desc auth keys for all other clients.
&gt;
&gt; Following yesterday's discussion on IRC with haxxpop and asn, and some more
&gt; today, I worked on a revised version of the spec:
&gt;
&gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket20700_01
&gt;
&gt; Probably will be easier to just read the whole thing instead of the diff:
&gt;
&gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/tree/rend-spec-v3.txt?h=ticket20700_01#n2279
&gt;
&gt; So the idea is that instead of making the HS client/operator have to pass
&gt; around portions of a file containing private and public keys, it is to
&gt; logically seperate them so that the operator only deals with one single file
&gt; when wanting to transmit the keys to a client.
&gt;

Thanks for the fixes David.

Please see last commit of https://github.com/torproject/torspec/pull/24
for some stuff on top of your branch.

Some things we need to think about:
- The ".pubkeys" files are now used internally by Tor, whereas the
  "./client_cfg_lines" file is the one that the operator is supposed to
  look at and interact with. Is it easier for the operator to deal with
  one big file, or with many small files? We should think about that and
  maybe reverse our choices.

  As an example, how is the operator supposed to know which line in
  "./client_cfg_lines" is for which client? In my patch above I used
  # comments to separate lines but that might not be straightforward for
  people.

- Assuming that we are not doing intro auth any time soon, I deleted all
  mentions of ed25519 keys from that side of the spec, in the assumption
  that we will need to introduce them back the right way if we ever
  decide to do intro auth. Is this a good idea or not?

  As an example of the complexity I'm trying to hide, if we keep ed25519
  in the spec, we need to specify how the HidServAuth line knows whether
  a key is x25519 or ed25519.

- Do we need to define new torrc options for service-side and client-side?

Some more things to do:
- Rename "./client_authorized" to "./authorized_clients"?
- Rename "./client_cfg_lines" to ????
- What's the "auth-type"? I assume standard.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180712174129</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-07-12 17:41:29-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Jul (20:24:54), George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt; 
&gt; &gt; On 18 May (19:03:09), George Kadianakis wrote:
&gt; &gt;&gt; Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:
&gt; &gt;&gt; 
&gt; &gt;&gt; &gt; On Thu, May 10, 2018 at 12:20:05AM +0700, Suphanat Chunhapanya wrote:
&gt; &gt;&gt; &gt;&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt; &gt;&gt; &gt;&gt; &gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt; &gt;&gt; &gt;&gt; &gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt; &gt;&gt; &gt;&gt; (x25519).
&gt; &gt;&gt; &gt;&gt; 
&gt; &gt;&gt; &gt;&gt; This will be a great advantage if we can do that because putting two
&gt; &gt;&gt; &gt;&gt; private keys in the HidServAuth is so frustrating.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; The private key for intro auth is used to make a signature (that will be
&gt; &gt;&gt; &gt; different per client), while the private key for desc auth is used to
&gt; &gt;&gt; &gt; decrypt the descriptor (which will be the same for all clients), no?
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; Hm. Both intro auth and desc auth keys are different for each client. In
&gt; &gt;&gt; the case of desc auth we do that so that we can revoke a client without
&gt; &gt;&gt; needing to refresh desc auth keys for all other clients.
&gt; &gt;
&gt; &gt; Following yesterday's discussion on IRC with haxxpop and asn, and some more
&gt; &gt; today, I worked on a revised version of the spec:
&gt; &gt;
&gt; &gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/commit/?h=ticket20700_01
&gt; &gt;
&gt; &gt; Probably will be easier to just read the whole thing instead of the diff:
&gt; &gt;
&gt; &gt; https://gitweb.torproject.org/user/dgoulet/torspec.git/tree/rend-spec-v3.txt?h=ticket20700_01#n2279
&gt; &gt;
&gt; &gt; So the idea is that instead of making the HS client/operator have to pass
&gt; &gt; around portions of a file containing private and public keys, it is to
&gt; &gt; logically seperate them so that the operator only deals with one single file
&gt; &gt; when wanting to transmit the keys to a client.
&gt; &gt;
&gt; 
&gt; Thanks for the fixes David.
&gt; 
&gt; Please see last commit of https://github.com/torproject/torspec/pull/24
&gt; for some stuff on top of your branch.
&gt; 
&gt; Some things we need to think about:
&gt; - The ".pubkeys" files are now used internally by Tor, whereas the
&gt;   "./client_cfg_lines" file is the one that the operator is supposed to
&gt;   look at and interact with. Is it easier for the operator to deal with
&gt;   one big file, or with many small files? We should think about that and
&gt;   maybe reverse our choices.

Single file might actually be better for the client_cfg_lines because 1) it is
much easier to shred out of the filesystem, 2) it is also much easier to spot
by the operator that she still has private keys from client(s) instead of
having to look constantly into client_cfg_lines for leftover lines.

&gt; 
&gt;   As an example, how is the operator supposed to know which line in
&gt;   "./client_cfg_lines" is for which client? In my patch above I used
&gt;   # comments to separate lines but that might not be straightforward for
&gt;   people.
&gt; 
&gt; - Assuming that we are not doing intro auth any time soon, I deleted all
&gt;   mentions of ed25519 keys from that side of the spec, in the assumption
&gt;   that we will need to introduce them back the right way if we ever
&gt;   decide to do intro auth. Is this a good idea or not?
&gt; 
&gt;   As an example of the complexity I'm trying to hide, if we keep ed25519
&gt;   in the spec, we need to specify how the HidServAuth line knows whether
&gt;   a key is x25519 or ed25519.

Actually, we should have a simple format like "ed25519:&lt;base64_key&gt;" instead
so then in 5 years, if we end up with 10 different authorization method, we
can just pass "key:value" argument at will to the torrc option.

&gt; 
&gt; - Do we need to define new torrc options for service-side and client-side?

So far, only client side needs a new "HidServAuth".

&gt; 
&gt; Some more things to do:
&gt; - Rename "./client_authorized" to "./authorized_clients"?

+1

&gt; - Rename "./client_cfg_lines" to ????

Lets go single file! I actually now prefer single file.

&gt; - What's the "auth-type"? I assume standard.

We could use "descriptor" even though it won't stay much to a regular user, it
will at least have a semantic for power users. Because even "standard" for
regular user will probably mean nothing... ?

David

-- 
fbv5H3G6O9hLu6Txl6sNIg/unJ95a7iOi43Afzw8ROs=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711164554</emailId><senderName>Nathaniel Suchy</senderName><senderEmail>me@lunorian.is</senderEmail><timestampReceived>2018-07-11 16:45:54-0400</timestampReceived><subject>Re: [tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

[Attachment #2 (multipart/alternative)]


I'm going to state my support for it here. I'm not a developer however I
agree all exits should provide DNS from a local resolver (Unbound or
similar) to get the exit flag.

On Wed, Jul 11, 2018 at 12:38 PM nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt; I'd like to see 'working DNS' as a requirement for the exit flag.
&gt;
&gt; If there are no major objections and if I'm able to find
&gt; someone to implement it I'd like to proceed with writing
&gt; a small proposal.
&gt;
&gt; Would anyone be willing to implement it in tor?
&gt;
&gt;
&gt;
&gt; https://trac.torproject.org/projects/tor/ticket/26691
&gt;
&gt;
&gt; --
&gt; https://twitter.com/nusenu_
&gt; https://mastodon.social/@nusenu
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;I'm going to state my support for it here. I'm not a developer \
however I agree all exits should provide DNS from a local resolver (Unbound or \
similar) to get the exit flag.&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On \
Wed, Jul 11, 2018 at 12:38 PM nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;I'd like to see 'working \
DNS' as a requirement for the exit flag.&lt;br&gt; &lt;br&gt;
If there are no major objections and if I'm able to find&lt;br&gt;
someone to implement it I'd like to proceed with writing&lt;br&gt;
a small proposal.&lt;br&gt;
&lt;br&gt;
Would anyone be willing to implement it in tor?&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/ticket/26691" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/26691&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
&lt;a href="https://twitter.com/nusenu_" rel="noreferrer" \
target="_blank"&gt;https://twitter.com/nusenu_&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://mastodon.social/@nusenu" rel="noreferrer" \
target="_blank"&gt;https://mastodon.social/@nusenu&lt;/a&gt;&lt;br&gt; &lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711165400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-11 16:54:00-0400</timestampReceived><subject>Re: [tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Nathaniel Suchy:
&gt; I'm going to state my support for it here. I'm not a developer however I
&gt; agree all exits should provide DNS from a local resolver (Unbound or
&gt; similar) to get the exit flag.

just to be clear:
the proposal would not require any specific DNS configuration it would simply
require the exit to not fail to many DNS resolution attempts.

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711170812</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-07-11 17:08:12-0400</timestampReceived><subject>Re: [tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

nusenu &lt;nusenu-lists@riseup.net&gt; writes:

&gt; I'd like to see 'working DNS' as a requirement for the exit flag.
&gt;
&gt; If there are no major objections and if I'm able to find
&gt; someone to implement it I'd like to proceed with writing
&gt; a small proposal.
&gt;
&gt; Would anyone be willing to implement it in tor?

This would be a feature for scanners, not little-t-tor itself, right?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180711172500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-11 17:25:00-0400</timestampReceived><subject>Re: [tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt; Would anyone be willing to implement it in tor?
&gt; 
&gt; This would be a feature for scanners, not little-t-tor itself, right?

the test would be performed by tor in the dir auth role (like other tests
performed by dir auths)

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180709161033</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-09 16:10:33-0400</timestampReceived><subject>Re: [tor-dev] The case with Tor2Web</subject><body>

To be 100% clear, "dos" as in "denial of service" correct? Thx.

&gt; On Jul 9, 2018, at 7:32 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Hello!
&gt; 
&gt; It's a semi-secret that tor2web traffic has been blocked from the Tor
&gt; network when we introduced the DoS subsystem this March [0]. The reason
&gt; is that a big part of the DoS traffic was coming from one-hop clients
&gt; continuously hammering onion services.
&gt; 
&gt; This is something that we've been considering doing for a while (for
&gt; security and code-complexity reasons), and it just happened naturally
&gt; during the DoS incident.
&gt; 
&gt; As part of this, and since the DoS subsystem is going to stick around,
&gt; we are planning to permanently kill the Tor2Web subsystem of Tor, in an
&gt; effort to simplify our codebase and our feature list.
&gt; 
&gt; If you've been relying on tor2web for something, please consider
&gt; switching to a normal 3-hop client indeed. This is a heads up so that
&gt; you can let us know if that won't work for you, or you need help
&gt; transitioning out.
&gt; 
&gt; Cheers and hope we are not making you sad.
&gt; 
&gt; [0]: https://trac.torproject.org/projects/tor/ticket/24902
&gt; https://blog.torproject.org/new-stable-tor-releases-security-fixes-and-dos-prevention-03210-03110-02915
&gt;  _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180707134947</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-07-07 13:49:47-0400</timestampReceived><subject>Re: [tor-dev] locked out of my bug report #26675</subject><body>

On Sat, Jul 7, 2018 at 12:38 AM,  &lt;starlight.2018q2@binnacle.cx&gt; wrote:
&gt; Today I opened a ticket regarding difficult to understand
&gt; Torflow behavior.  Subsequently I figured out the behavior,
&gt; realizing it is a non-material bug that has no serious
&gt; implication.  However I can no longer revise the ticket,
&gt; possibly due to
&gt;
&gt; https://trac.torproject.org/projects/tor/ticket/26675#comment:2
&gt;
&gt; or perhaps due to the next change which somehow reversed
&gt;
&gt;&gt;Date: Sat, 07 Jul 2018 01:33:46 -0000
&gt;&gt;Changes (by cypherpunks):
&gt;&gt; * status:  new =&gt; closed
&gt;&gt; * resolution:   =&gt; fixed
&gt;
&gt; I find this troubling.

Hi, Starlight!

Some part of trac are temporarily disabled, due to a bunch of
vandalism last night.  I hope somebody will re-enable soon, if they
have time to keep an eye on it today. In the meantime, I've tried to
get you back on to your ticket.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180704094433</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2018-07-04 09:44:33-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On Wed, Jul 04, 2018 at 12:44:29AM -0700, Keifer Bly wrote:
&gt; On the newer versions of tor browser, I have noticed that the "does this 
&gt; computer's internet connection go through a firewall that only allows 
&gt; certain ports?" was removed. I think this should be put back in the tor 
&gt; browser configuration options for users who are trying from behind firewalls 
&gt; that only allow certain ports.

The option is still there. Attached to this email, you'll find a screenshot of 
it that I just took from the most recent version of Tor Browser.
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key

["Screenshot_20180704_114127.png" (image/png)]
["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704105210</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-04 10:52:10-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


Yes, but for me the option only appears when the tor browser is already successfully  \
connected and I can click on the "tor network settings". It does not  appear in the \
"configure" option when first starting tor browser. And for that matter the configure \
option only seems to appear the first time tor browser is run and impossible to \
access anytime after on newest tor browser.


In short the "tor network settings" option seems impossible to access as it only \
appears when the tor browser is successfully running which is problematic for users \
                attempting to configure blocked ports or bridges right off the bat.
From: Jonathan Marquardt
Sent: Wednesday, July 4, 2018 2:53 AM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] Tor port restriction option was removed

On Wed, Jul 04, 2018 at 12:44:29AM -0700, Keifer Bly wrote:
&gt; On the newer versions of tor browser, I have noticed that the "does this 
&gt; computer's internet connection go through a firewall that only allows 
&gt; certain ports?" was removed. I think this should be put back in the tor 
&gt; browser configuration options for users who are trying from behind firewalls 
&gt; that only allow certain ports.

The option is still there. Attached to this email, you'll find a screenshot of 
it that I just took from the most recent version of Tor Browser.
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key


[Attachment #5 (unknown)]

&lt;html xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink="#954F72"&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Yes, but for me the option only appears when \
the tor browser is already successfully   connected and I can click on the "tor \
network settings". It does not   appear in the "configure" option when first starting \
tor browser. And for that matter the configure option only seems to appear the first \
time tor browser is run and impossible to access anytime after on newest tor \
browser.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;In short the "tor network \
settings" option seems impossible to access as it only appears when the tor browser \
is successfully running which is problematic for users attempting to configure \
blocked ports or bridges right off the bat.&lt;/p&gt;&lt;div \
style='mso-element:para-border-div;border:none;border-top:solid #E1E1E1 \
1.0pt;padding:3.0pt 0in 0in 0in'&gt;&lt;p class=MsoNormal \
style='border:none;padding:0in'&gt;&lt;b&gt;From: &lt;/b&gt;&lt;a \
href="mailto:mail@parckwart.de"&gt;Jonathan Marquardt&lt;/a&gt;&lt;br&gt;&lt;b&gt;Sent: &lt;/b&gt;Wednesday, \
July 4, 2018 2:53 AM&lt;br&gt;&lt;b&gt;To: &lt;/b&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;b&gt;Subject: \
&lt;/b&gt;Re: [tor-dev] Tor port restriction option was removed&lt;/p&gt;&lt;/div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;On Wed, Jul 04, 2018 at \
12:44:29AM -0700, Keifer Bly wrote:&lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; On the newer versions \
of tor browser, I have noticed that the "does this &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
computer's internet connection go through a firewall that only allows &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; certain ports?" was removed. I think this should be put back in \
the tor &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; browser configuration options for users who are \
trying from behind firewalls &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; that only allow certain \
ports.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;The option is \
still there. Attached to this email, you'll find a screenshot of &lt;/p&gt;&lt;p \
class=MsoNormal&gt;it that I just took from the most recent version of Tor \
Browser.&lt;/p&gt;&lt;p class=MsoNormal&gt;-- &lt;/p&gt;&lt;p class=MsoNormal&gt;OpenPGP Key: \
47BC7DE83D462E8BED18AA861224DBD299A4F5F3&lt;/p&gt;&lt;p class=MsoNormal&gt;                       \
https://www.parckwart.de/pgp_key&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704120130</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2018-07-04 12:01:30-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, Jul 04, 2018 at 03:52:10AM -0700, Keifer Bly wrote:
&gt; Yes, but for me the option only appears when the tor browser is already 
&gt; successfully connected and I can click on the "tor network settings". It 
&gt; does not appear in the "configure" option when first starting tor browser. 
&gt; And for that matter the configure option only seems to appear the first time 
&gt; tor browser is run and impossible to access anytime after on newest tor 
&gt; browser.
&gt; 
&gt; 
&gt; In short the "tor network settings" option seems impossible to access as it 
&gt; only appears when the tor browser is successfully running which is 
&gt; problematic for users attempting to configure blocked ports or bridges right 
&gt; off the bat.

That's not true. You can access these settings by clicking the "Cancel" button 
when Tor is establishing the connection. Although, I admit, a seperate button 
that says "Configure" there could really be benefitial to avoid confusion.
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704124648</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-04 12:46:48-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


➢ I admit, a separate button that says "Configure" there could really be beneficial \
to void confusion. I agree, I think that future tor browser s having a dedicated \
"configure" button is a  good idea for this reason.

And, upon clicking the "configure " button at start up, this is what I get (see the \
screenshot).

As you can see the options "tor is censored in my country" and "I use a proxy to \
connect to the internet" options are there, but the "this computer goes through a \
firewall that only allows connections on certain ports" option is not there, only \
appearing when I click the "tor network settings" button on the tor browser tab; I \
would suggest putting this option back in the configure button window as this current \
layout may be troublesome for people trying to connect from firewalls that only allow \
certain ports.

From: Jonathan Marquardt
Sent: Wednesday, July 4, 2018 5:01 AM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] Tor port restriction option was removed

On Wed, Jul 04, 2018 at 03:52:10AM -0700, Keifer Bly wrote:
&gt; Yes, but for me the option only appears when the tor browser is already 
&gt; successfully connected and I can click on the "tor network settings". It 
&gt; does not appear in the "configure" option when first starting tor browser. 
&gt; And for that matter the configure option only seems to appear the first time 
&gt; tor browser is run and impossible to access anytime after on newest tor 
&gt; browser.
&gt; 
&gt; 
&gt; In short the "tor network settings" option seems impossible to access as it 
&gt; only appears when the tor browser is successfully running which is 
&gt; problematic for users attempting to configure blocked ports or bridges right 
&gt; off the bat.

That's not true. You can access these settings by clicking the "Cancel" button 
when Tor is establishing the connection. Although, I admit, a seperate button 
that says "Configure" there could really be benefitial to avoid confusion.
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key


[Attachment #5 (unknown)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;!--[if !mso]&gt;&lt;style&gt;v\:* {behavior:url(#default#VML);} o\:* \
{behavior:url(#default#VML);} w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
&lt;/style&gt;&lt;![endif]--&gt;&lt;style&gt;&lt;!--
/* Font Definitions */
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{mso-style-priority:34;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
/* List Definitions */
@list l0
	{mso-list-id:1342244636;
	mso-list-type:hybrid;
	mso-list-template-ids:-1064554060 -1 67698691 67698693 67698689 67698691 67698693 \
67698689 67698691 67698693;} @list l0:level1
	{mso-level-start-at:0;
	mso-level-number-format:bullet;
	mso-level-text:\F0D8;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
@list l0:level2
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l0:level3
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l0:level4
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l0:level5
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l0:level6
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
@list l0:level7
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Symbol;}
@list l0:level8
	{mso-level-number-format:bullet;
	mso-level-text:o;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:"Courier New";}
@list l0:level9
	{mso-level-number-format:bullet;
	mso-level-text:\F0A7;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	text-indent:-.25in;
	font-family:Wingdings;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink="#954F72"&gt;&lt;div \
class=WordSection1&gt;&lt;ul style='margin-top:0in' type=disc&gt;&lt;li class=MsoListParagraph \
style='margin-left:0in;mso-list:l0 level1 lfo1'&gt;I admit, a separate button that says \
"Configure" there could really be beneficial to void confusion.&lt;/li&gt;&lt;/ul&gt;&lt;p \
class=MsoListParagraph&gt;I agree, I think that future tor browser s having a dedicated \
"configure" button is a   good idea for this reason.&lt;/p&gt;&lt;p \
class=MsoListParagraph&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoListParagraph&gt;And, upon \
clicking the "configure " button at start up, this is what I get (see the \
screenshot).&lt;img width=614 height=546 style='width:6.4in;height:5.6916in' \
id="Picture_x0020_3" src="cid:image003.png@01D4135A.651709A0"&gt;&lt;/p&gt;&lt;p \
class=MsoListParagraph&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoListParagraph&gt;As you can see \
the options "tor is censored in my country" and "I use a proxy to connect to the \
internet" options are there, but the "this computer goes through a firewall that only \
allows connections on certain ports" option is not there, only appearing when I click \
the "tor network settings" button on the tor browser tab; I would suggest putting \
this option back in the configure button window as this current layout may be \
troublesome for people trying to connect from firewalls that only allow certain \
ports.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div \
style='mso-element:para-border-div;border:none;border-top:solid #E1E1E1 \
1.0pt;padding:3.0pt 0in 0in 0in'&gt;&lt;p class=MsoNormal \
style='border:none;padding:0in'&gt;&lt;b&gt;From: &lt;/b&gt;&lt;a \
href="mailto:mail@parckwart.de"&gt;Jonathan Marquardt&lt;/a&gt;&lt;br&gt;&lt;b&gt;Sent: &lt;/b&gt;Wednesday, \
July 4, 2018 5:01 AM&lt;br&gt;&lt;b&gt;To: &lt;/b&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;b&gt;Subject: \
&lt;/b&gt;Re: [tor-dev] Tor port restriction option was removed&lt;/p&gt;&lt;/div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;On Wed, Jul 04, 2018 at \
03:52:10AM -0700, Keifer Bly wrote:&lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; Yes, but for me the \
option only appears when the tor browser is already &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
successfully connected and I can click on the "tor network settings". It &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; does not appear in the "configure" option when first starting \
tor browser. &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; And for that matter the configure option \
only seems to appear the first time &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; tor browser is run \
and impossible to access anytime after on newest tor &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
browser.&lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; In short the "tor network settings" option seems impossible to \
access as it &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; only appears when the tor browser is \
successfully running which is &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; problematic for users \
attempting to configure blocked ports or bridges right &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
off the bat.&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;That's not \
true. You can access these settings by clicking the "Cancel" button &lt;/p&gt;&lt;p \
class=MsoNormal&gt;when Tor is establishing the connection. Although, I admit, a \
seperate button &lt;/p&gt;&lt;p class=MsoNormal&gt;that says "Configure" there could \
really be benefitial to avoid confusion.&lt;/p&gt;&lt;p class=MsoNormal&gt;-- &lt;/p&gt;&lt;p \
class=MsoNormal&gt;OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3&lt;/p&gt;&lt;p \
class=MsoNormal&gt;                         https://www.parckwart.de/pgp_key&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


["B4C9B0F63C524CBDAE4EF4E7B5053C2A.png" (image/png)]
[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704132408</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2018-07-04 13:24:08-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, Jul 04, 2018 at 05:46:48AM -0700, Keifer Bly wrote:
&gt; &gt; I admit, a separate button that says "Configure" there could really be 
&gt; &gt; beneficial to void confusion. I agree, I think that future tor browser s 
&gt; &gt; having a dedicated "configure" button is a good idea for this reason.
&gt; 
&gt; And, upon clicking the "configure " button at start up, this is what I get 
&gt; (see the screenshot).
&gt; 
&gt; As you can see the options "tor is censored in my country" and "I use a 
&gt; proxy to connect to the internet" options are there, but the "this computer 
&gt; goes through a firewall that only allows connections on certain ports" 
&gt; option is not there, only appearing when I click the "tor network settings" 
&gt; button on the tor browser tab; I would suggest putting this option back in 
&gt; the configure button window as this current layout may be troublesome for 
&gt; people trying to connect from firewalls that only allow certain ports.

Oh, you're right! That's weird! Was this done on purpose or is it a bug?
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704135605</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-04 13:56:05-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


For me it's been like that for the last few versions of tor browser….

From: Jonathan Marquardt
Sent: Wednesday, July 4, 2018 6:24 AM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] Tor port restriction option was removed

On Wed, Jul 04, 2018 at 05:46:48AM -0700, Keifer Bly wrote:
&gt; &gt; I admit, a separate button that says "Configure" there could really be 
&gt; &gt; beneficial to void confusion. I agree, I think that future tor browser s 
&gt; &gt; having a dedicated "configure" button is a good idea for this reason.
&gt; 
&gt; And, upon clicking the "configure " button at start up, this is what I get 
&gt; (see the screenshot).
&gt; 
&gt; As you can see the options "tor is censored in my country" and "I use a 
&gt; proxy to connect to the internet" options are there, but the "this computer 
&gt; goes through a firewall that only allows connections on certain ports" 
&gt; option is not there, only appearing when I click the "tor network settings" 
&gt; button on the tor browser tab; I would suggest putting this option back in 
&gt; the configure button window as this current layout may be troublesome for 
&gt; people trying to connect from firewalls that only allow certain ports.

Oh, you're right! That's weird! Was this done on purpose or is it a bug?
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key


[Attachment #5 (unknown)]

&lt;html xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink="#954F72"&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;For me it's been like that for the last few \
versions of tor browser….&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div \
style='mso-element:para-border-div;border:none;border-top:solid #E1E1E1 \
1.0pt;padding:3.0pt 0in 0in 0in'&gt;&lt;p class=MsoNormal \
style='border:none;padding:0in'&gt;&lt;b&gt;From: &lt;/b&gt;&lt;a \
href="mailto:mail@parckwart.de"&gt;Jonathan Marquardt&lt;/a&gt;&lt;br&gt;&lt;b&gt;Sent: &lt;/b&gt;Wednesday, \
July 4, 2018 6:24 AM&lt;br&gt;&lt;b&gt;To: &lt;/b&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;&lt;b&gt;Subject: \
&lt;/b&gt;Re: [tor-dev] Tor port restriction option was removed&lt;/p&gt;&lt;/div&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;On Wed, Jul 04, 2018 at \
05:46:48AM -0700, Keifer Bly wrote:&lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; &gt; I admit, a \
separate button that says "Configure" there could really be &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; &gt; beneficial to void confusion. I agree, I think that future \
tor browser s &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; &gt; having a dedicated "configure" button \
is a good idea for this reason.&lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; And, upon clicking the "configure " button at start up, this is \
what I get &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; (see the screenshot).&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; As you can see the options "tor is \
censored in my country" and "I use a &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; proxy to connect to \
the internet" options are there, but the "this computer &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
goes through a firewall that only allows connections on certain ports" &lt;/p&gt;&lt;p \
class=MsoNormal&gt;&gt; option is not there, only appearing when I click the "tor \
network settings" &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; button on the tor browser tab; I would \
suggest putting this option back in &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; the configure button \
window as this current layout may be troublesome for &lt;/p&gt;&lt;p class=MsoNormal&gt;&gt; \
people trying to connect from firewalls that only allow certain ports.&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Oh, you're right! That's \
weird! Was this done on purpose or is it a bug?&lt;/p&gt;&lt;p class=MsoNormal&gt;-- &lt;/p&gt;&lt;p \
class=MsoNormal&gt;OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3&lt;/p&gt;&lt;p \
class=MsoNormal&gt;                         https://www.parckwart.de/pgp_key&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704170500</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-07-04 17:05:00-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Jonathan Marquardt:
&gt; On Wed, Jul 04, 2018 at 05:46:48AM -0700, Keifer Bly wrote:
&gt;&gt;&gt; I admit, a separate button that says "Configure" there could really be 
&gt;&gt;&gt; beneficial to void confusion. I agree, I think that future tor browser s 
&gt;&gt;&gt; having a dedicated "configure" button is a good idea for this reason.
&gt;&gt;
&gt;&gt; And, upon clicking the "configure " button at start up, this is what I get 
&gt;&gt; (see the screenshot).
&gt;&gt;
&gt;&gt; As you can see the options "tor is censored in my country" and "I use a 
&gt;&gt; proxy to connect to the internet" options are there, but the "this computer 
&gt;&gt; goes through a firewall that only allows connections on certain ports" 
&gt;&gt; option is not there, only appearing when I click the "tor network settings" 
&gt;&gt; button on the tor browser tab; I would suggest putting this option back in 
&gt;&gt; the configure button window as this current layout may be troublesome for 
&gt;&gt; people trying to connect from firewalls that only allow certain ports.
&gt; 
&gt; Oh, you're right! That's weird! Was this done on purpose or is it a bug?

There are some considerations on

https://trac.torproject.org/projects/tor/ticket/24452

why this is currently the case.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704171721</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-04 17:17:21-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


Ok I see the ticket. However if not a window, I think the option should be
available in done form for people who do need it.

On Wed, Jul 4, 2018 at 10:06 AM Georg Koppen &lt;gk@torproject.org&gt; wrote:

&gt; Jonathan Marquardt:
&gt; &gt; On Wed, Jul 04, 2018 at 05:46:48AM -0700, Keifer Bly wrote:
&gt; &gt;&gt;&gt; I admit, a separate button that says "Configure" there could really be
&gt; &gt;&gt;&gt; beneficial to void confusion. I agree, I think that future tor browser
&gt; s
&gt; &gt;&gt;&gt; having a dedicated "configure" button is a good idea for this reason.
&gt; &gt;&gt;
&gt; &gt;&gt; And, upon clicking the "configure " button at start up, this is what I
&gt; get
&gt; &gt;&gt; (see the screenshot).
&gt; &gt;&gt;
&gt; &gt;&gt; As you can see the options "tor is censored in my country" and "I use a
&gt; &gt;&gt; proxy to connect to the internet" options are there, but the "this
&gt; computer
&gt; &gt;&gt; goes through a firewall that only allows connections on certain ports"
&gt; &gt;&gt; option is not there, only appearing when I click the "tor network
&gt; settings"
&gt; &gt;&gt; button on the tor browser tab; I would suggest putting this option back
&gt; in
&gt; &gt;&gt; the configure button window as this current layout may be troublesome
&gt; for
&gt; &gt;&gt; people trying to connect from firewalls that only allow certain ports.
&gt; &gt;
&gt; &gt; Oh, you're right! That's weird! Was this done on purpose or is it a bug?
&gt;
&gt; There are some considerations on
&gt;
&gt; https://trac.torproject.org/projects/tor/ticket/24452
&gt;
&gt; why this is currently the case.
&gt;
&gt; Georg
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div&gt;&lt;div dir="auto"&gt;Ok I see the ticket. However if not a window, I think the option \
should be available in done form for people who do need it.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Wed, Jul 4, 2018 at 10:06 AM Georg Koppen \
&lt;&lt;a href="mailto:gk@torproject.org"&gt;gk@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Jonathan Marquardt:&lt;br&gt; &gt; On \
Wed, Jul 04, 2018 at 05:46:48AM -0700, Keifer Bly wrote:&lt;br&gt; &gt;&gt;&gt; I admit, a \
separate button that says "Configure" there could really be &lt;br&gt; &gt;&gt;&gt; \
beneficial to void confusion. I agree, I think that future tor browser s &lt;br&gt; \
&gt;&gt;&gt; having a dedicated "configure" button is a good idea for this \
reason.&lt;br&gt; &gt;&gt;&lt;br&gt;
&gt;&gt; And, upon clicking the "configure " button at start up, this is what I get \
&lt;br&gt; &gt;&gt; (see the screenshot).&lt;br&gt;
&gt;&gt;&lt;br&gt;
&gt;&gt; As you can see the options "tor is censored in my country" and "I use a &lt;br&gt;
&gt;&gt; proxy to connect to the internet" options are there, but the "this computer \
&lt;br&gt; &gt;&gt; goes through a firewall that only allows connections on certain ports" \
&lt;br&gt; &gt;&gt; option is not there, only appearing when I click the "tor network \
settings" &lt;br&gt; &gt;&gt; button on the tor browser tab; I would suggest putting this \
option back in &lt;br&gt; &gt;&gt; the configure button window as this current layout may \
be troublesome for &lt;br&gt; &gt;&gt; people trying to connect from firewalls that only \
allow certain ports.&lt;br&gt; &gt; &lt;br&gt;
&gt; Oh, you're right! That's weird! Was this done on purpose or is it a \
bug?&lt;br&gt; &lt;br&gt;
There are some considerations on&lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/ticket/24452" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/24452&lt;/a&gt;&lt;br&gt; &lt;br&gt;
why this is currently the case.&lt;br&gt;
&lt;br&gt;
Georg&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180705033129</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-07-05 03:31:29-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

On Wed, Jul 04, 2018 at 03:24:08PM +0200, Jonathan Marquardt wrote:
&gt; Oh, you're right! That's weird! Was this done on purpose or is it a bug?

It was an intentional simplification of the interface. You can read the
reasoning here:

https://trac.torproject.org/projects/tor/ticket/11405#comment:7

Our helpdesk (back when we had one) was interacting with many users who
were doing the wrong thing with the old interface.

The reasoning in short is that if 443 is one of your available ports
then your Tor will bootstrap pretty quickly anyway, and if 443 and 9001
aren't available you're probably going to need some bridge or proxy or
something in order to bootstrap.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180705062031</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-05 06:20:31-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

So tor will automatically use port 80 or 443 if Those are the only ones open?

Sent from my iPhone

&gt; On Jul 4, 2018, at 8:31 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt;&gt; On Wed, Jul 04, 2018 at 03:24:08PM +0200, Jonathan Marquardt wrote:
&gt;&gt; Oh, you're right! That's weird! Was this done on purpose or is it a bug?
&gt; 
&gt; It was an intentional simplification of the interface. You can read the
&gt; reasoning here:
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/11405#comment:7
&gt; 
&gt; Our helpdesk (back when we had one) was interacting with many users who
&gt; were doing the wrong thing with the old interface.
&gt; 
&gt; The reasoning in short is that if 443 is one of your available ports
&gt; then your Tor will bootstrap pretty quickly anyway, and if 443 and 9001
&gt; aren't available you're probably going to need some bridge or proxy or
&gt; something in order to bootstrap.
&gt; 
&gt; --Roger
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180705071400</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-07-05 07:14:00-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

On Wed, Jul 04, 2018 at 11:20:31PM -0700, Keifer Bly wrote:
&gt; So tor will automatically use port 80 or 443 if Those are the only ones open?

Tor will choose Guard relays at random until one of them works(*).

It looks like around 844 Guard relays are listening on port 443 right now,
out of the 1858 available Guard relays.

% grep -B1 Guard cached-consensus |grep "^r "|grep " 443 "|wc -l
844
% grep -B1 Guard cached-consensus |grep "^r "|wc -l
1858

So if 443 works for you, it won't be many tries until you try a relay
that works for you.

And once you reach a Guard that works, it will become one of your guards
that you keep using, so you'll only do the "flail around trying to find
one" step when you need to replace your guard.

Are you concerned that we have the wrong design for general users, or
are you having a specific problem?

--Roger

(*) Actually, before Tor starts attempting to reach Guards, it first
needs to bootstrap the consensus document from either the directory
authorities or the fallback directory servers -- but they have a pretty
similar distribution of ports they listen on.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180705080308</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-07-05 08:03:08-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/alternative)]


No problems here, and if  tor handles blocked ports and port blocking
firewalls without issue then it's not something to worry about. But it
might not hurt to have a text box explaining this for those who are
concerned about what ports they are using.

On Thu, Jul 5, 2018 at 12:14 AM Roger Dingledine &lt;arma@mit.edu&gt; wrote:

&gt; On Wed, Jul 04, 2018 at 11:20:31PM -0700, Keifer Bly wrote:
&gt; &gt; So tor will automatically use port 80 or 443 if Those are the only ones
&gt; open?
&gt;
&gt; Tor will choose Guard relays at random until one of them works(*).
&gt;
&gt; It looks like around 844 Guard relays are listening on port 443 right now,
&gt; out of the 1858 available Guard relays.
&gt;
&gt; % grep -B1 Guard cached-consensus |grep "^r "|grep " 443 "|wc -l
&gt; 844
&gt; % grep -B1 Guard cached-consensus |grep "^r "|wc -l
&gt; 1858
&gt;
&gt; So if 443 works for you, it won't be many tries until you try a relay
&gt; that works for you.
&gt;
&gt; And once you reach a Guard that works, it will become one of your guards
&gt; that you keep using, so you'll only do the "flail around trying to find
&gt; one" step when you need to replace your guard.
&gt;
&gt; Are you concerned that we have the wrong design for general users, or
&gt; are you having a specific problem?
&gt;
&gt; --Roger
&gt;
&gt; (*) Actually, before Tor starts attempting to reach Guards, it first
&gt; needs to bootstrap the consensus document from either the directory
&gt; authorities or the fallback directory servers -- but they have a pretty
&gt; similar distribution of ports they listen on.
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;No problems here, and if   tor handles blocked ports and port blocking \
firewalls without issue then it's not something to worry about. But it might not \
hurt to have a text box explaining this for those who are concerned about what ports \
they are using.&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu, Jul 5, 2018 \
at 12:14 AM Roger Dingledine &lt;&lt;a href="mailto:arma@mit.edu"&gt;arma@mit.edu&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;On Wed, Jul 04, 2018 at 11:20:31PM \
-0700, Keifer Bly wrote:&lt;br&gt; &gt; So tor will automatically use port 80 or 443 if \
Those are the only ones open?&lt;br&gt; &lt;br&gt;
Tor will choose Guard relays at random until one of them works(*).&lt;br&gt;
&lt;br&gt;
It looks like around 844 Guard relays are listening on port 443 right now,&lt;br&gt;
out of the 1858 available Guard relays.&lt;br&gt;
&lt;br&gt;
% grep -B1 Guard cached-consensus |grep "^r "|grep " 443 "|wc \
-l&lt;br&gt; 844&lt;br&gt;
% grep -B1 Guard cached-consensus |grep "^r "|wc -l&lt;br&gt;
1858&lt;br&gt;
&lt;br&gt;
So if 443 works for you, it won't be many tries until you try a relay&lt;br&gt;
that works for you.&lt;br&gt;
&lt;br&gt;
And once you reach a Guard that works, it will become one of your guards&lt;br&gt;
that you keep using, so you'll only do the "flail around trying to find&lt;br&gt;
one" step when you need to replace your guard.&lt;br&gt;
&lt;br&gt;
Are you concerned that we have the wrong design for general users, or&lt;br&gt;
are you having a specific problem?&lt;br&gt;
&lt;br&gt;
--Roger&lt;br&gt;
&lt;br&gt;
(*) Actually, before Tor starts attempting to reach Guards, it first&lt;br&gt;
needs to bootstrap the consensus document from either the directory&lt;br&gt;
authorities or the fallback directory servers -- but they have a pretty&lt;br&gt;
similar distribution of ports they listen on.&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180705100600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-05 10:06:00-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Roger Dingledine:
&gt; It looks like around 844 Guard relays are listening on port 443 right now,
&gt; out of the 1858 available Guard relays.


guard probability for all guards having ORPort on 80 or 443: 
45.99%


guard probability per ORPort:

+---------+-------------------+
| or_port | guard_probability |
+---------+-------------------+
|     443 |              44.4 |
|    9001 |              39.1 |
|      80 |               1.5 |
|    9002 |               1.3 |
|    8080 |               1.1 |
|    8443 |               0.9 |
+---------+-------------------+

(onionoo data as per 2018-07-05 07:00 UTC)



&gt; (*) Actually, before Tor starts attempting to reach Guards, it first
&gt; needs to bootstrap the consensus document from either the directory
&gt; authorities or the fallback directory servers -- but they have a pretty
&gt; similar distribution of ports they listen on.

unfortunately onionoo does not have fallbackdir data, so I can't
provide the same table as above for fallbacks without
creating it myself first


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180703093433</emailId><senderName>Katharina Kohls</senderName><senderEmail>katharina.kohls@rub.de</senderEmail><timestampReceived>2018-07-03 09:34:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Check Maxmind GeoIP DB before distributing</subject><body>

Hi,

On 30.06.2018 13:53, Jaskaran Singh wrote:
&gt; 5. Dealing with false positives
&gt; Maxmind calculates geolocation of an IP addr using WHOIS records,
&gt; Reverse DNS etc. It claims to have precision rate of 99.5% on country
&gt; level. The other 0.5% is more likely to be those IP addresses for which
&gt; neither WHOIS record nor Reverse DNS are setup.
&gt;
&gt; A very large percentage of Tor Nodes are run from datacenters, which
&gt; usually have all their records set up. It's highly unlikely for an IP
&gt; address belonging to a datacenter to be mapped to a wrong location.
&gt;
&gt; Hence, false positives would be very few, and can be safely ignored
&gt; after a simple manual/scripted investigation.
We measured Tor relay locations a while ago using ICMP RTT measurements 
from multiple server instances located in Europe, North America, Asia, 
and Oceania. Using the minimum RTT for each connection*, we applied 
multilateration for estimating the location of a relay. Even though this 
approach is noisy because of varying network conditions and routes, we 
still get a good estimate of the relay's actual position.

We compared our estimated ICMP relay locations with the GeoIP information:
- our test set consisted of a full consensus
- we conducted the measurements within 5 days and repeated reference 
experiments a month later to test the stability of results
- we sent 500 pings per relay from 8 remote servers and repeated the 
measurements multiple times
- we use the minimum RTT as input for the multilateration

Results can be summarized as follows:
- the median location error is in a range of 440km
- 287 outliers are more than 2654km away from the position that GeoIP 
suggested. This represents ~4.6% of the tested relays
- the 75th percentile of nodes differs by more than 1000km

Currently we repeat the experiments with 16 instead of 8 servers and 
work on improving the evaluation to improve the location estimate.

We cannot take these results as a ground truth, as a majority of GeoIP 
locations already document the actual country and continent a relay is 
in. Nevertheless, this is a good way to add an independent verification 
step. The location error for the outliers is a proof that there are 
nodes that actually run on a different continent and this is an 
important security issue if users want to circumvent a certain country. 
The same applies for the 75th percentile, which also leads to updated 
country information for a significant set of relays.

We can conclude that yes, a large percentage of Tor nodes have OK 
records. But the number of false positives is not that low and, from my 
opinion, cannot be ignored. Besides an independent verification step, 
for which I suggest timing measurements and multilateration, location 
errors that lead to an updated country code should be considered as 
update (or respective nodes should be flagged).

*this follows the motivation that no transmission can ever be faster 
than a certain threshold, so the minimum RTT is the closest we can get 
to this threshold


Cheers,
Katharina
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180703054947</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-03 05:49:47-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>


&gt; On 2 Jul 2018, at 00:57, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hi,
&gt; 
&gt; On 30/06/18 15:42, nusenu wrote:
&gt;&gt; but maybe someone else would be willing to invoke a
&gt;&gt; "ln" commands everytime a new new alpha repo is born.
&gt;&gt; 
&gt;&gt; tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie

But then operators get updated to a new major version when they're not
expecting it. (We could document that if you select "alpha", you should
expect to get breaking updates every so often.)

&gt; As an alternative strategy, symbolic links for old alpha repositories
&gt; point to the current stable repository. If you're not updating your
&gt; sources.list you end up on the stable branch. I think this would mean
&gt; "less surprises" than jumping to a new alpha branch.

I opened a ticket with the old experimental -&gt; stable suggestion:
https://trac.torproject.org/projects/tor/ticket/26621

But what do we do with `tor-experimental-0.3.3.x-jessie -&gt; jessie` when
0.3.4 is stable?

Delete it?
But then operators don't get updates.

Keep it?
But then operators get updated to a new major version when they're not
expecting it.

Maybe there is no good solution to this problem.
What's the least worse solution?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180703065138</emailId><senderName>Peter Palfrader</senderName><senderEmail>weasel@torproject.org</senderEmail><timestampReceived>2018-07-03 06:51:38-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

On Sun, 01 Jul 2018, Iain Learmonth wrote:

&gt; Hi,
&gt; 
&gt; On 30/06/18 15:42, nusenu wrote:
&gt; &gt; but maybe someone else would be willing to invoke a
&gt; &gt; "ln" commands everytime a new new alpha repo is born.
&gt; &gt; 
&gt; &gt; tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie
&gt; 
&gt; As an alternative strategy, symbolic links for old alpha repositories
&gt; point to the current stable repository.

apt will complain if the Suite/Codename in the Release file doesn't
match what it expects.  symlinks don't change anything.

-- 
                            |  .''`.       ** Debian **
      Peter Palfrader       | : :' :      The  universal
 https://www.palfrader.org/ | `. `'      Operating System
                            |   `-    https://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180703065213</emailId><senderName>Peter Palfrader</senderName><senderEmail>weasel@torproject.org</senderEmail><timestampReceived>2018-07-03 06:52:13-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

On Tue, 03 Jul 2018, teor wrote:

&gt; Maybe there is no good solution to this problem.
&gt; What's the least worse solution?

Stop shipping alpha versions where people can find them easily?

-- 
                            |  .''`.       ** Debian **
      Peter Palfrader       | : :' :      The  universal
 https://www.palfrader.org/ | `. `'      Operating System
                            |   `-    https://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180703065458</emailId><senderName>Peter Palfrader</senderName><senderEmail>weasel@torproject.org</senderEmail><timestampReceived>2018-07-03 06:54:58-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

On Tue, 03 Jul 2018, Peter Palfrader wrote:

&gt; On Sun, 01 Jul 2018, Iain Learmonth wrote:
&gt; 
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; On 30/06/18 15:42, nusenu wrote:
&gt; &gt; &gt; but maybe someone else would be willing to invoke a
&gt; &gt; &gt; "ln" commands everytime a new new alpha repo is born.
&gt; &gt; &gt; 
&gt; &gt; &gt; tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie
&gt; &gt; 
&gt; &gt; As an alternative strategy, symbolic links for old alpha repositories
&gt; &gt; point to the current stable repository.
&gt; 
&gt; apt will complain if the Suite/Codename in the Release file doesn't
&gt; match what it expects.  symlinks don't change anything.

Also, jftr, users who have just the experimental sources.list entry
without the corresponding non-experimental one are already doing it
wrong, not following documented best practice.

-- 
                            |  .''`.       ** Debian **
      Peter Palfrader       | : :' :      The  universal
 https://www.palfrader.org/ | `. `'      Operating System
                            |   `-    https://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180703094712</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-03 09:47:12-0400</timestampReceived><subject>Re: [tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

[Attachment #2 (--Apple-Mail-2220A66F-6972-4963-BC62-975321B876F4)]


&gt;&gt; On 3 Jul 2018, at 16:54, Peter Palfrader &lt;weasel@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt; On Tue, 03 Jul 2018, Peter Palfrader wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; On Sun, 01 Jul 2018, Iain Learmonth wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; Hi,
&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; On 30/06/18 15:42, nusenu wrote:
&gt;&gt;&gt;&gt; but maybe someone else would be willing to invoke a
&gt;&gt;&gt;&gt; "ln" commands everytime a new new alpha repo is born.
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie
&gt;&gt;&gt; 
&gt;&gt;&gt; As an alternative strategy, symbolic links for old alpha repositories
&gt;&gt;&gt; point to the current stable repository.
&gt;&gt; 
&gt;&gt; apt will complain if the Suite/Codename in the Release file doesn't
&gt;&gt; match what it expects.  symlinks don't change anything.
&gt; 
&gt; Also, jftr, users who have just the experimental sources.list entry
&gt; without the corresponding non-experimental one are already doing it
&gt; wrong, not following documented best practice.

The generator at:
https://www.torproject.org/docs/debian.html.en
creates lines for the alpha and stable series when the
alpha is selected. (And it creates nightly and stable for nightly.)

So relays automatically transition to stable once the alpha series
disappears. I've closed #26621, because we don't need to do
anything more.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;On 3 Jul 2018, \
at 16:54, Peter Palfrader &lt;&lt;a \
href="mailto:weasel@torproject.org"&gt;weasel@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;On Tue, 03 Jul 2018, Peter \
Palfrader wrote:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On Sun, 01 \
Jul 2018, Iain Learmonth wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;On 30/06/18 15:42, nusenu \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;but maybe someone else would be willing to \
invoke a&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;"ln" commands \
everytime a new new alpha repo is \
born.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;tor-alpha-jessie \
-&gt; tor-experimental-0.3.4.x-jessie&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;As an alternative strategy, symbolic links \
for old alpha repositories&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;point to the current stable \
repository.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;apt will \
complain if the Suite/Codename in the Release file \
doesn't&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;match what it expects. \
 symlinks don't change \
anything.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Also, jftr, users who have \
just the experimental sources.list entry&lt;/span&gt;&lt;br&gt;&lt;span&gt;without the corresponding \
non-experimental one are already doing it&lt;/span&gt;&lt;br&gt;&lt;span&gt;wrong, not following \
documented best practice.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The generator \
at:&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.torproject.org/docs/debian.html.en#ubuntu"&gt;https://www.torproject.org/docs/debian.html.en&lt;/a&gt;&lt;/div&gt;&lt;div&gt;creates \
lines for the alpha and stable series when the&lt;/div&gt;&lt;div&gt;alpha is selected. (And it \
creates nightly and stable for nightly.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So relays \
automatically transition to stable once the alpha series&lt;/div&gt;&lt;div&gt;disappears. I've \
closed #26621, because we don't need to do&lt;/div&gt;&lt;div&gt;anything \
more.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180704025202</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-07-04 02:52:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Check Maxmind GeoIP DB before distributing</subject><body>

Thanks for your work.
You may also consider Africa and South America, Canada, Russia, etc.
And locations interior to all such that contacts within an RTT
are not as likely to be across a pond or other border,
vs as at some edge IX or landing. Cable maps may assist.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180705103949</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-05 10:39:49-0400</timestampReceived><subject>Re: [tor-dev] Tor port restriction option was removed</subject><body>

[Attachment #2 (--Apple-Mail-31D267E7-DB78-4CC7-A957-D52775335FB5)]


&gt; On 5 Jul 2018, at 20:06, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Roger Dingledine:
&gt; &gt; It looks like around 844 Guard relays are listening on port 443 right now,
&gt; &gt; out of the 1858 available Guard relays.
&gt; 
&gt; guard probability for all guards having ORPort on 80 or 443: 
&gt; 45.99%
&gt; 
&gt; guard probability per ORPort:
&gt; 
&gt; +---------+-------------------+
&gt; &gt; or_port | guard_probability |
&gt; +---------+-------------------+
&gt; &gt; 443 |              44.4 |
&gt; &gt; 9001 |              39.1 |
&gt; &gt; 80 |               1.5 |
&gt; &gt; 9002 |               1.3 |
&gt; &gt; 8080 |               1.1 |
&gt; &gt; 8443 |               0.9 |
&gt; +---------+-------------------+
&gt; 
&gt; (onionoo data as per 2018-07-05 07:00 UTC)
&gt; 
&gt; &gt; (*) Actually, before Tor starts attempting to reach Guards, it first
&gt; &gt; needs to bootstrap the consensus document from either the directory
&gt; &gt; authorities or the fallback directory servers -- but they have a pretty
&gt; &gt; similar distribution of ports they listen on.
&gt; 
&gt; unfortunately onionoo does not have fallbackdir data, so I can't
&gt; provide the same table as above for fallbacks without
&gt; creating it myself first

Here's the list of fallbacks, if you'd like to run a script on it:
https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc

The script that selects fallbacks also logs the ports that fallbacks are on.
For the current list, we ran the script twice, and merged the lists:
75/143 = 52% of fallbacks are on IPv4 ORPort 443
49/143 = 34% of fallbacks are on IPv4 ORPort 9001
19/143 = 13% of fallbacks are on other IPv4 ORPorts
18/48 = 38% of IPv6 fallbacks are on IPv6 ORPort 443
15/48 = 31% of IPv6 fallbacks are on IPv6 ORPort 9001
15/48 = 31% of IPv6 fallbacks are on other IPv6 ORPorts
https://trac.torproject.org/projects/tor/attachment/ticket/24801/fallback_dirs_2018_01_06_CA.log


73/139 = 53% of fallbacks are on IPv4 ORPort 443
49/139 = 35% of fallbacks are on IPv4 ORPort 9001
17/139 = 12% of fallbacks are on other IPv4 ORPorts
18/46 = 39% of IPv6 fallbacks are on IPv6 ORPort 443
13/46 = 28% of IPv6 fallbacks are on IPv6 ORPort 9001
15/46 = 33% of IPv6 fallbacks are on other IPv6 ORPorts
https://trac.torproject.org/projects/tor/attachment/ticket/24801/fallback_dirs_2018_01_06_2323_UTC_44aa1adf35_AU.log


T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;On 5 Jul 2018, \
at 20:06, nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Roger \
Dingledine:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;It looks like around 844 Guard \
relays are listening on port 443 right now,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;out of the 1858 available Guard \
relays.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;guard probability for all \
guards having ORPort on 80 or 443: &lt;/span&gt;&lt;br&gt;&lt;span&gt;45.99%&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;guard \
probability per ORPort:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;+---------+-------------------+&lt;/span&gt;&lt;br&gt;&lt;span&gt;| \
or_port | guard_probability \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;+---------+-------------------+&lt;/span&gt;&lt;br&gt;&lt;span&gt;| \
    443 | \
             44.4 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;|    9001 | \
             39.1 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;|      80 | \
              1.5 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;|    9002 | \
              1.3 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;|    8080 | \
              1.1 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;|    8443 | \
              0.9 \
|&lt;/span&gt;&lt;br&gt;&lt;span&gt;+---------+-------------------+&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;(onionoo \
data as per 2018-07-05 07:00 UTC)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;(*) Actually, before Tor starts attempting to reach Guards, it \
first&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;needs to bootstrap the \
consensus document from either the directory&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;authorities or the fallback directory servers -- but they have a \
pretty&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;similar distribution of \
ports they listen on.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;unfortunately \
onionoo does not have fallbackdir data, so I can't&lt;/span&gt;&lt;br&gt;&lt;span&gt;provide the same \
table as above for fallbacks without&lt;/span&gt;&lt;br&gt;&lt;span&gt;creating it myself \
first&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Here's the list of fallbacks, if \
you'd like to run a script on it:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc"&gt;https://git \
web.torproject.org/tor.git/tree/src/or/fallback_dirs.inc&lt;/a&gt;&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
script that selects fallbacks also logs the ports that fallbacks are \
on.&lt;/div&gt;&lt;div&gt;For the current list, we ran the script twice, and merged the \
lists:&lt;/div&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;pre style="word-wrap: \
break-word;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; \
background-color: rgba(255, 255, 255, 0);"&gt;75/143 = 52% of fallbacks are on IPv4 \
ORPort 443&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;49/143 = 34% of fallbacks are on IPv4 ORPort \
9001&lt;/span&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;19/143 = 13% of fallbacks are on other IPv4 \
ORPorts&lt;/span&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;18/48 = 38% of IPv6 fallbacks are on IPv6 ORPort \
443&lt;/span&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;span style="white-space: normal; \
background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;15/48 = 31% of IPv6 fallbacks are on IPv6 ORPort \
9001&lt;/span&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0); font-family: \
UICTFontTextStyleTallBody;"&gt;15/48 = 31% of IPv6 fallbacks are on other IPv6 \
ORPorts&lt;/span&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/24801/fallback_dirs_2 \
018_01_06_CA.log"&gt;https://trac.torproject.org/projects/tor/attachment/ticket/24801/fallback_dirs_2018_01_06_CA.log&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre \
style="word-wrap: break-word;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;73/139 = 53% \
of fallbacks are on IPv4 ORPort 443&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: \
break-word;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; \
background-color: rgba(255, 255, 255, 0);"&gt;49/139 = 35% of fallbacks are on IPv4 \
ORPort 9001&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;17/139 = 12% of fallbacks are on other IPv4 \
ORPorts&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;18/46 = 39% of IPv6 fallbacks are on IPv6 ORPort \
443&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;13/46 = 28% of IPv6 fallbacks are on IPv6 ORPort \
9001&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="word-wrap: break-word;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;15/46 = 33% of IPv6 fallbacks are on other IPv6 \
ORPorts&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/attachment/ticket/24801/fallback_dirs_2 \
018_01_06_2323_UTC_44aa1adf35_AU.log"&gt;https://trac.torproject.org/projects/tor/attachm \
ent/ticket/24801/fallback_dirs_2018_01_06_2323_UTC_44aa1adf35_AU.log&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180705235246</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-07-05 23:52:46-0400</timestampReceived><subject>Re: [tor-dev] Nearly everything in the Tor source code is moving in 0.3.5</subject><body>

On Thu, Jul 5, 2018 at 7:47 PM, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; Hello, friends!

Oh no!  I hit send too early.  More info follows below.

&gt; For quite a while now, the program "tor" has been built from source
&gt; code in just two directories: src/common and src/or.
&gt;
&gt; This has become more-or-less untenable, for a few reasons -- most
&gt; notably of which is that it has led our code to become more
&gt; spaghetti-ish than I can endorse with a clean conscience.
&gt;
&gt; So to fix that, we've gone and done a huge code movement in our git
&gt; master branch, which will land in a release once Tor 0.3.5.1-alpha is
&gt; out.
&gt;
&gt; Here's what we did:
&gt;
&gt;   * src/common has been turned into a set of static libraries.  These
&gt; all live in the "src/lib/*" directories.  The dependencies between
&gt; these libraries should have no cycles.  The libraries are:
&gt;
&gt;     arch -- Headers to handle architectural differences
&gt;     cc -- headers to handle differences among compilers
&gt;     compress -- wraps zlib, zstd, lzma
&gt;     container -- high-level container types
&gt;     crypt_ops -- Cryptographic operations. Planning to split this into
&gt; a higher and lower level library
&gt;     ctime -- Operations that need to run in constant-time. (Properly,
&gt; data-invariant time)
&gt;     defs -- miscelaneous definitions needed throughout Tor.
&gt;     encoding -- transforming one data type into another, and various
&gt; data types into strings.
&gt;     err -- lowest-level error handling, in cases where we can't use
&gt; the logs because something that the logging system needs has broken.
&gt;     evloop -- Generic event-loop handling logic
&gt;     fdio -- Low-level IO wrapper functions for file descriptors.
&gt;     fs -- Operations on the filesystem
&gt;     intmath -- low-level integer math and misc bit-twiddling hacks
&gt;     lock -- low-level locking code
&gt;     log -- Tor's logging module.  This library sits roughly halfway up
&gt; the library dependency diagram, since everything it depends on has to
&gt; be carefully crafted to *not* log.
&gt;     malloc -- Low-level wrappers for the platform memory allocation functions.
&gt;     math -- Higher-level mathematical functions, and floating-point math
&gt;     memarea -- An arena allocator
&gt;     meminfo -- Functions for querying the current process's memory
&gt; status and resources
&gt;     net -- Networking compatibility and convenience code
&gt;     osinfo -- Querying information about the operating system
&gt;     process -- Launching and querying the status of other processes
&gt;     sandbox -- Backend for the linux seccomp2 sandbox
&gt;     smartlist_core -- The lowest-level of the smartlist_t data type.
&gt; Separated from the rest of the containers library because the logging
&gt; subsystem depends on it.
&gt;     string -- Compatibility and convenience functions for manipulating
&gt; C strings.
&gt;     term -- Terminal-related functions (currently limited to a getpass
&gt; function).
&gt;     testsupport -- Macros for mocking, unit tests, etc.
&gt;     thread -- Higher-level thread compatibility code
&gt;     time -- Higher-level time management code, including format
&gt; conversions and monotonic time
&gt;     tls -- Our wrapper around our TLS library
&gt;     trace -- Formerly src/trace -- a generic event tracing API
&gt;     wallclock -- Low-level time code, used by the log module.
&gt;
&gt;   * To ensure that the dependency graph in src/common remains under
&gt; control, there is a tool that you can run called "make
&gt; check-includes".  It verifies that each module in Tor only includes
&gt; the headers that it is permitted to include, using a per-directory
&gt; ".may_include" file.
&gt;
&gt;   * The src/or/or.h header has been split into numerous smaller
&gt; headers.  Notably, many important structures are now declared in a
&gt; header called foo_st.h, where "foo" is the name of the structure.
&gt;
&gt;   * The src/or directory, which had most of Tor's code, had been split
&gt; up into several directories.  This is still a work in progress:  This
&gt; code has not itself been refactored, and its dependency graph is still
&gt; a tangled web.  I hope we'll be working on that over the coming
&gt; releases, but it will take a while to do.
&gt;
&gt;     The new top-level source directories are:
&gt;
&gt;      src/core -- Code necessary to actually perform or use onion routing.
&gt;      src/feature -- Code used only by some onion routing
&gt; configurations, or only for a special purpose.
&gt;      src/app -- Top-level code to run, invoke, and configure the
&gt; lower-level code
&gt;
&gt;    The new second-level source directories are:
&gt;      src/core/crypto -- High-level cryptographic protocols used in Tor
&gt;      src/core/mainloop -- Tor's event loop, connection-handling, and
&gt; traffic-routing code.
&gt;      src/core/or -- Parts related to handling onion routing itself
&gt;      src/core/proto -- Support for encoding

       src/core/proto -- support for encoding and decoding different
wire protocols

   src/feature/api -- Support for making Tor embeddable
   src/feature/client -- Functionality which only Tor clients need
   src/feature/control -- Controller implementation
   src/feature/dirauth -- Directory authority
   src/feature/dircache -- Directory cache
   src/feature/dirclient -- Directory client
   src/feature/dircommon -- Shared code between the other directory modules
   src/feature/hibernate -- Hibernating when Tor is out of bandwidth
or shutting down
   src/feature/hs -- v3 onion service implementation
   src/feature/hs_common -- shared code between both onion service
implementations
   src/feature/nodelist -- storing and accessing the list of relays on
the network.
   src/feature/relay -- code that only relay servers and exit servers need.
   src/feature/rend -- v2 onion service implementation
   src/feature/stats -- statistics and history

   src/app/config -- configuration and state for Tor
   src/app/main -- Top-level functions to invoke the rest or Tor.

&gt;
&gt;   * The "tor" executable is now built in src/app/tor rather than src/or/tor.
&gt;
&gt;   * There are more static libraries than before that you need to build
&gt; into your application if you want to embed Tor.  Rather than
&gt; maintaining this list yourself, I recommend that you run "make
&gt; show-libs" to have Tor emit a list of what you need to link.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180706150600</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-07-06 15:06:00-0400</timestampReceived><subject>Re: [tor-dev] anchors in the Tor Browser design document?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; 
&gt; 
&gt; nusenu:
&gt;&gt; It would be nice if every subsection (i.e. "SPDY and HTTP/2" would have an anchor 
&gt;&gt; so we can easily link to it)
&gt; 
&gt; in what trac component would I file this request?
&gt; 
&gt; "Webpages/Website"?

Sounds good to me, thanks.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180708005130</emailId><senderName></senderName><senderEmail>starlight.2018q2</senderEmail><timestampReceived>2018-07-08 00:51:30-0400</timestampReceived><subject>Re: [tor-dev] locked out of my bug report #26675</subject><body>

Thank you Nick!  I was able to revise the 
ticket.  Best to you too.


On Sat, Jul 7, 2018 at 13:49 UTC, &lt;nickm at alum.mit.edu&gt; wrote:
&gt;Hi, Starlight!
&gt;
&gt;Some part of trac are temporarily disabled, due to a bunch of
&gt;vandalism last night.  I hope somebody will re-enable soon, if they
&gt;have time to keep an eye on it today. In the meantime, I've tried to
&gt;get you back on to your ticket.
&gt;
&gt;best wishes,
&gt;-- 
&gt;Nick

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180709232922</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-07-09 23:29:22-0400</timestampReceived><subject>Re: [tor-dev] Anonymous local count statistics</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 10 Jul 2018, at 09:04, Saurav Malani &lt;sauravmalani1@gmail.com&gt; wrote:
&gt; 
&gt; I am 4th year student at IIIT-H, India. I want to contribute to TOR project \
&gt; specifically to "Anonymous local count statistics". I am done with building TOR. I \
&gt; looked at the ticket and had an overview of Tor documentation. But, I feel like \
&gt; being lost. So, it would be great if someone here can guide me on this further, as \
&gt; I am a bit novice in this field, by providing links with relevant info related to \
&gt; the project and also by guiding me on what to do next? and what is done till now?

Please read the new PrivCount in Tor project page:
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/PrivCountInTor
It should answer most of your questions.

Let us know if there is anything missing, and we'll update the page.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltD79IACgkQEP6qDnB1
Zyqq7A/8Dq0py6+KnUtwC8gijCobOFXH09iFL4IaKQ1IViCkBNrzmzwgRNqerck1
pg1/ujuyuDgoyeAI9Ub1yRQtVmp6grG6iT70tqXsnBK52I6zyJ9QTnJLiozMQnbE
b+YD5F9wdDCyEOP33KW+TSYk01XvHuBwH3WHYMdhYWEG+dFIaTMQZ4irursvwtjs
dzYc0rQDUPge3B3L9fX01PhkAG/L1yctdVSB0pr1Dgvy8PEPWHRdvWTn03Er2+Xy
eLEGiKqnO3fDEfh/dB1mUm+TKa65djfdy37IbJQ4a30gda10zhZk27S6E8XuoaBn
P5wWQijrESXyrwOeOykOdw9LW5HiWyhfEk7AsufjZclq9IQeueJCSVrR4nAGVHoO
oijF5MP5OME2hVTh3yZgw5h/J/q2wrsfWlee2gZkpYCql6oM4MqOOAP97L6vmWab
yNRtarQsJCKdCYqq/4HkMxI8uKKi8CA69dWLK+A9rSgoPsrI6wbM12H5Eb4qQ/B5
SaBoJpfd6p99X24F2ymvMdBxLTv8e1dFZKVw7RQ/DRU3Z0Bfb4CkWzbw1T42Igww
oP7Oy1Ne4FRe5j/nGUsKdQ8DfuuOHKAvRfbBg7ko/NxsEHU36yyrZL0F62Yc98O5
OKTBKieUdiPgHsGMspJ7Ryg7rSEC+Y89hoNBCFWh7xIbw9Sbgmk=
=XAF+
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711185715</emailId><senderName>Giovanni Pellerano</senderName><senderEmail>giovanni.pellerano@evilaliv3.org</senderEmail><timestampReceived>2018-07-11 18:57:15-0400</timestampReceived><subject>Re: [tor-dev] The case with Tor2Web</subject><body>

Hello George!

no problem exists at all and an thank you so much for letting us know.

definitely the safety of Tor has always to come first with no compromises :)

take care,

Giovanni

2018-07-11 12:06 GMT+02:00 Fabio Pietrosanti &lt;fabio@pietrosanti.it&gt;:
&gt; Hey George,
&gt; 
&gt; not a problem if the Tor2webMode goes away, as it was an optimisation introduced \
&gt; years ago. 
&gt; Nowadays performance of Tor has greatly improved, so I really feel it will not be \
&gt; an issue for Tor2web use-case, especially now that the one-hop server-side is \
&gt; optimizable for Onion sites that wish to have such an performance improvement! :-) 
&gt; Fabio
&gt; 
&gt; &gt; On 9 Jul 2018, at 18:32, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; Hello!
&gt; &gt; 
&gt; &gt; It's a semi-secret that tor2web traffic has been blocked from the Tor
&gt; &gt; network when we introduced the DoS subsystem this March [0]. The reason
&gt; &gt; is that a big part of the DoS traffic was coming from one-hop clients
&gt; &gt; continuously hammering onion services.
&gt; &gt; 
&gt; &gt; This is something that we've been considering doing for a while (for
&gt; &gt; security and code-complexity reasons), and it just happened naturally
&gt; &gt; during the DoS incident.
&gt; &gt; 
&gt; &gt; As part of this, and since the DoS subsystem is going to stick around,
&gt; &gt; we are planning to permanently kill the Tor2Web subsystem of Tor, in an
&gt; &gt; effort to simplify our codebase and our feature list.
&gt; &gt; 
&gt; &gt; If you've been relying on tor2web for something, please consider
&gt; &gt; switching to a normal 3-hop client indeed. This is a heads up so that
&gt; &gt; you can let us know if that won't work for you, or you need help
&gt; &gt; transitioning out.
&gt; &gt; 
&gt; &gt; Cheers and hope we are not making you sad.
&gt; &gt; 
&gt; &gt; [0]: https://trac.torproject.org/projects/tor/ticket/24902
&gt; &gt; https://blog.torproject.org/new-stable-tor-releases-security-fixes-and-dos-prevention-03210-03110-02915
&gt; &gt;  
&gt; 



-- 
Ing. Giovanni Pellerano - Founding Member and CTO
giovanni.pellerano@hermescenter.org | +39.328.9590046

HERMES - Center for Transparency and Digital Human Rights
Associazione No Profit | Via Aretusa 34, IT-20129 Milan, Italy
t. +39-02-87186005 (voicemail) | f. +39-02-87162573
TaxCode: IT-97621810155 | EuropeAid: IT-2012-AOD-0806909254
w. https://www.hermescenter.org | m. info@hermescenter.org
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180711210700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-11 21:07:00-0400</timestampReceived><subject>Re: [tor-dev] lets make 'working DNS' an exit flag requirement</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


there is a great ticket about solving this problem via self-checks:
https://trac.torproject.org/projects/tor/ticket/24014

exits will disable exiting once they realize they fail at doing DNS.

I believe it will cover most if not all of current problems, 
lets check again once this is implemented and deployed.

would be nice to have that in tor 0.3.5

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180712181246</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-07-12 18:12:46-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; 
&gt; Actually, we should have a simple format like "ed25519:&lt;base64_key&gt;" instead
&gt; so then in 5 years, if we end up with 10 different authorization method, we
&gt; can just pass "key:value" argument at will to the torrc option.
&gt; 

To be better, I prefer "ed25519:private:&lt;base64_key&gt;"

&gt;&gt;
&gt;&gt; Some more things to do:
&gt;&gt; - Rename "./client_authorized" to "./authorized_clients"?
&gt; 
&gt; +1

+1

&gt;&gt; - What's the "auth-type"? I assume standard.
&gt; 
&gt; We could use "descriptor" even though it won't stay much to a regular user, it
&gt; will at least have a semantic for power users. Because even "standard" for
&gt; regular user will probably mean nothing... ?

+1


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180713190558</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2018-07-13 19:05:58-0400</timestampReceived><subject>Re: [tor-dev] Tor browser for Chrome OS</subject><body>



On 07/13/2018 02:02 PM, Keifer Bly wrote:
&gt; So I am wondering, are there plans to develop a version of tor browser that
&gt; will run on Chromebooks? I though that might be a good idea as those are
&gt; getting somewhat popular in the US. Thanks.

Orfox browser for Android (and Orbot along with it) run on Chrome OS
devices that support Android apps. It works quite well in fact!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180715092834</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-15 09:28:34-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.7.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

A new release is available:

  https://dist.torproject.org/collector/1.7.0/

The main change in this release is to recognise the new bridge
authority, Serge. There are also additional minor fixes. Full details
can be found in the changelog [1].

This CollecTor release is already deployed on all Tor Metrics CollecTor
instances.

Please direct comments and questions to the metrics-team mailing list [2].

Thanks,
Iain -- on behalf of the Metrics Team.

[1]
https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.7.0
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180716155642</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-07-16 15:56:42-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 6.1-1.15.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

Onionoo's protocol was extended and has a minor version jump to 6.1.

Download available at:
     https://dist.torproject.org/onionoo/6.1-1.15.0/

Protocol changes (also summarized in [0]):

Added a new "os" parameter to filter relays and bridges by operating
system, extended the "as" and "country" parameters by a special country
code and AS number to return relays that were not found in the GeoIP
database, and deprecated the "host_name" field in details documents in
favor of the new "verified_host_names" and "unverified_host_names"
fields for more accurate DNS results on July 16, 2018.

Software changes are summarized in the changelog [1].

The changes are already deployed on all onionoo.torproject.org instances.=


Please direct comments and questions to the metrics-team mailing list [2]=
=2E

Thanks,
Iain -- on behalf of the Metrics Team.

[0] https://metrics.torproject.org/onionoo.html#versions_6_1
[1] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md
[2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180717035020</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-07-17 03:50:20-0400</timestampReceived><subject>Re: [tor-dev] Proposal 293: Other ways for relays to know when to publish</subject><body>

On Wed, May 30, 2018 at 05:19:26PM -0700, Nick Mathewson wrote:
&gt;    In proposal 275, we give reasons for dropping the published-on
&gt;    field from consensus documents, to improve the performance of
&gt;    consensus diffs.  We've already changed Tor (as of 0.2.9.11) to
&gt;    allow us to set those fields far in the future -- but
&gt;    unfortunately, there is still one use case that requires them:
&gt;    relays use the published-on field to tell if they are about to fall
&gt;    out of the consensus and need to make new descriptors.

Makes sense. I agree this is worth fixing.

&gt; 2. Mechanism One: The StaleDesc flag
&gt; 
&gt;    Authorities should begin voting aon a new StaleDesc flag.
&gt; 
&gt;    When authorities vote, if the most recent published_on date for
&gt;    a descriptor has over DESC_IS_STALE_INTERVAL in the past, the
&gt;    authorities should vote to give the StaleDesc flag to that relay.
&gt; 
&gt;    If any relay sees that it has the StaleDesc flag, it should upload
&gt;    some time in the first half of the voting interval.  (Implementors
&gt;    should take care not to re-upload over and over, though: Relays won't
&gt;    lose the flag until the next voting interval is reached.)
&gt; 
&gt;    (Define DESC_IS_STALE_INTERVAL as equal to
&gt;    FORCE_REGENERATE_DESCRIPTOR_INTERVAL.)

I think this is the mechanism we should pick.

But I think it needs a name that is more than just a tiny typo away from
Stable. :) Maybe "OldDesc"?

Also, I think you don't mean "the first half of the voting interval".
Maybe you mean the first half hour after that consensus document
appears (not sure what we call that time period), but actually the relay
won't necessarily even *get* the new consensus until partway through
that period, and maybe not even until later depending on what sort of
update schedule it's on. But I agree with the notion that the relay
should try to upload a new descriptor sufficiently before the next vote
starts, and also it should limit the number of times it tries in
reaction to any given consensus it sees.

&gt; 3. Mechanism Two: Uploading more frequently when rejected.
&gt; 
&gt;    Tor relays should remember the last time at which they uploaded a
&gt;    descriptor that was accepted by a majority of dirauths.  If this
&gt;    time is more than FAST_RETRY_DESCRIPTOR_INTERVAL in the past, we
&gt;    mark our descriptor as dirty from
&gt;    mark_my_descriptor_dirty_if_too_old().

The reason I prefer the OldDesc mechanism is because trying to keep state
on the relay is going to be hard, given that directory authorities share
descriptors with each other. That is, if you upload your descriptor to
nine dir auths, and eight of them reject it but one of them accepts it,
then it might or might not be the case that all nine of them happily
have the new descriptor by the next voting period -- and if one of them
does get your descriptor from another and decide to like it that way,
then it's not straightforward for the relay to know that that's happened.

(An example of possible pathology: a relay uploads a descriptor D1 to
an authority and it's rejected, and then the authority learns about D1
from another authority's vote and fetches it and likes it, and then the
relay makes a descriptor D2 because it thinks D1 wasn't liked, but then
D2 isn't sufficiently new compared to D1 so the authority rejects D2.)

&gt; 4. Implications for proposal 275
&gt; 
&gt;    Once most relays are running verions that support the features
&gt;    above, and once authorities are generating consensuses with the
&gt;    StaleDesc flag, there will no longer be a need to keep the
&gt;    published time in consensus documents accurate -- we can start
&gt;    setting it to some time in the distant future, per proposal 275.

Sounds like a good plan.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180720000130</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-20 00:01:30-0400</timestampReceived><subject>Re: [tor-dev] Brief state of sbws thoughts</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 20 Jul 2018, at 01:16, juga &lt;juga@riseup.net&gt; wrote:
&gt; 
&gt; Matt Traudt:
&gt;&gt; Teor, Juga
&gt;&gt; 
&gt;&gt; There's a lot of things fighting for my attention right now, so you
&gt;&gt; might have noticed I've slowed way down on attending to sbws
&gt;&gt; tickets/PRs/etc. I think time will free up in the next few days.
&gt;&gt; 
&gt;&gt; I think sbws is in a very good place code-wise right now. I don't think
&gt;&gt; much more **has** to be done to the code. Even though I enjoy adding
&gt;&gt; things like the state file (GHPR#236 [2]), I don't think that was a good
&gt;&gt; use of my time.
&gt;&gt; 
&gt;&gt; It looks like there's a lot of check boxes Juga has made regarding
&gt;&gt; making a Debian package[0]. Those should get checked. These are important.
&gt;&gt; 
&gt;&gt; However, I think the absolute most important thing for us to be spending
&gt;&gt; our time on right now is deciding what "good" results are and verifying
&gt;&gt; sbws produces "good" results.

You're right -  we need to know if we can switch to sbws, and we can't use
sbws unless it has reasonable results.

If the results aren't reasonable, we might need to:
* do further processing on the sbws results (like scaling)
* change the sbws measurement design

The good news is that sbws ranks are approximately the same as torflow ranks.
So the measurement design is probably ok.

But torflow weights are larger (max 100,000) than sbws weights (max 4000),
so we will need to scale the sbws results.

torflow results are also steeper than sbws results: the ratio between high
and low ranked relays is 1000:1 in torflow, but 10:1 in sbws.

If we want to, we can make sbws match torflow by defining a scaling algorithm
that scales large relays more than small relays. But we could also decide that
the flatter sbws curve is better for the network, because high-weight relays
are overloaded.

Let's do a few more experiments before we decide.

&gt;&gt; To accomplish this, I think one of the two suggestions I made in a
&gt;&gt; comment on GH#182 [1] (quoted here) is what we should be doing.
&gt;&gt; 
&gt;&gt; 1. Run torflow and sbws side-by-side (but not at the same time) to
&gt;&gt; remove more variables. This has the added benefit of us having access to
&gt;&gt; the raw scanner results from torflow before it does whatever magic
&gt;&gt; scaling it does. OR
&gt; 
&gt; In that ticket you also mentioned that someone that already runs torflow
&gt; should also run sbws.
&gt; I said i can run both, and still the case if needed.

Ok, so juga can run sbws and torflow at different times on the same machine.

&gt; On 20 Jul 2018, at 01:34, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; I'm happy and prepared to run sbws and torflow side by side. I'm a
&gt; little less swamped than I was a month ago.  I don't need a debian
&gt; package; I'd rather run it from a git clone.
&gt; 
&gt; I think the only things I can't do are
&gt; a) give you access to the box directly (but I can make whatever
&gt; files/logs/raw results that you want available to you over HTTP)
&gt; b) stop running torflow. (Unless we're ready to switch a live bwauth
&gt; over to sbws.)

And tom can run sbws and torflow at the same time on the same machine.

I think we should run both comparisons, wait a week so they are in a stable
state, and then check the results for a few weeks.

T

&gt;&gt; [0]: https://trac.torproject.org/projects/tor/ticket/26848
&gt;&gt; [1]:
&gt;&gt; https://github.com/pastly/simple-bw-scanner/issues/182#issuecomment-404250053
&gt;&gt; [2]: https://github.com/pastly/simple-bw-scanner/pull/236



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAltRJloACgkQEP6qDnB1
ZyqZMA//S5YuQeUmTUfdSouSc4xdEwZnkP1EKS7df9oYFiAZRKm0kgHynGNtJYVj
tI7LyUDjCUEkwZaeOZb609OKZmsyjFZL8xzmIqM1UvH3N1PCiGw/vEsUxDO4XC1n
IhlTj0g4c32j7eUh5Du76/8KDkeqN6IrPPZ9POPMsnRMBf71ZxquWusUFfsKBXKr
N74ObqRE0qqqtJuL4XMKnG7LZU7XnbE/wLx6g9zenT8lLIDOsnMCuKL+g571iW/U
LJhNjyAkzQZ+VAxCnjtC4zig1WV0Iy3UoJZqZO3BVMuVRA0vUkiUjT+r0AOLpmA/
4dETxKTY86zCbPZU1DLjVKPtLajErK/8QV2g0m5Y7QbLy0ZVhR2RJ7k2/3wqPvM5
gKs7EX44nBUmhal0LrHxvjUyGKC+zILlUo1Wry1bfZmN4QQwSso+ohhjIgrhDeND
QQS3+oWnmokJoClfjvBATEqzZ4crddcw5AwDydPADBshq1YU1BqFRI6Fk9NJqLMd
f6OFmq0auFaUd01vWPikAzuudWA9JJMBUp8SUKwMhOApdj1WR9fbVSRxH/YVB6U0
kXaBP95uckFrPQCx0dYNYVQdzXlHKqnFH473UZLjGvH8hyjvzmOM3JDaFfqU2h4i
AJ8Q44in+A59MCLECRyK5+ja6Lx1EQTM71LC/9WdUJNMn5fwB7Q=
=OpNN
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180720201221</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-07-20 20:12:21-0400</timestampReceived><subject>[tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Gentlemen and Ladies,

We are now ready to integrate Marionette, or at least have it evaluated, as
a bridge for the Tor browser in its Pythonless form.

At the Tor meeting in March, we successfully operated Marionette as a
bridge by implementing the PT v2.0 specification (Thanks ahf!).

Now we have a new version of Marionette which operates as a stand-alone
binary (NO PYTHON!).  I checked that it still forms a bridge, like at the
Tor meeting.  We also have a wider variety of transports enabled.

We are in the process of writing the documentation for Marionette, but the
documentation on the web page should be sufficient for at least getting a
full evaluation started.  We'd like to have the evaluation complete by the
end of next month, hopefully the middle of next month, and stand ready to
make any and all changes necessary.

A full set of documentation will also be written for designing your own
protocols.  This is in process.

Please let us know what you need.

John Helmsen

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Gentlemen and Ladies,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We are now ready to integrate \
Marionette, or at least have it evaluated, as a bridge for the Tor browser in its \
Pythonless form.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;At the Tor meeting in March, we \
successfully operated Marionette as a bridge by implementing the PT v2.0 \
specification (Thanks ahf!).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Now we have a new version of \
Marionette which operates as a stand-alone binary (NO PYTHON!).   I checked that it \
still forms a bridge, like at the Tor meeting.   We also have a wider variety of \
transports enabled.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We are in the process of writing the \
documentation for Marionette, but the documentation on the web page should be \
sufficient for at least getting a full evaluation started.   We'd like to have \
the evaluation complete by the end of next month, hopefully the middle of next month, \
and stand ready to make any and all changes necessary.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A \
full set of documentation will also be written for designing your own protocols.   \
This is in process.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please let us know what you \
need.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;John Helmsen&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180724020529</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-07-24 02:05:29-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

On Fri, Jul 20, 2018 at 04:12:21PM -0400, John Helmsen wrote:
&gt; We are in the process of writing the documentation for Marionette, but the
&gt; documentation on the web page should be sufficient for at least getting a full
&gt; evaluation started.  We'd like to have the evaluation complete by the end of
&gt; next month, hopefully the middle of next month, and stand ready to make any and
&gt; all changes necessary.
&gt; 
&gt; A full set of documentation will also be written for designing your own
&gt; protocols.  This is in process.
&gt; 
&gt; Please let us know what you need.

The Tor Browser developers may have more specific requests, but I can
suggest some steps to get started.

Open a ticket at https://trac.torproject.org/ for discussion and to
track progress.
	Type: project
	Component: Applications/Tor Browser
	Keywords: marionette
The old ticket for FTE is a good reference: https://bugs.torproject.org/10362

And then it would help if you port your build process to the Tor Browser
build system. General information:
https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
First, just build
	git clone https://git.torproject.org/builders/tor-browser-build.git
	cd tor-browser-build
	git checkout tbb-8.0a9-build3
	make testbuild # or, e.g., testbuild-linux-x86_64
Then you'll have to add a new project (consisting of a "build" and
"config" file) for Marionette and each of its dependencies. You can copy
from existing projects as templates. Here is the meek project, for
example:
https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/meek
You'll also need to add bridge lines to:
https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js
 To build just one project, not an entire release, do e.g.:
	rbm/rbm build gmp --target testbuild --target torbrowser-linux-x86_64
	rbm/rbm build marionette --target testbuild --target torbrowser-linux-x86_64
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180724154208</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-07-24 15:42:08-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

[Attachment #2 (multipart/alternative)]


David,

Thank you, I have created the ticket as #26920.
https://trac.torproject.org/projects/tor/ticket/26920#ticket.  Having
downloaded the git project, it seems that this work cannot be performed on
a Mac, since it doesn't run 'runc'.  Is that right?

Ben,

I am currently trying to create a virtual machine using Ubuntu 16.04 for
development.  Unless I am mistaken, this work cannot be done on a Mac.
Please do the same, so that we can put this thing to bed.


On Mon, Jul 23, 2018 at 10:05 PM, David Fifield &lt;david@bamsoftware.com&gt;
wrote:

&gt; On Fri, Jul 20, 2018 at 04:12:21PM -0400, John Helmsen wrote:
&gt; &gt; We are in the process of writing the documentation for Marionette, but
&gt; the
&gt; &gt; documentation on the web page should be sufficient for at least getting
&gt; a full
&gt; &gt; evaluation started.  We'd like to have the evaluation complete by the
&gt; end of
&gt; &gt; next month, hopefully the middle of next month, and stand ready to make
&gt; any and
&gt; &gt; all changes necessary.
&gt; &gt;
&gt; &gt; A full set of documentation will also be written for designing your own
&gt; &gt; protocols.  This is in process.
&gt; &gt;
&gt; &gt; Please let us know what you need.
&gt;
&gt; The Tor Browser developers may have more specific requests, but I can
&gt; suggest some steps to get started.
&gt;
&gt; Open a ticket at https://trac.torproject.org/ for discussion and to
&gt; track progress.
&gt;         Type: project
&gt;         Component: Applications/Tor Browser
&gt;         Keywords: marionette
&gt; The old ticket for FTE is a good reference: https://bugs.torproject.org/
&gt; 10362
&gt;
&gt; And then it would help if you port your build process to the Tor Browser
&gt; build system. General information:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
&gt; First, just build
&gt;         git clone https://git.torproject.org/
&gt; builders/tor-browser-build.git
&gt;         cd tor-browser-build
&gt;         git checkout tbb-8.0a9-build3
&gt;         make testbuild # or, e.g., testbuild-linux-x86_64
&gt; Then you'll have to add a new project (consisting of a "build" and
&gt; "config" file) for Marionette and each of its dependencies. You can copy
&gt; from existing projects as templates. Here is the meek project, for
&gt; example:
&gt; https://gitweb.torproject.org/builders/tor-browser-build.
&gt; git/tree/projects/meek
&gt; You'll also need to add bridge lines to:
&gt; https://gitweb.torproject.org/builders/tor-browser-build.
&gt; git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js
&gt; To build just one project, not an entire release, do e.g.:
&gt;         rbm/rbm build gmp --target testbuild --target
&gt; torbrowser-linux-x86_64
&gt;         rbm/rbm build marionette --target testbuild --target
&gt; torbrowser-linux-x86_64
&gt;



-- 
John Helmsen
john.helmsen@redjack.com
C: (240) 899-5676

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;David,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you, I have created the ticket as \
#26920.  &lt;a href="https://trac.torproject.org/projects/tor/ticket/26920#ticket"&gt;https://trac.torproject.org/projects/tor/ticket/26920#ticket&lt;/a&gt;. \
Having downloaded the git project, it seems that this work cannot be performed on a \
Mac, since it doesn't run 'runc'.   Is that \
right?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ben,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am currently trying \
to create a virtual machine using Ubuntu 16.04 for development.   Unless I am \
mistaken, this work cannot be done on a Mac.   Please do the same, so that we can put \
this thing to bed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Mon, Jul 23, 2018 at 10:05 PM, David Fifield &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;On Fri, Jul 20, 2018 at 04:12:21PM -0400, John \
Helmsen wrote:&lt;br&gt; &gt; We are in the process of writing the documentation for \
Marionette, but the&lt;br&gt; &gt; documentation on the web page should be sufficient for \
at least getting a full&lt;br&gt; &gt; evaluation started.   We'd like to have the \
evaluation complete by the end of&lt;br&gt; &gt; next month, hopefully the middle of next \
month, and stand ready to make any and&lt;br&gt; &gt; all changes necessary.&lt;br&gt;
&gt; &lt;br&gt;
&gt; A full set of documentation will also be written for designing your own&lt;br&gt;
&gt; protocols.   This is in process.&lt;br&gt;
&gt; &lt;br&gt;
&gt; Please let us know what you need.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;The Tor Browser developers may have more specific requests, but I can&lt;br&gt;
suggest some steps to get started.&lt;br&gt;
&lt;br&gt;
Open a ticket at &lt;a href="https://trac.torproject.org/" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/&lt;/a&gt; for discussion and to&lt;br&gt; track \
progress.&lt;br&gt;  Type: project&lt;br&gt;
            Component: Applications/Tor Browser&lt;br&gt;
            Keywords: marionette&lt;br&gt;
The old ticket for FTE is a good reference: &lt;a \
href="https://bugs.torproject.org/10362" rel="noreferrer" \
target="_blank"&gt;https://bugs.torproject.org/&lt;wbr&gt;10362&lt;/a&gt;&lt;br&gt; &lt;br&gt;
And then it would help if you port your build process to the Tor Browser&lt;br&gt;
build system. General information:&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/&lt;wbr&gt;projects/tor/wiki/doc/&lt;wbr&gt;TorBrowser/Hacking&lt;/a&gt;&lt;br&gt;
 First, just build&lt;br&gt;
            git clone &lt;a \
href="https://git.torproject.org/builders/tor-browser-build.git" rel="noreferrer" \
target="_blank"&gt;https://git.torproject.org/&lt;wbr&gt;builders/tor-browser-build.git&lt;/a&gt;&lt;br&gt;
  cd tor-browser-build&lt;br&gt;
            git checkout tbb-8.0a9-build3&lt;br&gt;
            make testbuild # or, e.g., testbuild-linux-x86_64&lt;br&gt;
Then you'll have to add a new project (consisting of a "build" and&lt;br&gt;
"config" file) for Marionette and each of its dependencies. You can \
copy&lt;br&gt; from existing projects as templates. Here is the meek project, for&lt;br&gt;
example:&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/meek" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;builders/tor-browser-build.&lt;wbr&gt;git/tree/projects/meek&lt;/a&gt;&lt;br&gt;
 You'll also need to add bridge lines to:&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/&lt;wbr&gt;builders/tor-brows \
er-build.&lt;wbr&gt;git/tree/projects/tor-browser/&lt;wbr&gt;Bundle-Data/PTConfigs/bridge_&lt;wbr&gt;prefs.js&lt;/a&gt;&lt;br&gt;
 To build just one project, not an entire release, do e.g.:&lt;br&gt;
            rbm/rbm build gmp --target testbuild --target torbrowser-linux-x86_64&lt;br&gt;
            rbm/rbm build marionette --target testbuild --target \
torbrowser-linux-x86_64&lt;br&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- \
&lt;br&gt;&lt;div class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;John \
Helmsen&lt;div&gt;&lt;a href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (240) \
899-5676&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180721163345</emailId><senderName>"Damon (TheDcoder)"</senderName><senderEmail>thedcoder@protonmail.com</senderEmail><timestampReceived>2018-07-21 16:33:45-0400</timestampReceived><subject>[tor-dev] Entreaty for spreading awareness about ProxAllium, a useful frontend for Tor</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hello everyone!
First I would like to apologize if I am posting this in the wrong place, as I am not \
sure where I should post this. So this mailing list seemed to be the best option \
available.

As some of you may (most likely not) know me as the developer of a small tool called \
[ProxAllium](https://proxallium.org/) which is a nice frontend for Tor, it is a nice \
alternative to keeping Tor Browser up and running if you want to use Tor's SOCKS \
proxy. I started work on it almost 2 years ago, and I had the idea to develop this \
for more than 2 years... I consider it fairly stable now that I have been using it \
that length of time.

Recently one of my newer users expressed disappointment that they didn't find any \
reference to ProxAllium while they were doing some research on how to operate a Tor \
bridge on Windows, they have suggested I do more "advertising". I have realized that \
my tool might be useful to a lot of people and many of them would not even be aware \
of its existence which would be a shame, as it would increase the regular usage of \
Tor if it was easy to start Tor casually, to \
[torify](https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO) applications.

I was hesitant to write this email as I had previously thought that ProxAllium was \
not good enough for Tor standards. But then I realized I was applying a somewhat \
artificial logic and thus preventing its growth in usage. I am aware that it has a \
few fundamental issues (like being written in a closed source language) but I think \
it is good enough to be used as a helper tool.

I am planning a rewrite in a better language (and with a FOSS toolchain) so that it \
can be cross-platform and more performance efficient. Currently I am struggling with \
motivation to work on ProxAllium as I am not getting enough input from users.

The purpose of this email is to earnestly request that the Tor project consider \
helping to spread awareness of ProxAllium by adding references to it in places like \
the wiki and the "projects" list on the website. I am not seeking official \
endorsement, but a mere mention so that everyone involved can benefit from Tor. I am \
ready to provide any kind of assistance to the fullest extent I can.

Thank you for reading, hopefully I didn't come across as too arrogant or pushy with \
my proposal, English is not my native language and I struggle with writing in the \
vein in which I am thinking :)

With Regards, Damon H. (TheDcoder)


[Attachment #5 (text/html)]

&lt;div&gt;Hello everyone!&lt;br&gt;&lt;/div&gt;&lt;div&gt;First I would like to apologize if I am posting \
this in the wrong place, as I am not sure where I should post this. So this mailing \
list seemed to be the best option available.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As some of \
you may (most likely not) know me as the developer of a small tool called &lt;a \
rel="nofollow" title="https://proxallium.org/" target="_blank" \
href="https://proxallium.org/"&gt;ProxAllium&lt;/a&gt; which is a nice frontend for Tor, it is \
a nice alternative to keeping Tor Browser up and running if you want to use Tor's \
SOCKS proxy. I started work on it almost 2 years ago, and I  had the idea to develop \
this for more than 2 years... I consider it fairly stable now that I have been using \
it that length of time.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Recently one of my newer users \
expressed disappointment that they didn't find any reference to ProxAllium while they \
were doing some research on how to operate a Tor bridge on Windows, they have \
suggested I do more "advertising". I have realized that my tool might be useful to a \
lot of people and many of them would not even be aware of its existence which would \
be a shame, as it would increase the regular usage of Tor if it was easy to start Tor \
casually, to &lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO" \
target="_blank" title="https://trac.torproject.org/projects/tor/wiki/doc/TorifyHOWTO" \
rel="nofollow"&gt;torify&lt;/a&gt; applications.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I was hesitant \
to write this email as I had previously thought that ProxAllium was not good enough \
for Tor standards. But then I realized I was applying a somewhat artificial logic and \
thus preventing its growth in usage. I am aware that it has a few fundamental issues \
(like being written in a closed source language) but I think it is good enough to be \
used as a helper tool.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am planning a rewrite in a \
better language (and with a FOSS toolchain) so that it can be cross-platform and more \
performance efficient. Currently I am struggling with motivation to work on \
ProxAllium as I am not getting enough input from  \
users.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The purpose of this email is to earnestly request \
that the Tor project consider helping to spread awareness of ProxAllium by adding \
references to it in places like the wiki and the "projects" list on the website. I am \
not seeking official endorsement, but a mere mention so that everyone involved can \
benefit from Tor. I am ready to provide any kind of assistance to the fullest extent \
I can.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you for reading, hopefully I didn't come \
across as too arrogant or pushy with my proposal, English is not my native language \
and I struggle with writing in the vein in which I am thinking \
:)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block"&gt;&lt;div \
class="protonmail_signature_block-user"&gt;&lt;div&gt;With Regards, Damon H. \
(TheDcoder)&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180729053148</emailId><senderName>Yogesh Singh</senderName><senderEmail>yogesh.singh.ams5@gmail.com</senderEmail><timestampReceived>2018-07-29 05:31:48-0400</timestampReceived><subject>[tor-dev] Mentorship needed for beginner.</subject><body>

[Attachment #2 (multipart/alternative)]


Hey,
I'm an undergrad with CS majors and have developed interest for networking.
I would like to contribute to the Tor projects. It would be of great help
if someone could mentor me where to begin with.

Regards,
Yogesh

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hey,&lt;div&gt;I'm an undergrad with CS majors and have developed \
interest for networking. I would like to contribute to the Tor projects. It would be \
of great help if someone could mentor me where to begin \
with.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div&gt;Yogesh&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180721210812</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-07-21 21:08:12-0400</timestampReceived><subject>Re: [tor-dev] Entreaty for spreading awareness about ProxAllium, a useful frontend for Tor</subject><body>

&gt; https://proxallium.org/
&gt; adding references to it in places like the wiki and the "projects" list on the website.

People are free to create their own wiki account and add descriptions
and links to their tools / projects on the relavant wiki pages.

https://trac.torproject.org/

You probably want to go a few cycles of feedback and development
with users on the wiki and the tor-talk / tor-relays lists before ready
to having it appear on website "projects" list.

Have fun :)


Projects that distribute binaries should of course be open source,
and reproducible per build instructions included with their source.
The concept is here...

https://wikipedia.org/wiki/Deterministic_compilation
https://reproducible-builds.org/
https://twitter.com/ReproBuilds
https://diffoscope.org/

https://wiki.debian.org/ReproducibleBuilds
https://tails.boum.org/blueprint/reproducible_builds/
https://signal.org/blog/reproducible-android/
https://wiki.freebsd.org/ReproducibleBuilds
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180722150220</emailId><senderName>"Damon (TheDcoder)"</senderName><senderEmail>thedcoder@protonmail.com</senderEmail><timestampReceived>2018-07-22 15:02:20-0400</timestampReceived><subject>Re: [tor-dev] Entreaty for spreading awareness about ProxAllium, a useful frontend for Tor</subject><body>

Thanks for the reply grarpamp!

&gt; People are free to create their own wiki account and add descriptions
&gt; and links to their tools / projects on the relavant wiki pages.

I already have an account in Trac, however I was worried that editing the wiki to \
mention the appropriate tools would potentially count as advertising, so I didn't \
consider it before...

&gt; You probably want to go a few cycles of feedback and development
&gt; with users on the wiki and the tor-talk / tor-relays lists before ready
&gt; to having it appear on website "projects" list.

I agree, but I am not sure where I should start with getting feedback as it is quite \
hard to find users of ProxAllium.

&gt; Projects that distribute binaries should of course be open source,
&gt; and reproducible per build instructions included with their source.

This is also one of the cons of the programming language I am using (AutoIt) to \
develop ProxAllium. AutoIt uses tokenization during compilation which adds random \
data to the binary thus making it impossible to have reproducible builds.

​With Regards, Damon H. (TheDcoder)

Sent with ProtonMail Secure Email.​


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180723075619</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-07-23 07:56:19-0400</timestampReceived><subject>Re: [tor-dev] Entreaty for spreading awareness about ProxAllium, a useful frontend for Tor</subject><body>

&gt; I am not sure where I should start with getting feedback as it is quite hard to \
&gt; find users of ProxAllium.

People can't be forced to use or comment.

Yet if it's a tool that interacts with tor or the ecosystem
of tor tools, post up an announce and feedback request
to tor-talk and see.

When you do, try to wrap your lines at around 72 chars.

&gt; AutoIt uses tokenization during compilation which adds random data to the binary \
&gt; thus making it impossible to have reproducible builds.

Some projects that are interested in reproducibility
choose to document exceptions. So long as the diffs
don't actually do anything, and aren't a huge mess,
potential users checking reproducibility can cross
them out of the diffs they see on their end.

See if folks there have input on that.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180724164650</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-07-24 16:46:50-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

On Tue, Jul 24, 2018 at 11:42:08AM -0400, John Helmsen wrote:
&gt; Thank you, I have created the ticket as #26920. https://trac.torproject.org/
&gt; projects/tor/ticket/26920#ticket.  Having downloaded the git project, it seems
&gt; that this work cannot be performed on a Mac, since it doesn't run 'runc'.  Is
&gt; that right?

Right, the README says "To build Tor Browser, you need a Linux
distribution that has support for runc (such as Debian jessie, Ubuntu
16.04, Fedora 20, etc ...)."

The tag I suggested, tbb-8.0a9-build3, is the tag of the most recent
alpha release (I think). I haven't tried building it myself--if it
doesn't work, you may just need to try a different tag. One of the Tor
Browser devs could suggest an alternative if it doesn't work on the
first try.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180724175736</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-07-24 17:57:36-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Okay, I have generated a VM using VirtualBox of Ubuntu version 16.  I've
had to restart the build process a couple of times, since the hard drive
was 10GB, then 20GB.  Now I am using a 50GB box, so it may work this time.

Should we create the branch using the -b command? ('git checkout -b
tbb-8.0a9-build3'?) Otherwise, it complains about being headless.

On Tue, Jul 24, 2018 at 12:46 PM, David Fifield &lt;david@bamsoftware.com&gt;
wrote:

&gt; On Tue, Jul 24, 2018 at 11:42:08AM -0400, John Helmsen wrote:
&gt; &gt; Thank you, I have created the ticket as #26920. https://trac.
&gt; torproject.org/
&gt; &gt; projects/tor/ticket/26920#ticket.  Having downloaded the git project,
&gt; it seems
&gt; &gt; that this work cannot be performed on a Mac, since it doesn't run
&gt; 'runc'.  Is
&gt; &gt; that right?
&gt;
&gt; Right, the README says "To build Tor Browser, you need a Linux
&gt; distribution that has support for runc (such as Debian jessie, Ubuntu
&gt; 16.04, Fedora 20, etc ...)."
&gt;
&gt; The tag I suggested, tbb-8.0a9-build3, is the tag of the most recent
&gt; alpha release (I think). I haven't tried building it myself--if it
&gt; doesn't work, you may just need to try a different tag. One of the Tor
&gt; Browser devs could suggest an alternative if it doesn't work on the
&gt; first try.
&gt;



-- 
John Helmsen
john.helmsen@redjack.com
C: (240) 899-5676

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Okay, I have generated a VM using VirtualBox of Ubuntu version 16.   \
I've had to restart the build process a couple of times, since the hard drive was \
10GB, then 20GB.   Now I am using a 50GB box, so it may work this \
time.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Should we create the branch using the -b command? ('git \
checkout -b tbb-8.0a9-build3'?) Otherwise, it complains about being \
headless.&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Tue, \
Jul 24, 2018 at 12:46 PM, David Fifield &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;On Tue, Jul 24, 2018 at 11:42:08AM -0400, John \
Helmsen wrote:&lt;br&gt; &gt; Thank you, I have created the ticket as #26920.  &lt;a \
href="https://trac.torproject.org/" rel="noreferrer" \
target="_blank"&gt;https://trac.&lt;wbr&gt;torproject.org/&lt;/a&gt;&lt;br&gt; &gt; \
projects/tor/ticket/26920#&lt;wbr&gt;ticket.   Having downloaded the git project, it \
seems&lt;br&gt; &gt; that this work cannot be performed on a Mac, since it doesn't run \
'runc'.   Is&lt;br&gt; &gt; that right?&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Right, the README says "To build Tor Browser, you need a Linux&lt;br&gt;
distribution that has support for runc (such as Debian jessie, Ubuntu&lt;br&gt;
16.04, Fedora 20, etc ...)."&lt;br&gt;
&lt;br&gt;
The tag I suggested, tbb-8.0a9-build3, is the tag of the most recent&lt;br&gt;
alpha release (I think). I haven't tried building it myself--if it&lt;br&gt;
doesn't work, you may just need to try a different tag. One of the Tor&lt;br&gt;
Browser devs could suggest an alternative if it doesn't work on the&lt;br&gt;
first try.&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;John \
Helmsen&lt;div&gt;&lt;a href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (240) \
899-5676&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180724180945</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-07-24 18:09:45-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

On Tue, Jul 24, 2018 at 01:57:36PM -0400, John Helmsen wrote:
&gt; Okay, I have generated a VM using VirtualBox of Ubuntu version 16.  I've had to
&gt; restart the build process a couple of times, since the hard drive was 10GB,
&gt; then 20GB.  Now I am using a 50GB box, so it may work this time.
&gt; 
&gt; Should we create the branch using the -b command? ('git checkout -b
&gt; tbb-8.0a9-build3'?) Otherwise, it complains about being headless.

It doesn't matter, just for the sake of doing a testbuild and priming
the cache of dependencies (you'll notice the git_clones directory get
filled in among others). But yes, you'll want a branch for integration,
something like
	git checkout -b marionette-integration tbb-8.0a9-build3
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726081000</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-07-26 08:10:00-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


David Fifield:
&gt; On Fri, Jul 20, 2018 at 04:12:21PM -0400, John Helmsen wrote:
&gt; &gt; We are in the process of writing the documentation for Marionette, but the
&gt; &gt; documentation on the web page should be sufficient for at least getting a full
&gt; &gt; evaluation started.   We'd like to have the evaluation complete by the end of
&gt; &gt; next month, hopefully the middle of next month, and stand ready to make any and
&gt; &gt; all changes necessary.
&gt; &gt; 
&gt; &gt; A full set of documentation will also be written for designing your own
&gt; &gt; protocols.   This is in process.
&gt; &gt; 
&gt; &gt; Please let us know what you need.
&gt; 
&gt; The Tor Browser developers may have more specific requests, but I can
&gt; suggest some steps to get started.
&gt; 
&gt; Open a ticket at https://trac.torproject.org/ for discussion and to
&gt; track progress.
&gt; 	Type: project
&gt; 	Component: Applications/Tor Browser
&gt; 	Keywords: marionette
&gt; The old ticket for FTE is a good reference: https://bugs.torproject.org/10362
&gt; 
&gt; And then it would help if you port your build process to the Tor Browser
&gt; build system. General information:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
&gt; First, just build
&gt; 	git clone https://git.torproject.org/builders/tor-browser-build.git
&gt; 	cd tor-browser-build
&gt; 	git checkout tbb-8.0a9-build3
&gt; 	make testbuild # or, e.g., testbuild-linux-x86_64
&gt; Then you'll have to add a new project (consisting of a "build" and
&gt; "config" file) for Marionette and each of its dependencies. You can copy
&gt; from existing projects as templates. Here is the meek project, for
&gt; example:
&gt; https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/meek
&gt; You'll also need to add bridge lines to:
&gt; https://gitweb.torproject.org/builders/tor-browser-build.git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js
&gt;  To build just one project, not an entire release, do e.g.:
&gt; 	rbm/rbm build gmp --target testbuild --target torbrowser-linux-x86_64
&gt; 	rbm/rbm build marionette --target testbuild --target torbrowser-linux-x86_64

Thanks David. Yes, those are good first steps to get started. Experience
shows that getting things running for Linux is the easiest part, thus
I'd suggest to start with that one first.

There is no need to have everything ready for all supported platforms to
get your PT integrated. It's fine to ship it for the alpha for some
platforms only to further shake out bugs and make it more robust. Thus,
don't hesitate to put things into review state early on.

Finally, don't hesitate as well to ask in #tor-dev or by mail or on the
trac ticket (I'll have it on my radar) in case you are stuck or are
running into issues, we are happy to help.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180726154728</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-07-26 15:47:28-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

[Attachment #2 (multipart/alternative)]


David,

Ben hit the following error while running 'make testbuild':

--2018-07-26 08:33:09--
https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip
Resolving downloads.sourceforge.net (downloads.sourceforge.net)...
216.105.38.13
Connecting to downloads.sourceforge.net
(downloads.sourceforge.net)|216.105.38.13|:443...
connected.
HTTP request sent, awaiting response... 404 Not Found
2018-07-26 08:33:09 ERROR 404: Not Found.

When looking for the file, I found this on the website:

As of April 2018 STIX Fonts has moved to GitHub (
https://github.com/stipub/stixfonts/). All releases of STIX are available
only through GitHub and any new issues should be reported on the new site.


On Tue, Jul 24, 2018 at 2:09 PM, David Fifield &lt;david@bamsoftware.com&gt;
wrote:

&gt; On Tue, Jul 24, 2018 at 01:57:36PM -0400, John Helmsen wrote:
&gt; &gt; Okay, I have generated a VM using VirtualBox of Ubuntu version 16.  I've
&gt; had to
&gt; &gt; restart the build process a couple of times, since the hard drive was
&gt; 10GB,
&gt; &gt; then 20GB.  Now I am using a 50GB box, so it may work this time.
&gt; &gt;
&gt; &gt; Should we create the branch using the -b command? ('git checkout -b
&gt; &gt; tbb-8.0a9-build3'?) Otherwise, it complains about being headless.
&gt;
&gt; It doesn't matter, just for the sake of doing a testbuild and priming
&gt; the cache of dependencies (you'll notice the git_clones directory get
&gt; filled in among others). But yes, you'll want a branch for integration,
&gt; something like
&gt;         git checkout -b marionette-integration tbb-8.0a9-build3
&gt;



-- 
John Helmsen
john.helmsen@redjack.com
C: (240) 899-5676

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;David,  &lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Ben hit the following error while running \
'make testbuild':&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;--2018-07-26 08:33:09--   &lt;a \
href="https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip"&gt;https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip&lt;/a&gt;&lt;/div&gt;&lt;div&gt;Resolving \
&lt;a href="http://downloads.sourceforge.net"&gt;downloads.sourceforge.net&lt;/a&gt; (&lt;a \
href="http://downloads.sourceforge.net"&gt;downloads.sourceforge.net&lt;/a&gt;)... \
216.105.38.13&lt;/div&gt;&lt;div&gt;Connecting to &lt;a \
href="http://downloads.sourceforge.net"&gt;downloads.sourceforge.net&lt;/a&gt; (&lt;a \
href="http://downloads.sourceforge.net"&gt;downloads.sourceforge.net&lt;/a&gt;)|216.105.38.13|:443... \
connected.&lt;/div&gt;&lt;div&gt;HTTP request sent, awaiting response... 404 Not \
Found&lt;/div&gt;&lt;div&gt;2018-07-26 08:33:09 ERROR 404: Not \
Found.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;When looking for the file, I found this on the \
website:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As of April 2018 STIX Fonts has moved to GitHub (&lt;a \
href="https://github.com/stipub/stixfonts/"&gt;https://github.com/stipub/stixfonts/&lt;/a&gt;). \
All releases of STIX are available only through GitHub and any new issues should be \
reported on the new site.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;On Tue, Jul 24, 2018 at 2:09 PM, David Fifield &lt;span \
dir="ltr"&gt;&lt;&lt;a href="mailto:david@bamsoftware.com" \
target="_blank"&gt;david@bamsoftware.com&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;On Tue, Jul 24, 2018 at 01:57:36PM -0400, John \
Helmsen wrote:&lt;br&gt; &gt; Okay, I have generated a VM using VirtualBox of Ubuntu \
version 16.   I've had to&lt;br&gt; &gt; restart the build process a couple of times, \
since the hard drive was 10GB,&lt;br&gt; &gt; then 20GB.   Now I am using a 50GB box, so it \
may work this time.&lt;br&gt; &gt; &lt;br&gt;
&gt; Should we create the branch using the -b command? ('git checkout -b&lt;br&gt;
&gt; tbb-8.0a9-build3'?) Otherwise, it complains about being headless.&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;It doesn't matter, just for the sake of doing a testbuild and priming&lt;br&gt;
the cache of dependencies (you'll notice the git_clones directory get&lt;br&gt;
filled in among others). But yes, you'll want a branch for integration,&lt;br&gt;
something like&lt;br&gt;
            git checkout -b marionette-integration tbb-8.0a9-build3&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;John \
Helmsen&lt;div&gt;&lt;a href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (240) \
899-5676&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180726162653</emailId><senderName>Sukhbir Singh</senderName><senderEmail>azadi@riseup.net</senderEmail><timestampReceived>2018-07-26 16:26:53-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

* John Helmsen:

&gt; David,
&gt; 
&gt; Ben hit the following error while running 'make testbuild':
&gt; 
&gt; --2018-07-26 08:33:09--
&gt; https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip
&gt; Resolving downloads.sourceforge.net (downloads.sourceforge.net)...
&gt; 216.105.38.13
&gt; Connecting to downloads.sourceforge.net
&gt; (downloads.sourceforge.net)|216.105.38.13|:443...
&gt; connected.
&gt; HTTP request sent, awaiting response... 404 Not Found
&gt; 2018-07-26 08:33:09 ERROR 404: Not Found.

(https://trac.torproject.org/projects/tor/ticket/26949 tracks this issue.)

If you want to fix it for now, you can apply this and it should work:

    diff --git a/projects/fonts/build b/projects/fonts/build
    index 9b33da9..a1e066b 100644
    --- a/projects/fonts/build
    +++ b/projects/fonts/build
    @@ -13,8 +13,8 @@ mkdir -p $distdir
        END; %]
     
     [% IF c("var/linux") || c("var/osx") %]
    -  unzip -o STIXv1.1.1-latex.zip -d STIX
    -  cp "STIX/Fonts/fonts/opentype/public/stix/STIXMath-Regular.otf" $distdir/
    +  unzip -o 2.0.0.zip -d STIX
    +  cp "STIX/stixfonts-2.0.0/archive/STIXv1.1.1/Fonts/STIX-Word/STIXMath-Regular.otf" \
$distdir/  [% END %]
     [% IF c("var/linux") %]
       cp NotoEmoji-Regular.ttf $distdir/
    diff --git a/projects/fonts/config b/projects/fonts/config
    index 1547403..9d11d2c 100644
    --- a/projects/fonts/config
    +++ b/projects/fonts/config
    @@ -102,6 +102,6 @@ input_files:
       - URL: https://github.com/googlei18n/noto-cjk/raw/f36eda03dfa5582a6d49abbfb5c83d0209584158/NotoSansTC-Regular.otf
                
         sha256sum: e6b82f7d3dab605c428161124ceb5e169cde93de632d800297b167cdd88e7baa
         enable: '[% c("var/linux") %]'
    -  - URL: https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip
    -    sha256sum: e3b0f712e2644438eee2d0dcd2b10b2d54f1b972039de95b2f8e800bae1adbd8
    +  - URL: https://github.com/stipub/stixfonts/archive/2.0.0.zip
    +    sha256sum: 4327a16797dabebedce28a9075671730e22c7f74831b24b1fb91e27faec5a235
         enable: '[% c("var/linux") || c("var/osx") %]'
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180723112028</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-23 11:20:28-0400</timestampReceived><subject>Re: [tor-dev] restoring 'cypherpunks' trac account with more anti-automation?</subject><body>


&gt; On 23 Jul 2018, at 17:12, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; is there any timeline when the cypherpunks trac account will be restored?
&gt; 
&gt; does the tor project plan to restore it or work on this problem?

It might help to ask:
Is there anyone who wants to work on this issue?

Hiro is the services admin, she might work on it if she has time.

I suggest you wait a week from your first email, and see if there are any
interested people in the meantime.

&gt; I believe it is important that the tor project keeps anonymous submissions
&gt; open otherwise others can point to the tor project itself as a reference 
&gt; "if not even them allow anonymous submission why should I do?"

I'm fairly sure Tor Trac still allows anonymous submission.
Have you tried creating a throwaway account via a Tor exit?

If that works, we can update the anonymous instructions on the Trac
landing page.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180723114500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-07-23 11:45:00-0400</timestampReceived><subject>Re: [tor-dev] Could tor drop privileges even earlier? (before trying to access anything on the files</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


I pasted that email to trac as
https://trac.torproject.org/projects/tor/ticket/26910

--=20
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180724204815</emailId><senderName>Taylor Yu</senderName><senderEmail>catalyst@torproject.org</senderEmail><timestampReceived>2018-07-24 20:48:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal 295: Using the ATL construction for relay cryptography (solving the crypto-ta</subject><body>

On 07/20/2018 02:27 AM, teor wrote:

&gt; A few of us discussed this proposal in the #tor-dev IRC earlier this week.

Hi teor, and thanks for writing this summary!  I generally agree with
what you've written.

&gt; We're confused by 3.1 and 3.2, which seem to be duplicate sections using
&gt; different notation.

On further reflection, I think sections 3.1 and 3.2 describe two
different revisions of the proposal.  3.1 seems to not include the
previous tweak (T' in 3.2.2) in computing a new tweak, while 3.2.2 does.
  It seems like if we adapt 3.1 to incorporate some chaining of the
tweak, the scheme will be IND-CPA.  (This is because the ciphertext that
the endpoint receives will no longer be solely a function of the
plaintext and the key.)

I'm going to tentatively propose some more consistent notation here:

C ciphertext

M plaintext message

S encrypted nonce

N CTR mode nonce

T nonce tweak

T' saved nonce tweak

U pre-nonce tweak

U' saved pre-nonce tweak

keys

kf, kb CTR mode key

hf, hb GHASH key

cf, cb nonce-encryption key

gf, gb pre-nonce GHASH key

bf, bb pre-nonce encryption key

(I'm happy to hear feedback on alternative designators.)

-----

single hop outbound (same direction as CREATE):

input C||S

1. T = H_hf(T'||C) -- generate tweak T by hashing saved previous tweak
T' and ciphertext C

2. N = T ^ D_cf(S ^ T) -- decrypt encrypted nonce S using AES and tweak T

3. M = C ^ CTR_kf(N) -- decrypt ciphertext C using CTR and nonce N

4. T' = T -- save tweak for next cell

5. output M||N

single hop inbound (same direction as CREATED):

input M||N

1. C = M ^ CTR_kb(N) -- encrypt message M using CTR and nonce N

2. T = H_hb(T'||C) -- generate tweak T by hashing saved previous tweak
T' and ciphertext C

3. S = T ^ E_cb(N ^ T) -- encrypt nonce N using AES and tweak T

4. T' = T -- save tweak for next cell

5. output C||S

receiving/decrypting a cell at the endpoint (e.g., exit):

input C||S

1. decrypt as above to obtain M and N

2. U = H_gf(U'||M) -- generate tweak U by hashing saved previous tweak
U' and plaintext M

3. V = U ^ D_bf(N ^ U) -- decrypt nonce N with AES and pre-nonce tweak U
for verification

4. U' = U -- save pre-nonce tweak for next cell

5. if V == 0, cell is authentic

sending/encrypting a cell from the endpoint:

input M

1. U = H_gb(U'||M) -- generate tweak U by hashing saved previous tweak
U' and plaintext M

2. N = U ^ E_bb(0 ^ U) -- generate nonce N by encrypting all-zeroes
block using AES and pre-nonce tweak U

3. U' = U

4. encrypt as above using M and N

-----

Open question: what do we initialize the saved tweaks T', U' to?  Is it
safe to use an all-zeroes block?

&gt; Generalising to Different Numbers of Hops
&gt; 
&gt; The proposal assumes that all circuits are 3-hop circuits, but Tor typically
&gt; builds 1, 3, 4, and 5-hop circuits. Also, Tor currently generates the same
&gt; number of keys for each hop. There's no way it can just generate kf_M, kf_E,
&gt; kb_M, and kb_E for the final hop, because sometimes the final hop changes.
&gt; (Due to circuit cannibalisation, or failed intro extension.)
&gt; 
&gt; Please generalise the proposal so that:
&gt; * all references to "3-hop circuit" are changed to "N-hop circuit".
&gt; * all references to kf_1,2,3, kb_1,2,3, k_fM, k_fE, k_bM and k_bE;
&gt;   are changed to kf_N, kb_N, kfM_N, kfE_N, kbM_N and kbE_N.

Judging by the cited paper, the subkeys k1, k2, k3 are all used in the
same hop.  Given that we already use digits for hop numbers, we should
choose some alphabetic subkey designators.

(In the paper: k1 = CTR key; k2 = GHASH key for computing tweak; k3 =
AES key for encrypting nonce.)

&gt; Do we really need 6 keys per hop?
&gt; It's ok if we do, let's make sure there are no redundant keys.

It looks like ten keys per hop.  Every ordinary relay hop needs the
endpoint authentication keys kf_M, kf_E, kb_M, kb_E to handle
EXTEND/EXTENDED cells at least.

I'm not sure yet which of these are actually required to be independent
to achieve the desired security properties.

Best regards,
-Taylor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726123748</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-07-26 12:37:48-0400</timestampReceived><subject>Re: [tor-dev] Alternative directory format for v3 client auth</subject><body>

Alex Xu &lt;alex_y_xu@yahoo.ca&gt; writes:

&gt; Quoting George Kadianakis (2018-07-11 19:26:06), as excerpted
&gt;&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; On 11/07/18 14:22, George Kadianakis wrote:
&gt;&gt; &gt;&gt; Michael Rogers &lt;michael@briarproject.org&gt; writes:
&gt;&gt; &gt;&gt; 
&gt;&gt; &gt; First, Ed25519-based authentication ("intro auth"). Could this be punted
&gt;&gt; &gt; to the application layer, or is there a reason it has to happen at the
&gt;&gt; &gt; Tor layer?
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Yes, it could be stuffed into the application layer. However that could be
&gt;&gt; an argument for everything (including end-to-end encryption of onions).
&gt;&gt; 
&gt;&gt; It might be the case that some application-layer protocols don't allow
&gt;&gt; any sort of pluggable authentication to happen on top of them, or that
&gt;&gt; users wouldn't want to enable them for some reason. Does this feel like
&gt;&gt; an artificial reason to you?
&gt;&gt; 
&gt;&gt; Another positive thing about intro auth is that it allows fine-grained
&gt;&gt; control over authentication, potentially allowing different tiers of
&gt;&gt; users etc.
&gt;
&gt; That might be true, but it's not an argument for intro auth, because
&gt; application-layer authentication offers that too.
&gt;
&gt;&gt; Also see https://lists.torproject.org/pipermail/tor-dev/2018-May/013155.html
&gt;&gt; 
&gt;&gt; &gt; Fourth, what goals does desc auth achieve in the v3 design? If I
&gt;&gt; &gt; understand right, in v2 its major goal was to hide the intro points from
&gt;&gt; &gt; everyone except authorised clients (including HSDirs). In v3 the intro
&gt;&gt; &gt; points are already hidden from anyone who doesn't know the onion address
&gt;&gt; &gt; (including HSDirs), so this goal can be achieved by not revealing the
&gt;&gt; &gt; onion address to anyone except authorised clients.
&gt;&gt; &gt;
&gt;&gt; &gt; I'm probably missing something, but as far as I can see the only other
&gt;&gt; &gt; goal achieved by desc auth is the ability to revoke a client's access
&gt;&gt; &gt; without needing to distribute a new onion address to other clients. This
&gt;&gt; &gt; seems useful. But again, I'd ask whether it could be punted to the
&gt;&gt; &gt; application layer. The only advantage I can see from putting it at the
&gt;&gt; &gt; Tor layer is that the list of intro points is hidden from revoked
&gt;&gt; &gt; clients. Is there a real world use case where that's a big enough
&gt;&gt; &gt; advantage to justify putting all this authorisation machinery at the Tor
&gt;&gt; &gt; layer? Or maybe there are other things this design achieves that I
&gt;&gt; &gt; haven't thought of.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Yes, you identified the point of desc auth correctly.
&gt;&gt; 
&gt;&gt; Another very important reason to have an authorization system inside
&gt;&gt; Tor, is because it allows only authorized clients to rendezvous (and in
&gt;&gt; general directly interact) with the onion service. That can mitigate all
&gt;&gt; sorts of guard discovery and correlation attacks that could be doable by
&gt;&gt; anyone, and restrict them only to authorized users.
&gt;&gt; 
&gt;&gt; Of course the above is achieved with either desc auth or intro
&gt;&gt; auth. Having both of them does not offer any benefits in this direction.
&gt;
&gt; asn said that a benefit of Tor-level authentication is that users may be
&gt; likely to accidentally reveal their onion service address, e.g. by
&gt; posting screenshots, or copying and pasting the URL, but are less likely
&gt; to accidentally reveal their separate authentication credentials.
&gt;
&gt; I thought of a minor benefit of desc auth: revoked clients are prevented
&gt; entirely from attacking the onion service, e.g. by DDoS.

True. This is actually one of the most useful benefits of client auth
right now: blocking introduction requests from non-authenticated clients
and hence blocking guard discovery or DDoS attacks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180726145611</emailId><senderName>Ryan Duff</senderName><senderEmail>ry@nduff.com</senderEmail><timestampReceived>2018-07-26 14:56:11-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/alternative)]


2 of the 3 options mentioned by Matthew were that...

On Thu, Jul 26, 2018 at 10:43 AM Nathaniel Suchy &lt;me@lunorian.is&gt; wrote:

&gt; Perhaps the developers could make something like Tor Tails but stripped
&gt; down bare bones to converse system resources with just Tor Browser
&gt; afterwards packaging it all into a nice Virtual Machine program that=E2=
=80=99s
&gt; invisible to the user.
&gt; On Thu, Jul 26, 2018 at 2:24 AM u &lt;u@451f.org&gt; wrote:
&gt;
&gt;&gt; Hi!
&gt;&gt;
&gt;&gt; Yawning Angel:
&gt;&gt;
&gt;&gt; &gt;&gt; So please, make Sandboxed Tor Browser an official thing.&gt;&gt; Fuck you,
&gt;&gt; pay me.
&gt;&gt; While I believe that it is hard for some people to understand the free
&gt;&gt; software ecosystem and personal development efforts, I think that this
&gt;&gt; kind of reply is absolutely off-putting and intimidating. And it has the
&gt;&gt; unfortunate side effect of not helping anybody understand what's gping o=
n.
&gt;&gt;
&gt;&gt; Cheers,
&gt;&gt; u.
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div&gt;&lt;div&gt;&lt;div dir="auto"&gt;2 of the 3 options mentioned by Matthew were \
that...&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div \
dir="ltr"&gt;On Thu, Jul 26, 2018 at 10:43 AM Nathaniel Suchy &lt;&lt;a \
href="mailto:me@lunorian.is" target="_blank"&gt;me@lunorian.is&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Perhaps the developers could make \
something like Tor Tails but stripped down bare bones to converse system resources \
with just Tor Browser afterwards packaging it all into a nice Virtual Machine program \
that's invisible to the user.&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu, Jul \
26, 2018 at 2:24 AM u &lt;&lt;a href="mailto:u@451f.org" \
target="_blank"&gt;u@451f.org&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" \
style="margin:0 0 0 .8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi!&lt;br&gt; &lt;br&gt;
Yawning Angel:&lt;br&gt;
&lt;br&gt;
&gt;&gt; So please, make Sandboxed Tor Browser an official thing.&gt;&gt; Fuck you, \
pay me.&lt;br&gt; While I believe that it is hard for some people to understand the \
free&lt;br&gt; software ecosystem and personal development efforts, I think that this&lt;br&gt;
kind of reply is absolutely off-putting and intimidating. And it has the&lt;br&gt;
unfortunate side effect of not helping anybody understand what's gping on.&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
u.&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt; _______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;
&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180726163254</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-07-26 16:32:54-0400</timestampReceived><subject>Re: [tor-dev] Ready to Integrate/Review New Marionette Version into Tor</subject><body>

On Thu, Jul 26, 2018 at 12:26:53PM -0400, Sukhbir Singh wrote:
&gt; &gt; Ben hit the following error while running 'make testbuild':
&gt; &gt; 
&gt; &gt; --2018-07-26 08:33:09--
&gt; &gt; https://downloads.sourceforge.net/stixfonts/STIXv1.1.1-latex.zip
&gt; &gt; Resolving downloads.sourceforge.net (downloads.sourceforge.net)...
&gt; &gt; 216.105.38.13
&gt; &gt; Connecting to downloads.sourceforge.net
&gt; &gt; (downloads.sourceforge.net)|216.105.38.13|:443...
&gt; &gt; connected.
&gt; &gt; HTTP request sent, awaiting response... 404 Not Found
&gt; &gt; 2018-07-26 08:33:09 ERROR 404: Not Found.
&gt; 
&gt; (https://trac.torproject.org/projects/tor/ticket/26949 tracks this issue.)
&gt; 
&gt; If you want to fix it for now, you can apply this and it should work:

Thanks, Sukhbir.

I think you can also work around it by downloading STIXv1.1.1-latex.zip
manually and copying it to out/fonts/STIXv1.1.1-latex.zip.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180727192118</emailId><senderName>flipchan</senderName><senderEmail>flipchan@riseup.net</senderEmail><timestampReceived>2018-07-27 19:21:18-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 90, Issue 32</subject><body>

[Attachment #2 (multipart/alternative)]


Regarding implementing Marionette.

It's a great project and a great way to use fte! Worked on a fork of it called \
layerprox a while ago , however, here is my question: Marionette has a dsl that you \
write "formats" in that generates traffic patterns, is the idea to randomly switch \
between these formats or use the same all the time ? Also is the formats \
automatically gonna be updated ? 

Take care 
/flipchan 

Ps


I'm sorry for awnsering all emails in this thread (my email client is not the \
greatest)

On July 24, 2018 8:48:22 PM UTC, tor-dev-request@lists.torproject.org wrote:
&gt; Send tor-dev mailing list submissions to
&gt; 	tor-dev@lists.torproject.org
&gt; 
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt; 	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt; 	tor-dev-request@lists.torproject.org
&gt; 
&gt; You can reach the person managing the list at
&gt; 	tor-dev-owner@lists.torproject.org
&gt; 
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt; 
&gt; 
&gt; Today's Topics:
&gt; 
&gt; 1. Re: Ready to Integrate/Review New Marionette Version into Tor
&gt; (John Helmsen)
&gt; 2. Re: Ready to Integrate/Review New Marionette Version into Tor
&gt; (David Fifield)
&gt; 3. Re: Ready to Integrate/Review New Marionette Version into Tor
&gt; (John Helmsen)
&gt; 4. Re: Ready to Integrate/Review New Marionette Version into Tor
&gt; (David Fifield)
&gt; 5. Re: Proposal 295: Using the ATL construction for relay
&gt; cryptography (solving the crypto-tagging attack) (Taylor Yu)
&gt; 
&gt; 
&gt; ----------------------------------------------------------------------
&gt; 
&gt; Message: 1
&gt; Date: Tue, 24 Jul 2018 11:42:08 -0400
&gt; From: John Helmsen &lt;john.helmsen@redjack.com&gt;
&gt; To: John Helmsen &lt;john.helmsen@redjack.com&gt;,
&gt; 	tor-dev@lists.torproject.org, ahf@0x90.dk, Ben Johnson
&gt; 	&lt;benbjohnson@yahoo.com&gt;
&gt; Subject: Re: [tor-dev] Ready to Integrate/Review New Marionette
&gt; 	Version into Tor
&gt; Message-ID:
&gt; 	&lt;CAFtdMkhH+jDVLcQXp1X1Ot=5t_bVrs5oeCaLJp93On3-AUvj1w@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; David,
&gt; 
&gt; Thank you, I have created the ticket as #26920.
&gt; https://trac.torproject.org/projects/tor/ticket/26920#ticket.  Having
&gt; downloaded the git project, it seems that this work cannot be performed
&gt; on
&gt; a Mac, since it doesn't run 'runc'.  Is that right?
&gt; 
&gt; Ben,
&gt; 
&gt; I am currently trying to create a virtual machine using Ubuntu 16.04
&gt; for
&gt; development.  Unless I am mistaken, this work cannot be done on a Mac.
&gt; Please do the same, so that we can put this thing to bed.
&gt; 
&gt; 
&gt; On Mon, Jul 23, 2018 at 10:05 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt; wrote:
&gt; 
&gt; &gt; On Fri, Jul 20, 2018 at 04:12:21PM -0400, John Helmsen wrote:
&gt; &gt; &gt; We are in the process of writing the documentation for Marionette,
&gt; but
&gt; &gt; the
&gt; &gt; &gt; documentation on the web page should be sufficient for at least
&gt; getting
&gt; &gt; a full
&gt; &gt; &gt; evaluation started.  We'd like to have the evaluation complete by
&gt; the
&gt; &gt; end of
&gt; &gt; &gt; next month, hopefully the middle of next month, and stand ready to
&gt; make
&gt; &gt; any and
&gt; &gt; &gt; all changes necessary.
&gt; &gt; &gt; 
&gt; &gt; &gt; A full set of documentation will also be written for designing your
&gt; own
&gt; &gt; &gt; protocols.  This is in process.
&gt; &gt; &gt; 
&gt; &gt; &gt; Please let us know what you need.
&gt; &gt; 
&gt; &gt; The Tor Browser developers may have more specific requests, but I can
&gt; &gt; suggest some steps to get started.
&gt; &gt; 
&gt; &gt; Open a ticket at https://trac.torproject.org/ for discussion and to
&gt; &gt; track progress.
&gt; &gt; Type: project
&gt; &gt; Component: Applications/Tor Browser
&gt; &gt; Keywords: marionette
&gt; &gt; The old ticket for FTE is a good reference:
&gt; https://bugs.torproject.org/
&gt; &gt; 10362
&gt; &gt; 
&gt; &gt; And then it would help if you port your build process to the Tor
&gt; Browser
&gt; &gt; build system. General information:
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
&gt; &gt; First, just build
&gt; &gt; git clone https://git.torproject.org/
&gt; &gt; builders/tor-browser-build.git
&gt; &gt; cd tor-browser-build
&gt; &gt; git checkout tbb-8.0a9-build3
&gt; &gt; make testbuild # or, e.g., testbuild-linux-x86_64
&gt; &gt; Then you'll have to add a new project (consisting of a "build" and
&gt; &gt; "config" file) for Marionette and each of its dependencies. You can
&gt; copy
&gt; &gt; from existing projects as templates. Here is the meek project, for
&gt; &gt; example:
&gt; &gt; https://gitweb.torproject.org/builders/tor-browser-build.
&gt; &gt; git/tree/projects/meek
&gt; &gt; You'll also need to add bridge lines to:
&gt; &gt; https://gitweb.torproject.org/builders/tor-browser-build.
&gt; &gt; git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js
&gt; &gt; To build just one project, not an entire release, do e.g.:
&gt; &gt; rbm/rbm build gmp --target testbuild --target
&gt; &gt; torbrowser-linux-x86_64
&gt; &gt; rbm/rbm build marionette --target testbuild --target
&gt; &gt; torbrowser-linux-x86_64
&gt; &gt; 
&gt; 
&gt; 
&gt; 
&gt; -- 
&gt; John Helmsen
&gt; john.helmsen@redjack.com
&gt; C: (240) 899-5676
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL:
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20180724/f0735790/attachment-0001.html&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 2
&gt; Date: Tue, 24 Jul 2018 09:46:50 -0700
&gt; From: David Fifield &lt;david@bamsoftware.com&gt;
&gt; To: John Helmsen &lt;john.helmsen@redjack.com&gt;
&gt; Cc: tor-dev@lists.torproject.org, ahf@0x90.dk, Ben Johnson
&gt; 	&lt;benbjohnson@yahoo.com&gt;
&gt; Subject: Re: [tor-dev] Ready to Integrate/Review New Marionette
&gt; 	Version into Tor
&gt; Message-ID: &lt;20180724164650.fqxrc7fkwwusfjlb@bamsoftware.com&gt;
&gt; Content-Type: text/plain; charset=utf-8
&gt; 
&gt; On Tue, Jul 24, 2018 at 11:42:08AM -0400, John Helmsen wrote:
&gt; &gt; Thank you, I have created the ticket as
&gt; #26920.  https://trac.torproject.org/
&gt; &gt; projects/tor/ticket/26920#ticket.   Having downloaded the git project,
&gt; it seems
&gt; &gt; that this work cannot be performed on a Mac, since it doesn't run
&gt; 'runc'.   Is
&gt; &gt; that right?
&gt; 
&gt; Right, the README says "To build Tor Browser, you need a Linux
&gt; distribution that has support for runc (such as Debian jessie, Ubuntu
&gt; 16.04, Fedora 20, etc ...)."
&gt; 
&gt; The tag I suggested, tbb-8.0a9-build3, is the tag of the most recent
&gt; alpha release (I think). I haven't tried building it myself--if it
&gt; doesn't work, you may just need to try a different tag. One of the Tor
&gt; Browser devs could suggest an alternative if it doesn't work on the
&gt; first try.
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; Message: 3
&gt; Date: Tue, 24 Jul 2018 13:57:36 -0400
&gt; From: John Helmsen &lt;john.helmsen@redjack.com&gt;
&gt; To: John Helmsen &lt;john.helmsen@redjack.com&gt;,
&gt; 	tor-dev@lists.torproject.org, ahf@0x90.dk, Ben Johnson
&gt; 	&lt;benbjohnson@yahoo.com&gt;
&gt; Subject: Re: [tor-dev] Ready to Integrate/Review New Marionette
&gt; 	Version into Tor
&gt; Message-ID:
&gt; 	&lt;CAFtdMkiV+nzm_Qkc1s_ikSfmYF+9Mk3fgfdHyVYMADxo24GvZw@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; Okay, I have generated a VM using VirtualBox of Ubuntu version 16. 
&gt; I've
&gt; had to restart the build process a couple of times, since the hard
&gt; drive
&gt; was 10GB, then 20GB.  Now I am using a 50GB box, so it may work this
&gt; time.
&gt; 
&gt; Should we create the branch using the -b command? ('git checkout -b
&gt; tbb-8.0a9-build3'?) Otherwise, it complains about being headless.
&gt; 
&gt; On Tue, Jul 24, 2018 at 12:46 PM, David Fifield &lt;david@bamsoftware.com&gt;
&gt; wrote:
&gt; 
&gt; &gt; On Tue, Jul 24, 2018 at 11:42:08AM -0400, John Helmsen wrote:
&gt; &gt; &gt; Thank you, I have created the ticket as #26920. https://trac.
&gt; &gt; torproject.org/
&gt; &gt; &gt; projects/tor/ticket/26920#ticket.  Having downloaded the git
&gt; project,
&gt; &gt; it seems
&gt; &gt; &gt; that this work cannot be performed on a Mac, since it doesn't run
&gt; &gt; 'runc'.  Is
&gt; &gt; &gt; that right?
&gt; &gt; 
&gt; &gt; Right, the README says "To build Tor Browser, you need a Linux
&gt; &gt; distribution that has support for runc (such as Debian jessie, Ubuntu
&gt; &gt; 16.04, Fedora 20, etc ...)."
&gt; &gt; 
&gt; &gt; The tag I suggested, tbb-8.0a9-build3, is the tag of the most recent
&gt; &gt; alpha release (I think). I haven't tried building it myself--if it
&gt; &gt; doesn't work, you may just need to try a different tag. One of the
&gt; Tor
&gt; &gt; Browser devs could suggest an alternative if it doesn't work on the
&gt; &gt; first try.
&gt; &gt; 
&gt; 
&gt; 
&gt; 
&gt; -- 
&gt; John Helmsen
&gt; john.helmsen@redjack.com
&gt; C: (240) 899-5676
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL:
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20180724/ba3f0067/attachment-0001.html&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 4
&gt; Date: Tue, 24 Jul 2018 11:09:45 -0700
&gt; From: David Fifield &lt;david@bamsoftware.com&gt;
&gt; To: John Helmsen &lt;john.helmsen@redjack.com&gt;
&gt; Cc: tor-dev@lists.torproject.org, ahf@0x90.dk, Ben Johnson
&gt; 	&lt;benbjohnson@yahoo.com&gt;
&gt; Subject: Re: [tor-dev] Ready to Integrate/Review New Marionette
&gt; 	Version into Tor
&gt; Message-ID: &lt;20180724180945.sdvhvf2jx3f5eu4f@bamsoftware.com&gt;
&gt; Content-Type: text/plain; charset=utf-8
&gt; 
&gt; On Tue, Jul 24, 2018 at 01:57:36PM -0400, John Helmsen wrote:
&gt; &gt; Okay, I have generated a VM using VirtualBox of Ubuntu version 16.  
&gt; I've had to
&gt; &gt; restart the build process a couple of times, since the hard drive was
&gt; 10GB,
&gt; &gt; then 20GB.   Now I am using a 50GB box, so it may work this time.
&gt; &gt; 
&gt; &gt; Should we create the branch using the -b command? ('git checkout -b
&gt; &gt; tbb-8.0a9-build3'?) Otherwise, it complains about being headless.
&gt; 
&gt; It doesn't matter, just for the sake of doing a testbuild and priming
&gt; the cache of dependencies (you'll notice the git_clones directory get
&gt; filled in among others). But yes, you'll want a branch for integration,
&gt; something like
&gt; 	git checkout -b marionette-integration tbb-8.0a9-build3
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; Message: 5
&gt; Date: Tue, 24 Jul 2018 15:48:15 -0500
&gt; From: Taylor Yu &lt;catalyst@torproject.org&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Proposal 295: Using the ATL construction for
&gt; 	relay cryptography (solving the crypto-tagging attack)
&gt; Message-ID: &lt;303b5243-fd81-fb4b-c63d-0c33fac49738@torproject.org&gt;
&gt; Content-Type: text/plain; charset=utf-8
&gt; 
&gt; On 07/20/2018 02:27 AM, teor wrote:
&gt; 
&gt; &gt; A few of us discussed this proposal in the #tor-dev IRC earlier this
&gt; week.
&gt; 
&gt; Hi teor, and thanks for writing this summary!  I generally agree with
&gt; what you've written.
&gt; 
&gt; &gt; We're confused by 3.1 and 3.2, which seem to be duplicate sections
&gt; using
&gt; &gt; different notation.
&gt; 
&gt; On further reflection, I think sections 3.1 and 3.2 describe two
&gt; different revisions of the proposal.  3.1 seems to not include the
&gt; previous tweak (T' in 3.2.2) in computing a new tweak, while 3.2.2
&gt; does.
&gt; It seems like if we adapt 3.1 to incorporate some chaining of the
&gt; tweak, the scheme will be IND-CPA.  (This is because the ciphertext
&gt; that
&gt; the endpoint receives will no longer be solely a function of the
&gt; plaintext and the key.)
&gt; 
&gt; I'm going to tentatively propose some more consistent notation here:
&gt; 
&gt; C ciphertext
&gt; 
&gt; M plaintext message
&gt; 
&gt; S encrypted nonce
&gt; 
&gt; N CTR mode nonce
&gt; 
&gt; T nonce tweak
&gt; 
&gt; T' saved nonce tweak
&gt; 
&gt; U pre-nonce tweak
&gt; 
&gt; U' saved pre-nonce tweak
&gt; 
&gt; keys
&gt; 
&gt; kf, kb CTR mode key
&gt; 
&gt; hf, hb GHASH key
&gt; 
&gt; cf, cb nonce-encryption key
&gt; 
&gt; gf, gb pre-nonce GHASH key
&gt; 
&gt; bf, bb pre-nonce encryption key
&gt; 
&gt; (I'm happy to hear feedback on alternative designators.)
&gt; 
&gt; -----
&gt; 
&gt; single hop outbound (same direction as CREATE):
&gt; 
&gt; input C||S
&gt; 
&gt; 1. T = H_hf(T'||C) -- generate tweak T by hashing saved previous tweak
&gt; T' and ciphertext C
&gt; 
&gt; 2. N = T ^ D_cf(S ^ T) -- decrypt encrypted nonce S using AES and tweak
&gt; T
&gt; 
&gt; 3. M = C ^ CTR_kf(N) -- decrypt ciphertext C using CTR and nonce N
&gt; 
&gt; 4. T' = T -- save tweak for next cell
&gt; 
&gt; 5. output M||N
&gt; 
&gt; single hop inbound (same direction as CREATED):
&gt; 
&gt; input M||N
&gt; 
&gt; 1. C = M ^ CTR_kb(N) -- encrypt message M using CTR and nonce N
&gt; 
&gt; 2. T = H_hb(T'||C) -- generate tweak T by hashing saved previous tweak
&gt; T' and ciphertext C
&gt; 
&gt; 3. S = T ^ E_cb(N ^ T) -- encrypt nonce N using AES and tweak T
&gt; 
&gt; 4. T' = T -- save tweak for next cell
&gt; 
&gt; 5. output C||S
&gt; 
&gt; receiving/decrypting a cell at the endpoint (e.g., exit):
&gt; 
&gt; input C||S
&gt; 
&gt; 1. decrypt as above to obtain M and N
&gt; 
&gt; 2. U = H_gf(U'||M) -- generate tweak U by hashing saved previous tweak
&gt; U' and plaintext M
&gt; 
&gt; 3. V = U ^ D_bf(N ^ U) -- decrypt nonce N with AES and pre-nonce tweak
&gt; U
&gt; for verification
&gt; 
&gt; 4. U' = U -- save pre-nonce tweak for next cell
&gt; 
&gt; 5. if V == 0, cell is authentic
&gt; 
&gt; sending/encrypting a cell from the endpoint:
&gt; 
&gt; input M
&gt; 
&gt; 1. U = H_gb(U'||M) -- generate tweak U by hashing saved previous tweak
&gt; U' and plaintext M
&gt; 
&gt; 2. N = U ^ E_bb(0 ^ U) -- generate nonce N by encrypting all-zeroes
&gt; block using AES and pre-nonce tweak U
&gt; 
&gt; 3. U' = U
&gt; 
&gt; 4. encrypt as above using M and N
&gt; 
&gt; -----
&gt; 
&gt; Open question: what do we initialize the saved tweaks T', U' to?  Is it
&gt; safe to use an all-zeroes block?
&gt; 
&gt; &gt; Generalising to Different Numbers of Hops
&gt; &gt; 
&gt; &gt; The proposal assumes that all circuits are 3-hop circuits, but Tor
&gt; typically
&gt; &gt; builds 1, 3, 4, and 5-hop circuits. Also, Tor currently generates the
&gt; same
&gt; &gt; number of keys for each hop. There's no way it can just generate
&gt; kf_M, kf_E,
&gt; &gt; kb_M, and kb_E for the final hop, because sometimes the final hop
&gt; changes.
&gt; &gt; (Due to circuit cannibalisation, or failed intro extension.)
&gt; &gt; 
&gt; &gt; Please generalise the proposal so that:
&gt; &gt; * all references to "3-hop circuit" are changed to "N-hop circuit".
&gt; &gt; * all references to kf_1,2,3, kb_1,2,3, k_fM, k_fE, k_bM and k_bE;
&gt; &gt; are changed to kf_N, kb_N, kfM_N, kfE_N, kbM_N and kbE_N.
&gt; 
&gt; Judging by the cited paper, the subkeys k1, k2, k3 are all used in the
&gt; same hop.  Given that we already use digits for hop numbers, we should
&gt; choose some alphabetic subkey designators.
&gt; 
&gt; (In the paper: k1 = CTR key; k2 = GHASH key for computing tweak; k3 =
&gt; AES key for encrypting nonce.)
&gt; 
&gt; &gt; Do we really need 6 keys per hop?
&gt; &gt; It's ok if we do, let's make sure there are no redundant keys.
&gt; 
&gt; It looks like ten keys per hop.  Every ordinary relay hop needs the
&gt; endpoint authentication keys kf_M, kf_E, kb_M, kb_E to handle
&gt; EXTEND/EXTENDED cells at least.
&gt; 
&gt; I'm not sure yet which of these are actually required to be independent
&gt; to achieve the desired security properties.
&gt; 
&gt; Best regards,
&gt; -Taylor
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; Subject: Digest Footer
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; End of tor-dev Digest, Vol 90, Issue 32
&gt; ***************************************

-- 
Take Care Sincerely flipchan layerprox dev


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Regarding implementing Marionette.&lt;br&gt;
&lt;br&gt;
It's a great project and a great way to use fte! Worked on a fork of it called \
layerprox a while ago , however, here is my question: Marionette has a dsl that you \
write "formats" in that generates traffic patterns, is the idea to randomly \
switch between these formats or use the same all the time ? Also is the formats \
automatically gonna be updated ? &lt;br&gt; &lt;br&gt;
Take care &lt;br&gt;
/flipchan &lt;br&gt;
&lt;br&gt;
Ps&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
I'm sorry for awnsering all emails in this thread (my email client is not the \
greatest)&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On July 24, 2018 8:48:22 PM UTC, \
tor-dev-request@lists.torproject.org wrote:&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); \
padding-left: 1ex;"&gt; &lt;pre class="k9mail"&gt;Send tor-dev mailing list submissions \
to&lt;br&gt;	tor-dev@lists.torproject.org&lt;br&gt;&lt;br&gt;To subscribe or unsubscribe via the World \
Wide Web, visit&lt;br&gt;	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br&gt;or, \
via email, send a message with subject or body 'help' \
to&lt;br&gt;	tor-dev-request@lists.torproject.org&lt;br&gt;&lt;br&gt;You can reach the person managing \
the list at&lt;br&gt;	tor-dev-owner@lists.torproject.org&lt;br&gt;&lt;br&gt;When replying, please edit \
your Subject line so it is more specific&lt;br&gt;than "Re: Contents of tor-dev \
digest..."&lt;br&gt;&lt;br&gt;&lt;br&gt;Today's Topics:&lt;br&gt;&lt;br&gt;   1. Re: Ready to Integrate/Review New \
Marionette Version into Tor&lt;br&gt;      (John Helmsen)&lt;br&gt;   2. Re: Ready to \
Integrate/Review New Marionette Version into Tor&lt;br&gt;      (David Fifield)&lt;br&gt;   3. \
Re: Ready to Integrate/Review New Marionette Version into Tor&lt;br&gt;      (John \
Helmsen)&lt;br&gt;   4. Re: Ready to Integrate/Review New Marionette Version into Tor&lt;br&gt;   \
(David Fifield)&lt;br&gt;   5. Re: Proposal 295: Using the ATL construction for relay&lt;br&gt;   \
cryptography (solving the crypto-tagging attack) (Taylor \
Yu)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;br&gt;Message: 1&lt;br&gt;Date: Tue, 24 Jul 2018 11:42:08 \
-0400&lt;br&gt;From: John Helmsen &lt;john.helmsen@redjack.com&gt;&lt;br&gt;To: John Helmsen \
&lt;john.helmsen@redjack.com&gt;,&lt;br&gt;	tor-dev@lists.torproject.org, ahf@0x90.dk, Ben \
Johnson&lt;br&gt;	&lt;benbjohnson@yahoo.com&gt;&lt;br&gt;Subject: Re: [tor-dev] Ready to \
Integrate/Review New Marionette&lt;br&gt;	Version into \
Tor&lt;br&gt;Message-ID:&lt;br&gt;	&lt;CAFtdMkhH+jDVLcQXp1X1Ot=5t_bVrs5oeCaLJp93On3-AUvj1w@mail.gmail.com&gt;&lt;br&gt;Content-Type: \
text/plain; charset="utf-8"&lt;br&gt;&lt;br&gt;David,&lt;br&gt;&lt;br&gt;Thank you, I have created the ticket \
as #26920.&lt;br&gt;&lt;a href="https://trac.torproject.org/projects/tor/ticket/26920#ticket."&gt;https://trac.torproject.org/projects/tor/ticket/26920#ticket.&lt;/a&gt; \
Having&lt;br&gt;downloaded the git project, it seems that this work cannot be performed \
on&lt;br&gt;a Mac, since it doesn't run 'runc'.  Is that right?&lt;br&gt;&lt;br&gt;Ben,&lt;br&gt;&lt;br&gt;I am \
currently trying to create a virtual machine using Ubuntu 16.04 for&lt;br&gt;development.  \
Unless I am mistaken, this work cannot be done on a Mac.&lt;br&gt;Please do the same, so \
that we can put this thing to bed.&lt;br&gt;&lt;br&gt;&lt;br&gt;On Mon, Jul 23, 2018 at 10:05 PM, David \
Fifield &lt;david@bamsoftware.com&gt;&lt;br&gt;wrote:&lt;br&gt;&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #729fcf; \
padding-left: 1ex;"&gt; On Fri, Jul 20, 2018 at 04:12:21PM -0400, John Helmsen \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; \
border-left: 1px solid #ad7fa8; padding-left: 1ex;"&gt; We are in the process of writing \
the documentation for Marionette, but&lt;br&gt;&lt;/blockquote&gt; the&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; \
padding-left: 1ex;"&gt; documentation on the web page should be sufficient for at least \
getting&lt;br&gt;&lt;/blockquote&gt; a full&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt \
0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; padding-left: 1ex;"&gt; evaluation \
started.  We'd like to have the evaluation complete by the&lt;br&gt;&lt;/blockquote&gt; end \
of&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: \
1px solid #ad7fa8; padding-left: 1ex;"&gt; next month, hopefully the middle of next \
month, and stand ready to make&lt;br&gt;&lt;/blockquote&gt; any and&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 1ex 0.8ex; border-left: 1px solid #ad7fa8; \
padding-left: 1ex;"&gt; all changes necessary.&lt;br&gt;&lt;br&gt; A full set of documentation will \
also be written for designing your own&lt;br&gt; protocols.  This is in process.&lt;br&gt;&lt;br&gt; \
Please let us know what you need.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt; The Tor Browser developers may \
have more specific requests, but I can&lt;br&gt; suggest some steps to get started.&lt;br&gt;&lt;br&gt; \
Open a ticket at &lt;a href="https://trac.torproject.org/"&gt;https://trac.torproject.org/&lt;/a&gt; \
for discussion and to&lt;br&gt; track progress.&lt;br&gt;         Type: project&lt;br&gt;         \
Component: Applications/Tor Browser&lt;br&gt;         Keywords: marionette&lt;br&gt; The old \
ticket for FTE is a good reference: &lt;a \
href="https://bugs.torproject.org/"&gt;https://bugs.torproject.org/&lt;/a&gt;&lt;br&gt; \
10362&lt;br&gt;&lt;br&gt; And then it would help if you port your build process to the Tor \
Browser&lt;br&gt; build system. General information:&lt;br&gt; &lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking"&gt;https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking&lt;/a&gt;&lt;br&gt; \
First, just build&lt;br&gt;         git clone &lt;a \
href="https://git.torproject.org/"&gt;https://git.torproject.org/&lt;/a&gt;&lt;br&gt; \
builders/tor-browser-build.git&lt;br&gt;         cd tor-browser-build&lt;br&gt;         git \
checkout tbb-8.0a9-build3&lt;br&gt;         make testbuild # or, e.g., \
testbuild-linux-x86_64&lt;br&gt; Then you'll have to add a new project (consisting of a \
"build" and&lt;br&gt; "config" file) for Marionette and each of its dependencies. You can \
copy&lt;br&gt; from existing projects as templates. Here is the meek project, for&lt;br&gt; \
example:&lt;br&gt; &lt;a href="https://gitweb.torproject.org/builders/tor-browser-build."&gt;https://gitweb.torproject.org/builders/tor-browser-build.&lt;/a&gt;&lt;br&gt; \
git/tree/projects/meek&lt;br&gt; You'll also need to add bridge lines to:&lt;br&gt; &lt;a \
href="https://gitweb.torproject.org/builders/tor-browser-build."&gt;https://gitweb.torproject.org/builders/tor-browser-build.&lt;/a&gt;&lt;br&gt; \
git/tree/projects/tor-browser/Bundle-Data/PTConfigs/bridge_prefs.js&lt;br&gt; To build just \
one project, not an entire release, do e.g.:&lt;br&gt;         rbm/rbm build gmp --target \
testbuild --target&lt;br&gt; torbrowser-linux-x86_64&lt;br&gt;         rbm/rbm build marionette \
--target testbuild --target&lt;br&gt; \
                torbrowser-linux-x86_64&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;
                
-- &lt;br&gt;
Take Care Sincerely flipchan layerprox dev&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180727222407</emailId><senderName>John Helmsen</senderName><senderEmail>john.helmsen@redjack.com</senderEmail><timestampReceived>2018-07-27 22:24:07-0400</timestampReceived><subject>[tor-dev] Multiple Formats in Marionette</subject><body>

[Attachment #2 (multipart/alternative)]


Flipchan,

Thanks for letting me know about Layerprox. I hadn't heard of it before.

Currently, as you probably know, Marionette does one format at a time.
However, Marionette is hierarchical in its format construction, and
therefore we can do random selection between formats by considering each
format as a 'sub-format' of the overarching format.  Look at web_sess443 in
our current release as a way that this might be done.

As we continue to go forward we will be updating the formats.  Exactly when
depends on funding and other priorities.  We recognize that an update is
needed.  You don't have to wait for us to do them, though.  If you make a
format we would be happy to consider it for integration in the repository.

If you want to put a wrapper around Marionette to give it extended
switching ability, we have implemented the PT2.X standard, so feel free to
integrate it into your code that calls it.  Just let us know that you have
integrated it, so we can add you to our list of people that we have
integrated with.

-- 
John Helmsen
john.helmsen@redjack.com
C: (240) 899-5676

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Flipchan,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for letting me know about \
Layerprox. I hadn't heard of it before.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Currently, as \
you probably know, Marionette does one format at a time.   However, Marionette is \
hierarchical in its format construction, and therefore we can do random selection \
between formats by considering each format as a 'sub-format' of the \
overarching format.   Look at web_sess443 in our current release as a way that this \
might be done.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;As we continue to go forward we will be \
updating the formats.   Exactly when depends on funding and other priorities.   We \
recognize that an update is needed.   You don't have to wait for us to do them, \
though.   If you make a format we would be happy to consider it for integration in \
the repository.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you want to put a wrapper around \
Marionette to give it extended switching ability, we have implemented the PT2.X \
standard, so feel free to integrate it into your code that calls it.   Just let us \
know that you have integrated it, so we can add you to our list of people that we \
have integrated with.&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;John \
Helmsen&lt;div&gt;&lt;a href="mailto:john.helmsen@redjack.com" \
target="_blank"&gt;john.helmsen@redjack.com&lt;/a&gt;&lt;/div&gt;&lt;div&gt;C: (240) \
899-5676&lt;/div&gt;&lt;/div&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180729074929</emailId><senderName>flipchan</senderName><senderEmail>flipchan@riseup.net</senderEmail><timestampReceived>2018-07-29 07:49:29-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 90, Issue 37</subject><body>

[Attachment #2 (multipart/alternative)]


Great to hear :)
I have created an issue on the project about randomly selecting a format as well as \
adding a custom format .

If anyone have ideas of traffic pattern formats to be added I would love to help \
develop this , please come with ideas (Y)

~flipchan

On July 28, 2018 12:00:03 PM UTC, tor-dev-request@lists.torproject.org wrote:
&gt; Send tor-dev mailing list submissions to
&gt; 	tor-dev@lists.torproject.org
&gt; 
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt; 	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt; 	tor-dev-request@lists.torproject.org
&gt; 
&gt; You can reach the person managing the list at
&gt; 	tor-dev-owner@lists.torproject.org
&gt; 
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt; 
&gt; 
&gt; Today's Topics:
&gt; 
&gt; 1. Multiple Formats in Marionette (John Helmsen)
&gt; 
&gt; 
&gt; ----------------------------------------------------------------------
&gt; 
&gt; Message: 1
&gt; Date: Fri, 27 Jul 2018 18:24:07 -0400
&gt; From: John Helmsen &lt;john.helmsen@redjack.com&gt;
&gt; To: flipchan@riseup.net, tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] Multiple Formats in Marionette
&gt; Message-ID:
&gt; 	&lt;CAFtdMkgNJdk5HpboKPczMSCD0+5d77idVutJjdSKcPqijPLSCQ@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; Flipchan,
&gt; 
&gt; Thanks for letting me know about Layerprox. I hadn't heard of it
&gt; before.
&gt; 
&gt; Currently, as you probably know, Marionette does one format at a time.
&gt; However, Marionette is hierarchical in its format construction, and
&gt; therefore we can do random selection between formats by considering
&gt; each
&gt; format as a 'sub-format' of the overarching format.  Look at
&gt; web_sess443 in
&gt; our current release as a way that this might be done.
&gt; 
&gt; As we continue to go forward we will be updating the formats.  Exactly
&gt; when
&gt; depends on funding and other priorities.  We recognize that an update
&gt; is
&gt; needed.  You don't have to wait for us to do them, though.  If you make
&gt; a
&gt; format we would be happy to consider it for integration in the
&gt; repository.
&gt; 
&gt; If you want to put a wrapper around Marionette to give it extended
&gt; switching ability, we have implemented the PT2.X standard, so feel free
&gt; to
&gt; integrate it into your code that calls it.  Just let us know that you
&gt; have
&gt; integrated it, so we can add you to our list of people that we have
&gt; integrated with.
&gt; 
&gt; -- 
&gt; John Helmsen
&gt; john.helmsen@redjack.com
&gt; C: (240) 899-5676
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL:
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20180727/ebdff9b5/attachment-0001.html&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Subject: Digest Footer
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; End of tor-dev Digest, Vol 90, Issue 37
&gt; ***************************************

-- 
Take Care Sincerely flipchan layerprox dev


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Great to hear :)&lt;br&gt;
I have created an issue on the project about randomly selecting a format as well as \
adding a custom format .&lt;br&gt; &lt;br&gt;
If anyone have ideas of traffic pattern formats to be added I would love to help \
develop this , please come with ideas (Y)&lt;br&gt; &lt;br&gt;
~flipchan&lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On July 28, 2018 12:00:03 PM UTC, \
tor-dev-request@lists.torproject.org wrote:&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); \
padding-left: 1ex;"&gt; &lt;pre class="k9mail"&gt;Send tor-dev mailing list submissions \
to&lt;br&gt;	tor-dev@lists.torproject.org&lt;br&gt;&lt;br&gt;To subscribe or unsubscribe via the World \
Wide Web, visit&lt;br&gt;	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br&gt;or, \
via email, send a message with subject or body 'help' \
to&lt;br&gt;	tor-dev-request@lists.torproject.org&lt;br&gt;&lt;br&gt;You can reach the person managing \
the list at&lt;br&gt;	tor-dev-owner@lists.torproject.org&lt;br&gt;&lt;br&gt;When replying, please edit \
your Subject line so it is more specific&lt;br&gt;than "Re: Contents of tor-dev \
digest..."&lt;br&gt;&lt;br&gt;&lt;br&gt;Today's Topics:&lt;br&gt;&lt;br&gt;   1. Multiple Formats in Marionette \
(John Helmsen)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;&lt;br&gt;&lt;br&gt;Message: 1&lt;br&gt;Date: Fri, 27 Jul 2018 18:24:07 \
-0400&lt;br&gt;From: John Helmsen &lt;john.helmsen@redjack.com&gt;&lt;br&gt;To: \
flipchan@riseup.net, tor-dev@lists.torproject.org&lt;br&gt;Subject: [tor-dev] Multiple \
Formats in Marionette&lt;br&gt;Message-ID:&lt;br&gt;	&lt;CAFtdMkgNJdk5HpboKPczMSCD0+5d77idVutJjdSKcPqijPLSCQ@mail.gmail.com&gt;&lt;br&gt;Content-Type: \
text/plain; charset="utf-8"&lt;br&gt;&lt;br&gt;Flipchan,&lt;br&gt;&lt;br&gt;Thanks for letting me know about \
Layerprox. I hadn't heard of it before.&lt;br&gt;&lt;br&gt;Currently, as you probably know, \
Marionette does one format at a time.&lt;br&gt;However, Marionette is hierarchical in its \
format construction, and&lt;br&gt;therefore we can do random selection between formats by \
considering each&lt;br&gt;format as a 'sub-format' of the overarching format.  Look at \
web_sess443 in&lt;br&gt;our current release as a way that this might be done.&lt;br&gt;&lt;br&gt;As we \
continue to go forward we will be updating the formats.  Exactly when&lt;br&gt;depends on \
funding and other priorities.  We recognize that an update is&lt;br&gt;needed.  You don't \
have to wait for us to do them, though.  If you make a&lt;br&gt;format we would be happy to \
consider it for integration in the repository.&lt;br&gt;&lt;br&gt;If you want to put a wrapper \
around Marionette to give it extended&lt;br&gt;switching ability, we have implemented the \
PT2.X standard, so feel free to&lt;br&gt;integrate it into your code that calls it.  Just \
let us know that you have&lt;br&gt;integrated it, so we can add you to our list of people \
                that we have&lt;br&gt;integrated with.&lt;br&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;
-- &lt;br&gt;
Take Care Sincerely flipchan layerprox dev&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180729155410</emailId><senderName>"Damon (TheDcoder)"</senderName><senderEmail>thedcoder@protonmail.com</senderEmail><timestampReceived>2018-07-29 15:54:10-0400</timestampReceived><subject>Re: [tor-dev] Entreaty for spreading awareness about ProxAllium, a useful frontend for Tor</subject><body>

I apologize for the late reply, I got busy with work and I had to sort
out some things related to ProxAllium.

&gt; People can't be forced to use or comment.
&gt; 
&gt; Yet if it's a tool that interacts with tor or the ecosystem
&gt; of tor tools, post up an announce and feedback request
&gt; to tor-talk and see.

True, thank you for the suggestion, I will try posting a suggestion
on the tor-talk mailing list and request any feedback and comments.

I am also planning to discontinue the AutoIt based binaries in the later
major releases, so this will be the last one to feature some improvements,
any major suggestions will be added to my checklist for the future version.

&gt; When you do, try to wrap your lines at around 72 chars.

Will do :)

&gt; Some projects that are interested in reproducibility
&gt; choose to document exceptions. So long as the diffs
&gt; don't actually do anything, and aren't a huge mess,
&gt; potential users checking reproducibility can cross
&gt; them out of the diffs they see on their end.

Unfortunately due to the nature of how tokenization works (script code
is pseudo-encrypted by a randomly chosen cipher) the whole output will
differ from each build (the interpreter excepted). There is currently no
known workaround to build reproducible binaries/executables in AutoIt.

I plan to address this issue in the re-write.

With Regards, Damon H. (TheDcoder)

Sent with ProtonMail Secure Email.

------- Original Message -------
On July 23, 2018 1:26 PM, grarpamp &lt;grarpamp@gmail.com&gt; wrote:

&gt; &gt; I am not sure where I should start with getting feedback as it is quite hard to \
&gt; &gt; find users of ProxAllium.
&gt; 
&gt; People can't be forced to use or comment.
&gt; 
&gt; Yet if it's a tool that interacts with tor or the ecosystem
&gt; of tor tools, post up an announce and feedback request
&gt; to tor-talk and see.
&gt; 
&gt; When you do, try to wrap your lines at around 72 chars.
&gt; 
&gt; &gt; AutoIt uses tokenization during compilation which adds random data to the binary \
&gt; &gt; thus making it impossible to have reproducible builds.
&gt; 
&gt; Some projects that are interested in reproducibility
&gt; choose to document exceptions. So long as the diffs
&gt; don't actually do anything, and aren't a huge mess,
&gt; potential users checking reproducibility can cross
&gt; them out of the diffs they see on their end.
&gt; 
&gt; See if folks there have input on that.
&gt; 
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180730000944</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-30 00:09:44-0400</timestampReceived><subject>Re: [tor-dev] Mentorship needed for beginner.</subject><body>

[Attachment #2 (multipart/signed)]


Hi Yogesh,

&gt; On 29 Jul 2018, at 15:19, Yogesh Singh &lt;yogesh.singh.ams5@gmail.com&gt; wrote:
&gt; 
&gt; I'm an undergrad with CS majors and have developed interest for networking. I would \
&gt; like to contribute to the Tor projects. It would be of great help if someone could \
&gt; mentor me where to begin with.

Please read our list of projects on our volunteer page:

https://www.torproject.org/getinvolved/volunteer.html#Projects

Then let us know which projects match your interests and programming skills.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlteV0gACgkQEP6qDnB1
ZypDXA//TVSaukvB93SajCHEjFPdwC67BSTg7cvCfkBKqq69xSfyUVqvrnYrM1bm
jZCr3dpk9PVbA554MYOM+TrF4fsMROEJTcz7aR8Qwamvn17Iob4vQBxSbdhrfR7T
TkJCqG88/s+Ud16CJSKi//L64mH9XRY91Smc8LPz+pUbliAldtAL1id/aByIGq9f
fybFHaewiVaSyve7AS7DMgmd+aiN98mHtxABETVt82/QgFpqkYq8LqOWMVXFBR1x
VI1gXOpwNQ812k1E7PVrdod6R19RlBtNLGa+LRuax2ybUcS3THDGUVjRIoT2VjGV
O8YlR3hk2NbUN4JiIzjicdTm85QPqPJNJkXUDY1Mad2jyMx933E3DiUbD+JLPtYc
Yc160Ft4xvGrlY1wqDXxn2Z3qsQUd5nimZvt2gwR0QzD8KKAVCMLWzSZe5XqZry5
twk2DJTuHLzYgYukPm0kr88r5ruejQrSmXIm3pvehfTCDf6gAmSBr2DcRSM5DyE/
weAcPRseHwemmiEDoU3beFFO7gxn4zchPe5reAOrrLazlmjWIfNLpZi6QrC2Pv9X
KWk/3o80F20EhcLBkCtHc2EQGmeSyVezL48QM4MBlIM1z17uQLikhAdehvEYjV6v
O3f25ESYmuC3yET+CpsGTFOUFxrUqdagu0sYv+VxON3e2nx/Ytg=
=wD6i
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180730033729</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2018-07-30 03:37:29-0400</timestampReceived><subject>Re: [tor-dev] WTF-PAD and the future</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 29 Jul 2018, at 23:42, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; 2) From what I understand you are also hoping to use WTF-PAD to protect
&gt;&gt;&gt;   against circuit fingerprinting and not just website
&gt;&gt;&gt;   fingerprinting. They told me that while this might be plausible,
&gt;&gt;&gt;   there is no current research on how well it can achieve that.  Are we
&gt;&gt;&gt;   hoping to do that? And what research remains here? How can I help?
&gt;&gt;&gt;   Which parts of the Tor circuit protocol are we hoping to hide?
&gt;&gt; 
&gt;&gt; I am designing WTF-PAD to be a framework for deploying padding against
&gt;&gt; arbitrary traffic analysis attacks. It is meant to allow us to define
&gt;&gt; histograms on the fly (in the Tor consensus) as these are studied. The
&gt;&gt; fact that they have not yet been studied is not super relevant to
&gt;&gt; deploying the framework for it now.
&gt;&gt; 
&gt; 
&gt; ACK.
&gt; 
&gt; What other traffic analysis attacks are we looking at addressing here?
&gt; 
&gt; I'm thinking of stuff like "circuit fingerprinting of onion services",
&gt; but I wonder if histograms and random sampling is too crude to actually
&gt; be able to help against sophisticated attacks. I don't have a suggestion
&gt; for something better currently.
&gt; 
&gt; On that topic, is it decided whether the adaptive padding of WTF-PAD
&gt; will also happen during circuit construction, or only after that?

Padding during circuit construction should work with VPADDING cells:
https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n508

At least it did last time I checked:
https://github.com/teor2345/endosome/blob/master/client-or-22929.py
https://trac.torproject.org/projects/tor/ticket/22929

We should avoid using PADDING cells during the handshake, because Tor
sometimes closes the connection:
https://github.com/teor2345/endosome/blob/master/client-or-22934.py

T

--
teor

Please reply @torproject.org
New subkeys 1 July 2018
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
----------------------------------------------------------------------

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlteh/kACgkQEP6qDnB1
ZyrxVw/+IVEQ4MfE7FCqooCLIWdshrN4tiUneiTJSwuYqQa6vCxgwXWS10+jqE88
YWGATTTOU5Gi9ZKIjWoI74cXC4SlrQuoo9S2HAn/Kq6EPaulVERngDha8FwN3NEs
f1BIOeEckDIRoq9DE6mn6bi6FZASc2SQNgQrOajoIELxEijLY1d9Ms30jIihURGI
qiAP4QZSNBXAvz6T4AuEFC88msg2c2KONK8jA7X0HZewAJ4+Vgo33q5F2/sP1c4s
o/lfEucAsHdRXqDJaUFfQTWh7U5MxklkCl2z2j1bztZlVyNSwx1oYzREnggrG+aS
+a6psrZHEVzILclFrSvJ70PixMN6ONKKiK2j2o4yaZ8uuyqyR8N9c1OXM9+490TR
EG+IGjNZQl5u8ZXAufCS5E9IrBy4Uj0+CP3mUyHvw72PrmjLIbem4XqhRE+FhQ63
QSwBLPjO92fzxmzmLG4/vfW7MAzHryhW8/TNNBWa9uxm0jah7ciitk1OPXHVZkSd
hwNpiJHkUUWumvbcTdvgN7rjLWilMYfCKr6Y02XYpFXFlAdZtXH5wZA/uez+eFkk
dpL6NbjTCEA0Xx38c07U4Y2wEKS8uihgK5j68SEEDvts0g7X0V6HYLJVBNfKg/bQ
FY4eli9WyCsL8nRxYrLltNrM06X4Wvkh5bgcd+KIBgcoXplE3k0=
=lExi
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180731145016</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-07-31 14:50:16-0400</timestampReceived><subject>[tor-dev] Upcoming changes to CSV files provided by Tor Metrics</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello tor-dev@,

today we finally published specifications [0] for the per-graph CSV
files that we added to Tor Metrics earlier this year.

At the same time we're announcing two upcoming changes to CSV files
provided by Tor Metrics:

 - August 15: We're going to make the first batch of changes to
per-graph CSV files marked as "Suggested change" on the linked page. If
you're currently working with per-graph CSV files, you should watch out
for those changes. We're tracking these changes on #26998 [1].

 - September 15: We're going to remove pre-aggregated CSV files after
providing working alternatives with the per-graph CSV files for all use
cases we thought of or that were brought to our attention. If you're
currently working with pre-aggregated CSV files, you should consider
switching after August 15 but before September 15. The relevant ticket
for this change is #27000 [2].

Please direct any questions or comments to the metrics-team@ mailing
list [3] or comment on either of the two tickets mentioned above.

All the best,
Karsten

 [0] https://metrics.torproject.org/stats.html
 [1] https://bugs.torproject.org/26998
 [2] https://bugs.torproject.org/27000
 [3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180601003606</emailId><senderName>Simon</senderName><senderEmail>simonhf@gmail.com</senderEmail><timestampReceived>2018-06-01 00:36:06-0400</timestampReceived><subject>[tor-dev] proposal: new log severity level: trace</subject><body>

[Attachment #2 (multipart/alternative)]


Hello tor developers,

I've had limited contact with nickm and dmr and I was encouraged  to
solicit interest and comments via the tor-dev mailing list...

I'm interested in contributing a new feature to little-t tor in the form of
a new log severity level called 'trace'. Currently there are 5 severity
levels [1]; debug, info, notice, warn, and err. trace would be more verbose
than debug, and trace function calls at runtime. It would also be
configurable -- perhaps by environment variables and/or command line
options -- regarding which functions get traced and when at runtime.
Because introducing function level tracing likely also introduces a
performance penalty, I'm suggesting that this feature would be optionally
compiled in at build time.

The use of the new log severity level 'trace' would be for new developers
to better comprehend the tor source code by giving them a further resource
-- in addition to the source code, tests,  documentation, and IRC chat --
to learn from. The debug log will be more useful in the context of the
function call tree, and function usage is easier to grasp than battling
through the ~ 165k LOC. In addition, any developer who likes to debug via
the log files will appreciate having the extra function call tree context.

I have a basic, generic working proof of concept which produces output when
running tor. Here is a snippet of the output:

...
T125580                   +
directory_initiate_command_routerstatus_rend() { // #63
T125580                     + node_get_by_id() { // #278
T125580                       }
T125580                     + directory_initiate_command_rend() { // #63
T125580                       + directory_command_should_use_begindir() { // #63
T125580                         + fascist_firewall_allows_address_or()
{ // #5814
T125580                           + compare_tor_addr_to_addr_policy() { // #6009
T125580                             }
T125580                           }
T125580                         + directory_fetches_from_authorities() { // #126
T125580                           + server_mode() { // #6859
T125580                             }
T125580                           +
router_my_exit_policy_is_reject_star() { // #128
T125580                             + router_get_my_routerinfo() { // #130
T125580                               }
T125580                             }
T125580                           }
T125580                         }
...

Explanation of the snippet: '&lt;thread ID&gt; &lt;indent&gt; + &lt;function&gt;() {
#&lt;calls&gt;' means &lt;function&gt; has been called &lt;calls&gt; times. &lt;indent&gt;
represents the function call tree indent level. '}' means the function
returns.

One can introduce extra info not implemented yet such as timestamps,
calling parameters, return value, and extra info specified by the developer.

Regarding regular tor log output: This could be mixed in with the trace
output, e.g.:

...
T125580                             + router_get_my_routerinfo() { // #130
T125580                               - info 1 of 2: abc &lt;-- non trace
T125580                               - info 1 of 2: def &lt;-- non trace
T125580                               }
...

This email is mainly to determine if there is a interest for such a tor
feature to be implemented further. AFAIK it does not seem to be implemented
already and does not seem to exist as a documented helpful tool [2]. And
I'm not aware of a third party tool which would 'just work' with tor.

Strategies for implementing the function trace:

I'll now discuss the strategies which I know about for implementing the
function trace, including the one I want to use:

1. Manual instrumentation: Here each function is manually instrumented in
the tor source code with entry and exit macros. This is time consuming and
error prone. And it can make the source code less readable.

2. Using the gcc -finstrument-functions [3] command line switch: There are
many examples [4] [5] of using this to generate a runtime function call
tree. But this mechanism causes each function to make two extra calls
whether you want that or not, so performance might be poor. Plus getting
hold of the actual function names and displaying them can be tricky; only
the function address is given to the entry and exit functions. Also, there
is no way to access the function parameters or return value.

3. Using the llvm xray [6] [7] feature: This was originally contributed to
llvm by Google but is more designed for inspecting very high performance
call trees in a production environment. A sort of dtrace for user level
functions. However, it also doesn't log function parameters or the return
value AFAIK. And logging happens via an intermediate binary file which must
get converted to something ascii / human friendly. This also means it's
tricky to mix in the existing tor log output, for one nice seemless log
file.

4. Using gcc compile to assembler command line switch: AFAIK this technique
was first developed by myself. The idea is to replace gcc with an own
script which pretends to be gcc and invokes the real gcc after making
subtle changes. If a makefile tries to compile a .c file to a .o file then
the pretend gcc will change the behaviour so that an intermediate assembler
file will be generated. However, the assembler file gets changed so that
every function call becomes an indirect function call via a pointer. This
means we can change the pointer to execute either the original function
(with the overhead of an indirect function call), or a wrapper function
with the same declaration. The wrapper function has access to all the
function parameters and return value, can log the entry and exit, while
calling the original function which got wrapped.

I have chosen implementation strategy #4 because it provides the most
flexibility without changing any existing source code or makefile. A
limitation is that it only works currently with gcc on Intel. However, msvc
&amp; llvm might have a similar compile to assembly feature. And in theory the
same technique could be implemented for non-Intel chips if they have an
indirect call assembly instruction.

An interesting side effect of strategy #4 is that it could possibly be used
to enhance testing in two ways: 1. If the test is for a particular function
or set of functions then trace could be preconfigured to provide more
detailed output for just those functions, and any functions they call. 2.
The indirect function pointer can be changed at runtime if desired to
create a kind of general purpose function mocking facility for testing.
However, I believe tor tests already do their own mocking.

Here is an example of the proof of concept auto generated C code for the
function firewall_is_fascist_or():

extern unsigned long long cwrap_count_call_firewall_is_fascist_or;
extern int (* cwrap_indirect_orig_firewall_is_fascist_or) (void);
extern int (* cwrap_indirect_wrap_firewall_is_fascist_or) (void);
extern int (* cwrap_indirect_mock_firewall_is_fascist_or) (void);
static int cwrap_wrap_firewall_is_fascist_or (void)
{
   cwrap_count_call_firewall_is_fascist_or ++;
   // todo: add per binary/file/function verbosity checking
   // todo: show function parameters for simple types, e.g. foo=123, bar=7
   if (cwrap_count_call_firewall_is_fascist_or &lt;= 10000) cwrap_log(1, "+
firewall_is_fascist_or() { // #%llu\n",
cwrap_count_call_firewall_is_fascist_or);
   int cwrap_result = (* cwrap_indirect_orig_firewall_is_fascist_or)();
   if (cwrap_count_call_firewall_is_fascist_or &lt;= 10000) cwrap_log(-1,
"}\n");
   // todo: show return value for simple types
   return cwrap_result;
}

So the pretend gcc doubles the number of functions, creating a 'wrap'
version of each regular function. While the changed assembler files change
the assembler call function into an indirect call function which uses the
newly created indirect function pointer. In theory the makefile just works
and is unmodified. However, extra files get created during make.

Looking forward to comments, suggestions, and/or votes for and against,
even if it's only to point out that something with similar functionality
exists already.

--
Simon

[1] https://www.torproject.org/docs/tor-manual.html.en
[2] https://gitweb.torproject.org/tor.git/tree/doc/HACKING/HelpfulTools.md
[3]
https://stackoverflow.com/questions/6176284/why-doesnt-finstrument-functions-work-for-me
 [4]
https://balau82.wordpress.com/2010/10/06/trace-and-profile-function-calls-with-gcc/
[5]
https://mcuoneclipse.com/2015/04/04/poor-mans-trace-free-of-charge-function-entryexit-trace-with-gnu-tools/
 [6] https://www.youtube.com/watch?reload=9&amp;v=jyL-__zOGcU
[7] https://llvm.org/docs/XRay.html


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello tor developers,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've had limited contact \
with nickm and dmr and I was encouraged   to solicit interest and comments via the \
tor-dev mailing list...&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm interested in contributing a \
new feature to little-t tor in the form of a new log severity level called \
'trace'. Currently there are 5 severity levels [1]; debug, info, notice, \
warn, and err. trace would be more verbose than debug, and trace function calls at \
runtime. It would also be configurable -- perhaps by environment variables and/or \
command line options -- regarding which functions get traced and when at runtime. \
Because introducing function level tracing likely also introduces a performance \
penalty, I'm suggesting that this feature would be optionally compiled in at \
build time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The use of the new log severity level \
'trace' would be for new developers to better comprehend the tor source code \
by giving them a further resource -- in addition to the source code, tests,   \
documentation, and IRC chat -- to learn from. The debug log will be more useful in \
the context of the function call tree, and function usage is easier to grasp than \
battling through the ~ 165k LOC. In addition, any developer who likes to debug via \
the log files will appreciate having the extra function call tree \
context.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have a basic, generic working proof of concept \
which produces output when running tor. Here is a snippet of the \
output:&lt;/div&gt;&lt;div&gt;&lt;pre \
style="white-space:pre-wrap;color:rgb(0,0,0);font-style:normal;font-variant-ligatures: \
normal;font-variant-caps:normal;font-weight:400;letter-spacing:normal;text-align:start \
;text-indent:0px;text-transform:none;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial"&gt;...
 T125580                   + directory_initiate_command_&lt;wbr&gt;routerstatus_rend() { // \
#63 T125580                     + node_get_by_id() { // #278
T125580                       }
T125580                     + directory_initiate_command_&lt;wbr&gt;rend() { // #63
T125580                       + directory_command_should_use_&lt;wbr&gt;begindir() { // #63
T125580                         + fascist_firewall_allows_&lt;wbr&gt;address_or() { // \
#5814 T125580                           + compare_tor_addr_to_addr_&lt;wbr&gt;policy() { // \
#6009 T125580                             }
T125580                           }
T125580                         + directory_fetches_from_&lt;wbr&gt;authorities() { // #126
T125580                           + server_mode() { // #6859
T125580                             }
T125580                           + router_my_exit_policy_is_&lt;wbr&gt;reject_star() { // \
#128 T125580                             + router_get_my_routerinfo() { // #130
T125580                               }
T125580                             }
T125580                           }
T125580                         }
...&lt;/pre&gt;Explanation of the snippet: '&lt;thread ID&gt; &lt;indent&gt; + \
&lt;function&gt;() { #&lt;calls&gt;' means &lt;function&gt; has been called \
&lt;calls&gt; times. &lt;indent&gt; represents the function call tree indent level. \
'}' means the function returns.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;One can introduce \
extra info not implemented yet such as timestamps, calling parameters, return value, \
and extra info specified by the developer.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regarding regular \
tor log output: This could be mixed in with the trace output, e.g.:&lt;/div&gt;&lt;div&gt;&lt;pre \
style="white-space:pre-wrap;font-style:normal;font-variant-ligatures:normal;font-varia \
nt-caps:normal;font-weight:400;letter-spacing:normal;text-align:start;text-indent:0px; \
text-transform:none;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;color:rgb(0,0,0)"&gt;...
 T125580                             + router_get_my_routerinfo() { // #130
T125580                               - info 1 of 2: abc &lt;-- non trace
T125580                               - info 1 of 2: def &lt;-- non trace
T125580                               }
...&lt;/pre&gt;&lt;div&gt;This email is mainly to determine if there is a interest for such a tor \
feature to be implemented further.  &lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;AFAIK \
it does not seem to be implemented already and does not seem to exist as a documented \
helpful tool [2]. And I'm not aware of a third party tool which would 'just \
work' with tor.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Strategies for implementing the \
function trace:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'll now discuss the strategies which I \
know about for implementing the function trace, including the one I want to \
use:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Manual instrumentation: Here each function is \
manually instrumented in the tor source code with entry and exit macros. This is time \
consuming and error prone. And it can make the source code less \
readable.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Using the gcc -finstrument-functions [3] \
command line switch: There are many examples [4] [5] of using this to generate a \
runtime function call tree. But this mechanism causes each function to make two extra \
calls whether you want that or not, so performance might be poor. Plus getting hold \
of the actual function names and displaying them can be tricky; only the function \
address is given to the entry and exit functions. Also, there is no way to access the \
function parameters or return value.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3. Using the llvm xray \
[6] [7] feature: This was originally contributed to llvm by Google but is more \
designed for inspecting very high performance call trees in a production environment. \
A sort of dtrace for user level functions. However, it also doesn't log function \
parameters or the return value AFAIK. And logging happens via an intermediate binary \
file which must get converted to something ascii / human friendly. This also means \
it's tricky to mix in the existing tor log output, for one nice seemless log \
file.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4. Using gcc compile to assembler command line switch: \
AFAIK this technique was first developed by myself. The idea is to replace gcc with \
an own script which pretends to be gcc and invokes the real gcc after making subtle \
changes. If a makefile tries to compile a .c file to a .o file then the pretend gcc \
will change the behaviour so that an intermediate assembler file will be generated. \
However, the assembler file gets changed so that every function call becomes an \
indirect function call via a pointer. This means we can change the pointer to execute \
either the original function (with the overhead of an indirect function call), or a \
wrapper function with the same declaration. The wrapper function has access to all \
the function parameters and return value, can log the entry and exit, while calling \
the original function which got wrapped.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have chosen \
implementation strategy #4 because it provides the most flexibility without changing \
any existing source code or makefile. A limitation is that it only works currently \
with gcc on Intel. However, msvc &amp; llvm might have a similar compile to assembly \
feature. And in theory the same technique could be implemented for non-Intel chips if \
they have an indirect call assembly instruction.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;An \
interesting side effect of strategy #4 is that it could possibly be used to enhance \
testing in two ways: 1. If the test is for a particular function or set of functions \
then trace could be preconfigured to provide more detailed output for just those \
functions, and any functions they call. 2. The indirect function pointer can be \
changed at runtime if desired to create a kind of general purpose function mocking \
facility for testing. However, I believe tor tests already do their own \
mocking.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is an example of the proof of concept auto \
generated C code for the function  &lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-dec \
oration-color:initial;float:none;display:inline"&gt;firewall_is_fascist_or():&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;extern \
unsigned long long cwrap_count_call_firewall_is_fascist_or;&lt;/div&gt;&lt;div&gt;extern int (* \
cwrap_indirect_orig_firewall_is_fascist_or) (void);&lt;/div&gt;&lt;div&gt;extern int (* \
cwrap_indirect_wrap_firewall_is_fascist_or) (void);&lt;/div&gt;&lt;div&gt;extern int (* \
cwrap_indirect_mock_firewall_is_fascist_or) (void);&lt;/div&gt;&lt;div&gt;static int \
cwrap_wrap_firewall_is_fascist_or (void)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;     \
cwrap_count_call_firewall_is_fascist_or ++;&lt;/div&gt;&lt;div&gt;     // todo: add per \
binary/file/function verbosity checking&lt;/div&gt;&lt;div&gt;     // todo: show function \
parameters for simple types, e.g. foo=123, bar=7&lt;/div&gt;&lt;div&gt;     if \
(cwrap_count_call_firewall_is_fascist_or &lt;= 10000) cwrap_log(1, "+ \
firewall_is_fascist_or() { // #%llu\n", \
cwrap_count_call_firewall_is_fascist_or);&lt;/div&gt;&lt;div&gt;     int cwrap_result = (* \
cwrap_indirect_orig_firewall_is_fascist_or)();&lt;/div&gt;&lt;div&gt;     if \
(cwrap_count_call_firewall_is_fascist_or &lt;= 10000) cwrap_log(-1, \
"}\n");&lt;/div&gt;&lt;div&gt;     // todo: show return value for simple \
types&lt;/div&gt;&lt;div&gt;     return \
cwrap_result;&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So the pretend gcc doubles \
the number of functions, creating a 'wrap' version of each regular function. \
While the changed assembler files change the assembler call function into an indirect \
call function which uses the newly created indirect function pointer. In theory the \
makefile just works and is unmodified. However, extra files get created during \
make.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Looking forward to comments, suggestions, and/or votes \
for and against, even if it's only to point out that something with similar \
functionality exists \
already.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;--&lt;/div&gt;&lt;div&gt;Simon&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1]  &lt;a \
href="https://www.torproject.org/docs/tor-manual.html.en"&gt;https://www.torproject.org/docs/tor-manual.html.en&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] \
&lt;a href="https://gitweb.torproject.org/tor.git/tree/doc/HACKING/HelpfulTools.md"&gt;https \
://gitweb.torproject.org/tor.git/tree/doc/HACKING/HelpfulTools.md&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3]  \
&lt;a href="https://stackoverflow.com/questions/6176284/why-doesnt-finstrument-functions- \
work-for-me"&gt;https://stackoverflow.com/questions/6176284/why-doesnt-finstrument-functions-work-for-me&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[4] \
&lt;a href="https://balau82.wordpress.com/2010/10/06/trace-and-profile-function-calls-wit \
h-gcc/"&gt;https://balau82.wordpress.com/2010/10/06/trace-and-profile-function-calls-with-gcc/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[5] \
&lt;a href="https://mcuoneclipse.com/2015/04/04/poor-mans-trace-free-of-charge-function-e \
ntryexit-trace-with-gnu-tools/"&gt;https://mcuoneclipse.com/2015/04/04/poor-mans-trace-free-of-charge-function-entryexit-trace-with-gnu-tools/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[6] \
&lt;a href="https://www.youtube.com/watch?reload=9&amp;v=jyL-__zOGcU"&gt;https://www.youtube.com/watch?reload=9&amp;v=jyL-__zOGcU&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[7] \
&lt;a href="https://llvm.org/docs/XRay.html"&gt;https://llvm.org/docs/XRay.html&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180603000817</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-06-03 00:08:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 292: Mesh-based vanguards</subject><body>

[Attachment #2 (multipart/signed)]


Ian Goldberg:
&gt; On Mon, May 28, 2018 at 01:10:21PM +0300, George Kadianakis wrote:
&gt; &gt; 2.2. Path restriction changes
&gt; &gt; 
&gt; &gt;   In order to avoid information leaks and ensure paths can be built, path
&gt; &gt;   restrictions must be loosened.
&gt; &gt; 
&gt; &gt;   In particular, we allow the following:
&gt; &gt;      1. Nodes from the same /16 and same family for any/all hops
&gt; &gt;      2. Guard nodes can be chosen for RP/IP/HSDIR
&gt; &gt;      3. Guard nodes can be chosen for hop before RP/IP/HSDIR.
&gt; &gt; 
&gt; &gt;   The first change prevents the situation where paths cannot be built if two
&gt; &gt;   layers all share the same subnet and/or node family. It also prevents the
&gt; &gt;   the use of a different entry guard based on the family or subnet of the
&gt; &gt;   IP, HSDIR, or RP.
&gt; &gt; 
&gt; &gt;   The second change prevents an adversary from forcing the use of a different
&gt; &gt;   entry guard by enumerating all guard-flaged nodes as the RP.
&gt; &gt; 
&gt; &gt;   The third change prevents an adversary from learning the guard node by way
&gt; &gt;   of noticing which nodes were not chosen for the hop before it.
&gt; 
&gt; To be clear, you are proposing removing these path restrictions for
&gt; which circuits?  All?  All HS-related?  All HS-related, but only if the
&gt; new options are turned on?

Just if the new options are turned on.

We're still working out all the details about what to do with path
restrictions in general/default cases as part of Proposal #291 (see the
"Proposal #291 Properties" thread).

We may decide to change the vanguard restriction behavior as we finalize
the restriction story for all of the other cases.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180605075059</emailId><senderName>Thom Wiggers</senderName><senderEmail>torlists@thomwiggers.nl</senderEmail><timestampReceived>2018-06-05 07:50:59-0400</timestampReceived><subject>[tor-dev] Removing my relay from the fallback dir list</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi Teor, all,

With the DO billing changes (that snuck up on me), I think it's time to
retire my main tor relay for the moment. It's on the fallbackdir list
though, although it's not currently part of the distributed lists. I've
attached a patch that takes it out of the codebase.

Maybe it'll appear somewhere else in the future, I'll reconsider it for
the fallbackdir list then.

Regards,

Thom

(resent as previous message was sent from address not on list)


["0001-Remove-tornodrdednl.patch" (text/x-patch)]

From 3917b229d4949f185d50e88e992ce07687b56f2a Mon Sep 17 00:00:00 2001
From: Thom Wiggers &lt;thom@thomwiggers.nl&gt;
Date: Tue, 5 Jun 2018 09:25:13 +0200
Subject: [PATCH] Remove tornodrdednl

Due to DO billing changes, this node will be going offline soon. I'm not sure yet if \
                it'll get back someday, somewhere else
---
 scripts/maint/fallback.whitelist | 3 ---
 1 file changed, 3 deletions(-)

diff --git a/scripts/maint/fallback.whitelist b/scripts/maint/fallback.whitelist
index e9158e1..0381701 100644
--- a/scripts/maint/fallback.whitelist
+++ b/scripts/maint/fallback.whitelist
@@ -95,9 +95,6 @@
 # https://lists.torproject.org/pipermail/tor-relays/2016-January/008534.html
 5.9.110.236:9030 orport=9001 id=0756B7CD4DFC8182BE23143FAC0642F515182CEB \
ipv6=[2a01:4f8:162:51e2::2]:9001  
-# https://lists.torproject.org/pipermail/tor-relays/2016-January/008542.html
-178.62.199.226:80 orport=443 id=CBEFF7BA4A4062045133C053F2D70524D8BBE5BE \
                ipv6=[2a03:b0c0:2:d0::b7:5001]:443
-
 # Email sent directly to teor, verified using relay contact info
 94.23.204.175:9030 orport=9001 id=5665A3904C89E22E971305EE8C1997BCA4123C69
 
-- 
2.17.1


["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180605160002</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-06-05 16:00:02-0400</timestampReceived><subject>Re: [tor-dev] Debug or a high level of logging still present when using obfs4 bridges</subject><body>

On Tue, Jun 05, 2018 at 01:19:00PM +0000, President Camacho wrote:
&gt; Debug or a high level of logging still present in
&gt; /var/log/tor/log - when using obf4 (or whatever) bridges
&gt;[...]
&gt; The logging is crazy and consumes several MB per session.
&gt; 
&gt; ** I have not tested this with plain Tor and/or TBB outside of Tails.

Well, it definitely won't happen with plain Tor, because Tor only logs
to a file when you configure it to log to a file. Similarly, Tor Browser
does not log to a file by default either.

So the first thing to look at is: what is setting your log lines? Is it
something in the Tails configuration?

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180611195917</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-06-11 19:59:17-0400</timestampReceived><subject>Re: [tor-dev] permission denied when running snowflake-client with debian-tor user</subject><body>

On Mon, Jun 11, 2018 at 07:30:31PM +0000, Yawning Angel wrote:
&gt; On Mon, 11 Jun 2018 13:24:19 -0400
&gt; Arlo Breault &lt;arlo@torproject.org&gt; wrote: 
&gt; &gt; When you launch the client binary without providing a broker url
&gt; &gt; it tries to create a named pipe (mkfifo) to do signalling.
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/pluggable-transports/snowflake.git/tree/client/rendezvous.go#n161
&gt; 
&gt; The PT spec explicitly forbids this behavior, to avoid this problem.

It's just a vestige of some early debugging code, don't worry about it.
Before we had the broker and everything, you had to manually copy and
paste rendezvous messages.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180614003622</emailId><senderName>Keifer Bly</senderName><senderEmail>keifer.bly@gmail.com</senderEmail><timestampReceived>2018-06-14 00:36:22-0400</timestampReceived><subject>[tor-dev] Porting  TOR Relay Software To Run On Windows</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

So I Retrieved the tor source code from https://github.com/torproject/tor

Here's one thing I have noticed about the network. I have noticed that there is no \
version of the tor relaying software that will run on Windows. I know Windows isn't \
the most secure OS to run a relay off of for a few reasons, however if there was a \
version of the tor relaying software that was compatible with Windows, this would \
remove the barrier an quite a number of people who want to run a bridge or relay but \
do not want to have to go through the hassle of running a Linux virtual machine or \
something. 

After just trying to start this project, here is the issue I am already encountering.

The tor relaying software is written in C, which I cannot seem to find any compilers \
for that would work with Windows.

Microsoft Visual Studio would be very convenient here, but I have checked and from \
what I can see it does not support   C, but does support C++ and of course C#.

Any thoughts on what a good compiler might be to try to port the tor relay software \
to run as a Command Prompt software on Widows?

Let me know your thoughts.

Thanks all.


[Attachment #5 (unknown)]

&lt;html xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
.MsoChpDefault
	{mso-style-type:export-only;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;/head&gt;&lt;body lang=EN-US link="#0563C1" vlink="#954F72"&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;Hello,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;So I Retrieved the tor source \
code from &lt;a href="https://github.com/torproject/tor"&gt;https://github.com/torproject/tor&lt;/a&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Here's one thing I have \
noticed about the network. I have noticed that there is no version of the tor \
relaying software that will run on Windows. I know Windows isn't the most secure OS \
to run a relay off of for a few reasons, however if there was a version of the tor \
relaying software that was compatible with Windows, this would remove the barrier an \
quite a number of people who want to run a bridge or relay but do not want to have to \
go through the hassle of running a Linux virtual machine or something. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;After just \
trying to start this project, here is the issue I am already \
encountering.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;The tor relaying software is written in C, which I cannot seem to \
find any compilers for that would work with Windows.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Microsoft Visual Studio would \
be very convenient here, but I have checked and from what I can see it does not \
support  C, but does support C++ and of course C#.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Any thoughts on what a good \
compiler might be to try to port the tor relay software to run as a Command Prompt \
software on Widows?&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;Let me know your thoughts.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;Thanks all.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180614004002</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-06-14 00:40:02-0400</timestampReceived><subject>Re: [tor-dev] Porting TOR Relay Software To Run On Windows</subject><body>



On 06/13/2018 08:36 PM, Keifer Bly wrote:
&gt; Here's one thing I have noticed about the network. I have noticed that
&gt; there is no version of the tor relaying software that will run on
&gt; Windows.

Tor is compiled for Windows and available for download here.
https://www.torproject.org/download/download.html.en

You're looking for the "Expert Bundle," and the current direct download
link is
https://www.torproject.org/dist/torbrowser/7.5.5/tor-win32-0.3.2.10.zip

Unzip it and inside you'll find tor.exe. This can be configured the
usual way to run a relay.

Hope that helps.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180614231407</emailId><senderName>Vafa Andalibi</senderName><senderEmail>vafandal@iu.edu</senderEmail><timestampReceived>2018-06-14 23:14:07-0400</timestampReceived><subject>[tor-dev] More on Fingerprinting Unlinkability ~ Summer of Privacy</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Everyone!



I'm Vafa and I'm happy to announce that I'm going to work on a project
related to Cross-Origin Fingerprinting Unlinkability in Tor Summer of
Privacy (late arrival!), this would be my first contribution to the great
Tor project and I will i will try my best to do it well.


In this project I'm going to use the results of one of my previous works
about web-based browser fingerprinting and I hope that I would be able to
extend and employ that to possibly address an issue, i.e. possible
paradoxical configurations, regarding sophisticated randomization in the
attributes and properties the uniforming of which are difficult.


My previously implemented tool [1] builds a model over (semi)-legitimate
database of browser fingerprinting and uses this model in three different
modes, all of which might come handy or be a good start for this project.


In this project, Arthur is going to be my mentor, and the above-mentioned
previous work was under supervision of Prof. Jean Camp. I would be happy to
answer further questions and discuss things that are (un)intentionally
omitted here.






Cheers!


[1] http://paradoxcatcher.readthedocs.io/en/latest/

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;p class="MsoNormal"&gt;Hello Everyone!&lt;/p&gt;

&lt;p class="MsoNormal"&gt;  &lt;/p&gt;

&lt;p class="MsoNormal"&gt;I'm Vafa and I'm happy to announce that I'm going to work on
a project related to Cross-Origin Fingerprinting Unlinkability in Tor Summer of
Privacy (late arrival!), this would be my first contribution to the great Tor project \
and I will i will try my best to do it well.   &lt;/p&gt;&lt;p class="MsoNormal"&gt;&lt;br&gt;&lt;/p&gt;&lt;p \
class="MsoNormal"&gt;In this project I'm going to use the results of one of my previous \
works about web-based browser fingerprinting and I hope that I would be able to \
extend and employ that to possibly address an issue, i.e. possible paradoxical \
configurations, regarding sophisticated randomization in the attributes and \
properties the uniforming of which are difficult. &lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;br&gt;&lt;/p&gt;&lt;p class="MsoNormal"&gt;My previously implemented tool [1] \
builds a model over (semi)-legitimate database of browser fingerprinting and uses \
this model in three different modes, all of which might come handy or be a good start \
for this project.  &lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;br&gt;&lt;/p&gt;&lt;p class="MsoNormal"&gt;In this project, Arthur is going to \
be my mentor, and the above-mentioned previous work was under supervision of Prof. \
Jean Camp. I would be happy to answer further questions and discuss things that are \
(un)intentionally omitted here.&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;br&gt;&lt;/p&gt;&lt;p class="MsoNormal"&gt;  &lt;/p&gt;

&lt;p class="MsoNormal"&gt;  &lt;/p&gt;

&lt;p class="MsoNormal"&gt;Cheers!&lt;/p&gt;

&lt;p class="MsoNormal"&gt;&lt;br&gt;&lt;/p&gt;

&lt;p class="MsoNormal"&gt;[1] &lt;a href="http://paradoxcatcher.readthedocs.io/en/latest/" \
target="_blank"&gt;http://paradoxcatcher.readthedocs.io/en/latest/&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180615015815</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-06-15 01:58:15-0400</timestampReceived><subject>Re: [tor-dev] DNS resolution isolation in Tor Browser</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 15 Jun 2018, at 09:16, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; 
&gt; Thanks for the replies.
&gt; 
&gt; 
&gt; Does tor simply assume (try) that the exit policy allows the destination
&gt; address (not the port) or does it check the exit policy before selecting
&gt; the circuit?
&gt; (in that case it would have to know the destination IP 
&gt; before building or at least selecting the circuit to use)

Most tor clients use microdescriptors, which only contain a port summary:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1494

Clients check the port, and assume that the DNS name will resolve to an IPv4
address allowed by the exit.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 15 Jun 2018, \
at 09:16, nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Thanks for \
the replies.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Does tor simply assume \
(try) that the exit policy allows the destination&lt;/span&gt;&lt;br&gt;&lt;span&gt;address (not the \
port) or does it check the exit policy before selecting&lt;/span&gt;&lt;br&gt;&lt;span&gt;the \
circuit?&lt;/span&gt;&lt;br&gt;&lt;span&gt;(in that case it would have to know the destination IP \
&lt;/span&gt;&lt;br&gt;&lt;span&gt;before building or at least selecting the circuit to \
use)&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Most tor clients use microdescriptors, which \
only contain a port summary:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1494"&gt;https://gitwe \
b.torproject.org/torspec.git/tree/dir-spec.txt#n1494&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Clients \
check the port, and assume that the DNS name will resolve to an \
IPv4&lt;/div&gt;&lt;div&gt;address allowed by the \
exit.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617140802</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-06-17 14:08:02-0400</timestampReceived><subject>Re: [tor-dev] Sandboxed Tor Browser should be officially developed</subject><body>

[Attachment #2 (multipart/signed)]


[Well, I already got my first bit of automated spam from the last post,
 so I might as well reply again.]

On Sat, 16 Jun 2018 20:34:03 -0700
Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt; wrote: 
&gt; As you pointed out, this project is no longer being actively
&gt; maintained. While someone on the Tor Browser development team can
&gt; answer more thoroughly, my understanding is that the original
&gt; maintainer moved on from working on this project. The Tor development
&gt; teams are quite small, so (like many open source projects) there are
&gt; more projects than people to support them.

Essentially, yes.

TLDR: I do not have the resources to dedicate to maintaining this, and
in the long term the project should be replaced by a correctly
re-designed Tor Browser that can sandbox itself anyway.

In a more concrete terms, the "correct" thing to do would be for a
non-trivial amount of work to be put into making Tor Browser support
better isolation and sandboxing on it's own, rather than someone be
stuck with trying to retrofit it to do things that the current design
and architecture are ill suited to doing.

Till something like that happens, a large amount of time, effort and
code will be spent on replicating existing functionality such as the
launcher, updater and configuration interface.

This requires extensive changes to the existing Tor Browser design.  As
an example of what would be required,  M. Finkel's design proposal[0]
describes the steps required to change the Tor Browser architecture to
something that is less nightmarish to sandbox, and provides better
component isolation.  As far as I am aware, there is no one working on
that either.

There are other fundamental unresolved questions specific to Linux
sandboxing (eg: X11, D-Bus) that need to be resolved in a user-friendly
manner (eg: blocking all of D-Bus a la `sandboxed-tor-browser` is
unacceptable for mass adoption), but the better isolation brought on by
the architectural change on it's own would be an improvement over a
vanilla Tor Browser install, and it would let whoever is working on
such things, focus on such things, rather than being forced to
re-implement large parts of Tor Browser.

Regards,

-- 
Yawning Angel

[0]: https://lists.torproject.org/pipermail/tbb-dev/2018-January/000743.html

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180611113500</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-06-11 11:35:00-0400</timestampReceived><subject>[tor-dev] permission denied when running snowflake-client with debian-tor user</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Dear Tor developers,

I met a problem when trying to use the snowflake-client binary
extracted from TBB 8.0a8 with the system Tor.

Specifically, it seems snowflake-client cannot be run by debian-tor
user, regardless of the permissions it is given.

I am posting the full steps below. A better formatted version of it
can be found here:
http://forums.whonix.org/t/replacing-meek-snowflake/5190/18

&gt; Here is the original permission and ownership of snowflake-client:
&gt; 
&gt; user@host:~$ ls -l snowflake-client -rwx------ 1 user user 14160744
&gt; Jun  4 06:17 snowflake-client
&gt; 
&gt; It can be executed by user user:
&gt; 
&gt; user@host:~$ sudo -u user ./snowflake-client 2018/06/04 06:18:21
&gt; 
&gt; 
&gt; --- Starting Snowflake Client --- 2018/06/04 06:18:21 No HTTP
&gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; 06:18:21 Waiting for a "signal" pipe... ^C
&gt; 
&gt; We now change the permission to let it executable by user
&gt; debian-tor:
&gt; 
&gt; user@host:~$ sudo chmod 777 snowflake-client
&gt; 
&gt; 
&gt; user@host:~$ sudo -u debian-tor ./snowflake-client 2018/06/04
&gt; 06:18:43
&gt; 
&gt; Noticed the permission denied:
&gt; 
&gt; --- Starting Snowflake Client --- 2018/06/04 06:18:43 No HTTP
&gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; 06:18:43 Waiting for a "signal" pipe... 2018/06/04 06:18:43 open
&gt; signal: permission denied
&gt; 
&gt; We now change its ownership to debian-tor:debian-tor:
&gt; 
&gt; user@host:~$ sudo chown debian-tor:debian-tor snowflake-client 
&gt; user@host:~$ ls -l snowflake-client -rwxrwxrwx 1 debian-tor
&gt; debian-tor 14160744 Jun  4 06:17 snowflake-client
&gt; 
&gt; Still, permission denied:
&gt; 
&gt; user@host:~$ sudo -u debian-tor ./snowflake-client 2018/06/04
&gt; 06:19:15
&gt; 
&gt; 
&gt; --- Starting Snowflake Client --- 2018/06/04 06:19:15 No HTTP
&gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; 06:19:15 Waiting for a "signal" pipe... 2018/06/04 06:19:15 open
&gt; signal: permission denied
&gt; 
&gt; However, when executing it by user, it works fine:
&gt; 
&gt; user@host:~$ sudo -u user ./snowflake-client 2018/06/04 06:19:22
&gt; 
&gt; 
&gt; --- Starting Snowflake Client --- 2018/06/04 06:19:22 No HTTP
&gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; 06:19:22 Waiting for a "signal" pipe... ^C

I didn't find any special requirement for the user who runs
snowflake-client from the documentation, so it would be extremely
helpful and appreciated if you could share some insights on this
problem. :)

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlseXpcACgkQoUtNvG3N
1Tx/fBAAvnl84inklNYJ4N0QRz9X9FAtmTlTTb4mrtW+WM36oaDEFigSZeha7pmw
er+oV1hG1SlHf6iel2i6YyUXAi7r6YURqlv0fFtLMaelfAIda/ywEMwVsJ19VHzn
qPPEADQVY4c55KuOgkhCMSTxGUn2wXbM+PpFf/WTaZ40gjPOjucUXUxlhwj6X6EX
wTBiUEq2yjs4xyWSfgOinFuoPqLG5Hfx/z+1ZSyL2R0yeeK1kSiB5kD90mwfOeKq
EM32xbYLy4OmQQ3cABHB2mn0wDaS8E2t22sHXhPNANdJTdM/ztcjI7BZjNMUz1Ig
aQEVpLE2yvVQu4O3nyThLnH/b08z4a6oVVE7JQpG9rmLfoFuUbJ6vTF+l6nQTJOY
mnkiL6RwGVerm612OXFOLBpHSBbToEX12tqqjC569s/OExcFzHpiiTg22HcOYab/
YSu4zUTX23wRBQhOkBQ7EL+idHGK7lwGN5d0Y45H7cwOoIXwXTu3ff1e6yjuT9Bx
Pc+tlkw7vJGB5jhFuW9EYvjrWDklbpR7HZ7TTSkDvGvzXUkAZnCzyBAnePxwQbid
45Vwsn7QCFISsZdXCS53RPoVPbNGcSQTyWn4gv/U37Fb/pZ1LYYAJFcNOl5HB8fl
nhXL9D7Mey/79n3hepChBUXpaNeHX9J+7R91A8tUjzz9irmhU8o=
=Aie4
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180614162200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-14 16:22:00-0400</timestampReceived><subject>[tor-dev] DNS resolution isolation in Tor Browser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I haven't been able to answer this question by looking into the Tor Browser design document,
maybe you have an answer:

imagine you have two tabs in Tor Browser:

1: torproject.org (circuit A)
  embeds some youtube.com content

2: google.com  (circuit B)
  embeds some youtube.com content

it will route the TCP connection via two distinct circuits (A and B) as described in the design 
document [1]


Will DNS resolution be isolated using the same logic?

torproject.org and youtube.com will be resolved via circuit A
and
google.com and youtube.com will be resolved via circuit B

Is that correct?

thanks!



[1] https://www.torproject.org/projects/torbrowser/design/#identifier-linkability
-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180614224916</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-06-14 22:49:16-0400</timestampReceived><subject>Re: [tor-dev] DNS resolution isolation in Tor Browser</subject><body>

On Thu, Jun 14, 2018 at 04:22:00PM +0000, nusenu wrote:
&gt; imagine you have two tabs in Tor Browser:
&gt; 
&gt; 1: torproject.org (circuit A)
&gt; embeds some youtube.com content
&gt; 
&gt; 2: google.com  (circuit B)
&gt; embeds some youtube.com content
&gt; 
&gt; it will route the TCP connection via two distinct circuits (A and B) as described \
&gt; in the design document [1]

Correct.

&gt; Will DNS resolution be isolated using the same logic?

Yes.

&gt; torproject.org and youtube.com will be resolved via circuit A
&gt; and
&gt; google.com and youtube.com will be resolved via circuit B
&gt; 
&gt; Is that correct?

Yes.

(In the distant past, the Tor client would cache DNS answers on the
client side, so when a later circuit requests the same address, it can
just provide the IP address, saving the exit relay from having to do
an unnecessary resolve. But that's bad for isolation, and it's bad for
geodns designs (where the dns server gives you an answer tailored for
your current location, so re-using that answer from a different location
is not best), and also it doesn't actually save the exit relay that much
since it *can* cache its resolves.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180614225113</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-06-14 22:51:13-0400</timestampReceived><subject>Re: [tor-dev] DNS resolution isolation in Tor Browser</subject><body>


&gt; On 15 Jun 2018, at 02:22, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; I haven't been able to answer this question by looking into the Tor Browser design document,
&gt; maybe you have an answer:
&gt; 
&gt; imagine you have two tabs in Tor Browser:
&gt; 
&gt; 1: torproject.org (circuit A)
&gt;  embeds some youtube.com content
&gt; 
&gt; 2: google.com  (circuit B)
&gt;  embeds some youtube.com content
&gt; 
&gt; it will route the TCP connection via two distinct circuits (A and B) as described in the design 
&gt; document [1]
&gt; 
&gt; 
&gt; Will DNS resolution be isolated using the same logic?

Tor Browser does not perform DNS resolution.

Instead, Tor Browser uses SOCKS to send DNS names directly to Tor as part of
the SOCKS TCP connection request.

Tor sends the DNS name to the exit as part of the stream request.

The exit resolves the DNS name, then opens the TCP connection to the exit.

So DNS and TCP connections have exactly the same isolation, because there is
no separate DNS resolution step in the browser or on the Tor client.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180614231600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-14 23:16:00-0400</timestampReceived><subject>[tor-dev] DNS resolution isolation in Tor Browser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Thanks for the replies.


Does tor simply assume (try) that the exit policy allows the destination
address (not the port) or does it check the exit policy before selecting
the circuit?
(in that case it would have to know the destination IP 
before building or at least selecting the circuit to use)

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180611172419</emailId><senderName>Arlo Breault</senderName><senderEmail>arlo@torproject.org</senderEmail><timestampReceived>2018-06-11 17:24:19-0400</timestampReceived><subject>Re: [tor-dev] permission denied when running snowflake-client with debian-tor user</subject><body>


&gt; On Jun 11, 2018, at 7:35 AM, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; Dear Tor developers,
&gt; 
&gt; I met a problem when trying to use the snowflake-client binary
&gt; extracted from TBB 8.0a8 with the system Tor.
&gt; 
&gt; Specifically, it seems snowflake-client cannot be run by debian-tor
&gt; user, regardless of the permissions it is given.
&gt; 
&gt; I am posting the full steps below. A better formatted version of it
&gt; can be found here:
&gt; http://forums.whonix.org/t/replacing-meek-snowflake/5190/18
&gt; 
&gt; &gt; Here is the original permission and ownership of snowflake-client:
&gt; &gt;
&gt; &gt; user@host:~$ ls -l snowflake-client -rwx------ 1 user user 14160744
&gt; &gt; Jun  4 06:17 snowflake-client
&gt; &gt;
&gt; &gt; It can be executed by user user:
&gt; &gt;
&gt; &gt; user@host:~$ sudo -u user ./snowflake-client 2018/06/04 06:18:21
&gt; &gt;
&gt; &gt;
&gt; &gt; --- Starting Snowflake Client --- 2018/06/04 06:18:21 No HTTP
&gt; &gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; &gt; 06:18:21 Waiting for a "signal" pipe... ^C
&gt; &gt;
&gt; &gt; We now change the permission to let it executable by user
&gt; &gt; debian-tor:
&gt; &gt;
&gt; &gt; user@host:~$ sudo chmod 777 snowflake-client
&gt; &gt;
&gt; &gt;
&gt; &gt; user@host:~$ sudo -u debian-tor ./snowflake-client 2018/06/04
&gt; &gt; 06:18:43
&gt; &gt;
&gt; &gt; Noticed the permission denied:
&gt; &gt;
&gt; &gt; --- Starting Snowflake Client --- 2018/06/04 06:18:43 No HTTP
&gt; &gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; &gt; 06:18:43 Waiting for a "signal" pipe... 2018/06/04 06:18:43 open
&gt; &gt; signal: permission denied
&gt; &gt;
&gt; &gt; We now change its ownership to debian-tor:debian-tor:
&gt; &gt;
&gt; &gt; user@host:~$ sudo chown debian-tor:debian-tor snowflake-client
&gt; &gt; user@host:~$ ls -l snowflake-client -rwxrwxrwx 1 debian-tor
&gt; &gt; debian-tor 14160744 Jun  4 06:17 snowflake-client
&gt; &gt;
&gt; &gt; Still, permission denied:
&gt; &gt;
&gt; &gt; user@host:~$ sudo -u debian-tor ./snowflake-client 2018/06/04
&gt; &gt; 06:19:15
&gt; &gt;
&gt; &gt;
&gt; &gt; --- Starting Snowflake Client --- 2018/06/04 06:19:15 No HTTP
&gt; &gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; &gt; 06:19:15 Waiting for a "signal" pipe... 2018/06/04 06:19:15 open
&gt; &gt; signal: permission denied
&gt; &gt;
&gt; &gt; However, when executing it by user, it works fine:
&gt; &gt;
&gt; &gt; user@host:~$ sudo -u user ./snowflake-client 2018/06/04 06:19:22
&gt; &gt;
&gt; &gt;
&gt; &gt; --- Starting Snowflake Client --- 2018/06/04 06:19:22 No HTTP
&gt; &gt; signaling detected. Using manual copy-paste signaling. 2018/06/04
&gt; &gt; 06:19:22 Waiting for a "signal" pipe... ^C
&gt; 
&gt; I didn't find any special requirement for the user who runs
&gt; snowflake-client from the documentation, so it would be extremely
&gt; helpful and appreciated if you could share some insights on this
&gt; problem. :)


When you launch the client binary without providing a broker url
it tries to create a named pipe (mkfifo) to do signalling.

https://gitweb.torproject.org/pluggable-transports/snowflake.git/tree/client/rendezvous.go#n161

Try providing a -url as in,
https://gitweb.torproject.org/pluggable-transports/snowflake.git/tree/client/torrc



&gt; Best Regards,
&gt; iry
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180611193031</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2018-06-11 19:30:31-0400</timestampReceived><subject>Re: [tor-dev] permission denied when running snowflake-client with debian-tor user</subject><body>

[Attachment #2 (multipart/signed)]


On Mon, 11 Jun 2018 13:24:19 -0400
Arlo Breault &lt;arlo@torproject.org&gt; wrote: 
&gt; When you launch the client binary without providing a broker url
&gt; it tries to create a named pipe (mkfifo) to do signalling.
&gt; 
&gt; https://gitweb.torproject.org/pluggable-transports/snowflake.git/tree/client/rendezvous.go#n161

The PT spec explicitly forbids this behavior, to avoid this problem.

https://gitweb.torproject.org/torspec.git/tree/pt-spec.txt#n188
&gt;     "TOR_PT_STATE_LOCATION"
&gt;
&gt;       Specifies an absolute path to a directory where the PT is
&gt;       allowed to store state that will be persisted across
&gt;       invocations.  The directory is not required to exist when
&gt;       the PT is launched, however PT implementations SHOULD be
&gt;       able to create it as required.
&gt;
&gt;       PTs MUST only store files in the path provided, and MUST NOT
&gt;       create or modify files elsewhere on the system.
&gt;
&gt;       Example:
&gt;
&gt;         TOR_PT_STATE_LOCATION=/var/lib/tor/pt_state/

Regards,

-- 
Yawning Angel

[Attachment #5 (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617214300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-17 21:43:00-0400</timestampReceived><subject>Re: [tor-dev] is that the correct URL in the TBB design document?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Georg Koppen:
&gt; This should be fixed now, thanks (and visible once the website rebuilds).

Thank you for addressing this so timely.

btw: It would be nice if every subsection (i.e. "SPDY and HTTP/2" would have an anchor 
so we can easily link to it).


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180624093200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-24 09:32:00-0400</timestampReceived><subject>Re: [tor-dev] DoH over non-HTTPS onion v3</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis:
&gt;&gt; this is just a short heads-up.
&gt;&gt;
&gt;&gt; I'm currently tinkering about how we could
&gt;&gt; improve DNS security and privacy for tor clients. My idea write-up is not done
&gt;&gt; yet but since the IETF DoH WG [1] is proceeding towards their next steps
&gt;&gt; I wanted to move now before it might be to late and let you know that I
&gt;&gt; might ask them if they want to allow non-HTTPS uris in the case of
&gt;&gt; onion v3 addresses (currently HTTPS is required). This might be handy for TB in the future.
&gt;&gt; If you have objections let me know.
&gt;&gt;
&gt;&gt; I also reached out to Seth Schoen and asked him about his
&gt;&gt; efforts to make onion v3 DV certificates acceptable to the CA/Browser Forum 
&gt;&gt; (if that is possible then the HTTPS requirement isn't a problem for DoH over onion v3).
&gt;&gt;
&gt; 
&gt; IIUC, you are trying to persuade the working group that they can use
&gt; HTTP v3 onions as DNS resolvers.
&gt; 
&gt; Sounds good to me! Let us know how we can support you with this :)

thanks for that kind offer but I think DoH draft authors made
some deliberate design decisions that are not in favor of
privacy by design or even privacy by default and so I did
not even start with the onion v3 topic on the WG ML since
the transport layer can not solve all the tracking problems
of higher layers (HTTP).

In the Tor context you might say - 
"we can address http layer privacy issues in DoH in Tor Browser"
but then you are probably better off just implementing DNS-over-TLS (DoT) 
which does not come with all the privacy problems of HTTP.

If you want to read more about the entire discussion on the DoH WG ML
this is the starting point (and it is not limited to this thread):
https://mailarchive.ietf.org/arch/msg/doh/vHjITrOMhWSdrozGFe4-eGNMEJc

Also: Seth Schoen got back to me regarding Domain Validated HTTPS
certificates for onion v3 - and even though it will not happen tomorrow
I have hope that it will be possible eventually (which makes my
original point - DoH over HTTP (not HTTPS) for onion v3 - unnecessary 
if everyone can get letsencrypt certs for their onions)

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180625123554</emailId><senderName>Rusty Bird</senderName><senderEmail>rustybird@net-c.com</senderEmail><timestampReceived>2018-06-25 12:35:54-0400</timestampReceived><subject>Re: [tor-dev] Dealing with DNS requests by Tor unaware programs</subject><body>

[Attachment #2 (multipart/signed)]


teor:
&gt; So we recommend SOCKSPort or HTTPTunnelPort instead, because
&gt; they support sending DNS names to exits as part of the connection
&gt; request.

Looks like this can also be achieved for TransPort by configuring:

    AutomapHostsOnResolve 1
    AutomapHostsSuffixes .

Then tor will tor (instantly) hand out an IP address in the
VirtualAddrNetworkIPv{4,6} range for _all_ domains, not just .onion etc.
With these options, if I watch STREAM events on the control port I see
SENTCONNECT to the hostname.

Rusty

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180626034150</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-06-26 03:41:50-0400</timestampReceived><subject>[tor-dev] txtorcon 18.0.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm very pleased to announce txtorcon 18.0.0. This introduces a new
Onion services API (including v3 support) and a bunch of other changes
(including a new versioning scheme).

Starting now, versioning is more Twisted-like: the first number is the
year, the second is the "release in that year" and the minor number is
for bug-fixes. No backwards-incompatible changes will occur without
first being deprecated for at least one full release (this has been my
practice anyway, so using "SemVer" no longer made sense).

The documentation is updated with all the new Onion APIs, and a full
list of changes follows:

 * await_all_uploads= option when creating Onions
 * properly re-map progress percentages (including descriptor uploads)
 * properly wait for all event-listeners during startup
 * re-work how TorState.event_map works, hopefully reducing
   reproducible-builds issues
 * TorControlProtocol.add_event_listener and
   TorControlProtocol.remove_event_listener are now async methods
   returning Deferred -- they always should have been; new code can
   now be assured that the event-listener change is known to Tor by
   awaiting this Deferred.
 * TorControlProtocol.get_conf_single method added, which gets and returns
   (asynchronously) a single GETCONF key (instead of a dict)
 * also TorControlProtocol.get_info_single similar to above
 * if Tor disconnects while a command is in-progress or pending, the
   .errback() for the corresponding Deferred is now correctly fired
   (with a TorDisconnectError)
 * tired: get_global_tor() (now deprecated)
   wired: txtorcon.get_global_tor_instance

 * Adds a comprehensive set of Onion Services APIs (for all six
   variations). For non-authenticated services, instances of
   IOnionService represent services; for authenticated services,
   instances of IAuthenticatedOnionClients encapsulated named lists of
   clients (each client is an instance implementing IOnionService).
 * Version 3 ("Proposition 279") Onion service support (same APIs) as
   released in latest Tor
 * Four new methods to handle creating endpoints for Onion services
   (either ephemeral or not and authenticated or not):
   * Tor.create_authenticated_onion_endpoint
   * Tor.create_authenticated_filesystem_onion_endpoint
   * Tor.create_onion_endpoint
   * Tor.create_filesystem_onion_endpoint
 * see create_onion for information on how to choose an
   appropriate type of Onion Service.

 * Tor.create_onion_service to add a new ephemeral Onion service to
   Tor. This uses the ADD_ONION command under the hood and can be
   version 2 or version 3. Note that there is an endpoint-style API as
   well so you don't have to worry about mapping ports yourself (see
   below).
 * Tor.create_filesystem_onion_service to add a new Onion service to
   Tor with configuration (private keys) stored in a provided
   directory. These can be version 2 or version 3 services. Note that
   there is an endpoint-style API as well so you don't have to worry
   about mapping ports yourself (see below).

 * Additional APIs to make visiting authenticated Onion services as a
   client easier:

 * Tor.add_onion_authentication will add a client-side Onion service
   authentication token. If you add a token for a service which
   already has a token, it is an error if they don't match. This
   corresponds to HidServAuth lines in torrc.
 * Tor.remove_onion_authentication will remove a previously added
   client-side Onion service authentication token. Fires with True if
   such a token existed and was removed or False if no existing token
   was found.
 * Tor.onion_authentication (Python3 only) an async context-manager
   that adds and removes an Onion authentication token (i.e. adds in
   on __aenter__ and removes it on __aexit__). Allows code like:
 * onion services support listening on Unix paths.
 * make sure README renders on Warehouse/PyPI


You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.0
   https://github.com/meejah/txtorcon/releases/tag/v18.0.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.0.tar.gz.asc

...and now also available via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.0.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
818f6ec96a9d60cb4cb47d98f2c843c7a83004c25be07daafeb9eb9aaed74f7c  \
dist/txtorcon-18.0.0.tar.gz \
d2f91a3770d7fd8c46372e5573bb23ab65c1be33f12e9ff4ac4af24e6f5f6069  \
dist/txtorcon-18.0.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlsogE4RHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadF6gf+OZ/SIZi9C2Ohce7R/ZVpw4F7qI/2ESds
T4TmAhjoc2CzGwSp+Zcxcs2RUw5Xt1lim9ckLSRBZL+agXmmarvzV6Uc3DFrL8rZ
6JUcjzd0WNYHzXXCIM11WG47/hIqRQ0gAYI9NnEF5ELJ/B03tDmXMT4KgMnnYJj2
lvewxN+2QvthCDme5lfNanDP16VGyRXKIxdKpulZfWBZ7vPe1xYgF3jpPXzkRxYu
/kKMi/BudgruiCBdYrAUa+tIqKq7H482rczszBVSvMDZuLlhPozixPEWY/rNTg4r
4d2dCz6HlQqaBkpAnB4P6udGlWfeRkRnWOO0bIPPv5FlCcmNLUKkTQ==
=jH7N
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180614152300</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-14 15:23:00-0400</timestampReceived><subject>[tor-dev] is that the correct URL in the TBB design document?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,


https://www.torproject.org/projects/torbrowser/design/#identifier-linkability writes:

&gt; While the vast majority of web requests adheres to the circuit and
&gt; connection unlinkability requirement there are still corner cases we
&gt; need to treat separately or that lack a fix altogether.

"lack a fix altogether" links back to the design document itself:
https://www.torproject.org/projects/torbrowser/design/

is that the correct URL or a copy-paste error?

thanks!



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180617001500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-17 00:15:00-0400</timestampReceived><subject>[tor-dev] DoH over non-HTTPS onion v3</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

this is just a short heads-up.

I'm currently tinkering about how we could
improve DNS security and privacy for tor clients. My idea write-up is not done
yet but since the IETF DoH WG [1] is proceeding towards their next steps
I wanted to move now before it might be to late and let you know that I
might ask them if they want to allow non-HTTPS uris in the case of
onion v3 addresses (currently HTTPS is required). This might be handy for TB in the future.
If you have objections let me know.

I also reached out to Seth Schoen and asked him about his
efforts to make onion v3 DV certificates acceptable to the CA/Browser Forum 
(if that is possible then the HTTPS requirement isn't a problem for DoH over onion v3).

regards,
nusenu


[1] https://datatracker.ietf.org/doc/draft-ietf-doh-dns-over-https

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180624164140</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-06-24 16:41:40-0400</timestampReceived><subject>[tor-dev] Dealing with DNS requests by Tor unaware programs</subject><body>

Hello. We are trying to safely deal with programs that don't support Tor
DNS stream isolation so they don't pollute TransPort.

I've read the manual but it's not clear if you enable
IsolateClientProtocol by default. Is that the case?

Also if the former is enabled, do you have IsolateDest enabled for
DnsPort or not? If no then what is the rationale for this decision?

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180628132700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-28 13:27:00-0400</timestampReceived><subject>[tor-dev] improving relay guide maintainability (was: Re: minor website update request: have the tor</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; From my personal experience, my website update requests (also trivial ones)
&gt; take about two months to get committed
I've patiently been waiting for the usual 2 months to pass..

I'm considering to remove the relay guide's dependency on https://torproject.org content
to improve its maintainability.

Is that ok with you?

@Alison: is there a timeline for community.tpo?


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180624233603</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-06-24 23:36:03-0400</timestampReceived><subject>Re: [tor-dev] Dealing with DNS requests by Tor unaware programs</subject><body>

[Attachment #2 (--Apple-Mail-F148C449-66A3-4871-81A9-DA53BD98B4EF)]


&gt; On 25 Jun 2018, at 02:41, procmem &lt;procmem@riseup.net&gt; wrote:
&gt; 
&gt; Hello. We are trying to safely deal with programs that don't support Tor
&gt; DNS stream isolation so they don't pollute TransPort.

We don't recommend TransPort for this reason. (See below.)

&gt; I've read the manual but it's not clear if you enable
&gt; IsolateClientProtocol by default. Is that the case?

No, but you're probably looking for *Port isolation instead,
which is documented as on by default under SessionGroup:

By default, streams received on different SocksPorts,
TransPorts, etc are always isolated from one another.
This option overrides that behavior.
https://www.torproject.org/docs/tor-manual.html.en

The other default isolation flags are documented in the man
page:
IsolateClientAddr and IsolateSOCKSAuth
There are also some internal flags that are always on:
https://gitweb.torproject.org/tor.git/tree/src/or/or.h#n1673

All the isolation flags that aren't named as defaults are not defaults.

&gt; Also if the former is enabled, do you have IsolateDest enabled for
&gt; DnsPort or not? If no then what is the rationale for this decision?

I don't think IsolateDest makes sense for DNSPort. Building a
separate circuit for each DNS request is slow (for clients) and
expensive (for the network).

And regardless of isolation, resolving DNS addresses at a
different exit to the one that connects can cause privacy issues,
and it can result in slower connections.

So we recommend SOCKSPort or HTTPTunnelPort instead, because
they support sending DNS names to exits as part of the connection
request.

Here are a few general reasons for the defaults:
* many applications expect to have a single source IP address
  for all their connections, and
* building a circuit for each destination is expensive, but
* isolating different users is important, so we automatically
  isolate different source IP addresses, and automatically isolate
  applications which have different socks usernames or passwords
  (users or developers should configure each application with a
  random socks username and password)

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 25 Jun \
2018, at 02:41, procmem &lt;&lt;a \
href="mailto:procmem@riseup.net"&gt;procmem@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Hello. We are trying to safely \
deal with programs that don't support Tor&lt;/span&gt;&lt;br&gt;&lt;span&gt;DNS stream isolation so \
they don't pollute TransPort.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
don't recommend TransPort for this reason. (See below.)&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;I've read the manual but it's not clear if you \
enable&lt;/span&gt;&lt;br&gt;&lt;span&gt;IsolateClientProtocol by default. Is that the \
case?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;No, but you're probably looking for \
*Port isolation instead,&lt;/div&gt;&lt;div&gt;which is documented as on by default under \
SessionGroup:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;By default, streams received on different \
SocksPorts,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;TransPorts, etc are always isolated from one another.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;This option overrides that \
behavior.&lt;/span&gt;&lt;div&gt;&lt;a \
href="https://www.torproject.org/docs/tor-manual.html.en"&gt;https://www.torproject.org/docs/tor-manual.html.en&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
other default isolation flags are documented in the \
man&lt;/div&gt;&lt;div&gt;page:&lt;/div&gt;&lt;div&gt;IsolateClientAddr and IsolateSOCKSAuth&lt;/div&gt;&lt;div&gt;There \
are also some internal flags that are always on:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/src/or/or.h#n1673"&gt;https://gitweb.torproject.org/tor.git/tree/src/or/or.h#n1673&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All \
the isolation flags that aren't named as defaults are not \
defaults.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Also if the former is enabled, \
do you have IsolateDest enabled for&lt;/span&gt;&lt;br&gt;&lt;span&gt;DnsPort or not? If no then what \
is the rationale for this decision?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;I \
don't think IsolateDest makes sense for DNSPort. Building a&lt;/div&gt;&lt;div&gt;separate \
circuit for each DNS request is slow (for clients) and&lt;/div&gt;&lt;div&gt;expensive (for the \
network).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And regardless of isolation, resolving DNS \
addresses at a&lt;/div&gt;&lt;div&gt;different exit to the one that connects can cause privacy \
issues,&lt;/div&gt;&lt;div&gt;and it can result in slower \
connections.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So we recommend SOCKSPort or HTTPTunnelPort \
instead, because&lt;/div&gt;&lt;div&gt;they support sending DNS names to exits as part of the \
connection&lt;/div&gt;&lt;div&gt;request.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are a few general reasons \
for the defaults:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;* many applications expect to have a single source IP \
address&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;  for &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;all their connections, and&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;* building a circuit for each destination is expensive, \
but&lt;/span&gt;&lt;/div&gt;&lt;div&gt;* isolating different users is important, so we \
automatically&lt;/div&gt;&lt;div&gt;  isolate different source IP addresses, and \
automatically isolate&lt;/div&gt;&lt;div&gt;  applications which have different socks \
usernames or passwords&lt;/div&gt;&lt;div&gt;  (users or developers should configure each \
application with a&lt;/div&gt;&lt;div&gt;  random socks username and \
password)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180624001920</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-06-24 00:19:20-0400</timestampReceived><subject>Re: [tor-dev] DoH over non-HTTPS onion v3</subject><body>

nusenu &lt;nusenu-lists@riseup.net&gt; writes:

&gt; Hi,
&gt;
&gt; this is just a short heads-up.
&gt;
&gt; I'm currently tinkering about how we could
&gt; improve DNS security and privacy for tor clients. My idea write-up is not done
&gt; yet but since the IETF DoH WG [1] is proceeding towards their next steps
&gt; I wanted to move now before it might be to late and let you know that I
&gt; might ask them if they want to allow non-HTTPS uris in the case of
&gt; onion v3 addresses (currently HTTPS is required). This might be handy for TB in the future.
&gt; If you have objections let me know.
&gt;
&gt; I also reached out to Seth Schoen and asked him about his
&gt; efforts to make onion v3 DV certificates acceptable to the CA/Browser Forum 
&gt; (if that is possible then the HTTPS requirement isn't a problem for DoH over onion v3).
&gt;

IIUC, you are trying to persuade the working group that they can use
HTTP v3 onions as DNS resolvers.

Sounds good to me! Let us know how we can support you with this :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180615154600</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-06-15 15:46:00-0400</timestampReceived><subject>Re: [tor-dev] is that the correct URL in the TBB design document?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; Hi,
&gt; 
&gt; 
&gt; https://www.torproject.org/projects/torbrowser/design/#identifier-linkability writes:
&gt; 
&gt;&gt; While the vast majority of web requests adheres to the circuit and
&gt;&gt; connection unlinkability requirement there are still corner cases we
&gt;&gt; need to treat separately or that lack a fix altogether.
&gt; 
&gt; "lack a fix altogether" links back to the design document itself:
&gt; https://www.torproject.org/projects/torbrowser/design/
&gt; 
&gt; is that the correct URL or a copy-paste error?

Neither. :) I made a typo in the source and the resulting HTML file got
an empty href attribute, which led to the link pointing to the design
doc itself.

This should be fixed now, thanks (and visible once the website rebuilds).

Georg

&gt; thanks!
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180628154309</emailId><senderName>"silvia [hiro]"</senderName><senderEmail>hiro@torproject.org</senderEmail><timestampReceived>2018-06-28 15:43:09-0400</timestampReceived><subject>Re: [tor-dev] improving relay guide maintainability (was: Re: minor website update request: have the</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 06/28/2018 03:27 PM, nusenu wrote:
&gt;&gt; From my personal experience, my website update requests (also trivial =
ones)
&gt;&gt; take about two months to get committed
&gt; I've patiently been waiting for the usual 2 months to pass..
&gt;
&gt; I'm considering to remove the relay guide's dependency on https://torpr=
oject.org content
&gt; to improve its maintainability.
&gt;
&gt; Is that ok with you?
&gt;
&gt; @Alison: is there a timeline for community.tpo?
&gt;
Hi nusenu,
I am sorry I missed this ticket. I usually merge content as soon as I
notice a ticket. If I miss something, meaning I do not merge it in a few
days, a quick direct email or ping is enough for me to act on it.
This is now merged.

Cheers,
-hiro


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180628230700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-28 23:07:00-0400</timestampReceived><subject>Re: [tor-dev] improving relay guide maintainability</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; I am sorry I missed this ticket. I usually merge content as soon as I
&gt; notice a ticket. If I miss something, meaning I do not merge it in a few
&gt; days, a quick direct email or ping is enough for me to act on it.
&gt; This is now merged.

I would appreciate a comment or at least a
state change  on the ticket when a PR is acted upon.

I closed the ticket now.
 

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180630051107</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-06-30 05:11:07-0400</timestampReceived><subject>[tor-dev] txtorcon 18.0.1</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Unfortunately there was a problem when parsing onion services on
Python2, which is fixed by txtorcon 18.0.1

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/18.0.1
   https://github.com/meejah/txtorcon/releases/tag/v18.0.1

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-18.0.1.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-18.0.1.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
4c158ee5cfc294a0e20c00dde2a146f04ebe6c6d1c3d7c164c0bd1c56e3d1bc6  \
dist/txtorcon-18.0.1.tar.gz \
2c3f7c768bebf081d0742cdce023b4496bf3b44c423ed7f06bd8d6254e07273e  \
dist/txtorcon-18.0.1-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAls3D3ARHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaadixQgA2rB6Hhx+0wDFxPDA+CubQon2wUxeszDv
Q7HGWwqrq/0HhtkaxPgxMxa3TBGumhIlAI1LMhUIGQEl4b4gEPPJddoF8FE7EJKM
yECemsJhPcznWEciK/uAIUNXYoT1Np5YwcaMgr8jhrBjYWU4054QJo1U9dtwJfwK
3XI7vItcqtE2x9itF5ggbzOE2tc5v2nh3yyk1DMwNl7+C+LhMBsz26Dqx1ODvl5y
e21eFc/2S0IU77S4qx/waSsjAJJBorJGI6HxYeQwLWF4nqE6pHIbePldqJyWAaJH
dI+akz5oyFR56/ddzikL1HY4L2xMqJ37c5ISEqzZSU5+3DT3wGTmow==
=mZu3
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180630115348</emailId><senderName>Jaskaran Singh</senderName><senderEmail>jvsg1303@gmail.com</senderEmail><timestampReceived>2018-06-30 11:53:48-0400</timestampReceived><subject>[tor-dev] Proposal: Check Maxmind GeoIP DB before distributing</subject><body>

Hi List,

Please have a look at this proposal.

Filename: Check-Maxmind-GeoIP-DB-before-distributing.txt
Title: Check Maxmind GeoIP-DB before distributing
Ticket(s): #26240
Author: Jaskaran Singh
Created: June 2018
Status: Open

0. Motivation and Overview
We're using Maxmind's (company registered in the US) GeoIP Database,
which is not just antithetical to the philosophy that one should not
totally rely on a service/software for all needs, but has some serious
security repercussions too.

Trusting Maxmind's GeoIP Database is dangerous, as it may lead to some
possible attacks on the Network. We propose that the Database be checked
for integrity before distributing to the users. The whole process of
checking for integrity can be assigned to the Directory Authorities (or
any trusted systems) who would be responsible for completing it using a
script.

We should also give a choice to the user whether she wants to use
Maxmind's DB or any other DB of her choice, or even to not use any
Geo-IP DB at all.

1. Threat Model
We assume an adversary that is capable of introducing false information
in the Maxmind GeoIP database, either by it's influence over the company
or otherwise. The adversary also has enough resources to perform Sybil
attack on the network.

2. Attacks on the Network

2.1 Sybil attack under the Radar
The Tor Network is constantly monitored for any suspicious spike in
nodes, as it may be an indication of an oncoming/undergoing sybil
attack. A powerful adversary can coerce Maxmind to map some specific IP
address blocks to different countries. This may lead to people/scripts
monitoring the network to not feel suspicious about this event, and
would result in the adversary staying under the radar.

2.2 False Location indication for a shady node
A large percentage of people don't want the exit of their circuits to be
located in certain countries where the communication is under
surveillance. The powerful adversary knows this as well. Users generally
add a line in their config that allows them to not form a circuit
through nodes located in those locations. To overcome this, the
adversary can coerce Maxmind to alter it's database to map some
particular IP's to locations which the user thinks are havens of free
speech.

3. Design of the Solution
We should check Maxmind database against it's own previous versions.
Additionally we should also simply stop using GeoIP database
intrinsically for every purpose but still allow users to plug in their
own databases through the interface we implement. Perhaps the latter can
be introduced as ./configure option for when the user is highly
distrustful of Maxmind and wants to use a service she trusts, or doesn't
wants to use at all. The two solutions are explained below.

3.1 Checking for integrity

Step 1: The Dir Authorities (or any trusted computers) fetch the latest
maxmind geoip-db along with its previous versions.

Step 2: Tor Nodes' location are checked against the previous versions
for any changes.

Step 3: All the Dir Authorities perform the above two steps
independently of each other. A count of the number of changes in node
locations is maintained. If the changes are in significant amount, they
are viewed with suspicion, since this can be the preparation of a sybil
attack by the adversary. In such a case, the new changes into the
database can be discarded. Though, even change in a single node's
location is concerning, but it is not easy attribute that change to
malice. Sometimes there are genuine reasons for a location to change.

Step 4. This database is then distributed to the users.

3.2 Doing away with GeoIP location altogether
GeoIP databases are occasionally un-realiable and can be done away with
safely. We can provide a ./configure option to the users that enables
them to plug in their own trusted service. If the user doesn't have
access to a database of her own choice, she can simply choose Maxmind,
or not use any database at all. It would remove our dependence from just
one database, and diversify our usage.

4. Licensing issues
Maxmind has a pretty liberal license when it comes to their database, as
summarized below

	Maxmind - CC BY-SA 4.0
	* Copy and redistribute the material in any medium or format
	* remix, transform, and build upon the material
	  for any purpose, even commercially

5. Dealing with false positives
Maxmind calculates geolocation of an IP addr using WHOIS records,
Reverse DNS etc. It claims to have precision rate of 99.5% on country
level. The other 0.5% is more likely to be those IP addresses for which
neither WHOIS record nor Reverse DNS are setup.

A very large percentage of Tor Nodes are run from datacenters, which
usually have all their records set up. It's highly unlikely for an IP
address belonging to a datacenter to be mapped to a wrong location.

Hence, false positives would be very few, and can be safely ignored
after a simple manual/scripted investigation.

-- 
Jaskaran Veer Singh (jvsg)
jvsg1303 at gmail dot com
PGP 2814 3FB7 A32D 429B 092E 27F0 8AA3 C532 9E1A 6AD8







_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180630144200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-30 14:42:00-0400</timestampReceived><subject>[tor-dev] the consequences of deprecating debian alpha repos with every new major branch</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

tldr:
- more outdated relays
(that is a claim I'm making and you could
easily proof me wrong by recreating the 0.3.3.x alpha
repos and ship 0.3.3.7 in them and see how things evolve 
after a week or so)
- more work for the tpo website maintainer
- less happy relay operators [3][4]
- more work for repo maintainers? (since a new repo needs to be created)



When the tor 0.3.4 alpha repos (deb.torproject.org) first appeared on 2018-05-23
I was about to submit a PR for the website to include it in the sources.list
generator [1] on tpo but didn't do it because I wanted to wait for a previous PR to \
be merged first. The outstanding PR got merged eventually (2018-06-28) but I still \
did not submit a PR to update the repo generator for 0.3.4.x nonetheless and here is \
why.

Recently I was wondering why are there so many relays running tor version 0.3.3.5-rc? \
(see OrNetStats or Relay Search) (&gt; 3.2% CW fraction)

Then I realized that this was the last version the tor-experimental-0.3.3.x-*
repos were shipping before they got abandoned due to the new 0.3.4.x-* repos
(I can no longer verify it since they got removed by now).

Peter made it clear in the past that the current way to
have per-major-version debian alpha repos (i.e. tor-experimental-0.3.4.x-jessie)
will not change [2]:

&gt; If you can't be bothered to change your sources.list once or twice a
&gt; year, then you probably should be running stable.

but maybe someone else would be willing to invoke a
"ln" commands everytime a new new alpha repo is born.

tor-alpha-jessie -&gt; tor-experimental-0.3.4.x-jessie

once 0.3.5.x repos are created the link would point to

tor-alpha-jessie -&gt; tor-experimental-0.3.5.x-jessie


It is my opinion that this will help reduce the amount of relays running
outdated versions of tor.

It will certainly avoid having to update the tpo website, which isn't a big task
and could probably be automated but it isn't done currently.

"..but that would cause relay operators to jump from i.e. 0.3.3.x to 0.3.4.x alphas
(and break setups)!"
Yes, and I think that is better than relays stuck on an older version because
the former repo no longer exists and operators still can choose the old repos
which will not jump to newer major versions.



[1] https://www.torproject.org/docs/debian.html.en#ubuntu
[2] https://trac.torproject.org/projects/tor/ticket/14997#comment:3
[3] https://lists.torproject.org/pipermail/tor-relays/2018-June/015549.html
[4] https://trac.torproject.org/projects/tor/ticket/26474

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180630223200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-06-30 22:32:00-0400</timestampReceived><subject>Re: [tor-dev] man: "IPv6 addresses should be wrapped in square brackets"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


grarpamp:
&gt; On Sat, Jun 30, 2018 at 5:22 PM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;&gt; tor's man page for OutboundBindAddress* options say:
&gt;&gt;
&gt;&gt;&gt; IPv6 addresses should be wrapped in square brackets
&gt;&gt;
&gt;&gt; since it does not throw an error without square brackets:
&gt;&gt; does it make any difference?
&gt;&gt;
&gt;&gt; Previously I forgot the square brackets when generating torrc
&gt;&gt; files with relayor and I would like to document the impact
&gt;&gt; of my bug (if there is any).
&gt; 
&gt; I posting somewhere about normalizing IPv6 address format,
&gt; it might have listed the RFC, for which the man page and code was
&gt; probably inconsistant. Similar to how fingerprints are a mess.

your text does not really answer my question..

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502115351</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-05-02 11:53:51-0400</timestampReceived><subject>Re: [tor-dev] Tor Terminology + torspec</subject><body>

[Attachment #2 (multipart/alternative)]


On Wed, May 2, 2018 at 4:56 AM, Iain Learmonth &lt;irl@torproject.org&gt; wrote:

&gt; Hi All,
&gt;
&gt; Looking at the recent work on the Tor bandwidth measurements document
&gt; format, I've noticed there are a few places where language can be
&gt; ambiguous [0]. This morning, I noticed more ambiguity in some metrics
&gt; tools [1]. We could do with a glossary.
&gt;
&gt; The problem though is not the lack of a glossary, but that we have at
&gt; least 3 [2][3][4].
&gt;
&gt; I've just been discussing this with juga in IRC. For the Metrics
&gt; glossary, I think (but please correct me if I'm wrong) that the Metrics
&gt; team would be happy to have our glossary's definitions match up with
&gt; torspec. I also think it would be cool if we only add new terms to the
&gt; Metrics glossary if they have a corresponding term in torspec's glossary.
&gt;
&gt; Would the torspec maintainers be happy to review and merge patches for
&gt; new terms to facilitate that?
&gt;
&gt; The community glossary is perhaps more broad than the Metrics or torspec
&gt; glossaries, and so having all those terms in torspec would probably not
&gt; be a useful thing to do.
&gt;
&gt; Would it be agreeable with the community team that terms that are
&gt; already defined in torspec should not be overloaded and that new terms
&gt; shouldn't be defined in torspec if they would have conflicting meanings
&gt; with terms defined in the community glossary?
&gt;
&gt; If you have other ideas, then please do also suggest them.
&gt;
&gt;
In the abstract, I'm generally in favor of using the same terms and
vocabulary everywhere.  I guess that there might be specific cases where
some term is too entrenched to replace or something, but I bet we can
handle that when we come across it.

Let's start slow and easy, and work up to the more difficult stuff.

peace,
-- 
Nick

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Wed, May \
2, 2018 at 4:56 AM, Iain Learmonth &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:irl@torproject.org" target="_blank"&gt;irl@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;br&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px \
#ccc solid;padding-left:1ex"&gt;Hi All,&lt;br&gt; &lt;br&gt;
Looking at the recent work on the Tor bandwidth measurements document&lt;br&gt;
format, I've noticed there are a few places where language can be&lt;br&gt;
ambiguous [0]. This morning, I noticed more ambiguity in some metrics&lt;br&gt;
tools [1]. We could do with a glossary.&lt;br&gt;
&lt;br&gt;
The problem though is not the lack of a glossary, but that we have at&lt;br&gt;
least 3 [2][3][4].&lt;br&gt;
&lt;br&gt;
I've just been discussing this with juga in IRC. For the Metrics&lt;br&gt;
glossary, I think (but please correct me if I'm wrong) that the Metrics&lt;br&gt;
team would be happy to have our glossary's definitions match up with&lt;br&gt;
torspec. I also think it would be cool if we only add new terms to the&lt;br&gt;
Metrics glossary if they have a corresponding term in torspec's glossary.&lt;br&gt;
&lt;br&gt;
Would the torspec maintainers be happy to review and merge patches for&lt;br&gt;
new terms to facilitate that?&lt;br&gt;
&lt;br&gt;
The community glossary is perhaps more broad than the Metrics or torspec&lt;br&gt;
glossaries, and so having all those terms in torspec would probably not&lt;br&gt;
be a useful thing to do.&lt;br&gt;
&lt;br&gt;
Would it be agreeable with the community team that terms that are&lt;br&gt;
already defined in torspec should not be overloaded and that new terms&lt;br&gt;
shouldn't be defined in torspec if they would have conflicting meanings&lt;br&gt;
with terms defined in the community glossary?&lt;br&gt;
&lt;br&gt;
If you have other ideas, then please do also suggest \
them.&lt;br&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In the abstract, I'm generally in \
favor of using the same terms and vocabulary everywhere.   I guess that there might \
be specific cases where some term is too entrenched to replace or something, but I \
bet we can handle that when we come across it.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's start slow \
and easy, and work up to the more difficult \
stuff.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;peace,&lt;br&gt;&lt;/div&gt;&lt;div&gt;-- \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;Nick&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502232840</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-02 23:28:40-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/alternative)]


On 3 May 2018, at 06:41, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt;&gt; What are the guidelines to avoid getting blocked by the tor network?
&gt; 
&gt; stay under the public thresholds?
&gt; https://www.torproject.org/docs/tor-manual-dev.html.en#_denial_of_service_mitigation_options

Those are the defaults.

You'll need to stay under the current thresholds in the consensus:
https://consensus-health.torproject.org/#consensusparams

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 3 May 2018, \
at 06:41, nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite" \
preoffsettop="767"&gt;&lt;span&gt;What are the guidelines to avoid getting blocked by the tor \
network?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;stay under the public \
thresholds?&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;a \
href="https://www.torproject.org/docs/tor-manual-dev.html.en#_denial_of_service_mitiga \
tion_options"&gt;https://www.torproject.org/docs/tor-manual-dev.html.en#_denial_of_servic \
e_mitigation_options&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Those \
are the defaults.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;You'll need to stay under the current \
thresholds in the consensus:&lt;div&gt;&lt;a \
href="https://consensus-health.torproject.org/#consensusparams"&gt;https://consensus-heal \
th.torproject.org/#consensusparams&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180503102637</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-05-03 10:26:37-0400</timestampReceived><subject>[tor-dev] Bandwidth Scanning Meeting Notes 3 May 2018</subject><body>

Next meeting is 10 May 2018 at 1200 UTC for 30 minutes... maybe. While
we should find a standard time, next week is a special case for pastly
and teor.

Notes are https://pad.riseup.net/p/ioYq89yZSx1t and copy/pasted below.

---------------------------------------------------------------------

This pad:
    https://pad.riseup.net/p/ioYq89yZSx1t

Meetbot log:

http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-05-03-09.29.html

Last week

    https://lists.torproject.org/pipermail/tor-dev/2018-April/013108.html


Next Milestone:
    1st Status Update: May 25th

All Milestones:
    https://trac.torproject.org/projects/tor/wiki/doc/gsoc


######################## Updates

pastly:
    - Make significant strides towards the switch to HTTP/S
    - sbws launches Tor for itself
    - started tagging and icrementing and signing versions


teor:
    - reviewed the bandwidth format spec
    - feedback on tor bwfile tests and bug fixes
    - feedback on sbws / tor launching
    - the sbws vs torflow averages in the testnet are stable and consistent
    - fixed a buffer read-past-the-end when the file can't be read in
the bwfile parsing code


juga:
    Last week:
        * sbws:
            * Worked on "Add what to include in a source distribution"
(issues/132)
            * Discussed with pastly about "Include file where to write
``generate`` results in the config?"
            * Created "Fix version, prepare for future release"
(issues/131): pastly started to tag versions, what is needed for
packaging/distributing sbws (whatever the method will be)
            * Worked on "Include software and sofware_version headers"
(issues/96), waiting to finish the spec so that we don't keep switch format
            * Worked on "Add useful information in sbws header lines"
(issues/119): PR 130 waiting to finish spec
        * spec:
            * Worked with teor on the new version sent to @tor-dev
        * little-tor:
            * Worked on "Allow additional header lines" (#25960): also
waiting for the specs
            * Started to write tests for the previous and "Create unit
test for dirserv_read_measured_bandwidths" (#25947)
    Next week:
        * spec: wait for comments and change according to it
        * little-tor:
            * continue with #25960 (when spec ready)
            * finish #25947, tests for current code, additional header
lines
              and possible refactor
        * sbws: work on 96, 119 when spec is ready



######################## Discussions

-------------- sbws logo offer??

Is this something we care about?

Decision: not really, but ux might like the help

-------------- Meeting time

0930 UTC is terribly early for pastly, but he can do it in the name of
collab.
1130 UTC would actually be easier for teor, but that's about as late as
they can go
For juga both times are fine ^
Decision: from 12:00 to 12:30 UTC

Decision: 1200 UTC and only 30m long next week

-------------- Bandwidth spec

Bugfixes and incremental improvements, or a rewrite?
Should i create a new version, include the changes or wait for more
comments?

Decision: make minor changes if there is time

-------------- Bandwidth file parsing code in Tor

unit tests are ok
bugfixes are ok
What this mean? ^

we can always do tests and bugfixes

If we implement the format, we might have to change it

-------------- Bandwidth file generation

If we implement the format, we might have to change it
pastly thinks he/we can easily handle whatever crazy thing you all come
up with for the Tor side of code as long as it follows the general idea
of one-line-per-relay, simple integers, and maybe a header with some
metadata
juga thinks there is not crazy thing, and parsing strings in python is
way easier than c :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313025512</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-03-13 02:55:12-0400</timestampReceived><subject>[tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


Out of 9900 possible two hop tor circuits among the top 100 tor relays
only 935 circuit builds have succeeded. This is way worse than the last
time I sent a report 6 months ago during the Montreal tor dev meeting.


Here's the scanner I use:

https://github.com/david415/tor_partition_scanner

(I was planning on improving this testing methodology in collaboration with
Katharina Kohls but was unable to travel to Bochum University because of
visa limitations. It was either go to tor-dev meeting or Bochum but not both.)

Here's the gist of my simple testing methodology:

https://gist.github.com/david415/9875821652018431dd6d6c4407bb90c0#file-detect_tor_network_partitions

Here's exactly how I performed the scan to get those results:

wget https://collector.torproject.org/recent/relay-descriptors/consensuses/2018-03-13-01-00-00-consensus

./helpers/query_fingerprints_from_consensus_file.py 2018-03-1
3-01-00-00-consensus &gt; top100.relays


detect_partitions.py --tor-control tcp:127.0.0.1:9051 --log-dir ./ --status-log ./status_log \
   --relay-list top100.relays --secret secretTorEmpireOfRelays --partitions 1 --this-partition 0 \
   --build-duration .25 --circuit-timeout 60 --log-chunk-size 1000 --max-concurrency 100


echo "select first_hop, second_hop from scan_log where status = 'failure';" | sqlite3 scan1.db | wc -l
8942

echo "select first_hop, second_hop from scan_log where status = 'timeout';" | sqlite3 scan1.db | wc -l
23

echo "select first_hop, second_hop from scan_log where status = 'success';" | sqlite3 scan1.db | wc -l
935

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180425083046</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-25 08:30:46-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

[Attachment #2 (multipart/signed)]


Mike Perry:
&gt; Mike Perry:
&gt; &gt; Heyo.
&gt; &gt; 
&gt; &gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html
&gt; 
&gt; 3. Describe adversary models for our variant proposals from the notes.
&gt; (Why do we disagree? In Mike's case, my disagreements are because I
&gt; think each step is an improvement over previous/status quo -- we can
&gt; decide harder things later and still do better both now and later.)

Ok, in the interest of getting closer to an adversary model, let's first
start with enumerating the properties the proposals below provide.
Properties #1-5 have parenthesis at the end of them.  When the condition
in parenthesis is met for property #N, we'll call that "strong #N".

  1. Hidden service use can't push you over to an unused guard (at all).
  2. Hidden service use can't influence your choice of guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)
  4. DoS/Guard node downtime signals are rare (absent)
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  6. Information about the guard(s) does not leak to the website/RP (at all).
  7. Relays in the same family can't be forced to correlate Exit traffic.

&gt; Roger's proposal:
&gt; * Remove /16 and family path restrictions between guard and last hop
&gt; * Optionally, dir auths don't give you Guard if you're an Exit
&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt; * First and backup guard are chosen in different /16's and different families

Depending on how good the padding is, this proposal maybe-provides:
  1. Hidden service use can't push you over to an unused guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)

Depending on how good the detection mechanism is:
  4. DoS/Guard node downtime signals are much more rare (absent)

It provides strong:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)

It provides:
  7. Relays in the same family can't be forced to correlate Exit traffic.

It does not provide:
  2. Hidden service use can't influence your choice of guard (at all).
  6. Information about the guard(s) does not leak to the website/RP (at all).

&gt; asn proposal:
&gt; * Allow "same node, same /16, same family" between guard and last hop. If it's a \
&gt;                 3-hop circ (A - B - A), extend it to a 4-hop circ (A - B - C - A).
&gt; * Switch to two primary guards; and revisit prop#271 as needed to make this \
&gt; possible and good.

This proposal provides strong:
  1. Hidden service use can't push you over to an unused guard (at all).
  2. Hidden service use can't influence your choice of guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)

If we fix prop#271's downtime detection for the two primaries, it provides:
  4. DoS/Guard node downtime signals are rare (absent)

If the client chooses its primary guards from the same /16 or family, it
does not provide #6 (since the hop before the RP won't ever be in that
family):
  6. Information about the guard(s) does not leak to the website/RP (at all).

It does not provide:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  7. Relays in the same family can't be forced to correlate Exit traffic.

&gt; Nick's proposal:
&gt; * allow two primary guards
&gt; * tweak guard design so that primary guards are not chosen in same /16 or family
&gt; * separately, consider relaxing path restriction rules. Not removing.
&gt; * separately, consider other proposals for new behavior on guard failure (as \
&gt;                 modification to guard-spec).
&gt; * separately, consider requiring introduce cells to contain &gt;=two possible \
&gt;                 rendezvous points in separate families.
&gt; * separately, require that introduction points be chosen from different families.

In the short term, this proposal provides #1,3-4,6 (not strong, because
if one of the primary guards is down, you can be forced into using a
third):
  1. Hidden service use can't push you over to an unused guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)
  4. DoS/Guard node downtime signals are rare (absent)
  6. Information about the guard(s) does not leak to the website/RP (at all).

In the short term, it gets strong #5 and #7, though this may change if
we relax restrictions.
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  7. Relays in the same family can't be forced to correlate Exit traffic.

Changing the introduce cell will provide strong #1-2. Improving guard
failure conditions gets it strong #4:
  1. Hidden service use can't push you over to an unused guard (at all).
  2. Hidden service use can't influence your choice of guard (at all).
  4. DoS/Guard node downtime signals are rare (absent)

&gt; Aaron's proposal:
&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt; * First and backup guard are chosen in different /16's and different families

Depending on how good the padding is, this proposal maybe-provides:
  1. Hidden service use can't push you over to an unused guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)

Depending on how good the detection mechanism is:
  4. DoS/Guard node downtime signals are much more rare (absent)

It provides strong #5:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)

It provides #7:
  7. Relays in the same family can't be forced to correlate Exit traffic.

It does not provide #2 or #6:
  2. Hidden service use can't influence your choice of guard (at all).
  6. Information about the guard(s) does not leak to the website/RP (at all).
 
&gt; Mike's proposal from the meeting:
&gt; * Set "num primary guards"=2 and "num primary guards to use"=2
&gt; * Make no other changes right now
&gt; * File a path selection parent ticket to decide/fix path selection issues
&gt; * Tweak prop#271 behavior when both guards are down
&gt; * Investigate either favor-one-guard preference, conflux, and/or padding, but do \
&gt; this carefully.

In the short term, this proposal provides #1,3-4,6 (not strong, because if
one of the primary guards is down, you can be forced into using a
third):
  1. Hidden service use can't push you over to an unused guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)
  4. DoS/Guard node downtime signals are rare (absent)
  6. Information about the guard(s) does not leak to the website/RP (at all).

If you get unlucky and choose both primaries from the same /16 or
family, you also lose #1,3,6.

In the short term, it gets strong #5 and #7, though this may
change if we relax restrictions:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  7. Relays in the same family can't be forced to correlate Exit traffic.

Improving guard failure conditions gets it strong #4:
  4. DoS/Guard node downtime signals are rare (absent)

It does not provide:
  2. Hidden service use can't influence your choice of guard (at all).

&gt; [Mike's rules proposal to Roger in the other thread]
&gt; In the world where we keep path restrictions, these would be my rules:
&gt; 1. Two equal guards, chosen from not the same /16 or family
&gt; 2. Choose each vanguard layer members such that each layer has at least
&gt; one node from a unique /16 and family.
&gt; 3. Build paths in a strict order, from last hop towards guard. If you
&gt; can't build a path with this ordering, start over with a sampled guard.
&gt; (With rule #1 and #2, this should be very rare and should mean that
&gt; a guard is marked down locally but still marked up in the consensus.)
&gt; 4. No guards as exits (Not needed but do it anyway for other reasons).
&gt; 
&gt; Then under these rules, you decide to use a new primary guard, if:
&gt; 0. When a guard leaves the consensus, replace it with a new primary
&gt; guard.
&gt; 1. Temporarily pick a new guard when your two primaries are locally down
&gt; or unusable (ie step #3 above fails).

This gets #1 and #6, but not strong (if one guard is temporarily down):
  1. Hidden service use can't push you over to an unused guard (at all).
  6. Information about the guard(s) does not leak to the website/RP (at all).

It gets strong #3-5:
  3. Exits and websites can't push you over to an unused guard (at all)
  4. DoS/Guard node downtime signals are rare (absent)
  5. Nodes are not reused for Guard and Exit positions ("any" positions)

It does not provide:
  2. Hidden service use can't influence your choice of guard (at all).

======================================================================

Ok, so here's a proposal that gets strong #1-4, and regular #5-7. It is
my current favorite:

&gt; * Set "num primary guards"=2 and "num primary guards to use"=2
&gt; * Don't give Exit nodes the Guard flag.
&gt; * Allow "same node, same /16, same family" between guard and last hop,
&gt; but only for HS circuits (which are at least 4 hops long for these
&gt; cases).
&gt; * Allow same /16 and same family for HS circuits.
&gt; * When a primary guard leaves the consensus, pick a new one.
&gt; * If both primary guards are down/not completing circuits, pick a new one.

Strong:
  1. Hidden service use can't push you over to an unused guard (at all).
  2. Hidden service use can't influence your choice of guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)
  4. DoS/Guard node downtime signals are rare (absent)

Regular:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  6. Information about the guard(s) does not leak to the website/RP (at all).
  7. Relays in the same family can't be forced to correlate Exit traffic.

It gives up on strong #5 to get strong #1 and strong #2, because I don't
see a lot of difference between an HS circuit that uses the same Guard
as the RP vs one that uses the same Guard node for one of the other
side's middle or Guard hops (which we can't prevent). 

We don't get strong #6, because if one guard is temporarily down but
still in the consensus and the adversarial RP makes enough circuits fast
enough, it could theoretically notice that the next node is never the
remaining not-down Guard. This window of time can be minimized by more
eagerly switching guards when one of them is unresponsive. It could be
eliminated by using S - G - L2 - L3 - R paths with vanguards (at the
expense of directly exposing service L3 vanguards to the RP, and
creating service linkability).



-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180501123619</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-05-01 12:36:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, Juga!

This is a review of the document from
https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt
 , which I *think* is the same as the document you have below.

I'm reviewing this as though it were a fully new format, since I'm not sure
how much we already have locked-in based on existing code, and how much is
new.  We might decide that backward compatibility is more important than
consistency, and if so, we won't want to take all of my recommendations
here.


&gt; Tor Bandwidth Measurements Document Format
&gt; juga
&gt; teor
&gt; 
&gt; 1. Scope and preliminaries
&gt; 
&gt; This document describes the format of Tor's bandwidth measurements
&gt; document, version 1.0.0 and later.

Suggestion: Maybe explicitly say "1.0.0, 1.1.0, and later"?

&gt; Since Tor version 0.2.4.12-alpha the directory
&gt; authorities use the bandwidth measurements document called
&gt; "V3BandwidthsFile" and produced by Torflow [1]
&gt; (format described in README.spec.txt [2]).

Recommendation: "Format described in Torflow's README.spec.txt".

Explanation needed: Is this a new format, or a new specification of the
existing format?  Let's say so here.

Question: If this is a different format, and we're calling it version
1.0.0, what should we call the old one?  But later it seems that we're
introducing 1.1.0, and we're calling the old one 1.0.0.

Suggestion: let's be explicit that we're only describing the format
here, and *not* describing how bwauths generate their data.


&gt; The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
&gt; NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
&gt; "OPTIONAL" in this document are to be interpreted as described in
&gt; RFC 2119.
&gt; 
&gt; 1.2. Acknowledgements
&gt; 
&gt; The original bandwidth measurement scanner (Torflow) and format was
&gt; created by mike. Teor suggested to write this specification while
&gt; contributing on pastly's new bandwidth scanner implementation.
&gt; 
&gt; This specification was revised after feedback from:
&gt; 
&gt; XXX
&gt; 
&gt; 1.3 Outline
&gt; 
&gt; The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2
&gt; of "Tor directory protocol" (dir-spec.txt) [3] are obtained
&gt; by bandwidth authorities, which generate a file storing information
&gt; on relays' measured bandwidth capacities.
&gt; 
&gt; 1.4. Format Versions
&gt; 
&gt; 1.0.0 - The legacy fallback bandwidth measurements document format
&gt; 
&gt; 1.1.0 - Adds key_value lines to the header, format version,
&gt; optional ones and section separator.

Information: Let's repeat in this section which versions of Tor can
consume these versions.

&gt; 2. Format details
&gt; 
&gt; Bandwidth measurements MUST contain the following sections:
&gt; - Header (exactly once)
&gt; - Relays measurements (zero or more times)

Grammar suggestion: "Relay measurements".



&gt; 2.1. Definitions
&gt; 
&gt; The following nonterminals are defined in dir-spec.txt, sections
&gt; 1.2., 2.1.1., 2.1.3.:
&gt; 
&gt; Int
&gt; SP (space)
&gt; NL (newline)
&gt; Keyword
&gt; ArgumentChar
&gt; fingerprint (hexdigest)

Does this have to start with a "$" ?  I think it does.  Maybe we should be
explicit about that.

&gt; nickname
&gt; 
&gt; Nonterminals defined in "Tor Directory List Format" (dir-list-spec.txt),
&gt; section 2.2.1.:
&gt; 
&gt; version_number
&gt; 
&gt; We define the following nonterminals:
&gt; 
&gt; value ::= ArgumentChar+
&gt; key_value ::= Keyword "=" value
&gt; line ::= ArgumentChar* NL
&gt; timestamp ::= Int
&gt; bandwidth ::= Int
&gt; relay_line ::= key_value (SP key_value)* NL
&gt; 
&gt; 2.2. Header format
&gt; 
&gt; Some header lines MUST appear in specific positions, as documented below.
&gt; All other lines can appear in any order.
&gt; 
&gt; There MUST NOT be multiple key_value header lines with the same key.

Maybe this line belongs below in the key_value section?

&gt; It consists of:
&gt; 
&gt; timestamp NL
&gt; 
&gt; [At start, exactly once.]
&gt; 
&gt; The Unix Epoch time in seconds when the file was created.

Question: Why no keyword and equal sign here?  Is this a legacy thing?

Also, wouldn't it be more standard to have it be in YYYY-MM-DDTHH:MM:SS
format?

&gt; "version=" version_number NL
&gt; 
&gt; [In second position, zero or one time.]
&gt; 
&gt; The specification document format version.
&gt; It uses semantic versioning [5].
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; Version 1.0.0 documents do not contain this line, and the
&gt; version_number is considered to be "1.0.0".

General concern: I question the use of = signs here in the headers.  If
we use "SP" instead, then we can reuse a lot of the same machinery tor
currently uses to parse other documents.

&gt; "software=" value NL
&gt; 
&gt; [Zero or one time.]
&gt; 
&gt; The name of the software that created the document.
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; Version 1.0.0 documents do not contain this line, and the software is
&gt; considered to be "torflow".
&gt; 
&gt; "software_version=" value NL
&gt; 
&gt; [Zero or one time.]
&gt; 
&gt; The version of the software that created the document.
&gt; The version may be a version_number, a git commit, or some other
&gt; version scheme.
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; "scanner_started=" timestamp NL
&gt; 
&gt; [Zero or one time.]
&gt; 
&gt; The Unix Epoch time in seconds when the scanner that generates the
&gt; measurements document started.
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.

See note above about time format.  YYYY-MM-DDTHH:MM:SS is how we specify
times elsewhere in Tor.

&gt; "earliest_measurement=" timestamp NL
&gt; 
&gt; [Zero or one time.]
&gt; 
&gt; The Unix Epoch time in seconds when the first relay measurement
&gt; was obtained.
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.

See note above about time format.

&gt; key_value NL
&gt; 
&gt; [Zero or more times.]
&gt; 
&gt; Future format versions may include additional key_value header lines.
&gt; Additional header lines will be accompanied by a minor version
increment.
&gt; 
&gt; Implementations MAY add additional header lines as needed. This
&gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; same header keys.
&gt; 
&gt; Parsers MUST NOT rely on the order of these additional lines.
&gt; 
&gt; Additional header lines MUST NOT use any keywords specified in the
&gt; relay measurements format.
&gt; 
&gt; If a header line does not conform to this format, the line SHOULD be
&gt; ignored by parsers.

Suggestion: say what recipients of this document should do with
unrecognized data.  In general, it's good for forward compatibility to
say something like, "Recipients MUST ignore key_value lines if they do
not recognize the keyword. Recipients MUST ignore any extra material in
a line that they do not recognize."

Also see suggestion above about using SP as our separator rather than
"=" for consistency with other documents Tor parses.

&gt; NL
&gt; 
&gt; [Zero or one time.]
&gt; 
&gt; The header ends.
&gt; 
&gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; For version 1.0.0 documents, the header ends when the first relay
&gt; measurement line is found conforming to the next section.

Suggestion: Replace this empty line with an explicit keyword, for
consistency with other documents.

&gt; 2.3. Relay measurements format
&gt; 
&gt; It consists of zero or more relay_line with the measurement results
&gt; of relays in arbitrary order.
&gt; 
&gt; There can be at most one relay_line per relay identity (fingerprint).
&gt; 
&gt; There MUST NOT be multiple key_value pairs with the same key in the same
&gt; relay_line.
&gt; 
&gt; Each relay_line MUST include the following key_value in arbitrary order:

Do existing implementations accept arbitrary order here?

&gt; "node_id=" fingerprint
&gt; 
&gt; [Exactly once.]
&gt; 
&gt; The fingerprint of the relay being measured.

Suggestion: Add a field to hold the Ed25519 Identity of the relay being
measured.  Say that implementations SHOULD include both RSA fingerprint
and Ed25519 identity, and that implementations SHOULD accept lines that
contain at least one of them.

&gt; "bw=" bandwidth
&gt; 
&gt; [Exactly once.]
&gt; 
&gt; The measured bandwidth of this relay.
&gt; 
&gt; Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt; implementations. Therefore, implementations SHOULD NOT produce zero
&gt; bandwidths. Instead, they SHOULD use one as their minimum bandwidth.
&gt; 
&gt; Multiple measurements can be aggregated using an averaging scheme,
such
&gt; as a mean, median, or decaying average.
&gt; 
&gt; Torflow scales bandwidths to kilobytes per second. Other
implementations
&gt; SHOULD use kilobytes per second for their initial bandwidth scaling.
&gt; 
&gt; If different implementations or configurations are used in votes for
the
&gt; same network, their measurements MAY need further scaling. See
Appendix B
&gt; for information about scaling, and one possible scaling method.
&gt; 
&gt; key_value
&gt; 
&gt; [Zero or more times.]

Technically, this isn't a key_value, because a "value" is made of
ArgumentChar, and ArgumentChar can contain spaces.  So if we were
parsing
       "foo=abc bar=def"
we might be parsing either one key_value ("foo", "abc bar=def") or two
("foo", "abc"), ("bar, "def").

&gt; Future format versions may include additional key_value pairs on a
relay_line.
&gt; Additional key_value pairs will be accompanied by a minor version
increment.
&gt; 
&gt; Implementations MAY add additional relay key_value pairs as needed.
This
&gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; same relay keys.
&gt; 
&gt; Parsers MUST NOT rely on the order of these additional key_value
pairs.
&gt; 
&gt; Additional key_value pairs MUST NOT use any keywords specified in the
&gt; header format.

As above, let's say that a parser should ignore key_value entries with
keywords that it doesn't recognize.

&gt; 
&gt; If a relay line does not conform to this format, the line SHOULD be
&gt; ignored by parsers.
&gt; 
&gt; 2.4. Implementation notes
&gt; 
&gt; 2.4.1. Simple Bandwidth Scanner
&gt; 
&gt; Every relay measurement in sbws version 0.1.0 consists of:
&gt; 
&gt; "node_id=" fingerprint SP
&gt; 
&gt; As above.
&gt; 
&gt; "bw=" bandwidth SP
&gt; 
&gt; As above.
&gt; 
&gt; "nick=" nickname SP
&gt; 
&gt; [Exactly once.]
&gt; 
&gt; The relay nickname.
&gt; 
&gt; "rtt=" Int SP
&gt; 
&gt; [Exactly once.]
&gt; 
&gt; The Round Trip Time in milliseconds to obtain 1 byte of data.
&gt; 
&gt; "time=" timestamp NL
&gt; 
&gt; [Exactly once.]
&gt; 
&gt; The Unix Epoch time in seconds when the last measurement was
performed.
&gt; 
&gt; 2.4.2. Torflow
&gt; 
&gt; Torflow relay lines include node_id and bw, and other key_value pairs [2].
&gt; 
&gt; References:
&gt; 
&gt; 1. https://gitweb.torproject.org/torflow.git
&gt; 2.
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332

&gt; 3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
&gt; 4. https://metrics.torproject.org/onionoo.html#details
&gt; 5. https://semver.org/
&gt; 
&gt; A. Sample data
&gt; 
&gt; The following has not been obtained from any real measurement.
&gt; 
&gt; A.1. Generated by Torflow
&gt; 
&gt; This an example version 1.0.0 document:
&gt; 
&gt; 1523911758
&gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
circ_fail=0.2 scanner=/filepath
&gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
measured_at=1523911623 updated_at=1523911623 pid_error=3.96703337994
pid_error_sum=3.96703337994 pid_bw=47422125 pid_delta=2.65469736988
circ_fail=0.0 scanner=/filepath
&gt; 
&gt; A.2. Generated by sbws version 0.1.0
&gt; 
&gt; 1523911758
&gt; version=1.1.0
&gt; software=sbws
&gt; software_version=0.1.0
&gt; scanner_started=1523911756
&gt; earliest_measurement=1523911757
&gt; 
&gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
rtt=380 time=1523911725
&gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
rtt=378 time=1523911623
&gt; 
&gt; B. Scaling bandwidths
&gt; 
&gt; B.1. Scaling requirements
&gt; 
&gt; Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt; implementations. Therefore, scaling methods SHOULD perform the
&gt; following checks:
&gt; * If the total bandwidth is zero, all relays should be given equal
&gt; bandwidths.
&gt; * If the scaled bandwidth is zero, it should be rounded up to one.
&gt; 
&gt; Initial experiments indicate that scaling may not be needed for
&gt; torflow and sbws, because their measured bandwidths are similar
&gt; enough already.
&gt; 
&gt; B.2. A linear scaling method
&gt; 
&gt; If scaling is required, here is a simple linear bandwith scaling
&gt; method, which ensures that all bandwidth votes contain approximately
&gt; the same total bandwidth:
&gt; 
&gt; 1. Calculate the relay quota by dividing the total measured bandwidth
&gt; in all votes, by the number of relays with measured bandwidth
&gt; votes. In the public tor network, this is approximately 7500 as of
&gt; April 2018. The quota should be a consensus parameter, so it can be
&gt; adjusted for all scanners on the network.
&gt; 
&gt; 2. Calculate a vote quota by multiplying the relay quota by the number
&gt; of relays this bandwidth authority has measured
&gt; bandwidths for.
&gt; 
&gt; 3. Calculate a scaling factor by dividing the vote quota by the
&gt; total unscaled measured bandwidth in this bandwidth
&gt; authority's upcoming vote.
&gt; 
&gt; 4. Multiply each unscaled measured bandwidth by the scaling
&gt; factor.
&gt; 
&gt; Now, the total scaled bandwidth in the upcoming vote is
&gt; approximately equal to the quota.
&gt; 
&gt; B.3. Quota changes
&gt; 
&gt; If all scanners are using scaling, the quota can be gradually
&gt; reduced or increased as needed. Smaller quotas decrease the size
&gt; of uncompressed consensuses, and may decrease the size of
&gt; consensus diffs and compressed consensuses. But if the relay
&gt; quota is too small, some relays may be over- or under-weighted.


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi, Juga! &lt;br&gt;&lt;br&gt;This is a review of the document from &lt;a \
href="https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eb \
a2a13bfb/bandwidth-file-spec.txt"&gt;https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt&lt;/a&gt; \
, which I *think* is the same as the document you have \
below.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm reviewing this as though it were a fully \
new format, since I'm not sure how much we already have locked-in based on \
existing code, and how much is new.   We might decide that backward compatibility is \
more important than consistency, and if so, we won't want to take all of my \
recommendations here.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;br&gt;&gt;                     Tor \
Bandwidth Measurements Document Format&lt;br&gt;&gt;                                        \
juga&lt;br&gt;&gt;                                                         \
teor&lt;br&gt;&gt;&lt;br&gt;&gt; 1. Scope and preliminaries&lt;br&gt;&gt;&lt;br&gt;&gt;     This document \
describes the format of Tor's bandwidth measurements&lt;br&gt;&gt;     document, \
version 1.0.0 and later.&lt;br&gt;&lt;br&gt;Suggestion: Maybe explicitly say "1.0.0, 1.1.0, \
and later"?&lt;br&gt;&lt;br&gt;&gt;     Since Tor version 0.2.4.12-alpha the \
directory&lt;br&gt;&gt;     authorities use the bandwidth measurements document \
called&lt;br&gt;&gt;     "V3BandwidthsFile" and produced by Torflow [1]&lt;br&gt;&gt;   \
(format described in README.spec.txt [2]).&lt;br&gt;&lt;br&gt;Recommendation: "Format \
described in Torflow's README.spec.txt".&lt;br&gt;&lt;br&gt;Explanation needed: Is this \
a new format, or a new specification of the&lt;br&gt;existing format?   Let's say so \
here.&lt;br&gt;&lt;br&gt;Question: If this is a different format, and we're calling it \
version&lt;br&gt;1.0.0, what should we call the old one?   But later it seems that \
we're&lt;br&gt;introducing 1.1.0, and we're calling the old one \
1.0.0.&lt;br&gt;&lt;br&gt;Suggestion: let's be explicit that we're only describing the \
format&lt;br&gt;here, and *not* describing how bwauths generate their data.&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt; \
The key words "MUST", "MUST NOT", "REQUIRED", \
"SHALL", "SHALL&lt;br&gt;&gt;         NOT", "SHOULD", \
"SHOULD NOT", "RECOMMENDED",   "MAY", and&lt;br&gt;&gt;       \
"OPTIONAL" in this document are to be interpreted as described in&lt;br&gt;&gt;   \
RFC 2119.&lt;br&gt;&gt;&lt;br&gt;&gt; 1.2. Acknowledgements&lt;br&gt;&gt;&lt;br&gt;&gt;     The original \
bandwidth measurement scanner (Torflow) and format was&lt;br&gt;&gt;     created by mike. \
Teor suggested to write this specification while&lt;br&gt;&gt;     contributing on \
pastly's new bandwidth scanner implementation.&lt;br&gt;&gt;&lt;br&gt;&gt;     This \
specification was revised after feedback from:&lt;br&gt;&gt;&lt;br&gt;&gt;         \
XXX&lt;br&gt;&gt;&lt;br&gt;&gt; 1.3 Outline&lt;br&gt;&gt;&lt;br&gt;&gt;     The bandwidth measurements \
mentioned in sections 3.4.1 and 3.4.2&lt;br&gt;&gt;     of "Tor directory \
protocol" (dir-spec.txt) [3] are obtained&lt;br&gt;&gt;     by bandwidth authorities, \
which generate a file storing information&lt;br&gt;&gt;     on relays' measured \
bandwidth capacities.&lt;br&gt;&gt;&lt;br&gt;&gt; 1.4. Format Versions&lt;br&gt;&gt;&lt;br&gt;&gt;       \
1.0.0 - The legacy fallback bandwidth measurements document format&lt;br&gt;&gt;&lt;br&gt;&gt;    \
1.1.0 - Adds key_value lines to the header, format version,&lt;br&gt;&gt;                   \
optional ones and section separator.&lt;br&gt;&lt;br&gt;Information: Let's repeat in this \
section which versions of Tor can&lt;br&gt;consume these versions.&lt;br&gt;&lt;br&gt;&gt; 2. Format \
details&lt;br&gt;&gt;&lt;br&gt;&gt;     Bandwidth measurements MUST contain the following \
sections:&lt;br&gt;&gt;     - Header (exactly once)&lt;br&gt;&gt;     - Relays measurements (zero \
or more times)&lt;br&gt;&lt;br&gt;Grammar suggestion: "Relay \
measurements".&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&gt; 2.1. Definitions&lt;br&gt;&gt;&lt;br&gt;&gt;     The \
following nonterminals are defined in dir-spec.txt, sections&lt;br&gt;&gt;     1.2., \
2.1.1., &lt;a href="http://2.1.3."&gt;2.1.3.&lt;/a&gt;:&lt;br&gt;&gt;&lt;br&gt;&gt;         Int&lt;br&gt;&gt;       \
SP (space)&lt;br&gt;&gt;         NL (newline)&lt;br&gt;&gt;         Keyword&lt;br&gt;&gt;         \
ArgumentChar&lt;br&gt;&gt;         fingerprint (hexdigest)&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Does this have \
to start with a "$" ?   I think it does.   Maybe we should be explicit \
about that.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&gt;         nickname&lt;br&gt;&gt;&lt;br&gt;&gt;     Nonterminals \
defined in "Tor Directory List Format" (dir-list-spec.txt),&lt;br&gt;&gt;     \
section &lt;a href="http://2.2.1."&gt;2.2.1.&lt;/a&gt;:&lt;br&gt;&gt;&lt;br&gt;&gt;         \
version_number&lt;br&gt;&gt;&lt;br&gt;&gt;     We define the following \
nonterminals:&lt;br&gt;&gt;&lt;br&gt;&gt;         value ::= ArgumentChar+&lt;br&gt;&gt;         \
key_value ::= Keyword "=" value&lt;br&gt;&gt;         line ::= ArgumentChar* \
NL&lt;br&gt;&gt;         timestamp ::= Int&lt;br&gt;&gt;         bandwidth ::= Int&lt;br&gt;&gt;        \
relay_line ::= key_value (SP key_value)* NL&lt;br&gt;&gt;&lt;br&gt;&gt; 2.2. Header \
format&lt;br&gt;&gt;&lt;br&gt;&gt; Some header lines MUST appear in specific positions, as \
documented below.&lt;br&gt;&gt; All other lines can appear in any order.&lt;br&gt;&gt;&lt;br&gt;&gt; \
There MUST NOT be multiple key_value header lines with the same key.&lt;br&gt;&lt;br&gt;Maybe \
this line belongs below in the key_value section?&lt;br&gt;&lt;br&gt;&gt; It consists \
of:&lt;br&gt;&gt;&lt;br&gt;&gt;     timestamp NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [At start, exactly \
once.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The Unix Epoch time in seconds when the file was \
created.&lt;br&gt;&lt;br&gt;Question: Why no keyword and equal sign here?   Is this a legacy \
thing?&lt;br&gt;&lt;br&gt;Also, wouldn't it be more standard to have it be in \
YYYY-MM-DDTHH:MM:SS&lt;br&gt;format?&lt;br&gt;&lt;br&gt;&gt;     "version=" version_number \
NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [In second position, zero or one time.]&lt;br&gt;&gt;&lt;br&gt;&gt;    \
The specification document format version.&lt;br&gt;&gt;         It uses semantic \
versioning [5].&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has been added in version 1.1.0 of \
this specification.&lt;br&gt;&gt;&lt;br&gt;&gt;         Version 1.0.0 documents do not contain \
this line, and the&lt;br&gt;&gt;         version_number is considered to be \
"1.0.0".&lt;br&gt;&lt;br&gt;General concern: I question the use of = signs here in the \
headers.   If&lt;br&gt;we use "SP" instead, then we can reuse a lot of the same \
machinery tor&lt;br&gt;currently uses to parse other documents.&lt;br&gt;&lt;br&gt;&gt;     \
"software=" value NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or one \
time.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The name of the software that created the \
document.&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has been added in version 1.1.0 of this \
specification.&lt;br&gt;&gt;&lt;br&gt;&gt;         Version 1.0.0 documents do not contain this \
line, and the software is&lt;br&gt;&gt;         considered to be \
"torflow".&lt;br&gt;&gt;&lt;br&gt;&gt;     "software_version=" value \
NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or one time.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The version of \
the software that created the document.&lt;br&gt;&gt;         The version may be a \
version_number, a git commit, or some other&lt;br&gt;&gt;         version \
scheme.&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has been added in version 1.1.0 of this \
specification.&lt;br&gt;&gt;&lt;br&gt;&gt;     "scanner_started=" timestamp \
NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or one time.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The Unix Epoch \
time in seconds when the scanner that generates the&lt;br&gt;&gt;         measurements \
document started.&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has been added in version 1.1.0 \
of this specification.&lt;br&gt;&lt;br&gt;See note above about time format.   YYYY-MM-DDTHH:MM:SS \
is how we specify&lt;br&gt;times elsewhere in Tor.&lt;br&gt;&lt;br&gt;&gt;     \
"earliest_measurement=" timestamp NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or one \
time.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The Unix Epoch time in seconds when the first relay \
measurement&lt;br&gt;&gt;         was obtained.&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has been \
added in version 1.1.0 of this specification.&lt;br&gt;&lt;br&gt;See note above about time \
format.&lt;br&gt;&lt;br&gt;&gt;     key_value NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or more \
times.]&lt;br&gt;&gt;&lt;br&gt;&gt;         Future format versions may include additional \
key_value header lines.&lt;br&gt;&gt;         Additional header lines will be accompanied \
by a minor version increment.&lt;br&gt;&gt;&lt;br&gt;&gt;         Implementations MAY add \
additional header lines as needed. This&lt;br&gt;&gt;         specification SHOULD be \
updated to avoid conflicting meanings for the&lt;br&gt;&gt;         same header \
keys.&lt;br&gt;&gt;&lt;br&gt;&gt;         Parsers MUST NOT rely on the order of these additional \
lines.&lt;br&gt;&gt;&lt;br&gt;&gt;         Additional header lines MUST NOT use any keywords \
specified in the&lt;br&gt;&gt;         relay measurements format.&lt;br&gt;&gt;&lt;br&gt;&gt;         \
If a header line does not conform to this format, the line SHOULD be&lt;br&gt;&gt;         \
ignored by parsers.&lt;br&gt;&lt;br&gt;Suggestion: say what recipients of this document should do \
with&lt;br&gt;unrecognized data.   In general, it's good for forward compatibility \
to&lt;br&gt;say something like, "Recipients MUST ignore key_value lines if they \
do&lt;br&gt;not recognize the keyword. Recipients MUST ignore any extra material in&lt;br&gt;a \
line that they do not recognize."&lt;br&gt;&lt;br&gt;Also see suggestion above about using \
SP as our separator rather than&lt;br&gt;"=" for consistency with other documents \
Tor parses.&lt;br&gt;&lt;br&gt;&gt;     NL&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or one \
time.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The header ends.&lt;br&gt;&gt;&lt;br&gt;&gt;         This line has \
been added in version 1.1.0 of this specification.&lt;br&gt;&gt;&lt;br&gt;&gt;         For \
version 1.0.0 documents, the header ends when the first relay&lt;br&gt;&gt;         \
measurement line is found conforming to the next section.&lt;br&gt;&lt;br&gt;Suggestion: Replace \
this empty line with an explicit keyword, for&lt;br&gt;consistency with other \
documents.&lt;br&gt;&lt;br&gt;&gt; 2.3. Relay measurements format&lt;br&gt;&gt;&lt;br&gt;&gt; It consists of \
zero or more relay_line with the measurement results&lt;br&gt;&gt; of relays in arbitrary \
order.&lt;br&gt;&gt;&lt;br&gt;&gt; There can be at most one relay_line per relay identity \
(fingerprint).&lt;br&gt;&gt;&lt;br&gt;&gt; There MUST NOT be multiple key_value pairs with the \
same key in the same&lt;br&gt;&gt; relay_line.&lt;br&gt;&gt;&lt;br&gt;&gt; Each relay_line MUST include \
the following key_value in arbitrary order:&lt;br&gt;&lt;br&gt;Do existing implementations accept \
arbitrary order here?&lt;br&gt;&lt;br&gt;&gt;     "node_id=" \
fingerprint&lt;br&gt;&gt;&lt;br&gt;&gt;         [Exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The \
fingerprint of the relay being measured.&lt;br&gt;&lt;br&gt;Suggestion: Add a field to hold the \
Ed25519 Identity of the relay being&lt;br&gt;measured.   Say that implementations SHOULD \
include both RSA fingerprint&lt;br&gt;and Ed25519 identity, and that implementations SHOULD \
accept lines that&lt;br&gt;contain at least one of them.&lt;br&gt;&lt;br&gt;&gt;     "bw=" \
bandwidth&lt;br&gt;&gt;&lt;br&gt;&gt;         [Exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The \
measured bandwidth of this relay.&lt;br&gt;&gt;&lt;br&gt;&gt;         Tor accepts zero \
bandwidths, but they trigger bugs in older Tor&lt;br&gt;&gt;         implementations. \
Therefore, implementations SHOULD NOT produce zero&lt;br&gt;&gt;         bandwidths. \
Instead, they SHOULD use one as their minimum bandwidth.&lt;br&gt;&gt;&lt;br&gt;&gt;         \
Multiple measurements can be aggregated using an averaging scheme, such&lt;br&gt;&gt;       \
as a mean, median, or decaying average.&lt;br&gt;&gt;&lt;br&gt;&gt;         Torflow scales \
bandwidths to kilobytes per second. Other implementations&lt;br&gt;&gt;         SHOULD use \
kilobytes per second for their initial bandwidth scaling.&lt;br&gt;&gt;&lt;br&gt;&gt;         If \
different implementations or configurations are used in votes for the&lt;br&gt;&gt;         \
same network, their measurements MAY need further scaling. See Appendix B&lt;br&gt;&gt;     \
for information about scaling, and one possible scaling method.&lt;br&gt;&gt;&lt;br&gt;&gt;     \
key_value&lt;br&gt;&gt;&lt;br&gt;&gt;         [Zero or more times.]&lt;br&gt;&lt;br&gt;Technically, this \
isn't a key_value, because a "value" is made of&lt;br&gt;ArgumentChar, and \
ArgumentChar can contain spaces.   So if we were&lt;br&gt;parsing&lt;br&gt;             \
"foo=abc bar=def"&lt;br&gt;we might be parsing either one key_value \
("foo", "abc bar=def") or two&lt;br&gt;("foo", \
"abc"), ("bar, "def").&lt;br&gt;&lt;br&gt;&gt;         Future format \
versions may include additional key_value pairs on a relay_line.&lt;br&gt;&gt;         \
Additional key_value pairs will be accompanied by a minor version \
increment.&lt;br&gt;&gt;&lt;br&gt;&gt;         Implementations MAY add additional relay key_value \
pairs as needed. This&lt;br&gt;&gt;         specification SHOULD be updated to avoid \
conflicting meanings for the&lt;br&gt;&gt;         same relay keys.&lt;br&gt;&gt;&lt;br&gt;&gt;         \
Parsers MUST NOT rely on the order of these additional key_value \
pairs.&lt;br&gt;&gt;&lt;br&gt;&gt;         Additional key_value pairs MUST NOT use any keywords \
specified in the&lt;br&gt;&gt;         header format.&lt;br&gt;&lt;br&gt;As above, let's say that a \
parser should ignore key_value entries with&lt;br&gt;keywords that it doesn't \
recognize.&lt;br&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;     If a relay line does not conform to this format, \
the line SHOULD be&lt;br&gt;&gt;     ignored by parsers.&lt;br&gt;&gt;&lt;br&gt;&gt; 2.4. \
Implementation notes&lt;br&gt;&gt;&lt;br&gt;&gt; 2.4.1. Simple Bandwidth Scanner&lt;br&gt;&gt;&lt;br&gt;&gt; \
Every relay measurement in sbws version 0.1.0 consists of:&lt;br&gt;&gt;&lt;br&gt;&gt;     \
"node_id=" fingerprint SP&lt;br&gt;&gt;&lt;br&gt;&gt;         As above.&lt;br&gt;&gt;&lt;br&gt;&gt; \
"bw=" bandwidth SP&lt;br&gt;&gt;&lt;br&gt;&gt;         As above.&lt;br&gt;&gt;&lt;br&gt;&gt;     \
"nick=" nickname SP&lt;br&gt;&gt;&lt;br&gt;&gt;         [Exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt; \
The relay nickname.&lt;br&gt;&gt;&lt;br&gt;&gt;     "rtt=" Int SP&lt;br&gt;&gt;&lt;br&gt;&gt;       \
[Exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The Round Trip Time in milliseconds to obtain \
1 byte of data.&lt;br&gt;&gt;&lt;br&gt;&gt;     "time=" timestamp NL&lt;br&gt;&gt;&lt;br&gt;&gt;    \
[Exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt;         The Unix Epoch time in seconds when the last \
measurement was performed.&lt;br&gt;&gt;&lt;br&gt;&gt; 2.4.2. Torflow&lt;br&gt;&gt;&lt;br&gt;&gt; Torflow \
relay lines include node_id and bw, and other key_value pairs [2].&lt;br&gt;&gt;&lt;br&gt;&gt; \
References:&lt;br&gt;&gt;&lt;br&gt;&gt; 1. &lt;a \
href="https://gitweb.torproject.org/torflow.git"&gt;https://gitweb.torproject.org/torflow.git&lt;/a&gt;&lt;br&gt;&gt; \
2. &lt;a href="https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority \
/README.spec.txt#n332"&gt;https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332&lt;/a&gt;&lt;br&gt;&gt; \
3. &lt;a href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt"&gt;https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt&lt;/a&gt;&lt;br&gt;&gt; \
4. &lt;a href="https://metrics.torproject.org/onionoo.html#details"&gt;https://metrics.torproject.org/onionoo.html#details&lt;/a&gt;&lt;br&gt;&gt; \
5. &lt;a href="https://semver.org/"&gt;https://semver.org/&lt;/a&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; A. Sample \
data&lt;br&gt;&gt;&lt;br&gt;&gt; The following has not been obtained from any real \
measurement.&lt;br&gt;&gt;&lt;br&gt;&gt; A.1. Generated by Torflow&lt;br&gt;&gt;&lt;br&gt;&gt; This an \
example version 1.0.0 document:&lt;br&gt;&gt;&lt;br&gt;&gt; 1523911758&lt;br&gt;&gt; \
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test \
measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719 \
pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577 circ_fail=0.2 \
scanner=/filepath&lt;br&gt;&gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 \
nick=Test2 measured_at=1523911623 updated_at=1523911623 pid_error=3.96703337994 \
pid_error_sum=3.96703337994 pid_bw=47422125 pid_delta=2.65469736988 circ_fail=0.0 \
scanner=/filepath&lt;br&gt;&gt;&lt;br&gt;&gt; A.2. Generated by sbws version \
0.1.0&lt;br&gt;&gt;&lt;br&gt;&gt; 1523911758&lt;br&gt;&gt; version=1.1.0&lt;br&gt;&gt; software=sbws&lt;br&gt;&gt; \
software_version=0.1.0&lt;br&gt;&gt; scanner_started=1523911756&lt;br&gt;&gt; \
earliest_measurement=1523911757&lt;br&gt;&gt;&lt;br&gt;&gt; \
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test rtt=380 \
time=1523911725&lt;br&gt;&gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 \
nick=Test2 rtt=378 time=1523911623&lt;br&gt;&gt;&lt;br&gt;&gt; B. Scaling \
bandwidths&lt;br&gt;&gt;&lt;br&gt;&gt; B.1. Scaling requirements&lt;br&gt;&gt;&lt;br&gt;&gt; Tor accepts zero \
bandwidths, but they trigger bugs in older Tor&lt;br&gt;&gt; implementations. Therefore, \
scaling methods SHOULD perform the&lt;br&gt;&gt; following checks:&lt;br&gt;&gt;   * If the total \
bandwidth is zero, all relays should be given equal&lt;br&gt;&gt;       bandwidths.&lt;br&gt;&gt; \
* If the scaled bandwidth is zero, it should be rounded up to one.&lt;br&gt;&gt;&lt;br&gt;&gt; \
Initial experiments indicate that scaling may not be needed for&lt;br&gt;&gt; torflow and \
sbws, because their measured bandwidths are similar&lt;br&gt;&gt; enough \
already.&lt;br&gt;&gt;&lt;br&gt;&gt; B.2. A linear scaling method&lt;br&gt;&gt;&lt;br&gt;&gt; If scaling is \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180504234225</emailId><senderName>Beard CryptoWorld</senderName><senderEmail>beard@cryptoworld.is</senderEmail><timestampReceived>2018-05-04 23:42:25-0400</timestampReceived><subject>[tor-dev] Tor Messenger recent IRC re-topic.</subject><body>

Hello Everyone,

We briefly talked about this idea of taking over Tor Messenger, a long 
with our own ideas and were asked to mail in some 
Documentation/Roadmaps. I'm asking in what form would you guys like to 
see this in?

Basically:

Would you like us to add a .txt as an attachment in a follow up email?
Or would it be better to host the files on our site, and allow people to 
read without subject to downloading anything?

Thank you,
~ Beard | https://twitter.com/beardlyness

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180517101114</emailId><senderName>Saurav Malani</senderName><senderEmail>sauravmalani1@gmail.com</senderEmail><timestampReceived>2018-05-17 10:11:14-0400</timestampReceived><subject>[tor-dev] Looking for an open project to contribute in TOR</subject><body>

[Attachment #2 (multipart/alternative)]


Hello Everyone,

I am Saurav Malani, 3rd year computer science student at IIIT-Hyderabad,
India. I applied for a project in TOR-SOP, but sadly my proposal was not
selected. But, still I would like to contribute to TOR. So, is there any
open project in which I can start contributing under the guidance of
appropriate mentor.

Thank you,
Saurav Malani

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;Hello \
Everyone,&lt;/span&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;I \
am Saurav Malani, 3rd year computer science student at IIIT-Hyderabad, India. I \
applied for a project in TOR-SOP, but sadly my proposal was not selected. But, still \
I would like to contribute to TOR. So, is there any open project in which I can start \
contributing under the guidance of appropriate mentor.&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;Thank \
you,&lt;/div&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8p \
x;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight \
:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white- \
space:normal;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;Saurav \
Malani&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180507140454</emailId><senderName>Sukhbir Singh</senderName><senderEmail>azadi@riseup.net</senderEmail><timestampReceived>2018-05-07 14:04:54-0400</timestampReceived><subject>Re: [tor-dev] Tor Messenger recent IRC re-topic.</subject><body>

Hi,

&gt; Hello Everyone,
&gt; 
&gt; We briefly talked about this idea of taking over Tor Messenger, a long with
&gt; our own ideas and were asked to mail in some Documentation/Roadmaps. I'm
&gt; asking in what form would you guys like to see this in?
&gt; 
&gt; Basically:
&gt; 
&gt; Would you like us to add a .txt as an attachment in a follow up email?
&gt; Or would it be better to host the files on our site, and allow people to
&gt; read without subject to downloading anything?

You can email the proposal to the mailing list.

Thanks,

-- 
Sukhbir
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180509120800</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-09 12:08:00-0400</timestampReceived><subject>[tor-dev] Tor Bandwidth List Format specification</subject><body>

Hi,

after nick, irl and teor reviewed the last version i sent [1], i paste
below a new version of the specification versions 1.1.0 and 1.0.0.
It's the same version as commit
https://github.com/juga0/torspec/commit/c7cdfd4fcb4b5623e1407e2bec38e9fdf7b70e6b.

The main question that came up was whether we should create a backwards
incompatible specification version 2.0.0.

Since right now it's faster to implement the version 1.1.0 of this
specification, and assuming that we can add the specification and the
code later, i'd propose to continue with 1.1.0.

I've asked dirauths about their opinion about this.

Thanks,
juga

[1] https://lists.torproject.org/pipermail/tor-dev/2018-May/013141.html
[2] https://lists.torproject.org/pipermail/tor-dev/2018-May/013154.html

-----------------------------------------------------------------------

                  Tor Bandwidth List Format
                            juga
                            teor

1. Scope and preliminaries

  This document describes the format of Tor's Bandwidth List,
  version 1.0.0, 1.1.0 and later.
  It is new specification for the existing format 1.0.0.
  Describes a new format 1.1.0, which is backwards compatible with
  1.0.0 parsers.

  Since Tor version 0.2.4.12-alpha the directory authorities use
  the Bandwidth List file called "V3BandwidthsFile" generated by
  Torflow [1]. The format is described in Torflow's README.spec.txt and
  is considered to be version 1.0.0.

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

1.2. Acknowledgements

  The original bandwidth generator (Torflow) and format was
  created by mike. Teor suggested to write this specification while
  contributing on pastly's new bandwidth generator implementation.

  This specification was revised after feedback from:

    Nick Mathewson (nickm)
    Iain Learmonth (irl)

1.3 Outline

  The Tor directory protocol (dir-spec.txt [3]) sections 3.4.1
  and 3.4.2, use the term bandwidth measurements, to refer to what
  here is called Bandwidth List.
  A Bandwidth List file contains information on relays' bandwidth
  capacities and is produced by bandwidth generators, previously known
  as bandwidth scanners.

1.4. Format Versions

   1.0.0 - The legacy fallback Bandwidth List format

   1.1.0 - Adds KeyValue Lines to the Header List section, add KeyValues
           to RelayLines and format versions.

  All Tor versions can consume format version 1.0.0.
  All Tor versions can consume format version 1.1.0,
  but they warn on additional header Lines.
  [TODO: this might be fixed, and if it is fixed should be said which
  version of Tor]

2. Format details

  The Bandwidth List MUST contain the following sections:
  - Header List (exactly once)
  - Relays' Bandwidth List (zero or more times)
  If it does not contain these sections, parsers SHOULD ignore the file.

2.1. Definitions

  The following nonterminals are defined in Tor directory protocol
  sections 1.2., 2.1.1., 2.1.3.:

    Int
    SP (space)
    NL (newline)
    Keyword
    ArgumentChar
    nickname
    hexdigest (a '$', followed by 40 hexadecimal characters
      ([A-Fa-f0-9]))

  Nonterminal defined section 2 of version-spec.txt [4]:

    version_number

  We define the following nonterminals:

    Line ::= ArgumentChar* NL
    RelayLine ::= KeyValue (SP KeyValue)* NL
    KeyValue ::= Keyword "=" Value
    Value ::= ArgumentCharValue+
    ArgumentCharValue ::= any printing ASCII character except NL and SP.
    Terminator ::= "====="
    Timestamp ::= Int
    Bandwidth ::= Int
    MasterKey ::= a base64-encoded Ed25519 public key, with
    padding characters omitted.
    DateTime ::= "YYYY-MM-DDTHH:MM:SS", as in ISO 8601

  Note that key_value and value are defined in Tor directory protocol
  with different formats to KeyValue and Value here.

  All Lines in the file MUST be 510 characters or less, to allow for the
  trailing newline and NULL characters.
  The previous limit was 254 characters in Tor 0.2.6.2-alpha and
  earlier.
  The parser MAY ignore longer Lines.
  [TODO: Change this restriction in 1.1.0 or later]

2.2. Header List format

Some header Lines MUST appear in specific positions, as documented
below.
All other Lines can appear in any order.
If a parser does not recognize any extra material in a header Line,
the Line MUST be ignored.
If a header Line does not conform to this format, the Line SHOULD be
ignored by parsers.

It consists of:

  Timestamp NL

    [At start, exactly once.]

    The Unix Epoch time in seconds when the file was created.
    It does not follow the KeyValue format for backwards
    compatibility with version 1.0.0.

  "version=" version_number NL

    [In second position, zero or one time.]

    The specification document format version.
    It uses semantic versioning [5].

    This Line has been added in version 1.1.0 of this specification.

    Version 1.0.0 documents do not contain this Line, and the
    version_number is considered to be "1.0.0".

  "software=" Value NL

    [Zero or one time.]

    The name of the software that created the document.

    This Line has been added in version 1.1.0 of this specification.

    Version 1.0.0 documents do not contain this Line, and the software
    is considered to be "torflow".

  "software_version=" Value NL

    [Zero or one time.]

    The version of the software that created the document.
    The version may be a version_number, a git commit, or some other
    version scheme.

    This Line has been added in version 1.1.0 of this specification.

  "generator_started=" DateTime NL

    [Zero or one time.]

    The date and time timestamp in ISO 8601 format and UTC time zone
    when the generator started.

    This Line has been added in version 1.1.0 of this specification.

  "earliest_bandwidth=" DateTime NL

    [Zero or one time.]

    The date and time timestamp in ISO 8601 format and UTC time zone
    when the first relay bandwidth was obtained.

    This Line has been added in version 1.1.0 of this specification.

  KeyValue NL

    [Zero or more times.]

    There MUST NOT be multiple KeyValue header Lines with the same key.
    If there are, the parser SHOULD choose an arbitrary Line.

    If a parser does not recognize a Keyword in a KeyValue Line, it
    MUST be ignored.

    Future format versions may include additional KeyValue header Lines.
    Additional header Lines will be accompanied by a minor version
    increment.

    Implementations MAY add additional header Lines as needed. This
    specification SHOULD be updated to avoid conflicting meanings for
    the same header keys.

    Parsers MUST NOT rely on the order of these additional Lines.

    Additional header Lines MUST NOT use any keywords specified in the
    relay measurements format.
    If there are, the parser MAY ignore conflicting keywords.

  Terminator NL

    [Zero or one time.]

    The Header List section ends with this Terminator.

    In version 1.0.0, Header List ends when the first relay bandwidth
    is found conforming to the next section.
    Implementations of version 1.1.0 SHOULD include this Line.

2.3. Relays' Bandwidth List format

It consists of zero or more RelayLines with the relays' bandwidth
in arbitrary order.

There MUST NOT be multiple KeyValue pairs with the same key in the same
RelayLine.
If there are, the parser SHOULD choose an arbitrary Value.

There MUST NOT be multiple RelayLine per relay identity (node_id or
master_key_ed25519).
If there are, parsers SHOULD issue a warning and MAY choose an arbitrary
value or ignore both values.

If a parser does not recognize any extra material in a RelayLine,
the extra material MUST be ignored.

Each RelayLine MUST include the following KeyValue pairs:
In version 1.0.0, node_id MUST NOT be at the end of the Line.
In version 1.1.0, the KeyValue can be in any arbitrary order.
[TODO: list of Tor version that support it, when it's done]

  "node_id=" hexdigest

    [Exactly once.]

    The fingerprint for the relay's RSA identity key.

  "master_key_ed25519=" MasterKey

    [Zero or one time.]

    The relays's master Ed25519 key, base64 encoded,
    without trailing "="s, to avoid ambiguity with KeyValue "="
    character.

    Implementations of version 1.1.0 SHOULD include both node_id and
    master_key_ed25519.
    Parsers SHOULD accept Lines that contain at least one of them.

  "bw=" Bandwidth

    [Exactly once.]

    The measured bandwidth of this relay.

    Tor accepts zero bandwidths, but they trigger bugs in older Tor
    implementations. Therefore, implementations SHOULD NOT produce zero
    bandwidths. Instead, they SHOULD use one as their minimum bandwidth.
    If there are zero bandwidths, the parser MAY ignore them.

    Multiple measurements can be aggregated using an averaging scheme,
    such as a mean, median, or decaying average.

    Torflow scales bandwidths to kilobytes per second. Other
    implementations SHOULD use kilobytes per second for their initial
    bandwidth scaling.

    If different implementations or configurations are used in votes for
    the same network, their measurements MAY need further scaling. See
    Appendix B for information about scaling, and one possible scaling
    method.

  KeyValue

    [Zero or more times.]

    Future format versions may include additional KeyValue pairs on a
    RelayLine.
    Additional KeyValue pairs will be accompanied by a minor version
    increment.

    Implementations MAY add additional relay KeyValue pairs as needed.
    This specification SHOULD be updated to avoid conflicting meanings
    for the same Keywords.

    Parsers MUST NOT rely on the order of these additional KeyValue
    pairs.

    Additional KeyValue pairs MUST NOT use any keywords specified in the
    header format.
    If there are, the parser MAY ignore conflicting keywords.

2.4. Implementation notes

KeyValue pairs in RelayLines that current implementations generate.

2.4.1. Simple Bandwidth Scanner

Every RelayLine in sbws version 0.1.0 consists of:

  "node_id=" hexdigest SP

    As above.

  "bw=" Bandwidth SP

    As above.

  "nick=" nickname SP

    [Exactly once.]

    The relay nickname.

  "rtt=" Int SP

    [Exactly once.]

    The Round Trip Time in milliseconds to obtain 1 byte of data.

  "time=" DateTime NL

    [Exactly once.]

    The date and time timestamp in ISO 8601 format and UTC time zone
    when the last bandwidth was obtained.

2.4.2. Torflow

Torflow RelayLines include node_id and bw, and other KeyValue pairs [2].

References:

1. https://gitweb.torproject.org/torflow.git
2.
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
4. https://gitweb.torproject.org/torspec.git/tree/version-spec.txt
5. https://semver.org/

A. Sample data

The following has not been obtained from any real measurement.

A.1. Generated by Torflow

This an example version 1.0.0 document:

1523911758
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
circ_fail=0.2 scanner=/filepath
node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
measured_at=1523911623 updated_at=1523911623 pid_error=3.96703337994
pid_error_sum=3.96703337994 pid_bw=47422125 pid_delta=2.65469736988
circ_fail=0.0 scanner=/filepath

A.2. Generated by sbws version 0.1.X
[TODO: this needs to be implemented when this spec is finished]

1523911758
version=1.1.0
software=sbws
software_version=0.1.0
generator_started=2018-05-08T16:13:25
earliest_bandwidth=2018-05-08T16:13:26
====
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80
master_key_ed25519=YaqV4vbvPYKucElk297eVdNArDz9HtIwUoIeo0+cVIpQ bw=760
nick=Test rtt=380 time=2018-05-08T16:13:26
node_id=$96C15995F30895689291F455587BD94CA427B6FC
master_key_ed25519=a6a+dZadrQBtfSbmQkP7j2ardCmLnm5NJ4ZzkvDxbo0I bw=189
nick=Test2 rtt=378 time=2018-05-08T16:13:36

B. Scaling bandwidths

B.1. Scaling requirements

Tor accepts zero bandwidths, but they trigger bugs in older Tor
implementations. Therefore, scaling methods SHOULD perform the
following checks:
 * If the total bandwidth is zero, all relays should be given equal
   bandwidths.
 * If the scaled bandwidth is zero, it should be rounded up to one.

Initial experiments indicate that scaling may not be needed for
torflow and sbws, because their measured bandwidths are similar
enough already.

B.2. A linear scaling method

If scaling is required, here is a simple linear bandwith scaling
method, which ensures that all bandwidth votes contain approximately
the same total bandwidth:

1. Calculate the relay quota by dividing the total measured bandwidth
   in all votes, by the number of relays with measured bandwidth
   votes. In the public tor network, this is approximately 7500 as of
   April 2018. The quota should be a consensus parameter, so it can be
   adjusted for all generators on the network.

2. Calculate a vote quota by multiplying the relay quota by the number
   of relays this bandwidth authority has measured
   bandwidths for.

3. Calculate a scaling factor by dividing the vote quota by the
   total unscaled measured bandwidth in this bandwidth
   authority's upcoming vote.

4. Multiply each unscaled measured bandwidth by the scaling
   factor.

Now, the total scaled bandwidth in the upcoming vote is
approximately equal to the quota.

B.3. Quota changes

If all generators are using scaling, the quota can be gradually
reduced or increased as needed. Smaller quotas decrease the size
of uncompressed consensuses, and may decrease the size of
consensus diffs and compressed consensuses. But if the relay
quota is too small, some relays may be over- or under-weighted.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180518165616</emailId><senderName>Chad Retz</senderName><senderEmail>chad.retz@gmail.com</senderEmail><timestampReceived>2018-05-18 16:56:16-0400</timestampReceived><subject>[tor-dev] Bine - Go library for using and embedding Tor into applications</subject><body>

I posted it on /r/TOR but figured I'd post it here too:
https://github.com/cretz/bine

I built it because I have plans to use it in another project. In
general it does what Stem does. I did incorporate V3 onion service
generation in there and am happy to say it publishes much faster.
Also, I have the option to statically compile Tor using the fairly new
embedding API (i.e. tor_api.h). I've only tested it on Windows (see
https://github.com/cretz/tor-static) but I figure that's the hardest
of them to get working anyways. Thoughts/questions welcome.

Chad
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180519163900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-05-19 16:39:00-0400</timestampReceived><subject>[tor-dev] DNS-over-HTTPS (DOH) in Firefox/Torbrowser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

since Mozilla did tests [0] on DOH [1] in Firefox I was wondering
if Torbrowser developers have put any thought into that as well?

Note: I'm _not_ suggesting to use DOH in torbrowser I'm just asking because 
the answer probably matters for exit documentation in the relay guide 
if clients do DNS themselves over TCP connections instead of relying on the exit
(even if torbrowser is not the only tor client).

thanks,
nusenu




[0] https://www.ghacks.net/2018/03/20/firefox-dns-over-https-and-a-worrying-shield-study/
[1] https://datatracker.ietf.org/doc/draft-hoffman-dns-over-https/

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180519224858</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-19 22:48:58-0400</timestampReceived><subject>Re: [tor-dev] DNS-over-HTTPS (DOH) in Firefox/Torbrowser</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 20 May 2018, at 02:39, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; since Mozilla did tests [0] on DOH [1] in Firefox I was wondering
&gt; if Torbrowser developers have put any thought into that as well?
&gt; 
&gt; Note: I'm _not_ suggesting to use DOH in torbrowser I'm just asking because 
&gt; the answer probably matters for exit documentation in the relay guide 
&gt; if clients do DNS themselves over TCP connections instead of relying on the exit
&gt; (even if torbrowser is not the only tor client).
&gt; 
&gt; thanks,
&gt; nusenu
&gt; 
&gt; 
&gt; 
&gt; 
&gt; [0] https://www.ghacks.net/2018/03/20/firefox-dns-over-https-and-a-worrying-shield-study/
&gt; [1] https://datatracker.ietf.org/doc/draft-hoffman-dns-over-https/

The latest version of the spec is:
https://datatracker.ietf.org/doc/draft-ietf-doh-dns-over-https/

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 20 May \
2018, at 02:39, nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;since Mozilla did tests [0] on \
DOH [1] in Firefox I was wondering&lt;/span&gt;&lt;br&gt;&lt;span&gt;if Torbrowser developers have put \
any thought into that as well?&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Note: I'm _not_ \
suggesting to use DOH in torbrowser I'm just asking because &lt;/span&gt;&lt;br&gt;&lt;span&gt;the \
answer probably matters for exit documentation in the relay guide &lt;/span&gt;&lt;br&gt;&lt;span&gt;if \
clients do DNS themselves over TCP connections instead of relying on the \
exit&lt;/span&gt;&lt;br&gt;&lt;span&gt;(even if torbrowser is not the only tor \
client).&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;thanks,&lt;/span&gt;&lt;br&gt;&lt;span&gt;nusenu&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;[0] \
&lt;a href="https://www.ghacks.net/2018/03/20/firefox-dns-over-https-and-a-worrying-shiel \
d-study/"&gt;https://www.ghacks.net/2018/03/20/firefox-dns-over-https-and-a-worrying-shield-study/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;[1] \
&lt;a href="https://datatracker.ietf.org/doc/draft-hoffman-dns-over-https/"&gt;https://datat \
racker.ietf.org/doc/draft-hoffman-dns-over-https/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;The \
latest version of the spec is:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://datatracker.ietf.org/doc/draft-ietf-doh-dns-over-https/"&gt;https://datatra \
cker.ietf.org/doc/draft-ietf-doh-dns-over-https/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180523173017</emailId><senderName>Gisle Vanem</senderName><senderEmail>gisle.vanem@gmail.com</senderEmail><timestampReceived>2018-05-23 17:30:17-0400</timestampReceived><subject>[tor-dev] Abort in test_bridges.c</subject><body>

Running 'test.exe bridges/clear_bridge_list' causes this assertion:

   bridges/clear_bridge_list: May 23 17:12:53.714 [err] tor_assertion_failed_():
   Bug: container.h:70: smartlist_get: Assertion sl-&gt;num_used &gt; idx failed;

AFAICS, since 'sweep_bridge_list()' caused all entries in
'bridgelist' to get deleted, an index of zero is illegal.
Don't ask me why.

And since 'smartlist_get(bridgelist,0)' should be compiled with
'-DDEBUG_SMARTLIST' in all tests/*.c sources. No?

I'm on Win-10, tor.exe + libs was built with MSVC 2017.

-- 
--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180527145041</emailId><senderName>Stelios Barberakis</senderName><senderEmail>chefarov@gmail.com</senderEmail><timestampReceived>2018-05-27 14:50:41-0400</timestampReceived><subject>[tor-dev] [TSoP 2018] Ahmia status update #1</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

This is an update report for ahmia project, as part of the Tor Summer of
Privacy 2018.

The first two weeks I have been working on updating and slightly improving
the codebase of *ahmia-site, ahmia-index, ahmia-crawler* subprojects. More
specifically:

* Updating python packages and adding python3 support (default version from
now on), to have a clean building process.
* Prettifying the code towards pep8 compliance
* Fixing some minor issues, like unresolved references, substitude
deprecated methods, etc
* Separating code from configuration by introducing environment variables
approach through python-decouple.

The already pushed commits can be found at the corresponding github
repositories [1] &lt;https://github.com/ahmia/ahmia-site/commits/tsop18&gt;, [2
&lt;https://github.com/ahmia/ahmia-crawler/commits/tsop18&gt;], [3
&lt;https://github.com/ahmia/ahmia-index/commits/tsop18&gt;].

I am going to discuss tomorrow with the mentors and anyone else that might
be interested, on #ahmia channel at OFTC, on how to proceed (what to
implement next).

Best Regards,
Stelios


-- 
PGP key:
http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;Hello \
all,&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This is an update report for ahmia project, as part of the Tor \
Summer of Privacy 2018.&lt;br&gt;&lt;br&gt;&lt;/div&gt;The first two weeks I have been working on \
updating and slightly improving the codebase of &lt;i&gt;ahmia-site, ahmia-index, \
ahmia-crawler&lt;/i&gt; subprojects. More specifically:&lt;br&gt;&lt;br&gt;&lt;/div&gt;* Updating python \
packages and adding python3 support (default version from now on), to have a clean \
building process.&lt;br&gt;&lt;/div&gt;* Prettifying the code towards pep8 compliance&lt;br&gt;&lt;/div&gt;* \
Fixing some minor issues, like unresolved references, substitude deprecated methods, \
etc&lt;br&gt;&lt;/div&gt;* Separating code from configuration by introducing environment \
variables approach through python-decouple.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The already pushed \
commits can be found at the corresponding github repositories &lt;a \
href="https://github.com/ahmia/ahmia-site/commits/tsop18" target="_blank"&gt;[1]&lt;/a&gt;, \
[&lt;a href="https://github.com/ahmia/ahmia-crawler/commits/tsop18" \
target="_blank"&gt;2&lt;/a&gt;], [&lt;a \
href="https://github.com/ahmia/ahmia-index/commits/tsop18" \
target="_blank"&gt;3&lt;/a&gt;].&lt;br&gt;&lt;span \
id="gmail-m_2798590934721727205goog_82530315"&gt;&lt;/span&gt;&lt;a href="http:///" \
target="_blank"&gt;&lt;/a&gt;&lt;span \
id="gmail-m_2798590934721727205goog_82530316"&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;I  am going to discuss \
tomorrow with the mentors and anyone else that  might be interested, on #ahmia \
channel at OFTC, on how to proceed (what  to implement next).&lt;br&gt;&lt;br&gt;&lt;/div&gt;Best \
Regards,&lt;br&gt;&lt;/div&gt;Stelios&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;font size="3" color="#333333" \
face="Helvetica Neue, Helvetica, Arial, sans-serif"&gt;PGP key:  &lt;a \
href="http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998" \
target="_blank"&gt;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998&lt;/a&gt;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
 &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180528101021</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-28 10:10:21-0400</timestampReceived><subject>[tor-dev] Proposal 292: Mesh-based vanguards</subject><body>

Hello list,

here is the vanguard proposal that supersedes proposal 247.

It specifies the newest vanguard design which we've been working on:
   https://github.com/mikeperry-tor/vanguards

FWIW, the above project is still in experimental state and we are
expecting to launch it officially in the short term future. Until then,
feel free to experiment with it if you feel like it.

Check out the proposal and code and let us know if you have any
questions or feedback!

Thanks!

---

Filename: 292-mesh-vanguards.txt
Title: Mesh-based vanguards
Authors: George Kadianakis and Mike Perry
Created: 2018-05-08
Status: Open
Supersedes: 247

0. Motivation

  A guard discovery attack allows attackers to determine the guard
  node of a Tor client. The hidden service rendezvous protocol
  provides an attack vector for a guard discovery attack since anyone
  can force an HS to construct a 3-hop circuit to a relay (#9001).

  Following the guard discovery attack with a compromise and/or
  coercion of the guard node can lead to the deanonymization of a
  hidden service.

1. Overview

  This document tries to make the above guard discovery + compromise
  attack harder to launch. It introduces a configuration
  option which makes the hidden service also pin the second and third
  hops of its circuits for a longer duration.

  With this new path selection, we force the adversary to perform a
  Sybil attack and two compromise attacks before succeeding. This is
  an improvement over the current state where the Sybil attack is
  trivial to pull off, and only a single compromise attack is required.

  With this new path selection, an attacker is forced to do a one or
  more node compromise attacks before learning the guard node of a hidden
  service. This increases the uncertainty of the attacker, since
  compromise attacks are costly and potentially detectable, so an
  attacker will have to think twice before beginning a chain of node
  compromise attacks that they might not be able to complete.

1.1. Tor integration

  The mechanisms introduced in this proposal are currently implemented
  partially in Tor and partially through an external Python script:
            https://github.com/mikeperry-tor/vanguards

  The Python script uses the new Tor configuration options HSLayer2Nodes and
  HSLayer3Nodes to be able to select nodes for the guard layers. The Python
  script is tasked with maintaining and rotating the guard nodes as needed
  based on the lifetimes described in this proposal.

  In the future, we are aiming to include the whole functionality into Tor,
  with no need for external scripts.

1.2. Visuals

  Here is how a hidden service rendezvous circuit currently looks like:

                     -&gt; middle_1 -&gt; middle_A
                     -&gt; middle_2 -&gt; middle_B
                     -&gt; middle_3 -&gt; middle_C
                     -&gt; middle_4 -&gt; middle_D
       HS -&gt; guard   -&gt; middle_5 -&gt; middle_E
                     -&gt; middle_6 -&gt; middle_F
                     -&gt; middle_7 -&gt; middle_G
                     -&gt; middle_8 -&gt; middle_H
                     -&gt;   ...    -&gt;  ...
                     -&gt; middle_n -&gt; middle_n

  this proposal pins the two middle positions into a much more
  restricted sets, as follows:

                       -&gt; guard_2A
                                   -&gt; guard_3A
          -&gt; guard_1A  -&gt; guard_2B -&gt; guard_3B
       HS                          -&gt; guard_3C
          -&gt; guard_1B  -&gt; guard_2C -&gt; guard_3D
                                   -&gt; guard_3E
                       -&gt; guard_2D -&gt; guard_3F

  Additionally, to avoid linkability, we insert an extra middle node
  after the third layer guard for client side intro and hsdir circuits,
  and service-side rendezvous circuits. This means that the set of
  paths for Client (C) and Service (S) side look like this:

     C - G - L2 - L3 - R
     S - G - L2 - L3 - HSDIR
     S - G - L2 - L3 - I
     C - G - L2 - L3 - M - I
     C - G - L2 - L3 - M - HSDIR
     S - G - L2 - L3 - M - R

1.3. Threat model, Assumptions, and Goals

  Consider an adversary with the following powers:

     - Can launch a Sybil guard discovery attack against any node of a
       rendezvous circuit. The slower the rotation period of the node,
       the longer the attack takes. Similarly, the higher the percentage
       of the network is compromised, the faster the attack runs.

     - Can compromise any node on the network, but this compromise takes
       time and potentially even coercive action, and also carries risk
       of discovery.

  We also make the following assumptions about the types of attacks:

  1. A Sybil attack is observable by both people monitoring the network
     for large numbers of new nodes, as well as vigilant hidden service
     operators. It will require either large amounts of traffic sent
     towards the hidden service, multiple test circuits, or both.

  2. A Sybil attack against the second or first layer Guards will be
     more noisy than a Sybil attack against the third layer guard, since the
     second and first layer Sybil attack requires a timing side channel in
     order to determine success, whereas the Sybil success is almost
     immediately obvious to third layer guard, since it will be instructed
     to connect to a cooperating malicious rend point by the adversary.

  3. As soon as the adversary is confident they have won the Sybil attack,
     an even more aggressive circuit building attack will allow them to
     determine the next node very fast (an hour or less).

  4. The adversary is strongly disincentivized from compromising nodes that
     may prove useless, as node compromise is even more risky for the
     adversary than a Sybil attack in terms of being noticed.

  Given this threat model, our security parameters were selected so that
  the first two layers of guards should be hard to attack using a Sybil
  guard discovery attack and hence require a node compromise attack. Ideally,
  we want the node compromise attacks to carry a non-negligible probability of
  being useless to the adversary by the time they complete.

  On the other hand, the outermost layer of guards should rotate fast enough to
  _require_ a Sybil attack.

  See our vanguard simulator project for a simulation of the above adversary
  model and a motivation for the parameters selected within this proposal:
        https://github.com/asn-d6/vanguard_simulator
        https://github.com/asn-d6/vanguard_simulator/wiki/Optimizing-vanguard-topologies


2. Design

  When a hidden service picks its guard nodes, it also picks an
  additional NUM_LAYER2_GUARDS-sized set of middle nodes for its
  `second_guard_set`, as well as a NUM_LAYER3_GUARDS-sized set of
  middle nodes for its `third_guard_set`.

  When a hidden service needs to establish a circuit to an HSDir,
  introduction point or a rendezvous point, it uses nodes from
  `second_guard_set` as the second hop of the circuit and nodes from
  `third_guard_set` as third hop of the circuit.

  A hidden service rotates nodes from the 'second_guard_set' at a random
  time between MIN_SECOND_GUARD_LIFETIME hours and
  MAX_SECOND_GUARD_LIFETIME hours.

  A hidden service rotates nodes from the 'third_guard_set' at a random
  time between MIN_THIRD_GUARD_LIFETIME and MAX_THIRD_GUARD_LIFETIME
  hours.

  Each node's rotation time is tracked independently, to avoid disclosing
  the rotation times of the primary and second-level guards.

2.1. Security parameters

  We set NUM_LAYER2_GUARDS to 4 nodes and NUM_LAYER3_GUARDS to 6 nodes.

  We set MIN_SECOND_GUARD_LIFETIME to 1 day, and MAX_SECOND_GUARD_LIFETIME
  to 45 days inclusive, for an average rotation rate of 29.5 days, using
  the max(X,X) distribution specified in Section 3.3.

  We set MIN_THIRD_GUARD_LIFETIME to 1 hour, and MAX_THIRD_GUARD_LIFETIME
  to 48 hours inclusive, for an average rotation rate of 31.5 hours, using
  the max(X,X) distribution specified in Section 3.3.

  See Section 3 for more analysis on these constants.

2.2. Path restriction changes

  In order to avoid information leaks and ensure paths can be built, path
  restrictions must be loosened.

  In particular, we allow the following:
     1. Nodes from the same /16 and same family for any/all hops
     2. Guard nodes can be chosen for RP/IP/HSDIR
     3. Guard nodes can be chosen for hop before RP/IP/HSDIR.

  The first change prevents the situation where paths cannot be built if two
  layers all share the same subnet and/or node family. It also prevents the
  the use of a different entry guard based on the family or subnet of the
  IP, HSDIR, or RP.

  The second change prevents an adversary from forcing the use of a different
  entry guard by enumerating all guard-flaged nodes as the RP.

  The third change prevents an adversary from learning the guard node by way
  of noticing which nodes were not chosen for the hop before it.


3. Rationale and Security Parameter Selection

3.1. Sybil rotation counts for a given number of Guards

  The probability of Sybil success for Guard discovery can be modeled as
  the probability of choosing 1 or more malicious middle nodes for a
  sensitive circuit over some period of time.

  P(At least 1 bad middle) = 1 - P(All Good Middles)
                           = 1 - P(One Good middle)^(num_middles)
                           = 1 - (1 - c/n)^(num_middles)

  c/n is the adversary compromise percentage

  In the case of Vanguards, num_middles is the number of Guards you rotate
  through in a given time period. This is a function of the number of vanguards
  in that position (v), as well as the number of rotations (r).

  P(At least one bad middle) = 1 - (1 - c/n)^(v*r)

  Here's detailed tables in terms of the number of rotations required for
  a given Sybil success rate for certain number of guards.

  1.0% Network Compromise:
   Sybil Success   One   Two  Three  Four  Five  Six  Eight  Nine  Ten  Twelve  Sixteen
    10%            11     6     4     3     3     2     2     2     2     1       1
    15%            17     9     6     5     4     3     3     2     2     2       2
    25%            29    15    10     8     6     5     4     4     3     3       2
    50%            69    35    23    18    14    12     9     8     7     6       5
    60%            92    46    31    23    19    16    12    11    10     8       6
    75%           138    69    46    35    28    23    18    16    14    12       9
    85%           189    95    63    48    38    32    24    21    19    16      12
    90%           230   115    77    58    46    39    29    26    23    20      15
    95%           299   150   100    75    60    50    38    34    30    25      19
    99%           459   230   153   115    92    77    58    51    46    39      29

  5.0% Network Compromise:
   Sybil Success   One   Two  Three  Four  Five  Six  Eight  Nine  Ten  Twelve  Sixteen
    10%             3     2     1     1     1     1     1     1     1     1       1
    15%             4     2     2     1     1     1     1     1     1     1       1
    25%             6     3     2     2     2     1     1     1     1     1       1
    50%            14     7     5     4     3     3     2     2     2     2       1
    60%            18     9     6     5     4     3     3     2     2     2       2
    75%            28    14    10     7     6     5     4     4     3     3       2
    85%            37    19    13    10     8     7     5     5     4     4       3
    90%            45    23    15    12     9     8     6     5     5     4       3
    95%            59    30    20    15    12    10     8     7     6     5       4
    99%            90    45    30    23    18    15    12    10     9     8       6

  10.0% Network Compromise:
   Sybil Success   One   Two  Three  Four  Five  Six  Eight  Nine  Ten  Twelve  Sixteen
    10%             2     1     1     1     1     1     1     1     1     1       1
    15%             2     1     1     1     1     1     1     1     1     1       1
    25%             3     2     1     1     1     1     1     1     1     1       1
    50%             7     4     3     2     2     2     1     1     1     1       1
    60%             9     5     3     3     2     2     2     1     1     1       1
    75%            14     7     5     4     3     3     2     2     2     2       1
    85%            19    10     7     5     4     4     3     3     2     2       2
    90%            22    11     8     6     5     4     3     3     3     2       2
    95%            29    15    10     8     6     5     4     4     3     3       2
    99%            44    22    15    11     9     8     6     5     5     4       3

  The rotation counts in these tables were generated with:
     def num_rotations(c, v, success):
       r = 0
       while 1-math.pow((1-c), v*r) &lt; success: r += 1
       return r

3.2. Rotation Period

  As specified in Section 1.2, the primary driving force for the third
  layer selection was to ensure that these nodes rotate fast enough that
  it is not worth trying to compromise them, because it is unlikely for
  compromise to succeed and yield useful information before the nodes stop
  being used.

  From the table in Section 3.1, with NUM_LAYER2_GUARDS=4 and
  NUM_LAYER3_GUARDS=6, it can be seen that this means that the Sybil attack
  on layer3 will complete with 50% chance in 12*31.5 hours (15.75 days)
  for the 1% adversary, ~4 days for the 5% adversary, and 2.62 days for the
  10% adversary.

  Since rotation of each node happens independently, the distribution of
  when the adversary expects to win this Sybil attack in order to discover
  the next node up is uniform. This means that on average, the adversary
  should expect that half of the rotation period of the next node is already
  over by the time that they win the Sybil.

  With this fact, we choose our range and distribution for the second
  layer rotation to be short enough to cause the adversary to risk
  compromising nodes that are useless, yet long enough to require a
  Sybil attack to be noticeable in terms of client activity. For this
  reason, we choose a minimum second-layer guard lifetime of 1 day,
  since this gives the adversary a minimum expected value of 12 hours for
  during which they can compromise a guard before it might be rotated.
  If the total expected rotation rate is 29.5 days, then the adversary can
  expect overall to have 14.75 days remaining after completing their Sybil
  attack before a second-layer guard rotates away.

3.3. Rotation distributions

  In order to skew the distribution of the third layer guard towards
  higher values, we use max(X,X) for the distribution, where X is a
  random variable that takes on values from the uniform distribution.

  Here's a table of expectation (arithmetic means) for relevant
  ranges of X (sampled from 0..N-1). The table was generated with the
  following python functions:

  def ProbMinXX(N, i): return (2.0*(N-i)-1)/(N*N)
  def ProbMaxXX(N, i): return (2.0*i+1)/(N*N)

  def ExpFn(N, ProbFunc):
    exp = 0.0
    for i in xrange(N): exp += i*ProbFunc(N, i)
    return exp

  The current choice for second-layer guards is noted with **, and
  the current choice for third-layer guards is noted with ***.

   Range  Min(X,X)   Max(X,X)
   40      12.84       26.16
   41      13.17       26.83
   42      13.50       27.50
   43      13.84       28.16
   44      14.17       28.83
   45      14.50       29.50**
   46      14.84       30.16
   47      15.17       30.83
   48      15.50       31.50***

  The Cumulative Density Function (CDF) tells us the probability that a
  guard will no longer be in use after a given number of time units have
  passed.

  Because the Sybil attack on the third node is expected to complete at any
  point in the second node's rotation period with uniform probability, if we
  want to know the probability that a second-level Guard node will still be in
  use after t days, we first need to compute the probability distribution of
  the rotation duration of the second-level guard at a uniformly random point
  in time. Let's call this P(R=r).

  For P(R=r), the probability of the rotation duration depends on the selection
  probability of a rotation duration, and the fraction of total time that
  rotation is likely to be in use. This can be written as:

  P(R=r) = ProbMaxXX(X=r)*r / \sum_{i=1}^N ProbMaxXX(X=i)*i

  or in Python:

  def ProbR(N, r, ProbFunc=ProbMaxXX):
     return ProbFunc(N, r)*r/ExpFn(N, ProbFunc)

  For the full CDF, we simply sum up the fractional probability density for
  all rotation durations. For rotation durations less than t days, we add the
  entire probability mass for that period to the density function. For
  durations d greater than t days, we take the fraction of that rotation
  period's selection probability and multiply it by t/d and add it to the
  density. In other words:

  def FullCDF(N, t, ProbFunc=ProbR):
    density = 0.0
    for d in xrange(N):
      if t &gt;= d: density += ProbFunc(N, d)
      # The +1's below compensate for 0-indexed arrays:
      else: density += ProbFunc(N, d)*(float(t+1))/(d+1)
    return density

  Computing this yields the following distribution for our current parameters:

   t          P(SECOND_ROTATION &lt;= t)
   1               0.03247
   2               0.06494
   3               0.09738
   4               0.12977
   5               0.16207
  10               0.32111
  15               0.47298
  20               0.61353
  25               0.73856
  30               0.84391
  35               0.92539
  40               0.97882
  45               1.00000

  This CDF tells us that for the second-level Guard rotation, the
  adversary can expect that 3.3% of the time, their third-level Sybil
  attack will provide them with a second-level guard node that has only
  1 day remaining before it rotates. 6.5% of the time, there will
  be only 2 day or less remaining, and 9.7% of the time, 3 days or less.

  Note that this distribution is still a day-resolution approximation.


4. Security concerns and mitigations

4.1. Mitigating fingerprinting of new HS circuits

  By pinning the middle nodes of rendezvous circuits, we make it
  easier for all hops of the circuit to detect that they are part of a
  special hidden service circuit with varying degrees of certainty.

  The Guard node is able to recognize a Vanguard client with a high
  degree of certainty because it will observe a client IP creating the
  overwhelming majority of its circuits to just a few middle nodes in
  any given 31.5 day time period.

  The middle nodes will be able to tell with a variable certainty that
  depends on both its traffic volume and upon the popularity of the
  service, because they will see a large number of circuits that tend to
  pick the same Guard and Exit.

  The final nodes will be able to tell with a similar level of certainty
  that depends on their capacity and the service popularity, because they
  will see a lot of handshakes that all tend to have the same second
  hops.

  The most serious of these is the Guard fingerprinting issue. When
  proposal 254-padding-negotiation is implemented, services that enable
  this feature should use those padding primitives to create fake circuits
  to random middle nodes that are not their guards, in an attempt to look
  more like a client.

  Additionally, if Tor Browser implements "virtual circuits" based on
  SOCKS username+password isolation in order to enforce the re-use of
  paths when SOCKS username+passwords are re-used, then the number of
  middle nodes in use during a typical user's browsing session will be
  proportional to the number of sites they are viewing at any one time.
  This is likely to be much lower than one new middle node every ten
  minutes, and for some users, may be close to the number of Vanguards
  we're considering.

  This same reasoning is also an argument for increasing the number of
  second-level guards beyond just two, as it will spread the hidden
  service's traffic over a wider set of middle nodes, making it both
  easier to cover, and behave closer to a client using SOCKS virtual
  circuit isolation.

5. Default vs optional behavior

  We suggest this torrc option to be optional because it changes path
  selection in a way that may seriously impact hidden service performance,
  especially for high traffic services that happen to pick slow guard
  nodes.

  However, by having this setting be disabled by default, we make hidden
  services who use it stand out a lot. For this reason, we should in fact
  enable this feature globally, but only after we verify its viability for
  high-traffic hidden services, and ensure that it is free of second-order
  load balancing effects.

  Even after that point, until Single Onion Services are implemented,
  there will likely still be classes of very high traffic hidden services
  for whom some degree of location anonymity is desired, but for which
  performance is much more important than the benefit of Vanguards, so there
  should always remain a way to turn this option off.

  In the meantime, a reference implementation is available at:
  https://github.com/mikeperry-tor/vanguards/blob/master/vanguards/vanguards.py


Appendix A: Full Python program for generating tables in this proposal

#!/usr/bin/python
import math

############ Section 3.1 #################
def num_rotations(c, v, success):
  i = 0
  while 1-math.pow((1-c), v*i) &lt; success: i += 1
  return i

def rotation_line(c, pct):
  print "    %2d%%        %6d%6d%6d%6d%6d%6d%6d%6d%6d%6d%8d" % \
     (pct, num_rotations(c, 1, pct/100.0), num_rotations(c, 2, pct/100.0), \
      num_rotations(c, 3, pct/100.0), num_rotations(c, 4, pct/100.0),
      num_rotations(c, 5, pct/100.0), num_rotations(c, 6, pct/100.0),
      num_rotations(c, 8, pct/100.0), num_rotations(c, 9, pct/100.0),
      num_rotations(c, 10, pct/100.0), num_rotations(c, 12, pct/100.0),
      num_rotations(c, 16, pct/100.0))

def rotation_table_31():
  for c in [1,5,10]:
    print "\n  %2.1f%% Network Compromise: " % c
    print "   Sybil Success   One   Two  Three  Four  Five  Six  Eight  Nine  Ten  Twelve  Sixteen"
    for success in [10,15,25,50,60,75,85,90,95,99]:
      rotation_line(c/100.0, success)

############ Section 3.3 #################
def ProbMinXX(N, i): return (2.0*(N-i)-1)/(N*N)
def ProbMaxXX(N, i): return (2.0*i+1)/(N*N)

def ExpFn(N, ProbFunc):
  exp = 0.0
  for i in xrange(N): exp += i*ProbFunc(N, i)
  return exp

def ProbUniformX(N, i): return 1.0/N

def ProbR(N, r, ProbFunc=ProbMaxXX):
  return ProbFunc(N, r)*r/ExpFn(N, ProbFunc)

def FullCDF(N, t, ProbFunc=ProbR):
  density = 0.0
  for d in xrange(N):
    if t &gt;= d: density += ProbFunc(N, d)
    # The +1's below compensate for 0-indexed arrays:
    else: density += ProbFunc(N, d)*float(t+1)/(d+1)
  return density

def expectation_table_33():
  print "\n   Range  Min(X,X)   Max(X,X)"
  for i in xrange(10,49):
    print "   %2d      %2.2f       %2.2f" % (i, ExpFn(i,ProbMinXX), ExpFn(i, ProbMaxXX))

def CDF_table_33():
  print "\n   t          P(SECOND_ROTATION &lt;= t)"
  for i in xrange(1,46):
    print "  %2d               %2.5f" % (i, FullCDF(45, i-1))

########### Output ############

# Section 3.1
rotation_table_31()

# Section 3.3
expectation_table_33()
CDF_table_33()

----------------------

1. https://onionbalance.readthedocs.org/en/latest/design.html#overview

          
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180531001926</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-05-31 00:19:26-0400</timestampReceived><subject>[tor-dev] Proposal 293: Other ways for relays to know when to publish</subject><body>

Filename: 293-know-when-to-publish.txt
Title: Other ways for relays to know when to publish
Author: Nick Mathewson
Created: 30-May-2018
Status: Open
Target: 0.3.5


1. Motivation

   In proposal 275, we give reasons for dropping the published-on
   field from consensus documents, to improve the performance of
   consensus diffs.  We've already changed Tor (as of 0.2.9.11) to
   allow us to set those fields far in the future -- but
   unfortunately, there is still one use case that requires them:
   relays use the published-on field to tell if they are about to fall
   out of the consensus and need to make new descriptors.

   Here we propose two alternative mechanisms for relays to know that
   they should publish descriptors, so we can enact proposal 275 and
   set the published-on field to some time in the distant future.


2. Mechanism One: The StaleDesc flag

   Authorities should begin voting aon a new StaleDesc flag.

   When authorities vote, if the most recent published_on date for
   a descriptor has over DESC_IS_STALE_INTERVAL in the past, the
   authorities should vote to give the StaleDesc flag to that relay.

   If any relay sees that it has the StaleDesc flag, it should upload
   some time in the first half of the voting interval.  (Implementors
   should take care not to re-upload over and over, though: Relays won't
   lose the flag until the next voting interval is reached.)

   (Define DESC_IS_STALE_INTERVAL as equal to
   FORCE_REGENERATE_DESCRIPTOR_INTERVAL.)


3. Mechanism Two: Uploading more frequently when rejected.

   Tor relays should remember the last time at which they uploaded a
   descriptor that was accepted by a majority of dirauths.  If this
   time is more than FAST_RETRY_DESCRIPTOR_INTERVAL in the past, we
   mark our descriptor as dirty from
   mark_my_descriptor_dirty_if_too_old().


4. Implications for proposal 275

   Once most relays are running verions that support the features
   above, and once authorities are generating consensuses with the
   StaleDesc flag, there will no longer be a need to keep the
   published time in consensus documents accurate -- we can start
   setting it to some time in the distant future, per proposal 275.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180530181829</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-30 18:18:29-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Hai need to be member

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hai need to be member  &lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180531013152</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-05-31 01:31:52-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

[Attachment #2 (multipart/alternative)]


On May 30, 2018 6:28:55 PM PDT, abhinav chowdary &lt;abhinavchodary796@gmail.com&gt; wrote:
&gt; Iam in or out

You've sent 5 nonsense emails to many hundreds of people today. Please stop. Please \
learn how mailing lists work. 

It seems like you've successfully subscribed to this list. Please enjoy responsibly.

Matt


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;div class="gmail_quote"&gt;On May 30, 2018 6:28:55 PM PDT, \
abhinav chowdary &lt;abhinavchodary796@gmail.com&gt; wrote:&lt;blockquote \
class="gmail_quote" style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, \
204, 204); padding-left: 1ex;"&gt; &lt;div dir="auto"&gt;Iam in or out &lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;You've sent 5 nonsense emails to many hundreds \
of people today. Please stop. Please learn how mailing lists work. &lt;br&gt; &lt;br&gt;
It seems like you've successfully subscribed to this list. Please enjoy \
responsibly.&lt;br&gt; &lt;br&gt;
Matt&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180530182221</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-30 18:22:21-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Join to u r org

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Join to u r org&lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180530182305</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-30 18:23:05-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Join me pls

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Join me pls  &lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180509140556</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-05-09 14:05:56-0400</timestampReceived><subject>Re: [tor-dev] Tor Bandwidth List Format specification</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 09/05/18 13:08, juga wrote:
&gt; after nick, irl and teor reviewed the last version i sent [1], i paste
&gt; below a new version of the specification versions 1.1.0 and 1.0.0.
&gt; It's the same version as commit
&gt; https://github.com/juga0/torspec/commit/c7cdfd4fcb4b5623e1407e2bec38e9f=
df7b70e6b.

Awesome. As soon as the opportunity presents itself I will take another
read through.

&gt; The main question that came up was whether we should create a backwards=

&gt; incompatible specification version 2.0.0.

I do think it may be easier to finish this specification first before
moving on to a 2.0.0 version. We discussed this specification at the
last Tor Metrics meeting: Currently Tor Metrics' descriptor parsing
library (metrics-lib) does not have a parser for the current (1.0.0)
bandwidth lists. We should implement this, and hopefully it would not be
too much extra work to make this also work for 1.1.0 lists.

If there were to be a 2.0.0 version, I would hope this brings the syntax
closer to other Tor descriptors to enable us to reuse existing code in
our parser (and also for tor to reuse existing code too) rather than
being something entirely new.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180510134000</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-10 13:40:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Bandwidth List Format specification</subject><body>

Iain Learmonth:
&gt; 
&gt;&gt; The main question that came up was whether we should create a backwards
&gt;&gt; incompatible specification version 2.0.0.
&gt; 
&gt; I do think it may be easier to finish this specification first before
&gt; moving on to a 2.0.0 version. We discussed this specification at the
&gt; last Tor Metrics meeting: Currently Tor Metrics' descriptor parsing
&gt; library (metrics-lib) does not have a parser for the current (1.0.0)
&gt; bandwidth lists. We should implement this, and hopefully it would not be
&gt; too much extra work to make this also work for 1.1.0 lists.

It shouldn't be much extra work, if metrics-lib ignore the extra header
lines and extra bandwidth KeyValue (as Tor currently does).
&gt; 
&gt; If there were to be a 2.0.0 version, I would hope this brings the syntax
&gt; closer to other Tor descriptors to enable us to reuse existing code in
&gt; our parser (and also for tor to reuse existing code too) rather than
&gt; being something entirely new.

That was the idea :)

Thanks!
juga.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180501143541</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-05-01 14:35:41-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Juga,

On 2018-05-01 14:36, Nick Mathewson wrote:
&gt; This is a review of the document from
&gt; https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128=
de541f8eba2a13bfb/bandwidth-file-spec.txt
&gt; , which I *think* is the same as the document you have below.

I'd like to review this document format, too, in particular with regard
to archiving these documents with CollecTor in the future. (Unless there
are no plans to archive them, ever.)

Should I wait for you to revise the document and join in the next review
round, or should I review the document now? In the latter case, where
would I find the most recent version?

Thanks!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180501153700</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-01 15:37:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

Karsten Loesing:
&gt; Hi Juga,
&gt; 
&gt; On 2018-05-01 14:36, Nick Mathewson wrote:
&gt; &gt; This is a review of the document from
&gt; &gt; https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt
&gt; &gt;  , which I *think* is the same as the document you have below.
&gt; 
&gt; I'd like to review this document format, too, in particular with regard
&gt; to archiving these documents with CollecTor in the future. (Unless there
&gt; are no plans to archive them, ever.)
&gt; 
&gt; Should I wait for you to revise the document and join in the next review
&gt; round, or should I review the document now? 

From my side, you can review this now.

In the latter case, where
&gt; would I find the most recent version?

I don't if i interpret you correctly, but while working on it and not in
the torspec canonical repo, last version should be in
https://github.com/juga0/torspec/tree/bandwidth-file-spec.

Thanks!,
juga.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180501170800</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-01 17:08:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

Hi,

Thanks Nick for the comments, i'm replaying only to the parts where i
give an answer or i've more questions. I'd accept the rest of your
suggestions unless there will be further comments.

Nick Mathewson:
&gt; Hi, Juga!
&gt; 
&gt; This is a review of the document from
&gt; https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt
&gt;  , which I *think* is the same as the document you have below.

Yes, it is.
&gt; 
&gt; I'm reviewing this as though it were a fully new format, since I'm not sure
&gt; how much we already have locked-in based on existing code, and how much is
&gt; new.  We might decide that backward compatibility is more important than
&gt; consistency, and if so, we won't want to take all of my recommendations
&gt; here.
&gt; 
&gt; 
&gt; &gt; Tor Bandwidth Measurements Document Format
&gt; &gt; juga
&gt; &gt; teor
&gt; &gt; 
&gt; &gt; 1. Scope and preliminaries
&gt; &gt; 
&gt; &gt; This document describes the format of Tor's bandwidth measurements
&gt; &gt; document, version 1.0.0 and later.
&gt; 
&gt; Suggestion: Maybe explicitly say "1.0.0, 1.1.0, and later"?
&gt; 
&gt; &gt; Since Tor version 0.2.4.12-alpha the directory
&gt; &gt; authorities use the bandwidth measurements document called
&gt; &gt; "V3BandwidthsFile" and produced by Torflow [1]
&gt; &gt; (format described in README.spec.txt [2]).
&gt; 
&gt; Recommendation: "Format described in Torflow's README.spec.txt".
&gt; 
&gt; Explanation needed: Is this a new format, or a new specification of the
&gt; existing format?  Let's say so here.

New version of existing format. Though old version (Torflow's), didn't
have an specification in the sense this specification is being made).

&gt; Question: If this is a different format, and we're calling it version
&gt; 1.0.0, what should we call the old one?  But later it seems that we're
&gt; introducing 1.1.0, and we're calling the old one 1.0.0.

yeah, this would be 1.1.0, the old one (Torflow's) would be 1.0.0

&gt; Suggestion: let's be explicit that we're only describing the format
&gt; here, and *not* describing how bwauths generate their data.
&gt; 
&gt; 
&gt; &gt; The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
&gt; &gt; NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
&gt; &gt; "OPTIONAL" in this document are to be interpreted as described in
&gt; &gt; RFC 2119.
&gt; &gt; 
&gt; &gt; 1.2. Acknowledgements
&gt; &gt; 
&gt; &gt; The original bandwidth measurement scanner (Torflow) and format was
&gt; &gt; created by mike. Teor suggested to write this specification while
&gt; &gt; contributing on pastly's new bandwidth scanner implementation.
&gt; &gt; 
&gt; &gt; This specification was revised after feedback from:
&gt; &gt; 
&gt; &gt; XXX
&gt; &gt; 
&gt; &gt; 1.3 Outline
&gt; &gt; 
&gt; &gt; The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2
&gt; &gt; of "Tor directory protocol" (dir-spec.txt) [3] are obtained
&gt; &gt; by bandwidth authorities, which generate a file storing information
&gt; &gt; on relays' measured bandwidth capacities.
&gt; &gt; 
&gt; &gt; 1.4. Format Versions
&gt; &gt; 
&gt; &gt; 1.0.0 - The legacy fallback bandwidth measurements document format
&gt; &gt; 
&gt; &gt; 1.1.0 - Adds key_value lines to the header, format version,
&gt; &gt; optional ones and section separator.
&gt; 
&gt; Information: Let's repeat in this section which versions of Tor can
&gt; consume these versions.
&gt; 
&gt; &gt; 2. Format details
&gt; &gt; 
&gt; &gt; Bandwidth measurements MUST contain the following sections:
&gt; &gt; - Header (exactly once)
&gt; &gt; - Relays measurements (zero or more times)
&gt; 
&gt; Grammar suggestion: "Relay measurements".
&gt; 
&gt; 
&gt; 
&gt; &gt; 2.1. Definitions
&gt; &gt; 
&gt; &gt; The following nonterminals are defined in dir-spec.txt, sections
&gt; &gt; 1.2., 2.1.1., 2.1.3.:
&gt; &gt; 
&gt; &gt; Int
&gt; &gt; SP (space)
&gt; &gt; NL (newline)
&gt; &gt; Keyword
&gt; &gt; ArgumentChar
&gt; &gt; fingerprint (hexdigest)
&gt; 
&gt; Does this have to start with a "$" ?  I think it does.  Maybe we should be
&gt; explicit about that.

Yes

&gt; &gt; nickname
&gt; &gt; 
&gt; &gt; Nonterminals defined in "Tor Directory List Format" (dir-list-spec.txt),
&gt; &gt; section 2.2.1.:
&gt; &gt; 
&gt; &gt; version_number
&gt; &gt; 
&gt; &gt; We define the following nonterminals:
&gt; &gt; 
&gt; &gt; value ::= ArgumentChar+
&gt; &gt; key_value ::= Keyword "=" value
&gt; &gt; line ::= ArgumentChar* NL
&gt; &gt; timestamp ::= Int
&gt; &gt; bandwidth ::= Int
&gt; &gt; relay_line ::= key_value (SP key_value)* NL
&gt; &gt; 
&gt; &gt; 2.2. Header format

One more thing that teor pointed at me: any line MUST be shorter than
512 characters (legacy restriction).
Teor pointed at me, i thought it was only for timestamp, but then i
realized it's for any line.

&gt; &gt; Some header lines MUST appear in specific positions, as documented below.
&gt; &gt; All other lines can appear in any order.
&gt; &gt; 
&gt; &gt; There MUST NOT be multiple key_value header lines with the same key.
&gt; 
&gt; Maybe this line belongs below in the key_value section?
&gt; 
&gt; &gt; It consists of:
&gt; &gt; 
&gt; &gt; timestamp NL
&gt; &gt; 
&gt; &gt; [At start, exactly once.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the file was created.
&gt; 
&gt; Question: Why no keyword and equal sign here?  Is this a legacy thing?

Yes, because of the way Tor [0] parses it, and the way Torflow generates it.
&gt; 
&gt; Also, wouldn't it be more standard to have it be in YYYY-MM-DDTHH:MM:SS
&gt; format?

In this case we would need to patch current versions to accept it. Would
be that ok?. In that case we could also make it key_value.
We need one path right now: change function in [0] to accept additional
headers (ticket #25960).

&gt; 
&gt; &gt; "version=" version_number NL
&gt; &gt; 
&gt; &gt; [In second position, zero or one time.]
&gt; &gt; 
&gt; &gt; The specification document format version.
&gt; &gt; It uses semantic versioning [5].
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; Version 1.0.0 documents do not contain this line, and the
&gt; &gt; version_number is considered to be "1.0.0".
&gt; 
&gt; General concern: I question the use of = signs here in the headers.  If
&gt; we use "SP" instead, then we can reuse a lot of the same machinery tor
&gt; currently uses to parse other documents.

I guess we should see then how much we should refactor function in [0]
to reuse parsecommon.c (as you pointed me at by IRC).

&gt; &gt; "software=" value NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The name of the software that created the document.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; Version 1.0.0 documents do not contain this line, and the software is
&gt; &gt; considered to be "torflow".
&gt; &gt; 
&gt; &gt; "software_version=" value NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The version of the software that created the document.
&gt; &gt; The version may be a version_number, a git commit, or some other
&gt; &gt; version scheme.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; "scanner_started=" timestamp NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the scanner that generates the
&gt; &gt; measurements document started.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; See note above about time format.  YYYY-MM-DDTHH:MM:SS is how we specify
&gt; times elsewhere in Tor.

Since this is new, then no problem on changing to this format.

&gt; &gt; "earliest_measurement=" timestamp NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the first relay measurement
&gt; &gt; was obtained.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; See note above about time format.
&gt; 
&gt; &gt; key_value NL
&gt; &gt; 
&gt; &gt; [Zero or more times.]
&gt; &gt; 
&gt; &gt; Future format versions may include additional key_value header lines.
&gt; &gt; Additional header lines will be accompanied by a minor version
&gt; increment.
&gt; &gt; 
&gt; &gt; Implementations MAY add additional header lines as needed. This
&gt; &gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; &gt; same header keys.
&gt; &gt; 
&gt; &gt; Parsers MUST NOT rely on the order of these additional lines.
&gt; &gt; 
&gt; &gt; Additional header lines MUST NOT use any keywords specified in the
&gt; &gt; relay measurements format.
&gt; &gt; 
&gt; &gt; If a header line does not conform to this format, the line SHOULD be
&gt; &gt; ignored by parsers.
&gt; 
&gt; Suggestion: say what recipients of this document should do with
&gt; unrecognized data.  In general, it's good for forward compatibility to
&gt; say something like, "Recipients MUST ignore key_value lines if they do
&gt; not recognize the keyword. Recipients MUST ignore any extra material in
&gt; a line that they do not recognize."
&gt; 
&gt; Also see suggestion above about using SP as our separator rather than
&gt; "=" for consistency with other documents Tor parses.
&gt; 
&gt; &gt; NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The header ends.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; For version 1.0.0 documents, the header ends when the first relay
&gt; &gt; measurement line is found conforming to the next section.
&gt; 
&gt; Suggestion: Replace this empty line with an explicit keyword, for
&gt; consistency with other documents.

Also to avoid interpreting section ends when there was just garbage.
Any suggestion on which one to use?, dir-list-spec.txt uses "=====",
don't know which ones other documents use.

&gt; &gt; 2.3. Relay measurements format

As in 2.2, to be compatible with current implementations, it MUST be
shorter than 512 characters.

&gt; &gt; It consists of zero or more relay_line with the measurement results
&gt; &gt; of relays in arbitrary order.
&gt; &gt; 
&gt; &gt; There can be at most one relay_line per relay identity (fingerprint).
&gt; &gt; 
&gt; &gt; There MUST NOT be multiple key_value pairs with the same key in the same
&gt; &gt; relay_line.
&gt; &gt; 
&gt; &gt; Each relay_line MUST include the following key_value in arbitrary order:
&gt; 
&gt; Do existing implementations accept arbitrary order here?

Good question, it seems like bw must be behind node_id, but they can
have things in front and behind. I probably should create a ticket to
add more test lines in [1] or include them in #25960.

&gt; &gt; "node_id=" fingerprint
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The fingerprint of the relay being measured.
&gt; 
&gt; Suggestion: Add a field to hold the Ed25519 Identity of the relay being
&gt; measured.  Say that implementations SHOULD include both RSA fingerprint
&gt; and Ed25519 identity, and that implementations SHOULD accept lines that
&gt; contain at least one of them.
&gt; 
&gt; &gt; "bw=" bandwidth
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The measured bandwidth of this relay.
&gt; &gt; 
&gt; &gt; Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt; &gt; implementations. Therefore, implementations SHOULD NOT produce zero
&gt; &gt; bandwidths. Instead, they SHOULD use one as their minimum bandwidth.
&gt; &gt; 
&gt; &gt; Multiple measurements can be aggregated using an averaging scheme,
&gt; such
&gt; &gt; as a mean, median, or decaying average.
&gt; &gt; 
&gt; &gt; Torflow scales bandwidths to kilobytes per second. Other
&gt; implementations
&gt; &gt; SHOULD use kilobytes per second for their initial bandwidth scaling.
&gt; &gt; 
&gt; &gt; If different implementations or configurations are used in votes for
&gt; the
&gt; &gt; same network, their measurements MAY need further scaling. See
&gt; Appendix B
&gt; &gt; for information about scaling, and one possible scaling method.
&gt; &gt; 
&gt; &gt; key_value
&gt; &gt; 
&gt; &gt; [Zero or more times.]
&gt; 
&gt; Technically, this isn't a key_value, because a "value" is made of
&gt; ArgumentChar, and ArgumentChar can contain spaces.  So if we were
&gt; parsing
&gt; "foo=abc bar=def"
&gt; we might be parsing either one key_value ("foo", "abc bar=def") or two
&gt; ("foo", "abc"), ("bar, "def").
&gt; 

You're right. The closest from dir-spec.txt is KeywordChar, but that
doesn't include colon, for instance. So, we would need to define what is
accepted here (unless it is defined in some other document).

&gt; &gt; Future format versions may include additional key_value pairs on a
&gt; relay_line.
&gt; &gt; Additional key_value pairs will be accompanied by a minor version
&gt; increment.
&gt; &gt; 
&gt; &gt; Implementations MAY add additional relay key_value pairs as needed.
&gt; This
&gt; &gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; &gt; same relay keys.
&gt; &gt; 
&gt; &gt; Parsers MUST NOT rely on the order of these additional key_value
&gt; pairs.
&gt; &gt; 
&gt; &gt; Additional key_value pairs MUST NOT use any keywords specified in the
&gt; &gt; header format.
&gt; 
&gt; As above, let's say that a parser should ignore key_value entries with
&gt; keywords that it doesn't recognize.
&gt; 
&gt; &gt; 
&gt; &gt; If a relay line does not conform to this format, the line SHOULD be
&gt; &gt; ignored by parsers.
&gt; &gt; 
&gt; &gt; 2.4. Implementation notes
&gt; &gt; 
&gt; &gt; 2.4.1. Simple Bandwidth Scanner
&gt; &gt; 
&gt; &gt; Every relay measurement in sbws version 0.1.0 consists of:
&gt; &gt; 
&gt; &gt; "node_id=" fingerprint SP
&gt; &gt; 
&gt; &gt; As above.
&gt; &gt; 
&gt; &gt; "bw=" bandwidth SP
&gt; &gt; 
&gt; &gt; As above.
&gt; &gt; 
&gt; &gt; "nick=" nickname SP
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The relay nickname.
&gt; &gt; 
&gt; &gt; "rtt=" Int SP
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The Round Trip Time in milliseconds to obtain 1 byte of data.
&gt; &gt; 
&gt; &gt; "time=" timestamp NL
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the last measurement was
&gt; performed.
&gt; &gt; 
&gt; &gt; 2.4.2. Torflow
&gt; &gt; 
&gt; &gt; Torflow relay lines include node_id and bw, and other key_value pairs [2].
&gt; &gt; 
&gt; &gt; References:
&gt; &gt; 
&gt; &gt; 1. https://gitweb.torproject.org/torflow.git
&gt; &gt; 2.
&gt; https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
&gt; 
&gt; &gt; 3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
&gt; &gt; 4. https://metrics.torproject.org/onionoo.html#details
&gt; &gt; 5. https://semver.org/
&gt; &gt; 
&gt; &gt; A. Sample data
&gt; &gt; 
&gt; &gt; The following has not been obtained from any real measurement.
&gt; &gt; 
&gt; &gt; A.1. Generated by Torflow
&gt; &gt; 
&gt; &gt; This an example version 1.0.0 document:
&gt; &gt; 
&gt; &gt; 1523911758
&gt; &gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
&gt; measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
&gt; pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
&gt; circ_fail=0.2 scanner=/filepath
&gt; &gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
&gt; measured_at=1523911623 updated_at=1523911623 pid_error=3.96703337994
&gt; pid_error_sum=3.96703337994 pid_bw=47422125 pid_delta=2.65469736988
&gt; circ_fail=0.0 scanner=/filepath
&gt; &gt; 
&gt; &gt; A.2. Generated by sbws version 0.1.0
&gt; &gt; 
&gt; &gt; 1523911758
&gt; &gt; version=1.1.0
&gt; &gt; software=sbws
&gt; &gt; software_version=0.1.0
&gt; &gt; scanner_started=1523911756
&gt; &gt; earliest_measurement=1523911757
&gt; &gt; 
&gt; &gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
&gt; rtt=380 time=1523911725
&gt; &gt; node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
&gt; rtt=378 time=1523911623
&gt; &gt; 
&gt; &gt; B. Scaling bandwidths
&gt; &gt; 
&gt; &gt; B.1. Scaling requirements
&gt; &gt; 
&gt; &gt; Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt; &gt; implementations. Therefore, scaling methods SHOULD perform the
&gt; &gt; following checks:
&gt; &gt; * If the total bandwidth is zero, all relays should be given equal
&gt; &gt; bandwidths.
&gt; &gt; * If the scaled bandwidth is zero, it should be rounded up to one.
&gt; &gt; 
&gt; &gt; Initial experiments indicate that scaling may not be needed for
&gt; &gt; torflow and sbws, because their measured bandwidths are similar
&gt; &gt; enough already.
&gt; &gt; 
&gt; &gt; B.2. A linear scaling method
&gt; &gt; 
&gt; &gt; If scaling is required, here is a simple linear bandwith scaling
&gt; &gt; method, which ensures that all bandwidth votes contain approximately
&gt; &gt; the same total bandwidth:
&gt; &gt; 
&gt; &gt; 1. Calculate the relay quota by dividing the total measured bandwidth
&gt; &gt; in all votes, by the number of relays with measured bandwidth
&gt; &gt; votes. In the public tor network, this is approximately 7500 as of
&gt; &gt; April 2018. The quota should be a consensus parameter, so it can be
&gt; &gt; adjusted for all scanners on the network.
&gt; &gt; 
&gt; &gt; 2. Calculate a vote quota by multiplying the relay quota by the number
&gt; &gt; of relays this bandwidth authority has measured
&gt; &gt; bandwidths for.
&gt; &gt; 
&gt; &gt; 3. Calculate a scaling factor by dividing the vote quota by the
&gt; &gt; total unscaled measured bandwidth in this bandwidth
&gt; &gt; authority's upcoming vote.
&gt; &gt; 
&gt; &gt; 4. Multiply each unscaled measured bandwidth by the scaling
&gt; &gt; factor.
&gt; &gt; 
&gt; &gt; Now, the total scaled bandwidth in the upcoming vote is
&gt; &gt; approximately equal to the quota.
&gt; &gt; 
&gt; &gt; B.3. Quota changes
&gt; &gt; 
&gt; &gt; If all scanners are using scaling, the quota can be gradually
&gt; &gt; reduced or increased as needed. Smaller quotas decrease the size
&gt; &gt; of uncompressed consensuses, and may decrease the size of
&gt; &gt; consensus diffs and compressed consensuses. But if the relay
&gt; &gt; quota is too small, some relays may be over- or under-weighted.
&gt; 
&gt; 

[0] https://gitweb.torproject.org/tor.git/tree/src/or/dirserv.c#n2563
[1] https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt#n131
[2] https://gitweb.torproject.org/tor.git/tree/src/test/test_dir.c#n1495
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180501182935</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-05-01 18:29:35-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

&gt; Tor Bandwidth Measurements Document Format

"Measurement" could mean a method for performing a measurement, a single
measurement task, a schedule for a repeating measurement task, a
measurement result or a few other things.

When Large MeAsurement Platforms (LMAP) wrote documents in the IETF,
they only ever used measurement as an adjective to avoid any ambiguity.

https://www.ietf.org/archive/id/draft-eardley-lmap-terminology-02.txt

The architecture for LMAP may not fit well with the bandwidth scanner
architecture, and so I'm not suggesting we adopt the terminology in that
document throughout.

&gt;&gt; 2. Format details
&gt;&gt;
&gt;&gt;   Bandwidth measurements MUST contain the following &gt; sections:
&gt;&gt;   - Header (exactly once)
&gt;&gt;   - Relays measurements (zero or more times)
&gt;
&gt; Grammar suggestion: "Relay measurements".

In this case, this would become "Relay measurement result".

If desirable, I'd be happy to check through the document for any other
places ambiguities pop up, but I'll let others finish having their
comments integrated first.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502083400</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-02 08:34:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

Hi Iain,

Iain Learmonth:
&gt; Hi,
&gt; 
&gt;&gt; Tor Bandwidth Measurements Document Format
&gt; 
&gt; "Measurement" could mean a method for performing a measurement, a single
&gt; measurement task, a schedule for a repeating measurement task, a
&gt; measurement result or a few other things.


I also wondered whether that was the correct word and considered
"capacity", but didn't convince me.
Teor also suggested me to remove "Document", but i thought i'd keep it,
trying to mean that the spec is only about the "file" and not the
process or how they are formatted somewhere else.

Do you have a suggestion on what other word to use instead of measurements?.

&gt; When Large MeAsurement Platforms (LMAP) wrote documents in the IETF,
&gt; they only ever used measurement as an adjective to avoid any ambiguity.
&gt; 
&gt; https://www.ietf.org/archive/id/draft-eardley-lmap-terminology-02.txt
&gt; 
&gt; The architecture for LMAP may not fit well with the bandwidth scanner
&gt; architecture, and so I'm not suggesting we adopt the terminology in that
&gt; document throughout.
&gt; 
&gt;&gt;&gt; 2. Format details
&gt;&gt;&gt;
&gt;&gt;&gt;   Bandwidth measurements MUST contain the following &gt; sections:
&gt;&gt;&gt;   - Header (exactly once)
&gt;&gt;&gt;   - Relays measurements (zero or more times)
&gt;&gt;
&gt;&gt; Grammar suggestion: "Relay measurements".
&gt; 
&gt; In this case, this would become "Relay measurement result".

More accurate, though starts becoming a bit too long. The title should
probably become then: "Tor Bandwidth Measurements Results Document Format"
Any shorter suggestion?.

&gt; If desirable, I'd be happy to check through the document for any other
&gt; places ambiguities pop up, but I'll let others finish having their
&gt; comments integrated first.

It's fine to continue to make comments on the thread where others
commented, no need to wait until those comments are integrated. But
either way works.

Thanks for your comments!,
juga.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180502085957</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-02 08:59:57-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/alternative)]


On 2 May 2018, at 18:34, juga &lt;juga@riseup.net&gt; wrote:

&gt;&gt;&gt;&gt; 2. Format details
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;  Bandwidth measurements MUST contain the following &gt; sections:
&gt;&gt;&gt;&gt;  - Header (exactly once)
&gt;&gt;&gt;&gt;  - Relays measurements (zero or more times)
&gt;&gt;&gt; 
&gt;&gt;&gt; Grammar suggestion: "Relay measurements".
&gt;&gt; 
&gt;&gt; In this case, this would become "Relay measurement result".
&gt; 
&gt; More accurate, though starts becoming a bit too long. The title should
&gt; probably become then: "Tor Bandwidth Measurements Results Document Format"
&gt; Any shorter suggestion?.

"Measurements Results" describes how the bandwidths are created by some
generators. But a generator that believes self-reported results doesn't measure,
it just aggregates. (As does a peerflow-style generator.)

"Document" is vague. Let's describe what the document is: a list.

Let's use:
Tor Bandwidth List Format

What is the document?
A Tor Bandwidth List

How do I parse it?
Using the Tor Bandwidth List Format

Are there any similar formats?
The Tor Directory List Format
https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 2 May 2018, \
at 18:34, juga &lt;&lt;a href="mailto:juga@riseup.net"&gt;juga@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;2. Format \
details&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;  Bandwidth \
measurements MUST contain the following &gt; \
sections:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;  - Header \
(exactly once)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;  - Relays \
measurements (zero or more \
times)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Grammar suggestion: "Relay \
measurements".&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;In this case, \
this would become "Relay measurement \
result".&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;More accurate, though starts \
becoming a bit too long. The title should&lt;/span&gt;&lt;br&gt;&lt;span&gt;probably become then: "Tor \
Bandwidth Measurements Results Document Format"&lt;/span&gt;&lt;br&gt;&lt;span&gt;Any shorter \
suggestion?.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;"Measurements Results" describes how the bandwidths are \
created by some&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;generators. But a generator that believes self-reported results doesn't \
measure,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;it \
just aggregates. (As does a peerflow-style \
generator.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"Document" is vague. Let's describe what \
the document is: a list.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's use:&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Tor Bandwidth List \
Format&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What is the document?&lt;/div&gt;&lt;div&gt;A &lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Tor Bandwidth \
List&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;How do I parse it?&lt;/div&gt;&lt;div&gt;Using the &lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Tor Bandwidth List \
Format&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Are there any similar formats?&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;The Tor Directory List \
Format&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-list-spec.txt&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502091828</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-05-02 09:18:28-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 02/05/18 09:59, teor wrote:
&gt; Let's use:
&gt; Tor Bandwidth List Format

As we are already using this for the directory lists, I think this makes
sense as a name for the format.

&gt; "Measurements Results" describes how the bandwidths are created by
some generators. But a generator that believes self-reported results
doesn't measure, it just aggregates. (As does a peerflow-style generator.=
)

I'm not sure I understand this. Are you saying that the format will be
used to aggregate results that are collected? In this case, I think the
results can still be called results in that they correspond to an active
measurement of a relay and have a value.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502093153</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-02 09:31:53-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>


On 2 May 2018, at 19:18, Iain Learmonth &lt;irl@torproject.org&gt; wrote:

&gt;&gt; "Measurements Results" describes how the bandwidths are created by
&gt;&gt; some generators. But a generator that believes self-reported results
&gt;&gt; doesn't measure, it just aggregates. (As does a peerflow-style generator.)
&gt;&gt; 
&gt; I'm not sure I understand this. Are you saying that the format will be
&gt; used to aggregate results that are collected? In this case, I think the
&gt; results can still be called results in that they correspond to an active
&gt; measurement of a relay and have a value.

No, I'm saying that the spec is about the format.
It's not about how the numbers in a file in the format are created.

"Measurement" is one way we can create the file.

Other ways to create the file are:
* "copy" self-reported bandwidths from relay descriptors into the
  required format (the naive, pre-bandwidth scanner method)
* "aggregate" bandwidths passively observed by other relays into the
  required format (the peerflow method)
* assign all relays equal bandwidths (the fallback method in Appendix B)

So let's try to keep "relay measurement" and "relay bandwidths" as
separate concepts.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180502094400</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-02 09:44:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

juga:

&gt;&gt;&gt; Each relay_line MUST include the following key_value in arbitrary order:
&gt;&gt;
&gt;&gt; Do existing implementations accept arbitrary order here?
&gt; 
&gt; Good question, it seems like bw must be behind node_id, but they can
&gt; have things in front and behind. I probably should create a ticket to
&gt; add more test lines in [1] or include them in #25960.

Checked: in the current implementation, the only order required is that
bw must appear before node_id. It probably does not make sense, but to
be compatible with it, it is what this spec should say.


[1] https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt#n131
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180502101406</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-05-02 10:14:06-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 02/05/18 10:31, teor wrote:
&gt; So let's try to keep "relay measurement" and "relay bandwidths" as
&gt; separate concepts.

Aaah, ok. Yes, I much prefer "Relay Bandwidth" as the name for the
section in =C2=A72. There are then also lots of references to measurement=
 in
=C2=A72.2, that should also be changed to talk about bandwidths instead, =
e.g.
"earliest_bandwidth".

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502123912</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-02 12:39:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Nick,

Juga asked me to comment on your review, so she could read it before our bandwidth \
meeting this week. If I don't comment on a suggestion, you should assume I agree with \
it.

Backwards Compatibility

Nick asked about backwards compatibility. This format uses semantic versioning. Tor \
0.2.9 - 0.3.3 reads format version 1.0.0. It also reads format 1.1.0, but ignores the \
new features with warnings.

If we want to introduce an incompatible format, we should call it 2.0.0, because \
semantic versioning requires a major increment for breaking changes.

Here's how we could add the new format:
* The new format should have a new torrc option.
* Tor should be modified to support the new format, and we should put time on the \
                roadmap for people to work on implementing, testing, or reviewing it.
* Either we should backport the new format to the latest stable release, or sbws \
should produce both formats.

The current implementation has at least one security bug, some weird order \
restrictions, and some line length restrictions. So I would support re-implementing \
it using the standard directory document parsing code. Even if that takes more time.

Testing the format

Most of us don't have a spare directory authority for testing.

If you run chutney with my bwfile branch, all the authorities in the network read \
/tmp/bwfile for every consensus. Look for the warnings at the end of the chutney \
output.

The basic-min network is fast:
chutney/tools/test-network.sh --flavour basic-min

Here's the branch:
https://github.com/teor2345/chutney/commit/ebdb4760fbcae40979ab248e4208c27a71cccb11

I've already found one minor security bug using this branch: #26007.

Next Steps

I'm going to be away next week for a week and a half. I encourage other people to \
make decisions while I'm away, so we can keep making progress.

&gt; On 1 May 2018, at 22:36, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; Hi, Juga! 
&gt; 
&gt; This is a review of the document from \
&gt; https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt \
&gt; , which I *think* is the same as the document you have below. 
&gt; I'm reviewing this as though it were a fully new format, since I'm not sure how \
&gt; much we already have locked-in based on existing code, and how much is new.  We \
&gt; might decide that backward compatibility is more important than consistency, and if \
&gt; so, we won't want to take all of my recommendations here. 
&gt; &gt; Tor Bandwidth Measurements Document Format
&gt; &gt; juga
&gt; &gt; teor
&gt; &gt; 
&gt; &gt; 1. Scope and preliminaries
&gt; &gt; 
&gt; &gt; This document describes the format of Tor's bandwidth measurements

Replace measurements document with list?

&gt; &gt; document, version 1.0.0 and later.
&gt; 
&gt; Suggestion: Maybe explicitly say "1.0.0, 1.1.0, and later"?
&gt; 
&gt; &gt; Since Tor version 0.2.4.12-alpha the directory
&gt; &gt; authorities use the bandwidth measurements document called

Replace measurements document with list?

&gt; &gt; "V3BandwidthsFile" and produced by Torflow [1]
&gt; &gt; (format described in README.spec.txt [2]).
&gt; 
&gt; Recommendation: "Format described in Torflow's README.spec.txt".
&gt; 
&gt; Explanation needed: Is this a new format, or a new specification of the
&gt; existing format?  Let's say so here.

A new specification for the existing format 1.0.0.
A new format 1.1.0, which is backwards compatible with 1.0.0 parsers.

&gt; Question: If this is a different format, and we're calling it version
&gt; 1.0.0, what should we call the old one?  But later it seems that we're
&gt; introducing 1.1.0, and we're calling the old one 1.0.0.

"The Legacy Torflow format" or just "legacy"?

&gt; Suggestion: let's be explicit that we're only describing the format
&gt; here, and *not* describing how bwauths generate their data.

I agree. We want to leave room for peerflow and future schemes.
So we might want to:
* replace every "measurements document" with "list"
* replace every "measurements scanner" with "generator"

&gt; &gt; The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
&gt; &gt; NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
&gt; &gt; "OPTIONAL" in this document are to be interpreted as described in
&gt; &gt; RFC 2119.
&gt; &gt; 
&gt; &gt; 1.2. Acknowledgements
&gt; &gt; 
&gt; &gt; The original bandwidth measurement scanner (Torflow)

Replace measurement scanner with generator?

&gt; and format was
&gt; &gt; created by mike. Teor suggested to write this specification while
&gt; &gt; contributing on pastly's new bandwidth scanner implementation.
&gt; &gt; 
&gt; &gt; This specification was revised after feedback from:
&gt; &gt; 
&gt; &gt; XXX

Please update.

&gt; &gt; 1.3 Outline
&gt; &gt; 
&gt; &gt; The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2

Hmm, the dir-spec calls them measurements.
Maybe we should fix it as well.

&gt; &gt; of "Tor directory protocol" (dir-spec.txt) [3] are obtained
&gt; &gt; by bandwidth authorities,

Is a bandwidth authority a directory authority that votes for bandwidths?
Or is it a bandwidth generator that produces the bandwidth file?

&gt; which generate a file storing information
&gt; &gt; on relays' measured bandwidth capacities.

Remove "measured".

&gt; &gt; 
&gt; &gt; 1.4. Format Versions
&gt; &gt; 
&gt; &gt; 1.0.0 - The legacy fallback bandwidth measurements document format

Instead of "bandwidth measurements document format", say "bandwidth list"?

&gt; &gt; 
&gt; &gt; 1.1.0 - Adds key_value lines to the header, format version,
&gt; &gt; optional ones and section separator.
&gt; 
&gt; Information: Let's repeat in this section which versions of Tor can
&gt; consume these versions.

All Tor versions can consume format version 1.0.0.
All Tor versions can consume format version 1.1.0, but they warn on header lines.
See https://trac.torproject.org/projects/tor/ticket/25960

&gt; &gt; 2. Format details
&gt; &gt; 
&gt; &gt; Bandwidth measurements MUST contain the following sections:

And if they don't, the file SHOULD be ignored.

&gt; &gt; - Header (exactly once)
&gt; &gt; - Relays measurements (zero or more times)
&gt; 
&gt; Grammar suggestion: "Relay measurements".

Replace "measurements" with "bandwidths"?

&gt; &gt; 2.1. Definitions
&gt; &gt; 
&gt; &gt; The following nonterminals are defined in dir-spec.txt, sections
&gt; &gt; 1.2., 2.1.1., 2.1.3.:
&gt; &gt; 
&gt; &gt; Int
&gt; &gt; SP (space)
&gt; &gt; NL (newline)
&gt; &gt; Keyword
&gt; &gt; ArgumentChar
&gt; &gt; fingerprint (hexdigest)
&gt; 
&gt; Does this have to start with a "$" ?  I think it does.  Maybe we should be explicit \
&gt; about that.

It does. And we should.

&gt; &gt; nickname
&gt; &gt; 
&gt; &gt; Nonterminals defined in "Tor Directory List Format" (dir-list-spec.txt),
&gt; &gt; section 2.2.1.:
&gt; &gt; 
&gt; &gt; version_number
&gt; &gt; 
&gt; &gt; We define the following nonterminals:
&gt; &gt; 
&gt; &gt; value ::= ArgumentChar+

Excluding SP

&gt; &gt; key_value ::= Keyword "=" value
&gt; &gt; line ::= ArgumentChar* NL
&gt; &gt; timestamp ::= Int
&gt; &gt; bandwidth ::= Int
&gt; &gt; relay_line ::= key_value (SP key_value)* NL
&gt; &gt; 
&gt; &gt; 2.2. Header format
&gt; &gt; 
&gt; &gt; Some header lines MUST appear in specific positions, as documented below.

And if they don't, the file SHOULD be ignored.

&gt; &gt; All other lines can appear in any order.
&gt; &gt; 
&gt; &gt; There MUST NOT be multiple key_value header lines with the same key.

And if there are, the parser SHOULD choose an arbitrary line.

All lines in the file MUST be 510 characters or less, to allow for the trailing \
newline and NUL characters. (The previous limit was 254 characters in Tor \
0.2.6.2-alpha and earlier.)

The parser MAY ignore longer lines.

Should we lift this restriction in 1.1.0?

&gt; Maybe this line belongs below in the key_value section?
&gt; 
&gt; &gt; It consists of:
&gt; &gt; 
&gt; &gt; timestamp NL
&gt; &gt; 
&gt; &gt; [At start, exactly once.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the file was created.
&gt; 
&gt; Question: Why no keyword and equal sign here?  Is this a legacy thing?

Yes, tor expects a Unix timestamp on a single line by itself.

&gt; Also, wouldn't it be more standard to have it be in YYYY-MM-DDTHH:MM:SS
&gt; format?

Tor refuses to read bandwidth files unless they start with an integer on a line by \
itself. So  this would be a breaking change.

&gt; &gt; "version=" version_number NL
&gt; &gt; 
&gt; &gt; [In second position, zero or one time.]
&gt; &gt; 
&gt; &gt; The specification document format version.
&gt; &gt; It uses semantic versioning [5].
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; Version 1.0.0 documents do not contain this line, and the
&gt; &gt; version_number is considered to be "1.0.0".
&gt; 
&gt; General concern: I question the use of = signs here in the headers.  If
&gt; we use "SP" instead, then we can reuse a lot of the same machinery tor
&gt; currently uses to parse other documents.

I think using SP is fine.

But if we want to re-use the parsing machinery, we probably need to add a keyword to \
the initial timestamp. That would be a breaking change.

&gt; &gt; "software=" value NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The name of the software that created the document.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; Version 1.0.0 documents do not contain this line, and the software is
&gt; &gt; considered to be "torflow".
&gt; &gt; 
&gt; &gt; "software_version=" value NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The version of the software that created the document.
&gt; &gt; The version may be a version_number, a git commit, or some other
&gt; &gt; version scheme.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.

If we use SP as a separator, we can make these two lines:

"software" SP name_value SP version_value NL

&gt; &gt; "scanner_started=" timestamp NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the scanner that generates the
&gt; &gt; measurements document started.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; See note above about time format.  YYYY-MM-DDTHH:MM:SS is how we specify
&gt; times elsewhere in Tor.

This is a new field, so we can choose the format.

&gt; &gt; "earliest_measurement=" timestamp NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The Unix Epoch time in seconds when the first relay measurement
&gt; &gt; was obtained.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; 
&gt; See note above about time format.
&gt; 
&gt; &gt; key_value NL
&gt; &gt; 
&gt; &gt; [Zero or more times.]
&gt; &gt; 
&gt; &gt; Future format versions may include additional key_value header lines.
&gt; &gt; Additional header lines will be accompanied by a minor version increment.
&gt; &gt; 
&gt; &gt; Implementations MAY add additional header lines as needed. This
&gt; &gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; &gt; same header keys.
&gt; &gt; 
&gt; &gt; Parsers MUST NOT rely on the order of these additional lines.
&gt; &gt; 
&gt; &gt; Additional header lines MUST NOT use any keywords specified in the
&gt; &gt; relay measurements format.

And if there are, the parser MAY ignore conflicting keywords.

&gt; &gt; If a header line does not conform to this format, the line SHOULD be
&gt; &gt; ignored by parsers.
&gt; 
&gt; Suggestion: say what recipients of this document should do with
&gt; unrecognized data.  In general, it's good for forward compatibility to
&gt; say something like, "Recipients MUST ignore key_value lines if they do
&gt; not recognize the keyword. Recipients MUST ignore any extra material in
&gt; a line that they do not recognize."

We should specify what parsers should do with every MUST in the document.

&gt; Also see suggestion above about using SP as our separator rather than
&gt; "=" for consistency with other documents Tor parses.
&gt; 
&gt; &gt; NL
&gt; &gt; 
&gt; &gt; [Zero or one time.]
&gt; &gt; 
&gt; &gt; The header ends.
&gt; &gt; 
&gt; &gt; This line has been added in version 1.1.0 of this specification.
&gt; &gt; 
&gt; &gt; For version 1.0.0 documents, the header ends when the first relay
&gt; &gt; measurement line is found conforming to the next section.
&gt; 
&gt; Suggestion: Replace this empty line with an explicit keyword, for
&gt; consistency with other documents.
&gt; 
&gt; &gt; 2.3. Relay measurements format
&gt; &gt; 
&gt; &gt; It consists of zero or more relay_line with the measurement results
&gt; &gt; of relays in arbitrary order.
&gt; &gt; 
&gt; &gt; There can be at most one relay_line per relay identity (fingerprint).
&gt; &gt; 
&gt; &gt; There MUST NOT be multiple key_value pairs with the same key in the same
&gt; &gt; relay_line.

And if there are, the parser SHOULD choose an arbitrary value.

&gt; &gt; Each relay_line MUST include the following key_value in arbitrary order:
&gt; 
&gt; Do existing implementations accept arbitrary order here?

Existing Tor implementations do not accept node_id at the end of a line.
https://trac.torproject.org/projects/tor/ticket/26004

We should:
* add this as a MUST NOT in 1.0.0, and
* allow it in 1.1.0, with a list of tor versions that support it

If we use the standard directory parser, each relay line will have to start with a \
keyword. Perhaps we should use "b" or "r" or "n". This would be a breaking change.

&gt; &gt; "node_id=" fingerprint
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The fingerprint of the relay being measured.
&gt; 
&gt; Suggestion: Add a field to hold the Ed25519 Identity of the relay being
&gt; measured.  Say that implementations SHOULD include both RSA fingerprint
&gt; and Ed25519 identity, and that implementations SHOULD accept lines that
&gt; contain at least one of them.

Suggestion: the ed25519 IDs should be base64 encoded, without a trailing =, because a \
trailing = makes the format ambiguous.

&gt; &gt; "bw=" bandwidth
&gt; &gt; 
&gt; &gt; [Exactly once.]
&gt; &gt; 
&gt; &gt; The measured bandwidth of this relay.
&gt; &gt; 
&gt; &gt; Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt; &gt; implementations. Therefore, implementations SHOULD NOT produce zero
&gt; &gt; bandwidths. Instead, they SHOULD use one as their minimum bandwidth.

And if there are zero bandwidths, the parser MAY ignore them.

&gt; &gt; Multiple measurements can be aggregated using an averaging scheme, such
&gt; &gt; as a mean, median, or decaying average.
&gt; &gt; 
&gt; &gt; Torflow scales bandwidths to kilobytes per second. Other implementations
&gt; &gt; SHOULD use kilobytes per second for their initial bandwidth scaling.
&gt; &gt; 
&gt; &gt; If different implementations or configurations are used in votes for the
&gt; &gt; same network, their measurements MAY need further scaling. See Appendix B
&gt; &gt; for information about scaling, and one possible scaling method.
&gt; &gt; 
&gt; &gt; key_value
&gt; &gt; 
&gt; &gt; [Zero or more times.]
&gt; 
&gt; Technically, this isn't a key_value, because a "value" is made of
&gt; ArgumentChar, and ArgumentChar can contain spaces.  So if we were
&gt; parsing
&gt; "foo=abc bar=def"
&gt; we might be parsing either one key_value ("foo", "abc bar=def") or two
&gt; ("foo", "abc"), ("bar, "def").

Let's exclude SP from value to resolve this issue.

&gt; &gt; Future format versions may include additional key_value pairs on a relay_line.
&gt; &gt; Additional key_value pairs will be accompanied by a minor version increment.
&gt; &gt; 
&gt; &gt; Implementations MAY add additional relay key_value pairs as needed. This
&gt; &gt; specification SHOULD be updated to avoid conflicting meanings for the
&gt; &gt; same relay keys.
&gt; &gt; 
&gt; &gt; Parsers MUST NOT rely on the order of these additional key_value pairs.
&gt; &gt; 
&gt; &gt; Additional key_value pairs MUST NOT use any keywords specified in the
&gt; &gt; header format.

And if there are, the parser MAY ignore conflicting keywords.

&gt; As above, let's say that a parser should ignore key_value entries with
&gt; keywords that it doesn't recognize.
&gt; 
&gt; &gt; 
&gt; &gt; If a relay line does not conform to this format, the line SHOULD be
&gt; &gt; ignored by parsers.
&gt; &gt; …

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi \
Nick,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Juga asked me to comment on your review, so she could \
read it before our bandwidth meeting this week. If I don't comment on a suggestion, \
you should assume I agree with it.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Backwards \
Compatibility&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Nick asked about backwards compatibility. This \
format uses semantic versioning. Tor 0.2.9 - 0.3.3 reads format version 1.0.0. It \
also reads format 1.1.0, but ignores the new features with \
warnings.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we want to introduce an incompatible format, we \
should call it 2.0.0, because semantic versioning requires a major increment for \
breaking changes.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's how we could add the new \
format:&lt;/div&gt;&lt;div&gt;* The new format should have a new torrc option.&lt;/div&gt;&lt;div&gt;* Tor \
should be modified to support the new format, and we should put time on the roadmap \
for people to work on implementing, testing, or reviewing it.&lt;/div&gt;&lt;div&gt;* Either we \
should backport the new format to the latest stable release, or sbws should produce \
both formats.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The current implementation has at least one \
security bug, some weird order restrictions, and some line length restrictions. So I \
would support re-implementing it using the standard directory document parsing code. \
Even if that takes more time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Testing the \
format&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Most of us don't have a spare directory authority for \
testing.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If you run chutney with my bwfile branch, all the \
authorities in the network read /tmp/bwfile for every consensus. Look for the \
warnings at the end of the chutney output.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The basic-min \
network is fast:&lt;/div&gt;&lt;div&gt;chutney/tools/test-network.sh --flavour \
basic-min&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's the branch:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/teor2345/chutney/commit/ebdb4760fbcae40979ab248e4208c27a71ccc \
b11"&gt;https://github.com/teor2345/chutney/commit/ebdb4760fbcae40979ab248e4208c27a71cccb11&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've \
already found one minor security bug using this branch: \
#26007.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Next Steps&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm going to be \
away next week for a week and a half. I encourage other people to make decisions \
while I'm away, so we can keep making progress.&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 1 May 2018, at \
22:36, Nick Mathewson &lt;&lt;a \
href="mailto:nickm@alum.mit.edu"&gt;nickm@alum.mit.edu&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi, Juga! \
&lt;br&gt;&lt;br&gt;This is a review of the document from &lt;a \
href="https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eb \
a2a13bfb/bandwidth-file-spec.txt"&gt;https://raw.githubusercontent.com/juga0/torspec/c7f06023dd1d5d47adad128de541f8eba2a13bfb/bandwidth-file-spec.txt&lt;/a&gt; \
, which I *think* is the same as the document you have \
below.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm reviewing this as though it were a fully new \
format, since I'm not sure how much we already have locked-in based on existing code, \
and how much is new.  We might decide that backward compatibility is more \
important than consistency, and if so, we won't want to take all of my \
recommendations here.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&gt;           \
Tor Bandwidth Measurements Document \
Format&lt;br&gt;&gt;             \
                 \
juga&lt;br&gt;&gt;            &amp;n \
bsp;                \
teor&lt;br&gt;&gt;&lt;br&gt;&gt; 1. Scope and preliminaries&lt;br&gt;&gt;&lt;br&gt;&gt;   This \
document describes the format of Tor's bandwidth \
measurements&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Replace \
measurements document with list?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   document, version 1.0.0 and \
later.&lt;br&gt;&lt;br&gt;Suggestion: Maybe explicitly say "1.0.0, 1.1.0, and \
later"?&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   Since Tor version 0.2.4.12-alpha the \
directory&lt;br&gt;&gt;   authorities use the bandwidth measurements document \
called&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Replace measurements document with \
list?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   "V3BandwidthsFile" and produced by Torflow \
[1]&lt;br&gt;&gt;   (format described in README.spec.txt \
[2]).&lt;br&gt;&lt;br&gt;Recommendation: "Format described in Torflow's \
README.spec.txt".&lt;br&gt;&lt;br&gt;Explanation needed: Is this a new format, or a new \
specification of the&lt;br&gt;existing format?  Let's say so \
here.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A new specification \
for the existing format 1.0.0.&lt;/div&gt;&lt;div&gt;A new format 1.1.0, which is backwards \
compatible with 1.0.0 parsers.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Question: If this is a different format, and we're calling it \
version&lt;br&gt;1.0.0, what should we call the old one?  But later it seems that \
we're&lt;br&gt;introducing 1.1.0, and we're calling the old one \
1.0.0.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"The Legacy \
Torflow format" or just "legacy"?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Suggestion: let's be explicit that we're only describing the \
format&lt;br&gt;here, and *not* describing how bwauths generate their \
data.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I agree. We want to \
leave room for peerflow and future schemes.&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;So we might want to:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;* replace every "measurements \
document" with "list"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;* replace every "measurements scanner" with \
"generator"&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;     The key words "MUST", "MUST NOT", \
"REQUIRED", "SHALL", "SHALL&lt;br&gt;&gt;     NOT", "SHOULD", "SHOULD \
NOT", "RECOMMENDED",  "MAY", and&lt;br&gt;&gt;     "OPTIONAL" in \
this document are to be interpreted as described in&lt;br&gt;&gt;     \
RFC 2119.&lt;br&gt;&gt;&lt;br&gt;&gt; 1.2. Acknowledgements&lt;br&gt;&gt;&lt;br&gt;&gt;   The \
original bandwidth measurement scanner \
(Torflow)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Replace measurement scanner with \
generator?&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt; and \
format was&lt;br&gt;&gt;   created by mike. Teor suggested to write this \
specification while&lt;br&gt;&gt;   contributing on pastly's new bandwidth \
scanner implementation.&lt;br&gt;&gt;&lt;br&gt;&gt;   This specification was revised \
after feedback from:&lt;br&gt;&gt;&lt;br&gt;&gt;     \
XXX&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please \
update.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt; 1.3 \
Outline&lt;br&gt;&gt;&lt;br&gt;&gt;   The bandwidth measurements mentioned in sections \
3.4.1 and 3.4.2&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Hmm, the dir-spec calls them \
measurements.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Maybe we should fix it as well.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   of "Tor directory \
protocol" (dir-spec.txt) [3] are obtained&lt;br&gt;&gt;   by bandwidth \
authorities,&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is a bandwidth \
authority a directory authority that votes for bandwidths?&lt;/div&gt;&lt;div&gt;Or is it a \
bandwidth generator that produces the bandwidth file?&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;which generate a file storing \
information&lt;br&gt;&gt;   on relays' measured bandwidth \
capacities.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Remove \
"measured".&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;&lt;br&gt;&gt; 1.4. Format \
Versions&lt;br&gt;&gt;&lt;br&gt;&gt;    1.0.0 - The legacy fallback bandwidth \
measurements document \
format&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Instead of "bandwidth measurements \
document format", say "bandwidth list"?&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;&lt;br&gt;&gt;    1.1.0 - Adds \
key_value lines to the header, format \
version,&lt;br&gt;&gt;            \
optional ones and section separator.&lt;br&gt;&lt;br&gt;Information: Let's repeat in this section \
which versions of Tor can&lt;br&gt;consume these \
versions.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All Tor \
versions can consume format version 1.0.0.&lt;/div&gt;&lt;div&gt;All Tor versions can consume \
format version 1.1.0, but they warn on header lines.&lt;/div&gt;&lt;div&gt;See &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/25960"&gt;https://trac.torproject.org/projects/tor/ticket/25960&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt; 2. Format \
details&lt;br&gt;&gt;&lt;br&gt;&gt;   Bandwidth measurements MUST contain the following \
sections:&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And if they \
don't, the file SHOULD be ignored.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   - Header (exactly once)&lt;br&gt;&gt;   - \
Relays measurements (zero or more times)&lt;br&gt;&lt;br&gt;Grammar suggestion: "Relay \
measurements".&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Replace \
"measurements" with "bandwidths"?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt; 2.1. Definitions&lt;br&gt;&gt;&lt;br&gt;&gt;   The following \
nonterminals are defined in dir-spec.txt, sections&lt;br&gt;&gt;   1.2., 2.1.1., \
&lt;a href="http://2.1.3."&gt;2.1.3.&lt;/a&gt;:&lt;br&gt;&gt;&lt;br&gt;&gt;     \
Int&lt;br&gt;&gt;     SP (space)&lt;br&gt;&gt;     NL \
(newline)&lt;br&gt;&gt;     Keyword&lt;br&gt;&gt;     \
ArgumentChar&lt;br&gt;&gt;     fingerprint \
(hexdigest)&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Does this have to start with a "$" ?  I think it \
does.  Maybe we should be explicit about \
that.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It does. And we \
should.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;     nickname&lt;br&gt;&gt;&lt;br&gt;&gt;   \
Nonterminals defined in "Tor Directory List Format" \
(dir-list-spec.txt),&lt;br&gt;&gt;   section &lt;a \
href="http://2.2.1."&gt;2.2.1.&lt;/a&gt;:&lt;br&gt;&gt;&lt;br&gt;&gt;     \
version_number&lt;br&gt;&gt;&lt;br&gt;&gt;   We define the following \
nonterminals:&lt;br&gt;&gt;&lt;br&gt;&gt;     value ::= \
ArgumentChar+&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Excluding \
SP&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;     key_value ::= Keyword "=" \
value&lt;br&gt;&gt;     line ::= ArgumentChar* \
NL&lt;br&gt;&gt;     timestamp ::= Int&lt;br&gt;&gt;     \
bandwidth ::= Int&lt;br&gt;&gt;     relay_line ::= key_value (SP \
key_value)* NL&lt;br&gt;&gt;&lt;br&gt;&gt; 2.2. Header format&lt;br&gt;&gt;&lt;br&gt;&gt; Some header lines \
MUST appear in specific positions, as documented \
below.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;And if they don't, the file SHOULD \
be ignored.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt; All other lines can appear in any order.&lt;br&gt;&gt;&lt;br&gt;&gt; \
There MUST NOT be multiple key_value header lines with the same \
key.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;And if there are, the parser SHOULD \
choose an arbitrary line.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;All lines in the file MUST be 510 characters or less, to allow for the \
trailing newline and NUL characters. (The previous limit was 254 characters in Tor \
0.2.6.2-alpha and earlier.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;The parser MAY ignore longer lines.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Should we lift this restriction in \
1.1.0?&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Maybe \
this line belongs below in the key_value section?&lt;br&gt;&lt;br&gt;&gt; It consists \
of:&lt;br&gt;&gt;&lt;br&gt;&gt;   timestamp NL&lt;br&gt;&gt;&lt;br&gt;&gt;     \
[At start, exactly once.]&lt;br&gt;&gt;&lt;br&gt;&gt;     The Unix Epoch time \
in seconds when the file was created.&lt;br&gt;&lt;br&gt;Question: Why no keyword and equal sign \
here?  Is this a legacy \
thing?&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes, tor expects a \
Unix timestamp on a single line by itself.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Also, wouldn't it be more standard to have it be in \
YYYY-MM-DDTHH:MM:SS&lt;br&gt;format?&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor \
refuses to read bandwidth files unless they start with an integer on a line by \
itself. So  this would be a breaking change.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;   "version=" version_number \
NL&lt;br&gt;&gt;&lt;br&gt;&gt;     [In second position, zero or one \
time.]&lt;br&gt;&gt;&lt;br&gt;&gt;     The specification document format \
version.&lt;br&gt;&gt;     It uses semantic versioning \
[5].&lt;br&gt;&gt;&lt;br&gt;&gt;     This line has been added in version \
1.1.0 of this specification.&lt;br&gt;&gt;&lt;br&gt;&gt;     Version 1.0.0 \
documents do not contain this line, and the&lt;br&gt;&gt;     \
version_number is considered to be "1.0.0".&lt;br&gt;&lt;br&gt;General concern: I question the \
use of = signs here in the headers.  If&lt;br&gt;we use "SP" instead, then we can \
reuse a lot of the same machinery tor&lt;br&gt;currently uses to parse other \
documents.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think using \
SP is fine.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But if we want to re-use the parsing machinery, \
we probably need to add a keyword to the initial timestamp. That would be a breaking \
change.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;div \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180505011847</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-05 01:18:47-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/alternative)]


On 2 May 2018, at 22:39, teor &lt;teor2345@gmail.com&gt; wrote:

&gt;&gt; &gt;     Tor accepts zero bandwidths, but they trigger bugs in older Tor
&gt;&gt; &gt;     implementations. Therefore, implementations SHOULD NOT produce zero
&gt;&gt; &gt;     bandwidths. Instead, they SHOULD use one as their minimum bandwidth.
&gt; 
&gt; And if there are zero bandwidths, the parser MAY ignore them.

Bandwidth files also need to respect MaxAdvertisedBandwidth and
RelayBandwidthRate/Burst. We need to specify that the relay descriptor
bandwidth rate and burst should limit the bandwidths in the file.

Torflow supports MaxAdvertisedBandwidth by putting relays in partitions
that match their bandwidth. Maybe it also does some other adjustments.

sbws can probably just do a min() using the measured bandwidth:
https://github.com/pastly/simple-bw-scanner/issues/155

For details, see:
https://trac.torproject.org/projects/tor/ticket/8494#comment:5

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;On 2 May 2018, at 22:39, teor \
&lt;&lt;a href="mailto:teor2345@gmail.com"&gt;teor2345@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&gt;     Tor accepts \
zero bandwidths, but they trigger bugs in older Tor&lt;br&gt;&gt;     \
implementations. Therefore, implementations SHOULD NOT produce \
zero&lt;br&gt;&gt;     bandwidths. Instead, they SHOULD use one as \
their minimum bandwidth.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;And if there are zero bandwidths, \
the parser MAY ignore \
them.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bandwidth files also need to \
respect MaxAdvertisedBandwidth and&lt;/div&gt;&lt;div&gt;RelayBandwidthRate/Burst. We need to \
specify that the relay descriptor&lt;/div&gt;&lt;div&gt;bandwidth rate and burst should limit the \
bandwidths in the file.&lt;/div&gt;&lt;br&gt;&lt;div&gt;Torflow supports &lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;MaxAdvertisedBandwidth by putting relays in \
partitions&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;that match their bandwidth. Maybe it also does some other \
adjustments.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;sbws can probably just do a min() using the measured \
bandwidth:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/pastly/simple-bw-scanner/issues/155"&gt;https://github.com/pastly/simple-bw-scanner/issues/155&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For \
details, see:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/8494#comment:5"&gt;https://trac.tor \
project.org/projects/tor/ticket/8494#comment:5&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180506205400</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-06 20:54:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

teor:
&gt; Hi Nick,
&gt; 
&gt; &gt; Suggestion: Add a field to hold the Ed25519 Identity of the relay being
&gt; &gt; measured.  Say that implementations SHOULD include both RSA fingerprint
&gt; &gt; and Ed25519 identity, and that implementations SHOULD accept lines that
&gt; &gt; contain at least one of them.
&gt; 
&gt; Suggestion: the ed25519 IDs should be base64 encoded, without a trailing =, because \
&gt; a trailing = makes the format ambiguous. 

You're talking about the certificate, right?.
This would change the concept of "line", since the certificate is more
than one "line".

This is how it is defined in dir-list-spec.txt

base64-encoded-ed25519-identity :== "-----BEGIN ED25519 CERT-----" NL
    certificate "-----END ED25519 CERT-----" NL
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180426103219</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-26 10:32:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

[Attachment #2 (multipart/signed)]


George Kadianakis:
&gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; 
&gt; &gt; Mike Perry:
&gt; &gt;&gt; Mike Perry:
&gt; &gt;&gt; &gt; Heyo.
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt; &gt;&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html
&gt; &gt;&gt; 
&gt; &gt;&gt; 3. Describe adversary models for our variant proposals from the notes.
&gt; &gt;&gt;    (Why do we disagree? In Mike's case, my disagreements are because I
&gt; &gt;&gt;     think each step is an improvement over previous/status quo -- we can
&gt; &gt;&gt;     decide harder things later and still do better both now and later.)
&gt; &gt;
&gt; &gt; Ok, in the interest of getting closer to an adversary model, let's first
&gt; &gt; start with enumerating the properties the proposals below provide.
&gt; &gt; Properties #1-5 have parenthesis at the end of them.  When the condition
&gt; &gt; in parenthesis is met for property #N, we'll call that "strong #N".
&gt; &gt;
&gt; 
&gt; Thanks Mike for this email. I think this moves us forward quite a bit
&gt; with an adversary model here! Here is some feedback:
&gt; 
&gt; &gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt; 
&gt; Can we have a bit of more detailed description about the two properties above?
&gt; (2) seems like a superset of (1), so making these properties clear would be useful.

Yes, if a defense provides #2, then it always provides #1. Also, a
defense provides #1 without providing #2 (by using two guards equally,
for example).

Or said a different way, an attacker who can break #2 can sometimes use
that to break #1. 

To avoid confusion, I don't think we should change the property wording
or numbering until we do another round of proposal comparison, and/or
until people propose new properties that some designs satisfy (or
failed to satisfy).
 
&gt; &gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;   4. DoS/Guard node downtime signals are rare (absent)
&gt; 
&gt; Also, what does property (4) mean exactly?

Property 4 is the best argument for using two guards as opposed to only
fiddling with restrictions. With the current way we handle onionskin
failure (#25347), clients will simply lose connectivity by way of
endless DESTROY responses before making a valid circuit. This means that
the adversary can onionskin-DoS guard nodes one at a time, and wait for
a hidden service to become unresponsive. That is what it means to have a
DoS (or downtime) signal.

Using two guards dumbly makes this rare. Both are down at the same time
by chance much less frequently than one is down, and a two-node DoS
search is harder to pull off when the adversary has to keep pairs (or
more) nodes offline at the same time, without taking other services
offline and causing false positives.

Using additional guards as soon as things fail makes these signals
absent, in theory. If a client is always trying to connect to new
guards, as long as the client can connect to the network, it will find a
guard that works pretty soon. This is also be another way of using two
guards dumbly, though.

&gt; &gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt;
&gt; 
&gt; Also it might be useful to rate the current guard design with these
&gt; properties and see how well we are currently doing.
&gt; 
&gt; IIUC, since we use all the primaries for dirguards it provides:
&gt;       1. Hidden service use can't push you over to an unused guard (at all).
&gt;       3. Exits and websites can't push you over to an unused guard (at all)

If by current design, you mean the current network as-is without
changing any consensus parameters, then these two aren't provided.

Since the current design is "num primary guard to use"=1, the current
design tries really hard to use only this guard. This means that as soon
as a hidden service chooses that guard as it's RP, it will use a second
guard. This second guard is normally unused. Hence: Hidden service use
pushed the service over to an unused guard.

Similarly, if website can cause a client to keep connecting through
different circuits over and over (via at least 3 different attacks,
mentioned in the other thread), then it can eventually cause that client
to use a second guard. We want to fix this for other reasons (guard
discovery), but that doesn't change it as a property here. And there may
be more like them if we fix just these three.
 
&gt; Because of the path restrictions it also provides:
&gt;       5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;       7. Relays in the same family can't be forced to correlate Exit traffic.

Correct. It does provide these.
 
&gt; It does *not* provide
&gt;       2. Hidden service use can't influence your choice of guard (at all).
&gt;       4. DoS/Guard node downtime signals are rare (absent)
&gt;       6. Information about the guard(s) does not leak to the website/RP (at all).

Correct. It does not provide these.
 
&gt; Let me know if I messed it up.
&gt; 
&gt; Clearly since everyone in this thread wants to improve the current
&gt; situation, the properties the current system lacks are important. In
&gt; particular it seems like (2) and (6) are particularly important properties.
&gt; 
&gt; &gt;&gt; Roger's proposal:
&gt; &gt;&gt; * Remove /16 and family path restrictions between guard and last hop
&gt; &gt;&gt; * Optionally, dir auths don't give you Guard if you're an Exit
&gt; &gt;&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt; &gt;&gt; * First and backup guard are chosen in different /16's and different families
&gt; &gt;
&gt; &gt; Depending on how good the padding is, this proposal maybe-provides:
&gt; &gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;
&gt; &gt; Depending on how good the detection mechanism is:
&gt; &gt;   4. DoS/Guard node downtime signals are much more rare (absent)
&gt; &gt;
&gt; &gt; It provides strong:
&gt; &gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;
&gt; &gt; It provides:
&gt; &gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt;
&gt; 
&gt; How does it provide 7?

Woops, it does not. All it does is prevent the same *node* from being
used in the Guard and Exit position. I mixed that up with an earlier
revision of these properties...

&gt; &gt;&gt; Aaron's proposal:
&gt; &gt;&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt; &gt;&gt; * First and backup guard are chosen in different /16's and different families
&gt; &gt;
&gt; &gt; Depending on how good the padding is, this proposal maybe-provides:
&gt; &gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;
&gt; &gt; Depending on how good the detection mechanism is:
&gt; &gt;   4. DoS/Guard node downtime signals are much more rare (absent)
&gt; &gt;
&gt; &gt; It provides strong #5:
&gt; &gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;
&gt; &gt; It provides #7:
&gt; &gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt;
&gt; &gt; It does not provide #2 or #6:
&gt; &gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; 
&gt; How come Aaron's proposal provides the same benefits as Roger's even tho
&gt; they different? Am I missing something?

Aaron's proposal actually does provide #7.

The key difference between the two is Roger's "Remove /16 and family
path restrictions between guard and last hop". That causes Roger to lose
#7. They also differ in the Guard+Exit flag assignment, but in this case
that does not change the properties provided, because no node
restrictions are removed.

&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; &gt; Ok, so here's a proposal that gets strong #1-4, and regular #5-7. It is
&gt; &gt; my current favorite:
&gt; &gt;
&gt; &gt;&gt;  * Set "num primary guards"=2 and "num primary guards to use"=2
&gt; &gt;&gt;  * Don't give Exit nodes the Guard flag.
&gt; &gt;&gt;  * Allow "same node, same /16, same family" between guard and last hop,
&gt; &gt;&gt;    but only for HS circuits (which are at least 4 hops long for these
&gt; &gt;&gt;    cases).
&gt; &gt;&gt;  * Allow same /16 and same family for HS circuits.
&gt; &gt;&gt;  * When a primary guard leaves the consensus, pick a new one.
&gt; 
&gt; We already do this one. Primary guards come from the filtered set, and
&gt; filtered set guards need to be listed in the consensus. See
&gt; entry_guard_passes_filter(). If this is not the case in reality, it's a bug.

Good.

&gt; &gt;&gt;  * If both primary guards are down/not completing circuits, pick a new one.
&gt; &gt;
&gt; 
&gt; Hmm, this is almost impossible to do. People with laptops and unstable
&gt; networks frequently have both of their primary guards marked as
&gt; unreachable while Tor is trying to reach network. Picking new primaries
&gt; at that point would not be a good move.

Yuck. Well, minimizing this time/chance perhaps. Like if the client has
a TLS connection but both are failing all onionskins, then choose a
third?

&gt; &gt; Strong:
&gt; &gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;   4. DoS/Guard node downtime signals are rare (absent)
&gt; &gt; 
&gt; &gt; Regular:
&gt; &gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; 
&gt; All in all I like the above proposal (modulo the issues above) and I
&gt; think it's quite sane, and gets the best of most worlds ;) We should
&gt; perhaps think more about it and try to spec it out! :)

I would prefer a proposal that has strong #6, but I think we are close
to that. All we need to do is prevent the case where "one guard down &amp;&amp;
guards can be chosen next to the RP."

Right now, I am leaning towards a hack that says "Vanguards can choose a
guard before the RP." We'd still be S - G - L2 - L3 - G - RP in that
case, though. As I said, an alternative is S - G - L2 - L3 - RP, but I
think I would rather preserve unlinkability for services run on the same
Tor client. A third alternative is trying to minimize the "only one
guard down" time. Such downtime minimization does seem tricky, though.

I would also like to try to beef up #4 as much as we can. If we can't
make all node downtime signals absent, we should aim to minimize them.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180426110249</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-26 11:02:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; Mike Perry:
&gt;&gt; Mike Perry:
&gt;&gt; &gt; Heyo.
&gt;&gt; &gt; 
&gt;&gt; &gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt;&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html
&gt;&gt; 
&gt;&gt; 3. Describe adversary models for our variant proposals from the notes.
&gt;&gt;    (Why do we disagree? In Mike's case, my disagreements are because I
&gt;&gt;     think each step is an improvement over previous/status quo -- we can
&gt;&gt;     decide harder things later and still do better both now and later.)
&gt;
&gt; Ok, in the interest of getting closer to an adversary model, let's first
&gt; start with enumerating the properties the proposals below provide.
&gt; Properties #1-5 have parenthesis at the end of them.  When the condition
&gt; in parenthesis is met for property #N, we'll call that "strong #N".
&gt;

Thanks Mike for this email. I think this moves us forward quite a bit
with an adversary model here! Here is some feedback:

&gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt;   2. Hidden service use can't influence your choice of guard (at all).

Can we have a bit of more detailed description about the two properties above?
(2) seems like a superset of (1), so making these properties clear would be useful.

&gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt;   4. DoS/Guard node downtime signals are rare (absent)

Also, what does property (4) mean exactly?

&gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt;

Also it might be useful to rate the current guard design with these
properties and see how well we are currently doing.

IIUC, since we use all the primaries for dirguards it provides:
      1. Hidden service use can't push you over to an unused guard (at all).
      3. Exits and websites can't push you over to an unused guard (at all)

Because of the path restrictions it also provides:
      5. Nodes are not reused for Guard and Exit positions ("any" positions)
      7. Relays in the same family can't be forced to correlate Exit traffic.

It does *not* provide
      2. Hidden service use can't influence your choice of guard (at all).
      4. DoS/Guard node downtime signals are rare (absent)
      6. Information about the guard(s) does not leak to the website/RP (at all).

Let me know if I messed it up.

Clearly since everyone in this thread wants to improve the current
situation, the properties the current system lacks are important. In
particular it seems like (2) and (6) are particularly important properties.

&gt;&gt; Roger's proposal:
&gt;&gt; * Remove /16 and family path restrictions between guard and last hop
&gt;&gt; * Optionally, dir auths don't give you Guard if you're an Exit
&gt;&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt;&gt; * First and backup guard are chosen in different /16's and different families
&gt;
&gt; Depending on how good the padding is, this proposal maybe-provides:
&gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt;
&gt; Depending on how good the detection mechanism is:
&gt;   4. DoS/Guard node downtime signals are much more rare (absent)
&gt;
&gt; It provides strong:
&gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;
&gt; It provides:
&gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt;

How does it provide 7?

&gt;
&gt; &lt;snip&gt;
&gt;
&gt;&gt; Aaron's proposal:
&gt;&gt; * Use first guard but pad to backup guard so the switch isn't as obvious
&gt;&gt; * First and backup guard are chosen in different /16's and different families
&gt;
&gt; Depending on how good the padding is, this proposal maybe-provides:
&gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt;
&gt; Depending on how good the detection mechanism is:
&gt;   4. DoS/Guard node downtime signals are much more rare (absent)
&gt;
&gt; It provides strong #5:
&gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;
&gt; It provides #7:
&gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt;
&gt; It does not provide #2 or #6:
&gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;  

How come Aaron's proposal provides the same benefits as Roger's even tho
they different? Am I missing something?

&gt; &lt;snip&gt;
&gt;
&gt; Ok, so here's a proposal that gets strong #1-4, and regular #5-7. It is
&gt; my current favorite:
&gt;
&gt;&gt;  * Set "num primary guards"=2 and "num primary guards to use"=2
&gt;&gt;  * Don't give Exit nodes the Guard flag.
&gt;&gt;  * Allow "same node, same /16, same family" between guard and last hop,
&gt;&gt;    but only for HS circuits (which are at least 4 hops long for these
&gt;&gt;    cases).
&gt;&gt;  * Allow same /16 and same family for HS circuits.
&gt;&gt;  * When a primary guard leaves the consensus, pick a new one.

We already do this one. Primary guards come from the filtered set, and
filtered set guards need to be listed in the consensus. See
entry_guard_passes_filter(). If this is not the case in reality, it's a bug.

&gt;&gt;  * If both primary guards are down/not completing circuits, pick a new one.
&gt;

Hmm, this is almost impossible to do. People with laptops and unstable
networks frequently have both of their primary guards marked as
unreachable while Tor is trying to reach network. Picking new primaries
at that point would not be a good move.

&gt; Strong:
&gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt;   4. DoS/Guard node downtime signals are rare (absent)
&gt; 
&gt; Regular:
&gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;   7. Relays in the same family can't be forced to correlate Exit traffic.

All in all I like the above proposal (modulo the issues above) and I
think it's quite sane, and gets the best of most worlds ;) We should
perhaps think more about it and try to spec it out! :)

Let's see what other people think.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426221647</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-26 22:16:47-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>



&gt; On 25 Apr 2018, at 18:30, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; 1. Hidden service use can't push you over to an unused guard (at all).
&gt;  2. Hidden service use can't influence your choice of guard (at all).
&gt;  3. Exits and websites can't push you over to an unused guard (at all)
&gt;  4. DoS/Guard node downtime signals are rare (absent)
&gt;  5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;  6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;  7. Relays in the same family can't be forced to correlate Exit traffic.

I think this list is missing some important user-visible properties, or it's
not clear which property above corresponds to these properties:

* Is Tor reliable and responsive when guards go down, or when I move
  networks, or when I have lost and regained service?

I also think it's missing an implicit property, which we should make explicit:

* Can Tor users be fingerprinted by their set of guards or directory guards?

Perhaps this property is out of scope.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427104327</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-27 10:43:27-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

[Attachment #2 (multipart/signed)]


teor:
&gt; 
&gt; 
&gt; &gt; On 25 Apr 2018, at 18:30, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; 1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;  2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt;  3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;  4. DoS/Guard node downtime signals are rare (absent)
&gt; &gt;  5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;  6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;  7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; 
&gt; I think this list is missing some important user-visible properties, or it's
&gt; not clear which property above corresponds to these properties:
&gt; 
&gt; * Is Tor reliable and responsive when guards go down, or when I move
&gt;   networks, or when I have lost and regained service?

I think this is implicitly provided by #4. Downtime is a security issue.
If (any of) a client Guard(s) are down, and the adversary can detect
this based on client behavior, well, that is a side channel signal that
provides information about the Guard. So by satisfying #4, we also
satisfy the weaker conditions of general reliability and responsiveness.
 
&gt; I also think it's missing an implicit property, which we should make explicit:
&gt; 
&gt; * Can Tor users be fingerprinted by their set of guards or directory guards?
&gt; 
&gt; Perhaps this property is out of scope.

I think it is worth considering. We should add it if we need to do
another round of evaluation.

But remmeber that we are already in the situation where Tor is using two
guards for a lot (or all) users right now: it uses a second guard right
now whenever an RP or Exit is the same as the Guard node, or is chosen
from the same /16 or family as the Guard node. Depending on how unlucky
you are, you could be using 2 guards pretty often right now. Just not
often enough to benefit from any multiplexing and netflow padding.

Tor also currently uses 3 directory guards, and unless we set "num entry
guards to use" and "num entry guards" to the same number, these are
different nodes than the primary guard. Miraculously, if we set this to
two, then Tor uses those two primary guards *as* its directory guards.
This means that any proposal that said "Set these to 2" has *less*
fingerprinting than those that did not. My proposal was the only one
that explicitly said this, but I think asn wants this too.

That means if we accept the proposal at the end of my mail, which gets
us strong #1-4, non-strong #5, strong #6 (with mods), and #7, then we'll
have less guard fingerprintability than today.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502201621</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-05-02 20:16:21-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

[Attachment #2 (multipart/signed)]


George Kadianakis:
&gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; 
&gt; &gt; Mike Perry:
&gt; &gt;&gt; teor:
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; &gt; On 25 Apr 2018, at 18:30, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt;&gt; &gt; &gt; 
&gt; &gt;&gt; &gt; &gt; 1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;&gt; &gt; &gt;  2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt;&gt; &gt; &gt;  3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;&gt; &gt; &gt;  4. DoS/Guard node downtime signals are rare (absent)
&gt; &gt;&gt; &gt; &gt;  5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;&gt; &gt; &gt;  6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;&gt; &gt; &gt;  7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; I think this list is missing some important user-visible properties, or it's
&gt; &gt;&gt; &gt; not clear which property above corresponds to these properties:
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; * Is Tor reliable and responsive when guards go down, or when I move
&gt; &gt;&gt; &gt;   networks, or when I have lost and regained service?
&gt; &gt;&gt; 
&gt; &gt;&gt; I think this is implicitly provided by #4. Downtime is a security issue.
&gt; &gt;&gt; If (any of) a client Guard(s) are down, and the adversary can detect
&gt; &gt;&gt; this based on client behavior, well, that is a side channel signal that
&gt; &gt;&gt; provides information about the Guard. So by satisfying #4, we also
&gt; &gt;&gt; satisfy the weaker conditions of general reliability and responsiveness.
&gt; &gt;&gt;  
&gt; &gt;&gt; &gt; I also think it's missing an implicit property, which we should make explicit:
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; * Can Tor users be fingerprinted by their set of guards or directory guards?
&gt; &gt;&gt; &gt; 
&gt; &gt;&gt; &gt; Perhaps this property is out of scope.
&gt; &gt;&gt; 
&gt; &gt;&gt; I think it is worth considering. We should add it if we need to do
&gt; &gt;&gt; another round of evaluation.
&gt; &gt;
&gt; &gt; Alright, for the sake of argument, let's call this Property #8:
&gt; &gt;   8. Less information from guard fingerprinting (the least information)
&gt; &gt;
&gt; &gt; I argue that this #8 is also equivalent to a #9 that Roger would ask
&gt; &gt; for:
&gt; &gt;   9. Fewer points of observation into the network (the fewest points).
&gt; 
&gt; If we are actually aiming for 8 and 9 we need to do something about the
&gt; numdirguard=3 situation, otherwise we still have a huge guard fpr and we
&gt; still expose ourselves to more of the network even if we keep one guard.

Yeah. Hrmm. I suppose this is a way that property #8 differs from
property #9... The dirguard usage increases fingerprinting, but if
observation for #9 means "observation of relayed application traffic",
then not setting the dirguards to 1 costs us #8, but not #9.

&gt; &gt; To avoid TL;DR, that argument is an exercise to the reader ;).
&gt; &gt;
&gt; &gt; Here is a proposal that beats my previous proposal on Property #8 and
&gt; &gt; #9, while trying to preserve as many of the other properties as
&gt; &gt; possible:
&gt; &gt;
&gt; &gt;  * Set "num primary guards"=1 and "num primary guards to use"=1
&gt; &gt;  * Set "num directory guards"=1 and "num directory guards to use"=1
&gt; &gt;  * Don't give Exit nodes the Guard flag.
&gt; &gt;  * Allow "same node, same /16, same family" between guard and last hop,
&gt; &gt;    but only for HS circuits (which are at least 4 hops).
&gt; &gt;  * Allow same /16 and same family for HS circuits.
&gt; 
&gt; This's for all hops? So all service-side HS circ hops can share the same
&gt; family? I gues that's OK since we don't know what's happening on the
&gt; other side of the HS circuit anyhow? Or what?

Yeah, that was my reasoning for defining property #7 in terms of Exit
traffic only. There may be alterations of this that prevent the same
family from being in every position of one end of the circuit, but since
we can't prevent the case where the same family is on both entry points
across the entire HS connection to correlate the entire circuit, I am
not sure how to define this property.

Maybe there is a difference if the same family is allowed to be the IP
and HSDIR, though, since that could allow forced correlation to
deanonymize the HS itself... We could consider preventing that. With one
guard, it definitely will leak information about the choice of IPs over
time, though, which is worse (and is the case today :/). With two guards
chosen from different families and /16, it should be fine with respect
to chosen IPs and used HSDIRs, except in the event that one of the
guard's downtime happens at the same time as an IP or HSDIR is chosen
from the same family as the still-up guard. This is a much more rare and
less risky event than the similar situation with an RP, though (since
the RP cycles frequently and can be adversary controlled).
 
&gt; &gt;  * When a primary guard leaves the consensus, pick a new one.
&gt; &gt;  * When a primary guard fails circuits, do $MAGIC_FAILURE_HEURISTIC.
&gt; 
&gt; What is the $MAGIC_FAILURE_HEURISTIC supposed to do? Also I doubt we can
&gt; do anything magic here, we even have trouble doing very naive stuff when
&gt; it comes to network-uptime response.

In order to preserve property #8 (and #9), this failure heuristic has to
try really hard not to quickly switch over to the second guard as soon
as there is a RESOURCELIMIT or other failure. It needs to be "sure" that
the guard is really down. This means waiting for some number of
RESOURCELIMITs or other failures to happen before the switch to the
second guard, which necessarily introduces some level of downtime
signal, which costs us property #4. (We already have decided in
https://trac.torproject.org/projects/tor/ticket/25347 that it is
preferable to accept large amounts of RESOURCELIMITs before switching
guards.)

That was the point of this proposal -- I wanted to demonstrate that with
only one guard, we basically have to accept either a louder downtime
signal, or we have to accept cases where we use two guards more often.

I still believe that two always-on guards is the better choice (and
gives us more flexibility with alternate ways to handle things like
family restrictions above), but I also wanted to compare apples to
apples in terms of one guard vs two guard proposals.

&gt; &gt; This proposal gets strong:
&gt; &gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt;   8. Less information from guard fingerprinting (the least information)
&gt; &gt;
&gt; &gt; It loses #4 (and your reliability point above), because if we transition
&gt; &gt; to a second guard too quickly when the first one starts failing, then we
&gt; &gt; lose the winning fingerprinting property we want to keep. So then
&gt; &gt; therefore, we must tolerate failure and RESOURCELIMIT issues and suffer
&gt; &gt; through connectivity issues during DoS:
&gt; &gt;   4. DoS/Guard node downtime signals are rare (absent) 
&gt; &gt;
&gt; &gt; It then gets us regular:
&gt; &gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt;
&gt; &gt; And again, we could get strong #6 if we allow the guard node for both RP
&gt; &gt; and the node before the RP:
&gt; &gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt;
&gt; &gt; So the key thing (in this property list) that forcing one guard causes us
&gt; &gt; to lose is reliability under DoS, which is a guard discovery vector (and
&gt; &gt; probably a source of other side channels, too).
&gt; &gt;

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313074349</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-13 07:43:49-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>


&gt; On 13 Mar 2018, at 03:55, dawuud &lt;dawuud@riseup.net&gt; wrote:
&gt; 
&gt; Out of 9900 possible two hop tor circuits among the top 100 tor relays
&gt; only 935 circuit builds have succeeded. This is way worse than the last
&gt; time I sent a report 6 months ago during the Montreal tor dev meeting.

How much worse?

And where did you scan *from*?
(It's hard to interpret the results without the latency and quality of your
client connection.)

Also, we have just deployed defences to exactly this kind of rapid circuit
or connection building by a single client. I wonder if your client triggered
those defences. The circuit defences would likely cause timeouts, and
the connection defences would likely cause failures.

I also wonder if your client triggered custom defences on some relays.

&gt; Here's the scanner I use:
&gt; 
&gt; https://github.com/david415/tor_partition_scanner
&gt; 
&gt; …
&gt; 
&gt; Here's the gist of my simple testing methodology:
&gt; 
&gt; https://gist.github.com/david415/9875821652018431dd6d6c4407bb90c0#file-detect_tor_network_partitions
&gt;  
&gt; Here's exactly how I performed the scan to get those results:
&gt; 
&gt; wget https://collector.torproject.org/recent/relay-descriptors/consensuses/2018-03-13-01-00-00-consensus
&gt;  
&gt; ./helpers/query_fingerprints_from_consensus_file.py 2018-03-1
&gt; 3-01-00-00-consensus &gt; top100.relays
&gt; 
&gt; detect_partitions.py --tor-control tcp:127.0.0.1:9051 --log-dir ./ --status-log \
&gt;                 ./status_log \
&gt; --relay-list top100.relays --secret secretTorEmpireOfRelays --partitions 1 \
&gt;                 --this-partition 0 \
&gt; --build-duration .25 --circuit-timeout 60 --log-chunk-size 1000 --max-concurrency \
&gt; 100

You might get better results if you scan more slowly.
Try to stay under 1 circuit every 3 seconds to each relay from
your IP address. Try to stay under 50 connections to the same
relay from your IP address.

I'm going from memory, check the Tor man page, dir-spec, and
the consensus for the latest DDoS parameter values.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313084751</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-03-13 08:47:51-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

On Tue, Mar 13, 2018 at 02:55:12AM +0000, dawuud wrote:
&gt; Out of 9900 possible two hop tor circuits among the top 100 tor relays
&gt; only 935 circuit builds have succeeded. This is way worse than the last
&gt; time I sent a report 6 months ago during the Montreal tor dev meeting.

The next step here would be to try to debug your results, to understand
if it's actually an issue with the Tor network (in which case, what
exactly is the issue), or if it's a bug in your scripts.

Teor asked some good questions.

Other questions I'd want to investigate:

(A) Are the failures consistent, or intermittent? That is, does a
failed link always fail, or only sometimes?

(B) Are you really sure that it failed? I would guess that 'failed'
is different from 'timeout' because it got an explicit destroy back?
If so, don't destroy cells have 'reason' components? Which reasons are
happening most commonly?

(C) We should find a link that is failing between two relays that we
both control, and look at each one more closely to see if there are any
hints. For example, is there anything in the logs? If we turn up the
logging, do we get any hints then?

(D) ...which leads to: we should run this same tool on the test network
that teor and dgoulet et al run, and look for failures there. Assuming we
find some, since there are no users on the test network, we can investigate
much more thoroughly.

(E) I wonder if there's a correlation between the failed links and
whether a TLS connection is already established on that link. That is,
when there is no connection already, there are many more steps that
need to be taken to extend the circuit, and those steps could lead to
increased failure rates, either due to the extra time that is needed,
or because part of tor's link handshake (NETINFO, etc) is going wrong.

And a last point: this tool, and these investigations, are exactly in
scope for the "network health" topic that the network team has been
discussing as one of the key open areas that need more attention.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313132403</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-03-13 13:24:03-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


&gt; How much worse?

During the Montreal tor dev meeting I counted 1947 circuit build failures.
https://lists.torproject.org/pipermail/tor-project/2017-October/001492.html

&gt; And where did you scan *from*?

I scaned from a server in the Netherlands.

&gt; (It's hard to interpret the results without the latency and quality of your
&gt; client connection.)

I can record latency. What do you mean by quality? I mean... I'm not using these
circuits to actually send and receive stuff.

&gt; Also, we have just deployed defences to exactly this kind of rapid circuit
&gt; or connection building by a single client. I wonder if your client triggered
&gt; those defences. The circuit defences would likely cause timeouts, and
&gt; the connection defences would likely cause failures.

aha! That might explain the terrible results, hopefully it's not that network
health has gotten worse in the last six months.

&gt; I also wonder if your client triggered custom defences on some relays.

I doubt it. I am not making sequential circuits to the same relays. The
relays choosen for each circuit builds are generated from a shuffle.
 
&gt; You might get better results if you scan more slowly.
&gt; Try to stay under 1 circuit every 3 seconds to each relay from

OK. I will try this. The scan will take longer but hopefully produce
more accurate and useful results.

&gt; your IP address. Try to stay under 50 connections to the same
&gt; relay from your IP address.

hmm OK. I can limit the number of concurrenct circuits that are being
built but I do not believe that txtorcon let's me control the number
of "connections" that little-t tor makes.

&gt; I'm going from memory, check the Tor man page, dir-spec, and
&gt; the consensus for the latest DDoS parameter values.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313134556</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-03-13 13:45:56-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


&gt; Other questions I'd want to investigate:
&gt; 
&gt; (A) Are the failures consistent, or intermittent? That is, does a
&gt; failed link always fail, or only sometimes?

Yes this is what our new testing methodology should support.
My current scanner is not sufficient. We want to improve it.

&gt; (B) Are you really sure that it failed? I would guess that 'failed'
&gt; is different from 'timeout' because it got an explicit destroy back?
&gt; If so, don't destroy cells have 'reason' components? Which reasons are
&gt; happening most commonly?

Yes I am sure it failed. It would be cool if txtorcon can expose the
'reason' but I think that it cannot. I suppose it will show up in the
tor log file if I set it to debug logging.

&gt; (C) We should find a link that is failing between two relays that we
&gt; both control, and look at each one more closely to see if there are any
&gt; hints. For example, is there anything in the logs? If we turn up the
&gt; logging, do we get any hints then?

Sounds good. I would certainly be willing to collaborate with Teor or anyone
else who might like to help with this.

&gt; (D) ...which leads to: we should run this same tool on the test network
&gt; that teor and dgoulet et al run, and look for failures there. Assuming we
&gt; find some, since there are no users on the test network, we can investigate
&gt; much more thoroughly.

Sounds good. Let me know if there is anything I can do to help with this.

&gt; (E) I wonder if there's a correlation between the failed links and
&gt; whether a TLS connection is already established on that link. That is,
&gt; when there is no connection already, there are many more steps that
&gt; need to be taken to extend the circuit, and those steps could lead to
&gt; increased failure rates, either due to the extra time that is needed,
&gt; or because part of tor's link handshake (NETINFO, etc) is going wrong.

Ah yes this is another good question for which I currently do not have an answer.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313144812</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-03-13 14:48:12-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


&gt; And where did you scan *from*?
&gt; (It's hard to interpret the results without the latency and quality of your
&gt; client connection.)

It turns out I am recording circuit build latency. It is unclear to
me exactly what you'd like me to do with this information however
here's a some silly queries:

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 50 AND duration &lt; 60;" | sqlite3 scan1.db 55.2818120117187
51.7696379394531
59.9406301269531

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 40 AND duration &lt; 50;" | sqlite3 scan1.db 41.0546398925781
40.1456608886719
48.2474660644531

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 30 AND duration &lt; 40;" | sqlite3 scan1.db 31.6949631347656
34.8123491210938
37.0733110351563
36.2936791992188

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 20 AND duration &lt; 30;" | sqlite3 scan1.db 29.2628620605469
28.2720109863281

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 10 AND duration &lt; 20;" | sqlite3 scan1.db 13.4959392089844
14.6635520019531
19.32987109375
14.2355910644531
13.9277241210937
13.3795317382812
12.9024929199219
12.3480061035156
11.711751953125
10.2423110351563
11.0780610351562
18.3046040039062

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 3 AND duration &lt; 10;" | sqlite3 scan1.db 8.98835498046875
3.93438012695312
4.10946020507812
9.21181396484375
8.1195078125
6.78396508789062
5.28444775390625
3.59763989257813

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&gt; 1 AND duration &lt; 3;" | sqlite3 scan1.db 2.05169384765625
1.69050805664062
1.86933813476563
2.22057397460937
1.82368383789063
2.53436987304688
1.80827685546875

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&lt; 1;" | sqlite3 scan1.db | wc -l 9837


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313150101</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-03-13 15:01:01-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

dawuud &lt;dawuud@riseup.net&gt; writes:

&gt;&gt; your IP address. Try to stay under 50 connections to the same
&gt;&gt; relay from your IP address.

&gt; hmm OK. I can limit the number of concurrenct circuits that are being
&gt; built but I do not believe that txtorcon let's me control the number
&gt; of "connections" that little-t tor makes.

I *think* they should be equivalent? Controllers can't control
everything Tor does, though (for example, Tor can decide to set up
circuits to fetch things or do its own measurements).

Related to this might be my own scanner; I keep 20 circuits in-flight at
any one time and am using random guards so it's "very unlikely" I'd even
have two connections to the same first hop at the same time. However, I
don't do anything about timing -- maybe we can take up this discussion
in an IRC channel?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313151153</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-03-13 15:11:53-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

dawuud &lt;dawuud@riseup.net&gt; writes:

&gt; Yes I am sure it failed. It would be cool if txtorcon can expose the
&gt; 'reason' but I think that it cannot. I suppose it will show up in the
&gt; tor log file if I set it to debug logging.

txtorcon does expose both the 'reason' and the 'remote_reason' flags
returned by the failure messages. In fact, it returns all flags that Tor
sent during stream or circuit failures.

The **kwargs in stream_closed, circuit_closed or circuit_failed
notifications should all include "REASON" and many times will also
include "REMOTE_REASON" (e.g. if the "other" relay closed the
connection). For convenience, txtorcon also includes lower-cased
versions of all the flags.

&gt;&gt; (C) We should find a link that is failing between two relays that we
&gt;&gt; both control, and look at each one more closely to see if there are any
&gt;&gt; hints. For example, is there anything in the logs? If we turn up the
&gt;&gt; logging, do we get any hints then?

&gt; Sounds good. I would certainly be willing to collaborate with Teor or anyone
&gt; else who might like to help with this.

I'm +1 here too. I'd like to better understand the failures I see in my
scanner as well.

&gt;&gt; (E) I wonder if there's a correlation between the failed links and
&gt;&gt; whether a TLS connection is already established on that link. That
&gt;&gt; is, when there is no connection already, there are many more steps
&gt;&gt; that need to be taken to extend the circuit, and those steps could
&gt;&gt; lead to increased failure rates, either due to the extra time that is
&gt;&gt; needed, or because part of tor's link handshake (NETINFO, etc) is
&gt;&gt; going wrong.

&gt; Ah yes this is another good question for which I currently do not have
&gt; an answer.

Would it be better, then, to pick one first hop and scan (sequentially)
every second-hop using that first hop? (And maybe have say 5 or 10 such
things going on at once?)

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313155214</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-03-13 15:52:14-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

teor &lt;teor2345@gmail.com&gt; writes:

&gt; And where did you scan *from*?
&gt; (It's hard to interpret the results without the latency and quality of your
&gt; client connection.)

If I correctly understand what David's scanner is doing, so long as "a"
connection can make it to the first hop properly any other failure is
"the Tor network's fault", isn't it? (I mean, unless the first-hop
connection is so crappy it sometimes just times out or drops).

To me the important thing here would be to do the scans consistently
from the same network-vantage point and then at least subsequent scans
can be compared more consistently (right?).

For my scans (which are 3-hop) I re-try failing combinations up to 5
times before completely giving up -- but still fail to scan a bunch of
relays. These tests *do* fetch real data, though, so there's a lot more
opportunity for "bad things" to happen which aren't a problem of "the
Tor network" necessarily.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180502200026</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-05-02 20:00:26-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


I think that many of my previous scans were not useful and
showed inaccurate results because the IP address i was scanning
from might have gotten black listed by dir-auths? or perhaps blocked
by many relays by the anti-denial-of-service mechanisms in tor?
i got rid of that virtual server and lost use of it's IP address... so we'll never \
know.

Katharina and I are interested in doing lots more thorough scans of
the Tor network rather than this limited methodology i've been using.

What are the guidelines to avoid getting blocked by the tor network?
Is it possible to check the consensus to see if a client IP has been blocked?


On Fri, Apr 27, 2018 at 09:12:59PM +0000, dawuud wrote:
&gt; 
&gt; Greetings,
&gt; 
&gt; (
&gt; Meejah and I made txtorcon report the reason for circuit
&gt; build failures here: https://github.com/meejah/txtorcon/pull/299
&gt; My scanner now uses this txtorcon feature:
&gt; https://github.com/david415/tor_partition_scanner
&gt; )
&gt; 
&gt; I used a collector consensus file: 2018-04-27-19-00-00-consensus
&gt; 
&gt; wget https://collector.torproject.org/recent/relay-descriptors/consensuses/2018-04-27-19-00-00-consensus
&gt;  
&gt; and extracted the top 100 relays with the highest consensus weights
&gt; with stable AND fast flags.
&gt; 
&gt; ./helpers/query_fingerprints_from_consensus_file.py 2018-04-27-19-00-00-consensus &gt; \
&gt; top100.relays 
&gt; and then performed the scan, building 9900 2-hop tor circuits:
&gt; 
&gt; detect_partitions.py --tor-control unix:/var/run/tor/control --log-dir ./ \
&gt;                 --status-log ./status_log \
&gt; --relay-list top100.relays --secret secretTorEmpireOfRelays --partitions 1 \
&gt;                 --this-partition 0 \
&gt; --build-duration .25 --circuit-timeout 60 --log-chunk-size 1000 --max-concurrency \
&gt; 100 
&gt; This resulted in only 307 circuit build failures:
&gt; 
&gt; echo "select reason from scan_log where status = 'failure'
&gt; &gt; ;" | sqlite3 scan1.db | wc -l
&gt; 307
&gt; 
&gt; And out of these failures, 301 of them the circuit build failure REASON was \
&gt; reported by little-t tor as TIMEOUT: 
&gt; echo "select reason from scan_log where status = 'failure';" | sqlite3 scan1.db | \
&gt; grep -i timeout | wc -l 301
&gt; 
&gt; Here's the non-timeout REASONs for these circuit build failures:
&gt; 
&gt; echo "select reason from scan_log where status = 'failure';" | sqlite3 scan1.db | \
&gt; grep -vi timeout 
&gt; DESTROYED, FINISHED
&gt; DESTROYED, FINISHED
&gt; DESTROYED, CHANNEL_CLOSED
&gt; DESTROYED, CHANNEL_CLOSED
&gt; DESTROYED, CHANNEL_CLOSED
&gt; DESTROYED, CHANNEL_CLOSED
&gt; 
&gt; 
&gt; I'm curious to try this scan at different times of day to see if results vary.
&gt; 
&gt; 
&gt; Cheers,
&gt; 
&gt; David
&gt; 
&gt; 
&gt; On Tue, Mar 13, 2018 at 11:48:30PM +0000, dawuud wrote:
&gt; &gt; 
&gt; &gt; I did another scan, this time with 3 seconds between each circuit
&gt; &gt; build and set the max connections to 50 with similar results as
&gt; &gt; yesterday:
&gt; &gt; 
&gt; &gt; 9354 failure
&gt; &gt; 2 timeout
&gt; &gt; 544 success
&gt; &gt; 
&gt; &gt; most of the circuit build failures happened in under a second:
&gt; &gt; 
&gt; &gt; echo "select (end_time - start_time) / 1000 as duration from scan_log where \
&gt; &gt; duration &lt; 1 AND status = 'failure';" | sqlite3 scan1.db | wc -l 9344
&gt; &gt; 
&gt; &gt; &gt; txtorcon does expose both the 'reason' and the 'remote_reason' flags
&gt; &gt; &gt; returned by the failure messages. In fact, it returns all flags that Tor
&gt; &gt; &gt; sent during stream or circuit failures.
&gt; &gt; &gt; 
&gt; &gt; &gt; The **kwargs in stream_closed, circuit_closed or circuit_failed
&gt; &gt; &gt; notifications should all include "REASON" and many times will also
&gt; &gt; &gt; include "REMOTE_REASON" (e.g. if the "other" relay closed the
&gt; &gt; &gt; connection). For convenience, txtorcon also includes lower-cased
&gt; &gt; &gt; versions of all the flags.
&gt; &gt; 
&gt; &gt; ah ok! I will take a look at this. I'd like to do another scan
&gt; &gt; while collecting this additional information.
&gt; &gt; 
&gt; &gt; &gt; Would it be better, then, to pick one first hop and scan (sequentially)
&gt; &gt; &gt; every second-hop using that first hop? (And maybe have say 5 or 10 such
&gt; &gt; &gt; things going on at once?)
&gt; &gt; 
&gt; &gt; Maybe it's ok to make 7,000+ tor circuits sequentially from the same relay
&gt; &gt; if it's done very slowly?
&gt; 
&gt; 
&gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502204100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-05-02 20:41:00-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; I think that many of my previous scans were not useful and
&gt; showed inaccurate 

I'm glad that it turned out that these previous results might have been inaccurate
(because the results were scary if found to be accurate)

&gt; results because the IP address i was scanning
&gt; from might have gotten black listed by dir-auths?

I don't see how dir auths could blacklist specific client IP addresses
(tor clients use fallbackdirs)

&gt; or perhaps blocked
&gt; by many relays by the anti-denial-of-service mechanisms in tor?

can you let me know the start and end date of the scan (2018-03-12?) so I can check how many of
the relays you scanned (the top 100 relays by cw? at the time) 
had a tor version with anti ddos features at the time?

During your first scans (2017) there have  been no anti-dos features.

&gt; i got rid of that virtual server and lost use of it's IP address... so we'll never know.
&gt; 
&gt; Katharina and I are interested in doing lots more thorough scans of
&gt; the Tor network rather than this limited methodology i've been using.

I'm excited to hear that.

&gt; What are the guidelines to avoid getting blocked by the tor network?

stay under the public thresholds?
https://www.torproject.org/docs/tor-manual-dev.html.en#_denial_of_service_mitigation_options

&gt; Is it possible to check the consensus to see if a client IP has been blocked?

the consensus holds information about relays not about tor client IP addresses, but
I assume you know that and I misunderstood your question?


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180502223522</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-05-02 22:35:22-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


&gt; can you let me know the start and end date of the scan (2018-03-12?) so I can check how many of
&gt; the relays you scanned (the top 100 relays by cw? at the time)

that scan only took an hour or so to perform and I posted the e-mail
minutes after the scan, so you can refer to the date in the e-mail header ;-)

&gt; During your first scans (2017) there have  been no anti-dos features.

ah yeah that's true and i think we'll see lots of partitions in the
tor network if we continue to scan. although my latest results show
us that at least the top 100 tor relays are OK. we might find that
relays with a lower consensus measurement value might be getting more
traffic than they can handle which in turn causes those relays to drop
new circuit builds. just a theory. the new scan was done from a server
in the US... so i mean... we'll see what happens when we perform scans
from different locations repeatedly at different times of day.

&gt; &gt; What are the guidelines to avoid getting blocked by the tor network?
&gt; 
&gt; stay under the public thresholds?
&gt; https://www.torproject.org/docs/tor-manual-dev.html.en#_denial_of_service_mitigation_options

ah thanks!

&gt; &gt; Is it possible to check the consensus to see if a client IP has been blocked?
&gt; 
&gt; the consensus holds information about relays not about tor client IP addresses, but
&gt; I assume you know that and I misunderstood your question?

hmm i was thinking that there could be a limited blacklist of client IPs but i guess there isn't one.
nevermind then.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180503111402</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-03 11:14:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; Mike Perry:
&gt;&gt; teor:
&gt;&gt; &gt; 
&gt;&gt; &gt; 
&gt;&gt; &gt; &gt; On 25 Apr 2018, at 18:30, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;&gt; &gt; &gt; 
&gt;&gt; &gt; &gt; 1. Hidden service use can't push you over to an unused guard (at all).
&gt;&gt; &gt; &gt;  2. Hidden service use can't influence your choice of guard (at all).
&gt;&gt; &gt; &gt;  3. Exits and websites can't push you over to an unused guard (at all)
&gt;&gt; &gt; &gt;  4. DoS/Guard node downtime signals are rare (absent)
&gt;&gt; &gt; &gt;  5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;&gt; &gt; &gt;  6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;&gt; &gt; &gt;  7. Relays in the same family can't be forced to correlate Exit traffic.
&gt;&gt; &gt; 
&gt;&gt; &gt; I think this list is missing some important user-visible properties, or it's
&gt;&gt; &gt; not clear which property above corresponds to these properties:
&gt;&gt; &gt; 
&gt;&gt; &gt; * Is Tor reliable and responsive when guards go down, or when I move
&gt;&gt; &gt;   networks, or when I have lost and regained service?
&gt;&gt; 
&gt;&gt; I think this is implicitly provided by #4. Downtime is a security issue.
&gt;&gt; If (any of) a client Guard(s) are down, and the adversary can detect
&gt;&gt; this based on client behavior, well, that is a side channel signal that
&gt;&gt; provides information about the Guard. So by satisfying #4, we also
&gt;&gt; satisfy the weaker conditions of general reliability and responsiveness.
&gt;&gt;  
&gt;&gt; &gt; I also think it's missing an implicit property, which we should make explicit:
&gt;&gt; &gt; 
&gt;&gt; &gt; * Can Tor users be fingerprinted by their set of guards or directory guards?
&gt;&gt; &gt; 
&gt;&gt; &gt; Perhaps this property is out of scope.
&gt;&gt; 
&gt;&gt; I think it is worth considering. We should add it if we need to do
&gt;&gt; another round of evaluation.
&gt;
&gt; Alright, for the sake of argument, let's call this Property #8:
&gt;   8. Less information from guard fingerprinting (the least information)
&gt;
&gt; I argue that this #8 is also equivalent to a #9 that Roger would ask
&gt; for:
&gt;   9. Fewer points of observation into the network (the fewest points).
&gt;

If we are actually aiming for 8 and 9 we need to do something about the
numdirguard=3 situation, otherwise we still have a huge guard fpr and we
still expose ourselves to more of the network even if we keep one guard.

&gt; To avoid TL;DR, that argument is an exercise to the reader ;).
&gt;
&gt; Here is a proposal that beats my previous proposal on Property #8 and
&gt; #9, while trying to preserve as many of the other properties as
&gt; possible:
&gt;
&gt;  * Set "num primary guards"=1 and "num primary guards to use"=1
&gt;  * Set "num directory guards"=1 and "num directory guards to use"=1
&gt;  * Don't give Exit nodes the Guard flag.
&gt;  * Allow "same node, same /16, same family" between guard and last hop,
&gt;    but only for HS circuits (which are at least 4 hops).
&gt;  * Allow same /16 and same family for HS circuits.

This's for all hops? So all service-side HS circ hops can share the same
family? I gues that's OK since we don't know what's happening on the
other side of the HS circuit anyhow? Or what?

&gt;  * When a primary guard leaves the consensus, pick a new one.
&gt;  * When a primary guard fails circuits, do $MAGIC_FAILURE_HEURISTIC.

What is the $MAGIC_FAILURE_HEURISTIC supposed to do? Also I doubt we can
do anything magic here, we even have trouble doing very naive stuff when
it comes to network-uptime response.

&gt;
&gt; This proposal gets strong:
&gt;   1. Hidden service use can't push you over to an unused guard (at all).
&gt;   2. Hidden service use can't influence your choice of guard (at all).
&gt;   3. Exits and websites can't push you over to an unused guard (at all)
&gt;   8. Less information from guard fingerprinting (the least information)
&gt;
&gt; It loses #4 (and your reliability point above), because if we transition
&gt; to a second guard too quickly when the first one starts failing, then we
&gt; lose the winning fingerprinting property we want to keep. So then
&gt; therefore, we must tolerate failure and RESOURCELIMIT issues and suffer
&gt; through connectivity issues during DoS:
&gt;   4. DoS/Guard node downtime signals are rare (absent) 
&gt;
&gt; It then gets us regular:
&gt;   5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;   7. Relays in the same family can't be forced to correlate Exit traffic.
&gt;
&gt; And again, we could get strong #6 if we allow the guard node for both RP
&gt; and the node before the RP:
&gt;   6. Information about the guard(s) does not leak to the website/RP (at all).
&gt;
&gt; So the key thing (in this property list) that forcing one guard causes us
&gt; to lose is reliability under DoS, which is a guard discovery vector (and
&gt; probably a source of other side channels, too).
&gt;

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180506223919</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-05-06 22:39:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 7 May 2018, at 06:54, juga &lt;juga@riseup.net&gt; wrote:
&gt; 
&gt; teor:
&gt; &gt; Hi Nick,
&gt; &gt; 
&gt; &gt; &gt; Suggestion: Add a field to hold the Ed25519 Identity of the relay being
&gt; &gt; &gt; measured.  Say that implementations SHOULD include both RSA fingerprint
&gt; &gt; &gt; and Ed25519 identity, and that implementations SHOULD accept lines that
&gt; &gt; &gt; contain at least one of them.
&gt; &gt; 
&gt; &gt; Suggestion: the ed25519 IDs should be base64 encoded, without a trailing =, \
&gt; &gt; because a trailing = makes the format ambiguous. 
&gt; 
&gt; You're talking about the certificate, right?.
&gt; This would change the concept of "line", since the certificate is more
&gt; than one "line".
&gt; 
&gt; This is how it is defined in dir-list-spec.txt
&gt; 
&gt; base64-encoded-ed25519-identity :== "-----BEGIN ED25519 CERT-----" NL
&gt; certificate "-----END ED25519 CERT-----" NL

The certificate is a proof of identity.
But we only need to refer to a relay by its ed25519 public key:

"master-key-ed25519" SP MasterKey NL

[At most once]

Contains the base-64 encoded ed25519 master key as a single argument. If it is \
present, it MUST match the identity key in the identity-ed25519 entry.

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n416

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 7 May 2018, \
at 06:54, juga &lt;&lt;a href="mailto:juga@riseup.net"&gt;juga@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;teor:&lt;/span&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Hi Nick,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Suggestion: Add a field to hold the Ed25519 Identity of the relay \
being&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;measured.  Say that implementations SHOULD include both RSA \
fingerprint&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;and Ed25519 identity, and that implementations SHOULD accept lines \
that&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;contain at least one of \
them.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Suggestion: \
the ed25519 IDs should be base64 encoded, without a trailing =, because a trailing = \
makes the format ambiguous.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;You're talking about \
the certificate, right?.&lt;/span&gt;&lt;br&gt;&lt;span&gt;This would change the concept of "line", \
since the certificate is more&lt;/span&gt;&lt;br&gt;&lt;span&gt;than one \
"line".&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;This is how it is defined in \
dir-list-spec.txt&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;base64-encoded-ed25519-identity \
:== "-----BEGIN ED25519 CERT-----" NL&lt;/span&gt;&lt;br&gt;&lt;span&gt;    certificate \
"-----END ED25519 CERT-----" NL&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
certificate is a proof of identity.&lt;/div&gt;&lt;div&gt;But we only need to refer to a relay by \
its ed25519 public key:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, \
0);"&gt;"master-key-ed25519" SP MasterKey NL&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: \
0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;pre style="padding: 0px; margin-top: 0px; \
margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0);"&gt;[At most \
once]&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; margin-top: 0px; margin-bottom: \
0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; \
background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;Contains the base-64 encoded ed25519 master key as a single  \
argument.  If it is present, it MUST match the identity key  in the identity-ed25519 \
entry.&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n416"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n416&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180507235243</emailId><senderName>Beard CryptoWorld</senderName><senderEmail>beard@cryptoworld.is</senderEmail><timestampReceived>2018-05-07 23:52:43-0400</timestampReceived><subject>Re: [tor-dev] Tor Messenger recent IRC re-topic.</subject><body>

Hello,

Alright thanks for this. We'll do a mix bag here.

We felt that just having attached docs isn't going to cut it since we do 
have existing tech for this.
So here are some Github Links

Updated Version 2 URL: https://github.com/crypto-world/quik/tree/v2-rew
v2-Spec sheet URL: 
https://github.com/crypto-world/quik/blob/v2-rew/v2-Spec.txt

We've been messing with this idea for a while now, and we feel that 
something like this needs to come out. We're a small tight knit team 
with core aligned values as Orgs like The Tor Project, and the EFF, and 
with that we're looking to "partner up" with said Org's.

If The Tor Project or the EFF would like to partner up on this we'd be 
stoked.
Please let us know if you have any questions or concerns.

Thank you,
~ beard



On 05/07/2018 07:04 AM, Sukhbir Singh wrote:
&gt; Hi,
&gt;
&gt;&gt; Hello Everyone,
&gt;&gt;
&gt;&gt; We briefly talked about this idea of taking over Tor Messenger, a long with
&gt;&gt; our own ideas and were asked to mail in some Documentation/Roadmaps. I'm
&gt;&gt; asking in what form would you guys like to see this in?
&gt;&gt;
&gt;&gt; Basically:
&gt;&gt;
&gt;&gt; Would you like us to add a .txt as an attachment in a follow up email?
&gt;&gt; Or would it be better to host the files on our site, and allow people to
&gt;&gt; read without subject to downloading anything?
&gt; You can email the proposal to the mailing list.
&gt;
&gt; Thanks,
&gt;

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180509090832</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-09 09:08:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 (two guards) IRC meeting Wed Apr 18, 17:00 UTC</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; Mike Perry:
&gt; &gt; Heyo.
&gt; &gt; 
&gt; &gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html
&gt; 
&gt; Ok, we had this meeting. High level (ammended) action items are:
&gt; 
&gt; 1. Use patches in https://trac.torproject.org/projects/tor/ticket/25843
&gt; to set NumEntryGuards=2 in torrc, and observe results. Please join us!
&gt; Stuff we are looking for during testing is on that ticket!
&gt; 2. Merge that patch to make the torrc guard options do what we meant for
&gt; them to do. Probably backport it.
&gt; 3. Descibe adversary models for our variant proposals from the notes.
&gt; (Why do we disagree? In Mike's case, my disagreements are because I
&gt; think each step is an improvement over previous/status quo -- we can
&gt; decide harder things later and still do better both now and later.)
&gt; 4. Agree on an order of operations for fixes+changes, ideally such that we
&gt; don't block forever trying to come up with a perfect solution. Things
&gt; are pretty bad now. All we really need to do is agree on steps to make
&gt; it better.
&gt; 
&gt; &lt;snip&gt;
&gt; 
&gt; Concrete things we can do now:
&gt; #1: ourselves set those guard params to 2 and find bugs. once #3 below is done, \
&gt; encourage others, like on tor-talk, to do it too. #2: enumerate the current \
&gt; situations where we use a guard other than our first guard, especially noting the \
&gt; ones where the attacker can make us use a guard other than our first guard. fix as \
&gt; many as we want to fix. maybe categorize by whether they cause us to mark our first \
&gt; guard as down or not.

OK, I did a bit of #2 yesterday as part of an IRC discussion with Mike
and Roger. In particular, I attempted to enumerate the places in our
codebase where we mark a guard as unreachable and hence skip it for
future circuits.

The key functions here are entry_guard_failed() and entry_guard_chan_failed().
These are called in the following places:

1) circuit_build_failed(): We blame the guard if there was an error
   during path building when we don't have the first hop open on the
   circuit yet. We don't blame the guard for errors during path
   selection.

2) connection_dir_request_failed(): We blame the guard if we fail to
   connect to a dirserver because of network error.

3) connection_or_about_to_close(): We blame the guard when we are
   closing an OR connection that started at us but never made it to
   state open. We do this because otherwise we would keep beating our
   heads against a broken guard.

4) connection_or_client_learned_peer_id(): We blame the guard when we
   receive the wrong RSA identity key from the guard during the TLS handshake.

The first 3 cases here seem to handle the cases of network errors and
unreachable guards. It's interesting how we have to handle this case in
three different places. I wonder if we are missing any other places here.

The last case seems to handle the case of network MITM attacks. I don't
see anything wrong with that, since encountering an MITM certainly means
that something bad is going on, and also an MITM adversary could also
cause one of the first 3 cases.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180513112500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-05-13 11:25:00-0400</timestampReceived><subject>Re: [tor-dev] BandwidthRate minimal values</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

https://trac.torproject.org/projects/tor/ticket/26094



- -- 
https://mastodon.social/@nusenu
twitter: @nusenu_
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEElpDPH7u0KYWVTfK7rWE4wkXNQn4FAlr4IKwACgkQrWE4wkXN
Qn4UQBAAvMTK4YXUZbqxnw8c//UIriawL/85v7Vxny7P2xARRwzmFkwfO61qOmNa
Axu1Xze8P/rr8DXQzwyA5NVx0OnfILOOquJfWRM3MkPmaqb8uhgzP/kKlNVr8Bce
tBNqa0V2LXV4MS9+0p+xA43FItlv5Uj9aFYFIjeqbeiqgmFGZKX5n9ezOd3xP0qq
A3fEgoWh8Z7LxGE2OgN4u4VpUAxZYC1Dah9vKYShqok4m93Wz562ogVoXougqT3O
zP5mGZNZj6Qau+SLC/6hgLxqCpt785ilCScpWVl9LlnvpS+BdzQlgZGyG0TaWyYu
FlMjyiRrnG1F+FNketkRrn2Fkoz7/tNEpjeZq8ETJH4343ZMYrnnZcDzxCJS0z3S
TeqaaM+nN+mOi7iWw7xY8w2fTzrVEvFes2Tfou61u2SwilMb3i4wq1cEo5HSYzbg
C/nMhSpLDStLIQk168ipe9jJO9pXFVSD+MJoDPxUhrdqiOWYgntSLoGiNZY+3OLg
qpf6RNssy50378cNcMaHl8CDOIBP2kJwwbpKOgzu7JMSOmodscFJerRTR68JIPfA
PuLsJSzm/xHEBXRUYj3lY2cObwinRM7MwJl3EsFOpSkA9+8FT74TEajgBRysAyp6
BM2N+DywGwOeQIG/MQMfzQdtzBJAY94cTXadn4j1d/ZJaU0o1H0=
=dumv
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180517104823</emailId><senderName>Fernando Fernandez Mancera</senderName><senderEmail>ffmancera@riseup.net</senderEmail><timestampReceived>2018-05-17 10:48:23-0400</timestampReceived><subject>Re: [tor-dev] Looking for an open project to contribute in TOR</subject><body>

[Attachment #2 (multipart/alternative)]


I think a good start is to look into trac [1]=2E There are a lot of project=
s in which you can contribute, so choose your prefer one=2E

I am also able to help you with the initial questions so don't hesitate to=
 ask me=2E

Greetings=2E

[1] https://trac=2Etorproject=2Eorg/projects/tor


El 17 de mayo de 2018 11:59:14 CEST, Saurav Malani &lt;sauravmalani1@gmail=2E=
com&gt; escribi=C3=B3:
&gt;Hello Everyone,
&gt;
&gt;I am Saurav Malani, 3rd year computer science student at
&gt;IIIT-Hyderabad,
&gt;India=2E I applied for a project in TOR-SOP, but sadly my proposal was
&gt;not
&gt;selected=2E But, still I would like to contribute to TOR=2E So, is there
&gt;any
&gt;open project in which I can start contributing under the guidance of
&gt;appropriate mentor=2E
&gt;
&gt;Thank you,
&gt;Saurav Malani

--
ffmancera
Free Software Contributor
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;I think a good start is to look into trac [1]. There are a \
lot of projects in which you can contribute, so choose your prefer one.&lt;br&gt; &lt;br&gt;
I am also able to help you with the initial questions so don't hesitate to ask \
me.&lt;br&gt; &lt;br&gt;
Greetings.&lt;br&gt;
&lt;br&gt;
[1] &lt;a href="https://trac.torproject.org/projects/tor"&gt;https://trac.torproject.org/projects/tor&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;El 17 de mayo de 2018 11:59:14 CEST, Saurav Malani \
&lt;sauravmalani1@gmail.com&gt; escribió:&lt;blockquote class="gmail_quote" \
style="margin: 0pt 0pt 0pt 0.8ex; border-left: 1px solid rgb(204, 204, 204); \
padding-left: 1ex;"&gt; &lt;div dir="ltr"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;Hello \
Everyone,&lt;/span&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;I \
am Saurav Malani, 3rd year computer science student at IIIT-Hyderabad, India. I \
applied for a project in TOR-SOP, but sadly my proposal was not selected. But, still \
I would like to contribute to TOR. So, is there any open project in which I can start \
contributing under the guidance of appropriate mentor.&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;Thank \
you,&lt;/div&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8p \
x;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight \
:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white- \
space:normal;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;Saurav \
Malani&lt;/div&gt;&lt;br&gt;&lt;/div&gt; &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;
--&lt;br&gt;
ffmancera&lt;br&gt;
Free Software Contributor&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180518160309</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-05-18 16:03:09-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; writes:

&gt; On Thu, May 10, 2018 at 12:20:05AM +0700, Suphanat Chunhapanya wrote:
&gt;&gt; On 05/09/2018 03:50 PM, George Kadianakis wrote:
&gt;&gt; &gt; b) We might also want to look into XEdDSA and see if we can potentially
&gt;&gt; &gt;    use the same keypair for both intro auth (ed25519) and desc auth
&gt;&gt; (x25519).
&gt;&gt; 
&gt;&gt; This will be a great advantage if we can do that because putting two
&gt;&gt; private keys in the HidServAuth is so frustrating.
&gt;
&gt; The private key for intro auth is used to make a signature (that will be
&gt; different per client), while the private key for desc auth is used to
&gt; decrypt the descriptor (which will be the same for all clients), no?
&gt;

Hm. Both intro auth and desc auth keys are different for each client. In
the case of desc auth we do that so that we can revoke a client without
needing to refresh desc auth keys for all other clients.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180521125200</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-05-21 12:52:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Bandwidth List Format specification</subject><body>

Hi,

as commented by nickm [0], the specification has been merged into
torspec git repository.

If you find any issues with it, as usual, we can open a ticket and patch
the specification.

Thanks,
juga.

[0] https://trac.torproject.org/projects/tor/ticket/25869#comment:10
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180521164253</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-05-21 16:42:53-0400</timestampReceived><subject>Re: [tor-dev] Bine - Go library for using and embedding Tor into applications</subject><body>

Thanks Chad, great work! Added Bine to our list of controller libraries...

https://stem.torproject.org/faq.html#are-there-any-other-controller-libraries


On Fri, May 18, 2018 at 9:56 AM, Chad Retz &lt;chad.retz@gmail.com&gt; wrote:
&gt; I posted it on /r/TOR but figured I'd post it here too:
&gt; https://github.com/cretz/bine
&gt;
&gt; I built it because I have plans to use it in another project. In
&gt; general it does what Stem does. I did incorporate V3 onion service
&gt; generation in there and am happy to say it publishes much faster.
&gt; Also, I have the option to statically compile Tor using the fairly new
&gt; embedding API (i.e. tor_api.h). I've only tested it on Windows (see
&gt; https://github.com/cretz/tor-static) but I figure that's the hardest
&gt; of them to get working anyways. Thoughts/questions welcome.
&gt;
&gt; Chad
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180522075900</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2018-05-22 07:59:00-0400</timestampReceived><subject>Re: [tor-dev] DNS-over-HTTPS (DOH) in Firefox/Torbrowser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; Hi,
&gt; 
&gt; since Mozilla did tests [0] on DOH [1] in Firefox I was wondering
&gt; if Torbrowser developers have put any thought into that as well?

Actually, the study did not get done yet. The start date is scheduled
for June 4th, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1446404

We'll look at the code in the coming weeks when doing our audit for
ESR60 and we'll follow the Mozilla experiment closely. Right now we
don't have plans to enable DOH in Tor Browser 8.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180524191811</emailId><senderName>Taylor Yu</senderName><senderEmail>catalyst@torproject.org</senderEmail><timestampReceived>2018-05-24 19:18:11-0400</timestampReceived><subject>Re: [tor-dev] Abort in test_bridges.c</subject><body>

On 05/23/2018 12:30 PM, Gisle Vanem wrote:
&gt; Running 'test.exe bridges/clear_bridge_list' causes this assertion:
&gt; 
&gt;   bridges/clear_bridge_list: May 23 17:12:53.714 [err]
&gt; tor_assertion_failed_():
&gt;   Bug: container.h:70: smartlist_get: Assertion sl-&gt;num_used &gt; idx failed;
&gt; 
&gt; AFAICS, since 'sweep_bridge_list()' caused all entries in
&gt; 'bridgelist' to get deleted, an index of zero is illegal.
&gt; Don't ask me why.
&gt; 
&gt; And since 'smartlist_get(bridgelist,0)' should be compiled with
&gt; '-DDEBUG_SMARTLIST' in all tests/*.c sources. No?
&gt; 
&gt; I'm on Win-10, tor.exe + libs was built with MSVC 2017.
&gt; 
Hi, thanks for reporting this!  Could you please tell us more about how
you are building Tor? Also what release are you building?  We typically
build Tor on Windows using MinGW, not MSVC, so we might not notice for a
while if something is broken on MSVC.

Also I'm not finding any obvious place we define DEBUG_SMARTLIST on
master.  What are you seeing that defines it?

Would you be willing to open a bug report about this on trac.torproject.org?

Thanks,
-Taylor
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180526073849</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-05-26 07:38:49-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.6.0, metrics-lib 2.4.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

two new releases are available:

     https://dist.torproject.org/collector/1.6.0/
     https://dist.torproject.org/metrics-lib/2.4.0/

This is the start of a series of releases for all Metrics products, which
are a move to a better performing JSON processing library.

Other details can be found in the respective change logs [1] and [2]. 

The CollecTor release is already deployed on all CollecTor tp.o instances.

Please direct comments and questions to the metrics-team mailing list [3].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.6.0
[2] https://gitweb.torproject.org/metrics-lib.git/tree/CHANGELOG.md?h=metrics-lib-2.4.0
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team









["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180527170226</emailId><senderName>"Nurmi, Juha"</senderName><senderEmail>juha.nurmi@ahmia.fi</senderEmail><timestampReceived>2018-05-27 17:02:26-0400</timestampReceived><subject>Re: [tor-dev] [TSoP 2018] Ahmia status update #1</subject><body>

[Attachment #2 (multipart/alternative)]


On Sun, May 27, 2018 at 5:50 PM, Stelios Barberakis &lt;chefarov@gmail.com&gt;
wrote:
&gt;
&gt;
&gt; I am going to discuss tomorrow with the mentors and anyone else that might
&gt; be interested, on #ahmia channel at OFTC, on how to proceed (what to
&gt; implement next).
&gt;
&gt;
Thanks Stelios! I will be on #ahmia channel tomorrow.

-Juha

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On Sun, May 27, \
2018 at 5:50 PM, Stelios Barberakis &lt;span dir="ltr"&gt;&lt;&lt;a \
href="mailto:chefarov@gmail.com" target="_blank"&gt;chefarov@gmail.com&lt;/a&gt;&gt;&lt;/span&gt; \
wrote:&lt;blockquote class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
id="m_8824643927047068043gmail-m_2798590934721727205goog_82530315"&gt;&lt;/span&gt;&lt;a \
href="http:///" target="_blank"&gt;&lt;/a&gt;&lt;span \
id="m_8824643927047068043gmail-m_2798590934721727205goog_82530316"&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;I \
am going to discuss tomorrow with the mentors and anyone else that  might be \
interested, on #ahmia channel at OFTC, on how to proceed (what  to implement \
next).&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks Stelios! I \
will be on #ahmia channel tomorrow.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Juha  \
&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180528130027</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-05-28 13:00:27-0400</timestampReceived><subject>Re: [tor-dev] Proposal 292: Mesh-based vanguards</subject><body>

On Mon, May 28, 2018 at 01:10:21PM +0300, George Kadianakis wrote:
&gt; 2.2. Path restriction changes
&gt; 
&gt;   In order to avoid information leaks and ensure paths can be built, path
&gt;   restrictions must be loosened.
&gt; 
&gt;   In particular, we allow the following:
&gt;      1. Nodes from the same /16 and same family for any/all hops
&gt;      2. Guard nodes can be chosen for RP/IP/HSDIR
&gt;      3. Guard nodes can be chosen for hop before RP/IP/HSDIR.
&gt; 
&gt;   The first change prevents the situation where paths cannot be built if two
&gt;   layers all share the same subnet and/or node family. It also prevents the
&gt;   the use of a different entry guard based on the family or subnet of the
&gt;   IP, HSDIR, or RP.
&gt; 
&gt;   The second change prevents an adversary from forcing the use of a different
&gt;   entry guard by enumerating all guard-flaged nodes as the RP.
&gt; 
&gt;   The third change prevents an adversary from learning the guard node by way
&gt;   of noticing which nodes were not chosen for the hop before it.

To be clear, you are proposing removing these path restrictions for
which circuits?  All?  All HS-related?  All HS-related, but only if the
new options are turned on?
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180531013938</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-31 01:39:38-0400</timestampReceived><subject>Re: [tor-dev] Proposal 293: Other ways for relays to know when to publish</subject><body>

[Attachment #2 (multipart/alternative)]


I didn't get
Iam in or out

On Thu 31 May, 2018, 5:49 AM Nick Mathewson, &lt;nickm@torproject.org&gt; wrote:

&gt; Filename: 293-know-when-to-publish.txt
&gt; Title: Other ways for relays to know when to publish
&gt; Author: Nick Mathewson
&gt; Created: 30-May-2018
&gt; Status: Open
&gt; Target: 0.3.5
&gt;
&gt;
&gt; 1. Motivation
&gt;
&gt;    In proposal 275, we give reasons for dropping the published-on
&gt;    field from consensus documents, to improve the performance of
&gt;    consensus diffs.  We've already changed Tor (as of 0.2.9.11) to
&gt;    allow us to set those fields far in the future -- but
&gt;    unfortunately, there is still one use case that requires them:
&gt;    relays use the published-on field to tell if they are about to fall
&gt;    out of the consensus and need to make new descriptors.
&gt;
&gt;    Here we propose two alternative mechanisms for relays to know that
&gt;    they should publish descriptors, so we can enact proposal 275 and
&gt;    set the published-on field to some time in the distant future.
&gt;
&gt;
&gt; 2. Mechanism One: The StaleDesc flag
&gt;
&gt;    Authorities should begin voting aon a new StaleDesc flag.
&gt;
&gt;    When authorities vote, if the most recent published_on date for
&gt;    a descriptor has over DESC_IS_STALE_INTERVAL in the past, the
&gt;    authorities should vote to give the StaleDesc flag to that relay.
&gt;
&gt;    If any relay sees that it has the StaleDesc flag, it should upload
&gt;    some time in the first half of the voting interval.  (Implementors
&gt;    should take care not to re-upload over and over, though: Relays won't
&gt;    lose the flag until the next voting interval is reached.)
&gt;
&gt;    (Define DESC_IS_STALE_INTERVAL as equal to
&gt;    FORCE_REGENERATE_DESCRIPTOR_INTERVAL.)
&gt;
&gt;
&gt; 3. Mechanism Two: Uploading more frequently when rejected.
&gt;
&gt;    Tor relays should remember the last time at which they uploaded a
&gt;    descriptor that was accepted by a majority of dirauths.  If this
&gt;    time is more than FAST_RETRY_DESCRIPTOR_INTERVAL in the past, we
&gt;    mark our descriptor as dirty from
&gt;    mark_my_descriptor_dirty_if_too_old().
&gt;
&gt;
&gt; 4. Implications for proposal 275
&gt;
&gt;    Once most relays are running verions that support the features
&gt;    above, and once authorities are generating consensuses with the
&gt;    StaleDesc flag, there will no longer be a need to keep the
&gt;    published time in consensus documents accurate -- we can start
&gt;    setting it to some time in the distant future, per proposal 275.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;I didn't get  &lt;div dir="auto"&gt;Iam in or out&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu 31 May, 2018, 5:49 AM Nick Mathewson, \
&lt;&lt;a href="mailto:nickm@torproject.org"&gt;nickm@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Filename: \
                293-know-when-to-publish.txt&lt;br&gt;
Title: Other ways for relays to know when to publish&lt;br&gt;
Author: Nick Mathewson&lt;br&gt;
Created: 30-May-2018&lt;br&gt;
Status: Open&lt;br&gt;
Target: 0.3.5&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
1. Motivation&lt;br&gt;
&lt;br&gt;
     In proposal 275, we give reasons for dropping the published-on&lt;br&gt;
     field from consensus documents, to improve the performance of&lt;br&gt;
     consensus diffs.   We've already changed Tor (as of 0.2.9.11) to&lt;br&gt;
     allow us to set those fields far in the future -- but&lt;br&gt;
     unfortunately, there is still one use case that requires them:&lt;br&gt;
     relays use the published-on field to tell if they are about to fall&lt;br&gt;
     out of the consensus and need to make new descriptors.&lt;br&gt;
&lt;br&gt;
     Here we propose two alternative mechanisms for relays to know that&lt;br&gt;
     they should publish descriptors, so we can enact proposal 275 and&lt;br&gt;
     set the published-on field to some time in the distant future.&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
2. Mechanism One: The StaleDesc flag&lt;br&gt;
&lt;br&gt;
     Authorities should begin voting aon a new StaleDesc flag.&lt;br&gt;
&lt;br&gt;
     When authorities vote, if the most recent published_on date for&lt;br&gt;
     a descriptor has over DESC_IS_STALE_INTERVAL in the past, the&lt;br&gt;
     authorities should vote to give the StaleDesc flag to that relay.&lt;br&gt;
&lt;br&gt;
     If any relay sees that it has the StaleDesc flag, it should upload&lt;br&gt;
     some time in the first half of the voting interval.   (Implementors&lt;br&gt;
     should take care not to re-upload over and over, though: Relays won't&lt;br&gt;
     lose the flag until the next voting interval is reached.)&lt;br&gt;
&lt;br&gt;
     (Define DESC_IS_STALE_INTERVAL as equal to&lt;br&gt;
     FORCE_REGENERATE_DESCRIPTOR_INTERVAL.)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
3. Mechanism Two: Uploading more frequently when rejected.&lt;br&gt;
&lt;br&gt;
     Tor relays should remember the last time at which they uploaded a&lt;br&gt;
     descriptor that was accepted by a majority of dirauths.   If this&lt;br&gt;
     time is more than FAST_RETRY_DESCRIPTOR_INTERVAL in the past, we&lt;br&gt;
     mark our descriptor as dirty from&lt;br&gt;
     mark_my_descriptor_dirty_if_too_old().&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
4. Implications for proposal 275&lt;br&gt;
&lt;br&gt;
     Once most relays are running verions that support the features&lt;br&gt;
     above, and once authorities are generating consensuses with the&lt;br&gt;
     StaleDesc flag, there will no longer be a need to keep the&lt;br&gt;
     published time in consensus documents accurate -- we can start&lt;br&gt;
     setting it to some time in the distant future, per proposal 275.&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180531014055</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-31 01:40:55-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Iam in or out

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Iam in or out  &lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180531015419</emailId><senderName>abhinav chowdary</senderName><senderEmail>abhinavchodary796@gmail.com</senderEmail><timestampReceived>2018-05-31 01:54:19-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

[Attachment #2 (multipart/alternative)]


Then give me how to work on it and how to earn money

On Thu 31 May, 2018, 7:02 AM Matt Traudt, &lt;pastly@torproject.org&gt; wrote:

&gt; On May 30, 2018 6:28:55 PM PDT, abhinav chowdary &lt;
&gt; abhinavchodary796@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; Iam in or out
&gt;&gt;
&gt;
&gt; You've sent 5 nonsense emails to many hundreds of people today. Please
&gt; stop. Please learn how mailing lists work.
&gt;
&gt; It seems like you've successfully subscribed to this list. Please enjoy
&gt; responsibly.
&gt;
&gt; Matt
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Then give me how to work on it and how to earn money&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu 31 May, 2018, 7:02 AM Matt Traudt, &lt;&lt;a \
href="mailto:pastly@torproject.org"&gt;pastly@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div&gt;&lt;div class="gmail_quote"&gt;On \
May 30, 2018 6:28:55 PM PDT, abhinav chowdary &lt;&lt;a \
href="mailto:abhinavchodary796@gmail.com" target="_blank" \
rel="noreferrer"&gt;abhinavchodary796@gmail.com&lt;/a&gt;&gt; wrote:&lt;blockquote \
class="gmail_quote" style="margin:0pt 0pt 0pt 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt; &lt;div dir="auto"&gt;Iam in or out  &lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;You've sent 5 nonsense emails to many hundreds \
of people today. Please stop. Please learn how mailing lists work. &lt;br&gt; &lt;br&gt;
It seems like you've successfully subscribed to this list. Please enjoy \
responsibly.&lt;br&gt; &lt;br&gt;
Matt&lt;/div&gt;_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180531110131</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-05-31 11:01:31-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 6.0-1-14-0, ExoneraTor 2.1.0, metrics-web 1.1.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

three new releases are available:

     https://dist.torproject.org/onionoo/6.0-1.14.0/
     https://dist.torproject.org/exonerator/2.1.0/
     https://dist.torproject.org/metrics-web/1.1.0/

This is the second batch of releases of Metrics products, which
now use a to a better performing JSON processing library.

Other details can be found in the respective change logs [0], [1], and [2]. 

All releases are already deployed on all respective tp.o instances.

Please direct comments and questions to the metrics-team mailing list [3].

Cheers,
iwakeh

[0] https://gitweb.torproject.org/onionoo.git/tree/CHANGELOG.md?h=onionoo-6.0-1.14.0
[1] https://gitweb.torproject.org/exonerator.git/tree/CHANGELOG.md?h=exonerator-2.1.0
[2] https://gitweb.torproject.org/metrics-web.git/tree/CHANGELOG.md?h=metrics-web-1.1.0
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team











["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180402034528</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-04-02 03:45:28-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

On Sat, Mar 24, 2018 at 08:50:18AM -0400, Rob Jansen wrote:
&gt; I was concerned because bastet and moria1 both stopped voting anything
&gt;for each of two of my &gt;2 year old relays during distinct time intervals
&gt;yesterday. I mean there were missing votes, rather than votes of no or
&gt;low bandwidth.

I've filed a ticket for what I think is the root cause:

https://trac.torproject.org/25685

There is indeed a bandaid in place so that relays generally recover from
this situation, but hopefully we can do even better.

See also
https://lists.torproject.org/pipermail/tor-relays/2018-March/014764.html
for where a similar thing happened to another relay operator.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180402105048</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-02 10:50:48-0400</timestampReceived><subject>Re: [tor-dev] The case for Tor-over-QUIC</subject><body>

[Attachment #2 (multipart/signed)]


Mike Perry:
&gt; In Rome, I held a session about network protocol upgrades. My intent was
&gt; to cover the switch to two guards, conflux, datagram transports, and
&gt; QUIC. We ended up touching only briefly on everything but QUIC, but we
&gt; went into enough depth on QUIC itself that it was a worthwhile and very
&gt; productive session.
&gt; 
&gt; Our notes are here:
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/FutureTorNetworkProtocolUpgrades
&gt;  

&gt; # QUIC Research Questions
&gt; 
&gt; A couple areas of open research into how QUIC will behave in a Tor
&gt; deployment remain. It is my belief that while these areas are worth
&gt; further study, they do not represent blockers to QUIC, as a naive
&gt; deployment of QUIC will substantially outperform our current (lack of)
&gt; congestion and poor flow control.
&gt; 
&gt; ## End-to-end Congestion Control Study
&gt; 
&gt; Unfortunately, it appears that the Quux QUIC paper studied QUIC at the
&gt; wrong position - between relays, and the QuTor implementation is
&gt; unclear. This means that it may still be an open question as to if
&gt; QUIC's congestion control algorithms will behave optimally in a Tor-like
&gt; network under heavy load.
&gt; 
&gt; However, Google has conducted extensive internet-scale research into the
&gt; congestion control algorithm, which very likely covers enough networks
&gt; with Tor-like latency and drop characteristics. Because of this, I do
&gt; not expect us to have to do a lot of tuning of their congestion control
&gt; here, but it is worth investigating.
&gt; 
&gt; ## Queue Management
&gt; 
&gt; Fairness among flows in drop-based congestion control is heavily
&gt; influenced by how the queue is managed, and particularly by the decision
&gt; of which packet to drop when the queue is full. Modern favored
&gt; algorithms involve probabilistic early dropping from the middle of the
&gt; queue. The most popular approaches are the adaptive variants of RED and
&gt; Blue:
&gt; https://en.wikipedia.org/wiki/Random_early_detection
&gt; https://en.wikipedia.org/wiki/Blue_(queue_management_algorithm)

An IETFer mailed me and pointed out that the IETF now recommends
PIE or FQ-CoDel over RED/BLUE, since they explicitly control
queue latency:
https://tools.ietf.org/html/rfc8033
https://tools.ietf.org/html/rfc8290

FQ-CoDel is appealing for us because it breaks the queue into separate
per-flow queues, and has mechanisms to favor quieter flows over busy
ones when deciding which packets to send first, and which to drop. It
sounds quite promising for getting similar properties out of a QUIC-Tor
as we have with Circuit EWMA scheduling.

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180406140525</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-04-06 14:05:25-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 5.2-1.12.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Onionoo's protocol was extended and has a minor version jump to 5.2.

Reminder:there will be a major *upcoming version* jump 6.0
after April 14, 2018.
Take note of the field "next_major_version_scheduled" in documents.

Download available at:
     https://dist.torproject.org/onionoo/5.2-1.12.0/

Protocol changes (also summarized in [0]):
There is now a 'version_status' field, which is the status of the
Tor software version of this relay based on the versions recommended by
the directory authorities [1].

Operational changes:
In order to always provide 'fresh' data Onionoo now fetches descriptors
from both CollecTor instances and won't be affected as much anymore when
one CollecTor instance is not reachable.
For more please take a look at the change log [3].

The changes are already deployed on all onionoo.torproject.org instances.=


Please direct comments and questions to the metrics-team mailing list [3]=
=2E

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions_5_2
[1] https://metrics.torproject.org/onionoo.html#details_relay_version_sta=
tus
    https://metrics.torproject.org/onionoo.html#details_bridge_version_st=
atus
[2] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team









["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180414213819</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2018-04-14 21:38:19-0400</timestampReceived><subject>[tor-dev] Hogging of second_elapsed_callback()</subject><body>

Hi,

How long time can we spend signing status documents before tor gets sad?

I ask because I'm planning on putting dirauth signing keys on a
sloooooow HSM and would like to understand if I'd have to make
format_networkstatus_vote() and networkstatus_compute_consensus() (and
their callers) be "restartable", much like dirvote_act() is
"restartable".

Current measurements indicate a worst case figure of 6.5 seconds for a
hashing and signing operation. This may even increase some over
time. (It may also shrink considerably with some optimisations but this
is where we are today.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180417112300</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-04-17 11:23:00-0400</timestampReceived><subject>[tor-dev] Tor Bandwidth Measurements Document Format</subject><body>


Hi,

as commented with teor and pastly, i send in-line a draft specification
for the document format that the bandwidth scanner implementations
should produce.

I've left my own questions/notes in square brackets.

Thanks,
juga.

=======================================

          Tor Bandwidth Measurements Document Format
          [juga: which name should we give to this document?]

1. Scope and preliminaries

  This document describes the format of Tor's bandwidth measurements
  document, version X.X.X [juga: which version should be this?]
  and later.

  Since Tor version X.X.X [juga: which tor version?] the directory
  authorities use the bandwidth measurements document called
  "V3BandwidthsFile" and produced by Torflow [1]
  (format described in README.spec.txt [2]).

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

1.2. Acknowledgements

  The original bandwidth measurement scanner (Torflow) and format was
  created by mike. Teor suggested to write this specification while
  contributing on pastly's new bandwidth scanner implementation.

  This specification was revised after feedback from:

    XXX

1.3 Outline

  The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2
  of dir-spec.txt [3] are obtained by bandwidth authorities, which are
  either directory authorities or other servers running bandwidth
  measurement scanners and sending the results to the former.
  [juga: it seems that bandwidth authorities have not been formally
  before]

2. Format details

  Bandwidth measurements MUST contain the following sections:
  - Header (exactly once)
  - Relays measurements (zero or more times)

  Each section (or entry) ends with a separator.

2.1. Nonterminals

  The following nonterminals are defined in the Onionoo details
  document specification [4]:

    fingerprint
    nickname

  In the bandwidth measurement documents nickname is optional.

  The following nonterminals are defined in the in dir-spec.txt:

    NL      (newline)
    SP      (space)

    "bw" = INT, the aggregated measured bandwidth of this relay, in
    kilobytes per second.

  We introduce the following nonterminals:
  [juga: this should probably be defined more formally and should
  probably link to other documents, which ones?]

    "version" = The name and the version of the bandwidth scannner
    software, such as "sbws 0.1.0".
    The name of the software, if absent, is assumed to be "torflow".
    [juga: which should be the version if absent?]

    "timestamp" = INT, the Unix Epoch time when the file was created.

2.2. Header format

  It MUST consists of:

    "timestamp" timestamp NL
    "version" version NL

2.3. Relay measurements format

  Relays measurements MUST consist of the following items.

    "node_id" fingerprint SP
    "bw" bandwidth SP

  When there are no more items, the "bw" item ends with NL instead of
  SP.

2.4. Optional extra items

  Different implementations of the bandwidth measurements scanners MAY
  include other items per relay.

  For instance, sbws includes:

    "rtt" = INT, Round Trip Time (to obtain 1B)

  Every relay measurement in sbws consists of:

    "node_id" fingerprint SP
    "bw" bandwidth SP
    "nick=" nickname SP
    "rtt=" rtt SP
    "time=" timestamp NL

  Every relay measurement in Torflow consists of:

    "node_id" fingerprint SP
    "bw" bandwidth SP
    "nick=" nickname SP
    "measured_at=" slice timestamp NL

  The "measured_at" does not correspond to the "time" in sbws.
  [juga: actually, if bwauths use "measured_at", then the code on them
  or sbws should be changed].

  Torflow includes other items that are out of the scope of this
  document.

References:

1. https://gitweb.torproject.org/torflow.git
2.
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
4. https://metrics.torproject.org/onionoo.html#details


A. Sample data

A.1. Torflow

1523911758
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=392760 nick=Test
measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
circ_fail=0.2 scanner=/filepath

A.2. sbws

1523911758
version=0.1.0
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=392760 nick=Test
rtt=380 time=1523911725
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180403183025</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-04-03 18:30:25-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

On Sat, Mar 31, 2018 at 2:52 AM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; In-line below for ease of comment. Also available at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/tree/proposals/xxx-two-guard-nodes.txt?h=twoguards
&gt;  
&gt; ===========================
&gt; 
&gt; Filename: xxx-two-guard-nodes.txt
&gt; Title: The move to two guard nodes
&gt; Author: Mike Perry
&gt; Created: 2018-03-22
&gt; Supersedes: Proposal 236

Added as proposal 291!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180416183508</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-16 18:35:08-0400</timestampReceived><subject>[tor-dev] Proposal #291 (two guards) IRC meeting Wed Apr 18, 17:00 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Heyo.

We're going to have a meeting to discuss Proposal 291. See this thread:
https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html

The meeting will be at 17:00 UTC, on Wednesday, April 18th, in
#tor-meeting on irc.oftc.net. (That's 10:00 left coast, 12:00 middle
coast, 13:00 right coast, and 19:00 in several socialist paradises that
strangely do not have public water fountains.)
https://www.timeanddate.com/worldclock/fixedtime.html?iso=20180415T1700

Things we need to decide:
1. Do we abandon Tor's path restrictions?
2. Do we use two guards?

At the end of this meeting, we should commit to one or both of these
things long-term. (Surprise twist: we're already doing #2!)

Each of these choices is a nuanced thing. And just picking one or the
other doesn't solve everything. I think it's best to think of them as a
commitment to a plan over some timescale, based on the information we
have available today.


People who mos def should attend:
George Kadianakis,
Roger,
Nick,
Me

People who probably maybe should attend:
Aaron Johnson,
Isis (and others concerned about guard fingerprinting),
You?


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180423070610</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-04-23 07:06:10-0400</timestampReceived><subject>[tor-dev] Tor Messenger</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
I would like to ask is there any online documentation about how is possible
to transmit text messages via tor nodes?
I would like to [try to] rewrite the TorChat Messenger which is written in
Python 2.7 and wxPython to Python 3x and Qt.
I cant find any documents  how to transmit messages between two tor nodes
so anything would be helpful...

Cheers,
Milan

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,  &lt;br&gt;I would like to ask is there any online documentation \
about how is possible to transmit text messages via tor nodes?&lt;br&gt;I would like to \
[try to] rewrite the TorChat Messenger which is written in Python 2.7 and wxPython to \
Python 3x and Qt.&lt;br&gt;I cant find any documents   how to transmit messages between two \
tor nodes so anything would be helpful...&lt;br&gt;&lt;br&gt;Cheers,&lt;div&gt;Milan&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180418131535</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-18 13:15:35-0400</timestampReceived><subject>[tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

Hello Ian, isis, and other crypto people around here!

Here is an intro: In HSv3 we've been using revision counters
(integers++) to do HS desc replay protection, so that bad HSDirs cannot
replay old descs to other HSDirs. We recently learned that this is a bad
idea from a scalability prespective (multiple sites need to track rev
counter...), and also it's needless complexity in the code (tor needs to
cache the counters etc.). See ticket #25552 for more details:
      https://trac.torproject.org/projects/tor/ticket/25552
      https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n1078

In #25552 we've been making plans to ditch the rev counters and replace
them with a casual replay cache. (These replay caches also don't need to
be big, since descriptors are only replayable for a day before the
ephemeral blinded key changes, and the cache can be reset).

Anyhow, now we've been playing the game of "which part of the desc
should we use in the replay cache"? The latest plan here has been to use
the ed25519 descriptor signature since it's something small, simple and
necessarily changes with every fresh descriptor. And this is how we
entered the ed25519 malleability scene.

The basic question here is, can we use the ed25519 signature in our
replay cache and consider it immutable by attackers without the private
key? And should we use R, or S, or both?

According to RFC8032:

             Ed25519 and Ed448 signatures are not malleable due to the
             check that decoded S is smaller than l.  Without this
             check, one can add a multiple of l into a scalar part and
             still pass signature verification, resulting in malleable
             signatures.

However, neither donna or ref10 include such a check explicitly
IIUC. Instead they check whether (RS[63] &amp; 224), which basically ensures
that the high 3 bits of S are zeroed, which ensures S &lt; 2^253. Is that
equivalent to the RFC check? Because if I'm counting right, for most
legit S values you can still add a single l as the attacker and get an
S' = S + l &lt; 2^253 equivalent signature (you can't add 2*l tho).

So what's the state of ed25519 malleability? I know that after the
Bitcoin incident, people have thought about this a lot, so I doubt we
are in a broken state, but I just wanted to make sure that we will not
mess something up. :)

Thanks for the help! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180423143218</emailId><senderName>Stelios Barberakis</senderName><senderEmail>chefarov@gmail.com</senderEmail><timestampReceived>2018-04-23 14:32:18-0400</timestampReceived><subject>[tor-dev] ahmia ~ summer of privacy</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

My name is Stelios and I am a CS student at Technical University of Crete.
This summer I will be working on ahmia &lt;https://ahmia.fi&gt; project, during
the "summer of privacy".

This will be the first time to be engaged with the tor-ecosystem community
as a developer, and I am really glad about it.

The current plan includes some updates, enhancements of the codebase and
the building/deployment process (including docker), as well as some new
features like search filters, but we are looking to come up with new ideas
for additional features, etc.

Everyone is welcomed to contribute to the brainstorming, so feel free to
ask anything you would like, either here or by joining #ahmia channel in
OFTC if you feel so.

I will do my best to contribute this summer, and hopefully beyond that. I
will be sending bi-weekly reports to @tor-dev, so that everyone could be
informed about the progress.

Best Regards,
Stelios

-- 
PGP key:
http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hello all,&lt;br&gt;&lt;br&gt;&lt;/div&gt;My name is Stelios and I am a CS student \
at Technical University of Crete. This summer I will be working on &lt;a \
href="https://ahmia.fi"&gt;ahmia&lt;/a&gt; project, during the "summer of \
privacy".&lt;br&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;div&gt;This will be the first time to be engaged \
with the tor-ecosystem community as a developer, and I am really glad about \
it.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The current plan includes some updates, enhancements of the \
codebase and the building/deployment process (including docker), as well as some new \
features like search filters, but we are looking to come up with new ideas for \
additional features, etc.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;Everyone is welcomed to contribute to the \
brainstorming, so feel free to ask anything you would like, either here or by joining \
#ahmia channel in OFTC if you feel so.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I will do my best to \
contribute this summer, and hopefully beyond that. I will be sending bi-weekly \
reports to @tor-dev, so that everyone could be informed about the progress. \
&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best Regards,&lt;br&gt;&lt;/div&gt;&lt;div&gt;Stelios &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;-- &lt;br&gt;&lt;div \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;font size="3" \
color="#333333" face="Helvetica Neue, Helvetica, Arial, sans-serif"&gt;PGP key:  &lt;a \
href="http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998" \
target="_blank"&gt;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998&lt;/a&gt;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
 &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180423201030</emailId><senderName>Dave Rolek</senderName><senderEmail>dmr-x@riseup.net</senderEmail><timestampReceived>2018-04-23 20:10:30-0400</timestampReceived><subject>[tor-dev] [TSoP] stem.client - introductions</subject><body>

Hi everyone!

I'm really excited to announce I'll be working on stem for the 2018 Tor
Summer of Privacy! The news is still sinking in.

This is going to be my first major chunk of contributing code back to
the Tor community. :)

In particular, I'll be working on expanding stem's support to act as a
Tor client, aka stem.client, speaking with Tor's ORPort. You can see
more about stem in general [1], and read concepts for stem.client [2],
but at the end of this email I list my high-level plan for the summer
project.

There's definitely more to a Tor client than one can write in a summer,
so my focus is on getting basic client functionality and on fetching
v2/v3 Onion Service descriptors. The official project period is May 14th
through August 21.

My existing work on stem is available by querying through Trac [3]
(easier for context) and browsing patches on GitHub [4].

I've been pretty active on IRC recently, but I wanted to broaden this.
Anyone is welcome to reach out to me with questions/comments!

On OFTC and Trac, I'm dmr.
I plan to attend the network team meetings [5] (at least lurk) to get a
sense of Tor's protocol development and to be around for any
littlet-tor/stem syncing discussions.

I'll also be sending updates biweekly to the tor-dev mailing list and
writing "/me status: [...]" posts in #tor-dev.

Lastly, my mentors for the project are atagar and teor.

Really looking forward to this!

Cheers!
Dave

--
My high-level plan is the following in this rough order:
* continue prework with stem and the tor specs
* get a stronger feel for / strengthen the CI testing for stem
* better understand the ecosystem of projects that use stem
* begin official coding by tackling minor stem.client improvements and 
  implementing classes for a few more Cell types
* continue developing stem.client.Relay and adding further testing using
  more of the Cell classes already defined
* work on relay authentication
* move onto fetching relay descriptors from the ORPort
* work on the RELAY_EXTEN[sion] cells, to build multi-hop circuits
* build upon this to allow actual exit traffic, including implementing 
  RELAY_RESOLVE[D]
* work on fetching v2 Onion Service descriptors, since I already have 
  familiarity [6] with that spec, and v2 Onion Services probably will be
  around for a while yet
* work on fetching v3 Onion Service descriptors
* work on other stem.client improvements, if time allows
* culminate the project with tutorials and a blog post introducing the 
  new user-facing features of stem


[1] https://stem.torproject.org/
[2]
https://www.torproject.org/getinvolved/volunteer.html.en#pythonTorClient
[3]
https://trac.torproject.org/projects/tor/query?cc=~dmr∨&amp;reporter=dmr∨&amp;owner=dmr∨&amp;reviewer=~dmr&amp;group=component
 ^ a bit noisy, sorry; look at "Core Tor"
[4] https://github.com/dmr-x/stem
[5]
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam#MeetingsSchedule
[6] https://github.com/dmr-x/talks
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180424092014</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-24 09:20:14-0400</timestampReceived><subject>Re: [tor-dev] ahmia ~ summer of privacy</subject><body>

Stelios Barberakis &lt;chefarov@gmail.com&gt; writes:

&gt; Hello all,
&gt;
&gt; My name is Stelios and I am a CS student at Technical University of Crete.
&gt; This summer I will be working on ahmia &lt;https://ahmia.fi&gt; project, during
&gt; the "summer of privacy".
&gt;
&gt; This will be the first time to be engaged with the tor-ecosystem community
&gt; as a developer, and I am really glad about it.
&gt;
&gt; The current plan includes some updates, enhancements of the codebase and
&gt; the building/deployment process (including docker), as well as some new
&gt; features like search filters, but we are looking to come up with new ideas
&gt; for additional features, etc.
&gt;
&gt; Everyone is welcomed to contribute to the brainstorming, so feel free to
&gt; ask anything you would like, either here or by joining #ahmia channel in
&gt; OFTC if you feel so.
&gt;

Hello Stelios and welcome to the SoP!

One of the things I'd be really interested in seeing as part of this
ahmia SoP, is some more transparency on how people are using Ahmia. It
would be great to revive the old stats panel that Ahmia had which
showed stuff like "unique users per day", "queries per day", "unique
queries per day", etc. Ahmia used to have these kind of stats back in
2014, so perhaps reviving them might be easier than having to do them
from scratch: https://lists.torproject.org/pipermail/tor-reports/2014-May/000536.html

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426083100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-04-26 08:31:00-0400</timestampReceived><subject>[tor-dev] minor website update request: have the tor-relay guide ready for Ubuntu 18.04</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I wanted to have the tor relay guide ready for the
new Ubuntu LTS version 18.04 nearly at the same time when it is
released.

Thanks to the torproject debian maintainer we already have packages
for bionic.

Basically the only thing that is missing is the website update to
include the new distro for the sources.list generator.

For that I submitted an update on trac [1] a few days ago.
From my personal experience, my website update requests (also trivial ones)
take about two months to get committed, it would be great if we could speed
things up for this specific request to have the relay guide ready for the 
new Ubuntu LTS nearly at the same time when the release is happening.
(I won't be bothering you with non-tor-relay-guide related website
updates anymore).

thanks,
nusenu 


[1] https://trac.torproject.org/projects/tor/ticket/25888

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180426001832</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-04-26 00:18:32-0400</timestampReceived><subject>[tor-dev] Standardizing the 'onion service' name</subject><body>

Hi all, teor suggested engaging the list with #25918 so here we go!
Ticket #25918 has a couple goals...

1. Provide a tracking ticket for the rename effort.
2. Come to a consensus on if we should move forward with "onion
service" or revert back to "hidden service". The limbo we've been in
for months is confusing for our users and we should standardize on a
name.

Here's the ticket...

========================================

A recent post on tor-dev@ just got me thinking about the roadblocks we
have for v2 deprecation. There's a couple I don't believe we're
following in trac so lets fix that.

For me the biggest is its name. Renaming takes work, and we attempted
to rename hidden services in v3 without investing the time to make it
happen. We should either fix that or revert to to the old name. To
move forward we need to...

Have OnionService aliases for controller commands, events, descriptor
fields, and anything else referencing 'HS' or 'HiddenService'.

Speaking of which, how do we plan to replace abbreviations? Having an
'OSFETCH' or 'OS_CREATED' event doesn't exactly have the same ring as
their HS counterparts. ;P

Adjust all our docs to be consistent about the name.

Renaming takes work. Lesson I learned from Nyx is that it works best
if you draw a line in the sand and stand by it. With Nyx, version 2.0
is called Nyx (you won't find any docs saying otherwise) and version
1.x is the legacy 'arm' project.

If I was in your shoes I'd opt for the same. Either prioritize the
aliases and be firm that v3 are 'Onion Services' or abort the rename.
Otherwise this will live in a confusing dual-named limbo land
indefinitely. ;P

Cheers! -Damian

PS. Stem and Nyx have stuck with the old name ("hidden services") and
will continue to do so until tor's standardized this.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426064235</emailId><senderName>Paul Syverson</senderName><senderEmail>paul.syverson@nrl.navy.mil</senderEmail><timestampReceived>2018-04-26 06:42:35-0400</timestampReceived><subject>Re: [tor-dev] Standardizing the 'onion service' name</subject><body>

On Wed, Apr 25, 2018 at 05:18:32PM -0700, Damian Johnson wrote:
&gt; Hi all, teor suggested engaging the list with #25918 so here we go!
&gt; Ticket #25918 has a couple goals...
&gt; 
&gt; 1. Provide a tracking ticket for the rename effort.
&gt; 2. Come to a consensus on if we should move forward with "onion
&gt; service" or revert back to "hidden service". The limbo we've been in
&gt; for months is confusing for our users and we should standardize on a
&gt; name.

I'm very confused why you say that this is not a long solved problem.
I see nothing in the recent posts about v2 deprecation that would in
any way change that, or even raise it as a topic.

When talking in general to people, the answer should be that they are
all (v2 and v3) onion services. That's it. I believe this is the
official position of the Tor Project, and they have worked hard to
make sure that this is reflected on any new materials on the site for
some time.  I'm cc'ing Steph in case she is not on the tor-dev list
and wants to say anything further on that point.

I'll respond to other comments inline below. Feel free to add my comments
to the ticket if you want, but IMO there is no reason a ticket should
exist at all for this.

&gt; 
&gt; Here's the ticket...
&gt; 
&gt; ========================================
&gt; 
&gt; A recent post on tor-dev@ just got me thinking about the roadblocks we
&gt; have for v2 deprecation. There's a couple I don't believe we're
&gt; following in trac so lets fix that.
&gt; 
&gt; For me the biggest is its name. Renaming takes work, and we attempted
&gt; to rename hidden services in v3 without investing the time to make it
&gt; happen. We should either fix that or revert to to the old name. To
&gt; move forward we need to...

I don't understand this at all. We have renamed hidden services to be
called 'onion services' some time ago. I don't know what it is that
you feel we didn't make happen. 'Hidden services' was an old name for
onion services that has always been misleading narrow about the nature
of these services and thus long in need of replacing (and actually the
name we originally and for some time used was 'location hidden
services' though 'location' simply started getting more and more
ignored along the way).  "Misleadingly narrow" because some of their
central properties are ignored by calling them 'hidden services',
viz. the stronger and more-site-owner-controlled authentication these
services provide and their address lookup security vs. the less secure
parts of the internet served by DNS.

&gt; 
&gt; Have OnionService aliases for controller commands, events, descriptor
&gt; fields, and anything else referencing 'HS' or 'HiddenService'.
&gt; 
&gt; Speaking of which, how do we plan to replace abbreviations? Having an
&gt; 'OSFETCH' or 'OS_CREATED' event doesn't exactly have the same ring as
&gt; their HS counterparts. ;P
&gt; 
&gt; Adjust all our docs to be consistent about the name.

Right, anything v3 should be consistently calling these 'onion
services'.  Variable names, etc. particularly those still in use in
code shared with v2, don't need to be changed. It is OK if such
vestiges of older usage remain in abbreviations, as long as the
description of them, e.g., in any new Tor proposal, describes them
with appropriately current terminology.

&gt; 
&gt; Renaming takes work. Lesson I learned from Nyx is that it works best
&gt; if you draw a line in the sand and stand by it. With Nyx, version 2.0
&gt; is called Nyx (you won't find any docs saying otherwise) and version
&gt; 1.x is the legacy 'arm' project.
&gt; 
&gt; If I was in your shoes I'd opt for the same. Either prioritize the
&gt; aliases and be firm that v3 are 'Onion Services' or abort the rename.
&gt; Otherwise this will live in a confusing dual-named limbo land
&gt; indefinitely. ;P

I'm prettty sure that v3 being 'onion services' has been the official
Tor Project position since at least half a year. We wouldn't be
aborting the rename, because 'abort' would imply it is not
complete. Anything now not using the current name is not part of an
incomplete process, it is simply wrong and outdated. Steph correct me
if I am wrong about that.

So I think you've answered your own question. Nothing in v3 should be
called 'hidden services'. And anything new in code and documentation
should be called 'onion services'. If you want to think of v2 and
earlier as 'hidden services' for purposes of understanding legacy
component and variable names, e.g., HSDir that's fine. And as such,
variable names, etc. in code that continues to be used for both v2 and
v3 can can persist. But again, any new specs, documentation, etc.
should call them 'onion services'.

This acceptance of existing v2 documentation calling them 'hidden
services' while refusing this for anything v3 is a little misleading
about when and why the naming transition happened, but its close
enough to serve as your line in the sand if you feel one is needed. 
I actually argued the value of essentially such a line-in-the-sand
position to Steph a while ago. This doesn't preclude also calling v2
and earlier 'onion services'. Indeed, it's not just OK but preferable,
for the above mentioned reasons.

aloha,
Paul
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180423043146</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-23 04:31:46-0400</timestampReceived><subject>[tor-dev] Closing old Trac Milestones</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Tor's trac has a lot of milestones.
Sometimes users select the wrong one, because there are so many.

I've just closed some old milestones from 5+ years ago:

Deliverable-Sep2010
Deliverable-December2010
Deliverable-Mar2011
Deliverable-May2011
Deliverable-Nov2011
Vidalia: 0.2.15
Vidalia: 0.3.x

(Assuming they were no longer relevant, and belonged to Core Tor.)

Here is a list of milestones we could close, sorted by team:

HTTPSE Cr 2013.4.2x
HTTPS-E 3.3
HTTPS-E 3.2.1
HTTPS-E 3.2.2
HTTPS-E 3.2.3
HTTPS-E 4.0dev8
HTTPS-E 4.0dev9
HTTPS-E 4.0dev15

Website Donations Enhancement

Chronos: phase one
Chronos: phase two
TorBrowserBundle 2.2.x-stable
TorBrowserBundle 2.3.x-stable
Torbutton: 1.2.5
Torbutton: 1.3
Torbutton: 1.4

ExoneraTor 1.0.0
Metrics 1.0.0
Metrics 2.0.0
Onionoo 1.14.0

ttdnsd: 0.8

Source: https://trac.torproject.org/projects/tor/roadmap

If any of the milestones on this list belong to you, and you'll never
put any more tickets in them, please close them.
(Or let me know, and I can close them.)

Tickets in closed milestones will still appear in searches.
We can always re-open a milestone if we decide we want to put more
tickets in it.

T

--
teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlrdYbIACgkQdA2eOQJS
cqJPJQ//WybgU6a7/024wIStw4yEUh29SYlRc1LvFteSRbzIBAF1sTTzJ8Yx+xo9
VDpWAizlIB6bamGZad5MUCL6vXAq5wK60Bl9RB4S7ORWx9O3QU6tGYMghjCcK8Ev
ZpdY4A59Ojqh0Fv5Vdld2NAT/Pf3kLUv1yWGqf12IRUyEaCWlINK9wVdTc6cL5JM
i+u1XyjtZ0Iyxe6+PzwIXAQ6RLg8byYgEjW2bO3Zxxum4dJkd/68F4QEf4nDL75h
WW4wtl+DdTYhMKMy6aIFAWhxjXC3Rr+tLq8rDl53NdnbT74R1lOZ6l7wNcz8z1BR
t4t6cqKX7jYHeetahZ6ZgmvHgFcp/8mrMfVvx6HHi0Bgomm3j6wBAPqyWLJ0ouN6
vyw7SY7ib7z9g/Q4FH9pe6fIb/3nZg9QNmLj4jUoFYWrNh7p3ATx+L1PWrhQqr84
Il0x+CnG5HvQ5r+9phfo/gqiZOFyQ8ZZw2hZTbZnEYleBRlRQtXCxC+hN+CSJzJN
cJQ1EcFaU7xUqEydDwXi78RwM6SXIYjokZla4OV5lLQZklW6K+SZ5LHPbsqtQbpT
Tgey3iV+Fqrehg2Fk6cQx3VdPtok5y3YPHXwuTw9BY3NMzYB3EfNWQV4cARbUjNQ
kCjuxc2FSoKUItumf+Cv3d7n2s5f1JIJZ3KzfNIajyoE5lMRN5c=
=4o29
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180429141524</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-04-29 14:15:24-0400</timestampReceived><subject>[tor-dev] TBB + Privoxy</subject><body>

Hi. We are trying to get Tor Browser to work with privoxy to allow users
to optionally connect to other networks including I2P, Zeronet...

Here's what we tried:

* Disabling network.proxy.no_proxies_on

* Setting network.proxy.http_port to 8118 (privoxy's port number)
network.proxy.http 127.0.0.1
network.proxy.http_port 8118
network.proxy.ssl 127.0.0.1
network.proxy.ssl_port 8118

* We know a transition to unix sockets for localhost comms is planned
but not currently enforced. We have workarounds for that.

Can someone please tell me what's missing?

NB This is a separate copy of Tor Browser to prevent fingerprinting
problems with normal surfing in general.


[0] https://forums.whonix.org/t/i2p-integration/4981
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180425182200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-04-25 18:22:00-0400</timestampReceived><subject>[tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

even though you are probably years away from deprecating onion v2 services
it is certainly good to have a clear plan.

I'm asking because the sooner onion v2 are deprecated the sooner some 
people can stop worrying about malicious HSDirs.

thanks,
nusenu

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180425205836</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-04-25 20:58:36-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

On Wed, Apr 25, 2018 at 2:22 PM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; even though you are probably years away from deprecating onion v2 services
&gt; it is certainly good to have a clear plan.
&gt;
&gt; I'm asking because the sooner onion v2 are deprecated the sooner some
&gt; people can stop worrying about malicious HSDirs.

The publisher of the onion is the one who decides which to use
and what level of concern / tech applies to their use case.
In onionland, there seems to be little knowledge of v3, thus little worry
about v2 in cases where v3 would actually apply to benefit, that's bad.
And mooting of v3 in cases where it doesn't much benefit use case.
Rather than removing v2 support from the code [1]...
- the risk / benefit / tradeoffs / ux / uses of v2 vs v3 should be widely
publicized to educate about v3.
- common tools and applications such as ricochet, onionshare,
onioncat, onionvpn, bittorrent, securedrop, control, stem, nyx, etc
should add v3 support, thus also feeding back into education.
- some future release should change the default
documentation and operation inflection from v2 to v3.
At that point if a user goes to create an onion, everything
should lead to and result in them having created a v3,
other than a standalone v2 reference section in manpage on how
to create v2 onions, and continue v2 dirservices support, etc [1].

[1] v2 does have legitimate long term use cases exists,
there's a ticket opened for extended nonremoval support of v2.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180425215859</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-04-25 21:58:59-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

Hi nusenu, thanks for bringing this up! Filed tickets for a couple
things we should sort out before deprecating v2...

https://trac.torproject.org/projects/tor/ticket/25918
https://trac.torproject.org/projects/tor/ticket/25920
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426100203</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-26 10:02:03-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

nusenu &lt;nusenu-lists@riseup.net&gt; writes:

&gt; Hi,
&gt;
&gt; even though you are probably years away from deprecating onion v2 services
&gt; it is certainly good to have a clear plan.
&gt;
&gt; I'm asking because the sooner onion v2 are deprecated the sooner some 
&gt; people can stop worrying about malicious HSDirs.
&gt;

Yes indeed. The sooner we deprecate v2 the sooner we can stop worrying
about malicious HSDirs. And also we will be able to reduce the
requirements for becoming an HSDir which will strengthen and make our
network more robust.

That said, I think we are unfortunately still far from deprecating v2
onions:

The first actual step to v2 deprecation, is to make v3 the default
version.  But to get there, we first need to solve various bugs and
issues with the current v3 system (#25552, #22893, #23662, #24977,
etc.).  We also need to implement various needed features, like offline
keys (#18098), client-authorization (#20700 ; WIP https://github.com/torproject/tor/pull/36),
control port commands like HSFETCH (#25417) and revive onionbalance for
v3.  We might also want to consider possible improvements to the UX of
long onion names (like #24310) (https://blog.torproject.org/cooking-onions-names-your-onions).

After we do most of the above, we can turn the switch to make v3 the
default, and then we need to wait some time for most of the users to
migrate from v2 to v3. After that we can initiate the countdown, and
eventually deprecate v2s for real.

It's hard to provide an actual timeline for the above right
now. However, we are currently applying for some onion-service-related
grants, and hopefully if we get them we will have the funding to
accelerate the development pace.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427104453</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2018-04-27 10:44:53-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/signed)]


On Wed, Apr 25, 2018 at 04:58:36PM -0400, grarpamp wrote:
&gt; In onionland, there seems to be little knowledge of v3, thus little worry
&gt; about v2 in cases where v3 would actually apply to benefit, that's bad.

v3 onion services just seem like a way worse deal to the average user and 
the unknowledgeable admin. Mainly because the addresses are way too long. I 
can remember a couple of v2 addresses, but not a single v3 address. So that's 
just bad advertising from the start.

Before at least Facebook, DuckDuckGo, The New York Times, the Debian Project 
and even the Tor Project themselves (!) have rolled out their v3 onion 
services, one shouldn't even think about deprecating HSv2. It's going to be 
around for many years to come, taking for them just as long to vanish as an 
SSL version, I think, unfortunately.
--
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427120137</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2018-04-27 12:01:37-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/alternative)]


It's not just about getting the protocol stack right, but also the
ancillary software environment; people keep asking me for "V3 support in
EOTK" and my stock response is this:

==== BEGIN ====
OnionBalance requires STEM support for V3, before it can be updated
(possibly a substantial rewrite will be needed) to support the new format
onions. It's not only a matter of "longer addresses" but also a matter of
cross-signing the descriptors to support new-style cryptography, so in fact
it might be safest to create a new, separate OnionBalance for V3.

So: STEM needs updating and testing for V3, and then OnionBalance needs to
support the new STEM library and encryption. Then (for me) EOTK needs to
support the new OnionBalance.

I am not expecting a solution to ship until 2019, earliest.
==== END ====

...and that's even without refactoring the other bits of EOTK to address
the changes when STEMv3 lands.


OTOH, I have been performance testing simultaneous regular-expression
matching of v2/3 addresses, and so far this is the winner:

  "\\b([a-z2-7]{16}(?:[a-z2-7]{40})?\\.onion)\\b"

...and it's already in the codebase at
https://github.com/alecmuffett/eotk/blob/master/templates.d/nginx.conf.txt#L299

    - alec :-)

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;It's not just about getting the protocol stack right, but also the \
ancillary software environment; people keep asking me for "V3 support in \
EOTK" and my stock response is this:&lt;br&gt;&lt;br&gt;==== BEGIN ====&lt;br&gt;OnionBalance \
requires STEM support for V3, before it can be updated (possibly a substantial \
rewrite will be needed) to support the new format onions. It's not only a matter \
of "longer addresses" but also a matter of cross-signing the descriptors to \
support new-style cryptography, so in fact it might be safest to create a new, \
separate OnionBalance for V3.&lt;br&gt;&lt;br&gt;So: STEM needs updating and testing for V3, and \
then OnionBalance needs to support the new STEM library and encryption. Then (for me) \
EOTK needs to support the new OnionBalance.&lt;br&gt;&lt;br&gt;I am not expecting a solution to \
ship until 2019, earliest.&lt;br&gt;==== END ====&lt;br&gt;&lt;br&gt;...and that's even without \
refactoring the other bits of EOTK to address the changes when STEMv3 \
lands.&lt;br&gt;&lt;br&gt;&lt;br&gt;OTOH, I have been performance testing simultaneous \
regular-expression matching of v2/3 addresses, and so far this is the winner:&lt;br&gt;&lt;br&gt; \
&lt;font face="monospace, \
monospace"&gt;"\\b([a-z2-7]{16}(?:[a-z2-7]{40})?\\.onion)\\b"&lt;/font&gt;&lt;br&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;...and \
it's already in the codebase at &lt;a \
href="https://github.com/alecmuffett/eotk/blob/master/templates.d/nginx.conf.txt#L299" \
&gt;https://github.com/alecmuffett/eotk/blob/master/templates.d/nginx.conf.txt#L299&lt;/a&gt;&lt;/span&gt;&lt;br \
&gt; style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:n \
&gt; ormal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter- \
&gt; spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:norm \
&gt; al;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;br&gt; \
&gt; - alec :-)&lt;br&gt;&lt;br&gt;-- &lt;br&gt;&lt;a \
&gt; href="http://dropsafe.crypticide.com/aboutalecm"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&gt; 


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427153708</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-27 15:37:08-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

Jonathan Marquardt &lt;mail@parckwart.de&gt; writes:

&gt; On Wed, Apr 25, 2018 at 04:58:36PM -0400, grarpamp wrote:
&gt;&gt; In onionland, there seems to be little knowledge of v3, thus little worry
&gt;&gt; about v2 in cases where v3 would actually apply to benefit, that's bad.
&gt;
&gt; v3 onion services just seem like a way worse deal to the average user and 
&gt; the unknowledgeable admin. Mainly because the addresses are way too long. I 
&gt; can remember a couple of v2 addresses, but not a single v3 address. So that's 
&gt; just bad advertising from the start.
&gt;

IMO if you have the ability to memorize v2 addresses by heart, you are
already not an average user. Average users just google most things they
try to visit.

That said, I do share your concerns, and that's why I mentioned that
finding a solution to the onion name issue is a priority before v3 can
go mainstream (or even v2).

&gt; Before at least Facebook, DuckDuckGo, The New York Times, the Debian Project 
&gt; and even the Tor Project themselves (!) have rolled out their v3 onion 
&gt; services, one shouldn't even think about deprecating HSv2. It's going to be 
&gt; around for many years to come, taking for them just as long to vanish as an 
&gt; SSL version, I think, unfortunately.

Agreed. We are indeed a long way from deprecating HSv2 :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427184824</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-04-27 18:48:24-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

&gt; OnionBalance requires STEM support for V3

Hi Alec, would you mind clarifying what you need from Stem? As far as
I'm aware Stem supports v3 onion service creation...

https://trac.torproject.org/projects/tor/ticket/25124

See the 'version 3' note at the end of...

https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephemeral_hidden_service

I'm unaware of the ball being in my court on any v3 Onion Service
stuff. If there's something I should have on my radar then please let
me know!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427191334</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-04-27 19:13:34-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

On Fri, Apr 27, 2018 at 8:01 AM, Alec Muffett &lt;alec.muffett@gmail.com&gt; wrote:
&gt; OnionBalance

Forgot to include this in the former list of
common / useful onion tools, thanks.

If anyone knows of others, feel free to add to thread.

&gt; OTOH, I have been performance testing simultaneous regular-expression
&gt; matching of v2/3 addresses, and so far this is the winner:
&gt;
&gt;   "\\b([a-z2-7]{16}(?:[a-z2-7]{40})?\\.onion)\\b"

Did you post the results of the various RE engines and RE's somewhere?
Some of the onion services out there might find it useful in their backend work.

&gt; ...and it's already in the codebase at
&gt; https://github.com/alecmuffett/eotk/blob/master/templates.d/nginx.conf.txt#L299
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427193632</emailId><senderName>Alec Muffett</senderName><senderEmail>alec.muffett@gmail.com</senderEmail><timestampReceived>2018-04-27 19:36:32-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/alternative)]


On 27 April 2018 at 19:48, Damian Johnson &lt;atagar@torproject.org&gt; wrote:

&gt; &gt; OnionBalance requires STEM support for V3
&gt;
&gt; Hi Alec, would you mind clarifying what you need from Stem? As far as
&gt; I'm aware Stem supports v3 onion service creation...
&gt; ...
&gt; I'm unaware of the ball being in my court on any v3 Onion Service
&gt; stuff. If there's something I should have on my radar then please let
&gt; me know!


Hi Damian!

That's awesome, and good to know - I first wrote that text a few months ago
(on the basis of David's comments in that ticket) and haven't revised it
since, so I am heartened to see progress.

However I am also not the best person to say what else will be needed,
because that would probably be Donncha re: the future of OnionBalance for
v3.

At the moment in OnionBalance the v2 Introduction Points of the
(predetermined) worker onions are passively scraped from the HSDir; the
descriptors are parsed, the IPs are blended and re-combined and re-signed
under the master onion key (eg: nytimes3xbfgragh) and then published back
to the HSDirs, with the result that NewYorkTimes-browsing clients end up
communicating with 1 of N possible "worker" daemons, thereby sharing the
load.

My understanding - and please jump in, if I am wrong - is that the
synthesis of a v3 descriptor which blends the introduction points of
several independent v3 "worker" Tor daemons will be a more complex affair
than the existing process, because (?) the "worker" tor daemons will
somehow have to be more actively involved - apparently they may have to
sign the v3 Introduction Points themselves, though I am not sure how that
will work for a blended descriptor? Multiple/distinct signatures, perhaps?
The last opportunity I had to speak with anyone (re: this) was more than 1
year ago, so I am rusty, and I apologise if I have gotten some details
wrong.

So: OnionBalance relies heavily upon Stem (
https://github.com/DonnchaC/onionbalance/tree/develop/onionbalance) and I
am not qualified to say what, if any, additional v3 Stem features will be
useful or outstanding to support the descriptor-blending that is needed for
loadbalanced configurations.

But OnionBalance for v3 will certainly be necessary. :-)

    -a

-- 
http://dropsafe.crypticide.com/aboutalecm

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_extra"&gt;&lt;div class="gmail_quote"&gt;On 27 April 2018 at \
19:48, Damian Johnson &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:atagar@torproject.org" \
target="_blank"&gt;atagar@torproject.org&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;span class="gmail-"&gt;&gt; OnionBalance requires \
STEM support for V3&lt;br&gt; &lt;br&gt;
&lt;/span&gt;Hi Alec, would you mind clarifying what you need from Stem? As far as&lt;br&gt;
I'm aware Stem supports v3 onion service creation...&lt;br&gt;...&lt;br&gt;
I'm unaware of the ball being in my court on any v3 Onion Service&lt;br&gt;
stuff. If there's something I should have on my radar then please let&lt;br&gt;
me know!&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Hi \
Damian!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's awesome, and good to know - I first wrote \
that text a few months ago (on the basis of David's comments in that ticket) and \
haven't revised it since, so I am heartened to see \
progress.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;However I am also not the best person to say what \
else will be needed, because that would probably be Donncha re: the future of \
OnionBalance for v3.&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;At \
the moment in OnionBalance the v2 Introduction Points of the (predetermined) worker \
onions are passively scraped from the HSDir; the descriptors are parsed, the IPs are \
blended and re-combined and re-signed under the master onion key (eg: \
nytimes3xbfgragh) and then published back to the HSDirs, with the result that \
NewYorkTimes-browsing clients end up communicating with 1 of N possible \
"worker" daemons, thereby sharing the load.&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;My \
understanding - and please jump in, if I am wrong - is that the synthesis of a v3 \
descriptor which blends the introduction points of several independent v3 \
"worker" Tor daemons will be a more complex affair than the existing \
process, because (?) the "worker" tor daemons will somehow have to be more \
actively involved - apparently they may have to sign the v3 Introduction Points \
themselves, though I am not sure how that will work for a blended descriptor? \
Multiple/distinct signatures, perhaps? The last opportunity I had to speak with \
anyone (re: this) was more than 1 year ago, so I am rusty, and I apologise if I have \
gotten some details wrong.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So: OnionBalance relies heavily \
upon Stem (&lt;span style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:sma \
ll;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weigh \
t:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white \
-space:normal;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;a \
href="https://github.com/DonnchaC/onionbalance/tree/develop/onionbalance"&gt;https://github.com/DonnchaC/onionbalance/tree/develop/onionbalance&lt;/a&gt;) \
and I am not qualified to say what, if any, additional v3 Stem features will be \
useful or outstanding to support the descriptor-blending that is needed for \
loadbalanced configurations.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;But \
OnionBalance for v3 will certainly be necessary. :-)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:small;font-style:nor \
mal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spac \
ing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wor \
d-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt; \
-a&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div class="gmail_signature"&gt;&lt;a \
href="http://dropsafe.crypticide.com/aboutalecm" \
target="_blank"&gt;http://dropsafe.crypticide.com/aboutalecm&lt;/a&gt;&lt;br&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427195600</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-04-27 19:56:00-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Yes indeed. The sooner we deprecate v2 the sooner we can stop worrying
&gt; about malicious HSDirs.

yes, that was indeed the motivation for my email (mostly because I see how much time
goes into the constant detection and rejection of these relays - not by me)

&gt; And also we will be able to reduce the
&gt; requirements for becoming an HSDir which will strengthen and make our
&gt; network more robust.
&gt; 
&gt; That said, I think we are unfortunately still far from deprecating v2
&gt; onions:


thanks for listing all these relevant ticket IDs, I pasted your email into
trac and I made them child tickets of
https://trac.torproject.org/projects/tor/ticket/25955

lets try to link all relevant tickets there



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427200300</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-04-27 20:03:00-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

On Fri, Apr 27, 2018 at 6:44 AM, Jonathan Marquardt &lt;mail@parckwart.de&gt; wrote:
&gt; v3 onion services just seem like a way worse deal to the average user and
&gt; the unknowledgeable admin. Mainly because the addresses are way too long.

Then it's analyzing whether shifting the default to v3 for the clueless and the
perhaps at risk is helpful anti-footshooting more than say string length.
What are the tools and threat models where v3 overrides v2.
Do they include proper educational docs and config options.
Are such things themselves an intolerable risk.

&gt; Before at least Facebook, DuckDuckGo, The New York Times, the Debian Project

What capabilities, including string representations, do such large public
realworld services, and their users, need.
Are those served by v3 and or v2.
Are they trading something for the other.

&gt; Mainly because the addresses are way too long.

Though ux was mentioned, v3 can be mangageable by users
to whatever degree. In onionland, there's usually commentary
that some do memorize a few memorable v2 onions if generated
lucky (phonetic, etc) or by regex matching generators, fewer users
brute memorize hard v2 strings, the rest just bookmark / file them,
or use various search / entry portals. Though v3 is a bit unwieldy,
that gets traded off by those that need the capabilities that only
v3 can provide. Among those that do know of v3, but don't explicitly
need its capabilities, yes, they often choose v2 for that reason,
in that case that's probably reasonable.

"Deprecation" may be vague term...
a) If defined as shifting v3 to be "provisioned by default" via docs
and function, while *continuing to support v2* functionality
on the network, there's no problem, everyone is happy.
b) While v2 and v3 do share some capabilities, since v2 and v3
do offer their own exclusive subset of capabilities to users
that cannot currently be found in the opposing version,
*removing v2 support* is a definite issue.

v3 is a nice advancement and is needed by lots of users
for what it can do for them, just as v2 is.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427211404</emailId><senderName>Jonathan Marquardt</senderName><senderEmail>mail@parckwart.de</senderEmail><timestampReceived>2018-04-27 21:14:04-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Apr 27, 2018 at 04:03:00PM -0400, grarpamp wrote:
&gt; a) If defined as shifting v3 to be "provisioned by default" via docs
&gt; and function, while *continuing to support v2* functionality
&gt; on the network, there's no problem, everyone is happy.
&gt; b) While v2 and v3 do share some capabilities, since v2 and v3
&gt; do offer their own exclusive subset of capabilities to users
&gt; that cannot currently be found in the opposing version,
&gt; *removing v2 support* is a definite issue.

I think that, before making v3 the default, all features from v2 like 
HidServAuth should be implemented and should have been around for a couple of 
Tor versions.

Also, what would happen to an old Tor instance with v2 onion services 
configured after the upgrade? These onion services should definitely not 
automatically be switched to v3, as it could break many configurations on 
systems with automatic software updates. I suggest that, if Tor sees an onion 
service configured in torrc and if there's no "HiddenServiceVersion 3" in 
torrc and there are v2 keys in the HiddenServiceDir, it should continue to 
serve a v2 service.

But leaving a note in the log about v3 services if there's a v2 configured 
could be a good thing, I think.

&gt; v3 is a nice advancement and is needed by lots of users
&gt; for what it can do for them, just as v2 is.

Totally agreed.
-- 
OpenPGP Key: 47BC7DE83D462E8BED18AA861224DBD299A4F5F3
             https://www.parckwart.de/pgp_key

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427233021</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-27 23:30:21-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>



On 28 Apr 2018, at 05:56, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:

&gt;&gt; And also we will be able to reduce the
&gt;&gt; requirements for becoming an HSDir which will strengthen and make our
&gt;&gt; network more robust.
&gt;&gt; 
&gt;&gt; That said, I think we are unfortunately still far from deprecating v2
&gt;&gt; onions:
&gt; 
&gt; 
&gt; thanks for listing all these relevant ticket IDs, I pasted your email into
&gt; trac and I made them child tickets of
&gt; https://trac.torproject.org/projects/tor/ticket/25955
&gt; 
&gt; lets try to link all relevant tickets there

Please don't, that confuses our workflow.
A lot of these tickets are unrelated to v3 onion service features in Tor.

If you want to link all these tickets somewhere, open another ticket.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427233409</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-27 23:34:09-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/alternative)]


On 28 Apr 2018, at 04:48, Damian Johnson &lt;atagar@torproject.org&gt; wrote:

&gt;&gt; OnionBalance requires STEM support for V3
&gt; 
&gt; Hi Alec, would you mind clarifying what you need from Stem? As far as
&gt; I'm aware Stem supports v3 onion service creation...
&gt; 
&gt; https://trac.torproject.org/projects/tor/ticket/25124
&gt; 
&gt; See the 'version 3' note at the end of...
&gt; 
&gt; https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephemeral_hidden_service
&gt; 
&gt; I'm unaware of the ball being in my court on any v3 Onion Service
&gt; stuff. If there's something I should have on my radar then please let
&gt; me know!

OnionBalance requires Stem support for v3 HSFETCH
But Stem requires Tor support for v3 HSFETCH
https://trac.torproject.org/projects/tor/ticket/25417

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 28 Apr 2018, \
at 04:48, Damian Johnson &lt;&lt;a \
href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite" \
preoffsettop="13"&gt;&lt;span&gt;OnionBalance requires STEM support for \
V3&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi Alec, would you \
mind clarifying what you need from Stem? As far as&lt;/span&gt;&lt;br&gt;&lt;span&gt;I'm aware Stem \
supports v3 onion service creation...&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/25124"&gt;https://trac.torproject.org/projects/tor/ticket/25124&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;See \
the 'version 3' note at the end of...&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;span&gt;&lt;a \
href="https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephe \
meral_hidden_service"&gt;https://stem.torproject.org/api/control.html#stem.control.Contro \
ller.create_ephemeral_hidden_service&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I'm \
unaware of the ball being in my court on any v3 Onion Service&lt;/span&gt;&lt;br&gt;&lt;span&gt;stuff. \
If there's something I should have on my radar then please let&lt;/span&gt;&lt;br&gt;&lt;span&gt;me \
know!&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;OnionBalance requires Stem support for v3 \
HSFETCH&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;But \
Stem requires Tor support for v3 HSFETCH&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/25417"&gt;https://trac.torproject.org/projects/tor/ticket/25417&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180428002832</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-28 00:28:32-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

Hi nusenu,

I've just finished catching up with this thread, ticket changes,
and the IRC discussion overnight.

&gt; On 28 Apr 2018, at 09:30, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; On 28 Apr 2018, at 05:56, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; And also we will be able to reduce the
&gt;&gt;&gt; requirements for becoming an HSDir which will strengthen and make our
&gt;&gt;&gt; network more robust.
&gt;&gt;&gt; 
&gt;&gt;&gt; That said, I think we are unfortunately still far from deprecating v2
&gt;&gt;&gt; onions:
&gt;&gt; 
&gt;&gt; 
&gt;&gt; thanks for listing all these relevant ticket IDs, I pasted your email into
&gt;&gt; trac and I made them child tickets of
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/25955
&gt;&gt; 
&gt;&gt; lets try to link all relevant tickets there
&gt; 
&gt; Please don't, that confuses our workflow.
&gt; A lot of these tickets are unrelated to v3 onion service features in Tor.
&gt; 
&gt; If you want to link all these tickets somewhere, open another ticket.

I'm sorry, that was what you did.

But using the cyperpunks account made a few network team members
nervous. When we see accounts we don't know making sweeping
changes, we tend to revert them. That's what happened in this case.

You're welcome to use the cuperpunks account for any changes, but
please check with us next time before making large changes.

In this case, I'm not sure if we want a parent ticket, or a tag.

A tag might be more useful, because we use parent tickets for closely
coupled tasks. And when there are too many layers of parents, people
get confused.

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180430135551</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-04-30 13:55:51-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

[Attachment #2 (multipart/signed)]


On 28 Apr (09:34:09), teor wrote:
&gt; 
&gt; On 28 Apr 2018, at 04:48, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; &gt;&gt; OnionBalance requires STEM support for V3
&gt; &gt; 
&gt; &gt; Hi Alec, would you mind clarifying what you need from Stem? As far as
&gt; &gt; I'm aware Stem supports v3 onion service creation...
&gt; &gt; 
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/25124
&gt; &gt; 
&gt; &gt; See the 'version 3' note at the end of...
&gt; &gt; 
&gt; &gt; https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephemeral_hidden_service
&gt; &gt; 
&gt; &gt; I'm unaware of the ball being in my court on any v3 Onion Service
&gt; &gt; stuff. If there's something I should have on my radar then please let
&gt; &gt; me know!
&gt; 
&gt; OnionBalance requires Stem support for v3 HSFETCH
&gt; But Stem requires Tor support for v3 HSFETCH
&gt; https://trac.torproject.org/projects/tor/ticket/25417

Hmmmm I was told before the v3 control port work by Donnacha that for v3
support, HSFETCH won't be ncessary...

It is the main reason it hasn't been done that is for a lack of use case. The
HSFETCH for v3 is much more tricky in terms of engineering and interface thus
we decided to implement it on the "need it basis".

If OnionBalance actually needs it for v3, then we should try to get that on
the roadmap.

Cheers!
David

-- 
1dKuWYP7Si7mjurnrG6vfHiQfiibnDK5yH7HDBggBeM=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180430141741</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-30 14:17:41-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>


&gt; On 30 Apr 2018, at 23:55, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt;&gt; On 28 Apr (09:34:09), teor wrote:
&gt;&gt; 
&gt;&gt; On 28 Apr 2018, at 04:48, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt;&gt; OnionBalance requires STEM support for V3
&gt;&gt;&gt; 
&gt;&gt;&gt; Hi Alec, would you mind clarifying what you need from Stem? As far as
&gt;&gt;&gt; I'm aware Stem supports v3 onion service creation...
&gt;&gt;&gt; 
&gt;&gt;&gt; https://trac.torproject.org/projects/tor/ticket/25124
&gt;&gt;&gt; 
&gt;&gt;&gt; See the 'version 3' note at the end of...
&gt;&gt;&gt; 
&gt;&gt;&gt; https://stem.torproject.org/api/control.html#stem.control.Controller.create_ephemeral_hidden_service
&gt;&gt;&gt; 
&gt;&gt;&gt; I'm unaware of the ball being in my court on any v3 Onion Service
&gt;&gt;&gt; stuff. If there's something I should have on my radar then please let
&gt;&gt;&gt; me know!
&gt;&gt; 
&gt;&gt; OnionBalance requires Stem support for v3 HSFETCH
&gt;&gt; But Stem requires Tor support for v3 HSFETCH
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/25417
&gt; 
&gt; Hmmmm I was told before the v3 control port work by Donnacha that for v3
&gt; support, HSFETCH won't be ncessary...
&gt; 
&gt; It is the main reason it hasn't been done that is for a lack of use case. The
&gt; HSFETCH for v3 is much more tricky in terms of engineering and interface thus
&gt; we decided to implement it on the "need it basis".
&gt; 
&gt; If OnionBalance actually needs it for v3, then we should try to get that on
&gt; the roadmap.

I didn't know there was any alternative to HSFETCH.

If OnionBalance can do without it, then we don't need it on the roadmap.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180430040252</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-30 04:02:52-0400</timestampReceived><subject>Re: [tor-dev] Closing old Trac Milestones</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Just following up on the old trac milestones.

&gt; On 23 Apr 2018, at 14:31, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; Tor's trac has a lot of milestones.
&gt; Sometimes users select the wrong one, because there are so many.

pde, do you mind if we close these HTTPS Everywhere milestones?

&gt; HTTPSE Cr 2013.4.2x
&gt; HTTPS-E 3.3
&gt; HTTPS-E 3.2.1
&gt; HTTPS-E 3.2.2
&gt; HTTPS-E 3.2.3
&gt; HTTPS-E 4.0dev8
&gt; HTTPS-E 4.0dev9
&gt; HTTPS-E 4.0dev15

GeKo is working through these milestones:

&gt; Chronos: phase one
&gt; Chronos: phase two
&gt; TorBrowserBundle 2.2.x-stable
&gt; TorBrowserBundle 2.3.x-stable
&gt; Torbutton: 1.2.5
&gt; Torbutton: 1.3
&gt; Torbutton: 1.4

Does metrics want to close these milestones?

&gt; ExoneraTor 1.0.0
&gt; Metrics 1.0.0
&gt; Metrics 2.0.0
&gt; Onionoo 1.14.0
&gt; 
&gt; Source: https://trac.torproject.org/projects/tor/roadmap
&gt; 
&gt; If any of the milestones on this list belong to you, and you'll never
&gt; put any more tickets in them, please close them.
&gt; (Or let me know, and I can close them.)

You can close a milestone in the trac admin interface at:
https://trac.torproject.org/projects/tor/admin/ticket/milestones

1. Scroll down to find the milestone
2. Click on the milestone name
3. Click "completed"
4. Click "submit"

T

--
teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlrmlWwACgkQdA2eOQJS
cqLaHw//b48DR0KK4aZT2o+QA1lCg4mMuSfz63zEfqSUI7lJxMpBGJe4Hk866uOb
l9kh7BTiaz5YX8F6ZwqeKSSFjXo5rBnDNoLJ/Kgspt9UAt/CHhfpb0pL7x6D0851
jOPj653OsXnaIHMwtj/Ji3DHR5zsh3EEGdnM6LldnXEhgpj6351XXndx7pybvihp
vntH+gl9b4YDldw/OQ4RF1dEjl/zjGXQPGYzfa0mNxWhfLbynvbkIAGyv0UQemr5
hRLtDLm4zgjdkEEpm7gv1KU5yVAMI9G4vjpDQwKFLDkbF6GX/5zMkDr7j90BHMsX
SesfWKmcR6GpF/538DusquAw47X126YTMRUSdhQcLCgOgKV36GQhWyGr7Cc0bgHz
C3m/sPccjDrsl90H0YD+fEyqqOJYmozhD0qVVJAGYbf1294m9AtKqw4FFo0q4fym
jBjyVEpphova0aamfodlRf+zt8tHPfBE/KiM40DrHepoNIq41mHIMsVAXmFQZreA
uIJZgwbXLW8ei33KfVb+KAjoIH2c7EhWrqiqkvPAWlbRKi/Uc/j1OerhPmYetdAL
TA9hp16JWIZMU/dr6hFUO7hsfb9PHag8XnNlp+AdGb7oBz1H8v7UaGzCn4mNGHkH
Vnf7irixMfLWSRkNHHF+VG+KlFKezT72p1wP98JPWfI62o10GYw=
=7aep
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180426073452</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-26 07:34:52-0400</timestampReceived><subject>Re: [tor-dev] Standardizing the 'onion service' name</subject><body>

[Attachment #2 (multipart/alternative)]


Hi All,

There seems to be some confusion in this thread about the
current state of the hidden service to onion service name transition.

So I'm going to describe the state of things as they are, then try to
describe what would need to be done.

I'd also appreciate feedback from Steph and others on our priorities for
transitioning to the onion service name. I think we have been prioritising
user-facing text. (The blog, website, Tor Browser, metrics,  etc.)

Is this a sensible way of prioritising things?

On 26 Apr 2018, at 16:42, Paul Syverson &lt;paul.syverson@nrl.navy.mil&gt; wrote:

&gt;&gt; Have OnionService aliases for controller commands, events,

These are current called "hidden service" or an abbreviation.

Tor could add an alias mechanism for controller commands, events,
and fields, and use it to do the rename:

https://trac.torproject.org/projects/tor/ticket/25922

I don't think they are as high a priority as the torrc options and man page.

&gt;&gt; descriptor
&gt;&gt; fields

These are currently called "hidden service", or an abbreviation.

Descriptor fields are part of the directory specification and
implementation, and they are highly technical. So I'm not sure we gain
much from aliasing them or renaming them.

Similar arguments might apply to other codebases:
* Onionoo
* stem
* consensus health
* Tor (network daemon)

But the following user-facing applications should add documentation or
change names, if they haven't already:
* Relay Search / metrics website
  * uses HSDir for relay search, because that's what it's called in the
    directory protocol
  * uses "onion service" for statistics
* Tor Browser
  * uses "onion site"
* the Tor website
* new tor blog posts

&gt;&gt; and anything else referencing 'HS' or 'HiddenService'.

We considered adding OnionService* torrc option aliases for every
HiddenService* option in 0.2.9. But we deferred that change because we
ran out of time.

All we need to do is add some new entries in the alias table, then do a
search and replace in the tor man page:
https://trac.torproject.org/projects/tor/ticket/17343

&gt;&gt; Speaking of which, how do we plan to replace abbreviations? Having an
&gt;&gt; 'OSFETCH' or 'OS_CREATED' event doesn't exactly have the same ring as
&gt;&gt; their HS counterparts. ;P

That's a good question.

OS conflicts with "operating system", so we could use:
* Onion
* OnSrv
* no abbreviations
Or any other colour you want to paint the bikeshed.

To avoid an endless discussion, let's leave the decision to
the people who write, review, and merge the code.

&gt;&gt; Adjust all our docs to be consistent about the name.
&gt; 
&gt; Right, anything v3 should be consistently calling these 'onion
&gt; services'.  Variable names, etc. particularly those still in use in
&gt; code shared with v2, don't need to be changed. It is OK if such
&gt; vestiges of older usage remain in abbreviations, as long as the
&gt; description of them, e.g., in any new Tor proposal, describes them
&gt; with appropriately current terminology.

torrc options, the tor man page, and the v3 onion service code
mainly use "hidden service", and sometimes use "onion service".

I don't see much value in changing the code.

If we decide there is value in changing the torrc options and man page,
we need to allocate a few days of work on the roadmap to make it
happen.

&gt;&gt; Renaming takes work. Lesson I learned from Nyx is that it works best
&gt;&gt; if you draw a line in the sand and stand by it. With Nyx, version 2.0
&gt;&gt; is called Nyx (you won't find any docs saying otherwise) and version
&gt;&gt; 1.x is the legacy 'arm' project.
&gt;&gt; 
&gt;&gt; If I was in your shoes I'd opt for the same. Either prioritize the
&gt;&gt; aliases and be firm that v3 are 'Onion Services' or abort the rename.
&gt;&gt; Otherwise this will live in a confusing dual-named limbo land
&gt;&gt; indefinitely. ;P
&gt; 
&gt; I'm prettty sure that v3 being 'onion services' has been the official
&gt; Tor Project position since at least half a year. We wouldn't be
&gt; aborting the rename, because 'abort' would imply it is not
&gt; complete. Anything now not using the current name is not part of an
&gt; incomplete process, it is simply wrong and outdated. Steph correct me
&gt; if I am wrong about that.
&gt; 
&gt; So I think you've answered your own question. Nothing in v3 should be
&gt; called 'hidden services'.

That's not the current state of the tor network daemon v3 onion service
code, specs, options, and man page. They use a mix of terminology
(see above).

&gt; And anything new in code and documentation
&gt; should be called 'onion services'. If you want to think of v2 and
&gt; earlier as 'hidden services' for purposes of understanding legacy
&gt; component and variable names, e.g., HSDir that's fine. And as such,
&gt; variable names, etc. in code that continues to be used for both v2 and
&gt; v3 can can persist. But again, any new specs, documentation, etc.
&gt; should call them 'onion services'.

We have gradually been using onion services in new documentation and
specs, since "single onion services". But we haven't changed existing
code and documentation.

&gt; This acceptance of existing v2 documentation calling them 'hidden
&gt; services' while refusing this for anything v3 is a little misleading
&gt; about when and why the naming transition happened, but its close
&gt; enough to serve as your line in the sand if you feel one is needed. 
&gt; I actually argued the value of essentially such a line-in-the-sand
&gt; position to Steph a while ago. This doesn't preclude also calling v2
&gt; and earlier 'onion services'. Indeed, it's not just OK but preferable,
&gt; for the above mentioned reasons.

It looks like we are doing a gradual transition. I think we prioritised
the things that are seen by the most users (Tor Browser, statistics,
blog, website).

We did not take a line in the sand position in the past, but we could
adopt one for the remaining changes. We could decide on a particular
Tor release (and releases of other codebases). But we need to schedule
the work on the relevant roadmaps.

And maybe there are some obscure technical things (code, comments,
descriptor fields) that just aren't worth changing.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi \
All,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;There seems to be some confusion in this thread about \
the&lt;/div&gt;&lt;div&gt;current state of the hidden service to onion service name \
transition.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So I'm going to describe the state of things as \
they are, then try to&lt;/div&gt;&lt;div&gt;describe what would need to be \
done.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'd also appreciate feedback from Steph and others on \
our priorities for&lt;/div&gt;&lt;div&gt;transitioning to the onion service name. I think we have \
been prioritising&lt;/div&gt;&lt;div&gt;user-facing text. (The blog, website, Tor Browser, \
metrics,  etc.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Is this a sensible way of prioritising \
things?&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 26 Apr 2018, at 16:42, Paul Syverson &lt;&lt;a \
href="mailto:paul.syverson@nrl.navy.mil"&gt;paul.syverson@nrl.navy.mil&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Have \
OnionService aliases for controller commands, events, \
&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;These are current called \
"hidden service" or an abbreviation.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor could add an alias \
mechanism for controller commands, events,&lt;/div&gt;&lt;div&gt;and fields, and use it to do the \
rename:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/25922#ticket"&gt;https://trac.torproject.org/projects/tor/ticket/25922&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
don't think they are as high a priority as the torrc options and man \
page.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;descriptor&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;fields&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;These \
are currently called "hidden service", or an \
abbreviation.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Descriptor fields are part of the directory \
specification and&lt;/div&gt;&lt;div&gt;implementation, and they are highly technical. So I'm not \
sure we gain&lt;/div&gt;&lt;div&gt;much from aliasing them or renaming \
them.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Similar arguments might apply to other \
codebases:&lt;/div&gt;&lt;div&gt;* Onionoo&lt;/div&gt;&lt;div&gt;* stem&lt;/div&gt;&lt;div&gt;* consensus \
health&lt;/div&gt;&lt;div&gt;* Tor (network daemon)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But the following \
user-facing applications should add documentation or&lt;/div&gt;&lt;div&gt;change names, if they \
haven't already:&lt;/div&gt;&lt;div&gt;* Relay Search / metrics website&lt;/div&gt;&lt;div&gt;  * uses \
HSDir for relay search, because that's what it's called in the&lt;/div&gt;&lt;div&gt;  \
  directory protocol&lt;/div&gt;&lt;div&gt;  * uses "onion service" for \
statistics&lt;/div&gt;&lt;div&gt;* Tor Browser&lt;/div&gt;&lt;div&gt;  * uses "onion site"&lt;/div&gt;&lt;div&gt;* \
the Tor website&lt;/div&gt;&lt;div&gt;* new tor blog posts&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; and anything else referencing 'HS' or \
'HiddenService'.&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
considered adding OnionService* torrc option aliases for \
every&lt;/div&gt;&lt;div&gt;HiddenService* option in 0.2.9. But we deferred that change because \
we&lt;/div&gt;&lt;div&gt;ran out of time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All we need to do is add some \
new entries in the alias table, then do a&lt;/div&gt;&lt;div&gt;search and replace in the tor man \
page:&lt;/div&gt;&lt;div&gt;&lt;a href="https://trac.torproject.org/projects/tor/ticket/17343"&gt;https://trac.torproject.org/projects/tor/ticket/17343&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Speaking of which, how do we plan to \
replace abbreviations? Having an&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;'OSFETCH' or 'OS_CREATED' event doesn't exactly have the same ring \
as&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;their HS counterparts. \
;P&lt;/span&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's a good \
question.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;OS conflicts with "operating system", so we could \
use:&lt;/div&gt;&lt;div&gt;* Onion&lt;/div&gt;&lt;div&gt;* OnSrv&lt;/div&gt;&lt;div&gt;* no abbreviations&lt;/div&gt;&lt;div&gt;Or \
any other colour you want to paint the bikeshed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;To avoid an \
endless discussion, let's leave the decision to&lt;/div&gt;&lt;div&gt;the people who write, \
review, and merge the code.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Adjust all our docs to be consistent about the \
name.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Right, anything v3 should be \
consistently calling these 'onion&lt;/span&gt;&lt;br&gt;&lt;span&gt;services'.  Variable names, \
etc. particularly those still in use in&lt;/span&gt;&lt;br&gt;&lt;span&gt;code shared with v2, don't \
need to be changed. It is OK if such&lt;/span&gt;&lt;br&gt;&lt;span&gt;vestiges of older usage remain \
in abbreviations, as long as the&lt;/span&gt;&lt;br&gt;&lt;span&gt;description of them, e.g., in any \
new Tor proposal, describes them&lt;/span&gt;&lt;br&gt;&lt;span&gt;with appropriately current \
terminology.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;torrc options, the tor man page, \
and the v3 onion service &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;code&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;mainly use "hidden service", and sometimes use "onion \
service".&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;I \
don't see much value in changing the code.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we \
decide there is value in changing the torrc options and man page,&lt;/div&gt;&lt;div&gt;we need \
to allocate a few days of work on the roadmap to make \
it&lt;/div&gt;&lt;div&gt;happen.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Renaming takes work. Lesson I learned from Nyx is that it works \
best&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;if you draw a line in the \
sand and stand by it. With Nyx, version 2.0&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;is called Nyx (you won't find any docs saying otherwise) and \
version&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;1.x is the legacy 'arm' \
project.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;If I was in \
your shoes I'd opt for the same. Either prioritize \
the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;aliases and be firm that v3 \
are 'Onion Services' or abort the rename.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Otherwise this will live in a confusing dual-named limbo \
land&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;indefinitely. \
;P&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I'm prettty sure that v3 being \
'onion services' has been the official&lt;/span&gt;&lt;br&gt;&lt;span&gt;Tor Project position since at \
least half a year. We wouldn't be&lt;/span&gt;&lt;br&gt;&lt;span&gt;aborting the rename, because \
'abort' would imply it is not&lt;/span&gt;&lt;br&gt;&lt;span&gt;complete. Anything now not using the \
current name is not part of an&lt;/span&gt;&lt;br&gt;&lt;span&gt;incomplete process, it is simply wrong \
and outdated. Steph correct me&lt;/span&gt;&lt;br&gt;&lt;span&gt;if I am wrong about \
that.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;So I think you've answered your own question. \
Nothing in v3 should be&lt;/span&gt;&lt;br&gt;&lt;span&gt;called 'hidden \
services'.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's not the current state \
of the tor network daemon v3 onion service&lt;/div&gt;&lt;div&gt;code, specs, options, and man \
page. They use a mix of terminology&lt;/div&gt;&lt;div&gt;(see \
above).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;And anything new in \
code and documentation&lt;/span&gt;&lt;br&gt;&lt;span&gt;should be called 'onion \
services'. &lt;/span&gt;If you want to think of v2 and&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;earlier as 'hidden services' for purposes of understanding \
legacy&lt;/span&gt;&lt;br&gt;&lt;span&gt;component and variable names, e.g., HSDir that's fine. And as \
such,&lt;/span&gt;&lt;br&gt;&lt;span&gt;variable names, etc. in code that continues to be used for both \
v2 and&lt;/span&gt;&lt;br&gt;&lt;span&gt;v3 can can persist. But again, any new specs, documentation, \
etc.&lt;/span&gt;&lt;br&gt;&lt;span&gt;should call them 'onion \
services'.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We have gradually been \
using onion services in new documentation and&lt;/div&gt;&lt;div&gt;specs, since "single onion \
services". But we haven't changed existing&lt;/div&gt;&lt;div&gt;code and \
documentation.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;This acceptance of \
existing v2 documentation calling them 'hidden&lt;/span&gt;&lt;br&gt;&lt;span&gt;services' while \
refusing this for anything v3 is a little misleading&lt;/span&gt;&lt;br&gt;&lt;span&gt;about when and \
why the naming transition happened, but its close&lt;/span&gt;&lt;br&gt;&lt;span&gt;enough to serve as \
your line in the sand if you feel one is needed. &lt;/span&gt;&lt;br&gt;&lt;span&gt;I actually argued \
the value of essentially such a line-in-the-sand&lt;/span&gt;&lt;br&gt;&lt;span&gt;position to Steph a \
while ago. This doesn't preclude also calling v2&lt;/span&gt;&lt;br&gt;&lt;span&gt;and earlier 'onion \
services'. Indeed, it's not just OK but preferable,&lt;/span&gt;&lt;br&gt;&lt;span&gt;for the above \
mentioned reasons.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;It looks like we are doing \
a gradual transition. I think we prioritised&lt;/div&gt;&lt;div&gt;the things that are seen by \
the most users (Tor Browser, statistics,&lt;/div&gt;&lt;div&gt;blog, \
website).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We did not take a line in the sand position in the \
past, but we could&lt;/div&gt;&lt;div&gt;adopt one for the remaining changes. We could decide on \
a particular&lt;/div&gt;&lt;div&gt;Tor release (and releases of other codebases). But we need to \
schedule&lt;/div&gt;&lt;div&gt;the work on the relevant roadmaps.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
maybe there are some obscure technical things (code, comments,&lt;/div&gt;&lt;div&gt;descriptor \
fields) that just aren't worth \
changing.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180418132110</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2018-04-18 13:21:10-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

On Wed, Apr 18, 2018 at 6:15 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; Hello Ian, isis, and other crypto people around here!
&gt;
&gt; Here is an intro: In HSv3 we've been using revision counters
&gt; (integers++) to do HS desc replay protection, so that bad HSDirs cannot
&gt; replay old descs to other HSDirs. We recently learned that this is a bad
&gt; idea from a scalability prespective (multiple sites need to track rev
&gt; counter...), and also it's needless complexity in the code (tor needs to
&gt; cache the counters etc.). See ticket #25552 for more details:
&gt;       https://trac.torproject.org/projects/tor/ticket/25552
&gt;       https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n1078
&gt;
&gt; In #25552 we've been making plans to ditch the rev counters and replace
&gt; them with a casual replay cache. (These replay caches also don't need to
&gt; be big, since descriptors are only replayable for a day before the
&gt; ephemeral blinded key changes, and the cache can be reset).
&gt;
&gt; Anyhow, now we've been playing the game of "which part of the desc
&gt; should we use in the replay cache"? The latest plan here has been to use
&gt; the ed25519 descriptor signature since it's something small, simple and
&gt; necessarily changes with every fresh descriptor. And this is how we
&gt; entered the ed25519 malleability scene.
&gt;
&gt; The basic question here is, can we use the ed25519 signature in our
&gt; replay cache and consider it immutable by attackers without the private
&gt; key? And should we use R, or S, or both?
&gt;
&gt; According to RFC8032:
&gt;
&gt;              Ed25519 and Ed448 signatures are not malleable due to the
&gt;              check that decoded S is smaller than l.  Without this
&gt;              check, one can add a multiple of l into a scalar part and
&gt;              still pass signature verification, resulting in malleable
&gt;              signatures.
&gt;
&gt; However, neither donna or ref10 include such a check explicitly
&gt; IIUC. Instead they check whether (RS[63] &amp; 224), which basically ensures
&gt; that the high 3 bits of S are zeroed, which ensures S &lt; 2^253. Is that
&gt; equivalent to the RFC check? Because if I'm counting right, for most
&gt; legit S values you can still add a single l as the attacker and get an
&gt; S' = S + l &lt; 2^253 equivalent signature (you can't add 2*l tho).

This seems right. Malleability is not part of the standard security
definition for signatures.
&gt;
&gt; So what's the state of ed25519 malleability? I know that after the
&gt; Bitcoin incident, people have thought about this a lot, so I doubt we
&gt; are in a broken state, but I just wanted to make sure that we will not
&gt; mess something up. :)
&gt;
&gt; Thanks for the help! :)
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



-- 
"Man is born free, but everywhere he is in chains".
--Rousseau.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180418135359</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-18 13:53:59-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

Watson Ladd &lt;watsonbladd@gmail.com&gt; writes:

&gt; On Wed, Apr 18, 2018 at 6:15 AM, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt; Hello Ian, isis, and other crypto people around here!
&gt;&gt;
&gt;&gt; Here is an intro: In HSv3 we've been using revision counters
&gt;&gt; (integers++) to do HS desc replay protection, so that bad HSDirs cannot
&gt;&gt; replay old descs to other HSDirs. We recently learned that this is a bad
&gt;&gt; idea from a scalability prespective (multiple sites need to track rev
&gt;&gt; counter...), and also it's needless complexity in the code (tor needs to
&gt;&gt; cache the counters etc.). See ticket #25552 for more details:
&gt;&gt;       https://trac.torproject.org/projects/tor/ticket/25552
&gt;&gt;       https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt#n1078
&gt;&gt;
&gt;&gt; In #25552 we've been making plans to ditch the rev counters and replace
&gt;&gt; them with a casual replay cache. (These replay caches also don't need to
&gt;&gt; be big, since descriptors are only replayable for a day before the
&gt;&gt; ephemeral blinded key changes, and the cache can be reset).
&gt;&gt;
&gt;&gt; Anyhow, now we've been playing the game of "which part of the desc
&gt;&gt; should we use in the replay cache"? The latest plan here has been to use
&gt;&gt; the ed25519 descriptor signature since it's something small, simple and
&gt;&gt; necessarily changes with every fresh descriptor. And this is how we
&gt;&gt; entered the ed25519 malleability scene.
&gt;&gt;
&gt;&gt; The basic question here is, can we use the ed25519 signature in our
&gt;&gt; replay cache and consider it immutable by attackers without the private
&gt;&gt; key? And should we use R, or S, or both?
&gt;&gt;
&gt;&gt; According to RFC8032:
&gt;&gt;
&gt;&gt;              Ed25519 and Ed448 signatures are not malleable due to the
&gt;&gt;              check that decoded S is smaller than l.  Without this
&gt;&gt;              check, one can add a multiple of l into a scalar part and
&gt;&gt;              still pass signature verification, resulting in malleable
&gt;&gt;              signatures.
&gt;&gt;
&gt;&gt; However, neither donna or ref10 include such a check explicitly
&gt;&gt; IIUC. Instead they check whether (RS[63] &amp; 224), which basically ensures
&gt;&gt; that the high 3 bits of S are zeroed, which ensures S &lt; 2^253. Is that
&gt;&gt; equivalent to the RFC check? Because if I'm counting right, for most
&gt;&gt; legit S values you can still add a single l as the attacker and get an
&gt;&gt; S' = S + l &lt; 2^253 equivalent signature (you can't add 2*l tho).
&gt;
&gt; This seems right. Malleability is not part of the standard security
&gt; definition for signatures.

Thanks for the help!

Hmm, so everyone gets a shot at a single malleability "attack" with
everye d25519 sig? What's the point of the (RS[63] &amp; 224) check then?

In this case, we can't use S as the replay cache index since the
attacker can mutate it and still get the sig to verify. Can we use R as
the replay cache index then? Can an attacker given (R,S) find (R',S')
such that the sig still verifies?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180418143130</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-04-18 14:31:30-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

[Warning: recovering from illness.  Brain may not be operating at
nominal capacity.  :-p ]

On Wed, Apr 18, 2018 at 04:53:59PM +0300, George Kadianakis wrote:
&gt; Thanks for the help!
&gt; 
&gt; Hmm, so everyone gets a shot at a single malleability "attack" with
&gt; everye d25519 sig? What's the point of the (RS[63] &amp; 224) check then?
&gt; 
&gt; In this case, we can't use S as the replay cache index since the
&gt; attacker can mutate it and still get the sig to verify.

You could still use (S mod l) as the cache index, though, right?

&gt; Can we use R as the replay cache index then? Can an attacker given
&gt; (R,S) find (R',S') such that the sig still verifies?

Using R itself should, AFAICT, be safe against malleability.  More
concretely, whatever representation of R is used in the hash H(R,A,M)
used to compute S (and to verify the signature).  But is malleability
the only attack you should be worried about?  What if one party produces
two descriptors for two different services, but reuses R to cause a
cache collision?  Presumably some untoward badness would result.
Perhaps use the *output* of the hash H(R,A,M)?  Or the pair
(R, S mod l)?

It's also not true that malleability is not part of the standard
security definition for signatures.  That's exactly the difference
between the WUF and SUF (weakly / strongly unforgeable) security
properties.  In a WUF system, the attacker, given a signing oracle,
cannot produce a valid signature on a message she does not present to
the signing orable.  In a SUF system, the attacker cannot produce a
valid (message,signature) _pair_ she does not send to / receive from the
signing oracle.  A system with malleable signatures can be WUF, but
cannot be SUF.

   - Ian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180418151951</emailId><senderName>Taylor R Campbell</senderName><senderEmail>campbell+tor-dev@mumble.net</senderEmail><timestampReceived>2018-04-18 15:19:51-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

&gt; Date: Wed, 18 Apr 2018 16:53:59 +0300
&gt; From: George Kadianakis &lt;desnacked@riseup.net&gt;
&gt; 
&gt; In this case, we can't use S as the replay cache index since the
&gt; attacker can mutate it and still get the sig to verify. Can we use R as
&gt; the replay cache index then? Can an attacker given (R,S) find (R',S')
&gt; such that the sig still verifies?

The verification equation is

   8*S*B = 8*R + 8*H(encode(R) || encode(A) || m)*A.

B is the standard base point of order l; 8 is the cofactor; A is the
public key, a curve point; m is the message; (encode(R), encode(S)) is
the signature, for R a curve point and S an integer.

Here's the leeway, if I haven't missed anything:

- The verification equation is true for any representative of the
  coset S + lZ.

  Since l ~ 2^252 + 2^125, only about one in 2^127 possibilities
  _doesn't_ have two 252-bit integer representatives, and they all
  have a handful of 256-bit ones.  (This is what you already
  discussed.)

- Each choice of R and m uniquely determines an equivalence class of
  values of S, the coset S + lZ.

  The signer with knowledge of the private key can, using a
  nonstandard procedure, pick R = r*B for arbitrarily many different r
  on a single m and compute the corresponding S, yielding any of about
  l ~ 2^252 different valid signatures on on m.  (They could even
  reuse R from one message to another, and leak their private key with
  wild abandon!)

  If the signer with knowledge of the private key is in your threat
  model, the two possible 252-bit representatives of S + lZ are the
  least of your concern!  If you want there to be a verifiably
  _unique_ signature on each possible message, you might just want a
  VRF like VXEdDSA.

- There may be multiple possible encodings of the point R, but only
  one canonical one, which figures into the hash.

  If you accept a non-canonical one, decode it, and _re-encode_ it
  into the canonical one for H, then an attacker may have some leeway
  to vary R.  (This would be a little stupid!  But it's not
  unimaginable.)

  The standard encoding, if I recall correctly, is the little-endian
  encoding of the integer

     2^255 sgn x(R) + rep y(R),

  where sgn x(R) is a single bit specifying which of two possible
  choices of x(R), and rep y(R) is the least integer representative of
  the y coordinate of R, which is always 255 bits.  There are 19 field
  elements with two 255-bit integer representatives: 0 and 2^255 - 19,
  1 and 2^255 - 18, 2 and 2^255 - 17, ..., 18 and 2^255 - 1.

  This is unlikely to happen, because if you picked one of these, you
  would have to find log_B R in order to get an S to make a working
  signature.

- Same goes for the public key A.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180419181929</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-04-19 18:19:29-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

[Attachment #2 (multipart/signed)]


Ian Goldberg transcribed 2.5K bytes:
&gt; On Wed, Apr 18, 2018 at 04:53:59PM +0300, George Kadianakis wrote:
&gt; &gt; Thanks for the help!
&gt; &gt; 
&gt; &gt; Hmm, so everyone gets a shot at a single malleability "attack" with
&gt; &gt; everye d25519 sig? What's the point of the (RS[63] &amp; 224) check then?
&gt; &gt; 
&gt; &gt; In this case, we can't use S as the replay cache index since the
&gt; &gt; attacker can mutate it and still get the sig to verify.
&gt; 
&gt; You could still use (S mod l) as the cache index, though, right?

Yes, although with the caveat that this is somewhat expensive.

&gt; &gt; Can we use R as the replay cache index then? Can an attacker given
&gt; &gt; (R,S) find (R',S') such that the sig still verifies?
&gt; 
&gt; Using R itself should, AFAICT, be safe against malleability.  More
&gt; concretely, whatever representation of R is used in the hash H(R,A,M)
&gt; used to compute S (and to verify the signature).  But is malleability
&gt; the only attack you should be worried about?

R is malleable as well, because it's not guaranteed to not have a small
torsion component.  Also, I think it's also not exactly strictly guaranteed
to be both random and tied to the domain of the secret key which produced
the signature, i.e. if normally R is produced as:

    r = H(H(a)[32:] || M)   mod l
    R = rB

but one could also do:

    r = H(H("yog-shoggoth")[32:] || M)   mod l
    R = rB

which is still a random thing, albeit not tied to the context of the creator
of the signature.  That signature obviously wouldn't verify, but again,
you'd have to do the fairly expensive thing of double-checking that the
signature is valid before using the R as a source of randomness provided by
the actually legit and well-behaved onion service.

&gt; What if one party produces two descriptors for two different services, but
&gt; reuses R to cause a cache collision?  Presumably some untoward badness
&gt; would result.

Yes, replay is also possible, and both the small torsion attack and the
wonkiness above is possible by any party with access to the HS descriptor,
and an unreduced scalar with some multiple(s) of R = 2^260 (mod 2^252 +
27742317777372353535851937790883648493) should also be possible by the HS
itself, depending on which curve library you're using.

&gt; Perhaps use the *output* of the hash H(R,A,M)?  Or the pair
&gt; (R, S mod l)?

H(R || A || M) might be okay… but it's still a little icky given that it's
still not strictly tied to the secret key that produces the eventual
signature (cf. the calculation of `V` below).

I would highly advise reusing Trevor Perrin's work on building a VRF into
Generalised EdDSA, [0] which solves precisely this problem (i.e. "how do I get
verifiable randomness, given an ed25519 signature?") in the following way:
 |
 | The VXEdDSA signing algorithm takes the same inputs as XEdDSA. The output
 | is a pair of values. First, a signature (V || h || s), which is a byte
 | sequence of length 3b bits, where V encodes a point and h and s encode
 | integers modulo q. Second, a VRF output byte sequence v of length equal to
 | b bits, formed by multiplying the V output by the cofactor c.
 |
 | The VXEdDSA verification algorithm takes the same inputs as XEdDSA, except
 | with a VXEdDSA signature instead of an XEdDSA signature. If VXEdDSA
 | verification is successful, it returns a VRF output byte sequence v of
 | length equal to b bits; otherwise it returns false.)
 |
 |    vxeddsa_sign(k, M, Z):
 |        A, a = calculate_key_pair(k)
 |        B_{v} = hash_to_point(A || M)
 |        V = a B_{v}
 |        r = hash3(a || V || Z)     (mod q)
 |        R = r B
 |        R_{v} = r B_{v}
 |        h = hash4(A || V || R || Rv || M) (mod q)
 |        s = r + ha (mod q)
 |        v = hash5(c V) (mod 2^{b})
 |        return (V || h || s), v

(Trevor is using q, where you, Ian, and I are using \ell, and floodyberry
uses n.  Also ignore the `calculate_key_pair` function, that's just because
Signal stores keys in Montgomery form.  Also ignore the numbers after the
hashes, that's just denoting the labelset system for domain separation.)

Personally, I'd redefine `hash_to_point` such that it does two elligator2
encodings from a 512-bit hash, and then adds the points together, before
multiplying by the cofactor, to ensure it produces all (instead of roughly
half of all) possible points.

Also, (shameless plug) you get all of this basically for free if you just do
generalised EdDSA with Ristretto, [1] since the cofactor is elliminated.
I've been working with Trevor on this, it's called D.A.V.R.O.S. and it'll
be done… (as) soon (as I have more free time to finish it).

[0]: https://signal.org/docs/specifications/xeddsa/#vxeddsa
[1]: https://doc-internal.dalek.rs/curve25519_dalek/ristretto/index.html

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180419195203</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2018-04-19 19:52:03-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

On Thu, Apr 19, 2018 at 06:19:29PM +0000, isis agora lovecruft wrote:
&gt; Ian Goldberg transcribed 2.5K bytes:
&gt; &gt; On Wed, Apr 18, 2018 at 04:53:59PM +0300, George Kadianakis wrote:
&gt; &gt; &gt; Thanks for the help!
&gt; &gt; &gt; 
&gt; &gt; &gt; Hmm, so everyone gets a shot at a single malleability "attack" with
&gt; &gt; &gt; everye d25519 sig? What's the point of the (RS[63] &amp; 224) check then?
&gt; &gt; &gt; 
&gt; &gt; &gt; In this case, we can't use S as the replay cache index since the
&gt; &gt; &gt; attacker can mutate it and still get the sig to verify.
&gt; &gt; 
&gt; &gt; You could still use (S mod l) as the cache index, though, right?
&gt; 
&gt; Yes, although with the caveat that this is somewhat expensive.
&gt; 
&gt; &gt; &gt; Can we use R as the replay cache index then? Can an attacker given
&gt; &gt; &gt; (R,S) find (R',S') such that the sig still verifies?
&gt; &gt; 
&gt; &gt; Using R itself should, AFAICT, be safe against malleability.  More
&gt; &gt; concretely, whatever representation of R is used in the hash H(R,A,M)
&gt; &gt; used to compute S (and to verify the signature).  But is malleability
&gt; &gt; the only attack you should be worried about?
&gt; 
&gt; R is malleable as well, because it's not guaranteed to not have a small
&gt; torsion component.

But given (R,S), mutating R to R+kT will cause H(R,A,M) to change, and
so S will change unpredictably (to someone who doesn't know the private
key).

&gt; Also, I think it's also not exactly strictly guaranteed
&gt; to be both random and tied to the domain of the secret key which produced
&gt; the signature, i.e. if normally R is produced as:
&gt; 
&gt;     r = H(H(a)[32:] || M)   mod l
&gt;     R = rB
&gt; 
&gt; but one could also do:
&gt; 
&gt;     r = H(H("yog-shoggoth")[32:] || M)   mod l
&gt;     R = rB
&gt; 
&gt; which is still a random thing, albeit not tied to the context of the creator
&gt; of the signature.  That signature obviously wouldn't verify, but again,
&gt; you'd have to do the fairly expensive thing of double-checking that the
&gt; signature is valid before using the R as a source of randomness provided by
&gt; the actually legit and well-behaved onion service.

I think *anything* you do with the cache label can only be done *after*
you verify the signature.  Otherwise, there are way too many avenues for
attack on the cache that come from crafting arbitrary bitstrings that
don't even make sense.

Your point about everything being better if signatures are unique is
definitely a good one (and it obviously makes any WUF system
automatically SUF.)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180423202219</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2018-04-23 20:22:19-0400</timestampReceived><subject>Re: [tor-dev] Tor Messenger</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Milan Damjanovic:
&gt; Hello,
&gt; I would like to ask is there any online documentation about how is possible
&gt; to transmit text messages via tor nodes?
&gt; I would like to [try to] rewrite the TorChat Messenger which is written in
&gt; Python 2.7 and wxPython to Python 3x and Qt.
&gt; I cant find any documents  how to transmit messages between two tor nodes
&gt; so anything would be helpful...

Just FYI, TorChat and Tor Messenger are 2 different things.  TorChat is
a long-ago-abandoned project that's somewhat similar in design to the
still-developed project Ricochet; Tor Messenger is an Instantbird fork
(similar to how Tor Browser is a Firefox fork).

(I don't have any answer to your actual question, which I guess is about
TorChat, hopefully someone else will chime in on that.)

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEVB3fdzAraEcoBtkSs/LRZXhtZXAFAlreQHQACgkQs/LRZXht
ZXB8ohAAq+8MOwzINol+1DjENiySQX6Z7wo0wO6XHpZR1w6NQ6yANB1rHqtHQN51
i6NDIrEvlyP2hmCQtHdfEOvrKGJonqN1Ce7cuFUh9ri4qT14wRF3JOCxZCT63jt2
JGvBoUVkSty/Lu0VTilAhGb4MbEM2qHTktmSXWrEj0KguNYUvb3mpjglW/ohwxWr
hDZe40JG04/zIQji84YWhWLH3TfhdzYzPL+wsfgTSPEr+ly2+CCQCLp2S7xbxvzv
Sy+XbRgUnDnyDdRa0Qs1djc7MMHczTPY16Mt9tTXu+HdZRXEVkMrlVVzAJOHO26Z
01w86gm9WhOZ13bwevCyOuvxB5LAl95iq/9zuBeW25yqdbwKvATgBJiXFPjPHntU
/toX0Lp3dii1GvuBmJebcjSctS0tM6eVTTMNRRxoK2CBKaNFeOFoXdnOOuPTCke9
OoN1bWCZOPWhySfQvN96sq3iEIPDCNAebaoNNG62yUf05D1HmPeP/Kf7kEoKP9Ji
S6JgJlNr2Y3Sa8v0YCzVF9GXHB+mxlchN4Db/u25SA7k4fFZFIWrU42aZAJC8hv6
9N4/HOqRz2qBBwU6Pmsf1S+tXN6nex4LUKlJhlHvNN1JDsJgLmae2d5Of59pDpjo
ovTRCxw8hk7TkR4rvUfEKVSi6dnDCATl9sCkpKfj+rFME1LEWko=
=2AG7
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180418193931</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-18 19:39:31-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 (two guards) IRC meeting Wed Apr 18, 17:00 UTC</subject><body>

[Attachment #2 (multipart/signed)]


Mike Perry:
&gt; Heyo.
&gt; 
&gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html

Ok, we had this meeting. High level (ammended) action items are:

1. Use patches in https://trac.torproject.org/projects/tor/ticket/25843
   to set NumEntryGuards=2 in torrc, and observe results. Please join us!
   Stuff we are looking for during testing is on that ticket!
2. Merge that patch to make the torrc guard options do what we meant for
   them to do. Probably backport it.
3. Descibe adversary models for our variant proposals from the notes.
   (Why do we disagree? In Mike's case, my disagreements are because I
    think each step is an improvement over previous/status quo -- we can
    decide harder things later and still do better both now and later.)
4. Agree on an order of operations for fixes+changes, ideally such that we
   don't block forever trying to come up with a perfect solution. Things
   are pretty bad now. All we really need to do is agree on steps to make
   it better.

The full meeting logs are here:
http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-04-18-17.01.log.html

Our notes from the pad (https://pad.riseup.net/p/TwoGuardMeeting) are
also below, for archival. Please comment further here on list or in the
testing ticket, not on the pad. It will disappear eventually (and/or get
edited by randos). Please pay particular attention to the proposal
variants we have below, and weigh in if you like (especially with
adversary differentiation).

===============================

Things to decide:
    1. Remove some or all of Tor's path restrictions?
       1a. Remove some,  for some hops? (Allow just same node, or same /16 + family \
two? and for which hops?)  1b. Remove all?
       1c. Allow "same node, same /16, same family" between guard and last hop. If \
it's a 3-hop circ (A - B - A), extend it to a 4-hop circ (A - B - C - A).  2. Use two \
guards?  2a. Set prop#271 values?
       2b. Modify prop#271 behavior?
       2c. Two directory guards?
    3. Alternatives?
	    3a. Allow some leakage about the guard, such as dividing guards into sets \
sharing similar /16 and family restrictions and then choosing exits and middles in a \
way that violates no path restrictions for any guard in your set. Taken to the \
extreme, we get the radical solution of two Tors: A-Tor and B-Tor. A-Tor exits, \
middles, and guards don't conflict each other, and similary for B-Tor. Alternately, \
we can just enforce that no exit is in the same /16 or family as any guard.


Reasons for 1:
    1. Eliminates cases where adversary gets to influence your guard choice
    2. Doing 1b also makes vanguard implementation simpler (no risk of choosing an \
impossible set of vanguards)

Blockers to 1:
    1. Relay operators may like node family as protection?
    2. 1b would make nearly _all_ kinds of path restriction impossible, indefinitely.
    3. Circular paths make traffic analysis easier.
    4. Circular paths are scary. :/


Reasons for 2:
    1. Two guards inherently more resilient to downtime/DoS than one.
    2. Helps conceal transition information when adding/removing single guards
    3. Conflux will help us in more ways than just performance (reliability, \
congestion/DoS resistence)

Blockers for 2:
    1. Current Prop#271 options may not be what we want (what do we do when two \
guards go down?)  2. May still need to remove/relax some restrictions, to avoid using \
3rd guard if one is down.  3. Sybil time is halved (but still large)
    4. Prop#271 mishandles directory guards (but maybe in a way we want it to)
    5. Two-equal-guards means 2X external observers on the path for 1/2 of client \
traffic (but more multiplexed activity)


Relevant tickets related to guard-selection/path-restriction designs:
    https://trac.torproject.org/projects/tor/ticket/14917 (Original bug that cuased \
us to use a second guard)  https://trac.torproject.org/projects/tor/ticket/25347 \
(Clients thrash at one busy guard)  \
https://trac.torproject.org/projects/tor/ticket/13908 (one directory guard?)  \
https://trac.torproject.org/projects/tor/ticket/25546 (vanguard patches -- open \
children are all about restriction issues)  \
https://trac.torproject.org/projects/tor/ticket/25783 (prop#271 bug we might \
encounter if we switch to prop#291 (2 primaries) right now. there's probably more \
where this came from)  https://bugs.torproject.org/17773 (How to transition if guard \
lose guard flag?)  https://bugs.torproject.org/2998 (Bridge path restriction circuit \
failure bug) Other relevant tickets:
    https://trac.torproject.org/projects/tor/ticket/24309 (UX for communicating guard \
purpose / protection to user)

Roger's proposal:
* Remove /16 and family path restrictions between guard and last hop
* Optionally, dir auths don't give you Guard if you're an Exit
* Use first guard but pad to backup guard so the switch isn't as obvious
* First and backup guard are chosen in different /16's and different families

asn proposal:
    * Allow "same node, same /16, same family" between guard and last hop. If it's a \
                3-hop circ (A - B - A), extend it to a 4-hop circ (A - B - C - A).
    * Switch to two primary guards; and revisit prop#271 as needed to make this \
possible and good.

Nick's proposal:
    * allow two primary guards
    * tweak guard design so that primary guards are not chosen in same /16 or family
    * separately, consider relaxing path restriction rules. Not removing.
    * separately, consider other proposals for new behavior on guard failure (as \
                modification to guard-spec).
    * separately, consider requiring introduce cells to contain &gt;=two possible \
                rendezvous points in separate families.
    * separately, require that introduction points be chosen from different families.

Aaron's proposal:
* Use first guard but pad to backup guard so the switch isn't as obvious
* First and backup guard are chosen in different /16's and different families

Mike's proposal:
* Set "num primary guards"=2 and "num primary guards to use"=2
* Make no other changes right now
* File a path selection parent ticket to decide/fix path selection issues
* Tweak prop#271 behavior when both guards are down
* Investigate either favor-one-guard preference, conflux, and/or padding, but do this \
carefully.

Concrete things we can do now:
#1: ourselves set those guard params to 2 and find bugs. once #3 below is done, \
encourage others, like on tor-talk, to do it too. #2: enumerate the current \
situations where we use a guard other than our first guard, especially noting the \
ones where the attacker can make us use a guard other than our first guard. fix as \
many as we want to fix. maybe categorize by whether they cause us to mark our first \
guard as down or not. #3: merge a patch to make the torrc guard options do what we \
meant for them to do #4 Descibe adversary models for above proposals? (Why do we \
disagree? In Mike's case, my disagreements are primarily because I think ech step is \
an improvement over previous/status quo -- we can decide harder things later and \
still do better).


===================

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180410153358</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-10 15:33:58-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; In-line below for ease of comment. Also available at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/tree/proposals/xxx-two-guard-nodes.txt?h=twoguards
&gt;  
&gt; ===========================
&gt; 
&gt; Filename: xxx-two-guard-nodes.txt
&gt; Title: The move to two guard nodes
&gt; Author: Mike Perry
&gt; Created: 2018-03-22
&gt; Supersedes: Proposal 236
&gt; 
&gt; &lt;snip&gt;
&gt; 
&gt; 3.1. Eliminate path restrictions entirely
&gt; 
&gt; If Tor decided to stop enforcing /16, node family, and also allowed the
&gt; guard node to be chosen twice in the path, then under normal conditions,
&gt; it should retain the use of its primary guard.
&gt; 
&gt; This approach is not as extreme as it seems on face. In fact, it is hard
&gt; to come up with arguments against removing these restrictions. Tor's
&gt; /16 restriction is of questionable utility against monitoring, and it can
&gt; be argued that since only good actors use node family, it gives influence
&gt; over path selection to bad actors in ways that are worse than the benefit
&gt; it provides to paths through good actors[10,11].
&gt; 
&gt; However, while removing path restrictions will solve the immediate
&gt; problem, it will not address other instances where Tor temporarily opts
&gt; use a second guard due to congestion, OOM, or failure of its primary
&gt; guard, and we're still running into bugs where this can be adversarially
&gt; controlled or just happen randomly[5].
&gt; 

Hello Mike,

IMO we should not portray removing the above path restrictions as
something extreme, until we have good evidence that those path
restrictions offer something positive in the cases we are
examining. Personally, I see the result of this proposal of making Sybil
attacks two times more quick (section 2.3), as an equally radical
result.

That said, I feel that this proposal is valuable and I'm not trying to
say that I don't like this proposal, or that I don't buy the
arguments. I'm trying to say that I don't know how to weight the
tradeoffs here so that I gain confidence, because I'm not sure how
people are trying to attack Tor clients right now.

The way I see it is that if we adopt this proposal:
+ We are better defended against active attacks like congestion attacks
  and OOM/DoS attacks.
+ We improve network health by reducing congestion to certain guards.
- Sybil attacks can be performed two times more quickly.

IMO, we should not rush this decision for 034, given that it's a
concensus parameter change that can happen instantaneously.  However, we
should do the following soon:

1) Accept that there is no single best guard topology, and fix our
   codebase to work well with either one guard or two guards, so that we
   are ready for when we flip the switch. Perhaps we can fix
   #25753/#25705/etc. in a way that works well both now and in the
   2-guard future?

2) Investigate our current prop#271 codebase and make sure that the
   paragraph below will work as intended if we do this proposal.

3) Involve more peple into this (Roger, NRL, etc.) and have them think
   about this, to gain more confidence.

Do you think this approach is too slow or backwards?

Just to speed it up, I just did (2) below:

&gt; Note that for this analysis to hold, we have to ensure that nodes that
&gt; are at RESOURCELIMIT or otherwise temporarily unresponsive do not cause
&gt; us to consider other primary guards beyond than the two we have chosen.
&gt; This is accomplished by setting guard-n-primary-guards to 2 (in addition
&gt; to setting guard-n-primary-guards-to-use to 2). With this parameter
&gt; set, the proposal 271 algorithm will avoid considering more than our two
&gt; guards, unless *both* are down at once.
&gt; 

OK, the above paragraph is basically the juice of this proposal! I spent
all day today to investigate how this would work! The results are very
positive, but also not 100% straightforward because of the various
intricancies of prop#271.

[First of all, there is no way to simulate the above topology using the
config file because if you set NumEntryGuards=2 in your torrc, Tor will
setup 4 primary guards because of the way get_n_primary_guards()
works. So I hacked my Tor client to *have* 2 primary guards
(guard-n-primary-guards), and *use* 2 primary guards
(guard-n-primary-guards-to-use).]

The good part: This topology works exactly how the proposal wants it to
work. Because of the way primary guards work, you will have 2 primary
guards, and if one of them goes down you will always use the other
primary, instead of falling back to a third guard. That's excellent, but
it's also abusing the primary guard feature in a good way but not in the
way we were intending it to be used.

Here are the side-effects from this abuse:

- By reducing the amount of primaries from three to two, it's more
  likely that all primaries can be down at a given time. Prop#271 was
  written with an inherent assumption that one of the primaries will
  always be reachable, because when all of them are down the code goes
  into an "oh shit! bad reachability!" mode which was mainly designed
  for network-down scenarios (like no-internet-land, or tunnels).

  I'm refering to the UPDATE_WAITING section of prop#271 and
  entry_guards_upgrade_waiting_circuits() in our codebase which takes
  care of this situation. This behavior will basically delay circuits on
  non-primary guards until a primary guard goes online. You can test
  this behavior by blocking connections to all your primaries using
  iptables. I did this today, and while Tor worked fine after some time,
  there were delays and broken circuits. It's very likely we can
  optimize this behavior if we want, so this is not really a blocker for
  this proposal, but something we should think about and experiment
  with...

  We might also want to consider writing code to block clients from
  skipping to lower-priority primary guards if higher-priority primary
  guards are still reachable and guard-n-primary-guards-to-use &gt; 1, so
  that we can have more primary guards than we need without skipping
  them when one of them goes down. That would allow us to get both the
  effect of prop#291 while maintaining the original use of primary guards.

- If we set the number of primary guards to 2 and we leave
  NumDirectoryGuards to 3, then NumDirectoryGuards will not work as
  intended, and we will actually always use our two primary guards for
  dirinfo as long as one of them is reachable. This is not a huge
  problem, and might be a feature, but not the way we were intending to
  use NumDirectoryGuards (see #13908 and
  https://lists.torproject.org/pipermail/tor-dev/2014-May/006820.html).

Other than the above side-effects, Tor worked fine all day and only
connected to the primary guards, even when I blocked connections to one
of them. It was actually quite nice to see!

---

Hope this was useful and let me know if you have questions!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180411111544</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-11 11:15:44-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

[Attachment #2 (multipart/signed)]


Roger Dingledine:
&gt; On Sat, Mar 31, 2018 at 06:52:51AM +0000, Mike Perry wrote:
&gt; &gt; 3.1. Eliminate path restrictions entirely
&gt; &gt; 
&gt; I'm increasingly a fan of this option, the more I read these threads.
&gt; 
&gt; Let's examine the two attacker assumptions behind two of the attacks
&gt; we're worried about.
&gt; 
&gt; Attack one: the client's local ISP collects coarse netflow logs, and these
&gt; logs aren't detailed enough to allow a traffic volume detection attack on
&gt; an existing long-lived TLS flow, so the connection to that first guard
&gt; is safe; but a connection to that second guard will be unusual and not
&gt; multiplexed and at exactly the time of the adversary-controlled circuit
&gt; that triggered it, so that second guard, because it is used so rarely,
&gt; is dangerous to use.
&gt; 
&gt; Attack two: if the client uses its guard as the first hop of its circuit
&gt; and also the adversary-requested fourth hop, then the guard can do
&gt; pairwise traffic correlation attacks on all of its circuits and realize
&gt; that these two circuits it has are really two pieces of the same circuit.
&gt; 
&gt; This second attack seems weird to me. One reason is because in attack
&gt; one we're brushing aside the traffic analysis as hard, whereas in attack
&gt; two we're assuming it's trivial and perfect. But the simpler reason is:
&gt; if your guard is going to participate in a traffic correlation attack
&gt; against you, then it could just as easily team up with some other relay
&gt; that the adversary picked. That is, avoiding reusing your guard on the
&gt; other end of the circuit isn't going to save you if your guard is out
&gt; to get you.

I agree. I am not concerned about attack two. But we're not choosing
between just these two attacks.
 
&gt; To be clear, the design I've been considering here is simply allowing
&gt; reuse between the guard hop and the final hop, when it can't be avoided. I
&gt; don't mean to allow the guard (or its family) to show up as all four
&gt; hops in the path. Is that the same as what you meant, or did you mean
&gt; something more thorough?

By all path restrictions I mean for the last hop of the circuit and the
first (though vanguards would be simpler if we got rid of them for other
hops, too). But I do mean all restrictions, not just guard node choice.
The adversary also gets to force you to use a second network path
whenever they want via the /16 and node family restrictions. And it
happens naturally all the time.

We're not using one guard in the current Tor. We're using two, and the
second one is only used for unmultiplexed activity. That is one property
I don't like about our "let's pretend to use one guard" status quo.

The second thing I don't like is that one guard is fragile, which
enables confirmation attacks when it can be made to go down.

&gt; I think "can't be avoided" means HSDir, IP, RP -- which I note are all
&gt; onion service related circuits.
&gt; 
&gt; I'd like to hear more about the "cleverly crafted exit policy" attack, and
&gt; I wonder if we can't solve that differently. For example, if it's about
&gt; making you do a request to a port that only one exit relay allows, and
&gt; ha ha whoops your guard was on the same /16 as that exit relay... maybe
&gt; it's time for the dir auths to not advertise super rare ports? This was
&gt; one of the topics in the users-get-routed paper too.

Yes that is the one I was talking about.

However, another way to do this type of exit rotation attack is to cause
a client to look up a DNS name where you control the resolver, and keep
timing out on the DNS response. The client will then retry the stream
request with a new exit. The same thing can also be done by timing out
the TCP handshake to a server you control. Both of these attacks can be
done with only the ability to inject an img tag into a page.

You repeat this until an exit is chosen that is in the same /16 or
family as the guard, and then the client uses a second network path for
an unmultiplexed request at a time you control.

&gt; One non-starter idea would be to move onion-service-related Tors to two
&gt; guards, and leave other Tors at one guard. It's a non-starter because of
&gt; course advertising which you are to your local network is no good. But
&gt; that idea gave me a different perspective on this discussion: I wonder
&gt; how much this design decision comes down to making all Tors use two
&gt; guards in order to protect the onion-service-related Tors, which are
&gt; the only ones who actually need it?

Our path restrictions also cause normal exiting clients to use a second
guard for unmultiplexed activity, at adversary controlled times, or just
at periodically at random.
 
&gt; &gt;   However, while removing path restrictions will solve the immediate
&gt; &gt;   problem, it will not address other instances where Tor temporarily opts
&gt; &gt;   use a second guard due to congestion, OOM, or failure of its primary
&gt; &gt;   guard, and we're still running into bugs where this can be adversarially
&gt; &gt;   controlled or just happen randomly[5].
&gt; 
&gt; I continue to think we need to fix these. I'm glad to see that George
&gt; has been putting some energy into looking more at them. The bugs that
&gt; we don't understand are especially worrying, since it's hard to know
&gt; how bad they are. Moving to two guards might put a bit of a bandaid on
&gt; the issues, but it can't be our long-term plan for fixing them.

We're choosing fixes for these bugs that enable an adversary to deny
service to clients at a particular guard, *without* letting those
clients move to a second guard. This enables confirmation attacks, and
these confirmation attacks can be extended to guard discovery attacks by
DoSing guards one at a time until an onion service fails.

Bringing back CREATE_FAST could help with this piece, I suppose, but it
doesn't solve OOM attacks...

&gt; &gt;   Note that for this analysis to hold, we have to ensure that nodes that
&gt; &gt;   are at RESOURCELIMIT or otherwise temporarily unresponsive do not cause
&gt; &gt;   us to consider other primary guards beyond than the two we have chosen.
&gt; &gt;   This is accomplished by setting guard-n-primary-guards to 2 (in addition
&gt; &gt;   to setting guard-n-primary-guards-to-use to 2). With this parameter
&gt; &gt;   set, the proposal 271 algorithm will avoid considering more than our two
&gt; &gt;   guards, unless *both* are down at once.
&gt; 
&gt; I like this general idea of not immediately replacing guards so long as
&gt; you have a working one. In fact, we used to do something similar back
&gt; in the day:
&gt; https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
&gt; says (emphasis mine)
&gt; """
&gt; Tor 0.2.3's entry guard behavior is "choose three guards, ***adding
&gt; another one if two of those three go down*** but going back to the
&gt; original ones if they come back up, and also throw out (aka rotate)
&gt; a guard 4-8 weeks after you chose it."
&gt; """
&gt; 
&gt; There are still some fiddly decisions to make here. For example, as you
&gt; say we probably shouldn't replacement a guard just because we failed to
&gt; connect to one of our guards once. We might decide that it's time to add
&gt; a new second guard if the consensus tells us that one of them is down
&gt; (so we have confirmation that it isn't down for just us, it's down for
&gt; everybody). Or we might decide to wait on adding a new one even if it
&gt; really is down, because maybe it'll come back soon. But how long do
&gt; we wait? And if, while we're down to one, we encounter one of these
&gt; situations where the requested fourth hop overlaps with our remaining
&gt; guard, what do we do?

If I were to drop everything to build the Tor I think should exist, I
would do the following:

1. Use two guards, replacing them only when both are unreachable, or
   when one leaves the consensus.
2. Make path restrictions not as strict (for cases like the one above).
3. Use conflux (which also needs less strict/no path restrictions)
4. Build it on QUIC.

I would do them in that order because I think we get the most benefit
from #1, and we get some benefit from #2 still (as you point out above). 

You keep focusing on the performance aspects of conflux, but that is not
the argument I am making. My arguments for conflux in Section 4 are
about resilience to congestion, downtime, circuit killing, and DoS, as
well as traffic analysis resistance. I see the performance benefits as
secondary. 

(I also think the best arguments for QUIC are also in the reliability
direction, because fixed queues means no adversary provoked OOMing.)

&gt; In fact, here's a hopefully useful insight that I've just realized:
&gt; you're not concerned about one guard vs two guards, you're concerned
&gt; about *transitioning* between guards. It's that moment when you're
&gt; starting to use a new guard, if the attacker can observe that you're
&gt; doing it, and especially if the attacker can make you do it, that is
&gt; vulnerable. And starting with two guards can help, in that it postpones
&gt; the time until you're forced to transition, and maybe also because if
&gt; we do it right it can make the transition less visible.

The transition aspect is a big piece of it, but I think we're also
running into a fragility problem, which makes the transition signal very
loud in many cases.

&gt; But I wonder if we're looking at this backwards, and the primary
&gt; question we should be asking is "How can we protect the transition between
&gt; guards?" Then one of the potential answers to consider is "Maybe we should
&gt; start out with two guards rather than just one." Framing it that way,
&gt; are there more options that we should consider too? For example, removing
&gt; the ability of the non-local attacker to trigger a transition? Then
&gt; there would still be visibility of a transition, but the (non-local)
&gt; attacker can't impact the timing of the transition. How much does that
&gt; solve? Need to think more.

One guard is inherently more fragile than two, and no matter what we do,
it means that there will be a risk of attacks that can confirm guard
choice, because the downtime during this transition can never be hidden
without at least some redundancy.

&gt; In summary:
&gt; 
&gt; (1) I think we should fix the bug from #14917 where the attacker can
&gt; push us off our guard just by naming our guard as the HSDir/IP/RP,
&gt; and I think we should fix it by being willing to reuse our guard when
&gt; it can't be avoided. That step will resolve some, but not all, of the
&gt; pressure about moving to two guards. Then

Without removing all path restrictions that apply to first and last hop,
we're still actually using two guards, and using them at times that the
adversary gets to control if they want, or just randomly otherwise.

&gt; (2) Hopefully the above discussion has helped us move forward on the
&gt; remaining reasons for switching to two guards. To me the two biggest
&gt; questions left to resolve are (a) how best to protect the vulnerable
&gt; transition to a new guard, and if two guards is the best idea we've got
&gt; for that, and (b) how big an issue is it really that having only one
&gt; guard can sometimes give you a low-performance guard, and if two guards
&gt; is the best idea we've got for that one too.

Transitions will always be noisy with one guard, because it is fragile
to DoS, congestion, OOM, circuit failure, onionskin overload, etc etc
etc. How can you provide resiliency under arbitrary and partial failure
without any redundancy?



-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180412162539</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-12 16:25:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; In-line below for ease of comment. Also available at:
&gt; https://gitweb.torproject.org/user/mikeperry/torspec.git/tree/proposals/xxx-two-guard-nodes.txt?h=twoguards
&gt;  
&gt; ===========================
&gt; 
&gt; Filename: xxx-two-guard-nodes.txt
&gt; Title: The move to two guard nodes
&gt; Author: Mike Perry
&gt; Created: 2018-03-22
&gt; Supersedes: Proposal 236
&gt; 
&gt; &lt;snip&gt;
&gt; 
&gt; 3.1. Eliminate path restrictions entirely
&gt; 
&gt; If Tor decided to stop enforcing /16, node family, and also allowed the
&gt; guard node to be chosen twice in the path, then under normal conditions,
&gt; it should retain the use of its primary guard.
&gt; 
&gt; This approach is not as extreme as it seems on face. In fact, it is hard
&gt; to come up with arguments against removing these restrictions. Tor's
&gt; /16 restriction is of questionable utility against monitoring, and it can
&gt; be argued that since only good actors use node family, it gives influence
&gt; over path selection to bad actors in ways that are worse than the benefit
&gt; it provides to paths through good actors[10,11].
&gt; 
&gt; However, while removing path restrictions will solve the immediate
&gt; problem, it will not address other instances where Tor temporarily opts
&gt; use a second guard due to congestion, OOM, or failure of its primary
&gt; guard, and we're still running into bugs where this can be adversarially
&gt; controlled or just happen randomly[5].
&gt; 

Seems like the above paragraph is our main argument against removing
path restrictions.

Might be worth pointing out that if congestion/OOM attacks are in our
threat model against the current single guard design, then the same
adversary can force prop#291 to open a connection to the *third* guard
by first doing an OOM/congestion attack against one of your first two
guards, and then pushing you to your third guard using a path
restriction attack (#14917).

Thought that I should mention that because it might be an argument for
both moving to two guards and also lifting some path restrictions...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180413060409</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-04-13 06:04:09-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

On Sat, Mar 31, 2018 at 06:52:51AM +0000, Mike Perry wrote:
&gt;   The main argument for switching to two guards is that because of Tor's
&gt;   path restrictions, we're already using two guards, but we're using them
&gt;   in a suboptimal and potentially dangerous way.
&gt; 
&gt;   Tor's path restrictions enforce the condition that the same node cannot
&gt;   appear twice in the same circuit, nor can nodes from the same /16 subnet
&gt;   or node family be used in the same circuit.
&gt; 
&gt;   Tor's paths are also built such that the exit node is chosen first and
&gt;   held fixed during guard node choice, as are the IP, HSDIR, and RPs for
&gt;   onion services. This means that whenever one of these nodes happens to
&gt;   be the guard[4], or be in the same /16 or node family as the guard, Tor
&gt;   will build that circuit using a second "primary" guard, as per proposal
&gt;   271[7].
&gt; 
&gt;   Worse still, the choice of RP, IP, and exit can all be controlled by an
&gt;   adversary (to varying degrees), enabling them to force the use of a
&gt;   second guard at will.

I agree with you that we should do something about this bug, where Tor
clients will switch to a rarely used guard in some situations. Our fix
from ticket #14917 was not a good fix. More on that below in Section 3.1.

&gt;   Not surprisingly,
&gt;   the two guard adversary gets to compromise clients roughly twice as
&gt;   quickly, but the timescales are still rather large even for the 10%
&gt;   adversary: they only have 50% chance of success after 4 rotations, which
&gt;   will take about 14 months with Tor's 3.5 month guard rotation.

Three thoughts here:

(A) You're right, 14 months doesn't sound bad here.

(B) This calculation was ignoring churn, right? That is, guards going
away before you wanted to rotate from them. So another way to phrase that
would be "once eight of your guards have gone away, you're in bad shape"?
Looking at it that way, it seems like two guards is more than twice
as scary as one, since *either* of them going away moves you one step
closer on the path. Not the end of the world, but worth noticing. And
maybe partially solvable by your "when one of your two goes away, stick
to the remaining one" design; more on that below.

(C) Similarly, we should be sure to remember the network adversary
here too. I don't know a simple way to reason about it well. Using more
guards over time could be *less* than twice as scary, because sometimes
the network paths overlap so you don't expose as much new surface area
as you might have. And using more guards over time could be *more*
than twice as scary, if the question is whether your traffic ever goes
over that one bad place, since you have an exponentially low chance to
*never* pick a guard where your traffic to/from that guard travels over
the bad place. It really depends on your location, the guard locations,
the Internet topology, and a bunch of other confusing factors.

&gt;   Furthermore, our use of separate directory guards (and three of them)
&gt;   means that we're not really changing the situation much with the
&gt;   addition of another regular guard. Right now, directory guard use alone
&gt;   is enough to track all Tor users across the entire world.

Shit, you're right. The guard set fingerprint issue remains right now,
because we never solved the directory guard side of it. :(

&gt;   While the directory guard problem could be fixed[12] (and should be
&gt;   fixed), it is still the case that another mechanism should be used for
&gt;   the general problem of guard-vs-location management[9].

The part that freaks me out about all the designs I've seen here is the
attack where the local adversary advertises a series of local wireless
addresses, first to make you keep generating new guard contexts (similar
to forcing quick guard rotation), or second to guess-and-check whether
you've already got a guard context for some wireless address in the next
city over. Maybe it can be solved by proper UI ("we'll just delegate
the decision to the user"), but hoo boy. But that's a separate proposal
fortunately. :)

&gt; 3.1. Eliminate path restrictions entirely
&gt; 
I'm increasingly a fan of this option, the more I read these threads.

Let's examine the two attacker assumptions behind two of the attacks
we're worried about.

Attack one: the client's local ISP collects coarse netflow logs, and these
logs aren't detailed enough to allow a traffic volume detection attack on
an existing long-lived TLS flow, so the connection to that first guard
is safe; but a connection to that second guard will be unusual and not
multiplexed and at exactly the time of the adversary-controlled circuit
that triggered it, so that second guard, because it is used so rarely,
is dangerous to use.

Attack two: if the client uses its guard as the first hop of its circuit
and also the adversary-requested fourth hop, then the guard can do
pairwise traffic correlation attacks on all of its circuits and realize
that these two circuits it has are really two pieces of the same circuit.

This second attack seems weird to me. One reason is because in attack
one we're brushing aside the traffic analysis as hard, whereas in attack
two we're assuming it's trivial and perfect. But the simpler reason is:
if your guard is going to participate in a traffic correlation attack
against you, then it could just as easily team up with some other relay
that the adversary picked. That is, avoiding reusing your guard on the
other end of the circuit isn't going to save you if your guard is out
to get you.

Part of why it's hard to compare these two attacks directly is because
one is a client-side-observer adversary and the other is a relay-level
adversary.

Let's look at "attack one" from a relay-level-adversary perspective:
if your first guard is bad, you're screwed already. But if that second
guard might be bad, you really want to do anything you can do to not
reach out to it even once.

And "attack two" from the client-side-observer-level-adversary
perspective: well, if the attacker is watching the *client*, there's
no visible hint that it's reusing its guard later in the path -- and
that's the whole point. But if the attacker is watching the *relay*, then
suddenly we don't have as much diversity of traffic location as we thought
we had. That is, even if your relay is nice, somebody watching the relay's
network could do the pairwise correlation attacks we described earlier.

Another part of what bothers me about attack two -- the one where the
adversary gives you your fourth hop -- is that the adversary has *other*
hops in their side of the circuit, and you don't even know about them.
What if they chose your guard for their middle hop? Or for *their*
guard? There's nothing you can do about those cases, because you can't
know that they're happening. My conclusion is that if we can't solve
significant instances of this attack, we should be wary of paying a
large price to solve only a piece of it.

&gt;   If Tor decided to stop enforcing /16, node family, and also allowed the
&gt;   guard node to be chosen twice in the path, then under normal conditions,
&gt;   it should retain the use of its primary guard.

To be clear, the design I've been considering here is simply allowing
reuse between the guard hop and the final hop, when it can't be avoided. I
don't mean to allow the guard (or its family) to show up as all four
hops in the path. Is that the same as what you meant, or did you mean
something more thorough?

I think "can't be avoided" means HSDir, IP, RP -- which I note are all
onion service related circuits.

I'd like to hear more about the "cleverly crafted exit policy" attack, and
I wonder if we can't solve that differently. For example, if it's about
making you do a request to a port that only one exit relay allows, and
ha ha whoops your guard was on the same /16 as that exit relay... maybe
it's time for the dir auths to not advertise super rare ports? This was
one of the topics in the users-get-routed paper too.

One non-starter idea would be to move onion-service-related Tors to two
guards, and leave other Tors at one guard. It's a non-starter because of
course advertising which you are to your local network is no good. But
that idea gave me a different perspective on this discussion: I wonder
how much this design decision comes down to making all Tors use two
guards in order to protect the onion-service-related Tors, which are
the only ones who actually need it?

&gt;   This approach is not as extreme as it seems on face. In fact, it is hard
&gt;   to come up with arguments against removing these restrictions. Tor's
&gt;   /16 restriction is of questionable utility against monitoring, and it can
&gt;   be argued that since only good actors use node family, it gives influence
&gt;   over path selection to bad actors in ways that are worse than the benefit
&gt;   it provides to paths through good actors[10,11].

Yep.

One remaining feature for MyFamily though is that relay operators can say
"No, even though I run these eight relays, I'm not in a position to do
traffic correlation attacks on users, because I told the users to not
put me in that position." This angle of the feature is about protecting
relays, not about protecting clients.

&gt;   However, while removing path restrictions will solve the immediate
&gt;   problem, it will not address other instances where Tor temporarily opts
&gt;   use a second guard due to congestion, OOM, or failure of its primary
&gt;   guard, and we're still running into bugs where this can be adversarially
&gt;   controlled or just happen randomly[5].

I continue to think we need to fix these. I'm glad to see that George
has been putting some energy into looking more at them. The bugs that
we don't understand are especially worrying, since it's hard to know
how bad they are. Moving to two guards might put a bit of a bandaid on
the issues, but it can't be our long-term plan for fixing them.

&gt;   Note that for this analysis to hold, we have to ensure that nodes that
&gt;   are at RESOURCELIMIT or otherwise temporarily unresponsive do not cause
&gt;   us to consider other primary guards beyond than the two we have chosen.
&gt;   This is accomplished by setting guard-n-primary-guards to 2 (in addition
&gt;   to setting guard-n-primary-guards-to-use to 2). With this parameter
&gt;   set, the proposal 271 algorithm will avoid considering more than our two
&gt;   guards, unless *both* are down at once.

I like this general idea of not immediately replacing guards so long as
you have a working one. In fact, we used to do something similar back
in the day:
https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
says (emphasis mine)
"""
Tor 0.2.3's entry guard behavior is "choose three guards, ***adding
another one if two of those three go down*** but going back to the
original ones if they come back up, and also throw out (aka rotate)
a guard 4-8 weeks after you chose it."
"""

There are still some fiddly decisions to make here. For example, as you
say we probably shouldn't replacement a guard just because we failed to
connect to one of our guards once. We might decide that it's time to add
a new second guard if the consensus tells us that one of them is down
(so we have confirmation that it isn't down for just us, it's down for
everybody). Or we might decide to wait on adding a new one even if it
really is down, because maybe it'll come back soon. But how long do
we wait? And if, while we're down to one, we encounter one of these
situations where the requested fourth hop overlaps with our remaining
guard, what do we do?

In fact, here's a hopefully useful insight that I've just realized:
you're not concerned about one guard vs two guards, you're concerned
about *transitioning* between guards. It's that moment when you're
starting to use a new guard, if the attacker can observe that you're
doing it, and especially if the attacker can make you do it, that is
vulnerable. And starting with two guards can help, in that it postpones
the time until you're forced to transition, and maybe also because if
we do it right it can make the transition less visible.

But I wonder if we're looking at this backwards, and the primary
question we should be asking is "How can we protect the transition between
guards?" Then one of the potential answers to consider is "Maybe we should
start out with two guards rather than just one." Framing it that way,
are there more options that we should consider too? For example, removing
the ability of the non-local attacker to trigger a transition? Then
there would still be visibility of a transition, but the (non-local)
attacker can't impact the timing of the transition. How much does that
solve? Need to think more.

&gt; 3.2. No Guard-flagged nodes as exit, RP, IP, or HSDIRs
&gt; 
&gt;   Similar to 3.1, we could instead forbid the use of Guard-flagged nodes
&gt;   for the exit, IP, RP, and HSDIR positions.
&gt; 
&gt;   This solution has two problems: First, like 3.1, it also does not handle
&gt;   the case where resource exhaustion could force the use of a second
&gt;   guard. Second, it requires clients to upgrade to the new behavior and
&gt;   stop using Guard flagged nodes before it can be deployed.

I'm not much of a fan of this approach (it seems so inelegant!), but
I find the two problems that you identified to be unsatisfying for
ruling it out. I wonder if we can find some stronger arguments against
this approach?

Otherwise I might find myself starting to like it. :)

One stronger argument might be: "the attacker can always use Guard-flagged
nodes for other hops on its half of the circuit, and you wouldn't even
be able to know that it's doing it, so if the goal is to never have a
circuit with your guard both at your end and also reused elsewhere in
the circuit, sorry you can't achieve that goal, so stop messing stuff
up while trying to achieve what can only ever be a partial solution."

&gt; 4. The future is confluxed
&gt; 
&gt;   An additional benefit of using a second guard is that it enables us to
&gt;   eventually use conflux[6].

I think the performance benefits are the main arguments in favor
of doing two guards. In fact, I still think that it's mainly a
performance-vs-safety tradeoff.

I agree with George that moving to two guards now so that we can maybe
do Conflux later is doing it the wrong way round. Since it's so easy
to switch to two guards, that should be one of the very easy steps in
moving to Conflux when we do, and taking the safety hit now in exchange
for the potential performance benefit later doesn't seem best.

But there's another performance argument we shouldn't forget: if you have
two guards, you're much more likely to have at least one guard that's
adequately fast. Right now some of the guards are fast (relative to
others), and some are slow (relative to others). If you get one of the
lower-end guards, your Tor performance is sad -- for months! We tried
to mitigate that issue when we switched to one guard, by raising the
required bandwidth to get the Guard flag, so there would be no truly
terrible guards. But still, some guards are more equal than others.

This issue came up especially in the context of the December/January CPU
overload attacks, where some guards were overwhelmed by circuit creation
requests, and if you had a happy guard, lucky you, but if you had a sad
guard, you might as well delete your Tor Browser and try again.

Now, in an ideal world we should come up with fixes for all of those other
issues, for example by taking the Guard flag away from relays that can't
be great guards. But in the world we live in right now, we can relieve
some of that pressure-to-be-perfect by giving people two guards.

But if we're only going on a performance vs safety basis, I don't see a
huge rush to trade off safety until we have a better handle on what sort
of performance benefits we'd actually get, and until we've compared to
other low-hanging performance fruit.

In summary:

(1) I think we should fix the bug from #14917 where the attacker can
push us off our guard just by naming our guard as the HSDir/IP/RP,
and I think we should fix it by being willing to reuse our guard when
it can't be avoided. That step will resolve some, but not all, of the
pressure about moving to two guards. Then

(2) Hopefully the above discussion has helped us move forward on the
remaining reasons for switching to two guards. To me the two biggest
questions left to resolve are (a) how best to protect the vulnerable
transition to a new guard, and if two guards is the best idea we've got
for that, and (b) how big an issue is it really that having only one
guard can sometimes give you a low-performance guard, and if two guards
is the best idea we've got for that one too.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180418082751</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-04-18 08:27:51-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

On Wed, Apr 11, 2018 at 11:15:44AM +0000, Mike Perry wrote:
&gt; &gt; To be clear, the design I've been considering here is simply allowing
&gt; &gt; reuse between the guard hop and the final hop, when it can't be avoided. I
&gt; &gt; don't mean to allow the guard (or its family) to show up as all four
&gt; &gt; hops in the path. Is that the same as what you meant, or did you mean
&gt; &gt; something more thorough?
&gt; 
&gt; By all path restrictions I mean for the last hop of the circuit and the
&gt; first (though vanguards would be simpler if we got rid of them for other
&gt; hops, too).

Can you lay out for us the things to think about in the Vanguard design?
Last I checked there were quite a few Vanguard design variants, ranging
from "two vanguards per guard, tree style" to some sort of mesh.

In particular, it would be convenient if there is a frontrunner design
that really would benefit from relaxing many path restrictions, and a
frontrunner design that is not so tied together to the path restriction
question.

&gt; But I do mean all restrictions, not just guard node choice.
&gt; The adversary also gets to force you to use a second network path
&gt; whenever they want via the /16 and node family restrictions.

Can you give us a specific example here, for this phrase "network
path"? When you say "second network path" are you thinking in the
Vanguard world?

&gt; We're not using one guard in the current Tor. We're using two, and the
&gt; second one is only used for unmultiplexed activity. That is one property
&gt; I don't like about our "let's pretend to use one guard" status quo.

Right, I agree.

&gt; &gt; I'd like to hear more about the "cleverly crafted exit policy" attack
&gt; 
&gt;  another way to do this type of exit rotation attack is to cause
&gt; a client to look up a DNS name where you control the resolver, and keep
&gt; timing out on the DNS response. The client will then retry the stream
&gt; request with a new exit. The same thing can also be done by timing out
&gt; the TCP handshake to a server you control. Both of these attacks can be
&gt; done with only the ability to inject an img tag into a page.
&gt; 
&gt; You repeat this until an exit is chosen that is in the same /16 or
&gt; family as the guard, and then the client uses a second network path for
&gt; an unmultiplexed request at a time you control.

Hm! Yes, this is a yucky one. (I don't think just an img tag would be
enough, because Tor will try a few circuits and then give up. You'd need
some sort of javascript or refresh chain or the like that generates new
addresses and tries them in succession. But that's totally feasible.)

This one is also yucky because we could also imagine a different way to
pick your path, where when you're selecting your exit, you avoid choosing
exits which would conflict with your guard, and thus you'll never be
pushed off of your guard. But then the destination website can do this
same attack over time and notice which exit you never try to use. So
this is a case where to blend in best, we *need* to be willing to use
all of the potential exits.

But since normal exit circuits are three hops, if we simply relax the
path restrictions, we could be making a circuit of the form "A - B - A",
which would not only stand out as weird to B, but actually right now a
relay in B's position will refuse such a circuit. Bad news all around.

The three fixes that come to mind are

(A) "Have two guards": so you can pick any exit you like, and then just
use the guard that doesn't conflict with the exit you picked.

(B) "Add a bonus hop when needed": First relax the /16 and family
restrictions, so the remaining issue is reuse of your guard. Then if
you find that you just chose your guard as your exit, insert an extra
hop in the middle of that circuit.

(C) "Exits can't be Guards": First relax the /16 and family restrictions,
so the remaining issue is reuse of your guard. Then notice that due
to exit scarcity, guards aren't actually used in the exit position
anyway. Then enforce that rule (so they can't be in the future either).

All three of these choices have downsides. But all three of them look
like improvements over the current situation -- because of how crappy
the current situation is.

(Rejected option (D): "Just start allowing it": Relax the /16 and
family restrictions, and also relax the rule where relays refuse a
circuit that goes right back where it came from. Giving the middle node
that much information about the circuit just wigs me out.)

Also, notice that I think Mike's proposed design will turn out to be some
combination of "A" and also something like "B" or "C", because even if
you start with two guards, if you don't add a new guard right when your
first guard goes down, you might find yourself in the situation where
you have one working guard, and you pick it as your exit, and now you
need to do *something*.

&gt; Our path restrictions also cause normal exiting clients to use a second
&gt; guard for unmultiplexed activity, at adversary controlled times, or just
&gt; at periodically at random.

Just to make sure I understand: at least on the current network,
that's because of the /16 rule and the family rule, and not because of
the "if the exit you picked turns out to be your guard too, move to a
different guard" rule, because exits aren't normally used for guards on
our current network?

On more examination though, that's not something to rely on with our
current design, since I bet there are weird edge cases like a relay
loses its Guard flag, but it's still your Guard so you keep using it
(depending on the advice del aÃƒ ±o from #17773), but now the weightings
let you pick it for your Exit, and oops.

Another problematic example would be a relay that you picked as your
Guard, and later it opened up its exit policy and became an Exit.

So if I wanted to try to flesh out my "Then enforce that rule" approach
above, we would need to (1) Have dir auths take away the Guard flag from
relays that can be used as Exits, and (2) Make sure that clients know
that if their guards lose the Guard flag, they should treat them as being
no longer guardworthy. I think we're doing that second one right now,
based on my latest reading of #17773, so this would actually be a pretty
easy change. But still, it's not exactly elegant.

&gt; &gt; &gt;   However, while removing path restrictions will solve the immediate
&gt; &gt; &gt;   problem, it will not address other instances where Tor temporarily opts
&gt; &gt; &gt;   use a second guard due to congestion, OOM, or failure of its primary
&gt; &gt; &gt;   guard, and we're still running into bugs where this can be adversarially
&gt; &gt; &gt;   controlled or just happen randomly[5].
&gt; &gt; 
&gt; &gt; I continue to think we need to fix these. I'm glad to see that George
&gt; &gt; has been putting some energy into looking more at them. The bugs that
&gt; &gt; we don't understand are especially worrying, since it's hard to know
&gt; &gt; how bad they are. Moving to two guards might put a bit of a bandaid on
&gt; &gt; the issues, but it can't be our long-term plan for fixing them.
&gt; 
&gt; We're choosing fixes for these bugs that enable an adversary to deny
&gt; service to clients at a particular guard, *without* letting those
&gt; clients move to a second guard. This enables confirmation attacks, and
&gt; these confirmation attacks can be extended to guard discovery attacks by
&gt; DoSing guards one at a time until an onion service fails.

I would find non-onion-service examples more compelling here, since I
want to avoid falling back into the "well, onion services need special
treatment to be safe, so we have to choose between hurting normal clients
and hurting onion services" trap.

How is this for an alternative scenario to be considering: the attacking
website gives the Tor Browser user some page content that causes the
browser to initiate periodic events. Then it starts congesting guards
one at a time until the events stop arriving.

Are those two scenarios basically equivalent in terms of the confirmation
attacks you are worrying about? I hope yes, and now I can stop getting
distracted by wondering if going to this effort is worth it only to
protect onion services? :)

&gt; You keep focusing on the performance aspects of conflux, but that is not
&gt; the argument I am making. My arguments for conflux in Section 4 are
&gt; about resilience to congestion, downtime, circuit killing, and DoS, as
&gt; well as traffic analysis resistance. I see the performance benefits as
&gt; secondary. 

I like conflux in theory, but somebody needs to do the other 90%
of the work to make it a concrete thing that we can consider.

I continue to think "Tor should switch to two guards, because one day
we should design and deploy conflux" is a terrible reason to switch to
two guards now.

So I didn't mean to mix the conflux discussion and the performance
discussion. I meant to mostly ignore the conflux discussion (because it
is a future proposal, not this one), while also making sure that we don't
forget the potential performance benefits of having two guards in general.

&gt; &gt; But I wonder if we're looking at this backwards, and the primary
&gt; &gt; question we should be asking is "How can we protect the transition between
&gt; &gt; guards?" Then one of the potential answers to consider is "Maybe we should
&gt; &gt; start out with two guards rather than just one." Framing it that way,
&gt; &gt; are there more options that we should consider too? For example, removing
&gt; &gt; the ability of the non-local attacker to trigger a transition? Then
&gt; &gt; there would still be visibility of a transition, but the (non-local)
&gt; &gt; attacker can't impact the timing of the transition. How much does that
&gt; &gt; solve? Need to think more.
&gt; 
&gt; One guard is inherently more fragile than two, and no matter what we do,
&gt; it means that there will be a risk of attacks that can confirm guard
&gt; choice, because the downtime during this transition can never be hidden
&gt; without at least some redundancy.

How's this for another option: clients have two guards, but they have
a first guard and a backup guard. They do the traffic padding to both
of them, to ensure continuous netflow sessions in their local ISP's
logs. But they try to send most of their traffic over the first guard,
thus avoiding most of the "increased surface area" concerns about using
two guards at once. And we try to reduce the frequency of situations where
they can't use their first guard. But in the "transition" situations
that we decide we need to keep, they use their backup guard, and it's
already available and ready and that netflow session is already active
in the eyes of their ISP.

This approach isn't conflux (yet), but it's not incompatible with later
changing things so we do conflux.

It also doesn't get us the lower variance of performance that having
two equally used guards would get us. But I am ok with that for now,
at least until somebody has done some performance analysis to show that
we're really suffering now and we would stop suffering then.

It adds load onto the relays, by almost doubling the number of sockets
used by guards for clients, and also by adding more bandwidth load from
the padding cells to/from the backup guard. (How much bandwidth load is
this, per client?)

And it doesn't actually provide as much "real" cover traffic onto the
backup guard in most situations, so somebody who can look more thoroughly
at the traffic flows will still be able to distinguish a transition
event from the first to the backup. Maybe that's a problem? Or maybe
the netflow level adversary that we declared in the threat model can't
do that, and a real attacker would be able to see the traffic details
anyway, so we're fine^W^Wno worse off than before?

Assuming this design meets all of our goals, let's examine two variants
of it to make sure we understand what we're actually trading off. In
particular, consider a design where we maintain (and pad) these two
connections, vs a design where we maintain a connection to our first
guard and then launch a connection to the backup guard on demand. The
downside of keeping the backup connection open is the extra network-wide
socket and bandwidth load on relays, while the downsides of launching
a connection on demand are the risk that a local netflow-level ISP can
see when we transition to using the backup guard, plus the risk that a
remote attacker who can cripple guards will be able to notice the delay
in the "launch on demand case" but could not distinguish the delay in
the "two connections" case.

That second risk doesn't seem so scary to me, since local handshakes
should be a small fraction of the overall time it takes to build and use
a new circuit. But above you say "the downtime during this transition can
never be hidden without at least some redundancy", so if you think this
risk is scary, I'd like to hear more details about why. (Maybe the design
you were concerned about was one where we just freeze in place and fail
when we don't want to use our first guard? I agree, that's a bad design,
and we can do better, for example by "be willing to use the second guard".)

Whereas that first risk does seem plausible to me -- worth trying to
reduce. I think we should start by enumerating as many scary scenarios
as we can (where scary means "currently we would shift away from our
first guard"), and then fix as many of them as we can. Then we should
look at the remaining scenarios where we would switch over to using our
backup guard (like, when our first guard isn't able to build new circuits
for us), and decide if the cost of the additional load on the network is
worth hiding that transition timing from a netflow-level client-side-ISP
adversary. I can see the answer being "yes, it's worth it", but I think it
will be useful to have a good handle on which transition scenarios remain.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180414224801</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-14 22:48:01-0400</timestampReceived><subject>Re: [tor-dev] Hogging of second_elapsed_callback()</subject><body>


&gt; On 15 Apr 2018, at 07:38, Linus Nordberg &lt;linus@torproject.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; How long time can we spend signing status documents before tor gets sad?
&gt; 
&gt; I ask because I'm planning on putting dirauth signing keys on a
&gt; sloooooow HSM and would like to understand if I'd have to make
&gt; format_networkstatus_vote() and networkstatus_compute_consensus() (and
&gt; their callers) be "restartable", much like dirvote_act() is
&gt; "restartable".
&gt; 
&gt; Current measurements indicate a worst case figure of 6.5 seconds for a
&gt; hashing and signing operation. This may even increase some over
&gt; time. (It may also shrink considerably with some optimisations but this
&gt; is where we are today.)

Connections and circuits might timeout over that 6.5 seconds.

Can you shift the signing to its own thread?
Or make it asynchronous?

Tor has cpuworkers, which could be used to do signing work.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180407014948</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-04-07 01:49:48-0400</timestampReceived><subject>Re: [tor-dev] Consensus-health single-relay data</subject><body>

This now supports exact nickname, partial fingerprint, and multiple of
each; and is deployed.  Other updates are:

- Known flags are not omitted from summary
- A footnote is given when an assigning bwauth is not present
- the misleading sha-1 signature algorithm is removed
- Atlas became Relay Search
- You can search for relays in votes that are missing a flag (e.g.
that are struck-through) by prefacing the flag with a "!".  E.g.
"!HSDIR" on the detailed will show relays where one DirAuth did not
vote for the HSDir flag, but enough DirAuths did such that it was
granted the flag.  This is particularly useful for !ReachableIPv6

On 9 March 2018 at 13:55, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;
&gt;
&gt;&gt; On 9 Mar 2018, at 20:28, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;&gt;
&gt;&gt; I have tested it on Tor Browser and High Security Slider, seems to
&gt;&gt; work for me, but I want feedback on the UX and for bugs
&gt;
&gt; Wow! It works! And it even works in iOS Safari.
&gt;
&gt; Also, there is a feature? where you can keep pasting relay fingerprints
&gt; into the box, and it will keep adding them to the end of the page.
&gt;
&gt; How hard would it be to add support for:
&gt; * multiple fingerprints
&gt; * nicknames
&gt; * partial fingerprints
&gt;
&gt; I don't know how important each of these features are.
&gt; But I bet that nicknames would be the first feature request from most users.
&gt;
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180413165213</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-04-13 16:52:13-0400</timestampReceived><subject>Re: [tor-dev] Notes from 12 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

&gt; Good question!
&gt;
&gt; While I didn't necessarily work on sbws while at my place of work, I
&gt; couldn't rationalize that it is unrelated to my day job. Thus I need to
&gt; get permission from my employer in order to release sbws.
&gt;
&gt; I've already submitted that paperwork and expect to get it back in about
&gt; 2 weeks.
&gt;
&gt; It is licensed under CC0 and is therefore in the public domain (or will
&gt; be... depending on how you want to interpret the situation).
&gt;
&gt; Fun side note: little-t-tor itself had to go through the same process.
&gt;
&gt; Sorry for the inconvenience.

Ahhhh! Mystery solved. Makes complete sense - thanks Matt!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180415051609</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2018-04-15 05:16:09-0400</timestampReceived><subject>Re: [tor-dev] Hogging of second_elapsed_callback()</subject><body>

teor &lt;teor2345@gmail.com&gt; wrote
Sun, 15 Apr 2018 08:48:01 +1000:

&gt; Connections and circuits might timeout over that 6.5 seconds.

OK, good to know.


&gt; Can you shift the signing to its own thread?
&gt; Or make it asynchronous?
&gt;
&gt; Tor has cpuworkers, which could be used to do signing work.

Some non-blockingness would be required, yes. 

An asynchronous cryptographic tokens API would be useful but if we're
unable to pull that off, having a cpuworker blocking on the call would
be a solution.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180417130130</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-17 13:01:30-0400</timestampReceived><subject>Re: [tor-dev] Tor Bandwidth Measurements Document Format</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Thanks for writing this draft spec.

Please see my suggested changes below:

&gt; On 17 Apr 2018, at 21:23, juga &lt;juga@riseup.net&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; as commented with teor and pastly, i send in-line a draft specification
&gt; for the document format that the bandwidth scanner implementations
&gt; should produce.
&gt; 
&gt; I've left my own questions/notes in square brackets.
&gt; 
&gt; Thanks,
&gt; juga.
&gt; 
&gt; =======================================
&gt; 
&gt;          Tor Bandwidth Measurements Document Format
&gt;          [juga: which name should we give to this document?]

That's a fine name.
You can leave out the "Document" if you want.

&gt; 1. Scope and preliminaries
&gt; 
&gt;  This document describes the format of Tor's bandwidth measurements
&gt;  document, version X.X.X [juga: which version should be this?]

It doesn't matter, so let's use semantic versioning:
* the original torflow format was 1.0.0
* the format in this spec adds the "version" feature, so it is 1.1.0
  (it is compatible with 1.0.0, as long as parsers ignore unrecognised
  lines)

&gt;  and later.
&gt; 
&gt;  Since Tor version X.X.X [juga: which tor version?]

It looks like 0.2.4.12-alpha added measured bandwidths
https://gitweb.torproject.org/tor.git/tree/ChangeLog#n12710

&gt; the directory
&gt;  authorities use the bandwidth measurements document called
&gt;  "V3BandwidthsFile" and produced by Torflow [1]
&gt;  (format described in README.spec.txt [2]).
&gt; 
&gt;    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
&gt;    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
&gt;    "OPTIONAL" in this document are to be interpreted as described in
&gt;    RFC 2119.
&gt; 
&gt; 1.2. Acknowledgements
&gt; 
&gt;  The original bandwidth measurement scanner (Torflow) and format was
&gt;  created by mike. Teor suggested to write this specification while
&gt;  contributing on pastly's new bandwidth scanner implementation.
&gt; 
&gt;  This specification was revised after feedback from:
&gt; 
&gt;    XXX
&gt; 
&gt; 1.3 Outline
&gt; 
&gt;  The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2
&gt;  of dir-spec.txt [3] are obtained by bandwidth authorities, which are
&gt;  either directory authorities or other servers running bandwidth
&gt;  measurement scanners and sending the results to the former.
&gt;  [juga: it seems that bandwidth authorities have not been formally
&gt;  before]

You could use the definition in the man page:
"the bandwidth-authority generated file storing information on
relays' measured bandwidth capacities"

&gt; 2. Format details
&gt; 
&gt;  Bandwidth measurements MUST contain the following sections:
&gt;  - Header (exactly once)
&gt;  - Relays measurements (zero or more times)
&gt; 
&gt;  Each section (or entry) ends with a separator.

This line is a copy-paste error, it should be deleted.

&gt; 2.1. Nonterminals
&gt; 
&gt;  The following nonterminals are defined in the Onionoo details
&gt;  document specification [4]:
&gt; 
&gt;    fingerprint
&gt;    nickname

This file format gets the fingerprint and nickname from the
consensus, so you should reference dir-spec.txt.

(dir-list-spec.txt gets relay fingerprints and nicknames from
Onionoo. That's why it uses the Onionoo definitions.)

Here are the definitions of hexdigest (fingerprint) and nickname:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1268

&gt;  In the bandwidth measurement documents nickname is optional.

"optional" is not relevant in a definition.
Let's delete this line, it's already documented as optional later on.

&gt;  The following nonterminals are defined in the in dir-spec.txt:
&gt; 
&gt;    NL      (newline)
&gt;    SP      (space)
&gt; 
&gt;    "bw" = INT, the aggregated measured bandwidth of this relay, in
&gt;    kilobytes per second.

bw is not defined in dir-spec.txt. And the formatting is confusing.
Double quotes are used for ASCII literal strings in dir-spec.txt.
Can you please follow the format used in dir-spec.txt?

Here is one example:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n210

Here's how you can define bw using the Int definition from
dir-spec.txt:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n795

bw = Int

bw is the aggregated measured bandwidth of this relay, in kilobytes
per second.

&gt;  We introduce the following nonterminals:
&gt;  [juga: this should probably be defined more formally and should
&gt;  probably link to other documents, which ones?]

dir-spec.txt

&gt;    "version" = The name and the version of the bandwidth scannner
&gt;    software, such as "sbws 0.1.0".

Our newest spec uses "version" for the file format version:
https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt#n148

So please don't make a field with a different meaning and structure,
and call it "version".

I suggest:
* use "version" for the file format version (or don't use "version")
* use "source" for the implementation software name and version

Please fix the formatting of this definition to be like dir-spec.txt.
This definition has two arguments separated by spaces, the name,
and the version.

&gt;    The name of the software, if absent, is assumed to be "torflow".
&gt;    [juga: which should be the version if absent?]

"if absent" is not relevant in a definition.
Let's move these lines to the header section.

The software version should be optional.
Torflow does not have a version, so we cannot require a version.

&gt;    "timestamp" = INT, the Unix Epoch time when the file was created.

Please fix the formatting of this definition to be like dir-spec.txt.

&gt; 2.2. Header format

We should say if order matters.
We should say how new items get added to the header.
(We could say that parsers MUST ignore unrecognised lines.)

&gt;  It MUST consists of:
&gt; 
&gt;    "timestamp" timestamp NL
&gt;    "version" version NL

The sbws sample data has:
1523911758
version=0.1.0

The first line does not have a "timestamp" string literal.
The second line has an equals sign.
The second line is optional (see the torflow sample data).

Does Tor ignore the version line?
If it does, we should document it.

&gt; 2.3. Relay measurements format

You should say that order on a line doesn't matter, and relay order
also doesn't matter.

&gt;  Relays measurements MUST consist of the following items.
&gt; 
&gt;    "node_id" fingerprint SP
&gt;    "bw" bandwidth SP

The format has equals signs, but this definition does not.

&gt;  When there are no more items, the "bw" item ends with NL instead of
&gt;  SP.

It might be easier to say that each line allows extra arguments, and
reference the dir-spec.txt definition:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n261

But does each argument need an equals sign?

&gt; 2.4. Optional extra items
&gt; 
&gt;  Different implementations of the bandwidth measurements scanners MAY
&gt;  include other items per relay.
&gt; 
&gt;  For instance, sbws includes:
&gt; 
&gt;    "rtt" = INT, Round Trip Time (to obtain 1B)

This definition belongs in the definition section.
Please fix the formatting of this definition to be like dir-spec.txt.

&gt;  Every relay measurement in sbws consists of:
&gt; 
&gt;    "node_id" fingerprint SP
&gt;    "bw" bandwidth SP

The format has equals signs, but this definition does not.

The fingerprints in the sample data have $ signs.
Does Tor require them? Or are they optional?
We should document it either way.

&gt;    "nick=" nickname SP
&gt;    "rtt=" rtt SP
&gt;    "time=" timestamp NL

The equals signs are correct here.

&gt;  Every relay measurement in Torflow consists of:
&gt; 
&gt;    "node_id" fingerprint SP
&gt;    "bw" bandwidth SP

The format has equals signs, but this definition does not.

&gt;    "nick=" nickname SP
&gt;    "measured_at=" slice timestamp NL

slice is not defined, just use "timestamp", then explain using
the next line.

&gt;  The "measured_at" does not correspond to the "time" in sbws.

Is it worth explaining the difference?

&gt;  [juga: actually, if bwauths use "measured_at", then the code on them
&gt;  or sbws should be changed].

Tor does not contain the string "measured_at":
https://github.com/torproject/tor/search?q=measured_at

For consistency, please remove "measured_at", or add "updated_at".

&gt;  Torflow includes other items that are out of the scope of this
&gt;  document.

We should think about which torflow fields are worth documenting.

&gt; References:
&gt; 
&gt; 1. https://gitweb.torproject.org/torflow.git
&gt; 2.
&gt; https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
&gt; 3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
&gt; 4. https://metrics.torproject.org/onionoo.html#details
&gt; 
&gt; 
&gt; A. Sample data

Maybe the sample data should contain more than one relay?

&gt; A.1. Torflow
&gt; 
&gt; 1523911758
&gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=392760 nick=Test
&gt; measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
&gt; pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
&gt; circ_fail=0.2 scanner=/filepath
&gt; 
&gt; A.2. sbws
&gt; 
&gt; 1523911758
&gt; version=0.1.0
&gt; node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=392760 nick=Test
&gt; rtt=380 time=1523911725

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for writing this draft \
spec.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please see my suggested changes \
below:&lt;/div&gt;&lt;div&gt;&lt;br&gt;On 17 Apr 2018, at 21:23, juga &lt;&lt;a \
href="mailto:juga@riseup.net"&gt;juga@riseup.net&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;as \
commented with teor and pastly, i send in-line a draft \
specification&lt;/span&gt;&lt;br&gt;&lt;span&gt;for the document format that the bandwidth scanner \
implementations&lt;/span&gt;&lt;br&gt;&lt;span&gt;should produce.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I've \
left my own questions/notes in square \
brackets.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Thanks,&lt;/span&gt;&lt;br&gt;&lt;span&gt;juga.&lt;/span&gt;&lt;br&gt;&lt;sp \
an&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;=======================================&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
         Tor Bandwidth Measurements \
Document Format&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
         [juga: which name should we \
give to this document?]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's a \
fine name.&lt;/div&gt;&lt;div&gt;You can leave out the "Document" if you \
want.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;1. Scope and \
preliminaries&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  This document describes the \
format of Tor's bandwidth measurements&lt;/span&gt;&lt;br&gt;&lt;span&gt;  document, version X.X.X \
[juga: which version should be \
this?]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It doesn't matter, so let's \
use semantic versioning:&lt;/div&gt;&lt;div&gt;* the original torflow format was \
1.0.0&lt;/div&gt;&lt;div&gt;* the format in this spec adds the "version" feature, so it is \
1.1.0&lt;/div&gt;&lt;div&gt;  (it is compatible with 1.0.0, as long as parsers ignore \
unrecognised&lt;/div&gt;&lt;div&gt;  lines)&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt; \
 and later.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  Since Tor version X.X.X \
[juga: which tor version?]&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It looks like \
0.2.4.12-alpha added measured bandwidths&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/tor.git/tree/ChangeLog#n12710"&gt;https://gitweb.torproject.org/tor.git/tree/ChangeLog#n12710&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt; the directory&lt;/span&gt;&lt;br&gt;&lt;span&gt;  authorities use the \
bandwidth measurements document called&lt;/span&gt;&lt;br&gt;&lt;span&gt;  "V3BandwidthsFile" and \
produced by Torflow [1]&lt;/span&gt;&lt;br&gt;&lt;span&gt;  (format described in README.spec.txt \
[2]).&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;    The key words "MUST", "MUST \
NOT", "REQUIRED", "SHALL", "SHALL&lt;/span&gt;&lt;br&gt;&lt;span&gt;    NOT", "SHOULD", \
"SHOULD NOT", "RECOMMENDED",  "MAY", and&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "OPTIONAL" in this document are to be interpreted as described \
in&lt;/span&gt;&lt;br&gt;&lt;span&gt;    RFC 2119.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;1.2. \
Acknowledgements&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  The original bandwidth \
measurement scanner (Torflow) and format was&lt;/span&gt;&lt;br&gt;&lt;span&gt;  created by mike. \
Teor suggested to write this specification while&lt;/span&gt;&lt;br&gt;&lt;span&gt;  contributing \
on pastly's new bandwidth scanner implementation.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 This specification was revised after feedback \
from:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   XXX&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;1.3 \
Outline&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  The bandwidth measurements mentioned \
in sections 3.4.1 and 3.4.2&lt;/span&gt;&lt;br&gt;&lt;span&gt;  of dir-spec.txt [3] are obtained \
by bandwidth authorities, which are&lt;/span&gt;&lt;br&gt;&lt;span&gt;  either directory \
authorities or other servers running bandwidth&lt;/span&gt;&lt;br&gt;&lt;span&gt;  measurement \
scanners and sending the results to the former.&lt;/span&gt;&lt;br&gt;&lt;span&gt;  [juga: it \
seems that bandwidth authorities have not been formally&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 before]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You could use the \
definition in the man page:&lt;/div&gt;&lt;div&gt;"&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;the bandwidth-authority generated file storing information \
on&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;relays' \
measured bandwidth capacities"&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;2. Format details&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 Bandwidth measurements MUST contain the following sections:&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 - Header (exactly once)&lt;/span&gt;&lt;br&gt;&lt;span&gt;  - Relays measurements (zero or \
more times)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  Each section (or entry) ends with \
a separator.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This line is a \
copy-paste error, it should be deleted.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;2.1. Nonterminals&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  The \
following nonterminals are defined in the Onionoo details&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 document specification [4]:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   fingerprint&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   nickname&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This file \
format gets the fingerprint and nickname from the&lt;/div&gt;&lt;div&gt;consensus, so you should \
reference dir-spec.txt.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(dir-list-spec.txt gets relay \
fingerprints and nicknames from&lt;/div&gt;&lt;div&gt;Onionoo. That's why it uses the Onionoo \
definitions.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are the definitions of hexdigest \
(fingerprint) and nickname:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1268"&gt;https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1268&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;  In the bandwidth measurement documents nickname is \
optional.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"optional" is not relevant \
in a definition.&lt;/div&gt;&lt;div&gt;Let's delete this line, it's already documented as \
optional later on.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;  The \
following nonterminals are defined in the in \
dir-spec.txt:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;    NL \
     (newline)&lt;/span&gt;&lt;br&gt;&lt;span&gt;    SP \
     (space)&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "bw" = INT, the aggregated measured bandwidth of this relay, \
in&lt;/span&gt;&lt;br&gt;&lt;span&gt;    kilobytes per \
second.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;bw is not defined in \
dir-spec.txt. And the formatting is confusing.&lt;/div&gt;&lt;div&gt;Double quotes are used for \
ASCII literal strings in dir-spec.txt.&lt;/div&gt;&lt;div&gt;Can you please follow the format \
used in dir-spec.txt?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here is one example:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n210"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n210&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's \
how you can define bw using the Int definition \
from&lt;/div&gt;&lt;div&gt;dir-spec.txt:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n795"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n795&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;bw = \
Int&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;bw \
is the aggregated measured bandwidth of this relay, in &lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;kilobytes&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;per \
second.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;  We introduce the \
following nonterminals:&lt;/span&gt;&lt;br&gt;&lt;span&gt;  [juga: this should probably be defined \
more formally and should&lt;/span&gt;&lt;br&gt;&lt;span&gt;  probably link to other documents, \
which ones?]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;dir-spec.txt&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;    "version" = The name and the version of the \
bandwidth scannner&lt;/span&gt;&lt;br&gt;&lt;span&gt;    software, such as "sbws \
0.1.0".&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Our newest spec uses "version" for \
the file format version:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt#n148" \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;font \
color="#000000"&gt;https://gitweb.torproject.org/torspec.git/tree/dir-list-spec.txt#n148&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;So \
please don't make a field with a different meaning and structure,&lt;div&gt;and call it \
"version".&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I suggest:&lt;/div&gt;&lt;div&gt;* use "version" for the file \
format version (or don't use "version")&lt;/div&gt;&lt;div&gt;* use "source" for the \
implementation software name and version&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Please fix the formatting of this \
definition to be like dir-spec.txt.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;This definition has two \
arguments separated by spaces, the name,&lt;/div&gt;&lt;div&gt;and the \
version.&lt;br&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;    The name of the \
software, if absent, is assumed to be "torflow".&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   [juga: which should be the version if \
absent?]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;"if absent" is not relevant in a \
definition.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Let's move these lines to the header \
section.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The software version should be \
optional.&lt;/div&gt;&lt;div&gt;Torflow does not have a version, so we cannot require a \
version.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;    "timestamp" = \
INT, the Unix Epoch time when the file was \
created.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Please fix the formatting of this \
definition to be like dir-spec.txt.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;2.2. Header \
format&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We should say if order \
matters.&lt;/div&gt;&lt;div&gt;We should say how new items get added to the \
header.&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;(We could \
say that parsers MUST ignore unrecognised lines.)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;  It MUST consists of:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "timestamp" timestamp NL&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "version" version \
NL&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The sbws sample data \
has:&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
background-color: rgba(255, 255, 255, \
0);"&gt;1523911758&lt;br&gt;version=0.1.0&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;The \
first line does not have a "timestamp" string literal.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;The second line has an equals sign.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;The second line is optional (see the torflow sample \
data).&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Does Tor ignore the version \
line?&lt;/div&gt;&lt;div&gt;If it does, we should document it.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;2.3. Relay measurements \
format&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You should say that order on a \
line doesn't matter, and relay order&lt;/div&gt;&lt;div&gt;also doesn't \
matter.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;  Relays measurements MUST \
consist of the following items.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "node_id" fingerprint SP&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "bw" \
bandwidth SP&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The format has equals \
signs, but this definition does not.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt; \
 When there are no more items, the "bw" item ends with NL instead \
of&lt;/span&gt;&lt;br&gt;&lt;span&gt;  SP.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
might be easier to say that each line allows extra arguments, and&lt;/div&gt;&lt;div&gt;reference \
the dir-spec.txt definition:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n261"&gt;https://gitweb \
.torproject.org/torspec.git/tree/dir-spec.txt#n261&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But \
does each argument need an equals sign?&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;2.4. Optional extra items&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
 Different implementations of the bandwidth measurements scanners \
MAY&lt;/span&gt;&lt;br&gt;&lt;span&gt;  include other items per \
relay.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;  For instance, sbws \
includes:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "rtt" = INT, Round Trip \
Time (to obtain 1B)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This definition \
belongs in the definition section.&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;Please fix the formatting of this definition to be like \
dir-spec.txt.&lt;/span&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt; \
 Every relay measurement in sbws consists of:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "node_id" fingerprint SP&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "bw" \
bandwidth SP&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;The format has equals signs, but \
this definition does not.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;The fingerprints in the sample data have $ signs.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Does Tor \
require them? Or are they optional?&lt;/div&gt;&lt;div&gt;We should document it either \
way.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;    "nick=" nickname \
SP&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "rtt=" rtt SP&lt;/span&gt;&lt;br&gt;&lt;span&gt; \
   "time=" timestamp \
NL&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The equals signs are correct \
here.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;  Every relay measurement in \
Torflow consists of:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "node_id" \
fingerprint SP&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "bw" bandwidth \
SP&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;The format has equals signs, but this definition does \
not.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;    "nick=" \
nickname SP&lt;/span&gt;&lt;br&gt;&lt;span&gt;    "measured_at=" slice timestamp \
NL&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;slice is not defined, just use "timestamp", then explain \
using&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;the \
next line.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;  The \
"measured_at" does not correspond to the "time" in \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180418143943</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-04-18 14:39:43-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 6.0-1.13.0 and metrics-lib 2.3.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Two new releases are available at:
     https://dist.torproject.org/onionoo/6.0-1.13.0/

     https://dist.torproject.org/metrics-lib/2.3.0/

This Onionoo release provides the announced major version change to 6.0
Protocol change (also summarized in [0], [1]):
Change the "exit_addresses" field to not exclude current OR addresses any=
more.

This release also includes some bug fixes, please take a look at the
change log [2].

The changes are already deployed on all onionoo.torproject.org instances.=


The new metrics-lib release adds support for reading web server logs cont=
ained
in tar-archives and a backwards compatible API change detailed in the cha=
ngelog [3]
and described in the javadoc documentation [4].

Please direct comments and questions to the metrics-team mailing list [5]=
=2E

Cheers,
iwakeh


[0] https://metrics.torproject.org/onionoo.html#versions_6_0
[1] https://metrics.torproject.org/onionoo.html#details_relay_exit_addres=
ses
[2] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md
[3] https://gitweb.torproject.org/metrics-lib.git/plain/CHANGELOG.md
[4] https://metrics.torproject.org/metrics-lib/org/torproject/descriptor/=
ServerDescriptor.html
[5] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team







["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180418233126</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-18 23:31:26-0400</timestampReceived><subject>Re: [tor-dev] Proposal: The move to two guard nodes</subject><body>

[Attachment #2 (multipart/signed)]


Roger Dingledine:
&gt; On Wed, Apr 11, 2018 at 11:15:44AM +0000, Mike Perry wrote:
&gt; &gt; &gt; To be clear, the design I've been considering here is simply allowing
&gt; &gt; &gt; reuse between the guard hop and the final hop, when it can't be avoided. I
&gt; &gt; &gt; don't mean to allow the guard (or its family) to show up as all four
&gt; &gt; &gt; hops in the path. Is that the same as what you meant, or did you mean
&gt; &gt; &gt; something more thorough?
&gt; &gt; 
&gt; &gt; By all path restrictions I mean for the last hop of the circuit and the
&gt; &gt; first (though vanguards would be simpler if we got rid of them for other
&gt; &gt; hops, too).
&gt; 
&gt; Can you lay out for us the things to think about in the Vanguard design?
&gt; Last I checked there were quite a few Vanguard design variants, ranging
&gt; from "two vanguards per guard, tree style" to some sort of mesh.
&gt; 
&gt; In particular, it would be convenient if there is a frontrunner design
&gt; that really would benefit from relaxing many path restrictions, and a
&gt; frontrunner design that is not so tied together to the path restriction
&gt; question.

There are two frontrunner forms. One has no path restrictions, the other
would try to perform restriction checks on each layer to ensure that it
is valid and doesn't leak info about other layers or prevent circuit
creation.

They are otherwise the same. Both are mesh; both are tunable in the
number of guards and rotation times in each layer.

I am leaning towards "no restrictions" for vanguards for 0.3.4 because
it is simpler, and it did not strike me that the arguments in their
favor justified trying to implement them quickly in a way that might
cause reachability or path influence risks.
 
&gt; &gt; But I do mean all restrictions, not just guard node choice.
&gt; &gt; The adversary also gets to force you to use a second network path
&gt; &gt; whenever they want via the /16 and node family restrictions.
&gt; 
&gt; Can you give us a specific example here, for this phrase "network
&gt; path"? When you say "second network path" are you thinking in the
&gt; Vanguard world?

Second path to entry into the Tor network (and a second guard),
regardless of vanguards.
 
&gt; &gt; &gt; I'd like to hear more about the "cleverly crafted exit policy" attack
&gt; &gt; 
&gt; &gt;  another way to do this type of exit rotation attack is to cause
&gt; &gt; a client to look up a DNS name where you control the resolver, and keep
&gt; &gt; timing out on the DNS response. The client will then retry the stream
&gt; &gt; request with a new exit. The same thing can also be done by timing out
&gt; &gt; the TCP handshake to a server you control. Both of these attacks can be
&gt; &gt; done with only the ability to inject an img tag into a page.
&gt; &gt; 
&gt; &gt; You repeat this until an exit is chosen that is in the same /16 or
&gt; &gt; family as the guard, and then the client uses a second network path for
&gt; &gt; an unmultiplexed request at a time you control.
&gt; 
&gt; The three fixes that come to mind are
&gt; 
&gt; (A) "Have two guards": so you can pick any exit you like, and then just
&gt; use the guard that doesn't conflict with the exit you picked.
&gt; 
&gt; (B) "Add a bonus hop when needed": First relax the /16 and family
&gt; restrictions, so the remaining issue is reuse of your guard. Then if
&gt; you find that you just chose your guard as your exit, insert an extra
&gt; hop in the middle of that circuit.
&gt; 
&gt; (C) "Exits can't be Guards": First relax the /16 and family restrictions,
&gt; so the remaining issue is reuse of your guard. Then notice that due
&gt; to exit scarcity, guards aren't actually used in the exit position
&gt; anyway. Then enforce that rule (so they can't be in the future either).
&gt; 
&gt; All three of these choices have downsides. But all three of them look
&gt; like improvements over the current situation -- because of how crappy
&gt; the current situation is.
&gt; 
&gt; (Rejected option (D): "Just start allowing it": Relax the /16 and
&gt; family restrictions, and also relax the rule where relays refuse a
&gt; circuit that goes right back where it came from. Giving the middle node
&gt; that much information about the circuit just wigs me out.)
&gt; 
&gt; Also, notice that I think Mike's proposed design will turn out to be some
&gt; combination of "A" and also something like "B" or "C", because even if
&gt; you start with two guards, if you don't add a new guard right when your
&gt; first guard goes down, you might find yourself in the situation where
&gt; you have one working guard, and you pick it as your exit, and now you
&gt; need to do *something*.

The one-guard-down case does impact things. But even when this does
happen (which should be rare), it should only be true for a small window
of time before the consensus updates.

The "down" guard should either be temporarily overloaded, or fully down
and kicked off the consensus. I think we should only add a new guard
when one falls out of the consensus, or both are unreachable/unusable.

This is why I think it is OK to take an incremental approach and
start with A, and roll out things like B and C and other restriction
relaxations.

During these edge cases, the most important property that we should
strive to preserve is overall reachability. I don't like situations
where the adversary gains information by certain nodes being overloaded
or down. In my view, trying to make smart decisions to minimize exposure
to more nodes is secondary to overall reachability. (Overall
reachability allows a *non-network* adversary to gain information about
how clients are using our network. That strikes me as a lower resource,
more dangerous attack than the unknown risk of possible partial network
observers. In other words, I believe we made the right short-term call
in #14917 in terms of preserving reachability.)

&gt; &gt; Our path restrictions also cause normal exiting clients to use a second
&gt; &gt; guard for unmultiplexed activity, at adversary controlled times, or just
&gt; &gt; at periodically at random.
&gt; 
&gt; Just to make sure I understand: at least on the current network,
&gt; that's because of the /16 rule and the family rule, and not because of
&gt; the "if the exit you picked turns out to be your guard too, move to a
&gt; different guard" rule, because exits aren't normally used for guards on
&gt; our current network?
&gt; 
&gt; On more examination though, that's not something to rely on with our
&gt; current design, since I bet there are weird edge cases like a relay
&gt; loses its Guard flag, but it's still your Guard so you keep using it
&gt; (depending on the advice from #17773), but now the weightings
&gt; let you pick it for your Exit, and oops.
&gt; 
&gt; Another problematic example would be a relay that you picked as your
&gt; Guard, and later it opened up its exit policy and became an Exit.

I am in favor of preventing guards from being exits. Intuitively, it
means less "one stop shop" surveillance points to see both entry and
exit traffic. It also makes flag-based load balancing equations much
simpler, and makes it easier to account for padding overhead.
 
&gt; So if I wanted to try to flesh out my "Then enforce that rule" approach
&gt; above, we would need to (1) Have dir auths take away the Guard flag from
&gt; relays that can be used as Exits, and (2) Make sure that clients know
&gt; that if their guards lose the Guard flag, they should treat them as being
&gt; no longer guardworthy. I think we're doing that second one right now,
&gt; based on my latest reading of #17773, so this would actually be a pretty
&gt; easy change. But still, it's not exactly elegant.

In the world where we keep path restrictions, these would be my rules:
1. Two equal guards, chosen from not the same /16 or family
2. Choose each vanguard layer members such that each layer has at least
   one node from a unique /16 and family.
3. Build paths in a strict order, from last hop towards guard. If you
   can't build a path with this ordering, start over with a sampled guard.
   (With rule #1 and #2, this should be very rare and should mean that
   a guard is marked down locally but still marked up in the consensus.)
4. No guards as exits (Not needed but do it anyway for other reasons).


Then under these rules, you decide to use a new primary guard, if:
0. When a guard leaves the consensus, replace it with a new primary
   guard.
1. Temporarily pick a new guard when your two primaries are locally down
   or unusable (ie step #3 above fails).

&gt; &gt; &gt; &gt;   However, while removing path restrictions will solve the immediate
&gt; &gt; &gt; &gt;   problem, it will not address other instances where Tor temporarily opts
&gt; &gt; &gt; &gt;   use a second guard due to congestion, OOM, or failure of its primary
&gt; &gt; &gt; &gt;   guard, and we're still running into bugs where this can be adversarially
&gt; &gt; &gt; &gt;   controlled or just happen randomly[5].
&gt; &gt; &gt; 
&gt; &gt; &gt; I continue to think we need to fix these. I'm glad to see that George
&gt; &gt; &gt; has been putting some energy into looking more at them. The bugs that
&gt; &gt; &gt; we don't understand are especially worrying, since it's hard to know
&gt; &gt; &gt; how bad they are. Moving to two guards might put a bit of a bandaid on
&gt; &gt; &gt; the issues, but it can't be our long-term plan for fixing them.
&gt; &gt; 
&gt; &gt; We're choosing fixes for these bugs that enable an adversary to deny
&gt; &gt; service to clients at a particular guard, *without* letting those
&gt; &gt; clients move to a second guard. This enables confirmation attacks, and
&gt; &gt; these confirmation attacks can be extended to guard discovery attacks by
&gt; &gt; DoSing guards one at a time until an onion service fails.
&gt; 
&gt; I would find non-onion-service examples more compelling here, since I
&gt; want to avoid falling back into the "well, onion services need special
&gt; treatment to be safe, so we have to choose between hurting normal clients
&gt; and hurting onion services" trap.
&gt; 
&gt; How is this for an alternative scenario to be considering: the attacking
&gt; website gives the Tor Browser user some page content that causes the
&gt; browser to initiate periodic events. Then it starts congesting guards
&gt; one at a time until the events stop arriving.
&gt; 
&gt; Are those two scenarios basically equivalent in terms of the confirmation
&gt; attacks you are worrying about? I hope yes, and now I can stop getting
&gt; distracted by wondering if going to this effort is worth it only to
&gt; protect onion services? :)

Yes.
 
&gt; &gt; &gt; But I wonder if we're looking at this backwards, and the primary
&gt; &gt; &gt; question we should be asking is "How can we protect the transition between
&gt; &gt; &gt; guards?" Then one of the potential answers to consider is "Maybe we should
&gt; &gt; &gt; start out with two guards rather than just one." Framing it that way,
&gt; &gt; &gt; are there more options that we should consider too? For example, removing
&gt; &gt; &gt; the ability of the non-local attacker to trigger a transition? Then
&gt; &gt; &gt; there would still be visibility of a transition, but the (non-local)
&gt; &gt; &gt; attacker can't impact the timing of the transition. How much does that
&gt; &gt; &gt; solve? Need to think more.
&gt; &gt; 
&gt; &gt; One guard is inherently more fragile than two, and no matter what we do,
&gt; &gt; it means that there will be a risk of attacks that can confirm guard
&gt; &gt; choice, because the downtime during this transition can never be hidden
&gt; &gt; without at least some redundancy.
&gt; 
&gt; How's this for another option: clients have two guards, but they have
&gt; a first guard and a backup guard. They do the traffic padding to both
&gt; of them, to ensure continuous netflow sessions in their local ISP's
&gt; logs. But they try to send most of their traffic over the first guard,
&gt; thus avoiding most of the "increased surface area" concerns about using
&gt; two guards at once. And we try to reduce the frequency of situations where
&gt; they can't use their first guard. But in the "transition" situations
&gt; that we decide we need to keep, they use their backup guard, and it's
&gt; already available and ready and that netflow session is already active
&gt; in the eyes of their ISP.
&gt;
&gt; This approach isn't conflux (yet), but it's not incompatible with later
&gt; changing things so we do conflux.
&gt; 
&gt; It also doesn't get us the lower variance of performance that having
&gt; two equally used guards would get us. But I am ok with that for now,
&gt; at least until somebody has done some performance analysis to show that
&gt; we're really suffering now and we would stop suffering then.

FYI, we actually do have one form of this info in figure 10 of
https://www.freehaven.net/anonbib/cache/wpes12-cogs.pdf

We get the largest performance gains from going from one guard to two,
in terms of reducing the variance (flatness) of that CDF.

Qualitatively, this means way fewer users who try Tor and experience a
very slow Tor, telling their friends that it is too slow and should not
be used. This is a real thing. Web UX folks have found that it happens
with perf variances in the sub-second range with websites.
 
&gt; It adds load onto the relays, by almost doubling the number of sockets
&gt; used by guards for clients, and also by adding more bandwidth load from
&gt; the padding cells to/from the backup guard. (How much bandwidth load is
&gt; this, per client?)
&gt; 
&gt; And it doesn't actually provide as much "real" cover traffic onto the
&gt; backup guard in most situations, so somebody who can look more thoroughly
&gt; at the traffic flows will still be able to distinguish a transition
&gt; event from the first to the backup. Maybe that's a problem? Or maybe
&gt; the netflow level adversary that we declared in the threat model can't
&gt; do that, and a real attacker would be able to see the traffic details
&gt; anyway, so we're fine^W^Wno worse off than before?

There are a couple things here that make me think we may still be worse
off.

1. The netflow padding is not designed to simulate client traffic. It is
designed to aggregate client traffic together over time in the
adversary's logs. Instead of seeing a discrete "520KB xfer in this 15
second period, 80KB in that one, and 2300KB in that one, and then
silence for 25 minutes", the adversary records "2900KB traffic total in
this half hour". For this aggregation to help, there really needs to be
other traffic during that half hour. This is why I keep saying that more
concurrent activity is better than only using the second guard
sometimes. (WTF-PAD could do things like you describe above, but we need
to program histograms+state machines for that).

2. Detection of when to switch to this second guard seems complicated
and error prone, and if it results in unavailability, it is strictly
worse. If it switches to the second guard at the first sign of
RESOURCELIMIT and path selection issues, well, then you're adding a lot
of complexity for how much benefit (and also complexity that could be
manipulated by the adversary).

&gt; Whereas that first risk does seem plausible to me -- worth trying to
&gt; reduce. I think we should start by enumerating as many scary scenarios
&gt; as we can (where scary means "currently we would shift away from our
&gt; first guard"), and then fix as many of them as we can. Then we should
&gt; look at the remaining scenarios where we would switch over to using our
&gt; backup guard (like, when our first guard isn't able to build new circuits
&gt; for us), and decide if the cost of the additional load on the network is
&gt; worth hiding that transition timing from a netflow-level client-side-ISP
&gt; adversary. I can see the answer being "yes, it's worth it", but I think it
&gt; will be useful to have a good handle on which transition scenarios remain.

Well, "fixing" the largest, most frequent, and adversary controlled
classes of these requires:

1. Removing path restrictions.
2. Recognizing DoS attacks and differentiating them from bad network
   conditions.

#2 is what worries me. Any solution to #2 that is agile enough to avoid
downtime strikes me as no better than "switch to guard #2 with
probability 1/2 after a RESOURCELIMIT or any other circuit failure"
(which is what the code would do today with two equal guards), and a
hell of a lot more complex (with risk of a downtime signal or adversary
path influence if we get it wrong).

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180419225057</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-19 22:50:57-0400</timestampReceived><subject>[tor-dev] Notes from 19 April 2018 Simple Bandwidth Scanner Meeting</subject><body>

Next meeting is scheduled 26 April 2018 at 2200 UTC in #tor-meeting,
**BUT** we are probably going to look into finding a time that works
better across three halves of the globe.

Pad is here, and is copy/pasted below. https://pad.riseup.net/p/BenwGdgpz0uS

Meeting IRC log
http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-04-19-21.59.log.html

Simple Bandwidth Scanner meeting 19 April 2018
==============================================

Previous weeks notes:
https://lists.torproject.org/pipermail/tor-dev/2018-April/013059.html


Updates
--------------------------------------------------------

pastly:
    - Started running an authority in the test net. Don't think it's
working yet
    and/or people have started trusting it
    - Switched to standard python logging module
    - Added periodic reachability tests for helper relays
    - (Helped) add FAQ and glosasry to docs
    - Learned: no part of sbws is CPU bound. Weird results were due to a
helper
    that is not capable of much bandwidth
    - Time is still passing. In less than 2w the open source paperwork
should be back

next week:
    - Put docs on an onion service
    - Ask dirauths what they want to do about sbws servers

In the coming weeks, I think I need to be transitioning away from "big"
feature
type stuff that isn't absolutely necessary, and instead focus my time on
docs,
tests, and making sbws easy to use.

I think literal next steps need to include a practice deployment and
transition in the testnet.
It's one thing to run an sbws scanner and server. I've done that. I want
to see other people try
it so we can learn what isn't obvious to anyone but me. I want to
exercise getting scan results to
the dirauth so it can put them in the consensus.

i've tried scanner and server and reported problems :)


* list tasks for next months: https://pad.riseup.net/p/bfikl6PM0YV9
* plan proposed by teor with testnet deployment:
 * ...
* it'll be very useful to have sbws doc public!

juga:

    last week:


    * 1st draft spec

    * setup dirauth, sbws server, sbws scanner

     * dirauth not yet in consensus

    * start doc about what we have deployed so far (started to feel a
bit lost about what we have/need)

    * added draft faq and glossary to doc


    next week:


    * finish spec

    * check the status of config files vs cli args, with debug (sorry
pastly, didn't follow close the changes) and see whether #91 is really
needed

    * check the status of tests/chutney

    * implement actually some unit test?


    * think how to make easier deployment at some point and add
something on it? (cron/Makefile/system services?)


    questions:

    * pastly: once sbws repo is public, can we work on new releases
publicly? [pastly: says yes]


teor:
    last week:
        * occasional suggestions
    this week:
        * make my test dirauth a trust pastly's and juga's dirauths
        * eventually try to set up sbws on the testnet
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180420112013</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-20 11:20:13-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 (two guards) IRC meeting Wed Apr 18, 17:00 UTC</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; Mike Perry:
&gt;&gt; Heyo.
&gt;&gt; 
&gt;&gt; We're going to have a meeting to discuss Proposal 291. See this thread:
&gt;&gt; https://lists.torproject.org/pipermail/tor-dev/2018-April/013053.html
&gt;
&gt; Ok, we had this meeting. High level (ammended) action items are:
&gt;
&gt; 1. Use patches in https://trac.torproject.org/projects/tor/ticket/25843
&gt;    to set NumEntryGuards=2 in torrc, and observe results. Please join us!
&gt;    Stuff we are looking for during testing is on that ticket!
&gt; 2. Merge that patch to make the torrc guard options do what we meant for
&gt;    them to do. Probably backport it.

Hello,

I wrote the patch on #25843 and I'm now testing 2-guards on my Tor. So far so
good, but I think we need people on more unstable connections to test this.

&gt; 3. Descibe adversary models for our variant proposals from the notes.
&gt;    (Why do we disagree? In Mike's case, my disagreements are because I
&gt;     think each step is an improvement over previous/status quo -- we can
&gt;     decide harder things later and still do better both now and later.)

Here is my proposal, but please don't consider it set on stone. I
actually think these are really complicated issues that take a while to
understand, and we should probably not rush it. Even on a short first
IRC meeting we came up with new issues and ideas while discussing this
topic.

asn proposal:
  1) Allow "same node, same /16, same family" between guard and last hop.
     If it's a 3-hop circ (A - B - A), extend it to a 4-hop circ (A - B - C - A).
  2) Switch to two primary guards; and revisit prop#271 as needed to make this possible and good.

Rationale:

I care about an attacker who is trying to deanon Tor client by setting
up Tor nodes and comboing various active attacks. In particular, I worry
about adversary who uses guard discovery to learn client's guard nodes
and then uses #14917 or tries to DoS them.

I like two guards because it makes us stronger and more redundant
against such attacks, and also because it improves congestion. The
"pad-to-backup" idea seems too experimental to me, and not sufficiently
specified right now hence I'm unable to analyze it (e.g.  how much do we
pad, how often, can this actually mask us against adversary who launches
#14917 repeatedly?).

I propose altering the above path restrictions because that seems to be
the only way to concretely defend against #14917 (e.g. see attacks
against idle clients on meeting log, etc.). Attackers who have already
owned our guard node are not in my threat model wrt these attacks.  IMO
simple A - B - A path restrictions don't help us against such persistent
adversaries; e.g. attacker can simply spawn up another tiny relay C on
another data center and do an A - B - C correlation attack.

&gt; 4. Agree on an order of operations for fixes+changes, ideally such that we
&gt;    don't block forever trying to come up with a perfect solution. Things
&gt;    are pretty bad now. All we really need to do is agree on steps to make
&gt;    it better.
&gt;

I think (1) and (2) above can be considered as orthogonal issues and get
done in any order. IMO, here are the prerequisites for doing these tasks:

For path restrictions: Specify current path restrictions through the whole Tor circuit
                       and write a concrete proposal with proposed changes. I think we
                       are looking for 0.3.5 if we want to do this.

For 2-guards: Get the 2-guard design sufficiently tested to ensure that we
              are not gonna bug out the whole network by switching to
              2-guards. I'm particularly worried about clients on bad
              networks, and clients continuously flapping on-and-off the net.
              If we toggle the consensus param switch soon, we should be
              prepared for another round of guard bugs in 034, and that's fine.

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180423120900</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-04-23 12:09:00-0400</timestampReceived><subject>[tor-dev] Bandwidth scanner - Summer of Privacy</subject><body>

Hi,

I will be working on the bandwidth scanner project during the Tor Summer
of Privacy.
This would include implementing features to the scanner code, writing
tests and documentation, deployment in a test network, comparing
results, modify little-tor code.

The goal is to have bandwidth scanner code that is easier to maintain,
understand, run and gives better measurements. There will be more
details online and with reports.

I've being already contributing on this project, for instance, writing a
draft specification for the bandwidth measurements format [0] or
reporting/fixing bugs on bwscanner code [1].

I'm MS in computer engineering, senior developer and have worked as
sysadmin and researcher.

Best regards,
juga.

GnuPG key fp: 2DA81D01455C3A0032198850F305447AF806D46B

[0] https://lists.torproject.org/pipermail/tor-dev/2018-April/013071.html
[1] https://github.com/TheTorProject/bwscanner
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180423221830</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-23 22:18:30-0400</timestampReceived><subject>[tor-dev] Simple Bandwidth Scanner is now open source</subject><body>

https://github.com/pastly/simple-bw-scanner

Simple Bandwidth Scanner (sbws) aims to replace torflow[0], the
bandwidth measuring software bwauths use today.

For the most up to date documentation about how it works and why it
exists, see the docs at readthedocs, especially the spec[2][3].

sbws's semantic version (currently 0.1.0) should not be considered
meaningful until 1.0.0. There are major planned changes to how it works
(the HTTPS milestone[1]), and likely a few unplanned changes too.

I haven't put much thought into whether sbws should canonically live on
gitweb.tpo or on GitHub other than I like GitHub's issue tracking,
milestones, Travis CI integration, and readthedocs integration. So it
might move ... or it might not.

Cheers

Matt

[0]: https://gitweb.torproject.org/torflow.git
[1]: https://github.com/pastly/simple-bw-scanner/milestone/3
[2]: https://sbws.readthedocs.io/en/latest/specification.html
[3]:
http://d7pxflytfsmz6uh3x7i2jxzzwea6nbpmtsz5tmfkcin5edapaig5vpyd.onion/specification.html
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180424060533</emailId><senderName>Milan Damjanovic</senderName><senderEmail>milan.damjanovic.mbs@gmail.com</senderEmail><timestampReceived>2018-04-24 06:05:33-0400</timestampReceived><subject>Re: [tor-dev] Tor Messenger</subject><body>

[Attachment #2 (multipart/alternative)]


Tnx Jeremy. Im sorry for naming things wrong.
I basically want to rewrite this:
https://github.com/prof7bit/TorChat/tree/torchat_py

Cheers

On Mon, Apr 23, 2018 at 10:22 PM, Jeremy Rand &lt;jeremyrand@airmail.cc&gt; wrote:

&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA512
&gt;
&gt; Milan Damjanovic:
&gt; &gt; Hello,
&gt; &gt; I would like to ask is there any online documentation about how is
&gt; possible
&gt; &gt; to transmit text messages via tor nodes?
&gt; &gt; I would like to [try to] rewrite the TorChat Messenger which is written
&gt; in
&gt; &gt; Python 2.7 and wxPython to Python 3x and Qt.
&gt; &gt; I cant find any documents  how to transmit messages between two tor nodes
&gt; &gt; so anything would be helpful...
&gt;
&gt; Just FYI, TorChat and Tor Messenger are 2 different things.  TorChat is
&gt; a long-ago-abandoned project that's somewhat similar in design to the
&gt; still-developed project Ricochet; Tor Messenger is an Instantbird fork
&gt; (similar to how Tor Browser is a Firefox fork).
&gt;
&gt; (I don't have any answer to your actual question, which I guess is about
&gt; TorChat, hopefully someone else will chime in on that.)
&gt;
&gt; Cheers,
&gt; - --
&gt; - -Jeremy Rand
&gt; Lead Application Engineer at Namecoin
&gt; Mobile email: jeremyrandmobile@airmail.cc
&gt; Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
&gt; Send non-security-critical things to my Mobile with OpenPGP.
&gt; Please don't send me unencrypted messages.
&gt; My business email jeremy@veclabs.net is having technical issues at the
&gt; moment.
&gt; -----BEGIN PGP SIGNATURE-----
&gt;
&gt; iQIzBAEBCgAdFiEEVB3fdzAraEcoBtkSs/LRZXhtZXAFAlreQHQACgkQs/LRZXht
&gt; ZXB8ohAAq+8MOwzINol+1DjENiySQX6Z7wo0wO6XHpZR1w6NQ6yANB1rHqtHQN51
&gt; i6NDIrEvlyP2hmCQtHdfEOvrKGJonqN1Ce7cuFUh9ri4qT14wRF3JOCxZCT63jt2
&gt; JGvBoUVkSty/Lu0VTilAhGb4MbEM2qHTktmSXWrEj0KguNYUvb3mpjglW/ohwxWr
&gt; hDZe40JG04/zIQji84YWhWLH3TfhdzYzPL+wsfgTSPEr+ly2+CCQCLp2S7xbxvzv
&gt; Sy+XbRgUnDnyDdRa0Qs1djc7MMHczTPY16Mt9tTXu+HdZRXEVkMrlVVzAJOHO26Z
&gt; 01w86gm9WhOZ13bwevCyOuvxB5LAl95iq/9zuBeW25yqdbwKvATgBJiXFPjPHntU
&gt; /toX0Lp3dii1GvuBmJebcjSctS0tM6eVTTMNRRxoK2CBKaNFeOFoXdnOOuPTCke9
&gt; OoN1bWCZOPWhySfQvN96sq3iEIPDCNAebaoNNG62yUf05D1HmPeP/Kf7kEoKP9Ji
&gt; S6JgJlNr2Y3Sa8v0YCzVF9GXHB+mxlchN4Db/u25SA7k4fFZFIWrU42aZAJC8hv6
&gt; 9N4/HOqRz2qBBwU6Pmsf1S+tXN6nex4LUKlJhlHvNN1JDsJgLmae2d5Of59pDpjo
&gt; ovTRCxw8hk7TkR4rvUfEKVSi6dnDCATl9sCkpKfj+rFME1LEWko=
&gt; =2AG7
&gt; -----END PGP SIGNATURE-----
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Tnx Jeremy. Im sorry for naming things wrong.  &lt;br&gt;I basically want to \
rewrite this:&lt;br&gt;&lt;a href="https://github.com/prof7bit/TorChat/tree/torchat_py"&gt;https://github.com/prof7bit/TorChat/tree/torchat_py&lt;/a&gt;&lt;br&gt;&lt;br&gt;Cheers&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On Mon, Apr 23, 2018 at 10:22 PM, \
Jeremy Rand &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:jeremyrand@airmail.cc" \
target="_blank"&gt;jeremyrand@airmail.cc&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
                solid;padding-left:1ex"&gt;-----BEGIN PGP SIGNED MESSAGE-----&lt;br&gt;
Hash: SHA512&lt;br&gt;
&lt;br&gt;
Milan Damjanovic:&lt;br&gt;
&lt;span class=""&gt;&gt; Hello,&lt;br&gt;
&gt; I would like to ask is there any online documentation about how is possible&lt;br&gt;
&gt; to transmit text messages via tor nodes?&lt;br&gt;
&gt; I would like to [try to] rewrite the TorChat Messenger which is written in&lt;br&gt;
&gt; Python 2.7 and wxPython to Python 3x and Qt.&lt;br&gt;
&gt; I cant find any documents   how to transmit messages between two tor nodes&lt;br&gt;
&gt; so anything would be helpful...&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Just FYI, TorChat and Tor Messenger are 2 different things.   TorChat is&lt;br&gt;
a long-ago-abandoned project that's somewhat similar in design to the&lt;br&gt;
still-developed project Ricochet; Tor Messenger is an Instantbird fork&lt;br&gt;
(similar to how Tor Browser is a Firefox fork).&lt;br&gt;
&lt;br&gt;
(I don't have any answer to your actual question, which I guess is about&lt;br&gt;
TorChat, hopefully someone else will chime in on that.)&lt;br&gt;
&lt;br&gt;
Cheers,&lt;br&gt;
- -- &lt;br&gt;
- -Jeremy Rand&lt;br&gt;
Lead Application Engineer at Namecoin&lt;br&gt;
Mobile email: jeremyrandmobile@airmail.cc&lt;br&gt;
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C&lt;br&gt;
Send non-security-critical things to my Mobile with OpenPGP.&lt;br&gt;
Please don't send me unencrypted messages.&lt;br&gt;
My business email &lt;a href="mailto:jeremy@veclabs.net"&gt;jeremy@veclabs.net&lt;/a&gt; is \
having technical issues at the&lt;br&gt; moment.&lt;br&gt;
-----BEGIN PGP SIGNATURE-----&lt;br&gt;
&lt;br&gt;
iQIzBAEBCgAdFiEEVB3fdzAraEcoBt&lt;wbr&gt;kSs/LRZXhtZXAFAlreQHQACgkQs/&lt;wbr&gt;LRZXht&lt;br&gt;
ZXB8ohAAq+8MOwzINol+&lt;wbr&gt;1DjENiySQX6Z7wo0wO6XHpZR1w6NQ6&lt;wbr&gt;yANB1rHqtHQN51&lt;br&gt;
i6NDIrEvlyP2hmCQtHdfEOvrKGJonq&lt;wbr&gt;N1Ce7cuFUh9ri4qT14wRF3JOCxZCT6&lt;wbr&gt;3jt2&lt;br&gt;
JGvBoUVkSty/&lt;wbr&gt;Lu0VTilAhGb4MbEM2qHTktmSXWrEj0&lt;wbr&gt;KguNYUvb3mpjglW/ohwxWr&lt;br&gt;
hDZe40JG04/&lt;wbr&gt;zIQji84YWhWLH3TfhdzYzPL+&lt;wbr&gt;wsfgTSPEr+ly2+CCQCLp2S7xbxvzv&lt;br&gt;
Sy+&lt;wbr&gt;XbRgUnDnyDdRa0Qs1djc7MMHczTPY1&lt;wbr&gt;6Mt9tTXu+&lt;wbr&gt;HdZRXEVkMrlVVzAJOHO26Z&lt;br&gt;
01w86gm9WhOZ13bwevCyOuvxB5LAl9&lt;wbr&gt;5iq/&lt;wbr&gt;9zuBeW25yqdbwKvATgBJiXFPjPHntU&lt;br&gt;
/&lt;wbr&gt;toX0Lp3dii1GvuBmJebcjSctS0tM6e&lt;wbr&gt;VTTMNRRxoK2CBKaNFeOFoXdnOOuPTC&lt;wbr&gt;ke9&lt;br&gt;
OoN1bWCZOPWhySfQvN96sq3iEIPDCN&lt;wbr&gt;AebaoNNG62yUf05D1HmPeP/&lt;wbr&gt;Kf7kEoKP9Ji&lt;br&gt;
S6JgJlNr2Y3Sa8v0YCzVF9GXHB+&lt;wbr&gt;mxlchN4Db/&lt;wbr&gt;u25SA7k4fFZFIWrU42aZAJC8hv6&lt;br&gt;
9N4/HOqRz2qBBwU6Pmsf1S+&lt;wbr&gt;tXN6nex4LUKlJhlHvNN1JDsJgLmae2&lt;wbr&gt;d5Of59pDpjo&lt;br&gt;
ovTRCxw8hk7TkR4rvUfEKVSi6dnDCA&lt;wbr&gt;Tl9sCkpKfj+rFME1LEWko=&lt;br&gt;
=2AG7&lt;br&gt;
-----END PGP SIGNATURE-----&lt;br&gt;
______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180424105343</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-04-24 10:53:43-0400</timestampReceived><subject>Re: [tor-dev] HS desc replay protection and ed25519 malleability</subject><body>

isis agora lovecruft &lt;isis@torproject.org&gt; writes:

&gt; Ian Goldberg transcribed 2.5K bytes:
&gt;&gt; On Wed, Apr 18, 2018 at 04:53:59PM +0300, George Kadianakis wrote:
&gt;&gt; &gt; Thanks for the help!
&gt;&gt; &gt; 
&gt;&gt; &gt; Hmm, so everyone gets a shot at a single malleability "attack" with
&gt;&gt; &gt; everye d25519 sig? What's the point of the (RS[63] &amp; 224) check then?
&gt;&gt; &gt; 
&gt;&gt; &gt; In this case, we can't use S as the replay cache index since the
&gt;&gt; &gt; attacker can mutate it and still get the sig to verify.
&gt;&gt; 
&gt;&gt; You could still use (S mod l) as the cache index, though, right?
&gt;
&gt; Yes, although with the caveat that this is somewhat expensive.
&gt;
&gt; &lt;snip&gt;
&gt;
&gt;&gt; Perhaps use the *output* of the hash H(R,A,M)?  Or the pair
&gt;&gt; (R, S mod l)?
&gt;
&gt; H(R || A || M) might be okay… but it's still a little icky given that it's
&gt; still not strictly tied to the secret key that produces the eventual
&gt; signature (cf. the calculation of `V` below).
&gt;
&gt; I would highly advise reusing Trevor Perrin's work on building a VRF into
&gt; Generalised EdDSA, [0] which solves precisely this problem (i.e. "how do I get
&gt; verifiable randomness, given an ed25519 signature?") in the following way:
&gt;  |
&gt;  | The VXEdDSA signing algorithm takes the same inputs as XEdDSA. The output
&gt;  | is a pair of values. First, a signature (V || h || s), which is a byte
&gt;  | sequence of length 3b bits, where V encodes a point and h and s encode
&gt;  | integers modulo q. Second, a VRF output byte sequence v of length equal to
&gt;  | b bits, formed by multiplying the V output by the cofactor c.
&gt;  |
&gt;  | The VXEdDSA verification algorithm takes the same inputs as XEdDSA, except
&gt;  | with a VXEdDSA signature instead of an XEdDSA signature. If VXEdDSA
&gt;  | verification is successful, it returns a VRF output byte sequence v of
&gt;  | length equal to b bits; otherwise it returns false.)
&gt;  |
&gt;  |    vxeddsa_sign(k, M, Z):
&gt;  |        A, a = calculate_key_pair(k)
&gt;  |        B_{v} = hash_to_point(A || M)
&gt;  |        V = a B_{v}
&gt;  |        r = hash3(a || V || Z)     (mod q)
&gt;  |        R = r B
&gt;  |        R_{v} = r B_{v}
&gt;  |        h = hash4(A || V || R || Rv || M) (mod q)
&gt;  |        s = r + ha (mod q)
&gt;  |        v = hash5(c V) (mod 2^{b})
&gt;  |        return (V || h || s), v
&gt;
&gt; (Trevor is using q, where you, Ian, and I are using \ell, and floodyberry
&gt; uses n.  Also ignore the `calculate_key_pair` function, that's just because
&gt; Signal stores keys in Montgomery form.  Also ignore the numbers after the
&gt; hashes, that's just denoting the labelset system for domain separation.)
&gt;
&gt; Personally, I'd redefine `hash_to_point` such that it does two elligator2
&gt; encodings from a 512-bit hash, and then adds the points together, before
&gt; multiplying by the cofactor, to ensure it produces all (instead of roughly
&gt; half of all) possible points.
&gt;
&gt; Also, (shameless plug) you get all of this basically for free if you just do
&gt; generalised EdDSA with Ristretto, [1] since the cofactor is elliminated.
&gt; I've been working with Trevor on this, it's called D.A.V.R.O.S. and it'll
&gt; be done… (as) soon (as I have more free time to finish it).
&gt;

Hello Isis and thanks for the help!

I found some time to read about XEdDSA and VXEdDSA: they seem like very
interesting constructions and indeed the latter seems like the thing we
should be using here!

That said, my impression is that swapping ed25519 for VXEdDSA in the HS
protoocl is not gonna be easy (especially since we are hoping to fit
this in 034), because then HSDirs will need to be able to verify both
ed25519 and VXEdDSA signatures, which IIUC are different constructions
(that is, an HSDir node can't produce a VRF output with an ed25519 sig).

IMO, a reasonable plan for now is to use either (R, S mod l) or H(R,A,M)
in the replay cache and only *after* the desc signature has been
verified.  Then perhaps in the future we should consider whether we can
eventually swap out ed25519 for VXEdDSA so that we can use its VRF
output directly.

I hope this makes sense. I'm gonna start implementing this concept this
week, in hopes that we can fit it in the 034 schedule, because otherwise
revision counters are gonna linger around for longer!

Thanks! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180424231054</emailId><senderName>Stelios Barberakis</senderName><senderEmail>chefarov@gmail.com</senderEmail><timestampReceived>2018-04-24 23:10:54-0400</timestampReceived><subject>Re: [tor-dev] ahmia ~ summer of privacy</subject><body>

[Attachment #2 (multipart/alternative)]


Hello George,

This is a good idea. I will add it to the todo list. Thank you :)

Cheers

On 24 April 2018 at 12:20, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:

&gt; Stelios Barberakis &lt;chefarov@gmail.com&gt; writes:
&gt;
&gt; &gt; Hello all,
&gt; &gt;
&gt; &gt; My name is Stelios and I am a CS student at Technical University of
&gt; Crete.
&gt; &gt; This summer I will be working on ahmia &lt;https://ahmia.fi&gt; project,
&gt; during
&gt; &gt; the "summer of privacy".
&gt; &gt;
&gt; &gt; This will be the first time to be engaged with the tor-ecosystem
&gt; community
&gt; &gt; as a developer, and I am really glad about it.
&gt; &gt;
&gt; &gt; The current plan includes some updates, enhancements of the codebase and
&gt; &gt; the building/deployment process (including docker), as well as some new
&gt; &gt; features like search filters, but we are looking to come up with new
&gt; ideas
&gt; &gt; for additional features, etc.
&gt; &gt;
&gt; &gt; Everyone is welcomed to contribute to the brainstorming, so feel free to
&gt; &gt; ask anything you would like, either here or by joining #ahmia channel in
&gt; &gt; OFTC if you feel so.
&gt; &gt;
&gt;
&gt; Hello Stelios and welcome to the SoP!
&gt;
&gt; One of the things I'd be really interested in seeing as part of this
&gt; ahmia SoP, is some more transparency on how people are using Ahmia. It
&gt; would be great to revive the old stats panel that Ahmia had which
&gt; showed stuff like "unique users per day", "queries per day", "unique
&gt; queries per day", etc. Ahmia used to have these kind of stats back in
&gt; 2014, so perhaps reviving them might be easier than having to do them
&gt; from scratch: https://lists.torproject.org/pipermail/tor-reports/2014-
&gt; May/000536.html
&gt;
&gt; Cheers! :)
&gt;



-- 
PGP key:
http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Hello George,&lt;br&gt;&lt;br&gt;&lt;/div&gt;This is a good idea. I will add \
it to the todo list. Thank you :)&lt;br&gt;&lt;br&gt;&lt;/div&gt;Cheers&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_extra"&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;On 24 April 2018 at 12:20, George \
Kadianakis &lt;span dir="ltr"&gt;&lt;&lt;a href="mailto:desnacked@riseup.net" \
target="_blank"&gt;desnacked@riseup.net&lt;/a&gt;&gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;&lt;span class=""&gt;Stelios Barberakis &lt;&lt;a \
href="mailto:chefarov@gmail.com"&gt;chefarov@gmail.com&lt;/a&gt;&gt; writes:&lt;br&gt; &lt;br&gt;
&gt; Hello all,&lt;br&gt;
&gt;&lt;br&gt;
&gt; My name is Stelios and I am a CS student at Technical University of Crete.&lt;br&gt;
&lt;/span&gt;&gt; This summer I will be working on ahmia &lt;&lt;a href="https://ahmia.fi" \
rel="noreferrer" target="_blank"&gt;https://ahmia.fi&lt;/a&gt;&gt; project, during&lt;br&gt; &lt;span \
class=""&gt;&gt; the "summer of privacy".&lt;br&gt; &gt;&lt;br&gt;
&gt; This will be the first time to be engaged with the tor-ecosystem community&lt;br&gt;
&gt; as a developer, and I am really glad about it.&lt;br&gt;
&gt;&lt;br&gt;
&gt; The current plan includes some updates, enhancements of the codebase and&lt;br&gt;
&gt; the building/deployment process (including docker), as well as some new&lt;br&gt;
&gt; features like search filters, but we are looking to come up with new ideas&lt;br&gt;
&gt; for additional features, etc.&lt;br&gt;
&gt;&lt;br&gt;
&gt; Everyone is welcomed to contribute to the brainstorming, so feel free to&lt;br&gt;
&gt; ask anything you would like, either here or by joining #ahmia channel in&lt;br&gt;
&gt; OFTC if you feel so.&lt;br&gt;
&gt;&lt;br&gt;
&lt;br&gt;
&lt;/span&gt;Hello Stelios and welcome to the SoP!&lt;br&gt;
&lt;br&gt;
One of the things I'd be really interested in seeing as part of this&lt;br&gt;
ahmia SoP, is some more transparency on how people are using Ahmia. It&lt;br&gt;
would be great to revive the old stats panel that Ahmia had which&lt;br&gt;
showed stuff like "unique users per day", "queries per day", \
"unique&lt;br&gt; queries per day", etc. Ahmia used to have these kind of stats \
back in&lt;br&gt; 2014, so perhaps reviving them might be easier than having to do them&lt;br&gt;
from scratch: &lt;a href="https://lists.torproject.org/pipermail/tor-reports/2014-May/000536.html" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;pipermail/tor-reports/2014-&lt;wbr&gt;May/000536.html&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Cheers! :)&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div class="gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;font color="#333333" \
face="Helvetica Neue, Helvetica, Arial, sans-serif" size="3"&gt;PGP key:  &lt;a \
href="http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998" \
target="_blank"&gt;http://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0xBF6EA91B7CBE3998&lt;/a&gt;&lt;/font&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
 &lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180425210353</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-04-25 21:03:53-0400</timestampReceived><subject>Re: [tor-dev] [TSoP] stem.client - introductions</subject><body>

Dave Rolek &lt;dmr-x@riseup.net&gt; writes:

&gt; Hi everyone!

Hi Dave,

Congratulations on your project/acceptance!

&gt; In particular, I'll be working on expanding stem's support to act as a
&gt; Tor client, aka stem.client, speaking with Tor's ORPort. You can see
&gt; more about stem in general [1], and read concepts for stem.client [2],
&gt; but at the end of this email I list my high-level plan for the summer
&gt; project.

I don't know if you've gotten far enough to discuss code layout/design,
but it would be really cool if you follow the "sans-IO" approach for the
design of the actual "OR protocol" part of the project.

A great example of this is the Hyper/H2 libraries by Cory Benfield for
the HTTP2 protocol -- this what drives Twisted HTTP2 support as well as
threaded (blocking I/O) servers.

   https://github.com/python-hyper/hyper-h2

There are several advantages to this approach:

 - makes for a nice and clean separation between core "protocol stuff"
   and the I/O.
 - the above makes testing easier and cleaner (e.g. end-to-end tests
   that don't use any "real networking", all in-memory)
 - allows use in blocking / threaded implementations but also async
   (event-based) implementations (for example, someone could then
   leverage the bulk of your work to make an asyncio binding without
   having to re-write all the parsing and state-machine code)
 - it's the new hotness

I'm usually idling in #tor-dev as meejah, ping me any time

Good luck with your project, sounds interesting!

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426092959</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-04-26 09:29:59-0400</timestampReceived><subject>Re: [tor-dev] minor website update request: have the tor-relay guide ready for Ubuntu 18.04</subject><body>

Hi Hiro,

&gt; On 26 Apr 2018, at 18:31, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; For that I submitted an update on trac [1] a few days ago.
&gt; From my personal experience, my website update requests (also trivial ones)
&gt; take about two months to get committed, it would be great if we could speed
&gt; things up for this specific request to have the relay guide ready for the 
&gt; new Ubuntu LTS nearly at the same time when the release is happening.
&gt; (I won't be bothering you with non-tor-relay-guide related website
&gt; updates anymore).

I want to make sure we encourage patches to the website.

Who has the ability to merge website patches?
Why does it take so long?
Is there any way we can make it easier for you all?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426105828</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-04-26 10:58:28-0400</timestampReceived><subject>[tor-dev] sbws meeting notes 26 April 2018</subject><body>

Next meeting is 3 May 2018 at 0930 UTC.

http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-04-26-09.59.html

https://pad.riseup.net/p/6292yqhUOuHC (copy/pasted below)

Simple Bandwidth Scanner Meeting 25 April 2018
==============================================

This pad:
https://pad.riseup.net/p/6292yqhUOuHC

Previous week's notes:
https://lists.torproject.org/pipermail/tor-dev/2018-April/013084.html


    Witty quote

    - Unknown





Updates
===========================================

pastly:
   last 7 days:
   - sbws is now open source

       https://github.com/pastly/simple-bw-scanner

       https://sbws.readthedocs.io/en/latest/

   - fix some bad bugs in 'sbws cleanup' command while writing tests for it
   - integrate with Travis CI and automatically test against python 3.4,
3.5, and 3.6
   - integrate with Read the Docs
   - gather intel on the environments our users will be running sbws in


https://github.com/pastly/simple-bw-scanner/wiki/Information-regarding-sbws's-target-user-base

   - did some research regarding library support for various distros.
incomplete
   - remvoe filelock dependency
   - brainstorm what I think a switch to http(s) should look like

       https://sbws.readthedocs.io/en/latest/proposals/001-switchtohttp.html

    next 7 days:

    - start implementing the switch to http(s)

    - verify sbws works with library versions that aren't the absolute
newest

    misc notes section (not udpates)

    juga's tor tickets:
https://trac.torproject.org/projects/tor/query?status=!closed&amp;cc=%7Ejuga


juga:
  Not sure which week was (since we changed from Monday to Thursday):
      - review, comment on debug option not being used #85
      - add logging conf to log to file/system #87
      - review Periodically test reachability of helpers #93
      - create issue Include file where to write ``generate`` results in
the config #91
        suggest having options both in config and cli and cli overriding
conf
      - report about problem with init and helpers #95
      - create issue about adding software to header #96
      - review using kilobytes #97, #98

  Past week:
      - fix conf issues locally and in testnet after "megacommit"
      - more changes on the spec, after new teor review
https://github.com/torproject/torspec/pull/4/commits/54ef4d4355d2b475466bf11e80ad4bc57c7e7ec3
      - create improve deployability #99
      - create issue Debian package #101
      - Work on issue software and sofware_version in v3bw files #112
      - create issue Include coverage in travis #117
      - create issue Include travis and coverage badges in README
enhancement #118

  Next week:
      - debug what tor does to solve
https://github.com/torproject/torspec/pull/4/#issuecomment-384555243
      - review the software/version ticket according to results from
previous (https://github.com/pastly/simple-bw-scanner/issues/96)
      - review spec according to results from previous
      - add a default output file for generate that can be overriden by
cli args (https://github.com/pastly/simple-bw-scanner/issues/91)
      - improve deployability, this should also help to update instances
running in testnet (https://github.com/pastly/simple-bw-scanner/issues/99)
      - update version sbws running in testnet

    Things to communicate:

     - i put as date of sbws release 1.0.0 (milestone 1) 1st May, but
i'd postpone

       to later so that we've more time testing and fixing last details

     - teor, can i make public the list of tasks you've proposed for
SoP?, any place you would propose?

     - pastly: It's fine to close issues/PRs you think aren't apropiate
for any reasons, but please say so before closing (#111, #87)

     - i stop attending net-team meetings until we need to disscuss
something there that we don't discuss in this meeting


    List of tasks for 3 months proposed by T. (19th Apr)


    - implement features we wanted in torflow in sbws instead (1 week)
      - bwauth code needs to be smarter about failed circuits
https,//trac.torproject.org/projects/tor/ticket/16559
      - assign the 10-second client timeout as the time for failed circuits?

      - at least publish failure rates
https,//trac.torproject.org/projects/tor/ticket/7281

      - Understand how accurate the bandwidth authority estimates are
https,//trac.torproject.org/projects/tor/ticket/7177
    - integration tests (1 week)
    - a practice transition in the test network (1 week, but split up)
      - set up torflow
      - set up sbws

      - compare and switch
    - work little-t tor needs (3 weeks)
      - report version of bwscanners in votes
https,//trac.torproject.org/projects/tor/ticket/3723
      - stop relays reporting zero observed bandwidths
https,//trac.torproject.org/projects/tor/ticket/24250
      - relays should regularly do a larger bandwidth self-test
https,//trac.torproject.org/projects/tor/ticket/22453
      - bandwidth testing circuits should use guards sometimes
https,//trac.torproject.org/projects/tor/ticket/19009
      - report bandwidth more often on test networks
https,//trac.torproject.org/projects/tor/ticket/17036

      - report bandwidth less often on large, public relays
https,//trac.torproject.org/projects/tor/ticket/24104
    - non-essential tickets like
https,//github.com/pastly/simple-bw-scanner/77 and
https,//github.com/pastly/simple-bw-scanner/48 (2 weeks) - if time and
motivation
      - Have sbws client launch tor itself
https,//github.com/pastly/simple-bw-scanner/77
      - Evaluate using [not threads, but twisted instead (probably)]
https,//github.com/pastly/simple-bw-scanner/48

teor:
    last week:
        * made my test dirauth a trust pastly's and juga's dirauths
        * monitored the average bandwidth on the testnet using this
script: https://pad.riseup.net/p/tor-vote-bw-average
        * opened a ticket for getting similar features into
consensus-health: https://github.com/pastly/simple-bw-scanner/issues/120
    this week:
        * busy with deadlines
        * eventually try to set up sbws on the testnet


Discussion
=========================================

### Topic: Switch to HTTP(S)

### (Proposed) Topic: SoP
- specific topics on this?
pastly: where can I find your proposed schedule again?
juga: mail
pastly: finally found it
 - personally i'm not sure on how to organize the tasks we've said i'll
do for SoP, since that's in a month. Either i do now other stuff not
included there (doing so so far), or i start with those tasks and then
update to others during SoP

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180426162735</emailId><senderName>Paul Syverson</senderName><senderEmail>paul.syverson@nrl.navy.mil</senderEmail><timestampReceived>2018-04-26 16:27:35-0400</timestampReceived><subject>Re: [tor-dev] Standardizing the 'onion service' name</subject><body>

Thanks teor for spelling things out in moderate detail and Steph for
commenting.  

My tl;dr is to basically concur with everything they both said:  The
further from user-facing and the more embedded down in the codebase,
variables, code comments, controller commands, etc. the less important
to spend effort eliminating such vestiges from existing text. Going
forward, certainly any code comments and e.g. any commands that won't
break things should use current terminology.

aloha,
Paul

On Thu, Apr 26, 2018 at 11:07:27AM -0400, Stephanie A. Whited wrote:
&gt; Hi!
&gt; 
&gt; Thanks for adding me to the thread.
&gt; 
&gt; 
&gt; On 4/26/18 3:34 AM, teor wrote:
&gt; &gt; Hi All,
&gt; &gt;
&gt; &gt; There seems to be some confusion in this thread about the
&gt; &gt; current state of the hidden service to onion service name transition.
&gt; &gt;
&gt; &gt; So I'm going to describe the state of things as they are, then try to
&gt; &gt; describe what would need to be done.
&gt; &gt;
&gt; &gt; I'd also appreciate feedback from Steph and others on our priorities for
&gt; &gt; transitioning to the onion service name. I think we have been prioritising
&gt; &gt; user-facing text. (The blog, website, Tor Browser, metrics,  etc.)
&gt; Yes, user, funder, and press facing text has consistently been using
&gt; onion services at least since I've been on board. When I first joined,
&gt; the message to me was that this was changed a couple years prior but
&gt; changeover had been slow. I realize now a lot of folks didn't get that
&gt; message.
&gt; 
&gt; We have already, with the help of Kat, updated hidden to onion services
&gt; where possible on the website. I think the exception to this is older
&gt; blog posts.
&gt; 
&gt; I realize it is not as easy to change some of the other elements, like
&gt; the directory protocol, but I think it's important to make what changes
&gt; are possible. I think it'd have a very positive impact to see these
&gt; through.
&gt; 
&gt; Being aligned will help us build trust with the press, new users, etc.
&gt; There are several reasons the name changed, if it is helpful to share
&gt; more about that lmk.
&gt; 
&gt; &gt;
&gt; &gt; Is this a sensible way of prioritising things?
&gt; &gt;
&gt; &gt; On 26 Apr 2018, at 16:42, Paul Syverson &lt;paul.syverson@nrl.navy.mil
&gt; &gt; &lt;mailto:paul.syverson@nrl.navy.mil&gt;&gt; wrote:
&gt; &gt;
&gt; &gt;&gt;&gt; Have OnionService aliases for controller commands, events, 
&gt; &gt;
&gt; &gt; These are current called "hidden service" or an abbreviation.
&gt; &gt;
&gt; &gt; Tor could add an alias mechanism for controller commands, events,
&gt; &gt; and fields, and use it to do the rename:
&gt; &gt;
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/25922
&gt; &gt; &lt;https://trac.torproject.org/projects/tor/ticket/25922#ticket&gt;
&gt; &gt;
&gt; &gt; I don't think they are as high a priority as the torrc options and man
&gt; &gt; page.
&gt; &gt;
&gt; &gt;&gt;&gt; descriptor
&gt; &gt;&gt;&gt; fields
&gt; &gt;
&gt; &gt; These are currently called "hidden service", or an abbreviation.
&gt; &gt;
&gt; &gt; Descriptor fields are part of the directory specification and
&gt; &gt; implementation, and they are highly technical. So I'm not sure we gain
&gt; &gt; much from aliasing them or renaming them.
&gt; &gt;
&gt; &gt; Similar arguments might apply to other codebases:
&gt; &gt; * Onionoo
&gt; &gt; * stem
&gt; &gt; * consensus health
&gt; &gt; * Tor (network daemon)
&gt; &gt;
&gt; &gt; But the following user-facing applications should add documentation or
&gt; &gt; change names, if they haven't already:
&gt; &gt; * Relay Search / metrics website
&gt; &gt;   * uses HSDir for relay search, because that's what it's called in the
&gt; &gt;     directory protocol
&gt; &gt;   * uses "onion service" for statistics
&gt; &gt; * Tor Browser
&gt; &gt;   * uses "onion site"
&gt; &gt; * the Tor website
&gt; &gt; * new tor blog posts
&gt; Website and new posts are covered.
&gt; &gt;
&gt; &gt;&gt;&gt; and anything else referencing 'HS' or 'HiddenService'.
&gt; &gt;
&gt; &gt; We considered adding OnionService* torrc option aliases for every
&gt; &gt; HiddenService* option in 0.2.9. But we deferred that change because we
&gt; &gt; ran out of time.
&gt; &gt;
&gt; &gt; All we need to do is add some new entries in the alias table, then do a
&gt; &gt; search and replace in the tor man page:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/17343
&gt; &gt;
&gt; &gt;&gt;&gt; Speaking of which, how do we plan to replace abbreviations? Having an
&gt; &gt;&gt;&gt; 'OSFETCH' or 'OS_CREATED' event doesn't exactly have the same ring as
&gt; &gt;&gt;&gt; their HS counterparts. ;P
&gt; &gt;
&gt; &gt; That's a good question.
&gt; &gt;
&gt; &gt; OS conflicts with "operating system", so we could use:
&gt; &gt; * Onion
&gt; &gt; * OnSrv
&gt; &gt; * no abbreviations
&gt; &gt; Or any other colour you want to paint the bikeshed.
&gt; &gt;
&gt; &gt; To avoid an endless discussion, let's leave the decision to
&gt; &gt; the people who write, review, and merge the code.
&gt; &gt;
&gt; &gt;&gt;&gt; Adjust all our docs to be consistent about the name.
&gt; &gt;&gt;
&gt; &gt;&gt; Right, anything v3 should be consistently calling these 'onion
&gt; &gt;&gt; services'.  Variable names, etc. particularly those still in use in
&gt; &gt;&gt; code shared with v2, don't need to be changed. It is OK if such
&gt; &gt;&gt; vestiges of older usage remain in abbreviations, as long as the
&gt; &gt;&gt; description of them, e.g., in any new Tor proposal, describes them
&gt; &gt;&gt; with appropriately current terminology.
&gt; &gt;
&gt; &gt; torrc options, the tor man page, and the v3 onion service code
&gt; &gt; mainly use "hidden service", and sometimes use "onion service".
&gt; &gt;
&gt; &gt; I don't see much value in changing the code.
&gt; &gt;
&gt; &gt; If we decide there is value in changing the torrc options and man page,
&gt; &gt; we need to allocate a few days of work on the roadmap to make it
&gt; &gt; happen.
&gt; &gt;
&gt; &gt;&gt;&gt; Renaming takes work. Lesson I learned from Nyx is that it works best
&gt; &gt;&gt;&gt; if you draw a line in the sand and stand by it. With Nyx, version 2.0
&gt; &gt;&gt;&gt; is called Nyx (you won't find any docs saying otherwise) and version
&gt; &gt;&gt;&gt; 1.x is the legacy 'arm' project.
&gt; &gt;&gt;&gt;
&gt; &gt;&gt;&gt; If I was in your shoes I'd opt for the same. Either prioritize the
&gt; &gt;&gt;&gt; aliases and be firm that v3 are 'Onion Services' or abort the rename.
&gt; &gt;&gt;&gt; Otherwise this will live in a confusing dual-named limbo land
&gt; &gt;&gt;&gt; indefinitely. ;P
&gt; &gt;&gt;
&gt; &gt;&gt; I'm prettty sure that v3 being 'onion services' has been the official
&gt; &gt;&gt; Tor Project position since at least half a year. We wouldn't be
&gt; &gt;&gt; aborting the rename, because 'abort' would imply it is not
&gt; &gt;&gt; complete. Anything now not using the current name is not part of an
&gt; &gt;&gt; incomplete process, it is simply wrong and outdated. Steph correct me
&gt; &gt;&gt; if I am wrong about that.
&gt; &gt;&gt;
&gt; &gt;&gt; So I think you've answered your own question. Nothing in v3 should be
&gt; &gt;&gt; called 'hidden services'.
&gt; Right. In our communications, all are onion services, there are just
&gt; different versions and configurations possible.
&gt; 
&gt; If I've missed something I can respond to more specifically in this
&gt; thread, please lmk.
&gt; -Steph
&gt; &gt;
&gt; &gt; That's not the current state of the tor network daemon v3 onion service
&gt; &gt; code, specs, options, and man page. They use a mix of terminology
&gt; &gt; (see above).
&gt; &gt;
&gt; &gt;&gt; And anything new in code and documentation
&gt; &gt;&gt; should be called 'onion services'. If you want to think of v2 and
&gt; &gt;&gt; earlier as 'hidden services' for purposes of understanding legacy
&gt; &gt;&gt; component and variable names, e.g., HSDir that's fine. And as such,
&gt; &gt;&gt; variable names, etc. in code that continues to be used for both v2 and
&gt; &gt;&gt; v3 can can persist. But again, any new specs, documentation, etc.
&gt; &gt;&gt; should call them 'onion services'.
&gt; &gt;
&gt; &gt; We have gradually been using onion services in new documentation and
&gt; &gt; specs, since "single onion services". But we haven't changed existing
&gt; &gt; code and documentation.
&gt; &gt;
&gt; &gt;&gt; This acceptance of existing v2 documentation calling them 'hidden
&gt; &gt;&gt; services' while refusing this for anything v3 is a little misleading
&gt; &gt;&gt; about when and why the naming transition happened, but its close
&gt; &gt;&gt; enough to serve as your line in the sand if you feel one is needed.
&gt; &gt;&gt; I actually argued the value of essentially such a line-in-the-sand
&gt; &gt;&gt; position to Steph a while ago. This doesn't preclude also calling v2
&gt; &gt;&gt; and earlier 'onion services'. Indeed, it's not just OK but preferable,
&gt; &gt;&gt; for the above mentioned reasons.
&gt; &gt;
&gt; &gt; It looks like we are doing a gradual transition. I think we prioritised
&gt; &gt; the things that are seen by the most users (Tor Browser, statistics,
&gt; &gt; blog, website).
&gt; &gt;
&gt; &gt; We did not take a line in the sand position in the past, but we could
&gt; &gt; adopt one for the remaining changes. We could decide on a particular
&gt; &gt; Tor release (and releases of other codebases). But we need to schedule
&gt; &gt; the work on the relevant roadmaps.
&gt; &gt;
&gt; &gt; And maybe there are some obscure technical things (code, comments,
&gt; &gt; descriptor fields) that just aren't worth changing.
&gt; &gt;
&gt; &gt; T
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180427115635</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-04-27 11:56:35-0400</timestampReceived><subject>Re: [tor-dev] Proposal #291 Properties (was IRC meeting)</subject><body>

[Attachment #2 (multipart/signed)]


Mike Perry:
&gt; teor:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; &gt; On 25 Apr 2018, at 18:30, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; 1. Hidden service use can't push you over to an unused guard (at all).
&gt; &gt; &gt;  2. Hidden service use can't influence your choice of guard (at all).
&gt; &gt; &gt;  3. Exits and websites can't push you over to an unused guard (at all)
&gt; &gt; &gt;  4. DoS/Guard node downtime signals are rare (absent)
&gt; &gt; &gt;  5. Nodes are not reused for Guard and Exit positions ("any" positions)
&gt; &gt; &gt;  6. Information about the guard(s) does not leak to the website/RP (at all).
&gt; &gt; &gt;  7. Relays in the same family can't be forced to correlate Exit traffic.
&gt; &gt; 
&gt; &gt; I think this list is missing some important user-visible properties, or it's
&gt; &gt; not clear which property above corresponds to these properties:
&gt; &gt; 
&gt; &gt; * Is Tor reliable and responsive when guards go down, or when I move
&gt; &gt;   networks, or when I have lost and regained service?
&gt; 
&gt; I think this is implicitly provided by #4. Downtime is a security issue.
&gt; If (any of) a client Guard(s) are down, and the adversary can detect
&gt; this based on client behavior, well, that is a side channel signal that
&gt; provides information about the Guard. So by satisfying #4, we also
&gt; satisfy the weaker conditions of general reliability and responsiveness.
&gt;  
&gt; &gt; I also think it's missing an implicit property, which we should make explicit:
&gt; &gt; 
&gt; &gt; * Can Tor users be fingerprinted by their set of guards or directory guards?
&gt; &gt; 
&gt; &gt; Perhaps this property is out of scope.
&gt; 
&gt; I think it is worth considering. We should add it if we need to do
&gt; another round of evaluation.

Alright, for the sake of argument, let's call this Property #8:
  8. Less information from guard fingerprinting (the least information)

I argue that this #8 is also equivalent to a #9 that Roger would ask
for:
  9. Fewer points of observation into the network (the fewest points).

To avoid TL;DR, that argument is an exercise to the reader ;).

Here is a proposal that beats my previous proposal on Property #8 and
#9, while trying to preserve as many of the other properties as
possible:

 * Set "num primary guards"=1 and "num primary guards to use"=1
 * Set "num directory guards"=1 and "num directory guards to use"=1
 * Don't give Exit nodes the Guard flag.
 * Allow "same node, same /16, same family" between guard and last hop,
   but only for HS circuits (which are at least 4 hops).
 * Allow same /16 and same family for HS circuits.
 * When a primary guard leaves the consensus, pick a new one.
 * When a primary guard fails circuits, do $MAGIC_FAILURE_HEURISTIC.

This proposal gets strong:
  1. Hidden service use can't push you over to an unused guard (at all).
  2. Hidden service use can't influence your choice of guard (at all).
  3. Exits and websites can't push you over to an unused guard (at all)
  8. Less information from guard fingerprinting (the least information)

It loses #4 (and your reliability point above), because if we transition
to a second guard too quickly when the first one starts failing, then we
lose the winning fingerprinting property we want to keep. So then
therefore, we must tolerate failure and RESOURCELIMIT issues and suffer
through connectivity issues during DoS:
  4. DoS/Guard node downtime signals are rare (absent) 

It then gets us regular:
  5. Nodes are not reused for Guard and Exit positions ("any" positions)
  6. Information about the guard(s) does not leak to the website/RP (at all).
  7. Relays in the same family can't be forced to correlate Exit traffic.

And again, we could get strong #6 if we allow the guard node for both RP
and the node before the RP:
  6. Information about the guard(s) does not leak to the website/RP (at all).


So the key thing (in this property list) that forcing one guard causes us
to lose is reliability under DoS, which is a guard discovery vector (and
probably a source of other side channels, too).


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180427211259</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-04-27 21:12:59-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


Greetings,

(
Meejah and I made txtorcon report the reason for circuit
build failures here: https://github.com/meejah/txtorcon/pull/299
My scanner now uses this txtorcon feature:
https://github.com/david415/tor_partition_scanner
)

I used a collector consensus file: 2018-04-27-19-00-00-consensus

wget https://collector.torproject.org/recent/relay-descriptors/consensuses/2018-04-27-19-00-00-consensus


and extracted the top 100 relays with the highest consensus weights
with stable AND fast flags.

./helpers/query_fingerprints_from_consensus_file.py 2018-04-27-19-00-00-consensus &gt; \
top100.relays

and then performed the scan, building 9900 2-hop tor circuits:

detect_partitions.py --tor-control unix:/var/run/tor/control --log-dir ./ \
                --status-log ./status_log \
   --relay-list top100.relays --secret secretTorEmpireOfRelays --partitions 1 \
                --this-partition 0 \
   --build-duration .25 --circuit-timeout 60 --log-chunk-size 1000 --max-concurrency \
100

This resulted in only 307 circuit build failures:

echo "select reason from scan_log where status = 'failure'
&gt; ;" | sqlite3 scan1.db | wc -l
307

And out of these failures, 301 of them the circuit build failure REASON was reported \
by little-t tor as TIMEOUT:

echo "select reason from scan_log where status = 'failure';" | sqlite3 scan1.db | \
grep -i timeout | wc -l 301

Here's the non-timeout REASONs for these circuit build failures:

echo "select reason from scan_log where status = 'failure';" | sqlite3 scan1.db | \
grep -vi timeout

DESTROYED, FINISHED
DESTROYED, FINISHED
DESTROYED, CHANNEL_CLOSED
DESTROYED, CHANNEL_CLOSED
DESTROYED, CHANNEL_CLOSED
DESTROYED, CHANNEL_CLOSED


I'm curious to try this scan at different times of day to see if results vary.


Cheers,

David


On Tue, Mar 13, 2018 at 11:48:30PM +0000, dawuud wrote:
&gt; 
&gt; I did another scan, this time with 3 seconds between each circuit
&gt; build and set the max connections to 50 with similar results as
&gt; yesterday:
&gt; 
&gt; 9354 failure
&gt; 2 timeout
&gt; 544 success
&gt; 
&gt; most of the circuit build failures happened in under a second:
&gt; 
&gt; echo "select (end_time - start_time) / 1000 as duration from scan_log where \
&gt; duration &lt; 1 AND status = 'failure';" | sqlite3 scan1.db | wc -l 9344
&gt; 
&gt; &gt; txtorcon does expose both the 'reason' and the 'remote_reason' flags
&gt; &gt; returned by the failure messages. In fact, it returns all flags that Tor
&gt; &gt; sent during stream or circuit failures.
&gt; &gt; 
&gt; &gt; The **kwargs in stream_closed, circuit_closed or circuit_failed
&gt; &gt; notifications should all include "REASON" and many times will also
&gt; &gt; include "REMOTE_REASON" (e.g. if the "other" relay closed the
&gt; &gt; connection). For convenience, txtorcon also includes lower-cased
&gt; &gt; versions of all the flags.
&gt; 
&gt; ah ok! I will take a look at this. I'd like to do another scan
&gt; while collecting this additional information.
&gt; 
&gt; &gt; Would it be better, then, to pick one first hop and scan (sequentially)
&gt; &gt; every second-hop using that first hop? (And maybe have say 5 or 10 such
&gt; &gt; things going on at once?)
&gt; 
&gt; Maybe it's ok to make 7,000+ tor circuits sequentially from the same relay
&gt; if it's done very slowly?



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180430073802</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-04-30 07:38:02-0400</timestampReceived><subject>Re: [tor-dev] Closing old Trac Milestones</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-04-30 06:02, teor wrote:
&gt; Hi,

Hi teor,

&gt; Just following up on the old trac milestones.
&gt; 
&gt;&gt; On 23 Apr 2018, at 14:31, teor &lt;teor2345@gmail.com&gt; wrote:
&gt;&gt;
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; Tor's trac has a lot of milestones.
&gt;&gt; Sometimes users select the wrong one, because there are so many.
&gt; 
&gt; Does metrics want to close these milestones?
&gt; 
&gt;&gt; ExoneraTor 1.0.0
&gt;&gt; Metrics 1.0.0
&gt;&gt; Metrics 2.0.0
&gt;&gt; Onionoo 1.14.0

Yes, I already closed some of them last week after seeing your message.
The remaining ones are still used.

Thanks for taking the initiative to get rid of old milestones!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180430101416</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2018-04-30 10:14:16-0400</timestampReceived><subject>Re: [tor-dev] HS v3 client authorization types</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 04/28/2018 03:59 AM, meejah wrote:
&gt; Then, if the service client has a problem later they have
&gt; to remember NOT copy-paste the whole config when asking for
&gt; help... sounds like lots to go wrong :) and I don't think this can be
&gt; solved by tinkering with the names/layout of torrc options,
&gt; personally...


Agreed. I don't think putting a private key in torrc is a good idea.

Maybe we can put the private key in a separate file and put the path in
the torrc?

For example:
HidServAuth onion-address auth-type path-to-private-key-file

haxxpop


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180430132100</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2018-04-30 13:21:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Tor bandwidth measurements document format</subject><body>

Hi,

after teor's revision, second version pasted below.

Changes can be seen: in
https://github.com/juga0/torspec/commits/bandwidth-file-spec

Best,
juga

=================================================================

          Tor Bandwidth Measurements Document Format
                            juga
                            teor

1. Scope and preliminaries

  This document describes the format of Tor's bandwidth measurements
  document, version 1.0.0 and later.

  Since Tor version 0.2.4.12-alpha the directory
  authorities use the bandwidth measurements document called
  "V3BandwidthsFile" and produced by Torflow [1]
  (format described in README.spec.txt [2]).

    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
    NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
    "OPTIONAL" in this document are to be interpreted as described in
    RFC 2119.

1.2. Acknowledgements

  The original bandwidth measurement scanner (Torflow) and format was
  created by mike. Teor suggested to write this specification while
  contributing on pastly's new bandwidth scanner implementation.

  This specification was revised after feedback from:

    XXX

1.3 Outline

  The bandwidth measurements mentioned in sections 3.4.1 and 3.4.2
  of "Tor directory protocol" (dir-spec.txt) [3] are obtained
  by bandwidth authorities, which generate a file storing information
  on relays' measured bandwidth capacities.

1.4. Format Versions

   1.0.0 - The legacy fallback bandwidth measurements document format

   1.1.0 - Adds key_value lines to the header, format version,
           optional ones and section separator.

2. Format details

  Bandwidth measurements MUST contain the following sections:
  - Header (exactly once)
  - Relays measurements (zero or more times)

2.1. Definitions

  The following nonterminals are defined in dir-spec.txt, sections
  1.2., 2.1.1., 2.1.3.:

    Int
    SP (space)
    NL (newline)
    Keyword
    ArgumentChar
    fingerprint (hexdigest)
    nickname

  Nonterminals defined in "Tor Directory List Format" (dir-list-spec.txt),
  section 2.2.1.:

    version_number

  We define the following nonterminals:

    value ::= ArgumentChar+
    key_value ::= Keyword "=" value
    line ::= ArgumentChar* NL
    timestamp ::= Int
    bandwidth ::= Int
    relay_line ::= key_value (SP key_value)* NL

2.2. Header format

Some header lines MUST appear in specific positions, as documented below.
All other lines can appear in any order.

There MUST NOT be multiple key_value header lines with the same key.

It consists of:

  timestamp NL

    [At start, exactly once.]

    The Unix Epoch time in seconds when the file was created.

  "version=" version_number NL

    [In second position, zero or one time.]

    The specification document format version.
    It uses semantic versioning [5].

    This line has been added in version 1.1.0 of this specification.

    Version 1.0.0 documents do not contain this line, and the
    version_number is considered to be "1.0.0".

  "software=" value NL

    [Zero or one time.]

    The name of the software that created the document.

    This line has been added in version 1.1.0 of this specification.

    Version 1.0.0 documents do not contain this line, and the software is
    considered to be "torflow".

  "software_version=" value NL

    [Zero or one time.]

    The version of the software that created the document.
    The version may be a version_number, a git commit, or some other
    version scheme.

    This line has been added in version 1.1.0 of this specification.

  "scanner_started=" timestamp NL

    [Zero or one time.]

    The Unix Epoch time in seconds when the scanner that generates the
    measurements document started.

    This line has been added in version 1.1.0 of this specification.

  "earliest_measurement=" timestamp NL

    [Zero or one time.]

    The Unix Epoch time in seconds when the first relay measurement
    was obtained.

    This line has been added in version 1.1.0 of this specification.

  key_value NL

    [Zero or more times.]

    Future format versions may include additional key_value header lines.
    Additional header lines will be accompanied by a minor version
increment.

    Implementations MAY add additional header lines as needed. This
    specification SHOULD be updated to avoid conflicting meanings for the
    same header keys.

    Parsers MUST NOT rely on the order of these additional lines.

    Additional header lines MUST NOT use any keywords specified in the
    relay measurements format.

    If a header line does not conform to this format, the line SHOULD be
    ignored by parsers.

  NL

    [Zero or one time.]

    The header ends.

    This line has been added in version 1.1.0 of this specification.

    For version 1.0.0 documents, the header ends when the first relay
    measurement line is found conforming to the next section.

2.3. Relay measurements format

It consists of zero or more relay_line with the measurement results
of relays in arbitrary order.

There can be at most one relay_line per relay identity (fingerprint).

There MUST NOT be multiple key_value pairs with the same key in the same
relay_line.

Each relay_line MUST include the following key_value in arbitrary order:

  "node_id=" fingerprint

    [Exactly once.]

    The fingerprint of the relay being measured.

  "bw=" bandwidth

    [Exactly once.]

    The measured bandwidth of this relay.

    Tor accepts zero bandwidths, but they trigger bugs in older Tor
    implementations. Therefore, implementations SHOULD NOT produce zero
    bandwidths. Instead, they SHOULD use one as their minimum bandwidth.

    Multiple measurements can be aggregated using an averaging scheme, such
    as a mean, median, or decaying average.

    Torflow scales bandwidths to kilobytes per second. Other implementations
    SHOULD use kilobytes per second for their initial bandwidth scaling.

    If different implementations or configurations are used in votes for the
    same network, their measurements MAY need further scaling. See
Appendix B
    for information about scaling, and one possible scaling method.

  key_value

    [Zero or more times.]

    Future format versions may include additional key_value pairs on a
relay_line.
    Additional key_value pairs will be accompanied by a minor version
increment.

    Implementations MAY add additional relay key_value pairs as needed. This
    specification SHOULD be updated to avoid conflicting meanings for the
    same relay keys.

    Parsers MUST NOT rely on the order of these additional key_value pairs.

    Additional key_value pairs MUST NOT use any keywords specified in the
    header format.

  If a relay line does not conform to this format, the line SHOULD be
  ignored by parsers.

2.4. Implementation notes

2.4.1. Simple Bandwidth Scanner

Every relay measurement in sbws version 0.1.0 consists of:

  "node_id=" fingerprint SP

    As above.

  "bw=" bandwidth SP

    As above.

  "nick=" nickname SP

    [Exactly once.]

    The relay nickname.

  "rtt=" Int SP

    [Exactly once.]

    The Round Trip Time in milliseconds to obtain 1 byte of data.

  "time=" timestamp NL

    [Exactly once.]

    The Unix Epoch time in seconds when the last measurement was performed.

2.4.2. Torflow

Torflow relay lines include node_id and bw, and other key_value pairs [2].

References:

1. https://gitweb.torproject.org/torflow.git
2.
https://gitweb.torproject.org/torflow.git/tree/NetworkScanners/BwAuthority/README.spec.txt#n332
3. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt
4. https://metrics.torproject.org/onionoo.html#details
5. https://semver.org/

A. Sample data

The following has not been obtained from any real measurement.

A.1. Generated by Torflow

This an example version 1.0.0 document:

1523911758
node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
measured_at=1523911725 updated_at=1523911725 pid_error=4.11374090719
pid_error_sum=4.11374090719 pid_bw=57136645 pid_delta=2.12168374577
circ_fail=0.2 scanner=/filepath
node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
measured_at=1523911623 updated_at=1523911623 pid_error=3.96703337994
pid_error_sum=3.96703337994 pid_bw=47422125 pid_delta=2.65469736988
circ_fail=0.0 scanner=/filepath

A.2. Generated by sbws version 0.1.0

1523911758
version=1.1.0
software=sbws
software_version=0.1.0
scanner_started=1523911756
earliest_measurement=1523911757

node_id=$68A483E05A2ABDCA6DA5A3EF8DB5177638A27F80 bw=760 nick=Test
rtt=380 time=1523911725
node_id=$96C15995F30895689291F455587BD94CA427B6FC bw=189 nick=Test2
rtt=378 time=1523911623

B. Scaling bandwidths

B.1. Scaling requirements

Tor accepts zero bandwidths, but they trigger bugs in older Tor
implementations. Therefore, scaling methods SHOULD perform the
following checks:
 * If the total bandwidth is zero, all relays should be given equal
   bandwidths.
 * If the scaled bandwidth is zero, it should be rounded up to one.

Initial experiments indicate that scaling may not be needed for
torflow and sbws, because their measured bandwidths are similar
enough already.

B.2. A linear scaling method

If scaling is required, here is a simple linear bandwith scaling
method, which ensures that all bandwidth votes contain approximately
the same total bandwidth:

1. Calculate the relay quota by dividing the total measured bandwidth
   in all votes, by the number of relays with measured bandwidth
   votes. In the public tor network, this is approximately 7500 as of
   April 2018. The quota should be a consensus parameter, so it can be
   adjusted for all scanners on the network.

2. Calculate a vote quota by multiplying the relay quota by the number
   of relays this bandwidth authority has measured
   bandwidths for.

3. Calculate a scaling factor by dividing the vote quota by the
   total unscaled measured bandwidth in this bandwidth
   authority's upcoming vote.

4. Multiply each unscaled measured bandwidth by the scaling
   factor.

Now, the total scaled bandwidth in the upcoming vote is
approximately equal to the quota.

B.3. Quota changes

If all scanners are using scaling, the quota can be gradually
reduced or increased as needed. Smaller quotas decrease the size
of uncompressed consensuses, and may decrease the size of
consensus diffs and compressed consensuses. But if the relay
quota is too small, some relays may be over- or under-weighted.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180430154256</emailId><senderName>Mark Smith</senderName><senderEmail>mcs@pearlcrescent.com</senderEmail><timestampReceived>2018-04-30 15:42:56-0400</timestampReceived><subject>Re: [tor-dev] TBB + Privoxy</subject><body>

On 4/29/18 10:15 AM, procmem wrote:
&gt; Hi. We are trying to get Tor Browser to work with privoxy to allow users
&gt; to optionally connect to other networks including I2P, Zeronet...
&gt; 
&gt; Here's what we tried:
&gt; 
&gt; * Disabling network.proxy.no_proxies_on
&gt; 
&gt; * Setting network.proxy.http_port to 8118 (privoxy's port number)
&gt; network.proxy.http 127.0.0.1
&gt; network.proxy.http_port 8118
&gt; network.proxy.ssl 127.0.0.1
&gt; network.proxy.ssl_port 8118
&gt; 
&gt; * We know a transition to unix sockets for localhost comms is planned
&gt; but not currently enforced. We have workarounds for that.
&gt; 
&gt; Can someone please tell me what's missing?
&gt; 
&gt; NB This is a separate copy of Tor Browser to prevent fingerprinting
&gt; problems with normal surfing in general.

What error or incorrect behavior are you experiencing?

Do your preference changes seem to remain in effect? That is, are they
correct if you check them via about:config after your special Tor
Browser is up and running?

Have you disabled Tor Launcher? During browser startup, Torbutton asks
Tor Launcher which proxy settings to use and resets many of the
preferences you mentioned.

-- 
Mark Smith
Pearl Crescent
http://pearlcrescent.com/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180430204721</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-04-30 20:47:21-0400</timestampReceived><subject>Re: [tor-dev] onion v2 deprecation plan?</subject><body>

&gt; for v3 support, HSFETCH won't be ncessary...

Noooo...

HSFETCH &lt;v2.onion | v3.onion&gt;

is an absolutely necessary control function now critical to operation of a
variety of onionland search / index / status / webhosting / research services,
and any other basic commandline checks that have zero wish to be
spawning heavy browser / wget / specific application apparatus or wasting
resources establishing TCP connections to the services themselves,
and for debugging tor client and network itself independant from
all such other tools, and helpful for "Why can't I connect" questions
from users, etc.

Further, a minimum request and result option semantics of
HSFETCH regarding the above were roughly specified previously...

HSFETCH &lt;v2.onion | v3.onion&gt; [fetch_mode] [output_each] [raw_desc]
[sync_here] [update_cache]
 as integrated with vN-DescId and SERVER= elements

General operation
- fetch mode: 0 default client resolution method, 1 force from network [3 only,
  do not recurse to cache], 2 force from cache [4 only, do not recurse
to network]
- source of the returned descriptor: network, or local cache
- network may have different data than cache so [update_cache] or not,
default yes
- result status of the fetch [a]: ok found, 404 not found, network
failure + why: reason
- status of the descriptor [a]: ok good, bad + why: crypto failed, expired,
  parsing data type, truncated, corrupt, etc
- decoding and printing out all fields of the returned descriptor,
  optionally also print the whole descriptor as received, regardless of any bad
  status, in hex [raw_desc] to further help debugging and other uses
For each HSDir by respective HSDir identifier [output_each=true]
- above result status of the fetch for each HSDir queried (typically six)
- above status of the descriptor from each responding HSDir
- above decoding and printing for each responding HSDir [output_each=verbose]

[a] These should be tagged 0 if all sources / HSDirs were ok, or 1 if an
ok descriptor was ultimately able to be returned to the fetch but some of
the sources / HSDirs had negatives thus pointing to further investigation,
or 2 if none were ok (and print the status if all six had same status, or
print "various" if they varied).

Since nodes may be performing other tasks in parallel, even over the
same onions, and due to various mandatory modes and sources being
selected, and network delays, it is very helpful and unambiguous if the
output is selectably synchronus to this command and console [sync_here],
thus leaving the HS_DESC / HS_DESC_CONTENT event streams doing their
thing if so enabled possibly on / for other control connections / monitors.
A command instance identifier should be added to be returned to match
up with respective event logstream (which would otherwise perhaps be
identified as "socks / tunnel / trans / dns / natd / etc" for those sources),
but that does not replace utility of [sync_here] for lesser capable
users or cases.

Future applications may (and perhaps already do) use HSDir descriptor
mechanism as their own datastore via HSPOST, for which similar
HSFETCH models would be useful, thus good to consider herein,
certainly as an extensible.

There were a tickets and emails somewhere on these concepts so
that they could be further and better implemented. Some elements
were committed, others remain :)

&gt; It is the main reason it hasn't been done that is for a lack of use case. The
&gt; HSFETCH for v3 is much more tricky in terms of engineering and interface thus
&gt; we decided to implement it on the "need it basis".
&gt;
&gt; If OnionBalance actually needs it for v3, then we should try to get that on
&gt; the roadmap.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180303065929</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-03-03 06:59:29-0400</timestampReceived><subject>Re: [tor-dev] Proposal 290: Continuously update consensus methods</subject><body>

On Wed, Feb 21, 2018 at 12:02:51PM -0500, Nick Mathewson wrote:
&gt;    For example, the current oldest LTS series is 0.2.5.x.  The first
&gt;    stable release in that series was 0.2.5.10.  The highest consensus
&gt;    method listed by 0.2.5.10 is 18.  Therefore, we should currently
&gt;    consider ourselves free to deprecate all methods before 18.

I like it!

I fixed a few typos which will hopefully not be controversial:
https://lists.torproject.org/pipermail/tor-commits/2018-March/140821.html

Woo,
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180309195515</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-09 19:55:15-0400</timestampReceived><subject>Re: [tor-dev] Consensus-health single-relay data</subject><body>



&gt; On 9 Mar 2018, at 20:28, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; I have tested it on Tor Browser and High Security Slider, seems to
&gt; work for me, but I want feedback on the UX and for bugs

Wow! It works! And it even works in iOS Safari.

Also, there is a feature? where you can keep pasting relay fingerprints
into the box, and it will keep adding them to the end of the page.

How hard would it be to add support for:
* multiple fingerprints
* nicknames
* partial fingerprints

I don't know how important each of these features are.
But I bet that nicknames would be the first feature request from most users.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180311072654</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-03-11 07:26:54-0400</timestampReceived><subject>Re: [tor-dev] 3.2.10 compiler warnings</subject><body>

On Fri, Mar 9, 2018 at 11:20 PM, teor &lt;teor2345@gmail.com&gt; wrote:
&gt; Can you tell us what compiler and version, and what system?

Was gcc 4.2.1 modded by whatever freebsd did
in its 8.x series. Any extant bugs... ok, but don't bother
porting for those releases as they're EOL / moot.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313234830</emailId><senderName>dawuud</senderName><senderEmail>dawuud@riseup.net</senderEmail><timestampReceived>2018-03-13 23:48:30-0400</timestampReceived><subject>Re: [tor-dev] connectivity failure for top 100 relays</subject><body>

[Attachment #2 (multipart/signed)]


I did another scan, this time with 3 seconds between each circuit
build and set the max connections to 50 with similar results as
yesterday:

9354 failure
2 timeout
544 success

most of the circuit build failures happened in under a second:

echo "select (end_time - start_time) / 1000 as duration from scan_log where duration \
&lt; 1 AND status = 'failure';" | sqlite3 scan1.db | wc -l 9344

&gt; txtorcon does expose both the 'reason' and the 'remote_reason' flags
&gt; returned by the failure messages. In fact, it returns all flags that Tor
&gt; sent during stream or circuit failures.
&gt; 
&gt; The **kwargs in stream_closed, circuit_closed or circuit_failed
&gt; notifications should all include "REASON" and many times will also
&gt; include "REMOTE_REASON" (e.g. if the "other" relay closed the
&gt; connection). For convenience, txtorcon also includes lower-cased
&gt; versions of all the flags.

ah ok! I will take a look at this. I'd like to do another scan
while collecting this additional information.

&gt; Would it be better, then, to pick one first hop and scan (sequentially)
&gt; every second-hop using that first hop? (And maybe have say 5 or 10 such
&gt; things going on at once?)

Maybe it's ok to make 7,000+ tor circuits sequentially from the same relay
if it's done very slowly?


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180314140527</emailId><senderName>Gisle Vanem</senderName><senderEmail>gisle.vanem@gmail.com</senderEmail><timestampReceived>2018-03-14 14:05:27-0400</timestampReceived><subject>Re: [tor-dev] [Win32] crash in test/bench.exe</subject><body>

isis agora lovecruft wrote:

&gt; Thanks for the bug report and the patch!  I've made #25479 [0] for this.
&gt; 
&gt; Can I ask what version of Windows you were running the benchmarks on?  

Windows-10 (v1701). 64-bit.

&gt; It seems like it might possibly have been due to differences in behaviours
&gt; between various Windows flavours in the InitializeCriticalSection() function
&gt; [1] (which was being called from tor_mutex_init(), itself called from
&gt; init_logging())?

I don't think 'init_logging()' is calling 'atomic_counter_init()' with
the correct AC, but maybe an unrelated mutex. Hence the crash.

Calling 'init_protocol_warning_severity_level()' initialises the
correct (and needed) AC 'protocol_warning_severity_level'.

-- 
--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180315083337</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-15 08:33:37-0400</timestampReceived><subject>[tor-dev] Tor: unspecified is the default Core Tor milestone</subject><body>

Hi,

The network team maintains Core Tor, the network daemon that
runs the tor network.

We have planned our roadmap for the next 6 months. We only
chose essential and sponsored tasks, because we want to finish
on time. We moved all the other tickets out of the 0.3.4 and 0.3.5
milestones.

If you want to add a ticket to Core Tor, please add it to the
"Tor: unspecified" milestone. We will discuss essential tickets each
week. We will only add tickets to the release milestone if we agree
we have time to complete them.

I have moved the "Tor: unspecified" milestone to the top of the
milestones list, to make it easier to find.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180315105535</emailId><senderName>Sambuddho Chakravarty</senderName><senderEmail>sambuddho@iiitd.ac.in</senderEmail><timestampReceived>2018-03-15 10:55:35-0400</timestampReceived><subject>Re: [tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


 Hi All

 We (myself and my student, cc'ed here) have some questions regarding Tor
relay bandwidth. We created a small testbed (private Tor network)
involving relays, clients and servers over virtual machines. The client
uses the relays to create two hop circtuits to communicate to the server.
The link bandwidths between the virtual machines is otherwise ~ 10 Gbps
(tested via end-to-end measurement tools like iperf and via downloading
large files of sizes ~2 GB through https downloads).

When not using Tor, the client achieve a download rate of approximately 8
Gbit/s while downloading a file of approximately 2 Gbytes. The same
process, when repeated over Tor circuit (through relays of the private Tor
network, that used virtual machines), p*rovides a maxmium download rate **of
about 700 Mbit/s for the client (while the CPU utilization was over 80%).* This
is much less compared to the expected throughput of 8Gbps achieved when
client communicates directly
to the server (without using Tor circuits).

We tinkered around with the Tor config and discovered that when changed the
config fields of BandwidthBurst and BandwidthRate to 100 MBytes, we
achieved end-to-end throughput of about 100 Mbit/s (while the CPU
Utilization was less than 20%) (while the underlying network link capacity
is 1 Gbit/s). The moment
the   BandwidthBurst and BandwidthRate values are increased to 1 GB (which
should effectively be 8 Gbit/s), the achieved throughput is about 650-700
Mbps (which is still 8 times slower than expected).

 Further, removing all bandwidth restrictions, the inter VM bandwidth (for
the relays in the private Tor network) is around 8 Gbit/s (measured both
via Iperf and through downloading a file &gt; 2 GBytes using encrypted HTTP
traffic).  While this is as per the expected behavior of TCP, to utilize
all the available bandwidth, the same does not happen for Tor which
continues to ramp upto a maximum of 700 Mbit/s

We are confused as to why Tor's link bandwidth utilization is not higher
(Even on a private Tor network), even when using a high capacity VMs in the
private Tor network -- each one having about 4 cores and 8 GBytes of RAM. I
understand
after speaking from some Tor developers and maintainers that Tor does not
utilize all the available CPU cores. Our VMs however do not have any other
process running either. We run the Tor processes over Debian servers with
little no other programs. More strangely, while download via HTTPS achieves
a very large fraction of the link capacity (&gt;80%), Tor traffic happens to
achieve
a throughput of around 700 Mbit/s (which is around 90% lower than the max
link bandwidth).

We tried the same with 2-hop Tor circuits, hoping to see some improvement.
But
to no avail. We continue to observe the same poor bandwidth utilization.

It would be great if you shed some light as to where we may be going wrong.

Regards
Sambuddho

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;

Hi All&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt; \
We (myself and my student, cc'ed here)  &lt;/span&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;have \
some questions regarding Tor relay bandwidth. We created a small testbed (private Tor \
network)&lt;/span&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size: \
12.8px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-w \
eight:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;w \
hite-space:normal;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;involving \
relays, clients and servers over virtual machines. The client uses the relays to \
create two hop circtuits to communicate to the server. The link bandwidths between \
the virtual machines is otherwise ~ 10 Gbps (tested via end-to-end measurement tools \
like iperf and via downloading large files of sizes ~2 GB through https downloads).  \
&lt;/div&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;fo \
nt-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400 \
;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-spac \
e:normal;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;When \
not using Tor, the client achieve a download rate of approximately 8 Gbit/s while \
downloading a file of approximately 2 Gbytes. The same process, when repeated over \
Tor circuit (through relays of the private Tor network, that used virtual machines), \
p&lt;b&gt;rovides a maxmium download rate  &lt;/b&gt;&lt;b&gt;of about 700 Mbit/s for the client (while \
the CPU utilization was over 80%).&lt;/b&gt;  This is much  less compared to the expected \
throughput of 8Gbps achieved when client communicates directly&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;to \
the server (without using Tor circuits).&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;We \
tinkered around with the Tor config and discovered that when changed the config \
fields of BandwidthBurst and BandwidthRate to 100 MBytes, we achieved end-to-end \
throughput of about 100 Mbit/s (while the CPU Utilization was less than 20%) (while \
the underlying network link capacity is 1 Gbit/s). The moment  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;the \
&lt;span&gt;  &lt;/span&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;span&gt; \
&lt;/span&gt;BandwidthBurst and BandwidthRate values are increased to 1 GB (which should \
effectively be 8 Gbit/s), the achieved throughput is about 650-700 Mbps (which is \
still 8 times slower than expected).  &lt;/span&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;span \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial;float:none;display:inline"&gt; \
Further, removing all bandwidth  &lt;/span&gt;restrictions, the inter VM bandwidth (for the \
relays in the private Tor network) is around 8 Gbit/s (measured both via Iperf and \
through downloading a file &gt; 2 GBytes using encrypted HTTP traffic).   While this \
is as per the expected behavior of TCP, to utilize all the available bandwidth, the \
same does not happen for Tor which continues to ramp upto a maximum of 700 \
Mbit/s&lt;/div&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12. \
8px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weig \
ht:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;whit \
e-space:normal;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;We \
are confused as to why Tor's link bandwidth utilization is not higher (Even on a \
private Tor network), even when using a high capacity VMs in the private Tor network \
-- each one having about 4 cores and 8 GBytes of RAM. I understand&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;after \
speaking from some Tor developers and maintainers that Tor does not&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;utilize \
all the available CPU cores. Our VMs however do not have any other process running \
either. We run the Tor processes over Debian servers with  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;little \
no other programs. More strangely, while download via HTTPS achieves  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;a \
very large fraction of the link capacity (&gt;80%), Tor traffic happens to achieve  \
&lt;/div&gt;&lt;div style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;fo \
nt-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400 \
;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;white-spac \
e:normal;word-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;a \
throughput of around 700 Mbit/s (which is around 90% lower than the max&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;link \
bandwidth).  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;We \
tried the same with 2-hop Tor circuits, hoping to see some improvement. But&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;to \
no avail. We continue to observe the same poor bandwidth utilization.  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;It \
would be great if you shed some light as to where we may be going wrong.  &lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;Regards&lt;/div&gt;&lt;div \
style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size:12.8px;font-style:no \
rmal;font-variant-ligatures:normal;font-variant-caps:normal;font-weight:400;letter-spa \
cing:normal;text-align:start;text-indent:0px;text-transform:none;white-space:normal;wo \
rd-spacing:0px;text-decoration-style:initial;text-decoration-color:initial;background-color:rgb(255,255,255)"&gt;Sambuddho&lt;/div&gt;&lt;div \
class="gmail-yj6qo" style="color:rgb(34,34,34);font-family:arial,sans-serif;font-size: \
12.8px;font-style:normal;font-variant-ligatures:normal;font-variant-caps:normal;font-w \
eight:400;letter-spacing:normal;text-align:start;text-indent:0px;text-transform:none;w \
hite-space:normal;word-spacing:0px;background-color:rgb(255,255,255);text-decoration-style:initial;text-decoration-color:initial"&gt;&lt;/div&gt;&lt;br \
class="gmail-Apple-interchange-newline"&gt;

&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180315111110</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-03-15 11:11:10-0400</timestampReceived><subject>Re: [tor-dev] How fast can Tor go [was: (no subject)]</subject><body>

On 3/15/18 11:43, Sambuddho Chakravarty wrote:
&gt; 
&gt; When not using Tor, the client achieve a download rate of approximately
&gt; 8 Gbit/s while downloading a file of approximately 2 Gbytes. The same
&gt; process, when repeated over Tor circuit (through relays of the private
&gt; Tor network, that used virtual machines), p*rovides a maxmium download
&gt; rate **of about 700 Mbit/s for the client (while the CPU utilization was
&gt; over 80%).* This is much less compared to the expected throughput of
&gt; 8Gbps achieved when client communicates directly
&gt; to the server (without using Tor circuits).
&gt; 
&gt; We tinkered around with the Tor config and discovered that when changed
&gt; the config fields of BandwidthBurst and BandwidthRate to 100 MBytes, we
&gt; achieved end-to-end throughput of about 100 Mbit/s (while the CPU
&gt; Utilization was less than 20%) (while the underlying network link
&gt; capacity is 1 Gbit/s). The moment 
&gt; the   BandwidthBurst and BandwidthRate values are increased to 1 GB
&gt; (which should effectively be 8 Gbit/s), the achieved throughput is about
&gt; 650-700 Mbps (which is still 8 times slower than expected). 
&gt; 

So you have two data points when using Tor.

1. Limit Tor to 100 MBytes --&gt; only get 100 Mbps
2. Limit Tor to 1 GByte --&gt; only get 700 Mbps

(1) sounds like it could be a real bug.

Both are approximately 8x slow downs, but I think that is coincidental.
I would guess that if you limited Tor to 7 Gbits, 5 Gbits, etc. you
would continue to see 700 Mbps. It would be interesting to see the
result of this.

As I hypothesized to either you or your student on IRC, I believe your
Tor relays as limited by CPU capacity (and its inability to use many
cores effectively); therefore, as Tor currently exists, is unable to
achieve a throughput of higher than 700 Mbps. Tor does a lot of crypto.
Perhaps it is way less efficient at doing its crypto than the TLS
library you were using for HTTPS downloads is at doing its crypto.

As another piece of evidence supporting my "700 Mbps is the max Tor can
do" theory, see the list of the fastest Tor relays[0] in the real
network. IPredator has likely done some heavy kernel tweaking, but the
remaining relays are all rather close to 700 Mbps.

Thank you for your interest in Tor.

Matt

[0]: https://metrics.torproject.org/rs.html#toprelays
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180310035413</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-03-10 03:54:13-0400</timestampReceived><subject>[tor-dev] 3.2.10 compiler warnings</subject><body>

Test from an older system before it was updated,
unlikely to be prevalent, so don't bother fixing unless obvious.

src/common/confline.c:135: warning: 'include_list' may be used
uninitialized in this function
src/common/confline.c:135: warning: 'include_list' may be used
uninitialized in this function
src/or/connection.c:1883: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/or/conscache.c:426: warning: passing argument 2 of
'consensus_cache_entry_map' discards qualifiers from pointer target
type
src/or/control.c:6815: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/or/scheduler.c:577: warning: format '%ld' expects type 'long int',
but argument 5 has type 'time_t'
src/or/connection.c:1883: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/or/conscache.c:426: warning: passing argument 2 of
'consensus_cache_entry_map' discards qualifiers from pointer target
type
src/or/control.c:6815: warning: passing argument 1 of 'TO_OR_CONN'
discards qualifiers from pointer target type
src/or/scheduler.c:577: warning: format '%ld' expects type 'long int',
but argument 5 has type 'time_t'
src/test/vote_descriptors.inc:93: warning: string length '4135' is
greater than the length '4095' ISO C99 compilers are required to
support
src/test/test_hs_descriptor.inc:224: warning: string length '14104' is
greater than the length '4095' ISO C99 compilers are required to
support
src/test/test_microdesc.c:648: warning: string length '5844' is
greater than the length '4095' ISO C99 compilers are required to
support
src/test/test_descriptors.inc:305: warning: string length '10571' is
greater than the length '4095' ISO C99 compilers are required to
support
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180310042005</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-10 04:20:05-0400</timestampReceived><subject>Re: [tor-dev] 3.2.10 compiler warnings</subject><body>

Thanks for the bug report.

&gt; On 10 Mar 2018, at 04:54, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt; 
&gt; Test from an older system before it was updated,

Can you tell us what compiler and version, and what system?
Any arguments to configure?
And how did you get the Tor source code?

&gt; unlikely to be prevalent, so don't bother fixing unless obvious.

I don't know why we didn't catch these warnings earlier.

&gt; src/common/confline.c:135: warning: 'include_list' may be used
&gt; uninitialized in this function
&gt; src/common/confline.c:135: warning: 'include_list' may be used
&gt; uninitialized in this function

This is spurious, but I'm not surprised the compiler can't tell.
We should fix it.

&gt; src/or/connection.c:1883: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type
&gt; src/or/conscache.c:426: warning: passing argument 2 of
&gt; 'consensus_cache_entry_map' discards qualifiers from pointer target
&gt; type
&gt; src/or/control.c:6815: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type

These are annoying, and can sometimes be bugs.

&gt; src/or/scheduler.c:577: warning: format '%ld' expects type 'long int',
&gt; but argument 5 has type 'time_t'

Please tell us about your system, we thought we had caught most of
these warnings.

&gt; src/or/connection.c:1883: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type
&gt; src/or/conscache.c:426: warning: passing argument 2 of
&gt; 'consensus_cache_entry_map' discards qualifiers from pointer target
&gt; type
&gt; src/or/control.c:6815: warning: passing argument 1 of 'TO_OR_CONN'
&gt; discards qualifiers from pointer target type
&gt; src/or/scheduler.c:577: warning: format '%ld' expects type 'long int',
&gt; but argument 5 has type 'time_t'

As above.

&gt; src/test/vote_descriptors.inc:93: warning: string length '4135' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support
&gt; src/test/test_hs_descriptor.inc:224: warning: string length '14104' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support
&gt; src/test/test_microdesc.c:648: warning: string length '5844' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support
&gt; src/test/test_descriptors.inc:305: warning: string length '10571' is
&gt; greater than the length '4095' ISO C99 compilers are required to
&gt; support

We turn off this warning, why does your compiler report it?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180315142548</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-03-15 14:25:48-0400</timestampReceived><subject>[tor-dev] [release] [protocol] Onionoo 5.1-1.11.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

Onionoo's protocol was extended and has a minor version jump to 5.1.

In addition, this release *prepares* a major *upcoming version* jump 6.0
after April 14, 2018.
Take note of the field "next_major_version_scheduled" in documents.

Download available at:
     https://dist.torproject.org/onionoo/5.1-1.11.0/

Protocol changes (also summarized in [0]):
The field "n" is now always added in summary docs using "Unnamed" for
relays/bridges that don't supply a nickname [1].
Relays are now always part of their own "effective_family" [2].
For more please the change log [3]

The changes are already deployed on all onionoo.torproject.org instances.=


Please direct comments and questions to the metrics-team mailing list [4]=
=2E

Cheers,
iwakeh

[0] https://metrics.torproject.org/onionoo.html#versions_5_1
[1] https://metrics.torproject.org/onionoo.html#summary_relay_n
    https://metrics.torproject.org/onionoo.html#summary_bridge_n
[2] https://metrics.torproject.org/onionoo.html#details_relay_effective_f=
amily
[3] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md
[4] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team







["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313120957</emailId><senderName>Gisle Vanem</senderName><senderEmail>gisle.vanem@gmail.com</senderEmail><timestampReceived>2018-03-13 12:09:57-0400</timestampReceived><subject>[tor-dev] [Win32] crash in test/bench.exe</subject><body>

There is a crash in bench.exe. Running 'cdb -c g bench.exe':

ntdll!RtlpWaitOnCriticalSection+0x6b:
77a9cfd6 ff4014          inc     dword ptr [eax+14h]  ds:002b:00000014=????????

ChildEBP RetAddr
0137f750 77aba38a ntdll!RtlpWaitOnCriticalSection+0x6b
0137f770 77aba259 ntdll!RtlpEnterCriticalSectionContended+0x12a
*** WARNING: Unable to verify checksum for bench.exe
0137f77c 002150f7 ntdll!RtlEnterCriticalSection+0x49
0137f784 0023136c bench!tor_mutex_acquire(struct tor_mutex_t * m = 0x0039559c)+0x37
0137f794 000fc85f bench!atomic_counter_exchange(struct atomic_counter_t * counter = \
0x0039559c, unsigned int newval = 6)  +0xc
(Inline) -------- bench!set_protocol_warning_severity_level+0xb
0137f7bc 0010563f bench!options_act(struct or_options_t * old_options = \
0x00000000)+0x2af 0137f7d4 000f385b bench!set_options(struct or_options_t * new_val = \
0x0f335730, char ** msg = 0x0137f80c)+0x6f 0137f80c 002f3707 bench!main(int argc = \
                0n1, char ** argv = 0x036b1e38)+0x24b
...


Seems bench.c uses some mutex which is not initialised
with 'tor_mutex_init()'. I fail to see which that should
be.

FYI.
'&amp;m-&gt;mutex' is 0 (= eax). But adding:
   tor_assert(&amp;m-&gt;mutex);
   tor_assert(&amp;m-&gt;mutex.OwningThread);
to 'tor_mutex_acquire()' didn't help reveal the problem.

-- 
--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180313163853</emailId><senderName>Gisle Vanem</senderName><senderEmail>gisle.vanem@gmail.com</senderEmail><timestampReceived>2018-03-13 16:38:53-0400</timestampReceived><subject>Re: [tor-dev] [Win32] crash in test/bench.exe</subject><body>

I wrote:

&gt; Seems bench.c uses some mutex which is not initialised
&gt; with 'tor_mutex_init()'. I fail to see which that should
&gt; be.

With this patch, I no longer get that crash:

--- a/bench.c 2018-01-25 20:15:13
+++ b/bench.c 2018-03-13 12:38:09
@@ -713,6 +713,8 @@
      printf("Couldn't seed RNG; exiting.\n");
      return 1;
    }
+
+  init_protocol_warning_severity_level();
    crypto_init_siphash_key();
    options = options_new();
    init_logging(1);

----

But a bit crude. IMHO bench.c shouldn't have to care about such details
like mutex'es and atomic counters.

-- 
--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180313192215</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-03-13 19:22:15-0400</timestampReceived><subject>Re: [tor-dev] [Win32] crash in test/bench.exe</subject><body>

[Attachment #2 (multipart/signed)]


Gisle Vanem transcribed 1.0K bytes:
&gt; I wrote:
&gt; 
&gt; &gt;Seems bench.c uses some mutex which is not initialised
&gt; &gt;with 'tor_mutex_init()'. I fail to see which that should
&gt; &gt;be.
&gt; 
&gt; With this patch, I no longer get that crash:
&gt; 
&gt; --- a/bench.c 2018-01-25 20:15:13
&gt; +++ b/bench.c 2018-03-13 12:38:09
&gt; @@ -713,6 +713,8 @@
&gt;      printf("Couldn't seed RNG; exiting.\n");
&gt;      return 1;
&gt;    }
&gt; +
&gt; +  init_protocol_warning_severity_level();
&gt;    crypto_init_siphash_key();
&gt;    options = options_new();
&gt;    init_logging(1);
&gt; 
&gt; ----
&gt; 
&gt; But a bit crude. IMHO bench.c shouldn't have to care about such details
&gt; like mutex'es and atomic counters.

Hello Gisle,

Thanks for the bug report and the patch!  I've made #25479 [0] for this.

Can I ask what version of Windows you were running the benchmarks on?  It
seems like it might possibly have been due to differences in behaviours
between various Windows flavours in the InitializeCriticalSection() function
[1] (which was being called from tor_mutex_init(), itself called from
init_logging())?

[0]: https://trac.torproject.org/projects/tor/ticket/25479
[1]: https://msdn.microsoft.com/en-us/library/windows/desktop/ms683472(v=vs.85).aspx)

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180319130200</emailId><senderName>Aaron Gibson</senderName><senderEmail>aagbsn@extc.org</senderEmail><timestampReceived>2018-03-19 13:02:00-0400</timestampReceived><subject>[tor-dev] Bandwidth Scanner</subject><body>

Hi all,

per reading [1], I see that there was significant discussion at tor-dev
around the topic of bandwidth measurements. It was unclear to me what
direction has been agreed on, or if anyone is leading this effort, so I
wanted to add that:

I have been working with Donncha, Juga, Teor, and Linus to find and fix
issues in the BwScanner codebase. As George K. indicates, I am time
limited and interrupt driven so I've made little progress in resolving
the "last few bugs" [2]

I do want to continue resolving these issues, and any help testing,
reviewing pull requests or contributing patches would be awesome. I
think it would also be very helpful for TPI to support this project with
project management resources to keep things on track.

BwScanner is written in python using twisted, uses travis-ci for unit
tests and integration testing with chutney. Development has been using
the github tools to facilitate code reviews and testing, and has OK
testing coverage and documentation.

--Aaron

[1]
https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/BandwidthAuthorityRequirements

[2] https://github.com/thetorproject/bwscanner/issues
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180324161700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-03-24 16:17:00-0400</timestampReceived><subject>[tor-dev] Is OutboundBindAddress respected during ORPort IP auto detection?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I got an interesting bugreport for ansible-relayor [1],
that leads me to the following question:

Is OutboundBindAddress used during ORPort IP auto detection?

Imagine the following setup:

Relay with two public IPs:
1.1.1.1
2.2.2.2

Two tor instances (one per IP):

1.1.1.1:9000
2.2.2.2:9000


torrc for 2.2.2.2:9000 contains:
[...]
OutboundBindAddress 2.2.2.2
ORPort 2.2.2.2:9000
SyslogIdentityTag 2.2.2.2_9000
[...]


when starting 2.2.2.2_9000 instance the log contains:

Tor-2.2.2.2_9000[586]: Your server (1.1.1.1:9000) has not managed to confirm that its \
ORPort is reachable. Relays do not publish descriptors until their ORPort and DirPort \
are reachable. Please check your firewalls, ports, address, /etc/hosts file, etc.

Note: Reachability tests appear to try to contact the first IP for the second \
instance.

No NAT is involved.

The solution was to add "Address 2.2.2.2", but that was not necessary previously(?)


My assumption here:
During auto detection the OutboundBindAddress configuration directive is not \
relevant.

Is that the case? Or why does tor auto-detect IP 1.1.1.1 for instance on 2.2.2.2 even \
though OutboundBindAddress is used?

thanks,
nusenu


this is on tor: 0.3.2.10

[1] https://github.com/nusenu/ansible-relayor/issues/153


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180324211522</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-03-24 21:15:22-0400</timestampReceived><subject>Re: [tor-dev] Is OutboundBindAddress respected during ORPort IP auto detection?</subject><body>

It seems that each function in a network app that
- listens to the net, should have an independantly
configurable inbound ip and port.
- talks out to the net, should have an independantly
configurable source ip and port.

And when there are multiple interfaces / NAT,
address metadata and metainfo are sometimes
needed for both others and self.

A reachability test would have both listen and talk
config parameters, and even meta needs.

Like most tools of its vintage, tor started with few knobs,
configurability often came slowly as use case bugs.

'Address' might have multi role of...
- default network interface chooser
- embed this metadata in communications / consensus for others
- for self, tell daemon who it is, where to reach self, etc

'Address' is not documented as supporting IPv6.

Seems in the above may be what you're seeing.
Maybe some more config abstraction or docs would help.

'self-test' and 'reachab' appear a few times
in limited context in the manpage.


BTW: Hyphenating these two will conform the entire
codebase to the 'self-test' form for those searching it...

tor-0.3.2.10/src/or/router.c:1461:    /* XXX IPv6 self testing */
tor-0.3.2.10/src/or/router.c:1470:  /* XXX IPv6 self testing */
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180324001359</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-24 00:13:59-0400</timestampReceived><subject>[tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

I understand that the current bandwidth measurement system is far from =
ideal, but I am wondering about how the current system works. Does each =
bandwidth authority also run a bandwidth scanner? Or is it possible that =
the results from a bandwidth scanner is supplied to multiple =
authorities?

Thanks!
Rob

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq1mEcACgkQnFIMfTqQ
qoRZaxAArh1fv8od+Y5hPAR0j5o5yluSTQ+PLYrkFsNCLGNgwdCHqc2hRt6nmrM1
wlWVWcUM/LiVvVJQGPMffyjNKs3nOpxM563HZWWUuxWQvpLLpVIUkbo/hg/eKVTA
/hlHVNZ/3wc6Enz9ZxowN4nq1OGTPgQ+WyGtKmphrz/KeO/DAfl5XE2oV9VWq0BU
mgs2dE6auBc5soe2Zyac+hZBrLixEl7szoY1pvB0ZMGVA5iE0SIBKdcAPKk6jCqN
y/TQO4IuGEkG2sh6LrQd+g5LEkgMSW1L9X012YfnqIdnNJz9uYPLWxUdzEu9ery+
c34sOosbccsaSDDL0jFKBkNrPUmHwdJhomBVHLXkPyshwmQPMHHToZaEkaHa2Bp1
nULs9HJsBSW/fT1XPFxHTLFUlNoJ5XkAesYl6AKazWv/jy9aARG8qN32nqRrrf6i
uGGWL8UeC5BCY6cgHsDRvgjILs53rqiYR3kB+hwyeLq8n/bGAJKXH0TObmZW/HdV
KoqreIhAxi7N1XfIA9XEoaEMBlGzxJYAsoPhK3xMH0NXvbInltJNl5/eZ5IJlZX9
dMVeGb+Hy8T+oFCM6R4CyfXWrVrrLQFA/Qmktz9DfEGydoz5snxal3ZlbRjKhoEI
wjdujb9UKIELi50YvnNjzpr5dLLYF3ZBADRrHAkHAvAP2BeoIyE=
=0po/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180325221500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-03-25 22:15:00-0400</timestampReceived><subject>[tor-dev] Lets give every circuit its own exit IP?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


The unbearable situation with Google's reCAPTCHA
motivated this email (but it is not limited to this
specific case).
This idea came up when seeing a similar functionality
in unbound (which has it for a different reason).

Assumption: There are systems that block some tor exit 
IP addresses (most likely the bigger once), but they 
are not blocked due to the fact that they are tor exits. 
It just occurred that the IP got flagged 
because of "automated / malicious" requests and IP reputation
systems.

What if every circuit had its "own" IP
address at the exit relay to avoid causing collateral damage
to all users of the exit if one was bad? (until the exit runs out of IPs and
starts to recycle previously used IPs again)
The goal is to avoid accumulating a bad "reputation" for the
single used exit IP address that affects all tor users
of that exit. 

Instead of doing it on the circuit level you could do it
based on time. Change the exit IP every 5 minutes (but
do _not_ change the exit IPs for _existing_ circuits even if they
live longer than 5 minutes). 

Yes, no one has that many IPv4 addresses but with the 
increasing availability of IPv6 at exits and destinations,
this could be feasible to a certain extend, depending on
how many IPv6 addresses the exit operator has.
There are exit operators that have entire /48 IPv6 blocks. 


problems:
- will not solve anything since reputation will shift to netblocks as well
(How big of a netblock are you willing to block?)
- you can tell two tor users easily apart from each other
even if they use the same exit (or more generally: you can 
tell circuits apart). There might be all kinds of bad implications
that I'm not thinking off right now.
- check.tpo would no longer be feasible
- how can do we still provide the list of exit IPs for easy blocking?
Exits could signal their used netblock via their descriptor. What if they don't?
(that in turn opens new kinds of attacks where an exit claims to be /0 
and the target effectively blocks everything)
- more state to track and store at the exit
-...


some random thoughts,
nusenu



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180320035718</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-20 03:57:18-0400</timestampReceived><subject>[tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


Back in 2014, Tor moved from three guard nodes to one guard node:
https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
https://trac.torproject.org/projects/tor/ticket/12206

We made this change primarily to limit points of observability of entry
into the Tor network for clients and onion services, as well as to
reduce the ability of an adversary to track clients as they move from
one internet connection to another by their choice of guards.

At the time, I was in favor of two entry guards but did not have a
strong preference, and we ended up choosing one guard. After seeing
various consequences of using only one entry guard, I think a much
stronger case can now be made for bumping back up to two.

Roger suggested that I enumerate the pros and cons of this increase on
this mailing list, so we can discuss and consider this switch. So here
is my attempt at that list. Let's start with a more in-depth recap of
the one-guard arguments, along with some recent observations that change
things.


Arguments for staying with just one guard:

1. One guard means less observability.

As Roger put it in the above blog post: "I think the analysis of the
network-level adversary in Aaron's paper is the strongest argument for
restricting the variety of Internet paths that traffic takes between the
Tor client and the Tor network."
http://freehaven.net/anonbib/#ccs2013-usersrouted

Unfortunately, we have since learned that Tor's path selection has the
effect of giving the adversary the ability to generate at least one
additional observation path. We first became aware of this in
https://trac.torproject.org/projects/tor/ticket/14917, where the change
to one guard allowed an adversary to discover your guard by choosing it
as a rendezvous point and observing the circuit failure. After the fix
for #14917, the onion service will build a connection to a second guard
that it keeps in reserve. By using this attack (as well as a similar but
more involved attack with unique exit policies and carefully chosen /16
exit node subnets), the adversary can force clients to be observed over
two paths whenever they like.

So while we may get benefit for moving from three guards to two guards,
we don't get much (or any) benefit from moving to two guards to one
guard against an active adversary that either connects to onion
services, or serves content to clients and runs exits.

2. Guard fingerprintability is lower with one guard

An adversary who is watching netflow connection records for an entire
area is able to track users as they move from internet connection to
internet connection through the degree of uniqueness of their guard
choice. There is much less information in two guards than three, but
still significantly more than with one guard:
https://trac.torproject.org/projects/tor/ticket/9273#comment:3

But, even with one guard, if there are not very many Tor users in your
area, you still may be trackable. "Guard bucket" designs are discussed
on the blog post and in related tickets, but they are complicated and
involve tricky tradeoffs (see
https://trac.torproject.org/projects/tor/ticket/9273#comment:4). The
best solution that I see to this is to make Tor maintain separate guard
choices depending on the current SSID, BSSID, or default gateway router
MAC from ARP. The default gateway ARP MAC is probably easiest for us to
implement cross-platform and stable across wifi to ethernet.


Arguments in favor of switching to two entry guards:

1. One guard allows course-grained netflow confirmation attacks

The counterargument based on #14917 above also has an additional
wrinkle: an adversary watching a suspect list of clients can easily
observe the "temporarily use a second guard" activity using just
connection-level ISP/AS netflow logs. To a large-scale netflow
adversary, the use of a second guard only when the guard is chosen as
the RP confirms not only guard choice, but the IP address of the onion
service itself.

Again, similar attacks may be possible against exit activity via
cleverly crafted exit policies and /16 subnet choice. (Aside: if we
allow routers to join any family they like without reciprocation, this
attack becomes worse.)

Having a dedicated second guard that is always in use will prevent the
creation and exclusive use of a new TLS connection just for this
request. Instead, the two TLS connections will both remain open and in
regular use as long as the client is active.

2. More than one guard allows us to deploy conflux.

As mentioned in the blog post, moving to one guard prevents us from
deploying conflux -- a research design that improves Tor performance by
combining two or more circuits together at an exit node or rendezvous
point and load balancing between them:
https://www.cypherpunks.ca/~iang/pubs/conflux-pets.pdf

Conflux works by giving circuits a 256bit cookie that is send to the
exit/RP, and circuits that are then built to the same exit/RP with the
same cookie can then be fused together.

Conflux was originally studied exclusively for performance, but the
technique has other uses as well.

If our conflux implementation includes packet acking, then circuits can
still survive the loss of one guard node due to DoS, OOM, or churn
because the second half of the path will remain open and usable.

Furthermore, if exits remember this cookie for a short period of time
after the last circuit is closed, the technique can be used to protect
against DoS/OOM/guard downtime conditions that take down both guard
nodes or destroy many circuits to confirm both guard node choices. In
these cases, circuits could be rebuilt along an alternate path and
resumed without end-to-end circuit connectivity loss. This same
technique will also make things like ephemeral bridges (ie
Snowflake/Flashproxy) more usable, because bridge uptime will no longer
be so crucial to usability. It will also improve mobile usability by
allowing us to resume connections after mobile Tor apps are briefly
suspended, or if the user switches between cell and wifi networks.

Furthermore, I believe that conflux will also be useful against traffic
analysis and congestion attacks. Since the load balancing is dynamic and
hard to predict by an external observer, traffic correlation and website
traffic fingerprinting attacks will become harder, because the adversary
can no longer be sure what percentage of the traffic they have seen
(depending on their position and other potential concurrent activity).
Similarly, it should also help dampen congestion attacks, since traffic
will automatically shift away from a congested guard.


So those are the major two arguments on each side. There are some
additional minor arguments in favor of two guards (Circuit build timeout
works better with more guards because it can avoid the slower guard, and
a second guard will also prevent information leaks like
https://trac.torproject.org/projects/tor/ticket/24487), but for brevity
I decided to mention those only in passing.


In terms of deployment, the switch to two guards is an extremely simple
one. We should only need to set the NumEntryGuards=2 consensus
parameter, and all recent clients will switch over immediately.


What do we think?


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180328145713</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-28 14:57:13-0400</timestampReceived><subject>[tor-dev] Connections failed to default obfs4 bridges</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

In a recent connectivity test to the default obfs4 bridges [0], we found =
that we are unable to connect to 10 or so of them (from open networks, =
i.e., no local filtering).

Is this a feature, like some of them only respond to users in certain =
parts of the world? Or is this a bug, like the default list of bridges =
refers to old bridges that are no longer available? Or am I =
misunderstanding functionality here?

Thanks!
Rob

[0] =
https://gitweb.torproject.org/builders/tor-browser-bundle.git/tree/Bundle-=
Data/PTConfigs/bridge_prefs.js

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq7rUkACgkQnFIMfTqQ
qoRzKQ//TzR/AWou3XYAFWz6J5RpAf7z4o2mP+6xQb5BYcd0vPTDZYS5SG84jBQ+
fuWeJMG8y2oxq0258aZi6QIWSz0Im/dmkq3IcvUADdg57yVCQ4TbO7Wx6Dc0WqLH
F7UsOLtAVjInjzH4wOiKIlDjo5gqxKeqjjoEFf2I26jGSo/n4CgKCPPeiAJpe3Pu
LGEaj5o8pYvUtaJGqKwLtUjTK9WI7i9RLDJYVWqYZsEvj+XYfyYC0D1XW1TvELs4
s3jIJOcuQ+st03C6SVLFJIYiuC8Zya8MB1JD/8Vm74Mhk9eedHzzkZswMlshFWyJ
+bKte9hHm5fU/fruIS0fW7KR8wnjcJcTTPEYlZ8eHw70zN0BIfSd7irQYP/Qc2M+
KYr598vZChNsbtdxKVywmLmCLTNTQBzsBAZR6WLERbdzu4KOLubwx2icFv61E6wS
Sk4kQmFvmrCs7hRW0MV0J3jzgNKkKWJqCmmKi43bU5Qoew6RfDJEPbWmwU2D5XXx
QJ+1KS17RV0cYf1JGb3ixkX+hhCoUC8VX0+jYCjXNPVX4YmaLZ4MV11ldsmBcHE+
nf8CxD2HLFysMwz3kyogAbYzLO7qn8gsExhb60+VKLTFrqRQWO6RcOW+jJXRFCTd
i6fv0JjwVLdXruQbt6cxoCe7bSYgHD58MxDxLICVN1h77VHbdho=
=bFVS
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180323231847</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-23 23:18:47-0400</timestampReceived><subject>[tor-dev] The case for Tor-over-QUIC</subject><body>

[Attachment #2 (multipart/signed)]


In Rome, I held a session about network protocol upgrades. My intent was
to cover the switch to two guards, conflux, datagram transports, and
QUIC. We ended up touching only briefly on everything but QUIC, but we
went into enough depth on QUIC itself that it was a worthwhile and very
productive session.

Our notes are here:
https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/FutureTorNetworkProtocolUpgrades


I wanted to give a bit of background and some historical perspective
about datagram transports for Tor, as well as explain those notes in
long form, to get everybody on the same page about this idea. With
the forthcoming IETF standard ratification of QUIC along with several
solid reference implementations (canonical list:
https://github.com/quicwg/base-drafts/wiki/Implementations), I believe
we are close to the point where we can finally put together a plan (and
a funding proposal) to undertake this work.

Consider this mail a pre-proposal to temperature check and solicit early
feedback about a Tor-over-QUIC deployment, before we invest the effort
to deep dive into the framing, protocol, and implementation details that
will be necessary for a full proposal.


# Historical Background

So, first: Tor has been considering UDP transports for a long time.
There have been a series of research papers on the topic, dating back to
Proposal 100 -- the very first Tor proposal:
https://gitweb.torproject.org/torspec.git/tree/proposals/100-tor-spec-udp.txt

That proposal only examines adding an unreliable DTLS link between
relays, to enable transmission of unreliable (UDP) traffic end-to-end.
Despite being marked as Dead, it is a good conceptual starting point,
because it examines the relay-to-relay link crypto properties we need
from a datagram layer and has some good comments at the bottom.

However, adding the ability to simply carry UDP is not sufficient. What
we have always really wanted is to transition the network to some form
of end-to-end drop-based reliable congestion and flow control. There are
numerous benefits from such a transition.

Drop-signaled end-to-end congestion control means that instead of having
to maintain arbitrary queues at relays (to make room for Tor's fixed
SENDME window sizes for every single Tor circuit -- which as we have
seen does not scale and is vulnerabe to DoS and OOM attacks), we can
instead use a global fixed-length queue at each relay, and have each
relay simply drop packets when this queue is full. This behavior mirrors
how the internet works, and will not only put an upper bound on the
end-to-end queuing latency of the Tor network, but it will also allow us
to better ensure fairness, eliminate OOM conditions, and mitigate DoS
and congestion attacks. QUIC's stream management and byte-acked teardown
mechanisms will also eliminate a class of sidechannel issues in Tor
where an adversary gets to send ignored data on invalid and/or recently
closed streams: https://trac.torproject.org/projects/tor/ticket/25573

Furthermore, the switch to a secure datagram link protocol will
eliminate RST spamming attacks, where an adversary spoofs RSTs to/from
relay IP addresses to tear down our TLS links to gain information from
the resulting circuit failures and retries across the network.

Prior to the advent of QUIC, we studied many options for achieving
end-to-end congestion control, but have found all of them to be lacking
in one way or another. In 2011, Steven Murdoch did a literature review
of these approaches:
https://research.torproject.org/techreports/datagram-comparison-2011-11-07.pdf

Section 4 of that review is the most useful thing to skim -- it explains
why we found each of the end-to-end transport modes available at the
time to be either insufficient for Tor's use, or encumbered by licensing
or engineering incompatibilities.


# QUIC Overview

QUIC, however, is different. It basically serves as a complete drop-in
replacement for Tor's n:1 streams-on-circuit connection model. QUIC has
a connection layer, which corresponds to Tor's circuit concept, and a
framing layer, which supports multiplexing for multiple reliable streams
inside a single connection (corresponding to Tor's streams).

Each QUIC connection provides an outer layer of drop-based congestion
control. Unlike latency-based congestion control like bittorrent's utp,
which was designed to compensate for poor queuing management at edge
routers (as well as yield to TCP flows), QUIC's drop-based congestion
control is designed to find the common bottleneck anywhere on the
connection's path, and use packet drops from that queue to signal
congestion and ensure fairness among connections at that bottleneck
point. QUIC also provides optimizations to handle higher latency and
drop-heavy links (SACK, SACK ranges, early retransmit, reordering
tolerance, RTT estimates):
https://quicwg.github.io/base-drafts/draft-ietf-quic-recovery.html

Additionally, QUIC provides flow control at the connection level, as
well as at the individual stream level. This is analogous to Tor's flow
control model, but unlike Tor, QUIC implementations can adjust these
window sizes automatically based on RTT measurements and congestion
feedback:
https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-3.4
https://datatracker.ietf.org/doc/html/draft-ietf-quic-transport#section-11
https://docs.google.com/document/d/1F2YfdDXKpy20WVKJueEf4abn_LVZHhMUMS5gX6Pgjl4

It is perhaps no small coincidence that QUIC's architecture fits so
perfectly into Tor's circuit model. While at an IETF meeting years ago,
an attendee quietly whispered in my ear, "You know, we're designing IETF
QUIC with Tor-like networks in mind." I always love me a good prospiracy
(https://www.urbandictionary.com/define.php?term=prospiracy ;).


# Using QUIC in Tor

While QUIC does indeed solve a great many problems for Tor out of the
box, the path to Tor-over-QUIC requires that we make a few design and
engineering decisions specific to Tor.

There are two research implementations that study using Tor-over-QUIC:
Quux and QuTor. Quux was implemented by wrapping Chromium's C++ QUIC
implementation in C bindings:
https://www.benthamsgaze.org/2016/09/29/quux-a-quic-un-multiplexing-of-the-tor-relay-transport/
 https://www.benthamsgaze.org/wp-content/uploads/2016/09/393617_Alastair_Clark_aclark_2360661_860598830.pdf


QuTor is unfortunately paywalled at researchgate, so it is hard for me
to tell what they did:
https://www.researchgate.net/profile/Raik_Aissaoui/publication/292392094_QUTor_QUIC-ba \
sed_Transport_Architecture_for_Anonymous_Communication_Overlay_Networks/links/56ae170008ae43a3980e6890.pdf?origin=publication_list


Unfortunately, the Quux implementation appears to use QUIC at a
suboptimal position -- they replace Tor's TLS connections with QUIC, and
use QUIC streams in place of Tor's circuit ID -- but only between
relays. This means that it does not benefit from QUIC's end-to-end
congestion control for the entire path of the circuit. Such a design
will not solve the queuing and associated OOM problems at Tor relays,
since relays would be unable to drop cells to signal backpressure to
endpoints. Drops will instead block every circuit on a connection
between relays, and even then, due to end-to-end reliability, relays
will still need to queue without bound, subject to Tor's current (and
inadequate) flow control.

The optimal design is to use QUIC end-to-end. (Based on the researchgate
abstract, it looks like this might be what QuTor did, but it is hard to
tell.) Instead of replacing TLS with QUIC, we should use an unreliable
link encryption protocol between relays (such as DTLS), and replace
Tor's circuits with QUIC connections. In this design, Tor applications
connect to the local SOCKS port using TCP, and the tor client converts
it to a QUIC stream on a QUIC connection-circuit that runs all the way
to the exit or onion service, which then will convert the stream back to
TCP. The exit/service keeps buffering to a minimum by using QUIC
pushback on the Tor side, and TCP pushback on the server side.

While IETF QUIC provides its own crypto layer based on TLS 1.3, we won't
really need this encryption. Instead, we will layer QUIC inside of Tor's
layered onion encryption, with an ntor handshake to each hop in the
path.


# QUIC Deployment Considerations

Past the above high-level decision of how to use QUIC, a handful of
deployment considerations remain.

## Implementation

As mentioned previously, there are a growing number of QUIC
implementations out there, in several languages, with varying degrees of
IETF compatibility:
https://github.com/quicwg/base-drafts/wiki/Implementations

For our purposes, the most interesting ones are ngtcp2 (native C
implementation, BoringSSL, MIT licensed), picoquic (C, MIT license), and
mozquic (C++ with C bindings, NSS, MPL licensed). The QUIC in Chromium
is not IETF compliant, and is C++ with no C bindings. Sadly Rust
implementations of QUIC are not complete. Google does also maintain a Go
QUIC, which is complete. This suggests that experimental designs using
one of the golang Tor implementations might be worthwhile.

I'm told that the IETF hopes to finalize the QUIC standard within the
year.

## Framing

QUIC actually differentiates between connection-level packet sizes and
frame sizes. If we want to preserve Tor's wire behavior, we will want to
enforce a one-frame-per-packet policy from our QUIC library, and use
QUIC's padding frames to make packet sizes uniform.

## Upgrade Path

The upgrade path to QUIC will require some thorough thinking -- if all
relays on a path don't yet support datagram links, should we embed QUIC
inside an opaque RELAY cell type, or should wait for a flag day to
switch over once sufficient relays have upgraded? Embedding QUIC in
opaque RELAY cells seems like the natural choice, but will require
additional engineering considerations.

Additionally, a small and declining percentage of networks currently
block all UDP other than DNS. At last measurement, the rate of QUIC
failure was below 5%. However, like Google, we will likely want to
retain the ability to fall back to TLS over TCP for these situations.

## Signaling

Because we need to transition to unreliable relay links to get the most
out of QUIC, we will need to figure out how to handle circuit setup --
there is currently no mechanism to ensure reliability for onionskins in
Tor, since this is provided by TLS today. The simplest solution is to
retain TLS between relays to transmit circuit extend cells out-of-band.
Padding could be used to obscure timing information of this signaling.

The alternative would be to implement some onionskin-level acking
between relays, so that the datagram transport could be used for all
traffic. However, since our deployment path will likely involve
migration from TCP anyway, and since a small (and shrinking) percentage
of networks simply block all non-DNS traffic, we will likely want to
retain TCP connections for some time, making out-of-band signaling a
natural first choice.

## Native UDP Support

Unfortunately, during the standardization process, the IETF QUIC decided
to drop support for unreliable datagram streams inside the QUIC
connection, to simplify the layering of their implementation. However,
because we will still need to layer QUIC inside of an onion layer, we
can use that layer to carry either QUIC or UDP (at the expense of an
additional field to differentiate this).


# QUIC Research Questions

A couple areas of open research into how QUIC will behave in a Tor
deployment remain. It is my belief that while these areas are worth
further study, they do not represent blockers to QUIC, as a naive
deployment of QUIC will substantially outperform our current (lack of)
congestion and poor flow control.

## End-to-end Congestion Control Study

Unfortunately, it appears that the Quux QUIC paper studied QUIC at the
wrong position - between relays, and the QuTor implementation is
unclear. This means that it may still be an open question as to if
QUIC's congestion control algorithms will behave optimally in a Tor-like
network under heavy load.

However, Google has conducted extensive internet-scale research into the
congestion control algorithm, which very likely covers enough networks
with Tor-like latency and drop characteristics. Because of this, I do
not expect us to have to do a lot of tuning of their congestion control
here, but it is worth investigating.

## Queue Management

Fairness among flows in drop-based congestion control is heavily
influenced by how the queue is managed, and particularly by the decision
of which packet to drop when the queue is full. Modern favored
algorithms involve probabilistic early dropping from the middle of the
queue. The most popular approaches are the adaptive variants of RED and
Blue:
https://en.wikipedia.org/wiki/Random_early_detection
https://en.wikipedia.org/wiki/Blue_(queue_management_algorithm)

The simplest possible queue management design would be to set Tor's
queues to 0, and allow the OS kernel or upstream router to apply its
drop strategy. While this will be sufficient to ensure backpressure under
congestion, it is not optimal for fairness.

To enforce fairness, Tor would want to take information about QUIC
connection IDs into account when dropping packets, similar to what is
done with circuit ids by EWMA currently. This information will be
unavailable to the kernel and upstream routers, due to the DTLS link
encryption that will conceal the multiplexing of QUIC connections on
connections to relays. Moreover, ensuring that sufficient queuing
happens inside the Tor daemon (as opposed to the kernel) will require an
aggressive socket-reading strategy. Tor's single-threaded nature will
make this difficult -- to ensure that queuing happens inside the Tor
daemon, packets must be continuously read from the kernel with minimal
processing delay or delay from other events. Even in this case,
optimality will still depend upon the bottleneck being Tor, and not in
the kernel or in an upstream internet router. Thus, optimal queue
management in Tor for QUIC remains an open research and engineering
problem.

(However, this is not really a deployment blocker. The deployment of
QUIC on the internet has similar shortcomings -- the vast majority of
internet routers also do not take QUIC connection ID into account when
making UDP drop decisions, and yet the protocol still outperforms TCP in
link utilization and drop recovery).

## Anonymity

Since a Tor with bounded-length queues will have more predictable
latency characteristics, a faster Tor based on QUIC may be more
vulnerable to inferences about location that can be made by connection
latency. Particularly, middle nodes may be able to tell how far the
client is from the guard by measuring RTT. One solution to this may be
adding delay in cases where RTT could be inferred. Another solution is
to have two middle nodes for four hop paths, so that it is no longer
clear which middle node you are in a QUIC circuit.

There may be other attacks that come out of using end-to-end congestion
control, but I am personally having a hard time coming up with cases
where such side channels and resource starvation conditions could be any
worse than those that already exist, or are unique to the OOM and DoS
conditions currently possible due to Tor's lack of congestion control.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180319012258</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2018-03-19 01:22:58-0400</timestampReceived><subject>[tor-dev] Scaling bandwidth scanner results</subject><body>

I've made some good progress on a bare bones, doesn't-do-more-than-it-
has-to bandwidth scanner. It can generate output just like torflow[0].

We need to decide on how to scale results that come from different
measurement systems. The simple, don't-make-it-harder-than-it-has-to-be 
idea is (quote [1], see [2]):

&gt; Express each weight as a proportion of the total, and multiply by
some agreed total (e.g. for the current network it would have to be the
total of the consensus weight, but within some limited range to avoid
unbounded growth).  

So we need to:

1. Decide on a large total.

I suggest 50 million to start the conversation (bike shedding) based on
that being close to the current total consensus weight so relay
operators won't see a large (though inconsequential) change.

2. Have all the torflow operators switch to this new method.

Ouch. I wouldn't mind being told I'm wrong about this step being
necessary. 

3. Find all the places that hint at consensus weight being directly
comparable to bandwidth (such as [3]) and change the wording.

Matt

[0]: https://paste.debian.net/1015409/
[1]: https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rom
e/Notes/BandwidthAuthorityRequirements#Scaling
[2]: https://trac.torproject.org/projects/tor/ticket/25459
[3]: https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2290
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180319014944</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-03-19 01:49:44-0400</timestampReceived><subject>Re: [tor-dev] Scaling bandwidth scanner results</subject><body>

After #1 is decided, we can convert past bwauth data, can't we?  If
it's helpful I can (at some point) compare your data against
historical (converted) data as I've been doing:
https://tomrittervg.github.io/bwauth-tools/

-tom

On 18 March 2018 at 20:22, Matt Traudt &lt;pastly@torproject.org&gt; wrote:
&gt; I've made some good progress on a bare bones, doesn't-do-more-than-it-
&gt; has-to bandwidth scanner. It can generate output just like torflow[0].
&gt;
&gt; We need to decide on how to scale results that come from different
&gt; measurement systems. The simple, don't-make-it-harder-than-it-has-to-be
&gt; idea is (quote [1], see [2]):
&gt;
&gt;&gt; Express each weight as a proportion of the total, and multiply by
&gt; some agreed total (e.g. for the current network it would have to be the
&gt; total of the consensus weight, but within some limited range to avoid
&gt; unbounded growth).
&gt;
&gt; So we need to:
&gt;
&gt; 1. Decide on a large total.
&gt;
&gt; I suggest 50 million to start the conversation (bike shedding) based on
&gt; that being close to the current total consensus weight so relay
&gt; operators won't see a large (though inconsequential) change.
&gt;
&gt; 2. Have all the torflow operators switch to this new method.
&gt;
&gt; Ouch. I wouldn't mind being told I'm wrong about this step being
&gt; necessary.
&gt;
&gt; 3. Find all the places that hint at consensus weight being directly
&gt; comparable to bandwidth (such as [3]) and change the wording.
&gt;
&gt; Matt
&gt;
&gt; [0]: https://paste.debian.net/1015409/
&gt; [1]: https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rom
&gt; e/Notes/BandwidthAuthorityRequirements#Scaling
&gt; [2]: https://trac.torproject.org/projects/tor/ticket/25459
&gt; [3]: https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2290
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180326095246</emailId><senderName>Fabio Pietrosanti - Lists</senderName><senderEmail>lists@infosecurity.ch</senderEmail><timestampReceived>2018-03-26 09:52:46-0400</timestampReceived><subject>Re: [tor-dev] The case for Tor-over-QUIC</subject><body>

I would like to add and advocate that, whatever a network protocol
upgrade will be done, Tor should starts supporting NAT traversal for
it's relay, enabling users to contribute also without a "public ip
address" .

Enabling NATted users to become Tor Relay would increase the baseline of
contributors.


Protocols for NAT Traversal are used since +10 years in VoIP network
stacks successfully:

ICE - Internet Connectivity Establishment

https://www.ietfjournal.org/interactive-connectivity-establishment/

NAT Traversal Practices for Client-Server SIP  

https://tools.ietf.org/html/rfc6314

Fabio


On 24/03/2018 00:18, Mike Perry wrote:
&gt; In Rome, I held a session about network protocol upgrades. My intent was
&gt; to cover the switch to two guards, conflux, datagram transports, and
&gt; QUIC. We ended up touching only briefly on everything but QUIC, but we
&gt; went into enough depth on QUIC itself that it was a worthwhile and very
&gt; productive session.
&gt; 
&gt; Our notes are here:
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/FutureTorNetworkProtocolUpgrades
&gt;  
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180327163733</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-27 16:37:33-0400</timestampReceived><subject>Re: [tor-dev] The case for Tor-over-QUIC</subject><body>

[Attachment #2 (multipart/signed)]


Thanks for the detailed write-up Mike! Theoretically, moving to QUIC seems great; it \
seems to solve a lot of problems and has enough advantages that we could just run \
with it.

I'll reiterate some of my primary concerns that I gave in Rome:

 - I think it would be a mistake to push forward with such a significant change to \
Tor's transport layer without significant testing and experimentation. We have tools \
that allow us to do full-network-sized experiments (Shadow), and we have interested \
researchers that want to help (including me).

 - However, I am much less optimistic than you that it will just work and instantly \
improve performance. You mention that Google has done lots of tests, but my guess is \
they test in environments that look like the Internet - i.e., fast core and slow \
edges. Do we know how it would perform when the path contains additional 6 edges \
sandwiching 3 potentially low bandwidth Tor relays? Tor is a significantly different \
environment than the Internet; for example, an end-to-end congestion signal in Tor \
will take orders of magnitude longer to reach the client than in traditional \
networks.

 - Because of the above, I'm not sure that an end-to-end design is the right way to \
go. As I mentioned, we have simulators and researchers, so we should be able to learn \
more and make a more informed decision before committing to a design that will be \
difficult to change later.

 - We should be sure to pay close attention to how this will affect emerging networks \
and applications, e.g., mobile devices and onion services.

 - The DoS attacks will change form, but I don't think they will disappear. I think \
it would be wise to understand how DoS might change, which is much easier once we \
have a design to analyze. Your summary helps with that.

I think it would be worth including R&amp;D effort to investigate these issues in any \
proposal that gets written.

Cheers,
Rob

&gt; On Mar 23, 2018, at 7:18 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; In Rome, I held a session about network protocol upgrades. My intent was
&gt; to cover the switch to two guards, conflux, datagram transports, and
&gt; QUIC. We ended up touching only briefly on everything but QUIC, but we
&gt; went into enough depth on QUIC itself that it was a worthwhile and very
&gt; productive session.
&gt; 
&gt; Our notes are here:
&gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/FutureTorNetworkProtocolUpgrades
&gt;  
&gt; I wanted to give a bit of background and some historical perspective
&gt; about datagram transports for Tor, as well as explain those notes in
&gt; long form, to get everybody on the same page about this idea. With
&gt; the forthcoming IETF standard ratification of QUIC along with several
&gt; solid reference implementations (canonical list:
&gt; https://github.com/quicwg/base-drafts/wiki/Implementations), I believe
&gt; we are close to the point where we can finally put together a plan (and
&gt; a funding proposal) to undertake this work.
&gt; 
&gt; Consider this mail a pre-proposal to temperature check and solicit early
&gt; feedback about a Tor-over-QUIC deployment, before we invest the effort
&gt; to deep dive into the framing, protocol, and implementation details that
&gt; will be necessary for a full proposal.


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq6c00ACgkQnFIMfTqQ
qoQ2cBAAg8C/uzMw/XvCcE4/YAkUjFuvnFnyF993KvKgiwLZE4QR4qMZmcYJ79IG
TVNGj3jVwUNVqBKbZizusBGaJy83erTmw4wTPp8c3c5Ox59tYarFFVpyV/vToN1f
uNQzlm9Fd7vNKIQWnwsqU0OByc/PJX1h7Ekt3ScCb+P8tYKmTw7NDZ6wNKl2rL/K
5WnRdIADCZEEXTsCdZ9HnmwFZJleJkHi0BL1BxjDKo5P5WqqxFMjfG5Sr4yUNCI+
WoP4xLY5RC+MQlQNBU18gJ6kquzNMRIXIAypELs/FWUOvbGzWRAajoCZfaSnPJ3s
TAwsmhN+RDwh5MSHiM2KXfGOvp+W5nxjFkITg+iSN+NmczK7SwXwZuMPYR9AM6h9
zvgFPeu+5J9rnfup5v4ByqjEGkeyem4fTGSX7FxpD5KNF+q4KysYbHEQTXdAYYTx
IrUhPvik+pLcwLSFrE4RnhIb9KjUIBkqfX16RSq4au3K0JNjcxNqUPRl+Zyh49EO
yYmKFjgyv2cFBr1DXLKzH2cG95fsWrovRk+50L9rBNNAyiS8EAJLi2yvYjdUE+YD
JjN67PVhQRyYqArk5PmpuROhIrbnKpthGP9WUbD+od3REwz3g48QmoLo7STIsqTA
DjLz0AFdQ6gBLm6DCEGZuklNW67oIVWd3EPDyOByQkVc0QdjNVI=
=wtBk
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180328162317</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2018-03-28 16:23:17-0400</timestampReceived><subject>Re: [tor-dev] Connections failed to default obfs4 bridges</subject><body>

On Wed, Mar 28, 2018 at 10:57:13AM -0400, Rob Jansen wrote:
&gt; In a recent connectivity test to the default obfs4 bridges [0], we found that we \
&gt; are unable to connect to 10 or so of them (from open networks, i.e., no local \
&gt; filtering). 
&gt; Is this a feature, like some of them only respond to users in certain parts of the \
&gt; world? Or is this a bug, like the default list of bridges refers to old bridges \
&gt; that are no longer available? Or am I misunderstanding functionality here?

Do you mean 10 distinct IP addresses, or 10 ports on a few IP addresses?
Not all the IP addresses in the list are distinct.

Even while Lynn Tsai, Qi Zhong, and I were closely monitoring default
bridge reachability, a lot of the default bridges were often offline,
because of reboots, iptables problems, etc. See for example the "Orbot
bridges" strip of Figure 5.2 here; the gray and red areas that precede
blocking are where the bridge was simply offline:
https://www.bamsoftware.com/papers/thesis/fifield-thesis.pdf#page=43

We have a lot of past measurements of default bridges. The rows with
site="eecs-login" are from the U.S.
https://www.bamsoftware.com/proxy-probe/ (download the repo, not
probe.csv.gz, which isn't as recent)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180328181410</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-28 18:14:10-0400</timestampReceived><subject>Re: [tor-dev] Connections failed to default obfs4 bridges</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On Mar 28, 2018, at 12:23 PM, David Fifield &lt;david@bamsoftware.com&gt; wrote:
&gt; 
&gt; On Wed, Mar 28, 2018 at 10:57:13AM -0400, Rob Jansen wrote:
&gt; &gt; In a recent connectivity test to the default obfs4 bridges [0], we found that we \
&gt; &gt; are unable to connect to 10 or so of them (from open networks, i.e., no local \
&gt; &gt; filtering). 
&gt; &gt; Is this a feature, like some of them only respond to users in certain parts of \
&gt; &gt; the world? Or is this a bug, like the default list of bridges refers to old \
&gt; &gt; bridges that are no longer available? Or am I misunderstanding functionality \
&gt; &gt; here?
&gt; 
&gt; Do you mean 10 distinct IP addresses, or 10 ports on a few IP addresses?
&gt; Not all the IP addresses in the list are distinct.
&gt; 

Turns out this was 10 ports on the same IP address. And we did the measurements back \
in December, so they are already a bit dated.

&gt; Even while Lynn Tsai, Qi Zhong, and I were closely monitoring default
&gt; bridge reachability, a lot of the default bridges were often offline,
&gt; because of reboots, iptables problems, etc. See for example the "Orbot
&gt; bridges" strip of Figure 5.2 here; the gray and red areas that precede
&gt; blocking are where the bridge was simply offline:
&gt; https://www.bamsoftware.com/papers/thesis/fifield-thesis.pdf#page=43
&gt; 
&gt; We have a lot of past measurements of default bridges. The rows with
&gt; site="eecs-login" are from the U.S.
&gt; https://www.bamsoftware.com/proxy-probe/ (download the repo, not
&gt; probe.csv.gz, which isn't as recent)

Ahh, this is great, thanks for sending!

Best,
Rob


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq723IACgkQnFIMfTqQ
qoQgHRAAguEE5ptR7ea3wzt8kjgt8KEPchQ5qErJexOk/ZUKczcMWqlf0gxW70AN
0JXQVRs4jO1aJ+4mFvSqM7DxgsQLxZstrVNGnGYO9c4aXHtSiDYG7wsfuSsgVcL9
NMJzZbqCCRMdm9cVSAjKl0wkVUga5ed3yWPwY9hcyMqzLVfBnYalRMRRR6LHp/jL
toF6yTJ3IjhY9TFrXrDGEoX3i65PFpbFKRF+nTg/iN08Z2vKsiPr7cz5wLMfUcBy
boKB2BSBO+GOrvo299K9vcJG9b6FUmsG/U9KWlD9GQO5YWW9KGZvfLVBAgHEWvLH
R6+U/kOFXIT+Pvw4yw4uevDw9QTlWUmH7Vn8juzIkVOx5RTIKxs6dhDE7TRTy0JM
o3sYqhMM/bMIhjOwX3f+Tk4V/8HJE/SkUNa7CnkUrkXg8LkdfbI03WdHU6Cckg0t
FJTxIYxjowwvB3eWr4WsMzbffBOnmjDm6NCV63inaAfaDkgiQzDeGugNUY1KB3KA
PoZLAhBRhAL/NQJZR+EPScJj2cgYng3DpVvZRS/oLW1REQ8WSB5qRqQqadrzyEbH
KLeGxW+Og0gjKB7hTCLiKvYQfwLi46vB1GuwK7tJ82G5E+/zf4YcPb8/qn+UneYU
ydVifY318a+KJnO8FgicYvJlv3HXSFDRXlIIhHP63oPnFzJZGyY=
=MPIx
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180321100539</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2018-03-21 10:05:39-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

Mike Perry:
&gt; 2. Guard fingerprintability is lower with one guard

&gt; An adversary who is watching netflow connection records for an entire
&gt; area is able to track users as they move from internet connection to
&gt; internet connection through the degree of uniqueness of their guard
&gt; choice. There is much less information in two guards than three, but
&gt; still significantly more than with one guard:
&gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:3

&gt; But, even with one guard, if there are not very many Tor users in your
&gt; area, you still may be trackable. "Guard bucket" designs are discussed
&gt; on the blog post and in related tickets, but they are complicated and
&gt; involve tricky tradeoffs (see
&gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:4). The
&gt; best solution that I see to this is to make Tor maintain separate guard
&gt; choices depending on the current SSID, BSSID, or default gateway router
&gt; MAC from ARP. The default gateway ARP MAC is probably easiest for us to
&gt; implement cross-platform and stable across wifi to ethernet.

FWIW we at Tails have started working on this topic a couple years
ago. We came up with a (far from perfect) plan that is documented
there:  https://tails.boum.org/blueprint/persistent_Tor_state/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180321110455</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-21 11:04:55-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

Thank you for this great summary :)


On 2018-03-20 04:57, Mike Perry wrote:
&gt; &lt;skip&gt;
&gt; Arguments for staying with just one guard:
&gt;
&gt; 1. One guard means less observability.
&gt;
&gt; As Roger put it in the above blog post: "I think the analysis of the
&gt; network-level adversary in Aaron's paper is the strongest argument for
&gt; restricting the variety of Internet paths that traffic takes between the
&gt; Tor client and the Tor network."
&gt; http://freehaven.net/anonbib/#ccs2013-usersrouted

Regarding the question of observability, I would take the opportunity to 
point out that we have a proposal discussing that question on the 
mailing list, which changes the bandwidth-weights equations and 
constraints to achieve a balanced network with an adversary considered 
in the process (which is not currently).

Prop: 
https://github.com/frochet/wf_proposal/blob/master/waterfilling-balancing-with-max-diversity.txt
Paper: https://www.freehaven.net/anonbib/#waterfilling-pets2017

This is somewhat linked to this "what would be a good number of entry 
guards" question since applying our technique increases path diversity 
(at network-wide scale, for whatever adversary type chosen), and reduces 
the efficiency of the hoovering adversary model trying to get as much as 
he can. This would argue is favor of 2 entry guards, because the 
situation is not as bad as we think. From discussion I had with Aaron at 
the meeting, it clearly appears that the scheme needs also some IP 
prefix limits to avoid worst-case scenarios if this technique is used 
against a relay-adversary model (but again, nothing prevents us to use 
it against other threat models). So, a bit of work remains but not that 
much.

&gt; &lt;skip&gt;
&gt; Furthermore, I believe that conflux will also be useful against traffic
&gt; analysis and congestion attacks. Since the load balancing is dynamic and
&gt; hard to predict by an external observer, traffic correlation and website
&gt; traffic fingerprinting attacks will become harder, because the adversary
&gt; can no longer be sure what percentage of the traffic they have seen
&gt; (depending on their position and other potential concurrent activity).
&gt; Similarly, it should also help dampen congestion attacks, since traffic
&gt; will automatically shift away from a congested guard.

I am really enthusiast about multipath, either at the Tor level or even 
at the transport level: we discussed QUIC at the meeting, but 
MultipathQUIC could also be a long-term option now that we discuss more 
than 1 entry guard.

However, I would argue that it does not really help against traffic 
correlation. Our paper at pets18 exploits Tor's forward compatibility 
feature to design silent cheap, almost instantaneous and perfect active 
traffic confirmation that does not care about user traffic to succeed.

See Section 5, 
https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf

Maybe the real debate would be to discuss what's the major threat 
between active/passive attackers, and what do we care about? The 
question is, why should we care about hardening passive attacker's work 
when the active form is always as easy?
For website fingerprinting, it does seem to be interesting if the attack 
cannot link the two paths :)

Anyway, I believe the 2 guards's benefit outweighs the inconvenience, 
especially if we also integrate ideas such as Waterfilling :)

Best,
Florentin
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hello,&lt;/p&gt;
    &lt;p&gt;Thank you for this great summary :)&lt;br&gt;
    &lt;/p&gt;
    &lt;br&gt;
    &lt;div class="moz-cite-prefix"&gt;On 2018-03-20 04:57, Mike Perry wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite"
      cite="mid:20180320035718.GA1831@torproject.org"&gt;
      &lt;pre wrap=""&gt;&lt;skip&gt;
Arguments for staying with just one guard:

1. One guard means less observability.

As Roger put it in the above blog post: "I think the analysis of the
network-level adversary in Aaron's paper is the strongest argument for
restricting the variety of Internet paths that traffic takes between the
Tor client and the Tor network."
&lt;a class="moz-txt-link-freetext" \
href="http://freehaven.net/anonbib/#ccs2013-usersrouted"&gt;http://freehaven.net/anonbib/#ccs2013-usersrouted&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Regarding the question of observability, I would take the
    opportunity to point out that we have a proposal discussing that
    question on the mailing list, which changes the bandwidth-weights
    equations and constraints to achieve a balanced network with an
    adversary considered in the process (which is not currently).&lt;br&gt;
    &lt;br&gt;
    Prop:
&lt;a class="moz-txt-link-freetext" \
href="https://github.com/frochet/wf_proposal/blob/master/waterfilling-balancing-with-m \
ax-diversity.txt"&gt;https://github.com/frochet/wf_proposal/blob/master/waterfilling-balancing-with-max-diversity.txt&lt;/a&gt;&lt;br&gt;
  Paper: &lt;a class="moz-txt-link-freetext" \
href="https://www.freehaven.net/anonbib/#waterfilling-pets2017"&gt;https://www.freehaven.net/anonbib/#waterfilling-pets2017&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
    This is somewhat linked to this "what would be a good number of
    entry guards" question since applying our technique increases path
    diversity (at network-wide scale, for whatever adversary type
    chosen), and reduces the efficiency of the hoovering adversary model
    trying to get as much as he can. This would argue is favor of 2
    entry guards, because the situation is not as bad as we think. From
    discussion I had with Aaron at the meeting, it clearly appears that
    the scheme needs also some IP prefix limits to avoid worst-case
    scenarios if this technique is used against a relay-adversary model
    (but again, nothing prevents us to use it against other threat
    models). So, a bit of work remains but not that much.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:20180320035718.GA1831@torproject.org"&gt;
      &lt;pre wrap=""&gt;&lt;skip&gt;
Furthermore, I believe that conflux will also be useful against traffic
analysis and congestion attacks. Since the load balancing is dynamic and
hard to predict by an external observer, traffic correlation and website
traffic fingerprinting attacks will become harder, because the adversary
can no longer be sure what percentage of the traffic they have seen
(depending on their position and other potential concurrent activity).
Similarly, it should also help dampen congestion attacks, since traffic
will automatically shift away from a congested guard.
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    I am really enthusiast about multipath, either at the Tor level or
    even at the transport level: we discussed QUIC at the meeting, but
    MultipathQUIC could also be a long-term option now that we discuss
    more than 1 entry guard.&lt;br&gt;
    &lt;br&gt;
    However, I would argue that it does not really help against traffic
    correlation. Our paper at pets18 exploits Tor's forward
    compatibility feature to design silent cheap, almost instantaneous
    and perfect active traffic confirmation that does not care about
    user traffic to succeed.&lt;br&gt;
    &lt;br&gt;
    See Section 5,
    &lt;a class="moz-txt-link-freetext" \
href="https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf"&gt;https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
    Maybe the real debate would be to discuss what's the major threat
    between active/passive attackers, and what do we care about? The
    question is, why should we care about hardening passive attacker's
    work when the active form is always as easy?&lt;br&gt;
    For website fingerprinting, it does seem to be interesting if the
    attack cannot link the two paths :)&lt;br&gt;
    &lt;br&gt;
    Anyway, I believe the 2 guards's benefit outweighs the
    inconvenience, especially if we also integrate ideas such as
    Waterfilling :)&lt;br&gt;
    &lt;br&gt;
    Best,&lt;br&gt;
    Florentin&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:20180320035718.GA1831@torproject.org"&gt;
      &lt;pre wrap=""&gt;

&lt;/pre&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180322114636</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-03-22 11:46:36-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; [ text/plain ]
&gt; Back in 2014, Tor moved from three guard nodes to one guard node:
&gt; https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
&gt; https://trac.torproject.org/projects/tor/ticket/12206
&gt;
&gt; We made this change primarily to limit points of observability of entry
&gt; into the Tor network for clients and onion services, as well as to
&gt; reduce the ability of an adversary to track clients as they move from
&gt; one internet connection to another by their choice of guards.
&gt;
&gt; At the time, I was in favor of two entry guards but did not have a
&gt; strong preference, and we ended up choosing one guard. After seeing
&gt; various consequences of using only one entry guard, I think a much
&gt; stronger case can now be made for bumping back up to two.
&gt;

Hello Mike,

thanks for writing this post. Thinking about entry guards is extremely
important since guards and path selection is pretty much the whole
security of Tor.

However we should think hard here before flapping from one conf to
another.  In the grand scheme of things, I see the positives of moving
to two guards but also the positives of staying with one guard; I think
we need more data to decide what's best and for which threat models.

In general, the main argument for me to stay with one guard is to
minimize client exposure to guards over a period of time. If we choose
two guards instead of one, clients will expose themselves to double the
amount of guards over time (not to take into account flaky unreachable
guards). Perhaps we could compensate that by increasing the lifetime of
guards if we switch to two guards... I think simulations and graphs here
to show exposure of guards per number of guards would be useful, and we
have some of those already for prop247.

OTOH the main arguments for me to switch to two guards is not so much
security but performance improvements and reducing congestion of guard
nodes.

&gt; Roger suggested that I enumerate the pros and cons of this increase on
&gt; this mailing list, so we can discuss and consider this switch. So here
&gt; is my attempt at that list. Let's start with a more in-depth recap of
&gt; the one-guard arguments, along with some recent observations that change
&gt; things.
&gt;
&gt;
&gt; Arguments for staying with just one guard:
&gt;
&gt; 1. One guard means less observability.
&gt;
&gt; As Roger put it in the above blog post: "I think the analysis of the
&gt; network-level adversary in Aaron's paper is the strongest argument for
&gt; restricting the variety of Internet paths that traffic takes between the
&gt; Tor client and the Tor network."
&gt; http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt;
&gt; Unfortunately, we have since learned that Tor's path selection has the
&gt; effect of giving the adversary the ability to generate at least one
&gt; additional observation path. We first became aware of this in
&gt; https://trac.torproject.org/projects/tor/ticket/14917, where the change
&gt; to one guard allowed an adversary to discover your guard by choosing it
&gt; as a rendezvous point and observing the circuit failure. After the fix
&gt; for #14917, the onion service will build a connection to a second guard
&gt; that it keeps in reserve. By using this attack (as well as a similar but
&gt; more involved attack with unique exit policies and carefully chosen /16
&gt; exit node subnets), the adversary can force clients to be observed over
&gt; two paths whenever they like.
&gt;
&gt; So while we may get benefit for moving from three guards to two guards,
&gt; we don't get much (or any) benefit from moving to two guards to one
&gt; guard against an active adversary that either connects to onion
&gt; services, or serves content to clients and runs exits.
&gt;

Hmm, that's a fair point. However, the fact that this behavior exists
currently does not mean that it's the best we can do with what we have.

Example of what we can do to stop this bad behavior: instead of using
our second guard when our "exit" conflicts with our first guard like
this: [G2 -&gt; M1 -&gt; G1], we could instead make a 4-hop circuit as
follows: [G1 -&gt; M1 -&gt; M2 -&gt; G2]. This would stop us from using our
second guard and would hide the obvious signal you are worrying about.
(I see that dgoulet also suggested that in the ticket comment:7)

&gt; 2. Guard fingerprintability is lower with one guard
&gt;
&gt; An adversary who is watching netflow connection records for an entire
&gt; area is able to track users as they move from internet connection to
&gt; internet connection through the degree of uniqueness of their guard
&gt; choice. There is much less information in two guards than three, but
&gt; still significantly more than with one guard:
&gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:3
&gt;
&gt; But, even with one guard, if there are not very many Tor users in your
&gt; area, you still may be trackable. "Guard bucket" designs are discussed
&gt; on the blog post and in related tickets, but they are complicated and
&gt; involve tricky tradeoffs (see
&gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:4). The
&gt; best solution that I see to this is to make Tor maintain separate guard
&gt; choices depending on the current SSID, BSSID, or default gateway router
&gt; MAC from ARP. The default gateway ARP MAC is probably easiest for us to
&gt; implement cross-platform and stable across wifi to ethernet.
&gt;

Agreed. I don't think guard fingerprintability was ever a serious
argument for switching to a single guard node.

&gt;
&gt; Arguments in favor of switching to two entry guards:
&gt;
&gt; 1. One guard allows course-grained netflow confirmation attacks
&gt;
&gt; The counterargument based on #14917 above also has an additional
&gt; wrinkle: an adversary watching a suspect list of clients can easily
&gt; observe the "temporarily use a second guard" activity using just
&gt; connection-level ISP/AS netflow logs. To a large-scale netflow
&gt; adversary, the use of a second guard only when the guard is chosen as
&gt; the RP confirms not only guard choice, but the IP address of the onion
&gt; service itself.
&gt;

Devil's advocate: I'm not sure how big the suspect list we are thinking
about is, or what kind of threat models we are considering here, and I
think this matters quite a bit. Because if the suspect list is not big,
and the threat models allows the attacker to cause the victim to build
circuits, then the attacker could succeed even with simple traffic
signals (or shutting down the internet) and traffic monitoring.

Also, this whole point relies on our suboptimal fix to #14917. We could
improve the situation here by doing more advanced fix like the one
suggested above.

&gt; Again, similar attacks may be possible against exit activity via
&gt; cleverly crafted exit policies and /16 subnet choice. (Aside: if we
&gt; allow routers to join any family they like without reciprocation, this
&gt; attack becomes worse.)
&gt;
&gt; Having a dedicated second guard that is always in use will prevent the
&gt; creation and exclusive use of a new TLS connection just for this
&gt; request. Instead, the two TLS connections will both remain open and in
&gt; regular use as long as the client is active.
&gt;
&gt; 2. More than one guard allows us to deploy conflux.
&gt;
&gt; As mentioned in the blog post, moving to one guard prevents us from
&gt; deploying conflux -- a research design that improves Tor performance by
&gt; combining two or more circuits together at an exit node or rendezvous
&gt; point and load balancing between them:
&gt; https://www.cypherpunks.ca/~iang/pubs/conflux-pets.pdf
&gt;

I also like the conflux idea a lot but IIUC we are still very far away
from it being a reality, since the bridge from the research paper side
to the reality side is huge and unbuilt. Seems to me that toggling
NumEntryGuards from 1 to 2 is just a tiny part of the work required, and
something that could also be done after all the rest of the work gets done...

I don't see this as a major argument for switching to two guards, but
please correct me if I'm not right.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180322140743</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-03-22 14:07:43-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


On 22 Mar (13:46:36), George Kadianakis wrote:
&gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; 
&gt; &gt; [ text/plain ]
&gt; &gt; Back in 2014, Tor moved from three guard nodes to one guard node:
&gt; &gt; https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/12206
&gt; &gt;
&gt; &gt; We made this change primarily to limit points of observability of entry
&gt; &gt; into the Tor network for clients and onion services, as well as to
&gt; &gt; reduce the ability of an adversary to track clients as they move from
&gt; &gt; one internet connection to another by their choice of guards.
&gt; &gt;
&gt; &gt; At the time, I was in favor of two entry guards but did not have a
&gt; &gt; strong preference, and we ended up choosing one guard. After seeing
&gt; &gt; various consequences of using only one entry guard, I think a much
&gt; &gt; stronger case can now be made for bumping back up to two.
&gt; &gt;
&gt; 
&gt; Hello Mike,
&gt; 
&gt; thanks for writing this post. Thinking about entry guards is extremely
&gt; important since guards and path selection is pretty much the whole
&gt; security of Tor.
&gt; 
&gt; However we should think hard here before flapping from one conf to
&gt; another.  In the grand scheme of things, I see the positives of moving
&gt; to two guards but also the positives of staying with one guard; I think
&gt; we need more data to decide what's best and for which threat models.
&gt; 
&gt; In general, the main argument for me to stay with one guard is to
&gt; minimize client exposure to guards over a period of time. If we choose
&gt; two guards instead of one, clients will expose themselves to double the
&gt; amount of guards over time (not to take into account flaky unreachable
&gt; guards). Perhaps we could compensate that by increasing the lifetime of
&gt; guards if we switch to two guards... I think simulations and graphs here
&gt; to show exposure of guards per number of guards would be useful, and we
&gt; have some of those already for prop247.
&gt; 
&gt; OTOH the main arguments for me to switch to two guards is not so much
&gt; security but performance improvements and reducing congestion of guard
&gt; nodes.
&gt; 
&gt; &gt; Roger suggested that I enumerate the pros and cons of this increase on
&gt; &gt; this mailing list, so we can discuss and consider this switch. So here
&gt; &gt; is my attempt at that list. Let's start with a more in-depth recap of
&gt; &gt; the one-guard arguments, along with some recent observations that change
&gt; &gt; things.
&gt; &gt;
&gt; &gt;
&gt; &gt; Arguments for staying with just one guard:
&gt; &gt;
&gt; &gt; 1. One guard means less observability.
&gt; &gt;
&gt; &gt; As Roger put it in the above blog post: "I think the analysis of the
&gt; &gt; network-level adversary in Aaron's paper is the strongest argument for
&gt; &gt; restricting the variety of Internet paths that traffic takes between the
&gt; &gt; Tor client and the Tor network."
&gt; &gt; http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt; &gt;
&gt; &gt; Unfortunately, we have since learned that Tor's path selection has the
&gt; &gt; effect of giving the adversary the ability to generate at least one
&gt; &gt; additional observation path. We first became aware of this in
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/14917, where the change
&gt; &gt; to one guard allowed an adversary to discover your guard by choosing it
&gt; &gt; as a rendezvous point and observing the circuit failure. After the fix
&gt; &gt; for #14917, the onion service will build a connection to a second guard
&gt; &gt; that it keeps in reserve. By using this attack (as well as a similar but
&gt; &gt; more involved attack with unique exit policies and carefully chosen /16
&gt; &gt; exit node subnets), the adversary can force clients to be observed over
&gt; &gt; two paths whenever they like.
&gt; &gt;
&gt; &gt; So while we may get benefit for moving from three guards to two guards,
&gt; &gt; we don't get much (or any) benefit from moving to two guards to one
&gt; &gt; guard against an active adversary that either connects to onion
&gt; &gt; services, or serves content to clients and runs exits.
&gt; &gt;
&gt; 
&gt; Hmm, that's a fair point. However, the fact that this behavior exists
&gt; currently does not mean that it's the best we can do with what we have.
&gt; 
&gt; Example of what we can do to stop this bad behavior: instead of using
&gt; our second guard when our "exit" conflicts with our first guard like
&gt; this: [G2 -&gt; M1 -&gt; G1], we could instead make a 4-hop circuit as
&gt; follows: [G1 -&gt; M1 -&gt; M2 -&gt; G2]. This would stop us from using our
&gt; second guard and would hide the obvious signal you are worrying about.
&gt; (I see that dgoulet also suggested that in the ticket comment:7)

For hidden service, I think you meant [G1 -&gt; M1 -&gt; M2 -&gt; *G1*] considering
that G1 is the chosen RP. But also, I think my comment was very wrong 3 years
ago, a service already builds a 4 hops to the RP so it should then be this in
your example?: [G1 -&gt; M1 -&gt; M2 -&gt; M3 -&gt; G1]

This makes it VERY easy for a Guard node to learn that it is the guard of a
specific .onion but considering an evil guard of a .onion, there are other
effective methods to learn it so I'm not convinced that this path will be
worst, just maybe bad for performance.

But also this would violate tor protocol of "never having the same hop in the
path" so overall making an exeception for this makes me worry a bit :S.

I do agree with Mike on this one that we don't get benefit here from 1 to 2
because the code right now is basically a two guard system where the second
guard is used rarely. Not only that but an attacker can force you to use that
second Guard at will.

&gt; 
&gt; &gt; 2. Guard fingerprintability is lower with one guard
&gt; &gt;
&gt; &gt; An adversary who is watching netflow connection records for an entire
&gt; &gt; area is able to track users as they move from internet connection to
&gt; &gt; internet connection through the degree of uniqueness of their guard
&gt; &gt; choice. There is much less information in two guards than three, but
&gt; &gt; still significantly more than with one guard:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:3
&gt; &gt;
&gt; &gt; But, even with one guard, if there are not very many Tor users in your
&gt; &gt; area, you still may be trackable. "Guard bucket" designs are discussed
&gt; &gt; on the blog post and in related tickets, but they are complicated and
&gt; &gt; involve tricky tradeoffs (see
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/9273#comment:4). The
&gt; &gt; best solution that I see to this is to make Tor maintain separate guard
&gt; &gt; choices depending on the current SSID, BSSID, or default gateway router
&gt; &gt; MAC from ARP. The default gateway ARP MAC is probably easiest for us to
&gt; &gt; implement cross-platform and stable across wifi to ethernet.
&gt; &gt;
&gt; 
&gt; Agreed. I don't think guard fingerprintability was ever a serious
&gt; argument for switching to a single guard node.
&gt; 
&gt; &gt;
&gt; &gt; Arguments in favor of switching to two entry guards:
&gt; &gt;
&gt; &gt; 1. One guard allows course-grained netflow confirmation attacks
&gt; &gt;
&gt; &gt; The counterargument based on #14917 above also has an additional
&gt; &gt; wrinkle: an adversary watching a suspect list of clients can easily
&gt; &gt; observe the "temporarily use a second guard" activity using just
&gt; &gt; connection-level ISP/AS netflow logs. To a large-scale netflow
&gt; &gt; adversary, the use of a second guard only when the guard is chosen as
&gt; &gt; the RP confirms not only guard choice, but the IP address of the onion
&gt; &gt; service itself.
&gt; &gt;
&gt; 
&gt; Devil's advocate: I'm not sure how big the suspect list we are thinking
&gt; about is, or what kind of threat models we are considering here, and I
&gt; think this matters quite a bit. Because if the suspect list is not big,
&gt; and the threat models allows the attacker to cause the victim to build
&gt; circuits, then the attacker could succeed even with simple traffic
&gt; signals (or shutting down the internet) and traffic monitoring.
&gt; 
&gt; Also, this whole point relies on our suboptimal fix to #14917. We could
&gt; improve the situation here by doing more advanced fix like the one
&gt; suggested above.

Agree with George here. I think 1 or 2 Guards here won't matter much in this
attack as mentionned where Alice can just keep injecting traffic pattern on
both Guards for identification at the netflow records level.

&gt; 
&gt; &gt; Again, similar attacks may be possible against exit activity via
&gt; &gt; cleverly crafted exit policies and /16 subnet choice. (Aside: if we
&gt; &gt; allow routers to join any family they like without reciprocation, this
&gt; &gt; attack becomes worse.)
&gt; &gt;
&gt; &gt; Having a dedicated second guard that is always in use will prevent the
&gt; &gt; creation and exclusive use of a new TLS connection just for this
&gt; &gt; request. Instead, the two TLS connections will both remain open and in
&gt; &gt; regular use as long as the client is active.
&gt; &gt;
&gt; &gt; 2. More than one guard allows us to deploy conflux.
&gt; &gt;
&gt; &gt; As mentioned in the blog post, moving to one guard prevents us from
&gt; &gt; deploying conflux -- a research design that improves Tor performance by
&gt; &gt; combining two or more circuits together at an exit node or rendezvous
&gt; &gt; point and load balancing between them:
&gt; &gt; https://www.cypherpunks.ca/~iang/pubs/conflux-pets.pdf
&gt; &gt;
&gt; 
&gt; I also like the conflux idea a lot but IIUC we are still very far away
&gt; from it being a reality, since the bridge from the research paper side
&gt; to the reality side is huge and unbuilt. Seems to me that toggling
&gt; NumEntryGuards from 1 to 2 is just a tiny part of the work required, and
&gt; something that could also be done after all the rest of the work gets done...
&gt; 
&gt; I don't see this as a major argument for switching to two guards, but
&gt; please correct me if I'm not right.

I'm a bit undecided on this whole switch to 2 Guards for now. For hidden
service, there is probably a slight positive gain I would say that is using
"equally" two guards instead of the second one being used rarely and on
command by the client.

I'm not convinced about the security arguments but rather the Guard congestion
argument makes more sense for me. And this at the expense of exposing regular
clients to more Guards.

Although, the "changing Internet" problem is an important one for which I
wonder if it could be fixed with its own solution instead of moving to 2
guards at large.

Tough call....

Thanks!
David

-- 
hgJe5VGAkZPnC/W4iPXnCuf1HcG2evYQqVjeb8Ugb4Y=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180322150444</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-03-22 15:04:44-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; [ text/plain ]
&gt; On 22 Mar (13:46:36), George Kadianakis wrote:
&gt;&gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt;&gt; 
&gt;&gt; &gt; [ text/plain ]
&gt;&gt; &gt; Back in 2014, Tor moved from three guard nodes to one guard node:
&gt;&gt; &gt; https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
&gt;&gt; &gt; https://trac.torproject.org/projects/tor/ticket/12206
&gt;&gt; &gt;
&gt;&gt; &gt; We made this change primarily to limit points of observability of entry
&gt;&gt; &gt; into the Tor network for clients and onion services, as well as to
&gt;&gt; &gt; reduce the ability of an adversary to track clients as they move from
&gt;&gt; &gt; one internet connection to another by their choice of guards.
&gt;&gt; &gt;
&gt;&gt; &gt; At the time, I was in favor of two entry guards but did not have a
&gt;&gt; &gt; strong preference, and we ended up choosing one guard. After seeing
&gt;&gt; &gt; various consequences of using only one entry guard, I think a much
&gt;&gt; &gt; stronger case can now be made for bumping back up to two.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; &lt;snip&gt;
&gt;&gt; 
&gt;&gt; &gt; Roger suggested that I enumerate the pros and cons of this increase on
&gt;&gt; &gt; this mailing list, so we can discuss and consider this switch. So here
&gt;&gt; &gt; is my attempt at that list. Let's start with a more in-depth recap of
&gt;&gt; &gt; the one-guard arguments, along with some recent observations that change
&gt;&gt; &gt; things.
&gt;&gt; &gt;
&gt;&gt; &gt;
&gt;&gt; &gt; Arguments for staying with just one guard:
&gt;&gt; &gt;
&gt;&gt; &gt; 1. One guard means less observability.
&gt;&gt; &gt;
&gt;&gt; &gt; As Roger put it in the above blog post: "I think the analysis of the
&gt;&gt; &gt; network-level adversary in Aaron's paper is the strongest argument for
&gt;&gt; &gt; restricting the variety of Internet paths that traffic takes between the
&gt;&gt; &gt; Tor client and the Tor network."
&gt;&gt; &gt; http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt;&gt; &gt;
&gt;&gt; &gt; Unfortunately, we have since learned that Tor's path selection has the
&gt;&gt; &gt; effect of giving the adversary the ability to generate at least one
&gt;&gt; &gt; additional observation path. We first became aware of this in
&gt;&gt; &gt; https://trac.torproject.org/projects/tor/ticket/14917, where the change
&gt;&gt; &gt; to one guard allowed an adversary to discover your guard by choosing it
&gt;&gt; &gt; as a rendezvous point and observing the circuit failure. After the fix
&gt;&gt; &gt; for #14917, the onion service will build a connection to a second guard
&gt;&gt; &gt; that it keeps in reserve. By using this attack (as well as a similar but
&gt;&gt; &gt; more involved attack with unique exit policies and carefully chosen /16
&gt;&gt; &gt; exit node subnets), the adversary can force clients to be observed over
&gt;&gt; &gt; two paths whenever they like.
&gt;&gt; &gt;
&gt;&gt; &gt; So while we may get benefit for moving from three guards to two guards,
&gt;&gt; &gt; we don't get much (or any) benefit from moving to two guards to one
&gt;&gt; &gt; guard against an active adversary that either connects to onion
&gt;&gt; &gt; services, or serves content to clients and runs exits.
&gt;&gt; &gt;
&gt;&gt; 
&gt;&gt; Hmm, that's a fair point. However, the fact that this behavior exists
&gt;&gt; currently does not mean that it's the best we can do with what we have.
&gt;&gt; 
&gt;&gt; Example of what we can do to stop this bad behavior: instead of using
&gt;&gt; our second guard when our "exit" conflicts with our first guard like
&gt;&gt; this: [G2 -&gt; M1 -&gt; G1], we could instead make a 4-hop circuit as
&gt;&gt; follows: [G1 -&gt; M1 -&gt; M2 -&gt; G2]. This would stop us from using our
&gt;&gt; second guard and would hide the obvious signal you are worrying about.
&gt;&gt; (I see that dgoulet also suggested that in the ticket comment:7)
&gt;
&gt; For hidden service, I think you meant [G1 -&gt; M1 -&gt; M2 -&gt; *G1*] considering
&gt; that G1 is the chosen RP. But also, I think my comment was very wrong 3 years
&gt; ago, a service already builds a 4 hops to the RP so it should then be this in
&gt; your example?: [G1 -&gt; M1 -&gt; M2 -&gt; M3 -&gt; G1]
&gt;

Yep, you are right in everything here.

&gt; This makes it VERY easy for a Guard node to learn that it is the guard of a
&gt; specific .onion but considering an evil guard of a .onion, there are other
&gt; effective methods to learn it so I'm not convinced that this path will be
&gt; worst, just maybe bad for performance.
&gt;

Why bad for performance? It will be the same length as currently.

&gt; But also this would violate tor protocol of "never having the same hop in the
&gt; path" so overall making an exeception for this makes me worry a bit :S.
&gt;

I think this is your main objection to this approach, and I understand
it, but I'm not sure how well-enforced this tor protocol "rule" is, or
how much we should respect it given that this is an important security
edge-case that we can solve.

&gt; I do agree with Mike on this one that we don't get benefit here from 1 to 2
&gt; because the code right now is basically a two guard system where the second
&gt; guard is used rarely. Not only that but an attacker can force you to use that
&gt; second Guard at will.
&gt;

I don't think this is true anymore, if we accept
[G1 -&gt; M1 -&gt; M2 -&gt; M3 -&gt; G1] as a reasonable solution.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180322171340</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-22 17:13:40-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


David Goulet:
&gt; On 22 Mar (13:46:36), George Kadianakis wrote:
&gt; &gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; Arguments in favor of switching to two entry guards:
&gt; &gt; &gt;
&gt; &gt; &gt; 1. One guard allows course-grained netflow confirmation attacks
&gt; &gt; &gt;
&gt; &gt; &gt; The counterargument based on #14917 above also has an additional
&gt; &gt; &gt; wrinkle: an adversary watching a suspect list of clients can easily
&gt; &gt; &gt; observe the "temporarily use a second guard" activity using just
&gt; &gt; &gt; connection-level ISP/AS netflow logs. To a large-scale netflow
&gt; &gt; &gt; adversary, the use of a second guard only when the guard is chosen as
&gt; &gt; &gt; the RP confirms not only guard choice, but the IP address of the onion
&gt; &gt; &gt; service itself.
&gt; &gt; 
&gt; &gt; Devil's advocate: I'm not sure how big the suspect list we are thinking
&gt; &gt; about is, or what kind of threat models we are considering here, and I
&gt; &gt; think this matters quite a bit. Because if the suspect list is not big,
&gt; &gt; and the threat models allows the attacker to cause the victim to build
&gt; &gt; circuits, then the attacker could succeed even with simple traffic
&gt; &gt; signals (or shutting down the internet) and traffic monitoring.
&gt; &gt; 
&gt; &gt; Also, this whole point relies on our suboptimal fix to #14917. We could
&gt; &gt; improve the situation here by doing more advanced fix like the one
&gt; &gt; suggested above.
&gt; 
&gt; Agree with George here. I think 1 or 2 Guards here won't matter much in this
&gt; attack as mentionned where Alice can just keep injecting traffic pattern on
&gt; both Guards for identification at the netflow records level.

I strongly disagree. Dumping more traffic onto an already existing,
otherwise in-use connection is not the same as the ability to force a
new connection that is only used for a single request at a very specific
time. These are completely different data retention resolutions, and if
the netflow padding works as intended, dumping traffic onto an existing
connection will be rolled up into all other traffic during that hour, or
longer. At large scale, routers will likely be recording flows at just
the connection level only, if that.

What this means in practice is the ability for an adversary to go to
large ISPs and say "Hey, give me connection logs you already have/can
easily generate for these IPs during this specific time period" instead
of "Hey, install this custom black box monitoring equipment for me and
let me get arbitrary reports from it whenever I want". I know ISPs that
have received and refused the black box request case because it was too
intrusive. I also know ISPs that have given records over in the
connection-level case.

I will reply to the discussion of other options for the #14917 fix in
the other branch of this thread.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180322173403</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-22 17:34:03-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


George Kadianakis:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt; &gt; On 22 Mar (13:46:36), George Kadianakis wrote:
&gt; &gt;&gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; &gt;&gt; &gt; Roger suggested that I enumerate the pros and cons of this increase on
&gt; &gt;&gt; &gt; this mailing list, so we can discuss and consider this switch. So here
&gt; &gt;&gt; &gt; is my attempt at that list. Let's start with a more in-depth recap of
&gt; &gt;&gt; &gt; the one-guard arguments, along with some recent observations that change
&gt; &gt;&gt; &gt; things.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Arguments for staying with just one guard:
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; 1. One guard means less observability.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; As Roger put it in the above blog post: "I think the analysis of the
&gt; &gt;&gt; &gt; network-level adversary in Aaron's paper is the strongest argument for
&gt; &gt;&gt; &gt; restricting the variety of Internet paths that traffic takes between the
&gt; &gt;&gt; &gt; Tor client and the Tor network."
&gt; &gt;&gt; &gt; http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; Unfortunately, we have since learned that Tor's path selection has the
&gt; &gt;&gt; &gt; effect of giving the adversary the ability to generate at least one
&gt; &gt;&gt; &gt; additional observation path. We first became aware of this in
&gt; &gt;&gt; &gt; https://trac.torproject.org/projects/tor/ticket/14917, where the change
&gt; &gt;&gt; &gt; to one guard allowed an adversary to discover your guard by choosing it
&gt; &gt;&gt; &gt; as a rendezvous point and observing the circuit failure. After the fix
&gt; &gt;&gt; &gt; for #14917, the onion service will build a connection to a second guard
&gt; &gt;&gt; &gt; that it keeps in reserve. By using this attack (as well as a similar but
&gt; &gt;&gt; &gt; more involved attack with unique exit policies and carefully chosen /16
&gt; &gt;&gt; &gt; exit node subnets), the adversary can force clients to be observed over
&gt; &gt;&gt; &gt; two paths whenever they like.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; &gt; So while we may get benefit for moving from three guards to two guards,
&gt; &gt;&gt; &gt; we don't get much (or any) benefit from moving to two guards to one
&gt; &gt;&gt; &gt; guard against an active adversary that either connects to onion
&gt; &gt;&gt; &gt; services, or serves content to clients and runs exits.
&gt; &gt;&gt; &gt;
&gt; &gt;&gt; 
&gt; &gt;&gt; Hmm, that's a fair point. However, the fact that this behavior exists
&gt; &gt;&gt; currently does not mean that it's the best we can do with what we have.
&gt; &gt;&gt; 
&gt; &gt;&gt; Example of what we can do to stop this bad behavior: instead of using
&gt; &gt;&gt; our second guard when our "exit" conflicts with our first guard like
&gt; &gt;&gt; this: [G2 -&gt; M1 -&gt; G1], we could instead make a 4-hop circuit as
&gt; &gt;&gt; follows: [G1 -&gt; M1 -&gt; M2 -&gt; G2]. This would stop us from using our
&gt; &gt;&gt; second guard and would hide the obvious signal you are worrying about.
&gt; &gt;&gt; (I see that dgoulet also suggested that in the ticket comment:7)
&gt; &gt;
&gt; &gt; For hidden service, I think you meant [G1 -&gt; M1 -&gt; M2 -&gt; *G1*] considering
&gt; &gt; that G1 is the chosen RP. But also, I think my comment was very wrong 3 years
&gt; &gt; ago, a service already builds a 4 hops to the RP so it should then be this in
&gt; &gt; your example?: [G1 -&gt; M1 -&gt; M2 -&gt; M3 -&gt; G1]
&gt; 
&gt; Yep, you are right in everything here.
&gt; 
&gt; &gt; This makes it VERY easy for a Guard node to learn that it is the guard of a
&gt; &gt; specific .onion but considering an evil guard of a .onion, there are other
&gt; &gt; effective methods to learn it so I'm not convinced that this path will be
&gt; &gt; worst, just maybe bad for performance.
&gt; 
&gt; Why bad for performance? It will be the same length as currently.
&gt; 
&gt; &gt; But also this would violate tor protocol of "never having the same hop in the
&gt; &gt; path" so overall making an exeception for this makes me worry a bit :S.
&gt; 
&gt; I think this is your main objection to this approach, and I understand
&gt; it, but I'm not sure how well-enforced this tor protocol "rule" is, or
&gt; how much we should respect it given that this is an important security
&gt; edge-case that we can solve.
&gt; 
&gt; &gt; I do agree with Mike on this one that we don't get benefit here from 1 to 2
&gt; &gt; because the code right now is basically a two guard system where the second
&gt; &gt; guard is used rarely. Not only that but an attacker can force you to use that
&gt; &gt; second Guard at will.
&gt; 
&gt; I don't think this is true anymore, if we accept
&gt; [G1 -&gt; M1 -&gt; M2 -&gt; M3 -&gt; G1] as a reasonable solution.

Even if we allow this case, we still run up against other path
restrictions that enable the adversary to force the same new connection
behavior though. If we allow the same guard in multiple points in the
same circuit, new connections can be forced for the case where the RP is
in the same /16 or same family as the guard. This is not the same level
of info, but I still believe that the ability to force a new entry
connection is an extremely bad property. We can only avoid that by
abandoning all circuit restrictions for the RP/exit, or by having two
guards.

I feel vaguely uncomfortable abandoning all of Tor's path restrictions
for certain circuits, but I don't have a good argument against doing
that.

However, given the other benefits from having two dedicated guards
(especially traffic analysis and DoS resistance from conflux, but also
performance), I do believe that always using two guards is clearly and
strictly better than only using two guards for special cases that can be
adversarially controlled.


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180322192729</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-03-22 19:27:29-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

On Thu, Mar 22, 2018 at 1:13 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; I strongly disagree. Dumping more traffic onto an already existing,
&gt; otherwise in-use connection is not the same as the ability to force a
&gt; new connection that is only used for a single request at a very specific
&gt; time. These are completely different data retention resolutions, and
&gt; if the netflow padding works as intended, dumping traffic onto an existing
&gt; connection will be rolled up into all other traffic during that hour, or
&gt; longer. At large scale, routers will likely be recording flows at just
&gt; the connection level only, if that.
&gt;
&gt; What this means in practice is the ability for an adversary to go to
&gt; large ISPs and say "Hey, give me connection logs you already have/can
&gt; easily generate for these IPs during this specific time period" instead
&gt; of "Hey, install this custom black box monitoring equipment for me and
&gt; let me get arbitrary reports from it whenever I want". I know ISPs that
&gt; have received and refused the black box request case because it was too
&gt; intrusive. I also know ISPs that have given records over in the
&gt; connection-level case.

Yes it's important to distinguish specific "netflow" style of records
analysis, from more general statistical traffic analysis of packets
flowing through a network, even if only from a limited to degenerate
number (2) of observation / targeting points. Even the simplest of
overlay networks could be considered at least a start against
the former. While the latter is a hard problem for nearly all of todays
networks and why few if any can claim to have resistance to anything
resembling GPA / GAA. Listing proposed solutions to the latter,
and why adoption of any of them into any overlay (or base layer)
network be it existing or new,  doesn't seem to really be happening
yet... a fine topic for another thread.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180322195409</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-03-22 19:54:09-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


On 22 Mar (17:13:40), Mike Perry wrote:
&gt; David Goulet:
&gt; &gt; On 22 Mar (13:46:36), George Kadianakis wrote:
&gt; &gt; &gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Arguments in favor of switching to two entry guards:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; 1. One guard allows course-grained netflow confirmation attacks
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; The counterargument based on #14917 above also has an additional
&gt; &gt; &gt; &gt; wrinkle: an adversary watching a suspect list of clients can easily
&gt; &gt; &gt; &gt; observe the "temporarily use a second guard" activity using just
&gt; &gt; &gt; &gt; connection-level ISP/AS netflow logs. To a large-scale netflow
&gt; &gt; &gt; &gt; adversary, the use of a second guard only when the guard is chosen as
&gt; &gt; &gt; &gt; the RP confirms not only guard choice, but the IP address of the onion
&gt; &gt; &gt; &gt; service itself.
&gt; &gt; &gt; 
&gt; &gt; &gt; Devil's advocate: I'm not sure how big the suspect list we are thinking
&gt; &gt; &gt; about is, or what kind of threat models we are considering here, and I
&gt; &gt; &gt; think this matters quite a bit. Because if the suspect list is not big,
&gt; &gt; &gt; and the threat models allows the attacker to cause the victim to build
&gt; &gt; &gt; circuits, then the attacker could succeed even with simple traffic
&gt; &gt; &gt; signals (or shutting down the internet) and traffic monitoring.
&gt; &gt; &gt; 
&gt; &gt; &gt; Also, this whole point relies on our suboptimal fix to #14917. We could
&gt; &gt; &gt; improve the situation here by doing more advanced fix like the one
&gt; &gt; &gt; suggested above.
&gt; &gt; 
&gt; &gt; Agree with George here. I think 1 or 2 Guards here won't matter much in this
&gt; &gt; attack as mentionned where Alice can just keep injecting traffic pattern on
&gt; &gt; both Guards for identification at the netflow records level.
&gt; 
&gt; I strongly disagree. Dumping more traffic onto an already existing,
&gt; otherwise in-use connection is not the same as the ability to force a
&gt; new connection that is only used for a single request at a very specific
&gt; time. These are completely different data retention resolutions, and if
&gt; the netflow padding works as intended, dumping traffic onto an existing
&gt; connection will be rolled up into all other traffic during that hour, or
&gt; longer. At large scale, routers will likely be recording flows at just
&gt; the connection level only, if that.
&gt; 
&gt; What this means in practice is the ability for an adversary to go to
&gt; large ISPs and say "Hey, give me connection logs you already have/can
&gt; easily generate for these IPs during this specific time period" instead
&gt; of "Hey, install this custom black box monitoring equipment for me and
&gt; let me get arbitrary reports from it whenever I want". I know ISPs that
&gt; have received and refused the black box request case because it was too
&gt; intrusive. I also know ISPs that have given records over in the
&gt; connection-level case.

Hmm, that is a very good point. I haven't thought in terms of the forcing
a new connection vs shoving traffic in an existing connection.

David

-- 
hgJe5VGAkZPnC/W4iPXnCuf1HcG2evYQqVjeb8Ugb4Y=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180326161040</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-26 16:10:40-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


Mike Perry:
&gt; David Goulet:
&gt; &gt; On 22 Mar (13:46:36), George Kadianakis wrote:
&gt; &gt; &gt; Mike Perry &lt;mikeperry@torproject.org&gt; writes:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Arguments in favor of switching to two entry guards:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; 1. One guard allows course-grained netflow confirmation attacks
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; The counterargument based on #14917 above also has an additional
&gt; &gt; &gt; &gt; wrinkle: an adversary watching a suspect list of clients can easily
&gt; &gt; &gt; &gt; observe the "temporarily use a second guard" activity using just
&gt; &gt; &gt; &gt; connection-level ISP/AS netflow logs. To a large-scale netflow
&gt; &gt; &gt; &gt; adversary, the use of a second guard only when the guard is chosen as
&gt; &gt; &gt; &gt; the RP confirms not only guard choice, but the IP address of the onion
&gt; &gt; &gt; &gt; service itself.
&gt; &gt; &gt; 
&gt; &gt; &gt; Devil's advocate: I'm not sure how big the suspect list we are thinking
&gt; &gt; &gt; about is, or what kind of threat models we are considering here, and I
&gt; &gt; &gt; think this matters quite a bit. Because if the suspect list is not big,
&gt; &gt; &gt; and the threat models allows the attacker to cause the victim to build
&gt; &gt; &gt; circuits, then the attacker could succeed even with simple traffic
&gt; &gt; &gt; signals (or shutting down the internet) and traffic monitoring.
&gt; &gt; &gt; 
&gt; &gt; &gt; Also, this whole point relies on our suboptimal fix to #14917. We could
&gt; &gt; &gt; improve the situation here by doing more advanced fix like the one
&gt; &gt; &gt; suggested above.
&gt; &gt; 
&gt; &gt; Agree with George here. I think 1 or 2 Guards here won't matter much in this
&gt; &gt; attack as mentionned where Alice can just keep injecting traffic pattern on
&gt; &gt; both Guards for identification at the netflow records level.
&gt; 
&gt; I strongly disagree. Dumping more traffic onto an already existing,
&gt; otherwise in-use connection is not the same as the ability to force a
&gt; new connection that is only used for a single request at a very specific
&gt; time. These are completely different data retention resolutions, and if
&gt; the netflow padding works as intended, dumping traffic onto an existing
&gt; connection will be rolled up into all other traffic during that hour, or
&gt; longer. At large scale, routers will likely be recording flows at just
&gt; the connection level only, if that.

Minor correction: I misremembered the default active flow timeout for
most routers. It is actually 30 minutes, not one hour. (See Section 2.1
of https://gitweb.torproject.org/torspec.git/tree/padding-spec.txt and
associated manual links).

Also note that this active timeout value is the highest possible
resolution of data retention *at the router*. Netflow logging systems
also involve a "collector" machine that takes router records and
aggregates them further for long term storage (this is also described in
Section 2.1 of that spec).
 
&gt; What this means in practice is the ability for an adversary to go to
&gt; large ISPs and say "Hey, give me connection logs you already have/can
&gt; easily generate for these IPs during this specific time period" instead
&gt; of "Hey, install this custom black box monitoring equipment for me and
&gt; let me get arbitrary reports from it whenever I want". I know ISPs that
&gt; have received and refused the black box request case because it was too
&gt; intrusive. I also know ISPs that have given records over in the
&gt; connection-level case.
&gt; 
&gt; I will reply to the discussion of other options for the #14917 fix in
&gt; the other branch of this thread.
&gt; 
&gt; -- 
&gt; Mike Perry


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180326183406</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-26 18:34:06-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/signed)]


Florentin Rochet:
&gt; On 2018-03-20 04:57, Mike Perry wrote:
&gt; &gt;&lt;skip&gt;
&gt; &gt;Arguments for staying with just one guard:
&gt; &gt;
&gt; &gt;1. One guard means less observability.
&gt; &gt;
&gt; &gt;As Roger put it in the above blog post: "I think the analysis of the
&gt; &gt;network-level adversary in Aaron's paper is the strongest argument for
&gt; &gt;restricting the variety of Internet paths that traffic takes between the
&gt; &gt;Tor client and the Tor network."
&gt; &gt;http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt; 
&gt; &gt;Furthermore, I believe that conflux will also be useful against traffic
&gt; &gt;analysis and congestion attacks. Since the load balancing is dynamic and
&gt; &gt;hard to predict by an external observer, traffic correlation and website
&gt; &gt;traffic fingerprinting attacks will become harder, because the adversary
&gt; &gt;can no longer be sure what percentage of the traffic they have seen
&gt; &gt;(depending on their position and other potential concurrent activity).
&gt; &gt;Similarly, it should also help dampen congestion attacks, since traffic
&gt; &gt;will automatically shift away from a congested guard.
&gt; 
&gt; I am really enthusiast about multipath, either at the Tor level or even at
&gt; the transport level: we discussed QUIC at the meeting, but MultipathQUIC
&gt; could also be a long-term option now that we discuss more than 1 entry
&gt; guard.
&gt; 
&gt; However, I would argue that it does not really help against traffic
&gt; correlation. Our paper at pets18 exploits Tor's forward compatibility
&gt; feature to design silent cheap, almost instantaneous and perfect active
&gt; traffic confirmation that does not care about user traffic to succeed.
&gt; 
&gt; See Section 5,
&gt; https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf

In this case, Tor's forward compatibility is a bug. The Tor protocol is
now versioned at the feature layer, so Postel-style permissive forward
compatibility is no longer required:
https://gitweb.torproject.org/torspec.git/tree/proposals/264-subprotocol-versions.txt

I have been bothered by the types of side channels you discuss in that
paper for some time. They are tricky to remove, but not impossible.
See https://trac.torproject.org/projects/tor/ticket/25574 and the child
ticket and associated branch.

Your paper also states that you got multiplier effects from various
issues with Tor's protocol, which improved your results. If we remove
these multiplier effects by fixing the protocol and behavior, then it
seems to me that adaptive traffic routing will add further uncertainty
to congestion-based attacks.

&gt; Maybe the real debate would be to discuss what's the major threat between
&gt; active/passive attackers, and what do we care about? The question is, why
&gt; should we care about hardening passive attacker's work when the active form
&gt; is always as easy?

To your point: because I believe it is possible to make both active and
passive attacker's jobs hard. I also believe that when we look deeply
enough, we will find that improvements that make an active attacker's
task harder will also improve things against many, if not all, classes of
passive attacker. 

Roger made a related point that I want to inject here, so I remember to
pick it up in the proposal: Roger said that we should consider active vs
passive observers here. He contended that against passive observers, one
guard is always better, and that we should not discount that benefit
while considering an active attacker making circuits via a second guard.

However, there are two main issues with calling the
Tor-sometimes-uses-a-second-guard "attack" fully "active":

1. It is not always active. In day-to-day operation, clients will use a
second guard whenever they pick an exit that is in the same family or
/16 of their primary guard (this is because Tor rightly chooses exits
first, to avoid leaking guard node choice via exit node choice). Clients
will also do this when an onion service's IP, HSDIR, or RP is in the
same /16 or family as their primary guard, or actually is that guard. In
these cases, they will perform a request over a second guard, with no
benefit from multiplexing it with other traffic. For clients unlucky
enough to choose guards in popular /16s or in big families, they will be
using secondary guards for unmultiplexed activity quite frequently.

2. The active observer and the passive observers here are independent
actors. The passive observers can be logging connection activity simply
due to the default configuration of their network routers. Active
adversaries do not need their collusion in this attack to get the full
benefit from being active -- they merely need to have the ability to ask
passive observers for the logs they already have, independent of the
attack.

&gt; For website fingerprinting, it does seem to be interesting if the attack
&gt; cannot link the two paths :)

This is by far the easiest argument to make for both the switch to two
guards, the switch to conflux, and for the addition of padding: we know
from the research literature on website traffic fingerprinting that more
multiplexing reduces attacker accuracy. Both conflux and always-on two
guards increase overall multiplexing, and eliminate cases where lack of
multiplexing bites us hard.

However, the mere fact that this is true against website traffic
fingerprinting suggests to me that increased multiplexing and traffic
splitting is useful in other traffic analysis scenarios.

-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180327140046</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-03-27 14:00:46-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

Mike Perry &lt;mikeperry@torproject.org&gt; writes:

&gt; [ text/plain ]
&gt; Back in 2014, Tor moved from three guard nodes to one guard node:
&gt; https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
&gt; https://trac.torproject.org/projects/tor/ticket/12206
&gt;
&gt; We made this change primarily to limit points of observability of entry
&gt; into the Tor network for clients and onion services, as well as to
&gt; reduce the ability of an adversary to track clients as they move from
&gt; one internet connection to another by their choice of guards.
&gt;
&gt; At the time, I was in favor of two entry guards but did not have a
&gt; strong preference, and we ended up choosing one guard. After seeing
&gt; various consequences of using only one entry guard, I think a much
&gt; stronger case can now be made for bumping back up to two.
&gt;
&gt; Roger suggested that I enumerate the pros and cons of this increase on
&gt; this mailing list, so we can discuss and consider this switch. So here
&gt; is my attempt at that list. Let's start with a more in-depth recap of
&gt; the one-guard arguments, along with some recent observations that change
&gt; things.
&gt;
&gt;
&gt; Arguments for staying with just one guard:
&gt;
&gt; 1. One guard means less observability.
&gt;

Hello!

Here is some small analysis of Sybil resistance on 1-guard vs 2-guards.

I think this analysis is important even given the #14917 issue, since we
could defend against that by lifting those particular path
restrictions. I agree that's not ideal, but IMO it's definitely
something we should consider as part of a thorough analysis, since by
solving #14917 correctly we could still maintain connection to just
1-guard (assuming it's a stable node).

===

So on to Sybil resistance analysis:

For a 5% bandwidth adversary and a single guard, an attacker would have
50% chance to Sybil your G1 (i.e. deanonymize you) after 14
rotations. For a 3.5 month rotation frequency, this means that you would
expect your guard to be uncompromised by Sybil's for about 4 years. For
a 10% adversary you need 7 rotations for 50% so that's 2 years.

Now if we go to two guards, a 5% adversary would need 2 years to Sybil
your G1, wheras a 10% adversary could do that in 1 year.

All the above numbers are assuming a completely stable guard node, that
you only switch because its lifetime expired and not because of
reachability issues etc. So in the real world, the actual guarantees are
probably lower.

In general, I obviously feel more comfortable with the single guard
results, but also the dual-guard results are not so bad.

===

Now with regards to engineering, here is also something to be said about
how the prop271 algorithm will handle NumEntryGuards=2:

IIRC, the way it's currently handled means that if any of the two first
primary guards is down, the algorithm will skip that and choose between
the two next available, potentially going into the third primary guard
in the list [see how select_entry_guard_for_circuit() uses
get_n_primary_guards_to_use()]. This might not be ideal, and perhaps we
should tolerate some small unstabilities of the primary guards so that
we don't get to expose ourselves to even more guards...

Also, we need to look at how
guard_selection_get_err_str_if_dir_info_missing() will work after we
increase NumEntryGuards, since that function is what caused #21969, and
we should make sure that it's not gonna get more annoying if we bump up
the number of guards.

That's it for now! :)

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180324002138</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-03-24 00:21:38-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

On Fri, Mar 23, 2018 at 08:13:59PM -0400, Rob Jansen wrote:
&gt; I understand that the current bandwidth measurement system is far from ideal, but I \
&gt; am wondering about how the current system works. Does each bandwidth authority also \
&gt; run a bandwidth scanner? Or is it possible that the results from a bandwidth \
&gt; scanner is supplied to multiple authorities?

I believe there are no scanners that supply answers to multiple directory
authorities.

You could in theory check whether this is true in practice by seeing if
any dir auths vote the same numbers.

I think in past bwauth sessions at meetings, people have made lists of
who runs which bwauth.

I think moria1 runs its own, and Faravahar runs its own. I've lost track
of the others, but I'd guess that bastet also runs its own, and that
maatuska pulls numbers from a bwauth that tjr runs.

https://consensus-health.torproject.org/#bwauthstatus

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180324020258</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2018-03-24 02:02:58-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

On Fri, Mar 23, 2018 at 08:21:38PM -0400, Roger Dingledine wrote:
&gt; On Fri, Mar 23, 2018 at 08:13:59PM -0400, Rob Jansen wrote:
&gt; &gt; I understand that the current bandwidth measurement system is far from ideal, but \
&gt; &gt; I am wondering about how the current system works. Does each bandwidth authority \
&gt; &gt; also run a bandwidth scanner? Or is it possible that the results from a bandwidth \
&gt; &gt; scanner is supplied to multiple authorities?
[...]
&gt; I think in past bwauth sessions at meetings, people have made lists of
&gt; who runs which bwauth.

Not the original question Rob asked, but a year ago there was a session
and the (reformatted) notes contain:

longclaw: hongkong -&gt; US
moria: US-&gt;US
matuska: .se-&gt;us
faravahar: us-&gt;us
sebastian: de-&gt;de 

https://trac.torproject.org/projects/tor/wiki/org/meetings/2017Amsterdam/Notes/bwauths


(I don't know why there is a sebastian instead of a gabelmoo).

Obviously the situation has changed a bit since then. I don't know if
any of the bwscanner locations changed, either (not including losing
longclaw and sebastian and adding bastet).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180324125018</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-24 12:50:18-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On Mar 23, 2018, at 8:21 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt; I believe there are no scanners that supply answers to multiple directory
&gt; authorities.
&gt; 

Great! IIRC, at one point in the distant past this was not the case.

&gt; You could in theory check whether this is true in practice by seeing if
&gt; any dir auths vote the same numbers.

Did that; nobody is voting the same numbers. So presumably that means all bwauths are \
using independent numbers.

I was concerned because bastet and moria1 both stopped voting anything for each of \
two of my &gt;2 year old relays during distinct time intervals yesterday. I mean there \
were missing votes, rather than votes of no or low bandwidth. This caused a consensus \
of Unmeasured=1 and BW=20 for several hours. See [0] if you want to see what I mean \
by missing votes - I noticed that this happens in every consensus I viewed for at \
least some number of relays.

I guess maybe I restarted my relays at just the right time to cause a scanner to go \
nonlinear or something. Things seem to be back to normal now, though. I'm going to \
chalk this up as bad error handling in the TorFlow code, because that accusation is \
easy and generally agreeable :D

&gt; 
&gt; I think moria1 runs its own, and Faravahar runs its own. I've lost track
&gt; of the others, but I'd guess that bastet also runs its own, and that
&gt; maatuska pulls numbers from a bwauth that tjr runs.
&gt; 
&gt; https://consensus-health.torproject.org/#bwauthstatus

Hmm. I wish we were more transparent about who is running scanners and which bwauths \
consume results from which scanners. Something to keep in mind for those of us \
working on next-gen replacement scanners.

&gt; On Mar 23, 2018, at 10:02 PM, Matthew Finkel &lt;matthew.finkel@gmail.com&gt; wrote:
&gt; 
&gt; Not the original question Rob asked, but a year ago there was a session
&gt; and the (reformatted) notes contain:

Thanks Matt! That is useful :)

Best,
Rob

[0] Warning, this page is quite large, it contains an entry for every relay in the \
consensus: https://consensus-health.torproject.org/consensus-health-2018-03-23-11-00.html#0DA9BD201766EDB19F57F49F1A013A8A5432C008



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq2SYoACgkQnFIMfTqQ
qoRUOg//TBuRxy7AOri6ygIP4CQZfbFfiEYUCw2+QlVUY/9jGE1bkWMySxQxE0b3
uJwR3FtnnE9fnlUYq9bIEwUNuyVm6crmfjJ9iUTntkJRXarrdte4vqpoz3kATHKE
4WLIHERxyfl7OhDv1ONumuDpHNmuPx8h3sgt5JcO56m6CMk1RygiMd+CoPwRxtfs
5u407os8E7c1DoMRGo4oqeejUOZBZjWBvrN40X01yWG0F8cmftZPnqN9fDUSNlB+
OR3aRT/LNwSc4KwBZQmLeusKJE2rQtWFeph2Gy3wWIGQMLX5nJY/VNpHkUHfNEw6
2C9GSheX2GemsTHrqCXOBo52CsDSesQqOJ+w+ouKwir1+wQSTWLOC9tAilwJMXF1
UzqRHTagmcSCMK2RCrHGAkDF5Ebb5venxIkmY4t2+3jKeDPMzg5Xzawr2psPfeL8
ZNiozuaQKoqHstW0a/IhXX4BMQonac7V0+1QgOjqPPWk3R0E5LuV9weEN4izHd3Z
0XDfed3VDpgMrpTKllqHuqquu36IUh2s9zoAFFEI53QPhqXJ2CT8KCpOWTX7rqoD
jzPgW3Tf2Ntzz+GK9VOpbRvrlaHYUxFUjj9hdo5nGqHStF7mgn6h13tH/gYoyilX
aB1RWziGMMeIJ9sI8R4Tk3CR96sdg//RasJFbV4jLv2MjiQsWJM=
=WoQU
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180325161350</emailId><senderName>Sebastian Hahn</senderName><senderEmail>hahn.seb@web.de</senderEmail><timestampReceived>2018-03-25 16:13:50-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>


&gt; On 24. Mar 2018, at 13:50, Rob Jansen &lt;rob.g.jansen@nrl.navy.mil&gt; wrote:
&gt; &gt; I think moria1 runs its own, and Faravahar runs its own. I've lost track
&gt; &gt; of the others, but I'd guess that bastet also runs its own, and that
&gt; &gt; maatuska pulls numbers from a bwauth that tjr runs.
&gt; &gt; 
&gt; &gt; https://consensus-health.torproject.org/#bwauthstatus
&gt; 
&gt; Hmm. I wish we were more transparent about who is running scanners and which \
&gt; bwauths consume results from which scanners. Something to keep in mind for those of \
&gt; us working on next-gen replacement scanners.

It is at the discretion of the bwauth operator to ensure that
they're using a trusted source for their data. To me, that
means anything other than running the code myself is utterly
unacceptable, other operators might make other choices. I
think it makes sense to say that the operator of a given bw
auth is *responsible* for whatever they're voting on, whether
they run the bwauth themselves or not.

Cheers
Sebastian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180325005400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-03-25 00:54:00-0400</timestampReceived><subject>Re: [tor-dev] Is OutboundBindAddress respected during ORPort IP auto detection?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Turns out this is a known bug in tor.

s7r reported [1] it several years ago (2014-12-13).

In [1] a log warning has been added, [2] is
about the actual fix.



[1] https://trac.torproject.org/projects/tor/ticket/13953
[2] https://trac.torproject.org/projects/tor/ticket/19919


--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180325171601</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2018-03-25 17:16:01-0400</timestampReceived><subject>Re: [tor-dev] Is there strictly a one-to-one BW scanner to BW auth relationship?</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On Mar 25, 2018, at 12:13 PM, Sebastian Hahn &lt;hahn.seb@web.de&gt; wrote:
&gt; 
&gt; 
&gt; &gt; On 24. Mar 2018, at 13:50, Rob Jansen &lt;rob.g.jansen@nrl.navy.mil&gt; wrote:
&gt; &gt; &gt; I think moria1 runs its own, and Faravahar runs its own. I've lost track
&gt; &gt; &gt; of the others, but I'd guess that bastet also runs its own, and that
&gt; &gt; &gt; maatuska pulls numbers from a bwauth that tjr runs.
&gt; &gt; &gt; 
&gt; &gt; &gt; https://consensus-health.torproject.org/#bwauthstatus
&gt; &gt; 
&gt; &gt; Hmm. I wish we were more transparent about who is running scanners and which \
&gt; &gt; bwauths consume results from which scanners. Something to keep in mind for those \
&gt; &gt; of us working on next-gen replacement scanners.
&gt; 
&gt; It is at the discretion of the bwauth operator to ensure that
&gt; they're using a trusted source for their data. To me, that
&gt; means anything other than running the code myself is utterly
&gt; unacceptable, other operators might make other choices. I
&gt; think it makes sense to say that the operator of a given bw
&gt; auth is *responsible* for whatever they're voting on, whether
&gt; they run the bwauth themselves or not.

I totally agree! Though, I do think that the decisions of which data sources are used \
could be made public - not as a means to call into question or criticize the choice \
of the data source, but more as a means to understand how the system works. \
Eventually (in an ideal world where the scanners report their status) the community \
could help monitor the health of the scanners. If this makes the job of a bwauth more \
difficult (we should design it so it doesn't), that should certainly be considered as \
well.

Best,
Rob


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzFpsWB4PO5Fa1VDwnFIMfTqQqoQFAlq32VEACgkQnFIMfTqQ
qoQEdg//T9P3RZ45gP6CE6v0nsCOLBhGxLpMFcNaT1eDm1TpKSvYJMHpu7TrDuLh
0Axl3dwJjtz+sBlcw+gh9FvQpfNDC8Oq2lKiWHh57kbIdma0bLDXfsBaDY/Np7zT
8eMPTcUW6LEEzxOpCBw96OPsDJCrWdy5Mus1ggJuXHUZ8/L4gqszSNAoEpqzKm+I
pVVBT2DdPrjy2Cah2PlC9TzvHLdnE8x6K/ru/2TpctYqou9KnXKNyVmH5NCmKLuh
9v+YSlujfDpXu8kPEMxzBGMy9NXe93GaDUe2TH6QHsotY0ey18bEwaBeq9y/HfHj
tvIqd2glIeQ9zldmQfgVWHJZcQ7TkSl7MiRdIWt8XeGs9akjALLNDqajLdSO9oGs
Hxe2f/8ymtkdZ8nlkSKiBmevX54E2yomi9yqqhDbV0DD3FoVX6NdPQNkNRwIciVl
ip7k9HAaGif9aF5d/chM1naEbMCdbajLTU6cu2nZQFfetSQI4cJ9f7VwUM1iUMpQ
oEdE59KdYWEjI95Vj0U/FuBndc3RUT113ZI5vfwnkoVYFodp1bgGPOjsu09xFRek
OpzcfPXgX5Z+p/XkIGQCpx3iWDjG/jwsDD7hov1nyY5R51ucsk0A77TSDyBd3Lif
Q1VqB3SkPsP36lRxYNpHb3+oVxRQc4xhHmMBTa21Our9YtKQLic=
=Q6/A
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180326040929</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-03-26 04:09:29-0400</timestampReceived><subject>Re: [tor-dev] Lets give every circuit its own exit IP?</subject><body>

You may also be interested in
- newnym exit bucketing (in trac somewhere),
this guarantees cycling through all exits before reusing one
- openvpn exit termination (in tor-relays somewhere),
this gives non-tor IP to clients that initiate a termination
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180328084441</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2018-03-28 08:44:41-0400</timestampReceived><subject>Re: [tor-dev] Setting NumEntryGuards=2</subject><body>

[Attachment #2 (multipart/alternative)]


On 2018-03-26 20:34, Mike Perry wrote:

&gt; Florentin Rochet:
&gt;&gt; On 2018-03-20 04:57, Mike Perry wrote:
&gt;&gt;&gt; &lt;skip&gt;
&gt;&gt;&gt; Arguments for staying with just one guard:
&gt;&gt;&gt;
&gt;&gt;&gt; 1. One guard means less observability.
&gt;&gt;&gt;
&gt;&gt;&gt; As Roger put it in the above blog post: "I think the analysis of the
&gt;&gt;&gt; network-level adversary in Aaron's paper is the strongest argument for
&gt;&gt;&gt; restricting the variety of Internet paths that traffic takes between the
&gt;&gt;&gt; Tor client and the Tor network."
&gt;&gt;&gt; http://freehaven.net/anonbib/#ccs2013-usersrouted
&gt;&gt;&gt; Furthermore, I believe that conflux will also be useful against traffic
&gt;&gt;&gt; analysis and congestion attacks. Since the load balancing is dynamic and
&gt;&gt;&gt; hard to predict by an external observer, traffic correlation and website
&gt;&gt;&gt; traffic fingerprinting attacks will become harder, because the adversary
&gt;&gt;&gt; can no longer be sure what percentage of the traffic they have seen
&gt;&gt;&gt; (depending on their position and other potential concurrent activity).
&gt;&gt;&gt; Similarly, it should also help dampen congestion attacks, since traffic
&gt;&gt;&gt; will automatically shift away from a congested guard.
&gt;&gt; I am really enthusiast about multipath, either at the Tor level or even at
&gt;&gt; the transport level: we discussed QUIC at the meeting, but MultipathQUIC
&gt;&gt; could also be a long-term option now that we discuss more than 1 entry
&gt;&gt; guard.
&gt;&gt;
&gt;&gt; However, I would argue that it does not really help against traffic
&gt;&gt; correlation. Our paper at pets18 exploits Tor's forward compatibility
&gt;&gt; feature to design silent cheap, almost instantaneous and perfect active
&gt;&gt; traffic confirmation that does not care about user traffic to succeed.
&gt;&gt;
&gt;&gt; See Section 5,
&gt;&gt; https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf
&gt; In this case, Tor's forward compatibility is a bug. The Tor protocol is
&gt; now versioned at the feature layer, so Postel-style permissive forward
&gt; compatibility is no longer required:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/264-subprotocol-versions.txt
&gt;
&gt; I have been bothered by the types of side channels you discuss in that
&gt; paper for some time. They are tricky to remove, but not impossible.
&gt; See https://trac.torproject.org/projects/tor/ticket/25574 and the child
&gt; ticket and associated branch.

Great! Roger indeed told me you were exploring similar problems. As you 
said, it's tricky to remove because of false positives and because you 
loose protocol flexibility, and it is not clear to me what the 
consequences can be over the years. I think we can reason about this as 
a scalability problem, not in size, but in *time* with its underlying 
technical issues and security concerns depending on how much we scale 
the protocol flexibility.

It is not really this thread's topic, so I prefer not to talk too much 
here, but I would be glad to discuss more those problems or to help on 
any proposal design, and code. Just ping me on IRC :) (Jaym).

&gt; Your paper also states that you got multiplier effects from various
&gt; issues with Tor's protocol, which improved your results. If we remove
&gt; these multiplier effects by fixing the protocol and behavior, then it
&gt; seems to me that adaptive traffic routing will add further uncertainty
&gt; to congestion-based attacks.

Hard to tell, even if the intuition is on your side. It's probably 
possible to come up with something smarter than the various attacks I 
did. We will definitely need another round of analysis after any 
proposed change.

While I feel that the various 'multiplier effects' should be removed, I 
don't really like the approach "patch the weaknesses quick and move on", 
often we miss to understand the root cause of the various problems, and 
we end up to add complexity to the software while there might be 
something better to do.

&gt;&gt; Maybe the real debate would be to discuss what's the major threat between
&gt;&gt; active/passive attackers, and what do we care about? The question is, why
&gt;&gt; should we care about hardening passive attacker's work when the active form
&gt;&gt; is always as easy?
&gt; To your point: because I believe it is possible to make both active and
&gt; passive attacker's jobs hard. I also believe that when we look deeply
&gt; enough, we will find that improvements that make an active attacker's
&gt; task harder will also improve things against many, if not all, classes of
&gt; passive attacker.
&gt;
&gt; Roger made a related point that I want to inject here, so I remember to
&gt; pick it up in the proposal: Roger said that we should consider active vs
&gt; passive observers here. He contended that against passive observers, one
&gt; guard is always better, and that we should not discount that benefit
&gt; while considering an active attacker making circuits via a second guard.
&gt;
&gt; However, there are two main issues with calling the
&gt; Tor-sometimes-uses-a-second-guard "attack" fully "active":
&gt;
&gt; 1. It is not always active. In day-to-day operation, clients will use a
&gt; second guard whenever they pick an exit that is in the same family or
&gt; /16 of their primary guard (this is because Tor rightly chooses exits
&gt; first, to avoid leaking guard node choice via exit node choice). Clients
&gt; will also do this when an onion service's IP, HSDIR, or RP is in the
&gt; same /16 or family as their primary guard, or actually is that guard. In
&gt; these cases, they will perform a request over a second guard, with no
&gt; benefit from multiplexing it with other traffic. For clients unlucky
&gt; enough to choose guards in popular /16s or in big families, they will be
&gt; using secondary guards for unmultiplexed activity quite frequently.
&gt;
&gt; 2. The active observer and the passive observers here are independent
&gt; actors. The passive observers can be logging connection activity simply
&gt; due to the default configuration of their network routers. Active
&gt; adversaries do not need their collusion in this attack to get the full
&gt; benefit from being active -- they merely need to have the ability to ask
&gt; passive observers for the logs they already have, independent of the
&gt; attack.

Also, I believe that there is a common misconception about the strength 
of a passive adversary against the Tor network. The passive adversary 
needs to see a sufficient amount of data to keep false positives quite 
low, and to have a reasonable chance of success, while the active form 
does not really care about such constraints (depending on the kind of 
confirmation attack, though). From my observations, most of Tor's 
traffic is short and unlikely to deliver enough information to a passive 
observer. Can a passive attacker correlates efficiently on the real 
network while most of Tor's flow size is below ~ 2000 cells? So, I don't 
feel that slightly increasing the surface area of passive adversaries is 
problematic right now, and as you said, the multiplexing effect of 
multipath may make their job even harder. I am more concerned by the 
increasing surface area of active attackers, and you seem to argue that 
the current situation "Tor-sometimes-uses-a-second-guard" is not fully 
active? So, moving to two guards favors active attackers compared to the 
current situation, right? I still believe that this problem can be 
balanced with our proposal, and that the opportunities raised by 
multipath circuits also worth such loss.

Best,
Florentin

&gt;&gt; For website fingerprinting, it does seem to be interesting if the attack
&gt;&gt; cannot link the two paths :)
&gt; This is by far the easiest argument to make for both the switch to two
&gt; guards, the switch to conflux, and for the addition of padding: we know
&gt; from the research literature on website traffic fingerprinting that more
&gt; multiplexing reduces attacker accuracy. Both conflux and always-on two
&gt; guards increase overall multiplexing, and eliminate cases where lack of
&gt; multiplexing bites us hard.
&gt;
&gt; However, the mere fact that this is true against website traffic
&gt; fingerprinting suggests to me that increased multiplexing and traffic
&gt; splitting is useful in other traffic analysis scenarios.
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;On 2018-03-26 20:34, Mike Perry wrote:&lt;br&gt;
    &lt;/p&gt;
    &lt;blockquote type="cite"
      cite="mid:20180326183406.GE956@torproject.org"&gt;
      &lt;pre wrap=""&gt;Florentin Rochet:
&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre wrap=""&gt;On 2018-03-20 04:57, Mike Perry wrote:
&lt;/pre&gt;
        &lt;blockquote type="cite"&gt;
          &lt;pre wrap=""&gt;&lt;skip&gt;
Arguments for staying with just one guard:

1. One guard means less observability.

As Roger put it in the above blog post: "I think the analysis of the
network-level adversary in Aaron's paper is the strongest argument for
restricting the variety of Internet paths that traffic takes between the
Tor client and the Tor network."
&lt;a class="moz-txt-link-freetext" \
href="http://freehaven.net/anonbib/#ccs2013-usersrouted"&gt;http://freehaven.net/anonbib/#ccs2013-usersrouted&lt;/a&gt;
 &lt;/pre&gt;
        &lt;/blockquote&gt;
        &lt;pre wrap=""&gt;
&lt;/pre&gt;
        &lt;blockquote type="cite"&gt;
          &lt;pre wrap=""&gt;Furthermore, I believe that conflux will also be useful \
against traffic analysis and congestion attacks. Since the load balancing is dynamic \
and hard to predict by an external observer, traffic correlation and website
traffic fingerprinting attacks will become harder, because the adversary
can no longer be sure what percentage of the traffic they have seen
(depending on their position and other potential concurrent activity).
Similarly, it should also help dampen congestion attacks, since traffic
will automatically shift away from a congested guard.
&lt;/pre&gt;
        &lt;/blockquote&gt;
        &lt;pre wrap=""&gt;
I am really enthusiast about multipath, either at the Tor level or even at
the transport level: we discussed QUIC at the meeting, but MultipathQUIC
could also be a long-term option now that we discuss more than 1 entry
guard.

However, I would argue that it does not really help against traffic
correlation. Our paper at pets18 exploits Tor's forward compatibility
feature to design silent cheap, almost instantaneous and perfect active
traffic confirmation that does not care about user traffic to succeed.

See Section 5,
&lt;a class="moz-txt-link-freetext" \
href="https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf"&gt;https://petsymposium.org/2018/files/papers/issue2/popets-2018-0011.pdf&lt;/a&gt;
 &lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre wrap=""&gt;
In this case, Tor's forward compatibility is a bug. The Tor protocol is
now versioned at the feature layer, so Postel-style permissive forward
compatibility is no longer required:
&lt;a class="moz-txt-link-freetext" \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/264-subprotocol-version \
s.txt"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/264-subprotocol-versions.txt&lt;/a&gt;


I have been bothered by the types of side channels you discuss in that
paper for some time. They are tricky to remove, but not impossible.
See &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/ticket/25574"&gt;https://trac.torproject.org/projects/tor/ticket/25574&lt;/a&gt; \
and the child ticket and associated branch.
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Great! Roger indeed told me you were exploring similar problems. As
    you said, it's tricky to remove because of false positives and
    because you loose protocol flexibility, and it is not clear to me
    what the consequences can be over the years. I think we can reason
    about this as a scalability problem, not in size, but in *time* with
    its underlying technical issues and security concerns depending on
    how much we scale the protocol flexibility. &lt;br&gt;
    &lt;br&gt;
    It is not really this thread's topic, so I prefer not to talk too
    much here, but I would be glad to discuss more those problems or to
    help on any proposal design, and code. Just ping me on IRC :)
    (Jaym).&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:20180326183406.GE956@torproject.org"&gt;
      &lt;pre wrap=""&gt;
Your paper also states that you got multiplier effects from various
issues with Tor's protocol, which improved your results. If we remove
these multiplier effects by fixing the protocol and behavior, then it
seems to me that adaptive traffic routing will add further uncertainty
to congestion-based attacks.
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Hard to tell, even if the intuition is on your side. It's probably
    possible to come up with something smarter than the various attacks
    I did. We will definitely need another round of analysis after any
    proposed change.&lt;br&gt;
    &lt;br&gt;
    While I feel that the various 'multiplier effects' should be
    removed, I don't really like the approach "patch the weaknesses
    quick and move on", often we miss to understand the root cause of
    the various problems, and we end up to add complexity to the
    software while there might be something better to do.&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:20180326183406.GE956@torproject.org"&gt;
      &lt;pre wrap=""&gt;
&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre wrap=""&gt;Maybe the real debate would be to discuss what's the major \
threat between active/passive attackers, and what do we care about? The question is, \
why should we care about hardening passive attacker's work when the active form
is always as easy?
&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre wrap=""&gt;
To your point: because I believe it is possible to make both active and
passive attacker's jobs hard. I also believe that when we look deeply
enough, we will find that improvements that make an active attacker's
task harder will also improve things against many, if not all, classes of
passive attacker. 

Roger made a related point that I want to inject here, so I remember to
pick it up in the proposal: Roger said that we should consider active vs
passive observers here. He contended that against passive observers, one
guard is always better, and that we should not discount that benefit
while considering an active attacker making circuits via a second guard.

However, there are two main issues with calling the
Tor-sometimes-uses-a-second-guard "attack" fully "active":

1. It is not always active. In day-to-day operation, clients will use a
second guard whenever they pick an exit that is in the same family or
/16 of their primary guard (this is because Tor rightly chooses exits
first, to avoid leaking guard node choice via exit node choice). Clients
will also do this when an onion service's IP, HSDIR, or RP is in the
same /16 or family as their primary guard, or actually is that guard. In
these cases, they will perform a request over a second guard, with no
benefit from multiplexing it with other traffic. For clients unlucky
enough to choose guards in popular /16s or in big families, they will be
using secondary guards for unmultiplexed activity quite frequently.

2. The active observer and the passive observers here are independent
actors. The passive observers can be logging connection activity simply
due to the default configuration of their network routers. Active
adversaries do not need their collusion in this attack to get the full
benefit from being active -- they merely need to have the ability to ask
passive observers for the logs they already have, independent of the
attack.
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
    Also, I believe that there is a common misconception about the
    strength of a passive adversary against the Tor network. The passive
    adversary needs to see a sufficient amount of data to keep false
    positives quite low, and to have a reasonable chance of success,
    while the active form does not really care about such constraints
    (depending on the kind of confirmation attack, though). From my
    observations, most of Tor's traffic is short and unlikely to deliver
    enough information to a passive observer. Can a passive attacker
    correlates efficiently on the real network while most of Tor's flow
    size is below ~ 2000 cells? So, I don't feel that slightly
    increasing the surface area of passive adversaries is problematic
    right now, and as you said, the multiplexing effect of multipath may
    make their job even harder. I am more concerned by the increasing
    surface area of active attackers, and you seem to argue that the
    current situation "Tor-sometimes-uses-a-second-guard" is not fully
    active? So, moving to two guards favors active attackers compared to
    the current situation, right? I still believe that this problem can
    be balanced with our proposal, and that the opportunities raised by
    multipath circuits also worth such loss.&lt;br&gt;
    &lt;br&gt;
    Best,&lt;br&gt;
    Florentin&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:20180326183406.GE956@torproject.org"&gt;
      &lt;pre wrap=""&gt;
&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre wrap=""&gt;For website fingerprinting, it does seem to be interesting if \
the attack cannot link the two paths :)
&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre wrap=""&gt;
This is by far the easiest argument to make for both the switch to two
guards, the switch to conflux, and for the addition of padding: we know
from the research literature on website traffic fingerprinting that more
multiplexing reduces attacker accuracy. Both conflux and always-on two
guards increase overall multiplexing, and eliminate cases where lack of
multiplexing bites us hard.

However, the mere fact that this is true against website traffic
fingerprinting suggests to me that increased multiplexing and traffic
splitting is useful in other traffic analysis scenarios.

&lt;/pre&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180328181620</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-03-28 18:16:20-0400</timestampReceived><subject>Re: [tor-dev] Connections failed to default obfs4 bridges</subject><body>

On Wed, Mar 28, 2018 at 10:57:13AM -0400, Rob Jansen wrote:
&gt; Is this a feature, like some of them only respond to users in certain parts of the \
&gt; world? Or is this a bug, like the default list of bridges refers to old bridges \
&gt; that are no longer available? Or am I misunderstanding functionality here?

In general it's a bug. We don't have any fancy "only listen to this but
not that" logic in those bridges.

I would totally believe that some of them are down by now. We need to
do two things better: (a) monitor how they're doing, and (b) reach out
to the operators when they go down, so the operators can fix them or so
we can take them out of the next Tor Browser.

I think 'b' is where we've been falling down lately.

Maybe we should add this topic to the plate for the upcoming relay
advocate.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180328192341</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-28 19:23:41-0400</timestampReceived><subject>Re: [tor-dev] The case for Tor-over-QUIC</subject><body>

[Attachment #2 (multipart/signed)]


Rob Jansen:
&gt; Thanks for the detailed write-up Mike! Theoretically, moving to QUIC
&gt; seems great; it seems to solve a lot of problems and has enough
&gt; advantages that we could just run with it.
&gt; 
&gt; I'll reiterate some of my primary concerns that I gave in Rome:
&gt; 
&gt; - I think it would be a mistake to push forward with such a
&gt; significant change to Tor's transport layer without significant
&gt; testing and experimentation. We have tools that allow us to do
&gt; full-network-sized experiments (Shadow), and we have interested
&gt; researchers that want to help (including me).

I am not trying to argue against doing the research. My goal was to make
enough of a case for QUIC that we can begin work on an implementation
and tune it as we study it, or at least identify the minimum set of
experiments that are needed before we could commit to such a path.
 
I expect us to have to tune things like queue length, queue management,
slow start, reordering parameters, drop recovery strategies, and the
backoff rates when drops happen. QUIC is also extensible enough such
that things like explicit congestion notification and link capacity
estimates can be used to try to avoid drops (though we would need to do
this at the onion layer rather than the QUIC layer, because intermediate
relays will not be able to add in ECN information in-band in our use of
QUIC, due to onion crypto):
https://tools.ietf.org/html/draft-johansson-quic-ecn-00

Because of this flexibility, I would be very surprised to discover that
QUIC proves impossible to tune in order to outperform our current lack
of congestion control.

&gt; - However, I am much less optimistic than you that it will just work
&gt; and instantly improve performance. You mention that Google has done
&gt; lots of tests, but my guess is they test in environments that look
&gt; like the Internet - i.e., fast core and slow edges. Do we know how it
&gt; would perform when the path contains additional 6 edges sandwiching 3
&gt; potentially low bandwidth Tor relays? Tor is a significantly
&gt; different environment than the Internet; for example, an end-to-end
&gt; congestion signal in Tor will take orders of magnitude longer to
&gt; reach the client than in traditional networks.

In drop-based congestion control, the duration of how long the drop
signal takes to reach the client is not a function of where the drop
happens. It is a function of the total RTT of the path. A drop early on
the path takes just as long to discover as one burried in the middle.

As a result, higher RTT latency does impact drop-based schemes quite
heavily (and the higher the drop rates, the worse this gets), but Tor's
latency is only orders of magnitude greater than the internet because of
queuing. If our queues can be bounded, then the latency multiplier
should be proportional to the number of Tor hops (and the average
physical distance of these paths).

&gt; - Because of the above, I'm not sure that an end-to-end design is the
&gt; right way to go. As I mentioned, we have simulators and researchers,
&gt; so we should be able to learn more and make a more informed decision
&gt; before committing to a design that will be difficult to change later.

I suppose that before we undertake or commit to a full implementation, a
couple of basic experiments could inform us as to if Tor's latency and
drop characteristics might severely impact vanilla QUIC performance.

1. What drop rates do fully-utilized QUIC networks tend to see? Are
QUIC's backoff and recovery properties sufficient such that packet loss
will remain reasonable under heavy use? Is this drop rate a function of
the number of concurrent QUIC connections or other network properties?
(I bet this information is known by groups studying QUIC and similar
congestion control schemes, but I am not finding it with casual
searching. TCP folk lore says "drop rate increases as concurrent
connections increases" but I can't find concrete relationships.)

2. Given the above information about the level of drop rates that
fully-utilized QUIC networks see under what circumstances, we can then
conduct an experiment to inform us of what fairness and goodput look
like under various link latencies with these drop rates.

#2 will inform us about whether QUIC is acceptable as-is, or if we would
need to explore ECN or other non-drop based congestion signals.

We will need to be careful while conducting these experiments, though. I
found a few research papers on QUIC, but nearly all of them state
limitations wrt varying aspects of the protocol being disabled or
enabled depending on Chromium/QUIC version (presumably due to whatever
experiments Google was conducting at the time).

Additionally, it looks like many of the QUIC implementations do not
implement all (or any) of the drop detection and recovery strategies
mentioned in the spec, and even the Google implementation goes back and
forth on things like FEC. So we will need to be careful to test what we
intend to use.
 
&gt; - We should be sure to pay close attention to how this will affect
&gt; emerging networks and applications, e.g., mobile devices and onion
&gt; services.
&gt; 
&gt; - The DoS attacks will change form, but I don't think they will
&gt; disappear. I think it would be wise to understand how DoS might
&gt; change, which is much easier once we have a design to analyze. Your
&gt; summary helps with that.

I agree that DoS will change form. But, the key draw for me is that
instead of having DoS attacks that kill the circuit or even bring down
the relay due to OOM (which provides a strong, clear signal to the
adversary and enables Sniper attacks), DoS attacks will become
congestion attacks that slow down service at specific bottlenecks, which
I believe that conflux can further mitigate by dynamically avoiding
them.

&gt; I think it would be worth including R&amp;D effort to investigate these
&gt; issues in any proposal that gets written.
&gt; 
&gt; Cheers,
&gt; Rob
&gt; 
&gt; &gt; On Mar 23, 2018, at 7:18 PM, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; In Rome, I held a session about network protocol upgrades. My intent was
&gt; &gt; to cover the switch to two guards, conflux, datagram transports, and
&gt; &gt; QUIC. We ended up touching only briefly on everything but QUIC, but we
&gt; &gt; went into enough depth on QUIC itself that it was a worthwhile and very
&gt; &gt; productive session.
&gt; &gt; 
&gt; &gt; Our notes are here:
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/org/meetings/2018Rome/Notes/FutureTorNetworkProtocolUpgrades
&gt; &gt;  
&gt; &gt; I wanted to give a bit of background and some historical perspective
&gt; &gt; about datagram transports for Tor, as well as explain those notes in
&gt; &gt; long form, to get everybody on the same page about this idea. With
&gt; &gt; the forthcoming IETF standard ratification of QUIC along with several
&gt; &gt; solid reference implementations (canonical list:
&gt; &gt; https://github.com/quicwg/base-drafts/wiki/Implementations), I believe
&gt; &gt; we are close to the point where we can finally put together a plan (and
&gt; &gt; a funding proposal) to undertake this work.
&gt; &gt; 
&gt; &gt; Consider this mail a pre-proposal to temperature check and solicit early
&gt; &gt; feedback about a Tor-over-QUIC deployment, before we invest the effort
&gt; &gt; to deep dive into the framing, protocol, and implementation details that
&gt; &gt; will be necessary for a full proposal.
&gt; 



&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180329224821</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-03-29 22:48:21-0400</timestampReceived><subject>Re: [tor-dev] Scaling bandwidth scanner results</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Matt, Juga, Nick and I discussed an alternative scaling scheme on
#tor-dev during the patch party.

&gt; On 19 Mar 2018, at 12:22, Matt Traudt &lt;pastly@torproject.org&gt; wrote:
&gt; 
&gt; 1. Decide on a large total.
&gt; 
&gt; I suggest 50 million to start the conversation (bike shedding) based on
&gt; that being close to the current total consensus weight so relay
&gt; operators won't see a large (though inconsequential) change.

Calculate the average consensus weight per relay.
And make it a consensus parameter.
Currently, it's about 7500.

bwauths scale results so that the total measured bandwidth is
approximately 7500 * (the number of relays they have measured).

This scales their results so they are similar to the current torflow
bwauths. (The current bwauths have total measured bandwidths
between 35 million and 70 million. Using this scaling scheme, a
bwauth that measured 7000 relays would have a total bandwidth
of 52.5 million.)

This scheme also allows a bwauth to scale and report partial
results: if it has measured half the network, it scales to 25 million.

&gt; 2. Have all the torflow operators switch to this new method.
&gt; 
&gt; Ouch. I wouldn't mind being told I'm wrong about this step being
&gt; necessary.

Under this alternative scheme, if the unscaled bwauths average
relay weight changes, we change the consensus parameter.

So we don't need to change torflow.

See this pad for our notes and calculations:
https://pad.riseup.net/p/n3mEulClf6ZV

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body \
dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Matt, Juga, Nick and I \
discussed an alternative scaling scheme on&lt;/div&gt;&lt;div&gt;#tor-dev during the patch \
party.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 19 Mar 2018, at 12:22, Matt Traudt &lt;&lt;a \
href="mailto:pastly@torproject.org"&gt;pastly@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;1. Decide on a large \
total.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I suggest 50 million to start the \
conversation (bike shedding) based on&lt;/span&gt;&lt;br&gt;&lt;span&gt;that being close to the current \
total consensus weight so relay&lt;/span&gt;&lt;br&gt;&lt;span&gt;operators won't see a large (though \
inconsequential) change.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Calculate the \
average consensus weight per relay.&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;And make it a consensus parameter.&lt;/span&gt;&lt;br&gt;&lt;div&gt;Currently, it's about \
7500.&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;bwauths scale results so that the total measured \
bandwidth &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;is&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;approximately 7500 * (the number of relays they have \
measured).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;This scales their results so they are similar to the current \
torflow&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;bwauths. (The current bwauths have total measured \
bandwidths&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;between 35 million and 70 million. Using this scaling scheme, \
a&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;bwauth \
that measured 7000 relays would have a total bandwidth&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;of 52.5 \
million.)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;This scheme also allows a bwauth to scale and report \
partial&lt;/div&gt;&lt;div&gt;results: if it has measured half the network, it scales to 25 \
million.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;2. Have all the torflow \
operators switch to this new method.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Ouch. I \
wouldn't mind being told I'm wrong about this step being&lt;/span&gt;&lt;br&gt;&lt;span&gt;necessary. \
&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Under this alternative scheme, if the unscaled \
bwauths average&lt;/div&gt;&lt;div&gt;relay weight changes, we change the consensus \
parameter.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So we don't need to change \
torflow.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;See this pad for our notes and \
calculations:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://pad.riseup.net/p/n3mEulClf6ZV"&gt;https://pad.riseup.net/p/n3mEulClf6ZV&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180330144607</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-03-30 14:46:07-0400</timestampReceived><subject>[tor-dev] Network team date change (this week only): 3 April, 1700 UTC</subject><body>

Hi!

Lots of people are away for Easter Monday (it's a holiday in some
countries!) so we're going to have our usual network-team meeting on
Tuesday instead of Monday, for this week only.  The time will be 1700
UTC as usual.

Also as usual, you don't need to be a network-team member to attend!
The meetings take place on the #tor-meeting IRC channel on OFTC.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180331065251</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2018-03-31 06:52:51-0400</timestampReceived><subject>[tor-dev] Proposal: The move to two guard nodes</subject><body>

[Attachment #2 (multipart/signed)]


In-line below for ease of comment. Also available at:
https://gitweb.torproject.org/user/mikeperry/torspec.git/tree/proposals/xxx-two-guard-nodes.txt?h=twoguards


===========================

Filename: xxx-two-guard-nodes.txt
Title: The move to two guard nodes
Author: Mike Perry
Created: 2018-03-22
Supersedes: Proposal 236

0. Background

  Back in 2014, Tor moved from three guard nodes to one guard node[1,2,3].

  We made this change primarily to limit points of observability of entry
  into the Tor network for clients and onion services, as well as to
  reduce the ability of an adversary to track clients as they move from
  one internet connection to another by their choice of guards.


1. Proposed changes

1.1. Switch to two guards per client

  When this proposal becomes effective, clients will switch to using
  two guard nodes. The guard node selection algorithms of Proposal 271
  will remain unchanged. Instead of having one primary guard "in use",
  Tor clients will always use two.

  This will be accomplished by setting the guard-n-primary-guards-to-use
  consensus parameter to 2, as well as guard-n-primary-guards to 2.
  (Section 3.1 covers the reason for both parameters). This is equivalent
  to using the torrc option NumEntryGuards=2, which can be used for
  testing behavior prior to the consensus update.

1.2. Enforce Tor's path restrictions across this guard layer

  In order to ensure that Tor can always build circuits using two guards
  without resorting to a third, they must be chosen such that Tor's path
  restrictions could still build a path with at least one of them,
  regardless of the other nodes in the path.

  In other words, we must ensure that both guards are not chosen from the
  same /16 or the same node family. In this way, Tor will always be able to
  build a path using these guards, preventing the use of a third guard.


2. Discussion

2.1. Why two guards?

  The main argument for switching to two guards is that because of Tor's
  path restrictions, we're already using two guards, but we're using them
  in a suboptimal and potentially dangerous way.

  Tor's path restrictions enforce the condition that the same node cannot
  appear twice in the same circuit, nor can nodes from the same /16 subnet
  or node family be used in the same circuit.

  Tor's paths are also built such that the exit node is chosen first and
  held fixed during guard node choice, as are the IP, HSDIR, and RPs for
  onion services. This means that whenever one of these nodes happens to
  be the guard[4], or be in the same /16 or node family as the guard, Tor
  will build that circuit using a second "primary" guard, as per proposal
  271[7].

  Worse still, the choice of RP, IP, and exit can all be controlled by an
  adversary (to varying degrees), enabling them to force the use of a
  second guard at will.

  Because this happens somewhat infrequently in normal operation, a fresh
  TLS connection will typically be created to the second "primary" guard,
  and that TLS connection will be used only for the circuit for that
  particular request. This property makes all sorts of traffic analysis
  attacks easier, because this TLS connection will not benefit from any
  multiplexing.

  This is more serious than traffic injection via an already in-use
  guard because the lack of multiplexing means that the data retention
  level required to gain information from this activity is very low, and
  may exist for other reasons. To gain information from this behavior, an
  adversary needs only connection 5-tuples + timestamps, as opposed to
  detailed timeseries data that is polluted by other concurrent activity
  and padding.

  In the most severe form of this attack, the adversary can take a suspect
  list of Tor client IP addresses (or the list of all Guard node IP addresses)
  and observe when secondary Tor connections are made to them at the time when
  they cycle through all guards as RPs for connections to an onion
  service. This adversary does not require collusion on the part of observers
  beyond the ability to provide 5-tuple connection logs (which ISPs may retain
  for reasons such as netflow accounting, IDS, or DoS protection systems).

  A fully passive adversary can also make use of this behavior. Clients
  unlucky enough to pick guard nodes in heavily used /16s or in large node
  families will tend to make use of a second guard more frequently even
  without effort from the adversary. In these cases, the lack of
  multiplexing also means that observers along the path to this secondary
  guard gain more information per observation.

2.2. Why not MOAR guards?

  We do not want to increase the number of observation points for client
  activity into the Tor network[1]. We merely want better multiplexing for
  the cases where this already happens.

2.3. Can you put some numbers on that?

  The Changing of the Guards[13] paper studies this from a few different
  angles, but one of the crucially missing graphs is how long a client
  can expect to run with N guards before it chooses a malicious guard.

  However, we do have tables in section 3.2.1 of proposal 247 that cover
  this[14]. There are three tables there: one for a 1% adversary, one for
  a 5% adversary, and one for a 10% adversary. You can see the probability
  of adversary success for one and two guards in terms of the number of
  rotations needed before the adversary's node is chosen. Not surprisingly,
  the two guard adversary gets to compromise clients roughly twice as
  quickly, but the timescales are still rather large even for the 10%
  adversary: they only have 50% chance of success after 4 rotations, which
  will take about 14 months with Tor's 3.5 month guard rotation.

2.4. What about guard fingerprinting?

  More guards also means more fingerprinting[8]. However, even one guard
  may be enough to fingerprint a user who moves around in the same area,
  if that guard is low bandwidth or there are not many Tor users in that
  area.

  Furthermore, our use of separate directory guards (and three of them)
  means that we're not really changing the situation much with the
  addition of another regular guard. Right now, directory guard use alone
  is enough to track all Tor users across the entire world.

  While the directory guard problem could be fixed[12] (and should be
  fixed), it is still the case that another mechanism should be used for
  the general problem of guard-vs-location management[9].


3. Alternatives

  There are two other solutions that also avoid the use of secondary guard
  in the path restriction case.

3.1. Eliminate path restrictions entirely

  If Tor decided to stop enforcing /16, node family, and also allowed the
  guard node to be chosen twice in the path, then under normal conditions,
  it should retain the use of its primary guard.

  This approach is not as extreme as it seems on face. In fact, it is hard
  to come up with arguments against removing these restrictions. Tor's
  /16 restriction is of questionable utility against monitoring, and it can
  be argued that since only good actors use node family, it gives influence
  over path selection to bad actors in ways that are worse than the benefit
  it provides to paths through good actors[10,11].

  However, while removing path restrictions will solve the immediate
  problem, it will not address other instances where Tor temporarily opts
  use a second guard due to congestion, OOM, or failure of its primary
  guard, and we're still running into bugs where this can be adversarially
  controlled or just happen randomly[5].

  While using two guards means twice the surface area for these types of
  bugs, it also means that instances where they happen simultaneously on
  both guards (thus forcing a third guard) are much less likely than with
  just one guard. (In the passive adversary model, consider that one guard
  fails at any point with probability P1. If we assume that such passive
  failures are independent events, both guards would fail concurrently
  with probability P1*P2. Even if the events are correlated, the maximum
  chance of concurrent failure is still MIN(P1,P2)).

  Note that for this analysis to hold, we have to ensure that nodes that
  are at RESOURCELIMIT or otherwise temporarily unresponsive do not cause
  us to consider other primary guards beyond than the two we have chosen.
  This is accomplished by setting guard-n-primary-guards to 2 (in addition
  to setting guard-n-primary-guards-to-use to 2). With this parameter
  set, the proposal 271 algorithm will avoid considering more than our two
  guards, unless *both* are down at once.

3.2. No Guard-flagged nodes as exit, RP, IP, or HSDIRs

  Similar to 3.1, we could instead forbid the use of Guard-flagged nodes
  for the exit, IP, RP, and HSDIR positions.

  This solution has two problems: First, like 3.1, it also does not handle
  the case where resource exhaustion could force the use of a second
  guard. Second, it requires clients to upgrade to the new behavior and
  stop using Guard flagged nodes before it can be deployed.


4. The future is confluxed

  An additional benefit of using a second guard is that it enables us to
  eventually use conflux[6].

  Conflux works by giving circuits a 256bit cookie that is sent to the
  exit/RP, and circuits that are then built to the same exit/RP with the
  same cookie can then be fused together. Throughput estimates are used to
  balance traffic between these circuits, depending on their performance.

  We have unfortunately signaled to the research community that conflux is
  not worth pursuing, because of our insistence on a single guard. While
  not relevant to this proposal (indeed, conflux requires its own proposal
  and also concurrent research), it is worth noting that whichever way we
  go here, the door remains open to conflux because of its utility against
  similar issues.

  If our conflux implementation includes packet acking, then circuits can
  still survive the loss of one guard node due to DoS, OOM, or other
  failures because the second half of the path will remain open and
  usable (see the probability of concurrent failure arguments in Section
  3.1).

  If exits remember this cookie for a short period of time after the last
  circuit is closed, the technique can be used to protect against
  DoS/OOM/guard downtime conditions that take down both guard nodes or
  destroy many circuits to confirm both guard node choices. In these
  cases, circuits could be rebuilt along an alternate path and resumed
  without end-to-end circuit connectivity loss. This same technique will
  also make things like ephemeral bridges (ie Snowflake/Flashproxy) more
  usable, because bridge uptime will no longer be so crucial to usability.
  It will also improve mobile usability by allowing us to resume
  connections after mobile Tor apps are briefly suspended, or if the user
  switches between cell and wifi networks.

  Furthermore, it is likely that conflux will also be useful against traffic
  analysis and congestion attacks. Since the load balancing is dynamic and
  hard to predict by an external observer and also increases overall
  traffic multiplexing, traffic correlation and website traffic
  fingerprinting attacks will become harder, because the adversary can no
  longer be sure what percentage of the traffic they have seen (depending
  on their position and other potential concurrent activity).  Similarly,
  it should also help dampen congestion attacks, since traffic will
  automatically shift away from a congested guard.



References:

1. https://blog.torproject.org/improving-tors-anonymity-changing-guard-parameters
2. https://trac.torproject.org/projects/tor/ticket/12206
3. https://gitweb.torproject.org/torspec.git/tree/proposals/236-single-guard-node.txt
4. https://trac.torproject.org/projects/tor/ticket/14917
5. https://trac.torproject.org/projects/tor/ticket/25347#comment:14
6. https://www.cypherpunks.ca/~iang/pubs/conflux-pets.pdf
7. https://gitweb.torproject.org/torspec.git/tree/proposals/271-another-guard-selection.txt
 8. https://trac.torproject.org/projects/tor/ticket/9273#comment:3
9. https://tails.boum.org/blueprint/persistent_Tor_state/
10. https://trac.torproject.org/projects/tor/ticket/6676#comment:3
11. https://bugs.torproject.org/15060
12. https://trac.torproject.org/projects/tor/ticket/10969
13. https://www.freehaven.net/anonbib/cache/wpes12-cogs.pdf
14. https://gitweb.torproject.org/torspec.git/tree/proposals/247-hs-guard-discovery.txt#n179


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180204150800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-04 15:08:00-0400</timestampReceived><subject>Re: [tor-dev] onionoo.tpo stuck at 2018-02-02 19:00</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


thank you for bringing it back!
--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180205165313</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-02-05 16:53:13-0400</timestampReceived><subject>Re: [tor-dev] onionoo: varnish 503</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2018-02-05 16:42, nusenu wrote:
&gt; https://onionoo.torproject.org/details?search=123
&gt;  
&gt;&gt; Error 503 Backend fetch failed
&gt;&gt;
&gt;&gt; Backend fetch failed
&gt;&gt; Guru Meditation:
&gt;&gt; Varnish cache server
&gt; 
&gt; 
&gt; thanks for having a look

Hmm, works just fine for me.

How about we move this issue (if you can reproduce it) to a Trac ticket
instead of this list? As long as you set metrics-team as owner or put it
into cc, I'll see it. Thanks!

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180205154200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-05 15:42:00-0400</timestampReceived><subject>[tor-dev] onionoo: varnish 503</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


https://onionoo.torproject.org/details?search=123
 
&gt; Error 503 Backend fetch failed
&gt; 
&gt; Backend fetch failed
&gt; Guru Meditation:
&gt; Varnish cache server


thanks for having a look

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180203223700</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-03 22:37:00-0400</timestampReceived><subject>[tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Dear Tor Developers,

I have been testing and using the torrc.d feature for a while, and
here is a potential improvement we may make.

Currently, when using a torrc.d directory, for example:
&gt; %include /etc/torrc.d/

Every file in the directory will be treated and parsed as a valid Tor
configuration file. However, sometime, this may not be what users and
developers want.

For example, users may use /etc/torrc.d/50_user.torrc as the place to
put their own torrc configurations. But sometimes, when they use a
text editor to edit it, the text editor will leave a
/etc/torrc.d/50_user.torrc~ file which will also be treated as a valid
torrc file.

Another example that also happens very frequently is, when dpkg does
an update on /etc/torrc.d/30_distribution.torrc, users' previous
configuration can be saved as
/etc/torrc.d/30_distribution.torrc.dpkg-old which will also be parsed
by Tor.

In best case users will just be frustrated because Tor does not work
as expected and in worst case this could be dangerous. This could be a
severe problem especially because of the following reasons:
1. filename.torrc~ filename.torrc.dpkg-old has higher priority than
filename.torrc when Tor does the parsing.
2. In most cases, this will happen without being noticed by the normal
suer.

Therefore, may I propose to let Tor parse only the files whose name
ends with .torrc ? Or maybe even only parse number_filename.torrc for
better consistency and for more clear priority order?

Thank you very much! Looking forward to hearing your insights!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlp2Oa0ACgkQoUtNvG3N
1TxfBA/9FfFhBfI08ocI6Wluodg58lppbG+N1LOGxoTSH2iq53P7GaWvZd9OULP1
ezTDbnlPJ3jreBYRnze8/MaUFA/x6wJTAcyM71xktwuR1Np47StY8ishZnbLpI5z
D7r65kKZyxrcCht99oSOFuqakVb0bFJJJRF1rvgt9gDHZT9+0V1/GVAv0w1SEb7J
LYazQyjtIgCJQaDdZvRsulnlBuFF6KvVNZp4EEKfggihM480SJV1gRExDBrEYQEN
BqtYixEe2P2MHPZSV7Szp28D87I391GwrHuLGsrlhL92OPPygVlc+Amyw9rEMij4
y/sXlSN+62Q2UV2CvFGzxSJBNhstJ4Meh91yKDf+Lm0CER5ydEUWtLJLYaIGmjS/
iQNQUd/6Y2dIyzeZuXFm03cfIXtQNdQFAhahNvNEeUOcJ4Qk4IsHXUi7MSzHcQTb
lv0E/2IzleXWp57L9rDPayA7eUpNMHlZkVyH42WunGcK+uz6PIT/bvBc5L1b/z3/
zkaPleDivBV5czlBtQIwRURibbUuveDtGfacM/3pmQ5XuYYaA6UvRExHePMeQvM+
Y01YTMlEcqL4LcjHSJiGamdWRPtGazbXVT1bl4VRJ1RqGqrvFE65I+xdg01UnSWy
tgsOUhEwrMUxUdsumNpb6sEgpUmZ/NzKbi7zgGywEmxVkUN67lc=
=zue4
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180207202349</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-07 20:23:49-0400</timestampReceived><subject>[tor-dev] Stem ORPort protocol support</subject><body>

Hi all. Over the last few months Tim and I have been collaborating on
Python support for the ORPort protocol. With it you can download
descriptors without a DirPort, and possibly fancier things in the
future like full circuit construction.

Tim put together a wonderful proof of concept called Endosome...

  https://github.com/teor2345/endosome

... and I just finished integrating it into Stem...

  https://gitweb.torproject.org/stem.git/tree/stem/client/__init__.py

With stem.client you can now download descriptors...

  import stem.client

  with stem.client.Relay.connect('127.0.0.1', 12345, [3]) as relay:
    circ = relay.create_circuit()
    circ.send('RELAY_BEGIN_DIR', stream_id = 1)
    desc = circ.send('RELAY_DATA', 'GET /tor/server/authority
HTTP/1.0\r\n\r\n', stream_id = 1).data
    circ.close()

    print(desc)

When run this looks like...

  % python demo.py
  HTTP/1.0 200 OK
  Date: Wed, 07 Feb 2018 18:42:41 GMT
  Content-Type: text/plain
  Content-Encoding: identity
  Expires: Fri, 09 Feb 2018 18:42:41 GMT

  router Unnamed 97.113.177.53 12345 0 23456
  identity-ed25519
  -----BEGIN ED25519 CERT-----
  AQQABm/qAazUltT1iUUbIMw8VNNhGb50FDHKJz6S94FLQNxL0LObAQAgBAAapbO9
  iLFD0l9SEiEMFQWIT2VnbLyCZKvbrxTs5ULC1l1hQPoui6Y/lEd3yjrQhIs/vl6R
  1S6FbwSFDmiXOzq47mFrse4C71ht3TpLOD0F3wiyjWtsqU1k7iPmmpejUgs=
  -----END ED25519 CERT-----
  master-key-ed25519 GqWzvYixQ9JfUhIhDBUFiE

I'd like to emphasize this is still very alpha. The API isn't set in
stone and there's no doubt quite a few rough edges. However, I wanted
the list to be aware just in case anyone would care to build on it. I
plan to draw a line at 'download descriptors through ORPorts' but I'd
be delighted to help others if there's more ambitious directions
they'd care to go (potentially all the way up to a Python Tor client,
similar to Orchid).

Now that we've reached this milestone I'm taking a break to focus on
Stem support for v3 Onion Services for a bit. However, when I come
back the next things on my dance card are...

  a. Support ORPort downloads in the stem.descriptor.remote module.
  b. More integ tests so Stem can be used as a tool for testing tor's ORPort.
  c. Give more thought to the API we'd like to vend.
  d. Brainstorm a GSoC project idea that expands these capabilities.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180205173955</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-05 17:39:55-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#239] "Consensus Chain Hashing"</subject><body>

[Attachment #2 (multipart/signed)]


This is happening in #tor-meeting on Thursday, 8 February, 21:00-22:00 UTC.
In various local times:

 * Thursday, 8 February, 13:00-14:00 PST
 * Thursday, 8 February, 16:00-17:00 EST
 * Thursday, 8 February, 22:00-23:00 CET
 * Friday, 9 February, 08:00-09:00 AEST


isis agora lovecruft transcribed 2.2K bytes:
&gt; Hello,
&gt; 
&gt; Let's schedule a proposal discussion for prop#239 "Consensus Hash Chaining"
&gt; [0] sometime next week (between 7 - 9 Feb).  If you're CCed, it's because
&gt; you put your name down on the pad as being interested in this discussion.
&gt; If anyone has requests or concerns, or if I forgot to take your timezone
&gt; into account, please let me know.
&gt; 
&gt; https://doodle.com/poll/iahmzu95hpvxciex
&gt; 
&gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/239-consensus-hash-chaining.txt


Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180213012600</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-02-13 01:26:00-0400</timestampReceived><subject>[tor-dev] Proposal: Authenticating sendme cells to mitigate bandwidth attacks</subject><body>

Filename: xxx-authenticated-sendmes.txt
Title: Authenticating sendme cells to mitigate bandwidth attacks
Author: Rob Jansen, Roger Dingledine
Created: 2016-12-01
Status: open

1. Overview and Motivation

   In Rob's "Sniper attack", a malicious Tor client builds a circuit,
   fetches a large file from some website, and then refuses to read any
   of the cells from the entry guard, yet sends "sendme" (flow control
   acknowledgement) cells down the circuit to encourage the exit relay
   to keep sending more cells. Eventually enough cells queue at the
   entry guard that it runs out of memory and exits [0, 1].

   We resolved the "runs out of memory and exits" part of the attack with
   our Out-Of-Memory (OOM) manager introduced in Tor 0.2.4.18-rc. But
   the earlier part remains unresolved: a malicious client can launch
   an asymmetric bandwidth attack by creating circuits and streams and
   sending a small number of sendme cells on each to cause the target
   relay to receive a large number of data cells.

   This attack could be used for general mischief in the network (e.g.,
   consume Tor network bandwidth resources or prevent access to relays),
   and it could probably also be leveraged to harm anonymity a la the
   "congestion attack" designs [2, 3].

   This proposal describes a way to verify that the client has seen all
   of the cells that its sendme cell is acknowledging, based on the
   authenticated sendmes design from [1].

2. Sniper Attack Variations

   There are some variations on the attack involving the number and
   length of the circuits and the number of Tor clients used. We explain
   them here to help understand which of them this proposal attempts to
   defend against.

   We compare the efficiency of these attacks in terms of the number of
   cells transferred by the adversary and by the network, where receiving
   and sending a cell counts as two transfers of that cell.

2.1 Single Circuit, without Sendmes

   The simplest attack is where the adversary starts a single Tor client,
   creates one circuit and two streams to some website, and stops
   reading from the TCP connection to the entry guard. The adversary
   gets 1000 "attack" cells "for free" (until the stream and circuit
   windows close). The attack data cells are both received and sent by the
   exit and the middle, while being received and queued by the guard.

   Adversary:
   6 transfers to create the circuit
   2 to begin the two exit connections
   2 to send the two GET requests
   ---
   10 total

   Network:
   18 transfers to create the circuit
   22 to begin the two exit connections (assumes two for the exit TCP connect)
   12 to send the two GET requests to the website
   5000 for requested data (until the stream and circuit windows close)
   ---
   5052 total

2.2 Single Circuit, with Sendmes

   A slightly more complex version of the attack in 2.1 is where the
   adversary continues to send sendme cells to the guard (toward the exit),
   and then gets another 100 attack data cells sent across the network for every
   three additional exitward sendme cells that it sends (two stream-level
   sendmes and one circuit-level sendme). The adversary also gets another
   three clientward sendme cells sent by the exit for every 100 exitward
   sendme cells it sends.

   If the adversary sends N sendmes, then we have:

   Adversary:
   10 for circuit and stream setup
   N for circuit and stream sendmes
   ---
   10+N

   Network:
   5052 for circuit and stream setup and initial depletion of circuit windows
   N*100/3*5 for transferring additional data cells from the website
   N*3/100*4 for transferring sendmes from exit to client
   ---
   5052 + N*166.79

   It is important to note that once the adversary stops reading from the
   guard, it will no longer get feedback on the speed at which the data
   cells are able to be transferred through the circuit from the exit
   to the guard. It needs to approximate when it should send sendmes
   to the exit; if too many sendmes are sent such that the circuit
   window would open farther than 1000 cells (500 for streams), then the
   circuit may be closed by the exit. In practice, the adversary could
   take measurements during the circuit setup process and use them to
   estimate a conservative sendme sending rate.

2.3 Multiple Circuits

   The adversary could parallelize the above attacks using multiple
   circuits. Because the adversary needs to stop reading from the TCP
   connection to the guard, they would need to do a pre-attack setup
   phase during which they construct the attack circuits. Then, they
   would stop reading from the guard and send all of the GET requests
   across all of the circuits they created.

   The number of cells from 2.1 and 2.2 would then be multiplied by the
   number of circuits C that the adversary is able to build and sustain
   during the attack.

2.4 Multiple Guards

   The adversary could use the "UseEntryGuards 0" torrc option, or build
   custom circuits with stem to parallelize the attack across multiple
   guard nodes. This would slightly increase the bandwidth usage of the
   adversary, since it would be creating additional TCP connections to
   guard nodes.

2.5 Multiple Clients

   The adversary could run multiple attack clients, each of which would
   choose its own guard. This would slightly increase the bandwidth
   usage of the adversary, since it would be creating additional TCP
   connections to guard nodes and would also be downloading directory
   info, creating testing circuits, etc.

2.6 Short Two-hop Circuits

   If the adversary uses two-hop circuits, there is less overhead
   involved with the circuit setup process.

   Adversary:
   4 transfers to create the circuit
   2 to begin the two exit connections
   2 to send the two GET requests
   ---
   8

   Network:
   8 transfers to create the circuit
   14 to begin the two exit connections (assumes two for the exit TCP connect)
   8 to send the two GET requests to the website
   5000 for requested data (until the stream and circuit windows close)
   ---
   5030

2.7 Long &gt;3-hop Circuits

   The adversary could use a circuit longer than three hops to cause more
   bandwidth usage across the network. Let's use an 8 hop circuit as an
   example.

   Adversary:
   16 transfers to create the circuit
   2 to begin the two exit connections
   2 to send the two GET requests
   ---
   20

   Network:
   128 transfers to create the circuit
   62 to begin the two exit connections (assumes two for the exit TCP connect)
   32 to send the two GET requests to the website
   15000 for requested data (until the stream and circuit windows close)
   ---
   15222

   The adversary could also target a specific relay, and use it multiple
   times as part of the long circuit, e.g., as hop 1, 4, and 7.

   Target:
   54 transfers to create the circuit
   22 to begin the two exit connections (assumes two for the exit TCP connect)
   12 to send the two GET requests to the website
   5000 for requested data (until the stream and circuit windows close)
   ---
   5088

3. Design

   This proposal aims to defend against the versions of the attack that
   utilize sendme cells without reading. It does not attempt to handle
   the case of multiple circuits per guard, or try to restrict the number
   of guards used by a client, or prevent a sybil attack across multiple
   client instances.

   The proposal involves three components: first, the client needs to add
   a token to the sendme payload, to prove that it knows the contents
   of the cells that it has received. Second, the exit relay needs to
   verify this token. Third, to resolve the case where the client already
   knows the contents of the file so it only pretends to read the cells,
   the exit relay needs to be able to add unexpected randomness to the
   circuit.

   (Note: this proposal talks about clients and exit relays, but since
   sendmes go in both directions, both sides of the circuit should do
   these changes.)

3.1. Changing the sendme payload to prove receipt of cells

   In short: clients put the latest received relay cell digest in the
   payload of their circuit-level sendme cells.

   Each relay cell header includes a 4-byte digest which represents
   the rolling hash of all bytes received on that circuit. So knowledge
   of that digest is an indication that you've seen the bytes that go
   into it.

   We pick circuit-level sendme cells, as opposed to stream-level sendme
   cells, because we think modifying just circuit-level sendmes is
   sufficient to accomplish the properties we need, and modifying just
   stream-level sendmes is not sufficient: a client could send a bunch
   of begin cells and fake their circuit-level sendmes, but never send
   any stream-level sendmes, attracting 500*n queued cells to the entry
   guard for the n streams that it opens.

   Which digest should the client put in the sendme payload? Right now
   circuit-level sendmes are sent whenever one window worth of relay cells
   (100) has arrived. So the client should use the digest from the cell
   that triggers the sendme.

   How shall we version the sendme payload so we can change the format of
   it later? Right now sendme payloads are empty. Here's a simple design:
   we use five bytes in the payload, where the first byte indicates the
   sendme payload version (0 in the original design, and 1 once we've
   implemented this proposal), and the rest of the payload is formatted
   based on the payload version number: in this case, it's simply the
   four bytes of digest.

   Is there a better way to version the payload, e.g. a way that is
   already standard in other parts of the design, so we aren't adding
   a new paint color to keep track of on the bike shed?

3.2. Verifying the sendme payload

   In the current Tor, the exit relay keeps no memory of the cells it
   has sent down the circuit, so it won't be in a position to verify
   the digest that it gets back.

   But fortunately, the exit relay can count also, so it knows which cell
   is going to trigger the sendme response. Each circuit can have at most
   10 sendmes worth of data outstanding. So the exit relay will keep
   a per-circuit fifo queue of the digests from the appropriate cells,
   and when a new sendme arrives, it pulls off the next digest in line,
   and verifies that it matches.

   If a sendme payload has a payload version of 1 yet its digest
   doesn't match the expected digest, or if the sendme payload has
   an unexpected payload version (see below about deployment phases),
   the exit relay must tear down the circuit. (If we later find that
   we need to introduce a newer payload version in an incompatible way,
   we would do that by bumping the circuit protocol version.)

3.3. Making sure there are enough unpredictable bytes in the circuit

   So far, the design as described fails to a very simple attacker:
   the client fetches a file whose contents it already knows, and it
   uses that knowledge to calculate the correct digests and fake its
   sendmes just like in the original attack.

   The fix is that the exit relay needs to be able to add some randomness
   into its cells. It can add this randomness, in a way that's completely
   orthogonal to the rest of this design, simply by choosing one relay
   cell every so often and not using the entire relay cell payload for
   actual data (i.e. using a Length field of less than 498), and putting
   some random bytes in the remainder of the payload.

   How many random bytes should the exit relay use, and how often should
   it use them? There is a tradeoff between security when under attack,
   and efficiency when not under attack. We think 1 byte of randomness
   every 1000 cells is a good starting plan, and we can always improve
   it later without needing to change any of the rest of this design.

   (Note that the spec currently says "The remainder of the payload
   is padded with NUL bytes." We think "is" doesn't mean MUST, so we
   should just be sure to update that part of the spec to reflect our
   new plans here.)

4. Deployment Plan

   In phase one, both sides begin remembering their expected digests,
   and they learn how to parse sendme payloads. When they receive a
   sendme with payload version 1, they verify its digest and tear down
   the circuit if it's wrong. But they continue to send and accept
   payload version 0 sendmes.

   In phase two, we flip a switch in the consensus, and everybody starts
   sending payload version 1 sendmes. Payload version 0 sendmes are
   still accepted.

   In phase three, we flip a different switch in the consensus, and
   everybody starts refusing payload version 0 sendmes.

   (It has to be two separate switches, not one unified one, because
   otherwise we'd have a race where relays learn about the update before
   clients know to start the new behavior.)

   We'll want to do a bunch of testing in chutney before flipping the
   switches in the real network: I've long suspected we still have bugs
   in our sendme timing, and this proposal might expose some of them.

   Alas, this deployment plan leaves a pretty large window until relays
   are protected from attack. It's not all bad news though, since we
   could flip the switches earlier than intended if we encounter a
   network-wide attack.

5. Security Discussion

   Does our design enable any new adversarial capabilities?

   An adversarial middle relay could attempt to trick the exit into
   killing an otherwise valid circuit.

   An adversarial relay can already kill a circuit, but here it could make
   it appear that the circuit was killed for a legitimate reason (invalid
   or missing sendme), and make someone else (the exit) do the killing.

   There are two ways it might do this: by trying to make a valid sendme
   appear invalid; and by blocking the delivery of a valid sendme. Both of
   these depend on the ability for the adversary to guess which exitward
   cell is a sendme cell, which it could do by counting clientward cells.

   * Making a valid sendme appear invalid

   A malicious middle could stomp bits in the exitward sendme so
   that the exit sendme validation fails. However, bit stomping would
   be detected at the protocol layer orthogonal to this design, and
   unrecognized exitward cells would currently cause the circuit to be
   torn down. Therefore, this attack has the same end result as blocking
   the delivery of a valid sendme.

   (Note that, currently, clientward unrecognized cells are dropped but
   the circuit is not torn down.)

   * Blocking delivery of a valid sendme

   A malicious middle could simply drop a exitward sendme, so that
   the exit is unable to verify the digest in the sendme payload. The
   following exitward sendme cell would then be misaligned with the
   sendme that the exit is expecting to verify. The exit would kill the
   circuit because the client failed to prove it has read all of the
   clientward cells.

   The benefits of such an attack over just directly killing the circuit
   seem low, and we feel that the added benefits of the defense outweigh
   the risks.

6. Open problems

   With the proposed defenses in place, an adversary will be unable to
   successfully use the "continue sending sendmes" part of these attacks.

   But this proposal won't resolve the "build up many circuits over time,
   and then use them to attack all at once" issue, nor will it stop
   sybil attacks like if an attacker makes many parallel connections to
   a single target relay, or reaches out to many guards in parallel.

   We spent a while trying to figure out if we can enforce some
   upper bound on how many circuits a given connection is allowed
   to have open at once, to limit every connection's potential for
   launching a bandwidth attack. But there are plausible situations
   where well-behaving clients accumulate many circuits over time:
   Ricochet clients with many friends, popular onion services, or even
   Tor Browser users with a bunch of tabs open.

   Even though a per-conn circuit limit would produce many false
   positives, it might still be useful to have it deployed and available
   as a consensus parameter, as another tool for combatting a wide-scale
   attack on the network: a parameter to limit the total number of
   open circuits per conn (viewing each open circuit as a threat) would
   complement the current work in #24902 to rate limit circuit creates
   per client address.

   But we think the threat of parallel attacks might be best handled by
   teaching relays to react to actual attacks, like we've done in #24902:
   we should teach Tor relays to recognize when somebody is *doing* this
   attack on them, and to squeeze down or outright block the client IP
   addresses that have tried it recently.

   An alternative direction would be to await research ideas on how guards
   might coordinate to defend against attacks while still preserving
   user privacy.

   In summary, we think authenticating the sendme cells is a useful
   building block for these future solutions, and it can be (and should
   be) done orthogonally to whatever sybil defenses we pick later.

7. References

   [0] https://blog.torproject.org/blog/new-tor-denial-service-attacks-and-defenses
   [1] https://www.freehaven.net/anonbib/#sniper14
   [2] https://www.freehaven.net/anonbib/#torta05
   [3] https://www.freehaven.net/anonbib/#congestion-longpaths

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213143329</emailId><senderName>Leonid Evdokimov</senderName><senderEmail>leon@darkk.net.ru</senderEmail><timestampReceived>2018-02-13 14:33:29-0400</timestampReceived><subject>[tor-dev] Atlas is not that friendly to Web Archive</subject><body>

[Attachment #2 (multipart/signed)]


Hello!

I've recently found out that new Atlas re-design is not that friendly to
web archive. http://archive.li/ can't properly detect "page loaded"
event that leads to capturing "loading" page[%]. Moreover,
https://web.archive.org/ can't capture #-based links at all, as far as I see.

[%] https://archive.li/https://atlas.torproject.org/%23details/5C3B8FB35A13C508CF65E8499E35755DA098DC93

Ability to archive atlas pages is kinda nice to be able to "cite" some
relay status in some specific date as Atlas has no it's own time machine
and information about relay is purged in a few days after relay going down.
https://archive.li/RzGpJ is better than https://archive.li/JGQRW :-)

I'm not a skilled frontend developer, but maybe trading some Time-to-DOM
making JS loading and onionoo.tpo request synchronous should be
enough to make website friendly for that sort of crawlers... But it's
unclear to me if T2DOM is valuable KPI for Atlas or not :)

What do you think?

-- 
WBRBW, Leonid Evdokimov, xmpp:leon@darkk.net.ru http://darkk.net.ru tel:+79816800702
PGP: 6691 DE6B 4CCD C1C1 76A0  0D4A E1F2 A980 7F50 FAB2

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180205174300</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-05 17:43:00-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/signed)]


Reminder to please vote for a time for this if you'd still like to attend!

isis agora lovecruft transcribed 2.2K bytes:
&gt; Hello,
&gt; 
&gt; Let's schedule a proposal discussion for prop#285 "Directory documents
&gt; should be standardized as UTF-8" [0] sometime between 12 - 13 Feb.  If
&gt; you're CCed, it's because you put your name down on the pad as being
&gt; interested in this discussion.  If anyone has requests or concerns, or if I
&gt; forgot to take your timezone into account, please let me know.
&gt; 
&gt; https://doodle.com/poll/cnc6scybbfpky5f8
&gt; 
&gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/285-utf-8.txt

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180212150900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-12 15:09:00-0400</timestampReceived><subject>Re: [tor-dev] moria1 had 756 HSDir flags in its vote but, the consensus had 2583</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt;&gt;&gt; NOTICE: moria1 had 756 HSDir flags in its vote but
&gt;&gt;&gt; the consensus had 2583
&gt;&gt;
&gt;&gt; I tried to find something related to this in the 0.3.3.x changelogs
&gt;&gt; because moria1 (the affected dirauth) is the only one running tor alpha
&gt;&gt; but I didn't find anything related to a change in what is required
&gt;&gt; to earn the HSDir flag. Has there been any change related to how
&gt;&gt; HSDir is assigned that would explain that significant difference?
&gt; 
&gt; This is because moria1 is running an experimental patch that drastically cut
&gt; down the number of voted HSDir. It has been doing that for a while now. I
&gt; can't recall the ticket but this was an attempt a while back to see how much
&gt; it would be bad to vote down for the most stable relays on the network to be
&gt; HSDir.
&gt; 
&gt; Roger can probably explain it better but all in all nothing to worried about
&gt; there as it is expected.

Thanks for the explanation!

I tried to find it on trac, I guess this is:
https://trac.torproject.org/projects/tor/ticket/19162




-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180211092100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-11 09:21:00-0400</timestampReceived><subject>[tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Damian and Tom,

Roger discovered that dannenberg did not include any exit flags
in certain votes anymore [1].

It would be great if we would detect and notify about such events in the future.

I see two places where this could be added:

DocTor: 
a new check that alerts on events where a certain dir auth does
either no longer include certain flags (guard, hsdir, exit, ..) at all
or better: if the amount of relays with a certain flag significantly dropped
by xx % from one vote to the next.

consenus-health graphs:
we have nice graphs per dirauth and bwauth, if we would have  
per-dirauthvote-per-flag (mainly guard, exit, hsdir - we have already running) 
graphs as well we could spot such events (and even trends)
better. (btw: what caused there recent flat-line in graphs on 2018-02-03 - 2018-02-05)

What do you think?


thanks for considering it,
nusenu


[1] https://lists.torproject.org/pipermail/tor-relays/2018-February/014480.html


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180212193241</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-02-12 19:32:41-0400</timestampReceived><subject>[tor-dev] Enhancement for Tor 0.3.4.x</subject><body>

[Attachment #2 (multipart/signed)]


Hello everone!

As an effort to better organize our 0.3.4.x release for which the merge window
opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
we want so we can better prioritize the development during the merge window
timeframe (3 months).

Each feature should have its ticket marked for 0.3.4 milestone and with an
Owner set so we know who is "leading" that effort. It doesn't have to be the
person who code the whole thing but should be a good point of contact to start
with (and it can change over time as well).

It is possible that an enhancement can have more than one ticket so in this
case, please make a "parent" ticket that explains the whole thing and child
tickets assigned to it.

The network team just had its weekly meeting and if I recall correctly, these
enhancement should be planned for 0.3.4 (please the people who works on this,
can you tell us the tickets and make sure they are up to date?)

- Privcount (prop#280)
- large CREATE cells (prop#249)

If you plan to do a set of patches for a feature or enhancement, please do
submit it on this thread and make sure a proper ticket exists with an Owner.

Also, if you just want something in 0.3.4 as enhancement but might not work on
it, it is also OK to propose it (ticket and all) but please lets try as much
as possible to keep that thread focused on doable work with tickets and not
just a "dump all my tor wishes" :). For this, open a ticket :).

Big thanks everyone!
David

-- 
1xYrq8XhE25CKCQqvcX/cqKg04v1HthMMM3PwaRqqdU=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180210041440</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-10 04:14:40-0400</timestampReceived><subject>[tor-dev] [prop-meeting] [prop#245] [prop#282] "Deprecating and removing the TAP circuit extension p</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

I know I said I wouldn't group meetings in bulkâ€¦ but there's a few
meetings which have the following in common:

 * Everyone who said they wished to attend is: me, teor, and nickm. ¹
 * The discussion should be fairly fast.
 * We're all (I suspect) already in agreement.
 * Every topic has to do with removing old/deprecated code.

So.  Let's schedule, sometime between 19 - 23 Feb, a proposal discussion for:

 * prop#245 "Deprecating and removing the TAP circuit extension protocol" [0]
 * prop#282 "Remove 'Named' and 'Unnamed' handling from consensus voting" [1]

https://doodle.com/poll/6m9xztyy4ufmeiwy

As always, please let me know if you'd really like to attend but I've not
taken your timezone into account.

[0]: https://gitweb.torproject.org/torspec.git/tree/proposals/245-tap-out.txt
[1]: https://gitweb.torproject.org/torspec.git/tree/proposals/282-remove-named-from-consensus.txt

 ¹ Please note that even if your name is not {isis,teor,nickm} that you are
  warmly welcome to attend and participate.

Best regards,
-- 
 â™¥â’¶ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180210212511</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-02-10 21:25:11-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#245] [prop#282] "Deprecating and removing the TAP circuit extensi</subject><body>

On Fri, Feb 9, 2018 at 11:14 PM, isis agora lovecruft
&lt;isis@torproject.org&gt; wrote:
&gt; Hello,
&gt;
&gt; I know I said I wouldn't group meetings in bulk… but there's a few
&gt; meetings which have the following in common:
&gt;

Hi! I'm afraid I don't know my schedule for that week yet, since my
kid is off school.  Please schedule this one without me: I'll try to
make it to the meeting at whatever time everybody else chooses.  If I
can't, I'll send notes and read notes.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180209191106</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-09 19:11:06-0400</timestampReceived><subject>[tor-dev] [prop-meeting] [prop#267] "Tor Consensus Transparency"</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

Let's schedule a proposal discussion for prop#267 "Tor Consensus
Transparency" [0] sometime between 14 - 16 Feb.  If you're CCed, it's
because you put your name down on the pad as being interested in this
discussion.  If anyone has requests or concerns, or if I forgot to take your
timezone into account, please let me know.

https://doodle.com/poll/a6ih5a4dqr9bdsie

Note that this meeting will likely run longer than an hour.  I'll try to
keep it as short as possible… but in the past this discussion has been long.

[0]: https://gitweb.torproject.org/torspec.git/tree/proposals/267-tor-consensus-transparency.txt

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180221170251</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2018-02-21 17:02:51-0400</timestampReceived><subject>[tor-dev] Proposal 290: Continuously update consensus methods</subject><body>

Filename: 290-deprecate-consensus-methods.txt
Title: Continuously update consensus methods
Author: Nick Mathewson
Created: 2018-02-21
Status: Open

1. Background

   Directory authorities use the "consensus method" mechanism to achieve
   forward compatibility during voting.  When each authority publishes
   its vote, it includes a list of numbered consensus methods that it
   supports.  Each authority chooses to calculate the consensus
   according to the highest consensus method it knows supported by more
   than 2/3 of the voting authorities.  So long as all the authorities
   have a method in common, they will all reach the same consensus.

   Consensus method 1 was first introduced in the Tor 0.2.0 series
   around 2008. But by 2012, we realized that we had a problem: we were
   stuck documenting and supporting old consensus methods indefinitely.

   With proposal 215, we deprecated and removed support for all
   consensus methods before method 13.  That was good as far as it went,
   but it didn't solve the problem going forward: the latest consensus
   methods is now 28.

   This proposal describes a policy for removing older consensus methods
   going forward, so we won't have to keep supporting them forever.

2. Proposal

   I propose that from time to time, old consensus methods should be
   deprecated.

   Specifically, I propose that we deprecate all methods older than the
   highest method supported in first stable release of the oldest LTS
   (long-term support) release series.

   For example, the current oldest LTS series is 0.2.5.x.  The first
   stable release in that series was 0.2.5.10.  The highest consensus
   method listed by 0.2.5.10 is 18.  Therefore, we should currently
   consider ourselves free to deprecate all methods before 18.

   Once 0.2.5.x is deprecated, 0.2.9.x will become the oldest LTS
   series.  The first stable release in that series was 0.2.9.8.  The
   highest consensus method listed by 0.2.9.8 is 25.  Therefore, once
   0.2.5.x is deprecated (in May 2018), we may deprecate all methods
   before 25.

   When a consensus method is deprecated, it should no longer be listed
   or implemented by the latest Tor releases.  (It's okay for older
   authorities to keep advertising it.)

   Most consensus methods add a feature that is used in "method M or
   later". Deprecating method M-1 means that the feature is used in all
   supported consensus methods. Therefore, we can remove any code that
   makes the feature conditional on a consensus method, and any code for
   previous implementations of the feature.

   Some consensus methods remove a feature that was used up to method
   N. Deprecating method M means that the feature is no longer used by
   any supported consensus methods. Therefore, we can remove any code
   that implements the feature.

A. Acknowledgments

   Thanks to isis and teor for the discussion that led to this proposal.
   I believe that teor first suggested the policy described in section 2
   above.

B. Client and relay compatibility notes

   Dear reader: you may be worrying that this proposal will cause old
   clients or relays to stop working prematurely.  That is not the case.
   Consensus methods determine how the authorities behave, but they do
   not represent backward-incompatible changes in how they generate
   their consensuses.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180226052606</emailId><senderName>procmem</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2018-02-26 05:26:06-0400</timestampReceived><subject>[tor-dev] Creating custom Tor Browser settings profile</subject><body>

Hi I was wondering if Tor Broswer supports environment variables to
customize about:config settings.

The idea is to ship an explicitly labelled, custom profile one day to
allow users seamless access to localhost daemons (like zeronet) by
changing network.proxy.no_proxies_on to 0 - so they don't have to jump
thru hoops or install foreign code like foxyproxy. At the same time, a
separate browser profile affords regular users protection by keeping
these fingerprinatble, non default settings contained and only used when
the user needs them.

Any way to do this?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180227184700</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-27 18:47:00-0400</timestampReceived><subject>[tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Damian,

would be great to have a check in DocTor that sends out an email
for "there are less than 3 bw auth voting auths available"

thanks,
nusenu

--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180227202749</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-27 20:27:49-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>


&gt; On 28 Feb 2018, at 05:47, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; 
&gt; Hi Damian,
&gt; 
&gt; would be great to have a check in DocTor that sends out an email
&gt; for "there are less than 3 bw auth voting auths available"

Let's have two different checks:
"There are less than 3 bw auth votes in a consensus"
"There are a large number of unmeasured relays"

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180227203746</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-27 20:37:46-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

Hi nusenu, hi teor. We already have a check that we have the expected
bandwidth authorities...

https://gitweb.torproject.org/doctor.git/tree/consensus_health_checker.py#n541

... and that they're reasonably in sync...

https://gitweb.torproject.org/doctor.git/tree/consensus_health_checker.py#n744
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180227210100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-27 21:01:00-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Damian Johnson:
&gt; Hi nusenu, hi teor. We already have a check that we have the expected
&gt; bandwidth authorities...
&gt; 

By reading today's emails from 
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-consensus-health

it is not clear that we are currently with &lt;3 bw auths - would be nice to have that.
ideally with a string in the subject for easy catching in subject-based filters.
https://trac.torproject.org/projects/tor/ticket/25222

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180227213148</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-27 21:31:48-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

Hi nusenu, the notice pretty clearly says that one isn't present...

"NOTICE: The following directory authorities are not reporting
bandwidth scanner results: gabelmoo"
https://lists.torproject.org/pipermail/tor-consensus-health/2018-February/008624.html

You're right that it doesn't tell you the number of authorities that
vote. If you'd care to add that to the message then feel free.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180227235800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-27 23:58:00-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Hi nusenu, the notice pretty clearly says that one isn't present...
&gt; 
&gt; "NOTICE: The following directory authorities are not reporting
&gt; bandwidth scanner results: gabelmoo"
&gt; https://lists.torproject.org/pipermail/tor-consensus-health/2018-February/008624.html
(email from Tue Feb 27 07:05:55 UTC 2018)

"one" missing bw auth will not result in "&lt;3 bw auth votes available".

2018-02-27 16:00 UTC was the first consensus on 2018-02-27 with "&lt;3 bwauth votes".

I get the feeling that I'm annoying you so I'll try to stop that by avoiding any further
such DocTor requests.

thanks for stem,
nusenu
 

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180217204323</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-02-17 20:43:23-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#267] "Tor Consensus Transparency"</subject><body>

On 17 February 2018 at 00:31, isis agora lovecruft
&lt;isis@patternsinthevoid.net&gt; wrote:
&gt; 1. Tuesdays @ 18:00 UTC (10:00 PST/13:00 EST/20:00 CET/05:00+1 AEDT)

This time works for me.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180217214020</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-17 21:40:20-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#267] "Tor Consensus Transparency"</subject><body>

I'm sorry, I didn't get Isis' original email, I think my spam folder ate it.

Can you please re-send?

&gt; On 18 Feb 2018, at 07:43, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; 
&gt; On 17 February 2018 at 00:31, isis agora lovecruft
&gt; &lt;isis@patternsinthevoid.net&gt; wrote:
&gt;&gt; 1. Tuesdays @ 18:00 UTC (10:00 PST/13:00 EST/20:00 CET/05:00+1 AEDT)
&gt; 
&gt; This time works for me.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213180350</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-02-13 18:03:50-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>

On Mon, Feb 12, 2018 at 2:32 PM, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; Hello everone!
&gt;
&gt; As an effort to better organize our 0.3.4.x release for which the merge window
&gt; opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
&gt; we want so we can better prioritize the development during the merge window
&gt; timeframe (3 months).
&gt;
&gt; Each feature should have its ticket marked for 0.3.4 milestone and with an
&gt; Owner set so we know who is "leading" that effort. It doesn't have to be the
&gt; person who code the whole thing but should be a good point of contact to start
&gt; with (and it can change over time as well).
&gt;
&gt; It is possible that an enhancement can have more than one ticket so in this
&gt; case, please make a "parent" ticket that explains the whole thing and child
&gt; tickets assigned to it.
&gt;
&gt; The network team just had its weekly meeting and if I recall correctly, these
&gt; enhancement should be planned for 0.3.4 (please the people who works on this,
&gt; can you tell us the tickets and make sure they are up to date?)
&gt;
&gt; - Privcount (prop#280)
&gt; - large CREATE cells (prop#249)
&gt;
&gt; If you plan to do a set of patches for a feature or enhancement, please do
&gt; submit it on this thread and make sure a proper ticket exists with an Owner.

My biggest additional wishlist items for 0.3.4 are:

  * ZSTD tuning (#24368)
  * Fewer wakeups when idle (#14039)

And as a reach:
  * Improved TLS 1.3 support

We should also keep in mind that as we accumulate these goals, we
might also need to pare them down if they start to get out of hand.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213194437</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2018-02-13 19:44:37-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>

[Attachment #2 (multipart/alternative)]


If its just a wishlist I would love to see

1. More multithreading for Tor.

2. new technology against traffic correlation/confirmation attacks by
adding some mixing features like I said long ago:

Relay operators with great RAM set the flag mixing for their relays.
These relays could be used as normal or mixing relays (delaying packets,
mixing them and sending more noise data maybe?). Tor clients will have
to specify if they want to build a normal circuit connection (fast) or a
mixing connection, slow, but more anonymous.

3. a config value for forbidding that all nodes in a circuit be from the
same country (to make traffic analysis harder..., some countries like UK
seems to be using it already).

4. An easy way for people to setup a home relay from their computer? For
Windows users? As more and more users get access to Fiber with symmetric
speed, the slow speed and asymmetric problem is not here anymore. IDK.


El 12/02/18 a las 20:32, David Goulet escribió:
&gt; Hello everone!
&gt;
&gt; As an effort to better organize our 0.3.4.x release for which the merge window
&gt; opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
&gt; we want so we can better prioritize the development during the merge window
&gt; timeframe (3 months).
&gt;
&gt; Each feature should have its ticket marked for 0.3.4 milestone and with an
&gt; Owner set so we know who is "leading" that effort. It doesn't have to be the
&gt; person who code the whole thing but should be a good point of contact to start
&gt; with (and it can change over time as well).
&gt;
&gt; It is possible that an enhancement can have more than one ticket so in this
&gt; case, please make a "parent" ticket that explains the whole thing and child
&gt; tickets assigned to it.
&gt;
&gt; The network team just had its weekly meeting and if I recall correctly, these
&gt; enhancement should be planned for 0.3.4 (please the people who works on this,
&gt; can you tell us the tickets and make sure they are up to date?)
&gt;
&gt; - Privcount (prop#280)
&gt; - large CREATE cells (prop#249)
&gt;
&gt; If you plan to do a set of patches for a feature or enhancement, please do
&gt; submit it on this thread and make sure a proper ticket exists with an Owner.
&gt;
&gt; Also, if you just want something in 0.3.4 as enhancement but might not work on
&gt; it, it is also OK to propose it (ticket and all) but please lets try as much
&gt; as possible to keep that thread focused on doable work with tickets and not
&gt; just a "dump all my tor wishes" :). For this, open a ticket :).
&gt;
&gt; Big thanks everyone!
&gt; David
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;If its just a wishlist I would love to see &lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;1. More multithreading for Tor. &lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;2. new technology against traffic correlation/confirmation
      attacks by adding some mixing features like I said long ago:&lt;/p&gt;
    &lt;p&gt;Relay operators with great RAM set the flag mixing for their
      relays. These relays could be used as normal or mixing relays
      (delaying packets, mixing them and sending more noise data
      maybe?). Tor clients will have to specify if they want to build a
      normal circuit connection (fast) or a mixing connection, slow, but
      more anonymous.&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;3. a config value for forbidding that all nodes in a circuit be
      from the same country (to make traffic analysis harder..., some
      countries like UK seems to be using it already).&lt;/p&gt;
    &lt;p&gt;4. An easy way for people to setup a home relay from their
      computer? For Windows users? As more and more users get access to
      Fiber with symmetric speed, the slow speed and asymmetric problem
      is not here anymore. IDK.&lt;br&gt;
    &lt;/p&gt;
    &lt;br&gt;
    &lt;div class="moz-cite-prefix"&gt;El 12/02/18 a las 20:32, David Goulet
      escribió:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite" cite="mid:20180212193241.GK9634@raoul"&gt;
      &lt;pre wrap=""&gt;Hello everone!

As an effort to better organize our 0.3.4.x release for which the merge window
opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
we want so we can better prioritize the development during the merge window
timeframe (3 months).

Each feature should have its ticket marked for 0.3.4 milestone and with an
Owner set so we know who is "leading" that effort. It doesn't have to be the
person who code the whole thing but should be a good point of contact to start
with (and it can change over time as well).

It is possible that an enhancement can have more than one ticket so in this
case, please make a "parent" ticket that explains the whole thing and child
tickets assigned to it.

The network team just had its weekly meeting and if I recall correctly, these
enhancement should be planned for 0.3.4 (please the people who works on this,
can you tell us the tickets and make sure they are up to date?)

- Privcount (prop#280)
- large CREATE cells (prop#249)

If you plan to do a set of patches for a feature or enhancement, please do
submit it on this thread and make sure a proper ticket exists with an Owner.

Also, if you just want something in 0.3.4 as enhancement but might not work on
it, it is also OK to propose it (ticket and all) but please lets try as much
as possible to keep that thread focused on doable work with tickets and not
just a "dump all my tor wishes" :). For this, open a ticket :).

Big thanks everyone!
David

&lt;/pre&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;br&gt;
      &lt;pre wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180215022239</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-15 02:22:39-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>



&gt; On 13 Feb 2018, at 06:32, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; Hello everone!
&gt; 
&gt; As an effort to better organize our 0.3.4.x release for which the merge window
&gt; opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
&gt; we want so we can better prioritize the development during the merge window
&gt; timeframe (3 months).
&gt; 
&gt; Each feature should have its ticket marked for 0.3.4 milestone and with an
&gt; Owner set so we know who is "leading" that effort. It doesn't have to be the
&gt; person who code the whole thing but should be a good point of contact to start
&gt; with (and it can change over time as well).
&gt; 
&gt; It is possible that an enhancement can have more than one ticket so in this
&gt; case, please make a "parent" ticket that explains the whole thing and child
&gt; tickets assigned to it.
&gt; 
&gt; The network team just had its weekly meeting and if I recall correctly, these
&gt; enhancement should be planned for 0.3.4 (please the people who works on this,
&gt; can you tell us the tickets and make sure they are up to date?)
&gt; 
&gt; - Privcount (prop#280)

Now superseded by prop#288. We expect at least one more proposal for the
PrivCount counter config format.

#22898: Help get privcount standardized and merged

#23147: prop288: Merge privcount-in-tor data collector backend implementation
#25153: Specify how PrivCount in Tor statistics are configured and interpreted

As a stretch, we could implement part of the Tally Reporters (see prop#288).

While I am implementing PrivCount in Rust, I will also fix or replace similar
code in the C statistics implementation:

#25263: Fix the hidden service statistics noise

&gt; If you plan to do a set of patches for a feature or enhancement, please do
&gt; submit it on this thread and make sure a proper ticket exists with an Owner.

There are a lot of other things I'd like to do in 0.3.4, but I think I
should focus on PrivCount in Tor.

T

-- 
teor

PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180219171424</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-02-19 17:14:24-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Feb (14:32:41), David Goulet wrote:
&gt; Hello everone!
&gt; 
&gt; As an effort to better organize our 0.3.4.x release for which the merge window
&gt; opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
&gt; we want so we can better prioritize the development during the merge window
&gt; timeframe (3 months).

On my part, I plan to have some scheduler refactoring/changes that requires
quite a bit of changes in the scheduler architecture but overall should
simplify greatly things with Vanilla and KIST (and future schedulers).

- Parent ticket: #23993
  All child tickets are fixes that need to happen for this.
- This will touch also our circuit multiplexing and the connection subystem as
  well (mostly how the outbuf interacts with the scheduler).

The other part would be IPv6 for HSv3. This includes:

- Unify link specifier API/ABI (#22781)
- Put IPv6 link specifiers in client EXTEND cells (#24451)
- Put IPv6 and unrecognised link specifiers in onion service EXTEND cells
  (#24181)
- Put IPv6 link specifier in HS descriptor. (not ticket afaict).

There is a huge amount of IPv6 tickets with different tasks, I'll create a top
level parent "Hidden service v3 IPv6 support" ticket and child many tickets
related to this because right now it is hella confusing so we can consolidate
in one place and track progress there. It should also include single onion.

It will for sure touches other part of Tor that aren't HS specific so
hopefully we can overlap this with useful IPv6 implementation work.

That is it for now, in terms of features, I think this is reasonable to be
completed and merged in the next 3 months for 034 merge window.

Cheers!
David

-- 
s2OgTxgPSliwm2a67jagCGlxYAy4npmC5/sM0nssJR0=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180219195434</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-19 19:54:34-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>



&gt; On 20 Feb 2018, at 04:14, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; The other part would be IPv6 for HSv3. This includes:
&gt; 
&gt; - Unify link specifier API/ABI (#22781)
&gt; - Put IPv6 link specifiers in client EXTEND cells (#24451)
&gt; - Put IPv6 and unrecognised link specifiers in onion service EXTEND cells
&gt;  (#24181)
&gt; - Put IPv6 link specifier in HS descriptor. (not ticket afaict).
&gt; 
&gt; There is a huge amount of IPv6 tickets with different tasks, I'll create a top
&gt; level parent "Hidden service v3 IPv6 support" ticket and child many tickets
&gt; related to this because right now it is hella confusing so we can consolidate
&gt; in one place and track progress there. It should also include single onion.
&gt; 
&gt; It will for sure touches other part of Tor that aren't HS specific so
&gt; hopefully we can overlap this with useful IPv6 implementation work.

I don't know how much time I will have to work on IPv6 in 0.3.4.
But I can prioritise reviewing proposals and code, and revising my existing
code.

Here are some dependencies:

HSv3 IPv6 needs relays to allow IPv6 extends:
#24404 Propose a relay protover that allows IPv6 extends

We also wanted to make relays do IPv6 extends first, to create cover traffic:
#24403 Propose and implement IPv6 ORPort reachability checks on relays

But we can use a consensus parameter instead:
#24868 Check a consensus parameter before activating onion service IPv6 features

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180211205852</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-11 20:58:52-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

Thanks nusenu! Nice idea, added it to DocTor...

https://gitweb.torproject.org/doctor.git/commit/?id=8945013

It gives a notice if flags issued by an authority are 50% different
from the conensus. Presently there's only one instance of that...

[consensus-health] NOTICE: moria1 had 756 HSDir flags in its vote but
the consensus had 2583

On Sun, Feb 11, 2018 at 1:21 AM, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; Hi Damian and Tom,
&gt;
&gt; Roger discovered that dannenberg did not include any exit flags
&gt; in certain votes anymore [1].
&gt;
&gt; It would be great if we would detect and notify about such events in the future.
&gt;
&gt; I see two places where this could be added:
&gt;
&gt; DocTor:
&gt; a new check that alerts on events where a certain dir auth does
&gt; either no longer include certain flags (guard, hsdir, exit, ..) at all
&gt; or better: if the amount of relays with a certain flag significantly dropped
&gt; by xx % from one vote to the next.
&gt;
&gt; consenus-health graphs:
&gt; we have nice graphs per dirauth and bwauth, if we would have
&gt; per-dirauthvote-per-flag (mainly guard, exit, hsdir - we have already running)
&gt; graphs as well we could spot such events (and even trends)
&gt; better. (btw: what caused there recent flat-line in graphs on 2018-02-03 - 2018-02-05)
&gt;
&gt; What do you think?
&gt;
&gt;
&gt; thanks for considering it,
&gt; nusenu
&gt;
&gt;
&gt; [1] https://lists.torproject.org/pipermail/tor-relays/2018-February/014480.html
&gt;
&gt;
&gt; --
&gt; https://mastodon.social/@nusenu
&gt; twitter: @nusenu_
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180211212100</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-11 21:21:00-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Thanks nusenu! Nice idea, added it to DocTor...

thanks for implementing the new check so fast.
 
&gt; https://gitweb.torproject.org/doctor.git/commit/?id=8945013
&gt; 
&gt; It gives a notice if flags issued by an authority are 50% different
&gt; from the conensus. Presently there's only one instance of that...

This is also very useful but slightly different from what I had in mind,
because it would not trigger if dirauths upgrade from A to B in the 
same hour and most exits, guards or hsdirs are gone due to a bug in version B.

 
&gt; NOTICE: moria1 had 756 HSDir flags in its vote but
&gt; the consensus had 2583

I tried to find something related to this in the 0.3.3.x changelogs
because moria1 (the affected dirauth) is the only one running tor alpha
but I didn't find anything related to a change in what is required
to earn the HSDir flag. Has there been any change related to how
HSDir is assigned that would explain that significant difference?


-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180211212254</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2018-02-11 21:22:54-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

I think the doctor notification is the best mechanism.

I'm not opposed to adding more graphs to consensus-health, but I think
I'd want to coordinate with the metrics team. There was talk about
them absorbing consensus health in some capacity, so I'd prefer to
avoid doing a lot of work on graphs if it's going to be redone or
throw away.

The host running depictor was down for several days, which explains
the gap in data.

Thanks for the thoughts!

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180212015909</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-12 01:59:09-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

&gt; thanks for implementing the new check so fast.

No problem! Thanks for suggesting it.

&gt; This is also very useful but slightly different from what I had in mind,
&gt; because it would not trigger if dirauths upgrade from A to B in the
&gt; same hour and most exits, guards or hsdirs are gone due to a bug in version B.

This should catch a bug with B unless every authority upgrades to B in
the same hour. Otherwise we'd get an alert - either because the
majority is B and the remaining A votes are out of band, or the
consensus is made with A and authorities that upgraded to B are
different.

Is there another check in particular that you'd like? One gotcha is
that checks that require state (such as comparing with the last hour's
consensus) is a bit more work.

&gt; I tried to find something related to this in the 0.3.3.x changelogs
&gt; because moria1 (the affected dirauth) is the only one running tor alpha
&gt; but I didn't find anything related to a change in what is required
&gt; to earn the HSDir flag. Has there been any change related to how
&gt; HSDir is assigned that would explain that significant difference?

For what it's worth I started with alarming when authorities differed
more than 20% from the consensus but it was a bit noisier...

[consensus-health] NOTICE: longclaw had 3100 HSDir flags in its vote
but the consensus had 2583
[consensus-health] NOTICE: moria1 had 756 HSDir flags in its vote but
the consensus had 2583
[consensus-health] NOTICE: moria1 had 1397 Guard flags in its vote but
the consensus had 1761
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180212144933</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2018-02-12 14:49:33-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

[Attachment #2 (multipart/signed)]


On 11 Feb (21:21:00), nusenu wrote:
&gt; &gt; Thanks nusenu! Nice idea, added it to DocTor...
&gt; 
&gt; thanks for implementing the new check so fast.
&gt;  
&gt; &gt; https://gitweb.torproject.org/doctor.git/commit/?id=8945013
&gt; &gt; 
&gt; &gt; It gives a notice if flags issued by an authority are 50% different
&gt; &gt; from the conensus. Presently there's only one instance of that...
&gt; 
&gt; This is also very useful but slightly different from what I had in mind,
&gt; because it would not trigger if dirauths upgrade from A to B in the 
&gt; same hour and most exits, guards or hsdirs are gone due to a bug in version B.
&gt; 
&gt;  
&gt; &gt; NOTICE: moria1 had 756 HSDir flags in its vote but
&gt; &gt; the consensus had 2583
&gt; 
&gt; I tried to find something related to this in the 0.3.3.x changelogs
&gt; because moria1 (the affected dirauth) is the only one running tor alpha
&gt; but I didn't find anything related to a change in what is required
&gt; to earn the HSDir flag. Has there been any change related to how
&gt; HSDir is assigned that would explain that significant difference?

This is because moria1 is running an experimental patch that drastically cut
down the number of voted HSDir. It has been doing that for a while now. I
can't recall the ticket but this was an attempt a while back to see how much
it would be bad to vote down for the most stable relays on the network to be
HSDir.

Roger can probably explain it better but all in all nothing to worried about
there as it is expected.

Actually, from time to time, you should expect moria1 to behave strangely
sometimes since it is often running alpha code :).

Cheers!
David

-- 
And8vxUcJVOn9srRjJ3mpKMUC5pScfYMRq9Qv9yt54Y=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180212151200</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-12 15:12:00-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Damian Johnson:
&gt;&gt; thanks for implementing the new check so fast.
&gt; 
&gt; No problem! Thanks for suggesting it.
&gt; 
&gt;&gt; This is also very useful but slightly different from what I had in mind,
&gt;&gt; because it would not trigger if dirauths upgrade from A to B in the
&gt;&gt; same hour and most exits, guards or hsdirs are gone due to a bug in version B.
&gt; 
&gt; This should catch a bug with B unless every authority upgrades to B in
&gt; the same hour. Otherwise we'd get an alert - either because the
&gt; majority is B and the remaining A votes are out of band, or the
&gt; consensus is made with A and authorities that upgraded to B are
&gt; different.
&gt; 
&gt; Is there another check in particular that you'd like?

Yes, but not directly related to this thread. I will file it via trac.tpo.

&gt; One gotcha is
&gt; that checks that require state (such as comparing with the last hour's
&gt; consensus) is a bit more work.

Yes, that is what I was wondering if DocTor keeps any state at all already.

&gt;&gt; I tried to find something related to this in the 0.3.3.x changelogs
&gt;&gt; because moria1 (the affected dirauth) is the only one running tor alpha
&gt;&gt; but I didn't find anything related to a change in what is required
&gt;&gt; to earn the HSDir flag. Has there been any change related to how
&gt;&gt; HSDir is assigned that would explain that significant difference?
&gt; 
&gt; For what it's worth I started with alarming when authorities differed
&gt; more than 20% from the consensus but it was a bit noisier...
&gt; 
&gt; [consensus-health] NOTICE: longclaw had 3100 HSDir flags in its vote
&gt; but the consensus had 2583
&gt; [consensus-health] NOTICE: moria1 had 756 HSDir flags in its vote but
&gt; the consensus had 2583
&gt; [consensus-health] NOTICE: moria1 had 1397 Guard flags in its vote but
&gt; the consensus had 1761

I assume this has not been deployed - 50% or maybe 40% are fine I guess. 
To come up with good threshold values
one would need to look at historic data for the past few months.



-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180212163113</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-12 16:31:13-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

&gt; I assume this has not been deployed - 50% or maybe 40% are fine I guess.
&gt; To come up with good threshold values
&gt; one would need to look at historic data for the past few months.

Nope, it is deployed (if by 'deployed' you mean DocTor is presently
performing this check). From David's reply about moria1 it sounds like
any check of this sort may be a red herring since they experiment with
moria1, but I'll leave that up to you guys. Just let me know what kind
of check you want.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180215175119</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-02-15 17:51:19-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

On Mon, Feb 12, 2018 at 08:31:13AM -0800, Damian Johnson wrote:
&gt; Nope, it is deployed (if by 'deployed' you mean DocTor is presently
&gt; performing this check). From David's reply about moria1 it sounds like
&gt; any check of this sort may be a red herring since they experiment with
&gt; moria1, but I'll leave that up to you guys. Just let me know what kind
&gt; of check you want.

It might be smartest to just put in an exception for moria1's
HSDir votes, since we know it's being different.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180216231000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-16 23:10:00-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Roger Dingledine:
&gt; It might be smartest to just put in an exception for moria1's
&gt; HSDir votes, since we know it's being different.

yes, please :)

and it would also be nice to have:
https://trac.torproject.org/projects/tor/ticket/25222

so we can filter for those emails that we care about most
(or filter those that we do not care about)

--=20
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180205201644</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-05 20:16:44-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/signed)]


This one is in #tor-meeting, next Monday, 12 February from 21:00-22:00 UTC.
In local times:

 * Monday, 12 February 13:00-14:00 PST
 * Monday, 12 February 16:00-17:00 EST
 * Monday, 12 February 22:00-23:00 CET
 * Tuesday, 13 February 08:00-09:00 AEST

isis agora lovecruft transcribed 2.3K bytes:
&gt; Reminder to please vote for a time for this if you'd still like to attend!
&gt; 
&gt; isis agora lovecruft transcribed 2.2K bytes:
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; Let's schedule a proposal discussion for prop#285 "Directory documents
&gt; &gt; should be standardized as UTF-8" [0] sometime between 12 - 13 Feb.  If
&gt; &gt; you're CCed, it's because you put your name down on the pad as being
&gt; &gt; interested in this discussion.  If anyone has requests or concerns, or if I
&gt; &gt; forgot to take your timezone into account, please let me know.
&gt; &gt; 
&gt; &gt; https://doodle.com/poll/cnc6scybbfpky5f8
&gt; &gt; 
&gt; &gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/285-utf-8.txt

-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180212235522</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-12 23:55:22-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/signed)]


Hi!

The notes from this meeting are online. [0] Thanks to everyone who
attended!  Extra thanks to teor for conducting the meeting since I was
stupidly 8 minutes late due to impatiently watching a kettle boil
after eating very spicy cioppino and then *extremely* needing a glass
of iced tea immediately.

We found some issues w.r.t. the specifics of the proposal, but overall
we've agreed that it should be accepted in (roughly, after some minor
revision) in its current state.  As such, it is looking for someone
interested in implementing it!  (THIS COULD BE YOU)

A couple outcomes of this:

 1. What passes for "canonicalised" "utf-8" in C will be different to
    what passes for "canonicalised" "utf-8" in Rust.  In C, the
    following will not be allowed (whereas they are allowed in Rust):
        - NUL (0x00)
        - Byte Order Mark (0xFEFF)

 2. Directory document keywords MUST be printable ASCII.

 3. This change may break some descriptor/consensus/document parsers.
    If you are the maintainer of a parser, you may want to start
    thinking about this now.

[0]: http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-02-12-21.04.html

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180213000354</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-13 00:03:54-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>


&gt; On 13 Feb 2018, at 10:55, isis agora lovecruft &lt;isis@torproject.org&gt; wrote:
&gt; 
&gt; A couple outcomes of this:
&gt; 
&gt; 1. What passes for "canonicalised" "utf-8" in C will be different to
&gt;    what passes for "canonicalised" "utf-8" in Rust.  In C, the
&gt;    following will not be allowed (whereas they are allowed in Rust):
&gt;        - NUL (0x00)
&gt;        - Byte Order Mark (0xFEFF)

I want to clarify this point:

The Byte Order Mark is Unicode Scalar 0xFEFF, encoded in UTF-8 as the
bytes 0xEF 0xBB 0xBF.

Tor's C and Rust implementations of UTF-8 must be identical.

When we write the C implementation, we must reject NUL for
compatibility with C string functions.

When we write the Rust implementation, we must reject NUL for
compatibility with the C implementation. (Rust already implements
UTF-8 strings that accept NUL, so this will require custom code).

When we write the C and Rust implementations, we must reject BOM
because it's unnecessary. Rejecting BOM is recommended by the
relevant standard. (Rust already implements UTF-8 strings that accept
BOM, so this will require custom code).

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213105530</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-02-13 10:55:30-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 12/02/18 23:55, isis agora lovecruft wrote:
&gt;  1. What passes for "canonicalised" "utf-8" in C will be different to
&gt;     what passes for "canonicalised" "utf-8" in Rust.  In C, the
&gt;     following will not be allowed (whereas they are allowed in Rust):
&gt;         - NUL (0x00)
&gt;         - Byte Order Mark (0xFEFF)

Much of the metrics software is written in Java. Java strings allow for
NUL to appear, but assume that there is no BOM. If a BOM appears, then
this would be interpreted as data and, I assume, parsing would probably
fail. Should the whole document be rejected if it contains a NUL or BOM,
or should these values be stripped and then carry on parsing as if it
never happened?

&gt;  2. Directory document keywords MUST be printable ASCII.

This can be validated. Should a single document keyword containing
printable non-ASCII be enough to reject the document, or should a parser
try to recover?

I'd really like to see a section in the proposal about how parsers
should react when they find something unexpected, otherwise all the
parsers may end up doing different things.

&gt;  3. This change may break some descriptor/consensus/document parsers.
&gt;     If you are the maintainer of a parser, you may want to start
&gt;     thinking about this now.

For the metrics tools there are some guidelines on this we can follow:
https://docs.oracle.com/javase/tutorial/i18n/text/design.html. The other
language would be Python (for stem), but Python developers have probably
got a good understanding of unicode/str/bytes by now. (In Python 3: when
using UTF-8, BOM will not be stripped and will be interpreted as data,
and you can have a NUL in a str).

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180213215611</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-13 21:56:11-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 13 Feb 2018, at 21:55, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt;&gt; On 12/02/18 23:55, isis agora lovecruft wrote:
&gt;&gt; 1. What passes for "canonicalised" "utf-8" in C will be different to
&gt;&gt;    what passes for "canonicalised" "utf-8" in Rust.  In C, the
&gt;&gt;    following will not be allowed (whereas they are allowed in Rust):
&gt;&gt;        - NUL (0x00)
&gt;&gt;        - Byte Order Mark (0xFEFF)
&gt; 
&gt; Much of the metrics software is written in Java. Java strings allow for
&gt; NUL to appear, but assume that there is no BOM. If a BOM appears, then
&gt; this would be interpreted as data and, I assume, parsing would probably
&gt; fail. Should the whole document be rejected if it contains a NUL or BOM,
&gt; or should these values be stripped and then carry on parsing as if it
&gt; never happened?

Directory authorities and bridge clients already reject descriptors that
contain NUL. (This is an artefact of the C implementation: the descriptor
is seen as truncated, so it won't parse.)

We should specify rejection for BOM as well.

&gt;&gt; 2. Directory document keywords MUST be printable ASCII.
&gt; 
&gt; This can be validated. Should a single document keyword containing
&gt; printable non-ASCII be enough to reject the document, or should a parser
&gt; try to recover?

If parsers want to be consistent with the Tor implementation, they should
reject.

&gt; I'd really like to see a section in the proposal about how parsers
&gt; should react when they find something unexpected, otherwise all the
&gt; parsers may end up doing different things.

+1

&gt;&gt; 3. This change may break some descriptor/consensus/document parsers.
&gt;&gt;    If you are the maintainer of a parser, you may want to start
&gt;&gt;    thinking about this now.
&gt; 
&gt; For the metrics tools there are some guidelines on this we can follow:
&gt; https://docs.oracle.com/javase/tutorial/i18n/text/design.html. The other
&gt; language would be Python (for stem), but Python developers have probably
&gt; got a good understanding of unicode/str/bytes by now. (In Python 3: when
&gt; using UTF-8, BOM will not be stripped and will be interpreted as data,
&gt; and you can have a NUL in a str).

Python for txtorcon
Rust for Tor's experimental protover implementation

And perhaps others:
https://stem.torproject.org/faq.html#are-there-any-other-controller-libraries
https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On 13 Feb 2018, \
at 21:55, Iain Learmonth &lt;&lt;a \
href="mailto:irl@torproject.org"&gt;irl@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span&gt;Hi,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;On 12/02/18 23:55, isis \
agora lovecruft wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; 1. What passes for \
"canonicalised" "utf-8" in C will be different to&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;    what passes for "canonicalised" "utf-8" in Rust. \
 In C, the&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   following will not be allowed (whereas they are allowed in \
Rust):&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
       - NUL \
(0x00)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
       - Byte Order Mark \
(0xFEFF)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Much of the metrics software \
is written in Java. Java strings allow for&lt;/span&gt;&lt;br&gt;&lt;span&gt;NUL to appear, but assume \
that there is no BOM. If a BOM appears, then&lt;/span&gt;&lt;br&gt;&lt;span&gt;this would be \
interpreted as data and, I assume, parsing would probably&lt;/span&gt;&lt;br&gt;&lt;span&gt;fail. \
Should the whole document be rejected if it contains a NUL or BOM,&lt;/span&gt;&lt;br&gt;&lt;span&gt;or \
should these values be stripped and then carry on parsing as if \
it&lt;/span&gt;&lt;br&gt;&lt;span&gt;never \
happened?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Directory authorities and \
bridge clients already reject descriptors that&lt;/div&gt;&lt;div&gt;contain NUL. (This is an \
artefact of the C implementation: the descriptor&lt;/div&gt;&lt;div&gt;is seen as truncated, so \
it won't parse.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We should specify rejection for BOM as \
well.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; 2. \
Directory document keywords MUST be printable \
ASCII.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;This can be validated. Should a \
single document keyword containing&lt;/span&gt;&lt;br&gt;&lt;span&gt;printable non-ASCII be enough to \
reject the document, or should a parser&lt;/span&gt;&lt;br&gt;&lt;span&gt;try to \
recover?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If parsers want to be \
consistent with the Tor implementation, they \
should&lt;/div&gt;&lt;div&gt;reject.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;span&gt;I'd really like \
to see a section in the proposal about how parsers&lt;/span&gt;&lt;br&gt;&lt;span&gt;should react when \
they find something unexpected, otherwise all the&lt;/span&gt;&lt;br&gt;&lt;span&gt;parsers may end up \
doing different things.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;+1&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; 3. This change may break some \
descriptor/consensus/document parsers.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;    If you are the maintainer of a parser, you may \
want to start&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
   thinking about this \
now.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;For the metrics tools there are \
some guidelines on this we can follow:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://docs.oracle.com/javase/tutorial/i18n/text/design.html"&gt;https://docs.oracle.com/javase/tutorial/i18n/text/design.html&lt;/a&gt;. \
The other&lt;/span&gt;&lt;br&gt;&lt;span&gt;language would be Python (for stem), but Python developers \
have probably&lt;/span&gt;&lt;br&gt;&lt;span&gt;got a good understanding of unicode/str/bytes by now. \
(In Python 3: when&lt;/span&gt;&lt;br&gt;&lt;span&gt;using UTF-8, BOM will not be stripped and will be \
interpreted as data,&lt;/span&gt;&lt;br&gt;&lt;span&gt;and you can have a NUL in a \
str).&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Python for txtorcon&lt;div&gt;Rust for \
Tor's experimental protover implementation&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And perhaps \
others:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://stem.torproject.org/faq.html#are-there-any-other-controller-libraries"&gt;h \
ttps://stem.torproject.org/faq.html#are-there-any-other-controller-libraries&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations"&gt;http \
s://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div&gt;T&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180214000358</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-14 00:03:58-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

&gt; For the metrics tools there are some guidelines on this we can follow:
&gt; https://docs.oracle.com/javase/tutorial/i18n/text/design.html. The other
&gt; language would be Python (for stem), but Python developers have probably
&gt; got a good understanding of unicode/str/bytes by now. (In Python 3: when
&gt; using UTF-8, BOM will not be stripped and will be interpreted as data,
&gt; and you can have a NUL in a str).

Hi Iain. Actually, for Stem I'm really looking forward to this too.
Stem has special handling for the contact and platform fields (iirc
the only spot non-ascii content can presently appear). Stem's parsers
and API will be simplified once everything is uniformly utf-8. :P

Possibly a stupid question but any reason not to require the whole
descriptor document to be printable characters?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213024415</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-13 02:44:15-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Authenticating sendme cells to mitigate bandwidth attacks</subject><body>

Hi,

Comments inline:

&gt; On 13 Feb 2018, at 12:26, Roger Dingledine &lt;arma@mit.edu&gt; wrote:
&gt; 
&gt; Filename: xxx-authenticated-sendmes.txt
&gt; Title: Authenticating sendme cells to mitigate bandwidth attacks
&gt; Author: Rob Jansen, Roger Dingledine
&gt; Created: 2016-12-01
&gt; Status: open
&gt; 
&gt; …
&gt; 
&gt; 2.7 Long &gt;3-hop Circuits
&gt; 
&gt;   The adversary could use a circuit longer than three hops to cause more
&gt;   bandwidth usage across the network. Let's use an 8 hop circuit as an
&gt;   example.

You should use 7 hops as an example, because 8 hops doesn't work on the
network due to RELAY_EARLY limits.

And you should define what you mean by "hop".
(Is it 1-based? Are you counting links, or relays? Does the client count?)

&gt;   Adversary:
&gt;   16 transfers to create the circuit
&gt;   2 to begin the two exit connections
&gt;   2 to send the two GET requests
&gt;   ---
&gt;   20
&gt; 
&gt;   Network:
&gt;   128 transfers to create the circuit
&gt;   62 to begin the two exit connections (assumes two for the exit TCP connect)
&gt;   32 to send the two GET requests to the website
&gt;   15000 for requested data (until the stream and circuit windows close)
&gt;   ---
&gt;   15222
&gt; 
&gt;   The adversary could also target a specific relay, and use it multiple
&gt;   times as part of the long circuit, e.g., as hop 1, 4, and 7.
&gt; 
&gt;   Target:
&gt;   54 transfers to create the circuit
&gt;   22 to begin the two exit connections (assumes two for the exit TCP connect)
&gt;   12 to send the two GET requests to the website
&gt;   5000 for requested data (until the stream and circuit windows close)
&gt;   ---
&gt;   5088
&gt; 
&gt; …
&gt; 
&gt;   How shall we version the sendme payload so we can change the format of
&gt;   it later? Right now sendme payloads are empty. Here's a simple design:
&gt;   we use five bytes in the payload, where the first byte indicates the
&gt;   sendme payload version (0 in the original design, and 1 once we've
&gt;   implemented this proposal), and the rest of the payload is formatted
&gt;   based on the payload version number: in this case, it's simply the
&gt;   four bytes of digest.
&gt; 
&gt;   Is there a better way to version the payload, e.g. a way that is
&gt;   already standard in other parts of the design, so we aren't adding
&gt;   a new paint color to keep track of on the bike shed?

This is pretty much the standard way that we version other payloads.

IP addresses in NETINFO cells have custom versioning, because IPv4
used to be mandatory. But almost everything else uses the zero byte at the
start of an empty payload as the first version.

&gt; …
&gt; 
&gt; 3.3. Making sure there are enough unpredictable bytes in the circuit
&gt; 
&gt;   So far, the design as described fails to a very simple attacker:
&gt;   the client fetches a file whose contents it already knows, and it
&gt;   uses that knowledge to calculate the correct digests and fake its
&gt;   sendmes just like in the original attack.
&gt; 
&gt;   The fix is that the exit relay needs to be able to add some randomness
&gt;   into its cells. It can add this randomness, in a way that's completely
&gt;   orthogonal to the rest of this design, simply by choosing one relay
&gt;   cell every so often and not using the entire relay cell payload for
&gt;   actual data (i.e. using a Length field of less than 498), and putting
&gt;   some random bytes in the remainder of the payload.

This will break implementations that assume the payload is always full,
until the final cell. Let's check that Tor doesn't make this assumption.

&gt;   How many random bytes should the exit relay use, and how often should
&gt;   it use them? There is a tradeoff between security when under attack,
&gt;   and efficiency when not under attack. We think 1 byte of randomness
&gt;   every 1000 cells is a good starting plan

Should the rate be a consensus parameter as well?

&gt; , and we can always improve
&gt;   it later without needing to change any of the rest of this design.

I suggest that the 1 byte of randomness goes somewhere in the first few
cells of the 1000. That way, clients that only request small amounts of data
(like chutney) break early.

&gt;   (Note that the spec currently says "The remainder of the payload
&gt;   is padded with NUL bytes." We think "is" doesn't mean MUST, so we
&gt;   should just be sure to update that part of the spec to reflect our
&gt;   new plans here.)

Tor doesn't check the padding.

&gt; 4. Deployment Plan
&gt; 
&gt;   In phase one, both sides begin remembering their expected digests,
&gt;   and they learn how to parse sendme payloads. When they receive a
&gt;   sendme with payload version 1, they verify its digest and tear down
&gt;   the circuit if it's wrong. But they continue to send and accept
&gt;   payload version 0 sendmes.
&gt; 
&gt;   In phase two, we flip a switch in the consensus, and everybody starts
&gt;   sending payload version 1 sendmes. Payload version 0 sendmes are
&gt;   still accepted.
&gt; 
&gt;   In phase three, we flip a different switch in the consensus, and
&gt;   everybody starts refusing payload version 0 sendmes.
&gt; 
&gt;   (It has to be two separate switches, not one unified one, because
&gt;   otherwise we'd have a race where relays learn about the update before
&gt;   clients know to start the new behavior.)
&gt; 
&gt;   We'll want to do a bunch of testing in chutney before flipping the
&gt;   switches in the real network: I've long suspected we still have bugs
&gt;   in our sendme timing, and this proposal might expose some of them.

I suggest we do testing on private test networks as well.
Chutney isn't very good at supplying latency.

&gt;   Alas, this deployment plan leaves a pretty large window until relays
&gt;   are protected from attack. It's not all bad news though, since we
&gt;   could flip the switches earlier than intended if we encounter a
&gt;   network-wide attack.
&gt; 
&gt; …

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180209000819</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-09 00:08:19-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#239] "Consensus Chain Hashing"</subject><body>

[Attachment #2 (multipart/signed)]


Hi!

The notes from this meeting are online. [0]  Thanks to everyone who attended!

We've decided to have the prop#267 [1] meeting next, then (potentially, depending on
the takeaway from the prop#267 meeting) revise prop#239 [2] according to these
notes.  Finally, we'll (potentially) have a third meeting to compare and
contrast the two proposals, and choose one to go with.

[0]: http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-02-08-20.59.html
[1]: https://gitweb.torproject.org/torspec.git/tree/proposals/267-tor-consensus-transparency.txt
[2]: https://gitweb.torproject.org/torspec.git/tree/proposals/239-consensus-hash-chaining.txt

Best regards,
-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180207204000</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-02-07 20:40:00-0400</timestampReceived><subject>Re: [tor-dev] Stem ORPort protocol support</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; they'd care to go (potentially all the way up to a Python Tor client,
&gt; similar to Orchid).

So, there is this already -- not sure how "complete" it is though (and
looks like hasn't seen commits for 2+ years) but might have useful code:

   https://github.com/pycepa/pycepa

There is also this one, that I've barely looked at (and is older than
the above) based around Scapy:

   https://github.com/cea-sec/TorPylle

For any of these efforts, writing a "Tor protocol library" that
*doesn't* do any I/O would be the most useful; then other Python tools
can benefit from the protocol support without being tied to "threads" or
to a particular async framework.

One of the best examples of this style of library is the hyper/h2
implementation of HTTP2 (which powers Twisted's HTTP2 support and also
supports threaded HTTP2 servers and clients) by separating the
"protocol" implementation into its own library (that does no I/O and
doesn't start any threads "for" you). This style is usually referred to
as "sans-io" (at least in the Python community). You can read more about
these libraries: https://python-hyper.org

It would be really cool to have a Python implementation of the Tor
protocol -- and double-extra-useful if it's a "pure" protocol library
without any messy I/O constructs involved :)


Cheers,
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180207205436</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-07 20:54:36-0400</timestampReceived><subject>Re: [tor-dev] Stem ORPort protocol support</subject><body>

&gt; So, there is this already -- not sure how "complete" it is though (and
&gt; looks like hasn't seen commits for 2+ years) but might have useful code:

Thanks meejah! Took a peek but they both look pretty old and it's
unclear to me how complete either got. If there's something in
particular you think is worthwhile integrating I'm all ears.

&gt; For any of these efforts, writing a "Tor protocol library" that
&gt; *doesn't* do any I/O would be the most useful; then other Python tools
&gt; can benefit from the protocol support without being tied to "threads" or
&gt; to a particular async framework.

Actually, this uses a similar pattern as the rest of Stem in that cell
packing/unpacking is independent of the threaded socket. Just as you
could use stem.response for controller message parsing in txtorcon,
you can use stem.client.cell for cell packing/unpacking with a twisted
application too. That said, thanks for the reminder to keep this in
mind as we go.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180207212620</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-02-07 21:26:20-0400</timestampReceived><subject>Re: [tor-dev] Stem ORPort protocol support</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; Thanks meejah! Took a peek but they both look pretty old and it's
&gt; unclear to me how complete either got. If there's something in
&gt; particular you think is worthwhile integrating I'm all ears.

I haven't looked closely enough to know the answer to that ;) but as I
understand it had (2 years ago) enough to bootstrap and make circuits.

&gt;&gt; For any of these efforts, writing a "Tor protocol library" that
&gt;&gt; *doesn't* do any I/O would be the most useful; then other Python tools
&gt;&gt; can benefit from the protocol support without being tied to "threads" or
&gt;&gt; to a particular async framework.

&gt; Actually, this uses a similar pattern as the rest of Stem in that cell
&gt; packing/unpacking is independent of the threaded socket. Just as you
&gt; could use stem.response for controller message parsing in txtorcon,
&gt; you can use stem.client.cell for cell packing/unpacking with a twisted
&gt; application too.

Interesting, okay! Last time I looked, I had to re-assemble the whole
"response" to feed it into stem.response -- so I ended up needing to
keep most of the protocol state-machine anyway (i.e. to figure out which
bytes constituted "a response"). I should probably look again if this
has changed :)

The way Hyper/h2 works is it just gets fed bytes and "interesting
events" come out (essentially), as I understand it. So, the
corresponding thing here would be: set up some Stem 'protocol' object
with an "interesting event happend" callback. Then, feed bytes into some
single API on this object and it calls the "event happened" callback
every time enough bytes have been fed in for a complete parsed response
object to be generated. (This is just the one side of the protocol; the
other side would be similar)

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180203224040</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-03 22:40:40-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>


&gt; On 4 Feb 2018, at 09:37, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; In best case users will just be frustrated because Tor does not work
&gt; as expected and in worst case this could be dangerous. This could be a
&gt; severe problem especially because of the following reasons:
&gt; 1. filename.torrc~ filename.torrc.dpkg-old has higher priority than
&gt; filename.torrc when Tor does the parsing.
&gt; 2. In most cases, this will happen without being noticed by the normal
&gt; suer.
&gt; 
&gt; Therefore, may I propose to let Tor parse only the files whose name
&gt; ends with .torrc ?

Yes, this is standard behaviour among many tools.

&gt; Or maybe even only parse number_filename.torrc for
&gt; better consistency and for more clear priority order?

No, this is counter-intuitive. It will confuse many users.
It is not how most other tools work.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180204040400</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-04 04:04:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

&gt;&gt; Therefore, may I propose to let Tor parse only the files whose
&gt;&gt; name ends with .torrc ?
&gt; 
&gt; Yes, this is standard behaviour among many tools.
&gt; 
&gt;&gt; Or maybe even only parse number_filename.torrc for better
&gt;&gt; consistency and for more clear priority order?
&gt; 
&gt; No, this is counter-intuitive. It will confuse many users. It is
&gt; not how most other tools work.

Thank you so much for the feedback, teor!

I have opened the ticket #25140 for this. Shall I try to make a patch
on this? Or is it preferred to leave it to developers from TPO?

Thank you very much!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlp2hnAACgkQoUtNvG3N
1Tz3GBAAghKBKm7JVd5PyO7HGBClshO/fUOG2ippVm5hY9sgmzVPxVauJC+CWJN9
RH6YfJwyLJeAHu0o3YD1+LBHvccxTKKQYL48q8aopfWkh8ALk4h9+O5hwpPPIsGC
qV7iJ+v4QfpxYkhAUFh8FOy+m5WqsOurScBzcjEnmu2IpIkpnwv1NKLaVrArpMv9
lrGtQds/7dCYC57boSUNgTTJtbuqgNhRBM1oqkGisHsKBiLYExvztS22aLj9uVEX
km5c+JJuwEKuuordP4YiFMdES1UYx9Bdm/LrUNWG4dB/ZfjwZYSu/KPsqQcDwmNy
25iovL5KUkVg8S05QwdcCnXm2B5oofLMJ4hW0bkjozjLUt3na131uJumOR7Q2W9f
9aKAGwRzQ624rDHn3SWCC1HKMhP0Y6EhCDyzX5914kRakikas6hmtUWmrSqFvZLO
p0WzWuNB05BdRXImTXxPdLyOxasB/eMt31mQXKBSSiwdzJxe3rfnDb//P2vcv9ex
ofQNx672qtAgmHp9WWeKY6qas36sZeckEigIlcUN27KFBwDyCGfCebk5tPIGDzC9
aAqmiTqqYCqphHb3i/xX3WwGwk6+Q1ixezOfYFxbAOa96NUDV2ldYIXgBcsAWh/+
RbZ8hI/oOwAug/C9ig5xFpZAy86bbqDApG6wrGNg5gp3qVKDlnA=
=zlMh
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180204042403</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-04 04:24:03-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>


&gt; On 4 Feb 2018, at 15:04, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; Therefore, may I propose to let Tor parse only the files whose
&gt;&gt;&gt; name ends with .torrc ?
&gt;&gt; 
&gt;&gt; Yes, this is standard behaviour among many tools.

To be more precise, most tools accept files ending in ".conf".
We might want tor to accept ".conf" for consistency.

I suggest we also accept files called "torrc", or ending in ".torrc".
This should probably also include files called literally ".torrc".

Since this is a breaking change, we might want to check if any
distribution has adopted another naming scheme, and avoid
breaking that naming scheme.

&gt;&gt;&gt; Or maybe even only parse number_filename.torrc for better
&gt;&gt;&gt; consistency and for more clear priority order?
&gt;&gt; 
&gt;&gt; No, this is counter-intuitive. It will confuse many users. It is
&gt;&gt; not how most other tools work.
&gt; 
&gt; Thank you so much for the feedback, teor!
&gt; 
&gt; I have opened the ticket #25140 for this. Shall I try to make a patch
&gt; on this? Or is it preferred to leave it to developers from TPO?

We accept patches from anyone.

If you'd like your patch to be reviewed quickly:
* put the ticket in 0.3.3, because it's a bugfix
* change the status to "needs review" once you have a patch

Thanks!

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180204210900</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-04 21:09:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

&gt; To be more precise, most tools accept files ending in ".conf". We
&gt; might want tor to accept ".conf" for consistency.
&gt; 
&gt; I suggest we also accept files called "torrc", or ending in
&gt; ".torrc". This should probably also include files called literally
&gt; ".torrc".
&gt; 

Thank you for your suggestions, teor! I have updated it in the ticket.

&gt; Since this is a breaking change, we might want to check if any 
&gt; distribution has adopted another naming scheme, and avoid breaking
&gt; that naming schem
I agree. I will wait for a little bit before implementing it so that
we may get more input on the issue. :)

&gt; If you'd like your patch to be reviewed quickly: * put the ticket
&gt; in 0.3.3, because it's a bugfix * change the status to "needs
&gt; review" once you have a patch

Thank you so much for your instructions!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlp3dnwACgkQoUtNvG3N
1TycXQ//X5m4c9gucDY2idIHULxzIDdfgAFnPOyjzyqDLjM8y4/Uu/3xV4SX3gX8
M2qguNmqMX2+OuoWTHPo+4S+L4qS12XibUha1lwcWxjXGyPkZ7iwIvj7a0RoBsb1
Ln6DcpBGcPt61trQg4eBLI2JbAOQRXh3J/jl9djNzs64uj/0WtxXcUhBDPiJyPz1
yunB8EuO3NJIZ9n1SoT6d9HpF8oLPu4E9PkhFi0uflPKdZhwAUqCLW4J4zqlK2eB
8cQezMHvqNmTYS9pmQgw6lz0xAL+6NQZWUeFLFE+TvIqB8RwFQkAcb3mfTfDFvpf
K/tOiSF+9OvMEVonB1efWUhaxSBHc8MwQFfWaWTNNndHkO6lVGYtwPC7UfrteTY5
cr0oB6xE5U+La/2GnwP5i2200v0IgNi1S82okXIbGbMyEgEXzkC4+6xIsq40ksGy
8hRHEusLz8FUefKioxdiyPmHZgrq1jzQGSgFQKafKLR0YkfFgnbIX1alMgVIatS0
xbr53GXtQVY658T/lAdXSIqwb5regJ9NB/+LtB7HvzFbFMCnT4g1yDYLSsiwWX/z
2KJH8+OOKy6WMRmoTbMXb1J+WnBTVfazUc+fOs4IK2tlnMDs7TukcS9FtNHS1G1d
AlgML+AfnuO3m8SKR1Vsbl5PRypA7Vz0a4kkzy1dLgpaqVxP6Rw=
=vdE1
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180204215507</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-04 21:55:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

[Attachment #2 (multipart/alternative)]


On 5 Feb 2018, at 08:09, iry &lt;iry@riseup.net&gt; wrote:

&gt;&gt; Since this is a breaking change, we might want to check if any 
&gt;&gt; distribution has adopted another naming scheme, and avoid breaking
&gt;&gt; that naming schem
&gt; I agree. I will wait for a little bit before implementing it so that
&gt; we may get more input on the issue. :)

Expecting packagers to follow every thread and reply here is unrealistic.

Would you mind doing the search yourself, like Patrick asked?
It seems to have dropped off your TODO list.

Could you please look at existing .d folders of any other
projects tell me what you think? Perhaps discuss this with Tor Project.

https://forums.whonix.org/t/torrc-d-is-comming/4041/13

From my quick search, it appears that the Debian feature request is still open,
and no other distro is using torrc.d yet. But you should check, too.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;On 5 Feb 2018, at 08:09, iry &lt;&lt;a \
href="mailto:iry@riseup.net"&gt;iry@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Since this is \
a breaking change, we might want to check if \
any &lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;distribution \
has adopted another naming scheme, and avoid \
breaking&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;that naming \
schem&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;font color="#000000"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;I agree. I will wait for a little \
bit before implementing it so that&lt;br&gt;we may get more input on the issue. \
:)&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Expecting packagers to follow every thread and reply here is \
unrealistic.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Would you mind doing the search yourself, like Patrick \
asked?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;It \
seems to have dropped &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;off your TODO list.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul style="margin: 0px; padding: 0px 0px 0px \
40px; clear: both;"&gt;&lt;li&gt;&lt;blockquote style="border-left-width: 5px; border-left-style: \
solid; border-left-color: rgb(233, 233, 233); clear: both; margin-left: 0px; \
margin-right: 0px; padding: 12px;"&gt;&lt;p style="margin-top: 0px !important; \
margin-bottom: 0px !important;"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Could you please look at existing .d folders of any other&lt;br&gt;projects tell me \
what you think? Perhaps discuss this with Tor \
Project.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;font \
color="#000000" style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://forums.whonix.org/t/torrc-d-is-comming/4041/13" \
style="background-color: rgba(255, 255, 255, \
0);"&gt;https://forums.whonix.org/t/torrc-d-is-comming/4041/13&lt;/a&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;From \
my quick search, it appears that the Debian feature request is still \
open,&lt;/div&gt;&lt;div&gt;and no other distro is using torrc.d yet. But you should check, \
too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180205183700</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-05 18:37:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi teor!

&gt; Could you please look at existing .d folders of any other projects 
&gt; tell me what you think? Perhaps discuss this with Tor Project. 
&gt; [...] From my quick search, it appears that the Debian feature 
&gt; request is still open, and no other distro is using torrc.d yet. 
&gt; But you should check, too.

I went through all Tor packages listed here:
https://trac.torproject.org/projects/tor/wiki/doc/packages and no
distros shipped a torrc with %include line enabled.

I know Whonix will not use torrc.d before next stable version. I also
did a grep -r -i "%include" on Tails source code and I do not think
Tails has enabled it by default.

nickm suggested proposed to create a new syntax to take care of the
compatibility:

&gt; %include /etc/torrc.d/*.conf

Here is my thoughts on this:

1. I agree that "[a]nybody who currently has a working setup will have
it fail if we start requiring a suffix that they didn't know to
provide", which is not good for compatibility. But, letting people
still use or will be able to use a setting that is not recommended
anymore seems also not to be a very good idea? Considering the
potential danger of parsing all the files, shall we go a little bit
aggressive? I would rather break people's current potentially
dangerous settings. What do you think?

2. Since no distros I know has enabled this feature by default, I
guess there are only a very small number of users has enabled this
feature. Will an info in the release note saying "%include
/etc/torrc.d/ will only pase files suffixed with .torrc files" be
enough to inform them? Maybe we can even document the manual migration
somewhere.

3. %include /etc/torrc.d/*.conf syntax is very flexible so that Tor
does not have to decide which extension names should be parsed.

4. %include /etc/torrc.d/*.conf syntax explicitly says which extension
name will be used rather than the implicit document.

5. But is it a good idea to make the syntax that flexible? For
example, anon-connection-wizard will generate a torrc files in torrc.d
directory, I (and maybe many other developers) prefer writing to a
file that I can guarantee it will be parsed in most case. If I write
to 40_anon-connection-wizard.conf but some people set to pase .torrc
or anything else only, it will be not be very good? (I do not want
anon-connection-wizard to touch /etc/tor/torrc)

Finally, do you think it is a good idea to switch to the ticket for
further discussion to avoid cross posting and high volume on @tor-dev?

Thank you very much!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlp4pFoACgkQoUtNvG3N
1TwSkRAAnBRytWCeP8ocCOJ0FmJZVq4ANznDWWBoYg+iaRPUMYbU/Tro0j7ljJMe
snf0ji+Eu8DqTjg/HgmQ9gVuiJNWE7jfvnaAE7nDxeqd23J68ek5yHeIwonnaVPq
IrWeCQDAAUUz42rAcoHBsy/tGS/kiq0OMf3yf6Pzq02UsQ4Ob46kD4ySNnirRXce
a/mJG1zMXoAYnM84bKnm6bD4Gx5qiyK+O61e70z4b4ArPqRpxmfQoU5RAELMHAFU
hq9JtdxN/FBvNq7NUOboAYcX1FdkWLLEaQXWB/sgtS94OvCIX0hfrtis0/UFPTe5
wQN1FQCFBpPkHOLuvszNln9WvPf0XSWqCDVdZh7Fd9GrELfrVwEJYC2+1rukPWZq
U0ZJ0smDkdijHBc53i6+23175GyaQ+uMoSebouQ2vh9hbf2qx1EMnSFc5pSz8y5b
eJgUA6WFZvcTgUFmwYpe3X2E3QcoYHD8UNoBZiD0ehXrWTcxScT0kWNcF06v3dhr
4Doo9wxDmF/ZusRrpyTRCZ5LsPCCL1spphxNqlCIm9MsfUCHBUbULBKn+uV2fNb6
4Xk2gu6eA258ZEfYDhottLpsk8V15Jx7F+Jz/W0zlL5OCwDzhPcG44C7OfEzeW5u
h42Jw6YsQkAgGXnKzRG9lW7emVkLLhF0wlCSeWY8QxHGnxShdLY=
=EnSw
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180205194005</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-05 19:40:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>


&gt; On 6 Feb 2018, at 05:37, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; …
&gt; 
&gt; I went through all Tor packages listed here:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/packages and no
&gt; distros shipped a torrc with %include line enabled.
&gt; 
&gt; I know Whonix will not use torrc.d before next stable version. I also
&gt; did a grep -r -i "%include" on Tails source code and I do not think
&gt; Tails has enabled it by default.
&gt; 
&gt; nickm suggested proposed to create a new syntax to take care of the
&gt; compatibility:
&gt; 
&gt;&gt; %include /etc/torrc.d/*.conf
&gt; 
&gt; Here is my thoughts on this:
&gt; 
&gt; 1. I agree that "[a]nybody who currently has a working setup will have
&gt; it fail if we start requiring a suffix that they didn't know to
&gt; provide", which is not good for compatibility.

nickm is right: we released this feature in a stable release.
Let's not break it.

&gt; But, letting people
&gt; still use or will be able to use a setting that is not recommended
&gt; anymore seems also not to be a very good idea? Considering the
&gt; potential danger of parsing all the files, shall we go a little bit
&gt; aggressive? I would rather break people's current potentially
&gt; dangerous settings. What do you think?

I would rather not break existing configs in stable releases.

Instead, I think we can:
* document the recommend usage
* warn on potentially unexpected files

Tor already warns on most duplicate options, so the issue should be
obvious in most cases.

Does Tor log each config file name when it is loaded?
Logging the file name would help users to debug issues like this.

&gt; 2. Since no distros I know has enabled this feature by default, I
&gt; guess there are only a very small number of users has enabled this
&gt; feature. Will an info in the release note saying "%include
&gt; /etc/torrc.d/ will only pase files suffixed with .torrc files" be
&gt; enough to inform them? Maybe we can even document the manual migration
&gt; somewhere.

I think these are good things to do.

&gt; 3. %include /etc/torrc.d/*.conf syntax is very flexible so that Tor
&gt; does not have to decide which extension names should be parsed.
&gt; 
&gt; 4. %include /etc/torrc.d/*.conf syntax explicitly says which extension
&gt; name will be used rather than the implicit document.

This seems like a good design.

&gt; 5. But is it a good idea to make the syntax that flexible? For
&gt; example, anon-connection-wizard will generate a torrc files in torrc.d
&gt; directory, I (and maybe many other developers) prefer writing to a
&gt; file that I can guarantee it will be parsed in most case. If I write
&gt; to 40_anon-connection-wizard.conf but some people set to pase .torrc
&gt; or anything else only, it will be not be very good? (I do not want
&gt; anon-connection-wizard to touch /etc/tor/torrc)

We should recommend a default extension for packagers.

But our standard advice to users in situations like this is:
"Don't do that then"

In particular, our advice is:
"If you modify your torrc, your tor might not work like you expect"

&gt; Finally, do you think it is a good idea to switch to the ticket for
&gt; further discussion to avoid cross posting and high volume on @tor-dev?

I don't mind.

In my experience, mailing lists are good for discussion, trac tickets are
good for tasks, and gitlab/oniongit are good for code review.

Please let us know on this list if you move the discussion elsewhere.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180205204600</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2018-02-05 20:46:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal: only parse .torrc files in torrc.d directory</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Thank you so much for the immediate feedback, teor!

Could you please help me to review the requirements (TODO list) below:

* %include /etc/torrc.d means parsing all the files in the directory
* implement %include /etc/torrc.d/*.extension syntax
* let Tor log each config file it loads
* warn on potentially unexpected files
* document *.conf as the recommend usage
* document how to manually migrate from * to *.conf
* recommend /etc/torrc.d/*.conf as "a default extension for packagers"

&gt; In my experience, mailing lists are good for discussion, trac 
&gt; tickets are good for tasks, and gitlab/oniongit are good for code 
&gt; review.

Got it!

Thank you very much!

Best Regards,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlp4wsIACgkQoUtNvG3N
1Tx3JA/5AXuMfqo7jww4LeRvIUfs69+Fu98MV8X1GLKaTnqDH7MnDhOW5KxUY8HU
FbVK040GhV7UGMCP83fCbSnFVw4uNFMENToYVFB649Lg5/BAOzbvQ0Lc6i1B+fUt
W5rq3rzJxvMSG3q8EXPgxxHWUGl2AKzGkKBeIxc4WYt1aZX9FXpbVCZn3Rnu5Gj1
OeesVXdkO0TGb0r99qEBg7CqGUUT28L8VveiJlZHyRUFpwrKdBlX8hVhpIaQYEDV
9NXMTtRd4eHUFrRs7ZINpg6LiUKcicVVOHj1p0qx1DV5T9tdXVpBemHTJQtmQAU+
3iJgyoNHDez0WBlIwhXm0zr3QFot2/MV2D+yKAIJGwVlWOtEFnqUGyX+LwxD6XQ8
Qzj4XcOLbs+hIB6h/QPXGgQnP7seLZhJMQAReMu64uvGx+zt15Avm3DAbz5rgwnR
pYQatcG/2/6sESgNz4NXjPaxz6nokylsKSMaynd1aHHzsOc3vLVWRbHbMvSoC8Mu
iKeUhhg01pO6eSzAzM9tnFGb0TaSrjR5NSnq3BoFeSnPNqZdsmehBOMMFXtj68QC
Dn78/gC0++W0DZONXSf2HdARwP+asNTzMnyobQHw3ikgLtCxCNjCLOTycyrCMkNS
Ar8cbOEVaDG802JWUMdWnFbbE6CfNWh5egx3jSzw19NDM+qGM8E=
=mJnZ
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180207113309</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-02-07 11:33:09-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 5.0-1.10.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

the new Oninonoo version is available at:
     https://dist.torproject.org/onionoo/5.0-1.10.0/

All changes [1] this time are supposed to make writing of bandwidth,
clients, uptime, and weights documents independent of system time,
which is a step toward making Onionoo instances serve the same data
where possible.  Other steps remain and will be addressed in future [2].

Deployment of version 5.0-1.10.0 will start at 13:00 UTC for all
onionoo.torproject.org instances.  It might cause a a few hours without
updates as we need to make additional backups.  For those interested,
I will post a deployment finished message to metrics-team mailing list [3=
]
approximately during UTC evening.

Please direct comments and questions to the metrics-team mailing list [3]=
=2E

Cheers,
iwakeh

[1] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md
[2] https://trac.torproject.org/projects/tor/ticket/25002
[3] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team











["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180207172014</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-02-07 17:20:14-0400</timestampReceived><subject>[tor-dev] [release] Onionoo 5.0-1.10.1</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

A fix for the most recent Oninonoo version is available at:
     https://dist.torproject.org/onionoo/5.0-1.10.1/

The changes [1] concern also the resolution of graph data:
three months weights and bandwidth data are now provided in 24 hours detail.

Deployment of the new version 5.0-1.10.1 finished successfully for all
onionoo.torproject.org instances.  The changes for bandwidth data might
take another day to be visible.  So, we need to have a little patience.

Please direct comments and questions to the metrics-team mailing list [2].

Cheers,
iwakeh

[1] https://gitweb.torproject.org/onionoo.git/plain/CHANGELOG.md?id=a7418b7c4d1b84ae1c1c062df847b013cb002e82
 [2] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180207215248</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-07 21:52:48-0400</timestampReceived><subject>Re: [tor-dev] Stem ORPort protocol support</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 8 Feb 2018, at 07:23, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt; Hi all. Over the last few months Tim and I have been collaborating on
&gt; Python support for the ORPort protocol. With it you can download
&gt; descriptors without a DirPort, and possibly fancier things in the
&gt; future like full circuit construction.

Stem's ORPort support is great news!

We have been looking at alternate Tor implementations that are
easier to hack for testing:

https://trac.torproject.org/projects/tor/ticket/17270

&gt; Tim put together a wonderful proof of concept called Endosome...
&gt; 
&gt;  https://github.com/teor2345/endosome
&gt; 
&gt; ... and I just finished integrating it into Stem...
&gt; 
&gt;  https://gitweb.torproject.org/stem.git/tree/stem/client/__init__.py

I have added both Endosome and Stem to the Tor implementations wiki:

https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations

Looking forward to trying out the ORPort features when the descriptor
download API is stable. It will be great to be able to check Fallback
Directory Mirror ORPorts:

https://trac.torproject.org/projects/tor/ticket/19129

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------





["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlp7dTAACgkQdA2eOQJS
cqLjBRAAsHq6eAuKA6EuddvBj4f9DYyNCQwiAUziVlBU5Dy25jzmaY90GPUFQ7No
w83hnwE72DwTVjjxKHWzPhptPN23O0EJpMV0TCn/fMuwczJ9XxClBjinZ1E3SUQc
sDuiHUl0hhwSa+dZzrTjaeuQMcOx4RM0R4X9dHeHma4+8qlWa0AfzZYjaZgUyBAz
keb0nDWL8qWgOESXZjcwwwzYnhGQKbwCosigY63zfC9dn7en/orinc4Ym2JV3QBA
pn4bD2hbJw8VnYZ2QC4sHOqbbsDSuy2xFSfVDi+ah7t1C/taribgWmQKWniMUsYu
C7BztjpBmHao8d/8L8vmnIBSHYUZMrRgBH8YwscxlX0S4eQ0Seo+xiCuv1SURYgU
sO0WN2ENIjTaxIRVigqLJOUPH8FVoKULL3Ou96PlKei954oxvWCseGXl5z1hN3z9
sDx6mddB74pB2H7AEmWW46+7xiS8gNyMmlBIaF7gvnidF+SOWU9VC7vTIvo+zTaQ
W7MZEw+OsDaBf6dDJbEkTC6eem4aXSosPwsvPPx9eSoIoPY1D0Mx6CXncmQFxs11
7C8z39XxXVWJXueQoUjiSju/VuelxX+JWbbBMLawwMn7F9/VlCQlINqE+mQ+Dfbh
zznSLmgZFewwEkWmpjyQ6PMVguS/RIP0Lrktnx9F6CidhENjc64=
=8D4G
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180209104523</emailId><senderName>Linus Nordberg</senderName><senderEmail>linus@torproject.org</senderEmail><timestampReceived>2018-02-09 10:45:23-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#239] "Consensus Chain Hashing"</subject><body>

isis agora lovecruft &lt;isis@torproject.org&gt; wrote
Fri, 9 Feb 2018 00:08:19 +0000:

&gt; Hi!
&gt; 
&gt; The notes from this meeting are online. [0]  Thanks to everyone who attended!
&gt; 
&gt; We've decided to have the prop#267 [1] meeting next, then (potentially, depending \
&gt; on the takeaway from the prop#267 meeting) revise prop#239 [2] according to these
&gt; notes.  Finally, we'll (potentially) have a third meeting to compare and
&gt; contrast the two proposals, and choose one to go with.
&gt; 
&gt; [0]: http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-02-08-20.59.html[1]: \
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/267-tor-consensus-transparency.txt[2]: \
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/239-consensus-hash-chaining.txt
&gt; 

Thanks for arranging this meeting and apologies for not showing up as
planned.

For convenience, here are the highlighted items from the meeting. They
didn't make it to the meeting minutes page. (Seems like #info, #action
and #idea are what meetbot cares about.)

--8&lt;---------------cut here---------------start-------------&gt;8---
&lt;nickm&gt; #item proposal should clarify how many older consensuses to hold
&lt;teor&gt; #item why not just keep the hash(es) of each consensus
&lt;nickm&gt; #item maybe use sha3-256 instead.
&lt;nickm&gt; #item maybe store only the hash and the signatures.  Have the chaining
&lt;tjr&gt; #item Instead of keeping full documents, can we keep a chain of diffs?
&lt;teor&gt; #item expand "some categories of attacks" to explain what the attacks
&lt;tjr&gt; #item Provide an export of a suspicious consensus that would prove
&lt;tjr&gt; #item It would be good to look at prop267 again in relation to this
--8&lt;---------------cut here---------------end---------------&gt;8---
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180210095310</emailId><senderName>Ankur Goyal</senderName><senderEmail>goyalankurgoyal1997@gmail.com</senderEmail><timestampReceived>2018-02-10 09:53:10-0400</timestampReceived><subject>[tor-dev] Fwd: contribute to gsoc 2018 ideas</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
          I am going to participate in gsoc 2018 and i want to contribute
in your idea,can anyone provide me some more pointers about how to move
forward.



&lt;https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&gt;
 Virus-free.
www.avast.com
&lt;https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail&gt;
 &lt;#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2&gt;


[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_quote"&gt;&lt;br&gt;&lt;div dir="ltr"&gt;Hello,&lt;div&gt;               \
I am going to participate in gsoc 2018 and i want to contribute in your idea,&lt;span \
style="color:rgb(33,37,41);font-family:-apple-system,BlinkMacSystemFont,"Segoe \
UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color \
Emoji","Segoe UI Emoji","Segoe UI Symbol""&gt;can anyone \
provide me some more pointers about how to move forward.  &lt;/span&gt;&lt;br&gt;&lt;br \
class="m_2154047552916729870gmail-Apple-interchange-newline"&gt;

&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;div id="DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2"&gt;&lt;br&gt;
&lt;table style="border-top:1px solid #d3d4de"&gt;
	&lt;tr&gt;
        &lt;td style="width:55px;padding-top:13px"&gt;&lt;a \
href="https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail" \
target="_blank"&gt;&lt;img \
src="https://ipmcdn.avast.com/images/icons/icon-envelope-tick-round-orange-animated-no-repeat-v1.gif" \
alt="" width="46" height="29" style="width: 46px; height: 29px;"&gt;&lt;/a&gt;&lt;/td&gt;  &lt;td \
style="width:470px;padding-top:12px;color:#41424e;font-size:13px;font-family:Arial,Helvetica,sans-serif;line-height:18px"&gt;Virus-free. \
&lt;a href="https://www.avast.com/sig-email?utm_medium=email&amp;utm_source=link&amp;utm_campaign=sig-email&amp;utm_content=webmail" \
target="_blank" style="color:#4453ea"&gt;www.avast.com&lt;/a&gt;  &lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;&lt;a href="#DAB4FAD8-2DD7-40BB-A1B8-4E2AA1F9FDF2" width="1" \
height="1"&gt;&lt;/a&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180210150000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2018-02-10 15:00:00-0400</timestampReceived><subject>[tor-dev] BandwidthRate minimal values (was: Re: [tor-relays] Report on the FOSDEM relays meetup)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


(from tor-relays)
&gt; &gt; Content-wise, there were some pretty fruitful discussion, but we spent quite a \
&gt; &gt; bit of time on questions that recurr at other meetups too:
&gt; &gt; 
&gt; &gt; - What's the most useful thing I can bring to the network?
&gt; &gt; (TL;DR: Ideally, fast relays (if possible exits); if you can't contribute
&gt; &gt; more than 1MB/s, make it a bridge)
&gt; 
&gt; I like 1MByte/s (8MBit/s) as the "limit" between relay vs. bridge, currently we \
&gt; mention 16MBit/s and 2MBit/s in the documentation:  
&gt; 
&gt; https://www.torproject.org/docs/faq.html.en#HowDoIDecide
&gt; https://trac.torproject.org/projects/tor/wiki/TorRelayGuide#RelayRequirements
&gt; 
&gt; I'll go ahead and make 8 MBit/s the lower limit (and keep "It is recommended that a \
&gt; relay have at least 16 MBit/s (Mbps)")  unless there are strong opinions against \
&gt; it.

Hi,

to have all places consistent, are you open to increase the minimal values in
the tor man page for relays to 8 MBit/s (and bridges to 1 MBit/s) or 
other greater than the current values?

currently it says:

BandwidthRate N
[...] If you want to run a
           relay in the public network, this needs to be at the very least 75
           KBytes for a relay (that is, 600 kbits) or 50 KBytes for a bridge
           (400 kbits)  but of course, more is better; we recommend at least
           250 KBytes (2 mbits) if possible. 

If you are open to it I'll submit a patch via trac.

-- 
https://mastodon.social/@nusenu
twitter: @nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180213133925</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2018-02-13 13:39:25-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Authenticating sendme cells to mitigate bandwidth attacks</subject><body>

On Mon, Feb 12, 2018 at 8:26 PM, Roger Dingledine &lt;arma@mit.edu&gt; wrote:

Added as proposal 289.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180213164223</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2018-02-13 16:42:23-0400</timestampReceived><subject>Re: [tor-dev] Atlas is not that friendly to Web Archive</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 13/02/18 14:33, Leonid Evdokimov wrote:
&gt; I've recently found out that new Atlas re-design is not that friendly t=
o
&gt; web archive. http://archive.li/ can't properly detect "page loaded"
&gt; event that leads to capturing "loading" page[%]. Moreover,
&gt; https://web.archive.org/ can't capture #-based links at all, as far as =
I see.

This is an interesting point. There is not really any way currently to
link to a relay at a particular point in time. The data itself is
preserved in CollecTor, but not in an easy to consume form.

Capturing rendered pages for later viewing is probably not the most
useful thing that humanity could be doing with its disk drives. The
reason that we currently cannot have a time travel service for Relay
Search is that Onionoo would not be able to handle that amount of data
with its current architecture.

If someone produces a patch that fixes this for Relay Search, I'd be
happy to review it. I haven't yet investigated exactly what would be
required. In the long term though, I would like to fix this issue with a
service that can provide time travel information.

There is also another possible option, which is not quite as pretty but
may do enough to be useful for this purpose, which relates to raw
descriptors. #22026 would create a service for accessing raw
descriptors, which we could perhaps make into a time traveling service
and allow you to have a link to cite a raw descriptor.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180214001750</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-14 00:17:50-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#285] "Directory documents should be standardized as UTF-8"</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 14 Feb 2018, at 11:03, Damian Johnson &lt;atagar@torproject.org&gt; wrote:
&gt; 
&gt;&gt; For the metrics tools there are some guidelines on this we can follow:
&gt;&gt; https://docs.oracle.com/javase/tutorial/i18n/text/design.html. The other
&gt;&gt; language would be Python (for stem), but Python developers have probably
&gt;&gt; got a good understanding of unicode/str/bytes by now. (In Python 3: when
&gt;&gt; using UTF-8, BOM will not be stripped and will be interpreted as data,
&gt;&gt; and you can have a NUL in a str).
&gt; 
&gt; Hi Iain. Actually, for Stem I'm really looking forward to this too.
&gt; Stem has special handling for the contact and platform fields (iirc
&gt; the only spot non-ascii content can presently appear). Stem's parsers
&gt; and API will be simplified once everything is uniformly utf-8. :P
&gt; 
&gt; Possibly a stupid question but any reason not to require the whole
&gt; descriptor document to be printable characters?

Requiring printable ASCII throughout the document means that people
can't spell their names and email addresses correctly in contact lines.

Requiring printable unicode introduces a dependency on a particular
unicode version, because we don't know if unallocated blocks will be
printable or not.

I think we could make platform lines printable ASCII without losing
much. Unless there are platforms that have non-ASCII names?

T

--
Tim Wilson-Brown (teor)

teor2345 at gmail dot com
PGP C855 6CED 5D90 A0C5 29F6 4D43 450C BA7F 968F 094B
ricochet:ekmygaiu4rzgsk6n
------------------------------------------------------------------------





["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEkGcxKtinh53VfoNqdA2eOQJScqIFAlqDgC4ACgkQdA2eOQJS
cqJFOg//WUlyw0z5QWox92b1z10FnhM02S3lbGtzIKj5LjBqKiJw2TGb2Y03pYlG
2IcyaFVRAZvNdwTRVaah3N1H/xnPDwDdwCIGm20LuSMO5Q/r5uwp1C3wF5HYfCKE
Wqk9GNooLAAEvp1pe/k5fmmbExa2t1rPQaNQEQFUuB7tlJJuMYb0v2fV+eUidIgQ
+YldcOc5isbgNMpbFG8QXxYE5H9a1+MK8V7LmpnvfkehibRwxLo303CaoaD+EWRW
EADOtM4s1CQ1k9nVyj/U1tfFjsdGfDcicqpeVzxiTE1ZsN5cryEHXfPHJ3DES77u
znrl+ICcumjUgEFmR+hQ4Lc2VZtnuFJ+yB8nDaNPlptTnIE7YD3ofyv0F7+Zvryj
yv7OYE/9P6BlkCQOgFz/qunwaEJVl6nrnNi/31/zk9lhhDwoF8MszW2xIG9szeGH
B6carkEmtDU8iiZe2PMM1QpHKbx/OR7cPlmMamdVUXxflFvadgkZl1465iCywMFA
ORDtaDMh4yA1FDqq2ohDljko4aFEb8QBkFbDsGW86BHPNkYgkb8OK3zrFvllEOKc
nnAlgxFHLvtj7bulxtcDHNmo5ZMGmuAII8uT/pEhrmwWj/QJa3VzurQGEx481na0
SIRHG51h6WCTaQcXGroQ7zXQep7lfcqv70HcsvH58BCNXfq3Ba0=
=J629
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180215174747</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@mit.edu</senderEmail><timestampReceived>2018-02-15 17:47:47-0400</timestampReceived><subject>Re: [tor-dev] moria1 had 756 HSDir flags in its vote but, the consensus had 2583</subject><body>

On Mon, Feb 12, 2018 at 03:09:00PM +0000, nusenu wrote:
&gt; &gt;&gt;&gt; NOTICE: moria1 had 756 HSDir flags in its vote but
&gt; &gt;&gt;&gt; the consensus had 2583
&gt;
&gt; I tried to find it on trac, I guess this is:
&gt; https://trac.torproject.org/projects/tor/ticket/19162

Yes, correct. moria1 runs all sorts of experimental patches.

One of them is choosing the HSDir flag for relays based on:

+    hsdir_tk = find_nth_long(tks, n_active, n_active*3/4);
+    hsdir_bandwidth = find_nth_uint32(bandwidths_kb, n_active, n_active/4);

That is, the relay needs to be in the top quarter of the relays
by time-known, and in the top three-quarters of the relays by
bandwidth weights (as decided by moria1's bwauth).

I think the time-known idea is a potentially really smart one, since if
we do it right we force attacking hsdir relays to be in the network for
a long time before they are allowed to become hsdirs.

--Roger


["moria1-experimental-hsdir-patch.txt" (text/plain)]

diff --git a/src/or/dirserv.c b/src/or/dirserv.c
index d3bae24..9c4d91a 100644
--- a/src/or/dirserv.c
+++ b/src/or/dirserv.c
@@ -1336,6 +1336,11 @@ static double guard_wfu = 0.0;
 /** Don't call a router a guard unless we've known about it for at least this
  * many seconds. */
 static long guard_tk = 0;
+/** Don't call a router an HSDir unless we've known about it for at least this
+ * many seconds. */
+static long hsdir_tk = 0;
+/** Don't call a router an HSDir unless it has at least this weight. */
+static long hsdir_bandwidth = 0;
 /** Any router with a bandwidth at least this high is "Fast" */
 static uint32_t fast_bandwidth_kb = 0;
 /** If exits can be guards, then all guards must have a bandwidth this
@@ -1409,6 +1414,8 @@ dirserv_thinks_router_is_hs_dir(const routerinfo_t *router,
 {
 
   long uptime;
+  long tk = rep_hist_get_weighted_time_known(node-&gt;identity, now);
+  uint32_t bw_kb = dirserv_get_credible_bandwidth_kb(router);
 
   /* If we haven't been running for at least
    * get_options()-&gt;MinUptimeHidServDirectoryV2 seconds, we can't
@@ -1427,6 +1434,8 @@ dirserv_thinks_router_is_hs_dir(const routerinfo_t *router,
   return (router-&gt;wants_to_be_hs_dir &amp;&amp;
           router-&gt;supports_tunnelled_dir_requests &amp;&amp;
           node-&gt;is_stable &amp;&amp; node-&gt;is_fast &amp;&amp;
+          tk &gt;= hsdir_tk &amp;&amp;
+          bw_kb &gt;= hsdir_bandwidth &amp;&amp;
           uptime &gt;= get_options()-&gt;MinUptimeHidServDirectoryV2 &amp;&amp;
           router_is_active(router, node, now));
 }
@@ -1463,9 +1472,10 @@ router_counts_toward_thresholds(const node_t *node, time_t now,
 
 /** Look through the routerlist, the Mean Time Between Failure history, and
  * the Weighted Fractional Uptime history, and use them to set thresholds for
- * the Stable, Fast, and Guard flags.  Update the fields stable_uptime,
- * stable_mtbf, enough_mtbf_info, guard_wfu, guard_tk, fast_bandwidth,
- * guard_bandwidth_including_exits, and guard_bandwidth_excluding_exits.
+ * the Stable, Fast, Guard, and HSDir flags.  Update the fields stable_uptime,
+ * stable_mtbf, enough_mtbf_info, guard_wfu, guard_tk, hsdir_tk,
+ * hsdir_bandwidth, fast_bandwidth, guard_bandwidth_including_exits,
+ * and guard_bandwidth_excluding_exits.
  *
  * Also, set the is_exit flag of each router appropriately. */
 static void
@@ -1492,6 +1502,8 @@ dirserv_compute_performance_thresholds(digestmap_t *omit_as_sybil)
   guard_bandwidth_excluding_exits_kb = 0;
   guard_tk = 0;
   guard_wfu = 0;
+  hsdir_tk = 0;
+  hsdir_bandwidth = 0;
 
   nodelist_assert_ok();
   nodelist = nodelist_get_list();
@@ -1560,6 +1572,16 @@ dirserv_compute_performance_thresholds(digestmap_t *omit_as_sybil)
     guard_bandwidth_including_exits_kb =
       third_quartile_uint32(bandwidths_kb, n_active);
     guard_tk = find_nth_long(tks, n_active, n_active/8);
+    hsdir_tk = find_nth_long(tks, n_active, n_active*3/4);
+//    hsdir_bandwidth = median_uint32(bandwidths_kb, n_active);
+    hsdir_bandwidth = find_nth_uint32(bandwidths_kb, n_active, n_active/4);
+  }
+
+  {
+    int i;
+    for (i = 0; i &lt; n_active; i++) {
+      log_info(LD_GENERAL, "TK %d/%d: %ld", i, n_active, tks[i]);
+    }
   }
 
   if (guard_tk &gt; TIME_KNOWN_TO_GUARANTEE_FAMILIAR)
@@ -1621,11 +1643,13 @@ dirserv_compute_performance_thresholds(digestmap_t *omit_as_sybil)
   }
 
   log_info(LD_DIRSERV,
-      "Cutoffs: For Stable, %lu sec uptime, %lu sec MTBF. "
+      "Cutoffs (%d active): For Stable, %lu sec uptime, %lu sec MTBF. "
       "For Fast: %lu kilobytes/sec. "
       "For Guard: WFU %.03f%%, time-known %lu sec, "
       "and bandwidth %lu or %lu kilobytes/sec. "
+      "For HSDir: time-known %lu sec, bandwidth %lu kilobytes/sec. "
       "We%s have enough stability data.",
+      n_active,
       (unsigned long)stable_uptime,
       (unsigned long)stable_mtbf,
       (unsigned long)fast_bandwidth_kb,
@@ -1633,6 +1657,8 @@ dirserv_compute_performance_thresholds(digestmap_t *omit_as_sybil)
       (unsigned long)guard_tk,
       (unsigned long)guard_bandwidth_including_exits_kb,
       (unsigned long)guard_bandwidth_excluding_exits_kb,
+      (unsigned long)hsdir_tk,
+      (unsigned long)hsdir_bandwidth,
       enough_mtbf_info ? "" : " don't");
 
   tor_free(uptimes);

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180217005923</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-17 00:59:23-0400</timestampReceived><subject>Re: [tor-dev] monitoring significant drops of flags in dirauth votes</subject><body>

&gt; It might be smartest to just put in an exception for moria1's
&gt; HSDir votes, since we know it's being different.

Suppressed any notices for HSDir flags. Also fixed the time based
suppression for the check (it should have sent one notice a day rather
than one an hour).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180219164412</emailId><senderName>Alexander =?iso-8859-1?B?RuZy+Hk=?=</senderName><senderEmail>ahf@torproject.org</senderEmail><timestampReceived>2018-02-19 16:44:12-0400</timestampReceived><subject>[tor-dev] Cross compiling Tor for Windows</subject><body>

Hello.

I have recently been trying to wrap my head around some of the
Windows/Unix I/O code of Tor to do an API experiment with the PT
subsystem.

While working on this I remembered that Nick did a cool trick during the
development of the consensus diff feature where he managed to reproduce
a Windows only test case failure with Wine on Linux using a cross
compiled version of Tor that he build on Linux as well.

I wanted to try out if I was able to make use of this "trick" as well
and decided to write a short guide for setting up the cross compilation
environment for Tor on Debian. The guide is published at
https://github.com/ahf/tor-win32

The tor-win32 repository also contains a Makefile that will fetch and
cross compile a minimal set of dependencies of Tor (OpenSSL, Libevent,
and zlib) and Tor itself to the point where you should be able to run
both tor.exe and the test suites in Wine.

I hope this might be useful to someone else if they find themselves
having a need to quickly try something out on "Windows" without actually
having to install it -- remember though that this is not the same as
running Tor and the test suites on an actual Windows machine, which is
what many of our users are using! :-)

Cheers,
Alex.

-- 
Alexander Færøy
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180219200353</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2018-02-19 20:03:53-0400</timestampReceived><subject>Re: [tor-dev] Enhancement for Tor 0.3.4.x</subject><body>

Nick Mathewson &lt;nickm@alum.mit.edu&gt; writes:

&gt; [ text/plain ]
&gt; On Mon, Feb 12, 2018 at 2:32 PM, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt;&gt; Hello everone!
&gt;&gt;
&gt;&gt; As an effort to better organize our 0.3.4.x release for which the merge window
&gt;&gt; opens in 3 days (Feb 15th, 2018), we need to identify the enhancement(s) that
&gt;&gt; we want so we can better prioritize the development during the merge window
&gt;&gt; timeframe (3 months).
&gt;&gt;
&gt;&gt; Each feature should have its ticket marked for 0.3.4 milestone and with an
&gt;&gt; Owner set so we know who is "leading" that effort. It doesn't have to be the
&gt;&gt; person who code the whole thing but should be a good point of contact to start
&gt;&gt; with (and it can change over time as well).
&gt;&gt;
&gt;&gt; It is possible that an enhancement can have more than one ticket so in this
&gt;&gt; case, please make a "parent" ticket that explains the whole thing and child
&gt;&gt; tickets assigned to it.
&gt;&gt;
&gt;&gt; The network team just had its weekly meeting and if I recall correctly, these
&gt;&gt; enhancement should be planned for 0.3.4 (please the people who works on this,
&gt;&gt; can you tell us the tickets and make sure they are up to date?)
&gt;&gt;
&gt;&gt; - Privcount (prop#280)
&gt;&gt; - large CREATE cells (prop#249)
&gt;&gt;
&gt;&gt; If you plan to do a set of patches for a feature or enhancement, please do
&gt;&gt; submit it on this thread and make sure a proper ticket exists with an Owner.
&gt;
&gt; My biggest additional wishlist items for 0.3.4 are:
&gt;
&gt;   * ZSTD tuning (#24368)
&gt;   * Fewer wakeups when idle (#14039)
&gt;
&gt; And as a reach:
&gt;   * Improved TLS 1.3 support
&gt;

Hello,

I agree it's a great idea to prioritize features for the next releases
so that we don't go blind!

Question wrt TLS 1.3: Is it lots of work to support TLS 1.3? And what
do we gain by supporting it? Should we prioritize it for this release or
for a subsequent one?

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180221001443</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-21 00:14:43-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#245] [prop#282] "Deprecating and removing the TAP circuit extensi</subject><body>

[Attachment #2 (multipart/signed)]


Hello,

Meeting notes are available here. [0]  Takeaways include:

 * Some minor clarifications to prop#245, but it will be put in "Status:
   Accepted" with a ticket to implement and deploy step#1 ( §3).  We'll need
   to actually implement all the other steps too, with parameters to
   en-/dis- able them, so that we can properly test them before deployment
   (in ~2020).

 * prop#282 is accepted, and can be implemented immediately.

 * A new proposal summarising our newly created policy for consensus method
   deprecation will be written.

Thanks everyone!

[0]: http://meetbot.debian.net/tor-meeting/2018/tor-meeting.2018-02-20-23.11.html

Best regards,
-- 
 â™¥â’¶ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180221001922</emailId><senderName>isis agora lovecruft</senderName><senderEmail>isis@torproject.org</senderEmail><timestampReceived>2018-02-21 00:19:22-0400</timestampReceived><subject>Re: [tor-dev] [prop-meeting] [prop#267] "Tor Consensus Transparency"</subject><body>

[Attachment #2 (multipart/signed)]


teor transcribed 0.7K bytes:
&gt; I'm sorry, I didn't get Isis' original email, I think my spam folder ate it.
&gt; 
&gt; Can you please re-send?

Of course!  I actually didn't get a copy either; not sure what happened there.

----- Forwarded message from isis agora lovecruft &lt;isis@patternsinthevoid.net&gt; -----

&gt; From: isis agora lovecruft &lt;isis@patternsinthevoid.net&gt;
&gt; Subject: Re: [tor-dev] [prop-meeting] [prop#267] "Tor Consensus Transparency"
&gt; Date: Sat, 17 Feb 2018 06:31:03 +0000
&gt; Message-ID: &lt;20180217063103.GF28876@patternsinthevoid.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Cc: tom@torproject.org, nickm@torproject.org, linus@torproject.org
&gt; Reply-To: isis@patternsinthevoid.net
&gt; 
&gt; isis agora lovecruft transcribed 2.9K bytes:
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; Let's schedule a proposal discussion for prop#267 "Tor Consensus
&gt; &gt; Transparency" [0] sometime between 14 - 16 Feb.  If you're CCed, it's
&gt; &gt; because you put your name down on the pad as being interested in this
&gt; &gt; discussion.  If anyone has requests or concerns, or if I forgot to take your
&gt; &gt; timezone into account, please let me know.
&gt; &gt; 
&gt; &gt; https://doodle.com/poll/a6ih5a4dqr9bdsie
&gt; &gt; 
&gt; &gt; Note that this meeting will likely run longer than an hour.  I'll try to
&gt; &gt; keep it as short as possible… but in the past this discussion has been long.
&gt; &gt; 
&gt; &gt; [0]: https://gitweb.torproject.org/torspec.git/tree/proposals/267-tor-consensus-transparency.txt
&gt; 
&gt; Oh no!
&gt; 
&gt; I'm so sorry; I totally messed up and forgot to choose the best time
&gt; for people and announce it!  I knew this was going to happen at some
&gt; point; way more meetings to keep track of than I or probably any of us
&gt; are used to.
&gt; 
&gt; I was thinking about this a bit before: we generally seem to have two
&gt; disjoint sets of groups of people where no one "has to draw the short
&gt; straw" i.e. attend a work meeting at a super unreasonable time:
&gt; 
&gt; 1. americas + europe
&gt; 2. australia + americas
&gt; 
&gt; I'm not sure how to do this, but perhaps there a way to vote such that
&gt; we determine which set we're in, and then we simply have
&gt; pre-determined meeting times each week for both groups, and we arrange
&gt; the meetings for the interested groups at those set times?  Would that
&gt; work with most people's schedules?  Or would it be too much of a
&gt; burden to guarantee another weekly meeting?  We could also
&gt; duplicate/rehash meeting notes between meetings, if both sets are
&gt; equivalently interested in a topic.
&gt; 
&gt; (Also, there is a potential third set of "australia + europe" which
&gt; we've missed due to cognitive biases of having too many people in the
&gt; americas.)
&gt; 
&gt; Please let me know your thoughts!  I'm not totally sold on this idea,
&gt; but I want to find a way to make discussions easier and better for
&gt; everyone.  Especially remembering that they are happening.  *blush*
&gt; 
&gt; I propose the following meeting times, for each group, respectively:
&gt; 
&gt; 1. Tuesdays @ 18:00 UTC (10:00 PST/13:00 EST/20:00 CET/05:00+1 AEDT)
&gt; 2. Tuesdays @ 22:00 UTC (14:00 PST/17:00 EST/00:00+1 CET/12:00+1 AEDT)
&gt; 
&gt; Please feel free to request alternate times!  Especially for people in
&gt; Europe, these times aren't quite fair.  (However, I'm also not seeing
&gt; as much participation for european residents according to the pad and
&gt; doodles.)
&gt; 
&gt; Best regards,
&gt; -- 
&gt;  ♥Ⓐ isis agora lovecruft
&gt; _________________________________________________________
&gt; OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
&gt; Current Keys: https://fyb.patternsinthevoid.net/isis.txt

----- End forwarded message -----

-- 
 ♥Ⓐ isis agora lovecruft
_________________________________________________________
OpenPGP: 4096R/0A6A58A14B5946ABDE18E207A3ADB67A2CDB8B35
Current Keys: https://fyb.patternsinthevoid.net/isis.txt

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180221210642</emailId><senderName>teor</senderName><senderEmail>teor2345@gmail.com</senderEmail><timestampReceived>2018-02-21 21:06:42-0400</timestampReceived><subject>Re: [tor-dev] Proposal 290: Continuously update consensus methods</subject><body>



&gt; On 22 Feb 2018, at 04:02, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt; Some consensus methods remove a feature that was used up to method
&gt;   N. Deprecating method M means that the feature is no longer used by
&gt;   any supported consensus methods. Therefore, we can remove any code
&gt;   that implements the feature.

Do we want to use "method N" consistently here?
(I think this is my mistake from the pad.)

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180223003109</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2018-02-23 00:31:09-0400</timestampReceived><subject>[tor-dev] txtorcon 0.20.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm very happy to release txtorcon 0.20.0. This includes a few minor
new features and an important bug fix if you're using a Tor new enough
to have all the *PortLines changes (anything after 0.3.0.6; see Tor
issue #20956). Full list of changes:

 * doc fixes (from hotelzululima)
 * Issue 246: fix endpoints so .connect on them works properly more than once
   (from Brian Warner)
 * allow a CertificateOptions to be passed as tls= to endpoints
 * PR 252: add method txtorcon.Tor.is_ready
 * PR 252: add method txtorcon.Tor.become_ready
 * PR 253: fix handling of certain defaults (*PortLines and friends)
 * fix last router (usually) missing with (new) `MicroDescriptorParser`
 * use OnionOO via Onion service tgel7v4rpcllsrk2.onion for txtorcon.Router.get_onionoo_details
 * fix parsing of Router started-times
 * Issue 255: removed routers always deleted following NEWCONSENSUS
 * Issue 279: remember proxy endpoint if it was Deferred

You can download the release from PyPI or GitHub (or of course "pip
install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/0.20.0
   https://github.com/meejah/txtorcon/releases/tag/v0.20.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-0.20.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-0.20.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
dc80cb76b3ddacef6d671c0a088cb1a45274c0858554c32ce55d0f41421c740e  txtorcon-0.20.0.tar.gz
a957b3dc10f0b2b882ef6ad46d2932fa7731d5eeee6d52ba9d736d2bc4f1385f  txtorcon-0.20.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQEcBAEBAgAGBQJaj2AIAAoJEMJgKAMSgGmnnGUIANXkNIF8c98nwCa4Q9Xws3Hv
9zAJSWsDst/58lHka6bE5d1JWYz78fTubTC2ofOFH0MOkjeSyEtgTO58xlKY9wTC
w7ohePwcV+md1wPOpciHVZMBVhqUhKGqNhMYehTXjcCEwppgXhiINgGFLaF0XSUM
aJzY7laEvg2E/1p+gH0e4tkJuSVKVOK+5MWBali8YlOZY28R6w/X0Q0n8su1ntl2
bKsxpTrv+p8J+K7WvpeaXIuZnC/fRwVFZ0vtwzKtrTKimAE60yPfOi5hLUyW2PGx
FkpH6B0bgl5FMiY+Y0PV8rP2DXikCibpwsipBh4AHpTYGSdMkSogjiRupkJxeeQ=
=GsVt
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180226060042</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2018-02-26 06:00:42-0400</timestampReceived><subject>Re: [tor-dev] Creating custom Tor Browser settings profile</subject><body>

On Mon, Feb 26, 2018 at 12:26 AM, procmem &lt;procmem@riseup.net&gt; wrote:
&gt; Any way to do this?

See 'firefox -h'.
Then see if 'torbrowser -h' and args work the same way.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180226160236</emailId><senderName>iwakeh</senderName><senderEmail>iwakeh@torproject.org</senderEmail><timestampReceived>2018-02-26 16:02:36-0400</timestampReceived><subject>[tor-dev] [release] CollecTor 1.5.0, metrics-lib 2.2.0</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi there!

two new releases are available:

     https://dist.torproject.org/collector/1.5.0/
     https://dist.torproject.org/metrics-lib/2.2.0/

These releases will be deployed on tp.o instances after several weeks of testing,
and provide Tor's web server access logs that are currently available on [0] through
CollecTor.

All possibly privacy impacting data is removed from the logs prior publishing.
What exactly is done to ensure privacy can be found in the specification doc [1].
The additions to metrics-lib's API can be read in its Javadoc pages [2].

Other details can be found in the respective change logs [3] and [4]. 

Please direct comments and questions to the metrics-team mailing list [5].

Cheers,
iwakeh

[0] https://webstats.torproject.org/
[1] https://metrics.torproject.org/web-server-logs.html
[2] https://metrics.torproject.org/metrics-lib/
    https://metrics.torproject.org/metrics-lib/index.html?org/torproject/descriptor/WebServerAccessLog.html
  https://metrics.torproject.org/metrics-lib/index.html?org/torproject/descriptor/LogDescriptor.html
 [3] https://gitweb.torproject.org/collector.git/tree/CHANGELOG.md?h=collector-1.5.0
[4] https://gitweb.torproject.org/metrics-lib.git/tree/CHANGELOG.md?h=metrics-lib-2.2.0
 [5] https://lists.torproject.org/cgi-bin/mailman/listinfo/metrics-team


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20180228001119</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2018-02-28 00:11:19-0400</timestampReceived><subject>Re: [tor-dev] DocTor Check for &lt;3 bw auth votes available</subject><body>

&gt; I get the feeling that I'm annoying you so I'll try to stop that by avoiding any further
&gt; such DocTor requests.

Hi nusenu, I'm not annoyed in the least - sorry if I gave that impression!

My read is that you asked for a notification when bandwidth
authorities are missing, which we already have. It's a simple
messaging change to say "we have X of Y" and if you'd care to send
that patch I'd be happy to merge it.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20180228202232</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2018-02-28 20:22:32-0400</timestampReceived><subject>[tor-dev] New link on Tor Metrics: download data as CSV</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi tor-dev!

Today we added a small, but potentially quite useful feature to Tor Metrics.

The data that is displayed in a graph can now be downloaded as CSV file
by clicking on "download data as CSV".

This is different from before, where we provided the larger CSV file
that a graph is based on. Getting the relevant data out of that would
still require some data wrangling. This has become a lot easier now.

Want to try it out? Go to any graph on Tor Metrics, for example:

https://metrics.torproject.org/relays-ipv6.html?start=2013-02-28&amp;end=2018-02-28

Click on "download data as CSV" and you'll get just the values that are
plotted in the graph.

Want to learn more and maybe help us make this feature more useful?
There's more about it in tickets #25282 (closed), #25383, and #25387.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email></emails>