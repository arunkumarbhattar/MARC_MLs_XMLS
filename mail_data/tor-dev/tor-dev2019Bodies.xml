<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20190203002400</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-02-03 00:24:00-0400</timestampReceived><subject>[tor-dev] tor relay process health data for operators (controlport)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

every now and then I'm in contact with relay operators
about the "health" of their relays.
Following these 1:1 discussions and the discussion on tor-relays@
I'd like to rise two issues with you (the developers) with the goal 
to help improve relay operations and end user experience in the long term:

1) DNS (exits only)
2) tor relay health data

1) DNS
------
Current situation: 
Arthur Edelstein provides public measurements to tor exit relay operators via
his page at: https://arthuredelstein.net/exits/
This page is updated once daily.

the process to use that data looks like this:
- first they watch Arthur's measurement results
- if their failure rate is non-zero they try to tweak/improve/change their setup
- wait for another 24 hours (next measurement)

This is a somewhat suboptimal and slow feedback loop and is probably also
less accurate and less valuable data when compared to the data the tor
process can provide.

Suggestion for improvement:

Exposes the following DNS status information 
via tor's controlport to help debug and detect DNS issues on exit relays:

(total numbers since startup)
- amount of DNS queries send to the resolver
- amount of DNS queries send to the resolver due to a RESOLVE request
- DNS queries send to resolver due to a reverse RESOLVE request
- amount of queries that did not result in any answer from the resolver
- breakdown of number of responses by response code (RCODE)
https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
- max amount of DNS queries send per curcuit

If this causes a significant performance impact this feature should be disabled
by default.


2) general relay health metrics
--------------------------------

Compared to other server daemons (webserver, DNS server, ..)
tor provides little data for operators to detect operational issues
and anomalies.

I'd suggest to provide the following stats via the control port:
(most of them are already written to logfiles by default but not accessible
via the controlport as far as I've seen)

- total amount of memory used by the tor process
- amount of currently open circuits 
- circuit handshake stats (TAP / NTor) 

DoS mitigation stats 
- amount of circuits killed with too many cells 
- amount of circuits rejected
- marked addresses
- amount of connections closed
- amount  of single hop clients refused

- amount of closed/failed circuits broken down by their reason value
https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n1402
https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n1994

- amount of closed/failed OR connections broken down by their reason value
https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n2205

If this causes a significant performance impact this feature should be disabled
by default.

cell stats
- extra info cell stats
as defined in:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1072



This data should be useful to answer the following questions:

- High level questions: Is the tor relay healthy?
- is it hitting any resource limits? 
- is the tor process under unusual load?
- why is tor using more memory?
- is it slower than usual at handling circuits?
- can the DNS resolver handle the amount of DNS queries tor is sending it?


This data could help prevent errors from occurring or provide
additional data when trying to narrow down issues.

When it comes to the question: 
**Is it "safe" to make this data accessible via the controlport?**

I assume it is safe for all information that current versions of 
tor writes to logfiles or even publishes as part of its extra info descriptor.

Should tor provide this or similar data 
I'm planing to write scripts for operators to make use
of that data (for example a munin plugin that connects to tor's controlport).

I'm happy to help write updates for control-spec should these features 
seem reasonable to you.

Looking forward to hearing your feedback.
nusenu




-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu






["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190307120053</emailId><senderName>Pouya Miralaee</senderName><senderEmail>pouyamiralayi@gmail.com</senderEmail><timestampReceived>2019-03-07 12:00:53-0400</timestampReceived><subject>[tor-dev] download consensus from mirrors based on frequency options in torrc</subject><body>

[Attachment #2 (multipart/alternative)]


 Hello to the community.
according to these frequency options below, how should i specify that tor
does not or if it has to, only in necessary times downloads consensus from
directory servers and in all other cases, download them from mirrors or
fallbacks.

    "ClientBootstrapConsensusAuthorityDownloadSchedule": "6, 11, 3600,
10800, 25200, 54000, 111600, 262800",
    "ClientBootstrapConsensusFallbackDownloadSchedule": "0, 1, 4, 11, 3600,
10800, 25200, 54000, 111600,262800",
    "ClientBootstrapConsensusAuthorityOnlyDownloadSchedule": "0, 3, 7,
3600, 10800, 25200, 54000, 111600,262800",

I just intend to complete the decentralized situation in here. but i can
not figure out how these frequency options work together.
thanks in advance.
Cheers.


-- 
*Pouya Miralayi*


-- 
*Pouya Miralayi*

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;
&lt;div&gt;Hello to the community.&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;according 
to these frequency options below, how should i specify that tor does not
 or if it has to, only in necessary times downloads consensus from 
directory servers and in all other cases, download them from mirrors or 
fallbacks.&lt;/div&gt;&lt;div dir="ltr"&gt; &lt;br&gt;       \
"ClientBootstrapConsensusAuthorityDownloadSchedule": "6, 11, 3600, \
10800, 25200, 54000, 111600, 262800",&lt;br&gt;       \
"ClientBootstrapConsensusFallbackDownloadSchedule": "0, 1, 4, 11, \
3600, 10800, 25200, 54000, 111600,262800",&lt;br&gt;       \
"ClientBootstrapConsensusAuthorityOnlyDownloadSchedule": "0, 3, 7, \
3600, 10800, 25200, 54000, 111600,262800",&lt;br clear="all"&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt; I just intend to complete the decentralized \
situation in here. but i can  not figure out how these frequency options work \
together.&lt;/div&gt;&lt;div&gt;thanks in advance.&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers.&lt;/div&gt;

&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail-m_-4275586138800677251gmail_signature"&gt;*Pouya Miralayi*&lt;/div&gt;

&lt;br clear="all"&gt;&lt;br&gt;-- &lt;br&gt;&lt;div dir="ltr" class="gmail_signature" \
data-smartmail="gmail_signature"&gt;*Pouya Miralayi*&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190328011808</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-03-28 01:18:08-0400</timestampReceived><subject>[tor-dev] Docker images for help people to run Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, I'm an Italian developer who want to help development and grow up the
Tor network.
I would like to share with you an idea to grow up the Tor Network.
Working with Docker, i have released two images, a Tor Exit Relay image
(named "tor-relay") and an image (named "torworld-template").
The idea is to use Docker and build images for facilitate users to run a
Tor Relay or an Hidden Service.
The two images are located on Docker Hub in this locations:

Tor Exit Relay: https://hub.docker.com/r/alessandrofiori/tor-relay
Tor Machine Template:
https://hub.docker.com/r/alessandrofiori/torworld-template

If you want to see how the images are built, please check the following
Dockerfile

Tor Exit Relay:
https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay
Tor Machine Template:
https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World

If you want to see how i automate the build and push process, please check
the following script:

Process with system cleanup:
https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat
Process for rolling release:
https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat

Actually i'm working in a Windows environment, i will release ubuntu
scripts soon.

I would like to share with everyone, so if this can be helpful, this can be
a starting point for build up images for help people to run relays or
hidden services.

This kind of approach can be reduce costs for people who want to run a
relay or an hidden service, and can be an help for building a more
censorship-resistant platform, by using a Docker Swarm, and replicating
instances.

Waiting for your reply as soon as possible, i'm very curious if this
project can be helpful for Tor Project!

Kind regards (and thanks for your hard work)
Alessandro Fiori

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi, \
I'm an Italian developer who want to help development and grow up the Tor \
network.&lt;/div&gt;&lt;div dir="ltr"&gt;I would like to share with you an idea to grow up the \
Tor Network.&lt;/div&gt;&lt;div dir="ltr"&gt;Working with Docker, i have released two images, a \
Tor Exit Relay image (named "tor-relay") and an image (named \
"torworld-template").&lt;/div&gt;&lt;div dir="ltr"&gt;The idea is to use Docker and \
build images for facilitate users to run a Tor Relay or an Hidden Service.&lt;/div&gt;&lt;div \
dir="ltr"&gt;The two images are located on Docker Hub in this locations:&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Tor Exit Relay: &lt;a \
href="https://hub.docker.com/r/alessandrofiori/tor-relay" \
target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/tor-relay&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Tor Machine Template: &lt;a \
href="https://hub.docker.com/r/alessandrofiori/torworld-template" \
target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/torworld-template&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;If you want to see how the images are built, \
please check the following Dockerfile&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Tor Exit Relay: &lt;a \
href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay" \
target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Tor Machine Template: &lt;a \
href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World" \
target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;If you want to see how i automate the build and \
push process, please check the following script:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Process with system cleanup: &lt;a \
href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat" \
target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Process for rolling release: &lt;a \
href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat" \
target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Actually i'm working in a Windows environment, \
i will release ubuntu scripts soon.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I \
would like to share with everyone, so if this can be helpful, this can be a starting \
point for build up images for help people to run relays or hidden services.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This kind of approach can be reduce costs for people who \
want to run a relay or an hidden service, and can be an help for building a more \
censorship-resistant platform, by using a Docker Swarm, and replicating \
instances.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Waiting for \
your reply as soon as possible, i'm very curious if this project can be helpful \
for Tor Project!&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Kind regards (and \
thanks for your hard work)&lt;/div&gt;&lt;div dir="ltr"&gt;Alessandro \
Fiori&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190412053147</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-04-12 05:31:47-0400</timestampReceived><subject>[tor-dev] Release: obfs4proxy-0.0.10</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

I just tagged obfs4proxy-0.0.10.  The primary changes are a minor fix to
the meek_lite behavior when using `utls` as the TLS implementation, and
a series of updates (primarily following upstream) to the `utls` library.

Tarball/Signature:
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz.asc

Changes in version 0.0.10 - 2019-04-12:
 - Disable behavior distinctive to crypto/tls when using utls.
 - Bump the version of the utls fork.

Regards,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190503134818</emailId><senderName>Steve Snyder</senderName><senderEmail>swsnyder@snydernet.net</senderEmail><timestampReceived>2019-05-03 13:48:18-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>

FYI, obfs4proxy no longer recognizes address:port in this form:

    ServerTransportListenAddr obfs4 [000.000.000.000]:443

Note the square brackets. Tor 0.3.5.8 / 0.4.0.5 still parses this
syntax, and obfs4proxy used to too. As of 0.0.10 it no longer does.


On 4/12/19 1:31 AM, Yawning Angel wrote:
&gt; Hello,
&gt; 
&gt; I just tagged obfs4proxy-0.0.10.  The primary changes are a minor fix to
&gt; the meek_lite behavior when using `utls` as the TLS implementation, and
&gt; a series of updates (primarily following upstream) to the `utls` library.
&gt; 
&gt; Tarball/Signature:
&gt; https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz
&gt; https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz.asc
&gt; 
&gt; Changes in version 0.0.10 - 2019-04-12:
&gt;  - Disable behavior distinctive to crypto/tls when using utls.
&gt;  - Bump the version of the utls fork.
&gt; 
&gt; Regards,
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190504152753</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-05-04 15:27:53-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 5/3/19 1:48 PM, Steve Snyder wrote:
&gt; FYI, obfs4proxy no longer recognizes address:port in this form:
&gt; 
&gt;     ServerTransportListenAddr obfs4 [000.000.000.000]:443
&gt; 
&gt; Note the square brackets. Tor 0.3.5.8 / 0.4.0.5 still parses this
&gt; syntax, and obfs4proxy used to too. As of 0.0.10 it no longer does.

Odd.  None of that code, both in obfs4proxy and goptlib, has changed for
years.  I'll look at it when I have a moment.

Regards,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190504162645</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-05-04 16:26:45-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>

On Sat, May 04, 2019 at 03:27:53PM +0000, Yawning Angel wrote:
&gt; On 5/3/19 1:48 PM, Steve Snyder wrote:
&gt; &gt; FYI, obfs4proxy no longer recognizes address:port in this form:
&gt; &gt; 
&gt; &gt;     ServerTransportListenAddr obfs4 [000.000.000.000]:443
&gt; &gt; 
&gt; &gt; Note the square brackets. Tor 0.3.5.8 / 0.4.0.5 still parses this
&gt; &gt; syntax, and obfs4proxy used to too. As of 0.0.10 it no longer does.
&gt; 
&gt; Odd.  None of that code, both in obfs4proxy and goptlib, has changed for
&gt; years.  I'll look at it when I have a moment.

Might be this?

tor_addr_parse is overly permissive
https://bugs.torproject.org/23082
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190328124657</emailId><senderName>Chelsea Holland Komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2019-03-28 12:46:57-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor</subject><body>

Hi,

Thanks for this information and putting this together! Making relays
easier to run is always a helpful thing to us.

We have a wiki page to aggregate relay infrastructure projects such as
this. If you can add your projects to this page (and any required
instructions), that would be great. 

https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure

Thanks for the contribution!
Chelsea

On 2019-03-27 21:18, Alessandro Fiori wrote:
&gt; Hi, I'm an Italian developer who want to help development and grow up
&gt; the Tor network.
&gt; I would like to share with you an idea to grow up the Tor Network.
&gt; Working with Docker, i have released two images, a Tor Exit Relay
&gt; image (named "tor-relay") and an image (named "torworld-template").
&gt; The idea is to use Docker and build images for facilitate users to run
&gt; a Tor Relay or an Hidden Service.
&gt; The two images are located on Docker Hub in this locations:
&gt; 
&gt; Tor Exit Relay: https://hub.docker.com/r/alessandrofiori/tor-relay
&gt; Tor Machine Template:
&gt; https://hub.docker.com/r/alessandrofiori/torworld-template
&gt; 
&gt; If you want to see how the images are built, please check the
&gt; following Dockerfile
&gt; 
&gt; Tor Exit Relay:
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay
&gt; Tor Machine Template:
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World
&gt; 
&gt; If you want to see how i automate the build and push process, please
&gt; check the following script:
&gt; 
&gt; Process with system cleanup:
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat
&gt; Process for rolling release:
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat
&gt; 
&gt; Actually i'm working in a Windows environment, i will release ubuntu
&gt; scripts soon.
&gt; 
&gt; I would like to share with everyone, so if this can be helpful, this
&gt; can be a starting point for build up images for help people to run
&gt; relays or hidden services.
&gt; 
&gt; This kind of approach can be reduce costs for people who want to run a
&gt; relay or an hidden service, and can be an help for building a more
&gt; censorship-resistant platform, by using a Docker Swarm, and
&gt; replicating instances.
&gt; 
&gt; Waiting for your reply as soon as possible, i'm very curious if this
&gt; project can be helpful for Tor Project!
&gt; 
&gt; Kind regards (and thanks for your hard work)
&gt; Alessandro Fiori
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190601192219</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-01 19:22:19-0400</timestampReceived><subject>[tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

Hi folks,

I've been talking to a longtime exit relay operator, who is in the
odd position of having a good 1gbit network connection, but only one
IP address.

He used to push an average of 500mbit on his exit relay, but then the
HSDir DoS flatlined his relay for a while (!), and now, perhaps due to
the bwauth variability, his exit relay only recovered to maybe 200mbit.
He is running a second exit relay on that IP address, but also perhaps
due to the bwauth variability, it hasn't attracted much attention either.

The real answer is to fix the bandwidth measurement infrastructure. But
while we're patiently waiting for progress there, I've been thinking
to raise moria1's AuthDirMaxServersPerAddr to 4, i.e. to allow 4 relays
per IP address onto the network.

I don't think it would significantly increase our risk due to Sybil
attacks, whereas there is a clear benefit in terms of some more 100's
of mbits of good exit relay capacity.

I will propose this change to the dir-auth list in a bit, but here is
your chance to point out surprising impacts that I haven't thought of.

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190602033018</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 03:30:18-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

&gt; On 2 Jun 2019, at 05:22, Roger Dingledine &lt;arma@torproject.org&gt; wrote:
&gt; 
&gt; I've been talking to a longtime exit relay operator, who is in the
&gt; odd position of having a good 1gbit network connection, but only one
&gt; IP address.
&gt; 
&gt; He used to push an average of 500mbit on his exit relay, but then the
&gt; HSDir DoS flatlined his relay for a while (!), and now, perhaps due to
&gt; the bwauth variability, his exit relay only recovered to maybe 200mbit.
&gt; He is running a second exit relay on that IP address, but also perhaps
&gt; due to the bwauth variability, it hasn't attracted much attention either.

I'd like to confirm the problem before we make major network changes.
(And I'd like to know how widespread it is.)

Which bandwidth authorities are limiting the consensus weight of these
relays? Where are they located?

Are the relays' observed bandwidths limiting their consensus weight?

Here's how the operator can find out:
https://trac.torproject.org/projects/tor/wiki/doc/MyRelayIsSlow#TorNetworkLimits

If the relays are being measured by longclaw's sbws instance, we should
also look at their detailed measurement diagnostics.

longclaw's bandwidth file is available at:
http://199.58.81.140/tor/status-vote/next/bandwidth

&gt; The real answer is to fix the bandwidth measurement infrastructure.

Do we have funding to continue to improve the bandwidth measurement
infrastructure? Or to maintain it?

If we don't have any grants in the pipeline, now would be a good time to
start some.

&gt; But
&gt; while we're patiently waiting for progress there, I've been thinking
&gt; to raise moria1's AuthDirMaxServersPerAddr to 4, i.e. to allow 4 relays
&gt; per IP address onto the network.
&gt; 
&gt; I don't think it would significantly increase our risk due to Sybil
&gt; attacks, whereas there is a clear benefit in terms of some more 100's
&gt; of mbits of good exit relay capacity.
&gt; 
&gt; I will propose this change to the dir-auth list in a bit, but here is
&gt; your chance to point out surprising impacts that I haven't thought of.

Splitting bandwidth between multiple relays has privacy implications,
because traffic is easier to track between instances.

It also increases the size of the consensus.

So we should choose a value for AuthDirMaxServersPerAddr that is
a compromise between these competing goals.

Why is 4 better than 3 or 5?

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi \
all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 2 Jun 2019, at 05:22, Roger \
Dingledine &lt;&lt;a href="mailto:arma@torproject.org"&gt;arma@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I've \
been talking to a longtime exit relay operator, who is in the&lt;/span&gt;&lt;br&gt;&lt;span&gt;odd \
position of having a good 1gbit network connection, but only one&lt;/span&gt;&lt;br&gt;&lt;span&gt;IP \
address.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;He used to push an average of 500mbit on \
his exit relay, but then the&lt;/span&gt;&lt;br&gt;&lt;span&gt;HSDir DoS flatlined his relay for a \
while (!), and now, perhaps due to&lt;/span&gt;&lt;br&gt;&lt;span&gt;the bwauth variability, his exit \
relay only recovered to maybe 200mbit.&lt;/span&gt;&lt;br&gt;&lt;span&gt;He is running a second exit \
relay on that IP address, but also perhaps&lt;/span&gt;&lt;br&gt;&lt;span&gt;due to the bwauth \
variability, it hasn't attracted much attention \
either.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'd like to confirm the \
problem before we make major network changes.&lt;/div&gt;&lt;div&gt;(And I'd like to know how \
widespread it is.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Which bandwidth authorities are limiting \
the consensus weight of these&lt;/div&gt;&lt;div&gt;relays? Where are they \
located?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Are the relays' observed bandwidths limiting their \
consensus weight?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's how the operator can find \
out:&lt;/div&gt;&lt;div&gt;&lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/MyRelayIsSlo \
w#TorNetworkLimits"&gt;https://trac.torproject.org/projects/tor/wiki/doc/MyRelayIsSlow#TorNetworkLimits&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
the relays are being measured by longclaw's sbws instance, we should&lt;/div&gt;&lt;div&gt;also \
look at their detailed measurement diagnostics.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;longclaw's \
bandwidth file is available at:&lt;/div&gt;&lt;div&gt;&lt;a \
href="http://199.58.81.140/tor/status-vote/next/bandwidth"&gt;http://199.58.81.140/tor/status-vote/next/bandwidth&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;The real answer is to fix the bandwidth measurement \
infrastructure.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Do we have funding to \
continue to improve the bandwidth measurement&lt;/div&gt;&lt;div&gt;infrastructure? Or to \
maintain it?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we don't have any grants in the pipeline, \
now would be a good time to&lt;/div&gt;&lt;div&gt;start some.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;But&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;while we're patiently waiting for progress there, I've been \
thinking&lt;/span&gt;&lt;br&gt;&lt;span&gt;to raise moria1's AuthDirMaxServersPerAddr to 4, i.e. to \
allow 4 relays&lt;/span&gt;&lt;br&gt;&lt;span&gt;per IP address onto the \
network.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;I don't \
think it would significantly increase our risk due to Sybil&lt;/span&gt;&lt;br&gt;&lt;span&gt;attacks, \
whereas there is a clear benefit in terms of some more 100's&lt;/span&gt;&lt;br&gt;&lt;span&gt;of mbits \
of good exit relay capacity.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I will propose this \
change to the dir-auth list in a bit, but here is&lt;/span&gt;&lt;br&gt;&lt;span&gt;your chance to \
point out surprising impacts that I haven't thought \
of.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Splitting bandwidth between multiple relays \
has privacy implications,&lt;/div&gt;&lt;div&gt;because traffic is easier to track between \
instances.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It also increases the size of the \
consensus.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;So we should choose a value for AuthDirMaxServersPerAddr that \
is&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;a \
compromise between these competing goals.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Why is 4 better than 3 or \
5?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190602054906</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 05:49:06-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 2 Jun 2019, at 13:30, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; On 2 Jun 2019, at 05:22, Roger Dingledine &lt;arma@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; I've been talking to a longtime exit relay operator, who is in the
&gt;&gt; odd position of having a good 1gbit network connection, but only one
&gt;&gt; IP address.
&gt;&gt; 
&gt;&gt; He used to push an average of 500mbit on his exit relay, but then the
&gt;&gt; HSDir DoS flatlined his relay for a while (!), and now, perhaps due to
&gt;&gt; the bwauth variability, his exit relay only recovered to maybe 200mbit.
&gt;&gt; He is running a second exit relay on that IP address, but also perhaps
&gt;&gt; due to the bwauth variability, it hasn't attracted much attention either.
&gt; 
&gt; I'd like to confirm the problem before we make major network changes.
&gt; (And I'd like to know how widespread it is.)
&gt; 
&gt; Which bandwidth authorities are limiting the consensus weight of these
&gt; relays? Where are they located?
&gt; 
&gt; Are the relays' observed bandwidths limiting their consensus weight?
&gt; 
&gt; Here's how the operator can find out:
&gt; https://trac.torproject.org/projects/tor/wiki/doc/MyRelayIsSlow#TorNetworkLimits
&gt; 
&gt; If the relays are being measured by longclaw's sbws instance, we should
&gt; also look at their detailed measurement diagnostics.
&gt; 
&gt; longclaw's bandwidth file is available at:
&gt; http://199.58.81.140/tor/status-vote/next/bandwidth

For example, this relay is limited by Comcast's poor peering to MIT and
Europe. We've spoken to a few Comcast relay operators with similar issues.

https://lists.torproject.org/pipermail/tor-relays/2019-June/017376.html

Adding more tor instances on networks like Comcast would only slow down
Tor.

&gt;&gt; The real answer is to fix the bandwidth measurement infrastructure.
&gt; 
&gt; Do we have funding to continue to improve the bandwidth measurement
&gt; infrastructure? Or to maintain it?
&gt; 
&gt; If we don't have any grants in the pipeline, now would be a good time to
&gt; start some.

I wrote to the grants team about bandwidth authority funding.

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzzY1IACgkQEP6qDnB1
Zyp62g//ZfllmZQSMUENJI46u9gNltqYp45QRIaTCxr35GQ0+a0qxjQrKa7pqOk/
ofSAlAl/Jyb8CyFBLrMDD+udhb2qxZEiyzjm8b0X3S/c/Rx4l8/IU9gEJE07BjmV
76WfvpPfyAKeVAWKXvIRaXNZNFanN7vhDEC4Q2Jq4h65bqS2fvruI99wmic6aCfR
f4xi9h6rhk0tNvxqx7fQ3PUDxx48s3q9REbZ4ei5b/EtHqf1lpbpQhP9LpXWpUSS
LbnfjWzvgIuIA0Et70J5nlkPD+0zRFEzSUQFueEth352P0a0fn962o9AbrK3XtdD
QM54rI/+xUGlFA30wrFX7VOssoHPR/LSkIpoxMux+Qg2baNP1YgELSv5GnlXUToA
tRUfFk1pV1RDXnbr8WrP4FcaDnWOLQheNdhUcvIjcJ7sBoAZCT0C4S2OGOJf1AH1
P9tA796IvwDSAJHr/7a1watNyayGlQi8jux9MPzXy3fOuyHLdjc49n6ilH5GZI7i
gEY8qnXAPcL+uKVdLeDoYxtj+F6h1ZHS4Pyo6xvxUdat2Xa9JR5CLwlipLzyCujf
GI4bmaGeDPRHRXMhSxpl/GqL3ZtF9jatpJlQe1ZZRnIQ9bRyz7nS08FfjVey+WOA
78i7E8nP5IJwPNsbBDhmaAFtSZwMDMszmio8b2DGXjXK7qs5QII=
=8e+G
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190602082124</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-02 08:21:24-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

On Sun, Jun 02, 2019 at 01:30:18PM +1000, teor wrote:
&gt; Which bandwidth authorities are limiting the consensus weight of these
&gt; relays? Where are they located?

The one in question is in Sweden:
https://metrics.torproject.org/rs.html#details/D5F2C65F4131A1468D5B67A8838A9B7ED8C049E2

It has votes of:
w Bandwidth=10000 Measured=65200
w Bandwidth=10000 Measured=70000
w Bandwidth=10000 Measured=74200
w Bandwidth=10000 Measured=77000
w Bandwidth=10000 Measured=99400
w Bandwidth=10000 Measured=102000

and it currently reports a self-measured peak at 56MBytes/s.

So one could interpret the current bwauths as saying that it is
a bit above average compared to other 56MByte/s relays. Maybe that's
because the other 56MByte/s relays got better lately, or maybe that's
because there's less overall traffic on the network, but my guess is
it's because it's stuck in that rut because the bwauths are not good
at realizing it could go a lot faster.

&gt; Are the relays' observed bandwidths limiting their consensus weight?

bandwidth 89600000 102400000 55999620

So it looks like no.

&gt; If the relays are being measured by longclaw's sbws instance, we should
&gt; also look at their detailed measurement diagnostics.

Looks like yes, it is measured:

w Bandwidth=10000 Measured=78000

I look forward to hearing about these detailed measurement diagnostics. :)

&gt; Do we have funding to continue to improve the bandwidth measurement
&gt; infrastructure? Or to maintain it?
&gt; 
&gt; If we don't have any grants in the pipeline, now would be a good time to
&gt; start some.

Agreed.

sbws was always intended (as far as I recall) to be a bandaid to make
the torflow approach more maintainable, while we continue to await
research on better-but-still-workable approaches. I hear the NRL folks
have another design they've been working on that sounds promising.

&gt; &gt; I will propose this change to the dir-auth list in a bit, but here is
&gt; &gt; your chance to point out surprising impacts that I haven't thought of.
&gt; 
&gt; Splitting bandwidth between multiple relays has privacy implications,
&gt; because traffic is easier to track between instances.

Right. It also causes more TCP connections to be used overall than would
be needed if we could make individual relays work better.

&gt; It also increases the size of the consensus.
&gt; 
&gt; So we should choose a value for AuthDirMaxServersPerAddr that is
&gt; a compromise between these competing goals.
&gt; 
&gt; Why is 4 better than 3 or 5?

I figured doubling 2 would make security intuitions simpler.

(4 is also the value we used to use for AuthDirMaxServersPerAuthAddr.)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190602121146</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 12:11:46-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 2 Jun 2019, at 18:21, Roger Dingledine &lt;arma@torproject.org&gt; wrote:
&gt; 
&gt; On Sun, Jun 02, 2019 at 01:30:18PM +1000, teor wrote:
&gt;&gt; Which bandwidth authorities are limiting the consensus weight of these
&gt;&gt; relays? Where are they located?
&gt; 
&gt; The one in question is in Sweden:
&gt; https://metrics.torproject.org/rs.html#details/D5F2C65F4131A1468D5B67A8838A9B7ED8C049E2

In your first email, you said:

&gt;&gt;&gt; He used to push an average of 500mbit on his exit relay, but then the
&gt;&gt;&gt; HSDir DoS flatlined his relay for a while (!), and now, perhaps due to
&gt;&gt;&gt; the bwauth variability, his exit relay only recovered to maybe 200mbit.
&gt;&gt;&gt; He is running a second exit relay on that IP address, but also perhaps
&gt;&gt;&gt; due to the bwauth variability, it hasn't attracted much attention either.

The relay's recent history is a bit more complicated. This fingerprint has
only been around since October 2018. It pushed 500 mbit from November 2018
to January 2019, then failed from January to March 2019. Its other bandwidths
are about the same as they are now, at around 250 mbit.

And there are two exits on this machine. Here's the other one:

https://metrics.torproject.org/rs.html#details/6B37261F1248DA6E6BB924161F8D7B019BC3B5B4

It's RelayBandwidthRate-limited to 15 MBytes/s, so the operator's first
step should be to remove this limit, and wait a week for the bandwidths
to stabilise.

The first exit is also rate-limited to 85 MBytes/s. It might be a good
idea to remove both limits at the same time.

Tor is only using about 50% of advertised exit bandwidth right now. These
particular exits are using 35% and 60% of their bandwidth limits.

So I don't see anything unusual happening here.

Can you hold off on your proposed changes until we see what happens after
the bandwidth limits are removed?

I'll send a separate detailed email with the sbws diagnostics.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzzvQIACgkQEP6qDnB1
ZyooRQ//a+J73AmW2FDrrFEQdpT/gGNdO04PlKELU89iqe6ZsXLHvlFKvvd9IyI3
DzQ327gelTjzS3tC9nqHISNiR4UiH5+nFDpRSqUi1IDhzCxpCX6JRI40JEsEVo7u
JrpF+RuHA3URa5mtIab9pFGxms9xX401ACWS0i74IsPZMkj3LqrezPJAspHDXoD6
/VnidH9AjicJlxEF1hhjpjyQtwYxvgAveZP0YQw7hdpmC87zyqSoWNRESp1a4ekE
AyGjXZIKSMTm0HYJHK/T4sy760HqTM2Yh8X25ei2RZ0mPU9RP9vZPfWqk/tXChba
Q4nDtudQd6ujHQ0hY7xpBD5ti7UdFqIjYRDtgRE/2f9fcraDkt1EJGDsycSj7aaS
Dw6/xHrZjSwCp7FTmJ5SlwzaGNKdtH+nbiwyK62B2ngAAgMsvav8bq755qWy2jfU
xHBwQnuS6u25PZVGkWOuOktWhhAvs7Ea+SLgWYCspUduYJvtJ5FOyOWZvQ/Ag3ms
3Mgp6HaHP+qlJT/wDaGCV/TZFiVQINiaqYmafhgny/Jz65/v4sLNzpycWHVjwCcK
sSzH4O1ThTQYsEZkD6IaNMHJG9+QZpu2A0P6AlQ1g14D4gwIsW1DFzLeRS7CarFS
hdgWbHl0HaIJIGZkGPB17qBbrraa2CcVAooCu4kp0tKia72HkJA=
=kU77
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190602124314</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 12:43:14-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

This is an email about an alternative proposal:

Let's deploy sbws to some more bandwidth authorities.

&gt;&gt; Do we have funding to continue to improve the bandwidth measurement
&gt;&gt; infrastructure? Or to maintain it?
&gt;&gt; 
&gt;&gt; If we don't have any grants in the pipeline, now would be a good time to
&gt;&gt; start some.
&gt; 
&gt; Agreed.
&gt; 
&gt; sbws was always intended (as far as I recall) to be a bandaid to make
&gt; the torflow approach more maintainable, while we continue to await
&gt; research on better-but-still-workable approaches. I hear the NRL folks
&gt; have another design they've been working on that sounds promising.

There were a bunch of bugs in sbws that seemed to be excluding some
relays. So we stopped deploying sbws to any more bandwidth authorities.

In March and April, I said that we should block further deployments.
But I did some more analysis today, and I don't think those bugs are
actually blockers.

In #29710, it looked like sbws was missing about 1000 relays. But
it turns out that those relays aren't actually Running:
https://trac.torproject.org/projects/tor/ticket/29710#comment:13

In #30719, 90% of sbws measurement attempts fail. But these are
internal errors, not network errors. So it looks like it's a relay
selection bug in sbws:
https://trac.torproject.org/projects/tor/ticket/30719#comment:2

So I have an alternative proposal:

Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
see if exit bandwidths improve.

We should measure the impact of this change using the tor-scaling
measurement criteria. (And we should make sure it doesn't conflict
with any other tor-scaling changes.)


If we do decide to change AuthDirMaxServersPerAddr, let's work out how
many new relays would be added to the consensus straight away. There
shouldn't be too many, but let's double-check.

T

--
teor
----------------------------------------------------------------------

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzzxGIACgkQEP6qDnB1
ZyoZ6A/+KLrK9nr3ZS6cmomagI4bQyQ47qSZ79hvpVR6yvMoihNdD/guXZiUToGL
iCjs29nqR5Y+7HPd+5uHPsgi4MlV3wQuY4b1l3U27FOEhlQFQ4F4Ei1x65T4dcbE
ehtOo9hId8vI7HiKDgW3WGMaHHNFDyKJJ6pjPzagXXkJFJr0aAPC7pjEuLExlfqK
sNTWvC5E4/C4nU5mxKTCXA/eRe/t80GF9KNkpLBmgODhp8RO5R0CIzkSUx6lLfBr
uEbZBOVAkwJq+HgPn2ai7AYJ+xuJJuOtVyxEaVFj459jeh2NT1+nqSalez5wiuGi
34WDa9KX26sMktvJ8ICxB9bb6mmHfk8aVe1/Pzr6xPM6TMKxMkbM28OhNz442Gph
OQyXyEVZXvgM5BCVLxyCKeG/PcQdtOzGT0Io4o3zNyDoae9Xshl7PzIRY0ed2eKB
rwlJ5Y7xncOM21PZ+8Q7lyEkt8U0BRlrEf4Sj0hR8JKLAd95nNJ6/vgg+KJRxyRt
l2OrC/HjRwzipOTlca2vR+YcLXq4naS6YLFfI1uftRcKWmMCvG0bA+3k/cgfqcy0
W17/a2EiHR/3gB1MS44RIU1yF6/v87eQzSQMrg2QTZe2oKH/LOtojpoVI80fUhy5
8RThzA1ZfrjImoKaK4wbX2geTAxzFunzSQnMhL2RPtZI32e7lWw=
=WpRG
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190603074843</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-03 07:48:43-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

On Sun, Jun 02, 2019 at 10:43:14PM +1000, teor wrote:
&gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt; see if exit bandwidths improve.
&gt; 
&gt; We should measure the impact of this change using the tor-scaling
&gt; measurement criteria. (And we should make sure it doesn't conflict
&gt; with any other tor-scaling changes.)

Rolling out more sbws measurers sounds good to me.

But, maybe I haven't been following, but isn't the first plan for sbws
to replace torflow but have identical behavior? And then we can work on
changing it to have better behavior?

I ask because in that case switching to more sbws measurers should not
cause the exit bandwidths to improve, until we then change the measurers
to measure better.

&gt; If we do decide to change AuthDirMaxServersPerAddr, let's work out how
&gt; many new relays would be added to the consensus straight away. There
&gt; shouldn't be too many, but let's double-check.

$ grep "^r " moria1-vote | cut -d' ' -f7 | sort | uniq -c | sort -n

yields these IP address counts that have more than 2 relays on them:

      3 163.172.132.167 [only 2 actually Running]
      3 80.210.238.199 [it's a snap package, 0 Running]
      4 78.146.180.236 [only 1 actually Running]
      5 93.202.254.196 [0 Running]
      6 218.221.205.161 [they're all on the same port, 0 Running]
      7 212.24.106.116 [at least 4 Running]
      8 79.137.70.81 [0 Running]
      9 159.89.4.187 [0 Running]
     10 212.24.110.13 [at least 4 Running]

So I believe that if we change it to 4 relays per IP address, we would
get 4 more relays in the consensus currently.

And if we change it to 3 relays per IP address, we would get only 2
more relays currently.

Of course, once we make it clearer that big relays can run more instances
per IP address, some people might choose to simplify their set-ups.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190603075233</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-03 07:52:33-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

On Sun, Jun 02, 2019 at 10:11:46PM +1000, teor wrote:
&gt; The relay's recent history is a bit more complicated. This fingerprint has
&gt; only been around since October 2018.

Actually, no, it's been around since something like 2006. But it looks
like it was a small relay in recent years, until it became huge in 2018.

&gt; And there are two exits on this machine. Here's the other one:
&gt; 
&gt; https://metrics.torproject.org/rs.html#details/6B37261F1248DA6E6BB924161F8D7B019BC3B5B4
&gt; 
&gt; It's RelayBandwidthRate-limited to 15 MBytes/s, so the operator's first
&gt; step should be to remove this limit, and wait a week for the bandwidths
&gt; to stabilise.

I asked about this, and this other exit is not on the same machine. It's
on the same IP address, yes, but it's running on a different computer,
and that computer is lacking AESNI and other things that would let it
scale well with Tor's current multithreading situation.

I encouraged the operator to raise the Burst on che1, since it seems
pretty much maxed out (which means every second some users are suffering
by having their traffic rate limited). And also to consider moving che1
onto the same hardware as che, because maybe it can scale better even
though it would be sharing the same cpu with che.

&gt; The first exit is also rate-limited to 85 MBytes/s. It might be a good
&gt; idea to remove both limits at the same time.

Well, closer to 90mbytes, or about 717 mbits/s, with a burst up to 819
mbits/s (depending on your definition of m). I can't imagine that raising
those rate limits will make a big difference. But you're right that he
should raise them anyway, just to rule it out as another variable.

&gt; Can you hold off on your proposed changes until we see what happens after
&gt; the bandwidth limits are removed?

Yes. But it seems like a poor tradeoff to me, to continue delaying exit
relay operators from contributing as much as they want to contribute, when
we could apply this bandaid while continuing to work on the better fixes.

That said, for this particular instance, I am beginning to think that
raising AuthDirMaxServersPerAddr to 3 (rather than 4) would be a good
next step for seeing how that goes.

Thanks!
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190603113319</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-03 11:33:19-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 3 Jun 2019, at 17:48, Roger Dingledine &lt;arma@torproject.org&gt; wrote:
&gt; 
&gt;&gt; On Sun, Jun 02, 2019 at 10:43:14PM +1000, teor wrote:
&gt;&gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt;&gt; see if exit bandwidths improve.
&gt;&gt; 
&gt;&gt; We should measure the impact of this change using the tor-scaling
&gt;&gt; measurement criteria. (And we should make sure it doesn't conflict
&gt;&gt; with any other tor-scaling changes.)
&gt; 
&gt; Rolling out more sbws measurers sounds good to me.
&gt; 
&gt; But, maybe I haven't been following, but isn't the first plan for sbws
&gt; to replace torflow but have identical behavior? And then we can work on
&gt; changing it to have better behavior?

No, we fixed some obvious torflow bugs and design flaws.

Here are some details:

Let's talk engineering tradeoffs.

sbws had a few conflicting goals:
* create a modern bandwidth scanner implementation
* produce results that are similar to torflow
* be ready to deploy in 2019

Here's how we resolved those tradeoffs:
* use modern designs, libraries, and protocols when building sbws
* compare sbws results against torflow, and identify any issues:
  * when torflow is obviously wrong, do something better in sbws
  * when sbws is obviously wrong, log a bug against sbws, and triage it
  * when the results differ by a small amount, accept that difference

See these tickets for more details:
https://trac.torproject.org/projects/tor/ticket/27339
https://trac.torproject.org/projects/tor/ticket/27107

Here are some network health checks we are doing as we deploy sbws:
https://sbws.readthedocs.io/en/latest/monitoring_bandwidth.html

Here are some FAQs about the design, and the bandwidth file spec:
https://sbws.readthedocs.io/en/latest/faq.html
https://gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt

It would be great to have more design documentation, but keeping that
documentation up to date is a lot of work. And we needed to deliver
working code, too.

&gt; I ask because in that case switching to more sbws measurers should not
&gt; cause the exit bandwidths to improve, until we then change the measurers
&gt; to measure better.

One of the design flaws that we fixed was torflow's "scanner partitions".

Relays can get stuck in a slow torflow scanner partition, and never improve
their measurements.

But in sbws, each relay is measured against a random faster relay.
sbws tries to choose relays that are at least 2x faster than the target.

So some stuck relay bandwidths should improve under sbws, as long as
we have enough sbws instances (about half, I think).

That said, there are still some bugs in sbws. Some of those bugs were
copied from torflow. Others are new bugs. sbws has detailed diagnostics
that will help us chase down and fix these bugs.

And we can also make design changes. But let's stabilise sbws first, and
fix any high-impact bugs.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;Hi,&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;On \
3 Jun 2019, at 17:48, Roger Dingledine &lt;&lt;a \
href="mailto:arma@torproject.org"&gt;arma@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;On Sun, Jun 02, 2019 \
at 10:43:14PM +1000, teor wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Let's deploy \
sbws to half the bandwidth authorities, wait 2 weeks, \
and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;see if exit bandwidths \
improve.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We should \
measure the impact of this change using the \
tor-scaling&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;measurement \
criteria. (And we should make sure it doesn't \
conflict&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;with any other \
tor-scaling changes.)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Rolling out more \
sbws measurers sounds good to me.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;But, maybe I \
haven't been following, but isn't the first plan for sbws&lt;/span&gt;&lt;br&gt;&lt;span&gt;to replace \
torflow but have identical behavior? And then we can work on&lt;/span&gt;&lt;br&gt;&lt;span&gt;changing \
it to have better behavior?&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;No, we fixed \
some obvious torflow bugs and design flaws.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here are some \
details:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Let's talk engineering \
tradeoffs.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;sbws had a few conflicting goals:&lt;/div&gt;&lt;div&gt;* \
create a modern bandwidth scanner implementation&lt;/div&gt;&lt;div&gt;* produce results that are \
similar to torflow&lt;/div&gt;&lt;div&gt;* be ready to deploy in \
2019&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's how we resolved those tradeoffs:&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;* use modern designs, libraries, \
and protocols when building sbws&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;* compare sbws results against torflow, and identify any \
issues:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;  * when torflow is obviously wrong, do something \
better in sbws&lt;/div&gt;&lt;div&gt;  * when sbws is obviously wrong, log a bug against \
sbws, and triage it&lt;/div&gt;&lt;div&gt;  * when the results differ by a small amount, \
accept that difference&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;See these tickets for more \
details:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27339"&gt;https://trac.torproject.org/projects/tor/ticket/27339&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27107"&gt;https://trac.torproject.org/projects/tor/ticket/27107&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here \
are some network health checks we are doing as we deploy sbws:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://sbws.readthedocs.io/en/latest/monitoring_bandwidth.html"&gt;https://sbws.re \
adthedocs.io/en/latest/monitoring_bandwidth.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here \
are some FAQs about the design, and the bandwidth file spec:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://sbws.readthedocs.io/en/latest/faq.html"&gt;https://sbws.readthedocs.io/en/latest/faq.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt"&gt;https:// \
gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It \
would be great to have more design documentation, but keeping \
that&lt;/div&gt;&lt;div&gt;documentation up to date is a lot of work. And we needed to \
deliver&lt;/div&gt;&lt;div&gt;working code, too.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;I ask because in that case switching to more sbws measurers should \
not&lt;/span&gt;&lt;br&gt;&lt;span&gt;cause the exit bandwidths to improve, until we then change the \
measurers&lt;/span&gt;&lt;br&gt;&lt;span&gt;to measure \
better.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;One of the design flaws that we fixed \
was torflow's "scanner partitions".&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Relays can get stuck in a slow \
torflow scanner partition, and never improve&lt;/div&gt;&lt;div&gt;their \
measurements.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But in sbws, each relay is measured against a \
random faster relay.&lt;/div&gt;&lt;div&gt;sbws tries to choose relays that are at least 2x \
faster than the target.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So some stuck relay bandwidths \
should improve under sbws, as long as&lt;/div&gt;&lt;div&gt;we have enough sbws instances (about \
half, I think).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;That said, there are still some bugs in sbws. Some of those \
bugs were&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;copied from &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;torflow. Others are new bugs. sbws has detailed \
diagnostics&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;that will help us chase down and fix these \
bugs.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And we can also make design changes. But let's \
stabilise sbws first, and&lt;/div&gt;&lt;div&gt;fix any high-impact \
bugs.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div&gt;T&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190603200300</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2019-06-03 20:03:00-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; I have an alternative proposal:
&gt; 
&gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt; see if exit bandwidths improve.
&gt; 
&gt; We should measure the impact of this change using the tor-scaling
&gt; measurement criteria. (And we should make sure it doesn't conflict
&gt; with any other tor-scaling changes.)

I like this plan. To tightly control for emergent effects of all-sbws vs
all-torflow, ideally we'd switch back and forth between all-sbws and
all-torflow on a synchronized schedule, but this requires getting enough
measurement instances of sbws and torflow for authorities to choose
either the sbw file, or the torflow file, on some schedule. May be
tricky to coordinate, but it would be the most rigorous way to do this.

We could do a version of this based on votes/bwfiles alone, without
making dirauths toggle back and forth. However, this would not capture
emergent effects (such as quicker bwadjustments in sbws due to decisions
to pair relays with faster ones during measurement). Still, even
comparing just votes would be better than nothing.

For this experiment, my metric of choice would be "Per-Relay Spare
Network Capacity CDF" (see
https://trac.torproject.org/projects/tor/wiki/org/roadmaps/CoreTor/PerformanceExperiments#MetricsDefinitions),
 for both the overall consensus, and every authority's vote. It would
also be useful to generate separate flag breakdowns of this CDF (ie
produce separate CDFs for Guard-only, Middle-only, Exit-only, and
Guard+Exit-only relays).

In this way, we have graphs of how the votes and the consensus
distribution of the difference between self-reported and measured values
across the network. We should be able to pinpoint any major
disagreements in how relays are measured compared to their self-reported
values with these metrics. (In the past, karsten produced very similar
sets of CDFs of just the measured values per vote when we were updating
bwauths, and we compared the shape of the measured CDF, but I think
graphing the difference is more comprehensive).

We should also keep an eye on CDF-DL and the failure rainbow metrics, as
they may be indirectly affected by improvements/regressions in load
balancing, but I think the distribution of "spare capacity" is the first
order metric we want.

Do you like these metrics? Do you think we should be using different
ones? Should we try a few different metrics and see what makes sense
based on the results?

&gt; If we do decide to change AuthDirMaxServersPerAddr, let's work out how
&gt; many new relays would be added to the consensus straight away. There
&gt; shouldn't be too many, but let's double-check.

Hrmm.. This may be hard to determine, and it would only make immediate
difference if many relay operators already have more than 2 relay
instances actively trying to run on a single IP, such that the
additional ones are still running but currently being rejected
constantly.. I'm guessing this is not common, and relay operators will
have to manually decide to start more instances.

I also don't think that these approaches need to be either/or. I think
there are many independent reasons to allow more relays per IP (tor is
single-threaded and caps out somewhere between 100-300Mbit per instance
depending on CPU and AES acceleration, so many fast relay operators do
the multi-instance thing already, if they have the spare IPs).

I also think that if I'm right about most relay operators needing to
make this decision manually, the effect of allowing 4 nodes per IP will
mostly blend in with normal network churn over time.

So, as long as we tightly control switching sbws vs torflow and have
result files from each for the duration of the experiment, I think that
we can do both of these things at once. There's going to be capacity and
load churn like this over time naturally, anyway. This
switching-back-and-forth methodology is meant to control for that.

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190603202000</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2019-06-03 20:20:00-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Mike Perry:
&gt; teor:
&gt; &gt; I have an alternative proposal:
&gt; &gt; 
&gt; &gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt; &gt; see if exit bandwidths improve.
&gt; &gt; 
&gt; &gt; We should measure the impact of this change using the tor-scaling
&gt; &gt; measurement criteria. (And we should make sure it doesn't conflict
&gt; &gt; with any other tor-scaling changes.)
&gt; 
&gt; I like this plan. To tightly control for emergent effects of all-sbws vs
&gt; all-torflow, ideally we'd switch back and forth between all-sbws and
&gt; all-torflow on a synchronized schedule, but this requires getting enough
&gt; measurement instances of sbws and torflow for authorities to choose
&gt; either the sbw file, or the torflow file, on some schedule. May be
&gt; tricky to coordinate, but it would be the most rigorous way to do this.
&gt; 
&gt; We could do a version of this based on votes/bwfiles alone, without
&gt; making dirauths toggle back and forth. However, this would not capture
&gt; emergent effects (such as quicker bwadjustments in sbws due to decisions
&gt; to pair relays with faster ones during measurement). Still, even
&gt; comparing just votes would be better than nothing.
&gt; 
&gt; For this experiment, my metric of choice would be "Per-Relay Spare
&gt; Network Capacity CDF" (see
&gt; https://trac.torproject.org/projects/tor/wiki/org/roadmaps/CoreTor/PerformanceExperiments#MetricsDefinitions),
&gt;  for both the overall consensus, and every authority's vote. It would
&gt; also be useful to generate separate flag breakdowns of this CDF (ie
&gt; produce separate CDFs for Guard-only, Middle-only, Exit-only, and
&gt; Guard+Exit-only relays).
&gt; 
&gt; In this way, we have graphs of how the votes and the consensus
&gt; distribution of the difference between self-reported and measured values
&gt; across the network. 

Arg, I misspoke here. The metric from that performance experiment page
is the difference between peak observed bandwidth and bw history. This
will still be interesting to measure load balancing effects, but it does
not directly involve the measured values.. We may also want a metric
that directly compares properties of the measured vs advertised values.
See below.

&gt; We should be able to pinpoint any major
&gt; disagreements in how relays are measured compared to their self-reported
&gt; values with these metrics. (In the past, karsten produced very similar
&gt; sets of CDFs of just the measured values per vote when we were updating
&gt; bwauths, and we compared the shape of the measured CDF, but I think
&gt; graphing the difference is more comprehensive).
&gt; 
&gt; We should also keep an eye on CDF-DL and the failure rainbow metrics, as
&gt; they may be indirectly affected by improvements/regressions in load
&gt; balancing, but I think the distribution of "spare capacity" is the first
&gt; order metric we want.
&gt; 
&gt; Do you like these metrics? Do you think we should be using different
&gt; ones? Should we try a few different metrics and see what makes sense
&gt; based on the results?
As additional metrics, we could do the CDFs of the ratio of measured bw
to advertised bw, and/or the metrics Karsten produced using just
measured bw. (I can't still find the ticket where those were graphed
during previous torflow updates, though).

These metrics would be pretty unique to torflow/sbws experiments, but if
we have enough of those in the pipeline (such as changes to the scaling
factor), they may be worth tracking over time.


-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190328225746</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-03-28 22:57:46-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, and thanks for reply!
I added a line in the dedicated page, and modified the README.md on GitHub
for more specific informations to the users.

I've decided to release two scripts (I'm releasing for Ubuntu too), for run
an Exit Relay or Hidden Service then, with Docker image.

If needed, let me know if there would be useful  releasing an image of a
Non-Exit-Relay.

I will add more informations in the following days, for more explanations
and specific infos about building process.
I have decided to release only scripts or text file (for build process and
pull process), and no binaries, to keep processes transparent and
controllable.

The next step for me is writing to forums and IRC, so people can review the
configurations.
I would like to meet the best practices to provide a robust and secure
service under all aspects.

Another further step will be to contact Docker and try to achieve the
"Verified Publisher" or "Official Image" status, to keep the User Trust up.

Official Images have automated security scans, so it can be a benefit to
community.

I hope this can be useful, let me know!

Kind regards (and thanks for your hard work... really!)

Il giorno gio 28 mar 2019 alle ore 13:46 Chelsea Holland Komlo &lt;
me@chelseakomlo.com&gt; ha scritto:

&gt; Hi,
&gt;
&gt; Thanks for this information and putting this together! Making relays
&gt; easier to run is always a helpful thing to us.
&gt;
&gt; We have a wiki page to aggregate relay infrastructure projects such as
&gt; this. If you can add your projects to this page (and any required
&gt; instructions), that would be great.
&gt;
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure
&gt;
&gt; Thanks for the contribution!
&gt; Chelsea
&gt;
&gt; On 2019-03-27 21:18, Alessandro Fiori wrote:
&gt; &gt; Hi, I'm an Italian developer who want to help development and grow up
&gt; &gt; the Tor network.
&gt; &gt; I would like to share with you an idea to grow up the Tor Network.
&gt; &gt; Working with Docker, i have released two images, a Tor Exit Relay
&gt; &gt; image (named "tor-relay") and an image (named "torworld-template").
&gt; &gt; The idea is to use Docker and build images for facilitate users to run
&gt; &gt; a Tor Relay or an Hidden Service.
&gt; &gt; The two images are located on Docker Hub in this locations:
&gt; &gt;
&gt; &gt; Tor Exit Relay: https://hub.docker.com/r/alessandrofiori/tor-relay
&gt; &gt; Tor Machine Template:
&gt; &gt; https://hub.docker.com/r/alessandrofiori/torworld-template
&gt; &gt;
&gt; &gt; If you want to see how the images are built, please check the
&gt; &gt; following Dockerfile
&gt; &gt;
&gt; &gt; Tor Exit Relay:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay
&gt; &gt; Tor Machine Template:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World
&gt; &gt;
&gt; &gt; If you want to see how i automate the build and push process, please
&gt; &gt; check the following script:
&gt; &gt;
&gt; &gt; Process with system cleanup:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat
&gt; &gt; Process for rolling release:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat
&gt; &gt;
&gt; &gt; Actually i'm working in a Windows environment, i will release ubuntu
&gt; &gt; scripts soon.
&gt; &gt;
&gt; &gt; I would like to share with everyone, so if this can be helpful, this
&gt; &gt; can be a starting point for build up images for help people to run
&gt; &gt; relays or hidden services.
&gt; &gt;
&gt; &gt; This kind of approach can be reduce costs for people who want to run a
&gt; &gt; relay or an hidden service, and can be an help for building a more
&gt; &gt; censorship-resistant platform, by using a Docker Swarm, and
&gt; &gt; replicating instances.
&gt; &gt;
&gt; &gt; Waiting for your reply as soon as possible, i'm very curious if this
&gt; &gt; project can be helpful for Tor Project!
&gt; &gt;
&gt; &gt; Kind regards (and thanks for your hard work)
&gt; &gt; Alessandro Fiori
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi, and thanks for \
reply!&lt;/div&gt;&lt;div&gt;I added a line in the dedicated page, and modified the README.md on \
GitHub for more specific informations to the users.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've \
decided to release two scripts (I'm releasing for Ubuntu too), for run an Exit \
Relay or Hidden Service then, with Docker image.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If needed, \
let me know if there would be useful   releasing an image of a \
Non-Exit-Relay.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I will add more informations in the \
following days, for more explanations and specific infos about building \
process.&lt;/div&gt;&lt;div&gt;I have decided to release only scripts or text file (for build \
process and pull process), and no binaries, to keep processes transparent and \
controllable.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The next step for me is writing to forums and \
IRC, so people can review the configurations.&lt;/div&gt;&lt;div&gt;I would like to meet the best \
practices to provide a robust and secure service under all \
aspects.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Another further step will be to contact Docker and \
try to achieve the "Verified Publisher" or "Official Image" \
status, to keep the User Trust up.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Official Images have \
automated security scans, so it can be a benefit to \
community.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope this can be useful, let me \
know!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Kind regards (and thanks for your hard work... \
really!)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;Il giorno gio 28 mar 2019 alle ore 13:46 Chelsea Holland Komlo \
&lt;&lt;a href="mailto:me@chelseakomlo.com"&gt;me@chelseakomlo.com&lt;/a&gt;&gt; ha \
scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
Thanks for this information and putting this together! Making relays&lt;br&gt;
easier to run is always a helpful thing to us.&lt;br&gt;
&lt;br&gt;
We have a wiki page to aggregate relay infrastructure projects such as&lt;br&gt;
this. If you can add your projects to this page (and any required&lt;br&gt;
instructions), that would be great. &lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Thanks for the contribution!&lt;br&gt;
Chelsea&lt;br&gt;
&lt;br&gt;
On 2019-03-27 21:18, Alessandro Fiori wrote:&lt;br&gt;
&gt; Hi, I'm an Italian developer who want to help development and grow up&lt;br&gt;
&gt; the Tor network.&lt;br&gt;
&gt; I would like to share with you an idea to grow up the Tor Network.&lt;br&gt;
&gt; Working with Docker, i have released two images, a Tor Exit Relay&lt;br&gt;
&gt; image (named "tor-relay") and an image (named \
"torworld-template").&lt;br&gt; &gt; The idea is to use Docker and build images \
for facilitate users to run&lt;br&gt; &gt; a Tor Relay or an Hidden Service.&lt;br&gt;
&gt; The two images are located on Docker Hub in this locations:&lt;br&gt;
&gt; &lt;br&gt;
&gt; Tor Exit Relay: &lt;a href="https://hub.docker.com/r/alessandrofiori/tor-relay" \
rel="noreferrer" target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/tor-relay&lt;/a&gt;&lt;br&gt;
 &gt; Tor Machine Template:&lt;br&gt;
&gt; &lt;a href="https://hub.docker.com/r/alessandrofiori/torworld-template" \
rel="noreferrer" target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/torworld-template&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; If you want to see how the images are built, please check the&lt;br&gt;
&gt; following Dockerfile&lt;br&gt;
&gt; &lt;br&gt;
&gt; Tor Exit Relay:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay&lt;/a&gt;&lt;br&gt;
 &gt; Tor Machine Template:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; If you want to see how i automate the build and push process, please&lt;br&gt;
&gt; check the following script:&lt;br&gt;
&gt; &lt;br&gt;
&gt; Process with system cleanup:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat&lt;/a&gt;&lt;br&gt;
 &gt; Process for rolling release:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; Actually i'm working in a Windows environment, i will release ubuntu&lt;br&gt;
&gt; scripts soon.&lt;br&gt;
&gt; &lt;br&gt;
&gt; I would like to share with everyone, so if this can be helpful, this&lt;br&gt;
&gt; can be a starting point for build up images for help people to run&lt;br&gt;
&gt; relays or hidden services.&lt;br&gt;
&gt; &lt;br&gt;
&gt; This kind of approach can be reduce costs for people who want to run a&lt;br&gt;
&gt; relay or an hidden service, and can be an help for building a more&lt;br&gt;
&gt; censorship-resistant platform, by using a Docker Swarm, and&lt;br&gt;
&gt; replicating instances.&lt;br&gt;
&gt; &lt;br&gt;
&gt; Waiting for your reply as soon as possible, i'm very curious if this&lt;br&gt;
&gt; project can be helpful for Tor Project!&lt;br&gt;
&gt; &lt;br&gt;
&gt; Kind regards (and thanks for your hard work)&lt;br&gt;
&gt; Alessandro Fiori&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190328232011</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-28 23:20:11-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor</subject><body>

Hi,

&gt; On 29 Mar 2019, at 08:57, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; 
&gt; I've decided to release two scripts (I'm releasing for Ubuntu too), for run an Exit \
&gt; Relay or Hidden Service then, with Docker image. 
&gt; If needed, let me know if there would be useful  releasing an image of a \
&gt; Non-Exit-Relay.

Yes, many relay operators will want to run a non-exit relay.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190330030853</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-30 03:08:53-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

(Please try to reply to the thread, not the digest!)

&gt; On 30 Mar 2019, at 11:51, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; 
&gt; Because the images are built separately, and Containers doesn't have persistent \
&gt; data by default, i'm testing the launch of a "relay swarm", which isn't the "Docker \
&gt; Swarm". The concept of a "Relay swarm" is to have multiple running relay containers \
&gt; on the same user machine, without any conflict. 
&gt; The idea (i will testing it very soon) is possible, by pulling an image and running \
&gt; it multiple times, creating intermetiate containers. 
&gt; A function like the "relay swarm" can be very useful, i don't know if this approach \
&gt; can be risky, so i'm preparing a script for launching only one type of relay swarm \
&gt; (middle or exit relays). 
&gt; If there is no security concerns, this function will be a very key function for \
&gt; grow up the Network, because a user can run multiple relays at a time.

Tor only allows 2 relays per IPv4 address.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlye3cUACgkQEP6qDnB1
Zyp1Cw/+L3eSBxGsSlaUSNoiWxY4ku09+uobqVac6MXmxN1SMZq6S8DFvSh4ssNw
F6osnly5iXiXV4FJoz+AjHdB90kQgljAbbj06gRox40yulqyE9XrsdpesgtXIkkc
UNx7p3Bl2MlikwtUmvYpwTwHQZuUexUkkpEY0Rl2zzYgdqU5wrby5xiz861ol7WH
zszdmWhh7V7JAEr0MeF62bwS1spzFuT1ol6IyjZMj8ABu5WLpZNrqh7KPWf6m/6f
2XBvqb3H8dsoqB9OYhCAx4Uqc25j/vCwwq7ApQ+LdrtUqoRGcmxAk8ad6y+RPm3w
L1owVuhr28ESKryCqQkhs+EUZrOh764HUOPwCXK6uU/i+b7f5kPP1w4pTyP/COMs
nqcpfUtm8hmk8/6DDo4L7U4Ca8mdp62VEKaME/L7FGxpq3HtVvmR9eA/0X8KezZH
XHJLi8zHwyT+grPis2knVtuO9otdTK3lEfEqi8PZdvDnnEXo0sUjuUiHXm3shp5t
VVx1tVY+E2Lm2yep7zTrCcBok+ltG2nVVG9nzrHFYJUsdtgGCJiKTmwRwaK+/mkc
5M1iCCf1llcjkFsz+tOxYTRq9ZHyI/jp40qbmbZ4t75pyI222IwWzjXv8l0IEyGo
bWaD0jhmPs9dDvHztlg4chEQOHYrVujVWmuyqClt328jALjTqAU=
=64b8
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190401025735</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-01 02:57:35-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor (teor)</subject><body>

[Attachment #2 (--Apple-Mail-7CCC3B93-737E-41FE-897D-5E75DDB9D66E)]


Hi,

&gt; On 1 Apr 2019, at 07:55, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; 
&gt; Hi,
&gt; I would like to share with the community some tests I've made for setting up a \
&gt; "swarm" of Tor relays. 
&gt; I setted up 3 exit relays and 3 middle relays on the same IPv4 address, to make \
&gt; some testing, and the entire swarm works like a charm. 
&gt; Due to Tor limitation, I have decided to build a template for preparing the \
&gt; cluster, and upload it to GitHub. 
&gt; You can find the example mini-cluster here:
&gt; https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm 
&gt; 
&gt; I have tested the exit capabilities on another network with different public IP \
&gt; address. 
&gt; All the relays have published their own descriptors, I have prepared the containers \
&gt; as a single, separated machines. 
&gt; The process is different from preparing a single relay, because of Docker build \
&gt; process. 
&gt; I have disabled caching during the cluster process, so i have been able to modify \
&gt; torrc without issues. 
&gt; Because  its very interesting, attached to this e-mail there is the console Logs \
&gt; from the 6 relays. 
&gt; All containers are read-only, so the entire relay will destroy at the end of \
&gt; session. 
&gt; I hope this can be useful.

Tor clients will only see 2 of your 6 relays, because the Tor directory authorities \
only publish 2 relays per IPv4 address.

Also, please use the deb.torproject.org repositories to get the latest version of \
tor: Mar 31 19:57:08.000 [warn] Please upgrade! This version of Tor (0.3.3.9) is not \
recommended, according to the directory authorities. Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha


https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 1 Apr \
2019, at 07:55, Alessandro Fiori &lt;&lt;a \
href="mailto:alefiori3@gmail.com"&gt;alefiori3@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;I would like to share with the community some tests I've \
made for setting up a "swarm" of Tor relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I setted up 3 \
exit relays and 3 middle relays on the same IPv4 address, to make some testing, and \
the entire swarm works like a charm.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Due to Tor limitation, \
I have decided to build a template for preparing the cluster, and upload it to \
GitHub.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can find the example mini-cluster \
here:&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm \
"&gt;https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm&lt;/a&gt; &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
have tested the exit capabilities on another network with different public IP \
address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All the relays have published their own \
descriptors, I have prepared the containers as a single, separated \
machines.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The process is different from preparing a single \
relay, because of Docker build process.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have disabled \
caching during the cluster process, so i have been able to modify torrc without \
issues.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because  its very interesting, attached to this \
e-mail there is the console Logs from the 6 relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All \
containers are read-only, so the entire relay will destroy at the end of \
session.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope this can be \
useful.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Tor clients will only see 2 of \
your 6 relays, because the Tor directory authorities only publish 2 relays per IPv4 \
address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, please use the &lt;a \
href="http://deb.torproject.org"&gt;deb.torproject.org&lt;/a&gt; repositories to get the \
latest version of tor:&lt;/div&gt;&lt;div&gt;&lt;p style="margin: 0px; font-stretch: normal; \
font-size: 12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span \
style="font-size: 12pt;"&gt;Mar 31 19:57:08.000 [warn] Please upgrade! This version of \
Tor (0.3.3.9) is not recommended, according to the directory authorities. Recommended \
versions are: 0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; \
font-family: Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; \
font-family: Helvetica;"&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu"&gt;https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu&lt;/a&gt;&lt;/p&gt;&lt;p \
style="margin: 0px; font-stretch: normal; font-size: 12px; line-height: normal; \
font-family: Helvetica;"&gt;&lt;br&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; \
font-size: 12px; line-height: normal; font-family: \
Helvetica;"&gt;T&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190203052616</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-02-03 05:26:16-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>

All sorts of statistical counters could be useful to graph
from some API... a control port stats dump in something
like var=value, a BSD sysctl text format, and even up to
a proper SNMP port which many graphers already speak.

Logging isn't really the right place for such things,
unless they've reached some preset or unusual
threshold, thus becoming reportable.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190203131922</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-02-03 13:19:22-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>

[Attachment #2 (multipart/signed)]


On 03 Feb (00:24:00), nusenu wrote:
&gt; Hi,

Hello nusenu,

Thanks for this email. I exporting more metrics on the control port is a
great idea. I wanted to have that for a while so quite happy you started
rolling the ball :).

There are safety questions to ask ourselves here before blindly
exporting many stats. The metrics team also I know has opinion on that,
I had a talk very recently with irl on this.

Exporting many stats to the control port unfortunately means that all
relay operator can possibly create fancy graphs and make them public
which, depending on the stat, can be harmful.

Furthermore, graphing stats can also means that over time the relay
operator stores historical data of everything that happened within the
relay and that can be used in many ways to pull off attacks (ex:
subpoena to access such data base by LE).

The Heartbeat log has a minimum of 30 minutes period but a default of 6
hours. Whatever stats we would end up exporting, I strongly think that
keeping delays like that is a strong requirement because we would sort
of "bin" those aggregated stats by a "long enough period" instead of
having a very fine grained stream of stats that would make it trivial to
spot spikes down to the minute.

Some of the stats below are safe in my opinion like the memory usage but
most of them need to be looked at in terms of safety from both the stand
point of having a very fine grained precision with them and what happens
when that data becomes historical data?

I'll stop for now but I will follow up on this once I have thought a bit
more about it so I don't say too many stupid things right now :).

Cheers!
David

&gt; 
&gt; every now and then I'm in contact with relay operators
&gt; about the "health" of their relays.
&gt; Following these 1:1 discussions and the discussion on tor-relays@
&gt; I'd like to rise two issues with you (the developers) with the goal 
&gt; to help improve relay operations and end user experience in the long term:
&gt; 
&gt; 1) DNS (exits only)
&gt; 2) tor relay health data
&gt; 
&gt; 1) DNS
&gt; ------
&gt; Current situation: 
&gt; Arthur Edelstein provides public measurements to tor exit relay operators via
&gt; his page at: https://arthuredelstein.net/exits/
&gt; This page is updated once daily.
&gt; 
&gt; the process to use that data looks like this:
&gt; - first they watch Arthur's measurement results
&gt; - if their failure rate is non-zero they try to tweak/improve/change their setup
&gt; - wait for another 24 hours (next measurement)
&gt; 
&gt; This is a somewhat suboptimal and slow feedback loop and is probably also
&gt; less accurate and less valuable data when compared to the data the tor
&gt; process can provide.
&gt; 
&gt; Suggestion for improvement:
&gt; 
&gt; Exposes the following DNS status information 
&gt; via tor's controlport to help debug and detect DNS issues on exit relays:
&gt; 
&gt; (total numbers since startup)
&gt; - amount of DNS queries send to the resolver
&gt; - amount of DNS queries send to the resolver due to a RESOLVE request
&gt; - DNS queries send to resolver due to a reverse RESOLVE request
&gt; - amount of queries that did not result in any answer from the resolver
&gt; - breakdown of number of responses by response code (RCODE)
&gt; https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-6
&gt; - max amount of DNS queries send per curcuit
&gt; 
&gt; If this causes a significant performance impact this feature should be disabled
&gt; by default.
&gt; 
&gt; 2) general relay health metrics
&gt; --------------------------------
&gt; 
&gt; Compared to other server daemons (webserver, DNS server, ..)
&gt; tor provides little data for operators to detect operational issues
&gt; and anomalies.
&gt; 
&gt; I'd suggest to provide the following stats via the control port:
&gt; (most of them are already written to logfiles by default but not accessible
&gt; via the controlport as far as I've seen)
&gt; 
&gt; - total amount of memory used by the tor process
&gt; - amount of currently open circuits 
&gt; - circuit handshake stats (TAP / NTor) 
&gt; 
&gt; DoS mitigation stats 
&gt; - amount of circuits killed with too many cells 
&gt; - amount of circuits rejected
&gt; - marked addresses
&gt; - amount of connections closed
&gt; - amount  of single hop clients refused
&gt; 
&gt; - amount of closed/failed circuits broken down by their reason value
&gt; https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt#n1402
&gt; https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n1994
&gt; 
&gt; - amount of closed/failed OR connections broken down by their reason value
&gt; https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n2205
&gt; 
&gt; If this causes a significant performance impact this feature should be disabled
&gt; by default.
&gt; 
&gt; cell stats
&gt; - extra info cell stats
&gt; as defined in:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n1072
&gt; 
&gt; 
&gt; 
&gt; This data should be useful to answer the following questions:
&gt; 
&gt; - High level questions: Is the tor relay healthy?
&gt; - is it hitting any resource limits? 
&gt; - is the tor process under unusual load?
&gt; - why is tor using more memory?
&gt; - is it slower than usual at handling circuits?
&gt; - can the DNS resolver handle the amount of DNS queries tor is sending it?
&gt; 
&gt; 
&gt; This data could help prevent errors from occurring or provide
&gt; additional data when trying to narrow down issues.
&gt; 
&gt; When it comes to the question: 
&gt; **Is it "safe" to make this data accessible via the controlport?**
&gt; 
&gt; I assume it is safe for all information that current versions of 
&gt; tor writes to logfiles or even publishes as part of its extra info descriptor.
&gt; 
&gt; Should tor provide this or similar data 
&gt; I'm planing to write scripts for operators to make use
&gt; of that data (for example a munin plugin that connects to tor's controlport).
&gt; 
&gt; I'm happy to help write updates for control-spec should these features 
&gt; seem reasonable to you.
&gt; 
&gt; Looking forward to hearing your feedback.
&gt; nusenu
&gt; 
&gt; 
&gt; 
&gt; 
&gt; -- 
&gt; https://twitter.com/nusenu_
&gt; https://mastodon.social/@nusenu
&gt; 
&gt; 
&gt; 
&gt; 
&gt; 




&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
UfBKIa+1kdl7DdvHs4X6EOXF+4kISRk8P8gM6dH/i1E=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190203221900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-02-03 22:19:00-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Thanks for this email. I exporting more metrics on the control port is a
&gt; great idea. I wanted to have that for a while 

Great to hear that so we have a realistic chance it
gets actually implemented :)


&gt; There are safety questions to ask ourselves here before blindly
&gt; exporting many stats.

Sure.

&gt; Exporting many stats to the control port unfortunately means that all
&gt; relay operator can possibly create fancy graphs 

making non-public graphs and alerts is the goal

&gt; and make them public

public graphs should result in the rejection of
affected relays.
I'll be submitting a few to bad-relays@ soon
since enn.lu apparently does not care when asked to
remove their public stats and xml data.

&gt; which, depending on the stat, can be harmful.
&gt; 
&gt; Furthermore, graphing stats can also means that over time the relay
&gt; operator stores historical data of everything that happened within the
&gt; relay and that can be used in many ways to pull off attacks (ex:
&gt; subpoena to access such data base by LE).

yes, acceptable / unacceptable retention times and granularity
should be defined and documented.
I'd propose a max. retention time of two weeks.


&gt; The Heartbeat log has a minimum of 30 minutes period but a default of 6
&gt; hours. 

current tor has no restrictions on Heartbeat granularity, you can
ask tor to write the data to the logs every other second by issuing 
"SIGNAL HEARTBEAT"
on the control port.


&gt; Whatever stats we would end up exporting, I strongly think that
&gt; keeping delays like that is a strong requirement because we would sort
&gt; of "bin" those aggregated stats by a "long enough period" instead of
&gt; having a very fine grained stream of stats that would make it trivial to
&gt; spot spikes down to the minute.

30 or 60 minutes granularity seems reasonable


&gt; Some of the stats below are safe in my opinion like the memory usage but
&gt; most of them need to be looked at in terms of safety 

yes please



-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190204063535</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-04 06:35:35-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>



On February 3, 2019 10:19:00 PM UTC, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; &gt; Thanks for this email. I exporting more metrics on the control port
&gt; is a
&gt; &gt; great idea. I wanted to have that for a while 
&gt; 
&gt; Great to hear that so we have a realistic chance it
&gt; gets actually implemented :)
&gt; 
&gt; 
&gt; &gt; There are safety questions to ask ourselves here before blindly
&gt; &gt; exporting many stats.
&gt; 
&gt; Sure.
&gt; 
&gt; &gt; Exporting many stats to the control port unfortunately means that all
&gt; &gt; relay operator can possibly create fancy graphs 
&gt; 
&gt; making non-public graphs and alerts is the goal
&gt; 
&gt; &gt; and make them public
&gt; 
&gt; public graphs should result in the rejection of
&gt; affected relays.
&gt; I'll be submitting a few to bad-relays@ soon
&gt; since enn.lu apparently does not care when asked to
&gt; remove their public stats and xml data.
&gt; 
&gt; &gt; which, depending on the stat, can be harmful.
&gt; &gt; 
&gt; &gt; Furthermore, graphing stats can also means that over time the relay
&gt; &gt; operator stores historical data of everything that happened within
&gt; the
&gt; &gt; relay and that can be used in many ways to pull off attacks (ex:
&gt; &gt; subpoena to access such data base by LE).
&gt; 
&gt; yes, acceptable / unacceptable retention times and granularity
&gt; should be defined and documented.
&gt; I'd propose a max. retention time of two weeks.
&gt; 
&gt; 
&gt; &gt; The Heartbeat log has a minimum of 30 minutes period but a default of
&gt; 6
&gt; &gt; hours. 
&gt; 
&gt; current tor has no restrictions on Heartbeat granularity, you can
&gt; ask tor to write the data to the logs every other second by issuing 
&gt; "SIGNAL HEARTBEAT"
&gt; on the control port.
&gt; 
&gt; 
&gt; &gt; Whatever stats we would end up exporting, I strongly think that
&gt; &gt; keeping delays like that is a strong requirement because we would
&gt; sort
&gt; &gt; of "bin" those aggregated stats by a "long enough period" instead of
&gt; &gt; having a very fine grained stream of stats that would make it trivial
&gt; to
&gt; &gt; spot spikes down to the minute.
&gt; 
&gt; 30 or 60 minutes granularity seems reasonable
&gt; 
&gt; 
&gt; &gt; Some of the stats below are safe in my opinion like the memory usage
&gt; but
&gt; &gt; most of them need to be looked at in terms of safety 
&gt; 
&gt; yes please

Here's another design that preserves user privacy:
* add noise to every logged statistic (to protect usage in the current period)
* round every logged statistic (to protect average usage over multiple periods)

If we add enough noise to protect most users, then we will have privacy by design.

We should still teach operators why detailed stats are bad for users. And have rules \
about retention periods. But these rules won't be as critical as they are now, \
because the rules will only be needed for edge cases. (Like a single client that uses \
moat of a relay, which we can't hide very well, no matter what we do.)

Adding noise will be easier once PrivCount is implemented. Until then, we'll need to \
rely on the retention rules you are suggesting.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190730152500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-30 15:25:00-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


nusenu:
&gt; Hi,
&gt; 
&gt; every now and then I'm in contact with relay operators
&gt; about the "health" of their relays.
&gt; Following these 1:1 discussions and the discussion on tor-relays@
&gt; I'd like to rise two issues with you (the developers) with the goal 
&gt; to help improve relay operations and end user experience in the long term:
&gt; 
&gt; 1) DNS (exits only)

tracked as:
https://trac.torproject.org/projects/tor/ticket/31290

&gt; 2) tor relay health data

tracked as:
https://trac.torproject.org/projects/tor/ticket/31291




-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190102210028</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-01-02 21:00:28-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

On Fri, Dec 21, 2018 at 6:34 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;
&gt; Hi Nick,
&gt;
&gt; Is the guard connection closed when becoming dormant?

No; it times out independently.

&gt; On 13/12/2018 20:56, Nick Mathewson wrote:
&gt; &gt;        DormantTimeoutDisabledByIdleStreams 0|1
&gt; &gt;            If true, then any open client stream (even one not reading or
&gt; &gt;            writing) counts as client activity for the purpose of
&gt; &gt;            DormantClientTimeout. If false, then only network activity counts.
&gt; &gt;            (Default: 1)
&gt;
&gt; When this option's set to 0 and Tor becomes dormant, will it close any
&gt; idle client connections that are still open?

No.  By default, it won't go dormant if there are any idle client
connections. See DormantTimeoutDisabledByIdleStreams for the option
that overrides that behavior.

&gt; Will it close client connections on receiving SIGNAL DORMANT?

No.

&gt; If Tor doesn't close client connections when becoming dormant, will it
&gt; become active again (or send an event that the controller can use to
&gt; trigger SIGNAL ACTIVE) if there's activity on an open client stream?

No, but that might be a good idea if
DormantTimeoutDisabledByIdleStreams is set to 0.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190104124308</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-01-04 12:43:08-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi Nick,

Thanks very much for the reply. Follow-ups inline below.

On 02/01/2019 21:00, Nick Mathewson wrote:
&gt; On Fri, Dec 21, 2018 at 6:34 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hi Nick,
&gt;&gt;
&gt;&gt; Is the guard connection closed when becoming dormant?
&gt; 
&gt; No; it times out independently.

That's good news from my point of view, but in that case I think the
idea of terminating the pluggable transport process when becoming
dormant might need to be reconsidered?

&gt;&gt; On 13/12/2018 20:56, Nick Mathewson wrote:
&gt;&gt;&gt;        DormantTimeoutDisabledByIdleStreams 0|1
&gt;&gt;&gt;            If true, then any open client stream (even one not reading or
&gt;&gt;&gt;            writing) counts as client activity for the purpose of
&gt;&gt;&gt;            DormantClientTimeout. If false, then only network activity counts.
&gt;&gt;&gt;            (Default: 1)
&gt;&gt;
&gt;&gt; When this option's set to 0 and Tor becomes dormant, will it close any
&gt;&gt; idle client connections that are still open?
&gt; 
&gt; No.  By default, it won't go dormant if there are any idle client
&gt; connections. See DormantTimeoutDisabledByIdleStreams for the option
&gt; that overrides that behavior.

When DormantTimeoutDisabledByIdleStreams is set to 0, what happens to
idle client connections when Tor goes dormant?

&gt;&gt; Will it close client connections on receiving SIGNAL DORMANT?
&gt; 
&gt; No.
&gt; 
&gt;&gt; If Tor doesn't close client connections when becoming dormant, will it
&gt;&gt; become active again (or send an event that the controller can use to
&gt;&gt; trigger SIGNAL ACTIVE) if there's activity on an open client stream?
&gt; 
&gt; No, but that might be a good idea if
&gt; DormantTimeoutDisabledByIdleStreams is set to 0.

Sorry, do you mean it might be a good idea for Tor to become active
again/send an event in that case? Should I open a ticket for this if it
looks like we'll need it?

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190601090820</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-01 09:08:20-0400</timestampReceived><subject>[tor-dev] Should we allow matrix.org users on tor IRC channels?</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

JeremyRand has asked us to allow matrix.org users on the tor IRC channels on irc.oftc.net.

matrix.org users are rejected at the moment, because they are not registered with OFTC.

For details, see:
https://trac.torproject.org/projects/tor/ticket/30717

T

-- 
teor
----------------------------------------------------------------------


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi all,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;JeremyRand has \
asked us to allow &lt;a href="http://matrix.org"&gt;matrix.org&lt;/a&gt; users on the tor IRC \
channels on &lt;a href="http://irc.oftc.net"&gt;irc.oftc.net&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="http://matrix.org"&gt;matrix.org&lt;/a&gt; users are rejected at the moment, because \
they are not registered with OFTC.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;For details, \
see:&lt;/div&gt;&lt;div&gt;&lt;a href="https://trac.torproject.org/projects/tor/ticket/30717"&gt;https://trac.torproject.org/projects/tor/ticket/30717&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div \
id="AppleMailSignature" dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;-- &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;teor&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190602092146</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 09:21:46-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

On 5 May 2019, at 07:02, Steve Snyder &lt;swsnyder@snydernet.net&gt; wrote:
&gt; On 5/4/19 12:26 PM, David Fifield wrote:
&gt;&gt; On Sat, May 04, 2019 at 03:27:53PM +0000, Yawning Angel wrote:
&gt;&gt;&gt; On 5/3/19 1:48 PM, Steve Snyder wrote:
&gt;&gt;&gt;&gt; FYI, obfs4proxy no longer recognizes address:port in this form:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;    ServerTransportListenAddr obfs4 [000.000.000.000]:443
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; Note the square brackets. Tor 0.3.5.8 / 0.4.0.5 still parses this
&gt;&gt;&gt;&gt; syntax, and obfs4proxy used to too. As of 0.0.10 it no longer does.
&gt;&gt;&gt; 
&gt;&gt;&gt; Odd.  None of that code, both in obfs4proxy and goptlib, has changed for
&gt;&gt;&gt; years.  I'll look at it when I have a moment.
&gt;&gt; 
&gt;&gt; Might be this?
&gt;&gt; 
&gt;&gt; tor_addr_parse is overly permissive
&gt;&gt; https://bugs.torproject.org/23082
&gt; 
&gt; Well, if that was supposed be a general fix then bug 23082 wasn't fixed
&gt; very well. ORPort is still OK with the square bracket syntax while
&gt; ServerTransportListenAddr is not.

You're right: tor's internal lookup function has a similar bug, which
we didn't fix in 23082. Tor uses separate functions for IP address parsing
and hostname lookups, and they handle IPv4 addresses in square brackets
differently.

I opened a ticket for this issue, and submitted a fix which uses the same
address parser on all IP addresses:
https://trac.torproject.org/projects/tor/ticket/30721

We won't backport this fix, because it changes config parsing. So it will
probably end up in tor 0.4.2.1-alpha and later.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzzlSoACgkQEP6qDnB1
ZyoL/BAAh6QRDpunJPKEBU9nctsFwD1jfHgL9S3kLmpkZ4k3nMh8/DH+sdQwXGeQ
UK8Gg6PabI/Ab1K77B0Nv5NhXshvGJ5M+RnlWkaHcrPyZg433hMuCUUz9bp95+zu
gh8CPyaNVHkvjUlkZDbCrwGDeUlHzSO3V7PtMaWDtzXtY0jXNQyzHcyvM02PrNP/
KvgENyfWRHEtEy//St/D4980GkyO5XXAfph1NBA0No+CDcPkkSdkX/1t2GNyoNqS
7037sVmeISUL8TiJQwYjqAk2N9WuNP+OApuGClO1nb902lT1+S3JZ9oVyBOLId/c
6R1jALCJGDoBAfQASLk2FVtIVFyQG9xl4zhHH1RxILA18gFcEorq6VuiTCbVjzUI
FZhX5duVjgx4zZTrCfVSqlTDEcncIv6MR0vgxYTzI1sodGee9DoyPF6WQeOiiQz7
vf0UZq7ohZZYyfzYoirpSWVZ16HIO53akCV29f7aK6bm4afSr12ZWJdMrBd5xPvG
tsJ+1O5Pw9smUdOx3s4vdQfDfex+s+UePF0HgP2N6xmjtwnKYCJGZqGJN7esKpR/
R7aktfyh96DGpsh+ShCzaVyhlO06Yz7OZPV+dpxKJbufEA0//PMYhm3T/txZRQd3
e3p46RsHYQ/5ohuclF1BJdaHTaOCo1fZhTJEBNnNDQDvGPjtXDw=
=NHmp
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190602122720</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-02 12:27:20-0400</timestampReceived><subject>[tor-dev] Detailed relay diagnostics for Re: Raising AuthDirMaxServersPerAddr to 4?</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Here are some detailed diagnostics.

My overall conclusion is: there isn't much bandwidth left on that exit.

&gt; On Sun, Jun 02, 2019 at 01:30:18PM +1000, teor wrote:
&gt;&gt; Which bandwidth authorities are limiting the consensus weight of these
&gt;&gt; relays? Where are they located?
&gt; 
&gt; The one in question is in Sweden:
&gt; https://metrics.torproject.org/rs.html#details/D5F2C65F4131A1468D5B67A8838A9B7ED8C049E2
&gt; 
&gt; It has votes of:
&gt; w Bandwidth=10000 Measured=65200
&gt; w Bandwidth=10000 Measured=70000
&gt; w Bandwidth=10000 Measured=74200
&gt; w Bandwidth=10000 Measured=77000
&gt; w Bandwidth=10000 Measured=99400
&gt; w Bandwidth=10000 Measured=102000
&gt; 
&gt; and it currently reports a self-measured peak at 56MBytes/s.
&gt; 
&gt; So one could interpret the current bwauths as saying that it is
&gt; a bit above average compared to other 56MByte/s relays. Maybe that's
&gt; because the other 56MByte/s relays got better lately, or maybe that's
&gt; because there's less overall traffic on the network, but my guess is
&gt; it's because it's stuck in that rut because the bwauths are not good
&gt; at realizing it could go a lot faster.

Well, it's not a simple geographical bias. That's the most common
measurement issue we see. The closest bwauth has the median measurement,
and the North American bwauths are evenly distributed above and below
the median.

Interestingly, sbws measures just slightly above the median, so this
also isn't an instance of torflow's "stuck in a partition" bug.

It would be nice to have some evidence that the relay is stuck, rather
than just slow, poorly connected, or variable.

The Relays Search bandwidth history shows that both relays on that
machine vary a lot:
https://metrics.torproject.org/rs.html#details/D5F2C65F4131A1468D5B67A8838A9B7ED8C049E2
https://metrics.torproject.org/rs.html#details/6B37261F1248DA6E6BB924161F8D7B019BC3B5B4

But it doesn't tell us *why* they vary.

&gt;&gt; Are the relays' observed bandwidths limiting their consensus weight?
&gt; 
&gt; bandwidth 89600000 102400000 55999620
&gt; 
&gt; So it looks like no.

I'm sorry, my question was poorly phrased.

The observed bandwidth is part of the torflow/sbws scaling algorithm,
so it's always limiting the consensus weight.

In this case, if the relay observed more bandwidth, it would get about
1.3x that bandwidth as its consensus weight.

&gt;&gt; If the relays are being measured by longclaw's sbws instance, we should
&gt;&gt; also look at their detailed measurement diagnostics.
&gt; 
&gt; Looks like yes, it is measured:
&gt; 
&gt; w Bandwidth=10000 Measured=78000
&gt; 
&gt; I look forward to hearing about these detailed measurement diagnostics. :)

We wrote a spec to answer all^ your questions:
https://gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt

^ except for these undocumented fields:
https://trac.torproject.org/projects/tor/ticket/30726


Here are some of the diagnostics from the latest bandwidth file:

&gt; 1559468088
&gt; version=1.4.0
&gt; earliest_bandwidth=2019-05-28T09:35:16
&gt; file_created=2019-06-02T09:35:04
&gt; generator_started=2019-05-19T14:04:34
&gt; latest_bandwidth=2019-06-02T09:34:48

sbws has been running for a few weeks, and its still measuring.

&gt; number_consensus_relays=6552
&gt; number_eligible_relays=6302
&gt; percent_eligible_relays=96

It's measuring 96% of Running relays.

&gt; recent_measurement_attempt_count=329137
&gt; recent_measurement_failure_count=301111

It has a 90% measurement failure rate, which is way too high:
https://trac.torproject.org/projects/tor/ticket/30719

But it's still measuring 96% of Running relays, so this bug might
not be as much of a blocker as we thought.

&gt; recent_measurements_excluded_error_count=892
&gt; recent_measurements_excluded_few_count=647
&gt; recent_measurements_excluded_near_count=232
&gt; recent_measurements_excluded_old_count=0

1-4% of measurements are excluded for various reasons. We think
that's normal. But it's hard to check, because torflow has
limited diagnostics.

&gt; software=sbws
&gt; software_version=1.1.0
&gt; time_to_report_half_network=224554

2.6 days is quite a long time to measure half the network.
Probably due to #30719.


And here are the diagnostics for that relay, split over a few lines:

&gt; bw=7700

This is the vote measured bandwidth.

&gt; bw_mean=803269 bw_median=805104

This is the raw measured bandwidth, 784 KBytes/s.
This is a *lot* lower than the observed bandwidth of 56 MBytes/s.

The most likely explanation is that the relay doesn't have much
bandwidth left over.

But maybe this sbws instance needs more bandwidth. If we fixed #30719,
there might be a lot more sbws bandwidth for successful measurements.

&gt; consensus_bandwidth=75000000 consensus_bandwidth_is_unmeasured=False

This is the consensus measured bandwidth in the sbws client's consensus,
converted from scaled-kilobytes to scaled-bytes.

&gt; desc_bw_avg=89600000 desc_bw_bur=102400000

This relay is rate-limited to 85 Mbytes/s.

Maybe it would have more bandwidth if it wasn't rate-limited.

&gt; desc_bw_obs_last=54690734 desc_bw_obs_mean=54690734

sbws is operating off a descriptor, where the observed bandwidth
was:
54690734

But the relay is now reporting:
55999620

So we might see the consensus weight increase a little bit in the next
day or so.

&gt; error_circ=0 error_destination=0 error_misc=0
&gt; error_second_relay=0 error_stream=0

This relay has no measurement errors.

&gt; master_key_ed25519=Q2Ft/AsNiru+HEx4KRdRxhnuohOs3ByA0t816gUG+Kk
&gt; nick=che node_id=$D5F2C65F4131A1468D5B67A8838A9B7ED8C049E2

Yes, I am analysing the right relay.

&gt; relay_in_recent_consensus_count=310

It has been running for a while. This consensus count is surprising,
but there's no spec for it, so I don't know what it's meant to be:
https://trac.torproject.org/projects/tor/ticket/30724
https://trac.torproject.org/projects/tor/ticket/30726

&gt; relay_recent_measurement_attempt_count=1
&gt; relay_recent_priority_list_count=1

1 measurement in the last 5 days is very low.
Probably due to #30719.

&gt; success=4

4 successful measurements is good, but it's weird that there is only
1 recent measurement attempt. These figures should be similar:
https://trac.torproject.org/projects/tor/ticket/30725

&gt; time=2019-06-01T14:56:32

It was last measured about 18 hours ago.

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzzwKgACgkQEP6qDnB1
Zyoa6hAAsDlN3HuOtwZiYjGjA78NPkusHTxRTtWhCijys1gVQznJ6pegXfa2mLzQ
w9ayvy1aJzXq9nvc0p2P7JRXo8CvFuE77dvAoxOeGx74T368ilknVFmbreY0Y/0L
oWGr5hr5fUOFg1xER1PsXY6M0w3qrBebn4Tz2fUh34rJ+GdeANM/ng+Waod27zLw
dC409nebXIaI/nE7NJ3ZjxjCjLLKgqMc3xjnodkD12JSS7B93KSNj4E1/gI5BUo9
pMkfzjGbY4qYJCcexprkMrqJN/03CGRE3T26M0eF3nH78OUCj08f40YJ12CKQa8A
2Rr4+1BjYg3ahju9X4Nu6AZkMLk0laH0XCMHpYdna4PSXZI1QaXyLKXM0Vl7jX1I
/OP9+DzfvnfzdNo1UxADYpOBQ7OQ//0AoSa3sqqCoyeeE6CqsM4KOnu2sHZj0F5P
kKQeiVZOub2toXsKH/VXRJGOO3CvK/6aFfOrmqbrZhyeSJC0Xj8NN2o0g4CnOo/i
KoDqzbO+uqxN3dNhYqLTj+h58mKGKtbjoUZibh5MXLuzFglZicCusibrkr5Ns+zm
XApSLBBzrcrAUeoQacXM8dUQiFJmw3fu5d7TKlYUEZ5g3cWbRY7VBl/TfzUsMmIv
Rwtutb96ONwPUIHX7Vh8+ckrIkc4Ucr006LCluTCDU59MSgqc5k=
=uNWM
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190604025400</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2019-06-04 02:54:00-0400</timestampReceived><subject>[tor-dev] Metrics for evaluating sbws vs torflow? (was: Raising AuthDirMaxServersPerAddr to 4)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


teor:
&gt; Hi Mike,
&gt; 
&gt;&gt; On 4 Jun 2019, at 06:20, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Mike Perry:
&gt;&gt;&gt; teor:
&gt;&gt;&gt;&gt; I have an alternative proposal:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt;&gt;&gt;&gt; see if exit bandwidths improve.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; We should measure the impact of this change using the tor-scaling
&gt;&gt;&gt;&gt; measurement criteria. (And we should make sure it doesn't conflict
&gt;&gt;&gt;&gt; with any other tor-scaling changes.)
&gt;&gt;&gt;
&gt;&gt;&gt; I like this plan. To tightly control for emergent effects of all-sbws vs
&gt;&gt;&gt; all-torflow, ideally we'd switch back and forth between all-sbws and
&gt;&gt;&gt; all-torflow on a synchronized schedule, but this requires getting enough
&gt;&gt;&gt; measurement instances of sbws and torflow for authorities to choose
&gt;&gt;&gt; either the sbw file, or the torflow file, on some schedule. May be
&gt;&gt;&gt; tricky to coordinate, but it would be the most rigorous way to do this.
&gt;&gt;&gt;
&gt;&gt;&gt; We could do a version of this based on votes/bwfiles alone, without
&gt;&gt;&gt; making dirauths toggle back and forth. However, this would not capture
&gt;&gt;&gt; emergent effects (such as quicker bwadjustments in sbws due to decisions
&gt;&gt;&gt; to pair relays with faster ones during measurement). Still, even
&gt;&gt;&gt; comparing just votes would be better than nothing.
&gt; 
&gt; I don't know how possible this is: we would need two independent network
&gt; connections per bandwidth scanner, one for sbws, and one for torflow.
&gt; 
&gt; (Running two scanners on the same connection means that they compete
&gt; for bandwidth. Perhaps we could use Tor's BandwidthRate to share the
&gt; bandwidth.)
&gt; 
&gt; I also don't know how many authority operators are able to run sbws:
&gt; Roger might be stuck on Python 2.
&gt; 
&gt; And I don't know how often they will be able to switch configs.
&gt; 
&gt; Let's make some detailed plans with the dirauth list.

Ok. It looks like I am still on the dirauth list. Perhaps we can come up
with some way to use the dirauth-conf repo to switch things, but if we
lack the machines for separate sbws and torflow, I agree that we should
not try to have the same connections/machines running both.

In that case, we should just focus on tracking the metrics that are
important to us as we continue to add sbws and remove torflow instances.

&gt;&gt;&gt; Do you like these metrics? Do you think we should be using different
&gt;&gt;&gt; ones? Should we try a few different metrics and see what makes sense
&gt;&gt;&gt; based on the results?
&gt;&gt; As additional metrics, we could do the CDFs of the ratio of measured bw
&gt;&gt; to advertised bw, and/or the metrics Karsten produced using just
&gt;&gt; measured bw. (I can't still find the ticket where those were graphed
&gt;&gt; during previous torflow updates, though).
&gt;&gt;
&gt;&gt; These metrics would be pretty unique to torflow/sbws experiments, but if
&gt;&gt; we have enough of those in the pipeline (such as changes to the scaling
&gt;&gt; factor), they may be worth tracking over time.
&gt; 
&gt; If we get funding for sbws experiments, we can definitely tweak the sbws
&gt; scaling parameters, and do some experiments.
&gt; 
&gt; At the moment, I'd like to focus on fixing critical sbws issues, deploying
&gt; sbws, and making sure it works at least as well as torflow.

Yes, that makes sense. A minimal version of this could be: don't do the
swapping back and forth, just add sbws and replace torflow scanners one
by one. As we do this, we could just keep a record of the metrics over
the votes and consensus during this time, and compare how the metrics
look for the sbws vs torflow votes vs the consensus, over time.

I'll work on precise formulae for the "Per Relay Spare Capacity" metric
and the "Measured to Observed Ratio" metric, and think more about how we
want to graph them so they are more easy to compare over time. I feel
like my previous mails were a little hand-wavy. Depending on how this
works out, I will either post that to tor-scaling with a complete list
of specific metrics equations, or write a separate post to tor-dev with
them just for sbws.

We won't finalize all of the performance experiment metrics until after
the Mozilla All Hands meeting (ie: ~3 weeks), but the two above can be
retroactively computed using router descriptor and extrainfo archives.

What were you thinking for the timeframe for the complete transition to
sbws?

-- 
Mike Perry


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190603224816</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-03 22:48:16-0400</timestampReceived><subject>[tor-dev] Dealing with critical sbws tickets</subject><body>

[Attachment #2 (--Apple-Mail-FEC96292-BFFD-4330-861B-DAA8C75C5DA8)]


Hi juga,

I read your meeting notes from this week's network team meeting:

juga(offline):
   Week of 05/20 (planned)
      - Add Tor version to the bandwidth file (#30196)
   Week of 05/20 (actual)
   Week of 06/03 (plan)
      - Continue with #30406: Refactor header constants in sbws to
use Stem's one

For the next few weeks, can you focus on fixing critical sbws bugs,
and helping with authority deployments?

Here's what I think we could do:

I would like us to deploy sbws to 3/6 bandwidth authorities some time
in June. We can do this deployment as soon as another directory
authority operator is ready.

To deploy more than 3 sbws instances, we need to fix these critical sbws
bugs:

We need sbws to generate bandwidth lines for all relays with results,
even if they are not Running in the sbws tor client's current consensus.
https://trac.torproject.org/projects/tor/ticket/29710#comment:13

We need sbws to use MaxAdvertisedBandwidth from the latest descriptors:
https://trac.torproject.org/projects/tor/ticket/30733

We also need to look for any more critical bugs in sbws. Here are some
ways we can check for bugs:

We need to check if all sbws instances exclude some relays, to help us find
any more bugs in sbws:
https://trac.torproject.org/projects/tor/ticket/30735

90% of sbws measurement attempts fail. But these are internal errors, not
network errors. So it looks like sbws has a relay selection bug:
https://trac.torproject.org/projects/tor/ticket/30719#comment:2

After we do these tasks, we can deploy sbws to 4 bandwidth authorities.

What do you think?

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Hi juga,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;I read your meeting notes from this \
week's network team meeting:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;juga(offline):&lt;br&gt;   Week of 05/20 \
(planned)&lt;br&gt;      - Add Tor version to the bandwidth \
file (#30196)&lt;br&gt;   Week of 05/20 (actual)&lt;br&gt;   Week \
of &lt;a href="x-apple-data-detectors://62" dir="ltr" x-apple-data-detectors="true" \
x-apple-data-detectors-type="calendar-event" x-apple-data-detectors-result="62" \
style="text-decoration-color: rgba(0, 0, 0, \
0.258824);"&gt;06/03&lt;/a&gt; (plan)&lt;br&gt;      - Continue \
with #30406: Refactor header constants in sbws to&lt;br&gt;use Stem's \
one&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;For the next few weeks, can you focus on fixing critical sbws \
bugs,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;and \
helping with authority deployments?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's what I \
think we could do:&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;I \
would like us to deploy sbws to 3/6 bandwidth authorities some \
time&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;in \
June. We can do this deployment as soon as another directory&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;authority operator is \
ready.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;To \
deploy more than 3 sbws instances, we need to fix these critical \
sbws&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;bugs:&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;We need sbws to \
generate bandwidth lines for all relays with results,&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;even if they are \
not Running in the sbws tor client's current consensus.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/29710#comment:13"&gt;https://trac.torproject.org/projects/tor/ticket/29710#comment:13&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;We need sbws to use MaxAdvertisedBandwidth from \
the latest descriptors:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30733"&gt;https://trac.torproject.org/projects/tor/ticket/30733&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
also need to look for any more critical bugs in sbws. Here are some&lt;/div&gt;&lt;div&gt;ways we \
can check for bugs:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;We need to check if all sbws instances \
exclude some relays, to help us find&lt;/div&gt;&lt;div dir="ltr"&gt;any more bugs in \
sbws:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30735"&gt;https://trac.torproject.org/projects/tor/ticket/30735&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;90% of \
sbws measurement attempts fail. But these are internal errors, \
not&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;network errors. So it looks \
like sbws has a relay selection bug&lt;/span&gt;&lt;/font&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;font color="#000000"&gt;&lt;span \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30719#comment:2"&gt;https://trac.to \
rproject.org/projects/tor/ticket/30719#comment:2&lt;/a&gt;&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;After we do these tasks, we can deploy sbws \
to 4 bandwidth authorities.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;What do you \
think?&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;T&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190530134926</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-30 13:49:26-0400</timestampReceived><subject>[tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/signed)]


Greetings!

As some of you know, a bunch of onion services were or are still under heavy
DDoS on the network. More specifically, they are bombarded with introduction
requests (INTRODUCE2 cells) which forces them to rendezvous for each of them
by creating a ton of circuits.

This basically leads to a resource exhaustion attack on the service side with
its CPU massively used for path selection, opening new circuits and
continously handling INTRODUCE2 cells.

Unfortunately, our circuit-level flow control does not apply to the service
introduction circuit which means that the intro point is allowed, by the Tor
protocol, to send an arbitrary large amount of cells down the circuit. This
means for the service that even after the DoS has stopped, it would still
receive massive amounts of cells because some are either inflight on the
circuit or queued at the intro point ready to be sent (towards the service).

That being all said, our short-term goal here is to add INTRODUCE2
rate-limiting (similar to the Guard DoS subsystem deployed early last year)
*at* the intro point but much simpler. The goal is to soak up the introduction
load directly at the intro points which would help reduce the load on the
network overall and thus preserve its health.

Please have a look at https://trac.torproject.org/15516 for some discussions
and ongoing code work. We are at the point where we have a branch that rate
limits INTRODUCE2 cells at the intro point but we need to figure out proper
values for the rate per second and the burst allowed.

One naive approach is to see how much cells an attack can send towards a
service. George and I have conducted experiment where with 10 *modified* tor
clients bombarding a service at a much faster rate than 1 per-second (what
vanilla tor does if asked to connect a lot), we see in 1 minute ~15000
INTRODUCE2 cells at the service. This varies in the thousands depending on
different factors but overall that is a good average of our experiment.

This means that 15000/60 = 250 cells per second.

Considering that this is an absurd amount of INTRODUCE2 cells (maybe?), we can
put a rate per second of let say a fifth meaning 50 and a burst of 200.

Over the normal 3 intro points a service has, it means 150 introduction
per-second are allowed with a burst of 600 in total. Or in other words, 150
clients can reach the service every second up to a burst of 600 at once. This
probably will ring alarms bell for very popular services that probably gets
1000+ users a second so please check next section.

I'm not that excited about hardcoded network wide values so this is why the
next section is more exciting but much more work for us!

One step further: we have not really decided yet if this is something we want
nor have time to tackle but an idea here would be for a service to inform the
intro point, using the ESTABLISH_INTRO cell payload, on the parameters it
wants for its DoS defenses. So let say a very popular .onion with OnionBalance
and 10 intro points, could tell to its intro points that it wants much higher
values for the DoS defenses (or even put it off).

However, it doesn't change the initial building block of being able to rate
limit at the introduction point. As a second step, we can add this new type of
ESTABLISH_INTRO cell. It is always dicy to introduce a new cell since for
instance this would leak information to the intro point that the service is
"&gt;= version". Thus, this needs to be done with carefully.

Time for your thoughts and help! :)

Thanks everyone!
David

-- 
g6fXJTHx8+aXYB1ZLPzFft/VxRukF1Td5nborX04XM0=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190612123947</emailId><senderName>Sofia Celi</senderName><senderEmail>sofia@autonomia.digital</senderEmail><timestampReceived>2019-06-12 12:39:47-0400</timestampReceived><subject>[tor-dev] OTRv4 summit at PETS2019</subject><body>

[Attachment #2 (multipart/signed)]


Hi, Tor people!

My name is Sof=EDa and I'm the person leading the OTRv4 initiative. I don't=
 know
if this is the best place to send this, so if it is not, let me know ;)

As part of the work on creating the version 4 of the OTR (Off-the-Record)
messaging protocol, we are running a summit in Stockholm, Sweden, the 15 of
July, in the morning.

This summit runs in parallel with the Privacy Enhancing Technology Symposium
2019 (PETS2019, https://petsymposium.org/2019/index.php). It will be a summ=
it
around the work done in the field of secure messaging, deniability and priv=
acy
on July 15 on the morning (that is, the day before the start of PETS 2019).=
 It
will be held at the Royal Institute of Technology (KTH). You can find it on=
 the
official PETS2019 programm: https://petsymposium.org/2019/program.php and o=
n the
official otr website: http://otr.im/

The OTRv4 summit will feature a mix of a discussions, short talks and
presentations which aim to highlight the importance of privacy, security and
deniability in a secure messaging setting to researchers, students, activis=
ts
and developers. The final schedule for the event will be announced closer t=
o the
event. The workshop will start at 9 am and end at 12.30 pm.

As one of our developers and my current partner, Ola Bini, has been detained
in Ecuador with no actual evidence, we will also talk about this. You can r=
ead
about this in the latest EFF statement:
https://www.eff.org/deeplinks/2019/06/eff-ohchr-iachr-cybercrime-law-interc=
onnected-human-rights

We will like that you join us there... so let us know if you can!

Thank you!

The OTRv4 team
--
Sof=EDa Celi
@claucece
Cryptographic research and implementation at CAD: https://autonomia.digital/
EF74 1A5F 5692 E56F 14F6  243C 3992 6144 F89D 996F



["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190617003858</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-06-17 00:38:58-0400</timestampReceived><subject>[tor-dev] Cryptocurrency: Total Energy Analysis - Crypto Uses Less Than Fiat</subject><body>

(from tor-dev: PoW DoS defenses Prop 305: INTRO Cell)

On 6/16/19, Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt; Given the significant environmental impact of POW in other distributed
&gt; systems (blockchain), we should not implement schemes that solve a
&gt; problem for Tor but create problems for people elsewhere (potentially
&gt; irreversible environmental damage).
&gt; 
&gt; https://www.theguardian.com/technology/2018/nov/05/energy-cost-of-mining-bitcoin-more-than-twice-that-of-copper-or-gold
&gt; 

One must first understand and enumerate the *entirety of all global energy
inputs* going into and making up the legacy fiat currency banking systems,
from both Government and Corporate sectors, and its results, before
attempting to make any claims that cryptocurrency is "worse" [1].
Such cataloging and analysis requires more work, more data, more actual
redpill thought, than just simple hashrate/J/$... so of course people take
shortcuts in such articles, as do other people in their pronouncements
stemming from them.

&gt; Other less-destructive schemes exist to prevent DoS attacks. POW is a
&gt; method, not a goal in itself. Taking a step back and examining the full
&gt; spectrum of available tools would be better.

The needs and model for overlay nets, ie tor, will of course be
different than those above.
And always interesting where tech various ends up being applied.

[1] Hint: Cryptocurrency actually consumes less, and further finally forces
inefficiency and other undesired things out of Fiat by displacing it...
hopefully faster than it can adapt. Some say that has a value, one that
many will be quite happy to sink a bit of premium into if need be.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190612121833</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-06-12 12:18:33-0400</timestampReceived><subject>[tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]



["305-establish-intro-dos-defense-extention.txt" (text/plain)]

Filename: 305-establish-intro-dos-defense-extention.txt
Title: ESTABLISH_INTRO Cell DoS Defense Extension
Author: David Goulet, George Kadianakis
Created: 06-June-2019
Status: Draft

0. Abstract

   We propose introducing a new cell extension to the onion service version=
 3
   ESTABLISH_INTRO cell in order for a service operator to send directices =
to
   the introduction point.

1. Introduction

   The idea behind this proposal is to provide a way for a service operator=
 to
   give to the introduction points Denial of Service (DoS) defense paramete=
rs
   through the ESTABLISH_INTRO cell.

   We are currently developing onion service DoS defenses at the introducti=
on
   point layer which for now has consensus parameter values for the defense=
s'
   knobs. This proposal would allow the service operator more flexibility f=
or
   tuning these knobs and/or future parameters.

2. Proposal

   We introduce a new extention to the ESTABLISH_INTRO cell. The EXTENSIONS
   field will be leveraged and a new protover will be introduced to reflect
   that change.

   As a reminder, this is the content of an ESTABLISH_INTRO cell (taken from
   rend-spec-v3.txt section 3.1.1):

     AUTH_KEY_TYPE         [1 byte]
     AUTH_KEY_LEN          [2 bytes]
     AUTH_KEY              [AUTH_KEY_LEN bytes]
     N_EXTENSIONS          [1 byte]
     N_EXTENSIONS times:
        EXT_FIELD_TYPE     [1 byte]
        EXT_FIELD_LEN      [1 byte]
        EXT_FIELD          [EXT_FIELD_LEN bytes]
     HANDSHAKE_AUTH        [MAC_LEN bytes]
     SIG_LEN               [2 bytes]
     SIG                   [SIG_LEN bytes]

   We propose a new EXT_FIELD_TYPE value:

      [01] -- DOS_PARAMETERS.

              If this flag is set, the extension should be used by the
              introduction point to learn what values the denial of service
              subsystem should be using.

   The EXT_FIELD content format is:

      N_PARAMS    [1 byte]
      N_PARAMS times:
         PARAM_TYPE  [1 byte]
         PARAM_VALUE [8 byte]

   The PARAM_TYPE proposed values are:

      [01] -- DOS_INTRODUCE2_RATE_PER_SEC
              The rate per second of INTRODUCE2 cell relayed to the service.

      [02] -- DOS_INTRODUCE2_BURST_PER_SEC
              The burst per second of INTRODUCE2 cell relayed to the servic=
e.

   The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
   (uint64_t). It MUST match the specified limit for the following PARAM_TY=
PE:

      [01] -- Min: 0, Max: INT_MAX
      [02] -- Min: 0, Max: INT_MAX

   A value of 0 means the defense is disabled which has precedence over the
   network wide consensus parameter.

   In this case, if the rate per second is set to 0 (param 0x01) then the
   burst value should be ignored. And vice-versa, if the burst value is 0,
   then the rate value should be ignored. In other words, setting one single
   parameter to 0 disables the INTRODUCE2 rate limiting defense.

3. Protocol Version

   We introduce a new protocol version in order for onion service that wants
   to specifically select introduction points supporting this new extension.
   But also, it should be used to know when to send this extension or not.

   The new version for the "HSIntro" protocol is:

      "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
             service version 3 only.

4. Configuration Options

   We also propose new torrc options in order for the operator to control
   those values passed through the ESTABLISH_INTRO cell.

      "HiddenServiceEnableIntroDoSDefense 0|1"

         If this option is set to 1, the onion service will always send to =
the
         introduction point denial of service defense parameters regardless=
 of
         what the consensus enables it or not. The value will be taken from
         the consensus and if not present, the default values will be used.
         (Default: 0)

      "HiddenServiceEnableIntroDoSRatePerSec N sec"

         Controls the introduce rate per second the introduction point shou=
ld
         impose on the introduction circuit.
         (Default: 25, Min: 0, Max: 4294967295)

      "HiddenServiceEnableIntroDoSBurstPerSec N sec"

         Controls the introduce burst per second the introduction point sho=
uld
         impose on the introduction circuit.
         (Default: 200, Min: 0, Max: 4294967295)

   They respectively control the parameter type 0x01 and=A00x02 in the
   ESTABLISH_INTRO cell detailed in section 2.

   The default values of the rate and burst are taken from ongoing anti-DoS
   implementation work [1][2]. They aren't meant to be defined with this
   proposal.

5. Security Considerations

   Using this new extension leaks to the introduction point the service's t=
or
   version. This could in theory help any kind of de-anonymization attack o=
n a
   service since at first it partitions it in a very small group of running
   tor.

   Furthermore, when the first tor version supporting this extension will be
   released, very few introduction points will be updated to that version.
   Which means that we could end up in a situation where many services want=
 to
   use this feature and thus will only select a very small subset of relays
   supporting it overloading them but also making it an easier vector for an
   attacker that whishes to be the service introduction point.

   For the above reasons, we propose a new consensus parameters that will
   provide a "go ahead" for all service out there to start using this
   extension only if the introduction point supports it.

      "enable_establish_intro_dos_extension"

         If set to 1, this makes tor start using this new proposed extension
         if available by the introduction point (looking at the new protove=
r).

   This parameter should be switched on when a majority of relays have
   upgraded to a tor version that supports this extension for which we beli=
eve
   will also give enough time for most services to move to this new stable
   version making the anonymity set much bigger.

   We propose to add a torrc option to ignore this parameter and force tor =
to
   select introduction points supporting this extension which will
   effectively, in the beginning, toss away these security considerations.

   We believe that there are services that do not care about anonymity on t=
he
   service side and thus could benefit from this feature right away if they
   wish to use it.

References:

[1] https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html
[2] https://trac.torproject.org/15516

["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190612234134</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2019-06-12 23:41:34-0400</timestampReceived><subject>[tor-dev] Shortcomings of the pluggable transports specification?</subject><body>

We are working on improving Tor's pluggable transports specification:
&lt;https://spec.torproject.org/pt-spec&gt;

The goal is to make the spec useful to more people and fix issues that
have accumulated over the years.  For more context, have a look at the
following ticket, which we use to coordinate this effort:
&lt;https://bugs.torproject.org/29285&gt;

Before changing the spec, we need to understand its shortcomings and
what issues implementers have run into.  For those of you who have
experience with the spec -- either Tor's version 1.0 or version 2.1
maintained by pluggabletransports.info -- please let us know:

* What version of the PT specification and what library implementation
  (if any) are you using?

* What has your experience been with the PT specification?

* How would you improve the specification?

Thanks,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190613074322</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-13 07:43:22-0400</timestampReceived><subject>Re: [tor-dev] Shortcomings of the pluggable transports specification?</subject><body>

[Attachment #2 (multipart/signed)]


Hi Philipp,

&gt; On 13 Jun 2019, at 09:41, Philipp Winter &lt;phw@nymity.ch&gt; wrote:
&gt; 
&gt; We are working on improving Tor's pluggable transports specification:
&gt; &lt;https://spec.torproject.org/pt-spec&gt;
&gt; 
&gt; The goal is to make the spec useful to more people and fix issues that
&gt; have accumulated over the years.  For more context, have a look at the
&gt; following ticket, which we use to coordinate this effort:
&gt; &lt;https://bugs.torproject.org/29285&gt;
&gt; 
&gt; Before changing the spec, we need to understand its shortcomings and
&gt; what issues implementers have run into.  For those of you who have
&gt; experience with the spec -- either Tor's version 1.0 or version 2.1
&gt; maintained by pluggabletransports.info -- please let us know:
&gt; 
&gt; * What version of the PT specification and what library implementation
&gt;  (if any) are you using?

Yawning, David, and I pointed out a bunch of issues in PT 2.0 and 2.1:

https://lists.torproject.org/pipermail/tor-dev/2017-June/012332.html

Most of these issues were present in PT 1.0, some of them were newly
introduced in 2.0.

Some of the issues were caused by tor's limited PT interface, which
we've improved recently.

Some were also caused by confusion over whether the application or the
transport should take responsibility for certain features.

I've also opened some trac tickets over the past few years. I assume
they've been triaged, and someone has an overview of which changes we
have wanted to make in the past.

&gt; * What has your experience been with the PT specification?

I am very confused by all the different specifications and implementations.

&gt; * How would you improve the specification?

Start by defining a scope for pluggable transports. Ruthlessly limit the
specification to a programming language-agnostic interface. Allow for
extensions to the core specification, which can be included once they are
in active use.

Document language-specific APIs separately. Or create a language-agnostic
API using some kind of binding generator. (If that results in a functional
and usable interface.)

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAl0B/poACgkQEP6qDnB1
Zyr3tA/+PbxvupCfu4a45iRLRMqUcmICtwwvYCGmcR1Teot7J49cMhHjGgb1xY1p
AAFWQGR45qYXRO0Q0m2m0bBJNxJJxH8A97eWv8IXp1oesuGFggSsyyqNs/mpRy7u
zcG57cHJ923xbF6x76fPBmsD5GzhJyD6yomSkCXly8JjBRfWaB7L981NRPrIHY0N
IxwW3b2hyKEMNXVyElIld1XiAeZcj6Y9pwz/7l/+DBvbcw31ZeAppKGb0udc/WYU
hrFJsQ9J/U1C4xHjAJk/NjM8eNWrco6VKihfnuaF2fSgwc2LKJ9FPUkvl/PSSGUa
mQ9MHZawzKslub1MP5Ax5qO0cCYqn92O3neq+a0UlxklCT63M3xvcDZKQXKMqnWV
+JXqWb7UHPjjrPll+FSyh21fkPB3zLcNX9iTf/Vz3yvAYURQmKPCy7AET9MU5q9S
aXyF3YLRrOEL11Nauw05JNoK8Hhob2Oh40sUhn6J8WkJLA5C/CQI+Y2KII1yc8cg
UYu98NZ6N47/E8lVpLBA0UC3L60NoH7lvjEM9v8PhhEjlBuAfyXeSCP8TDY6QAOW
GOsLoUo137F4N1UWhDgOaaNynEeN89uLBj5g+IxW2InkTzhwIBjR9yQwUBg+M0Vq
n2QpSmAKGBo1fjIQp4fW2JBCE8IcwPS9sZ6VColt3Gphbh4Cqoc=
=Zv+T
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190612123955</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-12 12:39:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; Filename: 305-establish-intro-dos-defense-extention.txt
&gt; Title: ESTABLISH_INTRO Cell DoS Defense Extension
&gt; Author: David Goulet, George Kadianakis
&gt; Created: 06-June-2019
&gt; Status: Draft
&gt;

Thanks for this proposal, it's most excellent and an essential building
block for future work on intro point related defences.

&gt;
&gt;    We propose a new EXT_FIELD_TYPE value:
&gt;
&gt;       [01] -- DOS_PARAMETERS.
&gt;
&gt;               If this flag is set, the extension should be used by the
&gt;               introduction point to learn what values the denial of service
&gt;               subsystem should be using.
&gt;

Perhaps we can name it "rate-limiting parameters"? But no strong opinion.

&gt;    The EXT_FIELD content format is:
&gt;
&gt;       N_PARAMS    [1 byte]
&gt;       N_PARAMS times:
&gt;          PARAM_TYPE  [1 byte]
&gt;          PARAM_VALUE [8 byte]
&gt;
&gt;    The PARAM_TYPE proposed values are:
&gt;
&gt;       [01] -- DOS_INTRODUCE2_RATE_PER_SEC
&gt;               The rate per second of INTRODUCE2 cell relayed to the service.
&gt;
&gt;       [02] -- DOS_INTRODUCE2_BURST_PER_SEC
&gt;               The burst per second of INTRODUCE2 cell relayed to the service.
&gt;
&gt;    The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt;    (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt;
&gt;       [01] -- Min: 0, Max: INT_MAX
&gt;       [02] -- Min: 0, Max: INT_MAX
&gt;

How would this new addition to the cell impact the size of the cell? How
much free space do we have for additional features to this cell (e.g. to
do the PoW stuff of the other thread)?

&gt;    A value of 0 means the defense is disabled which has precedence over the
&gt;    network wide consensus parameter.
&gt;
&gt;    In this case, if the rate per second is set to 0 (param 0x01) then the
&gt;    burst value should be ignored. And vice-versa, if the burst value is 0,
&gt;    then the rate value should be ignored. In other words, setting one single
&gt;    parameter to 0 disables the INTRODUCE2 rate limiting defense.
&gt;

I think it could be cool to add a discussion section where we introduce
a new cell from the intro to the service which informs the service that
rate limiting limits have been hit. So that there is a way for the
service to get feedback that it's under attack or capped by
limits. Otherwise, there is simply no way to learn it.

This can be a later feature fwiw.

&gt; 3. Protocol Version
&gt;
&gt;    We introduce a new protocol version in order for onion service that wants
&gt;    to specifically select introduction points supporting this new extension.
&gt;    But also, it should be used to know when to send this extension or not.
&gt;
&gt;    The new version for the "HSIntro" protocol is:
&gt;
&gt;       "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt;              service version 3 only.
&gt;
&gt; 4. Configuration Options
&gt;
&gt;    We also propose new torrc options in order for the operator to control
&gt;    those values passed through the ESTABLISH_INTRO cell.
&gt;
&gt;       "HiddenServiceEnableIntroDoSDefense 0|1"
&gt;
&gt;          If this option is set to 1, the onion service will always send to the
&gt;          introduction point denial of service defense parameters regardless of
&gt;          what the consensus enables it or not. The value will be taken from
&gt;          the consensus and if not present, the default values will be used.
&gt;          (Default: 0)
&gt;
&gt;       "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt;
&gt;          Controls the introduce rate per second the introduction point should
&gt;          impose on the introduction circuit.
&gt;          (Default: 25, Min: 0, Max: 4294967295)
&gt;
&gt;       "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt;
&gt;          Controls the introduce burst per second the introduction point should
&gt;          impose on the introduction circuit.
&gt;          (Default: 200, Min: 0, Max: 4294967295)
&gt;
&gt;    They respectively control the parameter type 0x01 and  0x02 in the
&gt;    ESTABLISH_INTRO cell detailed in section 2.
&gt;
&gt;    The default values of the rate and burst are taken from ongoing anti-DoS
&gt;    implementation work [1][2]. They aren't meant to be defined with this
&gt;    proposal.
&gt;
&gt; 5. Security Considerations
&gt;
&gt;    Using this new extension leaks to the introduction point the service's tor
&gt;    version. This could in theory help any kind of de-anonymization attack on a
&gt;    service since at first it partitions it in a very small group of running
&gt;    tor.
&gt;
&gt;    Furthermore, when the first tor version supporting this extension will be
&gt;    released, very few introduction points will be updated to that version.
&gt;    Which means that we could end up in a situation where many services want to
&gt;    use this feature and thus will only select a very small subset of relays
&gt;    supporting it overloading them but also making it an easier vector for an
&gt;    attacker that whishes to be the service introduction point.
&gt;

Interesting idea.

I'm not that worried about the service leaking its version to the intro,
but I am worried about all attacked services saturating the few upgraded
intro points, so I agree that such a switch makes sense.

&gt;    For the above reasons, we propose a new consensus parameters that will
&gt;    provide a "go ahead" for all service out there to start using this
&gt;    extension only if the introduction point supports it.
&gt;
&gt;       "enable_establish_intro_dos_extension"
&gt;
&gt;          If set to 1, this makes tor start using this new proposed extension
&gt;          if available by the introduction point (looking at the new protover).
&gt;
&gt;    This parameter should be switched on when a majority of relays have
&gt;    upgraded to a tor version that supports this extension for which we believe
&gt;    will also give enough time for most services to move to this new stable
&gt;    version making the anonymity set much bigger.
&gt;
&gt;    We propose to add a torrc option to ignore this parameter and force tor to
&gt;    select introduction points supporting this extension which will
&gt;    effectively, in the beginning, toss away these security considerations.
&gt;
&gt;    We believe that there are services that do not care about anonymity on the
&gt;    service side and thus could benefit from this feature right away if they
&gt;    wish to use it.
&gt;
&gt; References:
&gt;
&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html
&gt; [2] https://trac.torproject.org/15516
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190613102132</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-13 10:21:32-0400</timestampReceived><subject>[tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INTRO C</subject><body>

juanjo &lt;juanjo@avanix.es&gt; writes:

&gt; Hello, this is my view of things, please be gentle as this is my first 
&gt; proposal draft :)
&gt;

Hello,

thanks for working on this. IMO any proof-of-work introduction proposal
can be seen as orthogonal to David's prop305 which is a rate-limiting
proposal (even tho it's not named as such) and hence deserves its own
thread.

&gt; _ADAPTIVE POW PROPOSAL:_
&gt;
&gt; Client sends the INTRODUCE1 as normal.
&gt;
&gt; Introduction Point checks the Current Requests Rate and checks the DoS 
&gt; settings.
&gt;
&gt; -DoS check is OK: send INTRODUCE2 to Hidden Service etc...
&gt;

So far so good (even tho this is not our usual proposal format).

&gt; -DoS settings/rate limit reached: then
&gt;
&gt;      1.Introduction Point generates a random 8 bytes key (IPKey) and 
&gt; associates it with the client circuit. Then send INTRODUCE_POW to the 
&gt; Client with the IPKey.

Is this a new cell? What's the format? Are these really keys or are they
just nonces?

IMO we should not do this through a new cell because that increases the
round-trip by one. Instead we should just embed the PoW parameters in
the onion service descriptor and clients find them there. 

&gt;      2.Client computes POW.
&gt;      Do{
&gt; Generates random 8 bytes key (ClientKey).
&gt; Generates hash(sha512/256 or sha3??) of
&gt; hash(IPKey + ClientKey)
&gt; } while (hash does not start with "abcde")
&gt;

That looks like a naive PoW scheme. It would perhaps be preferable to
try to find a GPU/ASIC-resistant or memory-hard PoW scheme here, to
minimize the advantage of adversaries with GPUs etc.?  Are there any
good such schemes?

Also services should definitely be able to configure the difficulty of
the PoW, and IMO this should again happen through the descriptor.

&gt;      3. Client sends INTRODUCE_POWR to the I.P. with the generated POW 
&gt; and the ClientKey.

IMO this should happen as part of the INTRODUCE1 cell.

&gt;      4. I.P. checks the POW:
&gt;
&gt;          -POW is correct: send INTRODUCE2 to HS.
&gt;          -POW is not correct: send INTRODUCE_POW_ERROR to client with 
&gt; new IPKey.
&gt;
&gt; *I say 8 bytes for the Keys just for example.
&gt;
&gt; PROS AND CONS, who needs to update Tor version?:
&gt; --------------
&gt;
&gt; Only rate limit: Introduction Point and Hidden Service. No breakage.
&gt;
&gt; POW: Client, Introduction Point and Hidden Service. POW will break 
&gt; compatibility with other v3 Hidden Services clients, if we implement a 
&gt; way to bypass POW for old clients then this feature won't work as intended.
&gt;
&gt; A forgotten guy here: Authenticated Rends cell: where we make sure the 
&gt; Client established a connection to the Rend Point before requesting the 
&gt; INTRODUCE1.
&gt;

Yep, that's yet another proposal (ticket #25066).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190626011527</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-06-26 01:15:27-0400</timestampReceived><subject>[tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi tor-dev@ mailing list,

I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs

This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative 
to Prop299 as requested here: 
https://trac.torproject.org/projects/tor/ticket/29801

The GitHub pull request is here: 
https://github.com/torproject/torspec/pull/87

Thank You,

Neel Chauhan

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190627203508</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-06-27 20:35:08-0400</timestampReceived><subject>[tor-dev] Per-peer stream isolation for Bitcoin clients</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Tor-Dev,

I'm trying to gauge the consensus (or lack thereof) in the Tor
development community on whether it's desirable for Bitcoin clients
(e.g. Bitcoin Core) to use stream isolation such that each peer is
accessed over a different circuit.

Some random thoughts on the matter:

1. Bitcoin Core accesses 8 peers by default, so per-peer stream
isolation would use 8 circuits instead of 1.
2. Per-peer stream isolation prevents a single exit relay from feeding
the user a chain that's not the longest chain, so it's desirable from a
Bitcoin security point of view.
3. Per-peer stream isolation would mean more potential for one of the
circuits being deanonymizable, via traffic analysis etc.  It's not clear
to me whether this amount of increased circuits is harmful, or how it
compares to other common usage of Tor such as Tor Browser (which uses
first-party stream isolation, so a user with a lot of tabs open may very
well have 8 or more circuits in use at once).
4. Per-peer stream isolation puts more load on the Tor network.  It's
not clear to me whether this increased load (8 circuits instead of 1) is
so much that it's harmful.
5. Bitcoin Core does do per-peer stream isolation by default.  The
relevant PR is https://github.com/bitcoin/bitcoin/pull/5911
6. Whonix's tor-service-defaults-torrc chooses to disable automatic
per-peer stream isolation for Bitcoin's SOCKS port, and states "Makes
too many connections to different servers.  Should not hurt if they get
through the same circuit."  No citation was given for either claim.
7. The behavior in Bitcoin Core's PR was ACKed by Isis Lovecruft, and an
unspecified Tor developer whom Greg Maxwell talked to.

So, it sounds like there is apparently some disagreement between the two
Tor devs who ACKed this behavior, and the Whonix devs who decided not to
enable it.

Curious what the general feeling in the community is.

(I understand that Isis no longer is active in Tor, so I'm not CC'ing
them.  I am CC'ing Patrick from Whonix in case he wants to weigh in.)

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEVB3fdzAraEcoBtkSs/LRZXhtZXAFAl0VKAIACgkQs/LRZXht
ZXD3rRAAydyiDv2NVU8rPopr+FkTVclNAA3gM3BKjhZH1EGqya54Xr0OdsTR3VUQ
gBMz5HiexbFnE7VTysnB6ePP/PpLRlAlTj1zLXFCT90H+s1kj84WpjxNZJaguLIJ
zGOQKhqgId9f1pjv7or8DYDrdzT0bfOzKREFM+Yx5TTgPfvxXC9Ug6U1sx5sp7AA
jCAZnrjqWSK+IrNnwrayL2vSPByt+djsK2YPLnq13frKMdonMw+IITVOvT9w5LZt
I/MQa2UujG5DU0owI0t5XmJ7ZQxehcHdAuqU/BfZ5OQVjCH3QgVNwRjlGPaaag+f
y9wMVG0X4cbuvg5x8sar/n8UCR1sDJmlSuN7C6AwE2/e0RU0g67wfTgNcqFlIHta
9t8ORsFUxN6rDtRkbq0FE7xgSYbT9cDtjDFJMhG8oOc0Ibc9EhIJkGETz1amHNUo
GFEBAEircjPJ+KZBsHsQGrLUwpiM6zPbPfkVWwA7dTn4peESSed0Yjwawcn2wpiE
X2TMzhhXpzTjtqpBcroSDKRMum5z/VksEZ3d2MyfIj/caYVXXxPZYS1DqOGtKxYc
uiDCRpL4b/ouJ1FbT1sxHpwTp5e+62XFnfXsoz3Wa9jkrA75kgnnb2kfcjNW/Fq/
6HgLhasriz4jg2iya9rScuUnmU1Ewa8st0bNDGK83qYHofCdvCg=
=1u2L
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190622005054</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-06-22 00:50:54-0400</timestampReceived><subject>[tor-dev] Optimistic SOCKS Data</subject><body>

The attached is a draft proposal for allowing tor to lie to an
application about the SOCKS connection enabling it to send data
optimistically.

It's going to need some fleshing out in ways I am not familiar with,
but I wanted to get something out to start as we think that this is
probably the best path forward for bringing back Tor Browser's
optimistic SOCKS behavior.

-tom

["xxx-optimistic-socks-in-tor.txt" (text/plain)]

Filename: xxx-optimistic-socks-in-tor.txt
Title: Optimistic SOCKS Data
Author: Tom Ritter
Created: 21-June-2019
Status: Draft
Ticket: #5915

0. Abstract

   We propose that tor should have a SocksPort option that causes it to lie
   to the application that the SOCKS Handshake has succeeded immediately,
   allowing the application to begin sending data optimistically.

1. Introduction

   In the past, Tor Browser had a patch that allowed it to send data
   optimistically. This effectively eliminated a round trip through the
   entire circuit, reducing latency.

   This feature was buggy, and specifically caused problems with MOAT, as
   described in [0] and Tor Messenger as described in [1]. It is possible
   that the other issues observed with it were the same issue, it is
   possible they were different.

   Rather than trying to identify and fix the problem in Tor Browser, an
   alternate idea is to have tor lie to the application, causing it to send
   the data optimistically. This can benefit all users of tor. This
   proposal documents that idea.

   [0] https://trac.torproject.org/projects/tor/ticket/24432#comment:19
   [1] https://trac.torproject.org/projects/tor/ticket/19910#comment:3

2. Proposal

2.1. New SocksPort Flag

   In order to have backward compatibility with third party applications that
   do not support or do not want to use optimistic data, we propose a new
   SocksPort flag that needs to be set in the tor configuration file in order
   for the optimistic beahvior to occur.

   The new SocksPort flag is:

      "OptimisticData" -- Tor will immediately report a successful SOCKS
                          handshake and hang up if it gets an end cell
                          rather than a connected cell.

3. Application Error Handling

   This behavior will cause the application talking to Tor to potentially
   behave abnormally as it will believe that it has completed a TCP
   connection. If no such connection can be made by tor, the program may
   behave in a way that does not accurately represent the behavior of the
   connection.

   Applications SHOULD test various connection failure modes and ensure their
   behavior is acceptable before using this feature. 

References:

[RFC1928] https://www.ietf.org/rfc/rfc1928.txt

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190702134235</emailId><senderName>Mark Smith</senderName><senderEmail>mcs@pearlcrescent.com</senderEmail><timestampReceived>2019-07-02 13:42:35-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On 6/21/19 8:50 PM, Tom Ritter wrote:
&gt; The attached is a draft proposal for allowing tor to lie to an
&gt; application about the SOCKS connection enabling it to send data
&gt; optimistically.
&gt; 
&gt; It's going to need some fleshing out in ways I am not familiar with,
&gt; but I wanted to get something out to start as we think that this is
&gt; probably the best path forward for bringing back Tor Browser's
&gt; optimistic SOCKS behavior.

I am not sure what to do about it, but I think the approach you describe
will break the method that Tor Browser just started to use to detect
that an onion service requires client authentication (see
https://trac.torproject.org/projects/tor/ticket/30000 and associated
child tickets). The tldr is that we rely on receiving a new error code
from the SOCKS connect request.

-- 
Mark Smith
Pearl Crescent
http://pearlcrescent.com/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190702142358</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-07-02 14:23:58-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Tue, 2 Jul 2019 at 13:42, Mark Smith &lt;mcs@pearlcrescent.com&gt; wrote:
&gt;
&gt; On 6/21/19 8:50 PM, Tom Ritter wrote:
&gt; &gt; The attached is a draft proposal for allowing tor to lie to an
&gt; &gt; application about the SOCKS connection enabling it to send data
&gt; &gt; optimistically.
&gt; &gt;
&gt; &gt; It's going to need some fleshing out in ways I am not familiar with,
&gt; &gt; but I wanted to get something out to start as we think that this is
&gt; &gt; probably the best path forward for bringing back Tor Browser's
&gt; &gt; optimistic SOCKS behavior.
&gt;
&gt; I am not sure what to do about it, but I think the approach you describe
&gt; will break the method that Tor Browser just started to use to detect
&gt; that an onion service requires client authentication (see
&gt; https://trac.torproject.org/projects/tor/ticket/30000 and associated
&gt; child tickets). The tldr is that we rely on receiving a new error code
&gt; from the SOCKS connect request.

Hm, yes.

We could not use optimistic data for onions...

Or instead of using a SOCKs error code we could return a special type
of error (encapsulated in a HTTP response) recognizable by Tor
Browser. Something like "If the response to an onion request is status
code 407 Proxy Authentication Required (or 4xx whatever) then the
Browser should prompt for onion service client authentication and
retry the request with that."

Or... something else?  Very interested in what David/asn think since
they worked on #30382 ...

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190626085210</emailId><senderName>liuyihen</senderName><senderEmail>liuyihen@gmail.com</senderEmail><timestampReceived>2019-06-26 08:52:10-0400</timestampReceived><subject>[tor-dev] tor writen in golang</subject><body>

[Attachment #2 (multipart/alternative)]


Hi tor-dev@mailing list,
I want to know is there somebody has been re-writing tor in golang? or is
there a repo have been opened?

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi tor-dev@mailing list,  &lt;div&gt;I want to know is there somebody has \
been re-writing tor in golang? or is there a repo have been opened?&lt;br \
clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190805183327</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-08-05 18:33:27-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; Or... something else?  Very interested in what David/asn think since
&gt; they worked on #30382 ...

I never updated this thread after discussing with people on irc.

So the implementation of
SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
done. David (if I'm summarizing correctly) felt that the SOCKS Error
code approach may not be the best choice given our desire for
optimistic data; but felt it was up to the Tor Browser team to decide.

In the goal of something that works for 90%+ of use case today, the
rest later, I'll propose the following:

In little-t tor, detect if we're connecting to an onion site, and if
so do not early-report SOCKS connection.

Another ugly option is to early-report a successful SOCKS connection
even for onion sites, and if we later receive an auth request, send an
HTTP error code like 407 that we then detect over in the browser and
use to prompt the user. I don't like this because it is considerably
more work (I expect), horrible ugly layering violations, and I don't
think it will work for https://onion links.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190927173531</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-09-27 17:35:31-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Mon, 5 Aug 2019 at 18:33, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;
&gt; On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; Or... something else?  Very interested in what David/asn think since
&gt; &gt; they worked on #30382 ...
&gt;
&gt; I never updated this thread after discussing with people on irc.
&gt;
&gt; So the implementation of
&gt; SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
&gt; done. David (if I'm summarizing correctly) felt that the SOCKS Error
&gt; code approach may not be the best choice given our desire for
&gt; optimistic data; but felt it was up to the Tor Browser team to decide.
&gt;
&gt; In the goal of something that works for 90%+ of use case today, the
&gt; rest later, I'll propose the following:
&gt;
&gt; In little-t tor, detect if we're connecting to an onion site, and if
&gt; so do not early-report SOCKS connection.
&gt;
&gt; Another ugly option is to early-report a successful SOCKS connection
&gt; even for onion sites, and if we later receive an auth request, send an
&gt; HTTP error code like 407 that we then detect over in the browser and
&gt; use to prompt the user. I don't like this because it is considerably
&gt; more work (I expect), horrible ugly layering violations, and I don't
&gt; think it will work for https://onion links.

I attached an updated proposal taking this into account, and I'd like
to request it be entered into torspec's proposals list.

-tom

["xxx-optimistic-socks-in-tor.txt" (text/plain)]

Filename: xxx-optimistic-socks-in-tor.txt
Title: Optimistic SOCKS Data
Author: Tom Ritter
Created: 21-June-2019
Status: Draft
Ticket: #5915

0. Abstract

   We propose that tor should have a SocksPort option that causes it to lie
   to the application that the SOCKS Handshake has succeeded immediately,
   allowing the application to begin sending data optimistically.

1. Introduction

   In the past, Tor Browser had a patch that allowed it to send data
   optimistically. This effectively eliminated a round trip through the
   entire circuit, reducing latency.

   This feature was buggy, and specifically caused problems with MOAT, as
   described in [0] and Tor Messenger as described in [1]. It is possible
   that the other issues observed with it were the same issue, it is
   possible they were different.

   Rather than trying to identify and fix the problem in Tor Browser, an
   alternate idea is to have tor lie to the application, causing it to send
   the data optimistically. This can benefit all users of tor. This
   proposal documents that idea.

   [0] https://trac.torproject.org/projects/tor/ticket/24432#comment:19
   [1] https://trac.torproject.org/projects/tor/ticket/19910#comment:3

2. Proposal

2.1. Behavior

   When the SocksPort flag defined below is present, Tor will immediately
   report a successful SOCKS handshake subject for non-onion connections.
   If, later, tor recieves an end cell rather than a connected cell, it
   will hang up the SOCKS connection.

   The requirement to omit this for onion connections is because in
   #30382 we implemented a mechanism to return a special SOCKS error code
   if we are connecting to an onion site that requires authentication.
   Returning an early success would prevent this from working.

   Redesigning the mechanism to communicate auth-required onion sites to
   the browser, while also supporting optimistic data, are left to a future
   proposal.

2.2. New SocksPort Flag

   In order to have backward compatibility with third party applications that
   do not support or do not want to use optimistic data, we propose a new
   SocksPort flag that needs to be set in the tor configuration file in order
   for the optimistic beahvior to occur.

   The new SocksPort flag is:

      "OptimisticData" -- Tor will immediately report a successful SOCKS
                          handshake subject for non-onion connections and
                          hang up if it gets an end cell rather than a
                          connected cell.

3. Application Error Handling

   This behavior will cause the application talking to Tor to potentially
   behave abnormally as it will believe that it has completed a TCP
   connection. If no such connection can be made by tor, the program may
   behave in a way that does not accurately represent the behavior of the
   connection.

   Applications SHOULD test various connection failure modes and ensure their
   behavior is acceptable before using this feature. 

References:

[RFC1928] https://www.ietf.org/rfc/rfc1928.txt

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191002174055</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-10-02 17:40:55-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Fri, Sep 27, 2019 at 1:35 PM Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;
&gt; On Mon, 5 Aug 2019 at 18:33, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt;
&gt; &gt; On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt; Or... something else?  Very interested in what David/asn think since
&gt; &gt; &gt; they worked on #30382 ...
&gt; &gt;
&gt; &gt; I never updated this thread after discussing with people on irc.
&gt; &gt;
&gt; &gt; So the implementation of
&gt; &gt; SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
&gt; &gt; done. David (if I'm summarizing correctly) felt that the SOCKS Error
&gt; &gt; code approach may not be the best choice given our desire for
&gt; &gt; optimistic data; but felt it was up to the Tor Browser team to decide.
&gt; &gt;
&gt; &gt; In the goal of something that works for 90%+ of use case today, the
&gt; &gt; rest later, I'll propose the following:
&gt; &gt;
&gt; &gt; In little-t tor, detect if we're connecting to an onion site, and if
&gt; &gt; so do not early-report SOCKS connection.
&gt; &gt;
&gt; &gt; Another ugly option is to early-report a successful SOCKS connection
&gt; &gt; even for onion sites, and if we later receive an auth request, send an
&gt; &gt; HTTP error code like 407 that we then detect over in the browser and
&gt; &gt; use to prompt the user. I don't like this because it is considerably
&gt; &gt; more work (I expect), horrible ugly layering violations, and I don't
&gt; &gt; think it will work for https://onion links.
&gt;
&gt; I attached an updated proposal taking this into account, and I'd like
&gt; to request it be entered into torspec's proposals list.

Okay!  This is now proposal 309.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191008194934</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-10-08 19:49:34-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Wed, Oct 2, 2019 at 5:46 PM Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;
&gt; On Fri, Sep 27, 2019 at 1:35 PM Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt;
&gt; &gt; On Mon, 5 Aug 2019 at 18:33, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt;
&gt; &gt; &gt; On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt; &gt; Or... something else?  Very interested in what David/asn think since
&gt; &gt; &gt; &gt; they worked on #30382 ...
&gt; &gt; &gt;
&gt; &gt; &gt; I never updated this thread after discussing with people on irc.
&gt; &gt; &gt;
&gt; &gt; &gt; So the implementation of
&gt; &gt; &gt; SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
&gt; &gt; &gt; done. David (if I'm summarizing correctly) felt that the SOCKS Error
&gt; &gt; &gt; code approach may not be the best choice given our desire for
&gt; &gt; &gt; optimistic data; but felt it was up to the Tor Browser team to decide.
&gt; &gt; &gt;
&gt; &gt; &gt; In the goal of something that works for 90%+ of use case today, the
&gt; &gt; &gt; rest later, I'll propose the following:
&gt; &gt; &gt;
&gt; &gt; &gt; In little-t tor, detect if we're connecting to an onion site, and if
&gt; &gt; &gt; so do not early-report SOCKS connection.
&gt; &gt; &gt;
&gt; &gt; &gt; Another ugly option is to early-report a successful SOCKS connection
&gt; &gt; &gt; even for onion sites, and if we later receive an auth request, send an
&gt; &gt; &gt; HTTP error code like 407 that we then detect over in the browser and
&gt; &gt; &gt; use to prompt the user. I don't like this because it is considerably
&gt; &gt; &gt; more work (I expect), horrible ugly layering violations, and I don't
&gt; &gt; &gt; think it will work for https://onion links.
&gt; &gt;
&gt; &gt; I attached an updated proposal taking this into account, and I'd like
&gt; &gt; to request it be entered into torspec's proposals list.
&gt;
&gt; Okay!  This is now proposal 309.

I went for a walk and I came to the realization that we're going about this (a
little bit) wrong.

The advantage of optimistic data is that application data is available when tor
sends the RELAY_BEGIN cell (therefore it is able to send a RELAY_DATA cell
immediately after the RELAY_BEGIN cell is sent). So, tor doesn't need to reply
immediately, just early enough such that the application can start writing data
on the connection.

For exit connections, Tor should probably reply a success/failure immediately
(where failures result from impossible connection requests or other
early failures).

For onion service connections, tor can reply much later. I might suggest as late
as successfully retrieving the onion service descriptor. Of course,
this will introduce
a race between the application writing data and tor completing the
introduction and
rendezvous, but this may be worth the risk.

In particular, this allows using most of the proposed onion service
error codes in
the SOCKS5 reply. I think the control protocol should still emit event messages
describing the errors, but this will allow using synchronous error
handling, as well.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191009150231</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-10-09 15:02:31-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

[Attachment #2 (multipart/signed)]


On 08 Oct (19:49:34), Matthew Finkel wrote:
&gt; On Wed, Oct 2, 2019 at 5:46 PM Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; &gt;
&gt; &gt; On Fri, Sep 27, 2019 at 1:35 PM Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt;
&gt; &gt; &gt; On Mon, 5 Aug 2019 at 18:33, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt; &gt; &gt; &gt; &gt; Or... something else?  Very interested in what David/asn think since
&gt; &gt; &gt; &gt; &gt; they worked on #30382 ...
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; I never updated this thread after discussing with people on irc.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; So the implementation of
&gt; &gt; &gt; &gt; SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
&gt; &gt; &gt; &gt; done. David (if I'm summarizing correctly) felt that the SOCKS Error
&gt; &gt; &gt; &gt; code approach may not be the best choice given our desire for
&gt; &gt; &gt; &gt; optimistic data; but felt it was up to the Tor Browser team to decide.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; In the goal of something that works for 90%+ of use case today, the
&gt; &gt; &gt; &gt; rest later, I'll propose the following:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; In little-t tor, detect if we're connecting to an onion site, and if
&gt; &gt; &gt; &gt; so do not early-report SOCKS connection.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; Another ugly option is to early-report a successful SOCKS connection
&gt; &gt; &gt; &gt; even for onion sites, and if we later receive an auth request, send an
&gt; &gt; &gt; &gt; HTTP error code like 407 that we then detect over in the browser and
&gt; &gt; &gt; &gt; use to prompt the user. I don't like this because it is considerably
&gt; &gt; &gt; &gt; more work (I expect), horrible ugly layering violations, and I don't
&gt; &gt; &gt; &gt; think it will work for https://onion links.
&gt; &gt; &gt;
&gt; &gt; &gt; I attached an updated proposal taking this into account, and I'd like
&gt; &gt; &gt; to request it be entered into torspec's proposals list.
&gt; &gt;
&gt; &gt; Okay!  This is now proposal 309.
&gt; 
&gt; I went for a walk and I came to the realization that we're going about this
&gt; (a little bit) wrong.
&gt; 
&gt; The advantage of optimistic data is that application data is available when
&gt; tor sends the RELAY_BEGIN cell (therefore it is able to send a RELAY_DATA
&gt; cell immediately after the RELAY_BEGIN cell is sent). So, tor doesn't need
&gt; to reply immediately, just early enough such that the application can start
&gt; writing data on the connection.
&gt; 
&gt; For exit connections, Tor should probably reply a success/failure
&gt; immediately (where failures result from impossible connection requests or
&gt; other early failures).
&gt; 
&gt; For onion service connections, tor can reply much later. I might suggest as
&gt; late as successfully retrieving the onion service descriptor. Of course,
&gt; this will introduce a race between the application writing data and tor
&gt; completing the introduction and rendezvous, but this may be worth the risk.

I think indeed this could work!

Proposal 304 specifies errors up until a rendezvous failure so should we then
only send back the SOCKS reply once the rendezvous circuit has been
established (upon reception of the RENDEZVOUS2 cell)?

It could be seconds in real life before that reply is given back to Tor
Browser so not sure if optimistic data will worth anything there :P ...?

Another option exists: In my experience, failing a rendezvous is much more
rare than failing an introduction. In other words, if the introduction is
successful, chances are very good that you'll rendezvous. Which means that we
could send back the SOCKS reply after a successful introduction and drop the
rdv error from prop304?

&gt; 
&gt; In particular, this allows using most of the proposed onion service error
&gt; codes in the SOCKS5 reply. I think the control protocol should still emit
&gt; event messages describing the errors, but this will allow using synchronous
&gt; error handling, as well.

As we discussed the other day, we have this "Stream ID" problem as in for an
emitted control event (for a stream), TB needs to associate it with the right
tab basically.

We basically have two options here I believe. Either TB sends us a unique
identifier that could become an exported ID on the event by encoding it in the
SOCKS username/password somehow.

Else, tor sends it back to TB within the SOCKS reply. That one leads to a race
where the control event is likely to be fired _before_ the SOCKS reply and
thus TB will have to handle async event vs the SOCKS reply.

Else else, theoritical, maybe the current u+p from TB per tab is already
enough but I doubt since I'm guessing it is the same u+p for two tabs on the
same .onion?

Cheers!
David

-- 
muPNmU1nkiEFKr9f9HH4gmfbJilH9zaFLRGFIqcNBQg=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191010103700</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-10-10 10:37:00-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; On 08 Oct (19:49:34), Matthew Finkel wrote:
&gt;&gt; On Wed, Oct 2, 2019 at 5:46 PM Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt;&gt; &gt;
&gt;&gt; &gt; On Fri, Sep 27, 2019 at 1:35 PM Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; On Mon, 5 Aug 2019 at 18:33, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; On Tue, 2 Jul 2019 at 09:23, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;&gt; &gt; &gt; &gt; &gt; Or... something else?  Very interested in what David/asn think since
&gt;&gt; &gt; &gt; &gt; &gt; they worked on #30382 ...
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; I never updated this thread after discussing with people on irc.
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; So the implementation of
&gt;&gt; &gt; &gt; &gt; SOCKS-error-code-for-an-Onion-Service-needs-auth implementation is
&gt;&gt; &gt; &gt; &gt; done. David (if I'm summarizing correctly) felt that the SOCKS Error
&gt;&gt; &gt; &gt; &gt; code approach may not be the best choice given our desire for
&gt;&gt; &gt; &gt; &gt; optimistic data; but felt it was up to the Tor Browser team to decide.
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; In the goal of something that works for 90%+ of use case today, the
&gt;&gt; &gt; &gt; &gt; rest later, I'll propose the following:
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; In little-t tor, detect if we're connecting to an onion site, and if
&gt;&gt; &gt; &gt; &gt; so do not early-report SOCKS connection.
&gt;&gt; &gt; &gt; &gt;
&gt;&gt; &gt; &gt; &gt; Another ugly option is to early-report a successful SOCKS connection
&gt;&gt; &gt; &gt; &gt; even for onion sites, and if we later receive an auth request, send an
&gt;&gt; &gt; &gt; &gt; HTTP error code like 407 that we then detect over in the browser and
&gt;&gt; &gt; &gt; &gt; use to prompt the user. I don't like this because it is considerably
&gt;&gt; &gt; &gt; &gt; more work (I expect), horrible ugly layering violations, and I don't
&gt;&gt; &gt; &gt; &gt; think it will work for https://onion links.
&gt;&gt; &gt; &gt;
&gt;&gt; &gt; &gt; I attached an updated proposal taking this into account, and I'd like
&gt;&gt; &gt; &gt; to request it be entered into torspec's proposals list.
&gt;&gt; &gt;
&gt;&gt; &gt; Okay!  This is now proposal 309.
&gt;&gt;
&gt;&gt; I went for a walk and I came to the realization that we're going about this
&gt;&gt; (a little bit) wrong.
&gt;&gt;

Thanks for the updates Matt!

&gt;&gt; The advantage of optimistic data is that application data is available when
&gt;&gt; tor sends the RELAY_BEGIN cell (therefore it is able to send a RELAY_DATA
&gt;&gt; cell immediately after the RELAY_BEGIN cell is sent). So, tor doesn't need
&gt;&gt; to reply immediately, just early enough such that the application can start
&gt;&gt; writing data on the connection.
&gt;&gt;
&gt;&gt; For exit connections, Tor should probably reply a success/failure
&gt;&gt; immediately (where failures result from impossible connection requests or
&gt;&gt; other early failures).
&gt;&gt;
&gt;&gt; For onion service connections, tor can reply much later. I might suggest as
&gt;&gt; late as successfully retrieving the onion service descriptor. Of course,
&gt;&gt; this will introduce a race between the application writing data and tor
&gt;&gt; completing the introduction and rendezvous, but this may be worth the risk.
&gt;

So are you suggesting that we can still do SOCKS error codes? But as
David said, some of the errors we care about are after the descriptor
fetch, so how would we do those?

Also, please help me understand the race condition you refer to. I tried
to draw this in a diagram form:
      https://gist.github.com/asn-d6/55fbe7a3d746dc7e00da25d3ce90268a

IIUC, for onions the advantage of opportunistic SOCKS is that we would
send DATA to the service right after finishing rendezvous, whereas right
now we need to do a round-trip with Tor Browser after finishing
rendezvous. Is that right?

If that's the case, then sending the SOCKS reply after the rendezvous
circuit is completed would be the same as the current behavior, and
hence not an optimization, right?

And sending the SOCKS reply after the introduction is completed (as
David is suggesting) would be an optimization indeed, but we lose
errors (we lose the rendezvous failed error, which can occur if the
onion service is under DoS and cannot build new circuits but can still
receive introductions).

What other problems exist here?

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191011063008</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-10-11 06:30:08-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Thu, 10 Oct 2019 at 10:37, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; So are you suggesting that we can still do SOCKS error codes? But as
&gt; David said, some of the errors we care about are after the descriptor
&gt; fetch, so how would we do those?

Only 'X'F3' Onion Service Rendezvous Failed' - right?

I think David is proposing we just don't do that one because in his
experience it's pretty rare.

&gt; Also, please help me understand the race condition you refer to. I tried
&gt; to draw this in a diagram form:
&gt;       https://gist.github.com/asn-d6/55fbe7a3d746dc7e00da25d3ce90268a

I edited this:
https://gist.github.com/tomrittervg/e0552ed007dbe50077528936b09a2eff

Whose first diagram (normal situation) is correct?  Something looks
off in yours... You obviously know tor much better; but latency gain
for optimistic socks doesn't come from sending the HTTP GET to tor
sooner, it comes from sending it to the destination sooner - so I
think that the GET must travel to the destination before the
destination replies with CONNECTED, doesn't it?

Anyway, I tried to illustrate Matts race condition as I understand it;
but I am entirely unconcerned with it. There's no way it's going to
take the browser more time to generate a HTTP GET and send it over
SOCKS than it's going to take tor to roundtrip a rendezvous setup.

&gt; IIUC, for onions the advantage of opportunistic SOCKS is that we would
&gt; send DATA to the service right after finishing rendezvous, whereas right
&gt; now we need to do a round-trip with Tor Browser after finishing
&gt; rendezvous. Is that right?
&gt;
&gt; If that's the case, then sending the SOCKS reply after the rendezvous
&gt; circuit is completed would be the same as the current behavior, and
&gt; hence not an optimization, right?

Correct.

&gt; And sending the SOCKS reply after the introduction is completed (as
&gt; David is suggesting) would be an optimization indeed, but we lose
&gt; errors (we lose the rendezvous failed error, which can occur if the
&gt; onion service is under DoS and cannot build new circuits but can still
&gt; receive introductions).

Yup.

&gt; What other problems exist here?

I'll have to think about it more at a time I'm better equipped to.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191015151754</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-10-15 15:17:54-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

On Fri, Oct 11, 2019 at 6:30 AM Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;
&gt; On Thu, 10 Oct 2019 at 10:37, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; &gt; So are you suggesting that we can still do SOCKS error codes? But as
&gt; &gt; David said, some of the errors we care about are after the descriptor
&gt; &gt; fetch, so how would we do those?
&gt;
&gt; Only 'X'F3' Onion Service Rendezvous Failed' - right?

Correct.

&gt;
&gt; I think David is proposing we just don't do that one because in his
&gt; experience it's pretty rare.
&gt;
&gt; &gt; Also, please help me understand the race condition you refer to. I tried
&gt; &gt; to draw this in a diagram form:
&gt; &gt;       https://gist.github.com/asn-d6/55fbe7a3d746dc7e00da25d3ce90268a
&gt;
&gt; I edited this:
&gt; https://gist.github.com/tomrittervg/e0552ed007dbe50077528936b09a2eff
&gt;
&gt; Whose first diagram (normal situation) is correct?  Something looks
&gt; off in yours... You obviously know tor much better; but latency gain
&gt; for optimistic socks doesn't come from sending the HTTP GET to tor
&gt; sooner, it comes from sending it to the destination sooner - so I
&gt; think that the GET must travel to the destination before the
&gt; destination replies with CONNECTED, doesn't it?

I think Tom's diagram is correct. We're worried about: "Does the
application send the "HTTP GET" bytes before or after tor sends the
RELAY_BEGIN relay cell?" If the application payload arrives before the
RELAY_BEGIN command is sent, then we can send optimistic data --else
we can't. The remaining (open) question is *when* do we send the
application "FAKE SUCCESSFUL SOCKS REPLY". If we send it after
receiving an INTRODUCE_ACK command relay cell, then the application
will almost certainly win the race but it must watch the controller
events for a rendezvous failure. If we send the "fake success socks
reply" after receiving a RENDEZVOUS2 command relay cell, then the
application will likely lose the race because tor will immediately
attach the stream on the circuit and send a RELAY_BEGIN relay cell
(and the application payload will arrive after the stream is
connected).

The optimistic data simply saves us time. The race condition only
exists on the client-side. The application's payload (via optimistic
data) doesn't need to reach the service-side tor client before the
service-side replies with the CONNECTED relay cell. If the rendezvous
circuit is established and the stream is attached, then the
application on the service-side will receive the client-side's payload
and handle it normally.

The main advantage of optimistic data is that we don't wait the full
round-trip time. The RELAY_DATA relay cell is sent immediately after
the RELAY_BEGIN relay cell, so it is already in-flight when the stream
is connected. When this fails, then (I believe) the rendezvous circuit
should be destroyed and the client application's connection with the
SocksPort is closed. This is where we need the unique ID, so we can
correlate the error message from the controller event with the closed
TCP connection. I believe Mark and/or Kathy mentioned how handling
this error case in Tor Browser will be difficult, because the
controller error message may be emitted after Tor Browser handles the
closed connection.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190627215354</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-27 21:53:54-0400</timestampReceived><subject>Re: [tor-dev] Per-peer stream isolation for Bitcoin clients</subject><body>

Hi Jeremy,

&gt; On 28 Jun 2019, at 06:35, Jeremy Rand &lt;jeremyrand@airmail.cc&gt; wrote:
&gt; 
&gt; 2. Per-peer stream isolation prevents a single exit relay from feeding
&gt; the user a chain that's not the longest chain, so it's desirable from a
&gt; Bitcoin security point of view.

Tor itself uses 3 directory guards to make sure that one guard can't
feed it bad data.

If you use one exit, and it happens to be malicious, all your peers are
accessed via that bad exit.

But if you use 8 exits, then it's very unlikely that all of them will be
malicious in exactly the same way. But it makes it 8x more likely that
any one of your exits will be malicious.

It's also worth using multiple circuits for redundancy, so a single exit
can't deny service all 8 of your peers. (As noted on the pull request.)

So it's a tradeoff, based on the protocol. For example:
* If you were mainly worried about exploits, then you'd want one exit.
* If you are worried about short chains or denial of service, then you'd
  want many exits.

If you don't know which one to choose, follow Tor Browser, which uses
many exits.

(The right way to deal with exploits is to fix those bugs, and use coding
practices that make them less likely.)

&gt; 3. Per-peer stream isolation would mean more potential for one of the
&gt; circuits being deanonymizable, via traffic analysis etc.  It's not clear
&gt; to me whether this amount of increased circuits is harmful, or how it
&gt; compares to other common usage of Tor such as Tor Browser (which uses
&gt; first-party stream isolation, so a user with a lot of tabs open may very
&gt; well have 8 or more circuits in use at once).

It's not quite that simple:

If you send traffic from all 8 peers over one circuit, then a pattern might
be visible on you client to guard, and exit to internet connections. That
pattern makes correlation easier.

Using 8 circuits splits the traffic pattern across 8 different exit locations
on the internet, so correlation is harder.

I'd follow Tor Browser on this one, too.

&gt; 4. Per-peer stream isolation puts more load on the Tor network.  It's
&gt; not clear to me whether this increased load (8 circuits instead of 1) is
&gt; so much that it's harmful.

Every Tor client tries to keep 6+ pre-emptive circuits open, so that new
requests have lower latency. So you're really looking at doubling your
circuit load, not multiplying it by 8.

Once the circuits are built, there's not much extra load splitting the
streams across 8 circuits, because it's already split into streams and
cells within the protocol.

And you're right, Tor Browser can use lots more than 8 circuits, so
I wouldn't worry about it.

Do you know how much load Bitcoin places on the Tor network?

If it's a lot, one good answer is to encourage users to run relays,
or to donate to organisations that run relays. (Or donate to Tor,
so we can make the network more efficient.)

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190627220138</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-27 22:01:38-0400</timestampReceived><subject>Re: [tor-dev] Per-peer stream isolation for Bitcoin clients</subject><body>

On Fri, Jun 28, 2019 at 07:53:54AM +1000, teor wrote:
&gt; And you're right, Tor Browser can use lots more than 8 circuits, so
&gt; I wouldn't worry about it.
&gt; 
&gt; Do you know how much load Bitcoin places on the Tor network?
&gt; 
&gt; If it's a lot, one good answer is to encourage users to run relays,
&gt; or to donate to organisations that run relays. (Or donate to Tor,
&gt; so we can make the network more efficient.)

Right -- my first question would be "8 circuits per what?" That is,
how often does it use eight new circuits?

If it makes 8 circuits and then holds them open and uses each of them
for a long period of time, that sounds like a solid win -- you get
isolation between streams with little downside.

If we're talking 8 circuits per new gadget, and the new gadgets are
pretty frequent, then the tradeoff becomes more complicated.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190702135049</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-07-02 13:50:49-0400</timestampReceived><subject>Re: [tor-dev] Per-peer stream isolation for Bitcoin clients</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Thanks everyone for the excellent feedback, that was very helpful in
understanding the issues at play.

s7r:
&gt; But this is not the proper way to use Bitcoin behind Tor. So stream
&gt; isolation for clearnet type circuits shouldn't even be a concern.
&gt; Whonix's tor-service-defaults-torrc chooses to disable automatic
&gt; per-peer stream isolation for Bitcoin's SOCKS port and I think it does
&gt; the right thing, because this is not how Bitcoin should be used behind
&gt; Tor.

Yes, I'm aware that Bitcoin Core supports stream isolation without
relying on a torrc setting.  Even if Whonix is doing the right thing
here, the comments in Whonix's file suggest that they're doing it for
the wrong reason.

It should also be noted that not all Bitcoin clients do what Bitcoin
Core does (and in fact part of the motivation for my inquiry was to
determine if I should be submitting patches to those clients to make
them mimic what Bitcoin Core does).  Using a torrc setting would
probably provide some useful defense-in-depth in case a Bitcoin client
isn't doing stream isolation on its own.

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEVB3fdzAraEcoBtkSs/LRZXhtZXAFAl0bYTcACgkQs/LRZXht
ZXCSeg//Q9HztuCzK8iVNeu193xr711MquKabRUH/d08NRHTFW7Ltuwns31jGPel
JPcX0e01u/2yT7Rzzc2Ryx5JcGHv6kOjOmY2OD3QHnVUHVhZBEyvQtlvYw2SKKli
8nEUmZotLOxv2X3/tc7RgNCHn0982F1BcJRuZHd8KpswV0tcG801HzkZz+W5NJ/4
WQO6VNnYOlv4ARddjVuxWhkqkHACmnQJ/z7nKqO7O2b54gWy7FEPhfWjHsbHPlo8
MaXwQdunOYtkYJ/afQA4bLb7Rmg50xjRzoO1oWK68yKqqX2hOe1dV+WfGak63eR/
eY3xjM6gLqR8jxdtW491BgatAh0hNr7q/V55VEXoMq1g/QL2JW43LhCfJI0SuT+h
K3LVnX9iuq+MIMEHuJ1eVM7rWVO5g2thpFfvnCR82faCUKZa6VRoS/4r1XGqU0rW
1pg1b67Cu4iVVmKdSmlOHDNhk1yZOY5HU3bpM4BeZi/1dqvZG+yOMtVgYGVPl1ma
iXsfMcbTWIXCEAobAanbgG6NEgiUQUCm39yp+mqQErd4VkRc79kCHII4VznjuoZ7
jLpRT28OA6Xgzvby+AfFEXX/Mot2BwX33aoQX4nKk+aWmg1CG6xtbfjLKgRhNsMx
Goca1Cbc8zqsBZzCjOxgDWFSDrj9Yxg5+cn5AG4kAN2M5aVEw6A=
=pE+P
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190626033338</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-26 03:33:38-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Neel,

Thanks for this proposal.

&gt; On 26 Jun 2019, at 11:15, neel@neelc.org wrote:
&gt; 
&gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt; 
&gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative to Prop299 \
&gt; as requested here: https://trac.torproject.org/projects/tor/ticket/29801 
&gt; The GitHub pull request is here: https://github.com/torproject/torspec/pull/87

Here's the proposal content, with my comments:

&gt; Filename: 306-ipv6-happy-eyeballs.txt
&gt; Title: A Tor Implementation of IPv6 Happy Eyeballs
&gt; 
&gt; Author: Neel Chauhan
&gt; 
&gt; Created: 25-Jun-2019
&gt; 
Supercedes: 299
&gt; Status: Open
&gt; 
&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/29801
&gt; 
&gt; 
&gt; 
&gt; 1. Introduction
&gt; 
&gt; 
&gt; 
&gt; As IPv4 address space becomes scarce, ISPs and organizations will deploy
&gt; 
&gt; IPv6 in their networks. Right now, Tor clients connect to guards using
&gt; 
&gt; IPv4 connectivity by default.
&gt; 
&gt; 
&gt; 
&gt; When networks first transition to IPv6, both IPv4 and IPv6 will be enabled
&gt; 
&gt; on most networks in a so-called "dual-stack" configuration. This is to not
&gt; 
&gt; break existing IPv4-only applications while enabling IPv6 connectivity.
&gt; 
&gt; However, IPv6 connectivity may be unreliable and clients should be able
&gt; 
&gt; to connect to the guard using the most reliable technology, whether IPv4
&gt; 
&gt; or IPv6.
&gt; 
&gt; 
&gt; 
&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort which
&gt; 
&gt; lets a client randomly choose between IPv4 or IPv6. However, this
&gt; 
&gt; random decision does not take into account unreliable connectivity
&gt; 
&gt; or falling back to the competing IP version should one be unreliable
&gt; 
&gt; or unavailable.
&gt; 
&gt; 
&gt; 
&gt; One way to select between IPv4 and IPv6 on a dual-stack network is a
&gt; 
&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a client
&gt; 
&gt; attempts an IP family, whether IPv4 or IPv6. Should it work, the client
&gt; 
&gt; sticks with the working IP family. Otherwise, the client attempts the
&gt; 
&gt; opposing version. This means if a dual-stack client has both IPv4 and
&gt; 
&gt; IPv6, and IPv6 is unreliable, the client uses IPv4, and vice versa.
&gt; 
&gt; 
&gt; 
&gt; In Proposal 299, we have attempted a IP fallback mechanism using failure
&gt; 
&gt; counters and preferring IPv4 and IPv6 based on the state of the counters.
&gt; 
&gt; However, Prop299 was not standard Happy Eyeballs and an alternative,
&gt; 
&gt; standards-compliant proposal was requested in [P299-TRAC] to avoid issues
&gt; 
&gt; from complexity caused by randomness.
&gt; 
&gt; 
&gt; 
&gt; This proposal describes a Tor implementation of Happy Eyeballs and is
&gt; 
&gt; intended as a successor to Proposal 299.
&gt; 
&gt; 
&gt; 
&gt; 2. Address Selection
&gt; 
&gt; 
&gt; 
&gt; To be able to handle Happy Eyeballs in Tor, we will need to modify the
&gt; 
&gt; data structures used for connections to guards, namely the extend info
&gt; 
&gt; structure.
&gt; 
&gt; 
&gt; 
&gt; The extend info structure should contain both an IPv4 and an IPv6 address.
&gt; 
&gt; This will allow us to try IPv4 and the IPv6 addresses should both be
&gt; 
&gt; available on a relay and the client is dual-stack.
&gt; 
&gt; 
&gt; 
&gt; When parsing relay descriptors and filling in the extend info data
&gt; 
&gt; structure, we need to fill in both the IPv4 and IPv6 address if they both
&gt; 
&gt; are available. If only one family is available for a relay (IPv4 or IPv6),
&gt; 
&gt; we should fill in the address for available family and leave the opposing
&gt; 
&gt; family null.
&gt; 
When we implement this feature in tor, it would be a good idea to call the
two addresses "preferred" and "alternate" address. With this design,
the low-level connection code doesn't have to know about reachable
addresses, or IPv4/IPv6 preferences. It just has to try them in order.
&gt; 3. Connecting To A Relay
&gt; 
&gt; 
&gt; 
&gt; When a client connects to a guard using an extend info data structure, we
&gt; 
&gt; should first check if there is an existing authenticated connection. If
&gt; 
&gt; there is, we should use it.
&gt; 
Tor's code already does this check: we won't need to change it.
&gt; If there is no existing authenticated connection for an extend info, we
&gt; 
&gt; should attempt to connect using the first available, allowed, and preferred
&gt; 
&gt; address. At the time of writing, this is IPv4.
&gt; 
That's not quite true: most clients use IPv4 by default, but they can be
configured to prefer IPv6, or only allow certain addresses. And bridge clients
automatically use IPv6 if they are configured with an IPv6 bridge.
&gt; We should also schedule a timer for connecting using the other address
&gt; 
&gt; should one be available and allowed, and the first attempted version
&gt; 
&gt; fails. This should be higher than most client's successful TLS
&gt; 
&gt; authentication time. I propose that the timer is 15 seconds. The reason
&gt; 
&gt; for this is to accommodate high-latency connections such as dial-up and
&gt; 
&gt; satellite.
&gt; 
In the worst case scenario, users see Tor Browser hang for 15 seconds
before it makes a successful connection. That's not acceptable.

Depending on their location, most tor clients authenticate to the first
hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
https://metrics.torproject.org/onionperf-buildtimes.html

In RFC 8305, the default delay is 250 milliseconds, and the maximum
delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor link
authentication.
https://tools.ietf.org/html/rfc8305#section-8

(This delay will mainly affect initial bootstrap, because all of Tor's
other connections are pre-emptive, or re-used.)

A small number of clients may do wasted authentication.
That's ok. Tor already does multiple bootstrap and guard connections.

We have talked about this design in the team over the last few months.
Our key insights are that:
* TCP connections are cheap, but TLS is expensive
* most failed TCP connections fail immediately in the kernel, some
  fail quickly with a response from the router, and others are blackholed
  and time out
* it's unlikely that a client will fail to authenticate to a relay over one
  IP version, but succeed over the other IP version, because the directory
  authorities authenticate to each relay when they check reachability
* some censorship systems only break authentication over IPv4,
  but they are rare

So here are some alternative designs:

1. Tor connects to the preferred address and tries to authenticate.
   On failure, or after a 1.5 second delay, it connects to the alternate address
   and tries to authenticate.
   On the first successful authentication, it closes the other connection.

This design places the least connection load on the network, but might add
a bit of extra TLS load.

2. Tor connects via TCP to the preferred address.
   On failure, or after a 250 ms delay, it connects via TCP to the alternate
   address.
   On the first TCP success, tor attempts to authenticate immediately.
   On authentication failure, or after a 1.5 s delay, tor attempts to
   authenticate over the second TCP connection.
   On the first successful authentication, it closes the other connection.

This design is the most reliable for clients, but it also puts a bit more
connection load on dual-stack guards and authorities.

3. Tor connects via TCP to the preferred address.
   On failure, or after a 250ms delay, it connects via TCP to the alternate
   address.
   On the first TCP success, tor attempts to authenticate, and closes the
   other connection.

This design looks similar to a web browser's implementation of Happy
Eyeballs, because it closely follows the RFC. That might help hide tor
from censors. It adds some extra connection load, but no extra TLS load.

I suggest that we put all 3 alternative designs in the proposal, but start
by implementing and testing alternative 1.

When we implement this code, let's put the happy eyeballs part in a
separate module, as much as possible. That helps us review the code,
and make sure it has good test coverage. It also stops existing files and
functions getting too big.
&gt; 4. Handling Connection Successes And Failures
&gt; 
&gt; 
&gt; 
&gt; Should a connection to a guard succeed and is authenticated via TLS, we
&gt; 
&gt; can then use the connection. In this case, we should cancel all other
&gt; 
&gt; connection timers and in-progress connections. Cancelling the timers is
&gt; 
&gt; so we don't attempt new unnecessary connections when our existing
&gt; 
&gt; connection is successful, preventing denial-of-service risks.
&gt; 
&gt; 
&gt; 
&gt; However, if we fail all available and allowed connections, we should tell
&gt; 
&gt; the rest of Tor that the connection has failed. This is so we can attempt
&gt; 
&gt; another guard relay.
&gt; 
&gt; 
&gt; 
&gt; 5. Acknowledgments
&gt; 
&gt; 
&gt; 
&gt; Thank you so much to teor for the discussion of the happy eyeballs proposal.
&gt; 
&gt; I wouldn't have been able to do this has it not been for your help.
&gt; 
&gt; 
&gt; 
&gt; 6. Appendix
&gt; 
&gt; [P299-TRAC]: https://trac.torproject.org/projects/tor/ticket/29801
&gt; 

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi \
Neel,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks for this \
proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 26 Jun 2019, at 11:15, &lt;a \
href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I have a new proposal: A Tor \
Implementation of IPv6 Happy Eyeballs&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;This is to \
implement Tor IPv6 Happy Eyeballs and acts as an alternative to Prop299 as requested \
here: &lt;a href="https://trac.torproject.org/projects/tor/ticket/29801"&gt;https://trac.torproject.org/projects/tor/ticket/29801&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;The \
GitHub pull request is here: &lt;a \
href="https://github.com/torproject/torspec/pull/87"&gt;https://github.com/torproject/torspec/pull/87&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Here's \
the proposal content, with my \
comments:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Filename: \
306-ipv6-happy-eyeballs.txt&lt;/span&gt;&lt;/div&gt;&lt;div&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;Title: A Tor Implementation of IPv6 \
Happy Eyeballs&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;Author: Neel Chauhan&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;Created: \
25-Jun-2019&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Supercedes: \
299&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div&gt;&lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;Status: Open&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;Ticket: \
&lt;a href="https://trac.torproject.org/projects/tor/ticket/29801"&gt;https://trac.torproject.org/projects/tor/ticket/29801&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
 &lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;1. Introduction&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   As IPv4 address space \
becomes scarce, ISPs and organizations will deploy&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   IPv6 in \
their networks. Right now, Tor clients connect to guards using&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   IPv4 connectivity by default.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   When networks first \
transition to IPv6, both IPv4 and IPv6 will be enabled&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   on most \
networks in a so-called "dual-stack" configuration. This is to not&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   break existing IPv4-only applications while enabling IPv6 \
connectivity.&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   However, IPv6 connectivity may be unreliable \
and clients should be able&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   to connect to the \
guard using the most reliable technology, whether IPv4&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   or \
IPv6.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   In ticket #27490, we \
introduced the option ClientAutoIPv6ORPort which&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   lets a \
client randomly choose between IPv4 or IPv6. However, this&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   random decision does not take into account unreliable \
connectivity&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   or falling back to the competing IP version \
should one be unreliable&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   or \
unavailable.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   One way to select \
between IPv4 and IPv6 on a dual-stack network is a&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   so-called \
"Happy Eyeballs" algorithm as per RFC 8305. In one, a client&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   attempts an IP family, whether IPv4 or IPv6. Should it work, the \
client&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, \
255, 255, 0);"&gt;   sticks with the working IP family. Otherwise, the client \
attempts the&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   opposing version. This means if a dual-stack \
client has both IPv4 and&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   IPv6, and IPv6 is \
unreliable, the client uses IPv4, and vice versa.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   In Proposal 299, we \
have attempted a IP fallback mechanism using failure&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   counters \
and preferring IPv4 and IPv6 based on the state of the counters.&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   However, Prop299 was not standard Happy Eyeballs and an \
alternative,&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   standards-compliant proposal was requested in \
[P299-TRAC] to avoid issues&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   from complexity caused \
by randomness.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   This proposal \
describes a Tor implementation of Happy Eyeballs and is&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   intended as a successor to Proposal 299.&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;2. Address Selection&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   To be able to handle \
Happy Eyeballs in Tor, we will need to modify the&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   data \
structures used for connections to guards, namely the extend info&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   structure.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   The extend \
info structure should contain both an IPv4 and an IPv6 address.&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   This will allow us to try IPv4 and the IPv6 addresses should both \
be&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, \
255, 0);"&gt;   available on a relay and the client is dual-stack.&lt;/span&gt;&lt;/p&gt; \
&lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   When parsing relay \
descriptors and filling in the extend info data&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   structure, \
we need to fill in both the IPv4 and IPv6 address if they both&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   are available. If only one family is available for a relay (IPv4 or \
IPv6),&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, \
255, 255, 0);"&gt;   we should fill in the address for available family and \
leave the opposing&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   family \
null.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;When we implement this feature in tor, it \
would be a good idea to call the&lt;/div&gt;&lt;div&gt;two addresses "preferred" and "alternate" \
address. With this design,&lt;/div&gt;&lt;div&gt;the low-level connection code doesn't have to \
know about reachable&lt;/div&gt;&lt;div&gt;addresses, or IPv4/IPv6 preferences. It just has to \
try them in order.&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;3. Connecting To A Relay&lt;/span&gt;&lt;/p&gt; \
&lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   When a client connects \
to a guard using an extend info data structure, we&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   should \
first check if there is an existing authenticated connection. If&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   there is, we should use it.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;Tor's \
code already does this check: we won't need to change it.&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, \
255, 255, 0);"&gt;   If there is no existing authenticated connection for an \
extend info, we&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   should attempt to connect using the first \
available, allowed, and preferred&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   address. At the time \
of writing, this is IPv4.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;That's not quite true: \
most clients use IPv4 by default, but they can be&lt;/div&gt;&lt;div&gt;configured to prefer \
IPv6, or only allow certain addresses. And bridge clients&lt;/div&gt;&lt;div&gt;automatically use \
IPv6 if they are configured with an IPv6 bridge.&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div&gt; \
&lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   We should also schedule a timer for connecting using the other \
address&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, \
255, 255, 0);"&gt;   should one be available and allowed, and the first \
attempted version&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   fails. This should be higher than most client's \
successful TLS&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   authentication time. I propose that the timer \
is 15 seconds. The reason&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   for this is to \
accommodate high-latency connections such as dial-up and&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   satellite.&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;In the worst case \
scenario, users see Tor Browser hang for 15 seconds&lt;/div&gt;&lt;div&gt;before it makes a \
successful connection. That's not acceptable.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Depending on \
their location, most tor clients authenticate to the first&lt;/div&gt;&lt;div&gt;hop within \
0.5-1.5 seconds. So I suggest we use a 1.5 second delay:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://metrics.torproject.org/onionperf-buildtimes.html"&gt;https://metrics.torproject.org/onionperf-buildtimes.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In \
RFC 8305, the default delay is 250 milliseconds, and the maximum&lt;/div&gt;&lt;div&gt;delay is 2 \
seconds. So 1.5 seconds is reasonable for TLS and tor \
link&lt;/div&gt;&lt;div&gt;authentication.&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://tools.ietf.org/html/rfc8305#section-8"&gt;https://tools.ietf.org/html/rfc8305#section-8&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(This \
delay will mainly affect initial bootstrap, because all of Tor's&lt;/div&gt;&lt;div&gt;other \
connections are pre-emptive, or re-used.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A small number of \
clients may do wasted authentication.&lt;/div&gt;&lt;div&gt;That's ok. Tor already does multiple \
bootstrap and guard connections.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We have talked about this \
design in the team over the last few months.&lt;/div&gt;&lt;div&gt;Our key insights are \
that:&lt;/div&gt;&lt;div&gt;* TCP connections are cheap, but TLS is expensive&lt;/div&gt;&lt;div&gt;* most \
failed TCP connections fail immediately in the kernel, some&lt;/div&gt;&lt;div&gt;  fail \
quickly with a response from the router, and others are blackholed&lt;/div&gt;&lt;div&gt;  \
and time out&lt;/div&gt;&lt;div&gt;* it's unlikely that a client will fail to authenticate to a \
relay over one&lt;/div&gt;&lt;div&gt;  IP version, but succeed over the other IP version, \
because the directory&lt;/div&gt;&lt;div&gt;  authorities authenticate to each relay when \
they check reachability&lt;/div&gt;&lt;div&gt;* some censorship systems only break authentication \
over IPv4,&lt;/div&gt;&lt;div&gt;  but they are rare&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So here are \
some alternative designs:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1. Tor connects to the preferred \
address and tries to authenticate.&lt;/div&gt;&lt;div&gt;   On failure, or after a 1.5 \
second delay, it connects to the alternate address&lt;/div&gt;&lt;div&gt;   and tries \
to authenticate.&lt;/div&gt;&lt;div&gt;   On the first successful authentication, it \
closes the other connection.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This design places the least \
connection load on the network, but might add&lt;/div&gt;&lt;div&gt;a bit of extra TLS \
load.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2. Tor connects via TCP to the preferred \
address.&lt;/div&gt;&lt;div&gt;   On failure, or after a 250 ms delay, it connects via \
TCP to the alternate&lt;/div&gt;&lt;div&gt;   address.&lt;/div&gt;&lt;div&gt;   On the \
first TCP success, tor attempts to authenticate immediately.&lt;/div&gt;&lt;div&gt;  \
 On authentication failure, or after a 1.5 s delay, tor attempts \
to&lt;/div&gt;&lt;div&gt;   authenticate over the second TCP \
connection.&lt;/div&gt;&lt;div&gt;   &lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;On the first successful authentication, it closes the other \
connection.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This design is the most reliable for \
clients, but it also puts a bit more&lt;/div&gt;&lt;div&gt;connection load on dual-stack guards \
and authorities.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="background-color: \
&lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;4. \
Handling Connection Successes And Failures&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   Should a connection to \
a guard succeed and is authenticated via TLS, we&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   can then \
use the connection. In this case, we should cancel all other&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   connection timers and in-progress connections. Cancelling the \
timers is&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   so we don't attempt new unnecessary connections \
when our existing&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: \
rgba(255, 255, 255, 0);"&gt;   connection is successful, preventing \
denial-of-service risks.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span \
class="s1" style="background-color: rgba(255, 255, 255, 0);"&gt;   However, if \
we fail all available and allowed connections, we should tell&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   the rest of Tor that the connection has failed. This is so we can \
attempt&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, \
255, 255, 0);"&gt;   another guard relay.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;5. Acknowledgments&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;   Thank you so much to \
teor for the discussion of the happy eyeballs proposal.&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   I wouldn't have been able to do this has it not been for your \
help.&lt;/span&gt;&lt;/p&gt; &lt;p class="p2"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;span class="s1"&gt;&lt;/span&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s1" \
style="background-color: rgba(255, 255, 255, 0);"&gt;6. Appendix&lt;/span&gt;&lt;/p&gt; &lt;p \
class="p1"&gt;&lt;span class="s1" style="background-color: rgba(255, 255, 255, \
0);"&gt;   [P299-TRAC]: &lt;a \
href="https://trac.torproject.org/projects/tor/ticket/29801"&gt;https://trac.torproject.o \
rg/projects/tor/ticket/29801&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190627011015</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-06-27 01:10:15-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi teor,

Thank you so much for your feedback. I have pushed your changes (and 
revert my changes to 000-index.txt) as fixup commits to the GitHub PR.

Could you please review the new changes?

Thank You,

Neel Chauhan

On 2019-06-25 23:33, teor wrote:
&gt; Hi Neel,
&gt; 
&gt; Thanks for this proposal.
&gt; 
&gt; On 26 Jun 2019, at 11:15, neel@neelc.org wrote:
&gt; 
&gt;&gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt;&gt; 
&gt;&gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an
&gt;&gt; alternative to Prop299 as requested here:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt; 
&gt;&gt; The GitHub pull request is here:
&gt;&gt; https://github.com/torproject/torspec/pull/87
&gt; 
&gt; Here's the proposal content, with my comments:
&gt; 
&gt;&gt; Filename: 306-ipv6-happy-eyeballs.txt
&gt;&gt; 
&gt;&gt; Title: A Tor Implementation of IPv6 Happy Eyeballs
&gt;&gt; 
&gt;&gt; Author: Neel Chauhan
&gt;&gt; 
&gt;&gt; Created: 25-Jun-2019
&gt;  Supercedes: 299
&gt; 
&gt;&gt; Status: Open
&gt;&gt; 
&gt;&gt; Ticket: https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt; 
&gt;&gt; 1. Introduction
&gt;&gt; 
&gt;&gt; As IPv4 address space becomes scarce, ISPs and organizations will
&gt;&gt; deploy
&gt;&gt; 
&gt;&gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt;&gt; using
&gt;&gt; 
&gt;&gt; IPv4 connectivity by default.
&gt;&gt; 
&gt;&gt; When networks first transition to IPv6, both IPv4 and IPv6 will
&gt;&gt; be enabled
&gt;&gt; 
&gt;&gt; on most networks in a so-called "dual-stack" configuration. This
&gt;&gt; is to not
&gt;&gt; 
&gt;&gt; break existing IPv4-only applications while enabling IPv6
&gt;&gt; connectivity.
&gt;&gt; 
&gt;&gt; However, IPv6 connectivity may be unreliable and clients should
&gt;&gt; be able
&gt;&gt; 
&gt;&gt; to connect to the guard using the most reliable technology,
&gt;&gt; whether IPv4
&gt;&gt; 
&gt;&gt; or IPv6.
&gt;&gt; 
&gt;&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt;&gt; which
&gt;&gt; 
&gt;&gt; lets a client randomly choose between IPv4 or IPv6. However, this
&gt;&gt; 
&gt;&gt; 
&gt;&gt; random decision does not take into account unreliable
&gt;&gt; connectivity
&gt;&gt; 
&gt;&gt; or falling back to the competing IP version should one be
&gt;&gt; unreliable
&gt;&gt; 
&gt;&gt; or unavailable.
&gt;&gt; 
&gt;&gt; One way to select between IPv4 and IPv6 on a dual-stack network
&gt;&gt; is a
&gt;&gt; 
&gt;&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt;&gt; client
&gt;&gt; 
&gt;&gt; attempts an IP family, whether IPv4 or IPv6. Should it work, the
&gt;&gt; client
&gt;&gt; 
&gt;&gt; sticks with the working IP family. Otherwise, the client attempts
&gt;&gt; the
&gt;&gt; 
&gt;&gt; opposing version. This means if a dual-stack client has both IPv4
&gt;&gt; and
&gt;&gt; 
&gt;&gt; IPv6, and IPv6 is unreliable, the client uses IPv4, and vice
&gt;&gt; versa.
&gt;&gt; 
&gt;&gt; In Proposal 299, we have attempted a IP fallback mechanism using
&gt;&gt; failure
&gt;&gt; 
&gt;&gt; counters and preferring IPv4 and IPv6 based on the state of the
&gt;&gt; counters.
&gt;&gt; 
&gt;&gt; However, Prop299 was not standard Happy Eyeballs and an
&gt;&gt; alternative,
&gt;&gt; 
&gt;&gt; standards-compliant proposal was requested in [P299-TRAC] to
&gt;&gt; avoid issues
&gt;&gt; 
&gt;&gt; from complexity caused by randomness.
&gt;&gt; 
&gt;&gt; This proposal describes a Tor implementation of Happy Eyeballs
&gt;&gt; and is
&gt;&gt; 
&gt;&gt; intended as a successor to Proposal 299.
&gt;&gt; 
&gt;&gt; 2. Address Selection
&gt;&gt; 
&gt;&gt; To be able to handle Happy Eyeballs in Tor, we will need to
&gt;&gt; modify the
&gt;&gt; 
&gt;&gt; data structures used for connections to guards, namely the extend
&gt;&gt; info
&gt;&gt; 
&gt;&gt; structure.
&gt;&gt; 
&gt;&gt; The extend info structure should contain both an IPv4 and an IPv6
&gt;&gt; address.
&gt;&gt; 
&gt;&gt; This will allow us to try IPv4 and the IPv6 addresses should both
&gt;&gt; be
&gt;&gt; 
&gt;&gt; available on a relay and the client is dual-stack.
&gt;&gt; 
&gt;&gt; When parsing relay descriptors and filling in the extend info
&gt;&gt; data
&gt;&gt; 
&gt;&gt; structure, we need to fill in both the IPv4 and IPv6 address if
&gt;&gt; they both
&gt;&gt; 
&gt;&gt; are available. If only one family is available for a relay (IPv4
&gt;&gt; or IPv6),
&gt;&gt; 
&gt;&gt; we should fill in the address for available family and leave the
&gt;&gt; opposing
&gt;&gt; 
&gt;&gt; family null.
&gt; 
&gt; When we implement this feature in tor, it would be a good idea to call
&gt; the
&gt; two addresses "preferred" and "alternate" address. With this design,
&gt; the low-level connection code doesn't have to know about reachable
&gt; addresses, or IPv4/IPv6 preferences. It just has to try them in order.
&gt; 
&gt;&gt; 3. Connecting To A Relay
&gt;&gt; 
&gt;&gt; When a client connects to a guard using an extend info data
&gt;&gt; structure, we
&gt;&gt; 
&gt;&gt; should first check if there is an existing authenticated
&gt;&gt; connection. If
&gt;&gt; 
&gt;&gt; there is, we should use it.
&gt; 
&gt; Tor's code already does this check: we won't need to change it.
&gt; 
&gt;&gt; If there is no existing authenticated connection for an extend
&gt;&gt; info, we
&gt;&gt; 
&gt;&gt; should attempt to connect using the first available, allowed, and
&gt;&gt; preferred
&gt;&gt; 
&gt;&gt; address. At the time of writing, this is IPv4.
&gt; 
&gt; That's not quite true: most clients use IPv4 by default, but they can
&gt; be
&gt; configured to prefer IPv6, or only allow certain addresses. And bridge
&gt; clients
&gt; automatically use IPv6 if they are configured with an IPv6 bridge.
&gt; 
&gt;&gt; We should also schedule a timer for connecting using the other
&gt;&gt; address
&gt;&gt; 
&gt;&gt; should one be available and allowed, and the first attempted
&gt;&gt; version
&gt;&gt; 
&gt;&gt; fails. This should be higher than most client's successful TLS
&gt;&gt; 
&gt;&gt; authentication time. I propose that the timer is 15 seconds. The
&gt;&gt; reason
&gt;&gt; 
&gt;&gt; for this is to accommodate high-latency connections such as
&gt;&gt; dial-up and
&gt;&gt; 
&gt;&gt; satellite.
&gt; 
&gt; In the worst case scenario, users see Tor Browser hang for 15 seconds
&gt; before it makes a successful connection. That's not acceptable.
&gt; 
&gt; Depending on their location, most tor clients authenticate to the
&gt; first
&gt; hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
&gt; https://metrics.torproject.org/onionperf-buildtimes.html
&gt; 
&gt; In RFC 8305, the default delay is 250 milliseconds, and the maximum
&gt; delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor link
&gt; authentication.
&gt; https://tools.ietf.org/html/rfc8305#section-8
&gt; 
&gt; (This delay will mainly affect initial bootstrap, because all of Tor's
&gt; other connections are pre-emptive, or re-used.)
&gt; 
&gt; A small number of clients may do wasted authentication.
&gt; That's ok. Tor already does multiple bootstrap and guard connections.
&gt; 
&gt; We have talked about this design in the team over the last few months.
&gt; Our key insights are that:
&gt; * TCP connections are cheap, but TLS is expensive
&gt; * most failed TCP connections fail immediately in the kernel, some
&gt;   fail quickly with a response from the router, and others are
&gt; blackholed
&gt;   and time out
&gt; * it's unlikely that a client will fail to authenticate to a relay
&gt; over one
&gt;   IP version, but succeed over the other IP version, because the
&gt; directory
&gt;   authorities authenticate to each relay when they check reachability
&gt; * some censorship systems only break authentication over IPv4,
&gt;   but they are rare
&gt; 
&gt; So here are some alternative designs:
&gt; 
&gt; 1. Tor connects to the preferred address and tries to authenticate.
&gt;    On failure, or after a 1.5 second delay, it connects to the
&gt; alternate address
&gt;    and tries to authenticate.
&gt;    On the first successful authentication, it closes the other
&gt; connection.
&gt; 
&gt; This design places the least connection load on the network, but might
&gt; add
&gt; a bit of extra TLS load.
&gt; 
&gt; 2. Tor connects via TCP to the preferred address.
&gt;    On failure, or after a 250 ms delay, it connects via TCP to the
&gt; alternate
&gt;    address.
&gt;    On the first TCP success, tor attempts to authenticate immediately.
&gt;    On authentication failure, or after a 1.5 s delay, tor attempts to
&gt;    authenticate over the second TCP connection.
&gt;    On the first successful authentication, it closes the other
&gt; connection.
&gt; 
&gt; This design is the most reliable for clients, but it also puts a bit
&gt; more
&gt; connection load on dual-stack guards and authorities.
&gt; 
&gt; 3. Tor connects via TCP to the preferred address.
&gt;    On failure, or after a 250ms delay, it connects via TCP to the
&gt; alternate
&gt;    address.
&gt;    On the first TCP success, tor attempts to authenticate, and closes
&gt; the
&gt;    other connection.
&gt; 
&gt; This design looks similar to a web browser's implementation of Happy
&gt; Eyeballs, because it closely follows the RFC. That might help hide tor
&gt; from censors. It adds some extra connection load, but no extra TLS
&gt; load.
&gt; 
&gt; I suggest that we put all 3 alternative designs in the proposal, but
&gt; start
&gt; by implementing and testing alternative 1.
&gt; 
&gt; When we implement this code, let's put the happy eyeballs part in a
&gt; separate module, as much as possible. That helps us review the code,
&gt; and make sure it has good test coverage. It also stops existing files
&gt; and
&gt; functions getting too big.
&gt; 
&gt;&gt; 4. Handling Connection Successes And Failures
&gt;&gt; 
&gt;&gt; Should a connection to a guard succeed and is authenticated via
&gt;&gt; TLS, we
&gt;&gt; 
&gt;&gt; can then use the connection. In this case, we should cancel all
&gt;&gt; other
&gt;&gt; 
&gt;&gt; connection timers and in-progress connections. Cancelling the
&gt;&gt; timers is
&gt;&gt; 
&gt;&gt; so we don't attempt new unnecessary connections when our existing
&gt;&gt; 
&gt;&gt; 
&gt;&gt; connection is successful, preventing denial-of-service risks.
&gt;&gt; 
&gt;&gt; However, if we fail all available and allowed connections, we
&gt;&gt; should tell
&gt;&gt; 
&gt;&gt; the rest of Tor that the connection has failed. This is so we can
&gt;&gt; attempt
&gt;&gt; 
&gt;&gt; another guard relay.
&gt;&gt; 
&gt;&gt; 5. Acknowledgments
&gt;&gt; 
&gt;&gt; Thank you so much to teor for the discussion of the happy
&gt;&gt; eyeballs proposal.
&gt;&gt; 
&gt;&gt; I wouldn't have been able to do this has it not been for your
&gt;&gt; help.
&gt;&gt; 
&gt;&gt; 6. Appendix
&gt;&gt; 
&gt;&gt; [P299-TRAC]:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt; 
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190702093913</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-07-02 09:39:13-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

My comments are inline.

&gt; Filename: 306-ipv6-happy-eyeballs.txt Title: A Tor Implementation of
&gt; IPv6 Happy Eyeballs Author: Neel Chauhan Created: 25-Jun-2019 
&gt; Supercedes: 299 Status: Open Ticket:
&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt; 
&gt; 1. Introduction
&gt; 
&gt; As IPv4 address space becomes scarce, ISPs and organizations will
deploy
&gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt; using IPv4 connectivity by default.
&gt; 
&gt; When networks first transition to IPv6, both IPv4 and IPv6 will be
enabled
&gt; on most networks in a so-called "dual-stack" configuration. This is
to not
&gt; break existing IPv4-only applications while enabling IPv6
&gt; connectivity. However, IPv6 connectivity may be unreliable and
&gt; clients should be able to connect to the guard using the most
&gt; reliable technology, whether
IPv4
&gt; or IPv6.

The big problem that happy eyeballs was meant to solve was that often
you might have something announcing an IPv6 prefix but that routing was
not properly configured, so while the operating system thought it had
IPv6 Internet it was actually just broken. In some cases, the IPv6
Internet would be partitioned as there weren't enough backup routes to
fail over to in times of outages. For most purposes, as I understand it,
this means either IPv6 connectivity to a host is there or it's not.
There's not really a middle ground where it sometimes works but is flaky
(i.e. where you can maintain a connection but it has high packet loss).

&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt; which lets a client randomly choose between IPv4 or IPv6. However,
&gt; this random decision does not take into account unreliable
&gt; connectivity or falling back to the competing IP version should one
&gt; be unreliable or unavailable.
&gt; 
&gt; One way to select between IPv4 and IPv6 on a dual-stack network is a 
&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt; client attempts the preferred IP family, whether IPv4 or IPv6. Should
&gt; it work, the client sticks with the preferred IP family. Otherwise,
&gt; the client attempts the alternate version. This means if a dual-stack
&gt; client has both IPv4 and IPv6, and IPv6 is unreliable, preferred or
&gt; not, the client uses IPv4, and vice versa. However, if IPv4 and IPv6
&gt; are both equally reliable, and IPv6 is preferred, we use IPv6.

This sounds like a good candidate for a consensus parameter, such that
we can switch the preference for all clients at once, not just the ones
that have updated to the version we switch the preference in.

There may also be other ordering parameters for the address candidates.
We might want to avoid using IPv6 addresses that are using 6to4 or
Teredo as we *know* those are tunnels and thus have encapsulation
overhead, higher latency, and funnel all the traffic through centralised
(even if distributed) points in the network.

&gt; In Proposal 299, we have attempted a IP fallback mechanism using
failure
&gt; counters and preferring IPv4 and IPv6 based on the state of the
counters.
&gt; However, Prop299 was not standard Happy Eyeballs and an alternative, 
&gt; standards-compliant proposal was requested in [P299-TRAC] to avoid
issues
&gt; from complexity caused by randomness.
&gt; 
&gt; This proposal describes a Tor implementation of Happy Eyeballs and
&gt; is intended as a successor to Proposal 299.
&gt; 
&gt; 2. Address Selection
&gt; 
&gt; To be able to handle Happy Eyeballs in Tor, we will need to modify
&gt; the data structures used for connections to guards, namely the extend
&gt; info structure.
&gt; 
&gt; The extend info structure should contain both an IPv4 and an IPv6
address.
&gt; This will allow us to try IPv4 and the IPv6 addresses should both be 
&gt; available on a relay and the client is dual-stack.

The Happy Eyeballs specification doesn't just talk about having one v4
and one v6 address. In some cases, relays may be multihomed and so may
have multiple v4 or v6 addresses. We should be able to race all the
candidates.

&gt; When parsing relay descriptors and filling in the extend info data 
&gt; structure, we need to fill in both the IPv4 and IPv6 address if
they both
&gt; are available. If only one family is available for a relay (IPv4 or
IPv6),
&gt; we should fill in the address for preferred family and leave the
alternate
&gt; family null.

To match the IETF protocol more closely, we should have a list of
candidate addresses and order them according to our preferences.

&gt; 3. Connecting To A Relay
&gt; 
&gt; If there is an existing authenticated connection, we should use it 
&gt; similar to how we used it pre-Prop306.
&gt; 
&gt; If there is no existing authenticated connection for an extend info, 
&gt; we should attempt to connect using the first available, allowed, and 
&gt; preferred address.
&gt; 
&gt; We should also allow falling back to the alternate address. For
&gt; this, three alternate designs will be given.
&gt; 
&gt; 3.1. Proposed Designs
&gt; 
&gt; This subsection will have three proposed designs for connecting to
relays
&gt; via IPv4 and IPv6 in a Tor implementation of Happy Eyeballs. The
proposed
&gt; designs are as listed as follows:
&gt; 
&gt; * Section 3.1.1: First Successful Authentication
&gt; 
&gt; * Section 3.1.2: TCP Connection to Preferred Address On First
Authenticated
&gt; Connection
&gt; 
&gt; * Section 3.1.3: TCP Connection to Preferred Address On First TCP
Success
&gt; 
&gt; 3.1.1. First Successful Authentication
&gt; 
&gt; In this design, Tor will first connect to the preferred address and 
&gt; attempt to authenticate. After a 1.5 second delay, Tor will connect 
&gt; to the alternate address and try to authenticate. On the first 
&gt; successful authenticated connection, we close the other connection.
&gt; 
&gt; This design places the least connection load on the network, but 
&gt; might add extra TLS load.

The delay seems arbitrary. OnionPerf collects data on latency in the Tor
network, and could be used to inform better timing choices for the best
end user performance (the happiest eyeballs).

If we choose to take this route, we should open new connections with a
timeout of ~250ms, and only change the condition for deciding which is
the connection we will use.

&gt; 3.1.2. TCP Connection to Preferred Address On First Authenticated
Connection
&gt; 
&gt; This design attempts a TCP connection to a preferred address. On a 
&gt; failure or a 250 ms delay, we try the alternative address.
&gt; 
&gt; On the first successful TCP connection Tor attempts to authenticate 
&gt; immediately. On the authentication failure, or a 1.5 second delay, 
&gt; Tor closes the other connection.
&gt; 
&gt; This design is the most reliable for clients, but increases the 
&gt; connection load on dual-stack guards and authorities.

Creating TCP connections is not a huge issue, and we should be racing
the connections with the ~250ms timeout anyway. All the designs will
have this issue.

&gt; 3.1.3. TCP Connection to Preferred Address On First TCP Success
&gt; 
&gt; In this design, we will connect via TCP to the first preferred
&gt; address. On a failure or after a 250 ms delay, we attempt to connect
&gt; via TCP to the alternate address. On a success, Tor attempts to
&gt; authenticate and closes the other connection.
&gt; 
&gt; This design is the closest to RFC 8305 and is similar to how Happy 
&gt; Eyeballs is implemented in a web browser.

This is probably also the "simplest" to implement, as it means that the
happy eyeballs algorithm is contained to the socket handling code.

I don't believe that requiring authentication to complete is going to do
anything more than generate load on relays. Either the packet loss is
high enough that the three way handshake fails, or there is low packet
loss. I don't think the case where requiring an additional few packets
make it through helps you choose a better connection is going to be that
common.

Of course it is always possible to add a "PreferredAddressFamily" option
to torrc for those that know they are on a bad IPv6 network.

&gt; 3.2. Recommendations for Implementation of Section 3.1 Proposals
&gt; 
&gt; We should start with implementing and testing the implementation as 
&gt; described in Section 3.1.1 (First Successful Authentication), and
&gt; then doing the same for the implementations described in 3.1.2 and
&gt; 3.1.3 if desired or required.

I'd want to see some justification with some experimental (or even
anecdotal) data as to why first successful authentication is the way to
go. 3.1.3 is going to be the simpler option and, in my opinion, the best
place to start.

3.1.3 can likely be implemented using exactly the algorithm in section 5
of RFC 8305, excluding portions relating to DNS because we already have
all the candidates from the server descriptor.

&gt; 4. Handling Connection Successes And Failures
&gt; 
&gt; Should a connection to a guard succeed and is authenticated via TLS,
&gt; we can then use the connection. In this case, we should cancel all
&gt; other connection timers and in-progress connections. Cancelling the
&gt; timers is so we don't attempt new unnecessary connections when our
&gt; existing connection is successful, preventing denial-of-service
&gt; risks.
&gt; 
&gt; However, if we fail all available and allowed connections, we
should tell
&gt; the rest of Tor that the connection has failed. This is so we can
attempt
&gt; another guard relay.

Some issues that come to mind:

- I wonder how many relay IPv6 addresses are actually using tunnels. At
the levels of throughput they use, that overhead adds up. What is the
additional bandwidth cost and what is the impact of reduced MSS?
- What are the tunables? RFC8305 has some that would be applicable, and
probably all of them could be consensus parameters if we wanted to tune
them:
* First Address Family Count
* Connection Attempt Delay
* Minimum Connection Attempt Delay
* Maximum Connection Attempt Delay
- How do we know what is going on? We do not collect metrics from
clients about their usage, but we do collect metrics from relays. Are
there any counters we should be adding to extra info descriptors to help
us see whether or not this is working? Could clients help relays by
reporting that a connection is being closed because they have another
connection? (I don't know the answer, but RFC8305 does explicitly point
out that it is a mitigation technique designed to hide problems from the
user, which means that those problems might come back to haunt us later
if we're not on top of them.)

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190702111542</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-07-02 11:15:42-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/signed)]


Hi Iain,

Thanks for your review!

&gt; On 2 Jul 2019, at 19:39, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hi,
&gt; 
&gt; My comments are inline.
&gt; 
&gt;&gt; Filename: 306-ipv6-happy-eyeballs.txt Title: A Tor Implementation of
&gt;&gt; IPv6 Happy Eyeballs Author: Neel Chauhan Created: 25-Jun-2019
&gt;&gt; Supercedes: 299 Status: Open Ticket:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt; 
&gt;&gt; 1. Introduction
&gt;&gt; 
&gt;&gt; As IPv4 address space becomes scarce, ISPs and organizations will
&gt; deploy
&gt;&gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt;&gt; using IPv4 connectivity by default.
&gt;&gt; 
&gt;&gt; When networks first transition to IPv6, both IPv4 and IPv6 will be
&gt; enabled
&gt;&gt; on most networks in a so-called "dual-stack" configuration. This is
&gt; to not
&gt;&gt; break existing IPv4-only applications while enabling IPv6
&gt;&gt; connectivity. However, IPv6 connectivity may be unreliable and
&gt;&gt; clients should be able to connect to the guard using the most
&gt;&gt; reliable technology, whether
&gt; IPv4
&gt;&gt; or IPv6.
&gt; 
&gt; The big problem that happy eyeballs was meant to solve was that often
&gt; you might have something announcing an IPv6 prefix but that routing was
&gt; not properly configured, so while the operating system thought it had
&gt; IPv6 Internet it was actually just broken. In some cases, the IPv6
&gt; Internet would be partitioned as there weren't enough backup routes to
&gt; fail over to in times of outages. For most purposes, as I understand it,
&gt; this means either IPv6 connectivity to a host is there or it's not.
&gt; There's not really a middle ground where it sometimes works but is flaky
&gt; (i.e. where you can maintain a connection but it has high packet loss).

You're right, I think our worst-case scenario in the current tor
implementation is 100% packet loss, which happens when a firewall is
configured to drop packets.

We should be much clearer about these two scenarios in the proposal
(IPv4/IPv6 failure, and IPv4/IPv6 timeout).

Another common scenario is very slow (DirPort) speeds, as a defence against
old clients on tor26. But the DirPort is out of scope for this proposal.

&gt;&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt;&gt; which lets a client randomly choose between IPv4 or IPv6. However,
&gt;&gt; this random decision does not take into account unreliable
&gt;&gt; connectivity or falling back to the competing IP version should one
&gt;&gt; be unreliable or unavailable.
&gt;&gt; 
&gt;&gt; One way to select between IPv4 and IPv6 on a dual-stack network is a
&gt;&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt;&gt; client attempts the preferred IP family, whether IPv4 or IPv6. Should
&gt;&gt; it work, the client sticks with the preferred IP family. Otherwise,
&gt;&gt; the client attempts the alternate version. This means if a dual-stack
&gt;&gt; client has both IPv4 and IPv6, and IPv6 is unreliable, preferred or
&gt;&gt; not, the client uses IPv4, and vice versa. However, if IPv4 and IPv6
&gt;&gt; are both equally reliable, and IPv6 is preferred, we use IPv6.
&gt; 
&gt; This sounds like a good candidate for a consensus parameter, such that
&gt; we can switch the preference for all clients at once, not just the ones
&gt; that have updated to the version we switch the preference in.

Tor already has these IPv4 and IPv6 torrc options:
* ClientUseIPv4 - use IPv4, on by default
* ClientUseIPv6 - use IPv6, off by default, overridden by explicit bridge,
                  PT, and proxy configs
* ClientPreferIPv6ORPort - prefer IPv6, off by default

At the moment, these options work well:
* ClientUseIPv4 1
  Only use IPv4
  (other options are ignored)
* ClientPreferIPv6ORPort 1
  Try to use IPv6 as much as possible
  (overrides ClientUseIPv4 1 and ClientUseIPv6 0)
* ClientUseIPv4 0
  Only use IPv6
  (other options are ignored)

After this proposal is fully deployed, all valid combinations of
options should work well. In particular:

* the default should be:
  ClientUseIPv4 1
  ClientUseIPv6 1
  ClientPreferIPv6ORPort 0 (for load-balancing reasons)
* tor clients should work with these defaults on IPv4-only, dual-stack,
  and IPv6-only networks (and they should continue to work on all these
  networks if ClientPreferIPv6ORPort is 1)
* we should have consensus parameters for:
  ClientUseIPv6 (emergency use)
  ClientPreferIPv6ORPort (if most of the guards have IPv6, and it's fast)

We should probably ClientUseIPv6 0 in the first alpha release, and then
change the consensus parameter and torrc defaults after we've done enough
testing.

We should be clearer about these torrc options, consensus parameters,
testing, and deployment in the proposal.

&gt; There may also be other ordering parameters for the address candidates.
&gt; We might want to avoid using IPv6 addresses that are using 6to4 or
&gt; Teredo as we *know* those are tunnels and thus have encapsulation
&gt; overhead, higher latency, and funnel all the traffic through centralised
&gt; (even if distributed) points in the network.

I'm not sure how this feature would work: most of the time, when tor is
ordering addresses, it has already chosen a relay. It has exactly one
IPv4 address, and an optional IPv6 address.

This kind of ordering of multiple IPv6 addresses requires a pool of
addresses from multiple relays. It's out of scope for this proposal, but
it could be implemented as part of our pool refactor:
https://trac.torproject.org/projects/tor/ticket/30817#comment:3

&gt;&gt; In Proposal 299, we have attempted a IP fallback mechanism using
&gt; failure
&gt;&gt; counters and preferring IPv4 and IPv6 based on the state of the
&gt; counters.
&gt;&gt; However, Prop299 was not standard Happy Eyeballs and an alternative,
&gt;&gt; standards-compliant proposal was requested in [P299-TRAC] to avoid
&gt; issues
&gt;&gt; from complexity caused by randomness.
&gt;&gt; 
&gt;&gt; This proposal describes a Tor implementation of Happy Eyeballs and
&gt;&gt; is intended as a successor to Proposal 299.
&gt;&gt; 
&gt;&gt; 2. Address Selection
&gt;&gt; 
&gt;&gt; To be able to handle Happy Eyeballs in Tor, we will need to modify
&gt;&gt; the data structures used for connections to guards, namely the extend
&gt;&gt; info structure.
&gt;&gt; 
&gt;&gt; The extend info structure should contain both an IPv4 and an IPv6
&gt; address.
&gt;&gt; This will allow us to try IPv4 and the IPv6 addresses should both be
&gt;&gt; available on a relay and the client is dual-stack.
&gt; 
&gt; The Happy Eyeballs specification doesn't just talk about having one v4
&gt; and one v6 address. In some cases, relays may be multihomed and so may
&gt; have multiple v4 or v6 addresses. We should be able to race all the
&gt; candidates.

Tor relays only advertise 1 IPv4 address:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n392
and 0 or 1 IPv6 address:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n764
in their descriptor.

The consensus only contains 1 IPv4 address:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2297
and 0 or 1 IPv6 address:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2316
per relay.

Adding extra addresses is out of scope for this proposal. We could do
it in a separate proposal, but it might not be the best use of limited
space in the consensus.

(If a relay machine is down, all its addresses are down. It's rare for
a client to not be able to reach one IP address on a relay, but be
able to reach another address on the same relay in the *same* IP
family.)

&gt;&gt; When parsing relay descriptors and filling in the extend info data
&gt;&gt; structure, we need to fill in both the IPv4 and IPv6 address if
&gt; they both
&gt;&gt; are available. If only one family is available for a relay (IPv4 or
&gt; IPv6),
&gt;&gt; we should fill in the address for preferred family and leave the
&gt; alternate
&gt;&gt; family null.
&gt; 
&gt; To match the IETF protocol more closely, we should have a list of
&gt; candidate addresses and order them according to our preferences.

With the current descriptor and consensus implementation, there
will only ever be 1 or 2 addresses in the list for each relay.

(There is one extend info data structure per relay connection
request. Modifying other parts of the tor implementation is out of
scope for this proposal.)

&gt;&gt; 3. Connecting To A Relay
&gt;&gt; 
&gt;&gt; If there is an existing authenticated connection, we should use it
&gt;&gt; similar to how we used it pre-Prop306.
&gt;&gt; 
&gt;&gt; If there is no existing authenticated connection for an extend info,
&gt;&gt; we should attempt to connect using the first available, allowed, and
&gt;&gt; preferred address.
&gt;&gt; 
&gt;&gt; We should also allow falling back to the alternate address. For
&gt;&gt; this, three alternate designs will be given.
&gt;&gt; 
&gt;&gt; 3.1. Proposed Designs
&gt;&gt; 
&gt;&gt; This subsection will have three proposed designs for connecting to
&gt; relays
&gt;&gt; via IPv4 and IPv6 in a Tor implementation of Happy Eyeballs.

Here are the design tradeoffs for this section, which we should add to
the proposal:
* launching multiple TCP connections places up to 2x the socket load
  on dual-stack relays and authorities, because both connections may
  succeed,
* launching multiple TLS connections places up to 2x the CPU load on
  dual-stack relays and authorities, because both connections may
  succeed,
* increasing the delays between connections mitigates these issues,
  but reduces perceived performance, particularly at bootstrap time
  (pre-emptive circuits hide these delays after bootstrap).

&gt;&gt; The
&gt; proposed
&gt;&gt; designs are as listed as follows:
&gt;&gt; 
&gt;&gt; * Section 3.1.1: First Successful Authentication
&gt;&gt; 
&gt;&gt; * Section 3.1.2: TCP Connection to Preferred Address On First
&gt; Authenticated
&gt;&gt; Connection
&gt;&gt; 
&gt;&gt; * Section 3.1.3: TCP Connection to Preferred Address On First TCP
&gt; Success
&gt;&gt; 
&gt;&gt; 3.1.1. First Successful Authentication
&gt;&gt; 
&gt;&gt; In this design, Tor will first connect to the preferred address and
&gt;&gt; attempt to authenticate. After a 1.5 second delay, Tor will connect
&gt;&gt; to the alternate address and try to authenticate. On the first
&gt;&gt; successful authenticated connection, we close the other connection.
&gt;&gt; 
&gt;&gt; This design places the least connection load on the network, but
&gt;&gt; might add extra TLS load.
&gt; 
&gt; The delay seems arbitrary. OnionPerf collects data on latency in the Tor
&gt; network, and could be used to inform better timing choices for the best
&gt; end user performance (the happiest eyeballs).

The 1.5 second delay is based on Onionperf data, and we should reference
the Onionperf figures in the proposal.

See my previous review of an earlier draft of this proposal:

&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt; Depending on their location, most tor clients authenticate to the first
&gt;&gt;&gt; hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
&gt;&gt;&gt; https://metrics.torproject.org/onionperf-buildtimes.html
&gt;&gt;&gt; 
&gt;&gt;&gt; In RFC 8305, the default delay is 250 milliseconds, and the maximum
&gt;&gt;&gt; delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor link
&gt;&gt;&gt; authentication.
&gt;&gt;&gt; https://tools.ietf.org/html/rfc8305#section-8
&gt;&gt;&gt; 
&gt;&gt;&gt; (This delay will mainly affect initial bootstrap, because all of Tor's
&gt;&gt;&gt; other connections are pre-emptive, or re-used.)
&gt;&gt;&gt; 
&gt;&gt;&gt; A small number of clients may do wasted authentication.
&gt;&gt;&gt; That's ok. Tor already does multiple bootstrap and guard connections.


&gt; If we choose to take this route, we should open new connections with a
&gt; timeout of ~250ms, and only change the condition for deciding which is
&gt; the connection we will use.

Tor already does multiple bootstrap and guard connections over IPv4, so
I'm not sure exactly what design you're proposing. Can you give me an
example?

&gt;&gt; 3.1.2. TCP Connection to Preferred Address On First Authenticated
&gt; Connection
&gt;&gt; 
&gt;&gt; This design attempts a TCP connection to a preferred address. On a
&gt;&gt; failure or a 250 ms delay, we try the alternative address.
&gt;&gt; 
&gt;&gt; On the first successful TCP connection Tor attempts to authenticate
&gt;&gt; immediately. On the authentication failure, or a 1.5 second delay,
&gt;&gt; Tor closes the other connection.

Neel, that's not what I wrote in my last email:

&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; 1. Tor connects to the preferred address and tries to authenticate.
&gt;&gt;&gt;    On failure, or after a 1.5 second delay, it connects to the alternate address
&gt;&gt;&gt;    and tries to authenticate.
&gt;&gt;&gt;    On the first successful authentication, it closes the other connection.

A small number of clients will take longer than 1.5 seconds to
authenticate. So we should only close a connection when the other
connection to the relay successfully authenticates.

&gt;&gt; This design is the most reliable for clients, but increases the
&gt;&gt; connection load on dual-stack guards and authorities.
&gt; 
&gt; Creating TCP connections is not a huge issue,

That's not true: Tor's last connection level denial of service event
was November 2017 - February 2018. And there are occasional connection
spikes on authorities and fallbacks.

These connection DoSes need to be mentioned in the proposal.

&gt; and we should be racing
&gt; the connections with the ~250ms timeout anyway. All the designs will
&gt; have this issue.

I'm not sure exactly what issue you're referring to?

&gt;&gt; 3.1.3. TCP Connection to Preferred Address On First TCP Success
&gt;&gt; 
&gt;&gt; In this design, we will connect via TCP to the first preferred
&gt;&gt; address. On a failure or after a 250 ms delay, we attempt to connect
&gt;&gt; via TCP to the alternate address. On a success, Tor attempts to
&gt;&gt; authenticate and closes the other connection.
&gt;&gt; 
&gt;&gt; This design is the closest to RFC 8305 and is similar to how Happy
&gt;&gt; Eyeballs is implemented in a web browser.
&gt; 
&gt; This is probably also the "simplest" to implement, as it means that the
&gt; happy eyeballs algorithm is contained to the socket handling code.
&gt; 
&gt; I don't believe that requiring authentication to complete is going to do
&gt; anything more than generate load on relays. Either the packet loss is
&gt; high enough that the three way handshake fails, or there is low packet
&gt; loss. I don't think the case where requiring an additional few packets
&gt; make it through helps you choose a better connection is going to be that
&gt; common.

Middleboxes that only break IPv4 TLS are rare, but they do exist:

&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; We have talked about this design in the team over the last few months.
&gt;&gt;&gt; Our key insights are that:
&gt;&gt;&gt; * most failed TCP connections fail immediately in the kernel, some
&gt;&gt;&gt;   fail quickly with a response from the router, and others are blackholed
&gt;&gt;&gt;   and time out
&gt;&gt;&gt; * it's unlikely that a client will fail to authenticate to a relay over one
&gt;&gt;&gt;   IP version, but succeed over the other IP version, because the directory
&gt;&gt;&gt;   authorities authenticate to each relay when they check reachability
&gt;&gt;&gt; * some censorship systems only break authentication over IPv4,
&gt;&gt;&gt;   but they are rare

But we still want tor to work by default on those networks, so we should
try IPv4 and IPv6 all the way up to TLS.

&gt; Of course it is always possible to add a "PreferredAddressFamily" option
&gt; to torrc for those that know they are on a bad IPv6 network.

Tor already has this torrc option:
* ClientPreferIPv6ORPort - prefer IPv6, off by default

&gt;&gt; 3.2. Recommendations for Implementation of Section 3.1 Proposals
&gt;&gt; 
&gt;&gt; We should start with implementing and testing the implementation as
&gt;&gt; described in Section 3.1.1 (First Successful Authentication), and
&gt;&gt; then doing the same for the implementations described in 3.1.2 and
&gt;&gt; 3.1.3 if desired or required.
&gt; 
&gt; I'd want to see some justification with some experimental (or even
&gt; anecdotal) data as to why first successful authentication is the way to
&gt; go. 3.1.3 is going to be the simpler option and, in my opinion, the best
&gt; place to start.

It increases the risk of network-wide DoS, and fails to work around some
censored networks. But it might be good for a simple initial test
implementation.

&gt; 3.1.3 can likely be implemented using exactly the algorithm in section 5
&gt; of RFC 8305, excluding portions relating to DNS because we already have
&gt; all the candidates from the server descriptor.

All supported Tor client versions use microdescriptors, not server
descriptors. Since consensus method 28 in tor 0.3.3.6, microdesc
consensuses contain IPv6 addresses. (This is important during bootstrap.)

See proposal 283 for context:
https://gitweb.torproject.org/torspec.git/tree/proposals/283-ipv6-in-micro-consensus.txt

We also intend to use this proposal to connect to the hard-coded fallbacks
and authorities, some of which have IPv6 addresses.

Ideally, we shouldn't need to change any of the code from proposal 283.

But we might need to change the relay selection logic, because otherwise
tor could chose a run of IPv4-only relays, and fail to bootstrap on an
IPv6-only network.

So we need to add another section to the proposal, I guess.

&gt;&gt; 4. Handling Connection Successes And Failures
&gt;&gt; 
&gt;&gt; Should a connection to a guard succeed and is authenticated via TLS,
&gt;&gt; we can then use the connection. In this case, we should cancel all
&gt;&gt; other connection timers and in-progress connections. Cancelling the
&gt;&gt; timers is so we don't attempt new unnecessary connections when our
&gt;&gt; existing connection is successful, preventing denial-of-service
&gt;&gt; risks.
&gt;&gt; 
&gt;&gt; However, if we fail all available and allowed connections, we
&gt; should tell
&gt;&gt; the rest of Tor that the connection has failed. This is so we can
&gt; attempt
&gt;&gt; another guard relay.
&gt; 
&gt; Some issues that come to mind:
&gt; 
&gt; - I wonder how many relay IPv6 addresses are actually using tunnels. At
&gt; the levels of throughput they use, that overhead adds up. What is the
&gt; additional bandwidth cost and what is the impact of reduced MSS?

Here's one way we can mitigate this overhead:
* tor clients prefer IPv4 by default,
* tor uses a 1.5 second delay between IPv4 and IPv6 connections

That way, most clients that can use IPv4, will end up using IPv4, and
avoid this overhead.

The clients that don't will fall into two categories:
* IPv6-only, so the overhead is a small price to pay for connectivity, or
* high-latency, so the overhead might not be noticeable anyway.

&gt; - What are the tunables? RFC8305 has some that would be applicable, and
&gt; probably all of them could be consensus parameters if we wanted to tune
&gt; them:
&gt; * First Address Family Count

This value must be fixed at 1.

Tor's code only connects to 1 relay at a time, and that relay only has
1 address from each family. Increasing the number of addresses per relay
or per "happy eyeballs" attempt is out of scope for this proposal.

&gt; * Connection Attempt Delay

From Onionperf data, I think this should default to 1.5 seconds.

But I'm happy to modify it based on testing, or future Onionperf
measurements. Let's make it a torrc option and consensus parameter?

&gt; * Minimum Connection Attempt Delay

Dynamically adjusting the delay per client is out of scope for this
proposal. It also carries privacy risks, unless we add some jitter.

Let's fix the minimum at 10 milliseconds as recommended in RFC
8305, and adjust it network-wide using the "Connection Attempt Delay"
consensus parameter.

&gt; * Maximum Connection Attempt Delay

As above, but if we choose to include TLS in the delay, we should
set the maximum much higher than the RFC 8305 recommendation of
2 seconds. Let's make it 30 seconds, to match tor's existing timeout.

(Users might want to set the delay this high on very slow networks.)

&gt; - How do we know what is going on? We do not collect metrics from
&gt; clients about their usage, but we do collect metrics from relays. Are
&gt; there any counters we should be adding to extra info descriptors to help
&gt; us see whether or not this is working?

We should definitely be collecting the number of IPv4 and IPv6 connections
to ORPorts. We should probably also distinguish authenticated
(relay, authority reachability) and unauthenticated (client, bridge)
connections.

We should also be including these stats in the heartbeat logs.

We were going to wait for PrivCount for these stats, but we didn't manage
to implement it in the sponsored time we had available. So I don't think
it makes sense to block further stats on PrivCount at this time.

&gt; Could clients help relays by
&gt; reporting that a connection is being closed because they have another
&gt; connection? (I don't know the answer, but RFC8305 does explicitly point
&gt; out that it is a mitigation technique designed to hide problems from the
&gt; user, which means that those problems might come back to haunt us later
&gt; if we're not on top of them.)


Clients don't report circuit or stream close reasons to relays, to
preserve privacy and avoid information leaks.

Clients can't always report connection close reasons over the Tor
protocol, because it sits below the TLS layer, but connections can be
closed at the TCP stage. (Or any subsequent stage, including TLS, link,
or link authentication.)

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAl0bPN4ACgkQEP6qDnB1
ZypT2w/8DcvcALaa2ye3lCOg1rRB0ELZAPI3wkVUmRBef0G3pG61uudPfz8HV3tN
/qsTMoxbeKxL/0thBgRSMMVAilfYkHuXlNOUqYzp3FIzbbsrEnvhesdb+ZVMLP8i
QHDLfqh6q0c6lq63h/Q0ZD5QQvdSBqZ4LbdNkrFu2hVFudHOHEvKLoV/X0DAw8xi
X/ZGBGexue0c5aNOumfIgo+Mjvb3i2sytD8Skhe+spQTZakr9wVmLIYR2gk47oX/
4my9XjTfevWIcRVJDKYqQb8XClP92nU12eHpsi824Kv3leQdlA+eTN5UR60i/CKo
9QTUyjEKEyanG+HfgRb0OxtZD9N5xyuGttgWZCiiWo5IpNT9/DFMmUiuLQTUV8K1
ryhVJO6CzgvQs3++Khq2acYX0RG7wTYU3iPCsf3tuL94v8hXo+Xxcqo9aWhiyDUw
ZLYyxWF1kEhVZPxxbwJIqXojfrnh1AR242obZMMDi0RPdiG4C4vwqXA724Hyk1Rx
dqh0MHX0JyS1Br3AsVa7Qf3by4f1m23pO1NE3t/tfiD4rCI4q/DxctZoDImaeK47
hDVDr0ULsWK3EhepbdkzQCwEGyVYc/Z/pgCuBj0EmYMzpNva3qHAf8hQpZyJbPfk
/1B5erw7Z/lcTuq8Pjd/b80bUXKDVPajpgdh9KeP0rvS1BFRtCM=
=/4OD
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190711003703</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-07-11 00:37:03-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi,

I'm really sorry about the delay in responding to your review. I was 
busy with an internship (unrelated to Tor, but still related to 
security) and was out a lot in my "free time".

I have implemented your requested changes and the GitHub PR is here: 
https://github.com/torproject/torspec/pull/87

Hopefully I have not missed anything.

Most of these changes you (Iain and Teor) suggested sound good. I'm not 
a huge fan of preferring IPv4 in the case of tunneled IPv6 connections 
(reason: we stay with IPv4 longer than we should), but understand why 
you have it (reason: better network performance) and have added this 
change anyways.

Thanks,

Neel Chauhan

On 2019-07-02 07:15, teor wrote:
&gt; Hi Iain,
&gt; 
&gt; Thanks for your review!
&gt; 
&gt;&gt; On 2 Jul 2019, at 19:39, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;&gt; 
&gt;&gt; Signed PGP part
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; My comments are inline.
&gt;&gt; 
&gt;&gt;&gt; Filename: 306-ipv6-happy-eyeballs.txt Title: A Tor Implementation of
&gt;&gt;&gt; IPv6 Happy Eyeballs Author: Neel Chauhan Created: 25-Jun-2019
&gt;&gt;&gt; Supercedes: 299 Status: Open Ticket:
&gt;&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt;&gt; 
&gt;&gt;&gt; 1. Introduction
&gt;&gt;&gt; 
&gt;&gt;&gt; As IPv4 address space becomes scarce, ISPs and organizations will
&gt;&gt; deploy
&gt;&gt;&gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt;&gt;&gt; using IPv4 connectivity by default.
&gt;&gt;&gt; 
&gt;&gt;&gt; When networks first transition to IPv6, both IPv4 and IPv6 will be
&gt;&gt; enabled
&gt;&gt;&gt; on most networks in a so-called "dual-stack" configuration. This is
&gt;&gt; to not
&gt;&gt;&gt; break existing IPv4-only applications while enabling IPv6
&gt;&gt;&gt; connectivity. However, IPv6 connectivity may be unreliable and
&gt;&gt;&gt; clients should be able to connect to the guard using the most
&gt;&gt;&gt; reliable technology, whether
&gt;&gt; IPv4
&gt;&gt;&gt; or IPv6.
&gt;&gt; 
&gt;&gt; The big problem that happy eyeballs was meant to solve was that often
&gt;&gt; you might have something announcing an IPv6 prefix but that routing 
&gt;&gt; was
&gt;&gt; not properly configured, so while the operating system thought it had
&gt;&gt; IPv6 Internet it was actually just broken. In some cases, the IPv6
&gt;&gt; Internet would be partitioned as there weren't enough backup routes to
&gt;&gt; fail over to in times of outages. For most purposes, as I understand 
&gt;&gt; it,
&gt;&gt; this means either IPv6 connectivity to a host is there or it's not.
&gt;&gt; There's not really a middle ground where it sometimes works but is 
&gt;&gt; flaky
&gt;&gt; (i.e. where you can maintain a connection but it has high packet 
&gt;&gt; loss).
&gt; 
&gt; You're right, I think our worst-case scenario in the current tor
&gt; implementation is 100% packet loss, which happens when a firewall is
&gt; configured to drop packets.
&gt; 
&gt; We should be much clearer about these two scenarios in the proposal
&gt; (IPv4/IPv6 failure, and IPv4/IPv6 timeout).
&gt; 
&gt; Another common scenario is very slow (DirPort) speeds, as a defence 
&gt; against
&gt; old clients on tor26. But the DirPort is out of scope for this 
&gt; proposal.
&gt; 
&gt;&gt;&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt;&gt;&gt; which lets a client randomly choose between IPv4 or IPv6. However,
&gt;&gt;&gt; this random decision does not take into account unreliable
&gt;&gt;&gt; connectivity or falling back to the competing IP version should one
&gt;&gt;&gt; be unreliable or unavailable.
&gt;&gt;&gt; 
&gt;&gt;&gt; One way to select between IPv4 and IPv6 on a dual-stack network is a
&gt;&gt;&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt;&gt;&gt; client attempts the preferred IP family, whether IPv4 or IPv6. Should
&gt;&gt;&gt; it work, the client sticks with the preferred IP family. Otherwise,
&gt;&gt;&gt; the client attempts the alternate version. This means if a dual-stack
&gt;&gt;&gt; client has both IPv4 and IPv6, and IPv6 is unreliable, preferred or
&gt;&gt;&gt; not, the client uses IPv4, and vice versa. However, if IPv4 and IPv6
&gt;&gt;&gt; are both equally reliable, and IPv6 is preferred, we use IPv6.
&gt;&gt; 
&gt;&gt; This sounds like a good candidate for a consensus parameter, such that
&gt;&gt; we can switch the preference for all clients at once, not just the 
&gt;&gt; ones
&gt;&gt; that have updated to the version we switch the preference in.
&gt; 
&gt; Tor already has these IPv4 and IPv6 torrc options:
&gt; * ClientUseIPv4 - use IPv4, on by default
&gt; * ClientUseIPv6 - use IPv6, off by default, overridden by explicit 
&gt; bridge,
&gt;                   PT, and proxy configs
&gt; * ClientPreferIPv6ORPort - prefer IPv6, off by default
&gt; 
&gt; At the moment, these options work well:
&gt; * ClientUseIPv4 1
&gt;   Only use IPv4
&gt;   (other options are ignored)
&gt; * ClientPreferIPv6ORPort 1
&gt;   Try to use IPv6 as much as possible
&gt;   (overrides ClientUseIPv4 1 and ClientUseIPv6 0)
&gt; * ClientUseIPv4 0
&gt;   Only use IPv6
&gt;   (other options are ignored)
&gt; 
&gt; After this proposal is fully deployed, all valid combinations of
&gt; options should work well. In particular:
&gt; 
&gt; * the default should be:
&gt;   ClientUseIPv4 1
&gt;   ClientUseIPv6 1
&gt;   ClientPreferIPv6ORPort 0 (for load-balancing reasons)
&gt; * tor clients should work with these defaults on IPv4-only, dual-stack,
&gt;   and IPv6-only networks (and they should continue to work on all these
&gt;   networks if ClientPreferIPv6ORPort is 1)
&gt; * we should have consensus parameters for:
&gt;   ClientUseIPv6 (emergency use)
&gt;   ClientPreferIPv6ORPort (if most of the guards have IPv6, and it's 
&gt; fast)
&gt; 
&gt; We should probably ClientUseIPv6 0 in the first alpha release, and then
&gt; change the consensus parameter and torrc defaults after we've done 
&gt; enough
&gt; testing.
&gt; 
&gt; We should be clearer about these torrc options, consensus parameters,
&gt; testing, and deployment in the proposal.
&gt; 
&gt;&gt; There may also be other ordering parameters for the address 
&gt;&gt; candidates.
&gt;&gt; We might want to avoid using IPv6 addresses that are using 6to4 or
&gt;&gt; Teredo as we *know* those are tunnels and thus have encapsulation
&gt;&gt; overhead, higher latency, and funnel all the traffic through 
&gt;&gt; centralised
&gt;&gt; (even if distributed) points in the network.
&gt; 
&gt; I'm not sure how this feature would work: most of the time, when tor is
&gt; ordering addresses, it has already chosen a relay. It has exactly one
&gt; IPv4 address, and an optional IPv6 address.
&gt; 
&gt; This kind of ordering of multiple IPv6 addresses requires a pool of
&gt; addresses from multiple relays. It's out of scope for this proposal, 
&gt; but
&gt; it could be implemented as part of our pool refactor:
&gt; https://trac.torproject.org/projects/tor/ticket/30817#comment:3
&gt; 
&gt;&gt;&gt; In Proposal 299, we have attempted a IP fallback mechanism using
&gt;&gt; failure
&gt;&gt;&gt; counters and preferring IPv4 and IPv6 based on the state of the
&gt;&gt; counters.
&gt;&gt;&gt; However, Prop299 was not standard Happy Eyeballs and an alternative,
&gt;&gt;&gt; standards-compliant proposal was requested in [P299-TRAC] to avoid
&gt;&gt; issues
&gt;&gt;&gt; from complexity caused by randomness.
&gt;&gt;&gt; 
&gt;&gt;&gt; This proposal describes a Tor implementation of Happy Eyeballs and
&gt;&gt;&gt; is intended as a successor to Proposal 299.
&gt;&gt;&gt; 
&gt;&gt;&gt; 2. Address Selection
&gt;&gt;&gt; 
&gt;&gt;&gt; To be able to handle Happy Eyeballs in Tor, we will need to modify
&gt;&gt;&gt; the data structures used for connections to guards, namely the extend
&gt;&gt;&gt; info structure.
&gt;&gt;&gt; 
&gt;&gt;&gt; The extend info structure should contain both an IPv4 and an IPv6
&gt;&gt; address.
&gt;&gt;&gt; This will allow us to try IPv4 and the IPv6 addresses should both be
&gt;&gt;&gt; available on a relay and the client is dual-stack.
&gt;&gt; 
&gt;&gt; The Happy Eyeballs specification doesn't just talk about having one v4
&gt;&gt; and one v6 address. In some cases, relays may be multihomed and so may
&gt;&gt; have multiple v4 or v6 addresses. We should be able to race all the
&gt;&gt; candidates.
&gt; 
&gt; Tor relays only advertise 1 IPv4 address:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n392
&gt; and 0 or 1 IPv6 address:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n764
&gt; in their descriptor.
&gt; 
&gt; The consensus only contains 1 IPv4 address:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2297
&gt; and 0 or 1 IPv6 address:
&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2316
&gt; per relay.
&gt; 
&gt; Adding extra addresses is out of scope for this proposal. We could do
&gt; it in a separate proposal, but it might not be the best use of limited
&gt; space in the consensus.
&gt; 
&gt; (If a relay machine is down, all its addresses are down. It's rare for
&gt; a client to not be able to reach one IP address on a relay, but be
&gt; able to reach another address on the same relay in the *same* IP
&gt; family.)
&gt; 
&gt;&gt;&gt; When parsing relay descriptors and filling in the extend info data
&gt;&gt;&gt; structure, we need to fill in both the IPv4 and IPv6 address if
&gt;&gt; they both
&gt;&gt;&gt; are available. If only one family is available for a relay (IPv4 or
&gt;&gt; IPv6),
&gt;&gt;&gt; we should fill in the address for preferred family and leave the
&gt;&gt; alternate
&gt;&gt;&gt; family null.
&gt;&gt; 
&gt;&gt; To match the IETF protocol more closely, we should have a list of
&gt;&gt; candidate addresses and order them according to our preferences.
&gt; 
&gt; With the current descriptor and consensus implementation, there
&gt; will only ever be 1 or 2 addresses in the list for each relay.
&gt; 
&gt; (There is one extend info data structure per relay connection
&gt; request. Modifying other parts of the tor implementation is out of
&gt; scope for this proposal.)
&gt; 
&gt;&gt;&gt; 3. Connecting To A Relay
&gt;&gt;&gt; 
&gt;&gt;&gt; If there is an existing authenticated connection, we should use it
&gt;&gt;&gt; similar to how we used it pre-Prop306.
&gt;&gt;&gt; 
&gt;&gt;&gt; If there is no existing authenticated connection for an extend info,
&gt;&gt;&gt; we should attempt to connect using the first available, allowed, and
&gt;&gt;&gt; preferred address.
&gt;&gt;&gt; 
&gt;&gt;&gt; We should also allow falling back to the alternate address. For
&gt;&gt;&gt; this, three alternate designs will be given.
&gt;&gt;&gt; 
&gt;&gt;&gt; 3.1. Proposed Designs
&gt;&gt;&gt; 
&gt;&gt;&gt; This subsection will have three proposed designs for connecting to
&gt;&gt; relays
&gt;&gt;&gt; via IPv4 and IPv6 in a Tor implementation of Happy Eyeballs.
&gt; 
&gt; Here are the design tradeoffs for this section, which we should add to
&gt; the proposal:
&gt; * launching multiple TCP connections places up to 2x the socket load
&gt;   on dual-stack relays and authorities, because both connections may
&gt;   succeed,
&gt; * launching multiple TLS connections places up to 2x the CPU load on
&gt;   dual-stack relays and authorities, because both connections may
&gt;   succeed,
&gt; * increasing the delays between connections mitigates these issues,
&gt;   but reduces perceived performance, particularly at bootstrap time
&gt;   (pre-emptive circuits hide these delays after bootstrap).
&gt; 
&gt;&gt;&gt; The
&gt;&gt; proposed
&gt;&gt;&gt; designs are as listed as follows:
&gt;&gt;&gt; 
&gt;&gt;&gt; * Section 3.1.1: First Successful Authentication
&gt;&gt;&gt; 
&gt;&gt;&gt; * Section 3.1.2: TCP Connection to Preferred Address On First
&gt;&gt; Authenticated
&gt;&gt;&gt; Connection
&gt;&gt;&gt; 
&gt;&gt;&gt; * Section 3.1.3: TCP Connection to Preferred Address On First TCP
&gt;&gt; Success
&gt;&gt;&gt; 
&gt;&gt;&gt; 3.1.1. First Successful Authentication
&gt;&gt;&gt; 
&gt;&gt;&gt; In this design, Tor will first connect to the preferred address and
&gt;&gt;&gt; attempt to authenticate. After a 1.5 second delay, Tor will connect
&gt;&gt;&gt; to the alternate address and try to authenticate. On the first
&gt;&gt;&gt; successful authenticated connection, we close the other connection.
&gt;&gt;&gt; 
&gt;&gt;&gt; This design places the least connection load on the network, but
&gt;&gt;&gt; might add extra TLS load.
&gt;&gt; 
&gt;&gt; The delay seems arbitrary. OnionPerf collects data on latency in the 
&gt;&gt; Tor
&gt;&gt; network, and could be used to inform better timing choices for the 
&gt;&gt; best
&gt;&gt; end user performance (the happiest eyeballs).
&gt; 
&gt; The 1.5 second delay is based on Onionperf data, and we should 
&gt; reference
&gt; the Onionperf figures in the proposal.
&gt; 
&gt; See my previous review of an earlier draft of this proposal:
&gt; 
&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; Depending on their location, most tor clients authenticate to the 
&gt;&gt;&gt;&gt; first
&gt;&gt;&gt;&gt; hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
&gt;&gt;&gt;&gt; https://metrics.torproject.org/onionperf-buildtimes.html
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; In RFC 8305, the default delay is 250 milliseconds, and the maximum
&gt;&gt;&gt;&gt; delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor 
&gt;&gt;&gt;&gt; link
&gt;&gt;&gt;&gt; authentication.
&gt;&gt;&gt;&gt; https://tools.ietf.org/html/rfc8305#section-8
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; (This delay will mainly affect initial bootstrap, because all of 
&gt;&gt;&gt;&gt; Tor's
&gt;&gt;&gt;&gt; other connections are pre-emptive, or re-used.)
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; A small number of clients may do wasted authentication.
&gt;&gt;&gt;&gt; That's ok. Tor already does multiple bootstrap and guard 
&gt;&gt;&gt;&gt; connections.
&gt; 
&gt; 
&gt;&gt; If we choose to take this route, we should open new connections with a
&gt;&gt; timeout of ~250ms, and only change the condition for deciding which is
&gt;&gt; the connection we will use.
&gt; 
&gt; Tor already does multiple bootstrap and guard connections over IPv4, so
&gt; I'm not sure exactly what design you're proposing. Can you give me an
&gt; example?
&gt; 
&gt;&gt;&gt; 3.1.2. TCP Connection to Preferred Address On First Authenticated
&gt;&gt; Connection
&gt;&gt;&gt; 
&gt;&gt;&gt; This design attempts a TCP connection to a preferred address. On a
&gt;&gt;&gt; failure or a 250 ms delay, we try the alternative address.
&gt;&gt;&gt; 
&gt;&gt;&gt; On the first successful TCP connection Tor attempts to authenticate
&gt;&gt;&gt; immediately. On the authentication failure, or a 1.5 second delay,
&gt;&gt;&gt; Tor closes the other connection.
&gt; 
&gt; Neel, that's not what I wrote in my last email:
&gt; 
&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; 1. Tor connects to the preferred address and tries to authenticate.
&gt;&gt;&gt;&gt;    On failure, or after a 1.5 second delay, it connects to the 
&gt;&gt;&gt;&gt; alternate address
&gt;&gt;&gt;&gt;    and tries to authenticate.
&gt;&gt;&gt;&gt;    On the first successful authentication, it closes the other 
&gt;&gt;&gt;&gt; connection.
&gt; 
&gt; A small number of clients will take longer than 1.5 seconds to
&gt; authenticate. So we should only close a connection when the other
&gt; connection to the relay successfully authenticates.
&gt; 
&gt;&gt;&gt; This design is the most reliable for clients, but increases the
&gt;&gt;&gt; connection load on dual-stack guards and authorities.
&gt;&gt; 
&gt;&gt; Creating TCP connections is not a huge issue,
&gt; 
&gt; That's not true: Tor's last connection level denial of service event
&gt; was November 2017 - February 2018. And there are occasional connection
&gt; spikes on authorities and fallbacks.
&gt; 
&gt; These connection DoSes need to be mentioned in the proposal.
&gt; 
&gt;&gt; and we should be racing
&gt;&gt; the connections with the ~250ms timeout anyway. All the designs will
&gt;&gt; have this issue.
&gt; 
&gt; I'm not sure exactly what issue you're referring to?
&gt; 
&gt;&gt;&gt; 3.1.3. TCP Connection to Preferred Address On First TCP Success
&gt;&gt;&gt; 
&gt;&gt;&gt; In this design, we will connect via TCP to the first preferred
&gt;&gt;&gt; address. On a failure or after a 250 ms delay, we attempt to connect
&gt;&gt;&gt; via TCP to the alternate address. On a success, Tor attempts to
&gt;&gt;&gt; authenticate and closes the other connection.
&gt;&gt;&gt; 
&gt;&gt;&gt; This design is the closest to RFC 8305 and is similar to how Happy
&gt;&gt;&gt; Eyeballs is implemented in a web browser.
&gt;&gt; 
&gt;&gt; This is probably also the "simplest" to implement, as it means that 
&gt;&gt; the
&gt;&gt; happy eyeballs algorithm is contained to the socket handling code.
&gt;&gt; 
&gt;&gt; I don't believe that requiring authentication to complete is going to 
&gt;&gt; do
&gt;&gt; anything more than generate load on relays. Either the packet loss is
&gt;&gt; high enough that the three way handshake fails, or there is low packet
&gt;&gt; loss. I don't think the case where requiring an additional few packets
&gt;&gt; make it through helps you choose a better connection is going to be 
&gt;&gt; that
&gt;&gt; common.
&gt; 
&gt; Middleboxes that only break IPv4 TLS are rare, but they do exist:
&gt; 
&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; We have talked about this design in the team over the last few 
&gt;&gt;&gt;&gt; months.
&gt;&gt;&gt;&gt; Our key insights are that:
&gt;&gt;&gt;&gt; * most failed TCP connections fail immediately in the kernel, some
&gt;&gt;&gt;&gt;   fail quickly with a response from the router, and others are 
&gt;&gt;&gt;&gt; blackholed
&gt;&gt;&gt;&gt;   and time out
&gt;&gt;&gt;&gt; * it's unlikely that a client will fail to authenticate to a relay 
&gt;&gt;&gt;&gt; over one
&gt;&gt;&gt;&gt;   IP version, but succeed over the other IP version, because the 
&gt;&gt;&gt;&gt; directory
&gt;&gt;&gt;&gt;   authorities authenticate to each relay when they check 
&gt;&gt;&gt;&gt; reachability
&gt;&gt;&gt;&gt; * some censorship systems only break authentication over IPv4,
&gt;&gt;&gt;&gt;   but they are rare
&gt; 
&gt; But we still want tor to work by default on those networks, so we 
&gt; should
&gt; try IPv4 and IPv6 all the way up to TLS.
&gt; 
&gt;&gt; Of course it is always possible to add a "PreferredAddressFamily" 
&gt;&gt; option
&gt;&gt; to torrc for those that know they are on a bad IPv6 network.
&gt; 
&gt; Tor already has this torrc option:
&gt; * ClientPreferIPv6ORPort - prefer IPv6, off by default
&gt; 
&gt;&gt;&gt; 3.2. Recommendations for Implementation of Section 3.1 Proposals
&gt;&gt;&gt; 
&gt;&gt;&gt; We should start with implementing and testing the implementation as
&gt;&gt;&gt; described in Section 3.1.1 (First Successful Authentication), and
&gt;&gt;&gt; then doing the same for the implementations described in 3.1.2 and
&gt;&gt;&gt; 3.1.3 if desired or required.
&gt;&gt; 
&gt;&gt; I'd want to see some justification with some experimental (or even
&gt;&gt; anecdotal) data as to why first successful authentication is the way 
&gt;&gt; to
&gt;&gt; go. 3.1.3 is going to be the simpler option and, in my opinion, the 
&gt;&gt; best
&gt;&gt; place to start.
&gt; 
&gt; It increases the risk of network-wide DoS, and fails to work around 
&gt; some
&gt; censored networks. But it might be good for a simple initial test
&gt; implementation.
&gt; 
&gt;&gt; 3.1.3 can likely be implemented using exactly the algorithm in section 
&gt;&gt; 5
&gt;&gt; of RFC 8305, excluding portions relating to DNS because we already 
&gt;&gt; have
&gt;&gt; all the candidates from the server descriptor.
&gt; 
&gt; All supported Tor client versions use microdescriptors, not server
&gt; descriptors. Since consensus method 28 in tor 0.3.3.6, microdesc
&gt; consensuses contain IPv6 addresses. (This is important during 
&gt; bootstrap.)
&gt; 
&gt; See proposal 283 for context:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/283-ipv6-in-micro-consensus.txt
&gt; 
&gt; We also intend to use this proposal to connect to the hard-coded 
&gt; fallbacks
&gt; and authorities, some of which have IPv6 addresses.
&gt; 
&gt; Ideally, we shouldn't need to change any of the code from proposal 283.
&gt; 
&gt; But we might need to change the relay selection logic, because 
&gt; otherwise
&gt; tor could chose a run of IPv4-only relays, and fail to bootstrap on an
&gt; IPv6-only network.
&gt; 
&gt; So we need to add another section to the proposal, I guess.
&gt; 
&gt;&gt;&gt; 4. Handling Connection Successes And Failures
&gt;&gt;&gt; 
&gt;&gt;&gt; Should a connection to a guard succeed and is authenticated via TLS,
&gt;&gt;&gt; we can then use the connection. In this case, we should cancel all
&gt;&gt;&gt; other connection timers and in-progress connections. Cancelling the
&gt;&gt;&gt; timers is so we don't attempt new unnecessary connections when our
&gt;&gt;&gt; existing connection is successful, preventing denial-of-service
&gt;&gt;&gt; risks.
&gt;&gt;&gt; 
&gt;&gt;&gt; However, if we fail all available and allowed connections, we
&gt;&gt; should tell
&gt;&gt;&gt; the rest of Tor that the connection has failed. This is so we can
&gt;&gt; attempt
&gt;&gt;&gt; another guard relay.
&gt;&gt; 
&gt;&gt; Some issues that come to mind:
&gt;&gt; 
&gt;&gt; - I wonder how many relay IPv6 addresses are actually using tunnels. 
&gt;&gt; At
&gt;&gt; the levels of throughput they use, that overhead adds up. What is the
&gt;&gt; additional bandwidth cost and what is the impact of reduced MSS?
&gt; 
&gt; Here's one way we can mitigate this overhead:
&gt; * tor clients prefer IPv4 by default,
&gt; * tor uses a 1.5 second delay between IPv4 and IPv6 connections
&gt; 
&gt; That way, most clients that can use IPv4, will end up using IPv4, and
&gt; avoid this overhead.
&gt; 
&gt; The clients that don't will fall into two categories:
&gt; * IPv6-only, so the overhead is a small price to pay for connectivity, 
&gt; or
&gt; * high-latency, so the overhead might not be noticeable anyway.
&gt; 
&gt;&gt; - What are the tunables? RFC8305 has some that would be applicable, 
&gt;&gt; and
&gt;&gt; probably all of them could be consensus parameters if we wanted to 
&gt;&gt; tune
&gt;&gt; them:
&gt;&gt; * First Address Family Count
&gt; 
&gt; This value must be fixed at 1.
&gt; 
&gt; Tor's code only connects to 1 relay at a time, and that relay only has
&gt; 1 address from each family. Increasing the number of addresses per 
&gt; relay
&gt; or per "happy eyeballs" attempt is out of scope for this proposal.
&gt; 
&gt;&gt; * Connection Attempt Delay
&gt; 
&gt; From Onionperf data, I think this should default to 1.5 seconds.
&gt; 
&gt; But I'm happy to modify it based on testing, or future Onionperf
&gt; measurements. Let's make it a torrc option and consensus parameter?
&gt; 
&gt;&gt; * Minimum Connection Attempt Delay
&gt; 
&gt; Dynamically adjusting the delay per client is out of scope for this
&gt; proposal. It also carries privacy risks, unless we add some jitter.
&gt; 
&gt; Let's fix the minimum at 10 milliseconds as recommended in RFC
&gt; 8305, and adjust it network-wide using the "Connection Attempt Delay"
&gt; consensus parameter.
&gt; 
&gt;&gt; * Maximum Connection Attempt Delay
&gt; 
&gt; As above, but if we choose to include TLS in the delay, we should
&gt; set the maximum much higher than the RFC 8305 recommendation of
&gt; 2 seconds. Let's make it 30 seconds, to match tor's existing timeout.
&gt; 
&gt; (Users might want to set the delay this high on very slow networks.)
&gt; 
&gt;&gt; - How do we know what is going on? We do not collect metrics from
&gt;&gt; clients about their usage, but we do collect metrics from relays. Are
&gt;&gt; there any counters we should be adding to extra info descriptors to 
&gt;&gt; help
&gt;&gt; us see whether or not this is working?
&gt; 
&gt; We should definitely be collecting the number of IPv4 and IPv6 
&gt; connections
&gt; to ORPorts. We should probably also distinguish authenticated
&gt; (relay, authority reachability) and unauthenticated (client, bridge)
&gt; connections.
&gt; 
&gt; We should also be including these stats in the heartbeat logs.
&gt; 
&gt; We were going to wait for PrivCount for these stats, but we didn't 
&gt; manage
&gt; to implement it in the sponsored time we had available. So I don't 
&gt; think
&gt; it makes sense to block further stats on PrivCount at this time.
&gt; 
&gt;&gt; Could clients help relays by
&gt;&gt; reporting that a connection is being closed because they have another
&gt;&gt; connection? (I don't know the answer, but RFC8305 does explicitly 
&gt;&gt; point
&gt;&gt; out that it is a mitigation technique designed to hide problems from 
&gt;&gt; the
&gt;&gt; user, which means that those problems might come back to haunt us 
&gt;&gt; later
&gt;&gt; if we're not on top of them.)
&gt; 
&gt; 
&gt; Clients don't report circuit or stream close reasons to relays, to
&gt; preserve privacy and avoid information leaks.
&gt; 
&gt; Clients can't always report connection close reasons over the Tor
&gt; protocol, because it sits below the TLS layer, but connections can be
&gt; closed at the TCP stage. (Or any subsequent stage, including TLS, link,
&gt; or link authentication.)
&gt; 
&gt; T
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190713164739</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-07-13 16:47:39-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi,

On July 11, 2019 12:37:03 AM UTC, neel@neelc.org wrote:
&gt; I'm really sorry about the delay in responding to your review. I was 
&gt; busy with an internship (unrelated to Tor, but still related to 
&gt; security) and was out a lot in my "free time".
&gt; 
&gt; I have implemented your requested changes and the GitHub PR is here: 
&gt; https://github.com/torproject/torspec/pull/87
&gt; 
&gt; Hopefully I have not missed anything.
&gt; 
&gt; Most of these changes you (Iain and Teor) suggested sound good. I'm not
&gt; 
&gt; a huge fan of preferring IPv4 in the case of tunneled IPv6 connections 
&gt; (reason: we stay with IPv4 longer than we should), but understand why 
&gt; you have it (reason: better network performance) and have added this 
&gt; change anyways.

Thanks for these revisions.

I have some overall comments on the proposal:

1. The proposal is very large now. Let's add an intro section that splits the changes \
                into:
  * initial feasability testing (for initial developer review)
  * minimum viable product (for testing in Tor Browser Alpha)
  * parameter tuning (for performance, load, and user experience)
  * relay statistics (for ongoing monitoring)
  * optional features, and how we will know if we need them (if users experience \
particular bugs)

2. Bridges can't be configured with an IPv4 and an IPv6 address in tor, because tor \
only accepts one IP address per bridge. Let's be clear that bridges are out of scope. \
(Tor already attempts to connect to all? its configured bridges.)

3. Each revision of this proposal has added text. Is there any text that is redundant \
or not essential? Can we make it shorter?

After these revisions, I will do a final review. I hope we can get another tor \
developer to also do a final review.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190721143046</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-07-21 14:30:46-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi,

I have split up the sections. The GitHub PR is here:

https://github.com/torproject/torspec/pull/87

This was done as a fixup commit. If you want a new PR, please let me 
know.

-Neel

===

https://www.neelc.org/

On 2019-07-13 12:47, teor wrote:
&gt; Hi,
&gt; 
&gt; On July 11, 2019 12:37:03 AM UTC, neel@neelc.org wrote:
&gt;&gt; I'm really sorry about the delay in responding to your review. I was
&gt;&gt; busy with an internship (unrelated to Tor, but still related to
&gt;&gt; security) and was out a lot in my "free time".
&gt;&gt; 
&gt;&gt; I have implemented your requested changes and the GitHub PR is here:
&gt;&gt; https://github.com/torproject/torspec/pull/87
&gt;&gt; 
&gt;&gt; Hopefully I have not missed anything.
&gt;&gt; 
&gt;&gt; Most of these changes you (Iain and Teor) suggested sound good. I'm 
&gt;&gt; not
&gt;&gt; 
&gt;&gt; a huge fan of preferring IPv4 in the case of tunneled IPv6 connections
&gt;&gt; (reason: we stay with IPv4 longer than we should), but understand why
&gt;&gt; you have it (reason: better network performance) and have added this
&gt;&gt; change anyways.
&gt; 
&gt; Thanks for these revisions.
&gt; 
&gt; I have some overall comments on the proposal:
&gt; 
&gt; 1. The proposal is very large now. Let's add an intro section that
&gt; splits the changes into:
&gt;   * initial feasability testing (for initial developer review)
&gt;   * minimum viable product (for testing in Tor Browser Alpha)
&gt;   * parameter tuning (for performance, load, and user experience)
&gt;   * relay statistics (for ongoing monitoring)
&gt;   * optional features, and how we will know if we need them (if users
&gt; experience particular bugs)
&gt; 
&gt; 2. Bridges can't be configured with an IPv4 and an IPv6 address in
&gt; tor, because tor only accepts one IP address per bridge. Let's be
&gt; clear that bridges are out of scope. (Tor already attempts to connect
&gt; to all? its configured bridges.)
&gt; 
&gt; 3. Each revision of this proposal has added text. Is there any text
&gt; that is redundant or not essential? Can we make it shorter?
&gt; 
&gt; After these revisions, I will do a final review. I hope we can get
&gt; another tor developer to also do a final review.
&gt; 
&gt; T
&gt; 
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190729171111</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-07-29 17:11:11-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Just a reminder that this proposal (Prop306) needs to be reviewed: 
https://github.com/torproject/torspec/pull/87

-Neel

===

https://www.neelc.org/

On 2019-07-21 10:30, neel@neelc.org wrote:
&gt; Hi,
&gt; 
&gt; I have split up the sections. The GitHub PR is here:
&gt; 
&gt; https://github.com/torproject/torspec/pull/87
&gt; 
&gt; This was done as a fixup commit. If you want a new PR, please let me 
&gt; know.
&gt; 
&gt; -Neel
&gt; 
&gt; ===
&gt; 
&gt; https://www.neelc.org/
&gt; 
&gt; On 2019-07-13 12:47, teor wrote:
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; On July 11, 2019 12:37:03 AM UTC, neel@neelc.org wrote:
&gt;&gt;&gt; I'm really sorry about the delay in responding to your review. I was
&gt;&gt;&gt; busy with an internship (unrelated to Tor, but still related to
&gt;&gt;&gt; security) and was out a lot in my "free time".
&gt;&gt;&gt; 
&gt;&gt;&gt; I have implemented your requested changes and the GitHub PR is here:
&gt;&gt;&gt; https://github.com/torproject/torspec/pull/87
&gt;&gt;&gt; 
&gt;&gt;&gt; Hopefully I have not missed anything.
&gt;&gt;&gt; 
&gt;&gt;&gt; Most of these changes you (Iain and Teor) suggested sound good. I'm 
&gt;&gt;&gt; not
&gt;&gt;&gt; 
&gt;&gt;&gt; a huge fan of preferring IPv4 in the case of tunneled IPv6 
&gt;&gt;&gt; connections
&gt;&gt;&gt; (reason: we stay with IPv4 longer than we should), but understand why
&gt;&gt;&gt; you have it (reason: better network performance) and have added this
&gt;&gt;&gt; change anyways.
&gt;&gt; 
&gt;&gt; Thanks for these revisions.
&gt;&gt; 
&gt;&gt; I have some overall comments on the proposal:
&gt;&gt; 
&gt;&gt; 1. The proposal is very large now. Let's add an intro section that
&gt;&gt; splits the changes into:
&gt;&gt;   * initial feasability testing (for initial developer review)
&gt;&gt;   * minimum viable product (for testing in Tor Browser Alpha)
&gt;&gt;   * parameter tuning (for performance, load, and user experience)
&gt;&gt;   * relay statistics (for ongoing monitoring)
&gt;&gt;   * optional features, and how we will know if we need them (if users
&gt;&gt; experience particular bugs)
&gt;&gt; 
&gt;&gt; 2. Bridges can't be configured with an IPv4 and an IPv6 address in
&gt;&gt; tor, because tor only accepts one IP address per bridge. Let's be
&gt;&gt; clear that bridges are out of scope. (Tor already attempts to connect
&gt;&gt; to all? its configured bridges.)
&gt;&gt; 
&gt;&gt; 3. Each revision of this proposal has added text. Is there any text
&gt;&gt; that is redundant or not essential? Can we make it shorter?
&gt;&gt; 
&gt;&gt; After these revisions, I will do a final review. I hope we can get
&gt;&gt; another tor developer to also do a final review.
&gt;&gt; 
&gt;&gt; T
&gt;&gt; 
&gt;&gt; --
&gt;&gt; teor
&gt;&gt; ----------------------------------------------------------------------
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190801003632</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-01 00:36:32-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/signed)]


Hi Neel,

&gt; On 30 Jul 2019, at 03:11, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Just a reminder that this proposal (Prop306) needs to be reviewed: \
&gt; https://github.com/torproject/torspec/pull/87

I can't find these changes that I requested to the proposal:

&gt; &gt; On 14 Jul 2019, at 02:47, teor &lt;teor@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; I have some overall comments on the proposal:
&gt; &gt; 
&gt; &gt; 1. The proposal is very large now. Let's add an intro section that splits the \
&gt; &gt; changes into:

These parts of the proposal exist, but they are not in separate sections:

&gt; &gt; * initial feasability testing (for initial developer review)
&gt; &gt; * minimum viable product (for testing in Tor Browser Alpha)
&gt; &gt; * parameter tuning (for performance, load, and user experience)
&gt; &gt; * optional features, and how we will know if we need them (if users experience \
&gt; &gt; particular bugs)

These parts of the proposal do not exist:

&gt; &gt; * relay statistics (for ongoing monitoring)

This modification is not in the current proposal:

&gt; &gt; 2. Bridges can't be configured with an IPv4 and an IPv6 address in tor, because \
&gt; &gt; tor only accepts one IP address per bridge. Let's be clear that bridges are out \
&gt; &gt; of scope. (Tor already attempts to connect to all? its configured bridges.)

I added some suggest text to make bridges out of scope for this proposal.

I don't see any deleted text:

&gt; &gt; 3. Each revision of this proposal has added text. Is there any text that is \
&gt; &gt; redundant or not essential? Can we make it shorter?


David suggested we delete one section, and I suggested we keep some of it, but delete \
most of it. I also suggested we move some alternative options to an appendix.

Is there anything else you think we can delete?

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAl1CNBAACgkQEP6qDnB1
Zyo0hw/9HvcFtDNEuyUL1JkQkj1MM73BrxgpQI0OiezWA5MGSN+OdkCD828km2kl
RW9SajEL6jZ8+kR3V3vnd4R5VxyO6c1Ez2yCNyG3OUiKPRSw7drory8rL8ZZCAVF
Mdta/ljRRUj5BtiVq5BDPbpsjpkascRq893Nn/CHoWwV2OT8bpvrW6XQYUaY5RkW
pMLDUT1o1HdIHu1MOuSX+nmJ8Xliy9FDhdSN0AW+6BvVgYKG6PFv9QzsBP4QK0Qm
61FUR/7Gb4pPkgjYk7oOT5i2GA3IeHTROj2sD8DEdMkgQ96RTDkIjUHi8xGy9gGG
sIAcrLK8Bf8FLtuChbEm/NKfTp7bv/N1CouSc/dE3eGmQ/qGApojWoh64C0OyMRf
R/CRBXwaX0gCbs8X7Kk7KOkr7cHhjpm4TwICaTH9mqmAzh2//4lxmkVD4XFyN6vk
NUsH2raDtBOdUcWRdM6w+HCUkg2KW5hecXKY2AfEFCUtCq0iMidwg6KFbofOFlk1
rqH01ZUyuQT/qXLYB2EDDt0mOPW3k4ig0H1ssIe4cPdeE3111UFBbl1WZMlt2dR/
EMBZny3P1GAaeIInATuaNEg7wnX8eyTbzU/LOQCPPo0fUoHpIyom7Ad/v/Ujl3lI
hrfg76Wsl844YGFWKBxR2lvivPwM4rI8twIrnfpCmDDXyMPEQnM=
=BS0X
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190801232025</emailId><senderName>NOC</senderName><senderEmail>tor@afo-tm.org</senderEmail><timestampReceived>2019-08-01 23:20:25-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi,

I see this staying longer with IPv4 longer than we should also 
problematic, we are at the point that there are providers out there who 
do have more clients than IPv4 space which results in having them making 
carrier grade NAT. Some of them have the problem that their NAT gear 
gets maxed out at peak hours which results in heavy packet loss and very 
slow speeds, while their IPv6 connection is perfectly fine. That will 
not get better, i guess it will get worse in the future. So i would also 
prefer to use IPv6 if it works better.

On 11.07.2019 02:37, neel@neelc.org wrote:
&gt; Hi,
&gt;
&gt; I'm really sorry about the delay in responding to your review. I was 
&gt; busy with an internship (unrelated to Tor, but still related to 
&gt; security) and was out a lot in my "free time".
&gt;
&gt; I have implemented your requested changes and the GitHub PR is here: 
&gt; https://github.com/torproject/torspec/pull/87
&gt;
&gt; Hopefully I have not missed anything.
&gt;
&gt; Most of these changes you (Iain and Teor) suggested sound good. I'm 
&gt; not a huge fan of preferring IPv4 in the case of tunneled IPv6 
&gt; connections (reason: we stay with IPv4 longer than we should), but 
&gt; understand why you have it (reason: better network performance) and 
&gt; have added this change anyways.
&gt;
&gt; Thanks,
&gt;
&gt; Neel Chauhan
&gt;
&gt; On 2019-07-02 07:15, teor wrote:
&gt;&gt; Hi Iain,
&gt;&gt;
&gt;&gt; Thanks for your review!
&gt;&gt;
&gt;&gt;&gt; On 2 Jul 2019, at 19:39, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; Signed PGP part
&gt;&gt;&gt; Hi,
&gt;&gt;&gt;
&gt;&gt;&gt; My comments are inline.
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Filename: 306-ipv6-happy-eyeballs.txt Title: A Tor Implementation of
&gt;&gt;&gt;&gt; IPv6 Happy Eyeballs Author: Neel Chauhan Created: 25-Jun-2019
&gt;&gt;&gt;&gt; Supercedes: 299 Status: Open Ticket:
&gt;&gt;&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; 1. Introduction
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; As IPv4 address space becomes scarce, ISPs and organizations will
&gt;&gt;&gt; deploy
&gt;&gt;&gt;&gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt;&gt;&gt;&gt; using IPv4 connectivity by default.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; When networks first transition to IPv6, both IPv4 and IPv6 will be
&gt;&gt;&gt; enabled
&gt;&gt;&gt;&gt; on most networks in a so-called "dual-stack" configuration. This is
&gt;&gt;&gt; to not
&gt;&gt;&gt;&gt; break existing IPv4-only applications while enabling IPv6
&gt;&gt;&gt;&gt; connectivity. However, IPv6 connectivity may be unreliable and
&gt;&gt;&gt;&gt; clients should be able to connect to the guard using the most
&gt;&gt;&gt;&gt; reliable technology, whether
&gt;&gt;&gt; IPv4
&gt;&gt;&gt;&gt; or IPv6.
&gt;&gt;&gt;
&gt;&gt;&gt; The big problem that happy eyeballs was meant to solve was that often
&gt;&gt;&gt; you might have something announcing an IPv6 prefix but that routing was
&gt;&gt;&gt; not properly configured, so while the operating system thought it had
&gt;&gt;&gt; IPv6 Internet it was actually just broken. In some cases, the IPv6
&gt;&gt;&gt; Internet would be partitioned as there weren't enough backup routes to
&gt;&gt;&gt; fail over to in times of outages. For most purposes, as I understand 
&gt;&gt;&gt; it,
&gt;&gt;&gt; this means either IPv6 connectivity to a host is there or it's not.
&gt;&gt;&gt; There's not really a middle ground where it sometimes works but is 
&gt;&gt;&gt; flaky
&gt;&gt;&gt; (i.e. where you can maintain a connection but it has high packet loss).
&gt;&gt;
&gt;&gt; You're right, I think our worst-case scenario in the current tor
&gt;&gt; implementation is 100% packet loss, which happens when a firewall is
&gt;&gt; configured to drop packets.
&gt;&gt;
&gt;&gt; We should be much clearer about these two scenarios in the proposal
&gt;&gt; (IPv4/IPv6 failure, and IPv4/IPv6 timeout).
&gt;&gt;
&gt;&gt; Another common scenario is very slow (DirPort) speeds, as a defence 
&gt;&gt; against
&gt;&gt; old clients on tor26. But the DirPort is out of scope for this proposal.
&gt;&gt;
&gt;&gt;&gt;&gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt;&gt;&gt;&gt; which lets a client randomly choose between IPv4 or IPv6. However,
&gt;&gt;&gt;&gt; this random decision does not take into account unreliable
&gt;&gt;&gt;&gt; connectivity or falling back to the competing IP version should one
&gt;&gt;&gt;&gt; be unreliable or unavailable.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; One way to select between IPv4 and IPv6 on a dual-stack network is a
&gt;&gt;&gt;&gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt;&gt;&gt;&gt; client attempts the preferred IP family, whether IPv4 or IPv6. Should
&gt;&gt;&gt;&gt; it work, the client sticks with the preferred IP family. Otherwise,
&gt;&gt;&gt;&gt; the client attempts the alternate version. This means if a dual-stack
&gt;&gt;&gt;&gt; client has both IPv4 and IPv6, and IPv6 is unreliable, preferred or
&gt;&gt;&gt;&gt; not, the client uses IPv4, and vice versa. However, if IPv4 and IPv6
&gt;&gt;&gt;&gt; are both equally reliable, and IPv6 is preferred, we use IPv6.
&gt;&gt;&gt;
&gt;&gt;&gt; This sounds like a good candidate for a consensus parameter, such that
&gt;&gt;&gt; we can switch the preference for all clients at once, not just the ones
&gt;&gt;&gt; that have updated to the version we switch the preference in.
&gt;&gt;
&gt;&gt; Tor already has these IPv4 and IPv6 torrc options:
&gt;&gt; * ClientUseIPv4 - use IPv4, on by default
&gt;&gt; * ClientUseIPv6 - use IPv6, off by default, overridden by explicit 
&gt;&gt; bridge,
&gt;&gt;                   PT, and proxy configs
&gt;&gt; * ClientPreferIPv6ORPort - prefer IPv6, off by default
&gt;&gt;
&gt;&gt; At the moment, these options work well:
&gt;&gt; * ClientUseIPv4 1
&gt;&gt;   Only use IPv4
&gt;&gt;   (other options are ignored)
&gt;&gt; * ClientPreferIPv6ORPort 1
&gt;&gt;   Try to use IPv6 as much as possible
&gt;&gt;   (overrides ClientUseIPv4 1 and ClientUseIPv6 0)
&gt;&gt; * ClientUseIPv4 0
&gt;&gt;   Only use IPv6
&gt;&gt;   (other options are ignored)
&gt;&gt;
&gt;&gt; After this proposal is fully deployed, all valid combinations of
&gt;&gt; options should work well. In particular:
&gt;&gt;
&gt;&gt; * the default should be:
&gt;&gt;   ClientUseIPv4 1
&gt;&gt;   ClientUseIPv6 1
&gt;&gt;   ClientPreferIPv6ORPort 0 (for load-balancing reasons)
&gt;&gt; * tor clients should work with these defaults on IPv4-only, dual-stack,
&gt;&gt;   and IPv6-only networks (and they should continue to work on all these
&gt;&gt;   networks if ClientPreferIPv6ORPort is 1)
&gt;&gt; * we should have consensus parameters for:
&gt;&gt;   ClientUseIPv6 (emergency use)
&gt;&gt;   ClientPreferIPv6ORPort (if most of the guards have IPv6, and it's 
&gt;&gt; fast)
&gt;&gt;
&gt;&gt; We should probably ClientUseIPv6 0 in the first alpha release, and then
&gt;&gt; change the consensus parameter and torrc defaults after we've done 
&gt;&gt; enough
&gt;&gt; testing.
&gt;&gt;
&gt;&gt; We should be clearer about these torrc options, consensus parameters,
&gt;&gt; testing, and deployment in the proposal.
&gt;&gt;
&gt;&gt;&gt; There may also be other ordering parameters for the address candidates.
&gt;&gt;&gt; We might want to avoid using IPv6 addresses that are using 6to4 or
&gt;&gt;&gt; Teredo as we *know* those are tunnels and thus have encapsulation
&gt;&gt;&gt; overhead, higher latency, and funnel all the traffic through 
&gt;&gt;&gt; centralised
&gt;&gt;&gt; (even if distributed) points in the network.
&gt;&gt;
&gt;&gt; I'm not sure how this feature would work: most of the time, when tor is
&gt;&gt; ordering addresses, it has already chosen a relay. It has exactly one
&gt;&gt; IPv4 address, and an optional IPv6 address.
&gt;&gt;
&gt;&gt; This kind of ordering of multiple IPv6 addresses requires a pool of
&gt;&gt; addresses from multiple relays. It's out of scope for this proposal, but
&gt;&gt; it could be implemented as part of our pool refactor:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/30817#comment:3
&gt;&gt;
&gt;&gt;&gt;&gt; In Proposal 299, we have attempted a IP fallback mechanism using
&gt;&gt;&gt; failure
&gt;&gt;&gt;&gt; counters and preferring IPv4 and IPv6 based on the state of the
&gt;&gt;&gt; counters.
&gt;&gt;&gt;&gt; However, Prop299 was not standard Happy Eyeballs and an alternative,
&gt;&gt;&gt;&gt; standards-compliant proposal was requested in [P299-TRAC] to avoid
&gt;&gt;&gt; issues
&gt;&gt;&gt;&gt; from complexity caused by randomness.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; This proposal describes a Tor implementation of Happy Eyeballs and
&gt;&gt;&gt;&gt; is intended as a successor to Proposal 299.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; 2. Address Selection
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; To be able to handle Happy Eyeballs in Tor, we will need to modify
&gt;&gt;&gt;&gt; the data structures used for connections to guards, namely the extend
&gt;&gt;&gt;&gt; info structure.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; The extend info structure should contain both an IPv4 and an IPv6
&gt;&gt;&gt; address.
&gt;&gt;&gt;&gt; This will allow us to try IPv4 and the IPv6 addresses should both be
&gt;&gt;&gt;&gt; available on a relay and the client is dual-stack.
&gt;&gt;&gt;
&gt;&gt;&gt; The Happy Eyeballs specification doesn't just talk about having one v4
&gt;&gt;&gt; and one v6 address. In some cases, relays may be multihomed and so may
&gt;&gt;&gt; have multiple v4 or v6 addresses. We should be able to race all the
&gt;&gt;&gt; candidates.
&gt;&gt;
&gt;&gt; Tor relays only advertise 1 IPv4 address:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n392
&gt;&gt; and 0 or 1 IPv6 address:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n764
&gt;&gt; in their descriptor.
&gt;&gt;
&gt;&gt; The consensus only contains 1 IPv4 address:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2297
&gt;&gt; and 0 or 1 IPv6 address:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n2316
&gt;&gt; per relay.
&gt;&gt;
&gt;&gt; Adding extra addresses is out of scope for this proposal. We could do
&gt;&gt; it in a separate proposal, but it might not be the best use of limited
&gt;&gt; space in the consensus.
&gt;&gt;
&gt;&gt; (If a relay machine is down, all its addresses are down. It's rare for
&gt;&gt; a client to not be able to reach one IP address on a relay, but be
&gt;&gt; able to reach another address on the same relay in the *same* IP
&gt;&gt; family.)
&gt;&gt;
&gt;&gt;&gt;&gt; When parsing relay descriptors and filling in the extend info data
&gt;&gt;&gt;&gt; structure, we need to fill in both the IPv4 and IPv6 address if
&gt;&gt;&gt; they both
&gt;&gt;&gt;&gt; are available. If only one family is available for a relay (IPv4 or
&gt;&gt;&gt; IPv6),
&gt;&gt;&gt;&gt; we should fill in the address for preferred family and leave the
&gt;&gt;&gt; alternate
&gt;&gt;&gt;&gt; family null.
&gt;&gt;&gt;
&gt;&gt;&gt; To match the IETF protocol more closely, we should have a list of
&gt;&gt;&gt; candidate addresses and order them according to our preferences.
&gt;&gt;
&gt;&gt; With the current descriptor and consensus implementation, there
&gt;&gt; will only ever be 1 or 2 addresses in the list for each relay.
&gt;&gt;
&gt;&gt; (There is one extend info data structure per relay connection
&gt;&gt; request. Modifying other parts of the tor implementation is out of
&gt;&gt; scope for this proposal.)
&gt;&gt;
&gt;&gt;&gt;&gt; 3. Connecting To A Relay
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; If there is an existing authenticated connection, we should use it
&gt;&gt;&gt;&gt; similar to how we used it pre-Prop306.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; If there is no existing authenticated connection for an extend info,
&gt;&gt;&gt;&gt; we should attempt to connect using the first available, allowed, and
&gt;&gt;&gt;&gt; preferred address.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; We should also allow falling back to the alternate address. For
&gt;&gt;&gt;&gt; this, three alternate designs will be given.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; 3.1. Proposed Designs
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; This subsection will have three proposed designs for connecting to
&gt;&gt;&gt; relays
&gt;&gt;&gt;&gt; via IPv4 and IPv6 in a Tor implementation of Happy Eyeballs.
&gt;&gt;
&gt;&gt; Here are the design tradeoffs for this section, which we should add to
&gt;&gt; the proposal:
&gt;&gt; * launching multiple TCP connections places up to 2x the socket load
&gt;&gt;   on dual-stack relays and authorities, because both connections may
&gt;&gt;   succeed,
&gt;&gt; * launching multiple TLS connections places up to 2x the CPU load on
&gt;&gt;   dual-stack relays and authorities, because both connections may
&gt;&gt;   succeed,
&gt;&gt; * increasing the delays between connections mitigates these issues,
&gt;&gt;   but reduces perceived performance, particularly at bootstrap time
&gt;&gt;   (pre-emptive circuits hide these delays after bootstrap).
&gt;&gt;
&gt;&gt;&gt;&gt; The
&gt;&gt;&gt; proposed
&gt;&gt;&gt;&gt; designs are as listed as follows:
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; * Section 3.1.1: First Successful Authentication
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; * Section 3.1.2: TCP Connection to Preferred Address On First
&gt;&gt;&gt; Authenticated
&gt;&gt;&gt;&gt; Connection
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; * Section 3.1.3: TCP Connection to Preferred Address On First TCP
&gt;&gt;&gt; Success
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; 3.1.1. First Successful Authentication
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; In this design, Tor will first connect to the preferred address and
&gt;&gt;&gt;&gt; attempt to authenticate. After a 1.5 second delay, Tor will connect
&gt;&gt;&gt;&gt; to the alternate address and try to authenticate. On the first
&gt;&gt;&gt;&gt; successful authenticated connection, we close the other connection.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; This design places the least connection load on the network, but
&gt;&gt;&gt;&gt; might add extra TLS load.
&gt;&gt;&gt;
&gt;&gt;&gt; The delay seems arbitrary. OnionPerf collects data on latency in the 
&gt;&gt;&gt; Tor
&gt;&gt;&gt; network, and could be used to inform better timing choices for the best
&gt;&gt;&gt; end user performance (the happiest eyeballs).
&gt;&gt;
&gt;&gt; The 1.5 second delay is based on Onionperf data, and we should reference
&gt;&gt; the Onionperf figures in the proposal.
&gt;&gt;
&gt;&gt; See my previous review of an earlier draft of this proposal:
&gt;&gt;
&gt;&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; Depending on their location, most tor clients authenticate to the 
&gt;&gt;&gt;&gt;&gt; first
&gt;&gt;&gt;&gt;&gt; hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
&gt;&gt;&gt;&gt;&gt; https://metrics.torproject.org/onionperf-buildtimes.html
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; In RFC 8305, the default delay is 250 milliseconds, and the maximum
&gt;&gt;&gt;&gt;&gt; delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor link
&gt;&gt;&gt;&gt;&gt; authentication.
&gt;&gt;&gt;&gt;&gt; https://tools.ietf.org/html/rfc8305#section-8
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; (This delay will mainly affect initial bootstrap, because all of 
&gt;&gt;&gt;&gt;&gt; Tor's
&gt;&gt;&gt;&gt;&gt; other connections are pre-emptive, or re-used.)
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; A small number of clients may do wasted authentication.
&gt;&gt;&gt;&gt;&gt; That's ok. Tor already does multiple bootstrap and guard connections.
&gt;&gt;
&gt;&gt;
&gt;&gt;&gt; If we choose to take this route, we should open new connections with a
&gt;&gt;&gt; timeout of ~250ms, and only change the condition for deciding which is
&gt;&gt;&gt; the connection we will use.
&gt;&gt;
&gt;&gt; Tor already does multiple bootstrap and guard connections over IPv4, so
&gt;&gt; I'm not sure exactly what design you're proposing. Can you give me an
&gt;&gt; example?
&gt;&gt;
&gt;&gt;&gt;&gt; 3.1.2. TCP Connection to Preferred Address On First Authenticated
&gt;&gt;&gt; Connection
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; This design attempts a TCP connection to a preferred address. On a
&gt;&gt;&gt;&gt; failure or a 250 ms delay, we try the alternative address.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; On the first successful TCP connection Tor attempts to authenticate
&gt;&gt;&gt;&gt; immediately. On the authentication failure, or a 1.5 second delay,
&gt;&gt;&gt;&gt; Tor closes the other connection.
&gt;&gt;
&gt;&gt; Neel, that's not what I wrote in my last email:
&gt;&gt;
&gt;&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; 1. Tor connects to the preferred address and tries to authenticate.
&gt;&gt;&gt;&gt;&gt;    On failure, or after a 1.5 second delay, it connects to the 
&gt;&gt;&gt;&gt;&gt; alternate address
&gt;&gt;&gt;&gt;&gt;    and tries to authenticate.
&gt;&gt;&gt;&gt;&gt;    On the first successful authentication, it closes the other 
&gt;&gt;&gt;&gt;&gt; connection.
&gt;&gt;
&gt;&gt; A small number of clients will take longer than 1.5 seconds to
&gt;&gt; authenticate. So we should only close a connection when the other
&gt;&gt; connection to the relay successfully authenticates.
&gt;&gt;
&gt;&gt;&gt;&gt; This design is the most reliable for clients, but increases the
&gt;&gt;&gt;&gt; connection load on dual-stack guards and authorities.
&gt;&gt;&gt;
&gt;&gt;&gt; Creating TCP connections is not a huge issue,
&gt;&gt;
&gt;&gt; That's not true: Tor's last connection level denial of service event
&gt;&gt; was November 2017 - February 2018. And there are occasional connection
&gt;&gt; spikes on authorities and fallbacks.
&gt;&gt;
&gt;&gt; These connection DoSes need to be mentioned in the proposal.
&gt;&gt;
&gt;&gt;&gt; and we should be racing
&gt;&gt;&gt; the connections with the ~250ms timeout anyway. All the designs will
&gt;&gt;&gt; have this issue.
&gt;&gt;
&gt;&gt; I'm not sure exactly what issue you're referring to?
&gt;&gt;
&gt;&gt;&gt;&gt; 3.1.3. TCP Connection to Preferred Address On First TCP Success
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; In this design, we will connect via TCP to the first preferred
&gt;&gt;&gt;&gt; address. On a failure or after a 250 ms delay, we attempt to connect
&gt;&gt;&gt;&gt; via TCP to the alternate address. On a success, Tor attempts to
&gt;&gt;&gt;&gt; authenticate and closes the other connection.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; This design is the closest to RFC 8305 and is similar to how Happy
&gt;&gt;&gt;&gt; Eyeballs is implemented in a web browser.
&gt;&gt;&gt;
&gt;&gt;&gt; This is probably also the "simplest" to implement, as it means that the
&gt;&gt;&gt; happy eyeballs algorithm is contained to the socket handling code.
&gt;&gt;&gt;
&gt;&gt;&gt; I don't believe that requiring authentication to complete is going 
&gt;&gt;&gt; to do
&gt;&gt;&gt; anything more than generate load on relays. Either the packet loss is
&gt;&gt;&gt; high enough that the three way handshake fails, or there is low packet
&gt;&gt;&gt; loss. I don't think the case where requiring an additional few packets
&gt;&gt;&gt; make it through helps you choose a better connection is going to be 
&gt;&gt;&gt; that
&gt;&gt;&gt; common.
&gt;&gt;
&gt;&gt; Middleboxes that only break IPv4 TLS are rare, but they do exist:
&gt;&gt;
&gt;&gt;&gt;&gt; On 26 Jun 2019, at 13:33, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt;&gt; We have talked about this design in the team over the last few 
&gt;&gt;&gt;&gt;&gt; months.
&gt;&gt;&gt;&gt;&gt; Our key insights are that:
&gt;&gt;&gt;&gt;&gt; * most failed TCP connections fail immediately in the kernel, some
&gt;&gt;&gt;&gt;&gt;   fail quickly with a response from the router, and others are 
&gt;&gt;&gt;&gt;&gt; blackholed
&gt;&gt;&gt;&gt;&gt;   and time out
&gt;&gt;&gt;&gt;&gt; * it's unlikely that a client will fail to authenticate to a relay 
&gt;&gt;&gt;&gt;&gt; over one
&gt;&gt;&gt;&gt;&gt;   IP version, but succeed over the other IP version, because the 
&gt;&gt;&gt;&gt;&gt; directory
&gt;&gt;&gt;&gt;&gt;   authorities authenticate to each relay when they check reachability
&gt;&gt;&gt;&gt;&gt; * some censorship systems only break authentication over IPv4,
&gt;&gt;&gt;&gt;&gt;   but they are rare
&gt;&gt;
&gt;&gt; But we still want tor to work by default on those networks, so we should
&gt;&gt; try IPv4 and IPv6 all the way up to TLS.
&gt;&gt;
&gt;&gt;&gt; Of course it is always possible to add a "PreferredAddressFamily" 
&gt;&gt;&gt; option
&gt;&gt;&gt; to torrc for those that know they are on a bad IPv6 network.
&gt;&gt;
&gt;&gt; Tor already has this torrc option:
&gt;&gt; * ClientPreferIPv6ORPort - prefer IPv6, off by default
&gt;&gt;
&gt;&gt;&gt;&gt; 3.2. Recommendations for Implementation of Section 3.1 Proposals
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; We should start with implementing and testing the implementation as
&gt;&gt;&gt;&gt; described in Section 3.1.1 (First Successful Authentication), and
&gt;&gt;&gt;&gt; then doing the same for the implementations described in 3.1.2 and
&gt;&gt;&gt;&gt; 3.1.3 if desired or required.
&gt;&gt;&gt;
&gt;&gt;&gt; I'd want to see some justification with some experimental (or even
&gt;&gt;&gt; anecdotal) data as to why first successful authentication is the way to
&gt;&gt;&gt; go. 3.1.3 is going to be the simpler option and, in my opinion, the 
&gt;&gt;&gt; best
&gt;&gt;&gt; place to start.
&gt;&gt;
&gt;&gt; It increases the risk of network-wide DoS, and fails to work around some
&gt;&gt; censored networks. But it might be good for a simple initial test
&gt;&gt; implementation.
&gt;&gt;
&gt;&gt;&gt; 3.1.3 can likely be implemented using exactly the algorithm in 
&gt;&gt;&gt; section 5
&gt;&gt;&gt; of RFC 8305, excluding portions relating to DNS because we already have
&gt;&gt;&gt; all the candidates from the server descriptor.
&gt;&gt;
&gt;&gt; All supported Tor client versions use microdescriptors, not server
&gt;&gt; descriptors. Since consensus method 28 in tor 0.3.3.6, microdesc
&gt;&gt; consensuses contain IPv6 addresses. (This is important during 
&gt;&gt; bootstrap.)
&gt;&gt;
&gt;&gt; See proposal 283 for context:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/283-ipv6-in-micro-consensus.txt 
&gt;&gt;
&gt;&gt;
&gt;&gt; We also intend to use this proposal to connect to the hard-coded 
&gt;&gt; fallbacks
&gt;&gt; and authorities, some of which have IPv6 addresses.
&gt;&gt;
&gt;&gt; Ideally, we shouldn't need to change any of the code from proposal 283.
&gt;&gt;
&gt;&gt; But we might need to change the relay selection logic, because otherwise
&gt;&gt; tor could chose a run of IPv4-only relays, and fail to bootstrap on an
&gt;&gt; IPv6-only network.
&gt;&gt;
&gt;&gt; So we need to add another section to the proposal, I guess.
&gt;&gt;
&gt;&gt;&gt;&gt; 4. Handling Connection Successes And Failures
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; Should a connection to a guard succeed and is authenticated via TLS,
&gt;&gt;&gt;&gt; we can then use the connection. In this case, we should cancel all
&gt;&gt;&gt;&gt; other connection timers and in-progress connections. Cancelling the
&gt;&gt;&gt;&gt; timers is so we don't attempt new unnecessary connections when our
&gt;&gt;&gt;&gt; existing connection is successful, preventing denial-of-service
&gt;&gt;&gt;&gt; risks.
&gt;&gt;&gt;&gt;
&gt;&gt;&gt;&gt; However, if we fail all available and allowed connections, we
&gt;&gt;&gt; should tell
&gt;&gt;&gt;&gt; the rest of Tor that the connection has failed. This is so we can
&gt;&gt;&gt; attempt
&gt;&gt;&gt;&gt; another guard relay.
&gt;&gt;&gt;
&gt;&gt;&gt; Some issues that come to mind:
&gt;&gt;&gt;
&gt;&gt;&gt; - I wonder how many relay IPv6 addresses are actually using tunnels. At
&gt;&gt;&gt; the levels of throughput they use, that overhead adds up. What is the
&gt;&gt;&gt; additional bandwidth cost and what is the impact of reduced MSS?
&gt;&gt;
&gt;&gt; Here's one way we can mitigate this overhead:
&gt;&gt; * tor clients prefer IPv4 by default,
&gt;&gt; * tor uses a 1.5 second delay between IPv4 and IPv6 connections
&gt;&gt;
&gt;&gt; That way, most clients that can use IPv4, will end up using IPv4, and
&gt;&gt; avoid this overhead.
&gt;&gt;
&gt;&gt; The clients that don't will fall into two categories:
&gt;&gt; * IPv6-only, so the overhead is a small price to pay for 
&gt;&gt; connectivity, or
&gt;&gt; * high-latency, so the overhead might not be noticeable anyway.
&gt;&gt;
&gt;&gt;&gt; - What are the tunables? RFC8305 has some that would be applicable, and
&gt;&gt;&gt; probably all of them could be consensus parameters if we wanted to tune
&gt;&gt;&gt; them:
&gt;&gt;&gt; * First Address Family Count
&gt;&gt;
&gt;&gt; This value must be fixed at 1.
&gt;&gt;
&gt;&gt; Tor's code only connects to 1 relay at a time, and that relay only has
&gt;&gt; 1 address from each family. Increasing the number of addresses per relay
&gt;&gt; or per "happy eyeballs" attempt is out of scope for this proposal.
&gt;&gt;
&gt;&gt;&gt; * Connection Attempt Delay
&gt;&gt;
&gt;&gt; From Onionperf data, I think this should default to 1.5 seconds.
&gt;&gt;
&gt;&gt; But I'm happy to modify it based on testing, or future Onionperf
&gt;&gt; measurements. Let's make it a torrc option and consensus parameter?
&gt;&gt;
&gt;&gt;&gt; * Minimum Connection Attempt Delay
&gt;&gt;
&gt;&gt; Dynamically adjusting the delay per client is out of scope for this
&gt;&gt; proposal. It also carries privacy risks, unless we add some jitter.
&gt;&gt;
&gt;&gt; Let's fix the minimum at 10 milliseconds as recommended in RFC
&gt;&gt; 8305, and adjust it network-wide using the "Connection Attempt Delay"
&gt;&gt; consensus parameter.
&gt;&gt;
&gt;&gt;&gt; * Maximum Connection Attempt Delay
&gt;&gt;
&gt;&gt; As above, but if we choose to include TLS in the delay, we should
&gt;&gt; set the maximum much higher than the RFC 8305 recommendation of
&gt;&gt; 2 seconds. Let's make it 30 seconds, to match tor's existing timeout.
&gt;&gt;
&gt;&gt; (Users might want to set the delay this high on very slow networks.)
&gt;&gt;
&gt;&gt;&gt; - How do we know what is going on? We do not collect metrics from
&gt;&gt;&gt; clients about their usage, but we do collect metrics from relays. Are
&gt;&gt;&gt; there any counters we should be adding to extra info descriptors to 
&gt;&gt;&gt; help
&gt;&gt;&gt; us see whether or not this is working?
&gt;&gt;
&gt;&gt; We should definitely be collecting the number of IPv4 and IPv6 
&gt;&gt; connections
&gt;&gt; to ORPorts. We should probably also distinguish authenticated
&gt;&gt; (relay, authority reachability) and unauthenticated (client, bridge)
&gt;&gt; connections.
&gt;&gt;
&gt;&gt; We should also be including these stats in the heartbeat logs.
&gt;&gt;
&gt;&gt; We were going to wait for PrivCount for these stats, but we didn't 
&gt;&gt; manage
&gt;&gt; to implement it in the sponsored time we had available. So I don't think
&gt;&gt; it makes sense to block further stats on PrivCount at this time.
&gt;&gt;
&gt;&gt;&gt; Could clients help relays by
&gt;&gt;&gt; reporting that a connection is being closed because they have another
&gt;&gt;&gt; connection? (I don't know the answer, but RFC8305 does explicitly point
&gt;&gt;&gt; out that it is a mitigation technique designed to hide problems from 
&gt;&gt;&gt; the
&gt;&gt;&gt; user, which means that those problems might come back to haunt us later
&gt;&gt;&gt; if we're not on top of them.)
&gt;&gt;
&gt;&gt;
&gt;&gt; Clients don't report circuit or stream close reasons to relays, to
&gt;&gt; preserve privacy and avoid information leaks.
&gt;&gt;
&gt;&gt; Clients can't always report connection close reasons over the Tor
&gt;&gt; protocol, because it sits below the TLS layer, but connections can be
&gt;&gt; closed at the TCP stage. (Or any subsequent stage, including TLS, link,
&gt;&gt; or link authentication.)
&gt;&gt;
&gt;&gt; T
&gt;&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190802000519</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-02 00:05:19-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi,

&gt; On 2 Aug 2019, at 09:20, NOC &lt;tor@afo-tm.org&gt; wrote:
&gt; 
&gt; I see this staying longer with IPv4 longer than we should also problematic, we are \
&gt; at the point that there are providers out there who do have more clients than IPv4 \
&gt; space which results in having them making carrier grade NAT. Some of them have the \
&gt; problem that their NAT gear gets maxed out at peak hours which results in heavy \
&gt; packet loss and very slow speeds, while their IPv6 connection is perfectly fine. \
&gt; That will not get better, i guess it will get worse in the future. So i would also \
&gt; prefer to use IPv6 if it works better.

Currently, Tor clients don't use IPv6 unless they are specifically configured to use \
it. Some apps (OnionBrowser) use the OS network APIs to automatically configure Tor, \
but most don't.

This proposal makes sure that Tor clients try IPv4, then try IPv6 after a short \
delay. If either works, the client will connect to the Tor network.

At this stage, only 20% of guards support IPv6. But we are going to make sure at \
least one of the three client primary guards has IPv6. Ensuring at least one IPv6 \
client guard will increase traffic to IPv6 guards by up to 1.7x, which could cause \
load balancing issues.

So we need to counter this load imbalance by trying IPv6 after IPv4.

Once 33% of non-exit guards support IPv6, we can reduce the delay, or try IPv6 first \
at random. Once 67% of non-exit guards support IPv6, we can try IPv6 first.

We are working on a funding proposal that will increase the number of IPv6 relays by \
automatically detecting, testing, and using IPv6 addresses.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190802030222</emailId><senderName>NOC</senderName><senderEmail>tor@afo-tm.org</senderEmail><timestampReceived>2019-08-02 03:02:22-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

That would imply that guard relays run at 100% capacity which i can't 
confirm for any of my guards. Also seeing decline in usage would maybe 
give a incentive for some relay operators to configure IPv6 in their 
torrc, because there are thousands of relays which do have IPv6 
connectivity, but the operator simply didn't configure it because it is 
not as easy as putting "ORPort 9001" in your torrc and it listens on 
IPv4 and IPv6.

Sadly ORPort 9001 gives you a working relay which listens only on IPv4, 
so i would say the lack of IPv6 enabled relays is a problem which is 
created by how the config works and that a default torrc file loses no 
word about IPv6.

Beside that if i look at 
https://metrics.torproject.org/bandwidth-flags.html the Tor network 
could lose their entire IPv4 only guards and still work, but after that 
guards would indeed run at 100% capacity.

On 02.08.2019 02:05, teor wrote:
&gt; Hi,
&gt; 
&gt; &gt; On 2 Aug 2019, at 09:20, NOC&lt;tor@afo-tm.org&gt;  wrote:
&gt; &gt; 
&gt; &gt; I see this staying longer with IPv4 longer than we should also problematic, we \
&gt; &gt; are at the point that there are providers out there who do have more clients than \
&gt; &gt; IPv4 space which results in having them making carrier grade NAT. Some of them \
&gt; &gt; have the problem that their NAT gear gets maxed out at peak hours which results \
&gt; &gt; in heavy packet loss and very slow speeds, while their IPv6 connection is \
&gt; &gt; perfectly fine. That will not get better, i guess it will get worse in the \
&gt; &gt; future. So i would also prefer to use IPv6 if it works better.
&gt; Currently, Tor clients don't use IPv6 unless they are specifically configured to \
&gt; use it. Some apps (OnionBrowser) use the OS network APIs to automatically configure \
&gt; Tor, but most don't. 
&gt; This proposal makes sure that Tor clients try IPv4, then try IPv6 after a short \
&gt; delay. If either works, the client will connect to the Tor network. 
&gt; At this stage, only 20% of guards support IPv6. But we are going to make sure at \
&gt; least one of the three client primary guards has IPv6. Ensuring at least one IPv6 \
&gt; client guard will increase traffic to IPv6 guards by up to 1.7x, which could cause \
&gt; load balancing issues. 
&gt; So we need to counter this load imbalance by trying IPv6 after IPv4.
&gt; 
&gt; Once 33% of non-exit guards support IPv6, we can reduce the delay, or try IPv6 \
&gt; first at random. Once 67% of non-exit guards support IPv6, we can try IPv6 first. 
&gt; We are working on a funding proposal that will increase the number of IPv6 relays \
&gt; by automatically detecting, testing, and using IPv6 addresses. 
&gt; T
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190802043722</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-02 04:37:22-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 2 Aug 2019, at 13:02, NOC &lt;tor@afo-tm.org&gt; wrote:
&gt; 
&gt; That would imply that guard relays run at 100% capacity which i can't confirm for \
&gt; any of my guards.

I have run guards at 100% before, but it's not ideal.

Generally, Tor load-balances traffic to make sure that clients get consistently good \
bandwidth and latency. Adding significant extra load to some relays makes it hard to \
achieve this goal. In particular, 100% relay usage can significantly increase \
latency.

&gt; Also seeing decline in usage would maybe give a incentive for some relay operators \
&gt; to configure IPv6 in their torrc,

But IPv4-only relays *will* see a decrease in traffic, and IPv6 relays will see an \
increase.

Sending 33% of client traffic to the 20% of guards that have IPv6 will cause an \
increase in usage for IPv6 relays (and a decrease for IPv4 relays). Even if we check \
the relay's IPv6 address after its IPv4 address, the traffic is still going to that \
relay.

Tor clients on IPv6-only networks will also add extra to IPv6 relays. These clients \
don't work now, so we don't know how many there are.

Once we've tested IPv6 in at least one stable release, we will have a better idea of \
the load balancing impacts of IPv6. And we can think about changing the address \
order.

Another reason that we want to check IPv4 first is that is preserves tor's current \
behaviour. Adding an extra attempt at IPv6 once IPv4 has failed, is a smaller change \
that is unlikely to have any negative impacts.

(Our last attempt at adding automatic client IPv6 didn't work, and we had to disable \
it in Tor Browser alpha.)

&gt; because there are thousands of relays which do have IPv6 connectivity, but the \
&gt; operator simply didn't configure it because it is not as easy as putting "ORPort \
&gt; 9001" in your torrc and it listens on IPv4 and IPv6. 
&gt; Sadly ORPort 9001 gives you a working relay which listens only on IPv4, so i would \
&gt; say the lack of IPv6 enabled relays is a problem which is created by how the config \
&gt; works

&gt; &gt; We are working on a funding proposal that will increase the number of IPv6 relays \
&gt; &gt; by automatically detecting, testing, and using IPv6 addresses.

&gt; and that a default torrc file loses no word about IPv6.

You're right, I opened a ticket to add IPv6 ORPorts to the example torrcs:
https://trac.torproject.org/projects/tor/ticket/31320

&gt; Beside that if i look at https://metrics.torproject.org/bandwidth-flags.html the \
&gt; Tor network could lose their entire IPv4 only guards and still work, but after that \
&gt; guards would indeed run at 100% capacity.

See my answer above: 100% capacity is not good for the network or clients.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 2 Aug 2019, at 13:02, \
NOC &lt;&lt;a href="mailto:tor@afo-tm.org"&gt;tor@afo-tm.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;That would imply \
that guard relays run at 100% capacity which i can't confirm for any of my \
guards.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;I have run guards at 100% before, but \
it's not ideal.&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Generally, Tor load-balances traffic to make \
sure that clients get consistently good bandwidth and latency. Adding significant \
extra load to some relays makes it hard to achieve this goal. In particular, 100% \
relay usage can significantly increase latency.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;Also seeing decline in usage would maybe give a incentive for some \
relay operators to configure IPv6 in their \
torrc,&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;But IPv4-only relays *will* see a \
decrease in traffic, and IPv6 relays will see an \
increase.&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sending 33% of client traffic to the 20% of guards \
that have IPv6 will cause an increase in usage for IPv6 relays (and a decrease for \
IPv4 relays). Even if we check the relay's IPv6 address after its IPv4 address, the \
traffic is still going to that relay.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Tor clients on \
IPv6-only networks will also add extra to IPv6 relays. These clients don't work now, \
so we don't know how many there are.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Once we've tested IPv6 in at least \
one stable release, we will have a better idea of the load balancing impacts of IPv6. \
And we can think about changing the address order.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Another reason that we want to \
check IPv4 first is that is preserves tor's current behaviour. Adding&lt;/span&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt; an extra attempt at IPv6 once \
IPv4 has failed, is a smaller change that is unlikely to have any negative \
impacts.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;(Our last attempt at adding automatic client IPv6 didn't work, and we had to \
disable it in Tor Browser alpha.)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;because there are thousands of relays which do have IPv6 \
connectivity, but the operator simply didn't configure it because it is not as easy \
as putting "ORPort 9001" in your torrc and it listens on IPv4 and \
IPv6.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Sadly ORPort 9001 gives you a working relay \
which listens only on IPv4, so i would say the lack of IPv6 enabled relays is a \
problem which is created by how the config \
works&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;blockquote type="cite"&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: \
rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;We are working on a funding \
proposal that will increase the number of IPv6 relays by automatically detecting, \
testing, and using IPv6 \
addresses.&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt; and that a default torrc file loses no word about \
IPv6.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You're right, I opened a \
ticket to add IPv6 ORPorts to the example torrcs:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/31320#ticket"&gt;https://trac.torproject.org/projects/tor/ticket/31320&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;Beside that if i look at &lt;a \
href="https://metrics.torproject.org/bandwidth-flags.html"&gt;https://metrics.torproject.org/bandwidth-flags.html&lt;/a&gt; \
the Tor network could lose their entire IPv4 only guards and still work, but after \
that guards would indeed run at 100% \
capacity.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;See my answer above: 100% \
capacity is not good for the network or \
clients.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190802152510</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-08-02 15:25:10-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

On Tue, Jun 25, 2019 at 9:24 PM &lt;neel@neelc.org&gt; wrote:
&gt;
&gt; Hi tor-dev@ mailing list,
&gt;
&gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt;
&gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative
&gt; to Prop299 as requested here:
&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;
&gt; The GitHub pull request is here:
&gt; https://github.com/torproject/torspec/pull/87
&gt;
&gt; Thank You,

Hi, Neel!  Thanks for working on this; I believe it's come a long way
in the last month!

Here are a few questions based on the current PR.

* We need to revise the "relay selection changes" to match the
vocabulary of guard-spec.txt.  It's easy to say "select at least one
relay with an ipv6 address", but it's not trivial to do so in
practice.  (Also, do we do this always, or do we do this only when we
think we can connect to ipv6 addresses?)

* We also need to think about what this algorithm means in terms of
guard-spec.txt's data structures.  Does it mean that each connection
to a guard is replaced with two?  Does it mean that some of the
reachability variables are replaced by two?

* The proposal considers TCP success vs authentication success as
indicating that a connection has succeeded. There is a good
alternative that reduces CPU load, however.  The TLS handshake has
multiple phases, and the expensive CPU stuff all happens after we
receive a ServerHello message.  If we treat an incoming ServerHello as
meaning that the connection will be successful, we can avoid most
wasted handshakes.

[This would definitely not handle the problem where one of a server's
addresses is correct but the other address is a different server
entirely, but I hope we can catch that earlier in data flow, possibly
at the authorities.]

* The 1.5 second delay, and associated other hardcore times, should be
a network parameter, transmitted in the consensus.  1.5 seconds can be
the default, but we will want to keep the ability to tune it later on.

* For pluggable transports, do we want to manage this process
ourselves, or delegate the decisions to the PT?  Each option has its
own benefits and risks.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190802184449</emailId><senderName>Hajar El</senderName><senderEmail>elh56761@gmail.com</senderEmail><timestampReceived>2019-08-02 18:44:49-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/alternative)]


Hi i am a new partner in tor-dev can you help me te understand the stuffs
here
Le 2 ao=C3=BBt 2019 16:25, "Nick Mathewson" &lt;nickm@torproject.org&gt; a =C3=A9=
crit :
&gt;
&gt; On Tue, Jun 25, 2019 at 9:24 PM &lt;neel@neelc.org&gt; wrote:
&gt; &gt;
&gt; &gt; Hi tor-dev@ mailing list,
&gt; &gt;
&gt; &gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt; &gt;
&gt; &gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative
&gt; &gt; to Prop299 as requested here:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt; &gt;
&gt; &gt; The GitHub pull request is here:
&gt; &gt; https://github.com/torproject/torspec/pull/87
&gt; &gt;
&gt; &gt; Thank You,
&gt;
&gt; Hi, Neel!  Thanks for working on this; I believe it's come a long way
&gt; in the last month!
&gt;
&gt; Here are a few questions based on the current PR.
&gt;
&gt; * We need to revise the "relay selection changes" to match the
&gt; vocabulary of guard-spec.txt.  It's easy to say "select at least one
&gt; relay with an ipv6 address", but it's not trivial to do so in
&gt; practice.  (Also, do we do this always, or do we do this only when we
&gt; think we can connect to ipv6 addresses?)
&gt;
&gt; * We also need to think about what this algorithm means in terms of
&gt; guard-spec.txt's data structures.  Does it mean that each connection
&gt; to a guard is replaced with two?  Does it mean that some of the
&gt; reachability variables are replaced by two?
&gt;
&gt; * The proposal considers TCP success vs authentication success as
&gt; indicating that a connection has succeeded. There is a good
&gt; alternative that reduces CPU load, however.  The TLS handshake has
&gt; multiple phases, and the expensive CPU stuff all happens after we
&gt; receive a ServerHello message.  If we treat an incoming ServerHello as
&gt; meaning that the connection will be successful, we can avoid most
&gt; wasted handshakes.
&gt;
&gt; [This would definitely not handle the problem where one of a server's
&gt; addresses is correct but the other address is a different server
&gt; entirely, but I hope we can catch that earlier in data flow, possibly
&gt; at the authorities.]
&gt;
&gt; * The 1.5 second delay, and associated other hardcore times, should be
&gt; a network parameter, transmitted in the consensus.  1.5 seconds can be
&gt; the default, but we will want to keep the ability to tune it later on.
&gt;
&gt; * For pluggable transports, do we want to manage this process
&gt; ourselves, or delegate the decisions to the PT?  Each option has its
&gt; own benefits and risks.
&gt;
&gt; cheers,
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;p dir="ltr"&gt;Hi i am a new partner in tor-dev can you help me te understand the \
stuffs here&lt;br&gt; Le  2 août 2019 16:25, "Nick Mathewson" &lt;&lt;a \
href="mailto:nickm@torproject.org"&gt;nickm@torproject.org&lt;/a&gt;&gt; a écrit  :&lt;br&gt; \
&gt;&lt;br&gt; &gt; On Tue, Jun 25, 2019 at 9:24 PM &lt;&lt;a \
href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt; &gt; Hi tor-dev@ mailing list,&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative&lt;br&gt;
&gt; &gt; to Prop299 as requested here:&lt;br&gt;
&gt; &gt; &lt;a href="https://trac.torproject.org/projects/tor/ticket/29801"&gt;https://trac.torproject.org/projects/tor/ticket/29801&lt;/a&gt;&lt;br&gt;
 &gt; &gt;&lt;br&gt;
&gt; &gt; The GitHub pull request is here:&lt;br&gt;
&gt; &gt; &lt;a href="https://github.com/torproject/torspec/pull/87"&gt;https://github.com/torproject/torspec/pull/87&lt;/a&gt;&lt;br&gt;
 &gt; &gt;&lt;br&gt;
&gt; &gt; Thank You,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Hi, Neel!   Thanks for working on this; I believe it's come a long way&lt;br&gt;
&gt; in the last month!&lt;br&gt;
&gt;&lt;br&gt;
&gt; Here are a few questions based on the current PR.&lt;br&gt;
&gt;&lt;br&gt;
&gt; * We need to revise the "relay selection changes" to match the&lt;br&gt;
&gt; vocabulary of guard-spec.txt.   It's easy to say "select at least \
one&lt;br&gt; &gt; relay with an ipv6 address", but it's not trivial to do so \
in&lt;br&gt; &gt; practice.   (Also, do we do this always, or do we do this only when \
we&lt;br&gt; &gt; think we can connect to ipv6 addresses?)&lt;br&gt;
&gt;&lt;br&gt;
&gt; * We also need to think about what this algorithm means in terms of&lt;br&gt;
&gt; guard-spec.txt's data structures.   Does it mean that each connection&lt;br&gt;
&gt; to a guard is replaced with two?   Does it mean that some of the&lt;br&gt;
&gt; reachability variables are replaced by two?&lt;br&gt;
&gt;&lt;br&gt;
&gt; * The proposal considers TCP success vs authentication success as&lt;br&gt;
&gt; indicating that a connection has succeeded. There is a good&lt;br&gt;
&gt; alternative that reduces CPU load, however.   The TLS handshake has&lt;br&gt;
&gt; multiple phases, and the expensive CPU stuff all happens after we&lt;br&gt;
&gt; receive a ServerHello message.   If we treat an incoming ServerHello as&lt;br&gt;
&gt; meaning that the connection will be successful, we can avoid most&lt;br&gt;
&gt; wasted handshakes.&lt;br&gt;
&gt;&lt;br&gt;
&gt; [This would definitely not handle the problem where one of a server's&lt;br&gt;
&gt; addresses is correct but the other address is a different server&lt;br&gt;
&gt; entirely, but I hope we can catch that earlier in data flow, possibly&lt;br&gt;
&gt; at the authorities.]&lt;br&gt;
&gt;&lt;br&gt;
&gt; * The 1.5 second delay, and associated other hardcore times, should be&lt;br&gt;
&gt; a network parameter, transmitted in the consensus.   1.5 seconds can be&lt;br&gt;
&gt; the default, but we will want to keep the ability to tune it later on.&lt;br&gt;
&gt;&lt;br&gt;
&gt; * For pluggable transports, do we want to manage this process&lt;br&gt;
&gt; ourselves, or delegate the decisions to the PT?   Each option has its&lt;br&gt;
&gt; own benefits and risks.&lt;br&gt;
&gt;&lt;br&gt;
&gt; cheers,&lt;br&gt;
&gt; -- &lt;br&gt;
&gt; Nick&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
 &gt; &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/p&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190804233917</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-04 23:39:17-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Nick,

&gt; On 3 Aug 2019, at 01:25, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt;&gt; On Tue, Jun 25, 2019 at 9:24 PM &lt;neel@neelc.org&gt; wrote:
&gt;&gt; 
&gt;&gt; Hi tor-dev@ mailing list,
&gt;&gt; 
&gt;&gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt;&gt; 
&gt;&gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an alternative
&gt;&gt; to Prop299 as requested here:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt; 
&gt;&gt; The GitHub pull request is here:
&gt;&gt; https://github.com/torproject/torspec/pull/87
&gt;&gt; 
&gt;&gt; Thank You,
&gt; 
&gt; Hi, Neel!  Thanks for working on this; I believe it's come a long way
&gt; in the last month!
&gt; 
&gt; Here are a few questions based on the current PR.
&gt; 
&gt; * We need to revise the "relay selection changes" to match the
&gt; vocabulary of guard-spec.txt.  It's easy to say "select at least one
&gt; relay with an ipv6 address", but it's not trivial to do so in
&gt; practice.

On the pull request, I suggested that we make sure that at least one
of the three primary guards has IPv6. (This change might also place
a similar IPv6 requirement on the larger sets of guards chosen by
clients. Is there a nice Venn diagram of all the guard sets?)

Here's one way we could implement an IPv6 guard requirement:

When choosing the last primary guard (or rotating any primary guard),
if there are no IPv6 primary guards, pass a new flag CRN_NEED_IPV6
to router_choose_random_node().

CRN_NEED_IPV6 can be implemented like CRN_PREF_ADDR, but with
a hard-coded preference for IPv6.

/* On clients, only provide nodes that satisfy ClientPreferIPv6OR */
  CRN_PREF_ADDR = 1&lt;&lt;7,

(I cover the non-guard cases below.)

&gt; (Also, do we do this always, or do we do this only when we
&gt; think we can connect to ipv6 addresses?)

Happy eyeballs does not and should not require the client to guess IPv6
reachability. Tor can't reliably get that information, because the results of
OS network APIs may be unreliable, unavailable, or incorrect. (And past
connectivity is not a reliable guide to future connectivity, particularly on
mobile.)

If we want to try to guess, that's an optimisation, which belongs in the
"optional optimisations" section of the proposal.

&gt; * We also need to think about what this algorithm means in terms of
&gt; guard-spec.txt's data structures.  Does it mean that each connection
&gt; to a guard is replaced with two?  Does it mean that some of the
&gt; reachability variables are replaced by two?

I would prefer a new low-level network module that takes an IPv4 and
IPv6 address for each connection request, and reports success if
either address succeeds. And failure if both fail.

(Note that IPv4-only, dual-stack, and IPv6-only are all valid address
combinations. Relays, authorities, and fallbacks are IPv4 or dual stack,
bridge lines are currently IPv4-only or IPv6-only, and v3 single onion
service rendezvous direct connections can be all three.)

This design would have a minimal impact on existing guard data
structures and guard code.

I'd like to put any other guard changes in the "optional optimisations"
section of the proposal. Unless we are sure that they are essential.

&gt; * The proposal considers TCP success vs authentication success as
&gt; indicating that a connection has succeeded. There is a good
&gt; alternative that reduces CPU load, however.  The TLS handshake has
&gt; multiple phases, and the expensive CPU stuff all happens after we
&gt; receive a ServerHello message.  If we treat an incoming ServerHello as
&gt; meaning that the connection will be successful, we can avoid most
&gt; wasted handshakes.

Sounds sensible. Let's use the ServerHellos as the minimal viable product
for merging and release in an alpha. So this feature belongs in the
"minimal viable product" section of the proposal.

Initial feasibility testing can just use TCP connections though.

&gt; [This would definitely not handle the problem where one of a server's
&gt; addresses is correct but the other address is a different server
&gt; entirely, but I hope we can catch that earlier in data flow, possibly
&gt; at the authorities.]

Authority IPv4 or IPv6 reachability checks should catch this issue and
mark the relayMas not Running. (And therefore it won't be in the client's
consensus 2-4 hours after the bad address is in the descriptor or on the
machine.)

IPv4 reachability checks on relays should also catch most IPv4
misconfigurations.

We also have a funding proposal to do IPv6 reachability checks on relays,
which will catch IPv6 misconfigurations before relays upload their
descriptors.

&gt; * The 1.5 second delay, and associated other hardcore times, should be
&gt; a network parameter, transmitted in the consensus.  1.5 seconds can be
&gt; the default, but we will want to keep the ability to tune it later on.

David and I suggested this change on the pull request.

&gt; * For pluggable transports, do we want to manage this process
&gt; ourselves, or delegate the decisions to the PT?  Each option has its
&gt; own benefits and risks.

I suggested on the proposal pull request that we make changing
bridge lines (including pluggable transports) out of scope for this
proposal.

Bridge and PT lines don't currently support multiple IP addresses,
and some transports (meek, snowflake) use a placeholder address,
and the transport doesn't tell tor the real address.

So they can use the new module API for consistency, but they will
only ever pass it an IPv4-only or IPv6-only bridge connect request.

Perhaps we need an "out of scope" section in the proposal.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi Nick,&lt;div&gt;&lt;br&gt;&lt;div&gt;&lt;div dir="ltr"&gt;On 3 Aug \
2019, at 01:25, Nick Mathewson &lt;&lt;a \
href="mailto:nickm@torproject.org"&gt;nickm@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;On Tue, Jun 25, 2019 \
at 9:24 PM &lt;&lt;a href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Hi tor-dev@ mailing list,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I have a new \
proposal: A Tor Implementation of IPv6 Happy \
Eyeballs&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;This is to \
implement Tor IPv6 Happy Eyeballs and acts as an \
alternative&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;to Prop299 as \
requested here:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/29801"&gt;https://trac.torproject.org/projects/tor/ticket/29801&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;The GitHub \
pull request is here:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://github.com/torproject/torspec/pull/87"&gt;https://github.com/torproject/torspec/pull/87&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Thank \
You,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Hi, Neel!  Thanks for working \
on this; I believe it's come a long way&lt;/span&gt;&lt;br&gt;&lt;span&gt;in the last \
month!&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Here are a few questions based on the current \
PR.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;* We need to revise the "relay selection \
changes" to match the&lt;/span&gt;&lt;br&gt;&lt;span&gt;vocabulary of guard-spec.txt.  It's easy \
to say "select at least one&lt;/span&gt;&lt;br&gt;&lt;span&gt;relay with an ipv6 address", but it's not \
trivial to do so in&lt;/span&gt;&lt;br&gt;&lt;span&gt;practice.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;On \
the pull request, I suggested that we make sure that at least one&lt;/div&gt;&lt;div&gt;of the \
three primary guards has IPv6. (This change might also place&lt;/div&gt;&lt;div&gt;a similar IPv6 \
requirement on the larger sets of guards chosen by&lt;/div&gt;&lt;div&gt;clients. Is there a nice \
Venn diagram of all the guard sets?)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's one way we could \
implement an IPv6 guard requirement:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;When choosing the last \
primary guard (or rotating any primary guard),&lt;/div&gt;&lt;div&gt;if there are no IPv6 primary \
guards, pass a new &lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;flag \
CRN_NEED_IPV6&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;to router_choose_random_node().&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class="n" \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
class="n" style="background-color: rgba(255, 255, 255, 0);"&gt;CRN_NEED_IPV6 can be \
implemented like &lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;span class="n"&gt;CRN_PREF_ADDR, but with&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;span \
class="n"&gt;a &lt;/span&gt;&lt;/span&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;hard-coded preference for IPv6.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;span class="n"&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span class="n" \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;span class="cm"&gt;/* On clients, only provide \
nodes that satisfy ClientPreferIPv6OR */&lt;/span&gt;  &lt;span class="n"&gt;CRN_PREF_ADDR&lt;/span&gt; \
&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi" style="font-weight: bold;"&gt;1&lt;/span&gt;&lt;span \
class="o"&gt;&lt;&lt;&lt;/span&gt;&lt;span class="mi" style="font-weight: bold;"&gt;7&lt;/span&gt;&lt;span \
class="p"&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(I cover the non-guard cases \
below.)&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;(Also, do we do this \
always, or do we do this only when we&lt;/span&gt;&lt;br&gt;&lt;span&gt;think we can connect to ipv6 \
addresses?)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Happy eyeballs does not \
and should not require the client to guess IPv6&lt;/div&gt;&lt;div&gt;reachability. Tor can't \
reliably get that information, because the results of&lt;/div&gt;&lt;div&gt;OS network APIs may \
be unreliable, unavailable, or incorrect. (And past&lt;/div&gt;&lt;div&gt;connectivity is not a \
reliable guide to future connectivity, particularly \
on&lt;/div&gt;&lt;div&gt;mobile.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we want to try to guess, that's an \
optimisation, which belongs in the&lt;/div&gt;&lt;div&gt;"optional optimisations" section of the \
proposal.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;* We also need to \
think about what this algorithm means in terms of&lt;/span&gt;&lt;br&gt;&lt;span&gt;guard-spec.txt's \
data structures.  Does it mean that each connection&lt;/span&gt;&lt;br&gt;&lt;span&gt;to a guard \
is replaced with two?  Does it mean that some of \
the&lt;/span&gt;&lt;br&gt;&lt;span&gt;reachability variables are replaced by \
two?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I would prefer a new low-level \
network module that takes an IPv4 and&lt;/div&gt;&lt;div&gt;IPv6 address for each connection \
request, and reports success if&lt;/div&gt;&lt;div&gt;either address succeeds. And failure if \
both fail.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;(Note that IPv4-only, dual-stack, and IPv6-only \
are all valid address&lt;/div&gt;&lt;div&gt;combinations. Relays, authorities, and fallbacks are \
IPv4 or dual stack,&lt;/div&gt;&lt;div&gt;bridge lines are currently IPv4-only or IPv6-only, and \
v3 single onion&lt;/div&gt;&lt;div&gt;service rendezvous direct connections can be all \
three.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This design would have a minimal impact on existing \
guard data&lt;/div&gt;&lt;div&gt;structures and guard code.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'd like to \
put any other guard changes in the "optional optimisations"&lt;/div&gt;&lt;div&gt;section of the \
proposal. Unless we are sure that they are essential.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;* The proposal considers TCP success vs \
authentication success as&lt;/span&gt;&lt;br&gt;&lt;span&gt;indicating that a connection has succeeded. \
There is a good&lt;/span&gt;&lt;br&gt;&lt;span&gt;alternative that reduces CPU load, however.  The \
TLS handshake has&lt;/span&gt;&lt;br&gt;&lt;span&gt;multiple phases, and the expensive CPU stuff all \
happens after we&lt;/span&gt;&lt;br&gt;&lt;span&gt;receive a ServerHello message.  If we treat an \
incoming ServerHello as&lt;/span&gt;&lt;br&gt;&lt;span&gt;meaning that the connection will be \
successful, we can avoid most&lt;/span&gt;&lt;br&gt;&lt;span&gt;wasted \
handshakes.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sounds sensible. Let's \
use the ServerHellos as the minimal viable product&lt;/div&gt;&lt;div&gt;for merging and release \
in an alpha. So this feature belongs in the&lt;/div&gt;&lt;div&gt;"minimal viable product" \
section of the proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Initial feasibility testing can \
just use TCP connections though.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;[This would definitely not handle the problem where one of a \
server's&lt;/span&gt;&lt;br&gt;&lt;span&gt;addresses is correct but the other address is a different \
server&lt;/span&gt;&lt;br&gt;&lt;span&gt;entirely, but I hope we can catch that earlier in data flow, \
possibly&lt;/span&gt;&lt;br&gt;&lt;span&gt;at the \
authorities.]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Authority IPv4 or IPv6 \
reachability checks should catch this issue and&lt;/div&gt;&lt;div&gt;mark the relayMas not \
Running. (And therefore it won't be in the client's&lt;/div&gt;&lt;div&gt;consensus 2-4 hours \
after the bad address is in the descriptor or on \
the&lt;/div&gt;&lt;div&gt;machine.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;IPv4 reachability checks on relays \
should also catch most IPv4&lt;/div&gt;&lt;div&gt;misconfigurations.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We \
also have a funding proposal to do IPv6 reachability checks on \
relays,&lt;/div&gt;&lt;div&gt;which will catch IPv6 misconfigurations before relays upload \
their&lt;/div&gt;&lt;div&gt;descriptors.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;* \
The 1.5 second delay, and associated other hardcore times, should \
be&lt;/span&gt;&lt;br&gt;&lt;span&gt;a network parameter, transmitted in the consensus.  1.5 \
seconds can be&lt;/span&gt;&lt;br&gt;&lt;span&gt;the default, but we will want to keep the ability to \
tune it later on.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;David and I \
suggested this change on the pull request.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;* For pluggable transports, do we want to manage this \
process&lt;/span&gt;&lt;br&gt;&lt;span&gt;ourselves, or delegate the decisions to the PT?  Each \
option has its&lt;/span&gt;&lt;br&gt;&lt;span&gt;own benefits and \
risks.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;I suggested on the proposal \
pull request that we make changing&lt;/div&gt;&lt;div&gt;bridge lines (including pluggable \
transports) out of scope for this&lt;/div&gt;&lt;div&gt;proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Bridge \
and PT lines don't currently support multiple IP addresses,&lt;/div&gt;&lt;div&gt;and some \
transports (meek, snowflake) use a placeholder address,&lt;/div&gt;&lt;div&gt;and the transport \
doesn't tell tor the real address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So they can use the new \
module API for consistency, but they will&lt;/div&gt;&lt;div&gt;only ever pass it an IPv4-only or \
IPv6-only bridge connect request.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Perhaps we need an "out of \
scope" section in the proposal.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190906120131</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-09-06 12:01:31-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

On Tue, Jun 25, 2019 at 9:24 PM &lt;neel@neelc.org&gt; wrote:

FWIW, this proposal is now in the repository.  Let's do the pending
changes as patches on what's there now.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190613132800</emailId><senderName>Aaron Lye</senderName><senderEmail>lye@math.uni-bremen.de</senderEmail><timestampReceived>2019-06-13 13:28:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis:
&gt;&gt;         2.Client computes POW.
&gt;&gt;         Do{
&gt;&gt; Generates random 8 bytes key (ClientKey).
&gt;&gt; Generates hash(sha512/256 or sha3??) of
&gt;&gt; hash(IPKey + ClientKey)
&gt;&gt; } while (hash does not start with "abcde")
&gt;&gt;
&gt; 
&gt; That looks like a naive PoW scheme. It would perhaps be preferable to
&gt; try to find a GPU/ASIC-resistant or memory-hard PoW scheme here, to
&gt; minimize the advantage of adversaries with GPUs etc.?  Are there any
&gt; good such schemes?

It may be worth looking at Argon2 [1] which is designed to maximize the
cost of password cracking on ASICs based on memory-hard functions.
A different approach is the input-dependent use of several different
hash functions (cf. e.g. [2]).

[1] https://www.cryptolux.org/images/0/0d/Argon2.pdf
[2] https://www.pascalcoin.org/storage/whitepapers/RandomHash_Whitepaper.pdf

&gt; Also services should definitely be able to configure the difficulty of
&gt; the PoW, and IMO this should again happen through the descriptor.

yes


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190613165339</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-06-13 16:53:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>


On 13/6/19 12:21, George Kadianakis wrote:
&gt; Is this a new cell? What's the format? Are these really keys or are they
&gt; just nonces?

Yes sorry, they are nonces.


This was only a proposal for a proposal.

&gt; Is this a new cell? What's the format? Are these really keys or are they
&gt; just nonces?
&gt;
&gt; IMO we should not do this through a new cell because that increases the
&gt; round-trip by one. Instead we should just embed the PoW parameters in
&gt; the onion service descriptor and clients find them there.
Yes, this is a new cell triggered only when DoS limit is reached.

We can't embed it on the onion service descriptor because the attacker 
could precompute the PoW and make a dictionary attack. The IPKey (will 
be a nonce) should unique for each new connecting client that wants to 
send the INTRODUCE2.

What we want this way is increasing the cost of an attacker by many 
times vs only a little overhead to the I.P.

&gt; That looks like a naive PoW scheme. It would perhaps be preferable to
&gt; try to find a GPU/ASIC-resistant or memory-hard PoW scheme here, to
&gt; minimize the advantage of adversaries with GPUs etc.?  Are there any
&gt; good such schemes?
&gt;
&gt; Also services should definitely be able to configure the difficulty of
&gt; the PoW, and IMO this should again happen through the descriptor.
That PoW scheme was just a simple example. We should find the right 
choice. Something hard to find but easy to check.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190614101449</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-14 10:14:49-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

juanjo &lt;juanjo@avanix.es&gt; writes:

&gt; On 13/6/19 12:21, George Kadianakis wrote:
&gt;&gt; Is this a new cell? What's the format? Are these really keys or are they
&gt;&gt; just nonces?
&gt;
&gt; Yes sorry, they are nonces.
&gt;
&gt;
&gt; This was only a proposal for a proposal.
&gt;
&gt;&gt; Is this a new cell? What's the format? Are these really keys or are they
&gt;&gt; just nonces?
&gt;&gt;
&gt;&gt; IMO we should not do this through a new cell because that increases the
&gt;&gt; round-trip by one. Instead we should just embed the PoW parameters in
&gt;&gt; the onion service descriptor and clients find them there.
&gt; Yes, this is a new cell triggered only when DoS limit is reached.
&gt;
&gt; We can't embed it on the onion service descriptor because the attacker 
&gt; could precompute the PoW and make a dictionary attack. The IPKey (will 
&gt; be a nonce) should unique for each new connecting client that wants to 
&gt; send the INTRODUCE2.
&gt;
&gt; What we want this way is increasing the cost of an attacker by many 
&gt; times vs only a little overhead to the I.P.
&gt;

I see. So you were going for an interactive PoW protocol. I wonder what
else we can get if we admit we want interactive. Can we get a CAPTCHA?
What else?

Still, I think the above protocol can be optimized to not require an
extra round trip (extra round trips are bad for the network and for the
intro point): For example, in place of an IPKey nonce that the IP
explicitly sends to the client, we could use some sort of unpredictable
crypto object from the circuit setup (e.g. ntor) between the client and
intro point.

&gt;&gt; That looks like a naive PoW scheme. It would perhaps be preferable to
&gt;&gt; try to find a GPU/ASIC-resistant or memory-hard PoW scheme here, to
&gt;&gt; minimize the advantage of adversaries with GPUs etc.?  Are there any
&gt;&gt; good such schemes?
&gt;&gt;
&gt;&gt; Also services should definitely be able to configure the difficulty of
&gt;&gt; the PoW, and IMO this should again happen through the descriptor.
&gt; That PoW scheme was just a simple example. We should find the right 
&gt; choice. Something hard to find but easy to check.
&gt;

Yep. We should indeed find the right choice here. I have briefly tried
and failed to find papers that compare PoW schemes in a useful way for
this project.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190616162428</emailId><senderName>Chelsea Holland Komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2019-06-16 16:24:28-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

Hi,

Given the significant environmental impact of POW in other distributed
systems (blockchain), we should not implement schemes that solve a
problem for Tor but create problems for people elsewhere (potentially
irreversible environmental damage). 

https://www.theguardian.com/technology/2018/nov/05/energy-cost-of-mining-bitcoin-more-than-twice-that-of-copper-or-gold


Other less-destructive schemes exist to prevent DoS attacks. POW is a
method, not a goal in itself. Taking a step back and examining the full
spectrum of available tools would be better. 

Chelsea


On 2019-06-13 06:21, George Kadianakis wrote:
&gt; juanjo &lt;juanjo@avanix.es&gt; writes:
&gt; 
&gt; &gt; Hello, this is my view of things, please be gentle as this is my first
&gt; &gt; proposal draft :)
&gt; &gt; 
&gt; 
&gt; Hello,
&gt; 
&gt; thanks for working on this. IMO any proof-of-work introduction proposal
&gt; can be seen as orthogonal to David's prop305 which is a rate-limiting
&gt; proposal (even tho it's not named as such) and hence deserves its own
&gt; thread.
&gt; 
&gt; &gt; _ADAPTIVE POW PROPOSAL:_
&gt; &gt; 
&gt; &gt; Client sends the INTRODUCE1 as normal.
&gt; &gt; 
&gt; &gt; Introduction Point checks the Current Requests Rate and checks the DoS
&gt; &gt; settings.
&gt; &gt; 
&gt; &gt; -DoS check is OK: send INTRODUCE2 to Hidden Service etc...
&gt; &gt; 
&gt; 
&gt; So far so good (even tho this is not our usual proposal format).
&gt; 
&gt; &gt; -DoS settings/rate limit reached: then
&gt; &gt; 
&gt; &gt; 1.Introduction Point generates a random 8 bytes key (IPKey) and
&gt; &gt; associates it with the client circuit. Then send INTRODUCE_POW to the
&gt; &gt; Client with the IPKey.
&gt; 
&gt; Is this a new cell? What's the format? Are these really keys or are they
&gt; just nonces?
&gt; 
&gt; IMO we should not do this through a new cell because that increases the
&gt; round-trip by one. Instead we should just embed the PoW parameters in
&gt; the onion service descriptor and clients find them there. 
&gt; 
&gt; &gt; 2.Client computes POW.
&gt; &gt; Do{
&gt; &gt; Generates random 8 bytes key (ClientKey).
&gt; &gt; Generates hash(sha512/256 or sha3??) of
&gt; &gt; hash(IPKey + ClientKey)
&gt; &gt; } while (hash does not start with "abcde")
&gt; &gt; 
&gt; 
&gt; That looks like a naive PoW scheme. It would perhaps be preferable to
&gt; try to find a GPU/ASIC-resistant or memory-hard PoW scheme here, to
&gt; minimize the advantage of adversaries with GPUs etc.?  Are there any
&gt; good such schemes?
&gt; 
&gt; Also services should definitely be able to configure the difficulty of
&gt; the PoW, and IMO this should again happen through the descriptor.
&gt; 
&gt; &gt; 3. Client sends INTRODUCE_POWR to the I.P. with the generated POW
&gt; &gt; and the ClientKey.
&gt; 
&gt; IMO this should happen as part of the INTRODUCE1 cell.
&gt; 
&gt; &gt; 4. I.P. checks the POW:
&gt; &gt; 
&gt; &gt; -POW is correct: send INTRODUCE2 to HS.
&gt; &gt; -POW is not correct: send INTRODUCE_POW_ERROR to client with
&gt; &gt; new IPKey.
&gt; &gt; 
&gt; &gt; *I say 8 bytes for the Keys just for example.
&gt; &gt; 
&gt; &gt; PROS AND CONS, who needs to update Tor version?:
&gt; &gt; --------------
&gt; &gt; 
&gt; &gt; Only rate limit: Introduction Point and Hidden Service. No breakage.
&gt; &gt; 
&gt; &gt; POW: Client, Introduction Point and Hidden Service. POW will break
&gt; &gt; compatibility with other v3 Hidden Services clients, if we implement a
&gt; &gt; way to bypass POW for old clients then this feature won't work as intended.
&gt; &gt; 
&gt; &gt; A forgotten guy here: Authenticated Rends cell: where we make sure the
&gt; &gt; Client established a connection to the Rend Point before requesting the
&gt; &gt; INTRODUCE1.
&gt; &gt; 
&gt; 
&gt; Yep, that's yet another proposal (ticket #25066).
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190616220317</emailId><senderName>Jeff Burdges</senderName><senderEmail>burdges@gnunet.org</senderEmail><timestampReceived>2019-06-16 22:03:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

[Attachment #2 (multipart/signed)]


As a rule, proof-of-work does not really deliver the security properties people \
envision.  We've no really canonical anti-sibel criteria in this case, but maybe some \
mixed approach works:

First, introduction points have a default mode in which they rate limit new \
connections and impose some artificial latency.  Second, an onion service can issue \
rerandomizable certificates, blind signature, or oblivious PRFs that provide faster \
and non-rate limited access through a specific introduction points.

Coconut would suffice for the rerandomizable certificates of course, but sounds like \
overkill.. and slow.

We should consider an oblivious PRF for this use case too:

It's easy to make an oblivious PRF from the batched DLEQ proof implemented in \
https://github.com/w3f/schnorrkel/blob/master/src/vrf.rs  I suppose Tor might adapt \
this to not use Ristretto, or maybe choose an Ed25519 to Ristretto map, but \
regardless the whole scheme is not too much more complex than a Schnorr signature.

We require the oblivious PRF secret key be known by both the introduction point for \
verification and the onion service for issuing.  In this, we do not share the \
oblivious PRF key among different introduction points because introduction points \
cannot share a common double redemption database anyways.

I'm worried about different oblivious PRF keys being used to tag different users \
though.  There are complex mechanisms to prevent this using curves created with \
Cocks-Pinch, but..

We could simply employ blind signatures however, which avoids sharing any secrets, \
and thus permits binding the key uniquely to the hidden service.  As a rule, blind \
signatures require either slow cryptography like pairings or RSA, or else issuing \
takes several round trips and have weak soundness.  I think weak soundness sounds \
workable here, although I'm no longer sure about all the issues with such scheme.

Best,
Jeff

p.s.  We're hiring in security https://web3.bamboohr.com/jobs/view.php?id=38 and \
several research areas like cryptography \
https://web3.bamboohr.com/jobs/view.php?id=29


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEBA1bLpAiCdPXvXG3q6x/0cwQCnQFAl0GvKUACgkQq6x/0cwQ
CnQHjRAAzQeLNO/OJff0RqN14UNCumrYkh+tTeHci9MBtHxQwzMcRtdn8QPrBbwY
w6Q6Ij5WijoUZbbh8V2KGL4PNNFiEw59TwRfNpXghz8mtsIgaD2NrdX5gpsdtg88
YA8sPw7i2MlQcVqiI+Y07fldEe88+wnMLLmOyICkI0dnsSini6jNCavDDRttnX25
/PyDvp+t4fJliubebIx1wvvLqetL4484D/y+A/5ZFwDNbULJrQ2BAc62ovc5nQir
hKzBv6zogD37fU9ssjjwBjtWhOZ82pCzVt7n5RF86Ve++Zw3+hLHtCTDIyMBjl9N
bLqyqvRFtj7Me8Y2mM8/ZuxkJfH/WrK9b/FUSbSPvafeHBGoUmX0/VBmQTdxdPAZ
xJkIssaIAcHaDXfvbwTX02wOoTk5RFOHO7ob1vUu+xOpWYPb0TrXArs0so12Aepq
dJkncqCPpu+YVT2l0/UOtj/lYD4SKeCWqVcjTP1+jrfaZa/LzA3ocHBTB9jioc6l
NvFjaVXgw2ZBxoUhxbxlVKWkUZ0D5VpgwR6X25jDmT/T6mmt1FKJHLyZyFacicWq
bGkTW9pOVjltKNIjmjO5SFay8wGI0qmGSp9GeN1zumLJfB9n37ElsEYg2ikAeeAK
Qrr2inWQyUYbAgxD69d6MfLB3OZlVFAtgVt/2nxpZSIrvZhIqzw=
=Yhnn
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190619012927</emailId><senderName>Chelsea Holland Komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2019-06-19 01:29:27-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

There are a couple approaches to consider.

POW via hashing goes for a relatively simple to implement approach.
However, this incurs a high cost for all clients, and also environmental
damage, per previous email.

Another approach similar to the above (but more environmentally
friendly) can be Proof of Storage (or proof of space), as in
https://eprint.iacr.org/2013/796.pdf

With both of the above approaches, there will be a tradeoff to what the
cost is to deter a would-be attacker, versus the cost to real but
bandwidth/cpu limited clients, such as on mobile platforms.

More involved approaches include anonymous blacklists/whitelists,
blinded tokens, etc. Previous work has been done in this space, here is
one example:
https://crysp.uwaterloo.ca/courses/pet/F11/cache/www-users.cs.umn.edu/~hopper/faust-wpes.pdf

While designs using a token-based approach such as what Jeff mentions
below may require more design/thought up front, the benefit is that
clients won't be penalized every time they connect to an onion service.
Considering the goal of scaling of the Tor network and of "onions
everywhere", this seems like a good tradeoff. 


On 2019-06-16 18:03, Jeff Burdges wrote:
&gt; As a rule, proof-of-work does not really deliver the security
&gt; properties people envision.  We've no really canonical anti-sibel
&gt; criteria in this case, but maybe some mixed approach works:
&gt; 
&gt; First, introduction points have a default mode in which they rate
&gt; limit new connections and impose some artificial latency.  Second, an
&gt; onion service can issue rerandomizable certificates, blind signature,
&gt; or oblivious PRFs that provide faster and non-rate limited access
&gt; through a specific introduction points.
&gt; 
&gt; Coconut would suffice for the rerandomizable certificates of course,
&gt; but sounds like overkill.. and slow.
&gt; 
&gt; We should consider an oblivious PRF for this use case too:
&gt; 
&gt; It's easy to make an oblivious PRF from the batched DLEQ proof
&gt; implemented in
&gt; https://github.com/w3f/schnorrkel/blob/master/src/vrf.rs  I suppose
&gt; Tor might adapt this to not use Ristretto, or maybe choose an Ed25519
&gt; to Ristretto map, but regardless the whole scheme is not too much more
&gt; complex than a Schnorr signature.
&gt; 
&gt; We require the oblivious PRF secret key be known by both the
&gt; introduction point for verification and the onion service for issuing.
&gt;  In this, we do not share the oblivious PRF key among different
&gt; introduction points because introduction points cannot share a common
&gt; double redemption database anyways.
&gt; 
&gt; I'm worried about different oblivious PRF keys being used to tag
&gt; different users though.  There are complex mechanisms to prevent this
&gt; using curves created with Cocks-Pinch, but..
&gt; 
&gt; We could simply employ blind signatures however, which avoids sharing
&gt; any secrets, and thus permits binding the key uniquely to the hidden
&gt; service.  As a rule, blind signatures require either slow cryptography
&gt; like pairings or RSA, or else issuing takes several round trips and
&gt; have weak soundness.  I think weak soundness sounds workable here,
&gt; although I'm no longer sure about all the issues with such scheme.
&gt; 
&gt; Best,
&gt; Jeff
&gt; 
&gt; p.s.  We're hiring in security
&gt; https://web3.bamboohr.com/jobs/view.php?id=38 and several research
&gt; areas like cryptography https://web3.bamboohr.com/jobs/view.php?id=29
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190620041910</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2019-06-20 04:19:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

On Tue, Jun 18, 2019 at 6:29 PM Chelsea Holland Komlo
&lt;me@chelseakomlo.com&gt; wrote:
&gt;
&gt; There are a couple approaches to consider.
&gt;
&gt; POW via hashing goes for a relatively simple to implement approach.
&gt; However, this incurs a high cost for all clients, and also environmental
&gt; damage, per previous email.
&gt;
&gt; Another approach similar to the above (but more environmentally
&gt; friendly) can be Proof of Storage (or proof of space), as in
&gt; https://eprint.iacr.org/2013/796.pdf
&gt;
&gt; With both of the above approaches, there will be a tradeoff to what the
&gt; cost is to deter a would-be attacker, versus the cost to real but
&gt; bandwidth/cpu limited clients, such as on mobile platforms.
&gt;
&gt; More involved approaches include anonymous blacklists/whitelists,
&gt; blinded tokens, etc. Previous work has been done in this space, here is
&gt; one example:
&gt; https://crysp.uwaterloo.ca/courses/pet/F11/cache/www-users.cs.umn.edu/~hopper/faust-wpes.pdf

Privacy Pass has already been integrated into Tor Browser. Perhaps
work could be done to use it here?
&gt;
&gt; While designs using a token-based approach such as what Jeff mentions
&gt; below may require more design/thought up front, the benefit is that
&gt; clients won't be penalized every time they connect to an onion service.
&gt; Considering the goal of scaling of the Tor network and of "onions
&gt; everywhere", this seems like a good tradeoff.
&gt;
&gt;
&gt; On 2019-06-16 18:03, Jeff Burdges wrote:
&gt; &gt; As a rule, proof-of-work does not really deliver the security
&gt; &gt; properties people envision.  We've no really canonical anti-sibel
&gt; &gt; criteria in this case, but maybe some mixed approach works:
&gt; &gt;
&gt; &gt; First, introduction points have a default mode in which they rate
&gt; &gt; limit new connections and impose some artificial latency.  Second, an
&gt; &gt; onion service can issue rerandomizable certificates, blind signature,
&gt; &gt; or oblivious PRFs that provide faster and non-rate limited access
&gt; &gt; through a specific introduction points.
&gt; &gt;
&gt; &gt; Coconut would suffice for the rerandomizable certificates of course,
&gt; &gt; but sounds like overkill.. and slow.
&gt; &gt;
&gt; &gt; We should consider an oblivious PRF for this use case too:
&gt; &gt;
&gt; &gt; It's easy to make an oblivious PRF from the batched DLEQ proof
&gt; &gt; implemented in
&gt; &gt; https://github.com/w3f/schnorrkel/blob/master/src/vrf.rs  I suppose
&gt; &gt; Tor might adapt this to not use Ristretto, or maybe choose an Ed25519
&gt; &gt; to Ristretto map, but regardless the whole scheme is not too much more
&gt; &gt; complex than a Schnorr signature.
&gt; &gt;
&gt; &gt; We require the oblivious PRF secret key be known by both the
&gt; &gt; introduction point for verification and the onion service for issuing.
&gt; &gt;  In this, we do not share the oblivious PRF key among different
&gt; &gt; introduction points because introduction points cannot share a common
&gt; &gt; double redemption database anyways.
&gt; &gt;
&gt; &gt; I'm worried about different oblivious PRF keys being used to tag
&gt; &gt; different users though.  There are complex mechanisms to prevent this
&gt; &gt; using curves created with Cocks-Pinch, but..
&gt; &gt;
&gt; &gt; We could simply employ blind signatures however, which avoids sharing
&gt; &gt; any secrets, and thus permits binding the key uniquely to the hidden
&gt; &gt; service.  As a rule, blind signatures require either slow cryptography
&gt; &gt; like pairings or RSA, or else issuing takes several round trips and
&gt; &gt; have weak soundness.  I think weak soundness sounds workable here,
&gt; &gt; although I'm no longer sure about all the issues with such scheme.
&gt; &gt;
&gt; &gt; Best,
&gt; &gt; Jeff
&gt; &gt;
&gt; &gt; p.s.  We're hiring in security
&gt; &gt; https://web3.bamboohr.com/jobs/view.php?id=38 and several research
&gt; &gt; areas like cryptography https://web3.bamboohr.com/jobs/view.php?id=29
&gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



-- 
"Man is born free, but everywhere he is in chains".
--Rousseau.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190620042200</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-06-20 04:22:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Watson Ladd:
&gt; On Tue, Jun 18, 2019 at 6:29 PM Chelsea Holland Komlo
&gt; &lt;me@chelseakomlo.com&gt; wrote:
&gt;&gt;
&gt;&gt; There are a couple approaches to consider.
&gt;&gt;
&gt;&gt; POW via hashing goes for a relatively simple to implement approach.
&gt;&gt; However, this incurs a high cost for all clients, and also environmental
&gt;&gt; damage, per previous email.
&gt;&gt;
&gt;&gt; Another approach similar to the above (but more environmentally
&gt;&gt; friendly) can be Proof of Storage (or proof of space), as in
&gt;&gt; https://eprint.iacr.org/2013/796.pdf
&gt;&gt;
&gt;&gt; With both of the above approaches, there will be a tradeoff to what the
&gt;&gt; cost is to deter a would-be attacker, versus the cost to real but
&gt;&gt; bandwidth/cpu limited clients, such as on mobile platforms.
&gt;&gt;
&gt;&gt; More involved approaches include anonymous blacklists/whitelists,
&gt;&gt; blinded tokens, etc. Previous work has been done in this space, here is
&gt;&gt; one example:
&gt;&gt; https://crysp.uwaterloo.ca/courses/pet/F11/cache/www-users.cs.umn.edu/~hopper/faust-wpes.pdf
&gt; 
&gt; Privacy Pass has already been integrated into Tor Browser. Perhaps
&gt; work could be done to use it here?

Where do you see that is has been integrated? As far as I know that's
not the case even though there are still plans to evaluate the latest
iteration closer to get a better understanding about whether it would be
good to integrate it.

[snip]

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190620134132</emailId><senderName>Chelsea Holland Komlo</senderName><senderEmail>me@chelseakomlo.com</senderEmail><timestampReceived>2019-06-20 13:41:32-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

On 2019-06-20 00:19, Watson Ladd wrote:
&gt; On Tue, Jun 18, 2019 at 6:29 PM Chelsea Holland Komlo
&gt; &lt;me@chelseakomlo.com&gt; wrote:
&gt;&gt;
&gt;&gt; There are a couple approaches to consider.
&gt;&gt;
&gt;&gt; POW via hashing goes for a relatively simple to implement approach.
&gt;&gt; However, this incurs a high cost for all clients, and also environmental
&gt;&gt; damage, per previous email.
&gt;&gt;
&gt;&gt; Another approach similar to the above (but more environmentally
&gt;&gt; friendly) can be Proof of Storage (or proof of space), as in
&gt;&gt; https://eprint.iacr.org/2013/796.pdf
&gt;&gt;
&gt;&gt; With both of the above approaches, there will be a tradeoff to what the
&gt;&gt; cost is to deter a would-be attacker, versus the cost to real but
&gt;&gt; bandwidth/cpu limited clients, such as on mobile platforms.
&gt;&gt;
&gt;&gt; More involved approaches include anonymous blacklists/whitelists,
&gt;&gt; blinded tokens, etc. Previous work has been done in this space, here is
&gt;&gt; one example:
&gt;&gt; https://crysp.uwaterloo.ca/courses/pet/F11/cache/www-users.cs.umn.edu/~hopper/faust-wpes.pdf
&gt; 
&gt; Privacy Pass has already been integrated into Tor Browser. Perhaps
&gt; work could be done to use it here?

An approach akin to Privacy Pass could be an option to avoid serving
challenges to clients with each request (see reference to anonymous
tokens above), but it cannot be a drop in fix, of course. Furthermore,
an acceptable POW or POS scheme still needs to be selected, the
tradeoffs of which we are currently discussing.

Better understanding the requirements of the system from George and
David will help define which approach is acceptable given the tradeoffs.
For example, I imagine accessing onion services should not be restricted
to clients from a web browser. 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190620150510</emailId><senderName>Jeff Burdges</senderName><senderEmail>burdges@gnunet.org</senderEmail><timestampReceived>2019-06-20 15:05:10-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

[Attachment #2 (multipart/signed)]


On 2019-06-20 00:19, Watson Ladd wrote:
&gt; 
&gt; Privacy Pass has already been integrated into Tor Browser. Perhaps
&gt; work could be done to use it here?


As I said above, any oblivious PRF scheme like privacy pass violates privacy *if* you \
can supply different keys to different users.  We cannot derive the OPRF key from the \
HS key, so this requires some messy solution like certificate transparency or more \
likely zero-knowlege proofs.

If otoh you use blind signatures then the blind signing key can be derived from the \
HS key, which avoids this complexity.  We've new complexity in that blind signatures \
using an Edwards curve really suck, but we should be fine so long as only the \
soundness is weak, not the blindness.  I have not refreshed my memory on this point \
yet.


On 20 Jun 2019, at 15:41, Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt; An approach akin to Privacy Pass could be an option to avoid serving
&gt; challenges to clients with each request (see reference to anonymous
&gt; tokens above), but it cannot be a drop in fix, of course. Furthermore,
&gt; an acceptable POW or POS scheme still needs to be selected, the
&gt; tradeoffs of which we are currently discussing.

Why?  Just rate limit connections by adding artificial latency.

If an HS operator turns on the DoS defences, then they are responsible for judging \
the client's behaviour and notifying their Tor to issue blind signed tokens.  At that \
point the HS tor invites the client's tor to submit blinded tokens, which the HS tor \
signs and sends back, and the client's tor unblinds and uses.  It's only three round \
trips I think.

If the HS never notifies tor to issue tokens, then the HS just behaves sluggishly, \
but a correct configuration gives an operator complete control over issuing tokens.

Jeff


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEBA1bLpAiCdPXvXG3q6x/0cwQCnQFAl0LoKYACgkQq6x/0cwQ
CnRovA//aEUHP4u1WUgxMsDAq7ILnS4qLy67N7LHsJ2vag0nhgUBze2v7tSWIJBB
XPu/MuFI3yPpV0DRbihv7lIJEoiZi3Vwxx5WDCQYyFLtRD+L45kkEoFGJEJsZ52a
cJgPZUtfNRi3K0ewt3t40Mljg0sl93uKs4tsk28GGpAPLpeIKwzAFrmSfT3Lx92y
8HAk+aQdUran9cwKQT8q7EWsVpIY8uHY8NOu9x41HA/AbvB1W7Q/MIZOkeTSlggC
5w8B4K2vEspVYz+TNLDdxTj1P6oAxyvmSCVJU4/Fr9czCOGD2l2PfHivEqYHSZRG
KD+zELF2Kr0uOclJbeNCs+hbNxvKuhjfgcUhv3kSDhJdLaSFFFk1lFYuuVSzdoEP
HRj95LPgD5OMol7akSnEqU4krdfnz4LILxETBboTENcOezK9SMteFeDl9g/wyk+R
4th+fjj+RWZdQagelOf9yoVUTa0jvAFgBew7DN7s/cTMe5Av+LBV91qG0krkKGYH
IFq9xZRqhGJF3W1+tWXEyzyowneUoNUJAeGvwTkXIUvLdnlfOEo3kx7pdIg71BYi
qkxit+SfOSFNWdxPserqhRFGAJZwebL9ZApPz3e6gKSGoSC3PSj9HKPhDuTlSalO
xtF6i4Zf2JHFsgHWTIzJPXUjYlnBGZB4JfA0g1QozMN23f2pzyE=
=tP5A
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190620174919</emailId><senderName>Jeff Burdges</senderName><senderEmail>burdges@gnunet.org</senderEmail><timestampReceived>2019-06-20 17:49:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 2019-06-20 00:19, Watson Ladd wrote:
&gt; &gt; 
&gt; &gt; Privacy Pass has already been integrated into Tor Browser. Perhaps
&gt; &gt; work could be done to use it here?
&gt; 
&gt; As I said above, any oblivious PRF scheme like privacy pass violates privacy *if* \
&gt; you can supply different keys to different users.  We cannot derive the OPRF key \
&gt; from the HS key, so this requires some messy solution like certificate transparency \
&gt; or more likely zero-knowlege proofs.

Actually there is a method to use oblivious PRFs without sharing secrets, which then \
makes the HS key itself usable:  Just check the oblivious PRF token at the HS itself, \
not at the introducer.  If the token checks out then the HS responds quickly, but if \
not then it responds after some delay.  Introducers do nothing different in this \
design, but introduce cells can contain more data.


&gt; If otoh you use blind signatures then the blind signing key can be derived from the \
&gt; HS key, which avoids this complexity.  We've new complexity in that blind \
&gt; signatures using an Edwards curve really suck, but we should be fine so long as \
&gt; only the soundness is weak, not the blindness.  I have not refreshed my memory on \
&gt; this point yet.

There is a tricky one-more-forgery attack on Schnorr blind signatures, but not afaik \
any key recovery attack: \
https://www.iacr.org/archive/crypto2002/24420288/24420288.pdf

As a defence, one could do blind signatures in G^3 requiring three scalar \
multiplications per signature from both signer and client, but limiting the forgery \
count to 1 per 63 signatures, which sounds acceptable. \
https://www.math.uni-frankfurt.de/~dmst/teaching/SS2012/Vorlesung/EBS5.pdf

We'd need to work out if using some key derived from the HS key works however because \
we must avoid creating a signing oracle for HS keys too.


So.. Do you want the filter at the introducer or at the HS itself?

Jeff


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEBA1bLpAiCdPXvXG3q6x/0cwQCnQFAl0Lxx8ACgkQq6x/0cwQ
CnThRRAA21bUDU2aYLpvINi0KzOs728c0IPjB2mGgovGv5zUNFNB0R24wsqRT+Mx
qlid7X47C7tHlyEGNXzf0hTFbcox9eREBF0/KGe364jO1fdCFQzmbocPnMBVrqGT
dtTcrsuwoJlImUxPyLUdnF/P+TyjuWmuQY99QuonsdOoAtssWj/MDDfRl20R/I/w
XeiXxMpsYrnJXEvHK9TckG/+0lcM82Y794CFzYdtghgTf4srU1tjXH201xkXVyct
4PKvZtqOUQuBJZ1oXlY51l2zaEDRE3W+1Qqs8Lcua/joxOj+qjmzWbTfvEpWJl9q
aMKHEl4KlDClaVtb1+REbNMKFkJPEPvaC9yC2WdzkXA2mfwAeZFbE8gaUqCfDWFE
nUtdIEsRZwEmCcM7jJa1RE1z0OH6genAo/kEqDzGTFggTs0n6kYOxhwsZar4XI0D
ZWKOKC0jZycXMPUZtKvfh52T/V6eVMSDjeb9VXX1DSzubiWvjUzKnKt+pD2zm7BH
+TpzGwtDWMOzmnbrenjdLyockHxaAxZIWkGn3s93bb1FEOqt0cDCYaZbxKJiwRTP
PLzB4Mw6ItWTj0hmJn4shDv4PedLvx4pQD0Z9rCtEFLLB7Kmjq9KmerQw/lNd75A
j9+jU/dTgUHknKDdeydnS7KjBwtNar2F4D836APaO/kHHW/dZE4=
=a7tW
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190612184714</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-06-12 18:47:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

[Attachment #2 (multipart/alternative)]


Hello, this is my view of things, please be gentle as this is my first 
proposal draft :)

_ADAPTIVE POW PROPOSAL:_

Client sends the INTRODUCE1 as normal.

Introduction Point checks the Current Requests Rate and checks the DoS 
settings.

-DoS check is OK: send INTRODUCE2 to Hidden Service etc...

-DoS settings/rate limit reached: then

     1.Introduction Point generates a random 8 bytes key (IPKey) and 
associates it with the client circuit. Then send INTRODUCE_POW to the 
Client with the IPKey.
     2.Client computes POW.
     Do{
Generates random 8 bytes key (ClientKey).
Generates hash(sha512/256 or sha3??) of
hash(IPKey + ClientKey)
} while (hash does not start with "abcde")

     3. Client sends INTRODUCE_POWR to the I.P. with the generated POW 
and the ClientKey.
     4. I.P. checks the POW:

         -POW is correct: send INTRODUCE2 to HS.
         -POW is not correct: send INTRODUCE_POW_ERROR to client with 
new IPKey.

*I say 8 bytes for the Keys just for example.

PROS AND CONS, who needs to update Tor version?:
--------------

Only rate limit: Introduction Point and Hidden Service. No breakage.

POW: Client, Introduction Point and Hidden Service. POW will break 
compatibility with other v3 Hidden Services clients, if we implement a 
way to bypass POW for old clients then this feature won't work as intended.

A forgotten guy here: Authenticated Rends cell: where we make sure the 
Client established a connection to the Rend Point before requesting the 
INTRODUCE1.

On 12/6/19 14:39, George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt;
&gt;&gt; Filename: 305-establish-intro-dos-defense-extention.txt
&gt;&gt; Title: ESTABLISH_INTRO Cell DoS Defense Extension
&gt;&gt; Author: David Goulet, George Kadianakis
&gt;&gt; Created: 06-June-2019
&gt;&gt; Status: Draft
&gt;&gt;
&gt; Thanks for this proposal, it's most excellent and an essential building
&gt; block for future work on intro point related defences.
&gt;
&gt;&gt;     We propose a new EXT_FIELD_TYPE value:
&gt;&gt;
&gt;&gt;        [01] -- DOS_PARAMETERS.
&gt;&gt;
&gt;&gt;                If this flag is set, the extension should be used by the
&gt;&gt;                introduction point to learn what values the denial of service
&gt;&gt;                subsystem should be using.
&gt;&gt;
&gt; Perhaps we can name it "rate-limiting parameters"? But no strong opinion.
&gt;
&gt;&gt;     The EXT_FIELD content format is:
&gt;&gt;
&gt;&gt;        N_PARAMS    [1 byte]
&gt;&gt;        N_PARAMS times:
&gt;&gt;           PARAM_TYPE  [1 byte]
&gt;&gt;           PARAM_VALUE [8 byte]
&gt;&gt;
&gt;&gt;     The PARAM_TYPE proposed values are:
&gt;&gt;
&gt;&gt;        [01] -- DOS_INTRODUCE2_RATE_PER_SEC
&gt;&gt;                The rate per second of INTRODUCE2 cell relayed to the service.
&gt;&gt;
&gt;&gt;        [02] -- DOS_INTRODUCE2_BURST_PER_SEC
&gt;&gt;                The burst per second of INTRODUCE2 cell relayed to the service.
&gt;&gt;
&gt;&gt;     The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt;&gt;     (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt;&gt;
&gt;&gt;        [01] -- Min: 0, Max: INT_MAX
&gt;&gt;        [02] -- Min: 0, Max: INT_MAX
&gt;&gt;
&gt; How would this new addition to the cell impact the size of the cell? How
&gt; much free space do we have for additional features to this cell (e.g. to
&gt; do the PoW stuff of the other thread)?
&gt;
&gt;&gt;     A value of 0 means the defense is disabled which has precedence over the
&gt;&gt;     network wide consensus parameter.
&gt;&gt;
&gt;&gt;     In this case, if the rate per second is set to 0 (param 0x01) then the
&gt;&gt;     burst value should be ignored. And vice-versa, if the burst value is 0,
&gt;&gt;     then the rate value should be ignored. In other words, setting one single
&gt;&gt;     parameter to 0 disables the INTRODUCE2 rate limiting defense.
&gt;&gt;
&gt; I think it could be cool to add a discussion section where we introduce
&gt; a new cell from the intro to the service which informs the service that
&gt; rate limiting limits have been hit. So that there is a way for the
&gt; service to get feedback that it's under attack or capped by
&gt; limits. Otherwise, there is simply no way to learn it.
&gt;
&gt; This can be a later feature fwiw.
&gt;
&gt;&gt; 3. Protocol Version
&gt;&gt;
&gt;&gt;     We introduce a new protocol version in order for onion service that wants
&gt;&gt;     to specifically select introduction points supporting this new extension.
&gt;&gt;     But also, it should be used to know when to send this extension or not.
&gt;&gt;
&gt;&gt;     The new version for the "HSIntro" protocol is:
&gt;&gt;
&gt;&gt;        "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt;&gt;               service version 3 only.
&gt;&gt;
&gt;&gt; 4. Configuration Options
&gt;&gt;
&gt;&gt;     We also propose new torrc options in order for the operator to control
&gt;&gt;     those values passed through the ESTABLISH_INTRO cell.
&gt;&gt;
&gt;&gt;        "HiddenServiceEnableIntroDoSDefense 0|1"
&gt;&gt;
&gt;&gt;           If this option is set to 1, the onion service will always send to the
&gt;&gt;           introduction point denial of service defense parameters regardless of
&gt;&gt;           what the consensus enables it or not. The value will be taken from
&gt;&gt;           the consensus and if not present, the default values will be used.
&gt;&gt;           (Default: 0)
&gt;&gt;
&gt;&gt;        "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt;&gt;
&gt;&gt;           Controls the introduce rate per second the introduction point should
&gt;&gt;           impose on the introduction circuit.
&gt;&gt;           (Default: 25, Min: 0, Max: 4294967295)
&gt;&gt;
&gt;&gt;        "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt;&gt;
&gt;&gt;           Controls the introduce burst per second the introduction point should
&gt;&gt;           impose on the introduction circuit.
&gt;&gt;           (Default: 200, Min: 0, Max: 4294967295)
&gt;&gt;
&gt;&gt;     They respectively control the parameter type 0x01 and 0x02 in the
&gt;&gt;     ESTABLISH_INTRO cell detailed in section 2.
&gt;&gt;
&gt;&gt;     The default values of the rate and burst are taken from ongoing anti-DoS
&gt;&gt;     implementation work [1][2]. They aren't meant to be defined with this
&gt;&gt;     proposal.
&gt;&gt;
&gt;&gt; 5. Security Considerations
&gt;&gt;
&gt;&gt;     Using this new extension leaks to the introduction point the service's tor
&gt;&gt;     version. This could in theory help any kind of de-anonymization attack on a
&gt;&gt;     service since at first it partitions it in a very small group of running
&gt;&gt;     tor.
&gt;&gt;
&gt;&gt;     Furthermore, when the first tor version supporting this extension will be
&gt;&gt;     released, very few introduction points will be updated to that version.
&gt;&gt;     Which means that we could end up in a situation where many services want to
&gt;&gt;     use this feature and thus will only select a very small subset of relays
&gt;&gt;     supporting it overloading them but also making it an easier vector for an
&gt;&gt;     attacker that whishes to be the service introduction point.
&gt;&gt;
&gt; Interesting idea.
&gt;
&gt; I'm not that worried about the service leaking its version to the intro,
&gt; but I am worried about all attacked services saturating the few upgraded
&gt; intro points, so I agree that such a switch makes sense.
&gt;
&gt;&gt;     For the above reasons, we propose a new consensus parameters that will
&gt;&gt;     provide a "go ahead" for all service out there to start using this
&gt;&gt;     extension only if the introduction point supports it.
&gt;&gt;
&gt;&gt;        "enable_establish_intro_dos_extension"
&gt;&gt;
&gt;&gt;           If set to 1, this makes tor start using this new proposed extension
&gt;&gt;           if available by the introduction point (looking at the new protover).
&gt;&gt;
&gt;&gt;     This parameter should be switched on when a majority of relays have
&gt;&gt;     upgraded to a tor version that supports this extension for which we believe
&gt;&gt;     will also give enough time for most services to move to this new stable
&gt;&gt;     version making the anonymity set much bigger.
&gt;&gt;
&gt;&gt;     We propose to add a torrc option to ignore this parameter and force tor to
&gt;&gt;     select introduction points supporting this extension which will
&gt;&gt;     effectively, in the beginning, toss away these security considerations.
&gt;&gt;
&gt;&gt;     We believe that there are services that do not care about anonymity on the
&gt;&gt;     service side and thus could benefit from this feature right away if they
&gt;&gt;     wish to use it.
&gt;&gt;
&gt;&gt; References:
&gt;&gt;
&gt;&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html
&gt;&gt; [2] https://trac.torproject.org/15516
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    &lt;p&gt;Hello, this is my view of things, please be gentle as this is my
      first proposal draft :)&lt;/p&gt;
    &lt;p&gt;&lt;u&gt;ADAPTIVE POW PROPOSAL:&lt;/u&gt;&lt;br&gt;
      &lt;br&gt;
      Client sends the INTRODUCE1 as normal.&lt;br&gt;
      &lt;br&gt;
      Introduction Point checks the Current Requests Rate and checks the
      DoS settings.&lt;br&gt;
      &lt;br&gt;
      -DoS check is OK: send INTRODUCE2 to Hidden Service etc...&lt;br&gt;
      &lt;br&gt;
      -DoS settings/rate limit reached: then&lt;br&gt;
      &lt;br&gt;
          1.Introduction Point generates a random 8 bytes key (IPKey)
      and associates it with the client circuit. Then send INTRODUCE_POW
      to the Client with the IPKey.&lt;br&gt;
          2.Client computes POW.&lt;br&gt;
          Do{&lt;br&gt;
      Generates random 8 bytes key (ClientKey).&lt;br&gt;
      Generates hash(sha512/256 or sha3??) of&lt;br&gt;
      hash(IPKey + ClientKey)&lt;br&gt;
      } while (hash does not start with "abcde")&lt;br&gt;
      &lt;br&gt;
          3. Client sends INTRODUCE_POWR to the I.P. with the generated
      POW and the ClientKey.&lt;br&gt;
          4. I.P. checks the POW:&lt;br&gt;
      &lt;br&gt;
              -POW is correct: send INTRODUCE2 to HS.&lt;br&gt;
              -POW is not correct: send INTRODUCE_POW_ERROR to client
      with new IPKey.&lt;br&gt;
      &lt;br&gt;
      *I say 8 bytes for the Keys just for example.&lt;br&gt;
      &lt;br&gt;
      PROS AND CONS, who needs to update Tor version?:&lt;br&gt;
      --------------&lt;br&gt;
      &lt;br&gt;
      Only rate limit: Introduction Point and Hidden Service. No
      breakage.&lt;br&gt;
      &lt;br&gt;
      POW: Client, Introduction Point and Hidden Service. POW will break
      compatibility with other v3 Hidden Services clients, if we
      implement a way to bypass POW for old clients then this feature
      won't work as intended.&lt;br&gt;
      &lt;br&gt;
      A forgotten guy here: Authenticated Rends cell: where we make sure
      the Client established a connection to the Rend Point before
      requesting the INTRODUCE1.&lt;br&gt;
      &lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 12/6/19 14:39, George Kadianakis
      wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite" cite="mid:87zhmn0yg4.fsf@riseup.net"&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;David Goulet &lt;a \
class="moz-txt-link-rfc2396E" \
href="mailto:dgoulet@torproject.org"&gt;&lt;dgoulet@torproject.org&gt;&lt;/a&gt; writes:

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;Filename: \
                305-establish-intro-dos-defense-extention.txt
Title: ESTABLISH_INTRO Cell DoS Defense Extension
Author: David Goulet, George Kadianakis
Created: 06-June-2019
Status: Draft

&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
Thanks for this proposal, it's most excellent and an essential building
block for future work on intro point related defences.

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;
   We propose a new EXT_FIELD_TYPE value:

      [01] -- DOS_PARAMETERS.

              If this flag is set, the extension should be used by the
              introduction point to learn what values the denial of service
              subsystem should be using.

&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
Perhaps we can name it "rate-limiting parameters"? But no strong opinion.

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;   The EXT_FIELD content format is:

      N_PARAMS    [1 byte]
      N_PARAMS times:
         PARAM_TYPE  [1 byte]
         PARAM_VALUE [8 byte]

   The PARAM_TYPE proposed values are:

      [01] -- DOS_INTRODUCE2_RATE_PER_SEC
              The rate per second of INTRODUCE2 cell relayed to the service.

      [02] -- DOS_INTRODUCE2_BURST_PER_SEC
              The burst per second of INTRODUCE2 cell relayed to the service.

   The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
   (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:

      [01] -- Min: 0, Max: INT_MAX
      [02] -- Min: 0, Max: INT_MAX

&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
How would this new addition to the cell impact the size of the cell? How
much free space do we have for additional features to this cell (e.g. to
do the PoW stuff of the other thread)?

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;   A value of 0 means the defense is \
disabled which has precedence over the  network wide consensus parameter.

   In this case, if the rate per second is set to 0 (param 0x01) then the
   burst value should be ignored. And vice-versa, if the burst value is 0,
   then the rate value should be ignored. In other words, setting one single
   parameter to 0 disables the INTRODUCE2 rate limiting defense.

&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
I think it could be cool to add a discussion section where we introduce
a new cell from the intro to the service which informs the service that
rate limiting limits have been hit. So that there is a way for the
service to get feedback that it's under attack or capped by
limits. Otherwise, there is simply no way to learn it.

This can be a later feature fwiw.

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;3. Protocol Version

   We introduce a new protocol version in order for onion service that wants
   to specifically select introduction points supporting this new extension.
   But also, it should be used to know when to send this extension or not.

   The new version for the "HSIntro" protocol is:

      "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
             service version 3 only.

4. Configuration Options

   We also propose new torrc options in order for the operator to control
   those values passed through the ESTABLISH_INTRO cell.

      "HiddenServiceEnableIntroDoSDefense 0|1"

         If this option is set to 1, the onion service will always send to the
         introduction point denial of service defense parameters regardless of
         what the consensus enables it or not. The value will be taken from
         the consensus and if not present, the default values will be used.
         (Default: 0)

      "HiddenServiceEnableIntroDoSRatePerSec N sec"

         Controls the introduce rate per second the introduction point should
         impose on the introduction circuit.
         (Default: 25, Min: 0, Max: 4294967295)

      "HiddenServiceEnableIntroDoSBurstPerSec N sec"

         Controls the introduce burst per second the introduction point should
         impose on the introduction circuit.
         (Default: 200, Min: 0, Max: 4294967295)

   They respectively control the parameter type 0x01 and 0x02 in the
   ESTABLISH_INTRO cell detailed in section 2.

   The default values of the rate and burst are taken from ongoing anti-DoS
   implementation work [1][2]. They aren't meant to be defined with this
   proposal.

5. Security Considerations

   Using this new extension leaks to the introduction point the service's tor
   version. This could in theory help any kind of de-anonymization attack on a
   service since at first it partitions it in a very small group of running
   tor.

   Furthermore, when the first tor version supporting this extension will be
   released, very few introduction points will be updated to that version.
   Which means that we could end up in a situation where many services want to
   use this feature and thus will only select a very small subset of relays
   supporting it overloading them but also making it an easier vector for an
   attacker that whishes to be the service introduction point.

&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
Interesting idea.

I'm not that worried about the service leaking its version to the intro,
but I am worried about all attacked services saturating the few upgraded
intro points, so I agree that such a switch makes sense.

&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;   For the above reasons, we propose a new \
consensus parameters that will  provide a "go ahead" for all service out there to \
start using this  extension only if the introduction point supports it.

      "enable_establish_intro_dos_extension"

         If set to 1, this makes tor start using this new proposed extension
         if available by the introduction point (looking at the new protover).

   This parameter should be switched on when a majority of relays have
   upgraded to a tor version that supports this extension for which we believe
   will also give enough time for most services to move to this new stable
   version making the anonymity set much bigger.

   We propose to add a torrc option to ignore this parameter and force tor to
   select introduction points supporting this extension which will
   effectively, in the beginning, toss away these security considerations.

   We believe that there are services that do not care about anonymity on the
   service side and thus could benefit from this feature right away if they
   wish to use it.

References:

[1] &lt;a class="moz-txt-link-freetext" \
href="https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html"&gt;https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html&lt;/a&gt;
 [2] &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/15516"&gt;https://trac.torproject.org/15516&lt;/a&gt; \
_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" \
wrap=""&gt;_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190613003534</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-13 00:35:34-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

Hi,

&gt; On 12 Jun 2019, at 22:39, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt; 
&gt;&gt; Filename: 305-establish-intro-dos-defense-extention.txt
&gt;&gt; Title: ESTABLISH_INTRO Cell DoS Defense Extension
&gt;&gt; Author: David Goulet, George Kadianakis
&gt;&gt; Created: 06-June-2019
&gt;&gt; Status: Draft
&gt;&gt; 
&gt; 
&gt; Thanks for this proposal, it's most excellent and an essential building
&gt; block for future work on intro point related defences.

+1

&gt;&gt; 
&gt;&gt;   We propose a new EXT_FIELD_TYPE value:
&gt;&gt; 
&gt;&gt;      [01] -- DOS_PARAMETERS.
&gt;&gt; 
&gt;&gt;              If this flag is set, the extension should be used by the
&gt;&gt;              introduction point to learn what values the denial of service
&gt;&gt;              subsystem should be using.
&gt;&gt; 
&gt; 
&gt; Perhaps we can name it "rate-limiting parameters"? But no strong opinion.
&gt; 
&gt;&gt;   The EXT_FIELD content format is:
&gt;&gt; 
&gt;&gt;      N_PARAMS    [1 byte]
&gt;&gt;      N_PARAMS times:
&gt;&gt;         PARAM_TYPE  [1 byte]
&gt;&gt;         PARAM_VALUE [8 byte]
&gt;&gt; 
&gt;&gt;   The PARAM_TYPE proposed values are:
&gt;&gt; 
&gt;&gt;      [01] -- DOS_INTRODUCE2_RATE_PER_SEC
&gt;&gt;              The rate per second of INTRODUCE2 cell relayed to the service.
&gt;&gt; 
&gt;&gt;      [02] -- DOS_INTRODUCE2_BURST_PER_SEC
&gt;&gt;              The burst per second of INTRODUCE2 cell relayed to the service.
&gt;&gt; 
&gt;&gt;   The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt;&gt;   (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt;&gt; 
&gt;&gt;      [01] -- Min: 0, Max: INT_MAX
&gt;&gt;      [02] -- Min: 0, Max: INT_MAX

This is ambiguous:
* the value is 8 bytes long
* the length of the maximum is unspecified: is it 4 bytes, 8 bytes, signed, or
  unsigned?
* the torrc default is unsigned 4 bytes: UINT32_MAX

&gt; How would this new addition to the cell impact the size of the cell? How
&gt; much free space do we have for additional features to this cell (e.g. to
&gt; do the PoW stuff of the other thread)?
&gt; 
&gt;&gt;   A value of 0 means the defense is disabled which has precedence over the
&gt;&gt;   network wide consensus parameter.

Let's say "any value has precedence over the network wide consensus
parameter". Otherwise it's unclear if 0 is a special value or not.

&gt;&gt;   In this case, if the rate per second is set to 0 (param 0x01) then the
&gt;&gt;   burst value should be ignored. And vice-versa, if the burst value is 0,
&gt;&gt;   then the rate value should be ignored. In other words, setting one single
&gt;&gt;   parameter to 0 disables the INTRODUCE2 rate limiting defense.

What happens if burst is less than rate?

&gt; I think it could be cool to add a discussion section where we introduce
&gt; a new cell from the intro to the service which informs the service that
&gt; rate limiting limits have been hit. So that there is a way for the
&gt; service to get feedback that it's under attack or capped by
&gt; limits. Otherwise, there is simply no way to learn it.
&gt; 
&gt; This can be a later feature fwiw.
&gt; 
&gt;&gt; 3. Protocol Version
&gt;&gt; 
&gt;&gt;   We introduce a new protocol version in order for onion service that wants
&gt;&gt;   to specifically select introduction points supporting this new extension.
&gt;&gt;   But also, it should be used to know when to send this extension or not.
&gt;&gt; 
&gt;&gt;   The new version for the "HSIntro" protocol is:
&gt;&gt; 
&gt;&gt;      "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt;&gt;             service version 3 only.
&gt;&gt; 
&gt;&gt; 4. Configuration Options
&gt;&gt; 
&gt;&gt;   We also propose new torrc options in order for the operator to control
&gt;&gt;   those values passed through the ESTABLISH_INTRO cell.
&gt;&gt; 
&gt;&gt;      "HiddenServiceEnableIntroDoSDefense 0|1"
&gt;&gt; 
&gt;&gt;         If this option is set to 1, the onion service will always send to the
&gt;&gt;         introduction point denial of service defense parameters

if the intro point protocol supports them

&gt;&gt; regardless of
&gt;&gt;         what the consensus enables it or not. The value will be taken from

* values will be taken from

the HiddenServiceEnableIntroDoSRatePerSec and
HiddenServiceEnableIntroDoSBurstPerSec torrc options, then

&gt;&gt;         the consensus and if not present, the default values will be used.
&gt;&gt;         (Default: 0)
&gt;&gt; 
&gt;&gt;      "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt;&gt; 
&gt;&gt;         Controls the introduce rate per second the introduction point should
&gt;&gt;         impose on the introduction circuit.
&gt;&gt;         (Default: 25, Min: 0, Max: 4294967295)

Doesn't the default come from the consensus, and then the hard-coded
default?

Also see my notes about ambiguous size/signed maximums above.

&gt;&gt;      "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt;&gt; 
&gt;&gt;         Controls the introduce burst per second the introduction point should
&gt;&gt;         impose on the introduction circuit.
&gt;&gt;         (Default: 200, Min: 0, Max: 4294967295)

Doesn't the default come from the consensus, and then the hard-coded
default?

Also see my notes about ambiguous size/signed maximums above.

&gt;&gt;   They respectively control the parameter type 0x01 and 0x02 in the
&gt;&gt;   ESTABLISH_INTRO cell detailed in section 2.
&gt;&gt; 
&gt;&gt;   The default values of the rate and burst are taken from ongoing anti-DoS
&gt;&gt;   implementation work [1][2]. They aren't meant to be defined with this
&gt;&gt;   proposal.
&gt;&gt; 
&gt;&gt; 5. Security Considerations
&gt;&gt; 
&gt;&gt;   Using this new extension leaks to the introduction point the service's tor
&gt;&gt;   version. This could in theory help any kind of de-anonymization attack on a
&gt;&gt;   service since at first it partitions it in a very small group of running
&gt;&gt;   tor.
&gt;&gt; 
&gt;&gt;   Furthermore, when the first tor version supporting this extension will be
&gt;&gt;   released, very few introduction points will be updated to that version.
&gt;&gt;   Which means that we could end up in a situation where many services want to
&gt;&gt;   use this feature and thus will only select a very small subset of relays
&gt;&gt;   supporting it overloading them but also making it an easier vector for an
&gt;&gt;   attacker that whishes to be the service introduction point.
&gt;&gt; 
&gt; 
&gt; Interesting idea.
&gt; 
&gt; I'm not that worried about the service leaking its version to the intro,
&gt; but I am worried about all attacked services saturating the few upgraded
&gt; intro points, so I agree that such a switch makes sense.
&gt; 
&gt;&gt;   For the above reasons, we propose a new consensus parameters that will

* parameter

&gt;&gt;   provide a "go ahead" for all service out there to start using this
&gt;&gt;   extension only if the introduction point supports it.
&gt;&gt; 
&gt;&gt;      "enable_establish_intro_dos_extension"

Can we just call it HiddenServiceEnableIntroDoSDefense?

It's weird naming some DoS consensus parameters in snake_case, and
others in CamelCase. And it's also weird having different names for
torrc options and consensus parameters.

&gt;&gt;         If set to 1, this makes tor start using this new proposed extension
&gt;&gt;         if available by the introduction point (looking at the new protover).
&gt;&gt; 
&gt;&gt;   This parameter should be switched on when a majority of relays have
&gt;&gt;   upgraded to a tor version that supports this extension for which we believe
&gt;&gt;   will also give enough time for most services to move to this new stable
&gt;&gt;   version making the anonymity set much bigger.
&gt;&gt; 
&gt;&gt;   We propose to add a torrc option

HiddenServiceEnableIntroDoSDefense?

&gt;&gt; to ignore this parameter and force tor to
&gt;&gt;   select introduction points supporting this extension which will
&gt;&gt;   effectively, in the beginning, toss away these security considerations.
&gt;&gt; 
&gt;&gt;   We believe that there are services that do not care about anonymity on the
&gt;&gt;   service side and thus could benefit from this feature right away if they
&gt;&gt;   wish to use it.

I think we also need consensus parameters for HiddenServiceEnableIntroDoSRatePerSec and
HiddenServiceEnableIntroDoSBurstPerSec.

&gt;&gt; References:
&gt;&gt; 
&gt;&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html
&gt;&gt; [2] https://trac.torproject.org/15516
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190613152408</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-06-13 15:24:08-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Jun (15:39:55), George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt; 
&gt; &gt; Filename: 305-establish-intro-dos-defense-extention.txt
&gt; &gt; Title: ESTABLISH_INTRO Cell DoS Defense Extension
&gt; &gt; Author: David Goulet, George Kadianakis
&gt; &gt; Created: 06-June-2019
&gt; &gt; Status: Draft
&gt; &gt;
&gt; 
&gt; Thanks for this proposal, it's most excellent and an essential building
&gt; block for future work on intro point related defences.
&gt; 
&gt; &gt;
&gt; &gt;    We propose a new EXT_FIELD_TYPE value:
&gt; &gt;
&gt; &gt;       [01] -- DOS_PARAMETERS.
&gt; &gt;
&gt; &gt;               If this flag is set, the extension should be used by the
&gt; &gt;               introduction point to learn what values the denial of service
&gt; &gt;               subsystem should be using.
&gt; &gt;
&gt; 
&gt; Perhaps we can name it "rate-limiting parameters"? But no strong opinion.

I went more generic in order to support future "DoS" parameters which might
not be rate-limiting specific.

I personally prefer that instead of later creating a "[02] --
&lt;NEW_DOS_NAME&gt;_PARAMETERS".

&gt; 
&gt; &gt;    The EXT_FIELD content format is:
&gt; &gt;
&gt; &gt;       N_PARAMS    [1 byte]
&gt; &gt;       N_PARAMS times:
&gt; &gt;          PARAM_TYPE  [1 byte]
&gt; &gt;          PARAM_VALUE [8 byte]
&gt; &gt;
&gt; &gt;    The PARAM_TYPE proposed values are:
&gt; &gt;
&gt; &gt;       [01] -- DOS_INTRODUCE2_RATE_PER_SEC
&gt; &gt;               The rate per second of INTRODUCE2 cell relayed to the service.
&gt; &gt;
&gt; &gt;       [02] -- DOS_INTRODUCE2_BURST_PER_SEC
&gt; &gt;               The burst per second of INTRODUCE2 cell relayed to the service.
&gt; &gt;
&gt; &gt;    The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt; &gt;    (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt; &gt;
&gt; &gt;       [01] -- Min: 0, Max: INT_MAX
&gt; &gt;       [02] -- Min: 0, Max: INT_MAX
&gt; &gt;
&gt; 
&gt; How would this new addition to the cell impact the size of the cell? How
&gt; much free space do we have for additional features to this cell (e.g. to
&gt; do the PoW stuff of the other thread)?

Good point. Added a section about this.

Short answer: We will be using an extra 21 bytes leaving 343 bytes unused.

&gt; 
&gt; &gt;    A value of 0 means the defense is disabled which has precedence over the
&gt; &gt;    network wide consensus parameter.
&gt; &gt;
&gt; &gt;    In this case, if the rate per second is set to 0 (param 0x01) then the
&gt; &gt;    burst value should be ignored. And vice-versa, if the burst value is 0,
&gt; &gt;    then the rate value should be ignored. In other words, setting one single
&gt; &gt;    parameter to 0 disables the INTRODUCE2 rate limiting defense.
&gt; &gt;
&gt; 
&gt; I think it could be cool to add a discussion section where we introduce
&gt; a new cell from the intro to the service which informs the service that
&gt; rate limiting limits have been hit. So that there is a way for the
&gt; service to get feedback that it's under attack or capped by
&gt; limits. Otherwise, there is simply no way to learn it.
&gt; 
&gt; This can be a later feature fwiw.

Yes indeed! Adding discussion section!

&gt; 
&gt; &gt; 3. Protocol Version
&gt; &gt;
&gt; &gt;    We introduce a new protocol version in order for onion service that wants
&gt; &gt;    to specifically select introduction points supporting this new extension.
&gt; &gt;    But also, it should be used to know when to send this extension or not.
&gt; &gt;
&gt; &gt;    The new version for the "HSIntro" protocol is:
&gt; &gt;
&gt; &gt;       "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt; &gt;              service version 3 only.
&gt; &gt;
&gt; &gt; 4. Configuration Options
&gt; &gt;
&gt; &gt;    We also propose new torrc options in order for the operator to control
&gt; &gt;    those values passed through the ESTABLISH_INTRO cell.
&gt; &gt;
&gt; &gt;       "HiddenServiceEnableIntroDoSDefense 0|1"
&gt; &gt;
&gt; &gt;          If this option is set to 1, the onion service will always send to the
&gt; &gt;          introduction point denial of service defense parameters regardless of
&gt; &gt;          what the consensus enables it or not. The value will be taken from
&gt; &gt;          the consensus and if not present, the default values will be used.
&gt; &gt;          (Default: 0)
&gt; &gt;
&gt; &gt;       "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt; &gt;
&gt; &gt;          Controls the introduce rate per second the introduction point should
&gt; &gt;          impose on the introduction circuit.
&gt; &gt;          (Default: 25, Min: 0, Max: 4294967295)
&gt; &gt;
&gt; &gt;       "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt; &gt;
&gt; &gt;          Controls the introduce burst per second the introduction point should
&gt; &gt;          impose on the introduction circuit.
&gt; &gt;          (Default: 200, Min: 0, Max: 4294967295)
&gt; &gt;
&gt; &gt;    They respectively control the parameter type 0x01 and 0x02 in the
&gt; &gt;    ESTABLISH_INTRO cell detailed in section 2.
&gt; &gt;
&gt; &gt;    The default values of the rate and burst are taken from ongoing anti-DoS
&gt; &gt;    implementation work [1][2]. They aren't meant to be defined with this
&gt; &gt;    proposal.
&gt; &gt;
&gt; &gt; 5. Security Considerations
&gt; &gt;
&gt; &gt;    Using this new extension leaks to the introduction point the service's tor
&gt; &gt;    version. This could in theory help any kind of de-anonymization attack on a
&gt; &gt;    service since at first it partitions it in a very small group of running
&gt; &gt;    tor.
&gt; &gt;
&gt; &gt;    Furthermore, when the first tor version supporting this extension will be
&gt; &gt;    released, very few introduction points will be updated to that version.
&gt; &gt;    Which means that we could end up in a situation where many services want to
&gt; &gt;    use this feature and thus will only select a very small subset of relays
&gt; &gt;    supporting it overloading them but also making it an easier vector for an
&gt; &gt;    attacker that whishes to be the service introduction point.
&gt; &gt;
&gt; 
&gt; Interesting idea.
&gt; 
&gt; I'm not that worried about the service leaking its version to the intro,
&gt; but I am worried about all attacked services saturating the few upgraded
&gt; intro points, so I agree that such a switch makes sense.

Yup, service version leaking is not a big concern of mine either.

Thanks for feedback! I've pushed the above changes as a fixup commit!

Onto responding to teor! :)

Cheers!
David

-- 
NYhJAL29Sx8P3VP6lGX7k5jnjujtvQexLKt/rMno1u8=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190613155048</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-06-13 15:50:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

[Attachment #2 (multipart/signed)]


On 13 Jun (10:35:34), teor wrote:
&gt; Hi,

[snip]

&gt; &gt;&gt;   The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt; &gt;&gt;   (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt; &gt;&gt; 
&gt; &gt;&gt;      [01] -- Min: 0, Max: INT_MAX
&gt; &gt;&gt;      [02] -- Min: 0, Max: INT_MAX
&gt; 
&gt; This is ambiguous:
&gt; * the value is 8 bytes long
&gt; * the length of the maximum is unspecified: is it 4 bytes, 8 bytes, signed, or
&gt;   unsigned?
&gt; * the torrc default is unsigned 4 bytes: UINT32_MAX

Yeah my goal was to max it out to the torrc but signed because our consensus
param are int32_t (networkstatus_get_param()).

I've pushed a fixup to clarify all this. I've actually put the INT32_MAX value
in there instead of just a "macro" :).

&gt; 
&gt; &gt; How would this new addition to the cell impact the size of the cell? How
&gt; &gt; much free space do we have for additional features to this cell (e.g. to
&gt; &gt; do the PoW stuff of the other thread)?
&gt; &gt; 
&gt; &gt;&gt;   A value of 0 means the defense is disabled which has precedence over the
&gt; &gt;&gt;   network wide consensus parameter.
&gt; 
&gt; Let's say "any value has precedence over the network wide consensus
&gt; parameter". Otherwise it's unclear if 0 is a special value or not.

Indeed. Corrected.

&gt; 
&gt; &gt;&gt;   In this case, if the rate per second is set to 0 (param 0x01) then the
&gt; &gt;&gt;   burst value should be ignored. And vice-versa, if the burst value is 0,
&gt; &gt;&gt;   then the rate value should be ignored. In other words, setting one single
&gt; &gt;&gt;   parameter to 0 disables the INTRODUCE2 rate limiting defense.
&gt; 
&gt; What happens if burst is less than rate?

I've clarified.

&gt; 
&gt; &gt; I think it could be cool to add a discussion section where we introduce
&gt; &gt; a new cell from the intro to the service which informs the service that
&gt; &gt; rate limiting limits have been hit. So that there is a way for the
&gt; &gt; service to get feedback that it's under attack or capped by
&gt; &gt; limits. Otherwise, there is simply no way to learn it.
&gt; &gt; 
&gt; &gt; This can be a later feature fwiw.
&gt; &gt; 
&gt; &gt;&gt; 3. Protocol Version
&gt; &gt;&gt; 
&gt; &gt;&gt;   We introduce a new protocol version in order for onion service that wants
&gt; &gt;&gt;   to specifically select introduction points supporting this new extension.
&gt; &gt;&gt;   But also, it should be used to know when to send this extension or not.
&gt; &gt;&gt; 
&gt; &gt;&gt;   The new version for the "HSIntro" protocol is:
&gt; &gt;&gt; 
&gt; &gt;&gt;      "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt; &gt;&gt;             service version 3 only.
&gt; &gt;&gt; 
&gt; &gt;&gt; 4. Configuration Options
&gt; &gt;&gt; 
&gt; &gt;&gt;   We also propose new torrc options in order for the operator to control
&gt; &gt;&gt;   those values passed through the ESTABLISH_INTRO cell.
&gt; &gt;&gt; 
&gt; &gt;&gt;      "HiddenServiceEnableIntroDoSDefense 0|1"
&gt; &gt;&gt; 
&gt; &gt;&gt;         If this option is set to 1, the onion service will always send to the
&gt; &gt;&gt;         introduction point denial of service defense parameters
&gt; 
&gt; if the intro point protocol supports them
&gt; 
&gt; &gt;&gt; regardless of
&gt; &gt;&gt;         what the consensus enables it or not. The value will be taken from
&gt; 
&gt; * values will be taken from
&gt; 
&gt; the HiddenServiceEnableIntroDoSRatePerSec and
&gt; HiddenServiceEnableIntroDoSBurstPerSec torrc options, then

Fixed.

&gt; 
&gt; &gt;&gt;         the consensus and if not present, the default values will be used.
&gt; &gt;&gt;         (Default: 0)
&gt; &gt;&gt; 
&gt; &gt;&gt;      "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt; &gt;&gt; 
&gt; &gt;&gt;         Controls the introduce rate per second the introduction point should
&gt; &gt;&gt;         impose on the introduction circuit.
&gt; &gt;&gt;         (Default: 25, Min: 0, Max: 4294967295)
&gt; 
&gt; Doesn't the default come from the consensus, and then the hard-coded
&gt; default?

If explicitely set, the torrc options always win over the consensus param.
Thus, the default values are only taken if the consensus param aren't present.

I've clarified.

&gt; 
&gt; Also see my notes about ambiguous size/signed maximums above.
&gt; 
&gt; &gt;&gt;      "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt; &gt;&gt; 
&gt; &gt;&gt;         Controls the introduce burst per second the introduction point should
&gt; &gt;&gt;         impose on the introduction circuit.
&gt; &gt;&gt;         (Default: 200, Min: 0, Max: 4294967295)
&gt; 
&gt; Doesn't the default come from the consensus, and then the hard-coded
&gt; default?
&gt; 
&gt; Also see my notes about ambiguous size/signed maximums above.

Fixed.

&gt; 
&gt; &gt;&gt;   They respectively control the parameter type 0x01 and 0x02 in the
&gt; &gt;&gt;   ESTABLISH_INTRO cell detailed in section 2.
&gt; &gt;&gt; 
&gt; &gt;&gt;   The default values of the rate and burst are taken from ongoing anti-DoS
&gt; &gt;&gt;   implementation work [1][2]. They aren't meant to be defined with this
&gt; &gt;&gt;   proposal.
&gt; &gt;&gt; 
&gt; &gt;&gt; 5. Security Considerations
&gt; &gt;&gt; 
&gt; &gt;&gt;   Using this new extension leaks to the introduction point the service's tor
&gt; &gt;&gt;   version. This could in theory help any kind of de-anonymization attack on a
&gt; &gt;&gt;   service since at first it partitions it in a very small group of running
&gt; &gt;&gt;   tor.
&gt; &gt;&gt; 
&gt; &gt;&gt;   Furthermore, when the first tor version supporting this extension will be
&gt; &gt;&gt;   released, very few introduction points will be updated to that version.
&gt; &gt;&gt;   Which means that we could end up in a situation where many services want to
&gt; &gt;&gt;   use this feature and thus will only select a very small subset of relays
&gt; &gt;&gt;   supporting it overloading them but also making it an easier vector for an
&gt; &gt;&gt;   attacker that whishes to be the service introduction point.
&gt; &gt;&gt; 
&gt; &gt; 
&gt; &gt; Interesting idea.
&gt; &gt; 
&gt; &gt; I'm not that worried about the service leaking its version to the intro,
&gt; &gt; but I am worried about all attacked services saturating the few upgraded
&gt; &gt; intro points, so I agree that such a switch makes sense.
&gt; &gt; 
&gt; &gt;&gt;   For the above reasons, we propose a new consensus parameters that will
&gt; 
&gt; * parameter
&gt; 
&gt; &gt;&gt;   provide a "go ahead" for all service out there to start using this
&gt; &gt;&gt;   extension only if the introduction point supports it.
&gt; &gt;&gt; 
&gt; &gt;&gt;      "enable_establish_intro_dos_extension"
&gt; 
&gt; Can we just call it HiddenServiceEnableIntroDoSDefense?
&gt; 
&gt; It's weird naming some DoS consensus parameters in snake_case, and
&gt; others in CamelCase. And it's also weird having different names for
&gt; torrc options and consensus parameters.

Yes good idea. And this is how we did things with the DoS subsystem as well to
match both in the consensus and torrc.

&gt; 
&gt; &gt;&gt;         If set to 1, this makes tor start using this new proposed extension
&gt; &gt;&gt;         if available by the introduction point (looking at the new protover).
&gt; &gt;&gt; 
&gt; &gt;&gt;   This parameter should be switched on when a majority of relays have
&gt; &gt;&gt;   upgraded to a tor version that supports this extension for which we believe
&gt; &gt;&gt;   will also give enough time for most services to move to this new stable
&gt; &gt;&gt;   version making the anonymity set much bigger.
&gt; &gt;&gt; 
&gt; &gt;&gt;   We propose to add a torrc option
&gt; 
&gt; HiddenServiceEnableIntroDoSDefense?
&gt; 
&gt; &gt;&gt; to ignore this parameter and force tor to
&gt; &gt;&gt;   select introduction points supporting this extension which will
&gt; &gt;&gt;   effectively, in the beginning, toss away these security considerations.
&gt; &gt;&gt; 
&gt; &gt;&gt;   We believe that there are services that do not care about anonymity on the
&gt; &gt;&gt;   service side and thus could benefit from this feature right away if they
&gt; &gt;&gt;   wish to use it.
&gt; 
&gt; I think we also need consensus parameters for HiddenServiceEnableIntroDoSRatePerSec and
&gt; HiddenServiceEnableIntroDoSBurstPerSec.

We do, it is just part of another piece of work from ticket #15516.

Everything has been fixed and pushed!

Thanks!
David

-- 
NYhJAL29Sx8P3VP6lGX7k5jnjujtvQexLKt/rMno1u8=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190617082341</emailId><senderName>Pili Guerra</senderName><senderEmail>pili@torproject.org</senderEmail><timestampReceived>2019-06-17 08:23:41-0400</timestampReceived><subject>Re: [tor-dev] OTRv4 summit at PETS2019</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Sofia,

Thanks for sharing!

If it's ok with you I can forward this to the tor-meeting mailing list for people \
attending the Tor Meeting in Stockholm as this may be of interest to them also. \
Unfortunately I will be leaving on the 15th and will be unable to attend.

Thanks!

Pili
—
Project Manager: Tor Browser, UX and Community teams
pili at torproject dot org 
gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45

&gt; On 12 Jun 2019, at 14:39, Sofia Celi &lt;sofia@autonomia.digital&gt; wrote:
&gt; 
&gt; Hi, Tor people!
&gt; 
&gt; My name is Sofía and I'm the person leading the OTRv4 initiative. I don't know
&gt; if this is the best place to send this, so if it is not, let me know ;)
&gt; 
&gt; As part of the work on creating the version 4 of the OTR (Off-the-Record)
&gt; messaging protocol, we are running a summit in Stockholm, Sweden, the 15 of
&gt; July, in the morning.
&gt; 
&gt; This summit runs in parallel with the Privacy Enhancing Technology Symposium
&gt; 2019 (PETS2019, https://petsymposium.org/2019/index.php). It will be a summit
&gt; around the work done in the field of secure messaging, deniability and privacy
&gt; on July 15 on the morning (that is, the day before the start of PETS 2019). It
&gt; will be held at the Royal Institute of Technology (KTH). You can find it on the
&gt; official PETS2019 programm: https://petsymposium.org/2019/program.php and on the
&gt; official otr website: http://otr.im/
&gt; 
&gt; The OTRv4 summit will feature a mix of a discussions, short talks and
&gt; presentations which aim to highlight the importance of privacy, security and
&gt; deniability in a secure messaging setting to researchers, students, activists
&gt; and developers. The final schedule for the event will be announced closer to the
&gt; event. The workshop will start at 9 am and end at 12.30 pm.
&gt; 
&gt; As one of our developers and my current partner, Ola Bini, has been detained
&gt; in Ecuador with no actual evidence, we will also talk about this. You can read
&gt; about this in the latest EFF statement:
&gt; https://www.eff.org/deeplinks/2019/06/eff-ohchr-iachr-cybercrime-law-interconnected-human-rights
&gt;  
&gt; We will like that you join us there... so let us know if you can!
&gt; 
&gt; Thank you!
&gt; 
&gt; The OTRv4 team
&gt; --
&gt; Sofía Celi
&gt; @claucece
&gt; Cryptographic research and implementation at CAD: https://autonomia.digital/
&gt; EF74 1A5F 5692 E56F 14F6  243C 3992 6144 F89D 996F
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hi Sofia,&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Thanks for sharing!&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;If it's ok with you I can forward this to the \
tor-meeting mailing list for people attending the Tor Meeting in Stockholm as this \
may be of interest to them also. Unfortunately I will be leaving on the 15th and will \
be unable to attend.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Thanks!&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Pili&lt;br \
class=""&gt;&lt;div class=""&gt; &lt;div style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); \
font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: \
normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; \
word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \
text-decoration: none;"&gt;—&lt;br class=""&gt;Project Manager: Tor Browser, UX and \
Community teams&lt;br class=""&gt;pili at torproject dot org &lt;br \
class=""&gt;gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45&lt;/div&gt; &lt;/div&gt;
&lt;div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On 12 Jun 2019, at \
14:39, Sofia Celi &lt;&lt;a href="mailto:sofia@autonomia.digital" \
class=""&gt;sofia@autonomia.digital&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Hi, Tor people!&lt;br \
class=""&gt;&lt;br class=""&gt;My name is Sofía and I'm the person leading the OTRv4 \
initiative. I don't know&lt;br class=""&gt;if this is the best place to send this, so if it \
is not, let me know ;)&lt;br class=""&gt;&lt;br class=""&gt;As part of the work on creating the \
version 4 of the OTR (Off-the-Record)&lt;br class=""&gt;messaging protocol, we are running \
a summit in Stockholm, Sweden, the 15 of&lt;br class=""&gt;July, in the morning.&lt;br \
class=""&gt;&lt;br class=""&gt;This summit runs in parallel with the Privacy Enhancing \
Technology Symposium&lt;br class=""&gt;2019 (PETS2019, &lt;a \
href="https://petsymposium.org/2019/index.php" \
class=""&gt;https://petsymposium.org/2019/index.php&lt;/a&gt;). It will be a summit&lt;br \
class=""&gt;around the work done in the field of secure messaging, deniability and \
privacy&lt;br class=""&gt;on July 15 on the morning (that is, the day before the start of \
PETS 2019). It&lt;br class=""&gt;will be held at the Royal Institute of Technology (KTH). \
You can find it on the&lt;br class=""&gt;official PETS2019 programm: &lt;a \
href="https://petsymposium.org/2019/program.php" \
class=""&gt;https://petsymposium.org/2019/program.php&lt;/a&gt; and on the&lt;br \
class=""&gt;official otr website: &lt;a href="http://otr.im/" \
class=""&gt;http://otr.im/&lt;/a&gt;&lt;br class=""&gt;&lt;br class=""&gt;The OTRv4 summit will feature a \
mix of a discussions, short talks and&lt;br class=""&gt;presentations which aim to \
highlight the importance of privacy, security and&lt;br class=""&gt;deniability in a secure \
messaging setting to researchers, students, activists&lt;br class=""&gt;and developers. The \
final schedule for the event will be announced closer to the&lt;br class=""&gt;event. The \
workshop will start at 9 am and end at 12.30 pm.&lt;br class=""&gt;&lt;br class=""&gt;As one of \
our developers and my current partner, Ola Bini, has been detained&lt;br class=""&gt;in \
Ecuador with no actual evidence, we will also talk about this. You can read&lt;br \
class=""&gt;about this in the latest EFF statement:&lt;br class=""&gt;&lt;a \
href="https://www.eff.org/deeplinks/2019/06/eff-ohchr-iachr-cybercrime-law-interconnected-human-rights" \
class=""&gt;https://www.eff.org/deeplinks/2019/06/eff-ohchr-iachr-cybercrime-law-interconnected-human-rights&lt;/a&gt;&lt;br \
class=""&gt;&lt;br class=""&gt;We will like that you join us there... so let us know if you \
can!&lt;br class=""&gt;&lt;br class=""&gt;Thank you!&lt;br class=""&gt;&lt;br class=""&gt;The OTRv4 team&lt;br \
class=""&gt;--&lt;br class=""&gt;Sofía Celi&lt;br class=""&gt;@claucece&lt;br class=""&gt;Cryptographic \
research and implementation at CAD: https://autonomia.digital/&lt;br class=""&gt;EF74 1A5F \
5692 E56F 14F6  243C 3992 6144 F89D 996F&lt;br class=""&gt;&lt;br class=""&gt;&lt;br \
class=""&gt;_______________________________________________&lt;br class=""&gt;tor-dev mailing \
list&lt;br class=""&gt;tor-dev@lists.torproject.org&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190530144656</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-30 14:46:56-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

Hi,

&gt; On 30 May 2019, at 23:49, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt; clients can reach the service every second up to a burst of 600 at once. This
&gt; probably will ring alarms bell for very popular services that probably gets
&gt; 1000+ users a second so please check next section.

Do we know how many introduce cells are sent to popular services?

How can the operators of these services find out their current introduce rate?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190530190340</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-05-30 19:03:40-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/alternative)]


Nice to try to stop this DoS vulnerability at network design level.

Can we have an estimation of when will be released this antiDoS 
features? 0.4.1.x or 0.4.2.x ?

And just came to my mind reading this, that to stop these attacks we 
could implement some authentication based on Proof of Work or something 
like that. This means that to launch such an attack the attacker (client 
level) should compute the PoW and must have many computing power, while 
normal clients/users don't need almost any change. Actually this is what 
PoW is very useful.

On 30/5/19 15:49, David Goulet wrote:
&gt; Greetings!
&gt;
&gt; As some of you know, a bunch of onion services were or are still under heavy
&gt; DDoS on the network. More specifically, they are bombarded with introduction
&gt; requests (INTRODUCE2 cells) which forces them to rendezvous for each of them
&gt; by creating a ton of circuits.
&gt;
&gt; This basically leads to a resource exhaustion attack on the service side with
&gt; its CPU massively used for path selection, opening new circuits and
&gt; continously handling INTRODUCE2 cells.
&gt;
&gt; Unfortunately, our circuit-level flow control does not apply to the service
&gt; introduction circuit which means that the intro point is allowed, by the Tor
&gt; protocol, to send an arbitrary large amount of cells down the circuit. This
&gt; means for the service that even after the DoS has stopped, it would still
&gt; receive massive amounts of cells because some are either inflight on the
&gt; circuit or queued at the intro point ready to be sent (towards the service).
&gt;
&gt; That being all said, our short-term goal here is to add INTRODUCE2
&gt; rate-limiting (similar to the Guard DoS subsystem deployed early last year)
&gt; *at* the intro point but much simpler. The goal is to soak up the introduction
&gt; load directly at the intro points which would help reduce the load on the
&gt; network overall and thus preserve its health.
&gt;
&gt; Please have a look at https://trac.torproject.org/15516 for some discussions
&gt; and ongoing code work. We are at the point where we have a branch that rate
&gt; limits INTRODUCE2 cells at the intro point but we need to figure out proper
&gt; values for the rate per second and the burst allowed.
&gt;
&gt; One naive approach is to see how much cells an attack can send towards a
&gt; service. George and I have conducted experiment where with 10 *modified* tor
&gt; clients bombarding a service at a much faster rate than 1 per-second (what
&gt; vanilla tor does if asked to connect a lot), we see in 1 minute ~15000
&gt; INTRODUCE2 cells at the service. This varies in the thousands depending on
&gt; different factors but overall that is a good average of our experiment.
&gt;
&gt; This means that 15000/60 = 250 cells per second.
&gt;
&gt; Considering that this is an absurd amount of INTRODUCE2 cells (maybe?), we can
&gt; put a rate per second of let say a fifth meaning 50 and a burst of 200.
&gt;
&gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt; clients can reach the service every second up to a burst of 600 at once. This
&gt; probably will ring alarms bell for very popular services that probably gets
&gt; 1000+ users a second so please check next section.
&gt;
&gt; I'm not that excited about hardcoded network wide values so this is why the
&gt; next section is more exciting but much more work for us!
&gt;
&gt; One step further: we have not really decided yet if this is something we want
&gt; nor have time to tackle but an idea here would be for a service to inform the
&gt; intro point, using the ESTABLISH_INTRO cell payload, on the parameters it
&gt; wants for its DoS defenses. So let say a very popular .onion with OnionBalance
&gt; and 10 intro points, could tell to its intro points that it wants much higher
&gt; values for the DoS defenses (or even put it off).
&gt;
&gt; However, it doesn't change the initial building block of being able to rate
&gt; limit at the introduction point. As a second step, we can add this new type of
&gt; ESTABLISH_INTRO cell. It is always dicy to introduce a new cell since for
&gt; instance this would leak information to the intro point that the service is
&gt; "&gt;= version". Thus, this needs to be done with carefully.
&gt;
&gt; Time for your thoughts and help! :)
&gt;
&gt; Thanks everyone!
&gt; David
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Nice to try to stop this DoS vulnerability at network design
      level. &lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;Can we have an estimation of when will be released this antiDoS
      features? 0.4.1.x or 0.4.2.x ?&lt;/p&gt;
    &lt;p&gt;And just came to my mind reading this, that to stop these attacks
      we could implement some authentication based on Proof of Work or
      something like that. This means that to launch such an attack the
      attacker (client level) should compute the PoW and must have many
      computing power, while normal clients/users don't need almost any
      change. Actually this is what PoW is very useful.&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 30/5/19 15:49, David Goulet wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite" cite="mid:20190530134926.GA9675@raoul"&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;Greetings!

As some of you know, a bunch of onion services were or are still under heavy
DDoS on the network. More specifically, they are bombarded with introduction
requests (INTRODUCE2 cells) which forces them to rendezvous for each of them
by creating a ton of circuits.

This basically leads to a resource exhaustion attack on the service side with
its CPU massively used for path selection, opening new circuits and
continously handling INTRODUCE2 cells.

Unfortunately, our circuit-level flow control does not apply to the service
introduction circuit which means that the intro point is allowed, by the Tor
protocol, to send an arbitrary large amount of cells down the circuit. This
means for the service that even after the DoS has stopped, it would still
receive massive amounts of cells because some are either inflight on the
circuit or queued at the intro point ready to be sent (towards the service).

That being all said, our short-term goal here is to add INTRODUCE2
rate-limiting (similar to the Guard DoS subsystem deployed early last year)
*at* the intro point but much simpler. The goal is to soak up the introduction
load directly at the intro points which would help reduce the load on the
network overall and thus preserve its health.

Please have a look at &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/15516"&gt;https://trac.torproject.org/15516&lt;/a&gt; for \
some discussions and ongoing code work. We are at the point where we have a branch \
that rate limits INTRODUCE2 cells at the intro point but we need to figure out proper
values for the rate per second and the burst allowed.

One naive approach is to see how much cells an attack can send towards a
service. George and I have conducted experiment where with 10 *modified* tor
clients bombarding a service at a much faster rate than 1 per-second (what
vanilla tor does if asked to connect a lot), we see in 1 minute ~15000
INTRODUCE2 cells at the service. This varies in the thousands depending on
different factors but overall that is a good average of our experiment.

This means that 15000/60 = 250 cells per second.

Considering that this is an absurd amount of INTRODUCE2 cells (maybe?), we can
put a rate per second of let say a fifth meaning 50 and a burst of 200.

Over the normal 3 intro points a service has, it means 150 introduction
per-second are allowed with a burst of 600 in total. Or in other words, 150
clients can reach the service every second up to a burst of 600 at once. This
probably will ring alarms bell for very popular services that probably gets
1000+ users a second so please check next section.

I'm not that excited about hardcoded network wide values so this is why the
next section is more exciting but much more work for us!

One step further: we have not really decided yet if this is something we want
nor have time to tackle but an idea here would be for a service to inform the
intro point, using the ESTABLISH_INTRO cell payload, on the parameters it
wants for its DoS defenses. So let say a very popular .onion with OnionBalance
and 10 intro points, could tell to its intro points that it wants much higher
values for the DoS defenses (or even put it off).

However, it doesn't change the initial building block of being able to rate
limit at the introduction point. As a second step, we can add this new type of
ESTABLISH_INTRO cell. It is always dicy to introduce a new cell since for
instance this would leak information to the intro point that the service is
"&gt;= version". Thus, this needs to be done with carefully.

Time for your thoughts and help! :)

Thanks everyone!
David

&lt;/pre&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;pre class="moz-quote-pre" \
wrap=""&gt;_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190531122153</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-31 12:21:53-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/signed)]


On 31 May (00:46:56), teor wrote:
&gt; Hi,
&gt; 
&gt; &gt; On 30 May 2019, at 23:49, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; &gt; 
&gt; &gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt; &gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt; &gt; clients can reach the service every second up to a burst of 600 at once. This
&gt; &gt; probably will ring alarms bell for very popular services that probably gets
&gt; &gt; 1000+ users a second so please check next section.
&gt; 
&gt; Do we know how many introduce cells are sent to popular services?
&gt; 
&gt; How can the operators of these services find out their current introduce rate?

Yes good point.

The only thing we have available is the heartbeat that should read like so:

  log_notice(LD_HEARTBEAT,
             "Our onion service%s received %u v2 and %u v3 INTRODUCE2 cells "
             "and attempted to launch %d rendezvous circuits.",
             num_services == 1 ? "" : "s",
             hs_stats_get_n_introduce2_v2_cells(),
             hs_stats_get_n_introduce2_v3_cells(),
             hs_stats_get_n_rendezvous_launches());

Those counters don't get reset so to get the rate one need to compare between
two heartbeats (default is every 6h).

Thus, if any big popular service out there (no need to give the .onion) can
tell us the rate they see, it would be grand!

Thanks!
David

-- 
5UzXP0vqLbSmETrsQZ9XaTIqBR5cOa/yi7T2AaPXzBw=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190531181516</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-05-31 18:15:16-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/alternative)]


Hello, can someone answer some questions I have about how this attacks work?

As far as I understand INTRODUCE2 cells are sent by Introduction Points 
directly to the Hidden Service. But this only happens after a Client 
sends the INTRODUCE1 cell to the Introduction Point.

Now the question is, do we allow more than 1 INTRODUCE1 per client 
circuit? If this is right, why? Or the attack is working because the 
client makes a new circuit/connection to the I.P. each time for sending 
a INTRODUCE1?

On 31/5/19 14:21, David Goulet wrote:
&gt; On 31 May (00:46:56), teor wrote:
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt;&gt; On 30 May 2019, at 23:49, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt;&gt;&gt;
&gt;&gt;&gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt;&gt;&gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt;&gt;&gt; clients can reach the service every second up to a burst of 600 at once. This
&gt;&gt;&gt; probably will ring alarms bell for very popular services that probably gets
&gt;&gt;&gt; 1000+ users a second so please check next section.
&gt;&gt; Do we know how many introduce cells are sent to popular services?
&gt;&gt;
&gt;&gt; How can the operators of these services find out their current introduce rate?
&gt; Yes good point.
&gt;
&gt; The only thing we have available is the heartbeat that should read like so:
&gt;
&gt;    log_notice(LD_HEARTBEAT,
&gt;               "Our onion service%s received %u v2 and %u v3 INTRODUCE2 cells "
&gt;               "and attempted to launch %d rendezvous circuits.",
&gt;               num_services == 1 ? "" : "s",
&gt;               hs_stats_get_n_introduce2_v2_cells(),
&gt;               hs_stats_get_n_introduce2_v3_cells(),
&gt;               hs_stats_get_n_rendezvous_launches());
&gt;
&gt; Those counters don't get reset so to get the rate one need to compare between
&gt; two heartbeats (default is every 6h).
&gt;
&gt; Thus, if any big popular service out there (no need to give the .onion) can
&gt; tell us the rate they see, it would be grand!
&gt;
&gt; Thanks!
&gt; David
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hello, can someone answer some questions I have about how this
      attacks work?&lt;/p&gt;
    &lt;p&gt;As far as I understand INTRODUCE2 cells are sent by Introduction
      Points directly to the Hidden Service. But this only happens after
      a Client sends the INTRODUCE1 cell to the Introduction Point.&lt;/p&gt;
    &lt;p&gt;Now the question is, do we allow more than 1 INTRODUCE1 per
      client circuit? If this is right, why? Or the attack is working
      because the client makes a new circuit/connection to the I.P. each
      time for sending a INTRODUCE1?&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 31/5/19 14:21, David Goulet wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite" cite="mid:20190531122153.GA10309@raoul"&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;On 31 May (00:46:56), teor wrote:
&lt;/pre&gt;
      &lt;blockquote type="cite"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;Hi,

&lt;/pre&gt;
        &lt;blockquote type="cite"&gt;
          &lt;pre class="moz-quote-pre" wrap=""&gt;On 30 May 2019, at 23:49, David Goulet \
&lt;a class="moz-txt-link-rfc2396E" \
href="mailto:dgoulet@torproject.org"&gt;&lt;dgoulet@torproject.org&gt;&lt;/a&gt; wrote:

Over the normal 3 intro points a service has, it means 150 introduction
per-second are allowed with a burst of 600 in total. Or in other words, 150
clients can reach the service every second up to a burst of 600 at once. This
probably will ring alarms bell for very popular services that probably gets
1000+ users a second so please check next section.
&lt;/pre&gt;
        &lt;/blockquote&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;
Do we know how many introduce cells are sent to popular services?

How can the operators of these services find out their current introduce rate?
&lt;/pre&gt;
      &lt;/blockquote&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;
Yes good point.

The only thing we have available is the heartbeat that should read like so:

  log_notice(LD_HEARTBEAT,
             "Our onion service%s received %u v2 and %u v3 INTRODUCE2 cells "
             "and attempted to launch %d rendezvous circuits.",
             num_services == 1 ? "" : "s",
             hs_stats_get_n_introduce2_v2_cells(),
             hs_stats_get_n_introduce2_v3_cells(),
             hs_stats_get_n_rendezvous_launches());

Those counters don't get reset so to get the rate one need to compare between
two heartbeats (default is every 6h).

Thus, if any big popular service out there (no need to give the .onion) can
tell us the rate they see, it would be grand!

Thanks!
David

&lt;/pre&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;pre class="moz-quote-pre" \
wrap=""&gt;_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190531182115</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-05-31 18:21:15-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

On Fri, May 31, 2019 at 08:15:16PM +0200, juanjo wrote:
&gt; As far as I understand INTRODUCE2 cells are sent by Introduction Points
&gt; directly to the Hidden Service. But this only happens after a Client sends
&gt; the INTRODUCE1 cell to the Introduction Point.
&gt; 
&gt; Now the question is, do we allow more than 1 INTRODUCE1 per client circuit?
&gt; If this is right, why? Or the attack is working because the client makes a
&gt; new circuit/connection to the I.P. each time for sending a INTRODUCE1?

It's that second one. Some jerk is pretending to be many Tor users,
and since it's an anonymity system, it's hard to tell which ones are
the jerk and which ones are other users.

For the "oops you can send more than one intro1 cell per intro circuit"
bug, see https://bugs.torproject.org/15515 (fixed in Tor 0.2.4.27)

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190531182632</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-05-31 18:26:32-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

On Thu, May 30, 2019 at 09:03:40PM +0200, juanjo wrote:
&gt; And just came to my mind reading this, that to stop these attacks we could
&gt; implement some authentication based on Proof of Work or something like that.
&gt; This means that to launch such an attack the attacker (client level) should
&gt; compute the PoW and must have many computing power, while normal
&gt; clients/users don't need almost any change. Actually this is what PoW is
&gt; very useful.

Check out https://bugs.torproject.org/25066 for more details on this idea.

There are still some interesting design questions to be resolved before
it's really a proposed idea.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190531184054</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-05-31 18:40:54-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

Ok, thanks, I was actually thinking about PoW on the Introduction Point 
itself, but it would need to add a round trip, like some sort of 
"authentication based PoW" before allowing to send the INTRODUCE1 cell. 
At least it would make the overhead of clients higher than I.P. as the 
clients would need to compute the PoW function and the I.P. only to 
verify it. So if right now the cost of the attack is "low" we can add an 
overhead of +10 to the client and only +2 to the I.P. (for example) and 
the hidden service doesn't need to do anything.

I will write down my idea and send it here.

On 31/5/19 20:26, Roger Dingledine wrote:
&gt; On Thu, May 30, 2019 at 09:03:40PM +0200, juanjo wrote:
&gt;&gt; And just came to my mind reading this, that to stop these attacks we could
&gt;&gt; implement some authentication based on Proof of Work or something like that.
&gt;&gt; This means that to launch such an attack the attacker (client level) should
&gt;&gt; compute the PoW and must have many computing power, while normal
&gt;&gt; clients/users don't need almost any change. Actually this is what PoW is
&gt;&gt; very useful.
&gt; Check out https://bugs.torproject.org/25066 for more details on this idea.
&gt;
&gt; There are still some interesting design questions to be resolved before
&gt; it's really a proposed idea.
&gt;
&gt; --Roger
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190531191823</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-31 19:18:23-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

juanjo &lt;juanjo@avanix.es&gt; writes:

&gt; Ok, thanks, I was actually thinking about PoW on the Introduction Point 
&gt; itself, but it would need to add a round trip, like some sort of 
&gt; "authentication based PoW" before allowing to send the INTRODUCE1 cell. 
&gt; At least it would make the overhead of clients higher than I.P. as the 
&gt; clients would need to compute the PoW function and the I.P. only to 
&gt; verify it. So if right now the cost of the attack is "low" we can add an 
&gt; overhead of +10 to the client and only +2 to the I.P. (for example) and 
&gt; the hidden service doesn't need to do anything.
&gt;

Also see the idea in (b) (1) here: https://lists.torproject.org/pipermail/tor-dev/2019-April/013790.html
and how it couples with the "rendezvous approver" from ticket #16059.
Given a generic system there, adding proof-of-work is a possibility.

Another option would be to add the proof-of-work in the public parts of
INTRO1 and have the introduction point verify it which is not covered in
our email above.

Proof-of-work systems could be something to consider, altho tweaking a
proof-of-work system that would deny attackers and still allow normal
clients to visit it (without e.g. burning the battery of mobile clients)
is an open problem AFAIK.



_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190603093955</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-03 09:39:55-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; George Kadianakis &lt;desnacked@riseup.net&gt; writes:
&gt; 
&gt; &gt; juanjo &lt;juanjo@avanix.es&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; Ok, thanks, I was actually thinking about PoW on the Introduction Point 
&gt; &gt; &gt; itself, but it would need to add a round trip, like some sort of 
&gt; &gt; &gt; "authentication based PoW" before allowing to send the INTRODUCE1 cell. 
&gt; &gt; &gt; At least it would make the overhead of clients higher than I.P. as the 
&gt; &gt; &gt; clients would need to compute the PoW function and the I.P. only to 
&gt; &gt; &gt; verify it. So if right now the cost of the attack is "low" we can add an 
&gt; &gt; &gt; overhead of +10 to the client and only +2 to the I.P. (for example) and 
&gt; &gt; &gt; the hidden service doesn't need to do anything.
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; Also see the idea in (b) (1) here: \
&gt; &gt; https://lists.torproject.org/pipermail/tor-dev/2019-April/013790.html and how it \
&gt; &gt; couples with the "rendezvous approver" from ticket #16059. Given a generic system \
&gt; &gt; there, adding proof-of-work is a possibility. 
&gt; &gt; Another option would be to add the proof-of-work in the public parts of
&gt; &gt; INTRO1 and have the introduction point verify it which is not covered in
&gt; &gt; our email above.
&gt; &gt; 
&gt; &gt; Proof-of-work systems could be something to consider, altho tweaking a
&gt; &gt; proof-of-work system that would deny attackers and still allow normal
&gt; &gt; clients to visit it (without e.g. burning the battery of mobile clients)
&gt; &gt; is an open problem AFAIK.
&gt; &gt; 
&gt; &gt; 
&gt; 
&gt; Here is how this could work after a discussion with dgoulet and arma on IRC:
&gt; 
&gt; 1) Service enables DoS protection in its torrc.
&gt; 
&gt; 2) Service uploads descriptor with PoW parameters.
&gt; 
&gt; 3) Service sends special flag in its ESTABLISH_INTRO to its intro points
&gt; that says "Enable PoW defences".
&gt; 
&gt; 4) Clients fetch descriptor, parse the PoW parameters and now need to
&gt; complete PoW before they send a valid INTRO1 cell, otherwise it gets
&gt; dropped by the intro point.
&gt; 
&gt; All the above seems like they could work for some use cases.
&gt; 
&gt; As said above, I doubt there are parameters that would help against DoS
&gt; and still allow people to pleasantly visit such onion services through
&gt; an uncharged mobile phone, but this choice is up to the onion
&gt; service. The onion service can turn this feature on when they want, and
&gt; disable it when they want. And mobile clients could also disallow visits
&gt; to such sites to avoid battery/CPU burns.
&gt; 
&gt; All the above seems likely, but it's significant work. We first need a
&gt; proposal to discuss, and then there is lots of code to be written...
&gt; 

FWIW, thinking about this more, I think it's quite unlikely that we will
find a non-interactive PoW system here (like hashcash) whose parameters
would allow a legit client to compute a PoW in a reasonable time frame,
and still disallow a motivated attacker with GPUs to compute
hundreds/thousands of them in a single second (which can be enough to
DoS a service).

We should look into parameters and tuning non-interactive PoW systems,
or we could look into interactive proof-of-work systems like CAPTCHAs
(or something else), which would be additional work but might suit as
more.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190606170352</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-06 17:03:52-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; Greetings!
&gt;
&gt; &lt;snip&gt;
&gt;

Hello, I'm here to brainstorm about this suggested feature. I don't have
a precise plan forward here, so I'm just talking.

&gt; Unfortunately, our circuit-level flow control does not apply to the
&gt; service introduction circuit which means that the intro point is
&gt; allowed, by the Tor protocol, to send an arbitrary large amount of cells
&gt; down the circuit.  This means for the service that even after the DoS
&gt; has stopped, it would still receive massive amounts of cells because
&gt; some are either inflight on the circuit or queued at the intro point
&gt; ready to be sent (towards the service).
&gt; 

== SENDME VS Token bucket

So it seems like we are going with a token bucket approach (#15516) to
rate-limit introduce cells, even tho the rest of the Tor protocol is
using SENDME cells. Are we reinventing the wheel here?

&gt; &gt; That being all said, our short-term goal here is to add INTRODUCE2
&gt; rate-limiting (similar to the Guard DoS subsystem deployed early last year)
&gt; *at* the intro point but much simpler. The goal is to soak up the introduction
&gt; load directly at the intro points which would help reduce the load on the
&gt; network overall and thus preserve its health.
&gt;

== We need to understand the effects of this feature: 

First of all, the main thing to note here is that this is a feature that
primarily intends to improve network health against DoS adversaries. It
achieves this by greatly reducing the amount of useless rendezvous
circuits opened by the victim service, which then improves the health of
guard nodes (when guard nodes breaks, circuit start retrying endlessly,
and hell begins).

We don't know how this feature will impact the availability of an
attacked service. Right now, my hypothesis is that even with this
feature enabled, an attacked service will remain unusable. That's
because an attacker who spams INTRO1 cells will always saturate the
intro point and innocent clients with a browser will be very unlikely to
get service (kinda like sitting under a waterfall and trying to fill a
glass with your spit). That said, with this defense, the service won't
be 100% CPU, so perhaps innocent clients who manage to sneak in will get
service, whereas now they don't anyhow.

IMO, it's very important to understand exactly how this feature will
impact the availability of the service: If this feature does not help
the availability of the service, then victim operators will be
incentivized to disable the feature (or crank up the limits) which means
that we will not improve the health of the network, which is our primary
goal here.

---

== Why are we doing all this?

Another thing I wanted to mention here is the second order effect we are
facing. The only reason we are doing all this is because attackers are
incentived into attacking onion services. Perhaps the best thing we
could do here is to create tools to make denial of service attacks less
effective against onion services, which would make attackers stop
performing them, and hence we won't need to implement rate-limits to
protect the network in case they do. Right now the best things we have
towards that direction is the incomplete-but-plausible design of [0] and
the inelegant 1b from [1].

This is especially true since to get this rate-limiting feature deployed
to the whole network we need all relays (intro points) to upgrade to the
new version so we are looking at years in the future anyway.

[0]: https://lists.torproject.org/pipermail/tor-dev/2019-May/013849.html
     https://lists.torproject.org/pipermail/tor-dev/2019-June/013862.html
[1]: https://lists.torproject.org/pipermail/tor-dev/2019-April/013790.html

&gt;
&gt; One naive approach is to see how much cells an attack can send towards a
&gt; service. George and I have conducted experiment where with 10 *modified* tor
&gt; clients bombarding a service at a much faster rate than 1 per-second (what
&gt; vanilla tor does if asked to connect a lot), we see in 1 minute ~15000
&gt; INTRODUCE2 cells at the service. This varies in the thousands depending on
&gt; different factors but overall that is a good average of our experiment.
&gt;
&gt; This means that 15000/60 = 250 cells per second.
&gt;
&gt; Considering that this is an absurd amount of INTRODUCE2 cells (maybe?), we can
&gt; put a rate per second of let say a fifth meaning 50 and a burst of 200.
&gt;
&gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt; clients can reach the service every second up to a burst of 600 at once. This
&gt; probably will ring alarms bell for very popular services that probably gets
&gt; 1000+ users a second so please check next section.
&gt;
&gt; I'm not that excited about hardcoded network wide values so this is why the
&gt; next section is more exciting but much more work for us!
&gt;

Yes, I'm also very afraid of imposing network wide values here. What
happens to hypothetical onion services that outperform the hard limits
we impose here, even when they are not DoSed? The limits above are
extremely low when we are looking at normal busy websites on the
clearnet, so by activating them we are basically putting hard limits to
the adoption of onion services.

Perhaps that's something we want to do anyway, because not knowing how
many clients an onion service can support is also not ideal, but we
should really think twice (and then again twice) before doing it and
also talk to some people who manage busy sites in the onionspace and
outside of it.

== What about false positives?

Also given that the rate limiting happens on the intro point layer here,
how does a service learn that it's getting DoSed? Are we looking at a
special IP-&gt;HS cell that says "we are throttling your clients"? How much
to overengineer here?

== What's the ideal client behavior when the limit gets hit?

So given that these hard limits can be hit quite easily by an attacker,
what is the client behavior when they get hit? Will normal clients keep
on retrying intro points until they get service, and continuously
extending their circuits? This behavior is particularly important for
the availability of the service under this feature.

---

These are some thoughts I have about this. As you can see I'm also
confused and thinking about this topic :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190703183734</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-07-03 18:37:34-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/signed)]


On 30 May (09:49:26), David Goulet wrote:
&gt; Greetings!

[snip]

Hi everyone,

I'm writing here to update on where we are about the introduction rate
limiting at the intro point feature.

The branch of #15516 (https://trac.torproject.org/15516) is ready to be merged
upstream which implements a simple rate/burst combo for controlling the amount
of INTRODUCE2 cells that are relayed to the service.

As previously detailed in this thread, the default values are a rate of 25
introduction per second and a burst of 200 per second. These values can be
controlled by consensus parameters meaning they can be changed network wide.

We've first asked big service operators, I'm not going to detail the values
they provided us in private, but those defaults are quite large enough to
sustain heavy traffic from what we can tell from what they gave us.

The second thing we did is do experimental testing to see how CPU usage and
availability is affected. We've tested this with 3 _fast_ introduction points
and then 3 rate limited introduction points.

The good news is that once the attack stops, the rain of introduction requests
to the service stops very quickly.

With the default rate/burst values, on a Intel(R) Xeon(R) CPU E5-2650 v4 @
2.20GHz (8 cores), the tor service CPU doesn't go above ~60% (on one single
core). And almost drops to 0 as soon as the attack ends.

The bad news is that availability is _not_ improved. One of the big reasons
for that is because the rate limit defenses, once engaged at the intro point,
will send back a NACK to the client. A vanilla tor client will stop using that
introduction point away for 120 seconds if it gets 3 NACKs from it. This leads
to tor quickly giving up on trying to connect and thus telling the client that
connection is impossible to the .onion.

We've hacked a tor client to play along and stop ignoring the NACKs to see how
much time it would take to reach it. On average, a client would roughly need
around 70 seconds with more than 40 NACKs on average.

However, it varied a _lot_ during our experiments with many outliers from 8
seconds with 1 NACK up to 160 seconds with 88 NACKs. (For this, the
SocksTimeout had to be bumped quite a bit).

There is an avenue of improvement here to make the intro point sends a
specific NACK reason (like "Under heavy load" or ...) which would make the
client consider it like "I should retry soon-ish" and thus making the client
possibly able to connect after many seconds (or until the SocksTimeout).

Another bad news there! We can't do that anytime soon because of this bug that
basically crash clients if an unknown status code is sent back (that is a new
NACK value): https://trac.torproject.org/30454. So yeah... quite unfortunate
there but also a superb reason for everyone out there to upgrade :).

One good news is that it seems that having fast intro points instead of slow
IPs doesn't change much on the overall load on the service so this for now,
our experiment, shows it doesn't matter.

Overall, this rate limit feature does two things:

1. Reduce the overall network load.

   Soaking the introduction requests at the intro point helps avoid the
   service creating pointless rendezvous circuits which makes it "less" of an
   amplification attack.

2. Keep the service usable.

   The tor daemon doesn't go in massive CPU load and thus can be actually used
   properly during the attack.

The problem with (2) is the availability part where for a legit client to
reach the service, it is close to impossible for a vanilla tor without lots of
luck.  However, if let say the tor daemon would be configured with 2 .onion
where one is public and the other one is private with client authorization,
then the second .onion would be totally usable due to the tor daemon not being
CPU overloaded.

As a third thing we did about this. In order to make this feature a bit more
"malleable", we are working on https://trac.torproject.org/30924 which is
proposal 305.

In short, torrc options are added so an operator can change the rate/burst
that the intro points will use. We can do that using the ESTABLISH_INTRO cell
that will have an extension to define the DoS defense parameters (proposal
305).

That way, a service operator can disable this feature, or turn the knobs on
the rate/burst in order to basically adjust the defenses.

At this point in time, we don't have a good grasp on what happens in terms of
CPU if the rate or the burst is bumped up or even how availability is
affected. During our experimentation, we did observed a "sort of" linear
progression between CPU usage and rate. But we barely touched the surface
since it was changed from 25 to 50 to 75 and that is it.

We would require much more experimentation which is something we want to avoid
as much as possible on the real network.

Finally, many more changes are cooking up. One in particular is
https://trac.torproject.org/projects/tor/ticket/26294 that will make tor to
only rotate its intro points when the number of introduction requests is
between 150k to 300k (random value) which currently is between 16k and 32k.
See the ticket for the benefits here which mostly helps with (1).

There has been much talk about a client PoW (see the proposal 305 thread on
this list) which in theory would help out with service availability.

We will also soon merge upstream this ticket https://trac.torproject.org/24962
which goes one step further at denying single-hop connections to the
HSDir/Intro in order to try as much as possible to shutdown the Tor2web
connections (or any attacker that speeds things up on their side by single
hoping).

We are making progress here... This is really a non trivial problem and
solution for service availability are not that simple. Our priority is to
protect the network as much as possible and then move to possible solutions
for availability.

I'll stop for now. Huge thanks to everyone who provided service logs, ideas,
code review and future testers :).

Cheers!
David

-- 
ccaxzx2hoGOJKo8/00JcH6h3YBw/9SJzFt8yQ65rl9Y=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190704114648</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-07-04 11:46:48-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; On 30 May (09:49:26), David Goulet wrote:
&gt;&gt; Greetings!
&gt;
&gt; [snip]
&gt;
&gt; Hi everyone,
&gt;
&gt; I'm writing here to update on where we are about the introduction rate
&gt; limiting at the intro point feature.
&gt;
&gt; The branch of #15516 (https://trac.torproject.org/15516) is ready to be merged
&gt; upstream which implements a simple rate/burst combo for controlling the amount
&gt; of INTRODUCE2 cells that are relayed to the service.
&gt;

Great stuff! Thanks for the update!

&gt; &lt;snip&gt;
&gt;
&gt; The bad news is that availability is _not_ improved. One of the big reasons
&gt; for that is because the rate limit defenses, once engaged at the intro point,
&gt; will send back a NACK to the client. A vanilla tor client will stop using that
&gt; introduction point away for 120 seconds if it gets 3 NACKs from it. This leads
&gt; to tor quickly giving up on trying to connect and thus telling the client that
&gt; connection is impossible to the .onion.
&gt;
&gt; We've hacked a tor client to play along and stop ignoring the NACKs to see how
&gt; much time it would take to reach it. On average, a client would roughly need
&gt; around 70 seconds with more than 40 NACKs on average.
&gt;
&gt; However, it varied a _lot_ during our experiments with many outliers from 8
&gt; seconds with 1 NACK up to 160 seconds with 88 NACKs. (For this, the
&gt; SocksTimeout had to be bumped quite a bit).
&gt;

That makes sense.

So it seems like this change will change the UX of clients visiting
DoSed onion services to a sideways direction (not better/worse), right?
Clients will immediately see a "Cant connect" page on their browser
since the SOCKS conn will abort after after getting 3 NACKs. Is that the
case?

This change also impacts the performance impact of these legitimate
clients, since now they will immediately try all three introduction
points by extending the introduction circuit two times. This means that
legitimate clients will be slightly more damaging to the network, but
the DoS attacker will be much less damaging to the network, and since
the DoS attacker causes all the damage here this seems like a net
positive change.

&gt; There is an avenue of improvement here to make the intro point sends a
&gt; specific NACK reason (like "Under heavy load" or ...) which would make the
&gt; client consider it like "I should retry soon-ish" and thus making the client
&gt; possibly able to connect after many seconds (or until the SocksTimeout).
&gt;
&gt; Another bad news there! We can't do that anytime soon because of this bug that
&gt; basically crash clients if an unknown status code is sent back (that is a new
&gt; NACK value): https://trac.torproject.org/30454. So yeah... quite unfortunate
&gt; there but also a superb reason for everyone out there to upgrade :).
&gt;

Do we have any view on what's the ideal client behavior here? Is
"retrying soon-ish" actually something we want to do? Does it have
security implications?

&gt; &lt;snip&gt;
&gt;
&gt; Overall, this rate limit feature does two things:
&gt;
&gt; 1. Reduce the overall network load.
&gt;
&gt;    Soaking the introduction requests at the intro point helps avoid the
&gt;    service creating pointless rendezvous circuits which makes it "less" of an
&gt;    amplification attack.
&gt;

I think it would be really useful to get a baseline of how much we
"Reduce the overall network load" here, given that this is the reason we
are doing this.

That is, it would be great to get a graph with how many rendezvous
circuits and/or bandwidth attackers can induce to the network right now
by attacking a service, and what's the same number if we do this feature
with different parameters.

&gt; 2. Keep the service usable.
&gt;
&gt;    The tor daemon doesn't go in massive CPU load and thus can be actually used
&gt;    properly during the attack.
&gt;
&gt; The problem with (2) is the availability part where for a legit client to
&gt; reach the service, it is close to impossible for a vanilla tor without lots of
&gt; luck.  However, if let say the tor daemon would be configured with 2 .onion
&gt; where one is public and the other one is private with client authorization,
&gt; then the second .onion would be totally usable due to the tor daemon not being
&gt; CPU overloaded.
&gt;

That's more like a "Keep the service CPU usable, but not the service itself" ;)

&gt; &lt;snip&gt;
&gt;
&gt; At this point in time, we don't have a good grasp on what happens in terms of
&gt; CPU if the rate or the burst is bumped up or even how availability is
&gt; affected. During our experimentation, we did observed a "sort of" linear
&gt; progression between CPU usage and rate. But we barely touched the surface
&gt; since it was changed from 25 to 50 to 75 and that is it.
&gt;

I wonder how we can get a better grasp at this given that we are about
to deploy it on the real net. Perhaps some graphs with the effect of
these parameters on (1) and (2) above would be useful.

In particular, I think it would be smart and not a huge delay to wait
until Stockholm before we merge this so that we can discuss it in person
with more people and come up with exact parameters, client behaviors, etc.

Thanks again! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190705142548</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-07-05 14:25:48-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


On 04/07/2019 12:46, George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt;&gt; Overall, this rate limit feature does two things:
&gt;&gt;
&gt;&gt; 1. Reduce the overall network load.
&gt;&gt;
&gt;&gt;    Soaking the introduction requests at the intro point helps avoid the
&gt;&gt;    service creating pointless rendezvous circuits which makes it "less" of an
&gt;&gt;    amplification attack.
&gt;&gt;
&gt; 
&gt; I think it would be really useful to get a baseline of how much we
&gt; "Reduce the overall network load" here, given that this is the reason we
&gt; are doing this.
&gt; 
&gt; That is, it would be great to get a graph with how many rendezvous
&gt; circuits and/or bandwidth attackers can induce to the network right now
&gt; by attacking a service, and what's the same number if we do this feature
&gt; with different parameters.

If you're going to do this comparison, I wonder if it would be worth
including a third option in the comparison: dropping excess INTRODUCE2
cells at the service rather than NACKing them at the intro point.

In terms of network load, it seems like this would fall somewhere
between the status quo and the intro point rate-limiting mechanism:
excess INTRODUCE2 cells would be relayed from the intro point to the
service (thus higher network load than intro point rate-limiting), but
they wouldn't cause rendezvous circuits to be built (thus lower network
load than the status quo).

Unlike intro point rate-limiting, a backlog of INTRODUCE2 cells would
build up in the intro circuits if the attacker was sending cells faster
than the service could read and discard them, so I'd expect availability
to be affected for some time after the attack stopped, until the service
had drained the backlog.

Excess INTRODUCE2 cells would be dropped rather than NACKed, so
legitimate clients would see a rendezvous timeout rather than an intro
point failure; I'm not sure if that's good or bad.

On the other hand there would be a couple of advantages vs intro point
rate-limiting: services could deploy the mechanism immediately without
waiting for intro points to upgrade, and services could adjust their
rate-limiting parameters quickly in response to local conditions (e.g.
CPU load), without needing to define consensus parameters or a way for
services to send custom parameters to their intro points.

Previously I'd assumed these advantages would be outweighed by the
better network load reduction of intro point rate-limiting, but if
there's an opportunity to measure how much network load is actually
saved by each mechanism then maybe it's worth including this mechanism
in the evaluation to make sure that's true?

I may have missed parts of the discussion, so apologies if this has
already been discussed and ruled out.

Cheers,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190604052900</emailId><senderName>juga</senderName><senderEmail>juga@riseup.net</senderEmail><timestampReceived>2019-06-04 05:29:00-0400</timestampReceived><subject>Re: [tor-dev] Dealing with critical sbws tickets</subject><body>

teor:
&gt; Hi juga,
&gt; 
&gt; I read your meeting notes from this week's network team meeting:
&gt; 
&gt; juga(offline):
&gt;    Week of 05/20 (planned)
&gt;       - Add Tor version to the bandwidth file (#30196)
&gt;    Week of 05/20 (actual)
&gt;    Week of 06/03 (plan)
&gt;       - Continue with #30406: Refactor header constants in sbws to
&gt; use Stem's one
&gt; 
&gt; For the next few weeks, can you focus on fixing critical sbws bugs,
&gt; and helping with authority deployments?

Yes, i'll do my best with the little time i've to continue with sbws.
&gt; 
&gt; Here's what I think we could do:
&gt; 
&gt; I would like us to deploy sbws to 3/6 bandwidth authorities some time
&gt; in June. We can do this deployment as soon as another directory
&gt; authority operator is ready.

There's another authority operator ready. If you think we don't need to
fix any bug before a 3rd directory authority runs sbws, i can tell them
to start running sbws.
&gt; 
&gt; To deploy more than 3 sbws instances, we need to fix these critical sbws
&gt; bugs:
&gt; 
&gt; We need sbws to generate bandwidth lines for all relays with results,
&gt; even if they are not Running in the sbws tor client's current consensus.
&gt; https://trac.torproject.org/projects/tor/ticket/29710#comment:13
&gt; 
&gt; We need sbws to use MaxAdvertisedBandwidth from the latest descriptors:
&gt; https://trac.torproject.org/projects/tor/ticket/30733
&gt; 
&gt; We also need to look for any more critical bugs in sbws. Here are some
&gt; ways we can check for bugs:
&gt; 
&gt; We need to check if all sbws instances exclude some relays, to help us find
&gt; any more bugs in sbws:
&gt; https://trac.torproject.org/projects/tor/ticket/30735
&gt; 
&gt; 90% of sbws measurement attempts fail. But these are internal errors, not
&gt; network errors. So it looks like sbws has a relay selection bug:
&gt; https://trac.torproject.org/projects/tor/ticket/30719#comment:2
&gt; 
&gt; After we do these tasks, we can deploy sbws to 4 bandwidth authorities.
&gt; 
&gt; What do you think?
&gt; 
I'll look at all these bugs more in detail.
How many directory authorities would we like to be running sbws (after
those bugs are fixed) by which date?.

BTW, longclaw's sbws did not have network for ~1 days (which for sure
has affected to some metrics), i should have documented that somewhere,
not sure there's a better place for that than trac.

Thanks,
juga.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190603223829</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-03 22:38:29-0400</timestampReceived><subject>Re: [tor-dev] Raising AuthDirMaxServersPerAddr to 4?</subject><body>

Hi Mike,

&gt; On 4 Jun 2019, at 06:20, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; Mike Perry:
&gt; &gt; teor:
&gt; &gt; &gt; I have an alternative proposal:
&gt; &gt; &gt; 
&gt; &gt; &gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt; &gt; &gt; see if exit bandwidths improve.
&gt; &gt; &gt; 
&gt; &gt; &gt; We should measure the impact of this change using the tor-scaling
&gt; &gt; &gt; measurement criteria. (And we should make sure it doesn't conflict
&gt; &gt; &gt; with any other tor-scaling changes.)
&gt; &gt; 
&gt; &gt; I like this plan. To tightly control for emergent effects of all-sbws vs
&gt; &gt; all-torflow, ideally we'd switch back and forth between all-sbws and
&gt; &gt; all-torflow on a synchronized schedule, but this requires getting enough
&gt; &gt; measurement instances of sbws and torflow for authorities to choose
&gt; &gt; either the sbw file, or the torflow file, on some schedule. May be
&gt; &gt; tricky to coordinate, but it would be the most rigorous way to do this.
&gt; &gt; 
&gt; &gt; We could do a version of this based on votes/bwfiles alone, without
&gt; &gt; making dirauths toggle back and forth. However, this would not capture
&gt; &gt; emergent effects (such as quicker bwadjustments in sbws due to decisions
&gt; &gt; to pair relays with faster ones during measurement). Still, even
&gt; &gt; comparing just votes would be better than nothing.

I don't know how possible this is: we would need two independent network
connections per bandwidth scanner, one for sbws, and one for torflow.

(Running two scanners on the same connection means that they compete
for bandwidth. Perhaps we could use Tor's BandwidthRate to share the
bandwidth.)

I also don't know how many authority operators are able to run sbws:
Roger might be stuck on Python 2.

And I don't know how often they will be able to switch configs.

Let's make some detailed plans with the dirauth list.

&gt; &gt; For this experiment, my metric of choice would be "Per-Relay Spare
&gt; &gt; Network Capacity CDF" (see
&gt; &gt; https://trac.torproject.org/projects/tor/wiki/org/roadmaps/CoreTor/PerformanceExperiments#MetricsDefinitions),
&gt; &gt;  for both the overall consensus, and every authority's vote. It would
&gt; &gt; also be useful to generate separate flag breakdowns of this CDF (ie
&gt; &gt; produce separate CDFs for Guard-only, Middle-only, Exit-only, and
&gt; &gt; Guard+Exit-only relays).
&gt; &gt; 
&gt; &gt; In this way, we have graphs of how the votes and the consensus
&gt; &gt; distribution of the difference between self-reported and measured values
&gt; &gt; across the network. 
&gt; 
&gt; Arg, I misspoke here. The metric from that performance experiment page
&gt; is the difference between peak observed bandwidth and bw history. This
&gt; will still be interesting to measure load balancing effects, but it does
&gt; not directly involve the measured values.. We may also want a metric
&gt; that directly compares properties of the measured vs advertised values.
&gt; See below.
&gt; 
&gt; &gt; We should be able to pinpoint any major
&gt; &gt; disagreements in how relays are measured compared to their self-reported
&gt; &gt; values with these metrics. (In the past, karsten produced very similar
&gt; &gt; sets of CDFs of just the measured values per vote when we were updating
&gt; &gt; bwauths, and we compared the shape of the measured CDF, but I think
&gt; &gt; graphing the difference is more comprehensive).
&gt; &gt; 
&gt; &gt; We should also keep an eye on CDF-DL and the failure rainbow metrics, as
&gt; &gt; they may be indirectly affected by improvements/regressions in load
&gt; &gt; balancing, but I think the distribution of "spare capacity" is the first
&gt; &gt; order metric we want.

Yes, I agree: some idea of client bandwidth and latency is important.

&gt; &gt; Do you like these metrics? Do you think we should be using different
&gt; &gt; ones? Should we try a few different metrics and see what makes sense
&gt; &gt; based on the results?
&gt; As additional metrics, we could do the CDFs of the ratio of measured bw
&gt; to advertised bw, and/or the metrics Karsten produced using just
&gt; measured bw. (I can't still find the ticket where those were graphed
&gt; during previous torflow updates, though).
&gt; 
&gt; These metrics would be pretty unique to torflow/sbws experiments, but if
&gt; we have enough of those in the pipeline (such as changes to the scaling
&gt; factor), they may be worth tracking over time.

If we get funding for sbws experiments, we can definitely tweak the sbws
scaling parameters, and do some experiments.

At the moment, I'd like to focus on fixing critical sbws issues, deploying
sbws, and making sure it works at least as well as torflow.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190604033500</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-04 03:35:00-0400</timestampReceived><subject>Re: [tor-dev] Metrics for evaluating sbws vs torflow? (was: Raising AuthDirMaxServersPerAddr to 4)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 4 Jun 2019, at 12:54, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt; 
&gt; teor:
&gt;&gt; 
&gt;&gt; 
&gt;&gt;&gt; On 4 Jun 2019, at 06:20, Mike Perry &lt;mikeperry@torproject.org&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; Mike Perry:
&gt;&gt;&gt;&gt; teor:
&gt;&gt;&gt;&gt;&gt; I have an alternative proposal:
&gt;&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt;&gt; Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, and
&gt;&gt;&gt;&gt;&gt; see if exit bandwidths improve.
&gt; 
&gt; Yes, that makes sense. A minimal version of this could be: don't do the
&gt; swapping back and forth, just add sbws and replace torflow scanners one
&gt; by one. As we do this, we could just keep a record of the metrics over
&gt; the votes and consensus during this time, and compare how the metrics
&gt; look for the sbws vs torflow votes vs the consensus, over time.
&gt; 
&gt; What were you thinking for the timeframe for the complete transition to
&gt; sbws?

longclaw has been running sbws for a while.
bastet started running it mid-May.
We can transition a third directory authority any time we like.

We need to keep 3 torflow instances until we fix these 4 critical sbws bugs:
https://lists.torproject.org/pipermail/tor-dev/2019-June/013867.html

After those bugs are fixed, we could transition one per month.

moria1 will need to install python 3 to run sbws, I don't know how long that will take.

Maybe September to December 2019?

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Hi,&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;On 4 Jun 2019, at 12:54, Mike Perry &lt;&lt;a \
href="mailto:mikeperry@torproject.org"&gt;mikeperry@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;teor:&lt;/span&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;On 4 Jun 2019, at 06:20, Mike Perry &lt;&lt;a \
href="mailto:mikeperry@torproject.org"&gt;mikeperry@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Mike \
Perry:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;teor:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;I have an alternative \
proposal:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Let's deploy sbws to half the bandwidth authorities, wait 2 weeks, \
and&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;see if exit bandwidths \
improve.&lt;/span&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;span&gt;Yes, \
that makes sense. A minimal version of this could be: don't do \
the&lt;/span&gt;&lt;br&gt;&lt;span&gt;swapping back and forth, just add sbws and replace torflow \
scanners one&lt;/span&gt;&lt;br&gt;&lt;span&gt;by one. As we do this, we could just keep a record of \
the metrics over&lt;/span&gt;&lt;br&gt;&lt;span&gt;the votes and consensus during this time, and \
compare how the metrics&lt;/span&gt;&lt;br&gt;&lt;span&gt;look for the sbws vs torflow votes vs the \
consensus, over time.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;What were you thinking for the timeframe \
for the complete transition \
to&lt;/span&gt;&lt;br&gt;&lt;span&gt;sbws?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;longclaw has been \
running sbws for a while.&lt;/div&gt;&lt;div&gt;bastet started running it mid-May.&lt;/div&gt;&lt;div&gt;We \
can transition a third directory authority any time we \
like.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We need to keep 3 torflow instances until we fix these \
4 critical sbws bugs:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2019-June/013867.html"&gt;https://li \
sts.torproject.org/pipermail/tor-dev/2019-June/013867.html&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;After \
those bugs are fixed, we could transition one per \
month.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;moria1 will need to install python 3 to run sbws, I \
don't know how long that will take.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Maybe September to \
December 2019?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190605073152</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-05 07:31:52-0400</timestampReceived><subject>Re: [tor-dev] Dealing with critical sbws tickets</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 4 Jun 2019, at 15:29, juga &lt;juga@riseup.net&gt; wrote:
&gt; 
&gt; teor:
&gt;&gt; Hi juga,
&gt;&gt; 
&gt;&gt; I read your meeting notes from this week's network team meeting:
&gt;&gt; 
&gt;&gt; juga(offline):
&gt;&gt;   Week of 05/20 (planned)
&gt;&gt;      - Add Tor version to the bandwidth file (#30196)
&gt;&gt;   Week of 05/20 (actual)
&gt;&gt;   Week of 06/03 (plan)
&gt;&gt;      - Continue with #30406: Refactor header constants in sbws to
&gt;&gt; use Stem's one
&gt;&gt; 
&gt;&gt; For the next few weeks, can you focus on fixing critical sbws bugs,
&gt;&gt; and helping with authority deployments?
&gt; 
&gt; Yes, i'll do my best with the little time i've to continue with sbws.

Thanks!

Please let us know if you need help.

Until we get more sbws funding, we won't have much time to spend
on sbws features (like extra diagnostic information). But we can
spend a bit of time fixing critical sbws bugs.

&gt;&gt; Here's what I think we could do:
&gt;&gt; 
&gt;&gt; I would like us to deploy sbws to 3/6 bandwidth authorities some time
&gt;&gt; in June. We can do this deployment as soon as another directory
&gt;&gt; authority operator is ready.
&gt; 
&gt; There's another authority operator ready. If you think we don't need to
&gt; fix any bug before a 3rd directory authority runs sbws, i can tell them
&gt; to start running sbws.

Yes please!

&gt;&gt; 
&gt;&gt; To deploy more than 3 sbws instances, we need to fix these critical sbws
&gt;&gt; bugs:
&gt;&gt; 
&gt;&gt; We need sbws to generate bandwidth lines for all relays with results,
&gt;&gt; even if they are not Running in the sbws tor client's current consensus.
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29710#comment:13
&gt;&gt; 
&gt;&gt; We need sbws to use MaxAdvertisedBandwidth from the latest descriptors:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/30733
&gt;&gt; 
&gt;&gt; We also need to look for any more critical bugs in sbws. Here are some
&gt;&gt; ways we can check for bugs:
&gt;&gt; 
&gt;&gt; We need to check if all sbws instances exclude some relays, to help us find
&gt;&gt; any more bugs in sbws:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/30735
&gt;&gt; 
&gt;&gt; 90% of sbws measurement attempts fail. But these are internal errors, not
&gt;&gt; network errors. So it looks like sbws has a relay selection bug:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/30719#comment:2
&gt;&gt; 
&gt;&gt; After we do these tasks, we can deploy sbws to 4 bandwidth authorities.
&gt;&gt; 
&gt;&gt; What do you think?
&gt;&gt; 
&gt; I'll look at all these bugs more in detail.
&gt; How many directory authorities would we like to be running sbws (after
&gt; those bugs are fixed) by which date?.

I think switching one per month is a good idea:

https://lists.torproject.org/pipermail/tor-dev/2019-June/013869.html

&gt; BTW, longclaw's sbws did not have network for ~1 days (which for sure
&gt; has affected to some metrics), i should have documented that somewhere,
&gt; not sure there's a better place for that than trac.

I'm not really sure. Sending a quick email to tor-dev might be a good idea.

T
[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;Hi,&lt;br&gt;&lt;div dir="ltr"&gt;&lt;br&gt;On 4 Jun 2019, at \
15:29, juga &lt;&lt;a href="mailto:juga@riseup.net"&gt;juga@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;teor:&lt;/span&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;Hi \
juga,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I read your \
meeting notes from this week's network team \
meeting:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;juga(offline):&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;   Week of 05/20 \
(planned)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
     - Add Tor version to the bandwidth file \
(#30196)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;   Week of \
05/20 (actual)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;   Week \
of 06/03 (plan)&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt; \
     - Continue with #30406: Refactor header constants in \
sbws to&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;use Stem's \
one&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;For the next \
few weeks, can you focus on fixing critical sbws \
bugs,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;and helping with authority \
deployments?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Yes, i'll do my best with \
the little time i've to continue with \
sbws.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please \
let us know if you need help.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Until we get more sbws \
funding, we won't have much time to spend&lt;/div&gt;&lt;div&gt;on sbws features (like extra \
diagnostic information). But we can&lt;/div&gt;&lt;div&gt;spend a bit of time fixing critical \
sbws bugs.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;Here's what I think we could do:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;I would like \
us to deploy sbws to 3/6 bandwidth authorities some \
time&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;in June. We can do this \
deployment as soon as another directory&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;authority operator is \
ready.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;There's another authority \
operator ready. If you think we don't need to&lt;/span&gt;&lt;br&gt;&lt;span&gt;fix any bug before a \
3rd directory authority runs sbws, i can tell them&lt;/span&gt;&lt;br&gt;&lt;span&gt;to start running \
sbws.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Yes \
please!&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;To deploy \
more than 3 sbws instances, we need to fix these critical \
sbws&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;bugs:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We need sbws \
to generate bandwidth lines for all relays with \
results,&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;even if they are not \
Running in the sbws tor client's current \
consensus.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/29710#comment:13"&gt;https://trac.t \
orproject.org/projects/tor/ticket/29710#comment:13&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We need sbws \
to use MaxAdvertisedBandwidth from the latest \
descriptors:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30733"&gt;https://trac.torproject.org/projects/tor/ticket/30733&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We also need \
to look for any more critical bugs in sbws. Here are \
some&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;ways we can check for \
bugs:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;We need to \
check if all sbws instances exclude some relays, to help us \
find&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;any more bugs in \
sbws:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30735"&gt;https://trac.torproject.org/projects/tor/ticket/30735&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;90% of sbws \
measurement attempts fail. But these are internal errors, \
not&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;network errors. So it looks \
like sbws has a relay selection bug:&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/30719#comment:2"&gt;https://trac.to \
rproject.org/projects/tor/ticket/30719#comment:2&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;After we do \
these tasks, we can deploy sbws to 4 bandwidth \
authorities.&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;span&gt;What do you \
think?&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;span&gt;I'll look at all these bugs more in \
detail.&lt;/span&gt;&lt;br&gt;&lt;span&gt;How many directory authorities would we like to be running \
sbws (after&lt;/span&gt;&lt;br&gt;&lt;span&gt;those bugs are fixed) by which \
date?.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think switching one per \
month is a good idea:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2019-June/013869.html"&gt;https://li \
sts.torproject.org/pipermail/tor-dev/2019-June/013869.html&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;BTW, longclaw's sbws did not have network for ~1 \
days (which for sure&lt;/span&gt;&lt;br&gt;&lt;span&gt;has affected to some metrics), i should have \
documented that somewhere,&lt;/span&gt;&lt;br&gt;&lt;span&gt;not sure there's a better place for that \
than trac.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;I'm not really sure. Sending a quick \
email to tor-dev might be a good idea.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190606112714</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-06-06 11:27:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal 304: Extending SOCKS5 Onion Service Error Codes</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; Filename: 304-socks5-extending-hs-error-codes.txt
&gt; Title: Extending SOCKS5 Onion Service Error Codes
&gt; Author: David Goulet, George Kadianakis
&gt; Created: 22-May-2019
&gt; Status: Open
&gt;

Merged to torspec as proposal 304! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190607131223</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-06-07 13:12:23-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/signed)]


On 06 Jun (20:03:52), George Kadianakis wrote:
&gt; David Goulet &lt;dgoulet@torproject.org&gt; writes:
&gt; 
&gt; &gt; Greetings!
&gt; &gt;
&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; 
&gt; Hello, I'm here to brainstorm about this suggested feature. I don't have
&gt; a precise plan forward here, so I'm just talking.
&gt; 
&gt; &gt; Unfortunately, our circuit-level flow control does not apply to the
&gt; &gt; service introduction circuit which means that the intro point is
&gt; &gt; allowed, by the Tor protocol, to send an arbitrary large amount of cells
&gt; &gt; down the circuit.  This means for the service that even after the DoS
&gt; &gt; has stopped, it would still receive massive amounts of cells because
&gt; &gt; some are either inflight on the circuit or queued at the intro point
&gt; &gt; ready to be sent (towards the service).
&gt; &gt; 
&gt; 
&gt; == SENDME VS Token bucket
&gt; 
&gt; So it seems like we are going with a token bucket approach (#15516) to
&gt; rate-limit introduce cells, even tho the rest of the Tor protocol is
&gt; using SENDME cells. Are we reinventing the wheel here?

I see these as two different approaches.

Relying on the flow control protocol here is nice in practice because the
intro point would not relay anything until the service asks for more data. But
this can often be influenced by the circuit latency. It could be that the
service could handle 10 times what it received but because the SENDME takes 2
second to reach the intro point, then we loose precious "work time".

I think if we rely on the flow control, it will severely impact very popular
hidden service that have a nice OnionBalance setup and all. I have no numbers
to back that up but that is my intuition.

The token bucket approach is more flexible _especially_ with the idea of
having ESTABLISH_INTRO cell having parameters for the token bucket knobs.

&gt; 
&gt; &gt; &gt; That being all said, our short-term goal here is to add INTRODUCE2
&gt; &gt; rate-limiting (similar to the Guard DoS subsystem deployed early last year)
&gt; &gt; *at* the intro point but much simpler. The goal is to soak up the introduction
&gt; &gt; load directly at the intro points which would help reduce the load on the
&gt; &gt; network overall and thus preserve its health.
&gt; &gt;
&gt; 
&gt; == We need to understand the effects of this feature: 
&gt; 
&gt; First of all, the main thing to note here is that this is a feature that
&gt; primarily intends to improve network health against DoS adversaries. It
&gt; achieves this by greatly reducing the amount of useless rendezvous
&gt; circuits opened by the victim service, which then improves the health of
&gt; guard nodes (when guard nodes breaks, circuit start retrying endlessly,
&gt; and hell begins).
&gt; 
&gt; We don't know how this feature will impact the availability of an
&gt; attacked service. Right now, my hypothesis is that even with this
&gt; feature enabled, an attacked service will remain unusable. That's
&gt; because an attacker who spams INTRO1 cells will always saturate the
&gt; intro point and innocent clients with a browser will be very unlikely to
&gt; get service (kinda like sitting under a waterfall and trying to fill a
&gt; glass with your spit). That said, with this defense, the service won't
&gt; be 100% CPU, so perhaps innocent clients who manage to sneak in will get
&gt; service, whereas now they don't anyhow.
&gt; 
&gt; IMO, it's very important to understand exactly how this feature will
&gt; impact the availability of the service: If this feature does not help
&gt; the availability of the service, then victim operators will be
&gt; incentivized to disable the feature (or crank up the limits) which means
&gt; that we will not improve the health of the network, which is our primary
&gt; goal here.

This is an experiment we can easily run. Saturate a service intro points (that
we control) and run in a loop a client trying to reconnect. See the success
rate. I'm also expecting very very very low reachability but who knows, we
could be surprised but at least we'll have data points.

&gt; 
&gt; ---
&gt; 
&gt; == Why are we doing all this?
&gt; 
&gt; Another thing I wanted to mention here is the second order effect we are
&gt; facing. The only reason we are doing all this is because attackers are
&gt; incentived into attacking onion services. Perhaps the best thing we
&gt; could do here is to create tools to make denial of service attacks less
&gt; effective against onion services, which would make attackers stop
&gt; performing them, and hence we won't need to implement rate-limits to
&gt; protect the network in case they do. Right now the best things we have
&gt; towards that direction is the incomplete-but-plausible design of [0] and
&gt; the inelegant 1b from [1].
&gt; 
&gt; This is especially true since to get this rate-limiting feature deployed
&gt; to the whole network we need all relays (intro points) to upgrade to the
&gt; new version so we are looking at years in the future anyway.
&gt; 
&gt; [0]: https://lists.torproject.org/pipermail/tor-dev/2019-May/013849.html
&gt;      https://lists.torproject.org/pipermail/tor-dev/2019-June/013862.html
&gt; [1]: https://lists.torproject.org/pipermail/tor-dev/2019-April/013790.html

My two cents here are that all those features could complement each other over
time. Having a proof-of-work + rate limit can work well together.

But at this juncture in time, what I want most to be fixed is the fact that
service are used for an amplification attack. This was disastrous during the
2018 DDoS, saturating Guard nodes constantly. We fixed this by adding DoS
defenses at the Guard level which stopped the client madness, but not the
service side of things.

Soaking the huge loads on the intro point is a good easy avenue for us to
pursue and have very direct impact on the health of the network. And it is
always something we can disable with a consensus parameterse if shit hit the
fan with it.

&gt; 
&gt; &gt;
&gt; &gt; One naive approach is to see how much cells an attack can send towards a
&gt; &gt; service. George and I have conducted experiment where with 10 *modified* tor
&gt; &gt; clients bombarding a service at a much faster rate than 1 per-second (what
&gt; &gt; vanilla tor does if asked to connect a lot), we see in 1 minute ~15000
&gt; &gt; INTRODUCE2 cells at the service. This varies in the thousands depending on
&gt; &gt; different factors but overall that is a good average of our experiment.
&gt; &gt;
&gt; &gt; This means that 15000/60 = 250 cells per second.
&gt; &gt;
&gt; &gt; Considering that this is an absurd amount of INTRODUCE2 cells (maybe?), we can
&gt; &gt; put a rate per second of let say a fifth meaning 50 and a burst of 200.
&gt; &gt;
&gt; &gt; Over the normal 3 intro points a service has, it means 150 introduction
&gt; &gt; per-second are allowed with a burst of 600 in total. Or in other words, 150
&gt; &gt; clients can reach the service every second up to a burst of 600 at once. This
&gt; &gt; probably will ring alarms bell for very popular services that probably gets
&gt; &gt; 1000+ users a second so please check next section.
&gt; &gt;
&gt; &gt; I'm not that excited about hardcoded network wide values so this is why the
&gt; &gt; next section is more exciting but much more work for us!
&gt; &gt;
&gt; 
&gt; Yes, I'm also very afraid of imposing network wide values here. What
&gt; happens to hypothetical onion services that outperform the hard limits
&gt; we impose here, even when they are not DoSed? The limits above are
&gt; extremely low when we are looking at normal busy websites on the
&gt; clearnet, so by activating them we are basically putting hard limits to
&gt; the adoption of onion services.
&gt; 
&gt; Perhaps that's something we want to do anyway, because not knowing how
&gt; many clients an onion service can support is also not ideal, but we
&gt; should really think twice (and then again twice) before doing it and
&gt; also talk to some people who manage busy sites in the onionspace and
&gt; outside of it.

They need to be at least consensus parameters so the entire network can adapt
if the default values ends up being very bad or worst, inneffective.

Second thing is that I'm thinking more and more that this feature is not
complete/useful without a way for the service operator to have control over
those knobs. Fortunately, we have #30790 in the pipe for this.

&gt; 
&gt; == What about false positives?
&gt; 
&gt; Also given that the rate limiting happens on the intro point layer here,
&gt; how does a service learn that it's getting DoSed? Are we looking at a
&gt; special IP-&gt;HS cell that says "we are throttling your clients"? How much
&gt; to overengineer here?

For now, it would be unnoticed by the operator for which I'm not that worried
about. Likely scenario here is that users starts complaining to the service
operator that they can't reach it.

&gt; 
&gt; == What's the ideal client behavior when the limit gets hit?
&gt; 
&gt; So given that these hard limits can be hit quite easily by an attacker,
&gt; what is the client behavior when they get hit? Will normal clients keep
&gt; on retrying intro points until they get service, and continuously
&gt; extending their circuits? This behavior is particularly important for
&gt; the availability of the service under this feature.

The code right now, in #15516, will send a NACK. The reason for this is
because we want legit client to re-extend and not create a new intro circuit.
More efficient and less pressure on the network.

After getting NACKed by all introduction points, the client will stop
retyring. It will be allowed to retry when the "failure cache" cleans up which
is right now 5 minutes time out. Or if new intro point are found in a new
descriptor.

I'm in favor of the re-extend option here which is the normal behavior client
will encounter in normal circumstances. And also the one that creates less
pressure.

Cheers!
David

-- 
1mNwEGRBGwA+KV0QAcUNjXeckIqFcZmhiwewCdRWKac=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190617091500</emailId><senderName>Sofia Celi</senderName><senderEmail>sofia@autonomia.digital</senderEmail><timestampReceived>2019-06-17 09:15:00-0400</timestampReceived><subject>Re: [tor-dev] OTRv4 summit at PETS2019</subject><body>

[Attachment #2 (multipart/signed)]


Hi, Pili,

&gt; If it's ok with you I can forward this to the tor-meeting mailing list for people \
&gt; attending the Tor Meeting in Stockholm as this may be of interest to them also. \
&gt; Unfortunately I will be leaving on the 15th and will be unable to attend.

Yes! Thank you very much! &lt;3

Thanks!

--
Sofía Celi
@claucece
Cryptographic research and implementation at CAD: https://autonomia.digital/
EF74 1A5F 5692 E56F 14F6  243C 3992 6144 F89D 996F


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190617091607</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-06-17 09:16:07-0400</timestampReceived><subject>Re: [tor-dev] Cryptocurrency: Total Energy Analysis - Crypto Uses Less Than Fiat</subject><body>


I was an early proponent of crypto currencies, but now it is clear to me
that they do more harm than good by a long shot.

And this is really off topic for this list.

.hc

grarpamp:
&gt; (from tor-dev: PoW DoS defenses Prop 305: INTRO Cell)
&gt; 
&gt; On 6/16/19, Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt; wrote:
&gt; &gt; Given the significant environmental impact of POW in other distributed
&gt; &gt; systems (blockchain), we should not implement schemes that solve a
&gt; &gt; problem for Tor but create problems for people elsewhere (potentially
&gt; &gt; irreversible environmental damage).
&gt; &gt; 
&gt; &gt; https://www.theguardian.com/technology/2018/nov/05/energy-cost-of-mining-bitcoin-more-than-twice-that-of-copper-or-gold
&gt; &gt; 
&gt; 
&gt; One must first understand and enumerate the *entirety of all global energy
&gt; inputs* going into and making up the legacy fiat currency banking systems,
&gt; from both Government and Corporate sectors, and its results, before
&gt; attempting to make any claims that cryptocurrency is "worse" [1].
&gt; Such cataloging and analysis requires more work, more data, more actual
&gt; redpill thought, than just simple hashrate/J/$... so of course people take
&gt; shortcuts in such articles, as do other people in their pronouncements
&gt; stemming from them.
&gt; 
&gt; &gt; Other less-destructive schemes exist to prevent DoS attacks. POW is a
&gt; &gt; method, not a goal in itself. Taking a step back and examining the full
&gt; &gt; spectrum of available tools would be better.
&gt; 
&gt; The needs and model for overlay nets, ie tor, will of course be
&gt; different than those above.
&gt; And always interesting where tech various ends up being applied.
&gt; 
&gt; [1] Hint: Cryptocurrency actually consumes less, and further finally forces
&gt; inefficiency and other undesired things out of Fiat by displacing it...
&gt; hopefully faster than it can adapt. Some say that has a value, one that
&gt; many will be quite happy to sink a bit of premium into if need be.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190617213503</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-06-17 21:35:03-0400</timestampReceived><subject>[tor-dev] User Data Exchange with Network Automata (re: Prop 305, ex energy)</subject><body>

&gt; And this is really off topic for this list.

General Tor energy bits moved here...
https://lists.torproject.org/pipermail/tor-talk/2019-June/045256.html


re 305 etc

It wouldn't be unusual for an app to pop up some form
of captcha, challenge, or data exchange where needed.
Some of that model exists in form of onion service authentication
config... some helper data that grants access, makes things happen,
whether passive or active interrupt. The controller would be the interface.
Yet tor currently has no mechanism on platforms to handle such
protocols and popups... thus like onion auth, the user has know
they need it for something and configure it in advance.

Try investigating an ssh-agent like tor tool... preloaded
with users Proof-of-*, 2FA, consumables, etc to dole out,
even automatically, where needed and permitted.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190619173718</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-06-19 17:37:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal 305: ESTABLISH_INTRO Cell DoS Defense Extension</subject><body>

[Attachment #2 (multipart/signed)]


On 12 Jun (08:18:33), David Goulet wrote:

After some days on tor-dev@ and a round of review, this is now a Draft in
tor-spec.txt.

https://gitweb.torproject.org/torspec.git/tree/proposals/305-establish-intro-dos-defense-extention.txt

Cheers!
David

&gt; Filename: 305-establish-intro-dos-defense-extention.txt
&gt; Title: ESTABLISH_INTRO Cell DoS Defense Extension
&gt; Author: David Goulet, George Kadianakis
&gt; Created: 06-June-2019
&gt; Status: Draft
&gt; 
&gt; 0. Abstract
&gt; 
&gt;    We propose introducing a new cell extension to the onion service version 3
&gt;    ESTABLISH_INTRO cell in order for a service operator to send directices to
&gt;    the introduction point.
&gt; 
&gt; 1. Introduction
&gt; 
&gt;    The idea behind this proposal is to provide a way for a service operator to
&gt;    give to the introduction points Denial of Service (DoS) defense parameters
&gt;    through the ESTABLISH_INTRO cell.
&gt; 
&gt;    We are currently developing onion service DoS defenses at the introduction
&gt;    point layer which for now has consensus parameter values for the defenses'
&gt;    knobs. This proposal would allow the service operator more flexibility for
&gt;    tuning these knobs and/or future parameters.
&gt; 
&gt; 2. Proposal
&gt; 
&gt;    We introduce a new extention to the ESTABLISH_INTRO cell. The EXTENSIONS
&gt;    field will be leveraged and a new protover will be introduced to reflect
&gt;    that change.
&gt; 
&gt;    As a reminder, this is the content of an ESTABLISH_INTRO cell (taken from
&gt;    rend-spec-v3.txt section 3.1.1):
&gt; 
&gt;      AUTH_KEY_TYPE         [1 byte]
&gt;      AUTH_KEY_LEN          [2 bytes]
&gt;      AUTH_KEY              [AUTH_KEY_LEN bytes]
&gt;      N_EXTENSIONS          [1 byte]
&gt;      N_EXTENSIONS times:
&gt;         EXT_FIELD_TYPE     [1 byte]
&gt;         EXT_FIELD_LEN      [1 byte]
&gt;         EXT_FIELD          [EXT_FIELD_LEN bytes]
&gt;      HANDSHAKE_AUTH        [MAC_LEN bytes]
&gt;      SIG_LEN               [2 bytes]
&gt;      SIG                   [SIG_LEN bytes]
&gt; 
&gt;    We propose a new EXT_FIELD_TYPE value:
&gt; 
&gt;       [01] -- DOS_PARAMETERS.
&gt; 
&gt;               If this flag is set, the extension should be used by the
&gt;               introduction point to learn what values the denial of service
&gt;               subsystem should be using.
&gt; 
&gt;    The EXT_FIELD content format is:
&gt; 
&gt;       N_PARAMS    [1 byte]
&gt;       N_PARAMS times:
&gt;          PARAM_TYPE  [1 byte]
&gt;          PARAM_VALUE [8 byte]
&gt; 
&gt;    The PARAM_TYPE proposed values are:
&gt; 
&gt;       [01] -- DOS_INTRODUCE2_RATE_PER_SEC
&gt;               The rate per second of INTRODUCE2 cell relayed to the service.
&gt; 
&gt;       [02] -- DOS_INTRODUCE2_BURST_PER_SEC
&gt;               The burst per second of INTRODUCE2 cell relayed to the service.
&gt; 
&gt;    The PARAM_VALUE size is 8 bytes in order to accomodate 64bit values
&gt;    (uint64_t). It MUST match the specified limit for the following PARAM_TYPE:
&gt; 
&gt;       [01] -- Min: 0, Max: INT_MAX
&gt;       [02] -- Min: 0, Max: INT_MAX
&gt; 
&gt;    A value of 0 means the defense is disabled which has precedence over the
&gt;    network wide consensus parameter.
&gt; 
&gt;    In this case, if the rate per second is set to 0 (param 0x01) then the
&gt;    burst value should be ignored. And vice-versa, if the burst value is 0,
&gt;    then the rate value should be ignored. In other words, setting one single
&gt;    parameter to 0 disables the INTRODUCE2 rate limiting defense.
&gt; 
&gt; 3. Protocol Version
&gt; 
&gt;    We introduce a new protocol version in order for onion service that wants
&gt;    to specifically select introduction points supporting this new extension.
&gt;    But also, it should be used to know when to send this extension or not.
&gt; 
&gt;    The new version for the "HSIntro" protocol is:
&gt; 
&gt;       "5" -- support ESTABLISH_INTRO cell DoS parameters extension for onion
&gt;              service version 3 only.
&gt; 
&gt; 4. Configuration Options
&gt; 
&gt;    We also propose new torrc options in order for the operator to control
&gt;    those values passed through the ESTABLISH_INTRO cell.
&gt; 
&gt;       "HiddenServiceEnableIntroDoSDefense 0|1"
&gt; 
&gt;          If this option is set to 1, the onion service will always send to the
&gt;          introduction point denial of service defense parameters regardless of
&gt;          what the consensus enables it or not. The value will be taken from
&gt;          the consensus and if not present, the default values will be used.
&gt;          (Default: 0)
&gt; 
&gt;       "HiddenServiceEnableIntroDoSRatePerSec N sec"
&gt; 
&gt;          Controls the introduce rate per second the introduction point should
&gt;          impose on the introduction circuit.
&gt;          (Default: 25, Min: 0, Max: 4294967295)
&gt; 
&gt;       "HiddenServiceEnableIntroDoSBurstPerSec N sec"
&gt; 
&gt;          Controls the introduce burst per second the introduction point should
&gt;          impose on the introduction circuit.
&gt;          (Default: 200, Min: 0, Max: 4294967295)
&gt; 
&gt;    They respectively control the parameter type 0x01 and 0x02 in the
&gt;    ESTABLISH_INTRO cell detailed in section 2.
&gt; 
&gt;    The default values of the rate and burst are taken from ongoing anti-DoS
&gt;    implementation work [1][2]. They aren't meant to be defined with this
&gt;    proposal.
&gt; 
&gt; 5. Security Considerations
&gt; 
&gt;    Using this new extension leaks to the introduction point the service's tor
&gt;    version. This could in theory help any kind of de-anonymization attack on a
&gt;    service since at first it partitions it in a very small group of running
&gt;    tor.
&gt; 
&gt;    Furthermore, when the first tor version supporting this extension will be
&gt;    released, very few introduction points will be updated to that version.
&gt;    Which means that we could end up in a situation where many services want to
&gt;    use this feature and thus will only select a very small subset of relays
&gt;    supporting it overloading them but also making it an easier vector for an
&gt;    attacker that whishes to be the service introduction point.
&gt; 
&gt;    For the above reasons, we propose a new consensus parameters that will
&gt;    provide a "go ahead" for all service out there to start using this
&gt;    extension only if the introduction point supports it.
&gt; 
&gt;       "enable_establish_intro_dos_extension"
&gt; 
&gt;          If set to 1, this makes tor start using this new proposed extension
&gt;          if available by the introduction point (looking at the new protover).
&gt; 
&gt;    This parameter should be switched on when a majority of relays have
&gt;    upgraded to a tor version that supports this extension for which we believe
&gt;    will also give enough time for most services to move to this new stable
&gt;    version making the anonymity set much bigger.
&gt; 
&gt;    We propose to add a torrc option to ignore this parameter and force tor to
&gt;    select introduction points supporting this extension which will
&gt;    effectively, in the beginning, toss away these security considerations.
&gt; 
&gt;    We believe that there are services that do not care about anonymity on the
&gt;    service side and thus could benefit from this feature right away if they
&gt;    wish to use it.
&gt; 
&gt; References:
&gt; 
&gt; [1] https://lists.torproject.org/pipermail/tor-dev/2019-May/013837.html
&gt; [2] https://trac.torproject.org/15516




&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


-- 
7gvISGYHFNIK7QwNC3ESEsvXh8l/OzdFYlwyc0G7WWQ=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190620165357</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-06-20 16:53:57-0400</timestampReceived><subject>Re: [tor-dev] Shortcomings of the pluggable transports specification?</subject><body>

On Wed, Jun 12, 2019 at 04:41:34PM -0700, Philipp Winter wrote:
&gt; We are working on improving Tor's pluggable transports specification:
&gt; &lt;https://spec.torproject.org/pt-spec&gt;
&gt; 
&gt; The goal is to make the spec useful to more people and fix issues that
&gt; have accumulated over the years.  For more context, have a look at the
&gt; following ticket, which we use to coordinate this effort:
&gt; &lt;https://bugs.torproject.org/29285&gt;
&gt; 
&gt; Before changing the spec, we need to understand its shortcomings and
&gt; what issues implementers have run into.  For those of you who have
&gt; experience with the spec -- either Tor's version 1.0 or version 2.1
&gt; maintained by pluggabletransports.info -- please let us know:
&gt; 
&gt; * What version of the PT specification and what library implementation
&gt;   (if any) are you using?
&gt; 
&gt; * What has your experience been with the PT specification?
&gt; 
&gt; * How would you improve the specification?

There are a couple of threads from 2017 relating to the development of
the 2.0 spec, which have some detailed comments.

Pluggable Transports 2.0 Specification, Draft 2
https://groups.google.com/d/topic/traffic-obf/sfDgcZk8s3s/discussion

Pluggable Transports 2.0 Specification, Draft 3
https://groups.google.com/d/topic/traffic-obf/bUo-OKnXSEI/discussion
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190620182846</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-06-20 18:28:46-0400</timestampReceived><subject>Re: [tor-dev] Proposal for PoW DoS defenses during introduction (was Re: Proposal 305: ESTABLISH_INT</subject><body>

Why do we need to send a challenge to a client on every request?

No, it is only the first time when connecting an onion and moreover this 
should be enabled only when the configured rate limit / antiDoS is 
reached. SO actually a client will be connecting to the onion like 
always: with no PoW. If the Intro Point reaches a configured limit, 
then, it starts challenging the client, only the first time, the first 
request to that onion.

Someone said that my design of adding an extra round to make the PoW 
step was bad, yes, we could use something unique to that circuit based 
on ntor.

BUT, what is better for performance? Is sending an extra cell better 
than computing PoW always? etc.

-If you add an extra step for PoW: you can enable it only when needed: 
1) no DoS? client connects like always and do not make a PoW. 2) DoS? 
client receives a challenge and computes a PoW.

-If you do not add an extra step there is no dynamic way to enable or 
disable PoW. You bypass the extra step but the client needs to compute 
PoW every time. The only config aviable is service descriptor where 
onion can put the "enable pow" and client reads it and sends the PoW to I.P.

mmmm unless you wanna build something more complex...

On 20/6/19 15:41, Chelsea Holland Komlo wrote:
&gt; On 2019-06-20 00:19, Watson Ladd wrote:
&gt;&gt; On Tue, Jun 18, 2019 at 6:29 PM Chelsea Holland Komlo
&gt;&gt; &lt;me@chelseakomlo.com&gt; wrote:
&gt;&gt;&gt; There are a couple approaches to consider.
&gt;&gt;&gt;
&gt;&gt;&gt; POW via hashing goes for a relatively simple to implement approach.
&gt;&gt;&gt; However, this incurs a high cost for all clients, and also environmental
&gt;&gt;&gt; damage, per previous email.
&gt;&gt;&gt;
&gt;&gt;&gt; Another approach similar to the above (but more environmentally
&gt;&gt;&gt; friendly) can be Proof of Storage (or proof of space), as in
&gt;&gt;&gt; https://eprint.iacr.org/2013/796.pdf
&gt;&gt;&gt;
&gt;&gt;&gt; With both of the above approaches, there will be a tradeoff to what the
&gt;&gt;&gt; cost is to deter a would-be attacker, versus the cost to real but
&gt;&gt;&gt; bandwidth/cpu limited clients, such as on mobile platforms.
&gt;&gt;&gt;
&gt;&gt;&gt; More involved approaches include anonymous blacklists/whitelists,
&gt;&gt;&gt; blinded tokens, etc. Previous work has been done in this space, here is
&gt;&gt;&gt; one example:
&gt;&gt;&gt; https://crysp.uwaterloo.ca/courses/pet/F11/cache/www-users.cs.umn.edu/~hopper/faust-wpes.pdf
&gt;&gt; Privacy Pass has already been integrated into Tor Browser. Perhaps
&gt;&gt; work could be done to use it here?
&gt; An approach akin to Privacy Pass could be an option to avoid serving
&gt; challenges to clients with each request (see reference to anonymous
&gt; tokens above), but it cannot be a drop in fix, of course. Furthermore,
&gt; an acceptable POW or POS scheme still needs to be selected, the
&gt; tradeoffs of which we are currently discussing.
&gt;
&gt; Better understanding the requirements of the system from George and
&gt; David will help define which approach is acceptable given the tradeoffs.
&gt; For example, I imagine accessing onion services should not be restricted
&gt; to clients from a web browser.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190621003345</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-06-21 00:33:45-0400</timestampReceived><subject>[tor-dev] Release: obfs4proxy-0.0.11</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

I just tagged obfs4proxy-0.0.11.  The primary changes are an alteration
to how the obfs4 transport handles connections after the handshake
failed, based on a report and assistance from Sergey Frolov.

Tarball/Signature:
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.11.tar.xz
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.11.tar.xz.asc

Changes in version 0.0.11 - 2019-06-21:
 - Update my e-mail address.
 - Change the obfs4 behavior for handling handshake failure to be more
   uniform.  Thanks to Sergey Frolov for assistance.
 - Bump the version of the utls fork.

Regards,

-- 
Yawning Angel



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190627022633</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-06-27 02:26:33-0400</timestampReceived><subject>Re: [tor-dev] New Proposal 306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi Neel,

&gt; On 27 Jun 2019, at 11:10, neel@neelc.org wrote:
&gt; 
&gt; Thank you so much for your feedback. I have pushed your changes (and revert my \
&gt; changes to 000-index.txt) as fixup commits to the GitHub PR. 
&gt; Could you please review the new changes?

I'm going to wait a week or two for other people to provide feedback on this thread.

T

&gt; &gt; On 2019-06-25 23:33, teor wrote:
&gt; &gt; Hi Neel,
&gt; &gt; Thanks for this proposal.
&gt; &gt; &gt; On 26 Jun 2019, at 11:15, neel@neelc.org wrote:
&gt; &gt; &gt; I have a new proposal: A Tor Implementation of IPv6 Happy Eyeballs
&gt; &gt; &gt; This is to implement Tor IPv6 Happy Eyeballs and acts as an
&gt; &gt; &gt; alternative to Prop299 as requested here:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt; &gt; &gt; The GitHub pull request is here:
&gt; &gt; &gt; https://github.com/torproject/torspec/pull/87
&gt; &gt; Here's the proposal content, with my comments:
&gt; &gt; &gt; Filename: 306-ipv6-happy-eyeballs.txt
&gt; &gt; &gt; Title: A Tor Implementation of IPv6 Happy Eyeballs
&gt; &gt; &gt; Author: Neel Chauhan
&gt; &gt; &gt; Created: 25-Jun-2019
&gt; &gt; Supercedes: 299
&gt; &gt; &gt; Status: Open
&gt; &gt; &gt; Ticket: https://trac.torproject.org/projects/tor/ticket/29801
&gt; &gt; &gt; 1. Introduction
&gt; &gt; &gt; As IPv4 address space becomes scarce, ISPs and organizations will
&gt; &gt; &gt; deploy
&gt; &gt; &gt; IPv6 in their networks. Right now, Tor clients connect to guards
&gt; &gt; &gt; using
&gt; &gt; &gt; IPv4 connectivity by default.
&gt; &gt; &gt; When networks first transition to IPv6, both IPv4 and IPv6 will
&gt; &gt; &gt; be enabled
&gt; &gt; &gt; on most networks in a so-called "dual-stack" configuration. This
&gt; &gt; &gt; is to not
&gt; &gt; &gt; break existing IPv4-only applications while enabling IPv6
&gt; &gt; &gt; connectivity.
&gt; &gt; &gt; However, IPv6 connectivity may be unreliable and clients should
&gt; &gt; &gt; be able
&gt; &gt; &gt; to connect to the guard using the most reliable technology,
&gt; &gt; &gt; whether IPv4
&gt; &gt; &gt; or IPv6.
&gt; &gt; &gt; In ticket #27490, we introduced the option ClientAutoIPv6ORPort
&gt; &gt; &gt; which
&gt; &gt; &gt; lets a client randomly choose between IPv4 or IPv6. However, this
&gt; &gt; &gt; random decision does not take into account unreliable
&gt; &gt; &gt; connectivity
&gt; &gt; &gt; or falling back to the competing IP version should one be
&gt; &gt; &gt; unreliable
&gt; &gt; &gt; or unavailable.
&gt; &gt; &gt; One way to select between IPv4 and IPv6 on a dual-stack network
&gt; &gt; &gt; is a
&gt; &gt; &gt; so-called "Happy Eyeballs" algorithm as per RFC 8305. In one, a
&gt; &gt; &gt; client
&gt; &gt; &gt; attempts an IP family, whether IPv4 or IPv6. Should it work, the
&gt; &gt; &gt; client
&gt; &gt; &gt; sticks with the working IP family. Otherwise, the client attempts
&gt; &gt; &gt; the
&gt; &gt; &gt; opposing version. This means if a dual-stack client has both IPv4
&gt; &gt; &gt; and
&gt; &gt; &gt; IPv6, and IPv6 is unreliable, the client uses IPv4, and vice
&gt; &gt; &gt; versa.
&gt; &gt; &gt; In Proposal 299, we have attempted a IP fallback mechanism using
&gt; &gt; &gt; failure
&gt; &gt; &gt; counters and preferring IPv4 and IPv6 based on the state of the
&gt; &gt; &gt; counters.
&gt; &gt; &gt; However, Prop299 was not standard Happy Eyeballs and an
&gt; &gt; &gt; alternative,
&gt; &gt; &gt; standards-compliant proposal was requested in [P299-TRAC] to
&gt; &gt; &gt; avoid issues
&gt; &gt; &gt; from complexity caused by randomness.
&gt; &gt; &gt; This proposal describes a Tor implementation of Happy Eyeballs
&gt; &gt; &gt; and is
&gt; &gt; &gt; intended as a successor to Proposal 299.
&gt; &gt; &gt; 2. Address Selection
&gt; &gt; &gt; To be able to handle Happy Eyeballs in Tor, we will need to
&gt; &gt; &gt; modify the
&gt; &gt; &gt; data structures used for connections to guards, namely the extend
&gt; &gt; &gt; info
&gt; &gt; &gt; structure.
&gt; &gt; &gt; The extend info structure should contain both an IPv4 and an IPv6
&gt; &gt; &gt; address.
&gt; &gt; &gt; This will allow us to try IPv4 and the IPv6 addresses should both
&gt; &gt; &gt; be
&gt; &gt; &gt; available on a relay and the client is dual-stack.
&gt; &gt; &gt; When parsing relay descriptors and filling in the extend info
&gt; &gt; &gt; data
&gt; &gt; &gt; structure, we need to fill in both the IPv4 and IPv6 address if
&gt; &gt; &gt; they both
&gt; &gt; &gt; are available. If only one family is available for a relay (IPv4
&gt; &gt; &gt; or IPv6),
&gt; &gt; &gt; we should fill in the address for available family and leave the
&gt; &gt; &gt; opposing
&gt; &gt; &gt; family null.
&gt; &gt; When we implement this feature in tor, it would be a good idea to call
&gt; &gt; the
&gt; &gt; two addresses "preferred" and "alternate" address. With this design,
&gt; &gt; the low-level connection code doesn't have to know about reachable
&gt; &gt; addresses, or IPv4/IPv6 preferences. It just has to try them in order.
&gt; &gt; &gt; 3. Connecting To A Relay
&gt; &gt; &gt; When a client connects to a guard using an extend info data
&gt; &gt; &gt; structure, we
&gt; &gt; &gt; should first check if there is an existing authenticated
&gt; &gt; &gt; connection. If
&gt; &gt; &gt; there is, we should use it.
&gt; &gt; Tor's code already does this check: we won't need to change it.
&gt; &gt; &gt; If there is no existing authenticated connection for an extend
&gt; &gt; &gt; info, we
&gt; &gt; &gt; should attempt to connect using the first available, allowed, and
&gt; &gt; &gt; preferred
&gt; &gt; &gt; address. At the time of writing, this is IPv4.
&gt; &gt; That's not quite true: most clients use IPv4 by default, but they can
&gt; &gt; be
&gt; &gt; configured to prefer IPv6, or only allow certain addresses. And bridge
&gt; &gt; clients
&gt; &gt; automatically use IPv6 if they are configured with an IPv6 bridge.
&gt; &gt; &gt; We should also schedule a timer for connecting using the other
&gt; &gt; &gt; address
&gt; &gt; &gt; should one be available and allowed, and the first attempted
&gt; &gt; &gt; version
&gt; &gt; &gt; fails. This should be higher than most client's successful TLS
&gt; &gt; &gt; authentication time. I propose that the timer is 15 seconds. The
&gt; &gt; &gt; reason
&gt; &gt; &gt; for this is to accommodate high-latency connections such as
&gt; &gt; &gt; dial-up and
&gt; &gt; &gt; satellite.
&gt; &gt; In the worst case scenario, users see Tor Browser hang for 15 seconds
&gt; &gt; before it makes a successful connection. That's not acceptable.
&gt; &gt; Depending on their location, most tor clients authenticate to the
&gt; &gt; first
&gt; &gt; hop within 0.5-1.5 seconds. So I suggest we use a 1.5 second delay:
&gt; &gt; https://metrics.torproject.org/onionperf-buildtimes.html
&gt; &gt; In RFC 8305, the default delay is 250 milliseconds, and the maximum
&gt; &gt; delay is 2 seconds. So 1.5 seconds is reasonable for TLS and tor link
&gt; &gt; authentication.
&gt; &gt; https://tools.ietf.org/html/rfc8305#section-8
&gt; &gt; (This delay will mainly affect initial bootstrap, because all of Tor's
&gt; &gt; other connections are pre-emptive, or re-used.)
&gt; &gt; A small number of clients may do wasted authentication.
&gt; &gt; That's ok. Tor already does multiple bootstrap and guard connections.
&gt; &gt; We have talked about this design in the team over the last few months.
&gt; &gt; Our key insights are that:
&gt; &gt; * TCP connections are cheap, but TLS is expensive
&gt; &gt; * most failed TCP connections fail immediately in the kernel, some
&gt; &gt; fail quickly with a response from the router, and others are
&gt; &gt; blackholed
&gt; &gt; and time out
&gt; &gt; * it's unlikely that a client will fail to authenticate to a relay
&gt; &gt; over one
&gt; &gt; IP version, but succeed over the other IP version, because the
&gt; &gt; directory
&gt; &gt; authorities authenticate to each relay when they check reachability
&gt; &gt; * some censorship systems only break authentication over IPv4,
&gt; &gt; but they are rare
&gt; &gt; So here are some alternative designs:
&gt; &gt; 1. Tor connects to the preferred address and tries to authenticate.
&gt; &gt; On failure, or after a 1.5 second delay, it connects to the
&gt; &gt; alternate address
&gt; &gt; and tries to authenticate.
&gt; &gt; On the first successful authentication, it closes the other
&gt; &gt; connection.
&gt; &gt; This design places the least connection load on the network, but might
&gt; &gt; add
&gt; &gt; a bit of extra TLS load.
&gt; &gt; 2. Tor connects via TCP to the preferred address.
&gt; &gt; On failure, or after a 250 ms delay, it connects via TCP to the
&gt; &gt; alternate
&gt; &gt; address.
&gt; &gt; On the first TCP success, tor attempts to authenticate immediately.
&gt; &gt; On authentication failure, or after a 1.5 s delay, tor attempts to
&gt; &gt; authenticate over the second TCP connection.
&gt; &gt; On the first successful authentication, it closes the other
&gt; &gt; connection.
&gt; &gt; This design is the most reliable for clients, but it also puts a bit
&gt; &gt; more
&gt; &gt; connection load on dual-stack guards and authorities.
&gt; &gt; 3. Tor connects via TCP to the preferred address.
&gt; &gt; On failure, or after a 250ms delay, it connects via TCP to the
&gt; &gt; alternate
&gt; &gt; address.
&gt; &gt; On the first TCP success, tor attempts to authenticate, and closes
&gt; &gt; the
&gt; &gt; other connection.
&gt; &gt; This design looks similar to a web browser's implementation of Happy
&gt; &gt; Eyeballs, because it closely follows the RFC. That might help hide tor
&gt; &gt; from censors. It adds some extra connection load, but no extra TLS
&gt; &gt; load.
&gt; &gt; I suggest that we put all 3 alternative designs in the proposal, but
&gt; &gt; start
&gt; &gt; by implementing and testing alternative 1.
&gt; &gt; When we implement this code, let's put the happy eyeballs part in a
&gt; &gt; separate module, as much as possible. That helps us review the code,
&gt; &gt; and make sure it has good test coverage. It also stops existing files
&gt; &gt; and
&gt; &gt; functions getting too big.
&gt; &gt; &gt; 4. Handling Connection Successes And Failures
&gt; &gt; &gt; Should a connection to a guard succeed and is authenticated via
&gt; &gt; &gt; TLS, we
&gt; &gt; &gt; can then use the connection. In this case, we should cancel all
&gt; &gt; &gt; other
&gt; &gt; &gt; connection timers and in-progress connections. Cancelling the
&gt; &gt; &gt; timers is
&gt; &gt; &gt; so we don't attempt new unnecessary connections when our existing
&gt; &gt; &gt; connection is successful, preventing denial-of-service risks.
&gt; &gt; &gt; However, if we fail all available and allowed connections, we
&gt; &gt; &gt; should tell
&gt; &gt; &gt; the rest of Tor that the connection has failed. This is so we can
&gt; &gt; &gt; attempt
&gt; &gt; &gt; another guard relay.
&gt; &gt; &gt; 5. Acknowledgments
&gt; &gt; &gt; Thank you so much to teor for the discussion of the happy
&gt; &gt; &gt; eyeballs proposal.
&gt; &gt; &gt; I wouldn't have been able to do this has it not been for your
&gt; &gt; &gt; help.
&gt; &gt; &gt; 6. Appendix
&gt; &gt; &gt; [P299-TRAC]:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/29801

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190627225749</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2019-06-27 22:57:49-0400</timestampReceived><subject>Re: [tor-dev] Per-peer stream isolation for Bitcoin clients</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Roger Dingledine wrote:
&gt; On Fri, Jun 28, 2019 at 07:53:54AM +1000, teor wrote:
&gt;&gt; And you're right, Tor Browser can use lots more than 8 circuits, so
&gt;&gt; I wouldn't worry about it.
&gt;&gt;
&gt;&gt; Do you know how much load Bitcoin places on the Tor network?
&gt;&gt;
&gt;&gt; If it's a lot, one good answer is to encourage users to run relays,
&gt;&gt; or to donate to organisations that run relays. (Or donate to Tor,
&gt;&gt; so we can make the network more efficient.)
&gt; 
&gt; Right -- my first question would be "8 circuits per what?" That is,
&gt; how often does it use eight new circuits?
&gt; 
&gt; If it makes 8 circuits and then holds them open and uses each of them
&gt; for a long period of time, that sounds like a solid win -- you get
&gt; isolation between streams with little downside.
&gt; 
&gt; If we're talking 8 circuits per new gadget, and the new gadgets are
&gt; pretty frequent, then the tradeoff becomes more complicated.
&gt; 
&gt; --Roger
&gt; 

It would hold on for the circuits until the peers on the other side of
each circuit disconnect or disappear. Usually Bitcoin full nodes are
steady and kept up (no recent disconnects of any sort, unless the peer
is unreliable).

But this is not the proper way to use Bitcoin behind Tor. So stream
isolation for clearnet type circuits shouldn't even be a concern.
Whonix's tor-service-defaults-torrc chooses to disable automatic
per-peer stream isolation for Bitcoin's SOCKS port and I think it does
the right thing, because this is not how Bitcoin should be used behind Tor.

Jeremy, when Bitcoin (Core) is used with Tor, the proper and recommended
way is to set in bitcoin.conf `onion=127.0.0.1:9050` (substitute with
the SocksPort of your system's Tor instance). This will teach Bitcoin
that we are behind Tor, so it should prefer .onion peers instead, this
way you won't be dependent on clearnet type circuits, and one (or 8)
exit nodes seeing all your peers or tampering with them. Bitcoin has 3
peer families:

-IPv4
-IPv6
-Tor (onion)

There is even a bitcoin option to make it ONLY connect to .onion peers:
`onlynet=tor`. This will eliminate Exit nodes out of the equation
entirely. There are lots of .onion peers. I run 3 (but there are many
more) "hybrid bridges", like nodes open to all 3 peer families so that
there .onion peers and clearnet peers are very well connected and synced
and the effect of "isolation/island" is not created.

It's of course desirable to prefer .onion peers while behind Tor.
Otherwise the peers will see one Exit node IP address as 'too many
peers' and give it bad score, as Bitcoin keeps a score for the
reliability overall of each peer, so you can understand it's quite
problematic for many "different peers" to connect to a peer with same IP
address.

Of course when more peers connect to your .onion, you still technically
see one remote IP address (127.0.0.1) but at least this is coded as Tor
and behaves differently than the score system for clearnet IP addresses.
Also .onion traffic is end-to-end encrypted and self-authenticated so
you eliminate the MITM attack type (given Bitcoin peer to peer traffic
is not encrypted). You are not forced to also listen on a .onion if you
use `onlynet=tor`, you can set `listenonion=0` -- you can play with it
how you want: connect to one or more families (any combination) and
listen to one or more families (any combination) or don't listen at all.
There's also an option where you can set the hostname like
`externalip=&lt;hostname&gt;.onion`, etc.

(re. teor): The Bitcoin traffic in Tor network / onion land is not
negligible. Look at just one of my bridge nodes:

Jun 27 17:05:51.000 [notice] Heartbeat: Tor's uptime is 15 days 6:00
hours, with 34 circuits open. I've sent 19.65 GB and received 5.70 GB.

There is only Bitcoin traffic here because there's nothing else. As you
can see we sent more than 3x what we received, meaning we helped more
nodes to bootstrap the blockchain (new started nodes or nodes that are
not kept on / connected 24x24).

So yeah, it would be nice to encourage the community towards running or
sponsoring relays to assist in maintaining a good capacity and diversity
of the Tor network, it is very important and widely used as you can see.

Also there is a ticket open by me:
https://github.com/bitcoin/bitcoin/issues/9214

to support v3 onion address types. Currently Bitcoin Core only supports
v2 legacy onion addresses, which are heavier on the network because use
TAP handshake and etc. v3 onion new address types are superior of
course, so getting this fixed will decrease the load on the Tor network
and increase the efficiency in Bitcoin onionland. Better work on this.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190630123011</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-06-30 12:30:11-0400</timestampReceived><subject>Re: [tor-dev] Optimistic SOCKS Data</subject><body>

I'll add that a cypherpunk has been testing a very simple patch
implementing this behavior for a few months and not seen adverse
effects: https://trac.torproject.org/projects/tor/attachment/ticket/5915/tor-optimistic-data.patch
(Although I propose to not include the error page component.)

-tom

On Sat, 22 Jun 2019 at 00:50, Tom Ritter &lt;tom@ritter.vg&gt; wrote:
&gt;
&gt; The attached is a draft proposal for allowing tor to lie to an
&gt; application about the SOCKS connection enabling it to send data
&gt; optimistically.
&gt;
&gt; It's going to need some fleshing out in ways I am not familiar with,
&gt; but I wanted to get something out to start as we think that this is
&gt; probably the best path forward for bringing back Tor Browser's
&gt; optimistic SOCKS behavior.
&gt;
&gt; -tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190630212141</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-06-30 21:21:41-0400</timestampReceived><subject>Re: [tor-dev] tor writen in golang</subject><body>

On Wed, Jun 26, 2019 at 04:52:10PM +0800, liuyihen wrote:
&gt; Hi tor-dev@mailing list,
&gt; I want to know is there somebody has been re-writing tor in golang? or is
&gt; there a repo have been opened?

Check out this trac page for a list of alternative Tor implementations:
https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations

It looks like there are two listed as being in Go.

But be sure to realize that they are not (at this point) intended as
actual full replacements of mainline Tor.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190502222236</emailId><senderName>Pranam Lashkari</senderName><senderEmail>plashkari628@gmail.com</senderEmail><timestampReceived>2019-05-02 22:22:36-0400</timestampReceived><subject>[tor-dev] [GSoD] Project 4: Help us write architecture documentation for Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,
I want to participate in Google Season of Docs as a technical writer. I
have closely looked at the ideas available on the ideas page and found
project 4 interesting. I have also skimmed through the existing
documentation for the same.

What are the further procedures? (E.g: In GSoC most of the organizations
make students take competency test or make them contribute by solving small
bugs or patches) Do we have something similar in Tor for the GSoD?

*About me:*
I am a final year computer engineering student. I have been involved in
open source since last two years. I have been a GSoC 2018 student with
Boost C++ Libraries and Google Code-In mentor with KDE and JBoss.
Apart from that, I would have been Admin of Boost C++ Library in GSoD but
unfortunately, Boost isn't a part of GSoD this year due to limited slots
for organizations in GSoD's pilot year.

I initiated a technical newsletter at my college where I generated content
for 1 year along with leading the committee for the same. This initiative
involved writing tutorials for the new aspirants, reviewing trending
technologies and documenting college projects.

Thank you,
Pranam Lashkari

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hello,  &lt;div&gt;I want to \
participate in Google Season of Docs as a technical writer. I have closely looked at \
the ideas available on the ideas page and found project 4 interesting. I have also \
skimmed through the existing documentation for the same.     \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What are the further procedures? (E.g: In GSoC most of the \
organizations make students take competency test or make them contribute by solving \
small bugs or patches) Do we have something similar in Tor for the \
GSoD?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;About me:&lt;/b&gt;&lt;/div&gt;&lt;div&gt;I am a final year computer \
engineering student. I have been involved in open source since last two years. I have \
been a GSoC 2018 student with Boost C++ Libraries and Google Code-In mentor with KDE \
and JBoss. Apart  from that, I would have been Admin of Boost C++ Library in GSoD but \
unfortunately, Boost isn't a part of GSoD this year due to limited slots for \
organizations in GSoD's pilot year.  &lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I initiated a \
technical newsletter at my college where I generated content for 1 year along with \
leading the committee for the same. This initiative involved writing tutorials for \
the new aspirants, reviewing trending technologies and documenting college \
projects.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir="ltr" \
class="m_4091471126708859642gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;Thank \
you,&lt;div&gt;Pranam Lashkari&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190504013414</emailId><senderName>ttoto Q</senderName><senderEmail>radio113tt@gmail.com</senderEmail><timestampReceived>2019-05-04 01:34:14-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


confirmar 0ef436bfd7e6ffc09e94bdfa53554c4eeb67bd72

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;confirmar 0ef436bfd7e6ffc09e94bdfa53554c4eeb67bd72      &lt;br&gt;&lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190504210236</emailId><senderName>Steve Snyder</senderName><senderEmail>swsnyder@snydernet.net</senderEmail><timestampReceived>2019-05-04 21:02:36-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>



On 5/4/19 12:26 PM, David Fifield wrote:
&gt; On Sat, May 04, 2019 at 03:27:53PM +0000, Yawning Angel wrote:
&gt;&gt; On 5/3/19 1:48 PM, Steve Snyder wrote:
&gt;&gt;&gt; FYI, obfs4proxy no longer recognizes address:port in this form:
&gt;&gt;&gt;
&gt;&gt;&gt;     ServerTransportListenAddr obfs4 [000.000.000.000]:443
&gt;&gt;&gt;
&gt;&gt;&gt; Note the square brackets. Tor 0.3.5.8 / 0.4.0.5 still parses this
&gt;&gt;&gt; syntax, and obfs4proxy used to too. As of 0.0.10 it no longer does.
&gt;&gt;
&gt;&gt; Odd.  None of that code, both in obfs4proxy and goptlib, has changed for
&gt;&gt; years.  I'll look at it when I have a moment.
&gt; 
&gt; Might be this?
&gt; 
&gt; tor_addr_parse is overly permissive
&gt; https://bugs.torproject.org/23082

Well, if that was supposed be a general fix then bug 23082 wasn't fixed
very well. ORPort is still OK with the square bracket syntax while
ServerTransportListenAddr is not.

Thanks for the response.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190506200837</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-05-06 20:08:37-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

Hi!

Here are my notes on the latest prop295 that I came up with while
doing a reference implementation in Python.  If you're curious, you
can see the candidate reference implementation at
https://github.com/nmathewson/prop295ref . I'd love to know whether or
not the implementation matches the intention of the proposal.

Minor notes:

* I'm planning to replace HKDF-SHA256 with SHAKE, and AES128 with AES256.

* I agree with dropping the 'recognized' field.  I didn't implement it here.

More important issues:

* To clarify, I believe there need to be two separate T'_I values for each
  hop: T'_I for outbound cells, and T'_I for inbound cells.  I suggest
  calling them Tf'_I and Tb'_I.

* Since Tor allows a relay cell to be addressed to any hop in the circuit, I
  believe that every relay needs to have a separate value for authentication
  state that is currently called T'_{n+1}.  I'm calling this value Ta'_I,
  where the a stands for 'authentication'.

* I believe that the authentication algorithm in section 4.1 does not if
  cells may be addressed to hops other than the last hop.  It needs to change
  as follows:

             T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
             Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})

             If Tag = 0:
                  T'_{n+1} = T_{n+1}
                  The message is authenticated.
             Otherwise:
                  T'_{n+1} remains unchanged.
                  The message is not authenticated.

  The change here is that I think T'_{n+1} (which I'd like to call Ta'_I)
  should only change when the message is authenticated.

Some questions about issues I don't understand:

* Is it really safe to use the same key (Khf_n) for authentication as well
  as for encryption?

* Is there any reason _not_ to initialize the T' values based on the
  KDF?  It seems to me that setting them to zero might give the attacker
  some information they didn't have before.

* What forward secrecy, if any, are we getting here?

many thanks,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190507172432</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-05-07 17:24:32-0400</timestampReceived><subject>Re: [tor-dev] Fuck You Van Gegel</subject><body>

Charming.

Mark's been dealt with and new members will be moderated for a while.
Sorry about the noise.

On Tue, May 7, 2019 at 9:56 AM Mark Kepler
&lt;mark.kepler.jr@protonmail.com&gt; wrote:
&gt; 
&gt; Fuck You Van Gegel, you dumb fuck. You think you can post stupid shit to our lists? \
&gt; I'm going to stop you from postiing you dumb motherfucker. I'm going to eat you \
&gt; alive. You're a dumb cocksucking faggot and I enjoyed fucking your mother in her \
&gt; face. I yelled FACE FUCK while I was doing it BITCH. 
&gt; 
&gt; 
&gt; 
&gt; 
&gt; You DONT KNOW SHIT AND YOU ANNOY AND HARRASS PEOPLE WITH YOUR BULLSHIT. YOU WILL \
&gt; STOP POSTING HERE YOU DUMB MOTHER FUCKER. WE WILL GET YOU. WE WILL FIND YOU. WE \
&gt; WILL KILL YOU. LOLOLOLOL. _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190507165551</emailId><senderName>Mark Kepler</senderName><senderEmail>mark.kepler.jr@protonmail.com</senderEmail><timestampReceived>2019-05-07 16:55:51-0400</timestampReceived><subject>[tor-dev] Fuck You Van Gegel</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Fuck You Van Gegel, you dumb fuck. You think you can post stupid shit to our lists? \
I'm going to stop you from postiing you dumb motherfucker. I'm going to eat you \
alive. You're a dumb cocksucking faggot and I enjoyed fucking your mother in her \
face. I yelled FACE FUCK while I was doing it BITCH.

You DONT KNOW SHIT AND YOU ANNOY AND HARRASS PEOPLE WITH YOUR BULLSHIT. YOU WILL STOP \
POSTING HERE YOU DUMB MOTHER FUCKER. WE WILL GET YOU. WE WILL FIND YOU. WE WILL KILL \
YOU. LOLOLOLOL.


[Attachment #5 (text/html)]

&lt;div style="box-sizing: inherit; color: rgb(85, 85, 85); font-family: Arial, \
"Helvetica Neue", Helvetica, sans-serif; font-size: 14px; font-style: \
normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; \
letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); \
text-decoration-style: initial; text-decoration-color: initial;"&gt;Fuck You Van Gegel, \
you dumb fuck. You think you can post stupid shit to our lists? I'm going to stop you \
from postiing you dumb motherfucker. I'm going to eat you alive. You're a dumb \
cocksucking faggot and I enjoyed fucking your mother in her face. I yelled FACE FUCK \
while I was doing it BITCH.&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block \
protonmail_signature_block-empty" style="box-sizing: inherit; opacity: 0; height: \
0px; overflow: hidden; color: rgb(85, 85, 85); font-family: Arial, "Helvetica \
Neue", Helvetica, sans-serif; font-size: 14px; font-style: normal; \
font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; \
letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); \
text-decoration-style: initial; text-decoration-color: initial;"&gt;&lt;div \
class="protonmail_signature_block-user protonmail_signature_block-empty" \
style="box-sizing: inherit; opacity: 0; height: 0px; overflow: \
hidden;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block-proton \
protonmail_signature_block-empty" style="box-sizing: inherit; opacity: 0; height: \
0px; overflow: hidden;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block-proton \
protonmail_signature_block-empty" style="box-sizing: inherit; opacity: 0; height: \
0px; overflow: hidden;"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="protonmail_signature_block \
protonmail_signature_block-empty"&gt;&lt;div class="protonmail_signature_block-user \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="protonmail_signature_block-proton \
protonmail_signature_block-empty"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;You DONT KNOW SHIT AND YOU \
ANNOY AND HARRASS PEOPLE WITH YOUR BULLSHIT. YOU WILL STOP POSTING HERE YOU DUMB \
MOTHER FUCKER. WE WILL GET YOU. WE WILL FIND YOU. WE WILL KILL YOU. LOLOLOLOL.&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506151958</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-06 15:19:58-0400</timestampReceived><subject>[tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

Hello list,

here is a control spec patch for adding v3 client auth commands to
add/remove/view clients from the client-side (so Tor Browser -&gt; Tor):
                https://github.com/torproject/torspec/pull/81/commits/3a26880e80617210b4729f96664ef9f0345b0b7c


I'm currently unhappy with the naming of those commands, and in general
with how easy it is to confuse them with the (non-existent) service-side
commands. I'm wondering how to name them better so that when we add the
respective service-side commands (at some point we should) there is no
confusion.

Let me know what you think!

Thanks! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190507173540</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-05-07 17:35:40-0400</timestampReceived><subject>[tor-dev] Tor exit bridges</subject><body>

Tor relays are public and easily blocked by IP. To connect to Tor 
network users where Tor is censored have to use bridges and even PTs. 
But, what happens on the exit? Many websites block Tor IPs so using it 
to access "clearweb" is not possible. Should we allow and start using 
"exit bridges"? In I2P we have not this problem since there is no 
central IP list of relays.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190507180000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-05-07 18:00:00-0400</timestampReceived><subject>Re: [tor-dev] Tor exit bridges</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


juanjo:
&gt; Tor relays are public and easily blocked by IP. To connect to Tor
&gt; network users where Tor is censored have to use bridges and even PTs.
&gt; But, what happens on the exit? Many websites block Tor IPs so using
&gt; it to access "clearweb" is not possible. Should we allow and start
&gt; using "exit bridges"? In I2P we have not this problem since there is
&gt; no central IP list of relays.

there is no need to extend to one more hope to achieve this

https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html

https://lists.torproject.org/pipermail/tor-relays/2019-May/017273.html


--=20
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506154803</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-06 15:48:03-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

[Attachment #2 (multipart/signed)]


On 06 May (18:19:58), George Kadianakis wrote:
&gt; Hello list,
&gt; 
&gt; here is a control spec patch for adding v3 client auth commands to
&gt; add/remove/view clients from the client-side (so Tor Browser -&gt; Tor):
&gt; https://github.com/torproject/torspec/pull/81/commits/3a26880e80617210b4729f96664ef9f0345b0b7c
&gt;  
&gt; I'm currently unhappy with the naming of those commands, and in general
&gt; with how easy it is to confuse them with the (non-existent) service-side
&gt; commands. I'm wondering how to name them better so that when we add the
&gt; respective service-side commands (at some point we should) there is no
&gt; confusion.

Very nice!

(Replying here so tor-dev@ sees it all and do not miss comments on the PR.)

1. So yes on the naming and a way to highlight service vs client. The command
   naming scheme on the control port is a bit chaotic and I'm all for one
   trying to come up with "namespace" a bit better.

    HSPOST, HSFETCH, ADD_ONION, DEL_ONION...

    We can't change the above but we can at least from now on try to come up
    with a better naming related to onion services.

    Something like:

        - ONION_CLIENT_ADD_AUTH
        - ONION_CLIENT_DEL_AUTH
        - ONION_CLIENT_LIST_AUTH

    I know a bit long but these commands in the end should rarely be typed by
    a human person anyway.

    And if we have service side only commands, we use:

        - ONION_SERVICE_...

    Not sure we'll ever have a command that applies to both a service and a
    client... maybe who knows, but then we can either do two commands or just
    generalized on:

        - ONION_ ...

2. We need LIST/ADD/DEL to specifies what code is returned in case of success
   and error. There can be many errors like "Key blob unparseable" or
   "HSAddress" is invalid or "a client auth already exists" which I assume for
   this we will force the user to remove/add instead of replacing.

3. The VIEW_ONION_CLIENT_AUTH, for "Type", I think you need to define this
   differenlty:

    [SP "Type=" TYPE]

    and then define TYPE:

    TYPE can be:
        "Permanent" - &lt;description&gt;...

Cheers!
David

-- 
nUXe6UT7bN7R6NGT2ZAAfdBXWLxXg2jRjmun1U49Zcs=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506160408</emailId><senderName>Mark Smith</senderName><senderEmail>mcs@pearlcrescent.com</senderEmail><timestampReceived>2019-05-06 16:04:08-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

On 5/6/19 11:19 AM, George Kadianakis wrote:
&gt; Hello list,
&gt; 
&gt; here is a control spec patch for adding v3 client auth commands to
&gt; add/remove/view clients from the client-side (so Tor Browser -&gt; Tor):
&gt; https://github.com/torproject/torspec/pull/81/commits/3a26880e80617210b4729f96664ef9f0345b0b7c
&gt;  
&gt; I'm currently unhappy with the naming of those commands, and in general
&gt; with how easy it is to confuse them with the (non-existent) service-side
&gt; commands. I'm wondering how to name them better so that when we add the
&gt; respective service-side commands (at some point we should) there is no
&gt; confusion.
&gt; 
&gt; Let me know what you think!

Thanks for working on this.  I have a couple of comments:

1. How does Permanent get set?  Should there by an option added to
ADD_ONION_CLIENT_AUTH to let the client say "store this on disk"?

2. For VIEW_ONION_CLIENT_AUTH it would be nice if the HSAddress
parameter was optional.  We may want to build an interface that allows
users to see all of their keys and choose which ones to remove, etc.

-- 
Mark Smith
Pearl Crescent
http://pearlcrescent.com/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190503075719</emailId><senderName>"Damon (TheDcoder)"</senderName><senderEmail>thedcoder@disroot.org</senderEmail><timestampReceived>2019-05-03 07:57:19-0400</timestampReceived><subject>[tor-dev] My implementation of hash for controller password - torhash</subject><body>

[Attachment #2 (multipart/alternative)]


Hello everyone!

I have written a very simple tool called torhash
&lt;https://github.com/TheDcoder/torhash&gt; to generate hashed
passwords/strings according to the instructions in control spec to
authenticate with the controller interface (TC?). I did not actually
study the S2K algorithm since I found it hard to understand RFC 2440, I
studied source code and bit by bit I figured out what was happening
behind the scenes!

The reason I did this is that I am working on another program called
ProxAllium &lt;https://proxallium.dtw.tools/&gt; which acts as a graphical
user interface for Tor, I am currently in the process of rewriting
&lt;https://github.com/DcodingTheWeb/ProxAllium/tree/next-gen&gt; it in C to
make it cross-platform (along with a few other reasons...). I hit a
roadblock while I was implementing support for interacting with the
controller interface, I had to make a choice between calling Tor to
generate the hashed password or to hash the password in the program
itself. I felt like hashing the password in the program itself was the
right choice, I had a few other weak reasons to not call Tor for hashing
the password but my gut was the main motivator behind this choice.

I created torhash (apologies about the bad name choice) as a
proof-of-concept and to improve my general programming skills, I had no
prior experience working with cryptography or hash functions on this
level, so I went with the simplest library I could find for hashing the
data. I could have gone with OpenSSL, as I believe that it is the
de-facto cross-platform standard for cryptography and cryptographic
hashing, I am currently looking into using it, but I am not yet sure if
this is a good idea.

I would be grateful if some of you can take out some time to have a
look, I am very excited to hear your opinions and any advice that you
may have to help me improve, the code itself is very simple and short
(114 lines of code). Pardon any mistakes or bad code that I may have
written, I have only begun programming relatively recently and my
experience with low-level development (with C) is very recent.

Thank you for reading and for the input in advance!


Best Regards,

Damon H. (TheDcoder)


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt; Hello everyone!&lt;/p&gt;
    &lt;p&gt;I have written a very simple tool called &lt;a
        moz-do-not-send="true"
        href="https://github.com/TheDcoder/torhash"&gt;torhash&lt;/a&gt; to
      generate hashed passwords/strings according to the instructions in
      control spec to authenticate with the controller interface (TC?).
      I did not actually study the S2K algorithm since I found it hard
      to understand RFC 2440, I studied source code and bit by bit I
      figured out what was happening behind the scenes!&lt;/p&gt;
    &lt;p&gt;The reason I did this is that I am working on another program
      called &lt;a moz-do-not-send="true"
        href="https://proxallium.dtw.tools/"&gt;ProxAllium&lt;/a&gt; which acts
      as a graphical user interface for Tor, I am currently in the
      process of &lt;a moz-do-not-send="true"
        href="https://github.com/DcodingTheWeb/ProxAllium/tree/next-gen"&gt;rewriting&lt;/a&gt;
      it in C to make it cross-platform (along with a few other
      reasons...). I hit a roadblock while I was implementing support
      for interacting with the controller interface, I had to make a
      choice between calling Tor to generate the hashed password or to
      hash the password in the program itself. I felt like hashing the
      password in the program itself was the right choice, I had a few
      other weak reasons to not call Tor for hashing the password but my
      gut was the main motivator behind this choice.&lt;/p&gt;
    &lt;p&gt;I created torhash (apologies about the bad name choice) as a
      proof-of-concept and to improve my general programming skills, I
      had no prior experience working with cryptography or hash
      functions on this level, so I went with the simplest library I
      could find for hashing the data. I could have gone with OpenSSL,
      as I believe that it is the de-facto cross-platform standard for
      cryptography and cryptographic hashing, I am currently looking
      into using it, but I am not yet sure if this is a good idea.&lt;/p&gt;
    &lt;p&gt;I would be grateful if some of you can take out some time to have
      a look, I am very excited to hear your opinions and any advice
      that you may have to help me improve, the code itself is very
      simple and short (114 lines of code). Pardon any mistakes or bad
      code that I may have written, I have only begun programming
      relatively recently and my experience with low-level development
      (with C) is very recent.&lt;/p&gt;
    &lt;p&gt;Thank you for reading and for the input in advance!&lt;/p&gt;
    &lt;p&gt;&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;Best Regards,&lt;/p&gt;
    &lt;p&gt;Damon H. (TheDcoder)&lt;br&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506164541</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-05-06 16:45:41-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

Mark Smith &lt;mcs@pearlcrescent.com&gt; writes:

&gt; 2. For VIEW_ONION_CLIENT_AUTH it would be nice if the HSAddress
&gt; parameter was optional.  We may want to build an interface that allows
&gt; users to see all of their keys and choose which ones to remove, etc.

A few random points:

I like dgoulet's naming, with "ONION_CLIENT" up front.

Why do we need VIEW (with the private keys) at all? (I'm thinking
e.g. when multiple controllers are connected). If we do need a "view"
command, maybe it should only show the key-IDs (and not the actual
private keys)? This, then, would either make ClientName= non-optional,
or the ADD command should return the name of the key.

It might be less confusing to read the spec if you replaced "tells the
server" with "tells tor" or "tells the connected Tor".

Further to Mark's question earlier, I think the spec should say
more about where/how long these keys will be stored.



Since implementers seem to want control of their keys for service-side
things, I would imagine the same will be true on the client-side -- that
is, an option for "ephemeral" in the sense that "Tor stores these only
in memory".

FWIW, the (current) implementation in txtorcon basically encourages an
approach where you keep the keys "in Tor" for as little time as
possible. You *can* add them permanently, but the "nice" API is a
context-manager, so you'd have code somewhat like this:

    tor = await txtorcon.connect(...)
    async with tor.onion_authentication("http://timaq4ygg2iegci7.onion/", "token-blob"):
        agent = tor.web_agent()
        resp = await agent.request(b'GET', "http://timaq4ygg2iegci7.onion/")
        body = await readBody(resp)
    # here, auth is removed from tor as we leave the context-manager

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190508122731</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-05-08 12:27:31-0400</timestampReceived><subject>[tor-dev] Network Health Monitoring</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi All,

I'm working on #28322 to improve the monitoring of Tor Metrics services,
but this also has the side effect of monitoring network health. For
example, we'd like to know when Onionoo messes up and starts reporting
zero relays, but we also get to learn for free in the same check how
many relays we have and alert if that number does something weird.

What would be the most useful checks to add here?

* Range of expected total relays
* Range of expected relays with Guard flag
* Range of expected relays with Exit flag
* Range of expected consensus weight in each position

Each one of these is basically an if statement in the script so I'm
happy to add these. I can do this by trial and error but if someone has
already thought about it then please reply or comment on the ticket.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190512110923</emailId><senderName>Harsh Gandhi</senderName><senderEmail>2015ucp1011@mnit.ac.in</senderEmail><timestampReceived>2019-05-12 11:09:23-0400</timestampReceived><subject>[tor-dev] TrackTor - GUI Based Implementation for Monitoring Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hello,

We are under-graduate students from Malaviya National Institute of
Technology currently pursuing Computer Science &amp; Engineering.

We have developed a GUI Based Tool for monitoring TOR (inspired by Nyx). We
have packaged and uploaded the same on,

PyPI - https://pypi.org/project/TrackTor/

Please do give it a try and suggest for improvements. Also, please let us
know on how can we incorporate/integrate this with The Tor Project?

Thank You!

Cheers!

-- 
Regards,
Harsh Rajiv Gandhi
B.Tech Final Year
Department of Computer Science and Engineering
Malaviya National Institute of Technology
Jaipur - 302017, Rajasthan
+91-9983543656

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We are under-graduate students from Malaviya \
National Institute of Technology currently pursuing Computer Science &amp; \
Engineering.&lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;div&gt;We have developed a GUI Based Tool for monitoring \
TOR (inspired by Nyx). We have packaged and uploaded the same \
on,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;PyPI -  &lt;a href="https://pypi.org/project/TrackTor/" \
target="_blank"&gt;https://pypi.org/project/TrackTor/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please \
do give it a try and suggest for improvements. Also, please let us know on how can we \
incorporate/integrate this with The Tor Project?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank \
You!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Cheers!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;Regards,&lt;/div&gt;&lt;div dir="ltr"&gt;Harsh Rajiv Gandhi&lt;/div&gt;&lt;div dir="ltr"&gt;B.Tech \
Final Year&lt;/div&gt;&lt;div dir="ltr"&gt;Department of Computer Science and \
Engineering&lt;/div&gt;&lt;div dir="ltr"&gt;Malaviya National Institute of Technology&lt;/div&gt;&lt;div \
dir="ltr"&gt;Jaipur - 302017, Rajasthan&lt;/div&gt;&lt;div \
dir="ltr"&gt;+91-9983543656&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190521151402</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-05-21 15:14:02-0400</timestampReceived><subject>[tor-dev] Proposal 303: When and how to remove support for protocol versions</subject><body>

Filename: 303-protover-removal-policy.txt
Title: When and how to remove support for protocol versions
Author: Nick Mathewson
Created: 21 May 2019
Status: Draft

1. Background

   With proposal 264, added support for "subprotocol versions" -- a
   means to declare which features are required for participation in the
   Tor network.  We also created a mechanism (refined later in proposal
   297) for telling Tor clients and relays that they cannot participate
   effectively in the Tor network, and they need to shut down.

   In this document, we describe a policy according to which these
   decisions should be made in practice.

2. Recommending features (for clients and relays)

   A subprotocol version SHOULD become recommended soon after all
   release series that did not provide it become unsupported (within a
   month or so).

   For example, the current oldest LTS release series is 0.2.9; when it
   becomes unsupported in 2020, the oldest supported release series will
   be 0.3.5.  Suppose that 0.2.9 supports a subprotocol Cupcake=1, and
   that all stable 0.3.5.x versions support Cupcake=1-3.  Around one
   month after the end of 0.2.9 support, Cupcake=3 should become a
   _recommended_ protocol for clients and relays.

   Additionally, a feature can become _recommended_ because of security
   reasons.  If we believe that it is a terrible idea to run an old
   protocol, we can make it _recommended_ for relays or clients or both.
   We should not do this lightly, since it will be annoying.

3. Requiring features (for relays)

   We regularly update the directory authorities to require relays to
   run certain versions of Tor or later.  We generally do this after a
   short outreach campaign to get as many relays as possible to upgrade.

   We MAY make a feature required for relays one month after every
   version without it is obsolete and unsupported, though it is better
   to wait three months if possible.

   We SHOULD make a feature required for relays within 12 months after
   every version without it is obsolete and unsupported.

4. Requiring features (for clients)

   Clients take the longest time to update, and are often the least able
   to fetch upgrades. Because of this, we should be very careful about
   making subprotocol versions required on clients, and should only do
   so for fairly compelling reasons.

   We SHOULD NOT make a feature required for clients until it has been
   _recommended_ for clients for at first 9 months.

   We SHOULD make a feature required for clients if it has been
   _recommended_ for clients for at least 18 months.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190516112005</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-16 11:20:05-0400</timestampReceived><subject>[tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>

Filename: 302-padding-machines-for-onion-clients.txt
Title: Hiding onion service clients using padding
Author: George Kadianakis, Mike Perry
Created: Thursday 16 May 2019
Status: Accepted
Ticket: #28634

0. Overview

   Tor clients use "circuits" to do anonymous communications. There are various
   types of circuits. Some of them are for navigating the normal Internet,
   others are for fetching Tor directory information, others are for connecting
   to onion services, while others are simply for measurements and testing.

   It's currently possible for MITM type of adversaries (like tor-network-level
   and local-area-network adversaries) to distinguish Tor circuit types from
   each other using a wide array of metadata and distinguishers.

   In this proposal, we study various techniques that can be used to
   distinguish client-side onion service circuits and provide WTF-PAD circuit
   padding machines (using prop#254) to hide them against certain adversaries.

1. Motivation

   We are writing this proposal for various reasons:

   1) We believe that in an ideal setting MITM adversaries should not be able
      to distinguish circuit types by inspecting traffic. Tor traffic should
      look amorphous to an outside observer to maximize uncertainty and
      anonymity properties.

      Client-side onion service circuits are an easy target for this proposal,
      because we believe we can improve their privacy with low bandwidth
      overhead.

   2) We want to start experimenting with the WTF-PAD subsystem of Tor, and
      this use-case provides us with a good testbed.

   3) We hope that by actually starting to use the WTF-PAD subsystem of Tor, we
      will encourage more researchers to start experimenting with it.

2. Scope of the proposal [SCOPE]

   Given the above, this proposal sets forth to use the WTF-PAD system to hide
   client-side onion service circuits against the classifiers of paper by Kwon
   et al. above.

   By client-side onion service circuits we refer to these two types of circuits:
      - Client-side introduction circuits: Circuit from client to the introduction point
      - Client-side rendezvous circuits: Circuit from client to the rendezvous point

   Service-side onion service circuits are not in scope for this proposal, and
   this is because hiding those would require more bandwidth and also more
   advanced WTF-PAD features.

   Furthermore, this proposal only aims to cloak the naive distinguishing
   features mentioned in the [KNOWN_DISTINGUISHERS] section, and can by no
   means guarantee that client-side onion service circuits are totally
   indistinguishable by other means.

   The machines specified in this proposal are meant to be lightweight and
   created for a specific purpose. This means that they can be easily extended
   with additional states to do more advanced hiding.

3. Known distinguishers against onion service circuits [KNOWN_DISTINGUISHERS]

   Over the past years it's been assumed that motivated adversaries can
   distinguish onion-service traffic from normal Tor traffic given their
   special characteristics.

   As far as we know, there has been relatively little research-level work done
   to this direction. The main article published in this area is the USENIX
   paper "Circuit Fingerprinting Attacks: Passive Deanonymization of Tor Hidden
   Services" by Kwon et al. [0]

   The above paper deals with onion service circuits in sections 3.2 and 5.1.
   It uses the following three "naive" circuit features to distinguish circuits:
      1) Circuit construction sequence
      2) Number of incoming and outgoing cells
      3) Duration of Activity ("DoA")

    All onion service circuits have particularly loud signatures to the above
    characteristics, but WTF-PAD (prop#254) gives us tools to effectively
    silence those signatures to the point where the paper's classifiers won't
    work.

4. Hiding circuit features using WTF-PAD

   According to section [KNOWN_DISTINGUISHERS] there are three circuit features
   we are attempting to hide. Here is how we plan to do this using the WTF-PAD
   system:

   1) Circuit construction sequence

      The USENIX paper uses the directions of the first 10 cells sent in a
      circuit to fingerprint them. Client-side onion service circuits have
      unique circuit construction sequences and hence they can be fingeprinted
      using just the first 10 cells.

      We use WTF-PAD to destroy this feature of onion service circuits by
      carefully sending padding cells (relay DROP cells) during circuit
      construction and making them look exactly like most general tor circuits
      up till the end of the circuit construction sequence.

   2) Number of incoming and outgoing cells

      The USENIX paper uses the amount of incoming and outgoing cells to
      distinguish circuit types. For example, client-side introduction circuits
      have the same amount of incoming and outgoing cells, whereas client-side
      rendezvous circuits have more incoming than outgoing cells.

      We use WTF-PAD to destroy this feature by changing the number of cells
      sent in introduction circuits. We leave rendezvous circuits as is, since
      the actual rendezvous traffic flow usually resembles well normal Tor
      circuits.

    3) Duration of Activity ("DoA")

      The USENIX paper uses the period of time during which circuits send and
      receive cells to distinguish circuit types. For example, client-side
      introduction circuits are really short lived, wheras service-side
      introduction circuits are very long lived. OTOH, rendezvous circuits have
      the same median lifetime as general Tor circuits which is 10 minutes.

      We use WTF-PAD to destroy this feature of client-side introduction
      circuits by setting a special WTF-PAD option, which keeps the circuits
      open for 10 minutes completely mimicking the DoA of general Tor circuits.

4.1. A dive into general circuit construction sequences [CIRCCONSTRUCTION]

   In this section we give an overview of how circuit construction looks like
   to a network or guard-level adversary. We use this knowledge to make the
   right padding machines that can make intro and rend circuits look like these
   general circuits.

   In particular, most general Tor circuits used to surf the web or download
   directory information, start with the following 6-cell relay cell sequence (cells
   surrounded in [brackets] are outgoing, the others are incoming):

     [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [BEGIN] -&gt; CONNECTED

   When this is done, the client has established a 3-hop circuit and also
   opened a stream to the other end. Usually after this comes a series of DATA
   cell that either fetches pages, establishes an SSL connection or fetches
   directory information:

     [DATA] -&gt; [DATA] -&gt; DATA -&gt; DATA

   The above stream of 10 relay cells defines the grand majority of general
   circuits that come out of Tor browser during our testing, and it's what we
   are gonna use to make introduction and rednezvous circuits blend in.

   Please note that in this section we only investigate relay cells and not
   connection-level cells like CREATE/CREATED or AUTHENTICATE/etc. that are
   used during the link-layer handshake. The rationale is that connection-level
   cells depend on the type of guard used and are not an effective fingerprint
   for a network/guard-level adversary.

5. WTF-PAD machines

   For the purposes of this proposal we will make use of four WTF-PAD machines
   as follows:

      - Client-side introduction circuit hiding machine (origin-side)
      - Client-side introduction circuit hiding machine (relay-side)

      - Client-side rendezvous circuit hiding machine (origin-side)
      - Client-side rendezvous circuit hiding machine (relay-side)

   In the following sections we will analyze these machines.

5.1. Client-side introduction circuit hiding machines [INTRO_CIRC_HIDING]

   These two machines are meant to hide client-side introduction circuits. The
   origin-side machine sits on the client and sends padding towards the
   introduction circuit, whereas the relay-side machine sits on the middle-hop
   (second hop of the circuit) and sends padding towards the client. The
   padding from the origin-side machine terminates at the middle-hop and does
   not get forwarded to the actual introduction point.

   Both of these machines only get activated for introduction circuits, and
   only after an INTRODUCE1 cell has been sent out.

   This means that before the machine gets activated our cell flow looks like this:

    [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [INTRODUCE1]

   Comparing the above with section [CIRCCONSTRUCTION], we see that the above
   cell sequence matches the one from general circuits up to the first 7 cells.

   However, in normal introduction circuits this is followed by an
   INTRODUCE_ACK and then the circuit gets teared down, which does not match
   the sequence from [CIRCCONSTRUCTION].

   Hence when our machine is used, after sending an [INTRODUCE1] cell, we also
   send a [PADDING_NEGOTIATE] cell, which gets answered by a PADDING_NEGOTIATED
   cell and an INTRODUCE_ACKED cell. This makes us match the [CIRCCONSTRUCTION]
   sequence up to the first 10 cells.

   After that, we continue sending padding from the relay-side machine so as to
   fake a directory download, or an SSL connection setup. We also want to
   continue sending padding so that the connection stays up longer to destroy
   the "Duration of Activity" fingerprint.

   To calculate the padding overhead, we see that the origin-side machine just
   sends a single [PADDING_NEGOATIATE] cell, wheras the origin-side machine
   sends a PADDING_NEGOTIATED cell and between 7 to 10 DROP cells. This means
   that the average overhead of this machine is 11 padding cells.

   In terms of WTF-PAD terminology, these machines have three states (START,
   OBF, END). They move from the START to OBF state when the first
   non-padding cell is received on the circuit, and they stay in the OBF
   state until all the padding gets depleted. The OBF state is controlled by
   a histogram which specifies the parameters described in the paragraphs
   above. After all the padding finishes, it moves to END state.

   We also set a special WTF-PAD flag which keeps the circuit open even after
   the introduction is performed. In particular, with this feature the circuit
   will stay alive for the same durations as normal web circuits before they
   expire (usually 10 minutes).

5.2. Client-side rendezvous circuit hiding machines

   The rendezvous circuit machines apply on client-side rendezvous circuits and
   only after the rendezvous point has been established (REND_ESTABLISHED has
   been received). Up to that point, the following cell sequence has been
   observed on the circuit:

    [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [ESTABLISH_REND] -&gt; REND_ESTABLISHED

   which matches the general circuit construction sequence [CIRCCONSTRUCTION]
   up to the first 6 cells. However after that, normal rendezvous circuits
   receive a RENDEZVOUS2 cell followed by a [BEGIN] and a CONNECTED, which does
   not fit the circuit construction sequence we are trying to imitate.

   Hence our machine gets activated right after REND_ESTABLISHED is received,
   and continues by sending a [PADDING_NEGOTIATE] and a [DROP] cell, before
   receiving a PADDING_NEGOTIATED and a DROP cell, effectively blending into
   the general circuit construction sequence on the first 10 cells.

   After that our machine gets deactivated, and we let the actual rendezvous
   circuit shape the traffic flow. Since rendezvous circuits usually immitate
   general circuits (their purpose is to surf the web), we can expect that they
   will look alike.

   In terms of overhead, this machine is quite light. Both sides send 2 padding
   cells, for a total of 4 padding cells.

6. Overhead analysis

   Given the parameters above, intro circuit machines have an overhead of 11
   padding cells, and rendezvous circuit machines have an overhead of 4
   cpadding ells.  . This means that for every intro and rendezvous circuit
   there will be an overhead of 15 padding cells in average, which is about
   7.5kb.

   In the PrivCount paper [1] we learn that the Tor network sees about 12
   million successful descriptor fetches per day. We can use this figure to
   assume that the Tor network also sees about 12 million intro and rendezvous
   circuits per day. Given the 7.5kb overhead of each of these circuits, we get
   that our padding machines infer an additional 94GB overhead per day on the
   network, which is about 3.9GB per hour.

   XXX Isn't this kinda intense????? Using the graphs from metrics we see that
       the Tor network has total capacity of 300 Gbit/s which is about 135000GB per
       hour, so 3.9GB per hour is not that much, but still...

7. Discussion

7.1. Alternative approaches

   These machines try to hide onion service client-side circuits by obfuscating
   their looks. This is a reasonable approach, but if the resulting circuits
   look unlike any other Tor circuits, they would still be fingerprintable just
   by that fact.

   Another approach we could take is make normal client circuits look like
   onion service circuits, or just make normal clients establish fake onion
   service circuits periodically. The hope here is that the adversary won't be
   able to distinguish fake onion service circuits from real ones. This
   approach has not been taken yet, mainly because it requires additional
   WTF-PAD features and poses greater overhead risks.

7.2. Future work

   As discussed in [SCOPE], this proposal only aims to hide some very specific
   features of client-side onion service circuits. There is lots of work to be
   done here to see what other features can be used to distinguish such
   circuits, and also what other classifiers can be built using deep learning
   and whatnot.

---

   [0]: https://www.usenix.org/node/190967
        https://blog.torproject.org/technical-summary-usenix-fingerprinting-paper

   [1]: "Understanding Tor Usage with Privacy-Preserving Measurement"
        by Akshaya Mani, T Wilson-Brown, Rob Jansen, Aaron Johnson, and Micah Sherr
        In Proceedings of the Internet Measurement Conference 2018 (IMC 2018).
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190528124333</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-28 12:43:33-0400</timestampReceived><subject>[tor-dev] Proposal 304: Extending SOCKS5 Onion Service Error Codes</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]



["304-socks5-extending-hs-error-codes.txt" (text/plain)]

Filename: 304-socks5-extending-hs-error-codes.txt
Title: Extending SOCKS5 Onion Service Error Codes
Author: David Goulet, George Kadianakis
Created: 22-May-2019
Status: Open

Note: We are extending SOCKS5 here but in terms, when Tor Browser supports
      HTTPCONNECT, we should not do that anymore.

0. Abstract

   We propose extending the SOCKS5 protocol to allow returning more meaningful
   response failure onion service codes back to the client.

   This is inspired by proposal 229 [PROP229] minus the new authentication
   method.

1. Introduction

   The motivation behind this proposal is because we need a synchronous way to
   return a reason on why the SOCKS5 connection failed.

   The alternative is to use a control port event but then the caller needs to
   match the SOCKS failure to the control event. And tor provides no guarantee
   that a control event will be emitted before the SOCKS failure or vice
   versa.

   With this proposal, the client can get the reason on why the onion service
   connection failed with the SOCKS5 returned error code.

2. Proposal

2.1. New SocksPort Flag

   In order to have backward compatibility with third party applications that
   do not support the new proposed SOCKS5 error code, we propose a new
   SocksPort flag that needs to be set in the tor configuration file in order
   for those code to be sent back.

   The new SocksPort flag is:

      "ExtendedErrors" -- Tor will report new SOCKS5 error code detailed below
                          in section 2.2 (once merged, they will end up in
                          socks-extension.txt).

   It is possible that more codes will be added in the future so an
   application using this flag should possibly expect unknown codes to be
   returned.

2.2. Onion Service Extended SOCKS5 Error Code

   We introduce the following additional SOCKS5 reply codes to be sent in the
   REP field of a SOCKS5 message iff the "ExtendedErrors" on the SocksPort is
   set (see section 2.1 above).

   The SOCKS5 specification [RFC1928] defines a range of code that are
   "unassigned" so we'll be using those on the far end of the range in order
   to inform the client of onion service failures:

   Where:

    * X'F0' Onion Service Descriptor Can Not be Found

      The requested onion service descriptor can't be found on the hashring
      and thus not reachable by the client.

    * X'F1' Onion Service Descriptor Is Invalid

      The requested onion service descriptor can't be parsed or signature
      validation failed.

    * X'F2' Onion Service Introduction Failed

      Client failed to introduce to the service meaning the descriptor was
      found but the service is not anymore at the introduction points. The
      service has likely changed its descriptor or is not running.

    * X'F3' Onion Service Rendezvous Failed

      Client failed to rendezvous with the service which means that the client
      is unable to finalize the connection.

    * X'F4' Onion Service Missing Client Authorization

      Tor was able to download the requested onion service descriptor but is
      unable to decrypt its content because it is missing client authorization
      information for it.

    * X'F5' Onion Service Wrong Client Authorization

      Tor was able to download the requested onion service descriptor but is
      unable to decrypt its content using the client authorization information
      it has. This means the client access were revoked.

3. Compatibility

   No new field or extension has been added. Only new code values from the
   unassigned range are being used. We expect these to not be a problem for
   backward compatibility.

   These codes are only sent back if the new proposed SocksPort flag,
   "ExtendedErrors", is set and making it easier for backward and foward
   compatibility.

References:

[PROP229] https://gitweb.torproject.org/torspec.git/tree/proposals/229-further-socks5-extensions.txt

[RFC1928] https://www.ietf.org/rfc/rfc1928.txt

["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190517125112</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-05-17 12:51:12-0400</timestampReceived><subject>[tor-dev] Network team: New status page for 0.4.1; help needed on ticket triage</subject><body>

Hi!

This mail is mainly for the network-team folks, but I'm sending it to
tor-dev anyway in case it's helpful to anybody else.

I've made a new page for our 0.4.1 status, based on Teor's previous
040 status page.  Here it is:

https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases/041Status

Note that this time I'm using two different keywords: 041-must and
041-should. The difference here is that 041 stuff should be things
that would really block a release candidate, whereas 041-should stuff
is stuff that we might in theory release without fixing. (It might
annoy our users or violate our best practices, so we _should_ try to
fix it, at least.)

At the bottom of the page are all the tickets in the milestone that
are *not* marked 041-must or 041-should.  Some of these are things we
could still fix anyway in 041; many will be removed. Let's triage
these together!

As discussed at the last meeting, we are currently in feature freeze
for 0.4.1.  Other than tickets that are marked "postfreeze-ok", we're
planning not to  take any more features in Tor 0.4.1.  (Network team
folks, please remember to spend your time on 041-must and 041-should
tickets, and on Sponsor 19 tickets. If we make enough progress on
these, we can open up 0.4.2 for merging early.)

happy hacking,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190516133612</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-05-16 13:36:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>

On Thu, 16 May 2019 at 11:20, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;     3) Duration of Activity ("DoA")
&gt;
&gt;       The USENIX paper uses the period of time during which circuits send and
&gt;       receive cells to distinguish circuit types. For example, client-side
&gt;       introduction circuits are really short lived, wheras service-side
&gt;       introduction circuits are very long lived. OTOH, rendezvous circuits have
&gt;       the same median lifetime as general Tor circuits which is 10 minutes.
&gt;
&gt;       We use WTF-PAD to destroy this feature of client-side introduction
&gt;       circuits by setting a special WTF-PAD option, which keeps the circuits
&gt;       open for 10 minutes completely mimicking the DoA of general Tor circuits.

10 minutes exactly; or a median of 10 minutes?  Wouldn't 10 minutes
exactly be a near-perfect distinguisher? And if it's a median of 10
minutes, do we know if it follows a normal distribution/what is the
shape of the distribution to mimic?

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190530162641</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-05-30 16:26:41-0400</timestampReceived><subject>Re: [tor-dev] Merger and Mainline Handovers</subject><body>

On Wed, Apr 17, 2019 at 5:13 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; When does 0.4.0 stop being mainline?
&gt;
&gt; It looks like people aren't merging backports to 0.4.0 any more.
&gt; That's probably a good idea: we should minimise release candidate changes.
&gt;
&gt; When should I start doing 0.4.0 merges as part of the backports?

Just realized I hadn't answered this.  Here's my suggestion, and
please let me know if you disagree: I think that once we declare that
0.4.1 is stable, 0.4.0 merges count as backports. How does that sound?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190520143502</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-20 14:35:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>

Tom Ritter &lt;tom@ritter.vg&gt; writes:

&gt; On Thu, 16 May 2019 at 11:20, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt;     3) Duration of Activity ("DoA")
&gt;&gt;
&gt;&gt;       The USENIX paper uses the period of time during which circuits send and
&gt;&gt;       receive cells to distinguish circuit types. For example, client-side
&gt;&gt;       introduction circuits are really short lived, wheras service-side
&gt;&gt;       introduction circuits are very long lived. OTOH, rendezvous circuits have
&gt;&gt;       the same median lifetime as general Tor circuits which is 10 minutes.
&gt;&gt;
&gt;&gt;       We use WTF-PAD to destroy this feature of client-side introduction
&gt;&gt;       circuits by setting a special WTF-PAD option, which keeps the circuits
&gt;&gt;       open for 10 minutes completely mimicking the DoA of general Tor circuits.
&gt;
&gt; 10 minutes exactly; or a median of 10 minutes?  Wouldn't 10 minutes
&gt; exactly be a near-perfect distinguisher? And if it's a median of 10
&gt; minutes, do we know if it follows a normal distribution/what is the
&gt; shape of the distribution to mimic?
&gt;

Oops, you are right, Tom.

It's not 10 minutes exactly. The right thing to say is that it's a median
of 10 minutes, altho I'm not entirely sure of the exact distribution.

These circuits basically now follow the MaxCircuitDirtiness
configuration like general circuits, and it gets orchestrated by
circuit_expire_old_circuits_clientside(). Not sure if it's in a spec
somewhere.

I will update the spec soon with the fix. Thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190521035755</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-21 03:57:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>


&gt; On 21 May 2019, at 00:35, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Tom Ritter &lt;tom@ritter.vg&gt; writes:
&gt; 
&gt;&gt;&gt; On Thu, 16 May 2019 at 11:20, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt;&gt;&gt;    3) Duration of Activity ("DoA")
&gt;&gt;&gt; 
&gt;&gt;&gt;      The USENIX paper uses the period of time during which circuits send and
&gt;&gt;&gt;      receive cells to distinguish circuit types. For example, client-side
&gt;&gt;&gt;      introduction circuits are really short lived, wheras service-side
&gt;&gt;&gt;      introduction circuits are very long lived. OTOH, rendezvous circuits have
&gt;&gt;&gt;      the same median lifetime as general Tor circuits which is 10 minutes.
&gt;&gt;&gt; 
&gt;&gt;&gt;      We use WTF-PAD to destroy this feature of client-side introduction
&gt;&gt;&gt;      circuits by setting a special WTF-PAD option, which keeps the circuits
&gt;&gt;&gt;      open for 10 minutes completely mimicking the DoA of general Tor circuits.
&gt;&gt; 
&gt;&gt; 10 minutes exactly; or a median of 10 minutes?  Wouldn't 10 minutes
&gt;&gt; exactly be a near-perfect distinguisher? And if it's a median of 10
&gt;&gt; minutes, do we know if it follows a normal distribution/what is the
&gt;&gt; shape of the distribution to mimic?
&gt;&gt; 
&gt; 
&gt; Oops, you are right, Tom.
&gt; 
&gt; It's not 10 minutes exactly. The right thing to say is that it's a median
&gt; of 10 minutes, altho I'm not entirely sure of the exact distribution.
&gt; 
&gt; These circuits basically now follow the MaxCircuitDirtiness
&gt; configuration like general circuits, and it gets orchestrated by
&gt; circuit_expire_old_circuits_clientside(). Not sure if it's in a spec
&gt; somewhere.
&gt; 
&gt; I will update the spec soon with the fix. Thanks!

If I understand correctly, Tor's circuits close about 10 minutes after
the last time they handled traffic.

So that's a *minimum* of 10 minutes. And probably a *median* of
slightly more than 10 minutes, if the user is web browsing.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190521131448</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-21 13:14:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>

[Attachment #2 (multipart/signed)]


On 16 May (14:20:05), George Kadianakis wrote:

Hello!

&gt; 4.1. A dive into general circuit construction sequences [CIRCCONSTRUCTION]
&gt; 
&gt;    In this section we give an overview of how circuit construction looks like
&gt;    to a network or guard-level adversary. We use this knowledge to make the
&gt;    right padding machines that can make intro and rend circuits look like these
&gt;    general circuits.
&gt; 
&gt;    In particular, most general Tor circuits used to surf the web or download
&gt;    directory information, start with the following 6-cell relay cell sequence (cells
&gt;    surrounded in [brackets] are outgoing, the others are incoming):
&gt; 
&gt;      [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [BEGIN] -&gt; CONNECTED
&gt; 
&gt;    When this is done, the client has established a 3-hop circuit and also
&gt;    opened a stream to the other end. Usually after this comes a series of DATA
&gt;    cell that either fetches pages, establishes an SSL connection or fetches
&gt;    directory information:
&gt; 
&gt;      [DATA] -&gt; [DATA] -&gt; DATA -&gt; DATA
&gt; 
&gt;    The above stream of 10 relay cells defines the grand majority of general
&gt;    circuits that come out of Tor browser during our testing, and it's what we
&gt;    are gonna use to make introduction and rednezvous circuits blend in.

Considering "either fetches pages,..." is in the description, I'm confused how
only 2 data cells is the grand majority?

A simple "wget torproject.org" gives me an index.html of 16KB meaning at least
32 DATA cells. Even a directory fetch can't only be 2 data cells... ?

Is this that "there will always be a minimum of 2 data cell both ways" and
thus you want to match that for HS client circuits and then send bunch of
padding to match whatever comes next on a general circuit but "at least we'll
have 10 cells like any other circuits" ?

&gt; 5.1. Client-side introduction circuit hiding machines [INTRO_CIRC_HIDING]
&gt; 
&gt;    These two machines are meant to hide client-side introduction circuits. The
&gt;    origin-side machine sits on the client and sends padding towards the
&gt;    introduction circuit, whereas the relay-side machine sits on the middle-hop
&gt;    (second hop of the circuit) and sends padding towards the client. The
&gt;    padding from the origin-side machine terminates at the middle-hop and does
&gt;    not get forwarded to the actual introduction point.
&gt; 
&gt;    Both of these machines only get activated for introduction circuits, and
&gt;    only after an INTRODUCE1 cell has been sent out.
&gt; 
&gt;    This means that before the machine gets activated our cell flow looks like this:
&gt; 
&gt;     [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [INTRODUCE1]
&gt; 
&gt;    Comparing the above with section [CIRCCONSTRUCTION], we see that the above
&gt;    cell sequence matches the one from general circuits up to the first 7 cells.
&gt; 
&gt;    However, in normal introduction circuits this is followed by an
&gt;    INTRODUCE_ACK and then the circuit gets teared down, which does not match
&gt;    the sequence from [CIRCCONSTRUCTION].
&gt; 
&gt;    Hence when our machine is used, after sending an [INTRODUCE1] cell, we also
&gt;    send a [PADDING_NEGOTIATE] cell, which gets answered by a PADDING_NEGOTIATED
&gt;    cell and an INTRODUCE_ACKED cell. This makes us match the [CIRCCONSTRUCTION]
&gt;    sequence up to the first 10 cells.
&gt; 
&gt;    After that, we continue sending padding from the relay-side machine so as to
&gt;    fake a directory download, or an SSL connection setup. We also want to
&gt;    continue sending padding so that the connection stays up longer to destroy
&gt;    the "Duration of Activity" fingerprint.

I've looked at the implementation quickly and these DROP cells aren't
accounted for in our circuit flow control which means that there will be a
difference between a "real" DATA circuit and a circuit being sent PADDING in
order to look like the former. And that will be the flow control cell(s)
(SENDME) coming back from the end point that is receiving the data.

In other words, one circuit (the padded one) will have only a long stream of
cells going in one direction and the second circuit (with legit data) will
have that long stream but now and then a cell coming back down the circuit.

I believe this is quite the distinguisher between any circuit seeing much
padding and one that doesn't? :S

&gt; 
&gt;    To calculate the padding overhead, we see that the origin-side machine just
&gt;    sends a single [PADDING_NEGOATIATE] cell, wheras the origin-side machine

Typo here "PADDING_NEGOATIATE".

&gt;    sends a PADDING_NEGOTIATED cell and between 7 to 10 DROP cells. This means
&gt;    that the average overhead of this machine is 11 padding cells.
&gt; 
&gt;    In terms of WTF-PAD terminology, these machines have three states (START,
&gt;    OBF, END). They move from the START to OBF state when the first
&gt;    non-padding cell is received on the circuit, and they stay in the OBF
&gt;    state until all the padding gets depleted. The OBF state is controlled by
&gt;    a histogram which specifies the parameters described in the paragraphs
&gt;    above. After all the padding finishes, it moves to END state.
&gt; 
&gt;    We also set a special WTF-PAD flag which keeps the circuit open even after
&gt;    the introduction is performed. In particular, with this feature the circuit
&gt;    will stay alive for the same durations as normal web circuits before they
&gt;    expire (usually 10 minutes).

I would make sure that the implentation here flags the circuit "Unusable"
after an introduction since if a client just repicks it to introduce again
(let say a second SOCKS connection with a different user/pass), then the intro
point will immediately tear it down rendering this "keep open" feature a bit
pointless :(.

Cheers!
David

-- 
RvcA5t4gf8ZVGWkeAH8q2YX6s5pRuadzbdJisXSBhfA=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190522185706</emailId><senderName>Mike Perry</senderName><senderEmail>mikeperry@torproject.org</senderEmail><timestampReceived>2019-05-22 18:57:06-0400</timestampReceived><subject>Re: [tor-dev] Proposal 303: When and how to remove support for protocol versions</subject><body>

[Attachment #2 (multipart/signed)]


Nick Mathewson:
&gt; Filename: 303-protover-removal-policy.txt
&gt; Title: When and how to remove support for protocol versions
&gt; Author: Nick Mathewson
&gt; Created: 21 May 2019
&gt; Status: Draft
&gt; 
&gt; 1. Background
&gt; 
&gt;    With proposal 264, added support for "subprotocol versions" -- a
&gt;    means to declare which features are required for participation in the
&gt;    Tor network.  We also created a mechanism (refined later in proposal
&gt;    297) for telling Tor clients and relays that they cannot participate
&gt;    effectively in the Tor network, and they need to shut down.
&gt; 
&gt;    In this document, we describe a policy according to which these
&gt;    decisions should be made in practice.
&gt; 
&gt; 2. Recommending features (for clients and relays)
&gt; 
&gt;    A subprotocol version SHOULD become recommended soon after all
&gt;    release series that did not provide it become unsupported (within a
&gt;    month or so).
&gt; 
&gt;    For example, the current oldest LTS release series is 0.2.9; when it
&gt;    becomes unsupported in 2020, the oldest supported release series will
&gt;    be 0.3.5.  Suppose that 0.2.9 supports a subprotocol Cupcake=1, and
&gt;    that all stable 0.3.5.x versions support Cupcake=1-3.  Around one
&gt;    month after the end of 0.2.9 support, Cupcake=3 should become a
&gt;    _recommended_ protocol for clients and relays.
&gt; 
&gt;    Additionally, a feature can become _recommended_ because of security
&gt;    reasons.  If we believe that it is a terrible idea to run an old
&gt;    protocol, we can make it _recommended_ for relays or clients or both.
&gt;    We should not do this lightly, since it will be annoying.

To be clear, "_recommended_" and "_required_" terms here are from
Proposal #264, Section 4, right? Aka the consensus lines?

These only affect WARN-vs-exit behavior by clients and relays that lack
support, right? Clients and relays will still *negotiate* and use
protocol versions that they both have, even if they are not listed as
either recommended or required?

Are there cases where they don't/won't negotiate to use a new protover
field, such as for anonymity fragmentation reasons? How do we handle
those?

(I am trying to gauge the impact of this proposal on our ability to roll
out new features that clients can use right away vs ensure that old
clients and relays can still work. It seems to focus on the latter,
and I want to get a handle on at what expense).
 
&gt; 3. Requiring features (for relays)
&gt; 
&gt;    We regularly update the directory authorities to require relays to
&gt;    run certain versions of Tor or later.  We generally do this after a
&gt;    short outreach campaign to get as many relays as possible to upgrade.
&gt; 
&gt;    We MAY make a feature required for relays one month after every
&gt;    version without it is obsolete and unsupported, though it is better
&gt;    to wait three months if possible.
&gt; 
&gt;    We SHOULD make a feature required for relays within 12 months after
&gt;    every version without it is obsolete and unsupported.

As a cultural signaling thing, I think it is better to say to relay
operators, "keep your relay's operating system and its Tor up to date,
or please don't run it anymore (aka we'll shut it down for you)."

I think its bad culturally if we signal to people that we need relays so
badly that it doesn't matter if they are unpatched, or if the OS is
unpatched, or if they accidentally publish their relay and ssh keys to a
public github repo. (Relays running on a system that hasn't received any
patches or security updates in 12 months is the administrator diligence
equivalent of publishing admin keys to public github, IMO, if not its
actual functional equivalent).

Not only does it encourage a sloppy mindset about paying attention to
relay systems, it also slows down our development of new protocols, and
impedes major network upgrades.

(As an aside, I would like to take a hard look at the LTS series, and
brainstorm how much it would cost us to provide official, reproducibly
built repos for every distribution whose LTS policies we find expensive
and cumbersome to support.. Or at least do some analysis of which changes
have been or will be extremely expensive or impossible to roll out due
to being blocked on needing to maintain the LTS).
 
&gt; 4. Requiring features (for clients)
&gt; 
&gt;    Clients take the longest time to update, and are often the least
&gt;    able to fetch upgrades. Because of this, we should be very careful
&gt;    about making subprotocol versions required on clients, and should
&gt;    only do so for fairly compelling reasons.

Is this true? From our Tor Browser metrics (which could use some kind of
totaling), it looks like most Tor Browser users upgrade pretty quickly:
https://metrics.torproject.org/webstats-tb.html

What kinds of clients don't upgrade? I got the impression that it was
mostly things like old botnet cruft that didn't..
 
&gt;    We SHOULD NOT make a feature required for clients until it has been
&gt;    _recommended_ for clients for at first 9 months.
&gt; 
&gt;    We SHOULD make a feature required for clients if it has been
&gt;    _recommended_ for clients for at least 18 months.

I guess since we're talking about causing clients to exit() in both
these cases, it might be OK to be conservative here...

But again, I am really worried about future network scalability and
performance upgrades getting stalled because we don't want to change
things that fragment client anonymity.. Does that mean that for some
kinds of new features, we can't flip a switch because we're trying to
give clients another 1.5 years *past the EOL of the last LTS* to
upgrade?

I would enjoy a session in Stockholm that walked through how we would
use this proposal and proposal 264 to roll out a handful of involved
changes, such as walking onions, onion service DoS protections, conflux,
explicit congestion control signaling, full datagram Tor, etc. 

It would be awesome if such a session could result in a proposal like
this one, but the flip side: explaining how to use protovers to roll out
involved features so that clients adopt them quickly and safely (and
what sorts of changes can be done quickly, and what sorts of changes
require waiting 4 years for LTS to EOL + 1.5 more years for clients to
update so as not to fragment anonymity).


-- 
Mike Perry

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190705141317</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2019-07-05 14:13:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 303: When and how to remove support for protocol versions</subject><body>

[Attachment #2 (text/plain)]

Hello,

I am digging this out to make some kind of announcement

I am actually working over those problems, and I am developing a new approach to \
solve these (still early research state, but with really encouraging results). \
Basically, I've developing a software architecture which will let you deploy major \
features, hotfixes or rollbacks in a snap of fingers (to clients and relays), without \
needing any relay to restart and without perturbing their ongoing connections. The \
good news is that, so far, the measured performance impact of this techno is somewhat \
light.

I guess it might sound a bit mystical. So if you're interested to find out more, I \
will be presenting my ongoing research at HotPETs in Stockolm \
(https://petsymposium.org/2019/program.php#hotpets_program), the talk is "Flexible \
Anonymous Network".

Oh, and there is even more promise in this technology than just addressing the \
'forward compatibility in the design and backward compatibility in the \
implementation' headache :) But enough of teasing, see you in Stockolm!

Best regards,

Florentin

On 5/23/19 8:49 PM, David Goulet wrote:

On 22 May (18:57:06), Mike Perry wrote:


Nick Mathewson:


Filename: 303-protover-removal-policy.txt
Title: When and how to remove support for protocol versions
Author: Nick Mathewson
Created: 21 May 2019
Status: Draft

1. Background

   With proposal 264, added support for "subprotocol versions" -- a
   means to declare which features are required for participation in the
   Tor network.  We also created a mechanism (refined later in proposal
   297) for telling Tor clients and relays that they cannot participate
   effectively in the Tor network, and they need to shut down.

   In this document, we describe a policy according to which these
   decisions should be made in practice.

2. Recommending features (for clients and relays)

   A subprotocol version SHOULD become recommended soon after all
   release series that did not provide it become unsupported (within a
   month or so).

   For example, the current oldest LTS release series is 0.2.9; when it
   becomes unsupported in 2020, the oldest supported release series will
   be 0.3.5.  Suppose that 0.2.9 supports a subprotocol Cupcake=1, and
   that all stable 0.3.5.x versions support Cupcake=1-3.  Around one
   month after the end of 0.2.9 support, Cupcake=3 should become a
   _recommended_ protocol for clients and relays.

   Additionally, a feature can become _recommended_ because of security
   reasons.  If we believe that it is a terrible idea to run an old
   protocol, we can make it _recommended_ for relays or clients or both.
   We should not do this lightly, since it will be annoying.



To be clear, "_recommended_" and "_required_" terms here are from
Proposal #264, Section 4, right? Aka the consensus lines?

These only affect WARN-vs-exit behavior by clients and relays that lack
support, right? Clients and relays will still *negotiate* and use
protocol versions that they both have, even if they are not listed as
either recommended or required?



Afaiu, you can only negotiate what you know which is the protover list you
support (the one advertised by relays).

For instance, if "Cupcake=1-3" is what you support as a client but the
recommended is "Cupcake=2-3", you can still do "1" but you will be warned.

If _required_, let say "Cupcake=3" but the client is "Cupcake=1-2", then the
client does _not_ join the network. If _required_ is "Cupcake=1-3" for both
the relay and client, then yes they can use version "1" instead of "3" if I'm
not mistaken else "Cupcake=3" should be used.




Are there cases where they don't/won't negotiate to use a new protover
field, such as for anonymity fragmentation reasons? How do we handle
those?



As an example for the prop289 (authenticated SENDMEs), we handle that with a
consensus parameters that flip knobs at once to avoid partitioning problem as
much as possible. _And_ then the protover is changed changed into the
_recommended_ or _required_ field depending on where we are.




(I am trying to gauge the impact of this proposal on our ability to roll
out new features that clients can use right away vs ensure that old
clients and relays can still work. It seems to focus on the latter,
and I want to get a handle on at what expense).



3. Requiring features (for relays)

   We regularly update the directory authorities to require relays to
   run certain versions of Tor or later.  We generally do this after a
   short outreach campaign to get as many relays as possible to upgrade.

   We MAY make a feature required for relays one month after every
   version without it is obsolete and unsupported, though it is better
   to wait three months if possible.

   We SHOULD make a feature required for relays within 12 months after
   every version without it is obsolete and unsupported.



As a cultural signaling thing, I think it is better to say to relay
operators, "keep your relay's operating system and its Tor up to date,
or please don't run it anymore (aka we'll shut it down for you)."

I think its bad culturally if we signal to people that we need relays so
badly that it doesn't matter if they are unpatched, or if the OS is
unpatched, or if they accidentally publish their relay and ssh keys to a
public github repo. (Relays running on a system that hasn't received any
patches or security updates in 12 months is the administrator diligence
equivalent of publishing admin keys to public github, IMO, if not its
actual functional equivalent).

Not only does it encourage a sloppy mindset about paying attention to
relay systems, it also slows down our development of new protocols, and
impedes major network upgrades.



I'm very much agreeing with this. We do "force-ask" the directory authorities
to follow the latest stable up to at worst 2 stable behind. There are reasons
for that, maintainenance but also security.

Relays have to be sharp at upgrading... A relay that is not, that we end up
excluding from the consensus because the version is too dangerous (remember
heartbleed), can be considered in my opinion more a liability then a useful
piece.

Having capacity in my opinion is as important as having relays that are up to
date. Every release we rollout very important features that if not deployed
network wide, we don't get the benefit of them until years to come (basically
when the previous LTS is EOL...).

And that forces us into a position of backporting sometimes big block of codes
(DoS subsystem is one example).

Still today, there are still 1000+ relays (on 0.2.9) that can't be used for
Onion Service v3... It is a 1/6th of the network and we've released relay
support 2 years ago... And we have _specific_ code to avoid picking those
relays so all these edge case also accumulates in the code over time.




(As an aside, I would like to take a hard look at the LTS series, and
brainstorm how much it would cost us to provide official, reproducibly
built repos for every distribution whose LTS policies we find expensive
and cumbersome to support.. Or at least do some analysis of which changes
have been or will be extremely expensive or impossible to roll out due
to being blocked on needing to maintain the LTS).



If we could convince Debian to consider an EOL version a "security issue" and
thus accept to pull in the new next supported stable in their stable
package...... that would be grand because then even Debian LTS relay operator
could still benefit from getting newer versions, improving the network and
thus the security of all on Tor.

I know I know, challenges and sometimes a bad idea but with this proposal, it
might be a good time to also take a hard look at how things are and change
paradigm even if it means a painful transition.






4. Requiring features (for clients)

   Clients take the longest time to update, and are often the least
   able to fetch upgrades. Because of this, we should be very careful
   about making subprotocol versions required on clients, and should
   only do so for fairly compelling reasons.



Is this true? From our Tor Browser metrics (which could use some kind of
totaling), it looks like most Tor Browser users upgrade pretty quickly:
https://metrics.torproject.org/webstats-tb.html

What kinds of clients don't upgrade? I got the impression that it was
mostly things like old botnet cruft that didn't..



My guts feeling is that relays actually take longer...






   We SHOULD NOT make a feature required for clients until it has been
   _recommended_ for clients for at first 9 months.

   We SHOULD make a feature required for clients if it has been
   _recommended_ for clients for at least 18 months.



I guess since we're talking about causing clients to exit() in both
these cases, it might be OK to be conservative here...



Honestly, a client exit()ing is indeed a pain point but we get to that
situation because it is not safe anymore for the client to join the network.
I find that less worrying than relays starting to exit() all the sudden
because we've pushed a required protover, we end up with 3000 dead relays...

I would be for reducing those values much more. As an example, again with
prop289 (authenticated sendmes), we are talking a deployment plan that spans
almost 5 years...

We can't publish FlowCtrl=1 protover until 035 is EOL which is in 3 years and
then once we have that, we have another 9 months to go for _recommended_ and
then 18 months before we can force it in required.

This means 4.5 years of deployment for a _security_ feature that is overall
helping the network and specific attacks... I think we can do much better and
we should.

And maybe that comes with laxing our backport policy or rethinking our LTS?
I'm not entirely sure...

Historically, we do have a quick transition when a version is EOL and the
package follow, see the drops here:

https://metrics.torproject.org/versions.html?start=2018-02-22&amp;end=2019-05-23

As long as package follow, usually the majority of relays do upgrade to them
in matter of some months. Which re-enforces my point about Debian + packaging
;).




But again, I am really worried about future network scalability and
performance upgrades getting stalled because we don't want to change
things that fragment client anonymity.. Does that mean that for some
kinds of new features, we can't flip a switch because we're trying to
give clients another 1.5 years *past the EOL of the last LTS* to
upgrade?



As more examples here, we were forced to backport the DoS subsystem down many
versions, that was some work!... Testing all relay versions, I had to
sometimes wait weeks before my relay could get the Guard flag again... The
pain was real at that time.

If we talk in terms of tor scaling, we'll start doing pretty big drastic
changes to the protocol or even just how tor the binary operates. If every
step takes _years_, we'll fail this "tor game" in my opinion over time.

I know pastly has some results about how different cell scheduling (KIST,
KISTLite, Vanilla) between relays is actually badly affecting the network...
and there is NO way to change that quickly until all our EOL dies out and
transition...

I'm almost at the point of proposing "remote relay upgrades" like Tor Browser
does ... :P. I know, hard, but at least we would be extremely agile on going
forward *but* also rolling back anything that f*** the network (and it
happened before, we had to rollout parameters). Tor Browser did insane work
there so we could cherry-pick on that imo.



I would enjoy a session in Stockholm that walked through how we would
use this proposal and proposal 264 to roll out a handful of involved
changes, such as walking onions, onion service DoS protections, conflux,
explicit congestion control signaling, full datagram Tor, etc.



+1




It would be awesome if such a session could result in a proposal like
this one, but the flip side: explaining how to use protovers to roll out
involved features so that clients adopt them quickly and safely (and
what sorts of changes can be done quickly, and what sorts of changes
require waiting 4 years for LTS to EOL + 1.5 more years for clients to
update so as not to fragment anonymity).



Yes, something concrete, something that after Stockholm we can be happy with
and apply it. Not just brainstorm and then this whole thing dies off.

But yes overall, I'm in favor that we think in terms of reducing the waiting
time for anything to be rolled out on the network instead of waiting years for
one single feature to be fully deployed. Some comes from us to change a bit
our policy but also a lot comes from our relay operator to be good operators
and upgrade to our stables much faster.

Cheers!
David





_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org&lt;mailto:tor-dev@lists.torproject.org&gt;
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #3 (text/html)]

&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body text="#000000" bgcolor="#FFFFFF"&gt;
&lt;p&gt;Hello,&lt;/p&gt;
&lt;p&gt;I am digging this out to make some kind of announcement&lt;/p&gt;
&lt;p&gt;I am actually working over those problems, and I am developing a new approach to \
solve these (still early research state, but with really encouraging results). \
Basically, I've developing a software architecture which will let you deploy major \
features, hotfixes  or rollbacks in a snap of fingers (to clients and relays), \
without needing any relay to restart and without perturbing their ongoing \
connections. The good news is that, so far, the measured performance impact of this \
techno is somewhat light.&lt;/p&gt; &lt;p&gt;I guess it might sound a bit mystical. So if you're \
interested to find out more, I will be presenting my ongoing research at HotPETs in \
Stockolm (&lt;a class="moz-txt-link-freetext" \
href="https://petsymposium.org/2019/program.php#hotpets_program"&gt;https://petsymposium.org/2019/program.php#hotpets_program&lt;/a&gt;),
  the talk is "Flexible Anonymous Network".&lt;/p&gt;
&lt;p&gt;Oh, and there is even more promise in this technology than just addressing the \
'forward compatibility in the design and backward compatibility in the \
implementation' headache :) But enough of teasing, see you in Stockolm!&lt;br&gt; &lt;/p&gt;
&lt;p&gt;Best regards,&lt;/p&gt;
&lt;p&gt;Florentin&lt;br&gt;
&lt;/p&gt;
&lt;div class="moz-cite-prefix"&gt;On 5/23/19 8:49 PM, David Goulet wrote:&lt;br&gt;
&lt;/div&gt;
&lt;blockquote type="cite" cite="mid:20190523184922.GA23905@raoul"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;On 22 May (18:57:06), Mike Perry wrote:
&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;Nick Mathewson:
&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;Filename: 303-protover-removal-policy.txt
Title: When and how to remove support for protocol versions
Author: Nick Mathewson
Created: 21 May 2019
Status: Draft

1. Background

   With proposal 264, added support for "subprotocol versions" -- a
   means to declare which features are required for participation in the
   Tor network.  We also created a mechanism (refined later in proposal
   297) for telling Tor clients and relays that they cannot participate
   effectively in the Tor network, and they need to shut down.

   In this document, we describe a policy according to which these
   decisions should be made in practice.

2. Recommending features (for clients and relays)

   A subprotocol version SHOULD become recommended soon after all
   release series that did not provide it become unsupported (within a
   month or so).

   For example, the current oldest LTS release series is 0.2.9; when it
   becomes unsupported in 2020, the oldest supported release series will
   be 0.3.5.  Suppose that 0.2.9 supports a subprotocol Cupcake=1, and
   that all stable 0.3.5.x versions support Cupcake=1-3.  Around one
   month after the end of 0.2.9 support, Cupcake=3 should become a
   _recommended_ protocol for clients and relays.

   Additionally, a feature can become _recommended_ because of security
   reasons.  If we believe that it is a terrible idea to run an old
   protocol, we can make it _recommended_ for relays or clients or both.
   We should not do this lightly, since it will be annoying.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
To be clear, "_recommended_" and "_required_" terms here are from
Proposal #264, Section 4, right? Aka the consensus lines?

These only affect WARN-vs-exit behavior by clients and relays that lack
support, right? Clients and relays will still *negotiate* and use
protocol versions that they both have, even if they are not listed as
either recommended or required?
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
Afaiu, you can only negotiate what you know which is the protover list you
support (the one advertised by relays).

For instance, if "Cupcake=1-3" is what you support as a client but the
recommended is "Cupcake=2-3", you can still do "1" but you will \
be warned.

If _required_, let say "Cupcake=3" but the client is \
"Cupcake=1-2", then the client does _not_ join the network. If _required_ \
is "Cupcake=1-3" for both the relay and client, then yes they can use \
version "1" instead of "3" if I'm not mistaken else \
"Cupcake=3" should be used.

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
Are there cases where they don't/won't negotiate to use a new protover
field, such as for anonymity fragmentation reasons? How do we handle
those?
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
As an example for the prop289 (authenticated SENDMEs), we handle that with a
consensus parameters that flip knobs at once to avoid partitioning problem as
much as possible. _And_ then the protover is changed changed into the
_recommended_ or _required_ field depending on where we are.

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
(I am trying to gauge the impact of this proposal on our ability to roll
out new features that clients can use right away vs ensure that old
clients and relays can still work. It seems to focus on the latter,
and I want to get a handle on at what expense).
 
&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;3. Requiring features (for relays)

   We regularly update the directory authorities to require relays to
   run certain versions of Tor or later.  We generally do this after a
   short outreach campaign to get as many relays as possible to upgrade.

   We MAY make a feature required for relays one month after every
   version without it is obsolete and unsupported, though it is better
   to wait three months if possible.

   We SHOULD make a feature required for relays within 12 months after
   every version without it is obsolete and unsupported.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
As a cultural signaling thing, I think it is better to say to relay
operators, "keep your relay's operating system and its Tor up to date,
or please don't run it anymore (aka we'll shut it down for you)."

I think its bad culturally if we signal to people that we need relays so
badly that it doesn't matter if they are unpatched, or if the OS is
unpatched, or if they accidentally publish their relay and ssh keys to a
public github repo. (Relays running on a system that hasn't received any
patches or security updates in 12 months is the administrator diligence
equivalent of publishing admin keys to public github, IMO, if not its
actual functional equivalent).

Not only does it encourage a sloppy mindset about paying attention to
relay systems, it also slows down our development of new protocols, and
impedes major network upgrades.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
I'm very much agreeing with this. We do "force-ask" the directory \
authorities to follow the latest stable up to at worst 2 stable behind. There are \
reasons for that, maintainenance but also security.

Relays have to be sharp at upgrading... A relay that is not, that we end up
excluding from the consensus because the version is too dangerous (remember
heartbleed), can be considered in my opinion more a liability then a useful
piece.

Having capacity in my opinion is as important as having relays that are up to
date. Every release we rollout very important features that if not deployed
network wide, we don't get the benefit of them until years to come (basically
when the previous LTS is EOL...).

And that forces us into a position of backporting sometimes big block of codes
(DoS subsystem is one example).

Still today, there are still 1000+ relays (on 0.2.9) that can't be used for
Onion Service v3... It is a 1/6th of the network and we've released relay
support 2 years ago... And we have _specific_ code to avoid picking those
relays so all these edge case also accumulates in the code over time.

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
(As an aside, I would like to take a hard look at the LTS series, and
brainstorm how much it would cost us to provide official, reproducibly
built repos for every distribution whose LTS policies we find expensive
and cumbersome to support.. Or at least do some analysis of which changes
have been or will be extremely expensive or impossible to roll out due
to being blocked on needing to maintain the LTS).
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
If we could convince Debian to consider an EOL version a "security issue" \
and thus accept to pull in the new next supported stable in their stable
package...... that would be grand because then even Debian LTS relay operator
could still benefit from getting newer versions, improving the network and
thus the security of all on Tor.

I know I know, challenges and sometimes a bad idea but with this proposal, it
might be a good time to also take a hard look at how things are and change
paradigm even if it means a painful transition.

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt; 
&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;4. Requiring features (for clients)

   Clients take the longest time to update, and are often the least
   able to fetch upgrades. Because of this, we should be very careful
   about making subprotocol versions required on clients, and should
   only do so for fairly compelling reasons.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
Is this true? From our Tor Browser metrics (which could use some kind of
totaling), it looks like most Tor Browser users upgrade pretty quickly:
&lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/webstats-tb.html"&gt;https://metrics.torproject.org/webstats-tb.html&lt;/a&gt;


What kinds of clients don't upgrade? I got the impression that it was
mostly things like old botnet cruft that didn't..
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
My guts feeling is that relays actually take longer...

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt; 
&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;   We SHOULD NOT make a feature required for \
clients until it has been  _recommended_ for clients for at first 9 months.

   We SHOULD make a feature required for clients if it has been
   _recommended_ for clients for at least 18 months.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
I guess since we're talking about causing clients to exit() in both
these cases, it might be OK to be conservative here...
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
Honestly, a client exit()ing is indeed a pain point but we get to that
situation because it is not safe anymore for the client to join the network.
I find that less worrying than relays starting to exit() all the sudden
because we've pushed a required protover, we end up with 3000 dead relays...

I would be for reducing those values much more. As an example, again with
prop289 (authenticated sendmes), we are talking a deployment plan that spans
almost 5 years...

We can't publish FlowCtrl=1 protover until 035 is EOL which is in 3 years and
then once we have that, we have another 9 months to go for _recommended_ and
then 18 months before we can force it in required.

This means 4.5 years of deployment for a _security_ feature that is overall
helping the network and specific attacks... I think we can do much better and
we should.

And maybe that comes with laxing our backport policy or rethinking our LTS?
I'm not entirely sure...

Historically, we do have a quick transition when a version is EOL and the
package follow, see the drops here:

&lt;a class="moz-txt-link-freetext" \
href="https://metrics.torproject.org/versions.html?start=2018-02-22&amp;end=2019-05-23 \
"&gt;https://metrics.torproject.org/versions.html?start=2018-02-22&amp;end=2019-05-23&lt;/a&gt;


As long as package follow, usually the majority of relays do upgrade to them
in matter of some months. Which re-enforces my point about Debian + packaging
;).

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
But again, I am really worried about future network scalability and
performance upgrades getting stalled because we don't want to change
things that fragment client anonymity.. Does that mean that for some
kinds of new features, we can't flip a switch because we're trying to
give clients another 1.5 years *past the EOL of the last LTS* to
upgrade?
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
As more examples here, we were forced to backport the DoS subsystem down many
versions, that was some work!... Testing all relay versions, I had to
sometimes wait weeks before my relay could get the Guard flag again... The
pain was real at that time.

If we talk in terms of tor scaling, we'll start doing pretty big drastic
changes to the protocol or even just how tor the binary operates. If every
step takes _years_, we'll fail this "tor game" in my opinion over time.

I know pastly has some results about how different cell scheduling (KIST,
KISTLite, Vanilla) between relays is actually badly affecting the network...
and there is NO way to change that quickly until all our EOL dies out and
transition...

I'm almost at the point of proposing "remote relay upgrades" like Tor \
Browser does ... :P. I know, hard, but at least we would be extremely agile on going
forward *but* also rolling back anything that f*** the network (and it
happened before, we had to rollout parameters). Tor Browser did insane work
there so we could cherry-pick on that imo.

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;I would enjoy a session in Stockholm that walked \
through how we would use this proposal and proposal 264 to roll out a handful of \
involved changes, such as walking onions, onion service DoS protections, conflux,
explicit congestion control signaling, full datagram Tor, etc. 
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
+1

&lt;/pre&gt;
&lt;blockquote type="cite"&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
It would be awesome if such a session could result in a proposal like
this one, but the flip side: explaining how to use protovers to roll out
involved features so that clients adopt them quickly and safely (and
what sorts of changes can be done quickly, and what sorts of changes
require waiting 4 years for LTS to EOL + 1.5 more years for clients to
update so as not to fragment anonymity).
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;
Yes, something concrete, something that after Stockholm we can be happy with
and apply it. Not just brainstorm and then this whole thing dies off.

But yes overall, I'm in favor that we think in terms of reducing the waiting
time for anything to be rolled out on the network instead of waiting years for
one single feature to be fully deployed. Some comes from us to change a bit
our policy but also a lot comes from our relay operator to be good operators
and upgrade to our stables much faster.

Cheers!
David

&lt;/pre&gt;
&lt;br&gt;
&lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
&lt;pre class="moz-quote-pre" wrap=""&gt;_______________________________________________
tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;


[Attachment #4 (unknown)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190515124014</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-15 12:40:14-0400</timestampReceived><subject>Re: [tor-dev] Network Health Monitoring</subject><body>

[Attachment #2 (multipart/signed)]


On 08 May (13:27:31), Iain Learmonth wrote:
&gt; Hi All,
&gt; 
&gt; I'm working on #28322 to improve the monitoring of Tor Metrics services,
&gt; but this also has the side effect of monitoring network health. For
&gt; example, we'd like to know when Onionoo messes up and starts reporting
&gt; zero relays, but we also get to learn for free in the same check how
&gt; many relays we have and alert if that number does something weird.
&gt; 
&gt; What would be the most useful checks to add here?
&gt; 
&gt; * Range of expected total relays
&gt; * Range of expected relays with Guard flag
&gt; * Range of expected relays with Exit flag
&gt; * Range of expected consensus weight in each position

For all of them, what could be reported is if a large fraction disappears all
the sudden.

Loosing for instance 500 relays at once is something worth our attention imo.
Same goes with Exit relays... if we drop from 900 to 500, it is scary.

For the consensus weight, I would report the outliers. Maybe someone is gaming
us and so a HUGE values compared to our top usual 10 means something is up.

As what are the good values, I don't know but I think you can probably figure
out the average relay we loose/gain every day and scale that like 3 times for
a warning?

Cheers!
David

-- 
5D7/m3SvifEYtSvoScZjTsoU0qnbEZd59Iy2b96YR+s=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506170451</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-06 17:04:51-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

Mark Smith &lt;mcs@pearlcrescent.com&gt; writes:

&gt; On 5/6/19 11:19 AM, George Kadianakis wrote:
&gt; &gt; Hello list,
&gt; &gt; 
&gt; &gt; here is a control spec patch for adding v3 client auth commands to
&gt; &gt; add/remove/view clients from the client-side (so Tor Browser -&gt; Tor):
&gt; &gt; https://github.com/torproject/torspec/pull/81/commits/3a26880e80617210b4729f96664ef9f0345b0b7c
&gt; &gt;  
&gt; &gt; I'm currently unhappy with the naming of those commands, and in general
&gt; &gt; with how easy it is to confuse them with the (non-existent) service-side
&gt; &gt; commands. I'm wondering how to name them better so that when we add the
&gt; &gt; respective service-side commands (at some point we should) there is no
&gt; &gt; confusion.
&gt; &gt; 
&gt; &gt; Let me know what you think!
&gt; 
&gt; Thanks for working on this.  I have a couple of comments:
&gt; 
&gt; 1. How does Permanent get set?  Should there by an option added to
&gt; ADD_ONION_CLIENT_AUTH to let the client say "store this on disk"?
&gt; 

Yes we do want that! We just thought it adds to engineering complexity and
it shouldn't get in as part of the first implementation (i.e. as an s27-must).

I will still add it to the spec, and just not implement it.

&gt; 2. For VIEW_ONION_CLIENT_AUTH it would be nice if the HSAddress
&gt; parameter was optional.  We may want to build an interface that allows
&gt; users to see all of their keys and choose which ones to remove, etc.
&gt; 

Good point! Will do.

Will probs have a revision for this list tomorrow!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190506191627</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-05-06 19:16:27-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

On namespaces...

Like MIBs, APIs, file systems, most anything, it's usually...
least specific left to most specific right
... DNS also maintains hier but in reverse direction.


add_foo_thing1
add_thing1
add_thing2
see_bar_thing1
string_assorted_junk_this
...

gives you hierarchies of *add* filled with
all sorts of random things, doesn't sort,
and leads to documentation being scattered
as well, with assorted junk everywhere.


ONION_CLIENT_AUTH_ADD

is most clear... ONION (ok, what about onion),
CLIENT (ok, what about client), AUTH (ok, and...)
ADD (aha yes do that). And docs are self
ordering into nice sections.


ONION_CLIENT_ADD_AUTH

doesn't follow because it reverses the
last two thus breaking things again.


"We can't change"

Sometimes these positions can hold you back, allow
random in new things, expend mantenance on old chaos, etc.
If project codebases have a lot of legacy chaos, downstream
can appreciate and support refactoring in major releases,
even if they have to do a little work themselves to get that.
Announced mapping of legacy command support for removal
in next major releases can help there too.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190506202826</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-05-06 20:28:26-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

grarpamp &lt;grarpamp@gmail.com&gt; writes:

&gt; ONION_CLIENT_AUTH_ADD
&gt; ONION_CLIENT_ADD_AUTH

+1

&gt; "We can't change"

Yeah, this is a tough one in some ways. Incremental change is best, but
in some ways a wholesale re-thinking could be good as well. I am just
one "control library author", but many of txtorcon's APIs seek to hide
away the actual control-protocol verbs etc. so changing the "raw" Tor
control-protocol API to be spelled out better is low priority (for me).

As far as "re-thinking", I personally would be keen to see a
capability-based approach so that potentially very fine-grained
permissions can be granted (e.g. "you may add a single ephemeral onion
service"). This need is somewhat answered already by proxies -- and in
any case "some separate program" is the best place to prototype a
"completely new" protocol.

The reality is we're currently in a situation where a lot of people
don't want to give any program control-protocol access (and rightly so)
because it's such a vast amount of information and control. Thus, it's
likely that any "tor-using application" (beyond "use SOCKS5") has
basically no choice but to launch its own instance of tor. Maybe this is
the best thing to do anyway?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190507145132</emailId><senderName>Suphanat Chunhapanya</senderName><senderEmail>haxx.pop@gmail.com</senderEmail><timestampReceived>2019-05-07 14:51:32-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/alternative)]


(1)

On 5/7/19 2:16 AM, grarpamp wrote:
&gt; ONION_CLIENT_AUTH_ADD
&gt;
&gt; is most clear... ONION (ok, what about onion),
&gt; CLIENT (ok, what about client), AUTH (ok, and...)
&gt; ADD (aha yes do that). And docs are self
&gt; ordering into nice sections.
&gt;
&gt;
&gt; ONION_CLIENT_ADD_AUTH
&gt;
&gt; doesn't follow because it reverses the
&gt; last two thus breaking things again.

That's cool. But according to what dgoulet proposed, if we use both
ONION_CLIENT_AUTH_ADD
and ONION_SERVICE_AUTH_ADD. The latter will sound like it's an
authentication of the service not the client. At least for me :)

If you want the least specific left and the most specific right, I think
ONION_AUTH_CLIENT_ADD and
ONION_AUTH_SERVICE_ADD would be better.

(2)

I think, to be more specific, I would rather use X25519PubKey and
X25519PrivKey instead of just X25519Key.

(3)

Is PERMANENT a type? Is there any other type other than PERMANENT? I
think I consider it as a TRUE/FALSE flag.



[Attachment #9 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;(1)&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 5/7/19 2:16 AM, grarpamp wrote:
    &lt;/div&gt;
    &lt;blockquote type="cite"
cite="mid:CAD2Ti2-gkg-9ekO+uQmw7Bh2=vZMcqjd6hq-kan6t1Wv9MShsQ@mail.gmail.com"&gt;
      &lt;pre class="moz-quote-pre" wrap=""&gt;ONION_CLIENT_AUTH_ADD

is most clear... ONION (ok, what about onion),
CLIENT (ok, what about client), AUTH (ok, and...)
ADD (aha yes do that). And docs are self
ordering into nice sections.


ONION_CLIENT_ADD_AUTH

doesn't follow because it reverses the
last two thus breaking things again.
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;That's cool. But according to what dgoulet proposed, if we use
      both ONION_CLIENT_AUTH_ADD&lt;br&gt;
      and ONION_SERVICE_AUTH_ADD. The latter will sound like it's an
      authentication of the service not the client. At least for me :)&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;If you want the least specific left and the most specific right,
      I think ONION_AUTH_CLIENT_ADD and&lt;br&gt;
      ONION_AUTH_SERVICE_ADD would be better.&lt;/p&gt;
    &lt;p&gt;(2)&lt;/p&gt;
    &lt;p&gt;I think, to be more specific, I would rather use &lt;span
        class="blob-code-inner"&gt;X25519PubKey and X25519PrivKey instead
        of just X25519Key.&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span class="blob-code-inner"&gt;(3)&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span class="blob-code-inner"&gt;Is PERMANENT a type? Is there any
        other type other than PERMANENT? I think I consider it as a
        TRUE/FALSE flag.&lt;br&gt;
      &lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;&lt;span class="blob-code-inner"&gt;&lt;br&gt;
      &lt;/span&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;

["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190507161134</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-07 16:11:34-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Hello list,
&gt; 
&gt; here is a control spec patch for adding v3 client auth commands to
&gt; add/remove/view clients from the client-side (so Tor Browser -&gt; Tor):
&gt; https://github.com/torproject/torspec/pull/81/commits/3a26880e80617210b4729f96664ef9f0345b0b7c
&gt;  
&gt; I'm currently unhappy with the naming of those commands, and in general
&gt; with how easy it is to confuse them with the (non-existent) service-side
&gt; commands. I'm wondering how to name them better so that when we add the
&gt; respective service-side commands (at some point we should) there is no
&gt; confusion.
&gt; 

Thanks for all the comments. I think I took everything into account, and
I'm inlining an updated version of the patch. My apologies if I forgot
something.

There will likely be updates (e.g. on the error codes) as we get to
implement this, because we always forget something.

Thanks for the feedback, very much appreciated! :)

---

+
+ 3.30. ONION_CLIENT_AUTH_ADD
+ 
+   The syntax is:
+     "ONION_CLIENT_AUTH_ADD" SP HSAddress
+                             SP "X25519PrivKey=" PrivateKeyBlob
+                             [SP "ClientName=" Nickname]
+                             [SP "Type=" TYPE] CRLF
+ 
+     HSAddress = 56*Base32Character
+     PrivateKeyBlob = base64 encoding of x25519 key
+ 
+   Tells the connected Tor to add client-side v3 client auth credentials for the
+   onion service with "HSAddress". The "PrivateKeyBlob" is the x25519 private
+   key that should be used for this client, and "Nickname" is an optional
+   nickname for the client.
+ 
+   TYPE is a comma-separated tuple of types for this new client. For now, the
+   currently supported types are:
+     "Permanent" - This client's credentials should be stored in the filesystem.
+                   If this is not set, the client's credentials are epheremal
+                   and stored in memory.
+ 
+   On success, "250 OK" is returned. Otherwise, the following error codes exist:
+     251 - Client with with this "PrivateKeyBlob" already existed.
+     512 - Syntax error in "HSAddress", or "PrivateKeyBlob" or "Nickname"
+     551 - Client with with this "Nickname" already exists
+ 
+ 3.31. ONION_CLIENT_AUTH_REMOVE
+ 
+   The syntax is:
+     "ONION_CLIENT_AUTH_REMOVE" SP HSAddress
+                                SP "X25519PrivKey=" PrivateKeyBlob CRLF
+ 
+   Tells the connected Tor to remove the client-side v3 client auth credentials
+   for the onion service with "HSAddress" and client with key "PrivateKeyBlob".
+ 
+   On success "250 OK" is returned. Otherwise, the following error codes exist:
+     512 - Syntax error in "HSAddress", or "PrivateKeyBlob".
+     251 - Client with "PrivateKeyBlob" did not exist.
+ 
+ 3.32. ONION_CLIENT_AUTH_VIEW
+ 
+   The syntax is:
+     "ONION_CLIENT_AUTH_VIEW" [SP HSAddress] CRLF
+ 
+   Tells the connected Tor to list all the stored client-side v3 client auth
+   credentials for "HSAddress". If no "HSAddress" is provided, list all the
+   stored client-side v3 client auth credentials.
+ 
+   The server reply format is:
+     "250-ONION_CLIENT_AUTH_VIEW" [SP HSAddress] CRLF
+     *("250-CLIENT X25519PrivKey=" PrivateKeyBlob
+                               [SP "ClientName=" Nickname]
+                               [SP "Type=" TYPE] CRLF)
+     "250 OK" CRLF
+ 
+   Where "PrivateKeyBlob" is the x25519 private key of this client. "Nickname"
+   is an optional nickname for this client, which can be set either through the
+   ONION_CLIENT_AUTH_ADD command, or it's the filename of this client if the
+   credentials are stored in the filesystem.
+ 
+   TYPE is a comma-separated field of types for this client, the currently
+   supported types are:
+       "Permanent" - This client's credentials are stored in the filesystem.
+ 
+   On success "250 OK" is returned. Otherwise, the following error codes exist:
+     512 - Syntax error in "HSAddress".
+
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190507221509</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-05-07 22:15:09-0400</timestampReceived><subject>Re: [tor-dev] [RFC] control-spec: Specify add/remove/view client auth commands (client-side).</subject><body>

On 5/7/19, Suphanat Chunhapanya &lt;haxx.pop@gmail.com&gt; wrote:
&gt; That's cool. But according to what dgoulet proposed, if we use both
&gt; ONION_CLIENT_AUTH_ADD
&gt; and ONION_SERVICE_AUTH_ADD. The latter will sound like it's an
&gt; authentication of the service not the client. At least for me :)

And or maybe that seem more like managing the
onion service ID itself too, rather than just authentication
for fetching or connecting to it.

Part of problem may be brain grouping of the underscores.

"onion" "client|service" "auth" "add|del|view"
"onion" "client|service auth" "add|del|view"
"onion client|service" "auth" "add|del|view"


&gt; If you want the least specific left and the most specific right, I think
&gt; ONION_AUTH_CLIENT_ADD and
&gt; ONION_AUTH_SERVICE_ADD would be better.

Maybe your sense would be better...

"onion auth" for "client|service" do "add|del|view"

or if there's want to keep "onion" string as the MIB root...
"onion" re "auth" for "client|service" do "add|del|view"


Though seems mostly agreed on onion first and verb last,
so whatever works for people in the middle :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190507222735</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-05-07 22:27:35-0400</timestampReceived><subject>Re: [tor-dev] Tor exit bridges</subject><body>

[Attachment #2 (multipart/alternative)]


On Tue, May 7, 2019 at 5:35 PM juanjo &lt;juanjo@avanix.es&gt; wrote:

&gt; Tor relays are public and easily blocked by IP. To connect to Tor
&gt; network users where Tor is censored have to use bridges and even PTs.
&gt; But, what happens on the exit? Many websites block Tor IPs so using it
&gt; to access "clearweb" is not possible. Should we allow and start using
&gt; "exit bridges"? In I2P we have not this problem since there is no
&gt; central IP list of relays.


There is an old FAQ entry on this[0].

[0] https://2019.www.torproject.org/docs/faq.html.en#HideExits

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Tue, May \
7, 2019 at 5:35 PM juanjo &lt;&lt;a \
href="mailto:juanjo@avanix.es"&gt;juanjo@avanix.es&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Tor relays are public and easily blocked by IP. To \
connect to Tor &lt;br&gt; network users where Tor is censored have to use bridges and even \
PTs. &lt;br&gt; But, what happens on the exit? Many websites block Tor IPs so using it &lt;br&gt;
to access "clearweb" is not possible. Should we allow and start using &lt;br&gt;
"exit bridges"? In I2P we have not this problem since there is no &lt;br&gt;
central IP list of relays.&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;There is an old FAQ \
entry on this[0].&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[0] &lt;a \
href="https://2019.www.torproject.org/docs/faq.html.en#HideExits"&gt;https://2019.www.torproject.org/docs/faq.html.en#HideExits&lt;/a&gt;&lt;/div&gt; \
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190507222751</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-05-07 22:27:51-0400</timestampReceived><subject>[tor-dev] Controller: text connection vs SNMP</subject><body>

Speaking of MIBs and management, was SNMP ever seriously
looked at back when desire for a control mechanism evolved?
If I recall, agent libs and clients weren't wished as middleware,
thus demurring to a text connection shell interface.
Though commercial routers have both, the shell connection is
usually richer and more capable, but harder to parse
(Juniper being more programmatic), and requires downstream
development to speak to each vendor's shell in automated fashion.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190508001443</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-05-08 00:14:43-0400</timestampReceived><subject>[tor-dev] Solving World's Tor Users Being Blocked by Websites (was: Tor exit bridges)</subject><body>

On 5/7/19, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt;
&gt; juanjo:
&gt;&gt; Tor relays are public and easily blocked by IP. To connect to Tor
&gt;&gt; network users where Tor is censored have to use bridges and even PTs.
&gt;&gt; But, what happens on the exit? Many websites block Tor IPs so using
&gt;&gt; it to access "clearweb" is not possible. Should we allow and start
&gt;&gt; using "exit bridges"? In I2P we have not this problem since there is
&gt;&gt; no central IP list of relays.
&gt;
&gt; there is no need to extend to one more hope to achieve this
&gt;
&gt; https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html
&gt;
&gt; https://lists.torproject.org/pipermail/tor-relays/2019-May/017273.html

It's possible to augment such outbound
solution offerings even further by running
an OpenVPN termination service so users
can transport UDP between clearnet as well.
VPNGate.net project has an idea there too.
Even large regional IPv6 pools could be bought
and shared by operators and rotated through.

More tor relay operators should consider
some of the above options, whether as a
requested "bridge" service mechanism, or
listed in the consensus "contact" field, or
as more of a standalone VPNGate support,
or "ExitGate" project sort of arrangement.

Using only tor right now, a user needs to use a clearnet service
that does not scrape consensus, or one not fronted by services
doing similar to CloudFlare's spiteful default tor blocking policy,
or find a lucky exit within whatever geolocation game the clearnet
service uses, or get lucky through traditional vpn or proxy.

But those are only fun statistical hacks, not real long term solutions
to the underlying problem.

It's unfortunate that such braindead blocking, stupid policy regimes,
sites refusal to developing creative solutions [1] for so many world's
users legitimate privacy, info risk, anonymity needs... often results
in users accounts being locked out and escalated into forcing disclosure
of users private info and ID to sites to unlock them, thus exposing
users to ongoing long term fraud, cost, and stress when that info
(in most cases truly unnecessary to collect) is eventually shared
misused and stolen by both sites and criminals... or outright auto
deletion of user's valued account, built up social networks, etc...
all for doing nothing wrong, and harming no one or thing.
Death by DriveByExit :(
And really shameful to deny world's users the right to simply read
a website, be it social, commercial, information, etc or even sadly
their own tax-theft funded governmental public sites doing this
blocking too.


There are some related projects, best practice, as well...

https://trac.torproject.org/projects/tor/wiki/org/projects/WeSupportTor
https://trac.torproject.org/projects/tor/wiki/org/projects/DontBlockMe
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-access

Positive outreach and direct engagement by Tor community
is key here, and perhaps not enough of that is happening,
at least not publicly. It's a big enough issue that it really needs
a dedicated, active, allied, and even funded subproject...
a MegaProject that needs to happen.


[1] Such as forfeitable cryptocurrency and mailed-in cash
deposits refundable in time, increasing account priviledges
and features based on account age and activity, community
moderation and behaviour support within the sites, opensource
third party tracking-free local SecurImage style captcha throughout
a sites features, privacy preserving non-SMS non-Google/Apple
pure TOTP authenticator protocols, PGP recovery, letting
users simply *read* websites without any hindrance,
while utilizing these methods only for *write* operations,
etc and so many more ways you can envision...


Cc'd for awareness and inclusion. *Please remove tor-dev
and tor-relays, and move this to tor-talk or tor-access
for ongoing discussion and progress. Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190508183442</emailId><senderName>"Damon H. (TheDcoder)"</senderName><senderEmail>thedcoder@disroot.org</senderEmail><timestampReceived>2019-05-08 18:34:42-0400</timestampReceived><subject>Re: [tor-dev] My implementation of hash for controller password - torhash</subject><body>

[Attachment #2 (multipart/alternative)]


Hello again,

I did my research and I was able to rewrite the code
&lt;https://github.com/TheDcoder/torhash/tree/openssl&gt; (branched as
openssl) using OpenSSL's libcrypto for hashing, but I was unsatisfied
due to a few reasons which I think are not worth mentioning (mainly how
libcrypto's API is designed and its dependencies).

After some more looking around for a good cryptography library, I found
LibTomCrypt which sounded just like what I was looking for... and I was
right! It is what I was looking for, it has minimal dependencies and is
cross-platform. The API is also much simpler and cleaner (IMHO) than
libcrypto. So I went ahead and rewrote the code
&lt;https://github.com/TheDcoder/torhash/commit/d0bef22e4ac48b3e220ffbdd463ccae4b976d86d&gt;
again to use LibTomCrypt and it worked a treat.

I have finished the proof of concept by implementing
&lt;https://github.com/TheDcoder/torhash/commit/39f24db29a46105eb022cfe626680c803069b223&gt;
a reasonably secure random salt with the help of LibTomCrypt's secure
prng interface which uses platform-native methods (and an ANSI C method
as a fallback) to generate random bytes.

I assume the code is production ready at the moment. Though I would be
happy to hear any input that you guys might have to offer :)

Regards,
Damon H. (TheDcoder)

On 03/05/19 1:15 PM, Damon (TheDcoder) wrote:
&gt;
&gt; Hello everyone!
&gt;
&gt; I have written a very simple tool called torhash
&gt; &lt;https://github.com/TheDcoder/torhash&gt; to generate hashed
&gt; passwords/strings according to the instructions in control spec to
&gt; authenticate with the controller interface (TC?). I did not actually
&gt; study the S2K algorithm since I found it hard to understand RFC 2440,
&gt; I studied source code and bit by bit I figured out what was happening
&gt; behind the scenes!
&gt;
&gt; The reason I did this is that I am working on another program called
&gt; ProxAllium &lt;https://proxallium.dtw.tools/&gt; which acts as a graphical
&gt; user interface for Tor, I am currently in the process of rewriting
&gt; &lt;https://github.com/DcodingTheWeb/ProxAllium/tree/next-gen&gt; it in C to
&gt; make it cross-platform (along with a few other reasons...). I hit a
&gt; roadblock while I was implementing support for interacting with the
&gt; controller interface, I had to make a choice between calling Tor to
&gt; generate the hashed password or to hash the password in the program
&gt; itself. I felt like hashing the password in the program itself was the
&gt; right choice, I had a few other weak reasons to not call Tor for
&gt; hashing the password but my gut was the main motivator behind this choice.
&gt;
&gt; I created torhash (apologies about the bad name choice) as a
&gt; proof-of-concept and to improve my general programming skills, I had
&gt; no prior experience working with cryptography or hash functions on
&gt; this level, so I went with the simplest library I could find for
&gt; hashing the data. I could have gone with OpenSSL, as I believe that it
&gt; is the de-facto cross-platform standard for cryptography and
&gt; cryptographic hashing, I am currently looking into using it, but I am
&gt; not yet sure if this is a good idea.
&gt;
&gt; I would be grateful if some of you can take out some time to have a
&gt; look, I am very excited to hear your opinions and any advice that you
&gt; may have to help me improve, the code itself is very simple and short
&gt; (114 lines of code). Pardon any mistakes or bad code that I may have
&gt; written, I have only begun programming relatively recently and my
&gt; experience with low-level development (with C) is very recent.
&gt;
&gt; Thank you for reading and for the input in advance!
&gt;
&gt;
&gt; Best Regards,
&gt;
&gt; Damon H. (TheDcoder)
&gt;

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hello again,&lt;/p&gt;
    &lt;p&gt;I did my research and I was able to rewrite the &lt;a
        moz-do-not-send="true"
        href="https://github.com/TheDcoder/torhash/tree/openssl"&gt;code&lt;/a&gt;
      (branched as openssl) using OpenSSL's libcrypto for hashing, but I
      was unsatisfied due to a few reasons which I think are not worth
      mentioning (mainly how libcrypto's API is designed and its
      dependencies).&lt;/p&gt;
    &lt;p&gt;After some more looking around for a good cryptography library, I
      found LibTomCrypt which sounded just like what I was looking
      for... and I was right! It is what I was looking for, it has
      minimal dependencies and is cross-platform. The API is also much
      simpler and cleaner (IMHO) than libcrypto. So I went ahead and &lt;a
        moz-do-not-send="true"
href="https://github.com/TheDcoder/torhash/commit/d0bef22e4ac48b3e220ffbdd463ccae4b976d86d"&gt;rewrote
  the code&lt;/a&gt; again to use LibTomCrypt and it worked a treat.&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;I have finished the proof of concept by &lt;a
        moz-do-not-send="true"
href="https://github.com/TheDcoder/torhash/commit/39f24db29a46105eb022cfe626680c803069b223"&gt;implementing&lt;/a&gt;
  a reasonably secure random salt with the help of LibTomCrypt's
      secure prng interface which uses platform-native methods (and an
      ANSI C method as a fallback) to generate random bytes.&lt;/p&gt;
    &lt;p&gt;I assume the code is production ready at the moment. Though I
      would be happy to hear any input that you guys might have to offer
      :)&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;Regards,&lt;br&gt;
      Damon H. (TheDcoder)&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-cite-prefix"&gt;On 03/05/19 1:15 PM, Damon (TheDcoder)
      wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite"
      cite="mid:349265e8-bf3b-1653-6869-a48b5a16e9e4@disroot.org"&gt;
      &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
      &lt;p&gt; Hello everyone!&lt;/p&gt;
      &lt;p&gt;I have written a very simple tool called &lt;a
          moz-do-not-send="true"
          href="https://github.com/TheDcoder/torhash"&gt;torhash&lt;/a&gt; to
        generate hashed passwords/strings according to the instructions
        in control spec to authenticate with the controller interface
        (TC?). I did not actually study the S2K algorithm since I found
        it hard to understand RFC 2440, I studied source code and bit by
        bit I figured out what was happening behind the scenes!&lt;/p&gt;
      &lt;p&gt;The reason I did this is that I am working on another program
        called &lt;a moz-do-not-send="true"
          href="https://proxallium.dtw.tools/"&gt;ProxAllium&lt;/a&gt; which acts
        as a graphical user interface for Tor, I am currently in the
        process of &lt;a moz-do-not-send="true"
          href="https://github.com/DcodingTheWeb/ProxAllium/tree/next-gen"&gt;rewriting&lt;/a&gt;
  it in C to make it cross-platform (along with a few other
        reasons...). I hit a roadblock while I was implementing support
        for interacting with the controller interface, I had to make a
        choice between calling Tor to generate the hashed password or to
        hash the password in the program itself. I felt like hashing the
        password in the program itself was the right choice, I had a few
        other weak reasons to not call Tor for hashing the password but
        my gut was the main motivator behind this choice.&lt;/p&gt;
      &lt;p&gt;I created torhash (apologies about the bad name choice) as a
        proof-of-concept and to improve my general programming skills, I
        had no prior experience working with cryptography or hash
        functions on this level, so I went with the simplest library I
        could find for hashing the data. I could have gone with OpenSSL,
        as I believe that it is the de-facto cross-platform standard for
        cryptography and cryptographic hashing, I am currently looking
        into using it, but I am not yet sure if this is a good idea.&lt;/p&gt;
      &lt;p&gt;I would be grateful if some of you can take out some time to
        have a look, I am very excited to hear your opinions and any
        advice that you may have to help me improve, the code itself is
        very simple and short (114 lines of code). Pardon any mistakes
        or bad code that I may have written, I have only begun
        programming relatively recently and my experience with low-level
        development (with C) is very recent.&lt;/p&gt;
      &lt;p&gt;Thank you for reading and for the input in advance!&lt;/p&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;/p&gt;
      &lt;p&gt;Best Regards,&lt;/p&gt;
      &lt;p&gt;Damon H. (TheDcoder)&lt;br&gt;
      &lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190508213843</emailId><senderName>amar memisevic</senderName><senderEmail>memisevic@yandex.com</senderEmail><timestampReceived>2019-05-08 21:38:43-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 100, Issue 8</subject><body>

[Attachment #2 (text/html)]

&lt;div&gt;Hi everyone, I have 2 additional tickets for a conference on friday in \
Amsterdam, (The Next Web 2019), if someone can join me there just leave me a message \
and I will assign you are partner ticket.&lt;br /&gt;&lt;br /&gt;All the best..&lt;/div&gt;&lt;div&gt;&lt;br \
/&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;08.05.2019, 14:00, \
"tor-dev-request@lists.torproject.org" \
&lt;tor-dev-request@lists.torproject.org&gt;:&lt;/div&gt;&lt;blockquote&gt;&lt;p&gt;Send tor-dev \
mailing list submissions to&lt;br /&gt;        &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br /&gt;&lt;br \
/&gt;To subscribe or unsubscribe via the World Wide Web, visit&lt;br \
/&gt;        &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
/&gt;or, via email, send a message with subject or body 'help' to&lt;br \
/&gt;        &lt;a \
href="mailto:tor-dev-request@lists.torproject.org"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;You can reach the person managing the list at&lt;br \
/&gt;        &lt;a \
href="mailto:tor-dev-owner@lists.torproject.org"&gt;tor-dev-owner@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;When replying, please edit your Subject line so it is more specific&lt;br /&gt;than \
"Re: Contents of tor-dev digest..."&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Today's Topics:&lt;br \
/&gt;&lt;br /&gt;   1. Re: Tor exit bridges (nusenu)&lt;br /&gt;   2. \
Re: [RFC] control-spec: Specify add/remove/view client auth&lt;br \
/&gt;      commands (client-side). (grarpamp)&lt;br \
/&gt;   3. Controller: text connection vs SNMP (grarpamp)&lt;br \
/&gt;   4. Re: Tor exit bridges (Matthew Finkel)&lt;br \
/&gt;   5. Solving World's Tor Users Being Blocked by Websites (was: \
Tor&lt;br /&gt;      exit bridges) (grarpamp)&lt;br /&gt;&lt;br /&gt;&lt;br \
/&gt;----------------------------------------------------------------------&lt;br /&gt;&lt;br \
/&gt;Message: 1&lt;br /&gt;Date: Tue, 07 May 2019 18:00:00 +0000&lt;br /&gt;From: nusenu &lt;&lt;a \
href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt;&lt;br /&gt;To: &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Subject: Re: [tor-dev] Tor exit bridges&lt;br /&gt;Message-ID: &lt;&lt;a \
href="mailto:22e90ef1-483b-e013-e7e3-72197c94d4bb@riseup.net"&gt;22e90ef1-483b-e013-e7e3-72197c94d4bb@riseup.net&lt;/a&gt;&gt;&lt;br \
/&gt;Content-Type: text/plain; charset="utf-8"&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br \
/&gt;juanjo:&lt;br /&gt;&lt;/p&gt;&lt;blockquote \
class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt; Tor relays are public and \
easily blocked by IP. To connect to Tor&lt;br /&gt; network users where Tor is \
censored have to use bridges and even PTs.&lt;br /&gt; But, what happens on the exit? \
Many websites block Tor IPs so using&lt;br /&gt; it to access "clearweb" is \
not possible. Should we allow and start&lt;br /&gt; using "exit bridges"? In \
I2P we have not this problem since there is&lt;br /&gt; no central IP list of \
relays.&lt;br /&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;there is no need to extend to one more hope to \
achieve this&lt;br /&gt;&lt;br /&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html"&gt;https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;a href="https://lists.torproject.org/pipermail/tor-relays/2019-May/017273.html"&gt;https://lists.torproject.org/pipermail/tor-relays/2019-May/017273.html&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;span class="c18e9d485856a85513717a5a5b59d3fewmi-sign"&gt;-- &lt;br /&gt;&lt;a \
href="https://twitter.com/nusenu_"&gt;https://twitter.com/nusenu_&lt;/a&gt;&lt;br /&gt;&lt;a \
href="https://mastodon.social/@nusenu"&gt;https://mastodon.social/@nusenu&lt;/a&gt;&lt;br \
/&gt;&lt;/span&gt;&lt;p&gt;&lt;br /&gt;-------------- next part --------------&lt;br /&gt;A non-text attachment \
was scrubbed...&lt;br /&gt;Name: signature.asc&lt;br /&gt;Type: application/pgp-signature&lt;br \
/&gt;Size: 833 bytes&lt;br /&gt;Desc: OpenPGP digital signature&lt;br /&gt;URL: &lt;&lt;a \
href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190507/b69c09b1/atta \
chment-0001.sig"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190507/b69c09b1/attachment-0001.sig&lt;/a&gt;&gt;&lt;br \
/&gt;&lt;br /&gt;------------------------------&lt;br /&gt;&lt;br /&gt;Message: 2&lt;br /&gt;Date: Tue, 7 May \
2019 18:15:09 -0400&lt;br /&gt;From: grarpamp &lt;&lt;a \
href="mailto:grarpamp@gmail.com"&gt;grarpamp@gmail.com&lt;/a&gt;&gt;&lt;br /&gt;To: &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Subject: Re: [tor-dev] [RFC] control-spec: Specify add/remove/view&lt;br \
/&gt;        client auth commands \
(client-side).&lt;br /&gt;Message-ID:&lt;br \
/&gt;        &lt;&lt;a \
href="mailto:CAD2Ti2-+Ne6O5OTtmKqnuP_W8-WheTrmDbzuiTh7610QsV1ijA@mail.gmail.com"&gt;CAD2Ti2-+Ne6O5OTtmKqnuP_W8-WheTrmDbzuiTh7610QsV1ijA@mail.gmail.com&lt;/a&gt;&gt;&lt;br \
/&gt;Content-Type: text/plain; charset="UTF-8"&lt;br /&gt;&lt;br /&gt;On 5/7/19, Suphanat \
Chunhapanya &lt;&lt;a href="mailto:haxx.pop@gmail.com"&gt;haxx.pop@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br /&gt;&lt;/p&gt;&lt;blockquote \
class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt; That's cool. But according to \
what dgoulet proposed, if we use both&lt;br /&gt; ONION_CLIENT_AUTH_ADD&lt;br /&gt; and \
ONION_SERVICE_AUTH_ADD. The latter will sound like it's an&lt;br /&gt; authentication \
of the service not the client. At least for me :)&lt;br /&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;And or \
maybe that seem more like managing the&lt;br /&gt;onion service ID itself too, rather than \
just authentication&lt;br /&gt;for fetching or connecting to it.&lt;br /&gt;&lt;br /&gt;Part of problem \
may be brain grouping of the underscores.&lt;br /&gt;&lt;br /&gt;"onion" \
"client|service" "auth" "add|del|view"&lt;br \
/&gt;"onion" "client|service auth" "add|del|view"&lt;br \
/&gt;"onion client|service" "auth" "add|del|view"&lt;br /&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt; If \
you want the least specific left and the most specific right, I think&lt;br \
/&gt; ONION_AUTH_CLIENT_ADD and&lt;br /&gt; ONION_AUTH_SERVICE_ADD would be \
better.&lt;br /&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;Maybe your sense would be better...&lt;br /&gt;&lt;br \
/&gt;"onion auth" for "client|service" do \
"add|del|view"&lt;br /&gt;&lt;br /&gt;or if there's want to keep "onion" \
string as the MIB root...&lt;br /&gt;"onion" re "auth" for \
"client|service" do "add|del|view"&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Though seems \
mostly agreed on onion first and verb last,&lt;br /&gt;so whatever works for people in the \
middle :)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;------------------------------&lt;br /&gt;&lt;br /&gt;Message: 3&lt;br \
/&gt;Date: Tue, 7 May 2019 18:27:51 -0400&lt;br /&gt;From: grarpamp &lt;&lt;a \
href="mailto:grarpamp@gmail.com"&gt;grarpamp@gmail.com&lt;/a&gt;&gt;&lt;br /&gt;To: &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Subject: [tor-dev] Controller: text connection vs SNMP&lt;br /&gt;Message-ID:&lt;br \
/&gt;        &lt;&lt;a \
href="mailto:CAD2Ti29cFwuRoUXjxaeNRB=vV3706+RQJVfeMVMsvrt_781dnw@mail.gmail.com"&gt;CAD2Ti29cFwuRoUXjxaeNRB=vV3706+RQJVfeMVMsvrt_781dnw@mail.gmail.com&lt;/a&gt;&gt;&lt;br \
/&gt;Content-Type: text/plain; charset="UTF-8"&lt;br /&gt;&lt;br /&gt;Speaking of MIBs and \
management, was SNMP ever seriously&lt;br /&gt;looked at back when desire for a control \
mechanism evolved?&lt;br /&gt;If I recall, agent libs and clients weren't wished as \
middleware,&lt;br /&gt;thus demurring to a text connection shell interface.&lt;br /&gt;Though \
commercial routers have both, the shell connection is&lt;br /&gt;usually richer and more \
capable, but harder to parse&lt;br /&gt;(Juniper being more programmatic), and requires \
downstream&lt;br /&gt;development to speak to each vendor's shell in automated fashion.&lt;br \
/&gt;&lt;br /&gt;&lt;br /&gt;------------------------------&lt;br /&gt;&lt;br /&gt;Message: 4&lt;br /&gt;Date: Tue, 7 \
May 2019 22:27:35 +0000&lt;br /&gt;From: Matthew Finkel &lt;&lt;a \
href="mailto:matthew.finkel@gmail.com"&gt;matthew.finkel@gmail.com&lt;/a&gt;&gt;&lt;br /&gt;To: &lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Subject: Re: [tor-dev] Tor exit bridges&lt;br /&gt;Message-ID:&lt;br \
/&gt;        &lt;&lt;a \
href="mailto:CAGF8hst+OGEzqYdaR=LxX7S1vTbeg7U+ipxZtd08XnAAgSJSmQ@mail.gmail.com"&gt;CAGF8hst+OGEzqYdaR=LxX7S1vTbeg7U+ipxZtd08XnAAgSJSmQ@mail.gmail.com&lt;/a&gt;&gt;&lt;br \
/&gt;Content-Type: text/plain; charset="utf-8"&lt;br /&gt;&lt;br /&gt;On Tue, May 7, 2019 \
at 5:35 PM juanjo &lt;&lt;a href="mailto:juanjo@avanix.es"&gt;juanjo@avanix.es&lt;/a&gt;&gt; \
wrote:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;&lt;blockquote \
class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt; Tor relays are public and \
easily blocked by IP. To connect to Tor&lt;br /&gt; network users where Tor is \
censored have to use bridges and even PTs.&lt;br /&gt; But, what happens on the exit? \
Many websites block Tor IPs so using it&lt;br /&gt; to access "clearweb" is \
not possible. Should we allow and start using&lt;br /&gt; "exit bridges"? In \
I2P we have not this problem since there is no&lt;br /&gt; central IP list of \
relays.&lt;br /&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;&lt;br /&gt;There is an old FAQ entry on this[0].&lt;br \
/&gt;&lt;br /&gt;[0] &lt;a href="https://2019.www.torproject.org/docs/faq.html.en#HideExits"&gt;https://2019.www.torproject.org/docs/faq.html.en#HideExits&lt;/a&gt;&lt;br \
/&gt;-------------- next part --------------&lt;br /&gt;An HTML attachment was scrubbed...&lt;br \
/&gt;URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190507 \
/61f91b9a/attachment-0001.html"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190507/61f91b9a/attachment-0001.html&lt;/a&gt;&gt;&lt;br \
/&gt;&lt;br /&gt;------------------------------&lt;br /&gt;&lt;br /&gt;Message: 5&lt;br /&gt;Date: Tue, 7 May \
2019 20:14:43 -0400&lt;br /&gt;From: grarpamp &lt;&lt;a \
href="mailto:grarpamp@gmail.com"&gt;grarpamp@gmail.com&lt;/a&gt;&gt;&lt;br /&gt;To: &lt;a \
href="mailto:tor-talk@lists.torproject.org"&gt;tor-talk@lists.torproject.org&lt;/a&gt;, &lt;a \
href="mailto:tor-access@lists.torproject.org"&gt;tor-access@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Cc: &lt;a href="mailto:tor-relays@lists.torproject.org"&gt;tor-relays@lists.torproject.org&lt;/a&gt;, \
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
/&gt;Subject: [tor-dev] Solving World's Tor Users Being Blocked by Websites&lt;br \
/&gt;        (was: Tor exit bridges)&lt;br \
/&gt;Message-ID:&lt;br /&gt;        &lt;&lt;a \
href="mailto:CAD2Ti29EHrgAsxkrVJfMc-mcG4qPJN=eShOGRwJJgrhUeAV9MQ@mail.gmail.com"&gt;CAD2Ti29EHrgAsxkrVJfMc-mcG4qPJN=eShOGRwJJgrhUeAV9MQ@mail.gmail.com&lt;/a&gt;&gt;&lt;br \
/&gt;Content-Type: text/plain; charset="UTF-8"&lt;br /&gt;&lt;br /&gt;On 5/7/19, nusenu \
&lt;&lt;a href="mailto:nusenu-lists@riseup.net"&gt;nusenu-lists@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br /&gt;&lt;/p&gt;&lt;blockquote class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt;&lt;br \
/&gt; juanjo:&lt;br /&gt;&lt;blockquote \
class="b4fd5cf2ec92bc68cb898700bb81355fwmi-quote"&gt; Tor relays are public and \
easily blocked by IP. To connect to Tor&lt;br /&gt; network users where Tor is \
censored have to use bridges and even PTs.&lt;br /&gt; But, what happens on the exit? \
Many websites block Tor IPs so using&lt;br /&gt; it to access "clearweb" is \
not possible. Should we allow and start&lt;br /&gt; using "exit bridges"? In \
I2P we have not this problem since there is&lt;br /&gt; no central IP list of \
relays.&lt;br /&gt;&lt;/blockquote&gt;&lt;br /&gt; there is no need to extend to one more hope to \
achieve this&lt;br /&gt;&lt;br /&gt; &lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html"&gt;https://lists.torproject.org/pipermail/tor-dev/2018-March/013036.html&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt; &lt;a href="https://lists.torproject.org/pipermail/tor-relays/2019-May/0172 \
73.html"&gt;https://lists.torproject.org/pipermail/tor-relays/2019-May/017273.html&lt;/a&gt;&lt;br \
/&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br /&gt;It's possible to augment such outbound&lt;br /&gt;solution \
offerings even further by running&lt;br /&gt;an OpenVPN termination service so users&lt;br \
/&gt;can transport UDP between clearnet as well.&lt;br /&gt;VPNGate.net project has an idea \
there too.&lt;br /&gt;Even large regional IPv6 pools could be bought&lt;br /&gt;and shared by \
operators and rotated through.&lt;br /&gt;&lt;br /&gt;More tor relay operators should consider&lt;br \
/&gt;some of the above options, whether as a&lt;br /&gt;requested "bridge" service \
mechanism, or&lt;br /&gt;listed in the consensus "contact" field, or&lt;br /&gt;as more \
of a standalone VPNGate support,&lt;br /&gt;or "ExitGate" project sort of \
arrangement.&lt;br /&gt;&lt;br /&gt;Using only tor right now, a user needs to use a clearnet \
service&lt;br /&gt;that does not scrape consensus, or one not fronted by services&lt;br \
/&gt;doing similar to CloudFlare's spiteful default tor blocking policy,&lt;br /&gt;or find a \
lucky exit within whatever geolocation game the clearnet&lt;br /&gt;service uses, or get \
lucky through traditional vpn or proxy.&lt;br /&gt;&lt;br /&gt;But those are only fun statistical \
hacks, not real long term solutions&lt;br /&gt;to the underlying problem.&lt;br /&gt;&lt;br /&gt;It's \
unfortunate that such braindead blocking, stupid policy regimes,&lt;br /&gt;sites refusal \
to developing creative solutions [1] for so many world's&lt;br /&gt;users legitimate \
privacy, info risk, anonymity needs... often results&lt;br /&gt;in users accounts being \
locked out and escalated into forcing disclosure&lt;br /&gt;of users private info and ID to \
sites to unlock them, thus exposing&lt;br /&gt;users to ongoing long term fraud, cost, and \
stress when that info&lt;br /&gt;(in most cases truly unnecessary to collect) is eventually \
shared&lt;br /&gt;misused and stolen by both sites and criminals... or outright auto&lt;br \
/&gt;deletion of user's valued account, built up social networks, etc...&lt;br /&gt;all for \
doing nothing wrong, and harming no one or thing.&lt;br /&gt;Death by DriveByExit :(&lt;br \
/&gt;And really shameful to deny world's users the right to simply read&lt;br /&gt;a website, \
be it social, commercial, information, etc or even sadly&lt;br /&gt;their own tax-theft \
funded governmental public sites doing this&lt;br /&gt;blocking too.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;There \
are some related projects, best practice, as well...&lt;br /&gt;&lt;br /&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/wiki/org/projects/WeSupportTor"&gt;https://trac.torproject.org/projects/tor/wiki/org/projects/WeSupportTor&lt;/a&gt;&lt;br \
/&gt;&lt;a href="https://trac.torproject.org/projects/tor/wiki/org/projects/DontBlockMe"&gt;https://trac.torproject.org/projects/tor/wiki/org/projects/DontBlockMe&lt;/a&gt;&lt;br \
/&gt;&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-access"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-access&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;Positive outreach and direct engagement by Tor community&lt;br /&gt;is key here, \
and perhaps not enough of that is happening,&lt;br /&gt;at least not publicly. It's a big \
enough issue that it really needs&lt;br /&gt;a dedicated, active, allied, and even funded \
subproject...&lt;br /&gt;a MegaProject that needs to happen.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] Such as \
forfeitable cryptocurrency and mailed-in cash&lt;br /&gt;deposits refundable in time, \
increasing account priviledges&lt;br /&gt;and features based on account age and activity, \
community&lt;br /&gt;moderation and behaviour support within the sites, opensource&lt;br \
/&gt;third party tracking-free local SecurImage style captcha throughout&lt;br /&gt;a sites \
features, privacy preserving non-SMS non-Google/Apple&lt;br /&gt;pure TOTP authenticator \
protocols, PGP recovery, letting&lt;br /&gt;users simply *read* websites without any \
hindrance,&lt;br /&gt;while utilizing these methods only for *write* operations,&lt;br /&gt;etc \
and so many more ways you can envision...&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Cc'd for awareness and \
inclusion. *Please remove tor-dev&lt;br /&gt;and tor-relays, and move this to tor-talk or \
tor-access&lt;br /&gt;for ongoing discussion and progress. Thanks.&lt;br /&gt;&lt;br /&gt;&lt;br \
/&gt;------------------------------&lt;br /&gt;&lt;br /&gt;Subject: Digest Footer&lt;br /&gt;&lt;br \
/&gt;_______________________________________________&lt;br /&gt;tor-dev mailing list&lt;br /&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br /&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
/&gt;&lt;br /&gt;&lt;br /&gt;------------------------------&lt;br /&gt;&lt;br /&gt;End of tor-dev Digest, Vol \
100, Issue 8&lt;br /&gt;***************************************&lt;br \
/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:#a9a9a9"&gt;----------------------------------------------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color:#a9a9a9"&gt;&lt;strong&gt;Founder - Getbooking.io, Molp, Zenica Smart \
City&lt;/strong&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;strong&gt;&lt;span style="color:#a9a9a9"&gt;Web&gt; &lt;/span&gt;&lt;a \
href="http://www.getbooking.io"&gt;&lt;span \
style="color:#a9a9a9"&gt;www.getbooking.io&lt;/span&gt;&lt;/a&gt;&lt;span style="color:#a9a9a9"&gt; ; \
&lt;/span&gt;&lt;a href="http://www.getbooking.cloud"&gt;&lt;span \
style="color:#a9a9a9"&gt;www.getbooking.cloud&lt;/span&gt;&lt;/a&gt;&lt;span \


[Attachment #3 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190513211753</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-05-13 21:17:53-0400</timestampReceived><subject>[tor-dev] Submit to FOCI '19: deadline in ten days</subject><body>

The submission deadline for this year's Free and Open Communications
on the Internet (FOCI) workshop is coming up in ten days.

The workshop will be co-located with Usenix Security in Santa Clara
in August.

https://www.usenix.org/conference/foci19

Here's the blurb:

"The Free and Open Communications on the Internet (FOCI) workshop, now
in its 9th year, is a vibrant, peer-reviewed event dedicated to bringing
together researchers and practitioners from technology, law, and policy
who are working on a wide variety of censorship-related topics. This
includes direct censorship mechanisms---both technical and legal---as
well as indirect methods of censorship through coordinated harassment
campaigns and online astroturfing that may be used to drown out and/or
chill free expression."

We encouraged Susan and Michael, the chairs this year, to make it their
own by adding the areas they find most fascinating, and they picked
the harassment and astroturfing angle, which I agree needs much more
attention from both the research and practitioner worlds.

So, you should submit your workshop paper!

And even if you don't submit, you should come to the workshop. There will
be a bunch of great censorship circumvention and censorship measurement
people there, including as usual some Tor people.

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190521081449</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-21 08:14:49-0400</timestampReceived><subject>Re: [tor-dev] Network Health Monitoring</subject><body>

Hi,

&gt; On 15 May 2019, at 22:40, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt;&gt; On 08 May (13:27:31), Iain Learmonth wrote:
&gt;&gt; Hi All,
&gt;&gt; 
&gt;&gt; I'm working on #28322 to improve the monitoring of Tor Metrics services,
&gt;&gt; but this also has the side effect of monitoring network health. For
&gt;&gt; example, we'd like to know when Onionoo messes up and starts reporting
&gt;&gt; zero relays, but we also get to learn for free in the same check how
&gt;&gt; many relays we have and alert if that number does something weird.
&gt;&gt; 
&gt;&gt; What would be the most useful checks to add here?
&gt;&gt; 
&gt;&gt; * Range of expected total relays
&gt;&gt; * Range of expected relays with Guard flag
&gt;&gt; * Range of expected relays with Exit flag
&gt;&gt; * Range of expected consensus weight in each position
&gt; 
&gt; For all of them, what could be reported is if a large fraction disappears all
&gt; the sudden.
&gt; 
&gt; Loosing for instance 500 relays at once is something worth our attention imo.
&gt; Same goes with Exit relays... if we drop from 900 to 500, it is scary.
&gt; 
&gt; For the consensus weight, I would report the outliers. Maybe someone is gaming
&gt; us and so a HUGE values compared to our top usual 10 means something is up.
&gt; 
&gt; As what are the good values, I don't know but I think you can probably figure
&gt; out the average relay we loose/gain every day and scale that like 3 times for
&gt; a warning?

Maybe it's also worth checking how many times each rule would trigger in the
past year?

If the statistics are normally distributed, you could use 4 standard deviations,
so that each rule (falsely) triggers about once a year.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190521092652</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-21 09:26:52-0400</timestampReceived><subject>Re: [tor-dev] TrackTor - GUI Based Implementation for Monitoring Tor</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Harsh,

&gt; On 12 May 2019, at 20:57, Harsh Gandhi &lt;2015ucp1011@mnit.ac.in&gt; wrote:
&gt; 
&gt; We are under-graduate students from Malaviya National Institute of Technology \
&gt; currently pursuing Computer Science &amp; Engineering. 
&gt; We have developed a GUI Based Tool for monitoring TOR (inspired by Nyx). We have \
&gt; packaged and uploaded the same on, 
&gt; PyPI - https://pypi.org/project/TrackTor/
&gt; 
&gt; Please do give it a try and suggest for improvements.

Looks interesting!

If your software works on tor relays, you could also write to \
tor-relays@lists.torproject.org and ask relay operators if they want to try it.

Using "Tor" in the name of the software might confuse people:

"Please don't use Tor in your product name or domain name. Instead, find a name that \
will accurately identify your products or services. … our goal is to make sure that \
people aren't confused about whether your product or project is made or endorsed by \
The Tor Project."

https://2019.www.torproject.org/docs/trademark-faq.html.en

Would you mind choosing a different name?

&gt; Also, please let us know on how can we incorporate/integrate this with The Tor \
&gt; Project?

Tor is a community with an supporting non-profit organisation. We make software, run \
relays, and help people be private, secure, and uncensored on the internet.

Did you want to join the Tor community?
Keep working on this software, and let us know how you go.
That's how lots of people become part of the community.

Did you want us to recommend your software?
We try to recommend software that is well-maintained, has multiple users, and \
community support. But that takes time.

How long do you expect to maintain it?

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi Harsh,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On \
12 May 2019, at 20:57, Harsh Gandhi &lt;&lt;a \
href="mailto:2015ucp1011@mnit.ac.in"&gt;2015ucp1011@mnit.ac.in&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We are under-graduate students from Malaviya National \
Institute of Technology currently pursuing Computer Science &amp; \
Engineering.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;We have developed a GUI Based Tool for \
monitoring TOR (inspired by Nyx). We have packaged and uploaded the same \
on,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;PyPI - &lt;a href="https://pypi.org/project/TrackTor/" \
target="_blank"&gt;https://pypi.org/project/TrackTor/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please \
do give it a try and suggest for \
improvements.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Looks \
interesting!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;If your software works on tor relays, you could also write to &lt;a \
href="mailto:tor-relays@lists.torproject.org"&gt;tor-relays@lists.torproject.org&lt;/a&gt; and \
ask relay operators if they want to try it.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Using \
"Tor" in the name of the software might confuse \
people:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;"&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Please don't use Tor in your product name or domain name. Instead, find a name \
that will accurately identify &lt;i&gt;your&lt;/i&gt; products or services. … our \
goal is to make sure that people aren't confused about whether your product or \
project is made or endorsed by The Tor Project."&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://2019.www.torproject.org/docs/trademark-faq.html.en"&gt;https://2019.www.torproject.org/docs/trademark-faq.html.en&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Would \
you mind choosing a different name?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Also, please let us know on how can we \
incorporate/integrate this with The Tor \
Project?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Tor is a community \
with an supporting non-profit organisation. We make software, run relays, and help \
people be private, secure, and uncensored on the internet.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Did you want to join the Tor community?&lt;/div&gt;&lt;div \
dir="ltr"&gt;Keep working on this software, and let us know how you go.&lt;/div&gt;&lt;div \
dir="ltr"&gt;That's how lots of people become part of the community.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Did you want us to recommend your \
software?&lt;/div&gt;&lt;div dir="ltr"&gt;We try to recommend software that is well-maintained, \
has multiple users, and community support. But that takes time.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;How long do you expect to maintain it?&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190523005901</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-23 00:59:01-0400</timestampReceived><subject>[tor-dev] Next Network Team Meeting Times</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Monday 27 May is a US public holiday, so we've changed the next two
meeting times:

May schedule:
    * Tuesday 28 May at 2300 UTC (Monday is a US public holiday)

June schedule:
    * Monday 3 June at 1700 UTC (The 28 May meeting was at the patch =
party time)

We're back to our regular schedule after that:
    * Monday 10 June at 1700 UTC
    * Monday 17 June at 1700 UTC
    * Monday 24 June at 1700 UTC

We meet in the #tor-meeting channel on irc.oftc.net.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlzl8FUACgkQEP6qDnB1
ZyqvQg/9GoylIM8ZvXUpXpY1gqGOPNs396Py0OHvl/k5119n+QwDHa2ZvPNjy2uK
JixbzdIvPGCkgq6rZB1TczjerOIiAXJmjMrCmtyztT5wVC/t6Ug8rbvxwg9P2hpK
LL2KTbtBTv5UCC6kLMRhShFxGAMg8A+OKWAR6NIrM3pAjfTC0Qr/CiGPZ6WNX5hb
KV4iYvN3819l+H24PeC0eG5Gksb8oyc4fISSJi4MuzVxBnY/7khmuwxAYqSMrZvv
6MCGHjqlzjZ0U5kc/XINMRt+UqZEO8JlxHFpRAhrqLEDwHXz0WyS1MsaDG+pRdNU
oRbnjtyHzRlSccbL0OvK8G7G4Bis+Layx15KwCebWsj/0YRq7Y4UfpQ6RFQJsYVg
bEtV9Pdm5sLHHSEBJjqLC4lLyUjE+K09NGPjjkRyUzmYGcOL5QVaQzPCkAEpmXQt
5us5jzEC2LKEqkc3NM8pkmQAt1C31YLNAo3lrZE5ZOFMOc7jDpmYWcpBOgjm+uu8
rjkBR0C/4qQnAr3jz8iS63eiIUnOqqnvaP+n0+p2gfSTYh0f+xB81qodwzoFdcKP
kvnxxaGDE9Mdy3WNs+Eb6mVuNo0ntuFFHSnd4vlvnpCkeDa6vJTRfcOG5NxoPCVY
xDM1k2rOgkxGVXY1cPkFY9T4Eh/a0mW4Mo2x41FpkGe6K0957iw=
=PMAJ
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190523184922</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-05-23 18:49:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 303: When and how to remove support for protocol versions</subject><body>

[Attachment #2 (multipart/signed)]


On 22 May (18:57:06), Mike Perry wrote:
&gt; Nick Mathewson:
&gt; &gt; Filename: 303-protover-removal-policy.txt
&gt; &gt; Title: When and how to remove support for protocol versions
&gt; &gt; Author: Nick Mathewson
&gt; &gt; Created: 21 May 2019
&gt; &gt; Status: Draft
&gt; &gt; 
&gt; &gt; 1. Background
&gt; &gt; 
&gt; &gt;    With proposal 264, added support for "subprotocol versions" -- a
&gt; &gt;    means to declare which features are required for participation in the
&gt; &gt;    Tor network.  We also created a mechanism (refined later in proposal
&gt; &gt;    297) for telling Tor clients and relays that they cannot participate
&gt; &gt;    effectively in the Tor network, and they need to shut down.
&gt; &gt; 
&gt; &gt;    In this document, we describe a policy according to which these
&gt; &gt;    decisions should be made in practice.
&gt; &gt; 
&gt; &gt; 2. Recommending features (for clients and relays)
&gt; &gt; 
&gt; &gt;    A subprotocol version SHOULD become recommended soon after all
&gt; &gt;    release series that did not provide it become unsupported (within a
&gt; &gt;    month or so).
&gt; &gt; 
&gt; &gt;    For example, the current oldest LTS release series is 0.2.9; when it
&gt; &gt;    becomes unsupported in 2020, the oldest supported release series will
&gt; &gt;    be 0.3.5.  Suppose that 0.2.9 supports a subprotocol Cupcake=1, and
&gt; &gt;    that all stable 0.3.5.x versions support Cupcake=1-3.  Around one
&gt; &gt;    month after the end of 0.2.9 support, Cupcake=3 should become a
&gt; &gt;    _recommended_ protocol for clients and relays.
&gt; &gt; 
&gt; &gt;    Additionally, a feature can become _recommended_ because of security
&gt; &gt;    reasons.  If we believe that it is a terrible idea to run an old
&gt; &gt;    protocol, we can make it _recommended_ for relays or clients or both.
&gt; &gt;    We should not do this lightly, since it will be annoying.
&gt; 
&gt; To be clear, "_recommended_" and "_required_" terms here are from
&gt; Proposal #264, Section 4, right? Aka the consensus lines?
&gt; 
&gt; These only affect WARN-vs-exit behavior by clients and relays that lack
&gt; support, right? Clients and relays will still *negotiate* and use
&gt; protocol versions that they both have, even if they are not listed as
&gt; either recommended or required?

Afaiu, you can only negotiate what you know which is the protover list you
support (the one advertised by relays).

For instance, if "Cupcake=1-3" is what you support as a client but the
recommended is "Cupcake=2-3", you can still do "1" but you will be warned.

If _required_, let say "Cupcake=3" but the client is "Cupcake=1-2", then the
client does _not_ join the network. If _required_ is "Cupcake=1-3" for both
the relay and client, then yes they can use version "1" instead of "3" if I'm
not mistaken else "Cupcake=3" should be used.

&gt; 
&gt; Are there cases where they don't/won't negotiate to use a new protover
&gt; field, such as for anonymity fragmentation reasons? How do we handle
&gt; those?

As an example for the prop289 (authenticated SENDMEs), we handle that with a
consensus parameters that flip knobs at once to avoid partitioning problem as
much as possible. _And_ then the protover is changed changed into the
_recommended_ or _required_ field depending on where we are.

&gt; 
&gt; (I am trying to gauge the impact of this proposal on our ability to roll
&gt; out new features that clients can use right away vs ensure that old
&gt; clients and relays can still work. It seems to focus on the latter,
&gt; and I want to get a handle on at what expense).
&gt;  
&gt; &gt; 3. Requiring features (for relays)
&gt; &gt; 
&gt; &gt;    We regularly update the directory authorities to require relays to
&gt; &gt;    run certain versions of Tor or later.  We generally do this after a
&gt; &gt;    short outreach campaign to get as many relays as possible to upgrade.
&gt; &gt; 
&gt; &gt;    We MAY make a feature required for relays one month after every
&gt; &gt;    version without it is obsolete and unsupported, though it is better
&gt; &gt;    to wait three months if possible.
&gt; &gt; 
&gt; &gt;    We SHOULD make a feature required for relays within 12 months after
&gt; &gt;    every version without it is obsolete and unsupported.
&gt; 
&gt; As a cultural signaling thing, I think it is better to say to relay
&gt; operators, "keep your relay's operating system and its Tor up to date,
&gt; or please don't run it anymore (aka we'll shut it down for you)."
&gt; 
&gt; I think its bad culturally if we signal to people that we need relays so
&gt; badly that it doesn't matter if they are unpatched, or if the OS is
&gt; unpatched, or if they accidentally publish their relay and ssh keys to a
&gt; public github repo. (Relays running on a system that hasn't received any
&gt; patches or security updates in 12 months is the administrator diligence
&gt; equivalent of publishing admin keys to public github, IMO, if not its
&gt; actual functional equivalent).
&gt; 
&gt; Not only does it encourage a sloppy mindset about paying attention to
&gt; relay systems, it also slows down our development of new protocols, and
&gt; impedes major network upgrades.

I'm very much agreeing with this. We do "force-ask" the directory authorities
to follow the latest stable up to at worst 2 stable behind. There are reasons
for that, maintainenance but also security.

Relays have to be sharp at upgrading... A relay that is not, that we end up
excluding from the consensus because the version is too dangerous (remember
heartbleed), can be considered in my opinion more a liability then a useful
piece.

Having capacity in my opinion is as important as having relays that are up to
date. Every release we rollout very important features that if not deployed
network wide, we don't get the benefit of them until years to come (basically
when the previous LTS is EOL...).

And that forces us into a position of backporting sometimes big block of codes
(DoS subsystem is one example).

Still today, there are still 1000+ relays (on 0.2.9) that can't be used for
Onion Service v3... It is a 1/6th of the network and we've released relay
support 2 years ago... And we have _specific_ code to avoid picking those
relays so all these edge case also accumulates in the code over time.

&gt; 
&gt; (As an aside, I would like to take a hard look at the LTS series, and
&gt; brainstorm how much it would cost us to provide official, reproducibly
&gt; built repos for every distribution whose LTS policies we find expensive
&gt; and cumbersome to support.. Or at least do some analysis of which changes
&gt; have been or will be extremely expensive or impossible to roll out due
&gt; to being blocked on needing to maintain the LTS).

If we could convince Debian to consider an EOL version a "security issue" and
thus accept to pull in the new next supported stable in their stable
package...... that would be grand because then even Debian LTS relay operator
could still benefit from getting newer versions, improving the network and
thus the security of all on Tor.

I know I know, challenges and sometimes a bad idea but with this proposal, it
might be a good time to also take a hard look at how things are and change
paradigm even if it means a painful transition.

&gt;  
&gt; &gt; 4. Requiring features (for clients)
&gt; &gt; 
&gt; &gt;    Clients take the longest time to update, and are often the least
&gt; &gt;    able to fetch upgrades. Because of this, we should be very careful
&gt; &gt;    about making subprotocol versions required on clients, and should
&gt; &gt;    only do so for fairly compelling reasons.
&gt; 
&gt; Is this true? From our Tor Browser metrics (which could use some kind of
&gt; totaling), it looks like most Tor Browser users upgrade pretty quickly:
&gt; https://metrics.torproject.org/webstats-tb.html
&gt; 
&gt; What kinds of clients don't upgrade? I got the impression that it was
&gt; mostly things like old botnet cruft that didn't..

My guts feeling is that relays actually take longer...

&gt;  
&gt; &gt;    We SHOULD NOT make a feature required for clients until it has been
&gt; &gt;    _recommended_ for clients for at first 9 months.
&gt; &gt; 
&gt; &gt;    We SHOULD make a feature required for clients if it has been
&gt; &gt;    _recommended_ for clients for at least 18 months.
&gt; 
&gt; I guess since we're talking about causing clients to exit() in both
&gt; these cases, it might be OK to be conservative here...

Honestly, a client exit()ing is indeed a pain point but we get to that
situation because it is not safe anymore for the client to join the network.
I find that less worrying than relays starting to exit() all the sudden
because we've pushed a required protover, we end up with 3000 dead relays...

I would be for reducing those values much more. As an example, again with
prop289 (authenticated sendmes), we are talking a deployment plan that spans
almost 5 years...

We can't publish FlowCtrl=1 protover until 035 is EOL which is in 3 years and
then once we have that, we have another 9 months to go for _recommended_ and
then 18 months before we can force it in required.

This means 4.5 years of deployment for a _security_ feature that is overall
helping the network and specific attacks... I think we can do much better and
we should.

And maybe that comes with laxing our backport policy or rethinking our LTS?
I'm not entirely sure...

Historically, we do have a quick transition when a version is EOL and the
package follow, see the drops here:

https://metrics.torproject.org/versions.html?start=2018-02-22&amp;end=2019-05-23

As long as package follow, usually the majority of relays do upgrade to them
in matter of some months. Which re-enforces my point about Debian + packaging
;).

&gt; 
&gt; But again, I am really worried about future network scalability and
&gt; performance upgrades getting stalled because we don't want to change
&gt; things that fragment client anonymity.. Does that mean that for some
&gt; kinds of new features, we can't flip a switch because we're trying to
&gt; give clients another 1.5 years *past the EOL of the last LTS* to
&gt; upgrade?

As more examples here, we were forced to backport the DoS subsystem down many
versions, that was some work!... Testing all relay versions, I had to
sometimes wait weeks before my relay could get the Guard flag again... The
pain was real at that time.

If we talk in terms of tor scaling, we'll start doing pretty big drastic
changes to the protocol or even just how tor the binary operates. If every
step takes _years_, we'll fail this "tor game" in my opinion over time.

I know pastly has some results about how different cell scheduling (KIST,
KISTLite, Vanilla) between relays is actually badly affecting the network...
and there is NO way to change that quickly until all our EOL dies out and
transition...

I'm almost at the point of proposing "remote relay upgrades" like Tor Browser
does ... :P. I know, hard, but at least we would be extremely agile on going
forward *but* also rolling back anything that f*** the network (and it
happened before, we had to rollout parameters). Tor Browser did insane work
there so we could cherry-pick on that imo.

&gt; I would enjoy a session in Stockholm that walked through how we would
&gt; use this proposal and proposal 264 to roll out a handful of involved
&gt; changes, such as walking onions, onion service DoS protections, conflux,
&gt; explicit congestion control signaling, full datagram Tor, etc. 

+1

&gt; 
&gt; It would be awesome if such a session could result in a proposal like
&gt; this one, but the flip side: explaining how to use protovers to roll out
&gt; involved features so that clients adopt them quickly and safely (and
&gt; what sorts of changes can be done quickly, and what sorts of changes
&gt; require waiting 4 years for LTS to EOL + 1.5 more years for clients to
&gt; update so as not to fragment anonymity).

Yes, something concrete, something that after Stockholm we can be happy with
and apply it. Not just brainstorm and then this whole thing dies off.

But yes overall, I'm in favor that we think in terms of reducing the waiting
time for anything to be rolled out on the network instead of waiting years for
one single feature to be fully deployed. Some comes from us to change a bit
our policy but also a lot comes from our relay operator to be good operators
and upgrade to our stables much faster.

Cheers!
David

-- 
vA6CSoMhE1PvgViTXGbWkuO/cByD2qCK580/7FoVLDU=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190527104100</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-27 10:41:00-0400</timestampReceived><subject>Re: [tor-dev] Proposal 302: Hiding onion service clients using WTF-PAD</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; On 16 May (14:20:05), George Kadianakis wrote:
&gt;
&gt; Hello!
&gt;
&gt;&gt; 4.1. A dive into general circuit construction sequences [CIRCCONSTRUCTION]
&gt;&gt; 
&gt;&gt;    In this section we give an overview of how circuit construction looks like
&gt;&gt;    to a network or guard-level adversary. We use this knowledge to make the
&gt;&gt;    right padding machines that can make intro and rend circuits look like these
&gt;&gt;    general circuits.
&gt;&gt; 
&gt;&gt;    In particular, most general Tor circuits used to surf the web or download
&gt;&gt;    directory information, start with the following 6-cell relay cell sequence (cells
&gt;&gt;    surrounded in [brackets] are outgoing, the others are incoming):
&gt;&gt; 
&gt;&gt;      [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [BEGIN] -&gt; CONNECTED
&gt;&gt; 
&gt;&gt;    When this is done, the client has established a 3-hop circuit and also
&gt;&gt;    opened a stream to the other end. Usually after this comes a series of DATA
&gt;&gt;    cell that either fetches pages, establishes an SSL connection or fetches
&gt;&gt;    directory information:
&gt;&gt; 
&gt;&gt;      [DATA] -&gt; [DATA] -&gt; DATA -&gt; DATA
&gt;&gt; 
&gt;&gt;    The above stream of 10 relay cells defines the grand majority of general
&gt;&gt;    circuits that come out of Tor browser during our testing, and it's what we
&gt;&gt;    are gonna use to make introduction and rednezvous circuits blend in.
&gt;
&gt; Considering "either fetches pages,..." is in the description, I'm confused how
&gt; only 2 data cells is the grand majority?
&gt;
&gt; A simple "wget torproject.org" gives me an index.html of 16KB meaning at least
&gt; 32 DATA cells. Even a directory fetch can't only be 2 data cells... ?
&gt;

Perhaps I should have made it more clear but the pattern:

        [DATA] -&gt; [DATA] -&gt; DATA -&gt; DATA -&gt; ...

comes from the SSL handshake that happens in most general circuits. In
particular the first two [DATA] cells are the ClientHello etc. SSL
records that get sent by the client, and then the subsequence DATA cells
are the ServerHello etc. of the server.

&gt;&gt; 5.1. Client-side introduction circuit hiding machines [INTRO_CIRC_HIDING]
&gt;&gt; 
&gt;&gt;    These two machines are meant to hide client-side introduction circuits. The
&gt;&gt;    origin-side machine sits on the client and sends padding towards the
&gt;&gt;    introduction circuit, whereas the relay-side machine sits on the middle-hop
&gt;&gt;    (second hop of the circuit) and sends padding towards the client. The
&gt;&gt;    padding from the origin-side machine terminates at the middle-hop and does
&gt;&gt;    not get forwarded to the actual introduction point.
&gt;&gt; 
&gt;&gt;    Both of these machines only get activated for introduction circuits, and
&gt;&gt;    only after an INTRODUCE1 cell has been sent out.
&gt;&gt; 
&gt;&gt;    This means that before the machine gets activated our cell flow looks like this:
&gt;&gt; 
&gt;&gt;     [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [EXTEND2] -&gt; EXTENDED2 -&gt; [INTRODUCE1]
&gt;&gt; 
&gt;&gt;    Comparing the above with section [CIRCCONSTRUCTION], we see that the above
&gt;&gt;    cell sequence matches the one from general circuits up to the first 7 cells.
&gt;&gt; 
&gt;&gt;    However, in normal introduction circuits this is followed by an
&gt;&gt;    INTRODUCE_ACK and then the circuit gets teared down, which does not match
&gt;&gt;    the sequence from [CIRCCONSTRUCTION].
&gt;&gt; 
&gt;&gt;    Hence when our machine is used, after sending an [INTRODUCE1] cell, we also
&gt;&gt;    send a [PADDING_NEGOTIATE] cell, which gets answered by a PADDING_NEGOTIATED
&gt;&gt;    cell and an INTRODUCE_ACKED cell. This makes us match the [CIRCCONSTRUCTION]
&gt;&gt;    sequence up to the first 10 cells.
&gt;&gt; 
&gt;&gt;    After that, we continue sending padding from the relay-side machine so as to
&gt;&gt;    fake a directory download, or an SSL connection setup. We also want to
&gt;&gt;    continue sending padding so that the connection stays up longer to destroy
&gt;&gt;    the "Duration of Activity" fingerprint.
&gt;
&gt; I've looked at the implementation quickly and these DROP cells aren't
&gt; accounted for in our circuit flow control which means that there will be a
&gt; difference between a "real" DATA circuit and a circuit being sent PADDING in
&gt; order to look like the former. And that will be the flow control cell(s)
&gt; (SENDME) coming back from the end point that is receiving the data.
&gt;
&gt; In other words, one circuit (the padded one) will have only a long stream of
&gt; cells going in one direction and the second circuit (with legit data) will
&gt; have that long stream but now and then a cell coming back down the circuit.
&gt;
&gt; I believe this is quite the distinguisher between any circuit seeing much
&gt; padding and one that doesn't? :S
&gt;

I think you are right, but I dont think that these padded intro circuits
will stay open for long enough to need a SENDME cell from the client to
the relay. In particular, the client will receive about 15 cells before
the intro circuit gets teared down.

&gt;&gt; 
&gt;&gt;    To calculate the padding overhead, we see that the origin-side machine just
&gt;&gt;    sends a single [PADDING_NEGOATIATE] cell, wheras the origin-side machine
&gt;
&gt; Typo here "PADDING_NEGOATIATE".
&gt;

Yep. Will fix soon.

&gt;&gt;    sends a PADDING_NEGOTIATED cell and between 7 to 10 DROP cells. This means
&gt;&gt;    that the average overhead of this machine is 11 padding cells.
&gt;&gt; 
&gt;&gt;    In terms of WTF-PAD terminology, these machines have three states (START,
&gt;&gt;    OBF, END). They move from the START to OBF state when the first
&gt;&gt;    non-padding cell is received on the circuit, and they stay in the OBF
&gt;&gt;    state until all the padding gets depleted. The OBF state is controlled by
&gt;&gt;    a histogram which specifies the parameters described in the paragraphs
&gt;&gt;    above. After all the padding finishes, it moves to END state.
&gt;&gt; 
&gt;&gt;    We also set a special WTF-PAD flag which keeps the circuit open even after
&gt;&gt;    the introduction is performed. In particular, with this feature the circuit
&gt;&gt;    will stay alive for the same durations as normal web circuits before they
&gt;&gt;    expire (usually 10 minutes).
&gt;
&gt; I would make sure that the implentation here flags the circuit "Unusable"
&gt; after an introduction since if a client just repicks it to introduce again
&gt; (let say a second SOCKS connection with a different user/pass), then the intro
&gt; point will immediately tear it down rendering this "keep open" feature a bit
&gt; pointless :(.
&gt;

I think this is already the case because we repurpose these "keep-alive"
circuits as a separate circuit purpose (CIRCUIT_PURPOSE_C_PADDING), and
hence they should not be re-used as intro circuits by the client.

I should check again tho.

Thanks for the feedback! :)
Will send a fresh version of the proposal back to the ML soon!

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190528172417</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-05-28 17:24:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal 304: Extending SOCKS5 Onion Service Error Codes</subject><body>

This should make sure these errors are synchronized with that from
controller events HS_DESC HS_DESC_CONTENT HSFETCH HSPOST
and other semantics and logging.
I submitted a bunch of bugs and enhance on HS* controller command
and event failures that can be trac searched and integrated
with this. Some may have been prematurely closed.
There have also been past talk about SOCKS5 on the list
related to returning of some more errors codes via SOCKS5.


Update also
https://gitweb.torproject.org/torspec.git/tree/socks-extensions.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190530165654</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-05-30 16:56:54-0400</timestampReceived><subject>Re: [tor-dev] Network team: New status page for 0.4.1; help needed on ticket triage</subject><body>

On Fri, May 17, 2019 at 8:51 AM Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;
&gt; Hi!
&gt;
&gt; This mail is mainly for the network-team folks, but I'm sending it to
&gt; tor-dev anyway in case it's helpful to anybody else.
&gt;
&gt; I've made a new page for our 0.4.1 status, based on Teor's previous
&gt; 040 status page.  Here it is:
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases/041Status
&gt;
&gt; Note that this time I'm using two different keywords: 041-must and
&gt; 041-should. The difference here is that 041 stuff should be things
&gt; that would really block a release candidate, whereas 041-should stuff
&gt; is stuff that we might in theory release without fixing. (It might
&gt; annoy our users or violate our best practices, so we _should_ try to
&gt; fix it, at least.)
&gt;
&gt; At the bottom of the page are all the tickets in the milestone that
&gt; are *not* marked 041-must or 041-should.  Some of these are things we
&gt; could still fix anyway in 041; many will be removed. Let's triage
&gt; these together!
&gt;
&gt; As discussed at the last meeting, we are currently in feature freeze
&gt; for 0.4.1.  Other than tickets that are marked "postfreeze-ok", we're
&gt; planning not to  take any more features in Tor 0.4.1.  (Network team
&gt; folks, please remember to spend your time on 041-must and 041-should
&gt; tickets, and on Sponsor 19 tickets. If we make enough progress on
&gt; these, we can open up 0.4.2 for merging early.)

Update: I have removed all the tickets that were not 041-should or
041-must from the 0.4.1.x-final milestone.  Before doing this, I gave
them all the keyword "041-deferred-20190530" so that everybody can
look them over and see if I messed up.  Some of them are now in
0.4.2.x-final and some in "Tor: upspecified".

We are now down to 4 "041-must" tickets, 1 of them merge-ready.  We
still have 31 "041-should" tickets, 3 of them merge-ready.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190530224331</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-05-30 22:43:31-0400</timestampReceived><subject>Re: [tor-dev] Merger and Mainline Handovers</subject><body>


&gt; On 31 May 2019, at 02:26, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; 
&gt;&gt; On Wed, Apr 17, 2019 at 5:13 AM teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt; When does 0.4.0 stop being mainline?
&gt;&gt; 
&gt;&gt; It looks like people aren't merging backports to 0.4.0 any more.
&gt;&gt; That's probably a good idea: we should minimise release candidate changes.
&gt;&gt; 
&gt;&gt; When should I start doing 0.4.0 merges as part of the backports?
&gt; 
&gt; Just realized I hadn't answered this.  Here's my suggestion, and
&gt; please let me know if you disagree: I think that once we declare that
&gt; 0.4.1 is stable, 0.4.0 merges count as backports. How does that sound?

That makes sense to me.

If there are any tickets where mainline mergers have missed an 0.4.0 merge,
I can do them when I do the backports to 0.3.5 and earlier.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190531195722</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-05-31 19:57:22-0400</timestampReceived><subject>Re: [tor-dev] Onion Service - Intropoint DoS Defenses</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; juanjo &lt;juanjo@avanix.es&gt; writes:
&gt; 
&gt; &gt; Ok, thanks, I was actually thinking about PoW on the Introduction Point 
&gt; &gt; itself, but it would need to add a round trip, like some sort of 
&gt; &gt; "authentication based PoW" before allowing to send the INTRODUCE1 cell. 
&gt; &gt; At least it would make the overhead of clients higher than I.P. as the 
&gt; &gt; clients would need to compute the PoW function and the I.P. only to 
&gt; &gt; verify it. So if right now the cost of the attack is "low" we can add an 
&gt; &gt; overhead of +10 to the client and only +2 to the I.P. (for example) and 
&gt; &gt; the hidden service doesn't need to do anything.
&gt; &gt; 
&gt; 
&gt; Also see the idea in (b) (1) here: \
&gt; https://lists.torproject.org/pipermail/tor-dev/2019-April/013790.html and how it \
&gt; couples with the "rendezvous approver" from ticket #16059. Given a generic system \
&gt; there, adding proof-of-work is a possibility. 
&gt; Another option would be to add the proof-of-work in the public parts of
&gt; INTRO1 and have the introduction point verify it which is not covered in
&gt; our email above.
&gt; 
&gt; Proof-of-work systems could be something to consider, altho tweaking a
&gt; proof-of-work system that would deny attackers and still allow normal
&gt; clients to visit it (without e.g. burning the battery of mobile clients)
&gt; is an open problem AFAIK.
&gt; 
&gt; 

Here is how this could work after a discussion with dgoulet and arma on IRC:

1) Service enables DoS protection in its torrc.

2) Service uploads descriptor with PoW parameters.

3) Service sends special flag in its ESTABLISH_INTRO to its intro points
   that says "Enable PoW defences".

4) Clients fetch descriptor, parse the PoW parameters and now need to
   complete PoW before they send a valid INTRO1 cell, otherwise it gets
   dropped by the intro point.

All the above seems like they could work for some use cases.

As said above, I doubt there are parameters that would help against DoS
and still allow people to pleasantly visit such onion services through
an uncharged mobile phone, but this choice is up to the onion
service. The onion service can turn this feature on when they want, and
disable it when they want. And mobile clients could also disallow visits
to such sites to avoid battery/CPU burns.

All the above seems likely, but it's significant work. We first need a
proposal to discuss, and then there is lots of code to be written...


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190531202744</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-05-31 20:27:44-0400</timestampReceived><subject>[tor-dev] Fwd: Orbot 16.1.0-BETA-1-tor-0.4.0.4-rc</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Tor 0.4.0.4 working well on Android. We've updated the tor-android
library to 0.4.0.4-rc, and included it in the latest Orbot beta. It is
available via Gradle at the usual spot (see below):

https://github.com/guardianproject/tor-android/releases/tag/tor-android-b=
inary-tor-0.4.0.4-rc

maven { url
"https://raw.githubusercontent.com/guardianproject/gpmaven/master" }

implementation 'org.torproject:tor-android-binary:0.4.0.4-rc'


-------- Forwarded Message --------
Subject: 	Orbot 16.1.0-BETA-1-tor-0.4.0.4-rc
Date: 	Fri, 31 May 2019 16:25:20 -0400
From: 	Nathan of Guardian &lt;nathan@guardianproject.info&gt;
Organisation: 	Guardian Project
To: 	Guardian Dev &lt;guardian-dev@lists.mayfirst.org&gt;



/** 16.1.0-BETA-1-tor-0.4.0.4-rc / 31 May 2019 /
417e4fcd0720be57328d63a96d2c9fc0e119330f **/
TAG:
https://gitlab.com/guardianproject/orbot/tags/16.1.0-BETA-1-tor-0.4.0.4-r=
c

Thanks to @bitmold @sisbell and @eighthave for all the great work, not
to mention the core Tor dev team making all things mobile better every da=
y!

APKs posted at: https://guardianproject.info/releases/

[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-arm64-v8a-release.apk=C2=A0=C2=
=A0=C2=A0
2019-05-31 15:17 =C2=A0=C2=A0=C2=A0 12M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-arm64-v8a-release.apk.asc=C2=A0=
=C2=A0=C2=A0
2019-05-31 15:17 =C2=A0=C2=A0=C2=A0 833 =C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-armeabi-release.apk=C2=A0=C2=A0=
=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 12M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-armeabi-release.apk.asc=C2=A0=
=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 833 =C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-armeabi-v7a-release.apk=C2=A0=
=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 12M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-armeabi-v7a-release.apk.asc=C2=
=A0=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 833 =C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-universal-release.apk=C2=A0=C2=
=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 32M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-universal-release.apk.asc=C2=A0=
=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 833 =C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0 Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-x86-rel=
ease.apk=C2=A0=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 12M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0
Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-x86-release.apk.asc=C2=A0=C2=A0=
=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 833 =C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0 Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-x86_64-=
release.apk=C2=A0=C2=A0=C2=A0
2019-05-31 15:18 =C2=A0=C2=A0=C2=A0 12M=C2=A0=C2=A0=C2=A0 =C2=A0
[ ]=C2=A0=C2=A0=C2=A0 Orbot-16.1.0-BETA-1-tor-0.4.0.4-rc-fullperm-x86_64-=
release.apk.asc


417e4fcd update version to 16100003 aka 16.1.0-BETA-1-tor-0.4.0.4-rc
7ae000d0 fix pdnsd/VPN support
dde1957d Merge pull request #219 from bitmold/delete_minimalperm_manifest=

a251d52f Merge pull request #218 from bitmold/ndk_app_platform_warning
eda464bb remove incorrect torFile assignment
a1c5806a update tor-android to 0.4.0.4-rc
ad2e875b We no longer use the minimalperm product flavor so there's no
need to keep this manifest file in app/src
917e49f5 Removes warning on ndk-build where the target API for NDK (16)
is greater than the sdk version defined for the project. Since nothing
was specified in the manifest it defaulted to 1 but we can set
=C2=A0this to Orbot's minSdkVersion of 16 to get rid of this warning
f83a98f4 Merge branch 'sisbell-issue_199'
ff7d3dd5 (sisbell-issue_199) Merge branch 'issue_199' of
https://github.com/sisbell/orbot into sisbell-issue_199
7c2cfc3e Merge pull request #212 from sisbell/issue_211
1316fd65 Merge branch 'bitmold-no_personalized_learning_kb'
e3fd4afa (bitmold-no_personalized_learning_kb) Merge branch
'no_personalized_learning_kb' of https://github.com/bitmold/orbot into
bitmold-no_personalized_learning_kb
aa8ad867 Merge pull request #204 from bitmold/unreferenced_classes
16826a49 Merge branch 'bitmold-removed_obsolete_version_checks'
17154609 (bitmold-removed_obsolete_version_checks) Merge branch
'removed_obsolete_version_checks' of https://github.com/bitmold/orbot
into bitmold-removed_obsolete_version_checks
0e4b42a7 add close bracket
4cee987c Merge branch 'master' into removed_obsolete_version_checks
08c35bd3 Remove unused resources.
ae4ce1c9 Fixes #211: Resource Not Found on Command Line Build
2fb7e05a Merge pull request #210 from eighthave/fastlane
57120100 rename all metadata locale dirs after the Fastlane/Play names
baced180 setup Fastlane to upload to Google Play
d2feefdd Removed Obsolete @TaretApi Annotations for API Levels that are
lower than Orbot's minimum, API Level 16
a32452e7 Make text inputs in Orbot declare that they do want to opt out
of IME personalized learning. Of course, IMEs may ignore this request,
but it's a nudge in the direction of Tor's general philosophy
on user privacy, particularly with regards to minimizing the footprint
that a Tor app leaves on the user's device.
7d8e41a6 Removed Constraint Layout Dependency
5d04d418 Removed Unused Classes
2b6abd7e Removed Obsolete Version Checks
cd6560fa Merge pull request #202 from bitmold/no_constraint_layout
a5d5c99f (public/master, gl/master) remove unused launcher art
9257b66f don't shrink or minify for now
56917567 (tag: 16.0.6-BETA-2-tor-0.3.5.8) many small changes to support
new binary loading, startup and more - improved handling of port
conflicts - fixed loading of tor binary on arm64-v8a - changed how w
e execute shell commands
8ed080f9 Removed Constraint Layout Dependency
2a76b7af (tag: 16.0.6-BETA-1-tor-0.3.5.8) updated to SDK 28, added
android.permission.FOREGROUND_SERVICE permission
fb14c76c fixed strings with two many \\ escapes
45575772 updating to tor-0.3.5.8-rc to add support for Android Q
22d5ffdf update gradle tools
76796fea Merge pull request #200 from eighthave/fastlane-supply
6ba0cecc add .gitlab-ci.yml setup with errorprone
3face00a build gradle to 4.4.1, and make gradlew verify the download
69bd7fe9 move app store graphics into fdroid/fastlane file layout
f93c11e7 Merge pull request #190 from SkewedZeppelin/master
8ab13f63 Fixup bad indentation from 6e4b7008
12b91c44 Expose PreferIPv6 and NoIPv4Traffic options
8ad76680 Move Google repo above jcenter
d4befad1 cleanup and binary loading fixes
2d4e2a5f update tor to 0.3.5.6-RC
0f314214 (tag: 16.0.5-RC-2-tor-0.3.4.9) update to 16.0.5-RC-2-tor-0.3.4.9=

2c59c848 ensure startForeground() is always immediately called - since
we use startForegroundServce() we must ensure the receiving service
complies!






["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190401214622</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-04-01 21:46:22-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor (teor) (teor)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,
thanks for your support!

I've modified Dockerfiles to properly install the right Tor version and
starting two relays with both   scripts.
The images have been released on Docker Hub too.

Next step for me is preparing script and image for easily setting up a
bridge.

Since all containers created are Linux containers, and since all my
Dockerfiles are "one shot configurations", I will release bash scripts soon.

I will contact the community very soon for more advices on relays, and
promote-review the project (since the project is newborn, I want to spread
for find issues and fix them).

If you want to control all the released code and images, the two principal
repositories are:
https://github.com/randomtable/ChimeraOS
https://hub.docker.com/u/alessandrofiori

Many thanks

Il giorno lun 1 apr 2019 alle ore 14:00 &lt;
tor-dev-request@lists.torproject.org&gt; ha scritto:

&gt; Send tor-dev mailing list submissions to
&gt;         tor-dev@lists.torproject.org
&gt;
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt;         https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt;         tor-dev-request@lists.torproject.org
&gt;
&gt; You can reach the person managing the list at
&gt;         tor-dev-owner@lists.torproject.org
&gt;
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt;
&gt;
&gt; Today's Topics:
&gt;
&gt;    1. Re: Docker images for help people to run Tor (teor) (teor)
&gt;    2. Next Network Team Meeting Time (teor)
&gt;
&gt;
&gt; ----------------------------------------------------------------------
&gt;
&gt; Message: 1
&gt; Date: Mon, 1 Apr 2019 12:57:35 +1000
&gt; From: teor &lt;teor@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Docker images for help people to run Tor (teor)
&gt; Message-ID: &lt;EBC8EE49-155E-4B26-BC19-E2B0642FF2DB@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hi,
&gt;
&gt; &gt; On 1 Apr 2019, at 07:55, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; Hi,
&gt; &gt; I would like to share with the community some tests I've made for
&gt; setting up a "swarm" of Tor relays.
&gt; &gt;
&gt; &gt; I setted up 3 exit relays and 3 middle relays on the same IPv4 address,
&gt; to make some testing, and the entire swarm works like a charm.
&gt; &gt;
&gt; &gt; Due to Tor limitation, I have decided to build a template for preparing
&gt; the cluster, and upload it to GitHub.
&gt; &gt;
&gt; &gt; You can find the example mini-cluster here:
&gt; &gt; https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm
&gt; &gt;
&gt; &gt; I have tested the exit capabilities on another network with different
&gt; public IP address.
&gt; &gt;
&gt; &gt; All the relays have published their own descriptors, I have prepared the
&gt; containers as a single, separated machines.
&gt; &gt;
&gt; &gt; The process is different from preparing a single relay, because of
&gt; Docker build process.
&gt; &gt;
&gt; &gt; I have disabled caching during the cluster process, so i have been able
&gt; to modify torrc without issues.
&gt; &gt;
&gt; &gt; Because  its very interesting, attached to this e-mail there is the
&gt; console Logs from the 6 relays.
&gt; &gt;
&gt; &gt; All containers are read-only, so the entire relay will destroy at the
&gt; end of session.
&gt; &gt;
&gt; &gt; I hope this can be useful.
&gt;
&gt; Tor clients will only see 2 of your 6 relays, because the Tor directory
&gt; authorities only publish 2 relays per IPv4 address.
&gt;
&gt; Also, please use the deb.torproject.org repositories to get the latest
&gt; version of tor:
&gt; Mar 31 19:57:08.000 [warn] Please upgrade! This version of Tor (0.3.3.9)
&gt; is not recommended, according to the directory authorities. Recommended
&gt; versions are:
&gt; 0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu
&gt;
&gt; T
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL: &lt;
&gt; http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/f30ddefa/attachment-0001.html
&gt; &gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 2
&gt; Date: Mon, 1 Apr 2019 14:45:42 +1000
&gt; From: teor &lt;teor@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] Next Network Team Meeting Time
&gt; Message-ID: &lt;68735AED-467B-40EF-B8E2-98417723FD51@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hi,
&gt;
&gt; The next network team meeting is at 2300 UTC on Tuesday 2 April.
&gt;
&gt; Here is our full April schedule:
&gt;     * Tuesday 2 April at 2300 UTC
&gt;     * Monday  8 April at 1700 UTC
&gt;     * Monday 15 April at 1700 UTC
&gt;     * Tuesday 23 April at 1700 UTC (Monday 22 April is the Easter Monday
&gt; public holiday)
&gt;     * Monday 29 April at 1700 UTC
&gt;
&gt; Daylight saving changed recently, so at least one of these meetings
&gt; will be at a different local time for you.
&gt;
&gt; Our 1700 UTC meeting tracks north american daylight saving time.
&gt; Our 2300 UTC meeting does not change for daylight saving time.
&gt;
&gt; T
&gt;
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
&gt;
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 833 bytes
&gt; Desc: Message signed with OpenPGP
&gt; URL: &lt;
&gt; http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/b2888df3/attachment-0001.sig
&gt; &gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Subject: Digest Footer
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; End of tor-dev Digest, Vol 99, Issue 1
&gt; **************************************
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;thanks for your \
support!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've modified Dockerfiles to properly install \
the right Tor version and starting two relays with both     scripts.&lt;/div&gt;&lt;div&gt;The \
images have been released on Docker Hub too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Next step for \
me is preparing script and image for easily setting up a \
bridge.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Since all containers created are Linux containers, \
and since all my Dockerfiles are "one shot configurations", I will release \
bash scripts soon.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I will contact the community very soon \
for more advices on relays, and promote-review the project (since the project is \
newborn, I want to spread for find issues and fix them).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
you want to control all the released code and images, the two principal repositories \
are:&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/randomtable/ChimeraOS"&gt;https://github.com/randomtable/ChimeraOS&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;&lt;a href="https://hub.docker.com/u/alessandrofiori"&gt;https://hub.docker.com/u/alessandrofiori&lt;/a&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Many \
thanks&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;Il giorno lun 1 apr 2019 alle ore 14:00 &lt;&lt;a \
href="mailto:tor-dev-request@lists.torproject.org"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&gt; \
ha scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Send tor-dev mailing \
                list submissions to&lt;br&gt;
            &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
To subscribe or unsubscribe via the World Wide Web, visit&lt;br&gt;
            &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 or, via email, send a message with subject or body 'help' to&lt;br&gt;
            &lt;a href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
You can reach the person managing the list at&lt;br&gt;
            &lt;a href="mailto:tor-dev-owner@lists.torproject.org" \
target="_blank"&gt;tor-dev-owner@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
When replying, please edit your Subject line so it is more specific&lt;br&gt;
than "Re: Contents of tor-dev digest..."&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Today's Topics:&lt;br&gt;
&lt;br&gt;
     1. Re: Docker images for help people to run Tor (teor) (teor)&lt;br&gt;
     2. Next Network Team Meeting Time (teor)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
Message: 1&lt;br&gt;
Date: Mon, 1 Apr 2019 12:57:35 +1000&lt;br&gt;
From: teor &lt;&lt;a href="mailto:teor@riseup.net" \
                target="_blank"&gt;teor@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Subject: Re: [tor-dev] Docker images for help people to run Tor (teor)&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:EBC8EE49-155E-4B26-BC19-E2B0642FF2DB@riseup.net" \
                target="_blank"&gt;EBC8EE49-155E-4B26-BC19-E2B0642FF2DB@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hi,&lt;br&gt;
&lt;br&gt;
&gt; On 1 Apr 2019, at 07:55, Alessandro Fiori &lt;&lt;a \
href="mailto:alefiori3@gmail.com" target="_blank"&gt;alefiori3@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt; &lt;br&gt;
&gt; Hi,&lt;br&gt;
&gt; I would like to share with the community some tests I've made for setting up \
a "swarm" of Tor relays.&lt;br&gt; &gt; &lt;br&gt;
&gt; I setted up 3 exit relays and 3 middle relays on the same IPv4 address, to make \
some testing, and the entire swarm works like a charm.&lt;br&gt; &gt; &lt;br&gt;
&gt; Due to Tor limitation, I have decided to build a template for preparing the \
cluster, and upload it to GitHub.&lt;br&gt; &gt; &lt;br&gt;
&gt; You can find the example mini-cluster here:&lt;br&gt;
&gt; &lt;a href="https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm" \
rel="noreferrer" target="_blank"&gt;https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm&lt;/a&gt; \
&lt;br&gt; &gt; &lt;br&gt;
&gt; I have tested the exit capabilities on another network with different public IP \
address.&lt;br&gt; &gt; &lt;br&gt;
&gt; All the relays have published their own descriptors, I have prepared the \
containers as a single, separated machines.&lt;br&gt; &gt; &lt;br&gt;
&gt; The process is different from preparing a single relay, because of Docker build \
process.&lt;br&gt; &gt; &lt;br&gt;
&gt; I have disabled caching during the cluster process, so i have been able to \
modify torrc without issues.&lt;br&gt; &gt; &lt;br&gt;
&gt; Because   its very interesting, attached to this e-mail there is the console \
Logs from the 6 relays.&lt;br&gt; &gt; &lt;br&gt;
&gt; All containers are read-only, so the entire relay will destroy at the end of \
session.&lt;br&gt; &gt; &lt;br&gt;
&gt; I hope this can be useful.&lt;br&gt;
&lt;br&gt;
Tor clients will only see 2 of your 6 relays, because the Tor directory authorities \
only publish 2 relays per IPv4 address.&lt;br&gt; &lt;br&gt;
Also, please use the &lt;a href="http://deb.torproject.org" rel="noreferrer" \
target="_blank"&gt;deb.torproject.org&lt;/a&gt; repositories to get the latest version of \
tor:&lt;br&gt; Mar 31 19:57:08.000 [warn] Please upgrade! This version of Tor (0.3.3.9) is \
not recommended, according to the directory authorities. Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/TorRelayGuide/DebianUbuntu&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
T&lt;br&gt;
-------------- next part --------------&lt;br&gt;
An HTML attachment was scrubbed...&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/f30ddefa/attachment-0001.html" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/f30ddefa/attachment-0001.html&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 2&lt;br&gt;
Date: Mon, 1 Apr 2019 14:45:42 +1000&lt;br&gt;
From: teor &lt;&lt;a href="mailto:teor@riseup.net" \
                target="_blank"&gt;teor@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Subject: [tor-dev] Next Network Team Meeting Time&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:68735AED-467B-40EF-B8E2-98417723FD51@riseup.net" \
                target="_blank"&gt;68735AED-467B-40EF-B8E2-98417723FD51@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hi,&lt;br&gt;
&lt;br&gt;
The next network team meeting is at 2300 UTC on Tuesday 2 April.&lt;br&gt;
&lt;br&gt;
Here is our full April schedule:&lt;br&gt;
      * Tuesday 2 April at 2300 UTC&lt;br&gt;
      * Monday   8 April at 1700 UTC&lt;br&gt;
      * Monday 15 April at 1700 UTC&lt;br&gt;
      * Tuesday 23 April at 1700 UTC (Monday 22 April is the Easter Monday public \
                holiday)&lt;br&gt;
      * Monday 29 April at 1700 UTC&lt;br&gt;
&lt;br&gt;
Daylight saving changed recently, so at least one of these meetings&lt;br&gt;
will be at a different local time for you.&lt;br&gt;
&lt;br&gt;
Our 1700 UTC meeting tracks north american daylight saving time.&lt;br&gt;
Our 2300 UTC meeting does not change for daylight saving time.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
teor&lt;br&gt;
----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
-------------- next part --------------&lt;br&gt;
A non-text attachment was scrubbed...&lt;br&gt;
Name: signature.asc&lt;br&gt;
Type: application/pgp-signature&lt;br&gt;
Size: 833 bytes&lt;br&gt;
Desc: Message signed with OpenPGP&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/b2888df3/attachment-0001.sig" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190401/b2888df3/attachment-0001.sig&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Subject: Digest Footer&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
End of tor-dev Digest, Vol 99, Issue 1&lt;br&gt;
**************************************&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190403225424</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-04-03 22:54:24-0400</timestampReceived><subject>Re: [tor-dev] Tor Directory Meta-Format + Line Wrapping?</subject><body>

On 4/3/19, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;&gt; When line wrapping, implementations MUST wrap lines
&gt;&gt; at 64 characters.  Upon decoding, implementations MUST
&gt;&gt; ignore and discard all linefeed characters.

The sectiion quoted is here...

https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n193


&gt; I can't work out how an implementation is meant to know if a linefeed
&gt; character is meant to be for line-wrapping or if it's meant to be the
&gt; end of a keyword line.

Every "line" of the Document ends in "NL", the meaning of "NL"
depends, line buffer and matching is required for determination.

One distinction is if Keyword is only of KeywordChar+NL without WS.
If so, then thinking could be that you're into optional wrapped Objects.

However... where it can get dicey for third party parsers is
they might start interpreting '^-----BEGIN&lt;WS&gt;' as another
KeywordLine with Argument, not least because KeywordChar
can contain '^-', and such parser won't necessarily know the
keyword dictionary (it would need to inherit that from tor library)
And for them to interpret say, '^[A-Za-z0-9]{64}$', as KeywordLine's
as well. Here is the tor specific magic regarding such knowledge...

228: When interpreting a Document, software MUST ignore
any KeywordLine that starts with a keyword it doesn't recognize;

And 224 is there meant to remove knowledge or confusion by
defining that case and triggering an Object at that moment
since it cannot be a KeywordLine...

224: A Keyword may not be "-----BEGIN".

And even though "220: MAY wrap" may seem to allow otherwise
by appending *in-the-line* the "EndLine" string, it alone being the
end of Object trigger, "Document" writers should probably ensure
that any of their "NOT wrapped" "Base64-encoded-data" strings
have an NL at the end of it, so no inefficient char parsing required.


Perhaps some above is part of what you may be experiencing.


Nit
226: s/keyword/Keyword/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190408110120</emailId><senderName>Jeff Burdges</senderName><senderEmail>burdges@gnunet.org</senderEmail><timestampReceived>2019-04-08 11:01:20-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

[Attachment #2 (multipart/signed)]


If I understand, proposal 295 looks similar to either BEAR or LION from the LIONNESS. \
I vaguely recall both BEAR and LION being "broken" in some setting, although I cannot \
site the paper.  Anyone?

I suppose the BEAR and LION break originates from using them for authentication while \
proposal 295's separate SVer function fixes this?

Jeff


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEBA1bLpAiCdPXvXG3q6x/0cwQCnQFAlyrKgAACgkQq6x/0cwQ
CnRTAg/8DzVoLpKVeOamvz/xJh6k+NeTEudZKoanG4cE34g+or0X6dQNn2cqFB1F
XlTFthiep0HMH6slvkLysZZebjHTKtS+zzw4PXrxXqWznJaurADEV7bCPPkDNtFh
7Lr5nGe6Xb1eg3qrEYRWZbV3dKmCoCf6P2tlby08O5D6OLVMwrsgBw9vNz4SIWcL
2v5AqB4u/7mJYfkOO+L/J1sEwEZsBiQFYpWWQQKVcrECCmDVGm8Mvhu40w1nnJTa
RwHKQ9GolpHOLIXXwDPdv402zPAkiTefBYnN550/ENb8o9PDIR0CLYN5Ne7PXT5G
ZqDdv73+YBe69sYe+mbuK0bJD7D4yo6LHkASzYUnsyjwNeilpLxaHPtoN8nnWVWx
0wsOfJ3+aJRVJnRNxEYTZSglcTk0HYefl76NeFNQk4sWdbLjDMjuTvg9M1yz/Hso
9MfyOkodgJdwPO1h9scGJvYipiRlPQRksZAi3fhwN2piGHh0eCiJqv6kClHuMoRe
ItqgcSkoNBZKPmJohiee9DtLHP3bHZy6q12LkJ3A9kKGLWOTnCwRCBY4Fg2zBuTp
7Fi3Ib9tYPZ+nPeyxPUYZ12u9bwID33KMWT/W2xqV9NqhbrM76kaq8QJfY2VCOLG
Hwd5f6qtkeow31vYo7aggj1vjVY7wyFIWYrTsr2+1XVJhD8KkwQ=
=/pDS
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190409104633</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-04-09 10:46:33-0400</timestampReceived><subject>Re: [tor-dev] Scripts and VMs for helping people setup a relay or bridge</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 04/04/2019 23:56, Alessandro Fiori wrote:
&gt; since i have released some Docker images for help people to run their
&gt; own service or relays, i'm releasing some Virtualbox images and scripts
&gt; for who want to run their relays.
&gt; 
&gt; Virtual machines are in importable OVA format, and are based on Ubuntu
&gt; Command Line Install, for a very light-weight system.

Do we have some central location for all of these devops approaches to
running Tor relays?

How do your Docker images differ from jessfraz's?
https://github.com/jessfraz/dockerfiles/tree/master/tor-relay

Do we have some (opt-in) way of tracking how people are using these
images? Perhaps using the ContactInfo Sharing Specification?
https://github.com/irl/ContactInfo-Information-Sharing-Specification/blob/master/README.md

&gt; I have released, for now, a Script and Virtual Machine for Tor middle
&gt; relay, next days i will release bridge scripts for bridge with pluggable
&gt; transports pre-installed.
&gt; 
&gt; The Script repository is located here:
&gt; https://github.com/randomtable/ChimeraOS/tree/master/Scripts  
&gt; 
&gt; The Virtual Machines repository is located here:
&gt; https://github.com/randomtable/ChimeraOS/tree/master/VMs    
&gt; 
&gt; I'm writing to "dev" mailing list, because a very expert eye is always
&gt; needed.

Expert eyes are also available on the -relays mailing list. This topic
really belongs there.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190411215119</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-04-11 21:51:19-0400</timestampReceived><subject>[tor-dev] ICLab testing of default bridges</subject><body>

At the anti-censorship meeting today you mentioned talking to ICLab
about testing the default bridges. I believe that ICLab is already
testing at least a portion of the default bridges; they may have data
that you just have to ask for.

OONI and ICLab test the default bridges as a result of my, Lynn's, and
Qi's asking them to while we were studying default bridge blocking. The
data exist but we never carefully analyzed them. You can see what little
analysis we did at https://arxiv.org/abs/1709.08718 Figure 1 and
Section 5.9.

The data we used is in data/iclab/tor_jsons.tar.bz2 in
https://repo.eecs.berkeley.edu/git-anon/users/fifield/proxy-probe-paper.git.
It's a lot of JSON files that have TCP connect, TLS certificate fetch,
HTTP fetch, and TCP traceroute for each destination. We sent them the
list of bridges in September 2016 and they started measuring shortly
after that. The most recent update to the bridge list we sent them was
in August 2017 for https://bugs.torproject.org/23166.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190412211110</emailId><senderName></senderName><senderEmail>blacklight447@tutanota.com</senderEmail><timestampReceived>2019-04-12 21:11:10-0400</timestampReceived><subject>Re: [tor-dev] Release: obfs4proxy-0.0.10</subject><body>

What a great news, thanks for your work!

Apr 12, 2019, 7:31 AM by yawning@schwanenlied.me:

&gt; Hello,
&gt; 
&gt; I just tagged obfs4proxy-0.0.10.  The primary changes are a minor fix to
&gt; the meek_lite behavior when using `utls` as the TLS implementation, and
&gt; a series of updates (primarily following upstream) to the `utls` library.
&gt; 
&gt; Tarball/Signature:
&gt; https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz \
&gt; &lt;https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz&gt;
&gt;  https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz.asc \
&gt; &lt;https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.10.tar.xz.asc&gt;
&gt;  
&gt; Changes in version 0.0.10 - 2019-04-12:
&gt; - Disable behavior distinctive to crypto/tls when using utls.
&gt; - Bump the version of the utls fork.
&gt; 
&gt; Regards,
&gt; 
&gt; -- 
&gt; Yawning Angel
&gt; 

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190416122710</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-04-16 12:27:10-0400</timestampReceived><subject>Re: [tor-dev] Support for clients using shutdown(SHUT_WR)</subject><body>

[Attachment #2 (multipart/signed)]


On 10 Apr (14:27:06), Rob Jansen wrote:

Greetings Rob!

&gt; Is there any plan to support shutdown(SHUT_WR) using RELAY_FIN cells now
&gt; that Tor is itself using shutdown()? (I didn't see any tickets about it
&gt; after a brief search.)

It is not implemented and there are no open proposals so the quick answer to
your question is no unfortunately. :).

Cheers!
David

-- 
cj1gk6WhFXbAQdq6Q/2u5TcSxhVaLDrHnAish8gT0nY=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190417091325</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-17 09:13:25-0400</timestampReceived><subject>[tor-dev] Merger and Mainline Handovers</subject><body>

[Attachment #2 (multipart/signed)]


Hi Nick, George, David,

(I'm sending this email to tor-dev so everyone knows how Core Tor
merges are going.)


Mainline Mergers

David is back from leave, so I'm going to stop doing mainline merges.
But please let me know if there's a merge I can help with.
(Email or Signal is best, IRC has a lot of backlog.)

Do we need to do a handover some time?
The next team meeting might be a good time.


Mainline Merge Ready Tickets

I moved my mainline merge trac wiki queries to this page:
=
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/Mainli=
neMerges

That page should show all of the mainline merge_ready tickets, sorted
by owner and reviewer. Your name is in bold, so you can work out which
tickets you should merge. (We want 3 people to look at every ticket
before it merges, except for trivial changes.)

Here is our full list of task tracking wiki pages:
=
https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam#TaskTr=
acking


When does 0.4.0 stop being mainline?

It looks like people aren't merging backports to 0.4.0 any more.
That's probably a good idea: we should minimise release candidate =
changes.

When should I start doing 0.4.0 merges as part of the backports?


Backport Status

We released 0.4.0.4-rc last week, so I'm going to backport some
low-risk changes to 0.2.9 and later. Most of these changes have been
tested in 0.4.0.3-alpha.

I should be able to do the backports tomorrow or Tuesday.

Here are the backports for the next few days:
=
https://trac.torproject.org/projects/tor/wiki/user/teor#Backports:0.5daysp=
erweek

Here are the backports I will do after I get back from my leave in May:
https://trac.torproject.org/projects/tor/wiki/user/teor/HiddenBackports

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly27jUACgkQEP6qDnB1
ZypZ6BAAhg07jmpwBbkIZZ+u+Ff7x+OL2/OVV2Kum3IqzkU+QB1iPEvZxhr+oNiJ
2N26QOPBbrar3GCzQSSgQi5ePRLnqGFlqwNti7BccsNxhfb5jPjTiO4mHRJ3/iS7
4OJuQiJlD1QvAtNy+xOeTyoHKj4gNskugZq0FzdJH4kVz5AaacJcQ7vP4llprmn5
26xf7+mIQVsuUhGKCYL5CN2E2IOJXDMZbdrNXls4r1sdBRJoDxUGKygISuvo7RQv
N/kmj1S9a2Suk9IWnlqoshCpgrJ0dVhXeLm5Sn7xfYyo6oyh77HjvT+oi3pQdHWP
G3TZq+tpwyIO4gKMPVoBDnPUOGi1hONUFMeaJ9DcaxrUja0LMKpg5vxcp8WtFIMJ
fr90beC+76L+EXWn32Y5yZ63TyNHp33yXUIHApa08WhLeuza7tY4bSTzdkR2yYDK
OeUQrl3rhXqIcLD9Q2ixDFlBJXjICyczztFcGLRSAceZRwrWgxnkeO7LfKz99356
SnAcz7InRX3Z+CHqSJCdwbMuKbSyN1ElKTUHAYh7oK7aTD4LG9b+ILPUxWVqbuQX
ExnSd1PtmyIk5XiqjbX6cdhFHZa+ksHqftDtSk8l/qoRZ2vbuaMzd8BjZ6n8mgs1
uMRryMo0FnHVcTarYZ7uI6K0N+TKbKwMRrjNm/3wOtzKQRPCfmA=
=gbUR
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190419004134</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-19 00:41:34-0400</timestampReceived><subject>Re: [tor-dev] Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 19 Apr 2019, at 04:23, Ali Mmo &lt;mtyali.lovearez@gmail.com&gt; wrote:
&gt; 
&gt; How should i participate???
&gt; 
&gt; On Apr 18, 2019 9:35 PM, "Zachary Crownover" &lt;zachary.crownover@gmail.com&gt; wrote:
&gt; How does one attend the meetings?
&gt; 
&gt; On Apr 18, 2019, at 9:58 AM, Ali Mmo &lt;mtyali.lovearez@gmail.com&gt; wrote:
&gt; 
&gt;&gt; Hi excuse me I'm in the Iran and I can not attend the meeting

The network team meetings are online in the #tor-meeting channel on
the irc.oftc.net IRC network. irc.oftc.net supports IRC over Tor.

You'll need an IRC application to participate.

We rotate times, so that most people can participate at least once a
month.

&gt;&gt; On Apr 18, 2019 4:48 AM, "teor" &lt;teor@riseup.net&gt; wrote:
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; The next network team meeting is at 2300 UTC on Tuesday 23 April.
&gt;&gt; (Our "patch party" and "first meeting of the month" time.)
&gt;&gt; 
&gt;&gt; Here is our schedule for the next few months:
&gt;&gt; 
&gt;&gt; April schedule:
&gt;&gt;     * Tuesday 23 April at 2300 UTC (at the "patch party" time)
&gt;&gt;     * Monday 29 April at 1700 UTC
&gt;&gt; 
&gt;&gt; May schedule:
&gt;&gt;     * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)
&gt;&gt;     * Monday 13 May at 1700 UTC
&gt;&gt;     * Monday 20 May at 1700 UTC
&gt;&gt;     * Monday 27 May at 1700 UTC
&gt;&gt; 
&gt;&gt; June schedule:
&gt;&gt;     * Tuesday 4 June at 2300 UTC (first meeting of the month)
&gt;&gt;     * Monday 10 June at 1700 UTC
&gt;&gt; 
&gt;&gt; T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly5GT4ACgkQEP6qDnB1
ZypDFQ/8CmAb864blpzIjR5pB0OCl9CCTVbdKjUo4Pc64/8w+g+nLQywy9PfBk6V
obgDXM8KJucIEquFJpC0DDtJrsisSiTisZrTT7goPSOP+SJS/kqfOaD1fNl9b2v9
RHS4UE4gW0PLSIEUGEwqKajYRSfHabDkO1hm9E2O7KC8/OhPig0UFg/l9xmpzO1g
/WoV+B2rfNDHFZ43SKJSjHVuz4X8CBu0NPSrfd6bOSF5LjsC5DS1LLCibwBWfG7r
N2+fabXWkBA4d4KPE1t/PEuck3qGeGn8dkbm9P7rnIqEC8x219/5AtL0DXak+TlS
Gp5276aOyrSyKLF1L4CetMcbruT8JTeY0oAT4tnPj6BCEMz6NGJVtt2ysZ/p9zYw
5g2wjA5NmabLU3CHGvoFzCGQHhQojGxHvSVfGrNIvfE1kxwqPvtdezQ5SAohh26G
2uHzWHc1XaGvrN9wqY4FSMpXCGkXM0PPffRl/K2V0R1jpqnHGQgfz3eiBSW/ZPSC
aodgFbxVSv/UcTPWjiHFSRk76a6wZSzeLK+3RUbBpv6m+gwhAi7ujneKGnkBLzM+
uynoNjeTiFT3UnMsZussy4CHlqbIuJ183vwaQuKAsX0ko3Ihphc5enpcdNOdWEJJ
hkqAtdJRv9TTnnJBnf8/kF9cKHM8maKeFkJq3EdIukbJUOGozL8=
=Zzl1
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190403174801</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-04-03 17:48:01-0400</timestampReceived><subject>[tor-dev] Tor Directory Meta-Format + Line Wrapping?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

Looking at the specification for the Tor directory protocol's
meta-format, it has some text on line wrapping:

&gt; When line wrapping, implementations MUST wrap lines
&gt; at 64 characters.  Upon decoding, implementations MUST
&gt; ignore and discard all linefeed characters.

I can't work out how an implementation is meant to know if a linefeed
character is meant to be for line-wrapping or if it's meant to be the
end of a keyword line.

Are there any implementations that actually do line wrapping?

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190301170439</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-03-01 17:04:39-0400</timestampReceived><subject>[tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-tagging a</subject><body>

Hi!

I'm sending a new version of proposal 295 from Tomer Ashur, Orr
Dunkelman, and Atul Luykx.  It's an updated version of their design
for an improved relay cell encryption scheme, to prevent tagging
attacks.

This proposal is checked into the torspec repository.  I'm also
linking to a diagram for this scheme (and its latex source) from Atul
Luykx: https://people.torproject.org/~nickm/prop295/

Finally, I have a draft python reference implementation for an older
version of this proposal.  I hope to be updating it soon and sending
out a link next week.

cheers!  -- Nick



Filename: 295-relay-crypto-with-adl.txt
Title: Using ADL for relay cryptography (solving the crypto-tagging attack)
Author: Tomer Ashur, Orr Dunkelman, Atul Luykx
Created: 22 Feb 2018
Last-Modified: 1 March 2019
Status: Open


0. Context

   Although Crypto Tagging Attacks were identified already in the
   original Tor design, it was not before the rise of the
   Procyonidae in 2012 that their severity was fully realized. In
   Proposal 202 (Two improved relay encryption protocols for Tor
   cells) Nick Mathewson discussed two approaches to stymie tagging
   attacks and generally improve Tor's cryptography. In Proposal 261
   (AEZ for relay cryptography) Mathewson puts forward a concrete
   approach which uses the tweakable wide-block cipher AEZ.

   This proposal suggests an alternative approach to Proposal 261
   using the notion of Release (of) Unverified Plaintext (RUP)
   security. It describes an improved algorithm for circuit
   encryption based on CTR-mode which is already used in Tor, and an
   additional component for hashing.

   Incidentally, and similar to Proposal 261, this proposal employs
   the ENCODE-then-ENCIPHER approach thus it improves Tor's E2E
   integrity by using (sufficient) redundancy.

   For more information about the scheme and a security proof for
   its RUP-security see

       Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting
       Authenticated Encryption Robustness with Minimal
       Modifications. CRYPTO (3) 2017: 3-33

   available online at https://eprint.iacr.org/2017/239 .

   For authentication between the OP and the edge node we use
   the PIV scheme: https://eprint.iacr.org/2013/835

2. Preliminaries

2.1 Motivation

   For motivation, see proposal 202.

2.2. Notation

   Symbol               Meaning
   ------               -------
   M                    Plaintext
   C_I                  Ciphertext
   CTR                  Counter Mode
   N_I                  A de/encryption nonce (to be used in CTR-mode)
   T_I                  A tweak (to be used to de/encrypt the nonce)
   T'_I                 A running digest
   ^                    XOR
   ||                   Concatenation
          (This is more readable than a single | but must be adapted
          before integrating the proposal into tor-spec.txt)

2.3. Security parameters

   HASH_LEN -- The length of the hash function's output, in bytes.

   PAYLOAD_LEN -- The longest allowable cell payload, in bytes. (509)

   DIG_KEY_LEN -- The key length used to digest messages (e.g.,
   using GHASH). Since GHASH is only defined for 128-bit keys, we
   recommend DIG_KEY_LEN = 128.

   ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We
   recommend ENC_KEY_LEN = 128.

2.4. Key derivation (replaces Section 5.2.2)

   For newer KDF needs, Tor uses the key derivation function HKDF
   from RFC5869, instantiated with SHA256. The generated key
   material is:

                 K = K_1 | K_2 | K_3 | ...

   where, if H(x,t) denotes HMAC_SHA256 with value x and key t,
         and m_expand denotes an arbitrarily chosen value,
         and INT8(i) is an octet with the value "i", then
             K_1     = H(m_expand | INT8(1) , KEY_SEED )
         and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED ),
   in RFC5869's vocabulary, this is HKDF-SHA256 with info ==
   m_expand, salt == t_key, and IKM == secret_input.

   When used in the ntor handshake a string of key material is
   generated and is used in the following way:

   Length       Purpose                         Notation
   ------        -------                        --------
   HASH_LEN     forward digest IV               DF      *
   HASH_LEN     backward digest IV              DB      *
   ENC_KEY_LEN  encryption key                  Kf
   ENC_KEY_LEN  decryption key                  Kb
   DIG_KEY_LEN  forward digest key              Khf
   DIG_KEY_LEN  backward digest key             Khb
   ENC_KEY_LEN  forward tweak key               Ktf
   ENC_KEY_LEN  backward tweak key              Ktb
   DIGEST_LEN   nonce to use in the                      *
                  hidden service protocol

      * I am not sure that we need these any longer.

   Excess bytes from K are discarded.

2.6. Ciphers

   For hashing(*) we use GHASH with a DIG_KEY_LEN-bit key. We write
   this as Digest(K,M) where K is the key and M the message to be
   hashed.

   We use AES with an ENC_KEY_LEN-bit key. For AES encryption
   (resp., decryption) we write E(K,X) (resp., D(K,X)) where K is an
   ENC_KEY_LEN-bit key and X the block to be encrypted (resp.,
   decrypted).

   For a stream cipher, unless otherwise specified, we use
   ENC_KEY_LEN-bit AES in counter mode, with a nonce that is
   generated as explained below. We write this as Encrypt(K,N,X)
   (resp., Decrypt(K,N,X)) where K is the key, N the nonce, and X
   the message to be encrypted (resp., decrypted).

   (*) The terms hash and digest are used interchangeably.

3. Routing relay cells

3.1. Forward Direction

   The forward direction is the direction that CREATE/CREATE2 cells
   are sent.

3.1.1. Routing from the Origin

   Let n denote the integer representing the destination node. For
   I = 1...n+1, T'_{I} is initialized to the 128-bit string consisting
   entirely of '0's. When an OP sends a relay cell, they prepare the
   cell as follows:

        The OP prepares the authentication part of the message:

                C_{n+1} = M
                T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
                N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)
                T'_{n+1} = T_{n+1}

        Then, the OP prepares the multi-layered encryption:

                For I=n...1:
                        C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})
                        T_I = Digest(Khf_I,T'_I||C_I)
                        N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})
                        T'_I = T_I

          The OP sends C_1 and N_1 to node 1.

3.1.2. Relaying Forward at Onion Routers

   When a forward relay cell is received by OR I, it decrypts the
   payload with the stream cipher, as follows:

        'Forward' relay cell:

                T_I = Digest(Khf_I,T'_I||C_I)
                N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)
                C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)
                T'_I = T_I

   The OR then decides whether it recognizes the relay cell as
   described below. If the OR recognizes the cell, it processes the
   contents of the relay cell. Otherwise, it passes C_{I+1}||N_{I+1}
   along the circuit if the circuit continues.

   For more information, see section 4 below.

3.2. Backward Direction

   The backward direction is the opposite direction from
   CREATE/CREATE2 cells.

3.2.1. Relaying Backward at Onion Routers

   When a backward relay cell is received by OR I, it encrypts the
   payload with the stream cipher, as follows:

        'Backward' relay cell:

                T_I = Digest(Khb_I,T'_I||C_{I+1})
                N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})
                C_I = Encrypt(Kb_I,N_I,C_{I+1})
                T'_I = T_I

   with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes
   C_I and N_I along the circuit towards the OP.

3.2.2. Routing to the Origin

   When a relay cell arrives at an OP, the OP decrypts the payload
   with the stream cipher as follows:

        OP receives relay cell from node 1:

                For I=1...n, where n is the end node on the circuit:
                        C_{I+1} = Decrypt(Kb_I,N_I,C_I)
                        T_I = Digest(Khb_I,T'_I||C_{I+1})
                        N_{I+1} = T_I ^ D(Ktb_I,T_I ^ N_I)
                        T'_I = T_I

                If the payload is recognized (see Section 4.1),
                then:

                       The sending node is I. Stop, process the
                       payload and authenticate.

4. Application connections and stream management

4.1. Relay cells

  Within a circuit, the OP and the end node use the contents of
  RELAY packets to tunnel end-to-end commands and TCP connections
  ("Streams") across circuits. End-to-end commands can be initiated
  by either edge; streams are initiated by the OP.

        The payload of each unencrypted RELAY cell consists of:

                Relay command           [1 byte]
                'Recognized'            [2 bytes]
                StreamID                [2 bytes]
                Length                  [2 bytes]
                Data                    [PAYLOAD_LEN-23 bytes]

   The 'recognized' field is used as a simple indication that the
   cell is still encrypted. It is an optimization to avoid
   calculating expensive digests for every cell. When sending cells,
   the unencrypted 'recognized' MUST be set to zero.

   When receiving and decrypting cells the 'recognized' will always
   be zero if we're the endpoint that the cell is destined for. For
   cells that we should relay, the 'recognized' field will usually
   be nonzero, but will accidentally be zero with P=2^-16.

   If the cell is recognized, the node moves to verifying the
   authenticity of the message as follows(*):

          forward direction (executed by the end node):

                T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
                Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})
                T'_{n+1} = T_{n+1}

                The message is authenticated (i.e., M = C_{n+1}) if
                and only if Tag = 0

          backward direction (executed by the OP):

                The message is authenticated (i.e., C_{n+1} = M) if
                and only if N_{n+1} = 0


   The old Digest field is removed since sufficient information for
   authentication is now included in the nonce part of the payload.

       (*) we should consider dropping the 'recognized' field
       altogether and always try to authenticate. Note that this is
       an optimization question and the crypto works just as well
       either way.

   The 'Length' field of a relay cell contains the number of bytes
   in the relay payload which contain real payload data. The
   remainder of the payload is padding bytes.

4.2. Appending the encrypted nonce and dealing with version-homogenic
     and version-heterogenic circuits

   When a cell is prepared to be routed from the origin (see Section
   3.1.1) the encrypted nonce N is appended to the encrypted cell
   (occupying the last 16 bytes of the cell). If the cell is
   prepared to be sent to a node supporting the new protocol, S is
   combined with other sources to generate the layer's
   nonce. Otherwise, if the node only supports the old protocol, n
   is still appended to the encrypted cell (so that following nodes
   can still recover their nonce), but a synchronized nonce (as per
   the old protocol) is used in CTR-mode.

   When a cell is sent along the circuit in the 'backward'
   direction, nodes supporting the new protocol always assume that
   the last 16 bytes of the input are the nonce used by the previous
   node, which they process as per Section 3.2.1. If the previous
   node also supports the new protocol, these cells are indeed the
   nonce. If the previous node only supports the old protocol, these
   bytes are either encrypted padding bytes or encrypted data.

5. Security

5.1. Resistance to crypto-tagging attacks

   A crypto-tagging attack involves a circuit with two colluding
   nodes and at least one honest node between them. The attack works
   when one node makes a change to the cell (tagging) in a way that
   can be undone by the other colluding party. In between, the
   tagged cell is processed by honest nodes which do not detect the
   change. The attack is possible due to the malleability property
   of CTR-mode: a change to a ciphertext bit effects only the
   respective plaintext bit in a predicatble way. This proposal
   frustrates the crypto-tagging attack by linking the nonce to the
   encrypted message such that any change to the ciphertext results
   in a random nonce and hence, random plaintext.

   Let us consider the following 3-hop scenario: the entry and end
   nodes are malicious and colluding and the middle node is honest.

5.1.1. forward direction

   Suppose that node I tags the ciphertext part of the message
   (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As
   per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}
   and N_{I+2}. Since C'_{I+2} is different than it should be, so
   are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+2}
   using these values results in a random string for C_{I+2}. Since
   C_{I+2} is now just a random string, it is decrypted into a
   random string and cannot be 'recognized' nor
   authenticated. Furthermore, since C'_{I+1} is different than what
   it should be, T'_{I+1} (i.e., the running digest of the middle
   node) is now out of sync with that of the OP, which means that
   all future cells sent through this node will decrypt into garbage
   (random strings).

   Likewise, suppose that instead of tagging the ciphertext, Node I
   node tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
   I+1 digests the payload the tweak T_{I+1} is find, but using it
   to decrypt N'_{I+1} again results in a random nonce for
   N_{I+2}. This random nonce is used to decrypt C_{I+1} into a
   random C'_{I+2} which is not recognized by the end node. Since
   C_{I+2} is now a random string, the running digest of the end
   node is now out of sync, which prevents the end node from
   decrypting further cells.

5.1.2. Backward direction

   In the backward direction the tagging is done by Node I+2
   untagging by the Node I. Suppose first that Node I+2 tags the
   ciphertext C_{I+2} and sends it to Node I+1. As per Section
   3.2.1, Node I+1 first digests C_{I+2} and uses the resulting
   T_{I+1} to generate a nonce N_{I+1}. From this it is clear that
   any change introduced by Node I+2 influences the entire payload
   and cannot be removed by Node I.

   Unlike in Section 5.1.1., the cell is blindly delivered by Node I
   to the OP which decrypts it. However, since the payload leaving
   the end node was modified, the message cannot be authenticated by
   the OP which can be trusted to tear down the circuit.

   Suppose now that tagging is done by Node I+2 to the nonce part of
   the payload, i.e., N_{I+2}. Since this value is encrypted by Node
   I+1 to generate its own nonce N_{I+1}, again, a random nonce is
   used which affects the entire keystream of CTR-mode. The cell
   again cannot be authenticated by the OP and the circuit is torn
   down.

   We note that the end node can modify the plain message before
   ever encrypting it and this cannot be discovered by the Tor
   protocol. This vulnerability is outside the scope of this
   proposal and users should always use TLS to make sure that their
   application data is encrypted before it enters the Tor network.

5.2. End-to-end authentication

   Similar to the old protocol, this proposal only offers end-to-end
   authentication rather than per-hop authentication. However,
   unlike the old protocol, the ADL-construction is non-malleable
   and hence, once a non-authentic message was processed by an
   honest node supporting the new protocol, it is effectively
   destroyed for all nodes further down the circuit. This is because
   the nonce used to de/encrypt all messages is linked to (a digest
   of) the payload data.

   As a result, while honest nodes cannot detect non-authentic
   messages, such nodes still destroy the message thus invalidating
   its authentication tag when it is checked by edge nodes. As a
   result, security against crypto-tagging attacks is ensured as
   long as an honest node supporting the new protocol processes the
   message between two dishonest ones.

5.3 The Running Digest

   Unlike the old protocol, the running digest is now computed as
   the output of a GHASH call instead of a hash function call
   (SHA256). Since GHASH does not provide the same type of security
   guarantees as SHA256, it is worth discussing why security is not
   lost from computing the running digest differently.

   The running digets is used to ensure that if the same payload is
   encrypted twice, then the resulting ciphertext does not remain
   the same. Therefore, all that is needed is that the digest should
   repeat with low probability. GHASH is a universal hash function,
   hence it gives such a guarantee assuming its key is chosen
   uniformly at random.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190404225602</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-04-04 22:56:02-0400</timestampReceived><subject>[tor-dev] Scripts and VMs for helping people setup a relay or bridge</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,
since i have released some Docker images for help people to run their own
service or relays, i'm releasing some Virtualbox images and scripts for who
want to run their relays.

Virtual machines are in importable OVA format, and are based on Ubuntu
Command Line Install, for a very light-weight system.

I have released, for now, a Script and Virtual Machine for Tor middle
relay, next days i will release bridge scripts for bridge with pluggable
transports pre-installed.

The Script repository is located here:
https://github.com/randomtable/ChimeraOS/tree/master/Scripts

The Virtual Machines repository is located here:
https://github.com/randomtable/ChimeraOS/tree/master/VMs

I'm writing to "dev" mailing list, because a very expert eye is always
needed.

I hope this can be useful for everyone.

Alessandro Fiori

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hi,&lt;div&gt;since i have released some Docker images for help people to \
run their own service or relays, i'm releasing some Virtualbox images and scripts \
for who want to run their relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Virtual machines are in \
importable OVA format, and are based on Ubuntu Command Line Install, for a very \
light-weight system.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have released, for now, a Script and \
Virtual Machine for Tor middle relay, next days i will release bridge scripts for \
bridge with pluggable transports pre-installed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Script \
repository is located here:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/randomtable/ChimeraOS/tree/master/Scripts"&gt;https://github.com/randomtable/ChimeraOS/tree/master/Scripts&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The Virtual Machines repository is located \
here:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/randomtable/ChimeraOS/tree/master/VMs"&gt;https://github.com/randomtable/ChimeraOS/tree/master/VMs&lt;/a&gt; \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm writing to "dev" mailing list, \
because a very expert eye is always needed.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope this can \
be useful for everyone.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alessandro Fiori&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190403080552</emailId><senderName>Jeff Burdges</senderName><senderEmail>burdges@gnunet.org</senderEmail><timestampReceived>2019-04-03 08:05:52-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

[Attachment #2 (multipart/signed)]


If I understand, proposal 295 looks similar to either BEAR or LION from the LIONNESS. \
I vaguely recall both BEAR and LION being "broken" in some setting, although I cannot \
site the paper.  Anyone?

I suppose the BEAR and LION break originates from using them for authentication while \
proposal 295's separate SVer function fixes this?

Jeff


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEBA1bLpAiCdPXvXG3q6x/0cwQCnQFAlykaWAACgkQq6x/0cwQ
CnRzmhAAlw2eIDRVOIGq+pPklpSVXQWAoaQH0W8pw9ah3E9+0sIEUp6RmKTnwgjk
ea92V5aZQotimlb8bWGFSgzECpX/2i3E37MTtSsolmp3dNc3/2Av6YIyWn0nKtHb
d06Iy3LMFmuqIfyCRjsBp4fOrsuE2pKeZCz0alIPo9Gu3pZmIsT5p0r8kyYp/Hr8
HSCFoTIB0F/TTW78ainIj32nNwlnjHf+VX4AqjhSGzXxGpeuVud5G/DtMLlG1Dmg
yXyZZgC+g+u+PWNEDen5gA9SAZe6fSiwofiuBaM4rSOtEDQLqzv80ESSALqhrk47
O9HM7+NDl/8p0Wc9iyXgrPzrALSQ9gsr1k6OvKzrIYHN3lFIey6dXtgfg7v6O8nm
oMPcIHrqKKJ+eNAJX/0I0kudGDLxv0wR4xOWLk4mjOP+lMQ3rn9XBNbe5at4iz9p
/0GTQT2tQfgi3dh9fDoHIXwIVOQEa1qhMHw+r4hgNyNnS040dG68qjjti6XhKWFb
Y/O0w7oUzy8I4VRMCWNmvPSKEJ/dxnyhlLg9vs0i5G14HN3nYiViQAnubUUQEY4r
Ik9IyrQhxHc1sRHqPjqfF0blTRYIC5vUaS8mpfWR5WkBm3U3YkeME1mjDU1gffW+
2s+FVGzfgDhxzbWUx9EueKEeg0CH9ShOtDPwe43H6IM2qVLq1MM=
=IRAo
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190407155329</emailId><senderName>"Tomer Ashur"</senderName><senderEmail>tomer.ashur@esat.kuleuven.be</senderEmail><timestampReceived>2019-04-07 15:53:29-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

This is a multipart message in MIME format.

[Attachment #2 (multipart/alternative)]
This is a multipart message in MIME format.


Hi Watson,

Sorry for the belated response, I'm travelling.

 

I'll start with the editorial comments: 

The proposed scheme is somewhat different that the paper it is quoting. After talking \
to Nick and his team we had to make some changes to address practical considerations \
that were not taken into account in the original paper. In essence, the paper deals \
with a security feature (RUP security) in a single layer. Proposal 295 deals with \
multi-layer encryption, i.e. an iterative application of the idea presented in the \
paper. Some more changes were made to make it compatible with sending messages in \
both the forward and backward directions, and with the fact that the two directions \
are not symmetric. 

 

"Maybe some more words to explain the layering would help." – have you consulted \
the figure Atul prepared (https://people.torproject.org/~nickm/prop295/)? I'd be \
happy to hear where it is that you feel that more text is required. 

 

"stuff is xored with zero" if you are referring to Section 3.1.1, this is done by \
design. It is used to show explicitly that a string of zeros must be XORed, since \
this string of zeros has an important role in the decryption process (this is the \
redundancy used for authentication).

 

"the concatenation language is not used consistently" – our part of the proposal \
uses || to denote concatenation for readability. In Section 2.4 we copied text from \
tor-spec.txt verbatim and they use a single | to denote concatenation. This is noted \
in Section 2.2 and should be adapted before the proposal is merged into tor-spec.txt. \
I could not find other inconsistencies. 

 

As for the substantive part:  

Being able to compute a message which doesn't change the digest means that a node can \
replace the ciphertext they send out with another one. This is called non-repudiation \
and the question whether Tor should even offer this property is outside of the scope \
of this proposal. Effectively, a message that was changed in this way will decrypt in \
the next hop into a random plaintext which will in turn result in a random digest. In \
other words, by finding a second preimage (sort of) you will still change (randomize) \
the next digest. No matter where this happens on the circuit, it will be caught in \
the authentication part when the last nonce would not decrypt into the all-zero \
string (hence the explicit XOR of zero). Therefore, it is functionally equivalent to \
simply changing the message and is true for both the forward and backward directions. \


 

Another scenario we've considered is collusion (e.g., between the first and the last \
nodes). We were trying to think whether this can be used for a side-channel. For \
example, the first node replaces the ciphertext with another one and the message \
doesn't authenticated when it gets to the last node. Then, the first node sends the \
original message to the last node which now has both the second message (in decrypted \
form) and the original message (in encrypted form they cannot open since it has to be \
passed via an intermediate node). Is it still possible to compare the two messages? \
We couldn't find a way because the two nodes have a different worldview. But it is \
the nature of attacks that they are overlooked by the original designers, so more \
eyes are very much welcomed. 

 

We do note that we didn't consider this scenario (being able to replace the \
ciphertext without changing the digest in the same hop) when writing our security \
proofs (in the original paper), but we don't see a way it violates them either. The \
paper itself isn't meant to say much about Tor and therefore, neither do the security \
proofs. The proposal itself is more general than the than the paper. Bottom line – \
we can't see a problem in this but if anyone reading this an idea how to use it, even \
if incomplete and which needs to be worked out, please let us know either here or \
privately. 

 

Tomer

 

 

 

From: tor-dev &lt;tor-dev-bounces@lists.torproject.org&gt; On Behalf Of Watson Ladd
Sent: Monday, March 18, 2019 6:05 PM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography \
(solving the crypto-tagging attack)

 

Some comments: some purely editorial, some substantive.
Editorial: stuff is xored with zero, the concatenation language is not used \
consistently. I found it difficult to understand the proposed scheme and check \
equivalence to the paper. Maybe some more words to explain the layering would help.

Substantive: Does it matter that it is possible to compute a message that doesnt \
change the digest if you know the key?


On Fri, Mar 1, 2019 at 9:05 AM Nick Mathewson &lt;nickm@torproject.org \
&lt;mailto:nickm@torproject.org&gt; &gt; wrote:
&gt; 
&gt; Hi!
&gt; 
&gt; I'm sending a new version of proposal 295 from Tomer Ashur, Orr
&gt; Dunkelman, and Atul Luykx.  It's an updated version of their design
&gt; for an improved relay cell encryption scheme, to prevent tagging
&gt; attacks.
&gt; 
&gt; This proposal is checked into the torspec repository.  I'm also
&gt; linking to a diagram for this scheme (and its latex source) from Atul
&gt; Luykx: https://people.torproject.org/~nickm/prop295/
&gt; 
&gt; Finally, I have a draft python reference implementation for an older
&gt; version of this proposal.  I hope to be updating it soon and sending
&gt; out a link next week.
&gt; 
&gt; cheers!  -- Nick
&gt; 
&gt; 
&gt; 
&gt; Filename: 295-relay-crypto-with-adl.txt
&gt; Title: Using ADL for relay cryptography (solving the crypto-tagging attack)
&gt; Author: Tomer Ashur, Orr Dunkelman, Atul Luykx
&gt; Created: 22 Feb 2018
&gt; Last-Modified: 1 March 2019
&gt; Status: Open
&gt; 
&gt; 
&gt; 0. Context
&gt; 
&gt; Although Crypto Tagging Attacks were identified already in the
&gt; original Tor design, it was not before the rise of the
&gt; Procyonidae in 2012 that their severity was fully realized. In
&gt; Proposal 202 (Two improved relay encryption protocols for Tor
&gt; cells) Nick Mathewson discussed two approaches to stymie tagging
&gt; attacks and generally improve Tor's cryptography. In Proposal 261
&gt; (AEZ for relay cryptography) Mathewson puts forward a concrete
&gt; approach which uses the tweakable wide-block cipher AEZ.
&gt; 
&gt; This proposal suggests an alternative approach to Proposal 261
&gt; using the notion of Release (of) Unverified Plaintext (RUP)
&gt; security. It describes an improved algorithm for circuit
&gt; encryption based on CTR-mode which is already used in Tor, and an
&gt; additional component for hashing.
&gt; 
&gt; Incidentally, and similar to Proposal 261, this proposal employs
&gt; the ENCODE-then-ENCIPHER approach thus it improves Tor's E2E
&gt; integrity by using (sufficient) redundancy.
&gt; 
&gt; For more information about the scheme and a security proof for
&gt; its RUP-security see
&gt; 
&gt; Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting
&gt; Authenticated Encryption Robustness with Minimal
&gt; Modifications. CRYPTO (3) 2017: 3-33
&gt; 
&gt; available online at https://eprint.iacr.org/2017/239 .
&gt; 
&gt; For authentication between the OP and the edge node we use
&gt; the PIV scheme: https://eprint.iacr.org/2013/835
&gt; 
&gt; 2. Preliminaries
&gt; 
&gt; 2.1 Motivation
&gt; 
&gt; For motivation, see proposal 202.
&gt; 
&gt; 2.2. Notation
&gt; 
&gt; Symbol               Meaning
&gt; ------               -------
&gt; M                    Plaintext
&gt; C_I                  Ciphertext
&gt; CTR                  Counter Mode
&gt; N_I                  A de/encryption nonce (to be used in CTR-mode)
&gt; T_I                  A tweak (to be used to de/encrypt the nonce)
&gt; T'_I                 A running digest
&gt; ^                    XOR
&gt; &gt; &gt; Concatenation
&gt; (This is more readable than a single | but must be adapted
&gt; before integrating the proposal into tor-spec.txt)
&gt; 
&gt; 2.3. Security parameters
&gt; 
&gt; HASH_LEN -- The length of the hash function's output, in bytes.
&gt; 
&gt; PAYLOAD_LEN -- The longest allowable cell payload, in bytes. (509)
&gt; 
&gt; DIG_KEY_LEN -- The key length used to digest messages (e.g.,
&gt; using GHASH). Since GHASH is only defined for 128-bit keys, we
&gt; recommend DIG_KEY_LEN = 128.
&gt; 
&gt; ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We
&gt; recommend ENC_KEY_LEN = 128.
&gt; 
&gt; 2.4. Key derivation (replaces Section 5.2.2)
&gt; 
&gt; For newer KDF needs, Tor uses the key derivation function HKDF
&gt; from RFC5869, instantiated with SHA256. The generated key
&gt; material is:
&gt; 
&gt; K = K_1 | K_2 | K_3 | ...
&gt; 
&gt; where, if H(x,t) denotes HMAC_SHA256 with value x and key t,
&gt; and m_expand denotes an arbitrarily chosen value,
&gt; and INT8(i) is an octet with the value "i", then
&gt; K_1     = H(m_expand | INT8(1) , KEY_SEED )
&gt; and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED ),
&gt; in RFC5869's vocabulary, this is HKDF-SHA256 with info ==
&gt; m_expand, salt == t_key, and IKM == secret_input.
&gt; 
&gt; When used in the ntor handshake a string of key material is
&gt; generated and is used in the following way:
&gt; 
&gt; Length       Purpose                         Notation
&gt; ------        -------                        --------
&gt; HASH_LEN     forward digest IV               DF      *
&gt; HASH_LEN     backward digest IV              DB      *
&gt; ENC_KEY_LEN  encryption key                  Kf
&gt; ENC_KEY_LEN  decryption key                  Kb
&gt; DIG_KEY_LEN  forward digest key              Khf
&gt; DIG_KEY_LEN  backward digest key             Khb
&gt; ENC_KEY_LEN  forward tweak key               Ktf
&gt; ENC_KEY_LEN  backward tweak key              Ktb
&gt; DIGEST_LEN   nonce to use in the                      *
&gt; hidden service protocol
&gt; 
&gt; * I am not sure that we need these any longer.
&gt; 
&gt; Excess bytes from K are discarded.
&gt; 
&gt; 2.6. Ciphers
&gt; 
&gt; For hashing(*) we use GHASH with a DIG_KEY_LEN-bit key. We write
&gt; this as Digest(K,M) where K is the key and M the message to be
&gt; hashed.
&gt; 
&gt; We use AES with an ENC_KEY_LEN-bit key. For AES encryption
&gt; (resp., decryption) we write E(K,X) (resp., D(K,X)) where K is an
&gt; ENC_KEY_LEN-bit key and X the block to be encrypted (resp.,
&gt; decrypted).
&gt; 
&gt; For a stream cipher, unless otherwise specified, we use
&gt; ENC_KEY_LEN-bit AES in counter mode, with a nonce that is
&gt; generated as explained below. We write this as Encrypt(K,N,X)
&gt; (resp., Decrypt(K,N,X)) where K is the key, N the nonce, and X
&gt; the message to be encrypted (resp., decrypted).
&gt; 
&gt; (*) The terms hash and digest are used interchangeably.
&gt; 
&gt; 3. Routing relay cells
&gt; 
&gt; 3.1. Forward Direction
&gt; 
&gt; The forward direction is the direction that CREATE/CREATE2 cells
&gt; are sent.
&gt; 
&gt; 3.1.1. Routing from the Origin
&gt; 
&gt; Let n denote the integer representing the destination node. For
&gt; I = 1...n+1, T'_{I} is initialized to the 128-bit string consisting
&gt; entirely of '0's. When an OP sends a relay cell, they prepare the
&gt; cell as follows:
&gt; 
&gt; The OP prepares the authentication part of the message:
&gt; 
&gt; C_{n+1} = M
&gt; T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
&gt; N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)
&gt; T'_{n+1} = T_{n+1}
&gt; 
&gt; Then, the OP prepares the multi-layered encryption:
&gt; 
&gt; For I=n...1:
&gt; C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})
&gt; T_I = Digest(Khf_I,T'_I||C_I)
&gt; N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})
&gt; T'_I = T_I
&gt; 
&gt; The OP sends C_1 and N_1 to node 1.
&gt; 
&gt; 3.1.2. Relaying Forward at Onion Routers
&gt; 
&gt; When a forward relay cell is received by OR I, it decrypts the
&gt; payload with the stream cipher, as follows:
&gt; 
&gt; 'Forward' relay cell:
&gt; 
&gt; T_I = Digest(Khf_I,T'_I||C_I)
&gt; N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)
&gt; C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)
&gt; T'_I = T_I
&gt; 
&gt; The OR then decides whether it recognizes the relay cell as
&gt; described below. If the OR recognizes the cell, it processes the
&gt; contents of the relay cell. Otherwise, it passes C_{I+1}||N_{I+1}
&gt; along the circuit if the circuit continues.
&gt; 
&gt; For more information, see section 4 below.
&gt; 
&gt; 3.2. Backward Direction
&gt; 
&gt; The backward direction is the opposite direction from
&gt; CREATE/CREATE2 cells.
&gt; 
&gt; 3.2.1. Relaying Backward at Onion Routers
&gt; 
&gt; When a backward relay cell is received by OR I, it encrypts the
&gt; payload with the stream cipher, as follows:
&gt; 
&gt; 'Backward' relay cell:
&gt; 
&gt; T_I = Digest(Khb_I,T'_I||C_{I+1})
&gt; N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})
&gt; C_I = Encrypt(Kb_I,N_I,C_{I+1})
&gt; T'_I = T_I
&gt; 
&gt; with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes
&gt; C_I and N_I along the circuit towards the OP.
&gt; 
&gt; 3.2.2. Routing to the Origin
&gt; 
&gt; When a relay cell arrives at an OP, the OP decrypts the payload
&gt; with the stream cipher as follows:
&gt; 
&gt; OP receives relay cell from node 1:
&gt; 
&gt; For I=1...n, where n is the end node on the circuit:
&gt; C_{I+1} = Decrypt(Kb_I,N_I,C_I)
&gt; T_I = Digest(Khb_I,T'_I||C_{I+1})
&gt; N_{I+1} = T_I ^ D(Ktb_I,T_I ^ N_I)
&gt; T'_I = T_I
&gt; 
&gt; If the payload is recognized (see Section 4.1),
&gt; then:
&gt; 
&gt; The sending node is I. Stop, process the
&gt; payload and authenticate.
&gt; 
&gt; 4. Application connections and stream management
&gt; 
&gt; 4.1. Relay cells
&gt; 
&gt; Within a circuit, the OP and the end node use the contents of
&gt; RELAY packets to tunnel end-to-end commands and TCP connections
&gt; ("Streams") across circuits. End-to-end commands can be initiated
&gt; by either edge; streams are initiated by the OP.
&gt; 
&gt; The payload of each unencrypted RELAY cell consists of:
&gt; 
&gt; Relay command           [1 byte]
&gt; 'Recognized'            [2 bytes]
&gt; StreamID                [2 bytes]
&gt; Length                  [2 bytes]
&gt; Data                    [PAYLOAD_LEN-23 bytes]
&gt; 
&gt; The 'recognized' field is used as a simple indication that the
&gt; cell is still encrypted. It is an optimization to avoid
&gt; calculating expensive digests for every cell. When sending cells,
&gt; the unencrypted 'recognized' MUST be set to zero.
&gt; 
&gt; When receiving and decrypting cells the 'recognized' will always
&gt; be zero if we're the endpoint that the cell is destined for. For
&gt; cells that we should relay, the 'recognized' field will usually
&gt; be nonzero, but will accidentally be zero with P=2^-16.
&gt; 
&gt; If the cell is recognized, the node moves to verifying the
&gt; authenticity of the message as follows(*):
&gt; 
&gt; forward direction (executed by the end node):
&gt; 
&gt; T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
&gt; Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})
&gt; T'_{n+1} = T_{n+1}
&gt; 
&gt; The message is authenticated (i.e., M = C_{n+1}) if
&gt; and only if Tag = 0
&gt; 
&gt; backward direction (executed by the OP):
&gt; 
&gt; The message is authenticated (i.e., C_{n+1} = M) if
&gt; and only if N_{n+1} = 0
&gt; 
&gt; 
&gt; The old Digest field is removed since sufficient information for
&gt; authentication is now included in the nonce part of the payload.
&gt; 
&gt; (*) we should consider dropping the 'recognized' field
&gt; altogether and always try to authenticate. Note that this is
&gt; an optimization question and the crypto works just as well
&gt; either way.
&gt; 
&gt; The 'Length' field of a relay cell contains the number of bytes
&gt; in the relay payload which contain real payload data. The
&gt; remainder of the payload is padding bytes.
&gt; 
&gt; 4.2. Appending the encrypted nonce and dealing with version-homogenic
&gt; and version-heterogenic circuits
&gt; 
&gt; When a cell is prepared to be routed from the origin (see Section
&gt; 3.1.1) the encrypted nonce N is appended to the encrypted cell
&gt; (occupying the last 16 bytes of the cell). If the cell is
&gt; prepared to be sent to a node supporting the new protocol, S is
&gt; combined with other sources to generate the layer's
&gt; nonce. Otherwise, if the node only supports the old protocol, n
&gt; is still appended to the encrypted cell (so that following nodes
&gt; can still recover their nonce), but a synchronized nonce (as per
&gt; the old protocol) is used in CTR-mode.
&gt; 
&gt; When a cell is sent along the circuit in the 'backward'
&gt; direction, nodes supporting the new protocol always assume that
&gt; the last 16 bytes of the input are the nonce used by the previous
&gt; node, which they process as per Section 3.2.1. If the previous
&gt; node also supports the new protocol, these cells are indeed the
&gt; nonce. If the previous node only supports the old protocol, these
&gt; bytes are either encrypted padding bytes or encrypted data.
&gt; 
&gt; 5. Security
&gt; 
&gt; 5.1. Resistance to crypto-tagging attacks
&gt; 
&gt; A crypto-tagging attack involves a circuit with two colluding
&gt; nodes and at least one honest node between them. The attack works
&gt; when one node makes a change to the cell (tagging) in a way that
&gt; can be undone by the other colluding party. In between, the
&gt; tagged cell is processed by honest nodes which do not detect the
&gt; change. The attack is possible due to the malleability property
&gt; of CTR-mode: a change to a ciphertext bit effects only the
&gt; respective plaintext bit in a predicatble way. This proposal
&gt; frustrates the crypto-tagging attack by linking the nonce to the
&gt; encrypted message such that any change to the ciphertext results
&gt; in a random nonce and hence, random plaintext.
&gt; 
&gt; Let us consider the following 3-hop scenario: the entry and end
&gt; nodes are malicious and colluding and the middle node is honest.
&gt; 
&gt; 5.1.1. forward direction
&gt; 
&gt; Suppose that node I tags the ciphertext part of the message
&gt; (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As
&gt; per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}
&gt; and N_{I+2}. Since C'_{I+2} is different than it should be, so
&gt; are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+2}
&gt; using these values results in a random string for C_{I+2}. Since
&gt; C_{I+2} is now just a random string, it is decrypted into a
&gt; random string and cannot be 'recognized' nor
&gt; authenticated. Furthermore, since C'_{I+1} is different than what
&gt; it should be, T'_{I+1} (i.e., the running digest of the middle
&gt; node) is now out of sync with that of the OP, which means that
&gt; all future cells sent through this node will decrypt into garbage
&gt; (random strings).
&gt; 
&gt; Likewise, suppose that instead of tagging the ciphertext, Node I
&gt; node tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
&gt; I+1 digests the payload the tweak T_{I+1} is find, but using it
&gt; to decrypt N'_{I+1} again results in a random nonce for
&gt; N_{I+2}. This random nonce is used to decrypt C_{I+1} into a
&gt; random C'_{I+2} which is not recognized by the end node. Since
&gt; C_{I+2} is now a random string, the running digest of the end
&gt; node is now out of sync, which prevents the end node from
&gt; decrypting further cells.
&gt; 
&gt; 5.1.2. Backward direction
&gt; 
&gt; In the backward direction the tagging is done by Node I+2
&gt; untagging by the Node I. Suppose first that Node I+2 tags the
&gt; ciphertext C_{I+2} and sends it to Node I+1. As per Section
&gt; 3.2.1, Node I+1 first digests C_{I+2} and uses the resulting
&gt; T_{I+1} to generate a nonce N_{I+1}. From this it is clear that
&gt; any change introduced by Node I+2 influences the entire payload
&gt; and cannot be removed by Node I.
&gt; 
&gt; Unlike in Section 5.1.1., the cell is blindly delivered by Node I
&gt; to the OP which decrypts it. However, since the payload leaving
&gt; the end node was modified, the message cannot be authenticated by
&gt; the OP which can be trusted to tear down the circuit.
&gt; 
&gt; Suppose now that tagging is done by Node I+2 to the nonce part of
&gt; the payload, i.e., N_{I+2}. Since this value is encrypted by Node
&gt; I+1 to generate its own nonce N_{I+1}, again, a random nonce is
&gt; used which affects the entire keystream of CTR-mode. The cell
&gt; again cannot be authenticated by the OP and the circuit is torn
&gt; down.
&gt; 
&gt; We note that the end node can modify the plain message before
&gt; ever encrypting it and this cannot be discovered by the Tor
&gt; protocol. This vulnerability is outside the scope of this
&gt; proposal and users should always use TLS to make sure that their
&gt; application data is encrypted before it enters the Tor network.
&gt; 
&gt; 5.2. End-to-end authentication
&gt; 
&gt; Similar to the old protocol, this proposal only offers end-to-end
&gt; authentication rather than per-hop authentication. However,
&gt; unlike the old protocol, the ADL-construction is non-malleable
&gt; and hence, once a non-authentic message was processed by an
&gt; honest node supporting the new protocol, it is effectively
&gt; destroyed for all nodes further down the circuit. This is because
&gt; the nonce used to de/encrypt all messages is linked to (a digest
&gt; of) the payload data.
&gt; 
&gt; As a result, while honest nodes cannot detect non-authentic
&gt; messages, such nodes still destroy the message thus invalidating
&gt; its authentication tag when it is checked by edge nodes. As a
&gt; result, security against crypto-tagging attacks is ensured as
&gt; long as an honest node supporting the new protocol processes the
&gt; message between two dishonest ones.
&gt; 
&gt; 5.3 The Running Digest
&gt; 
&gt; Unlike the old protocol, the running digest is now computed as
&gt; the output of a GHASH call instead of a hash function call
&gt; (SHA256). Since GHASH does not provide the same type of security
&gt; guarantees as SHA256, it is worth discussing why security is not
&gt; lost from computing the running digest differently.
&gt; 
&gt; The running digets is used to ensure that if the same payload is
&gt; encrypted twice, then the resulting ciphertext does not remain
&gt; the same. Therefore, all that is needed is that the digest should
&gt; repeat with low probability. GHASH is a universal hash function,
&gt; hence it gives such a guarantee assuming its key is chosen
&gt; uniformly at random.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt; 
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:purple;
	text-decoration:underline;}
p.msonormal0, li.msonormal0, div.msonormal0
	{mso-style-name:msonormal;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
span.EmailStyle18
	{mso-style-type:personal;
	font-family:"Calibri",sans-serif;
	color:#1F497D;}
span.EmailStyle19
	{mso-style-type:personal-compose;
	font-family:"Calibri",sans-serif;
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-family:"Calibri",sans-serif;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body lang=EN-US link=blue vlink=purple&gt;&lt;div \
class=WordSection1&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;Hi \
Watson,&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;Sorry for the \
belated response, I'm travelling.&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;I'll start \
with the editorial comments: &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;The proposed \
scheme is somewhat different that the paper it is quoting. After talking to Nick and \
his team we had to make some changes to address practical considerations that were \
not taken into account in the original paper. In essence, the paper deals with a \
security feature (RUP security) in a single layer. Proposal 295 deals with \
multi-layer encryption, i.e. an iterative application of the idea presented in the \
paper. Some more changes were made to make it compatible with sending messages in \
both the forward and backward directions, and with the fact that the two directions \
are not symmetric. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;"&lt;/span&gt;Maybe \
some more words to explain the layering would help."&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt; – have you \
consulted the figure Atul prepared (&lt;/span&gt;&lt;a \
href="https://people.torproject.org/~nickm/prop295/)"&gt;https://people.torproject.org/~nickm/prop295/)&lt;/a&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;? I'd be \
happy to hear where it is that you feel that more text is required. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;"&lt;/span&gt;stuff \
is xored with zero&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;" if you are \
referring to Section 3.1.1, this is done by design. It is used to show explicitly \
that a string of zeros must be XORed, since this string of zeros has an important \
role in the decryption process (this is the redundancy used for \
authentication).&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;"&lt;/span&gt;the \
concatenation language is not used consistently&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;" – our \
part of the proposal uses || to denote concatenation for readability. In Section 2.4 \
we copied text from tor-spec.txt verbatim and they use a single | to denote \
concatenation. This is noted in Section 2.2 and should be adapted before the proposal \
is merged into tor-spec.txt. I could not find other inconsistencies. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;As for the \
substantive part:   &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;Being able to \
compute a message which doesn't change the digest means that a node can replace the \
ciphertext they send out with another one. This is called non-repudiation and the \
question whether Tor should even offer this property is outside of the scope of this \
proposal. Effectively, a message that was changed in this way will decrypt in the \
next hop into a random plaintext which will in turn result in a random digest. In \
other words, by finding a second preimage (sort of) you will still change (randomize) \
the next digest. No matter where this happens on the circuit, it will be caught in \
the authentication part when the last nonce would not decrypt into the all-zero \
string (hence the explicit XOR of zero). Therefore, it is functionally equivalent to \
simply changing the message and is true for both the forward and backward directions. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;Another \
scenario we've considered is collusion (e.g., between the first and the last nodes). \
We were trying to think whether this can be used for a side-channel. For example, the \
first node replaces the ciphertext with another one and the message doesn't \
authenticated when it gets to the last node. Then, the first node sends the original \
message to the last node which now has both the second message (in decrypted form) \
and the original message (in encrypted form they cannot open since it has to be \
passed via an intermediate node). Is it still possible to compare the two messages? \
We couldn't find a way because the two nodes have a different worldview. But it is \
the nature of attacks that they are overlooked by the original designers, so more \
eyes are very much welcomed. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;We do note \
that we didn't consider this scenario (being able to replace the ciphertext without \
changing the digest in the same hop) when writing our security proofs (in the \
original paper), but we don't see a way it violates them either. The paper itself \
isn't meant to say much about Tor and therefore, neither do the security proofs. The \
proposal itself is more general than the than the paper. Bottom line – we can't see \
a problem in this but if anyone reading this an idea how to use it, even if \
incomplete and which needs to be worked out, please let us know either here or \
privately. &lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;Tomer&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif;color:#1F497D'&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
class=MsoNormal&gt;&lt;b&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif'&gt;From:&lt;/span&gt;&lt;/b&gt;&lt;span \
style='font-size:11.0pt;font-family:"Calibri",sans-serif'&gt; tor-dev \
&lt;tor-dev-bounces@lists.torproject.org&gt; &lt;b&gt;On Behalf Of &lt;/b&gt;Watson \
Ladd&lt;br&gt;&lt;b&gt;Sent:&lt;/b&gt; Monday, March 18, 2019 6:05 PM&lt;br&gt;&lt;b&gt;To:&lt;/b&gt; \
tor-dev@lists.torproject.org&lt;br&gt;&lt;b&gt;Subject:&lt;/b&gt; Re: [tor-dev] New revision: Proposal \
295: Using ADL for relay cryptography (solving the crypto-tagging \
attack)&lt;o:p&gt;&lt;/o:p&gt;&lt;/span&gt;&lt;/p&gt;&lt;p class=MsoNormal&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;div&gt;&lt;p \
class=MsoNormal&gt;Some comments: some purely editorial, some substantive.&lt;br&gt;Editorial: \
stuff is xored with zero, the concatenation language is not used consistently. I \
found it difficult to understand the proposed scheme and check equivalence to the \
paper. Maybe some more words to explain the layering would help.&lt;br&gt;&lt;br&gt;Substantive: \
Does it matter that it is possible to compute a message that doesnt change the digest \
if you know the key?&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;p class=MsoNormal \
style='margin-bottom:12.0pt'&gt;&lt;br&gt;On Fri, Mar 1, 2019 at 9:05 AM Nick Mathewson &lt;&lt;a \
href="mailto:nickm@torproject.org" target="_blank"&gt;nickm@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&gt;&lt;br&gt;&gt; Hi!&lt;br&gt;&gt;&lt;br&gt;&gt; I'm sending a new version of proposal 295 \
from Tomer Ashur, Orr&lt;br&gt;&gt; Dunkelman, and Atul Luykx.  It's an updated \
version of their design&lt;br&gt;&gt; for an improved relay cell encryption scheme, to \
prevent tagging&lt;br&gt;&gt; attacks.&lt;br&gt;&gt;&lt;br&gt;&gt; This proposal is checked into the \
torspec repository.  I'm also&lt;br&gt;&gt; linking to a diagram for this scheme (and \
its latex source) from Atul&lt;br&gt;&gt; Luykx: &lt;a \
href="https://people.torproject.org/~nickm/prop295/" \
target="_blank"&gt;https://people.torproject.org/~nickm/prop295/&lt;/a&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; \
Finally, I have a draft python reference implementation for an older&lt;br&gt;&gt; version \
of this proposal.  I hope to be updating it soon and sending&lt;br&gt;&gt; out a link \
next week.&lt;br&gt;&gt;&lt;br&gt;&gt; cheers!  -- Nick&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; \
Filename: 295-relay-crypto-with-adl.txt&lt;br&gt;&gt; Title: Using ADL for relay \
cryptography (solving the crypto-tagging attack)&lt;br&gt;&gt; Author: Tomer Ashur, Orr \
Dunkelman, Atul Luykx&lt;br&gt;&gt; Created: 22 Feb 2018&lt;br&gt;&gt; Last-Modified: 1 March \
2019&lt;br&gt;&gt; Status: Open&lt;br&gt;&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; 0. Context&lt;br&gt;&gt;&lt;br&gt;&gt;  \
  Although Crypto Tagging Attacks were identified already in the&lt;br&gt;&gt;  \
  original Tor design, it was not before the rise of the&lt;br&gt;&gt;    \
Procyonidae in 2012 that their severity was fully realized. In&lt;br&gt;&gt;    \
Proposal 202 (Two improved relay encryption protocols for Tor&lt;br&gt;&gt;    \
cells) Nick Mathewson discussed two approaches to stymie tagging&lt;br&gt;&gt;    \
attacks and generally improve Tor's cryptography. In Proposal 261&lt;br&gt;&gt;  \
  (AEZ for relay cryptography) Mathewson puts forward a concrete&lt;br&gt;&gt;  \
  approach which uses the tweakable wide-block cipher AEZ.&lt;br&gt;&gt;&lt;br&gt;&gt;  \
  This proposal suggests an alternative approach to Proposal 261&lt;br&gt;&gt;  \
  using the notion of Release (of) Unverified Plaintext (RUP)&lt;br&gt;&gt;  \
  security. It describes an improved algorithm for circuit&lt;br&gt;&gt;    \
encryption based on CTR-mode which is already used in Tor, and an&lt;br&gt;&gt;  \
  additional component for hashing.&lt;br&gt;&gt;&lt;br&gt;&gt;    Incidentally, \
and similar to Proposal 261, this proposal employs&lt;br&gt;&gt;    the \
ENCODE-then-ENCIPHER approach thus it improves Tor's E2E&lt;br&gt;&gt;    \
integrity by using (sufficient) redundancy.&lt;br&gt;&gt;&lt;br&gt;&gt;    For more \
information about the scheme and a security proof for&lt;br&gt;&gt;    its \
RUP-security see&lt;br&gt;&gt;&lt;br&gt;&gt;        Tomer Ashur, Orr \
Dunkelman, Atul Luykx: Boosting&lt;br&gt;&gt;        Authenticated \
Encryption Robustness with Minimal&lt;br&gt;&gt;        Modifications. \
CRYPTO (3) 2017: 3-33&lt;br&gt;&gt;&lt;br&gt;&gt;    available online at &lt;a \
href="https://eprint.iacr.org/2017/239" \
target="_blank"&gt;https://eprint.iacr.org/2017/239&lt;/a&gt; .&lt;br&gt;&gt;&lt;br&gt;&gt;    \
For authentication between the OP and the edge node we use&lt;br&gt;&gt;    the \
PIV scheme: &lt;a href="https://eprint.iacr.org/2013/835" \
target="_blank"&gt;https://eprint.iacr.org/2013/835&lt;/a&gt;&lt;br&gt;&gt;&lt;br&gt;&gt; 2. \
Preliminaries&lt;br&gt;&gt;&lt;br&gt;&gt; 2.1 Motivation&lt;br&gt;&gt;&lt;br&gt;&gt;    For \
motivation, see proposal 202.&lt;br&gt;&gt;&lt;br&gt;&gt; 2.2. Notation&lt;br&gt;&gt;&lt;br&gt;&gt;  \
  Symbol              \
 Meaning&lt;br&gt;&gt;    ------            \
   -------&lt;br&gt;&gt;    M            \
        Plaintext&lt;br&gt;&gt;    C_I      \
            Ciphertext&lt;br&gt;&gt;    CTR  \
                Counter Mode&lt;br&gt;&gt;  \
  N_I                  A \
de/encryption nonce (to be used in CTR-mode)&lt;br&gt;&gt;    T_I    \
              A tweak (to be used to de/encrypt \
the nonce)&lt;br&gt;&gt;    T'_I              \
   A running digest&lt;br&gt;&gt;    ^        \
            XOR&lt;br&gt;&gt;    ||    \
               Concatenation&lt;br&gt;&gt;  \
         (This is more readable than a single | but must be \
adapted&lt;br&gt;&gt;           before integrating the \
proposal into tor-spec.txt)&lt;br&gt;&gt;&lt;br&gt;&gt; 2.3. Security \
parameters&lt;br&gt;&gt;&lt;br&gt;&gt;    HASH_LEN -- The length of the hash function's \
output, in bytes.&lt;br&gt;&gt;&lt;br&gt;&gt;    PAYLOAD_LEN -- The longest allowable \
cell payload, in bytes. (509)&lt;br&gt;&gt;&lt;br&gt;&gt;    DIG_KEY_LEN -- The key \
length used to digest messages (e.g.,&lt;br&gt;&gt;    using GHASH). Since GHASH \
is only defined for 128-bit keys, we&lt;br&gt;&gt;    recommend DIG_KEY_LEN = \
128.&lt;br&gt;&gt;&lt;br&gt;&gt;    ENC_KEY_LEN -- The key length used for encryption \
(e.g., AES). We&lt;br&gt;&gt;    recommend ENC_KEY_LEN = 128.&lt;br&gt;&gt;&lt;br&gt;&gt; \
2.4. Key derivation (replaces Section 5.2.2)&lt;br&gt;&gt;&lt;br&gt;&gt;    For newer \
KDF needs, Tor uses the key derivation function HKDF&lt;br&gt;&gt;    from \
RFC5869, instantiated with SHA256. The generated key&lt;br&gt;&gt;    material \
is:&lt;br&gt;&gt;&lt;br&gt;&gt;                  K = \
K_1 | K_2 | K_3 | ...&lt;br&gt;&gt;&lt;br&gt;&gt;    where, if H(x,t) denotes \
HMAC_SHA256 with value x and key t,&lt;br&gt;&gt;          and \
m_expand denotes an arbitrarily chosen value,&lt;br&gt;&gt;        \
  and INT8(i) is an octet with the value "i", then&lt;br&gt;&gt;  \
            K_1     = H(m_expand | \
INT8(1) , KEY_SEED )&lt;br&gt;&gt;          and K_(i+1) = H(K_i | \
m_expand | INT8(i+1) , KEY_SEED ),&lt;br&gt;&gt;    in RFC5869's vocabulary, this \
is HKDF-SHA256 with info ==&lt;br&gt;&gt;    m_expand, salt == t_key, and IKM == \
secret_input.&lt;br&gt;&gt;&lt;br&gt;&gt;    When used in the ntor handshake a string \
of key material is&lt;br&gt;&gt;    generated and is used in the following \
way:&lt;br&gt;&gt;&lt;br&gt;&gt;    Length       Purpose  \
                      \
 Notation&lt;br&gt;&gt;    ------        -------  \
                      \
--------&lt;br&gt;&gt;    HASH_LEN     forward digest IV  \
             DF      \
*&lt;br&gt;&gt;    HASH_LEN     backward digest IV    \
          DB      *&lt;br&gt;&gt;    \
ENC_KEY_LEN  encryption key              \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190711074322</emailId><senderName>"Tomer Ashur"</senderName><senderEmail>tomer.ashur@esat.kuleuven.be</senderEmail><timestampReceived>2019-07-11 07:43:22-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

This is a multipart message in MIME format.


Hi Nick,
Atul and I finally got together and have some answers for you:

Python code - I've reviewed it and it seems fine to me. The only changes required are \
to make the authentication part stateless (see below) and reduce the number of states \
accordingly. 

Updated proposal - attached. 

&gt; I'm planning to replace HKDF-SHA256 with SHAKE, and AES128 with AES256.
That's fine with us. I've updated the AES128 to AES256 part of the proposal, but \
didn't want to touch the HKDF-SHA256 to SHAKE part. 

&gt; To clarify, I believe there need to be two separate T'_I values for each
  hop: T'_I for outbound cells, and T'_I for inbound cells.  I suggest
  calling them Tf'_I and Tb'_I.

Yes there should. This is updated in the proposal now. 

&gt; Since Tor allows a relay cell to be addressed to any hop in the circuit, I
  believe that every relay needs to have a separate value for authentication
  state that is currently called T'_{n+1}.  I'm calling this value Ta'_I,
  where the a stands for 'authentication'.

You are right on this. However, in the course of our discussion we've realized that \
the authentication part can be done in a stateless manner, i.e., T'_{N+1} is not \
necessary (and therefore neither does Ta'_I). This also obviates your next comment \
about a conditional update to the running digest. All of this is now reflected in the \
proposal. 

&gt; Is it really safe to use the same key (Khf_n) for authentication as well
  as for encryption?
Yes. See Figure 1 in https://eprint.iacr.org/2013/835. 

&gt; Is there any reason _not_ to initialize the T' values based on the
  KDF?  It seems to me that setting them to zero might give the attacker
  some information they didn't have before.
There isn't. This is now updated in the proposal (I've used the old DF and DB which \
were previously marked for deletion). See also my next answer.  

&gt; What forward secrecy, if any, are we getting here?
Short answer: we don't know. 

Longer answer: after discussing this, we conjecture that if the hash function being \
used to generate T'_I is preimage-resistant and the initial value for T'_I is random \
(as you suggested above), then you get full forward secrecy. We also conjecture that \
GHash does not satisfy this condition, i.e., that in the case of a key exposure, it \
is possible to find preimages, meaning that no forward secrecy is offered by the \
scheme the way it is right now. Things are likely different if you use something \
proper like HMAC (our construction works just the same with any secure MAC instead of \
GHash) or possibly even with just an unkeyed hash function like SHA2 or SHAKE. 

The rationale is as follows: To decrypt a ciphertext from round R you would need to \
know the respective T'_I. At the end of round R, T'_I is replaced (in an \
irrecoverable way; this is important) by a new value. Now, to reobtain the old T'_I \
from the new T'_I you'd need to find a preimage. This is also the reason we need the \
initial T'_I to be random. Otherwise, an adversary that has access to all previous \
ciphertexts can compute any T'_I forward by starting from the known initial value for \
T'_I. 

However, note that neither of us have the time to further investigate and prove this \
at the moment (and therefore, this isn't reflected in the updated proposal). We're \
leaving this as an open question and will try to address it at some unknown point in \
the future, but of course we'd be happy for anyone else to scoop us in doing so. 

Tomer

-----Original Message-----
From: tor-dev &lt;tor-dev-bounces@lists.torproject.org&gt; On Behalf Of Nick Mathewson
Sent: Monday, May 6, 2019 10:09 PM
To: tor-dev@lists.torproject.org
Subject: Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography \
(solving the crypto-tagging attack)

Hi!

Here are my notes on the latest prop295 that I came up with while doing a reference \
implementation in Python.  If you're curious, you can see the candidate reference \
implementation at https://github.com/nmathewson/prop295ref . I'd love to know whether \
or not the implementation matches the intention of the proposal.

Minor notes:

* I'm planning to replace HKDF-SHA256 with SHAKE, and AES128 with AES256.

* I agree with dropping the 'recognized' field.  I didn't implement it here.

More important issues:

* To clarify, I believe there need to be two separate T'_I values for each
  hop: T'_I for outbound cells, and T'_I for inbound cells.  I suggest
  calling them Tf'_I and Tb'_I.

* Since Tor allows a relay cell to be addressed to any hop in the circuit, I
  believe that every relay needs to have a separate value for authentication
  state that is currently called T'_{n+1}.  I'm calling this value Ta'_I,
  where the a stands for 'authentication'.

* I believe that the authentication algorithm in section 4.1 does not if
  cells may be addressed to hops other than the last hop.  It needs to change
  as follows:

             T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
             Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})

             If Tag = 0:
                  T'_{n+1} = T_{n+1}
                  The message is authenticated.
             Otherwise:
                  T'_{n+1} remains unchanged.
                  The message is not authenticated.

  The change here is that I think T'_{n+1} (which I'd like to call Ta'_I)
  should only change when the message is authenticated.

Some questions about issues I don't understand:

* Is it really safe to use the same key (Khf_n) for authentication as well
  as for encryption?

* Is there any reason _not_ to initialize the T' values based on the
  KDF?  It seems to me that setting them to zero might give the attacker
  some information they didn't have before.

* What forward secrecy, if any, are we getting here?

many thanks,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


["295-relay-crypto-with-adl.txt" (text/plain)]

Filename: 295-relay-crypto-with-adl.txt
Title: Using ADL for relay cryptography (solving the crypto-tagging attack)
Author: Tomer Ashur, Orr Dunkelman, Atul Luykx
Created: 22 Feb 2018
Last-Modified: 10 July 2019
Status: Open


0. Context

   Although Crypto Tagging Attacks were identified already in the
   original Tor design, it was not before the rise of the
   Procyonidae in 2012 that their severity was fully realized. In
   Proposal 202 (Two improved relay encryption protocols for Tor
   cells) Nick Mathewson discussed two approaches to stymie tagging
   attacks and generally improve Tor's cryptography. In Proposal 261
   (AEZ for relay cryptography) Mathewson puts forward a concrete
   approach which uses the tweakable wide-block cipher AEZ.

   This proposal suggests an alternative approach to Proposal 261
   using the notion of Release (of) Unverified Plaintext (RUP)
   security. It describes an improved algorithm for circuit
   encryption based on CTR-mode which is already used in Tor, and an
   additional component for hashing.

   Incidentally, and similar to Proposal 261, this proposal employs
   the ENCODE-then-ENCIPHER approach thus it improves Tor's E2E
   integrity by using (sufficient) redundancy.

   For more information about the scheme and a security proof for
   its RUP-security see

       Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting
       Authenticated Encryption Robustness with Minimal
       Modifications. CRYPTO (3) 2017: 3-33

   available online at https://eprint.iacr.org/2017/239 .

   For authentication between the OP and the edge node we use
   the PIV scheme: https://eprint.iacr.org/2013/835

2. Preliminaries

2.1 Motivation

   For motivation, see proposal 202.

2.2. Notation

   Symbol               Meaning
   ------               -------
   M                    Plaintext
   C_I                  Ciphertext
   CTR                  Counter Mode
   N_I                  A de/encryption nonce (to be used in CTR-mode)
   T_I                  A tweak (to be used to de/encrypt the nonce)
   Tf'_I                A running digest (forward direction)
   Tb'_I                A running digest (backward direction)
   ^                    XOR
   ||                   Concatenation
          (This is more readable than a single | but must be adapted
          before integrating the proposal into tor-spec.txt)

2.3. Security parameters

   HASH_LEN -- The length of the hash function's output, in bytes.

   PAYLOAD_LEN -- The longest allowable cell payload, in bytes. (509)

   DIG_KEY_LEN -- The key length used to digest messages (e.g.,
   using GHASH). Since GHASH is only defined for 128-bit keys, we
   recommend DIG_KEY_LEN = 128.

   ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We
   recommend ENC_KEY_LEN = 256.

2.4. Key derivation (replaces Section 5.2.2)

   For newer KDF needs, Tor uses the key derivation function HKDF
   from RFC5869, instantiated with SHA256. The generated key
   material is:

                 K = K_1 | K_2 | K_3 | ...

   where, if H(x,t) denotes HMAC_SHA256 with value x and key t,
         and m_expand denotes an arbitrarily chosen value,
         and INT8(i) is an octet with the value "i", then
             K_1     = H(m_expand | INT8(1) , KEY_SEED )
         and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED ),
   in RFC5869's vocabulary, this is HKDF-SHA256 with info ==
   m_expand, salt == t_key, and IKM == secret_input.

   When used in the ntor handshake a string of key material is
   generated and is used in the following way:

   Length       Purpose                         Notation
   ------        -------                        --------
   HASH_LEN     forward digest IV               DF      
   HASH_LEN     backward digest IV              DB      
   ENC_KEY_LEN  encryption key                  Kf
   ENC_KEY_LEN  decryption key                  Kb
   DIG_KEY_LEN  forward digest key              Khf
   DIG_KEY_LEN  backward digest key             Khb
   ENC_KEY_LEN  forward tweak key               Ktf
   ENC_KEY_LEN  backward tweak key              Ktb
   DIGEST_LEN   nonce to use in the                      *
                  hidden service protocol

      * I am not sure that we need this any longer.

   Excess bytes from K are discarded.

2.6. Ciphers

   For hashing(*) we use GHASH with a DIG_KEY_LEN-bit key. We write
   this as Digest(K,M) where K is the key and M the message to be
   hashed.

   We use AES with an ENC_KEY_LEN-bit key. For AES encryption
   (resp., decryption) we write E(K,X) (resp., D(K,X)) where K is an
   ENC_KEY_LEN-bit key and X the block to be encrypted (resp.,
   decrypted).

   For a stream cipher, unless otherwise specified, we use
   ENC_KEY_LEN-bit AES in counter mode, with a nonce that is
   generated as explained below. We write this as Encrypt(K,N,X)
   (resp., Decrypt(K,N,X)) where K is the key, N the nonce, and X
   the message to be encrypted (resp., decrypted).

   (*) The terms hash and digest are used interchangeably.

3. Routing relay cells

   Let n denote the integer representing the destination node. For
   I = 1...n, we set Tf'_{I} = DF_I and Tb'_{I} = DB_I 
   where DF_I and DB_I are generated according to Section 2.4. 

3.1. Forward Direction

   The forward direction is the direction that CREATE/CREATE2 cells
   are sent.

3.1.1. Routing from the Origin

   When an OP sends a relay cell, they prepare the
   cell as follows:

        The OP prepares the authentication part of the message:

                C_{n+1} = M
                T_{n+1} = Digest(Khf_n,C_{n+1})
                N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)

        Then, the OP prepares the multi-layered encryption:

                For I=n...1:
                        C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})
                        T_I = Digest(Khf_I,Tf'_I||C_I)
                        N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})
                        Tf'_I = T_I

          The OP sends C_1 and N_1 to node 1.

3.1.2. Relaying Forward at Onion Routers

   When a forward relay cell is received by OR I, it decrypts the
   payload with the stream cipher, as follows:

        'Forward' relay cell:

                T_I = Digest(Khf_I,Tf'_I||C_I)
                N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)
                C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)
                Tf'_I = T_I

   The OR then decides whether it recognizes the relay cell as
   described below. If the OR recognizes the cell, it processes the
   contents of the relay cell. Otherwise, it passes C_{I+1}||N_{I+1}
   along the circuit if the circuit continues.

   For more information, see section 4 below.

3.2. Backward Direction

   The backward direction is the opposite direction from
   CREATE/CREATE2 cells.

3.2.1. Relaying Backward at Onion Routers

   When a backward relay cell is received by OR I, it encrypts the
   payload with the stream cipher, as follows:

        'Backward' relay cell:

                T_I = Digest(Khb_I,Tb'_I||C_{I+1})
                N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})
                C_I = Encrypt(Kb_I,N_I,C_{I+1})
                Tb'_I = T_I

   with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes
   C_I and N_I along the circuit towards the OP.

3.2.2. Routing to the Origin

   When a relay cell arrives at an OP, the OP decrypts the payload
   with the stream cipher as follows:

        OP receives relay cell from node 1:

                For I=1...n, where n is the end node on the circuit:
                        C_{I+1} = Decrypt(Kb_I,N_I,C_I)
                        T_I = Digest(Khb_I,Tb'_I||C_{I+1})
                        N_{I+1} = T_I ^ D(Ktb_I,T_I ^ N_I)
                        Tb'_I = T_I

                If the payload is recognized (see Section 4.1),
                then:

                       The sending node is I. Stop, process the
                       payload and authenticate.

4. Application connections and stream management

4.1. Relay cells

  Within a circuit, the OP and the end node use the contents of
  RELAY packets to tunnel end-to-end commands and TCP connections
  ("Streams") across circuits. End-to-end commands can be initiated
  by either edge; streams are initiated by the OP.

        The payload of each unencrypted RELAY cell consists of:

                Relay command           [1 byte]
                StreamID                [2 bytes]
                Length                  [2 bytes]
                Data                    [PAYLOAD_LEN-21 bytes] 


   The old Digest field is removed since sufficient information for 
   authentication is now included in the nonce part of the payload. 
   
   The old 'Recognized' field is removed and the node always tries to 
   authenticate the message as follows:
      
          forward direction (executed by the end node):

                T_{n+1} = Digest(Khf_n,C_{n+1})
                Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})

                The message is recognized and authenticated 
				(i.e., M = C_{n+1}) if and only if Tag = 0.

          backward direction (executed by the OP):

                The message is recognized and authenticated 
				(i.e., C_{n+1} = M) if and only if N_{n+1} = 0.


   The 'Length' field of a relay cell contains the number of bytes
   in the relay payload which contain real payload data. The
   remainder of the payload is padding bytes.

4.2. Appending the encrypted nonce and dealing with version-homogenic
     and version-heterogenic circuits

   When a cell is prepared to be routed from the origin (see Section
   3.1.1) the encrypted nonce N is appended to the encrypted cell
   (occupying the last 16 bytes of the cell). If the cell is
   prepared to be sent to a node supporting the new protocol, S is
   combined with other sources to generate the layer's
   nonce. Otherwise, if the node only supports the old protocol, n
   is still appended to the encrypted cell (so that following nodes
   can still recover their nonce), but a synchronized nonce (as per
   the old protocol) is used in CTR-mode.

   When a cell is sent along the circuit in the 'backward'
   direction, nodes supporting the new protocol always assume that
   the last 16 bytes of the input are the nonce used by the previous
   node, which they process as per Section 3.2.1. If the previous
   node also supports the new protocol, these cells are indeed the
   nonce. If the previous node only supports the old protocol, these
   bytes are either encrypted padding bytes or encrypted data.

5. Security

5.1. Resistance to crypto-tagging attacks

   A crypto-tagging attack involves a circuit with two colluding
   nodes and at least one honest node between them. The attack works
   when one node makes a change to the cell (tagging) in a way that
   can be undone by the other colluding party. In between, the
   tagged cell is processed by honest nodes which do not detect the
   change. The attack is possible due to the malleability property
   of CTR-mode: a change to a ciphertext bit effects only the
   respective plaintext bit in a predicatble way. This proposal
   frustrates the crypto-tagging attack by linking the nonce to the
   encrypted message such that any change to the ciphertext results
   in a random nonce and hence, random plaintext.

   Let us consider the following 3-hop scenario: the entry and end
   nodes are malicious and colluding and the middle node is honest.

5.1.1. forward direction

   Suppose that node I tags the ciphertext part of the message
   (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As
   per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}
   and N_{I+2}. Since C'_{I+2} is different from what it should be, so
   are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+1}
   using these values results in a random string for C_{I+2}. Since
   C_{I+2} is now just a random string, it is decrypted into a
   random string and cannot be authenticated. Furthermore, since 
   C'_{I+1} is different than what it should be, Tf'_{I+1} 
   (i.e., the running digest of the middle node) is now out of sync 
   with that of the OP, which means that all future cells sent through 
   this node will decrypt into garbage (random strings).

   Likewise, suppose that instead of tagging the ciphertext, Node I
   tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
   I+1 digests the payload the tweak T_{I+1} is fine, but using it
   to decrypt N'_{I+1} again results in a random nonce for
   N_{I+2}. This random nonce is used to decrypt C_{I+1} into a
   random C'_{I+2} which cannot be authenticated by the end node. Since
   C_{I+2} is a random string, the running digest of the end node is 
   now out of sync with that of OP, which prevents the end node from
   decrypting further cells.

5.1.2. Backward direction

   In the backward direction the tagging is done by Node I+2
   untagging by Node I. Suppose first that Node I+2 tags the
   ciphertext C_{I+2} and sends it to Node I+1. As per Section
   3.2.1, Node I+1 first digests C_{I+2} and uses the resulting
   T_{I+1} to generate a nonce N_{I+1}. From this it is clear that
   any change introduced by Node I+2 influences the entire payload
   and cannot be removed by Node I.

   Unlike in Section 5.1.1., the cell is blindly delivered by Node I
   to the OP which decrypts it. However, since the payload leaving
   the end node was modified, the message cannot be authenticated by
   the OP which can be trusted to tear down the circuit.

   Suppose now that tagging is done by Node I+2 to the nonce part of
   the payload, i.e., N_{I+2}. Since this value is encrypted by Node
   I+1 to generate its own nonce N_{I+1}, again, a random nonce is
   used which affects the entire keystream of CTR-mode. The cell
   again cannot be authenticated by the OP and the circuit is torn
   down.

   We note that the end node can modify the plain message before
   ever encrypting it and this cannot be discovered by the Tor
   protocol. This vulnerability is outside the scope of this
   proposal and users should always use TLS to make sure that their
   application data is encrypted before it enters the Tor network.

5.2. End-to-end authentication

   Similar to the old protocol, this proposal only offers end-to-end
   authentication rather than per-hop authentication. However,
   unlike the old protocol, the ADL-construction is non-malleable
   and hence, once a non-authentic message was processed by an
   honest node supporting the new protocol, it is effectively
   destroyed for all nodes further down the circuit. This is because
   the nonce used to de/encrypt all messages is linked to (a digest
   of) the payload data.

   As a result, while honest nodes cannot detect non-authentic
   messages, such nodes still destroy the message thus invalidating
   its authentication tag when it is checked by edge nodes. As a
   result, security against crypto-tagging attacks is ensured as
   long as an honest node supporting the new protocol processes the
   message between two dishonest ones.

5.3 The Running Digest

   Unlike the old protocol, the running digest is now computed as
   the output of a GHASH call instead of a hash function call
   (SHA256). Since GHASH does not provide the same type of security
   guarantees as SHA256, it is worth discussing why security is not
   lost from computing the running digest differently.

   The running digets is used to ensure that if the same payload is
   encrypted twice, then the resulting ciphertext does not remain
   the same. Therefore, all that is needed is that the digest should
   repeat with low probability. GHASH is a universal hash function,
   hence it gives such a guarantee assuming its key is chosen
   uniformly at random.


["Proposal_295.diff" (application/octet-stream)]

diff --git a/proposals/295-relay-crypto-with-adl.txt b/proposals/295-relay-crypto-with-adl.txt
index f88f3cf..98efd10 100644
--- a/proposals/295-relay-crypto-with-adl.txt
+++ b/proposals/295-relay-crypto-with-adl.txt
@@ -2,7 +2,7 @@ Filename: 295-relay-crypto-with-adl.txt
 Title: Using ADL for relay cryptography (solving the crypto-tagging attack)
 Author: Tomer Ashur, Orr Dunkelman, Atul Luykx
 Created: 22 Feb 2018
-Last-Modified: 1 March 2019
+Last-Modified: 10 July 2019
 Status: Open
 
 
@@ -54,7 +54,8 @@ Status: Open
    CTR                  Counter Mode
    N_I                  A de/encryption nonce (to be used in CTR-mode)
    T_I                  A tweak (to be used to de/encrypt the nonce)
-   T'_I                 A running digest
+   Tf'_I                A running digest (forward direction)
+   Tb'_I                A running digest (backward direction)
    ^                    XOR
    ||                   Concatenation
           (This is more readable than a single | but must be adapted
@@ -71,7 +72,7 @@ Status: Open
    recommend DIG_KEY_LEN = 128.
 
    ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We
-   recommend ENC_KEY_LEN = 128.
+   recommend ENC_KEY_LEN = 256.
 
 2.4. Key derivation (replaces Section 5.2.2)
 
@@ -94,8 +95,8 @@ Status: Open
 
    Length       Purpose                         Notation
    ------        -------                        --------
-   HASH_LEN     forward digest IV               DF      *
-   HASH_LEN     backward digest IV              DB      *
+   HASH_LEN     forward digest IV               DF      
+   HASH_LEN     backward digest IV              DB      
    ENC_KEY_LEN  encryption key                  Kf
    ENC_KEY_LEN  decryption key                  Kb
    DIG_KEY_LEN  forward digest key              Khf
@@ -105,7 +106,7 @@ Status: Open
    DIGEST_LEN   nonce to use in the                      *
                   hidden service protocol
 
-      * I am not sure that we need these any longer.
+      * I am not sure that we need this any longer.
 
    Excess bytes from K are discarded.
 
@@ -130,6 +131,10 @@ Status: Open
 
 3. Routing relay cells
 
+   Let n denote the integer representing the destination node. For
+   I = 1...n, we set Tf'_{I} = DF_I and Tb'_{I} = DB_I 
+   where DF_I and DB_I are generated according to Section 2.4. 
+
 3.1. Forward Direction
 
    The forward direction is the direction that CREATE/CREATE2 cells
@@ -137,25 +142,22 @@ Status: Open
 
 3.1.1. Routing from the Origin
 
-   Let n denote the integer representing the destination node. For
-   I = 1...n+1, T'_{I} is initialized to the 128-bit string consisting
-   entirely of '0's. When an OP sends a relay cell, they prepare the
+   When an OP sends a relay cell, they prepare the
    cell as follows:
 
         The OP prepares the authentication part of the message:
 
                 C_{n+1} = M
-                T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
+                T_{n+1} = Digest(Khf_n,C_{n+1})
                 N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)
-                T'_{n+1} = T_{n+1}
 
         Then, the OP prepares the multi-layered encryption:
 
                 For I=n...1:
                         C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})
-                        T_I = Digest(Khf_I,T'_I||C_I)
+                        T_I = Digest(Khf_I,Tf'_I||C_I)
                         N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})
-                        T'_I = T_I
+                        Tf'_I = T_I
 
           The OP sends C_1 and N_1 to node 1.
 
@@ -166,10 +168,10 @@ Status: Open
 
         'Forward' relay cell:
 
-                T_I = Digest(Khf_I,T'_I||C_I)
+                T_I = Digest(Khf_I,Tf'_I||C_I)
                 N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)
                 C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)
-                T'_I = T_I
+                Tf'_I = T_I
 
    The OR then decides whether it recognizes the relay cell as
    described below. If the OR recognizes the cell, it processes the
@@ -190,10 +192,10 @@ Status: Open
 
         'Backward' relay cell:
 
-                T_I = Digest(Khb_I,T'_I||C_{I+1})
+                T_I = Digest(Khb_I,Tb'_I||C_{I+1})
                 N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})
                 C_I = Encrypt(Kb_I,N_I,C_{I+1})
-                T'_I = T_I
+                Tb'_I = T_I
 
    with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes
    C_I and N_I along the circuit towards the OP.
@@ -207,9 +209,9 @@ Status: Open
 
                 For I=1...n, where n is the end node on the circuit:
                         C_{I+1} = Decrypt(Kb_I,N_I,C_I)
-                        T_I = Digest(Khb_I,T'_I||C_{I+1})
+                        T_I = Digest(Khb_I,Tb'_I||C_{I+1})
                         N_{I+1} = T_I ^ D(Ktb_I,T_I ^ N_I)
-                        T'_I = T_I
+                        Tb'_I = T_I
 
                 If the payload is recognized (see Section 4.1),
                 then:
@@ -229,46 +231,30 @@ Status: Open
         The payload of each unencrypted RELAY cell consists of:
 
                 Relay command           [1 byte]
-                'Recognized'            [2 bytes]
                 StreamID                [2 bytes]
                 Length                  [2 bytes]
-                Data                    [PAYLOAD_LEN-23 bytes]
-
-   The 'recognized' field is used as a simple indication that the
-   cell is still encrypted. It is an optimization to avoid
-   calculating expensive digests for every cell. When sending cells,
-   the unencrypted 'recognized' MUST be set to zero.
+                Data                    [PAYLOAD_LEN-21 bytes] 
 
-   When receiving and decrypting cells the 'recognized' will always
-   be zero if we're the endpoint that the cell is destined for. For
-   cells that we should relay, the 'recognized' field will usually
-   be nonzero, but will accidentally be zero with P=2^-16.
-
-   If the cell is recognized, the node moves to verifying the
-   authenticity of the message as follows(*):
 
+   The old Digest field is removed since sufficient information for 
+   authentication is now included in the nonce part of the payload. 
+   
+   The old 'Recognized' field is removed and the node always tries to 
+   authenticate the message as follows:
+      
           forward direction (executed by the end node):
 
-                T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
+                T_{n+1} = Digest(Khf_n,C_{n+1})
                 Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})
-                T'_{n+1} = T_{n+1}
 
-                The message is authenticated (i.e., M = C_{n+1}) if
-                and only if Tag = 0
+                The message is recognized and authenticated 
+				(i.e., M = C_{n+1}) if and only if Tag = 0.
 
           backward direction (executed by the OP):
 
-                The message is authenticated (i.e., C_{n+1} = M) if
-                and only if N_{n+1} = 0
-
+                The message is recognized and authenticated 
+				(i.e., C_{n+1} = M) if and only if N_{n+1} = 0.
 
-   The old Digest field is removed since sufficient information for
-   authentication is now included in the nonce part of the payload.
-
-       (*) we should consider dropping the 'recognized' field
-       altogether and always try to authenticate. Note that this is
-       an optimization question and the crypto works just as well
-       either way.
 
    The 'Length' field of a relay cell contains the number of bytes
    in the relay payload which contain real payload data. The
@@ -319,31 +305,30 @@ Status: Open
    Suppose that node I tags the ciphertext part of the message
    (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As
    per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}
-   and N_{I+2}. Since C'_{I+2} is different than it should be, so
-   are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+2}
+   and N_{I+2}. Since C'_{I+2} is different from what it should be, so
+   are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+1}
    using these values results in a random string for C_{I+2}. Since
    C_{I+2} is now just a random string, it is decrypted into a
-   random string and cannot be 'recognized' nor
-   authenticated. Furthermore, since C'_{I+1} is different than what
-   it should be, T'_{I+1} (i.e., the running digest of the middle
-   node) is now out of sync with that of the OP, which means that
-   all future cells sent through this node will decrypt into garbage
-   (random strings).
+   random string and cannot be authenticated. Furthermore, since 
+   C'_{I+1} is different than what it should be, Tf'_{I+1} 
+   (i.e., the running digest of the middle node) is now out of sync 
+   with that of the OP, which means that all future cells sent through 
+   this node will decrypt into garbage (random strings).
 
    Likewise, suppose that instead of tagging the ciphertext, Node I
-   node tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
-   I+1 digests the payload the tweak T_{I+1} is find, but using it
+   tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
+   I+1 digests the payload the tweak T_{I+1} is fine, but using it
    to decrypt N'_{I+1} again results in a random nonce for
    N_{I+2}. This random nonce is used to decrypt C_{I+1} into a
-   random C'_{I+2} which is not recognized by the end node. Since
-   C_{I+2} is now a random string, the running digest of the end
-   node is now out of sync, which prevents the end node from
+   random C'_{I+2} which cannot be authenticated by the end node. Since
+   C_{I+2} is a random string, the running digest of the end node is 
+   now out of sync with that of OP, which prevents the end node from
    decrypting further cells.
 
 5.1.2. Backward direction
 
    In the backward direction the tagging is done by Node I+2
-   untagging by the Node I. Suppose first that Node I+2 tags the
+   untagging by Node I. Suppose first that Node I+2 tags the
    ciphertext C_{I+2} and sends it to Node I+1. As per Section
    3.2.1, Node I+1 first digests C_{I+2} and uses the resulting
    T_{I+1} to generate a nonce N_{I+1}. From this it is clear that
@@ -400,3 +385,4 @@ Status: Open
    repeat with low probability. GHASH is a universal hash function,
    hence it gives such a guarantee assuming its key is chosen
    uniformly at random.
+

[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190403180611</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-04-03 18:06:11-0400</timestampReceived><subject>Re: [tor-dev] Tor Directory Meta-Format + Line Wrapping?</subject><body>

On Wed, Apr 3, 2019 at 1:48 PM Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt;
&gt; Hi,
&gt;
&gt; Looking at the specification for the Tor directory protocol's
&gt; meta-format, it has some text on line wrapping:
&gt;
&gt; &gt; When line wrapping, implementations MUST wrap lines
&gt; &gt; at 64 characters.  Upon decoding, implementations MUST
&gt; &gt; ignore and discard all linefeed characters.
&gt;
&gt; I can't work out how an implementation is meant to know if a linefeed
&gt; character is meant to be for line-wrapping or if it's meant to be the
&gt; end of a keyword line.
&gt;
&gt; Are there any implementations that actually do line wrapping?

Hm. I think that is meant to describe linewrapping only inside the
PEM-style base64 objects.  It could be written more clearly though.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190424025836</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-24 02:58:36-0400</timestampReceived><subject>Re: [tor-dev] Export BridgeDB usage statistics</subject><body>

[Attachment #2 (multipart/signed)]


Hi Philipp, Karsten,

&gt; On 24 Apr 2019, at 10:50, Philipp Winter &lt;phw@nymity.ch&gt; wrote:
&gt; 
&gt; I'm working on &lt;https://bugs.torproject.org/9316&gt;, which will make
&gt; BridgeDB export usage statistics.  I would like these statistics to be
&gt; public, privacy-preserving, and -- ideally -- added to Tor Metrics.  I
&gt; wanted to hear your thoughts on 1) what statistics we should collect,
&gt; 2) how we can collect these statistics safely, and 3) what format these
&gt; statistics should have.
&gt; 
&gt; Broadly speaking, these statistics should answer the following
&gt; questions:
&gt; 
&gt;  * How many requests does BridgeDB see per day?
&gt;  * What obfuscation protocols are the most popular?
&gt;  * What bridge distribution mechanisms are the most popular?
&gt;  * From what countries do we see the most bridge requests?
&gt;  * How many BridgeDB requests fail and succeed, respectively?
&gt;  * How many requests does BridgeDB see from Yahoo/Gmail/Riseup?
&gt;  * How many HTTPS requests are coming from proxies?
&gt;  * How many requests are suspicious, and likely issued by bots?
&gt; 
&gt; Each request to BridgeDB carries with it some information, which allows
&gt; us to answer the above questions.  I suggest that we collect the
&gt; following:
&gt; 
&gt;  * The distribution mechanism.  Currently, this is HTTPS, email, or
&gt;    Moat.
&gt; 
&gt;  * The requested transport.  Currently this is vanilla, fte, obfs3,
&gt;    obfs4, or scramblesuit.
&gt; 
&gt;  * The request's origin.  For Moat and HTTPS, it's the two-letter
&gt;    country code, e.g., IT for Italy.  For email, it's the user's email
&gt;    domain (Gmail, Yahoo, or Riseup).
&gt; 
&gt;  * Whether the request was successful or unsuccessful, i.e., resulted
&gt;    in BridgeDB handing out bridges or not.
&gt; 
&gt;  * Whether the request was issued by a user or a bot.
&gt;    David suggested heuristics that would allow us to estimate if a
&gt;    request came from a bot:
&gt;    &lt;https://bugs.torproject.org/9316#comment:19&gt; I like these
&gt;    suggestions but I'm not sure yet how to encode them -- it's more
&gt;    complex than a simple binary flag.
&gt; 
&gt; The combination of these statistics results in ~16,800 buckets (3
&gt; mechanisms * 5 transports * ~280 ISO country codes * 2 success states *
&gt; 2 bot states).  We only need to export statistics with non-empty
&gt; buckets.  To protect users whose request is the only one in a given
&gt; bucket (e.g., there may be only one user in Turkmenistan who
&gt; successfully requested an FTE bridge over HTTPS on 2019-04-02), we
&gt; should bin the statistics by rounding them up to the next multiple of,
&gt; say, 10.  We should further export statistics infrequently -- maybe once
&gt; a day.
&gt; 
&gt; Here's an example of a simple CSV format that takes into account the
&gt; above:
&gt; 
&gt;  timestamp,mechanism,transport,country|domain,success,count,origin
&gt;  1555977600,https,vanilla,it,successful,40,user
&gt;  1555977600,https,obfs4,ca,unsuccessful,10,user
&gt;  1555977600,email,vanilla,yahoo.com,successful,50,user
&gt;  ...
&gt; 
&gt; What are your thoughts?

Over the next few months, Nick and I are going to work on
PrivCount for statistics generated by tor relays and bridges.
(I'll be on leave from today until late May.)

We haven't done the detailed design of PrivCount's API yet.

For Tor relay/bridge statistics, we'll have some Rust code
embedded in the tor binary (Data Collectors), which will
add noise, bin, and blind the statistics.

Then we'll have some aggregation servers (Tally Reporters)
which will aggregate and un-blind the results.

If we design the interfaces correctly, we should be able to
re-use the noise and bin code for BridgeDB. (The blinding is
redundant, until we have more than one BridgeDB.)

I imagine we could pass results to a command-line tool for
noise and binning. This tool would also be useful for tests.
(Tests are *so* much simpler when there's no network in the
middle.)

That way, all of Tor's relay, bridge, and BridgeDB statistics
will noised, binned, and reported in the same way.

I'm not sure if the timeframes will work out though: I'll be
doing the noise and binning when I get back at the end of May.

So we might need to do something quick and dirty until then.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly/0NwACgkQEP6qDnB1
ZypZiw/+On3+jAaGMVU5NT4q+pWZR/aNGu7mTm7aBLdvuaV3KrECgzjplXpaBZ5f
5oAmfihH7tksNpnaS2ApfQLEi+7BT96aDhX/4FNiC/rDdhn01jGXPmaGZkA6ON9K
5uhdVA2DEya9v7mqjcjM9l28YxPMex3zZjkYLQL+Q/49MrfCZm4pfKjpRII4wICE
uWJ94FqRGrgTNw7Z6G95JQe0S38I0Om9Uewe8SsRIguTBEHCgb6tSubZZTrSdWLy
mCIpaaY5hZcd+nSkMMWmHVsQDq+BK9wHFtciVj6zX/tKCVC4O7lwi++N3l/+m8gl
61P6jW8iS9JNUREH9eUmJ9iBK3cx03BXwaKv/8mJ6FPjE4ugGciMEHbcXqjbLPQk
I4thBsUHFDevQfrkhPRq4KajRvzzcqyOEMi7yqtNnmT0f6wIZ8j/hRByGimnj31M
C15cVBsSjXuNgyL6TmnlgmavSMppJaZ23vj8DX6idIytHFxLforXmjQ2SMZ6dOpr
CBN0C4o7ZSu4ZIOAf+TJosDhVoimLsOg2YtrIE9p3jkB4q/U64/ldWBx8UvnaiSD
BwtZIg4d0CaoEwKLPxVIXEQoxWIXYzRGGsIR3jzZGu97VXdV6N93ozFnKhUHOXhM
uzq6ZNaKUwpT7hzOGyln43jFTbNJsmbPEEUinnKv0mVPQUY9Nm4=
=vrYL
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190424033031</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-24 03:30:31-0400</timestampReceived><subject>[tor-dev] PrivCount Status</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Nick asked me to send a status email about PrivCount, before I go on
leave for a few weeks.

Plan

We want to add the following counters to a PrivCount Proof of Concept:
* check counters (zero, relay count, time in seconds)
* consumed bandwidth

Nick also suggested adding connection counts. That seems like a good
counter, but we want to make sure we do bandwidth in the first release,
because it's a high-risk statistic.


Status

In March and April, I deferred PrivCount tasks to work on chutney for
one of our other sponsors.

I also delayed these tasks, because I was waiting for #29017 and #29018
to merge:
* #29017 PaddingStatistics should be disabled when ExtraInfoStatistics is 0
* #29018 Make all statistics depend on ExtraInfoStatistics


Tickets

The top-level ticket is:

PrivCount proof of concept with existing statistics
https://trac.torproject.org/projects/tor/ticket/27908

I was mainly working on code for these tickets:

PrivCount proof of concept: implement check counters
https://trac.torproject.org/projects/tor/ticket/29004

PrivCount proof of concept: implement consumed bandwidth counters
https://trac.torproject.org/projects/tor/ticket/29005

Make relays report bandwidth usage more often in test networks
https://trac.torproject.org/projects/tor/ticket/29019


Code

I have incomplete branches for #29004, #29005, and #29019 here:
https://github.com/teor2345/tor/tree/ticket29004-wip
https://github.com/teor2345/tor/tree/ticket29005
https://github.com/teor2345/tor/tree/ticket29019

I think all the necessary code is present in these branches.
(But maybe it's not???)

But it needs some cleanup:
* rebase on to the current master,
* put the commits on the right branches
* make sure it does what these tickets say it should do

I'm happy to do that after I come back from leave.
I am also happy if Nick wants to clean up this code.

See also my previous email about BridgeDB and PrivCount. Maybe we can
save ourselves some effort by using PrivCount's obfuscation on
BridgeDB's statistics.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly/2FcACgkQEP6qDnB1
Zyrvwg/+KTpZNg5RdzS5EKeVbi/AhKEgdune9ywoZXNxbFzdpjCkBCM2hgDXTiL6
eM4ytzW1mBS/d2yruZ1rOM3IuqWsTFMBxexp4EiNHV6fcL4mInnkJ6SMPjQd/usK
MvBr4hMyktuQ4vHeKmtP9W0DelAOKsj7lHqL4SQNVzwd+DmegGRF5XGcO23w4R7V
S9ItQb6dqj5kUdCpkRImcdsYBnczPAiCAAeQXMKhQDfEcwergU0wDr1/vC3ead2z
Qg9LRACjtyNJpBqL/uGda0jWqopoZGYYeCpKtSevYVoE4g/2Qj0pYZplS9nVM4oY
1PxG5cK+dbQkVNWCxxB2LS9aW6wIJVce9UqAxTgyaW0OTvs3FPeAVIgmTYxzvxFG
9gbq8mpe8hSOBhAE0tY7/dh1NSnTwPBNwz2jCncsvI7FUv6T+ogZ434Z+Am/bj22
KRHiYr6p7Beej7VfDLHblm5cVpaw4OB3f2PyYnzsTZC3cwCHafU1QHBVLgfJKeZE
caZu8vSSCzIz61A+LYwd20HhTlHyecM3Zq0w09r7fY8wCwPWVjTSLOfOYt2uRL5e
WxD/ugWCRh9ESKOlYlk92R79CIPrJuhO/EHo+EgKLoil2jt82mrKOXyEGkuGNRkQ
YGZBQ7CqUrUk1B/t/OQiYUnCRI7Lf/2gaU4Uy5iMLA0VgZHjbus=
=Xo8o
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190424040041</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-24 04:00:41-0400</timestampReceived><subject>Re: [tor-dev] Proposing sbws changes</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

We've talked about sbws a bit over the last few days.

I'm going to quote some things I wrote in a private email, with some
minor edits. (I would quote the whole thread, but I don't have
permission.)

We also discussed sbws in our team meeting today. Because we are in
lots of different timezones, only some people were there. I'll try
to summarise the meeting discussion as well.

Juga wrote some questions in the team meeting pad. I'll try to answer
their questions here.

&gt;&gt; On 22 Apr 2019, at 14:54, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt; We finished our first working version of sbws in March, and deployed
&gt;&gt; it to a directory authority. We're now working on deploying it to a
&gt;&gt; few more directory authorities:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29290
&gt;&gt; 
&gt;&gt; We're also working on archiving and analysing the bandwidth files
&gt;&gt; produced by sbws and Torflow:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/21378
&gt;&gt; 
&gt;&gt; During this work, we've discovered some missing sbws features:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/30255
&gt;&gt; 
&gt;&gt; We need a better process for proposing and reviewing sbws changes.
&gt;&gt; 
&gt;&gt; At the moment, I am spending a lot of time reviewing and designing
&gt;&gt; sbws changes. And that's not sustainable. We need a process that works
&gt;&gt; when I go on leave, or get busy with other tasks.


&gt; I wrote, privately:
&gt; 
&gt; Our problem is that we keep making lots of changes to sbws. But we don't
&gt; have anyone managing those changes. That makes them high risk.
&gt; 
&gt; We need to assign another paid staff member to do some design and planning
&gt; work on sbws.

&gt; 
&gt; We need to slow down the change process, so sbws becomes stable software.


In the team meeting, we agreed to block sbws merges until I get back from
leave at the end of May. We can make exceptions for critical bug fixes.

In general, we also need to slow down changes to sbws, to manage our
team's workload. sbws is not funded right now, so we need to spend less
time on it.


&gt;&gt; I suggest that we use the tor proposals process:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt
&gt;&gt; 
&gt;&gt; We can submit small changes as diffs to the bandwidth file spec:
&gt;&gt; https://gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt
&gt;&gt; 
&gt;&gt; But large changes, controversial changes, and changes with multiple
&gt;&gt; competing options should have their own proposal. Then, once we decide
&gt;&gt; what to do, we can integrate those changes into the spec.


&gt; Our priority for sbws is maintaining stable software. That's more important
&gt; than writing and merging features quickly.
&gt; 
&gt; We need to talk about sbws changes on tor-dev, so that other people
&gt; can get involved. We can't expect people to watch all the sbws tickets.
&gt; 
&gt; If we keep doing high-risk changes with no feedback, then we will never
&gt; be able to deploy sbws on more than 2 directory authorities.


Juga wrote on the network-team meeting pad:

&gt; - Question 1: teor or network-team: which on do you think has higher
&gt;               priority, #29710 or #30255?
&gt; 
&gt; - Question 2: teor or network-team: longclaw's sbws 1.1.0 has been
&gt;               running for more than 1 week, do we want to start
&gt;               running sbws 1.1.0 on basted or should #29710 and/or
&gt;               #30255 be solved first?


For #29710 sbws reports 6200 relays, 1000 fewer than Torflow's 7200

We should deploy sbws 1.1.0 to bastet. Then wait 5-10 days for the
measurements to be stable.

Comparing longclaw and bastet will help us diagnose #29710:
* Does bastet also report 1000 fewer relays than Torflow?
* Do bastet and longclaw exclude the same relays?
* What else do the results tell us?

We can write and test changes for #29710, and I will review them at
the end of May. (These changes are high risk.)


For #30255 Add additional bandwidth file headers in sbws 1.2

We can add extra headers to sbws. Anyone can review them. But I'd
like to double-check the design before we merge. (These changes are
low risk.)

We talked about how to structure these pull requests on the ticket.
We wanted the changes to be easy to review and merge.
But my advice was not the best advice.

Here is some better advice:

Put the commits in one pull request, in this order:
1. We want to be able to add each header using 1-2 lines of code.
   So we need to refactor the header code. Add commits for this
   refactor.
2. Add one new header in each commit. If a group of headers makes
   more sense together, put their commits next to each other.



We will do sbws reviews as a low priority, so we can manage team
workload. That means that it might take us a few weeks to review them.

But please test them while you are waiting for a review.

I hope that helps!

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly/32kACgkQEP6qDnB1
ZyrnkRAAtDnKNAfCDFDvbg0/3mzvT2eIdTUhmqRlSGtg2M+OSeTXI6M7oiw/qIIe
t31x2sSYs5RAnxdxWpGSCf8tP74cOIcyg86/b5mAKH0ZwRF+NB2mEZN+1bOa5qC4
4TnQFx1yJ5JjJEsjfALE4EgBW8ZHR8M2TDeyzSselTGHjhDyoELOLw/IgaTQMpQk
XQj5h+xIpWzNUF/TeZT1AClKBvposOK9sfeaTCoRdIUGsBcqn15mWVzWJ7kpRgzq
HAsNd+iex8rmcxsY+4nSp4Ik7G9aZsrt48vgY0Edx3ZvWokGNY5cnqCAM1Xh7IXJ
m3sYjVkcMADmn+e8J01+SrHjRWQhFUmDUxlZXoHUWVwUtl7D8NJVQDtSMTJtRfHW
+ODekWbVGXTPswIG5RbZA03M4aw6glZBL0LksitZXtQWHB8JZXaVzeyWboK5ja9f
IcupagbeMJSfo30dzik6iSqqe2r/Sqg6HKMk7GEqHdkj+jVnObxqo3xUiRO79dM7
CwQg4VE69snZ3KNsNW+3PjHMRN5AjD8UsdpGlauwwhARz9UQ0/X38ycX0kw/OXsg
5Ty39UlVP+8hH+lpQ8bR3T8Upw86VJ0zdQ1N/GiUy5GTJ3RQj8lCRUrwwYAscBJp
8a5FbXkrtg3AFwJ0wJEHoVYL2phEZSMpjzlidNbKM8dNKpvDT38=
=KGcC
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190430171209</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-04-30 17:12:09-0400</timestampReceived><subject>[tor-dev] Denial of service defences for onion services</subject><body>

Hello list,

This is a thread summarizing and brainstorming various defences about denial of
service defences for onion services after an in-depth discussion with David Goulet.

We've been thinking about denial of service defences for onion services
lately. This has been a recurrent topic that has been creeping up every once in
a while: Last time we had to tackle this issue it was back in early 2018 when
we had to design a DoS mitigation subsystem because the network was crumbling
down (https://trac.torproject.org/projects/tor/ticket/24902).

Unfortunately, while the DoS mitigation subsystem improved the health of the
network and stopped the DoS attacks back then, it did not address the total
space of possible attacks, and onion services and the network is still open to
various attacks. The main DoS attack right now is the naive attack of flooding
the service with too many introduction requests, and this is the attack that
this post is gonna be dealing with.

We don't like DoS attacks because they cause two issues to Tor:

   a) They damage the health of the Tor network impacting every user
   b) They kill availability of legitimate onion services.

In this thread we will handle these two issues independently, as there is no
single solution that improves both areas at once. We have some pretty good
ideas on (a), but we would appreciate ideas on (b), so feel free to give us
your input.

== a) Minimizing the damage to the network caused by DoS attacks:

   Most of the damage caused during DoS attacks is from the circuits created by
   the attacker to introduce/rendezvous to the victim onion service, and also
   by the circuits created by the victim onion service as it tries to
   rendezvous with all those clients. An attacker can literally create tens of
   thousands of introduction circuits in less than a minute, which get
   amplified by the service launching that many rendezvous circuits. Not good.

   Here are a few ways to reduce the damage to the network:

   == 1) Rate limiting introduction circuits

      There should be a way to rate-limit introductions so that services do not
      get overwhelmed. There are various places where we can rate-limit: we
      could rate-limit on the guard-layer, or on the intro-point layer or on
      the service-layer.

      We have already attempted at rate-limiting on the guard-layer with
      #24902, but it's hard to go deeper there because the guard does not know
      if the circuit is a DoS attacker, or a busy onion service, or 150 Tor
      users in an airport. We also think that rate-limiting on the
      service-layer won't do much good since that's too far down the circuit,
      and we are trying to reduce the operations it has to do so that it
      doesn't get overwhelmed (see #15463 for various queue-management
      approaches for rate-limiting on the service side).

      So we've been thinking of rate-limiting on the introduction point layer,
      since it's a nice soaking point that does not do much right now. See
      #15516 (comment 28) for a concrete proposal by arma which results in far
      less damage to the network (since evil traffic does not get carried
      through to the service-side introduction circuit, and no extra rendezvous
      circuits get launched), and also a swifter way for legit clients to know
      that an onion-service circuit won't work.

   == 2) Stop needless circuit rotation on service-side

      Right now, services will rotate their introduction circuits after a
      certain number of introductions (#26294). This means that during an
      attack, the service not only needs to handle thousands of fake
      introduction circuits, but also continuously tear down and recreate
      introduction circuits and publish new descriptors. See comment 8 on that
      ticket for a short-term proposal on how to improve the situation here,
      by not continuously rotating introduction points.

   == 3) Optimize CPU performance on the service-side

      Right now, onion services during an attack are actually CPU bound. See
      #30221 for various improvements we can do to improve the performance of
      services. However, improving CPU performance might have the opposite effect,
      since processing cells quicker means that the service will make even more 
      rendezvous circuits.

   == 4) Make sure attackers don't take shortcuts around the protocol

      We should make sure that attackers don't take shortcuts around the Tor
      protocol to launch their attacks. Examples here involve requiring a
      proof-of-rendezvous from clients (#25066), and not allowing single-hop
      proxies to do introductions (#22689).

   The above suggestions (maybe in priority order) are ways we can improve the
   damage dealt to the network by DoS attackers. But that still does not make
   DoS attacks less effective. So here follows the section about improving
   service availability:

== b) Improve service availability during DoS attacks

   Unfortunately, it's really hard to accurately stop DoS attacks in the Tor
   protocol. There is just no good way to distinguish between innocent clients
   trying to access content, and a bad actor trying to disable an onion service.
   Here is the main way we've thought of addressing this issue:

   == 1) Binding the application-layer with the Tor introduction-layer

     We think that the Tor protocol layer might not be the right place for
     handling DoS attacks. There are literally million-dollar companies trying
     hard to tackle this issue on the application-layer, where it's easier
     since you can do machine learning, give out captchas, zone out users,
     etc. And that's why we think that the solution to this issue lies on the
     application-layer and not on the Tor protocol layer.

     In particular, a plausible solution here might involve for the client to
     embed application-layer information (e.g. a username/password) in its
     INTRODUCE1 cell, which then gets passed to the service. The service, can
     then check whether the given username/password should be allowed to
     connect (see "rendezvous approver" concept at #16059), and allow or reject
     the connection as it wishes. This way onion service operators can have
     complicated application-layer software that analyzes the activity of users
     and decide whether users should be allowed in or not (based on the number
     of introductions, or their application-layer (web) activity).

              +===========================================+
              |                Tor network                |
              +===========================================+
                ^                                   ^
                |         +-----+                   |
                +--------&gt;| Tor |-------------------+
                  INTRO2  |  HS |  rendezvous circuit
                   with   +-----+    only if approved
                 user/pass   ^
                             |
                             |
                             v
                          +----------+         +-------+
                          |Rendezvous|&lt;-------&gt;|sqlite?|
                          |approver  |         +-------+
                          +----------+


     We think that this is a solution that could allow onion services to
     continue existing under high-load scenarios, since no rendezvous circuits
     would be established during DoS scenarios (and we know that rendezvous
     circuits is what causes the most CPU/network/availability damage).

     However, this is a very complicated solution from an engineering
     perspective given that it requires changes on the client-side (to enhance
     INTRO1 cells with application-layer data), and also involves various
     enhancements on the service-side (various control port commands to
     interact with the (nonexistent) "rendezvous approver" software, which in
     turn needs to interact with other application-layer software (e.g. sql 
     databases to manage membership).

     There is also serious UX concerns with how this would look like on the
     client-side? Also, how does this interact with client auth? And how does
     this interact with intro-point-level rate limiting proposed above
     (onions should be given the option to disable intro-layer rate limiting)?
     How is this related to #17254?

All in all, we feel like we have pretty good options for reducing the
damage that DoS attacks cause on our network, but we are still lacking
easy and practical solutions for ensuring availability of onion services
that are under DoS. For the next months, we plan to focus on reducing
the damage on the network, since the damage on the network has a
cummulative effect as circuits fail and get endlessly retried, where
nothing ends up working right. At the same time, we will be thinking of
good solutions for keeping a high availability on services that receive
DoS attacks.

We would love your feedback and suggestions.

Thanks!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190410182706</emailId><senderName>Rob Jansen</senderName><senderEmail>rob.g.jansen@nrl.navy.mil</senderEmail><timestampReceived>2019-04-10 18:27:06-0400</timestampReceived><subject>[tor-dev] Support for clients using shutdown(SHUT_WR)</subject><body>

Hello!

I'm in the process of re-writing Shadow's traffic generation tool called tgen [0], \
which now depends on shutdown() for two communicating tgen nodes to inform each other \
that they have no more to send (i.e. to perform graceful connection shutdowns). The \
shutdown() functionality is useful now that tgen uses Markov models to generate more \
realistic Tor traffic [1].

Currently, it appears that when the tor client receives a FIN on the AP connection \
(because the tgen client calls shutdown(SHUT_WR)), the tor client sends a RELAY_END \
cell to the exit relay to instruct it to close() the exit TCP connection to the \
server.

The behavior I expected was something more like what is described in tor-spec in \
Section 6.3 (search for "RELAY_FIN") [2], where the tor client sends a RELAY_FIN cell \
to the exit to instruct the exit to perform a shutdown(SHUT_WR) on the exit TCP \
connection to the server.

Is there any plan to support shutdown(SHUT_WR) using RELAY_FIN cells now that Tor is \
itself using shutdown()? (I didn't see any tickets about it after a brief search.)

Thanks!

Peace, love, and positivity,
Rob

[0] https://github.com/shadow/tgen
[1] https://tmodel-ccs2018.github.io/
[2] https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190401044542</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-01 04:45:42-0400</timestampReceived><subject>[tor-dev] Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

The next network team meeting is at 2300 UTC on Tuesday 2 April.

Here is our full April schedule:
    * Tuesday 2 April at 2300 UTC
    * Monday  8 April at 1700 UTC
    * Monday 15 April at 1700 UTC
    * Tuesday 23 April at 1700 UTC (Monday 22 April is the Easter Monday =
public holiday)
    * Monday 29 April at 1700 UTC

Daylight saving changed recently, so at least one of these meetings
will be at a different local time for you.

Our 1700 UTC meeting tracks north american daylight saving time.
Our 2300 UTC meeting does not change for daylight saving time.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlyhl3YACgkQEP6qDnB1
Zyr0SA//SX2DNM9mnl6SuGD4gm/vU6IyQ8dulleJstUtBEB7jYQS6U6zzJvSsXIP
DVnnz5Jqgh3nmeS0gLSQ/u1XBTjiBjmRYHG9H7O8QuBG95Z83AEOZ6cceHVPIWYh
s3nRjqNBkjIcPGDQHIZKK9ByUJp8p/fXrmxAa6dXhe0zzQZC9GKtbZwIwZGQdgVh
X6VMMQ7tm5fLPwvU94V3SdCiN38b4l3UoWn3LiyJzcLXSsEljvnHdG2vxhr8HiUP
UD7f97eBe8yqDyl4XYZ2PBeo8hDp9X7zXUL4e0femGpkeOVTvIAfrR090Y2sW6cL
qQlXs1xyX6mDrwD6v0y998Fh7QXaNm7eWNaQi/DoVWfrK9P37YFumd6WrIj6g7Nm
A6vpcguP4kX2grRp3MrWEQoP2blZcCgKDWnQmUunw4/aeIKVTAO62caQ+GvOhOs2
nqyQwsE43oDMSFnMBtQASs9gScBDOI4j9ynp9UF8Cv7axiPglRDBx67w/A53qHlb
RFBjrYuNGEKc4M4W4BB2Loua+ux9VAZzdQ99vmSHfQBCw9wua5V80w/rQdupAQPp
Pk6wJa/PXDABhUHsKSjQ6R1SUVV20lP/VEvfG8TljYH6xg7bs6Xz4vQTsMaZUUgH
M6P8aOD2MEQKsjOLEVyJMzdFB7ZXxLgH3XLDJ0N0Ab+biNQ8m1Y=
=9zLw
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190424005002</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2019-04-24 00:50:02-0400</timestampReceived><subject>[tor-dev] Export BridgeDB usage statistics</subject><body>

Hi Karsten,

I'm working on &lt;https://bugs.torproject.org/9316&gt;, which will make
BridgeDB export usage statistics.  I would like these statistics to be
public, privacy-preserving, and -- ideally -- added to Tor Metrics.  I
wanted to hear your thoughts on 1) what statistics we should collect,
2) how we can collect these statistics safely, and 3) what format these
statistics should have.

Broadly speaking, these statistics should answer the following
questions:

  * How many requests does BridgeDB see per day?
  * What obfuscation protocols are the most popular?
  * What bridge distribution mechanisms are the most popular?
  * From what countries do we see the most bridge requests?
  * How many BridgeDB requests fail and succeed, respectively?
  * How many requests does BridgeDB see from Yahoo/Gmail/Riseup?
  * How many HTTPS requests are coming from proxies?
  * How many requests are suspicious, and likely issued by bots?

Each request to BridgeDB carries with it some information, which allows
us to answer the above questions.  I suggest that we collect the
following:

  * The distribution mechanism.  Currently, this is HTTPS, email, or
    Moat.

  * The requested transport.  Currently this is vanilla, fte, obfs3,
    obfs4, or scramblesuit.

  * The request's origin.  For Moat and HTTPS, it's the two-letter
    country code, e.g., IT for Italy.  For email, it's the user's email
    domain (Gmail, Yahoo, or Riseup).

  * Whether the request was successful or unsuccessful, i.e., resulted
    in BridgeDB handing out bridges or not.

  * Whether the request was issued by a user or a bot.
    David suggested heuristics that would allow us to estimate if a
    request came from a bot:
    &lt;https://bugs.torproject.org/9316#comment:19&gt; I like these
    suggestions but I'm not sure yet how to encode them -- it's more
    complex than a simple binary flag.

The combination of these statistics results in ~16,800 buckets (3
mechanisms * 5 transports * ~280 ISO country codes * 2 success states *
2 bot states).  We only need to export statistics with non-empty
buckets.  To protect users whose request is the only one in a given
bucket (e.g., there may be only one user in Turkmenistan who
successfully requested an FTE bridge over HTTPS on 2019-04-02), we
should bin the statistics by rounding them up to the next multiple of,
say, 10.  We should further export statistics infrequently -- maybe once
a day.

Here's an example of a simple CSV format that takes into account the
above:

  timestamp,mechanism,transport,country|domain,success,count,origin
  1555977600,https,vanilla,it,successful,40,user
  1555977600,https,obfs4,ca,unsuccessful,10,user
  1555977600,email,vanilla,yahoo.com,successful,50,user
  ...

What are your thoughts?

Thanks,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190422045410</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-22 04:54:10-0400</timestampReceived><subject>[tor-dev] Proposing sbws changes</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

We finished our first working version of sbws in March, and deployed
it to a directory authority. We're now working on deploying it to a
few more directory authorities:
https://trac.torproject.org/projects/tor/ticket/29290

We're also working on archiving and analysing the bandwidth files
produced by sbws and Torflow:
https://trac.torproject.org/projects/tor/ticket/21378

During this work, we've discovered some missing sbws features:
https://trac.torproject.org/projects/tor/ticket/30255

We need a better process for proposing and reviewing sbws changes.

At the moment, I am spending a lot of time reviewing and designing
sbws changes. And that's not sustainable. We need a process that works
when I go on leave, or get busy with other tasks.

I suggest that we use the tor proposals process:
https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt

We can submit small changes as diffs to the bandwidth file spec:
https://gitweb.torproject.org/torspec.git/tree/bandwidth-file-spec.txt

But large changes, controversial changes, and changes with multiple
competing options should have their own proposal. Then, once we decide
what to do, we can integrate those changes into the spec.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly9SPIACgkQEP6qDnB1
ZypV2A//aveZKs6q/M6dKZCFylIrPu4TrNRzGSpVaU93gxXDGeaDUhxRN29YKzMI
bWnyExqSplLqskG6PtJrMbehyAe1PuVx/VRV2I2B2Sos02bZ1xKuCg80CyqjKiML
kNN4yaFZvDPIh61nbiCQdeboLZzYR4tdpC5ghANI7DGMlIo3l0VgKlblCCzqvhTM
L1dnNWaGod+3FCesXB2B8Qq5gExWxgWodOiC+Zn+DqT+VDBEATi/IEOlyobHBz5Y
8NjUVN8EJjGzvdy+YmoVH1KY7KQzr21R3kDWNL335GdTXs4FOC/SF6WCwqa3NFHk
LslivqeIizcVSVhDBghkZtuxk3mePJCQFIvQvCZI/J7bXXWDfDv8E2Z035AEaBuz
5jz6Wa6DVqVYWYfc0I8KeCkGbJhMnuq/mICgzhuw7qiMKpzz+T9Y1MfWf5SFYREV
VmXfdDy4z1IaY4RGF0h6zBDGHB8NTuE6B0ajNaNuzt2Fj2BsXmgrhyzWzQcm3rNa
1tUAMGU5YnGhaVBygYOinq+eT0hcwgrK7ffEOL/Ig7TRbIa7PeMJF4xKtu9OhpRU
qxpek1GawKQrCqgsGEG1c3O58uDYtRdo4jdVFn/Uz2aPtqxtgThnt4G56tulPOfr
K1u+ri1gUu8Tf/YUcSLNTwkkCAtdFX44W/W92M033skJcX+fjxs=
=fVLE
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190418001800</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-04-18 00:18:00-0400</timestampReceived><subject>[tor-dev]  Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

The next network team meeting is at 2300 UTC on Tuesday 23 April.
(Our "patch party" and "first meeting of the month" time.)

Here is our schedule for the next few months:

April schedule:
    * Tuesday 23 April at 2300 UTC (at the "patch party" time)
    * Monday 29 April at 1700 UTC

May schedule:
    * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)
    * Monday 13 May at 1700 UTC
    * Monday 20 May at 1700 UTC
    * Monday 27 May at 1700 UTC

June schedule:
    * Tuesday 4 June at 2300 UTC (first meeting of the month)
    * Monday 10 June at 1700 UTC

T

--
teor
----------------------------------------------------------------------



["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAly3wjgACgkQEP6qDnB1
ZyqFUg/6A9W5AlSvDcFhuyPDS04SBJUKimqF8y/RVn//+vbKva0pySIblvSloKdK
3ct1OxVoq2EQOlD6yL7R38lD+nGsEVol1CmgFh2/moutyICezMteGdZ+imGRJIZn
CcZ/e4MJMDOnoCdlV3YSO27+LqFafaC/KE5/cd1p5AvYXtxKHK7boJwk6Brjwgdj
kVKgruOQ4NR2cSuPIHoQtMFtlMwqSp20aGZMG4zL/wTi036k60vfB90S136IbP+i
UV0K9ss/toL4tQ8JnuMTV6SkUKUBT8pYmZcgc5b2bvirequz7XDk1Pm9oNqsppws
D5s1Lqy8FmjJBkWrNuEA9j9LZpVy30DImNCNuWjRoNq+qUJE3J0uxBHewscrbHTU
q2JhOcIOkPRaywBhB08MnWl1J4i+EO+fuoOYJLEWYvwnuzXCyhU1Gf9Nud0JY8OD
4TKUQ72dmBuBY5PJUXkgiGzGX7VweQoiIEsoZTzm0r3fK5Acnke/LT3u7pq4KR1k
7KDnOHf7KAUtqyCglphIuFNH3one67ZfCc6ifK6fdh87TaCf7r1dY6RkaTgjDqOo
2ju9GmEjyTmDZU03usLzkH8G9uQzrFZ/bPHRl/dgB0UsdWugsKqSrvoBJKK6iLnX
5q0P4HmcRtWHUWWV+FQhFpDccRe8GTN4Ws4TLOrqhphDK9RyreM=
=p4iH
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190418165829</emailId><senderName>Ali Mmo</senderName><senderEmail>mtyali.lovearez@gmail.com</senderEmail><timestampReceived>2019-04-18 16:58:29-0400</timestampReceived><subject>Re: [tor-dev] Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/alternative)]


Hi excuse me I'm in the Iran and I can not attend the meeting
On Apr 18, 2019 4:48 AM, "teor" &lt;teor@riseup.net&gt; wrote:

&gt; Hi,
&gt;
&gt; The next network team meeting is at 2300 UTC on Tuesday 23 April.
&gt; (Our "patch party" and "first meeting of the month" time.)
&gt;
&gt; Here is our schedule for the next few months:
&gt;
&gt; April schedule:
&gt;     * Tuesday 23 April at 2300 UTC (at the "patch party" time)
&gt;     * Monday 29 April at 1700 UTC
&gt;
&gt; May schedule:
&gt;     * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)
&gt;     * Monday 13 May at 1700 UTC
&gt;     * Monday 20 May at 1700 UTC
&gt;     * Monday 27 May at 1700 UTC
&gt;
&gt; June schedule:
&gt;     * Tuesday 4 June at 2300 UTC (first meeting of the month)
&gt;     * Monday 10 June at 1700 UTC
&gt;
&gt; T
&gt;
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;p dir="ltr"&gt;Hi excuse me I'm in the Iran and I can not attend the meeting&lt;/p&gt;
&lt;div class="gmail_quote"&gt;On Apr 18, 2019 4:48 AM, "teor" &lt;&lt;a \
href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br \
type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
The next network team meeting is at 2300 UTC on Tuesday 23 April.&lt;br&gt;
(Our "patch party" and "first meeting of the month" time.)&lt;br&gt;
&lt;br&gt;
Here is our schedule for the next few months:&lt;br&gt;
&lt;br&gt;
April schedule:&lt;br&gt;
      * Tuesday 23 April at 2300 UTC (at the "patch party" time)&lt;br&gt;
      * Monday 29 April at 1700 UTC&lt;br&gt;
&lt;br&gt;
May schedule:&lt;br&gt;
      * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)&lt;br&gt;
      * Monday 13 May at 1700 UTC&lt;br&gt;
      * Monday 20 May at 1700 UTC&lt;br&gt;
      * Monday 27 May at 1700 UTC&lt;br&gt;
&lt;br&gt;
June schedule:&lt;br&gt;
      * Tuesday 4 June at 2300 UTC (first meeting of the month)&lt;br&gt;
      * Monday 10 June at 1700 UTC&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
teor&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;----------&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190418170456</emailId><senderName>Zachary Crownover</senderName><senderEmail>zachary.crownover@gmail.com</senderEmail><timestampReceived>2019-04-18 17:04:56-0400</timestampReceived><subject>Re: [tor-dev] Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/alternative)]


How does one attend the meetings?

&gt; On Apr 18, 2019, at 9:58 AM, Ali Mmo &lt;mtyali.lovearez@gmail.com&gt; wrote:
&gt; 
&gt; Hi excuse me I'm in the Iran and I can not attend the meeting
&gt; 
&gt;&gt; On Apr 18, 2019 4:48 AM, "teor" &lt;teor@riseup.net&gt; wrote:
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; The next network team meeting is at 2300 UTC on Tuesday 23 April.
&gt;&gt; (Our "patch party" and "first meeting of the month" time.)
&gt;&gt; 
&gt;&gt; Here is our schedule for the next few months:
&gt;&gt; 
&gt;&gt; April schedule:
&gt;&gt;     * Tuesday 23 April at 2300 UTC (at the "patch party" time)
&gt;&gt;     * Monday 29 April at 1700 UTC
&gt;&gt; 
&gt;&gt; May schedule:
&gt;&gt;     * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)
&gt;&gt;     * Monday 13 May at 1700 UTC
&gt;&gt;     * Monday 20 May at 1700 UTC
&gt;&gt;     * Monday 27 May at 1700 UTC
&gt;&gt; 
&gt;&gt; June schedule:
&gt;&gt;     * Tuesday 4 June at 2300 UTC (first meeting of the month)
&gt;&gt;     * Monday 10 June at 1700 UTC
&gt;&gt; 
&gt;&gt; T
&gt;&gt; 
&gt;&gt; --
&gt;&gt; teor
&gt;&gt; ----------------------------------------------------------------------
&gt;&gt; 
&gt;&gt; 
&gt;&gt; 
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;How does \
one attend the meetings?&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;On Apr 18, 2019, at 9:58 AM, Ali Mmo \
&lt;&lt;a href="mailto:mtyali.lovearez@gmail.com"&gt;mtyali.lovearez@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;p dir="ltr"&gt;Hi excuse me \
I'm in the Iran and I can not attend the meeting&lt;/p&gt; &lt;div class="gmail_quote"&gt;On Apr \
18, 2019 4:48 AM, "teor" &lt;&lt;a href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; \
wrote:&lt;br type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
The next network team meeting is at 2300 UTC on Tuesday 23 April.&lt;br&gt;
(Our "patch party" and "first meeting of the month" time.)&lt;br&gt;
&lt;br&gt;
Here is our schedule for the next few months:&lt;br&gt;
&lt;br&gt;
April schedule:&lt;br&gt;
    * Tuesday 23 April at 2300 UTC (at the "patch party" time)&lt;br&gt;
    * Monday 29 April at 1700 UTC&lt;br&gt;
&lt;br&gt;
May schedule:&lt;br&gt;
    * Monday 6 May at 1700 UTC (first May meeting, but at the normal \
time)&lt;br&gt;     * Monday 13 May at 1700 UTC&lt;br&gt;
    * Monday 20 May at 1700 UTC&lt;br&gt;
    * Monday 27 May at 1700 UTC&lt;br&gt;
&lt;br&gt;
June schedule:&lt;br&gt;
    * Tuesday 4 June at 2300 UTC (first meeting of the month)&lt;br&gt;
    * Monday 10 June at 1700 UTC&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
teor&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;----------&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;_______________________________________________&lt;/span&gt;&lt;br&gt;&lt;span&gt;tor-dev \
mailing list&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.tor \
project.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190418183547</emailId><senderName>Ali Mmo</senderName><senderEmail>mtyali.lovearez@gmail.com</senderEmail><timestampReceived>2019-04-18 18:35:47-0400</timestampReceived><subject>Re: [tor-dev] Next Network Team Meeting Time</subject><body>

[Attachment #2 (multipart/alternative)]


How should i participate???
On Apr 18, 2019 9:35 PM, "Zachary Crownover" &lt;zachary.crownover@gmail.com&gt;
wrote:

&gt; How does one attend the meetings?
&gt;
&gt; On Apr 18, 2019, at 9:58 AM, Ali Mmo &lt;mtyali.lovearez@gmail.com&gt; wrote:
&gt;
&gt; Hi excuse me I'm in the Iran and I can not attend the meeting
&gt; On Apr 18, 2019 4:48 AM, "teor" &lt;teor@riseup.net&gt; wrote:
&gt;
&gt;&gt; Hi,
&gt;&gt;
&gt;&gt; The next network team meeting is at 2300 UTC on Tuesday 23 April.
&gt;&gt; (Our "patch party" and "first meeting of the month" time.)
&gt;&gt;
&gt;&gt; Here is our schedule for the next few months:
&gt;&gt;
&gt;&gt; April schedule:
&gt;&gt;     * Tuesday 23 April at 2300 UTC (at the "patch party" time)
&gt;&gt;     * Monday 29 April at 1700 UTC
&gt;&gt;
&gt;&gt; May schedule:
&gt;&gt;     * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)
&gt;&gt;     * Monday 13 May at 1700 UTC
&gt;&gt;     * Monday 20 May at 1700 UTC
&gt;&gt;     * Monday 27 May at 1700 UTC
&gt;&gt;
&gt;&gt; June schedule:
&gt;&gt;     * Tuesday 4 June at 2300 UTC (first meeting of the month)
&gt;&gt;     * Monday 10 June at 1700 UTC
&gt;&gt;
&gt;&gt; T
&gt;&gt;
&gt;&gt; --
&gt;&gt; teor
&gt;&gt; ----------------------------------------------------------------------
&gt;&gt;
&gt;&gt;
&gt;&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;

[Attachment #5 (text/html)]

&lt;p dir="ltr"&gt;How should i participate??? &lt;/p&gt;
&lt;div class="gmail_quote"&gt;On Apr 18, 2019 9:35 PM, "Zachary Crownover" \
&lt;&lt;a href="mailto:zachary.crownover@gmail.com"&gt;zachary.crownover@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br type="attribution"&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div \
dir="ltr"&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;How does one attend the meetings?&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;On Apr 18, 2019, at 9:58 AM, Ali Mmo &lt;&lt;a \
href="mailto:mtyali.lovearez@gmail.com" \
target="_blank"&gt;mtyali.lovearez@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;p dir="ltr"&gt;Hi excuse me I'm in the Iran and I can \
not attend the meeting&lt;/p&gt; &lt;div class="gmail_quote"&gt;On Apr 18, 2019 4:48 AM, \
"teor" &lt;&lt;a href="mailto:teor@riseup.net" \
target="_blank"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br type="attribution"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
The next network team meeting is at 2300 UTC on Tuesday 23 April.&lt;br&gt;
(Our "patch party" and "first meeting of the month" time.)&lt;br&gt;
&lt;br&gt;
Here is our schedule for the next few months:&lt;br&gt;
&lt;br&gt;
April schedule:&lt;br&gt;
      * Tuesday 23 April at 2300 UTC (at the "patch party" time)&lt;br&gt;
      * Monday 29 April at 1700 UTC&lt;br&gt;
&lt;br&gt;
May schedule:&lt;br&gt;
      * Monday 6 May at 1700 UTC (first May meeting, but at the normal time)&lt;br&gt;
      * Monday 13 May at 1700 UTC&lt;br&gt;
      * Monday 20 May at 1700 UTC&lt;br&gt;
      * Monday 27 May at 1700 UTC&lt;br&gt;
&lt;br&gt;
June schedule:&lt;br&gt;
      * Tuesday 4 June at 2300 UTC (first meeting of the month)&lt;br&gt;
      * Monday 10 June at 1700 UTC&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
--&lt;br&gt;
teor&lt;br&gt;
------------------------------&lt;wbr&gt;------------------------------&lt;wbr&gt;----------&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/c&lt;wbr&gt;gi-bin/mailman/listinfo/tor-de&lt;wbr&gt;v&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;______________________________&lt;wbr&gt;_________________&lt;/span&gt;&lt;br&gt;&lt;span&gt;tor-dev \
mailing list&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;de \
v&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br&gt;______________________________&lt;wbr&gt;_________________&lt;br&gt;
 tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
&lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/&lt;wbr&gt;cgi-bin/mailman/listinfo/tor-&lt;wbr&gt;dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190301033401</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-01 03:34:01-0400</timestampReceived><subject>[tor-dev] March Network Team Meeting Schedule</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Next week's network team meeting is at a different time.
We'll be meeting at Tuesday 5 March at 2300 UTC on #tor-meeting on OFTC.

Here is our March schedule:
    * Tuesday 5 March at 2300 UTC
    * Monday 11 March at 1800 UTC
    * Monday 18 March at 1800 UTC
    * Monday 25 March at 1800 UTC

We'll have a similar schedule in April, except for the company holiday
on April 22.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlx4qCkACgkQEP6qDnB1
ZyqHYQ/8Cy7CUesdbzSIV4j8lEYUlby3dNX4RHeNHO/23hi660k7z2WPmnUc5YMs
s0gRpJeuuWVdiOZSFBvxcs4BEBNHfUfXgkZ7QhHiGEz+GB8/CCkyzEDfYG/gIkq2
Nyqcyp3ew4PpkUdZ1+xPTfhVUTlI3gR1llAKtp1FPw6i+Ilur+LmZI1wtFNRBr3K
h61hDQrTw4zYt7TvCnKE0UIKxMmhRexY9I1M8n8xkhKxxQK7VRhDUS5JcCvdS55T
IGM7W9ZMf9oTPb33amZd79YwfzPPw8MVm32/JRo2Mts3/c46l8bb7HaH2z98/K3t
6CZt6uVDdVXZwLq9aFrdtngdIKhNWaEHLSd21DjAVKkVYv5nBDsCP+8D23PUH4Rv
aiM5RfRJclaghrL7vRUGTrDaEOXxUtciCDGHdYtdhOogp33O1i05rw8E7tBRtSSN
hL6HfEuYKK7cJ72mLvqoVRdNFD8NjJ3PCGzON2fB4I8z0uPTmF5EfTqkeP8LZoPA
oeVqH+gpaFni8EGSSjCtHkfLwcq+uRBjs1dMS1IDSsoSoMUoIo5F4CLrJILAZcFZ
UY2DzNmzhF6FNPC0ShpocRoil9PL9hp2R56R3pHEJ3uOT8ZrMSQfIxUeL5ZIgaMp
PqmoP8yK0BEIlfg08oK20bRZJLipJPBy+2/LWJVkZmEl650nC9g=
=BmB/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190308015205</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-08 01:52:05-0400</timestampReceived><subject>Re: [tor-dev] download consensus from mirrors based on frequency options in torrc</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 7 Mar 2019, at 22:00, Pouya Miralaee &lt;pouyamiralayi@gmail.com&gt; wrote:
&gt; 
&gt; according to these frequency options below, how should i specify that tor does not \
&gt; or if it has to, only in necessary times downloads consensus from directory servers \
&gt; and in all other cases, download them from mirrors or fallbacks. 
&gt; "ClientBootstrapConsensusAuthorityDownloadSchedule": "6, 11, 3600, 10800, 25200, \
&gt; 54000, 111600, 262800", "ClientBootstrapConsensusFallbackDownloadSchedule": "0, 1, \
&gt; 4, 11, 3600, 10800, 25200, 54000, 111600,262800", \
&gt; "ClientBootstrapConsensusAuthorityOnlyDownloadSchedule": "0, 3, 7, 3600, 10800, \
&gt; 25200, 54000, 111600,262800", 
&gt; I just intend to complete the decentralized situation in here. but i can not figure \
&gt; out how these frequency options work together.

The defaults are fine for most clients.
And if you change them, you may be less anonymous.

All supported versions of Tor only use the first value in the list:
  o Minor features (configuration):
    - The "DownloadSchedule" options have been renamed to end with
      "DownloadInitialDelay". The old names are still allowed, but will
      produce a warning. Comma-separated lists are still permitted for
      these options, but all values after the first are ignored (as they
      have been since 0.2.9). Closes ticket 23354.
https://gitweb.torproject.org/tor.git/tree/ReleaseNotes#n1891

Here's how you can use the authorities less:

1. Make sure you are using the default set of authorities.
(No DirAuthority or AlternateDirAuthority lines in your config.)

2. Avoid using the directory authorities when you're looking for a fallback:
  DirAuthorityFallbackRate 0.000001
Don't set this value to zero, unless you are willing to fail if the
fallbacks you try are not available.

3. Delay authority fetches until you've checked a few fallbacks:
On a client:
  ClientBootstrapConsensusAuthorityDownloadSchedule "30"
Or however many seconds you're willing to wait if the fallbacks you try are
not available. (You can't make relays stop connecting to the authorities.)

And if you're using 0.3.4.8 or later, then you can spell the option like this:
  ClientBootstrapConsensusAuthorityDownloadInitialDelay 30
The old spellings work on all supported Tor versions.

Have fun!

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlyBysUACgkQEP6qDnB1
ZyqvIw/+MN3ymjwA9/VTPvM/Qqj4aZeENB04HvBzZ4r2wqZ5Ey2m0hP4H00/uOCa
oKSt4eSnFplft0Mwg0QXI5myOFWWYhalYk1ZR05IlOwfCjaqb/0j8QIMtqqH0rhf
FlPWGO+8W25q2a2O+veqOcE4/F94S3UVb9kIdDGLM7iVRX9KMn2j1OYCcDllBOle
CpM84Hjq+h/cW7/0C6KV4iJhcRu/VmD+dp1SrNFWLQGbhdFx6J1RCADw/xYvCRuc
K+63IZGi67KMYvokRbZXMO5s2wQupqthA5RTqkG1BWYnqFlSs1SonQS2Xng/dpxG
KfPPWHwVj7pgOP3MrIJ3+Xr+SR1ylLs5BBk1KJfY/eFGwre/s62FFhVH5Y1fHm1t
3giMkHORFQ+zRkk09mgxqME4DhmYxkr3ibCkffXCqaaanp99OFXUts1iO57cpflM
j4+p+yGnSEtGlguTmzwjazCjq+WAmN0VlZmtKXbvZ8SKAbo7ahQNeeGcttZgYJHn
OCahH1kI9s0jeQjIdd5AWuRm6alco1wsRZTAXUgP6Iw1xWp1uBxXZq378Qb2G5IO
gI/VZOlYSgi1l3aY+ymuAeNVbOSJH0B+tHoCyVWWlY11JUZwXggaESxsDyFkhpVp
5mscdJvPNZceGJbvMuADdCJsVtWTF4FyW008KaFFr7x6zZoWBd0=
=/kGx
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190312231940</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-12 23:19:40-0400</timestampReceived><subject>Re: [tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

&gt; On 13 Mar 2019, at 08:44, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Hi teor,
&gt; 
&gt; &gt; Thanks, I opened a ticket to review and merge it here:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/29687
&gt; &gt; It should get reviewed within a week or two.
&gt; 
&gt; First off, thank you for doing this! As of now, it seems to have been merged.
&gt; 
&gt; &gt; &gt; I have added the "TrackFailures" flag to my GitHub PR and also mentioned other \
&gt; &gt; &gt; flags will come in the future.
&gt; &gt; I like what you did here: I think having one option with extra flags is
&gt; &gt; better than two options.
&gt; 
&gt; Again, Thank you!
&gt; 
&gt; Also, can we mark Prop299 as "Accepted" or is there any updates needed to this \
&gt; proposal?

I haven't reviewed the latest version, and I'm not sure if anyone else has either.
(I was hoping that someone else would review your latest version before it
got merged.)

Reading through it, I've noticed some things that I don't understand. I'll do a
review on your pull request. I'll also get a second team member to review the
proposal.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190313163939</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-03-13 16:39:39-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

New development:
https://webkit.org/blog/8613/intelligent-tracking-prevention-2-1/

In particular:

---------
WebKit implemented partitioned caches more than five years ago. A
partitioned cache means cache entries for third-party resources are
double-keyed to their origin and the first-party eTLD+1. This
prohibits cross-site trackers from using the cache to track users.
Even so, our research has shown that trackers, in order to keep their
practices alive under ITP, have resorted to partitioned cache abuse.
Therefore, we have developed the verified partitioned cache.

When a partitioned cache entry is created for a domain that's
classified by ITP as having cross-site tracking capabilities, the
entry gets flagged for verification. After seven days, if there's a
cache hit for such a flagged entry, WebKit will act as if it has never
seen this resource and load it again. The new response is then
compared to the cached response and if they match in the ways we care
about for privacy reasons, the verification flag is cleared and the
cache entry is from that point considered legitimate. However, if the
new response does not match the cache entry, the old entry is
discarded, and a new one is created with the verification flag set,
and the verification process starts over.

ITP currently does this verification for permanent redirects since
that's where we see abuse today.
----------

It's not clear to me if the permanent redirects are in a partitioned
cache though. Either way, this doesn't affect Tor too much given that
we don't save history.

Although it does bring up a simple case that e could implement with no
problem: never remember a permanent redirect.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190313225820</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-13 22:58:20-0400</timestampReceived><subject>Re: [tor-dev] Proposal 301: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 14 Mar 2019, at 03:50, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hi,
&gt; 
&gt;&gt;&gt; On 25/02/2019 23:30, teor wrote:
&gt;&gt;&gt;&gt; Looks good to me, let's merge it as an "accepted" proposal?
&gt; 
&gt; This is now proposal 301.
&gt; 
&gt; What is the process by which this becomes "accepted"? Is this just a
&gt; matter of someone making that commit?

Here's what "Accepted" means:

   Accepted: The proposal is complete, and we intend to implement it.
      After this point, substantive changes to the proposal should be
      avoided, and regarded as a sign of the process having failed
      somewhere.

https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n152

I can't imagine us making any substantive changes to the proposal.

The reasons and actions are clear, and there are clearly-defined sub-tickets
for each of the tasks. We have successfully implemented similar tasks before.

Unless anyone objects in the next week, let's make this change:
https://trac.torproject.org/projects/tor/ticket/29776

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlyJiwwACgkQEP6qDnB1
ZyqExRAAvERKAFH5ZF944KwLwNX8Fp/nMOxO4fjNrtvnefHm16nXxq/gxYNvl7jz
IFQuhetgGXuAVOQ7Mos7iVFT3AWaElO2XhO8hH8UZhQaoLYiecx9BnLrG9hO8+gG
Sg5LxasliBJJagF9LUHlfiSq+jLV10FOXYS3PWGW5izs6LzC1cyrBe+YSLDrXOQ+
GXWSMcNH++a1EzmRxwXwnFKH+FnWXkbEtHOT2XGyXmGBG55KGXQBWVZVsFaAmDAA
dh/c/MAzNwa1NYR2Ae/pGmV5dnVlS2lDmfPcTAuv2fwbJe/07yarggEh0wEtqA5/
A4mZ/allNairY9z+jz3WwqpSYcLh2UK4/zTAEZJbZEwp8yB74GBBXS/0vqmrpeIh
F2Bb28Wz/pArvZiIw96YTyf0w1bWwpmtuyiiEjQ8Dyj/GtFT28ReTrrER9fUrI2V
wnkWnE52feuMTsEc4XBvOAf1piLQxcG8V77FtrrDzzB77ac/cjqpg8sR4lfZ9Yq2
eJ4/nygrC/+jm00K17qPVAwz/kuO4wgxxMx8ZcBDFc9LOQp8skueV/aGOUZkab5v
pbNSvKOizgtTGPBVmvfmrGFncYqa+aPCqCEALjJox5KlsXXt8XpslivLWgs5wY+2
HPJ0jFDt/u1FTFE8JpfmnP46HF6Q7fVPTYpN0qzY7D3wmAzOevo=
=kLXp
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190318160441</emailId><senderName>Watson Ladd</senderName><senderEmail>watsonbladd@gmail.com</senderEmail><timestampReceived>2019-03-18 16:04:41-0400</timestampReceived><subject>Re: [tor-dev] New revision: Proposal 295: Using ADL for relay cryptography (solving the crypto-taggi</subject><body>

[Attachment #2 (multipart/alternative)]


Some comments: some purely editorial, some substantive.
Editorial: stuff is xored with zero, the concatenation language is not used
consistently. I found it difficult to understand the proposed scheme and
check equivalence to the paper. Maybe some more words to explain the
layering would help.

Substantive: Does it matter that it is possible to compute a message that
doesnt change the digest if you know the key?

On Fri, Mar 1, 2019 at 9:05 AM Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;
&gt; Hi!
&gt;
&gt; I'm sending a new version of proposal 295 from Tomer Ashur, Orr
&gt; Dunkelman, and Atul Luykx.  It's an updated version of their design
&gt; for an improved relay cell encryption scheme, to prevent tagging
&gt; attacks.
&gt;
&gt; This proposal is checked into the torspec repository.  I'm also
&gt; linking to a diagram for this scheme (and its latex source) from Atul
&gt; Luykx: https://people.torproject.org/~nickm/prop295/
&gt;
&gt; Finally, I have a draft python reference implementation for an older
&gt; version of this proposal.  I hope to be updating it soon and sending
&gt; out a link next week.
&gt;
&gt; cheers!  -- Nick
&gt;
&gt;
&gt;
&gt; Filename: 295-relay-crypto-with-adl.txt
&gt; Title: Using ADL for relay cryptography (solving the crypto-tagging
attack)
&gt; Author: Tomer Ashur, Orr Dunkelman, Atul Luykx
&gt; Created: 22 Feb 2018
&gt; Last-Modified: 1 March 2019
&gt; Status: Open
&gt;
&gt;
&gt; 0. Context
&gt;
&gt;    Although Crypto Tagging Attacks were identified already in the
&gt;    original Tor design, it was not before the rise of the
&gt;    Procyonidae in 2012 that their severity was fully realized. In
&gt;    Proposal 202 (Two improved relay encryption protocols for Tor
&gt;    cells) Nick Mathewson discussed two approaches to stymie tagging
&gt;    attacks and generally improve Tor's cryptography. In Proposal 261
&gt;    (AEZ for relay cryptography) Mathewson puts forward a concrete
&gt;    approach which uses the tweakable wide-block cipher AEZ.
&gt;
&gt;    This proposal suggests an alternative approach to Proposal 261
&gt;    using the notion of Release (of) Unverified Plaintext (RUP)
&gt;    security. It describes an improved algorithm for circuit
&gt;    encryption based on CTR-mode which is already used in Tor, and an
&gt;    additional component for hashing.
&gt;
&gt;    Incidentally, and similar to Proposal 261, this proposal employs
&gt;    the ENCODE-then-ENCIPHER approach thus it improves Tor's E2E
&gt;    integrity by using (sufficient) redundancy.
&gt;
&gt;    For more information about the scheme and a security proof for
&gt;    its RUP-security see
&gt;
&gt;        Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting
&gt;        Authenticated Encryption Robustness with Minimal
&gt;        Modifications. CRYPTO (3) 2017: 3-33
&gt;
&gt;    available online at https://eprint.iacr.org/2017/239 .
&gt;
&gt;    For authentication between the OP and the edge node we use
&gt;    the PIV scheme: https://eprint.iacr.org/2013/835
&gt;
&gt; 2. Preliminaries
&gt;
&gt; 2.1 Motivation
&gt;
&gt;    For motivation, see proposal 202.
&gt;
&gt; 2.2. Notation
&gt;
&gt;    Symbol               Meaning
&gt;    ------               -------
&gt;    M                    Plaintext
&gt;    C_I                  Ciphertext
&gt;    CTR                  Counter Mode
&gt;    N_I                  A de/encryption nonce (to be used in CTR-mode)
&gt;    T_I                  A tweak (to be used to de/encrypt the nonce)
&gt;    T'_I                 A running digest
&gt;    ^                    XOR
&gt;    ||                   Concatenation
&gt;           (This is more readable than a single | but must be adapted
&gt;           before integrating the proposal into tor-spec.txt)
&gt;
&gt; 2.3. Security parameters
&gt;
&gt;    HASH_LEN -- The length of the hash function's output, in bytes.
&gt;
&gt;    PAYLOAD_LEN -- The longest allowable cell payload, in bytes. (509)
&gt;
&gt;    DIG_KEY_LEN -- The key length used to digest messages (e.g.,
&gt;    using GHASH). Since GHASH is only defined for 128-bit keys, we
&gt;    recommend DIG_KEY_LEN = 128.
&gt;
&gt;    ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We
&gt;    recommend ENC_KEY_LEN = 128.
&gt;
&gt; 2.4. Key derivation (replaces Section 5.2.2)
&gt;
&gt;    For newer KDF needs, Tor uses the key derivation function HKDF
&gt;    from RFC5869, instantiated with SHA256. The generated key
&gt;    material is:
&gt;
&gt;                  K = K_1 | K_2 | K_3 | ...
&gt;
&gt;    where, if H(x,t) denotes HMAC_SHA256 with value x and key t,
&gt;          and m_expand denotes an arbitrarily chosen value,
&gt;          and INT8(i) is an octet with the value "i", then
&gt;              K_1     = H(m_expand | INT8(1) , KEY_SEED )
&gt;          and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED ),
&gt;    in RFC5869's vocabulary, this is HKDF-SHA256 with info ==
&gt;    m_expand, salt == t_key, and IKM == secret_input.
&gt;
&gt;    When used in the ntor handshake a string of key material is
&gt;    generated and is used in the following way:
&gt;
&gt;    Length       Purpose                         Notation
&gt;    ------        -------                        --------
&gt;    HASH_LEN     forward digest IV               DF      *
&gt;    HASH_LEN     backward digest IV              DB      *
&gt;    ENC_KEY_LEN  encryption key                  Kf
&gt;    ENC_KEY_LEN  decryption key                  Kb
&gt;    DIG_KEY_LEN  forward digest key              Khf
&gt;    DIG_KEY_LEN  backward digest key             Khb
&gt;    ENC_KEY_LEN  forward tweak key               Ktf
&gt;    ENC_KEY_LEN  backward tweak key              Ktb
&gt;    DIGEST_LEN   nonce to use in the                      *
&gt;                   hidden service protocol
&gt;
&gt;       * I am not sure that we need these any longer.
&gt;
&gt;    Excess bytes from K are discarded.
&gt;
&gt; 2.6. Ciphers
&gt;
&gt;    For hashing(*) we use GHASH with a DIG_KEY_LEN-bit key. We write
&gt;    this as Digest(K,M) where K is the key and M the message to be
&gt;    hashed.
&gt;
&gt;    We use AES with an ENC_KEY_LEN-bit key. For AES encryption
&gt;    (resp., decryption) we write E(K,X) (resp., D(K,X)) where K is an
&gt;    ENC_KEY_LEN-bit key and X the block to be encrypted (resp.,
&gt;    decrypted).
&gt;
&gt;    For a stream cipher, unless otherwise specified, we use
&gt;    ENC_KEY_LEN-bit AES in counter mode, with a nonce that is
&gt;    generated as explained below. We write this as Encrypt(K,N,X)
&gt;    (resp., Decrypt(K,N,X)) where K is the key, N the nonce, and X
&gt;    the message to be encrypted (resp., decrypted).
&gt;
&gt;    (*) The terms hash and digest are used interchangeably.
&gt;
&gt; 3. Routing relay cells
&gt;
&gt; 3.1. Forward Direction
&gt;
&gt;    The forward direction is the direction that CREATE/CREATE2 cells
&gt;    are sent.
&gt;
&gt; 3.1.1. Routing from the Origin
&gt;
&gt;    Let n denote the integer representing the destination node. For
&gt;    I = 1...n+1, T'_{I} is initialized to the 128-bit string consisting
&gt;    entirely of '0's. When an OP sends a relay cell, they prepare the
&gt;    cell as follows:
&gt;
&gt;         The OP prepares the authentication part of the message:
&gt;
&gt;                 C_{n+1} = M
&gt;                 T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
&gt;                 N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)
&gt;                 T'_{n+1} = T_{n+1}
&gt;
&gt;         Then, the OP prepares the multi-layered encryption:
&gt;
&gt;                 For I=n...1:
&gt;                         C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})
&gt;                         T_I = Digest(Khf_I,T'_I||C_I)
&gt;                         N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})
&gt;                         T'_I = T_I
&gt;
&gt;           The OP sends C_1 and N_1 to node 1.
&gt;
&gt; 3.1.2. Relaying Forward at Onion Routers
&gt;
&gt;    When a forward relay cell is received by OR I, it decrypts the
&gt;    payload with the stream cipher, as follows:
&gt;
&gt;         'Forward' relay cell:
&gt;
&gt;                 T_I = Digest(Khf_I,T'_I||C_I)
&gt;                 N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)
&gt;                 C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)
&gt;                 T'_I = T_I
&gt;
&gt;    The OR then decides whether it recognizes the relay cell as
&gt;    described below. If the OR recognizes the cell, it processes the
&gt;    contents of the relay cell. Otherwise, it passes C_{I+1}||N_{I+1}
&gt;    along the circuit if the circuit continues.
&gt;
&gt;    For more information, see section 4 below.
&gt;
&gt; 3.2. Backward Direction
&gt;
&gt;    The backward direction is the opposite direction from
&gt;    CREATE/CREATE2 cells.
&gt;
&gt; 3.2.1. Relaying Backward at Onion Routers
&gt;
&gt;    When a backward relay cell is received by OR I, it encrypts the
&gt;    payload with the stream cipher, as follows:
&gt;
&gt;         'Backward' relay cell:
&gt;
&gt;                 T_I = Digest(Khb_I,T'_I||C_{I+1})
&gt;                 N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})
&gt;                 C_I = Encrypt(Kb_I,N_I,C_{I+1})
&gt;                 T'_I = T_I
&gt;
&gt;    with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes
&gt;    C_I and N_I along the circuit towards the OP.
&gt;
&gt; 3.2.2. Routing to the Origin
&gt;
&gt;    When a relay cell arrives at an OP, the OP decrypts the payload
&gt;    with the stream cipher as follows:
&gt;
&gt;         OP receives relay cell from node 1:
&gt;
&gt;                 For I=1...n, where n is the end node on the circuit:
&gt;                         C_{I+1} = Decrypt(Kb_I,N_I,C_I)
&gt;                         T_I = Digest(Khb_I,T'_I||C_{I+1})
&gt;                         N_{I+1} = T_I ^ D(Ktb_I,T_I ^ N_I)
&gt;                         T'_I = T_I
&gt;
&gt;                 If the payload is recognized (see Section 4.1),
&gt;                 then:
&gt;
&gt;                        The sending node is I. Stop, process the
&gt;                        payload and authenticate.
&gt;
&gt; 4. Application connections and stream management
&gt;
&gt; 4.1. Relay cells
&gt;
&gt;   Within a circuit, the OP and the end node use the contents of
&gt;   RELAY packets to tunnel end-to-end commands and TCP connections
&gt;   ("Streams") across circuits. End-to-end commands can be initiated
&gt;   by either edge; streams are initiated by the OP.
&gt;
&gt;         The payload of each unencrypted RELAY cell consists of:
&gt;
&gt;                 Relay command           [1 byte]
&gt;                 'Recognized'            [2 bytes]
&gt;                 StreamID                [2 bytes]
&gt;                 Length                  [2 bytes]
&gt;                 Data                    [PAYLOAD_LEN-23 bytes]
&gt;
&gt;    The 'recognized' field is used as a simple indication that the
&gt;    cell is still encrypted. It is an optimization to avoid
&gt;    calculating expensive digests for every cell. When sending cells,
&gt;    the unencrypted 'recognized' MUST be set to zero.
&gt;
&gt;    When receiving and decrypting cells the 'recognized' will always
&gt;    be zero if we're the endpoint that the cell is destined for. For
&gt;    cells that we should relay, the 'recognized' field will usually
&gt;    be nonzero, but will accidentally be zero with P=2^-16.
&gt;
&gt;    If the cell is recognized, the node moves to verifying the
&gt;    authenticity of the message as follows(*):
&gt;
&gt;           forward direction (executed by the end node):
&gt;
&gt;                 T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})
&gt;                 Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})
&gt;                 T'_{n+1} = T_{n+1}
&gt;
&gt;                 The message is authenticated (i.e., M = C_{n+1}) if
&gt;                 and only if Tag = 0
&gt;
&gt;           backward direction (executed by the OP):
&gt;
&gt;                 The message is authenticated (i.e., C_{n+1} = M) if
&gt;                 and only if N_{n+1} = 0
&gt;
&gt;
&gt;    The old Digest field is removed since sufficient information for
&gt;    authentication is now included in the nonce part of the payload.
&gt;
&gt;        (*) we should consider dropping the 'recognized' field
&gt;        altogether and always try to authenticate. Note that this is
&gt;        an optimization question and the crypto works just as well
&gt;        either way.
&gt;
&gt;    The 'Length' field of a relay cell contains the number of bytes
&gt;    in the relay payload which contain real payload data. The
&gt;    remainder of the payload is padding bytes.
&gt;
&gt; 4.2. Appending the encrypted nonce and dealing with version-homogenic
&gt;      and version-heterogenic circuits
&gt;
&gt;    When a cell is prepared to be routed from the origin (see Section
&gt;    3.1.1) the encrypted nonce N is appended to the encrypted cell
&gt;    (occupying the last 16 bytes of the cell). If the cell is
&gt;    prepared to be sent to a node supporting the new protocol, S is
&gt;    combined with other sources to generate the layer's
&gt;    nonce. Otherwise, if the node only supports the old protocol, n
&gt;    is still appended to the encrypted cell (so that following nodes
&gt;    can still recover their nonce), but a synchronized nonce (as per
&gt;    the old protocol) is used in CTR-mode.
&gt;
&gt;    When a cell is sent along the circuit in the 'backward'
&gt;    direction, nodes supporting the new protocol always assume that
&gt;    the last 16 bytes of the input are the nonce used by the previous
&gt;    node, which they process as per Section 3.2.1. If the previous
&gt;    node also supports the new protocol, these cells are indeed the
&gt;    nonce. If the previous node only supports the old protocol, these
&gt;    bytes are either encrypted padding bytes or encrypted data.
&gt;
&gt; 5. Security
&gt;
&gt; 5.1. Resistance to crypto-tagging attacks
&gt;
&gt;    A crypto-tagging attack involves a circuit with two colluding
&gt;    nodes and at least one honest node between them. The attack works
&gt;    when one node makes a change to the cell (tagging) in a way that
&gt;    can be undone by the other colluding party. In between, the
&gt;    tagged cell is processed by honest nodes which do not detect the
&gt;    change. The attack is possible due to the malleability property
&gt;    of CTR-mode: a change to a ciphertext bit effects only the
&gt;    respective plaintext bit in a predicatble way. This proposal
&gt;    frustrates the crypto-tagging attack by linking the nonce to the
&gt;    encrypted message such that any change to the ciphertext results
&gt;    in a random nonce and hence, random plaintext.
&gt;
&gt;    Let us consider the following 3-hop scenario: the entry and end
&gt;    nodes are malicious and colluding and the middle node is honest.
&gt;
&gt; 5.1.1. forward direction
&gt;
&gt;    Suppose that node I tags the ciphertext part of the message
&gt;    (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As
&gt;    per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}
&gt;    and N_{I+2}. Since C'_{I+2} is different than it should be, so
&gt;    are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+2}
&gt;    using these values results in a random string for C_{I+2}. Since
&gt;    C_{I+2} is now just a random string, it is decrypted into a
&gt;    random string and cannot be 'recognized' nor
&gt;    authenticated. Furthermore, since C'_{I+1} is different than what
&gt;    it should be, T'_{I+1} (i.e., the running digest of the middle
&gt;    node) is now out of sync with that of the OP, which means that
&gt;    all future cells sent through this node will decrypt into garbage
&gt;    (random strings).
&gt;
&gt;    Likewise, suppose that instead of tagging the ciphertext, Node I
&gt;    node tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node
&gt;    I+1 digests the payload the tweak T_{I+1} is find, but using it
&gt;    to decrypt N'_{I+1} again results in a random nonce for
&gt;    N_{I+2}. This random nonce is used to decrypt C_{I+1} into a
&gt;    random C'_{I+2} which is not recognized by the end node. Since
&gt;    C_{I+2} is now a random string, the running digest of the end
&gt;    node is now out of sync, which prevents the end node from
&gt;    decrypting further cells.
&gt;
&gt; 5.1.2. Backward direction
&gt;
&gt;    In the backward direction the tagging is done by Node I+2
&gt;    untagging by the Node I. Suppose first that Node I+2 tags the
&gt;    ciphertext C_{I+2} and sends it to Node I+1. As per Section
&gt;    3.2.1, Node I+1 first digests C_{I+2} and uses the resulting
&gt;    T_{I+1} to generate a nonce N_{I+1}. From this it is clear that
&gt;    any change introduced by Node I+2 influences the entire payload
&gt;    and cannot be removed by Node I.
&gt;
&gt;    Unlike in Section 5.1.1., the cell is blindly delivered by Node I
&gt;    to the OP which decrypts it. However, since the payload leaving
&gt;    the end node was modified, the message cannot be authenticated by
&gt;    the OP which can be trusted to tear down the circuit.
&gt;
&gt;    Suppose now that tagging is done by Node I+2 to the nonce part of
&gt;    the payload, i.e., N_{I+2}. Since this value is encrypted by Node
&gt;    I+1 to generate its own nonce N_{I+1}, again, a random nonce is
&gt;    used which affects the entire keystream of CTR-mode. The cell
&gt;    again cannot be authenticated by the OP and the circuit is torn
&gt;    down.
&gt;
&gt;    We note that the end node can modify the plain message before
&gt;    ever encrypting it and this cannot be discovered by the Tor
&gt;    protocol. This vulnerability is outside the scope of this
&gt;    proposal and users should always use TLS to make sure that their
&gt;    application data is encrypted before it enters the Tor network.
&gt;
&gt; 5.2. End-to-end authentication
&gt;
&gt;    Similar to the old protocol, this proposal only offers end-to-end
&gt;    authentication rather than per-hop authentication. However,
&gt;    unlike the old protocol, the ADL-construction is non-malleable
&gt;    and hence, once a non-authentic message was processed by an
&gt;    honest node supporting the new protocol, it is effectively
&gt;    destroyed for all nodes further down the circuit. This is because
&gt;    the nonce used to de/encrypt all messages is linked to (a digest
&gt;    of) the payload data.
&gt;
&gt;    As a result, while honest nodes cannot detect non-authentic
&gt;    messages, such nodes still destroy the message thus invalidating
&gt;    its authentication tag when it is checked by edge nodes. As a
&gt;    result, security against crypto-tagging attacks is ensured as
&gt;    long as an honest node supporting the new protocol processes the
&gt;    message between two dishonest ones.
&gt;
&gt; 5.3 The Running Digest
&gt;
&gt;    Unlike the old protocol, the running digest is now computed as
&gt;    the output of a GHASH call instead of a hash function call
&gt;    (SHA256). Since GHASH does not provide the same type of security
&gt;    guarantees as SHA256, it is worth discussing why security is not
&gt;    lost from computing the running digest differently.
&gt;
&gt;    The running digets is used to ensure that if the same payload is
&gt;    encrypted twice, then the resulting ciphertext does not remain
&gt;    the same. Therefore, all that is needed is that the digest should
&gt;    repeat with low probability. GHASH is a universal hash function,
&gt;    hence it gives such a guarantee assuming its key is chosen
&gt;    uniformly at random.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Some comments: some purely editorial, some substantive.&lt;br&gt;
Editorial: stuff is xored with zero, the concatenation language is not used \
consistently. I found it difficult to understand the proposed scheme and check \
equivalence to the paper. Maybe some more words to explain the layering would \
help.&lt;br&gt; &lt;br&gt;
Substantive: Does it matter that it is possible to compute a message that doesnt \
change the digest if you know the key?&lt;br&gt;&lt;/div&gt; &lt;br&gt;
On Fri, Mar 1, 2019 at 9:05 AM Nick Mathewson &lt;&lt;a \
href="mailto:nickm@torproject.org" target="_blank" \
rel="noreferrer"&gt;nickm@torproject.org&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; Hi!&lt;br&gt;
&gt;&lt;br&gt;
&gt; I'm sending a new version of proposal 295 from Tomer Ashur, Orr&lt;br&gt;
&gt; Dunkelman, and Atul Luykx.   It's an updated version of their design&lt;br&gt;
&gt; for an improved relay cell encryption scheme, to prevent tagging&lt;br&gt;
&gt; attacks.&lt;br&gt;
&gt;&lt;br&gt;
&gt; This proposal is checked into the torspec repository.   I'm also&lt;br&gt;
&gt; linking to a diagram for this scheme (and its latex source) from Atul&lt;br&gt;
&gt; Luykx: &lt;a href="https://people.torproject.org/~nickm/prop295/" rel="noreferrer \
noreferrer" target="_blank"&gt;https://people.torproject.org/~nickm/prop295/&lt;/a&gt;&lt;br&gt; \
&gt;&lt;br&gt; &gt; Finally, I have a draft python reference implementation for an \
older&lt;br&gt; &gt; version of this proposal.   I hope to be updating it soon and \
sending&lt;br&gt; &gt; out a link next week.&lt;br&gt;
&gt;&lt;br&gt;
&gt; cheers!   -- Nick&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; Filename: 295-relay-crypto-with-adl.txt&lt;br&gt;
&gt; Title: Using ADL for relay cryptography (solving the crypto-tagging attack)&lt;br&gt;
&gt; Author: Tomer Ashur, Orr Dunkelman, Atul Luykx&lt;br&gt;
&gt; Created: 22 Feb 2018&lt;br&gt;
&gt; Last-Modified: 1 March 2019&lt;br&gt;
&gt; Status: Open&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; 0. Context&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Although Crypto Tagging Attacks were identified already in the&lt;br&gt;
&gt;      original Tor design, it was not before the rise of the&lt;br&gt;
&gt;      Procyonidae in 2012 that their severity was fully realized. In&lt;br&gt;
&gt;      Proposal 202 (Two improved relay encryption protocols for Tor&lt;br&gt;
&gt;      cells) Nick Mathewson discussed two approaches to stymie tagging&lt;br&gt;
&gt;      attacks and generally improve Tor's cryptography. In Proposal 261&lt;br&gt;
&gt;      (AEZ for relay cryptography) Mathewson puts forward a concrete&lt;br&gt;
&gt;      approach which uses the tweakable wide-block cipher AEZ.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      This proposal suggests an alternative approach to Proposal 261&lt;br&gt;
&gt;      using the notion of Release (of) Unverified Plaintext (RUP)&lt;br&gt;
&gt;      security. It describes an improved algorithm for circuit&lt;br&gt;
&gt;      encryption based on CTR-mode which is already used in Tor, and an&lt;br&gt;
&gt;      additional component for hashing.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Incidentally, and similar to Proposal 261, this proposal employs&lt;br&gt;
&gt;      the ENCODE-then-ENCIPHER approach thus it improves Tor's E2E&lt;br&gt;
&gt;      integrity by using (sufficient) redundancy.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For more information about the scheme and a security proof for&lt;br&gt;
&gt;      its RUP-security see&lt;br&gt;
&gt;&lt;br&gt;
&gt;            Tomer Ashur, Orr Dunkelman, Atul Luykx: Boosting&lt;br&gt;
&gt;            Authenticated Encryption Robustness with Minimal&lt;br&gt;
&gt;            Modifications. CRYPTO (3) 2017: 3-33&lt;br&gt;
&gt;&lt;br&gt;
&gt;      available online at &lt;a href="https://eprint.iacr.org/2017/239" \
rel="noreferrer noreferrer" target="_blank"&gt;https://eprint.iacr.org/2017/239&lt;/a&gt; \
.&lt;br&gt; &gt;&lt;br&gt;
&gt;      For authentication between the OP and the edge node we use&lt;br&gt;
&gt;      the PIV scheme: &lt;a href="https://eprint.iacr.org/2013/835" rel="noreferrer \
noreferrer" target="_blank"&gt;https://eprint.iacr.org/2013/835&lt;/a&gt;&lt;br&gt; &gt;&lt;br&gt;
&gt; 2. Preliminaries&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2.1 Motivation&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For motivation, see proposal 202.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2.2. Notation&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Symbol                       Meaning&lt;br&gt;
&gt;      ------                       -------&lt;br&gt;
&gt;      M                              Plaintext&lt;br&gt;
&gt;      C_I                           Ciphertext&lt;br&gt;
&gt;      CTR                           Counter Mode&lt;br&gt;
&gt;      N_I                           A de/encryption nonce (to be used in \
CTR-mode)&lt;br&gt; &gt;      T_I                           A tweak (to be used to \
de/encrypt the nonce)&lt;br&gt; &gt;      T'_I                          A running \
digest&lt;br&gt; &gt;      ^                              XOR&lt;br&gt;
&gt;      ||                             Concatenation&lt;br&gt;
&gt;                 (This is more readable than a single | but must be adapted&lt;br&gt;
&gt;                 before integrating the proposal into tor-spec.txt)&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2.3. Security parameters&lt;br&gt;
&gt;&lt;br&gt;
&gt;      HASH_LEN -- The length of the hash function's output, in bytes.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      PAYLOAD_LEN -- The longest allowable cell payload, in bytes. (509)&lt;br&gt;
&gt;&lt;br&gt;
&gt;      DIG_KEY_LEN -- The key length used to digest messages (e.g.,&lt;br&gt;
&gt;      using GHASH). Since GHASH is only defined for 128-bit keys, we&lt;br&gt;
&gt;      recommend DIG_KEY_LEN = 128.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      ENC_KEY_LEN -- The key length used for encryption (e.g., AES). We&lt;br&gt;
&gt;      recommend ENC_KEY_LEN = 128.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2.4. Key derivation (replaces Section 5.2.2)&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For newer KDF needs, Tor uses the key derivation function HKDF&lt;br&gt;
&gt;      from RFC5869, instantiated with SHA256. The generated key&lt;br&gt;
&gt;      material is:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                           K = K_1 | K_2 | K_3 | ...&lt;br&gt;
&gt;&lt;br&gt;
&gt;      where, if H(x,t) denotes HMAC_SHA256 with value x and key t,&lt;br&gt;
&gt;               and m_expand denotes an arbitrarily chosen value,&lt;br&gt;
&gt;               and INT8(i) is an octet with the value "i", then&lt;br&gt;
&gt;                     K_1        = H(m_expand | INT8(1) , KEY_SEED )&lt;br&gt;
&gt;               and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED ),&lt;br&gt;
&gt;      in RFC5869's vocabulary, this is HKDF-SHA256 with info ==&lt;br&gt;
&gt;      m_expand, salt == t_key, and IKM == secret_input.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When used in the ntor handshake a string of key material is&lt;br&gt;
&gt;      generated and is used in the following way:&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Length           Purpose                                      Notation&lt;br&gt;
&gt;      ------            -------                                    --------&lt;br&gt;
&gt;      HASH_LEN        forward digest IV                       DF         *&lt;br&gt;
&gt;      HASH_LEN        backward digest IV                     DB         *&lt;br&gt;
&gt;      ENC_KEY_LEN   encryption key                           Kf&lt;br&gt;
&gt;      ENC_KEY_LEN   decryption key                           Kb&lt;br&gt;
&gt;      DIG_KEY_LEN   forward digest key                     Khf&lt;br&gt;
&gt;      DIG_KEY_LEN   backward digest key                    Khb&lt;br&gt;
&gt;      ENC_KEY_LEN   forward tweak key                       Ktf&lt;br&gt;
&gt;      ENC_KEY_LEN   backward tweak key                     Ktb&lt;br&gt;
&gt;      DIGEST_LEN     nonce to use in the                                 *&lt;br&gt;
&gt;                             hidden service protocol&lt;br&gt;
&gt;&lt;br&gt;
&gt;           * I am not sure that we need these any longer.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Excess bytes from K are discarded.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 2.6. Ciphers&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For hashing(*) we use GHASH with a DIG_KEY_LEN-bit key. We write&lt;br&gt;
&gt;      this as Digest(K,M) where K is the key and M the message to be&lt;br&gt;
&gt;      hashed.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      We use AES with an ENC_KEY_LEN-bit key. For AES encryption&lt;br&gt;
&gt;      (resp., decryption) we write E(K,X) (resp., D(K,X)) where K is an&lt;br&gt;
&gt;      ENC_KEY_LEN-bit key and X the block to be encrypted (resp.,&lt;br&gt;
&gt;      decrypted).&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For a stream cipher, unless otherwise specified, we use&lt;br&gt;
&gt;      ENC_KEY_LEN-bit AES in counter mode, with a nonce that is&lt;br&gt;
&gt;      generated as explained below. We write this as Encrypt(K,N,X)&lt;br&gt;
&gt;      (resp., Decrypt(K,N,X)) where K is the key, N the nonce, and X&lt;br&gt;
&gt;      the message to be encrypted (resp., decrypted).&lt;br&gt;
&gt;&lt;br&gt;
&gt;      (*) The terms hash and digest are used interchangeably.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3. Routing relay cells&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.1. Forward Direction&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The forward direction is the direction that CREATE/CREATE2 cells&lt;br&gt;
&gt;      are sent.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.1.1. Routing from the Origin&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Let n denote the integer representing the destination node. For&lt;br&gt;
&gt;      I = 1...n+1, T'_{I} is initialized to the 128-bit string consisting&lt;br&gt;
&gt;      entirely of '0's. When an OP sends a relay cell, they prepare \
the&lt;br&gt; &gt;      cell as follows:&lt;br&gt;
&gt;&lt;br&gt;
&gt;              The OP prepares the authentication part of the message:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          C_{n+1} = M&lt;br&gt;
&gt;                          T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})&lt;br&gt;
&gt;                          N_{n+1} = T_{n+1} ^ E(Ktf_n,T_{n+1} ^ 0)&lt;br&gt;
&gt;                          T'_{n+1} = T_{n+1}&lt;br&gt;
&gt;&lt;br&gt;
&gt;              Then, the OP prepares the multi-layered encryption:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          For I=n...1:&lt;br&gt;
&gt;                                      C_I = Encrypt(Kf_I,N_{I+1},C_{I+1})&lt;br&gt;
&gt;                                      T_I = Digest(Khf_I,T'_I||C_I)&lt;br&gt;
&gt;                                      N_I = T_I ^ E(Ktf_I,T_I ^ N_{I+1})&lt;br&gt;
&gt;                                      T'_I = T_I&lt;br&gt;
&gt;&lt;br&gt;
&gt;                 The OP sends C_1 and N_1 to node 1.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.1.2. Relaying Forward at Onion Routers&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When a forward relay cell is received by OR I, it decrypts the&lt;br&gt;
&gt;      payload with the stream cipher, as follows:&lt;br&gt;
&gt;&lt;br&gt;
&gt;              'Forward' relay cell:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          T_I = Digest(Khf_I,T'_I||C_I)&lt;br&gt;
&gt;                          N_{I+1} = T_I ^ D(Ktf_I,T_I ^ N_I)&lt;br&gt;
&gt;                          C_{I+1} = Decrypt(Kf_I,N_{I+1},C_I)&lt;br&gt;
&gt;                          T'_I = T_I&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The OR then decides whether it recognizes the relay cell as&lt;br&gt;
&gt;      described below. If the OR recognizes the cell, it processes the&lt;br&gt;
&gt;      contents of the relay cell. Otherwise, it passes C_{I+1}||N_{I+1}&lt;br&gt;
&gt;      along the circuit if the circuit continues.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      For more information, see section 4 below.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.2. Backward Direction&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The backward direction is the opposite direction from&lt;br&gt;
&gt;      CREATE/CREATE2 cells.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.2.1. Relaying Backward at Onion Routers&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When a backward relay cell is received by OR I, it encrypts the&lt;br&gt;
&gt;      payload with the stream cipher, as follows:&lt;br&gt;
&gt;&lt;br&gt;
&gt;              'Backward' relay cell:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          T_I = Digest(Khb_I,T'_I||C_{I+1})&lt;br&gt;
&gt;                          N_I = T_I ^ E(Ktb_I,T_I ^ N_{I+1})&lt;br&gt;
&gt;                          C_I = Encrypt(Kb_I,N_I,C_{I+1})&lt;br&gt;
&gt;                          T'_I = T_I&lt;br&gt;
&gt;&lt;br&gt;
&gt;      with C_{n+1} = M and N_{n+1}=0. Once encrypted, the node passes&lt;br&gt;
&gt;      C_I and N_I along the circuit towards the OP.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 3.2.2. Routing to the Origin&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When a relay cell arrives at an OP, the OP decrypts the payload&lt;br&gt;
&gt;      with the stream cipher as follows:&lt;br&gt;
&gt;&lt;br&gt;
&gt;              OP receives relay cell from node 1:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          For I=1...n, where n is the end node on the \
circuit:&lt;br&gt; &gt;                                      C_{I+1} = \
Decrypt(Kb_I,N_I,C_I)&lt;br&gt; &gt;                                      T_I = \
Digest(Khb_I,T'_I||C_{I+1})&lt;br&gt; &gt;                                      N_{I+1} \
= T_I ^ D(Ktb_I,T_I ^ N_I)&lt;br&gt; &gt;                                      T'_I = \
T_I&lt;br&gt; &gt;&lt;br&gt;
&gt;                          If the payload is recognized (see Section 4.1),&lt;br&gt;
&gt;                          then:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                                    The sending node is I. Stop, process the&lt;br&gt;
&gt;                                    payload and authenticate.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 4. Application connections and stream management&lt;br&gt;
&gt;&lt;br&gt;
&gt; 4.1. Relay cells&lt;br&gt;
&gt;&lt;br&gt;
&gt;     Within a circuit, the OP and the end node use the contents of&lt;br&gt;
&gt;     RELAY packets to tunnel end-to-end commands and TCP connections&lt;br&gt;
&gt;     ("Streams") across circuits. End-to-end commands can be \
initiated&lt;br&gt; &gt;     by either edge; streams are initiated by the OP.&lt;br&gt;
&gt;&lt;br&gt;
&gt;              The payload of each unencrypted RELAY cell consists of:&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          Relay command                 [1 byte]&lt;br&gt;
&gt;                          'Recognized'                  [2 bytes]&lt;br&gt;
&gt;                          StreamID                        [2 bytes]&lt;br&gt;
&gt;                          Length                           [2 bytes]&lt;br&gt;
&gt;                          Data                              [PAYLOAD_LEN-23 \
bytes]&lt;br&gt; &gt;&lt;br&gt;
&gt;      The 'recognized' field is used as a simple indication that the&lt;br&gt;
&gt;      cell is still encrypted. It is an optimization to avoid&lt;br&gt;
&gt;      calculating expensive digests for every cell. When sending cells,&lt;br&gt;
&gt;      the unencrypted 'recognized' MUST be set to zero.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When receiving and decrypting cells the 'recognized' will \
always&lt;br&gt; &gt;      be zero if we're the endpoint that the cell is destined for. \
For&lt;br&gt; &gt;      cells that we should relay, the 'recognized' field will \
usually&lt;br&gt; &gt;      be nonzero, but will accidentally be zero with P=2^-16.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      If the cell is recognized, the node moves to verifying the&lt;br&gt;
&gt;      authenticity of the message as follows(*):&lt;br&gt;
&gt;&lt;br&gt;
&gt;                 forward direction (executed by the end node):&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          T_{n+1} = Digest(Khf_n,T'_{n+1}||C_{n+1})&lt;br&gt;
&gt;                          Tag = T_{n+1} ^ D(Ktf_n,T_{n+1} ^ N_{n+1})&lt;br&gt;
&gt;                          T'_{n+1} = T_{n+1}&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          The message is authenticated (i.e., M = C_{n+1}) if&lt;br&gt;
&gt;                          and only if Tag = 0&lt;br&gt;
&gt;&lt;br&gt;
&gt;                 backward direction (executed by the OP):&lt;br&gt;
&gt;&lt;br&gt;
&gt;                          The message is authenticated (i.e., C_{n+1} = M) if&lt;br&gt;
&gt;                          and only if N_{n+1} = 0&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The old Digest field is removed since sufficient information for&lt;br&gt;
&gt;      authentication is now included in the nonce part of the payload.&lt;br&gt;
&gt;&lt;br&gt;
&gt;            (*) we should consider dropping the 'recognized' field&lt;br&gt;
&gt;            altogether and always try to authenticate. Note that this is&lt;br&gt;
&gt;            an optimization question and the crypto works just as well&lt;br&gt;
&gt;            either way.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The 'Length' field of a relay cell contains the number of bytes&lt;br&gt;
&gt;      in the relay payload which contain real payload data. The&lt;br&gt;
&gt;      remainder of the payload is padding bytes.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 4.2. Appending the encrypted nonce and dealing with version-homogenic&lt;br&gt;
&gt;         and version-heterogenic circuits&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When a cell is prepared to be routed from the origin (see Section&lt;br&gt;
&gt;      3.1.1) the encrypted nonce N is appended to the encrypted cell&lt;br&gt;
&gt;      (occupying the last 16 bytes of the cell). If the cell is&lt;br&gt;
&gt;      prepared to be sent to a node supporting the new protocol, S is&lt;br&gt;
&gt;      combined with other sources to generate the layer's&lt;br&gt;
&gt;      nonce. Otherwise, if the node only supports the old protocol, n&lt;br&gt;
&gt;      is still appended to the encrypted cell (so that following nodes&lt;br&gt;
&gt;      can still recover their nonce), but a synchronized nonce (as per&lt;br&gt;
&gt;      the old protocol) is used in CTR-mode.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      When a cell is sent along the circuit in the 'backward'&lt;br&gt;
&gt;      direction, nodes supporting the new protocol always assume that&lt;br&gt;
&gt;      the last 16 bytes of the input are the nonce used by the previous&lt;br&gt;
&gt;      node, which they process as per Section 3.2.1. If the previous&lt;br&gt;
&gt;      node also supports the new protocol, these cells are indeed the&lt;br&gt;
&gt;      nonce. If the previous node only supports the old protocol, these&lt;br&gt;
&gt;      bytes are either encrypted padding bytes or encrypted data.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5. Security&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5.1. Resistance to crypto-tagging attacks&lt;br&gt;
&gt;&lt;br&gt;
&gt;      A crypto-tagging attack involves a circuit with two colluding&lt;br&gt;
&gt;      nodes and at least one honest node between them. The attack works&lt;br&gt;
&gt;      when one node makes a change to the cell (tagging) in a way that&lt;br&gt;
&gt;      can be undone by the other colluding party. In between, the&lt;br&gt;
&gt;      tagged cell is processed by honest nodes which do not detect the&lt;br&gt;
&gt;      change. The attack is possible due to the malleability property&lt;br&gt;
&gt;      of CTR-mode: a change to a ciphertext bit effects only the&lt;br&gt;
&gt;      respective plaintext bit in a predicatble way. This proposal&lt;br&gt;
&gt;      frustrates the crypto-tagging attack by linking the nonce to the&lt;br&gt;
&gt;      encrypted message such that any change to the ciphertext results&lt;br&gt;
&gt;      in a random nonce and hence, random plaintext.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Let us consider the following 3-hop scenario: the entry and end&lt;br&gt;
&gt;      nodes are malicious and colluding and the middle node is honest.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5.1.1. forward direction&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Suppose that node I tags the ciphertext part of the message&lt;br&gt;
&gt;      (C'_{I+1} != C_{I+1}) then forwards it to the next node (I+1). As&lt;br&gt;
&gt;      per Section 3.1.2. Node I+1 digests C'_{I+1} to generate T_{I+1}&lt;br&gt;
&gt;      and N_{I+2}. Since C'_{I+2} is different than it should be, so&lt;br&gt;
&gt;      are the resulting T_{I+1} and N_{I+2}. Hence, decrypting C'_{I+2}&lt;br&gt;
&gt;      using these values results in a random string for C_{I+2}. Since&lt;br&gt;
&gt;      C_{I+2} is now just a random string, it is decrypted into a&lt;br&gt;
&gt;      random string and cannot be 'recognized' nor&lt;br&gt;
&gt;      authenticated. Furthermore, since C'_{I+1} is different than what&lt;br&gt;
&gt;      it should be, T'_{I+1} (i.e., the running digest of the middle&lt;br&gt;
&gt;      node) is now out of sync with that of the OP, which means that&lt;br&gt;
&gt;      all future cells sent through this node will decrypt into garbage&lt;br&gt;
&gt;      (random strings).&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Likewise, suppose that instead of tagging the ciphertext, Node I&lt;br&gt;
&gt;      node tags the encrypted nonce N'_{I+1} != N_{I+1}. Now, when Node&lt;br&gt;
&gt;      I+1 digests the payload the tweak T_{I+1} is find, but using it&lt;br&gt;
&gt;      to decrypt N'_{I+1} again results in a random nonce for&lt;br&gt;
&gt;      N_{I+2}. This random nonce is used to decrypt C_{I+1} into a&lt;br&gt;
&gt;      random C'_{I+2} which is not recognized by the end node. Since&lt;br&gt;
&gt;      C_{I+2} is now a random string, the running digest of the end&lt;br&gt;
&gt;      node is now out of sync, which prevents the end node from&lt;br&gt;
&gt;      decrypting further cells.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5.1.2. Backward direction&lt;br&gt;
&gt;&lt;br&gt;
&gt;      In the backward direction the tagging is done by Node I+2&lt;br&gt;
&gt;      untagging by the Node I. Suppose first that Node I+2 tags the&lt;br&gt;
&gt;      ciphertext C_{I+2} and sends it to Node I+1. As per Section&lt;br&gt;
&gt;      3.2.1, Node I+1 first digests C_{I+2} and uses the resulting&lt;br&gt;
&gt;      T_{I+1} to generate a nonce N_{I+1}. From this it is clear that&lt;br&gt;
&gt;      any change introduced by Node I+2 influences the entire payload&lt;br&gt;
&gt;      and cannot be removed by Node I.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Unlike in Section 5.1.1., the cell is blindly delivered by Node I&lt;br&gt;
&gt;      to the OP which decrypts it. However, since the payload leaving&lt;br&gt;
&gt;      the end node was modified, the message cannot be authenticated by&lt;br&gt;
&gt;      the OP which can be trusted to tear down the circuit.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Suppose now that tagging is done by Node I+2 to the nonce part of&lt;br&gt;
&gt;      the payload, i.e., N_{I+2}. Since this value is encrypted by Node&lt;br&gt;
&gt;      I+1 to generate its own nonce N_{I+1}, again, a random nonce is&lt;br&gt;
&gt;      used which affects the entire keystream of CTR-mode. The cell&lt;br&gt;
&gt;      again cannot be authenticated by the OP and the circuit is torn&lt;br&gt;
&gt;      down.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      We note that the end node can modify the plain message before&lt;br&gt;
&gt;      ever encrypting it and this cannot be discovered by the Tor&lt;br&gt;
&gt;      protocol. This vulnerability is outside the scope of this&lt;br&gt;
&gt;      proposal and users should always use TLS to make sure that their&lt;br&gt;
&gt;      application data is encrypted before it enters the Tor network.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5.2. End-to-end authentication&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Similar to the old protocol, this proposal only offers end-to-end&lt;br&gt;
&gt;      authentication rather than per-hop authentication. However,&lt;br&gt;
&gt;      unlike the old protocol, the ADL-construction is non-malleable&lt;br&gt;
&gt;      and hence, once a non-authentic message was processed by an&lt;br&gt;
&gt;      honest node supporting the new protocol, it is effectively&lt;br&gt;
&gt;      destroyed for all nodes further down the circuit. This is because&lt;br&gt;
&gt;      the nonce used to de/encrypt all messages is linked to (a digest&lt;br&gt;
&gt;      of) the payload data.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      As a result, while honest nodes cannot detect non-authentic&lt;br&gt;
&gt;      messages, such nodes still destroy the message thus invalidating&lt;br&gt;
&gt;      its authentication tag when it is checked by edge nodes. As a&lt;br&gt;
&gt;      result, security against crypto-tagging attacks is ensured as&lt;br&gt;
&gt;      long as an honest node supporting the new protocol processes the&lt;br&gt;
&gt;      message between two dishonest ones.&lt;br&gt;
&gt;&lt;br&gt;
&gt; 5.3 The Running Digest&lt;br&gt;
&gt;&lt;br&gt;
&gt;      Unlike the old protocol, the running digest is now computed as&lt;br&gt;
&gt;      the output of a GHASH call instead of a hash function call&lt;br&gt;
&gt;      (SHA256). Since GHASH does not provide the same type of security&lt;br&gt;
&gt;      guarantees as SHA256, it is worth discussing why security is not&lt;br&gt;
&gt;      lost from computing the running digest differently.&lt;br&gt;
&gt;&lt;br&gt;
&gt;      The running digets is used to ensure that if the same payload is&lt;br&gt;
&gt;      encrypted twice, then the resulting ciphertext does not remain&lt;br&gt;
&gt;      the same. Therefore, all that is needed is that the digest should&lt;br&gt;
&gt;      repeat with low probability. GHASH is a universal hash function,&lt;br&gt;
&gt;      hence it gives such a guarantee assuming its key is chosen&lt;br&gt;
&gt;      uniformly at random.&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;br&gt;
&lt;br&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190318160829</emailId><senderName>Kevin Gallagher</senderName><senderEmail>kcg295@nyu.edu</senderEmail><timestampReceived>2019-03-18 16:08:29-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/alternative)]


On 3/17/19 8:18 PM, Ryan Duff wrote:
&gt; Hi again,
&gt;
&gt; On Sun, Mar 17, 2019 at 7:40 PM teor &lt;teor@riseup.net 
&gt; &lt;mailto:teor@riseup.net&gt;&gt; wrote:
&gt;
&gt;
&gt;     Most sites block by IP (or IP range), so a direct connection using the
&gt;     exit node's IP should give you very similar results to a Tor circuit
&gt;     using the exit node's IP.
&gt;
&gt;
&gt; Thanks teor! The point still stand though even though my solution to 
&gt; it is flawed. The thing being measured will be friendliness towards 
&gt; the Tor Browser instead of Tor overall. Basically, the measurement 
&gt; will be "friendly to Tor but not the Tor Browser". If that's the 
&gt; intent, then there is no real issue. I don't know how many sites will 
&gt; render for a Tor exit node but also only have issues with the Tor 
&gt; Browser itself but I'm definitely interested in seeing that data.


Yes, I should be clear about this. I am interested in the issues related 
to the Tor Browser, since the network level issues are already very well 
studied. For this project, only the Tor Browser is being considered.

I suppose, then, that I should call it the "Tor Browser Friendliness 
Scanner," but I didn't give that much thought to the name. Sorry about that!

- Kevin

&gt;
&gt; -Ryan
&gt;
-- 
Kevin Gallagher
Ph.D. Candidate
Center For Cybersecurity
NYU Tandon School of Engineering
Key Fingerprint: D02B 25CB 0F7D E276 06C3  BF08 53E4 C50F 8247 4861


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;div class="moz-cite-prefix"&gt;On 3/17/19 8:18 PM, Ryan Duff wrote:&lt;br&gt;
    &lt;/div&gt;
    &lt;blockquote type="cite"
cite="mid:CANjHfr4GZOEvs3NzMZ5C8myMq0MMDHdEY6iFbee9Ma9eCLSHKA@mail.gmail.com"&gt;
      &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div&gt;Hi again,&lt;/div&gt;
        &lt;br&gt;
        &lt;div class="gmail_quote"&gt;
          &lt;div dir="ltr" class="gmail_attr"&gt;On Sun, Mar 17, 2019 at 7:40
            PM teor &lt;&lt;a href="mailto:teor@riseup.net"
              moz-do-not-send="true"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br&gt;
          &lt;/div&gt;
          &lt;blockquote class="gmail_quote" style="margin:0px 0px 0px
            0.8ex;border-left:1px solid
            rgb(204,204,204);padding-left:1ex"&gt;&lt;br&gt;
            Most sites block by IP (or IP range), so a direct connection
            using the&lt;br&gt;
            exit node's IP should give you very similar results to a Tor
            circuit&lt;br&gt;
            using the exit node's IP.&lt;br&gt;
          &lt;/blockquote&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;Thanks teor! The point still stand though even though my
            solution to it is flawed. The thing being measured will be
            friendliness towards the Tor Browser instead of Tor overall.
            Basically, the measurement will be "friendly to Tor but not
            the Tor Browser". If that's the intent, then there is no
            real issue. I don't know how many sites will render for a
            Tor exit node but also only have issues with the Tor Browser
            itself but I'm definitely interested in seeing that data.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;Yes, I should be clear about this. I am interested in the issues
      related to the Tor Browser, since the network level issues are
      already very well studied. For this project, only the Tor Browser
      is being considered.&lt;/p&gt;
    &lt;p&gt;I suppose, then, that I should call it the "Tor Browser
      Friendliness Scanner," but I didn't give that much thought to the
      name. Sorry about that!&lt;/p&gt;
    &lt;p&gt;- Kevin&lt;br&gt;
    &lt;/p&gt;
    &lt;blockquote type="cite"
cite="mid:CANjHfr4GZOEvs3NzMZ5C8myMq0MMDHdEY6iFbee9Ma9eCLSHKA@mail.gmail.com"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div class="gmail_quote"&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;-Ryan&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
    &lt;/blockquote&gt;
    &lt;pre class="moz-signature" cols="72"&gt;-- 
Kevin Gallagher
Ph.D. Candidate
Center For Cybersecurity
NYU Tandon School of Engineering
Key Fingerprint: D02B 25CB 0F7D E276 06C3  BF08 53E4 C50F 8247 4861 &lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190320001412</emailId><senderName>Jodi Spacek</senderName><senderEmail>jodi.spacek@gmail.com</senderEmail><timestampReceived>2019-03-20 00:14:12-0400</timestampReceived><subject>[tor-dev] Testing Tor bridge assignments</subject><body>

[Attachment #2 (multipart/alternative)]


Hi!

I'm seeking advice on simulating Tor's consistent hashing, bridge ring
distributor. I'm finishing up my Master's thesis on proxy distribution :) I
run BridgeDB through my Python simulator to analyze the https distributor's
bridge assignments over multiple bridge pool sizes and trials. So far, it
follows a uniform random distribution (as expected).

I'm using https distributor's prepopulateRings() example as a guideline on
how the rings should be populated. Besides the default ring settings, are
there any other test scenarios that I should cover? For instance, is there
a possibility that the behaviour might change if there are quality of
service limitations? Aside from the reserved set, are there any cases where
it may not assign bridges uniform randomly that I should consider?

I attempted to use the descriptors from leekspin, but ran into some hurdles
integrating it with my simulator. My simulator doesn't need to persist or
store state, since I only need the assignment information of proxies to
clients until all proxies are enumerated. I hope the pared down version
using the test data from generateFakeBridges() in test/util.py is adequate.

Any advice is greatly appreciated!

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi!&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;I'm seeking advice on simulating Tor's consistent hashing, bridge \
ring distributor. I'm finishing up my Master's thesis on proxy distribution \
:) I run BridgeDB through my Python simulator to analyze the https distributor's \
bridge assignments over multiple bridge pool sizes and trials. So far, it follows a \
uniform random distribution (as expected).  &lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;I'm using https distributor's prepopulateRings() example as a \
guideline on how the rings should be populated. Besides the default ring settings, \
are there any other test scenarios that I should cover? For instance, is there a \
possibility that the behaviour might change if there are quality of service \
limitations? Aside from the reserved set, are there any cases where it may not assign \
bridges uniform randomly that I should consider?&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I attempted to use the descriptors from leekspin, but \
ran into some hurdles integrating it with my simulator. My simulator doesn't need \
to persist or store state, since I only need the assignment information of proxies to \
clients until all proxies are enumerated. I hope the pared down version using the \
test data from generateFakeBridges() in test/util.py  is \
adequate.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Any advice is greatly \
appreciated!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190322174511</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-03-22 17:45:11-0400</timestampReceived><subject>[tor-dev] Orbot and Tor on Android Q</subject><body>

Orbot 16.0.6-BETA-1-tor-0.3.5.8
&lt;https://github.com/n8fr8/orbot/releases/tag/16.0.6-BETA-1-tor-0.3.5.8&gt;
https://github.com/n8fr8/orbot/releases/tag/16.0.6-BETA-1-tor-0.3.5.8

is out (binaries on Github for now) for testing, specifically on Android Q.

It is built on a new release of:

tor-android-binary-tor-0.3.5.8-rc
&lt;https://github.com/n8fr8/tor-android/releases/tag/tor-android-binary-tor-0.3.5.8-rc&gt;
https://github.com/n8fr8/tor-android/releases/tag/tor-android-binary-tor-0.3.5.8-rc

This now uses the method of bundling the tor executable as a tor.so
library, allowing the Android runtime to unpack them into the /data/libs
read-only space within the app's private directory. We then can just
execute it there, without needing to unpack it, copy it, etc.

The word is that this will work on Android Q still. I have tested on an
emulator, but not a real device yet. I don't have a Pixel of any kind,
at the moment, so please let me know if you do and can test.

Otherwise, we are working to move tor and other important binaries, like
obfs4proxy, into actual in-process libraries. We've recently made great
progress with this on our iOS work with Onion Browser, and so it should
now be possible on Android.

New commits below....


***

ATTENTION ANDROID Q / PIXEL TEST USERS: We've made changes just for you!
WARNING: Meek/Obfs4 bridges WILL NOT work on Android Q yet, just plain Tor

fb14c76
&lt;https://github.com/n8fr8/orbot/commit/fb14c76c3a75977af9e86887b54dad5d15ae254e&gt;
fixed strings with two many \ escapes
4557577
&lt;https://github.com/n8fr8/orbot/commit/455757726d519ac56cd53eaed29c3abef25707d4&gt;
updating to tor-0.3.5.8-rc to add support for Android Q
22d5ffd
&lt;https://github.com/n8fr8/orbot/commit/22d5ffdf8bc3d51bb014e319d9f1e6b2ecb3e840&gt;
update gradle tools
76796fe
&lt;https://github.com/n8fr8/orbot/commit/76796fea83ef7efe3e33f6f5862fd71171a70cdd&gt;
Merge pull request #200 &lt;https://github.com/n8fr8/orbot/pull/200&gt; from
eighthave/fastlane-supply
6ba0cec
&lt;https://github.com/n8fr8/orbot/commit/6ba0ceccbde67310c22fc9fa4e0dc88d932740f5&gt;
add .gitlab-ci.yml setup with errorprone
3face00
&lt;https://github.com/n8fr8/orbot/commit/3face00a66874afb793470922e381a9e463b116c&gt;
build gradle to 4.4.1, and make gradlew verify the download
69bd7fe
&lt;https://github.com/n8fr8/orbot/commit/69bd7fe9e6fd0fcde92ea53dd6236e50f7b37017&gt;
move app store graphics into fdroid/fastlane file layout
f93c11e
&lt;https://github.com/n8fr8/orbot/commit/f93c11e74599cc24c7467d58ba0fc81c38c3c496&gt;
Merge pull request #190 &lt;https://github.com/n8fr8/orbot/pull/190&gt; from
SkewedZeppelin/master
8ab13f6
&lt;https://github.com/n8fr8/orbot/commit/8ab13f63a6f529d97816568170e02a1bced3c186&gt;
Fixup bad indentation from 6e4b700
&lt;https://github.com/n8fr8/orbot/commit/6e4b7008035b2bf1a9035b730aad178bfd424f85&gt;
12b91c4
&lt;https://github.com/n8fr8/orbot/commit/12b91c44f3af675dd0db5a3bacbf232c0f8d61f4&gt;
Expose PreferIPv6 and NoIPv4Traffic options
8ad7668
&lt;https://github.com/n8fr8/orbot/commit/8ad7668013a7291b98cf8689cd99961db69f8ed3&gt;
Move Google repo above jcenter
d4befad
&lt;https://github.com/n8fr8/orbot/commit/d4befad117f3485f0aa67b2ce44d3f1b13de2720&gt;
cleanup and binary loading fixes

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190323121543</emailId><senderName>scootergrisen</senderName><senderEmail>scootergrisen@gmail.com</senderEmail><timestampReceived>2019-03-23 12:15:43-0400</timestampReceived><subject>[tor-dev] How to see the translated strings from Release_tweets.md in use</subject><body>

How/Where do i se the translated strings from Transifex 
Release_tweets.md in use?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190330015128</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-03-30 01:51:28-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 98, Issue 18</subject><body>

[Attachment #2 (multipart/alternative)]


Hi, and thanks for replying!
I have built another image, for Non-Exit relays.

Essentially, the Dockerfile is the same to the Dockerfile for build an Exit
Relay, i have added the command for uncomment "ExitRelay 0" line in the
torrc file.

I have modified the Hidden Service image too, providing only the Hidden
Service without opening ports, reducing the attack surface.

Because the images are built separately, and Containers doesn't have
persistent data by default, i'm testing the launch of a "relay swarm",
which isn't the "Docker Swarm".
The concept of a "Relay swarm" is to have multiple running relay containers
on the same user machine, without any conflict.

The idea (i will testing it very soon) is possible, by pulling an image and
running it multiple times, creating intermetiate containers.

A function like the "relay swarm" can be very useful, i don't know if this
approach can be risky, so i'm preparing a script for launching only one
type of relay swarm (middle or exit relays).

If there is no security concerns, this function will be a very key function
for grow up the Network, because a user can run multiple relays at a time.

I'm presenting this project to the large community, so i can receive
feedback and take actions in case of issues.

Kind regards,

Alessandro Fiori

Il giorno ven 29 mar 2019 alle ore 13:00 &lt;
tor-dev-request@lists.torproject.org&gt; ha scritto:

&gt; Send tor-dev mailing list submissions to
&gt;         tor-dev@lists.torproject.org
&gt;
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt;         https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt;         tor-dev-request@lists.torproject.org
&gt;
&gt; You can reach the person managing the list at
&gt;         tor-dev-owner@lists.torproject.org
&gt;
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt;
&gt;
&gt; Today's Topics:
&gt;
&gt;    1. Re: Docker images for help people to run Tor
&gt;       (Chelsea Holland Komlo)
&gt;    2. Re: Docker images for help people to run Tor (Alessandro Fiori)
&gt;    3. Re: Docker images for help people to run Tor (teor)
&gt;
&gt;
&gt; ----------------------------------------------------------------------
&gt;
&gt; Message: 1
&gt; Date: Thu, 28 Mar 2019 05:46:57 -0700
&gt; From: Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Cc: Alessandro Fiori &lt;alefiori3@gmail.com&gt;
&gt; Subject: Re: [tor-dev] Docker images for help people to run Tor
&gt; Message-ID: &lt;554cdbb2a021c08e08faef91d3bcb9a2@chelseakomlo.com&gt;
&gt; Content-Type: text/plain; charset=US-ASCII
&gt;
&gt; Hi,
&gt;
&gt; Thanks for this information and putting this together! Making relays
&gt; easier to run is always a helpful thing to us.
&gt;
&gt; We have a wiki page to aggregate relay infrastructure projects such as
&gt; this. If you can add your projects to this page (and any required
&gt; instructions), that would be great.
&gt;
&gt;
&gt; https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure
&gt;
&gt; Thanks for the contribution!
&gt; Chelsea
&gt;
&gt; On 2019-03-27 21:18, Alessandro Fiori wrote:
&gt; &gt; Hi, I'm an Italian developer who want to help development and grow up
&gt; &gt; the Tor network.
&gt; &gt; I would like to share with you an idea to grow up the Tor Network.
&gt; &gt; Working with Docker, i have released two images, a Tor Exit Relay
&gt; &gt; image (named "tor-relay") and an image (named "torworld-template").
&gt; &gt; The idea is to use Docker and build images for facilitate users to run
&gt; &gt; a Tor Relay or an Hidden Service.
&gt; &gt; The two images are located on Docker Hub in this locations:
&gt; &gt;
&gt; &gt; Tor Exit Relay: https://hub.docker.com/r/alessandrofiori/tor-relay
&gt; &gt; Tor Machine Template:
&gt; &gt; https://hub.docker.com/r/alessandrofiori/torworld-template
&gt; &gt;
&gt; &gt; If you want to see how the images are built, please check the
&gt; &gt; following Dockerfile
&gt; &gt;
&gt; &gt; Tor Exit Relay:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay
&gt; &gt; Tor Machine Template:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World
&gt; &gt;
&gt; &gt; If you want to see how i automate the build and push process, please
&gt; &gt; check the following script:
&gt; &gt;
&gt; &gt; Process with system cleanup:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat
&gt; &gt; Process for rolling release:
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat
&gt; &gt;
&gt; &gt; Actually i'm working in a Windows environment, i will release ubuntu
&gt; &gt; scripts soon.
&gt; &gt;
&gt; &gt; I would like to share with everyone, so if this can be helpful, this
&gt; &gt; can be a starting point for build up images for help people to run
&gt; &gt; relays or hidden services.
&gt; &gt;
&gt; &gt; This kind of approach can be reduce costs for people who want to run a
&gt; &gt; relay or an hidden service, and can be an help for building a more
&gt; &gt; censorship-resistant platform, by using a Docker Swarm, and
&gt; &gt; replicating instances.
&gt; &gt;
&gt; &gt; Waiting for your reply as soon as possible, i'm very curious if this
&gt; &gt; project can be helpful for Tor Project!
&gt; &gt;
&gt; &gt; Kind regards (and thanks for your hard work)
&gt; &gt; Alessandro Fiori
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 2
&gt; Date: Thu, 28 Mar 2019 23:57:46 +0100
&gt; From: Alessandro Fiori &lt;alefiori3@gmail.com&gt;
&gt; To: Chelsea Holland Komlo &lt;me@chelseakomlo.com&gt;
&gt; Cc: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Docker images for help people to run Tor
&gt; Message-ID:
&gt;         &lt;CAP6e1PnzqMRXdGmnF1U=oZqA2s69gdY=
&gt; Wc+D4LSzPsygbYckNw@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hi, and thanks for reply!
&gt; I added a line in the dedicated page, and modified the README.md on GitHub
&gt; for more specific informations to the users.
&gt;
&gt; I've decided to release two scripts (I'm releasing for Ubuntu too), for run
&gt; an Exit Relay or Hidden Service then, with Docker image.
&gt;
&gt; If needed, let me know if there would be useful  releasing an image of a
&gt; Non-Exit-Relay.
&gt;
&gt; I will add more informations in the following days, for more explanations
&gt; and specific infos about building process.
&gt; I have decided to release only scripts or text file (for build process and
&gt; pull process), and no binaries, to keep processes transparent and
&gt; controllable.
&gt;
&gt; The next step for me is writing to forums and IRC, so people can review the
&gt; configurations.
&gt; I would like to meet the best practices to provide a robust and secure
&gt; service under all aspects.
&gt;
&gt; Another further step will be to contact Docker and try to achieve the
&gt; "Verified Publisher" or "Official Image" status, to keep the User Trust up.
&gt;
&gt; Official Images have automated security scans, so it can be a benefit to
&gt; community.
&gt;
&gt; I hope this can be useful, let me know!
&gt;
&gt; Kind regards (and thanks for your hard work... really!)
&gt;
&gt; Il giorno gio 28 mar 2019 alle ore 13:46 Chelsea Holland Komlo &lt;
&gt; me@chelseakomlo.com&gt; ha scritto:
&gt;
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt; Thanks for this information and putting this together! Making relays
&gt; &gt; easier to run is always a helpful thing to us.
&gt; &gt;
&gt; &gt; We have a wiki page to aggregate relay infrastructure projects such as
&gt; &gt; this. If you can add your projects to this page (and any required
&gt; &gt; instructions), that would be great.
&gt; &gt;
&gt; &gt;
&gt; &gt;
&gt; https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure
&gt; &gt;
&gt; &gt; Thanks for the contribution!
&gt; &gt; Chelsea
&gt; &gt;
&gt; &gt; On 2019-03-27 21:18, Alessandro Fiori wrote:
&gt; &gt; &gt; Hi, I'm an Italian developer who want to help development and grow up
&gt; &gt; &gt; the Tor network.
&gt; &gt; &gt; I would like to share with you an idea to grow up the Tor Network.
&gt; &gt; &gt; Working with Docker, i have released two images, a Tor Exit Relay
&gt; &gt; &gt; image (named "tor-relay") and an image (named "torworld-template").
&gt; &gt; &gt; The idea is to use Docker and build images for facilitate users to run
&gt; &gt; &gt; a Tor Relay or an Hidden Service.
&gt; &gt; &gt; The two images are located on Docker Hub in this locations:
&gt; &gt; &gt;
&gt; &gt; &gt; Tor Exit Relay: https://hub.docker.com/r/alessandrofiori/tor-relay
&gt; &gt; &gt; Tor Machine Template:
&gt; &gt; &gt; https://hub.docker.com/r/alessandrofiori/torworld-template
&gt; &gt; &gt;
&gt; &gt; &gt; If you want to see how the images are built, please check the
&gt; &gt; &gt; following Dockerfile
&gt; &gt; &gt;
&gt; &gt; &gt; Tor Exit Relay:
&gt; &gt; &gt;
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay
&gt; &gt; &gt; Tor Machine Template:
&gt; &gt; &gt;
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World
&gt; &gt; &gt;
&gt; &gt; &gt; If you want to see how i automate the build and push process, please
&gt; &gt; &gt; check the following script:
&gt; &gt; &gt;
&gt; &gt; &gt; Process with system cleanup:
&gt; &gt; &gt;
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat
&gt; &gt; &gt; Process for rolling release:
&gt; &gt; &gt;
&gt; &gt;
&gt; https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat
&gt; &gt; &gt;
&gt; &gt; &gt; Actually i'm working in a Windows environment, i will release ubuntu
&gt; &gt; &gt; scripts soon.
&gt; &gt; &gt;
&gt; &gt; &gt; I would like to share with everyone, so if this can be helpful, this
&gt; &gt; &gt; can be a starting point for build up images for help people to run
&gt; &gt; &gt; relays or hidden services.
&gt; &gt; &gt;
&gt; &gt; &gt; This kind of approach can be reduce costs for people who want to run a
&gt; &gt; &gt; relay or an hidden service, and can be an help for building a more
&gt; &gt; &gt; censorship-resistant platform, by using a Docker Swarm, and
&gt; &gt; &gt; replicating instances.
&gt; &gt; &gt;
&gt; &gt; &gt; Waiting for your reply as soon as possible, i'm very curious if this
&gt; &gt; &gt; project can be helpful for Tor Project!
&gt; &gt; &gt;
&gt; &gt; &gt; Kind regards (and thanks for your hard work)
&gt; &gt; &gt; Alessandro Fiori
&gt; &gt; &gt; _______________________________________________
&gt; &gt; &gt; tor-dev mailing list
&gt; &gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt;
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL: &lt;
&gt; http://lists.torproject.org/pipermail/tor-dev/attachments/20190328/2ccd0749/attachment-0001.html
&gt; &gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Message: 3
&gt; Date: Fri, 29 Mar 2019 09:20:11 +1000
&gt; From: teor &lt;teor@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Docker images for help people to run Tor
&gt; Message-ID: &lt;C559EF65-9EE6-4B3C-98BC-D754CB6EAA23@riseup.net&gt;
&gt; Content-Type: text/plain;       charset=us-ascii
&gt;
&gt; Hi,
&gt;
&gt; &gt; On 29 Mar 2019, at 08:57, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; I've decided to release two scripts (I'm releasing for Ubuntu too), for
&gt; run an Exit Relay or Hidden Service then, with Docker image.
&gt; &gt;
&gt; &gt; If needed, let me know if there would be useful  releasing an image of a
&gt; Non-Exit-Relay.
&gt;
&gt; Yes, many relay operators will want to run a non-exit relay.
&gt;
&gt; T
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Subject: Digest Footer
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; End of tor-dev Digest, Vol 98, Issue 18
&gt; ***************************************
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi, and thanks for replying!&lt;div&gt;I have built another \
image, for Non-Exit relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Essentially, the Dockerfile is \
the same to the Dockerfile for build an Exit Relay, i have added the command for \
uncomment "ExitRelay 0" line in the torrc file.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
have modified the Hidden Service image too, providing only the Hidden Service without \
opening ports, reducing the attack surface.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because the \
images are built separately, and Containers doesn't have persistent data by \
default, i'm testing the launch of a "relay swarm", which isn't the \
"Docker Swarm".&lt;/div&gt;&lt;div&gt;The concept of a "Relay swarm" is to \
have multiple running relay containers on the same user machine, without any \
conflict.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The idea (i will testing it very soon) is \
possible, by pulling an image and running it multiple times, creating intermetiate \
containers.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A function like the "relay swarm" can \
be very useful, i don't know if this approach can be risky, so i'm preparing \
a script for launching only one type of relay swarm (middle or exit \
relays).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If there is no security concerns, this function \
will be a very key function for grow up the Network, because a user can run multiple \
relays at a time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'm presenting this project to the \
large community, so i can receive feedback and take actions in case of \
issues.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Kind regards,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alessandro \
Fiori  &lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;Il \
giorno ven 29 mar 2019 alle ore 13:00 &lt;&lt;a \
href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&gt; ha \
scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Send tor-dev mailing \
                list submissions to&lt;br&gt;
            &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
To subscribe or unsubscribe via the World Wide Web, visit&lt;br&gt;
            &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 or, via email, send a message with subject or body 'help' to&lt;br&gt;
            &lt;a href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
You can reach the person managing the list at&lt;br&gt;
            &lt;a href="mailto:tor-dev-owner@lists.torproject.org" \
target="_blank"&gt;tor-dev-owner@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
When replying, please edit your Subject line so it is more specific&lt;br&gt;
than "Re: Contents of tor-dev digest..."&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Today's Topics:&lt;br&gt;
&lt;br&gt;
     1. Re: Docker images for help people to run Tor&lt;br&gt;
         (Chelsea Holland Komlo)&lt;br&gt;
     2. Re: Docker images for help people to run Tor (Alessandro Fiori)&lt;br&gt;
     3. Re: Docker images for help people to run Tor (teor)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
Message: 1&lt;br&gt;
Date: Thu, 28 Mar 2019 05:46:57 -0700&lt;br&gt;
From: Chelsea Holland Komlo &lt;&lt;a href="mailto:me@chelseakomlo.com" \
                target="_blank"&gt;me@chelseakomlo.com&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Cc: Alessandro Fiori &lt;&lt;a href="mailto:alefiori3@gmail.com" \
                target="_blank"&gt;alefiori3@gmail.com&lt;/a&gt;&gt;&lt;br&gt;
Subject: Re: [tor-dev] Docker images for help people to run Tor&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:554cdbb2a021c08e08faef91d3bcb9a2@chelseakomlo.com" \
                target="_blank"&gt;554cdbb2a021c08e08faef91d3bcb9a2@chelseakomlo.com&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset=US-ASCII&lt;br&gt;
&lt;br&gt;
Hi,&lt;br&gt;
&lt;br&gt;
Thanks for this information and putting this together! Making relays&lt;br&gt;
easier to run is always a helpful thing to us.&lt;br&gt;
&lt;br&gt;
We have a wiki page to aggregate relay infrastructure projects such as&lt;br&gt;
this. If you can add your projects to this page (and any required&lt;br&gt;
instructions), that would be great. &lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
Thanks for the contribution!&lt;br&gt;
Chelsea&lt;br&gt;
&lt;br&gt;
On 2019-03-27 21:18, Alessandro Fiori wrote:&lt;br&gt;
&gt; Hi, I'm an Italian developer who want to help development and grow up&lt;br&gt;
&gt; the Tor network.&lt;br&gt;
&gt; I would like to share with you an idea to grow up the Tor Network.&lt;br&gt;
&gt; Working with Docker, i have released two images, a Tor Exit Relay&lt;br&gt;
&gt; image (named "tor-relay") and an image (named \
"torworld-template").&lt;br&gt; &gt; The idea is to use Docker and build images \
for facilitate users to run&lt;br&gt; &gt; a Tor Relay or an Hidden Service.&lt;br&gt;
&gt; The two images are located on Docker Hub in this locations:&lt;br&gt;
&gt; &lt;br&gt;
&gt; Tor Exit Relay: &lt;a href="https://hub.docker.com/r/alessandrofiori/tor-relay" \
rel="noreferrer" target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/tor-relay&lt;/a&gt;&lt;br&gt;
 &gt; Tor Machine Template:&lt;br&gt;
&gt; &lt;a href="https://hub.docker.com/r/alessandrofiori/torworld-template" \
rel="noreferrer" target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/torworld-template&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; If you want to see how the images are built, please check the&lt;br&gt;
&gt; following Dockerfile&lt;br&gt;
&gt; &lt;br&gt;
&gt; Tor Exit Relay:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay&lt;/a&gt;&lt;br&gt;
 &gt; Tor Machine Template:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; If you want to see how i automate the build and push process, please&lt;br&gt;
&gt; check the following script:&lt;br&gt;
&gt; &lt;br&gt;
&gt; Process with system cleanup:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat&lt;/a&gt;&lt;br&gt;
 &gt; Process for rolling release:&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat&lt;/a&gt;&lt;br&gt;
 &gt; &lt;br&gt;
&gt; Actually i'm working in a Windows environment, i will release ubuntu&lt;br&gt;
&gt; scripts soon.&lt;br&gt;
&gt; &lt;br&gt;
&gt; I would like to share with everyone, so if this can be helpful, this&lt;br&gt;
&gt; can be a starting point for build up images for help people to run&lt;br&gt;
&gt; relays or hidden services.&lt;br&gt;
&gt; &lt;br&gt;
&gt; This kind of approach can be reduce costs for people who want to run a&lt;br&gt;
&gt; relay or an hidden service, and can be an help for building a more&lt;br&gt;
&gt; censorship-resistant platform, by using a Docker Swarm, and&lt;br&gt;
&gt; replicating instances.&lt;br&gt;
&gt; &lt;br&gt;
&gt; Waiting for your reply as soon as possible, i'm very curious if this&lt;br&gt;
&gt; project can be helpful for Tor Project!&lt;br&gt;
&gt; &lt;br&gt;
&gt; Kind regards (and thanks for your hard work)&lt;br&gt;
&gt; Alessandro Fiori&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 2&lt;br&gt;
Date: Thu, 28 Mar 2019 23:57:46 +0100&lt;br&gt;
From: Alessandro Fiori &lt;&lt;a href="mailto:alefiori3@gmail.com" \
                target="_blank"&gt;alefiori3@gmail.com&lt;/a&gt;&gt;&lt;br&gt;
To: Chelsea Holland Komlo &lt;&lt;a href="mailto:me@chelseakomlo.com" \
                target="_blank"&gt;me@chelseakomlo.com&lt;/a&gt;&gt;&lt;br&gt;
Cc: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Subject: Re: [tor-dev] Docker images for help people to run Tor&lt;br&gt;
Message-ID:&lt;br&gt;
            &lt;CAP6e1PnzqMRXdGmnF1U=oZqA2s69gdY=&lt;a \
href="mailto:Wc%2BD4LSzPsygbYckNw@mail.gmail.com" \
                target="_blank"&gt;Wc+D4LSzPsygbYckNw@mail.gmail.com&lt;/a&gt;&gt;&lt;br&gt;
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hi, and thanks for reply!&lt;br&gt;
I added a line in the dedicated page, and modified the README.md on GitHub&lt;br&gt;
for more specific informations to the users.&lt;br&gt;
&lt;br&gt;
I've decided to release two scripts (I'm releasing for Ubuntu too), for \
run&lt;br&gt; an Exit Relay or Hidden Service then, with Docker image.&lt;br&gt;
&lt;br&gt;
If needed, let me know if there would be useful   releasing an image of a&lt;br&gt;
Non-Exit-Relay.&lt;br&gt;
&lt;br&gt;
I will add more informations in the following days, for more explanations&lt;br&gt;
and specific infos about building process.&lt;br&gt;
I have decided to release only scripts or text file (for build process and&lt;br&gt;
pull process), and no binaries, to keep processes transparent and&lt;br&gt;
controllable.&lt;br&gt;
&lt;br&gt;
The next step for me is writing to forums and IRC, so people can review the&lt;br&gt;
configurations.&lt;br&gt;
I would like to meet the best practices to provide a robust and secure&lt;br&gt;
service under all aspects.&lt;br&gt;
&lt;br&gt;
Another further step will be to contact Docker and try to achieve the&lt;br&gt;
"Verified Publisher" or "Official Image" status, to keep the User \
Trust up.&lt;br&gt; &lt;br&gt;
Official Images have automated security scans, so it can be a benefit to&lt;br&gt;
community.&lt;br&gt;
&lt;br&gt;
I hope this can be useful, let me know!&lt;br&gt;
&lt;br&gt;
Kind regards (and thanks for your hard work... really!)&lt;br&gt;
&lt;br&gt;
Il giorno gio 28 mar 2019 alle ore 13:46 Chelsea Holland Komlo &lt;&lt;br&gt;
&lt;a href="mailto:me@chelseakomlo.com" target="_blank"&gt;me@chelseakomlo.com&lt;/a&gt;&gt; ha \
scritto:&lt;br&gt; &lt;br&gt;
&gt; Hi,&lt;br&gt;
&gt;&lt;br&gt;
&gt; Thanks for this information and putting this together! Making relays&lt;br&gt;
&gt; easier to run is always a helpful thing to us.&lt;br&gt;
&gt;&lt;br&gt;
&gt; We have a wiki page to aggregate relay infrastructure projects such as&lt;br&gt;
&gt; this. If you can add your projects to this page (and any required&lt;br&gt;
&gt; instructions), that would be great.&lt;br&gt;
&gt;&lt;br&gt;
&gt;&lt;br&gt;
&gt; &lt;a href="https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/community/relay_infrastructure&lt;/a&gt;&lt;br&gt;
 &gt;&lt;br&gt;
&gt; Thanks for the contribution!&lt;br&gt;
&gt; Chelsea&lt;br&gt;
&gt;&lt;br&gt;
&gt; On 2019-03-27 21:18, Alessandro Fiori wrote:&lt;br&gt;
&gt; &gt; Hi, I'm an Italian developer who want to help development and grow \
up&lt;br&gt; &gt; &gt; the Tor network.&lt;br&gt;
&gt; &gt; I would like to share with you an idea to grow up the Tor Network.&lt;br&gt;
&gt; &gt; Working with Docker, i have released two images, a Tor Exit Relay&lt;br&gt;
&gt; &gt; image (named "tor-relay") and an image (named \
"torworld-template").&lt;br&gt; &gt; &gt; The idea is to use Docker and build \
images for facilitate users to run&lt;br&gt; &gt; &gt; a Tor Relay or an Hidden \
Service.&lt;br&gt; &gt; &gt; The two images are located on Docker Hub in this \
locations:&lt;br&gt; &gt; &gt;&lt;br&gt;
&gt; &gt; Tor Exit Relay: &lt;a \
href="https://hub.docker.com/r/alessandrofiori/tor-relay" rel="noreferrer" \
target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/tor-relay&lt;/a&gt;&lt;br&gt; &gt; &gt; \
Tor Machine Template:&lt;br&gt; &gt; &gt; &lt;a \
href="https://hub.docker.com/r/alessandrofiori/torworld-template" rel="noreferrer" \
target="_blank"&gt;https://hub.docker.com/r/alessandrofiori/torworld-template&lt;/a&gt;&lt;br&gt; \
&gt; &gt;&lt;br&gt; &gt; &gt; If you want to see how the images are built, please check \
the&lt;br&gt; &gt; &gt; following Dockerfile&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Tor Exit Relay:&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-Relay&lt;/a&gt;&lt;br&gt;
 &gt; &gt; Tor Machine Template:&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/DockerFile-Tor-World&lt;/a&gt;&lt;br&gt;
 &gt; &gt;&lt;br&gt;
&gt; &gt; If you want to see how i automate the build and push process, please&lt;br&gt;
&gt; &gt; check the following script:&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Process with system cleanup:&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-script.bat&lt;/a&gt;&lt;br&gt;
 &gt; &gt; Process for rolling release:&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &lt;a href="https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat" \
rel="noreferrer" target="_blank"&gt;https://raw.githubusercontent.com/randomtable/ChimeraOS/master/build-rolling.bat&lt;/a&gt;&lt;br&gt;
 &gt; &gt;&lt;br&gt;
&gt; &gt; Actually i'm working in a Windows environment, i will release \
ubuntu&lt;br&gt; &gt; &gt; scripts soon.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; I would like to share with everyone, so if this can be helpful, this&lt;br&gt;
&gt; &gt; can be a starting point for build up images for help people to run&lt;br&gt;
&gt; &gt; relays or hidden services.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; This kind of approach can be reduce costs for people who want to run a&lt;br&gt;
&gt; &gt; relay or an hidden service, and can be an help for building a more&lt;br&gt;
&gt; &gt; censorship-resistant platform, by using a Docker Swarm, and&lt;br&gt;
&gt; &gt; replicating instances.&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Waiting for your reply as soon as possible, i'm very curious if \
this&lt;br&gt; &gt; &gt; project can be helpful for Tor Project!&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; Kind regards (and thanks for your hard work)&lt;br&gt;
&gt; &gt; Alessandro Fiori&lt;br&gt;
&gt; &gt; _______________________________________________&lt;br&gt;
&gt; &gt; tor-dev mailing list&lt;br&gt;
&gt; &gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
                &gt;&lt;br&gt;
-------------- next part --------------&lt;br&gt;
An HTML attachment was scrubbed...&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190328/2ccd0749/attachment-0001.html" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190328/2ccd0749/attachment-0001.html&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Message: 3&lt;br&gt;
Date: Fri, 29 Mar 2019 09:20:11 +1000&lt;br&gt;
From: teor &lt;&lt;a href="mailto:teor@riseup.net" \
                target="_blank"&gt;teor@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Subject: Re: [tor-dev] Docker images for help people to run Tor&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:C559EF65-9EE6-4B3C-98BC-D754CB6EAA23@riseup.net" \
                target="_blank"&gt;C559EF65-9EE6-4B3C-98BC-D754CB6EAA23@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain;           charset=us-ascii&lt;br&gt;
&lt;br&gt;
Hi,&lt;br&gt;
&lt;br&gt;
&gt; On 29 Mar 2019, at 08:57, Alessandro Fiori &lt;&lt;a \
href="mailto:alefiori3@gmail.com" target="_blank"&gt;alefiori3@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt; &lt;br&gt;
&gt; I've decided to release two scripts (I'm releasing for Ubuntu too), for \
run an Exit Relay or Hidden Service then, with Docker image.&lt;br&gt; &gt; &lt;br&gt;
&gt; If needed, let me know if there would be useful   releasing an image of a \
Non-Exit-Relay.&lt;br&gt; &lt;br&gt;
Yes, many relay operators will want to run a non-exit relay.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Subject: Digest Footer&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
End of tor-dev Digest, Vol 98, Issue 18&lt;br&gt;
***************************************&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190304162457</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-03-04 16:24:57-0400</timestampReceived><subject>[tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

Hi tor-dev@ mailing list,

I have Proposal 299, also known as "Preferring IPv4 or IPv6 based on IP 
Version Failure Count" which makes ClientAutoIPv6ORPort take into 
account IPv4 and IPv6 failures.

An older version of this document is available here: 
https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt

I have attached an updated copy of this proposal to this message. This 
includes the changes recommended by teor at 
https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html.

Would someone be able to update torspec to include the updated (and 
attached) proposal?

Also, if any of you have opinions on this proposal, please share them 
with me.

-Neel

===

https://www.neelc.org/
["299-ip-failure-count.txt" (text/plain)]

Filename: 299-ip-failure-count.txt
Title: Preferring IPv4 or IPv6 based on IP Version Failure Count
Author: Neel Chauhan
Created: 25-Jan-2019
Status: Open
Ticket: https://trac.torproject.org/projects/tor/ticket/27491

1. Introduction

   As IPv4 address space becomes scarce, ISPs and organizations will deploy
   IPv6 in their networks. Right now, Tor clients connect to guards using
   IPv4 connectivity by default.

   When networks first transition to IPv6, both IPv4 and IPv6 will be enabled
   on most networks in a so-called "dual-stack" configuration. This is to not
   break existing IPv4-only applications while enabling IPv6 connectivity.
   However, IPv6 connectivity may be unreliable and clients should be able
   to connect to the guard using the most reliable technology, whether IPv4
   or IPv6.

   In ticket #27490, we introduced the option ClientAutoIPv6ORPort which adds
   preliminary "happy eyeballs" support. If set, this lets a client randomly
   choose between IPv4 or IPv6. However, this random decision does not take
   into account unreliable connectivity or network failures of an IP family.
   A successful Tor implementation of the happy eyeballs algorithm requires
   that unreliable connectivity on IPv4 and IPv6 are taken into consideration.

   This proposal describes an algorithm to take into account network failures
   in the random decision used for choosing an IP family and the data fields
   used by the algorithm.

2. Failure Counter Design

   I propose that the failure counter uses the following fields:

      * IPv4 failure points

      * IPv6 failure points

   These entries will exist as internal counters for the current session, and
   a calculated value from the previous session in the statefile. 

   These values will be stored as 32-bit unsigned integers for the current
   session and in the statefile.

   When a new session is loaded, we will load the failure count from the
   statefile, and when a session is closed, the failure counts from the current
   session will be stored in the statefile. 

3. Failure Probability Calculation

   The failure count of one IP version will increase the probability of the
   other IP version. For instance, a failure of IPv4 will increase the IPv6
   probability, and vice versa.

   When the IP version is being chosen, I propose that these values will be
   included in the guard selection code:

      * IPv4 failure points

      * IPv6 failure points

      * Total failure points

   These values will be stored as 32-bit unsigned integers.

   A generic failure of an IP version will add one point to the failure point
   count values of the particular IP version which failed.

   A failure of an IP version from a "no route" error which happens when
   connections automatically fail will be counted as two failure points
   for the automatically failed version.

   The failure points for both IPv4 and IPv6 is sum of the values in the state
   file plus the current session's failure values. The total failure points is
   a sum of the IPv4 and IPv6 failure points, and is updated when the failure
   point count of an IP version is updated.

   The probability of a particular IP version is the failure points of the
   other version divided by the total number of failure points, multiplied
   by 4 and stored as an integer. We will call this value the summarized
   failure point value (SFPV). The reason for this summarization is to
   emulate a probability in 1/4 intervals by the random number generator.

   In the random number generator, we will choose a random number between 0
   and 4. If the random number is less than the IPv6 SFPV, we will choose
   IPv4. If it is equal or greater, we will choose IPv6.

   If the probability is 0/4 with a SFPV value of 0, it will be rounded to
   1/4 with a SFPV of 1. Also, if the probability is 4/4 with a SFPV of 4,
   it will be rounded to 3/4 with a SFPV of 3. The reason for this is to
   accomodate mobile clients which could change networks at any time (e.g.
   WiFi to cellular) which may be more or less reliable in terms of a
   particular IP family when compared to the previous network of the client.

4. Initial Failure Point Calculation

   When a client starts without failure points or if the FP value drops to 0,
   we need a SFPV value to start with. The Initial SFPV value will be counted
   based on whether the client is using a bridge or not and if the relays in
   the bridge configuration or consensus have IPv6.

   For clients connecting directly to Tor, we will:

      * During Bootstrap: use the number of IPv4 and IPv6 capable fallback
        directory mirrors during bootstrap.

      * After the initial consensus is received: use the number of IPv4 and
        IPv6 capable guards in the consensus.

   The reason why the consensus will be used to calculate the initial failure
   point value is because using the number of guards would bias the SFPV value
   with whatever's dominant on the network rather than what works on the
   client.

   For clients connecting through bridges, we will use the number of bridges
   configured and the IP versions supported.

   The initial value of the failure points in the scenarios described in this
   section would be:

      * IPv4 Faulure Points: Count the number of IPv6-capable relays

      * IPv6 Failure Points: Count the number of IPv4-capable relays

   If the consensus or bridge configuration changes during a session, we should
   not update the failure point counters to generate a SFPV. 

   If we are starting a new session, we should use the existing failure points
   to generate a SFPV unless the counts for IPv4 or IPv6 are zero.

5. Forgetting Old Sessions

   We should be able to forget old failures as clients could change networks.
   For instance, a mobile phone could switch between WiFi and cellular. Keeping
   an exact failure history would have privacy implications, so we should store
   an approximate history.

   One way we could forget old sessions is by halving all the failure point
   (FP) values before adding when:

      * One or more failure point values are a multiple of a random number
        between 1 and 5

      * One or more failure point values are greater than or equal to 100

   The reason for halving the values at regular intervals is to forget old
   sessions while keeping an approxmate history. We halve all FP values so
   that one IP version doesn't dominante on the failure count if the other
   is halved. This keeps an approximate scale of the failures on a client.

   The reason for halving at a multiple of a random number instead of a fixed
   interval is so we can halve regularly while not making it too predictable.
   This prevents a situation where we would be halving too often to keep an
   approximate failure history.

   If we halve, we add the FP value for the failed IP version after halving all
   FPs if done to account for the failure. If halving is not done, we will just
   add the FP.

   If the FP value for one IP version goes down to zero, we will re-calculate
   the SFPV for that version using the methods described in Section 4.

6. Separate Concurrent Connection Limits

   Right now, there is a limit for three concurrent connections from a client.
   at any given time. This limit includes both IPv4 and IPv6 connections.
   This is to prevent denial of service attacks. I propose that a seperate
   connection limit is used for IPv4 and IPv6. This means we can have three
   concurrent IPv4 connections and three concurrent IPv6 connections at the
   same time.

   Having seperate connection limits allows us to deal with networks dropping
   packets for a particular IP family while still preventing potential denial
   of service attacks.

7. Pathbias and Failure Probability

   If ClientAutoIPv6ORPort is in use, and pathbias is triggered, we should
   ignore "no route" warnings. The reason for this is because we would be
   adding two failure points for the failed as described in Section 3 of this
   proposal. Adding two failure points would make us more likely to prefer the
   competing IP family over the failed one versus than adding a single failure
   point on a normal failure.

8. Counting Successful Connections

   If a connection to a particular IP version is successful, we should use
   it. This ensures that clients have a reliable connection to Tor. Accounting
   for successful connections can be done by adding one failure point to the
   competing IP version of the successful connection. For instance, if we have
   a successful IPv6 connection, we add one IPv4 failure point.

   Why use failure points for successful connections? This reduces the need for
   separate counters for successes and allows for code reuse. Why add to the
   competing version's failure point? Similar to how we should prefer IPv4 if
   IPv6 fails, we should also prefer IPv4 if it is successful. We should also
   prefer IPv6 if it is successful.

   Even on adding successes, we will still halve the failure counters as
   described in Section 5.

9. Acknowledgements

   Thank you teor for aiding me with the implementation of Happy Eyeballs in
   Tor. This would not have been possible if it weren't for you.

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190306021233</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-06 02:12:33-0400</timestampReceived><subject>Re: [tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 5 Mar 2019, at 02:24, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; I have Proposal 299, also known as "Preferring IPv4 or IPv6 based on IP Version \
&gt; Failure Count" which makes ClientAutoIPv6ORPort take into account IPv4 and IPv6 \
&gt; failures. 
&gt; An older version of this document is available here: \
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt 
&gt; I have attached an updated copy of this proposal to this message. This includes the \
&gt; changes recommended by teor at \
&gt; https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html. 
&gt; Would someone be able to update torspec to include the updated (and attached) \
&gt; proposal?

Sure. We usually do torspec changes using GitHub pull requests.
Can you open a pull request on https://github.com/torproject/torspec ?
Then link to the pull request from #27491 or in an email reply.

&gt; Also, if any of you have opinions on this proposal, please share them with me.

Just so you know:

Tor Browser is going to test the #27940 version of ClientAutoIPv6ORPort
in their alpha series, as a potential fix for IPv6 failures:
https://trac.torproject.org/projects/tor/ticket/29641#comment:4

I expect that #27940 will trigger some bugs in the guard code, because all
connections for an entire IP version will fail. Then we can teach the guard
code to ignore those kinds of failures.

But that will mean that Tor Browser is depending on ClientAutoIPv6ORPort.
So we will also need to add a new option to activate the code for this proposal.
(Otherwise, we won't know if this proposal is better or worse!)

Here's one way we could do that:

Add a new option ClientAutoIPv6ORPortStrategy, which takes some flags.
When no flags are set (the default), we use the original ClientAutoIPv6ORPort.
Then we add a flag for this proposal:
  - TrackFailures

Then other tickets can use other flags:
  - CheckLocalAddresses for
     #27492 Try IPv4 or IPv6 more often based on public or private IP addresses
  - CheckConsensus for
    #27647 When randomly choosing IPv4 or IPv6, set IPv6 probability based on IPv6 \
weight

What do you think?
Would you like to make these changes to this proposal?

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;On 5 Mar 2019, at 02:24, Neel Chauhan &lt;&lt;a \
href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;Hi tor-dev@ mailing \
list,&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I have Proposal 299, also known as "Preferring \
IPv4 or IPv6 based on IP Version Failure Count" which makes ClientAutoIPv6ORPort take \
into account IPv4 and IPv6 failures.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;An older \
version of this document is available here: &lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.tx \
t"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;I \
have attached an updated copy of this proposal to this message. This includes the \
changes recommended by teor at &lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html"&gt;https: \
//lists.torproject.org/pipermail/tor-dev/2019-February/013673.html&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Would \
someone be able to update torspec to include the updated (and attached) \
proposal?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Sure. We usually do \
torspec changes using GitHub pull requests.&lt;/div&gt;&lt;div&gt;Can you open a pull request on \
&lt;a href="https://github.com/torproject/torspec"&gt;https://github.com/torproject/torspec&lt;/a&gt; \
?&lt;/div&gt;&lt;div&gt;Then link to the pull request from #27491 or in an email \
reply.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;Also, if any of you have \
opinions on this proposal, please share them with \
me.&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Just so you know:&lt;br&gt;&lt;br&gt;&lt;div&gt;Tor \
Browser is going to test the #27940 version of &lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;ClientAutoIPv6ORPort&lt;/span&gt;&lt;/div&gt;&lt;div&gt;in their alpha series, \
as a potential fix for IPv6 failures:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/29641#comment:4"&gt;https://trac.torproject.org/projects/tor/ticket/29641#comment:4&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
expect that #27940 will trigger some bugs in the guard code, because \
all&lt;/div&gt;&lt;div&gt;connections for an entire IP version will fail. Then we can teach the \
guard&lt;/div&gt;&lt;div&gt;code to ignore those kinds of failures.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But \
that will mean that Tor Browser is depending on &lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;ClientAutoIPv6ORPort.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;So we will also need \
to add a new option to activate the code for this proposal.&lt;/div&gt;&lt;div&gt;(Otherwise, we \
won't know if this proposal is better or worse!)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Here's one \
way we could do that:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Add a new option &lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;ClientAutoIPv6ORPortStrategy, which \
takes some flags.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;When no flags are set (the default), we use the \
original ClientAutoIPv6ORPort.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Then we add a flag for this proposal:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;  - \
TrackFailures&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Then other tickets can use other flags:&lt;/div&gt;&lt;div&gt;  - \
CheckLocalAddresses for&lt;/div&gt;&lt;div&gt;     #27492 Try IPv4 or IPv6 more \
often based on public or private IP addresses&lt;/div&gt;&lt;div&gt;  - CheckConsensus \
for&lt;/div&gt;&lt;div&gt;    #27647 When randomly choosing IPv4 or IPv6, set IPv6 \
probability based on IPv6 weight&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;What do you think?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Would you like to make these changes to this \
proposal?&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190306230730</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-03-06 23:07:30-0400</timestampReceived><subject>Re: [tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

Hi teor,

On 2019-03-05 21:12, teor wrote:
&gt; Sure. We usually do torspec changes using GitHub pull requests.
&gt; Can you open a pull request on https://github.com/torproject/torspec ?
&gt; Then link to the pull request from #27491 or in an email reply.

The GitHub PR is here: https://github.com/torproject/torspec/pull/61

&gt; Just so you know:
&gt; 
&gt; Tor Browser is going to test the #27940 version of
&gt; ClientAutoIPv6ORPort
&gt; in their alpha series, as a potential fix for IPv6 failures:
&gt; https://trac.torproject.org/projects/tor/ticket/29641#comment:4
&gt; 
&gt; I expect that #27940 will trigger some bugs in the guard code, because
&gt; all
&gt; connections for an entire IP version will fail. Then we can teach the
&gt; guard
&gt; code to ignore those kinds of failures.
&gt; 
&gt; But that will mean that Tor Browser is depending on
&gt; ClientAutoIPv6ORPort.
&gt; So we will also need to add a new option to activate the code for this
&gt; proposal.
&gt; (Otherwise, we won't know if this proposal is better or worse!)

Makes sense. After all, IPv4/IPv6 selection is complex it something this 
complicated shouldn't be a "one size fits all".

&gt; Here's one way we could do that:
&gt; 
&gt; Add a new option ClientAutoIPv6ORPortStrategy, which takes some flags.
&gt; When no flags are set (the default), we use the original
&gt; ClientAutoIPv6ORPort.
&gt; Then we add a flag for this proposal:
&gt;   - TrackFailures
&gt; 
&gt; Then other tickets can use other flags:
&gt;   - CheckLocalAddresses for
&gt;      #27492 Try IPv4 or IPv6 more often based on public or private IP
&gt; addresses
&gt;   - CheckConsensus for
&gt;     #27647 When randomly choosing IPv4 or IPv6, set IPv6 probability
&gt; based on IPv6 weight
&gt; 
&gt; What do you think?
&gt; Would you like to make these changes to this proposal?

These additions sound good.

I have added the "TrackFailures" flag to my GitHub PR and also mentioned 
other flags will come in the future.

-Neel

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190308020039</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-08 02:00:39-0400</timestampReceived><subject>Re: [tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 7 Mar 2019, at 09:07, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Hi teor,
&gt; 
&gt; On 2019-03-05 21:12, teor wrote:
&gt; &gt; Sure. We usually do torspec changes using GitHub pull requests.
&gt; &gt; Can you open a pull request on https://github.com/torproject/torspec ?
&gt; &gt; Then link to the pull request from #27491 or in an email reply.
&gt; 
&gt; The GitHub PR is here: https://github.com/torproject/torspec/pull/61

Thanks, I opened a ticket to review and merge it here:
https://trac.torproject.org/projects/tor/ticket/29687

It should get reviewed within a week or two.

&gt; &gt; Here's one way we could do that:
&gt; &gt; Add a new option ClientAutoIPv6ORPortStrategy, which takes some flags.
&gt; &gt; When no flags are set (the default), we use the original
&gt; &gt; ClientAutoIPv6ORPort.
&gt; &gt; Then we add a flag for this proposal:
&gt; &gt; - TrackFailures
&gt; &gt; Then other tickets can use other flags:
&gt; &gt; - CheckLocalAddresses for
&gt; &gt; #27492 Try IPv4 or IPv6 more often based on public or private IP
&gt; &gt; addresses
&gt; &gt; - CheckConsensus for
&gt; &gt; #27647 When randomly choosing IPv4 or IPv6, set IPv6 probability
&gt; &gt; based on IPv6 weight
&gt; &gt; What do you think?
&gt; &gt; Would you like to make these changes to this proposal?
&gt; 
&gt; These additions sound good.
&gt; 
&gt; I have added the "TrackFailures" flag to my GitHub PR and also mentioned other \
&gt; flags will come in the future.

I like what you did here: I think having one option with extra flags is
better than two options.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlyBzMcACgkQEP6qDnB1
ZypLwxAAsiM3aw1enGFC+foeVMj7nLqQkUcasRl6cIPeMtKnNPUOnMT0FQayNRN0
/fuFlgDL5awiFzL8q6bvbEa4NR3B769oxxD2io9nhgqxKgbcFA9lHmVR28pN8+J1
asz+Cm+QAfDpDZhdZOgk14aptQsNQk9bZEuK4uD4xhWf2asWAPdo4PXspXSIoC8d
BwG7XeE0AvPu0uBO9MV5+9Wx0i+sdD/Amx1VEHMEcKFGIhRZvSmNISAgQhC2TVh+
tiXx/Pfmbnj087iZ/oUPkxmV5rsWmv2b9H8Dbl5dv4bAN56uzdRaC3NyvaPX9AiV
mf0JMFriQuvkp8H6r+sYJfbmVFKNyfIioUhRnEpQnlnW21QftijGzgA+XusqE3u8
wFafCM6c/3TzgLJRBYC4IH2UWDrnImXHA2mmc0RKCgn8S8baeOG3Se2YfZ75Ww6u
ZwmSpqPc7xPUV7Z7HpGWOhgxZZcGRZbbSv5H023he4VpxWar5g0+6n/GhN355Tk8
zKPPhZ9P0cYz10HpfFa8YDoCTFlDMJ8nJLty0OK6SYd0P8F8oq6oC21uhOLNmLy1
aOHJhp/I2PNnb6Q6NVI5kyT41DoHxPZcJVNnJ9i2k27LzLO0+qCpZpLv99bypag8
0aLomuMCiG6I4tpd4uzSRxZyMk+30O/4EOUp3pPayOORLRNDUuA=
=2gQH
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190312224441</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-03-12 22:44:41-0400</timestampReceived><subject>Re: [tor-dev] Updating Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count)</subject><body>

Hi teor,

&gt; Thanks, I opened a ticket to review and merge it here:
&gt; https://trac.torproject.org/projects/tor/ticket/29687
&gt; 
&gt; It should get reviewed within a week or two.
&gt; 

First off, thank you for doing this! As of now, it seems to have been 
merged.

&gt;&gt; I have added the "TrackFailures" flag to my GitHub PR and also 
&gt;&gt; mentioned other flags will come in the future.
&gt; 
&gt; I like what you did here: I think having one option with extra flags is
&gt; better than two options.

Again, Thank you!

Also, can we mark Prop299 as "Accepted" or is there any updates needed 
to this proposal?

-Neel

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190331215540</emailId><senderName>Alessandro Fiori</senderName><senderEmail>alefiori3@gmail.com</senderEmail><timestampReceived>2019-03-31 21:55:40-0400</timestampReceived><subject>Re: [tor-dev] Docker images for help people to run Tor (teor)</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,
I would like to share with the community some tests I've made for setting
up a "swarm" of Tor relays.

I setted up 3 exit relays and 3 middle relays on the same IPv4 address, to
make some testing, and the entire swarm works like a charm.

Due to Tor limitation, I have decided to build a template for preparing the
cluster, and upload it to GitHub.

You can find the example mini-cluster here:
https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm

I have tested the exit capabilities on another network with different
public IP address.

All the relays have published their own descriptors, I have prepared the
containers as a single, separated machines.

The process is different from preparing a single relay, because of Docker
build process.

I have disabled caching during the cluster process, so i have been able to
modify torrc without issues.

Because  its very interesting, attached to this e-mail there is the console
Logs from the 6 relays.

All containers are read-only, so the entire relay will destroy at the end
of session.

I hope this can be useful.

Alessandro Fiori


Il giorno sab 30 mar 2019 alle ore 13:00 &lt;
tor-dev-request@lists.torproject.org&gt; ha scritto:

&gt; Send tor-dev mailing list submissions to
&gt;         tor-dev@lists.torproject.org
&gt;
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt;         https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt;         tor-dev-request@lists.torproject.org
&gt;
&gt; You can reach the person managing the list at
&gt;         tor-dev-owner@lists.torproject.org
&gt;
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt;
&gt;
&gt; Today's Topics:
&gt;
&gt;    1. Re: Docker images for help people to run Tor (teor)
&gt;
&gt;
&gt; ----------------------------------------------------------------------
&gt;
&gt; Message: 1
&gt; Date: Sat, 30 Mar 2019 13:08:53 +1000
&gt; From: teor &lt;teor@riseup.net&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Docker images for help people to run Tor
&gt; Message-ID: &lt;3D4905AF-1C10-47BF-8823-EB3228FF990F@riseup.net&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt;
&gt; Hi,
&gt;
&gt; (Please try to reply to the thread, not the digest!)
&gt;
&gt; &gt; On 30 Mar 2019, at 11:51, Alessandro Fiori &lt;alefiori3@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; Because the images are built separately, and Containers doesn't have
&gt; persistent data by default, i'm testing the launch of a "relay swarm",
&gt; which isn't the "Docker Swarm".
&gt; &gt; The concept of a "Relay swarm" is to have multiple running relay
&gt; containers on the same user machine, without any conflict.
&gt; &gt;
&gt; &gt; The idea (i will testing it very soon) is possible, by pulling an image
&gt; and running it multiple times, creating intermetiate containers.
&gt; &gt;
&gt; &gt; A function like the "relay swarm" can be very useful, i don't know if
&gt; this approach can be risky, so i'm preparing a script for launching only
&gt; one type of relay swarm (middle or exit relays).
&gt; &gt;
&gt; &gt; If there is no security concerns, this function will be a very key
&gt; function for grow up the Network, because a user can run multiple relays at
&gt; a time.
&gt;
&gt; Tor only allows 2 relays per IPv4 address.
&gt;
&gt; T
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 833 bytes
&gt; Desc: Message signed with OpenPGP
&gt; URL: &lt;
&gt; http://lists.torproject.org/pipermail/tor-dev/attachments/20190330/666cdc2c/attachment-0001.sig
&gt; &gt;
&gt;
&gt; ------------------------------
&gt;
&gt; Subject: Digest Footer
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;
&gt;
&gt; ------------------------------
&gt;
&gt; End of tor-dev Digest, Vol 98, Issue 20
&gt; ***************************************
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;I would like to share with the \
community some tests I've made for setting up a "swarm" of Tor \
relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I setted up 3 exit relays and 3 middle relays on the \
same IPv4 address, to make some testing, and the entire swarm works like a \
charm.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Due to Tor limitation, I have decided to build a \
template for preparing the cluster, and upload it to \
GitHub.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can find the example mini-cluster \
here:&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm"&gt;https://github.com/randomtable/ChimeraOS/tree/master/TorSwarm&lt;/a&gt; \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have tested the exit capabilities on another network with \
different public IP address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All the relays have published \
their own descriptors, I have prepared the containers as a single, separated \
machines.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The process is different from preparing a single \
relay, because of Docker build process.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I have disabled \
caching during the cluster process, so i have been able to modify torrc without \
issues.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Because   its very interesting, attached to this \
e-mail there is the console Logs from the 6 relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;All \
containers are read-only, so the entire relay will destroy at the end of \
session.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I hope this can be \
useful.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Alessandro \
Fiori&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;div \
dir="ltr" class="gmail_attr"&gt;Il giorno sab 30 mar 2019 alle ore 13:00 &lt;&lt;a \
href="mailto:tor-dev-request@lists.torproject.org"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&gt; \
ha scritto:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Send tor-dev mailing \
                list submissions to&lt;br&gt;
            &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
To subscribe or unsubscribe via the World Wide Web, visit&lt;br&gt;
            &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
rel="noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 or, via email, send a message with subject or body 'help' to&lt;br&gt;
            &lt;a href="mailto:tor-dev-request@lists.torproject.org" \
target="_blank"&gt;tor-dev-request@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
You can reach the person managing the list at&lt;br&gt;
            &lt;a href="mailto:tor-dev-owner@lists.torproject.org" \
target="_blank"&gt;tor-dev-owner@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;br&gt;
When replying, please edit your Subject line so it is more specific&lt;br&gt;
than "Re: Contents of tor-dev digest..."&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
Today's Topics:&lt;br&gt;
&lt;br&gt;
     1. Re: Docker images for help people to run Tor (teor)&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
----------------------------------------------------------------------&lt;br&gt;
&lt;br&gt;
Message: 1&lt;br&gt;
Date: Sat, 30 Mar 2019 13:08:53 +1000&lt;br&gt;
From: teor &lt;&lt;a href="mailto:teor@riseup.net" \
                target="_blank"&gt;teor@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
To: &lt;a href="mailto:tor-dev@lists.torproject.org" \
                target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt;
Subject: Re: [tor-dev] Docker images for help people to run Tor&lt;br&gt;
Message-ID: &lt;&lt;a href="mailto:3D4905AF-1C10-47BF-8823-EB3228FF990F@riseup.net" \
                target="_blank"&gt;3D4905AF-1C10-47BF-8823-EB3228FF990F@riseup.net&lt;/a&gt;&gt;&lt;br&gt;
                
Content-Type: text/plain; charset="utf-8"&lt;br&gt;
&lt;br&gt;
Hi,&lt;br&gt;
&lt;br&gt;
(Please try to reply to the thread, not the digest!)&lt;br&gt;
&lt;br&gt;
&gt; On 30 Mar 2019, at 11:51, Alessandro Fiori &lt;&lt;a \
href="mailto:alefiori3@gmail.com" target="_blank"&gt;alefiori3@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt; &gt; &lt;br&gt;
&gt; Because the images are built separately, and Containers doesn't have \
persistent data by default, i'm testing the launch of a "relay swarm", \
which isn't the "Docker Swarm".&lt;br&gt; &gt; The concept of a "Relay \
swarm" is to have multiple running relay containers on the same user machine, \
without any conflict.&lt;br&gt; &gt; &lt;br&gt;
&gt; The idea (i will testing it very soon) is possible, by pulling an image and \
running it multiple times, creating intermetiate containers.&lt;br&gt; &gt; &lt;br&gt;
&gt; A function like the "relay swarm" can be very useful, i don't know \
if this approach can be risky, so i'm preparing a script for launching only one \
type of relay swarm (middle or exit relays).&lt;br&gt; &gt; &lt;br&gt;
&gt; If there is no security concerns, this function will be a very key function for \
grow up the Network, because a user can run multiple relays at a time.&lt;br&gt; &lt;br&gt;
Tor only allows 2 relays per IPv4 address.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
-------------- next part --------------&lt;br&gt;
A non-text attachment was scrubbed...&lt;br&gt;
Name: signature.asc&lt;br&gt;
Type: application/pgp-signature&lt;br&gt;
Size: 833 bytes&lt;br&gt;
Desc: Message signed with OpenPGP&lt;br&gt;
URL: &lt;&lt;a href="http://lists.torproject.org/pipermail/tor-dev/attachments/20190330/666cdc2c/attachment-0001.sig" \
rel="noreferrer" target="_blank"&gt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190330/666cdc2c/attachment-0001.sig&lt;/a&gt;&gt;&lt;br&gt;
 &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
Subject: Digest Footer&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &lt;br&gt;
------------------------------&lt;br&gt;
&lt;br&gt;
End of tor-dev Digest, Vol 98, Issue 20&lt;br&gt;
***************************************&lt;br&gt;
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


["LogPort9001.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt" Impossibile trovare C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt" Impossibile trovare C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\9001" --iidfile "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt" Sending build context to Docker daemon  2.048kB
Step 1/8 : FROM ubuntu:rolling
rolling: Pulling from library/ubuntu
e58ad9fd24ca: Pull complete
0a4c669d2dea: Pull complete
ab60767ef52b: Pull complete
8cc3b738fbea: Pull complete
Digest: sha256:1da669e3481b6c2c8bb25ad287b75202871b1511249000e3bc35679d02e007f4
Status: Downloaded newer image for ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/8 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 771d930b65b7
Get:1 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:5 http://archive.ubuntu.com/ubuntu cosmic/multiverse amd64 Packages [195 kB]
Get:6 http://archive.ubuntu.com/ubuntu cosmic/restricted amd64 Packages [13.6 kB]
Get:7 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 Packages [11.6 MB]
Get:8 http://security.ubuntu.com/ubuntu cosmic-security/universe amd64 Packages [79.2 \
kB] Get:9 http://security.ubuntu.com/ubuntu cosmic-security/main amd64 Packages [184 \
kB] Get:10 http://security.ubuntu.com/ubuntu cosmic-security/restricted amd64 \
Packages [5433 B] Get:11 http://security.ubuntu.com/ubuntu cosmic-security/multiverse \
amd64 Packages [3635 B] Get:12 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
Packages [1342 kB] Get:13 http://archive.ubuntu.com/ubuntu cosmic-updates/restricted \
amd64 Packages [5433 B] Get:14 http://archive.ubuntu.com/ubuntu cosmic-updates/main \
amd64 Packages [322 kB] Get:15 http://archive.ubuntu.com/ubuntu \
cosmic-updates/universe amd64 Packages [306 kB] Get:16 \
http://archive.ubuntu.com/ubuntu cosmic-updates/multiverse amd64 Packages [3635 B] \
Get:17 http://archive.ubuntu.com/ubuntu cosmic-backports/universe amd64 Packages \
[3009 B] Fetched 14.6 MB in 11s (1325 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 1s (3581 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 771d930b65b7
 ---&gt; cfc7d129e650
Step 3/8 : RUN apt-get install sudo -y
 ---&gt; Running in 8f1788497429
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 0s (1010 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container 8f1788497429
 ---&gt; 90b2d8a4a4fa
Step 4/8 : RUN sudo apt-get install tor -y
 ---&gt; Running in 6c125fc80445
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 3s (1269 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 6c125fc80445
 ---&gt; 2297a564fcb4
Step 5/8 : RUN sed -i 's/#ORPort 9001/ORPort 9001/' /etc/tor/torrc
 ---&gt; Running in 3ce8fadaa6d3
Removing intermediate container 3ce8fadaa6d3
 ---&gt; f223cdb62637
Step 6/8 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in a4722faf959b
Removing intermediate container a4722faf959b
 ---&gt; 80b168efdc96
Step 7/8 : EXPOSE 9001
 ---&gt; Running in f60cfc4fc6ab
Removing intermediate container f60cfc4fc6ab
 ---&gt; 77d506f6cc5c
Step 8/8 : ENTRYPOINT tor
 ---&gt; Running in 09dd6e66f656
Removing intermediate container 09dd6e66f656
 ---&gt; db959d4dd783
Successfully built db959d4dd783
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET \
iid=db959d4dd783ac1f5c9944336f51c260284a7f579d4aa51324b1f95cb8205779

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker create \
db959d4dd783ac1f5c9944336f51c260284a7f579d4aa51324b1f95cb8205779 \
956949b02177d314180b0cc6923c228e0a40be692ba050f2f3b5078ed449557e

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker commit 956949b02177 9001
sha256:2f2950887d7562406abbd25c23e028a8964db4ad94e78b1e235c86e4033950ff

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker run -p 9001:9001 9001
Mar 31 19:11:06.921 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:11:06.921 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:11:06.921 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:11:06.926 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:11:06.926 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:11:06.926 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:11:06.926 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:11:06.927 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:11:06.927 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:11:06.927 [notice] Opening OR listener on \
0.0.0.0:9001 Mar 31 19:11:06.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:11:07.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:11:07.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:11:07.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:11:07.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:11:07.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:11:07.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
5461F2AB389FE7EF3BBEDA95D8E48DD80B7B46A3' Mar 31 19:11:07.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:11:07.000 [notice] Starting with guard context "default"
Mar 31 19:11:07.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
204.13.164.118). Mar 31 19:11:08.000 [notice] I learned some more directory \
information, but not enough to build a circuit: We have no usable consensus. Mar 31 \
19:11:08.000 [notice] I learned some more directory information, but not enough to \
build a circuit: We have no usable consensus. Mar 31 19:11:09.000 [notice] \
Bootstrapped 45%: Asking for relay descriptors Mar 31 19:11:09.000 [notice] I learned \
some more directory information, but not enough to build a circuit: We need more \
microdescriptors: we have 0/6606, and can only build 0% of likely paths. (We have 0% \
of guards bw, 0% of midpoint bw, and 0% of exit bw = 0% of path bw.) Mar 31 \
19:11:10.000 [notice] Bootstrapped 50%: Loading relay descriptors Mar 31 19:11:13.000 \
[notice] Bootstrapped 55%: Loading relay descriptors Mar 31 19:11:13.000 [notice] \
Bootstrapped 60%: Loading relay descriptors Mar 31 19:11:13.000 [notice] Bootstrapped \
65%: Loading relay descriptors Mar 31 19:11:14.000 [notice] Bootstrapped 71%: Loading \
relay descriptors Mar 31 19:11:14.000 [notice] Bootstrapped 76%: Loading relay \
descriptors Mar 31 19:11:14.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network Mar 31 19:11:17.000 [notice] Bootstrapped 85%: Finishing handshake with first \
hop Mar 31 19:11:18.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:11:18.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:11:18.000 [notice] Bootstrapped 100%: Done
Mar 31 19:11:18.000 [notice] Now checking whether ORPort 5.88.73.115:9001 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:11:20.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:11:22.000 \
[notice] Performing bandwidth self-test...done.


["LogPort9003.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\9003" --iidfile "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt" Sending build context to Docker daemon  2.048kB
Step 1/8 : FROM ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/8 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 1f668b9c01ff
Get:1 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:5 http://archive.ubuntu.com/ubuntu cosmic/restricted amd64 Packages [13.6 kB]
Get:6 http://archive.ubuntu.com/ubuntu cosmic/multiverse amd64 Packages [195 kB]
Get:7 http://archive.ubuntu.com/ubuntu cosmic/main amd64 Packages [1342 kB]
Get:8 http://security.ubuntu.com/ubuntu cosmic-security/multiverse amd64 Packages \
[3635 B] Get:9 http://security.ubuntu.com/ubuntu cosmic-security/universe amd64 \
Packages [79.2 kB] Get:10 http://security.ubuntu.com/ubuntu cosmic-security/main \
amd64 Packages [184 kB] Get:11 http://security.ubuntu.com/ubuntu \
cosmic-security/restricted amd64 Packages [5433 B] Get:12 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 Packages [11.6 MB] Get:13 \
http://archive.ubuntu.com/ubuntu cosmic-updates/restricted amd64 Packages [5433 B] \
Get:14 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 Packages [322 kB] \
Get:15 http://archive.ubuntu.com/ubuntu cosmic-updates/multiverse amd64 Packages \
[3635 B] Get:16 http://archive.ubuntu.com/ubuntu cosmic-updates/universe amd64 \
Packages [306 kB] Get:17 http://archive.ubuntu.com/ubuntu cosmic-backports/universe \
amd64 Packages [3009 B] Fetched 14.6 MB in 11s (1325 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 2s (1186 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 1f668b9c01ff
 ---&gt; 5d85d36770d0
Step 3/8 : RUN apt-get install sudo -y
 ---&gt; Running in e7df85254a3b
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 1s (951 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container e7df85254a3b
 ---&gt; ed850539df03
Step 4/8 : RUN sudo apt-get install tor -y
 ---&gt; Running in ec2c1ebf7072
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 3s (1253 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container ec2c1ebf7072
 ---&gt; 174cecbf679f
Step 5/8 : RUN sed -i 's/#ORPort 9001/ORPort 9003/' /etc/tor/torrc
 ---&gt; Running in 7b6dde5dfa03
Removing intermediate container 7b6dde5dfa03
 ---&gt; 1071c7fef1b6
Step 6/8 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in 2a79062e0999
Removing intermediate container 2a79062e0999
 ---&gt; 454f11718581
Step 7/8 : EXPOSE 9003
 ---&gt; Running in e2f05641d8c8
Removing intermediate container e2f05641d8c8
 ---&gt; bfd4e90a7e42
Step 8/8 : ENTRYPOINT tor
 ---&gt; Running in 95fc1a0dc67b
Removing intermediate container 95fc1a0dc67b
 ---&gt; 077515028e15
Successfully built 077515028e15
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET \
iid=077515028e15df9430b0fcdf923f09cf40949f08dca78a8711dc4096162d32fb

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker create \
077515028e15df9430b0fcdf923f09cf40949f08dca78a8711dc4096162d32fb \
69a490cb86c9c44e166ed556660a4e89a470abd578986eb6f12625f7a9621a6d

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker commit 69a490cb86c9 9003
sha256:536fff7cd361c82f507dfc952bef21a2aec4242fdb0ed7c30415268f66860846

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker run -p 9003:9003 9003
Mar 31 19:20:47.563 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:20:47.563 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:20:47.563 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:20:47.571 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:20:47.571 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:20:47.571 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:20:47.571 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:20:47.572 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:20:47.572 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:20:47.572 [notice] Opening OR listener on \
0.0.0.0:9003 Mar 31 19:20:47.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:20:47.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:20:47.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:20:47.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:20:47.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:20:47.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:20:47.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
285E5CE176B919338ED3D5A13B866CCEDF176A32' Mar 31 19:20:47.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:20:47.000 [notice] Starting with guard context "default"
Mar 31 19:20:48.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
86.59.21.38). Mar 31 19:20:49.000 [notice] I learned some more directory information, \
but not enough to build a circuit: We have no usable consensus. Mar 31 19:20:49.000 \
[notice] I learned some more directory information, but not enough to build a \
circuit: We have no usable consensus. Mar 31 19:20:51.000 [warn] Please upgrade! This \
version of Tor (0.3.3.9) is not recommended, according to the directory authorities. \
Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha
 Mar 31 19:20:51.000 [notice] Bootstrapped 45%: Asking for relay descriptors
Mar 31 19:20:51.000 [notice] I learned some more directory information, but not \
enough to build a circuit: We need more microdescriptors: we have 0/6604, and can \
only build 0% of likely paths. (We have 0% of guards bw, 0% of midpoint bw, and 0% of \
exit bw = 0% of path bw.) Mar 31 19:20:54.000 [notice] Bootstrapped 50%: Loading \
relay descriptors Mar 31 19:20:56.000 [notice] Bootstrapped 55%: Loading relay \
descriptors Mar 31 19:20:57.000 [notice] Bootstrapped 60%: Loading relay descriptors
Mar 31 19:20:57.000 [notice] Bootstrapped 65%: Loading relay descriptors
Mar 31 19:20:57.000 [notice] Bootstrapped 70%: Loading relay descriptors
Mar 31 19:20:57.000 [notice] Bootstrapped 75%: Loading relay descriptors
Mar 31 19:20:58.000 [notice] Bootstrapped 80%: Connecting to the Tor network
Mar 31 19:21:01.000 [notice] Bootstrapped 85%: Finishing handshake with first hop
Mar 31 19:21:04.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:21:04.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:21:04.000 [notice] Bootstrapped 100%: Done
Mar 31 19:21:04.000 [notice] Now checking whether ORPort 5.88.73.115:9003 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:21:49.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:21:51.000 \
[notice] Performing bandwidth self-test...done.


["LogPort9005.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\9005" --iidfile \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\image.txt" Sending build context \
to Docker daemon  2.048kB Step 1/9 : FROM ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/9 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 68a6f93f7c23
Get:1 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:5 http://security.ubuntu.com/ubuntu cosmic-security/restricted amd64 Packages \
[5433 B] Get:6 http://security.ubuntu.com/ubuntu cosmic-security/main amd64 Packages \
[184 kB] Get:7 http://archive.ubuntu.com/ubuntu cosmic/main amd64 Packages [1342 kB]
Get:8 http://security.ubuntu.com/ubuntu cosmic-security/universe amd64 Packages [79.2 \
kB] Get:9 http://security.ubuntu.com/ubuntu cosmic-security/multiverse amd64 Packages \
[3635 B] Get:10 http://archive.ubuntu.com/ubuntu cosmic/restricted amd64 Packages \
[13.6 kB] Get:11 http://archive.ubuntu.com/ubuntu cosmic/multiverse amd64 Packages \
[195 kB] Get:12 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 Packages [11.6 \
MB] Get:13 http://archive.ubuntu.com/ubuntu cosmic-updates/restricted amd64 Packages \
[5433 B] Get:14 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 Packages \
[322 kB] Get:15 http://archive.ubuntu.com/ubuntu cosmic-updates/universe amd64 \
Packages [306 kB] Get:16 http://archive.ubuntu.com/ubuntu cosmic-updates/multiverse \
amd64 Packages [3635 B] Get:17 http://archive.ubuntu.com/ubuntu \
cosmic-backports/universe amd64 Packages [3009 B] Fetched 14.6 MB in 12s (1194 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 2s (1098 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 68a6f93f7c23
 ---&gt; 75297cc68ed5
Step 3/9 : RUN apt-get install sudo -y
 ---&gt; Running in d4db65683d77
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 1s (950 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container d4db65683d77
 ---&gt; 70822b1b319f
Step 4/9 : RUN sudo apt-get install tor -y
 ---&gt; Running in b1e387bcaf2f
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 3s (1233 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container b1e387bcaf2f
 ---&gt; 40a35414ded7
Step 5/9 : RUN sed -i 's/#ORPort 9001/ORPort 9005/' /etc/tor/torrc
 ---&gt; Running in cb68923566cf
Removing intermediate container cb68923566cf
 ---&gt; 82504d1ede1c
Step 6/9 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in fca9dde9c95b
Removing intermediate container fca9dde9c95b
 ---&gt; 8f18541fffe0
Step 7/9 : RUN sed -i 's/#ExitRelay 0/ExitRelay 0/' /etc/tor/torrc
 ---&gt; Running in 90b8ae93cdde
Removing intermediate container 90b8ae93cdde
 ---&gt; 084ce1bd6b4f
Step 8/9 : EXPOSE 9005
 ---&gt; Running in 0d564b657565
Removing intermediate container 0d564b657565
 ---&gt; 7ceb0e3d8364
Step 9/9 : ENTRYPOINT tor
 ---&gt; Running in 43a8e797fa22
Removing intermediate container 43a8e797fa22
 ---&gt; 1322ba1144e9
Successfully built 1322ba1144e9
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET \
iid=1322ba1144e954efbc3952a3496f2548ea2e1f7039c1191ad452f9288e48c07b

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker create \
1322ba1144e954efbc3952a3496f2548ea2e1f7039c1191ad452f9288e48c07b \
0a2156ad067dad389d24c254d146bef3d7591491b1d866fae51c94ac1d59f76d

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker commit 0a2156ad067d 9005
sha256:aee8735e7ed7e428d521307334ce8fb5154a230c75e61168edfe598e83a70c88

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker run -p 9005:9005 9005
Mar 31 19:47:02.541 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:47:02.541 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:47:02.541 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:47:02.546 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:47:02.547 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:47:02.549 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:47:02.549 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:47:02.550 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:47:02.550 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:47:02.550 [notice] Opening OR listener on \
0.0.0.0:9005 Mar 31 19:47:02.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:47:02.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:47:02.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:47:02.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:47:02.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:47:02.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:47:03.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
F02D8D49923E6015134967F0A77EBADC43707FF3' Mar 31 19:47:03.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:47:03.000 [notice] Starting with guard context "default"
Mar 31 19:47:03.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
128.31.0.39). Mar 31 19:47:04.000 [notice] I learned some more directory information, \
but not enough to build a circuit: We have no usable consensus. Mar 31 19:47:04.000 \
[notice] I learned some more directory information, but not enough to build a \
circuit: We have no usable consensus. Mar 31 19:47:05.000 [warn] Please upgrade! This \
version of Tor (0.3.3.9) is not recommended, according to the directory authorities. \
Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha
 Mar 31 19:47:05.000 [notice] Bootstrapped 45%: Asking for relay descriptors
Mar 31 19:47:05.000 [notice] I learned some more directory information, but not \
enough to build a circuit: We need more microdescriptors: we have 0/6604, and can \
only build 0% of likely paths. (We have 0% of guards bw, 0% of midpoint bw, and 0% of \
exit bw = 0% of path bw.) Mar 31 19:47:07.000 [notice] Bootstrapped 50%: Loading \
relay descriptors Mar 31 19:47:11.000 [notice] Bootstrapped 55%: Loading relay \
descriptors Mar 31 19:47:11.000 [notice] Bootstrapped 60%: Loading relay descriptors
Mar 31 19:47:12.000 [notice] Bootstrapped 65%: Loading relay descriptors
Mar 31 19:47:12.000 [notice] Bootstrapped 70%: Loading relay descriptors
Mar 31 19:47:12.000 [notice] Bootstrapped 76%: Loading relay descriptors
Mar 31 19:47:28.000 [notice] Bootstrapped 80%: Connecting to the Tor network
Mar 31 19:47:28.000 [notice] Bootstrapped 85%: Finishing handshake with first hop
Mar 31 19:47:28.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:47:29.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:47:29.000 [notice] Bootstrapped 100%: Done
Mar 31 19:47:29.000 [notice] Now checking whether ORPort 5.88.73.115:9005 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:47:30.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:47:34.000 \
[notice] Performing bandwidth self-test...done.


["LogPort9002.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\9002" --iidfile "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt" Sending build context to Docker daemon  2.048kB
Step 1/8 : FROM ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/8 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 60bb6788b723
Get:1 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 Packages [1342 kB]
Get:6 http://security.ubuntu.com/ubuntu cosmic-security/main amd64 Packages [184 kB]
Get:7 http://security.ubuntu.com/ubuntu cosmic-security/multiverse amd64 Packages \
[3635 B] Get:8 http://security.ubuntu.com/ubuntu cosmic-security/restricted amd64 \
Packages [5433 B] Get:9 http://security.ubuntu.com/ubuntu cosmic-security/universe \
amd64 Packages [79.2 kB] Get:10 http://archive.ubuntu.com/ubuntu cosmic/restricted \
amd64 Packages [13.6 kB] Get:11 http://archive.ubuntu.com/ubuntu cosmic/multiverse \
amd64 Packages [195 kB] Get:12 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 \
Packages [11.6 MB] Get:13 http://archive.ubuntu.com/ubuntu cosmic-updates/universe \
amd64 Packages [306 kB] Get:14 http://archive.ubuntu.com/ubuntu \
cosmic-updates/multiverse amd64 Packages [3635 B] Get:15 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 Packages [322 kB] Get:16 \
http://archive.ubuntu.com/ubuntu cosmic-updates/restricted amd64 Packages [5433 B] \
Get:17 http://archive.ubuntu.com/ubuntu cosmic-backports/universe amd64 Packages \
[3009 B] Fetched 14.6 MB in 13s (1105 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 1s (3502 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 60bb6788b723
 ---&gt; 4f5c11d6f8f4
Step 3/8 : RUN apt-get install sudo -y
 ---&gt; Running in d3742a6dfdd0
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 0s (1188 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container d3742a6dfdd0
 ---&gt; 29c0b033fbdc
Step 4/8 : RUN sudo apt-get install tor -y
 ---&gt; Running in 4c35ad57422b
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 1s (4184 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 4c35ad57422b
 ---&gt; f752ae8d1790
Step 5/8 : RUN sed -i 's/#ORPort 9001/ORPort 9002/' /etc/tor/torrc
 ---&gt; Running in 2dcb201d8344
Removing intermediate container 2dcb201d8344
 ---&gt; 29ab2b4d7fb3
Step 6/8 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in a5ea713ea698
Removing intermediate container a5ea713ea698
 ---&gt; 258eadaf69f7
Step 7/8 : EXPOSE 9002
 ---&gt; Running in 49cd81b089db
Removing intermediate container 49cd81b089db
 ---&gt; 7fc2b1191d70
Step 8/8 : ENTRYPOINT tor
 ---&gt; Running in 78cd26ba64f1
Removing intermediate container 78cd26ba64f1
 ---&gt; 0a306454214d
Successfully built 0a306454214d
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET \
iid=0a306454214d1fa16511119f2d488413981323e0b51888ad5951dab5f422e9d3

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker create \
0a306454214d1fa16511119f2d488413981323e0b51888ad5951dab5f422e9d3 \
ca915564f95fce2945a9fb1dd050928999e21c1944f3c6021f3b3655dd65cd8b

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker commit ca915564f95f 9002
sha256:f88a34d2eec2b265d510d4e59f3bfcea420ea68b9cf7d5efee0f4042e09bfc2a

C:\Users\Alessandro Fiori\Desktop\TorSwarm&gt;docker run -p 9002:9002 9002
Mar 31 19:17:04.529 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:17:04.529 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:17:04.529 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:17:04.535 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:17:04.535 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:17:04.535 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:17:04.535 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:17:04.536 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:17:04.536 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:17:04.536 [notice] Opening OR listener on \
0.0.0.0:9002 Mar 31 19:17:04.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:17:04.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:17:04.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:17:04.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:17:04.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:17:04.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:17:05.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
ECB5AFB5E4A79209B0DDD2C0591EE9F6CEA7EFDA' Mar 31 19:17:05.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:17:05.000 [notice] Starting with guard context "default"
Mar 31 19:17:05.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
194.109.206.212). Mar 31 19:17:06.000 [notice] I learned some more directory \
information, but not enough to build a circuit: We have no usable consensus. Mar 31 \
19:17:06.000 [notice] I learned some more directory information, but not enough to \
build a circuit: We have no usable consensus. Mar 31 19:17:07.000 [notice] \
Bootstrapped 45%: Asking for relay descriptors Mar 31 19:17:07.000 [notice] I learned \
some more directory information, but not enough to build a circuit: We need more \
microdescriptors: we have 0/6604, and can only build 0% of likely paths. (We have 0% \
of guards bw, 0% of midpoint bw, and 0% of exit bw = 0% of path bw.) Mar 31 \
19:17:09.000 [notice] Bootstrapped 50%: Loading relay descriptors Mar 31 19:17:13.000 \
[notice] Bootstrapped 55%: Loading relay descriptors Mar 31 19:17:13.000 [notice] \
Bootstrapped 60%: Loading relay descriptors Mar 31 19:17:14.000 [notice] Bootstrapped \
65%: Loading relay descriptors Mar 31 19:17:14.000 [notice] Bootstrapped 71%: Loading \
relay descriptors Mar 31 19:17:14.000 [notice] Bootstrapped 77%: Loading relay \
descriptors Mar 31 19:17:14.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network Mar 31 19:17:19.000 [notice] Bootstrapped 85%: Finishing handshake with first \
hop Mar 31 19:17:20.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:17:20.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:17:20.000 [notice] Bootstrapped 100%: Done
Mar 31 19:17:20.000 [notice] Now checking whether ORPort 5.88.73.115:9002 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:17:20.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:17:23.000 \
[notice] Performing bandwidth self-test...done. Mar 31 19:57:08.000 [warn] Please \
upgrade! This version of Tor (0.3.3.9) is not recommended, according to the directory \
authorities. Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha



["LogPort9004.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt" Impossibile trovare C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt" Impossibile trovare C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\9004" --iidfile \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\image.txt" Sending build context \
to Docker daemon  2.048kB Step 1/9 : FROM ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/9 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 6f2ed3c64c5b
Get:1 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:2 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://security.ubuntu.com/ubuntu cosmic-security/main amd64 Packages [184 kB]
Get:5 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:6 http://security.ubuntu.com/ubuntu cosmic-security/restricted amd64 Packages \
[5433 B] Get:7 http://security.ubuntu.com/ubuntu cosmic-security/universe amd64 \
Packages [79.2 kB] Get:8 http://security.ubuntu.com/ubuntu cosmic-security/multiverse \
amd64 Packages [3635 B] Get:9 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
Packages [1342 kB] Get:10 http://archive.ubuntu.com/ubuntu cosmic/multiverse amd64 \
Packages [195 kB] Get:11 http://archive.ubuntu.com/ubuntu cosmic/restricted amd64 \
Packages [13.6 kB] Get:12 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 \
Packages [11.6 MB] Get:13 http://archive.ubuntu.com/ubuntu cosmic-updates/restricted \
amd64 Packages [5433 B] Get:14 http://archive.ubuntu.com/ubuntu \
cosmic-updates/universe amd64 Packages [306 kB] Get:15 \
http://archive.ubuntu.com/ubuntu cosmic-updates/multiverse amd64 Packages [3635 B] \
Get:16 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 Packages [322 kB] \
Get:17 http://archive.ubuntu.com/ubuntu cosmic-backports/universe amd64 Packages \
[3009 B] Fetched 14.6 MB in 12s (1234 kB/s)
Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 2s (1231 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 6f2ed3c64c5b
 ---&gt; be7cd07c6f66
Step 3/9 : RUN apt-get install sudo -y
 ---&gt; Running in 6e5e94c55e51
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 1s (975 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container 6e5e94c55e51
 ---&gt; 03cdaaacb480
Step 4/9 : RUN sudo apt-get install tor -y
 ---&gt; Running in 9191fe27c645
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 4s (978 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 9191fe27c645
 ---&gt; 1c0a7eaf41cb
Step 5/9 : RUN sed -i 's/#ORPort 9001/ORPort 9004/' /etc/tor/torrc
 ---&gt; Running in 63500794f762
Removing intermediate container 63500794f762
 ---&gt; f96bae4e5968
Step 6/9 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in 36c9562b8452
Removing intermediate container 36c9562b8452
 ---&gt; a5594aa4ead5
Step 7/9 : RUN sed -i 's/#ExitRelay 0/ExitRelay 0/' /etc/tor/torrc
 ---&gt; Running in 4fb9a8c75ba9
Removing intermediate container 4fb9a8c75ba9
 ---&gt; 3bf53a398442
Step 8/9 : EXPOSE 9004
 ---&gt; Running in 9bb28e8436fc
Removing intermediate container 9bb28e8436fc
 ---&gt; eb842da5c536
Step 9/9 : ENTRYPOINT tor
 ---&gt; Running in c4ded714248b
Removing intermediate container c4ded714248b
 ---&gt; d0038bf8c2fa
Successfully built d0038bf8c2fa
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET \
iid=d0038bf8c2fa718d9dda95841540b6b9fb39b483c49e4aad3c843fe4fc4b350a

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker create \
d0038bf8c2fa718d9dda95841540b6b9fb39b483c49e4aad3c843fe4fc4b350a \
c064ca4c91a8ac3d16f5c78d9edd9390feed824223024a9e20a784d5f6421589

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker commit c064ca4c91a8 9004
sha256:7c817265205a6f529987803c58fb99b0ccbba27d49f80adc71605c868f7b571a

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker run -p 9004:9004 9004
Mar 31 19:43:52.641 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:43:52.641 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:43:52.641 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:43:52.645 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:43:52.645 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:43:52.646 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:43:52.646 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:43:52.646 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:43:52.646 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:43:52.646 [notice] Opening OR listener on \
0.0.0.0:9004 Mar 31 19:43:52.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:43:52.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:43:52.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:43:52.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:43:52.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:43:52.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:43:53.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
0AC0752B20D908077C76327BC040BFB2C9FF64A2' Mar 31 19:43:53.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:43:53.000 [notice] Starting with guard context "default"
Mar 31 19:43:53.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
86.59.21.38). Mar 31 19:43:53.000 [warn] Received http status code 404 ("Not Found") \
from server '178.62.60.37:80' while fetching consensus directory. Mar 31 19:43:54.000 \
[notice] I learned some more directory information, but not enough to build a \
circuit: We have no usable consensus. Mar 31 19:43:55.000 [notice] Bootstrapped 45%: \
Asking for relay descriptors Mar 31 19:43:55.000 [notice] I learned some more \
directory information, but not enough to build a circuit: We need more \
microdescriptors: we have 0/6604, and can only build 0% of likely paths. (We have 0% \
of guards bw, 0% of midpoint bw, and 0% of exit bw = 0% of path bw.) Mar 31 \
19:43:56.000 [notice] Bootstrapped 50%: Loading relay descriptors Mar 31 19:43:57.000 \
[notice] Bootstrapped 55%: Loading relay descriptors Mar 31 19:43:57.000 [notice] \
Bootstrapped 60%: Loading relay descriptors Mar 31 19:43:58.000 [notice] Bootstrapped \
65%: Loading relay descriptors Mar 31 19:43:58.000 [notice] Bootstrapped 70%: Loading \
relay descriptors Mar 31 19:43:58.000 [notice] Bootstrapped 76%: Loading relay \
descriptors Mar 31 19:43:58.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network Mar 31 19:43:59.000 [notice] Bootstrapped 85%: Finishing handshake with first \
hop Mar 31 19:43:59.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:43:59.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:43:59.000 [notice] Bootstrapped 100%: Done
Mar 31 19:43:59.000 [notice] Now checking whether ORPort 5.88.73.115:9004 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:44:00.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:44:03.000 \
[notice] Performing bandwidth self-test...done. Mar 31 19:44:57.000 [warn] Please \
upgrade! This version of Tor (0.3.3.9) is not recommended, according to the directory \
authorities. Recommended versions are: \
0.2.9.15,0.2.9.16,0.2.9.17,0.3.4.10,0.3.4.11,0.3.5.7,0.3.5.8,0.4.0.1-alpha,0.4.0.2-alpha,0.4.0.3-alpha



["LogPort9006.txt" (text/plain)]


C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;DEL /F /Q /A "C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker build --no-cache=true \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\9006" --iidfile \
"C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle\image.txt" Sending build context \
to Docker daemon  2.048kB Step 1/9 : FROM ubuntu:rolling
 ---&gt; b977ae81df17
Step 2/9 : RUN apt-get update &amp;&amp; apt-get upgrade -y
 ---&gt; Running in 13ecb8604dd7
Get:1 http://archive.ubuntu.com/ubuntu cosmic InRelease [242 kB]
Get:2 http://security.ubuntu.com/ubuntu cosmic-security InRelease [88.7 kB]
Get:3 http://archive.ubuntu.com/ubuntu cosmic-updates InRelease [88.7 kB]
Get:4 http://archive.ubuntu.com/ubuntu cosmic-backports InRelease [74.6 kB]
Get:5 http://security.ubuntu.com/ubuntu cosmic-security/restricted amd64 Packages \
[5433 B] Get:6 http://security.ubuntu.com/ubuntu cosmic-security/main amd64 Packages \
[184 kB] Get:7 http://archive.ubuntu.com/ubuntu cosmic/multiverse amd64 Packages [195 \
kB] Get:8 http://security.ubuntu.com/ubuntu cosmic-security/multiverse amd64 Packages \
[3635 B] Get:9 http://security.ubuntu.com/ubuntu cosmic-security/universe amd64 \
Packages [79.2 kB] Get:10 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 \
Packages [11.6 MB] Get:11 http://archive.ubuntu.com/ubuntu cosmic/main amd64 Packages \
[1342 kB] Get:12 http://archive.ubuntu.com/ubuntu cosmic/restricted amd64 Packages \
[13.6 kB] Get:13 http://archive.ubuntu.com/ubuntu cosmic-updates/multiverse amd64 \
Packages [3635 B] Get:14 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 \
Packages [322 kB] Get:15 http://archive.ubuntu.com/ubuntu cosmic-updates/restricted \
amd64 Packages [5433 B] Get:16 http://archive.ubuntu.com/ubuntu \
cosmic-updates/universe amd64 Packages [306 kB] Get:17 \
http://archive.ubuntu.com/ubuntu cosmic-backports/universe amd64 Packages [3009 B] \
Fetched 14.6 MB in 11s (1272 kB/s) Reading package lists...
Reading package lists...
Building dependency tree...
Reading state information...
Calculating upgrade...
The following packages will be upgraded:
  apt libapt-pkg5.0
2 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
Need to get 1992 kB of archives.
After this operation, 6144 B of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libapt-pkg5.0 amd64 \
1.7.4 [816 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 apt \
                amd64 1.7.4 [1176 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 1992 kB in 2s (1209 kB/s)
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../libapt-pkg5.0_1.7.4_amd64.deb ...
Unpacking libapt-pkg5.0:amd64 (1.7.4) over (1.7.2) ...
Setting up libapt-pkg5.0:amd64 (1.7.4) ...
(Reading database ... 4032 files and directories currently installed.)
Preparing to unpack .../archives/apt_1.7.4_amd64.deb ...
Unpacking apt (1.7.4) over (1.7.2) ...
Setting up apt (1.7.4) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 13ecb8604dd7
 ---&gt; 2bcd460a8aaf
Step 3/9 : RUN apt-get install sudo -y
 ---&gt; Running in 3d571611607c
Reading package lists...
Building dependency tree...
Reading state information...
The following NEW packages will be installed:
  sudo
0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.
Need to get 490 kB of archives.
After this operation, 2114 kB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 sudo amd64 1.8.23-2ubuntu1 \
                [490 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 490 kB in 1s (843 kB/s)
Selecting previously unselected package sudo.
(Reading database ... 4033 files and directories currently installed.)
Preparing to unpack .../sudo_1.8.23-2ubuntu1_amd64.deb ...
Unpacking sudo (1.8.23-2ubuntu1) ...
Setting up sudo (1.8.23-2ubuntu1) ...
Removing intermediate container 3d571611607c
 ---&gt; ebc2e7c4faf7
Step 4/9 : RUN sudo apt-get install tor -y
 ---&gt; Running in 0ee1095b8c86
Reading package lists...
Building dependency tree...
Reading state information...
The following additional packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor-geoipdb
  torsocks
Suggested packages:
  anacron checksecurity exim4 | postfix | mail-transport-agent bsd-mailx
  | mailx mixmaster torbrowser-launcher socat tor-arm apparmor-utils
  obfs4proxy
The following NEW packages will be installed:
  cron libcap2 libevent-2.1-6 libpopt0 libssl1.1 logrotate tor tor-geoipdb
  torsocks
0 upgraded, 9 newly installed, 0 to remove and 0 not upgraded.
Need to get 3729 kB of archives.
After this operation, 16.2 MB of additional disk space will be used.
Get:1 http://archive.ubuntu.com/ubuntu cosmic/main amd64 cron amd64 \
3.0pl1-128.1ubuntu1 [68.8 kB] Get:2 http://archive.ubuntu.com/ubuntu cosmic/main \
amd64 libcap2 amd64 1:2.25-1.2 [13.0 kB] Get:3 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libpopt0 amd64 1.16-11 [26.2 kB] Get:4 \
http://archive.ubuntu.com/ubuntu cosmic-updates/main amd64 libssl1.1 amd64 \
1.1.1-1ubuntu2.1 [1297 kB] Get:5 http://archive.ubuntu.com/ubuntu cosmic/main amd64 \
logrotate amd64 3.14.0-4ubuntu1 [44.6 kB] Get:6 http://archive.ubuntu.com/ubuntu \
cosmic/main amd64 libevent-2.1-6 amd64 2.1.8-stable-4build1 [133 kB] Get:7 \
http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor amd64 0.3.3.9-1 [1277 kB] \
Get:8 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 torsocks amd64 2.2.0-2 \
[59.1 kB] Get:9 http://archive.ubuntu.com/ubuntu cosmic/universe amd64 tor-geoipdb \
                all 0.3.3.9-1 [810 kB]
debconf: delaying package configuration, since apt-utils is not installed
Fetched 3729 kB in 1s (4907 kB/s)
Selecting previously unselected package cron.
(Reading database ... 4091 files and directories currently installed.)
Preparing to unpack .../0-cron_3.0pl1-128.1ubuntu1_amd64.deb ...
Unpacking cron (3.0pl1-128.1ubuntu1) ...
Selecting previously unselected package libcap2:amd64.
Preparing to unpack .../1-libcap2_1%3a2.25-1.2_amd64.deb ...
Unpacking libcap2:amd64 (1:2.25-1.2) ...
Selecting previously unselected package libpopt0:amd64.
Preparing to unpack .../2-libpopt0_1.16-11_amd64.deb ...
Unpacking libpopt0:amd64 (1.16-11) ...
Selecting previously unselected package libssl1.1:amd64.
Preparing to unpack .../3-libssl1.1_1.1.1-1ubuntu2.1_amd64.deb ...
Unpacking libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
Selecting previously unselected package logrotate.
Preparing to unpack .../4-logrotate_3.14.0-4ubuntu1_amd64.deb ...
Unpacking logrotate (3.14.0-4ubuntu1) ...
Selecting previously unselected package libevent-2.1-6:amd64.
Preparing to unpack .../5-libevent-2.1-6_2.1.8-stable-4build1_amd64.deb ...
Unpacking libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Selecting previously unselected package tor.
Preparing to unpack .../6-tor_0.3.3.9-1_amd64.deb ...
Unpacking tor (0.3.3.9-1) ...
Selecting previously unselected package torsocks.
Preparing to unpack .../7-torsocks_2.2.0-2_amd64.deb ...
Unpacking torsocks (2.2.0-2) ...
Selecting previously unselected package tor-geoipdb.
Preparing to unpack .../8-tor-geoipdb_0.3.3.9-1_all.deb ...
Unpacking tor-geoipdb (0.3.3.9-1) ...
Setting up libpopt0:amd64 (1.16-11) ...
Setting up libevent-2.1-6:amd64 (2.1.8-stable-4build1) ...
Setting up libcap2:amd64 (1:2.25-1.2) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Setting up libssl1.1:amd64 (1.1.1-1ubuntu2.1) ...
debconf: unable to initialize frontend: Dialog
debconf: (Dialog frontend will not work on a dumb terminal, an emacs shell buffer, or \
                without a controlling terminal.)
debconf: falling back to frontend: Readline
debconf: unable to initialize frontend: Readline
debconf: (Can't locate Term/ReadLine.pm in @INC (you may need to install the \
Term::ReadLine module) (@INC contains: /etc/perl \
/usr/local/lib/x86_64-linux-gnu/perl/5.26.2 /usr/local/share/perl/5.26.2 \
/usr/lib/x86_64-linux-gnu/perl5/5.26 /usr/share/perl5 \
/usr/lib/x86_64-linux-gnu/perl/5.26 /usr/share/perl/5.26 /usr/local/lib/site_perl \
/usr/lib/x86_64-linux-gnu/perl-base) at /usr/share/perl5/Debconf/FrontEnd/Readline.pm \
                line 7.)
debconf: falling back to frontend: Teletype
Setting up torsocks (2.2.0-2) ...
Setting up cron (3.0pl1-128.1ubuntu1) ...
Adding group `crontab' (GID 101) ...
Done.
update-rc.d: warning: start and stop actions are no longer supported; falling back to \
                defaults
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up logrotate (3.14.0-4ubuntu1) ...
Setting up tor (0.3.3.9-1) ...
Something or somebody made /var/lib/tor disappear.
Creating one for you again.
Something or somebody made /var/log/tor disappear.
Creating one for you again.
invoke-rc.d: could not determine current runlevel
invoke-rc.d: policy-rc.d denied execution of start.
Setting up tor-geoipdb (0.3.3.9-1) ...
Processing triggers for libc-bin (2.28-0ubuntu1) ...
Removing intermediate container 0ee1095b8c86
 ---&gt; 0d107620deb0
Step 5/9 : RUN sed -i 's/#ORPort 9001/ORPort 9006/' /etc/tor/torrc
 ---&gt; Running in ebb23eef3e89
Removing intermediate container ebb23eef3e89
 ---&gt; 9973287d3a54
Step 6/9 : RUN sed -i 's/#Nickname ididnteditheconfig/Nickname torrelay/' \
                /etc/tor/torrc
 ---&gt; Running in 195123b4d1ff
Removing intermediate container 195123b4d1ff
 ---&gt; 20d7c5916736
Step 7/9 : RUN sed -i 's/#ExitRelay 0/ExitRelay 0/' /etc/tor/torrc
 ---&gt; Running in 6df6c1a9d6a5
Removing intermediate container 6df6c1a9d6a5
 ---&gt; f8ba47a52e0b
Step 8/9 : EXPOSE 9006
 ---&gt; Running in de6ee74e31c7
Removing intermediate container de6ee74e31c7
 ---&gt; 08838bae4750
Step 9/9 : ENTRYPOINT tor
 ---&gt; Running in 273110920e26
Removing intermediate container 273110920e26
 ---&gt; a2cb6a52cdc9
Successfully built a2cb6a52cdc9
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows \
Docker host. All files and directories added to build context will have '-rwxr-xr-x' \
permissions. It is recommended to double check and reset permissions for sensitive \
files and directories.

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P iid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\image.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET \
iid=a2cb6a52cdc9326cc4c41e481d3ddf6fae851b9b524c3b701b4c16f8e376c590

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker create \
a2cb6a52cdc9326cc4c41e481d3ddf6fae851b9b524c3b701b4c16f8e376c590 \
9a487c993c66a166b7a88fc20993213c040db9f8cadfcc4ddb7a9f160c548f01

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker ps -l -q  1&gt;&gt;container.txt

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;SET /P ciid= 0&lt;"C:\Users\Alessandro \
Fiori\Desktop\TorSwarm\Middle\container.txt"

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker commit 9a487c993c66 9006
sha256:568e65807e7e1544855b429168c1424cabef1eaf67821f51ab5be3bbcd46cd5e

C:\Users\Alessandro Fiori\Desktop\TorSwarm\Middle&gt;docker run -p 9006:9006 9006
Mar 31 19:50:46.001 [notice] Tor 0.3.3.9 (git-ca1a436fa8e53a32) running on Linux with \
Libevent 2.1.8-stable, OpenSSL 1.1.1, Zlib 1.2.11, Liblzma 5.2.2, and Libzstd 1.3.5. \
Mar 31 19:50:46.001 [notice] Tor can't help you if you use it wrong! Learn how to be \
safe at https://www.torproject.org/download/download#warning Mar 31 19:50:46.001 \
[notice] Read configuration file "/etc/tor/torrc". Mar 31 19:50:46.008 [notice] Your \
ContactInfo config option is not set. Please consider setting it, so we can contact \
you if your server is misconfigured or something else goes wrong. Mar 31 19:50:46.008 \
[notice] Based on detected system memory, MaxMemInQueues is set to 1485 MB. You can \
override this by setting MaxMemInQueues by hand. Mar 31 19:50:46.008 [warn] Tor is \
running as an exit relay with the default exit policy. If you did not want this \
behavior, please set the ExitRelay option to 0. If you do want to run an exit Relay, \
please set the ExitRelay option to 1 to disable this warning, and for forward \
compatibility. Mar 31 19:50:46.008 [warn] In a future version of Tor, ExitRelay 0 may \
become the default when no ExitPolicy is given. Mar 31 19:50:46.009 [notice] \
Scheduler type KIST has been enabled. Mar 31 19:50:46.009 [notice] Opening Socks \
listener on 127.0.0.1:9050 Mar 31 19:50:46.009 [notice] Opening OR listener on \
0.0.0.0:9006 Mar 31 19:50:46.000 [notice] Parsing GEOIP IPv4 file \
/usr/share/tor/geoip. Mar 31 19:50:46.000 [notice] Parsing GEOIP IPv6 file \
/usr/share/tor/geoip6. Mar 31 19:50:46.000 [notice] Configured to measure statistics. \
Look for the *-stats files that will first be written to the data directory in 24 \
hours from now. Mar 31 19:50:46.000 [warn] You are running Tor as root. You don't \
need to, and you probably shouldn't. Mar 31 19:50:46.000 [notice] You are running a \
new relay. Thanks for helping the Tor network! If you wish to know what will happen \
in the upcoming weeks regarding its usage, have a look at \
https://blog.torproject.org/blog/lifecycle-of-a-new-relay Mar 31 19:50:46.000 \
[notice] It looks like I need to generate and sign a new medium-term signing key, \
because I don't have one. To do that, I need to load (or create) the permanent master \
identity key. If the master identity key was not moved or encrypted with a \
passphrase, this will be done automatically and no further action is required. \
Otherwise, provide the necessary data using 'tor --keygen' to do it manually. Mar 31 \
19:50:46.000 [notice] Your Tor server's identity key fingerprint is 'torrelay \
13E85D718F991742E5F9B0A975A3C1F8207452D0' Mar 31 19:50:46.000 [notice] Bootstrapped \
0%: Starting Mar 31 19:50:46.000 [notice] Starting with guard context "default"
Mar 31 19:50:46.000 [notice] Guessed our IP address as 5.88.73.115 (source: \
171.25.193.9). Mar 31 19:50:48.000 [notice] I learned some more directory \
information, but not enough to build a circuit: We have no usable consensus. Mar 31 \
19:50:49.000 [notice] I learned some more directory information, but not enough to \
build a circuit: We have no usable consensus. Mar 31 19:50:50.000 [notice] \
Bootstrapped 45%: Asking for relay descriptors Mar 31 19:50:50.000 [notice] I learned \
some more directory information, but not enough to build a circuit: We need more \
microdescriptors: we have 0/6604, and can only build 0% of likely paths. (We have 0% \
of guards bw, 0% of midpoint bw, and 0% of exit bw = 0% of path bw.) Mar 31 \
19:50:52.000 [notice] Bootstrapped 50%: Loading relay descriptors Mar 31 19:50:57.000 \
[notice] Bootstrapped 55%: Loading relay descriptors Mar 31 19:50:57.000 [notice] \
Bootstrapped 60%: Loading relay descriptors Mar 31 19:50:57.000 [notice] Bootstrapped \
65%: Loading relay descriptors Mar 31 19:50:57.000 [notice] Bootstrapped 70%: Loading \
relay descriptors Mar 31 19:50:57.000 [notice] Bootstrapped 75%: Loading relay \
descriptors Mar 31 19:50:58.000 [notice] Bootstrapped 80%: Connecting to the Tor \
network Mar 31 19:51:03.000 [notice] Bootstrapped 85%: Finishing handshake with first \
hop Mar 31 19:51:03.000 [notice] Bootstrapped 90%: Establishing a Tor circuit
Mar 31 19:51:04.000 [notice] Tor has successfully opened a circuit. Looks like client \
functionality is working. Mar 31 19:51:04.000 [notice] Bootstrapped 100%: Done
Mar 31 19:51:04.000 [notice] Now checking whether ORPort 5.88.73.115:9006 is \
reachable... (this may take up to 20 minutes -- look for log messages indicating \
success) Mar 31 19:51:05.000 [notice] Self-testing indicates your ORPort is reachable \
from the outside. Excellent. Publishing server descriptor. Mar 31 19:51:08.000 \
[notice] Performing bandwidth self-test...done.


[Attachment #12 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190313175039</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-03-13 17:50:39-0400</timestampReceived><subject>Re: [tor-dev] Proposal 301: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

&gt;&gt; On 25/02/2019 23:30, teor wrote:
&gt;&gt;&gt; Looks good to me, let's merge it as an "accepted" proposal?

This is now proposal 301.

What is the process by which this becomes "accepted"? Is this just a
matter of someone making that commit?

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190304205858</emailId><senderName>Kevin Gallagher</senderName><senderEmail>kcg295@nyu.edu</senderEmail><timestampReceived>2019-03-04 20:58:58-0400</timestampReceived><subject>[tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/alternative)]


Hello tor-dev!

My name is Kevin and I'm a PhD student at NYU. Recently I've been 
working on creating a "Tor Friendliness Scanner" (TFS), or a scanner 
that will measure what features of a given website are broken 
(non-functional) when accessed on the Tor Browser (TB), along with 
actionable suggestions to improve it. In order to do this, we first must 
get an approximation of ground-truth data of how a given website should 
work. We then need to compare it to how the website works on the TB to 
determine any changes.

To generate a method of determining ground-truth, we decided to modify* 
the Firefox (FF) browser to log all of the steps of the creation of the 
Content Tree (also called the DOM tree), and to log the execution of all 
JavaScript functions (currently underway). We then will apply these 
changes to the TB as well, and run a scan of popular Web sites using the 
modified FF and the modified TB on all three of the TB security slider 
settings. We will then compare the resulting logs to determine where the 
tree creation processes differed* and why. These differences could 
potentially help us illuminate two things:

 1. what functionality issues the Tor Browser encounters on popular Web
    sites, and
 2. what threats (beyond metadata surveillance) the TB is protecting its
    users from in-the-wild.

As far as I have considered, this method seems to capture a lot, but 
it's far from complete. For one thing, it obviously won't detect any 
difference that's spawned from user interaction or input (such as a 
script launched by an OnClick event). However, it does seem to make 
automation of scanning for Tor Friendliness possible, and can allow for 
wide-scale use.

We have moved ahead with development (though have not yet finished it) 
and are (hopefully) very close to a working prototype. I was wondering 
if there was feedback on this method, or if anyone can consider an angle 
we have not that would either make the TFS more robust, easier to 
create, or both.

Thanks for your time and consideration!

Kevin

*Note 1: Unfortunately we cannot just rely on JavaScript for examining 
the content tree, since this needs to work on all 3 security settings of 
the TB's security slider, and the "safest" setting deactivates 
JavaScript by default on all Web pages.

*Note 2: There can be non-functional differences in Web pages, such as 
different ads showing or the display of the current time. We are working 
on methods to distinguish these from functional differences, such as 
using ad blacklists to determine if a given request or script is part of 
an ad, and ignoring it as part of the difference between the two trees.

-- 
Kevin Gallagher
Ph.D. Candidate
Center For Cybersecurity
NYU Tandon School of Engineering
Key Fingerprint: D02B 25CB 0F7D E276 06C3  BF08 53E4 C50F 8247 4861


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;p&gt;Hello tor-dev!&lt;/p&gt;
    &lt;p&gt;My name is Kevin and I'm a PhD student at NYU. Recently I've been
      working on creating a "Tor Friendliness Scanner" (TFS), or a
      scanner that will measure what features of a given website are
      broken (non-functional) when accessed on the Tor Browser (TB),
      along with actionable suggestions to improve it. In order to do
      this, we first must get an approximation of ground-truth data of
      how a given website should work. We then need to compare it to how
      the website works on the TB to determine any changes.&lt;/p&gt;
    &lt;p&gt;To generate a method of determining ground-truth, we decided to
      modify* the Firefox (FF) browser to log all of the steps of the
      creation of the Content Tree (also called the DOM tree), and to
      log the execution of all JavaScript functions (currently
      underway). We then will apply these changes to the TB as well, and
      run a scan of popular Web sites using the modified FF and the
      modified TB on all three of the TB security slider settings. We
      will then compare the resulting logs to determine where the tree
      creation processes differed* and why. These differences could
      potentially help us illuminate two things:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;what functionality issues the Tor Browser encounters on
        popular Web sites, and&lt;/li&gt;
      &lt;li&gt;what threats (beyond metadata surveillance) the TB is
        protecting its users from in-the-wild.&lt;/li&gt;
    &lt;/ol&gt;
    &lt;p&gt;As far as I have considered, this method seems to capture a lot,
      but it's far from complete. For one thing, it obviously won't
      detect any difference that's spawned from user interaction or
      input (such as a script launched by an OnClick event). However, it
      does seem to make automation of scanning for Tor Friendliness
      possible, and can allow for wide-scale use. &lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;We have moved ahead with development (though have not yet
      finished it) and are (hopefully) very close to a working
      prototype. I was wondering if there was feedback on this method,
      or if anyone can consider an angle we have not that would either
      make the TFS more robust, easier to create, or both.&lt;br&gt;
    &lt;/p&gt;
    &lt;p&gt;Thanks for your time and consideration!&lt;/p&gt;
    &lt;p&gt;Kevin&lt;/p&gt;
    &lt;p&gt;*Note 1: Unfortunately we cannot just rely on JavaScript for
      examining the content tree, since this needs to work on all 3
      security settings of the TB's security slider, and the "safest"
      setting deactivates JavaScript by default on all Web pages. &lt;br&gt;
    &lt;/p&gt;
    *Note 2: There can be non-functional differences in Web pages, such
    as different ads showing or the display of the current time. We are
    working on methods to distinguish these from functional differences,
    such as using ad blacklists to determine if a given request or
    script is part of an ad, and ignoring it as part of the difference
    between the two trees.
    &lt;pre class="moz-signature" cols="72"&gt;-- 
Kevin Gallagher
Ph.D. Candidate
Center For Cybersecurity
NYU Tandon School of Engineering
Key Fingerprint: D02B 25CB 0F7D E276 06C3  BF08 53E4 C50F 8247 4861 &lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190304210942</emailId><senderName>Santiago Torres-Arias</senderName><senderEmail>santiago@archlinux.org</senderEmail><timestampReceived>2019-03-04 21:09:42-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/signed)]


Hi, 

&gt; We have moved ahead with development (though have not yet finished it) and
&gt; are (hopefully) very close to a working prototype. I was wondering if there
&gt; was feedback on this method, or if anyone can consider an angle we have not
&gt; that would either make the TFS more robust, easier to create, or both.

I wonder if you could share a link to the source code for people to give
you feedback/audit or implement fixes/features themselves.

Cheers!
-Santiago


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190304211526</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-03-04 21:15:26-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

On Mon, Mar 04, 2019 at 03:58:58PM -0500, Kevin Gallagher wrote:
&gt; To generate a method of determining ground-truth, we decided to modify* the
&gt; Firefox (FF) browser to log all of the steps of the creation of the Content
&gt; Tree (also called the DOM tree)
&gt;[...]
&gt; We have moved ahead with development (though have not yet finished it) and
&gt; are (hopefully) very close to a working prototype. I was wondering if there
&gt; was feedback on this method

Neat stuff!

(1)
Looking at the DOM tree reminds me of Micah's paper from a few years back:
"Validating Web Content with Senser"
https://security.cs.georgetown.edu/~msherr/pubs.php

and (2)
Be sure to check out the recent papers by the Berkeley group on this
area, e.g.  the "do you see what I see" paper and more recent ones:
https://www1.icsi.berkeley.edu/~sadia/

--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190304214244</emailId><senderName>Allen Gunn</senderName><senderEmail>gunner@aspirationtech.org</senderEmail><timestampReceived>2019-03-04 21:42:44-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi Kevin,

It may or may not be of any use, but here is a content from an etherpad
that a number of Tor folks worked on a while back regarding 'tor
friendly sites".

Sounds like you have a robust way of going about this, so this is
provided as food for thought.

peace
gunner

Designing a web site to be "Tor-friendly"

The following represent an initial set of guidelines to help web site
publishers to design and maintain sites that work well with the Tor Browser.

This is an incomplete set, and we welcome contributions, suggestions and
feedback!

NOTE: Italicized comments are requests for additional input/responses...

Must do (as in "otherwise you undermine the core design goals of Tor and
put user anonymity and privacy at risk")


    Avoid using plugins like Adobe Flash, or any proprietary plugins
that can not be audited, in any way, shape, or form

    Avoid relying on users downloading and opening files such as pdfs or
Microsoft Word Documents



    What else can enable or cause leaking actual IP address info?


    What else about site design/implementation could de-anonymize users?

    The verb "avoid" here sounds like a MUST. Maybe here we should
instead say "Do not use plugins..." and "Do no rely on users".


Should Do (as in "help to maximize the security and quality of Tor user
experience")

Site design

    Test all site pages and functionality using Tor Browser [maybe add
the security level to test against? the browser security level allows
different experiences]

    Working in Tor Browser with the "Low" security level would actually
be a MUST. Working with the "Medium" and "High" could remain a SHOULD.

    https://tb-manual.torproject.org/en-US/security-slider.html

    Verify site works without javascript enabled

    I don't think you *have* to make your site work without JavaScript,
but you should at least inform the user in a friendly way that
JavaScript is required and the site will not work properly without it.

    Ack on the previous comment but the site should have basic
functionalities available with no JavaScript. Plus explain how to enable
it in Tor Browser. We did that on
https://tails.boum.org/install/download/ with
https://tails.boum.org/install/inc/screenshots/allow_js.png.

    The same as above, except for SVG and WebRTC instead of JavaScript


    Serve all content over HTTPS

    Use a trustworthy certificate authority such as LetsEncrypt.org

    What is the purpose here? One CA is effectively the same as any
other CA, so long as the CA isn't distrusted by Mozilla.


    Don't depend on IP address for locale determination (allow users to
set their own language)

    Don't depend on or assume IP address will remain constant during
user sessions

    Don't expect a particular number of users per IP address

    What else might break with new circuit or new identity based on site
design assumptions?


    Anything about "please don't fingerprint your users by
network/device addresses or browser attributes" or "don't try to extract
canvas details"?


Page design


    If you actually have a feature (such as user avatar/image editing)
that relies on canvas image extraction, allow a user to trigger the
image extraction multiple times and confirm the resulting extracted
image is what the user intends. This will allow friendly support of the
Canvas Permission Prompt.

    Do not rely on high resolution timestamps from any date properties,
such as performance.now() or Date().getMilliseconds()

    If you have a feature that relies on automatically detecting the
user's timezone, allow the user to override the automatic selection with
a manually chosen one

    Before making use of DOM features (WebSpeech API, gamepad API, etc)
perform feature detection to ensure the methods are present to avoid
possible JavaScript errors



    Minimize page "weight"/bandwidth needs

    Make sure pages work properly with image loading turned off (that's
not a "Should Do" item but "Please Do", if at all)

    This is not a supported configuraiton of Tor Browser, so I don't
think it should make the list.

    Don't auto-start videos or multimedia content

    And do not rely on the media statistic API to scale media
performance. Alternately, detect the spoofed media statistics and ignore
them.

    Don't assume low latency or constant latency

    Make sure pages work properly without SVG support enabled.

    And/or display a note that SVG images are in use and what users are
missing

    Make sure pages work properly without being able to load fonts
located remotely.


   (Make sure pages work properly when the "Security Slider" is set to
"High")

Server-side configuration


    Anything? Technologies to be avoided?

    If you use CloudFlare or another provider that treats Tor
differently, enable uninterrupted access for Tor users (link to CF
instructions)



    Verify site works "without" cookies

    (need correct/clarifying language to convey that actual session
cookies after login make sense) (you could specify "third-party" cookies
or more broadly "tracking cookies" if you want; right now I'd argue the
third-party cookie item is actually a "Should Do" item as we currently
have third-party cookies disabled; Hm. I wonder if that is not even a
"Must Do" at the moment because if a website really relied on
third-party cookies then it would be broken currently)


Please Do (as in "these things further enrich and protect Tor user
experiences")


    Make your site available via a corresponding .onion address [1]

    Make your site available over IPv6 as well as IPv4 (provide both
addresses in DNS)

    Once Tor Browser supports it, using HTTP2 with Push will decrease
the load time of your site.

    In general, any tech that decreases load time (image spriting,
minifying JS, etc) will get a magnified improvement in Tor Browser over
other browsers.





On 3/4/19 1:15 PM, Roger Dingledine wrote:
&gt; On Mon, Mar 04, 2019 at 03:58:58PM -0500, Kevin Gallagher wrote:
&gt;&gt; To generate a method of determining ground-truth, we decided to modify* the
&gt;&gt; Firefox (FF) browser to log all of the steps of the creation of the Content
&gt;&gt; Tree (also called the DOM tree)
&gt;&gt; [...]
&gt;&gt; We have moved ahead with development (though have not yet finished it) and
&gt;&gt; are (hopefully) very close to a working prototype. I was wondering if there
&gt;&gt; was feedback on this method
&gt; 
&gt; Neat stuff!
&gt; 
&gt; (1)
&gt; Looking at the DOM tree reminds me of Micah's paper from a few years back:
&gt; "Validating Web Content with Senser"
&gt; https://security.cs.georgetown.edu/~msherr/pubs.php
&gt; 
&gt; and (2)
&gt; Be sure to check out the recent papers by the Berkeley group on this
&gt; area, e.g.  the "do you see what I see" paper and more recent ones:
&gt; https://www1.icsi.berkeley.edu/~sadia/
&gt; 
&gt; --Roger
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


-- 

Allen Gunn
Executive Director, Aspiration
www.aspirationtech.org

Aspiration: "Better Tools for a Better World"

Read our Manifesto: https://aspirationtech.org/publications/manifesto

Twitter:  www.twitter.com/aspirationtech


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190305020326</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-03-05 02:03:26-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

On 3/4/19, Kevin Gallagher &lt;kcg295@nyu.edu&gt; wrote:
&gt; Recently I've been
&gt; working on creating a "Tor Friendliness Scanner" (TFS), or a scanner
&gt; that will measure what features of a given website are broken
&gt; (non-functional) when accessed on the Tor Browser (TB), along with
&gt; actionable suggestions to improve it.

You may be interested in this coupled pair of projects that
may be studying a similar question from a different perspective.
Note their needs list which might include integrating elements
of your platform, OONI, etc.

https://trac.torproject.org/projects/tor/wiki/org/projects/DontBlockMe
https://trac.torproject.org/projects/tor/wiki/org/projects/WeSupportTor

&gt; In order to do this, we first must
&gt; get an approximation of ground-truth data of how a given website should
&gt; work. We then need to compare it to how the website works on the TB to
&gt; determine any changes.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190305082800</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-03-05 08:28:00-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi!

Kevin Gallagher:
&gt; Hello tor-dev!
&gt; 
&gt; My name is Kevin and I'm a PhD student at NYU. Recently I've been
&gt; working on creating a "Tor Friendliness Scanner" (TFS), or a scanner
&gt; that will measure what features of a given website are broken
&gt; (non-functional) when accessed on the Tor Browser (TB), along with
&gt; actionable suggestions to improve it. In order to do this, we first must
&gt; get an approximation of ground-truth data of how a given website should
&gt; work. We then need to compare it to how the website works on the TB to
&gt; determine any changes.
&gt; 
&gt; To generate a method of determining ground-truth, we decided to modify*
&gt; the Firefox (FF) browser to log all of the steps of the creation of the
&gt; Content Tree (also called the DOM tree), and to log the execution of all
&gt; JavaScript functions (currently underway). We then will apply these
&gt; changes to the TB as well, and run a scan of popular Web sites using the
&gt; modified FF and the modified TB on all three of the TB security slider
&gt; settings. We will then compare the resulting logs to determine where the
&gt; tree creation processes differed* and why. 

What are your criteria for saying "this is broken in Tor Browser" vs.
"this is just rendered slightly different in Tor Browser"? For instance
I suspect that you'd even get different ground-truths depending on the
major Firefox version you use (like Firefox 65 vs. Firefox 60 ESR), yet
you would hardly say "This is okay in Firefox 65 but broken in Firefox
60 ESR". Or maybe there *are* cases where you would say so? What I am
saying is: mapping the creation of the DOM tree and logging JS execution
might be a good means for you goal (I am not sure yet) but it does not
seem to be sufficient to reach it.

Secondly, I am wondering how you plan to deal with the fact that
websites show different content if the logic behind them assumes you
come from a different country/region. How does that get incorporated
into your ground-truth, for example?

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190316212936</emailId><senderName>Kevin Gallagher</senderName><senderEmail>kcg295@nyu.edu</senderEmail><timestampReceived>2019-03-16 21:29:36-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

Hello everyone!

Thanks for the feedback! Please see my inline comments.

Santiago:

 &gt; I wonder if you could share a link to the source code for people to give
 &gt; you feedback/audit or implement fixes/features themselves.

I will be posting the source code once I'm a little further along.

Roger:

 &gt; (1)
 &gt; Looking at the DOM tree reminds me of Micah's paper from a few years 
back:
 &gt; "Validating Web Content with Senser"
 &gt; https://security.cs.georgetown.edu/~msherr/pubs.php

This is very interesting! Earlier on I had considered using Merkle Trees 
for this project as well, but we are currently looking at other, more 
suitable options.

Roger:

 &gt; and (2)
 &gt; Be sure to check out the recent papers by the Berkeley group on this
 &gt; area, e.g.   the "do you see what I see" paper and more recent ones:
 &gt; https://www1.icsi.berkeley.edu/~sadia/

Yes, I have read many of these! The "Do you see what I see" paper was 
definitely one of the inspirations for this, as well as some results of 
my previous work.

Gunner:

 &gt; It may or may not be of any use, but here is a content from an etherpad
 &gt; that a number of Tor folks worked on a while back regarding 'tor
 &gt; friendly sites"

Thanks for sending this! The results of this project will definitely 
supplement this etherpad with things that we find are broken "in the 
wild," either as a foreseen result of the design choices of the Tor 
Browser or by unforeseen consequence.

grarpamp:

 &gt; You may be interested in this coupled pair of projects that
 &gt; may be studying a similar question from a different perspective.
 &gt; Note their needs list which might include integrating elements
 &gt; of your platform, OONI, etc.

Thanks for bringing these to our attention! These are certainly 
interesting projects that I think could benefit from the findings of our 
work, when we get there. We may be able to supplement the lists that are 
already built up with more information of services that don't outright 
block Tor, but make it difficult to anonymously use their Web service by 
relying on functionality that is dangerous to anonymity and blocked on 
Tor Browser.

Georg:

 &gt; What are your criteria for saying "this is broken in Tor Browser" vs.
 &gt; "this is just rendered slightly different in Tor Browser"? For instance
 &gt; I suspect that you'd even get different ground-truths depending on the
 &gt; major Firefox version you use (like Firefox 65 vs. Firefox 60 ESR), yet
 &gt; you would hardly say "This is okay in Firefox 65 but broken in Firefox
 &gt; 60 ESR". Or maybe there *are* cases where you would say so? What I am
 &gt; saying is: mapping the creation of the DOM tree and logging JS execution
 &gt; might be a good means for you goal (I am not sure yet) but it does not
 &gt; seem to be sufficient to reach it.

There is some legitimate concern here, and the reason that my e-mail has 
been so late is because I've been considering this. The main observation 
here is that, as far as I know, the Tor Browser is a modification of a 
Firefox ESR, not an entirely stand-alone browser. The goal, then, is to 
take as ground truth the closest version of Firefox that we can.

The Tor Browser starts as a Firefox ESR release and then has changes 
applied to it (patches, extensions, etc). If we use the FF ESR release 
associated with the most current TB, then we can count that as "ground 
truth," since the comparison should isolate to only the changes made to 
FF to turn it into TTB.

Georg:

 &gt; Secondly, I am wondering how you plan to deal with the fact that
 &gt; websites show different content if the logic behind them assumes you
 &gt; come from a different country/region. How does that get incorporated
 &gt; into your ground-truth, for example?

The way we intended to do this was to send our FF "ground-truth" 
collection through Tor, and specifically through the same exit node as 
TTB uses. This way we can isolate the variable to the differences in the 
browsers, rather than any network or other concerns. In addition, we are 
working on developing a method for determining if content is dynamically 
generated (and therefore different every time), or broken.

I hope this addressed all concerns, and if not, or if there is more 
feedback, please let me know!

Thanks,

Kevin

-- 
Kevin Gallagher
Ph.D. Candidate
Center For Cybersecurity
NYU Tandon School of Engineering
Key Fingerprint: D02B 25CB 0F7D E276 06C3  BF08 53E4 C50F 8247 4861

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190316220457</emailId><senderName>Ryan Duff</senderName><senderEmail>ry@nduff.com</senderEmail><timestampReceived>2019-03-16 22:04:57-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Kevin,

Really interesting project!

The way we intended to do this was to send our FF "ground-truth"
&gt; collection through Tor, and specifically through the same exit node as
&gt; TTB uses. This way we can isolate the variable to the differences in the
&gt; browsers, rather than any network or other concerns. In addition, we are
&gt; working on developing a method for determining if content is dynamically
&gt; generated (and therefore different every time), or broken.
&gt;

Won't this severely taint your "ground-truth" though? If you're ultimately
using the exit-node for both, then you'll really only end up measuring what
is friendly to the Tor Browser itself instead of Tor overall. Is that the
goal?

If not, with direct access to an exit node, you could run the test direct
from that node (not using Tor) for the "ground truth" and then use it as
the exit node of choice for the Tor Browser to have a solid comparison
between Tor vs Not-Tor.

I look forward to seeing this come together!

-Ryan

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi Kevin,&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Really interesting \
project!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;The way we intended to do this was to send our FF \
"ground-truth" &lt;br&gt; collection through Tor, and specifically through the \
same exit node as &lt;br&gt; TTB uses. This way we can isolate the variable to the \
differences in the &lt;br&gt; browsers, rather than any network or other concerns. In \
addition, we are &lt;br&gt; working on developing a method for determining if content is \
dynamically &lt;br&gt; generated (and therefore different every time), or \
broken.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;  &lt;/div&gt;&lt;div&gt;Won't this severely taint your \
"ground-truth" though? If you're ultimately using the exit-node for \
both, then you'll really only end up measuring what is friendly to the Tor \
Browser itself instead of Tor overall. Is that the goal?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If \
not, with direct access to an exit node, you could run the test direct from that node \
(not using Tor) for the "ground truth" and then use it as the exit node of \
choice for the Tor Browser to have a solid comparison between Tor vs \
Not-Tor.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I look forward to seeing this come \
together!&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Ryan&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190317233941</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-03-17 23:39:41-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 17 Mar 2019, at 08:04, Ryan Duff &lt;ry@nduff.com&gt; wrote:
&gt; 
&gt; &gt; The way we intended to do this was to send our FF "ground-truth"
&gt; &gt; collection through Tor, and specifically through the same exit node as
&gt; &gt; TTB uses. This way we can isolate the variable to the differences in the
&gt; &gt; browsers, rather than any network or other concerns. In addition, we are
&gt; &gt; working on developing a method for determining if content is dynamically
&gt; &gt; generated (and therefore different every time), or broken.
&gt; 
&gt; Won't this severely taint your "ground-truth" though? If you're ultimately using \
&gt; the exit-node for both, then you'll really only end up measuring what is friendly \
&gt; to the Tor Browser itself instead of Tor overall. Is that the goal? 
&gt; If not, with direct access to an exit node, you could run the test direct from that \
&gt; node (not using Tor) for the "ground truth" and then use it as the exit node of \
&gt; choice for the Tor Browser to have a solid comparison between Tor vs Not-Tor.

Most sites block by IP (or IP range), so a direct connection using the
exit node's IP should give you very similar results to a Tor circuit
using the exit node's IP.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlyO2r4ACgkQEP6qDnB1
ZyqNQw//daasz1zRYEe/OSIU6X/dbVzA2GzlVKMl/KYKXykmaH1hsqhTOMB6LgnC
agFXJ3DA0g8fAIm4K/5O/vCl+VlqLMNcOpGF8UjGDmK8TVA30x4fioDhVs47juam
8CBEdZtXG+iWXGubvuSlumGgrBxxIZUvmpZMor0nNa00daLMoD25TQx8tc011ueX
LjYYJucFs0HIrKeZlXapZR1bnjXpVrK6CBieup89Akry0lHQxWcKpv0tuCfRF5Bl
UeO4DOnsMNjCDcqsOICymPY+RESeqHHGGZ54R6f1OsE0RB5C0Gc2a90I/GbUm1T5
NThqU9mrB/yhUwxDpfuWoUfaAfBKJOdGoaCvpSYT8+VOtEOommuBglBsU24a2F65
TJARPdRrxHMgp+fD+TyW4PVwkfdGWOpDEGLeY1EyzghxGX8WvBMDKdETfccrL0x/
XBRZ9eeynA4eSMMe+arneuKp+CJ3iXp1gIQ7EA9xqt448kxD/8NimJH/hlLPBfJ0
N56Li1mPOhVr65ZqQs+7y9d/QfdirE1eR7Gc8U7CcD/F0zq4OjujMbQi5AsUbGQB
UHmXOHcYWYr+KaK2cJdCMVj+UAuYgRpA6Q9MqS9hGBR/H7ivPxgKe3yfePkjxtVA
MZHldIMddSPTHjlukXZPNsDAb03MT2QNYQbk1IEGUzr2mzRzluQ=
=6993
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190318001839</emailId><senderName>Ryan Duff</senderName><senderEmail>ry@nduff.com</senderEmail><timestampReceived>2019-03-18 00:18:39-0400</timestampReceived><subject>Re: [tor-dev] Tor Friendliness Scanner</subject><body>

[Attachment #2 (multipart/alternative)]


Hi again,

On Sun, Mar 17, 2019 at 7:40 PM teor &lt;teor@riseup.net&gt; wrote:

&gt;
&gt; Most sites block by IP (or IP range), so a direct connection using the
&gt; exit node's IP should give you very similar results to a Tor circuit
&gt; using the exit node's IP.
&gt;

Thanks teor! The point still stand though even though my solution to it is
flawed. The thing being measured will be friendliness towards the Tor
Browser instead of Tor overall. Basically, the measurement will be
"friendly to Tor but not the Tor Browser". If that's the intent, then there
is no real issue. I don't know how many sites will render for a Tor exit
node but also only have issues with the Tor Browser itself but I'm
definitely interested in seeing that data.

-Ryan

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi again,&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;On Sun, Mar 17, 2019 at 7:40 PM teor &lt;&lt;a \
href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;br&gt; Most sites block by IP (or IP range), so a \
direct connection using the&lt;br&gt; exit node's IP should give you very similar \
results to a Tor circuit&lt;br&gt; using the exit node's \
IP.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks teor! The point still stand though \
even though my solution to it is flawed. The thing being measured will be \
friendliness towards the Tor Browser instead of Tor overall. Basically, the \
measurement will be "friendly to Tor but not the Tor Browser". If \
that's the intent, then there is no real issue. I don't know how many sites \
will render for a Tor exit node but also only have issues with the Tor Browser itself \
but I'm definitely interested in seeing that \
data.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Ryan&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190204235244</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2019-02-04 23:52:44-0400</timestampReceived><subject>[tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Dear Tor Developers,

Whonix is applying to be a Google Summer of Code organization this year.
I am writing on behalf of Whonix to ask if the Tor project could be a
voucher for Whonix. Specifically, in the application form, it asks:

&gt; If you are a new organization to GSoC, is there a Google employee 
&gt; or previously participating organization who will vouch for you? If
&gt; so, please enter their name, contact email, and relationship to
&gt; your organization.

Whonix community would be really appreciated if Tor can be our voucher
this year. And please feel free to contact me to provide the information
described above anytime before the deadline (February 6, 2019 at 20:00
UTC).

Thank you very much!

Cheers,
iry
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlxY0EMACgkQoUtNvG3N
1TwY/A//SawazcU4EosRFRkF8YJSz3LsRor820uF+X/QovEi5J8EJGaXBgO+Dp+Q
Ryi/LzmdGwIWfmWJKk+kWpzfIROYkmNWS6xzz+iwZEYvxvJ2QH5twlAWKDWSwFHm
kz7/6AhWnoq+GnsBF+Eg0jNcxSQGLum89Ul4Y3kll4PYriqpDxzQblYt7qzffJJu
UJdh9Y5SkSRyX0HThuRgMtCs1l9z7BEY0tkLbUm1pRcU8KuomTy4f1L45T49h7ub
rfDc4AOBcA8wtX3CF/1oR0AmRo5YvwD9rMNsk4f+bHphdn07iOcwF5kGi6TxA8Va
fLUflN0cIPnk62RmQPebkHSjcyWi74z4rxe2j7trmiDyN2DI3D7wLxNQPYRzO5/H
4YodMAgUkhNluDmJ0Hewq6e3q9js5/6ks1vTGbJjzTW+le2+MOiSiJeZgQYfdF1d
Fu7Yf3h6HmIs9zg9zv9qf7CUSizBQVqGqnSUVVyMSsSE5xtX0Enri15PodkMac5C
87m5JDJIuf6HdsCiJ+cXQsCOoTCVz1rFxUMmH3URIOJQX6POZlYjZ4yir1TVc1Uj
OkjvsUO89YbnmBpnTJe/0KGS+OjXI+NE3iQfV5d6hIoruqVuIMzL6/O/1Q4onviu
oFiCp/ilBtDm8lRlXAbKAIKibYPSAPhoO4xN9jI1NIPoWouwusk=
=xX5B
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190206182100</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-02-06 18:21:00-0400</timestampReceived><subject>[tor-dev] anti-censorship weekly meeting</subject><body>

Hi!

Sending a reminder that we are having our weekly meeting for the
anti-censorship work on Thursday 20:00 UTC on #tor-meeting at OFTC.

The meeting pad is here: https://pad.riseup.net/p/tor-censorship-2019-keep

cheers,
gaba

-- 
Project Manager - Network, Metrics and Anti-censorship Teams
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190206002640</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-02-06 00:26:40-0400</timestampReceived><subject>[tor-dev] Proposal 299: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi tor-dev@ mailing list,

First off, thank you to Nick for making this an official proposal and thank you again \
for marking it as open. I really appreciate this. Also, thank you teor for aiding me \
on my first proposal.

My proposal is available on torspec here: \
https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt

Now that my proposal "Preferring IPv4 or IPv6 based on IP Version Failure Count" is \
Open, I would really appreciate your opinions on this. Is it good, bad? Could it have \
any improvements?

Best,

Neel Chauhan

===

https://www.neelc.org
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190206044023</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-06 04:40:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 299: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi Neel,

Thanks for your initial draft code, and this proposal.


On February 6, 2019 12:26:40 AM UTC, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; First off, thank you to Nick for making this an official proposal and
&gt; thank you again for marking it as open. I really appreciate this. Also,
&gt; thank you teor for aiding me on my first proposal.
&gt; 
&gt; My proposal is available on torspec here:
&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt
&gt; 
&gt; Now that my proposal "Preferring IPv4 or IPv6 based on IP Version
&gt; Failure Count" is Open, I would really appreciate your opinions on
&gt; this. Is it good, bad? Could it have any improvements?

I think this proposal is good for an experimental option. We could develop and merge \
the code, but not turn it on by default. Then we could do some testing to tune the \
design.

Here's one thing we must fix before we start implementing this proposal:

We don't store connection statistics on Tor clients right now.  This proposal would \
make us store these statistics.

The connection count from 3 sessions (Tor launches? Days?) ago doesn't tell us much \
about the current network state. But it's really bad for user privacy.

So how often should we forget?

Remember: many users only wait 10 seconds for a web browser page to load. Most Tor \
Browser users are more patient, but they still give up after 30 seconds or a few \
minutes. So we don't want to leave them hanging for long after a network change.

Here's a quick way to forget old connections, while retaining an approximate history: \
regularly divide both counters by two. We can check if we want to do the division \
when we add a new failure.

If the division takes us down to zero, we can re-initialise (see 1.).

Or maybe we should just store the last summarised failure point value (SFPV) in the \
state file?

Here are some questions we need to answer before we turn it on by default:

0. Are N/8 fractions a good choice?
While bootstrapping, Tor makes up to 7 connections in the first 30 seconds. But if a \
connection hangs, Tor only allows 3 concurrent connections (see 3.). So N/8 is \
probably too low?

Maybe we should consider a larger fraction (for example, N/4). But there's a design \
                tradeoff here:
* failing 1/4 connections wastes bandwidth, but web browsers with happy eyeballs fail \
                up to 50%, so it can't be that bad
* failing 1/4 connections may trigger path bias warnings (see 3.)
* trying 1/4 of each IP version makes starting up and changing networks faster for \
                users
* trying 1/4 of each IP version limits our ability to load-balance across IP families

Let's try N/4, and see how it goes?
Even if we guess wrong, we still want Tor to work.

1. What is the starting SFPV?

I suggest that we use the number of IPv4 and IPv6-capable entry nodes to calculate \
the initial SFPV.

For standard clients:
* during initial bootstrap: count fallback directory mirrors
* once the initial consensus is received: count guards in the consensus
For bridge clients:
* count configured bridges.
That way, new clients are automatically load-balanced across IPv4 and IPv6. (We \
shouldn't add the actual number of guards to the counters: that would swamp the first \
few thousand connection failures.)

If we have a recent connection history, we don't need to update the counters when the \
consensus or bridge config changes. But if we are hibernating or dormant, we should \
use the entry nodes to seed the SFPV.

2. When switching between IPv4-only and IPv6-only networks, the circuit failure rate \
could start as high as 87.5% (7/8), then approach 12.5% (1/8). Depending on the \
historical number of connections, the failure rate could stay at 7/8 for quite some \
time.

Switching to N/4 makes the range 3/4 to 1/4, which is good right after switching, but \
bad long-term.

What does the pathbias code do when this many failures happen? We could make pathbias \
smarter: for example, it could ignore or scale down "no route", or add 1/4 to its \
threshold when ClientAutoIPv6ORPort is in use.

3. What happens on a network which drops IPv4 or IPv6 packets?
Tor only makes 3 simultaneous connections, and if they are all the same protocol, Tor \
will wait for 2 minutes for the connections to timeout.

The Happy Eyeballs RFC:
https://tools.ietf.org/html/rfc8305
avoids this issue by making concurrent IPv4 and IPv6 connections.

Tor could make concurrent connections, or just keep the sequential connection code.

Either way, we should increase the connection limit. But increasing the connection \
                limit increases the DoS risk. We can limit the risk in two ways:
* make the limit higher for pending connections, but keep the connection limit at 3 \
for connections that have successfully opened TCP (before they do an expensive TLS \
                handshake)
* make a separate connection limit for IPv4 and IPv6
I don't know which change is easier. Perhaps both would be useful.

4. Do we want to count successful connections?
If we know that an IP version works, we should use it.
And if both work, we should use both, with the right load balancing (see 1.).

I hope that gives you some things to think about as we write, review, merge, and test \
this code.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205170250</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-02-05 17:02:50-0400</timestampReceived><subject>[tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

Filename: 300-walking-onions.txt
Title: Walking Onions: Scaling and Saving Bandwidth
Author: Nick Mathewson
Created: 5-Feb-2019
Status: Draft

0. Status

   This proposal describes a mechanism called "Walking Onions" for
   scaling the Tor network and reducing the amount of client bandwidth
   used to maintain a client's view of the Tor network.

   This is a draft proposal; there are problems left to be solved and
   questions left to be answered.  Once those parts are done, we can
   fill in section 4 with the final details of the design.

1. Introduction

   In the current Tor network design, we assume that every client has a
   complete view of all the relays in the network.  To achieve this,
   clients download consensus directories at regular intervals, and
   download descriptors for every relay listed in the directory.

   The substitution of microdescriptors for regular descriptors
   (proposal 158) and the use of consensus diffs (proposal 140) have
   lowered the bytes that clients must dedicate to directory operations.
   But we still face the problem that, if we force each client to know
   about every relay in the network, each client's directory traffic
   will grow linearly with the number of relays in the network.

   Another drawback in our current system is that client directory
   traffic is front-loaded: clients need to fetch an entire directory
   before they begin building circuits.  This places extra delays on
   clients, and extra load on the network.

   To anonymize the world, we will need to scale to a much larger number
   of relays and clients: requiring clients to know about every relay in
   the set simply won't scale, and requiring every new client to download
   a large document is also problematic.

   There are obvious responses here, and some other anonymity tools have
   taken them.  It's possible to have a client only use a fraction of
   the relays in a network--but doing so opens the client to _epistemic
   attacks_, in which the difference in clients' views of the
   network is used to partition their traffic.  It's also possible to
   move the problem of selecting relays from the client to the relays
   themselves, and let each relay select the next relay in turn--but
   this choice opens the client to _route capture attacks_, in which a
   malicious relay selects only other malicious relays.

   In this proposal, I'll describe a design for eliminating up-front
   client directory downloads.  Clients still choose relays at random,
   but without ever having to hold a list of all the relays. This design
   does not require clients to trust relays any more than they do today,
   or open clients to epistemic attacks.

   I hope to maintain feature parity with the current Tor design; I'll
   list the places in which I haven't figured out how to do so yet.

   I'm naming this design "walking onions".  The walking onion (Allium x
   proliferum) reproduces by growing tiny little bulbs at the
   end of a long stalk.  When the stalk gets too top-heavy, it flops
   over, and the little bulbs start growing somewhere new.

   The rest of this document will run as follows.  In section 2, I'll
   explain the ideas behind the "walking onions" design, and how they
   can eliminate the need for regular directory downloads.  In section 3, I'll
   answer a number of follow-up questions that arise, and explain how to
   keep various features in Tor working.  Section 4 (not yet written)
   will elaborate all the details needed to turn this proposal into a
   concrete set of specification changes.

2. Overview

2.1. Recapping proposal 141

   Back in Proposal 141 ("Download server descriptors on demand"), Peter
   Palfrader proposed an idea for eliminating ahead-of-time descriptor
   downloads.  Instead of fetching all the descriptors in advance, a
   client would fetch the descriptor for each relay in its path right
   before extending the circuit to that relay.  For example, if a client
   has a circuit from A-&gt;B and wants to extend the circuit to C, the
   client asks B for C's descriptor, and then extends the circuit to C.

   (Note that the client needs to fetch the descriptor every time it
   extends the circuit, so that an observer can't tell whether the
   client already had the descriptor or not.)

   There are a couple of limitations for this design:
      * It still requires clients to download a consensus.
      * It introduces a extra round-trip to each hop of the circuit
        extension process.

   I'll show how to solve these problems in the two sections below.

2.2. An observation about the ntor handshake.

   I'll start with an observation about our current circuit extension
   handshake, ntor: it should not actually be necessary to know a
   relay's onion key before extending to it.

   Right now, the client sends:
         NODEID     (The relay's identity)
         KEYID      (The relay's public onion key)
         CLIENT_PK  (a diffie-hellman public key)

   and the relay responds with:
         SERVER_PK  (a diffie-hellman public key)
         AUTH       (a function of the relay's private keys and
                     *all* of the public keys.)

   Both parties generate shared symmetric keys from the same inputs
   that are are used to create the AUTH value.

   The important insight here is that we could easily change
   this handshake so that the client sends only CLIENT_PK, and receives
   NODEID and KEYID as part of the response.

   In other words, the client needs to know the relay's onion key to
   _complete_ the handshake, but doesn't actually need to know the
   relay's onion key in order to _initiate_ the handshake.

   This is the insight that will let us save a round trip:  When the
   client goes to extend a circuit from A-&gt;B to C, it can send B a
   request to extend to C and retrieve C's descriptor in a single step.
   Specifically, the client sends only CLIENT_PK, and relay B can include C's
   keys as part of the EXTENDED cell.

2.3. Extending by certified index

   Now I'll explain how the client can avoid having to download a
   list of relays entirely.

   First, let's look at how a client chooses a random relay today.
   First, the client puts all of the relays in a list, and computes a
   weighted bandwidth for each one. For example, suppose the relay
   identities are R1, R2, R3, R4, and R5, and their bandwidth weights
   are 50, 40, 30, 20, and 10.  The client makes a table like this:

      Relay   Weight     Range of index values
      R1      50         0..49
      R2      40         50..89
      R3      30         90..119
      R4      20         120..139
      R5      10         140..149

   To choose a random relay, the client picks a random index value
   between 0 and 149 inclusive, and looks up the corresponding relay in
   the table.  For example, if the client's random number is 77, it will
   choose R2.  If its random number is 137, it chooses R4.

   The key observation for the "walking onions" design is that the
   client doesn't actually need to construct this table itself.
   Instead, we will have this table be constructed by the authorities
   and distributed to all the relays.

   Here's how it works: let's have the authorities make a new kind of
   consensus-like thing.  We'll call it an Efficient Network Directory
   with Individually Verifiable Entries, or "ENDIVE" for short.  This
   will differ from the client's index table above in two ways.  First,
   every entry in the ENDIVE is normalized so that the bandwidth
   weights maximum index is 2^32-1:

       Relay      Normalized weight    Range of index values
       R1         0x55555546           0x00000000..0x55555545
       R2         0x44444438           0x55555546..0x9999997d
       R3         0x3333332a           0x9999997e..0xcccccca7
       R4         0x2222221c           0xcccccca8..0xeeeeeec3
       R5         0x1111113c           0xeeeeeec4..0xffffffff

   Second, every entry in the ENDIVE is timestamped and signed by the
   authorities independently, so that when a client sees a line from the
   table above, it can verify that it came from an authentic ENDIVE.
   When a client has chosen a random index, one of these entries will
   prove to the client that a given relay corresponds to that index.
   Because of this property, we'll be calling these entries "Separable
   Network Index Proofs", or "SNIP"s for short.

   For example, a single SNIP from the table above might consist of:
     * A range of times during which this SNIP is valid
     * R1's identity
     * R1's ntor onion key
     * R1's address
     * The index range 0x00000000..0x55555545
     * A signature of all of the above, by a number of authorities

   Let's put it together. Suppose that the client has a circuit from
   A-&gt;B, and it wants to extend to a random relay, chosen randomly
   weighted by bandwidth.

   1. The client picks a random index value between 0 and 2**32 - 1.  It
      sends that index to relay B in its EXTEND cell, along with a
      g^x value for the ntor handshake.

      Note: the client doesn't send an address or identity for the next
      relay, since it doesn't know what relay it has chosen!  (The
      combination of an index and a g^x value is what I'm calling a
      "walking onion".)

   2. Now, relay B looks up the index in its most recent ENDIVE, to
      learn which relay the client selected.

      (For example, suppose that the client's random index value is
      0x50000001.  This index value falls between 0x00000000 and
      0x55555546 in the table above, so the relay B sees that the client
      has chosen R1 as its next hop.)

   3. Relay B sends a create cell to R1 as usual.  When it gets a
      CREATED reply, it includes the authority-signed SNIP for
      R1 as part of the EXTENDED cell.

   4. As part of verifying the handshake, the client verifies that the
      SNIP was signed by enough authorities, that its timestamp
      is recent enough, and that it actually corresponds to the
      random index that the client selected.

   Notice the properties we have with this design:

       - Clients can extend circuits without having a list of all the
         relays.

       - Because the client's random index needs to match a routing
         entry signed by the authorities, the client is still selecting
         a relay randomly by weight.  A hostile relay cannot choose
         which relay to send the client.


   On a failure to extend, a relay should still report the routing entry
   for the other relay that it couldn't connect to.  As before, a client
   will start a new circuit if a partially constructed circuit is a
   partial failure.


   We could achieve a reliability/security tradeoff by letting clients
   offer the relay a choice of two or more indices to extend to.
   This would help reliability, but give the relay more influence over
   the path.  We'd need to analyze this impact.


   In the next section, I'll discuss a bunch of details that we need to
   straighten out in order to make this design work.


3. Sorting out the details.

3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?

   The EXTEND2 cell is probably big enough for this design.  The random
   index that the client sends can be a new "link specifier" type,
   replacing the IP and identity link specifiers.

   The EXTENDED2 cell is likely to need to grow here.  We'll need to
   implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
   handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.

3.2. How should SNIPs be signed?

   We have a few options, and I'd like to look into the possibilities
   here more closely.

   The simplest possibility is to use **multiple signatures** on each
   SNIP, the way we do today for consensuses.  These signatures should
   be made using medium-term Ed25519 keys from the authorities.  At a
   cost of 64 bytes per signature, at 9 authorities, we would need 576
   bytes for each SNIP.  These signatures could be batch-verified to
   save time at the client side.  Since generating a signature takes
   around 20 usec on my mediocre laptop, authorities should be able to
   generate this many signatures fairly easily.

   Another possibility is to use a **threshold signature** on each SNIP,
   so that the authorities collaboratively generate a short signature
   that the clients can verify.  There are multiple threshold signature
   schemes that we could consider here, though I haven't yet found one
   that looks perfect.

   Another possibility is to use organize the SNIPs in a **merkle tree
   with a signed root**.  For this design, clients could download the
   signed root periodically, and receive the hash-path from the signed
   root to the SNIP.  This design might help with
   certificate-transparency-style designs, and it would be necessary if we
   ever want to move to a postquantum signature algorithm that requires
   large signatures.

   Another possibility (due to a conversation among Chelsea Komlo, Sajin
   Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
   kids are doing it!)  For this, we'd have the clients download a
   signed hash of the ENDIVE periodically, and have the authorities
   generate a SNARK for each SNIP, proving its presence in that
   document.

3.3. How can we detect authority misbehavior?

   We might want to take countermeasures against the possibility that a
   quorum of corrupt or compromised authorities give some relays a
   different set of SNIPs than they give other relays.

   If we incorporate a merkle tree or a hash chain in the design, we can
   use mechanisms similar to certificate transparency to ensure that the
   authorities have a consistent log of all the entries that they have
   ever handed out.

3.4. How many types of weighted node selection are there, and how do we
     handle them?

   Right now, there are multiple weights that we use in Tor:
      * Weight for exit
      * Weight for guard
      * Weight for middle node

   We also filter nodes for several properties, such as flags they have.

   To reproduce this behavior, we should enumerate the various weights
   and filters that we use, and (if there are not too many) create a
   separate index for each.  For example, the Guard index would weight
   every node for selection as guard, assigning 0 weight to non-Guard
   nodes.  The Exit index would weight every node for selection as an
   exit, assigning 0 weight to non-Exit nodes.

   When choosing a relay, the client would have to specify which index
   to use.  We could either have a separate (labeled) set of SNIPs
   entries for each index, or we could have each SNIP have a separate
   (labeled) index range for each index.

   REGRESSION: the client's choice of which index to use would leak the
   next router's position and purpose in the circuit.  This information
   is something that we believe relays can infer now, but it's not a
   desired feature that they can.

3.5. Does this design break onion service introduce handshakes?

   In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
   use in INTRODUCE2 handshakes.  It allows the client to send encrypted
   data as part of its initial ntor handshake, but requires the client
   to know the onion service's onion key before it sends its initial
   handshake.

   That won't be a problem for us here, though: we still require clients
   to fetch onion service descriptors before contacting a onion
   service.

3.6. How does the onion service directory work here?

   The onion service directory is implemented as a hash ring, where
   each relay's position in the hash ring is decided by a hash of its
   identity, the current date, and a shared random value that the
   authorities compute each day.

   To implement this hash ring using walking onions, we would need to
   have an extra index based not on bandwidth, but on position in the
   hash ring.  Then onion services and clients could build a circuit,
   then extend it one more hop specifying their desired index in the
   hash ring.

   We could either have a command to retrieve a trio of hashring-based
   routing entries by index, or to retrieve (or connect to?) the n'th item
   after a given hashring entry.

3.7. How can clients choose guard nodes?

   We can reuse the fallback directories here.  A newly bootstrapping
   client would connect to a fallback directory, then build a three-hop
   circuit, and finally extend the three-hop circuit by indexing to a
   random guard node.  The random guard node's SNIP would
   contain the information that the client needs to build real circuits
   through that guard in the future.  Because the client would be
   building a three-hop circuit, the fallback directory would not learn
   the client's guards.

   (Note that even if the extend attempt fails, we should still pick the
   node as a possible guard based on its router entry, so that other
   nodes can't veto our choice of guards.)

3.8. Does the walking onions design preclude postquantum circuit handshakes?

   Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
   by having the client generate an ephemeral key as part of its initial
   handshake.  The client does not need to know the relay's onion key to
   do this, so we can still integrate those proposals with this one.

3.9. Does the walking onions design stop us from changing the network
     topology?

   For Tor to continue to scale, we will someday need to accept that not
   every relay can be simultaneously connected to every other relay.
   Therefore, we will need to move from our current clique topology
   assumption to some other topology.

   There are also proposals to change node selection rules to generate
   routes providing better performance, or improved resistance to local
   adversaries.

   We can, I think, implement this kind of proposal by changing the way
   that ENDIVEs are generated.  Instead giving every relay the same
   ENDIVE, the authorities would generate different ENDIVEs for
   different relays, depending on the probability distribution of which
   relay should be chosen after which in the network topology.  In the
   extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
   practice, I hope that we could do better by having the network
   topology be non-clique, and by having many relays share the same
   distribution of successors.


3.10. How can clients handle exit policies?

   This is an unsolved challenge.  If the client tells the middle relay
   its target port, it leaks information inappropriately.

   One possibility is to try to gather exit policies into common
   categories, such as "most ports supported" and "most common ports
   supported".

   Another (inefficient) possibility is for clients to keep trying exits
   until they find one that works.

   Another (inefficient) possibility is to require that clients who use
   unusual ports fall back to the old mechanism for route selection.


3.11. Can this approach support families?

   This is an unsolved challenge.

   One (inefficient) possibility is for clients to generate circuits and
   discard those that use multiple relays in the same family.

   One (not quite compatible) possibility is for the authorities to sort
   the ENDIVE so that relays in the same family are adjacent to
   one another.  The index-bounds part of each SNIP would also
   have to include the bounds of the family.  This approach is not quite
   compatible with the status quo, because it prevents relays from
   belonging to more than one family.

   One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
   Ian Goldberg) is for the middle node to take responsibility for
   family enforcement. In this design, the client might offer the middle
   node multiple options for the next relay's index, and the middle node
   would choose the first such relay that is neither in its family nor
   its predecessor's family.  We'd need to look for a way to make sure
   that the middle node wasn't biasing the path selection.

   (TODO: come up with more ideas here.)

3.12. Can walking onions support IP-based and country-based restrictions?

   This is an unsolved challenge.

   If the user's restrictions do not exclude most paths, one
   (inefficient) possibility is for the user to generate paths until
   they generate one that they like.  This idea becomes inefficient
   if the user is excluding most paths.

   Another (inefficient and fingerprintable) possibility is to require
   that clients who use complex path restrictions fall back to the old
   mechanism for route selection.

   (TODO: come up with better ideas here.)

3.13. What scaling problems have we not solved with this design?

   The walking onions design doesn't solve (on its own) the problem that
   the authorities need to know about every relay, and arrange to have
   every relay tested.

   The walking onions design doesn't solve (on its own) the problem that
   relays need to have a list of all the relays.  (But see section 3.9
   above.)

3.14. Should we still have clients download a consensus when they're
      using walking onions?

   There are some fields in the current consensus directory documents
   that the clients will still need, like the list of supported
   protocols and network parameters.  A client that uses walking onions
   should download a new flavor of consensus document that contains only
   these fields, and does not list any relays.  In some signature
   schemes, this consensus would contain a digest of the ENDIVE -- see
   3.2 above.

   (Note that this document would be a "consensus document" but not a
   "consensus directory", since it doesn't list any relays.)


4. Putting it all together

   [This is the section where, in a later version of this proposal, I
   would specify the exact behavior and data formats to be used here.
   Right now, I'd say we're too early in the design phase.]


A.1. Acknowledgments

   Thanks to Peter Palfrader for his original design in proposal 141,
   and to the designers of PIR-Tor, both of which inspired aspects of
   this Walking Onions design.

   Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
   an earlier version of this design.

   Thanks to David Goulet, Teor, and George Kadianakis for commentary on
   earlier versions of this draft.

A.2. Additional ideas

   Teor notes that there are ways to try to get this idea to apply to
   one-pass circuit construction, something like the old onion design.
   We might be able to derive indices and keys from the same seeds,
   even.  I don't see a way to do this without losing forward secrecy,
   but it might be worth looking at harder.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190205174219</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-02-05 17:42:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


I'm very happy to see this proposal! Two quick questions about relay
selection:

* Can a client specify that it wants an exit node whose policy allows
something unusual, e.g. exiting to a port that's not allowed by the
default policy? If not, does the client need to keep picking exit nodes
until it gets a SNIP with a suitable policy?

* Similarly, if a client has restrictions on the guard nodes it can
connect to (fascist firewall or IPv4/v6 restrictions, for example), does
it need to keep picking guards via the directory fallback circuit until
it gets a suitable one?

In both cases, perhaps a client with unusual requirements could first
download the consensus, find a relay matching its requirements, then
send that relay's index in its extend cell, so the relay receiving the
extend cell wouldn't know whether the index was picked randomly by a
client with no special requirements, or non-randomly by a client with
special requirements?

I think this would allow the majority of clients to save bandwidth by
not downloading the consensus, without allowing relays to distinguish
the minority of clients with unusual exit/guard requirements. (The
presence of the full consensus on disk would indicate that the client
had unusual exit/guard requirements at some point, however.)

Cheers,
Michael

On 05/02/2019 17:02, Nick Mathewson wrote:
&gt; Filename: 300-walking-onions.txt
&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt; Author: Nick Mathewson
&gt; Created: 5-Feb-2019
&gt; Status: Draft
&gt; 
&gt; 0. Status
&gt; 
&gt;    This proposal describes a mechanism called "Walking Onions" for
&gt;    scaling the Tor network and reducing the amount of client bandwidth
&gt;    used to maintain a client's view of the Tor network.
&gt; 
&gt;    This is a draft proposal; there are problems left to be solved and
&gt;    questions left to be answered.  Once those parts are done, we can
&gt;    fill in section 4 with the final details of the design.
&gt; 
&gt; 1. Introduction
&gt; 
&gt;    In the current Tor network design, we assume that every client has a
&gt;    complete view of all the relays in the network.  To achieve this,
&gt;    clients download consensus directories at regular intervals, and
&gt;    download descriptors for every relay listed in the directory.
&gt; 
&gt;    The substitution of microdescriptors for regular descriptors
&gt;    (proposal 158) and the use of consensus diffs (proposal 140) have
&gt;    lowered the bytes that clients must dedicate to directory operations.
&gt;    But we still face the problem that, if we force each client to know
&gt;    about every relay in the network, each client's directory traffic
&gt;    will grow linearly with the number of relays in the network.
&gt; 
&gt;    Another drawback in our current system is that client directory
&gt;    traffic is front-loaded: clients need to fetch an entire directory
&gt;    before they begin building circuits.  This places extra delays on
&gt;    clients, and extra load on the network.
&gt; 
&gt;    To anonymize the world, we will need to scale to a much larger number
&gt;    of relays and clients: requiring clients to know about every relay in
&gt;    the set simply won't scale, and requiring every new client to download
&gt;    a large document is also problematic.
&gt; 
&gt;    There are obvious responses here, and some other anonymity tools have
&gt;    taken them.  It's possible to have a client only use a fraction of
&gt;    the relays in a network--but doing so opens the client to _epistemic
&gt;    attacks_, in which the difference in clients' views of the
&gt;    network is used to partition their traffic.  It's also possible to
&gt;    move the problem of selecting relays from the client to the relays
&gt;    themselves, and let each relay select the next relay in turn--but
&gt;    this choice opens the client to _route capture attacks_, in which a
&gt;    malicious relay selects only other malicious relays.
&gt; 
&gt;    In this proposal, I'll describe a design for eliminating up-front
&gt;    client directory downloads.  Clients still choose relays at random,
&gt;    but without ever having to hold a list of all the relays. This design
&gt;    does not require clients to trust relays any more than they do today,
&gt;    or open clients to epistemic attacks.
&gt; 
&gt;    I hope to maintain feature parity with the current Tor design; I'll
&gt;    list the places in which I haven't figured out how to do so yet.
&gt; 
&gt;    I'm naming this design "walking onions".  The walking onion (Allium x
&gt;    proliferum) reproduces by growing tiny little bulbs at the
&gt;    end of a long stalk.  When the stalk gets too top-heavy, it flops
&gt;    over, and the little bulbs start growing somewhere new.
&gt; 
&gt;    The rest of this document will run as follows.  In section 2, I'll
&gt;    explain the ideas behind the "walking onions" design, and how they
&gt;    can eliminate the need for regular directory downloads.  In section 3, I'll
&gt;    answer a number of follow-up questions that arise, and explain how to
&gt;    keep various features in Tor working.  Section 4 (not yet written)
&gt;    will elaborate all the details needed to turn this proposal into a
&gt;    concrete set of specification changes.
&gt; 
&gt; 2. Overview
&gt; 
&gt; 2.1. Recapping proposal 141
&gt; 
&gt;    Back in Proposal 141 ("Download server descriptors on demand"), Peter
&gt;    Palfrader proposed an idea for eliminating ahead-of-time descriptor
&gt;    downloads.  Instead of fetching all the descriptors in advance, a
&gt;    client would fetch the descriptor for each relay in its path right
&gt;    before extending the circuit to that relay.  For example, if a client
&gt;    has a circuit from A-&gt;B and wants to extend the circuit to C, the
&gt;    client asks B for C's descriptor, and then extends the circuit to C.
&gt; 
&gt;    (Note that the client needs to fetch the descriptor every time it
&gt;    extends the circuit, so that an observer can't tell whether the
&gt;    client already had the descriptor or not.)
&gt; 
&gt;    There are a couple of limitations for this design:
&gt;       * It still requires clients to download a consensus.
&gt;       * It introduces a extra round-trip to each hop of the circuit
&gt;         extension process.
&gt; 
&gt;    I'll show how to solve these problems in the two sections below.
&gt; 
&gt; 2.2. An observation about the ntor handshake.
&gt; 
&gt;    I'll start with an observation about our current circuit extension
&gt;    handshake, ntor: it should not actually be necessary to know a
&gt;    relay's onion key before extending to it.
&gt; 
&gt;    Right now, the client sends:
&gt;          NODEID     (The relay's identity)
&gt;          KEYID      (The relay's public onion key)
&gt;          CLIENT_PK  (a diffie-hellman public key)
&gt; 
&gt;    and the relay responds with:
&gt;          SERVER_PK  (a diffie-hellman public key)
&gt;          AUTH       (a function of the relay's private keys and
&gt;                      *all* of the public keys.)
&gt; 
&gt;    Both parties generate shared symmetric keys from the same inputs
&gt;    that are are used to create the AUTH value.
&gt; 
&gt;    The important insight here is that we could easily change
&gt;    this handshake so that the client sends only CLIENT_PK, and receives
&gt;    NODEID and KEYID as part of the response.
&gt; 
&gt;    In other words, the client needs to know the relay's onion key to
&gt;    _complete_ the handshake, but doesn't actually need to know the
&gt;    relay's onion key in order to _initiate_ the handshake.
&gt; 
&gt;    This is the insight that will let us save a round trip:  When the
&gt;    client goes to extend a circuit from A-&gt;B to C, it can send B a
&gt;    request to extend to C and retrieve C's descriptor in a single step.
&gt;    Specifically, the client sends only CLIENT_PK, and relay B can include C's
&gt;    keys as part of the EXTENDED cell.
&gt; 
&gt; 2.3. Extending by certified index
&gt; 
&gt;    Now I'll explain how the client can avoid having to download a
&gt;    list of relays entirely.
&gt; 
&gt;    First, let's look at how a client chooses a random relay today.
&gt;    First, the client puts all of the relays in a list, and computes a
&gt;    weighted bandwidth for each one. For example, suppose the relay
&gt;    identities are R1, R2, R3, R4, and R5, and their bandwidth weights
&gt;    are 50, 40, 30, 20, and 10.  The client makes a table like this:
&gt; 
&gt;       Relay   Weight     Range of index values
&gt;       R1      50         0..49
&gt;       R2      40         50..89
&gt;       R3      30         90..119
&gt;       R4      20         120..139
&gt;       R5      10         140..149
&gt; 
&gt;    To choose a random relay, the client picks a random index value
&gt;    between 0 and 149 inclusive, and looks up the corresponding relay in
&gt;    the table.  For example, if the client's random number is 77, it will
&gt;    choose R2.  If its random number is 137, it chooses R4.
&gt; 
&gt;    The key observation for the "walking onions" design is that the
&gt;    client doesn't actually need to construct this table itself.
&gt;    Instead, we will have this table be constructed by the authorities
&gt;    and distributed to all the relays.
&gt; 
&gt;    Here's how it works: let's have the authorities make a new kind of
&gt;    consensus-like thing.  We'll call it an Efficient Network Directory
&gt;    with Individually Verifiable Entries, or "ENDIVE" for short.  This
&gt;    will differ from the client's index table above in two ways.  First,
&gt;    every entry in the ENDIVE is normalized so that the bandwidth
&gt;    weights maximum index is 2^32-1:
&gt; 
&gt;        Relay      Normalized weight    Range of index values
&gt;        R1         0x55555546           0x00000000..0x55555545
&gt;        R2         0x44444438           0x55555546..0x9999997d
&gt;        R3         0x3333332a           0x9999997e..0xcccccca7
&gt;        R4         0x2222221c           0xcccccca8..0xeeeeeec3
&gt;        R5         0x1111113c           0xeeeeeec4..0xffffffff
&gt; 
&gt;    Second, every entry in the ENDIVE is timestamped and signed by the
&gt;    authorities independently, so that when a client sees a line from the
&gt;    table above, it can verify that it came from an authentic ENDIVE.
&gt;    When a client has chosen a random index, one of these entries will
&gt;    prove to the client that a given relay corresponds to that index.
&gt;    Because of this property, we'll be calling these entries "Separable
&gt;    Network Index Proofs", or "SNIP"s for short.
&gt; 
&gt;    For example, a single SNIP from the table above might consist of:
&gt;      * A range of times during which this SNIP is valid
&gt;      * R1's identity
&gt;      * R1's ntor onion key
&gt;      * R1's address
&gt;      * The index range 0x00000000..0x55555545
&gt;      * A signature of all of the above, by a number of authorities
&gt; 
&gt;    Let's put it together. Suppose that the client has a circuit from
&gt;    A-&gt;B, and it wants to extend to a random relay, chosen randomly
&gt;    weighted by bandwidth.
&gt; 
&gt;    1. The client picks a random index value between 0 and 2**32 - 1.  It
&gt;       sends that index to relay B in its EXTEND cell, along with a
&gt;       g^x value for the ntor handshake.
&gt; 
&gt;       Note: the client doesn't send an address or identity for the next
&gt;       relay, since it doesn't know what relay it has chosen!  (The
&gt;       combination of an index and a g^x value is what I'm calling a
&gt;       "walking onion".)
&gt; 
&gt;    2. Now, relay B looks up the index in its most recent ENDIVE, to
&gt;       learn which relay the client selected.
&gt; 
&gt;       (For example, suppose that the client's random index value is
&gt;       0x50000001.  This index value falls between 0x00000000 and
&gt;       0x55555546 in the table above, so the relay B sees that the client
&gt;       has chosen R1 as its next hop.)
&gt; 
&gt;    3. Relay B sends a create cell to R1 as usual.  When it gets a
&gt;       CREATED reply, it includes the authority-signed SNIP for
&gt;       R1 as part of the EXTENDED cell.
&gt; 
&gt;    4. As part of verifying the handshake, the client verifies that the
&gt;       SNIP was signed by enough authorities, that its timestamp
&gt;       is recent enough, and that it actually corresponds to the
&gt;       random index that the client selected.
&gt; 
&gt;    Notice the properties we have with this design:
&gt; 
&gt;        - Clients can extend circuits without having a list of all the
&gt;          relays.
&gt; 
&gt;        - Because the client's random index needs to match a routing
&gt;          entry signed by the authorities, the client is still selecting
&gt;          a relay randomly by weight.  A hostile relay cannot choose
&gt;          which relay to send the client.
&gt; 
&gt; 
&gt;    On a failure to extend, a relay should still report the routing entry
&gt;    for the other relay that it couldn't connect to.  As before, a client
&gt;    will start a new circuit if a partially constructed circuit is a
&gt;    partial failure.
&gt; 
&gt; 
&gt;    We could achieve a reliability/security tradeoff by letting clients
&gt;    offer the relay a choice of two or more indices to extend to.
&gt;    This would help reliability, but give the relay more influence over
&gt;    the path.  We'd need to analyze this impact.
&gt; 
&gt; 
&gt;    In the next section, I'll discuss a bunch of details that we need to
&gt;    straighten out in order to make this design work.
&gt; 
&gt; 
&gt; 3. Sorting out the details.
&gt; 
&gt; 3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?
&gt; 
&gt;    The EXTEND2 cell is probably big enough for this design.  The random
&gt;    index that the client sends can be a new "link specifier" type,
&gt;    replacing the IP and identity link specifiers.
&gt; 
&gt;    The EXTENDED2 cell is likely to need to grow here.  We'll need to
&gt;    implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
&gt;    handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.
&gt; 
&gt; 3.2. How should SNIPs be signed?
&gt; 
&gt;    We have a few options, and I'd like to look into the possibilities
&gt;    here more closely.
&gt; 
&gt;    The simplest possibility is to use **multiple signatures** on each
&gt;    SNIP, the way we do today for consensuses.  These signatures should
&gt;    be made using medium-term Ed25519 keys from the authorities.  At a
&gt;    cost of 64 bytes per signature, at 9 authorities, we would need 576
&gt;    bytes for each SNIP.  These signatures could be batch-verified to
&gt;    save time at the client side.  Since generating a signature takes
&gt;    around 20 usec on my mediocre laptop, authorities should be able to
&gt;    generate this many signatures fairly easily.
&gt; 
&gt;    Another possibility is to use a **threshold signature** on each SNIP,
&gt;    so that the authorities collaboratively generate a short signature
&gt;    that the clients can verify.  There are multiple threshold signature
&gt;    schemes that we could consider here, though I haven't yet found one
&gt;    that looks perfect.
&gt; 
&gt;    Another possibility is to use organize the SNIPs in a **merkle tree
&gt;    with a signed root**.  For this design, clients could download the
&gt;    signed root periodically, and receive the hash-path from the signed
&gt;    root to the SNIP.  This design might help with
&gt;    certificate-transparency-style designs, and it would be necessary if we
&gt;    ever want to move to a postquantum signature algorithm that requires
&gt;    large signatures.
&gt; 
&gt;    Another possibility (due to a conversation among Chelsea Komlo, Sajin
&gt;    Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
&gt;    kids are doing it!)  For this, we'd have the clients download a
&gt;    signed hash of the ENDIVE periodically, and have the authorities
&gt;    generate a SNARK for each SNIP, proving its presence in that
&gt;    document.
&gt; 
&gt; 3.3. How can we detect authority misbehavior?
&gt; 
&gt;    We might want to take countermeasures against the possibility that a
&gt;    quorum of corrupt or compromised authorities give some relays a
&gt;    different set of SNIPs than they give other relays.
&gt; 
&gt;    If we incorporate a merkle tree or a hash chain in the design, we can
&gt;    use mechanisms similar to certificate transparency to ensure that the
&gt;    authorities have a consistent log of all the entries that they have
&gt;    ever handed out.
&gt; 
&gt; 3.4. How many types of weighted node selection are there, and how do we
&gt;      handle them?
&gt; 
&gt;    Right now, there are multiple weights that we use in Tor:
&gt;       * Weight for exit
&gt;       * Weight for guard
&gt;       * Weight for middle node
&gt; 
&gt;    We also filter nodes for several properties, such as flags they have.
&gt; 
&gt;    To reproduce this behavior, we should enumerate the various weights
&gt;    and filters that we use, and (if there are not too many) create a
&gt;    separate index for each.  For example, the Guard index would weight
&gt;    every node for selection as guard, assigning 0 weight to non-Guard
&gt;    nodes.  The Exit index would weight every node for selection as an
&gt;    exit, assigning 0 weight to non-Exit nodes.
&gt; 
&gt;    When choosing a relay, the client would have to specify which index
&gt;    to use.  We could either have a separate (labeled) set of SNIPs
&gt;    entries for each index, or we could have each SNIP have a separate
&gt;    (labeled) index range for each index.
&gt; 
&gt;    REGRESSION: the client's choice of which index to use would leak the
&gt;    next router's position and purpose in the circuit.  This information
&gt;    is something that we believe relays can infer now, but it's not a
&gt;    desired feature that they can.
&gt; 
&gt; 3.5. Does this design break onion service introduce handshakes?
&gt; 
&gt;    In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
&gt;    use in INTRODUCE2 handshakes.  It allows the client to send encrypted
&gt;    data as part of its initial ntor handshake, but requires the client
&gt;    to know the onion service's onion key before it sends its initial
&gt;    handshake.
&gt; 
&gt;    That won't be a problem for us here, though: we still require clients
&gt;    to fetch onion service descriptors before contacting a onion
&gt;    service.
&gt; 
&gt; 3.6. How does the onion service directory work here?
&gt; 
&gt;    The onion service directory is implemented as a hash ring, where
&gt;    each relay's position in the hash ring is decided by a hash of its
&gt;    identity, the current date, and a shared random value that the
&gt;    authorities compute each day.
&gt; 
&gt;    To implement this hash ring using walking onions, we would need to
&gt;    have an extra index based not on bandwidth, but on position in the
&gt;    hash ring.  Then onion services and clients could build a circuit,
&gt;    then extend it one more hop specifying their desired index in the
&gt;    hash ring.
&gt; 
&gt;    We could either have a command to retrieve a trio of hashring-based
&gt;    routing entries by index, or to retrieve (or connect to?) the n'th item
&gt;    after a given hashring entry.
&gt; 
&gt; 3.7. How can clients choose guard nodes?
&gt; 
&gt;    We can reuse the fallback directories here.  A newly bootstrapping
&gt;    client would connect to a fallback directory, then build a three-hop
&gt;    circuit, and finally extend the three-hop circuit by indexing to a
&gt;    random guard node.  The random guard node's SNIP would
&gt;    contain the information that the client needs to build real circuits
&gt;    through that guard in the future.  Because the client would be
&gt;    building a three-hop circuit, the fallback directory would not learn
&gt;    the client's guards.
&gt; 
&gt;    (Note that even if the extend attempt fails, we should still pick the
&gt;    node as a possible guard based on its router entry, so that other
&gt;    nodes can't veto our choice of guards.)
&gt; 
&gt; 3.8. Does the walking onions design preclude postquantum circuit handshakes?
&gt; 
&gt;    Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
&gt;    by having the client generate an ephemeral key as part of its initial
&gt;    handshake.  The client does not need to know the relay's onion key to
&gt;    do this, so we can still integrate those proposals with this one.
&gt; 
&gt; 3.9. Does the walking onions design stop us from changing the network
&gt;      topology?
&gt; 
&gt;    For Tor to continue to scale, we will someday need to accept that not
&gt;    every relay can be simultaneously connected to every other relay.
&gt;    Therefore, we will need to move from our current clique topology
&gt;    assumption to some other topology.
&gt; 
&gt;    There are also proposals to change node selection rules to generate
&gt;    routes providing better performance, or improved resistance to local
&gt;    adversaries.
&gt; 
&gt;    We can, I think, implement this kind of proposal by changing the way
&gt;    that ENDIVEs are generated.  Instead giving every relay the same
&gt;    ENDIVE, the authorities would generate different ENDIVEs for
&gt;    different relays, depending on the probability distribution of which
&gt;    relay should be chosen after which in the network topology.  In the
&gt;    extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
&gt;    practice, I hope that we could do better by having the network
&gt;    topology be non-clique, and by having many relays share the same
&gt;    distribution of successors.
&gt; 
&gt; 
&gt; 3.10. How can clients handle exit policies?
&gt; 
&gt;    This is an unsolved challenge.  If the client tells the middle relay
&gt;    its target port, it leaks information inappropriately.
&gt; 
&gt;    One possibility is to try to gather exit policies into common
&gt;    categories, such as "most ports supported" and "most common ports
&gt;    supported".
&gt; 
&gt;    Another (inefficient) possibility is for clients to keep trying exits
&gt;    until they find one that works.
&gt; 
&gt;    Another (inefficient) possibility is to require that clients who use
&gt;    unusual ports fall back to the old mechanism for route selection.
&gt; 
&gt; 
&gt; 3.11. Can this approach support families?
&gt; 
&gt;    This is an unsolved challenge.
&gt; 
&gt;    One (inefficient) possibility is for clients to generate circuits and
&gt;    discard those that use multiple relays in the same family.
&gt; 
&gt;    One (not quite compatible) possibility is for the authorities to sort
&gt;    the ENDIVE so that relays in the same family are adjacent to
&gt;    one another.  The index-bounds part of each SNIP would also
&gt;    have to include the bounds of the family.  This approach is not quite
&gt;    compatible with the status quo, because it prevents relays from
&gt;    belonging to more than one family.
&gt; 
&gt;    One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
&gt;    Ian Goldberg) is for the middle node to take responsibility for
&gt;    family enforcement. In this design, the client might offer the middle
&gt;    node multiple options for the next relay's index, and the middle node
&gt;    would choose the first such relay that is neither in its family nor
&gt;    its predecessor's family.  We'd need to look for a way to make sure
&gt;    that the middle node wasn't biasing the path selection.
&gt; 
&gt;    (TODO: come up with more ideas here.)
&gt; 
&gt; 3.12. Can walking onions support IP-based and country-based restrictions?
&gt; 
&gt;    This is an unsolved challenge.
&gt; 
&gt;    If the user's restrictions do not exclude most paths, one
&gt;    (inefficient) possibility is for the user to generate paths until
&gt;    they generate one that they like.  This idea becomes inefficient
&gt;    if the user is excluding most paths.
&gt; 
&gt;    Another (inefficient and fingerprintable) possibility is to require
&gt;    that clients who use complex path restrictions fall back to the old
&gt;    mechanism for route selection.
&gt; 
&gt;    (TODO: come up with better ideas here.)
&gt; 
&gt; 3.13. What scaling problems have we not solved with this design?
&gt; 
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    the authorities need to know about every relay, and arrange to have
&gt;    every relay tested.
&gt; 
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    relays need to have a list of all the relays.  (But see section 3.9
&gt;    above.)
&gt; 
&gt; 3.14. Should we still have clients download a consensus when they're
&gt;       using walking onions?
&gt; 
&gt;    There are some fields in the current consensus directory documents
&gt;    that the clients will still need, like the list of supported
&gt;    protocols and network parameters.  A client that uses walking onions
&gt;    should download a new flavor of consensus document that contains only
&gt;    these fields, and does not list any relays.  In some signature
&gt;    schemes, this consensus would contain a digest of the ENDIVE -- see
&gt;    3.2 above.
&gt; 
&gt;    (Note that this document would be a "consensus document" but not a
&gt;    "consensus directory", since it doesn't list any relays.)
&gt; 
&gt; 
&gt; 4. Putting it all together
&gt; 
&gt;    [This is the section where, in a later version of this proposal, I
&gt;    would specify the exact behavior and data formats to be used here.
&gt;    Right now, I'd say we're too early in the design phase.]
&gt; 
&gt; 
&gt; A.1. Acknowledgments
&gt; 
&gt;    Thanks to Peter Palfrader for his original design in proposal 141,
&gt;    and to the designers of PIR-Tor, both of which inspired aspects of
&gt;    this Walking Onions design.
&gt; 
&gt;    Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
&gt;    an earlier version of this design.
&gt; 
&gt;    Thanks to David Goulet, Teor, and George Kadianakis for commentary on
&gt;    earlier versions of this draft.
&gt; 
&gt; A.2. Additional ideas
&gt; 
&gt;    Teor notes that there are ways to try to get this idea to apply to
&gt;    one-pass circuit construction, something like the old onion design.
&gt;    We might be able to derive indices and keys from the same seeds,
&gt;    even.  I don't see a way to do this without losing forward secrecy,
&gt;    but it might be worth looking at harder.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205174413</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-02-05 17:44:13-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Argh, I'm really sorry, I thought I'd reached the end of the proposal
but my questions were addressed further down. Sorry for the noise.

Cheers,
Michael

On 05/02/2019 17:42, Michael Rogers wrote:
&gt; I'm very happy to see this proposal! Two quick questions about relay
&gt; selection:
&gt; 
&gt; * Can a client specify that it wants an exit node whose policy allows
&gt; something unusual, e.g. exiting to a port that's not allowed by the
&gt; default policy? If not, does the client need to keep picking exit nodes
&gt; until it gets a SNIP with a suitable policy?
&gt; 
&gt; * Similarly, if a client has restrictions on the guard nodes it can
&gt; connect to (fascist firewall or IPv4/v6 restrictions, for example), does
&gt; it need to keep picking guards via the directory fallback circuit until
&gt; it gets a suitable one?
&gt; 
&gt; In both cases, perhaps a client with unusual requirements could first
&gt; download the consensus, find a relay matching its requirements, then
&gt; send that relay's index in its extend cell, so the relay receiving the
&gt; extend cell wouldn't know whether the index was picked randomly by a
&gt; client with no special requirements, or non-randomly by a client with
&gt; special requirements?
&gt; 
&gt; I think this would allow the majority of clients to save bandwidth by
&gt; not downloading the consensus, without allowing relays to distinguish
&gt; the minority of clients with unusual exit/guard requirements. (The
&gt; presence of the full consensus on disk would indicate that the client
&gt; had unusual exit/guard requirements at some point, however.)
&gt; 
&gt; Cheers,
&gt; Michael
&gt; 
&gt; On 05/02/2019 17:02, Nick Mathewson wrote:
&gt;&gt; Filename: 300-walking-onions.txt
&gt;&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt;&gt; Author: Nick Mathewson
&gt;&gt; Created: 5-Feb-2019
&gt;&gt; Status: Draft
&gt;&gt;
&gt;&gt; 0. Status
&gt;&gt;
&gt;&gt;    This proposal describes a mechanism called "Walking Onions" for
&gt;&gt;    scaling the Tor network and reducing the amount of client bandwidth
&gt;&gt;    used to maintain a client's view of the Tor network.
&gt;&gt;
&gt;&gt;    This is a draft proposal; there are problems left to be solved and
&gt;&gt;    questions left to be answered.  Once those parts are done, we can
&gt;&gt;    fill in section 4 with the final details of the design.
&gt;&gt;
&gt;&gt; 1. Introduction
&gt;&gt;
&gt;&gt;    In the current Tor network design, we assume that every client has a
&gt;&gt;    complete view of all the relays in the network.  To achieve this,
&gt;&gt;    clients download consensus directories at regular intervals, and
&gt;&gt;    download descriptors for every relay listed in the directory.
&gt;&gt;
&gt;&gt;    The substitution of microdescriptors for regular descriptors
&gt;&gt;    (proposal 158) and the use of consensus diffs (proposal 140) have
&gt;&gt;    lowered the bytes that clients must dedicate to directory operations.
&gt;&gt;    But we still face the problem that, if we force each client to know
&gt;&gt;    about every relay in the network, each client's directory traffic
&gt;&gt;    will grow linearly with the number of relays in the network.
&gt;&gt;
&gt;&gt;    Another drawback in our current system is that client directory
&gt;&gt;    traffic is front-loaded: clients need to fetch an entire directory
&gt;&gt;    before they begin building circuits.  This places extra delays on
&gt;&gt;    clients, and extra load on the network.
&gt;&gt;
&gt;&gt;    To anonymize the world, we will need to scale to a much larger number
&gt;&gt;    of relays and clients: requiring clients to know about every relay in
&gt;&gt;    the set simply won't scale, and requiring every new client to download
&gt;&gt;    a large document is also problematic.
&gt;&gt;
&gt;&gt;    There are obvious responses here, and some other anonymity tools have
&gt;&gt;    taken them.  It's possible to have a client only use a fraction of
&gt;&gt;    the relays in a network--but doing so opens the client to _epistemic
&gt;&gt;    attacks_, in which the difference in clients' views of the
&gt;&gt;    network is used to partition their traffic.  It's also possible to
&gt;&gt;    move the problem of selecting relays from the client to the relays
&gt;&gt;    themselves, and let each relay select the next relay in turn--but
&gt;&gt;    this choice opens the client to _route capture attacks_, in which a
&gt;&gt;    malicious relay selects only other malicious relays.
&gt;&gt;
&gt;&gt;    In this proposal, I'll describe a design for eliminating up-front
&gt;&gt;    client directory downloads.  Clients still choose relays at random,
&gt;&gt;    but without ever having to hold a list of all the relays. This design
&gt;&gt;    does not require clients to trust relays any more than they do today,
&gt;&gt;    or open clients to epistemic attacks.
&gt;&gt;
&gt;&gt;    I hope to maintain feature parity with the current Tor design; I'll
&gt;&gt;    list the places in which I haven't figured out how to do so yet.
&gt;&gt;
&gt;&gt;    I'm naming this design "walking onions".  The walking onion (Allium x
&gt;&gt;    proliferum) reproduces by growing tiny little bulbs at the
&gt;&gt;    end of a long stalk.  When the stalk gets too top-heavy, it flops
&gt;&gt;    over, and the little bulbs start growing somewhere new.
&gt;&gt;
&gt;&gt;    The rest of this document will run as follows.  In section 2, I'll
&gt;&gt;    explain the ideas behind the "walking onions" design, and how they
&gt;&gt;    can eliminate the need for regular directory downloads.  In section 3, I'll
&gt;&gt;    answer a number of follow-up questions that arise, and explain how to
&gt;&gt;    keep various features in Tor working.  Section 4 (not yet written)
&gt;&gt;    will elaborate all the details needed to turn this proposal into a
&gt;&gt;    concrete set of specification changes.
&gt;&gt;
&gt;&gt; 2. Overview
&gt;&gt;
&gt;&gt; 2.1. Recapping proposal 141
&gt;&gt;
&gt;&gt;    Back in Proposal 141 ("Download server descriptors on demand"), Peter
&gt;&gt;    Palfrader proposed an idea for eliminating ahead-of-time descriptor
&gt;&gt;    downloads.  Instead of fetching all the descriptors in advance, a
&gt;&gt;    client would fetch the descriptor for each relay in its path right
&gt;&gt;    before extending the circuit to that relay.  For example, if a client
&gt;&gt;    has a circuit from A-&gt;B and wants to extend the circuit to C, the
&gt;&gt;    client asks B for C's descriptor, and then extends the circuit to C.
&gt;&gt;
&gt;&gt;    (Note that the client needs to fetch the descriptor every time it
&gt;&gt;    extends the circuit, so that an observer can't tell whether the
&gt;&gt;    client already had the descriptor or not.)
&gt;&gt;
&gt;&gt;    There are a couple of limitations for this design:
&gt;&gt;       * It still requires clients to download a consensus.
&gt;&gt;       * It introduces a extra round-trip to each hop of the circuit
&gt;&gt;         extension process.
&gt;&gt;
&gt;&gt;    I'll show how to solve these problems in the two sections below.
&gt;&gt;
&gt;&gt; 2.2. An observation about the ntor handshake.
&gt;&gt;
&gt;&gt;    I'll start with an observation about our current circuit extension
&gt;&gt;    handshake, ntor: it should not actually be necessary to know a
&gt;&gt;    relay's onion key before extending to it.
&gt;&gt;
&gt;&gt;    Right now, the client sends:
&gt;&gt;          NODEID     (The relay's identity)
&gt;&gt;          KEYID      (The relay's public onion key)
&gt;&gt;          CLIENT_PK  (a diffie-hellman public key)
&gt;&gt;
&gt;&gt;    and the relay responds with:
&gt;&gt;          SERVER_PK  (a diffie-hellman public key)
&gt;&gt;          AUTH       (a function of the relay's private keys and
&gt;&gt;                      *all* of the public keys.)
&gt;&gt;
&gt;&gt;    Both parties generate shared symmetric keys from the same inputs
&gt;&gt;    that are are used to create the AUTH value.
&gt;&gt;
&gt;&gt;    The important insight here is that we could easily change
&gt;&gt;    this handshake so that the client sends only CLIENT_PK, and receives
&gt;&gt;    NODEID and KEYID as part of the response.
&gt;&gt;
&gt;&gt;    In other words, the client needs to know the relay's onion key to
&gt;&gt;    _complete_ the handshake, but doesn't actually need to know the
&gt;&gt;    relay's onion key in order to _initiate_ the handshake.
&gt;&gt;
&gt;&gt;    This is the insight that will let us save a round trip:  When the
&gt;&gt;    client goes to extend a circuit from A-&gt;B to C, it can send B a
&gt;&gt;    request to extend to C and retrieve C's descriptor in a single step.
&gt;&gt;    Specifically, the client sends only CLIENT_PK, and relay B can include C's
&gt;&gt;    keys as part of the EXTENDED cell.
&gt;&gt;
&gt;&gt; 2.3. Extending by certified index
&gt;&gt;
&gt;&gt;    Now I'll explain how the client can avoid having to download a
&gt;&gt;    list of relays entirely.
&gt;&gt;
&gt;&gt;    First, let's look at how a client chooses a random relay today.
&gt;&gt;    First, the client puts all of the relays in a list, and computes a
&gt;&gt;    weighted bandwidth for each one. For example, suppose the relay
&gt;&gt;    identities are R1, R2, R3, R4, and R5, and their bandwidth weights
&gt;&gt;    are 50, 40, 30, 20, and 10.  The client makes a table like this:
&gt;&gt;
&gt;&gt;       Relay   Weight     Range of index values
&gt;&gt;       R1      50         0..49
&gt;&gt;       R2      40         50..89
&gt;&gt;       R3      30         90..119
&gt;&gt;       R4      20         120..139
&gt;&gt;       R5      10         140..149
&gt;&gt;
&gt;&gt;    To choose a random relay, the client picks a random index value
&gt;&gt;    between 0 and 149 inclusive, and looks up the corresponding relay in
&gt;&gt;    the table.  For example, if the client's random number is 77, it will
&gt;&gt;    choose R2.  If its random number is 137, it chooses R4.
&gt;&gt;
&gt;&gt;    The key observation for the "walking onions" design is that the
&gt;&gt;    client doesn't actually need to construct this table itself.
&gt;&gt;    Instead, we will have this table be constructed by the authorities
&gt;&gt;    and distributed to all the relays.
&gt;&gt;
&gt;&gt;    Here's how it works: let's have the authorities make a new kind of
&gt;&gt;    consensus-like thing.  We'll call it an Efficient Network Directory
&gt;&gt;    with Individually Verifiable Entries, or "ENDIVE" for short.  This
&gt;&gt;    will differ from the client's index table above in two ways.  First,
&gt;&gt;    every entry in the ENDIVE is normalized so that the bandwidth
&gt;&gt;    weights maximum index is 2^32-1:
&gt;&gt;
&gt;&gt;        Relay      Normalized weight    Range of index values
&gt;&gt;        R1         0x55555546           0x00000000..0x55555545
&gt;&gt;        R2         0x44444438           0x55555546..0x9999997d
&gt;&gt;        R3         0x3333332a           0x9999997e..0xcccccca7
&gt;&gt;        R4         0x2222221c           0xcccccca8..0xeeeeeec3
&gt;&gt;        R5         0x1111113c           0xeeeeeec4..0xffffffff
&gt;&gt;
&gt;&gt;    Second, every entry in the ENDIVE is timestamped and signed by the
&gt;&gt;    authorities independently, so that when a client sees a line from the
&gt;&gt;    table above, it can verify that it came from an authentic ENDIVE.
&gt;&gt;    When a client has chosen a random index, one of these entries will
&gt;&gt;    prove to the client that a given relay corresponds to that index.
&gt;&gt;    Because of this property, we'll be calling these entries "Separable
&gt;&gt;    Network Index Proofs", or "SNIP"s for short.
&gt;&gt;
&gt;&gt;    For example, a single SNIP from the table above might consist of:
&gt;&gt;      * A range of times during which this SNIP is valid
&gt;&gt;      * R1's identity
&gt;&gt;      * R1's ntor onion key
&gt;&gt;      * R1's address
&gt;&gt;      * The index range 0x00000000..0x55555545
&gt;&gt;      * A signature of all of the above, by a number of authorities
&gt;&gt;
&gt;&gt;    Let's put it together. Suppose that the client has a circuit from
&gt;&gt;    A-&gt;B, and it wants to extend to a random relay, chosen randomly
&gt;&gt;    weighted by bandwidth.
&gt;&gt;
&gt;&gt;    1. The client picks a random index value between 0 and 2**32 - 1.  It
&gt;&gt;       sends that index to relay B in its EXTEND cell, along with a
&gt;&gt;       g^x value for the ntor handshake.
&gt;&gt;
&gt;&gt;       Note: the client doesn't send an address or identity for the next
&gt;&gt;       relay, since it doesn't know what relay it has chosen!  (The
&gt;&gt;       combination of an index and a g^x value is what I'm calling a
&gt;&gt;       "walking onion".)
&gt;&gt;
&gt;&gt;    2. Now, relay B looks up the index in its most recent ENDIVE, to
&gt;&gt;       learn which relay the client selected.
&gt;&gt;
&gt;&gt;       (For example, suppose that the client's random index value is
&gt;&gt;       0x50000001.  This index value falls between 0x00000000 and
&gt;&gt;       0x55555546 in the table above, so the relay B sees that the client
&gt;&gt;       has chosen R1 as its next hop.)
&gt;&gt;
&gt;&gt;    3. Relay B sends a create cell to R1 as usual.  When it gets a
&gt;&gt;       CREATED reply, it includes the authority-signed SNIP for
&gt;&gt;       R1 as part of the EXTENDED cell.
&gt;&gt;
&gt;&gt;    4. As part of verifying the handshake, the client verifies that the
&gt;&gt;       SNIP was signed by enough authorities, that its timestamp
&gt;&gt;       is recent enough, and that it actually corresponds to the
&gt;&gt;       random index that the client selected.
&gt;&gt;
&gt;&gt;    Notice the properties we have with this design:
&gt;&gt;
&gt;&gt;        - Clients can extend circuits without having a list of all the
&gt;&gt;          relays.
&gt;&gt;
&gt;&gt;        - Because the client's random index needs to match a routing
&gt;&gt;          entry signed by the authorities, the client is still selecting
&gt;&gt;          a relay randomly by weight.  A hostile relay cannot choose
&gt;&gt;          which relay to send the client.
&gt;&gt;
&gt;&gt;
&gt;&gt;    On a failure to extend, a relay should still report the routing entry
&gt;&gt;    for the other relay that it couldn't connect to.  As before, a client
&gt;&gt;    will start a new circuit if a partially constructed circuit is a
&gt;&gt;    partial failure.
&gt;&gt;
&gt;&gt;
&gt;&gt;    We could achieve a reliability/security tradeoff by letting clients
&gt;&gt;    offer the relay a choice of two or more indices to extend to.
&gt;&gt;    This would help reliability, but give the relay more influence over
&gt;&gt;    the path.  We'd need to analyze this impact.
&gt;&gt;
&gt;&gt;
&gt;&gt;    In the next section, I'll discuss a bunch of details that we need to
&gt;&gt;    straighten out in order to make this design work.
&gt;&gt;
&gt;&gt;
&gt;&gt; 3. Sorting out the details.
&gt;&gt;
&gt;&gt; 3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?
&gt;&gt;
&gt;&gt;    The EXTEND2 cell is probably big enough for this design.  The random
&gt;&gt;    index that the client sends can be a new "link specifier" type,
&gt;&gt;    replacing the IP and identity link specifiers.
&gt;&gt;
&gt;&gt;    The EXTENDED2 cell is likely to need to grow here.  We'll need to
&gt;&gt;    implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
&gt;&gt;    handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.
&gt;&gt;
&gt;&gt; 3.2. How should SNIPs be signed?
&gt;&gt;
&gt;&gt;    We have a few options, and I'd like to look into the possibilities
&gt;&gt;    here more closely.
&gt;&gt;
&gt;&gt;    The simplest possibility is to use **multiple signatures** on each
&gt;&gt;    SNIP, the way we do today for consensuses.  These signatures should
&gt;&gt;    be made using medium-term Ed25519 keys from the authorities.  At a
&gt;&gt;    cost of 64 bytes per signature, at 9 authorities, we would need 576
&gt;&gt;    bytes for each SNIP.  These signatures could be batch-verified to
&gt;&gt;    save time at the client side.  Since generating a signature takes
&gt;&gt;    around 20 usec on my mediocre laptop, authorities should be able to
&gt;&gt;    generate this many signatures fairly easily.
&gt;&gt;
&gt;&gt;    Another possibility is to use a **threshold signature** on each SNIP,
&gt;&gt;    so that the authorities collaboratively generate a short signature
&gt;&gt;    that the clients can verify.  There are multiple threshold signature
&gt;&gt;    schemes that we could consider here, though I haven't yet found one
&gt;&gt;    that looks perfect.
&gt;&gt;
&gt;&gt;    Another possibility is to use organize the SNIPs in a **merkle tree
&gt;&gt;    with a signed root**.  For this design, clients could download the
&gt;&gt;    signed root periodically, and receive the hash-path from the signed
&gt;&gt;    root to the SNIP.  This design might help with
&gt;&gt;    certificate-transparency-style designs, and it would be necessary if we
&gt;&gt;    ever want to move to a postquantum signature algorithm that requires
&gt;&gt;    large signatures.
&gt;&gt;
&gt;&gt;    Another possibility (due to a conversation among Chelsea Komlo, Sajin
&gt;&gt;    Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
&gt;&gt;    kids are doing it!)  For this, we'd have the clients download a
&gt;&gt;    signed hash of the ENDIVE periodically, and have the authorities
&gt;&gt;    generate a SNARK for each SNIP, proving its presence in that
&gt;&gt;    document.
&gt;&gt;
&gt;&gt; 3.3. How can we detect authority misbehavior?
&gt;&gt;
&gt;&gt;    We might want to take countermeasures against the possibility that a
&gt;&gt;    quorum of corrupt or compromised authorities give some relays a
&gt;&gt;    different set of SNIPs than they give other relays.
&gt;&gt;
&gt;&gt;    If we incorporate a merkle tree or a hash chain in the design, we can
&gt;&gt;    use mechanisms similar to certificate transparency to ensure that the
&gt;&gt;    authorities have a consistent log of all the entries that they have
&gt;&gt;    ever handed out.
&gt;&gt;
&gt;&gt; 3.4. How many types of weighted node selection are there, and how do we
&gt;&gt;      handle them?
&gt;&gt;
&gt;&gt;    Right now, there are multiple weights that we use in Tor:
&gt;&gt;       * Weight for exit
&gt;&gt;       * Weight for guard
&gt;&gt;       * Weight for middle node
&gt;&gt;
&gt;&gt;    We also filter nodes for several properties, such as flags they have.
&gt;&gt;
&gt;&gt;    To reproduce this behavior, we should enumerate the various weights
&gt;&gt;    and filters that we use, and (if there are not too many) create a
&gt;&gt;    separate index for each.  For example, the Guard index would weight
&gt;&gt;    every node for selection as guard, assigning 0 weight to non-Guard
&gt;&gt;    nodes.  The Exit index would weight every node for selection as an
&gt;&gt;    exit, assigning 0 weight to non-Exit nodes.
&gt;&gt;
&gt;&gt;    When choosing a relay, the client would have to specify which index
&gt;&gt;    to use.  We could either have a separate (labeled) set of SNIPs
&gt;&gt;    entries for each index, or we could have each SNIP have a separate
&gt;&gt;    (labeled) index range for each index.
&gt;&gt;
&gt;&gt;    REGRESSION: the client's choice of which index to use would leak the
&gt;&gt;    next router's position and purpose in the circuit.  This information
&gt;&gt;    is something that we believe relays can infer now, but it's not a
&gt;&gt;    desired feature that they can.
&gt;&gt;
&gt;&gt; 3.5. Does this design break onion service introduce handshakes?
&gt;&gt;
&gt;&gt;    In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
&gt;&gt;    use in INTRODUCE2 handshakes.  It allows the client to send encrypted
&gt;&gt;    data as part of its initial ntor handshake, but requires the client
&gt;&gt;    to know the onion service's onion key before it sends its initial
&gt;&gt;    handshake.
&gt;&gt;
&gt;&gt;    That won't be a problem for us here, though: we still require clients
&gt;&gt;    to fetch onion service descriptors before contacting a onion
&gt;&gt;    service.
&gt;&gt;
&gt;&gt; 3.6. How does the onion service directory work here?
&gt;&gt;
&gt;&gt;    The onion service directory is implemented as a hash ring, where
&gt;&gt;    each relay's position in the hash ring is decided by a hash of its
&gt;&gt;    identity, the current date, and a shared random value that the
&gt;&gt;    authorities compute each day.
&gt;&gt;
&gt;&gt;    To implement this hash ring using walking onions, we would need to
&gt;&gt;    have an extra index based not on bandwidth, but on position in the
&gt;&gt;    hash ring.  Then onion services and clients could build a circuit,
&gt;&gt;    then extend it one more hop specifying their desired index in the
&gt;&gt;    hash ring.
&gt;&gt;
&gt;&gt;    We could either have a command to retrieve a trio of hashring-based
&gt;&gt;    routing entries by index, or to retrieve (or connect to?) the n'th item
&gt;&gt;    after a given hashring entry.
&gt;&gt;
&gt;&gt; 3.7. How can clients choose guard nodes?
&gt;&gt;
&gt;&gt;    We can reuse the fallback directories here.  A newly bootstrapping
&gt;&gt;    client would connect to a fallback directory, then build a three-hop
&gt;&gt;    circuit, and finally extend the three-hop circuit by indexing to a
&gt;&gt;    random guard node.  The random guard node's SNIP would
&gt;&gt;    contain the information that the client needs to build real circuits
&gt;&gt;    through that guard in the future.  Because the client would be
&gt;&gt;    building a three-hop circuit, the fallback directory would not learn
&gt;&gt;    the client's guards.
&gt;&gt;
&gt;&gt;    (Note that even if the extend attempt fails, we should still pick the
&gt;&gt;    node as a possible guard based on its router entry, so that other
&gt;&gt;    nodes can't veto our choice of guards.)
&gt;&gt;
&gt;&gt; 3.8. Does the walking onions design preclude postquantum circuit handshakes?
&gt;&gt;
&gt;&gt;    Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
&gt;&gt;    by having the client generate an ephemeral key as part of its initial
&gt;&gt;    handshake.  The client does not need to know the relay's onion key to
&gt;&gt;    do this, so we can still integrate those proposals with this one.
&gt;&gt;
&gt;&gt; 3.9. Does the walking onions design stop us from changing the network
&gt;&gt;      topology?
&gt;&gt;
&gt;&gt;    For Tor to continue to scale, we will someday need to accept that not
&gt;&gt;    every relay can be simultaneously connected to every other relay.
&gt;&gt;    Therefore, we will need to move from our current clique topology
&gt;&gt;    assumption to some other topology.
&gt;&gt;
&gt;&gt;    There are also proposals to change node selection rules to generate
&gt;&gt;    routes providing better performance, or improved resistance to local
&gt;&gt;    adversaries.
&gt;&gt;
&gt;&gt;    We can, I think, implement this kind of proposal by changing the way
&gt;&gt;    that ENDIVEs are generated.  Instead giving every relay the same
&gt;&gt;    ENDIVE, the authorities would generate different ENDIVEs for
&gt;&gt;    different relays, depending on the probability distribution of which
&gt;&gt;    relay should be chosen after which in the network topology.  In the
&gt;&gt;    extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
&gt;&gt;    practice, I hope that we could do better by having the network
&gt;&gt;    topology be non-clique, and by having many relays share the same
&gt;&gt;    distribution of successors.
&gt;&gt;
&gt;&gt;
&gt;&gt; 3.10. How can clients handle exit policies?
&gt;&gt;
&gt;&gt;    This is an unsolved challenge.  If the client tells the middle relay
&gt;&gt;    its target port, it leaks information inappropriately.
&gt;&gt;
&gt;&gt;    One possibility is to try to gather exit policies into common
&gt;&gt;    categories, such as "most ports supported" and "most common ports
&gt;&gt;    supported".
&gt;&gt;
&gt;&gt;    Another (inefficient) possibility is for clients to keep trying exits
&gt;&gt;    until they find one that works.
&gt;&gt;
&gt;&gt;    Another (inefficient) possibility is to require that clients who use
&gt;&gt;    unusual ports fall back to the old mechanism for route selection.
&gt;&gt;
&gt;&gt;
&gt;&gt; 3.11. Can this approach support families?
&gt;&gt;
&gt;&gt;    This is an unsolved challenge.
&gt;&gt;
&gt;&gt;    One (inefficient) possibility is for clients to generate circuits and
&gt;&gt;    discard those that use multiple relays in the same family.
&gt;&gt;
&gt;&gt;    One (not quite compatible) possibility is for the authorities to sort
&gt;&gt;    the ENDIVE so that relays in the same family are adjacent to
&gt;&gt;    one another.  The index-bounds part of each SNIP would also
&gt;&gt;    have to include the bounds of the family.  This approach is not quite
&gt;&gt;    compatible with the status quo, because it prevents relays from
&gt;&gt;    belonging to more than one family.
&gt;&gt;
&gt;&gt;    One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
&gt;&gt;    Ian Goldberg) is for the middle node to take responsibility for
&gt;&gt;    family enforcement. In this design, the client might offer the middle
&gt;&gt;    node multiple options for the next relay's index, and the middle node
&gt;&gt;    would choose the first such relay that is neither in its family nor
&gt;&gt;    its predecessor's family.  We'd need to look for a way to make sure
&gt;&gt;    that the middle node wasn't biasing the path selection.
&gt;&gt;
&gt;&gt;    (TODO: come up with more ideas here.)
&gt;&gt;
&gt;&gt; 3.12. Can walking onions support IP-based and country-based restrictions?
&gt;&gt;
&gt;&gt;    This is an unsolved challenge.
&gt;&gt;
&gt;&gt;    If the user's restrictions do not exclude most paths, one
&gt;&gt;    (inefficient) possibility is for the user to generate paths until
&gt;&gt;    they generate one that they like.  This idea becomes inefficient
&gt;&gt;    if the user is excluding most paths.
&gt;&gt;
&gt;&gt;    Another (inefficient and fingerprintable) possibility is to require
&gt;&gt;    that clients who use complex path restrictions fall back to the old
&gt;&gt;    mechanism for route selection.
&gt;&gt;
&gt;&gt;    (TODO: come up with better ideas here.)
&gt;&gt;
&gt;&gt; 3.13. What scaling problems have we not solved with this design?
&gt;&gt;
&gt;&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;&gt;    the authorities need to know about every relay, and arrange to have
&gt;&gt;    every relay tested.
&gt;&gt;
&gt;&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;&gt;    relays need to have a list of all the relays.  (But see section 3.9
&gt;&gt;    above.)
&gt;&gt;
&gt;&gt; 3.14. Should we still have clients download a consensus when they're
&gt;&gt;       using walking onions?
&gt;&gt;
&gt;&gt;    There are some fields in the current consensus directory documents
&gt;&gt;    that the clients will still need, like the list of supported
&gt;&gt;    protocols and network parameters.  A client that uses walking onions
&gt;&gt;    should download a new flavor of consensus document that contains only
&gt;&gt;    these fields, and does not list any relays.  In some signature
&gt;&gt;    schemes, this consensus would contain a digest of the ENDIVE -- see
&gt;&gt;    3.2 above.
&gt;&gt;
&gt;&gt;    (Note that this document would be a "consensus document" but not a
&gt;&gt;    "consensus directory", since it doesn't list any relays.)
&gt;&gt;
&gt;&gt;
&gt;&gt; 4. Putting it all together
&gt;&gt;
&gt;&gt;    [This is the section where, in a later version of this proposal, I
&gt;&gt;    would specify the exact behavior and data formats to be used here.
&gt;&gt;    Right now, I'd say we're too early in the design phase.]
&gt;&gt;
&gt;&gt;
&gt;&gt; A.1. Acknowledgments
&gt;&gt;
&gt;&gt;    Thanks to Peter Palfrader for his original design in proposal 141,
&gt;&gt;    and to the designers of PIR-Tor, both of which inspired aspects of
&gt;&gt;    this Walking Onions design.
&gt;&gt;
&gt;&gt;    Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
&gt;&gt;    an earlier version of this design.
&gt;&gt;
&gt;&gt;    Thanks to David Goulet, Teor, and George Kadianakis for commentary on
&gt;&gt;    earlier versions of this draft.
&gt;&gt;
&gt;&gt; A.2. Additional ideas
&gt;&gt;
&gt;&gt;    Teor notes that there are ways to try to get this idea to apply to
&gt;&gt;    one-pass circuit construction, something like the old onion design.
&gt;&gt;    We might be able to derive indices and keys from the same seeds,
&gt;&gt;    even.  I don't see a way to do this without losing forward secrecy,
&gt;&gt;    but it might be worth looking at harder.
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;&gt;
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205175014</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-05 17:50:14-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>



Hi Nick,

Thanks for posting this initial draft. I enjoyed reading more of the details, after \
hearing about it last week.

On February 5, 2019 5:02:50 PM UTC, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; Filename: 300-walking-onions.txt
&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt; Author: Nick Mathewson
&gt; Created: 5-Feb-2019
&gt; Status: Draft
&gt; 
&gt; 0. Status
&gt; 
&gt; This proposal describes a mechanism called "Walking Onions" for
&gt; scaling the Tor network and reducing the amount of client bandwidth
&gt; used to maintain a client's view of the Tor network.

...

&gt; 4. As part of verifying the handshake, the client verifies that the
&gt; SNIP was signed by enough authorities, that its timestamp
&gt; is recent enough, and that it actually corresponds to the
&gt; random index that the client selected.

Let's make sure that we check the signature *first*, before parsing the rest of the \
document. (Maybe that's something we can specify when we write the detailed section \
4.)

Tor's current directory parsing implementation parses the document, then checks the \
signature. This order makes some parsing bugs easier to trigger, because they don't \
require a valid set of authority signatures.

We could encourage implementers to check the signature first by putting it first in \
the document, or adding a signature offset field to the header. Or we could document \
this issue in a security considerations section, and hope all the implementers read \
it.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190206101812</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2019-02-06 10:18:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2019-02-05 18:44, Michael Rogers wrote:
&gt; Argh, I'm really sorry, I thought I'd reached the end of the proposal
&gt; but my questions were addressed further down. Sorry for the noise.

Hang on. The issues you mentioned are indeed addressed in the proposal,
and there are also solutions given in the proposal. But it might be that
your solution goes beyond the one in the proposal.

It's this part in your solution:

"[...], then send *that relay's index* in its extend cell, so the relay
receiving the extend cell wouldn't know whether the index was picked
randomly by a client with no special requirements, or non-randomly by a
client with special requirements?"

This is also related to the concern in 3.12 of the proposal where
falling back to the old mechanism for route selection is said to be
fingerprintable.

I'd be curious whether your solution is really fingerprintable.

All in all, I'm excited to see this proposal! This seems like a huge
step forward for clients with limited bandwidth and for the wonderful
future where we have tens of thousands relays.

All the best,
Karsten


&gt; 
&gt; Cheers,
&gt; Michael
&gt; 
&gt; On 05/02/2019 17:42, Michael Rogers wrote:
&gt;&gt; I'm very happy to see this proposal! Two quick questions about relay
&gt;&gt; selection:
&gt;&gt;
&gt;&gt; * Can a client specify that it wants an exit node whose policy allows
&gt;&gt; something unusual, e.g. exiting to a port that's not allowed by the
&gt;&gt; default policy? If not, does the client need to keep picking exit nodes
&gt;&gt; until it gets a SNIP with a suitable policy?
&gt;&gt;
&gt;&gt; * Similarly, if a client has restrictions on the guard nodes it can
&gt;&gt; connect to (fascist firewall or IPv4/v6 restrictions, for example), does
&gt;&gt; it need to keep picking guards via the directory fallback circuit until
&gt;&gt; it gets a suitable one?
&gt;&gt;
&gt;&gt; In both cases, perhaps a client with unusual requirements could first
&gt;&gt; download the consensus, find a relay matching its requirements, then
&gt;&gt; send that relay's index in its extend cell, so the relay receiving the
&gt;&gt; extend cell wouldn't know whether the index was picked randomly by a
&gt;&gt; client with no special requirements, or non-randomly by a client with
&gt;&gt; special requirements?
&gt;&gt;
&gt;&gt; I think this would allow the majority of clients to save bandwidth by
&gt;&gt; not downloading the consensus, without allowing relays to distinguish
&gt;&gt; the minority of clients with unusual exit/guard requirements. (The
&gt;&gt; presence of the full consensus on disk would indicate that the client
&gt;&gt; had unusual exit/guard requirements at some point, however.)
&gt;&gt;
&gt;&gt; Cheers,
&gt;&gt; Michael
&gt;&gt;
&gt;&gt; On 05/02/2019 17:02, Nick Mathewson wrote:
&gt;&gt;&gt; Filename: 300-walking-onions.txt
&gt;&gt;&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt;&gt;&gt; Author: Nick Mathewson
&gt;&gt;&gt; Created: 5-Feb-2019
&gt;&gt;&gt; Status: Draft
&gt;&gt;&gt;
&gt;&gt;&gt; 0. Status
&gt;&gt;&gt;
&gt;&gt;&gt;    This proposal describes a mechanism called "Walking Onions" for
&gt;&gt;&gt;    scaling the Tor network and reducing the amount of client bandwidth
&gt;&gt;&gt;    used to maintain a client's view of the Tor network.
&gt;&gt;&gt;
&gt;&gt;&gt;    This is a draft proposal; there are problems left to be solved and
&gt;&gt;&gt;    questions left to be answered.  Once those parts are done, we can
&gt;&gt;&gt;    fill in section 4 with the final details of the design.
&gt;&gt;&gt;
&gt;&gt;&gt; 1. Introduction
&gt;&gt;&gt;
&gt;&gt;&gt;    In the current Tor network design, we assume that every client has a
&gt;&gt;&gt;    complete view of all the relays in the network.  To achieve this,
&gt;&gt;&gt;    clients download consensus directories at regular intervals, and
&gt;&gt;&gt;    download descriptors for every relay listed in the directory.
&gt;&gt;&gt;
&gt;&gt;&gt;    The substitution of microdescriptors for regular descriptors
&gt;&gt;&gt;    (proposal 158) and the use of consensus diffs (proposal 140) have
&gt;&gt;&gt;    lowered the bytes that clients must dedicate to directory operations.
&gt;&gt;&gt;    But we still face the problem that, if we force each client to know
&gt;&gt;&gt;    about every relay in the network, each client's directory traffic
&gt;&gt;&gt;    will grow linearly with the number of relays in the network.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another drawback in our current system is that client directory
&gt;&gt;&gt;    traffic is front-loaded: clients need to fetch an entire directory
&gt;&gt;&gt;    before they begin building circuits.  This places extra delays on
&gt;&gt;&gt;    clients, and extra load on the network.
&gt;&gt;&gt;
&gt;&gt;&gt;    To anonymize the world, we will need to scale to a much larger number
&gt;&gt;&gt;    of relays and clients: requiring clients to know about every relay in
&gt;&gt;&gt;    the set simply won't scale, and requiring every new client to download
&gt;&gt;&gt;    a large document is also problematic.
&gt;&gt;&gt;
&gt;&gt;&gt;    There are obvious responses here, and some other anonymity tools have
&gt;&gt;&gt;    taken them.  It's possible to have a client only use a fraction of
&gt;&gt;&gt;    the relays in a network--but doing so opens the client to _epistemic
&gt;&gt;&gt;    attacks_, in which the difference in clients' views of the
&gt;&gt;&gt;    network is used to partition their traffic.  It's also possible to
&gt;&gt;&gt;    move the problem of selecting relays from the client to the relays
&gt;&gt;&gt;    themselves, and let each relay select the next relay in turn--but
&gt;&gt;&gt;    this choice opens the client to _route capture attacks_, in which a
&gt;&gt;&gt;    malicious relay selects only other malicious relays.
&gt;&gt;&gt;
&gt;&gt;&gt;    In this proposal, I'll describe a design for eliminating up-front
&gt;&gt;&gt;    client directory downloads.  Clients still choose relays at random,
&gt;&gt;&gt;    but without ever having to hold a list of all the relays. This design
&gt;&gt;&gt;    does not require clients to trust relays any more than they do today,
&gt;&gt;&gt;    or open clients to epistemic attacks.
&gt;&gt;&gt;
&gt;&gt;&gt;    I hope to maintain feature parity with the current Tor design; I'll
&gt;&gt;&gt;    list the places in which I haven't figured out how to do so yet.
&gt;&gt;&gt;
&gt;&gt;&gt;    I'm naming this design "walking onions".  The walking onion (Allium x
&gt;&gt;&gt;    proliferum) reproduces by growing tiny little bulbs at the
&gt;&gt;&gt;    end of a long stalk.  When the stalk gets too top-heavy, it flops
&gt;&gt;&gt;    over, and the little bulbs start growing somewhere new.
&gt;&gt;&gt;
&gt;&gt;&gt;    The rest of this document will run as follows.  In section 2, I'll
&gt;&gt;&gt;    explain the ideas behind the "walking onions" design, and how they
&gt;&gt;&gt;    can eliminate the need for regular directory downloads.  In section 3, I'll
&gt;&gt;&gt;    answer a number of follow-up questions that arise, and explain how to
&gt;&gt;&gt;    keep various features in Tor working.  Section 4 (not yet written)
&gt;&gt;&gt;    will elaborate all the details needed to turn this proposal into a
&gt;&gt;&gt;    concrete set of specification changes.
&gt;&gt;&gt;
&gt;&gt;&gt; 2. Overview
&gt;&gt;&gt;
&gt;&gt;&gt; 2.1. Recapping proposal 141
&gt;&gt;&gt;
&gt;&gt;&gt;    Back in Proposal 141 ("Download server descriptors on demand"), Peter
&gt;&gt;&gt;    Palfrader proposed an idea for eliminating ahead-of-time descriptor
&gt;&gt;&gt;    downloads.  Instead of fetching all the descriptors in advance, a
&gt;&gt;&gt;    client would fetch the descriptor for each relay in its path right
&gt;&gt;&gt;    before extending the circuit to that relay.  For example, if a client
&gt;&gt;&gt;    has a circuit from A-&gt;B and wants to extend the circuit to C, the
&gt;&gt;&gt;    client asks B for C's descriptor, and then extends the circuit to C.
&gt;&gt;&gt;
&gt;&gt;&gt;    (Note that the client needs to fetch the descriptor every time it
&gt;&gt;&gt;    extends the circuit, so that an observer can't tell whether the
&gt;&gt;&gt;    client already had the descriptor or not.)
&gt;&gt;&gt;
&gt;&gt;&gt;    There are a couple of limitations for this design:
&gt;&gt;&gt;       * It still requires clients to download a consensus.
&gt;&gt;&gt;       * It introduces a extra round-trip to each hop of the circuit
&gt;&gt;&gt;         extension process.
&gt;&gt;&gt;
&gt;&gt;&gt;    I'll show how to solve these problems in the two sections below.
&gt;&gt;&gt;
&gt;&gt;&gt; 2.2. An observation about the ntor handshake.
&gt;&gt;&gt;
&gt;&gt;&gt;    I'll start with an observation about our current circuit extension
&gt;&gt;&gt;    handshake, ntor: it should not actually be necessary to know a
&gt;&gt;&gt;    relay's onion key before extending to it.
&gt;&gt;&gt;
&gt;&gt;&gt;    Right now, the client sends:
&gt;&gt;&gt;          NODEID     (The relay's identity)
&gt;&gt;&gt;          KEYID      (The relay's public onion key)
&gt;&gt;&gt;          CLIENT_PK  (a diffie-hellman public key)
&gt;&gt;&gt;
&gt;&gt;&gt;    and the relay responds with:
&gt;&gt;&gt;          SERVER_PK  (a diffie-hellman public key)
&gt;&gt;&gt;          AUTH       (a function of the relay's private keys and
&gt;&gt;&gt;                      *all* of the public keys.)
&gt;&gt;&gt;
&gt;&gt;&gt;    Both parties generate shared symmetric keys from the same inputs
&gt;&gt;&gt;    that are are used to create the AUTH value.
&gt;&gt;&gt;
&gt;&gt;&gt;    The important insight here is that we could easily change
&gt;&gt;&gt;    this handshake so that the client sends only CLIENT_PK, and receives
&gt;&gt;&gt;    NODEID and KEYID as part of the response.
&gt;&gt;&gt;
&gt;&gt;&gt;    In other words, the client needs to know the relay's onion key to
&gt;&gt;&gt;    _complete_ the handshake, but doesn't actually need to know the
&gt;&gt;&gt;    relay's onion key in order to _initiate_ the handshake.
&gt;&gt;&gt;
&gt;&gt;&gt;    This is the insight that will let us save a round trip:  When the
&gt;&gt;&gt;    client goes to extend a circuit from A-&gt;B to C, it can send B a
&gt;&gt;&gt;    request to extend to C and retrieve C's descriptor in a single step.
&gt;&gt;&gt;    Specifically, the client sends only CLIENT_PK, and relay B can include C's
&gt;&gt;&gt;    keys as part of the EXTENDED cell.
&gt;&gt;&gt;
&gt;&gt;&gt; 2.3. Extending by certified index
&gt;&gt;&gt;
&gt;&gt;&gt;    Now I'll explain how the client can avoid having to download a
&gt;&gt;&gt;    list of relays entirely.
&gt;&gt;&gt;
&gt;&gt;&gt;    First, let's look at how a client chooses a random relay today.
&gt;&gt;&gt;    First, the client puts all of the relays in a list, and computes a
&gt;&gt;&gt;    weighted bandwidth for each one. For example, suppose the relay
&gt;&gt;&gt;    identities are R1, R2, R3, R4, and R5, and their bandwidth weights
&gt;&gt;&gt;    are 50, 40, 30, 20, and 10.  The client makes a table like this:
&gt;&gt;&gt;
&gt;&gt;&gt;       Relay   Weight     Range of index values
&gt;&gt;&gt;       R1      50         0..49
&gt;&gt;&gt;       R2      40         50..89
&gt;&gt;&gt;       R3      30         90..119
&gt;&gt;&gt;       R4      20         120..139
&gt;&gt;&gt;       R5      10         140..149
&gt;&gt;&gt;
&gt;&gt;&gt;    To choose a random relay, the client picks a random index value
&gt;&gt;&gt;    between 0 and 149 inclusive, and looks up the corresponding relay in
&gt;&gt;&gt;    the table.  For example, if the client's random number is 77, it will
&gt;&gt;&gt;    choose R2.  If its random number is 137, it chooses R4.
&gt;&gt;&gt;
&gt;&gt;&gt;    The key observation for the "walking onions" design is that the
&gt;&gt;&gt;    client doesn't actually need to construct this table itself.
&gt;&gt;&gt;    Instead, we will have this table be constructed by the authorities
&gt;&gt;&gt;    and distributed to all the relays.
&gt;&gt;&gt;
&gt;&gt;&gt;    Here's how it works: let's have the authorities make a new kind of
&gt;&gt;&gt;    consensus-like thing.  We'll call it an Efficient Network Directory
&gt;&gt;&gt;    with Individually Verifiable Entries, or "ENDIVE" for short.  This
&gt;&gt;&gt;    will differ from the client's index table above in two ways.  First,
&gt;&gt;&gt;    every entry in the ENDIVE is normalized so that the bandwidth
&gt;&gt;&gt;    weights maximum index is 2^32-1:
&gt;&gt;&gt;
&gt;&gt;&gt;        Relay      Normalized weight    Range of index values
&gt;&gt;&gt;        R1         0x55555546           0x00000000..0x55555545
&gt;&gt;&gt;        R2         0x44444438           0x55555546..0x9999997d
&gt;&gt;&gt;        R3         0x3333332a           0x9999997e..0xcccccca7
&gt;&gt;&gt;        R4         0x2222221c           0xcccccca8..0xeeeeeec3
&gt;&gt;&gt;        R5         0x1111113c           0xeeeeeec4..0xffffffff
&gt;&gt;&gt;
&gt;&gt;&gt;    Second, every entry in the ENDIVE is timestamped and signed by the
&gt;&gt;&gt;    authorities independently, so that when a client sees a line from the
&gt;&gt;&gt;    table above, it can verify that it came from an authentic ENDIVE.
&gt;&gt;&gt;    When a client has chosen a random index, one of these entries will
&gt;&gt;&gt;    prove to the client that a given relay corresponds to that index.
&gt;&gt;&gt;    Because of this property, we'll be calling these entries "Separable
&gt;&gt;&gt;    Network Index Proofs", or "SNIP"s for short.
&gt;&gt;&gt;
&gt;&gt;&gt;    For example, a single SNIP from the table above might consist of:
&gt;&gt;&gt;      * A range of times during which this SNIP is valid
&gt;&gt;&gt;      * R1's identity
&gt;&gt;&gt;      * R1's ntor onion key
&gt;&gt;&gt;      * R1's address
&gt;&gt;&gt;      * The index range 0x00000000..0x55555545
&gt;&gt;&gt;      * A signature of all of the above, by a number of authorities
&gt;&gt;&gt;
&gt;&gt;&gt;    Let's put it together. Suppose that the client has a circuit from
&gt;&gt;&gt;    A-&gt;B, and it wants to extend to a random relay, chosen randomly
&gt;&gt;&gt;    weighted by bandwidth.
&gt;&gt;&gt;
&gt;&gt;&gt;    1. The client picks a random index value between 0 and 2**32 - 1.  It
&gt;&gt;&gt;       sends that index to relay B in its EXTEND cell, along with a
&gt;&gt;&gt;       g^x value for the ntor handshake.
&gt;&gt;&gt;
&gt;&gt;&gt;       Note: the client doesn't send an address or identity for the next
&gt;&gt;&gt;       relay, since it doesn't know what relay it has chosen!  (The
&gt;&gt;&gt;       combination of an index and a g^x value is what I'm calling a
&gt;&gt;&gt;       "walking onion".)
&gt;&gt;&gt;
&gt;&gt;&gt;    2. Now, relay B looks up the index in its most recent ENDIVE, to
&gt;&gt;&gt;       learn which relay the client selected.
&gt;&gt;&gt;
&gt;&gt;&gt;       (For example, suppose that the client's random index value is
&gt;&gt;&gt;       0x50000001.  This index value falls between 0x00000000 and
&gt;&gt;&gt;       0x55555546 in the table above, so the relay B sees that the client
&gt;&gt;&gt;       has chosen R1 as its next hop.)
&gt;&gt;&gt;
&gt;&gt;&gt;    3. Relay B sends a create cell to R1 as usual.  When it gets a
&gt;&gt;&gt;       CREATED reply, it includes the authority-signed SNIP for
&gt;&gt;&gt;       R1 as part of the EXTENDED cell.
&gt;&gt;&gt;
&gt;&gt;&gt;    4. As part of verifying the handshake, the client verifies that the
&gt;&gt;&gt;       SNIP was signed by enough authorities, that its timestamp
&gt;&gt;&gt;       is recent enough, and that it actually corresponds to the
&gt;&gt;&gt;       random index that the client selected.
&gt;&gt;&gt;
&gt;&gt;&gt;    Notice the properties we have with this design:
&gt;&gt;&gt;
&gt;&gt;&gt;        - Clients can extend circuits without having a list of all the
&gt;&gt;&gt;          relays.
&gt;&gt;&gt;
&gt;&gt;&gt;        - Because the client's random index needs to match a routing
&gt;&gt;&gt;          entry signed by the authorities, the client is still selecting
&gt;&gt;&gt;          a relay randomly by weight.  A hostile relay cannot choose
&gt;&gt;&gt;          which relay to send the client.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;    On a failure to extend, a relay should still report the routing entry
&gt;&gt;&gt;    for the other relay that it couldn't connect to.  As before, a client
&gt;&gt;&gt;    will start a new circuit if a partially constructed circuit is a
&gt;&gt;&gt;    partial failure.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;    We could achieve a reliability/security tradeoff by letting clients
&gt;&gt;&gt;    offer the relay a choice of two or more indices to extend to.
&gt;&gt;&gt;    This would help reliability, but give the relay more influence over
&gt;&gt;&gt;    the path.  We'd need to analyze this impact.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt;    In the next section, I'll discuss a bunch of details that we need to
&gt;&gt;&gt;    straighten out in order to make this design work.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; 3. Sorting out the details.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?
&gt;&gt;&gt;
&gt;&gt;&gt;    The EXTEND2 cell is probably big enough for this design.  The random
&gt;&gt;&gt;    index that the client sends can be a new "link specifier" type,
&gt;&gt;&gt;    replacing the IP and identity link specifiers.
&gt;&gt;&gt;
&gt;&gt;&gt;    The EXTENDED2 cell is likely to need to grow here.  We'll need to
&gt;&gt;&gt;    implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
&gt;&gt;&gt;    handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.2. How should SNIPs be signed?
&gt;&gt;&gt;
&gt;&gt;&gt;    We have a few options, and I'd like to look into the possibilities
&gt;&gt;&gt;    here more closely.
&gt;&gt;&gt;
&gt;&gt;&gt;    The simplest possibility is to use **multiple signatures** on each
&gt;&gt;&gt;    SNIP, the way we do today for consensuses.  These signatures should
&gt;&gt;&gt;    be made using medium-term Ed25519 keys from the authorities.  At a
&gt;&gt;&gt;    cost of 64 bytes per signature, at 9 authorities, we would need 576
&gt;&gt;&gt;    bytes for each SNIP.  These signatures could be batch-verified to
&gt;&gt;&gt;    save time at the client side.  Since generating a signature takes
&gt;&gt;&gt;    around 20 usec on my mediocre laptop, authorities should be able to
&gt;&gt;&gt;    generate this many signatures fairly easily.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another possibility is to use a **threshold signature** on each SNIP,
&gt;&gt;&gt;    so that the authorities collaboratively generate a short signature
&gt;&gt;&gt;    that the clients can verify.  There are multiple threshold signature
&gt;&gt;&gt;    schemes that we could consider here, though I haven't yet found one
&gt;&gt;&gt;    that looks perfect.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another possibility is to use organize the SNIPs in a **merkle tree
&gt;&gt;&gt;    with a signed root**.  For this design, clients could download the
&gt;&gt;&gt;    signed root periodically, and receive the hash-path from the signed
&gt;&gt;&gt;    root to the SNIP.  This design might help with
&gt;&gt;&gt;    certificate-transparency-style designs, and it would be necessary if we
&gt;&gt;&gt;    ever want to move to a postquantum signature algorithm that requires
&gt;&gt;&gt;    large signatures.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another possibility (due to a conversation among Chelsea Komlo, Sajin
&gt;&gt;&gt;    Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
&gt;&gt;&gt;    kids are doing it!)  For this, we'd have the clients download a
&gt;&gt;&gt;    signed hash of the ENDIVE periodically, and have the authorities
&gt;&gt;&gt;    generate a SNARK for each SNIP, proving its presence in that
&gt;&gt;&gt;    document.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.3. How can we detect authority misbehavior?
&gt;&gt;&gt;
&gt;&gt;&gt;    We might want to take countermeasures against the possibility that a
&gt;&gt;&gt;    quorum of corrupt or compromised authorities give some relays a
&gt;&gt;&gt;    different set of SNIPs than they give other relays.
&gt;&gt;&gt;
&gt;&gt;&gt;    If we incorporate a merkle tree or a hash chain in the design, we can
&gt;&gt;&gt;    use mechanisms similar to certificate transparency to ensure that the
&gt;&gt;&gt;    authorities have a consistent log of all the entries that they have
&gt;&gt;&gt;    ever handed out.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.4. How many types of weighted node selection are there, and how do we
&gt;&gt;&gt;      handle them?
&gt;&gt;&gt;
&gt;&gt;&gt;    Right now, there are multiple weights that we use in Tor:
&gt;&gt;&gt;       * Weight for exit
&gt;&gt;&gt;       * Weight for guard
&gt;&gt;&gt;       * Weight for middle node
&gt;&gt;&gt;
&gt;&gt;&gt;    We also filter nodes for several properties, such as flags they have.
&gt;&gt;&gt;
&gt;&gt;&gt;    To reproduce this behavior, we should enumerate the various weights
&gt;&gt;&gt;    and filters that we use, and (if there are not too many) create a
&gt;&gt;&gt;    separate index for each.  For example, the Guard index would weight
&gt;&gt;&gt;    every node for selection as guard, assigning 0 weight to non-Guard
&gt;&gt;&gt;    nodes.  The Exit index would weight every node for selection as an
&gt;&gt;&gt;    exit, assigning 0 weight to non-Exit nodes.
&gt;&gt;&gt;
&gt;&gt;&gt;    When choosing a relay, the client would have to specify which index
&gt;&gt;&gt;    to use.  We could either have a separate (labeled) set of SNIPs
&gt;&gt;&gt;    entries for each index, or we could have each SNIP have a separate
&gt;&gt;&gt;    (labeled) index range for each index.
&gt;&gt;&gt;
&gt;&gt;&gt;    REGRESSION: the client's choice of which index to use would leak the
&gt;&gt;&gt;    next router's position and purpose in the circuit.  This information
&gt;&gt;&gt;    is something that we believe relays can infer now, but it's not a
&gt;&gt;&gt;    desired feature that they can.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.5. Does this design break onion service introduce handshakes?
&gt;&gt;&gt;
&gt;&gt;&gt;    In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
&gt;&gt;&gt;    use in INTRODUCE2 handshakes.  It allows the client to send encrypted
&gt;&gt;&gt;    data as part of its initial ntor handshake, but requires the client
&gt;&gt;&gt;    to know the onion service's onion key before it sends its initial
&gt;&gt;&gt;    handshake.
&gt;&gt;&gt;
&gt;&gt;&gt;    That won't be a problem for us here, though: we still require clients
&gt;&gt;&gt;    to fetch onion service descriptors before contacting a onion
&gt;&gt;&gt;    service.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.6. How does the onion service directory work here?
&gt;&gt;&gt;
&gt;&gt;&gt;    The onion service directory is implemented as a hash ring, where
&gt;&gt;&gt;    each relay's position in the hash ring is decided by a hash of its
&gt;&gt;&gt;    identity, the current date, and a shared random value that the
&gt;&gt;&gt;    authorities compute each day.
&gt;&gt;&gt;
&gt;&gt;&gt;    To implement this hash ring using walking onions, we would need to
&gt;&gt;&gt;    have an extra index based not on bandwidth, but on position in the
&gt;&gt;&gt;    hash ring.  Then onion services and clients could build a circuit,
&gt;&gt;&gt;    then extend it one more hop specifying their desired index in the
&gt;&gt;&gt;    hash ring.
&gt;&gt;&gt;
&gt;&gt;&gt;    We could either have a command to retrieve a trio of hashring-based
&gt;&gt;&gt;    routing entries by index, or to retrieve (or connect to?) the n'th item
&gt;&gt;&gt;    after a given hashring entry.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.7. How can clients choose guard nodes?
&gt;&gt;&gt;
&gt;&gt;&gt;    We can reuse the fallback directories here.  A newly bootstrapping
&gt;&gt;&gt;    client would connect to a fallback directory, then build a three-hop
&gt;&gt;&gt;    circuit, and finally extend the three-hop circuit by indexing to a
&gt;&gt;&gt;    random guard node.  The random guard node's SNIP would
&gt;&gt;&gt;    contain the information that the client needs to build real circuits
&gt;&gt;&gt;    through that guard in the future.  Because the client would be
&gt;&gt;&gt;    building a three-hop circuit, the fallback directory would not learn
&gt;&gt;&gt;    the client's guards.
&gt;&gt;&gt;
&gt;&gt;&gt;    (Note that even if the extend attempt fails, we should still pick the
&gt;&gt;&gt;    node as a possible guard based on its router entry, so that other
&gt;&gt;&gt;    nodes can't veto our choice of guards.)
&gt;&gt;&gt;
&gt;&gt;&gt; 3.8. Does the walking onions design preclude postquantum circuit handshakes?
&gt;&gt;&gt;
&gt;&gt;&gt;    Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
&gt;&gt;&gt;    by having the client generate an ephemeral key as part of its initial
&gt;&gt;&gt;    handshake.  The client does not need to know the relay's onion key to
&gt;&gt;&gt;    do this, so we can still integrate those proposals with this one.
&gt;&gt;&gt;
&gt;&gt;&gt; 3.9. Does the walking onions design stop us from changing the network
&gt;&gt;&gt;      topology?
&gt;&gt;&gt;
&gt;&gt;&gt;    For Tor to continue to scale, we will someday need to accept that not
&gt;&gt;&gt;    every relay can be simultaneously connected to every other relay.
&gt;&gt;&gt;    Therefore, we will need to move from our current clique topology
&gt;&gt;&gt;    assumption to some other topology.
&gt;&gt;&gt;
&gt;&gt;&gt;    There are also proposals to change node selection rules to generate
&gt;&gt;&gt;    routes providing better performance, or improved resistance to local
&gt;&gt;&gt;    adversaries.
&gt;&gt;&gt;
&gt;&gt;&gt;    We can, I think, implement this kind of proposal by changing the way
&gt;&gt;&gt;    that ENDIVEs are generated.  Instead giving every relay the same
&gt;&gt;&gt;    ENDIVE, the authorities would generate different ENDIVEs for
&gt;&gt;&gt;    different relays, depending on the probability distribution of which
&gt;&gt;&gt;    relay should be chosen after which in the network topology.  In the
&gt;&gt;&gt;    extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
&gt;&gt;&gt;    practice, I hope that we could do better by having the network
&gt;&gt;&gt;    topology be non-clique, and by having many relays share the same
&gt;&gt;&gt;    distribution of successors.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; 3.10. How can clients handle exit policies?
&gt;&gt;&gt;
&gt;&gt;&gt;    This is an unsolved challenge.  If the client tells the middle relay
&gt;&gt;&gt;    its target port, it leaks information inappropriately.
&gt;&gt;&gt;
&gt;&gt;&gt;    One possibility is to try to gather exit policies into common
&gt;&gt;&gt;    categories, such as "most ports supported" and "most common ports
&gt;&gt;&gt;    supported".
&gt;&gt;&gt;
&gt;&gt;&gt;    Another (inefficient) possibility is for clients to keep trying exits
&gt;&gt;&gt;    until they find one that works.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another (inefficient) possibility is to require that clients who use
&gt;&gt;&gt;    unusual ports fall back to the old mechanism for route selection.
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; 3.11. Can this approach support families?
&gt;&gt;&gt;
&gt;&gt;&gt;    This is an unsolved challenge.
&gt;&gt;&gt;
&gt;&gt;&gt;    One (inefficient) possibility is for clients to generate circuits and
&gt;&gt;&gt;    discard those that use multiple relays in the same family.
&gt;&gt;&gt;
&gt;&gt;&gt;    One (not quite compatible) possibility is for the authorities to sort
&gt;&gt;&gt;    the ENDIVE so that relays in the same family are adjacent to
&gt;&gt;&gt;    one another.  The index-bounds part of each SNIP would also
&gt;&gt;&gt;    have to include the bounds of the family.  This approach is not quite
&gt;&gt;&gt;    compatible with the status quo, because it prevents relays from
&gt;&gt;&gt;    belonging to more than one family.
&gt;&gt;&gt;
&gt;&gt;&gt;    One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
&gt;&gt;&gt;    Ian Goldberg) is for the middle node to take responsibility for
&gt;&gt;&gt;    family enforcement. In this design, the client might offer the middle
&gt;&gt;&gt;    node multiple options for the next relay's index, and the middle node
&gt;&gt;&gt;    would choose the first such relay that is neither in its family nor
&gt;&gt;&gt;    its predecessor's family.  We'd need to look for a way to make sure
&gt;&gt;&gt;    that the middle node wasn't biasing the path selection.
&gt;&gt;&gt;
&gt;&gt;&gt;    (TODO: come up with more ideas here.)
&gt;&gt;&gt;
&gt;&gt;&gt; 3.12. Can walking onions support IP-based and country-based restrictions?
&gt;&gt;&gt;
&gt;&gt;&gt;    This is an unsolved challenge.
&gt;&gt;&gt;
&gt;&gt;&gt;    If the user's restrictions do not exclude most paths, one
&gt;&gt;&gt;    (inefficient) possibility is for the user to generate paths until
&gt;&gt;&gt;    they generate one that they like.  This idea becomes inefficient
&gt;&gt;&gt;    if the user is excluding most paths.
&gt;&gt;&gt;
&gt;&gt;&gt;    Another (inefficient and fingerprintable) possibility is to require
&gt;&gt;&gt;    that clients who use complex path restrictions fall back to the old
&gt;&gt;&gt;    mechanism for route selection.
&gt;&gt;&gt;
&gt;&gt;&gt;    (TODO: come up with better ideas here.)
&gt;&gt;&gt;
&gt;&gt;&gt; 3.13. What scaling problems have we not solved with this design?
&gt;&gt;&gt;
&gt;&gt;&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;&gt;&gt;    the authorities need to know about every relay, and arrange to have
&gt;&gt;&gt;    every relay tested.
&gt;&gt;&gt;
&gt;&gt;&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;&gt;&gt;    relays need to have a list of all the relays.  (But see section 3.9
&gt;&gt;&gt;    above.)
&gt;&gt;&gt;
&gt;&gt;&gt; 3.14. Should we still have clients download a consensus when they're
&gt;&gt;&gt;       using walking onions?
&gt;&gt;&gt;
&gt;&gt;&gt;    There are some fields in the current consensus directory documents
&gt;&gt;&gt;    that the clients will still need, like the list of supported
&gt;&gt;&gt;    protocols and network parameters.  A client that uses walking onions
&gt;&gt;&gt;    should download a new flavor of consensus document that contains only
&gt;&gt;&gt;    these fields, and does not list any relays.  In some signature
&gt;&gt;&gt;    schemes, this consensus would contain a digest of the ENDIVE -- see
&gt;&gt;&gt;    3.2 above.
&gt;&gt;&gt;
&gt;&gt;&gt;    (Note that this document would be a "consensus document" but not a
&gt;&gt;&gt;    "consensus directory", since it doesn't list any relays.)
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; 4. Putting it all together
&gt;&gt;&gt;
&gt;&gt;&gt;    [This is the section where, in a later version of this proposal, I
&gt;&gt;&gt;    would specify the exact behavior and data formats to be used here.
&gt;&gt;&gt;    Right now, I'd say we're too early in the design phase.]
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; A.1. Acknowledgments
&gt;&gt;&gt;
&gt;&gt;&gt;    Thanks to Peter Palfrader for his original design in proposal 141,
&gt;&gt;&gt;    and to the designers of PIR-Tor, both of which inspired aspects of
&gt;&gt;&gt;    this Walking Onions design.
&gt;&gt;&gt;
&gt;&gt;&gt;    Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
&gt;&gt;&gt;    an earlier version of this design.
&gt;&gt;&gt;
&gt;&gt;&gt;    Thanks to David Goulet, Teor, and George Kadianakis for commentary on
&gt;&gt;&gt;    earlier versions of this draft.
&gt;&gt;&gt;
&gt;&gt;&gt; A.2. Additional ideas
&gt;&gt;&gt;
&gt;&gt;&gt;    Teor notes that there are ways to try to get this idea to apply to
&gt;&gt;&gt;    one-pass circuit construction, something like the old onion design.
&gt;&gt;&gt;    We might be able to derive indices and keys from the same seeds,
&gt;&gt;&gt;    even.  I don't see a way to do this without losing forward secrecy,
&gt;&gt;&gt;    but it might be worth looking at harder.
&gt;&gt;&gt; _______________________________________________
&gt;&gt;&gt; tor-dev mailing list
&gt;&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; _______________________________________________
&gt;&gt;&gt; tor-dev mailing list
&gt;&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;&gt;
&gt;&gt;&gt; _______________________________________________
&gt;&gt;&gt; tor-dev mailing list
&gt;&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190216221023</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-02-16 22:10:23-0400</timestampReceived><subject>[tor-dev] Marking Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count) as Accept</subject><body>

Hi tor-dev@ mailing list,

My proposal "Preferring IPv4 or IPv6 based on IP Version Failure Count" 
(a.k.a. Prop299) is here: 
https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt

I haven't gotten any comments for requests when I asked for them, so I 
am assuming this proposal is okay. If it is, could someone please mark 
this proposal as Accepted? If not, what does this proposal require?

Thank You,

Neel Chauhan

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190207034423</emailId><senderName>Nicholas Hopper</senderName><senderEmail>hopper@cs.umn.edu</senderEmail><timestampReceived>2019-02-07 03:44:23-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

Hi Nick!

On Tue, Feb 5, 2019 at 11:03 AM Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt;
&gt; Filename: 300-walking-onions.txt
&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt; Author: Nick Mathewson
&gt; Created: 5-Feb-2019
&gt; Status: Draft

...

&gt; 2.3. Extending by certified index
...
&gt;    Here's how it works: let's have the authorities make a new kind of
&gt;    consensus-like thing.  We'll call it an Efficient Network Directory
&gt;    with Individually Verifiable Entries, or "ENDIVE" for short.  This
&gt;    will differ from the client's index table above in two ways.  First,
&gt;    every entry in the ENDIVE is normalized so that the bandwidth
&gt;    weights maximum index is 2^32-1:
&gt;
&gt;        Relay      Normalized weight    Range of index values
&gt;        R1         0x55555546           0x00000000..0x55555545
&gt;        R2         0x44444438           0x55555546..0x9999997d
&gt;        R3         0x3333332a           0x9999997e..0xcccccca7
&gt;        R4         0x2222221c           0xcccccca8..0xeeeeeec3
&gt;        R5         0x1111113c           0xeeeeeec4..0xffffffff
&gt;
&gt;    Second, every entry in the ENDIVE is timestamped and signed by the
&gt;    authorities independently, so that when a client sees a line from the
&gt;    table above, it can verify that it came from an authentic ENDIVE.
&gt;    When a client has chosen a random index, one of these entries will
&gt;    prove to the client that a given relay corresponds to that index.
&gt;    Because of this property, we'll be calling these entries "Separable
&gt;    Network Index Proofs", or "SNIP"s for short.
&gt;
&gt;    For example, a single SNIP from the table above might consist of:
&gt;      * A range of times during which this SNIP is valid
&gt;      * R1's identity
&gt;      * R1's ntor onion key
&gt;      * R1's address
&gt;      * The index range 0x00000000..0x55555545
&gt;      * A signature of all of the above, by a number of authorities
&gt;
&gt;    Let's put it together. Suppose that the client has a circuit from
&gt;    A-&gt;B, and it wants to extend to a random relay, chosen randomly
&gt;    weighted by bandwidth.
&gt;
&gt;    1. The client picks a random index value between 0 and 2**32 - 1.  It
&gt;       sends that index to relay B in its EXTEND cell, along with a
&gt;       g^x value for the ntor handshake.
&gt;
&gt;       Note: the client doesn't send an address or identity for the next
&gt;       relay, since it doesn't know what relay it has chosen!  (The
&gt;       combination of an index and a g^x value is what I'm calling a
&gt;       "walking onion".)
&gt;
&gt;    2. Now, relay B looks up the index in its most recent ENDIVE, to
&gt;       learn which relay the client selected.
&gt;
&gt;       (For example, suppose that the client's random index value is
&gt;       0x50000001.  This index value falls between 0x00000000 and
&gt;       0x55555546 in the table above, so the relay B sees that the client
&gt;       has chosen R1 as its next hop.)
&gt;
&gt;    3. Relay B sends a create cell to R1 as usual.  When it gets a
&gt;       CREATED reply, it includes the authority-signed SNIP for
&gt;       R1 as part of the EXTENDED cell.
&gt;
&gt;    4. As part of verifying the handshake, the client verifies that the
&gt;       SNIP was signed by enough authorities, that its timestamp
&gt;       is recent enough, and that it actually corresponds to the
&gt;       random index that the client selected.

This is very cool.  One thing that comes to mind reading the proposal
is that you will either want some fancy sorting scheme to try to make ranges
(nearly) consistent across ENDIVEs, OR will want to have the Relay commit
to an ENDIVE version before the client sends an index (otherwise an
adversarial relay group can increase their effective weight by a factor of # of
acceptable ENDIVE versions).

&gt;
&gt;    Notice the properties we have with this design:
&gt;
&gt;        - Clients can extend circuits without having a list of all the
&gt;          relays.
&gt;
&gt;        - Because the client's random index needs to match a routing
&gt;          entry signed by the authorities, the client is still selecting
&gt;          a relay randomly by weight.  A hostile relay cannot choose
&gt;          which relay to send the client.
&gt;
&gt;
&gt;    On a failure to extend, a relay should still report the routing entry
&gt;    for the other relay that it couldn't connect to.  As before, a client
&gt;    will start a new circuit if a partially constructed circuit is a
&gt;    partial failure.
&gt;
&gt;
&gt;    We could achieve a reliability/security tradeoff by letting clients
&gt;    offer the relay a choice of two or more indices to extend to.
&gt;    This would help reliability, but give the relay more influence over
&gt;    the path.  We'd need to analyze this impact.
&gt;
&gt;
&gt;    In the next section, I'll discuss a bunch of details that we need to
&gt;    straighten out in order to make this design work.
&gt;
&gt;
&gt; 3. Sorting out the details.
&gt;
&gt; 3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?
&gt;
&gt;    The EXTEND2 cell is probably big enough for this design.  The random
&gt;    index that the client sends can be a new "link specifier" type,
&gt;    replacing the IP and identity link specifiers.
&gt;
&gt;    The EXTENDED2 cell is likely to need to grow here.  We'll need to
&gt;    implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
&gt;    handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.
&gt;
&gt; 3.2. How should SNIPs be signed?
&gt;
&gt;    We have a few options, and I'd like to look into the possibilities
&gt;    here more closely.
&gt;
&gt;    The simplest possibility is to use **multiple signatures** on each
&gt;    SNIP, the way we do today for consensuses.  These signatures should
&gt;    be made using medium-term Ed25519 keys from the authorities.  At a
&gt;    cost of 64 bytes per signature, at 9 authorities, we would need 576
&gt;    bytes for each SNIP.  These signatures could be batch-verified to
&gt;    save time at the client side.  Since generating a signature takes
&gt;    around 20 usec on my mediocre laptop, authorities should be able to
&gt;    generate this many signatures fairly easily.
&gt;
&gt;    Another possibility is to use a **threshold signature** on each SNIP,
&gt;    so that the authorities collaboratively generate a short signature
&gt;    that the clients can verify.  There are multiple threshold signature
&gt;    schemes that we could consider here, though I haven't yet found one
&gt;    that looks perfect.
&gt;
&gt;    Another possibility is to use organize the SNIPs in a **merkle tree
&gt;    with a signed root**.  For this design, clients could download the
&gt;    signed root periodically, and receive the hash-path from the signed
&gt;    root to the SNIP.  This design might help with
&gt;    certificate-transparency-style designs, and it would be necessary if we
&gt;    ever want to move to a postquantum signature algorithm that requires
&gt;    large signatures.
&gt;
&gt;    Another possibility (due to a conversation among Chelsea Komlo, Sajin
&gt;    Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
&gt;    kids are doing it!)  For this, we'd have the clients download a
&gt;    signed hash of the ENDIVE periodically, and have the authorities
&gt;    generate a SNARK for each SNIP, proving its presence in that
&gt;    document.
&gt;
&gt; 3.3. How can we detect authority misbehavior?
&gt;
&gt;    We might want to take countermeasures against the possibility that a
&gt;    quorum of corrupt or compromised authorities give some relays a
&gt;    different set of SNIPs than they give other relays.
&gt;
&gt;    If we incorporate a merkle tree or a hash chain in the design, we can
&gt;    use mechanisms similar to certificate transparency to ensure that the
&gt;    authorities have a consistent log of all the entries that they have
&gt;    ever handed out.
&gt;
&gt; 3.4. How many types of weighted node selection are there, and how do we
&gt;      handle them?
&gt;
&gt;    Right now, there are multiple weights that we use in Tor:
&gt;       * Weight for exit
&gt;       * Weight for guard
&gt;       * Weight for middle node
&gt;
&gt;    We also filter nodes for several properties, such as flags they have.
&gt;
&gt;    To reproduce this behavior, we should enumerate the various weights
&gt;    and filters that we use, and (if there are not too many) create a
&gt;    separate index for each.  For example, the Guard index would weight
&gt;    every node for selection as guard, assigning 0 weight to non-Guard
&gt;    nodes.  The Exit index would weight every node for selection as an
&gt;    exit, assigning 0 weight to non-Exit nodes.
&gt;
&gt;    When choosing a relay, the client would have to specify which index
&gt;    to use.  We could either have a separate (labeled) set of SNIPs
&gt;    entries for each index, or we could have each SNIP have a separate
&gt;    (labeled) index range for each index.
&gt;
&gt;    REGRESSION: the client's choice of which index to use would leak the
&gt;    next router's position and purpose in the circuit.  This information
&gt;    is something that we believe relays can infer now, but it's not a
&gt;    desired feature that they can.
&gt;
&gt; 3.5. Does this design break onion service introduce handshakes?
&gt;
&gt;    In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
&gt;    use in INTRODUCE2 handshakes.  It allows the client to send encrypted
&gt;    data as part of its initial ntor handshake, but requires the client
&gt;    to know the onion service's onion key before it sends its initial
&gt;    handshake.
&gt;
&gt;    That won't be a problem for us here, though: we still require clients
&gt;    to fetch onion service descriptors before contacting a onion
&gt;    service.
&gt;
&gt; 3.6. How does the onion service directory work here?
&gt;
&gt;    The onion service directory is implemented as a hash ring, where
&gt;    each relay's position in the hash ring is decided by a hash of its
&gt;    identity, the current date, and a shared random value that the
&gt;    authorities compute each day.
&gt;
&gt;    To implement this hash ring using walking onions, we would need to
&gt;    have an extra index based not on bandwidth, but on position in the
&gt;    hash ring.  Then onion services and clients could build a circuit,
&gt;    then extend it one more hop specifying their desired index in the
&gt;    hash ring.
&gt;
&gt;    We could either have a command to retrieve a trio of hashring-based
&gt;    routing entries by index, or to retrieve (or connect to?) the n'th item
&gt;    after a given hashring entry.
&gt;
&gt; 3.7. How can clients choose guard nodes?
&gt;
&gt;    We can reuse the fallback directories here.  A newly bootstrapping
&gt;    client would connect to a fallback directory, then build a three-hop
&gt;    circuit, and finally extend the three-hop circuit by indexing to a
&gt;    random guard node.  The random guard node's SNIP would
&gt;    contain the information that the client needs to build real circuits
&gt;    through that guard in the future.  Because the client would be
&gt;    building a three-hop circuit, the fallback directory would not learn
&gt;    the client's guards.
&gt;
&gt;    (Note that even if the extend attempt fails, we should still pick the
&gt;    node as a possible guard based on its router entry, so that other
&gt;    nodes can't veto our choice of guards.)
&gt;
&gt; 3.8. Does the walking onions design preclude postquantum circuit handshakes?
&gt;
&gt;    Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
&gt;    by having the client generate an ephemeral key as part of its initial
&gt;    handshake.  The client does not need to know the relay's onion key to
&gt;    do this, so we can still integrate those proposals with this one.
&gt;
&gt; 3.9. Does the walking onions design stop us from changing the network
&gt;      topology?
&gt;
&gt;    For Tor to continue to scale, we will someday need to accept that not
&gt;    every relay can be simultaneously connected to every other relay.
&gt;    Therefore, we will need to move from our current clique topology
&gt;    assumption to some other topology.
&gt;
&gt;    There are also proposals to change node selection rules to generate
&gt;    routes providing better performance, or improved resistance to local
&gt;    adversaries.
&gt;
&gt;    We can, I think, implement this kind of proposal by changing the way
&gt;    that ENDIVEs are generated.  Instead giving every relay the same
&gt;    ENDIVE, the authorities would generate different ENDIVEs for
&gt;    different relays, depending on the probability distribution of which
&gt;    relay should be chosen after which in the network topology.  In the
&gt;    extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
&gt;    practice, I hope that we could do better by having the network
&gt;    topology be non-clique, and by having many relays share the same
&gt;    distribution of successors.
&gt;
&gt;
&gt; 3.10. How can clients handle exit policies?
&gt;
&gt;    This is an unsolved challenge.  If the client tells the middle relay
&gt;    its target port, it leaks information inappropriately.
&gt;
&gt;    One possibility is to try to gather exit policies into common
&gt;    categories, such as "most ports supported" and "most common ports
&gt;    supported".
&gt;
&gt;    Another (inefficient) possibility is for clients to keep trying exits
&gt;    until they find one that works.
&gt;
&gt;    Another (inefficient) possibility is to require that clients who use
&gt;    unusual ports fall back to the old mechanism for route selection.
&gt;
&gt;
&gt; 3.11. Can this approach support families?
&gt;
&gt;    This is an unsolved challenge.
&gt;
&gt;    One (inefficient) possibility is for clients to generate circuits and
&gt;    discard those that use multiple relays in the same family.
&gt;
&gt;    One (not quite compatible) possibility is for the authorities to sort
&gt;    the ENDIVE so that relays in the same family are adjacent to
&gt;    one another.  The index-bounds part of each SNIP would also
&gt;    have to include the bounds of the family.  This approach is not quite
&gt;    compatible with the status quo, because it prevents relays from
&gt;    belonging to more than one family.
&gt;
&gt;    One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
&gt;    Ian Goldberg) is for the middle node to take responsibility for
&gt;    family enforcement. In this design, the client might offer the middle
&gt;    node multiple options for the next relay's index, and the middle node
&gt;    would choose the first such relay that is neither in its family nor
&gt;    its predecessor's family.  We'd need to look for a way to make sure
&gt;    that the middle node wasn't biasing the path selection.
&gt;
&gt;    (TODO: come up with more ideas here.)
&gt;
&gt; 3.12. Can walking onions support IP-based and country-based restrictions?
&gt;
&gt;    This is an unsolved challenge.
&gt;
&gt;    If the user's restrictions do not exclude most paths, one
&gt;    (inefficient) possibility is for the user to generate paths until
&gt;    they generate one that they like.  This idea becomes inefficient
&gt;    if the user is excluding most paths.
&gt;
&gt;    Another (inefficient and fingerprintable) possibility is to require
&gt;    that clients who use complex path restrictions fall back to the old
&gt;    mechanism for route selection.
&gt;
&gt;    (TODO: come up with better ideas here.)
&gt;
&gt; 3.13. What scaling problems have we not solved with this design?
&gt;
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    the authorities need to know about every relay, and arrange to have
&gt;    every relay tested.
&gt;
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    relays need to have a list of all the relays.  (But see section 3.9
&gt;    above.)
&gt;
&gt; 3.14. Should we still have clients download a consensus when they're
&gt;       using walking onions?
&gt;
&gt;    There are some fields in the current consensus directory documents
&gt;    that the clients will still need, like the list of supported
&gt;    protocols and network parameters.  A client that uses walking onions
&gt;    should download a new flavor of consensus document that contains only
&gt;    these fields, and does not list any relays.  In some signature
&gt;    schemes, this consensus would contain a digest of the ENDIVE -- see
&gt;    3.2 above.
&gt;
&gt;    (Note that this document would be a "consensus document" but not a
&gt;    "consensus directory", since it doesn't list any relays.)
&gt;
&gt;
&gt; 4. Putting it all together
&gt;
&gt;    [This is the section where, in a later version of this proposal, I
&gt;    would specify the exact behavior and data formats to be used here.
&gt;    Right now, I'd say we're too early in the design phase.]
&gt;
&gt;
&gt; A.1. Acknowledgments
&gt;
&gt;    Thanks to Peter Palfrader for his original design in proposal 141,
&gt;    and to the designers of PIR-Tor, both of which inspired aspects of
&gt;    this Walking Onions design.
&gt;
&gt;    Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
&gt;    an earlier version of this design.
&gt;
&gt;    Thanks to David Goulet, Teor, and George Kadianakis for commentary on
&gt;    earlier versions of this draft.
&gt;
&gt; A.2. Additional ideas
&gt;
&gt;    Teor notes that there are ways to try to get this idea to apply to
&gt;    one-pass circuit construction, something like the old onion design.
&gt;    We might be able to derive indices and keys from the same seeds,
&gt;    even.  I don't see a way to do this without losing forward secrecy,
&gt;    but it might be worth looking at harder.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev



-- 
------------------------------------------------------------------------
Nicholas Hopper
Professor, Computer Science &amp; Engineering
University of Minnesota
------------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190207144948</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2019-02-07 14:49:48-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

On Wed, Feb 6, 2019 at 10:45 PM Nicholas Hopper &lt;hopper@cs.umn.edu&gt; wrote:
 [...]
&gt;
&gt; This is very cool.  One thing that comes to mind reading the proposal
&gt; is that you will either want some fancy sorting scheme to try to make ranges
&gt; (nearly) consistent across ENDIVEs, OR will want to have the Relay commit
&gt; to an ENDIVE version before the client sends an index (otherwise an
&gt; adversarial relay group can increase their effective weight by a factor of # of
&gt; acceptable ENDIVE versions).

That's right.  I had been think that we wouldn't go too wrong if we
sorted by identity, since bandwidth doesn't change too much from hour
to hour.  Another possibility to investigate is putting out ENDIVES
less frequently than we currently put out consensus directories.

But I like your commitment idea better, if we can make it work: as
part of its CREATED, a relay could promise that it would use a certain
ENDIVE for any extend attempts in the next N minutes.  We'd need to
make sure that this was authenticated by the create/created handshake,
but I think that should be doable.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190208212807</emailId><senderName>Paul Syverson</senderName><senderEmail>paul.syverson@nrl.navy.mil</senderEmail><timestampReceived>2019-02-08 21:28:07-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

Hi Nick,

This is awesome. We at NRL discussed a very similar concept starting
about a year and half ago after going over the PIR-Tor paper in a
reading group. We've left it mostly backburnered since then, though I
thought we had talked about it a few times to people at the Tor Dev
meetings.

Anyway GMTA and now we don't have to wonder when we'll get around to
it since you're doing it. The core ideas we had are in this Proposal
already I think.  Here are a few thoughts that we've discussed that I
didn't see mentioned.

For handling exits:
Including just exit ports along with the index of relays on the list
given to clients doesn't seem like much overhead. 

For ASes, MyFamily, /16 separation etc.: 
The first and (especially) middle relay could be expected to know the
full consensus and enforce these and (provably) indicate a violation
of these policies if they occur. Alternatively if a client requests of
a guard or middle relay through which it is building a circuit,
descriptors of a handful (say 5) relays selected by index, then the
client can make this decision amongst those or start again if they all
fail policy.  (Clients might also make use of previously cached
descriptors This is another potential source of leakage, which is
reduced by including a relay index of an already cached descriptor in
a request if it is a candidate to be selected since it is know to
match, e.g., needed exit ports as well as family, etc. constraints.)
More issues, but it's an idea probably worth contemplating.

aloha,
Paul


On Tue, Feb 05, 2019 at 12:02:50PM -0500, Nick Mathewson wrote:
&gt; Filename: 300-walking-onions.txt
&gt; Title: Walking Onions: Scaling and Saving Bandwidth
&gt; Author: Nick Mathewson
&gt; Created: 5-Feb-2019
&gt; Status: Draft
&gt; 
&gt; 0. Status
&gt; 
&gt;    This proposal describes a mechanism called "Walking Onions" for
&gt;    scaling the Tor network and reducing the amount of client bandwidth
&gt;    used to maintain a client's view of the Tor network.
&gt; 
&gt;    This is a draft proposal; there are problems left to be solved and
&gt;    questions left to be answered.  Once those parts are done, we can
&gt;    fill in section 4 with the final details of the design.
&gt; 
&gt; 1. Introduction
&gt; 
&gt;    In the current Tor network design, we assume that every client has a
&gt;    complete view of all the relays in the network.  To achieve this,
&gt;    clients download consensus directories at regular intervals, and
&gt;    download descriptors for every relay listed in the directory.
&gt; 
&gt;    The substitution of microdescriptors for regular descriptors
&gt;    (proposal 158) and the use of consensus diffs (proposal 140) have
&gt;    lowered the bytes that clients must dedicate to directory operations.
&gt;    But we still face the problem that, if we force each client to know
&gt;    about every relay in the network, each client's directory traffic
&gt;    will grow linearly with the number of relays in the network.
&gt; 
&gt;    Another drawback in our current system is that client directory
&gt;    traffic is front-loaded: clients need to fetch an entire directory
&gt;    before they begin building circuits.  This places extra delays on
&gt;    clients, and extra load on the network.
&gt; 
&gt;    To anonymize the world, we will need to scale to a much larger number
&gt;    of relays and clients: requiring clients to know about every relay in
&gt;    the set simply won't scale, and requiring every new client to download
&gt;    a large document is also problematic.
&gt; 
&gt;    There are obvious responses here, and some other anonymity tools have
&gt;    taken them.  It's possible to have a client only use a fraction of
&gt;    the relays in a network--but doing so opens the client to _epistemic
&gt;    attacks_, in which the difference in clients' views of the
&gt;    network is used to partition their traffic.  It's also possible to
&gt;    move the problem of selecting relays from the client to the relays
&gt;    themselves, and let each relay select the next relay in turn--but
&gt;    this choice opens the client to _route capture attacks_, in which a
&gt;    malicious relay selects only other malicious relays.
&gt; 
&gt;    In this proposal, I'll describe a design for eliminating up-front
&gt;    client directory downloads.  Clients still choose relays at random,
&gt;    but without ever having to hold a list of all the relays. This design
&gt;    does not require clients to trust relays any more than they do today,
&gt;    or open clients to epistemic attacks.
&gt; 
&gt;    I hope to maintain feature parity with the current Tor design; I'll
&gt;    list the places in which I haven't figured out how to do so yet.
&gt; 
&gt;    I'm naming this design "walking onions".  The walking onion (Allium x
&gt;    proliferum) reproduces by growing tiny little bulbs at the
&gt;    end of a long stalk.  When the stalk gets too top-heavy, it flops
&gt;    over, and the little bulbs start growing somewhere new.
&gt; 
&gt;    The rest of this document will run as follows.  In section 2, I'll
&gt;    explain the ideas behind the "walking onions" design, and how they
&gt;    can eliminate the need for regular directory downloads.  In section 3, I'll
&gt;    answer a number of follow-up questions that arise, and explain how to
&gt;    keep various features in Tor working.  Section 4 (not yet written)
&gt;    will elaborate all the details needed to turn this proposal into a
&gt;    concrete set of specification changes.
&gt; 
&gt; 2. Overview
&gt; 
&gt; 2.1. Recapping proposal 141
&gt; 
&gt;    Back in Proposal 141 ("Download server descriptors on demand"), Peter
&gt;    Palfrader proposed an idea for eliminating ahead-of-time descriptor
&gt;    downloads.  Instead of fetching all the descriptors in advance, a
&gt;    client would fetch the descriptor for each relay in its path right
&gt;    before extending the circuit to that relay.  For example, if a client
&gt;    has a circuit from A-&gt;B and wants to extend the circuit to C, the
&gt;    client asks B for C's descriptor, and then extends the circuit to C.
&gt; 
&gt;    (Note that the client needs to fetch the descriptor every time it
&gt;    extends the circuit, so that an observer can't tell whether the
&gt;    client already had the descriptor or not.)
&gt; 
&gt;    There are a couple of limitations for this design:
&gt;       * It still requires clients to download a consensus.
&gt;       * It introduces a extra round-trip to each hop of the circuit
&gt;         extension process.
&gt; 
&gt;    I'll show how to solve these problems in the two sections below.
&gt; 
&gt; 2.2. An observation about the ntor handshake.
&gt; 
&gt;    I'll start with an observation about our current circuit extension
&gt;    handshake, ntor: it should not actually be necessary to know a
&gt;    relay's onion key before extending to it.
&gt; 
&gt;    Right now, the client sends:
&gt;          NODEID     (The relay's identity)
&gt;          KEYID      (The relay's public onion key)
&gt;          CLIENT_PK  (a diffie-hellman public key)
&gt; 
&gt;    and the relay responds with:
&gt;          SERVER_PK  (a diffie-hellman public key)
&gt;          AUTH       (a function of the relay's private keys and
&gt;                      *all* of the public keys.)
&gt; 
&gt;    Both parties generate shared symmetric keys from the same inputs
&gt;    that are are used to create the AUTH value.
&gt; 
&gt;    The important insight here is that we could easily change
&gt;    this handshake so that the client sends only CLIENT_PK, and receives
&gt;    NODEID and KEYID as part of the response.
&gt; 
&gt;    In other words, the client needs to know the relay's onion key to
&gt;    _complete_ the handshake, but doesn't actually need to know the
&gt;    relay's onion key in order to _initiate_ the handshake.
&gt; 
&gt;    This is the insight that will let us save a round trip:  When the
&gt;    client goes to extend a circuit from A-&gt;B to C, it can send B a
&gt;    request to extend to C and retrieve C's descriptor in a single step.
&gt;    Specifically, the client sends only CLIENT_PK, and relay B can include C's
&gt;    keys as part of the EXTENDED cell.
&gt; 
&gt; 2.3. Extending by certified index
&gt; 
&gt;    Now I'll explain how the client can avoid having to download a
&gt;    list of relays entirely.
&gt; 
&gt;    First, let's look at how a client chooses a random relay today.
&gt;    First, the client puts all of the relays in a list, and computes a
&gt;    weighted bandwidth for each one. For example, suppose the relay
&gt;    identities are R1, R2, R3, R4, and R5, and their bandwidth weights
&gt;    are 50, 40, 30, 20, and 10.  The client makes a table like this:
&gt; 
&gt;       Relay   Weight     Range of index values
&gt;       R1      50         0..49
&gt;       R2      40         50..89
&gt;       R3      30         90..119
&gt;       R4      20         120..139
&gt;       R5      10         140..149
&gt; 
&gt;    To choose a random relay, the client picks a random index value
&gt;    between 0 and 149 inclusive, and looks up the corresponding relay in
&gt;    the table.  For example, if the client's random number is 77, it will
&gt;    choose R2.  If its random number is 137, it chooses R4.
&gt; 
&gt;    The key observation for the "walking onions" design is that the
&gt;    client doesn't actually need to construct this table itself.
&gt;    Instead, we will have this table be constructed by the authorities
&gt;    and distributed to all the relays.
&gt; 
&gt;    Here's how it works: let's have the authorities make a new kind of
&gt;    consensus-like thing.  We'll call it an Efficient Network Directory
&gt;    with Individually Verifiable Entries, or "ENDIVE" for short.  This
&gt;    will differ from the client's index table above in two ways.  First,
&gt;    every entry in the ENDIVE is normalized so that the bandwidth
&gt;    weights maximum index is 2^32-1:
&gt; 
&gt;        Relay      Normalized weight    Range of index values
&gt;        R1         0x55555546           0x00000000..0x55555545
&gt;        R2         0x44444438           0x55555546..0x9999997d
&gt;        R3         0x3333332a           0x9999997e..0xcccccca7
&gt;        R4         0x2222221c           0xcccccca8..0xeeeeeec3
&gt;        R5         0x1111113c           0xeeeeeec4..0xffffffff
&gt; 
&gt;    Second, every entry in the ENDIVE is timestamped and signed by the
&gt;    authorities independently, so that when a client sees a line from the
&gt;    table above, it can verify that it came from an authentic ENDIVE.
&gt;    When a client has chosen a random index, one of these entries will
&gt;    prove to the client that a given relay corresponds to that index.
&gt;    Because of this property, we'll be calling these entries "Separable
&gt;    Network Index Proofs", or "SNIP"s for short.
&gt; 
&gt;    For example, a single SNIP from the table above might consist of:
&gt;      * A range of times during which this SNIP is valid
&gt;      * R1's identity
&gt;      * R1's ntor onion key
&gt;      * R1's address
&gt;      * The index range 0x00000000..0x55555545
&gt;      * A signature of all of the above, by a number of authorities
&gt; 
&gt;    Let's put it together. Suppose that the client has a circuit from
&gt;    A-&gt;B, and it wants to extend to a random relay, chosen randomly
&gt;    weighted by bandwidth.
&gt; 
&gt;    1. The client picks a random index value between 0 and 2**32 - 1.  It
&gt;       sends that index to relay B in its EXTEND cell, along with a
&gt;       g^x value for the ntor handshake.
&gt; 
&gt;       Note: the client doesn't send an address or identity for the next
&gt;       relay, since it doesn't know what relay it has chosen!  (The
&gt;       combination of an index and a g^x value is what I'm calling a
&gt;       "walking onion".)
&gt; 
&gt;    2. Now, relay B looks up the index in its most recent ENDIVE, to
&gt;       learn which relay the client selected.
&gt; 
&gt;       (For example, suppose that the client's random index value is
&gt;       0x50000001.  This index value falls between 0x00000000 and
&gt;       0x55555546 in the table above, so the relay B sees that the client
&gt;       has chosen R1 as its next hop.)
&gt; 
&gt;    3. Relay B sends a create cell to R1 as usual.  When it gets a
&gt;       CREATED reply, it includes the authority-signed SNIP for
&gt;       R1 as part of the EXTENDED cell.
&gt; 
&gt;    4. As part of verifying the handshake, the client verifies that the
&gt;       SNIP was signed by enough authorities, that its timestamp
&gt;       is recent enough, and that it actually corresponds to the
&gt;       random index that the client selected.
&gt; 
&gt;    Notice the properties we have with this design:
&gt; 
&gt;        - Clients can extend circuits without having a list of all the
&gt;          relays.
&gt; 
&gt;        - Because the client's random index needs to match a routing
&gt;          entry signed by the authorities, the client is still selecting
&gt;          a relay randomly by weight.  A hostile relay cannot choose
&gt;          which relay to send the client.
&gt; 
&gt; 
&gt;    On a failure to extend, a relay should still report the routing entry
&gt;    for the other relay that it couldn't connect to.  As before, a client
&gt;    will start a new circuit if a partially constructed circuit is a
&gt;    partial failure.
&gt; 
&gt; 
&gt;    We could achieve a reliability/security tradeoff by letting clients
&gt;    offer the relay a choice of two or more indices to extend to.
&gt;    This would help reliability, but give the relay more influence over
&gt;    the path.  We'd need to analyze this impact.
&gt; 
&gt; 
&gt;    In the next section, I'll discuss a bunch of details that we need to
&gt;    straighten out in order to make this design work.
&gt; 
&gt; 
&gt; 3. Sorting out the details.
&gt; 
&gt; 3.1. Will these routing entries fit in EXTEND2 and EXTENDED2 cells?
&gt; 
&gt;    The EXTEND2 cell is probably big enough for this design.  The random
&gt;    index that the client sends can be a new "link specifier" type,
&gt;    replacing the IP and identity link specifiers.
&gt; 
&gt;    The EXTENDED2 cell is likely to need to grow here.  We'll need to
&gt;    implement proposal 249 ("Allow CREATE cells with &gt;505 bytes of
&gt;    handshake data") so that EXTEND2 and EXTENDED2 cells can be larger.
&gt; 
&gt; 3.2. How should SNIPs be signed?
&gt; 
&gt;    We have a few options, and I'd like to look into the possibilities
&gt;    here more closely.
&gt; 
&gt;    The simplest possibility is to use **multiple signatures** on each
&gt;    SNIP, the way we do today for consensuses.  These signatures should
&gt;    be made using medium-term Ed25519 keys from the authorities.  At a
&gt;    cost of 64 bytes per signature, at 9 authorities, we would need 576
&gt;    bytes for each SNIP.  These signatures could be batch-verified to
&gt;    save time at the client side.  Since generating a signature takes
&gt;    around 20 usec on my mediocre laptop, authorities should be able to
&gt;    generate this many signatures fairly easily.
&gt; 
&gt;    Another possibility is to use a **threshold signature** on each SNIP,
&gt;    so that the authorities collaboratively generate a short signature
&gt;    that the clients can verify.  There are multiple threshold signature
&gt;    schemes that we could consider here, though I haven't yet found one
&gt;    that looks perfect.
&gt; 
&gt;    Another possibility is to use organize the SNIPs in a **merkle tree
&gt;    with a signed root**.  For this design, clients could download the
&gt;    signed root periodically, and receive the hash-path from the signed
&gt;    root to the SNIP.  This design might help with
&gt;    certificate-transparency-style designs, and it would be necessary if we
&gt;    ever want to move to a postquantum signature algorithm that requires
&gt;    large signatures.
&gt; 
&gt;    Another possibility (due to a conversation among Chelsea Komlo, Sajin
&gt;    Sasy, and Ian Goldberg), is to *use SNARKs*.  (Why not?  All the cool
&gt;    kids are doing it!)  For this, we'd have the clients download a
&gt;    signed hash of the ENDIVE periodically, and have the authorities
&gt;    generate a SNARK for each SNIP, proving its presence in that
&gt;    document.
&gt; 
&gt; 3.3. How can we detect authority misbehavior?
&gt; 
&gt;    We might want to take countermeasures against the possibility that a
&gt;    quorum of corrupt or compromised authorities give some relays a
&gt;    different set of SNIPs than they give other relays.
&gt; 
&gt;    If we incorporate a merkle tree or a hash chain in the design, we can
&gt;    use mechanisms similar to certificate transparency to ensure that the
&gt;    authorities have a consistent log of all the entries that they have
&gt;    ever handed out.
&gt; 
&gt; 3.4. How many types of weighted node selection are there, and how do we
&gt;      handle them?
&gt; 
&gt;    Right now, there are multiple weights that we use in Tor:
&gt;       * Weight for exit
&gt;       * Weight for guard
&gt;       * Weight for middle node
&gt; 
&gt;    We also filter nodes for several properties, such as flags they have.
&gt; 
&gt;    To reproduce this behavior, we should enumerate the various weights
&gt;    and filters that we use, and (if there are not too many) create a
&gt;    separate index for each.  For example, the Guard index would weight
&gt;    every node for selection as guard, assigning 0 weight to non-Guard
&gt;    nodes.  The Exit index would weight every node for selection as an
&gt;    exit, assigning 0 weight to non-Exit nodes.
&gt; 
&gt;    When choosing a relay, the client would have to specify which index
&gt;    to use.  We could either have a separate (labeled) set of SNIPs
&gt;    entries for each index, or we could have each SNIP have a separate
&gt;    (labeled) index range for each index.
&gt; 
&gt;    REGRESSION: the client's choice of which index to use would leak the
&gt;    next router's position and purpose in the circuit.  This information
&gt;    is something that we believe relays can infer now, but it's not a
&gt;    desired feature that they can.
&gt; 
&gt; 3.5. Does this design break onion service introduce handshakes?
&gt; 
&gt;    In rend-spec-v3.txt section 3.3.2, we specify a variant of ntor for
&gt;    use in INTRODUCE2 handshakes.  It allows the client to send encrypted
&gt;    data as part of its initial ntor handshake, but requires the client
&gt;    to know the onion service's onion key before it sends its initial
&gt;    handshake.
&gt; 
&gt;    That won't be a problem for us here, though: we still require clients
&gt;    to fetch onion service descriptors before contacting a onion
&gt;    service.
&gt; 
&gt; 3.6. How does the onion service directory work here?
&gt; 
&gt;    The onion service directory is implemented as a hash ring, where
&gt;    each relay's position in the hash ring is decided by a hash of its
&gt;    identity, the current date, and a shared random value that the
&gt;    authorities compute each day.
&gt; 
&gt;    To implement this hash ring using walking onions, we would need to
&gt;    have an extra index based not on bandwidth, but on position in the
&gt;    hash ring.  Then onion services and clients could build a circuit,
&gt;    then extend it one more hop specifying their desired index in the
&gt;    hash ring.
&gt; 
&gt;    We could either have a command to retrieve a trio of hashring-based
&gt;    routing entries by index, or to retrieve (or connect to?) the n'th item
&gt;    after a given hashring entry.
&gt; 
&gt; 3.7. How can clients choose guard nodes?
&gt; 
&gt;    We can reuse the fallback directories here.  A newly bootstrapping
&gt;    client would connect to a fallback directory, then build a three-hop
&gt;    circuit, and finally extend the three-hop circuit by indexing to a
&gt;    random guard node.  The random guard node's SNIP would
&gt;    contain the information that the client needs to build real circuits
&gt;    through that guard in the future.  Because the client would be
&gt;    building a three-hop circuit, the fallback directory would not learn
&gt;    the client's guards.
&gt; 
&gt;    (Note that even if the extend attempt fails, we should still pick the
&gt;    node as a possible guard based on its router entry, so that other
&gt;    nodes can't veto our choice of guards.)
&gt; 
&gt; 3.8. Does the walking onions design preclude postquantum circuit handshakes?
&gt; 
&gt;    Not at all!  Both proposal 263 (ntru) and proposal 270 (newhope) work
&gt;    by having the client generate an ephemeral key as part of its initial
&gt;    handshake.  The client does not need to know the relay's onion key to
&gt;    do this, so we can still integrate those proposals with this one.
&gt; 
&gt; 3.9. Does the walking onions design stop us from changing the network
&gt;      topology?
&gt; 
&gt;    For Tor to continue to scale, we will someday need to accept that not
&gt;    every relay can be simultaneously connected to every other relay.
&gt;    Therefore, we will need to move from our current clique topology
&gt;    assumption to some other topology.
&gt; 
&gt;    There are also proposals to change node selection rules to generate
&gt;    routes providing better performance, or improved resistance to local
&gt;    adversaries.
&gt; 
&gt;    We can, I think, implement this kind of proposal by changing the way
&gt;    that ENDIVEs are generated.  Instead giving every relay the same
&gt;    ENDIVE, the authorities would generate different ENDIVEs for
&gt;    different relays, depending on the probability distribution of which
&gt;    relay should be chosen after which in the network topology.  In the
&gt;    extreme case, this would produce O(n) ENDIVEs and O(n^2) SNIPs.  In
&gt;    practice, I hope that we could do better by having the network
&gt;    topology be non-clique, and by having many relays share the same
&gt;    distribution of successors.
&gt; 
&gt; 
&gt; 3.10. How can clients handle exit policies?
&gt; 
&gt;    This is an unsolved challenge.  If the client tells the middle relay
&gt;    its target port, it leaks information inappropriately.
&gt; 
&gt;    One possibility is to try to gather exit policies into common
&gt;    categories, such as "most ports supported" and "most common ports
&gt;    supported".
&gt; 
&gt;    Another (inefficient) possibility is for clients to keep trying exits
&gt;    until they find one that works.
&gt; 
&gt;    Another (inefficient) possibility is to require that clients who use
&gt;    unusual ports fall back to the old mechanism for route selection.
&gt; 
&gt; 
&gt; 3.11. Can this approach support families?
&gt; 
&gt;    This is an unsolved challenge.
&gt; 
&gt;    One (inefficient) possibility is for clients to generate circuits and
&gt;    discard those that use multiple relays in the same family.
&gt; 
&gt;    One (not quite compatible) possibility is for the authorities to sort
&gt;    the ENDIVE so that relays in the same family are adjacent to
&gt;    one another.  The index-bounds part of each SNIP would also
&gt;    have to include the bounds of the family.  This approach is not quite
&gt;    compatible with the status quo, because it prevents relays from
&gt;    belonging to more than one family.
&gt; 
&gt;    One interesting possibility (due to Chelsea Komlo, Sajin Sasy, and
&gt;    Ian Goldberg) is for the middle node to take responsibility for
&gt;    family enforcement. In this design, the client might offer the middle
&gt;    node multiple options for the next relay's index, and the middle node
&gt;    would choose the first such relay that is neither in its family nor
&gt;    its predecessor's family.  We'd need to look for a way to make sure
&gt;    that the middle node wasn't biasing the path selection.
&gt; 
&gt;    (TODO: come up with more ideas here.)
&gt; 
&gt; 3.12. Can walking onions support IP-based and country-based restrictions?
&gt; 
&gt;    This is an unsolved challenge.
&gt; 
&gt;    If the user's restrictions do not exclude most paths, one
&gt;    (inefficient) possibility is for the user to generate paths until
&gt;    they generate one that they like.  This idea becomes inefficient
&gt;    if the user is excluding most paths.
&gt; 
&gt;    Another (inefficient and fingerprintable) possibility is to require
&gt;    that clients who use complex path restrictions fall back to the old
&gt;    mechanism for route selection.
&gt; 
&gt;    (TODO: come up with better ideas here.)
&gt; 
&gt; 3.13. What scaling problems have we not solved with this design?
&gt; 
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    the authorities need to know about every relay, and arrange to have
&gt;    every relay tested.
&gt; 
&gt;    The walking onions design doesn't solve (on its own) the problem that
&gt;    relays need to have a list of all the relays.  (But see section 3.9
&gt;    above.)
&gt; 
&gt; 3.14. Should we still have clients download a consensus when they're
&gt;       using walking onions?
&gt; 
&gt;    There are some fields in the current consensus directory documents
&gt;    that the clients will still need, like the list of supported
&gt;    protocols and network parameters.  A client that uses walking onions
&gt;    should download a new flavor of consensus document that contains only
&gt;    these fields, and does not list any relays.  In some signature
&gt;    schemes, this consensus would contain a digest of the ENDIVE -- see
&gt;    3.2 above.
&gt; 
&gt;    (Note that this document would be a "consensus document" but not a
&gt;    "consensus directory", since it doesn't list any relays.)
&gt; 
&gt; 
&gt; 4. Putting it all together
&gt; 
&gt;    [This is the section where, in a later version of this proposal, I
&gt;    would specify the exact behavior and data formats to be used here.
&gt;    Right now, I'd say we're too early in the design phase.]
&gt; 
&gt; 
&gt; A.1. Acknowledgments
&gt; 
&gt;    Thanks to Peter Palfrader for his original design in proposal 141,
&gt;    and to the designers of PIR-Tor, both of which inspired aspects of
&gt;    this Walking Onions design.
&gt; 
&gt;    Thanks to Chelsea Komlo, Sajin Sasy, and Ian Goldberg for feedback on
&gt;    an earlier version of this design.
&gt; 
&gt;    Thanks to David Goulet, Teor, and George Kadianakis for commentary on
&gt;    earlier versions of this draft.
&gt; 
&gt; A.2. Additional ideas
&gt; 
&gt;    Teor notes that there are ways to try to get this idea to apply to
&gt;    one-pass circuit construction, something like the old onion design.
&gt;    We might be able to derive indices and keys from the same seeds,
&gt;    even.  I don't see a way to do this without losing forward secrecy,
&gt;    but it might be worth looking at harder.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190211184933</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@uwaterloo.ca</senderEmail><timestampReceived>2019-02-11 18:49:33-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>

Thanks for the proposal, Nick!  I think it's definitely discussion in a
good direction!

On Wed, Feb 06, 2019 at 11:18:12AM +0100, Karsten Loesing wrote:
&gt; On 2019-02-05 18:44, Michael Rogers wrote:
&gt; &gt; Argh, I'm really sorry, I thought I'd reached the end of the proposal
&gt; &gt; but my questions were addressed further down. Sorry for the noise.
&gt; 
&gt; Hang on. The issues you mentioned are indeed addressed in the proposal,
&gt; and there are also solutions given in the proposal. But it might be that
&gt; your solution goes beyond the one in the proposal.
&gt; 
&gt; It's this part in your solution:
&gt; 
&gt; "[...], then send *that relay's index* in its extend cell, so the relay
&gt; receiving the extend cell wouldn't know whether the index was picked
&gt; randomly by a client with no special requirements, or non-randomly by a
&gt; client with special requirements?"
&gt; 
&gt; This is also related to the concern in 3.12 of the proposal where
&gt; falling back to the old mechanism for route selection is said to be
&gt; fingerprintable.
&gt; 
&gt; I'd be curious whether your solution is really fingerprintable.

At some point, you hit the problem that if there's a really unusual port
that not many relays will exit to, and a very-low-bandwidth relay
does support that port, then anyone extending to that relay is pretty
likely doing so in order to exit to that port.  (This happens today, not
just with Walking Onions.)  So the question is whether the solution is
*more* fingerprintable than that.

&gt; for the wonderful future where we have tens of thousands relays.

Think bigger.  :-)

[And to be clear in the proposal itself, I was not _advocating_ using
SNARKs, but rather just pointing out that that's a thing one could
conceivably use if you really wanted to keep the current consensus
format, but still prove that this SNIP was part of it,
Cinderella[0]-style.]

[0] https://www.andrew.cmu.edu/user/bparno/papers/cinderella.pdf

Another issue not addressed by the current proposal is how to handle the
"not all the relays have upgraded" problem.

-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190205072807</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-05 07:28:07-0400</timestampReceived><subject>Re: [tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>

Dear Whonix Community,

On February 4, 2019 11:52:44 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; -----BEGIN PGP SIGNED MESSAGE-----
&gt; Hash: SHA512
&gt; 
&gt; Dear Tor Developers,
&gt; 
&gt; Whonix is applying to be a Google Summer of Code organization this
&gt; year.
&gt; I am writing on behalf of Whonix to ask if the Tor project could be a
&gt; voucher for Whonix. Specifically, in the application form, it asks:
&gt; 
&gt; &gt; If you are a new organization to GSoC, is there a Google employee 
&gt; &gt; or previously participating organization who will vouch for you? If
&gt; &gt; so, please enter their name, contact email, and relationship to
&gt; &gt; your organization.
&gt; 
&gt; Whonix community would be really appreciated if Tor can be our voucher
&gt; this year. And please feel free to contact me to provide the
&gt; information
&gt; described above anytime before the deadline (February 6, 2019 at 20:00
&gt; UTC).
&gt; 
&gt; Thank you very much!
&gt; 
&gt; Cheers,
&gt; iry
&gt; -----BEGIN PGP SIGNATURE-----
&gt; 
&gt; iQIzBAEBCgAdFiEEzKSpZKlpRovTotu+oUtNvG3N1TwFAlxY0EMACgkQoUtNvG3N
&gt; 1TwY/A//SawazcU4EosRFRkF8YJSz3LsRor820uF+X/QovEi5J8EJGaXBgO+Dp+Q
&gt; Ryi/LzmdGwIWfmWJKk+kWpzfIROYkmNWS6xzz+iwZEYvxvJ2QH5twlAWKDWSwFHm
&gt; kz7/6AhWnoq+GnsBF+Eg0jNcxSQGLum89Ul4Y3kll4PYriqpDxzQblYt7qzffJJu
&gt; UJdh9Y5SkSRyX0HThuRgMtCs1l9z7BEY0tkLbUm1pRcU8KuomTy4f1L45T49h7ub
&gt; rfDc4AOBcA8wtX3CF/1oR0AmRo5YvwD9rMNsk4f+bHphdn07iOcwF5kGi6TxA8Va
&gt; fLUflN0cIPnk62RmQPebkHSjcyWi74z4rxe2j7trmiDyN2DI3D7wLxNQPYRzO5/H
&gt; 4YodMAgUkhNluDmJ0Hewq6e3q9js5/6ks1vTGbJjzTW+le2+MOiSiJeZgQYfdF1d
&gt; Fu7Yf3h6HmIs9zg9zv9qf7CUSizBQVqGqnSUVVyMSsSE5xtX0Enri15PodkMac5C
&gt; 87m5JDJIuf6HdsCiJ+cXQsCOoTCVz1rFxUMmH3URIOJQX6POZlYjZ4yir1TVc1Uj
&gt; OkjvsUO89YbnmBpnTJe/0KGS+OjXI+NE3iQfV5d6hIoruqVuIMzL6/O/1Q4onviu
&gt; oFiCp/ilBtDm8lRlXAbKAIKibYPSAPhoO4xN9jI1NIPoWouwusk=
&gt; =xX5B
&gt; -----END PGP SIGNATURE-----

I have forwarded your request to the Tor Core Contributors.

Some of us were at a hackfest and FOSDEM last week. A few are still working or \
travelling. So I am not sure how many of us will check our emails in the next 36 \
hours.

I hope we will have a response for you around 24 hours from now.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190211115945</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-11 11:59:45-0400</timestampReceived><subject>[tor-dev] Proposal Idea: Consensus Options</subject><body>

Hi all,

I have a Tor proposal idea: we should make it easier for tor to get options from the \
consensus.

At the moment, a few tor options are set from the consensus. (If they aren't already \
set in the torrc.) But there's no abstraction in tor's code, so they're all \
implemented slightly differently.

We could refactor the code so these options are much easier to declare. And we could \
provide a graceful upgrade path from off-by-default features, to on-by-default \
features.

1. Tor refactoring

We refactor the tor config code, so that options can be declared as consensus \
options. If the option is configured locally, that value is used. Otherwise, the \
consensus value is used. If there is no configured or consensus value, the default is \
used.

Each entry in the option declaration table would need 3 extra values:
* a flag that tells tor whether to check the consensus
* a minimum permitted value from the consensus
* a maximum permitted value from the consensus

At the same time, we might also want to:
* declare a minimum and maximum value for all options, not just the consensus options
* add a log message fragment that explains the value restriction

So far, this is a refactoring idea. But here's where it gets interesting…

2. Tor authority behaviour change

We also want to gracefully upgrade new features, so that they are on-by-default.

For privacy sensitive features, we would keep the current process:
1. Deploy the feature off-by-default, but make it a consensus option
2. Manually change the consensus parameter so the option is on-by-default
3. Change the next release of Tor so the option is on-by-default
4. When all supported Tor versions have the feature on-by-default, manually remove \
the consensus parameter

This upgrade path allows us to make sure that almost all the network has the same \
behaviour.

But for other features, we could upgrade faster:
1. Deploy the feature off-by-default, but make it a consensus option
2. Change the next release of Tor so the option is on-by-default
3. When the authorities upgrade to the next release, they automatically vote the \
consensus parameter on-by-default 4. When all supported Tor versions have the feature \
on-by-default, remove the flag telling authorities to write the consensus parameter \
from the option 5. When the authorities upgrade to the next release, they \
automatically stop voting for the consensus parameter

This upgrade path turns the option on when a majority of authorities upgrade. We \
wouldn't be able to use it for options where flapping is an issue.

Each option declaration would need one extra value:
* a flag that tells tor authorities whether to write to the consensus

If the consensus parameter is explicitly set on an authority, then it would override \
the default from the option declaration.

I think we could implement this proposal as part of Sponsor 31, which is about \
refactoring tor. We have some tickets for refactoring tor's config code, and making \
it easier to implement optional features.

If anyone wants to help me write it up, let me know!

T

-- 
teor
----------------------------------------------------------------------


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190220142905</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2019-02-20 14:29:05-0400</timestampReceived><subject>Re: [tor-dev] Proposal Idea: Consensus Options</subject><body>

On Mon, Feb 11, 2019 at 7:00 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; Hi all,
&gt; 
&gt; I have a Tor proposal idea: we should make it easier for tor to get options from \
&gt; the consensus. 
&gt; At the moment, a few tor options are set from the consensus. (If they aren't \
&gt; already set in the torrc.) But there's no abstraction in tor's code, so they're all \
&gt; implemented slightly differently. 
&gt; We could refactor the code so these options are much easier to declare. And we \
&gt; could provide a graceful upgrade path from off-by-default features, to \
&gt; on-by-default features.


Hi, Teor!

This is a cool idea, and something to think about as we refactor the
configuration handling code.

One area I'd want a proposal like this to consider is what we'd be
expecting other implementations of the Tor protocol to do.  If we put
an option-setting-feature into the consensus like this, does that
option's behavior in Tor become part of the spec?  I think the
simplest answer here is "yes, the option must be documented as part of
the spec".


&gt; 1. Tor refactoring
&gt; 
&gt; We refactor the tor config code, so that options can be declared as consensus \
&gt; options. If the option is configured locally, that value is used. Otherwise, the \
&gt; consensus value is used. If there is no configured or consensus value, the default \
&gt; is used. 
&gt; Each entry in the option declaration table would need 3 extra values:
&gt; * a flag that tells tor whether to check the consensus
&gt; * a minimum permitted value from the consensus
&gt; * a maximum permitted value from the consensus
&gt; 
&gt; At the same time, we might also want to:
&gt; * declare a minimum and maximum value for all options, not just the consensus \
&gt;                 options
&gt; * add a log message fragment that explains the value restriction

I'd also suggest that we also have an entry that tells us which
consensus parameter to look at, so that the consensus name doesn't
need to be the same as the option's name.  We'd need this for backward
compatibility at any rate.

&gt; So far, this is a refactoring idea. But here's where it gets interesting…
&gt; 
&gt; 2. Tor authority behaviour change
&gt; 
&gt; We also want to gracefully upgrade new features, so that they are on-by-default.
&gt; 
&gt; For privacy sensitive features, we would keep the current process:
&gt; 1. Deploy the feature off-by-default, but make it a consensus option
&gt; 2. Manually change the consensus parameter so the option is on-by-default
&gt; 3. Change the next release of Tor so the option is on-by-default
&gt; 4. When all supported Tor versions have the feature on-by-default, manually remove \
&gt; the consensus parameter 
&gt; This upgrade path allows us to make sure that almost all the network has the same \
&gt; behaviour. 
&gt; But for other features, we could upgrade faster:
&gt; 1. Deploy the feature off-by-default, but make it a consensus option
&gt; 2. Change the next release of Tor so the option is on-by-default
&gt; 3. When the authorities upgrade to the next release, they automatically vote the \
&gt; consensus parameter on-by-default 4. When all supported Tor versions have the \
&gt; feature on-by-default, remove the flag telling authorities to write the consensus \
&gt; parameter from the option 5. When the authorities upgrade to the next release, they \
&gt; automatically stop voting for the consensus parameter 
&gt; This upgrade path turns the option on when a majority of authorities upgrade. We \
&gt; wouldn't be able to use it for options where flapping is an issue.

Relatedly (?), one case that we sometimes have wanted in the past is
the ability to disable an option or enable it for only a range set of
versions.  For example, we'd implement an off-by-default feature as a
consensus option ... and then discover some bug in the implementation
of that feature before we turned it on.


--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205142018</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2019-02-05 14:20:18-0400</timestampReceived><subject>Re: [tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>



teor:
&gt; Dear Whonix Community,
&gt; 
&gt; On February 4, 2019 11:52:44 PM UTC, iry &lt;iry@riseup.net&gt; wrote: 
&gt; Dear Tor Developers,
&gt; 
&gt; Whonix is applying to be a Google Summer of Code organization this 
&gt; year. I am writing on behalf of Whonix to ask if the Tor project
&gt; could be a voucher for Whonix. Specifically, in the application
&gt; form, it asks:
&gt; 
&gt;&gt;&gt;&gt; If you are a new organization to GSoC, is there a Google
&gt;&gt;&gt;&gt; employee or previously participating organization who will
&gt;&gt;&gt;&gt; vouch for you? If so, please enter their name, contact email,
&gt;&gt;&gt;&gt; and relationship to your organization.
&gt; 
&gt; Whonix community would be really appreciated if Tor can be our
&gt; voucher this year. And please feel free to contact me to provide
&gt; the information described above anytime before the deadline
&gt; (February 6, 2019 at 20:00 UTC).
&gt; 
&gt; Thank you very much!
&gt; 
&gt; Cheers, iry
&gt; 
&gt; I have forwarded your request to the Tor Core Contributors.
&gt; 
&gt; Some of us were at a hackfest and FOSDEM last week. A few are still
&gt; working or travelling. So I am not sure how many of us will check
&gt; our emails in the next 36 hours.
&gt; 
&gt; I hope we will have a response for you around 24 hours from now.
&gt; 

Thank you so much for your help, teor!

We really appreciate it!

&gt; T
&gt; 
&gt; -- teor 
&gt; ----------------------------------------------------------------------
&gt;
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190205160609</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-05 16:06:09-0400</timestampReceived><subject>Re: [tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>

Dear Whonix Community,

On February 5, 2019 2:20:18 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; 
&gt; 
&gt; teor:
&gt; &gt; Dear Whonix Community,
&gt; &gt; 
&gt; &gt; On February 4, 2019 11:52:44 PM UTC, iry &lt;iry@riseup.net&gt; wrote: 
&gt; &gt; Dear Tor Developers,
&gt; &gt; 
&gt; &gt; Whonix is applying to be a Google Summer of Code organization this 
&gt; &gt; year. I am writing on behalf of Whonix to ask if the Tor project
&gt; &gt; could be a voucher for Whonix. Specifically, in the application
&gt; &gt; form, it asks:
&gt; &gt; 
&gt; &gt; &gt; &gt; &gt; If you are a new organization to GSoC, is there a Google
&gt; &gt; &gt; &gt; &gt; employee or previously participating organization who will
&gt; &gt; &gt; &gt; &gt; vouch for you? If so, please enter their name, contact email,
&gt; &gt; &gt; &gt; &gt; and relationship to your organization.
&gt; &gt; 
&gt; &gt; Whonix community would be really appreciated if Tor can be our
&gt; &gt; voucher this year. And please feel free to contact me to provide
&gt; &gt; the information described above anytime before the deadline
&gt; &gt; (February 6, 2019 at 20:00 UTC).
&gt; &gt; 
&gt; &gt; Thank you very much!
&gt; &gt; 
&gt; &gt; Cheers, iry
&gt; &gt; 
&gt; &gt; I have forwarded your request to the Tor Core Contributors.
&gt; &gt; 
&gt; &gt; Some of us were at a hackfest and FOSDEM last week. A few are still
&gt; &gt; working or travelling. So I am not sure how many of us will check
&gt; &gt; our emails in the next 36 hours.
&gt; &gt; 
&gt; &gt; I hope we will have a response for you around 24 hours from now.
&gt; &gt; 
&gt; 
&gt; Thank you so much for your help, teor!
&gt; 
&gt; We really appreciate it!

Tor won't be able to vouch for Whonix for GSoC 2019. I understand that you are on a \
tight deadline, so I wanted to let you know as soon as possible.

I have received a range of responses from Tor Core Contributors over the past few \
hours. A number of people raised concerns about the Whonix community's culture, and \
whether it would be a good experience for students.

I hope that we can give a more detailed and helpful response later. But it may take \
us some time, because we are still working through our internal community processes.

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190212112205</emailId><senderName>Katharina Kohls</senderName><senderEmail>katharina.kohls@rub.de</senderEmail><timestampReceived>2019-02-12 11:22:05-0400</timestampReceived><subject>[tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

Hey guys,

currently I am working on a private Tor setup and I repeatedly run into 
issues with the circuit buildup procedure (it's Tor
0.3.5.7  on linux, the setup consists of several debian jessie VMs).
The setup is as follows:
1 Client, 2 V3 Authorities, 6 Relays of which 3 have the ExitRelay 1 
option set.

In the torrc configs of all relays I define a list of fixed exits 
TestingDirAuthVoteExit and fixed guards TestingDirAuthVoteGuard and I 
use DirAuthority to fix the two V3 authorities of my setup.

All nodes bootstrap properly and reach 100%, the authorities both manage 
to vote and exchange information. Also the relays and the client 
bootstrap to 100%. Nevertheless, the consensus seems to lack relays with 
guard flags:

Feb 12 10:35:56.000 [notice] I learned some more directory information, 
but not enough to build a circuit: We need more microdescriptors: we 
have 2/2, and can only build 0% of likely paths. (We have 0% of guards 
bw, 100% of midpoint bw, and 100% of end bw (no exits in consensus, 
using mid) = 0% of path bw.)

Because of this, no default circuits can be built in the client or the 
relays in all logs the following message appears every second:

[warn] Failed to find node for hop #1 of our path. Discarding this 
circuit.

Google says it might be an ntp-sync problem. The VMs are not connected 
to the Internet (but can talk to each other), so I made sure that all 
machines are in sync and use the firewall as NTP server. Sync shouldn't 
be the problem.

In the data_dir/state file I see several guard entries:
Guard in=default rsa_id=[...] nickname=auth01 
sampled_on=2019-01-17T18:33:12 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=[...] nickname=relay03 
sampled_on=2019-01-22T17:17:10 sampled_by=0.3.5.7 
unlisted_since=2019-01-27T11:00:36 listed=0
Guard in=default rsa_id=[...] nickname=relay02 
sampled_on=2019-01-24T22:19:10 sampled_by=0.3.5.7 
unlisted_since=2019-01-29T09:08:59 listed=0
Guard in=default rsa_id=[...] nickname=relay03 
sampled_on=2019-02-06T21:07:36 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=[...] nickname=relay05 
sampled_on=2019-01-27T16:37:38 sampled_by=0.3.5.7 listed=1

The client also seems to receive a complete consensus, at least all 
fingerprints of my setup show up if I fetch the file manually.

Please find below an example of the configs I use for the different 
nodes.

Any help or hints would be great :)
Thanks,
Katharina


# DIRECTORIES, LOGGING
SafeLogging 0
ProtocolWarnings 1
DisableDebuggerAttachment 0
DataDirectory /var/lib/tor
PidFile /var/lib/tor/pid
Log notice file /var/lib/tor/notice.log
Log info file /var/lib/tor/info.log

# CONTACT
ContactInfo ...

# GENERAL
RunAsDaemon 1
AssumeReachable 1
ConnLimit 60
MaxMemInQueues 1507 MB
ShutdownWaitLength 0
HashedControlPassword ...

# FIXED AUTH
DirAuthority auth01 orport=5000 no-v2 v3ident=... ...:7000 
B218B78864CEF4397CEE0AEF61703459EEE64E38
DirAuthority auth02 orport=5000 no-v2 v3ident=... ...:7000 
431E50CDBB0B6FFDD0284A45ABEC875136D980E8

TestingDirAuthVoteExit 
2B74825BE33752B21D17713F88D101F3BADC79BC,E4B1152CDF0E5FE697A3E916716FC363A2A0ACF3,7353D324677B9E7A9A50240339C2C7366B381F64
 TestingDirAuthVoteGuard 
911EDA6CB639AAE955517F02AA4D651E0F7F6EFD,C122CBB79DC660621E352D401AD7F781F8F6D62D,8E574F0C428D235782061F44B2D20A66E4336993


# PORTS
OrPort 5000
ControlPort 9051
SocksPort 9050

# FLAGS
ExitRelay 1

Nickname ...
Address ...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190222054500</emailId><senderName>" () usernamedt"</senderName><senderEmail>usernamedt@protonmail.ch</senderEmail><timestampReceived>2019-02-22 05:45:00-0400</timestampReceived><subject>[tor-dev] GSOC 2019 tor project participation</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hello everyone,

Can someone confirm that tor project is participating at GSOC 2019?
I am a Mathematics and Computer Science student (Russia, Ural Federal University).
Privacy violation and internet censorship became serious problems for me personally \
and for many people in my country. I am looking forward to contribute to tor project \
by implementing OONI Encore style test in browser.

Thanks!


[Attachment #5 (text/html)]

&lt;div&gt;Hello everyone,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Can someone confirm that tor \
project is participating at GSOC 2019?&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am a Mathematics and Computer \
Science student (Russia, Ural Federal University).&lt;br&gt;&lt;/div&gt;&lt;div&gt;Privacy violation \
and internet censorship became serious problems for me personally and for many people \
in my country. I &lt;span&gt;&lt;span title=""&gt;am looking forward to contribute to tor project \
by implementing &lt;/span&gt;&lt;/span&gt;OONI Encore style test in \
browser.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;&lt;span \
title=""&gt;Thanks!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190212172413</emailId><senderName>Gedropi</senderName><senderEmail>gedropi@postinbox.com</senderEmail><timestampReceived>2019-02-12 17:24:13-0400</timestampReceived><subject>[tor-dev] xp + T</subject><body>

[Attachment #2 (--_----------=_154999225327204890)]


I would like to continue to get Tor updates but intend to keep Windows
XP.=C2=A0 How can I do it? Thanks

[Attachment #5 (unknown)]

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style type="text/css"&gt;p.MsoNormal,p.MsoNoSpacing{margin:0}&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;&lt;div style="font-family:helvetica, arial, sans-serif;color:#800000;"&gt;I would \
like to continue to get Tor updates but intend to keep Windows XP.  How can I do \
it? Thanks&lt;br&gt;&lt;/div&gt; &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190218180825</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-02-18 18:08:25-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>


You could give the command-line tool "carml" a try. See here:

   https://carml.readthedocs.io/en/latest/

You'll want to use something like "carml circ *,*,*" to build a 3-hop
circuit through Tor-chosen relays (or replace any of the *'s with a
fingerprint) and then "carml stream --attach &lt;circ-number&gt;" to attach
streams.

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190221215907</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-21 21:59:07-0400</timestampReceived><subject>[tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi All,

#28465 [0] needed a proposal. Feedback is welcome and encouraged. I've
not written a proposal before, so if someone could let me know if I'm
following the process OK (or not) then that is useful too.

Thanks,
Iain.

[0] https://trac.torproject.org/projects/tor/ticket/28465


["xxx-dont-vote-on-package-fingerprints.txt" (text/plain)]

Filename: xxx-dont-vote-on-package-fingerprints.txt
Title: Don't include package fingerprints in consensus documents
Author: Iain R. Learmonth
Created: 2019-02-21
Status: Open
Ticket: #28465

0. Abstract

   I propose modifying the Tor consensus document to remove
   digests of the latest versions of one or more package files, to
   prevent software using Tor from determining its up-to-dateness, and
   to hinder users wanting to verify that they are getting the correct
   software.

1. Introduction

   In proposal 227 [1], to improve the integrity and security of
   updates, a way to authenticate the latest versions of core Tor
   software through the consensus was described. By listing a location
   with this information for each version of each package, we can
   augment the update process of Tor software to authenticate the
   packages it downloads through the Tor consensus. This was
   implemented in tor 0.2.6.3-alpha.

   When looking at modernising our network archive recently [2], I
   came across this line for votes and consensuses. If packages are
   referenced by the consensus then ideally we should archive those
   packages just as we archive referenced descriptors. However, this
   line was never present in any vote archived.

2. Proposal

   We deprecate the "package" line in the specification for votes.

   If the consensus method is at least XX then "package" lines should
   not appear in consensuses.

3. Security Considerations

   This proposal removes a feature that could be used for improved
   security but currently isn't. As such it is extra code in the
   codebase that may have unknown bugs or lead to bugs in the future
   due to unexpected interactions. Overall this should be a good
   thing for security of Core Tor.

4. Compatability Considerations

   A new consensus method is required for this proposal. The
   "package" line was always optional and so no client should be
   depending on it. There are no known consumers of the "package"
   lines (there are none to consume anyway).

A. References

   [1] Nick Mathewson, Mike Perry. "Include package fingerprints in
       consensus documents". Tor Proposal 227, February 2014.
   [2] Iain Learmonth, Karsten Loesing. "Towards modernising data
       collection and archive for the Tor network". Technical Report
       2018-12-001, December 2018.

["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190222160554</emailId><senderName>Cecylia Bocovich</senderName><senderEmail>cohosh@torproject.org</senderEmail><timestampReceived>2019-02-22 16:05:54-0400</timestampReceived><subject>[tor-dev] Anti-censorship discussion with Briar devs</subject><body>

Hi,

I just had a really great conversation with some of the developers at
Briar about the recent work they've done in integrating some pluggable
transports into their messaging application. I thought I would summarize
some key points from the conversation here. In particular, this
information might prove useful for both the metrics and anti-censorship
teams to know how other projects are using our tools and what they would
like help with.

This summary is organized as follows:

I. How they used metrics data
II. Independent reachability tests they performed
III. What they did to integrate pluggable transports into Briar
IV. What they want help with


I. How they used metrics data

One goal the Briar project had was to automatically detect where bridges
are needed so they can be enabled automatically and for Briar to "work
out of the box" with minimal developer overhead as they do not currently
have dedicated anti-censorship funding. Here is the related ticket with
a lot of useful discussion:
https://code.briarproject.org/briar/briar/issues/1266

They wrote a collection of analytics scripts that use both OONI and Tor
Project metrics data to determine where bridges are being blocked.

Source code for the scripts:
https://code.briarproject.org/briar/tor-circumvention-analytics/

Results (outdated): https://grobox.de/tor/bridges.html

They rely mostly on OONI data but also use some Tor metrics to look at
the ratio of bridge users in a country. Their reasoning being that while
OONI shows what doesn't work, Tor metrics data shows what is currently
working.

Source code for Tor metrics script:
https://code.briarproject.org/briar/tor-circumvention-analytics/blob/master/tor-metrics-bridges.py

The ticket linked above has more discussion that might be useful to the
metrics team as well.


II. Independent reachability tests they performed

To validate some of the results from OONI and Tor metrics, they ran a
private bridge and did some reachability tests to it from China. They
found that the bridge was not blocked, however they did not perform
bandwidth tests to determine whether or not obfs4 bridges are being
throttled. This makes sense as briar produces probably fairly low
bandwidth traffic. When I asked them about it they suggested performing
the following test:

Set up obfs4 to forward connections to a local http server that servers
a large, static file. Have a contact in China set up a cron job that
periodically downloads the file from the bridge via obfs4.

Their original reachability test was not running for very long, so it's
still possible that prolonged use would result in its discovery but the
fact that it wasn't blocked suggests that China might be enumerating
bridges through the distribution mechanism rather than by something
identifiable from obfs4 itself. We should perform our own tests to
verify this, and to check for throttling.


III. What they did to integrate pluggable transports into Briar

My understanding from the issue text and commit messages about how briar
decides whether to use pluggable transports is to use the output of
their reachability analysis to determine user needs by country. If Tor
is not blocked, users just use vanilla Tor If it is they use obfs4. If
obfs4 is blocked, then they use meek (meek lite). Right now the
countries that use meek in briar are: China, Iran, Egypt, Belarus,
Turkey, Syria, and Venezuela.

As far as the integration, they wrote some code that makes reproducible
builds of obfs4 and meek and spits out a java/android library:

https://code.briarproject.org/briar/go-reproducer

Briar already uses Tor, so they configure these bridges in the usual way
using a torrc file and a hardcoded, shipped file of bridge information
(which I believe are also the default bridges used by Tor Browser). They
decided they didn't want to maintain any private bridges like the one
they used for their reachability tests. One of the concerns there was
the ability to fingerprint Briar traffic by bridge connection and
differentiate it from other Tor traffic.


IV. What they want help with

Because they do not have dedicated anti-censorship funding, they
mentioned a few things that would help them maintain their pluggable
transport use going forward and ease the integration of pluggable
transports.

The main thing they would like on the metrics side is up-to-date
information about which PT works in which country and where PTs are
needed at all in order to make quick and easy decisions based on
location about which transports to use. They started to work with OONI
to expand their tests but it turned out to be too much work for their
time/funding: https://code.briarproject.org/briar/briar/issues/1414

It's on our roadmap to work with OONI and other censorship measurement
tools (like Censored Planet) to expand our tests so we should get into
contact with them again once we have gotten farther with this.

On the PT development side, they expressed a desire to transfer
maintenance of their reproducible builds of obfs4 and meek to someone
else (that's the go-reproducer code linked above).


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190225094052</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2019-02-25 09:40:52-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2019-02-22 17:05, Cecylia Bocovich wrote:
&gt; [...]

Thanks for summarizing that conversation here!

&gt; The main thing they would like on the metrics side is up-to-date
&gt; information about which PT works in which country and where PTs are
&gt; needed at all in order to make quick and easy decisions based on
&gt; location about which transports to use. They started to work with OONI
&gt; to expand their tests but it turned out to be too much work for their
&gt; time/funding: https://code.briarproject.org/briar/briar/issues/1414

Maybe this was considered before (I didn't follow any links due to lack
of time, sorry), but we do have numbers on bridge users by country and
transport:

https://metrics.torproject.org/userstats-bridge-combined.html?start=2018-11-27&amp;end=2019-02-25&amp;country=ve

They could use that data as input for a tool that outputs which
transport to use in which country.

Please also find the links on that page to the CSV file, the CSV data
format, and how to reproduce the data. Happy to answer questions.

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226141900</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-02-26 14:19:00-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Cecylia Bocovich:
&gt; Hi,
&gt; 
&gt; I just had a really great conversation with some of the developers at
&gt; Briar about the recent work they've done in integrating some pluggable
&gt; transports into their messaging application. I thought I would summarize
&gt; some key points from the conversation here. In particular, this
&gt; information might prove useful for both the metrics and anti-censorship
&gt; teams to know how other projects are using our tools and what they would
&gt; like help with.

Thanks, that's really helpful. FWIW, I think this information is not
only useful for the teams you mentioned but as well for teams that
actually want to implement respective user-facing changes, like the
applications team.

We had a bunch of conversations in the past about how to make sure Tor
Browser is helping the user to choose a proper and secure way of
connecting to the Tor network depending on their location and context.
Some useful tickets, showing where we are and what we think/thought, are:

https://trac.torproject.org/projects/tor/ticket/21951
https://trac.torproject.org/projects/tor/ticket/24527

Those are mostly related to desktop as we have a Tor Launcher there.
I opened a ticket (#29590) to track the mobile specific part, though.

[snip]

&gt; IV. What they want help with
&gt; 
&gt; Because they do not have dedicated anti-censorship funding, they
&gt; mentioned a few things that would help them maintain their pluggable
&gt; transport use going forward and ease the integration of pluggable
&gt; transports.
&gt; 
&gt; The main thing they would like on the metrics side is up-to-date
&gt; information about which PT works in which country and where PTs are
&gt; needed at all in order to make quick and easy decisions based on
&gt; location about which transports to use. They started to work with OONI
&gt; to expand their tests but it turned out to be too much work for their
&gt; time/funding: https://code.briarproject.org/briar/briar/issues/1414
&gt; 
&gt; It's on our roadmap to work with OONI and other censorship measurement
&gt; tools (like Censored Planet) to expand our tests so we should get into
&gt; contact with them again once we have gotten farther with this.
&gt; 
&gt; On the PT development side, they expressed a desire to transfer
&gt; maintenance of their reproducible builds of obfs4 and meek to someone
&gt; else (that's the go-reproducer code linked above).

I think we should be able to provide that with our Tor Browser builds
once we have all the PT pieces sorted out (which is rather soon). So,
probably the easiest way would then be to just copy the respective
binaries we produce over to include them in the Briar software and
pointing to our build process (we could even document building those PTs
as an example in our READMEs if that would be useful). Would that work,
Michael? Or do you need something else here?

Georg






["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226195336</emailId><senderName>Torsten Grote</senderName><senderEmail>t@grobox.de</senderEmail><timestampReceived>2019-02-26 19:53:36-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2/26/19 11:19 AM, Georg Koppen wrote:
&gt; I think we should be able to provide that with our Tor Browser builds
&gt; once we have all the PT pieces sorted out (which is rather soon).

That would be nice!

&gt; So, probably the easiest way would then be to just copy the respective
&gt; binaries we produce over to include them in the Briar software

I assume these binaries are reproducible?

We are currently not including these binaries directly, but publish them
as a library (gradle/maven to jcenter) where Briar and other projects
can get them from.

&gt; and pointing to our build process (we could even document building thos=
e PTs
&gt; as an example in our READMEs if that would be useful).

Currently, we provide reproducible build and verification scripts as
well as Docker containers for people to reproduce these binaries as
conveniently as possible [1]. We currently produce binaries for the
Android CPU architectures as well as for 64-bit Linux.

It would be nice, if there would be the same once we switch to Tor's
binaries.

Kind Regards,
Torsten

[1] https://code.briarproject.org/briar/go-reproducer#go-reproducer


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190227095400</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-02-27 09:54:00-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Torsten Grote:
&gt; On 2/26/19 11:19 AM, Georg Koppen wrote:
&gt;&gt; I think we should be able to provide that with our Tor Browser builds
&gt;&gt; once we have all the PT pieces sorted out (which is rather soon).
&gt; 
&gt; That would be nice!
&gt; 
&gt;&gt; So, probably the easiest way would then be to just copy the respective
&gt;&gt; binaries we produce over to include them in the Briar software
&gt; 
&gt; I assume these binaries are reproducible?

They would be used for Tor Browser which has reproducibility as a hard
requirement, so yes.

&gt; We are currently not including these binaries directly, but publish them
&gt; as a library (gradle/maven to jcenter) where Briar and other projects
&gt; can get them from.

Okay, good to know.

&gt;&gt; and pointing to our build process (we could even document building those PTs
&gt;&gt; as an example in our READMEs if that would be useful).
&gt; 
&gt; Currently, we provide reproducible build and verification scripts as
&gt; well as Docker containers for people to reproduce these binaries as
&gt; conveniently as possible [1]. We currently produce binaries for the
&gt; Android CPU architectures as well as for 64-bit Linux.
&gt; 
&gt; It would be nice, if there would be the same once we switch to Tor's
&gt; binaries.

That should be doable. I'll open a ticket on Trac for that once we get
Tor Browser for Android into stable shape and the dust settles a bit.

Georg

&gt; Kind Regards,
&gt; Torsten
&gt; 
&gt; [1] https://code.briarproject.org/briar/go-reproducer#go-reproducer
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190227181208</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-02-27 18:12:08-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>


On 2/27/19 4:54 AM, Georg Koppen wrote:
&gt; Torsten Grote:
&gt;&gt; On 2/26/19 11:19 AM, Georg Koppen wrote:
&gt;&gt;&gt; I think we should be able to provide that with our Tor Browser builds
&gt;&gt;&gt; once we have all the PT pieces sorted out (which is rather soon).
&gt;&gt; That would be nice!
&gt;&gt;
&gt;&gt;&gt; So, probably the easiest way would then be to just copy the respective
&gt;&gt;&gt; binaries we produce over to include them in the Briar software
&gt;&gt; I assume these binaries are reproducible?
&gt; They would be used for Tor Browser which has reproducibility as a hard
&gt; requirement, so yes.
&gt;
&gt;&gt; We are currently not including these binaries directly, but publish them
&gt;&gt; as a library (gradle/maven to jcenter) where Briar and other projects
&gt;&gt; can get them from.
&gt; Okay, good to know.

It seems to me that Tor Browser should instead perhaps rely on the Briar
build process, at least for Android. I will be switching Orbot and our
AndroidPT library over to the Briar dependency in the next release.

We should also figure out who is doing the source builds, how these are
published as public modules, and who is monitoring and verifying the
reproducibility. This is for both PT's and the current tor-android
binary project that I manage (https://github.com/n8fr8/tor-android). It
would be great to have Tor to be the source for trustworthy binary
builds, available through direct downloads and gradle/maven/cocoapods,
etc. We have talked about this many times in the past.

Related to this, we are also building and publishing PT's as shared
libraries, instead of binaries, which is eventually going to be required
on Android for both tor and obfs4proxy. It isn't all quite working yet,
but will be soon. At some point, we'll have to talk about that whole
transition.

Our goptlib shared library build project is here:
https://gitlab.com/eighthave/goptbundle which is being made available to
app developers here:
https://github.com/guardianproject/AndroidPluggableTransports

+n









_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190222022917</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-22 02:29:17-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 22 Feb 2019, at 07:59, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hi All,
&gt; 
&gt; #28465 [0] needed a proposal. Feedback is welcome and encouraged. I've
&gt; not written a proposal before, so if someone could let me know if I'm
&gt; following the process OK (or not) then that is useful too.
&gt; 
&gt; [0] https://trac.torproject.org/projects/tor/ticket/28465
&gt; 
&gt; &lt;xxx-dont-vote-on-package-fingerprints.txt&gt;

Proposal:

&gt; 0. Abstract
&gt; 
&gt;    I propose modifying the Tor consensus document to remove
&gt;    digests of the latest versions of one or more package files, to
&gt;    prevent software using Tor from determining its up-to-dateness, and
&gt;    to hinder users wanting to verify that they are getting the correct
&gt;    software.

I had to read this paragraph twice to understand it.
The way it's written, it sounds like we're doing a bad thing.
(Until I read the "security" section at the end of the proposal.)

Can you mention the positive aspects in the Abstract?

&gt; 2. Proposal
&gt; 
&gt;    We deprecate the "package" line in the specification for votes.
&gt; 
&gt;    If the consensus method is at least XX then "package" lines should
&gt;    not appear in consensuses.

Let's be a bit more precise:

   We allocate a consensus method when this proposal is implemented.
   Let's call it consensus method N.

   If the consensus method is between 19 and (N-1), "package" lines
   MAY appear in consensuses. If the consensus method is less than
   19, or at least N, "package" lines MUST NOT appear in consensuses.

I'd like to add another part to the proposal:

   Directory authorities stop voting for "package" lines in their
   votes. Changes to votes do not require a new consensus method, so
   this part of the proposal can be implemented separately.

Based on:

https://trac.torproject.org/projects/tor/ticket/28465#comment:1
https://trac.torproject.org/projects/tor/ticket/28465#comment:3

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlxvXn0ACgkQEP6qDnB1
ZypFyA//ahfHyUcBlKYV3h9EUQr3k10K3hUreCi2fByLZ0Nsagn8HSB49HccZ2VG
emZXvGxyy2sp0mdk9NMYgnW7zdD41NFyjO8w8zwIcdoV7UVwPWT2bCsNCiTU+NAf
2Kdurwkmr6zWLoc5W/9QHfKhE37ItK0FQ/GQdIvY0WhyfeBOa9nkh/R2U7z1Jx7Q
kYO9uDx5IOnuQHuJ6GjzYqEZJQAs2bA2tU6jie8QoBkfAOrycPL6Cd0MNx9jPcHm
C09i31ZafCsqeJ9faXsh1gFtMQKOTO4yn5EAJV4xBuK11vFwZfFsaJlG5S71jQjF
e7VlTpSCMSHuw+g5FqbaiDQ1WGDqucqzXqB8caZdKTS6DdAc6wvgFJ0nkxahW/pA
0lPOi2f/w4DKNG4MQNrG/ayT7ln3k3fIS4+2katghwJReF9zerz0JBzr5vGz6BBn
lpQDip91NVH+20+ItdXEbRe9IEyZf60PbEas3Uq+19ZOVh9H5iPTFRbMNoA796+l
d/aPEVVMJjNwGKhjKnilqY+H1FFGA9MGcOBmWBUzORDZF7x2Pmf+8Yz+Q5rvZBPW
m14YK5ND+qAflRYp6GQpQhwUxICR6LOjmAlcIk4xlfoSIAuDAF16FIvCMh43aakv
W/575IzAk3hQDW9vrQBRJbws33b0mow1BPSoBEo51yrNUu23cNo=
=ianx
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190222122912</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2019-02-22 12:29:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

On Thu, Feb 21, 2019 at 9:29 PM teor &lt;teor@riseup.net&gt; wrote:
&gt;
&gt; Hi,
&gt;
&gt; &gt; On 22 Feb 2019, at 07:59, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; &gt;
&gt; &gt; Signed PGP part
&gt; &gt; Hi All,
&gt; &gt;
&gt; &gt; #28465 [0] needed a proposal. Feedback is welcome and encouraged. I've
&gt; &gt; not written a proposal before, so if someone could let me know if I'm
&gt; &gt; following the process OK (or not) then that is useful too.
&gt; &gt;
&gt; &gt; [0] https://trac.torproject.org/projects/tor/ticket/28465
&gt; &gt;
&gt; &gt; &lt;xxx-dont-vote-on-package-fingerprints.txt&gt;
&gt;
&gt; Proposal:
&gt;
&gt; &gt; 0. Abstract
&gt; &gt;
&gt; &gt;    I propose modifying the Tor consensus document to remove
&gt; &gt;    digests of the latest versions of one or more package files, to
&gt; &gt;    prevent software using Tor from determining its up-to-dateness, and
&gt; &gt;    to hinder users wanting to verify that they are getting the correct
&gt; &gt;    software.
&gt;
&gt; I had to read this paragraph twice to understand it.
&gt; The way it's written, it sounds like we're doing a bad thing.
&gt; (Until I read the "security" section at the end of the proposal.)
&gt;
&gt; Can you mention the positive aspects in the Abstract?
&gt;
&gt; &gt; 2. Proposal
&gt; &gt;
&gt; &gt;    We deprecate the "package" line in the specification for votes.
&gt; &gt;
&gt; &gt;    If the consensus method is at least XX then "package" lines should
&gt; &gt;    not appear in consensuses.
&gt;
&gt; Let's be a bit more precise:
&gt;
&gt;    We allocate a consensus method when this proposal is implemented.
&gt;    Let's call it consensus method N.
&gt;
&gt;    If the consensus method is between 19 and (N-1), "package" lines
&gt;    MAY appear in consensuses. If the consensus method is less than
&gt;    19, or at least N, "package" lines MUST NOT appear in consensuses.


I'd suggest a slightly different phrasing above: There is no "MAY" in
the contents of a consensus, to the extent that the contents of the
consensus are supposed to be deterministic given its inputs.

Instead I'd go with a phrasing like,
  "Authorities will continue computing consensus package lines in the
consensus if the consensus method is between 19 and (N-1).  If the
consensus method is N or later, they omit these lines."

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190222161042</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-22 16:10:42-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi all,

On 22/02/2019 12:29, Nick Mathewson wrote:
&gt;&gt; I had to read this paragraph twice to understand it.
&gt;&gt; The way it's written, it sounds like we're doing a bad thing.
&gt;&gt; (Until I read the "security" section at the end of the proposal.)
&gt;&gt;
&gt;&gt; Can you mention the positive aspects in the Abstract?

Rewritten this.

&gt; Instead I'd go with a phrasing like,
&gt;   "Authorities will continue computing consensus package lines in the
&gt; consensus if the consensus method is between 19 and (N-1).  If the
&gt; consensus method is N or later, they omit these lines."

This sounds good too.

Updated draft is attached.

Thanks,
Iain.

["xxx-dont-vote-on-package-fingerprints.txt" (text/plain)]

Filename: xxx-dont-vote-on-package-fingerprints.txt
Title: Don't include package fingerprints in consensus documents
Author: Iain R. Learmonth
Created: 2019-02-21
Status: Open
Ticket: #28465

0. Abstract

   I propose modifying the Tor consensus document to remove
   digests of the latest versions of package files. These "package"
   lines were never used by any directory authority and so add
   additional complexity to the consensus voting mechanisms while
   adding no additional value.

1. Introduction

   In proposal 227 [1], to improve the integrity and security of
   updates, a way to authenticate the latest versions of core Tor
   software through the consensus was described. By listing a location
   with this information for each version of each package, we can
   augment the update process of Tor software to authenticate the
   packages it downloads through the Tor consensus. This was
   implemented in tor 0.2.6.3-alpha.

   When looking at modernising our network archive recently [2], I
   came across this line for votes and consensuses. If packages are
   referenced by the consensus then ideally we should archive those
   packages just as we archive referenced descriptors. However, this
   line was never present in any vote archived.

2. Proposal

   We deprecate the "package" line in the specification for votes.

   Directory authorities stop voting for "package" lines in their
   votes. Changes to votes do not require a new consensus method, so
   this part of the proposal can be implemented separately.

   We allocate a consensus method when this proposal is implemented.
   Let's call it consensus method N.

   Authorities will continue computing consensus package lines in the
   consensus if the consensus method is between 19 and (N-1).  If the
   consensus method is N or later, they omit these lines.

3. Security Considerations

   This proposal removes a feature that could be used for improved
   security but currently isn't. As such it is extra code in the
   codebase that may have unknown bugs or lead to bugs in the future
   due to unexpected interactions. Overall this should be a good
   thing for security of Core Tor.

4. Compatability Considerations

   A new consensus method is required for this proposal. The
   "package" line was always optional and so no client should be
   depending on it. There are no known consumers of the "package"
   lines (there are none to consume anyway).

A. References

   [1] Nick Mathewson, Mike Perry. "Include package fingerprints in
       consensus documents". Tor Proposal 227, February 2014.
   [2] Iain Learmonth, Karsten Loesing. "Towards modernising data
       collection and archive for the Tor network". Technical Report
       2018-12-001, December 2018.

B. Acknowledgements

   Thanks to teor and Nick Mathewson for their comments and
   suggestions on this proposal.

["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190225233012</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-25 23:30:12-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 23 Feb 2019, at 02:10, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; Signed PGP part
&gt; Hi all,
&gt; 
&gt; On 22/02/2019 12:29, Nick Mathewson wrote:
&gt;&gt;&gt; I had to read this paragraph twice to understand it.
&gt;&gt;&gt; The way it's written, it sounds like we're doing a bad thing.
&gt;&gt;&gt; (Until I read the "security" section at the end of the proposal.)
&gt;&gt;&gt; 
&gt;&gt;&gt; Can you mention the positive aspects in the Abstract?
&gt; 
&gt; Rewritten this.
&gt; 
&gt;&gt; Instead I'd go with a phrasing like,
&gt;&gt;  "Authorities will continue computing consensus package lines in the
&gt;&gt; consensus if the consensus method is between 19 and (N-1).  If the
&gt;&gt; consensus method is N or later, they omit these lines."
&gt; 
&gt; This sounds good too.
&gt; 
&gt; Updated draft is attached.

Thanks!

Looks good to me, let's merge it as an "accepted" proposal?

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlx0eoQACgkQEP6qDnB1
Zyqw4xAAg9Qg6cS/oR1hE1YWyLrmJ1N8Nj3RLGbzDzhhpYmtSTVFO3gxwXWGbkiZ
3v8t2NzY+3xjOif16YLhedvC2vBv0ZxOj/4veT3GMGZ6XPMf9MWcHvKUnfdV1rWf
wLhrqkyFEP2DMKnQwizlwTRImUJldG7eyIoCJjKZu0jWt+N/W8J+nDg+kwdoPjot
CMCFLtM7J/nzjVF0eK9RsVt5T0487bwW3j0gZ9wu4I7FApRPsSS7/AZWrQx+0VvX
DiLZIPD6VXZfL5SFPVUgaWfEq64AAMIU/jn4Nl7ZcRuTFUl5jJE8duPoJ8gD3RDC
BmLpblxKVVy+4rEeO1e+J4IZd/Wij85sxd68MEDeG6swGjfNH8ljFWZW4pGbi1be
z1m3QzeSKLmRiH08grJn+WLhLclfpjJwVPFij+om9x/vGX7NvX+kK4Ykd1/MESnl
6FL+w6Va8uo6myqwGVs+RdLL74rwO4EXGf9OVD95MHuJjS7CQgwvifA8fzBj7G9b
bmHcZeFQhwTDR2N5noIF6UWUmduSkRQClJu47/DnNQqs9f9HpM4gxd86JR4UB9mt
JALzgW82WooTQSFJdZ1t1filhMfboJ1KdNVYy1K2IvSDK0qNudQzS+lT3YgmdCyn
IZrp3v/spzrAqkgFk5kdpEF2gtDtOG3v+zZaCA7Tw9+hEIz8bd0=
=GkX/
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226163018</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-26 16:30:18-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 25/02/2019 23:30, teor wrote:
&gt; Looks good to me, let's merge it as an "accepted" proposal?

Is there some action I should take here like opening a PR or does
someone just pick up the text and commit it?

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190218181532</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2019-02-18 18:15:32-0400</timestampReceived><subject>[tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

I am a PhD student, and am working on some measurements in Tor.
I am stuck at a point where i need to send multiple applications(streams)
traffic through a single circuit.
I am currently using torsocks/torify to send traffic of these multiple
applications through Tor.
The main problem is that, despite trying many different ways to achieve the
same (sending multiple streams through a single circuit), i am not
successful.

Things i have tried :
1.) Force Tor process to create only a single circuit at a time preventing
any new circuit creation, so that any new stream would be attached to this
only available circuit. To acheive this i have set the following Tor
options :
set __DisablePredictedCircuits to 1
set MaxClientCircuitsPending to 1
set newcircuitperiod to 999999999
set maxcircuitdirtiness to 999999999
The problem with the above method is that it seems to work sometimes
randomly. But most of the times for some reason, a new circuit is still
created.

2.) Next, i assumed that maybe running torify multiple times for each
application is the culprit, as it may try to create new circuit for each
run. So i created a new bidirectional stream using socat, which listens on
a local TCP port, and forwards the data to the Tor SOCKS port assuming that
it will lead to a singe connection to local SOCKS.
Even this did not work and still new circuits were created randomly.

3.) Next i tried to attach streams to circuits manually, using the stem
library following the link :
https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection
. This seemed to work initially, but then after every 4-5 runs, the streams
seemed to detach automatically. Moreover, the original circuit crashed too.

It would be great, if someone could tell a simple way to achieve the same,
or would point me to any mistakes that can be improved in the above
methodologies to make them work.

Regards

Piyush

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hello all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am a PhD student, and am \
working on some measurements in Tor.&lt;/div&gt;&lt;div&gt;I am stuck at a point where i need to \
send multiple applications(streams) traffic through a single circuit.&lt;/div&gt;&lt;div&gt;I am \
currently using torsocks/torify to send traffic of these multiple applications \
through Tor.&lt;/div&gt;&lt;div&gt;The  main problem is that, despite trying many different ways \
to achieve the  same (sending multiple streams through a single circuit), i am not 
successful.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Things i have tried :&lt;/div&gt;&lt;div&gt;1.)
 Force Tor process to create only a single circuit at a time preventing 
any new circuit creation, so that any new stream would be attached to 
this only available circuit. To acheive this i have set the following 
Tor options : &lt;br&gt;&lt;/div&gt;&lt;div&gt;set __DisablePredictedCircuits to 1&lt;br&gt;set \
MaxClientCircuitsPending to 1&lt;br&gt;set newcircuitperiod to 999999999&lt;br&gt;set \
maxcircuitdirtiness to 999999999&lt;/div&gt;&lt;div&gt;The  problem with the above method is that \
it seems to work sometimes  randomly. But most of the times for some reason, a new \
circuit is still  created.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.) Next, i assumed that maybe \
running  torify multiple times for each application is the culprit, as it may 
try to create new circuit for each run. So i created a new bidirectional
 stream using socat, which listens on a local TCP port, and forwards the
 data to the Tor SOCKS port assuming that it will lead to a singe 
connection to local SOCKS.&lt;br&gt;&lt;/div&gt;&lt;div&gt;Even this did not work and still new \
circuits were created randomly.   &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3.)  Next i tried to \
attach streams to circuits manually, using the stem  library following the link : 
&lt;a href="https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-se \
lection"&gt;https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection&lt;/a&gt;
                
 . This seemed to work initially, but then after every 4-5 runs, the 
streams seemed to detach automatically. Moreover, the original circuit 
crashed too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It would be great, if someone 
could tell a simple way to achieve the same, or would point me to any 
mistakes that can be improved in the above methodologies to make them 
work.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir="ltr" class="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;&lt;br&gt;&lt;/div&gt;Piyush&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190220020946</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2019-02-20 02:09:46-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

On Mon, Feb 18, 2019 at 1:04 PM Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; wrote:
&gt; 
&gt; Hello all,
&gt; 
&gt; I am a PhD student, and am working on some measurements in Tor.
&gt; I am stuck at a point where i need to send multiple applications(streams) traffic \
&gt; through a single circuit. I am currently using torsocks/torify to send traffic of \
&gt; these multiple applications through Tor. The main problem is that, despite trying \
&gt; many different ways to achieve the same (sending multiple streams through a single \
&gt; circuit), i am not successful. 
&gt; Things i have tried :
&gt; 1.) Force Tor process to create only a single circuit at a time preventing any new \
&gt; circuit creation, so that any new stream would be attached to this only available \
&gt; circuit. To acheive this i have set the following Tor options : set \
&gt; __DisablePredictedCircuits to 1 set MaxClientCircuitsPending to 1
&gt; set newcircuitperiod to 999999999
&gt; set maxcircuitdirtiness to 999999999
&gt; The problem with the above method is that it seems to work sometimes randomly. But \
&gt; most of the times for some reason, a new circuit is still created. 
&gt; 2.) Next, i assumed that maybe running torify multiple times for each application \
&gt; is the culprit, as it may try to create new circuit for each run. So i created a \
&gt; new bidirectional stream using socat, which listens on a local TCP port, and \
&gt; forwards the data to the Tor SOCKS port assuming that it will lead to a singe \
&gt; connection to local SOCKS. Even this did not work and still new circuits were \
&gt; created randomly. 
&gt; 3.) Next i tried to attach streams to circuits manually, using the stem library \
&gt; following the link : \
&gt; https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection \
&gt; . This seemed to work initially, but then after every 4-5 runs, the streams seemed \
&gt; to detach automatically. Moreover, the original circuit crashed too.

The stem approach (#3) ought to work in general -- the information
here isn't enough to tell what the problem is, exactly. Is it possible
that the circuit you are constructing is failing for some reason?

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190220125059</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2019-02-20 12:50:59-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

[Attachment #2 (multipart/alternative)]


After a lot of debugging, it seems that the reason for streams failing is
as follows :
As soon as a new stream is made, it goes into the NEW state according to
Torctl logs.
Then with stem or carml running, they try to attach it to the specified
circuit.
As soon as the stream is attached, it moves to the SENTCONNECT, and if it
doesn't succeed, the state of that stream again changes to NEW after which
the connection fails (the stream waits for the 120s then gets closed
automatically with error code REASON_TIMEOUT).
A point i noted was that, a stream is in the SENTCONNECT state for a very
short duration (fraction of seconds).

Other times, when the above process does not happen, the streams
successfully move to the SUCCEEDED state after SENTCONNECT and are served
through the specified circuit.
But this behavior seems to be completely random. Is there a way to resolve
this issue?

@meejah : carml had the same problem as with stem as already explained
above.
@Nick Mathewson : Yes there are some instances where the circuit creation
itself takes a lot of time and fails sometimes. But those cases are already
handled. The main problem as we could drill down is explained above.


Regards
Piyush



On Wed, Feb 20, 2019 at 7:40 AM Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:

&gt; On Mon, Feb 18, 2019 at 1:04 PM Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; Hello all,
&gt; &gt;
&gt; &gt; I am a PhD student, and am working on some measurements in Tor.
&gt; &gt; I am stuck at a point where i need to send multiple
&gt; applications(streams) traffic through a single circuit.
&gt; &gt; I am currently using torsocks/torify to send traffic of these multiple
&gt; applications through Tor.
&gt; &gt; The main problem is that, despite trying many different ways to achieve
&gt; the same (sending multiple streams through a single circuit), i am not
&gt; successful.
&gt; &gt;
&gt; &gt; Things i have tried :
&gt; &gt; 1.) Force Tor process to create only a single circuit at a time
&gt; preventing any new circuit creation, so that any new stream would be
&gt; attached to this only available circuit. To acheive this i have set the
&gt; following Tor options :
&gt; &gt; set __DisablePredictedCircuits to 1
&gt; &gt; set MaxClientCircuitsPending to 1
&gt; &gt; set newcircuitperiod to 999999999
&gt; &gt; set maxcircuitdirtiness to 999999999
&gt; &gt; The problem with the above method is that it seems to work sometimes
&gt; randomly. But most of the times for some reason, a new circuit is still
&gt; created.
&gt; &gt;
&gt; &gt; 2.) Next, i assumed that maybe running torify multiple times for each
&gt; application is the culprit, as it may try to create new circuit for each
&gt; run. So i created a new bidirectional stream using socat, which listens on
&gt; a local TCP port, and forwards the data to the Tor SOCKS port assuming that
&gt; it will lead to a singe connection to local SOCKS.
&gt; &gt; Even this did not work and still new circuits were created randomly.
&gt; &gt;
&gt; &gt; 3.) Next i tried to attach streams to circuits manually, using the stem
&gt; library following the link :
&gt; https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection
&gt; . This seemed to work initially, but then after every 4-5 runs, the streams
&gt; seemed to detach automatically. Moreover, the original circuit crashed too.
&gt;
&gt; The stem approach (#3) ought to work in general -- the information
&gt; here isn't enough to tell what the problem is, exactly. Is it possible
&gt; that the circuit you are constructing is failing for some reason?
&gt;
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;After a lot of debugging, it seems that the reason for streams \
failing is as follows : &lt;br&gt;&lt;/div&gt;&lt;div&gt;As soon as a new stream is made, it goes into \
the NEW state according to Torctl logs.&lt;/div&gt;&lt;div&gt;Then with stem or carml running, \
they try to attach it to the specified circuit.&lt;/div&gt;&lt;div&gt;As soon as the stream is \
attached, it moves to the SENTCONNECT, and if it doesn't succeed, the state of \
that stream again changes to NEW after which the connection fails (the stream waits \
for the 120s then gets closed automatically with error code \
REASON_TIMEOUT).&lt;/div&gt;&lt;div&gt;A point i noted was that, a stream is in the SENTCONNECT \
state for a very short duration (fraction of seconds).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Other \
times, when the above process does not happen, the streams successfully move to the \
SUCCEEDED state after SENTCONNECT and are served through the specified \
circuit.&lt;/div&gt;&lt;div&gt;But this behavior seems to be completely random. Is there a way to \
resolve this issue?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@meejah : carml had the same problem as \
with stem as already explained above.&lt;/div&gt;&lt;div&gt;@Nick Mathewson : Yes there are some \
instances where the circuit creation itself takes a lot of time and fails sometimes. \
But those cases are already handled. The main problem as we could drill down is \
explained above. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir="ltr" \
class="m_8721858403668872820gmail_signature" data-smartmail="gmail_signature"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;Piyush&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, Feb 20, 2019 at 7:40 AM \
Nick Mathewson &lt;&lt;a href="mailto:nickm@alum.mit.edu" \
target="_blank"&gt;nickm@alum.mit.edu&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;On Mon, Feb 18, 2019 at 1:04 PM Piyush Kumar \
Sharma &lt;&lt;a href="mailto:piyushs@iiitd.ac.in" \
target="_blank"&gt;piyushs@iiitd.ac.in&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; Hello all,&lt;br&gt;
&gt;&lt;br&gt;
&gt; I am a PhD student, and am working on some measurements in Tor.&lt;br&gt;
&gt; I am stuck at a point where i need to send multiple applications(streams) \
traffic through a single circuit.&lt;br&gt; &gt; I am currently using torsocks/torify to \
send traffic of these multiple applications through Tor.&lt;br&gt; &gt; The main problem is \
that, despite trying many different ways to achieve the same (sending multiple \
streams through a single circuit), i am not successful.&lt;br&gt; &gt;&lt;br&gt;
&gt; Things i have tried :&lt;br&gt;
&gt; 1.) Force Tor process to create only a single circuit at a time preventing any \
new circuit creation, so that any new stream would be attached to this only available \
circuit. To acheive this i have set the following Tor options :&lt;br&gt; &gt; set \
__DisablePredictedCircuits to 1&lt;br&gt; &gt; set MaxClientCircuitsPending to 1&lt;br&gt;
&gt; set newcircuitperiod to 999999999&lt;br&gt;
&gt; set maxcircuitdirtiness to 999999999&lt;br&gt;
&gt; The problem with the above method is that it seems to work sometimes randomly. \
But most of the times for some reason, a new circuit is still created.&lt;br&gt; &gt;&lt;br&gt;
&gt; 2.) Next, i assumed that maybe running torify multiple times for each \
application is the culprit, as it may try to create new circuit for each run. So i \
created a new bidirectional stream using socat, which listens on a local TCP port, \
and forwards the data to the Tor SOCKS port assuming that it will lead to a singe \
connection to local SOCKS.&lt;br&gt; &gt; Even this did not work and still new circuits \
were created randomly.&lt;br&gt; &gt;&lt;br&gt;
&gt; 3.) Next i tried to attach streams to circuits manually, using the stem library \
following the link : &lt;a \
href="https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection" \
rel="noreferrer" target="_blank"&gt;https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection&lt;/a&gt; \
. This seemed to work initially, but then after every 4-5 runs, the streams seemed to \
detach automatically. Moreover, the original circuit crashed too.&lt;br&gt; &lt;br&gt;
The stem approach (#3) ought to work in general -- the information&lt;br&gt;
here isn't enough to tell what the problem is, exactly. Is it possible&lt;br&gt;
that the circuit you are constructing is failing for some reason?&lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
Nick&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226204950</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-02-26 20:49:50-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; writes:

&gt; Are there any possible reasons as to why this might be happening and
&gt; any possible fixes for this situation?

What is your application doing?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190226205446</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2019-02-26 20:54:46-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

[Attachment #2 (multipart/alternative)]


The problem got resolved, once I closely analyzed the tor INFO logs.
Main problem was that the exit nodes in the circuit were refusing
connections due to their exit policies, because our application ran on some
random ports.
Running out application on tor exit supported ports worked for a while.

But a new problem arised once the above was resolved i.e. tor was dropping
connections again giving the reason to be "We tried for 10 seconds to
connect to &lt;server_ip&gt; using exit &lt;exit-node-fingerprint&gt;~&lt;exit-node-nick&gt;
at &lt;exit-node-ip&gt;. Retrying on a new circuit."

I've been trying to analyse the INFO level logs, but haven't been able to
find more information as why this error is happening.

Are there any possible reasons as to why this might be happening and any
possible fixes for this situation?

On Wed, 20 Feb 2019, 18:08 Piyush Kumar Sharma, &lt;piyushs@iiitd.ac.in&gt; wrote:

&gt; After a lot of debugging, it seems that the reason for streams failing is
&gt; as follows :
&gt; As soon as a new stream is made, it goes into the NEW state according to
&gt; Torctl logs.
&gt; Then with stem or carml running, they try to attach it to the specified
&gt; circuit.
&gt; As soon as the stream is attached, it moves to the SENTCONNECT, and if it
&gt; doesn't succeed, the state of that stream again changes to NEW after which
&gt; the connection fails (the stream waits for the 120s then gets closed
&gt; automatically with error code REASON_TIMEOUT).
&gt; A point i noted was that, a stream is in the SENTCONNECT state for a very
&gt; short duration (fraction of seconds).
&gt;
&gt; Other times, when the above process does not happen, the streams
&gt; successfully move to the SUCCEEDED state after SENTCONNECT and are served
&gt; through the specified circuit.
&gt; But this behavior seems to be completely random. Is there a way to resolve
&gt; this issue?
&gt;
&gt; @meejah : carml had the same problem as with stem as already explained
&gt; above.
&gt; @Nick Mathewson : Yes there are some instances where the circuit creation
&gt; itself takes a lot of time and fails sometimes. But those cases are already
&gt; handled. The main problem as we could drill down is explained above.
&gt;
&gt;
&gt; Regards
&gt; Piyush
&gt;
&gt;
&gt;
&gt; On Wed, Feb 20, 2019 at 7:40 AM Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt;
&gt;&gt; On Mon, Feb 18, 2019 at 1:04 PM Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt;
&gt;&gt; wrote:
&gt;&gt; &gt;
&gt;&gt; &gt; Hello all,
&gt;&gt; &gt;
&gt;&gt; &gt; I am a PhD student, and am working on some measurements in Tor.
&gt;&gt; &gt; I am stuck at a point where i need to send multiple
&gt;&gt; applications(streams) traffic through a single circuit.
&gt;&gt; &gt; I am currently using torsocks/torify to send traffic of these multiple
&gt;&gt; applications through Tor.
&gt;&gt; &gt; The main problem is that, despite trying many different ways to achieve
&gt;&gt; the same (sending multiple streams through a single circuit), i am not
&gt;&gt; successful.
&gt;&gt; &gt;
&gt;&gt; &gt; Things i have tried :
&gt;&gt; &gt; 1.) Force Tor process to create only a single circuit at a time
&gt;&gt; preventing any new circuit creation, so that any new stream would be
&gt;&gt; attached to this only available circuit. To acheive this i have set the
&gt;&gt; following Tor options :
&gt;&gt; &gt; set __DisablePredictedCircuits to 1
&gt;&gt; &gt; set MaxClientCircuitsPending to 1
&gt;&gt; &gt; set newcircuitperiod to 999999999
&gt;&gt; &gt; set maxcircuitdirtiness to 999999999
&gt;&gt; &gt; The problem with the above method is that it seems to work sometimes
&gt;&gt; randomly. But most of the times for some reason, a new circuit is still
&gt;&gt; created.
&gt;&gt; &gt;
&gt;&gt; &gt; 2.) Next, i assumed that maybe running torify multiple times for each
&gt;&gt; application is the culprit, as it may try to create new circuit for each
&gt;&gt; run. So i created a new bidirectional stream using socat, which listens on
&gt;&gt; a local TCP port, and forwards the data to the Tor SOCKS port assuming that
&gt;&gt; it will lead to a singe connection to local SOCKS.
&gt;&gt; &gt; Even this did not work and still new circuits were created randomly.
&gt;&gt; &gt;
&gt;&gt; &gt; 3.) Next i tried to attach streams to circuits manually, using the stem
&gt;&gt; library following the link :
&gt;&gt; https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection
&gt;&gt; . This seemed to work initially, but then after every 4-5 runs, the streams
&gt;&gt; seemed to detach automatically. Moreover, the original circuit crashed too.
&gt;&gt;
&gt;&gt; The stem approach (#3) ought to work in general -- the information
&gt;&gt; here isn't enough to tell what the problem is, exactly. Is it possible
&gt;&gt; that the circuit you are constructing is failing for some reason?
&gt;&gt;
&gt;&gt; --
&gt;&gt; Nick
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;The problem got resolved, once I closely analyzed the tor INFO \
logs.&lt;div dir="auto"&gt;Main problem was that the exit nodes in the circuit were \
refusing connections due to their exit policies, because our application ran on some \
random ports.&lt;/div&gt;&lt;div dir="auto"&gt;Running out application on tor exit supported \
ports worked for a while.&lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;But a new \
problem arised once the above was resolved i.e. tor was dropping connections again \
giving the reason to be "We tried for 10 seconds to connect to &lt;server_ip&gt; \
using exit &lt;exit-node-fingerprint&gt;~&lt;exit-node-nick&gt; at \
&lt;exit-node-ip&gt;. Retrying on a new circuit."  &lt;/div&gt;&lt;div \
dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;I've been trying to analyse the INFO level \
logs, but haven't been able to find more information as why this error is \
happening.  &lt;/div&gt;&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="auto"&gt;Are there any possible \
reasons as to why this might be happening and any possible fixes for this \
situation?&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;On Wed, 20 Feb 2019, 18:08 Piyush Kumar Sharma, &lt;&lt;a \
href="mailto:piyushs@iiitd.ac.in"&gt;piyushs@iiitd.ac.in&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;After a lot of \
debugging, it seems that the reason for streams failing is as follows : \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;As soon as a new stream is made, it goes into the NEW state according \
to Torctl logs.&lt;/div&gt;&lt;div&gt;Then with stem or carml running, they try to attach it to \
the specified circuit.&lt;/div&gt;&lt;div&gt;As soon as the stream is attached, it moves to the \
SENTCONNECT, and if it doesn't succeed, the state of that stream again changes to \
NEW after which the connection fails (the stream waits for the 120s then gets closed \
automatically with error code REASON_TIMEOUT).&lt;/div&gt;&lt;div&gt;A point i noted was that, a \
stream is in the SENTCONNECT state for a very short duration (fraction of \
seconds).&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Other times, when the above process does not \
happen, the streams successfully move to the SUCCEEDED state after SENTCONNECT and \
are served through the specified circuit.&lt;/div&gt;&lt;div&gt;But this behavior seems to be \
completely random. Is there a way to resolve this \
issue?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;@meejah : carml had the same problem as with stem as \
already explained above.&lt;/div&gt;&lt;div&gt;@Nick Mathewson : Yes there are some instances \
where the circuit creation itself takes a lot of time and fails sometimes. But those \
cases are already handled. The main problem as we could drill down is explained \
above. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div dir="ltr" \
class="m_-6076831879042259119m_8721858403668872820gmail_signature" \
data-smartmail="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;Piyush&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, Feb 20, 2019 at 7:40 AM \
Nick Mathewson &lt;&lt;a href="mailto:nickm@alum.mit.edu" target="_blank" \
rel="noreferrer"&gt;nickm@alum.mit.edu&lt;/a&gt;&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;On Mon, Feb 18, 2019 at 1:04 PM Piyush Kumar \
Sharma &lt;&lt;a href="mailto:piyushs@iiitd.ac.in" target="_blank" \
rel="noreferrer"&gt;piyushs@iiitd.ac.in&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; Hello all,&lt;br&gt;
&gt;&lt;br&gt;
&gt; I am a PhD student, and am working on some measurements in Tor.&lt;br&gt;
&gt; I am stuck at a point where i need to send multiple applications(streams) \
traffic through a single circuit.&lt;br&gt; &gt; I am currently using torsocks/torify to \
send traffic of these multiple applications through Tor.&lt;br&gt; &gt; The main problem is \
that, despite trying many different ways to achieve the same (sending multiple \
streams through a single circuit), i am not successful.&lt;br&gt; &gt;&lt;br&gt;
&gt; Things i have tried :&lt;br&gt;
&gt; 1.) Force Tor process to create only a single circuit at a time preventing any \
new circuit creation, so that any new stream would be attached to this only available \
circuit. To acheive this i have set the following Tor options :&lt;br&gt; &gt; set \
__DisablePredictedCircuits to 1&lt;br&gt; &gt; set MaxClientCircuitsPending to 1&lt;br&gt;
&gt; set newcircuitperiod to 999999999&lt;br&gt;
&gt; set maxcircuitdirtiness to 999999999&lt;br&gt;
&gt; The problem with the above method is that it seems to work sometimes randomly. \
But most of the times for some reason, a new circuit is still created.&lt;br&gt; &gt;&lt;br&gt;
&gt; 2.) Next, i assumed that maybe running torify multiple times for each \
application is the culprit, as it may try to create new circuit for each run. So i \
created a new bidirectional stream using socat, which listens on a local TCP port, \
and forwards the data to the Tor SOCKS port assuming that it will lead to a singe \
connection to local SOCKS.&lt;br&gt; &gt; Even this did not work and still new circuits \
were created randomly.&lt;br&gt; &gt;&lt;br&gt;
&gt; 3.) Next i tried to attach streams to circuits manually, using the stem library \
following the link : &lt;a \
href="https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection&lt;/a&gt; \
. This seemed to work initially, but then after every 4-5 runs, the streams seemed to \
detach automatically. Moreover, the original circuit crashed too.&lt;br&gt; &lt;br&gt;
The stem approach (#3) ought to work in general -- the information&lt;br&gt;
here isn't enough to tell what the problem is, exactly. Is it possible&lt;br&gt;
that the circuit you are constructing is failing for some reason?&lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
Nick&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226211436</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2019-02-26 21:14:36-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

[Attachment #2 (multipart/alternative)]


The application is doing a voice call using mumble.

On Wed, 27 Feb 2019, 02:21 meejah, &lt;meejah@meejah.ca&gt; wrote:

&gt; Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; writes:
&gt;
&gt; &gt; Are there any possible reasons as to why this might be happening and
&gt; &gt; any possible fixes for this situation?
&gt;
&gt; What is your application doing?
&gt;
&gt; --
&gt; meejah
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;The application is doing a voice call using mumble.&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, 27 Feb 2019, 02:21 \
meejah, &lt;&lt;a href="mailto:meejah@meejah.ca"&gt;meejah@meejah.ca&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;Piyush Kumar Sharma &lt;&lt;a \
href="mailto:piyushs@iiitd.ac.in" target="_blank" \
rel="noreferrer"&gt;piyushs@iiitd.ac.in&lt;/a&gt;&gt; writes:&lt;br&gt; &lt;br&gt;
&gt; Are there any possible reasons as to why this might be happening and&lt;br&gt;
&gt; any possible fixes for this situation?&lt;br&gt;
&lt;br&gt;
What is your application doing?&lt;br&gt;
&lt;br&gt;
-- &lt;br&gt;
meejah&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226213425</emailId><senderName>Mirimir</senderName><senderEmail>mirimir@riseup.net</senderEmail><timestampReceived>2019-02-26 21:34:25-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

On 02/26/2019 02:02 PM, Piyush Kumar Sharma wrote:
&gt; The application is doing a voice call using mumble.

Some years ago, I got mumble to work very well via Tor. On the mumble
server, I ran an OpenVPN onion (in TCP mode, obviously). Users connected
via Tor to the OpenVPN onion, and then used mumble via the VPN tunnel.
VPN tunnels pin Tor to a single circuit. Until they reconnect, anyway.

I had to use mumble in press-to-talk mode. There was 1-2 second latency,
but sound quality was excellent. Better than many cellphone calls.

&gt; On Wed, 27 Feb 2019, 02:21 meejah, &lt;meejah@meejah.ca&gt; wrote:
&gt; 
&gt;&gt; Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; writes:
&gt;&gt;
&gt;&gt;&gt; Are there any possible reasons as to why this might be happening and
&gt;&gt;&gt; any possible fixes for this situation?
&gt;&gt;
&gt;&gt; What is your application doing?
&gt;&gt;
&gt;&gt; --
&gt;&gt; meejah
&gt;&gt; _______________________________________________
&gt;&gt; tor-dev mailing list
&gt;&gt; tor-dev@lists.torproject.org
&gt;&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;&gt;
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190213165615</emailId><senderName></senderName><senderEmail>neel</senderEmail><timestampReceived>2019-02-13 16:56:15-0400</timestampReceived><subject>Re: [tor-dev] xp + T</subject><body>

I don't think this is the right mailing list.

You probably shouldn't be using Windows XP, otherwise the EOL'd OS would 
be a weak point in security. One option could be to dual-boot Windows XP 
and Linux/*BSD, using Linux/*BSD for Tor and browsing, and XP for 
applications that haven't been ported.

-Neel

===

https://www.neelc.org/

On 2019-02-12 12:24, Gedropi wrote:
&gt; I would like to continue to get Tor updates but intend to keep Windows
&gt; XP.  How can I do it? Thanks
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190218143211</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-18 14:32:11-0400</timestampReceived><subject>Re: [tor-dev] xp + T</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 13/02/2019 16:56, neel@neelc.org wrote:
&gt; I don't think this is the right mailing list.

This is entirely the correct mailing list as it is discussing a
technical policy of the network team. This policy can be found here:

https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/Suppo=
rtedPlatforms

&gt; You probably shouldn't be using Windows XP, otherwise the EOL'd OS woul=
d
&gt; be a weak point in security. One option could be to dual-boot Windows X=
P
&gt; and Linux/*BSD, using Linux/*BSD for Tor and browsing, and XP for
&gt; applications that haven't been ported.

It is worth remembering that most people do not have the privileges to
install software on the computers that they use.

Unfortunately, the current policy of the network team is that they will
not even accept patches for Windows XP support and will merge changes
that break Windows XP support.

I would be interested in statistics that show the current Windows XP
user base, especially in countries with users that can most benefit from
Tor. The policy has been drawn up primarily on technical considerations
but if it is shown that this has negative impacts for large numbers of
users then it may be reconsidered.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226104200</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-02-26 10:42:00-0400</timestampReceived><subject>Re: [tor-dev] xp + T</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Iain Learmonth:
&gt; Hi,
&gt; 
&gt; On 13/02/2019 16:56, neel@neelc.org wrote:
&gt;&gt; I don't think this is the right mailing list.
&gt; 
&gt; This is entirely the correct mailing list as it is discussing a
&gt; technical policy of the network team.

I am not sure whether that's actually the intention of the original
question. Assuming with "get Tor updates" it's actually meant to get
*Tor Browser* updates (there is no tor update mechanism for Windows
afaict) let me add the browser related bits here.

Mozilla stopped supporting Windows XP starting with Firefox 60 ESR,
which is the browser version underlying Tor Browser 8.x. We decided that
we will follow Mozilla here as maintaining an even larger fork
supporting XP is risky both security- and resource-wise. Thus, even if
tor would not have the respective policy for Windows XP, the browser
would not run on that outdated and unmaintained Windows version.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190222122614</emailId><senderName>Pili Guerra</senderName><senderEmail>pili@torproject.org</senderEmail><timestampReceived>2019-02-22 12:26:14-0400</timestampReceived><subject>Re: [tor-dev] GSOC 2019 tor project participation</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

We have applied for GSoC 2019 but will not find out if we have been accepted until \
the 26th February.

So, watch this space :) 

Thanks,

Pili
—
Project Manager: Tor Browser, UX and Community teams
pili at torproject dot org 
gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45

&gt; On 22 Feb 2019, at 11:15, @usernamedt &lt;usernamedt@protonmail.ch&gt; wrote:
&gt; 
&gt; Hello everyone,
&gt; 
&gt; Can someone confirm that tor project is participating at GSOC 2019?
&gt; I am a Mathematics and Computer Science student (Russia, Ural Federal University).
&gt; Privacy violation and internet censorship became serious problems for me personally \
&gt; and for many people in my country. I am looking forward to contribute to tor \
&gt; project by implementing OONI Encore style test in browser. 
&gt; Thanks!
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hi,&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;We have applied for GSoC 2019 but will not find out if we have been accepted \
until the 26th February.&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;So, \
watch this space :) &lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Thanks,&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Pili&lt;br \
class=""&gt;&lt;div class=""&gt; &lt;div style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); \
font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: \
normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: \
start; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; \
word-spacing: 0px; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; \
text-decoration: none;"&gt;—&lt;br class=""&gt;Project Manager: Tor Browser, UX and \
Community teams&lt;br class=""&gt;pili at torproject dot org &lt;br \
class=""&gt;gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45&lt;/div&gt; &lt;/div&gt;
&lt;div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On 22 Feb 2019, at \
11:15, @usernamedt &lt;&lt;a href="mailto:usernamedt@protonmail.ch" \
class=""&gt;usernamedt@protonmail.ch&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Hello everyone,&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Can someone confirm \
that tor project is participating at GSOC 2019?&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;I am \
a Mathematics and Computer Science student (Russia, Ural Federal University).&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Privacy violation and internet censorship became serious \
problems for me personally and for many people in my country. I &lt;span class=""&gt;&lt;span \
title="" class=""&gt;am looking forward to contribute to tor project by implementing \
&lt;/span&gt;&lt;/span&gt;OONI Encore style test in browser.&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span class=""&gt;&lt;span title="" \
class=""&gt;Thanks!&lt;/span&gt;&lt;/span&gt;&lt;br \
class=""&gt;&lt;/div&gt;_______________________________________________&lt;br class=""&gt;tor-dev \
mailing list&lt;br class=""&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190213055012</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-13 05:50:12-0400</timestampReceived><subject>Re: [tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

[Attachment #2 (--Apple-Mail-B4995E11-FF1C-4E57-93E8-6B2C4BAB07F9)]


Hi,

&gt; On 12 Feb 2019, at 21:22, Katharina Kohls &lt;katharina.kohls@rub.de&gt; wrote:
&gt; 
&gt; All nodes bootstrap properly and reach 100%, the authorities both manage to vote \
&gt; and exchange information. Also the relays and the client bootstrap to 100%.

When are these messages logged?

&gt; Nevertheless, the consensus seems to lack relays with guard flags:
&gt; 
&gt; Feb 12 10:35:56.000 [notice] I learned some more directory information, but not \
&gt; enough to build a circuit: We need more microdescriptors: we have 2/2,

This log message says that there are only 2 nodes in the consensus at that time.

&gt; and can only build 0% of likely paths. (We have 0% of guards bw, 100% of midpoint \
&gt; bw, and 100% of end bw (no exits in consensus,

This log message say that there are no exits in the consensus at that time.

&gt; using mid) = 0% of path bw.)
&gt; 
&gt; Because of this, no default circuits can be built in the client or the relays

When there are only 2 nodes in the network, you can't build a 3-hop path.

&gt; in all logs the following message appears every second:
&gt; 
&gt; [warn] Failed to find node for hop #1 of our path. Discarding this circuit.
&gt; 
&gt; …
&gt; 
&gt; In the data_dir/state file I see several guard entries:
&gt; Guard in=default rsa_id=[...] nickname=auth01 sampled_on=2019-01-17T18:33:12 \
&gt; sampled_by=0.3.5.7 listed=1 Guard in=default rsa_id=[...] nickname=relay03 \
&gt; sampled_on=2019-01-22T17:17:10sampled_by=0.3.5.7 unlisted_since=2019-01-27T11:00:36 \
&gt; listed=0 Guard in=default rsa_id=[...] nickname=relay02 \
&gt; sampled_on=2019-01-24T22:19:10sampled_by=0.3.5.7 unlisted_since=2019-01-29T09:08:59 \
&gt; listed=0 Guard in=default rsa_id=[...] nickname=relay03 \
&gt; sampled_on=2019-02-06T21:07:36sampled_by=0.3.5.7 listed=1 Guard in=default \
&gt; rsa_id=[...] nickname=relay05 sampled_on=2019-01-27T16:37:38 sampled_by=0.3.5.7 \
&gt; listed=1

The state file says that there were some nodes in some previous consensuses. None of \
these nodes come from the current consensus at the time of your log messages.

&gt; The client also seems to receive a complete consensus, at least all fingerprints of \
&gt; my setup show up if I fetch the file manually.

How do you fetch the file manually, and from where?

I'm not sure what is happening here. It looks like some consensuses only have 2 \
nodes. But other consensuses have most of the nodes.

You might have a bug in your network setup, or you may have found a bug in Tor.

The most likely explanation is that you had a working network at some time, which \
gave you the state file. And you had a failed network at some time, which gave you \
the log messages.

I suggest that you start again with the same config, but remove all previous state.
(Move the cached state, consensuses, descriptors, and log files somewhere else. Do \
not remove the keys.)

Then you'll know if your current network actually works.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 12 Feb \
2019, at 21:22, Katharina Kohls &lt;&lt;a \
href="mailto:katharina.kohls@rub.de"&gt;katharina.kohls@rub.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;All nodes bootstrap \
properly and reach 100%, the authorities both manage to vote and exchange \
information. Also the relays and the client bootstrap to \
100%.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;When are these \
messages logged?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;Nevertheless, \
the consensus seems to lack relays with guard \
flags:&lt;/span&gt;&lt;br&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;Feb 12 10:35:56.000 [notice] I learned some \
more directory information, but not enough to build a circuit: We need more \
microdescriptors: we have 2/2,&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This log \
message says that there are only 2 nodes in the consensus at that \
time.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;and can only build 0% of \
likely paths. (We have 0% of guards bw, 100% of midpoint bw, and 100% of end bw (no \
exits in consensus,&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;This log message say \
that there are no exits in the consensus at that \
time.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;using mid) = \
0% of path bw.)&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;/span&gt;&lt;blockquote type="cite"&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;Because of this, no default circuits can be built in the client or the \
relays&lt;/span&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;When there are only \
2 nodes in the network, you can't build a 3-hop path.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;in all logs the \
following message appears every second:&lt;br&gt;&lt;br&gt;[warn] Failed to find node for hop #1 \
of our path. Discarding this circuit.&lt;br&gt;&lt;br&gt;…&lt;br&gt;&lt;br&gt;In the data_dir/state file I \
see several guard entries:&lt;br&gt;Guard in=default rsa_id=[...] nickname=auth01 \
sampled_on=2019-01-17T18:33:12 sampled_by=0.3.5.7 listed=1&lt;br&gt;Guard in=default \
rsa_id=[...] nickname=relay03 sampled_on=2019-01-22T17:&lt;a \
href="x-apple-data-detectors://4" dir="ltr" x-apple-data-detectors="true" \
x-apple-data-detectors-type="calendar-event" x-apple-data-detectors-result="4" \
style="-webkit-text-decoration-color: rgba(0, 0, 0, \
0.258824);"&gt;17:10&lt;/a&gt;sampled_by=0.3.5.7 unlisted_since=2019-01-27T11:&lt;a \
href="x-apple-data-detectors://6" dir="ltr" x-apple-data-detectors="true" \
x-apple-data-detectors-type="calendar-event" x-apple-data-detectors-result="6" \
style="-webkit-text-decoration-color: rgba(0, 0, 0, \
0.258824);"&gt;00:36&lt;/a&gt; listed=0&lt;br&gt;Guard in=default rsa_id=[...] nickname=relay02 \
sampled_on=2019-01-24T22:&lt;a href="x-apple-data-detectors://7" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="calendar-event" \
x-apple-data-detectors-result="7" style="-webkit-text-decoration-color: rgba(0, 0, 0, \
0.258824);"&gt;19:10&lt;/a&gt;sampled_by=0.3.5.7 unlisted_since=2019-01-29T09:&lt;a \
href="x-apple-data-detectors://9" dir="ltr" x-apple-data-detectors="true" \
x-apple-data-detectors-type="calendar-event" x-apple-data-detectors-result="9" \
style="-webkit-text-decoration-color: rgba(0, 0, 0, \
0.258824);"&gt;08:59&lt;/a&gt; listed=0&lt;br&gt;Guard in=default rsa_id=[...] nickname=relay03 \
sampled_on=2019-02-06T21:&lt;a href="x-apple-data-detectors://10" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="calendar-event" \
x-apple-data-detectors-result="10" style="-webkit-text-decoration-color: rgba(0, 0, \
0, 0.258824);"&gt;07:36&lt;/a&gt;sampled_by=0.3.5.7 listed=1&lt;br&gt;Guard in=default rsa_id=[...] \
nickname=relay05 sampled_on=2019-01-27T16:37:38 sampled_by=0.3.5.7 \
listed=1&lt;br&gt;&lt;/span&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;The state \
file says that there were some nodes in some previous consensuses. None of these \
nodes come from the current consensus at the time of your log \
messages.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;The client also seems to receive a complete consensus, at least all \
fingerprints of my setup show up if I fetch the file \
manually.&lt;/span&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;How do you fetch the file \
manually, and from where?&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I'm not sure what is happening \
here. It looks like some consensuses only have 2 nodes. But other consensuses have \
most of the nodes.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;You might have a bug \
in your network setup, or you may have found a bug in Tor.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;The most likely explanation is that you had a \
working network at some time, which gave you the state file. And you had a failed \
network at some time, which gave you the log messages.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I suggest that you start again with the same \
config, but remove all previous state.&lt;/div&gt;&lt;div dir="ltr"&gt;(Move the cached state, \
consensuses, descriptors, and log files somewhere else. Do not remove the \
keys.)&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Then you'll know if your current \
network actually works.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190213165749</emailId><senderName>Katharina Kohls</senderName><senderEmail>katharina.kohls@rub.de</senderEmail><timestampReceived>2019-02-13 16:57:49-0400</timestampReceived><subject>Re: [tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;&gt; All nodes bootstrap properly and reach 100%, the authorities both
&gt;&gt; manage to vote and exchange information. Also the relays and the
&gt;&gt; client bootstrap to 100%.
&gt;
&gt; When are these messages logged?
Sorry, I must update this: The authorities bootstrap to 100%, relays and
client are stuck with 80% (sometimes reach 85%).
&gt;
&gt;&gt; Nevertheless, the consensus seems to lack relays with guard flags:
&gt;&gt;
&gt;&gt; Feb 12 10:35:56.000 [notice] I learned some more directory
&gt;&gt; information, but not enough to build a circuit: We need more
&gt;&gt; microdescriptors: we have 2/2,
&gt;
&gt; This log message says that there are only 2 nodes in the consensus at
&gt; that time.
&gt;&gt; and can only build 0% of likely paths. (We have 0% of guards bw, 100%
&gt;&gt; of midpoint bw, and 100% of end bw (no exits in consensus,
&gt;
&gt; This log message say that there are no exits in the consensus at that
&gt; time.
Right now there are even less available nodes and bandwidth showing up
in the logs. This changes between runs but never to more promising numbers.
&gt;
&gt;&gt; using mid) = 0% of path bw.)
&gt;&gt;
&gt;&gt; Because of this, no default circuits can be built in the client or
&gt;&gt; the relays
&gt;
&gt; When there are only 2 nodes in the network, you can't build a 3-hop path.
There should be 8 nodes in total so it's kind of strange that only 2
seem to be available in this relay.
&gt;
&gt;&gt; in all logs the following message appears every second:
&gt;&gt;
&gt;&gt; [warn] Failed to find node for hop #1 of our path. Discarding this
&gt;&gt; circuit.
&gt;&gt;
&gt;&gt; …
&gt;&gt;
&gt;&gt; In the data_dir/state file I see several guard entries:
&gt;&gt; Guard in=default rsa_id=[...] nickname=auth01
&gt;&gt; sampled_on=2019-01-17T18:33:12 sampled_by=0.3.5.7 listed=1
&gt;&gt; Guard in=default rsa_id=[...] nickname=relay03
&gt;&gt; sampled_on=2019-01-22T17:17:10
&gt;&gt; &lt;x-apple-data-detectors://4&gt;sampled_by=0.3.5.7
&gt;&gt; unlisted_since=2019-01-27T11:00:36 &lt;x-apple-data-detectors://6&gt;  listed=0
&gt;&gt; Guard in=default rsa_id=[...] nickname=relay02
&gt;&gt; sampled_on=2019-01-24T22:19:10
&gt;&gt; &lt;x-apple-data-detectors://7&gt;sampled_by=0.3.5.7
&gt;&gt; unlisted_since=2019-01-29T09:08:59 &lt;x-apple-data-detectors://9&gt;  listed=0
&gt;&gt; Guard in=default rsa_id=[...] nickname=relay03
&gt;&gt; sampled_on=2019-02-06T21:07:36
&gt;&gt; &lt;x-apple-data-detectors://10&gt;sampled_by=0.3.5.7 listed=1
&gt;&gt; Guard in=default rsa_id=[...] nickname=relay05
&gt;&gt; sampled_on=2019-01-27T16:37:38 sampled_by=0.3.5.7 listed=1
&gt;
&gt; The state file says that there were some nodes in some previous
&gt; consensuses. None of these nodes come from the current consensus at
&gt; the time of your log messages.
I use a bash script that manages all the VMs. It kills Tor on all
machines, then waits for 5 seconds just to be sure (ShutdownWaitLength
0), then removes all cached, old logs, the state file, ... and some more
stuff on the authorities (see below).

ssh auth01 rm /var/lib/tor/cached*
ssh auth01 rm /var/lib/tor/*.log
ssh auth01 rm /var/lib/tor/state
ssh auth01 rm -r /var/lib/tor/router-stability
ssh auth01 rm -r /var/lib/tor/sr-state
ssh auth01 rm -r /var/lib/tor/v3-status-votes
ssh auth01 rm -r /var/lib/tor/diff-cache
&gt;
&gt;&gt; The client also seems to receive a complete consensus, at least all
&gt;&gt; fingerprints of my setup show up if I fetch the file manually.
&gt;
&gt; How do you fetch the file manually, and from where?
wget http://authip:7000/tor/server/all

which should be the cached-descriptors.new file on the authority (which
also means it gets deleted on each new startup and must be fresh).

In this file I see all the fingerprints that are supposed to be there.
It's also possible to connect to the client's control port and manually
build circuits to all relays that should be there. This is an indicator
that the client knows the relays (using a fingerprint that is not in the
consensus would not work).

Again, guards also show up in the state files of the relays

Guard in=default rsa_id=C122CBB79DC660621E352D401AD7F781F8F6D62D
nickname=relay03 sampled_on=2019-02-07T16:24:21 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=2B74825BE33752B21D17713F88D101F3BADC79BC
nickname=relay06 sampled_on=2019-02-03T22:16:29 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=E4B1152CDF0E5FE697A3E916716FC363A2A0ACF3
nickname=relay07 sampled_on=2019-02-12T18:51:00 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=911EDA6CB639AAE955517F02AA4D651E0F7F6EFD
nickname=relay02 sampled_on=2019-02-11T22:58:28 sampled_by=0.3.5.7 listed=1
Guard in=default rsa_id=8E574F0C428D235782061F44B2D20A66E4336993
nickname=relay05 sampled_on=2019-02-01T17:46:05 sampled_by=0.3.5.7 listed=1

The dates are still old, but I delete all states in the big cleanup
procedure. Are there some more old caches I need to remove, where does
the date information come from?

&gt; I'm not sure what is happening here. It looks like some consensuses
&gt; only have 2 nodes. But other consensuses have most of the nodes.
&gt;
&gt; You might have a bug in your network setup, or you may have found a
&gt; bug in Tor.
I think it's a bug somewhere in the setup but I just can't find it :(
&gt;
&gt; The most likely explanation is that you had a working network at some
&gt; time, which gave you the state file. And you had a failed network at
&gt; some time, which gave you the log messages.
&gt;
&gt; I suggest that you start again with the same config, but remove all
&gt; previous state.
&gt; (Move the cached state, consensuses, descriptors, and log files
&gt; somewhere else. Do not remove the keys.)
&gt;
&gt; Then you'll know if your current network actually works.
Questions are: Why does the client know all the relays' fingerprints but
the network still has problems finishing the bootstrapping and building
a complete circuit? Are there any other things I should look into and
check to understand the problem?
&gt;
&gt; T
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;blockquote type="cite"&gt;
          &lt;div dir="ltr"&gt;&lt;span&gt;All nodes bootstrap properly and reach
              100%, the authorities both manage to vote and exchange
              information. Also the relays and the client bootstrap to
              100%.&lt;/span&gt;&lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;When are these messages logged?&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Sorry, I must update this: The authorities bootstrap to 100%, relays
    and client are stuck with 80% (sometimes reach 85%).&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;blockquote type="cite"&gt;
          &lt;div dir="ltr"&gt;&lt;span&gt;Nevertheless, the consensus seems to lack
              relays with guard flags:&lt;/span&gt;&lt;br&gt;
            &lt;span&gt;&lt;/span&gt;&lt;br&gt;
            &lt;span&gt;Feb 12 10:35:56.000 [notice] I learned some more
              directory information, but not enough to build a circuit:
              We need more microdescriptors: we have 2/2,&lt;/span&gt;&lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;This log message says that there are only 2 nodes
          in the consensus at that time.&lt;br&gt;
          &lt;blockquote type="cite"&gt;
            &lt;div dir="ltr"&gt;&lt;span&gt;and can only build 0% of likely paths.
                (We have 0% of guards bw, 100% of midpoint bw, and 100%
                of end bw (no exits in consensus,&lt;/span&gt;&lt;/div&gt;
          &lt;/blockquote&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;This log message say that there are no exits in the
            consensus at that time.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Right now there are even less available nodes and bandwidth showing
    up in the logs. This changes between runs but never to more
    promising numbers.
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;blockquote type="cite"&gt;
            &lt;div dir="ltr"&gt;&lt;span&gt;using mid) = 0% of path bw.)&lt;/span&gt;&lt;/div&gt;
          &lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;
            &lt;blockquote type="cite"&gt;&lt;br&gt;
            &lt;/blockquote&gt;
          &lt;/div&gt;
          &lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;/span&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;Because of this, no default
              circuits can be built in the client or the relays&lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div dir="ltr"&gt;When there are only 2 nodes in the network, you
            can't build a 3-hop path.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    There should be 8 nodes in total so it's kind of strange that only 2
    seem to be available in this relay.&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;in all logs the following message
              appears every second:&lt;br&gt;
              &lt;br&gt;
              [warn] Failed to find node for hop #1 of our path.
              Discarding this circuit.&lt;br&gt;
              &lt;br&gt;
              …&lt;br&gt;
              &lt;br&gt;
              In the data_dir/state file I see several guard entries:&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=auth01
              sampled_on=2019-01-17T18:33:12 sampled_by=0.3.5.7 listed=1&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=relay03
              sampled_on=2019-01-22T17:&lt;a
                href="x-apple-data-detectors://4" dir="ltr"
                x-apple-data-detectors="true"
                x-apple-data-detectors-type="calendar-event"
                x-apple-data-detectors-result="4"
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;17:10&lt;/a&gt;sampled_by=0.3.5.7
              unlisted_since=2019-01-27T11:&lt;a
                href="x-apple-data-detectors://6" dir="ltr"
                x-apple-data-detectors="true"
                x-apple-data-detectors-type="calendar-event"
                x-apple-data-detectors-result="6"
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;00:36&lt;/a&gt;  listed=0&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=relay02
              sampled_on=2019-01-24T22:&lt;a
                href="x-apple-data-detectors://7" dir="ltr"
                x-apple-data-detectors="true"
                x-apple-data-detectors-type="calendar-event"
                x-apple-data-detectors-result="7"
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;19:10&lt;/a&gt;sampled_by=0.3.5.7
              unlisted_since=2019-01-29T09:&lt;a
                href="x-apple-data-detectors://9" dir="ltr"
                x-apple-data-detectors="true"
                x-apple-data-detectors-type="calendar-event"
                x-apple-data-detectors-result="9"
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;08:59&lt;/a&gt;  listed=0&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=relay03
              sampled_on=2019-02-06T21:&lt;a
                href="x-apple-data-detectors://10" dir="ltr"
                x-apple-data-detectors="true"
                x-apple-data-detectors-type="calendar-event"
                x-apple-data-detectors-result="10"
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;07:36&lt;/a&gt;sampled_by=0.3.5.7
              listed=1&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=relay05
              sampled_on=2019-01-27T16:37:38 sampled_by=0.3.5.7 listed=1&lt;br&gt;
            &lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div dir="ltr"&gt;The state file says that there were some nodes
            in some previous consensuses. None of these nodes come from
            the current consensus at the time of your log messages.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    I use a bash script that manages all the VMs. It kills Tor on all
    machines, then waits for 5 seconds just to be sure
    (ShutdownWaitLength 0), then removes all cached, old logs, the state
    file, ... and some more stuff on the authorities (see below).&lt;br&gt;
    &lt;br&gt;
    &lt;div style="color: #f6f6f4;background-color: #282a36;font-family: 'Droid Sans \
Mono', 'monospace', monospace, 'Droid Sans Fallback';font-weight: normal;font-size: \
14px;line-height: 19px;white-space: pre;"&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh \
auth01 rm /var/lib/tor/cached&lt;/span&gt;&lt;span style="color: \
#f286c4;"&gt;*&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
/var/lib/tor/&lt;/span&gt;&lt;span style="color: #f286c4;"&gt;*&lt;/span&gt;&lt;span style="color: \
#f6f6f4;"&gt;.log&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
/var/lib/tor/state&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
-r /var/lib/tor/router-stability&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    \
ssh auth01 rm -r /var/lib/tor/sr-state&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: \
#f6f6f4;"&gt;    ssh auth01 rm -r /var/lib/tor/v3-status-votes&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color: #f6f6f4;"&gt;    ssh auth01 rm -r \
/var/lib/tor/diff-cache&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;  &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;The client also seems to receive
              a complete consensus, at least all fingerprints of my
              setup show up if I fetch the file manually.&lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          How do you fetch the file manually, and from where?&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    wget &lt;a class="moz-txt-link-freetext" \
href="http://authip:7000/tor/server/all"&gt;http://authip:7000/tor/server/all&lt;/a&gt;&lt;br&gt;  \
&lt;br&gt;  which should be the cached-descriptors.new file on the authority
    (which also means it gets deleted on each new startup and must be
    fresh).&lt;br&gt;
    &lt;br&gt;
    In this file I see all the fingerprints that are supposed to be
    there. It's also possible to connect to the client's control port
    and manually build circuits to all relays that should be there. This
    is an indicator that the client knows the relays (using a
    fingerprint that is not in the consensus would not work).&lt;br&gt;
    &lt;br&gt;
    Again, guards also show up in the state files of the relays &lt;br&gt;
    &lt;br&gt;
    Guard in=default rsa_id=C122CBB79DC660621E352D401AD7F781F8F6D62D
    nickname=relay03 sampled_on=2019-02-07T16:24:21 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=2B74825BE33752B21D17713F88D101F3BADC79BC
    nickname=relay06 sampled_on=2019-02-03T22:16:29 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=E4B1152CDF0E5FE697A3E916716FC363A2A0ACF3
    nickname=relay07 sampled_on=2019-02-12T18:51:00 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=911EDA6CB639AAE955517F02AA4D651E0F7F6EFD
    nickname=relay02 sampled_on=2019-02-11T22:58:28 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=8E574F0C428D235782061F44B2D20A66E4336993
    nickname=relay05 sampled_on=2019-02-01T17:46:05 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    &lt;br&gt;
    The dates are still old, but I delete all states in the big cleanup
    procedure. Are there some more old caches I need to remove, where
    does the date information come from?&lt;br&gt;
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;I'm not sure what is happening here. It looks like
        some consensuses only have 2 nodes. But other consensuses have
        most of the nodes.&lt;/div&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;You might have a bug in your network setup, or you
        may have found a bug in Tor.&lt;/div&gt;
    &lt;/blockquote&gt;
    I think it's a bug somewhere in the setup but I just can't find it
    :( &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;The most likely explanation is that you had a
        working network at some time, which gave you the state file. And
        you had a failed network at some time, which gave you the log
        messages.&lt;/div&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;I suggest that you start again with the same
        config, but remove all previous state.&lt;/div&gt;
      &lt;div dir="ltr"&gt;(Move the cached state, consensuses, descriptors,
        and log files somewhere else. Do not remove the keys.)&lt;/div&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;Then you'll know if your current network actually
        works.&lt;/div&gt;
    &lt;/blockquote&gt;
    Questions are: Why does the client know all the relays' fingerprints
    but the network still has problems finishing the bootstrapping and
    building a complete circuit? Are there any other things I should
    look into and check to understand the problem?&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;T&lt;/div&gt;
      &lt;br&gt;
      &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
      &lt;pre class="moz-quote-pre" \
wrap=""&gt;_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" \
href="mailto:tor-dev@lists.torproject.org"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


["pEpkey.asc" (application/pgp-keys)]
[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190213184711</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-13 18:47:11-0400</timestampReceived><subject>Re: [tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

[Attachment #2 (--Apple-Mail-8F6627DE-EE5A-4721-8F51-125F41A8733B)]


&gt; &gt; On 14 Feb 2019, at 02:57, Katharina Kohls &lt;katharina.kohls@rub.de&gt; wrote:
&gt; &gt; 
&gt; &gt; &gt; All nodes bootstrap properly and reach 100%, the authorities both manage to \
&gt; &gt; &gt; vote and exchange information. Also the relays and the client bootstrap to \
&gt; &gt; &gt; 100%.
&gt; &gt; 
&gt; &gt; When are these messages logged?
&gt; Sorry, I must update this: The authorities bootstrap to 100%, relays and client are \
&gt; stuck with 80% (sometimes reach 85%).

We recently changed the bootstrap percentages and messages in Tor.
Please paste the log lines that containing these bootstrap messages.
And any error messages near those lines.

You might get better bootstrap messages using Tor master.

&gt; &gt; &gt; Nevertheless, the consensus seems to lack relays with guard flags:
&gt; &gt; &gt; 
&gt; &gt; &gt; Feb 12 10:35:56.000 [notice] I learned some more directory information, but not \
&gt; &gt; &gt; enough to build a circuit: We need more microdescriptors: we have 2/2,
&gt; &gt; 
&gt; &gt; This log message says that there are only 2 nodes in the consensus at that time.
&gt; &gt; &gt; and can only build 0% of likely paths. (We have 0% of guards bw, 100% of \
&gt; &gt; &gt; midpoint bw, and 100% of end bw (no exits in consensus,
&gt; &gt; 
&gt; &gt; This log message say that there are no exits in the consensus at that time.
&gt; Right now there are even less available nodes and bandwidth showing up in the logs. \
&gt; This changes between runs but never to more promising numbers.

To get good bandwidth numbers, you'll need to pass some traffic
through your network. To get measured bandwidth in the votes,
you'll need to run a bandwidth authority, like sbws:
https://git.torproject.org/sbws.git

&gt; &gt; &gt; using mid) = 0% of path bw.)
&gt; &gt; &gt; Because of this, no default circuits can be built in the client or the relays
&gt; &gt; 
&gt; &gt; When there are only 2 nodes in the network, you can't build a 3-hop path.
&gt; There should be 8 nodes in total so it's kind of strange that only 2 seem to be \
&gt; available in this relay.

It would help to know what's actually in the consensus. (See below.)

&gt; &gt; &gt; …
&gt; &gt; &gt; 
&gt; &gt; &gt; In the data_dir/state file I see several guard entries:
&gt; &gt; &gt; Guard in=default rsa_id=[...] nickname=auth01 sampled_on=2019-01-17T18:33:12 \
&gt; &gt; &gt; sampled_by=0.3.5.7 listed=1 Guard in=default rsa_id=[...] nickname=relay03 \
&gt; &gt; &gt; sampled_on=2019-01-22T17:17:10sampled_by=0.3.5.7 \
&gt; &gt; &gt; unlisted_since=2019-01-27T11:00:36 listed=0 …
&gt; &gt; 
&gt; &gt; The state file says that there were some nodes in some previous consensuses. None \
&gt; &gt; of these nodes come from the current consensus at the time of your log messages.
&gt; I use a bash script that manages all the VMs. It kills Tor on all machines, then \
&gt; waits for 5 seconds just to be sure (ShutdownWaitLength 0),

Maybe there's a bug in ShutdownWaitLength.
We changed that code recently.
Is Tor actually shut down when you remove the files?

When you start Tor, what is actually in the data directory?

&gt; then removes all cached, old logs, the state file, ... and some more stuff on the \
&gt; authorities (see below). 
&gt; ssh auth01 rm /var/lib/tor/cached*
&gt; ssh auth01 rm /var/lib/tor/*.log
&gt; ssh auth01 rm /var/lib/tor/state
&gt; 
&gt; ssh auth01 rm -r /var/lib/tor/router-stability
&gt; ssh auth01 rm -r /var/lib/tor/sr-state
&gt; ssh auth01 rm -r /var/lib/tor/v3-status-votes
&gt; ssh auth01 rm -r /var/lib/tor/diff-cache
&gt; &gt; 
&gt; &gt; &gt; The client also seems to receive a complete consensus, at least all \
&gt; &gt; &gt; fingerprints of my setup show up if I fetch the file manually.
&gt; &gt; 
&gt; &gt; How do you fetch the file manually, and from where?
&gt; wget http://authip:7000/tor/server/all
&gt; 
&gt; which should be the cached-descriptors.new file on the authority (which also means \
&gt; it gets deleted on each new startup and must be fresh). 
&gt; In this file I see all the fingerprints that are supposed to be there.

tor/server/all is a list of all relay descriptors that the authority knows about.

But the consensus is different: it contains the relays from the authorities'
votes, but only if those relays are reachable from the authorities
(the Running flag), and the authorities agree on enough info about the
relays.

Please check the votes and consensuses on each authority:
http://&lt;hostname&gt;/tor/status-vote/current/authority
http://&lt;hostname&gt;/tor/status-vote/current/consensus
http://&lt;hostname&gt;/tor/status-vote/current/consensus-microdesc

Source:
https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n3867

Then, check the cached consensus-microdesc files on each client.
(Clients and relays use the microdesc consensus by default.)

&gt; It's also possible to connect to the client's control port and manually build \
&gt; circuits to all relays that should be there. This is an indicator that the client \
&gt; knows the relays (using a fingerprint that is not in the consensus would not work).

That's not how Tor works:

Clients randomly select relays from the consensus.

But when someone else specifies the relay, clients will happily
connect to that relay by fingerprint and IP address, even if the
relay isn't in the consensus. (The fingerprint is a hash of the
relay's identity key, which the client checks when it connects
to the relay.)

This feature exists so that the network still works when clients
tell relays and onion services about new relays. (There are a few
valid consensuses on the network at each point in time, and they
can contain different relays.)

Can you copy and paste the code you're using?

&gt; Again, guards also show up in the state files of the relays 
&gt; 
&gt; Guard in=default rsa_id=C122CBB79DC660621E352D401AD7F781F8F6D62D nickname=relay03 \
&gt; sampled_on=2019-02-07T16:24:21 sampled_by=0.3.5.7 listed=1 Guard in=default \
&gt; rsa_id=2B74825BE33752B21D17713F88D101F3BADC79BC nickname=relay06 \
&gt; sampled_on=2019-02-03T22:16:29 sampled_by=0.3.5.7 listed=1 Guard in=default \
&gt; rsa_id=E4B1152CDF0E5FE697A3E916716FC363A2A0ACF3 nickname=relay07 \
&gt; sampled_on=2019-02-12T18:51:00 sampled_by=0.3.5.7 listed=1 Guard in=default \
&gt; rsa_id=911EDA6CB639AAE955517F02AA4D651E0F7F6EFD nickname=relay02 \
&gt; sampled_on=2019-02-11T22:58:28 sampled_by=0.3.5.7 listed=1 Guard in=default \
&gt; rsa_id=8E574F0C428D235782061F44B2D20A66E4336993 nickname=relay05 \
&gt; sampled_on=2019-02-01T17:46:05 sampled_by=0.3.5.7 listed=1 
&gt; The dates are still old, but I delete all states in the big cleanup procedure. Are \
&gt; there some more old caches I need to remove, where does the date information come \
&gt; from?

The dates are the time when Tor chose the guard.
Maybe you're not actually deleting the state file?
Maybe there's an undocumented state.new file?

What's in the directory after you run the script?

Removing specific files is inherently fragile: future Tor versions
may add new files.

Instead, configure different directories for CacheDirectory,
DataDirectory, and KeyDirectory. Then, delete and re-create
CacheDirectory and DataDirectory. Fail and refuse to start Tor
if the deletion and re-creation fails.

(Normally, relay operators want to keep info from previous
runs in DataDirectory, but your setup is a special case.)

You can also safely delete the short and medium term keys
in KeyDirectory. But it probably doesn't hurt to keep them.

For more info, see:
https://www.torproject.org/docs/tor-manual.html.en

&gt; &gt; …
&gt; &gt; 
&gt; &gt; I suggest that you start again with the same config, but remove all previous \
&gt; &gt; state. (Move the cached state, consensuses, descriptors, and log files somewhere \
&gt; &gt; else. Do not remove the keys.) 
&gt; &gt; Then you'll know if your current network actually works.
&gt; Questions are: Why does the client know all the relays' fingerprints but the \
&gt; network still has problems finishing the bootstrapping and building a complete \
&gt; circuit? Are there any other things I should look into and check to understand the \
&gt; problem?

I think I answered these questions above in context.

Let me know if you're still having trouble.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 14 Feb 2019, at \
02:57, Katharina Kohls &lt;&lt;a \
href="mailto:katharina.kohls@rub.de"&gt;katharina.kohls@rub.de&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;  &lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div dir="ltr"&gt;
        &lt;blockquote type="cite"&gt;
          &lt;div dir="ltr"&gt;&lt;span&gt;All nodes bootstrap properly and reach
              100%, the authorities both manage to vote and exchange
              information. Also the relays and the client bootstrap to
              100%.&lt;/span&gt;&lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;When are these messages logged?&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Sorry, I must update this: The authorities bootstrap to 100%, relays
    and client are stuck with 80% (sometimes reach \
85%).&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We recently changed the bootstrap \
percentages and messages in Tor.&lt;/div&gt;&lt;div&gt;Please paste the log lines that containing \
these bootstrap messages.&lt;/div&gt;&lt;div&gt;And any error messages near those \
lines.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You might get better bootstrap messages using Tor \
master.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;&lt;div dir="ltr"&gt;  \
&lt;blockquote type="cite"&gt;  &lt;div dir="ltr"&gt;&lt;span&gt;Nevertheless, the consensus seems to \
lack  relays with guard flags:&lt;/span&gt;&lt;br&gt;
            &lt;span&gt;&lt;/span&gt;&lt;br&gt;
            &lt;span&gt;Feb 12 10:35:56.000 [notice] I learned some more
              directory information, but not enough to build a circuit:
              We need more microdescriptors: we have 2/2,&lt;/span&gt;&lt;/div&gt;
        &lt;/blockquote&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;This log message says that there are only 2 nodes
          in the consensus at that time.&lt;br&gt;
          &lt;blockquote type="cite"&gt;
            &lt;div dir="ltr"&gt;&lt;span&gt;and can only build 0% of likely paths.
                (We have 0% of guards bw, 100% of midpoint bw, and 100%
                of end bw (no exits in consensus,&lt;/span&gt;&lt;/div&gt;
          &lt;/blockquote&gt;
          &lt;div&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div&gt;This log message say that there are no exits in the
            consensus at that time.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Right now there are even less available nodes and bandwidth showing
    up in the logs. This changes between runs but never to more
    promising numbers.
    &lt;/div&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;To get good bandwidth \
numbers, you'll need to pass some traffic&lt;/div&gt;&lt;div dir="ltr"&gt;through your network. \
To get measured bandwidth in the votes,&lt;/div&gt;&lt;div dir="ltr"&gt;you'll need to run a \
bandwidth authority, like sbws:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;a \
href="https://git.torproject.org/sbws.git"&gt;https://git.torproject.org/sbws.git&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;
          
          &lt;blockquote type="cite"&gt;
            &lt;div dir="ltr"&gt;&lt;span&gt;using mid) = 0% of path bw.)&lt;/span&gt;&lt;/div&gt;
          &lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;
            &lt;blockquote type="cite"&gt;&lt;br&gt;
            &lt;/blockquote&gt;
          &lt;/div&gt;
          &lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;/span&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;Because of this, no default
              circuits can be built in the client or the relays&lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div dir="ltr"&gt;When there are only 2 nodes in the network, you
            can't build a 3-hop path.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    There should be 8 nodes in total so it's kind of strange that only 2
    seem to be available in this relay.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;It would help to know what's actually in the \
consensus. (See below.)&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;  &lt;blockquote \
type="cite" cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div \
dir="ltr"&gt;  &lt;div dir="ltr"&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;
              …&lt;br&gt;
              &lt;br&gt;
              In the data_dir/state file I see several guard entries:&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=auth01
              sampled_on=2019-01-17T18:33:12 sampled_by=0.3.5.7 listed=1&lt;br&gt;
              Guard in=default rsa_id=[...] nickname=relay03
              sampled_on=2019-01-22T17:&lt;a href="x-apple-data-detectors://4" dir="ltr" \
x-apple-data-detectors="true" x-apple-data-detectors-type="calendar-event" \
                x-apple-data-detectors-result="4" \
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;17:10&lt;/a&gt;sampled_by=0.3.5.7
              unlisted_since=2019-01-27T11:&lt;a href="x-apple-data-detectors://6" \
dir="ltr" x-apple-data-detectors="true" x-apple-data-detectors-type="calendar-event" \
                x-apple-data-detectors-result="6" \
                style="-webkit-text-decoration-color: rgba(0, 0, 0,
                0.258824);" moz-do-not-send="true"&gt;00:36&lt;/a&gt; listed=0&lt;br&gt;…&lt;br&gt;
            &lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          &lt;div dir="ltr"&gt;The state file says that there were some nodes
            in some previous consensuses. None of these nodes come from
            the current consensus at the time of your log messages.&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    I use a bash script that manages all the VMs. It kills Tor on all
    machines, then waits for 5 seconds just to be sure
    (ShutdownWaitLength 0),&lt;/div&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;Maybe there's a bug in &lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;ShutdownWaitLength.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;We changed that code recently.&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Is \
Tor actually shut down when you remove the files?&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;When you start Tor, what is actually in the data \
directory?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;then removes all cached, \
old logs, the state  file, ... and some more stuff on the authorities (see \
below).&lt;br&gt;  &lt;br&gt;
    &lt;div style="color: #f6f6f4;background-color: #282a36;font-family: 'Droid Sans \
Mono', 'monospace', monospace, 'Droid Sans Fallback';font-weight: normal;font-size: \
14px;line-height: 19px;white-space: pre;"&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh \
auth01 rm /var/lib/tor/cached&lt;/span&gt;&lt;span style="color: \
#f286c4;"&gt;*&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
/var/lib/tor/&lt;/span&gt;&lt;span style="color: #f286c4;"&gt;*&lt;/span&gt;&lt;span style="color: \
#f6f6f4;"&gt;.log&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
/var/lib/tor/state&lt;/span&gt;&lt;/div&gt; &lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    ssh auth01 rm \
-r /var/lib/tor/router-stability&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: #f6f6f4;"&gt;    \
ssh auth01 rm -r /var/lib/tor/sr-state&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: \
#f6f6f4;"&gt;    ssh auth01 rm -r /var/lib/tor/v3-status-votes&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="color: #f6f6f4;"&gt;    ssh auth01 rm -r \
/var/lib/tor/diff-cache&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;  &lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;blockquote type="cite"&gt;&lt;span style="background-color:
              rgba(255, 255, 255, 0);"&gt;The client also seems to receive
              a complete consensus, at least all fingerprints of my
              setup show up if I fetch the file manually.&lt;/span&gt;&lt;/blockquote&gt;
          &lt;div dir="ltr"&gt;&lt;br&gt;
          &lt;/div&gt;
          How do you fetch the file manually, and from where?&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    wget &lt;a class="moz-txt-link-freetext" \
href="http://authip:7000/tor/server/all"&gt;http://authip:7000/tor/server/all&lt;/a&gt;&lt;br&gt;  \
&lt;br&gt;  which should be the cached-descriptors.new file on the authority
    (which also means it gets deleted on each new startup and must be
    fresh).&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); background-color: rgba(255, \
255, 255, 0);"&gt;In this file I see all the fingerprints that are supposed to be \
there.&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;tor/server/all is a list \
of all relay descriptors that the authority knows about.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But \
the consensus is different: it contains the relays from the \
authorities'&lt;/div&gt;&lt;div&gt;votes, but only if those relays are reachable from the \
authorities&lt;/div&gt;&lt;div&gt;(the Running flag), and the authorities agree on enough info \
about the&lt;/div&gt;&lt;div&gt;relays.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Please check the votes and \
consensuses on each authority:&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/authority&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/consensus&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, \
0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/consensus-microdesc&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, \
0);"&gt;Source:&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; margin-top: 0px; \
margin-bottom: 0px;"&gt;&lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n3867"&gt;https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt#n3867&lt;/a&gt;&lt;/pre&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre style="padding: 0px; \
margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span \
style="white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;Then, check \
the cached consensus-microdesc files on each client.&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;(Clients and relays use the microdesc consensus by \
default.)&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt; It's also possible to connect to the client's control port  and \
manually build circuits to all relays that should be there. This  is an indicator \
that the client knows the relays (using a  fingerprint that is not in the consensus \
would not work).&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;That's \
not how Tor works:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Clients randomly \
select relays from the consensus.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;But \
when someone else specifies the relay, clients will happily&lt;/div&gt;&lt;div \
dir="ltr"&gt;connect to that relay by fingerprint and IP address, even if the&lt;/div&gt;&lt;div \
dir="ltr"&gt;relay isn't in the consensus. (The fingerprint is a hash of the&lt;/div&gt;&lt;div \
dir="ltr"&gt;relay's identity key, which the client checks when it connects&lt;/div&gt;&lt;div \
dir="ltr"&gt;to the relay.)&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;This feature \
exists so that the network still works when clients&lt;/div&gt;&lt;div dir="ltr"&gt;tell relays \
and onion services about new relays. (There are a few&lt;/div&gt;&lt;div dir="ltr"&gt;valid \
consensuses on the network at each point in time, and they&lt;/div&gt;&lt;div dir="ltr"&gt;can \
contain different relays.)&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Can you copy \
and paste the code you're using?&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;  \
Again, guards also show up in the state files of the relays &lt;br&gt;  &lt;br&gt;
    Guard in=default rsa_id=C122CBB79DC660621E352D401AD7F781F8F6D62D
    nickname=relay03 sampled_on=2019-02-07T16:24:21 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=2B74825BE33752B21D17713F88D101F3BADC79BC
    nickname=relay06 sampled_on=2019-02-03T22:16:29 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=E4B1152CDF0E5FE697A3E916716FC363A2A0ACF3
    nickname=relay07 sampled_on=2019-02-12T18:51:00 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=911EDA6CB639AAE955517F02AA4D651E0F7F6EFD
    nickname=relay02 sampled_on=2019-02-11T22:58:28 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    Guard in=default rsa_id=8E574F0C428D235782061F44B2D20A66E4336993
    nickname=relay05 sampled_on=2019-02-01T17:46:05 sampled_by=0.3.5.7
    listed=1&lt;br&gt;
    &lt;br&gt;
    The dates are still old, but I delete all states in the big cleanup
    procedure. Are there some more old caches I need to remove, where
    does the date information come from?&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;The dates are the time when Tor chose the guard.&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;Maybe you're not \
actually deleting the state file?&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Maybe there's an undocumented \
state.new file?&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;What's in the directory after you run the \
script?&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Removing specific files \
is inherently fragile: future Tor versions&lt;/div&gt;&lt;div dir="ltr"&gt;may add new \
files.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Instead, configure different \
directories for CacheDirectory,&lt;/div&gt;&lt;div dir="ltr"&gt;DataDirectory, and KeyDirectory. \
Then, delete and re-create&lt;/div&gt;&lt;div dir="ltr"&gt;CacheDirectory and DataDirectory. Fail \
and refuse to start Tor&lt;/div&gt;&lt;div dir="ltr"&gt;if the deletion and re-creation \
fails.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;(Normally, relay operators want \
to keep info from previous&lt;/div&gt;&lt;div dir="ltr"&gt;runs in DataDirectory, but your setup \
is a special case.)&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;You can also safely \
delete the short and medium term keys&lt;/div&gt;&lt;div dir="ltr"&gt;in KeyDirectory. But it \
probably doesn't hurt to keep them.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;For \
more info, see:&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;a \
href="https://www.torproject.org/docs/tor-manual.html.en"&gt;https://www.torproject.org/docs/tor-manual.html.en&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;  &lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div \
dir="ltr"&gt;…&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;blockquote type="cite" \
cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;&lt;div dir="ltr"&gt;I suggest \
                that you start again with the same
        config, but remove all previous state.&lt;/div&gt;&lt;/blockquote&gt;&lt;blockquote \
type="cite" cite="mid:41C8C2AD-7053-47BD-9A72-F84E9B6D26F3@riseup.net"&gt;  &lt;div \
dir="ltr"&gt;(Move the cached state, consensuses, descriptors,  and log files somewhere \
else. Do not remove the keys.)&lt;/div&gt;  &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;Then you'll know if your current network actually
        works.&lt;/div&gt;
    &lt;/blockquote&gt;
    Questions are: Why does the client know all the relays' fingerprints
    but the network still has problems finishing the bootstrapping and
    building a complete circuit? Are there any other things I should
    look into and check to understand the problem?&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;I think I answered these questions above in context.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;Let me know if you're still having \
trouble.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190214135039</emailId><senderName>Katharina Kohls</senderName><senderEmail>katharina.kohls@rub.de</senderEmail><timestampReceived>2019-02-14 13:50:39-0400</timestampReceived><subject>Re: [tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;
&gt; We recently changed the bootstrap percentages and messages in Tor.
&gt; Please paste the log lines that containing these bootstrap messages.
&gt; And any error messages near those lines.
Feb 14 10:37:46.000 [notice] Bootstrapped 10%: Finishing handshake with
directory server
Feb 14 10:38:32.000 [notice] I learned some more directory information,
but not enough to build a circuit: We have no usable consensus.
Feb 14 10:38:32.000 [notice] I learned some more directory information,
but not enough to build a circuit: We have no usable consensus.
Feb 14 10:38:32.000 [notice] The current consensus has no exit nodes.
Tor can only build internal paths, such as paths to onion services.
Feb 14 10:38:32.000 [notice] Bootstrapped 45%: Asking for relay
descriptors for internal paths
Feb 14 10:38:32.000 [notice] I learned some more directory information,
but not enough to build a circuit: We need more microdescriptors: we
have 0/9, and can only build 0% of likely paths. (We have 0% of guards
bw, 0% of midpoint bw, and 0% of end bw (no exits in consensus, using
mid) = 0% of path bw.)
Feb 14 10:38:32.000 [notice] I learned some more directory information,
but not enough to build a circuit: We need more microdescriptors: we
have 0/9, and can only build 0% of likely paths. (We have 0% of guards
bw, 0% of midpoint bw, and 0% of end bw (no exits in consensus, using
mid) = 0% of path bw.)
Feb 14 10:38:32.000 [notice] The current consensus contains exit nodes.
Tor can build exit and internal paths.
Feb 14 10:38:32.000 [notice] Bootstrapped 50%: Loading relay descriptors
Feb 14 10:38:32.000 [notice] Bootstrapped 80%: Connecting to the Tor network
Feb 14 10:38:33.000 [warn] Failed to find node for hop #1 of our path.
Discarding this circuit.
Feb 14 10:38:33.000 [notice] Our circuit 0 (id: 1) died due to an
invalid selected path, purpose General-purpose client. This may be a
torrc configuration issue, or a bug.
Feb 14 10:38:34.000 [warn] Failed to find node for hop #1 of our path.
Discarding this circuit.
Feb 14 10:38:35.000 [warn] Failed to find node for hop #1 of our path.
Discarding this circuit.
Feb 14 10:38:36.000 [warn] Failed to find node for hop #1 of our path.
Discarding this circuit.
&gt;
&gt; To get good bandwidth numbers, you'll need to pass some traffic
&gt; through your network. To get measured bandwidth in the votes,
&gt; you'll need to run a bandwidth authority, like sbws:
&gt; https://git.torproject.org/sbws.git
Is this optional, are there alternative ways of measuring bandwidth?
&gt; It would help to know what's actually in the consensus. (See below.)
&gt;
I pasted one of the microdescriptors at the end of the message (it's
fetched from one of the authorities).
&gt;
&gt; Maybe there's a bug in ShutdownWaitLength.
&gt; We changed that code recently.
&gt; Is Tor actually shut down when you remove the files?
It is definitely shut down when I start deleting the files.
&gt;
&gt; When you start Tor, what is actually in the data directory?
I followed your idea of defining and deleting directories so now there
are data/ cache/ and keys/ defined in the torrc and this is what I
remove in the cleanup procedure. I keep the keys dir, the stats file,
and the fingerprint file. The issue with old Guard entries in the new
state file remains.
&gt;
&gt; tor/server/all is a list of all relay descriptors that the authority
&gt; knows about.
&gt;
&gt; But the consensus is different: it contains the relays from the
&gt; authorities'
&gt; votes, but only if those relays are reachable from the authorities
&gt; (the Running flag), and the authorities agree on enough info about the
&gt; relays.
&gt;
&gt; Please check the votes and consensuses on each authority:
&gt; http://&lt;hostname&gt;/tor/status-vote/current/authority
&gt; http://&lt;hostname&gt;/tor/status-vote/current/consensus
&gt; http://&lt;hostname&gt;/tor/status-vote/current/consensus-microdesc
One of the microdesc files is pasted below. I see the Running flag set
for several relays, along with Fast, Guard, and sometimes also Exit (for
example, relay08 is defined as exit in the torrc and also shows up as
Exit Fast Guard HSDir Running Stable V2Dir Valid).
&gt;
&gt; That's not how Tor works:
&gt;
&gt; Clients randomly select relays from the consensus.
Yes, and this is exactly what I need to measure in the private network.
My project is about testing the consequences of the DoS features in
relays and how the client reacts to being blocked (if it recognizes this
at all, that's one of the things I want to find out).
&gt;
&gt; Can you copy and paste the code you're using?
It's just a simple extendcircuit 0 FP,FP,FP,... for testing the network
status. If the network starts functioning normally again, I need to use
either NEWNYM via the controlport or stem and new_circuit(). But right
now I don't get to this point, because NEWNYM results in no new circuit
and also the stem implementation does not deliver new circuits. Just to
give an example:

getinfo circuit-status
250-circuit-status=
250 OK
signal newnym
250 OK
getinfo circuit-status
250-circuit-status=
250 OK
extendcircuit 0
2B74825BE33752B21D17713F88D101F3BADC79BC,7353D324677B9E7A9A50240339C2C7366B381F64
250 EXTENDED 610
getinfo circuit-status
250-circuit-status=610 BUILT
$2B74825BE33752B21D17713F88D101F3BADC79BC~relay06,$7353D324677B9E7A9A50240339C2C7366B381F64~relay08
PURPOSE=GENERAL TIME_CREATED=2019-02-14T13:44:27.304736
250 OK
&gt;
&gt; The dates are the time when Tor chose the guard.
&gt; Maybe you're not actually deleting the state file?
&gt; Maybe there's an undocumented state.new file?
I'm pretty much sure I delete the file and that there are no .new
versions of the state file. Still, after a while the old Guards show up
in the state file. What information is used to generate the state file?
Maybe there is still some kind of cache left somewhere else?
&gt;
&gt; What's in the directory after you run the script?
&gt;
&gt; Removing specific files is inherently fragile: future Tor versions
&gt; may add new files.
&gt;
&gt; Instead, configure different directories for CacheDirectory,
&gt; DataDirectory, and KeyDirectory. Then, delete and re-create
&gt; CacheDirectory and DataDirectory. Fail and refuse to start Tor
&gt; if the deletion and re-creation fails.
Great idea, did that! Nothing but the keys and fingerprint in there, as
described above.
&gt; I think I answered these questions above in context.
Yes you did and things are getting clearer :)
&gt;
&gt; Let me know if you're still having trouble.
Yes, the setup is still not in the state where the client is able to
create "natural" circuits.

network-status-version 3 microdesc
vote-status consensus
consensus-method 28
valid-after 2019-02-14 11:05:00
fresh-until 2019-02-14 11:10:00
valid-until 2019-02-14 11:20:00
voting-delay 20 20
client-versions
server-versions
known-flags Authority Exit Fast Guard HSDir NoEdConsensus Running Stable
V2Dir Valid
recommended-client-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1
HSIntro=3 HSRend=1 Link=4 Microdesc=1-2 Relay=2
recommended-relay-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1
HSIntro=3 HSRend=1 Link=4 Microdesc=1-2 Relay=2
required-client-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1 HSIntro=3
HSRend=1 Link=4 Microdesc=1-2 Relay=2
required-relay-protocols Cons=1 Desc=1 DirCache=1 HSDir=1 HSIntro=3
HSRend=1 Link=3-4 Microdesc=1 Relay=1-2
shared-rand-current-value 0 zxJao+gBmFMSezvz/VXkEWEQJD5b/z+7AXNCGoLFVW0=
dir-source auth01 14EA360AE456079B386651CDEA2996A6D48F1798 100.113.5.34
100.113.5.34 7000 5000
contact katharina.kohls@rub.de
vote-digest 0E3E3697D3CC785928FE2B27B43E272BB7D52650
dir-source auth01 92E466CD419200DE68A4893EA5A758DAE70EFD9E 100.113.5.29
100.113.5.29 7000 5000
contact katharina.kohls@rub.de
vote-digest 3ADC1A8BF96D74C661DF5797D2EE59FAB899DC00
r client01 BhCZoOQt0RnwUth3dUbyVVP9wxM 2019-02-14 09:37:31 100.113.5.28
5000 0
m ZCRB9OyxE3+HOAgd/Sl4ewcNfFkAlq5S/QfCT3HH/wY
s Fast Running V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay06 K3SCW+M3UrIdF3E/iNEB87rcebw 2019-02-14 09:37:30 100.113.5.36
5000 0
m TvN1yotIqxUIb2Pnz8LuVnseijh/NZDqu+ZCpqRDCQA
s Exit Fast Guard HSDir Running Stable V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r auth01 Qx5QzbsLb/3QKEpFq+yHUTbZgOg 2019-02-14 09:37:46 100.113.5.34
5000 7000
m idNUa5gHlZC03yfL4Wy+NgnPRxl9+9xrFbVL0uNqcr0
s Authority Fast Running V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay08 c1PTJGd7nnqaUCQDOcLHNms4H2Q 2019-02-14 09:37:30 100.113.5.35
5000 0
m r1L2yrAoe3E/H3LDmGrIzeCiaKAINS17Ddg1a36LXBc
s Exit Fast Guard HSDir Running Stable V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay05 jldPDEKNI1eCBh9EstIKZuQzaZM 2019-02-14 09:37:30 100.113.5.38
5000 0
m /EeM/KjGfYM3wQbSW44UNPhNACHFmdjoyqPtbUmVyJU
s Fast Guard HSDir Running Stable V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay02 kR7abLY5qulVUX8Cqk1lHg9/bv0 2019-02-14 09:37:30 100.113.5.31
5000 0
m wHYw+7ts0/eNWjBtMNynbA+5Abv5tPzvAEjJjxpOtIA
s Fast Guard HSDir Running Stable V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r auth01 shi3iGTO9Dl87grvYXA0We7mTjg 2019-02-14 09:38:31 100.113.5.29
5000 7000
m rtksCdOu7iyIyQjbnWUWmJiN0o94+KKWR8WLvV9s1rw
s Authority Exit Fast Guard Running V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay03 wSLLt53GYGIeNS1AGtf3gfj21i0 2019-02-14 09:37:31 100.113.5.32
5000 0
m aU27kuVh12aIDWmNl28KULvpijEzNpFkJ09SXpZdOwg
s Exit Fast Running V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
r relay07 5LEVLN8OX+aXo+kWcW/DY6KgrPM 2019-02-14 09:37:30 100.113.5.37
5000 0
m fkaGwNIKBFlluhAhEDKuHsZl/LocsJ6v0YVBzkQip8A
s Exit Fast Guard HSDir Running Stable V2Dir Valid
v Tor 0.3.5.7
pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2
w Bandwidth=0 Unmeasured=1
directory-footer
bandwidth-weights Wbd=3333 Wbe=0 Wbg=0 Wbm=10000 Wdb=10000 Web=10000
Wed=3333 Wee=10000 Weg=3333 Wem=10000 Wgb=10000 Wgd=3333 Wgg=10000
Wgm=10000 Wmb=10000 Wmd=3333 Wme=0 Wmg=0 Wmm=10000
directory-signature sha256 14EA360AE456079B386651CDEA2996A6D48F1798
35B12EA25BB95F35BCAB63B5E7321DFE56F6EF32
-----BEGIN SIGNATURE-----
YMdJPt/tjwkDIycPVUIMVEeZGrLt6lzoqbiDXu04/6t7Hz6lcgduL6+pJ9cyNqcP
+u788vl6eL+yli1KySoPirnAdIIrHBM0xa3P5BN/nmcvjwzQXRx9gg1XG28BRt76
Rmfd+AAKF3PycnQDu8T9wT9bvk48+nPt60VOs0BrMot8L27sJr9+G2vi+KiyaW6b
klJuGWYsbOcK/aPX63bx/PfdY4vSgT9W36kXOU8UtzYM9ILdsZFua84Gn6THzyEu
9Da9FlUOfDmEto3TuLppjP2kLjWxG5WDqzC3VQm39rdFgNTAERjMELND9KZqlcrD
CHoGkbskkrRoUevUAF1E+g==
-----END SIGNATURE-----
directory-signature sha256 92E466CD419200DE68A4893EA5A758DAE70EFD9E
EBF4ADA3B6557BF648F19B172172C341AE2730E6
-----BEGIN SIGNATURE-----
rK70R9PDhm8zL33ThazFutHz6IBRLavI8k96plIR6bayaNLapZUWIbOAYTNW9pYv
PNZwRBTTtTkahjYLNp3PSyGAzXOk7+E3iSIhTr8LBBryfihtThYWeyz4CjBTkTXj
kQLddWS/knx9ZaovLAMzEXNBtflxSlf5W5/AXCHYzP3i+ssV/rxfBcHHZzayYdBG
175335s1VsjjlQYFHkuilnF++t14nFhL7Qeu7zmFaQ6IMUudwgctKgt+3xM8P8B+
/4N2NRFADSAN8gD7TfS593y1E737qJ/eznlxB4O+aRZw//6MqirNNaB3evNKiYSH
/oFqSvEYnGAiVerccLOeVQ==
-----END SIGNATURE-----


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;div&gt;We recently changed the bootstrap percentages and messages
          in Tor.&lt;/div&gt;
        &lt;div&gt;Please paste the log lines that containing these bootstrap
          messages.&lt;/div&gt;
        &lt;div&gt;And any error messages near those lines.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Feb 14 10:37:46.000 [notice] Bootstrapped 10%: Finishing handshake
    with directory server&lt;br&gt;
    Feb 14 10:38:32.000 [notice] I learned some more directory
    information, but not enough to build a circuit: We have no usable
    consensus.&lt;br&gt;
    Feb 14 10:38:32.000 [notice] I learned some more directory
    information, but not enough to build a circuit: We have no usable
    consensus.&lt;br&gt;
    Feb 14 10:38:32.000 [notice] The current consensus has no exit
    nodes. Tor can only build internal paths, such as paths to onion
    services.&lt;br&gt;
    Feb 14 10:38:32.000 [notice] Bootstrapped 45%: Asking for relay
    descriptors for internal paths&lt;br&gt;
    Feb 14 10:38:32.000 [notice] I learned some more directory
    information, but not enough to build a circuit: We need more
    microdescriptors: we have 0/9, and can only build 0% of likely
    paths. (We have 0% of guards bw, 0% of midpoint bw, and 0% of end bw
    (no exits in consensus, using mid) = 0% of path bw.)&lt;br&gt;
    Feb 14 10:38:32.000 [notice] I learned some more directory
    information, but not enough to build a circuit: We need more
    microdescriptors: we have 0/9, and can only build 0% of likely
    paths. (We have 0% of guards bw, 0% of midpoint bw, and 0% of end bw
    (no exits in consensus, using mid) = 0% of path bw.)&lt;br&gt;
    Feb 14 10:38:32.000 [notice] The current consensus contains exit
    nodes. Tor can build exit and internal paths.&lt;br&gt;
    Feb 14 10:38:32.000 [notice] Bootstrapped 50%: Loading relay
    descriptors&lt;br&gt;
    Feb 14 10:38:32.000 [notice] Bootstrapped 80%: Connecting to the Tor
    network&lt;br&gt;
    Feb 14 10:38:33.000 [warn] Failed to find node for hop #1 of our
    path. Discarding this circuit.&lt;br&gt;
    Feb 14 10:38:33.000 [notice] Our circuit 0 (id: 1) died due to an
    invalid selected path, purpose General-purpose client. This may be a
    torrc configuration issue, or a bug.&lt;br&gt;
    Feb 14 10:38:34.000 [warn] Failed to find node for hop #1 of our
    path. Discarding this circuit.&lt;br&gt;
    Feb 14 10:38:35.000 [warn] Failed to find node for hop #1 of our
    path. Discarding this circuit.&lt;br&gt;
    Feb 14 10:38:36.000 [warn] Failed to find node for hop #1 of our
    path. Discarding this circuit.&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;To get good bandwidth numbers, you'll need to
          pass some traffic&lt;/div&gt;
        &lt;div dir="ltr"&gt;through your network. To get measured bandwidth
          in the votes,&lt;/div&gt;
        &lt;div dir="ltr"&gt;you'll need to run a bandwidth authority, like
          sbws:&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;a \
href="https://git.torproject.org/sbws.git"&gt;https://git.torproject.org/sbws.git&lt;/a&gt;&lt;/div&gt;
  &lt;/div&gt;
    &lt;/blockquote&gt;
    Is this optional, are there alternative ways of measuring bandwidth?
    &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;It would help to know what's actually in the
          consensus. (See below.)&lt;/div&gt;
        &lt;br&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    I pasted one of the microdescriptors at the end of the message (it's
    fetched from one of the authorities).&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;Maybe there's a bug in &lt;span
            style="background-color: rgba(255, 255, 255, \
0);"&gt;ShutdownWaitLength.&lt;/span&gt;&lt;/div&gt;  &lt;div dir="ltr"&gt;&lt;span style="background-color: \
rgba(255, 255,  255, 0);"&gt;We changed that code recently.&lt;/span&gt;&lt;/div&gt;
        &lt;div dir="ltr"&gt;Is Tor actually shut down when you remove the
          files?&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    It is definitely shut down when I start deleting the files.&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;When you start Tor, what is actually in the data
          directory?&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    I followed your idea of defining and deleting directories so now
    there are data/ cache/ and keys/ defined in the torrc and this is
    what I remove in the cleanup procedure. I keep the keys dir, the
    stats file, and the fingerprint file. The issue with old Guard
    entries in the new state file remains.&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;tor/server/all is a list of all relay descriptors that the
          authority knows about.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;But the consensus is different: it contains the relays from
          the authorities'&lt;/div&gt;
        &lt;div&gt;votes, but only if those relays are reachable from the
          authorities&lt;/div&gt;
        &lt;div&gt;(the Running flag), and the authorities agree on enough
          info about the&lt;/div&gt;
        &lt;div&gt;relays.&lt;/div&gt;
        &lt;div&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div&gt;Please check the votes and consensuses on each authority:&lt;/div&gt;
        &lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/authority&lt;/span&gt;&lt;/div&gt;  &lt;div&gt;
          &lt;pre style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/consensus&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;
  &lt;pre style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;pre \
style="padding: 0px; margin-top: 0px; margin-bottom: 0px;"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;http://&lt;hostname&gt;/tor/status-vote/current/consensus-microdesc&lt;/span&gt;&lt;/font&gt;&lt;/pre&gt;&lt;/pre&gt;
  &lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    &lt;font face="UICTFontTextStyleTallBody"&gt;One of the microdesc files is
      pasted below. I see the Running flag set for several relays, along
      with Fast, Guard, and sometimes also Exit (for example, relay08 is
      defined as exit in the torrc and also shows up as Exit Fast Guard
      HSDir Running Stable V2Dir Valid).&lt;/font&gt;&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;That's not how Tor works:&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;Clients randomly select relays from the
          consensus.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Yes, and this is exactly what I need to measure in the private
    network. My project is about testing the consequences of the DoS
    features in relays and how the client reacts to being blocked (if it
    recognizes this at all, that's one of the things I want to find
    out). &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;Can you copy and paste the code you're using?&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    It's just a simple extendcircuit 0 FP,FP,FP,... for testing the
    network status. If the network starts functioning normally again, I
    need to use either NEWNYM via the controlport or stem and
    new_circuit(). But right now I don't get to this point, because
    NEWNYM results in no new circuit and also the stem implementation
    does not deliver new circuits. Just to give an example:&lt;br&gt;
    &lt;br&gt;
    getinfo circuit-status&lt;br&gt;
    250-circuit-status=&lt;br&gt;
    250 OK&lt;br&gt;
    signal newnym&lt;br&gt;
    250 OK&lt;br&gt;
    getinfo circuit-status&lt;br&gt;
    250-circuit-status=&lt;br&gt;
    250 OK&lt;br&gt;
    extendcircuit 0
2B74825BE33752B21D17713F88D101F3BADC79BC,7353D324677B9E7A9A50240339C2C7366B381F64&lt;br&gt;
    250 EXTENDED 610&lt;br&gt;
    getinfo circuit-status&lt;br&gt;
    250-circuit-status=610 BUILT
$2B74825BE33752B21D17713F88D101F3BADC79BC~relay06,$7353D324677B9E7A9A50240339C2C7366B381F64~relay08
  PURPOSE=GENERAL TIME_CREATED=2019-02-14T13:44:27.304736&lt;br&gt;
    250 OK&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255,
            255, 0);"&gt;The dates are the time when Tor chose the guard.&lt;/span&gt;&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255,
            255, 0);"&gt;Maybe you're not actually deleting the state file?&lt;/span&gt;&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255,
            255, 0);"&gt;Maybe there's an undocumented state.new file?&lt;/span&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    I'm pretty much sure I delete the file and that there are no .new
    versions of the state file. Still, after a while the old Guards show
    up in the state file. What information is used to generate the state
    file? Maybe there is still some kind of cache left somewhere else?&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;
        &lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255,
            255, 0);"&gt;&lt;br&gt;
          &lt;/span&gt;&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255,
            255, 0);"&gt;What's in the directory after you run the script?&lt;/span&gt;&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;Removing specific files is inherently fragile:
          future Tor versions&lt;/div&gt;
        &lt;div dir="ltr"&gt;may add new files.&lt;/div&gt;
        &lt;div dir="ltr"&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div dir="ltr"&gt;Instead, configure different directories for
          CacheDirectory,&lt;/div&gt;
        &lt;div dir="ltr"&gt;DataDirectory, and KeyDirectory. Then, delete and
          re-create&lt;/div&gt;
        &lt;div dir="ltr"&gt;CacheDirectory and DataDirectory. Fail and refuse
          to start Tor&lt;/div&gt;
        &lt;div dir="ltr"&gt;if the deletion and re-creation fails.&lt;/div&gt;
      &lt;/div&gt;
    &lt;/blockquote&gt;
    Great idea, did that! Nothing but the keys and fingerprint in there,
    as described above.&lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;I think I answered these questions above in
        context.&lt;/div&gt;
    &lt;/blockquote&gt;
    Yes you did and things are getting clearer :) &lt;br&gt;
    &lt;blockquote type="cite"
      cite="mid:D3E103A1-9C43-44EA-88C9-AD94912B0D3D@riseup.net"&gt;
      &lt;div dir="ltr"&gt;&lt;br&gt;
      &lt;/div&gt;
      &lt;div dir="ltr"&gt;Let me know if you're still having trouble.&lt;/div&gt;
    &lt;/blockquote&gt;
    Yes, the setup is still not in the state where the client is able to
    create "natural" circuits.&lt;br&gt;
    &lt;br&gt;
    network-status-version 3 microdesc&lt;br&gt;
    vote-status consensus&lt;br&gt;
    consensus-method 28&lt;br&gt;
    valid-after 2019-02-14 11:05:00&lt;br&gt;
    fresh-until 2019-02-14 11:10:00&lt;br&gt;
    valid-until 2019-02-14 11:20:00&lt;br&gt;
    voting-delay 20 20&lt;br&gt;
    client-versions &lt;br&gt;
    server-versions &lt;br&gt;
    known-flags Authority Exit Fast Guard HSDir NoEdConsensus Running
    Stable V2Dir Valid&lt;br&gt;
    recommended-client-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1
    HSIntro=3 HSRend=1 Link=4 Microdesc=1-2 Relay=2&lt;br&gt;
    recommended-relay-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1
    HSIntro=3 HSRend=1 Link=4 Microdesc=1-2 Relay=2&lt;br&gt;
    required-client-protocols Cons=1-2 Desc=1-2 DirCache=1 HSDir=1
    HSIntro=3 HSRend=1 Link=4 Microdesc=1-2 Relay=2&lt;br&gt;
    required-relay-protocols Cons=1 Desc=1 DirCache=1 HSDir=1 HSIntro=3
    HSRend=1 Link=3-4 Microdesc=1 Relay=1-2&lt;br&gt;
    shared-rand-current-value 0
    zxJao+gBmFMSezvz/VXkEWEQJD5b/z+7AXNCGoLFVW0=&lt;br&gt;
    dir-source auth01 14EA360AE456079B386651CDEA2996A6D48F1798
    100.113.5.34 100.113.5.34 7000 5000&lt;br&gt;
    contact &lt;a class="moz-txt-link-abbreviated" \
href="mailto:katharina.kohls@rub.de"&gt;katharina.kohls@rub.de&lt;/a&gt;&lt;br&gt;  vote-digest \
0E3E3697D3CC785928FE2B27B43E272BB7D52650&lt;br&gt;  dir-source auth01 \
92E466CD419200DE68A4893EA5A758DAE70EFD9E  100.113.5.29 100.113.5.29 7000 5000&lt;br&gt;
    contact &lt;a class="moz-txt-link-abbreviated" \
href="mailto:katharina.kohls@rub.de"&gt;katharina.kohls@rub.de&lt;/a&gt;&lt;br&gt;  vote-digest \
3ADC1A8BF96D74C661DF5797D2EE59FAB899DC00&lt;br&gt;  r client01 BhCZoOQt0RnwUth3dUbyVVP9wxM \
2019-02-14 09:37:31  100.113.5.28 5000 0&lt;br&gt;
    m ZCRB9OyxE3+HOAgd/Sl4ewcNfFkAlq5S/QfCT3HH/wY&lt;br&gt;
    s Fast Running V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay06 K3SCW+M3UrIdF3E/iNEB87rcebw 2019-02-14 09:37:30
    100.113.5.36 5000 0&lt;br&gt;
    m TvN1yotIqxUIb2Pnz8LuVnseijh/NZDqu+ZCpqRDCQA&lt;br&gt;
    s Exit Fast Guard HSDir Running Stable V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r auth01 Qx5QzbsLb/3QKEpFq+yHUTbZgOg 2019-02-14 09:37:46
    100.113.5.34 5000 7000&lt;br&gt;
    m idNUa5gHlZC03yfL4Wy+NgnPRxl9+9xrFbVL0uNqcr0&lt;br&gt;
    s Authority Fast Running V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay08 c1PTJGd7nnqaUCQDOcLHNms4H2Q 2019-02-14 09:37:30
    100.113.5.35 5000 0&lt;br&gt;
    m r1L2yrAoe3E/H3LDmGrIzeCiaKAINS17Ddg1a36LXBc&lt;br&gt;
    s Exit Fast Guard HSDir Running Stable V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay05 jldPDEKNI1eCBh9EstIKZuQzaZM 2019-02-14 09:37:30
    100.113.5.38 5000 0&lt;br&gt;
    m /EeM/KjGfYM3wQbSW44UNPhNACHFmdjoyqPtbUmVyJU&lt;br&gt;
    s Fast Guard HSDir Running Stable V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay02 kR7abLY5qulVUX8Cqk1lHg9/bv0 2019-02-14 09:37:30
    100.113.5.31 5000 0&lt;br&gt;
    m wHYw+7ts0/eNWjBtMNynbA+5Abv5tPzvAEjJjxpOtIA&lt;br&gt;
    s Fast Guard HSDir Running Stable V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r auth01 shi3iGTO9Dl87grvYXA0We7mTjg 2019-02-14 09:38:31
    100.113.5.29 5000 7000&lt;br&gt;
    m rtksCdOu7iyIyQjbnWUWmJiN0o94+KKWR8WLvV9s1rw&lt;br&gt;
    s Authority Exit Fast Guard Running V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay03 wSLLt53GYGIeNS1AGtf3gfj21i0 2019-02-14 09:37:31
    100.113.5.32 5000 0&lt;br&gt;
    m aU27kuVh12aIDWmNl28KULvpijEzNpFkJ09SXpZdOwg&lt;br&gt;
    s Exit Fast Running V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    r relay07 5LEVLN8OX+aXo+kWcW/DY6KgrPM 2019-02-14 09:37:30
    100.113.5.37 5000 0&lt;br&gt;
    m fkaGwNIKBFlluhAhEDKuHsZl/LocsJ6v0YVBzkQip8A&lt;br&gt;
    s Exit Fast Guard HSDir Running Stable V2Dir Valid&lt;br&gt;
    v Tor 0.3.5.7&lt;br&gt;
    pr Cons=1-2 Desc=1-2 DirCache=1-2 HSDir=1-2 HSIntro=3-4 HSRend=1-2
    Link=1-5 LinkAuth=1,3 Microdesc=1-2 Relay=1-2&lt;br&gt;
    w Bandwidth=0 Unmeasured=1&lt;br&gt;
    directory-footer&lt;br&gt;
    bandwidth-weights Wbd=3333 Wbe=0 Wbg=0 Wbm=10000 Wdb=10000 Web=10000
    Wed=3333 Wee=10000 Weg=3333 Wem=10000 Wgb=10000 Wgd=3333 Wgg=10000
    Wgm=10000 Wmb=10000 Wmd=3333 Wme=0 Wmg=0 Wmm=10000&lt;br&gt;
    directory-signature sha256 14EA360AE456079B386651CDEA2996A6D48F1798
    35B12EA25BB95F35BCAB63B5E7321DFE56F6EF32&lt;br&gt;
    -----BEGIN SIGNATURE-----&lt;br&gt;
    YMdJPt/tjwkDIycPVUIMVEeZGrLt6lzoqbiDXu04/6t7Hz6lcgduL6+pJ9cyNqcP&lt;br&gt;
    +u788vl6eL+yli1KySoPirnAdIIrHBM0xa3P5BN/nmcvjwzQXRx9gg1XG28BRt76&lt;br&gt;
    Rmfd+AAKF3PycnQDu8T9wT9bvk48+nPt60VOs0BrMot8L27sJr9+G2vi+KiyaW6b&lt;br&gt;
    klJuGWYsbOcK/aPX63bx/PfdY4vSgT9W36kXOU8UtzYM9ILdsZFua84Gn6THzyEu&lt;br&gt;
    9Da9FlUOfDmEto3TuLppjP2kLjWxG5WDqzC3VQm39rdFgNTAERjMELND9KZqlcrD&lt;br&gt;
    CHoGkbskkrRoUevUAF1E+g==&lt;br&gt;
    -----END SIGNATURE-----&lt;br&gt;
    directory-signature sha256 92E466CD419200DE68A4893EA5A758DAE70EFD9E
    EBF4ADA3B6557BF648F19B172172C341AE2730E6&lt;br&gt;
    -----BEGIN SIGNATURE-----&lt;br&gt;
    rK70R9PDhm8zL33ThazFutHz6IBRLavI8k96plIR6bayaNLapZUWIbOAYTNW9pYv&lt;br&gt;
    PNZwRBTTtTkahjYLNp3PSyGAzXOk7+E3iSIhTr8LBBryfihtThYWeyz4CjBTkTXj&lt;br&gt;
    kQLddWS/knx9ZaovLAMzEXNBtflxSlf5W5/AXCHYzP3i+ssV/rxfBcHHZzayYdBG&lt;br&gt;
    175335s1VsjjlQYFHkuilnF++t14nFhL7Qeu7zmFaQ6IMUudwgctKgt+3xM8P8B+&lt;br&gt;
    /4N2NRFADSAN8gD7TfS593y1E737qJ/eznlxB4O+aRZw//6MqirNNaB3evNKiYSH&lt;br&gt;
    /oFqSvEYnGAiVerccLOeVQ==&lt;br&gt;
    -----END SIGNATURE-----&lt;br&gt;
    &lt;br&gt;
  &lt;/body&gt;
&lt;/html&gt;


["pEpkey.asc" (application/pgp-keys)]
[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205205506</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-02-05 20:55:06-0400</timestampReceived><subject>Re: [tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>

Thanks teor! Quite side note: it would be helpful if such questions
are broached earlier in the process. Google has been calling for org
applications for several weeks now. Asking roughly a day before the
deadline creates last minute confusion and reduces the chances of an
affirmative response.

On Tue, Feb 5, 2019 at 8:06 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; Dear Whonix Community,
&gt; 
&gt; On February 5, 2019 2:20:18 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; teor:
&gt; &gt; &gt; Dear Whonix Community,
&gt; &gt; &gt; 
&gt; &gt; &gt; On February 4, 2019 11:52:44 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; &gt; &gt; Dear Tor Developers,
&gt; &gt; &gt; 
&gt; &gt; &gt; Whonix is applying to be a Google Summer of Code organization this
&gt; &gt; &gt; year. I am writing on behalf of Whonix to ask if the Tor project
&gt; &gt; &gt; could be a voucher for Whonix. Specifically, in the application
&gt; &gt; &gt; form, it asks:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; If you are a new organization to GSoC, is there a Google
&gt; &gt; &gt; &gt; &gt; &gt; employee or previously participating organization who will
&gt; &gt; &gt; &gt; &gt; &gt; vouch for you? If so, please enter their name, contact email,
&gt; &gt; &gt; &gt; &gt; &gt; and relationship to your organization.
&gt; &gt; &gt; 
&gt; &gt; &gt; Whonix community would be really appreciated if Tor can be our
&gt; &gt; &gt; voucher this year. And please feel free to contact me to provide
&gt; &gt; &gt; the information described above anytime before the deadline
&gt; &gt; &gt; (February 6, 2019 at 20:00 UTC).
&gt; &gt; &gt; 
&gt; &gt; &gt; Thank you very much!
&gt; &gt; &gt; 
&gt; &gt; &gt; Cheers, iry
&gt; &gt; &gt; 
&gt; &gt; &gt; I have forwarded your request to the Tor Core Contributors.
&gt; &gt; &gt; 
&gt; &gt; &gt; Some of us were at a hackfest and FOSDEM last week. A few are still
&gt; &gt; &gt; working or travelling. So I am not sure how many of us will check
&gt; &gt; &gt; our emails in the next 36 hours.
&gt; &gt; &gt; 
&gt; &gt; &gt; I hope we will have a response for you around 24 hours from now.
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; Thank you so much for your help, teor!
&gt; &gt; 
&gt; &gt; We really appreciate it!
&gt; 
&gt; Tor won't be able to vouch for Whonix for GSoC 2019. I understand that you are on a \
&gt; tight deadline, so I wanted to let you know as soon as possible. 
&gt; I have received a range of responses from Tor Core Contributors over the past few \
&gt; hours. A number of people raised concerns about the Whonix community's culture, and \
&gt; whether it would be a good experience for students. 
&gt; I hope that we can give a more detailed and helpful response later. But it may take \
&gt; us some time, because we are still working through our internal community \
&gt; processes. 
&gt; T
&gt; 
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205150601</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-02-05 15:06:01-0400</timestampReceived><subject>[tor-dev] Release: obfs4proxy-0.0.9</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello all,

I just tagged obfs4proxy-0.0.9.  The main features of this release are
primarily related to improving the behavior of the `meek_lite` transport.

Since some of the changes are major, I will expand on them separately
from the brief summary given in the ChangeLog.

 * A forked version[0] of https://github.com/refraction-networking/utls
   is now used to mask the TLS signature.  This results in a ClientHello
   that should resemble modern versions of Firefox by default.  While
   the utls profile is named `HelloFirefox_63`, a cursory examination
   leads me to believe that there are no differences in FF 65.

   The bridge line option `utls=&lt;fingerprint&gt;` will allow specifying the
   behavior, with (case-insenstive) string representations of the utls
   fingerprint names.  `none` will revert to the previous behavior.

   Not all fingerprints were tested and or are guaranteed to work.
   Development was primarily done with `HelloChrome_70,
   `HelloFirefox_63`, and `HelloChrome_71` (experimental).  While I can
   not vouch for the mimicry accuracy of every single profile, all of
   the profiles that attempt to mimic browsers should function fairly
   well[1], though this partially depends on the the configuration of
   the host doing the fronting.

 * meek_lite now has HPKP[2] style public key pins for all of the
   Microsoft CA certs that are used to sign Azure leaf certificates.
   This is only enabled when `utls` is being used, because I'm lazy.  If
   Microsoft happens to change their CA certificates prior to the next
   release, 2024-05-20, or you are ok with being actively man-in-the-
   middled for some reason, adding `disableHPKP=true` to the bridge
   line will disable certificate pin validation.

   HPKP headers in HTTP responses are ignored, only the static pin list
   is consulted.

 * Due to a shift in my philosophy, portions of the new code are
   released under the GNU General Public License v3.  Exceptions to
   the viral nature of the license will be considered on a case-by-case
   basis.  Contact me for more details.

Tarball/Signature:
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.9.tar.xz
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.9.tar.xz.asc

Changes in version 0.0.9 - 2019-02-05:
 - Various meek_lite code cleanups and bug fixes.
 - Bug 29077: uTLS for ClientHello camouflage (meek_lite).
 - More fixes to HTTP Basic auth.
 - (meek_lite) Pin the certificate chain public keys for the default
   Tor Browser Azure bridge (meek_lite).

Regards,

-- 
Yawning Angel

[0]: obfs4proxy WILL NOT build with the upstream version of the library,
and the Firefox fingerprint will not function with Azure using the
upstream version.

[1]: For "I can watch Eluveitie music videos on youtube over it"
definitions of "fairly well".

[2]: Yes, the HPKP spec is rather dead in the wild with a lot of people
giving up on it.  It is my opinion that in this context having such a
mechanism makes sense.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190205154602</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-05 15:46:02-0400</timestampReceived><subject>Re: [tor-dev] tor relay process health data for operators (controlport)</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi All,

On 04/02/2019 06:35, teor wrote:
&gt; If we add enough noise to protect most users, then we will have privacy=
 by design.

I would argue that noise does not help here, as we would have to add
enough noise to protect against a guard discovery attack, which is too
much noise for the stats to be useful.

I only learned that these stats have such high resolution last week and
I'm very concerned about this.

Regarding limiting retention time, if I'm trying to pull off a guard
discovery attack then I'm probably going to be interested in only the
timeframe that relates to my attack. Retention periods aren't going to
help here and may in fact make it worse if LE suspects that the data
would disappear after a given time period and so issues an emergency
order that might be even more restrictive or carry heavier sanctions for
non-compliance.

Are the statistics in the extra-info descriptor really not useful for
the purpose of graphing to monitor health? If they are not then we
should come up with ways of addressing this but if they are then we
should not be retaining any more data than that which is already public.

If we think that the 6-hour statistics are safe to collect (which we
previously decided they were not when we changed the granularity of the
bandwidth stats) then we could add them to extra-info descriptors.

I am worried that exposing/retaining statistics without a proper review
of the attacks they enable, even with the best guidelines in the world,
is dangerous. If we have retention guidelines we also have no way to
enforce those and this could introduce a systemic weakness in the network=
=2E

I have filed #29344 to consider these things.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190206010457</emailId><senderName>iry</senderName><senderEmail>iry@riseup.net</senderEmail><timestampReceived>2019-02-06 01:04:57-0400</timestampReceived><subject>Re: [tor-dev] The Tor project as a GSoC voucher for Whonix?</subject><body>

Damian Johnson:
&gt; Thanks teor! Quite side note: it would be helpful if such questions
&gt; are broached earlier in the process. Google has been calling for org
&gt; applications for several weeks now. Asking roughly a day before the
&gt; deadline creates last minute confusion and reduces the chances of an
&gt; affirmative response.
&gt; 
&gt; On Tue, Feb 5, 2019 at 8:06 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; Dear Whonix Community,
&gt; &gt; 
&gt; &gt; On February 5, 2019 2:20:18 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; teor:
&gt; &gt; &gt; &gt; Dear Whonix Community,
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; On February 4, 2019 11:52:44 PM UTC, iry &lt;iry@riseup.net&gt; wrote:
&gt; &gt; &gt; &gt; Dear Tor Developers,
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Whonix is applying to be a Google Summer of Code organization this
&gt; &gt; &gt; &gt; year. I am writing on behalf of Whonix to ask if the Tor project
&gt; &gt; &gt; &gt; could be a voucher for Whonix. Specifically, in the application
&gt; &gt; &gt; &gt; form, it asks:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; &gt; If you are a new organization to GSoC, is there a Google
&gt; &gt; &gt; &gt; &gt; &gt; &gt; employee or previously participating organization who will
&gt; &gt; &gt; &gt; &gt; &gt; &gt; vouch for you? If so, please enter their name, contact email,
&gt; &gt; &gt; &gt; &gt; &gt; &gt; and relationship to your organization.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Whonix community would be really appreciated if Tor can be our
&gt; &gt; &gt; &gt; voucher this year. And please feel free to contact me to provide
&gt; &gt; &gt; &gt; the information described above anytime before the deadline
&gt; &gt; &gt; &gt; (February 6, 2019 at 20:00 UTC).
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Thank you very much!
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Cheers, iry
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I have forwarded your request to the Tor Core Contributors.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Some of us were at a hackfest and FOSDEM last week. A few are still
&gt; &gt; &gt; &gt; working or travelling. So I am not sure how many of us will check
&gt; &gt; &gt; &gt; our emails in the next 36 hours.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I hope we will have a response for you around 24 hours from now.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; Thank you so much for your help, teor!
&gt; &gt; &gt; 
&gt; &gt; &gt; We really appreciate it!
&gt; &gt; 
&gt; &gt; Tor won't be able to vouch for Whonix for GSoC 2019. I understand that you are on \
&gt; &gt; a tight deadline, so I wanted to let you know as soon as possible. 
&gt; &gt; I have received a range of responses from Tor Core Contributors over the past few \
&gt; &gt; hours. A number of people raised concerns about the Whonix community's culture, \
&gt; &gt; and whether it would be a good experience for students. 
&gt; &gt; I hope that we can give a more detailed and helpful response later. But it may \
&gt; &gt; take us some time, because we are still working through our internal community \
&gt; &gt; processes. 
&gt; &gt; T
&gt; &gt; 
&gt; &gt; --
&gt; &gt; teor

Thank you for your response, teor and Damian!

I agree it would be better to ask earlier and I will remember that!

iry
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190207102220</emailId><senderName>Pili Guerra</senderName><senderEmail>pili@torproject.org</senderEmail><timestampReceived>2019-02-07 10:22:20-0400</timestampReceived><subject>Re: [tor-dev] anti-censorship weekly meeting</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

I'm probably not going to be able to make this one.

Sorry!

-Pili
—
Project Manager: Tor Browser, UX and Community teams
pili at torproject dot org 
gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45

&gt; On 6 Feb 2019, at 19:21, Gaba &lt;gaba@torproject.org&gt; wrote:
&gt; 
&gt; Hi!
&gt; 
&gt; Sending a reminder that we are having our weekly meeting for the
&gt; anti-censorship work on Thursday 20:00 UTC on #tor-meeting at OFTC.
&gt; 
&gt; The meeting pad is here: https://pad.riseup.net/p/tor-censorship-2019-keep
&gt; 
&gt; cheers,
&gt; gaba
&gt; 
&gt; -- 
&gt; Project Manager - Network, Metrics and Anti-censorship Teams
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hi,&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;I'm probably not going to be able to make this one.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Sorry!&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;-Pili&lt;/div&gt;&lt;div class=""&gt;&lt;div class=""&gt; &lt;div style="caret-color: rgb(0, 0, \
0); color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; \
font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: \
auto; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; \
widows: auto; word-spacing: 0px; -webkit-text-size-adjust: auto; \
-webkit-text-stroke-width: 0px; text-decoration: none;"&gt;—&lt;br class=""&gt;Project \
Manager: Tor Browser, UX and Community teams&lt;br class=""&gt;pili at torproject dot \
org &lt;br class=""&gt;gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 \
9C45&lt;/div&gt; &lt;/div&gt;
&lt;div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On 6 Feb 2019, at \
19:21, Gaba &lt;&lt;a href="mailto:gaba@torproject.org" \
class=""&gt;gaba@torproject.org&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Hi!&lt;br class=""&gt;&lt;br \
class=""&gt;Sending a reminder that we are having our weekly meeting for the&lt;br \
class=""&gt;anti-censorship work on Thursday 20:00 UTC on #tor-meeting at OFTC.&lt;br \
class=""&gt;&lt;br class=""&gt;The meeting pad is here: &lt;a \
href="https://pad.riseup.net/p/tor-censorship-2019-keep" \
class=""&gt;https://pad.riseup.net/p/tor-censorship-2019-keep&lt;/a&gt;&lt;br class=""&gt;&lt;br \
class=""&gt;cheers,&lt;br class=""&gt;gaba&lt;br class=""&gt;&lt;br class=""&gt;-- &lt;br class=""&gt;Project \
Manager - Network, Metrics and Anti-censorship Teams&lt;br \
class=""&gt;_______________________________________________&lt;br class=""&gt;tor-dev mailing \
list&lt;br class=""&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190208003304</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-02-08 00:33:04-0400</timestampReceived><subject>Re: [tor-dev] Proposal 299: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi teor,

Sorry for the delayed response, but should I start working on the code now, or should \
I wait for feedback from other developers?

Also, for Tor developers other than teor (or even including teor), what's your \
opinion on Prop299? Is it ready for implementation, or are revisions needed?

Thank You,

Neel

===

https://www.neelc.org/

February 5, 2019 11:40 PM, "teor" &lt;teor@riseup.net&gt; wrote:

&gt; Hi Neel,
&gt; 
&gt; Thanks for your initial draft code, and this proposal.
&gt; 
&gt; On February 6, 2019 12:26:40 AM UTC, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; &gt; Hi tor-dev@ mailing list,
&gt; &gt; 
&gt; &gt; First off, thank you to Nick for making this an official proposal and
&gt; &gt; thank you again for marking it as open. I really appreciate this. Also,
&gt; &gt; thank you teor for aiding me on my first proposal.
&gt; &gt; 
&gt; &gt; My proposal is available on torspec here:
&gt; &gt; https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt
&gt; &gt; 
&gt; &gt; Now that my proposal "Preferring IPv4 or IPv6 based on IP Version
&gt; &gt; Failure Count" is Open, I would really appreciate your opinions on
&gt; &gt; this. Is it good, bad? Could it have any improvements?
&gt; 
&gt; I think this proposal is good for an experimental option. We could develop and \
&gt; merge the code, but not turn it on by default. Then we could do some testing to \
&gt; tune the design. 
&gt; Here's one thing we must fix before we start implementing this proposal:
&gt; 
&gt; We don't store connection statistics on Tor clients right now. This proposal would \
&gt; make us store these statistics.
&gt; 
&gt; The connection count from 3 sessions (Tor launches? Days?) ago doesn't tell us much \
&gt; about the current network state. But it's really bad for user privacy.
&gt; 
&gt; So how often should we forget?
&gt; 
&gt; Remember: many users only wait 10 seconds for a web browser page to load. Most Tor \
&gt; Browser users are more patient, but they still give up after 30 seconds or a few \
&gt; minutes. So we don't want to leave them hanging for long after a network change.
&gt; 
&gt; Here's a quick way to forget old connections, while retaining an approximate \
&gt; history: regularly divide both counters by two. We can check if we want to do the \
&gt; division when we add a new failure. 
&gt; If the division takes us down to zero, we can re-initialise (see 1.).
&gt; 
&gt; Or maybe we should just store the last summarised failure point value (SFPV) in the \
&gt; state file? 
&gt; Here are some questions we need to answer before we turn it on by default:
&gt; 
&gt; 0. Are N/8 fractions a good choice?
&gt; While bootstrapping, Tor makes up to 7 connections in the first 30 seconds. But if \
&gt; a connection hangs, Tor only allows 3 concurrent connections (see 3.). So N/8 is \
&gt; probably too low? 
&gt; Maybe we should consider a larger fraction (for example, N/4). But there's a design \
&gt;                 tradeoff here:
&gt; * failing 1/4 connections wastes bandwidth, but web browsers with happy eyeballs \
&gt; fail up to 50%, so it can't be that bad
&gt; * failing 1/4 connections may trigger path bias warnings (see 3.)
&gt; * trying 1/4 of each IP version makes starting up and changing networks faster for \
&gt;                 users
&gt; * trying 1/4 of each IP version limits our ability to load-balance across IP \
&gt; families 
&gt; Let's try N/4, and see how it goes?
&gt; Even if we guess wrong, we still want Tor to work.
&gt; 
&gt; 1. What is the starting SFPV?
&gt; 
&gt; I suggest that we use the number of IPv4 and IPv6-capable entry nodes to calculate \
&gt; the initial SFPV.
&gt; 
&gt; For standard clients:
&gt; * during initial bootstrap: count fallback directory mirrors
&gt; * once the initial consensus is received: count guards in the consensus
&gt; For bridge clients:
&gt; * count configured bridges.
&gt; That way, new clients are automatically load-balanced across IPv4 and IPv6. (We \
&gt; shouldn't add the actual number of guards to the counters: that would swamp the \
&gt; first few thousand connection failures.)
&gt; 
&gt; If we have a recent connection history, we don't need to update the counters when \
&gt; the consensus or bridge config changes. But if we are hibernating or dormant, we \
&gt; should use the entry nodes to seed the SFPV.
&gt; 
&gt; 2. When switching between IPv4-only and IPv6-only networks, the circuit failure \
&gt; rate could start as high as 87.5% (7/8), then approach 12.5% (1/8). Depending on \
&gt; the historical number of connections, the failure rate could stay at 7/8 for quite \
&gt; some time. 
&gt; Switching to N/4 makes the range 3/4 to 1/4, which is good right after switching, \
&gt; but bad long-term.
&gt; 
&gt; What does the pathbias code do when this many failures happen? We could make \
&gt; pathbias smarter: for example, it could ignore or scale down "no route", or add 1/4 \
&gt; to its threshold when ClientAutoIPv6ORPort is in use.
&gt; 
&gt; 3. What happens on a network which drops IPv4 or IPv6 packets?
&gt; Tor only makes 3 simultaneous connections, and if they are all the same protocol, \
&gt; Tor will wait for 2 minutes for the connections to timeout.
&gt; 
&gt; The Happy Eyeballs RFC:
&gt; https://tools.ietf.org/html/rfc8305
&gt; avoids this issue by making concurrent IPv4 and IPv6 connections.
&gt; 
&gt; Tor could make concurrent connections, or just keep the sequential connection code.
&gt; 
&gt; Either way, we should increase the connection limit. But increasing the connection \
&gt; limit increases the DoS risk. We can limit the risk in two ways:
&gt; * make the limit higher for pending connections, but keep the connection limit at 3 \
&gt; for connections that have successfully opened TCP (before they do an expensive TLS \
&gt;                 handshake)
&gt; * make a separate connection limit for IPv4 and IPv6
&gt; I don't know which change is easier. Perhaps both would be useful.
&gt; 
&gt; 4. Do we want to count successful connections?
&gt; If we know that an IP version works, we should use it.
&gt; And if both work, we should use both, with the right load balancing (see 1.).
&gt; 
&gt; I hope that gives you some things to think about as we write, review, merge, and \
&gt; test this code. 
&gt; T
&gt; 
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190213180422</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-13 18:04:22-0400</timestampReceived><subject>Re: [tor-dev] Proposal 300: Walking Onions: Scaling and Saving Bandwidth</subject><body>


&gt; On 12 Feb 2019, at 04:49, Ian Goldberg &lt;iang@uwaterloo.ca&gt; wrote:
&gt; 
&gt; Another issue not addressed by the current proposal is how to handle the
&gt; "not all the relays have upgraded" problem.

And how to handle the onion service protocol (in detail).

Here's one possible migration path:
(I think it works, but we should spec these changes in detail.)

Step 0: graceful protocol upgrades on new relays

The walking onions EXTEND and CREATE cells are different from the
legacy cells. (If the walking onions CREATE cell was exactly the
same as the current CREATE cell, clients would only need to check
the current hop's protocols.)

So, when extending, a client:
* sends the certified index as an additional link specifier in
  the EXTEND cell
* if both relays support the protocol, the EXTENDED cell contains an
  ENDIVE in addition to its legacy content. Otherwise, it is a legacy
  EXTENDED cell.

For v3 onion services:
* service descriptors contain the certified index as
  *an additional* link specifier
* client intro EXTENDs contain the certified index as
  *an additional* link specifier
* client INTRODUCE cells contain the certified index as
  *an additional* link specifier
* service rendezvous EXTEND cells contain the certified index as
  *an additional* link specifier

(If we implement unknown link specifier passthrough from the v3 onion
service proposal, these protocol upgrades should happen automatically.)

For v3 single onion services:
* introduction points are looked up via a 3-hop path, like guards, using a
  random middle index
* rendezvous points are connected to directly, using their IP and ID link
  specifiers. (A 3-hop lookup is too slow for rendezvous.)
* the rest of the protocol remains the same

(v2 onion services can't support walking onions, because their protocol
isn't flexible enough.)

Step 1: require protocol upgrades on new relays

For standard paths, like Step 0, but:
* if both relays support the protocol, send the certified index as
  *the only* link specifier in the EXTEND cell

For v3 onion services:
* descriptors remain the same as step 0.
  (The link specifiers in the descriptor can be 24 hours old, so the
  client can't rely on the service's view of the intro's protocols.)
* if both relays support the new protocol, client intro
  EXTEND cells contain the certified index as *the only* link specifier
* client INTRODUCE cells remain the same as step 0.
  (To support single onion services, which need legacy link specifiers.)
* if both relays support the new protocol, service rendezvous
  EXTEND cells contain the certified index as *the only* link specifier

For v3 single onion services, the protocol remains the same:
* rendezvous points are connected to directly, using their IP and ID link
  specifiers. (A 3-hop lookup is too slow for rendezvous.)

Step 2: ignore legacy relays

Like Step 1, but:
* check the consensus for a flag that tells us to ignore legacy relays

v3 onion services continue to include legacy ID and IP link specifiers,
for older tor versions, and single onion services.

Step 3: remove legacy onion service descriptor link specifiers

Once all onion services and clients support walking onions: 
* service descriptors contain the certified index as
  *the only* link specifier. (Clients will have to make a multi-hop path.
  But that's ok, because we don't support Tor2web on v3 onion services.)
* client INTRODUCE cells continue to include legacy IP and ID
  link specifiers, to support single onion services.

This upgrade process leads to some more questions:

1. How do clients discover protocol versions?

We can do one or more of:
* ENDIVEs contain a list of supported protocol versions for each relay, or
* clients ask the current hop for a copy of its descriptor, which contains
  protocol versions (see below for tradeoffs), or
* we have a flag in the consensus that tells clients if they can safely
  ignore legacy relays

2. How do clients keep their guard information up to date?

Two options:
* They ask the guard for its descriptor.
* They re-extend to the guard via a 3-hop path

Fetching the descriptor could also help us in situations where we need
to discover less common information about the relay. But it's slower,
and it looks different to the relay, and on the wire. So we might want to
avoid it. (That said, Tor already fetches descriptors from bridges.)

3. How do we minimise Tor version distinguishers?

We should implement all the stages in a small number of Tor releases,
then active them using a consensus parameter.

We should try to implement onion service link specifier passthrough in
the same release as full onion service IPv6 support, so we have fewer
onion service version distinguishers.

If we implement it later, we might end up with:
* 2-4 IPv6 distinguishers (until these versions are unsupported)
* 1 passthrough distinguisher
* 1-3 walking onions stage 0/1/2 distinguisher(s)

T

-- 
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190216174257</emailId><senderName>Piyush Kumar Sharma</senderName><senderEmail>piyushs@iiitd.ac.in</senderEmail><timestampReceived>2019-02-16 17:42:57-0400</timestampReceived><subject>[tor-dev] Sending multiple streams through a single Tor circuit</subject><body>

[Attachment #2 (multipart/alternative)]


Hello all,

I am a PhD student, and am working on some measurements in Tor.
I am stuck at a point where i need to send multiple applications(streams)
traffic through a single circuit.
I am currently using torsocks/torify to send traffic of these multiple
applications through Tor.
The main problem is that, despite trying many different ways to achieve the
same (sending multiple streams through a single circuit), i am not
successful.

Things i have tried :
1.) Force Tor process to create only a single circuit at a time preventing
any new circuit creation, so that any new stream would be attached to this
only available circuit. To acheive this i have set the following Tor
options :
set __DisablePredictedCircuits to 1
set MaxClientCircuitsPending to 1
set newcircuitperiod to 999999999
set maxcircuitdirtiness to 999999999
The problem with the above method is that it seems to work sometimes
randomly. But most of the times for some reason, a new circuit is still
created.

2.) Next, i assumed that maybe running torify multiple times for each
application is the culprit, as it may try to create new circuit for each
run. So i created a new bidirectional stream using socat, which listens on
a local TCP port, and forwards the data to the Tor SOCKS port assuming that
it will lead to a singe connection to local SOCKS.
Even this did not work and still new circuits were created randomly.

3.) Next i tried to attach streams to circuits manually, using the stem
library following the link :
https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection
. This seemed to work initially, but then after every 4-5 runs, the streams
seemed to detach automatically. Moreover, the original circuit crashed too.

It would be great, if someone could tell a simple way to achieve the same,
or would point me to any mistakes that can be improved in the above
methodologies to make them work.

Regards

Piyush

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hello \
all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I am a PhD student, and am working on some measurements \
in Tor.&lt;/div&gt;&lt;div&gt;I am stuck at a point where i need to send multiple \
applications(streams) traffic through a single circuit.&lt;/div&gt;&lt;div&gt;I am currently \
using torsocks/torify to send traffic of these multiple applications through \
Tor.&lt;/div&gt;&lt;div&gt;The main problem is that, despite trying many different ways to \
achieve the same (sending multiple streams through a single circuit), i am not \
successful.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Things i have tried :&lt;/div&gt;&lt;div&gt;1.) Force Tor \
process to create only a single circuit at a time preventing any new circuit \
creation, so that any new stream would be attached to this only available circuit. To \
acheive this i have set the following Tor options : &lt;br&gt;&lt;/div&gt;&lt;div&gt;set \
__DisablePredictedCircuits to 1&lt;br&gt;set MaxClientCircuitsPending to 1&lt;br&gt;set \
newcircuitperiod to 999999999&lt;br&gt;set maxcircuitdirtiness to 999999999&lt;/div&gt;&lt;div&gt;The \
problem with the above method is that it seems to work sometimes randomly. But most \
of the times for some reason, a new circuit is still \
created.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2.) Next, i assumed that maybe running torify \
multiple times for each application is the culprit, as it may try to create new \
circuit for each run. So i created a new bidirectional stream using socat, which \
listens on a local TCP port, and forwards the data to the Tor SOCKS port assuming \
that it will lead to a singe connection to local SOCKS.&lt;br&gt;&lt;/div&gt;&lt;div&gt;Even this did \
not work and still new circuits were created randomly.   \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3.) Next i tried to attach streams to circuits \
manually, using the stem library following the link : &lt;a \
href="https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selec \
tion"&gt;https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection&lt;/a&gt; \
. This seemed to work initially, but then after every 4-5 runs, the streams seemed to \
detach automatically. Moreover, the original circuit crashed \
too.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It would be great, if someone could tell a simple way \
to achieve the same, or would point me to any mistakes that can be improved in the \
above methodologies to make them work.&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div \
dir="ltr" class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Regards&lt;br&gt;&lt;br&gt;&lt;/div&gt;Piyush&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190218021513</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-18 02:15:13-0400</timestampReceived><subject>Re: [tor-dev] Marking Proposal 299 (Preferring IPv4 or IPv6 based on IP Version Failure Count) as Ac</subject><body>

[Attachment #2 (--Apple-Mail-E2CFF856-8705-4628-8276-43FC81B75D69)]


Hi Neel,

&gt; On 17 Feb 2019, at 08:10, neel@neelc.org wrote:
&gt; 
&gt; My proposal "Preferring IPv4 or IPv6 based on IP Version Failure Count" (a.k.a. \
&gt; Prop299) is here: https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt
&gt; 

That's a link to the proposals process document.

The proposal is here:
https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt

&gt; I haven't gotten any comments for requests when I asked for them, so I am assuming \
&gt; this proposal is okay.

Here are the tor-dev threads responding to your proposal:

The January thread starts here:
https://lists.torproject.org/pipermail/tor-dev/2019-January/013648.html

I also did an in-depth review in February:
https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html

&gt; If it is, could someone please mark this proposal as Accepted? If not, what does \
&gt; this proposal require?

Here's what Accepted proposals require:

&gt; &gt; Accepted: The proposal is complete, and we intend to implement it. After this \
&gt; &gt; point, substantive changes to the proposal should be avoided, and regarded as a \
&gt; &gt; sign of the process having failed somewhere.


https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n152

But in my detailed review, I said:
&gt; &gt; Here's one thing we must fix before we start implementing this proposal:
&gt; &gt; 
&gt; &gt; We don't store connection statistics on Tor clients right now.  This proposal \
&gt; &gt; would make us store these statistics.

Then I suggested some different ways to avoid collecting connection statistics on \
clients.

Here's what you could do:

Change the proposal so that it doesn't collect user connection statistics.

Write some code, and do some testing to answer the other questions:

I think these questions are minor tweaks, so they can be changed after the proposal \
is accepted:

&gt; 1. What is the starting SFPV?

These questions may require a significant re-design, so we need to answer then before \
the proposal is accepted:

&gt; 2. When switching between IPv4-only and IPv6-only networks, the circuit failure \
&gt; rate could start as high as 87.5% (7/8) … What does the pathbias code do when \
&gt; this many failures happen?


&gt; 3. What happens on a network which drops IPv4 or IPv6 packets?

&gt; 4. Do we want to count successful connections?

For example, to fix 2 and 3, we might need to make sure that there is at least one \
IPv4 and one IPv6 connection in every N pending connections. 

Other people may also have specific questions that need to be answered before the \
proposal is accepted. (I looked in the initial thread, and I couldn't find any.)

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi \
Neel,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 17 Feb 2019, at 08:10, &lt;a \
href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;&lt;/span&gt;&lt;br&gt;&lt;span&gt;My proposal "Preferring IPv4 or \
IPv6 based on IP Version Failure Count" (a.k.a. Prop299) is here: &lt;a \
href="https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt"&gt;https: \
//gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;That's \
a link to the proposals process document.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The proposal is \
here:&lt;/div&gt;&lt;div&gt;&lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/299- \
ip-failure-count.txt"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/299-ip-failure-count.txt&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;I haven't gotten any comments for requests when I \
asked for them, so I am assuming this proposal is okay.&lt;/span&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Here are the tor-dev threads responding to your proposal:&lt;/span&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;The January thread starts \
here:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
background-color: rgba(255, 255, 255, 0);"&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2019-January/013648.html"&gt;https:/ \
/lists.torproject.org/pipermail/tor-dev/2019-January/013648.html&lt;/a&gt;&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;I also did an in-depth review in \
February:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html" \
style="caret-color: rgb(0, 0, 0); background-color: rgba(255, 255, 255, 0);"&gt;&lt;font \
color="#000000"&gt;https://lists.torproject.org/pipermail/tor-dev/2019-February/013673.html&lt;/font&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;span&gt;If it is, could someone please mark this proposal as \
Accepted? If not, what does this proposal require?&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;Here's what Accepted proposals require:&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;pre style="padding: 0px; margin-top: 0px; \
margin-bottom: 0px;"&gt;&lt;blockquote type="cite"&gt;&lt;blockquote type="cite"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: normal; background-color: \
rgba(255, 255, 255, 0);"&gt;   Accepted: The proposal is complete, and we intend to \
implement it.  After this point, substantive changes to the proposal should be
      avoided, and regarded as a sign of the process having failed
      somewhere.&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;&lt;/pre&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;a href="https://gitweb.torproject.org/torspec.git/tree/proposals/001-proces \
s.txt#n152"&gt;https://gitweb.torproject.org/torspec.git/tree/proposals/001-process.txt#n152&lt;/a&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;But in my detailed review, I \
said:&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;font face="UICTFontTextStyleTallBody"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0);"&gt;&lt;blockquote \
type="cite"&gt;&lt;/blockquote&gt;&lt;/span&gt;&lt;/font&gt;&lt;blockquote type="cite"&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;blockquote type="cite"&gt;&lt;span style="white-space: \
normal; background-color: rgba(255, 255, 255, 0);"&gt;Here's one thing we must fix \
before we start implementing this proposal:&lt;br&gt;&lt;br&gt;We don't store connection \
statistics on Tor clients right now.  This proposal would make us store these \
statistics.&lt;/span&gt;&lt;/blockquote&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;&lt;font \
face="UICTFontTextStyleTallBody"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;Then I suggested some different ways to avoid collecting connection \
statistics on clients.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, \
255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Here's what you could do:&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Change the proposal so that it \
doesn't collect user connection statistics.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Write some \
code, and do some testing to answer the other questions:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I \
think these questions are minor tweaks, so they can be changed after the proposal is \
accepted:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); white-space: normal; \
background-color: rgba(255, 255, 255, 0);"&gt;1. What is the starting \
SFPV?&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;These questions may require a \
significant re-design, so we need to answer then before the proposal is \
accepted:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote type="cite"&gt;&lt;font \
color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); white-space: normal; \
background-color: rgba(255, 255, 255, 0);"&gt;2. When switching between IPv4-only and \
IPv6-only networks, the circuit failure rate could start as high as 87.5% \
(7/8) … What does the pathbias code do when this many failures \
happen?&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote \
type="cite"&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;3. What happens on a \
network which drops IPv4 or IPv6 packets?&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;font color="#000000"&gt;&lt;span style="caret-color: rgb(0, 0, 0); \
white-space: normal; background-color: rgba(255, 255, 255, 0);"&gt;4. Do we want to \
count successful connections?&lt;/span&gt;&lt;/font&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;For example, \
to fix 2 and 3, we might need to make sure that there is at least one IPv4 and one \
IPv6 connection in every N pending connections. &lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;Other people may \
also have specific questions that need to be answered before the proposal is \
accepted. (I looked in the initial thread, and I couldn't find \
any.)&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190219164505</emailId><senderName>Gedropi</senderName><senderEmail>gedropi@postinbox.com</senderEmail><timestampReceived>2019-02-19 16:45:05-0400</timestampReceived><subject>Re: [tor-dev] tor-dev Digest, Vol 97, Issue 19</subject><body>

Attn: Iain Learmonth &lt;irl@torproject.org&gt;

Thank you for your thoughtful response.  Perhaps this was the wrong mailing list in \
some ways.

Backing up on Iain's email conversation, I have always built my desktop computers \
from scratch.  Salvaged hardware and researched drivers, etc.  There is nothing \
pre-installed.  (My colleagues affectionately call me the Queen of Setup and \
Config.")  By design.  I have an OEM version of XP that I put on initially, but that \
is only the start.  Since xp is not locked down like Windows 7 and beyond, I then \
reconfigure so much!  You would be right in assuming that a standard xp install is a \
security risk.  But I am constantly tracing packets, studying the traffic at the back \
end to see where the leaks are.  Then I figure out what I can do to plug / understand \
the leaks.  Partly therefore, xp is a learning / testing tool.  

I use xp for basic apps.  But I would sooner drink lye than use Windows 7 and beyond. \
Therefore, as you already suggested, I did have a dual boot with a Parrot \
distribution.  That is, until my sata drive died.  Upon purchase, I will return to \
the dual boot or to two machines.  So therefore, I am back to xp for the time being.  \
Until such time as I have the dual/two machine option again, I surely would like to \
be able to update as much of Tor as I can.  (I know that you are serving the masses \
and not an individual person).

Anyhow, I love Tor and I love having kindred spirits that 'get' security.  Thank you \
for what you are doing.

~Emily

On Tue, Feb 19, 2019, at 12:00 PM, tor-dev-request@lists.torproject.org wrote:
&gt; Send tor-dev mailing list submissions to
&gt; 	tor-dev@lists.torproject.org
&gt; 
&gt; To subscribe or unsubscribe via the World Wide Web, visit
&gt; 	https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; or, via email, send a message with subject or body 'help' to
&gt; 	tor-dev-request@lists.torproject.org
&gt; 
&gt; You can reach the person managing the list at
&gt; 	tor-dev-owner@lists.torproject.org
&gt; 
&gt; When replying, please edit your Subject line so it is more specific
&gt; than "Re: Contents of tor-dev digest..."
&gt; 
&gt; 
&gt; Today's Topics:
&gt; 
&gt; 1. Re: xp + T (Iain Learmonth)
&gt; 2. Sending multiple streams throuh a single Tor circuit
&gt; (Piyush Kumar Sharma)
&gt; 3. Re: Sending multiple streams throuh a single Tor circuit (meejah)
&gt; 
&gt; 
&gt; ----------------------------------------------------------------------
&gt; 
&gt; Message: 1
&gt; Date: Mon, 18 Feb 2019 14:32:11 +0000
&gt; From: Iain Learmonth &lt;irl@torproject.org&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] xp + T
&gt; Message-ID: &lt;4b405fbe-6130-ef98-1a8d-74bcacc8bc5f@torproject.org&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; Hi,
&gt; 
&gt; On 13/02/2019 16:56, neel@neelc.org wrote:
&gt; &gt; I don't think this is the right mailing list.
&gt; 
&gt; This is entirely the correct mailing list as it is discussing a
&gt; technical policy of the network team. This policy can be found here:
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/SupportedPlatforms
&gt;  
&gt; &gt; You probably shouldn't be using Windows XP, otherwise the EOL'd OS would
&gt; &gt; be a weak point in security. One option could be to dual-boot Windows XP
&gt; &gt; and Linux/*BSD, using Linux/*BSD for Tor and browsing, and XP for
&gt; &gt; applications that haven't been ported.
&gt; 
&gt; It is worth remembering that most people do not have the privileges to
&gt; install software on the computers that they use.
&gt; 
&gt; Unfortunately, the current policy of the network team is that they will
&gt; not even accept patches for Windows XP support and will merge changes
&gt; that break Windows XP support.
&gt; 
&gt; I would be interested in statistics that show the current Windows XP
&gt; user base, especially in countries with users that can most benefit from
&gt; Tor. The policy has been drawn up primarily on technical considerations
&gt; but if it is shown that this has negative impacts for large numbers of
&gt; users then it may be reconsidered.
&gt; 
&gt; Thanks,
&gt; Iain.
&gt; 
&gt; -------------- next part --------------
&gt; A non-text attachment was scrubbed...
&gt; Name: signature.asc
&gt; Type: application/pgp-signature
&gt; Size: 833 bytes
&gt; Desc: OpenPGP digital signature
&gt; URL: 
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190218/a07b928c/attachment-0001.sig&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 2
&gt; Date: Mon, 18 Feb 2019 23:33:32 +0530
&gt; From: Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: [tor-dev] Sending multiple streams throuh a single Tor
&gt; 	circuit
&gt; Message-ID:
&gt; 	&lt;CAGkdf3fgFbqWYuLt-uEMT_XvaLoxkJbqCPYiosnY8Mw5teECyA@mail.gmail.com&gt;
&gt; Content-Type: text/plain; charset="utf-8"
&gt; 
&gt; Hello all,
&gt; 
&gt; I am a PhD student, and am working on some measurements in Tor.
&gt; I am stuck at a point where i need to send multiple applications(streams)
&gt; traffic through a single circuit.
&gt; I am currently using torsocks/torify to send traffic of these multiple
&gt; applications through Tor.
&gt; The main problem is that, despite trying many different ways to achieve the
&gt; same (sending multiple streams through a single circuit), i am not
&gt; successful.
&gt; 
&gt; Things i have tried :
&gt; 1.) Force Tor process to create only a single circuit at a time preventing
&gt; any new circuit creation, so that any new stream would be attached to this
&gt; only available circuit. To acheive this i have set the following Tor
&gt; options :
&gt; set __DisablePredictedCircuits to 1
&gt; set MaxClientCircuitsPending to 1
&gt; set newcircuitperiod to 999999999
&gt; set maxcircuitdirtiness to 999999999
&gt; The problem with the above method is that it seems to work sometimes
&gt; randomly. But most of the times for some reason, a new circuit is still
&gt; created.
&gt; 
&gt; 2.) Next, i assumed that maybe running torify multiple times for each
&gt; application is the culprit, as it may try to create new circuit for each
&gt; run. So i created a new bidirectional stream using socat, which listens on
&gt; a local TCP port, and forwards the data to the Tor SOCKS port assuming that
&gt; it will lead to a singe connection to local SOCKS.
&gt; Even this did not work and still new circuits were created randomly.
&gt; 
&gt; 3.) Next i tried to attach streams to circuits manually, using the stem
&gt; library following the link :
&gt; https://stem.torproject.org/tutorials/to_russia_with_love.html#custom-path-selection
&gt;                 
&gt; . This seemed to work initially, but then after every 4-5 runs, the 
&gt; streams
&gt; seemed to detach automatically. Moreover, the original circuit crashed 
&gt; too.
&gt; 
&gt; It would be great, if someone could tell a simple way to achieve the same,
&gt; or would point me to any mistakes that can be improved in the above
&gt; methodologies to make them work.
&gt; 
&gt; Regards
&gt; 
&gt; Piyush
&gt; -------------- next part --------------
&gt; An HTML attachment was scrubbed...
&gt; URL: 
&gt; &lt;http://lists.torproject.org/pipermail/tor-dev/attachments/20190218/6a263872/attachment-0001.html&gt;
&gt;  
&gt; ------------------------------
&gt; 
&gt; Message: 3
&gt; Date: Mon, 18 Feb 2019 22:08:25 +0400
&gt; From: meejah &lt;meejah@meejah.ca&gt;
&gt; To: tor-dev@lists.torproject.org
&gt; Subject: Re: [tor-dev] Sending multiple streams throuh a single Tor
&gt; 	circuit
&gt; Message-ID: &lt;86va1h0y1y.fsf@atlantis.meejah.ca&gt;
&gt; Content-Type: text/plain; charset=us-ascii
&gt; 
&gt; 
&gt; You could give the command-line tool "carml" a try. See here:
&gt; 
&gt; https://carml.readthedocs.io/en/latest/
&gt; 
&gt; You'll want to use something like "carml circ *,*,*" to build a 3-hop
&gt; circuit through Tor-chosen relays (or replace any of the *'s with a
&gt; fingerprint) and then "carml stream --attach &lt;circ-number&gt;" to attach
&gt; streams.
&gt; 
&gt; -- 
&gt; meejah
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; Subject: Digest Footer
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; ------------------------------
&gt; 
&gt; End of tor-dev Digest, Vol 97, Issue 19
&gt; ***************************************
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190221045326</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-21 04:53:26-0400</timestampReceived><subject>Re: [tor-dev] Proposal Idea: Consensus Options</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 21 Feb 2019, at 00:29, Nick Mathewson &lt;nickm@alum.mit.edu&gt; wrote:
&gt; 
&gt; On Mon, Feb 11, 2019 at 7:00 AM teor &lt;teor@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; Hi all,
&gt; &gt; 
&gt; &gt; I have a Tor proposal idea: we should make it easier for tor to get options from \
&gt; &gt; the consensus. 
&gt; &gt; At the moment, a few tor options are set from the consensus. (If they aren't \
&gt; &gt; already set in the torrc.) But there's no abstraction in tor's code, so they're \
&gt; &gt; all implemented slightly differently. 
&gt; &gt; We could refactor the code so these options are much easier to declare. And we \
&gt; &gt; could provide a graceful upgrade path from off-by-default features, to \
&gt; &gt; on-by-default features.
&gt; 
&gt; This is a cool idea, and something to think about as we refactor the
&gt; configuration handling code.
&gt; 
&gt; One area I'd want a proposal like this to consider is what we'd be
&gt; expecting other implementations of the Tor protocol to do.  If we put
&gt; an option-setting-feature into the consensus like this, does that
&gt; option's behavior in Tor become part of the spec?  I think the
&gt; simplest answer here is "yes, the option must be documented as part of
&gt; the spec".
&gt; 
&gt; 
&gt; &gt; 1. Tor refactoring
&gt; &gt; 
&gt; &gt; We refactor the tor config code, so that options can be declared as consensus \
&gt; &gt; options. If the option is configured locally, that value is used. Otherwise, the \
&gt; &gt; consensus value is used. If there is no configured or consensus value, the \
&gt; &gt; default is used. 
&gt; &gt; Each entry in the option declaration table would need 3 extra values:
&gt; &gt; * a flag that tells tor whether to check the consensus
&gt; &gt; * a minimum permitted value from the consensus
&gt; &gt; * a maximum permitted value from the consensus
&gt; &gt; 
&gt; &gt; At the same time, we might also want to:
&gt; &gt; * declare a minimum and maximum value for all options, not just the consensus \
&gt; &gt;                 options
&gt; &gt; * add a log message fragment that explains the value restriction
&gt; 
&gt; I'd also suggest that we also have an entry that tells us which
&gt; consensus parameter to look at, so that the consensus name doesn't
&gt; need to be the same as the option's name.  We'd need this for backward
&gt; compatibility at any rate.

I agree: I thought of this after I sent the email.
(And then I forgot, because I was on leave.)

&gt; &gt; So far, this is a refactoring idea. But here's where it gets interesting…
&gt; &gt; 
&gt; &gt; 2. Tor authority behaviour change
&gt; &gt; 
&gt; &gt; We also want to gracefully upgrade new features, so that they are on-by-default.
&gt; &gt; 
&gt; &gt; For privacy sensitive features, we would keep the current process:
&gt; &gt; 1. Deploy the feature off-by-default, but make it a consensus option
&gt; &gt; 2. Manually change the consensus parameter so the option is on-by-default
&gt; &gt; 3. Change the next release of Tor so the option is on-by-default
&gt; &gt; 4. When all supported Tor versions have the feature on-by-default, manually \
&gt; &gt; remove the consensus parameter 
&gt; &gt; This upgrade path allows us to make sure that almost all the network has the same \
&gt; &gt; behaviour. 
&gt; &gt; But for other features, we could upgrade faster:
&gt; &gt; 1. Deploy the feature off-by-default, but make it a consensus option
&gt; &gt; 2. Change the next release of Tor so the option is on-by-default
&gt; &gt; 3. When the authorities upgrade to the next release, they automatically vote the \
&gt; &gt; consensus parameter on-by-default 4. When all supported Tor versions have the \
&gt; &gt; feature on-by-default, remove the flag telling authorities to write the consensus \
&gt; &gt; parameter from the option 5. When the authorities upgrade to the next release, \
&gt; &gt; they automatically stop voting for the consensus parameter 
&gt; &gt; This upgrade path turns the option on when a majority of authorities upgrade. We \
&gt; &gt; wouldn't be able to use it for options where flapping is an issue.
&gt; 
&gt; Relatedly (?), one case that we sometimes have wanted in the past is
&gt; the ability to disable an option or enable it for only a range set of
&gt; versions.  For example, we'd implement an off-by-default feature as a
&gt; consensus option ... and then discover some bug in the implementation
&gt; of that feature before we turned it on.

It seems like implementing versions in the consensus could get really
complicated.

Here's one way to deal with that scenario:
* When the fix is implemented, rename the consensus parameter (but
  keep the same torrc option name)
* Keep the old consensus parameter off, but set the new consensus
  parameter once we're sure the bug is fixed

For example:

Let's say that release 1.1.0 has a MakeTorFaster option, with a
MakeTorFaster consensus parameter. It's off by default, so the
authorities set MakeTorFaster=0.

But in release 1.3.0, we discover that 1.1.0 and 1.2.0 had a broken
MakeTorFaster implementation. So we fix MakeTorFaster in 1.3.0, and
call the fix MakeTorFaster_130 in the consensus.

The authorities start by setting MakeTorFaster=0 and
MakeTorFaster_130=0. Then, when we're happy with the fix, we set
MakeTorFaster_130=1. (But leave the broken option off.)

Then, 1.3.0 and later are configured with MakeTorFaster, but the
broken versions are not.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlxuLsYACgkQEP6qDnB1
ZypcFhAAniF6K5R5/XFrFgb6tsJrmz1Lyl9fYohCWTo5uGrKMiiMQWz5g5PbyVKL
9KFQ9WB6CVwuilJq8z0mPMRVoUnudYvKhc466PEsDxDtj1SVBe96IEe+TQogPgg5
1AevlXGGeHTKIdOK84cMD+W0tT0ZteSdkM6AFvrG6LurNDzIl8eREGgYmAdS44uQ
8hdUYU9skbAztJHEQGrrhIl0CDBCZgeitGfYp4ZLREDxaTkdMLdOw9vgc7orf+XU
R6lmMDAAHsDkDcnQ97X+kwh3DOcI4lQWI4zaJ64Iz5oRmF4q8+F3tmT3SSM3l3I5
CfD2cxM4PhFeTdbG6efusS5rpU9PrXDpzix409BUcpeT+sfMUZ8MXeQcme0GAkR8
g+flHMTPxdUcmsvWMBuVh2Zv4Yea7QoOcr1QHn2Jhzg/A8h358HKjk0M2l8YalNN
a5iosPr6b6QH8S+mQ4txoeG6DHrJbhzYmBNfSvdZpV6Mo2a2tV8s3FdzLdTQUQhU
O7S5FECMMXbDJWY7tAzrkFyCaoOHQBDxZKpzUJk29iOMt943IMk4P/F+a6M1yRRU
4andkM/9gcXhx36kpz/QKpidodTGBBZc9EUU6FDA4JHFRjGQ9plj3ipYYdWz06EN
TS8OToKUdOgl4ui1fLKnGCS/Zst85RFc9X2c39oIV5o+1FWXBno=
=losl
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190221051914</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-21 05:19:14-0400</timestampReceived><subject>Re: [tor-dev] Testing Network: Circuit buildup errors and missing guards</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 14 Feb 2019, at 23:50, Katharina Kohls &lt;katharina.kohls@rub.de&gt; wrote:
&gt; 
&gt; &gt; 
&gt; &gt; We recently changed the bootstrap percentages and messages in Tor.
&gt; &gt; Please paste the log lines that containing these bootstrap messages.
&gt; &gt; And any error messages near those lines.
&gt; Feb 14 10:37:46.000 [notice] Bootstrapped 10%: Finishing handshake with directory \
&gt; server Feb 14 10:38:32.000 [notice] I learned some more directory information, but \
&gt;                 not enough to build a circuit: We have no usable consensus.
&gt; ...
&gt; Feb 14 10:38:32.000 [notice] Bootstrapped 45%: Asking for relay descriptors for \
&gt; internal paths Feb 14 10:38:32.000 [notice] I learned some more directory \
&gt; information, but not enough to build a circuit: We need more microdescriptors: we \
&gt; have 0/9, and can only build 0% of likely paths. (We have 0% of guards bw, 0% of \
&gt;                 midpoint bw, and 0% of end bw (no exits in consensus, using mid) = \
&gt;                 0% of path bw.)
&gt; ...

In this consensus, you have 9 relays.
(In previous emails, your logs said "0/2".)

If a future consensus only has 2 relays, you'll get similar
errors to the ones you have right now.

&gt; Feb 14 10:38:32.000 [notice] The current consensus contains exit nodes. Tor can \
&gt; build exit and internal paths. Feb 14 10:38:32.000 [notice] Bootstrapped 50%: \
&gt; Loading relay descriptors Feb 14 10:38:32.000 [notice] Bootstrapped 80%: Connecting \
&gt; to the Tor network

Tor logs this message when it has enough relay descriptors.

So you have at least 60% of the relays in the network, which
in this case is ceil(60% * 9) = 6.

So in this network, you do not have a problem with the number
of relays in the consensus.

&gt; Feb 14 10:38:33.000 [warn] Failed to find node for hop #1 of our path. Discarding \
&gt; this circuit. Feb 14 10:38:33.000 [notice] Our circuit 0 (id: 1) died due to an \
&gt; invalid selected path, purpose General-purpose client. This may be a torrc \
&gt; configuration issue, or a bug. Feb 14 10:38:34.000 [warn] Failed to find node for \
&gt; hop #1 of our path. Discarding this circuit.

...

Your client can't find a valid guard.
That's probably because all your relays are in the same /16.

Tor builds paths from the exit to the guard. It rejects paths
where any of the relays are in the same /16. (I don't know why
it failed on the guard, rather than the middle.)

Try setting:

TestingTorNetwork 1

(But this sets a lot of other options that you may not want.)

Or:

EnforceDistinctSubnets 0


You might also find it useful to set:

LogTimeGranularity 1

So your logs are in milliseconds, not seconds.

&gt; &gt; 
&gt; &gt; To get good bandwidth numbers, you'll need to pass some traffic
&gt; &gt; through your network. To get measured bandwidth in the votes,
&gt; &gt; you'll need to run a bandwidth authority, like sbws:
&gt; &gt; https://git.torproject.org/sbws.git
&gt; Is this optional, are there alternative ways of measuring bandwidth?

It is optional: try "EnforceDistinctSubnets 0" and see if your
network works without bandwidth measurements.

&gt; &gt; It would help to know what's actually in the consensus. (See below.)
&gt; &gt; 
&gt; I pasted one of the microdescriptors at the end of the message (it's fetched from \
&gt; one of the authorities).
&gt; &gt; 
&gt; &gt; Maybe there's a bug in ShutdownWaitLength.
&gt; &gt; We changed that code recently.
&gt; &gt; Is Tor actually shut down when you remove the files?
&gt; It is definitely shut down when I start deleting the files.
&gt; &gt; 
&gt; &gt; When you start Tor, what is actually in the data directory?
&gt; I followed your idea of defining and deleting directories so now there are data/ \
&gt; cache/ and keys/ defined in the torrc and this is what I remove in the cleanup \
&gt; procedure. I keep the keys dir, the stats file, and the fingerprint file. The issue \
&gt; with old Guard entries in the new state file remains.

I think I worked out why the dates are wrong:

Tor randomises the dates in the state file, to reduce the
accuracy of time-based forensic analysis.

So I would expect to see guards spread across a few
different dates.

&gt; &gt; tor/server/all is a list of all relay descriptors that the authority knows about.
&gt; &gt; 
&gt; &gt; But the consensus is different: it contains the relays from the authorities'
&gt; &gt; votes, but only if those relays are reachable from the authorities
&gt; &gt; (the Running flag), and the authorities agree on enough info about the
&gt; &gt; relays.
&gt; &gt; 
&gt; &gt; Please check the votes and consensuses on each authority:
&gt; &gt; http://&lt;hostname&gt;/tor/status-vote/current/authority
&gt; &gt; http://&lt;hostname&gt;/tor/status-vote/current/consensus
&gt; &gt; http://&lt;hostname&gt;/tor/status-vote/current/consensus-microdesc
&gt; One of the microdesc files is pasted below. I see the Running flag set for several \
&gt; relays, along with Fast, Guard, and sometimes also Exit (for example, relay08 is \
&gt; defined as exit in the torrc and also shows up as Exit Fast Guard HSDir Running \
&gt; Stable V2Dir Valid).
&gt; &gt; 
&gt; &gt; That's not how Tor works:
&gt; &gt; 
&gt; &gt; Clients randomly select relays from the consensus.
&gt; Yes, and this is exactly what I need to measure in the private network. My project \
&gt; is about testing the consequences of the DoS features in relays and how the client \
&gt; reacts to being blocked (if it recognizes this at all, that's one of the things I \
&gt; want to find     out).

Sounds like a great project!
Thank you for working on it.

...

&gt; &gt; The dates are the time when Tor chose the guard.
&gt; &gt; Maybe you're not actually deleting the state file?
&gt; &gt; Maybe there's an undocumented state.new file?
&gt; I'm pretty much sure I delete the file and that there are no .new versions of the \
&gt; state file. Still, after a while the old Guards show up in the state file. What \
&gt; information is used to generate the state file? Maybe there is still some kind of \
&gt; cache left somewhere else?

(Tor deliberately randomises the dates. See above.)

...

&gt; &gt; 
&gt; &gt; Let me know if you're still having trouble.
&gt; Yes, the setup is still not in the state where the client is able to create \
&gt; "natural" circuits. 
&gt; network-status-version 3 microdesc

...

&gt; dir-source auth01 14EA360AE456079B386651CDEA2996A6D48F1798 100.113.5.34 \
&gt; 100.113.5.34 7000 5000 contact katharina.kohls@rub.de
&gt; vote-digest 0E3E3697D3CC785928FE2B27B43E272BB7D52650
&gt; dir-source auth01 92E466CD419200DE68A4893EA5A758DAE70EFD9E 100.113.5.29 \
&gt; 100.113.5.29 7000 5000 contact katharina.kohls@rub.de
&gt; vote-digest 3ADC1A8BF96D74C661DF5797D2EE59FAB899DC00

Your authorities have the same nickname: tor won't get
confused, but the nicknames in the logs might confuse
people.

&gt; r client01 BhCZoOQt0RnwUth3dUbyVVP9wxM 2019-02-14 09:37:31 100.113.5.28 5000 0

Your clients should not be in the consensus: clients
and relays behave differently when building
connections and circuits.

Try removing the ORPort, or setting ClientOnly 1.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlxuNNIACgkQEP6qDnB1
ZyoynA//eJAEFnPYgvqWUgJJyF0J8vHMbKcr2XIjlwzvCIi7V4RJq4drHimSvMfD
xDbdkq0j4XsZ32ZPBTNZYYUOMq31mX2IRvtI9D2+EHA5tj+znxh+hWAhEh259XMW
N6XLU2vCOkK5qXU6eYg8id2zOR13V89yA6uio3XiMROKFnZCKe416JJieOe2/fyJ
zd3dfBKeEP8e78Qdp+pOntXIInpaOFvIbhmhvtT3mB0o8oE0IaXtx+rumrIH+Hm8
OWpkbHpZ6EnS7PEok9f/2Jk3yhyMe3kzcw9W0WLymFlpKHT3aZ5uxnC6NlSSV4Q4
P8s2n4cHvOW34zd00bwpjsqwvk9AG+u/iCYibcYV3KcZYnw7qmP5TUt6Vf/4KVCL
t+TVuukRMPSNS+H6Uq8IpUC18GKlYwCfYrfZZa1dQ/jqxFnqf24gztDEGi0w89zC
J4RZCGHszQcFl5nIMCzqjHFV3I/h5v4M3Tw6AoTgX5cWyLebzoM9c8Jj15JGCrpu
QDC/jzYyK/iaIhYd1ilZSI+FiPpegVaWm5fVQn9Ds7du9gDwhFKw+Q/nV3b3QoJd
cYnUQLpv8EuBIgeaznC5sZ5agvK/hPRBWAPIhibYUOSASTEn0RgKxxw61RsBWI03
RcAlmB75bi9EEchxfYOery7OeJNUg3uvmibeLuAOnwMikj5EMzs=
=meqH
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226105144</emailId><senderName>Pili Guerra</senderName><senderEmail>pili@torproject.org</senderEmail><timestampReceived>2019-02-26 10:51:44-0400</timestampReceived><subject>Re: [tor-dev] GSOC 2019 tor project participation</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Just a quick note to let you know that unfortunately we have not been selected for \
GSoC 2019 :(

We would love it if you could still contribute to Tor Project outside of the GSoC \
program, but we understand that it can be hard to balance work and studies.

Thank you for your interest in volunteering, we hope to see you contribute in future \
:)

Pili

—
Project Manager: Tor Browser, UX and Community teams
pili at torproject dot org 
gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45

&gt; On 22 Feb 2019, at 13:26, Pili Guerra &lt;pili@torproject.org&gt; wrote:
&gt; 
&gt; Hi,
&gt; 
&gt; We have applied for GSoC 2019 but will not find out if we have been accepted until \
&gt; the 26th February. 
&gt; So, watch this space :) 
&gt; 
&gt; Thanks,
&gt; 
&gt; Pili
&gt; —
&gt; Project Manager: Tor Browser, UX and Community teams
&gt; pili at torproject dot org 
&gt; gpg 3E7F A89E 2459 B6CC A62F 56B8 C6CB 772E F096 9C45
&gt; 
&gt; &gt; On 22 Feb 2019, at 11:15, @usernamedt &lt;usernamedt@protonmail.ch \
&gt; &gt; &lt;mailto:usernamedt@protonmail.ch&gt;&gt; wrote: 
&gt; &gt; Hello everyone,
&gt; &gt; 
&gt; &gt; Can someone confirm that tor project is participating at GSOC 2019?
&gt; &gt; I am a Mathematics and Computer Science student (Russia, Ural Federal \
&gt; &gt; University). Privacy violation and internet censorship became serious problems \
&gt; &gt; for me personally and for many people in my country. I am looking forward to \
&gt; &gt; contribute to tor project by implementing OONI Encore style test in browser. 
&gt; &gt; Thanks!
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


[Attachment #5 (unknown)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
line-break: after-white-space;" class=""&gt;Hi,&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Just a quick note to let you know that unfortunately we have not been \
selected for GSoC 2019 :(&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;We \
would love it if you could still contribute to Tor Project outside of the GSoC \
program, but we understand that it can be hard to balance work and studies.&lt;/div&gt;&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Thank you for your interest in \
volunteering, we hope to see you contribute in future :)&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Pili&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;div class=""&gt; &lt;div \
style="caret-color: rgb(0, 0, 0); color: rgb(0, 0, 0); font-family: Helvetica; \
font-size: 12px; font-style: normal; font-variant-caps: normal; font-weight: normal; \
letter-spacing: normal; orphans: auto; text-align: start; text-indent: 0px; \
text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; \
-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; text-decoration: \
none;"&gt;—&lt;br class=""&gt;Project Manager: Tor Browser, UX and Community teams&lt;br \
class=""&gt;pili at torproject dot org &lt;br class=""&gt;gpg 3E7F A89E 2459 B6CC \
A62F 56B8 C6CB 772E F096 9C45&lt;/div&gt; &lt;/div&gt;
&lt;div&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On 22 Feb 2019, at \
13:26, Pili Guerra &lt;&lt;a href="mailto:pili@torproject.org" \
class=""&gt;pili@torproject.org&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;meta http-equiv="Content-Type" \
content="text/html; charset=utf-8" class=""&gt;&lt;div style="word-wrap: break-word; \
-webkit-nbsp-mode: space; line-break: after-white-space;" class=""&gt;Hi,&lt;div \
class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;We have applied for GSoC 2019 but will not \
find out if we have been accepted until the 26th February.&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;So, watch this space :) &lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Thanks,&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div \
class=""&gt;Pili&lt;br class=""&gt;&lt;div class=""&gt; &lt;div style="caret-color: rgb(0, 0, 0); \
font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-caps: \
normal; font-weight: normal; letter-spacing: normal; text-align: start; text-indent: \
0px; text-transform: none; white-space: normal; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; text-decoration: none;" class=""&gt;—&lt;br \
class=""&gt;Project Manager: Tor Browser, UX and Community teams&lt;br class=""&gt;pili \
at torproject dot org &lt;br class=""&gt;gpg 3E7F A89E 2459 B6CC A62F 56B8 \
C6CB 772E F096 9C45&lt;/div&gt; &lt;/div&gt;
&lt;div class=""&gt;&lt;br class=""&gt;&lt;blockquote type="cite" class=""&gt;&lt;div class=""&gt;On 22 Feb \
2019, at 11:15, @usernamedt &lt;&lt;a href="mailto:usernamedt@protonmail.ch" \
class=""&gt;usernamedt@protonmail.ch&lt;/a&gt;&gt; wrote:&lt;/div&gt;&lt;br \
class="Apple-interchange-newline"&gt;&lt;div class=""&gt;&lt;div class=""&gt;Hello everyone,&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Can someone confirm \
that tor project is participating at GSOC 2019?&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;I am \
a Mathematics and Computer Science student (Russia, Ural Federal University).&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;Privacy violation and internet censorship became serious \
problems for me personally and for many people in my country. I &lt;span class=""&gt;&lt;span \
title="" class=""&gt;am looking forward to contribute to tor project by implementing \
&lt;/span&gt;&lt;/span&gt;OONI Encore style test in browser.&lt;br class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;span class=""&gt;&lt;span title="" \
class=""&gt;Thanks!&lt;/span&gt;&lt;/span&gt;&lt;br \
class=""&gt;&lt;/div&gt;_______________________________________________&lt;br class=""&gt;tor-dev \
mailing list&lt;br class=""&gt;&lt;a href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br class=""&gt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;/div&gt;_______________________________________________&lt;br \
class=""&gt;tor-dev mailing list&lt;br class=""&gt;&lt;a \
href="mailto:tor-dev@lists.torproject.org" \
class=""&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br \
class=""&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;br \
class=""&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br class=""&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226112720</emailId><senderName>Iain Learmonth</senderName><senderEmail>irl@torproject.org</senderEmail><timestampReceived>2019-02-26 11:27:20-0400</timestampReceived><subject>Re: [tor-dev] xp + T</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

On 26/02/2019 10:42, Georg Koppen wrote:
&gt; I am not sure whether that's actually the intention of the original
&gt; question. Assuming with "get Tor updates" it's actually meant to get
&gt; *Tor Browser* updates (there is no tor update mechanism for Windows
&gt; afaict) let me add the browser related bits here.
&gt; 
&gt; Mozilla stopped supporting Windows XP starting with Firefox 60 ESR,
&gt; which is the browser version underlying Tor Browser 8.x. We decided that
&gt; we will follow Mozilla here as maintaining an even larger fork
&gt; supporting XP is risky both security- and resource-wise. Thus, even if
&gt; tor would not have the respective policy for Windows XP, the browser
&gt; would not run on that outdated and unmaintained Windows version.

I think this is perfectly reasonable given the size of the codebase.

In February 2017, Windows XP made up 8.4% of the Firefox userbase. After
this there are no metrics on how many Firefox users there are, or Vista
users, I guess because those OS are no longer supported. It's also not
clear where these users are located and what was preventing them from
upgrading.

https://data.firefox.com/dashboard/hardware

Tor Metrics does not have per-version data on Windows users, only
Windows vs. Mac vs. Linux.

I think that if there was a strong desire to have Windows XP/Vista
support for Tor Browser though, it would need to have that support
reintroduced in Firefox.

Thanks,
Iain.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190226221120</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-02-26 22:11:20-0400</timestampReceived><subject>Re: [tor-dev] Sending multiple streams throuh a single Tor circuit</subject><body>

Piyush Kumar Sharma &lt;piyushs@iiitd.ac.in&gt; writes:

&gt; The application is doing a voice call using mumble.

Usually that error means the server couldn't be reached from the exit, I
believe. That could be for many reasons. Did it ever succeed? How many
exits did it try?

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190226222555</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-26 22:25:55-0400</timestampReceived><subject>Re: [tor-dev] Proposal: Don't include package fingerprints in consensus documents</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 27 Feb 2019, at 02:30, Iain Learmonth &lt;irl@torproject.org&gt; wrote:
&gt; 
&gt; On 25/02/2019 23:30, teor wrote:
&gt;&gt; Looks good to me, let's merge it as an "accepted" proposal?
&gt; 
&gt; Is there some action I should take here like opening a PR or does
&gt; someone just pick up the text and commit it?

You can open a trac ticket and link to a GitHub pull request.

T

["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlx1vPMACgkQEP6qDnB1
Zyptow/+JUheqIJXp0d/Mbwl/cCmNQ+ZdHb+smq17VKYUHopq0Vwn+bIgwORGwPW
lSJhDvmD50X8CEC/VUTnTDt9/N0VLOPmUX8ljuTu9qW+0Z1ZpJwadUO4nFfWcSjh
6Ei2EyU+drAzjmXDYQksMcmGwKqsNycXTZWFuHwXHvKfIYk9jIzpOF5XSTXA1uLO
BD0lI5iOB6V8CGzsxmg7XWDncOQkt37IjpzblEQHh57fiSDym1Krwk0XoEyBvZG2
KKuVu7W/N363uSNyNGJFGDgbRUXk9o5/Agkz91H9dCzpWIU7WwodVlNBkKbJqd25
WvQDb82tWbX4eQEdzlc6VXU1ynvsC7fL8jA3AHnVDTDGrcca8ME57xUpIOAmOJcf
r7MFP3MbyDOFg7VSs9icIO+XeKdYJF3/7GCSDAx7y3wh/Ge90o29hbkxL8vzbKBd
3L1Ky0VyY5QvoAultO/hSXWx77+IWVL1/2D1ZaRJs5YDSSpKV8E/1HCdTvG8cS0f
pBN5ELACYzWtcDAB2UqmidGhaa3lm3+5MJdXYu5jPZsW6QqdfpAd/6MfTrgqGc/g
5sMsvaip+6sN7s2NL7h3N0UkDBGSJSChz2gZkPQH/GCEroXJuk8ncwYdfzC3HiN3
MyTsly0iCjh+zSrD5BizKN2xatPS+E0sxJHCFZbkhJFf9BLmOYk=
=ozRS
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190227220932</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-02-27 22:09:32-0400</timestampReceived><subject>[tor-dev] Speeding up your Tor Appveyor Builds</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

We have made some changes to speed up Tor's Appveyor builds:
https://bugs.torproject.org/29601
They should be merged soon.

If you have Appveyor set up on your personal tor git repository, you
can change Appveyor's configuration so that it's a bit faster.
(We can't make these changes in the .appveyor.yaml config.)

0. Log in to Appveyor:
     https://ci.appveyor.com/
   I use GitHub to log in to Appveyor.

1. Go to Appveyor's project settings page.
   Mine is:
     https://ci.appveyor.com/project/teor2345/tor/settings

2. Set "Build timeout, minutes" to 30.
   The default timeout is 60 minutes.
   Tor's jobs usually take about 10 minutes, unless they hang.

3. Set the "Rolling builds" checkbox.
   The default is:
     "build all versions of a branch/pull request".
   Rolling builds means:
     "when a branch or pull request is updated, cancel the previous build,
     and start a build with the latest changes."

That's it. Your builds will be a bit faster!

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlx3CpwACgkQEP6qDnB1
ZyoeQA//So6sAwH+fgd7bQcfXoHUreDaF47Nh6GRkvbZBoOeazeodYGTYXUJde6t
EEoshVlbrAeJo7yD3AyLfAYPiYmwConi6kT0y6ik6GR14AgUNauw7sVEkbyyUU2a
oK7RIRurs4R0SCtB56X9kS8c11CIY+dP/Ky0JZf+UrzQH9XNLpNc5nweIaSh+3b8
Crle/+bVyORpO7mUbgwe//ai0ETUkc6eZy3tDisxsDOhWgupD/gZui1dx+sW8+iM
ymbYSaQesYHNbAsNwtmi8N9gBKFJpwt/DLYrSoQ9Rbdg/inie3C9JlcWQzwKXzP+
l5zNrFmS7v+8TaE23XzeYw3Y0megbq24dw90QwPoGFoOn9cz5wSIeyG4F8rfk6QO
pQZBkIkAFAe74uA1An5Zr1vc7vDew+65IrRd0NUSMBqa5YOjBqVVi/F+g03/bcxA
m4TY7R5JOsb1ACP+jUnx61uIvmcaFN28SPKOFZQnLAFAjKk3KlShvw3dqNOxsfRA
+lx47DN88VhGQEtwldA2TWLgVNhBJj8F9lKfC3qiVKRn9WPTAKfie8f5jvkzTdiE
NLCoOXp90ljJGmWRX1SMqNjnzt4bBrQsUAYJBFZiO9Q3JS0nnVj5vOtaEYEWGeMi
9Bjp/UMcfkzkQUy5ij/Y3TQ5KA1l1Oh/pDYXJwPDJJ6/WT0NEXs=
=ZEer
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190228150700</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-02-28 15:07:00-0400</timestampReceived><subject>Re: [tor-dev] Anti-censorship discussion with Briar devs</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Nathan Freitas:
&gt; 
&gt; On 2/27/19 4:54 AM, Georg Koppen wrote:
&gt;&gt; Torsten Grote:
&gt;&gt;&gt; On 2/26/19 11:19 AM, Georg Koppen wrote:
&gt;&gt;&gt;&gt; I think we should be able to provide that with our Tor Browser builds
&gt;&gt;&gt;&gt; once we have all the PT pieces sorted out (which is rather soon).
&gt;&gt;&gt; That would be nice!
&gt;&gt;&gt;
&gt;&gt;&gt;&gt; So, probably the easiest way would then be to just copy the respective
&gt;&gt;&gt;&gt; binaries we produce over to include them in the Briar software
&gt;&gt;&gt; I assume these binaries are reproducible?
&gt;&gt; They would be used for Tor Browser which has reproducibility as a hard
&gt;&gt; requirement, so yes.
&gt;&gt;
&gt;&gt;&gt; We are currently not including these binaries directly, but publish them
&gt;&gt;&gt; as a library (gradle/maven to jcenter) where Briar and other projects
&gt;&gt;&gt; can get them from.
&gt;&gt; Okay, good to know.
&gt; 
&gt; It seems to me that Tor Browser should instead perhaps rely on the Briar
&gt; build process, at least for Android. I will be switching Orbot and our
&gt; AndroidPT library over to the Briar dependency in the next release.

I am not sure whether I understand your proposal. You mean we should
just switch for the PTs to how Briar is doing things? Or for the whole
Tor Browser for Android? (note the .apk is already being built
reproducibly using the same framwork we use for desktop builds) The
latter would essentially mean maintaining two different build setups
which seems not like a thing we should pursue, at first glance at least.

&gt; We should also figure out who is doing the source builds, how these are
&gt; published as public modules, and who is monitoring and verifying the
&gt; reproducibility. This is for both PT's and the current tor-android
&gt; binary project that I manage (https://github.com/n8fr8/tor-android). It
&gt; would be great to have Tor to be the source for trustworthy binary
&gt; builds, available through direct downloads and gradle/maven/cocoapods,
&gt; etc. We have talked about this many times in the past.

Yeah, I think that's a good idea. Let's tackle this once we have Tor
Browser for Android in stable shape and think about ways to improve both
our build and maintenance processes.

&gt; Related to this, we are also building and publishing PT's as shared
&gt; libraries, instead of binaries, which is eventually going to be required
&gt; on Android for both tor and obfs4proxy. It isn't all quite working yet,
&gt; but will be soon. At some point, we'll have to talk about that whole
&gt; transition.

Where can we find out about the main pieces that are missing here?

&gt; Our goptlib shared library build project is here:
&gt; https://gitlab.com/eighthave/goptbundle which is being made available to
&gt; app developers here:
&gt; https://github.com/guardianproject/AndroidPluggableTransports

Yes, we plan to use that one I think until there are hard blockers that
we are not aware of yet. Shane has made a first attempt to integrate
that into our build system in #28803.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190104055130</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-04 05:51:30-0400</timestampReceived><subject>Re: [tor-dev] Queries regarding Summer of Privacy 2019</subject><body>

[Attachment #2 (multipart/signed)]


&gt; On 26 Dec 2018, at 23:11, Pranav Vardia &lt;pranavvardia@gmail.com&gt; wrote:
&gt; 
&gt; Hi,
&gt; I am Pranav Vardia , third year student from International Institute of Information \
&gt; Technology, Bangalore. I am writing this mail to clarify few of my queries \
&gt; regarding Summer of Privacy. 
&gt; Firstly, I would like to ask that is there a list of projects whcih we can work on \
&gt; or do we need to come up with our own proposal ?

We suggest these projects, and you can also suggest projects:
https://www.torproject.org/getinvolved/volunteer.html.en#Coding

&gt; Secondly, I cannot find any timeline and project lists for previous years Summer of \
&gt; Privacy. It would be great if you could provide me links to the aforementioned.

We generally match the Google Summer of Code schedule.

Here's last year's page:
https://trac.torproject.org/projects/tor/wiki/doc/gsoc

Other pages can be found on the same wiki.
Sorry, they're not very well organised.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlwu9GIACgkQEP6qDnB1
ZypuSg//W2vTzr5GMtWC1VLZvuReFTBgFJG5Y0EEeKYRLXbRO+UfcBktSSr/OICG
hqOAkBNE2UEjjX+aPyEOYkMJCbTemJ0UPPnKGOQVDrKhA7RsstNUUiO7v0rthz5R
Fg67aBK7lxtTbls3VHKQahZR+1rESH884Q90hEa8pI8RexYbmD6zLQQjSUYDpnwX
dYtYs8y+31ZrXSFnnubR68hpTXYg5yB9DAw5mCMrTvO2hiG9V2znKKboQSUV4wnK
gLF2KjRAycBM0g4GCoPgCo2FTIi6/Ndswf/D6JfRS5p1biDBQsMNxAZOkRgeL55I
/dexOUznE/9BlGhe7z2FmQDjAnjmPxNd8WYGd2sL6Xt+iA6LCFu7KeDUHBBkCLhb
kbtApDKTJRxwsZE3h+OVa8Bv3wU1+1kYAa1i/uhSQJn7I6g6/n3sGtfPYJ5+zXep
TMc+BFk6dCujcujeJJ6XE/SDy2parLYa0qoH6wcVonfbHaO8ea11Tuj+fWJn/xG7
EdCQO7vhBYocgpFLYWagznq9VXNWekld6P+1W0fIB3ttFJ7owk/pQVFyy6wJLnOV
2ObqhpJknvt4A38Z/htVkWfy9Vwv2109OOEN1cT8B8nCA92vDT9jXZv2X9rIucuK
jySZeS1TaFs6GkJGNArIBQdWe34YwDeMRfn+lY80GgiUoMGMU38=
=rgIU
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190104125534</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-01-04 12:55:34-0400</timestampReceived><subject>Re: [tor-dev] Upcoming Tor change with application impact: "Dormant Mode"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Sorry, I have one more follow-up question.

On 02/01/2019 21:00, Nick Mathewson wrote:
&gt; On Fri, Dec 21, 2018 at 6:34 AM Michael Rogers &lt;michael@briarproject.org&gt; wrote:
&gt;&gt;
&gt;&gt; Hi Nick,
&gt;&gt;
&gt;&gt; Is the guard connection closed when becoming dormant?
&gt; 
&gt; No; it times out independently.

In that case I assume keepalives from the guard don't prevent Tor from
becoming dormant, or wake it from dormant mode. On Android, a keepalive
will briefly wake the CPU. When that happens, will Tor consume the
keepalive from the network buffer while remaining dormant, or does the
controller need to wake Tor from dormant mode periodically to ensure it
reads from the guard connection?

Thanks again,
Michael

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190104155934</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-01-04 15:59:34-0400</timestampReceived><subject>[tor-dev] Network team meeting Tuesday at 2300 UTC</subject><body>

Hi!

The first network team meeting of the year is on Tuesday January 8th at
2300 UTC.

The meeting will be at #tor-meeting on OFTC.

Agenda and updates for weekly meetings this year are in:

https://pad.riseup.net/p/tor-netteam-2019.1-keep

cheers,
gaba
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190109223950</emailId><senderName>Todd Hubers</senderName><senderEmail>todd.hubers@gmail.com</senderEmail><timestampReceived>2019-01-09 22:39:50-0400</timestampReceived><subject>Re: [tor-dev] Multi-threading throughout</subject><body>

[Attachment #2 (multipart/alternative)]


Understood and agreed. I suspected there would be circuit-state to
maintain. As you say, concurrent cells on the same circuit should be queued
or thread-locked. I suspect thread-locking will be simple enough - the best
approach.

And given it's only a problem for the biggest nodes, a design should be
chosen that is efficient and focuses on achieving the goals of such users.

I believe this is that efficient and focused design.

On Thu, 10 Jan 2019 at 00:54, Ian Goldberg &lt;iang@cs.uwaterloo.ca&gt; wrote:

&gt; On Wed, Jan 09, 2019 at 08:17:15AM -0500, Ian Goldberg wrote:
&gt; &gt; On Wed, Jan 09, 2019 at 08:42:18PM +1100, Todd Hubers wrote:
&gt; &gt; &gt; There are early plans to distribute crypto operations across multiple
&gt; cores
&gt; &gt; &gt; [https://trac.torproject.org/projects/tor/ticket/1749], but there
&gt; might be
&gt; &gt; &gt; a better way.
&gt; &gt; &gt;
&gt; &gt; &gt; (I registered, but I couldn't find a way to annotate the ticket, so I'm
&gt; &gt; &gt; emailing for now)
&gt; &gt; &gt;
&gt; &gt; &gt; The ticket states the reason being to saturate the bandwidth available
&gt; (by
&gt; &gt; &gt; using all the cores as efficiently as possible).
&gt; &gt; &gt;
&gt; &gt; &gt; I don't understand why a relay needs to have a "main thread". Network
&gt; &gt; &gt; traffic arrives as an async operation and can be sent back out
&gt; &gt; &gt; asynchronously. So a final strategy shouldn't have a central thread.
&gt; The
&gt; &gt; &gt; main thread might still be needed for startup, runtime adjustment, and
&gt; &gt; &gt; system upkeep, but not for the core network-crypto processing; that
&gt; should
&gt; &gt; &gt; never need to touch the main thread.
&gt; &gt; &gt;
&gt; &gt; &gt; The current proposal speaks about multi-threading crypto operations,
&gt; let's
&gt; &gt; &gt; call that "A) Speed - Speeding up processing of a single cell".
&gt; Instead, I
&gt; &gt; &gt; propose "B) Concurrency - Restructuring so multiple cells can be
&gt; processed
&gt; &gt; &gt; concurrently".
&gt; &gt; &gt;
&gt; &gt; &gt; A cell of data should arrive via IO-Completion thread on a random CPU
&gt; core,
&gt; &gt; &gt; have crypto transformation applied on the same one core, then be
&gt; dispatched
&gt; &gt; &gt; onward out via the network. This seems to be quite a simple approach
&gt; where
&gt; &gt; &gt; I would think crypto code can remain the same "single-threaded"
&gt; &gt; &gt; implementation.
&gt; &gt; &gt;
&gt; &gt; &gt; Approach [A] will have diminishing returns as the number of cores
&gt; &gt; &gt; increases. You can only break up a cell unit of work so much until
&gt; you're
&gt; &gt; &gt; encrypting one byte per cpu core. However, with approach [B], if you
&gt; have
&gt; &gt; &gt; millions of CPU cores (as an extreme) you can be processing millions of
&gt; &gt; &gt; cells concurrently. Therefore, I believe approach [B] would be more
&gt; &gt; &gt; scalable.
&gt; &gt; &gt;
&gt; &gt; &gt; What do you think?
&gt; &gt;
&gt; &gt; You'll have troubles if cells *on the same circuit* try to be processed
&gt; &gt; in parallel on different cores, at least with the current circuit-level
&gt; &gt; crypto.  But, once circuits are established, handing each circuit to a
&gt; &gt; different thread/core (or more clever worker structure) is something
&gt; &gt; that I think at least boradly makes sense, and indeed I have been
&gt; &gt; proposing to have my students work on.
&gt;
&gt; (Of course, this only is even relevant for the very highest-bandwidth
&gt; nodes; my own node, for example, running on 5-year-old hardware with no
&gt; special configuration, was pushing 400 Mbps last month, with one core
&gt; at 80%, one at 11%, one at 6%, and the rest trivially small.)
&gt; --
&gt; Ian Goldberg
&gt; Professor and University Research Chair
&gt; Cheriton School of Computer Science
&gt; University of Waterloo
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;


-- 
--
Todd Hubers

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Understood and agreed. I suspected there would be circuit-state to \
maintain. As you say, concurrent cells on the same circuit should be queued or \
thread-locked. I suspect thread-locking will be simple enough - the best \
approach.&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And given it's only a problem for the biggest nodes, \
a  design should be chosen that is efficient and focuses on achieving the goals of \
such users.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I believe this is that efficient and focused \
design.&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Thu, 10 Jan 2019 at \
00:54, Ian Goldberg &lt;&lt;a \
href="mailto:iang@cs.uwaterloo.ca"&gt;iang@cs.uwaterloo.ca&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;On Wed, Jan 09, 2019 \
at 08:17:15AM -0500, Ian Goldberg wrote:&lt;br&gt; &gt; On Wed, Jan 09, 2019 at 08:42:18PM \
+1100, Todd Hubers wrote:&lt;br&gt; &gt; &gt; There are early plans to distribute crypto \
operations across multiple cores&lt;br&gt; &gt; &gt; [&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1749" rel="noreferrer" \
target="_blank"&gt;https://trac.torproject.org/projects/tor/ticket/1749&lt;/a&gt;], but there \
might be&lt;br&gt; &gt; &gt; a better way.&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; (I registered, but I couldn't find a way to annotate the ticket, so \
I'm&lt;br&gt; &gt; &gt; emailing for now)&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; The ticket states the reason being to saturate the bandwidth available \
(by&lt;br&gt; &gt; &gt; using all the cores as efficiently as possible).&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; I don't understand why a relay needs to have a "main thread". \
Network&lt;br&gt; &gt; &gt; traffic arrives as an async operation and can be sent back \
out&lt;br&gt; &gt; &gt; asynchronously. So a final strategy shouldn't have a central \
thread. The&lt;br&gt; &gt; &gt; main thread might still be needed for startup, runtime \
adjustment, and&lt;br&gt; &gt; &gt; system upkeep, but not for the core network-crypto \
processing; that should&lt;br&gt; &gt; &gt; never need to touch the main thread.&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; The current proposal speaks about multi-threading crypto operations, \
let's&lt;br&gt; &gt; &gt; call that "A) Speed - Speeding up processing of a single \
cell". Instead, I&lt;br&gt; &gt; &gt; propose "B) Concurrency - Restructuring so \
multiple cells can be processed&lt;br&gt; &gt; &gt; concurrently".&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; A cell of data should arrive via IO-Completion thread on a random CPU \
core,&lt;br&gt; &gt; &gt; have crypto transformation applied on the same one core, then be \
dispatched&lt;br&gt; &gt; &gt; onward out via the network. This seems to be quite a simple \
approach where&lt;br&gt; &gt; &gt; I would think crypto code can remain the same \
"single-threaded"&lt;br&gt; &gt; &gt; implementation.&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; Approach [A] will have diminishing returns as the number of cores&lt;br&gt;
&gt; &gt; increases. You can only break up a cell unit of work so much until \
you're&lt;br&gt; &gt; &gt; encrypting one byte per cpu core. However, with approach \
[B], if you have&lt;br&gt; &gt; &gt; millions of CPU cores (as an extreme) you can be \
processing millions of&lt;br&gt; &gt; &gt; cells concurrently. Therefore, I believe \
approach [B] would be more&lt;br&gt; &gt; &gt; scalable.&lt;br&gt;
&gt; &gt; &lt;br&gt;
&gt; &gt; What do you think?&lt;br&gt;
&gt; &lt;br&gt;
&gt; You'll have troubles if cells *on the same circuit* try to be processed&lt;br&gt;
&gt; in parallel on different cores, at least with the current circuit-level&lt;br&gt;
&gt; crypto.   But, once circuits are established, handing each circuit to a&lt;br&gt;
&gt; different thread/core (or more clever worker structure) is something&lt;br&gt;
&gt; that I think at least boradly makes sense, and indeed I have been&lt;br&gt;
&gt; proposing to have my students work on.&lt;br&gt;
&lt;br&gt;
(Of course, this only is even relevant for the very highest-bandwidth&lt;br&gt;
nodes; my own node, for example, running on 5-year-old hardware with no&lt;br&gt;
special configuration, was pushing 400 Mbps last month, with one core&lt;br&gt;
at 80%, one at 11%, one at 6%, and the rest trivially small.)&lt;br&gt;
-- &lt;br&gt;
Ian Goldberg&lt;br&gt;
Professor and University Research Chair&lt;br&gt;
Cheriton School of Computer Science&lt;br&gt;
University of Waterloo&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;br clear="all"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div dir="ltr" \
class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="font-size:small"&gt;--&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:small"&gt;Todd \
Hubers&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190110013833</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-10 01:38:33-0400</timestampReceived><subject>Re: [tor-dev] &lt;unistd.h&gt; in buffers_net.c</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

Thanks for this bug report and patch.

&gt; On 3 Jan 2019, at 13:27, Gisle Vanem &lt;gisle.vanem@gmail.com&gt; wrote:
&gt; 
&gt; Some recent change has added a:
&gt;  #include &lt;unistd.h&gt;
&gt; 
&gt; which fails for MSVC (it doesn't have it).
&gt; 
&gt; Since I fail to find any way to comment on Trac or Gitweb,
&gt; I give notice here. Patching into:
&gt; 
&gt; --- a/src/lib/net/buffers_net.c 2019-01-02 18:57:42
&gt; +++ b/src/lib/net/buffers_net.c 2019-01-03 03:16:32
&gt; @@ -21,7 +21,10 @@
&gt; #endif
&gt; 
&gt; #include &lt;stdlib.h&gt;
&gt; +
&gt; +#ifndef _MSC_VER
&gt; #include &lt;unistd.h&gt;
&gt; +#endif
&gt; 
&gt; #ifdef PARANOIA
&gt; 
&gt; ----------------
&gt; 
&gt; works fine.

We used a slightly different check in:
https://github.com/torproject/tor/commit/4e4f93d364e33bb46e271f3b960a2cf5f38f402e

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlw2ohkACgkQEP6qDnB1
ZyrHNg//XYGL2dyJVRg3N5u+8umWYQ9G4K9RpuGnAlOq6wZEs0l27gvNltcxthG0
X43Y8Hz0ldODpddPprDTNsSvR+jKEh0CB2/V5GTjVCdHrqSchqt5jBMuMI3++rTv
YQpBJ0v+A3EbPCUA489GQiea75RmuAuAewNk2taoWVM8Os4uNn0pT87Ocz6A/+sg
fa076gOw3mWCBWwfYtyljG0u0zPYxx/9IEc2jHlOjtipOLIwyQU9IlMyNg3pYrpY
jcbvoydpsOnS9+8hDMX+mDwxLpTWM7A7UX+84n2MUnPkK30AQpFjo1WQgsu1VvHD
DWrBSVkVfWZ/2PWXc0zUPSsDwfPhnG/njTpfjUn5NF4rKL6vmIChyHiOoPKr+iqG
/Fm4erZTyiNIzrFVMUetbv62qvvzAbNlSnCXw1K8lOtRoOntU4Zd7hn/MGihrm3i
H28bTNlAoibEsq4zJanmoKNT9UUsgMdw9bEWHh1Hn/Tn6VUHO3lmAA3zykWNRPyv
6FPhNz5WmBq/RzOGVrNbSLuchrwjqCqsOriK3cJlRctrl2bgcsfnZDpAmLV75cwI
G/6+LSGlbKGGTd/G7jxFroJYJJecS+vrsRtFg0ZdKbGI0ZuXn825nXDo4x7X99Sw
mUUsG0ifVn+zMOB9M14mYwc4029BNuJg4EMAfSnqN8NwfXi0hfE=
=6wwN
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190110080550</emailId><senderName>Jennifer contreras jimenez</senderName><senderEmail>jennimamie@gmail.com</senderEmail><timestampReceived>2019-01-10 08:05:50-0400</timestampReceived><subject>Re: [tor-dev] Daemon</subject><body>

[Attachment #2 (multipart/alternative)]


Who is this and what the fuck are you talkin about

On Wed, Jan 9, 2019, 8:35 PM teor &lt;teor@riseup.net wrote:

&gt; Hi,
&gt;
&gt; It looks like you're trying to run some attacks on Tor.
&gt; Please don't run attacks on the live Tor network: use a test network
&gt; instead.
&gt;
&gt; &gt; On 3 Jan 2019, at 02:56, marziyeh latifi &lt;marziyeh.latifi95@gmail.com&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; I have some question about daemon:
&gt; &gt; 1-what is the Tor daemon?
&gt;
&gt; A service that runs all the time:
&gt; https://en.wikipedia.org/wiki/Daemon_(computing)
&gt;
&gt; &gt; 2-What is the relationship between oom killer algorithm and daemon?
&gt;
&gt; If the daemon uses too much memory, the oom killer kills it.
&gt; https://en.wikipedia.org/wiki/Out_of_memory
&gt;
&gt; &gt; 3-how can I calculate memory usage of deamon by algorithm?
&gt;
&gt; I'm not sure what you're asking here.
&gt;
&gt; There is no simple algorithm to calculate memory usage, because it
&gt; depends on the size of the cell queues, and other data structures.
&gt;
&gt; T
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Who is this and what the fuck are you talkin about&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr"&gt;On Wed, Jan 9, 2019, 8:35 PM teor &lt;&lt;a \
href="mailto:teor@riseup.net"&gt;teor@riseup.net&lt;/a&gt; wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote \
class="gmail_quote" style="margin:0 0 0 .8ex;border-left:1px #ccc \
solid;padding-left:1ex"&gt;Hi,&lt;br&gt; &lt;br&gt;
It looks like you're trying to run some attacks on Tor.&lt;br&gt;
Please don't run attacks on the live Tor network: use a test network instead.&lt;br&gt;
&lt;br&gt;
&gt; On 3 Jan 2019, at 02:56, marziyeh latifi &lt;&lt;a \
href="mailto:marziyeh.latifi95@gmail.com" target="_blank" \
rel="noreferrer"&gt;marziyeh.latifi95@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt; &lt;br&gt;
&gt; I have some question about daemon:&lt;br&gt;
&gt; 1-what is the Tor daemon?&lt;br&gt;
&lt;br&gt;
A service that runs all the time:&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Daemon_(computing)" rel="noreferrer \
noreferrer" target="_blank"&gt;https://en.wikipedia.org/wiki/Daemon_(computing)&lt;/a&gt;&lt;br&gt; \
&lt;br&gt; &gt; 2-What is the relationship between oom killer algorithm and daemon?&lt;br&gt;
&lt;br&gt;
If the daemon uses too much memory, the oom killer kills it.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Out_of_memory" rel="noreferrer noreferrer" \
target="_blank"&gt;https://en.wikipedia.org/wiki/Out_of_memory&lt;/a&gt;&lt;br&gt; &lt;br&gt;
&gt; 3-how can I calculate memory usage of deamon by algorithm?&lt;br&gt;
&lt;br&gt;
I'm not sure what you're asking here.&lt;br&gt;
&lt;br&gt;
There is no simple algorithm to calculate memory usage, because it&lt;br&gt;
depends on the size of the cell queues, and other data structures.&lt;br&gt;
&lt;br&gt;
T&lt;br&gt;
&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190109094218</emailId><senderName>Todd Hubers</senderName><senderEmail>todd.hubers@gmail.com</senderEmail><timestampReceived>2019-01-09 09:42:18-0400</timestampReceived><subject>[tor-dev] Multi-threading throughout</subject><body>

[Attachment #2 (multipart/alternative)]


There are early plans to distribute crypto operations across multiple cores
[https://trac.torproject.org/projects/tor/ticket/1749], but there might be
a better way.

(I registered, but I couldn't find a way to annotate the ticket, so I'm
emailing for now)

The ticket states the reason being to saturate the bandwidth available (by
using all the cores as efficiently as possible).

I don't understand why a relay needs to have a "main thread". Network
traffic arrives as an async operation and can be sent back out
asynchronously. So a final strategy shouldn't have a central thread. The
main thread might still be needed for startup, runtime adjustment, and
system upkeep, but not for the core network-crypto processing; that should
never need to touch the main thread.

The current proposal speaks about multi-threading crypto operations, let's
call that "A) Speed - Speeding up processing of a single cell". Instead, I
propose "B) Concurrency - Restructuring so multiple cells can be processed
concurrently".

A cell of data should arrive via IO-Completion thread on a random CPU core,
have crypto transformation applied on the same one core, then be dispatched
onward out via the network. This seems to be quite a simple approach where
I would think crypto code can remain the same "single-threaded"
implementation.

Approach [A] will have diminishing returns as the number of cores
increases. You can only break up a cell unit of work so much until you're
encrypting one byte per cpu core. However, with approach [B], if you have
millions of CPU cores (as an extreme) you can be processing millions of
cells concurrently. Therefore, I believe approach [B] would be more
scalable.

What do you think?

Regards,

-- 
--
Todd Hubers

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;There are early plans to distribute crypto operations \
across multiple cores [&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/1749"&gt;https://trac.torproject.org/projects/tor/ticket/1749&lt;/a&gt;], \
but there might be a better way.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;(I \
registered, but I couldn't find a way to annotate the ticket, so I'm emailing \
for now)&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;The ticket states the reason \
being to saturate the bandwidth available (by using all the cores as efficiently as \
possible).&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I don't understand why a \
relay needs to have a "main thread". Network traffic arrives as an async \
operation and can be sent back out asynchronously. So a final strategy shouldn't \
have a central thread. The main thread might still be needed for startup, runtime \
adjustment, and system upkeep, but not for the core network-crypto processing; that \
should never need to touch the main thread.&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
current proposal speaks about multi-threading crypto operations, let's call that \
"A) Speed - Speeding up processing of a single cell". Instead, I propose \
"B) Concurrency - Restructuring so multiple cells can be processed \
concurrently".  &lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;A cell of data \
should arrive via IO-Completion thread on a random CPU core, have crypto \
transformation applied on the same one core, then be dispatched onward out via the \
network. This seems to be quite a simple approach where I would think crypto code can \
remain the same "single-threaded" implementation.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Approach [A] will have diminishing returns as the number of \
cores increases. You can only break up a cell unit of work so much until you're \
encrypting one byte per cpu core. However, with approach [B], if you have millions of \
CPU cores (as an extreme) you can be processing millions of cells concurrently. \
Therefore, I believe approach  [B] would be more scalable.&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;What do you think?  &lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Regards,&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;-- &lt;br&gt;&lt;div \
dir="ltr" class="gmail_signature"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="font-size:small"&gt;--&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-size:small"&gt;Todd \
Hubers&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190103032709</emailId><senderName>Gisle Vanem</senderName><senderEmail>gisle.vanem@gmail.com</senderEmail><timestampReceived>2019-01-03 03:27:09-0400</timestampReceived><subject>[tor-dev] &lt;unistd.h&gt; in buffers_net.c</subject><body>

Some recent change has added a:
   #include &lt;unistd.h&gt;

which fails for MSVC (it doesn't have it).

Since I fail to find any way to comment on Trac or Gitweb,
I give notice here. Patching into:

--- a/src/lib/net/buffers_net.c 2019-01-02 18:57:42
+++ b/src/lib/net/buffers_net.c 2019-01-03 03:16:32
@@ -21,7 +21,10 @@
  #endif

  #include &lt;stdlib.h&gt;
+
+#ifndef _MSC_VER
  #include &lt;unistd.h&gt;
+#endif

  #ifdef PARANOIA

----------------

works fine.

-- 
--gv
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190102170850</emailId><senderName>marziyeh latifi</senderName><senderEmail>marziyeh.latifi95@gmail.com</senderEmail><timestampReceived>2019-01-02 17:08:50-0400</timestampReceived><subject>[tor-dev] Daemon</subject><body>

[Attachment #2 (multipart/alternative)]


Hello
I have some question about daemon:
1-what is the Tor daemon?
2-What is the relationship between oom killer algorithm and daemon?
3-how can I calculate memory usage of deamon by algorithm?
I'm looking forward to hearing from you!
thanks!
Marziyeh

[Attachment #5 (text/html)]

&lt;div dir="rtl"&gt;&lt;div dir="rtl"&gt;&lt;div dir="ltr"&gt;Hello&lt;/div&gt;&lt;div dir="ltr"&gt;I have some \
question about daemon:&lt;/div&gt;&lt;div dir="ltr"&gt;1-what is the Tor daemon?&lt;/div&gt;&lt;div \
dir="ltr"&gt;2-What is the relationship between oom killer algorithm and \
daemon?&lt;/div&gt;&lt;div dir="ltr"&gt;3-how can I calculate memory usage of deamon by \
algorithm?&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div class="gmail-gs" style="margin:0px;padding:0px \
0px 20px;width:958px;font-family:Roboto,RobotoDraft,Helvetica,Arial,sans-serif;font-size:medium"&gt;&lt;div \
class="gmail-"&gt;&lt;div id="gmail-:154" class="gmail-ii gmail-gt" \
style="font-size:14px;direction:rtl;margin:8px 0px 0px;padding:0px"&gt;&lt;div \
id="gmail-:153" class="gmail-a3s gmail-aXjCH gmail-adM" \
style="overflow:hidden;font-variant-numeric:normal;font-variant-east-asian:normal;font \
-stretch:normal;font-size:small;line-height:1.5;font-family:Arial,Helvetica,sans-serif"&gt;&lt;div \
class="gmail-HOEnZb"&gt;&lt;div class="gmail-im" style=""&gt;&lt;div dir="rtl" style=""&gt;&lt;div \
class="gmail_quote" style=""&gt;&lt;div dir="rtl" style=""&gt;&lt;div dir="ltr" style=""&gt;&lt;font \
color="#000000"&gt;I'm looking forward to hearing from you!&lt;/font&gt;&lt;/div&gt;&lt;div \
dir="ltr" style=""&gt;&lt;font color="#000000"&gt;thanks!&lt;/font&gt;&lt;/div&gt;&lt;div dir="ltr" \
style=""&gt;&lt;font color="#000000"&gt;Marziyeh&lt;/font&gt;&lt;/div&gt;&lt;div dir="ltr" \
style="color:rgb(80,0,80)"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
class="gmail-hi" style="border-bottom-right-radius:1px;border-bottom-left-radius:1px;p \
adding:0px;width:auto;background:rgb(242,242,242);margin:0px"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br \
class="gmail-Apple-interchange-newline"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190111190124</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-01-11 19:01:24-0400</timestampReceived><subject>[tor-dev] anti-censorship weekly checkin</subject><body>

Hi!!


We are going to start doing weekly meetings about anti-censorship work
at Tor. We still do not have a team specifically to work on
anti-censorship (soon we will have it) BUT we have different teams
working on snowflake, gettor and soon bridgedb as well Kat writing a
report on what works needs to be done.

If you are doing any work related to this and/or are interested in this
work please join. Weekly meetings will be every Thursday 8pm UTC on
#tor-meeting at OFTC (channel is logged while meetings are in progress).


Next meeting Thursday January 17th 8pm UTC on #tor-meeting at OFTC


cheers,
gaba
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190110013506</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-10 01:35:06-0400</timestampReceived><subject>Re: [tor-dev] Daemon</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

It looks like you're trying to run some attacks on Tor.
Please don't run attacks on the live Tor network: use a test network instead.

&gt; On 3 Jan 2019, at 02:56, marziyeh latifi &lt;marziyeh.latifi95@gmail.com&gt; wrote:
&gt; 
&gt; I have some question about daemon:
&gt; 1-what is the Tor daemon?

A service that runs all the time:
https://en.wikipedia.org/wiki/Daemon_(computing)

&gt; 2-What is the relationship between oom killer algorithm and daemon?

If the daemon uses too much memory, the oom killer kills it.
https://en.wikipedia.org/wiki/Out_of_memory

&gt; 3-how can I calculate memory usage of deamon by algorithm?

I'm not sure what you're asking here.

There is no simple algorithm to calculate memory usage, because it
depends on the size of the cell queues, and other data structures.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlw2oUoACgkQEP6qDnB1
ZyrwHw/9Hu+fKm3iEmpCRisjp+0/IF5BSxzB9SP8VwWUS4ONQm/uR2sKax+Hs1mq
dC8IBJeimGhk/G8xn+JsEye0B63nTGwM456J/ztz75TBYOFBRmJHIKbDUQ8X3snq
Qd/L+0Dngcwm4CmMQKqKdoiSbk1puxxbOggALb7zXw+6LTZJF/GUIEjYppWljd6C
pHsLTNyEtqGJFrCE/YWE21p1PVd0a2yFVeD6Xr6gC+JQflrID8jPVXDs5BdPAqYW
3XkMqR1KAIzFyXp1oze/Sq756uAqz8FzsHfytdELJiUdN01rUhr8ubuPER51GXTr
JYdriBOz+wGkpZirPzRFmrsjJ7ra53Wkb4B7RaIGqdvm1WiID9/DmnLJnrHORgmc
sIO55GJ7LyxfboLNC6ZKZV55KEXo7XgDsZqp6KWtBiaIgV+76bMMhbKswNHNGzd4
kXct2dp6giKaNWXuAKTtg4nCJ1G4IJ+Kq/b5Bk40TQUI5zrDJ80T9oKsVv5INixt
vpJPqAHGuVneOJ5gZHvSCP+qQe4/gaBFtqf17CKKlBYKg4JPFulX4edmVcfK+dSw
drTPhUdbGebbqJmOIVuw6yviCnZ3rGkj01yR109gQO3BcBfQ7Y8nug6Y4y3wTecn
ANvDzBbvj0HTM9ZEM1XZ5d/lx5AfF9SgBnTDOMctTk9L84Cknrg=
=gQ96
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190109131715</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2019-01-09 13:17:15-0400</timestampReceived><subject>Re: [tor-dev] Multi-threading throughout</subject><body>

On Wed, Jan 09, 2019 at 08:42:18PM +1100, Todd Hubers wrote:
&gt; There are early plans to distribute crypto operations across multiple cores
&gt; [https://trac.torproject.org/projects/tor/ticket/1749], but there might be
&gt; a better way.
&gt; 
&gt; (I registered, but I couldn't find a way to annotate the ticket, so I'm
&gt; emailing for now)
&gt; 
&gt; The ticket states the reason being to saturate the bandwidth available (by
&gt; using all the cores as efficiently as possible).
&gt; 
&gt; I don't understand why a relay needs to have a "main thread". Network
&gt; traffic arrives as an async operation and can be sent back out
&gt; asynchronously. So a final strategy shouldn't have a central thread. The
&gt; main thread might still be needed for startup, runtime adjustment, and
&gt; system upkeep, but not for the core network-crypto processing; that should
&gt; never need to touch the main thread.
&gt; 
&gt; The current proposal speaks about multi-threading crypto operations, let's
&gt; call that "A) Speed - Speeding up processing of a single cell". Instead, I
&gt; propose "B) Concurrency - Restructuring so multiple cells can be processed
&gt; concurrently".
&gt; 
&gt; A cell of data should arrive via IO-Completion thread on a random CPU core,
&gt; have crypto transformation applied on the same one core, then be dispatched
&gt; onward out via the network. This seems to be quite a simple approach where
&gt; I would think crypto code can remain the same "single-threaded"
&gt; implementation.
&gt; 
&gt; Approach [A] will have diminishing returns as the number of cores
&gt; increases. You can only break up a cell unit of work so much until you're
&gt; encrypting one byte per cpu core. However, with approach [B], if you have
&gt; millions of CPU cores (as an extreme) you can be processing millions of
&gt; cells concurrently. Therefore, I believe approach [B] would be more
&gt; scalable.
&gt; 
&gt; What do you think?

You'll have troubles if cells *on the same circuit* try to be processed
in parallel on different cores, at least with the current circuit-level
crypto.  But, once circuits are established, handing each circuit to a
different thread/core (or more clever worker structure) is something
that I think at least boradly makes sense, and indeed I have been
proposing to have my students work on.
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190109135352</emailId><senderName>Ian Goldberg</senderName><senderEmail>iang@cs.uwaterloo.ca</senderEmail><timestampReceived>2019-01-09 13:53:52-0400</timestampReceived><subject>Re: [tor-dev] Multi-threading throughout</subject><body>

On Wed, Jan 09, 2019 at 08:17:15AM -0500, Ian Goldberg wrote:
&gt; On Wed, Jan 09, 2019 at 08:42:18PM +1100, Todd Hubers wrote:
&gt; &gt; There are early plans to distribute crypto operations across multiple cores
&gt; &gt; [https://trac.torproject.org/projects/tor/ticket/1749], but there might be
&gt; &gt; a better way.
&gt; &gt; 
&gt; &gt; (I registered, but I couldn't find a way to annotate the ticket, so I'm
&gt; &gt; emailing for now)
&gt; &gt; 
&gt; &gt; The ticket states the reason being to saturate the bandwidth available (by
&gt; &gt; using all the cores as efficiently as possible).
&gt; &gt; 
&gt; &gt; I don't understand why a relay needs to have a "main thread". Network
&gt; &gt; traffic arrives as an async operation and can be sent back out
&gt; &gt; asynchronously. So a final strategy shouldn't have a central thread. The
&gt; &gt; main thread might still be needed for startup, runtime adjustment, and
&gt; &gt; system upkeep, but not for the core network-crypto processing; that should
&gt; &gt; never need to touch the main thread.
&gt; &gt; 
&gt; &gt; The current proposal speaks about multi-threading crypto operations, let's
&gt; &gt; call that "A) Speed - Speeding up processing of a single cell". Instead, I
&gt; &gt; propose "B) Concurrency - Restructuring so multiple cells can be processed
&gt; &gt; concurrently".
&gt; &gt; 
&gt; &gt; A cell of data should arrive via IO-Completion thread on a random CPU core,
&gt; &gt; have crypto transformation applied on the same one core, then be dispatched
&gt; &gt; onward out via the network. This seems to be quite a simple approach where
&gt; &gt; I would think crypto code can remain the same "single-threaded"
&gt; &gt; implementation.
&gt; &gt; 
&gt; &gt; Approach [A] will have diminishing returns as the number of cores
&gt; &gt; increases. You can only break up a cell unit of work so much until you're
&gt; &gt; encrypting one byte per cpu core. However, with approach [B], if you have
&gt; &gt; millions of CPU cores (as an extreme) you can be processing millions of
&gt; &gt; cells concurrently. Therefore, I believe approach [B] would be more
&gt; &gt; scalable.
&gt; &gt; 
&gt; &gt; What do you think?
&gt; 
&gt; You'll have troubles if cells *on the same circuit* try to be processed
&gt; in parallel on different cores, at least with the current circuit-level
&gt; crypto.  But, once circuits are established, handing each circuit to a
&gt; different thread/core (or more clever worker structure) is something
&gt; that I think at least boradly makes sense, and indeed I have been
&gt; proposing to have my students work on.

(Of course, this only is even relevant for the very highest-bandwidth
nodes; my own node, for example, running on 5-year-old hardware with no
special configuration, was pushing 400 Mbps last month, with one core
at 80%, one at 11%, one at 6%, and the rest trivially small.)
-- 
Ian Goldberg
Professor and University Research Chair
Cheriton School of Computer Science
University of Waterloo
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190116231429</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-01-16 23:14:29-0400</timestampReceived><subject>[tor-dev] Reviewer for Bug #27491: Prefer IPv4 or IPv6 based on the number of failures</subject><body>

[Attachment #2 (multipart/alternative)]


Hi tor-dev@ mailing list,

I noticed the assigned reviewer for my bug/patch #27491 \
(https://trac.torproject.org/projects/tor/ticket/27491 \
(https://trac.torproject.org/projects/tor/ticket/27491)), mikeperry, has not yet \
reviewed my bug since he was assigned to my bug/patch back in December. I understand \
that not able to review bugs during the holiday season (for obvious reasons), but \
would someone, either mikeperry or another Tor developer be able to review this?

I am aware that there is a code freeze for 0.4.0 and this (probably) won't get merged \
until at least February 15th, but I would really appreciate a reviewer.

Thank You,

Neel Chauhan

===

https://www.neelc.org/


[Attachment #5 (text/html)]

&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="Content-Type" content="text/html; \
charset=utf-8" /&gt;&lt;/head&gt;&lt;body&gt;&lt;div data-html-editor-font-wrapper="true" \
style="font-family: arial, sans-serif; font-size: 13px;"&gt;Hi tor-dev@ mailing \
list,&lt;br&gt;&lt;br&gt;I noticed the assigned reviewer for my bug/patch #27491 (&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27491"&gt;https://trac.torproject.org/projects/tor/ticket/27491&lt;/a&gt;), \
mikeperry, has not yet reviewed my bug since he was assigned to my bug/patch back in \
December. I understand that not able to review bugs during the holiday season (for \
obvious reasons), but would someone, either mikeperry or another Tor developer be \
able to review this?&lt;br&gt;&lt;br&gt;I am aware that there is a code freeze for 0.4.0 and this \
(probably) won't get merged until at least February 15th, but I would really \
appreciate a reviewer.&lt;br&gt;&lt;br&gt;Thank You,&lt;br&gt;&lt;br&gt;Neel \
Chauhan&lt;br&gt;&lt;br&gt;===&lt;br&gt;&lt;br&gt;https://www.neelc.org/&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;signature&gt;&lt;/signature&gt; \
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190115101739</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-15 10:17:39-0400</timestampReceived><subject>[tor-dev] Upcoming Network Team Meetings</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

The network team has weekly meetings in #tor-meeting on irc.oftc.net.

Our next meeting is on Tuesday 22 January at 1800 UTC, because Monday
is a US public holiday.

We won't have a meeting on 28 January. Most of the team will be at a
face-to-face meeting.

Our first meeting in February is just after FOSDEM, we'll get back to
you with a date.

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlw9s0MACgkQEP6qDnB1
Zyrrqg/+NTfN+ajgiRwRlQBS2r8VgeTOb6NX1ZMT+Pm/f8op+bsEPLaNdQuNVBxX
s1AyNL/PLaqxI1PdGUN57GEOYZkVvAYrhzyobLKgyL1f9XFu2jz9mYYYxjh3yHib
ZA+a/Wq5ekOup9idvpOdlAJ8FsASrXPeIFTxSdoxbKzOkOdj+3fxUZ4s3SGI67LV
CCXUYML1fdikaZ4ToRhhkBs7UAwy1nLoeE3IIWyVe3eoGnZgv1NbTGbFj4XDb6cp
4yXdPmpG4y8eSnOAvWxLE2rcO5kDqTjxy8nvVnaE7hmeqAtX47rI8iBmrvFmaY2E
Ikt3Yv2b2Y09hcBQtiOQBzfzG0tBPr2zJEdI1g1dtoWji0mNWzPykfUYEKlInxug
7TYn6Tf7WSmgSMH+tDRwEdj4Pz5ab64cFlcE+HbrjYwwVrd3e1figFa35VOo8YOv
xNx5Usgm4F1IjAGuOodgLYjG9WFWP0TkneRQm0Pz1iRjkhZHmZ8qsB4l6CYWFivy
kjzRx1BYWzEcFuvoxE5eB6KKPwlTlluxiL06ZYCRmvxzckVfTx6FAInfLmgEJfth
DpnsxZA2K6DDWFNv6mfu8IFwZT3v5XVXHQXP+OJk+OnnXhR9E1IEklbFwJ6mQFjd
rv2mPC7zl+F82ucKNaZ7Tj/EcyWGDEFSWu8+kQBCKlpJKimPixI=
=FweA
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190116051841</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-01-16 05:18:41-0400</timestampReceived><subject>[tor-dev] txtorcon 19.0.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm happy to announce txtorcon 19.0.0, containing the following
changes:

 * add TorControlProtocol.when_disconnected (will replace .on_disconnect)
 * add detach= kwarg to Tor.create_onion_service
 * add purpose= kwarg to TorState.build_circuit

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/19.0.0
   https://github.com/meejah/txtorcon/releases/tag/v19.0.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-19.0.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-19.0.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-19.0.0.tar.gz
   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-19.0.0.tar.gz.asc

You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
3731b740653e3f551412744f1fcd7fa6f04aa9fa37c90dc6c9152e619886bf3b  txtorcon-19.0.0.tar.gz
196b7b5726e3c69a602071295368da9205c0cd1e26aba37536d3b8fb3b08ac9d  txtorcon-19.0.0-py2.py3-none-any.whl
EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAlw+vRERHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaacquQgAwJwyhfEhnH2DK9Zqy6pG6oFQzhHUJFgA
BehabihiHzJmiUpdVPtZwJ8KkkFbkvkA4AtHy2yF7tP1kCO2k1684IMGtgXOeVC2
hRJpqVqxZlXkOehUmQ87nUTJLYMbVabI5DxIUM9PltvJJj65fIhs0Daq8Kkj5jQT
vKgsLo1WNmUJ2JwiO+JYLd3Aet2NIxXl52WA+GyPYFEm5TwHNDL2vCYyT21a8aCB
VV4btprjfUd5mb+jFXBvf6cxHrWNFLFMLvoJZruQKVSr0C5AV+7zLWNtanPdSAf6
VxKUpDAZf23iNq4yjDwWgUg8W/pNwO2bZCJB9xQJN7IyRgdd+ubDyQ==
=aXJK
-----END PGP SIGNATURE-----

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190117135136</emailId><senderName>sarpedon montecarlo</senderName><senderEmail>sarpedon000@gmail.com</senderEmail><timestampReceived>2019-01-17 13:51:36-0400</timestampReceived><subject>[tor-dev] Modifying Path Selection based on geography</subject><body>

[Attachment #2 (multipart/alternative)]


Hello there.
I recently started to do some modifications on tor path selection by using
stem, torflow/op-addon and txtorconn. but as long as i enable
__LeaveStreamsUnattached option, tor will not function properly.
so i decided to hack the source for this feature i seek:
custom country for each position:
entry:{{entry country-code}}
middle:{{middle country-code}}
exit:{{country-code}}
i really appreciate you guys give me some hint, that which part of the
source i must start to hack?
i have dived into circuitbuild.c and some other core/or modules but i am
confused where to start.
thanks in advance.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello there.&lt;div&gt;I recently started to do some modifications on tor \
path selection by using stem, torflow/op-addon and txtorconn. but as long as i enable \
__LeaveStreamsUnattached option, tor will not function properly.&lt;/div&gt;&lt;div&gt;so i \
decided to hack the source for this feature i seek:&lt;/div&gt;&lt;div&gt;custom country for each \
position:&lt;/div&gt;&lt;div&gt;entry:{{entry country-code}}&lt;/div&gt;&lt;div&gt;middle:{{middle \
country-code}}&lt;/div&gt;&lt;div&gt;exit:{{country-code}}&lt;/div&gt;&lt;div&gt;i really appreciate you guys \
give me some hint, that which part of the source i must start to hack?&lt;/div&gt;&lt;div&gt;i \
have dived into circuitbuild.c and some other core/or modules but i am confused where \
to start.&lt;/div&gt;&lt;div&gt;thanks in advance.&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190121051241</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-21 05:12:41-0400</timestampReceived><subject>[tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello,

I just pushed a change to obfs4proxy master to use `utls` to mask the
ClientHello signature (currently Chrome 70.x).

https://gitlab.com/yawning/obfs4/commit/4d453dab2120082b00bf6e63ab4aaeeda6b8d8a3

I understand that this is being worked on for the original meek (see:
https://bugs.torproject.org/29077), but I felt inspired and it was
relatively easy to get something working.

Caveats:
 * This is only lightly tested, and may be doing something wrong or
   distinct.  It seems to work well enough to watch videos over it.
   YMMV.
 * Azure uses HTTP 2.  Not really a problem.
 * `utls.HelloFirefox_Auto` will fail to handshake with Azure due to an
   incompatible group being negotiated.
 * `utls.HelloChrome_Auto` ironically fails to handshake with
   `google.com` in a standalone test case for me.
 * `utls.HelloIOS_Auto` seems to work in all cases, so I may switch to
   that before I tag.

Questions, comments, feedback appreciated,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190118002339</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-01-18 00:23:39-0400</timestampReceived><subject>[tor-dev] anti-censorship weekly meeting notes</subject><body>

Hi!

We had the weekly meeting today! You can find the logs here:
http://meetbot.debian.net/tor-meeting/2019/tor-meeting.2019-01-17-19.59.html

And the contents of the pad:



ANTI-CENSORSHIP work meeting pad
--------------------------------

Next meeting: Thursday January 24th 8pm UTC

Weekly meetings every Thursday 8pm UTC on #tor-meeting at OFTC (channel
is logged while meetings are in progress).

== Goal of this meeting ==

Weekly checkin about the status of anti-censorship work at Tor.
Coordinate collaboration between people/teams on anti-censorship.

== Links to Useful documents ==

Anti-censorship Roadmap:
https://storm.torproject.org/shared/KXkqlNP8ouNks_ey5khZKUSbNj9ZoidXmEp80ODDMsN

Snowflake Roadmap:
https://storm.torproject.org/shared/OdNtwrtRrqklh76l4PfcngBbQFDbjv_jRroj0WeSY0B
Gettor Roadmap:
https://storm.torproject.org/shared/rhsSl_3Pb253HPqoCdFiAdmXQ57NUG_BLvBCxqF_Kqp
Bridgedb Roadmap:
https://storm.torproject.org/shared/O4XpgyW_q6CAtPPO_nd_Qc16Up-jXqdJLG8gXZYX_e2

-------------------------------
----   17th January 2019   ----
-------------------------------

== Announcements ==

    new hire for anti-censorship team starting at the end of the month


== Discussion ==

    Report on roadmap for anti-censorship at Tor


    Network Team roadmap for s19

    snowflake and snowflake blockers for deployment (already in january)

    gettor review

    things that may go into the roadmap while in brussels in february

    bridgesdb

    other PTs (marionette setup)

    snowflake webextension


    Metrics Team roadmap for s19

    can collaborate with other teams after March, specifically bridgedb


    Browser Team roadmap for s19

    Snowflake integration into Tor Browser build (#28672, #25483)

    Marionette once we have a long running bridge - network team dependency

    #28015 Brainstorm improved ux for orgs that want to give bridges to
their people


    UX Team roadmap for s19

    Gettor PRD
https://docs.google.com/document/d/18R_tUnqfFkn7d93w0pEbBOLxB62KAWHbUGd5MPKLB8w/edit
&lt;--- meet outside weekly anti-censorship meeting to define

    Snowflake extension : needs a developer to work on this.

    #28015 Brainstorm improved ux for orgs that want to give bridges to
their people


    Community Team roadmap for s19

    Fitting into existing outreach work?

    possible #28526?


    Team dependencies

    Deploy marionette #26920

    Bridges #28015

    Gettor


    Anything else?



== Actions ==

Snowflake extensions: needs developer, let's check who/how in the
browser team can do it (antonela, pili, gabA)
Gettor: meet outside weekly anti-censorship meeting to define scope
(antonela, gaba, hiro)


== Updates ==

FORMAT!

Name:
    Working on:
        - What you worked on last week and what you are planning to work
on next week (related to anti-censorship work).
    Help with:

         - Something you may need help with.


Gaba:

    Working on:

    kicking off collaboration work on the roadmap

    hiring process for anti-censorship team


ahf:
    Working on:

    - Documenting current Snowflake architecture and identify problems
related to scalability and usability (both for developers and users).
(#28848)

    - Documenting basic WebRTC usage to allow other developers to
quickly join in on it. (#28048) [&lt;-- wrong ticket number? 28048 is
"Metrics: Allow to search for relays per continent"]

    - Identifying bug where Snowflake proxy becomes unresponsive in a
smaller environment. (possibly #25429?)


kat5:
    Working on:
      - report 2
      - private bridge guide for NGOs


anto:

    Working on:

    - Snowflake Web Extension UI -
https://trac.torproject.org/projects/tor/ticket/23888

    - Put together a PRD for Gettor, needs more info and review -
https://docs.google.com/document/d/18R_tUnqfFkn7d93w0pEbBOLxB62KAWHbUGd5MPKLB8w/edit?usp=sharing

    Help with

    - snowflake extension: in need of a developer


Samdney:
    Working on:
     - Will also have a look at the WebExtension ticket #23888 :)
     - Looking for something where they can help!!! - If you have
anything in the direction of "research" or "investigation" in something,
then I'm your guy! :)
     (- I'm working on a research project about censor &lt;-&gt; classical
attacker in game theory. That's maybe later, when I have results :),
interesting for UX/dev stuff.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190123104216</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-01-23 10:42:16-0400</timestampReceived><subject>[tor-dev] using obfs4 to tunnel to a SOCKS proxy server</subject><body>


Hey all,

Hopefully this is a valid place to ask about PTs technical details.  So
n8fr8, uniqx (Michael Pöhn), and I are working to make an easily
reproducible obfs4 client and server setup with ansible scripts

uniqx got the setup working with obfs4 connecting to a port on the
server side, like a webserver. Weŕe trying to figure out a way to make
this obfs4 setup to behave like an SSH port forward, but weŕe banging
our heads against the concept.

For example, could the obfs4 server side provide a generic SOCKS proxy?
Hereś the use case:  wikimedia foundation wants to run their own PTs
built into their own client but it needs to support multiple domains,
e.g. en.wikipedia.org and commons.wikimedia.org.  So we would like to
have a generic SOCKS proxy for the client.  Then server side, the SOCKS
proxy only allows connections to a whitelist of wikimedia servers.

Here are uniqxś PT projects:
https://gitlab.com/uniqx/pt-obfs4proxy-minimal-demo
https://gitlab.com/uniqx/pt-socks5-over-obfs4proxy
https://gitlab.com/uniqx/pt-obfs4proxy-tcp-bridge
https://gitlab.com/uniqx/pt-tor-obfs4-bridge-test-vm

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190125215351</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-01-25 21:53:51-0400</timestampReceived><subject>[tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi tor-dev@ mailing list,

I have been working on Bug #27491 \
(https://trac.torproject.org/projects/tor/ticket/27491) and have been asked to write \
a proposal. My proposal is attached to this email as a text file.

I would really appreciate your comments on this proposal (is it good, bad, any \
problems with it?).

Thank You,

Neel Chahan


["xxx-ip-failure-count.txt" (text/plain)]

Filename: xxx-ip-failure-count.txt
Title: Preferring IPv4 or IPv6 based on IP Version Failure Count
Author: Neel Chauhan
Created: 25-Jan-2019
Status: Draft
Ticket: https://trac.torproject.org/projects/tor/ticket/27491

1. Introduction

   As IPv4 address space becomes scarce, ISPs and organizations will deploy
   IPv6 in their networks. Right now, Tor clients connect to guards using
   IPv4 connectivity by default.

   When networks first transition to IPv6, both IPv4 and IPv6 will be enabled
   on most networks in a so-called "dual-stack" configuration. This is to not
   break existing IPv4-only applications while enabling IPv6 connectivity.
   However, IPv6 connectivity may be unreliable and clients should be able
   to connect to the guard using the most reliable technology, whether IPv4
   or IPv6.

   In ticket #27490, we introduced the option ClientAutoIPv6ORPort which adds
   preliminary "happy eyeballs" support. If set, this lets a client randomly
   choose between IPv4 or IPv6. However, this random decision does not take
   into account unreliable connectivity or network failures of an IP family.
   A successful Tor implementation of the happy eyeballs algorithm requires
   that unreliable connectivity on IPv4 and IPv6 are taken into consideration.

   This proposal describes an algorithm to take into account network failures
   in the random decision used for choosing an IP family and the data fields
   used by the algorithm.

2. Failure Counter Design

   I propose that the failure counter uses the following fields:

      * IPv4 failure count

      * IPv4 failure count from no route (autofail)

      * IPv6 failure count

      * IPv6 failure count from no route (autofail)

   These entries will exist as internal counters for the current session, and
   as a list of the previous counts of these counters from previous sessions in
   the state file.

   These values will be stored as 32-bit unsigned integers for the current
   session, and as comma seperated values in the statefile.

   The list capacity will be the 4 most recent sessions for each field above
   stored in the state file with the least recent first. This is for the
   following reasons:

      * We can forget about the oldest sessions without having to keep the
        exact timestamp when a client failed. This prevents an attacker from
        getting detailed failure information from the state file.

      * Some clients (mobile phones, laptops) may switch between networks of
        which may be more or less reliable than the previous in terms of IPv4
        or IPv6. In this case, it makes less sense to remember old failures
        caused on a different network from the current one.

   When Tor is being closed, and there are less than four entries for each
   field, we will append the current session at the end. If there are four
   entries, we will remove the oldest entry and then add the current session's
   values at Tor's shutdown.

3. Failure Probability Calculation

   The failure count of one IP version will increase the probability of the
   other IP version. For instance, a failure of IPv4 will increase the IPv6
   probability, and vice versa.

   When the IP version is being chosen, I propose that these values will be
   included in the guard selection code:

      * IPv4 failure points

      * IPv6 failure points

      * Total failure points

   These values will be stored as 32-bit unsigned integers.

   A generic failure of an IP version will add one point to the failure point
   count values of the particular IP version which failed.

   A failure of an IP version from a "no route" error which happens when
   connections automatically fail will be counted as two failure points
   for the automatically failed version.

   The failure points for both IPv4 and IPv6 is sum of the values in the state
   file plus the current session's failure values. The total failure points is
   a sum of the IPv4 and IPv6 failure points.

   The probability of a particular IP version is the failure points of the
   other version divided by the total number of failure points, multiplied
   by 8 and stored as an integer. We will call this value the summarized
   failure point value (SFPV). The reason for this summarization is to
   emulate a probability in 1/8 intervals by the random number generator.

   In the random number generator, we will choose a random number between 0
   and 8. If the random number is less than the IPv6 SFPV, we will choose
   IPv4. If it is equal or greater, we will choose IPv6.

   If the probability is 0/8 with a SFPV value of 0, it will be rounded to
   1/8 with a SFPV of 1. Also, if the probability is 8/8 with a SFPV of 8,
   it will be rounded to 7/8 with a SFPV of 7. The reason for this is to
   accomodate mobile clients which could change networks at any time (e.g.
   WiFi to cellular) which may be more or less reliable in terms of a
   particular IP family when compared to the previous network of the client.

4. Acknowledgements

   Thank you teor for aiding me with the implementation of Happy Eyeballs in
   Tor. This would not have been possible if it weren't for you.

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190126053103</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-26 05:31:03-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

On January 25, 2019 9:53:51 PM UTC, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; I have been working on Bug #27491
&gt; (https://trac.torproject.org/projects/tor/ticket/27491) and have been
&gt; asked to write a proposal. My proposal is attached to this email as a
&gt; text file.
&gt; 
&gt; I would really appreciate your comments on this proposal (is it good,
&gt; bad, any problems with it?).
Hi Neel,

Thank you for this proposal.

The draft code and my initial review are in this GitHub pull request:
https://github.com/torproject/tor/pull/566

Most of the network team have finished work for the week, and we have an in-person \
meeting next week. So it might take us a few weeks to review your proposal.

We do a lot of our reviews on GitHub pull requests. Proposals usually go in \
https://github.com/torproject/torspec/tree/master/proposals

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190126133616</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-01-26 13:36:16-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi teor,

Thank you so much. I understand that it could take time from your in-person meeting.

My proposal is here as a PR: https://github.com/torproject/torspec/pull/53

Sorry if I am doing anything wrong, this is my first time doing a proposal.

-Neel

===

https://www.neelc.org/

January 26, 2019 12:31 AM, "teor" &lt;teor@riseup.net&gt; wrote:

&gt; On January 25, 2019 9:53:51 PM UTC, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt;&gt; Hi tor-dev@ mailing list,
&gt;&gt; 
&gt;&gt; I have been working on Bug #27491
&gt;&gt; (https://trac.torproject.org/projects/tor/ticket/27491) and have been
&gt;&gt; asked to write a proposal. My proposal is attached to this email as a
&gt;&gt; text file.
&gt;&gt; 
&gt;&gt; I would really appreciate your comments on this proposal (is it good,
&gt;&gt; bad, any problems with it?).
&gt; 
&gt; Hi Neel,
&gt; 
&gt; Thank you for this proposal.
&gt; 
&gt; The draft code and my initial review are in this GitHub pull request:
&gt; https://github.com/torproject/tor/pull/566
&gt; 
&gt; Most of the network team have finished work for the week, and we have an in-person meeting next
&gt; week. So it might take us a few weeks to review your proposal.
&gt; 
&gt; We do a lot of our reviews on GitHub pull requests. Proposals usually go in
&gt; https://github.com/torproject/torspec/tree/master/proposals
&gt; 
&gt; T
&gt; 
&gt; --
&gt; teor
&gt; ----------------------------------------------------------------------
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190127062315</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-01-27 06:23:15-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

&gt; https://github.com/torproject/torspec/pull/53
&gt; https://trac.torproject.org/projects/tor/ticket/27491
&gt; https://github.com/torproject/tor/pull/566
&gt; https://github.com/torproject/torspec/tree/master/proposals

The subject would make use of the folllowing RFC...

Happy Eyeballs Version 2: Better Connectivity Using Concurrency
https://tools.ietf.org/html/rfc8305

You probably want to reference it in
any relavant proposal, ticket, pull.


Below is of minor import...

Default Address Selection for Internet Protocol Version 6 (IPv6)
https://tools.ietf.org/html/rfc6724
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190127093507</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-27 09:35:07-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>



On January 27, 2019 6:23:15 AM UTC, grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt; &gt; https://github.com/torproject/torspec/pull/53
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/27491
&gt; &gt; https://github.com/torproject/tor/pull/566
&gt; &gt; https://github.com/torproject/torspec/tree/master/proposals
&gt; 
&gt; The subject would make use of the folllowing RFC...
&gt; 
&gt; Happy Eyeballs Version 2: Better Connectivity Using Concurrency
&gt; https://tools.ietf.org/html/rfc8305
&gt; 
&gt; You probably want to reference it in
&gt; any relavant proposal, ticket, pull.

I agree that "happy eyeballs" provides a really good user experience.

But before we implement rfc8305 in Tor, we would need to refactor Tor's address \
handling code.

At the moment, Tor:
1. Chooses a set of guards using their consensus weights (or has a configured set of \
bridges), 2. Chooses a guard with a reachable address,
3. Chooses an address for that guard,
4. Connects to that address (or uses an existing connection)

If we wanted to implement rfc8305, Tor would need to:
1. Choose a set of guards that includes at least some IPv4 and IPv6 guards
2. Choose a guard with a reachable address, and, if that guard is not dual-stack, \
choose another guard that has a reachable address from the missing address family 3. \
Connect to both the IPv4 and IPv6 addresses

We would also need to think about the load-balancing and privacy implications of this \
change.

Trying to keep a connection to two guards sounds like proposal 291:
https://github.com/torproject/torspec/blob/master/proposals/291-two-guard-nodes.txt

We should think about how these proposals interact.

But that's a big job, and we won't have time for it for at least 6 months.

In the meantime, let's try to make some quick changes that make Tor work better with \
IPv6. Even if they are not ideal.

Then we can replace them with something better, when we have the time.

&gt; Below is of minor import...
&gt; 
&gt; Default Address Selection for Internet Protocol Version 6 (IPv6)
&gt; https://tools.ietf.org/html/rfc6724

Tor doesn't use getaddrinfo() or DNS to discover relay addresses. If we did \
re-implement rfc6724 in Tor, it wouldn't make much difference. Most relays are \
IPv4-only, so there is no address choice. For dual-stack relays, it would choose \
between one IPv4 and one IPv6 address.

So I am not sure how rfc6724 applies to Tor.

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190128103227</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@alum.mit.edu</senderEmail><timestampReceived>2019-01-28 10:32:27-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

On Fri, Jan 25, 2019 at 10:54 PM Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; I have been working on Bug #27491 \
&gt; (https://trac.torproject.org/projects/tor/ticket/27491) and have been asked to \
&gt; write a proposal. My proposal is attached to this email as a text file. 
&gt; I would really appreciate your comments on this proposal (is it good, bad, any \
&gt; problems with it?). 

For tracking, I have added this as proposal 299!  It looks neat to me.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190123114142</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-23 11:41:42-0400</timestampReceived><subject>Re: [tor-dev] using obfs4 to tunnel to a SOCKS proxy server</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 1/23/19 10:42 AM, Hans-Christoph Steiner wrote:
&gt; uniqx got the setup working with obfs4 connecting to a port on the
&gt; server side, like a webserver. Weŕe trying to figure out a way to make
&gt; this obfs4 setup to behave like an SSH port forward, but weŕe banging
&gt; our heads against the concept.

You don't/can't, with mainline obfs4proxy.

&gt; For example, could the obfs4 server side provide a generic SOCKS proxy?

There is no functionality for doing such a thing in mainline obfs4proxy.

What currently will work is any one of:

 * Stick a proxy server of your choice behind the obfs4proxy server.
From the application end it will essentially be connecting to a (for
example) SOCKS5 proxy over another SOCKS5 proxy.

 * Connect the obfs4proxy server to a load-balancer or reverse-proxy
that re-dispatches requests to the correct location based on the SNI
block or `Host` header (depending on how you want to treat TLS).

Regards,

-- 
Yawning Angel



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190123182501</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-23 18:25:01-0400</timestampReceived><subject>Re: [tor-dev] using obfs4 to tunnel to a SOCKS proxy server</subject><body>

On Wed, Jan 23, 2019 at 11:41:42AM +0000, Yawning Angel wrote:
&gt; &gt; For example, could the obfs4 server side provide a generic SOCKS proxy?
&gt; 
&gt; There is no functionality for doing such a thing in mainline obfs4proxy.
&gt; 
&gt; What currently will work is any one of:
&gt; 
&gt;  * Stick a proxy server of your choice behind the obfs4proxy server.
&gt; From the application end it will essentially be connecting to a (for
&gt; example) SOCKS5 proxy over another SOCKS5 proxy.
&gt; 
&gt;  * Connect the obfs4proxy server to a load-balancer or reverse-proxy
&gt; that re-dispatches requests to the correct location based on the SNI
&gt; block or `Host` header (depending on how you want to treat TLS).

This is the right answer. Fundamentally you need two layers of proxying:
one at the PT layer (obfs4proxy PT interface) and one at your
application layer (where you implement problem-specific logic like
domain whitelists).

On the server, you will point TOR_PT_ORPORT at a SOCKS server or load
balancer, rather than directly at the target web server. The
obfs4_server.sh script will work fine for that; you could also try
https://github.com/twisteroidambassador/ptadapter. The SOCKS server will
have to support a destination whitelist--or you could just put it on a
host with an appropriate outgoing firewall. Instead of a SOCKS server,
you could use load balancer/reverse proxy like Yawning says. Here are a
few that have SNI proxying (I've personally only used sslh):
https://www.haproxy.com/blog/enhanced-ssl-load-balancing-with-server-name-indication-sni-tls-extension/
https://github.com/yrutschle/sslh
https://github.com/dlundquist/sniproxy

But you're going to encounter an undesirable feature of this setup:
there's a 1:1 relationship between application-layer connections and
obfuscation-layer tunnels. That is, if the app makes 2 HTTPS connections
to 2 different Wikimedia domains, there will be 2 obfs4 tunnels
happening. It will work, but it's more conspicuous and will notionally
make website fingerprinting easier. What you may want is a multiplexing
protocol that collapses multiple streams into one on the client side (to
feed into the obfs4 tunnel) and splits them back apart again on the
server side. (In the usual Tor setup, it's the Tor protocol that serves
this multiplexing function--you only have one long-lived connection to
your guard, not a separate connection for every application-layer
stream.) Unfortunately I don't know of any out-of-the-box that does
this. You might try https://github.com/xtaci/smux; also lately I've been
thinking a lot about applying https://github.com/lucas-clemente/quic-go
to this problem.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190124230319</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-01-24 23:03:19-0400</timestampReceived><subject>Re: [tor-dev] using obfs4 to tunnel to a SOCKS proxy server</subject><body>

David Fifield:
&gt; On Wed, Jan 23, 2019 at 11:41:42AM +0000, Yawning Angel wrote:
&gt;&gt;&gt; For example, could the obfs4 server side provide a generic SOCKS proxy?
&gt;&gt;
&gt;&gt; There is no functionality for doing such a thing in mainline obfs4proxy.
&gt;&gt;
&gt;&gt; What currently will work is any one of:
&gt;&gt;
&gt;&gt;  * Stick a proxy server of your choice behind the obfs4proxy server.
&gt;&gt; From the application end it will essentially be connecting to a (for
&gt;&gt; example) SOCKS5 proxy over another SOCKS5 proxy.
&gt;&gt;
&gt;&gt;  * Connect the obfs4proxy server to a load-balancer or reverse-proxy
&gt;&gt; that re-dispatches requests to the correct location based on the SNI
&gt;&gt; block or `Host` header (depending on how you want to treat TLS).
&gt; 
&gt; This is the right answer. Fundamentally you need two layers of proxying:
&gt; one at the PT layer (obfs4proxy PT interface) and one at your
&gt; application layer (where you implement problem-specific logic like
&gt; domain whitelists).
&gt; 
&gt; On the server, you will point TOR_PT_ORPORT at a SOCKS server or load
&gt; balancer, rather than directly at the target web server. The
&gt; obfs4_server.sh script will work fine for that; you could also try
&gt; https://github.com/twisteroidambassador/ptadapter. The SOCKS server will
&gt; have to support a destination whitelist--or you could just put it on a
&gt; host with an appropriate outgoing firewall. Instead of a SOCKS server,
&gt; you could use load balancer/reverse proxy like Yawning says. Here are a
&gt; few that have SNI proxying (I've personally only used sslh):
&gt; https://www.haproxy.com/blog/enhanced-ssl-load-balancing-with-server-name-indication-sni-tls-extension/
&gt; https://github.com/yrutschle/sslh
&gt; https://github.com/dlundquist/sniproxy
&gt; 
&gt; But you're going to encounter an undesirable feature of this setup:
&gt; there's a 1:1 relationship between application-layer connections and
&gt; obfuscation-layer tunnels. That is, if the app makes 2 HTTPS connections
&gt; to 2 different Wikimedia domains, there will be 2 obfs4 tunnels
&gt; happening. It will work, but it's more conspicuous and will notionally
&gt; make website fingerprinting easier. What you may want is a multiplexing
&gt; protocol that collapses multiple streams into one on the client side (to
&gt; feed into the obfs4 tunnel) and splits them back apart again on the
&gt; server side. (In the usual Tor setup, it's the Tor protocol that serves
&gt; this multiplexing function--you only have one long-lived connection to
&gt; your guard, not a separate connection for every application-layer
&gt; stream.) Unfortunately I don't know of any out-of-the-box that does
&gt; this. You might try https://github.com/xtaci/smux; also lately I've been
&gt; thinking a lot about applying https://github.com/lucas-clemente/quic-go
&gt; to this problem.

Sounds like these are the right direction.  Just to clarify: I was
thinking of obfs4 like an SSH port forward, not as the provider of a
SOCKS proxy.  So "server-side" means running daemon alongside obfs4proxy
to do the other bits.  What you two have outlined sounds like exactly that.

Is this the same with other PT 1.1 daemons?  Or would Snowflake be
different?  Seems like with obfs4, the load balancer using SNI would
probably be the easiest for the wikipedia use case.

.hc


-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190121172206</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-21 17:22:06-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

On Mon, Jan 21, 2019 at 05:12:41AM +0000, Yawning Angel wrote:
&gt; I just pushed a change to obfs4proxy master to use `utls` to mask the
&gt; ClientHello signature (currently Chrome 70.x).
&gt; 
&gt; https://gitlab.com/yawning/obfs4/commit/4d453dab2120082b00bf6e63ab4aaeeda6b8d8a3
&gt; 
&gt; I understand that this is being worked on for the original meek (see:
&gt; https://bugs.torproject.org/29077), but I felt inspired and it was
&gt; relatively easy to get something working.

Thanks, you found a clever approach that I hadn't thought of. I tried
just setting DialTLS on the main http.Transport--that doesn't work
because net/http doesn't know that utls has negotiated HTTP/2, and
starts sending HTTP/1.1 on an HTTP/2 connection. Setting DialTLS on an
http2.Transport works, but only with HTTP/2 servers.

If I may interpret, your code builds an http.RoundTripper wrapper around
http.Transport and http2.Transport. When the caller makes its first
request, the wrapper initiates the utls connection, then inspects what
protocol was negotiated with ALPN, and creates its own internal
http.Transport or http2.Transport as appropriate. Then, it simply
forwards all requests to its internal transport--also setting DialTLS on
the internal transport so that future connections will also use utls,
but re-using the same transport instead of making a new one each time.

This looks better than what I was trying to do. I will probably start
working on doing the meek-client implementation in this style.

As for the TODO, my plan was was to expose a "utls" SOCKS arg to make it
configurable per bridge, and just reuse the utls Client Hello ID names:
	utls=HelloChrome_Auto
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190121190029</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-21 19:00:29-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


(Whoops I sent my last reply directly instead of to the list.  It wasn't
all that important for the general public, and lists.tp.o has been flaky
for me recently anyway.)

On 1/21/19 5:22 PM, David Fifield wrote:
&gt; As for the TODO, my plan was was to expose a "utls" SOCKS arg to make it
&gt; configurable per bridge, and just reuse the utls Client Hello ID names:
&gt; 	utls=HelloChrome_Auto

Done.

https://gitlab.com/yawning/obfs4/commit/e4020b18f7aaafe9f4cb345630bfe18a5e44a8d2

As long as there's enough bridge line interoperability between
implementations, I'm not particularly bothered if other people actually
do use utls.HelloGolang or not, I'm choosing not to.

As a side note:
Implementing support for the missing DH groups in utls is likely trivial
(assuming you don't care that it's vartime, extremely bad for actual
TLS, fine for meek_lite) and would increase compatibility a good amount.

That said HelloChrome_Auto and HelloIOS_Auto both work fine against the
Azure bridge, so it might not be worth the effort.

Regards,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190124064737</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-24 06:47:37-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

On Mon, Jan 21, 2019 at 05:12:41AM +0000, Yawning Angel wrote:
&gt; I just pushed a change to obfs4proxy master to use `utls` to mask the
&gt; ClientHello signature (currently Chrome 70.x).
&gt; 
&gt; https://gitlab.com/yawning/obfs4/commit/4d453dab2120082b00bf6e63ab4aaeeda6b8d8a3

	// This also assumes that req.URL.Host will remain constant for the
	// lifetime of the roundTripper, which is a valid assumption for meeklite.

Am I wrong, or is the actual restriction less strict? You can reuse the
roundTripper for different hosts--the ServerName is taken from the addr
argument to dialTLS--but only if those different hosts negotiate the
same ALPN, because the choice of http.Transport or http2.Transport is
made only once and persists for the lifetime of the roundTripper.

For the same reason, I don't think we'll be able to use HelloRandomized,
only HelloRandomizedALPN or HelloRandomizedNoALPN. Otherwise we may
negotiate different ALPN even against the same server during the
lifetime of roundTripper. I tried adding a
	conn.SetReadDeadline(time.Now().Add(10*time.Second))
inside dialTLS to force it to re-dial frequently, and with
HelloRandomized it does indeed eventually trip the "horrifically wrong"
branch with an error like:
	net/http: HTTP/1.x transport connection broken: malformed HTTP response \
"\x00\x00\x12\x04\x00\x00\x00\x00\x00\x00\x05\x00\x10\x00\x00\x00\x03\x00\x00\x00\xfa\x00\x06\x00\x10\x01@"
 Despite the error, the client recovers quickly, redialing until it gets
a compatible ALPN.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190124073339</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-24 07:33:39-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 1/24/19 6:47 AM, David Fifield wrote:
&gt; 	// This also assumes that req.URL.Host will remain constant for the
&gt; 	// lifetime of the roundTripper, which is a valid assumption for meeklite.
&gt; 
&gt; Am I wrong, or is the actual restriction less strict? You can reuse the
&gt; roundTripper for different hosts--the ServerName is taken from the addr
&gt; argument to dialTLS--but only if those different hosts negotiate the
&gt; same ALPN, because the choice of http.Transport or http2.Transport is
&gt; made only once and persists for the lifetime of the roundTripper.
The lock protecting `roundTripper.initConn` is only held in `dialTLS`,
and the `roundTripper.transport` is not protected by a lock at all.

If the target host changes and there is simultaneous access (two threads
call into `roundTripper.RoundTrip` right after initialization
simultaneously), there is no guarantee that the connection used to
create the inner `http.RoundTripper` instance will be passed to the
correct thread.

Regards,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190124073853</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-24 07:38:53-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

On Thu, Jan 24, 2019 at 07:33:39AM +0000, Yawning Angel wrote:
&gt; On 1/24/19 6:47 AM, David Fifield wrote:
&gt; &gt; 	// This also assumes that req.URL.Host will remain constant for the
&gt; &gt; 	// lifetime of the roundTripper, which is a valid assumption for meeklite.
&gt; &gt; 
&gt; &gt; Am I wrong, or is the actual restriction less strict? You can reuse the
&gt; &gt; roundTripper for different hosts--the ServerName is taken from the addr
&gt; &gt; argument to dialTLS--but only if those different hosts negotiate the
&gt; &gt; same ALPN, because the choice of http.Transport or http2.Transport is
&gt; &gt; made only once and persists for the lifetime of the roundTripper.
&gt;
&gt; The lock protecting `roundTripper.initConn` is only held in `dialTLS`,
&gt; and the `roundTripper.transport` is not protected by a lock at all.
&gt; 
&gt; If the target host changes and there is simultaneous access (two threads
&gt; call into `roundTripper.RoundTrip` right after initialization
&gt; simultaneously), there is no guarantee that the connection used to
&gt; create the inner `http.RoundTripper` instance will be passed to the
&gt; correct thread.

I see, you're right. It has to do with the reuse of the initConn.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190124074448</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-24 07:44:48-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 1/24/19 7:38 AM, David Fifield wrote:
&gt; I see, you're right. It has to do with the reuse of the initConn.

A proper "general" solution that solves that problem and the ALPN issue
is to have a `initConn` and `http.RoundTripper` instance per destination
host, and some additional locking.

With more implementation cleverness this could be brought down to two
`http.RoundTripper` instances, and a host -&gt; pointer + net.Conn map, and
some locking.

But for something like meek_lite where the number of destination hosts
is not large, the existing wrapper works fine and I don't see much
reason to over engineer it.

Regards,

--=20
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190118014002</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-18 01:40:02-0400</timestampReceived><subject>Re: [tor-dev] Modifying Path Selection based on geography</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 17 Jan 2019, at 23:39, sarpedon montecarlo &lt;sarpedon000@gmail.com&gt; wrote:
&gt; 
&gt; I recently started to do some modifications on tor path selection by using stem, \
&gt; torflow/op-addon and txtorconn. but as long as i enable __LeaveStreamsUnattached \
&gt; option, tor will not function properly.

__LeaveStreamsUnattached means that the controller needs to attach all of Tor's
streams. How does Tor fail when you set it?

We know that __DisablePredictedCircuits causes Tor to stop bootstrapping.
https://trac.torproject.org/projects/tor/ticket/17359

&gt; so i decided to hack the source for this feature i seek:
&gt; custom country for each position:
&gt; entry:{{entry country-code}}
&gt; middle:{{middle country-code}}
&gt; exit:{{country-code}}

Restricting your path probably won't do what you want:

Changing Tor's path selection makes your Tor client look different, so you will be
easier to track.

GeoIP is inaccurate: it's based on the physical location of the machine, or the
location of the owner of the IP address, or some other location they chose.
Relays are usually in data centres, so there's no commercial incentive to keep
their locations up to date for targeted advertising.

Also, different GeoIP databases have different locations for the same IP address.

And GeoIP locations often don't correspond to legal jurisdictions.

&gt; i really appreciate you guys give me some hint, that which part of the source i \
&gt; must start to hack? i have dived into circuitbuild.c and some other core/or modules \
&gt; but i am confused where to start.

You could start by using the existing EntryNodes and ExitNodes options:
https://www.torproject.org/docs/tor-manual.html.en

You may also want the StrictNodes option.

Tor 0.4.0.1-alpha will add a MiddleNodes option, it should be out in the next few \
days. If you can't wait, the code is here:
https://github.com/torproject/tor/commit/8ad497bb578b13c66489843905764a60545e6388

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Hi,&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;On 17 Jan 2019, at 23:39, sarpedon montecarlo &lt;&lt;a \
href="mailto:sarpedon000@gmail.com"&gt;sarpedon000@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;I \
recently started to do some modifications on tor path selection by using stem, \
torflow/op-addon and txtorconn. but as long as i enable __LeaveStreamsUnattached \
option, tor will not function \
properly.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;__LeaveStreamsUnattached means that the controller needs to attach all of \
Tor's&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;streams. &lt;/span&gt;How does Tor fail when you set \
it?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We know that __DisablePredictedCircuits \
causes Tor to stop bootstrapping.&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/17359"&gt;https://trac.torproject.org/projects/tor/ticket/17359&lt;/a&gt;&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;so i decided to hack the source for \
this feature i seek:&lt;/div&gt;&lt;div&gt;custom country for each \
position:&lt;/div&gt;&lt;div&gt;entry:{{entry country-code}}&lt;/div&gt;&lt;div&gt;middle:{{middle \
country-code}}&lt;/div&gt;&lt;div&gt;exit:{{country-code}}&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Restricting \
your path probably won't do what you want:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;Changing Tor's path selection makes \
your Tor client look different, so you will be&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;easier to \
track.&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;GeoIP is inaccurate: it's based on the \
physical location of the machine, or the&lt;/div&gt;&lt;div&gt;location of the owner of the IP \
address, or some other location they chose.&lt;/div&gt;&lt;div&gt;Relays are usually in data \
centres, so there's no commercial incentive to keep&lt;/div&gt;&lt;div&gt;their locations up to \
date for targeted advertising.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Also, different GeoIP \
databases have different locations for the same IP \
address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;And GeoIP locations often don't correspond to legal \
jurisdictions.&lt;/div&gt;&lt;br&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;i \
really appreciate you guys give me some hint, that which part of the source i must \
start to hack?&lt;/div&gt;&lt;div&gt;i have dived into circuitbuild.c and some other core/or \
modules but i am confused where to start.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;You \
could start by using the existing EntryNodes and ExitNodes options:&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://www.torproject.org/docs/tor-manual.html.en"&gt;https://www.torproject.org/docs/tor-manual.html.en&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;You may also want the StrictNodes \
option.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;Tor 0.4.0.1-alpha will add a MiddleNodes option, it should be out in the next \
few days.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="background-color: rgba(255, 255, 255, 0);"&gt;If \
you can't wait, the code is here:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;a \
href="https://github.com/torproject/tor/commit/8ad497bb578b13c66489843905764a60545e638 \
8"&gt;https://github.com/torproject/tor/commit/8ad497bb578b13c66489843905764a60545e6388&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190118185331</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-01-18 18:53:31-0400</timestampReceived><subject>Re: [tor-dev] Modifying Path Selection based on geography</subject><body>

sarpedon montecarlo &lt;sarpedon000@gmail.com&gt; writes:

&gt; I recently started to do some modifications on tor path selection by
&gt; using stem, torflow/op-addon and txtorconn. but as long as i enable
&gt; __LeaveStreamsUnattached option, tor will not function properly.

Can you elaborate on what problems you ran into? Both Stem and txtorcon
should work fine doing their own circuit building + stream attachment.

-- 
meejah

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190119113352</emailId><senderName>sarpedon montecarlo</senderName><senderEmail>sarpedon000@gmail.com</senderEmail><timestampReceived>2019-01-19 11:33:52-0400</timestampReceived><subject>Re: [tor-dev] Modifying Path Selection based on geography</subject><body>

[Attachment #2 (multipart/alternative)]


&gt;
&gt; Hello there. the event handlers i register,  streams and circuits events,
&gt; freeze and stops working. this is not happening from the beginning but when
&gt; some streams show up, it seems like some stack somewhere that i am not
&gt; aware of, stock at processing the queue.
&gt;
First i must appreciate from teor@reseup.net for the kind and very helpful
answer.
Second: if i want to build the project, is there any up to date approach?
i used the dependency libraries provided at jenkins, the problem is that
using nmake goes wrong, and the last update of the build-manual in the code
belongs to 2014.
Thanks in advance.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;Hello there. the event handlers i register,   \
streams and circuits events, freeze and stops working. this is not happening from the \
beginning but when some streams show up, it seems like some stack somewhere that i am \
not aware of, stock at processing the queue.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;First i must \
appreciate from &lt;a href="mailto:teor@reseup.net"&gt;teor@reseup.net&lt;/a&gt; for the kind and \
very helpful answer.&lt;/div&gt;&lt;div&gt;Second: if i want to build the project, is there any \
up to date approach?&lt;/div&gt;&lt;div&gt;i used the dependency libraries provided at jenkins, \
the problem is that using nmake goes wrong, and the last update of the build-manual \
in the code belongs to 2014.&lt;/div&gt;&lt;div&gt;Thanks in advance.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190111170500</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-01-11 17:05:00-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Richard Pospesel:
&gt; And here's a link that actually works:
&gt; https://storm.torproject.org/shared/Kw99Ow0ExZFFC6FKD5CeryfVFAoAL9Z_iEV=
lflI0fiL

Thanks for collecting and sharing all the possibly ideas here. Some
comments come to mind after thinking a bit about it.

1) We probably won't get that feature right in our first attempt (let's
assume there is something like "right" here at all), so I would not want
to spend too much time trying to fix all the rabbit holes we find while
thinking about and implementing fixes. In particular, I'd suggest we try
to ignore the scenario that identifiers, cookies etc. get somehow passed
on in the URL bar over redirects for now. Dealing with tracking
information in URLs is a tricky topic of its own and somewhat orthogonal
to redirects.

2) For Tor Browser I think I am currently most interested in the "Expand
First Party Double-Keying Scheme to Redirected Content" scenario, thus
I'd like to look a bit closer at it. Looking over the Cons I don't see
OAuth and similar authentication mechanisms being broken, is that
correct? If so, great, and certainly a plus.

I think I don't understand the scenario in Con 1, that is how a user can
effectively end up with two simultaneous identities depending on whether
they came from https://gogle.com/ or https://google.com/. For instance,
if I enter https://gogle.com, why should I end up with a different
identity than coming from https://google.com? https://gogle.com is not
even settings cookies, but even if it were the final response from
google.com is a 200 with a Set-Cookie header (among other things). That
cookie would I sent back regardless once I decide I want to log in. The
same happens in the scenario where I already had been logged into Google
before I think.

3) I am not sure about Con 2 yet, but another thing we can keep in mind
is that we have the New Identity feature against powerful
trackers/longterm tracking. If we don't find a solution to Con 2 I think
pointing to that defense as a stop gap is not the worst idea. At any
rate I feel not having a solution right now to that one should not stop
us from experimenting.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>201901111705000</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-01-11 17:05:00-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Richard Pospesel:
&gt; And here's a link that actually works:
&gt; https://storm.torproject.org/shared/Kw99Ow0ExZFFC6FKD5CeryfVFAoAL9Z_iEV=
lflI0fiL

Thanks for collecting and sharing all the possible ideas here. Some
comments come to mind after thinking a bit about it.

1) We probably won't get that feature right in our first attempt (let's
assume there is something like "right" here at all), so I would not want
to spend too much time trying to fix all the rabbit holes we find while
thinking about and implementing fixes. In particular, I'd suggest we try
to ignore the scenario that identifiers, cookies etc. get somehow passed
on in the URL bar over redirects for now. Dealing with tracking
information in URLs is a tricky topic of its own and somewhat orthogonal
to redirects.

2) For Tor Browser I think I am currently most interested in the "Expand
First Party Double-Keying Scheme to Redirected Content" scenario, thus
I'd like to look a bit closer at it. Looking over the Cons I don't see
OAuth and similar authentication mechanisms being broken, is that
correct? If so, great, and certainly a plus.

I think I don't understand the scenario in Con 1, that is how a user can
effectively end up with two simultaneous identities depending on whether
they came from https://gogle.com/ or https://google.com/. For instance,
if I enter https://gogle.com, why should I end up with a different
identity than coming from https://google.com? https://gogle.com is not
even settings cookies, but even if it were the final response from
google.com is a 200 with a Set-Cookie header (among other things). That
cookie would I sent back regardless once I decide I want to log in. The
same happens in the scenario where I already had been logged into Google
before I think.

3) I am not sure about Con 2 yet, but another thing we can keep in mind
is that we have the New Identity feature against powerful
trackers/longterm tracking. If we don't find a solution to Con 2 I think
pointing to that defense as a stop gap is not the worst idea. At any
rate I feel not having a solution right now to that one should not stop
us from experimenting.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190118205943</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2019-01-18 20:59:43-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

For background: Currently with first-party isolation enabled if foo.com embeds
content from bar.com the cookies we would send to bar.com would come from the
foo.com|bar.com double-keyed bucket, whereas if we were to visit bar.com
directly the cookies used would just come from the bar.com bucket. This way
embedded bar.com content requests don't get correlated with first-party bar.com
sessions (and vice-versa).

So the idea behind the proposed 'Expand First Party Double-Keying Scheme to
Redirect Content' is that we treat redirected content the same as we currently
treat embedded content now by double-keying. If foo.com redirects to bar.com, we
treat the originating foo.com as the first-party domain and subsequent cookies
saved by/sent to bar.com would use the foo.com|bar.com bucket, as if bar.com was
embedded content in foo.co

Con 1 outlines the common scenario where websites will squat on similar or old
domains that redirect to the correct one (ie gogle.com -&gt; google.com or
wachovia.com -&gt; wellsfargo.com). So, suppose foo.com redirects to bar.com and
the user then logs in to their bar.com account. Due to the redirect, your
session cookie bar.com directs you to store after a successful login will be
saved in the double-keyed foo.com|bar.com bucket. This is fine so long as the
user always gets to bar.com via the redirect, but if the user learns the new url
and now navigates to bar.com directly (rather than from the foo.com redirect),
they would be pulling cookies from the bar.com bucket directly since there was
no redirect and bar.com would be the first-party. Thus, you would have two
concurrent session cookies, one in the bar.com bucket and one in the
foo.com|bar.com bucket. If the user is trying to juggle multiple identities,
then accidental use of the wrong account is one typo away.

The Double-Keyed Redirect Cookies + 'Domain Promotion' tries to fix this
multiple/hidden session problem by promoting the cookies of double-keyed
websites to first-party status in the case where the originating domain is
positively identified as solely a redirect. In the gogle.com -&gt; google.com
scenario, if Tor Browser could identify that gogle.com is used solely to
redirect to google.com, then we could take the double-keyed gogle.com|google.com
cookies and move them into the google.com bucket and eliminate the double
session.

I hope that clears things up.

best,
- -Richard


On 1/11/19 9:05 AM, Georg Koppen wrote:
&gt; Richard Pospesel:
&gt;&gt; And here's a link that actually works:
&gt;&gt; https://storm.torproject.org/shared/Kw99Ow0ExZFFC6FKD5CeryfVFAoAL9Z_iEVlflI0fiL
&gt; 
&gt; Thanks for collecting and sharing all the possible ideas here. Some
&gt; comments come to mind after thinking a bit about it.
&gt; 
&gt; 1) We probably won't get that feature right in our first attempt (let's
&gt; assume there is something like "right" here at all), so I would not want
&gt; to spend too much time trying to fix all the rabbit holes we find while
&gt; thinking about and implementing fixes. In particular, I'd suggest we try
&gt; to ignore the scenario that identifiers, cookies etc. get somehow passed
&gt; on in the URL bar over redirects for now. Dealing with tracking
&gt; information in URLs is a tricky topic of its own and somewhat orthogonal
&gt; to redirects.
&gt; 
&gt; 2) For Tor Browser I think I am currently most interested in the "Expand
&gt; First Party Double-Keying Scheme to Redirected Content" scenario, thus
&gt; I'd like to look a bit closer at it. Looking over the Cons I don't see
&gt; OAuth and similar authentication mechanisms being broken, is that
&gt; correct? If so, great, and certainly a plus.
&gt; 
&gt; I think I don't understand the scenario in Con 1, that is how a user can
&gt; effectively end up with two simultaneous identities depending on whether
&gt; they came from https://gogle.com/ or https://google.com/. For instance,
&gt; if I enter https://gogle.com, why should I end up with a different
&gt; identity than coming from https://google.com? https://gogle.com is not
&gt; even settings cookies, but even if it were the final response from
&gt; google.com is a 200 with a Set-Cookie header (among other things). That
&gt; cookie would I sent back regardless once I decide I want to log in. The
&gt; same happens in the scenario where I already had been logged into Google
&gt; before I think.
&gt; 
&gt; 3) I am not sure about Con 2 yet, but another thing we can keep in mind
&gt; is that we have the New Identity feature against powerful
&gt; trackers/longterm tracking. If we don't find a solution to Con 2 I think
&gt; pointing to that defense as a stop gap is not the worst idea. At any
&gt; rate I feel not having a solution right now to that one should not stop
&gt; us from experimenting.
&gt; 
&gt; Georg
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEvnyRTMkiztnZPSO33kc2A2PzSywFAlxCPj4ACgkQ3kc2A2Pz
SyynEg//SLvP7XqLCj+PjI5Q3Bm0YdiG9m+AtGxw7/JebveL06JeqeyXR61r4dJw
unXRdhAAhKAbQbUe87LORJcNwUvIyRwfBrL1h/Zmpff/k4CeSvvpkKUReuaWfJUG
wQGsfzr4rB4NWA2Y7GLFBRqbH1aw/pPC3EhCNFaXzUIdBTVNkFC/Q/WuUQPdJLn7
TZy4MKe/Wkn1RopS5hOoteb7/Ssz17XCNBhAkPSsYPbfCuRgL4rD++HVMqa4w0LD
WfsIkkpQg4II8iOTavStgJH0s01jLHrKMzMZzVLVD3r+AcKwk9VQI9GtzEIRVnUV
RCpnaSYT4BygPuAjaKQ4MDM/Wr6IhOj4aCYntMt7IFpeE6OSQTIbD76b+SxSx57n
gvxa96FKlPnxVLmiW2ttfXMT+OTPuG+gVitfdof8sl329AeMsAKE2QWpXhKA8Gjt
YhfnxK4E+hXYTM3ua8VuVDpUZh3Sb4Ora/faqaRh//28koGFCXMszblWY2MCYPih
NvYpVgVpOE37mU+eBeZ+LsskEavaqnFCMa7HXFxoPHabJO4OGFdo8Ccik5PZfvNW
98NbdrEQS2CFnD4gAgjuNNFCSjICL1DPx0p2Ual7x6yG5hNdP1eQUdGkMaEQSfQg
4hqg6+xJa3tRhX4piJ3OXgqNPb05ntNxMveWgICux7kFCASpeQs=
=AKFt
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190117194005</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-01-17 19:40:05-0400</timestampReceived><subject>Re: [tor-dev] anti-censorship weekly checkin</subject><body>

Hi!

A reminder that this meeting is today in less than 20 minutes.

cheers,
gaba

El 1/11/19 a las 11:01 AM, Gaba escribió:
&gt; Hi!!
&gt; 
&gt; 
&gt; We are going to start doing weekly meetings about anti-censorship work
&gt; at Tor. We still do not have a team specifically to work on
&gt; anti-censorship (soon we will have it) BUT we have different teams
&gt; working on snowflake, gettor and soon bridgedb as well Kat writing a
&gt; report on what works needs to be done.
&gt; 
&gt; If you are doing any work related to this and/or are interested in this
&gt; work please join. Weekly meetings will be every Thursday 8pm UTC on
&gt; #tor-meeting at OFTC (channel is logged while meetings are in progress).
&gt; 
&gt; 
&gt; Next meeting Thursday January 17th 8pm UTC on #tor-meeting at OFTC
&gt; 
&gt; 
&gt; cheers,
&gt; gaba
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190118011314</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-18 01:13:14-0400</timestampReceived><subject>Re: [tor-dev] Reviewer for Bug #27491: Prefer IPv4 or IPv6 based on the number of failures</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Neel,

&gt; On 17 Jan 2019, at 09:14, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; I noticed the assigned reviewer for my bug/patch #27491 \
&gt; (https://trac.torproject.org/projects/tor/ticket/27491), mikeperry, has not yet \
&gt; reviewed my bug since he was assigned to my bug/patch back in December. I \
&gt; understand that not able to review bugs during the holiday season (for obvious \
&gt; reasons), but would someone, either mikeperry or another Tor developer be able to \
&gt; review this?

Thank you for submitting this patch.

We haven't have time to do all our reviews from December and January, so we
have been focusing on reviews for the 0.4.0 code freeze. We also have an
in-person meeting at the end of January, so we're all doing pre-meeting work.

I've added a note to our next team meeting to talk about our review backlog.

I did a quick review on your patch. It adds detailed information to the client state
file, which impacts user privacy. The code will also cause clients to stop using
IPv4 or IPv6 for a week, which is far too long for mobile and laptop clients.

So we need to think about the design more carefully.

We have a proposals process for design changes to Tor. Would you mind writing
a proposal and sending it to this list?

Thanks

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;Hi Neel,&lt;/div&gt;&lt;div \
id="AppleMailSignature" dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 17 Jan 2019, at 09:14, \
Neel Chauhan &lt;&lt;a href="mailto:neel@neelc.org"&gt;neel@neelc.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div \
data-html-editor-font-wrapper="true" style="font-family: arial, sans-serif; \
font-size: 13px;"&gt;&lt;br&gt;I noticed the assigned reviewer for my bug/patch #27491 (&lt;a \
href="https://trac.torproject.org/projects/tor/ticket/27491"&gt;https://trac.torproject.org/projects/tor/ticket/27491&lt;/a&gt;), \
mikeperry, has not yet reviewed my bug since he was assigned to my bug/patch back in \
December. I understand that not able to review bugs during the holiday season (for \
obvious reasons), but would someone, either mikeperry or another Tor developer be \
able to review this?&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thank you for \
submitting this patch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We haven't have time to do all our \
reviews from December and January, so we&lt;/div&gt;&lt;div&gt;have been focusing on reviews for \
the 0.4.0 code freeze. We also have an&lt;/div&gt;&lt;div&gt;in-person meeting at the end of \
January, so we're all doing pre-meeting work.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I've added a \
note to our next team meeting to talk about our review \
backlog.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I did a quick review on your patch. It adds \
detailed information to the client state&lt;/div&gt;&lt;div&gt;file, which impacts user privacy. \
The code will also cause clients to stop using&lt;/div&gt;&lt;div&gt;IPv4 or IPv6 for a week, \
which is far too long for mobile and laptop clients.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So we \
need to think about the design more carefully.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;We have a \
proposals process for design changes to Tor. Would you mind writing&lt;/div&gt;&lt;div&gt;a \
proposal and sending it to this \
list?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Thanks&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190118211900</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-01-18 21:19:00-0400</timestampReceived><subject>Re: [tor-dev] #3600 tech doc</subject><body>

On Fri, 18 Jan 2019 at 21:00, Richard Pospesel &lt;richard@torproject.org&gt; wrote:
&gt; The Double-Keyed Redirect Cookies + 'Domain Promotion' tries to fix this
&gt; multiple/hidden session problem by promoting the cookies of double-keyed
&gt; websites to first-party status in the case where the originating domain is
&gt; positively identified as solely a redirect. In the gogle.com -&gt; google.com
&gt; scenario, if Tor Browser could identify that gogle.com is used solely to
&gt; redirect to google.com, then we could take the double-keyed gogle.com|google.com
&gt; cookies and move them into the google.com bucket and eliminate the double
&gt; session.

How would we detect this?

Let's say hypothetically (I haven't checked) gogle.com does not set
any cookies; and just sends a 301 permanent redirect.  We then perform
the upgrade from gogle.com|google.com to google.com

If we turn it on its head: google.com decides to redirect you to
tracker342451345.google.com with a 301 (and setting no cookies.) We
upgrade google.com|tracker342451345.google.com to
tracker342451345.google.com and do so for as long as your session is
open.
Does this enabling a tracking vector? I don't think so; couldn't
identify one - but it feels like there might be something here...

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190120095850</emailId><senderName>Yawning Angel</senderName><senderEmail>yawning@schwanenlied.me</senderEmail><timestampReceived>2019-01-20 09:58:50-0400</timestampReceived><subject>[tor-dev] Release: obfs4proxy-0.0.8</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hello all,

I just tagged obfs4proxy-0.0.8.  This includes a few minor bugfixes in
an official tagged release, and changes the primary upstream repo to one
hosted on gitlab.

Moving forward issues and patch merge requests should be filed on the
gitlab issue tracker.  While I will attempt to examine other existing
locations for such things, response may (will) be delayed.

Tarball/Signature:
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.8.tar.xz
https://people.torproject.org/~yawning/releases/obfs4proxy/obfs4proxy-0.0.8.tar.xz.asc

Changes in version 0.0.8 - 2019-01-20:
 - Bug 24793: Send the correct authorization HTTP header for basic auth.
 - (meek_lite) Explicitly set Content-Length to zero when there is no
   data to send.
 - Added optional support for building as a Go 1.11 module.  Patch by
   mvdan.
 - Change the canonical upstream repo location to gitlab.

Regards,

-- 
Yawning Angel


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190122033230</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-01-22 03:32:30-0400</timestampReceived><subject>Re: [tor-dev] Modifying Path Selection based on geography</subject><body>

[Attachment #2 (multipart/signed)]


Hi,

&gt; On 19 Jan 2019, at 21:21, sarpedon montecarlo &lt;sarpedon000@gmail.com&gt; wrote:
&gt; 
&gt; the event handlers i register,  streams and circuits events, freeze and stops \
&gt; working. this is not happening from the beginning but when some streams show up, it \
&gt; seems like some stack somewhere that i am not aware of, stock at processing the \
&gt; queue.

It's hard to fix bugs like this, unless we can see them on our machines.

Can you please tell us
* what code you are using
* what tor configuration (torrc) you are using
* the commands you use to launch your code and tor
* the notice-level log messages that tor logs before it stops working

Please copy exactly what you're doing into a pastebin like https://paste.debian.net

&gt; Second: if i want to build the project, is there any up to date approach?
&gt; i used the dependency libraries provided at jenkins, the problem is that using \
&gt; nmake goes wrong, and the last update of the build-manual in the code belongs to \
&gt; 2014.

If you're on Linux, macOS, or BSD, these instructions should work:
https://gitweb.torproject.org/tor.git/tree/INSTALL
Then:
https://www.torproject.org/docs/tor-doc-unix

If you're on Windows, just let us know. Some other developers on this list are more
familiar with Windows, and they can point you to the latest instructions for Windows.

Again, if you're having trouble, please copy exactly what you're doing, and the \
output you see, into a pastebin.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAlxGjs4ACgkQEP6qDnB1
ZyovMg//XrL4XwBWHDbNCZTRs9YKnven7rkFOBAPeuTivQftb75TAHLsc2D81IYl
hg5qiT4qMbxIFrfCd1Yp1auvf5l/4KxO2kUb+Akklda8/hHp32mlO+JnFlYGmAl1
dRHahiuR/fplqmuAQWcj1kmuKy20uNnE3oNxEejP1QAkTvDfrYqASuFHWC7PgUvN
bDFUZJF161rPCUXCcytuNhSL5AaZ0kmTw56UllOIPb29AiJLhoqSal6/YuceAxbw
bb2POBp9ZUU+ArOL2gem32RzSaB0KKp3Yp1lpU5Y2IaxQLWfPqoGEknwIIVh1wNQ
9V8KK3fZWgb/ersPtrTtMf2Fr3l7W2SF3fdEnVgVgeUIF9pY9XomFEkdnbncNhpx
VjJm3TYwux97vbSyblDFPGsM40mSLrJAZh5+g7OWr7lVZAGoz4/8MBvgZXmLMcHE
zrwiCotGC++lkTPgIRmtKukwm5aT+mLBEQDK6oPVVN50jYr5IKBxcjx6x4bzTXi1
uGBqc9x2sIN8TwyCsgkH6T+4rxtfqy/i7qwtiKTan0I279bX9Tn+LGADl9Nc9MQf
ky+u/UEI2HS4ZQDhuKIBEEbUwmSey5IyryyXohjW2S6uVG47jdIFls0XsKuM2Epx
y/DpVdfH9oGmqel2kEF+HY6Qgi6RawN1FQMup1PlgYWs4/2XBGk=
=NZ0E
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190124074835</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-24 07:48:35-0400</timestampReceived><subject>Re: [tor-dev] RFC: Using `utls` in meek_lite.</subject><body>

On Thu, Jan 24, 2019 at 07:44:48AM +0000, Yawning Angel wrote:
&gt; On 1/24/19 7:38 AM, David Fifield wrote:
&gt; &gt; I see, you're right. It has to do with the reuse of the initConn.
&gt; 
&gt; A proper "general" solution that solves that problem and the ALPN issue
&gt; is to have a `initConn` and `http.RoundTripper` instance per destination
&gt; host, and some additional locking.
&gt; 
&gt; With more implementation cleverness this could be brought down to two
&gt; `http.RoundTripper` instances, and a host -&gt; pointer + net.Conn map, and
&gt; some locking.
&gt; 
&gt; But for something like meek_lite where the number of destination hosts
&gt; is not large, the existing wrapper works fine and I don't see much
&gt; reason to over engineer it.

I don't disagree, it's fine for this use case.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190124204853</emailId><senderName>Gaba</senderName><senderEmail>gaba@torproject.org</senderEmail><timestampReceived>2019-01-24 20:48:53-0400</timestampReceived><subject>[tor-dev] anti-censorship weekly meeting notes</subject><body>

Hi!

We had the weekly meeting today!  Our next meeting will be in two weeks
on February 7th 20:00 UTC


You can find the logs here:

http://meetbot.debian.net/tor-meeting/2019/tor-meeting.2019-01-24-20.04.html

And the contents of the pad:


ANTI-CENSORSHIP work meeting pad
--------------------------------

Next meeting: Thursday February 7th 20:00 UTC

Weekly meetings every Thursday 20:00 UTC on #tor-meeting at OFTC
(channel is logged while meetings are in progress).

== Goal of this meeting ==

Weekly checkin about the status of anti-censorship work at Tor.
Coordinate collaboration between people/teams on anti-censorship.

== Links to Useful documents ==

Anti-censorship Roadmap:
https://storm.torproject.org/shared/KXkqlNP8ouNks_ey5khZKUSbNj9ZoidXmEp80ODDMsN

Snowflake Roadmap:
https://storm.torproject.org/shared/OdNtwrtRrqklh76l4PfcngBbQFDbjv_jRroj0WeSY0B
Gettor Roadmap:
https://storm.torproject.org/shared/rhsSl_3Pb253HPqoCdFiAdmXQ57NUG_BLvBCxqF_Kqp
Bridgedb Roadmap:
https://storm.torproject.org/shared/O4XpgyW_q6CAtPPO_nd_Qc16Up-jXqdJLG8gXZYX_e2

Roger's thoughts on anti-censorship's priorities:
https://storm.torproject.org/shared/kU83M2pQehsnQZPzR_mwmYslAijqKgYNOEak57TSLAt
Komlo's thoughts on anti-censorship's plan:
https://pad.riseup.net/p/CensorshipTeam-Planning-keep
Dfcr's thoughts on anti-censorship's priorities (Snowflake only):
https://share.riseup.net/#sU0_Jv7OXz8dDK5DHqDVAw

-------------------------------
----   24th January 2019   ----
-------------------------------

== Announcements ==

    Snowflake extensions: needs developer, let's check who/how in the
browser team can do it (antonela, pili, gabA)  &lt;-- still working on this

    Gettor: meet outside weekly anti-censorship meeting to define scope
(antonela, gaba, hiro) &lt;-- still working on this


== Discussion ==


    Snowflake



== Actions ==


== Updates ==

FORMAT!

Name:
    Last week:
        - What you worked on last week a
    This week:
        - What you are planning to work on next week (related to
anti-censorship work).
    Help with:

         - Something you may need help with.


Gaba:

    This week (01/24):

    preparation for roadmap exercise with network team



ahf:
    Last week:

    - Documenting current Snowflake architecture and identify problems
related to scalability and usability (both for developers and users).
(#28848)

    - Documenting basic WebRTC usage to allow other developers to
quickly join in on it. (#28048) [&lt;-- wrong ticket number? 28048 is
"Metrics: Allow to search for relays per continent"]

    - Identifying bug where Snowflake proxy becomes unresponsive in a
smaller environment. (possibly #25429?)

    This week (01/24):

    - Was out sick friday/monday, didn't do much.

    - Preparing for network team meeting in brussels where I hope to
help the new hire for the anti-censorship team with things related to this:

    - A talk about Snowflake that will hopefully make everyone be able
to look at the code quickly.

    - Email to Kat about some scalability concerns that I think is worth
having in mind about Snowflake: Numbers of bridges, etc.


kat5:
    Working on:
      - report 2
      - private bridge guide for NGOs (hold off until we figure out a
strategy for making set-up easy)


anto:

    Working on:

    - Snowflake Web Extension UI -
https://trac.torproject.org/projects/tor/ticket/23888

    - Put together a PRD for Gettor, needs more info and review -
https://docs.google.com/document/d/18R_tUnqfFkn7d93w0pEbBOLxB62KAWHbUGd5MPKLB8w/edit?usp=sharing

    Help with

    - snowflake extension: in need of a developer


pili (offline):
    working on:
        - gettor

            - agreed on next steps to deploy refactored code with ilv
and hiro

    - still need to define project scope with gaba, antonela and hiro

    help with:
        - Browser team can't commit anyone to work on snowflake web
extension - can we not just:
            a) wait for integration into cupcake (see
https://github.com/glamrock/cupcake/issues/24) - we can help them with
this also
            b) wait for anti-censorship developer - we need to also
think about who is going to maintain this webextension

dcf:
    Last week:
        - minor UX improvement for Snowflake proxy (#25722) - antonela
has more ambitious changes in #27385
        - monkeying with uTLS in meek-client (#29077)
        - meek and snowflake sysadmin
    This week:
        - more uTLS in meek-client, restore proxy support
        - more sysadmin (#29171, #29172)

Samdney:
    Working on:
     - Will also have a look at the WebExtension ticket #23888 :)
     - Looking for something where they can help!!! - If you have
anything in the direction of "research" or "investigation" in something,
then I'm your guy! :)
     (- I'm working on a research project about censor &lt;-&gt; classical
attacker in game theory. That's maybe later, when I have results :),
interesting for UX/dev stuff.)

_hc/eighthave:
    uniqx and I have been working on ways to integrate PTs into apps
easily. we have a working client/server automation setup based in Python.
    We also were trying to do a more generic proxy,
https://lists.torproject.org/pipermail/tor-dev/2019-January/013637.html

     n8fr8 is working on getting obfs4 into our Android Pluggable
Transports library. he's having trouble getting it to connect to our
server automation

     In Feb, I'll be working on figuring out a good URL scheme for
bridge configuraton - #15035

     OTF accepted our Concept Note with Stephen Farrell for working on
ESNI and ensuring circumvention is included.  We are submitting the
proposal now, chances look good!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190124231031</emailId><senderName>David Fifield</senderName><senderEmail>david@bamsoftware.com</senderEmail><timestampReceived>2019-01-24 23:10:31-0400</timestampReceived><subject>Re: [tor-dev] using obfs4 to tunnel to a SOCKS proxy server</subject><body>

On Fri, Jan 25, 2019 at 12:03:19AM +0100, Hans-Christoph Steiner wrote:
&gt; Is this the same with other PT 1.1 daemons?  Or would Snowflake be
&gt; different?  Seems like with obfs4, the load balancer using SNI would
&gt; probably be the easiest for the wikipedia use case.

It will be the same with any other transport. They all have a uniform
interface through TOR_PT_ORPORT or TOR_PT_EXTENDED_SERVER_PORT.

Moat uses something basically similar with meek-server, feeding the
ORport into the local BridgeDB web server.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190127035200</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-01-27 03:52:00-0400</timestampReceived><subject>[tor-dev] Building meek-server with Go 1.11.5</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Attached is a script for building meek-server. I used this for
completing #29171. The newest version of Go is only available in Sid and
Buster[0], so this script creates a Buster environment and installs the
dependencies.

The script assumes debootstrap and sudo are installed (and you have
necessary privilege). As of today, a Debian Buster system should create
a reproducible binary with a SHA-256 digest
6e242798f861308083e54bc0ca3989a03b0818475e9b6df4589ced10c7e3aadc
(confirmed over multi-path builds).

This is simply an FYI, in case anyone else want so to use it.

- Matt

[0] https://security-tracker.debian.org/tracker/source-package/golang-1.11


#!/bin/sh

set -e
set -x

if [ -z "${ROOTDIR}" ]; then
    ROOTDIR=meekserver_chroot
fi

if [ -z "${VIA_TOR}" ]; then
    VIA_TOR=0
fi

if [ -z "${PROXY}" ]; then
    PROXY="127.0.0.1:9050"
fi

if [ -z "${RELEASE}" ]; then
    RELEASE="buster"
fi

sudo debootstrap --verbose --variant=buildd "${RELEASE}" ${ROOTDIR}
sudo mount -t proc proc ${ROOTDIR}/proc/
sudo mount -t tmpfs dev ${ROOTDIR}/dev
sudo mount -t sysfs sys ${ROOTDIR}/sys/
sudo mkdir ${ROOTDIR}/dev/pts
sudo mkdir ${ROOTDIR}/dev/shm
sudo touch ${ROOTDIR}/dev/null
sudo mount -t tmpfs shm ${ROOTDIR}/dev/shm
sudo mount -t devpts devpts ${ROOTDIR}/dev/pts
sudo mount --bind /dev/null ${ROOTDIR}/dev/null

if [ "${VIA_TOR}" -ne "0" ]; then
    apt-get download apt-transport-tor/"${RELEASE}"
    sudo mv apt-transport-tor_*.deb ${ROOTDIR}/
    echo "Acquire::tor::proxy \"socks5h://${PROXY}\";" | sudo tee \
${ROOTDIR}/etc/apt/apt.conf.d/01tor  echo "deb  \
tor+http://vwakviie2ienjx6t.onion/debian          ${RELEASE}            main" | sudo \
tee ${ROOTDIR}/etc/apt/sources.list fi

cat &gt; setup_chroot &lt;&lt;EOF
#!/bin/sh
set -e

if [ "${VIA_TOR}" -ne "0" ]; then
    dpkg -i apt-transport-tor_*.deb
fi

apt-get update

apt-get install -y golang-go

apt-get install -y git-core

apt-get install -y golang-golang-x-crypto-dev

useradd -m meek_builder

if [ "${VIA_TOR}" -ne "0" ]; then
    su -l -c 'git config --global http.proxy \
"socks5h://meek_${RELEASE}_git:1234@${PROXY}"' meek_builder fi

su -l -c 'git clone https://git.torproject.org/pluggable-transports/meek.git' \
meek_builder su -l -c 'GOPATH="\${HOME}/go" go get \
git.torproject.org/pluggable-transports/goptlib.git' meek_builder echo 'export \
GOPATH="/usr/share/gocode/:\${HOME}/go"' &gt;&gt; /home/meek_builder/.profile EOF

chmod 700 setup_chroot
sudo mv setup_chroot ${ROOTDIR}/
sudo chroot ${ROOTDIR}/ /setup_chroot

sudo umount ${ROOTDIR}/dev/null ${ROOTDIR}/dev/pts ${ROOTDIR}/dev/shm
sudo umount ${ROOTDIR}/sys/ ${ROOTDIR}/dev ${ROOTDIR}/proc/

echo Building...
################ BUILD ##################
#sudo unshare -n chroot ${ROOTDIR}/ su -c 'sh -c "cd ${HOME}/meek/meek-server/ &amp;&amp; go \
build"' meek_builder sudo unshare -n \
  chroot ${ROOTDIR}/ \
    su -l -c \
      sh -c 'cd ${HOME}/meek/meek-server/ &amp;&amp; GOPATH="/usr/share/gocode/:${HOME}/go" \
go build' \  meek_builder

echo "6e242798f861308083e54bc0ca3989a03b0818475e9b6df4589ced10c7e3aadc  \
meekserver_chroot/home/meek_builder/meek/meek-server/meek-server" | sha256sum -c \
#########################################


["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190129195439</emailId><senderName>"Neel Chauhan"</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-01-29 19:54:39-0400</timestampReceived><subject>Re: [tor-dev] New Proposal: Preferring IPv4 or IPv6 based on IP Version Failure Count</subject><body>

Hi Nick,

Thank you so much!

Sorry if my proposal says "Draft". I believe my proposal is complete. Would it be \
possible to mark Prop299 as "Open"?

Best,

Neel

===

https://www.neelc.org/

January 28, 2019 5:32 AM, "Nick Mathewson" &lt;nickm@alum.mit.edu&gt; wrote:

&gt; On Fri, Jan 25, 2019 at 10:54 PM Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; &gt; Hi tor-dev@ mailing list,
&gt; &gt; 
&gt; &gt; I have been working on Bug #27491 \
&gt; &gt; (https://trac.torproject.org/projects/tor/ticket/27491) and have been asked to \
&gt; &gt; write a proposal. My proposal is attached to this email as a text file. 
&gt; &gt; I would really appreciate your comments on this proposal (is it good, bad, any \
&gt; &gt; problems with it?).
&gt; 
&gt; For tracking, I have added this as proposal 299! It looks neat to me.
&gt; 
&gt; --
&gt; Nick
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190926065724</emailId><senderName>vignesh kannan</senderName><senderEmail>vigneshvishnu1925@gmail.com</senderEmail><timestampReceived>2019-09-26 06:57:24-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Okay

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Okay  &lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190926071248</emailId><senderName>vignesh kannan</senderName><senderEmail>vigneshvishnu1925@gmail.com</senderEmail><timestampReceived>2019-09-26 07:12:48-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


Please sent me a video that how to get dark web please

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Please sent me a video that how to get dark web please  &lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190926072135</emailId><senderName>vignesh kannan</senderName><senderEmail>vigneshvishnu1925@gmail.com</senderEmail><timestampReceived>2019-09-26 07:21:35-0400</timestampReceived><subject>[tor-dev] =?utf-8?q?=28no_subject=29?=</subject><body>

[Attachment #2 (multipart/alternative)]


What should I do

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;What should I do&lt;div dir="auto"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190704183912</emailId><senderName>juanjo</senderName><senderEmail>juanjo@avanix.es</senderEmail><timestampReceived>2019-07-04 18:39:12-0400</timestampReceived><subject>[tor-dev] Fwd: Re:  Onion Service - Intropoint DoS Defenses</subject><body>

[Attachment #2 (multipart/alternative)]


-------- Forwarded Message --------
Subject: 	Re: [tor-dev] Onion Service - Intropoint DoS Defenses
Date: 	Thu, 4 Jul 2019 20:38:48 +0200
From: 	juanjo &lt;juanjo@avanix.es&gt;
To: 	David Goulet &lt;dgoulet@torproject.org&gt;



These experiments and final note confirm what I thought about this rate 
limiting feature from the start: it is missing important parts. Ok, you 
can protect the network a little and the HS, but the general 
availability is not affected so it actually does not help for that.

I wanna make a proposal including many things at the same time, but I 
don't have much time to follow the guidelines to make a official 
proposal. Maybe in some weeks?

Again, I repeat: things that should be done now:

-Authenticated rend signature. This would help a lot I think.

-Mid-term: PoW for the client when reaching the 305prop limit instead of 
denying access? IDK, all always configurable.

-Deprecate clients or allow the Hidden Service to configure the IP to 
allow access for old version clients (not supporting new antiDoS 
features) or not. If we allow old version without protections, all 
security measures are useless.

And just a new idea: what about make the rotation of IP dynamic based on 
this prop305 values? + time based rotation:
One of the goal for rotation was defending against correlation attacks: 
if we set a lower limit we have a potential DoS (right now), if we set 
it high we have a potential correlation attack, bigger surface.
What about we join time based rotation (ex. 24 hours) + or limit reached 
based on the prop305 values.



On 3/7/19 20:37, David Goulet wrote:
&gt; On 30 May (09:49:26), David Goulet wrote:
&gt;&gt; Greetings!
&gt; [snip]
&gt;
&gt; Hi everyone,
&gt;
&gt; I'm writing here to update on where we are about the introduction rate
&gt; limiting at the intro point feature.
&gt;
&gt; The branch of #15516 (https://trac.torproject.org/15516) is ready to be merged
&gt; upstream which implements a simple rate/burst combo for controlling the amount
&gt; of INTRODUCE2 cells that are relayed to the service.
&gt;
&gt; As previously detailed in this thread, the default values are a rate of 25
&gt; introduction per second and a burst of 200 per second. These values can be
&gt; controlled by consensus parameters meaning they can be changed network wide.
&gt;
&gt; We've first asked big service operators, I'm not going to detail the values
&gt; they provided us in private, but those defaults are quite large enough to
&gt; sustain heavy traffic from what we can tell from what they gave us.
&gt;
&gt; The second thing we did is do experimental testing to see how CPU usage and
&gt; availability is affected. We've tested this with 3 _fast_ introduction points
&gt; and then 3 rate limited introduction points.
&gt;
&gt; The good news is that once the attack stops, the rain of introduction requests
&gt; to the service stops very quickly.
&gt;
&gt; With the default rate/burst values, on a Intel(R) Xeon(R) CPU E5-2650 v4 @
&gt; 2.20GHz (8 cores), the tor service CPU doesn't go above ~60% (on one single
&gt; core). And almost drops to 0 as soon as the attack ends.
&gt;
&gt; The bad news is that availability is _not_ improved. One of the big reasons
&gt; for that is because the rate limit defenses, once engaged at the intro point,
&gt; will send back a NACK to the client. A vanilla tor client will stop using that
&gt; introduction point away for 120 seconds if it gets 3 NACKs from it. This leads
&gt; to tor quickly giving up on trying to connect and thus telling the client that
&gt; connection is impossible to the .onion.
&gt;
&gt; We've hacked a tor client to play along and stop ignoring the NACKs to see how
&gt; much time it would take to reach it. On average, a client would roughly need
&gt; around 70 seconds with more than 40 NACKs on average.
&gt;
&gt; However, it varied a _lot_ during our experiments with many outliers from 8
&gt; seconds with 1 NACK up to 160 seconds with 88 NACKs. (For this, the
&gt; SocksTimeout had to be bumped quite a bit).
&gt;
&gt; There is an avenue of improvement here to make the intro point sends a
&gt; specific NACK reason (like "Under heavy load" or ...) which would make the
&gt; client consider it like "I should retry soon-ish" and thus making the client
&gt; possibly able to connect after many seconds (or until the SocksTimeout).
&gt;
&gt; Another bad news there! We can't do that anytime soon because of this bug that
&gt; basically crash clients if an unknown status code is sent back (that is a new
&gt; NACK value):https://trac.torproject.org/30454. So yeah... quite unfortunate
&gt; there but also a superb reason for everyone out there to upgrade :).
&gt;
&gt; One good news is that it seems that having fast intro points instead of slow
&gt; IPs doesn't change much on the overall load on the service so this for now,
&gt; our experiment, shows it doesn't matter.
&gt;
&gt; Overall, this rate limit feature does two things:
&gt;
&gt; 1. Reduce the overall network load.
&gt;
&gt;     Soaking the introduction requests at the intro point helps avoid the
&gt;     service creating pointless rendezvous circuits which makes it "less" of an
&gt;     amplification attack.
&gt;
&gt; 2. Keep the service usable.
&gt;
&gt;     The tor daemon doesn't go in massive CPU load and thus can be actually used
&gt;     properly during the attack.
&gt;
&gt; The problem with (2) is the availability part where for a legit client to
&gt; reach the service, it is close to impossible for a vanilla tor without lots of
&gt; luck.  However, if let say the tor daemon would be configured with 2 .onion
&gt; where one is public and the other one is private with client authorization,
&gt; then the second .onion would be totally usable due to the tor daemon not being
&gt; CPU overloaded.
&gt;
&gt; As a third thing we did about this. In order to make this feature a bit more
&gt; "malleable", we are working onhttps://trac.torproject.org/30924  which is
&gt; proposal 305.
&gt;
&gt; In short, torrc options are added so an operator can change the rate/burst
&gt; that the intro points will use. We can do that using the ESTABLISH_INTRO cell
&gt; that will have an extension to define the DoS defensavailability
&gt; e parameters (proposal
&gt; 305).
&gt;
&gt; That way, a service operator can disable this feature, or turn the knobs on
&gt; the rate/burst in order to basically adjust the defenses.
&gt;
&gt; At this point in time, we don't have a good grasp on what happens in terms of
&gt; CPU if the rate or the burst is bumped up or even how availability is
&gt; affected. During our experimentation, we did observed a "sort of" linear
&gt; progression between CPU usage and rate. But we barely touched the surface
&gt; since it was changed from 25 to 50 to 75 and that is it.
&gt;
&gt; We would require much more experimentation which is something we want to avoid
&gt; as much as possible on the real network.
&gt;
&gt; Finally, many more changes are cooking up. One in particular is
&gt; https://trac.torproject.org/projects/tor/ticket/26294  that will make tor to
&gt; only rotate its intro points when the number of introduction requests is
&gt; between 150k to 300k (random value) which currently is between 16k and 32k.
&gt; See the ticket for the benefits here which mostly helps with (1).
&gt;
&gt; There has been much talk about a client PoW (see the proposal 305 thread on
&gt; this list) which in theory would help out with service availability.
&gt;
&gt; We will also soon merge upstream this tickethttps://trac.torproject.org/24962
&gt; which goes one step further at denying single-hop connections to the
&gt; HSDir/Intro in order to try as much as possible to shutdown the Tor2web
&gt; connections (or any attacker that speeds things up on their side by single
&gt; hoping).
&gt;
&gt; We are making progress here... This is really a non trivial problem and
&gt; solution for service availability are not that simple. Our priority is to
&gt; protect the network as much as possible and then move to possible solutions
&gt; for availability.
&gt;
&gt; I'll stop for now. Huge thanks to everyone who provided service logs, ideas,
&gt; code review and future testers :).
&gt;
&gt; Cheers!
&gt; David
&gt;
&gt;
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body bgcolor="#FFFFFF" text="#000000"&gt;
    &lt;p&gt;&lt;br&gt;
    &lt;/p&gt;
    &lt;div class="moz-forward-container"&gt;&lt;br&gt;
      &lt;br&gt;
      -------- Forwarded Message --------
      &lt;table class="moz-email-headers-table" cellspacing="0"
        cellpadding="0" border="0"&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;th nowrap="nowrap" align="RIGHT" valign="BASELINE"&gt;Subject:
            &lt;/th&gt;
            &lt;td&gt;Re: [tor-dev] Onion Service - Intropoint DoS Defenses&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th nowrap="nowrap" align="RIGHT" valign="BASELINE"&gt;Date: &lt;/th&gt;
            &lt;td&gt;Thu, 4 Jul 2019 20:38:48 +0200&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th nowrap="nowrap" align="RIGHT" valign="BASELINE"&gt;From: &lt;/th&gt;
            &lt;td&gt;juanjo &lt;a class="moz-txt-link-rfc2396E" \
href="mailto:juanjo@avanix.es"&gt;&lt;juanjo@avanix.es&gt;&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;
          &lt;tr&gt;
            &lt;th nowrap="nowrap" align="RIGHT" valign="BASELINE"&gt;To: &lt;/th&gt;
            &lt;td&gt;David Goulet &lt;a class="moz-txt-link-rfc2396E" \
href="mailto:dgoulet@torproject.org"&gt;&lt;dgoulet@torproject.org&gt;&lt;/a&gt;&lt;/td&gt;  &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
      &lt;br&gt;
      &lt;br&gt;
      &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
      &lt;p&gt;These experiments and final note confirm what I thought about
        this rate limiting feature from the start: it is missing
        important parts. Ok, you can protect the network a little and
        the HS, but the general availability is not affected so it
        actually does not help for that. &lt;br&gt;
      &lt;/p&gt;
      &lt;p&gt;I wanna make a proposal including many things at the same time,
        but I don't have much time to follow the guidelines to make a
        official proposal. Maybe in some weeks?&lt;/p&gt;
      &lt;p&gt;Again, I repeat: things that should be done now:&lt;/p&gt;
      &lt;p&gt;-Authenticated rend signature. This would help a lot I think.&lt;br&gt;
      &lt;/p&gt;
      &lt;p&gt;-Mid-term: PoW for the client when reaching the 305prop limit
        instead of denying access? IDK, all always configurable.&lt;/p&gt;
      &lt;p&gt;-Deprecate clients or allow the Hidden Service to configure the
        IP to allow access for old version clients (not supporting new
        antiDoS features) or not. If we allow old version without
        protections, all security measures are useless.&lt;br&gt;
      &lt;/p&gt;
      &lt;p&gt;And just a new idea: what about make the rotation of IP dynamic
        based on this prop305 values? + time based rotation:&lt;br&gt;
        One of the goal for rotation was defending against correlation
        attacks: if we set a lower limit we have a potential DoS (right
        now), if we set it high we have a potential correlation attack,
        bigger surface. &lt;br&gt;
        What about we join time based rotation (ex. 24 hours) + or limit
        reached based on the prop305 values.&lt;/p&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;/p&gt;
      &lt;p&gt;&lt;br&gt;
      &lt;/p&gt;
      &lt;div class="moz-cite-prefix"&gt;On 3/7/19 20:37, David Goulet wrote:&lt;br&gt;
      &lt;/div&gt;
      &lt;blockquote type="cite" cite="mid:20190703183734.GC12426@raoul"&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;On 30 May (09:49:26), David Goulet wrote:
&lt;/pre&gt;
        &lt;blockquote type="cite"&gt;
          &lt;pre class="moz-quote-pre" wrap=""&gt;Greetings!
&lt;/pre&gt;
        &lt;/blockquote&gt;
        &lt;pre class="moz-quote-pre" wrap=""&gt;[snip]

Hi everyone,

I'm writing here to update on where we are about the introduction rate
limiting at the intro point feature.

The branch of #15516 (&lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/15516" \
moz-do-not-send="true"&gt;https://trac.torproject.org/15516&lt;/a&gt;) is ready to be merged \
upstream which implements a simple rate/burst combo for controlling the amount of \
INTRODUCE2 cells that are relayed to the service.

As previously detailed in this thread, the default values are a rate of 25
introduction per second and a burst of 200 per second. These values can be
controlled by consensus parameters meaning they can be changed network wide.

We've first asked big service operators, I'm not going to detail the values
they provided us in private, but those defaults are quite large enough to
sustain heavy traffic from what we can tell from what they gave us.

The second thing we did is do experimental testing to see how CPU usage and
availability is affected. We've tested this with 3 _fast_ introduction points
and then 3 rate limited introduction points.

The good news is that once the attack stops, the rain of introduction requests
to the service stops very quickly.

With the default rate/burst values, on a Intel(R) Xeon(R) CPU E5-2650 v4 @
2.20GHz (8 cores), the tor service CPU doesn't go above ~60% (on one single
core). And almost drops to 0 as soon as the attack ends.

The bad news is that availability is _not_ improved. One of the big reasons
for that is because the rate limit defenses, once engaged at the intro point,
will send back a NACK to the client. A vanilla tor client will stop using that
introduction point away for 120 seconds if it gets 3 NACKs from it. This leads
to tor quickly giving up on trying to connect and thus telling the client that
connection is impossible to the .onion.

We've hacked a tor client to play along and stop ignoring the NACKs to see how
much time it would take to reach it. On average, a client would roughly need
around 70 seconds with more than 40 NACKs on average.

However, it varied a _lot_ during our experiments with many outliers from 8
seconds with 1 NACK up to 160 seconds with 88 NACKs. (For this, the
SocksTimeout had to be bumped quite a bit).

There is an avenue of improvement here to make the intro point sends a
specific NACK reason (like "Under heavy load" or ...) which would make the
client consider it like "I should retry soon-ish" and thus making the client
possibly able to connect after many seconds (or until the SocksTimeout).

Another bad news there! We can't do that anytime soon because of this bug that
basically crash clients if an unknown status code is sent back (that is a new
NACK value): &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/30454" \
moz-do-not-send="true"&gt;https://trac.torproject.org/30454&lt;/a&gt;. So yeah... quite \
unfortunate there but also a superb reason for everyone out there to upgrade :).

One good news is that it seems that having fast intro points instead of slow
IPs doesn't change much on the overall load on the service so this for now,
our experiment, shows it doesn't matter.

Overall, this rate limit feature does two things:

1. Reduce the overall network load.

   Soaking the introduction requests at the intro point helps avoid the
   service creating pointless rendezvous circuits which makes it "less" of an
   amplification attack.

2. Keep the service usable.

   The tor daemon doesn't go in massive CPU load and thus can be actually used
   properly during the attack.

The problem with (2) is the availability part where for a legit client to
reach the service, it is close to impossible for a vanilla tor without lots of
luck.  However, if let say the tor daemon would be configured with 2 .onion
where one is public and the other one is private with client authorization,
then the second .onion would be totally usable due to the tor daemon not being
CPU overloaded.

As a third thing we did about this. In order to make this feature a bit more
"malleable", we are working on &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/30924" \
moz-do-not-send="true"&gt;https://trac.torproject.org/30924&lt;/a&gt; which is proposal 305.

In short, torrc options are added so an operator can change the rate/burst
that the intro points will use. We can do that using the ESTABLISH_INTRO cell
that will have an extension to define the DoS defensavailability
e parameters (proposal
305).

That way, a service operator can disable this feature, or turn the knobs on
the rate/burst in order to basically adjust the defenses.

At this point in time, we don't have a good grasp on what happens in terms of
CPU if the rate or the burst is bumped up or even how availability is
affected. During our experimentation, we did observed a "sort of" linear
progression between CPU usage and rate. But we barely touched the surface
since it was changed from 25 to 50 to 75 and that is it.

We would require much more experimentation which is something we want to avoid
as much as possible on the real network.

Finally, many more changes are cooking up. One in particular is
&lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/ticket/26294" \
moz-do-not-send="true"&gt;https://trac.torproject.org/projects/tor/ticket/26294&lt;/a&gt; that \
will make tor to only rotate its intro points when the number of introduction \
requests is between 150k to 300k (random value) which currently is between 16k and \
32k. See the ticket for the benefits here which mostly helps with (1).

There has been much talk about a client PoW (see the proposal 305 thread on
this list) which in theory would help out with service availability.

We will also soon merge upstream this ticket &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/24962" \
moz-do-not-send="true"&gt;https://trac.torproject.org/24962&lt;/a&gt; which goes one step \
further at denying single-hop connections to the HSDir/Intro in order to try as much \
as possible to shutdown the Tor2web connections (or any attacker that speeds things \
up on their side by single hoping).

We are making progress here... This is really a non trivial problem and
solution for service availability are not that simple. Our priority is to
protect the network as much as possible and then move to possible solutions
for availability.

I'll stop for now. Huge thanks to everyone who provided service logs, ideas,
code review and future testers :).

Cheers!
David

&lt;/pre&gt;
        &lt;br&gt;
        &lt;fieldset class="mimeAttachmentHeader"&gt;&lt;/fieldset&gt;
        &lt;pre class="moz-quote-pre" \
wrap=""&gt;_______________________________________________ tor-dev mailing list
&lt;a class="moz-txt-link-abbreviated" href="mailto:tor-dev@lists.torproject.org" \
moz-do-not-send="true"&gt;tor-dev@lists.torproject.org&lt;/a&gt; &lt;a \
class="moz-txt-link-freetext" \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" \
moz-do-not-send="true"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;
 &lt;/pre&gt;
      &lt;/blockquote&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190906085124</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-09-06 08:51:24-0400</timestampReceived><subject>[tor-dev] Compile warns</subject><body>

freebsd 12 x64 gcc 8.3.0

src/core/or/connection_edge.c:2563:5: warning: potential null pointer
dereference [-Wnull-dereference]
src/lib/math/fp.c:106:16: warning: conversion from 'double' to 'float'
may change value [-Wfloat-conversion]
src/lib/math/fp.c:111:18: warning: conversion from 'double' to 'float'
may change value [-Wfloat-conversion]
src/lib/math/fp.c:136:16: warning: conversion from 'double' to 'float'
may change value [-Wfloat-conversion]
src/lib/math/fp.c:88:13: warning: conversion from 'double' to 'float'
may change value [-Wfloat-conversion]
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191001062245</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-10-01 06:22:45-0400</timestampReceived><subject>Re: [tor-dev] Exposing onion service errors to Tor Browser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


George Kadianakis:
&gt; Hello list,
&gt; 
&gt; we've recently been thinking about how to expose onion-service-related
&gt; errors to Tor Browser so that we can give more useful error pages to
&gt; users.  We currently return "Unable to connect" error pages for any kind
&gt; of onion service error, and I think we can do better.
&gt; 
&gt; This is a thread to think about the errors we want to expose, how that
&gt; should look like, and what options we should give to the users when it
&gt; happens. Relevant master tickets are #30022, #30025 and #30000.
&gt; 
&gt; We decided (in #14389) that Tor will export these errors through the
&gt; SOCKS port, and the relevant spec is proposal 304 [0].
&gt; 
&gt; As part of #30090 antonela started making a table of potential
&gt; errors. I'm gonna use that in this thread and also add a few more.

Hi George,

In the hypothetical scenario that Namecoin (or any other naming layer)
gets introduced to Tor Browser, it is likely that some error values
specific to the naming layer are going to be useful to convey to the
user.  My preference is to defer that issue until after Namecoin is
introduced to Tor Browser (unless you think it's important to prepare
for in advance?), but I figured it's worth at least getting it onto your
radar.

Cheers,
-- 
-Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191109080844</emailId><senderName>intrigeri</senderName><senderEmail>intrigeri@boum.org</senderEmail><timestampReceived>2019-11-09 08:08:44-0400</timestampReceived><subject>[tor-dev] Acceptable clock skew in tor 0.4.1</subject><body>

Hi,

recently, tor has become more tolerant to skewed system clocks;
great, thanks!

At Tails, we would like to take advantage of these improvements in
order to remove as much as we can of our not-quite-safe clock fixing
code. Our testing suggests that:

 - A  ±24h clock skew is now acceptable in most cases ¹: tor
   bootstraps successfully.

 - While with a  ±48h clock skew, tor fails to bootstrap.

Could someone on the network team please confirm that these empirical
results match what the code is currently supposed to do?

Thanks in advance!

[1] In some corner cases I see weird behavior (#32438).
    And obfs4proxy is stricter than that, which I should report on Trac.

Cheers,
-- 
intrigeri
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191111092358</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-11-11 09:23:58-0400</timestampReceived><subject>Re: [tor-dev] Acceptable clock skew in tor 0.4.1</subject><body>

intrigeri &lt;intrigeri@boum.org&gt; writes:

&gt; Hi,
&gt;
&gt; recently, tor has become more tolerant to skewed system clocks;
&gt; great, thanks!
&gt;
&gt; At Tails, we would like to take advantage of these improvements in
&gt; order to remove as much as we can of our not-quite-safe clock fixing
&gt; code. Our testing suggests that:
&gt;
&gt;  - A  ±24h clock skew is now acceptable in most cases ¹: tor
&gt;    bootstraps successfully.
&gt;
&gt;  - While with a  ±48h clock skew, tor fails to bootstrap.
&gt;
&gt; Could someone on the network team please confirm that these empirical
&gt; results match what the code is currently supposed to do?
&gt;

Hello intri!

I'm not really 100% up to date with the clock skew tolerance of Tor, but
the  ±24h value seems plausible since that's the range where tor
considers a consensus to be "reasonably live" [0], which is what most of
its subsystems require to work.

An unfortunate exception here is v3 onion services: v3 onion services
only tolerate skews of maximum  ±3 hours [1] but in most cases even
tighter than that. This is to assure that v3 clients and services have a
recent and accurate view of the network. In theory all of Tor needs a
recent and accurate view of the network, but v3 is particularly fragile
because of the shared random value and the precise time periods.

Sorry to break the bad news, but it is what it is. In theory we could
potentially do improvements for v3 here, but this is not in the scope
right now.

Cheers!

[0]: see networkstatus_consensus_reasonably_live()
[1]: see networkstatus_get_live_consensus() which is used in the v3
     system, and basically checks if the current time is between the
     consensus valid-after and valid-until.


&gt; [1] In some corner cases I see weird behavior (#32438).
&gt;     And obfs4proxy is stricter than that, which I should report on Trac.
&gt;
&gt; Cheers,
&gt; -- 
&gt; intrigeri
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191202141514</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-12-02 14:15:14-0400</timestampReceived><subject>[tor-dev] Onion DoS: Killing rendezvous circuits over the application layer</subject><body>

Greetings!

This is another thread [0] about onion service denial-of-service attacks.

It has long been suggested that onion service operators should be given the
option to kill spammy rendezvous circuits at will if they feel they are causing
too much damage.

Right now this is possible using the HiddenServiceExportCircuitID torrc option
(introduced in #4700) and then using the CLOSECIRCUIT control port command to
close circuits.

Unfortunately, we have recently got reports that this technique is not viable
for busy onion services under DoS because their control port gets overwhelmed
by (useful for them) events, and it's basically rendered useless to the point
that any CLOSECIRCUIT command takes several seconds to become effective.

For this reason, multiple onion operators [1] have resorted to using the
actual HTTP protocol as a direct channel of communication to the Tor
daemon to request circuit shutdowns. This works by embedding a special
string (or HTTP error code) to the HTTP responses from nginx to the Tor
daemon and adding special custom code to the Tor daemon to close
circuits that carry this string. This seems to work well enough for
people so far.

This is a thread to discuss this approach and other alternatives since it seems
a useful tool against application-layer onion service denial of service attacks.

Let me go through the positives and negatives of actuallym erging this
defence upstream to little-t-tor:

---

Positives:

1) This is a solid defense that actually helps people and has been reported as
   a positive countermeasure in an area that has been hard to find concrete
   defences (also see [0]).

2) Seems like more and more people are doing this already in a custom ad-hoc
   fashion, so merging this upstream will at least give them a secure way of
   doing it (instead of writing custom C code).

3) It's actually a pretty simple patch in terms of tech-debt and maintaining it.

4) The more we address DoS vectors like this one, the less incentive will exist
   for DoS actors to exist. Effectively improving the long-term health of the
   network.

Negatives:

a) It's a dirty hotfix that blends the networking layers and might be annoying
   to maintain in the long-term.

b) It only works for HTTP (and without SSL?).

---

For me, point (1) is extremely important, since we've been struggling with
helping onion services that are getting DoSsed and this feature offers a solid
defense against practical attacks.

However, IMO the right way to do this feature, would be to improve the control
port code and design so that it doesn't get so overwhelmed by multiple
events. That said, I'm not sure exactly what kind of changes we would have to
do to the control port to actually make it a viable option, and it seems to me
like a pretty big project that serves as a medium-term to long-term solution
(which we have no resources to pursue right now), whereas the hack of this
thread is more of a short-term solution.

I'm looking forward to constructive feedback here, since this seems like a
controversial feature that users really need.

Thanks! :)

[0]: serving as a continuation of previous classics such as:
     https://lists.torproject.org/pipermail/tor-dev/2019-June/013875.html
     https://lists.torproject.org/pipermail/tor-dev/2019-July/013923.html
     etc.

[1]: http://www.hackerfactor.com/blog/index.php?/archives/804-A-New-Tor-Attack.html
     https://trac.torproject.org/projects/tor/ticket/32511
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191202160554</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-12-02 16:05:54-0400</timestampReceived><subject>Re: [tor-dev] Onion DoS: Killing rendezvous circuits over the application layer</subject><body>

On Mon, Dec 2, 2019 at 9:16 AM George Kadianakis &lt;desnacked@riseup.net&gt; wrote:

&gt; However, IMO the right way to do this feature, would be to improve the control
&gt; port code and design so that it doesn't get so overwhelmed by multiple
&gt; events. That said, I'm not sure exactly what kind of changes we would have to
&gt; do to the control port to actually make it a viable option, and it seems to me
&gt; like a pretty big project that serves as a medium-term to long-term solution
&gt; (which we have no resources to pursue right now), whereas the hack of this
&gt; thread is more of a short-term solution.

I think I agree with you here about this part.

A quick question that might help us: _why_ is the control port code
slow in this case?  Is the problem that a bunch of events are queued,
and that keeps the controller from getting events that it needs?  Or
that the control port doesn't listen for incoming commands until the
events are flushed (seems unlikely to me)?  Or that a bunch of events
are queued, and that keeps the controller from getting the ACK for its
close command?    Or something else?

For some of these cases, there might be a quick workaround in just
having the controller open two connections: one for bulk and one for
low-latency.

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191209021255</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-12-09 02:12:55-0400</timestampReceived><subject>Re: [tor-dev] Onion DoS: Killing rendezvous circuits over the application layer</subject><body>

Hi,

There's also another negative we haven't considered:

&gt; On 3 Dec 2019, at 00:16, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Negatives:
&gt; 
&gt; a) It's a dirty hotfix that blends the networking layers and might be annoying
&gt;   to maintain in the long-term.
&gt; 
&gt; b) It only works for HTTP (and without SSL?).

c) We'll need to make sure that this defence can't be triggered accidentally,
   (or maliciously via request or response content), otherwise it turns into
   another way of triggering a DoS.

For example, if we searched for a custom string anywhere in the data stream,
then any page documenting that string would be unavailable.

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191002221029</emailId><senderName>"Drew () FoundingDocuments ! org"</senderName><senderEmail>drew@foundingdocuments.org</senderEmail><timestampReceived>2019-10-02 22:10:29-0400</timestampReceived><subject>Re: [tor-dev] Exposing onion service errors to Tor Browser</subject><body>

&gt; On Sep 30, 2019, at 8:15am, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Hello list,
&gt; 
&gt; we've recently been thinking about how to expose onion-service-related
&gt; errors to Tor Browser so that we can give more useful error pages to
&gt; users.  We currently return "Unable to connect" error pages for any kind
&gt; of onion service error, and I think we can do better.


Hello,

In doing a quick read of [1] X'F0' to X'F5'  it looks like most might describe \
potential day-to-day connections, but I'm not sure about the last two: X'F4' Onion \
Service Missing Client Authorization  &amp; X'F5' Onion Service Wrong Client \
Authorization.

Please forgive me if I misunderstand things, but I thought leaked v3.onion addresses \
with (properly set up) authorized onion services (authorized_clients/*.auth &amp; \
corresponding client-side .auth_private) can't be loaded. Thus providing instant, \
inexpensive DOS protection, and denying the malevolent (and anyone) the opportunity \
to even know a specific onion address is in use. And keeping them from trying again \
later, and again, etc.

I am definitely in favor of feedback and clear error reporting, but I am not clear \
about how these authorization-only onion services will be affected. 

Is tor going to be changed such that unauthorized clients -- clients without a proper \
.auth_private file -- are going to be able to learn if a specific .onion domain is in \
use? Will the local tor inform the user that in effect that onion address is in use \
but perhaps X'F4' or X'F5' ?



[1] Extending SOCKS5 Onion Service Error Codes, \
https://gitweb.torproject.org/torspec.git/tree/proposals/304-socks5-extending-hs-error-codes.txt \
Lines 62-93.

[2] Tor Rendezvous Specification - Version 3, \
https://gitweb.torproject.org/torspec.git/tree/rend-spec-v3.txt, First Appendix F &amp; \
Appendix G. Using file system means, not control ports. 



&gt; = Client-level errors =
&gt; === 1) Typo error on address ===
&gt; 
&gt; This can be detected by Tor using the checksum or if the address is
&gt; too big or too small.
&gt; 
&gt; TODO: We will need to add a new error code to prop304. Not sure if
&gt; the error code should distinguish between checksum fail or length fail.
&gt; 
&gt; There is no recovery here since the address is busted. The user
&gt; needs to find the right one.

There is an opportunity here for at least a tiny amount of education about onion \
addresses.  Perhaps copy the address to the page in an edit box and use JavaScript to \
help the user to fix it up? Perhaps a non base32 character got in. Maybe they didn't \
paste in the whole address but missed part of it. 

I would suggest a few simple graphics and sentences explaining the vast address space \
of v3 onions, with a fun simple time calculation perhaps, to show how one would not \
want to try all the variations that might exist on a "misspelled" .onion address.


Thank you and have a nice day. 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190906112156</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-09-06 11:21:56-0400</timestampReceived><subject>Re: [tor-dev] Compile warns</subject><body>

On Fri, Sep 6, 2019 at 4:51 AM grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt;
&gt; freebsd 12 x64 gcc 8.3.0
&gt;
&gt; src/core/or/connection_edge.c:2563:5: warning: potential null pointer
&gt; dereference [-Wnull-dereference]
&gt; src/lib/math/fp.c:106:16: warning: conversion from 'double' to 'float'
&gt; may change value [-Wfloat-conversion]
&gt; src/lib/math/fp.c:111:18: warning: conversion from 'double' to 'float'
&gt; may change value [-Wfloat-conversion]
&gt; src/lib/math/fp.c:136:16: warning: conversion from 'double' to 'float'
&gt; may change value [-Wfloat-conversion]
&gt; src/lib/math/fp.c:88:13: warning: conversion from 'double' to 'float'
&gt; may change value [-Wfloat-conversion]

What version of Tor?
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190906182438</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-09-06 18:24:38-0400</timestampReceived><subject>Re: [tor-dev] Compile warns</subject><body>

On 9/6/19, Nick Mathewson &lt;nickm@freehaven.net&gt; wrote:
&gt; What version of Tor?

Oops, here it is: 0.4.1.5
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190910151229</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-09-10 15:12:29-0400</timestampReceived><subject>Re: [tor-dev] Compile warns</subject><body>

I've got a possible fix for this at
https://trac.torproject.org/projects/tor/ticket/31687 , but it needs
testing; please let me know if it works for you.

As near as I can tell, this code has been unchanged for a while, so
I'm surprised if these warnings are new in 0.4.1.  Is it possible that
a new compiler version or new headers in FreeBSD is what has made them
start appearing?  (In other words, do you see these warnings if you go
back and build 0.4.0 or 0.3.5?)

peace,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190912091511</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-09-12 09:15:11-0400</timestampReceived><subject>Re: [tor-dev] Compile warns</subject><body>

On 9/10/19, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; https://trac.torproject.org/projects/tor/ticket/31687
&gt; needs testing; please let me know if it works for you.

Works. The second hunk for fp.c is below.

&gt; Is it possible that
&gt; a new compiler version or new headers in FreeBSD is what has made them
&gt; start appearing?

Possible, depending on date, gaps in reporting, etc...
FreeBSD switched its base from gcc 4.2+ to llvm 3.3 in FreeBSD 10 (2014q1).
https://svnweb.freebsd.org/base/stable/12/contrib/gcc/?view=log
https://svnweb.freebsd.org/base/stable/12/contrib/llvm/?view=log
Users can choose among some compiler toolchain major revs from ports,
users default choice of "llvm" / "gcc" has dates in here...
https://svnweb.freebsd.org/ports/head/Mk/bsd.default-versions.mk?view=log

FreeBSD 12.x default is at llvm 8.0.1, which doesn't complain.

&gt; do you see these warnings if you go
&gt; back and build 0.4.0 or 0.3.5?

Yes to both.


============================================================
--- tor-0.4.1.5/src/lib/math/fp.c.orig  2019-06-10 08:46:16.000000000 -0400
+++ tor-0.4.1.5/src/lib/math/fp.c
@@ -123,7 +123,7 @@
 tor_isinf(double x)
 {
   /* Same as above, work around the "double promotion" warnings */
-#if defined(MINGW_ANY) &amp;&amp; GCC_VERSION &gt;= 409
+#if (defined(MINGW_ANY)||defined(__FreeBSD__)) &amp;&amp; GCC_VERSION &gt;= 409
 #define PROBLEMATIC_FLOAT_CONVERSION_WARNING
 DISABLE_GCC_WARNING(float-conversion)
 #endif /* defined(MINGW_ANY) &amp;&amp; GCC_VERSION &gt;= 409 */
============================================================
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191203114629</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-12-03 11:46:29-0400</timestampReceived><subject>Re: [tor-dev] Raising exceptions in add_event_listener() threads (was Re: HSv3 descriptor work in st</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; Thanks George, this is a great question! I've expanded our tutorial to
&gt; hopefully cover this a bit better...
&gt;
&gt; https://stem.torproject.org/tutorials/tortoise_and_the_hare.html#advanced-listeners
&gt;

Thanks both for this information! It was very useful!
I basically followed the tutorial and it now works just fine!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191204130647</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-12-04 13:06:47-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

Hello Damian,

I reported a bug report here:
https://trac.torproject.org/projects/tor/ticket/31823#comment:19

I just reopened the old trac ticket but I think this is suboptimal.

Would you prefer me to open new tickets in the future, or maybe open an
issue on Github? I can do whatever is convenient for you!

Thanks for all the code! So far it works great!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191204130900</emailId><senderName>sajolida</senderName><senderEmail>sajolida@pimienta.org</senderEmail><timestampReceived>2019-12-04 13:09:00-0400</timestampReceived><subject>[tor-dev] Open Source Design Workshop, Brussels, January 31</subject><body>

The fine folks at Open Source Design are organizing on January 31
a practical workshop on usability testing:

	https://hsbxl.be/events/byteweek/2020/opensourcedesign/

It will happen in Brussels, 1 day before FOSDEM.

From the author and the description of the workshop I expect it to imply
invaluable knowledge for free.

Everybody interested in developing or designing usable software but
without academic training on usability testing should attend a workshop
like this.

I'm not sending this email to UX mailing lists on purpose :)

-- 
sajolida
Tails â€” https://tails.boum.org/
UX  · Fundraising  · Technical
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191209142741</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-12-09 14:27:41-0400</timestampReceived><subject>[tor-dev] Trip Report: Reproducible Builds Summit</subject><body>


I was at the 5th Reproducible Builds Summit this past week, representing
mostly Android topics.  I attended the first two, so it was nice to see
that there has been some real progress in the past few years of work.
My main focus was working with an Apache/Maven developer on implementing
the "buildinfo" spec for publishing reproducible Java JAR builds to
Maven Central and other Maven repositories.  Maven repositories are
central to the whole Android and Java ecosystems as the primary means of
getting libraries.  We used the jtorctl library to prototype how this
system will look when using the Maven, Gradle, and Bazel buildsystems.

Given the results of our brief work, we should have something working
and deployed this year.  And there is already a Maven plugin for
publishing the "buildinfo" files.  So it should be easy to start getting
libraries to publish these to Maven Central and other Maven
repositories.  Then the Apache/Maven Developer plans to push Apache
Software Foundation to require reproducible builds for all its official
Java releases.

If you want to help with this effort, you can start publishing buildinfo
files with your library, or try rebuilding libraries based on published
buildinfo files to test whether there is enough information to reproduce
the builds.

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191210080957</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-12-10 08:09:57-0400</timestampReceived><subject>Re: [tor-dev] Onion DoS: Killing rendezvous circuits over the application layer</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; However, IMO the right way to do this feature, would be to improve the control
&gt; port code and design so that it doesn't get so overwhelmed by multiple
&gt; events. That said, I'm not sure exactly what kind of changes we would have to
&gt; do to the control port to actually make it a viable option, and it seems to me
&gt; like a pretty big project that serves as a medium-term to long-term solution
&gt; (which we have no resources to pursue right now), whereas the hack of this
&gt; thread is more of a short-term solution.

Is it definitely the Tor-side control-port code that's "overwhelmed", or
is the controller-side not reading fast enough or something..? (It seems
odd to me that it's somehow faster/better to inband-signal via HTTP..)
What controller is being used?

-- 
meejah
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191211233826</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2019-12-11 23:38:26-0400</timestampReceived><subject>Re: [tor-dev] Probability of Guessing a v3 Onion Address</subject><body>

On 12/11/19 4:31 PM, procmem@riseup.net wrote:
&gt; Hi I was wondering what the mathematical probability of guessing an
&gt; onion v3 address that is kept secret.
&gt; 
&gt; Or asked differently: what is the entropy of v3 addresses if an
&gt; adversary decides to bruteforce the entire keyspace?
&gt; 
&gt; I am struggling to come up with a usecase for authenticated v3 services
&gt; when keeping an address secret has the same effect and one can generate
&gt; multiple addresses for the same server and share them with different
&gt; entities.   The degraded usability of v3 auth services compared to v2 is
&gt; the reason I'm asking.
&gt; 

An additional thought for the less-technical side of things:

Using client auth, you *could* advertise the address(es) publicly. Put
them in a pastebin you trust to not delete your pastes. Make a Reddit
post listing them all. Whatever makes it easy for you to "bookmark" your
v3 onion addresses without actually using the bookmark functionality of
Tor Browser. So what if people know v3xyz.onion exists; they can't
connect to it!

I'll admit it's a rather weak use-case: if you can remember/save the
client auth credentials, you could remember/save the address itself too.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191214180751</emailId><senderName></senderName><senderEmail>techniquea2z</senderEmail><timestampReceived>2019-12-14 18:07:51-0400</timestampReceived><subject>[tor-dev] (No Subject)</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

I am working on nibirumrx3wruiqf and have some questions:

How to setup DDOS protection on the VPS &amp; nginx levels?

Any guidelines on nginx configurations for scale?

How does mirroring work? I imagine you'd open many ports on the torrc, and have nginx \
listen to different instances of the same app on different http ports.

If this project interests you and you want to collaborate, contact me


[Attachment #5 (text/html)]

I am working on nibirumrx3wruiqf and have some questions:&lt;br&gt;&lt;br&gt;How to setup DDOS \
protection on the VPS &amp; nginx levels?&lt;br&gt;&lt;br&gt;Any guidelines on nginx configurations \
for scale?&lt;br&gt;&lt;br&gt;How does mirroring work? I imagine you'd open many ports on the \
torrc, and have nginx listen to different instances of the same app on different http \
ports. &lt;br&gt;&lt;br&gt;If this project interests you and you want to collaborate,  contact \
me&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191219180940</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-12-19 18:09:40-0400</timestampReceived><subject>[tor-dev] Adding Tracing to little-t tor</subject><body>

[Attachment #2 (multipart/signed)]


Greetings tor-dev!

This email is a discussion on adding tracing to little-t tor. Tracing can be a
very abstract notion sometimes so I'll start with a quick overview of what
that is, what we can achieve and use cases within tor. Then I'll go over a
last point which is safety.

This email doesn't go into the technical details of userspace tracing on how
and what will be done to add it to tor. That is for another discussion.

1. Overview

Long story short, you can see tracing as a specific type of logging as in it
records information of the application at runtime using tracepoints (similar
to logging statement) so it can be used later. But the main differences from
logging are in two parts: performance and API stability.

Usually, tracing implies high performance as in adds very little overhead to
the application in order to disrupt as little as possible the normal behavior
of an application. This is extremely useful in cases where you want to catch
race conditions or performance bottle necks.

Tracers in userspace have usually an "inprocess library" which in short means
that it records data (raw) from the application and move it to an outside
buffer. Then, that buffer is emptied either on disk or network by the outside
component of the tracer for which the data can be analyzed after collection.

So all a tracer do is, within the application when a tracepoint is hit, copy
some data into a buffer and yields back to the application.

The other part is the API stability. Very often, logs (let say at DEBUG level)
don't usually have strict stable requirements between released versions. But
tracing events (tracepoints), are exposed to the outside for tracers to hook
on, and for people to run analyzing tools on the recorded data. Thus,
stability is usually strongly encouraged. In other words, what the tracepoint
exposes, once released stable, should really not change that much over time.

With a proper abstraction in the application, we can offer stable tracepoints
for which a variety of tracers can hook themselves on at runtime. It is all
about providing an interface to the outside world.

2. Why Tracing in Tor

The tor software is a very complex beast. It has dozens of subsystems with
various interactions between them. One of the big main job of tor is to relay
data as fast as possible in order to keep the latency low. Which means, that
there are code paths that are considered "fast path" implying that they must
remain light and fast. One example is the crypto code that is hit at each
cell.

Tracing comes in extremely handy to hunt down race conditions, performance
issues, or even multithreading problems. A fast relay, let say 25MB/s, if we
wanted to record cell timing in order to hunt down such issues, it simply can
_not_ be done with logging at debug level since it slows down considerably tor
but also fills the disk in a matter of minutes.

And using the control port is not a good solution for two main reasons: string
formatting at each event and control port is part of the mainloop. So anything
you ask to go on the control port will add an overhead to the overall behavior
of tor which is not good when you hunt down races.

One concrete example where tracing was used in the past in tor is with the
rewrite of the cell scheduler (KIST). In order to measure cell timings within
Tor so bottlenecks issues could be found, tracing had to be added so millions
of events could be recorded within few minutes of using a fast relay in
production.

In pressure situation, this is where tracing comes handy. Tracing was also
used recently to find onion service v3 reachability issues. In order to
correlate connection, cell and circuit level problems with the higher level HS
subsystem, we were able to record events in all those subsystems, match them
with their precise timing (offered by tracing) and analyze the results later
on after recording the data.

3. Safety Discussion

Onto the last part I wanted to raise. Allowing anyone to record very low level
data from tor, there is an obvious safety question that must be raised.

Over the years, I've talked about tracing with many people in Tor and the
consensus was always that it should never be enabled in production. As in, the
packages shipped by Tor or by distros should _never_ build the tracepoints.

In other words, it should be considered a development option only. Not only an
option, but compiled _out_ in production and one has to explicitly build them
into tor.

For example (nothing final, just to show the idea):

    $ ./configure --enable-tracing

I personally think that should be enough since the presence of the code
upstream won't stop people from using it (bad or not) but we can prevent it to
be in any legit Tor packages out there. See it a bit like the obsolete Tor2web
option that was never enabled in any published packages by Tor Project or
distros, one had to explicitly enable it at configure time.

The ControlPort is allowed in production and if a malicious actor gets access
to it, then game over. I do see tracing like that as well but at least we can
control its availability as a feature where we can't for the ControlPort as of
today.

Any feedback is very welcome! Concerns, questions, thoughts.

Cheers!
David

-- 
AOrq46damX3clZogjR9FlXTru90GV9IT5Rq/J0EzVSA=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191221230740</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-12-21 23:07:40-0400</timestampReceived><subject>[tor-dev] Stem and Nyx bug tracking moved</subject><body>

Hi all. Stem and Nyx's issue tracking has moved from Trac to GitHub.
In the future please file tickets at...

https://github.com/torproject/stem/issues/
https://github.com/torproject/nyx/issues/

Thanks!

PS. All existing tickets have moved. These trac components will be
disabled to cut down on confusion...

  https://trac.torproject.org/projects/tor/ticket/32832
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191227022316</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-12-27 02:23:16-0400</timestampReceived><subject>Re: [tor-dev] Updates to Prop306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi teor,

Sorry for the 10-day delay, again. I was busy since I'm moving across 
the US. Well, I got my first full time job!

Thank you so much for your response.

I have removed text, a lot of it, especially from "features" I feel 
which aren't necessary. I also extended the relay monitoring section.

FYI the PR is here: https://github.com/torproject/torspec/pull/98

However, I'm worried I removed something you may feel is necessary.

-Neel

On 2019-12-16 19:09, teor wrote:
&gt; Hi Neel,
&gt; 
&gt;&gt; On 17 Dec 2019, at 09:37, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt;&gt; 
&gt;&gt; Hi tor-dev@ mailing list,
&gt;&gt; 
&gt;&gt; Sorry for the many-months delay in updating Prop306.
&gt;&gt; 
&gt;&gt; I have updated Prop306, which is the IPv6 Happy Eyeballs proposal.
&gt;&gt; 
&gt;&gt; The GitHub PR is here: https://github.com/torproject/torspec/pull/98
&gt;&gt; 
&gt;&gt; The Trac ticket is here: 
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/29801
&gt;&gt; 
&gt;&gt; Some of the older discussion on Prop306 can be seen on the thread 
&gt;&gt; here: 
&gt;&gt; https://lists.torproject.org/pipermail/tor-dev/2019-August/013959.html
&gt;&gt; 
&gt;&gt; Could some of you please review this proposal?
&gt; 
&gt; Overall, I think the proposal is too complicated. It doesn't tell us 
&gt; what
&gt; changes are necessary, important, and optional. So it will be hard to
&gt; review and implement.
&gt; 
&gt; I have asked for these changes a few times now, but I can't see them in
&gt; your pull request:
&gt; 
&gt;&gt; On 1 Aug 2019, at 10:36, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt; 
&gt;&gt;&gt; On 30 Jul 2019, at 03:11, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt;&gt;&gt; 
&gt;&gt;&gt; Just a reminder that this proposal (Prop306) needs to be reviewed: 
&gt;&gt;&gt; https://github.com/torproject/torspec/pull/87
&gt;&gt; 
&gt;&gt; I can't find these changes that I requested to the proposal:
&gt;&gt; 
&gt;&gt;&gt;&gt; On 14 Jul 2019, at 02:47, teor &lt;teor@riseup.net&gt; wrote:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; I have some overall comments on the proposal:
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; 1. The proposal is very large now. Let's add an intro section that 
&gt;&gt;&gt;&gt; splits the changes into:
&gt;&gt; 
&gt;&gt; These parts of the proposal exist, but they are not in separate 
&gt;&gt; sections:
&gt;&gt; 
&gt;&gt;&gt;&gt; * initial feasability testing (for initial developer review)
&gt;&gt;&gt;&gt; * minimum viable product (for testing in Tor Browser Alpha)
&gt;&gt;&gt;&gt; * parameter tuning (for performance, load, and user experience)
&gt;&gt;&gt;&gt; * optional features, and how we will know if we need them (if users 
&gt;&gt;&gt;&gt; experience particular bugs)
&gt;&gt; 
&gt;&gt; These parts of the proposal do not exist:
&gt;&gt; 
&gt;&gt;&gt;&gt; * relay statistics (for ongoing monitoring)
&gt;&gt; 
&gt;&gt; ...
&gt;&gt; 
&gt;&gt; I don't see any deleted text:
&gt;&gt; 
&gt;&gt;&gt;&gt; 3. Each revision of this proposal has added text. Is there any text 
&gt;&gt;&gt;&gt; that is redundant or not essential? Can we make it shorter?
&gt;&gt; 
&gt;&gt; David suggested we delete one section, and I suggested we keep some of 
&gt;&gt; it, but delete most of it. ...
&gt;&gt; 
&gt;&gt; Is there anything else you think we can delete?
&gt; 
&gt; How can we help you make these changes?
&gt; 
&gt; They are really important.
&gt; 
&gt; T
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191101175137</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-11-01 17:51:37-0400</timestampReceived><subject>Re: [tor-dev] Onion Service Intro Point Retry Behavior</subject><body>

Hi David,

On 29/10/2019 14:52, David Goulet wrote:
&gt; Long story short, couple weeks ago we've almost merged a new behavior on the
&gt; service side with #31561 that would have ditch an intro point if its circuit
&gt; would time out instead of retrying it. (Today, a service always retry their
&gt; intro point up to 3 times on any type of circuit failure.)

Thanks for not merging this yet. :-)

&gt; The primary original argument for retrying is based on the mobile use case. If
&gt; a .onion is running on a cellphone and the network happens to be bad all the
&gt; sudden, the service is better off to re-establish the intro circuits which
&gt; would make the retry attempts of the client to finally succeed after a bit
&gt; instead of having to re-fetch a descriptor and go to the new intro points.
&gt; 
&gt; Thus, in theory, it is mostly a reachability argument.
&gt; 
&gt; One question that can arise from this is: Will the client be able to reconnect
&gt; using the old intro points by the time the service re-established?
&gt; 
&gt; In other words, is the retry behavior of the *client* allows enough time for
&gt; the service to stabilize for the mobile use case? I'm curious to learn from
&gt; people with experience with this!

For what it's worth, we used to run into the following problem with Briar:

* Device X tries to connect to device Y's hidden service
* X has a cached descriptor for Y's HS
* Since the time when X cached the descriptor, Y has lost its guard
connection, so it's built new intro circuits to new intro points
* After multiple connection attempts, X gives up on the intro points in
the cached descriptor and fetches a new descriptor
* This causes a delay in X connecting to Y

A typical mobile device loses its guard connection frequently - not
necessarily because it loses internet access, but because it switches
between wifi and mobile data. So the scenario above was very common.

Before the HS behaviour was changed to reuse the old intro points, we
had to maintain a patch against Tor to add a controller command for
flushing a cached HS descriptor before trying to connect. This
essentially made the client's descriptor cache redundant, so it was a
slight loss of efficiency, but better than trying a bunch of stale intro
points and then fetching a new descriptor anyway.

If you're considering switching back to the old behaviour, I'd like to
discuss whether we could make one of the following changes to continue
supporting the mobile HS use case:

1. Add a controller command for flushing an HS descriptor
2. Add a controller command for notifying Tor that we lost/gained
internet access, or switched between wifi and mobile data, so Tor knows
that (a) its guard connection may be dead, and (b) its intro circuits
may be dead, but not due to an attack by the intro points, so it can
safely reuse the intro points
3. If intro circuits are closed due to DisableNetwork changing from 0 to
1, remember this and reuse the intro points when the network is re-enabled

Android notifies apps of connectivity changes, so Briar could easily
pass this information on to Tor via a new controller command or by
setting DisableNetwork. (The general problem of detecting whether our
internet connectivity is broken for some definition of broken remains
hard, but fortunately we don't need to solve that to handle the common
cases of switching between wifi and mobile data, and losing mobile
signal, which the OS can tell us about.)

My one-sided two cents. ;-)

Cheers,
Michael
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191105125353</emailId><senderName>Eugen Leitl</senderName><senderEmail>eugen@leitl.org</senderEmail><timestampReceived>2019-11-05 12:53:53-0400</timestampReceived><subject>[tor-dev] [paper] Breaking and (Partially) Fixing Provably Secure Onion Routing</subject><body>


https://arxiv.org/abs/1910.13772

Breaking and (Partially) Fixing Provably Secure Onion Routing

Christiane Kuhn, Martin Beck, Thorsten Strufe

(Submitted on 30 Oct 2019)

After several years of research on onion routing, Camenisch and Lysyanskaya,
in an attempt at rigorous analysis, defined an ideal functionality in the
universal composability model, together with properties that protocols have
to meet to achieve provable security. A whole family of systems based their
security proofs on this work. However, analyzing HORNET and Sphinx, two
instances from this family, we show that this proof strategy is broken. We
discover a previously unknown vulnerability that breaks anonymity completely,
and explain a known one. Both should not exist if privacy is proven
correctly. In this work, we analyze and fix the proof strategy used for this
family of systems. After proving the efficacy of the ideal functionality, we
show how the original properties are flawed and suggest improved, effective
properties in their place. Finally, we discover another common mistake in the
proofs. We demonstrate how to avoid it by showing our improved properties for
one protocol, thus partially fixing the family of provably secure onion
routing protocols. 

Subjects: 	Cryptography and Security (cs.CR)

Cite as: 	arXiv:1910.13772 [cs.CR] (or arXiv:1910.13772v1 [cs.CR] for
this version) 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191114123600</emailId><senderName>anonym</senderName><senderEmail>anonym@riseup.net</senderEmail><timestampReceived>2019-11-14 12:36:00-0400</timestampReceived><subject>Re: [tor-dev] Acceptable clock skew in tor 0.4.1</subject><body>

George Kadianakis:
&gt; An unfortunate exception here is v3 onion services: v3 onion services
&gt; only tolerate skews of maximum  ±3 hours [1] but in most cases even
&gt; tighter than that. This is to assure that v3 clients and services have a
&gt; recent and accurate view of the network. In theory all of Tor needs a
&gt; recent and accurate view of the network, but v3 is particularly fragile
&gt; because of the shared random value and the precise time periods.
&gt; 
&gt; Sorry to break the bad news, but it is what it is. In theory we could
&gt; potentially do improvements for v3 here, but this is not in the scope
&gt; right now.

Actually Tails should be fine: once Tor has bootstrapped Tails syncs the time using \
htpdate which should also fix v3 onion service access. So I believe intrigeri's \
questions were only for bootstrapping + creating a circuit to a non-onion end-point \
-- once Tails succeeds with those it *can* sync the time accurately.

Cheers!
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191114200624</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-11-14 20:06:24-0400</timestampReceived><subject>Re: [tor-dev] torsocks configure bug (uClibc, maybe other nonstandard libcs)</subject><body>

&gt; libc.so.0 =&gt; ...
&gt; ld64-uClibc.so.0 =&gt; ...

Samples from systems for developing pattern matches
should not be truncated... if the data is sensitive or very long,
it can be obfuscated or have its char class substrings shortened.

Some forums and mail can mangle chars classes outside isalnum(3),
tab, space, newlines, control, wrapping, etc... in which case some
safer encoding or file transmission may be useful...

ldd | openssl base64 -e


&gt; grep 'libc\.'
&gt;
&gt; to
&gt;
&gt; grep '\slibc\.'

1) Grep's conformant to at least this standard
do not support '\s' regarding whitespace...

https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html
https://pubs.opengroup.org/onlinepubs/9699919799/utilities/grep.html

Nor do all systems comply to any particular least common standard,
or have their man pages current with the code itself...

https://www.freebsd.org/cgi/man.cgi
https://www.kernel.org/doc/man-pages/

regex, wctype, grep, sed, awk, tr, etc...


Perhaps try...

ldd /usr/bin/yes | sed -r 's,^[[:space:]]+,,' | awk '/^libc\./ {print $1}'


2) configure.ac:119:dnl Get libc full system path. ...

The function returns only the basename, not the full path,
so 119 should say something else.


3) The function may not have a case for the OP's system,
and assumes the input and text processing pipestream
is and acts the same between Linux* and FreeBSD* systems.
That gap and assumption should be checked.


4) The "default" shipped with latest FreeBSD release (12.x)
is libc.so.7 not libc.so.6 which would then also fail if the
parsing fails.


5) FreeBSD 12.x

ldd /usr/bin/yes | openssl base64 -e
L3Vzci9iaW4veWVzOgoJbGliYy5zby43ID0+IC9saWIvbGliYy5zby43ICgweDgw
MDI0OTAwMCkK
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191121131206</emailId><senderName>Tom255</senderName><senderEmail>tom255@protonmail.com</senderEmail><timestampReceived>2019-11-21 13:12:06-0400</timestampReceived><subject>[tor-dev] =?utf-8?b?6L2s5Y+R77yaIFdoaWNoIGVsbGlwdGljIGN1cnZlIFRv?= =?utf-8?q?r_use_=26_use_safe_curv</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/alternative)]


Please use Ed448-Goldilocks or named Curve448 (suggest) and Curve25519 onl=
y. Curve448 potentially offering 224 bits of security, even safer than NIS=
T P-384. Curve25519 potentially offering 128 bits of security and safer an=
d faster than NIST P-256. More important, they're both ECC Security, not o=
nly ECDLP Security. ECC Security doesn't equal to ECDLP Security.=C2=A0
" Unfortunately, there is a gap between ECDLP difficulty and ECC security.=
 None of these standards do a good job of ensuring ECC security. There are=
 many attacks that break real-world ECC without solving ECDLP. The core pr=
oblem is that if you implement the standard curves, chances are you're doi=
ng it wrong:
-Your implementation produces incorrect results for some rare curve points=
.
-Your implementation leaks secret data when the input isn't a curve point.
-Your implementation leaks secret data through branch timing.
-Your implementation leaks secret data through cache timing. " (https://sa=
fecurves.cr.yp.to/)
And those curves are recommended by RFC 7748: https://tools.ietf.org/html/=
rfc7748
If possible, use Curve448 only. It's even safer than NIST P-384 and it's n=
ew.
[Attachment #9 (multipart/related)]

[Attachment #11 (text/html)]

&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt; Please use Ed448-Goldilocks or named Curve448 (suggest) and \
Curve25519 only. Curve448 potentially offering 224 bits of security, even safer than \
NIST P-384. Curve25519 potentially offering 128 bits of security and safer and faster \
than NIST P-256. More important, they're both ECC Security, not only ECDLP Security. \
ECC Security doesn't equal to ECDLP Security.  &lt;br&gt;&lt;/div&gt;&lt;div&gt;" Unfortunately, \
there is a gap between ECDLP difficulty and ECC security. None of these standards do \
a good job of ensuring ECC security. There are many attacks that break real-world ECC \
without solving ECDLP. The core problem is that if you implement the standard curves, \
chances are you're doing it wrong:&lt;br&gt;&lt;/div&gt;&lt;div&gt; -Your implementation produces \
incorrect results for some rare curve points.&lt;br&gt;&lt;/div&gt;&lt;div&gt; -Your implementation \
leaks secret data when the input isn't a curve point.&lt;br&gt;&lt;/div&gt;&lt;div&gt;-Your \
implementation leaks secret data through branch timing. &lt;br&gt;&lt;/div&gt;&lt;div&gt;-Your \
implementation leaks secret data through cache timing. " (&lt;a \
href="https://safecurves.cr.yp.to/"&gt;https://safecurves.cr.yp.to/&lt;/a&gt;)&lt;br&gt;&lt;/div&gt;&lt;div&gt;And \
those curves are recommended by RFC 7748: &lt;a \
href="https://tools.ietf.org/html/rfc7748"&gt;https://tools.ietf.org/html/rfc7748&lt;/a&gt; \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;If possible, use Curve448 only. It's even safer than NIST P-384 and \
it's new. &lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;


["publickey - Tom255@protonmail.com - 0x26CCDADB.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
["signature.asc" (application/pgp-signature)]
[Attachment #15 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191211213153</emailId><senderName>"procmem () riseup ! net"</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2019-12-11 21:31:53-0400</timestampReceived><subject>[tor-dev] Probability of Guessing a v3 Onion Address</subject><body>

Hi I was wondering what the mathematical probability of guessing an
onion v3 address that is kept secret.

Or asked differently: what is the entropy of v3 addresses if an
adversary decides to bruteforce the entire keyspace?

I am struggling to come up with a usecase for authenticated v3 services
when keeping an address secret has the same effect and one can generate
multiple addresses for the same server and share them with different
entities.   The degraded usability of v3 auth services compared to v2 is
the reason I'm asking.


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191216233737</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-12-16 23:37:37-0400</timestampReceived><subject>[tor-dev] Updates to Prop306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

Hi tor-dev@ mailing list,

Sorry for the many-months delay in updating Prop306.

I have updated Prop306, which is the IPv6 Happy Eyeballs proposal.

The GitHub PR is here: https://github.com/torproject/torspec/pull/98

The Trac ticket is here: 
https://trac.torproject.org/projects/tor/ticket/29801

Some of the older discussion on Prop306 can be seen on the thread here: 
https://lists.torproject.org/pipermail/tor-dev/2019-August/013959.html

Could some of you please review this proposal?

-Neel

===

https://www.neelc.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191217000922</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-12-17 00:09:22-0400</timestampReceived><subject>Re: [tor-dev] Updates to Prop306: A Tor Implementation of IPv6 Happy Eyeballs</subject><body>

[Attachment #2 (multipart/signed)]


Hi Neel,

&gt; On 17 Dec 2019, at 09:37, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; 
&gt; Hi tor-dev@ mailing list,
&gt; 
&gt; Sorry for the many-months delay in updating Prop306.
&gt; 
&gt; I have updated Prop306, which is the IPv6 Happy Eyeballs proposal.
&gt; 
&gt; The GitHub PR is here: https://github.com/torproject/torspec/pull/98
&gt; 
&gt; The Trac ticket is here: https://trac.torproject.org/projects/tor/ticket/29801
&gt; 
&gt; Some of the older discussion on Prop306 can be seen on the thread here: \
&gt; https://lists.torproject.org/pipermail/tor-dev/2019-August/013959.html 
&gt; Could some of you please review this proposal?

Overall, I think the proposal is too complicated. It doesn't tell us what
changes are necessary, important, and optional. So it will be hard to
review and implement.

I have asked for these changes a few times now, but I can't see them in
your pull request:

&gt; On 1 Aug 2019, at 10:36, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; &gt; On 30 Jul 2019, at 03:11, Neel Chauhan &lt;neel@neelc.org&gt; wrote:
&gt; &gt; 
&gt; &gt; Just a reminder that this proposal (Prop306) needs to be reviewed: \
&gt; &gt; https://github.com/torproject/torspec/pull/87
&gt; 
&gt; I can't find these changes that I requested to the proposal:
&gt; 
&gt; &gt; &gt; On 14 Jul 2019, at 02:47, teor &lt;teor@riseup.net&gt; wrote:
&gt; &gt; &gt; 
&gt; &gt; &gt; I have some overall comments on the proposal:
&gt; &gt; &gt; 
&gt; &gt; &gt; 1. The proposal is very large now. Let's add an intro section that splits the \
&gt; &gt; &gt; changes into:
&gt; 
&gt; These parts of the proposal exist, but they are not in separate sections:
&gt; 
&gt; &gt; &gt; * initial feasability testing (for initial developer review)
&gt; &gt; &gt; * minimum viable product (for testing in Tor Browser Alpha)
&gt; &gt; &gt; * parameter tuning (for performance, load, and user experience)
&gt; &gt; &gt; * optional features, and how we will know if we need them (if users experience \
&gt; &gt; &gt; particular bugs)
&gt; 
&gt; These parts of the proposal do not exist:
&gt; 
&gt; &gt; &gt; * relay statistics (for ongoing monitoring)
&gt; 
&gt; ...
&gt; 
&gt; I don't see any deleted text:
&gt; 
&gt; &gt; &gt; 3. Each revision of this proposal has added text. Is there any text that is \
&gt; &gt; &gt; redundant or not essential? Can we make it shorter?
&gt; 
&gt; David suggested we delete one section, and I suggested we keep some of it, but \
&gt; delete most of it. ... 
&gt; Is there anything else you think we can delete?

How can we help you make these changes?

They are really important.

T


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAl34HLIACgkQEP6qDnB1
ZyqDYxAAhoOri7An3qK2nXC+Z++qAPv59ZWtLOvl2a1aZmbuKq0/rFixiBcGAJav
92Ajm6ToAAN1p5eFTtxM9Uj+GMwSiZ6qkmctNJkQtZ4FlJ/Y9hxWt05TSnbsgOZX
AO0X5EtLVR1K9eIAA4uVjuJNwQPby9/QI07lSyQYmeVomXxEeF9dmXR0P2VpK/Fw
psGYEY1BpSw7D9T6PTDtMhwXbsCu9g27J/Jr5fqlRxXNc4b6rycceeBMA+IPoU3l
v7ICEwfNuEwmn/uvGbcGlMo+qwxdNOAwQAnd+MDkg4wXKJuVMxIrjq6t7UqSQKXy
dh+H2CwcngCWwkgzjDADSou8FcCVCS8D18z2xZ4YQ1i6UW6bsU/uKJ5NwGDnJCBj
NKAo2mA8r/FL8AqrQHaXCLqShynALxXyUqwFLykBMmK7f9CDvgE28nKO/MUGID+B
jiM+765UwQW47WopaDyCPBHUk84SmtHgBWIZJqA6O/IkwNVGDUW0kXQUu4z4/s7U
bdOOaDALzVaawP1tqcMkInjBtusJuuUwfJ5zuKCA3y9BtuL5uLUR7N/fzF6iZzud
LWQPhVx7JJohuFSviJJwU6u8vC3eqwlRj1DfDC2iBr0hJPN5OfrAO8d8ohJd63pp
TAshpmKxZlfyfxBkTjfppnydPZwba1cxjoC61zWuHiMg3pCa2h8=
=38Ip
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191211233008</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2019-12-11 23:30:08-0400</timestampReceived><subject>Re: [tor-dev] Probability of Guessing a v3 Onion Address</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


procmem@riseup.net wrote:
&gt; Hi I was wondering what the mathematical probability of guessing an
&gt; onion v3 address that is kept secret.
&gt; 
&gt; Or asked differently: what is the entropy of v3 addresses if an
&gt; adversary decides to bruteforce the entire keyspace?
&gt; 
&gt; I am struggling to come up with a usecase for authenticated v3 services
&gt; when keeping an address secret has the same effect and one can generate
&gt; multiple addresses for the same server and share them with different
&gt; entities.   The degraded usability of v3 auth services compared to v2 is
&gt; the reason I'm asking.
&gt; 

The probability is so close to 0 that we can safely assume it's
impossible. v2 addresses are 80 bit. v3 addresses are 256 bit. v3
addresses are whole ed25519 public keys base32 encoded with a checksum
and .onion at the end.

Do not be confused in comparing 80 to 256 like "just little over 3 times
stronger" because in cryptography the difference between 256 bit
security vs 80 bit security is orders of magnitude greater.

2^80 = 1208925819614629174706176
vs
2^256 = 115792089237316195423570985008687907853269984665640564039457584
007913129639936

Bruteforcing the entire keyspace of ed25519 is not something industry
standards consider practical in the real world now, or in the
foreseeable future.

However, your point is not correct. Keeping the address secret does not
have the same effect as authenticated v3. Authenticated v3 exist to
eliminate the side risks where the v3 address is not guessed (brute
forced) but accidentally (or intentionally) leaked. This can be due to
human error, malware / spyware, bug in the software using the v3
address, other kind of trojan-type operation and tons of other
possibilities. Of course one can argue that such threats as described
above can also steal the auth credentials / cookie and have the same
effect on authenticated v3, but it's at least an additional precaution.

Also, if you have multiple users, having one v3 address with
authentication is much better than multiple addresses, for the following
reasons:
- easier management
- easier to configure and easier to maintain the application behind it
(web server or whatever it is)
- less resources needed by the Tor daemon
- less load on your guard(s) / bridge(s), thus more capacity and better
experience for your clients / visitors (if you have multiple addresses
you need to maintain active introduction point circuits for all of them,
publish descriptors, etc.)

Many cons and no pro the way I see it.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191121203758</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2019-11-21 20:37:58-0400</timestampReceived><subject>Re: [tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


I think a 'restart tor daemon' (with user-friendly language) in
about:preferences#tor under 'Advanced' could be a potentially useful
addition.

On 11/15/19 11:13 AM, Drew@FoundingDocuments.org wrote:
&gt; I bring this up in this thread because of its timeliness. Please excuse
&gt; me if you are offended, no offense intended. This is email is
&gt; fundamentally a feature request.  
&gt; 
&gt; Sarpedon, I had not yet gotten as far as you towards GUI customization
&gt; of torrc options. And I've not yet thought through the whole flow so as
&gt; to be able to write a decent trac ticket.  
&gt; 
&gt; I would love to see one line added to the Tor Browser Button: SIGHUP
&gt; Tor. Obviously the verbiage would have to be user friendly.  
&gt; 
&gt; The main reason for this is due to having changed the torrc (files) and
&gt; wanting to reload tor.real but not wanting to quit Tor Browser then
&gt; re-open it.  
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191126191152</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-11-26 19:11:52-0400</timestampReceived><subject>Re: [tor-dev] Proposal 271 - improvements</subject><body>

On Tue, Oct 15, 2019 at 5:43 AM Florentin Rochet
&lt;florentin.rochet@uclouvain.be&gt; wrote:

&gt; I've opened a trac ticket for 1)
&gt; https://trac.torproject.org/projects/tor/ticket/32088

(This is now proposal 310.)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191128005612</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-11-28 00:56:12-0400</timestampReceived><subject>Re: [tor-dev] Raising exceptions in add_event_listener() threads (was Re: HSv3 descriptor work in st</subject><body>

Thanks George, this is a great question! I've expanded our tutorial to
hopefully cover this a bit better...

https://stem.torproject.org/tutorials/tortoise_and_the_hare.html#advanced-listeners

You can trivially print exceptions within your listener if that is all
you care about...

========================================

import time
import traceback

from stem.control import EventType, Controller


def broken_handler(event):
  try:
    raise ValueError('boom')
  except:
    print(traceback.format_exc())

with Controller.from_port() as controller:
  controller.authenticate()
  controller.add_event_listener(broken_handler, EventType.BW)
  time.sleep(2)

========================================

% python demo.py
Traceback (most recent call last):
  File "demo.py", line 9, in broken_handler
    raise ValueError('boom')
ValueError: boom

Traceback (most recent call last):
  File "demo.py", line 9, in broken_handler
    raise ValueError('boom')
ValueError: boom

========================================

... but if your event handler has grown sophisticated enough to make
this a significant issue I'd suggest a producer/consumer model as the
tutorial now demonstrates.

Cheers! -Damian
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191128235753</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-11-28 23:57:53-0400</timestampReceived><subject>Re: [tor-dev] Practracker regen in #30381</subject><body>

Hi,

&gt; On 28 Nov 2019, at 15:43, teor &lt;teor@riseup.net&gt; wrote:
&gt; 
&gt; &gt; On 27 Nov 2019, at 22:34, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; &gt; 
&gt; &gt; teor &lt;teor@riseup.net&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; It looks like you regenerated the whole practracker file in #30381:
&gt; &gt; &gt; https://trac.torproject.org/projects/tor/ticket/30381
&gt; &gt; &gt; https://github.com/torproject/tor/commit/53ac9a9a91a8f2ab45c75550456716074911e685#diff-9fd3400f062c4541d79881e199fd9e1f
&gt; &gt; &gt;  
&gt; &gt; &gt; But we usually just add exceptions for the files that we modified.
&gt; &gt; &gt; 
&gt; &gt; &gt; When we do a full regeneration, we lose a whole lot of warnings that
&gt; &gt; &gt; tell us where our code quality is getting worse.
&gt; &gt; &gt; 
&gt; &gt; &gt; Do you mind if I revert the unrelated changes?
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; No problem either! Sorry for the trouble.

I had a think about this overnight.

Since we've been adjusting exceptions constantly, I don't think reverting
to a particular instant in time is actually helpful.

practracker is meant to help us improve our code quality, and maintain
that code quality once it has been improved.

Here's how we're doing that right now:
1. For large changes, require new or modified code to use best practices
2. Allow small changes, without requiring big refactors

I think that's ok, but let's talk about how we could make it better at
the next roadmap / retrospective?

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191113095853</emailId><senderName>akater</senderName><senderEmail>nuclearspace@gmail.com</senderEmail><timestampReceived>2019-11-13 09:58:53-0400</timestampReceived><subject>[tor-dev] torsocks configure bug (uClibc, maybe other nonstandard libcs)</subject><body>

[Attachment #2 (------ARY1ZOL0B23B0U6GBSKU3WNC264W9H)]

[Attachment #4 (------L5FKCZ8PDJFVG6ORGPTCPORBLCHXAG)]


In torsocks' configure.ac, libc_name is determined by means of ldd /usr/bin/yes which \
is then grepped for libc.

On a uClibc system I use, ldd /usr/bin/yes yields two entries, namely

libc.so.0 =&gt; ...
ld64-uClibc.so.0 =&gt; ...

The resulting string begins with quotation mark, ends with quotation mark and \
contains newline character.

At some point during the configuration process (I have not figured out when exactly), \
the aforementioned string is trimmed erroneously. In my case, the first line is left \
out and the second one is discarded. The remaining chunk, with the opening quotation \
mark but without the closing one, ends up in another configuration file, producing a \
line like

SOME_VARIABLE="libc.so.0

without the closing quotation mark. Build cannot proceed from there.

The libc determination process thus needs to be fixed.

My hotfix was to change

grep 'libc\.'

to

grep '\slibc\.'

but I can't suggest the proper solution as I'm not experienced with shell scripts. I \
will perform a test if provided with (a link to) a relevant standalone patch for \
torsocks-2.2.0 or torsocks-2.3.0.


[Attachment #7 (text/html)]

In torsocks' configure.ac, libc_name is determined by means of ldd /usr/bin/yes which \
is then grepped for libc.&lt;br&gt;&lt;br&gt;On a uClibc system I use, ldd /usr/bin/yes yields \
two entries, namely&lt;br&gt;&lt;br&gt;libc.so.0 =&gt; ...&lt;br&gt;ld64-uClibc.so.0 =&gt; \
...&lt;br&gt;&lt;br&gt;The resulting string begins with quotation mark, ends with quotation mark \
and contains newline character.&lt;br&gt;&lt;br&gt;At some point during the configuration process \
(I have not figured out when exactly), the aforementioned string is trimmed \
erroneously. In my case, the first line is left out and the second one is discarded. \
The remaining chunk, with the opening quotation mark but without the closing one, \
ends up in another configuration file, producing a line \
like&lt;br&gt;&lt;br&gt;SOME_VARIABLE="libc.so.0&lt;br&gt;&lt;br&gt;without the closing quotation mark. Build \
cannot proceed from there.&lt;br&gt;&lt;br&gt;The libc determination process thus needs to be \
fixed.&lt;br&gt;&lt;br&gt;My hotfix was to change&lt;br&gt;&lt;br&gt;grep 'libc\.'&lt;br&gt;&lt;br&gt;to&lt;br&gt;&lt;br&gt;grep \
'\slibc\.'&lt;br&gt;&lt;br&gt;but I can't suggest the proper solution as I'm not experienced with \
shell scripts. I will perform a test if provided with (a link to) a relevant \
standalone patch for torsocks-2.2.0 or torsocks-2.3.0.


["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191110001632</emailId><senderName>sarpedon montecarlo</senderName><senderEmail>sarpedon000@gmail.com</senderEmail><timestampReceived>2019-11-10 00:16:32-0400</timestampReceived><subject>[tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/alternative)]


Hello to the community!
my first question is that is there a solution for rapid development of tbb?
i was wondering that each time a contributor wants to change something in
the tbb or add extra functionality, they have to go through the build
process which i just guess would be very time consuming. i was wondering
that is there any containerized environment for this? any docker ecosystem
available or other solutions that might help?
my second question is about the changes that i want to implement. i am
interested into the graphical settings page about bridges and tor process
that currently tbb is exposing to the end users. if we want to add more
functionality into this settings page, where should we start to change? and
is there any possibility that we may have some control over the underlying
tor process as well, for instance controlling it's launching or it's torrc
configuration; because as i see, there must be a link between the graphical
interface of tbb and the underlying tor process so that is the way we can
control bridges for instance. similar to this i was planning to add more
graphical options to the interface for controlling other configuration
aspects of the tor process through it's torrc or other workarounds.
in the past i have achieved this by writing a browser extension that
benefits from native messaging for communication to the tor process; but
this is not really performance friendly and an intuitive experience for the
end users.i am not satisfied with the result. so i was interested on
mirroring these functionalities inside tbb.
i really appreciate your insights and thoughts on the matter,
have a great day,
Sarpedon.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello to the community!&lt;div&gt;my first question is that is there a \
solution for rapid development of tbb? i was wondering that each time a contributor \
wants to change something in the tbb or add extra functionality, they have to go \
through the build process which i just guess would be very time consuming. i was \
wondering that is there any containerized environment for this? any docker ecosystem \
available or other solutions that might help?&lt;/div&gt;&lt;div&gt;my second question is about \
the changes that i want to implement. i am interested into the graphical settings \
page about bridges and tor process that currently tbb is exposing to the end users. \
if we want to add more functionality into this settings page, where should we start \
to change? and is there any possibility that we may have some control over the \
underlying tor process as well, for instance controlling it's launching or \
it's torrc configuration; because as i see, there must be a link between the \
graphical interface of tbb and the underlying tor process so that is the way we can \
control bridges for instance. similar to this i was planning to add more graphical \
options to the interface for controlling other configuration aspects of the tor \
process through it's torrc or other workarounds.&lt;/div&gt;&lt;div&gt;in the past i have \
achieved this by writing a browser extension that benefits from native messaging for \
communication to the tor process; but this is not really performance friendly and an \
intuitive experience for the end users.i am not satisfied with the result. so i was \
interested on mirroring these functionalities inside tbb.&lt;/div&gt;&lt;div&gt;i really \
appreciate your insights and thoughts on the matter,&lt;/div&gt;&lt;div&gt;have a great \
day,&lt;/div&gt;&lt;div&gt;Sarpedon.&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191127160441</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-11-27 16:04:41-0400</timestampReceived><subject>[tor-dev] Raising exceptions in add_event_listener() threads (was Re: HSv3 descriptor work in stem)</subject><body>

Hello Damian (and list),

here is another question about an issue I have encountered while
developing onionbalance v3.

In particular, I'm fetching HS descriptors using HSFETCH and then adding
an add_event_listener() event to a function that does the descriptor
parsing and handling as follows:

        controller.add_event_listener(handle_new_desc_content_event, EventType.HS_DESC_CONTENT)

The problem is that the handle_new_desc_content_event() callback has
grown to a non-trivial size and complexity, since it needs to parse the
descriptor, put it in the right places, and tick off the right
checkboxes.

Since its size has increased, so has the number of bugs and errors that
are appearing during development. The problem is that because the
callback is running on a separate thread (?) any errors and exceptions
that get raised in that thread never surface to the my console and hence
I don't see them. This means that I need to do very tedious printf
debugging to find the exact place and type of error everytime something
happens.

What's the proper way to do debugging and development in callbacks like
that? Is there a way to make the exceptions float back to the main
thread or something? Or any other tips?

Thanks! :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191127233408</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-11-27 23:34:08-0400</timestampReceived><subject>Re: [tor-dev] Raising exceptions in add_event_listener() threads (was Re: HSv3 descriptor work in st</subject><body>

Hi George,

&gt; On 28 Nov 2019, at 02:04, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Hello Damian (and list),
&gt; 
&gt; here is another question about an issue I have encountered while
&gt; developing onionbalance v3.
&gt; 
&gt; In particular, I'm fetching HS descriptors using HSFETCH and then adding
&gt; an add_event_listener() event to a function that does the descriptor
&gt; parsing and handling as follows:
&gt; 
&gt;        controller.add_event_listener(handle_new_desc_content_event, EventType.HS_DESC_CONTENT)
&gt; 
&gt; The problem is that the handle_new_desc_content_event() callback has
&gt; grown to a non-trivial size and complexity, since it needs to parse the
&gt; descriptor, put it in the right places, and tick off the right
&gt; checkboxes.
&gt; 
&gt; Since its size has increased, so has the number of bugs and errors that
&gt; are appearing during development. The problem is that because the
&gt; callback is running on a separate thread (?) any errors and exceptions
&gt; that get raised in that thread never surface to the my console and hence
&gt; I don't see them. This means that I need to do very tedious printf
&gt; debugging to find the exact place and type of error everytime something
&gt; happens.
&gt; 
&gt; What's the proper way to do debugging and development in callbacks like
&gt; that? Is there a way to make the exceptions float back to the main
&gt; thread or something? Or any other tips?

In general, there are two ways to avoid exceptions disappearing in python
threads, a code change, and a design change.

Code Change

The code change catches all exceptions in a thread, you should be able to
do it right now. (Or Damian could implement it in stem, every time a thread
is launched.)

1. Wrap all code called in a thread in a try/catch block
2. Catch every exception
3. Log it
4. Stop the thread/process/...

The code looks a bit like this:

try:
    run_thread()
except e:
    print("Error in thread")
    log_error()
    # Pick one of these actions
    # Terminate the process immediately
    os._exit(1)
    # Re-raise the error - does this terminate the thread?
    raise
    # Stop the thread
    return 1

You'll want a log_error() function like this one:
https://github.com/privcount/privcount/blob/master/privcount/log.py#L19

Another alternative is to join() threads when they terminate, and re-raise
the exception in the main thread. But the code is a lot more complex:
https://stackoverflow.com/a/6874161

Design Change

The design change moves all the work to the main thread, and just stores data/
sets a flag from other threads. That's not always possible, but it's usually a
good idea to limit work in threads, because it avoids races, delays, and
deadlocks.

In this case, you could store the data in the fetch thread, and then do the
processing the next time the main thread tries to access that data, or anything
related to it.

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191113180307</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2019-11-13 18:03:07-0400</timestampReceived><subject>Re: [tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hey Sarpedon,

The tor-browser-build project (
https://gitweb.torproject.org/builders/tor-browser-build.git/ ) can be
used to build tor-browser for all the various environments, and you can
updated the /projects/firefox/config file to point to your own git repo
and commit for development. Unfortunately this is not particularly fast,
but it's really the only way to go if you need builds for platforms
other than Linux.

Alternatively, you can just build tor-browser (
https://gitweb.torproject.org/tor-browser.git/ ), and copy the relevant
bits over an existing tor-browser install. This is the workflow I use
during development on Linux and is generally pretty straight forward to
use once you have scripts setup to do the deploying.

It's theoretically possible to get this sort of incremental build setup
working for other platforms (ie building windows bins in a linux dev
environment), but it's a pain and would require delving into the
tor-browser-build firefox build and config scripts. I've done it before
for our older windows build target (before we switched to clang and
friends) and can give you some tips on how to do that if necessary.

The Tor Browser Hacking Guide should be a good resource as well, though
it is a living document so might be out of date:

https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking

If you're interested in updating/improving/adding to the
about:preferences#tor pane, than you can start by looking at this commit
which added the page:

https://gitweb.torproject.org/tor-browser.git/commit/?h=tor-browser-68.2.0esr-9.5-1&amp;id=bea7e61c120f207e7e1a65041b44dc1998e3656a


In general, the relevant things there are in:

/browser/components/torpreferences/*
/browser/modules/TorProtocolService.jsm
/browser/modules/TorStrings.jsm

What sort of improvements are you looking to add? If you're interested
in submitting a patch, you should open a ticket that tracks whatever
feature you're looking to add. There we can give you early code and
design/UX feedback to improve the odds of us accepting your patch :)

best,
-Richard


On 11/9/19 4:04 PM, sarpedon montecarlo wrote:
&gt; Hello to the community!
&gt; my first question is that is there a solution for rapid development of
&gt; tbb? i was wondering that each time a contributor wants to change
&gt; something in the tbb or add extra functionality, they have to go through
&gt; the build process which i just guess would be very time consuming. i was
&gt; wondering that is there any containerized environment for this? any
&gt; docker ecosystem available or other solutions that might help?
&gt; my second question is about the changes that i want to implement. i am
&gt; interested into the graphical settings page about bridges and tor
&gt; process that currently tbb is exposing to the end users. if we want to
&gt; add more functionality into this settings page, where should we start to
&gt; change? and is there any possibility that we may have some control over
&gt; the underlying tor process as well, for instance controlling it's
&gt; launching or it's torrc configuration; because as i see, there must be a
&gt; link between the graphical interface of tbb and the underlying tor
&gt; process so that is the way we can control bridges for instance. similar
&gt; to this i was planning to add more graphical options to the interface
&gt; for controlling other configuration aspects of the tor process through
&gt; it's torrc or other workarounds.
&gt; in the past i have achieved this by writing a browser extension that
&gt; benefits from native messaging for communication to the tor process; but
&gt; this is not really performance friendly and an intuitive experience for
&gt; the end users.i am not satisfied with the result. so i was interested on
&gt; mirroring these functionalities inside tbb.
&gt; i really appreciate your insights and thoughts on the matter,
&gt; have a great day,
&gt; Sarpedon.
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191127005050</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-11-27 00:50:50-0400</timestampReceived><subject>[tor-dev] Practracker regen in #30381</subject><body>

Hi George, David,

It looks like you regenerated the whole practracker file in #30381:
https://trac.torproject.org/projects/tor/ticket/30381
https://github.com/torproject/tor/commit/53ac9a9a91a8f2ab45c75550456716074911e685#diff-9fd3400f062c4541d79881e199fd9e1f


But we usually just add exceptions for the files that we modified.

When we do a full regeneration, we lose a whole lot of warnings that
tell us where our code quality is getting worse.

Do you mind if I revert the unrelated changes?

T

-- 
teor
----------------------------------------------------------------------

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191127121634</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-11-27 12:16:34-0400</timestampReceived><subject>Re: [tor-dev] Practracker regen in #30381</subject><body>

[Attachment #2 (multipart/signed)]


On 27 Nov (10:50:50), teor wrote:
&gt; Hi George, David,
&gt; 
&gt; It looks like you regenerated the whole practracker file in #30381:
&gt; https://trac.torproject.org/projects/tor/ticket/30381
&gt; https://github.com/torproject/tor/commit/53ac9a9a91a8f2ab45c75550456716074911e685#diff-9fd3400f062c4541d79881e199fd9e1f
&gt;  
&gt; But we usually just add exceptions for the files that we modified.
&gt; 
&gt; When we do a full regeneration, we lose a whole lot of warnings that
&gt; tell us where our code quality is getting worse.
&gt; 
&gt; Do you mind if I revert the unrelated changes?

No problem!

David

-- 
sS/00qwul11JishkDQ3fWnNKxUdo3N/A5gu9tYl8dzw=


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191127123429</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-11-27 12:34:29-0400</timestampReceived><subject>Re: [tor-dev] Practracker regen in #30381</subject><body>

teor &lt;teor@riseup.net&gt; writes:

&gt; Hi George, David,
&gt; 
&gt; It looks like you regenerated the whole practracker file in #30381:
&gt; https://trac.torproject.org/projects/tor/ticket/30381
&gt; https://github.com/torproject/tor/commit/53ac9a9a91a8f2ab45c75550456716074911e685#diff-9fd3400f062c4541d79881e199fd9e1f
&gt;  
&gt; But we usually just add exceptions for the files that we modified.
&gt; 
&gt; When we do a full regeneration, we lose a whole lot of warnings that
&gt; tell us where our code quality is getting worse.
&gt; 
&gt; Do you mind if I revert the unrelated changes?
&gt; 

No problem either! Sorry for the trouble.

FWIW, what happened there is that when I need to rebase an old dev
branch to master (because of revisions etc.), there are almost always
multiple conflicts with practracker. Resolving these manually is very
annoying (they are many and confusing), so sometimes I have ditched the
exceptions.txt completely and just regenerated practracker exceptions
from scratch. That's what happened in that case. If someone has a tip
for this situation, it would be cool :)

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191128054353</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-11-28 05:43:53-0400</timestampReceived><subject>Re: [tor-dev] Practracker regen in #30381</subject><body>

Hi,

&gt; On 27 Nov 2019, at 22:34, George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; teor &lt;teor@riseup.net&gt; writes:
&gt; 
&gt; &gt; It looks like you regenerated the whole practracker file in #30381:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/30381
&gt; &gt; https://github.com/torproject/tor/commit/53ac9a9a91a8f2ab45c75550456716074911e685#diff-9fd3400f062c4541d79881e199fd9e1f
&gt; &gt;  
&gt; &gt; But we usually just add exceptions for the files that we modified.
&gt; &gt; 
&gt; &gt; When we do a full regeneration, we lose a whole lot of warnings that
&gt; &gt; tell us where our code quality is getting worse.
&gt; &gt; 
&gt; &gt; Do you mind if I revert the unrelated changes?
&gt; &gt; 
&gt; 
&gt; No problem either! Sorry for the trouble.
&gt; 
&gt; FWIW, what happened there is that when I need to rebase an old dev
&gt; branch to master (because of revisions etc.), there are almost always
&gt; multiple conflicts with practracker. Resolving these manually is very
&gt; annoying (they are many and confusing), so sometimes I have ditched the
&gt; exceptions.txt completely and just regenerated practracker exceptions
&gt; from scratch. That's what happened in that case. If someone has a tip
&gt; for this situation, it would be cool :)

I think the best way to fix this issue is to stop creating code that
requires practracker exceptions :-)

If that's not possible, we should:
1. use the master copy of practracker/exceptions.txt
2. re-run practracker
3. ignore warnings
4. fix any new errors

T

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191114095532</emailId><senderName>sarpedon montecarlo</senderName><senderEmail>sarpedon000@gmail.com</senderEmail><timestampReceived>2019-11-14 09:55:32-0400</timestampReceived><subject>Re: [tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/related)]

[Attachment #4 (multipart/alternative)]


Hi Richard, this is great!
I appreciate all the insights you gave me.
about the build setup i would definitely go with your suggestion. maybe it
would be possible to also use these build scripts inside a docker composer
for a reload on demand during development. and about windows,  it is a
requirement for my situation , but i just saw some build scripts regarding
windows in the tbb repo you mentioned; i would be happy to hear from you
about tips and tricks regarding windows!

basically what i am about to implement are as below:

[image: image.png]

[image: image.png]

[image: image.png]

above screen shots are from the browser extension that i have already
implemented and want to integrate with the tbb.

1) padding is the time period which i send random packets to random
destinations for generating fake browsing pattern.

2) rotation is a fancy name for MaxCircuitDirtiness

3) idle timeout is a custom clock which will close the tbb automatically in
case of no interaction from the user

4) use proxy &amp; use bridge is already available inside tbb

5) entry, middle and exit countries will fill the torrc with user selected
options

based on the commit you mentioned for  "about:preferences#tor pane", i
believe that commit is the right place i should start coding.

Best Regards,
Sarpedon

On Wed, Nov 13, 2019 at 9:33 PM Richard Pospesel &lt;richard@torproject.org&gt;
wrote:

&gt; Hey Sarpedon,
&gt; 
&gt; The tor-browser-build project (
&gt; https://gitweb.torproject.org/builders/tor-browser-build.git/ ) can be
&gt; used to build tor-browser for all the various environments, and you can
&gt; updated the /projects/firefox/config file to point to your own git repo
&gt; and commit for development. Unfortunately this is not particularly fast,
&gt; but it's really the only way to go if you need builds for platforms
&gt; other than Linux.
&gt; 
&gt; Alternatively, you can just build tor-browser (
&gt; https://gitweb.torproject.org/tor-browser.git/ ), and copy the relevant
&gt; bits over an existing tor-browser install. This is the workflow I use
&gt; during development on Linux and is generally pretty straight forward to
&gt; use once you have scripts setup to do the deploying.
&gt; 
&gt; It's theoretically possible to get this sort of incremental build setup
&gt; working for other platforms (ie building windows bins in a linux dev
&gt; environment), but it's a pain and would require delving into the
&gt; tor-browser-build firefox build and config scripts. I've done it before
&gt; for our older windows build target (before we switched to clang and
&gt; friends) and can give you some tips on how to do that if necessary.
&gt; 
&gt; The Tor Browser Hacking Guide should be a good resource as well, though
&gt; it is a living document so might be out of date:
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
&gt; 
&gt; If you're interested in updating/improving/adding to the
&gt; about:preferences#tor pane, than you can start by looking at this commit
&gt; which added the page:
&gt; 
&gt; 
&gt; https://gitweb.torproject.org/tor-browser.git/commit/?h=tor-browser-68.2.0esr-9.5-1&amp;id=bea7e61c120f207e7e1a65041b44dc1998e3656a
&gt;  
&gt; In general, the relevant things there are in:
&gt; 
&gt; /browser/components/torpreferences/*
&gt; /browser/modules/TorProtocolService.jsm
&gt; /browser/modules/TorStrings.jsm
&gt; 
&gt; What sort of improvements are you looking to add? If you're interested
&gt; in submitting a patch, you should open a ticket that tracks whatever
&gt; feature you're looking to add. There we can give you early code and
&gt; design/UX feedback to improve the odds of us accepting your patch :)
&gt; 
&gt; best,
&gt; -Richard
&gt; 
&gt; 
&gt; On 11/9/19 4:04 PM, sarpedon montecarlo wrote:
&gt; &gt; Hello to the community!
&gt; &gt; my first question is that is there a solution for rapid development of
&gt; &gt; tbb? i was wondering that each time a contributor wants to change
&gt; &gt; something in the tbb or add extra functionality, they have to go through
&gt; &gt; the build process which i just guess would be very time consuming. i was
&gt; &gt; wondering that is there any containerized environment for this? any
&gt; &gt; docker ecosystem available or other solutions that might help?
&gt; &gt; my second question is about the changes that i want to implement. i am
&gt; &gt; interested into the graphical settings page about bridges and tor
&gt; &gt; process that currently tbb is exposing to the end users. if we want to
&gt; &gt; add more functionality into this settings page, where should we start to
&gt; &gt; change? and is there any possibility that we may have some control over
&gt; &gt; the underlying tor process as well, for instance controlling it's
&gt; &gt; launching or it's torrc configuration; because as i see, there must be a
&gt; &gt; link between the graphical interface of tbb and the underlying tor
&gt; &gt; process so that is the way we can control bridges for instance. similar
&gt; &gt; to this i was planning to add more graphical options to the interface
&gt; &gt; for controlling other configuration aspects of the tor process through
&gt; &gt; it's torrc or other workarounds.
&gt; &gt; in the past i have achieved this by writing a browser extension that
&gt; &gt; benefits from native messaging for communication to the tor process; but
&gt; &gt; this is not really performance friendly and an intuitive experience for
&gt; &gt; the end users.i am not satisfied with the result. so i was interested on
&gt; &gt; mirroring these functionalities inside tbb.
&gt; &gt; i really appreciate your insights and thoughts on the matter,
&gt; &gt; have a great day,
&gt; &gt; Sarpedon.
&gt; &gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


[Attachment #7 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi Richard, this is great!&lt;div&gt;I appreciate all the \
insights you gave me.&lt;/div&gt;&lt;div&gt;about the build setup i would definitely  go with \
your suggestion. maybe it would be  possible to also use these build scripts inside a \
docker composer for a reload on demand during development. and about windows,   it is \
a requirement for my situation , but i just saw some build scripts regarding windows \
in the tbb repo you mentioned; i would be happy to hear from you about tips and \
tricks regarding windows!&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;basically what i am \
about to implement are as below:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;img \
src="cid:ii_k2yj0iw05" alt="image.png" width="472" \
height="212"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;div&gt;&lt;img \
src="cid:ii_k2yj1i6d6" alt="image.png" width="472" \
height="282"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;img \
src="cid:ii_k2yigapj4" alt="image.png" width="472" \
height="258"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;above screen shots are from the \
browser extension that i have already implemented and want to integrate with the \
tbb.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;1) padding is the time period which i send random \
packets to random destinations for generating fake browsing \
pattern.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;2) rotation is a fancy name for  \
MaxCircuitDirtiness&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;3) idle timeout is a custom clock which \
will close the tbb automatically in case of no interaction from the \
user&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;4) use proxy &amp; use bridge is already available \
inside tbb&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;5) entry, middle and exit countries will fill the \
torrc with user selected options&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;based on the commit you \
mentioned for   "about:preferences#tor pane", i believe that commit is the \
right place i should start coding.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best \
Regards,&lt;/div&gt;&lt;div&gt;Sarpedon&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;On Wed, Nov 13, 2019 at 9:33 PM Richard Pospesel &lt;&lt;a \
href="mailto:richard@torproject.org"&gt;richard@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Hey Sarpedon,&lt;br&gt; &lt;br&gt;
The tor-browser-build project (&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/builders/tor-browser-build.git/" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/builders/tor-browser-build.git/&lt;/a&gt; \
) can be&lt;br&gt; used to build tor-browser for all the various environments, and you \
can&lt;br&gt; updated the /projects/firefox/config file to point to your own git repo&lt;br&gt;
and commit for development. Unfortunately this is not particularly fast,&lt;br&gt;
but it's really the only way to go if you need builds for platforms&lt;br&gt;
other than Linux.&lt;br&gt;
&lt;br&gt;
Alternatively, you can just build tor-browser (&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/tor-browser.git/" rel="noreferrer" \
target="_blank"&gt;https://gitweb.torproject.org/tor-browser.git/&lt;/a&gt; ), and copy the \
relevant&lt;br&gt; bits over an existing tor-browser install. This is the workflow I \
use&lt;br&gt; during development on Linux and is generally pretty straight forward to&lt;br&gt;
use once you have scripts setup to do the deploying.&lt;br&gt;
&lt;br&gt;
It's theoretically possible to get this sort of incremental build setup&lt;br&gt;
working for other platforms (ie building windows bins in a linux dev&lt;br&gt;
environment), but it's a pain and would require delving into the&lt;br&gt;
tor-browser-build firefox build and config scripts. I've done it before&lt;br&gt;
for our older windows build target (before we switched to clang and&lt;br&gt;
friends) and can give you some tips on how to do that if necessary.&lt;br&gt;
&lt;br&gt;
The Tor Browser Hacking Guide should be a good resource as well, though&lt;br&gt;
it is a living document so might be out of date:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking" \
rel="noreferrer" target="_blank"&gt;https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
If you're interested in updating/improving/adding to the&lt;br&gt;
about:preferences#tor pane, than you can start by looking at this commit&lt;br&gt;
which added the page:&lt;br&gt;
&lt;br&gt;
&lt;a href="https://gitweb.torproject.org/tor-browser.git/commit/?h=tor-browser-68.2.0esr-9.5-1&amp;id=bea7e61c120f207e7e1a65041b44dc1998e3656a" \
rel="noreferrer" target="_blank"&gt;https://gitweb.torproject.org/tor-browser.git/commit/ \
?h=tor-browser-68.2.0esr-9.5-1&amp;id=bea7e61c120f207e7e1a65041b44dc1998e3656a&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
In general, the relevant things there are in:&lt;br&gt;
&lt;br&gt;
/browser/components/torpreferences/*&lt;br&gt;
/browser/modules/TorProtocolService.jsm&lt;br&gt;
/browser/modules/TorStrings.jsm&lt;br&gt;
&lt;br&gt;
What sort of improvements are you looking to add? If you're interested&lt;br&gt;
in submitting a patch, you should open a ticket that tracks whatever&lt;br&gt;
feature you're looking to add. There we can give you early code and&lt;br&gt;
design/UX feedback to improve the odds of us accepting your patch :)&lt;br&gt;
&lt;br&gt;
best,&lt;br&gt;
-Richard&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
On 11/9/19 4:04 PM, sarpedon montecarlo wrote:&lt;br&gt;
&gt; Hello to the community!&lt;br&gt;
&gt; my first question is that is there a solution for rapid development of&lt;br&gt;
&gt; tbb? i was wondering that each time a contributor wants to change&lt;br&gt;
&gt; something in the tbb or add extra functionality, they have to go through&lt;br&gt;
&gt; the build process which i just guess would be very time consuming. i was&lt;br&gt;
&gt; wondering that is there any containerized environment for this? any&lt;br&gt;
&gt; docker ecosystem available or other solutions that might help?&lt;br&gt;
&gt; my second question is about the changes that i want to implement. i am&lt;br&gt;
&gt; interested into the graphical settings page about bridges and tor&lt;br&gt;
&gt; process that currently tbb is exposing to the end users. if we want to&lt;br&gt;
&gt; add more functionality into this settings page, where should we start to&lt;br&gt;
&gt; change? and is there any possibility that we may have some control over&lt;br&gt;
&gt; the underlying tor process as well, for instance controlling it's&lt;br&gt;
&gt; launching or it's torrc configuration; because as i see, there must be a&lt;br&gt;
&gt; link between the graphical interface of tbb and the underlying tor&lt;br&gt;
&gt; process so that is the way we can control bridges for instance. similar&lt;br&gt;
&gt; to this i was planning to add more graphical options to the interface&lt;br&gt;
&gt; for controlling other configuration aspects of the tor process through&lt;br&gt;
&gt; it's torrc or other workarounds.&lt;br&gt;
&gt; in the past i have achieved this by writing a browser extension that&lt;br&gt;
&gt; benefits from native messaging for communication to the tor process; but&lt;br&gt;
&gt; this is not really performance friendly and an intuitive experience for&lt;br&gt;
&gt; the end users.i am not satisfied with the result. so i was interested on&lt;br&gt;
&gt; mirroring these functionalities inside tbb.&lt;br&gt;
&gt; i really appreciate your insights and thoughts on the matter,&lt;br&gt;
&gt; have a great day,&lt;br&gt;
&gt; Sarpedon.&lt;br&gt;
&gt; &lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&gt; &lt;br&gt; &lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


["image.png" (image/png)]
["image.png" (image/png)]
["image.png" (image/png)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191114193849</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2019-11-14 19:38:49-0400</timestampReceived><subject>Re: [tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; and about windows,
&gt; it is a requirement for my situation , but i just saw some build scripts
&gt; regarding windows in the tbb repo you mentioned; i would be happy to
&gt; hear from you about tips and tricks regarding windows!

So tor-browser-build lets us make all our build targets (windows, mac,
android, etc) on a Linux host (I'm 99% sure those of us using it are all
using Debian or Debian derivatives).

If you are stuck using windows for whatever reason there may be a few
options (though none of them are particularly good):

It *may* be possible to get tor-browser-build working in the new Windows
Subsystem for Linux in Windows 10, but to my knowledge no has tried it.
Maybe you can just clone the repo, apt-get the dependencies and go.

Another option for you would be running a Debian VM in
HyperV/VirtualBox/etc and running tor-browser-build there, but that
first build will definitely take awhile.

Yet another option would be to acquire the tor-browser-build build
artifacts necessary to build Windows firefox, and setup a Debian build
environment (via your preferred virtualization method) and replicate the
firefox project's build process.

&gt; 1) padding is the time period which i send random packets to random
&gt; destinations for generating fake browsing pattern.

I'm not sure what this is supposed to accomplish, and my first instinct
is that this is a very bad idea. See
https://2019.www.torproject.org/projects/torbrowser/design/#idm660 for
discussion around why we don't use randomization as a strategy to avoid
fingerprinting. I highly doubt we would want anything like this in Tor
Browser

&gt; 2) rotation is a fancy name for MaxCircuitDirtiness

I feel like this is a sort of knob that only 'advanced' users
should/would use, an as such keeping it in the torrc and not exposing it
in the user-facing preferences page is probably best. We generally want
to avoid leaving foot-guns laying around.

&gt; 3) idle timeout is a custom clock which will close the tbb automatically
&gt; in case of no interaction from the user

Could be a neat off-by-default option to have in the 'Privacy &amp;
Security' page (as it is not tor-specific). I'm not sure if we'd accept
this feature but I think a case could be made.

&gt; 4) use proxy &amp; use bridge is already available inside tbb

Indeed

&gt; 5) entry, middle and exit countries will fill the torrc with user
&gt; selected options

This one actually intrigues me a little bit. There are certainly
situations where on a per-site basis controlling which country your exit
is can be useful (for avoiding IP-based censorship, 'this video not
available in your country' nonsense). As it is the current 'hit new
circuit until it works' workflow is not the best.

I don't see any particular benefit exposing this level of control over
guard and middle relays, nor do I think the exits should be a global
setting. The level of control exposed as you have in these screenshots
seems like another foot-gun.

best,
-Richard

On 11/14/19 1:55 AM, sarpedon montecarlo wrote:
&gt; Hi Richard, this is great!
&gt; I appreciate all the insights you gave me.
&gt; about the build setup i would definitely  go with your suggestion. maybe
&gt; it would be  possible to also use these build scripts inside a docker
&gt; composer for a reload on demand during development. and about windows,  
&gt; it is a requirement for my situation , but i just saw some build scripts
&gt; regarding windows in the tbb repo you mentioned; i would be happy to
&gt; hear from you about tips and tricks regarding windows!
&gt; 
&gt; basically what i am about to implement are as below:
&gt; 
&gt; image.png
&gt; 
&gt; image.png
&gt; 
&gt; image.png
&gt; 
&gt; above screen shots are from the browser extension that i have already
&gt; implemented and want to integrate with the tbb.
&gt; 
&gt; 1) padding is the time period which i send random packets to random
&gt; destinations for generating fake browsing pattern.
&gt; 
&gt; 2) rotation is a fancy name for  MaxCircuitDirtiness
&gt; 
&gt; 3) idle timeout is a custom clock which will close the tbb automatically
&gt; in case of no interaction from the user
&gt; 
&gt; 4) use proxy &amp; use bridge is already available inside tbb
&gt; 
&gt; 5) entry, middle and exit countries will fill the torrc with user
&gt; selected options
&gt; 
&gt; based on the commit you mentioned for   "about:preferences#tor pane", i
&gt; believe that commit is the right place i should start coding.
&gt; 
&gt; Best Regards,
&gt; Sarpedon
&gt; 
&gt; On Wed, Nov 13, 2019 at 9:33 PM Richard Pospesel &lt;richard@torproject.org
&gt; &lt;mailto:richard@torproject.org&gt;&gt; wrote:
&gt; 
&gt; Hey Sarpedon,
&gt; 
&gt; The tor-browser-build project (
&gt; https://gitweb.torproject.org/builders/tor-browser-build.git/ ) can be
&gt; used to build tor-browser for all the various environments, and you can
&gt; updated the /projects/firefox/config file to point to your own git repo
&gt; and commit for development. Unfortunately this is not particularly fast,
&gt; but it's really the only way to go if you need builds for platforms
&gt; other than Linux.
&gt; 
&gt; Alternatively, you can just build tor-browser (
&gt; https://gitweb.torproject.org/tor-browser.git/ ), and copy the relevant
&gt; bits over an existing tor-browser install. This is the workflow I use
&gt; during development on Linux and is generally pretty straight forward to
&gt; use once you have scripts setup to do the deploying.
&gt; 
&gt; It's theoretically possible to get this sort of incremental build setup
&gt; working for other platforms (ie building windows bins in a linux dev
&gt; environment), but it's a pain and would require delving into the
&gt; tor-browser-build firefox build and config scripts. I've done it before
&gt; for our older windows build target (before we switched to clang and
&gt; friends) and can give you some tips on how to do that if necessary.
&gt; 
&gt; The Tor Browser Hacking Guide should be a good resource as well, though
&gt; it is a living document so might be out of date:
&gt; 
&gt; https://trac.torproject.org/projects/tor/wiki/doc/TorBrowser/Hacking
&gt; 
&gt; If you're interested in updating/improving/adding to the
&gt; about:preferences#tor pane, than you can start by looking at this commit
&gt; which added the page:
&gt; 
&gt; https://gitweb.torproject.org/tor-browser.git/commit/?h=tor-browser-68.2.0esr-9.5-1&amp;id=bea7e61c120f207e7e1a65041b44dc1998e3656a
&gt;  
&gt; In general, the relevant things there are in:
&gt; 
&gt; /browser/components/torpreferences/*
&gt; /browser/modules/TorProtocolService.jsm
&gt; /browser/modules/TorStrings.jsm
&gt; 
&gt; What sort of improvements are you looking to add? If you're interested
&gt; in submitting a patch, you should open a ticket that tracks whatever
&gt; feature you're looking to add. There we can give you early code and
&gt; design/UX feedback to improve the odds of us accepting your patch :)
&gt; 
&gt; best,
&gt; -Richard
&gt; 
&gt; 
&gt; On 11/9/19 4:04 PM, sarpedon montecarlo wrote:
&gt; &gt; Hello to the community!
&gt; &gt; my first question is that is there a solution for rapid development of
&gt; &gt; tbb? i was wondering that each time a contributor wants to change
&gt; &gt; something in the tbb or add extra functionality, they have to go
&gt; through
&gt; &gt; the build process which i just guess would be very time consuming.
&gt; i was
&gt; &gt; wondering that is there any containerized environment for this? any
&gt; &gt; docker ecosystem available or other solutions that might help?
&gt; &gt; my second question is about the changes that i want to implement. i am
&gt; &gt; interested into the graphical settings page about bridges and tor
&gt; &gt; process that currently tbb is exposing to the end users. if we want to
&gt; &gt; add more functionality into this settings page, where should we
&gt; start to
&gt; &gt; change? and is there any possibility that we may have some control
&gt; over
&gt; &gt; the underlying tor process as well, for instance controlling it's
&gt; &gt; launching or it's torrc configuration; because as i see, there
&gt; must be a
&gt; &gt; link between the graphical interface of tbb and the underlying tor
&gt; &gt; process so that is the way we can control bridges for instance.
&gt; similar
&gt; &gt; to this i was planning to add more graphical options to the interface
&gt; &gt; for controlling other configuration aspects of the tor process through
&gt; &gt; it's torrc or other workarounds.
&gt; &gt; in the past i have achieved this by writing a browser extension that
&gt; &gt; benefits from native messaging for communication to the tor
&gt; process; but
&gt; &gt; this is not really performance friendly and an intuitive
&gt; experience for
&gt; &gt; the end users.i am not satisfied with the result. so i was
&gt; interested on
&gt; &gt; mirroring these functionalities inside tbb.
&gt; &gt; i really appreciate your insights and thoughts on the matter,
&gt; &gt; have a great day,
&gt; &gt; Sarpedon.
&gt; &gt; 
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; &gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191115191338</emailId><senderName>"Drew () FoundingDocuments ! org"</senderName><senderEmail>drew@foundingdocuments.org</senderEmail><timestampReceived>2019-11-15 19:13:38-0400</timestampReceived><subject>Re: [tor-dev] introduce some customization on the tbb</subject><body>

[Attachment #2 (multipart/alternative)]


I bring this up in this thread because of its timeliness. Please excuse me if you are \
offended, no offense intended. This is email is fundamentally a feature request. 

Sarpedon, I had not yet gotten as far as you towards GUI customization of torrc \
options. And I've not yet thought through the whole flow so as to be able to write a \
decent trac ticket. 

I would love to see one line added to the Tor Browser Button: SIGHUP Tor. Obviously \
the verbiage would have to be user friendly. 

The main reason for this is due to having changed the torrc (files) and wanting to \
reload tor.real but not wanting to quit Tor Browser then re-open it. 


[Attachment #5 (unknown)]

&lt;html&gt;&lt;body style="word-wrap: break-word; -webkit-nbsp-mode: space; \
-webkit-line-break: after-white-space;" class=""&gt;I bring this up in this thread \
because of its timeliness. Please excuse me if you are offended, no offense intended. \
This is email is fundamentally a feature request. &lt;div class=""&gt;&lt;br \
class=""&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font face="Optima-Regular" class=""&gt;Sarpedon, I had not \
yet gotten as far as you towards GUI customization of torrc options. And I've not yet \
thought through the whole flow so as to be able to write a decent trac \
ticket. &lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font face="Optima-Regular" class=""&gt;&lt;br \
class=""&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font face="Optima-Regular" class=""&gt;I would love \
to see one line added to the Tor Browser Button: SIGHUP Tor. Obviously the verbiage \
would have to be user friendly. &lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font \
face="Optima-Regular" class=""&gt;&lt;br class=""&gt;&lt;/font&gt;&lt;/div&gt;&lt;div class=""&gt;&lt;font \
face="Optima-Regular" class=""&gt;The main reason for this is due to having changed the \
torrc (files) and wanting to reload tor.real but not wanting to quit Tor Browser then \
re-open it. &lt;/font&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191002221947</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-10-02 22:19:47-0400</timestampReceived><subject>Re: [tor-dev] Exposing onion service errors to Tor Browser</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Drew@FoundingDocuments.org:
&gt; Please forgive me if I misunderstand things, but I thought leaked v3.onion \
&gt; addresses with (properly set up) authorized onion services \
&gt; (authorized_clients/*.auth &amp; corresponding client-side .auth_private) can't be \
&gt; loaded. Thus providing instant, inexpensive DOS protection, and denying the \
&gt; malevolent (and anyone) the opportunity to even know a specific onion address is in \
&gt; use. And keeping them from trying again later, and again, etc. 
&gt; I am definitely in favor of feedback and clear error reporting, but I am not clear \
&gt; about how these authorization-only onion services will be affected.  
&gt; Is tor going to be changed such that unauthorized clients -- clients without a \
&gt; proper .auth_private file -- are going to be able to learn if a specific .onion \
&gt; domain is in use? Will the local tor inform the user that in effect that onion \
&gt; address is in use but perhaps X'F4' or X'F5' ?

AFAIK this proposal has nothing to do with changing the Tor onion
service protocol; it's solely related to conveying errors to the user
that the Tor daemon used by Tor Browser already has access to.  The
security properties of onion services can't be changed by this -- if
they could be, then this would be security by obscurity, which is a scam
that the Tor devs (and any other legitimate software developers) don't
engage in.

Cheers,
-- 
-Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191011213035</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-10-11 21:30:35-0400</timestampReceived><subject>[tor-dev] maint-0.4.2 is now a separate branch; master is now 0.4.3.x</subject><body>

Hi!

If you're writing a patch that needs to go into Tor 0.4.2.x, please
base it on the new "maint-0.4.2" branch.  The "master" branch is now
for developing the new and exciting Tor 0.4.3.x.

If you use git-pull-all.sh, git-push-all.sh, or git-merge-forward.sh,
please be sure to update to the latest versions in the master branch;
they know about the maint-0.4.2 and release-0.4.2 branches.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191015094016</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2019-10-15 09:40:16-0400</timestampReceived><subject>Re: [tor-dev] Proposal 271 - improvements</subject><body>

Hello,

On 14/10/2019 13:29, Roger Dingledine wrote:
&gt; On Mon, Oct 14, 2019 at 07:56:29AM +0000, Florentin Rochet wrote:
&gt;&gt; We are suggesting a straightforward fix to the problem, which 
&gt;&gt; is, roughly speaking, to choose primary guards in the order in which 
&gt;&gt; they were sampled.
&gt; This looks like a good solution to the issue -- the ordering of the
&gt; guards as we select them is proportional to their weight, so let's just
&gt; use them in the order that we selected them.
&gt;
&gt; One of the tricky features of the prop#271 guard selection design is that
&gt; it won't just keep on choosing guards if many are unreachable, but rather
&gt; it will stop after a while, so a bad ISP can't totally control what guard
&gt; you pick. I think that feature is left untouched by your design change,
&gt; since we're choosing from among only the same set as before, just in a
&gt; different order. But please think about whether that is true.

Yes, so I think this patch is actually improving this goal since the bad
ISP has first to exhaust the sampled list to have a chance to get in.


&gt;&gt; We have created a patch implementing this fix for the 
&gt;&gt; case affecting our experiments, which would improve the current 
&gt;&gt; situation. We are further suggesting that Tor apply the technique 
&gt;&gt; throughout the guard-selection logic.
&gt; Can you help us make sure we think of all the places you've already
&gt; thought of? :)

Sure! This is mostly code cleanup (as the confirmed ordering is not
meaningful anymore), tests unit cleanup and a bit of spec rewriting (the
reverse order of steps might be preferable, though :)

I would be happy reviewing any final patch. I could also do the patch
myself after my current work is submitted.  

&gt; &lt;skip&gt;
&gt;&gt;  The design also reduces Tor's security by increasing the 
&gt;&gt; number of clients that an adversary running small relays can observe. In 
&gt;&gt; addition, an adversary has to wait less time than it should after it 
&gt;&gt; starts a malicious guard to be chosen by a client. This weakness occurs 
&gt;&gt; because the malicious guard only needs to enter the sampled list to have 
&gt;&gt; a chance to be chosen as primary, rather than having to wait until all 
&gt;&gt; previously-sampled guards have already expired.
&gt; This part makes me wonder about another angle to this problem: proper
&gt; load balancing when we choose our guards on one date but then make
&gt; decisions about them on a different date.
&gt;
&gt; For example, if we sample all these guards on day 0, and then use
&gt; the first guard for a week, and then move to the second guard... but
&gt; the weights have changed in that time... what will that do to our
&gt; load balancing? One extreme case would be a relay that has a really
&gt; high weight for a while, and then later turns out to have much lower
&gt; bandwidth. It gets into a bunch of guard lists at first (but mostly not
&gt; #1 since that's how the probabilities work), and then slowly clients
&gt; shift load to it as their #1 guard goes away.
&gt;
&gt; In an ideal world we would want to take into account current guard
&gt; weights, when we're shifting from one guard to the next, rather than
&gt; making that decision way earlier before we actually turn out to need
&gt; the guards. Maybe that argues for delaying more of the decisions?
&gt;
&gt; Note that this question is about yet another improvement that could be
&gt; made to the guard part of path selection, and I think it's orthogonal
&gt; to the improvement you are proposing.

I guess the amount of work is also dependent of how far we want to go.
As you mention, there are still load-balancing problems when "we choose
our guards on one date but then make decisions about them on a different
date". It is possible to get this fixed by removing the sampled list
and, instead, keeping an history a previously sampled guards. When
moving to the next guard, we could consider *current* weights and make
the decision. The history should resist attacks that try to force
clients onto compromised guards, using relays that are part of the
history if they're still available (in sample order), and by tracking
its size.

That second improvement seems to be a deeper refactoring of the proposal
and the code, but it could be interesting, especially when hundreds of
relays get an EoL network-reject. There might be some domino effect at
play here, because some % of clients got a rotation of their EoL guard.

Is there any argument not to do both?

1) Applying this patch and extending the technique throughout the guard
selection logic should be straightforward and solve most of the problem
(should be fast to get).
2) Deeper refactoring of the proposal as you mention (note, this
shouldn't make the step 1 useless, as the logic should be reused here).

I've opened a trac ticket for 1)
https://trac.torproject.org/projects/tor/ticket/32088

Best,

Florentin

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191023153944</emailId><senderName>Jean Paul Degabriele</senderName><senderEmail>jpdega@gmail.com</senderEmail><timestampReceived>2019-10-23 15:39:44-0400</timestampReceived><subject>Re: [tor-dev] Comparing Proposals 295 and 308</subject><body>

[Attachment #2 (multipart/alternative)]


Hello everyone,

Below is our response to the main issues raised by Tomer in his previous
email. We went into some detail in order to better convey the severity of
the issues we raised. In summary the main points are the following:

1) The feedback in the polynomial hash is dangerous and renders the overall
   security of proposal 295 unclear. This is not a mere technicality as
   evidenced by our attack below. We show, for a reasonable choice of hash
   function, an attack that breaks basic IND-CPA security of the original
   specification of proposal 295.

2) Proposals 202 and 261 already mention forward security as a desirable
   feature. Proposal 295 provides no forward security at all - see the
   attack below. Even if the hash function in 295 is replaced with SHA3,
   at the expense of a substantial toll in performance, proposal 308 would
   still offer better forward security.

3) A main observation in 308 is that in order to protect against tagging
   attacks, RUP security is not needed at the uppermost layer. It is by
   making that deviation that 308 manages to attain forward security, in a
   provable way, without deteriorating the efficiency. (We actually expect
   it to be faster than 295 as the last node requires only 2 passes Instead
   of 3). Tomer makes a valid point that having RUP security at the
uppermost
   layer would be beneficial in the event that an implementation screws up
   that particular IF statement. However, as we explain below, in the
specific
   case of Tor we do not expect this to be much of an issue.

A more in-depth technical discussion of these points is provided below.
We start by stating our case as to why the basic security of 295 does not
stand on solid ground, then discuss its forward insecurity, and finally
argue why we believe RUP is largely irrelevant as an end-to-end design
goal for Tor.

Overall, the security of 295 is currently unclear and it most likely
requires
changes (from GHASH to a more costly and heavy weight primitive). As far
as we can see, the only benefit that this modified 295 would have over 308
is
end-to-end RUP security. On the other hand 308 offers forward security
(whereas 295 does not), better performance, and it follows well-established
design choices. Moreover, forward security is not easy to add on for any
scheme,
especially when considering leaky pipes. We advocate that a scheme should
be designed and analysed as a whole and are worried that 295 would require
considerable modifications to attain provable, ordinary security, let alone
meaningful forward security.


(1) ``SUBTLETIES'' CONCERNING THE (IN)SECURITY OF PROPOSAL 295.
    Proposal 295 is based on [ADL17]. In [ADL17] a proof of security is
provided to
    obtain authenticated encryption secure against release of unverified
plaintext.
    [ADL17] crucially relies on a wide-tweak tweakable blockcipher. In
proposal
    295 this wide-tweak tweakable blockcipher is instantiated with a
universal
    hash function (GHASH) combined with AES in XEX mode, following results
in
    [ST13], [MI15] and [LRW02].

    However, the problem is that all that theory only applies to a setting
where
    the tweakable blockcipher is called as a stateless whole. In proposal
295
    the output of the universal hash function (T'_1, T'_2, T'_3, T'_4) is
fed
    back into the input of the next invocation of this universal hash
function.
    This mechanism, designed to prevent replay and reorder attacks, results
in
    an unfortunate key-dependency that invalidates the idea that the
universal
    hash together with AES in XEX modes operates as a tweakable blockcipher.
    We disagree that this key-dependency is just a subtlety and we don't
see a
    straightforward way to fix it in a security proof. In general, dealing
with
    key-dependency in security proofs is far from trivial.

    Our observation that feeding a key-dependent input to a polynomial hash
    breaks down the security proof goes beyond the proof in [ADL17]. Indeed
    the results in [ST13], [MI15], [LRW02] all require the hash function to
be
    Almost-XOR-Universal (AXU) and similarly the security of GCM and GCM-SIV
    rests on GHASH and POLYVAL being AXU secure. Now our point is that the
    feedback employed in 295 is outside the model of AXU security and it
    invalidates the results in [ADL17], [ST13], [MI15], [LRW02]. Addressing
this
    issue requires either major alterations to the results in [MI15] and
[LRW02]
    to cater for this feedback or identifying a new non-standard security
    property for the hash function which suffices to prove the security of
295
    and show that POLYVAL or GHASH satisfy that property.

    To see that feeding the digest of an AXU hash back into its input is
    dangerous and not just a theoretical curiosity, consider the following.
For
    fixed-size inputs A = A1||..||Am (consisting of m blocks each of which
    represents an element in GF(2^n)) and a hash key K \in GF(2^n), the hash
    function defined by H(K,A) = A1.K + .. + Am.K^m is a perfectly valid AXU
    hash. Now we construct inputs A, B, and C as follows:

    A = A1||0^n||..||0^n,
    B = Ta||-A1||0^n||...||0^n where Ta = H(K,A),
    D = Tb||0^n||...||0^n where Tb = H(K,B).

    As you can see B contains the digest of A, and D contains the digest of
B.
    Now, evaluating the digests of A and B we get that:

    H(K,A) = A1.K = Ta
    H(K,B) = Ta.K -A1.K^2 = A1.K^2 - A1.K^2 = 0 = Tb
    H(K,D) = 0

    As you can see, irrespective of the value of the key K, we are able to
set
    H(K,B) = 0 (with probability 1), and even worse we have that H(K,B) =
H(K,D)
    = 0 for B \neq D. This should not be possible for an AXU hash, but
because
    inputs B and D are key-dependent this is now possible.

    Note how this corresponds to the setting in 295 (see
    https://people.torproject.org/~nickm/prop295/cascade.pdf) where T' is
    initialised to a fixed known value -- in this case A1. Then the above
choice
    of messages (M = -A1||0^n||...||0^n and M' = 0^n||...||0^n) would
result in
    identical values of N_4 and consequently related layer-3 ciphertexts,
where
    C_3 \xor C'_3 = M \xor M', thereby breaking IND-CPA security. At a more
    fundamental level, this attack also serves to show that the combination
of
    AXU hash and block cipher, in this feedback configuration, does not
yield a
    secure tweakable block cipher.

    Looking at the email discussion from July 11th, 295 originally
specified T'
    to be initialised to a constant value but was later amended to be
    initialised to a random secret value via the KDF. Thus, because of this
    feedback mechanism, the original proposal would have failed to satisfy
even
    basic IND-CPA security. Moreover, the change in the way T' is
initialised
    seems to have been adopted only as an extra precautionary measure
(proposed
    by Nick) rather than purposefully to stifle this attack. We hope that
this
    convinces you that although it looks like a minor difference the
feedback
    mechanism has significant consequences on security. We didn't find an
attack
    on 295 in its current form and it might be possible to prove it secure.
However
    it should be noted that it is a rather unorthodox construction which
deviates
    significantly from the way that AXU hash functions (like GHASH and
POLYVAL)
    are normally used and thus its security simply cannot be taken for
granted.
    The construction appears brittle and would need a dedicated security
    analysis.

    A secondary issue is the choice of hash function. Proposal 295
specifies an
    Almost-XOR-Universal hash function (GHASH), though later in July 2019,
Tomer
    suggested that, in the context of forward security one would probably
need
    something stronger and more costly, referring detailed analysis (and see
    below). From the most recent email we get the impression that Proposal
295
    should be understood to work with an AXU (as specified), although the
    statement "GHASH or POLYVAL or any other collision resistant hash
function
    are all the same to us" confuses us. Collision resistant hash functions
and
    AXU hash functions are really quite different beasts and GHASH and
POLYVAL
    are expressly not preimage or collision-resistant hash functions.

    Clearly, the choice of primitive affects both security and efficiency.
We
    contend that Proposal 295 should not be using an AXU, whereas our
proposal
    can.


(2) THE FORWARD (IN)SECURITY OF 295

    Note that forward security was already indicated as one of the desired
goals
    of new relay cryptography in proposals 202 and 261.

      "A more reasonable definition for forward secrecy would be that no
message
      can be decrypted *after* the state (including ephemeral secrets) that
was
      used to generate this message was replaced."

    In general the security goal should be independent of the internal
workings
    of a scheme, and hence it should not depend on when the scheme updates
its
    state. Rather it is the other way round: forward security requires that
once
    a message has been decrypted, the state ought to be updated immediately.
    The literature on forward security conforms to this principle as well.

      "I find that the attack is not very convincing."

    It is true that the attack we described in our previous email recovers
only
    the last ciphertext. However this was under the assumption that the hash
    function is a *random oracle*. This was meant to show that even for a
    stronger and less efficient choice of hash function (like SHA3) 295
would
    still not be able to attain full-fledged forward security. However,
with a
    hash function like GHASH or POLYVAL, the situation is much worse as 295
    provides no forward security whatsoever. Referring once again to the
    notation used in:
https://people.torproject.org/~nickm/prop295/cascade.pdf
    consider the following attack. Given the current state of the exit node
    (Ktf3, Khf3, T'_3, T'_4) and the sequence of prior ciphertexts pairs
(N3,
    C3), the attacker can use this information to recover previous values of
    T'_3 and T'_4. Let T''_3 represent the preceding value of T'_3, then
T'_3 =
    GHASH(Khf3, T''_3 || C_3) which yields a linear equation with only one
    unknown: T''_3. A similar situation arises for T''_4 an it thus can
also be
    recovered. Once T''_3 and T''_4 are recovered, the same process can be
    repeated to recover the previous values in an iterative fashion. Note
that
    this recovers all key and state material thereby allowing the
decryption of
    all prior ciphertexts.


(3) AUTHENTICATION AND THE IF STATEMENT.

      "authentication of the last node depends solely on the proper
execution
      of the IF statement on Line 266. As a result, if this line is skipped
for
      some reason (e.g., because an adversary corrupted the last node, a
bug,
      or as a result of over-optimization), modified messages may leave the
      network. "

    Both 295 and 308 have an IF statement that if bypassed authenticity
would be
    broken. The difference is that in 308 the adversary would have control
over
    the plaintext (a chosen forgery), whereas in 295 the plaintext would be
    randomised (an existential forgery). This is the only difference here.
For
    general AEAD schemes this would normally be considered as providing
    robustness against misuse. However in the specific case of Tor we do
not see
    this to be much of an issue for the reasons set out below. This choice
has
    an effect on efficiency: the last round in 308 requires only *two
passes*
    whereas 295 requires *three passes*. Thus the last layer decryption in
308
    is more efficient than 295 thereby reducing the load on the exit nodes.

    Now consider the scenarios listed by Tomer in which the IF statement
could
    be skipped:

    a) The last node is corrupted - If the exit node is corrupted then no
       authenticity is possible. Remember that authenticity is only
end-to-end
       and if the last node is corrupted it can always output any message
of its
       choice.

    b) Thus the only setting where it makes sense to consider this
possibility
       is that of a bad implementation. However, to begin with, Tor is a
       relatively closed ecosystem, in that there aren't that many
       implementations of onion relays. More importantly however, such a
flaw is
       unlikely to go unnoticed as it would affect correct functionality
due to
       the leaky-pipe architecture. If a ciphertext is accepted even when
the IF
       statement fails then that would cause an intermediate onion router to
       recognise the ciphertext as its own and consequently the ciphertext
would
       not reach the intended recipient. As such the likelihood of such a
bug
       seems rather remote.


Best,

Martijn, Alessandro, and Jean Paul

----------------------------------------------

[LRW02] M. Liskov, R. Rivest, D. Wagner, "Tweakable block ciphers", CRYPTO
2002.

[MI15] K. Minematsu and T. Iwata, "Tweak-Length Extension for Tweakable
Blockciphers", IMACC 2015.

[ADL17] Tomer Ashur, Orr Dunkelman, Atul Luykx, "Boosting Authenticated
Encryption Robustness with Minimal Modifications", CRYPTO 2017.

[ST13] Thomas Shrimpton, R. Seth Terashima, "A Modular Framework for
Building
Variable-Input Length Tweakable Ciphers", ASIACRYPT 2013.

On Wed, Oct 16, 2019 at 10:57 AM Tomer Ashur &lt;tomer.ashur@esat.kuleuven.be&gt;
wrote:

&gt; Dear all,
&gt;
&gt; Some time ago I sent to this mailing list a proposal for using the ADL
&gt; construction to solve the crypto tagging attack and it was registered as
&gt; Proposal 295. Then, about a month ago Jean Paul Degabriele sent another
&gt; proposal aiming for the same, which was registered as Proposal 308. We've
&gt; now had the chance to compare both proposals and we provide our
&gt; observations below.  But before we discuss the pros and cons of each
&gt; proposal, I'd like to re-state our goal for Proposal 295. Our aim was to
&gt; build something that:
&gt;
&gt; 1. does not lose any security guarantees that are already in place;
&gt;
&gt; 2. prevents successful crypto-tagging; and
&gt;
&gt; 3. does not introduce new weaknesses.
&gt;
&gt; We *did not* consider advanced security goals such as forward secrecy
&gt; and/or non-repudiation which was also mentioned earlier on this mailing
&gt; list.
&gt;
&gt;
&gt;
&gt; In achieving these goals, the two proposals are almost the same: for the
&gt; encryption part, both use layered encryption where the nonce is tweaked
&gt; with a digest of the ciphertext, and sent in encrypted form to the next
&gt; node as part of the ciphertext. The only meaningful difference I could find
&gt; is that instead of using the output of the universal hash function (i.e.,
&gt; GHASH) as a running digest as is done in Proposal 295, Proposal 308 uses
&gt; the encrypted nonce. Jean Paul made the correct observation that our
&gt; security proof did not account for key-dependent input, but we believe that
&gt; this can be resolved by rewriting the proof. In either case, this is a
&gt; subtlety and common ground can be found. On a high level, both proposals
&gt; use the same mechanism to avoid crypto-tagging.
&gt;
&gt;
&gt;
&gt; Where the proposals differ is in the authentication part. Proposal 295
&gt; makes a functional separation between the encryption part and the
&gt; authentication part, cf. Lines 150-152 (authentication) and Lines 156-160
&gt; (layered encryption). Conversely, Proposal 308 does not offer such
&gt; separation, and the authentication and encryption of the last node are done
&gt; in a single pass (cf. Lines 227-230 and Lines 244-252). This comes with
&gt; what we think are two highly unwanted side effects defeating the purpose of
&gt; using the ADL construction to begin with: the authentication of the last
&gt; node depends solely on the proper execution of the IF statement on Line
&gt; 266. As a result, if this line is skipped for some reason (e.g., because an
&gt; adversary corrupted the last node, a bug, or as a result of
&gt; over-optimization), modified messages may leave the network. Moreover, the
&gt; last layer is malleable which means that a difference introduced to the
&gt; ciphertext entering the last node will be preserved through the final
&gt; decryption (given that the IF statement on Line 266 is skipped). This is
&gt; because the decryption nonce does not depend on the authentication process
&gt; (in the lingo of Proposal 308 this is called a "dynamic nonce").
&gt;
&gt;
&gt;
&gt; Comparing this to Proposal 295 we see that the same cannot happen. Any
&gt; change introduced at any point (including the ciphertext entering the last
&gt; node) will completely destroy the payload in an irrecoverable way (the same
&gt; happens in the "static layers" of Proposal 308; only the dynamic layer is
&gt; malleable).
&gt;
&gt;
&gt;
&gt; For the record, a corollary of all of this is that if Sf_I is leaked
&gt; (e.g., via a side channel in the generation process of Nf_I that is used by
&gt; the IF statement), the adversary now has the secret it needs to decrypt the
&gt; ciphertext regardless of the authentication process. Not being able to do
&gt; this is exactly what's captured by the RUP property used in Proposal 295 in
&gt; which the only way to obtain N_4 (the counterpart of Proposal 308's Nf_I)
&gt; is via a successful digest of an unmodified ciphertext.
&gt;
&gt;
&gt;
&gt; The place where Proposal 308 nicely extends over Proposal 295 is in the
&gt; forward secrecy domain. In an email to this mailing list we conjectured
&gt; that if certain changes are made to Proposal 295 it will provide forward
&gt; secrecy in addition to its crypto-tagging resistance. Jean Paul suggested
&gt; an attack against this conjecture, but I find that the attack is not very
&gt; convincing. Indeed, once the keys are leaked, the last message can be
&gt; recovered. But I don't think that there's anything surprising in the fact
&gt; that the set of keys that would have normally decrypted a message will also
&gt; do so if leaked to an adversary. A more reasonable definition for forward
&gt; secrecy would be that no message can be decrypted **after** the state
&gt; (including ephemeral secrets) that was used to generate this message was
&gt; replaced. Admittedly, Proposal 308 replaces this state earlier than
&gt; Proposal 295 (immediately after processing  the message vs. after
&gt; processing the next message), which may be desirable, but is anyway not
&gt; disastrous.
&gt;
&gt;
&gt;
&gt; That being said, this discussion is theoretic in nature since of the two
&gt; proposals, only Proposal 308 offers an actual mechanism. For Proposal 295
&gt; we only offer a conjecture. We also tend to somewhat agree that frequent
&gt; re-keying is a better way to achieve forward secrecy.
&gt;
&gt;
&gt;
&gt; Regardless of which is the better way, both can be built on top of the
&gt; encryption mechanism we offered in Proposal 295 whose goal is to resist
&gt; crypto-tagging. In the interest of moving forward we propose to implement
&gt; Proposal 295 as suggested or something close to it (e.g., using POLYVAL) to
&gt; counter crypto-tagging, then discuss alternatives to achieving forward
&gt; secrecy and add those on top of the ADL construction via Proposal 308.
&gt;
&gt;
&gt;
&gt; A few side notes:
&gt;
&gt; 1. Proposal 308 argues that POLYVAL is more suited than GHASH to our this
&gt; use-case. This is an implementation issue. GHASH or POLYVAL or any other
&gt; collision resistant hash function are all the same to us.
&gt;
&gt; 2. I'm pretty sure there's a typo on Line 250 in Proposal 308 and that the
&gt; text should be Y_I = Tf_{I+1} ^ X_I. Otherwise, I can't see how the
&gt; protocol decrypts on Line 285.
&gt;
&gt; 3. The lengths in Section 2.2 (marked for revision) are given in bytes,
&gt; but then in Section 2.3 they are treated as bits.
&gt;
&gt; 4. Line 230 has unbalanced parenthesis.
&gt;
&gt;
&gt;
&gt; Tomer
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello everyone,&lt;br&gt;&lt;br&gt;Below is our response to the main issues raised \
by Tomer in his previous&lt;br&gt;email. We went into some detail in order to better convey \
the severity of&lt;br&gt;the issues we raised. In summary the main points are the \
following:&lt;br&gt;&lt;br&gt;1) The feedback in the polynomial hash is dangerous and renders the \
overall&lt;br&gt;     security of proposal 295 unclear. This is not a mere technicality \
as&lt;br&gt;     evidenced by our attack below. We show, for a reasonable choice of \
hash&lt;br&gt;     function, an attack that breaks basic IND-CPA security of the \
original&lt;br&gt;     specification of proposal 295.&lt;br&gt;&lt;br&gt;2) Proposals 202 and 261 \
already mention forward security as a desirable&lt;br&gt;     feature. Proposal 295 \
provides no forward security at all - see the&lt;br&gt;     attack below. Even if the hash \
function in 295 is replaced with SHA3,&lt;br&gt;     at the expense of a substantial toll \
in performance, proposal 308 would&lt;br&gt;     still offer better forward \
security.&lt;br&gt;&lt;br&gt;3) A main observation in 308 is that in order to protect against \
tagging&lt;br&gt;     attacks, RUP security is not needed at the uppermost layer. It is \
by&lt;br&gt;     making that deviation that 308 manages to attain forward security, in \
a&lt;br&gt;     provable way, without deteriorating the efficiency. (We actually expect&lt;br&gt; \
it to be faster than 295 as the last node requires only 2 passes Instead&lt;br&gt;     of \
3). Tomer makes a valid point that having RUP security at the uppermost&lt;br&gt;     layer \
would be beneficial in the event that an implementation screws up&lt;br&gt;     that \
particular IF statement. However, as we explain below, in the specific&lt;br&gt;     case \
of Tor we do not expect this to be much of an issue.&lt;br&gt;&lt;br&gt;A more in-depth technical \
discussion of these points is provided below.&lt;div&gt;We start by stating our case as to \
why the basic security of 295 does not&lt;br&gt;stand on solid ground, then discuss its \
forward insecurity, and finally&lt;br&gt;argue why we believe RUP is largely irrelevant as \
an end-to-end design&lt;/div&gt;&lt;div&gt;goal for Tor.&lt;br&gt;&lt;br&gt;Overall, the security of 295 is \
currently unclear and it most likely requires&lt;br&gt;changes (from GHASH to a more costly \
and heavy weight primitive). As far&lt;/div&gt;&lt;div&gt;as we can see, the only benefit that \
this modified 295 would have over 308 is&lt;br&gt;end-to-end RUP security. On the other \
hand 308 offers forward security&lt;/div&gt;&lt;div&gt;(whereas 295 does not), better \
performance, and it follows well-established&lt;/div&gt;&lt;div&gt;design choices. Moreover, \
forward security is not easy to add on for any scheme,&lt;br&gt;especially when considering \
leaky pipes. We advocate that a scheme should&lt;br&gt;be designed and analysed as a whole \
and are worried that 295 would require&lt;br&gt;considerable modifications to attain \
provable, ordinary security, let alone&lt;br&gt;meaningful forward security.&lt;br&gt;&lt;br&gt;&lt;br&gt;(1) \
``SUBTLETIES'' CONCERNING THE (IN)SECURITY OF PROPOSAL 295.&lt;div&gt;      \
Proposal 295 is based on [ADL17]. In [ADL17] a proof of security is provided \
to&lt;/div&gt;&lt;div&gt;      obtain authenticated encryption secure against release of \
unverified plaintext.&lt;div&gt;      [ADL17] crucially relies on a wide-tweak tweakable \
blockcipher. In proposal&lt;br&gt;      295 this wide-tweak tweakable blockcipher is \
instantiated with a universal&lt;br&gt;      hash function (GHASH) combined with AES in XEX \
mode, following results in&lt;br&gt;      [ST13], [MI15] and [LRW02].&lt;br&gt;&lt;br&gt;      However, \
the problem is that all that theory only applies to a setting where&lt;br&gt;      the \
tweakable blockcipher is called as a stateless whole. In proposal 295&lt;br&gt;      the \
output of the universal hash function (T'_1, T'_2, T'_3, T'_4) is \
fed&lt;br&gt;      back into the input of the next invocation of this universal hash \
function.&lt;br&gt;      This mechanism, designed to prevent replay and reorder attacks, \
results in&lt;br&gt;      an unfortunate key-dependency that invalidates the idea that the \
universal&lt;br&gt;      hash together with AES in XEX modes operates as a tweakable \
blockcipher.&lt;/div&gt;&lt;div&gt;      We disagree that this key-dependency is just a subtlety \
and we don't see a&lt;br&gt;      straightforward way to fix it in a security proof. In \
general, dealing with&lt;br&gt;      key-dependency in security proofs is far from \
trivial.&lt;br&gt;&lt;br&gt;      Our observation that feeding a key-dependent input to a \
polynomial hash&lt;br&gt;      breaks down the security proof goes beyond the proof in \
[ADL17]. Indeed&lt;br&gt;      the results in [ST13], [MI15], [LRW02] all require the hash \
function to be&lt;br&gt;      Almost-XOR-Universal (AXU) and similarly the security of GCM \
and GCM-SIV&lt;br&gt;      rests on GHASH and POLYVAL being AXU secure. Now our point is \
that the&lt;br&gt;      feedback employed in 295 is outside the model of AXU security and \
it&lt;br&gt;      invalidates the results in [ADL17], [ST13], [MI15], [LRW02]. Addressing \
this&lt;br&gt;      issue requires either major alterations to the results in [MI15] and \
[LRW02]&lt;br&gt;      to cater for this feedback or identifying a new non-standard \
security&lt;br&gt;      property for the hash function which suffices to prove the security \
of 295&lt;br&gt;      and show that POLYVAL or GHASH satisfy that property.&lt;br&gt;&lt;br&gt;      To \
see that feeding the digest of an AXU hash back into its input is&lt;br&gt;      dangerous \
and not just a theoretical curiosity, consider the following. For&lt;br&gt;      fixed-size \
inputs A = A1||..||Am (consisting of m blocks each of which&lt;br&gt;      represents an \
element in GF(2^n)) and a hash key K \in GF(2^n), the hash&lt;br&gt;      function defined \
by H(K,A) = A1.K + .. + Am.K^m is a perfectly valid AXU&lt;br&gt;      hash. Now we \
construct inputs A, B, and C as follows:&lt;br&gt;&lt;br&gt;      A = A1||0^n||..||0^n,&lt;br&gt;      \
B = Ta||-A1||0^n||...||0^n where Ta = H(K,A),&lt;br&gt;      D = Tb||0^n||...||0^n where Tb \
= H(K,B).&lt;br&gt;&lt;br&gt;      As you can see B contains the digest of A, and D contains the \
digest of B.&lt;br&gt;      Now, evaluating the digests of A and B we get that:&lt;br&gt;&lt;br&gt;     \
H(K,A) = A1.K = Ta&lt;br&gt;      H(K,B) = Ta.K -A1.K^2 = A1.K^2 - A1.K^2 = 0 = Tb&lt;br&gt;      \
H(K,D) = 0&lt;br&gt;&lt;br&gt;      As you can see, irrespective of the value of the key K, we \
are able to set&lt;br&gt;      H(K,B) = 0 (with probability 1), and even worse we have that \
H(K,B) = H(K,D)&lt;br&gt;      = 0 for B \neq D. This should not be possible for an AXU \
hash, but because&lt;br&gt;      inputs B and D are key-dependent this is now \
possible.&lt;br&gt;&lt;br&gt;      Note how this corresponds to the setting in 295 (see&lt;br&gt;      \
&lt;a href="https://people.torproject.org/~nickm/prop295/cascade.pdf"&gt;https://people.torproject.org/~nickm/prop295/cascade.pdf&lt;/a&gt;) \
where T' is&lt;br&gt;      initialised to a fixed known value -- in this case A1. Then \
the above choice&lt;br&gt;      of messages (M = -A1||0^n||...||0^n and M' = \
0^n||...||0^n) would result in&lt;br&gt;      identical values of N_4 and consequently \
related layer-3 ciphertexts, where&lt;br&gt;      C_3 \xor C'_3 = M \xor M', \
thereby breaking IND-CPA security. At a more&lt;br&gt;      fundamental level, this attack \
also serves to show that the combination of&lt;br&gt;      AXU hash and block cipher, in \
this feedback configuration, does not yield a&lt;br&gt;      secure tweakable block \
cipher.&lt;br&gt;&lt;br&gt;      Looking at the email discussion from July 11th, 295 originally \
specified T'&lt;br&gt;      to be initialised to a constant value but was later amended \
to be&lt;br&gt;      initialised to a random secret value via the KDF. Thus, because of \
this&lt;br&gt;      feedback mechanism, the original proposal would have failed to satisfy \
even&lt;br&gt;      basic IND-CPA security. Moreover, the change in the way T' is \
initialised&lt;br&gt;      seems to have been adopted only as an extra precautionary \
measure (proposed&lt;br&gt;      by Nick) rather than purposefully to stifle this attack. \
We hope that this&lt;br&gt;      convinces you that although it looks like a minor \
difference the feedback&lt;br&gt;      mechanism has significant consequences on security. \
We didn't find an attack&lt;br&gt;      on 295 in its current form and it might be \
possible to prove it secure. However&lt;br&gt;      it should be noted that it is a rather \
unorthodox construction which deviates&lt;br&gt;      significantly from the way that AXU \
hash functions (like GHASH and POLYVAL)&lt;br&gt;      are normally used and thus its \
security simply cannot be taken for granted.&lt;br&gt;      The construction appears \
brittle and would need a dedicated security&lt;br&gt;      analysis.&lt;br&gt;&lt;br&gt;      A \
secondary issue is the choice of hash function. Proposal 295 specifies an&lt;br&gt;      \
Almost-XOR-Universal hash function (GHASH), though later in July 2019, Tomer&lt;br&gt;      \
suggested that, in the context of forward security one would probably need&lt;br&gt;      \
something stronger and more costly, referring detailed analysis (and see&lt;br&gt;      \
below). From the most recent email we get the impression that Proposal 295&lt;br&gt;      \
should be understood to work with an AXU (as specified), although the&lt;br&gt;      \
statement "GHASH or POLYVAL or any other collision resistant hash function&lt;br&gt;   \
are all the same to us" confuses us. Collision resistant hash functions and&lt;br&gt;  \
AXU hash functions are really quite different beasts and GHASH and POLYVAL&lt;br&gt;      \
are expressly not preimage or collision-resistant hash functions.&lt;br&gt;&lt;br&gt;      \
Clearly, the choice of primitive affects both security and efficiency. We&lt;br&gt;      \
contend that Proposal 295 should not be using an AXU, whereas our proposal&lt;br&gt;      \
can.&lt;br&gt;&lt;br&gt;&lt;br&gt;(2) THE FORWARD (IN)SECURITY OF 295&lt;br&gt;&lt;br&gt;      Note that forward \
security was already indicated as one of the desired goals&lt;br&gt;      of new relay \
cryptography in proposals 202 and 261.&lt;br&gt;&lt;br&gt;         "A more reasonable \
definition for forward secrecy would be that no message&lt;br&gt;         can be decrypted \
*after* the state (including ephemeral secrets) that was&lt;br&gt;         used to generate \
this message was replaced."&lt;br&gt;&lt;br&gt;      In general the security goal should be \
independent of the internal workings&lt;br&gt;      of a scheme, and hence it should not \
depend on when the scheme updates its&lt;br&gt;      state. Rather it is the other way \
round: forward security requires that once&lt;br&gt;      a message has been decrypted, the \
state ought to be updated immediately.&lt;/div&gt;&lt;div&gt;      The literature on forward \
security conforms to this principle as well.&lt;br&gt;&lt;br&gt;         "I find that the \
attack is not very convincing."&lt;br&gt;&lt;br&gt;      It is true that the attack we \
described in our previous email recovers only&lt;br&gt;      the last ciphertext. However \
this was under the assumption that the hash&lt;br&gt;      function is a *random oracle*. \
This was meant to show that even for a&lt;br&gt;      stronger and less efficient choice of \
hash function (like SHA3) 295 would&lt;br&gt;      still not be able to attain full-fledged \
forward security. However, with a&lt;br&gt;      hash function like GHASH or POLYVAL, the \
situation is much worse as 295&lt;br&gt;      provides no forward security whatsoever. \
Referring once again to the&lt;br&gt;      notation used in: &lt;a \
href="https://people.torproject.org/~nickm/prop295/cascade.pdf"&gt;https://people.torproject.org/~nickm/prop295/cascade.pdf&lt;/a&gt;&lt;br&gt; \
consider the following attack. Given the current state of the exit node&lt;br&gt;      \
(Ktf3, Khf3, T'_3, T'_4) and the sequence of prior ciphertexts pairs (N3,&lt;br&gt; \
C3), the attacker can use this information to recover previous values of&lt;br&gt;      \
T'_3 and T'_4. Let T''_3 represent the preceding value of T'_3, \
then T'_3 =&lt;br&gt;      GHASH(Khf3, T''_3 || C_3) which yields a linear \
equation with only one&lt;br&gt;      unknown: T''_3. A similar situation arises \
for T''_4 an it thus can also be&lt;br&gt;      recovered. Once T''_3 and \
T''_4 are recovered, the same process can be&lt;br&gt;      repeated to recover the \
previous values in an iterative fashion. Note that&lt;br&gt;      this recovers all key and \
state material thereby allowing the decryption of&lt;br&gt;      all prior \
ciphertexts.&lt;br&gt;&lt;br&gt;&lt;br&gt;(3) AUTHENTICATION AND THE IF STATEMENT.&lt;br&gt;&lt;br&gt;         \
"authentication of the last node depends solely on the proper execution&lt;br&gt;      \
of the IF statement on Line 266. As a result, if this line is skipped for&lt;br&gt;         \
some reason (e.g., because an adversary corrupted the last node, a bug,&lt;br&gt;         \
or as a result of over-optimization), modified messages may leave the&lt;br&gt;         \
network. "&lt;br&gt;&lt;br&gt;      Both 295 and 308 have an IF statement that if bypassed \
authenticity would be&lt;br&gt;      broken. The difference is that in 308 the adversary \
would have control over&lt;br&gt;      the plaintext (a chosen forgery), whereas in 295 the \
plaintext would be&lt;br&gt;      randomised (an existential forgery). This is the only \
difference here. For&lt;br&gt;      general AEAD schemes this would normally be considered \
as providing&lt;br&gt;      robustness against misuse. However in the specific case of Tor \
we do not see&lt;br&gt;      this to be much of an issue for the reasons set out below. \
This choice has&lt;br&gt;      an effect on efficiency: the last round in 308 requires only \
*two passes*&lt;br&gt;      whereas 295 requires *three passes*. Thus the last layer \
decryption in 308&lt;br&gt;      is more efficient than 295 thereby reducing the load on \
the exit nodes.&lt;br&gt;&lt;br&gt;      Now consider the scenarios listed by Tomer in which the \
IF statement could&lt;br&gt;      be skipped:&lt;br&gt;&lt;br&gt;      a) The last node is corrupted - \
If the exit node is corrupted then no&lt;br&gt;           authenticity is possible. \
Remember that authenticity is only end-to-end&lt;br&gt;           and if the last node is \
corrupted it can always output any message of its&lt;br&gt;           choice.&lt;br&gt;&lt;br&gt;      \
b) Thus the only setting where it makes sense to consider this possibility&lt;br&gt;        \
is that of a bad implementation. However, to begin with, Tor is a&lt;br&gt;           \
relatively closed ecosystem, in that there aren't that many&lt;br&gt;           \
implementations of onion relays. More importantly however, such a flaw is&lt;br&gt;         \
unlikely to go unnoticed as it would affect correct functionality due to&lt;br&gt;          \
the leaky-pipe architecture. If a ciphertext is accepted even when the IF&lt;br&gt;         \
statement fails then that would cause an intermediate onion router to&lt;br&gt;           \
recognise the ciphertext as its own and consequently the ciphertext would&lt;br&gt;         \
not reach the intended recipient. As such the likelihood of such a bug&lt;br&gt;           \
seems rather remote.&lt;br&gt;&lt;br&gt;&lt;br&gt;Best,&lt;br&gt;&lt;br&gt;Martijn, Alessandro, and Jean \
Paul&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;----------------------------------------------&lt;/div&gt;&lt;div&gt;&lt;br&gt;[LRW02] \
M. Liskov, R. Rivest, D. Wagner, "Tweakable block ciphers", CRYPTO \
2002.&lt;br&gt;&lt;br&gt;[MI15] K. Minematsu and T. Iwata, "Tweak-Length Extension for \
Tweakable&lt;br&gt;Blockciphers", IMACC 2015.&lt;br&gt;&lt;br&gt;[ADL17] Tomer Ashur, Orr \
Dunkelman, Atul Luykx, "Boosting Authenticated&lt;br&gt;Encryption Robustness with \
Minimal Modifications", CRYPTO 2017.&lt;br&gt;&lt;br&gt;[ST13] Thomas Shrimpton, R. Seth \
Terashima, "A Modular Framework for Building&lt;br&gt;Variable-Input Length Tweakable \
Ciphers", ASIACRYPT 2013.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, Oct 16, 2019 at 10:57 \
AM Tomer Ashur &lt;&lt;a \
href="mailto:tomer.ashur@esat.kuleuven.be"&gt;tomer.ashur@esat.kuleuven.be&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div lang="EN-US"&gt;&lt;div \
class="gmail-m_-781751121635766143WordSection1"&gt;&lt;p \
class="gmail-m_-781751121635766143MsoPlainText"&gt;Dear all,&lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p \
class="gmail-m_-781751121635766143MsoPlainText"&gt;Some time ago I sent to this mailing \
list a proposal for using the ADL construction to solve the crypto tagging attack and \
it was registered as Proposal 295. Then, about a month ago Jean Paul Degabriele sent \
another proposal aiming for the same, which was registered as Proposal 308. We've now \
had the chance to compare both proposals and we provide our observations below.   But \
before we discuss the pros and cons of each proposal, I'd like to re-state our goal \
for Proposal 295. Our aim was to build something that:&lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p \
class="gmail-m_-781751121635766143MsoPlainText"&gt;1. does not lose any security \
guarantees that are already in place; &lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p \
class="gmail-m_-781751121635766143MsoPlainText"&gt;2. prevents successful \
crypto-tagging; and &lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p \
class="gmail-m_-781751121635766143MsoPlainText"&gt;3. does not introduce new \
weaknesses.&lt;u&gt;&lt;/u&gt;&lt;u&gt;&lt;/u&gt;&lt;/p&gt;&lt;p class="gmail-m_-781751121635766143MsoPlainText"&gt;We \
*did not* consider advanced security goals such as forward secrecy and/or \
non-repudiation which was also mentioned earlier on this mailing list. \


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191024065418</emailId><senderName>vignesh kannan</senderName><senderEmail>vigneshvishnu1925@gmail.com</senderEmail><timestampReceived>2019-10-24 06:54:18-0400</timestampReceived><subject>Re: [tor-dev] New python Tor client implementation</subject><body>

[Attachment #2 (multipart/alternative)]


Hi pls help me to join your technical team

On Wed, 23 Oct 2019, 2:57 am Damian Johnson, &lt;atagar@torproject.org&gt; wrote:

&gt; &gt; 1. A number of python implementations I've found on the internet had
&gt; &gt; broken dependencies or didn't work at all. So, I decided to create a
&gt; &gt; fully functional Tor client with the bare minimum of dependencies.
&gt;
&gt; Ah! Gotcha. For what it's worth I'm in complete agreement with you on
&gt; that. I designed Stem to avoid any hard dependencies [1] for the exact
&gt; same reason.
&gt;
&gt; &gt; 2. Up until now I thought Stem was just a library to control the Tor
&gt; &gt; process. As it said at front of https://stem.torproject.org:
&gt; &gt; "With it you can use Tor's control protocol to script against the Tor
&gt; &gt; process". Unfortunately API docs didn't help me to see that certain Tor
&gt; &gt; primitives were indeed implemented.
&gt;
&gt; Makes sense. Stem's client functionality is relatively new. I
&gt; implemented enough to download descriptors [2], but there's still a
&gt; lot of room to grow [3].
&gt;
&gt; Cheers! -Damian
&gt;
&gt; [1] https://stem.torproject.org/faq.html#does-stem-have-any-dependencies
&gt; [2] https://gitweb.torproject.org/stem.git/commit/?id=820881a
&gt; [3]
&gt; https://2019.www.torproject.org/getinvolved/volunteer.html.en#pythonTorClient
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hi pls help me to join your technical team  &lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, 23 Oct 2019, 2:57 am \
Damian Johnson, &lt;&lt;a \
href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0 0 0 \
.8ex;border-left:1px #ccc solid;padding-left:1ex"&gt;&gt; 1. A number of python \
implementations I've found on the internet had&lt;br&gt; &gt; broken dependencies or \
didn't work at all. So, I decided to create a&lt;br&gt; &gt; fully functional Tor \
client with the bare minimum of dependencies.&lt;br&gt; &lt;br&gt;
Ah! Gotcha. For what it's worth I'm in complete agreement with you on&lt;br&gt;
that. I designed Stem to avoid any hard dependencies [1] for the exact&lt;br&gt;
same reason.&lt;br&gt;
&lt;br&gt;
&gt; 2. Up until now I thought Stem was just a library to control the Tor&lt;br&gt;
&gt; process. As it said at front of &lt;a href="https://stem.torproject.org" \
rel="noreferrer noreferrer" target="_blank"&gt;https://stem.torproject.org&lt;/a&gt;:&lt;br&gt; &gt; \
"With it you can use Tor's control protocol to script against the Tor&lt;br&gt; \
&gt; process". Unfortunately API docs didn't help me to see that certain \
Tor&lt;br&gt; &gt; primitives were indeed implemented.&lt;br&gt;
&lt;br&gt;
Makes sense. Stem's client functionality is relatively new. I&lt;br&gt;
implemented enough to download descriptors [2], but there's still a&lt;br&gt;
lot of room to grow [3].&lt;br&gt;
&lt;br&gt;
Cheers! -Damian&lt;br&gt;
&lt;br&gt;
[1] &lt;a href="https://stem.torproject.org/faq.html#does-stem-have-any-dependencies" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://stem.torproject.org/faq.html#does-stem-have-any-dependencies&lt;/a&gt;&lt;br&gt;
 [2] &lt;a href="https://gitweb.torproject.org/stem.git/commit/?id=820881a" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://gitweb.torproject.org/stem.git/commit/?id=820881a&lt;/a&gt;&lt;br&gt; [3] \
&lt;a href="https://2019.www.torproject.org/getinvolved/volunteer.html.en#pythonTorClient" \
rel="noreferrer noreferrer" \
target="_blank"&gt;https://2019.www.torproject.org/getinvolved/volunteer.html.en#pythonTorClient&lt;/a&gt;&lt;br&gt;
 _______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" target="_blank" \
rel="noreferrer"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer \
noreferrer" target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt;
 &lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191029082018</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-10-29 08:20:18-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

George Kadianakis &lt;desnacked@riseup.net&gt; writes:

&gt; Damian Johnson &lt;atagar@torproject.org&gt; writes:
&gt;
&gt;&gt; Thanks George! Yup, work on that branch is in progress:
&gt;&gt;
&gt;&gt; https://gitweb.torproject.org/user/atagar/stem.git/log/?h=hsv3
&gt;
&gt; Hello Damian,
&gt;
&gt; thanks for the reply here! I'm now back and ready to start working again
&gt; on onionbalance/stem.
&gt;
&gt; What is your plan with the hsv3 branch? Should I start reviewing your
&gt; changes already, or give you more time to do more?
&gt;
&gt; Thanks a lot for all the work! :)

Hello again,

I took a super quick look (particularly at the easy parts of your
changes). Thanks for all the changes!

My only feedback so far is that the python2 port commits have broken
python3 for me (particularly the ed25519 blinding implementation). In
general, the ed25519 blinding implementation is very hairy Python3
crypto code and it won't be easy to support both versions I think.

Would it be egregious to provide hsv3 support only for python3 users so
that we can use python3 features as we wish?

I personally plan to use HSv3 support for onionbalance and that will be
in python3, so I wouldn't mind that at all. Not sure who else is gonna
use hsv3 support in the near future.

Cheers!

PS: From now on perhaps we can use #31823 for code related discussions
    (sorry for the medium mixing)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191029145246</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-10-29 14:52:46-0400</timestampReceived><subject>[tor-dev] Onion Service Intro Point Retry Behavior</subject><body>

[Attachment #2 (multipart/signed)]


Greetings everyone,

After some discussions between arma, mikeperry, asn and I, it is time for a
famous tor-dev@ email thread to try to get to a consensus if need be.

In the past weeks, a set of HSv3 reachability issues have been found regarding
*service* intro points (IP):

    - hs-v3: Service can keep unused intro points in its list
      https://bugs.torproject.org/31561
    - hs-v3: Service can pick more than HiddenServiceNumIntroductionPoints
      intro points https://bugs.torproject.org/31548
    - hs-v3: Stop using ip-&gt;circuit_established flag
      https://bugs.torproject.org/32094
    - hs-v3: Client can re-pick bad intro points
      https://bugs.torproject.org/31541
    - hs-v3: Service circuit retry limit should not close a valid circuit
      https://bugs.torproject.org/31652

Long story short, couple weeks ago we've almost merged a new behavior on the
service side with #31561 that would have ditch an intro point if its circuit
would time out instead of retrying it. (Today, a service always retry their
intro point up to 3 times on any type of circuit failure.)

And here comes the core of the discussion of this thread: Retrying intro point
on failure or simply ditch it on failure and pick a new one?

Some 7 years ago, this ticket was created and thus we implemented roughly 4
years ago a mechanism that makes a service retry to establish the intro point
circuit up to 3 times when it collapses (except for very very specific cases
for which we wouldn't):

    https://bugs.torproject.org/8239

HSv3 tried to be on feature parity there with v2 up until now that the above
bugs have been mostly fixed.

That being all said, regarding the retry feature, there are pros and cons.
I'll try to organize them below based on many adhoc discussions in the past
and what I can get from all the tickets up to this day (there could be more!
this is just what I could recall and find in the tickets):

== Pros ==

The primary original argument for retrying is based on the mobile use case. If
a .onion is running on a cellphone and the network happens to be bad all the
sudden, the service is better off to re-establish the intro circuits which
would make the retry attempts of the client to finally succeed after a bit
instead of having to re-fetch a descriptor and go to the new intro points.

Thus, in theory, it is mostly a reachability argument.

One question that can arise from this is: Will the client be able to reconnect
using the old intro points by the time the service re-established?

In other words, is the retry behavior of the *client* allows enough time for
the service to stabilize for the mobile use case? I'm curious to learn from
people with experience with this!

== Cons ==

Recently, mikeperry raised concerns about the retry behavior all together and
proposed to simply ditch each time the intro point instead of retrying.

(@Mike, I do invite you to comment here as you mentionned many times
rationales for this but I don't have enough IRC backlog :S).

== Pros _and_ Cons at the same time ==

There is a possible Guard discovery attack argument against retrying. But it
is nuanced on what exactly constitute a failure and when should it retry vs
ditching.

Quote from https://trac.torproject.org/projects/tor/ticket/8239#comment:6

    FWIW, it's also worth mentioning that making HSes more stubborn towards
    old IPs might also allow guard discovery attacks from the IP. That is the
    IP kills incoming circuits, till a compromised middle node is selected,
    and since the HS is stubborn it will keep on establishing new circuits.

    This was mentioned by waldo here:
    https://lists.torproject.org/pipermail/tor-dev/2014-May/006843.html

... which is where the "what is the failure" is important as arma's mentions
in the same ticket:

    That's why you should only stick to your intro point when it's your
    network that failed (that is, the connection between you and your guard),
    not the intro circuit. (This is what I meant in the body of the bug in the
    'main tricky point' sentence.)

We had this discussion before in Tor many times on "how to detect network
failures" vs "circuit failures". In other words, if the link to your Guard
fails, that would be enough to consider a network failure and thus retry the
intro point.

But if the circuit collapses due to let say a DESTROY or TRUNCATED cell, then
it could be the IP closing it for the purpose of an attack and thus you would
select a new intro point. But, it could also be that the middle node died...
That one has many false positive.

Soooooo, to repeat what I first said at the beginning, today an HSv3 will
_always_ retry up to 3 times regardless of the reason why the circuit
collapsed.

Should that behavior get more refined with the network failed vs circuit close
argument? Should we stop at once retrying? Should we change the retry behavior
client side to better match the latency of the mobile use case?

Whatever we decide, most importantly, we need to document the *why* of this
retry/ditch behavior and thus this email thread is I hope a good start to keep
a record of the discussions/arguments.

Cheers!
David

-- 
5qZaRu0+AqSNqiaTmTpzcIEztqeYQIq7AAfzKdg/2cs=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191014075629</emailId><senderName>Florentin Rochet</senderName><senderEmail>florentin.rochet@uclouvain.be</senderEmail><timestampReceived>2019-10-14 07:56:29-0400</timestampReceived><subject>[tor-dev] Proposal 271 - improvements</subject><body>

[Attachment #2 (text/plain)]

Hello,

I'm doing research on improving Tor security via path selection. This 
work is with Ryan Wails, Aaron Johnson, Prateek Mittal, and Olivier 
Pereira. In our work, we ran into load-balancing problems that affected 
our experiments. We identified the problem to originate in the 
specification and implementation of Proposal 271, "Another algorithm for 
guard selection", which was implemented in tor-0.3.0.1-alpha ~2 years 
ago and is thus now in tor stable. In short, Prop 271 causes guards to 
be selected with probabilities different than their weights due to the 
way it samples many guards and then chooses primary guards from that 
sample. We are suggesting a straightforward fix to the problem, which 
is, roughly speaking, to choose primary guards in the order in which 
they were sampled. We have created a patch implementing this fix for the 
case affecting our experiments, which would improve the current 
situation. We are further suggesting that Tor apply the technique 
throughout the guard-selection logic.

In more detail, Prop 271 chooses guards via a multi-step process:
   1. It chooses 20 distinct guards (and sometimes more) by sampling 
without replacement with probability proportional to consensus weight.
   2. It produces two subsets of the sample: (1) "filtered" guards, 
which are guards that satisfy various torrc constraints, and (2) 
"confirmed" guards, which are guards through which a circuit has been 
constructed.
   3. The "primary" guards (i.e. the actual guards used for circuits) 
are chosen from the confirmed and filtered subsets.
I'm ignoring the additional "usable" subsets for clarity. This 
description is based on Section 4.6 of the specification 
(https://gitweb.torproject.org/torspec.git/tree/guard-spec.txt).

The primary guards are selected uniformly at random from the filtered 
guards when no confirmed guards exist. No confirmed guards appear to 
exist until some primary guards have been selected, and so when Tor is 
started the first time the primary guards always come only from the 
filtered set. The uniformly-random selection causes a bias in 
primary-guard selection away from consensus weights and towards a more 
uniform selection of guards. As just an example of the problem, if there 
were only 20 guards in the network, the sampled set would be all guards 
and primary guard selection would be entirely uniformly random, ignoring 
weights entirely. This bias is worse the larger the sampled set is 
relative to the entire set of guards, and it has a significant effect on 
Tor simulations, which are typically on smaller networks. We believe 
that this issue has only a limited effect on Tor currently due to the 
relatively large number of guards.

However, the issue is potentially worse when there exist confirmed 
guards. In this case, primary guards are chosen from the intersection of 
confirmed and filtered guards in the order they were added to the 
confirmed set. That order seems to be the order in which circuits were 
successfully created through the guards, which would thus be both 
somewhat non-deterministic (because it depends on when a circuit 
successfully finishes) and random (because circuits are only attempted 
through primary guards, which are initially uniformly-random filtered 
guards). The non-determinism especially could yield guard selection 
probabilities that deviate quite a bit from the consensus weights.

This design has both performance and security implications. It 
potentially reduces the performance of the Tor network by making the 
load unbalanced. It also affects the correctness of performance analyses 
done with Shadow simulations, and the error is likely much larger due to 
the smaller size of simulation networks, which commonly include 100 or 
fewer guards. The design also reduces Tor's security by increasing the 
number of clients that an adversary running small relays can observe. In 
addition, an adversary has to wait less time than it should after it 
starts a malicious guard to be chosen by a client. This weakness occurs 
because the malicious guard only needs to enter the sampled list to have 
a chance to be chosen as primary, rather than having to wait until all 
previously-sampled guards have already expired.

We propose a solution that fits well within the existing guard-selection 
algorithm. Our solution is to select primary guards in the order they 
were sampled. This ordering should be applied after the filtering and/or 
confirmed guard sets are constructed as normal. That is, primary guards 
should be selected from the filtered guards (if no guards are both 
confirmed and filtered) or from the set of confirmed and filtered guards 
(if such guards exist) in the order they were initially sampled. This 
solution guarantees that each primary guard is selected (without 
replacement) from all guards with a probability that is proportional to 
its consensus weight.

We include a patch that applies this ordering only when primary guards 
are selected from filtered guards. This fixes the problem in Shadow 
simulations because confirmed guards never exist when primary guards are 
being selected. However, to solve all issues in the real Tor network, we 
recommend that you apply similar logic to the case that primary guards 
are selected from confirmed guards.

Note that the issue of sampling skewing guard selection seems to have 
been raised in proposal discussions, which is documented in the proposal 
(although the proposed solution is less practical):

 &gt; [Paul Syverson in a conversation at the Wilmington Meeting 2017 says that
 &gt; we should look into how we're doing this sampling. Essentially, his
 &gt; concern is that, since we are sampling by bandwidth at first (when we
 &gt; choose the `sampled` set), then later there is another bias—when 
trying to
 &gt; build circuits (and hence marking guards as confirmed) we select those
 &gt; which completed a usable circuit first (and hence have the lowest
 &gt; latency)—that this sort of "doubly skewed" selection may "snub" some
 &gt; low-consensus-weight guards and leave them unused completely.  Thus the
 &gt; issue is primarily that we're not allocating network resources
 &gt; efficiently.  Mine and Nick's guard algorithm simulation code never
 &gt; checked what percentage of possible guards the algorithm reasonably
 &gt; allowed clients to use; this would be an interesting thing to check in
 &gt; simulation at some point.  If it does turn out to be a problem, Paul's
 &gt; intuition for a fix is to select uniformly at random to obtain the
 &gt; `sampled` set, then weight by bandwidth when trying to build circuits and
 &gt; marking guards as confirmed. —isis]


Best,

Florentin



["1500cli-250rel_sampling_exp.pdf" (application/pdf)]
["0001-Makes-selection-of-filtered-guards-and-primary-guard.patch" (text/x-patch)]

From 5f8ca77f1b650534a38afb07a28aef8bbf9b1a34 Mon Sep 17 00:00:00 2001
From: Florentin Rochet &lt;florentin.rochet@uclouvain.be&gt;
Date: Wed, 11 Sep 2019 14:39:37 +0200
Subject: [PATCH] Makes selection of filtered guards and primary guard ordered
 w.r.t. to the weighted selection during the sampling, to preserve
 load-balancing and security for the choice of the primary guard

---
 src/feature/client/entrynodes.c | 51 +++++++++++++++++++++++++++++----
 src/feature/client/entrynodes.h | 12 ++++++++
 2 files changed, 57 insertions(+), 6 deletions(-)

diff --git a/src/feature/client/entrynodes.c b/src/feature/client/entrynodes.c
index e543289ce..c2d821391 100644
--- a/src/feature/client/entrynodes.c
+++ b/src/feature/client/entrynodes.c
@@ -172,6 +172,7 @@ static entry_guard_t *get_sampled_guard_by_bridge_addr(guard_selection_t *gs,
                                               const tor_addr_port_t *addrport);
 static int entry_guard_obeys_restriction(const entry_guard_t *guard,
                                          const entry_guard_restriction_t *rst);
+static int compare_guards_by_sampled_idx(const void **a_, const void **b_);
 
 /** Return 0 if we should apply guardfraction information found in the
  *  consensus. A specific consensus can be specified with the
@@ -890,6 +891,7 @@ entry_guard_add_to_sample_impl(guard_selection_t *gs,
   tor_free(guard-&gt;sampled_by_version);
   guard-&gt;sampled_by_version = tor_strdup(VERSION);
   guard-&gt;currently_listed = 1;
+  guard-&gt;sampled_idx = gs-&gt;next_sampled_idx++;
   guard-&gt;confirmed_idx = -1;
 
   /* non-persistent fields */
@@ -1771,7 +1773,8 @@ sample_reachable_filtered_entry_guards(guard_selection_t *gs,
            flags, smartlist_len(reachable_filtered_sample));
 
   if (smartlist_len(reachable_filtered_sample)) {
-    result = smartlist_choose(reachable_filtered_sample);
+    smartlist_sort(reachable_filtered_sample, compare_guards_by_sampled_idx);
+    result = smartlist_get(reachable_filtered_sample, 0);
     log_info(LD_GUARD, "  (Selected %s.)",
              result ? entry_guard_describe(result) : "&lt;null&gt;");
   }
@@ -1795,6 +1798,21 @@ compare_guards_by_confirmed_idx(const void **a_, const void **b_)
   else
     return 0;
 }
+/**
+ * Helper: compare two entry_guard_t by their sampled_idx values.
+ * Used to sort the sampled list
+ */
+static int
+compare_guards_by_sampled_idx(const void **a_, const void **b_)
+{
+  const entry_guard_t *a = *a_, *b = *b_;
+  if (a-&gt;sampled_idx &lt; b-&gt;sampled_idx)
+    return -1;
+  else if (a-&gt;sampled_idx &gt; b-&gt;sampled_idx)
+    return 1;
+  else
+    return 0;
+}
 
 /**
  * Find the confirmed guards from among the sampled guards in &lt;b&gt;gs&lt;/b&gt;,
@@ -2051,12 +2069,21 @@ select_primary_guard_for_circuit(guard_selection_t *gs,
   int num_entry_guards = get_n_primary_guards_to_use(usage);
   smartlist_t *usable_primary_guards = smartlist_new();
 
+  /** Always takes the oldest ones first  -- I did not find guarantees that
+   * gs-&gt;primary_entry_guards has the same ordering after update of the list,
+   * even for the num_entry_guards same relays 
+   * */
+  smartlist_sort(gs-&gt;primary_entry_guards, compare_guards_by_sampled_idx);
   SMARTLIST_FOREACH_BEGIN(gs-&gt;primary_entry_guards, entry_guard_t *, guard) {
     entry_guard_consider_retry(guard);
-    if (! entry_guard_obeys_restriction(guard, rst))
+    if (! entry_guard_obeys_restriction(guard, rst)){
+      log_info(LD_GUARD, "Entry guard %s doesn't obey restriction, we test the next one",
+          entry_guard_describe(guard));
       continue;
+    }
     if (guard-&gt;is_reachable != GUARD_REACHABLE_NO) {
       if (need_descriptor &amp;&amp; !guard_has_descriptor(guard)) {
+        log_info(LD_GUARD, "Guard %s does not have a descriptor", entry_guard_describe(guard));
         continue;
       }
       *state_out = GUARD_CIRC_STATE_USABLE_ON_COMPLETION;
@@ -2069,9 +2096,9 @@ select_primary_guard_for_circuit(guard_selection_t *gs,
 
   if (smartlist_len(usable_primary_guards)) {
     chosen_guard = smartlist_choose(usable_primary_guards);
+    log_info(LD_GUARD, "Selected primary guard %s for circuit from a list size of %d.",
+             entry_guard_describe(chosen_guard), smartlist_len(usable_primary_guards));
     smartlist_free(usable_primary_guards);
-    log_info(LD_GUARD, "Selected primary guard %s for circuit.",
-             entry_guard_describe(chosen_guard));
   }
 
   smartlist_free(usable_primary_guards);
@@ -2799,7 +2826,8 @@ entry_guard_encode_for_state(entry_guard_t *guard)
 
   format_iso_time_nospace(tbuf, guard-&gt;sampled_on_date);
   smartlist_add_asprintf(result, "sampled_on=%s", tbuf);
-
+  
+  smartlist_add_asprintf(result, "sampled_idx=%d", guard-&gt;sampled_idx);
   if (guard-&gt;sampled_by_version) {
     smartlist_add_asprintf(result, "sampled_by=%s",
                            guard-&gt;sampled_by_version);
@@ -2870,6 +2898,7 @@ entry_guard_parse_from_state(const char *s)
   char *rsa_id = NULL;
   char *nickname = NULL;
   char *sampled_on = NULL;
+  char *sampled_idx = NULL;
   char *sampled_by = NULL;
   char *unlisted_since = NULL;
   char *listed  = NULL;
@@ -2899,6 +2928,7 @@ entry_guard_parse_from_state(const char *s)
     FIELD(rsa_id);
     FIELD(nickname);
     FIELD(sampled_on);
+    FIELD(sampled_idx);
     FIELD(sampled_by);
     FIELD(unlisted_since);
     FIELD(listed);
@@ -3020,7 +3050,16 @@ entry_guard_parse_from_state(const char *s)
   /* Take sampled_by_version verbatim. */
   guard-&gt;sampled_by_version = sampled_by;
   sampled_by = NULL; /* prevent free */
-
+  if (sampled_idx) {
+    int ok = 1;
+    long idx = tor_parse_long(sampled_idx, 10, 0, INT_MAX, &amp;ok, NULL);
+    if (!ok) {
+      log_warn(LD_GUARD, "Guard has invalid sampled_idx %s",
+          escaped(sampled_idx));
+    } else {
+      guard-&gt;sampled_idx = (int)idx;
+    }
+  }
   /* Listed is a boolean */
   if (listed &amp;&amp; strcmp(listed, "0"))
     guard-&gt;currently_listed = 1;
diff --git a/src/feature/client/entrynodes.h b/src/feature/client/entrynodes.h
index 4e5eb4e96..cb94abbb9 100644
--- a/src/feature/client/entrynodes.h
+++ b/src/feature/client/entrynodes.h
@@ -116,6 +116,12 @@ struct entry_guard_t {
    * successfully and decide to keep it?) This field is zero if this is not a
    * confirmed guard. */
   time_t confirmed_on_date; /* 0 if not confirmed */
+  /**
+   * In what order was this guard sampled without replacement? Guards with lower
+   * indices appear earlier on the sampled list
+   */
+  int sampled_idx;
+
   /**
    * In what order was this guard confirmed? Guards with lower indices
    * appear earlier on the confirmed list.  If the confirmed list is compacted,
@@ -271,6 +277,12 @@ struct guard_selection_s {
    * confirmed_entry_guards receive? */
   int next_confirmed_idx;
 
+  /** What sampled_idx value should the next-added member of
+   * sampled_entry_guards receive? This should follow the size of the sampled
+   * list until sampled relays get pruned for some reason
+   */
+  int next_sampled_idx;
+
 };
 
 struct entry_guard_handle_t;
-- 
2.17.1


[Attachment #5 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191016085733</emailId><senderName>"Tomer Ashur"</senderName><senderEmail>tomer.ashur@esat.kuleuven.be</senderEmail><timestampReceived>2019-10-16 08:57:33-0400</timestampReceived><subject>[tor-dev] Comparing Proposals 295 and 308</subject><body>

This is a multipart message in MIME format.

[Attachment #2 (multipart/alternative)]
This is a multipart message in MIME format.


Dear all,

Some time ago I sent to this mailing list a proposal for using the ADL construction \
to solve the crypto tagging attack and it was registered as Proposal 295. Then, about \
a month ago Jean Paul Degabriele sent another proposal aiming for the same, which was \
registered as Proposal 308. We've now had the chance to compare both proposals and we \
provide our observations below.  But before we discuss the pros and cons of each \
proposal, I'd like to re-state our goal for Proposal 295. Our aim was to build \
something that:

1. does not lose any security guarantees that are already in place; 

2. prevents successful crypto-tagging; and 

3. does not introduce new weaknesses.

We *did not* consider advanced security goals such as forward secrecy and/or \
non-repudiation which was also mentioned earlier on this mailing list. 

 

In achieving these goals, the two proposals are almost the same: for the encryption \
part, both use layered encryption where the nonce is tweaked with a digest of the \
ciphertext, and sent in encrypted form to the next node as part of the ciphertext. \
The only meaningful difference I could find is that instead of using the output of \
the universal hash function (i.e., GHASH) as a running digest as is done in Proposal \
295, Proposal 308 uses the encrypted nonce. Jean Paul made the correct observation \
that our security proof did not account for key-dependent input, but we believe that \
this can be resolved by rewriting the proof. In either case, this is a subtlety and \
common ground can be found. On a high level, both proposals use the same mechanism to \
avoid crypto-tagging.

 

Where the proposals differ is in the authentication part. Proposal 295 makes a \
functional separation between the encryption part and the authentication part, cf. \
Lines 150-152 (authentication) and Lines 156-160 (layered encryption). Conversely, \
Proposal 308 does not offer such separation, and the authentication and encryption of \
the last node are done in a single pass (cf. Lines 227-230 and Lines 244-252). This \
comes with what we think are two highly unwanted side effects defeating the purpose \
of using the ADL construction to begin with: the authentication of the last node \
depends solely on the proper execution of the IF statement on Line 266. As a result, \
if this line is skipped for some reason (e.g., because an adversary corrupted the \
last node, a bug, or as a result of over-optimization), modified messages may leave \
the network. Moreover, the last layer is malleable which means that a difference \
introduced to the ciphertext entering the last node will be preserved through the \
final decryption (given that the IF statement on Line 266 is skipped). This is \
because the decryption nonce does not depend on the authentication process (in the \
lingo of Proposal 308 this is called a "dynamic nonce").

 

Comparing this to Proposal 295 we see that the same cannot happen. Any change \
introduced at any point (including the ciphertext entering the last node) will \
completely destroy the payload in an irrecoverable way (the same happens in the \
"static layers" of Proposal 308; only the dynamic layer is malleable). 

 

For the record, a corollary of all of this is that if Sf_I is leaked (e.g., via a \
side channel in the generation process of Nf_I that is used by the IF statement), the \
adversary now has the secret it needs to decrypt the ciphertext regardless of the \
authentication process. Not being able to do this is exactly what's captured by the \
RUP property used in Proposal 295 in which the only way to obtain N_4 (the \
counterpart of Proposal 308's Nf_I) is via a successful digest of an unmodified \
ciphertext. 

 

The place where Proposal 308 nicely extends over Proposal 295 is in the forward \
secrecy domain. In an email to this mailing list we conjectured that if certain \
changes are made to Proposal 295 it will provide forward secrecy in addition to its \
crypto-tagging resistance. Jean Paul suggested an attack against this conjecture, but \
I find that the attack is not very convincing. Indeed, once the keys are leaked, the \
last message can be recovered. But I don't think that there's anything surprising in \
the fact that the set of keys that would have normally decrypted a message will also \
do so if leaked to an adversary. A more reasonable definition for forward secrecy \
would be that no message can be decrypted *after* the state (including ephemeral \
secrets) that was used to generate this message was replaced. Admittedly, Proposal \
308 replaces this state earlier than Proposal 295 (immediately after processing  the \
message vs. after processing the next message), which may be desirable, but is anyway \
not disastrous. 

 

That being said, this discussion is theoretic in nature since of the two proposals, \
only Proposal 308 offers an actual mechanism. For Proposal 295 we only offer a \
conjecture. We also tend to somewhat agree that frequent re-keying is a better way to \
achieve forward secrecy. 

 

Regardless of which is the better way, both can be built on top of the encryption \
mechanism we offered in Proposal 295 whose goal is to resist crypto-tagging. In the \
interest of moving forward we propose to implement Proposal 295 as suggested or \
something close to it (e.g., using POLYVAL) to counter crypto-tagging, then discuss \
alternatives to achieving forward secrecy and add those on top of the ADL \
construction via Proposal 308.  

 

A few side notes:

1. Proposal 308 argues that POLYVAL is more suited than GHASH to our this use-case. \
This is an implementation issue. GHASH or POLYVAL or any other collision resistant \
hash function are all the same to us. 

2. I'm pretty sure there's a typo on Line 250 in Proposal 308 and that the text \
should be Y_I = Tf_{I+1} ^ X_I. Otherwise, I can't see how the protocol decrypts on \
Line 285.

3. The lengths in Section 2.2 (marked for revision) are given in bytes, but then in \
Section 2.3 they are treated as bits. 

4. Line 230 has unbalanced parenthesis. 

 

Tomer


[Attachment #5 (text/html)]

&lt;html xmlns:v="urn:schemas-microsoft-com:vml" \
xmlns:o="urn:schemas-microsoft-com:office:office" \
xmlns:w="urn:schemas-microsoft-com:office:word" \
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml" \
xmlns="http://www.w3.org/TR/REC-html40"&gt;&lt;head&gt;&lt;meta http-equiv=Content-Type \
content="text/html; charset=utf-8"&gt;&lt;meta name=Generator content="Microsoft Word 15 \
(filtered medium)"&gt;&lt;style&gt;&lt;!-- /* Font Definitions */
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
/* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
a:link, span.MsoHyperlink
	{mso-style-priority:99;
	color:#0563C1;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-priority:99;
	color:#954F72;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{mso-style-priority:99;
	mso-style-link:"Plain Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;}
p.msonormal0, li.msonormal0, div.msonormal0
	{mso-style-name:msonormal;
	mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;}
span.PlainTextChar
	{mso-style-name:"Plain Text Char";
	mso-style-priority:99;
	mso-style-link:"Plain Text";
	font-family:"Calibri",sans-serif;}
span.EmailStyle20
	{mso-style-type:personal;
	font-family:"Calibri",sans-serif;
	color:#1F497D;}
span.EmailStyle21
	{mso-style-type:personal;
	font-family:"Calibri",sans-serif;
	color:windowtext;}
span.EmailStyle22
	{mso-style-type:personal;
	font-family:"Calibri",sans-serif;
	color:#1F497D;}
span.EmailStyle23
	{mso-style-type:personal-compose;
	font-family:"Calibri",sans-serif;
	color:windowtext;}
.MsoChpDefault
	{mso-style-type:export-only;
	font-size:10.0pt;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
--&gt;&lt;/style&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapedefaults v:ext="edit" spidmax="1026" /&gt;
&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;
&lt;o:shapelayout v:ext="edit"&gt;
&lt;o:idmap v:ext="edit" data="1" /&gt;
&lt;/o:shapelayout&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;/head&gt;&lt;body lang=EN-US link="#0563C1" \
vlink="#954F72"&gt;&lt;div class=WordSection1&gt;&lt;p class=MsoPlainText&gt;Dear \
all,&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;Some time ago I sent to this mailing list a \
proposal for using the ADL construction to solve the crypto tagging attack and it was \
registered as Proposal 295. Then, about a month ago Jean Paul Degabriele sent another \
proposal aiming for the same, which was registered as Proposal 308. We've now had the \
chance to compare both proposals and we provide our observations below.  But \
before we discuss the pros and cons of each proposal, I'd like to re-state our goal \
for Proposal 295. Our aim was to build something that:&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;1. does not lose any security guarantees that are already in \
place; &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;2. prevents successful crypto-tagging; \
and &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;3. does not introduce new \
weaknesses.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;We *did not* consider advanced \
security goals such as forward secrecy and/or non-repudiation which was also \
mentioned earlier on this mailing list. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;In achieving these \
goals, the two proposals are almost the same: for the encryption part, both use \
layered encryption where the nonce is tweaked with a digest of the ciphertext, and \
sent in encrypted form to the next node as part of the ciphertext. The only \
meaningful difference I could find is that instead of using the output of the \
universal hash function (i.e., GHASH) as a running digest as is done in Proposal 295, \
Proposal 308 uses the encrypted nonce. Jean Paul made the correct observation that \
our security proof did not account for key-dependent input, but we believe that this \
can be resolved by rewriting the proof. In either case, this is a subtlety and common \
ground can be found. On a high level, both proposals use the same mechanism to avoid \
crypto-tagging.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;Where the proposals differ is in the authentication part. Proposal \
295 makes a functional separation between the encryption part and the authentication \
part, cf. Lines 150-152 (authentication) and Lines 156-160 (layered encryption). \
Conversely, Proposal 308 does not offer such separation, and the authentication and \
encryption of the last node are done in a single pass (cf. Lines 227-230 and Lines \
244-252). This comes with what we think are two highly unwanted side effects \
defeating the purpose of using the ADL construction to begin with: the authentication \
of the last node depends solely on the proper execution of the IF statement on Line \
266. As a result, if this line is skipped for some reason (e.g., because an adversary \
corrupted the last node, a bug, or as a result of over-optimization), modified \
messages may leave the network. Moreover, the last layer is malleable which means \
that a difference introduced to the ciphertext entering the last node will be \
preserved through the final decryption (given that the IF statement on Line 266 is \
skipped). This is because the decryption nonce does not depend on the authentication \
process (in the lingo of Proposal 308 this is called a "dynamic \
nonce").&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;Comparing this to Proposal 295 we see that the same cannot happen. \
Any change introduced at any point (including the ciphertext entering the last node) \
will completely destroy the payload in an irrecoverable way (the same happens in the \
"static layers" of Proposal 308; only the dynamic layer is malleable). \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;For \
the record, a corollary of all of this is that if Sf_I is leaked (e.g., via a side \
channel in the generation process of Nf_I that is used by the IF statement), the \
adversary now has the secret it needs to decrypt the ciphertext regardless of the \
authentication process. Not being able to do this is exactly what's captured by the \
RUP property used in Proposal 295 in which the only way to obtain N_4 (the \
counterpart of Proposal 308's Nf_I) is via a successful digest of an unmodified \
ciphertext. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;The place where Proposal 308 nicely extends over Proposal 295 is \
in the forward secrecy domain. In an email to this mailing list we conjectured that \
if certain changes are made to Proposal 295 it will provide forward secrecy in \
addition to its crypto-tagging resistance. Jean Paul suggested an attack against this \
conjecture, but I find that the attack is not very convincing. Indeed, once the keys \
are leaked, the last message can be recovered. But I don't think that there's \
anything surprising in the fact that the set of keys that would have normally \
decrypted a message will also do so if leaked to an adversary. A more reasonable \
definition for forward secrecy would be that no message can be decrypted \
*&lt;b&gt;after&lt;/b&gt;* the state (including ephemeral secrets) that was used to generate this \
message was replaced. Admittedly, Proposal 308 replaces this state earlier than \
Proposal 295 (immediately after processing  the message vs. after processing the \
next message), which may be desirable, but is anyway not disastrous. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;That \
being said, this discussion is theoretic in nature since of the two proposals, only \
Proposal 308 offers an actual mechanism. For Proposal 295 we only offer a conjecture. \
We also tend to somewhat agree that frequent re-keying is a better way to achieve \
forward secrecy. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;Regardless of which is the better way, both can be built on top of \
the encryption mechanism we offered in Proposal 295 whose goal is to resist \
crypto-tagging. In the interest of moving forward we propose to implement Proposal \
295 as suggested or something close to it (e.g., using POLYVAL) to counter \
crypto-tagging, then discuss alternatives to achieving forward secrecy and add those \
on top of the ADL construction via Proposal 308.  &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;A few side \
notes:&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;1. Proposal 308 argues that POLYVAL is \
more suited than GHASH to our this use-case. This is an implementation issue. GHASH \
or POLYVAL or any other collision resistant hash function are all the same to us. \
&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;2. I'm pretty sure there's a typo on Line 250 in \
Proposal 308 and that the text should be Y_I = Tf_{I+1} ^ X_I. Otherwise, I can't see \
how the protocol decrypts on Line 285.&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;3. The \
lengths in Section 2.2 (marked for revision) are given in bytes, but then in Section \
2.3 they are treated as bits. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;4. Line 230 has \
unbalanced parenthesis. &lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;p class=MsoPlainText&gt;&lt;o:p&gt; &lt;/o:p&gt;&lt;/p&gt;&lt;p \
class=MsoPlainText&gt;Tomer&lt;o:p&gt;&lt;/o:p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191014112935</emailId><senderName>Roger Dingledine</senderName><senderEmail>arma@torproject.org</senderEmail><timestampReceived>2019-10-14 11:29:35-0400</timestampReceived><subject>Re: [tor-dev] Proposal 271 - improvements</subject><body>

On Mon, Oct 14, 2019 at 07:56:29AM +0000, Florentin Rochet wrote:
&gt;  In short, Prop 271 causes guards to 
&gt; be selected with probabilities different than their weights due to the 
&gt; way it samples many guards and then chooses primary guards from that 
&gt; sample.

Agreed. As you say, Paul identified this one a few years ago too.
As far as I understand the prop#271 design, I agree that it's an issue.

&gt; We are suggesting a straightforward fix to the problem, which 
&gt; is, roughly speaking, to choose primary guards in the order in which 
&gt; they were sampled.

This looks like a good solution to the issue -- the ordering of the
guards as we select them is proportional to their weight, so let's just
use them in the order that we selected them.

One of the tricky features of the prop#271 guard selection design is that
it won't just keep on choosing guards if many are unreachable, but rather
it will stop after a while, so a bad ISP can't totally control what guard
you pick. I think that feature is left untouched by your design change,
since we're choosing from among only the same set as before, just in a
different order. But please think about whether that is true.

&gt; We have created a patch implementing this fix for the 
&gt; case affecting our experiments, which would improve the current 
&gt; situation. We are further suggesting that Tor apply the technique 
&gt; throughout the guard-selection logic.

Can you help us make sure we think of all the places you've already
thought of? :)

&gt;  We believe 
&gt; that this issue has only a limited effect on Tor currently due to the 
&gt; relatively large number of guards.

That makes sense to me too -- most of the guards that are chosen in the
20 will be fast, so choosing uniformly from them will often give you a
fast one.

&gt;  The design also reduces Tor's security by increasing the 
&gt; number of clients that an adversary running small relays can observe. In 
&gt; addition, an adversary has to wait less time than it should after it 
&gt; starts a malicious guard to be chosen by a client. This weakness occurs 
&gt; because the malicious guard only needs to enter the sampled list to have 
&gt; a chance to be chosen as primary, rather than having to wait until all 
&gt; previously-sampled guards have already expired.

This part makes me wonder about another angle to this problem: proper
load balancing when we choose our guards on one date but then make
decisions about them on a different date.

For example, if we sample all these guards on day 0, and then use
the first guard for a week, and then move to the second guard... but
the weights have changed in that time... what will that do to our
load balancing? One extreme case would be a relay that has a really
high weight for a while, and then later turns out to have much lower
bandwidth. It gets into a bunch of guard lists at first (but mostly not
#1 since that's how the probabilities work), and then slowly clients
shift load to it as their #1 guard goes away.

In an ideal world we would want to take into account current guard
weights, when we're shifting from one guard to the next, rather than
making that decision way earlier before we actually turn out to need
the guards. Maybe that argues for delaying more of the decisions?

Note that this question is about yet another improvement that could be
made to the guard part of path selection, and I think it's orthogonal
to the improvement you are proposing.

Thanks,
--Roger

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190905162834</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-09-05 16:28:34-0400</timestampReceived><subject>[tor-dev] Orbot 16.1.1... now with 64-bit tor</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Orbot 16.1.1 was just pushed out publicly to everyone on Google Play
after a long multiple RC and beta period. YES, Orbot is still going to
exist, with a really exciting roadmap ahead. More on that soon!

Thanks to @bitmold @sisbell @pgerber and @eighthave for all the great
work, not to mention the core Tor dev team making all things mobile
better every day!

Highlights include:

* True arm64 tor binaries now!
* Key fixes to VPN mode to handle loss of network access
* Improvements to Tor idle/sleep behavior and resume after network drops
=2E.. and much more!

Github (with APKs):
https://github.com/guardianproject/orbot/releases/tag/16.1.1-BETA-2-tor-0=
=2E4.0.4-rc

APK:
https://guardianproject.info/releases/Orbot-16.1.1-BETA-2-tor-0.4.0.4-rc-=
fullperm-universal-release.apk
(.asc)

F-Droid: soon!

/** 16.1.1-BETA-2-tor-0.4.0.4-rc / Wed Aug 7 13:33:30 2019 -0400 /
bbf5fcb3fb346e9bba712d12bf4934cf925cb2bd **/

bbf5fcb3 (tag: 16.1.1-BETA-2-tor-0.4.0.4-rc) update service for VPN mode
and startup fixes
ea7f3f10 update gitignore
cf19750d update fastlane and gradle to support split apks builds, CI and
more
cd80e850 (tag: 16.1.1-BETA-1-tor-0.4.0.4-rc) update to
16.1.1-BETA-1-tor-0.4.0.4-rc
bfb5eab1 Merge branch 'master' of github.com:n8fr8/orbot
d02fb582 instead of DisableNetwork, let's try NEWNYM when the network
returns - we've had issues of losing connectivity setting
DisableNetwork, so we are trying a new approach - now using
DormantClientTime
out settings, to have client go to sleep when it is not used - when we
receive a network connectivity notification, we call NEWNYM to refresh
circuits
d5e570a5 Merge pull request #247 from bitmold/low_dpi_launcher_icon
767a8596 Launcher icon was out of date on low resolution devices.
7d11984b (tag: 16.1.0-RC-3-tor-0.4.0.4-rc) update to
16.1.0-RC-3-tor-0.4.0.4-rc
e146f703 make sure to kill existing pdnsd, and set the new ports properly=

c6bfc491 send ports on start request, even if tor is already running
d3963516 keep apps around as static variable, enable user to refresh
be5b8d88 make sure we don't have any orphaned pdnsd processes
72ff7dd2 Merge branch 'ejo4041-mergeDebugJniLibFolders_issue'
07e34239 (ejo4041-mergeDebugJniLibFolders_issue) Merge branch
'mergeDebugJniLibFolders_issue' of https://github.com/ejo4041/orbot into
ejo4041-mergeDebugJniLibFolders_issue
be6feea8 Merge branch 'master' of github.com:n8fr8/orbot
d2005234 update gradle
929cb6b6 pdnsd must be named with a .so extension to be included
c0afffeb don't build plain armeabi anymore
4321ae49 update native libs
c7e9b01f Merge pull request #244 from bitmold/vpn_app_ui_glitch
fc0b035a After following the BUILD file, could not build the apk because
of a issue mentioned in #217: Execution failed for task
:orbotservice:mergeDebugJniLibFolders. This change fixes that.
7b832f19 Fixed VPN App UI for apps that were disabled or uninstalled
d084aa6c (tag: 16.1.0-RC-2-tor-0.4.0.4-rc) update to
16.1.0-RC-2-tor-0.4.0.4-rc
79afbe05 bind pdnsd to virtual address within VPN
9ff0b00c fix VPN code to support dynamic DNS port for Tor
f1e572e8 use standard string keys for intent values
361ea26d ports can be set to "auto" so allow letters as well

/** 16.1.0-RC-1-tor-0.4.0.4-rc / 8 July 2019 /
e60c07ed0ffc8360db4dfcdeffd8578945b38d0b **/

Thanks to @bitmold @sisbell @pgerber and @eighthave for all the great
work, not to mention the core Tor dev team making all things mobile
better every day!

e60c07ed (HEAD -&gt; master, tag: 16.1.0-RC-1-tor-0.4.0.4-rc,
public/master, origin/master, origin/HEAD) update to
16.1.0-RC-1-tor-0.4.0.4-rc
9e54cd6e set PDNSD server IP to 192.168.200.1 for local VPN network
0.0.0.0 allowed outside access to DNS port in some cases
b7d100ca fixes #239 #229 #227 #205 and other VPN / DNS issues moved
PDNSD daemon to load from the .so native path
f9c1486c Merge pull request #241 from bitmold/fix_hs_dialog_crash
f1b00157 Merge branch 'sisbell-sisbell_236a'
65ee380d (sisbell-sisbell_236a) Merge branch 'sisbell_236a' of
https://github.com/sisbell/orbot into sisbell-sisbell_236a
1c386959 Fixes #236: Separate Constants For VPN, TOR and MAIN_APP
ce85e951 Fixed crash I introduced with the NoPersonalizedLearningEditText=

324b35ea (tag: 16.1.0-BETA-6-tor-0.4.0.4-rc) update to
16.1.0-BETA-6-tor-0.4.0.4-rc
b6135386 Merge branch 'sisbell_236a' of https://github.com/sisbell/orbot
into sisbell-sisbell_236a
124273fd (newport/master) Merge branch 'sisbell-sisbell_237'
43d807fd (sisbell-sisbell_237) remove minSDK from OrbotService manifest
45369a2a Merge branch 'sisbell_237' of https://github.com/sisbell/orbot
into sisbell-sisbell_237
4a79476e Merge pull request #234 from bitmold/vpn_request_cancel_bug_fixe=
s
b0cf7424 Merge pull request #233 from bitmold/no_vpn_refresh_btn
e448c18b Merge branch 'bitmold-remove_orfox'
f3211aca Fixes #236: Separate Constants For VPN, TOR and MAIN_APP
8c232f73 Fixes #237: Upgrade to Gradle 5.x
2ebd3384 Fixes VPN Request Cancel Bugs
cde49d1a Removes the refresh button on the VPN Selection screen
351ef96f (bitmold-remove_orfox) Removes references to Orfox since it is
being completely replaced with the Tor Browser for Android.
Conversations surrounding this can be found here https://blog.torproject.=

org/comment/281767#comment-281767 and here
https://trac.torproject.org/projects/tor/ticket/29955
656d39b7 (tag: 16.1.0-BETA-5-tor-0.4.0.4-rc) update to
16.1.0-BETA-5-tor-0.4.0.4-rc
814fbb31 reset default ports to 9050, 8118 but make them dynamic if
needed - ports will be checked and if not available, increment +1 - new
setting add to allow static setting of http port value
827b905e ensure we are putting the right value in
144a4ed5 small change to attempt to address localization glitches
c4062678 Merge branch 'master' of github.com:n8fr8/orbot
ecdff5ce remove unused settings for root and transproxy
811c09aa Merge pull request #226 from
bitmold/removed_unused_eclipes_prefs_folder
0361fb9a Merge pull request #225 from bitmold/missing_hidden_service_str
510118eb Merge branch 'master' of github.com:n8fr8/orbot
f0103bf4 Removed unused Eclipse IDE settings files. I think there are
old Eclipse build files in the root of the repository that should also
get deleted but I'm not 100% sure if some of them are still used
=C2=A0or not
768bbf94 The string resource "hidden_service_request" was missed in the
"hidden service" to "onion service"rename in #222
53940073 Merge pull request #223 from
bitmold/farsi_settings_crash_no_custom_prefs
f0eede1d Merge pull request #222 from pgerber/onion-service
aea140cf Merge pull request #221 from pgerber/dns-ttl
7887e119 fixes Farsi settings crash
f58ef4c0 (tag: 16.1.0-BETA-4-tor-0.4.0.4-rc) update to
16.1.0-BETA-4-tor-0.4.0.4-rc
dd3a8b0b improve how bridge lines are configured
553528cb make sure to use the request shell for exec()
1f36689b make sure we set HOME env variable some devices don't have it
for their sh commands
dc942cde Rename hidden services to onion services
2a0a116c Fix onion service only working intermittently in VPN mode
77d979cd (tag: 16.1.0-BETA-3-tor-0.4.0.4-rc) update to
16.1.0-BETA-3-tor-0.4.0.4-rc
eb13e155 don't use 'UpdateBridgesFromAuthority' as it seems to cause a ha=
ng
67b69164 update built-in bridges
97a32ccf add ' UpdateBridgesFromAuthority' to help keep people connected
to bridge
aeb54c7e (tag: 16.1.0-BETA-2-tor-0.4.0.4-rc) update to
16.1.0-BETA-2-tor-0.4.0.4-rc
6dffafcb add dynamic display of SOCKS and HTTP port proxy value
397391f0 remove hardcoded port values, make it all dynamic

/** 16.1.0-BETA-1-tor-0.4.0.4-rc / 31 May 2019 /
417e4fcd0720be57328d63a96d2c9fc0e119330f **/

Thanks to @bitmold @sisbell and @eighthave for all the great work, not
to mention the core Tor dev team making all things mobile better every da=
y!

417e4fcd update version to 16100003 aka 16.1.0-BETA-1-tor-0.4.0.4-rc
7ae000d0 fix pdnsd/VPN support
dde1957d Merge pull request #219 from bitmold/delete_minimalperm_manifest=

a251d52f Merge pull request #218 from bitmold/ndk_app_platform_warning
eda464bb remove incorrect torFile assignment
a1c5806a update tor-android to 0.4.0.4-rc
ad2e875b We no longer use the minimalperm product flavor so there's no
need to keep this manifest file in app/src
917e49f5 Removes warning on ndk-build where the target API for NDK (16)
is greater than the sdk version defined for the project. Since nothing
was specified in the manifest it defaulted to 1 but we can set
=C2=A0this to Orbot's minSdkVersion of 16 to get rid of this warning
f83a98f4 Merge branch 'sisbell-issue_199'
ff7d3dd5 (sisbell-issue_199) Merge branch 'issue_199' of
https://github.com/sisbell/orbot into sisbell-issue_199
7c2cfc3e Merge pull request #212 from sisbell/issue_211
1316fd65 Merge branch 'bitmold-no_personalized_learning_kb'
e3fd4afa (bitmold-no_personalized_learning_kb) Merge branch
'no_personalized_learning_kb' of https://github.com/bitmold/orbot into
bitmold-no_personalized_learning_kb
aa8ad867 Merge pull request #204 from bitmold/unreferenced_classes
16826a49 Merge branch 'bitmold-removed_obsolete_version_checks'
17154609 (bitmold-removed_obsolete_version_checks) Merge branch
'removed_obsolete_version_checks' of https://github.com/bitmold/orbot
into bitmold-removed_obsolete_version_checks
0e4b42a7 add close bracket
4cee987c Merge branch 'master' into removed_obsolete_version_checks
08c35bd3 Remove unused resources.
ae4ce1c9 Fixes #211: Resource Not Found on Command Line Build
2fb7e05a Merge pull request #210 from eighthave/fastlane
57120100 rename all metadata locale dirs after the Fastlane/Play names
baced180 setup Fastlane to upload to Google Play
d2feefdd Removed Obsolete @TaretApi Annotations for API Levels that are
lower than Orbot's minimum, API Level 16
a32452e7 Make text inputs in Orbot declare that they do want to opt out
of IME personalized learning. Of course, IMEs may ignore this request,
but it's a nudge in the direction of Tor's general philosophy
on user privacy, particularly with regards to minimizing the footprint
that a Tor app leaves on the user's device.
7d8e41a6 Removed Constraint Layout Dependency
5d04d418 Removed Unused Classes
2b6abd7e Removed Obsolete Version Checks
cd6560fa Merge pull request #202 from bitmold/no_constraint_layout
a5d5c99f (public/master, gl/master) remove unused launcher art
9257b66f don't shrink or minify for now
56917567 (tag: 16.0.6-BETA-2-tor-0.3.5.8) many small changes to support
new binary loading, startup and more - improved handling of port
conflicts - fixed loading of tor binary on arm64-v8a - changed how w
e execute shell commands
8ed080f9 Removed Constraint Layout Dependency
2a76b7af (tag: 16.0.6-BETA-1-tor-0.3.5.8) updated to SDK 28, added
android.permission.FOREGROUND_SERVICE permission
fb14c76c fixed strings with two many \\ escapes
45575772 updating to tor-0.3.5.8-rc to add support for Android Q
22d5ffdf update gradle tools
76796fea Merge pull request #200 from eighthave/fastlane-supply
6ba0cecc add .gitlab-ci.yml setup with errorprone
3face00a build gradle to 4.4.1, and make gradlew verify the download
69bd7fe9 move app store graphics into fdroid/fastlane file layout
f93c11e7 Merge pull request #190 from SkewedZeppelin/master
8ab13f63 Fixup bad indentation from 6e4b7008
12b91c44 Expose PreferIPv6 and NoIPv4Traffic options
8ad76680 Move Google repo above jcenter
d4befad1 cleanup and binary loading fixes
2d4e2a5f update tor to 0.3.5.6-RC
0f314214 (tag: 16.0.5-RC-2-tor-0.3.4.9) update to 16.0.5-RC-2-tor-0.3.4.9=

2c59c848 ensure startForeground() is always immediately called - since
we use startForegroundServce() we must ensure the receiving service
complies!




_______________________________________________
List info: https://lists.mayfirst.org/mailman/listinfo/guardian-dev
To unsubscribe, email:  guardian-dev-unsubscribe@lists.mayfirst.org



["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190910070345</emailId><senderName>meejah</senderName><senderEmail>meejah@meejah.ca</senderEmail><timestampReceived>2019-09-10 07:03:45-0400</timestampReceived><subject>[tor-dev] txtorcon 19.1.0</subject><body>


-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

I'm pleased to announce txtorcon 19.1.0, containing the following
changes:

 * TorControlProtocol.on_disconnect is deprecated in favour of
   TorControlProtocol.when_disconnected

 * introduce non_anonymous_mode= kwarg in txtorcon.launch()
   enabling Tor options making Onion Services non-anonymous for the
   server (but they use a single hop instead of three to the
   Introduction Point so they're slightly faster).

 * add an API to listen to individual circuit and stream events
   (without subclassing anything). Can be used as decorators too.
   See e.g. TorState.on_circuit_new()

 * fixes to the CI setup to properly test Twisted versions

You can download the release from PyPI or GitHub (or of
course "pip install txtorcon"):

   https://pypi.python.org/pypi/txtorcon/19.1.0
   https://github.com/meejah/txtorcon/releases/tag/v19.1.0

Releases are also available from the hidden service:

   http://timaq4ygg2iegci7.onion/txtorcon-19.1.0.tar.gz
   http://timaq4ygg2iegci7.onion/txtorcon-19.1.0.tar.gz.asc

Or via a "version 3" service:

   http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-19.1.0.tar.gz
  http://fjblvrw2jrxnhtg67qpbzi45r7ofojaoo3orzykesly2j3c2m3htapid.onion/txtorcon-19.1.0.tar.gz.asc


You can verify the sha256sum of both by running the following 4 lines
in a shell wherever you have the files downloaded:

cat &lt;&lt;EOF | sha256sum --check
25d8e52c3eac45bb90ff958ca7cdd7674fb3284e3a50826a58ab7b9578b15ea5  \
dist/txtorcon-19.1.0.tar.gz \
e93aef50f339b537ed969a4d83a704a2870658bb49cdfa95495ba5a740548d32  \
dist/txtorcon-19.1.0-py2.py3-none-any.whl EOF

thanks,
meejah
-----BEGIN PGP SIGNATURE-----

iQFFBAEBCAAvFiEEnVor1WiOy4id680/wmAoAxKAaacFAl13SBcRHG1lZWphaEBt
ZWVqYWguY2EACgkQwmAoAxKAaad/DwgA5r1XbcoPuzw2FSoDNwJNNzDSEFBT+W7Z
Ej0Wp27B7KuUgCp83u08DWpCbuz1iOLiYveWtKil+CrXFpmxH2M9itF4pd3U71dt
o/PfEnPy3OxWD1cka2bnuFO3HlmCs7LOy5KndRlWBSzqDXfqnwTLqNSHB94TMoh3
YEhyKmyo30DwLMeNdeayuJ18c24+U15kxt5+O7TPKSeNw88emizDMX3ZQFnuIUyJ
6ybZxIwkJxXLOlO+cqnLH26eSIFqHrvILTXPvZ3ie2cwNYOgNS4IpkmVUlrF41Zq
xQgMdR1pzLWrEVMSPOYKicAnPW/drd8urwXMq5y2/dVuUhQmhHxBxg==
=7R7N
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190911130224</emailId><senderName>Rishab Nithyanand</senderName><senderEmail>rishabn.uci@gmail.com</senderEmail><timestampReceived>2019-09-11 13:02:24-0400</timestampReceived><subject>[tor-dev] Non-endorsed methods for accessing Tor hidden services</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tor-Dev,

I'm sending this message on behalf of Hammas, one of my PhD students at
UIowa, who has been unable to get his emails past moderator approval.
Hammas and I have been recently working on the implications of visiting the
Tor hidden services through services not endorsed by Tor itself. The goal
is to see if they're doing things that might deanonymize a user.

Currently, we've only found a handful of Tor2Web websites and extensions. I
have found injected HTMLs containing common trackers and tweaks in request
headers which might cause serious privacy harm.

We want to be more thorough in our study of this ecosystem and were hoping
that you all might be aware of some non-Tor-endorsed extensions, websites,
apps, or services that we should test. No matter how popular or obscure,
please let me know!

Thanks for your time and help!

Best,
Rishab

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;br&gt;Hi Tor-Dev,&lt;br&gt;&lt;br&gt;I'm sending this message on behalf of \
Hammas, one of my PhD students at UIowa, who has been unable to get his emails past \
moderator approval. Hammas and I have been recently working on the implications of \
visiting the Tor hidden services through services not endorsed by Tor itself. The \
goal is to see if they're doing things that might deanonymize a \
user.&lt;br&gt;&lt;br&gt;Currently, we've only found a handful of Tor2Web websites and \
extensions. I have found injected HTMLs containing common trackers and tweaks in \
request headers which might cause serious privacy harm.&lt;br&gt;&lt;br&gt;We want to be more \
thorough in our study of this ecosystem and were hoping that you all might be aware \
of some non-Tor-endorsed extensions, websites, apps, or services that we should test. \
No matter how popular or obscure, please let me know!&lt;br&gt;&lt;br&gt;Thanks for your time and \
help!&lt;br&gt;&lt;br&gt;Best,&lt;div&gt;Rishab&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190912140652</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-09-12 14:06:52-0400</timestampReceived><subject>Re: [tor-dev] Compile warns</subject><body>

On Thu, Sep 12, 2019 at 5:15 AM grarpamp &lt;grarpamp@gmail.com&gt; wrote:
&gt;
&gt; On 9/10/19, Nick Mathewson &lt;nickm@torproject.org&gt; wrote:
&gt; &gt; https://trac.torproject.org/projects/tor/ticket/31687
&gt; &gt; needs testing; please let me know if it works for you.
&gt;
&gt; Works. The second hunk for fp.c is below.

Okay. I've added a second branch to the ticket, to be applied to 0.4.0
and later. Please let me know if it doesn't work.

&gt; &gt; Is it possible that
&gt; &gt; a new compiler version or new headers in FreeBSD is what has made them
&gt; &gt; start appearing?
&gt;
&gt; Possible, depending on date, gaps in reporting, etc...
&gt; FreeBSD switched its base from gcc 4.2+ to llvm 3.3 in FreeBSD 10 (2014q1).
&gt; https://svnweb.freebsd.org/base/stable/12/contrib/gcc/?view=log
&gt; https://svnweb.freebsd.org/base/stable/12/contrib/llvm/?view=log
&gt; Users can choose among some compiler toolchain major revs from ports,
&gt; users default choice of "llvm" / "gcc" has dates in here...
&gt; https://svnweb.freebsd.org/ports/head/Mk/bsd.default-versions.mk?view=log
&gt;
&gt; FreeBSD 12.x default is at llvm 8.0.1, which doesn't complain.
&gt;
&gt; &gt; do you see these warnings if you go
&gt; &gt; back and build 0.4.0 or 0.3.5?
&gt;
&gt; Yes to both.

Thanks for confirming this!

-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913203049</emailId><senderName>Steve Snyder</senderName><senderEmail>swsnyder@snydernet.net</senderEmail><timestampReceived>2019-09-13 20:30:49-0400</timestampReceived><subject>Re: [tor-dev] Preferred compression type?</subject><body>

Thanks, Nick!


On 9/13/19 4:24 PM, Nick Mathewson wrote:
&gt; On Fri, Sep 13, 2019 at 2:05 PM Steve Snyder &lt;swsnyder@snydernet.net&gt; wrote:
&gt;&gt;
&gt;&gt; Given the multiple compression types supported (none, lzma, zlib, zstd),
&gt;&gt; what is the order of preference for runtime use?
&gt;&gt;
&gt;&gt; Put another way, which compression method(s) should be supported to get
&gt;&gt; optimal runtime performance from a Tor node?
&gt; 
&gt; For big objects like consensuses or consensus diffs that are sent over
&gt; and over, relays prefer to use whichever compression method has the
&gt; highest compression -- that's lzma2, then zstd, then zlib, then none.
&gt; Lzma2 (aka xz) is more expensive to calculate, but the relays only
&gt; need to calculate it once per compressed object, and then they can
&gt; send it over and over.
&gt; 
&gt; For smaller objects that are compressed in a stream (descriptors and
&gt; microdescriptors), relays will not use xz, since it would be to
&gt; expensive to recompute it for every stream. They'll prefer zstd, then
&gt; zlib, then none.
&gt; 
&gt; So if you want to save bandwidth above all, you should enable all
&gt; compression algorithms.
&gt; 
&gt; If you want to save CPU above all, you should enable all compression
&gt; algorithms except xz.
&gt; 
&gt; If you want to save bandwidth and CPU, I _think_ that enabling all the
&gt; compression algorithms will result in Tor making good choices (as
&gt; described above).  But I'd appreciate benchmarks if anybody has tried
&gt; it both ways to find out.
&gt; 
&gt; cheers,
&gt; 
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191017111756</emailId><senderName>James Brown</senderName><senderEmail>jbrown299@yandex.com</senderEmail><timestampReceived>2019-10-17 11:17:56-0400</timestampReceived><subject>[tor-dev] New python Tor client implementation</subject><body>

[Attachment #2 (text/html)]

&lt;div&gt;&lt;div&gt;Hello all,&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;Recently I finished a pure python \
implementation of the Tor client. It's called torpy \
(https://github.com/torpyorg/torpy).&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;It offers handy API, \
supports v2 hidden services with "basic" and "stealth" authorization protocol. Works \
with python 3.6+.&lt;/div&gt;&lt;div&gt;It has no dependencies on the original C Tor client and \
Stem. For more information please take a look at README on github.&lt;/div&gt; \
&lt;div&gt;&lt;div&gt;Here is a quick example of how to use the \
library:&lt;/div&gt;&lt;/div&gt;&lt;div&gt;```python&lt;/div&gt;&lt;div&gt;from torpy import TorClient&lt;/div&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;hostname = 'ifconfig.me' # or onion-services as well, for example \
'http://facebookcorewwwi.onion'&lt;/div&gt;&lt;div&gt;tor = TorClient()&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;# \
Choose random guard node and create 3-hops circuit&lt;/div&gt;&lt;div&gt;with \
tor.create_circuit(3) as circuit:&lt;/div&gt;&lt;div&gt;   # Create tor stream to host&lt;/div&gt;&lt;div&gt; \
with circuit.create_stream((hostname, 80)) as stream:&lt;/div&gt;&lt;div&gt;       # Now we can \
communicate with host&lt;/div&gt;&lt;div&gt;       stream.send(b'GET / HTTP/1.0\r\nHost: \
%s\r\n\r\n' % hostname.encode())&lt;/div&gt;&lt;div&gt;       recv = \
stream.recv(1024)&lt;/div&gt;&lt;div&gt;```&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;Please list torpy project at \
https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations&lt;/div&gt;&lt;div&gt; \
&lt;/div&gt;&lt;div&gt;It would be nice if you try the client. I look forward to any \
feedback.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt;Cheers.&lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;div&gt; &lt;/div&gt;&lt;/div&gt;


[Attachment #3 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191017211607</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-10-17 21:16:07-0400</timestampReceived><subject>Re: [tor-dev] New python Tor client implementation</subject><body>

Thanks James, this is awesome! Very well done. Out of curiosity why
sidestep any use of Stem? It supports encoding/decoding most tor cell
types...

Yours: https://github.com/torpyorg/torpy/blob/master/torpy/cells.py
Mine: https://gitweb.torproject.org/stem.git/tree/stem/client/cell.py

If you'd care to integrate any of this functionality into Stem I'd be
delighted to work with you.

Cheers! -Damian

On Thu, Oct 17, 2019 at 7:05 AM James Brown &lt;jbrown299@yandex.com&gt; wrote:
&gt; 
&gt; Hello all,
&gt; 
&gt; Recently I finished a pure python implementation of the Tor client. It's called \
&gt; torpy (https://github.com/torpyorg/torpy). 
&gt; It offers handy API, supports v2 hidden services with "basic" and "stealth" \
&gt; authorization protocol. Works with python 3.6+. It has no dependencies on the \
&gt; original C Tor client and Stem. For more information please take a look at README \
&gt; on github. 
&gt; Here is a quick example of how to use the library:
&gt; ```python
&gt; from torpy import TorClient
&gt; 
&gt; hostname = 'ifconfig.me' # or onion-services as well, for example \
&gt; 'http://facebookcorewwwi.onion' tor = TorClient()
&gt; 
&gt; # Choose random guard node and create 3-hops circuit
&gt; with tor.create_circuit(3) as circuit:
&gt; # Create tor stream to host
&gt; with circuit.create_stream((hostname, 80)) as stream:
&gt; # Now we can communicate with host
&gt; stream.send(b'GET / HTTP/1.0\r\nHost: %s\r\n\r\n' % hostname.encode())
&gt; recv = stream.recv(1024)
&gt; ```
&gt; 
&gt; Please list torpy project at \
&gt; https://trac.torproject.org/projects/tor/wiki/doc/ListOfTorImplementations 
&gt; It would be nice if you try the client. I look forward to any feedback.
&gt; 
&gt; Cheers.
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191002113519</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-10-02 11:35:19-0400</timestampReceived><subject>[tor-dev] HSv3 descriptor work in stem</subject><body>

Hello atagar,

I'm starting this thread to ask you questions about stem and the HSv3
work we've been doing over email so that we don't do it over IRC.

Here is an initial question:

   I'm working on HSv3 descriptor encoding, and I'm trying to understand
   how `_descriptor_content()` works. In particular, I want to compute the
   signature of a descriptor, but I see that `descriptor_content()`
   fills it with random bytes in all the `content()` methods I managed
   to find:

            ('signature', _random_crypto_blob('SIGNATURE')),

   What's the right way to compute the signature for such objects? In
   particular, I would need a method that first generates the whole
   descriptor body, and then computes the signature of that with a given
   private key.

   Can I use `_descriptor_content()` to do that? Or should I call
   `_descriptor_content()` to generate the whole thing _without_ the
   sig, and then do the signature computation on its result and
   concatenate it after?


Thanks! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913180454</emailId><senderName>Steve Snyder</senderName><senderEmail>swsnyder@snydernet.net</senderEmail><timestampReceived>2019-09-13 18:04:54-0400</timestampReceived><subject>[tor-dev] Preferred compression type?</subject><body>

Given the multiple compression types supported (none, lzma, zlib, zstd),
what is the order of preference for runtime use?

Put another way, which compression method(s) should be supported to get
optimal runtime performance from a Tor node?

Thanks.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190910162310</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-09-10 16:23:10-0400</timestampReceived><subject>[tor-dev] New Orbot, tor-android and AndroidPluggableTransport updates</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


A new Orbot is out, with a bug fix related to obfs4proxy installation,
and a new tor!

We've also updated the tor-android library, with the latest 0.4.1.5
release, and all is working well.

https://github.com/guardianproject/tor-android/releases/tag/tor-android-b=
inary-tor-0.4.1.5

and we updated our AndroidPluggableTransports library, which was at the
root of our "Orbot Bridge" bug, not properly installing the binary from
the APK bundle.

https://github.com/guardianproject/AndroidPluggableTransports/releases/ta=
g/1.0.7

These libraries and versions are available via our Guardian Project
gradle/maven repo hosted on Github:

maven { url
"https://raw.githubusercontent.com/guardianproject/gpmaven/master" }

implementation 'org.torproject:tor-android-binary:0.4.1.5-rc'

implementation 'info.pluggabletransports.aptds:apt-dispatch-library:1.0.7=
'
implementation 'info.pluggabletransports.aptds:apt-meek-obfs4-legacy:1.0.=
7'

Everything is building again in our CI pipeline here:
https://gitlab.com/guardianproject/orbot/pipelines
and we nearly have automated on-device testing working via the cloud
services Bitbar and/or Browserstack.

Life is good, again.

+n


-------- Forwarded Message --------
Subject: 	Orbot 16.1.2 RC-2 with tor-0.4.1.5-rc
Date: 	Tue, 10 Sep 2019 00:42:56 -0400
From: 	Nathan of Guardian &lt;nathan@guardianproject.info&gt;
Organisation: 	Guardian Project
To: 	Guardian Dev &lt;guardian-dev@lists.mayfirst.org&gt;



Orbot 16.1.2-RC-2-tor-0.4.1.5-rc
https://github.com/guardianproject/orbot/releases/tag/16.1.2-RC-2-tor-0.4=
=2E1.5-rc

* Found and fixed bug related to bridges not working
(https://github.com/guardianproject/orbot/issues/242)
* Updated tor to 0.4.1.5

ARM64 APK:
https://github.com/guardianproject/orbot/releases/download/16.1.2-RC-2-to=
r-0.4.1.5-rc/Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.=
apk
ARMEABI APK:
https://github.com/guardianproject/orbot/releases/download/16.1.2-RC-2-to=
r-0.4.1.5-rc/Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-releas=
e.apk

@n8fr8 n8fr8 released this 5 minutes ago =C2=B7 0 commits to master since=

this release

c2e679d (HEAD -&gt; master, tag: 16.1.2-RC-2-tor-0.4.1.5-rc) update to
16.1.2-RC-2-tor-0.4.1.5-rc
1d45a3d update APT Pluggable Transport library to 1.0.7 - this should
fix one issue with installing the correct ofbs4proxy binary - also small
changes to ensure no lock states and reduce log noise
efec61d (tag: 16.1.2-RC-1-tor-0.4.0.4-rc, newport/master) update to
16.1.2-RC-1-tor-0.4.0.4-rc
237b388 yet another attempt at fixing the phantom zulu locale bug!
a9efc3c disable tests for now in CI build
918bcca (origin/master, origin/HEAD) remove unused layouts for app-mini
08b670f update paths for app-mini code
cefac58 putting classes back into main app package, and not "mini"
97d2aac improvements for bridge handling for #242
0e40c07 update badvpn tun2socks library
034844a remove fileprovider from app-mini since it is used just for HS
d95f197 make keystore props reading not fail if not present
d0640c6 remove output from repo
e8f3158 remove binaries from repo
5845a4c update build tools to 29
003d9ea update build tools to 29
9c6de06 update build tools to 29
a266c65 add new functionality to allow for checking connections against
app blacklist
d98e5fb update changelog for 16.1.1-BETA-2-tor-0.4.0.4-rc-orbotservice
Assets 6
Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.apk 10.3 MB
Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.apk.asc 833
Bytes
Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk 9.94 MB=

Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk.asc
833 Bytes




["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190912105043</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-09-12 10:50:43-0400</timestampReceived><subject>[tor-dev] reproducible builds for Android tor daemon</subject><body>


Hey all,

I'm currently working on tor for Android as part of a Guardian Project
project.  One key goal is making a shareable, reproducible build process
for the tor daemon for Android.  Then this would be published to
MavenCentral as an Android AAR package to be used in all the apps that
include tor (Tor Browser, Orbot, Briar, Thali, etc).  I have cleaned up
the existing build process a lot, so now I'm down to troubleshooting
reproducible issues.

First off, can anyone see any objections to switching Tor Browser,
Orbot, Briar, etc. to use GPG-signed reproducible binaries via
MavenCentral for the tor dameon?

Second, I'd welcome pointers to the integration points in Tor Browser,
Briar, etc.

And third, and tips on getting a Linux shared library to build
reproducibly.  E.g. is faketime a hard requirement?


And for those interested, the here's an overview of the whole project
I'm tasked with:

The basic idea is to make an Android-native TorService, which is a
subclass of android.app.Service and loads tor daemon as a shared
library, and starts it via JNI methods. This should be pretty close to
how iOS apps use tor. Then that TorService should then plug into Orbot,
Tor Browser, Briar, etc. Then based on that, I'll make a standalone,
dead simple "TorServices" app that only provides Tor. No PTs, HSs, etc.,
just a tor daemon linked in as a shared library, providing a SOCKS and
HTTP CONNECT proxy via tor. I hope to switch the ControlPort to use a
UNIX domain socket.  This then can also be embedded into Android OS ROMs
that want to have Tor built-in as a system service, like CalyxOS.

Then I'll be working on the apps choosing which tor provider to use,
since we'll have a new TorServices, so apps that don't include Tor will
have to figure out how to use Orbot and/or TorServices. Then that work
will hopefully be extended into sharing tor between apps, e.g. letting
Briar, Tor Browser, etc share the tor SOCKS proxy to other apps that
want to use it. That would happen via Android mechanisms like Intents to
manage the discovery of SOCKS ports.

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190918213548</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-09-18 21:35:48-0400</timestampReceived><subject>[tor-dev] Timing of opening pre-emptive circuits?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Hi Tor-Dev,

I'm curious what the timing is of Tor's opening of preemptive circuits.
 Specifically, consider the following attack:

1. A new stream is assigned to a clean circuit.
2. Because of the above, that clean circuit is now a dirty circuit.
3. Because of the above, the number of clean circuits is now decreased
by 1.
4. Because of the above, the number of clean circuits is now lower than
the number that Tor wants to have open.
5. Because of the above, Tor opens a new preemptive circuit.
6. An attacker who can observe the circuit in (1) and the circuit in (5)
can deduce by temporal proximity that those 2 circuits belong to the
same client.

This attack seemed obvious enough to me that I assumed that Tor must
have some kind of countermeasure to it, e.g. random delays in opening
preemptive circuits.  However, the tor-path specification doesn't
mention any such countermeasure, and based on a brief search through the
Tor source code, all I can find is that Tor opens preemptive circuits
using a function that always gets called once per second (with no
mention of any delay beyond that one-second interval, random or
otherwise).

So, does Tor make any effort to mitigate the above attack?  If so, what
mitigations are present, and where would I find them (in both the spec
and the source code)?  If not, is there any documented reason (e.g. "the
attack is too hard to pull off" or "we want to mitigate it but haven't
gotten to it yet") for the lack of mitigation?

Cheers,
- -- 
- -Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.
-----BEGIN PGP SIGNATURE-----

iQIzBAEBCgAdFiEEVB3fdzAraEcoBtkSs/LRZXhtZXAFAl2CoycACgkQs/LRZXht
ZXDyjhAAk3F6fJUvNl4FHws6IIBHWXby/zC7MLzr9zR3sIC3RY4f/I7XBDTKKfMg
iOehJlBEksm5sRz6nlybUBivsJ0WRL8VCT3rEK3+LQM7JrYNvGajolEw2apBUeB3
+Vg+Quo5JzTZrjCtXljxdps/hhC1YwEyN6pxxn2137q4XAsRPQgSCcWpsBuDTffb
LFRwyGrNxk6chbpQc0GIWQRoeElxFwaLbUrZdGtaaEjBXY2oWoan1TUB34MAVNzF
1o6DlaO2JQ7weHVHoXlTlXS7gt84/WyY0xaHUY9ONHwrhgDPGv3N5+Fa2Em+PvGx
ik+4iSCzPf6aKY0iUv1AsWKiaq8rRsMToyNzNZ048uYHk2IK2Zrbqh4Nm44RTzKD
84tJU71calRdNhbwuvmgsYKh26Ad9ALf9BzDeiweA3c5ZP0JP0OlLcAN9c056WT3
FQbChA1edZkWkPvBjGtl4l7ROIx6wkNpWgaQsYUCMveszB2Rm38BQw5sYLh8i6ha
AlT3UVs/GJscSSsfmHGrTisao444Etp4J/+SFe1aNJwfOogbEfgJ1jRf8V5dlYEb
rcicgkwmnBf01vnVaUO9C6/lToUa9i7r3BD3s6OQW24qz2ixieS3K6NxxxqMrVQ1
vFArleJIYA/FsDM2NPbeaUQA9z5GJj5X3FcPUPLLF+y5G/0HE14=
=aBRL
-----END PGP SIGNATURE-----
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190912223415</emailId><senderName>Jean Paul Degabriele</senderName><senderEmail>jpdega@gmail.com</senderEmail><timestampReceived>2019-09-12 22:34:15-0400</timestampReceived><subject>[tor-dev] Counter Galois Onion: A New Proposal for Forward-Secure Relay Cryptography</subject><body>

[Attachment #2 (multipart/alternative)]


Hello tor-devs,

Martijn Stam and myself have previously worked on analysing the security
of proposal 261. Together with Martijn's PhD student, Alessandro Melloni,
we have now written a proposal for an onion encryption scheme as an
alternative to Proposals 261 and 295. It builds on the GCM-RUP construction
from [ADL17] but it offers a number of improvements over proposal 295. In
addition to addressing the issues described below we expect it to offer
better
performance. We are currently working on a security proof and potential
efficiency optimisations for this scheme. In the meantime, we would be very
happy to hear what you think and any feedback you may have. If something
is unclear, please let us know.

Best,

Martijn, Alessandro, and Jean Paul

---------------------

In our assessment of proposal 295 we identified the following issues:

a) Improper use of the universal hash function. The proposal suggested
using GHASH, a universal hash function, to compute the digest.
Universal hash functions require their input to be independent of the
hash key for security to hold. This is also a basic requirement in the
tweakable block cipher construction, underlying the PIV and RUP
constructions. However, the construction requires feeding back the
digest (which is key-dependent) back into the input of the hash. Note
that such feedback was not present in [ADL17] and the security proof
breaks down with this modification.

b) Lack of Forward Security for any type of hash function that is
used. If instantiated with GHASH, proposal 295 does not provide forward
security (as it is easy to invert given the hash key). The designers
suggested (on the Tor dev mailing list) that forward security could be
achieved by instantiating the hash function with SHA2 or SHAKE instead.
Clearly this degrades the efficiency of the scheme but, as we argue
below, it still does not suffice to achieve forward security
Specifically, even if the hash function is instantiated with an ideal
hash function (a random oracle), the construction succumbs to the
following attack.

Assume that the last OR in a circuit of length n has already processed
some cells and that its current state is (Kf_n, Kb_n, Ktf_n, Ktb_n, Khf_n,
Khb_n, Tf'_n, Tf'_{n+1}, Tb'_n, Tb'_{n+1}). An adversary, who has collected
previous ciphertexts and nonces (C, N), then corrupts it. The adversary has
enough information to recover the last message received by OR_n, which
it computes as follows:

N_{n+1} = Tf'_n ^ D(Ktf_n, Tf'_n ^ N_n)
M = Decrypt(Kf_n, N_{n+1}, C_n).

Clearly this breaks forward security, and it is enabled by the fact that the
current digest needs to be saved for computing the next digest for when
another ciphertext is received.


[ADL17] Tomer Ashur, Orr Dunkelman, Atul Luykx, "Boosting Authenticated
Encryption Robustness with Minimal Modifications", CRYPTO 2017.

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Hello tor-devs,&lt;br&gt;&lt;br&gt;Martijn Stam and myself have previously worked \
on analysing the security&lt;div&gt;of proposal 261. Together with Martijn's PhD \
student, Alessandro Melloni,  &lt;/div&gt;&lt;div&gt;we have now written a proposal for an onion \
encryption scheme as an&lt;/div&gt;&lt;div&gt;alternative to Proposals 261 and 295. It builds on \
the GCM-RUP  construction&lt;div&gt;from [ADL17] but it offers a number of improvements \
over proposal 295. In&lt;/div&gt;&lt;div&gt;addition to addressing the issues described below we \
expect it to offer better&lt;/div&gt;&lt;div&gt;performance. We are currently working on a \
security proof and potential&lt;/div&gt;&lt;div&gt;efficiency optimisations for this scheme. In \
the meantime, we would be very&lt;/div&gt;&lt;div&gt;happy to hear what you think and any \
feedback you may have. If something&lt;/div&gt;&lt;div&gt;is unclear, please let us \
know.&lt;br&gt;&lt;br&gt;Best,&lt;br&gt;&lt;br&gt;Martijn, Alessandro, and Jean \
Paul&lt;br&gt;&lt;br&gt;---------------------&lt;br&gt;&lt;br&gt;In our assessment of proposal 295 we \
identified the following issues:&lt;br&gt;&lt;br&gt;a) Improper use of the universal hash \
function. The proposal suggested&lt;br&gt;using GHASH, a universal hash function, to \
compute the digest.&lt;br&gt;Universal hash functions require their input to be independent \
of the&lt;br&gt;hash key for security to hold. This is also a basic requirement in \
the&lt;br&gt;tweakable block cipher construction, underlying the PIV and \
RUP&lt;br&gt;constructions. However, the construction requires feeding back the&lt;br&gt;digest \
(which is key-dependent) back into the input of the hash. Note&lt;br&gt;that such feedback \
was not present in [ADL17] and the security proof&lt;br&gt;breaks down with this \
modification.&lt;br&gt;&lt;br&gt;b) Lack of Forward Security for any type of hash function that \
is&lt;br&gt;used. If instantiated with GHASH, proposal 295 does not provide \
forward&lt;br&gt;security (as it is easy to invert given the hash key). The \
designers&lt;br&gt;suggested (on the Tor dev mailing list) that forward security could \
be&lt;br&gt;achieved by instantiating the hash function with SHA2 or SHAKE \
instead.&lt;br&gt;Clearly this degrades the efficiency of the scheme but, as we \
argue&lt;br&gt;below, it still does not suffice to achieve forward \
security&lt;br&gt;Specifically, even if the hash function is instantiated with an \
ideal&lt;br&gt;hash function (a random oracle), the construction succumbs to \
the&lt;br&gt;following attack.&lt;br&gt;&lt;br&gt;Assume that the last OR in a circuit of length n has \
already processed&lt;br&gt;some cells and that its current state is (Kf_n, Kb_n, Ktf_n, \
Ktb_n, Khf_n,&lt;/div&gt;&lt;div&gt;Khb_n, Tf'_n, Tf'_{n+1}, Tb'_n, Tb'_{n+1}). \
An adversary, who has collected&lt;br&gt;previous ciphertexts and nonces (C, N), then \
corrupts it. The adversary has&lt;/div&gt;&lt;div&gt;enough information to recover the last \
message received by OR_n, which&lt;/div&gt;&lt;div&gt;it computes as follows:&lt;br&gt;&lt;br&gt;N_{n+1} = \
Tf'_n ^ D(Ktf_n, Tf'_n ^ N_n)&lt;br&gt;M = Decrypt(Kf_n, N_{n+1}, \
C_n).&lt;br&gt;&lt;br&gt;Clearly this breaks forward security, and it is enabled by the fact that \
the&lt;/div&gt;&lt;div&gt;current digest needs to be saved for computing the next digest for \
when&lt;/div&gt;&lt;div&gt;another ciphertext is \
received.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[ADL17] Tomer Ashur, Orr \
Dunkelman, Atul Luykx, "Boosting Authenticated&lt;br&gt;Encryption Robustness with \
Minimal Modifications", CRYPTO 2017.&lt;br&gt;&lt;/div&gt;&lt;/div&gt;


["CGOspec.txt" (text/plain)]

Counter Galois Onion: A New Proposal for Forward-Secure Relay Cryptography

Authors: Jean Paul Degabriele, Alessandro Melloni, Martijn Stam
Created: 13 Sep 2019
Last-Modified: 13 Sep 2019



1. Background and Motivation

    In Proposal 202, Mathewson expressed the need to update Tor's Relay
    cryptography and protect against tagging attacks. Towards this goal he
    outlined two possible approaches for constructing an onion encryption
    scheme that should be able to withstand tagging attacks. Later, in
    Proposal 261, Mathewson proposed a concrete scheme based on the
    tweakable wide-block cipher AEZ. The security of Proposal 261 was
    analysed in [DS18]. An alternative scheme was suggested in Proposal 295
    which combines an instantiation of the PIV construction from [ST14] and
    a variant of the GCM-RUP construction from [ADL17]. In this document we
    propose yet another scheme, Counter Galois Onion (CGO)
    which improves over proposals 261 and 295 in a number of ways. CGO has
    a minimalistic design requiring only a block cipher in counter-mode and
    a universal hash function. To take advantage of Intel's AES-NI and
    PCLMULQDQ instructions we recommend using AES and POLYVAL [GLL18]. In
    terms of security, it protects against tagging attacks while
    simultaneously providing forward security with respect to end-to-end
    authenticity and confidentiality. Furthermore CGO performs better than
    proposal 295 in terms of efficiency and its support of "leaky pipes".


1.2 Design Overview

    CGO makes due with a universal hash function while simultaneously
    satisfying forward security. It employs two distinct types of
    encryption, a dynamic encryption scheme DEnc and a static encryption
    scheme SEnc. DEnc is used for end-to-end encryption (layer n) and SEnc
    is used for the intermediate layers (n-1 to 1). DEnc is a Forward-
    Secure Authenticated Encryption scheme for securing end-to-end
    communication and SEnc provides the non-malleability for protecting
    against tagging attacks. In order to provide forward security, the key
    material in DEnc is updated with every encryption whereas in SEnc the
    key material is static. To support leaky pipes, in the forward
    direction each OR first attempts a partial decryption using DEnc and
    if it fails it reverts to decrypting using SEnc. The rest of the
    document describes the scheme's operation in terms of the low-level
    primitives and we make no further mention of DEnc and SEnc. However,
    on an intuitive level it can be helpful to think of:

    a) the combinations of E(KSf_I, *) and PH(HSf_I, *) as well as
    E(KDf_I, *) and PH(HDf_I, *) as two instances of a tweakable block
    cipher,

    b) the operation E(Sf_I, &lt;0&gt;) | E(Sf_I, &lt;1&gt;) |  E(Sf_I, &lt;2&gt;) | ... as a
    PRG with seed Sf_I,

    c) and E(JSf_I, &lt;IV&gt;) | E(JSf_I, &lt;IV+1&gt;) | ... | E(JSf_I, &lt;IV+31&gt;) as
    counter-mode encryption with &lt;IV&gt; as the initial vector.


2. Preliminaries

2.1. Notation

   Symbol               Meaning
   ------               -------
   M                    Plaintext
   Sf_I                 PRG Seed, forward direction, layer I
   Sb_I                 PRG Seed, backward direction, layer I
   Cf_I                 Ciphertext, forward direction, layer I
   Cb_I                 Ciphertext, backward direction, layer I
   Tf_I                 Tag, forward direction, layer I
   LTf_I                Last Tag, forward direction, layer I
   Tb_I                 Tag, backward direction, layer I
   LTb_I                Last Tag, backward direction, layer I
   Nf_I                 Nonce, forward direction, layer I
   LNf_I                Last Nonce, forward direction, layer I
   Nb_I                 Nonce, backward direction, layer I
   LNb_I                Last Nonce, backward direction, layer I
   JSf_I                Static Block Cipher Key, forward direction, layer I
   JSb_I                Static Block Cipher Key, backward direction, layer I
   KSf_I                Static Block Cipher Key, forward direction, layer I
   KSb_I                Static Block Cipher Key, backward direction, layer I
   KDf_I                Dynamic Block Cipher Key, forward direction, layer I
   KDb_I                Dynamic Block Cipher Key, backward direction, layer I
   HSf_I                Static Poly-Hash Key, forward direction, layer I
   HSb_I                Static Poly-Hash Key, backward direction, layer I
   HDf_I                Dynamic Poly-Hash Key, forward direction, layer I
   HDb_I                Dynamic Poly-Hash Key, backward direction, layer I
   ^                    Bitwise XOR operator
   |                    Concatenation
   &amp;&amp;                   Logical AND  operator
   Z[a, b]               For a string Z, the substring from byte a to byte b
                        (indexing starts at 1)
   INT(X)               Translate string X into an unsigned integer

2.2. Security parameters %%%REVISE

   POLY_HASH_LEN -- The length of the polynomial hash function's output,
   in bytes. For POLYVAL, POLY_HASH_LEN = 16.

   PAYLOAD_LEN -- The longest allowable cell payload, in bytes (509).

   HASH_KEY_LEN -- The key length used to digest messages in bytes.
   For POLYVAL, DIG_KEY_LEN = 16.

   BC_KEY_LEN -- The key length, in bytes, of the block cipher used. For
   AES we recommend ENC_KEY_LEN = 16.

   BC_BLOCK_LEN -- The block length, in bytes, of the block cipher used.
   For AES, BC_BLOCK_LEN = 16.

2.3. Primitives

   The polynomial hash function is POLYVAL with a HASH_KEY_LEN-bit key. We
   write this as PH(H, M) where H is the key and M the message to be hashed.

   We use AES with a BC_KEY_LEN-bit key. For AES encryption (resp.,
   decryption) we write E(K, X) (resp., D(K, X)) where K is a BC_KEY_LEN-bit
   key and X the block to be encrypted (resp., decrypted). For an integer
   j, we use &lt;j&gt; to denote the string of length BC_BLOCK_LEN representing
   that integer.

2.4 Key derivation and initialisation (replaces Section 5.2.2)

   For newer KDF needs, Tor uses the key derivation function HKDF from
   RFC5869, instantiated with SHA256.  (This is due to a construction
   from Krawczyk.)  The generated key material is:

     K = K_1 | K_2 | K_3 | ...

   Where H(x, t) is HMAC_SHA256 with value x and key t
   and K_1     = H(m_expand | INT8(1) , KEY_SEED )
   and K_(i+1) = H(K_i | m_expand | INT8(i+1) , KEY_SEED )
   and m_expand is an arbitrarily chosen value,
   and INT8(i) is an octet with the value "i".

   In RFC5869's vocabulary, this is HKDF-SHA256 with info == m_expand,
   salt == t_key, and IKM == secret_input.

2.4.1. Key derivation using the KDF

   When used in the ntor handshake, for each layer I, the key material is
   split into the following sequence of contiguous values:

   Length             Purpose                    Notation
   ------             -------                    --------
   BC_KEY_LEN         forward Seed               Sf_I
   BC_KEY_LEN         backward Seed              Sb_I

   if (I &lt; n) in addition derive the following static keys:

   BC_KEY_LEN         forward BC Key             KSf_I
   BC_KEY_LEN         backward BC Key            KSb_I
   BC_KEY_LEN         forward CTR Key            JSf_I
   BC_KEY_LEN         backward CTR Key           JSb_I
   HASH_KEY_LEN       forward poly hash key      HSf_I
   HASH_KEY_LEN       backward poly hash key     HSb_I

   Excess bytes from K are discarded.

2.4.2. Initialisation from Seed

   For each layer I compute E(Sf_I, &lt;0&gt;) | E(Sf_I, &lt;1&gt;) |  E(Sf_I, &lt;2&gt;) | ...
   and parse the output as:

   Length             Purpose                    Notation
   ------             -------                    --------
   BC_BLOCK_LEN       forward Nonce              Nf_I
   BC_KEY_LEN         forward BC Key             KDf_I
   HASH_KEY_LEN       forward poly hash key      HDf_I
   BC_KEY_LEN         new forward Seed           Sf'_I

   Discard excess bytes, replace Sf_I with Sf'_I, and set LNf_n and LTf_I
   to the zero string.

   Similarly for the backward direction, compute E(Sb_I, &lt;0&gt;) | E(Sb_I, &lt;1&gt;)
  | E(Sb_I, &lt;2&gt;) | ... and parse the output as:

   Length             Purpose                    Notation
   ------             -------                    --------
   BC_BLOCK_LEN       backward Nonce             Nb_I
   BC_KEY_LEN         forward BC Key             KDb_I
   HASH_KEY_LEN       forward poly hash key      HDb_I
   BC_KEY_LEN         new backward Seed          Sb'_I

   Discard excess bytes, replace Sb_I with Sb'_I, and set LNb_n and LTb_I
   to the zero string.

   NOTE: For layers n-1 to 1 the values Nf_I, KDf_I, HDf_I, Sf_I and their
   backward counterparts are only required in order to support leaky
   pipes. If leaky pipes is not required these values can be safely
   omitted.


3. Routing relay cells

   Let n denote the number of nodes in the circuit. Then encryption layer n
   corresponds to the encryption between the OP and the exit/destination
   node.


3.1. Forward Direction

   The forward direction is the direction that CREATE/CREATE2 cells
   are sent.


3.1.1. Routing From the Origin

   When an OP sends a relay cell, the cell is produced as follows:

   The OP computes E(Sf_n, &lt;0&gt;) | E(Sf_n, &lt;1&gt;) |  E(Sf_n, &lt;2&gt;) | ...
   and parses the output as

   Length             Purpose                    Notation
   ------             -------                    --------
   509                encryption pad             Z
   BC_BLOCK_LEN       backward Nonce             Nf'_I
   BC_KEY_LEN         forward BC Key             KDf'_I
   HASH_KEY_LEN       forward poly hash key      HDf'_I
   BC_KEY_LEN         new forward Seed           Sf'_I

   Excess bytes are discarded. It then computes the n'th layer ciphertext
   (Tf_n, Cf_n) as follows:

   Cf_n = M ^ Z
   X_n = PH(HDf_n, (LNf_n | Cf_n))
   Y_n = Nf_n ^ X_n
   Tf_n = E(KDf_n, Y_n) ^ X_n)

   and updates its state by overwriting the old variables with the new
   ones.

   LNf_n = Nf_n
   Nf_n = Nf'_n
   KDf_n = KDf'_n
   HDf_n = HDf'_n
   Sf_n = Sf'_n

   It then applies the remaining n-1 layers of encryption to (Tf_n, Cf_n)
   as follows:

   For I = n-1 to 1:
     IV = INT(Tf_{I+1})
     Z  = E(JSf_I, &lt;IV&gt;) | E(JSf_I, &lt;IV+1&gt;) | ... | E(JSf_I, &lt;IV+31&gt;)
     % BC_BLOCK_LEN = 16
     Cf_I = Cf_{I+1} ^ Z[1, 509]
     X_I = PH(HSf_n, (LTf_{I+1} | Cf_I))
     Y_I = Tf_I ^ X_I
     Tf_I = E(KSf_I, Y_I) ^ X_I
     LTf_{I+1} = Tf_{I+1}

   Upon completion the OP sends (Tf_1, Cf_1) to node 1.


3.1.2. Relaying Forward at Onion Routers

   When a forward relay cell (Tf_I, Cf_I) is received by OR I, it decrypts
   it performs the following set of steps:

   'Forward' relay cell:

    X_I = PH(HDf_n, (LNf_I | Cf_I))
    Y_I = Tf_I ^ X_I
    if (Nf_I == D(KDf_I, Y_I) ^ X_I)  % cell recognized and authenticated
      compute E(Sf_I, &lt;0&gt;) | E(Sf_I, &lt;1&gt;) |  E(Sf_I, &lt;2&gt;) | ... and parse the
      output as Z, Nf'_I, KDf'_I, HDf'_I, Sf'_I

      M = Cf_n ^ Z
      LNf_I = Nf_I
      Nf_I = Nf'_I
      KDf_I = KDf'_I
      HDf_I = HDf'_I
      Sf_I = Sf'_I

      return M

    else if (I == n)    % last node, decryption has failed
      send DESTROY cell to tear down the circuit

    else    % decrypt and forward cell
      X_I = PH(HSf_I, (LTf_{I+1} | Cf_I))
      Y_I = Tf_I ^ X_I
      Tf_{I+1} = D(KSf_I, Y_I) ^ X_I
      IV = INT(Tf_{I+1})
      Z  = E(JSf_I, &lt;IV&gt;) | E(JSf_I, &lt;IV+1&gt;) | ... | E(JSf_I, &lt;IV+31&gt;)
      % BC_BLOCK_LEN = 16
      Cf_{I+1} = Cf_I ^ Z[1, 509]

      forward (Tf_{I+1}, Cf_{I+1}) to OR I+1

3.2. Backward Direction

   The backward direction is the opposite direction from
   CREATE/CREATE2 cells.

3.2.1. Routing From the Exit Node

   At OR n encryption proceeds as follows:

   It computes E(Sb_n, &lt;0&gt;) | E(Sb_n, &lt;1&gt;) |  E(Sb_n, &lt;2&gt;) | ...
   and parses the output as

   Length             Purpose                    Notation
   ------             -------                    --------
   509                encryption pad             Z
   BC_BLOCK_LEN       backward Nonce             Nb'_I
   BC_KEY_LEN         forward BC Key             KDb'_I
   HASH_KEY_LEN       forward poly hash key      HDb'_I
   BC_KEY_LEN         new forward Seed           Sb'_I

   Excess bytes are discarded. It then computes the ciphertext
   (Tf_n, Cf_n) as follows:

   Cb_n = M ^ Z
   X_n = PH(HDb_n, (LNb_n | Cb_n))
   Y_n = Nb_n ^ X_n
   Tb_n = E(KDb_n, Y_n) ^ X_n)

   and updates its state by overwriting the old variables with the new
   ones.

   LNb_n = Nb_n
   Nb_n = Nb'_n
   KDb_n = KDb'_n
   HDb_n = HDb'_n
   Sb_n = Sb'_n


3.2.2. Relaying Backward at the Onion Routers

   At OR I (for I &lt; n) when a ciphertext (Tb_I, Cb_I) in the backward
   direction is received it is processed as follows:

   X_I = PH(HSb_n, (LTb_{I-1} | Cb_I))
   Y_I = Tb_I ^ X_I
   Tb_{I-1} = D(KSb_I, Y_I) ^ X_I
   IV = INT(Tb_{I-1})
   Z  = E(JSb_I, &lt;IV&gt;) | E(JSb_I, &lt;IV+1&gt;) | ... | E(JSb_I, &lt;IV+31&gt;)
   % BC_BLOCK_LEN = 16
   Cb_{I-1} = Cb_I ^ Z[1, 509]

   The ciphertext (Tb_I, Cb_I) is then passed along the circuit towards
   the OP.


3.2.2. Routing to the Origin

   When a ciphertext (Tb_1, Cb_1) arrives at an OP, the OP decrypts it in
   two stages. It first reverses the layers from 1 to n-1 as follows:

   For I = 1 to n-1:
     X_I = PH(HSb_I, (LTb_{I+1} | Cb_I))
     Y_I = Tb_I ^ X_I
     Tb_{I+1} = E(KSb_I, Y_I) ^ X_I
     IV = INT(Tb_{I+1})
     Z  = E(JSb_I, &lt;IV&gt;) | E(JSb_I, &lt;IV+1&gt;) | ... | E(JSb_I, &lt;IV+31&gt;)
     % BC_BLOCK_LEN = 16
     Cb_{I+1} = Cb_I ^ Z[1, 509]

   Upon completion the n'th layer of encryption is removed as follows:

   X_n = PH(HDb_n, (LNb_n | Cb_n))
   Y_n = Tb_n ^ X_n
   if (Nb_n = D(KDb_n, Y_n) ^ X_n)     % authentication is successful
     compute E(Sb_n, &lt;0&gt;) | E(Sb_n, &lt;1&gt;) |  E(Sb_n, &lt;2&gt;) | and parse the
     output as Z, Nb'_n, KDb'_n, HDb'_n, Sb'_n

     M = Cb_n ^ Z
     LNb_n = Nb_n
     Nb_n = Nb'_n
     KDb_n = KDb'_n
     HDb_n = HDb'_n
     Sb_n = Sb'_n

     return M

   else
     send DESTROY cell to tear down the circuit


4. Application connections and stream management

4.1. Amendments to the Relay Cell Format

   Within a circuit, the OP and the end node use the contents of
   RELAY packets to tunnel end-to-end commands and TCP connections
   ("Streams") across circuits. End-to-end commands can be initiated
   by either edge; streams are initiated by the OP.

   The payload of each unencrypted RELAY cell consists of:

       Relay command           [1 byte]
       StreamID                [2 bytes]
       Length                  [2 bytes]
       Data                    [PAYLOAD_LEN-21 bytes]

   The old Digest field is removed since sufficient information for
   authentication is now included in the nonce part of the payload.

   The old 'Recognized' field is removed. Instead a cell is recognized
   via a partial decryption using the node's dynamic keys - namely the
   following steps (already included in Section 3):

   Forward direction:

   X_I = PH(HDf_n, (LNf_I | Cf_I))
   Y_I = Tf_I ^ X_I
   if (Nf_I == D(KDf_I, Y_I) ^ X_I)  % cell is recognized and authenticated

   Backward direction (executed by the OP):

   If the OP is aware of the number of layers present in the cell there
   is no need to attempt to recognize the cell. Otherwise the OP can, for
   each layer, first attempt a partial decryption using the dynamic keys
   for that layer as follows:

   X_I = PH(HDb_I, (LNb_I | Cb_I))
   Y_I = Tb_I ^ X_I
   if (Nb_I = D(KDb_I, Y_I) ^ X_I)    % cell is recognized and authenticated

   The 'Length' field of a relay cell contains the number of bytes
   in the relay payload which contain real payload data. The
   remainder of the payload is padding bytes.

4.2. Appending the encrypted nonce and dealing with version-homogenic
     and version-heterogenic circuits

   When a cell is prepared to be routed from the origin (see Section
   3.1.1) the encrypted nonce N is appended to the encrypted cell
   (occupying the last 16 bytes of the cell). If the cell is prepared to
   be sent to a node supporting the new protocol, S is combined with other
   sources to generate the layer's nonce. Otherwise, if the node only
   supports the old protocol, n is still appended to the encrypted cell
   (so that following nodes can still recover their nonce), but a
   synchronized nonce (as per the old protocol) is used in CTR-mode.

   When a cell is sent along the circuit in the 'backward' direction,
   nodes supporting the new protocol always assume that the last 16 bytes
   of the input are the nonce used by the previous node, which they
   process as per Section 3.2.1. If the previous node also supports the
   new protocol, these cells are indeed the nonce. If the previous node
   only supports the old protocol, these bytes are either encrypted
   padding bytes or encrypted data.

5. Security and Design Rationale

   We are currently working on a security proof to better substantiate our
   security claims. Below is a short informal summary on the security of
   CGO and its design rationale.

5.1. Resistance to crypto-tagging attacks

   Protection against crypto-tagging attacks is provided by layers n-1 to
   1. This part of the scheme is based on the paradigm from [ADL17] which
   has the property that if any single bit of the OR's input is changed
   then all of the OR's output will be randomised. Specifically, if
   (Tf_I, Cf_I) is travelling in the forward direction and is processed by
   an honest node I, a single bit flip to either Tf_I or Cf_I will result
   in both Tf_{I+1} and Cf_{I+1} being completely randomised. In addition,
   the processing of (Tf_I, Cf_I) includes LTf_{I+1} so that any
   modification to (Tf_I, Cf_I) at time j will in turn randomise the value
   (Tf_{I+1}, Cf_{I+1}) at any time &gt;= j . Thus once a circuit is tampered
   with it is not possible to recover from it at a later stage. This helps
   to protect against the standard crypto-tagging attack and variations
   thereof (Section 5.2 in [DS18]). A similar argument holds in the
   backward direction.


5.2. End-to-end authenticated encryption

   Layer n provides end-to-end authenticated encryption. Similar to the
   old protocol, this proposal only offers end-to-end authentication
   rather than per-hop authentication. However, CGO provides 128-bit
   authentication as opposed to the 32-bit authentication provided by the
   old protocol. A main observation underpinning the design of CGO is
   that the n'th layer does not need to be secure against the release of
   unverified plaintext (RUP). RUP security is only needed to protect
   against tagging attacks and the n'th layer does not help in that regard
   (but the layers below do). Consequently we employ a different scheme at
   the n'th layer which is designed to provide forward-secure
   authenticated encryption.


5.3 Forward Security

   As mentioned in the previous section CGO provides end-to-end
   authenticated encryption that is also forward secure. Our notion of
   forward security follows the definitions of Bellare and Yee [BY03] for
   both confidentiality and authenticity. Forward-secure confidentiality
   says that upon corrupting either the sender (or the receiver), the
   secrecy of the messages that have already been sent (or received) is
   still guaranteed. As for forward-secure authentication, upon corrupting
   the sender the authenticity of previously authenticated messages is
   still guaranteed (even if they have not yet been received). In order to
   achieve forward-secure authenticated encryption, CGO updates the key
   material of the n'th layer encryption with every cell that is
   processed. In order to support leaky pipes the lower layers also need
   to maintain a set of dynamic keys that are used to recognize cells that
   are intended for them. This key material is only used for partial
   processing, i.e. recognizing the cell, and is only updated if
   verification is successful. If the cell is not recognized, the node
   reverts to processing the cell with the static key material. If support
   for leaky-pipes is not required this extra processing can be omitted.


6. Efficiency Considerations

   Although we have not carried out any experiments to verify this, we
   expect CGO to perform relatively well in terms of efficiency. Firstly,
   it manages to achieve forward security with just a universal hash as
   opposed to other proposals which suggested the use of SHA2 or SHA3. In
   this respect we recommend using POLYVAL [GLL18], a variant of GHASH
   that is more compatible with Intel's PCMULQDQ instruction. Furthermore
   CGO admits a certain degree of parallelisability. Supporting leaky
   pipes requires an OR to first verify the cell using the the dynamic key
   material and if the cell is unrecognised it goes on to process the cell
   with the static key material. The important thing to note (see for
   instance Section 3.1.2) is that the initial processing of the cell
   using the static key material is almost identical to the verification
   using the dynamic key material, and the two computations are
   independent of each other. As such, although in Section 3 these were
   described as being evaluated sequentially, they can in fact be computed
   in parallel. In particular the two polynomial hashes could be computed
   in parallel by using the new vectorised VPCMULQDQ instruction.

   We are currently looking into further optimisations of the scheme as
   presented here. One such optimisation is the possibility of removing
   KDf_I and KDb_I while retaining forward security. This would further
   improve the efficiency of the scheme by reducing the amount of dynamic
   key material that needs to be updated with every cell that is processed.


References

[ADL17] Tomer Ashur, Orr Dunkelman, Atul Luykx, "Boosting Authenticated
Encryption Robustness with Minimal Modifications", CRYPTO 2017.

[BY03] Mihir Bellare, Bennett Yee, "Forward-Security in Private-Key
Cryptography", CT-RSA 2003.

[DS18] Jean Paul Degabriele, Martijn Stam, "Untagging Tor: A Formal
Treatment of Onion Encryption", EUROCRYPT 2018.

[GLL18] Shay Gueron, Adam Langley, Yehuda Lindell, "AES-GCM-SIV: Nonce
Misuse-Resistant Authenticated Encryption", RFC 8452, April 2019.

[ST13] Thomas Shrimpton, R. Seth Terashima, "A Modular Framework for
Building Variable-Input Length Tweakable Ciphers", ASIACRYPT 2013.

[Attachment #7 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190915002610</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-09-15 00:26:10-0400</timestampReceived><subject>Re: [tor-dev] Counter Galois Onion: A New Proposal for Forward-Secure Relay Cryptography</subject><body>

On Thu, Sep 12, 2019 at 6:34 PM Jean Paul Degabriele &lt;jpdega@gmail.com&gt; wrote:
&gt;
&gt; Hello tor-devs,
&gt;
&gt; Martijn Stam and myself have previously worked on analysing the security
&gt; of proposal 261. Together with Martijn's PhD student, Alessandro Melloni,
&gt; we have now written a proposal for an onion encryption scheme as an
&gt; alternative to Proposals 261 and 295. It builds on the GCM-RUP construction
&gt; from [ADL17] but it offers a number of improvements over proposal 295. In
&gt; addition to addressing the issues described below we expect it to offer better
&gt; performance. We are currently working on a security proof and potential
&gt; efficiency optimisations for this scheme. In the meantime, we would be very
&gt; happy to hear what you think and any feedback you may have. If something
&gt; is unclear, please let us know.
&gt;

Thank you!  I've added this as proposal 308.  I'll be looking it over
with interest in the near future.

One thing that helps me understand this kind of proposal is writing or
examining a reference implementation for it, so I can see clearly what
state is kept, which party does what, and so on.  I did one for
proposal 295 as https://github.com/nmathewson/prop295ref -- I hope I
can get a reference implementation together for this one too, unless
you're already on it.

It would also be interesting to know what the ADL authors think of
this proposal too -- most of us at Tor aren't cryptographers
ourselves.

thanks again, and best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190915182831</emailId><senderName>Jean Paul Degabriele</senderName><senderEmail>jpdega@gmail.com</senderEmail><timestampReceived>2019-09-15 18:28:31-0400</timestampReceived><subject>Re: [tor-dev] Counter Galois Onion: A New Proposal for Forward-Secure Relay Cryptography</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

Thank you!  I've added this as proposal 308.  I'll be looking it over
&gt; with interest in the near future.
&gt;

Thanks for adding this to the list of proposals.


&gt; One thing that helps me understand this kind of proposal is writing or
&gt; examining a reference implementation for it, so I can see clearly what
&gt; state is kept, which party does what, and so on.  I did one for
&gt; proposal 295 as https://github.com/nmathewson/prop295ref -- I hope I
&gt; can get a reference implementation together for this one too, unless
&gt; you're already on it.
&gt;

A reference implementation would be nice and at the moment we are
not working on that.

It would also be interesting to know what the ADL authors think of
&gt; this proposal too -- most of us at Tor aren't cryptographers
&gt; ourselves.
&gt;

Of course, all input is welcome.

Best wishes,

Jean Paul

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi,&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; Thank you!   I've \
added this as proposal 308.   I'll be looking it over&lt;br&gt; with interest in the \
near future.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;

Thanks for adding this to the list of proposals.

  &lt;/div&gt;&lt;div&gt;  &lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; One thing that helps \
me understand this kind of proposal is writing or&lt;br&gt; examining a reference \
implementation for it, so I can see clearly what&lt;br&gt; state is kept, which party does \
what, and so on.   I did one for&lt;br&gt; proposal 295 as &lt;a \
href="https://github.com/nmathewson/prop295ref" rel="noreferrer" \
target="_blank"&gt;https://github.com/nmathewson/prop295ref&lt;/a&gt; -- I hope I&lt;br&gt; can get \
a reference implementation together for this one too, unless&lt;br&gt; you're already \
on it.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;A reference implementation would be nice \
and at the moment we are&lt;/div&gt;&lt;div&gt;not working on that.  \
&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt; It would also be \
interesting to know what the ADL authors think of&lt;br&gt; this proposal too -- most of us \
at Tor aren't cryptographers&lt;br&gt; \
ourselves.&lt;br&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Of course, all input is \
welcome.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best wishes,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Jean \
Paul&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190918233243</emailId><senderName>s7r</senderName><senderEmail>s7r@sky-ip.org</senderEmail><timestampReceived>2019-09-18 23:32:43-0400</timestampReceived><subject>Re: [tor-dev] Timing of opening pre-emptive circuits?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Hi Tor-Dev,
&gt; 
&gt; I'm curious what the timing is of Tor's opening of preemptive circuits.
&gt;  Specifically, consider the following attack:
&gt; 
&gt; 1. A new stream is assigned to a clean circuit.
&gt; 2. Because of the above, that clean circuit is now a dirty circuit.
&gt; 3. Because of the above, the number of clean circuits is now decreased
&gt; by 1.
&gt; 4. Because of the above, the number of clean circuits is now lower than
&gt; the number that Tor wants to have open.
&gt; 5. Because of the above, Tor opens a new preemptive circuit.
&gt; 6. An attacker who can observe the circuit in (1) and the circuit in (5)
&gt; can deduce by temporal proximity that those 2 circuits belong to the
&gt; same client.
&gt; 
&gt; This attack seemed obvious enough to me that I assumed that Tor must
&gt; have some kind of countermeasure to it, e.g. random delays in opening
&gt; preemptive circuits.  However, the tor-path specification doesn't
&gt; mention any such countermeasure, and based on a brief search through the
&gt; Tor source code, all I can find is that Tor opens preemptive circuits
&gt; using a function that always gets called once per second (with no
&gt; mention of any delay beyond that one-second interval, random or
&gt; otherwise).
&gt; 
&gt; So, does Tor make any effort to mitigate the above attack?  If so, what
&gt; mitigations are present, and where would I find them (in both the spec
&gt; and the source code)?  If not, is there any documented reason (e.g. "the
&gt; attack is too hard to pull off" or "we want to mitigate it but haven't
&gt; gotten to it yet") for the lack of mitigation?
&gt; 
&gt; Cheers,


Hi Jeremy,

When I read your checklist from 1 to 6 I remembered that there was a
research made on this [1] (I think you are talking about the same thing,
except not mentioning where your "attacker" is positioned). If a counter
measure existed it would have been documented in the Tor spec for
tor-path of course, so I guess that part is correct.

There is an obvious straight forward solution to fix it [2], except
AFAIK nobody had time to work on this yet.

I guess this is because this threat is not very scary, it is nice to fix
it of course, but correlating anonymous circuits to the same anonymous
user is much less scary than:
- guard discovery attack;
- guard partitioning attacks / path-bias attacks;
- routers netflow recording of traffic patterns;
- v3 onion services;

There has been a lot of work into these directions.

[1]:
https://lists.torproject.org/pipermail/tor-dev/2014-September/007517.html

[2]:
https://lists.torproject.org/pipermail/tor-dev/2014-September/007518.html

If this thread model is interesting to you or your project(s), you can
take Paul's ideas from [2] and write a patch. It is also going to need a
proposal before it will be merged into Tor but at least there will be
some action ;)


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190912110200</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-09-12 11:02:00-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hans-Christoph Steiner:
&gt; 
&gt; Hey all,
&gt; 
&gt; I'm currently working on tor for Android as part of a Guardian Project
&gt; project.  One key goal is making a shareable, reproducible build process
&gt; for the tor daemon for Android.  Then this would be published to
&gt; MavenCentral as an Android AAR package to be used in all the apps that
&gt; include tor (Tor Browser, Orbot, Briar, Thali, etc).  I have cleaned up
&gt; the existing build process a lot, so now I'm down to troubleshooting
&gt; reproducible issues.
&gt; 
&gt; First off, can anyone see any objections to switching Tor Browser,
&gt; Orbot, Briar, etc. to use GPG-signed reproducible binaries via
&gt; MavenCentral for the tor dameon?

We want to include building tor and all its dependencies in
tor-browser-build/rbm to have the latest tor for Android in our nightly
builds and respective alpha and stable versions in our alpha and stable
browsers. We have a ticket for that for a while now in our bug tracker
but did not get to it so far.[1] The plan is to pick that work up in
November after Tor Browser 9 is out.

As to whether other projects would be interested in that, dunno. But I
guess some at least would?

Georg

[1] The parent ticket for that work is:
https://trac.torproject.org/projects/tor/ticket/28704.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190912212456</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-09-12 21:24:56-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

Georg Koppen:
&gt; Hans-Christoph Steiner:
&gt;&gt;
&gt;&gt; Hey all,
&gt;&gt;
&gt;&gt; I'm currently working on tor for Android as part of a Guardian Project
&gt;&gt; project.  One key goal is making a shareable, reproducible build process
&gt;&gt; for the tor daemon for Android.  Then this would be published to
&gt;&gt; MavenCentral as an Android AAR package to be used in all the apps that
&gt;&gt; include tor (Tor Browser, Orbot, Briar, Thali, etc).  I have cleaned up
&gt;&gt; the existing build process a lot, so now I'm down to troubleshooting
&gt;&gt; reproducible issues.
&gt;&gt;
&gt;&gt; First off, can anyone see any objections to switching Tor Browser,
&gt;&gt; Orbot, Briar, etc. to use GPG-signed reproducible binaries via
&gt;&gt; MavenCentral for the tor dameon?
&gt; 
&gt; We want to include building tor and all its dependencies in
&gt; tor-browser-build/rbm to have the latest tor for Android in our nightly
&gt; builds and respective alpha and stable versions in our alpha and stable
&gt; browsers. We have a ticket for that for a while now in our bug tracker
&gt; but did not get to it so far.[1] The plan is to pick that work up in
&gt; November after Tor Browser 9 is out.
&gt; 
&gt; As to whether other projects would be interested in that, dunno. But I
&gt; guess some at least would?
&gt; 
&gt; Georg
&gt; 
&gt; [1] The parent ticket for that work is:
&gt; https://trac.torproject.org/projects/tor/ticket/28704.

If building tor+libevent+openssl+libz+liblzma for Android was done
reproducibly and shipped via MavenCentral, would you consider using it?
 Seems like we'd want this tor binary to be synced to the Tor Browser
version requirements anyway, since that's the "standard configuration".

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913041914</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-09-13 04:19:14-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

Hi,

&gt; On 12 Sep 2019, at 20:50, Hans-Christoph Steiner &lt;hans@guardianproject.info&gt; wrote:
&gt; 
&gt; Then that work
&gt; will hopefully be extended into sharing tor between apps, e.g. letting
&gt; Briar, Tor Browser, etc share the tor SOCKS proxy to other apps that
&gt; want to use it. That would happen via Android mechanisms like Intents to
&gt; manage the discovery of SOCKS ports.

It's not always safe to have apps share Tor: a malicious website in one app
can use various caches to discover activity in other apps. And there may
be similar data leaks in other shared data structures or network
connections.

How do these data leaks affect your use cases?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913075113</emailId><senderName>Hans-Christoph Steiner</senderName><senderEmail>hans@guardianproject.info</senderEmail><timestampReceived>2019-09-13 07:51:13-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>



teor:
&gt; Hi,
&gt; 
&gt;&gt; On 12 Sep 2019, at 20:50, Hans-Christoph Steiner &lt;hans@guardianproject.info&gt; wrote:
&gt;&gt;
&gt;&gt; Then that work
&gt;&gt; will hopefully be extended into sharing tor between apps, e.g. letting
&gt;&gt; Briar, Tor Browser, etc share the tor SOCKS proxy to other apps that
&gt;&gt; want to use it. That would happen via Android mechanisms like Intents to
&gt;&gt; manage the discovery of SOCKS ports.
&gt; 
&gt; It's not always safe to have apps share Tor: a malicious website in one app
&gt; can use various caches to discover activity in other apps. And there may
&gt; be similar data leaks in other shared data structures or network
&gt; connections.
&gt; 
&gt; How do these data leaks affect your use cases?

Is there some documentation of these leaks somewhere so I can dive into
it?  Like what kind of caches?  Browser caches?  We're mostly talking
about apps that are not browsers, like messaging, nextcloud, etc.

Currently, running multiple tor daemons is really a showstopper for most
mobile users in the world, both because of battery usage and bandwidth
costs.  I guess there was some progress towards getting tor sleeping
more effectively as well as not consuming as much bandwidth in the
background.  So the big question is:  will it be feasible to have a
usable tor on mobile that aggressively sleeps to stop consuming any
battery and bandwidth when not directly in use?  If so, then running
multiple tor daemons should be workable.  If not, then we need to find a
way to share the tor daemon across all apps in the device.

With Orbot, all apps are already sharing one tor daemon, so this isn't a
new development.

.hc

-- 
PGP fingerprint: EE66 20C7 136B 0D2C 456C  0A4D E9E2 8DEA 00AA 5556
https://pgp.mit.edu/pks/lookup?op=vindex&amp;search=0xE9E28DEA00AA5556
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913092000</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-09-13 09:20:00-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hans-Christoph Steiner:
&gt; Georg Koppen:
&gt;&gt; Hans-Christoph Steiner:
&gt;&gt;&gt;
&gt;&gt;&gt; Hey all,
&gt;&gt;&gt;
&gt;&gt;&gt; I'm currently working on tor for Android as part of a Guardian Project
&gt;&gt;&gt; project.  One key goal is making a shareable, reproducible build process
&gt;&gt;&gt; for the tor daemon for Android.  Then this would be published to
&gt;&gt;&gt; MavenCentral as an Android AAR package to be used in all the apps that
&gt;&gt;&gt; include tor (Tor Browser, Orbot, Briar, Thali, etc).  I have cleaned up
&gt;&gt;&gt; the existing build process a lot, so now I'm down to troubleshooting
&gt;&gt;&gt; reproducible issues.
&gt;&gt;&gt;
&gt;&gt;&gt; First off, can anyone see any objections to switching Tor Browser,
&gt;&gt;&gt; Orbot, Briar, etc. to use GPG-signed reproducible binaries via
&gt;&gt;&gt; MavenCentral for the tor dameon?
&gt;&gt;
&gt;&gt; We want to include building tor and all its dependencies in
&gt;&gt; tor-browser-build/rbm to have the latest tor for Android in our nightly
&gt;&gt; builds and respective alpha and stable versions in our alpha and stable
&gt;&gt; browsers. We have a ticket for that for a while now in our bug tracker
&gt;&gt; but did not get to it so far.[1] The plan is to pick that work up in
&gt;&gt; November after Tor Browser 9 is out.
&gt;&gt;
&gt;&gt; As to whether other projects would be interested in that, dunno. But I
&gt;&gt; guess some at least would?
&gt;&gt;
&gt;&gt; Georg
&gt;&gt;
&gt;&gt; [1] The parent ticket for that work is:
&gt;&gt; https://trac.torproject.org/projects/tor/ticket/28704.
&gt; 
&gt; If building tor+libevent+openssl+libz+liblzma for Android was done
&gt; reproducibly and shipped via MavenCentral, would you consider using it?
&gt;  Seems like we'd want this tor binary to be synced to the Tor Browser
&gt; version requirements anyway, since that's the "standard configuration".

What about our nightly build requirement? Oh, and to complicate that: we
build tor nightlies with Rust enabled to be able to test Rust code. And
would do so for Android, too. And to further complicate matters: we plan
to switch to NSS to test that part of tor in a Tor Browser context as
well. (It's been long on the agenda but I finally want to get to that
after Tor Browser 9 is out)

And then there has been times where we actually needed to ship tor
patches ourselves because they were not merged/released yet (although,
luckily that's been a while ago). There might be need for such an option
in the future, too.

So, all in all I am skeptical that Tor Browser fits into your plans.

Georg


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190913103206</emailId><senderName>Nicolas Vigier</senderName><senderEmail>boklm@mars-attacks.org</senderEmail><timestampReceived>2019-09-13 10:32:06-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]


On Thu, 12 Sep 2019, Hans-Christoph Steiner wrote:

&gt;=20
&gt; And third, and tips on getting a Linux shared library to build
&gt; reproducibly.  E.g. is faketime a hard requirement?

Usually it's not needed to use faketime. It's only useful if the
toolchain has bugs that cannot easily be fixed, causing some timestamps
to be inserted somewhere.


["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190913120835</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-09-13 12:08:35-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

On Fri, Sep 13, 2019 at 7:51 AM Hans-Christoph Steiner
&lt;hans@guardianproject.info&gt; wrote:
&gt;
&gt;
&gt;
&gt; teor:
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt;&gt; On 12 Sep 2019, at 20:50, Hans-Christoph Steiner &lt;hans@guardianproject.info&gt; wrote:
&gt; &gt;&gt;
&gt; &gt;&gt; Then that work
&gt; &gt;&gt; will hopefully be extended into sharing tor between apps, e.g. letting
&gt; &gt;&gt; Briar, Tor Browser, etc share the tor SOCKS proxy to other apps that
&gt; &gt;&gt; want to use it. That would happen via Android mechanisms like Intents to
&gt; &gt;&gt; manage the discovery of SOCKS ports.
&gt; &gt;
&gt; &gt; It's not always safe to have apps share Tor: a malicious website in one app
&gt; &gt; can use various caches to discover activity in other apps. And there may
&gt; &gt; be similar data leaks in other shared data structures or network
&gt; &gt; connections.
&gt; &gt;
&gt; &gt; How do these data leaks affect your use cases?
&gt;
&gt; Is there some documentation of these leaks somewhere so I can dive into
&gt; it?  Like what kind of caches?  Browser caches?  We're mostly talking
&gt; about apps that are not browsers, like messaging, nextcloud, etc.

I have a half-baked (and half-written) proposal for this. I'll try to
finish it within the
next few weeks.

The summary of it is that in an ideal situation every application
should run its own
tor client. If two applications share a tor client, and they both use
the control port,
then they both learn information about connections requested by the
other - maybe
that is onion service addresses only one app should use, or it leaks
user behavior.

Even in the case where multiple apps don't have control port access, they can
potentially use the same circuits if their proxy settings are
misconfigured (which leaks
timing information locally and possibly leaks information about
applications and the
user on the network).

Instead of every tor client wasting mobile data with duplicate downloads, I'm
imagining having a Tor gateway (for lack of a better word). This
essentially is a local
Tor bridge relay that provides a single point of entry into and exit
from the device.
This solves most of the problems and it can be setup today except this
completely
breaks the assumptions within Tor that a Bridge is an external first-hop. In a
configuration like this, the Tor gateway is a local hop, so it reduces
a three-hop
circuit to two-hops. And, to make matters worse, every second-hop
would continue to
be selected randomly, so the connection into the Tor network would be
a random node
and not a Guard. And, third, a client loses the ability to configure
an actual bridge (with
or without a pluggable transport) for its connection into the network.

With this being said, something like Bridge Guards [0]  would solve
these problems.
Unfortunately, Bridge Guards are still an open question. I was hoping
to look into this
in the near future.

This setup would probably require some synchronization between tor
node if, for example,
multiple applications should use the same onion service, but this can
happen outside of tor.

[0] https://gitweb.torproject.org/torspec.git/tree/proposals/188-bridge-guards.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913125419</emailId><senderName>Matthew Finkel</senderName><senderEmail>matthew.finkel@gmail.com</senderEmail><timestampReceived>2019-09-13 12:54:19-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

On Thu, Sep 12, 2019 at 10:50 AM Hans-Christoph Steiner
&lt;hans@guardianproject.info&gt; wrote:
&gt;
&gt;
&gt; Hey all,
&gt;
&gt; I'm currently working on tor for Android as part of a Guardian Project
&gt; project.  One key goal is making a shareable, reproducible build process
&gt; for the tor daemon for Android.  Then this would be published to
&gt; MavenCentral as an Android AAR package to be used in all the apps that
&gt; include tor (Tor Browser, Orbot, Briar, Thali, etc).  I have cleaned up
&gt; the existing build process a lot, so now I'm down to troubleshooting
&gt; reproducible issues.

So we're clear on the expectations and goals of this, you're working
on compiling Tor
reproducibly without using rbm, correct? And are you imagining the
Guardian Project
would build and upload these packages to MavenCentral, as part of your work?

I wonder if extracting tor binaries and shared libraries from tor-browser-build
(or another project on top of rbm) is an easier route, in the longer
term. I don't
know what issue you'll find when you begin diving into the differences between
builds (if there are any, at all).

Overall, I think this is a great plan and I'd like to see more
applications bundled with Tor
(and CalyxOS is exciting). However, as Georg already mentioned, this may not be
something that fits into Tor Browser in the future.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190913152404</emailId><senderName>Santiago Torres-Arias</senderName><senderEmail>santiago@archlinux.org</senderEmail><timestampReceived>2019-09-13 15:24:04-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]


On Fri, Sep 13, 2019 at 12:32:06PM +0200, Nicolas Vigier wrote:
&gt; On Thu, 12 Sep 2019, Hans-Christoph Steiner wrote:
&gt; 
&gt; &gt; 
&gt; &gt; And third, and tips on getting a Linux shared library to build
&gt; &gt; reproducibly.  E.g. is faketime a hard requirement?
&gt; 
&gt; Usually it's not needed to use faketime. It's only useful if the
&gt; toolchain has bugs that cannot easily be fixed, causing some timestamps
&gt; to be inserted somewhere.
&gt; 
+1, using faketime so liberally would just mean there are other, bigger
underlying issues (e.g., lack of support for S_D_E...)

Cheers!
-Santiago.

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190913164526</emailId><senderName>Michael Rogers</senderName><senderEmail>michael@briarproject.org</senderEmail><timestampReceived>2019-09-13 16:45:26-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]

[Attachment #6 (multipart/mixed)]


Hi all,

Just saw this thread while heading out the door and wanted to mention
that we already have a reproducible build setup for Tor and obfs4proxy
binaries for Android and Linux. The binaries are published on JCenter.
Hans-Christoph, hope this shortens your path! :-)

https://code.briarproject.org/briar/tor-reproducer
https://code.briarproject.org/briar/go-reproducer
https://bintray.com/briarproject/org.briarproject

Cheers,
Michael

On 13/09/2019 16:24, Santiago Torres-Arias wrote:
&gt; On Fri, Sep 13, 2019 at 12:32:06PM +0200, Nicolas Vigier wrote:
&gt;&gt; On Thu, 12 Sep 2019, Hans-Christoph Steiner wrote:
&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; And third, and tips on getting a Linux shared library to build
&gt;&gt;&gt; reproducibly.  E.g. is faketime a hard requirement?
&gt;&gt;
&gt;&gt; Usually it's not needed to use faketime. It's only useful if the
&gt;&gt; toolchain has bugs that cannot easily be fixed, causing some timestamps
&gt;&gt; to be inserted somewhere.
&gt;&gt;
&gt; +1, using faketime so liberally would just mean there are other, bigger
&gt; underlying issues (e.g., lack of support for S_D_E...)
&gt; 
&gt; Cheers!
&gt; -Santiago.
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 

["0x11044FD19FC527CC.asc" (application/pgp-keys)]
["signature.asc" (application/pgp-signature)]
[Attachment #11 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190913102500</emailId><senderName>Georg Koppen</senderName><senderEmail>gk@torproject.org</senderEmail><timestampReceived>2019-09-13 10:25:00-0400</timestampReceived><subject>Re: [tor-dev] New Orbot, tor-android and AndroidPluggableTransport updates</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Nathan Freitas:
&gt; A new Orbot is out, with a bug fix related to obfs4proxy installation,
&gt; and a new tor!

Good stuff! Is it intended that I only see an x86_64, x86, and arm64-v8a
version but no armv7 one available? It seems suddenly Orbot is not
compatible anymore with my device (and I suspect a bunch of other users
have a similar problem)

Georg

&gt; We've also updated the tor-android library, with the latest 0.4.1.5
&gt; release, and all is working well.
&gt; 
&gt; https://github.com/guardianproject/tor-android/releases/tag/tor-android-binary-tor-0.4.1.5
&gt;  
&gt; and we updated our AndroidPluggableTransports library, which was at the
&gt; root of our "Orbot Bridge" bug, not properly installing the binary from
&gt; the APK bundle.
&gt; 
&gt; https://github.com/guardianproject/AndroidPluggableTransports/releases/tag/1.0.7
&gt; 
&gt; These libraries and versions are available via our Guardian Project
&gt; gradle/maven repo hosted on Github:
&gt; 
&gt; maven { url
&gt; "https://raw.githubusercontent.com/guardianproject/gpmaven/master" }
&gt; 
&gt; implementation 'org.torproject:tor-android-binary:0.4.1.5-rc'
&gt; 
&gt; implementation 'info.pluggabletransports.aptds:apt-dispatch-library:1.0.7'
&gt; implementation 'info.pluggabletransports.aptds:apt-meek-obfs4-legacy:1.0.7'
&gt; 
&gt; Everything is building again in our CI pipeline here:
&gt; https://gitlab.com/guardianproject/orbot/pipelines
&gt; and we nearly have automated on-device testing working via the cloud
&gt; services Bitbar and/or Browserstack.
&gt; 
&gt; Life is good, again.
&gt; 
&gt; +n
&gt; 
&gt; 
&gt; -------- Forwarded Message --------
&gt; Subject: 	Orbot 16.1.2 RC-2 with tor-0.4.1.5-rc
&gt; Date: 	Tue, 10 Sep 2019 00:42:56 -0400
&gt; From: 	Nathan of Guardian &lt;nathan@guardianproject.info&gt;
&gt; Organisation: 	Guardian Project
&gt; To: 	Guardian Dev &lt;guardian-dev@lists.mayfirst.org&gt;
&gt; 
&gt; 
&gt; 
&gt; Orbot 16.1.2-RC-2-tor-0.4.1.5-rc
&gt; https://github.com/guardianproject/orbot/releases/tag/16.1.2-RC-2-tor-0.4.1.5-rc
&gt; 
&gt; * Found and fixed bug related to bridges not working
&gt; (https://github.com/guardianproject/orbot/issues/242)
&gt; * Updated tor to 0.4.1.5
&gt; 
&gt; ARM64 APK:
&gt; https://github.com/guardianproject/orbot/releases/download/16.1.2-RC-2-tor-0.4.1.5-rc/Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.apk
&gt;  ARMEABI APK:
&gt; https://github.com/guardianproject/orbot/releases/download/16.1.2-RC-2-tor-0.4.1.5-rc/Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk
&gt;  
&gt; @n8fr8 n8fr8 released this 5 minutes ago  · 0 commits to master since
&gt; this release
&gt; 
&gt; c2e679d (HEAD -&gt; master, tag: 16.1.2-RC-2-tor-0.4.1.5-rc) update to
&gt; 16.1.2-RC-2-tor-0.4.1.5-rc
&gt; 1d45a3d update APT Pluggable Transport library to 1.0.7 - this should
&gt; fix one issue with installing the correct ofbs4proxy binary - also small
&gt; changes to ensure no lock states and reduce log noise
&gt; efec61d (tag: 16.1.2-RC-1-tor-0.4.0.4-rc, newport/master) update to
&gt; 16.1.2-RC-1-tor-0.4.0.4-rc
&gt; 237b388 yet another attempt at fixing the phantom zulu locale bug!
&gt; a9efc3c disable tests for now in CI build
&gt; 918bcca (origin/master, origin/HEAD) remove unused layouts for app-mini
&gt; 08b670f update paths for app-mini code
&gt; cefac58 putting classes back into main app package, and not "mini"
&gt; 97d2aac improvements for bridge handling for #242
&gt; 0e40c07 update badvpn tun2socks library
&gt; 034844a remove fileprovider from app-mini since it is used just for HS
&gt; d95f197 make keystore props reading not fail if not present
&gt; d0640c6 remove output from repo
&gt; e8f3158 remove binaries from repo
&gt; 5845a4c update build tools to 29
&gt; 003d9ea update build tools to 29
&gt; 9c6de06 update build tools to 29
&gt; a266c65 add new functionality to allow for checking connections against
&gt; app blacklist
&gt; d98e5fb update changelog for 16.1.1-BETA-2-tor-0.4.0.4-rc-orbotservice
&gt; Assets 6
&gt; Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.apk 10.3 MB
&gt; Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-arm64-v8a-release.apk.asc 833
&gt; Bytes
&gt; Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk 9.94 MB
&gt; Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk.asc
&gt; 833 Bytes
&gt; 
&gt; 
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190913202412</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-09-13 20:24:12-0400</timestampReceived><subject>Re: [tor-dev] Preferred compression type?</subject><body>

On Fri, Sep 13, 2019 at 2:05 PM Steve Snyder &lt;swsnyder@snydernet.net&gt; wrote:
&gt;
&gt; Given the multiple compression types supported (none, lzma, zlib, zstd),
&gt; what is the order of preference for runtime use?
&gt;
&gt; Put another way, which compression method(s) should be supported to get
&gt; optimal runtime performance from a Tor node?

For big objects like consensuses or consensus diffs that are sent over
and over, relays prefer to use whichever compression method has the
highest compression -- that's lzma2, then zstd, then zlib, then none.
Lzma2 (aka xz) is more expensive to calculate, but the relays only
need to calculate it once per compressed object, and then they can
send it over and over.

For smaller objects that are compressed in a stream (descriptors and
microdescriptors), relays will not use xz, since it would be to
expensive to recompute it for every stream. They'll prefer zstd, then
zlib, then none.

So if you want to save bandwidth above all, you should enable all
compression algorithms.

If you want to save CPU above all, you should enable all compression
algorithms except xz.

If you want to save bandwidth and CPU, I _think_ that enabling all the
compression algorithms will result in Tor making good choices (as
described above).  But I'd appreciate benchmarks if anybody has tried
it both ways to find out.

cheers,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191002185214</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-10-02 18:52:14-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

&gt;    Can I use `_descriptor_content()` to do that? Or should I call
&gt;    `_descriptor_content()` to generate the whole thing _without_ the
&gt;    sig, and then do the signature computation on its result and
&gt;    concatenate it after?

Hi George. Yup, to create a signed descriptor we create the bulk of
the content then append the signature. Server and extrainfo
descriptors already do this so I suspect you can do something
similar...

https://gitweb.torproject.org/stem.git/tree/stem/descriptor/server_descriptor.py#n902
https://gitweb.torproject.org/stem.git/tree/stem/descriptor/__init__.py#n1388

Will this do the trick?

PS. Sorry about the duplicate. Hit reply rather than reply-all
forgetting that you included the list.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191017150004</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-10-17 15:00:04-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; &gt; Can I use `_descriptor_content()` to do that? Or should I call
&gt; &gt; `_descriptor_content()` to generate the whole thing _without_ the
&gt; &gt; sig, and then do the signature computation on its result and
&gt; &gt; concatenate it after?
&gt; 
&gt; Hi George. Yup, to create a signed descriptor we create the bulk of
&gt; the content then append the signature. Server and extrainfo
&gt; descriptors already do this so I suspect you can do something
&gt; similar...
&gt; 
&gt; https://gitweb.torproject.org/stem.git/tree/stem/descriptor/server_descriptor.py#n902
&gt;  https://gitweb.torproject.org/stem.git/tree/stem/descriptor/__init__.py#n1388
&gt; 
&gt; Will this do the trick?
&gt; 
&gt; PS. Sorry about the duplicate. Hit reply rather than reply-all
&gt; forgetting that you included the list.

Thanks for the reply Damian! That was super useful!

The current state of affairs can be found here: \
https://trac.torproject.org/projects/tor/ticket/31823#comment:1 (just in case you \
didn't check IRC that day)

peace
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191017210753</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-10-17 21:07:53-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

Thanks George! Yup, work on that branch is in progress:

https://gitweb.torproject.org/user/atagar/stem.git/log/?h=hsv3

On Thu, Oct 17, 2019 at 8:01 AM George Kadianakis &lt;desnacked@riseup.net&gt; wrote:
&gt; 
&gt; Damian Johnson &lt;atagar@torproject.org&gt; writes:
&gt; 
&gt; &gt; &gt; Can I use `_descriptor_content()` to do that? Or should I call
&gt; &gt; &gt; `_descriptor_content()` to generate the whole thing _without_ the
&gt; &gt; &gt; sig, and then do the signature computation on its result and
&gt; &gt; &gt; concatenate it after?
&gt; &gt; 
&gt; &gt; Hi George. Yup, to create a signed descriptor we create the bulk of
&gt; &gt; the content then append the signature. Server and extrainfo
&gt; &gt; descriptors already do this so I suspect you can do something
&gt; &gt; similar...
&gt; &gt; 
&gt; &gt; https://gitweb.torproject.org/stem.git/tree/stem/descriptor/server_descriptor.py#n902
&gt; &gt;  https://gitweb.torproject.org/stem.git/tree/stem/descriptor/__init__.py#n1388
&gt; &gt; 
&gt; &gt; Will this do the trick?
&gt; &gt; 
&gt; &gt; PS. Sorry about the duplicate. Hit reply rather than reply-all
&gt; &gt; forgetting that you included the list.
&gt; 
&gt; Thanks for the reply Damian! That was super useful!
&gt; 
&gt; The current state of affairs can be found here: \
&gt; https://trac.torproject.org/projects/tor/ticket/31823#comment:1 (just in case you \
&gt; didn't check IRC that day) 
&gt; peace
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20191028075339</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-10-28 07:53:39-0400</timestampReceived><subject>Re: [tor-dev] HSv3 descriptor work in stem</subject><body>

Damian Johnson &lt;atagar@torproject.org&gt; writes:

&gt; Thanks George! Yup, work on that branch is in progress:
&gt;
&gt; https://gitweb.torproject.org/user/atagar/stem.git/log/?h=hsv3

Hello Damian,

thanks for the reply here! I'm now back and ready to start working again
on onionbalance/stem.

What is your plan with the hsv3 branch? Should I start reviewing your
changes already, or give you more time to do more?

Thanks a lot for all the work! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191021193756</emailId><senderName>James</senderName><senderEmail>jbrown299@yandex.com</senderEmail><timestampReceived>2019-10-21 19:37:56-0400</timestampReceived><subject>Re: [tor-dev] New python Tor client implementation</subject><body>

Hi Damian,

Sorry for the late reply.

There are two things why I didn't use Stem.

1. A number of python implementations I've found on the internet had
broken dependencies or didn't work at all. So, I decided to create a
fully functional Tor client with the bare minimum of dependencies.

2. Up until now I thought Stem was just a library to control the Tor
process. As it said at front of https://stem.torproject.org:
"With it you can use Tor's control protocol to script against the Tor
process". Unfortunately API docs didn't help me to see that certain Tor 
primitives were indeed implemented.


 &gt;If you'd care to integrate any of this functionality into Stem I'd be
 &gt;delighted to work with you.

I didn't yet think about integration. It's always a matter of spare
time. Anyway, you can freely use the code or send me bugs. In turn, I
can help you to resolve the issues.

Cheers.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20191022212718</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-10-22 21:27:18-0400</timestampReceived><subject>Re: [tor-dev] New python Tor client implementation</subject><body>

&gt; 1. A number of python implementations I've found on the internet had
&gt; broken dependencies or didn't work at all. So, I decided to create a
&gt; fully functional Tor client with the bare minimum of dependencies.

Ah! Gotcha. For what it's worth I'm in complete agreement with you on
that. I designed Stem to avoid any hard dependencies [1] for the exact
same reason.

&gt; 2. Up until now I thought Stem was just a library to control the Tor
&gt; process. As it said at front of https://stem.torproject.org:
&gt; "With it you can use Tor's control protocol to script against the Tor
&gt; process". Unfortunately API docs didn't help me to see that certain Tor
&gt; primitives were indeed implemented.

Makes sense. Stem's client functionality is relatively new. I
implemented enough to download descriptors [2], but there's still a
lot of room to grow [3].

Cheers! -Damian

[1] https://stem.torproject.org/faq.html#does-stem-have-any-dependencies
[2] https://gitweb.torproject.org/stem.git/commit/?id=820881a
[3] https://2019.www.torproject.org/getinvolved/volunteer.html.en#pythonTorClient
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190916015523</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-09-16 01:55:23-0400</timestampReceived><subject>[tor-dev] Network team: New status page for 0.4.2; feature freeze; want to work on any tickets?</subject><body>

Hi!

This mail is mainly for the network-team folks, but I'm sending it to
tor-dev anyway in case it's helpful to anybody else.

I've made a new page for our 0.4.2 status, based on Teor's original
040 status page.  Here it is:

https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases/042Status

Note that as with 0.4.1, I'm using two different keywords: 042-must and
042-should. The difference here is that 042-must stuff should be things
that would really block a release candidate, whereas 042-should stuff
is stuff that we might in theory release without fixing. (It might
annoy our users or violate our best practices, so we _should_ try to
fix it, at least.)

At the bottom of the page are all the tickets in the milestone that
are *not* marked 042-must or 042-should.  Some of these are things we
could still fix anyway in 042; many will be removed.  Please label
them soon if you think they are things we should fix in 0.4.2!

We are now in feature-freeze for 0.4.2.x.  Let's try to solve our open
0.4.2.x issues soon, so that we can move on to 0.4.3.x. Most of the
042-must and 042-should issues are currently unassigned, so if there
are any you would like to work on, please either assign them to
yourself, or bring them up at the next team meeting?

cheers,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190917101154</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-09-17 10:11:54-0400</timestampReceived><subject>Re: [tor-dev] New Orbot, tor-android and AndroidPluggableTransport updates</subject><body>


On 9/13/19 6:25 AM, Georg Koppen wrote:
&gt; Nathan Freitas:
&gt; &gt; A new Orbot is out, with a bug fix related to obfs4proxy installation,
&gt; &gt; and a new tor!
&gt; Good stuff! Is it intended that I only see an x86_64, x86, and arm64-v8a
&gt; version but no armv7 one available? It seems suddenly Orbot is not
&gt; compatible anymore with my device (and I suspect a bunch of other users
&gt; have a similar problem)

That was not intended, and not sure where you mean exactly.

Anyhow, we are definitely releasing armv7 (aka "armeabi-v7a") binaries
still, both for Orbot and the underlying tor-android-binary releases.

Release here:
https://github.com/guardianproject/orbot/releases/tag/16.1.2-RC-2-tor-0.4.1.5-rc

with this APK:
https://github.com/guardianproject/orbot/releases/download/16.1.2-RC-2-tor-0.4.1.5-rc/Orbot-16.1.2-RC-2-tor-0.4.1.5-rc-fullperm-armeabi-v7a-release.apk


+n
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190917101721</emailId><senderName>Nathan Freitas</senderName><senderEmail>nathan@freitas.net</senderEmail><timestampReceived>2019-09-17 10:17:21-0400</timestampReceived><subject>Re: [tor-dev] reproducible builds for Android tor daemon</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 9/13/19 3:51 AM, Hans-Christoph Steiner wrote:
&gt;
&gt; teor:
&gt;&gt;
&gt;&gt; It's not always safe to have apps share Tor: a malicious website in on=
e app
&gt;&gt; can use various caches to discover activity in other apps. And there m=
ay
&gt;&gt; be similar data leaks in other shared data structures or network
&gt;&gt; connections.
&gt;&gt;
&gt;&gt; How do these data leaks affect your use cases?
&gt; With Orbot, all apps are already sharing one tor daemon, so this isn't =
a
&gt; new development.
&gt;
&gt; .hc
&gt;
Most the use cases for Tor outside of Tor Browser and Briar tend to be
related to anti-censorship, reduction of passive surveillance, and
opportunistic access to onions (nytimes, DDG, facebook, etc).

Also has hc said, we are talking about non-browser type applications.

Since these are also applications you already have installed on your
phone, they already can know a heckuva a lot about you and your device.
Thus, with the threat model scope for this work, the app itself is not
our adversary, just the network.

+n





["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190920061345</emailId><senderName>Jeremy Rand</senderName><senderEmail>jeremyrand@airmail.cc</senderEmail><timestampReceived>2019-09-20 06:13:45-0400</timestampReceived><subject>Re: [tor-dev] Timing of opening pre-emptive circuits?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


s7r:
&gt;&gt; Hi Tor-Dev,
&gt;&gt;
&gt;&gt; I'm curious what the timing is of Tor's opening of preemptive circuits.
&gt;&gt;  Specifically, consider the following attack:
&gt;&gt;
&gt;&gt; 1. A new stream is assigned to a clean circuit.
&gt;&gt; 2. Because of the above, that clean circuit is now a dirty circuit.
&gt;&gt; 3. Because of the above, the number of clean circuits is now decreased
&gt;&gt; by 1.
&gt;&gt; 4. Because of the above, the number of clean circuits is now lower than
&gt;&gt; the number that Tor wants to have open.
&gt;&gt; 5. Because of the above, Tor opens a new preemptive circuit.
&gt;&gt; 6. An attacker who can observe the circuit in (1) and the circuit in (5)
&gt;&gt; can deduce by temporal proximity that those 2 circuits belong to the
&gt;&gt; same client.
&gt;&gt;
&gt;&gt; This attack seemed obvious enough to me that I assumed that Tor must
&gt;&gt; have some kind of countermeasure to it, e.g. random delays in opening
&gt;&gt; preemptive circuits.  However, the tor-path specification doesn't
&gt;&gt; mention any such countermeasure, and based on a brief search through the
&gt;&gt; Tor source code, all I can find is that Tor opens preemptive circuits
&gt;&gt; using a function that always gets called once per second (with no
&gt;&gt; mention of any delay beyond that one-second interval, random or
&gt;&gt; otherwise).
&gt;&gt;
&gt;&gt; So, does Tor make any effort to mitigate the above attack?  If so, what
&gt;&gt; mitigations are present, and where would I find them (in both the spec
&gt;&gt; and the source code)?  If not, is there any documented reason (e.g. "the
&gt;&gt; attack is too hard to pull off" or "we want to mitigate it but haven't
&gt;&gt; gotten to it yet") for the lack of mitigation?
&gt;&gt;
&gt;&gt; Cheers,
&gt; 
&gt; 
&gt; Hi Jeremy,
&gt; 
&gt; When I read your checklist from 1 to 6 I remembered that there was a
&gt; research made on this [1] (I think you are talking about the same thing,
&gt; except not mentioning where your "attacker" is positioned). If a counter
&gt; measure existed it would have been documented in the Tor spec for
&gt; tor-path of course, so I guess that part is correct.
&gt; 
&gt; There is an obvious straight forward solution to fix it [2], except
&gt; AFAIK nobody had time to work on this yet.
&gt; 
&gt; I guess this is because this threat is not very scary, it is nice to fix
&gt; it of course, but correlating anonymous circuits to the same anonymous
&gt; user is much less scary than:
&gt; - guard discovery attack;
&gt; - guard partitioning attacks / path-bias attacks;
&gt; - routers netflow recording of traffic patterns;
&gt; - v3 onion services;
&gt; 
&gt; There has been a lot of work into these directions.
&gt; 
&gt; [1]:
&gt; https://lists.torproject.org/pipermail/tor-dev/2014-September/007517.html
&gt; 
&gt; [2]:
&gt; https://lists.torproject.org/pipermail/tor-dev/2014-September/007518.html

That's great info, thanks for the references!

&gt; If this thread model is interesting to you or your project(s), you can
&gt; take Paul's ideas from [2] and write a patch. It is also going to need a
&gt; proposal before it will be merged into Tor but at least there will be
&gt; some action ;)

At this time it's unlikely that I'll have free time to write a patch,
especially as this is someone outside of my area of expertise.  That
said, this does seem like something that would be beneficial to patch,
so I certainly do hope someone volunteers to do it.  (Maybe me in the
distant future.)

Cheers,
-- 
-Jeremy Rand
Lead Application Engineer at Namecoin
Mobile email: jeremyrandmobile@airmail.cc
Mobile OpenPGP: 2158 0643 C13B B40F B0FD 5854 B007 A32D AB44 3D9C
Send non-security-critical things to my Mobile with OpenPGP.
Please don't send me unencrypted messages.
My business email jeremy@veclabs.net is having technical issues at the
moment.


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190923223326</emailId><senderName>"Tomer Ashur"</senderName><senderEmail>tomer.ashur@esat.kuleuven.be</senderEmail><timestampReceived>2019-09-23 22:33:26-0400</timestampReceived><subject>Re: [tor-dev] Counter Galois Onion: A New Proposal for Forward-Secure Relay Cryptography</subject><body>

Hi Nick, all,

&gt; It would also be interesting to know what the ADL authors think of this proposal \
&gt; too -- most of us at Tor aren't cryptographers ourselves.

We're looking into it. If indeed this proposal delivers on its claims we'll be happy \
to endorse it over Proposal 295. Will try to get back to you soon. 

Tomer 

-----Original Message-----
From: tor-dev &lt;tor-dev-bounces@lists.torproject.org&gt; On Behalf Of Nick Mathewson
Sent: Sunday, September 15, 2019 3:26 AM
To: tor-dev@lists.torproject.org
Cc: martijn@simula.no
Subject: Re: [tor-dev] Counter Galois Onion: A New Proposal for Forward-Secure Relay \
Cryptography

On Thu, Sep 12, 2019 at 6:34 PM Jean Paul Degabriele &lt;jpdega@gmail.com&gt; wrote:
&gt; 
&gt; Hello tor-devs,
&gt; 
&gt; Martijn Stam and myself have previously worked on analysing the 
&gt; security of proposal 261. Together with Martijn's PhD student, 
&gt; Alessandro Melloni, we have now written a proposal for an onion 
&gt; encryption scheme as an alternative to Proposals 261 and 295. It 
&gt; builds on the GCM-RUP construction from [ADL17] but it offers a number 
&gt; of improvements over proposal 295. In addition to addressing the 
&gt; issues described below we expect it to offer better performance. We 
&gt; are currently working on a security proof and potential efficiency 
&gt; optimisations for this scheme. In the meantime, we would be very happy 
&gt; to hear what you think and any feedback you may have. If something is unclear, \
&gt; please let us know. 

Thank you!  I've added this as proposal 308.  I'll be looking it over with interest \
in the near future.

One thing that helps me understand this kind of proposal is writing or examining a \
reference implementation for it, so I can see clearly what state is kept, which party \
does what, and so on.  I did one for proposal 295 as \
https://github.com/nmathewson/prop295ref -- I hope I can get a reference \
implementation together for this one too, unless you're already on it.

It would also be interesting to know what the ADL authors think of this proposal too \
-- most of us at Tor aren't cryptographers ourselves.

thanks again, and best wishes,
--
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190926085157</emailId><senderName>Diana Moraa</senderName><senderEmail>dianamoraa47@gmail.com</senderEmail><timestampReceived>2019-09-26 08:51:57-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

[Attachment #2 (multipart/alternative)]


Sorry i don't have the video.

On Thu, Sep 26, 2019 at 10:01 AM vignesh kannan &lt;vigneshvishnu1925@gmail.com&gt;
wrote:

&gt; Please sent me a video that how to get dark web please
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;Sorry i don't have the video.&lt;/div&gt;&lt;br&gt;&lt;div \
class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Thu, Sep 26, 2019 at 10:01 \
AM vignesh kannan &lt;&lt;a \
href="mailto:vigneshvishnu1925@gmail.com"&gt;vigneshvishnu1925@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;Please \
sent me a video that how to get dark web please  &lt;/div&gt; \
_______________________________________________&lt;br&gt; tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190926190149</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-09-26 19:01:49-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

Further posts from vignesh will require moderator approval. Sorry
folks for the noise. :)

On Thu, Sep 26, 2019 at 12:01 AM vignesh kannan
&lt;vigneshvishnu1925@gmail.com&gt; wrote:
&gt;
&gt; Please sent me a video that how to get dark web please
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190926202542</emailId><senderName>Diana Moraa</senderName><senderEmail>dianamoraa47@gmail.com</senderEmail><timestampReceived>2019-09-26 20:25:42-0400</timestampReceived><subject>Re: [tor-dev] (no subject)</subject><body>

[Attachment #2 (multipart/alternative)]


=F0=9F=91=8D

On Thu, Sep 26, 2019 at 10:02 PM Damian Johnson &lt;atagar@torproject.org&gt;
wrote:

&gt; Further posts from vignesh will require moderator approval. Sorry
&gt; folks for the noise. :)
&gt;
&gt; On Thu, Sep 26, 2019 at 12:01 AM vignesh kannan
&gt; &lt;vigneshvishnu1925@gmail.com&gt; wrote:
&gt; &gt;
&gt; &gt; Please sent me a video that how to get dark web please
&gt; &gt; _______________________________________________
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;👍&lt;br&gt;&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" \
class="gmail_attr"&gt;On Thu, Sep 26, 2019 at 10:02 PM Damian Johnson &lt;&lt;a \
href="mailto:atagar@torproject.org"&gt;atagar@torproject.org&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;Further posts from \
vignesh will require moderator approval. Sorry&lt;br&gt; folks for the noise. :)&lt;br&gt;
&lt;br&gt;
On Thu, Sep 26, 2019 at 12:01 AM vignesh kannan&lt;br&gt;
&lt;&lt;a href="mailto:vigneshvishnu1925@gmail.com" \
target="_blank"&gt;vigneshvishnu1925@gmail.com&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; Please sent me a video that how to get dark web please&lt;br&gt;
&gt; _______________________________________________&lt;br&gt;
&gt; tor-dev mailing list&lt;br&gt;
&gt; &lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
_______________________________________________&lt;br&gt; tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190930121545</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-09-30 12:15:45-0400</timestampReceived><subject>[tor-dev] Exposing onion service errors to Tor Browser</subject><body>

Hello list,

we've recently been thinking about how to expose onion-service-related
errors to Tor Browser so that we can give more useful error pages to
users.  We currently return "Unable to connect" error pages for any kind
of onion service error, and I think we can do better.

This is a thread to think about the errors we want to expose, how that
should look like, and what options we should give to the users when it
happens. Relevant master tickets are #30022, #30025 and #30000.

We decided (in #14389) that Tor will export these errors through the
SOCKS port, and the relevant spec is proposal 304 [0].

As part of #30090 antonela started making a table of potential
errors. I'm gonna use that in this thread and also add a few more.

Let's go:

= Client-level errors =

These are errors on the user side of things: 

=== 1) Typo error on address ===

    This can be detected by Tor using the checksum or if the address is
    too big or too small.

    TODO: We will need to add a new error code to prop304. Not sure if
    the error code should distinguish between checksum fail or length fail.

    There is no recovery here since the address is busted. The user
    needs to find the right one.

=== 2) Missing Client Authorization ===

    This is prop304's 'F4' error (see #30382), and it means that we
    can't decrypt the descriptor because it requires client auth, but we
    don't have it configured.

    The recovery here is the whole point of #30237 where we make a
    dialog for the user to insert their client auth credentials.

=== 3) Wrong Client Authorization ===

    This is prop304's 'F5' error, and it means that there client auth
    credentials configured for this onion are wrong.

    The user recovery here is unclear but it might be that they need to
    change their client auth credentials. IMO, we should not try to make
    the perfect UX here, and we should just go with something super
    simple.

= Service-level errors =

These are errors on the onion service side:

=== 4) Service Descriptor Can Not be Found ===

    This is prop304's 'F0' error, and it means that we could not find
    the descriptor of the service on the directory servers. This means
    that the service is not up right now (or, more unlikely, that some
    bug has happened somewhere).

    The user recovery here is unclear. The user can try to reconnect in
    case the service got up in the meanwhile, but this is not so likely
    in a small period of time.

    Perhaps we can give the user the option to reconnect every 10
    seconds or so? Does this make sense from a UX PoV?

    Again this equivalent to a "Remote host is down" error and we should
    use it as such.

= Network-level errors =

These are errors caused by the network (directory servers, intro points,
rendezvous points) or even the service itself. It's kinda unclear given
all the hops involved. 

=== 5) Onion Service Descriptor Is Invalid ===

    This is prop304's 'F1' error and it means that we got a descriptor
    back from the directory but it's corrupted.

    This is very unlikely to happen since directory servers do not keep
    corrupted descriptors, so it usually means that some bug happened
    somewhere (or that the directory is bad or confused).

    In terms of recovery and error page, this is kinda an
    "Oops. Internal error." situation where this is rare and weird and
    hence we don't know what's the best recovery option. We can give the
    option to reconnect but it's likely not gonna help much.

    Again this should never really appear, so let's not stress too much
    over it.

=== 6) Onion Service Introduction Failed ===

    This is prop304's 'F2' error and it means that for some reason the
    introduction did not complete. This could be because the onion
    service is not up anymore, or it could be because the network is
    screwed in some way (e.g. the service is DoSed).

    The recovery here might be some 'reconnect' button which could be
    helpful in case of a DoS situation, but it would not help much if
    the service is not up anymore.

=== 7) Onion Service Rendezvous Failed ===

    This is prop304's 'F3' error and it means that the rendezvous did
    not complete. This usually means that the service is having a bad
    time, and is either DoSed or it generally cannot cope.

    The recovery again here is some 'reconnect' button, since if we did
    the introduction successfuly, the service is up, and reconnecting
    might work at some point.

    This one and (6) are very related and perhaps they can be handlded
    identically, since exposing terms like "intro" and "rend" to users
    will not be nice. Still we might want to expose a technical error
    value somewhere for debugging purposes when users come to us.

=======================================================================

I think the above set of errors will satisfy all our needs. In
particular:
- #30022 (typos ticket) needs error (1) from above.
- #30025 (client errors ticket) needs errors (4), (5), (6), (7) from above.
- #30000 (client auth) needs errors (2) and (3) from above.

In terms of error page, I'm not sure how it should look like. Perhaps
along with the error description and the recovery path, we should
provide some education about onion services to the users?

In terms of unsafe paths, I don't see any of these errors being
dangerous in terms of causing security issues if you attempt to
reconnect or anything. The Tor protocol takes care of this in the layer
below. The worst thing you can do is slightly damage the network from
too many reconnects, but I think that's OK since people who use the TB
are legitimate users and not DoS attackers.

===

Hope this was useful!

[0]:
https://github.com/torproject/torspec/blob/master/proposals/304-socks5-extending-hs-error-codes.txt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190820082836</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-08-20 08:28:36-0400</timestampReceived><subject>Re: [tor-dev] [prop305] Introduction Point Behavior</subject><body>

David Goulet &lt;dgoulet@torproject.org&gt; writes:

&gt; Greetings,
&gt;
&gt; This is part of the many discussions about proposal 305 which is the
&gt; ESTABLISH_INTRO DoS defenses cell extension.
&gt;
&gt; Implementation is close to done and under review in ticket #30924. However,
&gt; there is one part that is yet to be cleared out. asn and I thought it would be
&gt; better to bring it to tor-dev@ to get a more informed decision.
&gt;
&gt; As a reminder, the service operator will be able set torrc options that are
&gt; the DoS defenses parameters. Those values are validated (bound check) and then
&gt; sent to an introduction point, supporting the extension (protover HSIntro=5),
&gt; in the ESTABLISH_INTRO cell. The intro point then gets them and apply them
&gt; only to that specific circuit. If no cell extension is seen, the intro point
&gt; will honor the consensus parameters for these DoS defenses.
&gt;
&gt; What we want to discuss is what happened when the introduction points receives
&gt; bad values. What does it do with the circuit? Below is the list of possible
&gt; bad values and the proposed behavior:
&gt;
&gt; 1) One of the paramater (at this point in time, only 2 exists) is out of bound
&gt;    that is above INT32_MAX.
&gt;
&gt;    Behavior: We propose to ignore the cell extension, and fallback to follow
&gt;              the consensus parameters. Keeping the circuit alive and working.
&gt;
&gt;    The reason for this is because if let say the intro point would close the
&gt;    circuit due to "bad protocol", then the service would open a new circuit to
&gt;    an intro point supporting the extension and it would fail again.
&gt;    Effectively turning the service into a "zombie" and "DoS" weapon itself ;).
&gt;
&gt;    At this point, there is really no reason on why the service would send bad
&gt;    values since torrc options are validated and then sent to the intro point.
&gt;    But this doesn't protect us from our future-developer-self making coding
&gt;    or protocol mistake ;).
&gt;
&gt; &lt;snip&gt;
&gt;
&gt; I'm leaning towards not closing the circuit and falling back on the consensus
&gt; parameters. And at some point in time, we'll be able to implement the
&gt; INTRO_ESTABLISHED response. In the meantime, there is little chances that tor
&gt; vanilla start sending bad values since they are validated from the torrc file.
&gt;

Hello David,

I agree with your evaluation about keeping the circuit open on bad
values and going with the consensus parameters!

That said, let's also make a ticket about the INTRO_ESTABLISHED
enhancement that will allow us to send back status messages. Same goes
for a ticket that allows us to send multiple ESTABLISH_INTRO in the same
circuit, so that we can update the values in a hotplug way.

Finally, this is off-topic but another intro&lt;-&gt;service communication we
might want to add in the future, is a message from the intro informing
the service that the rate-limiting parameters have been hit.

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821230442</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-08-21 23:04:42-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

&gt; If someone is going to criticize other people's work and dismiss it as
&gt; nearly useless without even somewhat informing themselves about it,
&gt; they should expect to be called out on that. You might find my reply
&gt; offensive, but I found the email that I was replying to extremely
&gt; offensive and I had to subscribe to this list and figure out how to
&gt; send a reply to a past email from the archive to defend the value of
&gt; my work. It wasn't fair or accurate criticisms or comparisons.

Hi Daniel. Further posts from you will require moderator approval.

Personally I'm baffled what made you so upset. From what I can tell
Tom didn't even claim harden_malloc is a bad project, just that
benchmarks should be redone with Firefox's jemalloc forking in mind
and that he doesn't expect benefits from integrating it via LD_PRELOAD
for our use case (though to be honest this thread got too wonky for me
- not my specialty).

Regardless, contentious technical discussions on this list are fine
but personal attacks are not.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190824172328</emailId><senderName>"procmem () riseup ! net"</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2019-08-24 17:23:28-0400</timestampReceived><subject>[tor-dev] Enhanced Tor Browser sandboxing upstreaming</subject><body>

Hi. We aim to make enhanced sandboxing for Tor Browser widely available
on Linux that's well maintained in the long term. We would appreciate it
if TBB team provides the currently developed Apparmor and firejail
profiles below from your repos and run unit testing and check/fix any
breakages with updated browser versions.

It turns out there is an advantage to stacking both Apparmor and
Firejail. Firejail doesn't offer nearly as good file path whitelisting
as AppArmor. Firejail also can't do many things AppArmor can such as
managing ptrace or signals, yet firejail can use xpra to isolate Tor
Browser's access to X, pulseaudio and the clipboard. The Firejail
package included in Debian stable cannot keep pace with the needed
changes as Tor Browser continues to change.

Stacking is also a good defense in depth. If there's a vulnerability in
Firejail then AppArmor will still restrict the application or vice versa.

Firejail provides a maintained official profile for Tor Browser [0].

We have a Apparmor profile that we've maintained for years [1].




[0]
https://github.com/netblue30/firejail/blob/master/etc/start-tor-browser.profile

[1] https://github.com/Whonix/apparmor-profile-torbrowser

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190827084842</emailId><senderName>Peter Palfrader</senderName><senderEmail>weasel@torproject.org</senderEmail><timestampReceived>2019-08-27 08:48:42-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

On Wed, 14 Aug 2019, Pop Chunhapanya wrote:

&gt; I feel that HTTPSProxy is too expensive. As far as I know, it needs to do
&gt; (1) tcp handshake, (2) tls handshake, and (3) http connect. If I can use
&gt; haproxy, it would be just one tcp handshake.

AIUI, there wouldn't be a (2).

-- 
                            |  .''`.       ** Debian **
      Peter Palfrader       | : :' :      The  universal
 https://www.palfrader.org/ | `. `'      Operating System
                            |   `-    https://www.debian.org/
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190829162129</emailId><senderName>LA_FORGE</senderName><senderEmail>polarbear1987@protonmail.com</senderEmail><timestampReceived>2019-08-29 16:21:29-0400</timestampReceived><subject>Re: [tor-dev] Q: Links to external apps</subject><body>


Thanks. I tried that already and also completely uninstalling the NoScript Addon and \
moved the security slider of TB to the lowest level but it doesn't work :(

------- Original Message -------
On Thursday, August 29, 2019 5:12 AM, Kaizu Shibata &lt;kaizushi@cock.li&gt; wrote:

&gt; Try turning on Javascript.
&gt; 
&gt; LA_FORGE:
&gt; 
&gt; &gt; Hi,
&gt; &gt; I love Tor Browser very much. So much that I just created a separate TB instance \
&gt; &gt; for local Intranet browsing. Everything is working fine but I just got a question \
&gt; &gt; related to links to other/external applications such as \
&gt; &gt; vmrc://192.168.76.224/?moid=36 It's from the VMware ESXi Webclient. I just set up \
&gt; &gt; a handler at 'Applications' in TBs Options and made it permanent: \
&gt; &gt; [TB_Applications.png] but it doesn't work :( the external application won't start \
&gt; &gt; :( Does TB have a protection against those links to external applications? If so. \
&gt; &gt; is there a way to turn it off? Thanks in advance
&gt; &gt; Greetings
&gt; &gt; LA_FORGE
&gt; &gt; 
&gt; &gt; tor-dev mailing list
&gt; &gt; tor-dev@lists.torproject.org
&gt; &gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; --
&gt; 
&gt; Owner of Kaizushi's Little Onion Server and Infantile.
&gt; 
&gt; http://kaizushigdv5mrnz.onion/
&gt; http://infantilefb6ovh4.onion/
&gt; 
&gt; Main email: kaizushi@infantile.us
&gt; Others: kaizushi@infantile.xyz kaizushi@cock.li kaizushi@secmail.pro


_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190701033618</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-07-01 03:36:18-0400</timestampReceived><subject>[tor-dev] Changed Network Team Meeting Times</subject><body>

[Attachment #2 (multipart/signed)]


Hi all,

We've moved the first network team meeting of each month to Wednesday
2300 UTC. (It used to be Tuesday.) We have also moved the weekly
"patch party" to Wednesday 2300 UTC in the other weeks of the month.

The regular team meeting time is still the same, Monday 1700 UTC.

Here is our meeting schedule for July:
    * Wednesday 3 July 2300 UTC - Changed Day!
    * Monday 8 July at 1700 UTC
    * (In-person meeting 12-14 July)
    * Monday 22 July 1700 UTC
    * Monday 29 July 1700 UTC

T

--
teor
----------------------------------------------------------------------


["signature.asc" (signature.asc)]

-----BEGIN PGP SIGNATURE-----

iQIzBAEBCAAdFiEEo9HIo7IdGQ1wBWG3EP6qDnB1ZyoFAl0Zf7IACgkQEP6qDnB1
ZyqGog/+PeJ/63FVj5Z5aVn9AX1DcdK4mX1FntutrNdpWBxcMFrh37O90zi25zkB
Lkpwja8/8yPkjpcFowRghmuz5da13VOAjT+6bcgdsJIsn6x5ucw6re7ectUaZ86h
J43TC0KAdq4z+UmOLreuuC2xRW7NMNPxFgbIgtgy50p4pQDJXEzHrqFtR6cGpLyd
CCEn2PZ+5VA7XGWM9lhj1ce0ydaKCgyJAuYvCiaUWchoE59H+KK5K9y+YX7QENCy
4kl63KrzHkBPegmHN6fR+UIp81xbVy5JyjnOKgCPiLYQqLdK/qrDwa8DeEZwceZO
poJwHNHmBw9+aStR2P63XqPfHC4JGDvz4XAUZttlkhE1Z6cVI8/U0t/EcStbuzN8
tvfsful96vITFDdl8W1ngMonm8qWgq0GIeJFR7QOUYIODYo8gCAPue3tA/FxrKnT
rEegm5932uLfzWL9nBZO6lyZF2P0FqDLs60yOA9PEmugk5dLhxY9LIKCi5XXQ+W4
38yyD4Up8cG9nkliPQf3D4e7vCE+CL92MAhYYix5BlO9GbwBIAs4jaPLPHiuONlX
oUswj+ZCergCI6sMPBXZLENMN4WLCJox4+JpvrqMvVkDSX02gK60haWZYuQaJ8RW
1GkvLGukVF6kUYsRAI5BTzGTP2LWQ2MHuZDFjQcxeqDr1EOhSes=
=boiE
-----END PGP SIGNATURE-----

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190708101432</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-07-08 10:14:32-0400</timestampReceived><subject>Re: [tor-dev] Fwd: Re:  Onion Service - Intropoint DoS Defenses</subject><body>

juanjo &lt;juanjo@avanix.es&gt; writes:

&gt; -------- Forwarded Message --------
&gt; Subject: 	Re: [tor-dev] Onion Service - Intropoint DoS Defenses
&gt; Date: 	Thu, 4 Jul 2019 20:38:48 +0200
&gt; From: 	juanjo &lt;juanjo@avanix.es&gt;
&gt; To: 	David Goulet &lt;dgoulet@torproject.org&gt;
&gt;
&gt;
&gt;
&gt; These experiments and final note confirm what I thought about this rate 
&gt; limiting feature from the start: it is missing important parts. Ok, you 
&gt; can protect the network a little and the HS, but the general 
&gt; availability is not affected so it actually does not help for that.
&gt;
&gt; I wanna make a proposal including many things at the same time, but I 
&gt; don't have much time to follow the guidelines to make a official 
&gt; proposal. Maybe in some weeks?
&gt;

Hello!

Ideally I would make one proposal for each of the things you care
about. Doing one huge proposal with all the things will make it less
likely for things to be done, since someone will disagree about one
small part of the proposal, and it will block the whole proposal
altogether.

&gt; Again, I repeat: things that should be done now:
&gt;
&gt; -Authenticated rend signature. This would help a lot I think.
&gt;

Current attacks do not spoof rendezvous points, they actually do make
the circuits, so I don't think that would help a whole lot. Still future
attacks might, so I agree this is worth doing (#25066 needs more
thinking and a proposal).

&gt; -Mid-term: PoW for the client when reaching the 305prop limit instead of 
&gt; denying access? IDK, all always configurable.
&gt;

Plausible.

&gt; -Deprecate clients or allow the Hidden Service to configure the IP to 
&gt; allow access for old version clients (not supporting new antiDoS 
&gt; features) or not. If we allow old version without protections, all 
&gt; security measures are useless.
&gt;

Plausibl-ish.

&gt; And just a new idea: what about make the rotation of IP dynamic based on 
&gt; this prop305 values? + time based rotation:
&gt; One of the goal for rotation was defending against correlation attacks: 
&gt; if we set a lower limit we have a potential DoS (right now), if we set 
&gt; it high we have a potential correlation attack, bigger surface.
&gt; What about we join time based rotation (ex. 24 hours) + or limit reached 
&gt; based on the prop305 values.
&gt;

Please see #26294 which is about to be merged upstream and will remove
some more useless parameters from intro point rotation. After #26294,
intro points will only rotate based on time.

What is the correlation attack you are worrying about? And why do you
think that rotating more frequently will make it safer? Usually rotating
less frequently helps against attacks by ensuring that it's less likely
to cycle into bad nodes.

Cheers! :)
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190709095438</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-07-09 09:54:38-0400</timestampReceived><subject>Re: [tor-dev] exitmap/RESOLVE control command limitations</subject><body>



On July 9, 2019 8:55:00 AM UTC, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; Hi,
&gt; 
&gt; I noticed some unexpected answers in exitmap's [1] dnsenum results
&gt; and suspected that this has todo with IPv4 vs. IPv6.
&gt; 
&gt; First I looked at [2] and found that it only lists IPv4 and hostnames
&gt; as possible answers but then I realized that exitmap might not be using
&gt; the RESOLVE command?

Exitmap is using tor's RESOLVE extension to SOCKS:
https://gitweb.torproject.org/torspec.git/tree/socks-extensions.txt#n49

&gt; &gt; def resolve(self, domain):
&gt; &gt; """
&gt; &gt; Resolve the given domain using Tor's SOCKS1 resolution
&gt; extension.
&gt; &gt; """
&gt; &gt; 
&gt; &gt; domain_len = len(domain)
&gt; &gt; if domain_len &gt; 255:
&gt; &gt; raise error.SOCKSv5Error("Domain must not be longer than
&gt; 255 "
&gt; &gt; "characters, but %d given." %
&gt; domain_len)
&gt; &gt; 
&gt; &gt; # Tor defines a new command value, \x0f, that is used for
&gt; domain
&gt; &gt; # resolution.
&gt; &gt; 
&gt; &gt; self._send_all("\x05\xf0\x00\x03%s%s%s" %
&gt; &gt; (chr(domain_len), domain, "\x00\x00"))

Exitmap uses the SOCKS 5, resolve, DNS command:
See page 4 of https://www.ietf.org/rfc/rfc1928.txt

&gt; &gt; 
&gt; &gt; resp = self._recv_all(10)
&gt; &gt; if resp[:2] != "\x05\x00":
&gt; &gt; raise error.SOCKSv5Error("Invalid server response: 0x%s"
&gt; %
&gt; &gt; resp[1].encode("hex"))

Resolve can return an IPv4 or IPv6 response, but Exitmap ignores the address type, \
and turns the first 4 bytes of the response into an IPv4 address.

&gt; &gt; return socket.inet_ntoa(resp[4:8])
&gt; 
&gt; 
&gt; Does Tor's SOCKS resolution extension support IPv6 answers
&gt; or does it only attempt A records?

If it gets both IPv4 and IPv6, I think it will prefer IPv4.

Try testing with ipv6.google.com, which only has an IPv6 address.

&gt; I'm aiming to resolve a hostname and would like to get 
&gt; the IPv4 and if available the IPv6 address.

I don't know how you can reliably get the IPv6 address over SOCKS, when the site has \
an IPv4 address.

Try using the controller RESOLVE command and ADDRMAP event, which supports IPv6:

Address = ip4-address / ip6-address / hostname

If that doesn't work, we might need to make some changes to tor, or fix some bugs.

&gt; thanks,
&gt; nusenu
&gt; 
&gt; 
&gt; [1] https://github.com/NullHypothesis/exitmap
&gt; [2]
&gt; https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n1349


--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190709114800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-09 11:48:00-0400</timestampReceived><subject>Re: [tor-dev] tor's SOCKS5 extension "RESOLVE"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; I modified exitmap to print the entire response in case the ATYP field is set to 04 (meaning the
&gt; response contains an IPv6 address) but
&gt; the response is not any longer and contains only the first 4 bytes of the IPv6 address.
&gt; 
&gt; Running tor 0.3.5.8.
&gt; 
&gt; Has this bug been fixed in later versions of tor or current master?

My assumption was a bit to fast ;)
exitmap just reads 10 bytes only:

resp = self._recv_all(10)

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190815125619</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-08-15 12:56:19-0400</timestampReceived><subject>[tor-dev] [prop305] Introduction Point Behavior</subject><body>

[Attachment #2 (multipart/signed)]


Greetings,

This is part of the many discussions about proposal 305 which is the
ESTABLISH_INTRO DoS defenses cell extension.

Implementation is close to done and under review in ticket #30924. However,
there is one part that is yet to be cleared out. asn and I thought it would be
better to bring it to tor-dev@ to get a more informed decision.

As a reminder, the service operator will be able set torrc options that are
the DoS defenses parameters. Those values are validated (bound check) and then
sent to an introduction point, supporting the extension (protover HSIntro=5),
in the ESTABLISH_INTRO cell. The intro point then gets them and apply them
only to that specific circuit. If no cell extension is seen, the intro point
will honor the consensus parameters for these DoS defenses.

What we want to discuss is what happened when the introduction points receives
bad values. What does it do with the circuit? Below is the list of possible
bad values and the proposed behavior:

1) One of the paramater (at this point in time, only 2 exists) is out of bound
   that is above INT32_MAX.

   Behavior: We propose to ignore the cell extension, and fallback to follow
             the consensus parameters. Keeping the circuit alive and working.

   The reason for this is because if let say the intro point would close the
   circuit due to "bad protocol", then the service would open a new circuit to
   an intro point supporting the extension and it would fail again.
   Effectively turning the service into a "zombie" and "DoS" weapon itself ;).

   At this point, there is really no reason on why the service would send bad
   values since torrc options are validated and then sent to the intro point.
   But this doesn't protect us from our future-developer-self making coding
   or protocol mistake ;).

2) A parameter type is unrecognized. This one is mostly about forward
   compatibility.

   Behavior: Ignore the parameter type, and continue parsing the cell
             extension. If all the right parameters are found, apply defenses.

3) None or 1 parameter out of 2 is given.

   Behavior: This would be considered bad protocol so it would be like (1)
             where the intro point uses the consensus parameters.

4) &lt;insert whatever case you can think about&gt;


So, for (1) and (3), there lies mostly the discussion. There is no way to send
feedback to the service if a problem occurred and that the DoS defenses
weren't applied due to reason X.

If we had that, we could not only try to warn the operator (log or control
event) but make tor smarter when an error is returned so it doesn't try to
infinity other intro points with values that makes them fail.

One avenue there is to pass down such error code into the INTRO_ESTABLISHED
cell with probably a new extension. That requires more work and likely either
extending prop305 or a new proposal.

Thus, what is the minimal viable product here we are ok with?

I'm leaning towards not closing the circuit and falling back on the consensus
parameters. And at some point in time, we'll be able to implement the
INTRO_ESTABLISHED response. In the meantime, there is little chances that tor
vanilla start sending bad values since they are validated from the torrc file.

Cheers!
David

-- 
eHE50zZRZOX3zLNHdPwN5gGQBUvDnfGyOuYr/afK2XY=

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190816064747</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-16 06:47:47-0400</timestampReceived><subject>Re: [tor-dev] [prop305] Introduction Point Behavior</subject><body>

Hi David,

&gt; On 15 Aug 2019, at 22:56, David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt; 
&gt; I'm leaning towards not closing the circuit and falling back on the consensus
&gt; parameters.

Using the consensus parameters seems like a good thing to do.

We can say "valid parameters override the consensus parameters. Invalid
parameters are ignored, and the circuit uses the consensus parameters."

&gt; And at some point in time, we'll be able to implement the
&gt; INTRO_ESTABLISHED response. In the meantime, there is little chances that tor
&gt; vanilla start sending bad values since they are validated from the torrc file.

Do we have a protocol warning for invalid parameters? If we do, we should be
able to detect issues as they happen.

I don't think there's an easy way of detecting these kinds of bugs in chutney.
But maybe we want to set consensus parameters and torrc parameters on one
of the chutney networks?

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190817150604</emailId><senderName>"procmem () riseup ! net"</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2019-08-17 15:06:04-0400</timestampReceived><subject>[tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

Question for the Tor Browser experts. Do you know if it is possible to
remotely fingerprint the browser based on the memory allocator it is
using? (via JS or content rendering)

We are thinking of switching Tor Browser to use the minimalist and
security oriented hardened_malloc written by Daniel Micay. Thanks.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190814191027</emailId><senderName>Pop Chunhapanya</senderName><senderEmail>pop@cloudflare.com</senderEmail><timestampReceived>2019-08-14 19:10:27-0400</timestampReceived><subject>[tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


Hi all,

When deploying an onion service, I noticed some problem that the ip address
of my machine that runs tor daemon is exposed to the Tor network which is
vulnerable to the DDoS attack if someone knows my ip address.

So I'm thinking putting the tor daemon behind some third party TCP proxy
that will protect me from this kind of DDoS attack.

What do you think if I want to implement a feature that forward all the
onion service traffic to the TCP proxy before going to the Tor network?

The protocol that I'm thinking is TCP Proxy Protocol [1]

[1] https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi all,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;When deploying an \
 onion service, I noticed some problem that the ip address of my machine 
that runs tor daemon is exposed to the Tor network which is vulnerable 
to the DDoS attack if someone knows my ip address.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;So \
I'm thinking putting the tor daemon behind some third party TCP proxy that will \
protect me from this kind of DDoS attack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What  do you think \
if I want to implement a feature that forward all the  onion service traffic to the \
TCP proxy before going to the Tor network?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The protocol that \
I'm thinking is TCP Proxy Protocol [1]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt" \
target="_blank"&gt;https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;



[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190828165101</emailId><senderName>LA_FORGE</senderName><senderEmail>polarbear1987@protonmail.com</senderEmail><timestampReceived>2019-08-28 16:51:01-0400</timestampReceived><subject>[tor-dev] Q: Links to external apps</subject><body>

[Attachment #2 (multipart/alternative)]

[Attachment #4 (text/plain)]

Hi,

I love Tor Browser very much. So much that I just created a separate TB instance for \
local Intranet browsing. Everything is working fine but I just got a question related \
to links to other/external applications such as vmrc://192.168.76.224/?moid=36

It's from the VMware ESXi Webclient. I just set up a handler at 'Applications' in TBs \
Options and made it permanent:

[TB_Applications.png]

but it doesn't work :( the external application won't start :( Does TB have a \
protection against those links to external applications? If so. is there a way to \
turn it off?

Thanks in advance

Greetings

LA_FORGE


[Attachment #5 (multipart/related)]

[Attachment #7 (text/html)]

&lt;div&gt;Hi,&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I love Tor Browser very much. So much that I \
just created a separate TB instance for local Intranet browsing. Everything is \
working fine but I just got a question related to links to other/external \
applications such as vmrc://192.168.76.224/?moid=36  \
&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;It's from the VMware ESXi Webclient. I just set up a \
handler at 'Applications' in TBs Options and made it \
permanent:&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;img class="proton-embedded" \
alt="TB_Applications.png" \
src="cid:e34a358f@protonmail.com"&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;but it doesn't work \
:( the external application won't start :( Does TB have a protection against those \
links to external applications? If so. is there a way to turn it \
off?&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;Thanks in \
advance&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Greetings&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;LA_FORGE&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;



["TB_Applications.png" (image/png)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190814232239</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-14 23:22:39-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,

&gt; On 15 Aug 2019, at 05:10, Pop Chunhapanya &lt;pop@cloudflare.com&gt; wrote:
&gt; 
&gt; When deploying an onion service, I noticed some problem that the ip address of my \
&gt; machine that runs tor daemon is exposed to the Tor network which is vulnerable to \
&gt; the DDoS attack if someone knows my ip address.

You can reject all inbound connections to your onion service using a simple firewall \
rule. Onion services are tor clients: they only make outbound connections.

&gt; So I'm thinking putting the tor daemon behind some third party TCP proxy that will \
&gt; protect me from this kind of DDoS attack. 
&gt; What do you think if I want to implement a feature that forward all the onion \
&gt; service traffic to the TCP proxy before going to the Tor network? 
&gt; The protocol that I'm thinking is TCP Proxy Protocol [1]
&gt; 
&gt; [1] https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt

You could try the existing HTTPSProxy torrc option?

HTTPSProxy host[:port]
Tor will make all its OR (SSL) connections through this host:port (or host:443 if \
port is not specified), via HTTP CONNECT rather than connecting directly to servers. \
You may want to set FascistFirewall to restrict the set of ports you might try to \
connect to, if your HTTPS proxy only allows connecting to certain ports.



Tor also allows an intelligent firewall to filter circuits using a field in haproxy \
protocol format, see HiddenServiceExportCircuitID for details. But you probably won't \
need this advanced feature.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;Hi,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 15 Aug 2019, at 05:10, \
Pop Chunhapanya &lt;&lt;a href="mailto:pop@cloudflare.com"&gt;pop@cloudflare.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;When deploying an  onion service, I noticed some \
problem that the ip address of my machine  that runs tor daemon is exposed to the Tor \
network which is vulnerable  to the DDoS attack if someone knows my ip \
address.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;You can reject all \
inbound connections to your onion service using a simple firewall rule. Onion \
services are tor clients: they only make outbound connections.&lt;/div&gt;&lt;br&gt;&lt;blockquote \
type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;So I'm thinking putting \
the tor daemon behind some third party TCP proxy that will protect me from this kind \
of DDoS attack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What  do you think if I want to implement a \
feature that forward all the  onion service traffic to the TCP proxy before going to \
the Tor network?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The protocol that I'm thinking is TCP Proxy \
Protocol [1]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt" \
target="_blank"&gt;https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;You \
could try the existing HTTPSProxy torrc option?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;dt \
class="hdlist1" style="margin: 0px 0px 10px; padding: 0px; border: 0px; outline: 0px; \
font-weight: bold; vertical-align: baseline; line-height: 28px;"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;strong style="margin: 0px; \
padding: 0px; border: 0px; outline: 0px; font-style: inherit; vertical-align: \
baseline;"&gt;HTTPSProxy&lt;/strong&gt; &lt;span style="margin: 0px; padding: 0px; border: \
0px; outline: 0px; font-weight: inherit; font-style: italic; vertical-align: \
baseline;"&gt;host&lt;/span&gt;[:&lt;span style="margin: 0px; padding: 0px; border: 0px; outline: \
0px; font-weight: inherit; font-style: italic; vertical-align: \
baseline;"&gt;port&lt;/span&gt;]&lt;/span&gt;&lt;/dt&gt;&lt;dd style="margin: 0px 0px 18px; padding: 0px; \
border: 0px; outline: 0px; vertical-align: baseline; line-height: 20px;"&gt;&lt;p \
style="margin: 0px 0px 18px; padding: 0px; border: 0px; outline: 0px; font-style: \
inherit; vertical-align: baseline; line-height: 20px;"&gt;&lt;span style="background-color: \
rgba(255, 255, 255, 0);"&gt;Tor will make all its OR (SSL) connections through this \
host:port (or host:443 if port is not specified), via HTTP CONNECT rather than \
connecting directly to servers. You may want to set &lt;strong style="margin: 0px; \
padding: 0px; border: 0px; outline: 0px; font-style: inherit; vertical-align: \
baseline;"&gt;FascistFirewall&lt;/strong&gt; to restrict the set of ports you might try \
to connect to, if your HTTPS proxy only allows connecting to certain \
ports.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px 0px 18px; padding: 0px; border: 0px; outline: \
0px; font-style: inherit; vertical-align: baseline; line-height: 20px;"&gt;&lt;span \
style="background-color: rgba(255, 255, 255, 0);"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: \
0px 0px 18px; padding: 0px; border: 0px; outline: 0px; font-style: inherit; \
vertical-align: baseline; line-height: 20px;"&gt;Tor also allows an intelligent firewall \
to filter circuits using a field in haproxy protocol format, see &lt;strong \
style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: \
baseline; background-color: rgba(255, 255, 255, \
0);"&gt;HiddenServiceExportCircuitID&lt;/strong&gt;&lt;span style="background-color: rgba(255, \
255, 255, 0);"&gt; for details. But you probably won't need this advanced \
feature.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px 0px 18px; padding: 0px; border: 0px; \
outline: 0px; font-style: inherit; vertical-align: baseline; line-height: \
20px;"&gt;&lt;span style="background-color: rgba(255, 255, 255, \
0);"&gt;T&lt;/span&gt;&lt;/p&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;/dd&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190709085500</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-09 08:55:00-0400</timestampReceived><subject>[tor-dev] exitmap/RESOLVE control command limitations</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,

I noticed some unexpected answers in exitmap's [1] dnsenum results
and suspected that this has todo with IPv4 vs. IPv6.

First I looked at [2] and found that it only lists IPv4 and hostnames
as possible answers but then I realized that exitmap might not be using
the RESOLVE command?

&gt;     def resolve(self, domain):
&gt;         """
&gt;         Resolve the given domain using Tor's SOCKS resolution extension.
&gt;         """
&gt; 
&gt;         domain_len = len(domain)
&gt;         if domain_len &gt; 255:
&gt;             raise error.SOCKSv5Error("Domain must not be longer than 255 "
&gt;                                      "characters, but %d given." % domain_len)
&gt; 
&gt;         # Tor defines a new command value, \x0f, that is used for domain
&gt;         # resolution.
&gt; 
&gt;         self._send_all("\x05\xf0\x00\x03%s%s%s" %
&gt;                      (chr(domain_len), domain, "\x00\x00"))
&gt; 
&gt;         resp = self._recv_all(10)
&gt;         if resp[:2] != "\x05\x00":
&gt;             raise error.SOCKSv5Error("Invalid server response: 0x%s" %
&gt;                                      resp[1].encode("hex"))
&gt; 
&gt;         return socket.inet_ntoa(resp[4:8])


Does Tor's SOCKS resolution extension support IPv6 answers
or does it only attempt A records?

I'm aiming to resolve a hostname and would like to get 
the IPv4 and if available the IPv6 address.

thanks,
nusenu


[1] https://github.com/NullHypothesis/exitmap
[2] https://gitweb.torproject.org/torspec.git/tree/control-spec.txt#n1349


-- 
https://twitter.com/nusenu_


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190709111800</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-09 11:18:00-0400</timestampReceived><subject>Re: [tor-dev] tor's SOCKS5 extension "RESOLVE"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Thanks this is very useful information.

&gt;&gt;&gt; # Tor defines a new command value, \x0f, that is used for
&gt;&gt; domain
&gt;&gt;&gt; # resolution.
&gt;&gt;&gt; 
&gt;&gt;&gt; self._send_all("\x05\xf0\x00\x03%s%s%s" % (chr(domain_len),
&gt;&gt;&gt; domain, "\x00\x00"))
&gt; 

&gt; Exitmap uses the SOCKS 5, resolve, DNS command: See page 4 of
&gt; https://www.ietf.org/rfc/rfc1928.txt The SOCKS request is formed as
&gt; follows:
&gt; 
&gt; +----+-----+-------+------+----------+----------+ |VER | CMD |  RSV
&gt; | ATYP | DST.ADDR | DST.PORT | 
&gt; +----+-----+-------+------+----------+----------+ | 1  |  1  | X'00'
&gt; |  1   | Variable |    2     | 
&gt; +----+-----+-------+------+----------+----------+

so in above python code the values are:

ver = \x05
cmd = \xf0 ("RESOLVE") - custom tor extension not in RFC
rsv = \x00
atyp = \x03 (domain)
dst.addr = domain variable
dst.port = \x00\x00


from https://gitweb.torproject.org/torspec.git/tree/socks-extensions.txt#n49
&gt; 2. Name lookup
&gt; 
&gt; As an extension to SOCKS4A and SOCKS5, Tor implements a new command
&gt; value, "RESOLVE" [F0].  When Tor receives a "RESOLVE" SOCKS command,
&gt; it initiates a remote lookup of the hostname provided as the target
&gt; address in the SOCKS request.  The reply is either an error (if the
&gt; address couldn't be resolved) or a success response.  In the case of
&gt; success, the address is stored in the portion of the SOCKS response
&gt; reserved for remote IP address.
&gt; 
&gt; (We support RESOLVE in SOCKS4 too, even though it is unnecessary.)
&gt; 
&gt; For SOCKS5 only, we support reverse resolution with a new command
&gt; value, "RESOLVE_PTR" [F1]. In response to a "RESOLVE_PTR" SOCKS5
&gt; command with an IPv4 address as its target, Tor attempts to find the
&gt; canonical hostname for that IPv4 record, and returns it in the
&gt; "server bound address" portion of the reply. (This command was not
&gt; supported before Tor 0.1.2.2-alpha.)

The spec leaves multiple open questions:

- What does "initiates a remote lookup of the hostname" mean?
The spec could be improved by saying "A" or/and "AAAA" DNS lookup is performed.

- There is no information about the response in torspec.git/tree/socks-extensions.txt at all?

&gt; Resolve can return an IPv4 or IPv6 response, but Exitmap ignores the
&gt; address type, and turns the first 4 bytes of the response into an
&gt; IPv4 address.

I modified exitmap to print the entire response in case the ATYP field is set to 04 (meaning the
response contains an IPv6 address) but
the response is not any longer and contains only the first 4 bytes of the IPv6 address.

Running tor 0.3.5.8.

Has this bug been fixed in later versions of tor or current master?

 


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190709114000</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-09 11:40:00-0400</timestampReceived><subject>Re: [tor-dev] tor's SOCKS5 extension "RESOLVE"</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


&gt; Running tor 0.3.5.8.
&gt; 
&gt; Has this bug been fixed in later versions of tor or current master?

moved to trac:
https://trac.torproject.org/projects/tor/ticket/31115

-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190815045319</emailId><senderName>grarpamp</senderName><senderEmail>grarpamp@gmail.com</senderEmail><timestampReceived>2019-08-15 04:53:19-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

On 8/14/19, Pop Chunhapanya &lt;pop@cloudflare.com&gt; wrote:
&gt; When deploying an onion service ... the ip address
&gt; of my machine ... is exposed to the Tor network...
&gt; DDoS ... if someone knows my ip address.

Only your tor client, and your guard, knows your ip.
Unless you're up against a malicious guard, that's
not a problem, and if you are, firewalling doesn't
help anything there because you can't prevent
a real "DDoS" or any other modulation from
partitioning or otherwise giving away your onion.
Tor cannot defend against that class of attack.

Note that in a proper "onion only" configuration,
a box should have no inbound ports open.

There is something confusing with your wording.

If these replies don't help, please rephrase your question.

And or sanitize and post your torrc config and
invocation commandline.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190815065300</emailId><senderName>Pop Chunhapanya</senderName><senderEmail>pop@cloudflare.com</senderEmail><timestampReceived>2019-08-15 06:53:00-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; So I'm thinking putting the tor daemon behind some third party TCP proxy
&gt; that will protect me from this kind of DDoS attack.
&gt;
&gt; What do you think if I want to implement a feature that forward all the
&gt; onion service traffic to the TCP proxy before going to the Tor network?
&gt;
&gt; The protocol that I'm thinking is TCP Proxy Protocol [1]
&gt;
&gt; [1] https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
&gt;
&gt;
&gt; You could try the existing HTTPSProxy torrc option?
&gt;
&gt; *HTTPSProxy* host[:port]
&gt;
&gt; Tor will make all its OR (SSL) connections through this host:port (or
&gt; host:443 if port is not specified), via HTTP CONNECT rather than connecting
&gt; directly to servers. You may want to set *FascistFirewall* to restrict
&gt; the set of ports you might try to connect to, if your HTTPS proxy only
&gt; allows connecting to certain ports.
&gt;
&gt;
&gt; Tor also allows an intelligent firewall to filter circuits using a field
&gt; in haproxy protocol format, see *HiddenServiceExportCircuitID* for
&gt; details. But you probably won't need this advanced feature.
&gt;

I feel that HTTPSProxy is too expensive. As far as I know, it needs to do
(1) tcp handshake, (2) tls handshake, and (3) http connect. If I can use
haproxy, it would be just one tcp handshake.

Could I propose another option for haproxy?
I can do it myself. You just review and merge :)

Haxxpop

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;So I'm thinking putting the tor \
daemon behind some third party TCP proxy that will protect me from this kind of DDoS \
attack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What  do you think if I want to implement a feature \
that forward all the  onion service traffic to the TCP proxy before going to the Tor \
network?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The protocol that I'm thinking is TCP Proxy \
Protocol [1]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt" \
target="_blank"&gt;https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;You \
could try the existing HTTPSProxy torrc option?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;dl&gt;&lt;dt \
class="gmail-m_-2116091595766822615hdlist1" style="margin:0px 0px \
10px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:bold;vertical-align:baseline;line-height:28px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;&lt;b \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline"&gt;HTTPSProxy&lt;/b&gt;  &lt;span \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:inherit;font-style:italic;vertical-align:baseline"&gt;host&lt;/span&gt;[:&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:inherit;font-style:italic;vertical-align:baseline"&gt;port&lt;/span&gt;]&lt;/span&gt;&lt;/dt&gt;&lt;dd \
style="margin:0px 0px 18px;padding:0px;border:0px none;outline:currentcolor none \
0px;vertical-align:baseline;line-height:20px"&gt;&lt;p style="margin:0px 0px \
18px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;Tor will make all its OR (SSL) \
connections through this host:port (or host:443 if port is not specified), via HTTP \
CONNECT rather than connecting directly to servers. You may want to set  &lt;b \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline"&gt;FascistFirewall&lt;/b&gt;  to restrict the \
set of ports you might try to connect to, if your HTTPS proxy only allows connecting \
to certain ports.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin:0px 0px 18px;padding:0px;border:0px \
none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin:0px 0px \
18px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;Tor also allows an \
intelligent firewall to filter circuits using a field in haproxy protocol format, see \
&lt;b style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;vertical-align:baseline;background-color:rgba(255,255,255,0)"&gt;HiddenServiceExportCircuitID&lt;/b&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;  for details. But you probably \
won't need this advanced \
feature.&lt;/span&gt;&lt;/p&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I feel that \
HTTPSProxy is too expensive. As far as I know, it needs to do (1) tcp handshake, (2) \
tls handshake, and (3) http connect. If I can use haproxy, it would be just one tcp \
handshake.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Could I propose another option for \
haproxy?&lt;/div&gt;&lt;div&gt;I can do it myself. You just review and merge \
:)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Haxxpop&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190711135900</emailId><senderName>nusenu</senderName><senderEmail>nusenu-lists@riseup.net</senderEmail><timestampReceived>2019-07-11 13:59:00-0400</timestampReceived><subject>[tor-dev] resolving DNS TXT records?</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Hi,
as far as I can tell there is no way for a tor client to ask an exit to resolve
a given TXT record and to provide the answer for it.

Just wanted to make sure there is even no hack around that limitation.

thanks,
nusenu



https://gitweb.torproject.org/torspec.git/tree/proposals/219-expanded-dns.txt


-- 
https://twitter.com/nusenu_
https://mastodon.social/@nusenu


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190725151656</emailId><senderName>David Goulet</senderName><senderEmail>dgoulet@torproject.org</senderEmail><timestampReceived>2019-07-25 15:16:56-0400</timestampReceived><subject>[tor-dev] Proposal 306: Onion Balance Support for Onion Service v3</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Greetings!

Around 4 months ago, nickm published a proposal draft for OnionBalance to
support onion services v3.

Due to #29583, it turns out that we can afterall take the easy approach which
is basically how OnionBalance is working today for v2 but transposed to v3.
See the ticket for the reasons why for now we'll proceed this way.

However, we all agreed that #29583 is a "must fix at some point" meaning that
OnionBalance v3 will then become much more complicated. In order to not forget
about it, I'm reviving nickm's proposal as prop306 so we have the draft in
torspec.git.

See attachement for the proposal.

Cheers!
David

-- 
vjZrE+FHHEPpllrbcUukx7LtWFzk066L23yoggvnmso=

["306-onionbalance-v3.txt" (text/plain)]

Filename: 306-onionbalance-v3.txt
Title: Onion Balance Support for Onion Service v3
Author: Nick Mathewson
Created: 03-April-2019
Status: Draft

0. Draft Notes

   2019-07-25:

      At this point in time, the cross-certification is not implemented
      correctly in &gt;= tor-0.3.2.1-alpha. See https://trac.torproject.org/29583
      for more details.

      This proposal assumes that this bug is fixed.

1. Introduction

   The OnionBalance tool allows several independent Tor instances to host an
   onion service, while clients can access that onion service without having
   to take its distributed status into account. OnionBalance works by having
   each instance run a separate onion service. Then, a management server
   periodically downloads the descriptors from those onion services, and
   generates a new descriptor containing the introduction points from each
   instance's onion service.

   OnionBalance is used by several high-profile onion services, including
   Facebook and The Tor Project.

   Unfortunately, because of the cross-certification features in v3 onion
   services, OnionBalance no longer works for them. To a certain extent, this
   breakage is because of a security improvement: It's probably a good thing
   that random third parties can no longer grab a onion service's introduction
   points and claim that they are introduction points for a different service.
   But nonetheless, a lack of a working OnionBalance remains an obstacle for
   v3 onion service migration.

   This proposal describes extensions to v3 onion service design to
   accommodate OnionBalance.

2. Background and Solution

   If an OnionBalance management server wants to provide an aggregate
   descriptor for a v3 onion service, it faces several obstacles that it
   didn't have in v2.

   When the management server goes to construct an aggregated descriptor, it
   will have a mismatch on the "auth-key", "enc-key-cert", and
   "legacy-key-cert" fields: these fields are supposed to certify the onion
   service's current descriptor-signing key, but each of these keys will be
   generated independently by each instance. Because they won't match each
   other, there is no possible key that the aggregated descriptor could use
   for its descriptor signing key.

   In this design, we require that each instance should know in advance about
   a descriptor-signing public key that the aggregate descriptor will use for
   each time period. (I'll explain how they can do this later, in section 3
   below.) They don't have to know the corresponding private key.

   When generating their own onion service descriptors for a given time
   period, the instances generate these additional fields to be used for the
   aggregate descriptor:

       "meta-auth-key"
       "meta-enc-key-cert"
       "meta-legacy-key-cert"

   These fields correspond to "auth-key", "enc-key-cert", and
   "legacy-key-cert" respectively, but differ in one regard: the
   descriptor-signing public key that they certify is _not_ the instance's own
   descriptor-signing key, but rather the aggregate public key for the time
   period.

   Ordinary clients ignore these new fields.

   When the management server creates the aggregate descriptor, it checks that
   the signing key for each of these "meta" fields matches the signing key for
   its corresponding non-"meta" field, and that they certify the correct
   descriptor-signing key-- and then uses these fields in place of their
   corresponding non-"meta" variants.

2.1. A quick note on synchronization

   In the design above, and in the section below, I frequently refer to "the
   current time period". By this, I mean the time period for which the
   descriptor is encoded, not the time period in which it is generated.

   Instances and management servers should generate descriptors for the two
   closest time periods, as they do today: no additional synchronization
   should needed here.

3. How to distribute descriptor-signing keys

   The design requires that every instance of the onion service knows about
   the public descriptor-signing key that will be used for the aggregate onion
   service. Here I'll discuss how this can be achieved.

3.1. If the instances are trusted.

   If the management server trusts each of the instances, it can distribute a
   shared secret to each one of them, and use this shared secret to derive
   each time period's private key.

   For example, if the shared secret is SK, then the private descriptor-
   signing key for each time period could be derived as:

        H("meta-descriptor-signing-key-deriv" |
           onion_service_identity
           INT_8(period_num) |
           INT_8(period_length) |
           SK )

   (Remember that in the terminology of rend-spec-v3, INT_8() denotes a 64-bit
   integer, see section 0.2 in rend-spec-v3.txt.)

   If shared secret is ever compromised, then an attacker can impersonate the
   onion service until the shared secret is changed, and can correlate all
   past descriptors for the onion service.

3.2. If the instances are not trusted: Option One

   If the management server does not trust the instances with
   descriptor-signing public keys, another option for it is to simply
   distribute a load of public keys in advance, and use them according to a
   schedule.

   In this design, the management server would pre-generate the
   "descriptor-signing-key-cert" fields for a long time in advance, and
   distribute them to the instances offline. Each one would be
   associated with its corresponding time period.

   If these certificates were revealed to an attacker, the attacker
   could correlate descriptors for the onion service with one another,
   but could not impersonate the service.

3.3. If the instances are not trusted: Option Two

   Another option for the trust model of 3.2 above is to use the same
   key-blinding method as used for v3 onion services. The management server
   would hold a private descriptor-signing key, and use it to derive a
   different private descriptor-signing key for each time period. The instance
   servers would hold the corresponding public key, and use it to derive a
   different public descriptor-signing key for each time period.

   (For security, the key-blinding function in this case should use a
   different nonce than used in the)

   This design would allow the instances to only be configured once, which
   would be simpler than 3.2 above-- but at a cost. The management server's
   use of a long-term private descriptor-signing key would require it to keep
   that key online. (It could keep the derived private descriptor-signing keys
   online, but the parent key could be derived from them.)

   Here, if the instance's knowledge were revealed to an attack, the attacker
   could correlate descriptors for the onion service with one another, but
   could not impersonate the service.

4. Some features of this proposal

   We retain the property that each instance service remains accessible as a
   working onion service. However, anyone who can access it can identify it as
   an instance of an OnionBalance service, and correlate its descriptor to the
   aggregate descriptor.

   Instances could use client authorization to ensure that only the management
   server can decrypt their introduction points. However, because of the
   key-blinding features of v3 onion services, nobody who doesn't know the
   onion addresses for the instances can access them anyway: It would be
   sufficient to keep these addresses secret.

   Although anybody who successfully accesses an instance can correlate its
   descriptor to the meta-descriptor, this only works for two descriptors
   within a single time period: You can't match an instance descriptor from
   one time period to a meta-descriptor from another.

A. Acknowledgments

   Thanks to the network team for helping me clarify my ideas here, explore
   options, and better understand some of the implementations and challenges
   in this problem space.

["signature.asc" (application/pgp-signature)]
[Attachment #9 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190727021827</emailId><senderName>Pordeshi Pothik</senderName><senderEmail>mahadihasan62712@gmail.com</senderEmail><timestampReceived>2019-07-27 02:18:27-0400</timestampReceived><subject>[tor-dev] Hack</subject><body>

[Attachment #2 (multipart/alternative)]


Hi,I want to learn how to hack facebook.

[Attachment #5 (text/html)]

&lt;div dir="auto"&gt;Hi,I want to learn how to hack facebook.&lt;/div&gt;

[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190729114432</emailId><senderName></senderName><senderEmail>clive.jenson@tutanota.com</senderEmail><timestampReceived>2019-07-29 11:44:32-0400</timestampReceived><subject>[tor-dev] What hidden services does my relay node know about?</subject><body>

[Attachment #2 (multipart/alternative)]


I built tor from source and am running it as a relay (not exit node) and also as a \
directory server. It is my understanding that after a while I should experience V2 \
hidden services publishing their descriptors to me (each hidden service picks 6 \
directory servers at random to publish their descriptor to). How can I tell if this \
is happening? Can I (temporarily, for debugging purposes) view the descriptors being \
published to me?


I'm thinking their might be some useful logging if I enable debug logs (but I can't \
find it)? Or maybe there is something I can get over the control protocol (but I \
couldn't find anything obvious in the stem API docs that exposes it)? Or maybe I \
could make a code change to log this information (I'm not sure where the code is that \
receives the announcements)?


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
&lt;p style="box-sizing: inherit; user-select: text !important; \
-webkit-tap-highlight-color: rgba(0, 0, 0, 0); margin: 0px 0px 1em; padding: 0px; \
border: 0px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: \
normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-weight: \
400; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: \
both; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; \
text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; \
-webkit-text-stroke-width: 0px; text-decoration-style: initial; \
text-decoration-color: initial;"&gt;&lt;span class="highlight" \
style="background-color:rgb(255, 255, 255)"&gt;&lt;span class="colour" style="color:rgb(36, \
39, 41)"&gt;&lt;span class="font" style="font-family:Arial, "Helvetica Neue", \
Helvetica, sans-serif"&gt;&lt;span class="size" style="font-size:15px"&gt;I built tor from \
source and am running it as a relay (not exit node) and also as a directory server. \
It is my understanding that after a while I should experience V2 hidden services \
publishing their descriptors to me (each hidden service picks 6 directory servers at \
random to publish their descriptor to). How can I tell if this is happening? Can I \
(temporarily, for debugging purposes) view the descriptors being published to \
me?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&lt;p style="box-sizing: inherit; user-select: \
text !important; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); margin: 0px 0px 1em; \
padding: 0px; border: 0px; font-style: normal; font-variant-ligatures: normal; \
font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: \
inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; \
vertical-align: baseline; clear: both; letter-spacing: normal; orphans: 2; \
text-align: left; text-indent: 0px; text-transform: none; white-space: normal; \
widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-style: \
initial; text-decoration-color: initial;"&gt;&lt;span class="highlight" \
style="background-color:rgb(255, 255, 255)"&gt;&lt;span class="colour" style="color:rgb(36, \
39, 41)"&gt;&lt;span class="font" style="font-family:Arial, "Helvetica Neue", \
Helvetica, sans-serif"&gt;&lt;span class="size" style="font-size:15px"&gt;I'm thinking their \
might be some useful logging if I enable debug logs (but I can't find it)? Or maybe \
there is something I can get over the control protocol (but I couldn't find anything \
obvious in the stem API docs that exposes it)? Or maybe I could make a code change to \
log this information (I'm not sure where the code is that receives the \
announcements)?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/p&gt;  &lt;/body&gt; &lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190729120856</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2019-07-29 12:08:56-0400</timestampReceived><subject>Re: [tor-dev] What hidden services does my relay node know about?</subject><body>

On 7/29/19 07:44, clive.jenson@tutanota.com wrote:
&gt; I built tor from source and am running it as a relay (not exit node) and
&gt; also as a directory server. It is my understanding that after a while I
&gt; should experience V2 hidden services publishing their descriptors to me
&gt; (each hidden service picks 6 directory servers at random to publish
&gt; their descriptor to). How can I tell if this is happening? Can I
&gt; (temporarily, for debugging purposes) view the descriptors being
&gt; published to me?
&gt; 
&gt; I'm thinking their might be some useful logging if I enable debug logs
&gt; (but I can't find it)? Or maybe there is something I can get over the
&gt; control protocol (but I couldn't find anything obvious in the stem API
&gt; docs that exposes it)? Or maybe I could make a code change to log this
&gt; information (I'm not sure where the code is that receives the
&gt; announcements)?
&gt; 

Onion services will use your relay to store descriptors once it has the
HSDir flag. You can't determine which onion services or how many onion
services are using you without code changes.

Doing this is considered being a malicious relay and will get your relay
removed from the Tor network.

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190729124236</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2019-07-29 12:42:36-0400</timestampReceived><subject>Re: [tor-dev] What hidden services does my relay node know about?</subject><body>

On 7/29/19 08:08, Matt Traudt wrote:
&gt; On 7/29/19 07:44, clive.jenson@tutanota.com wrote:
&gt;&gt; I built tor from source and am running it as a relay (not exit node) and
&gt;&gt; also as a directory server. It is my understanding that after a while I
&gt;&gt; should experience V2 hidden services publishing their descriptors to me
&gt;&gt; (each hidden service picks 6 directory servers at random to publish
&gt;&gt; their descriptor to). How can I tell if this is happening? Can I
&gt;&gt; (temporarily, for debugging purposes) view the descriptors being
&gt;&gt; published to me?
&gt;&gt;
&gt;&gt; I'm thinking their might be some useful logging if I enable debug logs
&gt;&gt; (but I can't find it)? Or maybe there is something I can get over the
&gt;&gt; control protocol (but I couldn't find anything obvious in the stem API
&gt;&gt; docs that exposes it)? Or maybe I could make a code change to log this
&gt;&gt; information (I'm not sure where the code is that receives the
&gt;&gt; announcements)?
&gt;&gt;
&gt; 
&gt; Onion services will use your relay to store descriptors once it has the
&gt; HSDir flag. You can't determine which onion services or how many onion
&gt; services are using you without code changes.
&gt; 
&gt; Doing this is considered being a malicious relay and will get your relay
&gt; removed from the Tor network.
&gt; 

If this question came up and was sent to tor-dev@ because you intend to
perform research: it may be prudent to stop what you're doing and
content the Research Safety Board.

https://research.torproject.org/safetyboard/

If you're just a curious relay operator that reached out to tor-dev@:
everything is fine, thanks for running a relay, and don't start
modifying Tor or logging traffic for "debugging purposes" as you might
put yourself or Tor users in risk. Mail tor-relays@, or hop on #tor or
#tor-relays on OFTC if something seems wrong. (Your relay looks fine,
except consider setting your ContactInfo
https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F8C00BF8)

Matt
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190729150913</emailId><senderName></senderName><senderEmail>clive.jenson@tutanota.com</senderEmail><timestampReceived>2019-07-29 15:09:13-0400</timestampReceived><subject>Re: [tor-dev] What hidden services does my relay node know about?</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; &gt; Onion services will use your relay to store descriptors once it has the
&gt; &gt; HSDir flag. 
&gt; &gt; 
&gt; https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F8C00BF8 \
&gt; &lt;https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F8C00BF8&gt;&gt; \
&gt; ) 

Is the HSDir flag the same as V2Dir, or something different? You correctly identified \
my relay. I see it is a V2Dir but do not know how to determine if it is a HSDir.

&gt; &gt; You can't determine which onion services or how many onion
&gt; &gt; services are using you without code changes.
&gt; &gt; 
&gt; &gt; Doing this is considered being a malicious relay and will get your relay
&gt; &gt; removed from the Tor network.
&gt; &gt; 
&gt; If this question came up and was sent to tor-dev@ because you intend to
&gt; perform research: it may be prudent to stop what you're doing and
&gt; content the Research Safety Board.
&gt; 
&gt; https://research.torproject.org/safetyboard/
&gt; 
I'm just a curious user, this is not part of a formal research project.   Is there a \
public tor testnet that I could have joined my node to for this sort of \
experimentation (I don't have the resources to build my own)? I can understand why \
you don't want production nodes logging data that could potentially cause harm to \
other network users, but also do not think curious users should be discouraged from \
poking around in the code.


[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;
    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
&lt;div style="16px" text-align="left"&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote class="tutanota_quote" \
style="border-left: 1px solid #93A3B8; padding-left: 10px; margin-left: \
5px;"&gt;&lt;blockquote&gt;&lt;div style="16px" text-align="left"&gt;Onion services will use your \
relay to store descriptors once it has the&lt;br&gt;&lt;/div&gt;&lt;div style="16px" \
text-align="left"&gt;HSDir flag. &lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style="16px"&gt;&lt;a \
href="https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F \
8C00BF8"&gt;https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F8C00BF8&lt;/a&gt;)&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
style="16px" text-align="left"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;Is the \
HSDir flag the same as V2Dir, or something different? You correctly identified my \
relay. I see it is a V2Dir but do not know how to determine if it is a \
HSDir.&lt;br&gt;&lt;/div&gt;&lt;blockquote class="tutanota_quote" style="border-left: 1px solid \
#93A3B8; padding-left: 10px; margin-left: 5px;"&gt;&lt;blockquote&gt;&lt;div style="16px" \
text-align="left"&gt;You can't determine which onion services or how many \
onion&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;services are using you without \
code changes.&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
style="16px" text-align="left"&gt;Doing this is considered being a malicious relay and \
will get your relay&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;removed from the Tor \
network.&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div style="16px" text-align="left"&gt;If this question \
came up and was sent to tor-dev@ because you intend to&lt;br&gt;&lt;/div&gt;&lt;div style="16px" \
text-align="left"&gt;perform research: it may be prudent to stop what you're doing \
and&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;content the Research Safety \
Board.&lt;br&gt;&lt;/div&gt;&lt;div style="16px" text-align="left"&gt;&lt;br&gt;&lt;/div&gt;&lt;div style="16px" \
text-align="left"&gt;https://research.torproject.org/safetyboard/&lt;br&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div \
style="16px" text-align="left"&gt;I'm just a curious user, this is not part of a formal \
research project.  Is there a public tor testnet that I could have joined my \
node to for this sort of experimentation (I don't have the resources to build my \
own)? I can understand why you don't want production nodes logging data that could \
potentially cause harm to other network users, but also do not think curious users \
should be discouraged from poking around in the code.&lt;br&gt;&lt;/div&gt;&lt;div style="16px" \
text-align="left"&gt;&lt;br&gt;&lt;/div&gt;  &lt;/body&gt; &lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190725163519</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@freehaven.net</senderEmail><timestampReceived>2019-07-25 16:35:19-0400</timestampReceived><subject>Re: [tor-dev] Proposal 306: Onion Balance Support for Onion Service v3</subject><body>

On Thu, Jul 25, 2019 at 11:17 AM David Goulet &lt;dgoulet@torproject.org&gt; wrote:
&gt;
&gt; Greetings!
&gt;
&gt; Around 4 months ago, nickm published a proposal draft for OnionBalance to
&gt; support onion services v3.
&gt;
&gt; Due to #29583, it turns out that we can afterall take the easy approach which
&gt; is basically how OnionBalance is working today for v2 but transposed to v3.
&gt; See the ticket for the reasons why for now we'll proceed this way.
&gt;
&gt; However, we all agreed that #29583 is a "must fix at some point" meaning that
&gt; OnionBalance v3 will then become much more complicated. In order to not forget
&gt; about it, I'm reviving nickm's proposal as prop306 so we have the draft in
&gt; torspec.git.
&gt;
&gt; See attachement for the proposal.
&gt;
&gt; Cheers!
&gt; David

Please use 307 for this; I think 306 is in use.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190815085111</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-15 08:51:11-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Haxxpop,

&gt; On 15 Aug 2019, at 16:53, Pop Chunhapanya &lt;pop@cloudflare.com&gt; wrote:
&gt; 
&gt; 
&gt; &gt; &gt; So I'm thinking putting the tor daemon behind some third party TCP proxy that \
&gt; &gt; &gt; will protect me from this kind of DDoS attack. 
&gt; &gt; &gt; What do you think if I want to implement a feature that forward all the onion \
&gt; &gt; &gt; service traffic to the TCP proxy before going to the Tor network? 
&gt; &gt; &gt; The protocol that I'm thinking is TCP Proxy Protocol [1]
&gt; &gt; &gt; 
&gt; &gt; &gt; [1] https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
&gt; &gt; 
&gt; &gt; You could try the existing HTTPSProxy torrc option?
&gt; &gt; 
&gt; &gt; HTTPSProxy host[:port]
&gt; &gt; Tor will make all its OR (SSL) connections through this host:port (or host:443 if \
&gt; &gt; port is not specified), via HTTP CONNECT rather than connecting directly to \
&gt; &gt; servers. You may want to set FascistFirewall to restrict the set of ports you \
&gt; &gt; might try to connect to, if your HTTPS proxy only allows connecting to certain \
&gt; &gt; ports. 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; Tor also allows an intelligent firewall to filter circuits using a field in \
&gt; &gt; haproxy protocol format, see HiddenServiceExportCircuitID for details. But you \
&gt; &gt; probably won't need this advanced feature. 
&gt; 
&gt; I feel that HTTPSProxy is too expensive. As far as I know, it needs to do (1) tcp \
&gt; handshake, (2) tls handshake, and (3) http connect. If I can use haproxy, it would \
&gt; be just one tcp handshake. 
&gt; Could I propose another option for haproxy?
&gt; I can do it myself. You just review and merge :)

Sure, I suggest you use this torrc option format:

TCPProxy protocol host:port

Tor will use the given protocol to make all its OR (SSL) connections through a TCP \
proxy on host:port, rather than connecting directly to servers. You may want to set \
FascistFirewall to restrict the set of ports you might try to connect to, if your \
proxy only allows connecting to certain ports. There is no equivalent option for \
directory connections, because all Tor client versions that support this option \
download directory documents via OR connections.

The only protocol supported right now 'haproxy'. This option is only for clients. \
(Default: none)

The haproxy protocol works in the following way: when the feature is enabled, the Tor \
process will write a header line on every outbound connection. The header is in the \
following format:  "PROXY" [ "TCP4" | "TCP6" ] SourceIPAddress DestinationIPAddress \
SourcePort DestinationPort "\r\n" There is a single space after each item, except for \
the last item, which is followed by a CRLF.

After parsing a correctly-formatted PROXY line, the haproxy connects to \
DestinationIPAddress:DestinationPort, and forwards all subsequent data to the \
destination. Any data sent by the destination is forwarded by haproxy to the Tor \
client.

The HAProxy version 1 proxy protocol is described in detail at \
https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt

I don't think you'll need to implement a TCPProxyAuthenticator option.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi \
Haxxpop,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;On 15 Aug 2019, at 16:53, Pop \
Chunhapanya &lt;&lt;a href="mailto:pop@cloudflare.com"&gt;pop@cloudflare.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;blockquote type="cite"&gt;&lt;div \
dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;So I'm thinking putting the tor daemon \
behind some third party TCP proxy that will protect me from this kind of DDoS \
attack.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;What  do you think if I want to implement a feature \
that forward all the  onion service traffic to the TCP proxy before going to the Tor \
network?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The protocol that I'm thinking is TCP Proxy \
Protocol [1]&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;[1] &lt;a \
href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt" \
target="_blank"&gt;https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;You \
could try the existing HTTPSProxy torrc option?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;dl&gt;&lt;dt \
class="gmail-m_-2116091595766822615hdlist1" style="margin:0px 0px \
10px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:bold;vertical-align:baseline;line-height:28px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;&lt;b \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline"&gt;HTTPSProxy&lt;/b&gt; &lt;span \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:inherit;font-style:italic;vertical-align:baseline"&gt;host&lt;/span&gt;[:&lt;span \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-weight:inherit;font-style:italic;vertical-align:baseline"&gt;port&lt;/span&gt;]&lt;/span&gt;&lt;/dt&gt;&lt;dd \
style="margin:0px 0px 18px;padding:0px;border:0px none;outline:currentcolor none \
0px;vertical-align:baseline;line-height:20px"&gt;&lt;p style="margin:0px 0px \
18px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;Tor will make all its OR (SSL) \
connections through this host:port (or host:443 if port is not specified), via HTTP \
CONNECT rather than connecting directly to servers. You may want to set &lt;b \
style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline"&gt;FascistFirewall&lt;/b&gt; to restrict \
the set of ports you might try to connect to, if your HTTPS proxy only allows \
connecting to certain ports.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin:0px 0px \
18px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin:0px 0px \
18px;padding:0px;border:0px none;outline:currentcolor none \
0px;font-style:inherit;vertical-align:baseline;line-height:20px"&gt;Tor also allows an \
intelligent firewall to filter circuits using a field in haproxy protocol format, \
see &lt;b style="margin:0px;padding:0px;border:0px none;outline:currentcolor none \
0px;vertical-align:baseline;background-color:rgba(255,255,255,0)"&gt;HiddenServiceExportCircuitID&lt;/b&gt;&lt;span \
style="background-color:rgba(255,255,255,0)"&gt; for details. But you probably \
won't need this advanced \
feature.&lt;/span&gt;&lt;/p&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I feel that \
HTTPSProxy is too expensive. As far as I know, it needs to do (1) tcp handshake, (2) \
tls handshake, and (3) http connect. If I can use haproxy, it would be just one tcp \
handshake.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Could I propose another option for \
haproxy?&lt;/div&gt;&lt;div&gt;I can do it myself. You just review and merge \
:)&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;Sure, I suggest you use this torrc \
option format:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p style="margin: 0px; font-stretch: normal; \
font-size: 12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span \
style="font-size: 12pt;"&gt;TCPProxy protocol host:port&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; \
font-stretch: normal; font-size: 12px; line-height: normal; font-family: \
Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; \
font-stretch: normal; font-size: 12px; line-height: normal; font-family: \
Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;Tor will use the given protocol to make \
all its OR (SSL) connections through a TCP proxy on host:port, rather than connecting \
directly to servers. You may want to set FascistFirewall to restrict the set of ports \
you might try to connect to, if your proxy only allows connecting to certain ports. \
There is no equivalent option for directory connections, because all Tor client \
versions that support this option download directory documents via OR \
connections.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;The only \
protocol supported right now 'haproxy'. This option is only for clients. (Default: \
none)&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;The \
haproxy protocol works in the following way: when the feature is enabled, the Tor \
process will write a header line on every outbound connection. The header is in the \
following format:&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: \
12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
12pt;"&gt;   "PROXY" [ "TCP4" | "TCP6" ] SourceIPAddress DestinationIPAddress \
SourcePort DestinationPort "\r\n"&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: \
normal; font-size: 12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span \
style="font-size: 12pt;"&gt;There is a single space after each item, except for the last \
item, which is followed by a CRLF.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: \
normal; font-size: 12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span \
style="font-size: 12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; \
font-size: 12px; line-height: normal; font-family: Helvetica;"&gt;&lt;span \
style="font-size: 12pt;"&gt;After parsing a correctly-formatted PROXY line, the haproxy \
connects to DestinationIPAddress:DestinationPort, and forwards all subsequent data to \
the destination. Any data sent by the destination is forwarded by haproxy to the Tor \
client.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
12pt;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; font-size: 12px; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: 12pt;"&gt;The \
HAProxy version 1 proxy protocol is described in detail at &lt;a \
href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt"&gt;https://www.haproxy \
.org/download/1.8/doc/proxy-protocol.txt&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p \
style="margin: 0px; font-stretch: normal; line-height: normal; font-family: \
Helvetica;"&gt;&lt;span style="font-size: 16px;"&gt;I don't think you'll need to implement a \
TCPProxyAuthenticator option.&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; \
line-height: normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
16px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="margin: 0px; font-stretch: normal; line-height: \
normal; font-family: Helvetica;"&gt;&lt;span style="font-size: \
16px;"&gt;T&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190729220101</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2019-07-29 22:01:01-0400</timestampReceived><subject>[tor-dev] 24 hours worth of BridgeDB usage metrics</subject><body>

Over at &lt;https://bugs.torproject.org/9316&gt;, we are working on having
BridgeDB export metrics.  The patch is almost done and I deployed the
work-in-progress code on BridgeDB, so we can take a look at the metrics
and think of ways to improve them.  The metrics format encodes the
approximate number of requests per distribution mechanism per transport
per country per success/fail.  All numbers are rounded up to the next
multiple of 10.  The last field, "none", will be used for an anomaly
score and is currently unused.

For example, the line

  bridgedb-metric-count email.obfs4.riseup.success.none 10

tells us that there have been 1-10 successful email requests for obfs4
coming from Riseup addresses.

I attached 24 hours worth of metrics to this email.  Keep the following
issues in mind:

* My feature branch hasn't been reviewed yet and likely still has bugs,
  so take all numbers with a grain of salt.

* The country codes are based on Debian stretch's geoip-database, which
  is slightly outdated and uses Maxmind's far-from-perfect GeoLite
  database.

* The country code "??" refers to geo-location failure or lack of IP
  addresses (in the cast of moat).  The country code "zz" refers to a
  request from a Tor exit relay.

Some observations:

* Gmail sees much more use than Riseup.  That's no surprise.

* The email distributor sees more vanilla than obfs4 requests.
  I wonder to what degree this is caused by the poor UX of the email
  distributor.

* For HTTPS, many countries have a fail and success bucket of 10 each.
  I would expect this to be at least one user who failed the captcha at
  least once before finally getting it right.

* The captcha success rate for obfs4 over moat is 54%.  That's very low
  and must cause lots of frustration for users.  This is a known issue
  that's tracked in this ticket: &lt;https://bugs.torproject.org/29695&gt;

* Ignore the large amount of HTTPS requests from "zz" -- I expect the
  vast majority of these to be a bot that's interacting with BridgeDB
  over exit relays.

After a cursory look at the numbers, I would like to aggregate the data,
to make it easier to compare distributors, transports, and countries.
For example: how do moat, email, and HTTPS rank in popularity?  I'll
improve the patch to keep track of these numbers in separate metrics.

Any thoughts or suggestions?

Cheers,
Philipp

["bridgedb-metrics.log" (text/plain)]

bridgedb-stats-end 2019-07-28 22:15:02 (86400 s)
bridgedb-metric-count email.fte.gmail.success.none 30
bridgedb-metric-count email.obfs3.gmail.success.none 10
bridgedb-metric-count email.obfs3.riseup.success.none 10
bridgedb-metric-count email.obfs4.gmail.fail.none 10
bridgedb-metric-count email.obfs4.gmail.success.none 70
bridgedb-metric-count email.obfs4.riseup.fail.none 10
bridgedb-metric-count email.obfs4.riseup.success.none 10
bridgedb-metric-count email.obs4.gmail.fail.none 10
bridgedb-metric-count email.obs4.gmail.success.none 10
bridgedb-metric-count email.obsf4.gmail.success.none 10
bridgedb-metric-count email.scramblesuit.gmail.fail.none 10
bridgedb-metric-count email.scramblesuit.gmail.success.none 10
bridgedb-metric-count email.vanilla.gmail.fail.none 60
bridgedb-metric-count email.vanilla.gmail.success.none 170
bridgedb-metric-count email.vanilla.riseup.success.none 10
bridgedb-metric-count https.fte.??.fail.none 10
bridgedb-metric-count https.fte.??.success.none 10
bridgedb-metric-count https.fte.by.success.none 10
bridgedb-metric-count https.fte.fr.success.none 10
bridgedb-metric-count https.fte.gb.fail.none 10
bridgedb-metric-count https.fte.ru.success.none 10
bridgedb-metric-count https.fte.us.fail.none 10
bridgedb-metric-count https.fte.us.success.none 10
bridgedb-metric-count https.fte.zz.fail.none 10
bridgedb-metric-count https.fte.zz.success.none 10
bridgedb-metric-count https.obfs2.jp.fail.none 10
bridgedb-metric-count https.obfs2.us.fail.none 10
bridgedb-metric-count https.obfs2.zz.fail.none 130
bridgedb-metric-count https.obfs2.zz.success.none 6270
bridgedb-metric-count https.obfs3.??.fail.none 10
bridgedb-metric-count https.obfs3.??.success.none 10
bridgedb-metric-count https.obfs3.by.fail.none 10
bridgedb-metric-count https.obfs3.by.success.none 10
bridgedb-metric-count https.obfs3.ca.fail.none 10
bridgedb-metric-count https.obfs3.ca.success.none 10
bridgedb-metric-count https.obfs3.ch.success.none 10
bridgedb-metric-count https.obfs3.cn.fail.none 10
bridgedb-metric-count https.obfs3.cn.success.none 10
bridgedb-metric-count https.obfs3.de.success.none 10
bridgedb-metric-count https.obfs3.fr.fail.none 10
bridgedb-metric-count https.obfs3.fr.success.none 10
bridgedb-metric-count https.obfs3.hk.fail.none 10
bridgedb-metric-count https.obfs3.kz.fail.none 10
bridgedb-metric-count https.obfs3.kz.success.none 10
bridgedb-metric-count https.obfs3.ru.fail.none 10
bridgedb-metric-count https.obfs3.ru.success.none 10
bridgedb-metric-count https.obfs3.tw.success.none 10
bridgedb-metric-count https.obfs3.ua.fail.none 10
bridgedb-metric-count https.obfs3.us.fail.none 10
bridgedb-metric-count https.obfs3.us.success.none 10
bridgedb-metric-count https.obfs3.zz.fail.none 180
bridgedb-metric-count https.obfs3.zz.success.none 6240
bridgedb-metric-count https.obfs4.??.fail.none 130
bridgedb-metric-count https.obfs4.??.success.none 70
bridgedb-metric-count https.obfs4.at.fail.none 20
bridgedb-metric-count https.obfs4.at.success.none 30
bridgedb-metric-count https.obfs4.au.fail.none 10
bridgedb-metric-count https.obfs4.au.success.none 10
bridgedb-metric-count https.obfs4.bd.fail.none 10
bridgedb-metric-count https.obfs4.bd.success.none 10
bridgedb-metric-count https.obfs4.be.success.none 10
bridgedb-metric-count https.obfs4.br.fail.none 10
bridgedb-metric-count https.obfs4.br.success.none 10
bridgedb-metric-count https.obfs4.by.fail.none 10
bridgedb-metric-count https.obfs4.by.success.none 10
bridgedb-metric-count https.obfs4.ca.fail.none 10
bridgedb-metric-count https.obfs4.ca.success.none 10
bridgedb-metric-count https.obfs4.ch.fail.none 10
bridgedb-metric-count https.obfs4.ch.success.none 10
bridgedb-metric-count https.obfs4.cn.fail.none 100
bridgedb-metric-count https.obfs4.cn.success.none 10
bridgedb-metric-count https.obfs4.co.success.none 10
bridgedb-metric-count https.obfs4.cu.fail.none 10
bridgedb-metric-count https.obfs4.cz.success.none 10
bridgedb-metric-count https.obfs4.de.fail.none 10
bridgedb-metric-count https.obfs4.de.success.none 20
bridgedb-metric-count https.obfs4.ee.success.none 10
bridgedb-metric-count https.obfs4.eg.fail.none 10
bridgedb-metric-count https.obfs4.eg.success.none 10
bridgedb-metric-count https.obfs4.fr.fail.none 20
bridgedb-metric-count https.obfs4.fr.success.none 20
bridgedb-metric-count https.obfs4.gb.fail.none 40
bridgedb-metric-count https.obfs4.gb.success.none 30
bridgedb-metric-count https.obfs4.hk.success.none 10
bridgedb-metric-count https.obfs4.hu.success.none 10
bridgedb-metric-count https.obfs4.in.fail.none 10
bridgedb-metric-count https.obfs4.in.success.none 10
bridgedb-metric-count https.obfs4.it.fail.none 10
bridgedb-metric-count https.obfs4.it.success.none 10
bridgedb-metric-count https.obfs4.jp.fail.none 10
bridgedb-metric-count https.obfs4.jp.success.none 10
bridgedb-metric-count https.obfs4.kz.fail.none 10
bridgedb-metric-count https.obfs4.kz.success.none 20
bridgedb-metric-count https.obfs4.lv.success.none 10
bridgedb-metric-count https.obfs4.md.success.none 10
bridgedb-metric-count https.obfs4.mx.success.none 10
bridgedb-metric-count https.obfs4.ng.success.none 10
bridgedb-metric-count https.obfs4.nl.success.none 10
bridgedb-metric-count https.obfs4.ph.success.none 10
bridgedb-metric-count https.obfs4.pl.fail.none 10
bridgedb-metric-count https.obfs4.pl.success.none 10
bridgedb-metric-count https.obfs4.ro.fail.none 10
bridgedb-metric-count https.obfs4.ro.success.none 10
bridgedb-metric-count https.obfs4.ru.fail.none 30
bridgedb-metric-count https.obfs4.ru.success.none 30
bridgedb-metric-count https.obfs4.sc.success.none 10
bridgedb-metric-count https.obfs4.se.fail.none 10
bridgedb-metric-count https.obfs4.se.success.none 10
bridgedb-metric-count https.obfs4.sg.fail.none 10
bridgedb-metric-count https.obfs4.sg.success.none 10
bridgedb-metric-count https.obfs4.tr.success.none 10
bridgedb-metric-count https.obfs4.tw.success.none 10
bridgedb-metric-count https.obfs4.ua.fail.none 10
bridgedb-metric-count https.obfs4.ua.success.none 10
bridgedb-metric-count https.obfs4.us.fail.none 380
bridgedb-metric-count https.obfs4.us.success.none 70
bridgedb-metric-count https.obfs4.ve.success.none 10
bridgedb-metric-count https.obfs4.zz.fail.none 580
bridgedb-metric-count https.obfs4.zz.success.none 6520
bridgedb-metric-count https.scramblesuit.??.fail.none 10
bridgedb-metric-count https.scramblesuit.??.success.none 10
bridgedb-metric-count https.scramblesuit.at.success.none 10
bridgedb-metric-count https.scramblesuit.br.fail.none 10
bridgedb-metric-count https.scramblesuit.br.success.none 10
bridgedb-metric-count https.scramblesuit.by.success.none 10
bridgedb-metric-count https.scramblesuit.ch.success.none 10
bridgedb-metric-count https.scramblesuit.co.success.none 10
bridgedb-metric-count https.scramblesuit.fr.success.none 10
bridgedb-metric-count https.scramblesuit.gb.fail.none 10
bridgedb-metric-count https.scramblesuit.gb.success.none 10
bridgedb-metric-count https.scramblesuit.jp.fail.none 10
bridgedb-metric-count https.scramblesuit.jp.success.none 10
bridgedb-metric-count https.scramblesuit.ng.success.none 10
bridgedb-metric-count https.scramblesuit.ru.success.none 10
bridgedb-metric-count https.scramblesuit.sg.success.none 10
bridgedb-metric-count https.scramblesuit.us.fail.none 10
bridgedb-metric-count https.scramblesuit.us.success.none 10
bridgedb-metric-count https.scramblesuit.zz.fail.none 470
bridgedb-metric-count https.scramblesuit.zz.success.none 6360
bridgedb-metric-count https.vanilla.??.fail.none 60
bridgedb-metric-count https.vanilla.??.success.none 40
bridgedb-metric-count https.vanilla.an.fail.none 10
bridgedb-metric-count https.vanilla.an.success.none 10
bridgedb-metric-count https.vanilla.at.fail.none 30
bridgedb-metric-count https.vanilla.at.success.none 20
bridgedb-metric-count https.vanilla.au.fail.none 10
bridgedb-metric-count https.vanilla.au.success.none 10
bridgedb-metric-count https.vanilla.bd.fail.none 10
bridgedb-metric-count https.vanilla.bd.success.none 10
bridgedb-metric-count https.vanilla.be.fail.none 10
bridgedb-metric-count https.vanilla.be.success.none 10
bridgedb-metric-count https.vanilla.br.fail.none 20
bridgedb-metric-count https.vanilla.br.success.none 20
bridgedb-metric-count https.vanilla.by.fail.none 10
bridgedb-metric-count https.vanilla.by.success.none 20
bridgedb-metric-count https.vanilla.ca.fail.none 20
bridgedb-metric-count https.vanilla.ca.success.none 20
bridgedb-metric-count https.vanilla.ch.fail.none 10
bridgedb-metric-count https.vanilla.ch.success.none 10
bridgedb-metric-count https.vanilla.cl.success.none 10
bridgedb-metric-count https.vanilla.cn.fail.none 10
bridgedb-metric-count https.vanilla.cn.success.none 10
bridgedb-metric-count https.vanilla.cz.success.none 10
bridgedb-metric-count https.vanilla.de.fail.none 20
bridgedb-metric-count https.vanilla.de.success.none 20
bridgedb-metric-count https.vanilla.dz.fail.none 10
bridgedb-metric-count https.vanilla.dz.success.none 10
bridgedb-metric-count https.vanilla.ec.success.none 10
bridgedb-metric-count https.vanilla.eg.fail.none 10
bridgedb-metric-count https.vanilla.eg.success.none 10
bridgedb-metric-count https.vanilla.es.fail.none 10
bridgedb-metric-count https.vanilla.es.success.none 10
bridgedb-metric-count https.vanilla.et.fail.none 10
bridgedb-metric-count https.vanilla.et.success.none 10
bridgedb-metric-count https.vanilla.eu.fail.none 10
bridgedb-metric-count https.vanilla.fi.fail.none 10
bridgedb-metric-count https.vanilla.fi.success.none 10
bridgedb-metric-count https.vanilla.fr.fail.none 10
bridgedb-metric-count https.vanilla.fr.success.none 20
bridgedb-metric-count https.vanilla.gb.fail.none 20
bridgedb-metric-count https.vanilla.gb.success.none 30
bridgedb-metric-count https.vanilla.ge.fail.none 10
bridgedb-metric-count https.vanilla.ge.success.none 10
bridgedb-metric-count https.vanilla.gr.fail.none 10
bridgedb-metric-count https.vanilla.gr.success.none 10
bridgedb-metric-count https.vanilla.hk.fail.none 10
bridgedb-metric-count https.vanilla.hk.success.none 20
bridgedb-metric-count https.vanilla.hr.success.none 10
bridgedb-metric-count https.vanilla.hu.fail.none 10
bridgedb-metric-count https.vanilla.hu.success.none 10
bridgedb-metric-count https.vanilla.id.fail.none 10
bridgedb-metric-count https.vanilla.id.success.none 10
bridgedb-metric-count https.vanilla.ie.fail.none 10
bridgedb-metric-count https.vanilla.ie.success.none 10
bridgedb-metric-count https.vanilla.il.success.none 10
bridgedb-metric-count https.vanilla.in.fail.none 30
bridgedb-metric-count https.vanilla.in.success.none 20
bridgedb-metric-count https.vanilla.iq.success.none 10
bridgedb-metric-count https.vanilla.is.fail.none 10
bridgedb-metric-count https.vanilla.is.success.none 10
bridgedb-metric-count https.vanilla.it.fail.none 20
bridgedb-metric-count https.vanilla.it.success.none 10
bridgedb-metric-count https.vanilla.jm.fail.none 10
bridgedb-metric-count https.vanilla.jm.success.none 10
bridgedb-metric-count https.vanilla.jp.fail.none 10
bridgedb-metric-count https.vanilla.jp.success.none 10
bridgedb-metric-count https.vanilla.ke.success.none 10
bridgedb-metric-count https.vanilla.kr.fail.none 10
bridgedb-metric-count https.vanilla.kr.success.none 10
bridgedb-metric-count https.vanilla.kw.fail.none 10
bridgedb-metric-count https.vanilla.kw.success.none 10
bridgedb-metric-count https.vanilla.kz.fail.none 20
bridgedb-metric-count https.vanilla.kz.success.none 20
bridgedb-metric-count https.vanilla.la.success.none 10
bridgedb-metric-count https.vanilla.lv.fail.none 10
bridgedb-metric-count https.vanilla.lv.success.none 10
bridgedb-metric-count https.vanilla.mx.fail.none 10
bridgedb-metric-count https.vanilla.mx.success.none 10
bridgedb-metric-count https.vanilla.ng.fail.none 10
bridgedb-metric-count https.vanilla.ng.success.none 10
bridgedb-metric-count https.vanilla.ni.fail.none 10
bridgedb-metric-count https.vanilla.ni.success.none 10
bridgedb-metric-count https.vanilla.nl.fail.none 10
bridgedb-metric-count https.vanilla.nl.success.none 20
bridgedb-metric-count https.vanilla.no.fail.none 10
bridgedb-metric-count https.vanilla.no.success.none 10
bridgedb-metric-count https.vanilla.np.fail.none 10
bridgedb-metric-count https.vanilla.nz.success.none 10
bridgedb-metric-count https.vanilla.pe.fail.none 10
bridgedb-metric-count https.vanilla.pe.success.none 10
bridgedb-metric-count https.vanilla.pg.fail.none 10
bridgedb-metric-count https.vanilla.pg.success.none 10
bridgedb-metric-count https.vanilla.ph.success.none 10
bridgedb-metric-count https.vanilla.pk.fail.none 10
bridgedb-metric-count https.vanilla.pk.success.none 10
bridgedb-metric-count https.vanilla.pl.fail.none 10
bridgedb-metric-count https.vanilla.pl.success.none 10
bridgedb-metric-count https.vanilla.re.fail.none 10
bridgedb-metric-count https.vanilla.re.success.none 10
bridgedb-metric-count https.vanilla.ru.fail.none 100
bridgedb-metric-count https.vanilla.ru.success.none 90
bridgedb-metric-count https.vanilla.se.fail.none 10
bridgedb-metric-count https.vanilla.se.success.none 10
bridgedb-metric-count https.vanilla.sg.success.none 10
bridgedb-metric-count https.vanilla.si.fail.none 10
bridgedb-metric-count https.vanilla.sk.fail.none 10
bridgedb-metric-count https.vanilla.sk.success.none 10
bridgedb-metric-count https.vanilla.so.fail.none 10
bridgedb-metric-count https.vanilla.tr.fail.none 10
bridgedb-metric-count https.vanilla.tr.success.none 10
bridgedb-metric-count https.vanilla.ua.fail.none 10
bridgedb-metric-count https.vanilla.ua.success.none 10
bridgedb-metric-count https.vanilla.us.fail.none 90
bridgedb-metric-count https.vanilla.us.success.none 100
bridgedb-metric-count https.vanilla.ve.success.none 10
bridgedb-metric-count https.vanilla.vn.fail.none 10
bridgedb-metric-count https.vanilla.vn.success.none 10
bridgedb-metric-count https.vanilla.ye.fail.none 10
bridgedb-metric-count https.vanilla.ye.success.none 10
bridgedb-metric-count https.vanilla.za.fail.none 10
bridgedb-metric-count https.vanilla.zz.fail.none 870
bridgedb-metric-count https.vanilla.zz.success.none 7100
bridgedb-metric-count moat.obfs4.??.fail.none 2030
bridgedb-metric-count moat.obfs4.??.success.none 2360
bridgedb-metric-count moat.obfs4.cn.fail.none 30
bridgedb-metric-count moat.obfs4.cn.success.none 20
bridgedb-metric-count moat.obfs4.us.fail.none 110
bridgedb-metric-count moat.obfs4.us.success.none 80

[Attachment #4 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190730042252</emailId><senderName>Rick Huebner</senderName><senderEmail>rhuebner@radiks.net</senderEmail><timestampReceived>2019-07-30 04:22:52-0400</timestampReceived><subject>Re: [tor-dev] 24 hours worth of BridgeDB usage metrics</subject><body>

That's awesome, and will shine a lot of light on user demand patterns 
and how well things are actually working through various channels. Could 
some metrics be added to summarize how the bridges and queries are 
distributed across the hashrings? As in, at the end of the day, roughly 
how many bridges are in each hashring, and how many requests were served 
from each hashring? I've seen behavior in the past that made me wonder 
if the internal HMAC/modulo partitioning method is actually uniformly 
distributed or not, like perhaps there are some hashrings with most of 
the bridges and others with too few (within a given distribution 
method), or maybe there are too many requests being pulled from certain 
hashrings, leaving others under-utilized. This might not need to be a 
permanent stat dump, but seeing it for at least a few days would help a 
lot to confirm that the db's guts are working as intended.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190730154211</emailId><senderName>Karsten Loesing</senderName><senderEmail>karsten@torproject.org</senderEmail><timestampReceived>2019-07-30 15:42:11-0400</timestampReceived><subject>Re: [tor-dev] 24 hours worth of BridgeDB usage metrics</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


On 2019-07-30 00:01, Philipp Winter wrote:
&gt; [...]
&gt; 
&gt; After a cursory look at the numbers, I would like to aggregate the data,
&gt; to make it easier to compare distributors, transports, and countries.
&gt; For example: how do moat, email, and HTTPS rank in popularity?  I'll
&gt; improve the patch to keep track of these numbers in separate metrics.
&gt; 
&gt; Any thoughts or suggestions?

Looks like a great start!

I have two questions and one suggestion, based on a quick read:

You say that you're planning to add aggregate statistics like numbers by
distributor without drilling down to transports or countries. Keep in
mind that this is going to reduce the noise that you added when rounding
up to multiples of 10. For example, knowing that the total by country is
closer to $entries_in_that_country * 1 or $entries_in_that_country * 10
will tell you something about the average noise added per entry. It
would be more privacy-preserving (and also less accurate) to keep all
the noise in the statistics and do the aggregation in a separate step.

What is obs4 in bridgedb-metric-count email.obs4.gmail.fail.none 10 (as
opposed to obfs4)?

Would it make sense to add a line like bridge-stats-version to include a
version number of some sort, just in case you want to change the format
at a later time?

&gt; Cheers,
&gt; Philipp

All the best,
Karsten


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190730180850</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2019-07-30 18:08:50-0400</timestampReceived><subject>Re: [tor-dev] 24 hours worth of BridgeDB usage metrics</subject><body>

On Mon, Jul 29, 2019 at 09:22:52PM -0700, Rick Huebner wrote:
&gt; Could some metrics be added to summarize how the bridges and queries
&gt; are distributed across the hashrings?

Thanks for this suggestion.  I agree that it would be helpful and I'll
look into incorporating it into the metrics.

Cheers,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190815185202</emailId><senderName>Pop Chunhapanya</senderName><senderEmail>pop@cloudflare.com</senderEmail><timestampReceived>2019-08-15 18:52:02-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tim,

The only protocol supported right now 'haproxy'. This option is only for
&gt; clients. (Default: none)
&gt;

I think TCPProxy option is more generic than HTTPSProxy, Socks4Proxy and
Socks5Proxy. Why don't we also allow https, socks4, and socks5 instead of
just haproxy?

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div&gt;Hi Tim,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;The only protocol supported right now 'haproxy'. This \
option is only for clients. (Default: \
none)&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think TCPProxy option \
is more generic than HTTPSProxy, Socks4Proxy and Socks5Proxy. Why don't we also \
allow https, socks4, and socks5 instead of just haproxy? &lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190816065450</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-16 06:54:50-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 16 Aug 2019, at 04:52, Pop Chunhapanya &lt;pop@cloudflare.com&gt; wrote:
&gt; 
&gt; Hi Tim,
&gt; 
&gt; &gt; The only protocol supported right now 'haproxy'. This option is only for clients. \
&gt; &gt; (Default: none)
&gt; 
&gt; I think TCPProxy option is more generic than HTTPSProxy, Socks4Proxy and \
&gt; Socks5Proxy. Why don't we also allow https, socks4, and socks5 instead of just \
&gt; haproxy?

That's possible, but it's not required as part of the patch.

If we wanted a fully generic option, we should probably call it something like
ORConnectionProxy or OutboundORProxy.

I'd like to see what Nick thinks when he's back next week.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;On 16 Aug 2019, at 04:52, Pop Chunhapanya &lt;&lt;a \
href="mailto:pop@cloudflare.com"&gt;pop@cloudflare.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;Hi \
Tim,&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote class="gmail_quote" \
style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;The only protocol supported right now 'haproxy'. This option \
is only for clients. (Default: \
none)&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I think TCPProxy option \
is more generic than HTTPSProxy, Socks4Proxy and Socks5Proxy. Why don't we also allow \
https, socks4, and socks5 instead of just \
haproxy?&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;That's possible, but it's not \
required as part of the patch.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;If we wanted a fully generic \
option, we should probably call it something like&lt;/div&gt;&lt;div&gt;ORConnectionProxy or \
OutboundORProxy.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I'd like to see what Nick thinks when he's \
back next week.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190820033107</emailId><senderName>Pop Chunhapanya</senderName><senderEmail>pop@cloudflare.com</senderEmail><timestampReceived>2019-08-20 03:31:07-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


Hi Tim,


&gt; TCPProxy protocol host:port
&gt;
&gt;
&gt; Tor will use the given protocol to make all its OR (SSL) connections
&gt; through a TCP proxy on host:port, rather than connecting directly to
&gt; servers. You may want to set FascistFirewall to restrict the set of ports
&gt; you might try to connect to, if your proxy only allows connecting to
&gt; certain ports. There is no equivalent option for directory connections,
&gt; because all Tor client versions that support this option download directory
&gt; documents via OR connections.
&gt;
&gt;
&gt; The only protocol supported right now 'haproxy'. This option is only for
&gt; clients. (Default: none)
&gt;
&gt;
&gt;
The other point that I want to make is that haproxy has 2 versions. I think
it's better to also put the version number in the protocol name like
'haproxy1'.
However I saw you already used 'haproxy' in the
HiddenServiceExportCircuitID option.

Best,
haxxpop

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;Hi Tim,&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div \
class="gmail_quote"&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;&lt;div \
dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;TCPProxy protocol host:port&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;Tor will use the given protocol to make all its OR (SSL) \
connections through a TCP proxy on host:port, rather than connecting directly to \
servers. You may want to set FascistFirewall to restrict the set of ports you might \
try to connect to, if your proxy only allows connecting to certain ports. There is no \
equivalent option for directory connections, because all Tor client versions that \
support this option download directory documents via OR connections.&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;The only protocol supported right now 'haproxy'. This \
option is only for clients. (Default: none)&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
other point that I want to make is that haproxy has 2 versions. I think it's \
better to also put the version number in the protocol name like \
'haproxy1'.&lt;/div&gt;&lt;div&gt;However I saw you already used 'haproxy' in the \
HiddenServiceExportCircuitID \
option.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Best,&lt;/div&gt;&lt;div&gt;haxxpop&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190820055936</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-20 05:59:36-0400</timestampReceived><subject>Re: [tor-dev] Putting onion services behind a third-party TCP proxy</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; On 20 Aug 2019, at 13:31, Pop Chunhapanya &lt;pop@cloudflare.com&gt; wrote:
&gt; 
&gt; Hi Tim,
&gt; 
&gt; &gt; 
&gt; &gt; TCPProxy protocol host:port
&gt; &gt; 
&gt; &gt; Tor will use the given protocol to make all its OR (SSL) connections through a \
&gt; &gt; TCP proxy on host:port, rather than connecting directly to servers. You may want \
&gt; &gt; to set FascistFirewall to restrict the set of ports you might try to connect to, \
&gt; &gt; if your proxy only allows connecting to certain ports. There is no equivalent \
&gt; &gt; option for directory connections, because all Tor client versions that support \
&gt; &gt; this option download directory documents via OR connections. 
&gt; &gt; The only protocol supported right now 'haproxy'. This option is only for clients. \
&gt; &gt; (Default: none) 
&gt; 
&gt; The other point that I want to make is that haproxy has 2 versions. I think it's \
&gt; better to also put the version number in the protocol name like 'haproxy1'. However \
&gt; I saw you already used 'haproxy' in the HiddenServiceExportCircuitID option.

I would be happy with "haproxy" and "haproxy2".

But minimal patches are good - let's not implement features that no-one is using.

T


[Attachment #5 (text/html)]

&lt;html&gt;&lt;head&gt;&lt;meta http-equiv="content-type" content="text/html; \
charset=utf-8"&gt;&lt;/head&gt;&lt;body dir="auto"&gt;&lt;div dir="ltr"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;On 20 Aug 2019, at 13:31, Pop Chunhapanya &lt;&lt;a \
href="mailto:pop@cloudflare.com"&gt;pop@cloudflare.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote type="cite"&gt;&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&lt;div \
dir="ltr"&gt;Hi Tim,&lt;/div&gt;&lt;div dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="gmail_quote"&gt;&lt;blockquote \
class="gmail_quote" style="margin:0px 0px 0px 0.8ex;border-left:1px solid \
rgb(204,204,204);padding-left:1ex"&gt;&lt;div dir="auto"&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;TCPProxy protocol host:port&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;Tor will use the given protocol to make all its OR (SSL) \
connections through a TCP proxy on host:port, rather than connecting directly to \
servers. You may want to set FascistFirewall to restrict the set of ports you might \
try to connect to, if your proxy only allows connecting to certain ports. There is no \
equivalent option for directory connections, because all Tor client versions that \
support this option download directory documents via OR connections.&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;The only protocol supported right now 'haproxy'. This option \
is only for clients. (Default: none)&lt;/span&gt;&lt;/p&gt;&lt;p \
style="margin:0px;font-stretch:normal;font-size:12px;line-height:normal;font-family:Helvetica"&gt;&lt;span \
style="font-size:12pt"&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The \
other point that I want to make is that haproxy has 2 versions. I think it's better \
to also put the version number in the protocol name like \
'haproxy1'.&lt;/div&gt;&lt;div&gt;However I saw you already used 'haproxy' in the \
HiddenServiceExportCircuitID option.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;div&gt;I \
would be happy with "haproxy" and "haproxy2".&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;But minimal \
patches are good - let's not implement features that no-one is \
using.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;T&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190817211740</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-08-17 21:17:40-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Sat, 17 Aug 2019 at 15:06, procmem@riseup.net &lt;procmem@riseup.net&gt; wrote:
&gt; Question for the Tor Browser experts. Do you know if it is possible to
&gt; remotely fingerprint the browser based on the memory allocator it is
&gt; using? (via JS or content rendering)

Fingerprint what aspect of the browser/machine?

&gt; We are thinking of switching Tor Browser to use the minimalist and
&gt; security oriented hardened_malloc written by Daniel Micay. Thanks.

I wouldn't advise giving up partitioning for.... what exactly? What
features does this allocator have that 68's jemalloc doesn't?

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190817221319</emailId><senderName>"procmem () riseup ! net"</senderName><senderEmail>procmem@riseup.net</senderEmail><timestampReceived>2019-08-17 22:13:19-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Attachment #2 (multipart/alternative)]


*On Sat, 17 Aug 2019 at**21:17, Tom Ritter* &lt;tom at ritter.vg \
&lt;mailto:tor-dev%40lists.torproject.org?Subject=Re%3A%20%5Btor-dev%5D%20TBB%20Memory%20 \
Allocator%20choice%20fingerprint%20implications&amp;In-Reply-To=%3CCA%2BcU71%3DPeZGCAJNsPQy9QpKY9%3Dwz3vPdW8QKruF_ZwyanoyYzQ%40mail.gmail.com%3E&gt;&gt; \
wrote:
&gt; On Sat, 17 Aug 2019 at 15:06, procmem at riseup.net \
&gt; &lt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&gt; &lt;procmem at \
&gt; riseup.net &lt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&gt;&gt; wrote:
&gt; &gt; /Question for the Tor Browser experts. Do you know if it is possible to \
&gt; &gt; /&gt;/remotely fingerprint the browser based on the memory allocator it is /&gt;/using? \
&gt; &gt; (via JS or content rendering) /
&gt; Fingerprint what aspect of the browser/machine?
I'm not really sure (I'm of the opinion it should not matter) and so I'm curious as \
to what could  be affected if anything. 

Some members of our team are divided about making it the default because of unknown \
consequences  which is what I'm trying to clear up.
&gt; &gt; /We are thinking of switching Tor Browser to use the minimalist and /&gt;/security \
&gt; &gt; oriented hardened_malloc written by Daniel Micay. Thanks. /
&gt; I wouldn't advise giving up partitioning for.... what exactly? What
&gt; features does this allocator have that 68's jemalloc doesn't?
&gt; 
&gt; -tom

So the original suggestion [0] was prompted by past research done by the Tor Browser \
team for a jemalloc  alternative. [1] Hardened_malloc wasn't around back then so it \
may be a worthy alternative for you guys to switch to too.  
Hardened_malloc has a partitioned heap among many other defenses implemented if I \
understand their label  correctly (please see "Security properties" section in [2]). \
Also available on ARM. 

[0] https://forums.whonix.org/t/hardened-malloc/7474
[1] https://trac.torproject.org/projects/tor/ticket/10281
[2] https://github.com/GrapheneOS/hardened_malloc

***

PS. A related debate is on whether we should enable Apparmor and Firejail sandboxing \
for Tor Browser by default,  but again we don't know if restriction to resources and \
file paths on the machine is something that is remotely  detectable as an anomaly or \
not, ruining the fingerprint in the process. Input is appreciated. related thread:

https://forums.whonix.org/t/tor-browser-hardening-hardened-malloc-firejail-apparmor-vs-web-fingerprint/7851



[Attachment #5 (text/html)]

&lt;html&gt;
  &lt;head&gt;

    &lt;meta http-equiv="content-type" content="text/html; charset=UTF-8"&gt;
  &lt;/head&gt;
  &lt;body text="#000000" bgcolor="#FFFFFF"&gt;
    &lt;pre&gt;&lt;pre&gt;&lt;b&gt;On Sat, 17 Aug 2019 at&lt;/b&gt;&lt;b&gt; 21:17, Tom Ritter&lt;/b&gt; &lt;&lt;a \
href="mailto:tor-dev%40lists.torproject.org?Subject=Re%3A%20%5Btor-dev%5D%20TBB%20Memo \
ry%20Allocator%20choice%20fingerprint%20implications&amp;In-Reply-To=%3CCA%2BcU71%3DPeZGCAJNsPQy9QpKY9%3Dwz3vPdW8QKruF_ZwyanoyYzQ%40mail.gmail.com%3E" \
title="[tor-dev] TBB Memory Allocator choice fingerprint implications"&gt;tom at \
ritter.vg&lt;/a&gt;&gt; wrote:&lt;/pre&gt;&lt;blockquote type="cite"&gt;&lt;pre&gt;On Sat, 17 Aug 2019 at \
15:06, &lt;a href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;procmem \
at riseup.net&lt;/a&gt; &lt;&lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev"&gt;procmem at \
riseup.net&lt;/a&gt;&gt; wrote: &gt;&lt;i&gt; Question for the Tor Browser experts. Do you know \
if it is possible to &lt;/i&gt;&gt;&lt;i&gt; remotely fingerprint the browser based on the memory \
allocator it is &lt;/i&gt;&gt;&lt;i&gt; using? (via JS or content rendering)
&lt;/i&gt;
Fingerprint what aspect of the browser/machine?
&lt;/pre&gt;&lt;/blockquote&gt;I'm not really sure (I'm of the opinion it should not matter) and \
so I'm curious as to what could  be affected if anything. 

Some members of our team are divided about making it the default because of unknown \
consequences  which is what I'm trying to clear up.
&lt;blockquote type="cite"&gt;&lt;pre&gt;
&gt;&lt;i&gt; We are thinking of switching Tor Browser to use the minimalist and
&lt;/i&gt;&gt;&lt;i&gt; security oriented hardened_malloc written by Daniel Micay. Thanks.
&lt;/i&gt;
I wouldn't advise giving up partitioning for.... what exactly? What
features does this allocator have that 68's jemalloc doesn't?

-tom&lt;/pre&gt;&lt;/blockquote&gt;
So the original suggestion [0] was prompted by past research done by the Tor Browser \
team for a jemalloc  alternative. [1] Hardened_malloc wasn't around back then so it \
may be a worthy alternative for you guys to switch to too.  
Hardened_malloc has a partitioned heap among many other defenses implemented if I \
understand their label  correctly (please see "Security properties" section in [2]). \
Also available on ARM. 

[0] &lt;a class="moz-txt-link-freetext" \
href="https://forums.whonix.org/t/hardened-malloc/7474"&gt;https://forums.whonix.org/t/hardened-malloc/7474&lt;/a&gt;
 [1] &lt;a class="moz-txt-link-freetext" \
href="https://trac.torproject.org/projects/tor/ticket/10281"&gt;https://trac.torproject.org/projects/tor/ticket/10281&lt;/a&gt;
 [2] &lt;a class="moz-txt-link-freetext" \
href="https://github.com/GrapheneOS/hardened_malloc"&gt;https://github.com/GrapheneOS/hardened_malloc&lt;/a&gt;


***

PS. A related debate is on whether we should enable Apparmor and Firejail sandboxing \
for Tor Browser by default,  but again we don't know if restriction to resources and \
file paths on the machine is something that is remotely  detectable as an anomaly or \
not, ruining the fingerprint in the process. Input is appreciated. related thread:

&lt;a class="moz-txt-link-freetext" \
href="https://forums.whonix.org/t/tor-browser-hardening-hardened-malloc-firejail-appar \
mor-vs-web-fingerprint/7851"&gt;https://forums.whonix.org/t/tor-browser-hardening-hardened-malloc-firejail-apparmor-vs-web-fingerprint/7851&lt;/a&gt;
 &lt;/pre&gt;
  &lt;/body&gt;
&lt;/html&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190817223527</emailId><senderName>Shawn Webb</senderName><senderEmail>shawn.webb@hardenedbsd.org</senderEmail><timestampReceived>2019-08-17 22:35:27-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Attachment #2 (multipart/signed)]


On Sat, Aug 17, 2019 at 03:06:04PM +0000, procmem@riseup.net wrote:
&gt; Question for the Tor Browser experts. Do you know if it is possible to
&gt; remotely fingerprint the browser based on the memory allocator it is
&gt; using? (via JS or content rendering)
&gt; 
&gt; We are thinking of switching Tor Browser to use the minimalist and
&gt; security oriented hardened_malloc written by Daniel Micay. Thanks.

Full disclosure: I'm not well versed in TBB's features, and especially
these kinds of low-level details. I'm a newb who loves to learn. :)

Does Firefox (and/or TBB) have a method for selecting alternate memory
allocators? If so, is the method compile-time or run-time?

Thinking out loud. My newbishness is gonna show:

It would be very interesting to see support for selecting the
allocator at runtime (perhaps requiring a restart of firefox to
activate switching.) Each allocator will perform differently on each
OS, especially with regards to memory safety (ASR versus ASLR,
per-boot randomization versus per-execve, different implementations of
memory guards, etc.)

Having the heap implementation selectable at runtime would enable
users to make the determination for themselves, while also making
future integration efforts easier through modularization/abstraction
APIs (I'm making a silly, naive, and likely wrong, assumption that such
APIs don't already exist.)

I hope I'm not coming off as "hey, do this." I'm just thinking out
loud in an admittedly naive fashion.

Anyone have any thoughts?

PS: I find Daniel's hardened_malloc project very interesting. I hope
to someday provide integration with it directly in HardenedBSD. In
similar vein as what you're thinking, even.

It would be interesting to see how OS fingerprinting changes as
different alternate implementations of various OS components (heap
implementations, LibreSSL versus OpenSSL, etc.) affect OS
fingerprinting at an application level (via JS, content rendering, or
otherwise.)

Thanks,

-- 
Shawn Webb
Cofounder / Security Engineer
HardenedBSD

Tor-ified Signal:    +1 443-546-8752
Tor+XMPP+OTR:        lattera@is.a.hacker.sx
GPG Key ID:          0xFF2E67A277F8E1FA
GPG Key Fingerprint: D206 BB45 15E0 9C49 0CF9  3633 C85B 0AF8 AB23 0FB2

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190819021908</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-08-19 02:19:08-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

Hi,

&gt; On 18 Aug 2019, at 08:35, Shawn Webb &lt;shawn.webb@hardenedbsd.org&gt; wrote:
&gt; 
&gt; Having the heap implementation selectable at runtime would enable
&gt; users to make the determination for themselves, while also making
&gt; future integration efforts easier through modularization/abstraction
&gt; APIs (I'm making a silly, naive, and likely wrong, assumption that such
&gt; APIs don't already exist.)
&gt; 
&gt; I hope I'm not coming off as "hey, do this." I'm just thinking out
&gt; loud in an admittedly naive fashion.
&gt; 
&gt; Anyone have any thoughts?

Allowing users to select the allocator at runtime would split the anonymity set, *if* \
the allocator was detectable remotely.

This is why we try to use safe defaults, and avoid user-selected options. When we do \
give users options, we create a few well-defined settings (like the security slider).

T
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190819160936</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-08-19 16:09:36-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

Okay I'm going to try and clear up a lot of misconceptions and stuff
here.  I don't own Firefox's memory allocator but I have worked in it,
recently, and am one of the people who are working on hardening it.

Firefox's memory allocator is not jemalloc. It's probably better
referred to as mozjemalloc. We forked jemalloc and have been improving
it (at least from our perspective.) Any analysis of or comparison to
jemalloc is - at this point - outdated and should be redone from
scratch against mozjemalloc on mozilla-central.

LD_PRELOAD='/path/to/libhardened_malloc.so' /path/to/program will do
nothing or approximately nothing. mozjemalloc uses mmap and low level
allocation tools to create chunks of memory to be used by its internal
memory allocator. To successfully replace Firefox memory allocator you
should either use LD_PRELOAD _with_ a --disable-jemalloc build OR
Firefox's replace_malloc functionality:
https://searchfox.org/mozilla-central/source/memory/build/replace_malloc.h

Fingerprinting: It is most likely possible to be creative enough to
fingerprint what memory allocator is used. If we were to choose from
different allocators at runtime, I don't think that fingerprinting is
the worst thing open to us - it seems likely that any attacker who
does such a attack could also fingerprinting your CPU speed, RAM, and
your ASLR base addresses which depending on OS might not change until
reboot.

The only reason I can think of to choose between allocators at runtime
is to introduce randomness into the allocation strategy. An attacker
relying on a blind overwrite may not be able to position their
overwrite reliably AND it has the cause the process to crash otherwise
they can just try again.

Allocators can introduce randomness themselves, you don't need to
choose between allocators to do that.

In virtually all browser exploits we have seen recently the attacker
creates exploitation primitives that allow partial memory read/write
and then full memory read/write. Randomness introduced is bypassed and
ineffective. I've seen a general trend away from randomness for this
purpose. The exception is when the attacker is heavily constrained -
like exploiting over IPC or in a network protocol. Not when the
attacker has a full Javascript execution environment available to
them.

When exploiting a memory corruption vulnerability, you can target the
application's memory (meaning, target a DOM object or an ArrayBuffer)
or you can target the memory allocator's metadata. While allocator
metadata corruption was popular in the past, I haven't seen it used
recently.




Okay all that out of the way, let's talk about allocators.

I skimmed https://github.com/GrapheneOS/hardened_malloc and it looks
like it has:
 - out of line metadata
 - double free protection
 - guard regions of some type
 - zero-filling
 - MPK support
 - randomization
 - support for arenas

mozjemalloc:
 - arenas (we call them partitions)
 - randomization (support for, not enabled by default due to limited
utility, but improvements coming)
 - double free protection
 - zero-filling
In Progress:
 - we're actively working on guard regions
Future Work:
 - out of line metadata
 - MPK

harden_malloc definitely has more bells and whistles than mozjemalloc.
But the benefit gained by slapping in an LD_PRELOAD and calling it a
day is small to zero. Probably negative because you'll not utilize
partitions by default. You'd need a particurally constrained
vulnerability to actually prevent exploitation - it's more likely
you'll just cost the attacker another 2-8 hours of work.

Out of line metadata is on-the-surface-attractive but... that tends to
only help when you have a off-by-one/four write and you corrupt
metadata state because it's the only thing you *can* do. With out of
line metadata, you can just corrupt a real object and effect a
different type of corruption. I'm pretty skeptical of the benefit at
this point, although I could be convinced. We don't see metadata
corruption attacks anymore - but I'm not sure if it's because we find
better exploit primitives or better vulnerabilities.

In particular, if you wanted to pursue hardened_malloc you would need
to use replace_malloc and wire up the partitions correctly.
Randomization will almost certainly not help (and will hurt
performance)*. MPK sounds nice but you have to use it correctly (which
requires application code changes), you have to ensure there are no
MPK gadgets, and oh wait no one can use it because it's only available
in Linux on server CPUs. =(

* One place randomization will help is on the other side of an IPC
boundary. e.g. in the parent process. I'm trying to get that enabled
for mozjemalloc in H2 2019.

In conclusion, while it's possible hardened_malloc could provide some
small security increase over mozjemalloc, the gap is much smaller than
it was when I advocated for allocator improvements 5 years ago, the
effort is definitely non-trivial, and the gap is closing.

If people had the cycles to invest in something like this, I would
actually advocate for helping us test and benchmark Fuzzyfox, and see
if we can get the browser into a usable state with Fuzzyfox so we
could enable it in Tor Browser.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190819161100</emailId><senderName>Patrick Schleizer</senderName><senderEmail>patrick-mailinglists@whonix.org</senderEmail><timestampReceived>2019-08-19 16:11:00-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

Btw Hardened Malloc does not require recompilation of TBB.

Compilation of Hardened Malloc is easy.

https://github.com/GrapheneOS/hardened_malloc

It then can be used with TBB or any application using LD_PRELOAD
environment variable.

LD_PRELOAD='/path/to/libhardened_malloc.so' /path/to/program

Just now created:
consider using Hardened Malloc for better security in TBB
https://trac.torproject.org/projects/tor/ticket/31440

Tom Ritter:
&gt; On Sat, 17 Aug 2019 at 15:06, procmem@riseup.net &lt;procmem@riseup.net&gt; wrote:
&gt;&gt; Question for the Tor Browser experts. Do you know if it is possible to
&gt;&gt; remotely fingerprint the browser based on the memory allocator it is
&gt;&gt; using? (via JS or content rendering)
&gt; 
&gt; Fingerprint what aspect of the browser/machine?


Browser web fingerprinting. The fingerprint that remote websites can see.

Can web servers guess that a different memory allocator (Hardened
Malloc) is being used due to difference in performance or other glitches?

Cheers,
Patrick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190819164236</emailId><senderName>Shawn Webb</senderName><senderEmail>shawn.webb@hardenedbsd.org</senderEmail><timestampReceived>2019-08-19 16:42:36-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Attachment #2 (multipart/signed)]


Hey Tom,

Thank you for your response. You've made some great points. My
response is inline.

On Mon, Aug 19, 2019 at 04:09:36PM +0000, Tom Ritter wrote:
&gt; Okay I'm going to try and clear up a lot of misconceptions and stuff
&gt; here.  I don't own Firefox's memory allocator but I have worked in it,
&gt; recently, and am one of the people who are working on hardening it.
&gt; 
&gt; Firefox's memory allocator is not jemalloc. It's probably better
&gt; referred to as mozjemalloc. We forked jemalloc and have been improving
&gt; it (at least from our perspective.) Any analysis of or comparison to
&gt; jemalloc is - at this point - outdated and should be redone from
&gt; scratch against mozjemalloc on mozilla-central.
&gt; 
&gt; LD_PRELOAD='/path/to/libhardened_malloc.so' /path/to/program will do
&gt; nothing or approximately nothing. mozjemalloc uses mmap and low level
&gt; allocation tools to create chunks of memory to be used by its internal
&gt; memory allocator. To successfully replace Firefox memory allocator you
&gt; should either use LD_PRELOAD _with_ a --disable-jemalloc build OR
&gt; Firefox's replace_malloc functionality:
&gt; https://searchfox.org/mozilla-central/source/memory/build/replace_malloc.h

Completely agreed. And, using LD_PRELOAD to hook into the allocator is
improper, anyways, since it won't catch early uses of the allocator.
And, as you mention, it wouldn't even work with Firefox given
mozjemalloc. Firefox is not the only application to want to have
control over the allocator.

The only way to guarantee catching early allocator use is to switch
the system's allocator (ie, libc itself) to the new one. Otherwise,
the application will end up with two allocator implementations being
used: the application's custom one and the system's, included and used
within libc (and other system libraries, of course.)

&gt; 
&gt; Fingerprinting: It is most likely possible to be creative enough to
&gt; fingerprint what memory allocator is used. If we were to choose from
&gt; different allocators at runtime, I don't think that fingerprinting is
&gt; the worst thing open to us - it seems likely that any attacker who
&gt; does such a attack could also fingerprinting your CPU speed, RAM, and
&gt; your ASLR base addresses which depending on OS might not change until
&gt; reboot.

My post was more along the lines of: what system-level components, if
replaced, have a potentially visible effect on current (or future)
fingerprinting techniques?

And: If, or how, does breaking monocultures affect fingerprinting?
Breaking monocultures is typically done to help secure an environment
through diversity, causing an attacker to have to spend more resources
in quest for success.

&gt; 
&gt; The only reason I can think of to choose between allocators at runtime
&gt; is to introduce randomness into the allocation strategy. An attacker
&gt; relying on a blind overwrite may not be able to position their
&gt; overwrite reliably AND it has the cause the process to crash otherwise
&gt; they can just try again.
&gt; 
&gt; Allocators can introduce randomness themselves, you don't need to
&gt; choose between allocators to do that.

I'm assuming you're talking about randomness of the address space?
When it comes to browsers, ASLR is dead. Local execution of
remotely-sourced arbitrary code, an attack vector ASLR was never meant
to protect against.

Thus, discussion of whether choice of allocator improves effectiveness
of ASLR when applied to the browser is moot.

&gt; 
&gt; In virtually all browser exploits we have seen recently the attacker
&gt; creates exploitation primitives that allow partial memory read/write
&gt; and then full memory read/write. Randomness introduced is bypassed and
&gt; ineffective. I've seen a general trend away from randomness for this
&gt; purpose. The exception is when the attacker is heavily constrained -
&gt; like exploiting over IPC or in a network protocol. Not when the
&gt; attacker has a full Javascript execution environment available to
&gt; them.
&gt; 
&gt; When exploiting a memory corruption vulnerability, you can target the
&gt; application's memory (meaning, target a DOM object or an ArrayBuffer)
&gt; or you can target the memory allocator's metadata. While allocator
&gt; metadata corruption was popular in the past, I haven't seen it used
&gt; recently.
&gt; 
&gt; 
&gt; 
&gt; 
&gt; Okay all that out of the way, let's talk about allocators.
&gt; 
&gt; I skimmed https://github.com/GrapheneOS/hardened_malloc and it looks
&gt; like it has:
&gt;  - out of line metadata
&gt;  - double free protection
&gt;  - guard regions of some type
&gt;  - zero-filling
&gt;  - MPK support
&gt;  - randomization
&gt;  - support for arenas
&gt; 
&gt; mozjemalloc:
&gt;  - arenas (we call them partitions)
&gt;  - randomization (support for, not enabled by default due to limited
&gt; utility, but improvements coming)
&gt;  - double free protection
&gt;  - zero-filling
&gt; In Progress:
&gt;  - we're actively working on guard regions
&gt; Future Work:
&gt;  - out of line metadata
&gt;  - MPK
&gt; 
&gt; harden_malloc definitely has more bells and whistles than mozjemalloc.
&gt; But the benefit gained by slapping in an LD_PRELOAD and calling it a
&gt; day is small to zero. Probably negative because you'll not utilize
&gt; partitions by default. You'd need a particurally constrained
&gt; vulnerability to actually prevent exploitation - it's more likely
&gt; you'll just cost the attacker another 2-8 hours of work.

100% agreed with your thoughts on LD_PRELOAD here, with the additions
of my notes above.

&gt; 
&gt; Out of line metadata is on-the-surface-attractive but... that tends to
&gt; only help when you have a off-by-one/four write and you corrupt
&gt; metadata state because it's the only thing you *can* do. With out of
&gt; line metadata, you can just corrupt a real object and effect a
&gt; different type of corruption. I'm pretty skeptical of the benefit at
&gt; this point, although I could be convinced. We don't see metadata
&gt; corruption attacks anymore - but I'm not sure if it's because we find
&gt; better exploit primitives or better vulnerabilities.
&gt; 
&gt; In particular, if you wanted to pursue hardened_malloc you would need
&gt; to use replace_malloc and wire up the partitions correctly.
&gt; Randomization will almost certainly not help (and will hurt
&gt; performance)*. MPK sounds nice but you have to use it correctly (which
&gt; requires application code changes), you have to ensure there are no
&gt; MPK gadgets, and oh wait no one can use it because it's only available
&gt; in Linux on server CPUs. =(
&gt; 
&gt; * One place randomization will help is on the other side of an IPC
&gt; boundary. e.g. in the parent process. I'm trying to get that enabled
&gt; for mozjemalloc in H2 2019.
&gt; 
&gt; In conclusion, while it's possible hardened_malloc could provide some
&gt; small security increase over mozjemalloc, the gap is much smaller than
&gt; it was when I advocated for allocator improvements 5 years ago, the
&gt; effort is definitely non-trivial, and the gap is closing.

I'm curious about how breaking monocultures affect attacks. I think
supporting hardened_malloc (or &lt;insert arbitrary allocator here&gt;)
would provide at least the framework for academic exercises.

Thanks,

-- 
Shawn Webb
Cofounder / Security Engineer
HardenedBSD

Tor-ified Signal:    +1 443-546-8752
Tor+XMPP+OTR:        lattera@is.a.hacker.sx
GPG Key ID:          0xFF2E67A277F8E1FA
GPG Key Fingerprint: D206 BB45 15E0 9C49 0CF9  3633 C85B 0AF8 AB23 0FB2

["signature.asc" (application/pgp-signature)]
[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190820154828</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-08-20 15:48:28-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

&gt; The only way to guarantee catching early allocator use is to switch
&gt; the system's allocator (ie, libc itself) to the new one. Otherwise,
&gt; the application will end up with two allocator implementations being
&gt; used: the application's custom one and the system's, included and used
&gt; within libc (and other system libraries, of course.)

So I don't know a ton about how this stuff works, but Firefox does
redirect allocations made by system libraries to the mozjemalloc
allocator. I know because I've been fighting with it recently because
it wasn't always doing it for MinGW and it's mismatch the alloc/free.
This is https://bugzilla.mozilla.org/show_bug.cgi?id=1547519 and
dependencies.

&gt; &gt; Fingerprinting: It is most likely possible to be creative enough to
&gt; &gt; fingerprint what memory allocator is used. If we were to choose from
&gt; &gt; different allocators at runtime, I don't think that fingerprinting is
&gt; &gt; the worst thing open to us - it seems likely that any attacker who
&gt; &gt; does such a attack could also fingerprinting your CPU speed, RAM, and
&gt; &gt; your ASLR base addresses which depending on OS might not change until
&gt; &gt; reboot.
&gt;
&gt; My post was more along the lines of: what system-level components, if
&gt; replaced, have a potentially visible effect on current (or future)
&gt; fingerprinting techniques?

I imagine that we have not seen the limit of creativity when it comes
to fingerprinting hardware characteristics of the user's machine.
These would include graphics card performance, CPU performance, cache
sizes (CPU and RAM), FPU operation (?), perhaps even disk speed.
Allocator, sure too.

&gt; And: If, or how, does breaking monocultures affect fingerprinting?
&gt; Breaking monocultures is typically done to help secure an environment
&gt; through diversity, causing an attacker to have to spend more resources
&gt; in quest for success.



&gt; &gt; The only reason I can think of to choose between allocators at runtime
&gt; &gt; is to introduce randomness into the allocation strategy. An attacker
&gt; &gt; relying on a blind overwrite may not be able to position their
&gt; &gt; overwrite reliably AND it has the cause the process to crash otherwise
&gt; &gt; they can just try again.
&gt; &gt;
&gt; &gt; Allocators can introduce randomness themselves, you don't need to
&gt; &gt; choose between allocators to do that.
&gt;
&gt; I'm assuming you're talking about randomness of the address space?

No, randomization of the allocations.

Imagine a simplistic example of grabbing 1MB of memory, and requesting
3 allocations of 100KB each.
In a deterministic allocator you'll always have the allocations at
&lt;base&gt;, &lt;base+100Kb&gt;, &lt;base+200Kb&gt;
In a randomized allocator the allocations could be at &lt;base&gt;,
&lt;base+100Kb+r1&gt;, &lt;base+200Kb+r1+r2&gt;

This removes determinism for the attacker in laying out the heap
exactly how they want it.

As I mention below, this randomness is easily bypassed in the content
process (where the attacker has a JIT engine to work with) and may
provide some security on the other side of an IPC boundary.

&gt; &gt; In virtually all browser exploits we have seen recently the attacker
&gt; &gt; creates exploitation primitives that allow partial memory read/write
&gt; &gt; and then full memory read/write. Randomness introduced is bypassed and
&gt; &gt; ineffective. I've seen a general trend away from randomness for this
&gt; &gt; purpose. The exception is when the attacker is heavily constrained -
&gt; &gt; like exploiting over IPC or in a network protocol. Not when the
&gt; &gt; attacker has a full Javascript execution environment available to
&gt; &gt; them.




&gt; &gt; In conclusion, while it's possible hardened_malloc could provide some
&gt; &gt; small security increase over mozjemalloc, the gap is much smaller than
&gt; &gt; it was when I advocated for allocator improvements 5 years ago, the
&gt; &gt; effort is definitely non-trivial, and the gap is closing.
&gt;
&gt; I'm curious about how breaking monocultures affect attacks. I think
&gt; supporting hardened_malloc (or &lt;insert arbitrary allocator here&gt;)
&gt; would provide at least the framework for academic exercises.

At Mozilla in the past we have evaluated exploit mitigations by hiring
an exploit developer to write or adapt an exploit to bypass a
mitigation and give us their opinion. The replace_malloc framework is
effectively the framework for performing such an evaluation.

Exploits have become more and more frameworked. They abstract away the
exploitation primitives and write the exploits against an API. Then
for each vulnerability they construct the same primitives using
different or slightly different techniques and use mostly the same
exploit.

'Breaking the monoculture' to me feels like "The attacker doesn't know
X so they have to guess and they might guess wrong and lose their
ability to exploit."  This assumes a) they have to guess and b) they
lose their ability to exploit.

(a) does not seem true. When they have a JIT to work with, they can
almost always safely inspect the system before taking any risks.
(b) also does not seem true. Reading memory is fairly safe so the
probability of crashing is low.

I think there is *significant* advantage to trying new approaches and
experimenting. Alternate implementations and experimentation. However
to toss those experiments in for no clear reason besides 'diversity'
does not seem advantageous.

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821121418</emailId><senderName>Daniel Micay</senderName><senderEmail>danielmicay@gmail.com</senderEmail><timestampReceived>2019-08-21 12:14:18-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Sat, Aug 17, 2019 at 09:17:40PM +0000, Tom Ritter wrote:
&gt; On Sat, 17 Aug 2019 at 15:06, procmem at riseup.net &lt;procmem at riseup.net&gt; wrote:
&gt; &gt; Question for the Tor Browser experts. Do you know if it is possible to
&gt; &gt; remotely fingerprint the browser based on the memory allocator it is
&gt; &gt; using? (via JS or content rendering)
&gt; 
&gt; Fingerprint what aspect of the browser/machine?

Performance-based fingerprinting of the browser can easily differentiate
between using a different malloc implementation. That can already obtain
a lot of fingerprinting information about the hardware and OS so this
may not actually matter much, but it's entirely possible. The strength
of fingerprinting mitigations when JavaScript is enabled are extremely
overestimated / overvalued and in many cases don't actually hide the
information that they attempt to hide due to secondary ways of obtaining
it like careful performance measurements.

&gt; &gt; We are thinking of switching Tor Browser to use the minimalist and
&gt; &gt; security oriented hardened_malloc written by Daniel Micay. Thanks.
&gt; 
&gt; I wouldn't advise giving up partitioning for.... what exactly? What
&gt; features does this allocator have that 68's jemalloc doesn't?

The hardened_malloc allocator heavily uses partitioning, and has a much
stronger implementation than the very weak approach in mozjemalloc. It
statically reserves memory regions for metadata and a dedicated region
for each arena, with each size class receiving a dedicated sub-region
within the arena. These sub-regions are placed within their own guard
region and each have a high entropy random base. It never mixes address
space between these regions or reuses the address space. This is much
different than what you call 'partitioning' in mozjemalloc which does
not really qualify. What you're talking about is mozjemalloc exposing an
API for choosing the arena from the code, which can certainly be done
with hardened_malloc too. However, in mozjemalloc, the address space for
different arenas is mixed together and reused between them. It's really
a stretch to call this partitioning, and it doesn't have the baseline
separation of size classes either.

People can read about hardened_malloc in the README:

https://github.com/GrapheneOS/hardened_malloc/blob/master/README.md#hardened-malloc

I don't know why you're making the misleading claim that people would
need to give up partitioning. It's also really a stretch to call what
Mozilla is doing in mozjemalloc partitioning in the first place, so your
claim is really quite backwards...
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821134031</emailId><senderName>Daniel Micay</senderName><senderEmail>danielmicay@gmail.com</senderEmail><timestampReceived>2019-08-21 13:40:31-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Mon, Aug 19, 2019 at 04:09:36PM +0000, Tom Ritter wrote:
&gt; Okay I'm going to try and clear up a lot of misconceptions and stuff
&gt; here.  I don't own Firefox's memory allocator but I have worked in it,
&gt; recently, and am one of the people who are working on hardening it.

This makes it clear why you're spreading misinformation. You're going
out of your way to make false and misleading claims about mozjemalloc
and hardened_malloc, particularly your bogus comparisons between them.

Bolting on a few weak implementations of hardening features to an
allocator inherently very friendly to memory corruption exploitation
does not make it anything close to being hardened allocator, sorry.

&gt; Firefox's memory allocator is not jemalloc. It's probably better
&gt; referred to as mozjemalloc. We forked jemalloc and have been improving
&gt; it (at least from our perspective.) Any analysis of or comparison to
&gt; jemalloc is - at this point - outdated and should be redone from
&gt; scratch against mozjemalloc on mozilla-central.

It's not particularly different and the comparison isn't outdated. I've
made some substantial contributions to jemalloc upstream and wrote the
integration into Rust. I'm deeply familiar with the design choices and
implementation of jemalloc. Those design choices lead to having a memory
allocator that's extremely friendly to exploitation. A lot of this is
covered in the hardened_malloc documentation, without going out of the
way to directly compare it to specific allocators. If the documentation
is not currently clear enough, I could provide a comparison to jemalloc
as an example of comparing a very hardened allocator implementation to
one that's the direct opposite. It makes exploitation significantly
easier overall than the traditional dlmalloc style design.

&gt; LD_PRELOAD='/path/to/libhardened_malloc.so' /path/to/program will do
&gt; nothing or approximately nothing. mozjemalloc uses mmap and low level
&gt; allocation tools to create chunks of memory to be used by its internal
&gt; memory allocator. To successfully replace Firefox memory allocator you
&gt; should either use LD_PRELOAD _with_ a --disable-jemalloc build OR
&gt; Firefox's replace_malloc functionality:
&gt; https://searchfox.org/mozilla-central/source/memory/build/replace_malloc.h

LD_PRELOAD is not how hardened_malloc is supposed to be used outside of
testing it anyway. It's meant to be integrated in libc, in which case
--disable-jemalloc would be enough, although it can also be integrated
into a specific program. That doesn't sidestep the importance of doing
other hardening in libc and the rest of the system though.

&gt; Fingerprinting: It is most likely possible to be creative enough to
&gt; fingerprint what memory allocator is used. If we were to choose from
&gt; different allocators at runtime, I don't think that fingerprinting is
&gt; the worst thing open to us - it seems likely that any attacker who
&gt; does such a attack could also fingerprinting your CPU speed, RAM, and
&gt; your ASLR base addresses which depending on OS might not change until
&gt; reboot.

They can obtain a lot more than just information about the hardware. A
lot of the hardware and OS information that fingerprinting mitigations
try to hide are leaked via performance measurements. It can also leak a
lot of data from within the browser.

&gt; The only reason I can think of to choose between allocators at runtime
&gt; is to introduce randomness into the allocation strategy. An attacker
&gt; relying on a blind overwrite may not be able to position their
&gt; overwrite reliably AND it has the cause the process to crash otherwise
&gt; they can just try again.

The hardened_malloc design provides far more than randomization, and the
fine-grained randomization within size class regions is one of the least
important and lowest priority features.

https://github.com/GrapheneOS/hardened_malloc/blob/master/README.md

&gt; Allocators can introduce randomness themselves, you don't need to
&gt; choose between allocators to do that.

This is not something that can simply be bolted onto an existing
allocator design with a good approach. It needs to be more heavily
integrated into the design, and the same applies to an even greater
extent to more important security features than weak fine-grained
randomization.

&gt; In virtually all browser exploits we have seen recently the attacker
&gt; creates exploitation primitives that allow partial memory read/write
&gt; and then full memory read/write. Randomness introduced is bypassed and
&gt; ineffective. I've seen a general trend away from randomness for this
&gt; purpose. The exception is when the attacker is heavily constrained -
&gt; like exploiting over IPC or in a network protocol. Not when the
&gt; attacker has a full Javascript execution environment available to
&gt; them.
&gt;
&gt; When exploiting a memory corruption vulnerability, you can target the
&gt; application's memory (meaning, target a DOM object or an ArrayBuffer)
&gt; or you can target the memory allocator's metadata. While allocator
&gt; metadata corruption was popular in the past, I haven't seen it used
&gt; recently.

The importance of out-of-line metadata is far beyond simply preventing
exploitation through the allocator metadata. It's crucial for a hardened
allocator to have a reliable source of information about allocations
without trusting data read from freed allocations or next to the memory
allocations.

&gt; Okay all that out of the way, let's talk about allocators.
&gt; 
&gt; I skimmed https://github.com/GrapheneOS/hardened_malloc and it looks
&gt; like it has:
&gt;  - out of line metadata

It has fully out-of-line metadata in a reserved region with the entirety
of the mutable allocator state. This is not simply for the sake of
protecting the metadata.

&gt;  - double free protection

The hardened_malloc approach provides deterministic, immediate detection
of every invalid free for both slab and large allocations. It detects
much more than detect double free and doesn't rely on a probabilistic
approach or inline / semi-inline metadata to provide it.

The quarantine implementations for slab allocations, slabs and large
allocation also massively help with this. For slab allocations it has to
go out of the way to preserve the deterministic, immediate double free
detection since a naive quarantine implementation would interfere.

&gt;  - guard regions of some type

It has much more than 'guard regions of some type'. It's designed around
being able to implement features like this is a very meaningful and
impactful way with low performance cost.

It reserves a slab allocation region, partitions that into arenas and
partitions those into dedicated regions for each size class with large
high entropy random guard regions around them.

Inside these size class regions, it skips slab locations to leave behind
guard slabs, providing a sparse heap. These are currently inserted at a
deterministic interval, but the plan is to randomize that to mitigate
heap sprays within the size class regions.

Freed slabs beyond the small amount of cached slabs are also replaced
with fresh guard regions, which is helpful. There's a quarantine for
these too, to keep them memory protected once they're become just like
the never allocated slab locations.

Large allocations (&gt; 128k) have randomly sized guards around them using
a random range based on a ratio to the allocation size. When a large
allocation is freed, it's quarantined by replacing it with a guard
region held onto as long as possible based on the large allocation
quarantine size.

&gt;  - zero-filling

It also provides write-after-free detection via checking the zero
filling at allocation time, and the slab allocation quarantine is
designed to work well with this.

&gt;  - MPK support

This isn't one of the major features.

&gt;  - randomization

This isn't simply a basic yes or no point about an allocator.

The slot randomization within slabs is the least impactful / important
form of this in the implementation, aside from the planned randomization
for choosing slabs within size class regions.

The quarantine randomization and high entropy bases for partitions are
much more important. The quarantine randomization and the FIFO portion
of it are also going to mix very well with the planned approach to using
memory tagging for deterministic use-after-free detection, while still
having deterministic sequential overflow detection and randomized tags
as a probabilistic general purpose memory corruption mitigation.

&gt;  - support for arenas

This is a completely dishonest and ridiculous misrepresentation of the
design and security properties laid out in that README. People should
read it for themselves and they'll see that your attempt at spinning
misinformation about it is a complete joke.

&gt; mozjemalloc:
&gt;  - arenas (we call them partitions)

Unlike hardened_malloc, they're mixed together and address space is
reused between them rather than having strong isolation. The approach in
hardened_malloc also partitions each size class. Calling the mozjemalloc
arenas partitions as if it's an implementation of a security feature is
a joke.

&gt;  - randomization (support for, not enabled by default due to limited
&gt; utility, but improvements coming)
&gt;  - double free protection
&gt;  - zero-filling
&gt; In Progress:
&gt;  - we're actively working on guard regions

As covered above, you're being misleading with each of these points, by
portraying these things as something black and white that the allocator
either has or doesn't have when that couldn't be further from reality.

In particular, talking about randomization and guard regions as if this
is a matter of having them or not having them is ridiculous. There is
more to invalid free detection than double free detection and how well
it works has a lot of variation. It can be deterministic detection like
the hardened_malloc implementation, or probabilistic detection that an
attacker could much more easily bypass. The reuse of freed allocations
also matters a lot, since once it's handed out again, a free based on
a past generation allocation won't be considered invalid, despite it
being wrong and dangerous. This is why the design of memory allocation
reuse and quarantines matters so much. The documentation on thread
caching in the hardened_malloc README elaborates on why that's not
compatible with a hardened allocator due to interfering with doing
anything like this properly.

&gt; Future Work:
&gt;  - out of line metadata

There's a huge variation in what this means. The hardened_malloc
metadata is fully out-of-line in a dedicated region, with that address
space never mixed / reused with anything else. The same applies to all
the size class regions within arenas.

&gt;  - MPK

For what exactly?

&gt; harden_malloc definitely has more bells and whistles than mozjemalloc.

The hardened_malloc implementation is far simpler and more minimal. It
has a core design focused heavily on having quantifiable, best in class
security. The security is built into the design from the ground up and
cannot simply be bolted onto to it or another allocator. I had to write
it in the first place because I was unable to turn OpenBSD malloc into
something comparable by simply continuing to bolt on additional security
features to it which was the original approach. It should also be noted
that OpenBSD malloc is a hardened allocator and shares many of the same
security properties from the core design. The main distinction in the
core approach is that hardened_malloc is heavily designed around taking
advantage of the large address space on modern machines.

&gt; But the benefit gained by slapping in an LD_PRELOAD and calling it a
&gt; day is small to zero. Probably negative because you'll not utilize
&gt; partitions by default. You'd need a particurally constrained
&gt; vulnerability to actually prevent exploitation - it's more likely
&gt; you'll just cost the attacker another 2-8 hours of work.

The claim that mozjemalloc has partitioning and hardened_malloc does not
couldn't be further from the truth. The opposite is true. What you claim
to be partitioning is not a proper implementation, and hardened_malloc
does have a proper implementation not only for arenas, but for dedicated
size class regions within those. I find it ridiculous how you attempt to
attack the project with these lies to promote your own work, which is
hardly comparable at all. It's not the same thing. Bolting on a few
security features to an allocator design that's exploitation friendly
from the ground up doesn't make it a hardened allocator. That's even
more true when the implementations of those features are unnecessarily
weak.

&gt; Out of line metadata is on-the-surface-attractive but... that tends to
&gt; only help when you have a off-by-one/four write and you corrupt
&gt; metadata state because it's the only thing you *can* do. With out of
&gt; line metadata, you can just corrupt a real object and effect a
&gt; different type of corruption. I'm pretty skeptical of the benefit at
&gt; this point, although I could be convinced. We don't see metadata
&gt; corruption attacks anymore - but I'm not sure if it's because we find
&gt; better exploit primitives or better vulnerabilities.

Out-of-line metadata is not simply about preventing attacks on the
metadata itself. It provides much more than that. I'm not sure why you
think your ignorant opinions on these topics matter, when you so clearly
don't know what you're talking about at all.

&gt; In particular, if you wanted to pursue hardened_malloc you would need
&gt; to use replace_malloc and wire up the partitions correctly.
&gt; Randomization will almost certainly not help (and will hurt
&gt; performance)*.

The hardened_malloc design is focused on reliable, deterministic memory
corruption mitigations. Randomization is used where possible, and in a
way that has a low impact on performance. The high entropy base
randomization for each size class region within arenas has no
significant impact on performance. The randomization for large
allocation (&gt; 128k) guard regions and that quarantine has no substantial
impact on performance. The impact from slot randomization and the slab
allocation quarantine is measurable but not high, and the slab
quarantine has no substantial impact.

&gt; MPK sounds nice but you have to use it correctly (which
&gt; requires application code changes), you have to ensure there are no
&gt; MPK gadgets, and oh wait no one can use it because it's only available
&gt; in Linux on server CPUs. =(

Using MPK is not one of the major features of hardened_malloc and the
usage doesn't rely on not having MPK gadgets. This is explicitly
documented in the README. It's the only optional security feature that's
not enabled by default. It should be pointed out that most of security
offered by hardened_malloc is not a feature that can be turned on or off
because it's the design itself that's hardened, not the fact that it has
some optional security features bolted onto it.

&gt; * One place randomization will help is on the other side of an IPC
&gt; boundary. e.g. in the parent process. I'm trying to get that enabled
&gt; for mozjemalloc in H2 2019.
&gt; 
&gt; In conclusion, while it's possible hardened_malloc could provide some
&gt; small security increase over mozjemalloc, the gap is much smaller than
&gt; it was when I advocated for allocator improvements 5 years ago, the
&gt; effort is definitely non-trivial, and the gap is closing.

No, you're just making false attacks and misleading comparisons / spin
to promote your own work, which is trash. You're being incredibly
dishonest and unethical. You didn't even bother to inform yourself about
hardened_malloc by actually reading through the documentation. Instead,
you just jump to conclusions and present yourself as an expert on topics
you are clearly incredibly ignorant about. You really don't know what
you're talking about, and your post on this mailing list is offensive.
Your post as a whole is nonsense, and your conclusion is bogus. I
recommend actually trying to read the documentation and learning a bit
about memory allocators, memory corruption and exploit mitigations
before lecturing people and attacking other projects.

Expect to hear more about this in the future, because I'll be contacting
Mozilla about the fact that you're spreading dishonest attacks and
misinformation about my work, which is a continuation of past harm
inflicted on me by Mozilla employees. You're digging up a past conflict
that was supposed to be put aside, so nice work with that. It's nice to
have another example to point to about damages inflicted by Mozilla. I
expect this to be made right just like the past attacks by Mozilla. I
want a retraction and an apology, but either way this is being included
in documentation on damages.

&gt; If people had the cycles to invest in something like this, I would
&gt; actually advocate for helping us test and benchmark Fuzzyfox, and see
&gt; if we can get the browser into a usable state with Fuzzyfox so we
&gt; could enable it in Tor Browser.

Maybe if you didn't spend your time trying to inflict harm on other
projects and individuals, people would be more interested in helping. I
highly recommend that no one contributes any time to Mozilla, which has
a history of taking advantage of contributors, lying to them and abusing
them. Mozilla is built on abusing volunteer labour, and your post here
is just a continuation of that. It's a thoroughly unethical company with
disgusting, unethical people like yourself at the forefront of it. I
have no idea why anyone would want to help scumbags like you.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821155724</emailId><senderName>Nicolas Vigier</senderName><senderEmail>boklm@mars-attacks.org</senderEmail><timestampReceived>2019-08-21 15:57:24-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Wed, 21 Aug 2019, Daniel Micay wrote:

&gt; 
&gt; No, you're just making false attacks and misleading comparisons / spin
&gt; to promote your own work, which is trash. You're being incredibly
&gt; dishonest and unethical. You didn't even bother to inform yourself about

It's fine to disagree with Tom about what he wrote in his previous email,
however calling him dishonest and unethical seems very wrong to me. If
anything he wrote was not correct or misleading, I doubt it was intentional,
and more likely it was some honest mistakes.

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821160412</emailId><senderName>Tom Ritter</senderName><senderEmail>tom@ritter.vg</senderEmail><timestampReceived>2019-08-21 16:04:12-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Replying to both emails]

My hope is that most of this stems from my cursory work in replying
and a general misunderstanding.

I've seen people advocating for replacing the memory allocator in Tor
Browser since I started the effort five years ago here:
https://github.com/iSECPartners/publications/blob/master/reports/Tor%20Browser%20Bundle/Tor%20Browser%20Bundle%20-%20iSEC%20Deliverable%201.3.pdf
 My replies were primarily focused on replying to the advocations I've
seen in the past, and the misconceptions I've seen repeated there
(like LD_PRELOAD).

On Wed, 21 Aug 2019 at 12:14, Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:
&gt; 
&gt; On Sat, Aug 17, 2019 at 09:17:40PM +0000, Tom Ritter wrote:
&gt; &gt; On Sat, 17 Aug 2019 at 15:06, procmem at riseup.net &lt;procmem at riseup.net&gt; \
&gt; &gt; wrote:
&gt; &gt; &gt; Question for the Tor Browser experts. Do you know if it is possible to
&gt; &gt; &gt; remotely fingerprint the browser based on the memory allocator it is
&gt; &gt; &gt; using? (via JS or content rendering)
&gt; &gt; 
&gt; &gt; Fingerprint what aspect of the browser/machine?
&gt; 
&gt; Performance-based fingerprinting of the browser can easily differentiate
&gt; between using a different malloc implementation. That can already obtain
&gt; a lot of fingerprinting information about the hardware and OS so this
&gt; may not actually matter much, but it's entirely possible.


Agreed.


&gt; &gt; &gt; We are thinking of switching Tor Browser to use the minimalist and
&gt; &gt; &gt; security oriented hardened_malloc written by Daniel Micay. Thanks.
&gt; &gt; 
&gt; &gt; I wouldn't advise giving up partitioning for.... what exactly? What
&gt; &gt; features does this allocator have that 68's jemalloc doesn't?
&gt; 
&gt; The hardened_malloc allocator heavily uses partitioning, and has a much
&gt; stronger implementation than the very weak approach in mozjemalloc. It
&gt; statically reserves memory regions for metadata and a dedicated region
&gt; for each arena, with each size class receiving a dedicated sub-region
&gt; within the arena. These sub-regions are placed within their own guard
&gt; region and each have a high entropy random base. It never mixes address
&gt; space between these regions or reuses the address space. This is much
&gt; different than what you call 'partitioning' in mozjemalloc which does
&gt; not really qualify. What you're talking about is mozjemalloc exposing an
&gt; API for choosing the arena from the code, which can certainly be done
&gt; with hardened_malloc too. However, in mozjemalloc, the address space for
&gt; different arenas is mixed together and reused between them. It's really
&gt; a stretch to call this partitioning, and it doesn't have the baseline
&gt; separation of size classes either.
&gt; 
&gt; People can read about hardened_malloc in the README:
&gt; 
&gt; https://github.com/GrapheneOS/hardened_malloc/blob/master/README.md#hardened-malloc
&gt; 
&gt; I don't know why you're making the misleading claim that people would
&gt; need to give up partitioning.

My reply about giving up partitioning here (which I clarify in the
second email) is that using LD_PRELOAD will negate partitioning.

&gt; It's also really a stretch to call what
&gt; Mozilla is doing in mozjemalloc partitioning in the first place, so your
&gt; claim is really quite backwards...

Let me start by asserting emphatically and agreeing that
hardened_malloc is a much stronger allocator than mozjemalloc or
jemalloc. PartitionAlloc is also for that matter.

Mozilla's partitioning has always been focused on preventing the
Use-After-Free problems that have plagued Firefox for years. Allocate
a DOM object, retain a pointer to it, free it, replace it with an
Arraybuffer, align the vtable entry, redirect execution. We allocate
ArrayBuffer contents and strings in separate arenas to avoid the
immediate reuse of these bytes.


On Wed, 21 Aug 2019 at 13:40, Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:
&gt; 
&gt; On Mon, Aug 19, 2019 at 04:09:36PM +0000, Tom Ritter wrote:
&gt; &gt; Okay I'm going to try and clear up a lot of misconceptions and stuff
&gt; &gt; here.  I don't own Firefox's memory allocator but I have worked in it,
&gt; &gt; recently, and am one of the people who are working on hardening it.
&gt; 
&gt; This makes it clear why you're spreading misinformation. You're going
&gt; out of your way to make false and misleading claims about mozjemalloc
&gt; and hardened_malloc, particularly your bogus comparisons between them.

My comparisons were rushed and cursory. I apologize and I'll clarify
my conclusions at the end of the email.

&gt; Bolting on a few weak implementations of hardening features to an
&gt; allocator inherently very friendly to memory corruption exploitation
&gt; does not make it anything close to being hardened allocator, sorry.

Fair.

&gt; &gt; Firefox's memory allocator is not jemalloc. It's probably better
&gt; &gt; referred to as mozjemalloc. We forked jemalloc and have been improving
&gt; &gt; it (at least from our perspective.) Any analysis of or comparison to
&gt; &gt; jemalloc is - at this point - outdated and should be redone from
&gt; &gt; scratch against mozjemalloc on mozilla-central.
&gt; 
&gt; It's not particularly different and the comparison isn't outdated.

As above, the comparisons I were referring to were the five year
document I wrote, and past trac tickets and threads here.

&gt; &gt; LD_PRELOAD='/path/to/libhardened_malloc.so' /path/to/program will do
&gt; &gt; nothing or approximately nothing. mozjemalloc uses mmap and low level
&gt; &gt; allocation tools to create chunks of memory to be used by its internal
&gt; &gt; memory allocator. To successfully replace Firefox memory allocator you
&gt; &gt; should either use LD_PRELOAD _with_ a --disable-jemalloc build OR
&gt; &gt; Firefox's replace_malloc functionality:
&gt; &gt; https://searchfox.org/mozilla-central/source/memory/build/replace_malloc.h
&gt; 
&gt; LD_PRELOAD is not how hardened_malloc is supposed to be used outside of
&gt; testing it anyway. It's meant to be integrated in libc, in which case
&gt; --disable-jemalloc would be enough, although it can also be integrated
&gt; into a specific program. That doesn't sidestep the importance of doing
&gt; other hardening in libc and the rest of the system though.

We agree on this.

&gt; &gt; Fingerprinting: It is most likely possible to be creative enough to
&gt; &gt; fingerprint what memory allocator is used. If we were to choose from
&gt; &gt; different allocators at runtime, I don't think that fingerprinting is
&gt; &gt; the worst thing open to us - it seems likely that any attacker who
&gt; &gt; does such a attack could also fingerprinting your CPU speed, RAM, and
&gt; &gt; your ASLR base addresses which depending on OS might not change until
&gt; &gt; reboot.
&gt; 
&gt; They can obtain a lot more than just information about the hardware. A
&gt; lot of the hardware and OS information that fingerprinting mitigations
&gt; try to hide are leaked via performance measurements. It can also leak a
&gt; lot of data from within the browser.

Also agreed. I wasn't mentioning things like the broad class of
pixel-stealing attacks, or the user activity-class of attacks. Which
is also the reason I advocate for getting Fuzzyfox into a usable
state.

&gt; &gt; The only reason I can think of to choose between allocators at runtime
&gt; &gt; is to introduce randomness into the allocation strategy. An attacker
&gt; &gt; relying on a blind overwrite may not be able to position their
&gt; &gt; overwrite reliably AND it has the cause the process to crash otherwise
&gt; &gt; they can just try again.
&gt; 
&gt; The hardened_malloc design provides far more than randomization

Of course. But the randomization I'm referring to isn't the
randomization inside the allocator, it's the random choice of *which*
allocator to use.

&gt; &gt; Allocators can introduce randomness themselves, you don't need to
&gt; &gt; choose between allocators to do that.
&gt; 
&gt; This is not something that can simply be bolted onto an existing
&gt; allocator design with a good approach. It needs to be more heavily
&gt; integrated into the design, and the same applies to an even greater
&gt; extent to more important security features than weak fine-grained
&gt; randomization.

I agree.


&gt; &gt; In virtually all browser exploits we have seen recently the attacker
&gt; &gt; creates exploitation primitives that allow partial memory read/write
&gt; &gt; and then full memory read/write. Randomness introduced is bypassed and
&gt; &gt; ineffective. I've seen a general trend away from randomness for this
&gt; &gt; purpose. The exception is when the attacker is heavily constrained -
&gt; &gt; like exploiting over IPC or in a network protocol. Not when the
&gt; &gt; attacker has a full Javascript execution environment available to
&gt; &gt; them.
&gt; &gt; 
&gt; &gt; When exploiting a memory corruption vulnerability, you can target the
&gt; &gt; application's memory (meaning, target a DOM object or an ArrayBuffer)
&gt; &gt; or you can target the memory allocator's metadata. While allocator
&gt; &gt; metadata corruption was popular in the past, I haven't seen it used
&gt; &gt; recently.
&gt; 
&gt; The importance of out-of-line metadata is far beyond simply preventing
&gt; exploitation through the allocator metadata. It's crucial for a hardened
&gt; allocator to have a reliable source of information about allocations
&gt; without trusting data read from freed allocations or next to the memory
&gt; allocations.

My understanding of this statement is that the metadata must be
protected against non-security-related corruption; if I'm
misunderstanding I'm happy to be educated.

&gt; &gt; Okay all that out of the way, let's talk about allocators.
&gt; &gt; 
&gt; &gt; I skimmed https://github.com/GrapheneOS/hardened_malloc and it looks
&gt; &gt; like it has:

I can see how my skimming, and simplistic bullet points, could be
insulting to someone who has invested such a great deal of work into
their project. I'm sorry; it's too easy to forget that on the other
side of text is a person who deserves our consideration, and that on
the other side of code is a significant investment of effort.

&gt; &gt; - support for arenas
&gt; 
&gt; This is a completely dishonest and ridiculous misrepresentation of the
&gt; design and security properties laid out in that README. People should
&gt; read it for themselves and they'll see that your attempt at spinning
&gt; misinformation about it is a complete joke.

I'd intended this as a simplified response to the expected points I'd
seen brought up in the past. I apologize if it came across as
intentionally dishonest.

&gt; &gt; mozjemalloc:
&gt; &gt; - arenas (we call them partitions)
&gt; 
&gt; Unlike hardened_malloc, they're mixed together and address space is
&gt; reused between them rather than having strong isolation. The approach in
&gt; hardened_malloc also partitions each size class. Calling the mozjemalloc
&gt; arenas partitions as if it's an implementation of a security feature is
&gt; a joke.

As I mentioned before, our implementation of partitions is focused on
preventing the immediate reuse of bytes to negate the common UAF
pattern we have seen for years. hardened_malloc's is clearly stronger.

&gt; &gt; - randomization (support for, not enabled by default due to limited
&gt; &gt; utility, but improvements coming)
&gt; &gt; - double free protection
&gt; &gt; - zero-filling
&gt; &gt; In Progress:
&gt; &gt; - we're actively working on guard regions
&gt; 
&gt; As covered above, you're being misleading with each of these points, by
&gt; portraying these things as something black and white that the allocator
&gt; either has or doesn't have

That's a fair criticism.

&gt; In particular, talking about randomization and guard regions as if this
&gt; is a matter of having them or not having them is ridiculous. There is
&gt; more to invalid free detection than double free detection and how well
&gt; it works has a lot of variation. It can be deterministic detection like
&gt; the hardened_malloc implementation, or probabilistic detection that an
&gt; attacker could much more easily bypass. The reuse of freed allocations
&gt; also matters a lot, since once it's handed out again, a free based on
&gt; a past generation allocation won't be considered invalid, despite it
&gt; being wrong and dangerous. This is why the design of memory allocation
&gt; reuse and quarantines matters so much. The documentation on thread
&gt; caching in the hardened_malloc README elaborates on why that's not
&gt; compatible with a hardened allocator due to interfering with doing
&gt; anything like this properly.

Also a fair assessment.

&gt; &gt; Future Work:
&gt; &gt; - out of line metadata
&gt; 
&gt; There's a huge variation in what this means. The hardened_malloc
&gt; metadata is fully out-of-line in a dedicated region, with that address
&gt; space never mixed / reused with anything else. The same applies to all
&gt; the size class regions within arenas.

That's very strong protection - I hope we can integrate the same level
of security in the future.

&gt; &gt; - MPK
&gt; 
&gt; For what exactly?

Still TBD; but our initial thoughts are using it in the JIT Engine and
to effect XOM for certain use cases.


&gt; &gt; But the benefit gained by slapping in an LD_PRELOAD and calling it a
&gt; &gt; day is small to zero. Probably negative because you'll not utilize
&gt; &gt; partitions by default. You'd need a particurally constrained
&gt; &gt; vulnerability to actually prevent exploitation - it's more likely
&gt; &gt; you'll just cost the attacker another 2-8 hours of work.
&gt; 
&gt; The claim that mozjemalloc has partitioning and hardened_malloc does not
&gt; couldn't be further from the truth.

A misunderstanding: I didn't claim that; I claimed that using
LD_PRELOAD would not make use of partitions.

&gt; I find it ridiculous how you attempt to
&gt; attack the project with these lies to promote your own work, which is
&gt; hardly comparable at all. It's not the same thing. Bolting on a few
&gt; security features to an allocator design that's exploitation friendly
&gt; from the ground up doesn't make it a hardened allocator. That's even
&gt; more true when the implementations of those features are unnecessarily
&gt; weak.

My intention was not to promote my own work; or negate yours. I'm
sorry it came across that way. As I said at the top of this email,
hardened_malloc is clearly a much stronger allocator that mozjemalloc.

I'll try to clear up my intention with my email here:

Replacing the allocator used by Tor Browser naively (LD_PRELOAD) would
be a net loss in security. I think (?) you'd agree. Replacing the
allocator used by Tor Browser correctly would grant a hardened
allocator but would not significantly affect how the past several
exploits written against Firefox would be written, and would not be a
significant impediment to exploit authors who are using the type of
vulnerabilities we have seen exploited of late.

It would certainly affect the exploitation of more limited
vulnerabilities (fixed-byte over-reads/writes).

&gt; &gt; Out of line metadata is on-the-surface-attractive but... that tends to
&gt; &gt; only help when you have a off-by-one/four write and you corrupt
&gt; &gt; metadata state because it's the only thing you *can* do. With out of
&gt; &gt; line metadata, you can just corrupt a real object and effect a
&gt; &gt; different type of corruption. I'm pretty skeptical of the benefit at
&gt; &gt; this point, although I could be convinced. We don't see metadata
&gt; &gt; corruption attacks anymore - but I'm not sure if it's because we find
&gt; &gt; better exploit primitives or better vulnerabilities.
&gt; 
&gt; Out-of-line metadata is not simply about preventing attacks on the
&gt; metadata itself. It provides much more than that. I'm not sure why you
&gt; think your ignorant opinions on these topics matter, when you so clearly
&gt; don't know what you're talking about at all.

Unfair! :)

&gt; &gt; In particular, if you wanted to pursue hardened_malloc you would need
&gt; &gt; to use replace_malloc and wire up the partitions correctly.
&gt; &gt; Randomization will almost certainly not help (and will hurt
&gt; &gt; performance)*.
&gt; 
&gt; The hardened_malloc design is focused on reliable, deterministic memory
&gt; corruption mitigations. Randomization is used where possible, and in a
&gt; way that has a low impact on performance. The high entropy base
&gt; randomization for each size class region within arenas has no
&gt; significant impact on performance. The randomization for large
&gt; allocation (&gt; 128k) guard regions and that quarantine has no substantial
&gt; impact on performance. The impact from slot randomization and the slab
&gt; allocation quarantine is measurable but not high, and the slab
&gt; quarantine has no substantial impact.

My statement on performance was based on my experiments enabling our
limited randomization in the Content Process (numbers lost, but they
came from https://bugzilla.mozilla.org/show_bug.cgi?id=1376408#c18).
It really hurt DOM node traversal. I'll concede it's possible that
hardened_malloc may have less any performance cost here - I haven't
tested it. But... I'm skeptical.

(You seem to agree that randomization is not a strong security feature?)

&gt; &gt; MPK sounds nice but you have to use it correctly (which
&gt; &gt; requires application code changes), you have to ensure there are no
&gt; &gt; MPK gadgets, and oh wait no one can use it because it's only available
&gt; &gt; in Linux on server CPUs. =(
&gt; 
&gt; Using MPK is not one of the major features of hardened_malloc and the
&gt; usage doesn't rely on not having MPK gadgets. This is explicitly
&gt; documented in the README. It's the only optional security feature that's
&gt; not enabled by default. It should be pointed out that most of security
&gt; offered by hardened_malloc is not a feature that can be turned on or off
&gt; because it's the design itself that's hardened, not the fact that it has
&gt; some optional security features bolted onto it.

Fair! (Although I'm confused about your comment saying you can provide
protection without eliminating MPK gadgets.)

&gt; &gt; In conclusion, while it's possible hardened_malloc could provide some
&gt; &gt; small security increase over mozjemalloc, the gap is much smaller than
&gt; &gt; it was when I advocated for allocator improvements 5 years ago, the
&gt; &gt; effort is definitely non-trivial, and the gap is closing.
&gt; 
&gt; No, you're just making false attacks and misleading comparisons / spin
&gt; to promote your own work, which is trash.

=(

&gt; You're being incredibly
&gt; dishonest and unethical.

I'd hope that the principal of charity would lead to the conclusion
that instead I was being simplistic and ignorant.

&gt; You didn't even bother to inform yourself about
&gt; hardened_malloc by actually reading through the documentation. Instead,
&gt; you just jump to conclusions and present yourself as an expert on topics
&gt; you are clearly incredibly ignorant about. You really don't know what
&gt; you're talking about, and your post on this mailing list is offensive.
&gt; Your post as a whole is nonsense, and your conclusion is bogus.

Which conclusion? The one I didn't make (but certainly implied) that
mozjemalloc is comparable security-wise to hardened_malloc? I agree,
such a conclusion is bogus.

Or the one that replacing the allocator will not have a significant
effect on the exploits written for the past couple years of Firefox
expoits?

This seems to be the central misunderstanding, and why I agree that
you are entitled to take offense.


&gt; [ending statements]

I don't have any knowledge of, or context about, your past
interactions with Mozilla. We all wear many hats; but this discussion
isn't about Mozilla, Firefox, or replacing Firefox's memory allocator
- it's about Tor Browser. If you'd like to escalate your concerns,
they can be forwarded to Tor's Community Council; that information is
available at https://trac.torproject.org/projects/tor/wiki/org/CommunityCouncil

-tom
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190821173717</emailId><senderName>Daniel Micay</senderName><senderEmail>danielmicay@gmail.com</senderEmail><timestampReceived>2019-08-21 17:37:17-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Wed, 21 Aug 2019 at 11:57, Nicolas Vigier &lt;boklm@mars-attacks.org&gt; wrote:
&gt;
&gt; On Wed, 21 Aug 2019, Daniel Micay wrote:
&gt;
&gt; &gt;
&gt; &gt; No, you're just making false attacks and misleading comparisons / spin
&gt; &gt; to promote your own work, which is trash. You're being incredibly
&gt; &gt; dishonest and unethical. You didn't even bother to inform yourself about
&gt;
&gt; It's fine to disagree with Tom about what he wrote in his previous email,
&gt; however calling him dishonest and unethical seems very wrong to me. If
&gt; anything he wrote was not correct or misleading

If someone is going to criticize other people's work and dismiss it as
nearly useless without even somewhat informing themselves about it,
they should expect to be called out on that. You might find my reply
offensive, but I found the email that I was replying to extremely
offensive and I had to subscribe to this list and figure out how to
send a reply to a past email from the archive to defend the value of
my work. It wasn't fair or accurate criticisms or comparisons.

It's not the first attack that I responded to today or the last. It's
one of many. The depth and tone of my responses varies based on what
I'm responding to. If I can assume good faith, I will do it, but I
could not do that here with how it was presented. All of this is time
is taken away from working on the projects and that hurts, but so does
leaving it unchallenged.

&gt; I doubt it was intentional and more likely it was some honest mistakes.

I don't see how you can suggest it wasn't the intention. It's
dismissing the project / work and the value of it without even putting
in basic effort to learn what it is and what it does. It's presented
as informed, expert commentary when it isn't. I had a serious problem
with it and I responded in the way I felt was suitable. I intended to
express how I felt about it which wouldn't have been accomplished by
using forced diplomatic wording. I said that they were being dishonest
and unethical with their actions. If people don't want to be called
out for that, they shouldn't do it.

Mozilla has a history of harming me. I've documented this as one more
case of attacks from Mozilla to go along with everything else. I see
no reason to put up with it or tolerate it. Mozilla should expect that
one day they're going to be held accountable. If people at Mozilla
aren't aware of the unethical behavior it regularly engages in
including an exploitative approach to contributors, they should inform
themselves. My issue is primarily with Mozilla as an organization and
a culture rather than any specific individuals participating in that.
I think the problem is ultimately that self-righteous, dishonest
organization presenting itself as a benevolent force of good when it
really doesn't line up with the reality. It taints how the people
involved approach things. Since these past issues were never
addressed, and the company hasn't changed, any attacks from people at
Mozilla are a spark igniting this existing conflict. It's not my
responsibility to inform all their employees about what the
organization has done and failed to resolve.

I'm not planning on participating on this list beyond defending myself
here and in future cases.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821202831</emailId><senderName>Ryan Duff</senderName><senderEmail>ry@nduff.com</senderEmail><timestampReceived>2019-08-21 20:28:31-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Attachment #2 (multipart/alternative)]


&gt; If someone is going to criticize other people's work and dismiss it as
nearly useless without even somewhat informing themselves about it,
they should expect to be called out on that.

I don't have a dog in this fight but, as an outside observer, I never got
the impression that this is what Tom was doing. I read it as
"hardened_malloc is better but we are trying to do these *n *things to try
to close that gap". I didn't read it as an attack at all.

On Wed, Aug 21, 2019 at 1:37 PM Daniel Micay &lt;danielmicay@gmail.com&gt; wrote:

&gt; On Wed, 21 Aug 2019 at 11:57, Nicolas Vigier &lt;boklm@mars-attacks.org&gt;
&gt; wrote:
&gt; &gt;
&gt; &gt; On Wed, 21 Aug 2019, Daniel Micay wrote:
&gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; No, you're just making false attacks and misleading comparisons / spin
&gt; &gt; &gt; to promote your own work, which is trash. You're being incredibly
&gt; &gt; &gt; dishonest and unethical. You didn't even bother to inform yourself
&gt; about
&gt; &gt;
&gt; &gt; It's fine to disagree with Tom about what he wrote in his previous email,
&gt; &gt; however calling him dishonest and unethical seems very wrong to me. If
&gt; &gt; anything he wrote was not correct or misleading
&gt;
&gt; If someone is going to criticize other people's work and dismiss it as
&gt; nearly useless without even somewhat informing themselves about it,
&gt; they should expect to be called out on that. You might find my reply
&gt; offensive, but I found the email that I was replying to extremely
&gt; offensive and I had to subscribe to this list and figure out how to
&gt; send a reply to a past email from the archive to defend the value of
&gt; my work. It wasn't fair or accurate criticisms or comparisons.
&gt;
&gt; It's not the first attack that I responded to today or the last. It's
&gt; one of many. The depth and tone of my responses varies based on what
&gt; I'm responding to. If I can assume good faith, I will do it, but I
&gt; could not do that here with how it was presented. All of this is time
&gt; is taken away from working on the projects and that hurts, but so does
&gt; leaving it unchallenged.
&gt;
&gt; &gt; I doubt it was intentional and more likely it was some honest mistakes.
&gt;
&gt; I don't see how you can suggest it wasn't the intention. It's
&gt; dismissing the project / work and the value of it without even putting
&gt; in basic effort to learn what it is and what it does. It's presented
&gt; as informed, expert commentary when it isn't. I had a serious problem
&gt; with it and I responded in the way I felt was suitable. I intended to
&gt; express how I felt about it which wouldn't have been accomplished by
&gt; using forced diplomatic wording. I said that they were being dishonest
&gt; and unethical with their actions. If people don't want to be called
&gt; out for that, they shouldn't do it.
&gt;
&gt; Mozilla has a history of harming me. I've documented this as one more
&gt; case of attacks from Mozilla to go along with everything else. I see
&gt; no reason to put up with it or tolerate it. Mozilla should expect that
&gt; one day they're going to be held accountable. If people at Mozilla
&gt; aren't aware of the unethical behavior it regularly engages in
&gt; including an exploitative approach to contributors, they should inform
&gt; themselves. My issue is primarily with Mozilla as an organization and
&gt; a culture rather than any specific individuals participating in that.
&gt; I think the problem is ultimately that self-righteous, dishonest
&gt; organization presenting itself as a benevolent force of good when it
&gt; really doesn't line up with the reality. It taints how the people
&gt; involved approach things. Since these past issues were never
&gt; addressed, and the company hasn't changed, any attacks from people at
&gt; Mozilla are a spark igniting this existing conflict. It's not my
&gt; responsibility to inform all their employees about what the
&gt; organization has done and failed to resolve.
&gt;
&gt; I'm not planning on participating on this list beyond defending myself
&gt; here and in future cases.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt;

[Attachment #5 (text/html)]

&lt;div dir="ltr"&gt;&lt;div dir="ltr"&gt;&gt; If someone is going to criticize other \
people's work and dismiss it as&lt;br&gt;nearly useless without even somewhat informing \
themselves about it,&lt;br&gt;they should expect to be called out on that.&lt;br&gt;&lt;/div&gt;&lt;div \
dir="ltr"&gt;&lt;br&gt;&lt;/div&gt;&lt;div dir="ltr"&gt;I don't have a dog in this fight but, as an \
outside observer, I never got the impression that this is what Tom was doing. I read \
it as "hardened_malloc is better but we are trying to do these &lt;i&gt;n &lt;/i&gt;things \
to try to close that gap". I didn't read it as an attack at \
all.&lt;/div&gt;&lt;br&gt;&lt;div class="gmail_quote"&gt;&lt;div dir="ltr" class="gmail_attr"&gt;On Wed, Aug \
21, 2019 at 1:37 PM Daniel Micay &lt;&lt;a \
href="mailto:danielmicay@gmail.com"&gt;danielmicay@gmail.com&lt;/a&gt;&gt; \
wrote:&lt;br&gt;&lt;/div&gt;&lt;blockquote class="gmail_quote" style="margin:0px 0px 0px \
0.8ex;border-left:1px solid rgb(204,204,204);padding-left:1ex"&gt;On Wed, 21 Aug 2019 at \
11:57, Nicolas Vigier &lt;&lt;a href="mailto:boklm@mars-attacks.org" \
target="_blank"&gt;boklm@mars-attacks.org&lt;/a&gt;&gt; wrote:&lt;br&gt; &gt;&lt;br&gt;
&gt; On Wed, 21 Aug 2019, Daniel Micay wrote:&lt;br&gt;
&gt;&lt;br&gt;
&gt; &gt;&lt;br&gt;
&gt; &gt; No, you're just making false attacks and misleading comparisons / \
spin&lt;br&gt; &gt; &gt; to promote your own work, which is trash. You're being \
incredibly&lt;br&gt; &gt; &gt; dishonest and unethical. You didn't even bother to \
inform yourself about&lt;br&gt; &gt;&lt;br&gt;
&gt; It's fine to disagree with Tom about what he wrote in his previous \
email,&lt;br&gt; &gt; however calling him dishonest and unethical seems very wrong to me. \
If&lt;br&gt; &gt; anything he wrote was not correct or misleading&lt;br&gt;
&lt;br&gt;
If someone is going to criticize other people's work and dismiss it as&lt;br&gt;
nearly useless without even somewhat informing themselves about it,&lt;br&gt;
they should expect to be called out on that. You might find my reply&lt;br&gt;
offensive, but I found the email that I was replying to extremely&lt;br&gt;
offensive and I had to subscribe to this list and figure out how to&lt;br&gt;
send a reply to a past email from the archive to defend the value of&lt;br&gt;
my work. It wasn't fair or accurate criticisms or comparisons.&lt;br&gt;
&lt;br&gt;
It's not the first attack that I responded to today or the last. It's&lt;br&gt;
one of many. The depth and tone of my responses varies based on what&lt;br&gt;
I'm responding to. If I can assume good faith, I will do it, but I&lt;br&gt;
could not do that here with how it was presented. All of this is time&lt;br&gt;
is taken away from working on the projects and that hurts, but so does&lt;br&gt;
leaving it unchallenged.&lt;br&gt;
&lt;br&gt;
&gt; I doubt it was intentional and more likely it was some honest mistakes.&lt;br&gt;
&lt;br&gt;
I don't see how you can suggest it wasn't the intention. It's&lt;br&gt;
dismissing the project / work and the value of it without even putting&lt;br&gt;
in basic effort to learn what it is and what it does. It's presented&lt;br&gt;
as informed, expert commentary when it isn't. I had a serious problem&lt;br&gt;
with it and I responded in the way I felt was suitable. I intended to&lt;br&gt;
express how I felt about it which wouldn't have been accomplished by&lt;br&gt;
using forced diplomatic wording. I said that they were being dishonest&lt;br&gt;
and unethical with their actions. If people don't want to be called&lt;br&gt;
out for that, they shouldn't do it.&lt;br&gt;
&lt;br&gt;
Mozilla has a history of harming me. I've documented this as one more&lt;br&gt;
case of attacks from Mozilla to go along with everything else. I see&lt;br&gt;
no reason to put up with it or tolerate it. Mozilla should expect that&lt;br&gt;
one day they're going to be held accountable. If people at Mozilla&lt;br&gt;
aren't aware of the unethical behavior it regularly engages in&lt;br&gt;
including an exploitative approach to contributors, they should inform&lt;br&gt;
themselves. My issue is primarily with Mozilla as an organization and&lt;br&gt;
a culture rather than any specific individuals participating in that.&lt;br&gt;
I think the problem is ultimately that self-righteous, dishonest&lt;br&gt;
organization presenting itself as a benevolent force of good when it&lt;br&gt;
really doesn't line up with the reality. It taints how the people&lt;br&gt;
involved approach things. Since these past issues were never&lt;br&gt;
addressed, and the company hasn't changed, any attacks from people at&lt;br&gt;
Mozilla are a spark igniting this existing conflict. It's not my&lt;br&gt;
responsibility to inform all their employees about what the&lt;br&gt;
organization has done and failed to resolve.&lt;br&gt;
&lt;br&gt;
I'm not planning on participating on this list beyond defending myself&lt;br&gt;
here and in future cases.&lt;br&gt;
_______________________________________________&lt;br&gt;
tor-dev mailing list&lt;br&gt;
&lt;a href="mailto:tor-dev@lists.torproject.org" \
target="_blank"&gt;tor-dev@lists.torproject.org&lt;/a&gt;&lt;br&gt; &lt;a \
href="https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev" rel="noreferrer" \
target="_blank"&gt;https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev&lt;/a&gt;&lt;br&gt; \
&lt;/blockquote&gt;&lt;/div&gt;&lt;/div&gt;


[Attachment #6 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190821204213</emailId><senderName>Richard Pospesel</senderName><senderEmail>richard@torproject.org</senderEmail><timestampReceived>2019-08-21 20:42:13-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

[Attachment #2 (multipart/signed)]

[Attachment #4 (multipart/mixed)]


Yeah same, this convo went from 'wow an interesting discussion about
allocators' to 'fuck you Tom' real quick and without provocation.

From a human standpoint, maybe try and be your best self? Or (if you
prefer) from a practical standpoint, maybe berating on one of the devs
that would be reviewing your allocator patches isn't the best path
forward to achieving your goals?

best,
-Richard

On 8/21/19 1:28 PM, Ryan Duff wrote:
&gt;&gt; If someone is going to criticize other people's work and dismiss it as
&gt; nearly useless without even somewhat informing themselves about it,
&gt; they should expect to be called out on that.
&gt; 
&gt; I don't have a dog in this fight but, as an outside observer, I never
&gt; got the impression that this is what Tom was doing. I read it as
&gt; "hardened_malloc is better but we are trying to do these /n /things to
&gt; try to close that gap". I didn't read it as an attack at all.
&gt; 
&gt; On Wed, Aug 21, 2019 at 1:37 PM Daniel Micay &lt;danielmicay@gmail.com
&gt; &lt;mailto:danielmicay@gmail.com&gt;&gt; wrote:
&gt; 
&gt;     On Wed, 21 Aug 2019 at 11:57, Nicolas Vigier &lt;boklm@mars-attacks.org
&gt;     &lt;mailto:boklm@mars-attacks.org&gt;&gt; wrote:
&gt;     &gt;
&gt;     &gt; On Wed, 21 Aug 2019, Daniel Micay wrote:
&gt;     &gt;
&gt;     &gt; &gt;
&gt;     &gt; &gt; No, you're just making false attacks and misleading comparisons
&gt;     / spin
&gt;     &gt; &gt; to promote your own work, which is trash. You're being incredibly
&gt;     &gt; &gt; dishonest and unethical. You didn't even bother to inform
&gt;     yourself about
&gt;     &gt;
&gt;     &gt; It's fine to disagree with Tom about what he wrote in his previous
&gt;     email,
&gt;     &gt; however calling him dishonest and unethical seems very wrong to me. If
&gt;     &gt; anything he wrote was not correct or misleading
&gt; 
&gt;     If someone is going to criticize other people's work and dismiss it as
&gt;     nearly useless without even somewhat informing themselves about it,
&gt;     they should expect to be called out on that. You might find my reply
&gt;     offensive, but I found the email that I was replying to extremely
&gt;     offensive and I had to subscribe to this list and figure out how to
&gt;     send a reply to a past email from the archive to defend the value of
&gt;     my work. It wasn't fair or accurate criticisms or comparisons.
&gt; 
&gt;     It's not the first attack that I responded to today or the last. It's
&gt;     one of many. The depth and tone of my responses varies based on what
&gt;     I'm responding to. If I can assume good faith, I will do it, but I
&gt;     could not do that here with how it was presented. All of this is time
&gt;     is taken away from working on the projects and that hurts, but so does
&gt;     leaving it unchallenged.
&gt; 
&gt;     &gt; I doubt it was intentional and more likely it was some honest
&gt;     mistakes.
&gt; 
&gt;     I don't see how you can suggest it wasn't the intention. It's
&gt;     dismissing the project / work and the value of it without even putting
&gt;     in basic effort to learn what it is and what it does. It's presented
&gt;     as informed, expert commentary when it isn't. I had a serious problem
&gt;     with it and I responded in the way I felt was suitable. I intended to
&gt;     express how I felt about it which wouldn't have been accomplished by
&gt;     using forced diplomatic wording. I said that they were being dishonest
&gt;     and unethical with their actions. If people don't want to be called
&gt;     out for that, they shouldn't do it.
&gt; 
&gt;     Mozilla has a history of harming me. I've documented this as one more
&gt;     case of attacks from Mozilla to go along with everything else. I see
&gt;     no reason to put up with it or tolerate it. Mozilla should expect that
&gt;     one day they're going to be held accountable. If people at Mozilla
&gt;     aren't aware of the unethical behavior it regularly engages in
&gt;     including an exploitative approach to contributors, they should inform
&gt;     themselves. My issue is primarily with Mozilla as an organization and
&gt;     a culture rather than any specific individuals participating in that.
&gt;     I think the problem is ultimately that self-righteous, dishonest
&gt;     organization presenting itself as a benevolent force of good when it
&gt;     really doesn't line up with the reality. It taints how the people
&gt;     involved approach things. Since these past issues were never
&gt;     addressed, and the company hasn't changed, any attacks from people at
&gt;     Mozilla are a spark igniting this existing conflict. It's not my
&gt;     responsibility to inform all their employees about what the
&gt;     organization has done and failed to resolve.
&gt; 
&gt;     I'm not planning on participating on this list beyond defending myself
&gt;     here and in future cases.
&gt;     _______________________________________________
&gt;     tor-dev mailing list
&gt;     tor-dev@lists.torproject.org &lt;mailto:tor-dev@lists.torproject.org&gt;
&gt;     https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 
&gt; 
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
&gt; 


["signature.asc" (application/pgp-signature)]
[Attachment #8 (text/plain)]

_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190821213357</emailId><senderName>Daniel Micay</senderName><senderEmail>danielmicay@gmail.com</senderEmail><timestampReceived>2019-08-21 21:33:57-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Wed, 21 Aug 2019 at 16:42, Richard Pospesel &lt;richard@torproject.org&gt; wrote:
&gt;
&gt; Yeah same, this convo went from 'wow an interesting discussion about
&gt; allocators' to 'fuck you Tom' real quick and without provocation.

The email I replied to makes a bunch of false claims and attacks on my
project. It was never a friendly conversation. It was a series of
attacks and misleading claims which I had to go out of my way to
counter. I was not subscribed to this list and had to figure out how
to reply to a past thread to defend my work. If you got the impression
that I was posting here to participate in an interesting discussion,
you were wrong. I'm posting here because there was an incredibly
offensive post attacking / dismissing what I've spent so much time
working on from someone that hadn't even bothered to read the
documentation explaining it. I don't want to be wasting my time here.
I want to be doing useful privacy / security work and not having to
keep defending my work from misinformation. My response is absolutely
not without provocation. Every day, there are people attacking my work
with misinformation. This is yet another case of it, and it happens to
be from someone working at a company with an unresolved conflict with
me where they took advantage of me and substantially harmed me. This
is not the only case that I've had to defend myself or my work today,
and the people who need to stop are the ones spreading dishonest
attacks / misinformation. I replied with facts, and it's a fact that
the post was incredibly misleading spin.

&gt; From a human standpoint, maybe try and be your best self?

This is my best self, standing up for myself against people inflicting
harm on me. Maybe you should stop supporting unethical and dishonest
behavior including attacking a project and dismissing the niche for it
without even understanding the basics of it, while falsely pretending
to be an expert on the topic. It's not me that needs to start being a
better person. It's you that's supporting this. It's not my community
endorsing dishonesty. This doesn't happen in the communities that I
manage. I stop people from attacking other projects with
misinformation and false claims, even if I don't like those projects.
I correct it, and if they don't stop, they simply get banned. I expect
that people stick to the facts and don't misrepresent them. Dishonesty
is the most prominent issue in the privacy / security world. There are
endless projects / products making dishonest claims about themselves
and their competitors, and users are not in a position to evaluate
those claims. Those users rely on experts being honest and people not
pretending to be experts on something they don't know about.

&gt; Or (if you prefer) from a practical standpoint, maybe berating on one of the devs
&gt; that would be reviewing your allocator patches isn't the best path
&gt; forward to achieving your goals?

I have no intention of submitting patches to any Mozilla projects.
Even if I did contribute to jemalloc again in the future, that's not a
Mozilla project. I don't have any issues with the jemalloc developers
or project. Also, to be clear, jemalloc is not in any way a hardened
allocator and the kind of security work that I do is not in scope for
it. The patches that I submitted to jemalloc in the past were
performance improvements and had nothing to do with my work on
security or GrapheneOS. The hardened_malloc project is not a fork of
an existing malloc implementation, and certainly not jemalloc. I would
recommend reading
https://github.com/GrapheneOS/hardened_malloc/blob/master/README.md
rather than continuing what Tom started by making bad assumptions. My
goals have nothing to do with submitting any patches to Mozilla
projects or jemalloc. I have a pile of bugs including security issues
that I've found in Mozilla products that I cannot report to them
because of how I've been treated. Improving their software is their
problem, not mine. They drove me away a long time ago.

I would suggest that if people don't want to be called out for
spreading misinformation and making dishonest / misleading claims,
they should simply avoid doing it. You won't find me trashing and
dismissing jemalloc anywhere. It's a solid project making sensible
design compromises based on the goals. It's heavily oriented towards
throughput, low fragmentation and efficiency. It's not a hardened
allocator, and is in fact extremely friendly to exploitation even
compared to a traditional baseline like dlmalloc. It isn't meant to be
a hardened allocator, and that's not some design flaw, but rather the
consequence of all the design choices and compromises involved in it.
An allocator cannot be all things to all people. There is no best
allocator for all use cases / needs and there won't be one. They have
substantial design compromises / trade-offs. This applies to lots of
software and many things beyond software. I have no problem with
someone stating that hardened_malloc isn't for them or their project
and optionally explaining why. My issue is with someone attacking it
with misleading / false claims and portraying it as negligibly useful
or something that can be obsoleted with some tweaks / features bolted
onto jemalloc.

The equivalent would be someone that's seen / portrayed as an expert
completely downplaying the work of Tor developers, dismissing the
usefulness of the project and portraying matching what it provides as
simply a matter of making some tweaks to OpenVPN. That's much less
personal, because it's an attack on a collaborative project by a bunch
of people, not the work of a specific individual. It would also be
much more easily seen as bogus compared to someone doing the same
thing with memory allocators. It's very harmful to have someone making
those false claims about my work. This is my full time job. It's how I
earn an income. There is no company funding my work on this but rather
I depend entirely on donations. I depend on people understanding the
value of the work and someone attacking it with false claims is a
direct attack on the sustainability of the project and my job. It's an
extremely personal attack. I'm perfectly fine with people criticizing
it but they need to be honest and stick to facts. If they have no clue
what they're talking about and haven't even read the documentation,
they shouldn't be talking about as if they're an expert, especially if
what they're doing is attacking / dismissing it. I put a lot of work
into writing that kind of documentation for the projects too. The
reality is that I have to deal with people attacking these projects
with misinformation on quite literally a daily basis and I don't
tolerate it.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190821214245</emailId><senderName>Daniel Micay</senderName><senderEmail>danielmicay@gmail.com</senderEmail><timestampReceived>2019-08-21 21:42:45-0400</timestampReceived><subject>Re: [tor-dev] TBB Memory Allocator choice fingerprint implications</subject><body>

On Wed, 21 Aug 2019 at 16:28, Ryan Duff &lt;ry@nduff.com&gt; wrote:
&gt; 
&gt; &gt; If someone is going to criticize other people's work and dismiss it as
&gt; nearly useless without even somewhat informing themselves about it,
&gt; they should expect to be called out on that.
&gt; 
&gt; I don't have a dog in this fight but, as an outside observer, I never got the \
&gt; impression that this is what Tom was doing. I read it as "hardened_malloc is better \
&gt; but we are trying to do these n things to try to close that gap". I didn't read it \
&gt; as an attack at all.

Skipping actually reading the documentation about what it does and
dismissing it as only being a couple features that could be added to
jemalloc is ignorant misinformation and what I find offensive.
Presenting it as a situation where they could simply bolt on some
security features to jemalloc and provide something comparable is the
problem. The list was also ridiculous, and simply wrong. What I found
dishonest is that it's portrayed as if it's an expert's assessment of
the differences rather than a bunch of poorly informed assumptions and
assorted misinformation. It was not a fair attempt to actually
evaluate hardened_malloc and compare it, but rather a lazy attempt to
dismiss it and downplay the advantages on the security front. Now,
consider that this is a personal project that I work on, using my own
time, with only donations supporting my work. It's not a product from
a company or a collaborative project. No one else has written a single
line of code in it, or played a role in the design. It's an attack on
my work, and myself, including my credibility since I present it as
having substantial advantages and here's this person who seems like an
expert on the topic (but hasn't even read the README or looked in any
detail at it) from Mozilla dismissing it.

The gap between a hardened allocator design and a performance-oriented
allocator design has if anything been widening due to divergence in
design trade-offs / compromises. The glibc allocator recently got a
lot worse on the security front (it was already awful) by adding
thread caching, which is fantastic for performance. There have been
many similar performance improvements in jemalloc reducing security in
the past couple years.

Memory tagging is only going to increase the divergence with how many
possibilities it opens up and how well it synergizes with hardened
allocator designs.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190709164648</emailId><senderName>Nick Mathewson</senderName><senderEmail>nickm@torproject.org</senderEmail><timestampReceived>2019-07-09 16:46:48-0400</timestampReceived><subject>[tor-dev] Current plans for 0.4.1.x stable</subject><body>

Hi!

We're currently on track to get a stable release out on the planned
release date (August 15), which would be seriously impressive for us.

To do this, we'll need to get a release candidate out by late July.
And in order to do _that_, we'll need to prioritize the remaining
0.4.1.x tickets.

Here are all the tickets currently labeled with the "041-should" and
"041-must" keywords:

https://trac.torproject.org/projects/tor/wiki/org/teams/NetworkTeam/CoreTorReleases/041Status

Are any of these tickets items that we must do before 0.4.1.x can be
stable?  If so, we should label them with 041-must.  Please let us
know on the ticket if there is any must-do ticket _not_ labelled with
041-must.

Additionally, we should mark all the items (typically CI-related) that
we can safely merge post-release.

best wishes,
-- 
Nick
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190711142156</emailId><senderName>teor</senderName><senderEmail>teor@riseup.net</senderEmail><timestampReceived>2019-07-11 14:21:56-0400</timestampReceived><subject>Re: [tor-dev] resolving DNS TXT records?</subject><body>



On July 11, 2019 1:59:00 PM UTC, nusenu &lt;nusenu-lists@riseup.net&gt; wrote:
&gt; Hi,
&gt; as far as I can tell there is no way for a tor client to ask an exit to
&gt; resolve
&gt; a given TXT record and to provide the answer for it.
&gt; 
&gt; Just wanted to make sure there is even no hack around that limitation.

A few exits allow connections to TCP port 53, so you can do arbitrary DNS queries to \
any DNS server using those exits.

&gt; https://gitweb.torproject.org/torspec.git/tree/proposals/219-expanded-dns.txt

T

--
teor
----------------------------------------------------------------------
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev


</body></email><email><emailId>20190723112744</emailId><senderName>George Kadianakis</senderName><senderEmail>desnacked@riseup.net</senderEmail><timestampReceived>2019-07-23 11:27:44-0400</timestampReceived><subject>[tor-dev] Status of open circuit padding tickets</subject><body>

Hello Nick and Mike,

here is a summary of the current state of open circpad tickets, which I
tried to tidy up today. These are all the tickets I had in my radar and
I hope I didn't miss any.

I will be on leave starting the day after tomorrow (25th) so I wanted to
inform you of the status quo:

0.4.1:
    #31024: Coverity: circpadding: always check circpad_machine_current_state() - [needs_review]
            - This is done and in needs_review for Mike.

    #30992: circpadding: Circsetup machines give out warnings when client-side intro gets NACKed
            - This is still unresolved and in 041. I couldn't figure out by
              just looking at the logs... Perhaps we could push it in 042 given
              that it's a pretty rare client behavior.

0.4.2:
    #30942: [warn] Unexpected INTRODUCE_ACK on circuit 3944288021.
            - I took a stab at this today since this seems to be a central
              issue that can cause lots of log warns. It's now in needs_review.

    #31112: remove specified target_hopnum from relay-side machines - [merge_ready]
    #31113: Circuitpadding updated comments
    #31098: transition when we send our first padding packet, not on received - [merge_ready]
            - These are all Tobias' patches. I made changes files and fixed a
              few of them and also made a PR. I moved them to 042 since they
              are not really urgent bugfixes. The only one I would consider
              backporting to 041 is #31098.

    #31002: circpadding: Middle node did not accept our padding request - [assigned]
            - This is still unresolved. Mike took a look during PETS but not
              sure what's the verdict. I pushed to 042 since it does not seem
              urgent but we might want to reconsider.

    #30578: The circuitpadding_circuitsetup_machine test: Re-enable, remove, re-document, or ___?
            - This is still unresolved but not urgent. I pushed it to 042.

0.4.0:
    #30649: Every few hours, relays [warn] Received circuit padding stop command
            - This was hanging on a 040 backport which I just did.
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190726014302</emailId><senderName>Neel Chauhan</senderName><senderEmail>neel@neelc.org</senderEmail><timestampReceived>2019-07-26 01:43:02-0400</timestampReceived><subject>Re: [tor-dev] Proposal 306: Onion Balance Support for Onion Service v3</subject><body>

On 2019-07-25 12:35, Nick Mathewson wrote:
&gt; Please use 307 for this; I think 306 is in use.

That's me, the Prop306 guy!

The title should be: "Proposal 307: Onion Balance Support for Onion 
Service v3" (Note the 307)

-Neel
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190727031536</emailId><senderName>Damian Johnson</senderName><senderEmail>atagar@torproject.org</senderEmail><timestampReceived>2019-07-27 03:15:36-0400</timestampReceived><subject>Re: [tor-dev] Hack</subject><body>

Hi Pordeshi, this is a list for development related discussions
regarding tor. Your question is both off topic and... um... illegal.
Further posts from you will require moderator approval.


On Fri, Jul 26, 2019 at 7:18 PM Pordeshi Pothik
&lt;mahadihasan62712@gmail.com&gt; wrote:
&gt;
&gt; Hi,I want to learn how to hack facebook.
&gt; _______________________________________________
&gt; tor-dev mailing list
&gt; tor-dev@lists.torproject.org
&gt; https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190729151903</emailId><senderName>Matt Traudt</senderName><senderEmail>pastly@torproject.org</senderEmail><timestampReceived>2019-07-29 15:19:03-0400</timestampReceived><subject>Re: [tor-dev] What hidden services does my relay node know about?</subject><body>

On 7/29/19 11:09, clive.jenson@tutanota.com wrote:
&gt; 
&gt;         Onion services will use your relay to store descriptors once it
&gt;         has the
&gt;         HSDir flag.
&gt; 
&gt;     https://metrics.torproject.org/rs.html#details/ED279FC87D17921131CB629BA1D4E6B0F8C00BF8)
&gt; 
&gt; 
&gt; Is the HSDir flag the same as V2Dir, or something different? You
&gt; correctly identified my relay. I see it is a V2Dir but do not know how
&gt; to determine if it is a HSDir.

HSDir is different than V2Dir. You'll get the HSDir flag and see it on
Relay Search when you've earned it.

Ctrl-f in this document to learn more about possible flags and their
requirements. https://gitweb.torproject.org/torspec.git/tree/dir-spec.txt

"HSDir" -- A router is a v2 hidden service directory if it stores and
serves v2 hidden service descriptors, has the Stable and Fast flag, and
the authority believes that it's been up for at least 96 hours (or the
current value of MinUptimeHidServDirectoryV2).


&gt; 
&gt;         You can't determine which onion services or how many onion
&gt;         services are using you without code changes.
&gt; 
&gt;         Doing this is considered being a malicious relay and will get
&gt;         your relay
&gt;         removed from the Tor network.
&gt; 
&gt;     If this question came up and was sent to tor-dev@ because you intend to
&gt;     perform research: it may be prudent to stop what you're doing and
&gt;     content the Research Safety Board.
&gt; 
&gt;     https://research.torproject.org/safetyboard/
&gt; 
&gt; I'm just a curious user, this is not part of a formal research project.  
&gt; Is there a public tor testnet that I could have joined my node to for
&gt; this sort of experimentation (I don't have the resources to build my
&gt; own)? I can understand why you don't want production nodes logging data
&gt; that could potentially cause harm to other network users, but also do
&gt; not think curious users should be discouraged from poking around in the
&gt; code.
&gt; 

There's no public Tor testnet, but you can easily run your own on your
own machine with Chutney[0] (easy, but less powerful) or Shadow[1]
(harder, but very powerful). Chutney is more than enough for what it
sounds like you want to do.

I did not mean to suggest curious users should not poke around code
**safely**. Go for it. Learn a lot. And maybe even find a bug and
contribute a fix? ;)

Hope that helps.

Matt

[0]: https://gitweb.torproject.org/chutney.git
[1]: https://github.com/shadow/shadow
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email><email><emailId>20190730181305</emailId><senderName>Philipp Winter</senderName><senderEmail>phw@nymity.ch</senderEmail><timestampReceived>2019-07-30 18:13:05-0400</timestampReceived><subject>Re: [tor-dev] 24 hours worth of BridgeDB usage metrics</subject><body>

On Tue, Jul 30, 2019 at 05:42:11PM +0200, Karsten Loesing wrote:
&gt; You say that you're planning to add aggregate statistics like numbers by
&gt; distributor without drilling down to transports or countries. Keep in
&gt; mind that this is going to reduce the noise that you added when rounding
&gt; up to multiples of 10. For example, knowing that the total by country is
&gt; closer to $entries_in_that_country * 1 or $entries_in_that_country * 10
&gt; will tell you something about the average noise added per entry. It
&gt; would be more privacy-preserving (and also less accurate) to keep all
&gt; the noise in the statistics and do the aggregation in a separate step.

That's a great point.  I was originally concerned about the decrease in
accuracy but, after running the numbers, it seems tolerable.  Let's have
a look at the lower and upper bound of the total number of HTTPS
requests.  Summing up all bins (and ignoring bot requests) gives us the
upper bound:

  grep https bridgedb-metrics.log | grep -v zz | cut -d ' ' -f 3 | paste -sd+ | bc
  3850

To determine the lower bound, we first calculate the number of bins:

  grep https bridgedb-metrics.log | grep -c -v zz
  235

Then, we multiply the number of bins by 9 and subtract it from the upper
bound, which gives us a lower bound of 1,735.

Applying this method to all three distribution mechanisms results in the
following table:

        Lower bound  Upper bound
        -----------  -----------
  Moat        4,576        4,630
  HTTPS       1,735        3,850
  Email         303          420

Despite the inaccuracy caused by the binning, we can be certain that
moat is more popular than HTTPS (moat's lower bound &gt; HTTPS's upper
bound) and email is an order of magnitude less popular than both HTTPS
and moat.  HTTPS is the most inaccurate because of the large number of
bins.

&gt; What is obs4 in bridgedb-metric-count email.obs4.gmail.fail.none 10 (as
&gt; opposed to obfs4)?

That's a typo that a user made when requesting the transport.  I had not
yet changed the code to only consider transports that are supported by
BridgeDB.  All unsupported transport types should result in a log
message and not affect the metrics.

Interestingly, there's another metrics line that shows that there were
1-10 successful requests for the invalid obs4 transport.  When
requesting an invalid transport, BridgeDB tells you that there are
currently no bridges available.  Instead, it should tell you that the
requested transport does not exist.

&gt; Would it make sense to add a line like bridge-stats-version to include a
&gt; version number of some sort, just in case you want to change the format
&gt; at a later time?

Yes, that's a good idea.  I will do that.

Thanks,
Philipp
_______________________________________________
tor-dev mailing list
tor-dev@lists.torproject.org
https://lists.torproject.org/cgi-bin/mailman/listinfo/tor-dev

</body></email></emails>