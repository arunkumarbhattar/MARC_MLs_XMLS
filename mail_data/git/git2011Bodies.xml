<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20110126184406</emailId><senderName>"Song Li le .Mr"</senderName><senderEmail>songlile222@aol.nl</senderEmail><timestampReceived>2011-01-26 18:44:06-0400</timestampReceived><subject>Business Proposal</subject><body>

Business Proposal
===============
My name is Mr. Song Li le I work with the Hang Seng Bank.There is the sum
of $19,500,000.00 in my bank"Hang Seng Bank",Hong kong.I do solicit for
your assistance in effecting this transaction.I intend to give 30% of the
total funds as compensation for your assistance.
Sincerely,
Mr. Song Lile
Private e-mail: songlile222@aol.nl
Phone: +852-9534-8675

--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110131055137</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-01-31 05:51:37-0400</timestampReceived><subject>A note from the maintainer</subject><body>

Welcome to git development community.

This message is written by the maintainer and talks about how Git
project is managed, and how you can work with it.

* IRC and Mailing list

Members of the development community can sometimes be found on #git
IRC channel on Freenode.  Its log is available at:

        http://colabti.org/irclogger/irclogger_log/git

The development is primarily done on the Git mailing list. If you have
patches, please send them to the list address (git@vger.kernel.org).
following Documentation/SubmittingPatches.  You don't have to be
subscribed to send messages there, and the convention is to Cc:
everybody involved, so you don't even have to say "Please Cc: me, I am
not subscribed".

If you sent a patch and you did not hear any response from anybody for
several days, it could be that your patch was totally uninteresting, but
it also is possible that it was simply lost in the noise.  Please do not
hesitate to send a reminder message politely in such a case.  Messages
getting lost in the noise is a sign that people involved don't have enough
mental/time bandwidth to process them right at the moment, and it often
helps to wait until the list traffic becomes calmer before sending such a
reminder.

The list archive is available at a few public sites as well:

        http://news.gmane.org/gmane.comp.version-control.git/
        http://marc.theaimsgroup.com/?l=git
        http://www.spinics.net/lists/git/

and some people seem to prefer to read it over NNTP:

        nntp://news.gmane.org/gmane.comp.version-control.git

When you point at a message in a mailing list archive, using
gmane is often the easiest to follow by readers, like this:

        http://thread.gmane.org/gmane.comp.version-control.git/27/focus=217

as it also allows people who subscribe to the mailing list as
gmane newsgroup to "jump to" the article.

* Repositories, branches and documentation.

My public git.git repository is at:

        git://git.kernel.org/pub/scm/git/git.git/

Immediately after I publish to the primary repository at kernel.org, I
also push into an alternate here:

        git://repo.or.cz/alt-git.git/

Impatient people might have better luck with the latter one (there are a
few other mirrors I push into at sourceforge and github as well).

Their gitweb interfaces are found at:

        http://git.kernel.org/?p=git/git.git
        http://repo.or.cz/w/alt-git.git

There are three branches in git.git repository that are not about the
source tree of git: "todo", "html" and "man".  The first one was meant to
contain TODO list for me, but I am not good at maintaining such a list and
it is in an abandoned state.  The branch mostly is used to keep some
helper scripts I use to maintain git and the regular "What's cooking"
messages these days.

The "html" and "man" are autogenerated documentation from the tip of the
"master" branch; the tip of "html" is extracted to be visible at
kernel.org at:

        http://www.kernel.org/pub/software/scm/git/docs/

The above URL is the top-level documentation page, and it has
links to documentation of older releases.

The script to maintain these two documentation branches are found in the
"todo" branch as dodoc.sh, if you are interested.  It is a demonstration
of how to use a post-update hook to automate a task after pushing into a
repository.

There are four branches in git.git repository that track the source tree
of git: "master", "maint", "next", and "pu".  I may add more maintenance
branches (e.g. "maint-1.6.3") if we have hugely backward incompatible
feature updates in the future to keep an older release alive; I may not,
but the distributed nature of git means any volunteer can run a
stable-tree like that herself.

The "master" branch is meant to contain what are very well tested and
ready to be used in a production setting.  There could occasionally be
minor breakages or brown paper bag bugs but they are not expected to be
anything major, and more importantly quickly and trivially fixable.  Every
now and then, a "feature release" is cut from the tip of this branch and
they typically are named with three dotted decimal digits.  The last such
release was 1.7.4 done on Jan 30, 2011.  You can expect that the tip of
the "master" branch is always more stable than any of the released
versions.

Whenever a feature release is made, "maint" branch is forked off from
"master" at that point.  Obvious, safe and urgent fixes after a feature
release are applied to this branch and maintenance releases are cut from
it.  The maintenance releases are named with four dotted decimal, named
after the feature release they are updates to; the last such release was
1.7.3.5.  New features never go to this branch.  This branch is also
merged into "master" to propagate the fixes forward.

A trivial and safe enhancement goes directly on top of "master".  A new
development, either initiated by myself or more often by somebody who
found his or her own itch to scratch, does not usually happen on "master",
however.  Instead, a separate topic branch is forked from the tip of
"master", and it first is tested in isolation; I may make minimum fixups
at this point.  Usually there are a handful such topic branches that are
running ahead of "master" in git.git repository.  I do not publish the tip
of these branches in my public repository, however, partly to keep the
number of branches that downstream developers need to worry about low, and
primarily because I am lazy.

The quality of topic branches are judged primarily by the mailing list
discussions.  Some of them start out as "good idea but obviously is broken
in some areas (e.g. breaks the existing testsuite)" and then with some
more work (either by the original contributor's effort or help from other
people on the list) becomes "more or less done and can now be tested by
wider audience".  Luckily, most of them start out in the latter, better
shape.

The "next" branch is to merge and test topic branches in the latter
category.  In general, the branch always contains the tip of "master".  It
might not be quite rock-solid production ready, but is expected to work
more or less without major breakage.  I usually use "next" version of git
for my own work, so it cannot be _that_ broken to prevent me from
integrating and pushing the changes out.  The "next" branch is where new
and exciting things take place.

The two branches "master" and "maint" are never rewound, and "next"
usually will not be either (this automatically means the topics that have
been merged into "next" are usually not rebased, and you can find the tip
of topic branches you are interested in from the output of "git log
next"). You should be able to safely build on top of them.

After a feature release is made from "master", however, "next" will be
rebuilt from the tip of "master" using the surviving topics.  The commit
that replaces the tip of the "next" will usually have the identical tree,
but it will have different ancestry from the tip of "master".

The "pu" (proposed updates) branch bundles all the remainder of topic
branches.  The "pu" branch, and topic branches that are only in "pu", are
subject to rebasing in general.  By the above definition of how "next"
works, you can tell that this branch will contain quite experimental and
obviously broken stuff.

When a topic that was in "pu" proves to be in testable shape, it graduates
to "next".  I do this with:

        git checkout next
        git merge that-topic-branch

Sometimes, an idea that looked promising turns out to be not so good and
the topic can be dropped from "pu" in such a case.

A topic that is in "next" is expected to be polished to perfection before
it is merged to "master" (that's why "master" can be expected to stay more
stable than any released version).  Similarly to the above, I do it with
this:

        git checkout master
        git merge that-topic-branch
        git branch -d that-topic-branch

Note that being in "next" is not a guarantee to appear in the next release
(being in "master" is such a guarantee, unless it is later found seriously
broken and reverted), nor even in any future release.  There even were
cases that topics needed reverting a few commits in them before graduating
to "master", or a topic that already was in "next" were entirely reverted
from "next" because fatal flaws were found in them later.


* Other people's trees, trusted lieutenants and credits.

Documentation/SubmittingPatches outlines to whom your proposed changes
should be sent.  As described in contrib/README, I would delegate fixes
and enhancements in contrib/ area to the primary contributors of them.

Although the following are included in git.git repository, they have their
own authoritative repository and maintainers:

 - git-gui/ comes from git-gui project, maintained by Pat Thoyts:

        git://repo.or.cz/git-gui.git

 - gitk-git/ comes from Paul Mackerras's gitk project:

        git://git.kernel.org/pub/scm/gitk/gitk.git

I would like to thank everybody who helped to raise git into the current
shape.  Especially I would like to thank the git list regulars whose help
I have relied on and expect to continue relying on heavily:

 - Linus on general design issues.

 - Linus, Shawn Pearce, Johannes Schindelin, Nicolas Pitre, René
   Scharfe, Jeff King, Jonathan Nieder, Johan Herland, Johannes Sixt,
   Sverre Rabbelier and Thomas Rast on general implementation issues
   and reviews on the mailing list.

 - Shawn and Nicolas Pitre on pack issues.

 - Martin Langhoff, Frank Lichtenheld and Ævar Arnfjörð Bjarmason on
   cvsserver and cvsimport.

 - Paul Mackerras on gitk.

 - Eric Wong, David D. Kilzer and Sam Vilain on git-svn.

 - Simon Hausmann and Pete Wyckoff on git-p4.

 - Jakub Narebski, John Hawley, Petr Baudis, Luben Tuikov, Giuseppe Bilotta on
   gitweb.

 - J. Bruce Fields, Jonathan Nieder, Michael J Gruber and Thomas Rast on
   documentation (and countless others for proofreading and fixing).

 - Alexandre Julliard on Emacs integration.

 - David Aguilar and Charles Bailey for taking good care of git-mergetool
   (and Theodore Ts'o for creating it in the first place) and git-difftool.

 - Johannes Schindelin, Johannes Sixt, Erik Faye-Lund and others for their
   effort to move things forward on the Windows front.

 - People on non-Linux platforms for keeping their eyes on portability;
   especially, Randal Schwartz, Theodore Ts'o, Jason Riedy, Thomas Glanzmann,
   Brandon Casey, Jeff King, Alex Riesen and countless others.

* This document

The latest copy of this document is found in git.git repository,
on 'todo' branch, as MaintNotes.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110425210538</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-04-25 21:05:38-0400</timestampReceived><subject>A Note from the Maintainer</subject><body>

Welcome to git development community.

This message is written by the maintainer and talks about how Git
project is managed, and how you can work with it.

* Mailing list and the community

The development is primarily done on the Git mailing list. Help
requests, feature proposals, bug reports and patches should be sent to
the list address &lt;git@vger.kernel.org&gt;.  You don't have to be
subscribed to send messages.  The convention on the list is to keep
everybody involved on Cc:, so it is unnecessary to ask "Please Cc: me,
I am not subscribed".

Before sending patches, please read Documentation/SubmittingPatches
and Documentation/CodingGuidelines to familiarize yourself with the
project convention.

If you sent a patch and you did not hear any response from anybody for
several days, it could be that your patch was totally uninteresting,
but it also is possible that it was simply lost in the noise.  Please
do not hesitate to send a reminder message in such a case.  Messages
getting lost in the noise is a sign that people involved don't have
enough mental/time bandwidth to process them right at the moment, and
it often helps to wait until the list traffic becomes calmer before
sending such a reminder.

The list archive is available at a few public sites as well:

        http://news.gmane.org/gmane.comp.version-control.git/
        http://marc.theaimsgroup.com/?l=git
        http://www.spinics.net/lists/git/

and some people seem to prefer to read it over NNTP:

        nntp://news.gmane.org/gmane.comp.version-control.git

When you point at a message in a mailing list archive, using
gmane is often the easiest to follow by readers, like this:

        http://thread.gmane.org/gmane.comp.version-control.git/27/focus=217

as it also allows people who subscribe to the mailing list as gmane
newsgroup to "jump to" the article.

Some members of the development community can sometimes also be found
on the #git IRC channel on Freenode.  Its log is available at:

        http://colabti.org/irclogger/irclogger_log/git

* Reporting bugs

When you think git does not behave as you expect, please do not stop your
bug report with just "git does not work".  "I tried to do X but it did not
work" is not much better, neither is "I tried to do X and git did Y, which
is broken".  It often is that what you expect is _not_ what other people
expect, and chances are that what you expect is very different from what
people who have worked on git have expected (otherwise, the behavior
would have been changed to match that expectation long time ago).

Please remember to always state

 - what you wanted to do;

 - what you did (the version of git and the command sequence to reproduce
   the behavior);

 - what you saw happen;

 - what you expected to see; and

 - how the last two are different.

See http://www.chiark.greenend.org.uk/~sgtatham/bugs.html for further
hints.

* Repositories, branches and documentation.

My public git.git repository is at:

        git://git.kernel.org/pub/scm/git/git.git/

Immediately after I publish to the primary repository at kernel.org, I
also push into an alternate here:

        git://repo.or.cz/alt-git.git/

Impatient people might have better luck with the latter one (there are a
few other mirrors I push into at sourceforge and github as well).

Their gitweb interfaces are found at:

        http://git.kernel.org/?p=git/git.git
        http://repo.or.cz/w/alt-git.git

There are three branches in git.git repository that are not about the
source tree of git: "html", "man", and "todo".

The "html" and "man" are auto-generated documentation from the tip of
the "master" branch; the tip of "html" is extracted to be visible at
kernel.org at:

        http://www.kernel.org/pub/software/scm/git/docs/

The above URL is the top-level documentation page, and it has links to
documentation of older releases.

The "todo" branch was originally meant to contain a TODO list for me,
but is mostly used to keep some helper scripts I use to maintain git.
For example, the script to maintain the two documentation branches are
found there as dodoc.sh, which may be a good demonstration of how to
use a post-update hook to automate a task after pushing into a
repository.

There are four branches in git.git repository that track the source tree
of git: "master", "maint", "next", and "pu".

The "master" branch is meant to contain what are very well tested and
ready to be used in a production setting.  Every now and then, a "feature
release" is cut from the tip of this branch and they typically are named
with three dotted decimal digits.  The last such release was 1.7.5 done on
Apr 24, 2011.  You can expect that the tip of the "master" branch is
always more stable than any of the released versions.

Whenever a feature release is made, "maint" branch is forked off from
"master" at that point.  Obvious, safe and urgent fixes after a feature
release are applied to this branch and maintenance releases are cut from
it.  The maintenance releases are named with four dotted decimal, named
after the feature release they are updates to; the last such release was
1.7.4.5.  New features never go to this branch.  This branch is also
merged into "master" to propagate the fixes forward.

A new development does not usually happen on "master". When you send a
series of patches, after review on the mailing list, a separate topic
branch is forked from the tip of "master" and your patches are queued
there, and kept out of "master" while people test it out.  The quality of
topic branches are judged primarily by the mailing list discussions.

Topic branches that are in good shape are merged to the "next" branch. In
general, the "next" branch always contains the tip of "master".  It might
not be quite rock-solid production ready, but is expected to work more or
less without major breakage. The "next" branch is where new and exciting
things take place. A topic that is in "next" is expected to be polished to
perfection before it is merged to "master" (that's why "master" can be
expected to stay more stable than any released version).

The "pu" (proposed updates) branch bundles all the remaining topic
branches. The topics on the branch are not complete, well tested, nor well
documented and need further work. When a topic that was in "pu" proves to
be in testable shape, it is merged to "next".

You can run "git log --first-parent master..pu" to see what topics are
currently in flight.  Sometimes, an idea that looked promising turns out
to be not so good and the topic can be dropped from "pu" in such a case.

The two branches "master" and "maint" are never rewound, and "next"
usually will not be either.  After a feature release is made from
"master", however, "next" will be rebuilt from the tip of "master"
using the topics that didn't make the cut in the feature release.

Note that being in "next" is not a guarantee to appear in the next
release, nor even in any future release.  There were cases that topics
needed reverting a few commits in them before graduating to "master", or a
topic that already was in "next" was reverted from "next" because fatal
flaws were found in it after it was merged.


* Other people's trees, trusted lieutenants and credits.

Documentation/SubmittingPatches outlines to whom your proposed changes
should be sent.  As described in contrib/README, I would delegate fixes
and enhancements in contrib/ area to the primary contributors of them.

Although the following are included in git.git repository, they have their
own authoritative repository and maintainers:

 - git-gui/ comes from git-gui project, maintained by Pat Thoyts:

        git://repo.or.cz/git-gui.git

 - gitk-git/ comes from Paul Mackerras's gitk project:

        git://git.kernel.org/pub/scm/gitk/gitk.git

I would like to thank everybody who helped to raise git into the current
shape.  Especially I would like to thank the git list regulars whose help
I have relied on and expect to continue relying on heavily:

 - Linus Torvalds, Shawn Pearce, Johannes Schindelin, Nicolas Pitre,
   René Scharfe, Jeff King, Jonathan Nieder, Johan Herland, Johannes
   Sixt, Sverre Rabbelier, Michael J Gruber, Nguyễn Thái Ngọc Duy,
   Ævar Arnfjörð Bjarmason and Thomas Rast on general design and
   implementation issues and reviews on the mailing list.

 - Shawn and Nicolas Pitre on pack issues.

 - Martin Langhoff, Frank Lichtenheld and Ævar Arnfjörð Bjarmason on
   cvsserver and cvsimport.

 - Paul Mackerras on gitk.

 - Eric Wong, David D. Kilzer and Sam Vilain on git-svn.

 - Simon Hausmann and Pete Wyckoff on git-p4.

 - Jakub Narebski, John Hawley, Petr Baudis, Luben Tuikov, Giuseppe Bilotta on
   gitweb.

 - J. Bruce Fields, Jonathan Nieder, Michael J Gruber and Thomas Rast on
   documentation (and countless others for proofreading and fixing).

 - Alexandre Julliard on Emacs integration.

 - David Aguilar and Charles Bailey for taking good care of git-mergetool
   (and Theodore Ts'o for creating it in the first place) and git-difftool.

 - Johannes Schindelin, Johannes Sixt, Erik Faye-Lund and others for their
   effort to move things forward on the Windows front.

 - People on non-Linux platforms for keeping their eyes on portability;
   especially, Randal Schwartz, Theodore Ts'o, Jason Riedy, Thomas Glanzmann,
   Brandon Casey, Jeff King, Alex Riesen and countless others.

* This document

The latest copy of this document is found in git.git repository,
on 'todo' branch, as MaintNotes.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110824235135</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-08-24 23:51:35-0400</timestampReceived><subject>A note from the maintainer</subject><body>

Welcome to the Git development community.

This message is written by the maintainer and talks about how Git
project is managed, and how you can work with it.

* Mailing list and the community

The development is primarily done on the Git mailing list. Help
requests, feature proposals, bug reports and patches should be sent to
the list address &lt;git@vger.kernel.org&gt;.  You don't have to be
subscribed to send messages.  The convention on the list is to keep
everybody involved on Cc:, so it is unnecessary to ask "Please Cc: me,
I am not subscribed".

Before sending patches, please read Documentation/SubmittingPatches
and Documentation/CodingGuidelines to familiarize yourself with the
project convention.

If you sent a patch and you did not hear any response from anybody for
several days, it could be that your patch was totally uninteresting,
but it also is possible that it was simply lost in the noise.  Please
do not hesitate to send a reminder message in such a case.  Messages
getting lost in the noise is a sign that people involved don't have
enough mental/time bandwidth to process them right at the moment, and
it often helps to wait until the list traffic becomes calmer before
sending such a reminder.

The list archive is available at a few public sites as well:

        http://news.gmane.org/gmane.comp.version-control.git/
        http://marc.theaimsgroup.com/?l=git
        http://www.spinics.net/lists/git/

and some people seem to prefer to read it over NNTP:

        nntp://news.gmane.org/gmane.comp.version-control.git

When you point at a message in a mailing list archive, using
gmane is often the easiest to follow by readers, like this:

        http://thread.gmane.org/gmane.comp.version-control.git/27/focus=217

as it also allows people who subscribe to the mailing list as gmane
newsgroup to "jump to" the article.

Some members of the development community can sometimes also be found
on the #git IRC channel on Freenode.  Its log is available at:

        http://colabti.org/irclogger/irclogger_log/git

* Reporting bugs

When you think git does not behave as you expect, please do not stop your
bug report with just "git does not work".  "I tried to do X but it did not
work" is not much better, neither is "I tried to do X and git did Y, which
is broken".  It often is that what you expect is _not_ what other people
expect, and chances are that what you expect is very different from what
people who have worked on git have expected (otherwise, the behavior
would have been changed to match that expectation long time ago).

Please remember to always state

 - what you wanted to do;

 - what you did (the version of git and the command sequence to reproduce
   the behavior);

 - what you saw happen;

 - what you expected to see; and

 - how the last two are different.

See http://www.chiark.greenend.org.uk/~sgtatham/bugs.html for further
hints.

* Repositories, branches and documentation.

My public git.git repository is at:

        git://git.kernel.org/pub/scm/git/git.git/

Immediately after I publish to the primary repository at kernel.org, I
also push into an alternate here:

        git://repo.or.cz/alt-git.git/

Impatient people might have better luck with the latter one (there are a
few other mirrors I push into at sourceforge and github as well).

Their gitweb interfaces are found at:

        http://git.kernel.org/?p=git/git.git
        http://repo.or.cz/w/alt-git.git

There are three branches in git.git repository that are not about the
source tree of git: "html", "man", and "todo".

The "html" and "man" are auto-generated documentation from the tip of
the "master" branch; the tip of "html" is extracted to be visible at
kernel.org at:

        http://www.kernel.org/pub/software/scm/git/docs/

The above URL is the top-level documentation page, and it has links to
documentation of older releases.

The "todo" branch was originally meant to contain a TODO list for me,
but is mostly used to keep some helper scripts I use to maintain git.
For example, the script to maintain the two documentation branches are
found there as dodoc.sh, which may be a good demonstration of how to
use a post-update hook to automate a task after pushing into a
repository.

There are four branches in git.git repository that track the source tree
of git: "master", "maint", "next", and "pu".

The "master" branch is meant to contain what are very well tested and
ready to be used in a production setting.  Every now and then, a "feature
release" is cut from the tip of this branch and they typically are named
with three dotted decimal digits.  The last such release was 1.7.6 done on
June 26, 2011.  You can expect that the tip of the "master" branch is
always more stable than any of the released versions.

Whenever a feature release is made, "maint" branch is forked off from
"master" at that point.  Obvious, safe and urgent fixes after a feature
release are applied to this branch and maintenance releases are cut from
it.  The maintenance releases are named with four dotted decimal, named
after the feature release they are updates to; the last such release was
1.7.6.1.  New features never go to this branch.  This branch is also
merged into "master" to propagate the fixes forward.

A new development does not usually happen on "master". When you send a
series of patches, after review on the mailing list, a separate topic
branch is forked from the tip of "master" and your patches are queued
there, and kept out of "master" while people test it out.  The quality of
topic branches are judged primarily by the mailing list discussions.

Topic branches that are in good shape are merged to the "next" branch. In
general, the "next" branch always contains the tip of "master".  It might
not be quite rock-solid production ready, but is expected to work more or
less without major breakage. The "next" branch is where new and exciting
things take place. A topic that is in "next" is expected to be polished to
perfection before it is merged to "master" (that's why "master" can be
expected to stay more stable than any released version).

The "pu" (proposed updates) branch bundles all the remaining topic
branches. The topics on the branch are not complete, well tested, nor well
documented and need further work. When a topic that was in "pu" proves to
be in testable shape, it is merged to "next".

You can run "git log --first-parent master..pu" to see what topics are
currently in flight.  Sometimes, an idea that looked promising turns out
to be not so good and the topic can be dropped from "pu" in such a case.

The two branches "master" and "maint" are never rewound, and "next"
usually will not be either.  After a feature release is made from
"master", however, "next" will be rebuilt from the tip of "master"
using the topics that didn't make the cut in the feature release.

Note that being in "next" is not a guarantee to appear in the next
release, nor even in any future release.  There were cases that topics
needed reverting a few commits in them before graduating to "master", or a
topic that already was in "next" was reverted from "next" because fatal
flaws were found in it after it was merged.


* Other people's trees, trusted lieutenants and credits.

Documentation/SubmittingPatches outlines to whom your proposed changes
should be sent.  As described in contrib/README, I would delegate fixes
and enhancements in contrib/ area to the primary contributors of them.

Although the following are included in git.git repository, they have their
own authoritative repository and maintainers:

 - git-gui/ comes from git-gui project, maintained by Pat Thoyts:

        git://repo.or.cz/git-gui.git

 - gitk-git/ comes from Paul Mackerras's gitk project:

        git://git.kernel.org/pub/scm/gitk/gitk.git

I would like to thank everybody who helped to raise git into the current
shape.  Especially I would like to thank the git list regulars whose help
I have relied on and expect to continue relying on heavily:

 - Linus Torvalds, Shawn Pearce, Johannes Schindelin, Nicolas Pitre,
   René Scharfe, Jeff King, Jonathan Nieder, Johan Herland, Johannes
   Sixt, Sverre Rabbelier, Michael J Gruber, Nguyễn Thái Ngọc Duy,
   Ævar Arnfjörð Bjarmason and Thomas Rast on general design and
   implementation issues and reviews on the mailing list.

 - Shawn and Nicolas Pitre on pack issues.

 - Martin Langhoff, Frank Lichtenheld and Ævar Arnfjörð Bjarmason on
   cvsserver and cvsimport.

 - Paul Mackerras on gitk.

 - Eric Wong, David D. Kilzer and Sam Vilain on git-svn.

 - Simon Hausmann and Pete Wyckoff on git-p4.

 - Jakub Narebski, John Hawley, Petr Baudis, Luben Tuikov, Giuseppe Bilotta on
   gitweb.

 - J. Bruce Fields, Jonathan Nieder, Michael J Gruber and Thomas Rast on
   documentation (and countless others for proofreading and fixing).

 - Alexandre Julliard on Emacs integration.

 - David Aguilar and Charles Bailey for taking good care of git-mergetool
   (and Theodore Ts'o for creating it in the first place) and git-difftool.

 - Johannes Schindelin, Johannes Sixt, Erik Faye-Lund and others for their
   effort to move things forward on the Windows front.

 - People on non-Linux platforms for keeping their eyes on portability;
   especially, Randal Schwartz, Theodore Ts'o, Jason Riedy, Thomas Glanzmann,
   Brandon Casey, Jeff King, Alex Riesen and countless others.

* This document

The latest copy of this document is found in git.git repository,
on 'todo' branch, as MaintNotes.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20111005022258</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-10-05 02:22:58-0400</timestampReceived><subject>A note from the maintainer</subject><body>

Welcome to git development community.

This message is written by the maintainer and talks about how Git
project is managed, and how you can work with it.

* Mailing list and the community

The development is primarily done on the Git mailing list. Help
requests, feature proposals, bug reports and patches should be sent to
the list address &lt;git@vger.kernel.org&gt;.  You don't have to be
subscribed to send messages.  The convention on the list is to keep
everybody involved on Cc:, so it is unnecessary to ask "Please Cc: me,
I am not subscribed".

Before sending patches, please read Documentation/SubmittingPatches
and Documentation/CodingGuidelines to familiarize yourself with the
project convention.

If you sent a patch and you did not hear any response from anybody for
several days, it could be that your patch was totally uninteresting,
but it also is possible that it was simply lost in the noise.  Please
do not hesitate to send a reminder message in such a case.  Messages
getting lost in the noise is a sign that people involved don't have
enough mental/time bandwidth to process them right at the moment, and
it often helps to wait until the list traffic becomes calmer before
sending such a reminder.

The list archive is available at a few public sites as well:

        http://news.gmane.org/gmane.comp.version-control.git/
        http://marc.theaimsgroup.com/?l=git
        http://www.spinics.net/lists/git/

and some people seem to prefer to read it over NNTP:

        nntp://news.gmane.org/gmane.comp.version-control.git

When you point at a message in a mailing list archive, using
gmane is often the easiest to follow by readers, like this:

        http://thread.gmane.org/gmane.comp.version-control.git/27/focus=217

as it also allows people who subscribe to the mailing list as gmane
newsgroup to "jump to" the article.

Some members of the development community can sometimes also be found
on the #git IRC channel on Freenode.  Its log is available at:

        http://colabti.org/irclogger/irclogger_log/git

* Reporting bugs

When you think git does not behave as you expect, please do not stop your
bug report with just "git does not work".  "I tried to do X but it did not
work" is not much better, neither is "I tried to do X and git did Y, which
is broken".  It often is that what you expect is _not_ what other people
expect, and chances are that what you expect is very different from what
people who have worked on git have expected (otherwise, the behavior
would have been changed to match that expectation long time ago).

Please remember to always state

 - what you wanted to do;

 - what you did (the version of git and the command sequence to reproduce
   the behavior);

 - what you saw happen;

 - what you expected to see; and

 - how the last two are different.

See http://www.chiark.greenend.org.uk/~sgtatham/bugs.html for further
hints.

* Repositories, branches and documentation.

My public git.git repository is at:

        git://git.kernel.org/pub/scm/git/git.git/
	git://repo.or.cz/alt-git.git
	https://github.com/git/git
	https://code.google.com/p/git-core/

Impatient people might have better luck with the latter two (there are a
few other mirrors I push into at sourceforge and github as well).

Their gitweb interfaces are found at:

        http://git.kernel.org/?p=git/git.git
        http://repo.or.cz/w/alt-git.git

There are three branches in git.git repository that are not about the
source tree of git: "html", "man", and "todo".

The "html" and "man" are preformatted documentation from the tip of
the "master" branch; the tip of "html" is visible at:

        http://www.kernel.org/pub/software/scm/git/docs/
	http://git-core.googlecode.com/git-history/html/git.html

The above URL is the top-level documentation page, and it may have
links to documentation of older releases.

The "todo" branch was originally meant to contain a TODO list for me,
but is mostly used to keep some helper scripts I use to maintain git.
For example, the script that was used to maintain the two documentation
branches are found there as dodoc.sh, which may be a good demonstration
of how to use a post-update hook to automate a task after pushing into a
repository.

There are four branches in git.git repository that track the source tree
of git: "master", "maint", "next", and "pu".

The "master" branch is meant to contain what are very well tested and
ready to be used in a production setting.  Every now and then, a "feature
release" is cut from the tip of this branch and they typically are named
with three dotted decimal digits.  The last such release was 1.7.7 done on
Sept 30, 2011. You can expect that the tip of the "master" branch is always
more stable than any of the released versions.

Whenever a feature release is made, "maint" branch is forked off from
"master" at that point.  Obvious, safe and urgent fixes after a feature
release are applied to this branch and maintenance releases are cut from
it.  The maintenance releases are named with four dotted decimal, named
after the feature release they are updates to; the last such release was
1.7.6.4.  New features never go to this branch.  This branch is also
merged into "master" to propagate the fixes forward.

A new development does not usually happen on "master". When you send a
series of patches, after review on the mailing list, a separate topic
branch is forked from the tip of "master" and your patches are queued
there, and kept out of "master" while people test it out.  The quality of
topic branches are judged primarily by the mailing list discussions.

Topic branches that are in good shape are merged to the "next" branch. In
general, the "next" branch always contains the tip of "master".  It might
not be quite rock-solid production ready, but is expected to work more or
less without major breakage. The "next" branch is where new and exciting
things take place. A topic that is in "next" is expected to be polished to
perfection before it is merged to "master" (that's why "master" can be
expected to stay more stable than any released version).

The "pu" (proposed updates) branch bundles all the remaining topic
branches. The topics on the branch are not complete, well tested, nor well
documented and need further work. When a topic that was in "pu" proves to
be in testable shape, it is merged to "next".

You can run "git log --first-parent master..pu" to see what topics are
currently in flight.  Sometimes, an idea that looked promising turns out
to be not so good and the topic can be dropped from "pu" in such a case.

The two branches "master" and "maint" are never rewound, and "next"
usually will not be either.  After a feature release is made from
"master", however, "next" will be rebuilt from the tip of "master"
using the topics that didn't make the cut in the feature release.

Note that being in "next" is not a guarantee to appear in the next
release, nor even in any future release.  There were cases that topics
needed reverting a few commits in them before graduating to "master",
or a topic that already was in "next" was reverted from "next" because
fatal flaws were found in it after it was merged.


* Other people's trees, trusted lieutenants and credits.

Documentation/SubmittingPatches outlines to whom your proposed changes
should be sent.  As described in contrib/README, I would delegate fixes
and enhancements in contrib/ area to the primary contributors of them.

Although the following are included in git.git repository, they have their
own authoritative repository and maintainers:

 - git-gui/ comes from git-gui project, maintained by Pat Thoyts:

        git://repo.or.cz/git-gui.git

 - gitk-git/ comes from Paul Mackerras's gitk project:

        git://git.kernel.org/pub/scm/gitk/gitk.git

I would like to thank everybody who helped to raise git into the current
shape.  Especially I would like to thank the git list regulars whose help
I have relied on and expect to continue relying on heavily:

 - Linus Torvalds, Shawn Pearce, Johannes Schindelin, Nicolas Pitre,
   René Scharfe, Jeff King, Jonathan Nieder, Johan Herland, Johannes
   Sixt, Sverre Rabbelier, Michael J Gruber, Nguyễn Thái Ngọc Duy,
   Ævar Arnfjörð Bjarmason and Thomas Rast on general design and
   implementation issues and reviews on the mailing list.

 - Shawn and Nicolas Pitre on pack issues.

 - Martin Langhoff, Frank Lichtenheld and Ævar Arnfjörð Bjarmason on
   cvsserver and cvsimport.

 - Paul Mackerras on gitk.

 - Eric Wong, David D. Kilzer and Sam Vilain on git-svn.

 - Simon Hausmann and Pete Wyckoff on git-p4.

 - Jakub Narebski, John Hawley, Petr Baudis, Luben Tuikov, Giuseppe Bilotta on
   gitweb.

 - J. Bruce Fields, Jonathan Nieder, Michael J Gruber and Thomas Rast on
   documentation (and countless others for proofreading and fixing).

 - Alexandre Julliard on Emacs integration.

 - David Aguilar and Charles Bailey for taking good care of git-mergetool
   (and Theodore Ts'o for creating it in the first place) and git-difftool.

 - Johannes Schindelin, Johannes Sixt, Erik Faye-Lund and others for their
   effort to move things forward on the Windows front.

 - People on non-Linux platforms for keeping their eyes on portability;
   especially, Randal Schwartz, Theodore Ts'o, Jason Riedy, Thomas Glanzmann,
   Brandon Casey, Jeff King, Alex Riesen and countless others.

* This document

The latest copy of this document is found in git.git repository,
on 'todo' branch, as MaintNotes.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20111015054714</emailId><senderName>Martin von Zweigbergk</senderName><senderEmail>martin.von.zweigbergk@gmail.com</senderEmail><timestampReceived>2011-10-15 05:47:14-0400</timestampReceived><subject>Re: A note from the maintainer</subject><body>

On Tue, Oct 4, 2011 at 7:22 PM, Junio C Hamano &lt;gitster@pobox.com&gt; wrote:
&gt;  - gitk-git/ comes from Paul Mackerras's gitk project:
&gt;
&gt;        git://git.kernel.org/pub/scm/gitk/gitk.git

I don't seem to be able to fetch from there. Is it still supposed to be there?

Martin
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20111016072449</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-10-16 07:24:49-0400</timestampReceived><subject>Re: A note from the maintainer</subject><body>

Martin von Zweigbergk &lt;martin.von.zweigbergk@gmail.com&gt; writes:

&gt; On Tue, Oct 4, 2011 at 7:22 PM, Junio C Hamano &lt;gitster@pobox.com&gt; wrote:
&gt;&gt;  - gitk-git/ comes from Paul Mackerras's gitk project:
&gt;&gt;
&gt;&gt;        git://git.kernel.org/pub/scm/gitk/gitk.git
&gt;
&gt; I don't seem to be able to fetch from there. Is it still supposed to be there?

Unfortunately k.org is _slowly_ coming back to life.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20111024153258</emailId><senderName>Junio C Hamano</senderName><senderEmail>gitster@pobox.com</senderEmail><timestampReceived>2011-10-24 15:32:58-0400</timestampReceived><subject>A note from the maintainer</subject><body>

Welcome to git development community.

This message is written by the maintainer and talks about how Git
project is managed, and how you can work with it.

* Mailing list and the community

The development is primarily done on the Git mailing list. Help
requests, feature proposals, bug reports and patches should be sent to
the list address &lt;git@vger.kernel.org&gt;.  You don't have to be
subscribed to send messages.  The convention on the list is to keep
everybody involved on Cc:, so it is unnecessary to ask "Please Cc: me,
I am not subscribed".

Before sending patches, please read Documentation/SubmittingPatches
and Documentation/CodingGuidelines to familiarize yourself with the
project convention.

If you sent a patch and you did not hear any response from anybody for
several days, it could be that your patch was totally uninteresting,
but it also is possible that it was simply lost in the noise.  Please
do not hesitate to send a reminder message in such a case.  Messages
getting lost in the noise is a sign that people involved don't have
enough mental/time bandwidth to process them right at the moment, and
it often helps to wait until the list traffic becomes calmer before
sending such a reminder.

The list archive is available at a few public sites as well:

        http://news.gmane.org/gmane.comp.version-control.git/
        http://marc.theaimsgroup.com/?l=git
        http://www.spinics.net/lists/git/

and some people seem to prefer to read it over NNTP:

        nntp://news.gmane.org/gmane.comp.version-control.git

When you point at a message in a mailing list archive, using
gmane is often the easiest to follow by readers, like this:

        http://thread.gmane.org/gmane.comp.version-control.git/27/focus=217

as it also allows people who subscribe to the mailing list as gmane
newsgroup to "jump to" the article.

Some members of the development community can sometimes also be found
on the #git IRC channel on Freenode.  Its log is available at:

        http://colabti.org/irclogger/irclogger_log/git

* Reporting bugs

When you think git does not behave as you expect, please do not stop your
bug report with just "git does not work".  "I tried to do X but it did not
work" is not much better, neither is "I tried to do X and git did Y, which
is broken".  It often is that what you expect is _not_ what other people
expect, and chances are that what you expect is very different from what
people who have worked on git have expected (otherwise, the behavior
would have been changed to match that expectation long time ago).

Please remember to always state

 - what you wanted to do;

 - what you did (the version of git and the command sequence to reproduce
   the behavior);

 - what you saw happen;

 - what you expected to see; and

 - how the last two are different.

See http://www.chiark.greenend.org.uk/~sgtatham/bugs.html for further
hints.

* Repositories, branches and documentation.

My public git.git repository is at:

        git://git.kernel.org/pub/scm/git/git.git/
	git://repo.or.cz/alt-git.git
	https://github.com/git/git
	https://code.google.com/p/git-core/

Impatient people might have better luck with the latter two (there are a
few other mirrors I push into at sourceforge and github as well).

Their gitweb interfaces are found at:

        http://git.kernel.org/?p=git/git.git
        http://repo.or.cz/w/alt-git.git

There are three branches in git.git repository that are not about the
source tree of git: "html", "man", and "todo".

The "html" and "man" are preformatted documentation from the tip of
the "master" branch; the tip of "html" is visible at:

        http://www.kernel.org/pub/software/scm/git/docs/
	http://git-core.googlecode.com/git-history/html/git.html

The above URL is the top-level documentation page, and it may have
links to documentation of older releases.

The "todo" branch was originally meant to contain a TODO list for me,
but is mostly used to keep some helper scripts I use to maintain git.
For example, the script that was used to maintain the two documentation
branches are found there as dodoc.sh, which may be a good demonstration
of how to use a post-update hook to automate a task after pushing into a
repository.

There are four branches in git.git repository that track the source tree
of git: "master", "maint", "next", and "pu".

The "master" branch is meant to contain what are very well tested and
ready to be used in a production setting.  Every now and then, a "feature
release" is cut from the tip of this branch and they typically are named
with three dotted decimal digits.  The last such release was 1.7.7 done on
Sept 30, 2011. You can expect that the tip of the "master" branch is always
more stable than any of the released versions.

Whenever a feature release is made, "maint" branch is forked off from
"master" at that point.  Obvious, safe and urgent fixes after a feature
release are applied to this branch and maintenance releases are cut from
it.  The maintenance releases are named with four dotted decimal, named
after the feature release they are updates to; the last such release was
1.7.7.1.  New features never go to this branch.  This branch is also
merged into "master" to propagate the fixes forward.

A new development does not usually happen on "master". When you send a
series of patches, after review on the mailing list, a separate topic
branch is forked from the tip of "master" and your patches are queued
there, and kept out of "master" while people test it out.  The quality of
topic branches are judged primarily by the mailing list discussions.

Topic branches that are in good shape are merged to the "next" branch. In
general, the "next" branch always contains the tip of "master".  It might
not be quite rock-solid production ready, but is expected to work more or
less without major breakage. The "next" branch is where new and exciting
things take place. A topic that is in "next" is expected to be polished to
perfection before it is merged to "master" (that's why "master" can be
expected to stay more stable than any released version).

The "pu" (proposed updates) branch bundles all the remaining topic
branches. The topics on the branch are not complete, well tested, nor well
documented and need further work. When a topic that was in "pu" proves to
be in testable shape, it is merged to "next".

You can run "git log --first-parent master..pu" to see what topics are
currently in flight.  Sometimes, an idea that looked promising turns out
to be not so good and the topic can be dropped from "pu" in such a case.

The two branches "master" and "maint" are never rewound, and "next"
usually will not be either.  After a feature release is made from
"master", however, "next" will be rebuilt from the tip of "master"
using the topics that didn't make the cut in the feature release.

Note that being in "next" is not a guarantee to appear in the next
release, nor even in any future release.  There were cases that topics
needed reverting a few commits in them before graduating to "master",
or a topic that already was in "next" was reverted from "next" because
fatal flaws were found in it after it was merged.


* Other people's trees, trusted lieutenants and credits.

Documentation/SubmittingPatches outlines to whom your proposed changes
should be sent.  As described in contrib/README, I would delegate fixes
and enhancements in contrib/ area to the primary contributors of them.

Although the following are included in git.git repository, they have their
own authoritative repository and maintainers:

 - git-gui/ comes from git-gui project, maintained by Pat Thoyts:

        git://repo.or.cz/git-gui.git

 - gitk-git/ comes from Paul Mackerras's gitk project:

        git://git.kernel.org/pub/scm/gitk/gitk.git

I would like to thank everybody who helped to raise git into the current
shape.  Especially I would like to thank the git list regulars whose help
I have relied on and expect to continue relying on heavily:

 - Linus Torvalds, Shawn Pearce, Johannes Schindelin, Nicolas Pitre,
   René Scharfe, Jeff King, Jonathan Nieder, Johan Herland, Johannes
   Sixt, Sverre Rabbelier, Michael J Gruber, Nguyễn Thái Ngọc Duy,
   Ævar Arnfjörð Bjarmason and Thomas Rast on general design and
   implementation issues and reviews on the mailing list.

 - Shawn and Nicolas Pitre on pack issues.

 - Martin Langhoff, Frank Lichtenheld and Ævar Arnfjörð Bjarmason on
   cvsserver and cvsimport.

 - Paul Mackerras on gitk.

 - Eric Wong, David D. Kilzer and Sam Vilain on git-svn.

 - Simon Hausmann and Pete Wyckoff on git-p4.

 - Jakub Narebski, John Hawley, Petr Baudis, Luben Tuikov, Giuseppe Bilotta on
   gitweb.

 - J. Bruce Fields, Jonathan Nieder, Michael J Gruber and Thomas Rast on
   documentation (and countless others for proofreading and fixing).

 - Alexandre Julliard on Emacs integration.

 - David Aguilar and Charles Bailey for taking good care of git-mergetool
   (and Theodore Ts'o for creating it in the first place) and git-difftool.

 - Johannes Schindelin, Johannes Sixt, Erik Faye-Lund, Pat Thoyts and others
   for their effort to move things forward on the Windows front.

 - People on non-Linux platforms for keeping their eyes on portability;
   especially, Randal Schwartz, Theodore Ts'o, Jason Riedy, Thomas Glanzmann,
   Brandon Casey, Jeff King, Alex Riesen and countless others.

* This document

The latest copy of this document is found in git.git repository,
on 'todo' branch, as MaintNotes.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110802114151</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-08-02 11:41:51-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Tue, 2 Aug 2011, Heiko Voigt wrote:
&gt; On Mon, Jul 25, 2011 at 10:33:01PM +0200, Jakub Narebski wrote:
&gt; &gt; === 17. Which of the following features would you like to see implemented in git? ===
&gt; &gt; (multiple choice)
[...]
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; What features should be mentioned besides those above?  What criteria
&gt; &gt; should we have for including features in this list?
&gt; 
&gt; How about adding:
&gt; 
&gt;  + improved submodule support
&gt; 
&gt;  ?

Added, thanks.

-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110802133751</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-08-02 13:37:51-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sun, 31 Jul 2011, Felipe Contreras wrote:
&gt; 2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:
&gt; &gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; &gt; feedback.
&gt; 
&gt; &gt; === 16. Which of the following Git features do you use? ===
&gt; &gt; (multiple choice, with other)
[...]
&gt; &gt;  + interactive commit / per-hunk comitting / partial commit
[...]
&gt; &gt;  + Other, please specify
&gt; &gt;
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; The problem is come up not with exhaustive list of features: there are
&gt; &gt; too many of them to list.  The problem is coming up with list of
&gt; &gt; important and used enough often features.
&gt; &gt;
&gt; &gt; So: what features should be included in this list?  What features
&gt; &gt; should be removed from above list of answers?
&gt; 
&gt; *staging*! I have suggested this multiple times, it should be here this one!
&gt; 
&gt; - stage add / partial commit / interactive commit / per-hunk comitting
&gt; (e.g. git add -u/-i/-p)
&gt; + stage / partial or interactive commits (e.g. git add -u/-i/-p, git
&gt; diff --cached)

Well, it is there... sort of.  I can certainly extend this answer. 
 
&gt; &gt; === 19. Overall, how happy are you with Git? ===
&gt; &gt; (single choice)
&gt; &gt;
&gt; &gt;  * unhappy
&gt; &gt;  * not so happy
&gt; &gt;  * happy
&gt; &gt;  * very happy
&gt; &gt;  * completely ecstatic
&gt; &gt;
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; I'm not sure if this question is at all useful.
&gt; &gt;
&gt; &gt; There is also problem, that the current wording is considered biased
&gt; &gt; by some, but on the other hand changing wording of answers would make
&gt; &gt; it impossible to compare it to answers from previous surveys...
&gt; 
&gt; What wording would you use?

I think I'll keep what we used before.
 
&gt; &gt; === 20. In your opinion, which areas in Git need improvement? ===
&gt; &gt;        Please state your preference.
&gt; &gt; (matrix)
&gt; &gt;
&gt; &gt;   Columns: don't need / a little / some / much
&gt; &gt;  + user-interface
&gt; &gt;  + documentation
&gt; &gt;  + performance
&gt; &gt;  + more features
&gt; &gt;  + tools (e.g. GUI)
&gt; &gt;  + localization (translation)
&gt; &gt;
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; Are there any general areas that are missing from this list?
&gt; &gt; What are they?
&gt; 
&gt; IDE integration, portability?

Portability, certainly.

IDE integration is a bit out of scope, as it is not strictly about Git
itself, but about Git "ecosystem".

As I wrote in separate email, I am thinking about adding a new question:

  21. In your opinion, what Git tools are needed, and which need improvements?
 
&gt; &gt; == About this survey. Open forum. ==
&gt; &gt;
&gt; &gt; === 26. How did you hear about this Git User's Survey? ===
&gt; &gt; (single choice, with other)
&gt; &gt;
&gt; &gt;  * git mailing list
&gt; &gt;  * git-related mailing list (e.g. msysGit, Git for Human Beings)
&gt; &gt;  * mailing list or forum of some project
&gt; &gt;  * #git IRC channel topic
&gt; &gt;  * announcement on IRC channel
&gt; &gt;  * git homepage
&gt; &gt;  * git wiki
&gt; &gt;  * git hosting site (or blog related to such site)
&gt; &gt;  * software-related web site
&gt; &gt;  * news or social news site (e.g. Digg, Reddit)
&gt; &gt;  * blog (or blog planet)
&gt; &gt;  * other kind of web site
&gt; &gt;  * Twitter or other microblogging platform
&gt; &gt;
&gt; &gt;  * other - please specify
&gt; &gt;
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; This list would of course be updated to reflect the list of (planned)
&gt; &gt; announcement channels.
&gt; &gt;
&gt; &gt; There of course will be announcement on Git Mailing List, and perhaps
&gt; &gt; also on msysGit list / Google Group, and on Git For Human Beings
&gt; &gt; Google Group (if it exists).  I'll announce it on #git, and ask op to
&gt; &gt; put short announcement in channel description, and I can announce it
&gt; &gt; on other IRC channels.  I would add announcement to main page of Git
&gt; &gt; Wiki, and as Git Homepage administrator to put announcement about Git
&gt; &gt; User's Survey.
&gt; &gt;
&gt; &gt; I usually tried to contact administrators of git hosting sites,
&gt; &gt; including git.kernel.org, repo.or.cz, GitHub, Gitorious, Assembla,
&gt; &gt; Codebase and Unfuddle, asking them to put announcement about
&gt; &gt; Git User's Survey either somewhere on the site, or in their blog
&gt; &gt; (if there is any).  What git hosting sites it is worth to ask?
&gt; 
&gt; Google+ (maybe facebook).

They are not git hosting sites ;-)

Anyway, on Google+ there are 36 people who have me in their circles,
I have 28 followers on Twitter.  Identi.ca, Plurk, Facebook - here
I don't have or almost don't have "friends"/"subscribers"/"fans".

That's not much, so please: forward / share.
 
&gt; &gt; I would like to have announcement of Git User's Survey 2010 at
&gt; &gt; LWN.net, but this would need to be send at least two weeks in advance,
&gt; &gt; if I remember correctly.  Is it worth it?  What other news site should
&gt; &gt; I (or you) send announcement to?
&gt; &gt;
&gt; &gt; If you can Digg / Reddit announcment on some site, please do.  I can
&gt; &gt; announce Git User's Survey 2-1- at Twitter, Identi.ca and Plurk, but I
&gt; &gt; don't have wide area of followers.  So please RT.
&gt; 
&gt; I can post it on reddit :)

Thanks in advance.
 
&gt; &gt; Should we contact some bloggers (besides asking Junio to put
&gt; &gt; announcement on his blog) to post an anouncement?  Which bloggers
&gt; &gt; would respond positively (perhaps Linus...)?
&gt; 
&gt; I can post it on gitlog. It looks like there are now many people checking it.

Thanks in advance, again.

-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110802185257</emailId><senderName>Jens Lehmann</senderName><senderEmail>jens.lehmann@web.de</senderEmail><timestampReceived>2011-08-02 18:52:57-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

Am 25.07.2011 22:33, schrieb Jakub Narebski:
&gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; feedback.

I'd appreciate to get some user feedback on submodules. What about this:


=== xx. What do you use submodules for? ===
(multiple choice, with other)

 + I don't use submodules at all

 + to import repositories maintained by others
 + for your own (or your organization's) code shared between different projects
 + to separate large and/or many files for performance reasons
 + to separate data which you don't want (or aren't allowed) to disclose

 + Other, please specify
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110803112734</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-08-03 11:27:34-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Tue, 2 Aug 2011, Jens Lehmann wrote:
&gt; Am 25.07.2011 22:33, schrieb Jakub Narebski:

&gt; &gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; &gt; feedback.
&gt; 
&gt; I'd appreciate to get some user feedback on submodules. What about this:
&gt; 
&gt; === xx. What do you use submodules for? ===
&gt; (multiple choice, with other)
&gt; 
&gt;  + I don't use submodules at all
&gt; 
&gt;  + to import repositories maintained by others
&gt;  + for your own (or your organization's) code shared between different projects
&gt;  + to separate large and/or many files for performance reasons
&gt;  + to separate data which you don't want (or aren't allowed) to disclose
&gt; 
&gt;  + Other, please specify

Thanks for your feedback.  I'll add it, either in the above form, or
slightly extended as

 === xx. What do you use submodules (or similar) for? ===
 (multiple choice, with other)
 
  + I don't use submodules at all

  + I use submodules
  + I use repo
  + I use git-subtree
  + I use gitslave

  + to import repositories maintained by others
  + for your own (or your organization's) code shared between different projects
  + to separate large and/or many files for performance reasons
  + to separate data which you don't want (or aren't allowed) to disclose

  + Other, please specify

-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110803164013</emailId><senderName>Ævar Arnfjörð Bjarmason</senderName><senderEmail>avarab@gmail.com</senderEmail><timestampReceived>2011-08-03 16:40:13-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:

&gt; === 16. Which of the following Git features do you use? ===
&gt; (multiple choice, with other)
&gt;
&gt;   + localization of command-line messages (i18n)

It's probably better to move this to some "would you like i18n"
section. Nobody can use i18n at the moment, there's just a skeleton
implementation of it.
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110725203301</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-07-25 20:33:01-0400</timestampReceived><subject>[RFC] Questions for "Git User's Survey 2011"</subject><body>

I am planning doing annual Git User's Survey, and I'd like to ask for
feedback.

Thanks to generocity of Survs.com, we have been gifted with premium
annual plan (last year Git User's Survey had more than 8000
responses!).  This plan will last till 26 October 2011, so I am
planning on having the survey for 1 month, in September:

  1 September -- 30 September 2011

One difference is that I would be sending announcements to git hosting
sites, to a few blogs, to git mailing lists, to git IRC channels, git
homepage and git wiki... but I will not be sending announcements to
individual projects and projects groups, perhaps with exception of
LKML.  Though if you want to, feel free.

I will be also making available separate channels, with separate URLs,
so that if one wants one might track all responses followed from
his/her site (e.g. some company wanting to see how their employees use
Git).  It would be available on request... though there would be only
one shortened "named" URL (tinyurl.com); might use goo.gl for separate
channels.

What questions (and with what proposed answers) should there be in
this year survey?  I am planning on having 30 questions or less total,
this time split into pages.

Below there is the content of the proposed survey:


= Git User's Survey 2011 (proposal) =

== About you ==

NOTES: 
^^^^^^
This section gives us a bit of demographical information about survey
responders.  Is it useful?

=== 01. What country do you live in? ===
        (Country of residence)
(free-form single line)

NOTES:
^^^^^^
Perhaps a better solution would be a menu (drop-down list) of
countries, using list of current countries.  It would be more work to
create it (so it looks like it is out of question, unless Survs.com
implements it as template or something), but might reduce ambiguities
and unparsable responses... though there weren't that many.

This question originally read "What country are you from?"

=== 02. How old are you (in years)? ===
        (Single number)
(free-form single line)

=== 03. Does Git include code or documentation by you? ===
    (Are you a Git developer?)
(single choice)

* Yes
* No

NOTES:
^^^^^^
This is here to correlate other responses with Git developers.


== Getting started with Git ==

=== 04. Have you found Git easy to learn? ===
(single choice)

* Very easy
* Easy
* Reasonably easy
* Hard
* Very hard

=== 05. Have you found Git easy to use? ===
(single choice)

* Very easy
* Easy
* Reasonably easy
* Hard
* Very hard

NOTES:
^^^^^^ 
Those two questions, considered alone, doesn't tell us much.  If one use
git, then usually one does not think it is too hard to use (unless forced to
use git by external circumstances, like project he/she works on using git).
On the other hand those two questions together give us some mesaure of git
learning curve, telling us if people consider git easy to use but hard to
learn, or vice versa ;-)

The question is: should those questions stay, or should they go?


=== 06. Which Git version(s) are you using? ===
(multiple choice, with other)

 + pre 1.3
 + 1.3.x
 + 1.4.x
 + 1.5.x
 + 1.6.x
 + 1.7.x

 + 1.7.x-rcN version (release candidate)
 + minor (maintenance) release 1.x.y.z
 + 'master' branch of official git repository
 + 'next' branch of official git repository
 + 'pu' branch of official git repository
 + version from msysGit / Git for Windows fork repository
 + JGit implementation (e.g. via Eclipse plugin, EGit)

 + other, please specify

Description:
~~~~~~~~~~~~
You can find git version by using `git --version` or `git version`.

"Minor release" is additional specification, so if you for example use
git version 1.7.4.5, please check both "1.7.x" and "minor release"; if
you use "v1.7.6-rc3" please check both "1.7.x" and "-rcN version"

NOTES:
^^^^^^
This question is here to stay.  Should it be extended somehow?

The "-rcN version" is new option.


=== 07. Rate your own proficiency with Git: ===
(single choice)

 * 1. novice
 * 2. casual, needs advice
 * 3. everyday use
 * 4. can offer advice
 * 5. know it very well

Description:
~~~~~~~~~~~~
You can think of it as 1-5 numerical grade of your proficiency in Git.

NOTES:
^^^^^^
This question tell us penetration of announcements of Git User's Survey 2011;
did we get to all, or only to git gurus?  It is also useful for correlating
with other responses, for example to know which features are used by
novices, and which by gurus.

Note that the answers are here to stay because of "backwards
compatibility", i.e. to be able to easy compare with earlier surveys.


== How you use Git ==

=== 08. I use Git for (check all that apply): ===
(multiple choice, with other)

Note that those choices are neither orthogonal nor exclusive.  One
might want to check multiple answers even for a single repository.

NOTES:
^^^^^^
Answers to this question probe different direction.
This list is interspersed with comments about specific
(sub)sections.

 + work projects
 + unpaid projects

Notes:
^^^^^^
Those two are about using git at work vs using git on your own free time.
There are of course shades of gray, like using git for work project
unofficially (e.g.using git-svn as "fat" client for company's Subversion
repository), or employer allowing to work on non-work OSS project during
working hours.  But I'm not sure if they are worth adding.

 + proprietary projects
 + OSS development (also public domain, and published &amp; unlicensed)
 + private (unpublished), in house

Notes:
^^^^^^
Those three are about licensing: proprietary / free (open) / unlicensed.
By 'OSS development' I mean here also free licenses for documentation and
documents, like GFDL or Creative Commons licenses (both copyleft and
permissive).

 + code (programming) and its documentation
 + data, documents (also e.g. static website)

Notes:
^^^^^^
This is about what kind of data do you store in git.  It is much
simplified compared to previous version, reduced to only two
responses: code and data.

 + sharing data or sync
 + managing configuration files
 + backup
 + backend for wiki, blog, or other web app
 + bugtracker / issue tracker
 + frontend to other SCM (e.g. git-svn)

Notes:
^^^^^^
This is about (ab)using git for other things than straighforward source
control management.  List of possible answers specified here should cover
most commonly encountered usages: should we add anything else here?

 + other (please specify)

Description:
~~~~~~~~~~~~
Note that above choices are neither orthogonal nor exclusive.
You might want to check multiple answers even for a single repository.


=== 09. How do/did you obtain Git (install and/or upgrade)? ===
(multiple choice, with other)

Note that this question is multiple choices question because one can
install Git in different ways on different machines or on different
operating systems.

 + binary package
 + source package or script (automatic compiling)
 + source tarball (extract, make, make install)
 + pull from (main) repository
 + preinstalled / sysadmin job

 + other - please specify (if none of the above apply)

Description:
~~~~~~~~~~~~
Explanation: "binary package" covers pre-compiled binary (e.g.  from
rpm or deb binary packages); "source package" covers things like
deb-src and SRPMS / *.src.rpm; "source script" is meant to cover
installation in source-based distributions, like 'emerge' in Gentoo.

Automatic update (apt, yum, etc.) in most cases means binary package
install; unless one uses source-based distribution like Gentoo, CRUX,
or SourceMage, where automatic update means using source package (or
source script).

The option named "preinstalled / sysadmin job" means that either you
didn't need to install git because it was preinstalled (and you didn't
upgrade); or that you have to ask system administrator to have git
installed or upgraded.

Note that this question is multiple choices question because one can
install Git in different ways on different machines or on different
operating systems.

NOTES:
^^^^^^
What I didn't take into account in above explanation is operating
systems with packaging systems different that the one used by various
Linux distributions.

In short: if to have git installed you compile it, you use source
package or source tarball.  If the installation onvolves anything more
than 'make install' (or manual copying), then it is most probably
source package or script.

This for example means that "msysGit" installer is source package, and
"Git for Windows" is binary package, if I understand it correctly.


=== 10. On which operating system(s) do you use Git? ===
(multiple choice, with other)

 + GNU/Linux (includes MeeGo)
 + MacOS X (Darwin)
 + MS Windows/msysGit (MINGW)
 + MS Windows/Cygwin
 + some MS Windows (unknown)
 + FreeBSD, OpenBSD, NetBSD, etc.
 + Android
 + Solaris / OpenSolaris / Illuminati
 + other Unix

 + Other, please specify

Description:
~~~~~~~~~~~~
On Unix-based operating system you can get the name of operation
system by running `uname` (or `uname -o`).

NOTES:
^^^^^^
How to detect if it is msysGit or Cygwin from within?  Perhaps we
should have just "MS Windows"...


=== 11. What Git interfaces, implementations and frontends do you use? ===
(multiple choice, with other)

 + JGit (Java implementation), e.g. via Eclipse plugin
 + NGit or Git# (C# implementation)
 + Dulwich (pure-Python implementation)
 + Git::PurePerl (Perl implementation)
 + git.js (JavaScript)
 + libgit2 bindings

 + git (core) commandline
 + Cogito (DEPRECATED)
 + Easy Git
 + Pyrite
 + I don't know, I only use (graphical) tools

 + pg aka Patchy Git (DEPRECATED)
 + StGIT
 + Guilt
 + TopGit

 + Zit

 + other (please specify)

NOTES:
^^^^^^
This version is going back to split from 2008 survey, rather than
having everything put together like in 2009 one.  There are, of
course, problems with both choices.  

The problem with split part is that people can have troubls with
distinguising between interfaces, implementations, frontends and tools
(although "I don't know ..."  answer should, I think, help here).  The
problem with having it everything together is that the list of
possible answers gets long and a bit unwieldy.

BTW are there any implementations and frontends that should be added
to the list above?


=== 12. What kind of Git tools do you use? ===
(multiple choice, with other)

If a tool is both history viewer, and commit tool, please choose the
option that corresponds to how do you use this tool.

 + editor/IDE VC integration (e.g. EGit (for Eclipse), TextMate bundle, magit (for GNU Emacs))
 + filemanager / shell extension (e.g. git-cheetah, TortoiseGit)
 + filesystem interface (e.g. gitfs, figfs)
 + graphical history viewer/browser (e.g. gitk)
 + graphical commit tool (e.g. git-gui)
 + graphical diff and/or merge tool (e.g. Kompare, Meld)
 + graphical blame or pickaxe tool (e.g. 'git gui blame')
 + tool to manage git repositories (e.g. Gitosis, Gitolite)
 + git-instaweb, or self-hosted web interface (e.g. gitweb, cgit)
 + self-hosted code review system (e.g. Gerrit)
 + patch management interface (e.g. StGit, Guilt)

 + my own scripts (for daily use)
 + my own scripts (for special tasks)

Description:
~~~~~~~~~~~~
Here graphics diff tool means tools such as Kompare, and graphical
merge tool means tools such as Meld and KDiff3. Those answers include
graphical merge and diff tools used by programmers editors and IDEs.

"graphical history browser (any)" covers tools such as gitk, QGit,
Giggle, tig etc., but also built-in git commands such as "git log
--graph" and "git show-branch". If you use one of mentioned tools
*as* history browser, mark both a tool and "graphical history
browser (any)"; if you use some graphical history viewer not listed
here, please both mark this answer and specify it in the "other tool"
answer.

Similarly for other answers marked "(any)".

NOTES:
^^^^^^
As the number of tools increases (see InterfacesFrontendsAndTools page
on git wiki), having them listed all there gets a bit unwieldy.  On
the other hand it was a good way to find new tools that were not yet
included on IFaT page.  What do you think: should it be about tools,
or only about kind of tools used with git?  

The survey from 2011 did include "What Git GUIs (graphical user
interfaces) do you use?" question.

What do you think about this list?  IS there something that should not
be here?  Or perhaps there is something that should be added to this
list?


=== 13. Which git hosting site(s) do you use for your project(s)? ===
        Please check only hosting sites where you publish/push to (with git)
(multiple choice, with other)

 + [http://repo.or.cz repo.or.cz]
 + [http://github.com GitHub]
 + [http://gitorious.org Gitorious]
 + [http://code.google.com/hosting Google Code]
 + [http://www.indefero.net InDefero]

Notes:
^^^^^^
Those are generic git hosting sites (well, InDefero is now paysite),
each of them showcasing their own tool, all except GitHub open source
(it is Girocco for repo.or.cz; for the rest the tool is named the same
as the git hosting site).

Google Code is new; they support Git only recently.

 + [http://savannah.gnu.org Savannah]
 + [http://sourceforge.net SourceForge]
 + [http://developer.berlios.de BerliOS]

Notes:
^^^^^^
Generic software hosting sites, with git support.  Did I miss
something, should I include yet another site?

 + [http://www.assembla.com Assembla]
 + [http://codebasehq.com Codebase]
 + [http://unfuddle.com Unfuddle]
 - [http://codesion.com Codesion]
 - [http://gitfarm.appspot.com GitFarm]
 - [http://www.projectlocker.com ProjectLocker]
 - [http://thechaw.com The Chaw]

Notes:
^^^^^^
Those are commercial and/or less known git hosting sites, or software
hosting sites with git support.  I am not sure which ones of those
marked with '-' to include, and whether to include other sites from
GitHosting page on git wiki.  What do you think?

 + [http://git.kernel.org kernel.org]
 + [http://www.freedesktop.org/wiki/ freedesktop.org]

Notes:
^^^^^^
Those are 'git hosting site for related projects', but are special in
some sense.  Should I leave them there, or remove from this list?

 + [http://alioth.debian.org Alioth] (Debian)
 + [http://hosted.fedoraproject.org Fedora Hosted]

Notes:
^^^^^^
Those are distribution-specific.  Are there any sites that I missed?
Launchpad from Ubuntu does not count, as it is Bazaar hosting site,
not Git hosting site.

 +  company internal
 +  git hosting site for related projects (e.g. OLPC)
 +  generic site without git support
 +  self hosted

Notes:
^^^^^^
Are ther other kinds / typse of sites one can host project using git
on?  What are they?

 +  Other (please specify)

Description:
~~~~~~~~~~~~
You can find those and other git hosting sites listed on GitHosting
page on Git Wiki.

NOTES:
^^^^^^
I think this question is here to stay.

The "company internal" answer was added in survey from 2010.


=== 14. How do you fetch/get changes from upstream repositories? ===
(multiple choice, with other)

 + git protocol        (e.g. git://git.example.com/repo.git)
 + ssh                 (e.g. ssh+git://git.example.com/repo.git,
                             git.example.com:/srv/scm/repo.git)
 + http                (e.g. http://git.example.com/repo.git)
 + rsync (DEPRECATED)  (e.g. rsync://git.example.com/repo.git)
 + filesystem          (e.g. /path/to/repo.git, file:///path/to/repo.git)
 + via git-bundle
 + foreign SCM (e.g. git-svn)

 + Other, please specify

Description:
~~~~~~~~~~~~
This question asks about how do you get changes (updates) from
projects you follow into your local repository. It is not about how do
you get latest version of Git.

Fetching (or rather cloning) via bundle could mean that project
publishes ready for download bundles to reduce traffic and load on
server (HTTP download [of bundle] can be resumed, git-clone currently
cannot; one can also distribute bundle using P2P).

NOTES:
^^^^^^
What is new are examples of URLs / URIs for each protocol.

Did I miss anything?  Is this question interesting, and should it
stay, or should it be removed?


=== 15. How do you publish/propagate your changes? ===
(multiple choice, with other)

 + push via SSH
 + push via HTTP / HTTPS
 + push via git protocol
 + push (unknown)
 + pull request (+ any form of announcement / notification)
 + format-patch + email
 + format-patch + other (e.g. reviewboard, issue tracker or forum)
 + git bundle

 + git-svn (to Subversion repository)
 + git-p4 (to Perforce repository)
 + foreign SCM interface (other than mentioned above)

 + other - please specify

Description:
~~~~~~~~~~~~
Publishing via bundle could mean sending bundle via email, or posting
it on review board (or forum).

Instead of git-format-patch there can be utilized other way of
generating patch (e.g. git-show, git-diff, 'patch' view from gitweb,
etc.)

NOTES:
^^^^^^
Should it stay, or should it be removed?  I guess it can be
interesting for git hosting sites...  Should we have separate answrs
for different kinds of push (ssh, "dumb" HTTP(S) with WebDAV, "smart"
HTTP - if it is possible, git:// protocol with push enabled)?

Splitting push into transports is new in this survey.


=== 16. Which of the following Git features do you use? ===
(multiple choice, with other)

 + localization of command-line messages (i18n)
 + git bundle (off-line transport)

 + eol conversion (crlf or eol)
 + gitattributes (any)
 + custom diff/merge driver
 + word diff
 + merge strategy options (e.g. -Xrenormalize)
 + textconv

 + submodules (subprojects)
 + subtree merge (optionally git-subtree)

 + partial (sparse) checkout, or assume-unchanged bit

 + separate worktree / core.worktree
 + multiple worktrees (e.g. git-new-worktree)
 + gitdir mechanism (.git file pointing to repository)

 + alternates mechanism (sharing object database)
 + stash (optionally "git stash --keep-index")
 + shallow clone (e.g. "git clone --depth=&lt;n&gt;")
 + detaching HEAD (e.g. "git checkout --detach")
 + commit message templates
 + interactive commit / per-hunk comitting / partial commit
 + interactive rebase (small scale history editing)
 + git-filter-branch or equivalent (large history rewriting)
 + bisect (optionally "git bisect run &lt;script&gt;")
 + tracking code movement with git-blame ("git blame -M" etc.)
 + committing with dirty tree (keeping some changes uncommitted)

 + non-default hooks (from contrib/hooks/ or other)
 + shell completion of commands
 + git-aware shell prompt
 + git aliases, shell aliases for git, or own git scripts

 + one-way interaction with other SCMs (from SCM to git)
 + two-way interaction with other SCMs (from SCM to git, from git to SCM)

 + git-cvsserver
 + git notes


 + Other, please specify

NOTES:
^^^^^^
The problem is come up not with exhaustive list of features: there are
too many of them to list.  The problem is coming up with list of
important and used enough often features.

So: what features should be included in this list?  What features
should be removed from above list of answers?


=== 17. Which of the following features would you like to see implemented in git? ===
(multiple choice)

 + better support for big files (large media)
 + resumable clone/fetch (and other remote operations)
 + GitTorrent Protocol, or git-mirror
 + lazy clone / on-demand fetching of object
 + support for tracking empty directories
 + environmental variables in config, 
   and expanding ~ and ~user in paths in config
 + better undo/abort/continue, and for more commands
 + '-n' like option for each command, which describes what would happen
 + side-by-side diffs and/or color-words diff in gitweb
 + admin and/or write features in gitweb
 + graphical history view in gitweb
 + GUI for rebase in git-gui
 + GUI for creating repository in git-gui
 + filename encoding (in repository vs in filesystem)
 + git push --create
 + wholesame directory rename detection
 + graphical merge tool integrated with git-gui
 + union checkouts (some files from one branch, some from other)
 + advisory locking / "this file is being edited"
 + "commands issued" (or "command equivalents") in git-gui / gitk
 + warn before/when rewriting published history
 + built-in gitjour/bananajour support
 + syntax highlighting in git-gui

 + other (describe below)

NOTES:
^^^^^^
What features should be mentioned besides those above?  What criteria
should we have for including features in this list?

=== 18. Describe what features would you like to have in Git, if it is
        not on the list above? ===
(free form, essay length)


== Other version control systems ==

=== 19. What other version control systems do you use beside Git? ===
(multiple choice, with other)

+ PVCS
+ SCCS
+ RCS

+ CVS
+ Subversion

+ Perforce
+ ClearCase
+ AccuRev SCM
+ StarTeam
+ Visual SourceSafe
+ Team Foundation Server
+ Visual Studio Team System / ALM
+ Rational Team Concert


+ Bazaar
+ Mercurial
+ Monotone
+ Darcs
+ SVK
+ Fossil
+ Veracity

+ BitKeeper
+ Code Co-op
+ TeamWare
+ Plastic SCM
+ Veracity

+ by hand / own scripts / custom
+ other, please specify

NOTES:
^^^^^^
What SCM should be removed, which should be added?


== What you think of Git ==

=== 19. Overall, how happy are you with Git? ===
(single choice)

 * unhappy
 * not so happy
 * happy
 * very happy
 * completely ecstatic

NOTES:
^^^^^^
I'm not sure if this question is at all useful.

There is also problem, that the current wording is considered biased
by some, but on the other hand changing wording of answers would make
it impossible to compare it to answers from previous surveys...


=== 20. In your opinion, which areas in Git need improvement? ===
        Please state your preference.
(matrix)

   Columns: don't need / a little / some / much
 + user-interface
 + documentation
 + performance
 + more features
 + tools (e.g. GUI)
 + localization (translation)

NOTES:
^^^^^^
Are there any general areas that are missing from this list?
What are they?


== Changes in Git (since year ago, or since you started using it) ==

=== 21. Did you participate in previous Git User's Surveys? ===
(multiple choice)

 + in 2006
 + in 2007
 + in 2008
 + in 2009
 + in 2010
 + I don't remember, but I have participated in the past
 + none of the above (this is my first Git User's Survey)

NOTES:
^^^^^^ 
This might be quite useful comparing with previous surveys.


=== 22. How do you compare the current Git version with the version from one year ago? ===
(single choice)

 * better
 * no changes
 * worse

 * cannot say

Description:
~~~~~~~~~~~~
The version from approximately one year ago is 1.7.2 from 21-07-2011
(1.7.3 is from 18-09-2010).

Changes since 1.7.2 include:
* passing extra options to merge strategy via "-X" in more places
* -Xrename-threshold and -Xignore-space-at-eol
  for recursive merge strategy
* "exec" instruction support in interactive rebase
* system-wide attributes file /etc/gitattributes and
  `core.attributesfile`
* completion of commands for bash 4 and zsh
* [&lt;tree&gt;]:./&lt;path&gt; to use path relative to current directory
* ":/&lt;path&gt;" to use path relative to root of working tree hierarchy
* ":/" magic pathspec to work on entire working tree
* "git log -G"
* globbing pathspecs in "git log"
* git log --cherry and --cherry-mark
* "git notes merge" and --notes option to "git log" and friends
* extending "git shell" with custom set of commands
* beginnings of i18n/l10n and translations
* "git checkout --detach"
* "git cherry-pick" and "git revert" improvements
* "git merge" and "git rebase" now DWIMs to upstream
* "git merge -" to merge the previous branch
* `merge.ff` configuration variable
* selecting common timezone in gitweb with JavaScript
* updated (faster and more robust) content tags (labels) in gitweb
* GIT_PREFIX in "[alias] &lt;name&gt; = !process"
* git diff --dirstat=0 and --dirstat=lines
* and more...

NOTES:
^^^^^^
This question is mainly excuse for providing list of main changes
from the year ago.


== Documentation. Getting help. ==

=== 23. How useful have you found the following forms of Git documentation? ===
(matrix)

  Columns: never used / not useful / somewhat / useful
 + Git Wiki
 + Git Reference site
 + other on-line help
 + help distributed with git
 + printed books (or ebooks)

Description:
~~~~~~~~~~~~
* Git Wiki was to be found at http://git.wiki.kernel.org
* Git Reference site can be found at http://gitref.org
* on-line help includes, among others, Git Homepage (http://git-scm.com),
  "Git Community Book" (http://book.git-scm.com), "Pro Git" book
  (http://progit.org) and Git-related help pages on git hosting sites
* help distributed with git include manpages, manual, tutorials, HOWTO,
  release notes, technical documentation, contrib/examples/

NOTES:
^^^^^^
Should we split those answers further, e.g. separating on-line
tutorials and guides, from on-line tips etc.?


=== 24. What channel(s) do you use to request help about Git (if any)? ===
(multiple choice, with other)

 + git mailing list (git@vger.kernel.org)
 + "Git for Human Beings" Google Group
 + msysGit mailing list / Google Group
 + IRC (#git)
 + IRC (other git/SCM related, e.g. #github)
 + IRC (other than above)
 + request in blog post or on wiki
 + asking git guru/colleague/friend
 + project mailing list, or IRC, or forum
 + Twitter or other microblogging platform
 + instant messaging (IM) like XMPP/Jabber
 + StackOverflow or other StackExchange site

 + N/A (didn't request help about Git)

 + other (please specify)

NOTES:
^^^^^^
Are there any main channels of requesting help that I have missed in
the above list of answers?  What are they, and why do you think they
are important enought to warrant inclusion in above list?


=== 25. Which communication channel(s) do you use? ===
        Do you read the mailing list, or watch IRC channel?
(multiple choice, with other)

 + git@vger.kernel.org (main)
 + Git for Human Beings (Google Group)
 + msysGit
 + #git IRC channel
 + #git-devel IRC channel
 + #github or #gitorious IRC channel
 + #revctrl IRC channel

 + other (please specify)

NOTES:
^^^^^^
Are there any communication channels that I have missed?  For example
is there a separate channel that JGit/EGit developers use?


== About this survey. Open forum. ==

=== 26. How did you hear about this Git User's Survey? ===
(single choice, with other)

 * git mailing list
 * git-related mailing list (e.g. msysGit, Git for Human Beings)
 * mailing list or forum of some project
 * #git IRC channel topic
 * announcement on IRC channel
 * git homepage
 * git wiki
 * git hosting site (or blog related to such site)
 * software-related web site
 * news or social news site (e.g. Digg, Reddit)
 * blog (or blog planet)
 * other kind of web site
 * Twitter or other microblogging platform

 * other - please specify

NOTES:
^^^^^^
This list would of course be updated to reflect the list of (planned)
announcement channels.

There of course will be announcement on Git Mailing List, and perhaps
also on msysGit list / Google Group, and on Git For Human Beings
Google Group (if it exists).  I'll announce it on #git, and ask op to
put short announcement in channel description, and I can announce it
on other IRC channels.  I would add announcement to main page of Git
Wiki, and as Git Homepage administrator to put announcement about Git
User's Survey.

I usually tried to contact administrators of git hosting sites,
including git.kernel.org, repo.or.cz, GitHub, Gitorious, Assembla,
Codebase and Unfuddle, asking them to put announcement about 
Git User's Survey either somewhere on the site, or in their blog 
(if there is any).  What git hosting sites it is worth to ask?


I would like to have announcement of Git User's Survey 2010 at
LWN.net, but this would need to be send at least two weeks in advance,
if I remember correctly.  Is it worth it?  What other news site should
I (or you) send announcement to?

If you can Digg / Reddit announcment on some site, please do.  I can
announce Git User's Survey 2-1- at Twitter, Identi.ca and Plurk, but I
don't have wide area of followers.  So please RT.

Should we contact some bloggers (besides asking Junio to put
announcement on his blog) to post an anouncement?  Which bloggers
would respond positively (perhaps Linus...)?

-- 
Jakub Narebski
Poland

--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110725215832</emailId><senderName>Phil Hord</senderName><senderEmail>hordp@cisco.com</senderEmail><timestampReceived>2011-07-25 21:58:32-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On 07/25/2011 04:33 PM, Jakub Narebski wrote:
&gt; NOTES:
&gt; ^^^^^^
&gt; How to detect if it is msysGit or Cygwin from within?  Perhaps we
&gt; should have just "MS Windows"...

I think it's useful to know which build they're using, cygwin or msys. 
Hopefully it's not too confusing for them and they can answer correctly.

&gt;
&gt;
&gt; === 11. What Git interfaces, implementations and frontends do you use? ===
&gt; (multiple choice, with other)
&gt;
&gt;  + JGit (Java implementation), e.g. via Eclipse plugin
&gt;  + NGit or Git# (C# implementation)
&gt;  + Dulwich (pure-Python implementation)
&gt;  + Git::PurePerl (Perl implementation)
&gt;  + git.js (JavaScript)
&gt;  + libgit2 bindings
&gt;
&gt;  + git (core) commandline
&gt;  + Cogito (DEPRECATED)
&gt;  + Easy Git
&gt;  + Pyrite
&gt;  + I don't know, I only use (graphical) tools
&gt;
&gt;  + pg aka Patchy Git (DEPRECATED)
&gt;  + StGIT
&gt;  + Guilt
&gt;  + TopGit
&gt;
&gt;  + Zit
&gt;
&gt;  + other (please specify)

You can probably drop pg and Cogito now, yes?

Looking at the 2010 results, I would add these GUIs to the main list:
git-gui (core)
gitk (core)
gitX
gitg
git-cola
TortoiseGit
SmartGit
Git Extensions
Giggle

Is there room for Gerrit here, or maybe in one of the other questions?
Also, cgit and other web interfaces, I suppose.


&gt; === 16. Which of the following Git features do you use? ===
&gt; (multiple choice, with other)
&gt;
&gt;  + localization of command-line messages (i18n)
&gt;  + git bundle (off-line transport)
&gt;
&gt;  + eol conversion (crlf or eol)
&gt;  + gitattributes (any)
&gt;  + custom diff/merge driver
&gt;  + word diff
&gt;  + merge strategy options (e.g. -Xrenormalize)
&gt;  + textconv
&gt;
&gt;  + submodules (subprojects)
&gt;  + subtree merge (optionally git-subtree)
&gt;
&gt;  + partial (sparse) checkout, or assume-unchanged bit
&gt;
&gt;  + separate worktree / core.worktree
&gt;  + multiple worktrees (e.g. git-new-worktree)
&gt;  + gitdir mechanism (.git file pointing to repository)
&gt;
&gt;  + alternates mechanism (sharing object database)
&gt;  + stash (optionally "git stash --keep-index")
&gt;  + shallow clone (e.g. "git clone --depth=&lt;n&gt;")
&gt;  + detaching HEAD (e.g. "git checkout --detach")
&gt;  + commit message templates
&gt;  + interactive commit / per-hunk comitting / partial commit
&gt;  + interactive rebase (small scale history editing)
&gt;  + git-filter-branch or equivalent (large history rewriting)
&gt;  + bisect (optionally "git bisect run &lt;script&gt;")
&gt;  + tracking code movement with git-blame ("git blame -M" etc.)
&gt;  + committing with dirty tree (keeping some changes uncommitted)
&gt;
&gt;  + non-default hooks (from contrib/hooks/ or other)
&gt;  + shell completion of commands
&gt;  + git-aware shell prompt
&gt;  + git aliases, shell aliases for git, or own git scripts
&gt;
&gt;  + one-way interaction with other SCMs (from SCM to git)
&gt;  + two-way interaction with other SCMs (from SCM to git, from git to SCM)
&gt;
&gt;  + git-cvsserver
&gt;  + git notes
&gt;
&gt;
&gt;  + Other, please specify
&gt;
&gt; NOTES:
&gt; ^^^^^^
&gt; The problem is come up not with exhaustive list of features: there are
&gt; too many of them to list.  The problem is coming up with list of
&gt; important and used enough often features.
&gt;
&gt; So: what features should be included in this list?  What features
&gt; should be removed from above list of answers?

bridges (git-svn, hg-git, git-p4, etc.)
IDE integration (Eclipse, Netbeans, etc.)

Phil

--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110726103742</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-07-26 10:37:42-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Mon, 25 Jul 2011, Phil Hord wrote:
&gt; On 07/25/2011 04:33 PM, Jakub Narebski wrote:

&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; How to detect if it is msysGit or Cygwin from within?  Perhaps we
&gt; &gt; should have just "MS Windows"...
&gt; 
&gt; I think it's useful to know which build they're using, cygwin or msys. 
&gt; Hopefully it's not too confusing for them and they can answer correctly.

Well, there is this option for those confused:

 + some MS Windows (unknown or other)

I should probably add

 + operating system independent (JGit, Dulwich, git.js, ...)
 
&gt; &gt; === 11. What Git interfaces, implementations and frontends do you use? ===
&gt; &gt; (multiple choice, with other)
&gt; &gt;
&gt; &gt;  + JGit (Java implementation), e.g. via Eclipse plugin
&gt; &gt;  + NGit or Git# (C# implementation)
&gt; &gt;  + Dulwich (pure-Python implementation)
&gt; &gt;  + Git::PurePerl (Perl implementation)
&gt; &gt;  + git.js (JavaScript)
&gt; &gt;  + libgit2 bindings
&gt; &gt;
&gt; &gt;  + git (core) commandline
&gt; &gt;  + Cogito (DEPRECATED)
&gt; &gt;  + Easy Git
&gt; &gt;  + Pyrite
&gt; &gt;  + I don't know, I only use (graphical) tools
&gt; &gt;
&gt; &gt;  + pg aka Patchy Git (DEPRECATED)
&gt; &gt;  + StGIT
&gt; &gt;  + Guilt
&gt; &gt;  + TopGit
&gt; &gt;
&gt; &gt;  + Zit
&gt; &gt;
&gt; &gt;  + other (please specify)
&gt; 
&gt; You can probably drop pg and Cogito now, yes?

Yes, I think they can be dropped now.  They were important in previous
years to check if people are still using those deprecated porcelains,
but nowadays I don't think it is necessary.
 
&gt; Looking at the 2010 results, I would add these GUIs to the main list:
&gt; git-gui (core)
&gt; gitk (core)
&gt; gitX
&gt; gitg
&gt; git-cola
&gt; TortoiseGit
&gt; SmartGit
&gt; Git Extensions
&gt; Giggle

Hmmm... they can be considered "frontends", but there are too many GUIs
there to add them all.  They are in a way in "12. What kind of Git tools
do you use?"

Perhaps it would be good idea to add free-form (because of sheer number
of git tools) to write git tools etc. that one uses.
 
&gt; Is there room for Gerrit here, or maybe in one of the other questions?
&gt; Also, cgit and other web interfaces, I suppose.

They are in "12. What kind of Git tools do you use?".

&gt; &gt; === 16. Which of the following Git features do you use? ===
&gt; &gt; (multiple choice, with other)
&gt; &gt;
&gt; &gt;  + localization of command-line messages (i18n)
&gt; &gt;  + git bundle (off-line transport)
[...]
&gt; &gt;  + one-way interaction with other SCMs (from SCM to git)
&gt; &gt;  + two-way interaction with other SCMs (from SCM to git, from git to SCM)
&gt; &gt;
&gt; &gt;  + git-cvsserver
&gt; &gt;  + git notes
&gt; &gt;
&gt; &gt;
&gt; &gt;  + Other, please specify
&gt; &gt;
&gt; &gt; NOTES:
&gt; &gt; ^^^^^^
&gt; &gt; The problem is come up not with exhaustive list of features: there are
&gt; &gt; too many of them to list.  The problem is coming up with list of
&gt; &gt; important and used enough often features.
&gt; &gt;
&gt; &gt; So: what features should be included in this list?  What features
&gt; &gt; should be removed from above list of answers?
&gt; 
&gt; bridges (git-svn, hg-git, git-p4, etc.)

I think they are included in "two-way interaction with other SCMs",
but perhaps that should be made more clear.

&gt; IDE integration (Eclipse, Netbeans, etc.)

This isn't strictly _git_ feature, and is in "12. What kind of Git tools
do you use?" anyway.


Thank you very much for your comments.
-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110726121430</emailId><senderName>Phil Hord</senderName><senderEmail>hordp@cisco.com</senderEmail><timestampReceived>2011-07-26 12:14:30-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On 07/26/2011 06:37 AM, Jakub Narebski wrote:
&gt; On Mon, 25 Jul 2011, Phil Hord wrote:
&gt;
&gt; bridges (git-svn, hg-git, git-p4, etc.)
&gt; I think they are included in "two-way interaction with other SCMs",
&gt; but perhaps that should be made more clear.

I think I just overlooked that one.

&gt;&gt; IDE integration (Eclipse, Netbeans, etc.)
&gt; This isn't strictly _git_ feature, and is in "12. What kind of Git tools
&gt; do you use?" anyway.
&gt;
Yes, it's not a git feature.  But I'm curious how successful any IDE
integration is (as opposed to a GUI, for example).  I haven't seen any
that use enough of the power of git yet, so I have been disappointed.  I
suspect others have also, but I'm hopeful.

Phil

--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110731133758</emailId><senderName>Felipe Contreras</senderName><senderEmail>felipe.contreras@gmail.com</senderEmail><timestampReceived>2011-07-31 13:37:58-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

2011/7/26 Phil Hord &lt;hordp@cisco.com&gt;:
&gt; On 07/26/2011 06:37 AM, Jakub Narebski wrote:
&gt;&gt; On Mon, 25 Jul 2011, Phil Hord wrote:
&gt;&gt;
&gt;&gt; bridges (git-svn, hg-git, git-p4, etc.)
&gt;&gt; I think they are included in "two-way interaction with other SCMs",
&gt;&gt; but perhaps that should be made more clear.
&gt;
&gt; I think I just overlooked that one.
&gt;
&gt;&gt;&gt; IDE integration (Eclipse, Netbeans, etc.)
&gt;&gt; This isn't strictly _git_ feature, and is in "12. What kind of Git tools
&gt;&gt; do you use?" anyway.
&gt;&gt;
&gt; Yes, it's not a git feature.  But I'm curious how successful any IDE
&gt; integration is (as opposed to a GUI, for example).  I haven't seen any
&gt; that use enough of the power of git yet, so I have been disappointed.  I
&gt; suspect others have also, but I'm hopeful.

I also think this is important, in my blog I've seen a bunch of people
mentioning that Git's integration with IDE's is not as good as
Mercurial. Putting this in the already existing list of tools would
not cover missing IDE's being integrated, I think this should go into
"20. In your opinion, which areas in Git need improvement?"

-- 
Felipe Contreras
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110731135354</emailId><senderName>Felipe Contreras</senderName><senderEmail>felipe.contreras@gmail.com</senderEmail><timestampReceived>2011-07-31 13:53:54-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:
&gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; feedback.

&gt; === 16. Which of the following Git features do you use? ===
&gt; (multiple choice, with other)
&gt;
&gt;  + localization of command-line messages (i18n)
&gt;  + git bundle (off-line transport)
&gt;
&gt;  + eol conversion (crlf or eol)
&gt;  + gitattributes (any)
&gt;  + custom diff/merge driver
&gt;  + word diff
&gt;  + merge strategy options (e.g. -Xrenormalize)
&gt;  + textconv
&gt;
&gt;  + submodules (subprojects)
&gt;  + subtree merge (optionally git-subtree)
&gt;
&gt;  + partial (sparse) checkout, or assume-unchanged bit
&gt;
&gt;  + separate worktree / core.worktree
&gt;  + multiple worktrees (e.g. git-new-worktree)
&gt;  + gitdir mechanism (.git file pointing to repository)
&gt;
&gt;  + alternates mechanism (sharing object database)
&gt;  + stash (optionally "git stash --keep-index")
&gt;  + shallow clone (e.g. "git clone --depth=&lt;n&gt;")
&gt;  + detaching HEAD (e.g. "git checkout --detach")
&gt;  + commit message templates
&gt;  + interactive commit / per-hunk comitting / partial commit
&gt;  + interactive rebase (small scale history editing)
&gt;  + git-filter-branch or equivalent (large history rewriting)
&gt;  + bisect (optionally "git bisect run &lt;script&gt;")
&gt;  + tracking code movement with git-blame ("git blame -M" etc.)
&gt;  + committing with dirty tree (keeping some changes uncommitted)
&gt;
&gt;  + non-default hooks (from contrib/hooks/ or other)
&gt;  + shell completion of commands
&gt;  + git-aware shell prompt
&gt;  + git aliases, shell aliases for git, or own git scripts
&gt;
&gt;  + one-way interaction with other SCMs (from SCM to git)
&gt;  + two-way interaction with other SCMs (from SCM to git, from git to SCM)
&gt;
&gt;  + git-cvsserver
&gt;  + git notes
&gt;
&gt;
&gt;  + Other, please specify
&gt;
&gt; NOTES:
&gt; ^^^^^^
&gt; The problem is come up not with exhaustive list of features: there are
&gt; too many of them to list.  The problem is coming up with list of
&gt; important and used enough often features.
&gt;
&gt; So: what features should be included in this list?  What features
&gt; should be removed from above list of answers?

*staging*! I have suggested this multiple times, it should be here this one!

- stage add / partial commit / interactive commit / per-hunk comitting
(e.g. git add -u/-i/-p)
+ stage / partial or interactive commits (e.g. git add -u/-i/-p, git
diff --cached)

&gt; === 19. Overall, how happy are you with Git? ===
&gt; (single choice)
&gt;
&gt;  * unhappy
&gt;  * not so happy
&gt;  * happy
&gt;  * very happy
&gt;  * completely ecstatic
&gt;
&gt; NOTES:
&gt; ^^^^^^
&gt; I'm not sure if this question is at all useful.
&gt;
&gt; There is also problem, that the current wording is considered biased
&gt; by some, but on the other hand changing wording of answers would make
&gt; it impossible to compare it to answers from previous surveys...

What wording would you use?

&gt; === 20. In your opinion, which areas in Git need improvement? ===
&gt;        Please state your preference.
&gt; (matrix)
&gt;
&gt;   Columns: don't need / a little / some / much
&gt;  + user-interface
&gt;  + documentation
&gt;  + performance
&gt;  + more features
&gt;  + tools (e.g. GUI)
&gt;  + localization (translation)
&gt;
&gt; NOTES:
&gt; ^^^^^^
&gt; Are there any general areas that are missing from this list?
&gt; What are they?

IDE integration, portability?

&gt; == About this survey. Open forum. ==
&gt;
&gt; === 26. How did you hear about this Git User's Survey? ===
&gt; (single choice, with other)
&gt;
&gt;  * git mailing list
&gt;  * git-related mailing list (e.g. msysGit, Git for Human Beings)
&gt;  * mailing list or forum of some project
&gt;  * #git IRC channel topic
&gt;  * announcement on IRC channel
&gt;  * git homepage
&gt;  * git wiki
&gt;  * git hosting site (or blog related to such site)
&gt;  * software-related web site
&gt;  * news or social news site (e.g. Digg, Reddit)
&gt;  * blog (or blog planet)
&gt;  * other kind of web site
&gt;  * Twitter or other microblogging platform
&gt;
&gt;  * other - please specify
&gt;
&gt; NOTES:
&gt; ^^^^^^
&gt; This list would of course be updated to reflect the list of (planned)
&gt; announcement channels.
&gt;
&gt; There of course will be announcement on Git Mailing List, and perhaps
&gt; also on msysGit list / Google Group, and on Git For Human Beings
&gt; Google Group (if it exists).  I'll announce it on #git, and ask op to
&gt; put short announcement in channel description, and I can announce it
&gt; on other IRC channels.  I would add announcement to main page of Git
&gt; Wiki, and as Git Homepage administrator to put announcement about Git
&gt; User's Survey.
&gt;
&gt; I usually tried to contact administrators of git hosting sites,
&gt; including git.kernel.org, repo.or.cz, GitHub, Gitorious, Assembla,
&gt; Codebase and Unfuddle, asking them to put announcement about
&gt; Git User's Survey either somewhere on the site, or in their blog
&gt; (if there is any).  What git hosting sites it is worth to ask?

Google+ (maybe facebook).

&gt; I would like to have announcement of Git User's Survey 2010 at
&gt; LWN.net, but this would need to be send at least two weeks in advance,
&gt; if I remember correctly.  Is it worth it?  What other news site should
&gt; I (or you) send announcement to?
&gt;
&gt; If you can Digg / Reddit announcment on some site, please do.  I can
&gt; announce Git User's Survey 2-1- at Twitter, Identi.ca and Plurk, but I
&gt; don't have wide area of followers.  So please RT.

I can post it on reddit :)

&gt; Should we contact some bloggers (besides asking Junio to put
&gt; announcement on his blog) to post an anouncement?  Which bloggers
&gt; would respond positively (perhaps Linus...)?

I can post it on gitlog. It looks like there are now many people checking it.

-- 
Felipe Contreras
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110801205743</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-08-01 20:57:43-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sun, 31 Jul 2011, Felipe Contreras wrote:
&gt; 2011/7/26 Phil Hord &lt;hordp@cisco.com&gt;:
&gt;&gt; On 07/26/2011 06:37 AM, Jakub Narebski wrote:
&gt;&gt;&gt; On Mon, 25 Jul 2011, Phil Hord wrote:

&gt;&gt;&gt;&gt; IDE integration (Eclipse, Netbeans, etc.)
&gt;&gt;&gt;
&gt;&gt;&gt; This isn't strictly _git_ feature, and is in "12. What kind of Git tools
&gt;&gt;&gt; do you use?" anyway.
&gt;&gt;&gt;
&gt;&gt; Yes, it's not a git feature.  But I'm curious how successful any IDE
&gt;&gt; integration is (as opposed to a GUI, for example).  I haven't seen any
&gt;&gt; that use enough of the power of git yet, so I have been disappointed.  I
&gt;&gt; suspect others have also, but I'm hopeful.
&gt; 
&gt; I also think this is important, in my blog I've seen a bunch of people
&gt; mentioning that Git's integration with IDE's is not as good as
&gt; Mercurial. Putting this in the already existing list of tools would
&gt; not cover missing IDE's being integrated, I think this should go into
&gt; "20. In your opinion, which areas in Git need improvement?"

I think this is a good idea, though perhaps not in question about Git
(it is "which areas in _Git_"), but in a separate question about Git
tools.

 21. In your opinion, what Git tools are needed, and which need improvements?

Or something like that.
-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110801234323</emailId><senderName>Heiko Voigt</senderName><senderEmail>hvoigt@hvoigt.net</senderEmail><timestampReceived>2011-08-01 23:43:23-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

Hi,

On Mon, Jul 25, 2011 at 10:33:01PM +0200, Jakub Narebski wrote:
&gt; === 17. Which of the following features would you like to see implemented in git? ===
&gt; (multiple choice)
&gt; 
&gt;  + better support for big files (large media)
&gt;  + resumable clone/fetch (and other remote operations)
&gt;  + GitTorrent Protocol, or git-mirror
&gt;  + lazy clone / on-demand fetching of object
&gt;  + support for tracking empty directories
&gt;  + environmental variables in config, 
&gt;    and expanding ~ and ~user in paths in config
&gt;  + better undo/abort/continue, and for more commands
&gt;  + '-n' like option for each command, which describes what would happen
&gt;  + side-by-side diffs and/or color-words diff in gitweb
&gt;  + admin and/or write features in gitweb
&gt;  + graphical history view in gitweb
&gt;  + GUI for rebase in git-gui
&gt;  + GUI for creating repository in git-gui
&gt;  + filename encoding (in repository vs in filesystem)
&gt;  + git push --create
&gt;  + wholesame directory rename detection
&gt;  + graphical merge tool integrated with git-gui
&gt;  + union checkouts (some files from one branch, some from other)
&gt;  + advisory locking / "this file is being edited"
&gt;  + "commands issued" (or "command equivalents") in git-gui / gitk
&gt;  + warn before/when rewriting published history
&gt;  + built-in gitjour/bananajour support
&gt;  + syntax highlighting in git-gui
&gt; 
&gt;  + other (describe below)
&gt; 
&gt; NOTES:
&gt; ^^^^^^
&gt; What features should be mentioned besides those above?  What criteria
&gt; should we have for including features in this list?

How about adding:

 + improved submodule support

 ?

Cheers Heiko
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110803174044</emailId><senderName>Jakub_NarÄ™bski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-08-03 17:40:44-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On 8/3/11, Ævar Arnfjörð Bjarmason &lt;avarab@gmail.com&gt; wrote:
&gt; 2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:
&gt;
&gt;&gt; === 16. Which of the following Git features do you use? ===
&gt;&gt; (multiple choice, with other)
&gt;&gt;
&gt;&gt;  + localization of command-line messages (i18n)
&gt;
&gt; It's probably better to move this to some "would you like i18n"
&gt; section. Nobody can use i18n at the moment, there's just a skeleton
&gt; implementation of it.

O.K. I moved it to "17. Which of the following features would you
like to see implemented in git?"

Thanks for feedback
-- 
Jakub Narebski
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110903084531</emailId><senderName>David Aguilar</senderName><senderEmail>davvid@gmail.com</senderEmail><timestampReceived>2011-09-03 08:45:31-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Mon, Jul 25, 2011 at 05:58:32PM -0400, Phil Hord wrote:
&gt; On 07/25/2011 04:33 PM, Jakub Narebski wrote:
&gt; &gt; === 11. What Git interfaces, implementations and frontends do you use? ===
&gt; &gt; (multiple choice, with other)
&gt; &gt;
&gt; &gt;  + JGit (Java implementation), e.g. via Eclipse plugin
&gt; &gt;  + NGit or Git# (C# implementation)
&gt; &gt;  + Dulwich (pure-Python implementation)
&gt; &gt;  + Git::PurePerl (Perl implementation)
&gt; &gt;  + git.js (JavaScript)
&gt; &gt;  + libgit2 bindings
&gt; &gt;
&gt; &gt;  + git (core) commandline
&gt; &gt;  + Cogito (DEPRECATED)
&gt; &gt;  + Easy Git
&gt; &gt;  + Pyrite
&gt; &gt;  + I don't know, I only use (graphical) tools
&gt; &gt;
&gt; &gt;  + pg aka Patchy Git (DEPRECATED)
&gt; &gt;  + StGIT
&gt; &gt;  + Guilt
&gt; &gt;  + TopGit
&gt; &gt;
&gt; &gt;  + Zit
&gt; &gt;
&gt; &gt;  + other (please specify)
&gt; 
&gt; You can probably drop pg and Cogito now, yes?

I would drop Pyrite too.  The last activity was in 2008 and it
never went beyond pre-alpha.

&gt; Looking at the 2010 results, I would add these GUIs to the main list:
&gt; git-gui (core)
&gt; gitk (core)
&gt; gitX
&gt; gitg
&gt; git-cola
&gt; TortoiseGit
&gt; SmartGit
&gt; Git Extensions
&gt; Giggle

This is a better list ;-)
-- 
					David
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110903090053</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-09-03 09:00:53-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sat, 3 Sep 2011, David Aguilar wrote:
&gt; On Mon, Jul 25, 2011 at 05:58:32PM -0400, Phil Hord wrote:
&gt; &gt; On 07/25/2011 04:33 PM, Jakub Narebski wrote:
&gt; &gt; &gt; === 11. What Git interfaces, implementations and frontends do you use? ===
&gt; &gt; &gt; (multiple choice, with other)
[...]
 
&gt; &gt; Looking at the 2010 results, I would add these GUIs to the main list:
&gt; &gt; git-gui (core)
&gt; &gt; gitk (core)
&gt; &gt; gitX
&gt; &gt; gitg
&gt; &gt; git-cola
&gt; &gt; TortoiseGit
&gt; &gt; SmartGit
&gt; &gt; Git Extensions
&gt; &gt; Giggle
&gt; 
&gt; This is a better list ;-)

Because of huge number of Git GUIs and tools instead of providing a long
list of tools to choose from, I went for free-form question:

  === 13. List git tools that you use (optional) ===
  (free form, essay)

  Description:
  ~~~~~~~~~~~~
  Please include only frontends, interfaces and tools that have support
  for Git (so e.g. EGit applies, but Eclipse doesn't).

  Please either use comma separated list of tools, or put each tool in a
  separate line.  That would make analysis of answers simpler.  Thanks
  in advance.

Even though it is free-form question, it shouldn't be hard to analyse,
though it wouldn't be completely automatical.
-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110903125822</emailId><senderName>Felipe Contreras</senderName><senderEmail>felipe.contreras@gmail.com</senderEmail><timestampReceived>2011-09-03 12:58:22-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:
&gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; feedback.

Do you have an updated version somewhere?

-- 
Felipe Contreras
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110903153811</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-09-03 15:38:11-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sat, 3 Sep 2011, Felipe Contreras wrote:
&gt; 2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:

&gt; &gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt; &gt; feedback.
&gt; 
&gt; Do you have an updated version somewhere?

You can preview test version of survey at

  https://www.survs.com/survey/VEBXFGJ9B0

Note that all answers in this test channel will be deleted!

Up to date version was sent to git mailing list as

  [RFCv2] Questions for "Git User's Survey 2011"
  http://article.gmane.org/gmane.comp.version-control.git/180643

and can be found on Git Wiki:

  http://git.wiki.kernel.org/index.php/GitSurvey2011


P.S. If I remember correctly you wanted some question about "staging area"
terminology, or something like that.  Do you have concrete proposal for
question and list of answers?

I was thinking about

  xx. How do you include changes in new commit?
  (multiple choice, with other)

  [ ] commit -a
  [ ] commit &lt;file&gt;
  [ ] commit -i &lt;file&gt;
  [ ] git add
  [ ] git stage
  [ ] git update-index
  [ ] incremental add / commit
  [ ] other, please specify __________________________

(it is not in current version of survey, but can be added before it starts
for real)... though it is only small subset of "stage" vs "the index"
terminology.  If you have something better...

-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110903234112</emailId><senderName>David Aguilar</senderName><senderEmail>davvid@gmail.com</senderEmail><timestampReceived>2011-09-03 23:41:12-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sep 3, 2011, at 2:00 AM, Jakub Narebski &lt;jnareb@gmail.com&gt; wrote:

&gt; On Sat, 3 Sep 2011, David Aguilar wrote:
&gt; &gt; On Mon, Jul 25, 2011 at 05:58:32PM -0400, Phil Hord wrote:
&gt; &gt; &gt; On 07/25/2011 04:33 PM, Jakub Narebski wrote:
&gt; &gt; &gt; &gt; === 11. What Git interfaces, implementations and frontends do you use? ===
&gt; &gt; &gt; &gt; (multiple choice, with other)
&gt; [...]
&gt; 
&gt; &gt; &gt; Looking at the 2010 results, I would add these GUIs to the main list:
&gt; &gt; &gt; git-gui (core)
&gt; &gt; &gt; gitk (core)
&gt; &gt; &gt; gitX
&gt; &gt; &gt; gitg
&gt; &gt; &gt; git-cola
&gt; &gt; &gt; TortoiseGit
&gt; &gt; &gt; SmartGit
&gt; &gt; &gt; Git Extensions
&gt; &gt; &gt; Giggle
&gt; &gt; 
&gt; &gt; This is a better list ;-)
&gt; 
&gt; Because of huge number of Git GUIs and tools instead of providing a long
&gt; list of tools to choose from, I went for free-form question:

okay, that makes sense.

nevertheless, we are advertising cogito (deprecated) and pyrite (never made it past \
pre-alpha in 2008).  why? these should be removed. if you need a replacement, might I \
suggest git-cola? ;-)I think removing (and thus not advertising) dead tools is more \
important than coming up with replacements. this is on page 4/10 on the survs.com \
link you sent elsewhere in this thread.


&gt; === 13. List git tools that you use (optional) ===
&gt; (free form, essay)
&gt; 
&gt; Description:
&gt; ~~~~~~~~~~~~
&gt; Please include only frontends, interfaces and tools that have support
&gt; for Git (so e.g. EGit applies, but Eclipse doesn't).
&gt; 
&gt; Please either use comma separated list of tools, or put each tool in a
&gt; separate line.  That would make analysis of answers simpler.  Thanks
&gt; in advance.
&gt; 
&gt; Even though it is free-form question, it shouldn't be hard to analyse,
&gt; though it wouldn't be completely automatical.
&gt; -- 
&gt; Jakub Narebski
&gt; Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html


</body></email><email><emailId>20110914161413</emailId><senderName>Felipe Contreras</senderName><senderEmail>felipe.contreras@gmail.com</senderEmail><timestampReceived>2011-09-14 16:14:13-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Sat, Sep 3, 2011 at 6:38 PM, Jakub Narebski &lt;jnareb@gmail.com&gt; wrote:
&gt; On Sat, 3 Sep 2011, Felipe Contreras wrote:
&gt;&gt; 2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:
&gt;
&gt;&gt; &gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt;&gt; &gt; feedback.
&gt;&gt;
&gt;&gt; Do you have an updated version somewhere?
&gt;
&gt; You can preview test version of survey at
&gt;
&gt;  https://www.survs.com/survey/VEBXFGJ9B0
&gt;
&gt; Note that all answers in this test channel will be deleted!
&gt;
&gt; Up to date version was sent to git mailing list as
&gt;
&gt;  [RFCv2] Questions for "Git User's Survey 2011"
&gt;  http://article.gmane.org/gmane.comp.version-control.git/180643
&gt;
&gt; and can be found on Git Wiki:
&gt;
&gt;  http://git.wiki.kernel.org/index.php/GitSurvey2011
&gt;
&gt;
&gt; P.S. If I remember correctly you wanted some question about "staging area"
&gt; terminology, or something like that.  Do you have concrete proposal for
&gt; question and list of answers?
&gt;
&gt; I was thinking about
&gt;
&gt;  xx. How do you include changes in new commit?
&gt;  (multiple choice, with other)
&gt;
&gt;  [ ] commit -a
&gt;  [ ] commit &lt;file&gt;
&gt;  [ ] commit -i &lt;file&gt;
&gt;  [ ] git add
&gt;  [ ] git stage
&gt;  [ ] git update-index
&gt;  [ ] incremental add / commit
&gt;  [ ] other, please specify __________________________
&gt;
&gt; (it is not in current version of survey, but can be added before it starts
&gt; for real)... though it is only small subset of "stage" vs "the index"
&gt; terminology.  If you have something better...

I am just looking at this. You should send regular updates to the
survey, right after the initial batch of feedback, not one day before.

First of all, "changes in new commit" doesn't sound right, should be
either "a new commit", or "new commits".

Second, you should have added what I said:

+ stage / partial or interactive commits (e.g. git add -u/-i/-p, git
diff --cached)

Nowhere in the survey does it as for 'git diff --cached' or anything
that acts on the stage.

So now we have your question, plus this:
 + interactive commit / per-hunk comitting / partial commit

But that's not good enough.

People might think 'git add -u/-i/-p' is not related to a commit.
Also, we still don't know if people use --cached --keep-index, or any
of those. If instead of 'git add/stage' you had 'git add/stage
-u/-i/-p' That would have been better, and no, incremental add /commit
doesn't really fit, for example, I usually do 'git add -p; git
commit', so it's not really incremental.

I think we should stop beating around the bushes, and ask what we want to ask:

 == Do you use the stage/cache/index? ==

If you don't want to ask that question directly, or you think people
might not understand the question, we should be listing all the
commands that use the stage, and make sure they are handled in the
survey:

 X git diff --cached
 X git grep --cached
 X git rm --cached
 X git stash apply/pop --index
 X git stash (save) --[no-]keep-index
 X git add &lt;tracked_file&gt;
 X git add -p
 X git add -i
 X git add -u
 X git commit -p
 X git commit --interactive (not the same as git commit -i)

It turns out none of them are explicitly asked in the survey. In order
to do that, this is the only option I see:

 + interactive commits (e.g. git commit -p/--interactive)
 + stage (e.g. git add -p/-i/-u, git add &lt;tracked_file))
 + stage commands (e.g. git * --cached, git stash * --index/--[no-]keep-index)

Or at the very least what I suggested initially:
 + stage / partial or interactive commits (e.g. git add -u/-i/-p, git
* --cached)

Cheers.

-- 
Felipe Contreras
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20110914173912</emailId><senderName>Jakub Narebski</senderName><senderEmail>jnareb@gmail.com</senderEmail><timestampReceived>2011-09-14 17:39:12-0400</timestampReceived><subject>Re: [RFC] Questions for "Git User's Survey 2011"</subject><body>

On Wed, 14 Sep 2011, Felipe Contreras wrote:
&gt; On Sat, Sep 3, 2011 at 6:38 PM, Jakub Narebski &lt;jnareb@gmail.com&gt; wrote:
&gt;&gt; On Sat, 3 Sep 2011, Felipe Contreras wrote:
&gt;&gt;&gt; 2011/7/25 Jakub Narebski &lt;jnareb@gmail.com&gt;:

&gt;&gt;&gt;&gt; I am planning doing annual Git User's Survey, and I'd like to ask for
&gt;&gt;&gt;&gt; feedback.
[...]
&gt;&gt; P.S. If I remember correctly you wanted some question about "staging area"
&gt;&gt; terminology, or something like that.  Do you have concrete proposal for
&gt;&gt; question and list of answers?
&gt;&gt;
&gt;&gt; I was thinking about
&gt;&gt;
&gt;&gt;  xx. How do you include changes in new commit?
&gt;&gt;  (multiple choice, with other)
&gt;&gt;
&gt;&gt;  [ ] commit -a
&gt;&gt;  [ ] commit &lt;file&gt;
&gt;&gt;  [ ] commit -i &lt;file&gt;
&gt;&gt;  [ ] git add
&gt;&gt;  [ ] git stage
&gt;&gt;  [ ] git update-index
&gt;&gt;  [ ] incremental add / commit
&gt;&gt;  [ ] other, please specify __________________________
&gt;&gt;
&gt;&gt; (it is not in current version of survey, but can be added before it starts
&gt;&gt; for real)... though it is only small subset of "stage" vs "the index"
&gt;&gt; terminology.  If you have something better...
&gt; 
&gt; I am just looking at this. You should send regular updates to the
&gt; survey, right after the initial batch of feedback, not one day before.

I'm very sorry about that.

My excuse is that I had less time during the summer holidays than
I thought, and there were time when I was not able to work on Git or
Git User's Survey.  Additionally the premium account plan, which we have
for free thanks to generosity of Survs.com admins, ends 26 October 2011.
This means that postponing Git User's Survey to gather feedback and
start it later was out of question.
 
Also somehow I have missed your comments (or not implemented them
immediately because they lacked concrete proposal), and found them
only when sending last call request for feedback, just before starting
survey.

&gt; First of all, "changes in new commit" doesn't sound right, should be
&gt; either "a new commit", or "new commits".

Fixed (to "a new commit"), thanks.
 
&gt; Second, you should have added what I said:
&gt; 
&gt; + stage / partial or interactive commits (e.g. git add -u/-i/-p, git
&gt; diff --cached)
&gt; 
&gt; Nowhere in the survey does it as for 'git diff --cached' or anything
&gt; that acts on the stage.

I couldn't come with a good question that would ask about that, and
I didn't want to create too long survey, with too many questions.
 
&gt; So now we have your question, plus this:
&gt;  + interactive commit / per-hunk comitting / partial commit
&gt; 
&gt; But that's not good enough.

Right.
 
&gt; People might think 'git add -u/-i/-p' is not related to a commit.
&gt; Also, we still don't know if people use --cached --keep-index, or any
&gt; of those. If instead of 'git add/stage' you had 'git add/stage
&gt; -u/-i/-p' That would have been better, and no, incremental add /commit
&gt; doesn't really fit, for example, I usually do 'git add -p; git
&gt; commit', so it's not really incremental.

I explicitly asked separately about _incremental_ and _interactive_...
but not in the new question.  I'm sorry about that.  Hopefully at
least some people will include "partial / interactive" in 'other'.
 
&gt; I think we should stop beating around the bushes, and ask what we want to ask:
&gt; 
&gt;  == Do you use the stage/cache/index? ==

Perhaps "Do you use the stage/cache/index explicitly, and how?".
 
&gt; If you don't want to ask that question directly, or you think people
&gt; might not understand the question, we should be listing all the
&gt; commands that use the stage, and make sure they are handled in the
&gt; survey:
&gt; 
&gt;  X git diff --cached
&gt;  X git grep --cached
&gt;  X git rm --cached
&gt;  X git stash apply/pop --index
&gt;  X git stash (save) --[no-]keep-index
&gt;  X git add &lt;tracked_file&gt;
&gt;  X git add -p
&gt;  X git add -i
&gt;  X git add -u
&gt;  X git commit -p
&gt;  X git commit --interactive (not the same as git commit -i)

If there will be "Git User's Survey 2012", let's add this question
(replacing my "How do you include changes in new commit?").

It is a pity that Git Wiki doesn't work yet; I'd rather put this
proposal in Talk page for GitSurvey2011, or in GitSurvey2012
for next year survey proposal (if there would be one).
 
&gt; It turns out none of them are explicitly asked in the survey. In order
&gt; to do that, this is the only option I see:
&gt; 
&gt;  + interactive commits (e.g. git commit -p/--interactive)
&gt;  + stage (e.g. git add -p/-i/-u, git add &lt;tracked_file))
&gt;  + stage commands (e.g. git * --cached, git stash * --index/--[no-]keep-index)
&gt; 
&gt; Or at the very least what I suggested initially:
&gt;  + stage / partial or interactive commits (e.g. git add -u/-i/-p, git
&gt; * --cached)

P.S. Would you be interested in running the next survey?

-- 
Jakub Narebski
Poland
--
To unsubscribe from this list: send the line "unsubscribe git" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
