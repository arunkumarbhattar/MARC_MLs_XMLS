<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20151220185234</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-20 18:52:34-0400</timestampReceived><subject>using gitlab CI for nettle</subject><body>

Hi,
 gitlab now allows mirroring projects so I've setup a mirror of nettle
at gitlab main server: https://gitlab.com/gnutls/nettle

This has the advantage of using gnutls' CI servers. For that I attach
the file needed to be present to enable using these servers.

On every commit nettle will be tested for building + make check, in
the available platforms and a mail will be sent to the
author/committer.

An example run can be seen at:
https://gitlab.com/gnutls/nettle/builds?scope=finished

regards,
Nikos

["0001-Added-.gitlab-ci.yml-to-enable-CI-in-gitlab-mirror.patch" (text/x-patch)]

From 696d04dd78d199d545a6f366f26d86d0320b92e6 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt;
Date: Sun, 20 Dec 2015 20:39:14 +0200
Subject: [PATCH] Added .gitlab-ci.yml to enable CI in gitlab mirror

---
 .gitlab-ci.yml | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)
 create mode 100644 .gitlab-ci.yml

diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
new file mode 100644
index 0000000..816cf74
--- /dev/null
+++ b/.gitlab-ci.yml
@@ -0,0 +1,16 @@
+Build and Check (x86-64):
+  script:
+  - git submodule update --init &amp;&amp; autoreconf -fvi &amp;&amp; 
+    ./configure --disable-documentation &amp;&amp; make -j4 &amp;&amp; make check -j4
+  tags:
+  - x86-64
+  except:
+  - tags
+Build and Check (x86):
+  script:
+  - git submodule update --init &amp;&amp; autoreconf -fvi &amp;&amp; 
+    ./configure --disable-documentation &amp;&amp; make -j4 &amp;&amp; make check -j4
+  tags:
+  - x86
+  except:
+  - tags
-- 
2.5.0



</body></email><email><emailId>20151221092529</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-21 09:25:29-0400</timestampReceived><subject>Re: using gitlab CI for nettle</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; This has the advantage of using gnutls' CI servers. For that I attach
&gt; the file needed to be present to enable using these servers.

Sounds useful! Can you explain very briefly how that's organized, what's
done at your servers, and what's done by gitlab? We should try to avoid
"service-as-a-software-substitute"?

Is it easy to add additional configurations? On my wishlist would be
x86-64 --disable-assembler, mini-gmp configs, ARM configs, and some
big-endian config (not sure what big-endian archs still are relevant and
available, possibly mips?).

&gt; diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
&gt; new file mode 100644
&gt; index 0000000..816cf74
&gt; --- /dev/null
&gt; +++ b/.gitlab-ci.yml
&gt; @@ -0,0 +1,16 @@
&gt; +Build and Check (x86-64):

Is there any way to get a comment into this file, pointing to relevant
documentation? I guess the "tags" are used to select what each build
machine does?

&gt; +  script:
&gt; +  - git submodule update --init &amp;&amp; autoreconf -fvi &amp;&amp; 

./.bootstrap is nettle's advertised method to generate files needed
pre-configure. So I think it's better to use that than autoreconf.

Why submodule, is nettle used as a submodule of gnutls, or is it some
magic for the continuous integration system?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151221103603</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-21 10:36:03-0400</timestampReceived><subject>Re: using gitlab CI for nettle</subject><body>

On Mon, Dec 21, 2015 at 11:25 AM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; =
wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;&gt; This has the advantage of using gnutls' CI servers. For that I attach
&gt;&gt; the file needed to be present to enable using these servers.
&gt; Sounds useful! Can you explain very briefly how that's organized, what's
&gt; done at your servers, and what's done by gitlab? We should try to avoid
&gt; "service-as-a-software-substitute"?

My understanding is that you could also do the same by upgrading
gitlab in lysator. The gitlab ci setup requires to setup runner
systems which will run the assigned tasks. The runner systems run the
gitlab-ci-runner software. The gitlab server distributes the builds to
runners based on the provided tags. That feature is very new, more
info at: https://about.gitlab.com/gitlab-ci/

The runner systems I've setup are 2 Fedora 23 (x86 and x86-64) and a
centos7 (x86-64). There are provided by redhat. I had also a via x86
system with debian but it is too slow to build and I have occasionally
filesystem corruptions, so I plan to remove it.
The available runners are listed at: https://gitlab.com/gnutls/gnutls/runne=
rs

&gt; Is it easy to add additional configurations? On my wishlist would be
&gt; x86-64 --disable-assembler, mini-gmp configs,

You can add more options, but note that the more options the more load
to the runner systems (shouldn't be much of a problem since nettle
builds quite fast). You can see gnutls' file for ideas and the tags in
the systems I have setup:
https://gitlab.com/gnutls/gnutls/blob/master/.gitlab-ci.yml

If we share the builders I should try to document the available tags
better so we can replace/add builders more easy.

&gt; ARM configs, and some
&gt; big-endian config (not sure what big-endian archs still are relevant and
&gt; available, possibly mips?).

I don't have access to a non-x86 arch which can be used as a builder.
If you have we could add it to the pool.

&gt;&gt; diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
&gt;&gt; new file mode 100644
&gt;&gt; index 0000000..816cf74
&gt;&gt; --- /dev/null
&gt;&gt; +++ b/.gitlab-ci.yml
&gt;&gt; @@ -0,0 +1,16 @@
&gt;&gt; +Build and Check (x86-64):
&gt; Is there any way to get a comment into this file, pointing to relevant
&gt; documentation? I guess the "tags" are used to select what each build
&gt; machine does?

It is documented at:
http://doc.gitlab.com/ce/ci/yaml/README.html

&gt;&gt; +  script:
&gt;&gt; +  - git submodule update --init &amp;&amp; autoreconf -fvi &amp;&amp;
&gt; ./.bootstrap is nettle's advertised method to generate files needed
&gt; pre-configure. So I think it's better to use that than autoreconf.
&gt;
&gt; Why submodule, is nettle used as a submodule of gnutls, or is it some
&gt; magic for the continuous integration system?

Seems like a copy paste thing from the gnutls file. I suggest that you
setup the configurations that you like and send me to test.

I noticed that the runners I have don't have the software required to
build the documentation. For that I'll need to install that software
and introduce a new tag in the runners that have it. That I can do
after new year.

regards,
Nikos

</body></email><email><emailId>20151221123656</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-21 12:36:56-0400</timestampReceived><subject>Re: using gitlab CI for nettle</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; My understanding is that you could also do the same by upgrading
&gt; gitlab in lysator. 

Cool. I'll hear if there's any interest there.

&gt; I don't have access to a non-x86 arch which can be used as a builder.
&gt; If you have we could add it to the pool.

I can't do that at the moment, but it would be nice to have. Either
real hardware or emulated.

&gt; I noticed that the runners I have don't have the software required to
&gt; build the documentation. For that I'll need to install that software
&gt; and introduce a new tag in the runners that have it. That I can do
&gt; after new year.

I'm not quite satisfied with --disable-documentation. It would be better
with configure tests to detect automatically which output formats (if
any) are supported on the system.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150918123502</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-18 12:35:02-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Why break them at all? The issue is that if you don't bump the so
&gt; version some programs will stop working in a distribution if nettle is
&gt; upgraded. Why not make a new symbol which is kept internal, and the
&gt; old symbol remains exported and is simply a wrapper to the new symbol
&gt; that keeps compatibility?

I guess I could keep the old (now unused) functions around for backwards
compatibility. You make a pretty good argument for that.

&gt; However, it can be that there is no user of this function, or
&gt; there may be a single user of which you'll break his already shipped
&gt; program. There is no way you can tell how may programs rely on that.

At least codesearch.debian.net indicates no use of nettle's _rsa_blind.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150807084932</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-07 08:49:32-0400</timestampReceived><subject>sha3</subject><body>

It seems that as of today SHA-3 is finalized as a standard algorithm.

http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.202.pdf

</body></email><email><emailId>20150826085324</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-26 08:53:24-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Wed, Aug 26, 2015 at 10:29 AM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; =
wrote:
&gt;&gt; Attached you'll find an initial patch, but unfortunately I could find
&gt;&gt; no test vectors to verify.
&gt; Maybe implementation of hmac-sha3 could wait until there's some
&gt; specification of it including test vectors?

Yes, let's not delay sha3 being fixed because of hmac.

</body></email><email><emailId>20150705160501</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-07-05 16:05:01-0400</timestampReceived><subject>Re: SHAKE</subject><body>

Simon Josefsson &lt;simon@josefsson.org&gt; writes:

&gt; Can Nettle compute the SHAKE128/SHAKE256 variant of SHA-3?  What do you
&gt; think about adding APIs for them?

I donn't have a really well informed opinion right now, but I think it
would make sense. Not sure what which existing nettle functions one
should look at for api inspiration, the plain hashes or the pbkdf2
functions.

What's the status of SHA3 standardization? When finished, we need to go
over the current sha3 functions.

If you want to try implementing it, I hope it shouldn't be too difficult
to do it on top of sha3_permute.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150111141449</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-11 14:14:49-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt;  This patch adds a definition in nettle-meta.h with nettle's version
&gt; number. That way applications can be easily modified to support both the
&gt; 2.7 and the 3.x API. I didn't add for hogweed because it didn't seem to
&gt; make sense, the API version is fully determined by nettle only.

Sorry for the late reply. It seems reasonable to me to include the
package version in some header file. However, I'm not sure nettle-meta.h
is the right file.

I'd prefer either a separate file nettle/version.h, or some file like
nettle-typs.h included in all other nettle headers. And if we let
configure generate a header file, it makes some sense to also move the
definition of NETTLE_USE_MINI_GMP there, and move back from bignum-h-in
to bignum.h.

And I'm also not sure I like the way major and minor numbers are
combined into a single value. Can't they be kept separate, say
NETTLE_VERSION, NETTLE_MINOR_VERSION, NETTLE_PATCHLEVEL or so?
What do other packages do? E.g., gcc uses

  $ echo | cpp -dM -E - |grep GNUC
  #define __GNUC_PATCHLEVEL__ 2
  #define __GNUC__ 4
  #define __GNUC_MINOR__ 7

Maybe there should also be correspondingglobal symbols, so that version
can be checked also at runtime?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150317121630</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-17 12:16:30-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

On Sun, Jan 11, 2015 at 3:14 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt;
&gt;&gt;  This patch adds a definition in nettle-meta.h with nettle's version
&gt;&gt; number. That way applications can be easily modified to support both the
&gt;&gt; 2.7 and the 3.x API. I didn't add for hogweed because it didn't seem to
&gt;&gt; make sense, the API version is fully determined by nettle only.
&gt;
&gt; Sorry for the late reply. It seems reasonable to me to include the
&gt; package version in some header file. However, I'm not sure nettle-meta.h
&gt; is the right file.
&gt;
&gt; I'd prefer either a separate file nettle/version.h [...]
&gt; And I'm also not sure I like the way major and minor numbers are
&gt; combined into a single value. Can't they be kept separate, say
&gt; NETTLE_VERSION, NETTLE_MINOR_VERSION, NETTLE_PATCHLEVEL or so?
&gt; What do other packages do? E.g., gcc uses

I went this path, and now there is a version.h which defines,
NETTLE_VERSION (combo), NETTLE_VERSION_MAJOR and NETTLE_VERSION_MINOR.

regards,
Nikos

["0001-Added-version.h-with-library-versioning-information.patch" (text/x-diff)]

From 023b4f2e44bc3551a83666b74d0c4cf424cea946 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Tue, 17 Mar 2015 13:12:13 +0100
Subject: [PATCH] Added version.h with library versioning information

---
 Makefile.in  |  2 +-
 configure.ac |  8 +++++++-
 version.h.in | 54 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 62 insertions(+), 2 deletions(-)
 create mode 100644 version.h.in

diff --git a/Makefile.in b/Makefile.in
index abba3cd..e39fd15 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -195,7 +195,7 @@ HEADERS = aes.h arcfour.h arctwo.h asn1.h blowfish.h \
 	  md5.h md5-compat.h \
 	  memxor.h \
 	  nettle-meta.h nettle-types.h \
-	  pbkdf2.h \
+	  pbkdf2.h version.h \
 	  pgp.h pkcs1.h realloc.h ripemd160.h rsa.h \
 	  salsa20.h sexp.h \
 	  serpent.h sha.h sha1.h sha2.h sha3.h twofish.h \
diff --git a/configure.ac b/configure.ac
index 51ab3b3..d320b35 100644
--- a/configure.ac
+++ b/configure.ac
@@ -16,6 +16,12 @@ LIBNETTLE_MINOR=0
 LIBHOGWEED_MAJOR=4
 LIBHOGWEED_MINOR=0
 
+MAJOR_VERSION=`echo $PACKAGE_VERSION | sed 's/\(.*\)\..*/\1/g'`
+MINOR_VERSION=`echo $PACKAGE_VERSION | sed 's/.*\.\(.*\)/\1/g'`
+AC_SUBST([NUMBER_VERSION], `printf "0x%02x%02x" $MAJOR_VERSION $MINOR_VERSION`)
+AC_SUBST([MAJOR_VERSION])
+AC_SUBST([MINOR_VERSION])
+
 AC_CANONICAL_HOST
 
 # Command line options
@@ -895,7 +901,7 @@ if test x$GCC = xyes ; then
 # inttypes.h.
 fi
 
-AC_CONFIG_FILES([config.make config.m4 Makefile bignum.h])
+AC_CONFIG_FILES([config.make config.m4 Makefile bignum.h version.h])
 AC_CONFIG_FILES([tools/Makefile testsuite/Makefile examples/Makefile])
 AC_CONFIG_FILES([nettle.pc hogweed.pc libnettle.map libhogweed.map])
 
diff --git a/version.h.in b/version.h.in
new file mode 100644
index 0000000..406d029
--- /dev/null
+++ b/version.h.in
@@ -0,0 +1,54 @@
+/* version.h
+
+   Information about library version.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#ifndef NETTLE_VERSION_H_INCLUDED
+#define NETTLE_VERSION_H_INCLUDED
+
+#include "nettle-types.h"
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* The combined version in hex */
+#define NETTLE_VERSION @NUMBER_VERSION@
+
+/* Individual version numbers in decimal */
+#define NETTLE_VERSION_MAJOR @MAJOR_VERSION@
+#define NETTLE_VERSION_MINOR @MINOR_VERSION@
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* NETTLE_VERSION_H_INCLUDED */
-- 
2.1.0



</body></email><email><emailId>20150128203554</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-28 20:35:54-0400</timestampReceived><subject>nettle-3.1 loose ends</subject><body>

Looking at http://www.lysator.liu.se/~nisse/nettle/plan.html, the most
important things are done. I think documentation is the only item left
which is both important and requires several hours of work.

* Versioned symbols. I think this is complete, I just have forgotten to
  merge that branch.

* Base64 with other alphabets. A patch was posted to the list some month
  ago, I had some comments, and then it seems to have stalled. If it's
  desirable to break the ABI to implement it, 3.1 may be the last chance
  for some years time.

* OCB mode. Is it a good idea to try to get this into the release? I
  don't think patents are a problem, but I've mailed sflc, and it would
  be nice to get their opinion too. Needs not just the code, but also
  test cases and documentation.

* Also OFB mode has been requested, used by openpgp, iirc.

Anything else I've missed? And which of the above items are important?

There are a lot of things that could be better optimized, including the
curve25519 code and the aesni code, but I don't think the release should
be delayed for that.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150314072041</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-14 07:20:41-0400</timestampReceived><subject>memeql_sec</subject><body>

I think there's only one sensitive use of memcmp within nettle, and
that's the tag comparison in ccm_decrypt_message. I've now written a
private function memeql_sec to do that comparison in a more side-channel
silent fashion.

  static int
  memeql_sec (const void *a, const void *b, size_t n)
  {
    volatile const unsigned char *ap = (const unsigned char *) a;
    volatile const unsigned char *bp = (const unsigned char *) b;
    volatile unsigned char d;
    size_t i;
    for (d = i = 0; i &lt; n; i++)
      d |= (ap[i] ^ bp[i]);
    return d == 0;
  }

The idea is to avoid leaking (via timing or memory access patterns) the
location of the first difference. Information that a guess for a forged
MAC tag matches some characters of the correct MAC can be used to attack
the MAC key, in particular for MAC algorithms with linear structure such
as gcm and poly1305 (which is why chacha-poly1305 uses a new poly1305
key for each message, and why one shouldn't use gcm with short
authentication tags).

memeql_sec is a bit similar to http://nacl.cr.yp.to/verify.html.

Now, applications using nettle are likely doing a lot of similar
comparisons on hash and hmac digests. So it would be good to make this
function public. But then I'd need to decide on

1. A good name.

2. A suitable headerfile to declare it in. It would make some sense to
   group it together with memxor, but memxor.h isn't a good name for
   that header file.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150407193850</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-07 19:38:50-0400</timestampReceived><subject>ANNOUNCE: Nettle-3.1</subject><body>


I'm happy to announce a new version of GNU Nettle, a low-level
cryptographics library.

The Nettle home page can be found at
http://www.lysator.liu.se/~nisse/nettle/, and the manual at
http://www.lysator.liu.se/~nisse/nettle/nettle.html.

NEWS for the Nettle 3.1 release

	This release adds a couple of new features.

	The library is mostly source-level compatible with nettle-3.0.
	It is however not binary compatible, due to the introduction
	of versioned symbols, and extensions to the base64 context
	structs. The shared library names are libnettle.so.6.0 and
	libhogweed.so.4.0, with sonames libnettle.so.6 and
	libhogweed.so.4.

	Bug fixes:

	* Fixed a missing include of &lt;limits.h&gt;, which made the
	  camellia implementation fail on all 64-bit non-x86
	  platforms.

	* Eliminate out-of-bounds reads in the C implementation of
	  memxor (related to valgrind's --partial-loads-ok flag).

	Interface changes:

	* Declarations of many internal functions are moved from ecc.h
	  to ecc-internal.h. The functions are undocumented, and
	  luckily they're apparently also unused by applications, so I
	  don't expect any problems from this change.

	New features:

	* Support for curve25519 and for EdDSA25519 signatures.

	* Support for "fat builds" on x86_64 and arm, where the
	  implementation of certain functions is selected at run-time
	  depending on available cpu features. Configure with
	  --enable-fat to try this out. If it turns out to work well
	  enough, it will likely be enabled by default in later
	  releases.

	* Support for building the hogweed library (public key
	  support) using "mini-gmp", a small but slower implementation
	  of a subset of the GMP interfaces. Note that builds using
	  mini-gmp are *not* binary compatible with regular builds,
	  and more likely to leak side-channel information.

	  One intended use-case is for small embedded applications
	  which need to verify digital signatures.

	* The shared libraries are now built with versioned symbols.
	  Should reduce problems in case a program links explicitly to
	  nettle and/or hogweed, and to gnutls, and the program and
	  gnutls expect different versions.

	* Support for "URL-safe" base64 encoding and decoding, as
          specified in RFC 4648. Contributed by Amos Jeffries.

	Optimizations:

	* New x86_64 implementation of AES, using the "aesni"
	  instructions. Autodetected in fat builds. In non-fat builds,
	  it has to be enabled explicitly with --enable-x86-aesni.

	Build system:

	* Use the same object files for both static and shared
	  libraries. This eliminates the *.po object files which were
	  confusing to some tools (as well as humans). Like before,
	  PIC code is used by default; to build a non-pic static
	  library, configure with --disable-pic --disable-shared.

	Miscellaneous:

	* Made type-checking hack in CBC_ENCRYPT and similar macros
	  stricter, to generate warnings if they are used with
	  functions which have a length argument smaller than size_t.

Available at:

  https://ftp.gnu.org/gnu/nettle/nettle-3.1.tar.gz
  ftp://ftp.gnu.org/gnu/nettle/nettle-3.1.tar.gz
  http://www.lysator.liu.se/~nisse/archive/nettle-3.1.tar.gz
  ftp://ftp.lysator.liu.se/pub/security/lsh/nettle-3.1.tar.gz (soon)

Happy hacking,
/Niels Möller

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

[Attachment #3 (application/pgp-signature)]

</body></email><email><emailId>20150502084752</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-05-02 08:47:52-0400</timestampReceived><subject>nettle-3.1 transition and symbol versions</subject><body>

Now we see some transition problems,
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=784009, and it's going
to also hit other distributions than debian.

Would it make sense to issue a nettle-2.7.2, which is nettle-2.7.1 +
symbol versions? There's at least one bugfix which could be backported
if we do another 2.7.x:

2014-06-30  Niels Möller  &lt;nisse@lysator.liu.se&gt;

	* camellia-absorb.c: Include &lt;limits.h&gt;, needed for correct use of
	HAVE_NATIVE_64_BIT. Reported and debugged by Magnus Holmgren.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150603113304</emailId><senderName>TomÃ¡Å¡ ChvÃ¡tal</senderName><senderEmail>tchvatal@suse.com</senderEmail><timestampReceived>2015-06-03 11:33:04-0400</timestampReceived><subject>Two issues found by Address sanitizer</subject><body>

[Attachment #2 (multipart/mixed)]


--nextPart6577510.2lhF4xedtb
Content-Transfer-Encoding: 7Bit
Content-Type: text/plain; charset="us-ascii"

Hello everybody,

we at suse ran address sanitizer against libnettle and found two bugs [1][2].

The first one is easy to fix (simple off by one) and thus we already have the
patch (see attachment 0001-...).

The second one is about memory leaks, and it would be better if someone more
aware of the source took a look wether and how to fix it.

Cheers

Tom

[1] https://bugzilla.suse.com/show_bug.cgi?id’8328
[2] https://bugzilla.suse.com/show_bug.cgi?id’9109

PS: I am not subscribed so keep me in CC please.
--nextPart6577510.2lhF4xedtb
Content-Disposition: attachment; filename="0001-Fix-off-by-one-in-des-compat-test.patch"
Content-Transfer-Encoding: quoted-printable
Content-Type: text/x-patch; charset="utf-8"; name="0001-Fix-off-by-one-in-des-compat-test.patch"

From 0d90cc412d43f4a50fb572e55a73f3f47e880309 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tom=C3=A1=C5=A1=20Chv=C3=A1tal?= &lt;tchvatal@suse.com&gt;
Date: Wed, 3 Jun 2015 13:04:39 +0200
Subject: [PATCH] Fix off-by-one in des-compat test
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: TomÃ¡Å¡ ChvÃ¡tal &lt;tchvatal@suse.com&gt;
---
 testsuite/des-compat-test.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/testsuite/des-compat-test.c b/testsuite/des-compat-test.c
index 9e31f1c..3bc04de 100644
--- a/testsuite/des-compat-test.c
+++ b/testsuite/des-compat-test.c
@@ -346,7 +346,7 @@ test_main(void)
 
 #ifndef LIBDES_LIT
 	if (verbose) printf("Doing ede ecb\n");
-	for (i=0; i&lt;(NUM_TESTS-1); i++)
+	for (i=0; i&lt;(NUM_TESTS-2); i++)
 		{
 		if ((j=des_key_sched(&amp;key_data[i], ks)) != 0)
 			{
-- 
2.4.1

--nextPart6577510.2lhF4xedtb--
This is a multi-part message in MIME format.


Hello everybody,

we at suse ran address sanitizer against libnettle and found two bugs [1][2].

The first one is easy to fix (simple off by one) and thus we already have the 
patch (see attachment 0001-...).

The second one is about memory leaks, and it would be better if someone more 
aware of the source took a look wether and how to fix it.

Cheers

Tom

[1] https://bugzilla.suse.com/show_bug.cgi?id=928328
[2] https://bugzilla.suse.com/show_bug.cgi?id=929109

PS: I am not subscribed so keep me in CC please.
["0001-Fix-off-by-one-in-des-compat-test.patch" (0001-Fix-off-by-one-in-des-compat-test.patch)]

&gt;From 0d90cc412d43f4a50fb572e55a73f3f47e880309 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tom=C3=A1=C5=A1=20Chv=C3=A1tal?= &lt;tchvatal@suse.com&gt;
Date: Wed, 3 Jun 2015 13:04:39 +0200
Subject: [PATCH] Fix off-by-one in des-compat test
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: TomÃ¡Å¡ ChvÃ¡tal &lt;tchvatal@suse.com&gt;
---
 testsuite/des-compat-test.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/testsuite/des-compat-test.c b/testsuite/des-compat-test.c
index 9e31f1c..3bc04de 100644
--- a/testsuite/des-compat-test.c
+++ b/testsuite/des-compat-test.c
@@ -346,7 +346,7 @@ test_main(void)
 
 #ifndef LIBDES_LIT
 	if (verbose) printf("Doing ede ecb\n");
-	for (i=0; i&lt;(NUM_TESTS-1); i++)
+	for (i=0; i&lt;(NUM_TESTS-2); i++)
 		{
 		if ((j=des_key_sched(&amp;key_data[i], ks)) != 0)
 			{
-- 
2.4.1

["signature.asc" (application/pgp-signature)]

</body></email><email><emailId>20150701204631</emailId><senderName>Simon Josefsson</senderName><senderEmail>simon@josefsson.org</senderEmail><timestampReceived>2015-07-01 20:46:31-0400</timestampReceived><subject>SHAKE</subject><body>


Can Nettle compute the SHAKE128/SHAKE256 variant of SHA-3?  What do you
think about adding APIs for them?

/Simon

["signature.asc" (application/pgp-signature)]

</body></email><email><emailId>20150314083333</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-14 08:33:33-0400</timestampReceived><subject>Re: memeql_sec</subject><body>

On Sat, 2015-03-14 at 08:20 +0100, Niels Möller wrote:

&gt; Now, applications using nettle are likely doing a lot of similar
&gt; comparisons on hash and hmac digests.

They are :) so it would be nice to export them.

&gt;  So it would be good to make this
&gt; function public. But then I'd need to decide on
&gt; 1. A good name.

nettle_memcmp?

&gt; 2. A suitable headerfile to declare it in. It would make some sense to
&gt;    group it together with memxor, but memxor.h isn't a good name for
&gt;    that header file.

nettle/mem.h, which will include memxor, memcmp, and memset?

regards,
Nikos



</body></email><email><emailId>20150314111625</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-03-14 11:16:25-0400</timestampReceived><subject>Re: memeql_sec</subject><body>

On 14/03/2015 8:20 p.m., Niels Möller wrote:
&gt; I think there's only one sensitive use of memcmp within nettle, and
&gt; that's the tag comparison in ccm_decrypt_message. I've now written a
&gt; private function memeql_sec to do that comparison in a more side-channel
&gt; silent fashion.
&gt; 
&gt;   static int
&gt;   memeql_sec (const void *a, const void *b, size_t n)
&gt;   {
&gt;     volatile const unsigned char *ap = (const unsigned char *) a;
&gt;     volatile const unsigned char *bp = (const unsigned char *) b;
&gt;     volatile unsigned char d;
&gt;     size_t i;
&gt;     for (d = i = 0; i &lt; n; i++)
&gt;       d |= (ap[i] ^ bp[i]);
&gt;     return d == 0;
&gt;   }


Is the compiler optimized code for that for loop faster or slower than a
loop suming the differentials?

  {
    volatile const unsigned char *ap = (const unsigned char *) a + n;
    volatile const unsigned char *bp = (const unsigned char *) b + n;
    volatile unsigned char d;
    for (d = 0; ap &gt;= a; ap--, bp--)
      d += (*ap - *bp);
    return d == 0;
  }


Or does the subtract and add still leak timing from CPU internal
optimizations the bitmasking avoids?

NP: That would allow this function to take the uint8_t that most of
nettle operates with.

(Sorry if thats a dumb Q, its been a long time since I worked on
anything like this.)

AYJ


</body></email><email><emailId>20150812141839</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-12 14:18:39-0400</timestampReceived><subject>[PATCH] sha3 update</subject><body>

The attached two patches update SHA3 to the final published version.

["0002-testsuite-updated-SHA3-tests-to-the-FIPS202-final-ve.patch" (text/x-patch)]

From a8c3aa539411456bc9958a71590eda1b8ea002af Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Wed, 12 Aug 2015 16:17:31 +0200
Subject: [PATCH 2/2] testsuite: updated SHA3 tests to the FIPS202 final
 version

---
 testsuite/sha3-224-test.c | 2022 ++++++++++++++++++++++++++++-----------------
 testsuite/sha3-256-test.c | 2022 ++++++++++++++++++++++++++++-----------------
 testsuite/sha3-384-test.c | 2022 ++++++++++++++++++++++++++++-----------------
 testsuite/sha3-512-test.c | 2022 ++++++++++++++++++++++++++++-----------------
 4 files changed, 5012 insertions(+), 3076 deletions(-)

diff --git a/testsuite/sha3-224-test.c b/testsuite/sha3-224-test.c
index 27922bf..45e8e2e 100644
--- a/testsuite/sha3-224-test.c
+++ b/testsuite/sha3-224-test.c
@@ -1,775 +1,1259 @@
 #include "testutils.h"
 
 void
-test_main(void)
+test_main (void)
 {
   /* Extracted from ShortMsgKAT_224.txt using sha3.awk. */
-  test_hash(&amp;nettle_sha3_224, /* 0 octets */
-	    SHEX(""),
-	    SHEX("F71837502BA8E10837BDD8D365ADB85591895602FC552B48B7390ABD"));
-  test_hash(&amp;nettle_sha3_224, /* 1 octets */
-	    SHEX("CC"),
-	    SHEX("A9CAB59EB40A10B246290F2D6086E32E3689FAF1D26B470C899F2802"));
-  test_hash(&amp;nettle_sha3_224, /* 2 octets */
-	    SHEX("41FB"),
-	    SHEX("615BA367AFDC35AAC397BC7EB5D58D106A734B24986D5D978FEFD62C"));
-  test_hash(&amp;nettle_sha3_224, /* 3 octets */
-	    SHEX("1F877C"),
-	    SHEX("6F9D2898EFD096BAAAAAB2E97482DDB6389B8E6CAA964B7A0E347E13"));
-  test_hash(&amp;nettle_sha3_224, /* 4 octets */
-	    SHEX("C1ECFDFC"),
-	    SHEX("E405869DA1464A705700A3CBCE131AABEEBA9C8D2FE6576B21BCBE16"));
-  test_hash(&amp;nettle_sha3_224, /* 5 octets */
-	    SHEX("21F134AC57"),
-	    SHEX("5573DA2B02216A860389A581F6E9FB8D805E9E02F6FA911701EEE298"));
-  test_hash(&amp;nettle_sha3_224, /* 6 octets */
-	    SHEX("C6F50BB74E29"),
-	    SHEX("163C9060163AA66B8B7C0CFAA65D934BFF219BCBC267187CABA0042F"));
-  test_hash(&amp;nettle_sha3_224, /* 7 octets */
-	    SHEX("119713CC83EEEF"),
-	    SHEX("CFC04C6F8463DDAB24CDF8B8652BD11DF23DD1B95F118328DD01580E"));
-  test_hash(&amp;nettle_sha3_224, /* 8 octets */
-	    SHEX("4A4F202484512526"),
-	    SHEX("7A5C2CB3F999DD00EFF7399963314CA647DD0E5AE1BDDEC611F8338D"));
-  test_hash(&amp;nettle_sha3_224, /* 9 octets */
-	    SHEX("1F66AB4185ED9B6375"),
-	    SHEX("A5A75806083AA9307074EF8FBD7DF592985E5F714611E812216C0449"));
-  test_hash(&amp;nettle_sha3_224, /* 10 octets */
-	    SHEX("EED7422227613B6F53C9"),
-	    SHEX("AC78FC53A1DB90A634F1AAAF90119C889C8C24B59B98B7366029CC73"));
-  test_hash(&amp;nettle_sha3_224, /* 11 octets */
-	    SHEX("EAEED5CDFFD89DECE455F1"),
-	    SHEX("672CA6826686BEDB258532830D606B258C6DE60154EC0957CD8B858B"));
-  test_hash(&amp;nettle_sha3_224, /* 12 octets */
-	    SHEX("5BE43C90F22902E4FE8ED2D3"),
-	    SHEX("D98CA07E172B0BC53D679D2F8D002C63FD24A6307F2B7E1EEEF28BE0"));
-  test_hash(&amp;nettle_sha3_224, /* 13 octets */
-	    SHEX("A746273228122F381C3B46E4F1"),
-	    SHEX("F122BE39C91A6C17CD5900F531E680D54CEDEFD4F0E3D113D26543D4"));
-  test_hash(&amp;nettle_sha3_224, /* 14 octets */
-	    SHEX("3C5871CD619C69A63B540EB5A625"),
-	    SHEX("2A26D2AD2015C67CABB7895EC5FA25473D4D1433FAE92B9B2CDA31F0"));
-  test_hash(&amp;nettle_sha3_224, /* 15 octets */
-	    SHEX("FA22874BCC068879E8EF11A69F0722"),
-	    SHEX("A69E4EC1648CBBD595558EE4EA345E4196C2881E85E853739B1F4604"));
-  test_hash(&amp;nettle_sha3_224, /* 16 octets */
-	    SHEX("52A608AB21CCDD8A4457A57EDE782176"),
-	    SHEX("5679CD509C5120AF54795CF477149641CF27B2EBB6A5F90340704E57"));
-  test_hash(&amp;nettle_sha3_224, /* 17 octets */
-	    SHEX("82E192E4043DDCD12ECF52969D0F807EED"),
-	    SHEX("455584A1A3BBFBB977AE08DDEE93DA5ACAE0F2F4C3CDAAF089728AAE"));
-  test_hash(&amp;nettle_sha3_224, /* 18 octets */
-	    SHEX("75683DCB556140C522543BB6E9098B21A21E"),
-	    SHEX("BB779E7267CAF0E891547EE3E3BABF17837671CF731ED56334F61CC3"));
-  test_hash(&amp;nettle_sha3_224, /* 19 octets */
-	    SHEX("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
-	    SHEX("E7B181DAEC132D3B6C9DFBF61841135B87FB995BE20957B8CD095E2B"));
-  test_hash(&amp;nettle_sha3_224, /* 20 octets */
-	    SHEX("E26193989D06568FE688E75540AEA06747D9F851"),
-	    SHEX("44729646A05AD0503A876B448F88F177A0A263AB746CA6E30676ADB2"));
-  test_hash(&amp;nettle_sha3_224, /* 21 octets */
-	    SHEX("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
-	    SHEX("05E15793E417DD4E02CD6C5636D42C1638C164D70B79F717F25D1A15"));
-  test_hash(&amp;nettle_sha3_224, /* 22 octets */
-	    SHEX("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
-	    SHEX("2C4077A8858966EF79AAC3EC6D82855EAD22867BA45D617A68CB926E"));
-  test_hash(&amp;nettle_sha3_224, /* 23 octets */
-	    SHEX("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
-	    SHEX("2E897B479FBCBF42D2139F6768DF147A3B85C36A5B3F3C066EB0565E"));
-  test_hash(&amp;nettle_sha3_224, /* 24 octets */
-	    SHEX("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
-	    SHEX("BA76FFEFD006B81EF5991E697D0425621B16818EA27C11056E00904E"));
-  test_hash(&amp;nettle_sha3_224, /* 25 octets */
-	    SHEX("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
-	    SHEX("1C1E758D87399A36BF7C8A2E6A55CE6A4F0C498737956959959FD2AC"));
-  test_hash(&amp;nettle_sha3_224, /* 26 octets */
-	    SHEX("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
-	    SHEX("DDEA76409C61F6D1873F01A34251C74C37B34F28F7F482A84395B5F3"));
-  test_hash(&amp;nettle_sha3_224, /* 27 octets */
-	    SHEX("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
-	    SHEX("777C523CF42D0006ED1F88F1BD0C3A5EF21814723794B8461A375C3A"));
-  test_hash(&amp;nettle_sha3_224, /* 28 octets */
-	    SHEX("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
-	    SHEX("8D7474ED6DEA4626AD3C1D06D2AD5B198CAAD07B12077C680CF6D89B"));
-  test_hash(&amp;nettle_sha3_224, /* 29 octets */
-	    SHEX("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
-	    SHEX("F525D4515D3CA54A2FAB9C679E93561FE151EA0960751352CD7F591A"));
-  test_hash(&amp;nettle_sha3_224, /* 30 octets */
-	    SHEX("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
-	    SHEX("9A8455F41F693B91B3DE46BF66FF09D42DC300B856B1DC2DFD12555C"));
-  test_hash(&amp;nettle_sha3_224, /* 31 octets */
-	    SHEX("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
-	    SHEX("81AF3A7A5BD4C1F948D6AF4B96F93C3B0CF9C0E7A6DA6FCD71EEC7F6"));
-  test_hash(&amp;nettle_sha3_224, /* 32 octets */
-	    SHEX("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
-	    SHEX("A27A051A36A1501974AD8E9873E9DF231AA9AD90EC1D7A8BBF8F639A"));
-  test_hash(&amp;nettle_sha3_224, /* 33 octets */
-	    SHEX("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
-	    SHEX("F217812E362EC64D4DC5EACFABC165184BFA456E5C32C2C7900253D0"));
-  test_hash(&amp;nettle_sha3_224, /* 34 octets */
-	    SHEX("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
-	    SHEX("5CA92B5F5830E1E5F8DF4391339DF7DF1F23BB31AA05437C103F1652"));
-  test_hash(&amp;nettle_sha3_224, /* 35 octets */
-	    SHEX("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
-	    SHEX("9F01F07D930F40A26407760104EFD10D4436295F6B8C41FE2A4E09EA"));
-  test_hash(&amp;nettle_sha3_224, /* 36 octets */
-	    SHEX("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
                
-	    SHEX("22A3FED1F4E298C37A1D7BA0C80E994B11D95F290F3945A3CEB2E2E6"));
-  test_hash(&amp;nettle_sha3_224, /* 37 octets */
-	    SHEX("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
                
-	    SHEX("35F1AB1263211F738D3F97D0E4840C387E09369F23BF9239150D0306"));
-  test_hash(&amp;nettle_sha3_224, /* 38 octets */
-	    SHEX("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
                
-	    SHEX("34CC708B874D40478E82324BF3AA32FE9F85AFF8C60B4BADF97003E3"));
-  test_hash(&amp;nettle_sha3_224, /* 39 octets */
-	    SHEX("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
                
-	    SHEX("5F339B2F87E7F695B236267C819BA1705D97644AD72E0871C7E3A913"));
-  test_hash(&amp;nettle_sha3_224, /* 40 octets */
-	    SHEX("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
                
-	    SHEX("8E20D5C83CDA8226B58CEFD74C293CA7579CBB3949CA9EB2F61565B8"));
-  test_hash(&amp;nettle_sha3_224, /* 41 octets */
-	    SHEX("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
                
-	    SHEX("606255348812CFB5082F4D4BB6BBC2FEEF044E381FEB0E346061AA4F"));
-  test_hash(&amp;nettle_sha3_224, /* 42 octets */
-	    SHEX("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
                
-	    SHEX("C885274CC3BF110995FEF1154A86772F28B41E745E86E935B4E3A03F"));
-  test_hash(&amp;nettle_sha3_224, /* 43 octets */
-	    SHEX("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
                
-	    SHEX("EFA7F7E7BFFA6A5E7F7D1C24E7A0A9DC9A6F72B3E9550A0AAA06CCE6"));
-  test_hash(&amp;nettle_sha3_224, /* 44 octets */
-	    SHEX("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
                
-	    SHEX("ACA7DCCC6B809D511F4C248CAA5D1374E734C1ED6B995760CC3C56D2"));
-  test_hash(&amp;nettle_sha3_224, /* 45 octets */
-	    SHEX("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
                
-	    SHEX("6F1EF55CCC6EF9B68DE54C14448487901022452AB761F84644E9A127"));
-  test_hash(&amp;nettle_sha3_224, /* 46 octets */
-	    SHEX("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
                
-	    SHEX("B297F61FF06021BFE1B9D350B3F54D810BC16ADE17001BAE1B4CD4A2"));
-  test_hash(&amp;nettle_sha3_224, /* 47 octets */
-	    SHEX("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
                
-	    SHEX("BE9A75436C3988FB2FE21D0C10EAD9B9C807DE2E13A9BD8437F13332"));
-  test_hash(&amp;nettle_sha3_224, /* 48 octets */
-	    SHEX("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
                
-	    SHEX("4304582C3892942B1960822C965788B22DE19F1C6D5E204476ADFD26"));
-  test_hash(&amp;nettle_sha3_224, /* 49 octets */
-	    SHEX("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
                
-	    SHEX("0480EF8519C32F89C65B8DD450025EC49CBDADA6C4CFCFC6FB4F1C61"));
-  test_hash(&amp;nettle_sha3_224, /* 50 octets */
-	    SHEX("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
                
-	    SHEX("0BDE9CD50D70F00EED97CCE40C3DF22BB4904C08C4177C3A95985D97"));
-  test_hash(&amp;nettle_sha3_224, /* 51 octets */
-	    SHEX("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
                
-	    SHEX("3BF3ADDB761AB32A38B7B47047AD45B68EDFD88ED475227447EA1B1E"));
-  test_hash(&amp;nettle_sha3_224, /* 52 octets */
-	    SHEX("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
                
-	    SHEX("6182614C8257EB05E9AC0950E15E6044872E5C0AB2AF4540764CA0C8"));
-  test_hash(&amp;nettle_sha3_224, /* 53 octets */
-	    SHEX("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
                
-	    SHEX("0B5DC722EEA2C348325FD9B3D7F08F365B71D5B582C27BEB79B51D5D"));
-  test_hash(&amp;nettle_sha3_224, /* 54 octets */
-	    SHEX("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
                
-	    SHEX("29C2B817C75B6417BC89C262AF9D58F0C18FBD991F59F4181F237038"));
-  test_hash(&amp;nettle_sha3_224, /* 55 octets */
-	    SHEX("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
                
-	    SHEX("62C5876694D88007709B50900EE2E6CA9505CC90067EFBF4C1D95B0B"));
-  test_hash(&amp;nettle_sha3_224, /* 56 octets */
-	    SHEX("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
                
-	    SHEX("D362BE7896B2AC3CA4DC3161B7F6C5B3FBE65F32D040402B8D306B15"));
-  test_hash(&amp;nettle_sha3_224, /* 57 octets */
-	    SHEX("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
                
-	    SHEX("D420C7BDF8D86D7B1CBD1AF7868EBC4FF17245595B94959A0714333C"));
-  test_hash(&amp;nettle_sha3_224, /* 58 octets */
-	    SHEX("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
                
-	    SHEX("2E04DAE6E3FDF2A47FF40E6F3E61B371F3E51A5864A31CC11D127620"));
-  test_hash(&amp;nettle_sha3_224, /* 59 octets */
-	    SHEX("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
                
-	    SHEX("22817A21CFCEC4FD2348B6BE8A7042A37754D76A3F33A8F818312CC7"));
-  test_hash(&amp;nettle_sha3_224, /* 60 octets */
-	    SHEX("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
                
-	    SHEX("68CAF2203317A8BED30C1792E888910124F2F0EE1D24D47274BCC856"));
-  test_hash(&amp;nettle_sha3_224, /* 61 octets */
-	    SHEX("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
                
-	    SHEX("7BBAC0C0F192D2C479348358D2247E4C08966A512F73D40445B52EC7"));
-  test_hash(&amp;nettle_sha3_224, /* 62 octets */
-	    SHEX("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
                
-	    SHEX("D226D9E1F36EC4222693699B6D0383C1452E391C41EFD7645289F8E3"));
-  test_hash(&amp;nettle_sha3_224, /* 63 octets */
-	    SHEX("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
                
-	    SHEX("294A1E5A0629A2736F188691A35FE1ABB55472785DAFF6CD88C6D537"));
-  test_hash(&amp;nettle_sha3_224, /* 64 octets */
-	    SHEX("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
                
-	    SHEX("C533DCF88CD1A5DFF22B914D3875BD57FC17B2E1F474AE360C3877D2"));
-  test_hash(&amp;nettle_sha3_224, /* 65 octets */
-	    SHEX("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
                
-	    SHEX("C9B7AD7A32B70DFB5A8A2FF9D98B300E484B996ED752A732D84DB6F7"));
-  test_hash(&amp;nettle_sha3_224, /* 66 octets */
-	    SHEX("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
                
-	    SHEX("CF646D5E5C81818C97A01F393F8033CE3CB7CCD07FDAC9988766BD1C"));
-  test_hash(&amp;nettle_sha3_224, /* 67 octets */
-	    SHEX("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
                
-	    SHEX("D411E8A7CF50AAF91076A8CC5F01BF5B6BB2CCAE8046BF47871891FD"));
-  test_hash(&amp;nettle_sha3_224, /* 68 octets */
-	    SHEX("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
                
-	    SHEX("E094C0303D1841C6E4C0864857CF36CFC980E3CB4D78F18E301117C4"));
-  test_hash(&amp;nettle_sha3_224, /* 69 octets */
-	    SHEX("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
                
-	    SHEX("51948E1772C2C2EE49158D02A975B27477BD041262954C3E60F5ACC2"));
-  test_hash(&amp;nettle_sha3_224, /* 70 octets */
-	    SHEX("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
                
-	    SHEX("8214A2B0E8BB60CD3E4DFB0D0855D0F6C4BA6D2728D0687BDF75F79E"));
-  test_hash(&amp;nettle_sha3_224, /* 71 octets */
-	    SHEX("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
                
-	    SHEX("8A2AE6B9AA7B1E08F8C7DC3BF5AE876660D30F79391714A175381091"));
-  test_hash(&amp;nettle_sha3_224, /* 72 octets */
-	    SHEX("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
                
-	    SHEX("702B1906A63D0F924AFEC3BB5E5C5742E85F9834EA6F5306644811A1"));
-  test_hash(&amp;nettle_sha3_224, /* 73 octets */
-	    SHEX("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
                
-	    SHEX("BF2101511220B7DFE54B127C2476EAADFD4EAB7FD0F6BDD193078AC8"));
-  test_hash(&amp;nettle_sha3_224, /* 74 octets */
-	    SHEX("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
                
-	    SHEX("B07ADBED912723A07FA5353F665EC14FF82D85E90BE3E5A1F5C90FFF"));
-  test_hash(&amp;nettle_sha3_224, /* 75 octets */
-	    SHEX("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
                
-	    SHEX("D1718F0D387AC427111A7E90E575DE5F04778EA2BA147A8451914FF0"));
-  test_hash(&amp;nettle_sha3_224, /* 76 octets */
-	    SHEX("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC \
                582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
                
-	    SHEX("FAF7D793024E6D05E77C5231712478822C915292FCC1427E6ACFD3CF"));
-  test_hash(&amp;nettle_sha3_224, /* 77 octets */
-	    SHEX("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BA \
                FC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
                
-	    SHEX("A375D756A8F39C72F67CA489C95F99350FFD0515B151A3BFF288CAAA"));
-  test_hash(&amp;nettle_sha3_224, /* 78 octets */
-	    SHEX("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4 \
                FCF4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"),
                
-	    SHEX("1BD1B6F3144A3DEE93DEA1DF03C0E958F485B8AE164DCEE55F973413"));
-  test_hash(&amp;nettle_sha3_224, /* 79 octets */
-	    SHEX("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C58843554806 \
6EA2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"),
                
-	    SHEX("BE88B495D0CD90281AF2094B8D7E72EB417288CA16F751C09694B682"));
-  test_hash(&amp;nettle_sha3_224, /* 80 octets */
-	    SHEX("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F03 \
7AA58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
                
-	    SHEX("7DAC046254808464024617D63A038267FE2CA65052BDEB569A0A9C15"));
-  test_hash(&amp;nettle_sha3_224, /* 81 octets */
-	    SHEX("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D \
06DA83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
                
-	    SHEX("89F6B320EFABE42CE13C9E20E4829F31A7848EEE3FC854E603FBD46F"));
-  test_hash(&amp;nettle_sha3_224, /* 82 octets */
-	    SHEX("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F27 \
9E0733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
                
-	    SHEX("A805DBD3B8DF5E03E05EFFFDE1B94B35A23C5D77C2797D984E56656F"));
-  test_hash(&amp;nettle_sha3_224, /* 83 octets */
-	    SHEX("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A \
0D1FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
                
-	    SHEX("F05742CC1DB422A3113AC49602E8D0DD6CB472E7ED26BCE40BBA09BD"));
-  test_hash(&amp;nettle_sha3_224, /* 84 octets */
-	    SHEX("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541 \
27482BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
                
-	    SHEX("45945F867B7E1E75EE496E0FC4AAFF71A0CC539841D153439AED4DFC"));
-  test_hash(&amp;nettle_sha3_224, /* 85 octets */
-	    SHEX("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F \
4B01F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
                
-	    SHEX("5A8AC7533E1354068B564CCD214EB2A2E097DD60E08BD69FC782B0AF"));
-  test_hash(&amp;nettle_sha3_224, /* 86 octets */
-	    SHEX("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C76 \
19A6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
                
-	    SHEX("059F7EB983362FD44E94E2BFD59CCED43CAE959C9A483EBD5E6E2036"));
-  test_hash(&amp;nettle_sha3_224, /* 87 octets */
-	    SHEX("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7 \
FC5C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
                
-	    SHEX("22D62AD272FEFC89F73256EAACE00C7B8E998FB322C8EB67DC1EAC6A"));
-  test_hash(&amp;nettle_sha3_224, /* 88 octets */
-	    SHEX("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E \
4CEFB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
                
-	    SHEX("A396EA905EB612554BD00E4FC1BB4C5247D73FDE4BBAF5380ED42DD0"));
-  test_hash(&amp;nettle_sha3_224, /* 89 octets */
-	    SHEX("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD59 \
1DF1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
                
-	    SHEX("D8B5B24B9E92326FDE5DB1058EEDBEEDB0B65982925734B6E2844036"));
-  test_hash(&amp;nettle_sha3_224, /* 90 octets */
-	    SHEX("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85D \
C95286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
                
-	    SHEX("FDB9015B20DB446F79575E6B8C73A98EAC731CFE2E59BD46DBDA0E35"));
-  test_hash(&amp;nettle_sha3_224, /* 91 octets */
-	    SHEX("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96 \
813544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
                
-	    SHEX("DF1B47E73E8CBD2CA852CF58AD68B5F8BAA1169C0795961041E8A918"));
-  test_hash(&amp;nettle_sha3_224, /* 92 octets */
-	    SHEX("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD5 \
5E634AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
                
-	    SHEX("1E8A90918D6EAD31E446D4EE2673871ECC5C7DA9B18ED511E1632E0D"));
-  test_hash(&amp;nettle_sha3_224, /* 93 octets */
-	    SHEX("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE4060323 \
0ECA6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
                
-	    SHEX("1060AFD1E1B9F7F41291A4861774B3B0C95A812788A41D7EBEF4A893"));
-  test_hash(&amp;nettle_sha3_224, /* 94 octets */
-	    SHEX("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CD \
C585FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
                
-	    SHEX("EA91EDC393491B4CBC035B8538DF08E3C6B8CAD18338053C81FE2E08"));
-  test_hash(&amp;nettle_sha3_224, /* 95 octets */
-	    SHEX("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409 \
2261AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
                
-	    SHEX("DF1AF149E5C92CB29174C1EDB6ED891EBCE4366010DC7CBFC9B1D757"));
-  test_hash(&amp;nettle_sha3_224, /* 96 octets */
-	    SHEX("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE \
49D0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
                
-	    SHEX("5F698408BFF0246B05BAD96CB342B2FD2F11B6804EF2FA07A81B0920"));
-  test_hash(&amp;nettle_sha3_224, /* 97 octets */
-	    SHEX("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A \
6E6D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
                
-	    SHEX("EBE6D61E8A946E0D45D3889F9E360ACD3A1A7D6C4B1307448E6E7357"));
-  test_hash(&amp;nettle_sha3_224, /* 98 octets */
-	    SHEX("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28 \
EE11495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
                
-	    SHEX("1B7F6BCB2271AC9C3B558E95F85285EE756B03B767A01AC57D7C6E94"));
-  test_hash(&amp;nettle_sha3_224, /* 99 octets */
-	    SHEX("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B \
32A0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
                
-	    SHEX("436D1BCD6B3DE2677A72B93E2CEDB60C84A4FE125A802E2997EB2E67"));
-  test_hash(&amp;nettle_sha3_224, /* 100 octets */
-	    SHEX("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC2 \
1C8807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
                
-	    SHEX("62B10F1B6236EBC2DA72957742A8D4E48E213B5F8934604BFD4D2C3A"));
-  test_hash(&amp;nettle_sha3_224, /* 101 octets */
-	    SHEX("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666 \
C0A72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
                
-	    SHEX("1186BEA0880D0A96F6A56BBB431F4D264838BB0180DCF66EF0B599CA"));
-  test_hash(&amp;nettle_sha3_224, /* 102 octets */
-	    SHEX("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE6 \
2F39A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
                
-	    SHEX("383D2F41ECFDA5994E815432999D192E1A282FF5663196A4A268A67D"));
-  test_hash(&amp;nettle_sha3_224, /* 103 octets */
-	    SHEX("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041 \
308598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
                
-	    SHEX("E2594A633B2DC671FD0DDFD3BF7238332C425520827C524FB0E19778"));
-  test_hash(&amp;nettle_sha3_224, /* 104 octets */
-	    SHEX("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189 \
D549A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
                
-	    SHEX("234764AAE8C39B1571D7741BB176FF86246070EC9AC97A1B2EB35472"));
-  test_hash(&amp;nettle_sha3_224, /* 105 octets */
-	    SHEX("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB \
243F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
                
-	    SHEX("A634D7EBAA2BC0043EB5E237690E38FF1E05EE5A042882A233A2D92A"));
-  test_hash(&amp;nettle_sha3_224, /* 106 octets */
-	    SHEX("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A \
2130DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
                
-	    SHEX("EF03FBB1EF3296EECFB98909E416D113B5741E44962EC57993C6DA5D"));
-  test_hash(&amp;nettle_sha3_224, /* 107 octets */
-	    SHEX("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C8 \
1BDCE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
                
-	    SHEX("210D245CC8B5A7B4C1B118A9890ECDDC34A66EA92805B7A7C19A944A"));
-  test_hash(&amp;nettle_sha3_224, /* 108 octets */
-	    SHEX("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457 \
BD25F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
                
-	    SHEX("517BAE010715A020435CFDB531B856C5704E0EC611360F60D5B76161"));
-  test_hash(&amp;nettle_sha3_224, /* 109 octets */
-	    SHEX("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2 \
A09002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
                
-	    SHEX("79D478B4BC5E6FC2D406BB1C3834A5CE397A88E80135F55D8FE32C5E"));
-  test_hash(&amp;nettle_sha3_224, /* 110 octets */
-	    SHEX("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C \
2C40F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
                
-	    SHEX("F7BA7A56AFC1C58E62841C3B98F5677199F24B534B0D52D9A5C95495"));
-  test_hash(&amp;nettle_sha3_224, /* 111 octets */
-	    SHEX("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E75 \
54BD002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
                
-	    SHEX("78A90B769E9A326C93D5A6A6105AEE031DCEB2C8D222B36E02F27DB6"));
-  test_hash(&amp;nettle_sha3_224, /* 112 octets */
-	    SHEX("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C98 \
5AC56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
                
-	    SHEX("3D9D5C2FD2F60F4BB89E11FD3BC2FBD65602EB3F3F38D6FA03BDCE2C"));
-  test_hash(&amp;nettle_sha3_224, /* 113 octets */
-	    SHEX("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972 \
AEDD3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
                
-	    SHEX("E1FABE16152560387FADAD3324CBB94D8AF968786C3C994C8F926D32"));
-  test_hash(&amp;nettle_sha3_224, /* 114 octets */
-	    SHEX("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40 \
198B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
                
-	    SHEX("CEF84F1966215B1511F5E0DB564D6827898184FBCB88BE0213FC563F"));
-  test_hash(&amp;nettle_sha3_224, /* 115 octets */
-	    SHEX("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD7 \
3D017CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
                
-	    SHEX("8E4B5A2B79FC1E7D0526AACB5B9AC01A569635644C9249DFFEE3B927"));
-  test_hash(&amp;nettle_sha3_224, /* 116 octets */
-	    SHEX("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14 \
A529B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
                
-	    SHEX("BAFF55CDAD66AA77AD677E13A138B2F17286B504EA6B94EFFD9D9A95"));
-  test_hash(&amp;nettle_sha3_224, /* 117 octets */
-	    SHEX("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED15 \
43E5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
                
-	    SHEX("B4EFBE1167755F5A75B72CF15E0601662D036A16CAC8602A909FB328"));
-  test_hash(&amp;nettle_sha3_224, /* 118 octets */
-	    SHEX("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F3 \
25E894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
                
-	    SHEX("FA4BB608F8F60841E1189F8770051695CDC9935BDA7187C36419228A"));
-  test_hash(&amp;nettle_sha3_224, /* 119 octets */
-	    SHEX("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC \
3BDF8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913 \
                C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
                
-	    SHEX("B3A877231519C24E2EFA424E6057128EA105B54C65E58074B5B1583C"));
-  test_hash(&amp;nettle_sha3_224, /* 120 octets */
-	    SHEX("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095B \
E4BA5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B015 \
                8F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
                
-	    SHEX("9F385C0B645DB8DB8B73C98C40BE264FFEE6151C7B5A0964E67DAA9F"));
-  test_hash(&amp;nettle_sha3_224, /* 121 octets */
-	    SHEX("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C7 \
15C1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C \
                21620B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"),
                
-	    SHEX("BD6C865993082EC7B3808C13FD140FE0C0667B3EE51B9F8F1F4DFFD8"));
-  test_hash(&amp;nettle_sha3_224, /* 122 octets */
-	    SHEX("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633 \
ABD1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026C \
EE77BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"),
                
-	    SHEX("8CA844ACFCAABD3B969F86C2F1ECDF1620574EC8C24426BE2DCC1BB5"));
-  test_hash(&amp;nettle_sha3_224, /* 123 octets */
-	    SHEX("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1 \
857815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB \
4C266272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
                
-	    SHEX("E8D549FF8D53745A4C5C75BDAD92314025DA877A77CE49EA134840FA"));
-  test_hash(&amp;nettle_sha3_224, /* 124 octets */
-	    SHEX("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753 \
95551E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095 \
B73DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
                
-	    SHEX("E6BD80787F8704FFF73112E8B368ADFBA3A1109162C769491349DCEF"));
-  test_hash(&amp;nettle_sha3_224, /* 125 octets */
-	    SHEX("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C0 \
0FBBED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D02 \
82FED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
                
-	    SHEX("BD7D9E6CF9D2C1030F892533E01B72B5288E174B0864D81D71F8C6E6"));
-  test_hash(&amp;nettle_sha3_224, /* 126 octets */
-	    SHEX("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031 \
4855F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7 \
1967A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
                
-	    SHEX("A5312E8C7F0A3594A8ECD1ABC5CBC14B2585F0B1FE32A4E1FA0A2E25"));
-  test_hash(&amp;nettle_sha3_224, /* 127 octets */
-	    SHEX("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B \
16D27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE7 \
65DE2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
                
-	    SHEX("2E0D739386AAAF37980EE421AA8C19B19AF52E70F59DC0A6988471F5"));
-  test_hash(&amp;nettle_sha3_224, /* 128 octets */
-	    SHEX("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F \
369EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF06 \
21CD54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
                
-	    SHEX("AF3E0CC6E64501F10FD39722E852355FD6D80D32190631E2F06C22AD"));
-  test_hash(&amp;nettle_sha3_224, /* 129 octets */
-	    SHEX("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106 \
594893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B \
5DB812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
                
-	    SHEX("F009E05D1AFE2D33D2C5F4008B46F31468A7BF5299D4F0AB0EFE4FD3"));
-  test_hash(&amp;nettle_sha3_224, /* 130 octets */
-	    SHEX("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA9787917 \
5AABA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5 \
7447EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
                
-	    SHEX("76281BD1613843A3ADBCBC78D1923AFB5B8AA2DCBC48934DEEC84AAA"));
-  test_hash(&amp;nettle_sha3_224, /* 131 octets */
-	    SHEX("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E \
477743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B \
1921881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
                
-	    SHEX("DA7C79E04FCA2B69AAA58199CA69105B6B18FE67E29F380501AA7FA8"));
-  test_hash(&amp;nettle_sha3_224, /* 132 octets */
-	    SHEX("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C34 \
8C2B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C \
2A0EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
                
-	    SHEX("70ECB261757371A282903C696715DC03F106A339F076203BAB436E94"));
-  test_hash(&amp;nettle_sha3_224, /* 133 octets */
-	    SHEX("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3B \
F88E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3 \
FE507BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
                
-	    SHEX("740D3CB455133173EC652AA04709EF0F549F19A9D4CC6BEC9E876B5A"));
-  test_hash(&amp;nettle_sha3_224, /* 134 octets */
-	    SHEX("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079 \
B79A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782 \
917417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
                
-	    SHEX("663835A81A2A38D5AD3A37BD9BC96618D27CA32286E9091834A0871A"));
-  test_hash(&amp;nettle_sha3_224, /* 135 octets */
-	    SHEX("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF40 \
67C3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55 \
EA796FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
                
-	    SHEX("2594153AC2DE681F4DEE340FA344EC388773A377D5B89E503254FD2E"));
-  test_hash(&amp;nettle_sha3_224, /* 136 octets */
-	    SHEX("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880 \
EF50700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768 \
DD417F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
                
-	    SHEX("42275C296937745758FF2B7BEE9A897191AE87E42BD10198D9466C19"));
-  test_hash(&amp;nettle_sha3_224, /* 137 octets */
-	    SHEX("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2 \
CD2BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47B \
B67AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
                
-	    SHEX("143F9055EB1F736729C77721FB65ED5EE142F6E969132FB22989C11F"));
-  test_hash(&amp;nettle_sha3_224, /* 138 octets */
-	    SHEX("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882 \
615D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706 \
3301B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
                
-	    SHEX("449A0313CCAB4427032B6BE9D66F827FFB4C71B538B2104F9D14D14A"));
-  test_hash(&amp;nettle_sha3_224, /* 139 octets */
-	    SHEX("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0 \
99276296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777F \
A5FEAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
                
-	    SHEX("21E2760644A19ED18ED0CD74C4E4C071D770132AD215EB6F7D42B01D"));
-  test_hash(&amp;nettle_sha3_224, /* 140 octets */
-	    SHEX("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC15077 \
3B6FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA \
035594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
                
-	    SHEX("D5534C72BE2E4B1FAAA813118B0D29DBB86F624067EA34515AFA08BE"));
-  test_hash(&amp;nettle_sha3_224, /* 141 octets */
-	    SHEX("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29 \
6880A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3 \
C6F405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
                
-	    SHEX("C0CD413B1CE000A1BBE3A2CD103C7F8F95925AC6C8A5C922AFB5F96D"));
-  test_hash(&amp;nettle_sha3_224, /* 142 octets */
-	    SHEX("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4 \
064DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1C \
E085FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
                
-	    SHEX("93C6BF585E994B1669184AC71DC8E772B53443E668DA0786D528090B"));
-  test_hash(&amp;nettle_sha3_224, /* 143 octets */
-	    SHEX("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA37 \
42FF3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6 \
A1EED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
                
-	    SHEX("BFE15BB51F680F2F489F0FDEB32F271090A09D1563F29FEAF92104E0"));
-  test_hash(&amp;nettle_sha3_224, /* 144 octets */
-	    SHEX("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579 \
DB2F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B3 \
9BD90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
                
-	    SHEX("6D735FB7579135F61B771B2BB0D81514CDE9C977ACCF6FEAF6EDEBF0"));
-  test_hash(&amp;nettle_sha3_224, /* 145 octets */
-	    SHEX("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9 \
035321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B90482 \
1F32B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
                
-	    SHEX("6D93153145904CEBE0E8A66C272BEDF4F0D0A3C53AB30264135431A7"));
-  test_hash(&amp;nettle_sha3_224, /* 146 octets */
-	    SHEX("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F \
21A0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7 \
DA2B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
                
-	    SHEX("AFE30535675A7021BF618941D94DDFFCCEFCAA1EF06CDE306D5D7A75"));
-  test_hash(&amp;nettle_sha3_224, /* 147 octets */
-	    SHEX("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3 \
404F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895A \
AA16ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
                
-	    SHEX("916501614891BD99400A8AEAABF69326FA98B833AED82386AB19E507"));
-  test_hash(&amp;nettle_sha3_224, /* 148 octets */
-	    SHEX("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D58 \
5E9578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBE \
E4BBB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
                
-	    SHEX("9C3759905E47E49CC7057C9237545D444F758535F991F7E8728F3A51"));
-  test_hash(&amp;nettle_sha3_224, /* 149 octets */
-	    SHEX("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F \
296EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA99291 \
0EF4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
                
-	    SHEX("733ACDF9CED47F2E43936ED6C2AC0F824F4F5B5D2942522D4DE5F6FC"));
-  test_hash(&amp;nettle_sha3_224, /* 150 octets */
-	    SHEX("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3 \
B267B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A \
57B2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
                
-	    SHEX("530438B7A86B16434C82713EF7392D25C5CF814C7C6408368C4F2EAF"));
-  test_hash(&amp;nettle_sha3_224, /* 151 octets */
-	    SHEX("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97 \
8788C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9 \
A93BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
                
-	    SHEX("84944EB018F8A124E3C969C037464EE32BACF8E58901D2E22291DF9A"));
-  test_hash(&amp;nettle_sha3_224, /* 152 octets */
-	    SHEX("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29 \
A0DC0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D \
50309E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
                
-	    SHEX("1311DA757C405F2A0EAB110B0C515F05FCD59F5495A9704252DA5AB8"));
-  test_hash(&amp;nettle_sha3_224, /* 153 octets */
-	    SHEX("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C \
250034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC937 \
93DD6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
                
-	    SHEX("B5FDAEAD7E68333CEDB5D4AD636AE7059EB31305E2C831787FD51265"));
-  test_hash(&amp;nettle_sha3_224, /* 154 octets */
-	    SHEX("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933 \
906FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433 \
F7D350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
                
-	    SHEX("2919FD6C376AEC9F502893A9970B9AC6591855227C0E137BE01705AC"));
-  test_hash(&amp;nettle_sha3_224, /* 155 octets */
-	    SHEX("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286 \
F8F17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0 \
F55231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
                
-	    SHEX("8910E7ABC3DAA506974EC13E35C43133EBFA91DEEC99BFAD4954447E"));
-  test_hash(&amp;nettle_sha3_224, /* 156 octets */
-	    SHEX("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E \
91F4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A801485503073109 \
50D034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
                
-	    SHEX("F8B4A4A6FBB8C8432712B5B815B36685C86656C3F67D05BDBB44B49A"));
-  test_hash(&amp;nettle_sha3_224, /* 157 octets */
-	    SHEX("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE704 \
57A9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BE \
D9DE9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
                
-	    SHEX("926FE0044B12422D3E4BFA52C59252ACC91DBF09C488AE9D31C7EB63"));
-  test_hash(&amp;nettle_sha3_224, /* 158 octets */
-	    SHEX("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576 \
B1C2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC \
4A471A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
                
-	    SHEX("A4E4B4A573F7B8865D77D7E57F7D840A55261A96E5FEDD763D0811F4"));
-  test_hash(&amp;nettle_sha3_224, /* 159 octets */
-	    SHEX("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197 \
B839957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1 \
8691A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
                
-	    SHEX("EBFD796B29F6059931732F98602185B6377C4E6E40BD26C810D6DA96"));
-  test_hash(&amp;nettle_sha3_224, /* 160 octets */
-	    SHEX("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B26 \
4E920394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8 \
94310A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
                
-	    SHEX("3FB7392A6621B852312A374C14A679AFB0E3D2EC6A2D147BD5E873F6"));
-  test_hash(&amp;nettle_sha3_224, /* 161 octets */
-	    SHEX("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67 \
314F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBB \
B8153DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
                
-	    SHEX("8B3750655AF5ECA10CC4F291043590E2D19759253047A4C1DBC86577"));
-  test_hash(&amp;nettle_sha3_224, /* 162 octets */
-	    SHEX("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9 \
A0F2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246C \
E0623A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6 \
                C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
                
-	    SHEX("D3A5004477BBB21CF7D0FCA84E51A7A57E93FAE7222570C01B00E89A"));
-  test_hash(&amp;nettle_sha3_224, /* 163 octets */
-	    SHEX("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8 \
E1B288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E \
37D89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA6 \
                9107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
                
-	    SHEX("75B77C36E394711DFD35C11AEC8C033DCD7C18712F3B06D1FEDC1077"));
-  test_hash(&amp;nettle_sha3_224, /* 164 octets */
-	    SHEX("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0 \
B12FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18 \
F408C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383F \
                D1900B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"),
                
-	    SHEX("E52DF7FDF957269CA0B0F46553D554FE2E6367019B379A1E4F4C7A9F"));
-  test_hash(&amp;nettle_sha3_224, /* 165 octets */
-	    SHEX("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D5989 \
6E3A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB \
2D64496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB \
6997BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"),
                
-	    SHEX("41853CD54692DBD478BB1E2D6CEDCDA1D139C838AC956A37C87F098F"));
-  test_hash(&amp;nettle_sha3_224, /* 166 octets */
-	    SHEX("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4 \
A4326783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A80 \
5B6A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5 \
367926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
                
-	    SHEX("1F2727D5132C453BD321A9FC7AA46FB8B3341D90988C41DE8439D2F1"));
-  test_hash(&amp;nettle_sha3_224, /* 167 octets */
-	    SHEX("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017 \
BBCF26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78 \
F854FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232 \
314EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
                
-	    SHEX("5E745F8966D91EEE013B061281BC20C79B0323000A15BBDE7E0D25AE"));
-  test_hash(&amp;nettle_sha3_224, /* 168 octets */
-	    SHEX("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929 \
BD9689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BE \
A6F469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E \
884A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
                
-	    SHEX("CD2EEB7D48D0260986BADF16F15AA09B5229B7830C73EE95B8CBF85A"));
-  test_hash(&amp;nettle_sha3_224, /* 169 octets */
-	    SHEX("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73 \
243360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BD \
BBFD85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0 \
424B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
                
-	    SHEX("3322FA727A0089F500A6A99D67419A76C7AF77EF2893E8D385B42720"));
-  test_hash(&amp;nettle_sha3_224, /* 170 octets */
-	    SHEX("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D07 \
86E99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD94 \
1DCB82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A46 \
2B83B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
                
-	    SHEX("234C1BC03FD4C3D38DD4C736B59A9107911210D54E98B3A372F57236"));
-  test_hash(&amp;nettle_sha3_224, /* 171 octets */
-	    SHEX("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA753 \
6AAE597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C32 \
92E96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C \
43D6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
                
-	    SHEX("BF229F4017E1674D4CB87B70D3D777C7114F085D77216437B860D641"));
-  test_hash(&amp;nettle_sha3_224, /* 172 octets */
-	    SHEX("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F \
80B6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C \
7BB759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A \
1C2441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
                
-	    SHEX("F95DE3F40E5FAF58D3320B5B24ACEC7DE6B4B7E54C2F80F6D314AB5A"));
-  test_hash(&amp;nettle_sha3_224, /* 173 octets */
-	    SHEX("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712 \
1548373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4 \
CAFB37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255 \
B4D231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
                
-	    SHEX("04B3BBBDDFEBA441005A48CEBDBB1C6B6A674C2D9B224DA29844374D"));
-  test_hash(&amp;nettle_sha3_224, /* 174 octets */
-	    SHEX("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02 \
D19BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC83 \
9EA9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CA \
C1BACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
                
-	    SHEX("6C1809CD88A0EDB211986359498E0AC37E25E8EB62946938C37D3C26"));
-  test_hash(&amp;nettle_sha3_224, /* 175 octets */
-	    SHEX("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3 \
510E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB \
3B117EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22 \
F1B7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
                
-	    SHEX("D2744A1BBB34718FCBB614C21E1FCCD0FF88615CB82AA03803AB9460"));
-  test_hash(&amp;nettle_sha3_224, /* 176 octets */
-	    SHEX("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310 \
E5C0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E97 \
23EFD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D38 \
40CDFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
                
-	    SHEX("F6115F635D98B572FD1BA85763ECCF8BF273FBF7B96F0DB0120CA8AD"));
-  test_hash(&amp;nettle_sha3_224, /* 177 octets */
-	    SHEX("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88 \
4531D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F753 \
79E9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C \
16E69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
                
-	    SHEX("5EE73A4F13A08A2D9B1E52DF88972FFB9F03B843A387EE52B00EDCEE"));
-  test_hash(&amp;nettle_sha3_224, /* 178 octets */
-	    SHEX("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F \
68E6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820A \
CE262D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E25533 \
7DAA06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
                
-	    SHEX("44BC64559BDB910B7079E0261FF8B49DBA141B32ECBCB70B3ABDFBF9"));
-  test_hash(&amp;nettle_sha3_224, /* 179 octets */
-	    SHEX("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54 \
2619DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AAD \
D7CE842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877 \
E50FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
                
-	    SHEX("DE82ADDE823C312F83B3D4C0BD35AA0395AB747ABBC22A70973E2A6C"));
-  test_hash(&amp;nettle_sha3_224, /* 180 octets */
-	    SHEX("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D \
50AA83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E \
688094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D \
1BCAB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
                
-	    SHEX("B1BA910C9F5E126607FF2531AFFECBA791261E354E2C1A81FDA7A756"));
-  test_hash(&amp;nettle_sha3_224, /* 181 octets */
-	    SHEX("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D96 \
63ACCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DB \
E7FB74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC55 \
4D8E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
                
-	    SHEX("3EF8D4A6BB8E172374E806E8D65D5F81B3FDB36299DE1C0CCC26DC65"));
-  test_hash(&amp;nettle_sha3_224, /* 182 octets */
-	    SHEX("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F \
82310356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D \
9F01AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78 \
F6810EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
                
-	    SHEX("1C89D6460B3F13584BF8319EE538F24C850CA771A51ECC547652BAE3"));
-  test_hash(&amp;nettle_sha3_224, /* 183 octets */
-	    SHEX("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0B \
D5931839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55 \
A9116E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB \
1B9327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
                
-	    SHEX("99981766CFE3B1888F2A008EFA1088016CB29993567F9BB74B5C4D3C"));
-  test_hash(&amp;nettle_sha3_224, /* 184 octets */
-	    SHEX("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636 \
C1727EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B998 \
80C87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA11 \
6E5F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
                
-	    SHEX("0215E91EF992DCC7E82D16A2C9B27921C1310C182F59DF8BED5151E8"));
-  test_hash(&amp;nettle_sha3_224, /* 185 octets */
-	    SHEX("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7 \
635EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3 \
BE9377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035C \
D2185BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
                
-	    SHEX("E52EA6714A3978810DC19E999C32516D4ACF0CBCD67E917A4FEB56D0"));
-  test_hash(&amp;nettle_sha3_224, /* 186 octets */
-	    SHEX("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC4586 \
8AE9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E \
8B4ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E \
7459FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
                
-	    SHEX("4C3D6321133EF74810E60D3190FFF3CF20C8521CAEA6FF782D7E3BAB"));
-  test_hash(&amp;nettle_sha3_224, /* 187 octets */
-	    SHEX("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB \
95DB2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F5 \
72BE5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC \
36F59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
                
-	    SHEX("B9F006DBF853C023DEBE2F40035A7E83C49CDE656EC86A4621950F3E"));
-  test_hash(&amp;nettle_sha3_224, /* 188 octets */
-	    SHEX("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36 \
D44C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A \
037FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3 \
CC03E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
                
-	    SHEX("0A5AA6BC564B8CB2F5FD7255455C0E7A5DACE0050C3BBD259FDE2AB9"));
-  test_hash(&amp;nettle_sha3_224, /* 189 octets */
-	    SHEX("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29 \
F79031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE06 \
2CDD71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727 \
083513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
                
-	    SHEX("8CA4E085F04956B5B16520E3A767F8BA937364FE5F4460288AD4F231"));
-  test_hash(&amp;nettle_sha3_224, /* 190 octets */
-	    SHEX("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B \
1B7F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02 \
E67A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467 \
998BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
                
-	    SHEX("C0AA34391CB3104C41995F3DE782F012D421585E5384E047A997062F"));
-  test_hash(&amp;nettle_sha3_224, /* 191 octets */
-	    SHEX("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306 \
BE84536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B \
922964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E0 \
38F6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
                
-	    SHEX("33C10010A0B810386AE62F3F927DEAFC0D5AF0AF3DC7A8355CB779CD"));
-  test_hash(&amp;nettle_sha3_224, /* 192 octets */
-	    SHEX("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D52 \
0EEF3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2 \
DA2B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C794 \
1FCC82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
                
-	    SHEX("842A2E13D2728CA55B42D784BB6BC4B889E56775AD56BF75789CC57A"));
-  test_hash(&amp;nettle_sha3_224, /* 193 octets */
-	    SHEX("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478 \
313C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA2 \
3EC9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDB \
B48EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
                
-	    SHEX("A576281CFAA89DCEFB1D37772400BA4CABCEEF33CBA2F833336A74F2"));
-  test_hash(&amp;nettle_sha3_224, /* 194 octets */
-	    SHEX("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840E \
FE8D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8 \
A795AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036 \
E24E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
                
-	    SHEX("B1579476972D42FA388FEEB8424834672C4D1A4225EE2DB89DEA7359"));
-  test_hash(&amp;nettle_sha3_224, /* 195 octets */
-	    SHEX("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC35530166 \
08EF2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E \
76F8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01 \
C9F0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
                
-	    SHEX("A32EC69648B4FD9BA2431ED0FEF036188C19788D7DDF0D25B6B03ECD"));
-  test_hash(&amp;nettle_sha3_224, /* 196 octets */
-	    SHEX("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF \
801E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539 \
E6A8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2 \
7622FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
                
-	    SHEX("2B8CF4C8D9E6717EBCE4F0584ADA59A8ACDFAB98AD7E33F355B77095"));
-  test_hash(&amp;nettle_sha3_224, /* 197 octets */
-	    SHEX("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61 \
28334F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6 \
ACC86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22 \
AA503C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
                
-	    SHEX("E583849474F3C759B7A3093C7ABADD61425073AEA2678E278215708D"));
-  test_hash(&amp;nettle_sha3_224, /* 198 octets */
-	    SHEX("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156 \
C0B27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F93926 \
2D4043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245E \
E361E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
                
-	    SHEX("10795D3ABCC077F4A1F5B5653C478F9DB42110EA9F34925470B3CD11"));
-  test_hash(&amp;nettle_sha3_224, /* 199 octets */
-	    SHEX("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491 \
B48529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF \
86A4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783 \
4535929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
                
-	    SHEX("31A843B4A9F332F3B6B099843540AA70651B26B80E0BD75B77F3AA9B"));
-  test_hash(&amp;nettle_sha3_224, /* 200 octets */
-	    SHEX("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222 \
B64CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3E \
AEABE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC2 \
3A79A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
                
-	    SHEX("1029CA117957D80F3C859E8394DD34969331CA3BCEDC436B1EAB0849"));
-  test_hash(&amp;nettle_sha3_224, /* 201 octets */
-	    SHEX("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7 \
A38393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB3 \
2FD6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653 \
F3C9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
                
-	    SHEX("6096E9914C1AC93A6809DE7AD91119C637B00BBD64DCC3E1FAC1E1ED"));
-  test_hash(&amp;nettle_sha3_224, /* 202 octets */
-	    SHEX("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF8 \
4D58EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D \
01C4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384 \
B3DA953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
                
-	    SHEX("F583F07DF2327887C6F10A9B1D509A744F3C294A4227976E3C3722E8"));
-  test_hash(&amp;nettle_sha3_224, /* 203 octets */
-	    SHEX("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295 \
381354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487A \
F49CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6 \
B7224EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
                
-	    SHEX("A9F43B9621FC5902DF2458FD53D0CDE90AAE7000855C67D853C7937A"));
-  test_hash(&amp;nettle_sha3_224, /* 204 octets */
-	    SHEX("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9 \
CB3C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03 \
6819C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2 \
E6DAB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
                
-	    SHEX("E9675FAAC37C93AA61FF9730679A3D1209ADBAD4652582DFF5B1BAAF"));
-  test_hash(&amp;nettle_sha3_224, /* 205 octets */
-	    SHEX("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD \
469D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7A \
A9CE013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFF \
B618E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E \
                0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
                
-	    SHEX("CDB500740812A0D70C68D0097DCC7ACA86EC066C89D36642879A74A5"));
-  test_hash(&amp;nettle_sha3_224, /* 206 octets */
-	    SHEX("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82 \
316CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033 \
AE9AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF0760 \
28C5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC \
                66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
                
-	    SHEX("66F205D7147991A940AFFB7401B692275338519A97608C584362FFEE"));
-  test_hash(&amp;nettle_sha3_224, /* 207 octets */
-	    SHEX("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD093 \
8DDE5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D \
743F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1A \
D260AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C \
                6701290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"),
                
-	    SHEX("909FB29277AB2C4CE4279C485D4FBA7E18FF1A88C66DAF7ACF630310"));
-  test_hash(&amp;nettle_sha3_224, /* 208 octets */
-	    SHEX("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928 \
D7AD377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC4 \
1E0D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0 \
433EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59 \
D287F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"),
                
-	    SHEX("ED535EC075C983A08F7D7AD5714EBC846F25E8661492B2B31978EDF2"));
-  test_hash(&amp;nettle_sha3_224, /* 209 octets */
-	    SHEX("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F9 \
7DF3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438D \
B1BB361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587 \
AA46AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623 \
047C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
                
-	    SHEX("87F15CC2AEC24168D8BBAF188825F3BB0178CFB5C5899F2FD042CE89"));
-  test_hash(&amp;nettle_sha3_224, /* 210 octets */
-	    SHEX("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F \
808DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255 \
DA9843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01AC \
B8F0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F59 \
20E6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
                
-	    SHEX("31BB872545217FDBF11077E86B1EE451475C31DC5E0E636EFBE50825"));
-  test_hash(&amp;nettle_sha3_224, /* 211 octets */
-	    SHEX("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBF \
D4A43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8 \
E66AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F625 \
2C0407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA \
35C6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
                
-	    SHEX("26D69F0AE8E4DC61C6354FF570FDD913CAF21C18697F0371F2D323AF"));
-  test_hash(&amp;nettle_sha3_224, /* 212 octets */
-	    SHEX("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCD \
DB708FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A \
1F76B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9 \
B2D8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24A \
F8C8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
                
-	    SHEX("175393534D90B614B158105C95E18A1052A56D0E775EA1CF51AD5853"));
-  test_hash(&amp;nettle_sha3_224, /* 213 octets */
-	    SHEX("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0 \
819A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A156 \
6FC7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431 \
B4C40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2 \
878A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
                
-	    SHEX("3DECD71DA22639985CF242F2FAE7172459042C826495C8D8D95C3719"));
-  test_hash(&amp;nettle_sha3_224, /* 214 octets */
-	    SHEX("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2 \
A186964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C \
2527B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0 \
C3792F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346 \
D43CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
                
-	    SHEX("2D0A56864BBEC6449FBF7B2EAE53DA46647183B56FA4EDB1602E5163"));
-  test_hash(&amp;nettle_sha3_224, /* 215 octets */
-	    SHEX("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9 \
2017F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299 \
CAA792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA \
85BDDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2 \
B63ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
                
-	    SHEX("A0FF9E11FBB451943A17E3AC510DE0B582BB072B16DC4E03F9E4019F"));
-  test_hash(&amp;nettle_sha3_224, /* 216 octets */
-	    SHEX("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81 \
C3CA9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB \
558E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC \
5A27D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66 \
DEECA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
                
-	    SHEX("4FEFBE74645949A1291C6F6F05EAF4B780EA01EC5EA5105ECDCB984A"));
-  test_hash(&amp;nettle_sha3_224, /* 217 octets */
-	    SHEX("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC3 \
0FC10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377 \
D165B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6 \
BA42F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42 \
07033B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
                
-	    SHEX("7CC9EEBBE0DF46A398233FA31286F8A530292B53E48BA54B6AE40472"));
-  test_hash(&amp;nettle_sha3_224, /* 218 octets */
-	    SHEX("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5 \
D7BE5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7 \
D89E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C5500 \
08FAAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084 \
61804BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
                
-	    SHEX("03D718DA677C4018E52288BB30E4E6E732A16144931176F0A8C73970"));
-  test_hash(&amp;nettle_sha3_224, /* 219 octets */
-	    SHEX("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296 \
F98379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998 \
704D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368 \
931E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4 \
102A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
                
-	    SHEX("A9ABB430FC1B3D8C6CDEB5319878E7B12B118E2E03F40562A376418C"));
-  test_hash(&amp;nettle_sha3_224, /* 220 octets */
-	    SHEX("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F2 \
89FBF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1D \
C378F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F \
2CA082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B68 \
67D74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
                
-	    SHEX("4A7A58B337872189A06B53B6BCC50C29EF9D0BBC491832907AF14EC8"));
-  test_hash(&amp;nettle_sha3_224, /* 221 octets */
-	    SHEX("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E81 \
2C39F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8 \
D22C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568 \
83413D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68 \
454779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
                
-	    SHEX("808E01CD273919BA1BFF011E0E7094EC6D5C4962912B08F11965AB58"));
-  test_hash(&amp;nettle_sha3_224, /* 222 octets */
-	    SHEX("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E \
4DAAE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D3750 \
77F2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB \
1CB6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF81 \
1A13F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
                
-	    SHEX("DCBCC30B6909FDF00650F1A10CFBBD419408F9D37F378C5CA693B803"));
-  test_hash(&amp;nettle_sha3_224, /* 223 octets */
-	    SHEX("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FD \
D28C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27 \
A6584C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026 \
EA542076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AE \
F5BF0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
                
-	    SHEX("BE077F12762EF51859B6C520B19231E30442AC268CE4FD47366FF9F1"));
-  test_hash(&amp;nettle_sha3_224, /* 224 octets */
-	    SHEX("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF450 \
82C4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F60651 \
9AEA0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05 \
BFB1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA0 \
9D21E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
                
-	    SHEX("25C425265AB07D0A8EC659D4D5EE618BDE87003B7255FF4B5315F1C7"));
-  test_hash(&amp;nettle_sha3_224, /* 225 octets */
-	    SHEX("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73 \
975809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB \
4D1BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE \
3FF6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171 \
D1651001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
                
-	    SHEX("046CF62C41CE9B0F54B667558063023F59887BADA9CC288414ADEE7F"));
-  test_hash(&amp;nettle_sha3_224, /* 226 octets */
-	    SHEX("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF21 \
11B97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4 \
957A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198 \
B7E838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B \
3DFA269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
                
-	    SHEX("37E3844080986179FDA99E9B8C54E294643060795B66E810E3E25D9E"));
-  test_hash(&amp;nettle_sha3_224, /* 227 octets */
-	    SHEX("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23 \
697ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACD \
A897944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBC \
E60827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE6117 \
9FE84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
                
-	    SHEX("3B503D615E54132B42CAC1A0450A0D7E2EDC63ED87BF109C509C7987"));
-  test_hash(&amp;nettle_sha3_224, /* 228 octets */
-	    SHEX("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F \
152FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE \
62AADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E4 \
2D168B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE901150 \
4A49E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
                
-	    SHEX("CB40837DAF4A882538464DEC0A999DA482B4AAE08708EA6D5D7FF461"));
-  test_hash(&amp;nettle_sha3_224, /* 229 octets */
-	    SHEX("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06 \
35284D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF5207968 \
41E58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E19385666137 \
6C81CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C \
07DC819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
                
-	    SHEX("EAE911E66661DCD3472B458A48B74730468923C7ABCAC7F311F02463"));
-  test_hash(&amp;nettle_sha3_224, /* 230 octets */
-	    SHEX("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3D \
AC9F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47 \
971B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70 \
D9423798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7 \
FEBAA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
                
-	    SHEX("307D5A8BA5865A4D281ACB2F3C5EF16E3B11BCD8C0F82D22D47C2CC8"));
-  test_hash(&amp;nettle_sha3_224, /* 231 octets */
-	    SHEX("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645 \
CA14E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8 \
BD0B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C \
0BA854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B \
18FE34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
                
-	    SHEX("58666B325D81CBE6A4BBAD91720E2BA93C70EA114E7F77323C5BE486"));
-  test_hash(&amp;nettle_sha3_224, /* 232 octets */
-	    SHEX("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE87 \
5DA0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94 \
311051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B \
349939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB44 \
44B85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
                
-	    SHEX("BC296FFD39381CF1C96228A9F380F41C871B8788C654ED9B384C17FE"));
-  test_hash(&amp;nettle_sha3_224, /* 233 octets */
-	    SHEX("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBB \
D5801AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422 \
9005F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A94 \
26ECEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB74 \
48F50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
                
-	    SHEX("0CCEAE713E5E39BCEFE7A2273004816FE005D5EDFB2A965CC9AC9948"));
-  test_hash(&amp;nettle_sha3_224, /* 234 octets */
-	    SHEX("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FA \
C4FDF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425F \
F7F1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6F \
BF5534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526D \
C643872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
                
-	    SHEX("7997FDF30837D8B25E85FC01316E31B61EE814490DA002A04816D7CA"));
-  test_hash(&amp;nettle_sha3_224, /* 235 octets */
-	    SHEX("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F5 \
4EDE927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747B \
BB53652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0ED \
E838AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F \
02B64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
                
-	    SHEX("9897B479871AC73DABBE6221E27BFA67278F2BB044E3D0726FCB2B81"));
-  test_hash(&amp;nettle_sha3_224, /* 236 octets */
-	    SHEX("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51 \
F1534BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF14 \
30A9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19 \
AFA65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB \
93D2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
                
-	    SHEX("EAD2620FBC4BDFB14AEC8C7B9AA882BA3EB2AACC9A15D7D36DBA086D"));
-  test_hash(&amp;nettle_sha3_224, /* 237 octets */
-	    SHEX("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267 \
512CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE5121 \
33BB7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627A \
AC02ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E \
742EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
                
-	    SHEX("545E59812C7AEA1BD1CD48880D6650117DFD9E58A791DAC1072B19DA"));
-  test_hash(&amp;nettle_sha3_224, /* 238 octets */
-	    SHEX("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBB \
E2B01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9 \
B0F663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F8386 \
9CA27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D \
6D055B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
                
-	    SHEX("7C2FA00961BCF020B95A0ED7193EA3583340BBD37898EF6A464C1940"));
-  test_hash(&amp;nettle_sha3_224, /* 239 octets */
-	    SHEX("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0D \
D8E9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07 \
A38F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8 \
AAE141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A90 \
16F2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
                
-	    SHEX("232DB22EB2C19109AFEFB71918EA2DAA7C0D76652E1884EA7A8AE646"));
-  test_hash(&amp;nettle_sha3_224, /* 240 octets */
-	    SHEX("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA \
67273BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1 \
466E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAF \
CD3F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B8 \
5AE5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
                
-	    SHEX("DB85AF5CFCE746240E6D44E73CEF66A72CE5968284D35FFEF7FBFF6C"));
-  test_hash(&amp;nettle_sha3_224, /* 241 octets */
-	    SHEX("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1 \
A71D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69 \
A7A682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0 \
C8F9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7 \
801A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
                
-	    SHEX("A1EB42FB0792361F0D6809A2E8DC062F09F2855B39BC2C4B7F54311E"));
-  test_hash(&amp;nettle_sha3_224, /* 242 octets */
-	    SHEX("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48 \
A27D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68 \
020C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C1 \
4B4377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C \
41CCBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
                
-	    SHEX("1AF4A3AB9A07CF064C254D122CC7DE15E0F0D3CA3DFA50EA1C43A78D"));
-  test_hash(&amp;nettle_sha3_224, /* 243 octets */
-	    SHEX("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC057828908 \
2B2A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE4920 \
87D7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA \
800E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1 \
8867B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
                
-	    SHEX("C14D43525E18892C79142D887D2AD3992848B72CCC087F64F0F1D621"));
-  test_hash(&amp;nettle_sha3_224, /* 244 octets */
-	    SHEX("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E972 \
6C690D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9 \
359AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B \
5F65E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF374 \
5F0EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
                
-	    SHEX("116C0462D50D57F948015EC74BE9015707313712B45883C02FE84E1E"));
-  test_hash(&amp;nettle_sha3_224, /* 245 octets */
-	    SHEX("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3 \
796141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C \
5539FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61 \
694301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49 \
171433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
                
-	    SHEX("96F7111176641F6373701BA594090079146D4220F30B5120C12498BA"));
-  test_hash(&amp;nettle_sha3_224, /* 246 octets */
-	    SHEX("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4 \
DE9C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B4 \
5C966B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF1 \
02D23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F \
5D7297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
                
-	    SHEX("9EDDAB2C9C60B122503C1C30EC6E74050EE13C7E103A05F9ED41D992"));
-  test_hash(&amp;nettle_sha3_224, /* 247 octets */
-	    SHEX("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82 \
EA7D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5 \
577B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3 \
450CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4E \
D5E607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
                
-	    SHEX("54CC87B9655180C0E1C6672350AE1952DDF51EE5D7E215569652AA2E"));
-  test_hash(&amp;nettle_sha3_224, /* 248 octets */
-	    SHEX("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA9 \
09FDF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4 \
BABD9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D \
619BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D \
001EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089 \
                612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
                
-	    SHEX("4629C97F9BA98698E0DDECA5E0A3B6DE210EA9E84BF942C2CCF4EC68"));
-  test_hash(&amp;nettle_sha3_224, /* 249 octets */
-	    SHEX("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B56 \
2B288D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944 \
1627A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C29611453151305493 \
11FC07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9 \
A7CF97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A192860 \
                4B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
                
-	    SHEX("F45034AA94C1A2686EB849EF4262F2F5BA9ACDD0E8EA32401E060B43"));
-  test_hash(&amp;nettle_sha3_224, /* 250 octets */
-	    SHEX("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A7 \
3D80A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A5 \
1B56D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B \
3A356001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90E \
BD090AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911 \
                F165D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"),
                
-	    SHEX("62153F592C49D3C0485F80073319049A510C730327940CD9D52F3698"));
-  test_hash(&amp;nettle_sha3_224, /* 251 octets */
-	    SHEX("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC \
7EC6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699 \
DF35D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5 \
D397FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343 \
7095707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A0748 \
4A5D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"),
                
-	    SHEX("ECDE4D6EB0CF28010B45D0D310E7D05F08B80AFC44B8A359BE7E1923"));
-  test_hash(&amp;nettle_sha3_224, /* 252 octets */
-	    SHEX("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03 \
742636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EE \
AD3E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A \
4E7B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED \
122A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6 \
772E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
                
-	    SHEX("3BFC5018CF15CB88007929924B3E014635EF135C91F9671B29BE8731"));
-  test_hash(&amp;nettle_sha3_224, /* 253 octets */
-	    SHEX("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A474299 \
22C4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D \
7E8B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD99 \
7CEFC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B25 \
46FE05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B7 \
15C1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
                
-	    SHEX("22715559AD15717722B1FA0583996090C79C3DF16CC1E6E0F6D3E898"));
-  test_hash(&amp;nettle_sha3_224, /* 254 octets */
-	    SHEX("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC2 \
0AB4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D0078 \
5E57788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993 \
F92B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B73 \
0AD3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C \
39CF421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
                
-	    SHEX("2F36FF8AB7264F7A5766DE025018E19B5A64D90994B743B8FBFBDCCA"));
-  test_hash(&amp;nettle_sha3_224, /* 255 octets */
-	    SHEX("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23 \
346775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD \
181C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BB \
A40489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B61836 \
39DCFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C5 \
65CCA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
                
-	    SHEX("5AF56987EA9CF11FCD0EAC5EBC14B037365E9B1123E31CB2DFC7929A"));
+  test_hash (&amp;nettle_sha3_224,	/* 0 octets */
+	     SHEX (""),
+	     SHEX
+	     ("6B4E03423667DBB73B6E15454F0EB1ABD4597F9A1B078E3F5B5A6BC7"));
+  test_hash (&amp;nettle_sha3_224,	/* 1 octets */
+	     SHEX ("CC"),
+	     SHEX
+	     ("DF70ADC49B2E76EEE3A6931B93FA41841C3AF2CDF5B32A18B5478C39"));
+  test_hash (&amp;nettle_sha3_224,	/* 2 octets */
+	     SHEX ("41FB"),
+	     SHEX
+	     ("BFF295861DAEDF33E70519B1E2BCB4C2E9FE3364D789BC3B17301C15"));
+  test_hash (&amp;nettle_sha3_224,	/* 3 octets */
+	     SHEX ("1F877C"),
+	     SHEX
+	     ("14889DF49C076A9AF2F4BCB16339BCC45A24EBF9CE4DCDCE7EC17217"));
+  test_hash (&amp;nettle_sha3_224,	/* 4 octets */
+	     SHEX ("C1ECFDFC"),
+	     SHEX
+	     ("A33C58DF8A8026F0F9591966BD6D00EED3B1E829580AB9BE268CAF39"));
+  test_hash (&amp;nettle_sha3_224,	/* 5 octets */
+	     SHEX ("21F134AC57"),
+	     SHEX
+	     ("10E580A32199596169331AD43CFCF10264F81565037040028A06B458"));
+  test_hash (&amp;nettle_sha3_224,	/* 6 octets */
+	     SHEX ("C6F50BB74E29"),
+	     SHEX
+	     ("FE52C30C95C1E5193207E97D355FDE09453482708C0876AA961508F0"));
+  test_hash (&amp;nettle_sha3_224,	/* 7 octets */
+	     SHEX ("119713CC83EEEF"),
+	     SHEX
+	     ("8B449849CB7C4776C593DE58FD5C2E322CB5316BE08A75057A01ED6A"));
+  test_hash (&amp;nettle_sha3_224,	/* 8 octets */
+	     SHEX ("4A4F202484512526"),
+	     SHEX
+	     ("01386CDD70589B3B34941EFE16B85071E9BA948179922044F640868E"));
+  test_hash (&amp;nettle_sha3_224,	/* 9 octets */
+	     SHEX ("1F66AB4185ED9B6375"),
+	     SHEX
+	     ("86953D0864019C81FD3A805357A162FD76A13A7CBF6FF0D635015D0E"));
+  test_hash (&amp;nettle_sha3_224,	/* 10 octets */
+	     SHEX ("EED7422227613B6F53C9"),
+	     SHEX
+	     ("E56FC2A5A58709031DF02A2E46AD95F93583E2745630540D8D97F703"));
+  test_hash (&amp;nettle_sha3_224,	/* 11 octets */
+	     SHEX ("EAEED5CDFFD89DECE455F1"),
+	     SHEX
+	     ("1D783C37C32A2B71B504BCAA05FC00B639F1FAE7E8D8E3F3BC49F041"));
+  test_hash (&amp;nettle_sha3_224,	/* 12 octets */
+	     SHEX ("5BE43C90F22902E4FE8ED2D3"),
+	     SHEX
+	     ("54C7E4BF3C73E192ADE223DFEA86F2D04ACF953612731958F854C7BD"));
+  test_hash (&amp;nettle_sha3_224,	/* 13 octets */
+	     SHEX ("A746273228122F381C3B46E4F1"),
+	     SHEX
+	     ("77E51CEADA2AA1CBBF95ACD821008B57E946F7940223B19F0C53E62E"));
+  test_hash (&amp;nettle_sha3_224,	/* 14 octets */
+	     SHEX ("3C5871CD619C69A63B540EB5A625"),
+	     SHEX
+	     ("9ED59ED155E97154E067FA0F5A130839B57BDBDA6FEB82DABE006F00"));
+  test_hash (&amp;nettle_sha3_224,	/* 15 octets */
+	     SHEX ("FA22874BCC068879E8EF11A69F0722"),
+	     SHEX
+	     ("81B3E56CFEEE8E9138D3BFE24BB7CCDFD4B50D0B8CA11AE7D4B0C960"));
+  test_hash (&amp;nettle_sha3_224,	/* 16 octets */
+	     SHEX ("52A608AB21CCDD8A4457A57EDE782176"),
+	     SHEX
+	     ("B1571BED52E54EEF377D99DF7BE4BC6682C43387F2BF9ACC92DF608F"));
+  test_hash (&amp;nettle_sha3_224,	/* 17 octets */
+	     SHEX ("82E192E4043DDCD12ECF52969D0F807EED"),
+	     SHEX
+	     ("08045CF78D238D56972F1C850414BC404FC6DCB11F8D8210D034C610"));
+  test_hash (&amp;nettle_sha3_224,	/* 18 octets */
+	     SHEX ("75683DCB556140C522543BB6E9098B21A21E"),
+	     SHEX
+	     ("9FFD840C550AD23971EB5CE89AE2FD6222ABFB7F0AAFD7EB0005716B"));
+  test_hash (&amp;nettle_sha3_224,	/* 19 octets */
+	     SHEX ("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
+	     SHEX
+	     ("72DECB5EA1B25A2DAAEB234A8D96E0F57211426666A2EE76B2385C62"));
+  test_hash (&amp;nettle_sha3_224,	/* 20 octets */
+	     SHEX ("E26193989D06568FE688E75540AEA06747D9F851"),
+	     SHEX
+	     ("A589936370A3D20039C469D44A1C26E62823AB28CC50175A9897F98E"));
+  test_hash (&amp;nettle_sha3_224,	/* 21 octets */
+	     SHEX ("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
+	     SHEX
+	     ("96F43401AD49C58D887020F395BDD01F6DAD04128A85B17780408C37"));
+  test_hash (&amp;nettle_sha3_224,	/* 22 octets */
+	     SHEX ("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
+	     SHEX
+	     ("A3A0F0C552E7CD2723FE22E1D5719E213D9A3DA1DB99E32EFFFD0F46"));
+  test_hash (&amp;nettle_sha3_224,	/* 23 octets */
+	     SHEX ("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
+	     SHEX
+	     ("E991F4A14B56DC6B224EF352AE8BC8CAE8B1AF1C25C6733DFB7FFE1F"));
+  test_hash (&amp;nettle_sha3_224,	/* 24 octets */
+	     SHEX ("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
+	     SHEX
+	     ("718866C21CBE3F291364C07B36078A6BF0B8258B0EC155E2E2B1AF23"));
+  test_hash (&amp;nettle_sha3_224,	/* 25 octets */
+	     SHEX ("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
+	     SHEX
+	     ("23606D06FD8F87C2205ABB5FD04C33EBA30509955200566A0F772B49"));
+  test_hash (&amp;nettle_sha3_224,	/* 26 octets */
+	     SHEX ("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
+	     SHEX
+	     ("05935F0AD2264475DF34FA96F6A9118C32B217E86169EB7ADE4E2FDB"));
+  test_hash (&amp;nettle_sha3_224,	/* 27 octets */
+	     SHEX ("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
+	     SHEX
+	     ("FBEC83CBDB6D08C7BFDDC2E37F73B16DC92926A5C23DAB41DEEBFB1B"));
+  test_hash (&amp;nettle_sha3_224,	/* 28 octets */
+	     SHEX
+	     ("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
+	     SHEX
+	     ("1E693B0BCE2372550DAEF35B14F13AB43441ED6742DEE3E86FD1D8EF"));
+  test_hash (&amp;nettle_sha3_224,	/* 29 octets */
+	     SHEX
+	     ("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
+	     SHEX
+	     ("1781F1344DC17F678571F4E5DF3998B1D38B1D83602B53B9B6F283D6"));
+  test_hash (&amp;nettle_sha3_224,	/* 30 octets */
+	     SHEX
+	     ("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
+	     SHEX
+	     ("03B74B7D8FC1F23F76BAB2B6C35F292C15506DE64978FCF6D9973FCE"));
+  test_hash (&amp;nettle_sha3_224,	/* 31 octets */
+	     SHEX
+	     ("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
+	     SHEX
+	     ("6A6857FBA903B9DA2753690C39C548BE008E22EBB372EEAA16C85918"));
+  test_hash (&amp;nettle_sha3_224,	/* 32 octets */
+	     SHEX
+	     ("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
+	     SHEX
+	     ("887921848AD98458F3DB3E0ECD5AD5DB1F0BF9F2D0CA08601074D597"));
+  test_hash (&amp;nettle_sha3_224,	/* 33 octets */
+	     SHEX
+	     ("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
+	     SHEX
+	     ("E0573AD706B44D8C4D204F884B95AB18913E76F41CF29A16DBE34794"));
+  test_hash (&amp;nettle_sha3_224,	/* 34 octets */
+	     SHEX
+	     ("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
+	     SHEX
+	     ("BA31233099055483C99F7AD82D0D24AF487ED4B53FFF1A892A55DDB3"));
+  test_hash (&amp;nettle_sha3_224,	/* 35 octets */
+	     SHEX
+	     ("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
+	     SHEX
+	     ("BEFAA1CB47CF78DDD4E096B861BC340B776F52E351EBE378ADE305BA"));
+  test_hash (&amp;nettle_sha3_224,	/* 36 octets */
+	     SHEX
+	     ("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
+	     SHEX
+	     ("F1E7A1B28EA4D6FB86570F66911E3258C3F49F891654FBCE9BC79B8B"));
+  test_hash (&amp;nettle_sha3_224,	/* 37 octets */
+	     SHEX
+	     ("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
 +	     SHEX
+	     ("C2B31746446934FE29E84CFB5C25B03BE33E9004F74E91C1AF0DB789"));
+  test_hash (&amp;nettle_sha3_224,	/* 38 octets */
+	     SHEX
+	     ("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
 +	     SHEX
+	     ("3A80645FE4271346AAEDC3AE5011B75DF163FAD3EE6128D87F3D9DA3"));
+  test_hash (&amp;nettle_sha3_224,	/* 39 octets */
+	     SHEX
+	     ("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
 +	     SHEX
+	     ("3C5EBE43A2571BCEF25E4EA67A4CA9838770D23599059955AF93FF83"));
+  test_hash (&amp;nettle_sha3_224,	/* 40 octets */
+	     SHEX
+	     ("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
 +	     SHEX
+	     ("AF71DAB0F33D3B48733AD6335CA609398D894E6FA96F5510AE73E5D2"));
+  test_hash (&amp;nettle_sha3_224,	/* 41 octets */
+	     SHEX
+	     ("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
 +	     SHEX
+	     ("DD7512DAA0C634CC1588870B84691D7DE2C182E5570D57868E7DDA5D"));
+  test_hash (&amp;nettle_sha3_224,	/* 42 octets */
+	     SHEX
+	     ("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
 +	     SHEX
+	     ("6CB4F9292BA33CA8D293B7A7EF76619E77309BA2178CD4A130BF9218"));
+  test_hash (&amp;nettle_sha3_224,	/* 43 octets */
+	     SHEX
+	     ("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
 +	     SHEX
+	     ("A9B8435E55FC50FE935EC96798A629C13E856C3C5CFD248126976E0D"));
+  test_hash (&amp;nettle_sha3_224,	/* 44 octets */
+	     SHEX
+	     ("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
 +	     SHEX
+	     ("93E79850622B91F729AB056EA402E27F01B5323158111B29362A96D5"));
+  test_hash (&amp;nettle_sha3_224,	/* 45 octets */
+	     SHEX
+	     ("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
 +	     SHEX
+	     ("7E51D5531382490670115DE13137CB3ADB6E7621B7D9ECA8170FAA96"));
+  test_hash (&amp;nettle_sha3_224,	/* 46 octets */
+	     SHEX
+	     ("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
 +	     SHEX
+	     ("95C35037A8076926FC5C421C35160AC5FE533A2782F20F2D3F4B1B7D"));
+  test_hash (&amp;nettle_sha3_224,	/* 47 octets */
+	     SHEX
+	     ("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
 +	     SHEX
+	     ("BF024A4FE480636118FCC85B807704D59B64D16A150AA53CDE41F030"));
+  test_hash (&amp;nettle_sha3_224,	/* 48 octets */
+	     SHEX
+	     ("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
 +	     SHEX
+	     ("B7A51FBB084DEEB55136EFD7260E5B112E3C40D1A2D14B142DF930DF"));
+  test_hash (&amp;nettle_sha3_224,	/* 49 octets */
+	     SHEX
+	     ("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
 +	     SHEX
+	     ("61CF830A2C4F8F48BC643F97A25F822C013F73BDF4CB4194BC8D55DF"));
+  test_hash (&amp;nettle_sha3_224,	/* 50 octets */
+	     SHEX
+	     ("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
 +	     SHEX
+	     ("D87F62EA811A2F6BF3C5FDE13475B9C676620C0184F87149DC8686C8"));
+  test_hash (&amp;nettle_sha3_224,	/* 51 octets */
+	     SHEX
+	     ("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
 +	     SHEX
+	     ("028A639C7EC0BA1DCEC0B689AA26E2C0167622462669A5C52031602B"));
+  test_hash (&amp;nettle_sha3_224,	/* 52 octets */
+	     SHEX
+	     ("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
 +	     SHEX
+	     ("908EF28AB2B6CBB449B9AF7FA78B3D90E019C3916562EB4819A0C87F"));
+  test_hash (&amp;nettle_sha3_224,	/* 53 octets */
+	     SHEX
+	     ("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
 +	     SHEX
+	     ("6AC84149F890E1352C6D7397DAC3B3773947B3757E8ED4EC059EF899"));
+  test_hash (&amp;nettle_sha3_224,	/* 54 octets */
+	     SHEX
+	     ("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
 +	     SHEX
+	     ("45DA27715CD75F5875BEB7D914CF7488240D1B1F975D430D2F49E9BF"));
+  test_hash (&amp;nettle_sha3_224,	/* 55 octets */
+	     SHEX
+	     ("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
 +	     SHEX
+	     ("63AFBABBEC072140DFCEFE64CF7BC9534DCA10956042E31DBE58D0A5"));
+  test_hash (&amp;nettle_sha3_224,	/* 56 octets */
+	     SHEX
+	     ("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
 +	     SHEX
+	     ("6487193D9CBE593B3DAA50D4DFDF7DD2612300BB93CB39E3EEFA1AFA"));
+  test_hash (&amp;nettle_sha3_224,	/* 57 octets */
+	     SHEX
+	     ("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
 +	     SHEX
+	     ("0DEC25BE3277E27D4F784AD5FF8F79D61D9A309BD693513ACBEED12F"));
+  test_hash (&amp;nettle_sha3_224,	/* 58 octets */
+	     SHEX
+	     ("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
 +	     SHEX
+	     ("130B67C6D1A5616227ABD73ABF6FEB70FCE1D5A4BF3338C6DCCB39D5"));
+  test_hash (&amp;nettle_sha3_224,	/* 59 octets */
+	     SHEX
+	     ("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
 +	     SHEX
+	     ("3ABB5ACB8485E20BB620D4A030B9C25D3156A9B26893AE007C79F305"));
+  test_hash (&amp;nettle_sha3_224,	/* 60 octets */
+	     SHEX
+	     ("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
 +	     SHEX
+	     ("922E216529A95305307E908C69367EBB9AD931ECA314563AC36AAB80"));
+  test_hash (&amp;nettle_sha3_224,	/* 61 octets */
+	     SHEX
+	     ("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
 +	     SHEX
+	     ("C72E93A2C39ABCD90AB11CD3F15D59DA3C23C0F17C4E26C9C5890887"));
+  test_hash (&amp;nettle_sha3_224,	/* 62 octets */
+	     SHEX
+	     ("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
 +	     SHEX
+	     ("CCCC3B59F28C3FC462DC0A696150F5AEA62DA0ABA97C476BD0D866C1"));
+  test_hash (&amp;nettle_sha3_224,	/* 63 octets */
+	     SHEX
+	     ("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
 +	     SHEX
+	     ("28CFD0C6F0208D24AAA69E6C39F5257C13303E91C2D683A9AF29B973"));
+  test_hash (&amp;nettle_sha3_224,	/* 64 octets */
+	     SHEX
+	     ("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
 +	     SHEX
+	     ("C154607F986F9BF902D831293C8386D36B201EABA6F6FB0B678B4B81"));
+  test_hash (&amp;nettle_sha3_224,	/* 65 octets */
+	     SHEX
+	     ("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
 +	     SHEX
+	     ("95E87AC90F541AB90CBCF7FD7E0E0C152CEF78D5EE1830E9ED8A1ED7"));
+  test_hash (&amp;nettle_sha3_224,	/* 66 octets */
+	     SHEX
+	     ("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
 +	     SHEX
+	     ("35BD7D02541D6D4B10ACE6029A24C07A38FD563ABA227F0F776EA5E2"));
+  test_hash (&amp;nettle_sha3_224,	/* 67 octets */
+	     SHEX
+	     ("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
 +	     SHEX
+	     ("99DECB8CF1D474970B3CFA87FA462B75E3287B98B4BE4093429E22D6"));
+  test_hash (&amp;nettle_sha3_224,	/* 68 octets */
+	     SHEX
+	     ("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
 +	     SHEX
+	     ("8C20FD3D8E08235B01727A4DF44D86E71E824F14B0C2FE4E8DA7F1BB"));
+  test_hash (&amp;nettle_sha3_224,	/* 69 octets */
+	     SHEX
+	     ("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
 +	     SHEX
+	     ("E29E68439AECDE56F5297FB935DC7DBE63D61CE360A19629195BD8AA"));
+  test_hash (&amp;nettle_sha3_224,	/* 70 octets */
+	     SHEX
+	     ("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
 +	     SHEX
+	     ("5D2164DA84E7707CD1E789711A664AB2EBCF66EBA899A909A1D0CBEC"));
+  test_hash (&amp;nettle_sha3_224,	/* 71 octets */
+	     SHEX
+	     ("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
 +	     SHEX
+	     ("FA263B093EA3F96B52DB6251EA25A5254ADA5B54D476CB0794D38889"));
+  test_hash (&amp;nettle_sha3_224,	/* 72 octets */
+	     SHEX
+	     ("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
 +	     SHEX
+	     ("D803E320A9865EBF3555E8A3E3134768A2EE1B3E59FA15F35C2EC550"));
+  test_hash (&amp;nettle_sha3_224,	/* 73 octets */
+	     SHEX
+	     ("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
 +	     SHEX
+	     ("102925B63B3E9395F88124C3BFA777F29A5B41C13B62ADD7C271CD6E"));
+  test_hash (&amp;nettle_sha3_224,	/* 74 octets */
+	     SHEX
+	     ("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
 +	     SHEX
+	     ("6C4E83CD9258205F3C2BCF64149F4ACDCEE7742CB2D36038537171BD"));
+  test_hash (&amp;nettle_sha3_224,	/* 75 octets */
+	     SHEX
+	     ("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
 +	     SHEX
+	     ("C74C9EBB2EF9A9822A6228BD1186DCC4411BC59EC938DF27E54B0815"));
+  test_hash (&amp;nettle_sha3_224,	/* 76 octets */
+	     SHEX
+	     ("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
 +	     SHEX
+	     ("D23420F9985D66F097D43A0FB2434149D2B33F21B5BAD6CFC250E072"));
+  test_hash (&amp;nettle_sha3_224,	/* 77 octets */
+	     SHEX
+	     ("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BAFC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
 +	     SHEX
+	     ("102EDD2E946F33DD7AA553EA4CE4E659C7B240E1E28BC66200845D87"));
+  test_hash (&amp;nettle_sha3_224,	/* 78 octets */
+	     SHEX
+	     ("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4FCF \
4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"), +	 \
SHEX +	     ("7C8EB98B7338403C013D65C0B5BB4B5D2CBF539CB1109CF447FA6650"));
+  test_hash (&amp;nettle_sha3_224,	/* 79 octets */
+	     SHEX
+	     ("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C588435548066EA \
2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"), \
+	     SHEX +	     ("C7B07DE91EFCE42DAB78199EE2EB3014A494994236A12B3DE2330C25"));
+  test_hash (&amp;nettle_sha3_224,	/* 80 octets */
+	     SHEX
+	     ("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F037AA \
58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
 +	     SHEX
+	     ("2FCEF2594AE855DE4FC66DCCC517A659118B3A9F2E5FE638980ADBFB"));
+  test_hash (&amp;nettle_sha3_224,	/* 81 octets */
+	     SHEX
+	     ("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D06D \
A83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
 +	     SHEX
+	     ("D45873F0453CBF38156A1384E33E5C76588B7BFB48A709B3943D9186"));
+  test_hash (&amp;nettle_sha3_224,	/* 82 octets */
+	     SHEX
+	     ("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F279E0 \
733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
 +	     SHEX
+	     ("3543ADD5B7EDFC83AFE7C1F2D55140AEDB858304628109FD077B3860"));
+  test_hash (&amp;nettle_sha3_224,	/* 83 octets */
+	     SHEX
+	     ("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A0D1 \
FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
 +	     SHEX
+	     ("36784F114958D8B5B625DD89A4E3973A113E5D1610DFA55B4FB45AEC"));
+  test_hash (&amp;nettle_sha3_224,	/* 84 octets */
+	     SHEX
+	     ("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541274 \
82BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
 +	     SHEX
+	     ("4187FEAED4FBD3D505A96A8D60668A88172E4F7C8451A4A6802C5747"));
+  test_hash (&amp;nettle_sha3_224,	/* 85 octets */
+	     SHEX
+	     ("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F4B0 \
1F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
 +	     SHEX
+	     ("6E4766DB4E9D1102CEE6DFE0AE2221321B9C0FE707F0A7825D7557EC"));
+  test_hash (&amp;nettle_sha3_224,	/* 86 octets */
+	     SHEX
+	     ("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C7619A \
6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
 +	     SHEX
+	     ("E1FC972BFB294185F1980CA2938655FB583E812AD3D64FA5A4CF703E"));
+  test_hash (&amp;nettle_sha3_224,	/* 87 octets */
+	     SHEX
+	     ("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7FC5 \
C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
 +	     SHEX
+	     ("F6F28E3B65B684C9D9506061980046061390CCDE2458A20F9B086BE5"));
+  test_hash (&amp;nettle_sha3_224,	/* 88 octets */
+	     SHEX
+	     ("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E4CE \
FB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
 +	     SHEX
+	     ("F686D2B1386B02B08F6B02BD5D50206D5E138440CB0D93EBCC3B32A7"));
+  test_hash (&amp;nettle_sha3_224,	/* 89 octets */
+	     SHEX
+	     ("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD591DF \
1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
 +	     SHEX
+	     ("46483375D112FC2BE7F611BE4B98DFADA38892C43CEFA586726B48BB"));
+  test_hash (&amp;nettle_sha3_224,	/* 90 octets */
+	     SHEX
+	     ("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85DC95 \
286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
 +	     SHEX
+	     ("E1E9AD568AE5B0D9731400BA4FC7DF0321A04EA41393BA6979C7179C"));
+  test_hash (&amp;nettle_sha3_224,	/* 91 octets */
+	     SHEX
+	     ("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96813 \
544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
 +	     SHEX
+	     ("133F31D9FBC1B2A33F1C98BFE21E129E0716A69EE27408743FFF17AC"));
+  test_hash (&amp;nettle_sha3_224,	/* 92 octets */
+	     SHEX
+	     ("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD55E6 \
34AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
 +	     SHEX
+	     ("31328F04CA64E8521A36A8943C33CEB95BE1B9080F4533D6DA07606D"));
+  test_hash (&amp;nettle_sha3_224,	/* 93 octets */
+	     SHEX
+	     ("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE40603230EC \
A6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
 +	     SHEX
+	     ("ADD374B1D279469C08E7B27AE3FF1B04C3D0FB3EF6E59AA3AF86660B"));
+  test_hash (&amp;nettle_sha3_224,	/* 94 octets */
+	     SHEX
+	     ("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CDC58 \
5FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
 +	     SHEX
+	     ("FED7FDE894D92CC3BB68FCC396B5EB00C4156F04FC9CED99D12CFA5B"));
+  test_hash (&amp;nettle_sha3_224,	/* 95 octets */
+	     SHEX
+	     ("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409226 \
1AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
 +	     SHEX
+	     ("17FC0327DE474C78F538B4F3981674FF470AA42EF3B82C0CC34DE6DA"));
+  test_hash (&amp;nettle_sha3_224,	/* 96 octets */
+	     SHEX
+	     ("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE49D \
0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
 +	     SHEX
+	     ("88FEFBE8995E296A9DEE4DA2B414D5A7E134045639A6B176C2D736ED"));
+  test_hash (&amp;nettle_sha3_224,	/* 97 octets */
+	     SHEX
+	     ("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A6E6 \
D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
 +	     SHEX
+	     ("C002732F6F38AB83828921F5FCB4A8CE1FC561B0E9FA214C5FF02192"));
+  test_hash (&amp;nettle_sha3_224,	/* 98 octets */
+	     SHEX
+	     ("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28EE1 \
1495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
 +	     SHEX
+	     ("44E9002F9D97D98BB439AFC361F93BB959523E73136A2C65B2E2B066"));
+  test_hash (&amp;nettle_sha3_224,	/* 99 octets */
+	     SHEX
+	     ("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B32A \
0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
 +	     SHEX
+	     ("2BFF16CBA9E50762D2288EB780078462C086F4CBF59479F5387A0B27"));
+  test_hash (&amp;nettle_sha3_224,	/* 100 octets */
+	     SHEX
+	     ("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC21C8 \
807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
 +	     SHEX
+	     ("5EFDC3CAA22EE2C2EB632D4C6645CE3EC63960DFD69A04BBE01156C5"));
+  test_hash (&amp;nettle_sha3_224,	/* 101 octets */
+	     SHEX
+	     ("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666C0A \
72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
 +	     SHEX
+	     ("E8FB64A74387C9A3E1AC4ABC82D3591B6B349F2E5CDE6584D8D7C371"));
+  test_hash (&amp;nettle_sha3_224,	/* 102 octets */
+	     SHEX
+	     ("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE62F3 \
9A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
 +	     SHEX
+	     ("DB224BCCF5CA86DFBA3EA372E2269750B532409EA004E82D4B5835E8"));
+  test_hash (&amp;nettle_sha3_224,	/* 103 octets */
+	     SHEX
+	     ("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041308 \
598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
 +	     SHEX
+	     ("4E28867DCEF3A7B759CA24D8107BEB0CBF9DB0F10A3C410A9B4BA8C8"));
+  test_hash (&amp;nettle_sha3_224,	/* 104 octets */
+	     SHEX
+	     ("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189D54 \
9A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
 +	     SHEX
+	     ("5C0C2DF13A1FD6762B6E50FB3E080E649C3A7A8DDA415C42FB637136"));
+  test_hash (&amp;nettle_sha3_224,	/* 105 octets */
+	     SHEX
+	     ("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB243 \
F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
 +	     SHEX
+	     ("36F5630EC2829B0FBAD84F150932E46647EDCC454E06B23166661D60"));
+  test_hash (&amp;nettle_sha3_224,	/* 106 octets */
+	     SHEX
+	     ("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A213 \
0DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
 +	     SHEX
+	     ("DAC2594BCD357E63928A21E98348F27D0FA2C70EB07C7E8E93D6D84E"));
+  test_hash (&amp;nettle_sha3_224,	/* 107 octets */
+	     SHEX
+	     ("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C81BD \
CE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
 +	     SHEX
+	     ("24970DF3CF8C9E30DCBE661817FF74538AD43BC90B149ED7CAB7811B"));
+  test_hash (&amp;nettle_sha3_224,	/* 108 octets */
+	     SHEX
+	     ("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457BD2 \
5F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
 +	     SHEX
+	     ("AD9BF420D2B570EBE7923A76B253F156F3513712955BCBB9A87394DB"));
+  test_hash (&amp;nettle_sha3_224,	/* 109 octets */
+	     SHEX
+	     ("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2A09 \
002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
 +	     SHEX
+	     ("2F60928263FE1D5FA5136DA8DE1D2C3B60BD4B700A3E2C256E9536EF"));
+  test_hash (&amp;nettle_sha3_224,	/* 110 octets */
+	     SHEX
+	     ("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C2C4 \
0F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
 +	     SHEX
+	     ("BFB40F7E7F81F2FEC7644E08FBC99C768ADC6314B8CCD833332F1BF8"));
+  test_hash (&amp;nettle_sha3_224,	/* 111 octets */
+	     SHEX
+	     ("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E7554B \
D002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
 +	     SHEX
+	     ("190E9FDA8A7D78343FF24ADE9FEE69650C7631AD6329D17D4BD575DB"));
+  test_hash (&amp;nettle_sha3_224,	/* 112 octets */
+	     SHEX
+	     ("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C985AC \
56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
 +	     SHEX
+	     ("E26CD20B87083CB9F246D216E3DA51EF7C5519B483DB439D37256DBE"));
+  test_hash (&amp;nettle_sha3_224,	/* 113 octets */
+	     SHEX
+	     ("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972AED \
D3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
 +	     SHEX
+	     ("6CAF807F6ABC1A7721A5F209FC09FD00474B9E2A77EF7B57E1320271"));
+  test_hash (&amp;nettle_sha3_224,	/* 114 octets */
+	     SHEX
+	     ("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40198 \
B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
 +	     SHEX
+	     ("64CD5291A1A0807BA7C14103A0F46C636795F8F8D3A12E59E88D9C51"));
+  test_hash (&amp;nettle_sha3_224,	/* 115 octets */
+	     SHEX
+	     ("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD73D0 \
17CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
 +	     SHEX
+	     ("29491256A80BF1A9325348B5841EDC726FA8A53117268C47F74B5E49"));
+  test_hash (&amp;nettle_sha3_224,	/* 116 octets */
+	     SHEX
+	     ("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14A52 \
9B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
 +	     SHEX
+	     ("A523449B770A8DE3B39CD446046149FEAEE327D6D5B39929B9AAC915"));
+  test_hash (&amp;nettle_sha3_224,	/* 117 octets */
+	     SHEX
+	     ("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED1543E \
5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
 +	     SHEX
+	     ("ABB2FCE213CE164C94AB7A763C21F638A3BB8D72F802DEADACC023AE"));
+  test_hash (&amp;nettle_sha3_224,	/* 118 octets */
+	     SHEX
+	     ("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F325E \
894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
 +	     SHEX
+	     ("C40D969F7218D71B904C4E4EACEB0473BA0A2E7339649DA5DFEB8938"));
+  test_hash (&amp;nettle_sha3_224,	/* 119 octets */
+	     SHEX
+	     ("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC3BD \
F8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
 +	     SHEX
+	     ("2EB28FDF458D4FECB5B441D910B576F630E666BBF30AAC90AB64425B"));
+  test_hash (&amp;nettle_sha3_224,	/* 120 octets */
+	     SHEX
+	     ("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095BE4B \
A5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B0158F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
 +	     SHEX
+	     ("A3387B2FA23A13BFAE77895F1F93935A0710EE3A027FF0D6399D8ECC"));
+  test_hash (&amp;nettle_sha3_224,	/* 121 octets */
+	     SHEX
+	     ("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C715C \
1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C216 \
20B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"), +	 \
SHEX +	     ("75755F46C2FC86BD4AAE75919C6CA5B1A7375E466CA3170F70EEE490"));
+  test_hash (&amp;nettle_sha3_224,	/* 122 octets */
+	     SHEX
+	     ("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633ABD \
1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026CEE7 \
7BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"), \
+	     SHEX +	     ("7184C69EE1C43FD564102CD68EF898D5D0D8264B9B0D044691BC18AF"));
+  test_hash (&amp;nettle_sha3_224,	/* 123 octets */
+	     SHEX
+	     ("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1857 \
815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB4C2 \
66272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
 +	     SHEX
+	     ("F50CF78FF46513C905399CC2510681A90CE089FCED40FBC9CF218CA4"));
+  test_hash (&amp;nettle_sha3_224,	/* 124 octets */
+	     SHEX
+	     ("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753955 \
51E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095B73 \
DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
 +	     SHEX
+	     ("F2AABE18D7B4DD8E4DC0AC8DCF4E9019C7C9AF33D4B952DA41219FE5"));
+  test_hash (&amp;nettle_sha3_224,	/* 125 octets */
+	     SHEX
+	     ("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C00FB \
BED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D0282F \
ED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
 +	     SHEX
+	     ("AC5D00D177E71D7B9A97270E6200E4D3D07851EB2E58B12BE0BEED95"));
+  test_hash (&amp;nettle_sha3_224,	/* 126 octets */
+	     SHEX
+	     ("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031485 \
5F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7196 \
7A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
 +	     SHEX
+	     ("CB7979B4C6C2826CDEF7E1AADA85F8C4546DD59D29FC0AEA444F8077"));
+  test_hash (&amp;nettle_sha3_224,	/* 127 octets */
+	     SHEX
+	     ("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B16D \
27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE765D \
E2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
 +	     SHEX
+	     ("F9D8CCF6684693C40C81EBBD006C49984FBAF3A2B2E905ABE60765DD"));
+  test_hash (&amp;nettle_sha3_224,	/* 128 octets */
+	     SHEX
+	     ("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F369 \
EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF0621C \
D54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
 +	     SHEX
+	     ("ED1F6387A7BE090277B65A5FCD7040C7BE0EEAF0FD7F14968097873B"));
+  test_hash (&amp;nettle_sha3_224,	/* 129 octets */
+	     SHEX
+	     ("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106594 \
893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B5DB \
812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
 +	     SHEX
+	     ("0A27CE6973CB22A8B10057A8E7A654058B71E6D8C69C653415FF0C81"));
+  test_hash (&amp;nettle_sha3_224,	/* 130 octets */
+	     SHEX
+	     ("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA97879175AA \
BA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5744 \
7EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
 +	     SHEX
+	     ("BE3BE49980F43FB6598BE921D7D8FDA1F397F605D9708C5D125C4E9F"));
+  test_hash (&amp;nettle_sha3_224,	/* 131 octets */
+	     SHEX
+	     ("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E477 \
743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B192 \
1881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
 +	     SHEX
+	     ("932137BF2CD32DDFD3BA80C525268730B6F7458601B5296AEB325183"));
+  test_hash (&amp;nettle_sha3_224,	/* 132 octets */
+	     SHEX
+	     ("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C348C2 \
B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C2A0 \
EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
 +	     SHEX
+	     ("796698CE24EFCDA8214D161138F3C7DA6D7615E4CF1DAC63B69941F9"));
+  test_hash (&amp;nettle_sha3_224,	/* 133 octets */
+	     SHEX
+	     ("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3BF88 \
E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3FE5 \
07BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
 +	     SHEX
+	     ("B216930E158D65FB1FF424F9EAB6CD28996231EF5EE1D65DBE29D370"));
+  test_hash (&amp;nettle_sha3_224,	/* 134 octets */
+	     SHEX
+	     ("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079B79 \
A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782917 \
417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
 +	     SHEX
+	     ("AF6C676A62288B2D25A862F8866B262A74E3D2A0D414B966CE601E14"));
+  test_hash (&amp;nettle_sha3_224,	/* 135 octets */
+	     SHEX
+	     ("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF4067C \
3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55EA7 \
96FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
 +	     SHEX
+	     ("418C83EB01881B4F38544665201DD05C939CA047D31834F637342342"));
+  test_hash (&amp;nettle_sha3_224,	/* 136 octets */
+	     SHEX
+	     ("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880EF5 \
0700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768DD4 \
17F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
 +	     SHEX
+	     ("64D78817714FE05272D3805E6E19056B1649036CDCD5094FD1CC890A"));
+  test_hash (&amp;nettle_sha3_224,	/* 137 octets */
+	     SHEX
+	     ("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2CD2 \
BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47BB67 \
AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
 +	     SHEX
+	     ("2C4E7C537D0E2AF2261A669BC24BD0DF16D2C72A7F98D7A5EF6A8150"));
+  test_hash (&amp;nettle_sha3_224,	/* 138 octets */
+	     SHEX
+	     ("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882615 \
D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706330 \
1B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
 +	     SHEX
+	     ("DF1FCB80AB380CA33BDB61F96ADAB334937E190F03C1B78B219E50F8"));
+  test_hash (&amp;nettle_sha3_224,	/* 139 octets */
+	     SHEX
+	     ("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0992 \
76296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777FA5F \
EAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
 +	     SHEX
+	     ("0DD77ADA384CAB6A7ACED19CFC8048C2566D4303E2010C98D16A0516"));
+  test_hash (&amp;nettle_sha3_224,	/* 140 octets */
+	     SHEX
+	     ("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC150773B6 \
FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA035 \
594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
 +	     SHEX
+	     ("B256D0D6B6D6A72E113D105AD9601C91933D53B20A30D8E2CF33F96D"));
+  test_hash (&amp;nettle_sha3_224,	/* 141 octets */
+	     SHEX
+	     ("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29688 \
0A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3C6F \
405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
 +	     SHEX
+	     ("B95F72512546E4AF685931246717BC482BFE922789A26EEF01BDE82D"));
+  test_hash (&amp;nettle_sha3_224,	/* 142 octets */
+	     SHEX
+	     ("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4064 \
DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1CE08 \
5FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
 +	     SHEX
+	     ("628238A9532727CC83F8FDCED11D138A17EEE4822C5D3549157D6D5E"));
+  test_hash (&amp;nettle_sha3_224,	/* 143 octets */
+	     SHEX
+	     ("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA3742F \
F3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6A1E \
ED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
 +	     SHEX
+	     ("AB0FD308590574D6F6130232D9FAFA9FFCFEA78579A6A8F67C590420"));
+  test_hash (&amp;nettle_sha3_224,	/* 144 octets */
+	     SHEX
+	     ("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579DB2 \
F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B39BD \
90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
 +	     SHEX
+	     ("D5134200DC98F4CA480CD24D24497737252B55977AE5A869BA27089D"));
+  test_hash (&amp;nettle_sha3_224,	/* 145 octets */
+	     SHEX
+	     ("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9035 \
321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B904821F3 \
2B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
 +	     SHEX
+	     ("494CBC9B649E48EC5AD7364AEB9C8EDF4A4F400789EF203F7B818A44"));
+  test_hash (&amp;nettle_sha3_224,	/* 146 octets */
+	     SHEX
+	     ("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F21A \
0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7DA2 \
B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
 +	     SHEX
+	     ("7FF8A28AB12074102AEF3EFB8904284B617237322A2BF701C9FCFEFC"));
+  test_hash (&amp;nettle_sha3_224,	/* 147 octets */
+	     SHEX
+	     ("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3404 \
F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895AAA1 \
6ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
 +	     SHEX
+	     ("50CDBEAB4BBAA0861F3E364AF520F9D8B54E79E3871ABCA7BBB2BAE5"));
+  test_hash (&amp;nettle_sha3_224,	/* 148 octets */
+	     SHEX
+	     ("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D585E9 \
578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBEE4B \
BB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
 +	     SHEX
+	     ("29B6B523C82F499078C73630BA38227BBD08EF1A2D67B425C058DEF5"));
+  test_hash (&amp;nettle_sha3_224,	/* 149 octets */
+	     SHEX
+	     ("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F296 \
EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA992910EF \
4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
 +	     SHEX
+	     ("93CE0C8D4355300D4E63D6599129DEA7420E5B609DBB35BE432B12B5"));
+  test_hash (&amp;nettle_sha3_224,	/* 150 octets */
+	     SHEX
+	     ("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3B26 \
7B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A57B \
2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
 +	     SHEX
+	     ("D02896D957B599869F2B2A4992A49EEF7AB1308F456C78C809BDAC88"));
+  test_hash (&amp;nettle_sha3_224,	/* 151 octets */
+	     SHEX
+	     ("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97878 \
8C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9A93 \
BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
 +	     SHEX
+	     ("181E2301F629A569271BB740D32B1D3BD25ACB179E9AEBEF98009ED4"));
+  test_hash (&amp;nettle_sha3_224,	/* 152 octets */
+	     SHEX
+	     ("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29A0D \
C0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D503 \
09E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
 +	     SHEX
+	     ("5CD017B269A6366C789D9CECAEF3EE9C3575181A084266D78A028DB7"));
+  test_hash (&amp;nettle_sha3_224,	/* 153 octets */
+	     SHEX
+	     ("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C250 \
034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC93793D \
D6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
 +	     SHEX
+	     ("AC280A211C98A07F6FCBB719F250E3E5A6BA2C93A833976C9F3147EB"));
+  test_hash (&amp;nettle_sha3_224,	/* 154 octets */
+	     SHEX
+	     ("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933906 \
FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433F7D \
350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
 +	     SHEX
+	     ("C284C9308A28B6D29CCAA7853F8C41BADCDDBC1AA4E99481A6EE2F4D"));
+  test_hash (&amp;nettle_sha3_224,	/* 155 octets */
+	     SHEX
+	     ("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286F8F \
17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0F55 \
231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
 +	     SHEX
+	     ("3D9A979B34D45569E1C98D09DC62D03616C0251C41A8B90138750F1E"));
+  test_hash (&amp;nettle_sha3_224,	/* 156 octets */
+	     SHEX
+	     ("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E91F \
4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A80148550307310950D \
034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
 +	     SHEX
+	     ("8DDC9F1E0F94C1247A67D6119A9169762C6C7F1EC7F611D61353AB30"));
+  test_hash (&amp;nettle_sha3_224,	/* 157 octets */
+	     SHEX
+	     ("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE70457A \
9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BED9D \
E9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
 +	     SHEX
+	     ("46EDA2622D49B9148B40B6014C75A4086EB9DD4740F0DD591ACA53B2"));
+  test_hash (&amp;nettle_sha3_224,	/* 158 octets */
+	     SHEX
+	     ("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576B1C \
2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC4A4 \
71A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
 +	     SHEX
+	     ("57CFA137968C39EAA12533044B8265BB903EC16C8D17B6CF1F106C57"));
+  test_hash (&amp;nettle_sha3_224,	/* 159 octets */
+	     SHEX
+	     ("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197B83 \
9957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1869 \
1A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
 +	     SHEX
+	     ("8730C219E19D9D37CB7A63A4DDD55E84DCB0236EF7C8828B2A23C9B9"));
+  test_hash (&amp;nettle_sha3_224,	/* 160 octets */
+	     SHEX
+	     ("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B264E9 \
20394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8943 \
10A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
 +	     SHEX
+	     ("61C01FB4A010F319D193CB6D36063751950A1A8F93539BEA32F84EA1"));
+  test_hash (&amp;nettle_sha3_224,	/* 161 octets */
+	     SHEX
+	     ("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67314 \
F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBBB81 \
53DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
 +	     SHEX
+	     ("1459044DF9C26F5E240F6A6B9380734CAD84B6592FC9693DDD9F974E"));
+  test_hash (&amp;nettle_sha3_224,	/* 162 octets */
+	     SHEX
+	     ("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9A0F \
2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246CE06 \
23A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
 +	     SHEX
+	     ("EB5CC00173239851F3960EDAC336005109189DFC04B29CA4CDDE5BC1"));
+  test_hash (&amp;nettle_sha3_224,	/* 163 octets */
+	     SHEX
+	     ("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8E1B \
288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E37D \
89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA69107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
 +	     SHEX
+	     ("A640D4841390F47DC47D4BFCF130FCF51C5F2D491F91C13374CE5965"));
+  test_hash (&amp;nettle_sha3_224,	/* 164 octets */
+	     SHEX
+	     ("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0B12 \
FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18F40 \
8C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383FD19 \
00B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"), +	 \
SHEX +	     ("85BB3ED98C4808D8F67C722C9119C54E6543B29E57BD4FB5CBC878C7"));
+  test_hash (&amp;nettle_sha3_224,	/* 165 octets */
+	     SHEX
+	     ("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D59896E3 \
A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB2D6 \
4496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB699 \
7BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"), \
+	     SHEX +	     ("50B7D0ACB93211E0FC935F970BC43A00BE829D6B3C137D4A7E3B2BC1"));
+  test_hash (&amp;nettle_sha3_224,	/* 166 octets */
+	     SHEX
+	     ("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4A43 \
26783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A805B6 \
A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5367 \
926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
 +	     SHEX
+	     ("7CDC1782B39FC0EEB1F874D97C88051CF10508E0875FA173AC41CC8E"));
+  test_hash (&amp;nettle_sha3_224,	/* 167 octets */
+	     SHEX
+	     ("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017BBC \
F26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78F85 \
4FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232314 \
EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
 +	     SHEX
+	     ("EE5D508A4E75900193E99A04B8D838A18DEDFCC431E7AF3182A47DD6"));
+  test_hash (&amp;nettle_sha3_224,	/* 168 octets */
+	     SHEX
+	     ("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929BD9 \
689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BEA6F \
469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E884 \
A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
 +	     SHEX
+	     ("5942BA8B58A355F2AEF07E29F8F9971301E877FA32D7025DF552B1EB"));
+  test_hash (&amp;nettle_sha3_224,	/* 169 octets */
+	     SHEX
+	     ("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73243 \
360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BDBBF \
D85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0424 \
B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
 +	     SHEX
+	     ("29240A9E973888B98A3A836933855D41D8ABB6C3806A626C3DF18F6C"));
+  test_hash (&amp;nettle_sha3_224,	/* 170 octets */
+	     SHEX
+	     ("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D0786E \
99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD941DC \
B82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A462B8 \
3B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
 +	     SHEX
+	     ("9AF178B1DD3CEFC96227A289175BB61D9F6B0B352D7804F5E07EA45D"));
+  test_hash (&amp;nettle_sha3_224,	/* 171 octets */
+	     SHEX
+	     ("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA7536AA \
E597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C3292E \
96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C43D \
6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
 +	     SHEX
+	     ("F543B4D423EAAC86338BB6D8C6181AD6DC0A25733953CED7EB8377F3"));
+  test_hash (&amp;nettle_sha3_224,	/* 172 octets */
+	     SHEX
+	     ("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F80B \
6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C7BB \
759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A1C2 \
441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
 +	     SHEX
+	     ("77B4079EEE9D9E3FDA051EE0CA430B4DF011D056612C1AF446A187C2"));
+  test_hash (&amp;nettle_sha3_224,	/* 173 octets */
+	     SHEX
+	     ("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712154 \
8373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4CAF \
B37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255B4D \
231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
 +	     SHEX
+	     ("987D30120C9AA4964650A6A730E99C86F7FBDDB4EA8D6B4815EE4EBF"));
+  test_hash (&amp;nettle_sha3_224,	/* 174 octets */
+	     SHEX
+	     ("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02D19 \
BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC839EA \
9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CAC1B \
ACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
 +	     SHEX
+	     ("46193359397BC3EACD69BFF410203583382DE93ECC4D80DCFB4FC51D"));
+  test_hash (&amp;nettle_sha3_224,	/* 175 octets */
+	     SHEX
+	     ("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3510 \
E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB3B1 \
17EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22F1B \
7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
 +	     SHEX
+	     ("0BC29107C7E25D44F8CE83A415B1DE5DF38A6719769606762B7192C2"));
+  test_hash (&amp;nettle_sha3_224,	/* 176 octets */
+	     SHEX
+	     ("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310E5C \
0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E9723E \
FD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D3840C \
DFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
 +	     SHEX
+	     ("B485644C32283B280179F7C9714350F0B3ACFD7C45A247BF3B6CDB07"));
+  test_hash (&amp;nettle_sha3_224,	/* 177 octets */
+	     SHEX
+	     ("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88453 \
1D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F75379E \
9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C16E \
69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
 +	     SHEX
+	     ("F384542499EFD23381DEBCD9124C539C40BFA70E517280F56A0920E1"));
+  test_hash (&amp;nettle_sha3_224,	/* 178 octets */
+	     SHEX
+	     ("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F68E \
6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820ACE2 \
62D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E255337DA \
A06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
 +	     SHEX
+	     ("D12E3884BC8CF9175D1778E8A3AAA119E4A897738F8D81B1278BC448"));
+  test_hash (&amp;nettle_sha3_224,	/* 179 octets */
+	     SHEX
+	     ("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54261 \
9DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AADD7C \
E842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877E50 \
FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
 +	     SHEX
+	     ("D8A348264D48045D4482F3FE002C1A1F36D4DF0D5E47FAC5125C7947"));
+  test_hash (&amp;nettle_sha3_224,	/* 180 octets */
+	     SHEX
+	     ("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D50A \
A83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E688 \
094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D1BC \
AB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
 +	     SHEX
+	     ("6865464C6A230B4BF64BA33BF97459D1D22DAFB19E08F4B7DACE02FF"));
+  test_hash (&amp;nettle_sha3_224,	/* 181 octets */
+	     SHEX
+	     ("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D9663A \
CCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DBE7F \
B74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC554D8 \
E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
 +	     SHEX
+	     ("19D33CD354A13AB2A44044154BD865F117EF8A887FBD0570A8A4CA80"));
+  test_hash (&amp;nettle_sha3_224,	/* 182 octets */
+	     SHEX
+	     ("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F823 \
10356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D9F0 \
1AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78F68 \
10EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
 +	     SHEX
+	     ("E438AE4153463B333AE4FE57BF131505C8C04A534A39A20574155E49"));
+  test_hash (&amp;nettle_sha3_224,	/* 183 octets */
+	     SHEX
+	     ("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0BD59 \
31839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55A91 \
16E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB1B9 \
327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
 +	     SHEX
+	     ("454796C7219C6F7E88508DFC13668B81748211BD016D84B59293B445"));
+  test_hash (&amp;nettle_sha3_224,	/* 184 octets */
+	     SHEX
+	     ("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636C17 \
27EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B99880C \
87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA116E5 \
F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
 +	     SHEX
+	     ("CE158AED6ED3C9D4432E2422AF8D255AB1F3898F6F5B5C5A1478552C"));
+  test_hash (&amp;nettle_sha3_224,	/* 185 octets */
+	     SHEX
+	     ("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7635 \
EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3BE9 \
377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035CD21 \
85BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
 +	     SHEX
+	     ("A0A21D95E640F13B25652484E244BE1B373E9B0609B685EFCE48107A"));
+  test_hash (&amp;nettle_sha3_224,	/* 186 octets */
+	     SHEX
+	     ("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC45868AE \
9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E8B4 \
ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E745 \
9FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
 +	     SHEX
+	     ("CA8CB1359F0B05E2FF9414CCE0DE6D2CB4D05B08354C2119A87342CA"));
+  test_hash (&amp;nettle_sha3_224,	/* 187 octets */
+	     SHEX
+	     ("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB95D \
B2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F572B \
E5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC36F \
59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
 +	     SHEX
+	     ("0DDDD152CF063F0F505B518EB8DB755704F45C9735780EC3A898A923"));
+  test_hash (&amp;nettle_sha3_224,	/* 188 octets */
+	     SHEX
+	     ("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36D44 \
C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A037 \
FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3CC0 \
3E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
 +	     SHEX
+	     ("57397BB1F84711641E94F413F5D73556B96BA5CFE15F709528626D07"));
+  test_hash (&amp;nettle_sha3_224,	/* 189 octets */
+	     SHEX
+	     ("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29F79 \
031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE062CD \
D71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727083 \
513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
 +	     SHEX
+	     ("68F6AC4289FD5214263130830FDA4DA601B88B1F8533EAC07A0338D9"));
+  test_hash (&amp;nettle_sha3_224,	/* 190 octets */
+	     SHEX
+	     ("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B1B7 \
F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02E67 \
A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467998 \
BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
 +	     SHEX
+	     ("F145C45212392894E7F1C4E52728470F8A2D961514869990EFBE8232"));
+  test_hash (&amp;nettle_sha3_224,	/* 191 octets */
+	     SHEX
+	     ("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306BE8 \
4536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B922 \
964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E038F \
6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
 +	     SHEX
+	     ("38CE7100E92EE4B65CC831915A06CFC2101990CB68E1004F7E9017D4"));
+  test_hash (&amp;nettle_sha3_224,	/* 192 octets */
+	     SHEX
+	     ("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D520EE \
F3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2DA2 \
B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C7941FC \
C82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
 +	     SHEX
+	     ("BD63CA84DAC8BC586D0F0BE352DBBBA1F4CB430DEAA8119B8DA13C06"));
+  test_hash (&amp;nettle_sha3_224,	/* 193 octets */
+	     SHEX
+	     ("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478313 \
C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA23EC \
9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDBB48 \
EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
 +	     SHEX
+	     ("7EE4EAEA6127C68EFCE66991B8F0851FE072DF3B1E0B5D07E3A4BE06"));
+  test_hash (&amp;nettle_sha3_224,	/* 194 octets */
+	     SHEX
+	     ("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840EFE8 \
D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8A79 \
5AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036E24 \
E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
 +	     SHEX
+	     ("7F3EE578B0410687EAF536F9EC7D654B75F504C104B78793C4CF90D5"));
+  test_hash (&amp;nettle_sha3_224,	/* 195 octets */
+	     SHEX
+	     ("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC3553016608E \
F2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E76F \
8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01C9F \
0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
 +	     SHEX
+	     ("C9C26396E560CD1E6824D9E56E179FCC8AAC4C0D932F7632BA594D4C"));
+  test_hash (&amp;nettle_sha3_224,	/* 196 octets */
+	     SHEX
+	     ("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF801 \
E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539E6A \
8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2762 \
2FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
 +	     SHEX
+	     ("EF30652E3C6EA4EC214472BF96E5F30DCA1D31A78EB422734615EAF1"));
+  test_hash (&amp;nettle_sha3_224,	/* 197 octets */
+	     SHEX
+	     ("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61283 \
34F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6ACC \
86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22AA5 \
03C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
 +	     SHEX
+	     ("5A964BF38EB347684220A3E83EB1EFCB641C8F911CB068A774B25B8C"));
+  test_hash (&amp;nettle_sha3_224,	/* 198 octets */
+	     SHEX
+	     ("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156C0B \
27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F939262D4 \
043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245EE36 \
1E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
 +	     SHEX
+	     ("07413665EDCB8A35021874984910B498CF74823050640243AE7C84CD"));
+  test_hash (&amp;nettle_sha3_224,	/* 199 octets */
+	     SHEX
+	     ("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491B48 \
529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF86A \
4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783453 \
5929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
 +	     SHEX
+	     ("FCC9EAD160832F5F0FAFED6381AFD57FE1335FBFB05B7FB1F0075D37"));
+  test_hash (&amp;nettle_sha3_224,	/* 200 octets */
+	     SHEX
+	     ("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222B64 \
CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3EAEA \
BE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC23A7 \
9A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
 +	     SHEX
+	     ("EC5C6DB60B0834FB2E0E7106AEEAFB9E614BE093C847018214D8A5DB"));
+  test_hash (&amp;nettle_sha3_224,	/* 201 octets */
+	     SHEX
+	     ("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7A38 \
393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB32FD \
6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653F3C \
9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
 +	     SHEX
+	     ("0D5F6DE16B7CBBA49C28654F2AE98163257E7B6B500A3801EEF0733F"));
+  test_hash (&amp;nettle_sha3_224,	/* 202 octets */
+	     SHEX
+	     ("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF84D5 \
8EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D01C \
4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384B3D \
A953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
 +	     SHEX
+	     ("7B7E1FC4D3833ED87FD166F909F5C2566DC0E95B17AC834F1E9E3DAD"));
+  test_hash (&amp;nettle_sha3_224,	/* 203 octets */
+	     SHEX
+	     ("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295381 \
354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487AF49 \
CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6B72 \
24EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
 +	     SHEX
+	     ("C6AC9D5464855E5C2F83F2A56F9A992137DA47EC05C541295F8C43E7"));
+  test_hash (&amp;nettle_sha3_224,	/* 204 octets */
+	     SHEX
+	     ("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9CB3 \
C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03681 \
9C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2E6D \
AB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
 +	     SHEX
+	     ("4EE2F93C18974D978DD3A1CBF8B1DAC473807067B8807D026182B901"));
+  test_hash (&amp;nettle_sha3_224,	/* 205 octets */
+	     SHEX
+	     ("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD469 \
D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7AA9C \
E013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFFB61 \
8E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
 +	     SHEX
+	     ("D64AEE17ED8E2B85E6B097DB49554D356F032A34A15B7E844EC8D889"));
+  test_hash (&amp;nettle_sha3_224,	/* 206 octets */
+	     SHEX
+	     ("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82316 \
CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033AE9 \
AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF076028C \
5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
 +	     SHEX
+	     ("1BDDC92BE89A672C1BD956B450B9D7B47B4BB0BC58AC51F15F7E054D"));
+  test_hash (&amp;nettle_sha3_224,	/* 207 octets */
+	     SHEX
+	     ("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD0938DD \
E5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D743 \
F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1AD26 \
0AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C670 \
1290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"), +	 \
SHEX +	     ("0C8AC240170C6546DEBF4BFB5B38F8F30EA5DC6EF86C166E8E136D6B"));
+  test_hash (&amp;nettle_sha3_224,	/* 208 octets */
+	     SHEX
+	     ("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928D7A \
D377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC41E0 \
D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0433 \
EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59D28 \
7F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"), \
+	     SHEX +	     ("2FD9FDFD244B0A7342F886B87B3DDDCE54C8870FB26A71A8F6520231"));
+  test_hash (&amp;nettle_sha3_224,	/* 209 octets */
+	     SHEX
+	     ("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F97DF \
3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438DB1B \
B361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587AA4 \
6AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623047 \
C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
 +	     SHEX
+	     ("1B6BE19D72199BF75FD4075E54975AFA0433B9BF515BD300CE543D41"));
+  test_hash (&amp;nettle_sha3_224,	/* 210 octets */
+	     SHEX
+	     ("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F808 \
DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255DA9 \
843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01ACB8F \
0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F5920E \
6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
 +	     SHEX
+	     ("A46B89B64B0C7930DD45F5B2582FD79C7AD90A58C94C52F9BFA55CFC"));
+  test_hash (&amp;nettle_sha3_224,	/* 211 octets */
+	     SHEX
+	     ("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBFD4A \
43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8E66 \
AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F6252C0 \
407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA35C \
6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
 +	     SHEX
+	     ("21F0D8855387241D71A712E5F5682C156B9FD2AA6284294718853F0A"));
+  test_hash (&amp;nettle_sha3_224,	/* 212 octets */
+	     SHEX
+	     ("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCDDB7 \
08FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A1F7 \
6B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9B2D \
8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24AF8C \
8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
 +	     SHEX
+	     ("82EE85541D7A5B2A2B290003C3EE46574D58A7DDD54FBC210F8FEA57"));
+  test_hash (&amp;nettle_sha3_224,	/* 213 octets */
+	     SHEX
+	     ("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0819 \
A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A1566FC \
7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431B4C \
40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2878 \
A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
 +	     SHEX
+	     ("278DD8A3F3208191CFF658B8D6DB35E133A16E47AA375EDB92C6A737"));
+  test_hash (&amp;nettle_sha3_224,	/* 214 octets */
+	     SHEX
+	     ("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2A18 \
6964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C252 \
7B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0C37 \
92F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346D43 \
CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
 +	     SHEX
+	     ("B50527711C047DEF70B17CF20F970BED79C1C1B95275C2784C3903DE"));
+  test_hash (&amp;nettle_sha3_224,	/* 215 octets */
+	     SHEX
+	     ("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9201 \
7F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299CAA \
792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA85B \
DDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2B63 \
ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
 +	     SHEX
+	     ("F77CB5275212C92FA0DAD921B65F50814822E3D6D584C89528990F02"));
+  test_hash (&amp;nettle_sha3_224,	/* 216 octets */
+	     SHEX
+	     ("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81C3C \
A9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB558 \
E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC5A2 \
7D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66DEE \
CA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
 +	     SHEX
+	     ("76CA9E685DFADC67576D44E8C1A82E8CF7E92FB0A81FE49E21108E09"));
+  test_hash (&amp;nettle_sha3_224,	/* 217 octets */
+	     SHEX
+	     ("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC30FC \
10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377D16 \
5B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6BA4 \
2F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42070 \
33B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
 +	     SHEX
+	     ("ABD313BC70B7FAB0EBC167D739B54C97389E752EE1A313B12673F51C"));
+  test_hash (&amp;nettle_sha3_224,	/* 218 octets */
+	     SHEX
+	     ("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5D7B \
E5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7D89 \
E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C550008F \
AAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084618 \
04BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
 +	     SHEX
+	     ("F79F6356328C580B811FEA81C5ED90A303CAF34A09BEB143BE450D42"));
+  test_hash (&amp;nettle_sha3_224,	/* 219 octets */
+	     SHEX
+	     ("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296F98 \
379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998704 \
D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368931 \
E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4102 \
A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
 +	     SHEX
+	     ("299D62F8DF5EADE6871883B033B830A9952A74B12F3D55AF798C6997"));
+  test_hash (&amp;nettle_sha3_224,	/* 220 octets */
+	     SHEX
+	     ("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F289F \
BF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1DC37 \
8F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F2CA \
082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B6867D \
74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
 +	     SHEX
+	     ("82BA2B8D65E14FDAC51F609F888881DB8070A0B70D7892C009A1AD28"));
+  test_hash (&amp;nettle_sha3_224,	/* 221 octets */
+	     SHEX
+	     ("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E812C3 \
9F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8D22 \
C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568834 \
13D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68454 \
779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
 +	     SHEX
+	     ("F8E5218DB087D38B1C773247FC22704C1FBDB20B1500E26AFA0B7572"));
+  test_hash (&amp;nettle_sha3_224,	/* 222 octets */
+	     SHEX
+	     ("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E4DA \
AE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D375077F \
2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB1CB \
6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF811A1 \
3F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
 +	     SHEX
+	     ("FA602F09B28F8679771E9C3966032B80FA2F0F33E84F3ED69BE7AE9C"));
+  test_hash (&amp;nettle_sha3_224,	/* 223 octets */
+	     SHEX
+	     ("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FDD28 \
C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27A65 \
84C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026EA5 \
42076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AEF5B \
F0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
 +	     SHEX
+	     ("C8D7568889DD6FCBC3B8874ED79051875D3CE29102DF0C5DAC8AEB8A"));
+  test_hash (&amp;nettle_sha3_224,	/* 224 octets */
+	     SHEX
+	     ("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF45082C \
4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F606519AE \
A0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05BFB \
1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA09D2 \
1E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
 +	     SHEX
+	     ("D83B06D509D332164087C0C3FA50B2264CB27F66D746B0470166CBC2"));
+  test_hash (&amp;nettle_sha3_224,	/* 225 octets */
+	     SHEX
+	     ("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73975 \
809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB4D1 \
BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE3FF \
6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171D16 \
51001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
 +	     SHEX
+	     ("386147B0CF2365346E9846D3F3A7DCEEB6E3665BA7D1593C08B2B582"));
+  test_hash (&amp;nettle_sha3_224,	/* 226 octets */
+	     SHEX
+	     ("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF2111B \
97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4957 \
A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198B7E \
838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B3DF \
A269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
 +	     SHEX
+	     ("A69C0C18A712408D8FA2389ACABC3BF6F6412F69783E9F37960D0B56"));
+  test_hash (&amp;nettle_sha3_224,	/* 227 octets */
+	     SHEX
+	     ("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23697 \
ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACDA89 \
7944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBCE60 \
827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE61179FE \
84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
 +	     SHEX
+	     ("0699FD35416D83791DC8E656F22718B09DA9E3DF6E7F37A250E22DCD"));
+  test_hash (&amp;nettle_sha3_224,	/* 228 octets */
+	     SHEX
+	     ("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F152 \
FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE62A \
ADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E42D1 \
68B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE9011504A4 \
9E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
 +	     SHEX
+	     ("BF6A3598A15E28B776229F4D124D403FAD9D0FBC2B7668C95D8B5046"));
+  test_hash (&amp;nettle_sha3_224,	/* 229 octets */
+	     SHEX
+	     ("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06352 \
84D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF520796841E \
58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E193856661376C8 \
1CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C07D \
C819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
 +	     SHEX
+	     ("56F8E9F69A399E528996C463D65F20DB41406533C7DF2BA1AFA2494A"));
+  test_hash (&amp;nettle_sha3_224,	/* 230 octets */
+	     SHEX
+	     ("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3DAC9 \
F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47971 \
B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70D94 \
23798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7FEB \
AA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
 +	     SHEX
+	     ("9904D57DEDB935427F235A0009612235F14E9426B218E028F87B3C0C"));
+  test_hash (&amp;nettle_sha3_224,	/* 231 octets */
+	     SHEX
+	     ("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645CA1 \
4E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8BD0 \
B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C0BA \
854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B18F \
E34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
 +	     SHEX
+	     ("FF7013679AB2BE65AEDD09739F56F8DD0072738B86E71A2470476C8C"));
+  test_hash (&amp;nettle_sha3_224,	/* 232 octets */
+	     SHEX
+	     ("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE875DA \
0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94311 \
051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B349 \
939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB4444B \
85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
 +	     SHEX
+	     ("9DFB6A854A33914EAE1596DCD2BE363A96E7E088BE520F60E5A65C7F"));
+  test_hash (&amp;nettle_sha3_224,	/* 233 octets */
+	     SHEX
+	     ("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBBD58 \
01AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422900 \
5F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A9426E \
CEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB7448F \
50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
 +	     SHEX
+	     ("C27E80C373B216703D3D9E67223CFC5497C3E74455D49B049AE3F5F4"));
+  test_hash (&amp;nettle_sha3_224,	/* 234 octets */
+	     SHEX
+	     ("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FAC4F \
DF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425FF7F \
1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6FBF5 \
534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526DC64 \
3872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
 +	     SHEX
+	     ("3A189630F53C567B1C1825794D50DEF901A00E7F3728ECF2BBE00D90"));
+  test_hash (&amp;nettle_sha3_224,	/* 235 octets */
+	     SHEX
+	     ("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F54ED \
E927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747BBB5 \
3652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0EDE83 \
8AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F02B \
64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
 +	     SHEX
+	     ("2585BD8D9158D6952BEE95B004F5FED70FAF061B68AB2D6A40469BE7"));
+  test_hash (&amp;nettle_sha3_224,	/* 236 octets */
+	     SHEX
+	     ("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51F15 \
34BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF1430A \
9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19AFA \
65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB93D \
2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
 +	     SHEX
+	     ("7E64F3C5895D0586CC5B543B27DE1B66A935171E2E7F3CA48DD3718E"));
+  test_hash (&amp;nettle_sha3_224,	/* 237 octets */
+	     SHEX
+	     ("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267512 \
CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE512133B \
B7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627AAC0 \
2ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E742 \
EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
 +	     SHEX
+	     ("0F837708E010375AF87F75415ED69988FE60EB2F2669AD051FA99727"));
+  test_hash (&amp;nettle_sha3_224,	/* 238 octets */
+	     SHEX
+	     ("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBBE2B \
01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9B0F \
663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F83869CA \
27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D6D0 \
55B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
 +	     SHEX
+	     ("C79DE39778593810C03583D5962B36E04F343653074766D157A15993"));
+  test_hash (&amp;nettle_sha3_224,	/* 239 octets */
+	     SHEX
+	     ("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0DD8E \
9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07A38 \
F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8AAE \
141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A9016F \
2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
 +	     SHEX
+	     ("95CC811CC56521A40E3CED8D9A230E2101E8061FB01E388B9964BF29"));
+  test_hash (&amp;nettle_sha3_224,	/* 240 octets */
+	     SHEX
+	     ("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA672 \
73BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1466 \
E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAFCD3 \
F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B85AE \
5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
 +	     SHEX
+	     ("2EBE13F12EC43E3F6B0506D7AB216E1C311394F7C89D69A920CD00C0"));
+  test_hash (&amp;nettle_sha3_224,	/* 241 octets */
+	     SHEX
+	     ("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1A71 \
D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69A7A \
682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0C8F \
9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7801 \
A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
 +	     SHEX
+	     ("820101F5435D86E19BEC58ED0E1C7E630FE82DD92D7704E414802A16"));
+  test_hash (&amp;nettle_sha3_224,	/* 242 octets */
+	     SHEX
+	     ("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48A27 \
D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68020 \
C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C14B4 \
377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C41C \
CBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
 +	     SHEX
+	     ("B1CF54F51F81FDB5B649BB6115126149296278BFF3D5395CF5F112D4"));
+  test_hash (&amp;nettle_sha3_224,	/* 243 octets */
+	     SHEX
+	     ("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC0578289082B2 \
A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE492087D \
7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA800 \
E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1886 \
7B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
 +	     SHEX
+	     ("B602722D1B9F31B9C5091E0FF720F1D1A8A51EB6F95ED3B412DE063D"));
+  test_hash (&amp;nettle_sha3_224,	/* 244 octets */
+	     SHEX
+	     ("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E9726C6 \
90D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9359 \
AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B5F6 \
5E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF3745F0 \
EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
 +	     SHEX
+	     ("1368454E849F2D2299077F40826B4072E6FEE49B2062CB8E3B4523C9"));
+  test_hash (&amp;nettle_sha3_224,	/* 245 octets */
+	     SHEX
+	     ("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3796 \
141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C553 \
9FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61694 \
301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49171 \
433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
 +	     SHEX
+	     ("5765B70574F93341C1CC4ACB34F645B5D97B81D4CE8F38C3862F6C19"));
+  test_hash (&amp;nettle_sha3_224,	/* 246 octets */
+	     SHEX
+	     ("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4DE9 \
C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B45C9 \
66B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF102D \
23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F5D7 \
297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
 +	     SHEX
+	     ("B8FB318245B4042222B4063A053F15DA6B894F22736F3F9E26F72175"));
+  test_hash (&amp;nettle_sha3_224,	/* 247 octets */
+	     SHEX
+	     ("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82EA7 \
D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5577 \
B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3450 \
CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4ED5E \
607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
 +	     SHEX
+	     ("353622E92C7907F5563BAF8F4E7AF0C2F872F4FB583B01AF9EB3D907"));
+  test_hash (&amp;nettle_sha3_224,	/* 248 octets */
+	     SHEX
+	     ("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA909F \
DF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4BAB \
D9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D619 \
BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D001 \
EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
 +	     SHEX
+	     ("87215AF73D5CDE98B355479AFB82A511180B7DC3D5342C88E133AED8"));
+  test_hash (&amp;nettle_sha3_224,	/* 249 octets */
+	     SHEX
+	     ("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B562B2 \
88D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944162 \
7A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C2961145315130549311F \
C07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9A7C \
F97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A1928604B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
 +	     SHEX
+	     ("25AE852DBA36B8D58A94DD5CFD8345141FF57E7DB7D7816C4F7252BB"));
+  test_hash (&amp;nettle_sha3_224,	/* 250 octets */
+	     SHEX
+	     ("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A73D8 \
0A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A51B5 \
6D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B3A3 \
56001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90EBD0 \
90AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911F16 \
5D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"), +	 \
SHEX +	     ("ECE0394418F066F55023797551E06F6A7D1645682AA4D9DD75AF8E76"));
+  test_hash (&amp;nettle_sha3_224,	/* 251 octets */
+	     SHEX
+	     ("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC7EC \
6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699DF3 \
5D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5D39 \
7FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343709 \
5707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A07484A5 \
D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"), \
+	     SHEX +	     ("84A4BD2E3FA26C4FB01FE81953398F5B4B5704944354B51B887FD990"));
+  test_hash (&amp;nettle_sha3_224,	/* 252 octets */
+	     SHEX
+	     ("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03742 \
636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EEAD3 \
E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A4E7 \
B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED122 \
A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6772 \
E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
 +	     SHEX
+	     ("170C413863D9F4E8C0B87A8532416B10A69C348D3A144658EAEEF0ED"));
+  test_hash (&amp;nettle_sha3_224,	/* 253 octets */
+	     SHEX
+	     ("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A47429922C \
4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D7E8 \
B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD997CE \
FC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B2546F \
E05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B715C \
1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
 +	     SHEX
+	     ("D8C257DB76536F7EF1DCFB24976EB716D9491CD8651E0254E7C4A5BB"));
+  test_hash (&amp;nettle_sha3_224,	/* 254 octets */
+	     SHEX
+	     ("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC20AB \
4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D00785E5 \
7788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993F92 \
B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B730AD \
3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C39C \
F421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
 +	     SHEX
+	     ("F81D8EE40869BB38A13A4F75588FA3308068DD1CDC27267D66FAC198"));
+  test_hash (&amp;nettle_sha3_224,	/* 255 octets */
+	     SHEX
+	     ("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23346 \
775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD181 \
C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BBA40 \
489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B6183639D \
CFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C565C \
CA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
 +	     SHEX
+	     ("94689EA9F347DDA8DD798A858605868743C6BD03A6A65C6085D52BED"));
 }
diff --git a/testsuite/sha3-256-test.c b/testsuite/sha3-256-test.c
index 733a363..a87f391 100644
--- a/testsuite/sha3-256-test.c
+++ b/testsuite/sha3-256-test.c
@@ -1,775 +1,1259 @@
 #include "testutils.h"
 
 void
-test_main(void)
+test_main (void)
 {
   /* Extracted from ShortMsgKAT_256.txt using sha3.awk. */
-  test_hash(&amp;nettle_sha3_256, /* 0 octets */
-	    SHEX(""),
-	    SHEX("C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470"));
-  test_hash(&amp;nettle_sha3_256, /* 1 octets */
-	    SHEX("CC"),
-	    SHEX("EEAD6DBFC7340A56CAEDC044696A168870549A6A7F6F56961E84A54BD9970B8A"));
-  test_hash(&amp;nettle_sha3_256, /* 2 octets */
-	    SHEX("41FB"),
-	    SHEX("A8EACEDA4D47B3281A795AD9E1EA2122B407BAF9AABCB9E18B5717B7873537D2"));
-  test_hash(&amp;nettle_sha3_256, /* 3 octets */
-	    SHEX("1F877C"),
-	    SHEX("627D7BC1491B2AB127282827B8DE2D276B13D7D70FB4C5957FDF20655BC7AC30"));
-  test_hash(&amp;nettle_sha3_256, /* 4 octets */
-	    SHEX("C1ECFDFC"),
-	    SHEX("B149E766D7612EAF7D55F74E1A4FDD63709A8115B14F61FCD22AA4ABC8B8E122"));
-  test_hash(&amp;nettle_sha3_256, /* 5 octets */
-	    SHEX("21F134AC57"),
-	    SHEX("67F05544DBE97D5D6417C1B1EA9BC0E3A99A541381D1CD9B08A9765687EB5BB4"));
-  test_hash(&amp;nettle_sha3_256, /* 6 octets */
-	    SHEX("C6F50BB74E29"),
-	    SHEX("923062C4E6F057597220D182DBB10E81CD25F60B54005B2A75DD33D6DAC518D0"));
-  test_hash(&amp;nettle_sha3_256, /* 7 octets */
-	    SHEX("119713CC83EEEF"),
-	    SHEX("FEB8405DCD315D48C6CBF7A3504996DE8E25CC22566EFEC67433712EDA99894F"));
-  test_hash(&amp;nettle_sha3_256, /* 8 octets */
-	    SHEX("4A4F202484512526"),
-	    SHEX("E620D8F2982B24FEDAAA3BAA9B46C3F9CE204EE356666553ECB35E15C3FF9BF9"));
-  test_hash(&amp;nettle_sha3_256, /* 9 octets */
-	    SHEX("1F66AB4185ED9B6375"),
-	    SHEX("9E03F7C9A3D055ECA1D786ED6FB624D93F1CF0AC27F9C2B6C05E509FAC9E7FCA"));
-  test_hash(&amp;nettle_sha3_256, /* 10 octets */
-	    SHEX("EED7422227613B6F53C9"),
-	    SHEX("CAAD8E1ED546630748A12F5351B518A9A431CDA6BA56CBFC3CCBDD8AAE5092F7"));
-  test_hash(&amp;nettle_sha3_256, /* 11 octets */
-	    SHEX("EAEED5CDFFD89DECE455F1"),
-	    SHEX("D61708BDB3211A9AAB28D4DF01DFA4B29ED40285844D841042257E97488617B0"));
-  test_hash(&amp;nettle_sha3_256, /* 12 octets */
-	    SHEX("5BE43C90F22902E4FE8ED2D3"),
-	    SHEX("0F53BE55990780B3FAD9870F04F7D8153C3AE605C057C85ABB5D71765043AAA8"));
-  test_hash(&amp;nettle_sha3_256, /* 13 octets */
-	    SHEX("A746273228122F381C3B46E4F1"),
-	    SHEX("32215AE88204A782B62D1810D945DE49948DE458600F5E1E3896CECA2ED3292B"));
-  test_hash(&amp;nettle_sha3_256, /* 14 octets */
-	    SHEX("3C5871CD619C69A63B540EB5A625"),
-	    SHEX("9510DA68E58EBB8D2AB9DE8485BB408E358299A9C011AE8544B0D0FAF9D4A4EA"));
-  test_hash(&amp;nettle_sha3_256, /* 15 octets */
-	    SHEX("FA22874BCC068879E8EF11A69F0722"),
-	    SHEX("F20B3BCF743AA6FA084038520791C364CB6D3D1DD75841F8D7021CD98322BD8F"));
-  test_hash(&amp;nettle_sha3_256, /* 16 octets */
-	    SHEX("52A608AB21CCDD8A4457A57EDE782176"),
-	    SHEX("0E32DEFA2071F0B5AC0E6A108B842ED0F1D3249712F58EE0DDF956FE332A5F95"));
-  test_hash(&amp;nettle_sha3_256, /* 17 octets */
-	    SHEX("82E192E4043DDCD12ECF52969D0F807EED"),
-	    SHEX("9204550677B9AA770E6E93E319B9958540D54FF4DCCB063C8561302CD8AFF676"));
-  test_hash(&amp;nettle_sha3_256, /* 18 octets */
-	    SHEX("75683DCB556140C522543BB6E9098B21A21E"),
-	    SHEX("A6D5444CB7AA61F5106CDEDB39D5E1DD7D608F102798D7E818AC87289123A1DB"));
-  test_hash(&amp;nettle_sha3_256, /* 19 octets */
-	    SHEX("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
-	    SHEX("5796B993D0BD1257CF26782B4E58FAFB22B0986D88684AB5A2E6CEC6706275F9"));
-  test_hash(&amp;nettle_sha3_256, /* 20 octets */
-	    SHEX("E26193989D06568FE688E75540AEA06747D9F851"),
-	    SHEX("CFBE73C6585BE6204DD473ABE356B539477174C4B770BFC91E9FDBCBC57086E6"));
-  test_hash(&amp;nettle_sha3_256, /* 21 octets */
-	    SHEX("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
-	    SHEX("31C8006B0EC35E690674297CB27476DB6066B5FA9825C60728E9E0BB338FB7C3"));
-  test_hash(&amp;nettle_sha3_256, /* 22 octets */
-	    SHEX("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
-	    SHEX("3B8FA3904FE1B837565A50D0FBF03E487D6D72FC3CEA41ADCCE33DF1B835D247"));
-  test_hash(&amp;nettle_sha3_256, /* 23 octets */
-	    SHEX("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
-	    SHEX("37FEBC4DF9D50DAEABD0CAA6578812A687E55F1AC0B109D2512810D00548C85B"));
-  test_hash(&amp;nettle_sha3_256, /* 24 octets */
-	    SHEX("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
-	    SHEX("2329810B5A4735BCD49C10E6456C0B1DED5EAC258AF47CBB797CA162AB6D1BA8"));
-  test_hash(&amp;nettle_sha3_256, /* 25 octets */
-	    SHEX("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
-	    SHEX("6FFFA070B865BE3EE766DC2DB49B6AA55C369F7DE3703ADA2612D754145C01E6"));
-  test_hash(&amp;nettle_sha3_256, /* 26 octets */
-	    SHEX("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
-	    SHEX("B30761C053E926F150B9DCE7E005B4D87811CCFB9E3B6EDB0221022F01711CF0"));
-  test_hash(&amp;nettle_sha3_256, /* 27 octets */
-	    SHEX("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
-	    SHEX("04F1B3C1E25BA5D012E22AD144E5A8719D94322D05AD9EF61E7DB49B59959B3A"));
-  test_hash(&amp;nettle_sha3_256, /* 28 octets */
-	    SHEX("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
-	    SHEX("AEEF4B4DA420834FFCED26DB291248FB2D01E765E2B0564057F8E6C2030AC37F"));
-  test_hash(&amp;nettle_sha3_256, /* 29 octets */
-	    SHEX("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
-	    SHEX("03D26AEEB4A7BDDDBFF7CFF667198C425941A2776922DF2BEC545F5304E2C61C"));
-  test_hash(&amp;nettle_sha3_256, /* 30 octets */
-	    SHEX("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
-	    SHEX("435CFC0D1AFD8D5509A9CCBF49706575038685BF08DB549D9714548240463EE9"));
-  test_hash(&amp;nettle_sha3_256, /* 31 octets */
-	    SHEX("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
-	    SHEX("D477FB02CAAA95B3280EC8EE882C29D9E8A654B21EF178E0F97571BF9D4D3C1C"));
-  test_hash(&amp;nettle_sha3_256, /* 32 octets */
-	    SHEX("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
-	    SHEX("24DD2EE02482144F539F810D2CAA8A7B75D0FA33657E47932122D273C3F6F6D1"));
-  test_hash(&amp;nettle_sha3_256, /* 33 octets */
-	    SHEX("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
-	    SHEX("E78C421E6213AFF8DE1F025759A4F2C943DB62BBDE359C8737E19B3776ED2DD2"));
-  test_hash(&amp;nettle_sha3_256, /* 34 octets */
-	    SHEX("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
-	    SHEX("CCE3E3D498328A4D9C5B4DBF9A1209628AB82621AD1A0D0A18680362889E6164"));
-  test_hash(&amp;nettle_sha3_256, /* 35 octets */
-	    SHEX("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
-	    SHEX("F871DB93C5C92ECD65D4EDB96FCB12E4729BC2A1899F7FB029F50BFF431CBB72"));
-  test_hash(&amp;nettle_sha3_256, /* 36 octets */
-	    SHEX("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
                
-	    SHEX("4EB143477431DF019311AED936CAB91A912EC1E6868B71E9EDDB777408D4AF34"));
-  test_hash(&amp;nettle_sha3_256, /* 37 octets */
-	    SHEX("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
                
-	    SHEX("9A0C1D50A59DBF657F6713C795ED14E1F23B4EAA137C5540AACDB0A7E32C29FC"));
-  test_hash(&amp;nettle_sha3_256, /* 38 octets */
-	    SHEX("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
                
-	    SHEX("BA062E5D370216D11985C4CA7A2658DDC7328B4BE4B40A52DD8FA3CA662F09D1"));
-  test_hash(&amp;nettle_sha3_256, /* 39 octets */
-	    SHEX("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
                
-	    SHEX("3A083AE163DF42BD51B9C664BEE9DC4362F16E63383DF16473DF71BE6DD40C1C"));
-  test_hash(&amp;nettle_sha3_256, /* 40 octets */
-	    SHEX("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
                
-	    SHEX("4876E273AC00942576D9608D5B63ECC9A3E75D5E0C42C6ABDBCDE037785AF9A7"));
-  test_hash(&amp;nettle_sha3_256, /* 41 octets */
-	    SHEX("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
                
-	    SHEX("4797BA1C7AB7197050D6B2E506F2DF4550E4B673DF78F18C465424E48DF5E997"));
-  test_hash(&amp;nettle_sha3_256, /* 42 octets */
-	    SHEX("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
                
-	    SHEX("41C91BE98C5813A4C5D8AE7C29B9919C1CC95B4A05F82433948CB99D9A6D039C"));
-  test_hash(&amp;nettle_sha3_256, /* 43 octets */
-	    SHEX("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
                
-	    SHEX("EE354290E3F9CE9123C49BA616E1A2684A90F3DDD84E73A1D2C232F740412B18"));
-  test_hash(&amp;nettle_sha3_256, /* 44 octets */
-	    SHEX("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
                
-	    SHEX("FBEC0B6D71696EEDE900B77AA6D7D25F4AB45DF8961CA9C8B3F4F9B51AF983AB"));
-  test_hash(&amp;nettle_sha3_256, /* 45 octets */
-	    SHEX("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
                
-	    SHEX("9D24AEEA08F9A4B5FB8B6DE85A2296F5F4108DDD1EEA4F8EE58819CF84EDB765"));
-  test_hash(&amp;nettle_sha3_256, /* 46 octets */
-	    SHEX("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
                
-	    SHEX("732034CAE3FF1116F07FC18B5A26EF8FAF3FE75D3DBCA05E48795365E0A17C40"));
-  test_hash(&amp;nettle_sha3_256, /* 47 octets */
-	    SHEX("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
                
-	    SHEX("DEAC521805BC6A97C0870E9E225D1C4B2FD8F3A9A7F6B39E357C26414821E2DD"));
-  test_hash(&amp;nettle_sha3_256, /* 48 octets */
-	    SHEX("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
                
-	    SHEX("AD55537347B20D9FCA02683E6DE1032EC10EB84DA4CBD501E49744A666292EDF"));
-  test_hash(&amp;nettle_sha3_256, /* 49 octets */
-	    SHEX("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
                
-	    SHEX("B1F990204BF630569A3EDC634864274786F40CE1C57165EE32D0E29F5D0C6851"));
-  test_hash(&amp;nettle_sha3_256, /* 50 octets */
-	    SHEX("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
                
-	    SHEX("FA460CD51BC611786D364FCABE39052BCD5F009EDFA81F4701C5B22B729B0016"));
-  test_hash(&amp;nettle_sha3_256, /* 51 octets */
-	    SHEX("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
                
-	    SHEX("F7B0FE5A69FF44060D4F6AD2486E6CDE9ED679AF9AA1ADA613E4CC392442BEB5"));
-  test_hash(&amp;nettle_sha3_256, /* 52 octets */
-	    SHEX("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
                
-	    SHEX("24204D491F202534859FC0A208237184471A2D801FB3B934D0968D0D843D0345"));
-  test_hash(&amp;nettle_sha3_256, /* 53 octets */
-	    SHEX("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
                
-	    SHEX("81147CBA0647EEE78C4784874C0557621A138CA781FB6F5DCD0D9C609AF56F35"));
-  test_hash(&amp;nettle_sha3_256, /* 54 octets */
-	    SHEX("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
                
-	    SHEX("5B6D7EDA559574FAE882E6266F4C2BE362133E44B5A947ECB6E75DB9FC8567E0"));
-  test_hash(&amp;nettle_sha3_256, /* 55 octets */
-	    SHEX("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
                
-	    SHEX("86F87E75C87F9BE39E4AA6D0C5A37A5964D6FFDC462525C0642C9DB010DE38EE"));
-  test_hash(&amp;nettle_sha3_256, /* 56 octets */
-	    SHEX("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
                
-	    SHEX("959FE007B57C2947C36D1D66CC0808D80DB7DF45D68A34852B70D2DDA192C25C"));
-  test_hash(&amp;nettle_sha3_256, /* 57 octets */
-	    SHEX("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
                
-	    SHEX("1A93567EEBC41CC44D9346CDE646005D3E82DE8EEEB131E9C1F6D1E4AFD260F7"));
-  test_hash(&amp;nettle_sha3_256, /* 58 octets */
-	    SHEX("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
                
-	    SHEX("549DB056B65EDF7D05BD66661B6D0A39B29B825BC80910F8BF7060A53BFF68E1"));
-  test_hash(&amp;nettle_sha3_256, /* 59 octets */
-	    SHEX("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
                
-	    SHEX("794ABFD7EB622D5608C1C7B3F0A7821A71900B7172847FB0907AA2899972663E"));
-  test_hash(&amp;nettle_sha3_256, /* 60 octets */
-	    SHEX("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
                
-	    SHEX("9CE89958CBDDD8DCB22F66E8CBA5F6091A51953189464803BDC773ABC7FAA906"));
-  test_hash(&amp;nettle_sha3_256, /* 61 octets */
-	    SHEX("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
                
-	    SHEX("6DA733817DC826E8DA773BECA7338131AB7396417104EDA25970980C4EB2A15F"));
-  test_hash(&amp;nettle_sha3_256, /* 62 octets */
-	    SHEX("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
                
-	    SHEX("66C9CDC8E8C6C9417D7FFBEF3B54B702EEE5F01A9BDA8DD4E28FE3335DEBBB51"));
-  test_hash(&amp;nettle_sha3_256, /* 63 octets */
-	    SHEX("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
                
-	    SHEX("24AB37A93674CCB1CEEC9E5681EFC8BDF9FCC7721CF1CAC175E0B20E461575B8"));
-  test_hash(&amp;nettle_sha3_256, /* 64 octets */
-	    SHEX("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
                
-	    SHEX("574271CD13959E8DDEAE5BFBDB02A3FDF54F2BABFD0CBEB893082A974957D0C1"));
-  test_hash(&amp;nettle_sha3_256, /* 65 octets */
-	    SHEX("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
                
-	    SHEX("1947E901FA59EA789845775F2A4DB9B4848F8A776073D53D84CBD5D927A96BFF"));
-  test_hash(&amp;nettle_sha3_256, /* 66 octets */
-	    SHEX("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
                
-	    SHEX("0C1B8C1AF237E9C5501B50316A80865AAC08A34ACF4F8BEDD4A2D6E7B7BCBB85"));
-  test_hash(&amp;nettle_sha3_256, /* 67 octets */
-	    SHEX("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
                
-	    SHEX("C4315666C71FEA834D8FF27F025F5CC34F37C1AAE78604A4B08DAC45DECD42BE"));
-  test_hash(&amp;nettle_sha3_256, /* 68 octets */
-	    SHEX("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
                
-	    SHEX("5FF8734DB3F9977EEE9CF5E2CF725C57AF09926490C55ABD9D00A42E91A8C344"));
-  test_hash(&amp;nettle_sha3_256, /* 69 octets */
-	    SHEX("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
                
-	    SHEX("1E141A171CAB085252EA4C2F8F1F1087DD85A75AB3ACD0B3C28EAA5735D349AF"));
-  test_hash(&amp;nettle_sha3_256, /* 70 octets */
-	    SHEX("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
                
-	    SHEX("EF763F22F359DD7F5B3FE6A745C423D6B641EC07BA5235232A0701510F74426E"));
-  test_hash(&amp;nettle_sha3_256, /* 71 octets */
-	    SHEX("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
                
-	    SHEX("6A769F93F255B078FE73AFF68F0422A279939920E4690B4AFF0E433CFA3D3DF3"));
-  test_hash(&amp;nettle_sha3_256, /* 72 octets */
-	    SHEX("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
                
-	    SHEX("C06DD4261638C44AFCB186F0AF5DE20EA53AA63316FBB71728F874FF3DACEB0D"));
-  test_hash(&amp;nettle_sha3_256, /* 73 octets */
-	    SHEX("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
                
-	    SHEX("B5D84B1809E83B5E75AA53BDEE79E3A97F3FE3A7D3162EBD4908240FF69131D8"));
-  test_hash(&amp;nettle_sha3_256, /* 74 octets */
-	    SHEX("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
                
-	    SHEX("CAD7ABB5BBA5905B5181DD2DBC4E68CFD01BA8659F21C8290D3F835C1A68BBE5"));
-  test_hash(&amp;nettle_sha3_256, /* 75 octets */
-	    SHEX("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
                
-	    SHEX("83CA09C1F418B5DAD0A7F64A904A2E07C3314F7D02D92622F8F4674BC1F6AA3D"));
-  test_hash(&amp;nettle_sha3_256, /* 76 octets */
-	    SHEX("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC \
                582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
                
-	    SHEX("330DE3EE16AEF6711461A994863EED47AF71B362D4C2F243534EF432F63A091A"));
-  test_hash(&amp;nettle_sha3_256, /* 77 octets */
-	    SHEX("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BA \
                FC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
                
-	    SHEX("B5675197E49B357218F7118CD15EE773B39BD59B224D9A45CA71C6E371D938F1"));
-  test_hash(&amp;nettle_sha3_256, /* 78 octets */
-	    SHEX("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4 \
                FCF4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"),
                
-	    SHEX("CD9038C1066A59990DF5752107B066EEBBE672CBCA0F60D687D03A9D821934BE"));
-  test_hash(&amp;nettle_sha3_256, /* 79 octets */
-	    SHEX("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C58843554806 \
6EA2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"),
                
-	    SHEX("D3172CA263AFF2B9DB6FB13337F2543C5AF51151801A76194012F710306C14F6"));
-  test_hash(&amp;nettle_sha3_256, /* 80 octets */
-	    SHEX("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F03 \
7AA58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
                
-	    SHEX("9E3D4BCF580EECE39BCF13E5716E5BB8F5E8C3FC3723F66246F836D8DB1238F1"));
-  test_hash(&amp;nettle_sha3_256, /* 81 octets */
-	    SHEX("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D \
06DA83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
                
-	    SHEX("EDC2D3B49C85B8DD75F7B5128DA04CD76BF4878779A0077AF3F1D7FB44F18931"));
-  test_hash(&amp;nettle_sha3_256, /* 82 octets */
-	    SHEX("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F27 \
9E0733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
                
-	    SHEX("80DCE7F04DD6AC17CE709B56CF6EA6C0A57190649BB187B5E6D95FA18100C7AC"));
-  test_hash(&amp;nettle_sha3_256, /* 83 octets */
-	    SHEX("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A \
0D1FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
                
-	    SHEX("49BBD5435D2706F85FE77B84A5FA15DDD8259E5D2C20FB947F139373E5C86121"));
-  test_hash(&amp;nettle_sha3_256, /* 84 octets */
-	    SHEX("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541 \
27482BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
                
-	    SHEX("6B6C11F9731D60789D713DAF53D2EB10AB9CCF15430EA5D1249BE06EDFE2BFF6"));
-  test_hash(&amp;nettle_sha3_256, /* 85 octets */
-	    SHEX("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F \
4B01F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
                
-	    SHEX("7E738E8EB3D47D18E97D87C7B3FC681F86417883CED92BA93C3077812BBD17E7"));
-  test_hash(&amp;nettle_sha3_256, /* 86 octets */
-	    SHEX("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C76 \
19A6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
                
-	    SHEX("A278BA93BA0D7CD2677BE08C9DFC5F516A37F722BB06565FA22500F66FE031A9"));
-  test_hash(&amp;nettle_sha3_256, /* 87 octets */
-	    SHEX("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7 \
FC5C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
                
-	    SHEX("9C0A9F0DA113D39F491B7DA6C4DA5D84FE1CC46367E5ACC433CA3E0500951738"));
-  test_hash(&amp;nettle_sha3_256, /* 88 octets */
-	    SHEX("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E \
4CEFB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
                
-	    SHEX("6BED496D02FE4CC27D96DCEED14A67DA7BDF75E19B624896DFF6B0B68E4FCC12"));
-  test_hash(&amp;nettle_sha3_256, /* 89 octets */
-	    SHEX("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD59 \
1DF1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
                
-	    SHEX("ECD2E3FAF4BA4DD67E5A8656CEBEBDB24611611678E92EB60F7CBD3111D0A345"));
-  test_hash(&amp;nettle_sha3_256, /* 90 octets */
-	    SHEX("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85D \
C95286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
                
-	    SHEX("634A95A7E8BA58F7818A13903EC8F3411B6ECB7E389EC9AA97C0ECF87FADD588"));
-  test_hash(&amp;nettle_sha3_256, /* 91 octets */
-	    SHEX("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96 \
813544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
                
-	    SHEX("A0FE352BA2389B0430EDBE1201032EB09C255514C5C5B529C4BAAFCEB1AC9817"));
-  test_hash(&amp;nettle_sha3_256, /* 92 octets */
-	    SHEX("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD5 \
5E634AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
                
-	    SHEX("9A0BFE14F9F3127ACA86773A620945731DF781A6D7DC82930CCDE2F69DAC8F94"));
-  test_hash(&amp;nettle_sha3_256, /* 93 octets */
-	    SHEX("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE4060323 \
0ECA6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
                
-	    SHEX("19E5101BDE60B200A8B171E4C3EA3DFD913E10111D96F9682ACC7467282B4E31"));
-  test_hash(&amp;nettle_sha3_256, /* 94 octets */
-	    SHEX("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CD \
C585FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
                
-	    SHEX("4CC2AFF141987F4C2E683FA2DE30042BACDCD06087D7A7B014996E9CFEAA58CE"));
-  test_hash(&amp;nettle_sha3_256, /* 95 octets */
-	    SHEX("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409 \
2261AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
                
-	    SHEX("9A8CE819894EFCCC2153B239C3ADC3F07D0968EAC5EC8080AC0174F2D5E6959C"));
-  test_hash(&amp;nettle_sha3_256, /* 96 octets */
-	    SHEX("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE \
49D0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
                
-	    SHEX("8B35768525F59AC77D35522AC885831A9947299E114A8956FE5BCA103DB7BB2C"));
-  test_hash(&amp;nettle_sha3_256, /* 97 octets */
-	    SHEX("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A \
6E6D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
                
-	    SHEX("955F1F7E4E54660B26F30086F2DDDAEDD32813547C1B95D305D882682B4FF7A0"));
-  test_hash(&amp;nettle_sha3_256, /* 98 octets */
-	    SHEX("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28 \
EE11495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
                
-	    SHEX("8FAC5A34EBAFA38B55333624A9514FE97D9956E74309C5252CD2090D3BBE2F9E"));
-  test_hash(&amp;nettle_sha3_256, /* 99 octets */
-	    SHEX("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B \
32A0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
                
-	    SHEX("62039E0F53869480F88C87BB3D19A31AAD32878F27F2C4E78FF02BBEA2B8B0B9"));
-  test_hash(&amp;nettle_sha3_256, /* 100 octets */
-	    SHEX("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC2 \
1C8807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
                
-	    SHEX("CE87A5173BFFD92399221658F801D45C294D9006EE9F3F9D419C8D427748DC41"));
-  test_hash(&amp;nettle_sha3_256, /* 101 octets */
-	    SHEX("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666 \
C0A72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
                
-	    SHEX("2EF8907B60108638E50EAC535CC46CA02E04581DDB4235FBAC5CB5C53583E24B"));
-  test_hash(&amp;nettle_sha3_256, /* 102 octets */
-	    SHEX("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE6 \
2F39A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
                
-	    SHEX("BE8B5BD36518E9C5F4C768FC02461BB3D39A5D00EDEF82CEC7DF351DF80238E0"));
-  test_hash(&amp;nettle_sha3_256, /* 103 octets */
-	    SHEX("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041 \
308598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
                
-	    SHEX("52CBC5DBE49B009663C43F079DD180E38A77533778062A72A29E864A58522922"));
-  test_hash(&amp;nettle_sha3_256, /* 104 octets */
-	    SHEX("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189 \
D549A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
                
-	    SHEX("3A8DFCFD1B362003DDFA17910727539E64B18021ABBA018B5F58D71F7A449733"));
-  test_hash(&amp;nettle_sha3_256, /* 105 octets */
-	    SHEX("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB \
243F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
                
-	    SHEX("FA221DEEE80E25E53C6C448AA22028B72501F07D1FF2C3FC7F93AF9838B2D0A9"));
-  test_hash(&amp;nettle_sha3_256, /* 106 octets */
-	    SHEX("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A \
2130DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
                
-	    SHEX("ED9C8B87FCE27BE4E95610DB1DDD0C035847F4699DFC8C039A798A30343A6059"));
-  test_hash(&amp;nettle_sha3_256, /* 107 octets */
-	    SHEX("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C8 \
1BDCE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
                
-	    SHEX("A485CC9CF4CA4F659F89A0B791A4423953424AC57146B879D385A9E4062AFE52"));
-  test_hash(&amp;nettle_sha3_256, /* 108 octets */
-	    SHEX("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457 \
BD25F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
                
-	    SHEX("93CD4369A7796239A5CDF78BCE22EBB2137A631C3A613D5E35816D2A64A34947"));
-  test_hash(&amp;nettle_sha3_256, /* 109 octets */
-	    SHEX("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2 \
A09002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
                
-	    SHEX("3751CE08750D927EB5C3AE4CA62A703A481D86A4FA1C011E812B4BC0A2FEF08D"));
-  test_hash(&amp;nettle_sha3_256, /* 110 octets */
-	    SHEX("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C \
2C40F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
                
-	    SHEX("A88C7EF7B89B7B6F75D83922B8FD00F034D719F97C67884121434447AE9DD3B9"));
-  test_hash(&amp;nettle_sha3_256, /* 111 octets */
-	    SHEX("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E75 \
54BD002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
                
-	    SHEX("2B4F8F9EF7D6ED60BB4881E635E0F887A51B0C1A42BAB077976B43D2C715E11A"));
-  test_hash(&amp;nettle_sha3_256, /* 112 octets */
-	    SHEX("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C98 \
5AC56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
                
-	    SHEX("586CFFDC434313CC4E133E85AC88B3E5DEA71818ABCAC236F0AAE418F72B6CDE"));
-  test_hash(&amp;nettle_sha3_256, /* 113 octets */
-	    SHEX("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972 \
AEDD3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
                
-	    SHEX("52D14AB96B24AA4A7A55721AA8550B1FCCAC3653C78234783F7295AE5F39A17A"));
-  test_hash(&amp;nettle_sha3_256, /* 114 octets */
-	    SHEX("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40 \
198B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
                
-	    SHEX("B6345EDD966030CF70DFB5B7552BC141C42EFE7A7E84F957B1BAF4671BAE4354"));
-  test_hash(&amp;nettle_sha3_256, /* 115 octets */
-	    SHEX("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD7 \
3D017CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
                
-	    SHEX("0347901965D3635005E75A1095695CCA050BC9ED2D440C0372A31B348514A889"));
-  test_hash(&amp;nettle_sha3_256, /* 116 octets */
-	    SHEX("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14 \
A529B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
                
-	    SHEX("F0BF7105870F2382B76863BB97AEE79F95AE0E8142675BBCCDB3475B0C99352F"));
-  test_hash(&amp;nettle_sha3_256, /* 117 octets */
-	    SHEX("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED15 \
43E5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
                
-	    SHEX("631C6F5ABE50B27C9DEA557FC3FBD3FB25781FCB1BBF9F2E010CCA20EC52DBC4"));
-  test_hash(&amp;nettle_sha3_256, /* 118 octets */
-	    SHEX("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F3 \
25E894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
                
-	    SHEX("3757A53D195B43B403A796A74AAFB2064072A69E372EE5B36CC2B7A791F75C9F"));
-  test_hash(&amp;nettle_sha3_256, /* 119 octets */
-	    SHEX("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC \
3BDF8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913 \
                C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
                
-	    SHEX("0CC903ACBCED724B221D34877D1D1427182F9493A33DF7758720E8BFC7AF98EE"));
-  test_hash(&amp;nettle_sha3_256, /* 120 octets */
-	    SHEX("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095B \
E4BA5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B015 \
                8F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
                
-	    SHEX("F23750C32973F24C2422F4E2B43589D9E76D6A575938E01A96AE8E73D026569C"));
-  test_hash(&amp;nettle_sha3_256, /* 121 octets */
-	    SHEX("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C7 \
15C1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C \
                21620B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"),
                
-	    SHEX("1ECE87E44A99F59D26411418FB8793689FF8A9C6EF75599056087D8C995BCE1E"));
-  test_hash(&amp;nettle_sha3_256, /* 122 octets */
-	    SHEX("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633 \
ABD1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026C \
EE77BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"),
                
-	    SHEX("71B4F90AC9215D7474B1197D1B8B24449FD57E9B05483D32EDBEBCB21A82F866"));
-  test_hash(&amp;nettle_sha3_256, /* 123 octets */
-	    SHEX("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1 \
857815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB \
4C266272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
                
-	    SHEX("3B3678BB116FADAB484291F0CF972606523501F5B45D51063797972928E333C0"));
-  test_hash(&amp;nettle_sha3_256, /* 124 octets */
-	    SHEX("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753 \
95551E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095 \
B73DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
                
-	    SHEX("4068246495F508897813332962D3AE0B84685045E832A9A39AD5E94C154D2679"));
-  test_hash(&amp;nettle_sha3_256, /* 125 octets */
-	    SHEX("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C0 \
0FBBED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D02 \
82FED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
                
-	    SHEX("82696259536520E5E4D47E106BD1DCB397529AAFB75878F332D2AF2684493F1B"));
-  test_hash(&amp;nettle_sha3_256, /* 126 octets */
-	    SHEX("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031 \
4855F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7 \
1967A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
                
-	    SHEX("B494852603393B2B71845BACBDCE89FA1427DFE4AF9CDF925D4F93FA83B9966B"));
-  test_hash(&amp;nettle_sha3_256, /* 127 octets */
-	    SHEX("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B \
16D27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE7 \
65DE2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
                
-	    SHEX("D8A619C0DFBED2A9498A147B53D7B33DD653D390E5C0CD691F02C8608822D06A"));
-  test_hash(&amp;nettle_sha3_256, /* 128 octets */
-	    SHEX("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F \
369EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF06 \
21CD54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
                
-	    SHEX("D82E257D000DC9FA279A00E2961E3286D2FE1C02EF59833AB8A6A7101BC25054"));
-  test_hash(&amp;nettle_sha3_256, /* 129 octets */
-	    SHEX("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106 \
594893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B \
5DB812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
                
-	    SHEX("8D5B7DBF3947219ACDB04FB2E11A84A313C54C22F2AE858DFC8887BF6265F5F3"));
-  test_hash(&amp;nettle_sha3_256, /* 130 octets */
-	    SHEX("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA9787917 \
5AABA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5 \
7447EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
                
-	    SHEX("607C3F31342C3EE5C93E552A8DD79FA86DCCAE2C1B58AABAC25B5918ACFA4DA5"));
-  test_hash(&amp;nettle_sha3_256, /* 131 octets */
-	    SHEX("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E \
477743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B \
1921881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
                
-	    SHEX("0656DE9DCD7B7112A86C7BA199637D2C1C9E9CFBB713E4EDE79F8862EE69993F"));
-  test_hash(&amp;nettle_sha3_256, /* 132 octets */
-	    SHEX("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C34 \
8C2B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C \
2A0EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
                
-	    SHEX("4DDD6224858299F3378E3F5A0ECC52FA4C419C8EBB20F635C4C43F36324ECB4E"));
-  test_hash(&amp;nettle_sha3_256, /* 133 octets */
-	    SHEX("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3B \
F88E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3 \
FE507BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
                
-	    SHEX("EC096314E2F73B6A7027FFFA02104C2F6DD187F20C743445BEFD4B5C034B3295"));
-  test_hash(&amp;nettle_sha3_256, /* 134 octets */
-	    SHEX("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079 \
B79A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782 \
917417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
                
-	    SHEX("FE71D01C2EE50E054D6B07147EF62954FDE7E6959D6EEBA68E3C94107EB0084D"));
-  test_hash(&amp;nettle_sha3_256, /* 135 octets */
-	    SHEX("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF40 \
67C3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55 \
EA796FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
                
-	    SHEX("BD6F5492582A7C1B116304DE28314DF9FFFE95B0DA11AF52FE9440A717A34859"));
-  test_hash(&amp;nettle_sha3_256, /* 136 octets */
-	    SHEX("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880 \
EF50700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768 \
DD417F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
                
-	    SHEX("E717A7769448ABBE5FEF8187954A88AC56DED1D22E63940AB80D029585A21921"));
-  test_hash(&amp;nettle_sha3_256, /* 137 octets */
-	    SHEX("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2 \
CD2BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47B \
B67AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
                
-	    SHEX("A95D50B50B4545F0947441DF74A1E9D74622EB3BAA49C1BBFC3A0CCE6619C1AA"));
-  test_hash(&amp;nettle_sha3_256, /* 138 octets */
-	    SHEX("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882 \
615D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706 \
3301B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
                
-	    SHEX("ED53D72595ACE3A6D5166A4EDE41CCE362D644BDED772BE616B87BCF678A6364"));
-  test_hash(&amp;nettle_sha3_256, /* 139 octets */
-	    SHEX("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0 \
99276296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777F \
A5FEAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
                
-	    SHEX("810401B247C23529E24655CAB86C42DF44085DA76CA01C9A14618E563B7C41BE"));
-  test_hash(&amp;nettle_sha3_256, /* 140 octets */
-	    SHEX("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC15077 \
3B6FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA \
035594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
                
-	    SHEX("9F01E63F2355393ECB1908D0CAF39718833004A4BF37EBF4CF8D7319B65172DF"));
-  test_hash(&amp;nettle_sha3_256, /* 141 octets */
-	    SHEX("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29 \
6880A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3 \
C6F405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
                
-	    SHEX("7EC11DE7DB790A850281F043592779B409195DB4ECEDEEFBB93BA683D3BCA851"));
-  test_hash(&amp;nettle_sha3_256, /* 142 octets */
-	    SHEX("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4 \
064DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1C \
E085FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
                
-	    SHEX("A74AF9C523B4A08D9DB9692EA89255977A5919B9292B7CD0D92C90C97C98E224"));
-  test_hash(&amp;nettle_sha3_256, /* 143 octets */
-	    SHEX("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA37 \
42FF3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6 \
A1EED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
                
-	    SHEX("344D129C228359463C40555D94213D015627E5871C04F106A0FEEF9361CDECB6"));
-  test_hash(&amp;nettle_sha3_256, /* 144 octets */
-	    SHEX("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579 \
DB2F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B3 \
9BD90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
                
-	    SHEX("4CE7C2B935F21FC34C5E56D940A555C593872AEC2F896DE4E68F2A017060F535"));
-  test_hash(&amp;nettle_sha3_256, /* 145 octets */
-	    SHEX("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9 \
035321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B90482 \
1F32B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
                
-	    SHEX("24B69D8AB35BACCBD92F94E1B70B07C4C0ECF14EAEAC4B6B8560966D5BE086F3"));
-  test_hash(&amp;nettle_sha3_256, /* 146 octets */
-	    SHEX("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F \
21A0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7 \
DA2B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
                
-	    SHEX("19F34215373E8E80F686953E03CA472B50216719CB515E0667D4E686E45FCF7C"));
-  test_hash(&amp;nettle_sha3_256, /* 147 octets */
-	    SHEX("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3 \
404F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895A \
AA16ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
                
-	    SHEX("290BD4808E5676EB0C978084E4CD68E745031659A26807AD615B10CDA589B969"));
-  test_hash(&amp;nettle_sha3_256, /* 148 octets */
-	    SHEX("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D58 \
5E9578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBE \
E4BBB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
                
-	    SHEX("70999AB9818309AFA8F1ADC4FEA47A071A8ABD94012F7CE28CC794A0D997C5CB"));
-  test_hash(&amp;nettle_sha3_256, /* 149 octets */
-	    SHEX("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F \
296EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA99291 \
0EF4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
                
-	    SHEX("83120033B0140FE3E3E1CBFEBFF323ABC08535C0AA017803F5D2F4ECB35F5DFB"));
-  test_hash(&amp;nettle_sha3_256, /* 150 octets */
-	    SHEX("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3 \
B267B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A \
57B2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
                
-	    SHEX("5584BF3E93BC25945C508B9188D0502C6E755BBEBABFC8CB907FA7A252EF464A"));
-  test_hash(&amp;nettle_sha3_256, /* 151 octets */
-	    SHEX("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97 \
8788C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9 \
A93BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
                
-	    SHEX("C234B252C21EDB842634CC124DA5BEE8A4749CFFBA134723F7963B3A9729C0B4"));
-  test_hash(&amp;nettle_sha3_256, /* 152 octets */
-	    SHEX("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29 \
A0DC0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D \
50309E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
                
-	    SHEX("645F25456752091FFFCAADE806C34C79DFFE72140C7C75D6A6ECFEEDF6DB401C"));
-  test_hash(&amp;nettle_sha3_256, /* 153 octets */
-	    SHEX("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C \
250034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC937 \
93DD6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
                
-	    SHEX("2D7CAC697E7410C1F7735DD691624A7D04FA51815858E8BA98B19B0DED0638B5"));
-  test_hash(&amp;nettle_sha3_256, /* 154 octets */
-	    SHEX("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933 \
906FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433 \
F7D350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
                
-	    SHEX("F664F626BC6B7A8CF03BE429155EE1F5CD6ECF14816DE49A5E229903F89A4DC6"));
-  test_hash(&amp;nettle_sha3_256, /* 155 octets */
-	    SHEX("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286 \
F8F17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0 \
F55231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
                
-	    SHEX("06425E83E4AF817D735E9962C0CDDCE2CD40A087A6B0AF3599719E415AB9A72A"));
-  test_hash(&amp;nettle_sha3_256, /* 156 octets */
-	    SHEX("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E \
91F4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A801485503073109 \
50D034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
                
-	    SHEX("E8C329149B075C459E11C8AC1E7E6ACFA51CA981C89EC0768ED79D19F4E484FB"));
-  test_hash(&amp;nettle_sha3_256, /* 157 octets */
-	    SHEX("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE704 \
57A9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BE \
D9DE9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
                
-	    SHEX("C86768F6C349EB323BD82DB19676E10BD8AE9F7057763556BBB6D0B671E60F2A"));
-  test_hash(&amp;nettle_sha3_256, /* 158 octets */
-	    SHEX("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576 \
B1C2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC \
4A471A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
                
-	    SHEX("D97F46F3B7EDBFB16E52BFEC7DBA0815B94D46E4251E48A853EABDF876127714"));
-  test_hash(&amp;nettle_sha3_256, /* 159 octets */
-	    SHEX("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197 \
B839957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1 \
8691A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
                
-	    SHEX("51D08E00AAA252812D873357107616055B1B8C5FB2AC7917D0F901DFB01FAC47"));
-  test_hash(&amp;nettle_sha3_256, /* 160 octets */
-	    SHEX("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B26 \
4E920394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8 \
94310A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
                
-	    SHEX("C6A188A6BDACA4DD7B1BC3E41019AFE93473063F932C166E3242B7F52A3C6F8E"));
-  test_hash(&amp;nettle_sha3_256, /* 161 octets */
-	    SHEX("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67 \
314F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBB \
B8153DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
                
-	    SHEX("2B31FBC565110110011AB2C8F6CC3DA8FB55D41B1AE5E04310283F207D39682D"));
-  test_hash(&amp;nettle_sha3_256, /* 162 octets */
-	    SHEX("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9 \
A0F2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246C \
E0623A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6 \
                C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
                
-	    SHEX("1351F5DBA46098B9A773381D85D52FAD491B3A82AF9107F173DB81FB35ED91D2"));
-  test_hash(&amp;nettle_sha3_256, /* 163 octets */
-	    SHEX("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8 \
E1B288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E \
37D89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA6 \
                9107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
                
-	    SHEX("DFFC700F3E4D84D9131CBB1F98FB843DBAFCB2EF94A52E89D204D431451A3331"));
-  test_hash(&amp;nettle_sha3_256, /* 164 octets */
-	    SHEX("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0 \
B12FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18 \
F408C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383F \
                D1900B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"),
                
-	    SHEX("26726B52242EF8ECF4C66AED9C4B46BF6F5D87044A0B99D4E4AF47DC360B9B0E"));
-  test_hash(&amp;nettle_sha3_256, /* 165 octets */
-	    SHEX("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D5989 \
6E3A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB \
2D64496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB \
6997BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"),
                
-	    SHEX("25E536315F08A40976ADECB54756EBC0B224C38FAF11509371B5A692A5269AB5"));
-  test_hash(&amp;nettle_sha3_256, /* 166 octets */
-	    SHEX("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4 \
A4326783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A80 \
5B6A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5 \
367926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
                
-	    SHEX("AB504592AD7184BE83CC659EFB5D3DE88BA04B060B45D16A76F034080DDE56C6"));
-  test_hash(&amp;nettle_sha3_256, /* 167 octets */
-	    SHEX("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017 \
BBCF26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78 \
F854FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232 \
314EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
                
-	    SHEX("5D8EE133EC441A3DF50A5268A8F393F13F30F23F226AE3A18EC331844402FF54"));
-  test_hash(&amp;nettle_sha3_256, /* 168 octets */
-	    SHEX("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929 \
BD9689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BE \
A6F469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E \
884A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
                
-	    SHEX("712B1CC04C009B52035CC44C9505BB5CB577BA0AD1734EC23620F57EEF3D37FB"));
-  test_hash(&amp;nettle_sha3_256, /* 169 octets */
-	    SHEX("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73 \
243360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BD \
BBFD85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0 \
424B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
                
-	    SHEX("942E39E230A2251FFDB2F85202871C98597008401B322FF9840CC90CC85B337D"));
-  test_hash(&amp;nettle_sha3_256, /* 170 octets */
-	    SHEX("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D07 \
86E99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD94 \
1DCB82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A46 \
2B83B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
                
-	    SHEX("B542B6CD8EF2DAB4ED83B77AC6DC52DAF554ECDA4EF7AB0A50E546BEBE2D8E5A"));
-  test_hash(&amp;nettle_sha3_256, /* 171 octets */
-	    SHEX("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA753 \
6AAE597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C32 \
92E96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C \
43D6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
                
-	    SHEX("F7E9E825722E6554A8619CCA3E57F5B5E6B7347431D55CE178372C917BFB3DC2"));
-  test_hash(&amp;nettle_sha3_256, /* 172 octets */
-	    SHEX("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F \
80B6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C \
7BB759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A \
1C2441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
                
-	    SHEX("14BB22B98EAF41A4C224FD3C37188A755F9B04F46F3E23A652DA3DB9E25D2F2C"));
-  test_hash(&amp;nettle_sha3_256, /* 173 octets */
-	    SHEX("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712 \
1548373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4 \
CAFB37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255 \
B4D231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
                
-	    SHEX("EB5668F9941C06E5E38EA01B7FA980638B9536CA1939950C1629F84A6EFF3866"));
-  test_hash(&amp;nettle_sha3_256, /* 174 octets */
-	    SHEX("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02 \
D19BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC83 \
9EA9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CA \
C1BACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
                
-	    SHEX("913014BB6E243FAC3A22A185F8227A68C2311DC0B718E276BBBDB73AF98BE35F"));
-  test_hash(&amp;nettle_sha3_256, /* 175 octets */
-	    SHEX("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3 \
510E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB \
3B117EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22 \
F1B7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
                
-	    SHEX("0284418C10190F413042E3ECEB3954979B94AFBF2E545FC7F8A3C7DB2C235916"));
-  test_hash(&amp;nettle_sha3_256, /* 176 octets */
-	    SHEX("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310 \
E5C0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E97 \
23EFD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D38 \
40CDFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
                
-	    SHEX("8FEBFF801787F5803E151DCA3434A5CD44ADB49F1C2FFD5D0CD077A9075A492D"));
-  test_hash(&amp;nettle_sha3_256, /* 177 octets */
-	    SHEX("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88 \
4531D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F753 \
79E9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C \
16E69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
                
-	    SHEX("EA7511B993B786DF59A3B3E0B3CD876C0F056D6CA43CC89C51C1B21CCDC79B42"));
-  test_hash(&amp;nettle_sha3_256, /* 178 octets */
-	    SHEX("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F \
68E6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820A \
CE262D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E25533 \
7DAA06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
                
-	    SHEX("BAAECB6E9DB57971D5C70F5819FF89C5093254DE19EF6059C43CC0AFDA7C5D34"));
-  test_hash(&amp;nettle_sha3_256, /* 179 octets */
-	    SHEX("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54 \
2619DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AAD \
D7CE842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877 \
E50FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
                
-	    SHEX("56DB69430B8CA852221D55D7BBFF477DC83F7CB44AB44DDD64C31A52C483DB4F"));
-  test_hash(&amp;nettle_sha3_256, /* 180 octets */
-	    SHEX("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D \
50AA83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E \
688094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D \
1BCAB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
                
-	    SHEX("F8538F597F4463CAD7A91905744B87156DB33C65BA87B912427FEC3669F425D4"));
-  test_hash(&amp;nettle_sha3_256, /* 181 octets */
-	    SHEX("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D96 \
63ACCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DB \
E7FB74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC55 \
4D8E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
                
-	    SHEX("447EDA923CFE1112A6F1A3E4C735BF8EE9E4F2AEE7DE666A472FF8CF0FC65315"));
-  test_hash(&amp;nettle_sha3_256, /* 182 octets */
-	    SHEX("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F \
82310356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D \
9F01AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78 \
F6810EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
                
-	    SHEX("74D94C13AFEA4DDD07A637B68B6FE095017C092B3CDCCDC498E26035D86D921E"));
-  test_hash(&amp;nettle_sha3_256, /* 183 octets */
-	    SHEX("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0B \
D5931839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55 \
A9116E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB \
1B9327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
                
-	    SHEX("CC11196C095BFFA090A05BA0BC255D38BDA7218D9311143F4F200B1852D1BB0D"));
-  test_hash(&amp;nettle_sha3_256, /* 184 octets */
-	    SHEX("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636 \
C1727EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B998 \
80C87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA11 \
6E5F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
                
-	    SHEX("8C085B54C213704374DDD920A45168608BE65DFD036A562659F47143604144C2"));
-  test_hash(&amp;nettle_sha3_256, /* 185 octets */
-	    SHEX("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7 \
635EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3 \
BE9377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035C \
D2185BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
                
-	    SHEX("D2E233264A3773495FFD12159EF7B631660C1B3E53A3DA0F24AE14466F167757"));
-  test_hash(&amp;nettle_sha3_256, /* 186 octets */
-	    SHEX("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC4586 \
8AE9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E \
8B4ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E \
7459FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
                
-	    SHEX("FFAC7CA5FA067419D1BDB00C0E49C6E1A748880923A23ED5DD67DDE63D777EDB"));
-  test_hash(&amp;nettle_sha3_256, /* 187 octets */
-	    SHEX("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB \
95DB2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F5 \
72BE5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC \
36F59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
                
-	    SHEX("5B2ECA0920D32B1964BBF5810A6E6E53675ED1B83897FD04600D72E097845859"));
-  test_hash(&amp;nettle_sha3_256, /* 188 octets */
-	    SHEX("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36 \
D44C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A \
037FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3 \
CC03E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
                
-	    SHEX("68F41FDFC7217E89687ED118BC31AC6ED2D9D1E1A2F1B20A2D429729FA03517B"));
-  test_hash(&amp;nettle_sha3_256, /* 189 octets */
-	    SHEX("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29 \
F79031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE06 \
2CDD71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727 \
083513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
                
-	    SHEX("FA2F3DE31E9CF25AB9A978C82D605A43EE39B68AC8E30F49F9D209CB4E172AB4"));
-  test_hash(&amp;nettle_sha3_256, /* 190 octets */
-	    SHEX("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B \
1B7F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02 \
E67A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467 \
998BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
                
-	    SHEX("BA2AF506C10DA8D7751E67ED766CFCD47D048D6EF9277DBD2ABFE2FD5D787B79"));
-  test_hash(&amp;nettle_sha3_256, /* 191 octets */
-	    SHEX("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306 \
BE84536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B \
922964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E0 \
38F6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
                
-	    SHEX("3CD33F8811AF12183C53E978528F53AE7D559432724029E55FCFA9B990B91713"));
-  test_hash(&amp;nettle_sha3_256, /* 192 octets */
-	    SHEX("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D52 \
0EEF3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2 \
DA2B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C794 \
1FCC82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
                
-	    SHEX("3ECC9D27994022045CBEAB4FC041F12419CEC8060C8F6F9F0372884DF6074B5C"));
-  test_hash(&amp;nettle_sha3_256, /* 193 octets */
-	    SHEX("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478 \
313C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA2 \
3EC9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDB \
B48EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
                
-	    SHEX("1501988A55372AC1B0B78849F3B7E107E0BF1F2CBAF670DE7F15ACBB1A00AD3D"));
-  test_hash(&amp;nettle_sha3_256, /* 194 octets */
-	    SHEX("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840E \
FE8D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8 \
A795AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036 \
E24E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
                
-	    SHEX("5C4E860A0175C92C1E6AF2CBB3084162403CED073FAAC901D0D358B6BF5EEFA9"));
-  test_hash(&amp;nettle_sha3_256, /* 195 octets */
-	    SHEX("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC35530166 \
08EF2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E \
76F8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01 \
C9F0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
                
-	    SHEX("272B4F689263057FBF7605AAA67AF012D742267164C4FAB68035D99C5829B4F0"));
-  test_hash(&amp;nettle_sha3_256, /* 196 octets */
-	    SHEX("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF \
801E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539 \
E6A8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2 \
7622FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
                
-	    SHEX("9B28E42B67EF32EC80DA10A07B004E1D71C6DCE71D8013FFA0305D0D0CE0469D"));
-  test_hash(&amp;nettle_sha3_256, /* 197 octets */
-	    SHEX("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61 \
28334F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6 \
ACC86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22 \
AA503C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
                
-	    SHEX("EE53F83D2E2CCC315C6377EADDA5F42F42F3AADD664E3E895C37CBE9D0E9B9DE"));
-  test_hash(&amp;nettle_sha3_256, /* 198 octets */
-	    SHEX("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156 \
C0B27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F93926 \
2D4043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245E \
E361E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
                
-	    SHEX("21CCFDA65C4B915303012B852AB29481030F87347C29917E21F210F2BD5EFC9C"));
-  test_hash(&amp;nettle_sha3_256, /* 199 octets */
-	    SHEX("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491 \
B48529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF \
86A4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783 \
4535929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
                
-	    SHEX("F5BF70710DA440EDB43AFD3EB7698180317FFEFA81406BB4DF9C2BB8B0B1C034"));
-  test_hash(&amp;nettle_sha3_256, /* 200 octets */
-	    SHEX("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222 \
B64CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3E \
AEABE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC2 \
3A79A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
                
-	    SHEX("E83EA21F5BC0976953AF86069A10EB6024A1AC59D609688E4A9759BB8B6C9441"));
-  test_hash(&amp;nettle_sha3_256, /* 201 octets */
-	    SHEX("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7 \
A38393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB3 \
2FD6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653 \
F3C9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
                
-	    SHEX("A2D93C6367E1862809D367EC37F9DA44CB3A8B4319C6A094C5E7D7266FE3A593"));
-  test_hash(&amp;nettle_sha3_256, /* 202 octets */
-	    SHEX("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF8 \
4D58EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D \
01C4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384 \
B3DA953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
                
-	    SHEX("3C647B195F22DC16D6DECC8873017DF369EE1C4696340934DB158DC4059C76DF"));
-  test_hash(&amp;nettle_sha3_256, /* 203 octets */
-	    SHEX("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295 \
381354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487A \
F49CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6 \
B7224EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
                
-	    SHEX("3BB394D056D94FDE68920CD383378EE3ABCC44B7259D3DB9CD0A897E021F7E2E"));
-  test_hash(&amp;nettle_sha3_256, /* 204 octets */
-	    SHEX("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9 \
CB3C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03 \
6819C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2 \
E6DAB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
                
-	    SHEX("43640F408613CBF7393D900B921F22B826357F3B4FDFF7168EC45CBFB3EF5EFF"));
-  test_hash(&amp;nettle_sha3_256, /* 205 octets */
-	    SHEX("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD \
469D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7A \
A9CE013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFF \
B618E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E \
                0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
                
-	    SHEX("CB3713A5D5ABBC6AF72F8B38A701C71269B3B51C62EC5116F96AD0D42A10FD90"));
-  test_hash(&amp;nettle_sha3_256, /* 206 octets */
-	    SHEX("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82 \
316CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033 \
AE9AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF0760 \
28C5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC \
                66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
                
-	    SHEX("B304FC4CA22131857D242EB12FE899ED9E6B55717C3360F113512A84174E6A77"));
-  test_hash(&amp;nettle_sha3_256, /* 207 octets */
-	    SHEX("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD093 \
8DDE5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D \
743F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1A \
D260AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C \
                6701290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"),
                
-	    SHEX("A3CA830D4771C1BAA7FADA76C5FCEADD0F3CB9736E19CFEC52E9E74F56BFDD55"));
-  test_hash(&amp;nettle_sha3_256, /* 208 octets */
-	    SHEX("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928 \
D7AD377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC4 \
1E0D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0 \
433EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59 \
D287F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"),
                
-	    SHEX("CA158C46370E64A9F032F5BA8E091460FD555EF700EDF7087E56BEBFFA261DE7"));
-  test_hash(&amp;nettle_sha3_256, /* 209 octets */
-	    SHEX("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F9 \
7DF3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438D \
B1BB361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587 \
AA46AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623 \
047C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
                
-	    SHEX("5901CDA0CD1510DB5455D072D2737A6721AD9EE3272953A19C7AB378BF3646C5"));
-  test_hash(&amp;nettle_sha3_256, /* 210 octets */
-	    SHEX("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F \
808DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255 \
DA9843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01AC \
B8F0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F59 \
20E6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
                
-	    SHEX("F64562D6273EFB5EBD027E0A6F38C3FB204A6DBE894EE01200EA249B747CFE66"));
-  test_hash(&amp;nettle_sha3_256, /* 211 octets */
-	    SHEX("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBF \
D4A43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8 \
E66AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F625 \
2C0407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA \
35C6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
                
-	    SHEX("E7D7A113B3A33175D0ABD2CF4F9ADD8E41DC86C93C9552C5B3588277FBCAA24A"));
-  test_hash(&amp;nettle_sha3_256, /* 212 octets */
-	    SHEX("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCD \
DB708FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A \
1F76B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9 \
B2D8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24A \
F8C8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
                
-	    SHEX("3B40C1493AF411AE7849904D478DF2407254BF62B88E9BFFD7B42BD2A60CE0FA"));
-  test_hash(&amp;nettle_sha3_256, /* 213 octets */
-	    SHEX("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0 \
819A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A156 \
6FC7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431 \
B4C40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2 \
878A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
                
-	    SHEX("FEEB172AEAB2F0DEB748FB77801CA22D3CE99B7A9F9789E479B93D1F4B1D227F"));
-  test_hash(&amp;nettle_sha3_256, /* 214 octets */
-	    SHEX("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2 \
A186964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C \
2527B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0 \
C3792F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346 \
D43CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
                
-	    SHEX("B240BC52B8AF1B502E26BF1D5E75FE2663BFBA503FAF10F46754DC3D23CB61C1"));
-  test_hash(&amp;nettle_sha3_256, /* 215 octets */
-	    SHEX("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9 \
2017F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299 \
CAA792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA \
85BDDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2 \
B63ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
                
-	    SHEX("3EBACE41F578FDE6603E032FC1C7CFEEF1CB79FE938A94D4C7B58B0BA4CB9720"));
-  test_hash(&amp;nettle_sha3_256, /* 216 octets */
-	    SHEX("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81 \
C3CA9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB \
558E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC \
5A27D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66 \
DEECA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
                
-	    SHEX("65EB4BD5ECCA7164CE9B66727F112C1AC6120DDD200DCB5CE75B7487843FCDB8"));
-  test_hash(&amp;nettle_sha3_256, /* 217 octets */
-	    SHEX("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC3 \
0FC10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377 \
D165B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6 \
BA42F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42 \
07033B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
                
-	    SHEX("D7155F6D3A90801F5E547689389FF62A604C81B7C1583D9204AC6B0194F0E8DD"));
-  test_hash(&amp;nettle_sha3_256, /* 218 octets */
-	    SHEX("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5 \
D7BE5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7 \
D89E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C5500 \
08FAAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084 \
61804BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
                
-	    SHEX("AA7ADAF16F39E398B4AB0ADA037710556B720B0248D84817B2CFDF7600933595"));
-  test_hash(&amp;nettle_sha3_256, /* 219 octets */
-	    SHEX("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296 \
F98379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998 \
704D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368 \
931E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4 \
102A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
                
-	    SHEX("B195463FE22A160802BE0A0464EE3AB4D2B117DE517B331C7BF04C8BA90C6120"));
-  test_hash(&amp;nettle_sha3_256, /* 220 octets */
-	    SHEX("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F2 \
89FBF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1D \
C378F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F \
2CA082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B68 \
67D74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
                
-	    SHEX("9F9296C53E753A4DE4E5C5A547F51763A96903B083FBC7A7828EFFE4763A7CE6"));
-  test_hash(&amp;nettle_sha3_256, /* 221 octets */
-	    SHEX("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E81 \
2C39F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8 \
D22C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568 \
83413D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68 \
454779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
                
-	    SHEX("51DE4090AEC36F6C446476C709253272CAB595D9887CA5D52A9B38086854D58F"));
-  test_hash(&amp;nettle_sha3_256, /* 222 octets */
-	    SHEX("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E \
4DAAE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D3750 \
77F2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB \
1CB6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF81 \
1A13F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
                
-	    SHEX("87A17400F919F2F53232B2205E1E8B14BD5698A76E74B9BDD5638A5C7BA5DE1E"));
-  test_hash(&amp;nettle_sha3_256, /* 223 octets */
-	    SHEX("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FD \
D28C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27 \
A6584C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026 \
EA542076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AE \
F5BF0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
                
-	    SHEX("9742536C461D0C3503A6C943FA8105DBCD1E542F728D71CCC0517CFFC232EA68"));
-  test_hash(&amp;nettle_sha3_256, /* 224 octets */
-	    SHEX("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF450 \
82C4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F60651 \
9AEA0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05 \
BFB1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA0 \
9D21E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
                
-	    SHEX("AE3BF0936497A2955DF874B7F2685314C7606030B9C6E7BFB8A8DFF9825957B5"));
-  test_hash(&amp;nettle_sha3_256, /* 225 octets */
-	    SHEX("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73 \
975809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB \
4D1BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE \
3FF6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171 \
D1651001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
                
-	    SHEX("5FE0216DCC1BDB48F3375B9173B7B232939AA2177C6D056E908C8F2B9293B030"));
-  test_hash(&amp;nettle_sha3_256, /* 226 octets */
-	    SHEX("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF21 \
11B97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4 \
957A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198 \
B7E838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B \
3DFA269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
                
-	    SHEX("C339904EC865F24FB3F88F142A8786D770934E006EAEDDBF45ACBB6B38431021"));
-  test_hash(&amp;nettle_sha3_256, /* 227 octets */
-	    SHEX("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23 \
697ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACD \
A897944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBC \
E60827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE6117 \
9FE84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
                
-	    SHEX("4CA8B7FEBDF0A8062E9B76185CF4165071BB30928C18F14338C305626789C6D3"));
-  test_hash(&amp;nettle_sha3_256, /* 228 octets */
-	    SHEX("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F \
152FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE \
62AADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E4 \
2D168B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE901150 \
4A49E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
                
-	    SHEX("23D2614420859B2F13AC084453DD35C33FE47C894DD50C087FD1653FCAEEA00B"));
-  test_hash(&amp;nettle_sha3_256, /* 229 octets */
-	    SHEX("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06 \
35284D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF5207968 \
41E58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E19385666137 \
6C81CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C \
07DC819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
                
-	    SHEX("5590BB75247D7CD0B35620F0062B90FFB2A24DE41220ED629D9E9A7ABCADFB51"));
-  test_hash(&amp;nettle_sha3_256, /* 230 octets */
-	    SHEX("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3D \
AC9F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47 \
971B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70 \
D9423798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7 \
FEBAA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
                
-	    SHEX("E5932441B012E503B0B0C6104703BA02613E472AD65655C085B0ADB07656B28F"));
-  test_hash(&amp;nettle_sha3_256, /* 231 octets */
-	    SHEX("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645 \
CA14E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8 \
BD0B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C \
0BA854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B \
18FE34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
                
-	    SHEX("21C0D84EB7B61774F97DB5D9ACF1DFFAFB662C01ED291A442BEC6F14D1334699"));
-  test_hash(&amp;nettle_sha3_256, /* 232 octets */
-	    SHEX("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE87 \
5DA0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94 \
311051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B \
349939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB44 \
44B85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
                
-	    SHEX("0D1E6BB88188B49AF0A9A05EB1AF94255E6799515A2F8EB46AA6AF9A9DD5B9E0"));
-  test_hash(&amp;nettle_sha3_256, /* 233 octets */
-	    SHEX("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBB \
D5801AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422 \
9005F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A94 \
26ECEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB74 \
48F50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
                
-	    SHEX("935DED24F5CECC69E1F012B60B7831ABCE7EF50EEB0BEA7F816C3DBF2B4ABDC1"));
-  test_hash(&amp;nettle_sha3_256, /* 234 octets */
-	    SHEX("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FA \
C4FDF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425F \
F7F1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6F \
BF5534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526D \
C643872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
                
-	    SHEX("6755BF7E60E4E07965BAC24E51B1DE93E3DD42AE780F256647D4CC2EF8EFF771"));
-  test_hash(&amp;nettle_sha3_256, /* 235 octets */
-	    SHEX("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F5 \
4EDE927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747B \
BB53652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0ED \
E838AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F \
02B64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
                
-	    SHEX("62C9F5E5B56E2994327A7F9A03888DA7BAD67E387593803B1807482B137B4509"));
-  test_hash(&amp;nettle_sha3_256, /* 236 octets */
-	    SHEX("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51 \
F1534BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF14 \
30A9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19 \
AFA65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB \
93D2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
                
-	    SHEX("9927FA5EFD86304E73D54AA4928818C05B01504672C529471394A82E049E5F95"));
-  test_hash(&amp;nettle_sha3_256, /* 237 octets */
-	    SHEX("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267 \
512CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE5121 \
33BB7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627A \
AC02ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E \
742EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
                
-	    SHEX("84E056BF7BDFC73A3AAA95B00A74A136D776069BEEB304423BEAD90120DB6350"));
-  test_hash(&amp;nettle_sha3_256, /* 238 octets */
-	    SHEX("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBB \
E2B01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9 \
B0F663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F8386 \
9CA27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D \
6D055B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
                
-	    SHEX("401C3BE59CC373453AEF9603F7335C1D5FE669909A1425D7671DCB84A49887CA"));
-  test_hash(&amp;nettle_sha3_256, /* 239 octets */
-	    SHEX("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0D \
D8E9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07 \
A38F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8 \
AAE141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A90 \
16F2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
                
-	    SHEX("020485DCD264296AFDB7F643CA828C93356F1714CBCC2FBBDD30F9896C3F2789"));
-  test_hash(&amp;nettle_sha3_256, /* 240 octets */
-	    SHEX("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA \
67273BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1 \
466E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAF \
CD3F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B8 \
5AE5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
                
-	    SHEX("F8C43E28816BB41993BDB866888F3CC59EFBA208390144D3878DBF9FBFA1D57E"));
-  test_hash(&amp;nettle_sha3_256, /* 241 octets */
-	    SHEX("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1 \
A71D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69 \
A7A682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0 \
C8F9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7 \
801A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
                
-	    SHEX("4EA524E705020284B18284E34683725590E1EE565A6FF598ED4D42B1C987471E"));
-  test_hash(&amp;nettle_sha3_256, /* 242 octets */
-	    SHEX("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48 \
A27D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68 \
020C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C1 \
4B4377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C \
41CCBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
                
-	    SHEX("E4963E74AE01FF7774B96B4F614D1CB2A4CF8D206ED93C66FA42F71432BE2C3F"));
-  test_hash(&amp;nettle_sha3_256, /* 243 octets */
-	    SHEX("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC057828908 \
2B2A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE4920 \
87D7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA \
800E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1 \
8867B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
                
-	    SHEX("0F0D72BF8C0198459E45ECE9CC18E930CB86263ACCF1FC7A00BC857AC9F201AD"));
-  test_hash(&amp;nettle_sha3_256, /* 244 octets */
-	    SHEX("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E972 \
6C690D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9 \
359AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B \
5F65E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF374 \
5F0EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
                
-	    SHEX("DD1D2A92B3F3F3902F064365838E1F5F3468730C343E2974E7A9ECFCD84AA6DB"));
-  test_hash(&amp;nettle_sha3_256, /* 245 octets */
-	    SHEX("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3 \
796141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C \
5539FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61 \
694301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49 \
171433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
                
-	    SHEX("21BF20664CEC2CD2CEB1DFFC1D78893D5CA1A7DA88EB6BFD0C6EFCA6190C9E15"));
-  test_hash(&amp;nettle_sha3_256, /* 246 octets */
-	    SHEX("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4 \
DE9C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B4 \
5C966B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF1 \
02D23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F \
5D7297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
                
-	    SHEX("6472D7C530B548E4B47D2278D7172B421A0FB6398A2823DD2F2B26208AF8942E"));
-  test_hash(&amp;nettle_sha3_256, /* 247 octets */
-	    SHEX("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82 \
EA7D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5 \
577B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3 \
450CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4E \
D5E607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
                
-	    SHEX("2AC7FF80EE36D500995C973B8746D8466715E6D8B0F554AACB5D2876D7F5B874"));
-  test_hash(&amp;nettle_sha3_256, /* 248 octets */
-	    SHEX("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA9 \
09FDF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4 \
BABD9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D \
619BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D \
001EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089 \
                612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
                
-	    SHEX("9FF81D575F7BF0C4EF340B4279D56E16CE68821AFCDF2A69105D4F9CADADD3CF"));
-  test_hash(&amp;nettle_sha3_256, /* 249 octets */
-	    SHEX("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B56 \
2B288D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944 \
1627A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C29611453151305493 \
11FC07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9 \
A7CF97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A192860 \
                4B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
                
-	    SHEX("09EDC465D4FD91C5E86B292F041BCC17571E1F2E17D584DFF21DD7DD8D8BFF35"));
-  test_hash(&amp;nettle_sha3_256, /* 250 octets */
-	    SHEX("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A7 \
3D80A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A5 \
1B56D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B \
3A356001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90E \
BD090AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911 \
                F165D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"),
                
-	    SHEX("C6D86CC4CCEF3BB70BF7BFDDEC6A9A04A0DD0A68FE1BF51C14648CF506A03E98"));
-  test_hash(&amp;nettle_sha3_256, /* 251 octets */
-	    SHEX("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC \
7EC6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699 \
DF35D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5 \
D397FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343 \
7095707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A0748 \
4A5D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"),
                
-	    SHEX("1AFC9BA63EEA27603B3A7A5562E12B31E8FE9A96812B531E9D048385FB76D44F"));
-  test_hash(&amp;nettle_sha3_256, /* 252 octets */
-	    SHEX("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03 \
742636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EE \
AD3E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A \
4E7B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED \
122A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6 \
772E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
                
-	    SHEX("9B5E15531385F0D495FDBE686E3E02ECA42B9F1B1CE8837AD3B3E42E6198050A"));
-  test_hash(&amp;nettle_sha3_256, /* 253 octets */
-	    SHEX("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A474299 \
22C4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D \
7E8B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD99 \
7CEFC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B25 \
46FE05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B7 \
15C1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
                
-	    SHEX("216FC325F942EED08401527A8F41C088527C6479342622C907EA08FF3290F8C6"));
-  test_hash(&amp;nettle_sha3_256, /* 254 octets */
-	    SHEX("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC2 \
0AB4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D0078 \
5E57788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993 \
F92B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B73 \
0AD3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C \
39CF421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
                
-	    SHEX("43184B9F2DB5B6DA5160BC255DBE19A0C94533B884809815B7B326D868589EDC"));
-  test_hash(&amp;nettle_sha3_256, /* 255 octets */
-	    SHEX("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23 \
346775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD \
181C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BB \
A40489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B61836 \
39DCFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C5 \
65CCA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
                
-	    SHEX("348FB774ADC970A16B1105669442625E6ADAA8257A89EFFDB5A802F161B862EA"));
+  test_hash (&amp;nettle_sha3_256,	/* 0 octets */
+	     SHEX (""),
+	     SHEX
+	     ("A7FFC6F8BF1ED76651C14756A061D662F580FF4DE43B49FA82D80A4B80F8434A"));
+  test_hash (&amp;nettle_sha3_256,	/* 1 octets */
+	     SHEX ("CC"),
+	     SHEX
+	     ("677035391CD3701293D385F037BA32796252BB7CE180B00B582DD9B20AAAD7F0"));
+  test_hash (&amp;nettle_sha3_256,	/* 2 octets */
+	     SHEX ("41FB"),
+	     SHEX
+	     ("39F31B6E653DFCD9CAED2602FD87F61B6254F581312FB6EEEC4D7148FA2E72AA"));
+  test_hash (&amp;nettle_sha3_256,	/* 3 octets */
+	     SHEX ("1F877C"),
+	     SHEX
+	     ("BC22345E4BD3F792A341CF18AC0789F1C9C966712A501B19D1B6632CCD408EC5"));
+  test_hash (&amp;nettle_sha3_256,	/* 4 octets */
+	     SHEX ("C1ECFDFC"),
+	     SHEX
+	     ("C5859BE82560CC8789133F7C834A6EE628E351E504E601E8059A0667FF62C124"));
+  test_hash (&amp;nettle_sha3_256,	/* 5 octets */
+	     SHEX ("21F134AC57"),
+	     SHEX
+	     ("55BD9224AF4EED0D121149E37FF4D7DD5BE24BD9FBE56E0171E87DB7A6F4E06D"));
+  test_hash (&amp;nettle_sha3_256,	/* 6 octets */
+	     SHEX ("C6F50BB74E29"),
+	     SHEX
+	     ("AE0CBC757D4AB088E172ABFD8746289950F92D38A25295658DBF744B5635AF04"));
+  test_hash (&amp;nettle_sha3_256,	/* 7 octets */
+	     SHEX ("119713CC83EEEF"),
+	     SHEX
+	     ("E340C9A44373EFCC212F3CB66A047AC34C87FF1C58C4A14B16A2BFC34698BB1D"));
+  test_hash (&amp;nettle_sha3_256,	/* 8 octets */
+	     SHEX ("4A4F202484512526"),
+	     SHEX
+	     ("BA4FB009D57A5CEB85FC64D54E5C55A55854B41CC47AD15294BC41F32165DFBA"));
+  test_hash (&amp;nettle_sha3_256,	/* 9 octets */
+	     SHEX ("1F66AB4185ED9B6375"),
+	     SHEX
+	     ("B9886EF905C8BDD272EDA8298865E0769869F1C964460D1AA9D7A0C687707CCD"));
+  test_hash (&amp;nettle_sha3_256,	/* 10 octets */
+	     SHEX ("EED7422227613B6F53C9"),
+	     SHEX
+	     ("FAB8F88D3191E21A725B21C63A02CAD3FA7C450EF8584B94CFA382F393422455"));
+  test_hash (&amp;nettle_sha3_256,	/* 11 octets */
+	     SHEX ("EAEED5CDFFD89DECE455F1"),
+	     SHEX
+	     ("9363ACD3F48BB91A8998AA0E8DF75C971770A16A71E7D2334409734CD7D0A9EE"));
+  test_hash (&amp;nettle_sha3_256,	/* 12 octets */
+	     SHEX ("5BE43C90F22902E4FE8ED2D3"),
+	     SHEX
+	     ("16932F6F65DEAAD5780E25AB410C66B0E4198EBA9F4ED1A25EE24F7879FAEFE2"));
+  test_hash (&amp;nettle_sha3_256,	/* 13 octets */
+	     SHEX ("A746273228122F381C3B46E4F1"),
+	     SHEX
+	     ("1C28100E0EF50671C7EA3E024FA3BA9DA2EBDDB4DE264C3A2426C36AD3F91C61"));
+  test_hash (&amp;nettle_sha3_256,	/* 14 octets */
+	     SHEX ("3C5871CD619C69A63B540EB5A625"),
+	     SHEX
+	     ("8183BE4875FAB7EC5F99ED94F5F900CF1D6B953D8F71E1E7CC008687980E613A"));
+  test_hash (&amp;nettle_sha3_256,	/* 15 octets */
+	     SHEX ("FA22874BCC068879E8EF11A69F0722"),
+	     SHEX
+	     ("3B1A6D21FE44691DAC4EB7C593A6D8523CB606E63CF00E94D711A574248DACA5"));
+  test_hash (&amp;nettle_sha3_256,	/* 16 octets */
+	     SHEX ("52A608AB21CCDD8A4457A57EDE782176"),
+	     SHEX
+	     ("2C7E7CB356FDC68EC8927E499D2A6BAE2B781817919C829EBBE8225BAED46967"));
+  test_hash (&amp;nettle_sha3_256,	/* 17 octets */
+	     SHEX ("82E192E4043DDCD12ECF52969D0F807EED"),
+	     SHEX
+	     ("C7B12EFF692D842110CC39AC60616707ACB3F9B0F1CB361B94577EFC529CA26C"));
+  test_hash (&amp;nettle_sha3_256,	/* 18 octets */
+	     SHEX ("75683DCB556140C522543BB6E9098B21A21E"),
+	     SHEX
+	     ("493EBAEBC04776F4E067555AFA09B58C850FDF1B0E22D4BF006CE41C091DC762"));
+  test_hash (&amp;nettle_sha3_256,	/* 19 octets */
+	     SHEX ("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
+	     SHEX
+	     ("1D01F3120ECFBDD28DCE44317666CF864F52391B9ECA3843DB45667C2E0A98AD"));
+  test_hash (&amp;nettle_sha3_256,	/* 20 octets */
+	     SHEX ("E26193989D06568FE688E75540AEA06747D9F851"),
+	     SHEX
+	     ("2C1E61E5D45203F27B86F1293A80BAB34192DAF42B8623B12005B2FB1C18ACB1"));
+  test_hash (&amp;nettle_sha3_256,	/* 21 octets */
+	     SHEX ("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
+	     SHEX
+	     ("AD0E3F29767067E929D1CECD95582DF8F2A9BEB92EAA27EEB315F620365A9244"));
+  test_hash (&amp;nettle_sha3_256,	/* 22 octets */
+	     SHEX ("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
+	     SHEX
+	     ("2B4EB5DE20E86074CABB55BFA63A5C8C6AE15679302061845B9CF233E17C906B"));
+  test_hash (&amp;nettle_sha3_256,	/* 23 octets */
+	     SHEX ("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
+	     SHEX
+	     ("6AE04C6C6F3651F1F64C0AD69733990B41747C93F87ACB813BB25BB1FC0EFF07"));
+  test_hash (&amp;nettle_sha3_256,	/* 24 octets */
+	     SHEX ("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
+	     SHEX
+	     ("40F9F55BC55DA466BC3DC1F89835A64094572DE73D64ED6646A1D3B667BE70A9"));
+  test_hash (&amp;nettle_sha3_256,	/* 25 octets */
+	     SHEX ("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
+	     SHEX
+	     ("C64BECF7B75FC885D5853924F2B7D37ABCEFD3DA126BB817697E1A09152B1EBE"));
+  test_hash (&amp;nettle_sha3_256,	/* 26 octets */
+	     SHEX ("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
+	     SHEX
+	     ("57D46A6BC8FAB33601538DAD27F98C66443032CC3912434C28EB88D0AF44C52C"));
+  test_hash (&amp;nettle_sha3_256,	/* 27 octets */
+	     SHEX ("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
+	     SHEX
+	     ("7C956503D5B4DBB764FF8E66FA74CE0F9132DA90EA3543F669C9DD08E413E33C"));
+  test_hash (&amp;nettle_sha3_256,	/* 28 octets */
+	     SHEX
+	     ("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
+	     SHEX
+	     ("6DE164A9626D5A4F54D854AC158994F35A8E362ECC753F55182790934A2E0D06"));
+  test_hash (&amp;nettle_sha3_256,	/* 29 octets */
+	     SHEX
+	     ("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
+	     SHEX
+	     ("B760312BD1B279FC672479D21C5ED349E5FE96F08940237B4515452721C49A16"));
+  test_hash (&amp;nettle_sha3_256,	/* 30 octets */
+	     SHEX
+	     ("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
+	     SHEX
+	     ("94FC255DE4EF19C0DA4B09B2E2FAC21F20048B46F17C30685ABE40D5C743F375"));
+  test_hash (&amp;nettle_sha3_256,	/* 31 octets */
+	     SHEX
+	     ("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
+	     SHEX
+	     ("39A4A0FFC4603698AE0A4F3D24B1BC42AC7A2D7D923E7A5D602453E82D5323C5"));
+  test_hash (&amp;nettle_sha3_256,	/* 32 octets */
+	     SHEX
+	     ("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
+	     SHEX
+	     ("2F1A5F7159E34EA19CDDC70EBF9B81F1A66DB40615D7EAD3CC1F1B954D82A3AF"));
+  test_hash (&amp;nettle_sha3_256,	/* 33 octets */
+	     SHEX
+	     ("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
+	     SHEX
+	     ("1C57FE0E38CD3A124EAA6CD87F70A079BCCC073A341E8C0EB1976FB3A3F7B774"));
+  test_hash (&amp;nettle_sha3_256,	/* 34 octets */
+	     SHEX
+	     ("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
+	     SHEX
+	     ("A905603B186EF4F2D5B2D1BCFDA504C68ED5EB9B0C7B7EA2A001575F5AA69E68"));
+  test_hash (&amp;nettle_sha3_256,	/* 35 octets */
+	     SHEX
+	     ("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
+	     SHEX
+	     ("FFFD39F7C451788EB0316F429EA0A7C0AC8091657ACA28F1560ED5775E8C4C12"));
+  test_hash (&amp;nettle_sha3_256,	/* 36 octets */
+	     SHEX
+	     ("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
+	     SHEX
+	     ("6F55BECD168E0939BA2FA090257B1727FC66491A44493279A5BEACB9E3435324"));
+  test_hash (&amp;nettle_sha3_256,	/* 37 octets */
+	     SHEX
+	     ("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
 +	     SHEX
+	     ("84649BFFCD48527B9288E8DA5F52FBAB2604DC5A91C4B0B87D477DBD7B40B6AE"));
+  test_hash (&amp;nettle_sha3_256,	/* 38 octets */
+	     SHEX
+	     ("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
 +	     SHEX
+	     ("D4055B4E3E2AEA1C67CC99FD409D574E53E1E296CF9EEF73C472AB92A6CB6609"));
+  test_hash (&amp;nettle_sha3_256,	/* 39 octets */
+	     SHEX
+	     ("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
 +	     SHEX
+	     ("5694CA2F3B9962226A87163AB38325BCDC898A732DFEB2C36DB4EB88616B8741"));
+  test_hash (&amp;nettle_sha3_256,	/* 40 octets */
+	     SHEX
+	     ("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
 +	     SHEX
+	     ("8CF287AD03AB4A74086620CFA4CCE74F48FA5CDB15EC02B1F721736A4F849E60"));
+  test_hash (&amp;nettle_sha3_256,	/* 41 octets */
+	     SHEX
+	     ("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
 +	     SHEX
+	     ("C5D5AF22A4DF9ACD0C056FA30D8E240B679A20D4D2630260F779FF815CA82D7D"));
+  test_hash (&amp;nettle_sha3_256,	/* 42 octets */
+	     SHEX
+	     ("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
 +	     SHEX
+	     ("0AC75279ADFF65660464550A283FECD4E0610D88F35574C3D7AC5D22262A2FE8"));
+  test_hash (&amp;nettle_sha3_256,	/* 43 octets */
+	     SHEX
+	     ("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
 +	     SHEX
+	     ("81917AE290DBBA17289A8A67E5C2E8B12D3DDE0EFE9F990198A1763FF4F3DDA7"));
+  test_hash (&amp;nettle_sha3_256,	/* 44 octets */
+	     SHEX
+	     ("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
 +	     SHEX
+	     ("138E75E72FDDD927E591315AF8D3ABA280EFA36230A3309A97BCDE5A78C31589"));
+  test_hash (&amp;nettle_sha3_256,	/* 45 octets */
+	     SHEX
+	     ("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
 +	     SHEX
+	     ("21BCDAD3FEF3E5B859CB0912A2991EFA661BAD812747292EF0F79A8FCC6B4E98"));
+  test_hash (&amp;nettle_sha3_256,	/* 46 octets */
+	     SHEX
+	     ("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
 +	     SHEX
+	     ("8D6FD9C559B0B4948F91337916084C0082A16A0755B0A00811096E973E48B3C8"));
+  test_hash (&amp;nettle_sha3_256,	/* 47 octets */
+	     SHEX
+	     ("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
 +	     SHEX
+	     ("1DD23AE7AADD61E712BDD82BD60A70DD9D66C9FD79DBFD8669E3EAABF7901CDC"));
+  test_hash (&amp;nettle_sha3_256,	/* 48 octets */
+	     SHEX
+	     ("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
 +	     SHEX
+	     ("34F8607EC10C092C1BA0B6565CE6197062C4E1A35A8E8C723E48A2D2416C3790"));
+  test_hash (&amp;nettle_sha3_256,	/* 49 octets */
+	     SHEX
+	     ("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
 +	     SHEX
+	     ("19A8577FC90FAE5D6A6B2E0C1FF155515502CFA1757029C09BEBBFA263D9A363"));
+  test_hash (&amp;nettle_sha3_256,	/* 50 octets */
+	     SHEX
+	     ("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
 +	     SHEX
+	     ("9D9DBB4CE7D01D009E72A66051ACC16805E49F598CBE430C5D4C22A881A64B3F"));
+  test_hash (&amp;nettle_sha3_256,	/* 51 octets */
+	     SHEX
+	     ("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
 +	     SHEX
+	     ("13F0D951B64481135466CFCCBE52418CC1D03FB16B5B696C35D724F6F55CBB6D"));
+  test_hash (&amp;nettle_sha3_256,	/* 52 octets */
+	     SHEX
+	     ("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
 +	     SHEX
+	     ("FB2FE7B00B75C42305CF31DE14D98F904E8C46DC57BB6F94C282CA8C13DC45DB"));
+  test_hash (&amp;nettle_sha3_256,	/* 53 octets */
+	     SHEX
+	     ("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
 +	     SHEX
+	     ("D54CBF7D5C80AE11A0D0BAD4E95AB18B5F07C970621F3936447A48EEF818D06E"));
+  test_hash (&amp;nettle_sha3_256,	/* 54 octets */
+	     SHEX
+	     ("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
 +	     SHEX
+	     ("FF050A45ADEEF4CFC7D964102BA877C80320A37794893E6865965EC2547CD4C9"));
+  test_hash (&amp;nettle_sha3_256,	/* 55 octets */
+	     SHEX
+	     ("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
 +	     SHEX
+	     ("1BC1BCC70F638958DB1006AF37B02EBD8954EC59B3ACBAD12EACEDBC5B21E908"));
+  test_hash (&amp;nettle_sha3_256,	/* 56 octets */
+	     SHEX
+	     ("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
 +	     SHEX
+	     ("F7BDE239AD087AA7DABE42CC4D3C49380A026CD239A7FAAF34A2233469A44A4D"));
+  test_hash (&amp;nettle_sha3_256,	/* 57 octets */
+	     SHEX
+	     ("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
 +	     SHEX
+	     ("EF845AAC2AAF0A793108204FF380E0A30F2558E7ACDE4531AB22F8EC79E26A69"));
+  test_hash (&amp;nettle_sha3_256,	/* 58 octets */
+	     SHEX
+	     ("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
 +	     SHEX
+	     ("26DB514E01E034C678B636D40BA367DA2F37F67078BB576FF2B8559B3517484D"));
+  test_hash (&amp;nettle_sha3_256,	/* 59 octets */
+	     SHEX
+	     ("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
 +	     SHEX
+	     ("5DBD4B558463196211465C1FC32401FC2D8E41EBC5E6BADD1D8F7C4F090F728F"));
+  test_hash (&amp;nettle_sha3_256,	/* 60 octets */
+	     SHEX
+	     ("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
 +	     SHEX
+	     ("355C79FD6E6FA88ED402B6979FDE1ED805498ABEB101F4231B5D64D1439D552D"));
+  test_hash (&amp;nettle_sha3_256,	/* 61 octets */
+	     SHEX
+	     ("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
 +	     SHEX
+	     ("3D9C9BF09D88211C7E0056112D073EE85D00ACAA4DA7A668FA017B3273CD4D4B"));
+  test_hash (&amp;nettle_sha3_256,	/* 62 octets */
+	     SHEX
+	     ("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
 +	     SHEX
+	     ("67980D28E2E658E7A24A2593A28167A13D907D06F47729D47CA4FE1772F8B3DF"));
+  test_hash (&amp;nettle_sha3_256,	/* 63 octets */
+	     SHEX
+	     ("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
 +	     SHEX
+	     ("A8DF6B76DF41994F7593F1A81967E77EE180E31183D1C4A569DB854E61E99B05"));
+  test_hash (&amp;nettle_sha3_256,	/* 64 octets */
+	     SHEX
+	     ("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
 +	     SHEX
+	     ("27A6441EE939B46E2C378D7AFEB0E891C47A28120E488EFF0AB71AF08788CEB3"));
+  test_hash (&amp;nettle_sha3_256,	/* 65 octets */
+	     SHEX
+	     ("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
 +	     SHEX
+	     ("C4BB067383002DB44CA773918BB74104B604A583E12B06BE56C270F8B43512F2"));
+  test_hash (&amp;nettle_sha3_256,	/* 66 octets */
+	     SHEX
+	     ("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
 +	     SHEX
+	     ("AE773915CA642D80413330C9E0EE9BD06653C0023C5C0277100F3B1526EAA51D"));
+  test_hash (&amp;nettle_sha3_256,	/* 67 octets */
+	     SHEX
+	     ("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
 +	     SHEX
+	     ("1CF9D6CE9CB658556B76CD7EBA3E51393699AD500B1AB3F56172748DB7F59667"));
+  test_hash (&amp;nettle_sha3_256,	/* 68 octets */
+	     SHEX
+	     ("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
 +	     SHEX
+	     ("8D60E889E2B1020DAD4B523301F5F6BBAB6C781AF276085AF6765546FCFB95AC"));
+  test_hash (&amp;nettle_sha3_256,	/* 69 octets */
+	     SHEX
+	     ("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
 +	     SHEX
+	     ("DD4FF4B530552F48AF9A7530A6464819ED1A5B733084F709E41DAF1ACB35ECFD"));
+  test_hash (&amp;nettle_sha3_256,	/* 70 octets */
+	     SHEX
+	     ("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
 +	     SHEX
+	     ("7AC8D4BB53FC434DD8712DAEFEB474668F541418E6F617DBA523D8392EB0766E"));
+  test_hash (&amp;nettle_sha3_256,	/* 71 octets */
+	     SHEX
+	     ("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
 +	     SHEX
+	     ("F7B0E15A63232A2B800B23B311D357617DDFD1293E1FFE3F772692ADE3427152"));
+  test_hash (&amp;nettle_sha3_256,	/* 72 octets */
+	     SHEX
+	     ("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
 +	     SHEX
+	     ("B3D05AF7E8C406A7C2709223791D3F5F4B3129329993220053A36293AC2B0E06"));
+  test_hash (&amp;nettle_sha3_256,	/* 73 octets */
+	     SHEX
+	     ("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
 +	     SHEX
+	     ("6C47E2EA4BA29E17792DEFC4B707754C4664BDE15168A5100BF881EC7C02B258"));
+  test_hash (&amp;nettle_sha3_256,	/* 74 octets */
+	     SHEX
+	     ("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
 +	     SHEX
+	     ("82A66BED668DCC14AF12C14C976CE650049E9D1D9969B83D1DD3B6F1C07D252B"));
+  test_hash (&amp;nettle_sha3_256,	/* 75 octets */
+	     SHEX
+	     ("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
 +	     SHEX
+	     ("2F21D07D7B10683B9AC7A63E9FCC70CF9F887CB905F9BFF5332551288B288524"));
+  test_hash (&amp;nettle_sha3_256,	/* 76 octets */
+	     SHEX
+	     ("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
 +	     SHEX
+	     ("80202F01E7140DB4FEE490DCC50AFAFDF6A48CA33D362C7875B8E8DB9C9D0655"));
+  test_hash (&amp;nettle_sha3_256,	/* 77 octets */
+	     SHEX
+	     ("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BAFC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
 +	     SHEX
+	     ("B2330A189047E3117479A2F20B3407A7D119E4AD431FE06FF1FF2A106F2AB3A2"));
+  test_hash (&amp;nettle_sha3_256,	/* 78 octets */
+	     SHEX
+	     ("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4FCF \
4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"), +	 \
SHEX +	     ("BB9B9BB685C241F8D63FDBF0DBAABCEF7075ADD7BA405A2FFFE7AD5B23E021C7"));
+  test_hash (&amp;nettle_sha3_256,	/* 79 octets */
+	     SHEX
+	     ("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C588435548066EA \
2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"), \
+	     SHEX +	     ("F8316A367AA0316DA3562F319D522E81F4A8BD2E2108D2532126F4A903704BA3"));
 +  test_hash (&amp;nettle_sha3_256,	/* 80 octets */
+	     SHEX
+	     ("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F037AA \
58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
 +	     SHEX
+	     ("89E3EBD02B229CD759612A5521D867AB2A1594BC0B1FE6A78B7954CCC84CAF03"));
+  test_hash (&amp;nettle_sha3_256,	/* 81 octets */
+	     SHEX
+	     ("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D06D \
A83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
 +	     SHEX
+	     ("2E7CC875305EA6BB9C2FC770B9D84FD93B96405DF9B93307F6B5DE26E135724C"));
+  test_hash (&amp;nettle_sha3_256,	/* 82 octets */
+	     SHEX
+	     ("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F279E0 \
733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
 +	     SHEX
+	     ("ECAB75F28A728429CB433EC13310D1B850CCF522C38D2FA6DFA489963D6D6CA7"));
+  test_hash (&amp;nettle_sha3_256,	/* 83 octets */
+	     SHEX
+	     ("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A0D1 \
FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
 +	     SHEX
+	     ("021C9459D1451F3DA4C07C029A8681945C87C5BEBC6C30DA1D95C5C49D8AB95C"));
+  test_hash (&amp;nettle_sha3_256,	/* 84 octets */
+	     SHEX
+	     ("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541274 \
82BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
 +	     SHEX
+	     ("4642E21622F15B09B9413659680116BF2F96CAC2384B8C79F1328D5DD36D7A01"));
+  test_hash (&amp;nettle_sha3_256,	/* 85 octets */
+	     SHEX
+	     ("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F4B0 \
1F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
 +	     SHEX
+	     ("8DAA47C3572157266AD0276D5926AFF2872F06B0CD7B974A80D7A6827D41D782"));
+  test_hash (&amp;nettle_sha3_256,	/* 86 octets */
+	     SHEX
+	     ("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C7619A \
6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
 +	     SHEX
+	     ("345365232CE9AFC655DCE4BAC23F43C8ACBDF9016D4BC2344BE8D396A4919C34"));
+  test_hash (&amp;nettle_sha3_256,	/* 87 octets */
+	     SHEX
+	     ("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7FC5 \
C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
 +	     SHEX
+	     ("F52E102E57293878C28F29DEB47792324FE455A62FA7441AABCC16A9CFC40FFA"));
+  test_hash (&amp;nettle_sha3_256,	/* 88 octets */
+	     SHEX
+	     ("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E4CE \
FB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
 +	     SHEX
+	     ("2B89AA88B1B7F9F8EA461C4C5CAE4829125F45F5697DEADB8DB2E964524C0D91"));
+  test_hash (&amp;nettle_sha3_256,	/* 89 octets */
+	     SHEX
+	     ("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD591DF \
1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
 +	     SHEX
+	     ("3F3092365982C0B4278055BEEE9032FF9D1060E03C3B087E1A6197DEFC707E1A"));
+  test_hash (&amp;nettle_sha3_256,	/* 90 octets */
+	     SHEX
+	     ("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85DC95 \
286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
 +	     SHEX
+	     ("3C74AAE2F340A24178CBAB51004CBA1AAC3D91133C300715EA82C177269C0556"));
+  test_hash (&amp;nettle_sha3_256,	/* 91 octets */
+	     SHEX
+	     ("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96813 \
544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
 +	     SHEX
+	     ("0157C4BA44618DED11E9800AFA07A0D5B6C711FC16A576C5EDB71C4CC6894F82"));
+  test_hash (&amp;nettle_sha3_256,	/* 92 octets */
+	     SHEX
+	     ("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD55E6 \
34AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
 +	     SHEX
+	     ("8D53DBA107AAACB8422D6667F6778839F8965F8E4C8F4A851284CC91168A9030"));
+  test_hash (&amp;nettle_sha3_256,	/* 93 octets */
+	     SHEX
+	     ("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE40603230EC \
A6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
 +	     SHEX
+	     ("5163F02233E332AD9BE32C2346C9FCFE39AFA5FBE9BC1CFEB92F4920155B20EC"));
+  test_hash (&amp;nettle_sha3_256,	/* 94 octets */
+	     SHEX
+	     ("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CDC58 \
5FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
 +	     SHEX
+	     ("FAAF0E95217CA4B1568751EF2E4CD341D9EC33E16600BF09B92C6F1A6DF84D2E"));
+  test_hash (&amp;nettle_sha3_256,	/* 95 octets */
+	     SHEX
+	     ("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409226 \
1AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
 +	     SHEX
+	     ("B2C175D9D92AAA9EE72672F995B8DFD2DAAF6555A0327A508218A9B447F00BE8"));
+  test_hash (&amp;nettle_sha3_256,	/* 96 octets */
+	     SHEX
+	     ("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE49D \
0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
 +	     SHEX
+	     ("FB5388122306D37CEE790CAD1D3CDDBA8E9A93D5F9D78288B052482739C883FD"));
+  test_hash (&amp;nettle_sha3_256,	/* 97 octets */
+	     SHEX
+	     ("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A6E6 \
D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
 +	     SHEX
+	     ("1C2F8D418FF6718B18DD4C756DCC8ED0F4755E8C22497A6CC19F8D7AE7FD2DA7"));
+  test_hash (&amp;nettle_sha3_256,	/* 98 octets */
+	     SHEX
+	     ("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28EE1 \
1495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
 +	     SHEX
+	     ("7EA8116E6434C1CAA049069DBBD9B6F0E9DC6CDFD6A889343D3B2652803078FC"));
+  test_hash (&amp;nettle_sha3_256,	/* 99 octets */
+	     SHEX
+	     ("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B32A \
0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
 +	     SHEX
+	     ("736D888751FAAC4D8E78B45B95ABB15D40D98D8038C7225BE0F523D5439EA5B6"));
+  test_hash (&amp;nettle_sha3_256,	/* 100 octets */
+	     SHEX
+	     ("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC21C8 \
807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
 +	     SHEX
+	     ("90E10B1CA8D352794D7DBD7BAE410BEF25F0EC7D080E053F48674237E33EA45F"));
+  test_hash (&amp;nettle_sha3_256,	/* 101 octets */
+	     SHEX
+	     ("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666C0A \
72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
 +	     SHEX
+	     ("8A0A8D6D55CCCBE05EC74DC273B16D66C9B9006665EECB5B6023D2EA39C64554"));
+  test_hash (&amp;nettle_sha3_256,	/* 102 octets */
+	     SHEX
+	     ("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE62F3 \
9A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
 +	     SHEX
+	     ("122895D63AA6030FC8F23940C528E7A5D9C7FB170A79FE7BC42360CE50E25B7A"));
+  test_hash (&amp;nettle_sha3_256,	/* 103 octets */
+	     SHEX
+	     ("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041308 \
598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
 +	     SHEX
+	     ("3E04EE539505C52D814CAB3C5CDD7DF2D6EEE627EA44188153EA6B8C8BE5F6C2"));
+  test_hash (&amp;nettle_sha3_256,	/* 104 octets */
+	     SHEX
+	     ("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189D54 \
9A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
 +	     SHEX
+	     ("E360B424A5C06704D148352E04F4651F8D3B385C01F24FDA09D266D4ED7FF662"));
+  test_hash (&amp;nettle_sha3_256,	/* 105 octets */
+	     SHEX
+	     ("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB243 \
F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
 +	     SHEX
+	     ("0D3BECB9E1B4AE1F15C9EE98732B4796E99FD799F76ED7332A68AB36C77A1EF9"));
+  test_hash (&amp;nettle_sha3_256,	/* 106 octets */
+	     SHEX
+	     ("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A213 \
0DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
 +	     SHEX
+	     ("3AADD7E2086D383832489AA3088E903F5C6FA8E38DF2CF876E0B4DCDDCA5C923"));
+  test_hash (&amp;nettle_sha3_256,	/* 107 octets */
+	     SHEX
+	     ("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C81BD \
CE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
 +	     SHEX
+	     ("715CED5776A802EB8EE02C9D46543FF46FE7A9CD192FA7D4FFB6E81427FE1B71"));
+  test_hash (&amp;nettle_sha3_256,	/* 108 octets */
+	     SHEX
+	     ("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457BD2 \
5F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
 +	     SHEX
+	     ("DDE61F8BE25B8B23E1212C1C0B8A85A0D02D8548BB17D377133E3C06DDB58CA2"));
+  test_hash (&amp;nettle_sha3_256,	/* 109 octets */
+	     SHEX
+	     ("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2A09 \
002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
 +	     SHEX
+	     ("059F2BEDF4A6EEFB95FC5C0AE17556CE8BDDC5E1880FAB2F688A03A46BB28C5F"));
+  test_hash (&amp;nettle_sha3_256,	/* 110 octets */
+	     SHEX
+	     ("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C2C4 \
0F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
 +	     SHEX
+	     ("125B0EE7870A6F7EB4FD965D9E0B90D79FFFBC54A2018F4C68224682F3603F3F"));
+  test_hash (&amp;nettle_sha3_256,	/* 111 octets */
+	     SHEX
+	     ("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E7554B \
D002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
 +	     SHEX
+	     ("9A78E0B5A34CBF1716F14CF7B67EFDC4540A75CC646538A11A8EFD9D7CD7529F"));
+  test_hash (&amp;nettle_sha3_256,	/* 112 octets */
+	     SHEX
+	     ("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C985AC \
56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
 +	     SHEX
+	     ("42305A251A8009EDFD62C7D91910B96B9B5DD8FDA5B1326FE41EF6EEF978D1BE"));
+  test_hash (&amp;nettle_sha3_256,	/* 113 octets */
+	     SHEX
+	     ("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972AED \
D3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
 +	     SHEX
+	     ("6B9E8F3E82EA174EBC88A53C5DED06271D38F79E9CEC571A9D195EF549102EB8"));
+  test_hash (&amp;nettle_sha3_256,	/* 114 octets */
+	     SHEX
+	     ("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40198 \
B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
 +	     SHEX
+	     ("358DE4C1ED30F48B084F961F653FEBC69318F93883612D5A04B9139A14EC702E"));
+  test_hash (&amp;nettle_sha3_256,	/* 115 octets */
+	     SHEX
+	     ("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD73D0 \
17CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
 +	     SHEX
+	     ("4A7BD18AE10EB9458924AA5CA00D3F634AB9753628107F15FF2BF24CCD3B94F4"));
+  test_hash (&amp;nettle_sha3_256,	/* 116 octets */
+	     SHEX
+	     ("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14A52 \
9B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
 +	     SHEX
+	     ("9889E4B3B1294A01556FA9DE6A6A508A9A763D5133FDCD4937B6BB23CA3E1901"));
+  test_hash (&amp;nettle_sha3_256,	/* 117 octets */
+	     SHEX
+	     ("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED1543E \
5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
 +	     SHEX
+	     ("3D02B41985BDD1835CB474FB364C25C2CCA9DA0ED2FBBAB75524B410903815B9"));
+  test_hash (&amp;nettle_sha3_256,	/* 118 octets */
+	     SHEX
+	     ("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F325E \
894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
 +	     SHEX
+	     ("1CD92039BE4580C686796D5900EED431EBAD6EA566E9244E76BA6873EFCB49AB"));
+  test_hash (&amp;nettle_sha3_256,	/* 119 octets */
+	     SHEX
+	     ("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC3BD \
F8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
 +	     SHEX
+	     ("680C70B243163BE6E58ED3B8E2D85E6894E5E89501C444C8C0A2D776ACAD8599"));
+  test_hash (&amp;nettle_sha3_256,	/* 120 octets */
+	     SHEX
+	     ("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095BE4B \
A5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B0158F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
 +	     SHEX
+	     ("D65E823D2CE4EFFB9B27DBBF6EFCDA738AD152FBB12D2108D2EC6D050A3FB295"));
+  test_hash (&amp;nettle_sha3_256,	/* 121 octets */
+	     SHEX
+	     ("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C715C \
1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C216 \
20B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"), +	 \
SHEX +	     ("CE6D2DD8D5441FC15B888FED72061E129125431BEDEA32E00EE0A7655C06C358"));
+  test_hash (&amp;nettle_sha3_256,	/* 122 octets */
+	     SHEX
+	     ("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633ABD \
1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026CEE7 \
7BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"), \
+	     SHEX +	     ("280713C0FA7160289FBFEE5AA580AD82512839153DAE47DE0D154384A4D8B3ED"));
 +  test_hash (&amp;nettle_sha3_256,	/* 123 octets */
+	     SHEX
+	     ("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1857 \
815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB4C2 \
66272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
 +	     SHEX
+	     ("721FD872696F21DEAA9595C0CEE7BC07249601927C96A65826B4887CDBA1AE96"));
+  test_hash (&amp;nettle_sha3_256,	/* 124 octets */
+	     SHEX
+	     ("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753955 \
51E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095B73 \
DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
 +	     SHEX
+	     ("B53AF8620B39CAD2D698A176A070AEAA9FB67BD0335C3485A3B6C73A71DC5C5C"));
+  test_hash (&amp;nettle_sha3_256,	/* 125 octets */
+	     SHEX
+	     ("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C00FB \
BED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D0282F \
ED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
 +	     SHEX
+	     ("78A18BF0A52E6F77F15F7FFE4CA3C999E57E1C3F6BF10950581F403450EDB797"));
+  test_hash (&amp;nettle_sha3_256,	/* 126 octets */
+	     SHEX
+	     ("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031485 \
5F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7196 \
7A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
 +	     SHEX
+	     ("A7F0151EEE6B21FE827E69256D560E1EA8D939B80962FC7FA8610AC189402AD2"));
+  test_hash (&amp;nettle_sha3_256,	/* 127 octets */
+	     SHEX
+	     ("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B16D \
27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE765D \
E2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
 +	     SHEX
+	     ("0A09C4B18F5117F0E45D43E235BB14E55B162E99EB3744165196D04A854229F9"));
+  test_hash (&amp;nettle_sha3_256,	/* 128 octets */
+	     SHEX
+	     ("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F369 \
EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF0621C \
D54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
 +	     SHEX
+	     ("B7D031AA69B7B4D26A35B896D761314F1D61EB12DCC1E72AAF61B9CD48003AF9"));
+  test_hash (&amp;nettle_sha3_256,	/* 129 octets */
+	     SHEX
+	     ("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106594 \
893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B5DB \
812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
 +	     SHEX
+	     ("EC0858C9D017A2D3727CAADE7E4872684F17B822CAFECDA445A15CF30FAC8CF0"));
+  test_hash (&amp;nettle_sha3_256,	/* 130 octets */
+	     SHEX
+	     ("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA97879175AA \
BA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5744 \
7EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
 +	     SHEX
+	     ("71E1D610B576063F2B12F691220BEADF506BEC0A3A086BBE5864FB54F93DB556"));
+  test_hash (&amp;nettle_sha3_256,	/* 131 octets */
+	     SHEX
+	     ("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E477 \
743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B192 \
1881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
 +	     SHEX
+	     ("72A8A7493309080ACCCA2A2A21D641F2B9685B7362BE496DC7BC330659F8CFE1"));
+  test_hash (&amp;nettle_sha3_256,	/* 132 octets */
+	     SHEX
+	     ("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C348C2 \
B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C2A0 \
EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
 +	     SHEX
+	     ("AF19E988D37E2577DA4F43463789B73625D354FCCCBD10CD2C61FBDC8BB01827"));
+  test_hash (&amp;nettle_sha3_256,	/* 133 octets */
+	     SHEX
+	     ("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3BF88 \
E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3FE5 \
07BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
 +	     SHEX
+	     ("F1E9B9CEF2B37E4EC3A0FCD5EFF5BF7E3D49100AEBF018DC92FB6A40E4297704"));
+  test_hash (&amp;nettle_sha3_256,	/* 134 octets */
+	     SHEX
+	     ("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079B79 \
A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782917 \
417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
 +	     SHEX
+	     ("DD3EBE0CCA0CAD3AF72AF73FB49D40DBDCC4B1F1FF465CCAEFE672F77992ACA0"));
+  test_hash (&amp;nettle_sha3_256,	/* 135 octets */
+	     SHEX
+	     ("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF4067C \
3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55EA7 \
96FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
 +	     SHEX
+	     ("A19EEE92BB2097B64E823D597798AA18BE9B7C736B8059ABFD6779AC35AC81B5"));
+  test_hash (&amp;nettle_sha3_256,	/* 136 octets */
+	     SHEX
+	     ("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880EF5 \
0700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768DD4 \
17F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
 +	     SHEX
+	     ("DF673F4105379FF6B755EEAB20CEB0DC77B5286364FE16C59CC8A907AFF07732"));
+  test_hash (&amp;nettle_sha3_256,	/* 137 octets */
+	     SHEX
+	     ("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2CD2 \
BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47BB67 \
AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
 +	     SHEX
+	     ("D52432CF3B6B4B949AA848E058DCD62D735E0177279222E7AC0AF8504762FAA0"));
+  test_hash (&amp;nettle_sha3_256,	/* 138 octets */
+	     SHEX
+	     ("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882615 \
D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706330 \
1B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
 +	     SHEX
+	     ("07E65754D62E01B9A049D15DEC0D09C02F479CA2AEB4B18E37070B20F85A1B26"));
+  test_hash (&amp;nettle_sha3_256,	/* 139 octets */
+	     SHEX
+	     ("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0992 \
76296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777FA5F \
EAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
 +	     SHEX
+	     ("17A461B8EE507ABCFED51A50EF14891309FE402C569D94394CA7A3031BEFCD50"));
+  test_hash (&amp;nettle_sha3_256,	/* 140 octets */
+	     SHEX
+	     ("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC150773B6 \
FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA035 \
594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
 +	     SHEX
+	     ("A03C6B5B51AE4AA00912AF1CFB6C7B960EF58036156497CC567B1369149A5949"));
+  test_hash (&amp;nettle_sha3_256,	/* 141 octets */
+	     SHEX
+	     ("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29688 \
0A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3C6F \
405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
 +	     SHEX
+	     ("14C69C5EABDEFC9E3A1461A379EC92C32BC6B69071029CB3655159DB1A5251A7"));
+  test_hash (&amp;nettle_sha3_256,	/* 142 octets */
+	     SHEX
+	     ("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4064 \
DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1CE08 \
5FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
 +	     SHEX
+	     ("3CBE06887C8AE360E957EB08CA577834C457FADF418D0CB73967FA827A22A4D7"));
+  test_hash (&amp;nettle_sha3_256,	/* 143 octets */
+	     SHEX
+	     ("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA3742F \
F3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6A1E \
ED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
 +	     SHEX
+	     ("E58A947E98D6DD7E932D2FE02D9992E6118C0C2C606BDCDA06E7943D2C95E0E5"));
+  test_hash (&amp;nettle_sha3_256,	/* 144 octets */
+	     SHEX
+	     ("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579DB2 \
F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B39BD \
90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
 +	     SHEX
+	     ("A936FB9AF87FB67857B3EAD5C76226AD84DA47678F3C2FFE5A39FDB5F7E63FFB"));
+  test_hash (&amp;nettle_sha3_256,	/* 145 octets */
+	     SHEX
+	     ("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9035 \
321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B904821F3 \
2B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
 +	     SHEX
+	     ("3A654B88F88086C2751EDAE6D39248143CF6235C6B0B7969342C45A35194B67E"));
+  test_hash (&amp;nettle_sha3_256,	/* 146 octets */
+	     SHEX
+	     ("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F21A \
0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7DA2 \
B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
 +	     SHEX
+	     ("19A3CB3E8551F08FBBA5DB614E268F63D1F6A0C3689BBE973D59D35BB4F455D0"));
+  test_hash (&amp;nettle_sha3_256,	/* 147 octets */
+	     SHEX
+	     ("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3404 \
F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895AAA1 \
6ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
 +	     SHEX
+	     ("CA8CFB13973FF8597D6AAA806BD32E82F4EA68BAC3FB543F26687DE4B9CBE8BD"));
+  test_hash (&amp;nettle_sha3_256,	/* 148 octets */
+	     SHEX
+	     ("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D585E9 \
578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBEE4B \
BB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
 +	     SHEX
+	     ("9AE670FA85AB5C6B3BC76797CF24CD385110708137B6F8EFD8D1A21C39881C18"));
+  test_hash (&amp;nettle_sha3_256,	/* 149 octets */
+	     SHEX
+	     ("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F296 \
EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA992910EF \
4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
 +	     SHEX
+	     ("E32DF6218BA75FD4788A7E5727A7D68C5829C49346683FC213E433AF3DBA5AB5"));
+  test_hash (&amp;nettle_sha3_256,	/* 150 octets */
+	     SHEX
+	     ("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3B26 \
7B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A57B \
2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
 +	     SHEX
+	     ("028173E3C6C392E5D13AF748F3788D43449BC5DD5953124EA5EDF3930275F665"));
+  test_hash (&amp;nettle_sha3_256,	/* 151 octets */
+	     SHEX
+	     ("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97878 \
8C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9A93 \
BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
 +	     SHEX
+	     ("97450FC46F2E5DF8F81623B1CCA43FA50F51EA735E4421D7DFF66314D8E211BC"));
+  test_hash (&amp;nettle_sha3_256,	/* 152 octets */
+	     SHEX
+	     ("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29A0D \
C0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D503 \
09E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
 +	     SHEX
+	     ("AB4E5A70390577F8AE260D53CB0E70914F8B9398ABAA841F7807F1476046C64F"));
+  test_hash (&amp;nettle_sha3_256,	/* 153 octets */
+	     SHEX
+	     ("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C250 \
034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC93793D \
D6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
 +	     SHEX
+	     ("8118F2C157DF1250DB43B31183F442F89B322E496918838C5B668F9647AC6D6B"));
+  test_hash (&amp;nettle_sha3_256,	/* 154 octets */
+	     SHEX
+	     ("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933906 \
FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433F7D \
350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
 +	     SHEX
+	     ("736E30ACCC5559188412C797A1A5BE61D1F90F149401F631597944155A85FAF7"));
+  test_hash (&amp;nettle_sha3_256,	/* 155 octets */
+	     SHEX
+	     ("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286F8F \
17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0F55 \
231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
 +	     SHEX
+	     ("9599DEECCC698A24A461A7419E91939C741613F4CE887DBA89DC7E327C51F5BF"));
+  test_hash (&amp;nettle_sha3_256,	/* 156 octets */
+	     SHEX
+	     ("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E91F \
4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A80148550307310950D \
034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
 +	     SHEX
+	     ("BE0D871606A4C129CEF616F438600D5CBC0E9F49D2ADC8A86571C192361C3F4F"));
+  test_hash (&amp;nettle_sha3_256,	/* 157 octets */
+	     SHEX
+	     ("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE70457A \
9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BED9D \
E9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
 +	     SHEX
+	     ("4D30600C60ED94A0D2BCC17571A19BD0170CDACAC78D0421E0BBAE2A36A48B6D"));
+  test_hash (&amp;nettle_sha3_256,	/* 158 octets */
+	     SHEX
+	     ("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576B1C \
2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC4A4 \
71A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
 +	     SHEX
+	     ("3BD6FB72764F7AD4391B7B40AEA424ABD5F5561AC56F9E072C753D6090FA4BFB"));
+  test_hash (&amp;nettle_sha3_256,	/* 159 octets */
+	     SHEX
+	     ("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197B83 \
9957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1869 \
1A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
 +	     SHEX
+	     ("6689BB25BAEE0C582F8F1B0C87073BE366644DA859313BECF446435D2F6E899E"));
+  test_hash (&amp;nettle_sha3_256,	/* 160 octets */
+	     SHEX
+	     ("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B264E9 \
20394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8943 \
10A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
 +	     SHEX
+	     ("2628DDC7758208AA9F1E49497224EB268C6D2BCDAAB4820DE9C16A65C6F6017A"));
+  test_hash (&amp;nettle_sha3_256,	/* 161 octets */
+	     SHEX
+	     ("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67314 \
F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBBB81 \
53DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
 +	     SHEX
+	     ("DF448936EE72D9FE6CCFB37D183AAFDDC7908E016271AFA81EC083A10A144F5D"));
+  test_hash (&amp;nettle_sha3_256,	/* 162 octets */
+	     SHEX
+	     ("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9A0F \
2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246CE06 \
23A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
 +	     SHEX
+	     ("2BB4CEC22A4FECD83FBBBAD1E3835343E36C6CB66C26964A432EC4C70F3E17B4"));
+  test_hash (&amp;nettle_sha3_256,	/* 163 octets */
+	     SHEX
+	     ("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8E1B \
288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E37D \
89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA69107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
 +	     SHEX
+	     ("1462F2EA1C3580C0A2E8C0B30C27A608D82CD707F6D1A0AAD5CC7C3D1B8D6C30"));
+  test_hash (&amp;nettle_sha3_256,	/* 164 octets */
+	     SHEX
+	     ("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0B12 \
FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18F40 \
8C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383FD19 \
00B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"), +	 \
SHEX +	     ("617B412ED64F56D6DB36B7E52EAD618D95A091D65052C3F376A532D8BBDAF7C7"));
+  test_hash (&amp;nettle_sha3_256,	/* 165 octets */
+	     SHEX
+	     ("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D59896E3 \
A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB2D6 \
4496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB699 \
7BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"), \
+	     SHEX +	     ("82C541EA5CB15D1A4125F536825938C2358EEC2BDDC5D1CC4042DE3AF036CA55"));
 +  test_hash (&amp;nettle_sha3_256,	/* 166 octets */
+	     SHEX
+	     ("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4A43 \
26783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A805B6 \
A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5367 \
926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
 +	     SHEX
+	     ("684BB7932433218C616F0590B039CEFAC972828470647D1591CEAC889C893272"));
+  test_hash (&amp;nettle_sha3_256,	/* 167 octets */
+	     SHEX
+	     ("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017BBC \
F26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78F85 \
4FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232314 \
EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
 +	     SHEX
+	     ("508B2AF376BA6467CF982C767C848D2BDA8D068A53416F074A0C98C473D02F6B"));
+  test_hash (&amp;nettle_sha3_256,	/* 168 octets */
+	     SHEX
+	     ("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929BD9 \
689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BEA6F \
469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E884 \
A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
 +	     SHEX
+	     ("55E228BCBDA7061642D004373D4E6407B72A37381D1BEFFCBFBF9F5F6EA093EA"));
+  test_hash (&amp;nettle_sha3_256,	/* 169 octets */
+	     SHEX
+	     ("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73243 \
360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BDBBF \
D85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0424 \
B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
 +	     SHEX
+	     ("0523C09BBCFFE418D3FCD22C6ABF95ABFB38F94CE5562B8BFCD2EEA9FB729041"));
+  test_hash (&amp;nettle_sha3_256,	/* 170 octets */
+	     SHEX
+	     ("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D0786E \
99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD941DC \
B82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A462B8 \
3B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
 +	     SHEX
+	     ("DCBC258241ADED3799996C2AD6ED0E3D74CFCC67749D3480B2A9A78E5F8AFF82"));
+  test_hash (&amp;nettle_sha3_256,	/* 171 octets */
+	     SHEX
+	     ("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA7536AA \
E597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C3292E \
96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C43D \
6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
 +	     SHEX
+	     ("CBE8318E7B2FE72BFCD2530CCCECEA4018B1587F483B73F50CE5E84CED65E093"));
+  test_hash (&amp;nettle_sha3_256,	/* 172 octets */
+	     SHEX
+	     ("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F80B \
6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C7BB \
759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A1C2 \
441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
 +	     SHEX
+	     ("8CEA2960087048E6E6D47E31554F305FCC81E03E90BA8F8332DD86C6B6B38E03"));
+  test_hash (&amp;nettle_sha3_256,	/* 173 octets */
+	     SHEX
+	     ("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712154 \
8373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4CAF \
B37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255B4D \
231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
 +	     SHEX
+	     ("44E276991E5382BD7EB5ADCF1F79362804D346BEDFC6916F4DCA4B57240E9C99"));
+  test_hash (&amp;nettle_sha3_256,	/* 174 octets */
+	     SHEX
+	     ("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02D19 \
BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC839EA \
9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CAC1B \
ACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
 +	     SHEX
+	     ("80891A086AF385025068799F192411C689CC4E0D9A59F3F41DBB02A343F1A759"));
+  test_hash (&amp;nettle_sha3_256,	/* 175 octets */
+	     SHEX
+	     ("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3510 \
E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB3B1 \
17EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22F1B \
7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
 +	     SHEX
+	     ("77DDF034B7DFD6B292AA3B0C1E552F47B1D8C23078042CC58BB3DD4720B9EE4D"));
+  test_hash (&amp;nettle_sha3_256,	/* 176 octets */
+	     SHEX
+	     ("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310E5C \
0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E9723E \
FD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D3840C \
DFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
 +	     SHEX
+	     ("23D2688D867A18040E82F7876ACF04DC3A9C0140FEDD93EBE7ADF920B2F83DA4"));
+  test_hash (&amp;nettle_sha3_256,	/* 177 octets */
+	     SHEX
+	     ("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88453 \
1D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F75379E \
9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C16E \
69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
 +	     SHEX
+	     ("2DF666FC5D4EAD1C3B10B9F8D4BB81AEA4F93D3873D5CE5CFBAC4B69435E1B7C"));
+  test_hash (&amp;nettle_sha3_256,	/* 178 octets */
+	     SHEX
+	     ("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F68E \
6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820ACE2 \
62D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E255337DA \
A06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
 +	     SHEX
+	     ("AF0C5474528032E2629B8FBB0E34405F7F251D41E73B5667BE3C07CCB2C1C953"));
+  test_hash (&amp;nettle_sha3_256,	/* 179 octets */
+	     SHEX
+	     ("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54261 \
9DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AADD7C \
E842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877E50 \
FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
 +	     SHEX
+	     ("9BBEF7A75391354A388AAA7CA035DC62D3231B80091BB7748F76E52D8E9F20F0"));
+  test_hash (&amp;nettle_sha3_256,	/* 180 octets */
+	     SHEX
+	     ("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D50A \
A83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E688 \
094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D1BC \
AB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
 +	     SHEX
+	     ("B108457A6BD331BE43C9FE1E2A02E8C744C2BCC927A9C3C486F110DCCF907F6B"));
+  test_hash (&amp;nettle_sha3_256,	/* 181 octets */
+	     SHEX
+	     ("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D9663A \
CCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DBE7F \
B74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC554D8 \
E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
 +	     SHEX
+	     ("A61109838DFA5B146DF4E6C3BDBC7A477BE36B6228EBD91025012AF4CC0EB409"));
+  test_hash (&amp;nettle_sha3_256,	/* 182 octets */
+	     SHEX
+	     ("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F823 \
10356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D9F0 \
1AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78F68 \
10EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
 +	     SHEX
+	     ("4F0F30C890B0AB404961158573538FE9A2B234B94A0991F26D5EA04FDDC9C565"));
+  test_hash (&amp;nettle_sha3_256,	/* 183 octets */
+	     SHEX
+	     ("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0BD59 \
31839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55A91 \
16E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB1B9 \
327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
 +	     SHEX
+	     ("85459CFB0289599CDD67C473A0BA6DA616C608E367F58C50A03562424DCF1D06"));
+  test_hash (&amp;nettle_sha3_256,	/* 184 octets */
+	     SHEX
+	     ("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636C17 \
27EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B99880C \
87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA116E5 \
F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
 +	     SHEX
+	     ("5539D2E52A5A1BB3C246B0158356E2B2782FC13C10248937A0C4A40B091F6247"));
+  test_hash (&amp;nettle_sha3_256,	/* 185 octets */
+	     SHEX
+	     ("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7635 \
EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3BE9 \
377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035CD21 \
85BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
 +	     SHEX
+	     ("6D63419207B99D4DB1ADD795D852A8DAAC11B789AF0C7D6353036CB23F6428B4"));
+  test_hash (&amp;nettle_sha3_256,	/* 186 octets */
+	     SHEX
+	     ("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC45868AE \
9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E8B4 \
ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E745 \
9FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
 +	     SHEX
+	     ("D2090DAE0FC201B2B9C03DD482A8EB1FFD3CF70C55F98D6F39A41B8BDAC27A17"));
+  test_hash (&amp;nettle_sha3_256,	/* 187 octets */
+	     SHEX
+	     ("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB95D \
B2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F572B \
E5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC36F \
59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
 +	     SHEX
+	     ("C9E8F96BA75EAF371DCA35DC69138ECA8CB3F2823F3BE551D9DC8AA6A4ED4169"));
+  test_hash (&amp;nettle_sha3_256,	/* 188 octets */
+	     SHEX
+	     ("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36D44 \
C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A037 \
FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3CC0 \
3E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
 +	     SHEX
+	     ("233B0BC28143C32A668B0AB5D76BE5712C0387056FB0E79F2C2F7F1C31E4A86A"));
+  test_hash (&amp;nettle_sha3_256,	/* 189 octets */
+	     SHEX
+	     ("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29F79 \
031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE062CD \
D71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727083 \
513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
 +	     SHEX
+	     ("B79B5F8182D3FB4ABAB63E7CB26A8E0865AE8D79BD4C514AD8917D5ECB7FED8F"));
+  test_hash (&amp;nettle_sha3_256,	/* 190 octets */
+	     SHEX
+	     ("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B1B7 \
F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02E67 \
A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467998 \
BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
 +	     SHEX
+	     ("F680198DE2943D20E9D809FD8312D674C9A250DA22BA6E920E408F6F2C0E0739"));
+  test_hash (&amp;nettle_sha3_256,	/* 191 octets */
+	     SHEX
+	     ("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306BE8 \
4536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B922 \
964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E038F \
6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
 +	     SHEX
+	     ("A190DD73556086EA70BC31022D6A4F95D89DC099E2030C19311CC8988281278F"));
+  test_hash (&amp;nettle_sha3_256,	/* 192 octets */
+	     SHEX
+	     ("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D520EE \
F3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2DA2 \
B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C7941FC \
C82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
 +	     SHEX
+	     ("21166064C52B588C1EC7EA6DF1905A2B59BAD499B470F308A26B6E354DDFE58F"));
+  test_hash (&amp;nettle_sha3_256,	/* 193 octets */
+	     SHEX
+	     ("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478313 \
C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA23EC \
9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDBB48 \
EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
 +	     SHEX
+	     ("051E19906464EC7FDC3D37EE3BCEF63438EC5EDBEA5AA202A24B7F7190B689E0"));
+  test_hash (&amp;nettle_sha3_256,	/* 194 octets */
+	     SHEX
+	     ("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840EFE8 \
D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8A79 \
5AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036E24 \
E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
 +	     SHEX
+	     ("18FE66C0CD095C9CC811F5410B5CFDC1B152AE3CAB0C3328974E7D4BBEB40053"));
+  test_hash (&amp;nettle_sha3_256,	/* 195 octets */
+	     SHEX
+	     ("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC3553016608E \
F2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E76F \
8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01C9F \
0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
 +	     SHEX
+	     ("BDB42638921199D604294B5578CEBACCDF132E1D7AF7675B7768E50553FCB604"));
+  test_hash (&amp;nettle_sha3_256,	/* 196 octets */
+	     SHEX
+	     ("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF801 \
E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539E6A \
8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2762 \
2FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
 +	     SHEX
+	     ("CBD88209B530018A856C5C2321D7E485511CA1513661F1FDE1FA06F4603DE117"));
+  test_hash (&amp;nettle_sha3_256,	/* 197 octets */
+	     SHEX
+	     ("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61283 \
34F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6ACC \
86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22AA5 \
03C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
 +	     SHEX
+	     ("F0C4C1374F33A91DC657F8A3FA51763CBD0FBA1CAFDD2C595ED302AAB1AB75A9"));
+  test_hash (&amp;nettle_sha3_256,	/* 198 octets */
+	     SHEX
+	     ("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156C0B \
27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F939262D4 \
043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245EE36 \
1E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
 +	     SHEX
+	     ("F2157C165EEBDFD04451E9E6CF0B112BB148EB9C40E8B2427EE8EA57E60D5DD6"));
+  test_hash (&amp;nettle_sha3_256,	/* 199 octets */
+	     SHEX
+	     ("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491B48 \
529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF86A \
4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783453 \
5929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
 +	     SHEX
+	     ("0836ABBF77EF78E162DE8FB664B9996D5A03919B741EB4A3F02E7B97826569FA"));
+  test_hash (&amp;nettle_sha3_256,	/* 200 octets */
+	     SHEX
+	     ("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222B64 \
CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3EAEA \
BE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC23A7 \
9A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
 +	     SHEX
+	     ("84970C79316E89B70E2B186A69DB1A4C3E33C7A376B45C1B79BD346DD33EF4CE"));
+  test_hash (&amp;nettle_sha3_256,	/* 201 octets */
+	     SHEX
+	     ("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7A38 \
393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB32FD \
6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653F3C \
9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
 +	     SHEX
+	     ("06ED2EBC419D053949E88CC9C040B1EBCE74375AD0CE09C0CD4D562C62F8497D"));
+  test_hash (&amp;nettle_sha3_256,	/* 202 octets */
+	     SHEX
+	     ("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF84D5 \
8EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D01C \
4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384B3D \
A953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
 +	     SHEX
+	     ("CF9060AF3E4ED47316ACF51E5B92123CDC4827BD4AEF991588DCD8078B9EEA40"));
+  test_hash (&amp;nettle_sha3_256,	/* 203 octets */
+	     SHEX
+	     ("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295381 \
354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487AF49 \
CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6B72 \
24EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
 +	     SHEX
+	     ("63E407300F99FF2360F02AAE0ADA35F6C1A90AED2C63282B23A7990BAE307254"));
+  test_hash (&amp;nettle_sha3_256,	/* 204 octets */
+	     SHEX
+	     ("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9CB3 \
C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03681 \
9C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2E6D \
AB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
 +	     SHEX
+	     ("427741570D5E21590E5045A8450216365BA95C2E72455A3DBD694F13155DE1B7"));
+  test_hash (&amp;nettle_sha3_256,	/* 205 octets */
+	     SHEX
+	     ("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD469 \
D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7AA9C \
E013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFFB61 \
8E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
 +	     SHEX
+	     ("B5E60A019E8414D470AE702738BC358F1C80BB6FF7BDE4F2DBB56C299C764B16"));
+  test_hash (&amp;nettle_sha3_256,	/* 206 octets */
+	     SHEX
+	     ("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82316 \
CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033AE9 \
AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF076028C \
5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
 +	     SHEX
+	     ("C986BDAE9B13FBC92793619E4970ABC33398F2B5A57A6CBB40A622592E2695DF"));
+  test_hash (&amp;nettle_sha3_256,	/* 207 octets */
+	     SHEX
+	     ("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD0938DD \
E5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D743 \
F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1AD26 \
0AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C670 \
1290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"), +	 \
SHEX +	     ("224C7FC8A0EC3895E8969CE7C7F7ECAA54FE2EEC9AB3120726106F22AA297541"));
+  test_hash (&amp;nettle_sha3_256,	/* 208 octets */
+	     SHEX
+	     ("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928D7A \
D377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC41E0 \
D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0433 \
EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59D28 \
7F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"), \
+	     SHEX +	     ("FAF5E3B7A64629FFEEE07A67ED77A3A4F67F18C9381FE9B19F6EE601F5FB99AF"));
 +  test_hash (&amp;nettle_sha3_256,	/* 209 octets */
+	     SHEX
+	     ("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F97DF \
3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438DB1B \
B361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587AA4 \
6AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623047 \
C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
 +	     SHEX
+	     ("A8A98E6B3A005FCB319FEE58C5457D04B69D59F53873F6FCC6065D68F880833F"));
+  test_hash (&amp;nettle_sha3_256,	/* 210 octets */
+	     SHEX
+	     ("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F808 \
DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255DA9 \
843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01ACB8F \
0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F5920E \
6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
 +	     SHEX
+	     ("C89F2B346127EAB9E28095DC44918C1A1AAEAE04861C1DD0144A1EE07F823C18"));
+  test_hash (&amp;nettle_sha3_256,	/* 211 octets */
+	     SHEX
+	     ("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBFD4A \
43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8E66 \
AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F6252C0 \
407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA35C \
6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
 +	     SHEX
+	     ("E7A81ACBEF35D7B24B706549B41ABD82628CCFF9ACF41F2C8ADD28743688AE01"));
+  test_hash (&amp;nettle_sha3_256,	/* 212 octets */
+	     SHEX
+	     ("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCDDB7 \
08FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A1F7 \
6B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9B2D \
8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24AF8C \
8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
 +	     SHEX
+	     ("D81249143A69EA1C9DC168B55FFE06D46D0FBC007065110353D76C6CCE4FFE66"));
+  test_hash (&amp;nettle_sha3_256,	/* 213 octets */
+	     SHEX
+	     ("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0819 \
A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A1566FC \
7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431B4C \
40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2878 \
A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
 +	     SHEX
+	     ("AA8BBD4812142211212763BF8EE4D6E0AADAFE5E528AEA1FB1BE118806E49F66"));
+  test_hash (&amp;nettle_sha3_256,	/* 214 octets */
+	     SHEX
+	     ("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2A18 \
6964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C252 \
7B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0C37 \
92F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346D43 \
CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
 +	     SHEX
+	     ("4089B181DF5ECA5F14DAB1057AAAEECABA15F200FDDA0DE49357D6196FAAB44B"));
+  test_hash (&amp;nettle_sha3_256,	/* 215 octets */
+	     SHEX
+	     ("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9201 \
7F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299CAA \
792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA85B \
DDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2B63 \
ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
 +	     SHEX
+	     ("DEBF59BB233D05549853804FC67840821BD5802F87FC8A915B710D3E82070950"));
+  test_hash (&amp;nettle_sha3_256,	/* 216 octets */
+	     SHEX
+	     ("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81C3C \
A9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB558 \
E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC5A2 \
7D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66DEE \
CA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
 +	     SHEX
+	     ("0FDBA1C79F55F233A1217F522D6C81F777F330FADB565E1171F39E1788913342"));
+  test_hash (&amp;nettle_sha3_256,	/* 217 octets */
+	     SHEX
+	     ("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC30FC \
10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377D16 \
5B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6BA4 \
2F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42070 \
33B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
 +	     SHEX
+	     ("ED45A06E95A6539270B02290D71005F01C55BA077414C3BCDB379537E6DBEFC9"));
+  test_hash (&amp;nettle_sha3_256,	/* 218 octets */
+	     SHEX
+	     ("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5D7B \
E5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7D89 \
E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C550008F \
AAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084618 \
04BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
 +	     SHEX
+	     ("37E7CF6A9A31B0982B2479432B7838657741B0EE79ADDA1B287550EB325C78CC"));
+  test_hash (&amp;nettle_sha3_256,	/* 219 octets */
+	     SHEX
+	     ("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296F98 \
379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998704 \
D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368931 \
E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4102 \
A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
 +	     SHEX
+	     ("373704F641FAF2B918E22E9142ABF6B4AC71B6883AC4D7A075F626E947837D3F"));
+  test_hash (&amp;nettle_sha3_256,	/* 220 octets */
+	     SHEX
+	     ("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F289F \
BF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1DC37 \
8F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F2CA \
082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B6867D \
74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
 +	     SHEX
+	     ("EE5994B3D32BDAE58E72566FC24B886461217FDD7273E1608F0B2926B7923546"));
+  test_hash (&amp;nettle_sha3_256,	/* 221 octets */
+	     SHEX
+	     ("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E812C3 \
9F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8D22 \
C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568834 \
13D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68454 \
779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
 +	     SHEX
+	     ("6A584F9F4ACD8FC8E15DACD326291FE9311C20987225C51CF4251E52B47FA223"));
+  test_hash (&amp;nettle_sha3_256,	/* 222 octets */
+	     SHEX
+	     ("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E4DA \
AE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D375077F \
2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB1CB \
6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF811A1 \
3F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
 +	     SHEX
+	     ("4F92839CDDB0DF31D16A0DB53BBE07698A7C1912D5590D21155D45DB1B48CAB4"));
+  test_hash (&amp;nettle_sha3_256,	/* 223 octets */
+	     SHEX
+	     ("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FDD28 \
C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27A65 \
84C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026EA5 \
42076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AEF5B \
F0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
 +	     SHEX
+	     ("EAFD661F343AE834C621E074AC6903A2E3E6324F365B3432DFFA732F477AC129"));
+  test_hash (&amp;nettle_sha3_256,	/* 224 octets */
+	     SHEX
+	     ("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF45082C \
4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F606519AE \
A0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05BFB \
1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA09D2 \
1E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
 +	     SHEX
+	     ("3DCEC669C5D0176B1BDC002728D242C587DDA03B3ABFA6074523D3FAEF4820BE"));
+  test_hash (&amp;nettle_sha3_256,	/* 225 octets */
+	     SHEX
+	     ("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73975 \
809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB4D1 \
BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE3FF \
6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171D16 \
51001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
 +	     SHEX
+	     ("4BDF731BBB3D0E2AB0EB3D972123A7A0A085E8A98AC6AF8ADBD335B37275DDFF"));
+  test_hash (&amp;nettle_sha3_256,	/* 226 octets */
+	     SHEX
+	     ("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF2111B \
97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4957 \
A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198B7E \
838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B3DF \
A269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
 +	     SHEX
+	     ("47F904FEEA607225CAB2E3C52748878964BFEDCFE068727DE610F63421367BCF"));
+  test_hash (&amp;nettle_sha3_256,	/* 227 octets */
+	     SHEX
+	     ("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23697 \
ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACDA89 \
7944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBCE60 \
827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE61179FE \
84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
 +	     SHEX
+	     ("324937607D9F16AF815701749F0377B3281AF9C5BB565D6F2B9611532B6BF044"));
+  test_hash (&amp;nettle_sha3_256,	/* 228 octets */
+	     SHEX
+	     ("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F152 \
FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE62A \
ADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E42D1 \
68B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE9011504A4 \
9E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
 +	     SHEX
+	     ("B984C2D6B6FDC28574AAD551FC16B68F85BF6CC480A15C128AE5616561D46721"));
+  test_hash (&amp;nettle_sha3_256,	/* 229 octets */
+	     SHEX
+	     ("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06352 \
84D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF520796841E \
58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E193856661376C8 \
1CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C07D \
C819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
 +	     SHEX
+	     ("91A5B9FC2DCC5FAEDA57D2E7A41E922DC32D572AEBDF6D54CB8C3AE4245E8565"));
+  test_hash (&amp;nettle_sha3_256,	/* 230 octets */
+	     SHEX
+	     ("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3DAC9 \
F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47971 \
B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70D94 \
23798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7FEB \
AA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
 +	     SHEX
+	     ("97DCA1050A465B60E91EBE26E29ADB5A286A0582EEE2E89B8B901954293F6146"));
+  test_hash (&amp;nettle_sha3_256,	/* 231 octets */
+	     SHEX
+	     ("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645CA1 \
4E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8BD0 \
B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C0BA \
854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B18F \
E34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
 +	     SHEX
+	     ("6D033D85DAED3366D5F7D5E4F03B3D05B65778EEEA074B0C683CFFCD6F51D5BD"));
+  test_hash (&amp;nettle_sha3_256,	/* 232 octets */
+	     SHEX
+	     ("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE875DA \
0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94311 \
051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B349 \
939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB4444B \
85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
 +	     SHEX
+	     ("01EBBB73410EEBAC665C3B40063D001F43DBE9D1722EB323FE08763D7FF0616C"));
+  test_hash (&amp;nettle_sha3_256,	/* 233 octets */
+	     SHEX
+	     ("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBBD58 \
01AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422900 \
5F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A9426E \
CEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB7448F \
50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
 +	     SHEX
+	     ("8D3A49CB572AB99C9BF0231366BB017C9ADF25479D35443A971E45787E738CE5"));
+  test_hash (&amp;nettle_sha3_256,	/* 234 octets */
+	     SHEX
+	     ("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FAC4F \
DF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425FF7F \
1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6FBF5 \
534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526DC64 \
3872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
 +	     SHEX
+	     ("FBB5A0AB1A3B4C4FA56ADB1C9531EB9979C554903053013C20FEFD3F57B5CCDB"));
+  test_hash (&amp;nettle_sha3_256,	/* 235 octets */
+	     SHEX
+	     ("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F54ED \
E927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747BBB5 \
3652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0EDE83 \
8AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F02B \
64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
 +	     SHEX
+	     ("6B3DCC7AC6A5CB85B67FC71B4055D3798134DEEF26FD3EB03A042E0DAA35CC85"));
+  test_hash (&amp;nettle_sha3_256,	/* 236 octets */
+	     SHEX
+	     ("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51F15 \
34BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF1430A \
9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19AFA \
65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB93D \
2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
 +	     SHEX
+	     ("5D1DBA8F1584AC3F36B3AC925EC13AC284013B9664965AB6265B942466B5D8EC"));
+  test_hash (&amp;nettle_sha3_256,	/* 237 octets */
+	     SHEX
+	     ("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267512 \
CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE512133B \
B7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627AAC0 \
2ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E742 \
EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
 +	     SHEX
+	     ("89C6C86DB0A889AA67D8CB085F9F4312645972D977C5B952D9F6243D7D3BE4D5"));
+  test_hash (&amp;nettle_sha3_256,	/* 238 octets */
+	     SHEX
+	     ("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBBE2B \
01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9B0F \
663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F83869CA \
27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D6D0 \
55B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
 +	     SHEX
+	     ("AC02432A5541C26238C6F99FADB2B23B5FFCAD8F04BD4C3B9A6620CAB1266E6B"));
+  test_hash (&amp;nettle_sha3_256,	/* 239 octets */
+	     SHEX
+	     ("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0DD8E \
9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07A38 \
F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8AAE \
141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A9016F \
2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
 +	     SHEX
+	     ("F55AA01DEAB12148E35759DB818F1059351165E9E6F93D342F0ABFCA102E0801"));
+  test_hash (&amp;nettle_sha3_256,	/* 240 octets */
+	     SHEX
+	     ("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA672 \
73BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1466 \
E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAFCD3 \
F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B85AE \
5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
 +	     SHEX
+	     ("7C0BDA7CB42DADBD037F50A5F27E3AB5DA258D4670F1BEA90154C87C98136BA1"));
+  test_hash (&amp;nettle_sha3_256,	/* 241 octets */
+	     SHEX
+	     ("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1A71 \
D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69A7A \
682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0C8F \
9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7801 \
A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
 +	     SHEX
+	     ("F60C53BA2132293B881F0513E7AB47FE9746ED4A6AC9CADE61E6D802D5872372"));
+  test_hash (&amp;nettle_sha3_256,	/* 242 octets */
+	     SHEX
+	     ("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48A27 \
D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68020 \
C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C14B4 \
377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C41C \
CBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
 +	     SHEX
+	     ("1C66B9A7C50ED77D179A0C437D5890C9835A13F90A73A01332AB0731A41A115E"));
+  test_hash (&amp;nettle_sha3_256,	/* 243 octets */
+	     SHEX
+	     ("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC0578289082B2 \
A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE492087D \
7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA800 \
E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1886 \
7B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
 +	     SHEX
+	     ("48A00BA224AC5558F41A79F52137DB9182A93F1045D43789E5913D7BE40408C2"));
+  test_hash (&amp;nettle_sha3_256,	/* 244 octets */
+	     SHEX
+	     ("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E9726C6 \
90D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9359 \
AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B5F6 \
5E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF3745F0 \
EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
 +	     SHEX
+	     ("240A85EAF7F3016C192AD5E17E5F93B643FE3EDBA719F423693A34DA3784827A"));
+  test_hash (&amp;nettle_sha3_256,	/* 245 octets */
+	     SHEX
+	     ("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3796 \
141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C553 \
9FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61694 \
301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49171 \
433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
 +	     SHEX
+	     ("2AA9D0A1D9B9B691B4B8641E68D454D2D9C34CE43A5B55DD57590716B8A46CF7"));
+  test_hash (&amp;nettle_sha3_256,	/* 246 octets */
+	     SHEX
+	     ("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4DE9 \
C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B45C9 \
66B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF102D \
23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F5D7 \
297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
 +	     SHEX
+	     ("58C469E1A76835CC1A897B885B1B2A33B0AABCE4CFBB65523D2E0D08D6D1A413"));
+  test_hash (&amp;nettle_sha3_256,	/* 247 octets */
+	     SHEX
+	     ("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82EA7 \
D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5577 \
B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3450 \
CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4ED5E \
607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
 +	     SHEX
+	     ("6C8DF81B1E1ED70A5413368018DB9628B0E0B4563423C051A54D000AADDE0C06"));
+  test_hash (&amp;nettle_sha3_256,	/* 248 octets */
+	     SHEX
+	     ("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA909F \
DF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4BAB \
D9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D619 \
BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D001 \
EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
 +	     SHEX
+	     ("108FFF41D5BCF654071B4414E666FDEBBE878C309D6DDC90AFAF5C61DF8559F0"));
+  test_hash (&amp;nettle_sha3_256,	/* 249 octets */
+	     SHEX
+	     ("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B562B2 \
88D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944162 \
7A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C2961145315130549311F \
C07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9A7C \
F97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A1928604B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
 +	     SHEX
+	     ("751EAAAFA4AEC8ACD26606D6439C55B5C66EC7DB807579EDC68994B300F7A077"));
+  test_hash (&amp;nettle_sha3_256,	/* 250 octets */
+	     SHEX
+	     ("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A73D8 \
0A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A51B5 \
6D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B3A3 \
56001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90EBD0 \
90AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911F16 \
5D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"), +	 \
SHEX +	     ("90C2D5F8E26B0BDDEA719064BB02A6242F2CC5A42936B14FE17F861B47B7E186"));
+  test_hash (&amp;nettle_sha3_256,	/* 251 octets */
+	     SHEX
+	     ("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC7EC \
6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699DF3 \
5D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5D39 \
7FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343709 \
5707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A07484A5 \
D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"), \
+	     SHEX +	     ("3298A95CFE59B9D6CAB99C36DC1324194C09F97F08944A02D9574BBCA3186B41"));
 +  test_hash (&amp;nettle_sha3_256,	/* 252 octets */
+	     SHEX
+	     ("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03742 \
636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EEAD3 \
E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A4E7 \
B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED122 \
A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6772 \
E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
 +	     SHEX
+	     ("1C4172928CB10E16AB3CDB33F815103B000A6C7D62376CAD29AF03F4B2B0E103"));
+  test_hash (&amp;nettle_sha3_256,	/* 253 octets */
+	     SHEX
+	     ("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A47429922C \
4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D7E8 \
B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD997CE \
FC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B2546F \
E05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B715C \
1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
 +	     SHEX
+	     ("F5CFB4DF3F7C5A778F38A3B43B26479A0E8A49030C59AC19FB0CFA806081CA4A"));
+  test_hash (&amp;nettle_sha3_256,	/* 254 octets */
+	     SHEX
+	     ("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC20AB \
4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D00785E5 \
7788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993F92 \
B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B730AD \
3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C39C \
F421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
 +	     SHEX
+	     ("06AB8FDBE4DCE935E42003C17FF60BA236F43A843995B7FEF3A29DFE0C82F1D4"));
+  test_hash (&amp;nettle_sha3_256,	/* 255 octets */
+	     SHEX
+	     ("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23346 \
775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD181 \
C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BBA40 \
489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B6183639D \
CFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C565C \
CA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
 +	     SHEX
+	     ("C11F3522A8FB7B3532D80B6D40023A92B489ADDAD93BF5D64B23F35E9663521C"));
 }
diff --git a/testsuite/sha3-384-test.c b/testsuite/sha3-384-test.c
index e24d142..35a7c46 100644
--- a/testsuite/sha3-384-test.c
+++ b/testsuite/sha3-384-test.c
@@ -1,775 +1,1259 @@
 #include "testutils.h"
 
 void
-test_main(void)
+test_main (void)
 {
   /* Extracted from ShortMsgKAT_384.txt using sha3.awk. */
-  test_hash(&amp;nettle_sha3_384, /* 0 octets */
-	    SHEX(""),
-	    SHEX("2C23146A63A29ACF99E73B88F8C24EAA7DC60AA771780CCC006AFBFA8FE2479B2DD2B21362337441AC12B515911957FF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 1 octets */
-	    SHEX("CC"),
-	    SHEX("1B84E62A46E5A201861754AF5DC95C4A1A69CAF4A796AE405680161E29572641F5FA1E8641D7958336EE7B11C58F73E9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 2 octets */
-	    SHEX("41FB"),
-	    SHEX("495CCE2714CD72C8C53C3363D22C58B55960FE26BE0BF3BBC7A3316DD563AD1DB8410E75EEFEA655E39D4670EC0B1792"));
                
-  test_hash(&amp;nettle_sha3_384, /* 3 octets */
-	    SHEX("1F877C"),
-	    SHEX("B0665C345F45E6DE145B0190335EF5D5AA59E0B49FC1425D5EAE7355EA442284CB8A2152D565EBDF2810ECCAB15AF04F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 4 octets */
-	    SHEX("C1ECFDFC"),
-	    SHEX("F1850B2ABB24F3FD683C701582789D9E92B6A45F9C345F9DAE7F7997C8C910E88003E592E59281CF92C92D6B51A1AFD1"));
                
-  test_hash(&amp;nettle_sha3_384, /* 5 octets */
-	    SHEX("21F134AC57"),
-	    SHEX("68D437327F158287C304BBAF36F782F497DA2C480A1FBB268682362218641F9070A014919AD7331C49BEEFCCB437FE9A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 6 octets */
-	    SHEX("C6F50BB74E29"),
-	    SHEX("03566EC003FF55184F0C85BEEBC6D1ECF5E5D082D8D40137246F8FD42BCE097C09418845EF60286FDD894A00FD2D6589"));
                
-  test_hash(&amp;nettle_sha3_384, /* 7 octets */
-	    SHEX("119713CC83EEEF"),
-	    SHEX("790D700FA34D6A835BE311B639474780148A2F087AC2FA86E8A1A433EC7A04FCBFC5284A3E188B7D91C6D094EAFBEECB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 8 octets */
-	    SHEX("4A4F202484512526"),
-	    SHEX("638E65758A297CB09DED1AC5B9E8F779802000AB791F67F33C60BE36443793ADCC8A4A58E98688157A41784F02A4BCB2"));
                
-  test_hash(&amp;nettle_sha3_384, /* 9 octets */
-	    SHEX("1F66AB4185ED9B6375"),
-	    SHEX("308EC6F2EE3F6E01FB3AA06EB7C8CADD199354751B69FD4BA4D4671858F28BB45C94E712AD9D356FCB443067EF5ACA2D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 10 octets */
-	    SHEX("EED7422227613B6F53C9"),
-	    SHEX("A88F2FD112E5F11E775AA7858A3A5202E8FCD259F5D112BAA6F568240D2ECC047EAD88509E4B8A747D370751FFB2FDC0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 11 octets */
-	    SHEX("EAEED5CDFFD89DECE455F1"),
-	    SHEX("A22A31349D7816545BE31B80E992BDBB62A29480917CEABD0AF5F2FAFBF276D4C29B63A04910B830B8757C81E223B7F9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 12 octets */
-	    SHEX("5BE43C90F22902E4FE8ED2D3"),
-	    SHEX("36CA9CC329F9A00FAA5F4F21170A017742174D3CF03C084AEB759F6FA0390349E1B502E435CFFB0BCE4ED46C0012A65C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 13 octets */
-	    SHEX("A746273228122F381C3B46E4F1"),
-	    SHEX("3DA54976B291DF77F10BF95E9B7EF9FB2F88DE075DDF6650BA788590F4E2E3C830D3B7DFC0193656B0A185E3AAD9AA5A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 14 octets */
-	    SHEX("3C5871CD619C69A63B540EB5A625"),
-	    SHEX("D21A7CF252358A1159A55934456E67D9E1DA538D4E9F9F1ACE2FD75F3074B27AE2B356144BDA7BA0B1ECA1AA201B20DE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 15 octets */
-	    SHEX("FA22874BCC068879E8EF11A69F0722"),
-	    SHEX("8A0C6331429375F052960AFFF6D5FE33759F97145D60B262BEDE86D5254994558FC1800ADD09D6887C275F4DD3531CB0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 16 octets */
-	    SHEX("52A608AB21CCDD8A4457A57EDE782176"),
-	    SHEX("18422AC1D3A1E54BAD876883D2D6DD65F65C1D5F33A7125CC4C186405A12ED64BA96672EEDDA8C5A6331D28683F488EB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 17 octets */
-	    SHEX("82E192E4043DDCD12ECF52969D0F807EED"),
-	    SHEX("4A59DA05C6E035D59D93F559D4A130D3ED91C22EADA53FD679FB0B0F31398A6FF83A5A9739BFD4E95F57318FCCB816F0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 18 octets */
-	    SHEX("75683DCB556140C522543BB6E9098B21A21E"),
-	    SHEX("98E6BCCA5F2BB30C554700202E0604F7C86B4941F0345325100C83B1234C45856DFA761E70DCD972ECB1247AEAC29259"));
                
-  test_hash(&amp;nettle_sha3_384, /* 19 octets */
-	    SHEX("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
-	    SHEX("D3C3D76B3D3926FD4CC4C05A087C2D76992998A5CD8C13FA3D233E0ECB2AD8B81BA4BE581E02BE91C7F82CCAC90013A0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 20 octets */
-	    SHEX("E26193989D06568FE688E75540AEA06747D9F851"),
-	    SHEX("7C53DA060058183CA6204E77F0709AEBEF73557C8F5E45C195B7E9416E7261365D03B8A2D6C01A102655344E725475C4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 21 octets */
-	    SHEX("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
-	    SHEX("2415C1D053CA207C17D99D02DBD177CD1AA7F00B0D0CA2CF30B4D2098EEA1A04A68E5B1C6DF2FB25ECE157C423EE8AB7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 22 octets */
-	    SHEX("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
-	    SHEX("90DA42B0C314445EAFD8656B26644ADDEDDC713EAB36289BFFC6ED4A85BE66A10F5ACD6B3C61E9C36A17C26260872DC8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 23 octets */
-	    SHEX("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
-	    SHEX("EE209E98A75A67B09008202CAD380917EB1F92C5DB4E8F2C64900AF8C603D265CAB317BF7B8E2251E479F8818D3022CA"));
                
-  test_hash(&amp;nettle_sha3_384, /* 24 octets */
-	    SHEX("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
-	    SHEX("1198EFA57E1A7884DAC827E683255575510E1F92024A135144659BE87BBF0D063ED26C987647B923A091CF11680316FE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 25 octets */
-	    SHEX("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
-	    SHEX("0435E54C016C0791677DDBC6BADD55D146754296B31132B0B1C0B5CE4AEDB03AEAA9A2DC5157D7AF20B8E36D75E1CC00"));
                
-  test_hash(&amp;nettle_sha3_384, /* 26 octets */
-	    SHEX("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
-	    SHEX("88D898ED7E6E54A683812B372F678A5FD73BCF3160A969FE4584651ADB3255F9ADCC8B85DCCA5C3BF8EBA3A1B69D9B90"));
                
-  test_hash(&amp;nettle_sha3_384, /* 27 octets */
-	    SHEX("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
-	    SHEX("7AC343A9369FA7BF45AFED43084DC1E275AB1B70034CFAACD4F3CB5E5E2201CFBD1CFFF83BAAD3897A4CB8A0DE5C35C4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 28 octets */
-	    SHEX("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
-	    SHEX("58877B8DD98C51339E4302ABE95CF57662CF05AA01938161CBFB5DDDA724517F0C002D54B54EEA7EBD64E209DAEB8F01"));
                
-  test_hash(&amp;nettle_sha3_384, /* 29 octets */
-	    SHEX("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
-	    SHEX("1CD638128718BE351385E7A156C3F0EE8B210D1565876F8ED46C227B930D188FE8CA27760FE189D3B136836561E9A0EE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 30 octets */
-	    SHEX("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
-	    SHEX("B4DBDFD9922AFD1CE46FF1CB27C30E2AEAA967631A04001C7EF2B5EABD3C0678C0FF219BE7B9FA04CF83DD40BC1B33B6"));
                
-  test_hash(&amp;nettle_sha3_384, /* 31 octets */
-	    SHEX("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
-	    SHEX("503DCAA4ADDA5A9420B2E436DD62D9AB2E0254295C2982EF67FCE40F117A2400AB492F7BD5D133C6EC2232268BC27B42"));
                
-  test_hash(&amp;nettle_sha3_384, /* 32 octets */
-	    SHEX("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
-	    SHEX("64D11ADC77AF5C568F37E44EFAC5FD03C460391AA833ABEC4E464237A8937EEDD23EC513DD2A71D0329BEAA8BEF395C9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 33 octets */
-	    SHEX("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
-	    SHEX("CF38764973F1EC1C34B5433AE75A3AAD1AAEF6AB197850C56C8617BCD6A882F6666883AC17B2DCCDBAA647075D0972B5"));
                
-  test_hash(&amp;nettle_sha3_384, /* 34 octets */
-	    SHEX("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
-	    SHEX("882BFF904BFF1031139503BF6E0274C7A3928C2D73BF474A65B97C22F65F32BE26AD1C5F7E4FA35D5B6253AA4076361A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 35 octets */
-	    SHEX("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
-	    SHEX("80448B7A76E0F0666048C02165A4FA8DFD250A227CCDD4471C3703D07762362DC1DF55FEC29E2A31FE70958374271DD7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 36 octets */
-	    SHEX("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
                
-	    SHEX("6268CD6B41F4C5123EC4D54D1E6943ABB32DBE7BFFB8EB95E4FCEE5C12D4647BE143C27F1281CDD275904920441508DA"));
                
-  test_hash(&amp;nettle_sha3_384, /* 37 octets */
-	    SHEX("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
                
-	    SHEX("C73D18DE07A65ACC7E2D8B2A51002AE28CBC4B0A6EE7F81A6B483F81A6DF8FF6B33F632A6E6312888CA714821C0B13DF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 38 octets */
-	    SHEX("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
                
-	    SHEX("3A0BEA62F42F9CEEDB348F6E1613F00356ED9766A5C19F0C2EEB05C74DE69D3943E16CF72281FDD92715FA3D51515931"));
                
-  test_hash(&amp;nettle_sha3_384, /* 39 octets */
-	    SHEX("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
                
-	    SHEX("1092F63955F3DFEF1322CF9516F21540215552BC5709CCDA17AD276ECAA091A78451FE9925791B8A9191B5D42010156F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 40 octets */
-	    SHEX("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
                
-	    SHEX("8CD022971D5769761B8E96B442444FA1850F1201AAB0AC9F6E8404E2B3EA1D936244EEDC7957C80B7FAE60B3F216C6A0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 41 octets */
-	    SHEX("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
                
-	    SHEX("B6575D53D353360521B20AA1F993F6E2B5A262D1F508789D5CE2469E9F3F33CCE8848DF690CCB0D676FB949EB171A7D7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 42 octets */
-	    SHEX("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
                
-	    SHEX("7358C6A0AE58EFA14F65B8E162F07EF2D0AD8DD2006A98293307B76B3BA9E71C308A6694F0B56DE8D59E58536C3513E8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 43 octets */
-	    SHEX("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
                
-	    SHEX("18030C2B5EA23B6C66BDAF180A41173394540215CA48FB3E758433FF9884EFB9E56D2922BA5320BA84BE36E6EFE6B89D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 44 octets */
-	    SHEX("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
                
-	    SHEX("6F9F9016AC3B6A5978A5DC8C7506C8B4D28742253BC542E79D95824417AA542991EEF7E2B9C58CDB0C93616AE9C1F88F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 45 octets */
-	    SHEX("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
                
-	    SHEX("424421BB9399BD44AB76500273D7F1E1421A2BFDE1A1C130C0B3474409D8AE92B3E38539CFB09ED1D23C62BB32B9364B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 46 octets */
-	    SHEX("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
                
-	    SHEX("D07A2CACEEA869274BAEECDA43B6020930EF383A897C72A7AC7FBD8FF5CEA7F8BE655844D9F9BD2B498880FA1527D94F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 47 octets */
-	    SHEX("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
                
-	    SHEX("25D7AB5E930819CF5F59ACD2542691AD66481DA547EAA9C2ADD7C8EA69A475F416C430EA1DE840974E3236A62520911F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 48 octets */
-	    SHEX("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
                
-	    SHEX("36A6BF2D4EB3CC6FB797914E734B2CA8702CA7CC6D539B4DDB233EFAFCF068712E845364A4A929D31A440C7DAF8B134C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 49 octets */
-	    SHEX("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
                
-	    SHEX("B69D40A90207EDB20C0068F402008C0E64300B89A1B6AF7930708B263C790A087F3ADBB4C84295D23392E0692F35BDBC"));
                
-  test_hash(&amp;nettle_sha3_384, /* 50 octets */
-	    SHEX("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
                
-	    SHEX("CDDB883B9EADC59D2894178B3BA6F61E5E11C2C415C89E554E20A17E4909F8D960F02AA80E1A5129AEEBF2CF975711A4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 51 octets */
-	    SHEX("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
                
-	    SHEX("FBE0056D65AF279EFF1573F169809A05B6A52112B662D07CDD2570BE5E198A28D1EA49CBEAF0C05E76A9F09BAF6D1F34"));
                
-  test_hash(&amp;nettle_sha3_384, /* 52 octets */
-	    SHEX("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
                
-	    SHEX("26473DE684CF58D559C7C0CFD360A9AFFDF33900FD69A3A946581484B93EF6FE6FFAC461B4551E136BEAC64CC33A4C15"));
                
-  test_hash(&amp;nettle_sha3_384, /* 53 octets */
-	    SHEX("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
                
-	    SHEX("462AD97BB0156A5DA3DD0E9E5BF06D31024FE43BB80C018F6858EE4332F2EB5A78ADA06CB55DDC172AD87F88E26D2451"));
                
-  test_hash(&amp;nettle_sha3_384, /* 54 octets */
-	    SHEX("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
                
-	    SHEX("9F890FA80A4C48B67181E89DBF15175CE48B21F9D09405218A8CE3C0759282780E142FC59851157D14509FCE79D1B17F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 55 octets */
-	    SHEX("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
                
-	    SHEX("2D9A3447D7723D837B8784FEAF03B8F9694CDE5FFB84C6A6628895A345BB8F3F5BA725416906DE063B1CEFB722C7E56A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 56 octets */
-	    SHEX("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
                
-	    SHEX("AF415063A5E25C6E55ECA7F9BD1CB0C71A7A059B569737036B339CA559CC9C7466FA239EA57CFB5FCC50944871C008FB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 57 octets */
-	    SHEX("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
                
-	    SHEX("6811EC07E6E85A289C881722AE84E6AEF01FD2761294C6ED9856D2F7EA1C71A89B2FCF4A9E56533360EA22317561EC05"));
                
-  test_hash(&amp;nettle_sha3_384, /* 58 octets */
-	    SHEX("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
                
-	    SHEX("7C90268E981A3C0FF19E14CE9830A1B9DA5FC183950875961582644462059DD2FADCFA68750D7D2F44DFCAB9FFCE5832"));
                
-  test_hash(&amp;nettle_sha3_384, /* 59 octets */
-	    SHEX("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
                
-	    SHEX("64E9AD357B58C6FA0D26D0D1F48C4AB057B9F80965AC38494E88F542BA41D6B798FC2DD88290F8DDE7948C19B5A1F260"));
                
-  test_hash(&amp;nettle_sha3_384, /* 60 octets */
-	    SHEX("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
                
-	    SHEX("3D73B33F001387FD1E752068AF39454E476B8407038C772D94400458C93664EC5226AD1BD3A19A6D9A6FBD6E6A62695C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 61 octets */
-	    SHEX("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
                
-	    SHEX("FC619CA9810CAAE3639B3FC661388C454167271E65ED0A2E5E8BC718AD21B9EDE895A658C946DC2FB15B33354DFE402A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 62 octets */
-	    SHEX("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
                
-	    SHEX("5843123A28F0B50C082023AC43B7299C4FE67302532DF4805BE6DEC3B84515B1C6C98F8A4E3D6CA826DA4A11300C3B9B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 63 octets */
-	    SHEX("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
                
-	    SHEX("81EDF06E9B64F3016B1547535ABA4DB08760FD23E9580163192F663FF62106001006A1393CF20DE4656DBCB029FB6314"));
                
-  test_hash(&amp;nettle_sha3_384, /* 64 octets */
-	    SHEX("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
                
-	    SHEX("14AA679B0C11F9C363F549330261B45E1E90CE31F4A1B0CE5CB9EB81BD6079A3742D8602356C50985D0D3E540FDFDCFB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 65 octets */
-	    SHEX("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
                
-	    SHEX("E430CE80BCC61D87FDE0A278CFF54D730C03A03377F4AC10B93ED59C5880117ACB20F1705AEFD29BE033D2F202594655"));
                
-  test_hash(&amp;nettle_sha3_384, /* 66 octets */
-	    SHEX("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
                
-	    SHEX("C9F74AC47F9146F091DE6309357F3C2AF3A9C4474CC005AEFACE3C7A552B6127E34EC82C3AFCAACDD83E695CB86241E4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 67 octets */
-	    SHEX("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
                
-	    SHEX("C42ECC8863077ABFF689413CE37B61F0436DDB62E56DE4E3333C26D95AEE9E9CBE1D8AAA6744C0DE6BA9CFF0FF01A6BF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 68 octets */
-	    SHEX("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
                
-	    SHEX("B15392718CBF4A7C7FAD1C15E7F26C446E79D54251404E646B4DCA3D42142ED5140D0D30BD836C7D513CE6F5E104D42D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 69 octets */
-	    SHEX("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
                
-	    SHEX("E03294C68EDF4E8826B699ABDDBEF75467C49CAB56E085E4B83A58B2D9BDFAC9D58B45AACC0EC0CE2D6D79686A41AC13"));
                
-  test_hash(&amp;nettle_sha3_384, /* 70 octets */
-	    SHEX("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
                
-	    SHEX("D5539D7AEFF9F74DC75B6E95EADE063BE419B15A4179CFD06D4FD2741E22B2A24395AAA1C0242C995EB5EA891347B4DB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 71 octets */
-	    SHEX("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
                
-	    SHEX("B115A9968B054C934C396D8188BA0C33A23C7189CE88B1DE4A06CD319792D28647EAE1D88FB0B87443E46292A5C645E8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 72 octets */
-	    SHEX("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
                
-	    SHEX("C8FAEF757E6D7B0AF46DA1E57C71ABB4AAF7CC91C5CDC33BA8A738172B95DE087EC4C92692CB40EE3787BCE3206FB7EA"));
                
-  test_hash(&amp;nettle_sha3_384, /* 73 octets */
-	    SHEX("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
                
-	    SHEX("F4F21BB74593AA107DC195FF52A3F90816CCEAE8D3EB9D4577B28B49C339837A52700A62EB421E8CA1C87F456310F62C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 74 octets */
-	    SHEX("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
                
-	    SHEX("83544511A07F6058D9FE5AAD7EA837A9E180D8BBB884C5650B798942983A605A514C21D8D63DB0E25AAE51D26F410BC5"));
                
-  test_hash(&amp;nettle_sha3_384, /* 75 octets */
-	    SHEX("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
                
-	    SHEX("8ECD8459FB904D2EDDB14207659C2BF96EFBD3E4C8988736EC75088F1CC8115D3FFFC8CEDF1C01721469D27968A6856B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 76 octets */
-	    SHEX("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC \
                582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
                
-	    SHEX("BE60246E27959DC8065C6D4DCAC93EB7F7146B49C759BF1DD5EBA46A3ECF074784A9DF18DEAB7A19AF7F6290CDACA87B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 77 octets */
-	    SHEX("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BA \
                FC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
                
-	    SHEX("9235BA18C55E2CBCA0FB1DA3BC8D0DFD848CA0E51DDC1020D4BECC0F138DA1087929FEC93AF16F5FB29C4A777DD91548"));
                
-  test_hash(&amp;nettle_sha3_384, /* 78 octets */
-	    SHEX("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4 \
                FCF4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"),
                
-	    SHEX("08739DD866C6216ADCA26D6121E5D81FDB1F7BCD4802C2B811D73C282277D4014B4936E5589F62279BB33075705795F8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 79 octets */
-	    SHEX("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C58843554806 \
6EA2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"),
                
-	    SHEX("D2A2E858A5DD85D62E6F51AF7E42352AC0D7A68A835431BCCA47557E3B5C3373F40D3BAF85AE416012C7C982B2325790"));
                
-  test_hash(&amp;nettle_sha3_384, /* 80 octets */
-	    SHEX("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F03 \
7AA58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
                
-	    SHEX("2990D7EA068A0307047B151D5DD6B1B2358A9EC8AD9B6B826CF1BEF399D488BD68D77DF8BE99F7DF7AF14AE0CE636379"));
                
-  test_hash(&amp;nettle_sha3_384, /* 81 octets */
-	    SHEX("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D \
06DA83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
                
-	    SHEX("4B3087F800E4084D7F685737AC635DB459CF70C4FA863C711C1143CC10F0C4AB0A2370C099FB282F9C1CE5F015BF3F79"));
                
-  test_hash(&amp;nettle_sha3_384, /* 82 octets */
-	    SHEX("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F27 \
9E0733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
                
-	    SHEX("5D347FDDB118FD7DB270898407979D2D1531D3FF6642EC4F22917EBBEDA6CEE0FB0DE11432EDDDFCBF0E2AB9CFA65804"));
                
-  test_hash(&amp;nettle_sha3_384, /* 83 octets */
-	    SHEX("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A \
0D1FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
                
-	    SHEX("954637B87FDCC484F2B61F7F42558068029F96099C1D6B9246585092EAE68924E5441B45027248A2728833169BFA5004"));
                
-  test_hash(&amp;nettle_sha3_384, /* 84 octets */
-	    SHEX("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541 \
27482BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
                
-	    SHEX("78726E91AC311F4D104706362B0314C243CD81644125881FBC03670210C89FB8E7BFF6C61FF68B234C3171F16B398F36"));
                
-  test_hash(&amp;nettle_sha3_384, /* 85 octets */
-	    SHEX("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F \
4B01F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
                
-	    SHEX("80763FB54688F122269430980AA3ABE09091020B8CFA6BDE0EDC2C63AED8B8BA097CDB79B8FC7F5117508FCA4864A14D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 86 octets */
-	    SHEX("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C76 \
19A6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
                
-	    SHEX("80447583262DED037DA88F3B98698BD8F7AED7D9BF4D99F8132EC3E7D16BB844ADAD188757CEB32B359C56E5007EA3E4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 87 octets */
-	    SHEX("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7 \
FC5C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
                
-	    SHEX("E5FB4AE5DDFB4CE8221DF4BE70240B76851E55FAE86BAF35BAD9E7179E24C95DA6F0F0695A8A5291A2394B92A6FF7B7C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 88 octets */
-	    SHEX("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E \
4CEFB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
                
-	    SHEX("CE6B07C0C7DA2FA1E6CA05DE0652FC9F1F452FC261E73E52457C72BF0D51BAC7D66160CFF16D6A03527982E7D4393507"));
                
-  test_hash(&amp;nettle_sha3_384, /* 89 octets */
-	    SHEX("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD59 \
1DF1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
                
-	    SHEX("FA76E05F8D2832DADFEBA0107A3137B7B9D4D19A77A1E78F8BBFECDA7EF46414C363453E8C4902C302A4E18CEA4BA157"));
                
-  test_hash(&amp;nettle_sha3_384, /* 90 octets */
-	    SHEX("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85D \
C95286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
                
-	    SHEX("1B43B70B6BBBC768C1F4B3CE241667ADB5246D29981723846168D2234E19A5130B1F576B4974C613639A449E61B2CA79"));
                
-  test_hash(&amp;nettle_sha3_384, /* 91 octets */
-	    SHEX("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96 \
813544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
                
-	    SHEX("938252393A532D9E1F91D5C222E2DF2CC7AE102705BFB83FE30DCAEBCEA82BFF9BDA7CA67095439859146632494D3CE4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 92 octets */
-	    SHEX("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD5 \
5E634AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
                
-	    SHEX("47633AD0C80AF26BF74D9598DBD5BCF77FC6BFF1BCA015A611D7B8240F597D8767FB8B0BF5C333156580AFEE121C299C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 93 octets */
-	    SHEX("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE4060323 \
0ECA6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
                
-	    SHEX("04456322E1BF27785EDF3F596DB33E693AADF76D9D259352D97ACD561BC45236506FBA3530772242CB369A83A38CD749"));
                
-  test_hash(&amp;nettle_sha3_384, /* 94 octets */
-	    SHEX("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CD \
C585FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
                
-	    SHEX("F8B1F2C317B9D1898C305DEC3C6C0AC45CFE7F995E944968206C1C1B2C92BD1D4FA392FFAA6094C6AFF95E47DC259EE9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 95 octets */
-	    SHEX("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409 \
2261AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
                
-	    SHEX("4F439197C66439BAF65618F826E299A329380B558A52B0711182580BDBADBABB13AD66D60FADDB9DED226F0B401AA8BE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 96 octets */
-	    SHEX("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE \
49D0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
                
-	    SHEX("1C8B99BF6A3E80F0B8C67FA9BBF07D19C15D484CDE38F8FAADB748AE024A02E29FD2D7BDCE66D46C1A5239D7453FD3E3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 97 octets */
-	    SHEX("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A \
6E6D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
                
-	    SHEX("46F87BC07849E95104E67CC3DC71BDC109C1102BFB1ACDFE2F6A23173B52BF836CE00CD7A5A5FFE7D3BB8FAB33DECEDF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 98 octets */
-	    SHEX("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28 \
EE11495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
                
-	    SHEX("FA12B9D070F697FD5391F3FC9C44056CEDA63F035D766655AA7D0A575ED55B15BA6BAF56300940B565E37A248E2DCAB8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 99 octets */
-	    SHEX("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B \
32A0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
                
-	    SHEX("5304D6DB2730FB07B85348B0226B1A81A546BA1FE201ECCE1E552DBA6AFB84CCE7A6F954E3100AE1724B82CF1CBC4128"));
                
-  test_hash(&amp;nettle_sha3_384, /* 100 octets */
-	    SHEX("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC2 \
1C8807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
                
-	    SHEX("135114508DD63E279E709C26F7817C0482766CDE49132E3EDF2EEDD8996F4E3596D184100B384868249F1D8B8FDAA2C9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 101 octets */
-	    SHEX("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666 \
C0A72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
                
-	    SHEX("D560D54A2881ED47CC8C5AF9818FEEAF08B621B1AED4569D08807A0B61F902C1691D8B08FF75590FEAAED6E75F4C9E3F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 102 octets */
-	    SHEX("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE6 \
2F39A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
                
-	    SHEX("FE5F30A315584092A271FDBCF4347A24D14A1F98CADC88DF288C36CEA8F89E9020019933BCD4F5A7479E3E4A57644C49"));
                
-  test_hash(&amp;nettle_sha3_384, /* 103 octets */
-	    SHEX("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041 \
308598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
                
-	    SHEX("A4E5EE130FC105818CD1A0DE74F1085B9B4D93889C509DC3A208B5230D39D8F304BB403F72BF0CF5E02C4C4A0831F328"));
                
-  test_hash(&amp;nettle_sha3_384, /* 104 octets */
-	    SHEX("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189 \
D549A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
                
-	    SHEX("9FB5700502E01926824F46E9F61894F9487DBCF8AE6217203C85606F975566539376D6239DB04AEF9BF48CA4F191A90B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 105 octets */
-	    SHEX("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB \
243F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
                
-	    SHEX("F2E0FF6CF4801CFF2ECA1703E4E956C007A1F2709430F1F7A0A4FDD16A063522A4DFB6C41FA529C2E325F8CDD4F8DA96"));
                
-  test_hash(&amp;nettle_sha3_384, /* 106 octets */
-	    SHEX("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A \
2130DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
                
-	    SHEX("62029D962D2E323688DC5851C549DA39EF49CB994D2D6C51C57B9BBAB375AA10BD0605208D9946EA472573880230DD2D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 107 octets */
-	    SHEX("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C8 \
1BDCE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
                
-	    SHEX("25E546F76EA9F98E03E3B2F4AB608185073658E7EDA0777BD5B047A59085C3C500916347D4F77E38E35159AF133ED638"));
                
-  test_hash(&amp;nettle_sha3_384, /* 108 octets */
-	    SHEX("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457 \
BD25F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
                
-	    SHEX("BEEFCEFF9E2D0825D60EA20E5271BF49C4AE3A5B54B56050988DD3DF5DB5EB4F1002EFBFBAED2FC72179DE44116976B2"));
                
-  test_hash(&amp;nettle_sha3_384, /* 109 octets */
-	    SHEX("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2 \
A09002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
                
-	    SHEX("7D18254D46A14D0383EC56AC9CA2FDA7885AE673468C9F3B45BA792C2C23C9FF82491E6AECA15D076AD3A3432CFA650C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 110 octets */
-	    SHEX("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C \
2C40F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
                
-	    SHEX("1E3E007CE37792D8A4423B797E876E89859590DEDD39711AD0F1DE2FD925F4320B44BD57DDC7050427943E3C957D4B6D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 111 octets */
-	    SHEX("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E75 \
54BD002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
                
-	    SHEX("D1D263B5311B05C7B9F7783E3AFD9A2E75791CE0503ED820474B35340D2CC84B0270921BBD965722011AA30CE4352926"));
                
-  test_hash(&amp;nettle_sha3_384, /* 112 octets */
-	    SHEX("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C98 \
5AC56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
                
-	    SHEX("E482B0C1B2057F1B6B897BDC230DCA2B48FFC0E4600AC40A44DCE03E99A8D1DF94908A9FEBA0405DA79569E75059F9CE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 113 octets */
-	    SHEX("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972 \
AEDD3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
                
-	    SHEX("E54BC3B249DFF637001B58D13CBF64F453E01AD68A554CA994F71EC710216EF9769F1C8B463DC7B4A90A0CEACED41E3D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 114 octets */
-	    SHEX("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40 \
198B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
                
-	    SHEX("01DC4CED4693B36814443857931C5D3CEE8762FDA0220F8E9E63AB1EE9A7135ADE21C5AB3791821352FFBC322F3ED208"));
                
-  test_hash(&amp;nettle_sha3_384, /* 115 octets */
-	    SHEX("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD7 \
3D017CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
                
-	    SHEX("587C8104936BDD74700666663843746015906CF4C681C2A6FFDD07B732E9E7787B165E117DA340BCE4E27302BA288299"));
                
-  test_hash(&amp;nettle_sha3_384, /* 116 octets */
-	    SHEX("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14 \
A529B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
                
-	    SHEX("51753384C8F9584BE3ED4526B9B29A97DC8A87D195D0155E7444950EEA55ABEC5C0D7814F1DFCE5CA4BF1D50EBC709AD"));
                
-  test_hash(&amp;nettle_sha3_384, /* 117 octets */
-	    SHEX("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED15 \
43E5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
                
-	    SHEX("BD1E1E9AE80B7FA79ADBD47D7A28BA44F4874108CD9BE5D327CC93C6ED4DACF8A9E2A3491D4168BFFAE63FB2F1070DE7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 118 octets */
-	    SHEX("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F3 \
25E894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
                
-	    SHEX("6B7C1144FA984261377DBAACA78A03AE580B7F3A17D69BA0D56EE908DD9EC9F87EA30A7626ED7CCF25B53A6994E121E8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 119 octets */
-	    SHEX("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC \
3BDF8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913 \
                C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
                
-	    SHEX("76414F3B9E4FF8D150280C8E44BC54056849B25351352D9D9E986B3ECB6EC050542709AFE01979D2EB97E51D41217E6E"));
                
-  test_hash(&amp;nettle_sha3_384, /* 120 octets */
-	    SHEX("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095B \
E4BA5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B015 \
                8F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
                
-	    SHEX("92AC60E5DC492010A45F46AEF05F403F7569E1B4E2D0C909C871A783FC12457DE281AFF4C4CEE0207D20EAF546285070"));
                
-  test_hash(&amp;nettle_sha3_384, /* 121 octets */
-	    SHEX("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C7 \
15C1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C \
                21620B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"),
                
-	    SHEX("8F99032CB49BB022EE5FB32446E1D39AA0FCD749741E4796979D4BEA5AB1B04D241592EC6058E54B8EC9EAB274EE632D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 122 octets */
-	    SHEX("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633 \
ABD1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026C \
EE77BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"),
                
-	    SHEX("8BB4F3CF0390A31D682213D22354DFE7D580C811682259872F2A29A08D373FD998F842334F64F81349364A930C82BAD4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 123 octets */
-	    SHEX("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1 \
857815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB \
4C266272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
                
-	    SHEX("0BB7DAC544569E6EB74ACAB01A846F74AD2A0F31D8FACEE4D09FA49C81B93BD83B4F129B96DA4C0EAF165FDE52EF295B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 124 octets */
-	    SHEX("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753 \
95551E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095 \
B73DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
                
-	    SHEX("10DD9348B2D95889EE613907824A10EFC708A101A67672FCA4C6539F5156C7DF805DBE666FCF4CC578F421AE3CF27122"));
                
-  test_hash(&amp;nettle_sha3_384, /* 125 octets */
-	    SHEX("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C0 \
0FBBED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D02 \
82FED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
                
-	    SHEX("444B8A6F1EE118DE3FB3EC76B2FBAD9EF31916E1F99077DEFC51C2E59C8E6A3E207BA48E5EDD66C72B5BEBA67401D794"));
                
-  test_hash(&amp;nettle_sha3_384, /* 126 octets */
-	    SHEX("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031 \
4855F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7 \
1967A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
                
-	    SHEX("F4D17C6299BAE7D0E6D15A550B311F30C1B038AEF56FE375F3B4BAE14F7EA427C5AA987EF93285975CE5F9E46A3E4C20"));
                
-  test_hash(&amp;nettle_sha3_384, /* 127 octets */
-	    SHEX("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B \
16D27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE7 \
65DE2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
                
-	    SHEX("39F911E9CB2763C8911AC3153040E48F403ABFE373E14B709A476868D3AB5841D1088F8393DD728305BA341138365D27"));
                
-  test_hash(&amp;nettle_sha3_384, /* 128 octets */
-	    SHEX("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F \
369EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF06 \
21CD54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
                
-	    SHEX("3ADEB7EEECF9069F143A10151FD4506AEEF3A0EF94CA65D4448ACF1E892B8EBB0887631804DD64E153AD41FAE0127A85"));
                
-  test_hash(&amp;nettle_sha3_384, /* 129 octets */
-	    SHEX("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106 \
594893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B \
5DB812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
                
-	    SHEX("14830877DFAFE6F886A22DE7CE9A5FC74733A8FC27ECC523B6B4524E6312CBB22B51D7EB9DDAB37BA54BB2C0BFC32A6F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 130 octets */
-	    SHEX("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA9787917 \
5AABA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5 \
7447EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
                
-	    SHEX("D109532BC4217326B3D25ED2D2F3F0D2482CC5BDD054218FA8BEDB91CD814F7FD683AA2AFCB8342CD34CE54D607E3DA0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 131 octets */
-	    SHEX("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E \
477743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B \
1921881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
                
-	    SHEX("DE64A37A7456638D3ACA1B895F4A88C26817177986A9F2F5B77B49CFF2C3E46BE2C49ABE89D741375DB87F4C898F6762"));
                
-  test_hash(&amp;nettle_sha3_384, /* 132 octets */
-	    SHEX("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C34 \
8C2B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C \
2A0EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
                
-	    SHEX("8D9743710C171CD399A0D712E9D53374ED8E0A97672A40294C74F0D503F0292D6F41D5CEA08FB3C623C4EBA56848770D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 133 octets */
-	    SHEX("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3B \
F88E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3 \
FE507BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
                
-	    SHEX("FAE998D1074E30F2EA0A8B9FE259FD2E2A36804995EBE7E3A5AD34865B1A3316675297FE8E33EEF8ADCC02BE8C4765BE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 134 octets */
-	    SHEX("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079 \
B79A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782 \
917417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
                
-	    SHEX("0AA9CCC3C9CAE1603D3DA5E95F304ADB8FA575833929B09F7C1095D968BEA0471DFE8AAAD3AD11266DAAFF95F6667ABC"));
                
-  test_hash(&amp;nettle_sha3_384, /* 135 octets */
-	    SHEX("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF40 \
67C3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55 \
EA796FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
                
-	    SHEX("8FFDF6A4752D17D496F8ADEE7116BD2AF0A4B726BB3F4C5F85BE2C9DFC34055A509E4FE016930D9951A7212553E2E908"));
                
-  test_hash(&amp;nettle_sha3_384, /* 136 octets */
-	    SHEX("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880 \
EF50700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768 \
DD417F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
                
-	    SHEX("278E83CFF1FF6CC4B3AC41F3879DA87AE63B535B43815E273687A4CC519855B452CB6AF0198BB9FD0F3E43739BC0CDD7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 137 octets */
-	    SHEX("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2 \
CD2BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47B \
B67AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
                
-	    SHEX("AA4B5A5FB94FE19578F33323BA1EEFC5B6ED70B34BC70193F386C99F73863611AF20581B4B1B3ED776DF9E235D3D4E45"));
                
-  test_hash(&amp;nettle_sha3_384, /* 138 octets */
-	    SHEX("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882 \
615D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706 \
3301B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
                
-	    SHEX("3174CF3754A6FE603631ECDA4895171A9DCF7AFB02EB72AE270A9E3EBF2A65A72C3436C233FD4F17F7FBAFBAC0680C63"));
                
-  test_hash(&amp;nettle_sha3_384, /* 139 octets */
-	    SHEX("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0 \
99276296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777F \
A5FEAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
                
-	    SHEX("354813D9823D2F02D75D13893A6ABDB44E9E99666533429CC6F7EB3FBA10BF9ECD4A18BB9D5188E6E8F91DFDDBE8409A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 140 octets */
-	    SHEX("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC15077 \
3B6FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA \
035594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
                
-	    SHEX("E2EFDC5007E4C13F811043DB967A423DE02AF411B4A251A225CAD041E83BD4DD89D8B24198DA00096CFE2E1B3F5D1960"));
                
-  test_hash(&amp;nettle_sha3_384, /* 141 octets */
-	    SHEX("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29 \
6880A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3 \
C6F405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
                
-	    SHEX("E44C0856F0C245E002F914CF300E98C496E725A4DB561F2995AD9C8B97F341E15625B56B03D4D5880927B8574F5E5D74"));
                
-  test_hash(&amp;nettle_sha3_384, /* 142 octets */
-	    SHEX("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4 \
064DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1C \
E085FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
                
-	    SHEX("5D290C5DFF59A3A3DB8BC7320B8F64A4DBF67CA4F5DF9A07F235EDB6460345FC8971040481C9A5D0F09B62262B9ED9F8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 143 octets */
-	    SHEX("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA37 \
42FF3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6 \
A1EED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
                
-	    SHEX("FE680250CAB1FBDB6AC8800DDC28E70100DF8DAAE38DA27004872AB05D40B15AE93EB44266E3014F0960038B28252C7B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 144 octets */
-	    SHEX("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579 \
DB2F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B3 \
9BD90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
                
-	    SHEX("511B13E53FD353FA4D38EF0CF8F1AF30DA554828A5FD1C53EC41F73D9ACA6C54AC7972C933AF4A2FC7AB852CA63A1BA6"));
                
-  test_hash(&amp;nettle_sha3_384, /* 145 octets */
-	    SHEX("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9 \
035321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B90482 \
1F32B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
                
-	    SHEX("554CF00A9AAFE0DFC8D49EA03288B52AED43A5104E22B838E40FDE7358491B5774DF455CF2EC73C53A7B30627A142A41"));
                
-  test_hash(&amp;nettle_sha3_384, /* 146 octets */
-	    SHEX("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F \
21A0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7 \
DA2B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
                
-	    SHEX("C13C177E6453F78E81BC4EFEA7A10E9CA02273A6EB757497368539BF4AE1F1BBCBAE0FFF5DAD55EDCA61F474976CBF64"));
                
-  test_hash(&amp;nettle_sha3_384, /* 147 octets */
-	    SHEX("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3 \
404F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895A \
AA16ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
                
-	    SHEX("C3E5DDF4572A386C99F998E68FCCC7F85867A73E13C2058C18391A922416FD352CA6B659BAD021E0D9A05789F59D3C67"));
                
-  test_hash(&amp;nettle_sha3_384, /* 148 octets */
-	    SHEX("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D58 \
5E9578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBE \
E4BBB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
                
-	    SHEX("157481D0A24BA9FAFA1800C9713E702976167FDDF52367A7932AA3CFF22F4A2E19A016C7BACBD97CEC3EA6B1E87CB3D3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 149 octets */
-	    SHEX("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F \
296EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA99291 \
0EF4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
                
-	    SHEX("BCDD36EE35C2C771852E27DB2CDDABC155AB43D28E6289F0ABA4F93E793C999F30836C7483FBEA5A73F4EEB5D8D32FE3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 150 octets */
-	    SHEX("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3 \
B267B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A \
57B2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
                
-	    SHEX("FA7F66D37C1DC3E81BF55C443ABAD5CF79A3D9834F77A206291138AE31438B986737DC4599EC5D10F7F005D1833B7D2E"));
                
-  test_hash(&amp;nettle_sha3_384, /* 151 octets */
-	    SHEX("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97 \
8788C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9 \
A93BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
                
-	    SHEX("8F0E47ED680661F1ACE9EEEE855D935FDFC66B97C2E9A6FC7341F14D9327C8E72BCA3FA67E59804CEA41F09E1C4F8715"));
                
-  test_hash(&amp;nettle_sha3_384, /* 152 octets */
-	    SHEX("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29 \
A0DC0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D \
50309E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
                
-	    SHEX("F105810E724C2C55162CF71721E3F59871F06010BC7F052AB282BFB6D4A3BF184B892BAF8FADD02070F64B9E036DC5F7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 153 octets */
-	    SHEX("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C \
250034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC937 \
93DD6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
                
-	    SHEX("CBB0FCE4AF36D14B63BC72D37FB4028327843FB22EC033BFC068E7B081287E31E3451D8A1D97692B379FF9E6ACD40240"));
                
-  test_hash(&amp;nettle_sha3_384, /* 154 octets */
-	    SHEX("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933 \
906FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433 \
F7D350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
                
-	    SHEX("44E4F77C0D7BCA6AD57D334F974BDA8DE2E08E104F14A8713280CE73897A945DC23AD058533B85750D9DD9D2D7B5D1AF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 155 octets */
-	    SHEX("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286 \
F8F17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0 \
F55231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
                
-	    SHEX("6913184FAE1EF9FA2D57B1B7BD586D51DE9A5F387037266E7B4A83F4366498FF86C89934C05332A7E641149EF627FA34"));
                
-  test_hash(&amp;nettle_sha3_384, /* 156 octets */
-	    SHEX("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E \
91F4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A801485503073109 \
50D034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
                
-	    SHEX("F04FF5AAA68F2558586D2748587DEE3CF28BACAB5BE5F887D24A068311BA2D9E9BC0206C2706B9C109E7162E3ECB6346"));
                
-  test_hash(&amp;nettle_sha3_384, /* 157 octets */
-	    SHEX("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE704 \
57A9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BE \
D9DE9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
                
-	    SHEX("D4B8CFB2FE5B63BB5BB678B98B465A2DFD23DFF498E778EE0535A5C077705AA2CA2F039832BAEA0F735609B3E4E18CF7"));
                
-  test_hash(&amp;nettle_sha3_384, /* 158 octets */
-	    SHEX("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576 \
B1C2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC \
4A471A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
                
-	    SHEX("25B7237DA9D40DE047D41A30BD37155C0F108D7296B09079957D4EE31224A4BA256AF756D154878910C158E49186728B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 159 octets */
-	    SHEX("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197 \
B839957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1 \
8691A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
                
-	    SHEX("F41B2D02D321F4BA106F931EE27D3F74E8D397BACECB0A1FA90BF5C837ACEB2ED8F0FEFF07B7EBEA6A88D0CC54AE8E6A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 160 octets */
-	    SHEX("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B26 \
4E920394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8 \
94310A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
                
-	    SHEX("9673A1A3535B8975CA0F512CDB0FDCDFB0179CE229E756AD70EAF1E5C3E1A4135E9FA7653EDBDCA4975AC18B17A662EB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 161 octets */
-	    SHEX("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67 \
314F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBB \
B8153DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
                
-	    SHEX("32429CB1B5DAD663A0663E49033DB2290945019DF7E792CDFF3723EEDB88CD0603B3FAE0228A184F8EFFAC45112F453E"));
                
-  test_hash(&amp;nettle_sha3_384, /* 162 octets */
-	    SHEX("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9 \
A0F2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246C \
E0623A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6 \
                C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
                
-	    SHEX("E91DEEBCD72BA12E2215602B488DED203A1E211D6358CADC6F906FBD89CA928F541222CBD8FC9A20B573EF22FC178778"));
                
-  test_hash(&amp;nettle_sha3_384, /* 163 octets */
-	    SHEX("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8 \
E1B288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E \
37D89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA6 \
                9107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
                
-	    SHEX("45290A24291E81CCB8D7840B6C4812AC98983D7BD3AFE46B427296AD636862B9E03ECF605B114CB47C0207267BC05958"));
                
-  test_hash(&amp;nettle_sha3_384, /* 164 octets */
-	    SHEX("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0 \
B12FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18 \
F408C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383F \
                D1900B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"),
                
-	    SHEX("E6BB2FAF5ABB3EDAFFE9E47F62586409B443E4C698070D61FC082261053270ECDC2484AA0145C851031E3C99DEFF2389"));
                
-  test_hash(&amp;nettle_sha3_384, /* 165 octets */
-	    SHEX("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D5989 \
6E3A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB \
2D64496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB \
6997BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"),
                
-	    SHEX("79B792B34DA4425BB0B4217ABE23E5DBE4E87D3940E2F7BA52CA146618580A62545C44B81E06620AF6E273499073E3A8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 166 octets */
-	    SHEX("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4 \
A4326783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A80 \
5B6A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5 \
367926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
                
-	    SHEX("9FA1D0AC7C37831731B71C19AC9E81EA115083ACE6D94349CE89FDB79B3462A749D76FDC93892F2F16AB0F7E18CDB79C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 167 octets */
-	    SHEX("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017 \
BBCF26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78 \
F854FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232 \
314EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
                
-	    SHEX("187CDFDB3757D80010D1E53157A5CCB0FCC34998EFC6BB3CE2E60768F5EEAA590656B49C0E036A3F34C9EF25F3BE587A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 168 octets */
-	    SHEX("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929 \
BD9689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BE \
A6F469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E \
884A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
                
-	    SHEX("7043F54F390B6ABD0DFF06F266E0E7B3E41F8D2E8DD43F899AC456662447A823A567B1B0FB8C2DF24E5F6689060CDDB4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 169 octets */
-	    SHEX("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73 \
243360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BD \
BBFD85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0 \
424B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
                
-	    SHEX("D0CE0259AAEEA5BAEFF52929423C3DA07A8C75195F86D733A718D1C46A1E40AAD404750C41D7A158E79F278830B4C07A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 170 octets */
-	    SHEX("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D07 \
86E99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD94 \
1DCB82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A46 \
2B83B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
                
-	    SHEX("E4385A3BE011AF20FE4566C1CEBF4AA68270E42BE50AAAAE65F8F605E980B1D2736FB0E794330D764CA96BC68B8360BC"));
                
-  test_hash(&amp;nettle_sha3_384, /* 171 octets */
-	    SHEX("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA753 \
6AAE597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C32 \
92E96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C \
43D6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
                
-	    SHEX("C979F00656A09E68485CCF07FBBB9108B00C5FC11D41F5966FF086F26C7102478EC177EE6D78C623C375A9E6F761809A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 172 octets */
-	    SHEX("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F \
80B6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C \
7BB759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A \
1C2441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
                
-	    SHEX("36139336110D1D6C27E4CC1F26F428EB8BDBCBA3AA9FFDCECF72009FB46BFAF9E3464C48BEFA4745BE36C697DD3BED8B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 173 octets */
-	    SHEX("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712 \
1548373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4 \
CAFB37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255 \
B4D231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
                
-	    SHEX("CE3268B8EC923B3331EA2CF85132C0733CF8BF87DAA544F8EE386D5DE9FBD4D8AD94E00B705CA5B61A3C1790B650080C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 174 octets */
-	    SHEX("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02 \
D19BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC83 \
9EA9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CA \
C1BACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
                
-	    SHEX("DDC398879BD16FB681FAE1512E3A1AE7ED2362DAD8BEE0D12D2256B2D856282043DC0CBBC0F63197B75E9982A1DAA8AE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 175 octets */
-	    SHEX("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3 \
510E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB \
3B117EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22 \
F1B7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
                
-	    SHEX("350B4B2768020EAA95452B90414439A38BE03686131D45612C1B85FE06FD9196F27D221F4FF83251AA8E69AEF72F904D"));
                
-  test_hash(&amp;nettle_sha3_384, /* 176 octets */
-	    SHEX("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310 \
E5C0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E97 \
23EFD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D38 \
40CDFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
                
-	    SHEX("4CD1367112C40FB7E3919DF20697A4E1CDC55FD0F01BE3953B1998B5FCB473E76E9E75D5D82E2973B3DB89538554933B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 177 octets */
-	    SHEX("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88 \
4531D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F753 \
79E9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C \
16E69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
                
-	    SHEX("878AD52FA09FD4B6465083C9C9E6A2DDB81302E2DB0CAA934D03A196972ADDD4BB8FF869BF0069E970D6BAEB5BBA9B79"));
                
-  test_hash(&amp;nettle_sha3_384, /* 178 octets */
-	    SHEX("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F \
68E6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820A \
CE262D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E25533 \
7DAA06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
                
-	    SHEX("60071A7E2ECFAF3B5B2E84A677FB98E44BD3725ADDEEC5C37EC62052D57AF7B687A063FD39C8F6E86F79D97F246C757B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 179 octets */
-	    SHEX("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54 \
2619DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AAD \
D7CE842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877 \
E50FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
                
-	    SHEX("EB929023D66AC20F11BF68EBC43069D27F35077A68D21FAB30854FFE53CBD784D7B25776D9F266F106433751E6C38A68"));
                
-  test_hash(&amp;nettle_sha3_384, /* 180 octets */
-	    SHEX("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D \
50AA83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E \
688094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D \
1BCAB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
                
-	    SHEX("6A51975C9FFEE8B94135A3BDA954DFE14E6267DBC9253F0BB04515A6B7745AEC611B7B66AE57D3FD3770AED4F412EC84"));
                
-  test_hash(&amp;nettle_sha3_384, /* 181 octets */
-	    SHEX("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D96 \
63ACCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DB \
E7FB74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC55 \
4D8E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
                
-	    SHEX("D2DC49C04553F09A8C3D7DB51DE890A71DBC10FE4E910C68BA5CA5DDB313D0A68375275C291B4DEB41F45E35A558BF77"));
                
-  test_hash(&amp;nettle_sha3_384, /* 182 octets */
-	    SHEX("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F \
82310356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D \
9F01AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78 \
F6810EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
                
-	    SHEX("AAB5747D7DCC77BACDE81A58C37764F8F41E08F2413B40D4E6C792CEFE52E4E2A406338752D7AD1269E7D5284FCB7400"));
                
-  test_hash(&amp;nettle_sha3_384, /* 183 octets */
-	    SHEX("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0B \
D5931839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55 \
A9116E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB \
1B9327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
                
-	    SHEX("72B526D74CF9521E00D9D6BCDFC1FB1760C6ACDF2DD75171305DB45D38098FF23C5B8ED3C21DA73FFB8DF7217CE46DBB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 184 octets */
-	    SHEX("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636 \
C1727EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B998 \
80C87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA11 \
6E5F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
                
-	    SHEX("800CFA48B4647F7783BCD41B2C0F7F7D4D0FAA72481A2A42C4E9C43C9F62E27ACB4DDB73E318061D396059AADE4145E2"));
                
-  test_hash(&amp;nettle_sha3_384, /* 185 octets */
-	    SHEX("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7 \
635EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3 \
BE9377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035C \
D2185BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
                
-	    SHEX("F782FF0DE7D5442D562CC500256EE4B5A00E885C8CD86009C53F337AE003854DE4B89794281A64375E3F696A415B95D2"));
                
-  test_hash(&amp;nettle_sha3_384, /* 186 octets */
-	    SHEX("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC4586 \
8AE9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E \
8B4ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E \
7459FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
                
-	    SHEX("DE34506AD69085C6357D62B0B127CE66E25E8EC5FACA5BA898C75CA19E9AF24F02406716C61A71D62BDC28D718C125DF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 187 octets */
-	    SHEX("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB \
95DB2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F5 \
72BE5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC \
36F59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
                
-	    SHEX("6F4FEEDBA0ABB4DBF824302250E6B668CBFFDCA0B8C338236FE02A8779D8ACA391D8D116B2BC43D40E736096470A0BC0"));
                
-  test_hash(&amp;nettle_sha3_384, /* 188 octets */
-	    SHEX("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36 \
D44C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A \
037FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3 \
CC03E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
                
-	    SHEX("A040CE1CBB996723CBCDBDFF7A6A5F69289737609534C5AF36F6C420A6ADFD570794079509D07E62566C58062D8186DB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 189 octets */
-	    SHEX("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29 \
F79031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE06 \
2CDD71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727 \
083513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
                
-	    SHEX("FF13C29C5E0D746CA27AEE38B6B49A13C1B3D70E62875443BCFC22A22E75031E60D68A917E3AE1D42D374D44CDC9F4C8"));
                
-  test_hash(&amp;nettle_sha3_384, /* 190 octets */
-	    SHEX("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B \
1B7F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02 \
E67A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467 \
998BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
                
-	    SHEX("3A4418A16896ADAB7C6DC783A0FC9F8D7E949937BE1D68B5EF02574B2B0C9BA902FB9C15ED64FC825D598AAFC1B26347"));
                
-  test_hash(&amp;nettle_sha3_384, /* 191 octets */
-	    SHEX("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306 \
BE84536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B \
922964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E0 \
38F6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
                
-	    SHEX("17F84411E60F6BD856D09C0ACF314E7546466AB0C1616284D2240D22BCCC7240E5A2D656D35257AB49781BDABEF6FCF9"));
                
-  test_hash(&amp;nettle_sha3_384, /* 192 octets */
-	    SHEX("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D52 \
0EEF3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2 \
DA2B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C794 \
1FCC82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
                
-	    SHEX("E577F79B0E05355B8F63EC1E639BC5A51A72BBB0ABAFE76D3133DEC4DA9BEF9A361F3E3C0ADB4C07E2757FE1D4790B9A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 193 octets */
-	    SHEX("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478 \
313C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA2 \
3EC9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDB \
B48EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
                
-	    SHEX("F78106F10E6C1F1CA5190FE541345145EE25BC51D3C1CBAAA04C0DB2A3BA2584DDD30F3A889B94BBCB9573CD9417574C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 194 octets */
-	    SHEX("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840E \
FE8D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8 \
A795AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036 \
E24E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
                
-	    SHEX("6F42FAF87DA65516FC0CCA70A385F26EBDAA94DF64AA5E7A3119AC18C6214E3D0B61158FBD6C2487E0ABFB0C6C85EF87"));
                
-  test_hash(&amp;nettle_sha3_384, /* 195 octets */
-	    SHEX("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC35530166 \
08EF2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E \
76F8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01 \
C9F0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
                
-	    SHEX("82FC97EE34A8FCC276AE1C8130555CC2D339AA6CB34003488378855529F9EE3AF819EC104DD2DE300AB7DBC04B2B4017"));
                
-  test_hash(&amp;nettle_sha3_384, /* 196 octets */
-	    SHEX("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF \
801E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539 \
E6A8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2 \
7622FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
                
-	    SHEX("75D140BE47E116211F4F668E05ADD36C83B3E481DF9F28064A41898335D97C805471214E29C0B849875845C9B8DE25E3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 197 octets */
-	    SHEX("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61 \
28334F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6 \
ACC86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22 \
AA503C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
                
-	    SHEX("1A04CD93747CA583A58AB4A8C7C8C7A33F025EDE1B2DD080E5AF0C4DC63C8715E436DD57FF7F401DECEF813F330D6588"));
                
-  test_hash(&amp;nettle_sha3_384, /* 198 octets */
-	    SHEX("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156 \
C0B27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F93926 \
2D4043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245E \
E361E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
                
-	    SHEX("FB0626F2B189679DD998BC18F30DF82D0907B62AA77C8669E22B53860E3988503D884884163A561739254CA13929B69B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 199 octets */
-	    SHEX("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491 \
B48529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF \
86A4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783 \
4535929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
                
-	    SHEX("CC2EF9602F80D0734295C7C158EC366608CF60A423D0836644B60831A94E7EAF994C81F19174FD6CA75BB246BBCCA200"));
                
-  test_hash(&amp;nettle_sha3_384, /* 200 octets */
-	    SHEX("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222 \
B64CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3E \
AEABE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC2 \
3A79A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
                
-	    SHEX("B5A7160112E0825A7C03643BEB98B1FC2549B81F01C3C4271DFF99BE57D472A7FAD133808D7D2D414D6011E9A2E8DFEC"));
                
-  test_hash(&amp;nettle_sha3_384, /* 201 octets */
-	    SHEX("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7 \
A38393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB3 \
2FD6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653 \
F3C9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
                
-	    SHEX("E7B3118D7FCA9D294F596D820F468CD9027920777A41A706EDE877CBEB9517F223B268C5E805A374051822692E9AB44B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 202 octets */
-	    SHEX("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF8 \
4D58EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D \
01C4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384 \
B3DA953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
                
-	    SHEX("C3FA6C9D0FF231198AECA80EA428AC4B32C481D390CE4A90D0F65FF7D58F696C1FAADA1673D7E2D161462C95C2E2A310"));
                
-  test_hash(&amp;nettle_sha3_384, /* 203 octets */
-	    SHEX("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295 \
381354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487A \
F49CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6 \
B7224EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
                
-	    SHEX("C4BD1157C093ACB27BD3BD7F444F836BFCBA0DAFE11675104C6437E5981442BE999C860DD6E1B75FAF6A553E907B61EE"));
                
-  test_hash(&amp;nettle_sha3_384, /* 204 octets */
-	    SHEX("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9 \
CB3C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03 \
6819C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2 \
E6DAB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
                
-	    SHEX("D099F3C8052CAA2CF9751B1ED2D472C21FED667892BC1C417600A4C93EFFE88F1B17B36D37E4D26B9CD65ACB13A6DB6F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 205 octets */
-	    SHEX("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD \
469D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7A \
A9CE013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFF \
B618E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E \
                0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
                
-	    SHEX("7A9FE13FE3318121BABB340A3B045DC89D1BE2D0EC05802C9254FEC39EFCDE163C514DCDBA3FF93F9B097486C2012385"));
                
-  test_hash(&amp;nettle_sha3_384, /* 206 octets */
-	    SHEX("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82 \
316CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033 \
AE9AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF0760 \
28C5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC \
                66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
                
-	    SHEX("8AEEDE5D6E2F9F1C7A6644A8DA0F93574DF8CA33B2ED9D364615E1F9CF1A801315410733881CE0DAD2F6FB5A916A97E1"));
                
-  test_hash(&amp;nettle_sha3_384, /* 207 octets */
-	    SHEX("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD093 \
8DDE5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D \
743F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1A \
D260AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C \
                6701290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"),
                
-	    SHEX("29E62D8C1B71F826544A0CBFCDD99CF8AA1C97E153063120D295EDF69E2ECB5A2783C66760D0F87BF944516824CCFCB1"));
                
-  test_hash(&amp;nettle_sha3_384, /* 208 octets */
-	    SHEX("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928 \
D7AD377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC4 \
1E0D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0 \
433EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59 \
D287F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"),
                
-	    SHEX("EB2F1BF2D9EE857B189318DFAF49DC3FAD79501189AC9B5765DFB234EC4A62F0B0E34E7AC3F494D6F05C7BB86AE5CDA2"));
                
-  test_hash(&amp;nettle_sha3_384, /* 209 octets */
-	    SHEX("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F9 \
7DF3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438D \
B1BB361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587 \
AA46AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623 \
047C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
                
-	    SHEX("2A9CF2FD012B025616478CEF6971B6F9E494A63AAB5F53310DDE70FC6ED27F1E2D7804AEB8D206F641A73E054DA620E6"));
                
-  test_hash(&amp;nettle_sha3_384, /* 210 octets */
-	    SHEX("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F \
808DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255 \
DA9843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01AC \
B8F0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F59 \
20E6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
                
-	    SHEX("5F8E2DE742036B6AC4A7D8987B47C4C7A1CCB7239E1B3EEFD1116D6392C79177D68C66221F31D0FAED9134429B89BEEA"));
                
-  test_hash(&amp;nettle_sha3_384, /* 211 octets */
-	    SHEX("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBF \
D4A43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8 \
E66AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F625 \
2C0407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA \
35C6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
                
-	    SHEX("B0B1F4058417516A5C5A9683A5D72B489E6AD42273D591791D2CDA7360A4008E86C8899369946F7ABFE29BF92C9CA965"));
                
-  test_hash(&amp;nettle_sha3_384, /* 212 octets */
-	    SHEX("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCD \
DB708FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A \
1F76B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9 \
B2D8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24A \
F8C8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
                
-	    SHEX("9172AAD6C15B4DCD79BBD84FAD0601119D8B4E3AFED17B594FF38424157985EE27B65826B9905486E767E85AA031E07B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 213 octets */
-	    SHEX("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0 \
819A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A156 \
6FC7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431 \
B4C40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2 \
878A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
                
-	    SHEX("BAFBB3321C4798548F5DD983EAC1E16E1F3EF2BA5C9D69A340F6CABC9C7FE9F1FD95A692B7387342304945674D9D2E4A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 214 octets */
-	    SHEX("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2 \
A186964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C \
2527B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0 \
C3792F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346 \
D43CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
                
-	    SHEX("A055E0A9C4575CD4D7AD84A240176F21ED68F484A269E0C9EFFB6FA93746E31F64B0B90C513D2B57EC78E9E5BA3BA99C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 215 octets */
-	    SHEX("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9 \
2017F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299 \
CAA792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA \
85BDDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2 \
B63ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
                
-	    SHEX("788D19AD68D1B26CB0078389B45FB18B3DA35A57A1EC914273158EAD43749BF1AB49B1A68D4831CE193F5852D20FD96C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 216 octets */
-	    SHEX("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81 \
C3CA9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB \
558E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC \
5A27D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66 \
DEECA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
                
-	    SHEX("9C8A4F5BE01AD5AE0946EF7E9F5A82287B6344B966EE28BDEDFE4BD43D840D232054D5E216716EA4F80B457CBC110D1A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 217 octets */
-	    SHEX("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC3 \
0FC10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377 \
D165B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6 \
BA42F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42 \
07033B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
                
-	    SHEX("A29BCB89FD2B89006782088BF9A4AB939EABAFF6F4EEFC31B01A66B73CDF0B977D945E051D7E9F02F19CF32AD4BEBA6C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 218 octets */
-	    SHEX("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5 \
D7BE5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7 \
D89E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C5500 \
08FAAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084 \
61804BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
                
-	    SHEX("61D3B13728925646476D67C8D626D2ECE69D9B42503FA6A0DF2B24A5F2AB0FB7D74C2F1F7F04304C49AC94BD4E93FDA4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 219 octets */
-	    SHEX("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296 \
F98379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998 \
704D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368 \
931E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4 \
102A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
                
-	    SHEX("589AB9981D9ABD1D712D59C6863D850BB1D412D24A967D76CCE78FFC998F8C016DD4B115A1BC4DC49248AB5F758C215A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 220 octets */
-	    SHEX("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F2 \
89FBF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1D \
C378F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F \
2CA082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B68 \
67D74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
                
-	    SHEX("B3CC7224A1DD208E739C5528239B8D335A129EE20E59102621180E6B51714E0D60078F4E7328726434AE41CA273515BA"));
                
-  test_hash(&amp;nettle_sha3_384, /* 221 octets */
-	    SHEX("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E81 \
2C39F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8 \
D22C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568 \
83413D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68 \
454779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
                
-	    SHEX("D33AD2A71C712A6F8AD9AC923966B4DB8C4818C79CC60F8275367D2452CFD2F5542FD1888D64C9E912B92A186842B000"));
                
-  test_hash(&amp;nettle_sha3_384, /* 222 octets */
-	    SHEX("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E \
4DAAE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D3750 \
77F2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB \
1CB6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF81 \
1A13F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
                
-	    SHEX("C12D450A020CDE18C24323FB4E3FB23255714B1D4CBF29719F74DA5E6151FAE901DC21A6680AD159FFB2E7C0AAABDF5B"));
                
-  test_hash(&amp;nettle_sha3_384, /* 223 octets */
-	    SHEX("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FD \
D28C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27 \
A6584C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026 \
EA542076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AE \
F5BF0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
                
-	    SHEX("E5B7A9B41FA0CEC3252FF95099523DC845C69B670D8DFEBA3E4AF6DEC659C4B2D4B04F5F7062209485A37C542CCBE7E6"));
                
-  test_hash(&amp;nettle_sha3_384, /* 224 octets */
-	    SHEX("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF450 \
82C4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F60651 \
9AEA0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05 \
BFB1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA0 \
9D21E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
                
-	    SHEX("5E2BA5382C357B5A1987BDAB9A2A0B053EB75EE770E1994E630F24015AB102E482A95A25B68F5DE99FE9748FA48FF696"));
                
-  test_hash(&amp;nettle_sha3_384, /* 225 octets */
-	    SHEX("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73 \
975809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB \
4D1BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE \
3FF6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171 \
D1651001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
                
-	    SHEX("0467C2B9F02AF8CEAF4F8FE88D1DE3EE03D78EC26EDEE0E34B6E7EE49AC357C35A9AE352FF4932D75E0617B8B0C61C80"));
                
-  test_hash(&amp;nettle_sha3_384, /* 226 octets */
-	    SHEX("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF21 \
11B97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4 \
957A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198 \
B7E838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B \
3DFA269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
                
-	    SHEX("87F9ECB906C9D8AAFA8DC62AF858C99609A8E9590BA5BC91A89205DE44F06AE7976A9BE918AAFC9134DE9029117152A1"));
                
-  test_hash(&amp;nettle_sha3_384, /* 227 octets */
-	    SHEX("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23 \
697ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACD \
A897944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBC \
E60827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE6117 \
9FE84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
                
-	    SHEX("510CB484B6D4B47A590F6211C7F33592246A2E05A1C69258B6CF9A24C1A3AFC2527841AE3FCD552E5103DD24743AC6B3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 228 octets */
-	    SHEX("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F \
152FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE \
62AADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E4 \
2D168B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE901150 \
4A49E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
                
-	    SHEX("03F3BB45FD70966AC5EFD9598C480ED677C86C7CF00B10261AE6790C5279A5E47386F3D31726D9CB619B92A79CCAE25C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 229 octets */
-	    SHEX("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06 \
35284D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF5207968 \
41E58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E19385666137 \
6C81CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C \
07DC819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
                
-	    SHEX("68A47C7D124E8AEA5CFEEF7A9D8CA7AA8DF6EEE6652DE3A385231F29BC4B983AEC8AF2A61329B64BB59A45B77A38E4DF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 230 octets */
-	    SHEX("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3D \
AC9F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47 \
971B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70 \
D9423798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7 \
FEBAA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
                
-	    SHEX("DD3BBA1B4F8493E0639151D9303835F492606E2DB3AF34FE65156A642794196D00A6C34A3A5FEA66202C3B5A79980A8A"));
                
-  test_hash(&amp;nettle_sha3_384, /* 231 octets */
-	    SHEX("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645 \
CA14E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8 \
BD0B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C \
0BA854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B \
18FE34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
                
-	    SHEX("50D3B02AC7B907B310C1C0105EB47F6DCF3AF0E473785DAA54D8037A9A3E74A5D1A41D811202F1E3C8A140173D92F60F"));
                
-  test_hash(&amp;nettle_sha3_384, /* 232 octets */
-	    SHEX("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE87 \
5DA0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94 \
311051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B \
349939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB44 \
44B85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
                
-	    SHEX("A6BBAE1FF8E00DCE34F640CEE2CDB5BCFE4382761BE36A940E50EEC12B5C2A02B2B6BE18A7C87A36FD2194C4D243EC38"));
                
-  test_hash(&amp;nettle_sha3_384, /* 233 octets */
-	    SHEX("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBB \
D5801AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422 \
9005F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A94 \
26ECEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB74 \
48F50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
                
-	    SHEX("7ED83EB659536B36061773073B148ED2117512372E49E0A3AEE48B96353EC936B32688B150C585944D2008F21366B531"));
                
-  test_hash(&amp;nettle_sha3_384, /* 234 octets */
-	    SHEX("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FA \
C4FDF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425F \
F7F1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6F \
BF5534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526D \
C643872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
                
-	    SHEX("2516E0015ED162073238996D5A03239087E01C2091F7B03637E6C89A758F565E45C908DE873E378CAA433BAF339D0552"));
                
-  test_hash(&amp;nettle_sha3_384, /* 235 octets */
-	    SHEX("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F5 \
4EDE927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747B \
BB53652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0ED \
E838AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F \
02B64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
                
-	    SHEX("6BAE42ADD06C6A20A05D845E7BF391F1EAB83E83A710A18527FC03646104E52A8B417CFF375753882081F31B6F2295EB"));
                
-  test_hash(&amp;nettle_sha3_384, /* 236 octets */
-	    SHEX("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51 \
F1534BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF14 \
30A9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19 \
AFA65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB \
93D2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
                
-	    SHEX("14690DDB5A48FDF382DBC745AD0330C1486124F6AD2E5AE4A850E38C264F99AEAE6F156062AB1946DD07AFE1700A8294"));
                
-  test_hash(&amp;nettle_sha3_384, /* 237 octets */
-	    SHEX("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267 \
512CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE5121 \
33BB7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627A \
AC02ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E \
742EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
                
-	    SHEX("9DA6652BA890007A01126F0F65970ABF3474C7659C6C80B04DA2CA592EDF0F399601BC0DAD10A0DD6E316A286E2338EF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 238 octets */
-	    SHEX("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBB \
E2B01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9 \
B0F663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F8386 \
9CA27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D \
6D055B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
                
-	    SHEX("B94D578DE79A437BEAD951E9AEE912540D0139965CF0142F1FD403534959B75D11E0B2463201B10364B905CF9BAA57B3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 239 octets */
-	    SHEX("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0D \
D8E9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07 \
A38F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8 \
AAE141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A90 \
16F2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
                
-	    SHEX("B85F56F69D3BE57A1C2AA553F90BC1B089E8F1C561881BE64630EA6BA4DD3BD5301512313A18C26DF3E97E056A59EDCF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 240 octets */
-	    SHEX("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA \
67273BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1 \
466E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAF \
CD3F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B8 \
5AE5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
                
-	    SHEX("7D9508FB795811EA1442DB3ECB779CB0494736E7123B252CF88A9A0B50D57CF00B87A6C4FAC27F821CD55979D586AA39"));
                
-  test_hash(&amp;nettle_sha3_384, /* 241 octets */
-	    SHEX("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1 \
A71D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69 \
A7A682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0 \
C8F9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7 \
801A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
                
-	    SHEX("AFD94B061F354B04D0718326D7E10A6B598CE31CC39C52D265D6CF04E4D9EE75CC200149367600312E7514A62F0F0964"));
                
-  test_hash(&amp;nettle_sha3_384, /* 242 octets */
-	    SHEX("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48 \
A27D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68 \
020C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C1 \
4B4377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C \
41CCBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
                
-	    SHEX("EC63CE9DD979FCD132244BE11A45DDB1D00FC8F80160B8CC456F5C5EB89E0C3F675B28B92DD9E6CEFAA5DA57B4908646"));
                
-  test_hash(&amp;nettle_sha3_384, /* 243 octets */
-	    SHEX("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC057828908 \
2B2A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE4920 \
87D7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA \
800E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1 \
8867B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
                
-	    SHEX("86301FE98F3FFABB0CB0085AAA1EC61BCAD6171459A8623BB780EC32E46F52649946A421EBFC7DE90F0E74EC787A3E03"));
                
-  test_hash(&amp;nettle_sha3_384, /* 244 octets */
-	    SHEX("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E972 \
6C690D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9 \
359AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B \
5F65E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF374 \
5F0EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
                
-	    SHEX("DDF8D547BBA4F43D8864CAEF1B1BED77AA12E41F6886A5D8758C654B7EC1FA5B0E77BA4E7680C7830DA161E14CB1E65C"));
                
-  test_hash(&amp;nettle_sha3_384, /* 245 octets */
-	    SHEX("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3 \
796141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C \
5539FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61 \
694301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49 \
171433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
                
-	    SHEX("72953FE4CA34E717E304DC77AFD9DEDE32A8467127B9F78BB0BE6191A7ECD051B7DAE091B1758907DDA3B1D25C0C5883"));
                
-  test_hash(&amp;nettle_sha3_384, /* 246 octets */
-	    SHEX("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4 \
DE9C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B4 \
5C966B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF1 \
02D23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F \
5D7297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
                
-	    SHEX("F36A9EE455066E562FB675F399D9DCC6BCCF68FD1B0BA9F7DCC1EDFAC1F1E234CB67B5A0F770E55435F75F9EC84A9151"));
                
-  test_hash(&amp;nettle_sha3_384, /* 247 octets */
-	    SHEX("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82 \
EA7D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5 \
577B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3 \
450CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4E \
D5E607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
                
-	    SHEX("37368F5A074DA0E5075845F76B1AC5858DF793EEF88A854C7DAFE3B90720707A145A5DCB0D9266C6148204CE693C5432"));
                
-  test_hash(&amp;nettle_sha3_384, /* 248 octets */
-	    SHEX("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA9 \
09FDF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4 \
BABD9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D \
619BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D \
001EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089 \
                612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
                
-	    SHEX("DAAC83B0C5C8F8FC3BCCD259C27D964673B4DCA790B4B63899E1B6C19CC291FE6F88376281E0FA320ADFADC82A8FF4EF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 249 octets */
-	    SHEX("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B56 \
2B288D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944 \
1627A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C29611453151305493 \
11FC07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9 \
A7CF97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A192860 \
                4B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
                
-	    SHEX("357258FA6579867CC0089C8B3C93CE10677A5AD4DBEEE2A27CEA90317ACEBE7254505468875BCB334E0B6F70CFE59082"));
                
-  test_hash(&amp;nettle_sha3_384, /* 250 octets */
-	    SHEX("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A7 \
3D80A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A5 \
1B56D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B \
3A356001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90E \
BD090AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911 \
                F165D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"),
                
-	    SHEX("06E9F892A2716DE18DAC1B8946604473ADE060AFC8CB1287E389994076FF92B4BAE3D84854470ED061AE31A97B7D0DCF"));
                
-  test_hash(&amp;nettle_sha3_384, /* 251 octets */
-	    SHEX("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC \
7EC6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699 \
DF35D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5 \
D397FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343 \
7095707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A0748 \
4A5D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"),
                
-	    SHEX("64047790B1656E78953B981B1BBFAEAF9D2B1B8953AB0304791238393F3372C6373A1E087B57BE48806229DB73E1B1A4"));
                
-  test_hash(&amp;nettle_sha3_384, /* 252 octets */
-	    SHEX("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03 \
742636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EE \
AD3E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A \
4E7B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED \
122A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6 \
772E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
                
-	    SHEX("9CA6F39087E6457E12C969D41C8BD66BDD6990CE23D355669E7606B9203D216811237955DF6739495D94F0C48CE02845"));
                
-  test_hash(&amp;nettle_sha3_384, /* 253 octets */
-	    SHEX("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A474299 \
22C4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D \
7E8B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD99 \
7CEFC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B25 \
46FE05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B7 \
15C1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
                
-	    SHEX("FE99F19C79A89080E2FF90981DDE91994542D4BCC1276A82D1A2E53850341B9AD5422CEAB81E69DAE5E91DC5FF60E1A3"));
                
-  test_hash(&amp;nettle_sha3_384, /* 254 octets */
-	    SHEX("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC2 \
0AB4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D0078 \
5E57788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993 \
F92B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B73 \
0AD3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C \
39CF421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
                
-	    SHEX("92E1D994FEA2FD500A4B7F5139119058A5B70EF6174E553F12FE7BCFCA24B00A28391E3761BDCBA3FD6B033C1286E28E"));
                
-  test_hash(&amp;nettle_sha3_384, /* 255 octets */
-	    SHEX("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23 \
346775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD \
181C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BB \
A40489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B61836 \
39DCFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C5 \
65CCA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
                
-	    SHEX("6BFF1C8405A3FE594E360E3BCCEA1EBCD509310DC79B9E45C263783D7A5DD662C6789B18BD567DBDDA1554F5BEE6A860"));
 +  test_hash (&amp;nettle_sha3_384,	/* 0 octets */
+	     SHEX (""),
+	     SHEX
+	     ("0C63A75B845E4F7D01107D852E4C2485C51A50AAAA94FC61995E71BBEE983A2AC3713831264ADB47FB6BD1E058D5F004"));
 +  test_hash (&amp;nettle_sha3_384,	/* 1 octets */
+	     SHEX ("CC"),
+	     SHEX
+	     ("5EE7F374973CD4BB3DC41E3081346798497FF6E36CB9352281DFE07D07FC530CA9AD8EF7AAD56EF5D41BE83D5E543807"));
 +  test_hash (&amp;nettle_sha3_384,	/* 2 octets */
+	     SHEX ("41FB"),
+	     SHEX
+	     ("1DD81609DCC290EFFD7AC0A95D4A20821580E56BD50DBD843920650BE7A80A1719577DA337CFDF86E51C764CAA2E10BD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 3 octets */
+	     SHEX ("1F877C"),
+	     SHEX
+	     ("14F6F486FB98ED46A4A198040DA8079E79E448DAACEBE905FB4CF0DF86EF2A7151F62FE095BF8516EB0677FE607734E2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 4 octets */
+	     SHEX ("C1ECFDFC"),
+	     SHEX
+	     ("D92BBD604BDD24B9889508F8558B13E96595AC90BC8A441DAF9B51D6ABC14FFD0835FB9366E3912504264CE87E421CB8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 5 octets */
+	     SHEX ("21F134AC57"),
+	     SHEX
+	     ("E248D6FF342D35A30EC230BA51CDB161025D6F1C251ACA6AE3531F0682C164A1FC0725B1BEFF808A200C131557A22809"));
 +  test_hash (&amp;nettle_sha3_384,	/* 6 octets */
+	     SHEX ("C6F50BB74E29"),
+	     SHEX
+	     ("D6DD2ED08C1F644857A15DAFAF80538BEE597278C9ABE047BFBABFB8B1FCB7543E80AE9F7143D00F4DAAF39B138AB3FF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 7 octets */
+	     SHEX ("119713CC83EEEF"),
+	     SHEX
+	     ("49CA1EB8D71D1FDC7A72DAA320C8F9CA543671C2CB8FE9B2638A8416DF50A790A50D0BB6B88741D7816D6061F46AEA89"));
 +  test_hash (&amp;nettle_sha3_384,	/* 8 octets */
+	     SHEX ("4A4F202484512526"),
+	     SHEX
+	     ("89DBF4C39B8FB46FDF0A6926CEC0355A4BDBF9C6A446E140B7C8BD08FF6F489F205DAF8EFFE160F437F67491EF897C23"));
 +  test_hash (&amp;nettle_sha3_384,	/* 9 octets */
+	     SHEX ("1F66AB4185ED9B6375"),
+	     SHEX
+	     ("D6154641D7D9DF62F0CEDC2BD64EE82412B3A80F6EACE7C45F9703373379007EABF592D2D2116E093DC33DCBBA4649E9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 10 octets */
+	     SHEX ("EED7422227613B6F53C9"),
+	     SHEX
+	     ("2EE5DF2591CFC4CB1E1D0BD8B28727F0FA5359A75F7819A92A3CB80DDB5708E4705177B981396B4818D11E3CA615EC93"));
 +  test_hash (&amp;nettle_sha3_384,	/* 11 octets */
+	     SHEX ("EAEED5CDFFD89DECE455F1"),
+	     SHEX
+	     ("786C3F73FB092BE184FC2B19F5920F3D94F25D4523165AE82F9B39B2C724FD62DC9A3263091A239D5EF1AD562DD4FD26"));
 +  test_hash (&amp;nettle_sha3_384,	/* 12 octets */
+	     SHEX ("5BE43C90F22902E4FE8ED2D3"),
+	     SHEX
+	     ("79188139EC2CAD8D197D308B806CF383782C29A8C27EE29C5E31425B2DD18B2F5F491FBFB38D7078F58510125C064A0A"));
 +  test_hash (&amp;nettle_sha3_384,	/* 13 octets */
+	     SHEX ("A746273228122F381C3B46E4F1"),
+	     SHEX
+	     ("0C82B8C75C5D540E7D624928281FBA8B8D0B1583D74F3F0EA4F200F1CE5475149C282E05DB695DC67BAF42DEFFDC3F55"));
 +  test_hash (&amp;nettle_sha3_384,	/* 14 octets */
+	     SHEX ("3C5871CD619C69A63B540EB5A625"),
+	     SHEX
+	     ("830D2325C001623EDFEA97EA1D0E65982D4ED7ABB8E64EA61C85E9BC1882D11FC4153C30BE63FC66F5FBCE74BB394596"));
 +  test_hash (&amp;nettle_sha3_384,	/* 15 octets */
+	     SHEX ("FA22874BCC068879E8EF11A69F0722"),
+	     SHEX
+	     ("1DBE1BC60A9C6FBE10A727E2A6D397930D547AD2C390286948C3167EE77FF6E275EC8431C5AD4B4E4E5AE67A4BC88D05"));
 +  test_hash (&amp;nettle_sha3_384,	/* 16 octets */
+	     SHEX ("52A608AB21CCDD8A4457A57EDE782176"),
+	     SHEX
+	     ("FEEE2EF332515284E0BA247C62F264199044D03877C58E54B51A62E39E91C27AAAE384837EB9D479B4C0308CFC6B779B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 17 octets */
+	     SHEX ("82E192E4043DDCD12ECF52969D0F807EED"),
+	     SHEX
+	     ("1888E953727CB837DE40C69869560C20729C50638E4561B385937BFC4C297E789EA6C03EFCF2DF3290B1FD36BE268C32"));
 +  test_hash (&amp;nettle_sha3_384,	/* 18 octets */
+	     SHEX ("75683DCB556140C522543BB6E9098B21A21E"),
+	     SHEX
+	     ("30DE7B544265422CE689E667F48498F455E8BF1055653F21294EAD7D2E898B05FA75EECA46DC2575C475C480AA49CA62"));
 +  test_hash (&amp;nettle_sha3_384,	/* 19 octets */
+	     SHEX ("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
+	     SHEX
+	     ("041B7C89BD4B582A7D20E579C6FDB18BA0C1251DABACC687AF448EB49151BBC04ADCB81D797D4BC51F03BFFF230FFCC6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 20 octets */
+	     SHEX ("E26193989D06568FE688E75540AEA06747D9F851"),
+	     SHEX
+	     ("EAF751EE6E75AA2C56453F316C019BDA7D7AE1FDA03B79AC413BB1F2840D58AAAAC77F2DC106D22F1A71157F9F841C4B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 21 octets */
+	     SHEX ("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
+	     SHEX
+	     ("16C4A7F7E8BA7EA13C59576BE602F885E21BE7C34B3AC05CAC4262BAAD8AA3F95BD9260F13F08550CE331EC773BA758C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 22 octets */
+	     SHEX ("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
+	     SHEX
+	     ("5119A4FC11DAF2EF5DEB7AEB35549162D9AFC827392A8868E7F8594A5C194D9C8F6A430CB386B8D825CC6DAB4EDB742A"));
 +  test_hash (&amp;nettle_sha3_384,	/* 23 octets */
+	     SHEX ("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
+	     SHEX
+	     ("A91F0170457E78B3BB15B0BDC0FF4EFE8D7313D2725D8E8DB875BCAFBC11314126559F45E86E78136EB214FF02764CAB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 24 octets */
+	     SHEX ("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
+	     SHEX
+	     ("98FE81746CCF7CFE5571D6D8B09943ECAE44F606444F9DABF1A57FE4E871F6962266D18652FD4EEBDBE492CFC5B2B21F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 25 octets */
+	     SHEX ("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
+	     SHEX
+	     ("3DD9054C105C40798DF45CFB5880F97A9536FA7BD13F1D816B8EE887FCBAFC102A7D4BDE9FE6E265538EEC2525B50D89"));
 +  test_hash (&amp;nettle_sha3_384,	/* 26 octets */
+	     SHEX ("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
+	     SHEX
+	     ("DECD778B89B4295072DBF98689E2EB6066E406356EA4B7CAD550019F4A2ABB25163E9571D0ADB9ADC6A802B7E03C152C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 27 octets */
+	     SHEX ("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
+	     SHEX
+	     ("37F14B317D46BDB3E5DD6F68986A08A098C46B9D85D1F254A17878C008F97926C8A13C3838721CFE3A58076F3992F26C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 28 octets */
+	     SHEX
+	     ("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
+	     SHEX
+	     ("641A7AF13B889D1A0F1AA3E4E4FF8CC5903C47E1A52BDEA257D80E37E596564AB33EEAD06717CDB6B706CB6986293D4F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 29 octets */
+	     SHEX
+	     ("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
+	     SHEX
+	     ("122B8B86103FE3C18FF28178A256ACB0CAB8518338D2CBA697E3F560ECFEE09B024B97D8D1F69632AD1F2C5F5628D3EF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 30 octets */
+	     SHEX
+	     ("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
+	     SHEX
+	     ("F35A292E197007E28CE652A067173F3659C51B70438AA9E433081D3DF71B4A11E3F3BE5AF32E2C08D23A0B44E30B0BDF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 31 octets */
+	     SHEX
+	     ("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
+	     SHEX
+	     ("2EA596B446D5CCD8F0927A2E3790911E00F1F52CFBFC41F12290CBACD1C903C74DEEF840FD1398E12EE863ACD92BAEBF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 32 octets */
+	     SHEX
+	     ("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
+	     SHEX
+	     ("BAAE7AAED4FBF42F9316C7E8F722EEB06A598B509F184B22FBD5A81C93D95FFF711F5DE90847B3248B6DF76CABCE07EE"));
 +  test_hash (&amp;nettle_sha3_384,	/* 33 octets */
+	     SHEX
+	     ("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
+	     SHEX
+	     ("32CFC8A18A7116D4B9029051941808C3B332EFDB132C515F9110E19B8354355D94616C9965BC2D1F2489F8452AF7FB2F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 34 octets */
+	     SHEX
+	     ("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
+	     SHEX
+	     ("73443EA38A8801395C044E3CBECD45DD62D6E304C5440FA9FE9651A438C010A76712759BE20681F1416661E746E5EB77"));
 +  test_hash (&amp;nettle_sha3_384,	/* 35 octets */
+	     SHEX
+	     ("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
+	     SHEX
+	     ("6E82F460660F3D2CC33AA59A37F325EED0133FE29A9CB428A3C22572B6BF6C5DA2D0D4645C49135653A049795D4E2AD0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 36 octets */
+	     SHEX
+	     ("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
+	     SHEX
+	     ("229160A61CF2842B37EA85788BB1CE8294DED9EAD266359D61DF3D6DF98EE155ED03AB1A51D6291B41680A00553298EB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 37 octets */
+	     SHEX
+	     ("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
 +	     SHEX
+	     ("F5D838DEDF07AC3A5646221ADC6CA59045976DF9C33367FDAA0BE3AFC57EEF0D434EE92CD618B3FA26C7EABD18D78772"));
 +  test_hash (&amp;nettle_sha3_384,	/* 38 octets */
+	     SHEX
+	     ("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
 +	     SHEX
+	     ("D41A324A1739BBCFC983A2B250750A1117E57BD26512CC5DCA7066D8B972AD9EB0BB3C7E36B9B84FC0E8129B69CD3847"));
 +  test_hash (&amp;nettle_sha3_384,	/* 39 octets */
+	     SHEX
+	     ("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
 +	     SHEX
+	     ("170D73BAF77EAE7A852A1BB19BA6665F9EF425A66F2649E959B5CAA82D01FDB89C8C7FA6F40702F7C3391B146F6FA33E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 40 octets */
+	     SHEX
+	     ("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
 +	     SHEX
+	     ("A8F4A60A8FF5B3EBB4EADB9C46F1F403AB7FF632C7A11F80FC9153858B484291B3936713076955207D0C7E1964DC1346"));
 +  test_hash (&amp;nettle_sha3_384,	/* 41 octets */
+	     SHEX
+	     ("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
 +	     SHEX
+	     ("5815D78ACA9600632239B7CE8385D7E837F883857601EFB78F9C2DAC9A96AE0BFD107526F268D06FB4227D4774A9E727"));
 +  test_hash (&amp;nettle_sha3_384,	/* 42 octets */
+	     SHEX
+	     ("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
 +	     SHEX
+	     ("A5D91B01650D24B4753F41871FA700E997D5F1EF9C06D8F9B3A9B2D318716408E1566BB04B49B84E77F5F73D8F640541"));
 +  test_hash (&amp;nettle_sha3_384,	/* 43 octets */
+	     SHEX
+	     ("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
 +	     SHEX
+	     ("C7BA066881DB931E9C674D74CE2309B3002C6D5BC22056C454261CDBC5D93FE310EADD755E41FB1D789FDB9A73FDA28F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 44 octets */
+	     SHEX
+	     ("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
 +	     SHEX
+	     ("A52CA3413BB83934B1EAD4686F639B90C5EE3CB5BE7E29A1A5293C868441D79BE2EF246B427FFCF0568D4D01BE54FF0D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 45 octets */
+	     SHEX
+	     ("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
 +	     SHEX
+	     ("13E60554FA18CEF87CEABE147541886D97C2FB5F40F163D953306D2A26B013B33CB202D78AEF49FD47E7EC1C745920CD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 46 octets */
+	     SHEX
+	     ("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
 +	     SHEX
+	     ("E4E03CCBA92BBD28182D005F69DE4E71C61C62CD323DECFB2ADDBEEFF7EE74933AA7A167E4E1DBB3DF7E5C91184F2D88"));
 +  test_hash (&amp;nettle_sha3_384,	/* 47 octets */
+	     SHEX
+	     ("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
 +	     SHEX
+	     ("9B26E9BF13B6FC33FD335DF976C8E1B781C800895EBD72E34F96EB875B41F04AAEE825CD8F0EB6C43D803F4E6EF688A9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 48 octets */
+	     SHEX
+	     ("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
 +	     SHEX
+	     ("A127FEFCDD240F762CCE3F5F1551FC7E1CDEBC7950D1CD94C6888F490CB2285A10FD0EE797B168C5CA4761FA232AAF05"));
 +  test_hash (&amp;nettle_sha3_384,	/* 49 octets */
+	     SHEX
+	     ("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
 +	     SHEX
+	     ("FEB5A24EDB05BEF846B0A1F3F48DA212DFC2D0BAC746890D4AD72FBE3A7B4FF8E2B542B827779467122271B1E0DF2BD2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 50 octets */
+	     SHEX
+	     ("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
 +	     SHEX
+	     ("8DA4F3D1A13197171B02E1CCB07BF51CDBABD833FDC3C3797A113CFA5C71795782C47CE36C389FBAD461D0D5B59CA684"));
 +  test_hash (&amp;nettle_sha3_384,	/* 51 octets */
+	     SHEX
+	     ("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
 +	     SHEX
+	     ("D19FE4A5F93BCD483DAA7AF8CB636807962D40AF9A507DC4FA4E1FD480A6E8FA3C25FA30EB6B74979EE456C1644A5C1D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 52 octets */
+	     SHEX
+	     ("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
 +	     SHEX
+	     ("63FF3053ACE687FB91070CA7FC6A51C259E13DA8AC0DD741AB36D1FA930E3BB9AC6A1FAD654F7238CFC4485C5F9F8252"));
 +  test_hash (&amp;nettle_sha3_384,	/* 53 octets */
+	     SHEX
+	     ("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
 +	     SHEX
+	     ("39DDE02A319B5E869F4C51A1D30FF4D4D88EBE504C54F155AA5FAD3316404FDBD1918074D35D14BAC88D6F359108A1DC"));
 +  test_hash (&amp;nettle_sha3_384,	/* 54 octets */
+	     SHEX
+	     ("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
 +	     SHEX
+	     ("1959378F32117E58C0141160E16FACFE336590196BE805D149EB5AEEA641F9BB119B3EDDFEFD817701C82D2F528B823E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 55 octets */
+	     SHEX
+	     ("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
 +	     SHEX
+	     ("7B172A9BB311B1375E15ECE1C1E8F092BECFAFEC9F3144E93F596EB7E6ABFB34FCEDB08EDA7883EBBF40038B7A754F9F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 56 octets */
+	     SHEX
+	     ("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
 +	     SHEX
+	     ("6BA32ECAAA0AA9C59E72173F2A7816AC51F313C467A017190DB9832C6311EC23B8D56B7B220FA09A9081962EFED5183E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 57 octets */
+	     SHEX
+	     ("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
 +	     SHEX
+	     ("55FDF2EC27D334B5B59EFB9B6D518E25BE0F5FF6379F7B97945F3E1235EC70295B39EBEABF70FCAF1E61EDB1C21A4C06"));
 +  test_hash (&amp;nettle_sha3_384,	/* 58 octets */
+	     SHEX
+	     ("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
 +	     SHEX
+	     ("D51A3F33919FE5DA0EFEA6EDAD201F01FA8416C385A89D96DF743D243A6AABA5B7690D187B95CAFFDACD1E85F56B813B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 59 octets */
+	     SHEX
+	     ("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
 +	     SHEX
+	     ("F1D6E8F95C497D5BEAFB4215E07CDB59E0E3709CF561618F67E301931D204C6CE477E0F750099584B645E2F718650813"));
 +  test_hash (&amp;nettle_sha3_384,	/* 60 octets */
+	     SHEX
+	     ("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
 +	     SHEX
+	     ("B1D347D057CCD72867B12BF00BF511F87DEFCD0FA6ADADAF4BB1AD790F06ECBB1F4488A0319B05C46A7874857370CE76"));
 +  test_hash (&amp;nettle_sha3_384,	/* 61 octets */
+	     SHEX
+	     ("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
 +	     SHEX
+	     ("4F192EDFA54FECE64AC0B3EC9E120B291ADE99948805A87BBB04947E928BB5EBA87E2EE599960C436EA7C7884187E78C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 62 octets */
+	     SHEX
+	     ("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
 +	     SHEX
+	     ("75E23FED3B59DB6B1D3378B7E8772642CBBFF7710D8A91B249BB6C68E384CD416F19AC1E8ED92B71D0CA303D247EE9BD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 63 octets */
+	     SHEX
+	     ("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
 +	     SHEX
+	     ("C8D1E6BE5485FC13BF433F11A580ABBE89B12A66D0E5CB141E1D62CDC6A367725793FB25840B36CB7003F2E7DF3E5F2F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 64 octets */
+	     SHEX
+	     ("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
 +	     SHEX
+	     ("423BA134D3BCB5E440AC83372C7EDDBA3AE3BDDF1222F505C19CDE246AD76A2B0D07239A54E1D0934C9B3D29D49E5FBD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 65 octets */
+	     SHEX
+	     ("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
 +	     SHEX
+	     ("662C4851D311A786DE4CDA7E9EA1EFF0BFA462761FF6CF804E591ED9A15B0DC93A2BB6A6CFFDC8D7D23A233A52C86EAD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 66 octets */
+	     SHEX
+	     ("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
 +	     SHEX
+	     ("5F54B1DAFA67ED9B498125E064F0B07F54E754E3F30720DD4A471E9BB6E307F05FB69BC81D391F503C95C3BB671E6973"));
 +  test_hash (&amp;nettle_sha3_384,	/* 67 octets */
+	     SHEX
+	     ("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
 +	     SHEX
+	     ("A21B55DED8FE41FB2B193FA490420A8B62FCAE9A185DA85E253DAEFE85270B6904BA4ECC76BB5128926FFF9D79F728AD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 68 octets */
+	     SHEX
+	     ("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
 +	     SHEX
+	     ("341BE5677A05EED816A219669D680BBF185B31CF3EB0D289F90210FB1A7940D9BFF4909320AE4E3B7274E5BE479C46F1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 69 octets */
+	     SHEX
+	     ("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
 +	     SHEX
+	     ("D70F78894E292B075A0FE56FB952B2CE87A94CA029347159FBB12B22103DD4DC4C265B7AE88950CCA89C40B531437AA4"));
 +  test_hash (&amp;nettle_sha3_384,	/* 70 octets */
+	     SHEX
+	     ("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
 +	     SHEX
+	     ("89BD6B7CC9ADDDFFE46BF85C56B8CE66E1B1B46969B197ADBF2E34B7059D8BB05F9F53BD1A58A7E0A66E5EF208BF5695"));
 +  test_hash (&amp;nettle_sha3_384,	/* 71 octets */
+	     SHEX
+	     ("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
 +	     SHEX
+	     ("AE651EF50A20B0F496F104F56F845206ED544B28D0374CBB779146DFF2EA5894EB29301FE33872F9B299A79C0C0F28C4"));
 +  test_hash (&amp;nettle_sha3_384,	/* 72 octets */
+	     SHEX
+	     ("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
 +	     SHEX
+	     ("A842918DFBBF3BFFCCC527B6DD2C0DF4EB3F100F0692727DA77DAF44A654876013B37031C493AC18950003EEBD107A29"));
 +  test_hash (&amp;nettle_sha3_384,	/* 73 octets */
+	     SHEX
+	     ("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
 +	     SHEX
+	     ("20D16CC6AF5B4D5AECCEAD09F300B1DC1DA93A608370EE0B2CF15C316508B5EF8C9BE27D0F7288617B1E529FC2932038"));
 +  test_hash (&amp;nettle_sha3_384,	/* 74 octets */
+	     SHEX
+	     ("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
 +	     SHEX
+	     ("69A3BB36F52EB650C6E8242DB05659573AF811A1A5DB908F773D65E74D327F5B65303DD0DD9BD07FF100D050E46FE97D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 75 octets */
+	     SHEX
+	     ("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
 +	     SHEX
+	     ("D239F2FA1675A1A031E2F6E8A53D6E2F37D081CDB029727B3ACBDD7CBFC7D3581BDE8D3068AA9A300AE12B7245124508"));
 +  test_hash (&amp;nettle_sha3_384,	/* 76 octets */
+	     SHEX
+	     ("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
 +	     SHEX
+	     ("2F8D747DDF64320297B44F8547EF42FCE78A48F0A59A18DB1CFB9F43C049628F97C0BB93ADAAB9617155272424F74027"));
 +  test_hash (&amp;nettle_sha3_384,	/* 77 octets */
+	     SHEX
+	     ("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BAFC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
 +	     SHEX
+	     ("714BE6F2F934E0B6FD69E392D99ACC98592B015E48A1637262F99286502B06774783BB9F371C760C3EB78AEADFBD0DF0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 78 octets */
+	     SHEX
+	     ("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4FCF \
4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"), +	 \
SHEX +	     ("22A41B117464F7F49682E8139A0D5BD23FE00D1190B1B419F27B490B729B56BBA9DE649DD7C988B6B308038661E1C362"));
 +  test_hash (&amp;nettle_sha3_384,	/* 79 octets */
+	     SHEX
+	     ("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C588435548066EA \
2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"), \
+	     SHEX +	     ("77780F3646D288291790F2A5F4AA9C98A64A1115306994CD65C7620DDE06D35117CE4B79DAE08B5B4E798459010941BB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 80 octets */
+	     SHEX
+	     ("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F037AA \
58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
 +	     SHEX
+	     ("5CED3B7368582DD6DEBFE41D6AFFD82B72894B51FF4C4ACCBA09C595B36E23E347AB4BAAB0E5191D86E26E6596D62E23"));
 +  test_hash (&amp;nettle_sha3_384,	/* 81 octets */
+	     SHEX
+	     ("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D06D \
A83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
 +	     SHEX
+	     ("1410EF9ABB8D98B1C65E113A61915B0E6933BC59DA31C8FCC39B7165E715919184375D822A07C778F63431BE2AEECD99"));
 +  test_hash (&amp;nettle_sha3_384,	/* 82 octets */
+	     SHEX
+	     ("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F279E0 \
733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
 +	     SHEX
+	     ("330ED51B045471DEA8CFF26510D68494611ECFD614D49E5A9CC8846A132519BBCF49907691AC5ACCFC0528DA0C14D49E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 83 octets */
+	     SHEX
+	     ("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A0D1 \
FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
 +	     SHEX
+	     ("387111A206FC6488F78D41786886A9E5EC9F73E1131D92F290F68512320A408D5F63EAA5ABA32D9853EB11B5B0887E62"));
 +  test_hash (&amp;nettle_sha3_384,	/* 84 octets */
+	     SHEX
+	     ("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541274 \
82BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
 +	     SHEX
+	     ("78573F5D075200D3823194A71E55880F4FE78489234DBF3DF3E3734CBCAE8DC1D8C1AE95F9EFA9903DC4C4581B59DDDE"));
 +  test_hash (&amp;nettle_sha3_384,	/* 85 octets */
+	     SHEX
+	     ("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F4B0 \
1F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
 +	     SHEX
+	     ("FDFE4F1B034733C2C94A7B36E2B52774A95C2BDE22FCDDFCEF52F7FEF7C67F08E2F7B9B8967E447F76EF91960DA76288"));
 +  test_hash (&amp;nettle_sha3_384,	/* 86 octets */
+	     SHEX
+	     ("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C7619A \
6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
 +	     SHEX
+	     ("48D66A4165AA54528ECE89BD9AA00EAB196F32DFDC4D76F236655835527AAA1642E6BF4EDF24F030F5EEEF07FA40F5D2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 87 octets */
+	     SHEX
+	     ("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7FC5 \
C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
 +	     SHEX
+	     ("3C2575372CE1F380A6E66BB075FBAE98FC2E6D3D267A20FF0313ABC3DE252E03FD5BDFA8BC2B79FC874CCDA4ABDBB4A6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 88 octets */
+	     SHEX
+	     ("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E4CE \
FB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
 +	     SHEX
+	     ("0EE6AECA8DD80B74225AC4882E2BC1E6819C9B94F0D0BC0A1E21AABF4B11CB74DB4734BC8D1179D7DCEF535BE9F3DA28"));
 +  test_hash (&amp;nettle_sha3_384,	/* 89 octets */
+	     SHEX
+	     ("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD591DF \
1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
 +	     SHEX
+	     ("8027E5044923F8EEE1DF184865CD97B635A78DA199FD80AD3D343A5AE03D1B165E58D1B0BD093EF916A16D6641BDA17C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 90 octets */
+	     SHEX
+	     ("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85DC95 \
286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
 +	     SHEX
+	     ("796818E047913D5AFB4AE4C5B7C5D5EF699A3A9EBEFB44462EE8FE603CA5628973369E4A9D8E10115FDD75C89707A8F9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 91 octets */
+	     SHEX
+	     ("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96813 \
544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
 +	     SHEX
+	     ("1E96EFF62E9F464B4802972FDAC77C3EA1131B2822619D2C5D863E357D0945C17F93EDE66AF05D46E63C2857A54F67F4"));
 +  test_hash (&amp;nettle_sha3_384,	/* 92 octets */
+	     SHEX
+	     ("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD55E6 \
34AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
 +	     SHEX
+	     ("4CC41C2FB7D71DA1AD36D18029F755DAF342E732EC31F0C06E27091307718ACB53FA113AE508DF38B8C96834DE33F9F1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 93 octets */
+	     SHEX
+	     ("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE40603230EC \
A6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
 +	     SHEX
+	     ("9A8D4B560421C82991BDFCA0898A29A59BDB09D20F8A5B279096723BAB382789F081EAD50D273ECA436C526ABA6D5CFC"));
 +  test_hash (&amp;nettle_sha3_384,	/* 94 octets */
+	     SHEX
+	     ("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CDC58 \
5FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
 +	     SHEX
+	     ("367CB3FE03A3CBB50FAE1FE7EA883A0AE53CBE772F709DC5505F3C907564C08FC49707CFF9639B25C746B6039FF48AE9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 95 octets */
+	     SHEX
+	     ("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409226 \
1AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
 +	     SHEX
+	     ("BBBD05D69D7A082FCDA8ED535D7E4E5DE1377BD91E72D42DC95295C9DB780169E2F9620EC7A5AFF959FF2D946FD20A72"));
 +  test_hash (&amp;nettle_sha3_384,	/* 96 octets */
+	     SHEX
+	     ("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE49D \
0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
 +	     SHEX
+	     ("BE8BEC0C2EC721E0C326037CE86A1518FB395C3A9802DE01C3E234268EBB9AC9A39A6E404F25FB7FEBDCF1F7F25DC083"));
 +  test_hash (&amp;nettle_sha3_384,	/* 97 octets */
+	     SHEX
+	     ("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A6E6 \
D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
 +	     SHEX
+	     ("2AEEAF292AD625221BA79A621217FD1B3F8978BA83FE7FF13B38574FCFAFFBD207298854B6F9C27D6677494204221FDA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 98 octets */
+	     SHEX
+	     ("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28EE1 \
1495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
 +	     SHEX
+	     ("9A1761C5759CE67C9C093EC5C831C1FF7CAB64AC7C8002066EDCAED044DEF57CEA3EF6BE98578363D2CE3D1F5BA448F8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 99 octets */
+	     SHEX
+	     ("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B32A \
0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
 +	     SHEX
+	     ("4A24A1AF68DB65C3977431EE81092C776F7CB33D6F08940100EA240A2D1F8623A41D07CE9937BCBEC8CA1072A1A78E8B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 100 octets */
+	     SHEX
+	     ("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC21C8 \
807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
 +	     SHEX
+	     ("928E94D19FC60065A5EF7E48018387C80F2D350F306D0F610173719D5C874D4A8ACC340FEAD4BE357E1F78124198AD77"));
 +  test_hash (&amp;nettle_sha3_384,	/* 101 octets */
+	     SHEX
+	     ("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666C0A \
72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
 +	     SHEX
+	     ("78A18D62F8A7EFF5C6DD75B8CB073FD30EE68C878C2EC58AAD1C5DD0EB0AE43698A617BB0C670FCE2AA098E0ADF425B2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 102 octets */
+	     SHEX
+	     ("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE62F3 \
9A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
 +	     SHEX
+	     ("EEEB56C3E54FA833B985EFA5923C3F0225F419664CEDD898C79F64D72D2AD4B125A38BE0201846C442EAF0051D516DC9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 103 octets */
+	     SHEX
+	     ("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041308 \
598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
 +	     SHEX
+	     ("0A834E111B4E840E787C19748465A47D88B3F0F3DAAF15DB25536BDC6078FA9C05E6C953830274223968847DA8BFD20D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 104 octets */
+	     SHEX
+	     ("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189D54 \
9A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
 +	     SHEX
+	     ("D1C0FA85C8D183BEFF99AD9D752B263E286B477F79F0710B010317017397813344B99DAF3BB7B1BC5E8D722BAC85943A"));
 +  test_hash (&amp;nettle_sha3_384,	/* 105 octets */
+	     SHEX
+	     ("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB243 \
F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
 +	     SHEX
+	     ("6AEDCF4426B2483C0D0D04695BCC052BEDD04FA4D17A1BBB2797F6272FA476BFC138E4091409FEB1AC0E8BFF350A6663"));
 +  test_hash (&amp;nettle_sha3_384,	/* 106 octets */
+	     SHEX
+	     ("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A213 \
0DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
 +	     SHEX
+	     ("ACB7013CE75124388187DC0E7430CB74A314D601B6C8D7A7DE5CF03197A84F7874FF058808575CB2F10185F561BB06B1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 107 octets */
+	     SHEX
+	     ("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C81BD \
CE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
 +	     SHEX
+	     ("F947469DB712EA26F25F709FF7879136EA2A79E0A2D0ED5EE4ADF0E167F106BC410C93AE1D986EC211E0FD9A40741857"));
 +  test_hash (&amp;nettle_sha3_384,	/* 108 octets */
+	     SHEX
+	     ("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457BD2 \
5F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
 +	     SHEX
+	     ("65989BF4EBBF4C21B3DD34551D3F6167910236671BB7F348DC552ADB8028A468FA40EF4A8C1227A1A41C28105E64AC20"));
 +  test_hash (&amp;nettle_sha3_384,	/* 109 octets */
+	     SHEX
+	     ("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2A09 \
002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
 +	     SHEX
+	     ("B77A69E373AF0F733CDAD399C9B12642A046E1A7893D3382943A8367D37740DF53916F6DAF90517B39621C14343754A2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 110 octets */
+	     SHEX
+	     ("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C2C4 \
0F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
 +	     SHEX
+	     ("3D14B6FAE6156E7876367897A49269181EA58CC3CA9621C0F81D6A5FB6F615680D909B29F6AF7E62FAD04D70046BE997"));
 +  test_hash (&amp;nettle_sha3_384,	/* 111 octets */
+	     SHEX
+	     ("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E7554B \
D002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
 +	     SHEX
+	     ("456AD01908E187CA2CE9E7A4DAED8788C909E9BC974EFD1C9A44AC36DB9B6DA985C947C7E0A47AB27BF10CD760FA48AF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 112 octets */
+	     SHEX
+	     ("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C985AC \
56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
 +	     SHEX
+	     ("C26BDAC454E1ADC0D090D0C5254A29966611B6673014CBACA24D26B6F63EC7E8F993BA3DF7DF89770E902D5F6574F6A8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 113 octets */
+	     SHEX
+	     ("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972AED \
D3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
 +	     SHEX
+	     ("1D85BF9AA2B6DCC3105E7D7F91069F01E4C998D6F03B77650D75839D65A7A049196FD935AFEFFDEB657BC8F96B7C17B5"));
 +  test_hash (&amp;nettle_sha3_384,	/* 114 octets */
+	     SHEX
+	     ("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40198 \
B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
 +	     SHEX
+	     ("085CFA581CF3F4F19416BEE3ED5AC2544662AA51BDF1D2E348D9BCC27343487DF20B18D9F6FB64565868504A6805D176"));
 +  test_hash (&amp;nettle_sha3_384,	/* 115 octets */
+	     SHEX
+	     ("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD73D0 \
17CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
 +	     SHEX
+	     ("376088F09039CAA40BF19FF5E5F193FC9ECB6116A0ACB3237AAAB6CD807BD7AF45D804D837A18D2BD9A8C3DAA3A1D153"));
 +  test_hash (&amp;nettle_sha3_384,	/* 116 octets */
+	     SHEX
+	     ("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14A52 \
9B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
 +	     SHEX
+	     ("CD40B35FBD90B04D0641F71088F7C6159D8EB16DE8AAE09F355877A0333B53150B81D36C5C2446BF5AC462EF84D4E572"));
 +  test_hash (&amp;nettle_sha3_384,	/* 117 octets */
+	     SHEX
+	     ("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED1543E \
5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
 +	     SHEX
+	     ("DB14442400597871FA56D10F53BE7BB4002C44624C44E89C99B95122676A76FF28840285239E2E4FBFB751E4179577D8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 118 octets */
+	     SHEX
+	     ("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F325E \
894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
 +	     SHEX
+	     ("4509ADB6177BC6DEBCA7E36948F07001159A57EC8CCA2B76C770735C5BCCC679DA6AB4E64D915D0E1A754C3FDA11B524"));
 +  test_hash (&amp;nettle_sha3_384,	/* 119 octets */
+	     SHEX
+	     ("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC3BD \
F8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
 +	     SHEX
+	     ("193AF71BDD228AB3E8AE50E1B1CBF1984B0AF92AAC5A71CBE618AFD4187DED6B461411A39E72EA4E213FE0A5231C498D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 120 octets */
+	     SHEX
+	     ("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095BE4B \
A5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B0158F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
 +	     SHEX
+	     ("3E419569A4197BB71BAF416B38772EEDD9C1D5A3252111609F0FF8A18A749D5A56143A14925A82CD35C44400A49AFDFB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 121 octets */
+	     SHEX
+	     ("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C715C \
1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C216 \
20B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"), +	 \
SHEX +	     ("6215C070D0CB388A134766035C4BA95143E608D15CAF742796304FFA1A62E55660AB9AB1F6538B4AF1F3EA89BE7D51FF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 122 octets */
+	     SHEX
+	     ("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633ABD \
1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026CEE7 \
7BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"), \
+	     SHEX +	     ("0E27ABAD85255A66217722B7D4E032BF29F638BAE965B99F8EAF309071FF8C107F5B6BBB6AB1985228E697DE60595DF6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 123 octets */
+	     SHEX
+	     ("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1857 \
815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB4C2 \
66272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
 +	     SHEX
+	     ("AB9FD51B3AA4CD944ABB6CDB063708B2D1203D65A1A2EBB48E0C19722A18B9EF54D7A11F7684462B995B6D38CDDC0463"));
 +  test_hash (&amp;nettle_sha3_384,	/* 124 octets */
+	     SHEX
+	     ("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753955 \
51E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095B73 \
DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
 +	     SHEX
+	     ("03945325AC50E56BC8B515576529ABAA9A22BC2A7CED9142A75CE939A388AF0022A4E75A33964BBB3580564E0AF809D3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 125 octets */
+	     SHEX
+	     ("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C00FB \
BED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D0282F \
ED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
 +	     SHEX
+	     ("59126910A3462E3B7AC22892F637D87D90686BC0A9BBD4A32E2C4C71A168BA685F2184560E125DB3DC23D90B9E820F1A"));
 +  test_hash (&amp;nettle_sha3_384,	/* 126 octets */
+	     SHEX
+	     ("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031485 \
5F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7196 \
7A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
 +	     SHEX
+	     ("D3239A33BAA55B0F21169E0FDE6114B08106BAF3F4BA0CA19D7B5CF44030057AC672CE529EB0F3BDA36819967819AAFA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 127 octets */
+	     SHEX
+	     ("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B16D \
27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE765D \
E2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
 +	     SHEX
+	     ("38A11581D874A574929C51F8DCC9E501900743864AEC3AC0889E62C1071CA5F8B6CCF9C0BDB3BB365916EB4340973DC7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 128 octets */
+	     SHEX
+	     ("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F369 \
EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF0621C \
D54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
 +	     SHEX
+	     ("8FD01909381EB713803419361D8E82E92476A08EDCC225BB8A135D215CB48D07B074624FCF2E73E666DBA59334719839"));
 +  test_hash (&amp;nettle_sha3_384,	/* 129 octets */
+	     SHEX
+	     ("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106594 \
893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B5DB \
812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
 +	     SHEX
+	     ("5D7DC5FC9DE88B1C0C46AA6D49273505FF7A76A179E31AB5D976A69D89B83DFA6DEAE9E1B93440EC055DE1CC824D6B15"));
 +  test_hash (&amp;nettle_sha3_384,	/* 130 octets */
+	     SHEX
+	     ("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA97879175AA \
BA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5744 \
7EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
 +	     SHEX
+	     ("3D6BBA145D7E69DBBB0F099D47A1F2138D4A00F26B07C62CF38471F0FB9CA022C61F7A769013A9BD8D5D87D8E01D9B4D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 131 octets */
+	     SHEX
+	     ("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E477 \
743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B192 \
1881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
 +	     SHEX
+	     ("FBCEF80DD06E7E0B3B7A5485CA5BC2B388CB91A2890F181C857B3E0ABEFD6065499D82DD55F3FCD17E351C0A3636B859"));
 +  test_hash (&amp;nettle_sha3_384,	/* 132 octets */
+	     SHEX
+	     ("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C348C2 \
B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C2A0 \
EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
 +	     SHEX
+	     ("338AACBAC8AC5BCC13FAFC0EC6D2ECF4A871F9B09D7B1BC5BD6F8D7C9DD1354B8E28C68158A36551DDDAB8B684579EE1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 133 octets */
+	     SHEX
+	     ("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3BF88 \
E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3FE5 \
07BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
 +	     SHEX
+	     ("FFC98D84C268BD09CAD09CD7B4BF9D35EDE97EC55885E839E557D21ECC0E28A855000386E68FAAE3E64A19B443B2587D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 134 octets */
+	     SHEX
+	     ("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079B79 \
A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782917 \
417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
 +	     SHEX
+	     ("471465890C3B9C03EDFBF0F6883D565740BADA3B7628AD6A27F729C35C1A8666953E8B99D2C89EDE0BD2D5D70FDEF11B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 135 octets */
+	     SHEX
+	     ("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF4067C \
3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55EA7 \
96FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
 +	     SHEX
+	     ("0F8BA7214DE0E3A9E13C282BFA09CEA782C31C052F516D0AAA403D97716E0D08B1F7F9BB4085B555740C813C4ECE1B90"));
 +  test_hash (&amp;nettle_sha3_384,	/* 136 octets */
+	     SHEX
+	     ("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880EF5 \
0700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768DD4 \
17F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
 +	     SHEX
+	     ("CAD2D28FBDCC3A5D71FB3ADCEEC52313AD41D4FF1F915CAA34EE127839DBF2E9A7B06E1C4ECD6255926C16C06E51EFD0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 137 octets */
+	     SHEX
+	     ("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2CD2 \
BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47BB67 \
AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
 +	     SHEX
+	     ("5B192EBAB47215A8E9FB8E4D561B220B1DC36707A3F085F7BB0175335C393251E3467F945570420C743365D0F09B9E09"));
 +  test_hash (&amp;nettle_sha3_384,	/* 138 octets */
+	     SHEX
+	     ("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882615 \
D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706330 \
1B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
 +	     SHEX
+	     ("DF6F80B6D56CFFA8545A27A245A50E6C2D117FC3598F465B6CD78560F4B3C7D2123F28F67CA9E65BFE0B7F566C57B9EF"));
 +  test_hash (&amp;nettle_sha3_384,	/* 139 octets */
+	     SHEX
+	     ("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0992 \
76296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777FA5F \
EAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
 +	     SHEX
+	     ("CE97E9DF08789D84151A95C8134F0DB74E5D4E076E0C15966825C371B79B3192FD7C9C6BDAE86B775804B5363D1152C7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 140 octets */
+	     SHEX
+	     ("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC150773B6 \
FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA035 \
594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
 +	     SHEX
+	     ("89BF889FBD7A384290D3B1D52709DBA686351E53937630B7C7F01BCDDA19B1517D317D65E799E686C71A0AB4D65B60B8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 141 octets */
+	     SHEX
+	     ("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29688 \
0A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3C6F \
405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
 +	     SHEX
+	     ("5D40E392C2E5B29C80C2D760A93AA1E193472D7EE59E203DD478FE24C5A6264E2873AF31ABDE81827862901AE59571BB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 142 octets */
+	     SHEX
+	     ("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4064 \
DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1CE08 \
5FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
 +	     SHEX
+	     ("7C63A0DC1C39CF4FAB2D22F62C1B00757AA4B89ED0D7128DA243D9082AD0C78784AC24DF34F5AB30375F1D581E7420BD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 143 octets */
+	     SHEX
+	     ("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA3742F \
F3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6A1E \
ED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
 +	     SHEX
+	     ("ED085D830AFD2D8F79627281C2A8163C391FEC2C58268F66F74CFF9751BB29E0D071EA8FD2FCF943020D0AD758281BFD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 144 octets */
+	     SHEX
+	     ("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579DB2 \
F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B39BD \
90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
 +	     SHEX
+	     ("29124752CCD4AC724A9C3D53B0B352AF2DBD76729F8C5C648B1E9D77819F32E2A7DE0E15286478A24DF9BB370F855C1C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 145 octets */
+	     SHEX
+	     ("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9035 \
321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B904821F3 \
2B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
 +	     SHEX
+	     ("FAEAB5687F39EC9894C5CCFFB57E82A84BBB7D493CC6AFC03D07AC7B4F181E61639B9A4771C99985ED7FA1773E1CA3F4"));
 +  test_hash (&amp;nettle_sha3_384,	/* 146 octets */
+	     SHEX
+	     ("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F21A \
0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7DA2 \
B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
 +	     SHEX
+	     ("E4E352B1D2D987A37C831629FE0C6AB9EAB2C35E401D1B5F443ADC54A96EF3C91D0876CCF46ADEF819C460369136DA87"));
 +  test_hash (&amp;nettle_sha3_384,	/* 147 octets */
+	     SHEX
+	     ("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3404 \
F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895AAA1 \
6ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
 +	     SHEX
+	     ("6C288FE4A74F0ED1B36D12F2DB697FBC44017BB57D38C9EBD45F5A8B4FEB59148060AE4BA1FFA162E10E6916CEA1A794"));
 +  test_hash (&amp;nettle_sha3_384,	/* 148 octets */
+	     SHEX
+	     ("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D585E9 \
578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBEE4B \
BB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
 +	     SHEX
+	     ("E1B6DAC3F138B5F336F1F75894F825FFC197836C92BF359B55BB2A78239F24F9C4AA1E063C9C2B273B9CFA766FBFBAE5"));
 +  test_hash (&amp;nettle_sha3_384,	/* 149 octets */
+	     SHEX
+	     ("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F296 \
EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA992910EF \
4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
 +	     SHEX
+	     ("6E07B59E93B22475633B5BA1AA6891119CFF690697AC679E9349E8694C654074D965F0C32FF517B10EE8F6993F6E4646"));
 +  test_hash (&amp;nettle_sha3_384,	/* 150 octets */
+	     SHEX
+	     ("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3B26 \
7B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A57B \
2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
 +	     SHEX
+	     ("19EB2E15262A839538846F7252676971207913279B9AE9B6BA3650D8F3A8E558B13C35B31F1AB7429E376255338C4AA2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 151 octets */
+	     SHEX
+	     ("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97878 \
8C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9A93 \
BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
 +	     SHEX
+	     ("F4DA80B26FB5E6F7E5DFE47128EEE095D46D9ACEFBE76F74EFBC8A1AD68E8456634E9376025648EF7A3350299F366E29"));
 +  test_hash (&amp;nettle_sha3_384,	/* 152 octets */
+	     SHEX
+	     ("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29A0D \
C0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D503 \
09E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
 +	     SHEX
+	     ("BDBA7838A1E7A601D559F49EC1323B7C5FABE1E109FDCAFF3F7865F9AF4196ABBF60AC123097A7B860FE438684355EB0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 153 octets */
+	     SHEX
+	     ("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C250 \
034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC93793D \
D6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
 +	     SHEX
+	     ("96DFE9996BFFA5E5D83C39B11F47F12D11210F7D4300B7180D1891EAAA7FE4809F9489B1E2407FF87FB2628DDF1FC020"));
 +  test_hash (&amp;nettle_sha3_384,	/* 154 octets */
+	     SHEX
+	     ("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933906 \
FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433F7D \
350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
 +	     SHEX
+	     ("79CF2A3017F82693C0A531A367186D055FCE63081EDF980C6A0B967B6ECCE75D635B98485E9B6B285B08336FF34E61C9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 155 octets */
+	     SHEX
+	     ("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286F8F \
17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0F55 \
231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
 +	     SHEX
+	     ("0ED3CA1620CE3A923A22E9D13BBF7543ACEE05F66B67E6D6F435BC513F4698949C27528068F892F0871916FE2D0433C3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 156 octets */
+	     SHEX
+	     ("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E91F \
4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A80148550307310950D \
034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
 +	     SHEX
+	     ("69A27BBF080E015592893D3B55D1957D267784569923A466165A6FB129613D8EA6F610F3760E349D46B09277CB854546"));
 +  test_hash (&amp;nettle_sha3_384,	/* 157 octets */
+	     SHEX
+	     ("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE70457A \
9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BED9D \
E9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
 +	     SHEX
+	     ("E9C8830140629669A1DC5C8EE27BE669B7122F4DC88224635CDE334AD99615F3FDC4869E56263E3C7F4420736F714E26"));
 +  test_hash (&amp;nettle_sha3_384,	/* 158 octets */
+	     SHEX
+	     ("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576B1C \
2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC4A4 \
71A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
 +	     SHEX
+	     ("4DF060276105BF002F8E9F3F08D5B51F7C2ADFE5AAB9A1A683C053E045C89A883028B1093461368262EA85F5239AC7B1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 159 octets */
+	     SHEX
+	     ("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197B83 \
9957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1869 \
1A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
 +	     SHEX
+	     ("816AA6DB9B663288E5F932F0FEAFF0EE7875C3B3E6FBAC0CDDC458BD646371969CF50D2D0942FCC7403573B01B05B455"));
 +  test_hash (&amp;nettle_sha3_384,	/* 160 octets */
+	     SHEX
+	     ("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B264E9 \
20394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8943 \
10A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
 +	     SHEX
+	     ("125B51C253391677C59C0332C6A13D07DE55EAB80857593F0839A56FA678C5E2F7CB2F934ABE5E5887804AAB5D8F13E1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 161 octets */
+	     SHEX
+	     ("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67314 \
F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBBB81 \
53DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
 +	     SHEX
+	     ("130C4B06A55F11C80C41608ADFD7B4CE8795871BCF16900F20D2751E123B41D3B2048FD05267C2F9653ECE3630BDD330"));
 +  test_hash (&amp;nettle_sha3_384,	/* 162 octets */
+	     SHEX
+	     ("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9A0F \
2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246CE06 \
23A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
 +	     SHEX
+	     ("3EA0FA3FC035EA40CBBE9A3C1C6F7E5A437BA20F26736F2895F81D53BEC92A186E74762910C4AA62565373D38B28D5FD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 163 octets */
+	     SHEX
+	     ("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8E1B \
288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E37D \
89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA69107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
 +	     SHEX
+	     ("7C1F1A46E409046B5A314767E8B7E7B1D9A92931443C5D02A581371B380AFA1867E554C3F7DF2E4557ACFD9F8E230C44"));
 +  test_hash (&amp;nettle_sha3_384,	/* 164 octets */
+	     SHEX
+	     ("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0B12 \
FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18F40 \
8C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383FD19 \
00B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"), +	 \
SHEX +	     ("2AD23817002C8F0089D423760F5569EB67CBEED2F0F2AA12F8EDE7856EE22AA6EB684F86AE91741A4AA3C80AC97C4A0B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 165 octets */
+	     SHEX
+	     ("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D59896E3 \
A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB2D6 \
4496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB699 \
7BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"), \
+	     SHEX +	     ("D34974759C6A4AA9D1A4ED3DE341A2BA022DF127BE92EB0BBC1900EB5AC7B8AFE909B52DA5714668C3C4B7DB939F2436"));
 +  test_hash (&amp;nettle_sha3_384,	/* 166 octets */
+	     SHEX
+	     ("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4A43 \
26783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A805B6 \
A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5367 \
926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
 +	     SHEX
+	     ("0FB38AE233520D4F57469463E1E68D5518EA4E965755C03AD458DD285AFB2DF518C3D389BD361CBDCE46B654631A18C2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 167 octets */
+	     SHEX
+	     ("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017BBC \
F26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78F85 \
4FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232314 \
EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
 +	     SHEX
+	     ("CB8F1CC9EB72465176B97B6226A87E69D77C65190114CCE1F830A3DFEFA5A8A278D5CF594B173AC58C06EC74958FF8C6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 168 octets */
+	     SHEX
+	     ("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929BD9 \
689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BEA6F \
469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E884 \
A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
 +	     SHEX
+	     ("87776D7022DC18592B578C534E2FCF57946E0F74C47DF85612F89C6593FD50A9E445C048D6CDA9A1D1D10EA3B3C973D0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 169 octets */
+	     SHEX
+	     ("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73243 \
360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BDBBF \
D85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0424 \
B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
 +	     SHEX
+	     ("83F4442147FEFC8E5BAD3E9EE4C6661A771AE8C87458AB67153DECD35DAF6756EEF28E4AE72E65EBFAE08886A6E773E0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 170 octets */
+	     SHEX
+	     ("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D0786E \
99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD941DC \
B82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A462B8 \
3B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
 +	     SHEX
+	     ("51358159074D960C0B9D73D5F12AFDAFB8F5D7905BDA62379A6E0D6727D03EFD26EEA51B434368E2E566CB4747D0BA35"));
 +  test_hash (&amp;nettle_sha3_384,	/* 171 octets */
+	     SHEX
+	     ("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA7536AA \
E597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C3292E \
96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C43D \
6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
 +	     SHEX
+	     ("3ECEA8CAF0D8EFA42D54AC5EF36E624237D9F5508ED6FCB6434D67F3FB788C538C635798F52B2F073A4A7376FD31C4A3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 172 octets */
+	     SHEX
+	     ("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F80B \
6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C7BB \
759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A1C2 \
441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
 +	     SHEX
+	     ("A8876FE4652ACF72DCC8FD5133E5D4CA4E3766AB987CF66EAE5E3770E252D2FD2A890525016623EE69064690828C727B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 173 octets */
+	     SHEX
+	     ("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712154 \
8373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4CAF \
B37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255B4D \
231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
 +	     SHEX
+	     ("6A09735736780F199D75C60903AA24D7F8AA17516690854F7522EF0BBF47D41CBDC8BDB2CB2F3C5596510539677607E9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 174 octets */
+	     SHEX
+	     ("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02D19 \
BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC839EA \
9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CAC1B \
ACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
 +	     SHEX
+	     ("83FC2B91AB81D4B15363F15E53BF639063BAC55502B4421CF9A53BCAB9FF47FD77DE5AC6934F67A412EA1910FAD67768"));
 +  test_hash (&amp;nettle_sha3_384,	/* 175 octets */
+	     SHEX
+	     ("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3510 \
E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB3B1 \
17EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22F1B \
7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
 +	     SHEX
+	     ("77C0480B91F32EF809D8C23AB236581F0BCA8B9447A4D36228052B3ABB6AB69C61D19D720486A3FF497A4673B84CB951"));
 +  test_hash (&amp;nettle_sha3_384,	/* 176 octets */
+	     SHEX
+	     ("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310E5C \
0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E9723E \
FD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D3840C \
DFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
 +	     SHEX
+	     ("781466E257D2FA594E39DC220A260C7478D2158BB70E426F9E9587F5A51A7C29FDC7AF23E7AB9C774E33C08AB38CEDB7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 177 octets */
+	     SHEX
+	     ("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88453 \
1D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F75379E \
9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C16E \
69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
 +	     SHEX
+	     ("51BEBFB5AAFE777F390E2851B7EB9AA3809194FE3BA1689ABEE7E43D44A5874E0C252793DFD42C1270C63C407AEF6780"));
 +  test_hash (&amp;nettle_sha3_384,	/* 178 octets */
+	     SHEX
+	     ("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F68E \
6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820ACE2 \
62D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E255337DA \
A06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
 +	     SHEX
+	     ("FCDF0032F34BA6C42D679B182D07B10F4DFF2189B0A5EF6642FBB71B16F910E3240ED9B502B1C6B395BEE74AD0FB4191"));
 +  test_hash (&amp;nettle_sha3_384,	/* 179 octets */
+	     SHEX
+	     ("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54261 \
9DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AADD7C \
E842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877E50 \
FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
 +	     SHEX
+	     ("92AADC02BB9795A48B031034EE6AB873DF481D232932FB5FD6C3762E50E58DA46D1F5E5E874597F15C83127F0A3042B1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 180 octets */
+	     SHEX
+	     ("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D50A \
A83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E688 \
094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D1BC \
AB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
 +	     SHEX
+	     ("0D0CCDBFEB0A933F211EAA94EB452900324340505CCF8DB7AD93E976271F812FB8907805F6313D0B0931F5C9203BDBA5"));
 +  test_hash (&amp;nettle_sha3_384,	/* 181 octets */
+	     SHEX
+	     ("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D9663A \
CCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DBE7F \
B74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC554D8 \
E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
 +	     SHEX
+	     ("FEF6B1F27B0CEBC4568588E627D28DD569A58A8F9A51A1D2887B40F5547B2C67C71917BE998D1987AC78E9077CC790AB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 182 octets */
+	     SHEX
+	     ("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F823 \
10356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D9F0 \
1AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78F68 \
10EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
 +	     SHEX
+	     ("E9957732E7DAB64550F003EE6D0353AE89BDC6D69D05766024CFF189E4FC8FAA41DB72954E8E5AC0B29265C8F785E737"));
 +  test_hash (&amp;nettle_sha3_384,	/* 183 octets */
+	     SHEX
+	     ("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0BD59 \
31839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55A91 \
16E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB1B9 \
327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
 +	     SHEX
+	     ("98D73B3555F003058F7B5A145D89FAEC46C17099A354EF3834A20142DBD50A0E8054598CE7941BF5DD4DF7CCF218F02F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 184 octets */
+	     SHEX
+	     ("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636C17 \
27EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B99880C \
87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA116E5 \
F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
 +	     SHEX
+	     ("3795DE490F43B9899947C1C305C30E26331BA0E611DCE7961172B2E4299932147BC9E241C32E61FA964D4F436ECCFD37"));
 +  test_hash (&amp;nettle_sha3_384,	/* 185 octets */
+	     SHEX
+	     ("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7635 \
EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3BE9 \
377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035CD21 \
85BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
 +	     SHEX
+	     ("E9F289E671541FEC4599915A0D9935BF5C20A12C203BCDE88A46EAF5CAB2D437F9FCDEF67B98768BB80C9A874B3F46C7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 186 octets */
+	     SHEX
+	     ("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC45868AE \
9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E8B4 \
ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E745 \
9FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
 +	     SHEX
+	     ("88C23BE040BE64D23AEE8D7EE962228A6F07831B0E05FBE2F25F07729F00C2C617EB6975F57B3F17DD540E8EBCA654A9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 187 octets */
+	     SHEX
+	     ("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB95D \
B2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F572B \
E5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC36F \
59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
 +	     SHEX
+	     ("6C42DEE61CD97C50F5340CF4DC4F7E319FB5FAC7A26B41DEE66D789804BD1FEF1EF2911643C9C1E2C0485C979B36D927"));
 +  test_hash (&amp;nettle_sha3_384,	/* 188 octets */
+	     SHEX
+	     ("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36D44 \
C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A037 \
FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3CC0 \
3E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
 +	     SHEX
+	     ("720150FD5A1CF94A42F922EFCBB723FF948F74CA6D0A3F399AC54DA8B3BC07F39E6E2979C16C875866CF2F584CA7F2DB"));
 +  test_hash (&amp;nettle_sha3_384,	/* 189 octets */
+	     SHEX
+	     ("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29F79 \
031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE062CD \
D71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727083 \
513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
 +	     SHEX
+	     ("FA6F90935843D4F58E77CABE4BA662B4FABC1732725FAF952EEED70FA0AAD6A98FE67F3B6736A1C8F7C5BED4D9B017E0"));
 +  test_hash (&amp;nettle_sha3_384,	/* 190 octets */
+	     SHEX
+	     ("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B1B7 \
F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02E67 \
A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467998 \
BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
 +	     SHEX
+	     ("4E2832FEE290D1917C15B31893F6578C1299445B99BC48708E13348A11EB2F27FE217A63F532583793D18CDECCAA78B9"));
 +  test_hash (&amp;nettle_sha3_384,	/* 191 octets */
+	     SHEX
+	     ("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306BE8 \
4536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B922 \
964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E038F \
6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
 +	     SHEX
+	     ("1FB97D6F42480E9F13C934C4A874877A808F1D73314C544D8570C0749F20FA35F53A0C0BDA1F10D1A10A029ABBB50BC7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 192 octets */
+	     SHEX
+	     ("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D520EE \
F3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2DA2 \
B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C7941FC \
C82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
 +	     SHEX
+	     ("86B3C81AA398C8819AFC4F282DFBCE24F4192B2530C267A78373D253C35C1DCC4F40835529563FD42A33FD2CBD680515"));
 +  test_hash (&amp;nettle_sha3_384,	/* 193 octets */
+	     SHEX
+	     ("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478313 \
C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA23EC \
9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDBB48 \
EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
 +	     SHEX
+	     ("A6BF548AB19FF60D6A8729FA62FDC9B59237843739AFFF877233ED374BCF70A017126974C2D1A3222D8D906BE850A25D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 194 octets */
+	     SHEX
+	     ("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840EFE8 \
D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8A79 \
5AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036E24 \
E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
 +	     SHEX
+	     ("BA7D3B6AF5966C8C2723B1318820505D040DA810126ABC3E65088DC421E46D3E54DD31777C539AE083B7B8A4E2303836"));
 +  test_hash (&amp;nettle_sha3_384,	/* 195 octets */
+	     SHEX
+	     ("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC3553016608E \
F2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E76F \
8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01C9F \
0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
 +	     SHEX
+	     ("48CA5912C111DB667A77BE7C77F841E8B37130248377A19CD2FA3CD2EEC48B337CFE07C290F2690AD49E79CE3A9F9E53"));
 +  test_hash (&amp;nettle_sha3_384,	/* 196 octets */
+	     SHEX
+	     ("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF801 \
E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539E6A \
8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2762 \
2FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
 +	     SHEX
+	     ("4B3849B0916DD445B1856E1B908C414C752D280DE2183DD1F0193E73FD1BC02198599502391E8CA48D65E610D6EDCD8E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 197 octets */
+	     SHEX
+	     ("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61283 \
34F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6ACC \
86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22AA5 \
03C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
 +	     SHEX
+	     ("02C90820D5FA9A91072991E87BFEEC7F18315F8CA1908EDBF19886C4CA5BD54AB9EC96A6AB7B815B58538F088867030F"));
 +  test_hash (&amp;nettle_sha3_384,	/* 198 octets */
+	     SHEX
+	     ("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156C0B \
27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F939262D4 \
043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245EE36 \
1E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
 +	     SHEX
+	     ("75967501FF781EFC3C9D597179C8CCAEE4373D9BF6AA6A5BED5118303EDC8B7478A47F2CEAF0A6B5B7224E53D5F1CDB3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 199 octets */
+	     SHEX
+	     ("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491B48 \
529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF86A \
4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783453 \
5929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
 +	     SHEX
+	     ("298387BA8A3EB88EE36B4206E54193BC5857F2A303CE41DFF7C3BD53EF7EE3D34AE7E0C714311A7BD8D25502CAB414B7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 200 octets */
+	     SHEX
+	     ("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222B64 \
CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3EAEA \
BE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC23A7 \
9A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
 +	     SHEX
+	     ("27CEF65D1AECB7051BAD55DA0D601BC9D7A16D938A5715374A43109DD41B5C27D26C91CB44E4B47002D9B90ABA0584D1"));
 +  test_hash (&amp;nettle_sha3_384,	/* 201 octets */
+	     SHEX
+	     ("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7A38 \
393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB32FD \
6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653F3C \
9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
 +	     SHEX
+	     ("4AC9BDFD9F717D01598908BA457627D3AF7C8123F7110DD7FDB40E91EE6CAC201A8B728A384E663890847DFD4DE7FA76"));
 +  test_hash (&amp;nettle_sha3_384,	/* 202 octets */
+	     SHEX
+	     ("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF84D5 \
8EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D01C \
4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384B3D \
A953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
 +	     SHEX
+	     ("F03FA03E4CF9C23443D7DBDBB66D9ABBAFEFB6500143FF0BFB5D7D6CA2BF1D7CD043A7BA7EFB48F15EBC68D1F94598E7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 203 octets */
+	     SHEX
+	     ("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295381 \
354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487AF49 \
CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6B72 \
24EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
 +	     SHEX
+	     ("9C779D981F9B7E491FF868BE22B37FA9DF72DE55672A0226A821B29C045DF4FF788FA7271D557EF6025EEA255809F241"));
 +  test_hash (&amp;nettle_sha3_384,	/* 204 octets */
+	     SHEX
+	     ("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9CB3 \
C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03681 \
9C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2E6D \
AB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
 +	     SHEX
+	     ("2C0BC54A67B00AD703FC595751074C4E447EFDE00CAAF8C8FCADF5768C330B6C7F1918F044F5C5C55810D078534A7BB3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 205 octets */
+	     SHEX
+	     ("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD469 \
D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7AA9C \
E013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFFB61 \
8E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
 +	     SHEX
+	     ("2DB19CA557723CD3C17E7D8140CA301A5A2CB77E3F1F595F5B850A78943C7F36FC37056DCF2BADB90DDA77BFA969C0AA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 206 octets */
+	     SHEX
+	     ("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82316 \
CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033AE9 \
AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF076028C \
5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
 +	     SHEX
+	     ("71E5DD0755CF8B82BC79AED6FB61C9E4FF8361C9AFC5AD980808A8BC480E09D59B234074472851080714E0275CE72DC5"));
 +  test_hash (&amp;nettle_sha3_384,	/* 207 octets */
+	     SHEX
+	     ("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD0938DD \
E5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D743 \
F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1AD26 \
0AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C670 \
1290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"), +	 \
SHEX +	     ("51F951B8F1013BA9BCED90478E248CD89D4DEBC6A19CEB6EF81BA1A5D8D3339D426D50A94C7CE3D143C45DECCEF94965"));
 +  test_hash (&amp;nettle_sha3_384,	/* 208 octets */
+	     SHEX
+	     ("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928D7A \
D377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC41E0 \
D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0433 \
EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59D28 \
7F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"), \
+	     SHEX +	     ("210EBC1556E31A27EAF60A5FE3E181135C5EA117E3FF21AF2D04BEAB9A243FFFF632E3D7778F9A6D0304C1ACF3659A3C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 209 octets */
+	     SHEX
+	     ("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F97DF \
3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438DB1B \
B361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587AA4 \
6AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623047 \
C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
 +	     SHEX
+	     ("F5F659F6999BAD8CDC77C42901A8D64C1FA827F7848985136140BF5D4B3BBB3D964D2D8156F9FD02B6D382BC8410A88E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 210 octets */
+	     SHEX
+	     ("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F808 \
DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255DA9 \
843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01ACB8F \
0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F5920E \
6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
 +	     SHEX
+	     ("B151BF98C52F63F294A4B1E990C86CB73C4BDD476B25C138CA66B2BA08447540B0A787DFDDAA3D38AF44CA8EBBED74D8"));
 +  test_hash (&amp;nettle_sha3_384,	/* 211 octets */
+	     SHEX
+	     ("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBFD4A \
43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8E66 \
AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F6252C0 \
407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA35C \
6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
 +	     SHEX
+	     ("47D74FDD9A19A5389313610643FA859FF0BD7B583B099FDDB9C980DCC000AFEB639DD99071EA31976DA35B7BC949BD4E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 212 octets */
+	     SHEX
+	     ("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCDDB7 \
08FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A1F7 \
6B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9B2D \
8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24AF8C \
8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
 +	     SHEX
+	     ("9B809198DCCE24175E33098331D3A402A821AE9326E72775AAE34D1A9BB53D2B57863905CFD60543BBC42B454007C315"));
 +  test_hash (&amp;nettle_sha3_384,	/* 213 octets */
+	     SHEX
+	     ("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0819 \
A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A1566FC \
7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431B4C \
40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2878 \
A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
 +	     SHEX
+	     ("93C9834501FC728508A15EB9205E678983F3BDB0BA447EE739AE5082DB37F2F2D485088130E0B1CBF0039D18BDF429F7"));
 +  test_hash (&amp;nettle_sha3_384,	/* 214 octets */
+	     SHEX
+	     ("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2A18 \
6964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C252 \
7B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0C37 \
92F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346D43 \
CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
 +	     SHEX
+	     ("C0AD8C3E7EA595104D4BC0A08DCBC85042ED50DD8D9B01AB47C9F066F91AD3BFFEDE4107F1EB1F5B61CA7D4091D68327"));
 +  test_hash (&amp;nettle_sha3_384,	/* 215 octets */
+	     SHEX
+	     ("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9201 \
7F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299CAA \
792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA85B \
DDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2B63 \
ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
 +	     SHEX
+	     ("AA8DAA02ABCBC5A4B3003BFF5CBC2C84594C5A0F84BD449A1A56BE59566E13EC6803010D422A4C244B99812F4537C93D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 216 octets */
+	     SHEX
+	     ("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81C3C \
A9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB558 \
E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC5A2 \
7D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66DEE \
CA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
 +	     SHEX
+	     ("CAEB4F829A925679416F7CB177ED4C99721B851AB59D52979BFEC6D2AAA1E602F4310B15624F9D7BF2D351DB73BFB5EA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 217 octets */
+	     SHEX
+	     ("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC30FC \
10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377D16 \
5B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6BA4 \
2F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42070 \
33B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
 +	     SHEX
+	     ("FC1FC7F19F6C9D0AD1462B24C121C89B01B4E083EDAD02A8DBDEB990D98CAFE0AFE01E2EBA646872CD816B5203EE8A87"));
 +  test_hash (&amp;nettle_sha3_384,	/* 218 octets */
+	     SHEX
+	     ("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5D7B \
E5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7D89 \
E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C550008F \
AAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084618 \
04BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
 +	     SHEX
+	     ("84803E50DEC901FF930C8A76EBC1F98EC72874DEEF0D249020B1DBEB4EA7D8C7DA4761EDE077158460E054A7F71D1994"));
 +  test_hash (&amp;nettle_sha3_384,	/* 219 octets */
+	     SHEX
+	     ("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296F98 \
379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998704 \
D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368931 \
E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4102 \
A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
 +	     SHEX
+	     ("05586BCB8077E19F3F43015216D623B1439C49ECDD3C53255553E9133FD1A9008891520D2EEBE5684C546028CA2CDDFE"));
 +  test_hash (&amp;nettle_sha3_384,	/* 220 octets */
+	     SHEX
+	     ("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F289F \
BF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1DC37 \
8F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F2CA \
082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B6867D \
74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
 +	     SHEX
+	     ("A200D8EF3D120B917561EDC8420BDE022B3ACE792925C8FABF25AD9B0FA676D2260ABD8098F383C0F93043D5D3F56C47"));
 +  test_hash (&amp;nettle_sha3_384,	/* 221 octets */
+	     SHEX
+	     ("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E812C3 \
9F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8D22 \
C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568834 \
13D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68454 \
779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
 +	     SHEX
+	     ("A8905D1E9F4FC96F2D769D31C9A120DE43A0B20115C8D17BF0313206EB9CD87AE41DF2D444C9D75F9366998263D61C07"));
 +  test_hash (&amp;nettle_sha3_384,	/* 222 octets */
+	     SHEX
+	     ("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E4DA \
AE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D375077F \
2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB1CB \
6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF811A1 \
3F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
 +	     SHEX
+	     ("88249AF84A7F1E49D144869A3D4FE8AA6E1A4874EE467BC99E9C33E2105AF2D097417D6B78537925392DB2C5CB1E0B92"));
 +  test_hash (&amp;nettle_sha3_384,	/* 223 octets */
+	     SHEX
+	     ("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FDD28 \
C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27A65 \
84C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026EA5 \
42076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AEF5B \
F0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
 +	     SHEX
+	     ("C46122D00B61E79DF025A4D525B8A602C7AC004304A993872E3A8AA37FC0E8EAAE5FAD9A220C5C6AFBD5A4783680013A"));
 +  test_hash (&amp;nettle_sha3_384,	/* 224 octets */
+	     SHEX
+	     ("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF45082C \
4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F606519AE \
A0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05BFB \
1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA09D2 \
1E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
 +	     SHEX
+	     ("ABA0EE3C16D3DC753F6E466C33A998A73282C0DBEAF51324979A58437636886E5521B567C9A62D405EE558FFEBAE91BC"));
 +  test_hash (&amp;nettle_sha3_384,	/* 225 octets */
+	     SHEX
+	     ("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73975 \
809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB4D1 \
BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE3FF \
6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171D16 \
51001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
 +	     SHEX
+	     ("28B37125F233BA8D527E5284A16E6EFE9AE84D3EBC6EE4C88AEE0AB165C111A32FF2CDCC4213AC3267B0546DC0D74C84"));
 +  test_hash (&amp;nettle_sha3_384,	/* 226 octets */
+	     SHEX
+	     ("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF2111B \
97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4957 \
A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198B7E \
838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B3DF \
A269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
 +	     SHEX
+	     ("258988E54D66E0C53B263BA68D9E3AA47D278DF87C51219CCE6F2547281EA6581540E28C1D7E069254791F0D385EA694"));
 +  test_hash (&amp;nettle_sha3_384,	/* 227 octets */
+	     SHEX
+	     ("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23697 \
ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACDA89 \
7944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBCE60 \
827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE61179FE \
84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
 +	     SHEX
+	     ("F6A9399B482A3A5EA6FE79A2DB7BAE7E588C9B7DA03DD85C120112FDBC234350529A1F37ABBEBEB770299E141EEA7BA3"));
 +  test_hash (&amp;nettle_sha3_384,	/* 228 octets */
+	     SHEX
+	     ("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F152 \
FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE62A \
ADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E42D1 \
68B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE9011504A4 \
9E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
 +	     SHEX
+	     ("C0F957E52E40F9B8EA945D40779286F7257AD463A934B049DF40C31D3547AEF41AEA2DD981FD2579327229B54EE04E66"));
 +  test_hash (&amp;nettle_sha3_384,	/* 229 octets */
+	     SHEX
+	     ("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06352 \
84D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF520796841E \
58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E193856661376C8 \
1CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C07D \
C819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
 +	     SHEX
+	     ("779EECF39311318051BF73C441FB799708912049E28DF3FADDE449E4CD820CC4CA1BD0F8513927D9A64F5D34FAABA039"));
 +  test_hash (&amp;nettle_sha3_384,	/* 230 octets */
+	     SHEX
+	     ("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3DAC9 \
F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47971 \
B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70D94 \
23798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7FEB \
AA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
 +	     SHEX
+	     ("3D6495EB3DA4E81D3470A050F416E2C8ABF657A26D4FD64AF35735B5782B611FB798A72FE7A61CE79D0496F69654CC80"));
 +  test_hash (&amp;nettle_sha3_384,	/* 231 octets */
+	     SHEX
+	     ("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645CA1 \
4E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8BD0 \
B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C0BA \
854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B18F \
E34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
 +	     SHEX
+	     ("F8188EAFD0E2F9C7F44E70B38DB1FE3E12B1469739CA6A13ED5A8661673A318296FFAF8D37F6FCEC22A2D00EEE2ABEBA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 232 octets */
+	     SHEX
+	     ("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE875DA \
0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94311 \
051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B349 \
939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB4444B \
85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
 +	     SHEX
+	     ("7D83C3F2265C90FEF4BC6BD0D17A218F0E196489CB2D8455BBEE80AB989FFEA46DE753346EDBD5C88448FEDB0D4AAD4D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 233 octets */
+	     SHEX
+	     ("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBBD58 \
01AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422900 \
5F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A9426E \
CEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB7448F \
50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
 +	     SHEX
+	     ("FCC5FCFEF5BA874A317B73C9B1B4CF6877373D41F0B8080A5D4F021E0D67F3B9F8CCAACFD4244FC10BA58B3A470DB48B"));
 +  test_hash (&amp;nettle_sha3_384,	/* 234 octets */
+	     SHEX
+	     ("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FAC4F \
DF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425FF7F \
1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6FBF5 \
534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526DC64 \
3872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
 +	     SHEX
+	     ("9B336B4C2B530F65C01AF3F0A46CF1B626D5DBF1B2E50F790B9F34CCA367315FDFBF7D9619CDA4DA22E39F9315303816"));
 +  test_hash (&amp;nettle_sha3_384,	/* 235 octets */
+	     SHEX
+	     ("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F54ED \
E927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747BBB5 \
3652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0EDE83 \
8AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F02B \
64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
 +	     SHEX
+	     ("CAC442227F10C4935D42C2914043167890C3EE1F4556D38D20767E8402AEC4D70111F2034276E90F28102DE634E26AFD"));
 +  test_hash (&amp;nettle_sha3_384,	/* 236 octets */
+	     SHEX
+	     ("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51F15 \
34BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF1430A \
9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19AFA \
65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB93D \
2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
 +	     SHEX
+	     ("05E3FB83EE8D609874D5935283702F29E5E896BB090C48033489295989C45DD2C06F5BD558B6BC786AB1251F75664B06"));
 +  test_hash (&amp;nettle_sha3_384,	/* 237 octets */
+	     SHEX
+	     ("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267512 \
CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE512133B \
B7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627AAC0 \
2ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E742 \
EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
 +	     SHEX
+	     ("6E463C7FB5CF436B1444921AFE76D2FA4E7A23EDFC9D496AF1DC7E78A0173D797EFF80F2BB32CFD34DAF5633C4E6BCD6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 238 octets */
+	     SHEX
+	     ("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBBE2B \
01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9B0F \
663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F83869CA \
27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D6D0 \
55B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
 +	     SHEX
+	     ("90457E3D33FCE103420056A1C712441E04856B17CF37A4E133841E6D9A944B5EBEF98CB1C1CCD575632CD3B5C177669E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 239 octets */
+	     SHEX
+	     ("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0DD8E \
9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07A38 \
F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8AAE \
141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A9016F \
2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
 +	     SHEX
+	     ("E5FC73C70028D1B82A9AA976D34F5FC72916839027038E79DF2E29149E861F09A41A8203CE922203F710964B4F5BEC2E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 240 octets */
+	     SHEX
+	     ("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA672 \
73BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1466 \
E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAFCD3 \
F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B85AE \
5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
 +	     SHEX
+	     ("B0A1BBA912DAA6D80EDC6519B501B629456394D7BDA24D46AFC9FC1D93A0B5962FA4F95214273290D32B3EAEFF6F9DFE"));
 +  test_hash (&amp;nettle_sha3_384,	/* 241 octets */
+	     SHEX
+	     ("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1A71 \
D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69A7A \
682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0C8F \
9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7801 \
A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
 +	     SHEX
+	     ("FCE4637898BA0CBD9D7B636FEBDDC02A435901CBBEF8BF76D3E866D97D55354B71FC12E67A09E793D749316D714FE08C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 242 octets */
+	     SHEX
+	     ("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48A27 \
D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68020 \
C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C14B4 \
377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C41C \
CBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
 +	     SHEX
+	     ("2B5471FAE3805852F4CF39541F8A0A3774818F79FE50476E225D89B62E43BE3255E96D19CBC334AEF04192840F075C7D"));
 +  test_hash (&amp;nettle_sha3_384,	/* 243 octets */
+	     SHEX
+	     ("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC0578289082B2 \
A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE492087D \
7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA800 \
E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1886 \
7B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
 +	     SHEX
+	     ("D4D3B49878AEC72E2E7FAFB687DA7EFE242CB60ADF5C65C577C444CFC95A2A2EC670000C8A78898A07400E3502D73F27"));
 +  test_hash (&amp;nettle_sha3_384,	/* 244 octets */
+	     SHEX
+	     ("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E9726C6 \
90D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9359 \
AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B5F6 \
5E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF3745F0 \
EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
 +	     SHEX
+	     ("FE1C2143F2957819DF9C9DD05D004BE0E557EED8C5A2B7CE457D5856132B1C43EECEC36AD704A930A85485A34C3860FE"));
 +  test_hash (&amp;nettle_sha3_384,	/* 245 octets */
+	     SHEX
+	     ("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3796 \
141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C553 \
9FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61694 \
301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49171 \
433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
 +	     SHEX
+	     ("4D1F626688E6899B5FCCD47FAAB45E96C61E169869CABEF40283B2418DFB2888FB80CC9F2C526497C50C5244784F195C"));
 +  test_hash (&amp;nettle_sha3_384,	/* 246 octets */
+	     SHEX
+	     ("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4DE9 \
C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B45C9 \
66B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF102D \
23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F5D7 \
297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
 +	     SHEX
+	     ("A063D778B0A2A11D3A9CBA425EE5938FCAA6E2BF1F30A665FA811601444D5749AFA18766DB5F0426C5B8392238B7862E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 247 octets */
+	     SHEX
+	     ("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82EA7 \
D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5577 \
B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3450 \
CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4ED5E \
607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
 +	     SHEX
+	     ("470EE6D35157846890A01B3809EB923CC45DFFF2FCA2826F458325466C983B1C64BEA38BCAECA921C90DD00432ECCF89"));
 +  test_hash (&amp;nettle_sha3_384,	/* 248 octets */
+	     SHEX
+	     ("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA909F \
DF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4BAB \
D9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D619 \
BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D001 \
EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
 +	     SHEX
+	     ("A8F0A3C89CF7E56ACC18ACE1638BCF133094FD9F75F05677C3CD0ED3614A593CBCEB09C78C86E350FD07FF4429A6A165"));
 +  test_hash (&amp;nettle_sha3_384,	/* 249 octets */
+	     SHEX
+	     ("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B562B2 \
88D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944162 \
7A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C2961145315130549311F \
C07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9A7C \
F97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A1928604B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
 +	     SHEX
+	     ("C8A9A24464F21B133EBE20BA421A81EE34DCEACD5F04DCFB66D219F7F4145633692C572B63007834A406ECFB938A14F6"));
 +  test_hash (&amp;nettle_sha3_384,	/* 250 octets */
+	     SHEX
+	     ("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A73D8 \
0A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A51B5 \
6D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B3A3 \
56001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90EBD0 \
90AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911F16 \
5D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"), +	 \
SHEX +	     ("91BADA31B57A4BF3D2EB19A34FF921DB10BD6406191486D25D5CA4DE5E00B5E2815DAE741064E5B877AC57511B949F91"));
 +  test_hash (&amp;nettle_sha3_384,	/* 251 octets */
+	     SHEX
+	     ("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC7EC \
6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699DF3 \
5D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5D39 \
7FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343709 \
5707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A07484A5 \
D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"), \
+	     SHEX +	     ("F310E80951C7BB6395CA168AAE7EC42DEFF6C4CD3F5BE9C8B49B85B405F731911AE8267FFEBD543DBDF409EC20A858D2"));
 +  test_hash (&amp;nettle_sha3_384,	/* 252 octets */
+	     SHEX
+	     ("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03742 \
636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EEAD3 \
E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A4E7 \
B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED122 \
A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6772 \
E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
 +	     SHEX
+	     ("CFD05E080994FC6D7AEF2D8C6E44D8A5E90F5A231676E0FAE0D2B8CE162CA9D06712580C99997A7709A06180DD42FB91"));
 +  test_hash (&amp;nettle_sha3_384,	/* 253 octets */
+	     SHEX
+	     ("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A47429922C \
4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D7E8 \
B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD997CE \
FC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B2546F \
E05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B715C \
1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
 +	     SHEX
+	     ("8FA26DD5A54BF94A037A165EC5CE3ED86147A08DCFE3B48818B0C0BEEEFA33B145323B598F761DE2B639D05127F1CF3E"));
 +  test_hash (&amp;nettle_sha3_384,	/* 254 octets */
+	     SHEX
+	     ("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC20AB \
4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D00785E5 \
7788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993F92 \
B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B730AD \
3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C39C \
F421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
 +	     SHEX
+	     ("283FD61D1E50572EF403BF9C554D76D694A54F902C49795D1CF506F0EE263E7BA994F72BDC4732531FA7194257F2DFDA"));
 +  test_hash (&amp;nettle_sha3_384,	/* 255 octets */
+	     SHEX
+	     ("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23346 \
775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD181 \
C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BBA40 \
489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B6183639D \
CFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C565C \
CA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
 +	     SHEX
+	     ("128DC611762BE9B135B3739484CFAADCA7481D68514F3DFD6F5D78BB1863AE68130835CDC7061A7ED964B32F1DB75EE1"));
  }
diff --git a/testsuite/sha3-512-test.c b/testsuite/sha3-512-test.c
index 2ad7dfc..349e870 100644
--- a/testsuite/sha3-512-test.c
+++ b/testsuite/sha3-512-test.c
@@ -1,775 +1,1259 @@
 #include "testutils.h"
 
 void
-test_main(void)
+test_main (void)
 {
   /* Extracted from ShortMsgKAT_512.txt using sha3.awk. */
-  test_hash(&amp;nettle_sha3_512, /* 0 octets */
-	    SHEX(""),
-	    SHEX("0EAB42DE4C3CEB9235FC91ACFFE746B29C29A8C366B7C60E4E67C466F36A4304C00FA9CAF9D87976BA469BCBE06713B435F091EF2769FB160CDAB33D3670680E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 1 octets */
-	    SHEX("CC"),
-	    SHEX("8630C13CBD066EA74BBE7FE468FEC1DEE10EDC1254FB4C1B7C5FD69B646E44160B8CE01D05A0908CA790DFB080F4B513BC3B6225ECE7A810371441A5AC666EB9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 2 octets */
-	    SHEX("41FB"),
-	    SHEX("551DA6236F8B96FCE9F97F1190E901324F0B45E06DBBB5CDB8355D6ED1DC34B3F0EAE7DCB68622FF232FA3CECE0D4616CDEB3931F93803662A28DF1CD535B731"));
                
-  test_hash(&amp;nettle_sha3_512, /* 3 octets */
-	    SHEX("1F877C"),
-	    SHEX("EB7F2A98E00AF37D964F7D8C44C1FB6E114D8EE21A7B976AE736539EFDC1E3FE43BECEF5015171E6DA30168CAE99A82C53FA99042774EF982C01626A540F08C0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 4 octets */
-	    SHEX("C1ECFDFC"),
-	    SHEX("952D4C0A6F0EF5CE438C52E3EDD345EA00F91CF5DA8097C1168A16069E958FC05BAD90A0C5FB4DD9EC28E84B226B94A847D6BB89235692EF4C9712F0C7030FAE"));
                
-  test_hash(&amp;nettle_sha3_512, /* 5 octets */
-	    SHEX("21F134AC57"),
-	    SHEX("2E76D93AFFD62B92FC4F29CB83EFBE4BA21D88426AA7F075BFC20960EA258787898172E17045AF43AB1FE445532BE0185FBEA84D9BE788B05F14DBF4856A5254"));
                
-  test_hash(&amp;nettle_sha3_512, /* 6 octets */
-	    SHEX("C6F50BB74E29"),
-	    SHEX("40FA8074E1E509B206448FBE757D9494B9B51E8D6E674A67F53C11EF92E96C3EA08B95EBD4172B020010CD6CF29539A34D6BFA002A2042787AA8D879A0F5B54C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 7 octets */
-	    SHEX("119713CC83EEEF"),
-	    SHEX("D1116786A3C1EA46A8F22D82ABB4C5D06DC0691B2E747AC9726D0B290E6959F7B23428519A656B237695E56403855EC4C98DB0CF87F31B6CEABF2B9B8589B713"));
                
-  test_hash(&amp;nettle_sha3_512, /* 8 octets */
-	    SHEX("4A4F202484512526"),
-	    SHEX("F326C7C126DDC277922760FEEF77C9BAB6FB5D3430F652593703D7C5E30135CD0B0575257509A624184330D6AB1F508A666391B5D4690426B4E05301891DF897"));
                
-  test_hash(&amp;nettle_sha3_512, /* 9 octets */
-	    SHEX("1F66AB4185ED9B6375"),
-	    SHEX("1F5B8A6E8D94F5E2535D46842B9CED467C39C2DB323963D3F3D937E9DDA76FBC17072DDA2AB4771CD7A645145A2AEC1B5749BF9EFE0CDE006CC3EF8936438E0D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 10 octets */
-	    SHEX("EED7422227613B6F53C9"),
-	    SHEX("2AEEE7A720C030A820CD7BAA8570D72CB90B7A238C38C358676358A7AE9A5CF26635B2320D61C1284899E654F0BFDD0A3A9C343FFBD11838B57465E6C3AD3A57"));
                
-  test_hash(&amp;nettle_sha3_512, /* 11 octets */
-	    SHEX("EAEED5CDFFD89DECE455F1"),
-	    SHEX("7B1C1BEF3B4DEB4B4812C81A6E7B3F2C66FA95157FA3B9D2959DC56B8ADD100170D3C8D1745FD230A31F89FA17889C4C58946B5D746E47B71ED0394B66D1BDB2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 12 octets */
-	    SHEX("5BE43C90F22902E4FE8ED2D3"),
-	    SHEX("EE41401AF509D6FC0944CD4A0BB29D2DCE0DCC862606E669E31381E5D6CECB463143645D696D14E40169CDC71C75686D6E8732B432092626421CC6CC196F80BF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 13 octets */
-	    SHEX("A746273228122F381C3B46E4F1"),
-	    SHEX("9B53B410B9F5DCE90A77244DB407A3D0F4898D112D0044A8F66AF933E26666DE63EBD2A4322D8FE525AB354CE9676B6A14D0CE6B3D24E6CD5832BEA0C5153CEF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 14 octets */
-	    SHEX("3C5871CD619C69A63B540EB5A625"),
-	    SHEX("2B53FE6583FC24EE8A63801067E4D3BD6E6934EF16BC822FC3A69F4EE13A404D9A3CE2BB4A12C77382BFDE4D843F87FD06ED8AECC234A3A24CEDFE60BFC06933"));
                
-  test_hash(&amp;nettle_sha3_512, /* 15 octets */
-	    SHEX("FA22874BCC068879E8EF11A69F0722"),
-	    SHEX("80946CA68E8C16A9667CD8339D1C5B00F1E0D401D0ECC79458754794838F3AE2949A8CC5FE5584033BCA9C5BE62C7C08F402EF02F727CEFA43BBD374C2A67C52"));
                
-  test_hash(&amp;nettle_sha3_512, /* 16 octets */
-	    SHEX("52A608AB21CCDD8A4457A57EDE782176"),
-	    SHEX("4B39D3DA5BCDF4D9B769015995644311C14C435BF72B1009D6DD71B01A63B97CFB596418E8E42342D117E07471A8914314BA7B0E264DADF0CEA381868CBD43D1"));
                
-  test_hash(&amp;nettle_sha3_512, /* 17 octets */
-	    SHEX("82E192E4043DDCD12ECF52969D0F807EED"),
-	    SHEX("C37C9DC2E20D8E2F0AE588D7D45A807CCFA000FC948AC42A8ED63BB14F318FC3D4B963F7305980E6A0FD2316B55B63142373B1A29002264855C716C5C9F17F4C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 18 octets */
-	    SHEX("75683DCB556140C522543BB6E9098B21A21E"),
-	    SHEX("9073C62555E6095F17DF71AD02BABB9100288633898489B21C906A3190875BAEACCC83BE80ABD11466FEC371BA2C4623D07F0131DEFAEC13A8C732A9F8417163"));
                
-  test_hash(&amp;nettle_sha3_512, /* 19 octets */
-	    SHEX("06E4EFE45035E61FAAF4287B4D8D1F12CA97E5"),
-	    SHEX("23E9352856718E1E2D68A21D56D93117CED7628E984FF04ED8C0CB9B10539E4EDE284F94FA71BF4B83BBB493435FD6BE26EDDB09DEAC39680E6B05ACC87B8C4E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 20 octets */
-	    SHEX("E26193989D06568FE688E75540AEA06747D9F851"),
-	    SHEX("909D753426B1DEE09FC474F18CF810D5D5AADBF8A09AF495BF6C22ACA0C673021BFC5D2AD94F50B24E1569E956694B21CF2CC8B4F3C7EE4CF195E4424CC415DD"));
                
-  test_hash(&amp;nettle_sha3_512, /* 21 octets */
-	    SHEX("D8DC8FDEFBDCE9D44E4CBAFE78447BAE3B5436102A"),
-	    SHEX("046C6019FC4D628AE0DA7092F9910F269B853D3B57052039AD1375C665405F9FD79D57579F42C4FFF249BB85AE65113A9F4276CEDE73E9CCB0C24753935A006E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 22 octets */
-	    SHEX("57085FD7E14216AB102D8317B0CB338A786D5FC32D8F"),
-	    SHEX("51C909A6528949BADDAF1BA0B154EA9C33FDE5074359505B76D4B7ED54352DD893D40B142A5F802F378CBA7B8C3782ECF2A048542BE6C5936822214846A8D5E4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 23 octets */
-	    SHEX("A05404DF5DBB57697E2C16FA29DEFAC8AB3560D6126FA0"),
-	    SHEX("EFC8917E1247742A2D4EC29AFEDDF1E6ECE377B3D8AC6E58C9851CE9C99BD599ADEBFED657BAACD1793FC91B04DF2957BF6F1888869286002DC4AD9AC7F76793"));
                
-  test_hash(&amp;nettle_sha3_512, /* 24 octets */
-	    SHEX("AECBB02759F7433D6FCB06963C74061CD83B5B3FFA6F13C6"),
-	    SHEX("FCEF88BCC7EF70D8C3973429AC5139155F9BA643B431013F1817ECD2FF3AB287880F9EA54DF7503CB3F73D7CF2B87D2E9BDBD203378FAE74CA4BD2667A4AA706"));
                
-  test_hash(&amp;nettle_sha3_512, /* 25 octets */
-	    SHEX("AAFDC9243D3D4A096558A360CC27C8D862F0BE73DB5E88AA55"),
-	    SHEX("470BDD8D709875C8E6F88591B97D6486C5F03B54BFC905757483E013F63A6C56984D4518D45C2D2298EADB44AF3A0C35A76B573D452F5747844D3AD8F84A2E85"));
                
-  test_hash(&amp;nettle_sha3_512, /* 26 octets */
-	    SHEX("7BC84867F6F9E9FDC3E1046CAE3A52C77ED485860EE260E30B15"),
-	    SHEX("429FD438B390AD0224028975467EC228F9ADCDE71E1738005E3717C58F727AA2B7C61780BF0C5F8B766CC6D34551D87D22A130B8C215614204E607AA82FF8469"));
                
-  test_hash(&amp;nettle_sha3_512, /* 27 octets */
-	    SHEX("FAC523575A99EC48279A7A459E98FF901918A475034327EFB55843"),
-	    SHEX("790A010AEB6F13E019A1DC35574B1219E74FF5DB6FBD8746733664FFDBCFE1CC6E8AB39117E3244C4FA3C0A962C9F50030AEF88E193E7E0D4C4747345F30CB54"));
                
-  test_hash(&amp;nettle_sha3_512, /* 28 octets */
-	    SHEX("0F8B2D8FCFD9D68CFFC17CCFB117709B53D26462A3F346FB7C79B85E"),
-	    SHEX("AAF7A391600270F7B5A2A3BBC7474AC4154EBEAC03A790A57FDAD96CEA2D043C9FA5F6916790B92F8032D668ED9A07112DC5B2373EC816AABCA6F577CE60415E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 29 octets */
-	    SHEX("A963C3E895FF5A0BE4824400518D81412F875FA50521E26E85EAC90C04"),
-	    SHEX("3E2880A974E50F98BD6CC0F9D769AF348CE3B7E8FA38CF0CA2DA5FD704C9C0E57D5500BEA3CB7477927F9C394AA3F9BBC01824350291B9A0A0CBF094BB37DA55"));
                
-  test_hash(&amp;nettle_sha3_512, /* 30 octets */
-	    SHEX("03A18688B10CC0EDF83ADF0A84808A9718383C4070C6C4F295098699AC2C"),
-	    SHEX("48E55E0340F20466881A732AA88459AD4BCDEF364C3BD045AE099F953D89F15957AEF204265C3915BA42FE4235196BE3D0F564676227C3C0DEACFBAF68F9E717"));
                
-  test_hash(&amp;nettle_sha3_512, /* 31 octets */
-	    SHEX("84FB51B517DF6C5ACCB5D022F8F28DA09B10232D42320FFC32DBECC3835B29"),
-	    SHEX("9D8098D8D6EDBBAA2BCFC6FB2F89C3EAC67FEC25CDFE75AA7BD570A648E8C8945FF2EC280F6DCF73386109155C5BBC444C707BB42EAB873F5F7476657B1BC1A8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 32 octets */
-	    SHEX("9F2FCC7C90DE090D6B87CD7E9718C1EA6CB21118FC2D5DE9F97E5DB6AC1E9C10"),
-	    SHEX("1EAFEDCE7292BA73B80AE6151745F43AC95BFC9F31694D422473ABCA2E69D695CB6544DB65506078CB20DBE0762F84AA6AFD14A60AB597955BE73F3F5C50F7A8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 33 octets */
-	    SHEX("DE8F1B3FAA4B7040ED4563C3B8E598253178E87E4D0DF75E4FF2F2DEDD5A0BE046"),
-	    SHEX("9A7688E31AAF40C15575FC58C6B39267AAD3722E696E518A9945CF7F7C0FEA84CB3CB2E9F0384A6B5DC671ADE7FB4D2B27011173F3EEEAF17CB451CF26542031"));
                
-  test_hash(&amp;nettle_sha3_512, /* 34 octets */
-	    SHEX("62F154EC394D0BC757D045C798C8B87A00E0655D0481A7D2D9FB58D93AEDC676B5A0"),
-	    SHEX("ADA5CA5630660003C4D16149F235FAEB78132F7F773A631F820CC5C654B08EAB4206BB4EA1389D1CF74D3B60B86E484C90C817CDB5DD5DBF327163B4646F7213"));
                
-  test_hash(&amp;nettle_sha3_512, /* 35 octets */
-	    SHEX("B2DCFE9FF19E2B23CE7DA2A4207D3E5EC7C6112A8A22AEC9675A886378E14E5BFBAD4E"),
-	    SHEX("71A0801D32587980B09963A0F547B8B6EE3BADE224671BF44F12E3DA4F21778BAC37FCC73EF45FEE1C96688BAF9020F487B1A16E3AC91B504845D6FBA879134F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 36 octets */
-	    SHEX("47F5697AC8C31409C0868827347A613A3562041C633CF1F1F86865A576E02835ED2C2492"),
                
-	    SHEX("EBA678B7A0E5669DC7FA5ECA5D5F19FE625E113E5028DA5EFB138923CD444757B06078E0BA064B36C72CA2187AB9DD31DDA6F24668F46C32F8EC21AC59AAFA24"));
                
-  test_hash(&amp;nettle_sha3_512, /* 37 octets */
-	    SHEX("512A6D292E67ECB2FE486BFE92660953A75484FF4C4F2ECA2B0AF0EDCDD4339C6B2EE4E542"),
                
-	    SHEX("12DF92D889D7BA0DF05BCD02D9DE58C97F4813126967FF78BDF759C66C4CBE9DF68AB31A0256C776730BB25DEECF91F0997868AC8BB86DF7A0FC110CB0A4DE5D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 38 octets */
-	    SHEX("973CF2B4DCF0BFA872B41194CB05BB4E16760A1840D8343301802576197EC19E2A1493D8F4FB"),
                
-	    SHEX("B8C7CE2BE4CB32C140E75B75474248C1DD77D19B0CBCA31A3ECC2A35C532E4FA3ED4ABBCDA27AA68A9DDA06B245443E5903A65652A94ED3AF15065D3E7736E47"));
                
-  test_hash(&amp;nettle_sha3_512, /* 39 octets */
-	    SHEX("80BEEBCD2E3F8A9451D4499961C9731AE667CDC24EA020CE3B9AA4BBC0A7F79E30A934467DA4B0"),
                
-	    SHEX("A0AE9DFB56831FE4A3223C501B697BD8243C471E8343ACFD37A6B587FEAC74571C23DEEBC9B94A540A02F1B1E2251E01229C9D58C4279F155D5566FB18E81295"));
                
-  test_hash(&amp;nettle_sha3_512, /* 40 octets */
-	    SHEX("7ABAA12EC2A7347674E444140AE0FB659D08E1C66DECD8D6EAE925FA451D65F3C0308E29446B8ED3"),
                
-	    SHEX("631E7847124A70FE6EB293A44A25C50600B5E7E975CA9FAB5AE64AB86C7E42C912DD6EC093F01A8DEBC6E1F5E487AF97DC3FD6C53002765050BE963FFCD4D989"));
                
-  test_hash(&amp;nettle_sha3_512, /* 41 octets */
-	    SHEX("C88DEE9927679B8AF422ABCBACF283B904FF31E1CAC58C7819809F65D5807D46723B20F67BA610C2B7"),
                
-	    SHEX("B989263BB4E0424F95FDC9A49C83A3769FBF31DCEDDA7E005AB5F22F43D2718DEBD39085971F7EB7822C9FA0F67F776CEC4E35A9A8B8C835EF4E9EBDA1922E4D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 42 octets */
-	    SHEX("01E43FE350FCEC450EC9B102053E6B5D56E09896E0DDD9074FE138E6038210270C834CE6EADC2BB86BF6"),
                
-	    SHEX("FF6ADCB9E1546798D396DB78452DF1A375B65EE3D54FCC915A8CA3DA693E24931999B0FC8A4EB92F6FF85E42BB4CFD9CE7D7863EEE709C9EF37642B696174474"));
                
-  test_hash(&amp;nettle_sha3_512, /* 43 octets */
-	    SHEX("337023370A48B62EE43546F17C4EF2BF8D7ECD1D49F90BAB604B839C2E6E5BD21540D29BA27AB8E309A4B7"),
                
-	    SHEX("1051B7FF77274B784E7FB7823E756F0C4355047E489775BBEDAA7CE5A75EFAC331492C016CE02EB2BE8BA2FE6B735B9A1484E73AC06DE573C5D0B4A58822A36A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 44 octets */
-	    SHEX("6892540F964C8C74BD2DB02C0AD884510CB38AFD4438AF31FC912756F3EFEC6B32B58EBC38FC2A6B913596A8"),
                
-	    SHEX("5639A2824297CA099ECF2A81EEF1753F6314CB663D860F05A39E3E801FF82060BBA10628E2C0D9E0A84DD05ED637FC0B65BA03BB66E46FB256F2A5B28D3F41D2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 45 octets */
-	    SHEX("F5961DFD2B1FFFFDA4FFBF30560C165BFEDAB8CE0BE525845DEB8DC61004B7DB38467205F5DCFB34A2ACFE96C0"),
                
-	    SHEX("97F9D642507E6DD179D56F4B815E92D0D486826F273EC711B8F9CB76AFC79F900816FDBC13DD3A59FBECBA1F3B6953F879F27C8987B24C6FF8557A2C834076B9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 46 octets */
-	    SHEX("CA061A2EB6CEED8881CE2057172D869D73A1951E63D57261384B80CEB5451E77B06CF0F5A0EA15CA907EE1C27EBA"),
                
-	    SHEX("AFEF2AF5A01B89BE190A0E6E796AA51F1F8C356772C6FC7731F08AAB8BD81AEE1287C70D564F4F169E37B07F28202A85F468281B4CDC1273CF61EB30E3BDCEE1"));
                
-  test_hash(&amp;nettle_sha3_512, /* 47 octets */
-	    SHEX("1743A77251D69242750C4F1140532CD3C33F9B5CCDF7514E8584D4A5F9FBD730BCF84D0D4726364B9BF95AB251D9BB"),
                
-	    SHEX("F467CCA67C387FFC9F1B173A084C451095D01AD0BF3953AC103A76F0F1BC86167305A926A941A53417F1611A505AAA205BCFCCBFD343465DAD8A6C1E80609A9D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 48 octets */
-	    SHEX("D8FABA1F5194C4DB5F176FABFFF856924EF627A37CD08CF55608BBA8F1E324D7C7F157298EABC4DCE7D89CE5162499F9"),
                
-	    SHEX("4B389A2A0DF5E295EA9444F2739B5492F290C4467B0B4CDC1CC9ED2CEFA7A9E527E0627CDAF0BDA58F17D13F94AF7D2DEFF6FC5D53DD9157674475527FBB4F86"));
                
-  test_hash(&amp;nettle_sha3_512, /* 49 octets */
-	    SHEX("BE9684BE70340860373C9C482BA517E899FC81BAAA12E5C6D7727975D1D41BA8BEF788CDB5CF4606C9C1C7F61AED59F97D"),
                
-	    SHEX("6590FFFB7311AB7DAB370FB518CCC19BAA9AF7C84179ADB002F8FACD3C44AF2830A84DF1E2C2402368CC36614A6EA22903063E57D00EC511A46A9A03FE3819F7"));
                
-  test_hash(&amp;nettle_sha3_512, /* 50 octets */
-	    SHEX("7E15D2B9EA74CA60F66C8DFAB377D9198B7B16DEB6A1BA0EA3C7EE2042F89D3786E779CF053C77785AA9E692F821F14A7F51"),
                
-	    SHEX("895796B2A0824C55F030D82E794925C38D8459F38CF848519F120FF6A9D5A03EBF006C3EA5021E8F3B3408FF12F01BCDDF7A085BA0A9A58944FEC1F554836DF8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 51 octets */
-	    SHEX("9A219BE43713BD578015E9FDA66C0F2D83CAC563B776AB9F38F3E4F7EF229CB443304FBA401EFB2BDBD7ECE939102298651C86"),
                
-	    SHEX("E4BBD54BFB99D345471F8AB94271B4B748F5CE70C21C28AE6559E03EE7890A2C814043E624A6BD2944350756B37FA8208FC7473A67B310CEEBC17D965ED688B2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 52 octets */
-	    SHEX("C8F2B693BD0D75EF99CAEBDC22ADF4088A95A3542F637203E283BBC3268780E787D68D28CC3897452F6A22AA8573CCEBF245972A"),
                
-	    SHEX("80D862AD05428A299213E65B50310463FD22C505E693DD4719E0A120EEAA35C5FC1608A08D22E2CCDDECA49878BC26ABE55A3C9A546347439A942ED0C1A6A23E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 53 octets */
-	    SHEX("EC0F99711016C6A2A07AD80D16427506CE6F441059FD269442BAAA28C6CA037B22EEAC49D5D894C0BF66219F2C08E9D0E8AB21DE52"),
                
-	    SHEX("021B3B392DECCB9075559F88C0C229026A2048CEF8EEB2D4F94803DCF2DA0A73E004D7F14E9FD662670B59229AB3883C340F4E3A8C42624CCB90BEC1156F95D4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 54 octets */
-	    SHEX("0DC45181337CA32A8222FE7A3BF42FC9F89744259CFF653504D6051FE84B1A7FFD20CB47D4696CE212A686BB9BE9A8AB1C697B6D6A33"),
                
-	    SHEX("97BF33A5254C8ACA27486428440B1034AAAFAC8B498ECB830C2581DC68518079B65FB0C595997693DDB8D68D9564EA98DC43CD287E2E018DB7DFAAAA205C547A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 55 octets */
-	    SHEX("DE286BA4206E8B005714F80FB1CDFAEBDE91D29F84603E4A3EBC04686F99A46C9E880B96C574825582E8812A26E5A857FFC6579F63742F"),
                
-	    SHEX("C05FD9C3FA73F80956FF1C3B89160EB520CA640E201B3FE5E6E296220E81B59D530476010D3784CA08692B8C716A3BE982B37450A96D30A401D3BA3C390D9DE3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 56 octets */
-	    SHEX("EEBCC18057252CBF3F9C070F1A73213356D5D4BC19AC2A411EC8CDEEE7A571E2E20EAF61FD0C33A0FFEB297DDB77A97F0A415347DB66BCAF"),
                
-	    SHEX("B980E657C13726DBADB6570EA3A9E633869CADB798EB35C482697A04CB712F1C1E8C5D0BD67E43E52DA294E82D5E80A695A74A3D27C0C672ADCFE2C928859A6D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 57 octets */
-	    SHEX("416B5CDC9FE951BD361BD7ABFC120A5054758EBA88FDD68FD84E39D3B09AC25497D36B43CBE7B85A6A3CEBDA8DB4E5549C3EE51BB6FCB6AC1E"),
                
-	    SHEX("6ADFC561835FDDD70A9FEB57C513165D12AEB3283F0DD7774DD58852DA9E969ABDAF20DD44856FA60E11BDFA2DBB7E3347669FFF7A57A8D8D37431C2B309972D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 58 octets */
-	    SHEX("5C5FAF66F32E0F8311C32E8DA8284A4ED60891A5A7E50FB2956B3CBAA79FC66CA376460E100415401FC2B8518C64502F187EA14BFC9503759705"),
                
-	    SHEX("0E7459BDC857B949CC59A9C649B9625268BF9A11EA81EEEFA4ECDD410E2F6FD2C78289C01365F99034FF8FA8C115DDCEBEFA26A8D6468F5030E641745950061E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 59 octets */
-	    SHEX("7167E1E02BE1A7CA69D788666F823AE4EEF39271F3C26A5CF7CEE05BCA83161066DC2E217B330DF821103799DF6D74810EED363ADC4AB99F36046A"),
                
-	    SHEX("2A8CE9DF40879B24DADF61C9131F694E5531ADE6B7AB071CA10ABDD3C2E4A22C868A52986A329F880137EE76109770927D2658E63EB486D880290AC0782CF5BF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 60 octets */
-	    SHEX("2FDA311DBBA27321C5329510FAE6948F03210B76D43E7448D1689A063877B6D14C4F6D0EAA96C150051371F7DD8A4119F7DA5C483CC3E6723C01FB7D"),
                
-	    SHEX("A83CE5A6A58376D57DB4C58DA1B46C131FF1BF8FF2DE5E8617FB37E5098398EDB53F9888B8752A8AFF19178F2F6BD7A33FD36C59E4A631906280907FC1C5AB07"));
                
-  test_hash(&amp;nettle_sha3_512, /* 61 octets */
-	    SHEX("95D1474A5AAB5D2422ACA6E481187833A6212BD2D0F91451A67DD786DFC91DFED51B35F47E1DEB8A8AB4B9CB67B70179CC26F553AE7B569969CE151B8D"),
                
-	    SHEX("9EBFCEA2DB1676EEE6B103119543C6049DEBD8FB8F1E01A5AB5B348E2919E14C8CFE8E542F2AB747B0FD4A4C3EEE4019BB046E24BFE2091FB9C65DCA527B71AD"));
                
-  test_hash(&amp;nettle_sha3_512, /* 62 octets */
-	    SHEX("C71BD7941F41DF044A2927A8FF55B4B467C33D089F0988AA253D294ADDBDB32530C0D4208B10D9959823F0C0F0734684006DF79F7099870F6BF53211A88D"),
                
-	    SHEX("97B08BE7653E9DF1B5AFA459EA750A3AC9BF3577BCC7E5344FC861184880926DEF354E4C65B20EC66C47B7AFFD3E7493958BAB0A90724D3D8DD9E1D561FA60C2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 63 octets */
-	    SHEX("F57C64006D9EA761892E145C99DF1B24640883DA79D9ED5262859DCDA8C3C32E05B03D984F1AB4A230242AB6B78D368DC5AAA1E6D3498D53371E84B0C1D4BA"),
                
-	    SHEX("EF8AAF08159BBCB88EFAC49A33A5248B7ED0544960D8DD54D748A91C0D84C69F308BB54CB5EC97D3F81CDF76E68E0320815B93F2A00942F2168CBC18E8377708"));
                
-  test_hash(&amp;nettle_sha3_512, /* 64 octets */
-	    SHEX("E926AE8B0AF6E53176DBFFCC2A6B88C6BD765F939D3D178A9BDE9EF3AA131C61E31C1E42CDFAF4B4DCDE579A37E150EFBEF5555B4C1CB40439D835A724E2FAE7"),
                
-	    SHEX("C0A4D8DCA967772DBF6E5508C913E7BEBA1B749A2B1AC963D0676E6F1DCD4EBAA3F909EF87DD849882DC8253347A5F6520B5B9F510973F443976455F923CFCB9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 65 octets */
-	    SHEX("16E8B3D8F988E9BB04DE9C96F2627811C973CE4A5296B4772CA3EEFEB80A652BDF21F50DF79F32DB23F9F73D393B2D57D9A0297F7A2F2E79CFDA39FA393DF1AC00"),
                
-	    SHEX("CF03C946EB7022F60FB5439462AC22684E47EAACBFFE19B797760B4A24A5238BE9D90E17D40EA6FE7B2885CEF7DFB8BB489401CAA94F2DD6E04592E33E76B9D1"));
                
-  test_hash(&amp;nettle_sha3_512, /* 66 octets */
-	    SHEX("FC424EEB27C18A11C01F39C555D8B78A805B88DBA1DC2A42ED5E2C0EC737FF68B2456D80EB85E11714FA3F8EABFB906D3C17964CB4F5E76B29C1765DB03D91BE37FC"),
                
-	    SHEX("2C35F1A57A17CB29403A2B40FC307BDE10BA8F7FEC7B94E1E42EB4EEB952AAD00EC46A26646CD51DB0C6B238189D7D470E21C29BF8710423CB5602CAB75E29E7"));
                
-  test_hash(&amp;nettle_sha3_512, /* 67 octets */
-	    SHEX("ABE3472B54E72734BDBA7D9158736464251C4F21B33FBBC92D7FAC9A35C4E3322FF01D2380CBAA4EF8FB07D21A2128B7B9F5B6D9F34E13F39C7FFC2E72E47888599BA5"),
                
-	    SHEX("505E6E607C90C57BBE7CE52BB42DF3D90BC32DE554025730C84ED0F89A0132885D7A40FADFF7A4B01DE4D29735AEFE0E0469F4F172B62A0DABA889E152308FC4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 68 octets */
-	    SHEX("36F9F0A65F2CA498D739B944D6EFF3DA5EBBA57E7D9C41598A2B0E4380F3CF4B479EC2348D015FFE6256273511154AFCF3B4B4BF09D6C4744FDD0F62D75079D440706B05"),
                
-	    SHEX("7BE2C95413C589EC5AD69F8D80BFE9F26540D5C1832C7A49A31A8F5655D9CE8B47D97C69CCCD693C211904142A5403DA7AD09FBDB825698FE201988FCCCD2BB2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 69 octets */
-	    SHEX("ABC87763CAE1CA98BD8C5B82CABA54AC83286F87E9610128AE4DE68AC95DF5E329C360717BD349F26B872528492CA7C94C2C1E1EF56B74DBB65C2AC351981FDB31D06C77A4"),
                
-	    SHEX("8AAC9201D76DF13424A32552F04390E499B6168711B70C875789DDAA9B115F8B8259A60D17835E2587F8901C3CA782DA9AFB28BA87B9FCBE05A47A42F48FCD48"));
                
-  test_hash(&amp;nettle_sha3_512, /* 70 octets */
-	    SHEX("94F7CA8E1A54234C6D53CC734BB3D3150C8BA8C5F880EAB8D25FED13793A9701EBE320509286FD8E422E931D99C98DA4DF7E70AE447BAB8CFFD92382D8A77760A259FC4FBD72"),
                
-	    SHEX("AA52587D84586317028FB7D3C20892E0288BFE2FEABD76D7F89155FFE9CCBF1A09FA0FFB0553E83F79AE58BD30A35FA54892B6ABA0093A012427DDAB71CDF819"));
                
-  test_hash(&amp;nettle_sha3_512, /* 71 octets */
-	    SHEX("13BD2811F6ED2B6F04FF3895ACEED7BEF8DCD45EB121791BC194A0F806206BFFC3B9281C2B308B1A729CE008119DD3066E9378ACDCC50A98A82E20738800B6CDDBE5FE9694AD6D"),
                
-	    SHEX("48FC282F37A3E1FB5DF4D2DA1F7197EC899AE573CA08DF550E61EE847EEB1D24C074FF46BCAEE224EC7D8CEA4256154F0C4D434E682834F6D827BFBDF75112F5"));
                
-  test_hash(&amp;nettle_sha3_512, /* 72 octets */
-	    SHEX("1EED9CBA179A009EC2EC5508773DD305477CA117E6D569E66B5F64C6BC64801CE25A8424CE4A26D575B8A6FB10EAD3FD1992EDDDEEC2EBE7150DC98F63ADC3237EF57B91397AA8A7"),
                
-	    SHEX("6B4B0F126863552A6F40F45E295DC79B9BA2A88EA7C3B2F607AC1A8431A97844C2A7B664443FB23C05739DF5494FE9824DB80B7F3E67872142F17E2C5544E1EF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 73 octets */
-	    SHEX("BA5B67B5EC3A3FFAE2C19DD8176A2EF75C0CD903725D45C9CB7009A900C0B0CA7A2967A95AE68269A6DBF8466C7B6844A1D608AC661F7EFF00538E323DB5F2C644B78B2D48DE1A08AA"),
                
-	    SHEX("7EEC7B730056B1BD4F6FFC186FB45591E50CD93CF6E4FC958889F82D3F32C5C74D03A4BCF7D2754298F134698AF4559B0E29BAAA365CC00DB0D51D407179C56D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 74 octets */
-	    SHEX("0EFA26AC5673167DCACAB860932ED612F65FF49B80FA9AE65465E5542CB62075DF1C5AE54FBA4DB807BE25B070033EFA223BDD5B1D3C94C6E1909C02B620D4B1B3A6C9FED24D70749604"),
                
-	    SHEX("79CB925ACA072EBB3B49A9D0E59BB07DD1C223C1F26C91768B929472C51B977F85C6CEEB54BCE89CF9FF6155D7FE8091540F1348CE9592A6403F92105477870E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 75 octets */
-	    SHEX("BBFD933D1FD7BF594AC7F435277DC17D8D5A5B8E4D13D96D2F64E771ABBD51A5A8AEA741BECCBDDB177BCEA05243EBD003CFDEAE877CCA4DA94605B67691919D8B033F77D384CA01593C1B"),
                
-	    SHEX("B5D1ED8F039044BCFEF41E99B2F564F45991B329B503FC91FA29D2408512F8711E9DB66F8AE172164650545AE9E3DB32AA369EC47E81A77111276E6CA38E4D92"));
                
-  test_hash(&amp;nettle_sha3_512, /* 76 octets */
-	    SHEX("90078999FD3C35B8AFBF4066CBDE335891365F0FC75C1286CDD88FA51FAB94F9B8DEF7C9AC \
                582A5DBCD95817AFB7D1B48F63704E19C2BAA4DF347F48D4A6D603013C23F1E9611D595EBAC37C"),
                
-	    SHEX("782C008A9EE3DDA0A182267185C995A2AF737BA8CB2F6179F2CDF52505F8D933E712FC4E56D10E175EC8CDD62DE6529CE1F078BFA0DC7A5284F8C565182F85D9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 77 octets */
-	    SHEX("64105ECA863515C20E7CFBAA0A0B8809046164F374D691CDBD6508AAABC1819F9AC84B52BA \
                FC1B0FE7CDDBC554B608C01C8904C669D8DB316A0953A4C68ECE324EC5A49FFDB59A1BD6A292AA0E"),
                
-	    SHEX("91A0241EDA8CA597CBB0F703AB7DBAAF859CFF77B20401AD46230CE3B2BEEF6685775DE37576014D8DA1BA672D47AAD95FB53C590B650634CEBB43A175738569"));
                
-  test_hash(&amp;nettle_sha3_512, /* 78 octets */
-	    SHEX("D4654BE288B9F3B711C2D02015978A8CC57471D5680A092AA534F7372C71CEAAB725A383C4 \
                FCF4D8DEAA57FCA3CE056F312961ECCF9B86F14981BA5BED6AB5B4498E1F6C82C6CAE6FC14845B3C8A"),
                
-	    SHEX("00B02DBCB7A3BC117701F2F159FC4492923C437D3369833A9BD09E78E260D48D37168D36C49777B2E68E6FE9846106A6AB8768C3971FAB31FD922AACB87D1CAC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 79 octets */
-	    SHEX("12D9394888305AC96E65F2BF0E1B18C29C90FE9D714DD59F651F52B88B3008C58843554806 \
6EA2FC4C101118C91F32556224A540DE6EFDDBCA296EF1FB00341F5B01FECFC146BDB251B3BDAD556CD2"),
                
-	    SHEX("3DEDF819B357DFAB1C7092ABD872A1554DD0962E9944EEF9F7F8BCE830F2D74F1D9BA2B748BBC6EE0B7600BE8CB0FFCB79924D9F51CDB9B06BD6FD37F3050229"));
                
-  test_hash(&amp;nettle_sha3_512, /* 80 octets */
-	    SHEX("871A0D7A5F36C3DA1DFCE57ACD8AB8487C274FAD336BC137EBD6FF4658B547C1DCFAB65F03 \
7AA58F35EF16AFF4ABE77BA61F65826F7BE681B5B6D5A1EA8085E2AE9CD5CF0991878A311B549A6D6AF230"),
                
-	    SHEX("5FBE194557B0426F96BA60712176DF073EAFE04F2A50515455412EA3D80C116758AD952598F48031612181D82A16EFE4668FFB3BCCE9563A772FE416FF6DB3B3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 81 octets */
-	    SHEX("E90B4FFEF4D457BC7711FF4AA72231CA25AF6B2E206F8BF859D8758B89A7CD36105DB2538D \
06DA83BAD5F663BA11A5F6F61F236FD5F8D53C5E89F183A3CEC615B50C7C681E773D109FF7491B5CC22296C5"),
                
-	    SHEX("2E8AB1619859C11473DC7C474CE8B0AE44B1C38417816FD95B9E0614F31E51EBB1DD16D1CBB584C4EBD28AA99F4A68E09DFE3AD462487F2608124B7528293045"));
                
-  test_hash(&amp;nettle_sha3_512, /* 82 octets */
-	    SHEX("E728DE62D75856500C4C77A428612CD804F30C3F10D36FB219C5CA0AA30726AB190E5F3F27 \
9E0733D77E7267C17BE27D21650A9A4D1E32F649627638DBADA9702C7CA303269ED14014B2F3CF8B894EAC8554"),
                
-	    SHEX("DB2D182BDBAC6AC866537E24712332CAE74DC3D36168982E4453DD6E009658345255013BC0A54FCA17AEEDCC4BEB79BDEE192CFAB516D24591C8699F7C758179"));
                
-  test_hash(&amp;nettle_sha3_512, /* 83 octets */
-	    SHEX("6348F229E7B1DF3B770C77544E5166E081850FA1C6C88169DB74C76E42EB983FACB276AD6A \
0D1FA7B50D3E3B6FCD799EC97470920A7ABED47D288FF883E24CA21C7F8016B93BB9B9E078BDB9703D2B781B616E"),
                
-	    SHEX("90A2C05F7001D985B587A046B488BF4ED29D75CC03A745731B5B0CE51BB86387C4CE34018A6D906EB7BEB41A09AFE9FEDD99AACC41B4556F75229C8688C7FCA2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 84 octets */
-	    SHEX("4B127FDE5DE733A1680C2790363627E63AC8A3F1B4707D982CAEA258655D9BF18F89AFE541 \
27482BA01E08845594B671306A025C9A5C5B6F93B0A39522DC877437BE5C2436CBF300CE7AB6747934FCFC30AEAAF6"),
                
-	    SHEX("EA3991C4A8A5F0146402DE4AE235054C78A48DCA340A7D4AD8753995F82347ECFC0054D64EB4F20ABC4F415C54701CBC61A7B239A7C221B833D9EA9F94B154E8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 85 octets */
-	    SHEX("08461F006CFF4CC64B752C957287E5A0FAABC05C9BFF89D23FD902D324C79903B48FCB8F8F \
4B01F3E4DDB483593D25F000386698F5ADE7FAADE9615FDC50D32785EA51D49894E45BAA3DC707E224688C6408B68B11"),
                
-	    SHEX("1313023B753ED1727F13CC67A64B989A8BF6548324DF9854D8D5A963ED3D860257FE6522B9C6D6CB1BCADF322C985601BA36F7E67110192094AA8F9869A458A8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 86 octets */
-	    SHEX("68C8F8849B120E6E0C9969A5866AF591A829B92F33CD9A4A3196957A148C49138E1E2F5C76 \
19A6D5EDEBE995ACD81EC8BB9C7B9CFCA678D081EA9E25A75D39DB04E18D475920CE828B94E72241F24DB72546B352A0E4"),
                
-	    SHEX("9BCA2A1A5546A11275BF42F0B48492868359C78D94785A0EE12DC1C3D70A8E97EB462148FAED1FFA4DAB0E91519BD36C0C5C5FE7CFCFF3E180680318E1FCF75B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 87 octets */
-	    SHEX("B8D56472954E31FB54E28FCA743F84D8DC34891CB564C64B08F7B71636DEBD64CA1EDBDBA7 \
FC5C3E40049CE982BBA8C7E0703034E331384695E9DE76B5104F2FBC4535ECBEEBC33BC27F29F18F6F27E8023B0FBB6F563C"),
                
-	    SHEX("8492F5E621E82FDBFF1976B1BEECFF7D137805B5736AB49216122A95396B863A0481212B6DABA8B05E29E287BB0E2F588F86407C84DBFB894E6ACFC6F6B2E571"));
                
-  test_hash(&amp;nettle_sha3_512, /* 88 octets */
-	    SHEX("0D58AC665FA84342E60CEFEE31B1A4EACDB092F122DFC68309077AED1F3E528F578859EE9E \
4CEFB4A728E946324927B675CD4F4AC84F64DB3DACFE850C1DD18744C74CECCD9FE4DC214085108F404EAB6D8F452B5442A47D"),
                
-	    SHEX("EEBE4EC0FE3E0266527F4D9F57A017637EAB92377D82B15856A55A22B008DF67F27AA5AC04E1DEEEB2C819CE41DB07DBF6DCAF17A192A4371A1E92BADF1E6389"));
                
-  test_hash(&amp;nettle_sha3_512, /* 89 octets */
-	    SHEX("1755E2D2E5D1C1B0156456B539753FF416651D44698E87002DCF61DCFA2B4E72F264D9AD59 \
1DF1FDEE7B41B2EB00283C5AEBB3411323B672EAA145C5125185104F20F335804B02325B6DEA65603F349F4D5D8B782DD3469CCD"),
                
-	    SHEX("9E36E6291BC2296CB4BA71109CEDCC2A3F0B4F1AE5E5406DC4B3E594551D5C70E6F814D2C9B8413103EF07535886B4AC518AAF7AED64ABED7A5B0A26F7171425"));
                
-  test_hash(&amp;nettle_sha3_512, /* 90 octets */
-	    SHEX("B180DE1A611111EE7584BA2C4B020598CD574AC77E404E853D15A101C6F5A2E5C801D7D85D \
C95286A1804C870BB9F00FD4DCB03AA8328275158819DCAD7253F3E3D237AEAA7979268A5DB1C6CE08A9EC7C2579783C8AFC1F91A7"),
                
-	    SHEX("F1089483A00B2601BE9C16469A090EFC49FCB70E62AC0FFEA2D1E508083CD5D41DCF2DAAE1E0EAC217859E5FEADDCB782AC471C01D7266136185D37B568E9606"));
                
-  test_hash(&amp;nettle_sha3_512, /* 91 octets */
-	    SHEX("CF3583CBDFD4CBC17063B1E7D90B02F0E6E2EE05F99D77E24E560392535E47E05077157F96 \
813544A17046914F9EFB64762A23CF7A49FE52A0A4C01C630CFE8727B81FB99A89FF7CC11DCA5173057E0417B8FE7A9EFBA6D95C555F"),
                
-	    SHEX("D063EA794CFD2ED9248665A6084A7B99051C1051E41B7D9DCB1537A1C79CBA6DEB4D844C6A618E43C7CA020D16976999684FEB084616F707209F75C4BD584D86"));
                
-  test_hash(&amp;nettle_sha3_512, /* 92 octets */
-	    SHEX("072FC02340EF99115BAD72F92C01E4C093B9599F6CFC45CB380EE686CB5EB019E806AB9BD5 \
5E634AB10AA62A9510CC0672CD3EDDB589C7DF2B67FCD3329F61B1A4441ECA87A33C8F55DA4FBBAD5CF2B2527B8E983BB31A2FADEC7523"),
                
-	    SHEX("424A86D746C87C85DABD1DAE298A488E4CA2183DE692D1D01C4B7994EE5124F9004BEA84933C311CC38EA6F604A7769EE178E1EC160A9891C42C462A13A62286"));
                
-  test_hash(&amp;nettle_sha3_512, /* 93 octets */
-	    SHEX("76EECF956A52649F877528146DE33DF249CD800E21830F65E90F0F25CA9D6540FDE4060323 \
0ECA6760F1139C7F268DEBA2060631EEA92B1FFF05F93FD5572FBE29579ECD48BC3A8D6C2EB4A6B26E38D6C5FBF2C08044AEEA470A8F2F26"),
                
-	    SHEX("A9403C26A96DE2C3D359EE29F3FD1C581154852D19AD12884B79E7082D2DA22EC83553BABA2BDFF2A2FA15947A8E6ACD5F5D113EC091BFD1962A0A10401D2C98"));
                
-  test_hash(&amp;nettle_sha3_512, /* 94 octets */
-	    SHEX("7ADC0B6693E61C269F278E6944A5A2D8300981E40022F839AC644387BFAC9086650085C2CD \
C585FEA47B9D2E52D65A2B29A7DC370401EF5D60DD0D21F9E2B90FAE919319B14B8C5565B0423CEFB827D5F1203302A9D01523498A4DB10374"),
                
-	    SHEX("3D23632EE4C2D4F4118A02A677B5A32427C72BA54899BA2E6CCD22EC3DEFE0FCB052E3F83D35786CEA2080EED148A0A94628E735202E6B2809994C5F5BDAFDD6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 95 octets */
-	    SHEX("E1FFFA9826CCE8B86BCCEFB8794E48C46CDF372013F782ECED1E378269B7BE2B7BF5137409 \
2261AE120E822BE685F2E7A83664BCFBE38FE8633F24E633FFE1988E1BC5ACF59A587079A57A910BDA60060E85B5F5B6F776F0529639D9CCE4BD"),
                
-	    SHEX("D8FA886884CE577A7282DECEACF4786E7C68FC69B141137FF5DC7CB3C5F8ABC845716DD27397E8BD5CE245107A984A3F8B21F19F99ED40118621DC85303A30B4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 96 octets */
-	    SHEX("69F9ABBA65592EE01DB4DCE52DBAB90B08FC04193602792EE4DAA263033D59081587B09BBE \
49D0B49C9825D22840B2FF5D9C5155F975F8F2C2E7A90C75D2E4A8040FE39F63BBAFB403D9E28CC3B86E04E394A9C9E8065BD3C85FA9F0C7891600"),
                
-	    SHEX("C768CD313602FABB2193F9EDBF667B4CDABD57D5FF60BDC22BA7BAD5319EA04E7CBEC5D4B4C4560AD52609FDD22750B618951796376ED41B2A8EAFFDD9927722"));
                
-  test_hash(&amp;nettle_sha3_512, /* 97 octets */
-	    SHEX("38A10A352CA5AEDFA8E19C64787D8E9C3A75DBF3B8674BFAB29B5DBFC15A63D10FAE66CD1A \
6E6D2452D557967EAAD89A4C98449787B0B3164CA5B717A93F24EB0B506CEB70CBBCB8D72B2A72993F909AAD92F044E0B5A2C9AC9CB16A0CA2F81F49"),
                
-	    SHEX("8562CE9399806623B2695712266AF3D4C14F77D2449143379246962C22398C813544A7DEE4C4847F09D3CBE437349B7FC6738AC97075B5DD9E2ADD6ECAA610F4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 98 octets */
-	    SHEX("6D8C6E449BC13634F115749C248C17CD148B72157A2C37BF8969EA83B4D6BA8C0EE2711C28 \
EE11495F43049596520CE436004B026B6C1F7292B9C436B055CBB72D530D860D1276A1502A5140E3C3F54A93663E4D20EDEC32D284E25564F624955B52"),
                
-	    SHEX("99ADE7B13E8E79AEA6ED01A25E10E401CD1D055884575EAB3E66B2294F03F8D5DBF72AB1AE39103189383EBFD2E43258510C124A894A793B206FAC752C035789"));
                
-  test_hash(&amp;nettle_sha3_512, /* 99 octets */
-	    SHEX("6EFCBCAF451C129DBE00B9CEF0C3749D3EE9D41C7BD500ADE40CDC65DEDBBBADB885A5B14B \
32A0C0D087825201E303288A733842FA7E599C0C514E078F05C821C7A4498B01C40032E9F1872A1C925FA17CE253E8935E4C3C71282242CB716B2089CCC1"),
                
-	    SHEX("D12831BA39DBCD41F56BC7FC071BDAABFB6E7572D08B2FDA3BDDFC6FA5662F4BDBFA431CA2E38B18172709072E50120DB6BE93E86CB4ACE3C11DD0E1F3F5C712"));
                
-  test_hash(&amp;nettle_sha3_512, /* 100 octets */
-	    SHEX("433C5303131624C0021D868A30825475E8D0BD3052A022180398F4CA4423B98214B6BEAAC2 \
1C8807A2C33F8C93BD42B092CC1B06CEDF3224D5ED1EC29784444F22E08A55AA58542B524B02CD3D5D5F6907AFE71C5D7462224A3F9D9E53E7E0846DCBB4CE"),
                
-	    SHEX("527D28E341E6B14F4684ADB4B824C496C6482E51149565D3D17226828884306B51D6148A72622C2B75F5D3510B799D8BDC03EAEDE453676A6EC8FE03A1AD0EAB"));
                
-  test_hash(&amp;nettle_sha3_512, /* 101 octets */
-	    SHEX("A873E0C67CA639026B6683008F7AA6324D4979550E9BCE064CA1E1FB97A30B147A24F3F666 \
C0A72D71348EDE701CF2D17E2253C34D1EC3B647DBCEF2F879F4EB881C4830B791378C901EB725EA5C172316C6D606E0AF7DF4DF7F76E490CD30B2BADF45685F"),
                
-	    SHEX("CACDCF8BF855040E9795C422069D8E37B6286066A2197A320BD934061F66995227BE6B85FD928B834D3CA45E1AC3844D9DC66D61581E7799CCFDE008639AB3DD"));
                
-  test_hash(&amp;nettle_sha3_512, /* 102 octets */
-	    SHEX("006917B64F9DCDF1D2D87C8A6173B64F6587168E80FAA80F82D84F60301E561E312D9FBCE6 \
2F39A6FB476E01E925F26BCC91DE621449BE6504C504830AAE394096C8FC7694651051365D4EE9070101EC9B68086F2EA8F8AB7B811EA8AD934D5C9B62C60A4771"),
                
-	    SHEX("F454A953501E191A12A80C7A5398F081CEF738E25D48B076A52F77FB09EF0BC2325116020BB06C2C585DA9F115BD9D8F13B50E8E1FB1664450FAE690B7783400"));
                
-  test_hash(&amp;nettle_sha3_512, /* 103 octets */
-	    SHEX("F13C972C52CB3CC4A4DF28C97F2DF11CE089B815466BE88863243EB318C2ADB1A417CB1041 \
308598541720197B9B1CB5BA2318BD5574D1DF2174AF14884149BA9B2F446D609DF240CE335599957B8EC80876D9A085AE084907BC5961B20BF5F6CA58D5DAB38ADB"),
                
-	    SHEX("5F968CC6ECF71C588A3C3BA68858BBFF96861F66C0733FD61FA91A479A49618DF22D9490219DF8008DC78840AE022C5D41AF2B890D0214E562DA8DF0CB3F8522"));
                
-  test_hash(&amp;nettle_sha3_512, /* 104 octets */
-	    SHEX("E35780EB9799AD4C77535D4DDB683CF33EF367715327CF4C4A58ED9CBDCDD486F669F80189 \
D549A9364FA82A51A52654EC721BB3AAB95DCEB4A86A6AFA93826DB923517E928F33E3FBA850D45660EF83B9876ACCAFA2A9987A254B137C6E140A21691E1069413848"),
                
-	    SHEX("E7149461F9CD00B71C216C50041B3EDA9707D7360D4C21740C44C212256A31DA398FE09708E450EA4E2826B7EC20BEF76CD2FBD9D096AF6F77F84ABC2E4FB093"));
                
-  test_hash(&amp;nettle_sha3_512, /* 105 octets */
-	    SHEX("64EC021C9585E01FFE6D31BB50D44C79B6993D72678163DB474947A053674619D158016ADB \
243F5C8D50AA92F50AB36E579FF2DABB780A2B529370DAA299207CFBCDD3A9A25006D19C4F1FE33E4B1EAEC315D8C6EE1E730623FD1941875B924EB57D6D0C2EDC4E78D6"),
                
-	    SHEX("77097413CAA5A2D38259D47EC078871FA09EE5614D4C14FEB7A95C921C0AAE93B8737A6DC89E57693BE8A0710206664B80B657A1079605A0FF9664BBCB0722D6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 106 octets */
-	    SHEX("5954BAB512CF327D66B5D9F296180080402624AD7628506B555EEA8382562324CF452FBA4A \
2130DE3E165D11831A270D9CB97CE8C2D32A96F50D71600BB4CA268CF98E90D6496B0A6619A5A8C63DB6D8A0634DFC6C7EC8EA9C006B6C456F1B20CD19E781AF20454AC880"),
                
-	    SHEX("55D8E5202360D7D5841419362F864CC900E11C582FD0CAB2FF5F1680F6CE927B5379E27A335EBAFE1286B9D4A172AB761A36EADE60F10468EAC4CEAFBF63C7CC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 107 octets */
-	    SHEX("03D9F92B2C565709A568724A0AFF90F8F347F43B02338F94A03ED32E6F33666FF5802DA4C8 \
1BDCE0D0E86C04AFD4EDC2FC8B4141C2975B6F07639B1994C973D9A9AFCE3D9D365862003498513BFA166D2629E314D97441667B007414E739D7FEBF0FE3C32C17AA188A8683"),
                
-	    SHEX("EFFB03B497ADD6230A0ED99122EA868138644AB81E861491E526FAE37C39872CA731804A0004599849478A787BC7FCE21903ED551D7DB881D2A2C367B6168547"));
                
-  test_hash(&amp;nettle_sha3_512, /* 108 octets */
-	    SHEX("F31E8B4F9E0621D531D22A380BE5D9ABD56FAEC53CBD39B1FAB230EA67184440E5B1D15457 \
BD25F56204FA917FA48E669016CB48C1FFC1E1E45274B3B47379E00A43843CF8601A5551411EC12503E5AAC43D8676A1B2297EC7A0800DBFEE04292E937F21C005F17411473041"),
                
-	    SHEX("A2269A6EF2EA8F1CF8BC3394D27657B0DB996C55E7C47784C0B451202FC5279679D79E06F8DBAA9A63665FD0E914D13C6E056EA006DAAF4CB61D2629468E3D25"));
                
-  test_hash(&amp;nettle_sha3_512, /* 109 octets */
-	    SHEX("758EA3FEA738973DB0B8BE7E599BBEF4519373D6E6DCD7195EA885FC991D896762992759C2 \
A09002912FB08E0CB5B76F49162AEB8CF87B172CF3AD190253DF612F77B1F0C532E3B5FC99C2D31F8F65011695A087A35EE4EEE5E334C369D8EE5D29F695815D866DA99DF3F79403"),
                
-	    SHEX("5A2970D5EC346A8E4E1D5D1E57DC22F6875DDF1CE3626B49A91109E0DE991033E932F883B6A795016D5014E268304ABE2F7577505AAB00956911781F075D113A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 110 octets */
-	    SHEX("47C6E0C2B74948465921868804F0F7BD50DD323583DC784F998A93CD1CA4C6EF84D41DC81C \
2C40F34B5BEE6A93867B3BDBA0052C5F59E6F3657918C382E771D33109122CC8BB0E1E53C4E3D13B43CE44970F5E0C079D2AD7D7A3549CD75760C21BB15B447589E86E8D76B1E9CED2"),
                
-	    SHEX("2B4356A64DF31936B27F4530F076EE73E71E4E48ABDE04FF1F548E0727F4A5810B71874187FD96ED510D0D6886AF11960A0B3BAD1EE75DDA4CDC148E162EDAE9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 111 octets */
-	    SHEX("F690A132AB46B28EDFA6479283D6444E371C6459108AFD9C35DBD235E0B6B6FF4C4EA58E75 \
54BD002460433B2164CA51E868F7947D7D7A0D792E4ABF0BE5F450853CC40D85485B2B8857EA31B5EA6E4CCFA2F3A7EF3380066D7D8979FDAC618AAD3D7E886DEA4F005AE4AD05E5065F"),
                
-	    SHEX("EDCB59984267BB00402A78F2CA345EF2494956172E10927EE63AFF23D0C834BCA50C47CDBFFD8995036307E9ED4B143E853450367D0E14AFC8490073653CD850"));
                
-  test_hash(&amp;nettle_sha3_512, /* 112 octets */
-	    SHEX("58D6A99BC6458824B256916770A8417040721CCCFD4B79EACD8B65A3767CE5BA7E74104C98 \
5AC56B8CC9AEBD16FEBD4CDA5ADB130B0FF2329CC8D611EB14DAC268A2F9E633C99DE33997FEA41C52A7C5E1317D5B5DAED35EBA7D5A60E45D1FA7EAABC35F5C2B0A0F2379231953322C4E"),
                
-	    SHEX("D0B453FBE709C69125DC8FE9E8AE9245211612970373B454F8656A755E8435B321DD3A980FA28719641747E254DC42C9BF012B4D6DBD7ED13020A83B44C504AA"));
                
-  test_hash(&amp;nettle_sha3_512, /* 113 octets */
-	    SHEX("BEFAB574396D7F8B6705E2D5B58B2C1C820BB24E3F4BAE3E8FBCD36DBF734EE14E5D6AB972 \
AEDD3540235466E825850EE4C512EA9795ABFD33F330D9FD7F79E62BBB63A6EA85DE15BEAEEA6F8D204A28956059E2632D11861DFB0E65BC07AC8A159388D5C3277E227286F65FF5E5B5AEC1"),
                
-	    SHEX("FE97C011E525110E03149FAC4179891AFCB6304E1CFD9D84CB7389755554EE723571D76B80B9333A695884192340B3FE022D4A233B7AA8E8C7686745CFE75E67"));
                
-  test_hash(&amp;nettle_sha3_512, /* 114 octets */
-	    SHEX("8E58144FA9179D686478622CE450C748260C95D1BA43B8F9B59ABECA8D93488DA73463EF40 \
198B4D16FB0B0707201347E0506FF19D01BEA0F42B8AF9E71A1F1BD168781069D4D338FDEF00BF419FBB003031DF671F4A37979564F69282DE9C65407847DD0DA505AB1641C02DEA4F0D834986"),
                
-	    SHEX("1BC4AC8D979CA62A7FC81C710CEDF65AF56C9B652EEC356AA92DA924D370FDEBDF076F91BA4FE1EC5CD78FC4C8885EA4304BA2E8E64944AB4BF4D1B3D7DEE745"));
                
-  test_hash(&amp;nettle_sha3_512, /* 115 octets */
-	    SHEX("B55C10EAE0EC684C16D13463F29291BF26C82E2FA0422A99C71DB4AF14DD9C7F33EDA52FD7 \
3D017CC0F2DBE734D831F0D820D06D5F89DACC485739144F8CFD4799223B1AFF9031A105CB6A029BA71E6E5867D85A554991C38DF3C9EF8C1E1E9A7630BE61CAABCA69280C399C1FB7A12D12AEFC"),
                
-	    SHEX("76E970E9449D868067CD23B1A202CBDC99693FF6FA74BA644EC41CBF8FD139CB0F5D1106FCD6C871C315FF41C3EAF99C636288F0FCF6A40B480CB881D87E098F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 116 octets */
-	    SHEX("2EEEA693F585F4ED6F6F8865BBAE47A6908AECD7C429E4BEC4F0DE1D0CA0183FA201A0CB14 \
A529B7D7AC0E6FF6607A3243EE9FB11BCF3E2304FE75FFCDDD6C5C2E2A4CD45F63C962D010645058D36571404A6D2B4F44755434D76998E83409C3205AA1615DB44057DB991231D2CB42624574F545"),
                
-	    SHEX("871666B230C5AD75B96D63BE22870621C68FD0899655BA7DC0E0E5299915AF252C226DD7217601D3A6880D55EE5A20B10820E21C74F730EEA9D47FE26DEBE006"));
                
-  test_hash(&amp;nettle_sha3_512, /* 117 octets */
-	    SHEX("DAB11DC0B047DB0420A585F56C42D93175562852428499F66A0DB811FCDDDAB2F7CDFFED15 \
43E5FB72110B64686BC7B6887A538AD44C050F1E42631BC4EC8A9F2A047163D822A38989EE4AAB01B4C1F161B062D873B1CFA388FD301514F62224157B9BEF423C7783B7AAC8D30D65CD1BBA8D689C2D"),
                
-	    SHEX("7E3EF62552B28A2B18A71CEEF2DD8659C8BDF291385AD02FED353775E01594F27CC28CC78663E17CB8B39FD4EA48D494AD0BD7AEE9277EC9B21E46523812736E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 118 octets */
-	    SHEX("42E99A2F80AEE0E001279A2434F731E01D34A44B1A8101726921C0590C30F3120EB83059F3 \
25E894A5AC959DCA71CE2214799916424E859D27D789437B9D27240BF8C35ADBAFCECC322B48AA205B293962D858652ABACBD588BCF6CBC388D0993BD622F96ED54614C25B6A9AA527589EAAFFCF17DDF7"),
                
-	    SHEX("0B87F6EBAA293FF79C873820846C0FCC943E3A83BD8111931FF03FF3B0BF785C961CA84CF3FD40E0D831DBAEA595498FC12DA88CC507DE720A35C01D73FC9595"));
                
-  test_hash(&amp;nettle_sha3_512, /* 119 octets */
-	    SHEX("3C9B46450C0F2CAE8E3823F8BDB4277F31B744CE2EB17054BDDC6DFF36AF7F49FB8A2320CC \
3BDF8E0A2EA29AD3A55DE1165D219ADEDDB5175253E2D1489E9B6FDD02E2C3D3A4B54D60E3A47334C37913 \
                C5695378A669E9B72DEC32AF5434F93F46176EBF044C4784467C700470D0C0B40C8A088C815816"),
                
-	    SHEX("681BABBD2E351501C285812E06F20940FD865516CF028B4787D1FFCCD0D537705E8E9B73C608D5A8DC4F08EEE0902AC12936DDB8C7B29228C6AAF8D0B909C30D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 120 octets */
-	    SHEX("D1E654B77CB155F5C77971A64DF9E5D34C26A3CAD6C7F6B300D39DEB1910094691ADAA095B \
E4BA5D86690A976428635D5526F3E946F7DC3BD4DBC78999E653441187A81F9ADCD5A3C5F254BC8256B015 \
                8F54673DCC1232F6E918EBFC6C51CE67EAEB042D9F57EEC4BFE910E169AF78B3DE48D137DF4F2840"),
                
-	    SHEX("C46D2262F186421D07FD740F922306D99B1E3826F6A32486BE5A91DC298F177F50915E17EB4EA2E45494C501736CEFB0E22ACD989DA41AC7BB7BE56B04BFB5E1"));
                
-  test_hash(&amp;nettle_sha3_512, /* 121 octets */
-	    SHEX("626F68C18A69A6590159A9C46BE03D5965698F2DAC3DE779B878B3D9C421E0F21B955A16C7 \
15C1EC1E22CE3EB645B8B4F263F60660EA3028981EEBD6C8C3A367285B691C8EE56944A7CD1217997E1D9C \
                21620B536BDBD5DE8925FF71DEC6FBC06624AB6B21E329813DE90D1E572DFB89A18120C3F606355D25"),
                
-	    SHEX("0B3DBC770332823E686470D842104D3B3C1452F64F1BCC71C5F3FAD1C0D93F21EFBD48D73C7D4909227B06B06D54057A74E03C36D9C106EBA79411F1E6E1CFFE"));
                
-  test_hash(&amp;nettle_sha3_512, /* 122 octets */
-	    SHEX("651A6FB3C4B80C7C68C6011675E6094EB56ABF5FC3057324EBC6477825061F9F27E7A94633 \
ABD1FA598A746E4A577CAF524C52EC1788471F92B8C37F23795CA19D559D446CAB16CBCDCE90B79FA1026C \
EE77BF4AB1B503C5B94C2256AD75B3EAC6FD5DCB96ACA4B03A834BFB4E9AF988CECBF2AE597CB9097940"),
                
-	    SHEX("CA46276B0DC2EC4424BB7136EAE1AF207BD6E5CD833691C7D37B2CAEAF4F484B96A3476FC25FEB206AD37CF975383DD522CA0CC6200A3867FEE7F178D6953FEF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 123 octets */
-	    SHEX("8AAF072FCE8A2D96BC10B3C91C809EE93072FB205CA7F10ABD82ECD82CF040B1BC49EA13D1 \
857815C0E99781DE3ADBB5443CE1C897E55188CEAF221AA9681638DE05AE1B322938F46BCE51543B57ECDB \
4C266272259D1798DE13BE90E10EFEC2D07484D9B21A3870E2AA9E06C21AA2D0C9CF420080A80A91DEE16F"),
                
-	    SHEX("815B44668BF3751A3392940FCA54C1E3E4EF5227B052332AFE6EB7A10AC8AD6438CE8A0277AA14BCC41590F6D6A10B6B1BABE6BB4F8D777EA576D634B0BE41C0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 124 octets */
-	    SHEX("53F918FD00B1701BD504F8CDEA803ACCA21AC18C564AB90C2A17DA592C7D69688F65805753 \
95551E8CD33E0FEF08CA6ED4588D4D140B3E44C032355DF1C531564D7F4835753344345A6781E11CD5E095 \
B73DF5F82C8AE3AD00877936896671E947CC52E2B29DCD463D90A0C9929128DA222B5A211450BBC0E02448E2"),
                
-	    SHEX("F47799A8547FC9C07D0F808029E7335607D72224BE286E118657BD13A2C51D0374426D9EEB7693BDE5EC6181574C1404DF29BF96941862BA1A0A9A5903319498"));
                
-  test_hash(&amp;nettle_sha3_512, /* 125 octets */
-	    SHEX("A64599B8A61B5CCEC9E67AED69447459C8DA3D1EC6C7C7C82A7428B9B584FA67E90F68E2C0 \
0FBBED4613666E5168DA4A16F395F7A3C3832B3B134BFC9CBAA95D2A0FE252F44AC6681EB6D40AB91C1D02 \
82FED6701C57463D3C5F2BB8C6A7301FB4576AA3B5F15510DB8956FF77478C26A7C09BEA7B398CFC83503F538E"),
                
-	    SHEX("8A0AE12A9E797FB7BD46CBB910076A32873BFFCB9AD98B4FC37316AED681EC49C65ABBB9586405FF96CC80DA4BB8FA73BE1BA9E737595B2307CF369D61BAF59C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 126 octets */
-	    SHEX("0E3AB0E054739B00CDB6A87BD12CAE024B54CB5E550E6C425360C2E87E59401F5EC24EF031 \
4855F0F56C47695D56A7FB1417693AF2A1ED5291F2FEE95F75EED54A1B1C2E81226FBFF6F63ADE584911C7 \
1967A8EB70933BC3F5D15BC91B5C2644D9516D3C3A8C154EE48E118BD1442C043C7A0DBA5AC5B1D5360AAE5B9065"),
                
-	    SHEX("A3C6D58872BAFDEDFDD50C0309089240D6977D4D3D59FB3F2BE133C57D2DFCFCC7C027296F74FE58B2A9A6CB7E5D70088934D051CBA57001FE27965CFA071A6F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 127 octets */
-	    SHEX("A62FC595B4096E6336E53FCDFC8D1CC175D71DAC9D750A6133D23199EAAC288207944CEA6B \
16D27631915B4619F743DA2E30A0C00BBDB1BBB35AB852EF3B9AEC6B0A8DCC6E9E1ABAA3AD62AC0A6C5DE7 \
65DE2C3711B769E3FDE44A74016FFF82AC46FA8F1797D3B2A726B696E3DEA5530439ACEE3A45C2A51BC32DD055650B"),
                
-	    SHEX("11E0E521B55F02BEFC7207C06444FCC0C16DCF6F34962921B709A322F35E2193477B0DFA21F213F209705FF3958531A75D94346075FEB29A288B62E2315AE270"));
                
-  test_hash(&amp;nettle_sha3_512, /* 128 octets */
-	    SHEX("2B6DB7CED8665EBE9DEB080295218426BDAA7C6DA9ADD2088932CDFFBAA1C14129BCCDD70F \
369EFB149285858D2B1D155D14DE2FDB680A8B027284055182A0CAE275234CC9C92863C1B4AB66F304CF06 \
21CD54565F5BFF461D3B461BD40DF28198E3732501B4860EADD503D26D6E69338F4E0456E9E9BAF3D827AE685FB1D817"),
                
-	    SHEX("AEBBA57C8ED5AF6EC93F4AA45772FF5167B7EA88DFA71364F37D8FC5FDB7DC3B2C8331A08023F21D110B7D821E2DC7E860826235E7E6291912AC521384747354"));
                
-  test_hash(&amp;nettle_sha3_512, /* 129 octets */
-	    SHEX("10DB509B2CDCABA6C062AE33BE48116A29EB18E390E1BBADA5CA0A2718AFBCD23431440106 \
594893043CC7F2625281BF7DE2655880966A23705F0C5155C2F5CCA9F2C2142E96D0A2E763B70686CD421B \
5DB812DACED0C6D65035FDE558E94F26B3E6DDE5BD13980CC80292B723013BD033284584BFF27657871B0CF07A849F4AE2"),
                
-	    SHEX("2DF1E09540B53A17222DAB66275CEBECEB1F8A5DB26B0C41F955FA0549F3367E82299E0CD673958AF7DFA04D741AA63BA2C1AD351764DC9228D215F22C24CA58"));
                
-  test_hash(&amp;nettle_sha3_512, /* 130 octets */
-	    SHEX("9334DE60C997BDA6086101A6314F64E4458F5FF9450C509DF006E8C547983C651CA9787917 \
5AABA0C539E82D05C1E02C480975CBB30118121061B1EBAC4F8D9A3781E2DB6B18042E01ECF9017A64A0E5 \
7447EC7FCBE6A7F82585F7403EE2223D52D37B4BF426428613D6B4257980972A0ACAB508A7620C1CB28EB4E9D30FC41361EC"),
                
-	    SHEX("8299CFCEA5F00C93A5EB8A84A13628A68B26796D53FB6A986C95B0B1C248920FB946D8AF98343D14EFC74A4611C53CCC27C5F14C7237AF28364346CA5CD70D1A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 131 octets */
-	    SHEX("E88AB086891693AA535CEB20E64C7AB97C7DD3548F3786339897A5F0C39031549CA870166E \
477743CCFBE016B4428D89738E426F5FFE81626137F17AECFF61B72DBEE2DC20961880CFE281DFAB5EE38B \
1921881450E16032DE5E4D55AD8D4FCA609721B0692BAC79BE5A06E177FE8C80C0C83519FB3347DE9F43D5561CB8107B9B5EDC"),
                
-	    SHEX("AF57BEA357FCBA0579C4204C0F8DFF181BC8A473014BAE78DF76069DE478B2F2A390327A65BDD24BE926551C78F70B0D5F1C8F4B970997D557F06336A315A749"));
                
-  test_hash(&amp;nettle_sha3_512, /* 132 octets */
-	    SHEX("FD19E01A83EB6EC810B94582CB8FBFA2FCB992B53684FB748D2264F020D3B960CB1D6B8C34 \
8C2B54A9FCEA72330C2AAA9A24ECDB00C436ABC702361A82BB8828B85369B8C72ECE0082FE06557163899C \
2A0EFA466C33C04343A839417057399A63A3929BE1EE4805D6CE3E5D0D0967FE9004696A5663F4CAC9179006A2CEB75542D75D68"),
                
-	    SHEX("B299E421061EF26C32BB4F50EE669D05FEB2CCBA3297289C30E6434057B3EA7F617BBBF7A5555328FC291F794987577F458350DF99AF3A5778300BE0BD80164F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 133 octets */
-	    SHEX("59AE20B6F7E0B3C7A989AFB28324A40FCA25D8651CF1F46AE383EF6D8441587AA1C04C3E3B \
F88E8131CE6145CFB8973D961E8432B202FA5AF3E09D625FAAD825BC19DA9B5C6C20D02ABDA2FCC58B5BD3 \
FE507BF201263F30543819510C12BC23E2DDB4F711D087A86EDB1B355313363A2DE996B891025E147036087401CCF3CA7815BF3C49"),
                
-	    SHEX("CBDFB0D0E720F87259DD0D0B4E9C5319E7F88AAEF7F7AB2FA1CA639AFA0160822F96B3C357A4894CE53CD713FAB23AD052E8565FA3B3A523CB9CE39A6BD535CC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 134 octets */
-	    SHEX("77EE804B9F3295AB2362798B72B0A1B2D3291DCEB8139896355830F34B3B328561531F8079 \
B79A6E9980705150866402FDC176C05897E359A6CB1A7AB067383EB497182A7E5AEF7038E4C96D133B2782 \
917417E391535B5E1B51F47D8ED7E4D4025FE98DC87B9C1622614BFF3D1029E68E372DE719803857CA52067CDDAAD958951CB2068CC6"),
                
-	    SHEX("059A181C83A22BFF0AA9BAA22D872BDF23CBE341032CF0BF57997A4A1924D24FBAE9DCA14B6D290692B6A6B6344CBE531734F58AD0224C6E39BD1E87F870AAD6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 135 octets */
-	    SHEX("B771D5CEF5D1A41A93D15643D7181D2A2EF0A8E84D91812F20ED21F147BEF732BF3A60EF40 \
67C3734B85BC8CD471780F10DC9E8291B58339A677B960218F71E793F2797AEA349406512829065D37BB55 \
EA796FA4F56FD8896B49B2CD19B43215AD967C712B24E5032D065232E02C127409D2ED4146B9D75D763D52DB98D949D3B0FED6A8052FBB"),
                
-	    SHEX("9EDEEB10EE1B7BB8F16A280D8CC3EDA5E909C554419DDC523B69ECEDF2ADF3B3C9BC66FEF365342471C458126F083A3B8E7C0C9D9D77E9F90196B71F9AADF492"));
                
-  test_hash(&amp;nettle_sha3_512, /* 136 octets */
-	    SHEX("B32D95B0B9AAD2A8816DE6D06D1F86008505BD8C14124F6E9A163B5A2ADE55F835D0EC3880 \
EF50700D3B25E42CC0AF050CCD1BE5E555B23087E04D7BF9813622780C7313A1954F8740B6EE2D3F71F768 \
DD417F520482BD3A08D4F222B4EE9DBD015447B33507DD50F3AB4247C5DE9A8ABD62A8DECEA01E3B87C8B927F5B08BEB37674C6F8E380C04"),
                
-	    SHEX("A6054FFC3D81591BE964C4B004A3A21142365B59EE98B2873D488293F93A8D7154BF72100012C60D3C9418F6AF8EA66372CB4703F5F6381DE6D4B9B98CFF1E90"));
                
-  test_hash(&amp;nettle_sha3_512, /* 137 octets */
-	    SHEX("04410E31082A47584B406F051398A6ABE74E4DA59BB6F85E6B49E8A1F7F2CA00DFBA5462C2 \
CD2BFDE8B64FB21D70C083F11318B56A52D03B81CAC5EEC29EB31BD0078B6156786DA3D6D8C33098C5C47B \
B67AC64DB14165AF65B44544D806DDE5F487D5373C7F9792C299E9686B7E5821E7C8E2458315B996B5677D926DAC57B3F22DA873C601016A0D"),
                
-	    SHEX("B0E54A12FDBA0738898F1BBF0BA81F81DE77648D8D14C20BDD5D90F300D382E069F5DBA7EEC6B23168B008B9F39C2B93FD742A5902A5E02728F57712D6A61D4E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 138 octets */
-	    SHEX("8B81E9BADDE026F14D95C019977024C9E13DB7A5CD21F9E9FC491D716164BBACDC7060D882 \
615D411438AEA056C340CDF977788F6E17D118DE55026855F93270472D1FD18B9E7E812BAE107E0DFDE706 \
3301B71F6CFE4E225CAB3B232905A56E994F08EE2891BA922D49C3DAFEB75F7C69750CB67D822C96176C46BD8A29F1701373FB09A1A6E3C7158F"),
                
-	    SHEX("3CE96077EB17C6A9C95A9A477748876C6451098DBEA2B3261E6D75B64A988E1C75D7EAC73BC2402AFC726543E2A5BDB76689C0931FF762818DD2D3FE57A50FA9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 139 octets */
-	    SHEX("FA6EED24DA6666A22208146B19A532C2EC9BA94F09F1DEF1E7FC13C399A48E41ACC2A589D0 \
99276296348F396253B57CB0E40291BD282773656B6E0D8BEA1CDA084A3738816A840485FCF3FB307F777F \
A5FEAC48695C2AF4769720258C77943FB4556C362D9CBA8BF103AEB9034BAA8EA8BFB9C4F8E6742CE0D52C49EA8E974F339612E830E9E7A9C29065"),
                
-	    SHEX("C9ACD6D98A349512B952D151ED501562F04EA4BB4B8965812510B9B842531A2B41A0108AC129CF9C9517BE790921DF64AD1DFC0B93DDBA3415EEBAF0DA72F6A0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 140 octets */
-	    SHEX("9BB4AF1B4F09C071CE3CAFA92E4EB73CE8A6F5D82A85733440368DEE4EB1CBC7B55AC15077 \
3B6FE47DBE036C45582ED67E23F4C74585DAB509DF1B83610564545642B2B1EC463E18048FC23477C6B2AA \
035594ECD33791AF6AF4CBC2A1166ABA8D628C57E707F0B0E8707CAF91CD44BDB915E0296E0190D56D33D8DDE10B5B60377838973C1D943C22ED335E"),
                
-	    SHEX("26B4E5C4FA85CB33359450E7F7158FB6A0739984565E9D9EBE6AD65B118296E9C1098C11541C871EB1B89853F1FA73AD8702EBF4FC9BE4D0AB057E4391DF964E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 141 octets */
-	    SHEX("2167F02118CC62043E9091A647CADBED95611A521FE0D64E8518F16C808AB297725598AE29 \
6880A773607A798F7C3CFCE80D251EBEC6885015F9ABF7EAABAE46798F82CB5926DE5C23F44A3F9F9534B3 \
C6F405B5364C2F8A8BDC5CA49C749BED8CE4BA48897062AE8424CA6DDE5F55C0E42A95D1E292CA54FB46A84FBC9CD87F2D0C9E7448DE3043AE22FDD229"),
                
-	    SHEX("913BBA5C0C13CC49D8310014CF5AF1B63BA3D5DB8A27699FCFC573688F0E826FB5A7B5D10D3A1DE693AA66E08C0915E7278F61B5FA30F1263B134F016F74841F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 142 octets */
-	    SHEX("94B7FA0BC1C44E949B1D7617D31B4720CBE7CA57C6FA4F4094D4761567E389ECC64F6968E4 \
064DF70DF836A47D0C713336B5028B35930D29EB7A7F9A5AF9AD5CF441745BAEC9BB014CEEFF5A41BA5C1C \
E085FEB980BAB9CF79F2158E03EF7E63E29C38D7816A84D4F71E0F548B7FC316085AE38A060FF9B8DEC36F91AD9EBC0A5B6C338CBB8F6659D342A24368CF"),
                
-	    SHEX("E5D53E81866283179012D9239340B0CBFB8D7AEBCE0C824DC6653A652BB1B54E0883991BE2C3E39AD111A7B24E95DAF6F7D9A379D884D64F9C2AFD645E1DB5E2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 143 octets */
-	    SHEX("EA40E83CB18B3A242C1ECC6CCD0B7853A439DAB2C569CFC6DC38A19F5C90ACBF76AEF9EA37 \
42FF3B54EF7D36EB7CE4FF1C9AB3BC119CFF6BE93C03E208783335C0AB8137BE5B10CDC66FF3F89A1BDDC6 \
A1EED74F504CBE7290690BB295A872B9E3FE2CEE9E6C67C41DB8EFD7D863CF10F840FE618E7936DA3DCA5CA6DF933F24F6954BA0801A1294CD8D7E66DFAFEC"),
                
-	    SHEX("5DA83B7E221933CD67FA2AF8C9934DB74CE822212C99E0EE01F5220B4FE1E9B0388E42E328A1D174E6368F5773853042543A9B493A94B625980B73DF3F3FCCBB"));
                
-  test_hash(&amp;nettle_sha3_512, /* 144 octets */
-	    SHEX("157D5B7E4507F66D9A267476D33831E7BB768D4D04CC3438DA12F9010263EA5FCAFBDE2579 \
DB2F6B58F911D593D5F79FB05FE3596E3FA80FF2F761D1B0E57080055C118C53E53CDB63055261D7C9B2B3 \
9BD90ACC32520CBBDBDA2C4FD8856DBCEE173132A2679198DAF83007A9B5C51511AE49766C792A29520388444EBEFE28256FB33D4260439CBA73A9479EE00C63"),
                
-	    SHEX("72DE9184BEB5C6A37EA2C395734D0D5412991A57CFFCC13FF9B5FA0F2046EE87C61811FE8EF2470239D5066C220173DE5EBE41885ED8ACAE397FB395E6CA9AEE"));
                
-  test_hash(&amp;nettle_sha3_512, /* 145 octets */
-	    SHEX("836B34B515476F613FE447A4E0C3F3B8F20910AC89A3977055C960D2D5D2B72BD8ACC715A9 \
035321B86703A411DDE0466D58A59769672AA60AD587B8481DE4BBA552A1645779789501EC53D540B90482 \
1F32B0BD1855B04E4848F9F8CFE9EBD8911BE95781A759D7AD9724A7102DBE576776B7C632BC39B9B5E19057E226552A5994C1DBB3B5C7871A11F5537011044C53"),
                
-	    SHEX("B678FA7655584970DEDBBC73A16D7840935B104D06DCB468DDD9814D6CF443FA6F9245824DBFF3AB5FFFEF24B29CB2978796F37E7B49B1682D59F79E3C169E81"));
                
-  test_hash(&amp;nettle_sha3_512, /* 146 octets */
-	    SHEX("CC7784A4912A7AB5AD3620AAB29BA87077CD3CB83636ADC9F3DC94F51EDF521B2161EF108F \
21A0A298557981C0E53CE6CED45BDF782C1EF200D29BAB81DD6460586964EDAB7CEBDBBEC75FD7925060F7 \
DA2B853B2B089588FA0F8C16EC6498B14C55DCEE335CB3A91D698E4D393AB8E8EAC0825F8ADEBEEE196DF41205C011674E53426CAA453F8DE1CBB57932B0B741D4C6"),
                
-	    SHEX("66C64D5B0585DD8C40BECD456E4B0188061AE8059F03E79FE04C40925442BA93B052F52087B30BDBFD4816BBD148696D4FA6C61F216253D7AC178B39EC44C770"));
                
-  test_hash(&amp;nettle_sha3_512, /* 147 octets */
-	    SHEX("7639B461FFF270B2455AC1D1AFCE782944AEA5E9087EB4A39EB96BB5C3BAAF0E868C8526D3 \
404F9405E79E77BFAC5FFB89BF1957B523E17D341D7323C302EA7083872DD5E8705694ACDDA36D5A1B895A \
AA16ECA6104C82688532C8BFE1790B5DC9F4EC5FE95BAED37E1D287BE710431F1E5E8EE105BC42ED37D74B1E55984BF1C09FE6A1FA13EF3B96FAEAED6A2A1950A12153"),
                
-	    SHEX("A7BD506DB9C0509AD47413AF4B0E3948B47C18278F15F5B19FBB0B76E2C1C1F19DB9438528EB6D87B0B4A509567DB39F32641E2944365780914296CF3E48CECF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 148 octets */
-	    SHEX("EB6513FC61B30CFBA58D4D7E80F94D14589090CF1D80B1DF2E68088DC6104959BA0D583D58 \
5E9578AB0AEC0CF36C48435EB52ED9AB4BBCE7A5ABE679C97AE2DBE35E8CC1D45B06DDA3CF418665C57CBE \
E4BBB47FA4CAF78F4EE656FEC237FE4EEBBAFA206E1EF2BD0EE4AE71BD0E9B2F54F91DAADF1FEBFD7032381D636B733DCB3BF76FB14E23AFF1F68ED3DBCF75C9B99C6F26"),
                
-	    SHEX("2E681F9DDBD7C77EAB0D225E2AD1F72256BE239DF25933BCD6CEDD757269B35E2A5352B3298A4CDA0542FF7D3ADD2B0CF42F10FBE05A67C8763D54A78A43AEA7"));
                
-  test_hash(&amp;nettle_sha3_512, /* 149 octets */
-	    SHEX("1594D74BF5DDE444265D4C04DAD9721FF3E34CBF622DAF341FE16B96431F6C4DF1F760D34F \
296EB97D98D560AD5286FEC4DCE1724F20B54FD7DF51D4BF137ADD656C80546FB1BF516D62EE82BAA99291 \
0EF4CC18B70F3F8698276FCFB44E0EC546C2C39CFD8EE91034FF9303058B4252462F86C823EB15BF481E6B79CC3A02218595B3658E8B37382BD5048EAED5FD02C37944E73B"),
                
-	    SHEX("FD9BE24763F682043243525E5E0780534A82AD5E83B65EB4ACAF5353313A4CC7C5EEA9DA141DE570232CB4126287E5C77657CA8D6A16B5BE53F470343E722FD6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 150 octets */
-	    SHEX("4CFA1278903026F66FEDD41374558BE1B585D03C5C55DAC94361DF286D4BD39C7CB8037ED3 \
B267B07C346626449D0CC5B0DD2CF221F7E4C3449A4BE99985D2D5E67BFF2923357DDEAB5ABCB4619F3A3A \
57B2CF928A022EB27676C6CF805689004FCA4D41EA6C2D0A4789C7605F7BB838DD883B3AD3E6027E775BCF262881428099C7FFF95B14C095EA130E0B9938A5E22FC52650F591"),
                
-	    SHEX("14EA33BB33FDF0426E0DFB12DE1C613BA97141454C8971BCCE25C6D87A6C2403CCFAD1E8A6C15754C3CC5AC1718B7F7F1EC003C1B98D70968C5DBB95540B4A17"));
                
-  test_hash(&amp;nettle_sha3_512, /* 151 octets */
-	    SHEX("D3E65CB92CFA79662F6AF493D696A07CCF32AAADCCEFF06E73E8D9F6F909209E66715D6E97 \
8788C49EFB9087B170ECF3AA86D2D4D1A065AE0EFC8924F365D676B3CB9E2BEC918FD96D0B43DEE83727C9 \
A93BF56CA2B2E59ADBA85696546A815067FC7A78039629D4948D157E7B0D826D1BF8E81237BAB7321312FDAA4D521744F988DB6FDF04549D0FDCA393D639C729AF716E9C8BBA48"),
                
-	    SHEX("3B4B395514E0CAB04FC9F9D6C358006CE06C93831E8948FB9BD2A863F3FA064E78EB57C76DD2D058D09AB3D105C28C2DACAEBD4A473F1FA023053CC15366082F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 152 octets */
-	    SHEX("842CC583504539622D7F71E7E31863A2B885C56A0BA62DB4C2A3F2FD12E79660DC7205CA29 \
A0DC0A87DB4DC62EE47A41DB36B9DDB3293B9AC4BAAE7DF5C6E7201E17F717AB56E12CAD476BE49608AD2D \
50309E7D48D2D8DE4FA58AC3CFEAFEEE48C0A9EEC88498E3EFC51F54D300D828DDDCCB9D0B06DD021A29CF5CB5B2506915BEB8A11998B8B886E0F9B7A80E97D91A7D01270F9A7717"),
                
-	    SHEX("2D7D28C4311E0424D71E7F9D267A2E048AA175455FCB724CF0B13DEBF448B59B0F28265B0F010F4E4F4065004904A7C2687A5A1B30AB593BC44F698DFF5DDE33"));
                
-  test_hash(&amp;nettle_sha3_512, /* 153 octets */
-	    SHEX("6C4B0A0719573E57248661E98FEBE326571F9A1CA813D3638531AE28B4860F23C3A3A8AC1C \
250034A660E2D71E16D3ACC4BF9CE215C6F15B1C0FC7E77D3D27157E66DA9CEEC9258F8F2BF9E02B4AC937 \
93DD6E29E307EDE3695A0DF63CBDC0FC66FB770813EB149CA2A916911BEE4902C47C7802E69E405FE3C04CEB5522792A5503FA829F707272226621F7C488A7698C0D69AA561BE9F378"),
                
-	    SHEX("CB665EC69ABD75743C8713034E9E41736F8C1CE2C77A8518E50388C411E6284D9AADCD4D3BD5A9EB74672325E41E8A67ACF380D1E8A61684F0E501F5663A031D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 154 octets */
-	    SHEX("51B7DBB7CE2FFEB427A91CCFE5218FD40F9E0B7E24756D4C47CD55606008BDC27D16400933 \
906FD9F30EFFDD4880022D081155342AF3FB6CD53672AB7FB5B3A3BCBE47BE1FD3A2278CAE8A5FD61C1433 \
F7D350675DD21803746CADCA574130F01200024C6340AB0CC2CF74F2234669F34E9009EF2EB94823D62B31407F4BA46F1A1EEC41641E84D77727B59E746B8A671BEF936F05BE820759FA"),
                
-	    SHEX("4515A104FC68094D244B234D9DC06A0243B71D419D29A95C46E3CBA6F51E121ABE049B34535DB3CCBF2AD68D83FC36331F615B3E33DEB39A3381DFBCB798FE4D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 155 octets */
-	    SHEX("83599D93F5561E821BD01A472386BC2FF4EFBD4AED60D5821E84AAE74D8071029810F5E286 \
F8F17651CD27DA07B1EB4382F754CD1C95268783AD09220F5502840370D494BEB17124220F6AFCE91EC8A0 \
F55231F9652433E5CE3489B727716CF4AEBA7DCDA20CD29AA9A859201253F948DD94395ABA9E3852BD1D60DDA7AE5DC045B283DA006E1CBAD83CC13292A315DB5553305C628DD091146597"),
                
-	    SHEX("CEE3E60A49F7CAED9387F3EA699524C4CCAFD37C1A7E60D2F0AB037720649F108CCE8769F70B0C5D049359EEB821022F17C4B5F646B750E3070558EC127057F1"));
                
-  test_hash(&amp;nettle_sha3_512, /* 156 octets */
-	    SHEX("2BE9BF526C9D5A75D565DD11EF63B979D068659C7F026C08BEA4AF161D85A462D80E45040E \
91F4165C074C43AC661380311A8CBED59CC8E4C4518E80CD2C78AB1CABF66BFF83EAB3A801485503073109 \
50D034A6286C93A1ECE8929E6385C5E3BB6EA8A7C0FB6D6332E320E71CC4EB462A2A62E2BFE08F0CCAD93E61BEDB5DD0B786A728AB666F07E0576D189C92BF9FB20DCA49AC2D3956D47385E2"),
                
-	    SHEX("E6ED6F060906D1A772F47E83907507F88A151DE401ED79ACB56BE57C2596792DC0BC5A9DC1045E37C6A31DA1C36200214E4F5698AA2754EEB2CAECFC03BEC39D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 157 octets */
-	    SHEX("CA76D3A12595A817682617006848675547D3E8F50C2210F9AF906C0E7CE50B4460186FE704 \
57A9E879E79FD4D1A688C70A347361C847BA0DD6AA52936EAF8E58A1BE2F5C1C704E20146D366AEB3853BE \
D9DE9BEFE9569AC8AAEA37A9FB7139A1A1A7D5C748605A8DEFB297869EBEDD71D615A5DA23496D11E11ABBB126B206FA0A7797EE7DE117986012D0362DCEF775C2FE145ADA6BDA1CCB326BF644"),
                
-	    SHEX("9ED4EEE87F56AE2741E8E4D65623E4D1FA3AA111F64A85F66E99093BAED990FE1D788D6A4BE1A72A6615281EB45E1B6FB60AFEFDD93987F794084BDA962FAC7F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 158 octets */
-	    SHEX("F76B85DC67421025D64E93096D1D712B7BAF7FB001716F02D33B2160C2C882C310EF13A576 \
B1C2D30EF8F78EF8D2F465007109AAD93F74CB9E7D7BEF7C9590E8AF3B267C89C15DB238138C45833C98CC \
4A471A7802723EF4C744A853CF80A0C2568DD4ED58A2C9644806F42104CEE53628E5BDF7B63B0B338E931E31B87C24B146C6D040605567CEEF5960DF9E022CB469D4C787F4CBA3C544A1AC91F95F"),
                
-	    SHEX("23139BDD84E9F43A6CC615F0F036199328D39807BEC9E786D4251B83B30800F9DBE8EDC0B910FCD9D9F204C2DDD4D3B92BC26A0CFAABE764BFB90A1444733CD0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 159 octets */
-	    SHEX("25B8C9C032EA6BCD733FFC8718FBB2A503A4EA8F71DEA1176189F694304F0FF68E862A8197 \
B839957549EF243A5279FC2646BD4C009B6D1EDEBF24738197ABB4C992F6B1DC9BA891F570879ACCD5A6B1 \
8691A93C7D0A8D38F95B639C1DAEB48C4C2F15CCF5B9D508F8333C32DE78781B41850F261B855C4BEBCC125A380C54D501C5D3BD07E6B52102116088E53D76583B0161E2A58D0778F091206AABD5A1"),
                
-	    SHEX("EC69397000AED63CB7E86B4FB0BFD3DCEE8A6F6A1CFE01A324DA13484B73599FCD37AD392662D4C41D90BACA66BE4D6E3424EFD35D7FF4CB07CBDFBEBDDB7B50"));
                
-  test_hash(&amp;nettle_sha3_512, /* 160 octets */
-	    SHEX("21CFDC2A7CCB7F331B3D2EEFFF37E48AD9FA9C788C3F3C200E0173D99963E1CBCA93623B26 \
4E920394AE48BB4C3A5BB96FFBC8F0E53F30E22956ADABC2765F57FB761E147ECBF8567533DB6E50C8A1F8 \
94310A94EDF806DD8CA6A0E141C0FA7C9FAE6C6AE65F18C93A8529E6E5B553BF55F25BE2E80A9882BD37F145FECBEB3D447A3C4E46C21524CC55CDD62F521AB92A8BA72B897996C49BB273198B7B1C9E"),
                
-	    SHEX("2EA3EA00E6E9305CED0FC160E004265221306A2BE9613474126825AA3C3170AE07E5EA42F6B74F0B2C1BD2A6CD4D26EB1E04C67C9A4AFEFC1DD0CB57C2A9F4C7"));
                
-  test_hash(&amp;nettle_sha3_512, /* 161 octets */
-	    SHEX("4E452BA42127DCC956EF4F8F35DD68CB225FB73B5BC7E1EC5A898BBA2931563E74FAFF3B67 \
314F241EC49F4A7061E3BD0213AE826BAB380F1F14FAAB8B0EFDDD5FD1BB49373853A08F30553D5A55CCBB \
B8153DE4704F29CA2BDEEF0419468E05DD51557CCC80C0A96190BBCC4D77ECFF21C66BDF486459D427F986410F883A80A5BCC32C20F0478BB9A97A126FC5F95451E40F292A4614930D054C851ACD019CCF"),
                
-	    SHEX("6A7ADDB28F4F2C23CF0C264579FBA5F892E010689F837B84D006D91402FBFE9BA44B9126F8B5DE1EC6BBE194A3E3854235056A09901D18E8D6F1727DD430212A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 162 octets */
-	    SHEX("FA85671DF7DADF99A6FFEE97A3AB9991671F5629195049880497487867A6C446B60087FAC9 \
A0F2FCC8E3B24E97E42345B93B5F7D3691829D3F8CCD4BB36411B85FC2328EB0C51CB3151F70860AD3246C \
E0623A8DC8B3C49F958F8690F8E3860E71EB2B1479A5CEA0B3F8BEFD87ACAF5362435EAECCB52F38617BC6 \
                C5C2C6E269EAD1FBD69E941D4AD2012DA2C5B21BCFBF98E4A77AB2AF1F3FDA3233F046D38F1DC8"),
                
-	    SHEX("2C0EE8A165BF88C44C8601C6372E522DA9ECF42544DCDC098698F50DF8E70EB7440CAB2953BB490CD2A5E0887BEEAE3482192DA95E5098D3B318F16FC08D1E1E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 163 octets */
-	    SHEX("E90847AE6797FBC0B6B36D6E588C0A743D725788CA50B6D792352EA8294F5BA654A15366B8 \
E1B288D84F5178240827975A763BC45C7B0430E8A559DF4488505E009C63DA994F1403F407958203CEBB6E \
37D89C94A5EACF6039A327F6C4DBBC7A2A307D976AA39E41AF6537243FC218DFA6AB4DD817B6A397DF5CA6 \
                9107A9198799ED248641B63B42CB4C29BFDD7975AC96EDFC274AC562D0474C60347A078CE4C25E88"),
                
-	    SHEX("DDD4FF117231ECA0445EADA7C7F1D84686520DAA70E160C87DBBB3FB32BB9E2F4CC53DB5413D4E88DE18A0118570318BD6D0E5264D779339AC6F4F4A95546A53"));
                
-  test_hash(&amp;nettle_sha3_512, /* 164 octets */
-	    SHEX("F6D5C2B6C93954FC627602C00C4CA9A7D3ED12B27173F0B2C9B0E4A5939398A665E67E69D0 \
B12FB7E4CEB253E8083D1CEB724AC07F009F094E42F2D6F2129489E846EAFF0700A8D4453EF453A3EDDC18 \
F408C77A83275617FABC4EA3A2833AA73406C0E966276079D38E8E38539A70E194CC5513AAA457C699383F \
                D1900B1E72BDFB835D1FD321B37BA80549B078A49EA08152869A918CA57F5B54ED71E4FD3AC5C06729"),
                
-	    SHEX("A9744EFA42887DF292FC09DFEB885F1E801855DED09DC2F97CBFCBD019751878619DA1BC9573201C7CC050E2AA1D453E951366D81C188D329B3CB861C1D78F92"));
                
-  test_hash(&amp;nettle_sha3_512, /* 165 octets */
-	    SHEX("CF8562B1BED89892D67DDAAF3DEEB28246456E972326DBCDB5CF3FB289ACA01E68DA5D5989 \
6E3A6165358B071B304D6AB3D018944BE5049D5E0E2BB819ACF67A6006111089E6767132D72DD85BEDDCBB \
2D64496DB0CC92955AB4C6234F1EEA24F2D51483F2E209E4589BF9519FAC51B4D061E801125E605F8093BB \
6997BC163D551596FE4AB7CFAE8FB9A90F6980480CE0C229FD1675409BD788354DAF316240CFE0AF93EB"),
                
-	    SHEX("89CAE46246EFEDAD1147EB1868C23A6BE54F6BAC75F0C98A9AEFC6BF3CCB89AE012F2E88A9C838B55E57B232CB3C80BC3C2E9FB3FC9768C6226E93284E208BF2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 166 octets */
-	    SHEX("2ACE31ABB0A2E3267944D2F75E1559985DB7354C6E605F18DC8470423FCA30B7331D9B33C4 \
A4326783D1CAAE1B4F07060EFF978E4746BF0C7E30CD61040BD5EC2746B29863EB7F103EBDA614C4291A80 \
5B6A4C8214230564A0557BC7102E0BD3ED23719252F7435D64D210EE2AAFC585BE903FA41E1968C50FD5D5 \
367926DF7A05E3A42CF07E656FF92DE73B036CF8B19898C0CB34557C0C12C2D8B84E91181AF467BC75A9D1"),
                
-	    SHEX("E80A63FAF248AE762D13887AFE8E1954F97327EDD9641CE563F4148F9796669827B3A12B06EBD710D4171B86E21BC13360A541845354E0F4934E6FBBD7ACBF2D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 167 octets */
-	    SHEX("0D8D09AED19F1013969CE5E7EB92F83A209AE76BE31C754844EA9116CEB39A22EBB6003017 \
BBCF26555FA6624185187DB8F0CB3564B8B1C06BF685D47F3286EDA20B83358F599D2044BBF0583FAB8D78 \
F854FE0A596183230C5EF8E54426750EAF2CC4E29D3BDD037E734D863C2BD9789B4C243096138F7672C232 \
314EFFDFC6513427E2DA76916B5248933BE312EB5DDE4CF70804FB258AC5FB82D58D08177AC6F4756017FFF5"),
                
-	    SHEX("09C10C4818A6821C170D6780D006F7E853E30FE2D9A4E96545673704EC0A1A3E356375715994E1AC1D8CB0E56DBDB2F77DC558ED228FB56EE62217E63455FD0B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 168 octets */
-	    SHEX("C3236B73DEB7662BF3F3DAA58F137B358BA610560EF7455785A9BEFDB035A066E90704F929 \
BD9689CEF0CE3BDA5ACF4480BCEB8D09D10B098AD8500D9B6071DFC3A14AF6C77511D81E3AA8844986C3BE \
A6F469F9E02194C92868CD5F51646256798FF0424954C1434BDFED9FACB390B07D342E992936E0F88BFD0E \
884A0DDB679D0547CCDEC6384285A45429D115AC7D235A717242021D1DC35641F5F0A48E8445DBA58E6CB2C8EA"),
                
-	    SHEX("D1CAB5979EB7F53C97DCA5D725D8B33008906D7759FD3EBB8401EE2FFF01DB895495A0A062D47F251BC3FC13988607C6798969D213C941EFC152E7DB1DA68E72"));
                
-  test_hash(&amp;nettle_sha3_512, /* 169 octets */
-	    SHEX("B39FEB8283EADC63E8184B51DF5AE3FD41AAC8A963BB0BE1CD08AA5867D8D910C669221E73 \
243360646F6553D1CA05A84E8DC0DE05B6419EC349CA994480193D01C92525F3FB3DCEFB08AFC6D26947BD \
BBFD85193F53B50609C6140905C53A6686B58E53A319A57B962331EDE98149AF3DE3118A819DA4D76706A0 \
424B4E1D2910B0ED26AF61D150EBCB46595D4266A0BD7F651BA47D0C7F179CA28545007D92E8419D48FDFBD744CE"),
                
-	    SHEX("96AD163869AE2FFDB89B96F4DC700ECE27D1F4DAAFBC5FB81A8E9513C6EA5E2B6A8BCCF4E49A294AF326F872740661629AB780581155810E492424C24F8D1DD3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 170 octets */
-	    SHEX("A983D54F503803E8C7999F4EDBBE82E9084F422143A932DDDDC47A17B0B7564A7F37A99D07 \
86E99476428D29E29D3C197A72BFAB1342C12A0FC4787FD7017D7A6174049EA43B5779169EF7472BDBBD94 \
1DCB82FC73AAC45A8A94C9F2BD3477F61FD3B796F02A1B8264A214C6FEA74B7051B226C722099EC7883A46 \
2B83B6AFDD4009248B8A237F605FE5A08FE7D8B45321421EBBA67BD70A0B00DDBF94BAAB7F359D5D1EEA105F28DCFB"),
                
-	    SHEX("FD2E7A6E11E5D00278099EAF403054D617ACAC5BD3D0A4908191782C89F9217A3F0118BC2B284FDBCE803F66B78DD795EB18DC16BA85E19CB6393DC56C06ECCA"));
                
-  test_hash(&amp;nettle_sha3_512, /* 171 octets */
-	    SHEX("E4D1C1897A0A866CE564635B74222F9696BF2C7F640DD78D7E2ACA66E1B61C642BB03EA753 \
6AAE597811E9BF4A7B453EDE31F97B46A5F0EF51A071A2B3918DF16B152519AE3776F9F1EDAB4C2A377C32 \
92E96408359D3613844D5EB393000283D5AD3401A318B12FD1474B8612F2BB50FB6A8B9E023A54D7DDE28C \
43D6D8854C8D9D1155935C199811DBFC87E9E0072E90EB88681CC7529714F8FB8A2C9D88567ADFB974EE205A9BF7B848"),
                
-	    SHEX("AE53776D969A9B285641998A9F2C70CA71856C956A3C430A32A1E03A8E08D544F16511A27CFA59F6B8275A2357F8EFA6544B1CD0C00A9460F47954A146429E49"));
                
-  test_hash(&amp;nettle_sha3_512, /* 172 octets */
-	    SHEX("B10C59723E3DCADD6D75DF87D0A1580E73133A9B7D00CB95EC19F5547027323BE75158B11F \
80B6E142C6A78531886D9047B08E551E75E6261E79785366D7024BD7CD9CF322D9BE7D57FB661069F2481C \
7BB759CD71B4B36CA2BC2DF6D3A328FAEBDB995A9794A8D72155ED551A1F87C80BF6059B43FC764900B18A \
1C2441F7487743CF84E565F61F8DD2ECE6B6CCC9444049197AAAF53E926FBEE3BFCA8BE588EC77F29D211BE89DE18B15F6"),
                
-	    SHEX("D4748C8E17F4117BF2BF71557ABB559247552126C36192C5DF5C6C3E307D879B703C3FCD7099DDAB243E2F1D5AE5066990A7B38D3F2CD7FB115AA6D135E7261D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 173 octets */
-	    SHEX("DB11F609BABA7B0CA634926B1DD539C8CBADA24967D7ADD4D9876F77C2D80C0F4DCEFBD712 \
1548373582705CCA2495BD2A43716FE64ED26D059CFB566B3364BD49EE0717BDD9810DD14D8FAD80DBBDC4 \
CAFB37CC60FB0FE2A80FB4541B8CA9D59DCE457738A9D3D8F641AF8C3FD6DA162DC16FC01AAC527A4A0255 \
B4D231C0BE50F44F0DB0B713AF03D968FE7F0F61ED0824C55C4B5265548FEBD6AAD5C5EEDF63EFE793489C39B8FD29D104CE"),
                
-	    SHEX("D8FF0481A63890F0E5A536EBBA2F253FA2CFA19C0F353587AF4BDC3190E4F8F54D17D665E8B2011121D444BFADFFF3E192D97FA03B849D63F36DB20F4CF88A74"));
                
-  test_hash(&amp;nettle_sha3_512, /* 174 octets */
-	    SHEX("BEBD4F1A84FC8B15E4452A54BD02D69E304B7F32616AADD90537937106AE4E28DE9D8AAB02 \
D19BC3E2FDE1D651559E296453E4DBA94370A14DBBB2D1D4E2022302EE90E208321EFCD8528AD89E46DC83 \
9EA9DF618EA8394A6BFF308E7726BAE0C19BCD4BE52DA6258E2EF4E96AA21244429F49EF5CB486D7FF35CA \
C1BACB7E95711944BCCB2AB34700D42D1EB38B5D536B947348A458EDE3DC6BD6EC547B1B0CAE5B257BE36A7124E1060C170FFA"),
                
-	    SHEX("52D771B5016C6B1B93D3BF6A13F718A7B4741D528798609308B54CEA6037862D923751FDDCE10580A7D6431BF208DF17C1B825F7C7401CCBD6D806B744241ACF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 175 octets */
-	    SHEX("5ACA56A03A13784BDC3289D9364F79E2A85C12276B49B92DB0ADAA4F206D5028F213F678C3 \
510E111F9DC4C1C1F8B6ACB17A6413AA227607C515C62A733817BA5E762CC6748E7E0D6872C984D723C9BB \
3B117EB8963185300A80BFA65CDE495D70A46C44858605FCCBED086C2B45CEF963D33294DBE9706B13AF22 \
F1B7C4CD5A001CFEC251FBA18E722C6E1C4B1166918B4F6F48A98B64B3C07FC86A6B17A6D0480AB79D4E6415B520F1C484D675B1"),
                
-	    SHEX("36D472A8AE13D1E70E1FD275117FFE34063BEFCCF6706FAB0816E1B81F7FE7F2DDB2A122F1F52C9950644659430F81BCEDAD5D833DF4814CF60AE6C542CC4478"));
                
-  test_hash(&amp;nettle_sha3_512, /* 176 octets */
-	    SHEX("A5AAD0E4646A32C85CFCAC73F02FC5300F1982FABB2F2179E28303E447854094CDFC854310 \
E5C0F60993CEFF54D84D6B46323D930ADB07C17599B35B505F09E784BCA5985E0172257797FB53649E2E97 \
23EFD16865C31B5C3D5113B58BB0BFC8920FABDDA086D7537E66D709D050BD14D0C960873F156FAD5B3D38 \
40CDFCDC9BE6AF519DB262A27F40896AB25CC39F96984D650611C0D5A3080D5B3A1BF186ABD42956588B3B58CD948970D298776060"),
                
-	    SHEX("E504AD7F33D65B8D3487B28805D478778C901C0AFF5F889AE95E2919B4F431A80116A8993469E822895F3C21A41D67AFDA93A5B29B6250F76335A76FE8919274"));
                
-  test_hash(&amp;nettle_sha3_512, /* 177 octets */
-	    SHEX("06CBBE67E94A978203EAD6C057A1A5B098478B4B4CBEF5A97E93C8E42F5572713575FC2A88 \
4531D7622F8F879387A859A80F10EF02708CD8F7413AB385AFC357678B9578C0EBF641EF076A1A30F1F753 \
79E9DCB2A885BDD295905EE80C0168A62A9597D10CF12DD2D8CEE46645C7E5A141F6E0E23AA482ABE5661C \
16E69EF1E28371E2E236C359BA4E92C25626A7B7FF13F6EA4AE906E1CFE163E91719B1F750A96CBDE5FBC953D9E576CD216AFC90323A"),
                
-	    SHEX("1DCA53BE0A34114447D1C1443B92B69DFDED705956EAE60BBAB39178CCB11F526A302AAE83720652EF4C5DD450A3647DF7B77C4664717D935B4F5B20F206FEFE"));
                
-  test_hash(&amp;nettle_sha3_512, /* 178 octets */
-	    SHEX("F1C528CF7739874707D4D8AD5B98F7C77169DE0B57188DF233B2DC8A5B31EDA5DB4291DD9F \
68E6BAD37B8D7F6C9C0044B3BF74BBC3D7D1798E138709B0D75E7C593D3CCCDC1B20C7174B4E692ADD820A \
CE262D45CCFAE2077E878796347168060A162ECCA8C38C1A88350BD63BB539134F700FD4ADDD5959E25533 \
7DAA06BC86358FABCBEFDFB5BC889783D843C08AADC6C4F6C36F65F156E851C9A0F917E4A367B5AD93D874812A1DE6A7B93CD53AD97232"),
                
-	    SHEX("CB1B03B180E04021E0099050EB6B7EB9092C5BD5C445E9D31EE39C724F038E9F619A96D3A2812CA7F208FEB2D074C3F817262F7504705623E635B9F273E37A59"));
                
-  test_hash(&amp;nettle_sha3_512, /* 179 octets */
-	    SHEX("9D9F3A7ECD51B41F6572FD0D0881E30390DFB780991DAE7DB3B47619134718E6F987810E54 \
2619DFAA7B505C76B7350C6432D8BF1CFEBDF1069B90A35F0D04CBDF130B0DFC7875F4A4E62CDB8E525AAD \
D7CE842520A482AC18F09442D78305FE85A74E39E760A4837482ED2F437DD13B2EC1042AFCF9DECDC3E877 \
E50FF4106AD10A525230D11920324A81094DA31DEAB6476AA42F20C84843CFC1C58545EE80352BDD3740DD6A16792AE2D86F11641BB717C2"),
                
-	    SHEX("F0482F098B93624BCDE1AAB58097198649A8DC84421826D1C1011AD41B948384C8ED5A97C64C134B38A0075812A35F9CE3CB200972C2ECDFC408714139B9BFF0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 180 octets */
-	    SHEX("5179888724819FBAD3AFA927D3577796660E6A81C52D98E9303261D5A4A83232F6F758934D \
50AA83FF9E20A5926DFEBAAC49529D006EB923C5AE5048ED544EC471ED7191EDF46363383824F915769B3E \
688094C682B02151E5EE01E510B431C8865AFF8B6B6F2F59CB6D129DA79E97C6D2B8FA6C6DA3F603199D2D \
1BCAB547682A81CD6CF65F6551121391D78BCC23B5BD0E922EC6D8BF97C952E84DD28AEF909ABA31EDB903B28FBFC33B7703CD996215A11238"),
                
-	    SHEX("A3188426CEA0C18CB638BCC45C4337C40BE41F6E03CD2D7C4FEE26025C5CA281CFBB3AD1554D45EDC2EB03E2EBE3DE02F57D36D5B6A88A3C61A6AAEDE62180D0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 181 octets */
-	    SHEX("576EF3520D30B7A4899B8C0D5E359E45C5189ADD100E43BE429A02FB3DE5FF4F8FD0E79D96 \
63ACCA72CD29C94582B19292A557C5B1315297D168FBB54E9E2ECD13809C2B5FCE998EDC6570545E1499DB \
E7FB74D47CD7F35823B212B05BF3F5A79CAA34224FDD670D335FCB106F5D92C3946F44D3AFCBAE2E41AC55 \
4D8E6759F332B76BE89A0324AA12C5482D1EA3EE89DED4936F3E3C080436F539FA137E74C6D3389BDF5A45074C47BC7B20B0948407A66D855E2F"),
                
-	    SHEX("0B14693E6320668D64EBB3BF6EEB81AAFCDB7320ECDE80A245786D1B0A808A15C717DC8E8813BF64BF4AA57C29C33E913D6CE1879E52E1919FB83E4A208EDAA4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 182 octets */
-	    SHEX("0DF2152FA4F4357C8741529DD77E783925D3D76E95BAFA2B542A2C33F3D1D117D159CF473F \
82310356FEE4C90A9E505E70F8F24859656368BA09381FA245EB6C3D763F3093F0C89B972E66B53D59406D \
9F01AEA07F8B3B615CAC4EE4D05F542E7D0DAB45D67CCCCD3A606CCBEB31EA1FA7005BA07176E60DAB7D78 \
F6810EF086F42F08E595F0EC217372B98970CC6321576D92CE38F7C397A403BADA1548D205C343AC09DECA86325373C3B76D9F32028FEA8EB32515"),
                
-	    SHEX("A9ABC3F554C1E717935D28C28E7C26AA9DC5BD6D7B02ED7DC6AFE21A0EA027A8801AE076F2872D08635EE81420711862EDC4E448C85513289438B3C8BE456B5B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 183 octets */
-	    SHEX("3E15350D87D6EBB5C8AD99D42515CFE17980933C7A8F6B8BBBF0A63728CEFAAD2052623C0B \
D5931839112A48633FB3C2004E0749C87A41B26A8B48945539D1FF41A4B269462FD199BFECD45374756F55 \
A9116E92093AC99451AEFB2AF9FD32D6D7F5FBC7F7A540D5097C096EBC3B3A721541DE073A1CC02F7FB0FB \
1B9327FB0B1218CA49C9487AB5396622A13AE546C97ABDEF6B56380DDA7012A8384091B6656D0AB272D363CEA78163FF765CDD13AB1738B940D16CAE"),
                
-	    SHEX("04DD83D20F58E854D857F24720C50A4B5F83DBC8CABD460D379417CD4813772AA85591B90462F34DB3FAA4DCAE335FB1252BF41162E24975A0DBD308C41A4A6B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 184 octets */
-	    SHEX("C38D6B0B757CB552BE40940ECE0009EF3B0B59307C1451686F1A22702922800D58BCE7A636 \
C1727EE547C01B214779E898FC0E560F8AE7F61BEF4D75EAA696B921FD6B735D171535E9EDD267C192B998 \
80C87997711002009095D8A7A437E258104A41A505E5EF71E5613DDD2008195F0C574E6BA3FE40099CFA11 \
6E5F1A2FA8A6DA04BADCB4E2D5D0DE31FDC4800891C45781A0AAC7C907B56D631FCA5CE8B2CDE620D11D1777ED9FA603541DE794DDC5758FCD5FAD78C0"),
                
-	    SHEX("CE76B25C928CB75C09C0674E8FCD22089654182CD3D84B85CC44B186A8B1A7CC1BB66F389DA6D744A24A7B02BF5C85542D1BA8EF0DB4A86D2FC394471B396519"));
                
-  test_hash(&amp;nettle_sha3_512, /* 185 octets */
-	    SHEX("8D2DE3F0B37A6385C90739805B170057F091CD0C7A0BC951540F26A5A75B3E694631BB64C7 \
635EED316F51318E9D8DE13C70A2ABA04A14836855F35E480528B776D0A1E8A23B547C8B8D6A0D09B241D3 \
BE9377160CCA4E6793D00A515DC2992CB7FC741DACA171431DA99CCE6F7789F129E2AC5CF65B40D703035C \
D2185BB936C82002DAF8CBC27A7A9E554B06196630446A6F0A14BA155ED26D95BD627B7205C072D02B60DB0FD7E49EA058C2E0BA202DAFF0DE91E845CF79"),
                
-	    SHEX("02D1671981C2E85D0455EE85F41B8E9C32B1C80221DD432B8BCB5FCEFE0996F32FE9FC3EEB3F1F557AE1632750B92D05239AF857C42D59A3DAEB9629E1158BEC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 186 octets */
-	    SHEX("C464BBDAD275C50DCD983B65AD1019B9FF85A1E71C807F3204BB2C921DC31FBCD8C5FC4586 \
8AE9EF85B6C9B83BBA2A5A822201ED68586EC5EC27FB2857A5D1A2D09D09115F22DCC39FE61F5E1BA0FF6E \
8B4ACB4C6DA748BE7F3F0839739394FF7FA8E39F7F7E84A33C3866875C01BCB1263C9405D91908E9E0B50E \
7459FABB63D8C6BBB73D8E3483C099B55BC30FF092FF68B6ADEDFD477D63570C9F5515847F36E24BA0B705557130CEC57EBAD1D0B31A378E91894EE26E3A04"),
                
-	    SHEX("6B8BC6211FE5001E07B7D20E0C49D314211E3893A39DA241B8839BB3A494F9A2FD8561009D22CCA1330A69362B386E715F1DBE6291DBEECFADF196DA47E53198"));
                
-  test_hash(&amp;nettle_sha3_512, /* 187 octets */
-	    SHEX("8B8D68BB8A75732FE272815A68A1C9C5AA31B41DEDC8493E76525D1D013D33CEBD9E21A5BB \
95DB2616976A8C07FCF411F5F6BC6F7E0B57ACA78CC2790A6F9B898858AC9C79B165FF24E66677531E39F5 \
72BE5D81EB3264524181115F32780257BFB9AEEC6AF12AF28E587CAC068A1A2953B59AD680F4C245B2E3EC \
36F59940D37E1D3DB38E13EDB29B5C0F404F6FF87F80FC8BE7A225FF22FBB9C8B6B1D7330C57840D24BC75B06B80D30DAD6806544D510AF6C4785E823AC3E0B8"),
                
-	    SHEX("D00E919DAFFF3D5E51AD3A3046F5E59D64B69CBCDA223CB28BC370201D2C722BAE74DFE0086B0EB47BDCB62FABEE870C3340D46E55D8CFEDF2DD3CED8A8DB3F2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 188 octets */
-	    SHEX("6B018710446F368E7421F1BC0CCF562D9C1843846BC8D98D1C9BF7D9D6FCB48BFC3BF83B36 \
D44C4FA93430AF75CD190BDE36A7F92F867F58A803900DF8018150384D85D82132F123006AC2AEBA58E02A \
037FE6AFBD65ECA7C44977DD3DC74F48B6E7A1BFD5CC4DCF24E4D52E92BD4455848E4928B0EAC8B7476FE3 \
CC03E862AA4DFF4470DBFED6DE48E410F25096487ECFC32A27277F3F5023B2725ADE461B1355889554A8836C9CF53BD767F5737D55184EEA1AB3F53EDD0976C485"),
                
-	    SHEX("CF63F28F107A509A416F9A92C4E4DB4DBF00FB52C2E16D8BB9694E09F9142A904C34E1E960BD97B8CFB2C53E7660C79B841D1565CDAB83293234026A23A56D12"));
                
-  test_hash(&amp;nettle_sha3_512, /* 189 octets */
-	    SHEX("C9534A24714BD4BE37C88A3DA1082EDA7CABD154C309D7BD670DCCD95AA535594463058A29 \
F79031D6ECAA9F675D1211E9359BE82669A79C855EA8D89DD38C2C761DDD0EC0CE9E97597432E9A1BEAE06 \
2CDD71EDFDFD464119BE9E69D18A7A7FD7CE0E2106F0C8B0ABF4715E2CA48EF9F454DC203C96656653B727 \
083513F8EFB86E49C513BB758B3B052FE21F1C05BB33C37129D6CC81F1AEF6ADC45B0E8827A830FE545CF57D0955802C117D23CCB55EA28F95C0D8C2F9C5A242B33F"),
                
-	    SHEX("F21B8D45B6A857CE663C074C18CC54D914CDD5EB0D968E6153A5F70069345D205DDF4370EC473FC80B05F937D014C0A464582CB4A73B1B72041C5C99F576A41E"));
                
-  test_hash(&amp;nettle_sha3_512, /* 190 octets */
-	    SHEX("07906C87297B867ABF4576E9F3CC7F82F22B154AFCBF293B9319F1B0584DA6A40C27B32E0B \
1B7F412C4F1B82480E70A9235B12EC27090A5A33175A2BB28D8ADC475CEFE33F7803F8CE27967217381F02 \
E67A3B4F84A71F1C5228E0C2AD971373F6F672624FCEA8D1A9F85170FAD30FA0BBD25035C3B41A6175D467 \
998BD1215F6F3866F53847F9CF68EF3E2FBB54BC994DE2302B829C5EEA68EC441FCBAFD7D16AE4FE9FFF98BF00E5BC2AD54DD91FF9FDA4DD77B6C754A91955D1FBAAD0"),
                
-	    SHEX("92287F42AB1A2123669C4D35F18257D3A536445F0E4D2C801E99F8529CD9E2A79205982C280C7A6CDDDEF24CE960EC6CA9A35F590AEEBC40448C389E915FC4E0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 191 octets */
-	    SHEX("588E94B9054ABC2189DF69B8BA34341B77CDD528E7860E5DEFCAA79B0C9A452AD4B82AA306 \
BE84536EB7CEDCBE058D7B84A6AEF826B028B8A0271B69AC3605A9635EA9F5EA0AA700F3EB7835BC54611B \
922964300C953EFE7491E3677C2CEBE0822E956CD16433B02C68C4A23252C3F9E151A416B4963257B783E0 \
38F6B4D5C9F110F871652C7A649A7BCEDCBCCC6F2D0725BB903CC196BA76C76AA9F10A190B1D1168993BAA9FFC96A1655216773458BEC72B0E39C9F2C121378FEAB4E76A"),
                
-	    SHEX("74A9D8F9F72908C7502D1C41212CD86CF4344721A6F02D390346F2BAEC6E6137421E6516C3235443BC2337B3A77630712A12F11B7BA24B2D7085499BA74BCB90"));
                
-  test_hash(&amp;nettle_sha3_512, /* 192 octets */
-	    SHEX("08959A7E4BAAE874928813364071194E2939772F20DB7C3157078987C557C2A6D5ABE68D52 \
0EEF3DC491692E1E21BCD880ADEBF63BB4213B50897FA005256ED41B5690F78F52855C8D9168A4B666FCE2 \
DA2B456D7A7E7C17AB5F2FB1EE90B79E698712E963715983FD07641AE4B4E9DC73203FAC1AE11FA1F8C794 \
1FCC82EAB247ADDB56E2638447E9D609E610B60CE086656AAEBF1DA3C8A231D7D94E2FD0AFE46B391FF14A72EAEB3F44AD4DF85866DEF43D4781A0B3578BC996C87970B132"),
                
-	    SHEX("7432861132E6894BB6AE5115398198317E12CC73C0C5DFC61CB189FF5AA9FB0D62224CBB1BFA8B105784405718E6F8E15E041DAD80D11AE507B33C15C6CAC824"));
                
-  test_hash(&amp;nettle_sha3_512, /* 193 octets */
-	    SHEX("CB2A234F45E2ECD5863895A451D389A369AAB99CFEF0D5C9FFCA1E6E63F763B5C14FB9B478 \
313C8E8C0EFEB3AC9500CF5FD93791B789E67EAC12FD038E2547CC8E0FC9DB591F33A1E4907C64A922DDA2 \
3EC9827310B306098554A4A78F050262DB5B545B159E1FF1DCA6EB734B872343B842C57EAFCFDA8405EEDB \
B48EF32E99696D135979235C3A05364E371C2D76F1902F1D83146DF9495C0A6C57D7BF9EE77E80F9787AEE27BE1FE126CDC9EF893A4A7DCBBC367E40FE4E1EE90B42EA25AF01"),
                
-	    SHEX("6AF4FF4C423051E3306ACE812E5CFA85532B73DEEF0DFE601D2630632389D0FAB2A109214D32508D2391775665B87A94D1DF29DB1214CB48DEC10DBD3D8CF591"));
                
-  test_hash(&amp;nettle_sha3_512, /* 194 octets */
-	    SHEX("D16BEADF02AB1D4DC6F88B8C4554C51E866DF830B89C06E786A5F8757E8909310AF51C840E \
FE8D20B35331F4355D80F73295974653DDD620CDDE4730FB6C8D0D2DCB2B45D92D4FBDB567C0A3E86BD1A8 \
A795AF26FBF29FC6C65941CDDB090FF7CD230AC5268AB4606FCCBA9EDED0A2B5D014EE0C34F0B2881AC036 \
E24E151BE89EEB6CD9A7A790AFCCFF234D7CB11B99EBF58CD0C589F20BDAC4F9F0E28F75E3E04E5B3DEBCE607A496D848D67FA7B49132C71B878FD5557E082A18ECA1FBDA94D4B"),
                
-	    SHEX("4648D263B608CF28CA65B28A361EBB00E0784C65AB1D55C46A785737B6C8D83DD52E3367D898921EA36DADA42D893800D0BFCF86554CDF5E7630D60A2E8EE29F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 195 octets */
-	    SHEX("8F65F6BC59A85705016E2BAE7FE57980DE3127E5AB275F573D334F73F8603106EC35530166 \
08EF2DD6E69B24BE0B7113BF6A760BA6E9CE1C48F9E186012CF96A1D4849D75DF5BB8315387FD78E9E153E \
76F8BA7EC6C8849810F59FB4BB9B004318210B37F1299526866F44059E017E22E96CBE418699D014C6EA01 \
C9F0038B10299884DBEC3199BB05ADC94E955A1533219C1115FED0E5F21228B071F40DD57C4240D98D37B73E412FE0FA4703120D7C0C67972ED233E5DEB300A22605472FA3A3BA86"),
                
-	    SHEX("DBD3732440010595AB26F84EFEB07732227A7B7B52D6FF339C7FF1B6442249202AE33A0AEF5167F5B0474D74A5B50CDB033D6C5C72894A3686FE6ECB36E357F3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 196 octets */
-	    SHEX("84891E52E0D451813210C3FD635B39A03A6B7A7317B221A7ABC270DFA946C42669AACBBBDF \
801E1584F330E28C729847EA14152BD637B3D0F2B38B4BD5BF9C791C58806281103A3EABBAEDE5E711E539 \
E6A8B2CF297CF351C078B4FA8F7F35CF61BEBF8814BF248A01D41E86C5715EA40C63F7375379A7EB1D78F2 \
7622FB468AB784AAABA4E534A6DFD1DF6FA15511341E725ED2E87F98737CCB7B6A6DFAE416477472B046BF1811187D151BFA9F7B2BF9ACDB23A3BE507CDF14CFDF517D2CB5FB9E4AB6"),
                
-	    SHEX("C24D4054110889290CBC40B82AD8599229D8E86E4CE76BDDBBB6F5386223512C9D7E00973C706442B2C80EDD20904067AF8E4E681AECBFADC6AA15A2EBFE7DDD"));
                
-  test_hash(&amp;nettle_sha3_512, /* 197 octets */
-	    SHEX("FDD7A9433A3B4AFABD7A3A5E3457E56DEBF78E84B7A0B0CA0E8C6D53BD0C2DAE31B2700C61 \
28334F43981BE3B213B1D7A118D59C7E6B6493A86F866A1635C12859CFB9AD17460A77B4522A5C1883C3D6 \
ACC86E6162667EC414E9A104AA892053A2B1D72165A855BACD8FAF8034A5DD9B716F47A0818C09BB6BAF22 \
AA503C06B4CA261F557761989D2AFBD88B6A678AD128AF68672107D0F1FC73C5CA740459297B3292B281E93BCEB761BDE7221C3A55708E5EC84472CDDCAA84ECF23723CC0991355C6280"),
                
-	    SHEX("4A6404D278A0BA70488C18D7D1861CDE26FD57D66A9AFFE74F1E646E616003A52FE42520504AC4ACE5CA6665CF9155F44ECAA05D55F80FE9794ADE17871C5728"));
                
-  test_hash(&amp;nettle_sha3_512, /* 198 octets */
-	    SHEX("70A40BFBEF92277A1AAD72F6B79D0177197C4EBD432668CFEC05D099ACCB651062B5DFF156 \
C0B27336687A94B26679CFDD9DAF7AD204338DD9C4D14114033A5C225BD11F217B5F4732DA167EE3F93926 \
2D4043FC9CBA92303B7B5E96AEA12ADDA64859DF4B86E9EE0B58E39091E6B188B408AC94E1294A8911245E \
E361E60E601EFF58D1D37639F3753BEC80EBB4EFDE25817436076623FC65415FE51D1B0280366D12C554D86743F3C3B6572E400361A60726131441BA493A83FBE9AFDA90F7AF1AE717238D"),
                
-	    SHEX("FFFD1B1E31377DFF00B492295BCCC735733B021F47BB4AFBA6549EA6C1BA3832E8587099AD0CC216AF5899AC683EB7C246871E21C30FEEF9BCEEDFC78D0C966C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 199 octets */
-	    SHEX("74356E449F4BF8644F77B14F4D67CB6BD9C1F5AE357621D5B8147E562B65C66585CAF2E491 \
B48529A01A34D226D436959153815380D5689E30B35357CDAC6E08D3F2B0E88E200600D62BD9F5EAF488DF \
86A4470EA227006182E44809009868C4C280C43D7D64A5268FA719074960087B3A6ABC837882F882C83783 \
4535929389A12B2C78187E2EA07EF8B8EEF27DC85002C3AE35F1A50BEE6A1C48BA7E175F3316670B27983472AA6A61EED0A683A39EE323080620EA44A9F74411AE5CE99030528F9AB49C79F2"),
                
-	    SHEX("33C8F40E1BD1EB1A3A70D2071D27460EF0F6B2D3ECE373743842D6B928F3771E4B7446A9ECFBBF552C064F6B26095401097581C38B95E9551119A1FDCB3D58E7"));
                
-  test_hash(&amp;nettle_sha3_512, /* 200 octets */
-	    SHEX("8C3798E51BC68482D7337D3ABB75DC9FFE860714A9AD73551E120059860DDE24AB87327222 \
B64CF774415A70F724CDF270DE3FE47DDA07B61C9EF2A3551F45A5584860248FABDE676E1CD75F6355AA3E \
AEABE3B51DC813D9FB2EAA4F0F1D9F834D7CAD9C7C695AE84B329385BC0BEF895B9F1EDF44A03D4B410CC2 \
3A79A6B62E4F346A5E8DD851C2857995DDBF5B2D717AEB847310E1F6A46AC3D26A7F9B44985AF656D2B7C9406E8A9E8F47DCB4EF6B83CAACF9AEFB6118BFCFF7E44BEF6937EBDDC89186839B77"),
                
-	    SHEX("2A11CB6921EA662A39DDEE7982E3CF5B317195661D5505AD04D11EE23E178ED65F3E06A7F096F4EAF1FF6A09239CF5A0A39DC9F4C92AF63FDF7211E1CF467653"));
                
-  test_hash(&amp;nettle_sha3_512, /* 201 octets */
-	    SHEX("FA56BF730C4F8395875189C10C4FB251605757A8FECC31F9737E3C2503B02608E6731E85D7 \
A38393C67DE516B85304824BFB135E33BF22B3A23B913BF6ACD2B7AB85198B8187B2BCD454D5E3318CACB3 \
2FD6261C31AE7F6C54EF6A7A2A4C9F3ECB81CE3555D4F0AD466DD4C108A90399D70041997C3B25345A9653 \
F3C9A6711AB1B91D6A9D2216442DA2C973CBD685EE7643BFD77327A2F7AE9CB283620A08716DFB462E5C1D65432CA9D56A90E811443CD1ECB8F0DE179C9CB48BA4F6FEC360C66F252F6E64EDC96B"),
                
-	    SHEX("9196BBBD194541FFEE7EDBAB970738BDD3AADBD6B73D1C85B580AFAC1232AE8077F743CE8B5B6F2B418B5134CCCD4F83645E8631885B14FBBCB909A9836C374C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 202 octets */
-	    SHEX("B6134F9C3E91DD8000740D009DD806240811D51AB1546A974BCB18D344642BAA5CD5903AF8 \
4D58EC5BA17301D5EC0F10CCD0509CBB3FD3FFF9172D193AF0F782252FD1338C7244D40E0E42362275B22D \
01C4C3389F19DD69BDF958EBE28E31A4FFE2B5F18A87831CFB7095F58A87C9FA21DB72BA269379B2DC2384 \
B3DA953C7925761FED324620ACEA435E52B424A7723F6A2357374157A34CD8252351C25A1B232826CEFE1BD3E70FFC15A31E7C0598219D7F00436294D11891B82497BC78AA5363892A2495DF8C1EEF"),
                
-	    SHEX("1959CAE3600F128F72E1821C337D841B14CBBFEF3A6D22286F18BDFC3EF63528C11BFFA841A6D2208AFEB5664D524DE83090AB0DB07CD47EF52F4D2EAA8454CE"));
                
-  test_hash(&amp;nettle_sha3_512, /* 203 octets */
-	    SHEX("C941CDB9C28AB0A791F2E5C8E8BB52850626AA89205BEC3A7E22682313D198B1FA33FC7295 \
381354858758AE6C8EC6FAC3245C6E454D16FA2F51C4166FAB51DF272858F2D603770C40987F64442D487A \
F49CD5C3991CE858EA2A60DAB6A65A34414965933973AC2457089E359160B7CDEDC42F29E10A91921785F6 \
B7224EE0B349393CDCFF6151B50B377D609559923D0984CDA6000829B916AB6896693EF6A2199B3C22F7DC5500A15B8258420E314C222BC000BC4E5413E6DD82C993F8330F5C6D1BE4BC79F08A1A0A46"),
                
-	    SHEX("A913DDC5BB089C121FF093BE529225148DF787D48F4F61699EFF9FC2910282A898A81A38D66BE9B06428D6466A614CA822A872C1C2C4D503D434D3B1D6942102"));
                
-  test_hash(&amp;nettle_sha3_512, /* 204 octets */
-	    SHEX("4499EFFFAC4BCEA52747EFD1E4F20B73E48758BE915C88A1FFE5299B0B005837A46B2F20A9 \
CB3C6E64A9E3C564A27C0F1C6AD1960373036EC5BFE1A8FC6A435C2185ED0F114C50E8B3E4C7ED96B06A03 \
6819C9463E864A58D6286F785E32A804443A56AF0B4DF6ABC57ED5C2B185DDEE8489EA080DEEEE66AA33C2 \
E6DAB36251C402682B6824821F998C32163164298E1FAFD31BABBCFFB594C91888C6219079D907FDB438ED89529D6D96212FD55ABE20399DBEFD342248507436931CDEAD496EB6E4A80358ACC78647D043"),
                
-	    SHEX("F10B91564AD93D734743281949BACEF065A6432A455236F1BF798DE9AEC6CCAC9B8D373B07C5ACFBD676EF21E4A3A9E0F7C38E8756D177D0A5C283D520844B4D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 205 octets */
-	    SHEX("EECBB8FDFA4DA62170FD06727F697D81F83F601FF61E478105D3CB7502F2C89BF3E8F56EDD \
469D049807A38882A7EEFBC85FC9A950952E9FA84B8AFEBD3CE782D4DA598002827B1EB98882EA1F0A8F7A \
A9CE013A6E9BC462FB66C8D4A18DA21401E1B93356EB12F3725B6DB1684F2300A98B9A119E5D27FF704AFF \
B618E12708E77E6E5F34139A5A41131FD1D6336C272A8FC37080F041C71341BEE6AB550CB4A20A6DDB6A8E \
                0299F2B14BC730C54B8B1C1C487B494BDCCFD3A53535AB2F231590BF2C4062FD2AD58F906A2D0D"),
                
-	    SHEX("EF26A1BAF33D4DE047BDD2CE34736E042ECD33AA569FFC0CB81ECFA66E9F87DA8D025ECBA24BCB187E4201046FB99A02DFA6F1BF88EC2B88DE216CF759FAC41D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 206 octets */
-	    SHEX("E64F3E4ACE5C8418D65FEC2BC5D2A303DD458034736E3B0DF719098BE7A206DEAF52D6BA82 \
316CAF330EF852375188CDE2B39CC94AA449578A7E2A8E3F5A9D68E816B8D16889FBC0EBF0939D04F63033 \
AE9AE2BDAB73B88C26D6BD25EE460EE1EF58FB0AFA92CC539F8C76D3D097E7A6A63EBB9B5887EDF3CF0760 \
28C5BBD5B9DB3211371AD3FE121D4E9BF44229F4E1ECF5A0F9F0EBA4D5CEB72878AB22C3F0EB5A625323AC \
                66F7061F4A81FAC834471E0C59553F108475FE290D43E6A055AE3EE46FB67422F814A68C4BE3E8C9"),
                
-	    SHEX("F8E079A6DC5A6A7E7F32FF7E8015D1B26D43B54F166F2111CFB2B1EB238CABEE58630EF845E0DB00DDF1D800AD67CE7B2B658B42118CC15C8EF3BC9FB252DB64"));
                
-  test_hash(&amp;nettle_sha3_512, /* 207 octets */
-	    SHEX("D2CB2D733033F9E91395312808383CC4F0CA974E87EC68400D52E96B3FA6984AC58D9AD093 \
8DDE5A973008D818C49607D9DE2284E7618F1B8AED8372FBD52ED54557AF4220FAC09DFA8443011699B97D \
743F8F2B1AEF3537EBB45DCC9E13DFB438428EE190A4EFDB3CAEB7F3933117BF63ABDC7E57BEB4171C7E1A \
D260AB0587806C4D137B6316B50ABC9CCE0DFF3ACADA47BBB86BE777E617BBE578FF4519844DB360E0A96C \
                6701290E76BB95D26F0F804C8A4F2717EAC4E7DE9F2CFF3BBC55A17E776C0D02856032A6CD10AD2838"),
                
-	    SHEX("A5BFAA52499A688D9C8D3DDC0BA06DECDF3829BE5D444ACFA412F4C6E863F4786BE9935805310734E4F0AFFE05558999807408E97E100FADD0C93FF160F8B11B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 208 octets */
-	    SHEX("F2998955613DD414CC111DF5CE30A995BB792E260B0E37A5B1D942FE90171A4AC2F66D4928 \
D7AD377F4D0554CBF4C523D21F6E5F379D6F4B028CDCB9B1758D3B39663242FF3CB6EDE6A36A6F05DB3BC4 \
1E0D861B384B6DEC58BB096D0A422FD542DF175E1BE1571FB52AE66F2D86A2F6824A8CFAACBAC4A7492AD0 \
433EEB15454AF8F312B3B2A577750E3EFBD370E8A8CAC1582581971FBA3BA4BD0D76E718DACF8433D33A59 \
D287F8CC92234E7A271041B526E389EFB0E40B6A18B3AAF658E82ED1C78631FD23B4C3EB27C3FAEC8685"),
                
-	    SHEX("CCEA9FCF1AD93270AC4690E96B875122C5B5EC20D2CC27079CBF893126C44E0208A8BFA139057D72BD2638059EC8DA8A720499AF9D4C117F86799D7515DFC6E0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 209 octets */
-	    SHEX("447797E2899B72A356BA55BF4DF3ACCA6CDB1041EB477BD1834A9F9ACBC340A294D729F2F9 \
7DF3A610BE0FF15EDB9C6D5DB41644B9874360140FC64F52AA03F0286C8A640670067A84E017926A70438D \
B1BB361DEFEE7317021425F8821DEF26D1EFD77FC853B818545D055ADC9284796E583C76E6FE74C9AC2587 \
AA46AA8F8804F2FEB5836CC4B3ABABAB8429A5783E17D5999F32242EB59EF30CD7ADABC16D72DBDB097623 \
047C98989F88D14EAF02A7212BE16EC2D07981AAA99949DDF89ECD90333A77BC4E1988A82ABF7C7CAF3291"),
                
-	    SHEX("2EFC5DFE028A35503A25BDF8B2164D86CA7496B7C5DED09C5D414B6977ADBB4A6988AB9939D1EC65F46BCC99C1DCD5F19E035D8D3DC387361200E4DA80C80671"));
                
-  test_hash(&amp;nettle_sha3_512, /* 210 octets */
-	    SHEX("9F2C18ADE9B380C784E170FB763E9AA205F64303067EB1BCEA93DF5DAC4BF5A2E00B78195F \
808DF24FC76E26CB7BE31DC35F0844CDED1567BBA29858CFFC97FB29010331B01D6A3FB3159CC1B973D255 \
DA9843E34A0A4061CABDB9ED37F241BFABB3C20D32743F4026B59A4CCC385A2301F83C0B0A190B0F2D01AC \
B8F0D41111E10F2F4E149379275599A52DC089B35FDD5234B0CFB7B6D8AEBD563CA1FA653C5C021DFD6F59 \
20E6F18BFAFDBECBF0AB00281333ED50B9A999549C1C8F8C63D7626C48322E9791D5FF72294049BDE91E73F8"),
                
-	    SHEX("E80D7A934FDAF17DB8DBB1DC6C42E90E139211C2F599890C06B15D6248FDBE682D77D4E05F26D72852F7492BCE118CE7C36950BD2C50F9699BB47D89C3115377"));
                
-  test_hash(&amp;nettle_sha3_512, /* 211 octets */
-	    SHEX("AE159F3FA33619002AE6BCCE8CBBDD7D28E5ED9D61534595C4C9F43C402A9BB31F3B301CBF \
D4A43CE4C24CD5C9849CC6259ECA90E2A79E01FFBAC07BA0E147FA42676A1D668570E0396387B5BCD599E8 \
E66AAED1B8A191C5A47547F61373021FA6DEADCB55363D233C24440F2C73DBB519F7C9FA5A8962EFD5F625 \
2C0407F190DFEFAD707F3C7007D69FF36B8489A5B6B7C557E79DD4F50C06511F599F56C896B35C917B63BA \
35C6FF8092BAF7D1658E77FC95D8A6A43EEB4C01F33F03877F92774BE89C1114DD531C011E53A34DC248A2F0E6"),
                
-	    SHEX("C414B29FD07720F46C351F5C80BE2094E95D13AD97BDD1F7C5207B695693CD5E1E0169B1AA2E271115BD5171FEC51D04B71E3E7CE1618FBFEB382F56F65F7EFF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 212 octets */
-	    SHEX("3B8E97C5FFC2D6A40FA7DE7FCEFC90F3B12C940E7AB415321E29EE692DFAC799B009C99DCD \
DB708FCE5A178C5C35EE2B8617143EDC4C40B4D313661F49ABDD93CEA79D117518805496FE6ACF292C4C2A \
1F76B403A97D7C399DAF85B46AD84E16246C67D6836757BDE336C290D5D401E6C1386AB32797AF6BB251E9 \
B2D8FE754C47482B72E0B394EAB76916126FD68EA7D65EB93D59F5B4C5AC40F7C3B37E7F3694F29424C24A \
F8C8F0EF59CD9DBF1D28E0E10F799A6F78CAD1D45B9DB3D7DEE4A7059ABE99182714983B9C9D44D7F5643596D4F3"),
                
-	    SHEX("A4679A4CBEE6292203BAFBA8913245F30E046ABA6C0937B407C00B73D17D8D696690EE25BA1B39DEB3DB93525A8FBCFD88173BA9C7A65B4406D0550BA9B6CC07"));
                
-  test_hash(&amp;nettle_sha3_512, /* 213 octets */
-	    SHEX("3434EC31B10FAFDBFEEC0DD6BD94E80F7BA9DCA19EF075F7EB017512AF66D6A4BCF7D16BA0 \
819A1892A6372F9B35BCC7CA8155EE19E8428BC22D214856ED5FA9374C3C09BDE169602CC219679F65A156 \
6FC7316F4CC3B631A18FB4449FA6AFA16A3DB2BC4212EFF539C67CF184680826535589C7111D73BFFCE431 \
B4C40492E763D9279560AAA38EB2DC14A212D723F994A1FE656FF4DD14551CE4E7C621B2AA5604A10001B2 \
878A897A28A08095C325E10A26D2FB1A75BFD64C250309BB55A44F23BBAC0D5516A1C687D3B41EF2FBBF9CC56D4739"),
                
-	    SHEX("5F49D6594DA939987D1906294B33A037F63C79E078531DFA7E6CE67279D4D5DBEB650FF8690F23B63B7E9C48EA8791B80FDB34EF66DCF0CEFE45842ECFF4AD1D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 214 octets */
-	    SHEX("7C7953D81C8D208FD1C97681D48F49DD003456DE60475B84070EF4847C333B74575B1FC8D2 \
A186964485A3B8634FEAA3595AAA1A2F4595A7D6B6153563DEE31BBAC443C8A33EED6D5D956A980A68366C \
2527B550EE950250DFB691EACBD5D56AE14B970668BE174C89DF2FEA43AE52F13142639C884FD62A3683C0 \
C3792F0F24AB1318BCB27E21F4737FAB62C77EA38BC8FD1CF41F7DAB64C13FEBE7152BF5BB7AB5A78F5346 \
D43CC741CB6F72B7B8980F268B68BF62ABDFB1577A52438FE14B591498CC95F071228460C7C5D5CEB4A7BDE588E7F21C"),
                
-	    SHEX("B77FB79669EA52C738E58A9EF3ED1501BBE7974478AFB5A8BED44549D6232FF8D7AA9EEEAF02F6755327951093243110D7BCFC0E51299DB793856B57A77E8420"));
                
-  test_hash(&amp;nettle_sha3_512, /* 215 octets */
-	    SHEX("7A6A4F4FDC59A1D223381AE5AF498D74B7252ECF59E389E49130C7EAEE626E7BD9897EFFD9 \
2017F4CCDE66B0440462CDEDFD352D8153E6A4C8D7A0812F701CC737B5178C2556F07111200EB627DBC299 \
CAA792DFA58F35935299FA3A3519E9B03166DFFA159103FFA35E8577F7C0A86C6B46FE13DB8E2CDD9DCFBA \
85BDDDCCE0A7A8E155F81F712D8E9FE646153D3D22C811BD39F830433B2213DD46301941B59293FD0A33E2 \
B63ADBD95239BC01315C46FDB678875B3C81E053A40F581CFBEC24A1404B1671A1B88A6D06120229518FB13A74CA0AC5AE"),
                
-	    SHEX("CACA0FF43107F730A7FBE6869FBA5AF1E626C96303BE3BC95155164199C88922194511B24C48911186F647CA246427F2CE7BA747271CD8D7C5E1D127C21F1EAA"));
                
-  test_hash(&amp;nettle_sha3_512, /* 216 octets */
-	    SHEX("D9FAA14CEBE9B7DE551B6C0765409A33938562013B5E8E0E1E0A6418DF7399D0A6A771FB81 \
C3CA9BD3BB8E2951B0BC792525A294EBD1083688806FE5E7F1E17FD4E3A41D00C89E8FCF4A363CAEDB1ACB \
558E3D562F1302B3D83BB886ED27B76033798131DAB05B4217381EAAA7BA15EC820BB5C13B516DD640EAEC \
5A27D05FDFCA0F35B3A5312146806B4C0275BCD0AAA3B2017F346975DB566F9B4D137F4EE10644C2A2DA66 \
DEECA5342E236495C3C6280528BFD32E90AF4CD9BB908F34012B52B4BC56D48CC8A6B59BAB014988EABD12E1A0A1C2E170E7"),
                
-	    SHEX("E5106B2A0D49D6D1E13E3323232101CEA5DA71CAA24E70EFCAC57E0CCF156CDF4C2492B03CE0E13437018DAB76B9C989883BEA69E849F33BB937A397B84ADA6A"));
                
-  test_hash(&amp;nettle_sha3_512, /* 217 octets */
-	    SHEX("2D8427433D0C61F2D96CFE80CF1E932265A191365C3B61AAA3D6DCC039F6BA2AD52A6A8CC3 \
0FC10F705E6B7705105977FA496C1C708A277A124304F1FC40911E7441D1B5E77B951AAD7B01FD5DB1B377 \
D165B05BBF898042E39660CAF8B279FE5229D1A8DB86C0999ED65E53D01CCBC4B43173CCF992B3A14586F6 \
BA42F5FE30AFA8AE40C5DF29966F9346DA5F8B35F16A1DE3AB6DE0F477D8D8660918060E88B9B9E9CA6A42 \
07033B87A812DBF5544D39E4882010F82B6CE005F8E8FF6FE3C3806BC2B73C2B83AFB704345629304F9F86358712E9FAE3CA3E"),
                
-	    SHEX("FAEE462E4BCED12AD54D3757D644396ED9203037741661AEA32BCCADAE568C4BDC925EDA76610E964FBE3FB26B33BC0BC123DDF9B528715317CE5C92E00AC96F"));
                
-  test_hash(&amp;nettle_sha3_512, /* 218 octets */
-	    SHEX("5E19D97887FCAAC0387E22C6F803C34A3DACD2604172433F7A8A7A526CA4A2A1271ECFC5D5 \
D7BE5AC0D85D921095350DFC65997D443C21C8094E0A3FEFD2961BCB94AED03291AE310CCDA75D8ACE4BC7 \
D89E7D3E5D1650BDA5D668B8B50BFC8E608E184F4D3A9A2BADC4FF5F07E0C0BC8A9F2E0B2A26FD6D8C5500 \
08FAAAB75FD71AF2A424BEC9A7CD9D83FAD4C8E9319115656A8717D3B523A68FF8004258B9990ED3623084 \
61804BA3E3A7E92D8F2FFAE5C2FBA55BA5A3C27C0A2F71BD711D2FE1799C2ADB31B200035481E9EE5C4ADF2AB9C0FA50B23975CF"),
                
-	    SHEX("FBE25B43E540104A3AADE897838C63511928AF5ADD4F952F1E6D4C39E70C923DF191FAA36F46B21F827D9B437996FF7206F73337CF20C6B0DB748A707455B420"));
                
-  test_hash(&amp;nettle_sha3_512, /* 219 octets */
-	    SHEX("C8E976AB4638909387CE3B8D4E510C3230E5690E02C45093B1D297910ABC481E56EEA0F296 \
F98379DFC9080AF69E73B2399D1C143BEE80AE1328162CE1BA7F6A8374679B20AACD380EB4E61382C99998 \
704D62701AFA914F9A2705CDB065885F50D086C3EB5753700C387118BB142F3E6DA1E988DFB31AC75D7368 \
931E45D1391A274B22F83CEB072F9BCABC0B216685BFD789F5023971024B1878A205442522F9EA7D8797A4 \
102A3DF41703768251FD5E017C85D1200A464118AA35654E7CA39F3C375B8EF8CBE7534DBC64BC20BEFB417CF60EC92F63D9EE7397"),
                
-	    SHEX("0A41A004573E0A983FE9C93BD57439A20C8F99B800A60D4A07117E8D9B25C0EE38BAB3CDB6FC9216B8E07F0CCDD028C418EF97B6D7E15DECDE7425497644E2E4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 220 octets */
-	    SHEX("7145FA124B7429A1FC2231237A949BA7201BCC1822D3272DE005B682398196C25F7E5CC2F2 \
89FBF44415F699CB7FE6757791B1443410234AE061EDF623359E2B4E32C19BF88450432DD01CAA5EB16A1D \
C378F391CA5E3C4E5F356728BDDD4975DB7C890DA8BBC84CC73FF244394D0D48954978765E4A00B593F70F \
2CA082673A261ED88DBCEF1127728D8CD89BC2C597E9102CED6010F65FA75A14EBE467FA57CE3BD4948B68 \
67D74A9DF5C0EC6F530CBF2EE61CE6F06BC8F2864DFF5583776B31DF8C7FFCB61428A56BF7BD37188B4A5123BBF338393AF46EDA85E6"),
                
-	    SHEX("FF081507F979F69C6743E42EE758858713B570CB48FF85EF0D728C4E1BB5456D035E498C05EA4CEBD820E134BB252AC76BA4949A4FAD76871A9972AE2FCCCEEA"));
                
-  test_hash(&amp;nettle_sha3_512, /* 221 octets */
-	    SHEX("7FDFADCC9D29BAD23AE038C6C65CDA1AEF757221B8872ED3D75FF8DF7DA0627D266E224E81 \
2C39F7983E4558BFD0A1F2BEF3FEB56BA09120EF762917B9C093867948547AEE98600D10D87B20106878A8 \
D22C64378BF634F7F75900C03986B077B0BF8B740A82447B61B99FEE5376C5EB6680EC9E3088F0BDD0C568 \
83413D60C1357D3C811950E5890E7600103C916341B80C743C6A852B7B4FB60C3BA21F3BC15B8382437A68 \
454779CF3CD7F9F90CCC8EF28D0B706535B1E4108EB5627BB45D719CB046839AEE311CA1ABDC8319E050D67972CB35A6B1601B25DBF487"),
                
-	    SHEX("03444AE8319EBD121E7707B9CDFD1FDFD52F3D6B3D4BCB2748AF421A3C8666C22D8C0D8A096767B1CD16A8D54738C5F67A6F9D48C90827BE71691A42BE87108B"));
                
-  test_hash(&amp;nettle_sha3_512, /* 222 octets */
-	    SHEX("988638219FD3095421F826F56E4F09E356296B628C3CE6930C9F2E758FD1A80C8273F2F61E \
4DAAE65C4F110D3E7CA0965AC7D24E34C0DC4BA2D6FF0BF5BBE93B3585F354D7543CB542A1AA54674D3750 \
77F2D360A8F4D42F3DB131C3B7AB7306267BA107659864A90C8C909460A73621D1F5D9D3FD95BEB19B23DB \
1CB6C0D0FBA91D36891529B8BD8263CAA1BAB56A4AFFAED44962DF096D8D5B1EB845EF31188B3E10F1AF81 \
1A13F156BEB7A288AAE593EBD1471B624AA1A7C6ADF01E2200B3D72D88A3AED3100C88231E41EFC376906F0B580DC895F080FDA5741DB1CB"),
                
-	    SHEX("5EE0A4459724037B7318815A80147C172D6C8F8874C9A0057706FB3E300FE936815F07672E6447B771DE699DFADF345C3BB5974CF019315FADD5534DFF6A079C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 223 octets */
-	    SHEX("5AAB62756D307A669D146ABA988D9074C5A159B3DE85151A819B117CA1FF6597F6156E80FD \
D28C9C3176835164D37DA7DA11D94E09ADD770B68A6E081CD22CA0C004BFE7CD283BF43A588DA91F509B27 \
A6584C474A4A2F3EE0F1F56447379240A5AB1FB77FDCA49B305F07BA86B62756FB9EFB4FC225C86845F026 \
EA542076B91A0BC2CDD136E122C659BE259D98E5841DF4C2F60330D4D8CDEE7BF1A0A244524EECC68FF2AE \
F5BF0069C9E87A11C6E519DE1A4062A10C83837388F7EF58598A3846F49D499682B683C4A062B421594FAFBC1383C943BA83BDEF515EFCF10D"),
                
-	    SHEX("54085A2F9C327E5D8EE225EFF5BD2C2837E44E8057CF1691E6202050079D26851061C4DA8D88FC19237E5B658950E66866E92019D9E425E2416240A59D25A6CF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 224 octets */
-	    SHEX("47B8216AA0FBB5D67966F2E82C17C07AA2D6327E96FCD83E3DE7333689F3EE79994A1BF450 \
82C4D725ED8D41205CB5BCDF5C341F77FACB1DA46A5B9B2CBC49EADF786BCD881F371A95FA17DF73F60651 \
9AEA0FF79D5A11427B98EE7F13A5C00637E2854134691059839121FEA9ABE2CD1BCBBBF27C74CAF3678E05 \
BFB1C949897EA01F56FFA4DAFBE8644611685C617A3206C7A7036E4AC816799F693DAFE7F19F303CE4EBA0 \
9D21E03610201BFC665B72400A547A1E00FA9B7AD8D84F84B34AEF118515E74DEF11B9188BD1E1F97D9A12C30132EC2806339BDADACDA2FD8B78"),
                
-	    SHEX("3EA49B6ABD39CDF04BCCD648FB7E1F8AE3DAE9D3E3A5EAB9CE29BE356DEFBBBEB1BB93AE40D31CC1F011DCC6C6AC85B102F2654E2DBBAC47333BCDB4758A1A28"));
                
-  test_hash(&amp;nettle_sha3_512, /* 225 octets */
-	    SHEX("8CFF1F67FE53C098896D9136389BD8881816CCAB34862BB67A656E3D98896F3CE6FFD4DA73 \
975809FCDF9666760D6E561C55238B205D8049C1CEDEEF374D1735DAA533147BFA960B2CCE4A4F254176BB \
4D1BD1E89654432B8DBE1A135C42115B394B024856A2A83DC85D6782BE4B444239567CCEC4B184D4548EAE \
3FF6A192F343292BA2E32A0F267F31CC26719EB85245D415FB897AC2DA433EE91A99424C9D7F1766A44171 \
D1651001C38FC79294ACCC68CEB5665D36218454D3BA169AE058A831338C17743603F81EE173BFC0927464F9BD728DEE94C6AEAB7AAE6EE3A627E8"),
                
-	    SHEX("B3851790CA47575DBF988F82C3B501DC8390A8E8598698166167567A0332913CCC8868584DB4ACFB2C9DC0F0A6833292F4DCEDC47CF003217689BC2422B53B93"));
                
-  test_hash(&amp;nettle_sha3_512, /* 226 octets */
-	    SHEX("EACD07971CFF9B9939903F8C1D8CBB5D4DB1B548A85D04E037514A583604E787F32992BF21 \
11B97AC5E8A938233552731321522AB5E8583561260B7D13EBEEF785B23A41FD8576A6DA764A8ED6D822D4 \
957A545D5244756C18AA80E1AAD4D1F9C20D259DEE1711E2CC8FD013169FB7CC4CE38B362F8E0936AE9198 \
B7E838DCEA4F7A5B9429BB3F6BBCF2DC92565E3676C1C5E6EB3DD2A0F86AA23EDD3D0891F197447692794B \
3DFA269611AD97F72B795602B4FDB198F3FD3EB41B415064256E345E8D8C51C555DC8A21904A9B0F1AD0EFFAB7786AAC2DA3B196507E9F33CA356427"),
                
-	    SHEX("A710CB26C632F289504CD0039BA6AB9B4D3524C52B286D466E2F8939F8684E3F18DCA298A2BA67EB710997B7BB10AE279438B9B4868D0ADB248F282BB440A130"));
                
-  test_hash(&amp;nettle_sha3_512, /* 227 octets */
-	    SHEX("23AC4E9A42C6EF45C3336CE6DFC2FF7DE8884CD23DC912FEF0F7756C09D335C189F3AD3A23 \
697ABDA851A81881A0C8CCAFC980AB2C702564C2BE15FE4C4B9F10DFB2248D0D0CB2E2887FD4598A1D4ACD \
A897944A2FFC580FF92719C95CF2AA42DC584674CB5A9BC5765B9D6DDF5789791D15F8DD925AA12BFFAFBC \
E60827B490BB7DF3DDA6F2A143C8BF96ABC903D83D59A791E2D62814A89B8080A28060568CF24A80AE6117 \
9FE84E0FFAD00388178CB6A617D37EFD54CC01970A4A41D1A8D3DDCE46EDBBA4AB7C90AD565398D376F431189CE8C1C33E132FEAE6A8CD17A61C630012"),
                
-	    SHEX("8F677A8089052B47BE60C0BB7666E403A5DAA5E28A2B632F2E496C587F1FDCA0EE33D9E78DAA4EF575B13389748B8C24110053B0B96A082C06C3F80EBE8DE976"));
                
-  test_hash(&amp;nettle_sha3_512, /* 228 octets */
-	    SHEX("0172DF732282C9D488669C358E3492260CBE91C95CFBC1E3FEA6C4B0EC129B45F242ACE09F \
152FC6234E1BEE8AAB8CD56E8B486E1DCBA9C05407C2F95DA8D8F1C0AF78EE2ED82A3A79EC0CB0709396EE \
62AADB84F8A4EE8A7CCCA3C1EE84E302A09EA802204AFECF04097E67D0F8E8A9D2651126C0A598A37081E4 \
2D168B0AE8A71951C524259E4E2054E535B779679BDADE566FE55700858618E626B4A0FAF895BCCE901150 \
4A49E05FD56127EAE3D1F8917AFB548ECADABDA1020111FEC9314C413498A360B08640549A22CB23C731ACE743252A8227A0D2689D4C6001606678DFB921"),
                
-	    SHEX("CE631E6F2C2DC5738C0FA958571773B58AF130B94824331419EE57E2691CE5F29DB3D8FE456CD1E7CDC07F6105FA1B6FD729C2B419008CCD889169C3385DB1B9"));
                
-  test_hash(&amp;nettle_sha3_512, /* 229 octets */
-	    SHEX("3875B9240CF3E0A8B59C658540F26A701CF188496E2C2174788B126FD29402D6A75453BA06 \
35284D08835F40051A2A9683DC92AFB9383719191231170379BA6F4ADC816FECBB0F9C446B785BF5207968 \
41E58878B73C58D3EBB097CE4761FDEABE15DE2F319DFBAF1742CDEB389559C788131A6793E19385666137 \
6C81CE9568DA19AA6925B47FFD77A43C7A0E758C37D69254909FF0FBD415EF8EB937BCD49F91468B49974C \
07DC819ABD67395DB0E05874FF83DDDAB895344ABD0E7111B2DF9E58D76D85AD98106B36295826BE04D435615595605E4B4BB824B33C4AFEB5E7BB0D19F909"),
                
-	    SHEX("FFF677BB58909C158EA677BE704253505B106AF934F639ABFEC63BD0C63097AA4BF032FE924149DD991D335E1C44C0220E4D13CBC41B6A98FB5A05FAA3FE15B3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 230 octets */
-	    SHEX("747CC1A59FEFBA94A9C75BA866C30DC5C1CB0C0F8E9361D98484956DD5D1A40F6184AFBE3D \
AC9F76028D1CAECCFBF69199C6CE2B4C092A3F4D2A56FE5A33A00757F4D7DEE5DFB0524311A97AE0668A47 \
971B95766E2F6DD48C3F57841F91F04A00AD5EA70F2D479A2620DC5CD78EAAB3A3B011719B7E78D19DDF70 \
D9423798AF77517EBC55392FCD01FC600D8D466B9E7A7A85BF33F9CC5419E9BD874DDFD60981150DDAF8D7 \
FEBAA4374F0872A5628D318000311E2F5655365AD4D407C20E5C04DF17A222E7DEEC79C5AB1116D8572F91CD06E1CCC7CED53736FC867FD49ECEBE6BF8082E8A"),
                
-	    SHEX("451EE587226C99989F5EC10050983B1FD661228A4AB48618F1D1173C94FAC39ECFD3C26C16653633B26097E31A0F2213B4F1153A57CB48A70D2AF1ADEB1BBC06"));
                
-  test_hash(&amp;nettle_sha3_512, /* 231 octets */
-	    SHEX("57AF971FCCAEC97435DC2EC9EF0429BCEDC6B647729EA168858A6E49AC1071E706F4A5A645 \
CA14E8C7746D65511620682C906C8B86EC901F3DDED4167B3F00B06CBFAC6AEE3728051B3E5FF10B4F9ED8 \
BD0B8DA94303C833755B3CA3AEDDF0B54BC8D6632138B5D25BAB03D17B3458A9D782108006F5BB7DE75B5C \
0BA854B423D8BB801E701E99DC4FEAAD59BC1C7112453B04D33EA3635639FB802C73C2B71D58A56BBD671B \
18FE34ED2E3DCA38827D63FDB1D4FB3285405004B2B3E26081A8FF08CD6D2B08F8E7B7E90A2AB1ED7A41B1D0128522C2F8BFF56A7FE67969422CE839A9D4608F03"),
                
-	    SHEX("F9D6AD8686125E71FE0856E806D68BA97EF123443938D28283387F33E3AC6E2A7DE042A3EE5F7994C1EECC5B6F22CBAE1349CAB2FB7A0A0125EC2320320858D4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 232 octets */
-	    SHEX("04E16DEDC1227902BAAF332D3D08923601BDD64F573FAA1BB7201918CFE16B1E10151DAE87 \
5DA0C0D63C59C3DD050C4C6A874011B018421AFC4623AB0381831B2DA2A8BA42C96E4F70864AC44E106F94 \
311051E74C77C1291BF5DB9539E69567BF6A11CF6932BBBAD33F8946BF5814C066D851633D1A513510039B \
349939BFD42B858C21827C8FF05F1D09B1B0765DC78A135B5CA4DFBA0801BCADDFA175623C8B647EACFB44 \
44B85A44F73890607D06D507A4F8393658788669F6EF4DEB58D08C50CA0756D5E2F49D1A7AD73E0F0B3D3B5F090ACF622B1878C59133E4A848E05153592EA81C6FBF"),
                
-	    SHEX("F26F3268FD620FC476A49AAC3ED1580864934A2F6BA881ED8C8FB757AAAA64BCDF501E1913DE600BBEF6F12C949FEA8FD68C645086D5E30C9253588FFBD19BE5"));
                
-  test_hash(&amp;nettle_sha3_512, /* 233 octets */
-	    SHEX("7C815C384EEE0F288ECE27CCED52A01603127B079C007378BC5D1E6C5E9E6D1C735723ACBB \
D5801AC49854B2B569D4472D33F40BBB8882956245C366DC3582D71696A97A4E19557E41E54DEE482A1422 \
9005F93AFD2C4A7D8614D10A97A9DFA07F7CD946FA45263063DDD29DB8F9E34DB60DAA32684F0072EA2A94 \
26ECEBFA5239FB67F29C18CBAA2AF6ED4BF4283936823AC1790164FEC5457A9CBA7C767CA59392D94CAB74 \
48F50EB34E9A93A80027471CE59736F099C886DEA1AB4CBA4D89F5FC7AE2F21CCD27F611ECA4626B2D08DC22382E92C1EFB2F6AFDC8FDC3D2172604F5035C46B8197D3"),
                
-	    SHEX("080845D6FD22A00B30FA01A4B4F81FDC7B46CA4C6A676AD5863A9DBF6611BA97F24FB59BB5BAC4E376B3B8B3357166782876B701273FF351BC8C5805532767D4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 234 octets */
-	    SHEX("E29D505158DBDD937D9E3D2145658EE6F5992A2FC790F4F608D9CDB44A091D5B94B88E81FA \
C4FDF5C49442F13B911C55886469629551189EAFF62488F1A479B7DB11A1560E198DDCCCCF50159093425F \
F7F1CB8D1D1246D0978764087D6BAC257026B090EFAE8CEC5F22B6F21C59ACE1AC7386F5B8837CA6A12B6F \
BF5534DD0560EF05CA78104D3B943DDB220FEAEC89AA5E692A00F822A2AB9A2FE60350D75E7BE16FF2526D \
C643872502D01F42F188ABED0A6E9A6F5FD0D1CE7D5755C9FFA66B0AF0B20BD806F08E06156690D81AC811778CA3DAC2C249B96002017FCE93E507E3B953ACF99964B847"),
                
-	    SHEX("2678A8715FC7E538522DD7608D769508B63017D9EB6CC48F1CB07D14E741066936C8316BF3211E09F62611E140DDD14A07F97F9F372E99C084FFE289EB302BD8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 235 octets */
-	    SHEX("D85588696F576E65ECA0155F395F0CFACD83F36A99111ED5768DF2D116D2121E32357BA4F5 \
4EDE927F189F297D3A97FAD4E9A0F5B41D8D89DD7FE20156799C2B7B6BF9C957BA0D6763F5C3BC5129747B \
BB53652B49290CFF1C87E2CDF2C4B95D8AAEE09BC8FBFA6883E62D237885810491BFC101F1D8C636E3D0ED \
E838AD05C207A3DF4FAD76452979EB99F29AFAECEDD1C63B8D36CF378454A1BB67A741C77AC6B6B3F95F4F \
02B64DABC15438613EA49750DF42EE90101F115AA9ABB9FF64324DDE9DABBB01054E1BD6B4BCDC7930A44C2300D87CA78C06924D0323AD7887E46C90E8C4D100ACD9EED21E"),
                
-	    SHEX("AA03EB09417435DA9E6E7803F3B6EAB66FAA3D59CC622950D61F9B962B69145AC2255CD752CB9607742092697B1A79D124817AE26421E61D1176764832ED354C"));
                
-  test_hash(&amp;nettle_sha3_512, /* 236 octets */
-	    SHEX("3A12F8508B40C32C74492B66323375DCFE49184C78F73179F3314B79E63376B8AC683F5A51 \
F1534BD729B02B04D002F55CBD8E8FC9B5EC1EA6BBE6A0D0E7431518E6BA45D124035F9D3DCE0A8BB7BF14 \
30A9F657E0B4EA9F20EB20C786A58181A1E20A96F1628F8728A13BDF7A4B4B32FC8AA7054CC4881AE7FA19 \
AFA65C6C3EE1B3ADE3192AF42054A8A911B8EC1826865D46D93F1E7C5E2B7813C92A506E53886F3D4701BB \
93D2A681AD109C845904BB861AF8AF0646B6E399B38B614051D34F6842563A0F37EC00CB3D865FC5D746C4987DE2A65071100883A2A9C7A2BFE1E2DD603D9EA24DC7C5FD06BE"),
                
-	    SHEX("D3012F2FB56845B258D7598C0BBB2C97D53B602DEAE9326DC3678B2228454A1E29F28848ED140C70BE85CDEA9F99A8DC347DEABD46D362ED1AFB231146A0255D"));
                
-  test_hash(&amp;nettle_sha3_512, /* 237 octets */
-	    SHEX("1861EDCE46FA5AD17E1FF1DEAE084DEC580F97D0A67885DFE834B9DFAC1AE076742CE9E267 \
512CA51F6DF5A455AF0C5FD6ABF94ACEA103A3370C354485A7846FB84F3AC7C2904B5B2FBF227002CE5121 \
33BB7E1C4E50057BFD1E44DB33C7CDB969A99E284B184F50A14B068A1FC5009D9B298DBE92239572A7627A \
AC02ABE8F3E3B473417F36D4D2505D16B7577F4526C9D94A270A2DFE450D06DA8F6FA956879A0A55CFE99E \
742EA555EA477BA3E9B44CCD508C375423611AF92E55345DC215779B2D5119EBA49C71D49B9FE3F1569FA24E5CA3E332D042422A8B8158D3EC66A80012976F31FFDF305F0C9C5E"),
                
-	    SHEX("B50C896F2CDF7F105DE751FF6CF664E592FAB752D652B06898B9B288052DF22F721AD87E702AF043E6B1E88929850CBD5698A9172C3932400B2538E401A6F081"));
                
-  test_hash(&amp;nettle_sha3_512, /* 238 octets */
-	    SHEX("08D0FFDE3A6E4EF65608EA672E4830C12943D7187CCFF08F4941CFC13E545F3B9C7AD5EEBB \
E2B01642B486CAF855C2C73F58C1E4E3391DA8E2D63D96E15FD84953AE5C231911B00AD6050CD7AAFDAAC9 \
B0F663AE6AAB45519D0F5391A541707D479034E73A6AD805AE3598096AF078F1393301493D663DD71F8386 \
9CA27BA508B7E91E81E128C1716DC3ACFE3084B2201E04CF8006617EECF1B640474A5D45CFDE9F4D3EF92D \
6D055B909892194D8A8218DB6D8203A84261D200D71473D7488F3427416B6896C137D455F231071CACBC86E0415AB88AEC841D96B7B8AF41E05BB461A40645BF176601F1E760DE5F"),
                
-	    SHEX("A34A2F27C32F993A7E7007867733547481293C391255FFD0E5CCBE91E1CC749B13525AF6ADFA0C2D1D64BF87DD65B996ADA9111C5DF55BFF8A5742E54B8444F6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 239 octets */
-	    SHEX("D782ABB72A5BE3392757BE02D3E45BE6E2099D6F000D042C8A543F50ED6EBC055A7F133B0D \
D8E9BC348536EDCAAE2E12EC18E8837DF7A1B3C87EC46D50C241DEE820FD586197552DC20BEEA50F445A07 \
A38F1768A39E2B2FF05DDDEDF751F1DEF612D2E4D810DAA3A0CC904516F9A43AF660315385178A529E51F8 \
AAE141808C8BC5D7B60CAC26BB984AC1890D0436EF780426C547E94A7B08F01ACBFC4A3825EAE04F520A90 \
16F2FB8BF5165ED12736FC71E36A49A73614739EAA3EC834069B1B40F1350C2B3AB885C02C640B9F7686ED5F99527E41CFCD796FE4C256C9173186C226169FF257954EBDA81C0E5F99"),
                
-	    SHEX("DD5F4B167175D9566DCA6C5B1B54A33D02EFD02E25E23BB6FB02D878A4415E5E8682C209BEAC04E9882A272D01E8EB435CAA5BCD74FC825C6B9082D041DFF333"));
                
-  test_hash(&amp;nettle_sha3_512, /* 240 octets */
-	    SHEX("5FCE8109A358570E40983E1184E541833BB9091E280F258CFB144387B05D190E431CB19BAA \
67273BA0C58ABE91308E1844DCD0B3678BAA42F335F2FA05267A0240B3C718A5942B3B3E3BFA98A55C25A1 \
466E8D7A603722CB2BBF03AFA54CD769A99F310735EE5A05DAE2C22D397BD95635F58C48A67F90E1B73AAF \
CD3F82117F0166657838691005B18DA6F341D6E90FC1CDB352B30FAE45D348294E501B63252DE14740F2B8 \
5AE5299DDEC3172DE8B6D0BA219A20A23BB5E10FF434D39DB3F583305E9F5C039D98569E377B75A70AB837D1DF269B8A4B566F40BB91B577455FD3C356C914FA06B9A7CE24C7317A172D"),
                
-	    SHEX("A43AE5DAD936697564AE1BD9B8624C5C31CC36607322AF40E253F10C285467AFD0D08252D2BAD76EFA52E4775C9C26761ABE38212855A80112FE02623FBF0A13"));
                
-  test_hash(&amp;nettle_sha3_512, /* 241 octets */
-	    SHEX("6172F1971A6E1E4E6170AFBAD95D5FEC99BF69B24B674BC17DD78011615E502DE6F56B86B1 \
A71D3F4348087218AC7B7D09302993BE272E4A591968AEF18A1262D665610D1070EE91CC8DA36E1F841A69 \
A7A682C580E836941D21D909A3AFC1F0B963E1CA5AB193E124A1A53DF1C587470E5881FB54DAE1B0D840F0 \
C8F9D1B04C645BA1041C7D8DBF22030A623AA15638B3D99A2C400FF76F3252079AF88D2B37F35EE66C1AD7 \
801A28D3D388AC450B97D5F0F79E4541755356B3B1A5696B023F39AB7AB5F28DF4202936BC97393B93BC915CB159EA1BD7A0A414CB4B7A1AC3AF68F50D79F0C9C7314E750F7D02FAA58BFA"),
                
-	    SHEX("A5AC23D4A0D533CB9D8A68873F5CB749228458D43CE6BD0536C8733777B5E6E3F28FD36BFFE69002A0777BA74FEF22DE3FAC4C818B4842816C6094496F968555"));
                
-  test_hash(&amp;nettle_sha3_512, /* 242 octets */
-	    SHEX("5668ECD99DFBE215C4118398AC9C9EAF1A1433FAB4CCDD3968064752B625EA944731F75D48 \
A27D047D67547F14DD0FFAA55FA5E29F7AF0D161D85EAFC4F2029B717C918EAB9D304543290BDBA7158B68 \
020C0BA4E079BC95B5BC0FC044A992B94B4CCD3BD66D0EABB5DBBAB904D62E00752C4E3B0091D773BCF4C1 \
4B4377DA3EFFF824B1CB2FA01B32D1E46C909E626ED2DAE920F4C7DBEB635BC754FACBD8D49BEBA3F23C1C \
41CCBFCD0EE0C114E69737F5597C0BF1D859F0C767E18002AE8E39C26261FFDE2920D3D0BAF0E906138696CFE5B7E32B600F45DF3AAA39932F3A7DF95B60FA8712A2271FCAF3911CE7B511B1"),
                
-	    SHEX("07F3BCACF5F78816D515CEDF1CBBA4FFC58D83AA8687B0E7252FAAB43E7F59A7FF7415727ADDF9A22560ADB5755A2C6DF8C7E6DCACEB53106A714D807AAADBF3"));
                
-  test_hash(&amp;nettle_sha3_512, /* 243 octets */
-	    SHEX("03D625488354DF30E3F875A68EDFCF340E8366A8E1AB67F9D5C5486A96829DFAC057828908 \
2B2A62117E1CF418B43B90E0ADC881FC6AE8105C888E9ECD21AEA1C9AE1A4038DFD17378FED71D02AE4920 \
87D7CDCD98F746855227967CB1AB4714261EE3BEAD3F4DB118329D3EBEF4BC48A875C19BA763966DA0EBEA \
800E01B2F50B00E9DD4CACA6DCB314D00184EF71EA2391D760C950710DB4A70F9212FFC54861F9DC752CE1 \
8867B8AD0C48DF8466EF7231E7AC567F0EB55099E622EBB86CB237520190A61C66AD34F1F4E289CB3282AE3EAAC6152ED24D2C92BAE5A7658252A53C49B7B02DFE54FDB2E90074B6CF310AC661"),
                
-	    SHEX("13A592B73EDE487036C8816BD6FC6CDC04DC6133409A6EE990584160518F9EF573264CF04D38A3BA75D150F4F026F6DF8936E13C8F4F3ECC9ECBC43FDFC488A4"));
                
-  test_hash(&amp;nettle_sha3_512, /* 244 octets */
-	    SHEX("2EDC282FFB90B97118DD03AAA03B145F363905E3CBD2D50ECD692B37BF000185C651D3E972 \
6C690D3773EC1E48510E42B17742B0B0377E7DE6B8F55E00A8A4DB4740CEE6DB0830529DD19617501DC1E9 \
359AA3BCF147E0A76B3AB70C4984C13E339E6806BB35E683AF8527093670859F3D8A0FC7D493BCBA6BB12B \
5F65E71E705CA5D6C948D66ED3D730B26DB395B3447737C26FAD089AA0AD0E306CB28BF0ACF106F89AF374 \
5F0EC72D534968CCA543CD2CA50C94B1456743254E358C1317C07A07BF2B0ECA438A709367FAFC89A57239028FC5FECFD53B8EF958EF10EE0608B7F5CB9923AD97058EC067700CC746C127A61EE3"),
                
-	    SHEX("C2FB590AB74E230B8FE159892F94DE04EF7ADAA02B918D4994F996538D257F5A80C9B3BE8F410170B0C5CAC3F507401220881C5E08D8BF0A13247170D39085BC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 245 octets */
-	    SHEX("90B28A6AA1FE533915BCB8E81ED6CACDC10962B7FF82474F845EEB86977600CF70B07BA8E3 \
796141EE340E3FCE842A38A50AFBE90301A3BDCC591F2E7D9DE53E495525560B908C892439990A2CA2679C \
5539FFDF636777AD9C1CDEF809CDA9E8DCDB451ABB9E9C17EFA4379ABD24B182BD981CAFC792640A183B61 \
694301D04C5B3EAAD694A6BD4CC06EF5DA8FA23B4FA2A64559C5A68397930079D250C51BCF00E2B16A6C49 \
171433B0AADFD80231276560B80458DD77089B7A1BBCC9E7E4B9F881EACD6C92C4318348A13F4914EB27115A1CFC5D16D7FD94954C3532EFACA2CAB025103B2D02C6FD71DA3A77F417D7932685888A"),
                
-	    SHEX("02951596A13A1A41188A4A1D6346F7EAFB60A2051EA67C63237D1A9B79EC4733F33ECEC223DEDD946B78387B6F2DF5E9AB6AF7DFBABAF80F4FCC94FA087275E8"));
                
-  test_hash(&amp;nettle_sha3_512, /* 246 octets */
-	    SHEX("2969447D175490F2AA9BB055014DBEF2E6854C95F8D60950BFE8C0BE8DE254C26B2D31B9E4 \
DE9C68C9ADF49E4EE9B1C2850967F29F5D08738483B417BB96B2A56F0C8ACA632B552059C59AAC3F61F7B4 \
5C966B75F1D9931FF4E596406378CEE91AAA726A3A84C33F37E9CDBE626B5745A0B06064A8A8D56E53AAF1 \
02D23DD9DF0A3FDF7A638509A6761A33FA42FA8DDBD8E16159C93008B53765019C3F0E9F10B144CE2AC57F \
5D7297F9C9949E4FF68B70D339F87501CE8550B772F32C6DA8AD2CE2100A895D8B08FA1EEAD7C376B407709703C510B50F87E73E43F8E7348F87C3832A547EF2BBE5799ABEDCF5E1F372EA809233F006"),
                
-	    SHEX("5AA4E32F0EA3E853929BF64ACC9565A01300BC007063B939F6DBBE9CAE0545EA95FBCAC32575AA0727EE4D937071E6B3BE74E23FE76FD63EC05C7F7D8A407AF0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 247 octets */
-	    SHEX("721645633A44A2C78B19024EAECF58575AB23C27190833C26875DC0F0D50B46AEA9C343D82 \
EA7D5B3E50EC700545C615DAEAEA64726A0F05607576DCD396D812B03FB6551C641087856D050B10E6A4D5 \
577B82A98AFB89CEE8594C9DC19E79FEFF0382FCFD127F1B803A4B9946F4AC9A4378E1E6E041B1389A53E3 \
450CD32D9D2941B0CBABDB50DA8EA2513145164C3AB6BCBD251C448D2D4B087AC57A59C2285D564F16DA4E \
D5E607ED979592146FFB0EF3F3DB308FB342DF5EB5924A48256FC763141A278814C82D6D6348577545870AE3A83C7230AC02A1540FE1798F7EF09E335A865A2AE0949B21E4F748FB8A51F44750E213A8FB"),
                
-	    SHEX("495B2AA2103159D9A937E9DD56B059ACA98A5E3CB7B59BB690DEDC00C692E9D7A18614A73D12E07634B209CC630D1818B09F1076A941FF80474493E3D42B9812"));
                
-  test_hash(&amp;nettle_sha3_512, /* 248 octets */
-	    SHEX("6B860D39725A14B498BB714574B4D37CA787404768F64C648B1751B353AC92BAC2C3A28EA9 \
09FDF0423336401A02E63EC24325300D823B6864BB701F9D7C7A1F8EC9D0AE3584AA6DD62EA1997CD831B4 \
BABD9A4DA50932D4EFDA745C61E4130890E156AEE6113716DAF95764222A91187DB2EFFEA49D5D0596102D \
619BD26A616BBFDA8335505FBB0D90B4C180D1A2335B91538E1668F9F9642790B4E55F9CAB0FE2BDD2935D \
001EE6419ABAB5457880D0DBFF20ED8758F4C20FE759EFB33141CF0E892587FE8187E5FBC57786B7E8B089 \
                612C936DFC03D27EFBBE7C8673F1606BD51D5FF386F4A7AB68EDF59F385EB1291F117BFE717399"),
                
-	    SHEX("217B5A985BED80008274470E254443238C5AEACBC7EE2289F0E63B7AFE6D0F395E2361FD6D9DC33B4F54F03FF56F6B264976161D80091788EE9D262F147A35FC"));
                
-  test_hash(&amp;nettle_sha3_512, /* 249 octets */
-	    SHEX("6A01830AF3889A25183244DECB508BD01253D5B508AB490D3124AFBF42626B2E70894E9B56 \
2B288D0A2450CFACF14A0DDAE5C04716E5A0082C33981F6037D23D5E045EE1EF2283FB8B6378A914C5D944 \
1627A722C282FF452E25A7EA608D69CEE4393A0725D17963D0342684F255496D8A18C29611453151305493 \
11FC07F0312FB78E6077334F87EAA873BEE8AA95698996EB21375EB2B4EF53C14401207DEB4568398E5DD9 \
A7CF97E8C9663E23334B46912F8344C19EFCF8C2BA6F04325F1A27E062B62A58D0766FC6DB4D2C6A192860 \
                4B0175D872D16B7908EBC041761187CC785526C2A3873FEAC3A642BB39F5351550AF9770C328AF7B"),
                
-	    SHEX("293C551E753BBA7F314DCB93A0FAD94F3F5DEE6ED45D765A708E6FD277601F03F6C905D7E1EAEAEC513CBBBD672B817F6D60FBF02C20167D7F4B7B84AFEEB3F6"));
                
-  test_hash(&amp;nettle_sha3_512, /* 250 octets */
-	    SHEX("B3C5E74B69933C2533106C563B4CA20238F2B6E675E8681E34A389894785BDADE59652D4A7 \
3D80A5C85BD454FD1E9FFDAD1C3815F5038E9EF432AAC5C3C4FE840CC370CF86580A6011778BBEDAF511A5 \
1B56D1A2EB68394AA299E26DA9ADA6A2F39B9FAFF7FBA457689B9C1A577B2A1E505FDF75C7A0A64B1DF81B \
3A356001BF0DF4E02A1FC59F651C9D585EC6224BB279C6BEBA2966E8882D68376081B987468E7AED1EF90E \
BD090AE825795CDCA1B4F09A979C8DFC21A48D8A53CDBB26C4DB547FC06EFE2F9850EDD2685A4661CB4911 \
                F165D4B63EF25B87D0A96D3DFF6AB0758999AAD214D07BD4F133A6734FDE445FE474711B69A98F7E2B"),
                
-	    SHEX("89FE6314A0246EFF3BFD07A95FE239BD5071467F53799175B226DAF6C3DB618CAD4CA1C1AF64BF5793F03254F560E6335BEAAA86BCB9E961F214B2AE97B47AF0"));
                
-  test_hash(&amp;nettle_sha3_512, /* 251 octets */
-	    SHEX("83AF34279CCB5430FEBEC07A81950D30F4B66F484826AFEE7456F0071A51E1BBC55570B5CC \
7EC6F9309C17BF5BEFDD7C6BA6E968CF218A2B34BD5CF927AB846E38A40BBD81759E9E33381016A755F699 \
DF35D660007B5EADF292FEEFB735207EBF70B5BD17834F7BFA0E16CB219AD4AF524AB1EA37334AA66435E5 \
D397FC0A065C411EBBCE32C240B90476D307CE802EC82C1C49BC1BEC48C0675EC2A6C6F3ED3E5B741D1343 \
7095707C565E10D8A20B8C20468FF9514FCF31B4249CD82DCEE58C0A2AF538B291A87E3390D737191A0748 \
4A5D3F3FB8C8F15CE056E5E5F8FEBE5E1FB59D6740980AA06CA8A0C20F5712B4CDE5D032E92AB89F0AE1"),
                
-	    SHEX("7690F703E894EE22D4DFF55A7F8D5021D5F17B729F95A59C4D55CFB225C67BE105F2E7CDF56D140E566648E9E9C39BBED96F985A6DAE1F21D8BA500F7FD40EDF"));
                
-  test_hash(&amp;nettle_sha3_512, /* 252 octets */
-	    SHEX("A7ED84749CCC56BB1DFBA57119D279D412B8A986886D810F067AF349E8749E9EA746A60B03 \
742636C464FC1EE233ACC52C1983914692B64309EDFDF29F1AB912EC3E8DA074D3F1D231511F5756F0B6EE \
AD3E89A6A88FE330A10FACE267BFFBFC3E3090C7FD9A850561F363AD75EA881E7244F80FF55802D5EF7A1A \
4E7B89FCFA80F16DF54D1B056EE637E6964B9E0FFD15B6196BDD7DB270C56B47251485348E49813B4EB9ED \
122A01B3EA45AD5E1A929DF61D5C0F3E77E1FDC356B63883A60E9CBB9FC3E00C2F32DBD469659883F690C6 \
772E335F617BC33F161D6F6984252EE12E62B6000AC5231E0C9BC65BE223D8DFD94C5004A101AF9FD6C0FB"),
                
-	    SHEX("65E415C7958A47FCA9EED3846FD1283AFEB38E5130F57ECD99DCB21BEDDA856E3B5FB9F839E579C5EA386EACA8CDC0A9549EAAF6EC452DD6CB5212B709BF5C59"));
                
-  test_hash(&amp;nettle_sha3_512, /* 253 octets */
-	    SHEX("A6FE30DCFCDA1A329E82AB50E32B5F50EB25C873C5D2305860A835AECEE6264AA36A474299 \
22C4B8B3AFD00DA16035830EDB897831C4E7B00F2C23FC0B15FDC30D85FB70C30C431C638E1A25B51CAF1D \
7E8B050B7F89BFB30F59F0F20FECFF3D639ABC4255B3868FC45DD81E47EB12AB40F2AAC735DF5D1DC1AD99 \
7CEFC4D836B854CEE9AC02900036F3867FE0D84AFFF37BDE3308C2206C62C4743375094108877C73B87B25 \
46FE05EA137BEDFC06A2796274099A0D554DA8F7D7223A48CBF31B7DECAA1EBC8B145763E3673168C1B1B7 \
15C1CD99ECD3DDB238B06049885ECAD9347C2436DFF32C771F34A38587A44A82C5D3D137A03CAA27E66C8FF6"),
                
-	    SHEX("D6542A2F0654B9B874A627D3D53764A65B1DF2C0CEC3BCD0B4B088FAA1095E54F1799757C4371F8D544E298D600E21E11B2F90D295712621231A09C58B05A704"));
                
-  test_hash(&amp;nettle_sha3_512, /* 254 octets */
-	    SHEX("83167FF53704C3AA19E9FB3303539759C46DD4091A52DDAE9AD86408B69335989E61414BC2 \
0AB4D01220E35241EFF5C9522B079FBA597674C8D716FE441E566110B6211531CECCF8FD06BC8E511D0078 \
5E57788ED9A1C5C73524F01830D2E1148C92D0EDC97113E3B7B5CD3049627ABDB8B39DD4D6890E0EE91993 \
F92B03354A88F52251C546E64434D9C3D74544F23FB93E5A2D2F1FB15545B4E1367C97335B0291944C8B73 \
0AD3D4789273FA44FB98D78A36C3C3764ABEEAC7C569C1E43A352E5B770C3504F87090DEE075A1C4C85C0C \
39CF421BDCC615F9EFF6CB4FE6468004AECE5F30E1ECC6DB22AD9939BB2B0CCC96521DFBF4AE008B5B46BC006E"),
                
-	    SHEX("EC983E787628B94C87FFF8D57D2D058667D12F5AF458BCE79BB7844FB41D9C55920F593C8D8730EB8D54FF1D51CD8AD2F1C2A0F7D6B299A21266744E47D142B2"));
                
-  test_hash(&amp;nettle_sha3_512, /* 255 octets */
-	    SHEX("3A3A819C48EFDE2AD914FBF00E18AB6BC4F14513AB27D0C178A188B61431E7F5623CB66B23 \
346775D386B50E982C493ADBBFC54B9A3CD383382336A1A0B2150A15358F336D03AE18F666C7573D55C4FD \
181C29E6CCFDE63EA35F0ADF5885CFC0A3D84A2B2E4DD24496DB789E663170CEF74798AA1BBCD4574EA0BB \
A40489D764B2F83AADC66B148B4A0CD95246C127D5871C4F11418690A5DDF01246A0C80A43C70088B61836 \
39DCFDA4125BD113A8F49EE23ED306FAAC576C3FB0C1E256671D817FC2534A52F5B439F72E424DE376F4C5 \
65CCA82307DD9EF76DA5B7C4EB7E085172E328807C02D011FFBF33785378D79DC266F6A5BE6BB0E4A92ECEEBAEB1"),
                
-	    SHEX("81950E7096D31D4F22E3DB71CAC725BF59E81AF54C7CA9E6AEEE71C010FC5467466312A01AA5C137CFB140646941556796F612C9351268737C7E9A2B9631D1FA"));
 +  test_hash (&amp;nettle_sha3_512,	/* 0 octets */
+	     SHEX (""),
+	     SHEX
+	     ("A69F73CCA23A9AC5C8B567DC185A756E97C982164FE25859E0D1DCC1475C80A615B2123AF1F5F94C11E3E9402C3AC558F500199D95B6D3E301758586281DCD26"));
 +  test_hash (&amp;nettle_sha3_512,	/* 1 octets */
+	     SHEX ("CC"),
+	     SHEX
+	     ("3939FCC8B57B63612542DA31A834E5DCC36E2EE0F652AC72E02624FA2E5ADEECC7DD6BB3580224B4D6138706FC6E80597B528051230B00621CC2B22999EAA205"));
 +  test_hash (&amp;nettle_sha3_512,	/* 2 octets */
+	     SHEX ("41FB"),
+	     SHEX
+	     ("AA092865A40694D91754DBC767B5202C546E226877147A95CB8B4C8F8709FE8CD6905256B089DA37896EA5CA19D2CD9AB94C7192FC39F7CD4D598975A3013C69"));
 +  test_hash (&amp;nettle_sha3_512,	/* 3 octets */
+	     SHEX ("1F877C"),
+	     SHEX
+	     ("CB20DCF54955F8091111688BECCEF48C1A2F0D0608C3A575163751F002DB30F40F2F671834B22D208591CFAF1F5ECFE43C49863A53B3225BDFD7C6591BA7658B"));
 +  test_hash (&amp;nettle_sha3_512,	/* 4 octets */
+	     SHEX ("C1ECFDFC"),
+	     SHEX
+	     ("D4B4BDFEF56B821D36F4F70AB0D231B8D0C9134638FD54C46309D14FADA92A2840186EED5415AD7CF3969BDFBF2DAF8CCA76ABFE549BE6578C6F4143617A4F1A"));
 +  test_hash (&amp;nettle_sha3_512,	/* 5 octets */
+	     SHEX ("21F134AC57"),
+	     SHEX
+	     ("584219A84E8796076BF1178B14B9D1E2F96A4B4EF11F10CC516FBE1A29639D6BA74FB92815F9E3C5192ED4DCA20AEA5B109D52237C9956401FD44B221F82AB37"));
 +  test_hash (&amp;nettle_sha3_512,	/* 6 octets */
+	     SHEX ("C6F50BB74E29"),
+	     SHEX
+	     ("4345B92A2AB7EADB6A24EE1D175AC258CCF2F694AC09EC9D47399E4D96F61F30B322C5438C51BACD0D597D00471A41ED8E




</body></email><email><emailId>20150902140517</emailId><senderName>Florian Weimer</senderName><senderEmail>fweimer@redhat.com</senderEmail><timestampReceived>2015-09-02 14:05:17-0400</timestampReceived><subject>RSA-CRT hardening</subject><body>

I strongly suggest to implement RSA-CRT hardening, by checking that RSA
signature have not been miscomputed accidentally:

&lt;https://securityblog.redhat.com/2015/09/02/factoring-rsa-keys-with-tls-perfect-forward-secrecy/&gt;
&lt;https://people.redhat.com/~fweimer/rsa-crt-leaks.pdf&gt;

We did not see any key leaks which could be attributed to Nettle, but I
think the added verification is still a reasonable precaution.

Thanks,
Florian
-- 
Florian Weimer / Red Hat Product Security

</body></email><email><emailId>20150903094737</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-03 09:47:37-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Florian Weimer &lt;fweimer@redhat.com&gt; writes:

&gt; I strongly suggest to implement RSA-CRT hardening, by checking that RSA
&gt; signature have not been miscomputed accidentally:

Thanks for the reminder. I'll add it to the rsa_pkcs1_sign_tr and
rsa_decrypt_tr functions. For other RSA secret-key functions, interface
issues makes it a bit more difficult.

I've updated the plan for a nettle-3.2 release,
http://www.lysator.liu.se/~nisse/nettle/plan.html

Another recent change is that I'm disabling the use of ifunc linking,
see https://sourceware.org/ml/libc-help/2015-06/msg00010.html. I hope
glibc will be improved to make use of ifunc more reliable, but I haven't
really investigated that.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150729074105</emailId><senderName>andy lawrence</senderName><senderEmail>ajlawrence@acm.org</senderEmail><timestampReceived>2015-07-29 07:41:05-0400</timestampReceived><subject>Helping out</subject><body>

Hello,

I am interested in helping out with the development of Nettle. Are there
any small projects I could undertake to get started?

Best wishes,

Andrew Lawrence

</body></email><email><emailId>20150903095633</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-09-03 09:56:33-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On Wed, Sep 2, 2015 at 4:05 PM, Florian Weimer &lt;fweimer@redhat.com&gt; wrote:
&gt; I strongly suggest to implement RSA-CRT hardening, by checking that RSA
&gt; signature have not been miscomputed accidentally:
&gt; &lt;https://securityblog.redhat.com/2015/09/02/factoring-rsa-keys-with-tls-perfect-forward-secrecy/&gt;
&gt; &lt;https://people.redhat.com/~fweimer/rsa-crt-leaks.pdf&gt;
&gt; We did not see any key leaks which could be attributed to Nettle, but I
&gt; think the added verification is still a reasonable precaution.

Unfortunately for most of the functions available in nettle this
counter-measure cannot be implemented without changing the API. Said
that, there is rsa_pkcs1_sign_tr() which is supposed to be the
side-channel resistant version of rsa_pkcs1_sign() and can have this
additional check with no changes. I attach a small patch which
verifies the output of this signing function.

Niels, what about the rest of the functions? They can protect from
neither timing nor fault attacks. I also attach the patch which marks
them as such in the manual.

regards,
Nikos

["0001-Enhanced-rsa_pkcs1_sign_tr-to-protect-against-HW-sof.patch" (text/x-patch)]

From 69748c6d0aa20597b5e002983f3bed0e0c42d994 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 10:20:37 +0200
Subject: [PATCH 1/2] Enhanced rsa_pkcs1_sign_tr() to protect against
 HW/software errors

That verifies the output of the timing-resistant version of the
signing function, to make it also fault-resistant.
---
 rsa-pkcs1-sign-tr.c | 46 +++++++++++++++++++++++++++++++++++++---------
 1 file changed, 37 insertions(+), 9 deletions(-)

diff --git a/rsa-pkcs1-sign-tr.c b/rsa-pkcs1-sign-tr.c
index 0f3a5a2..6237845 100644
--- a/rsa-pkcs1-sign-tr.c
+++ b/rsa-pkcs1-sign-tr.c
@@ -34,11 +34,31 @@
 #if HAVE_CONFIG_H
 # include "config.h"
 #endif
-
 #include "rsa.h"
 
 #include "pkcs1.h"
 
+/* Checks for any errors done in the RSA computation. That avoids
+ * attacks which rely on faults on hardware, or even software MPI
+ * implementation. */
+static int
+rsa_verify_res(const struct rsa_public_key *pub,
+	       mpz_t s, mpz_t m)
+{
+  mpz_t t;
+  int res;
+
+  mpz_init(t);
+
+  mpz_powm(t, s, pub-&gt;e, pub-&gt;n);
+
+  res = !mpz_cmp(m, t);
+
+  mpz_clear(t);
+  return res;
+}
+
+/* Side-channel resistant version of rsa_pkcs1_sign() */
 int
 rsa_pkcs1_sign_tr(const struct rsa_public_key *pub,
   	          const struct rsa_private_key *key,
@@ -46,23 +66,31 @@ rsa_pkcs1_sign_tr(const struct rsa_public_key *pub,
 	          size_t length, const uint8_t *digest_info,
    	          mpz_t s)
 {
-  mpz_t ri;
+  mpz_t ri, m;
+  int ret;
+
+  mpz_init(m);
 
-  if (pkcs1_rsa_digest_encode (s, key-&gt;size, length, digest_info))
+  if (pkcs1_rsa_digest_encode (m, key-&gt;size, length, digest_info))
     {
       mpz_init (ri);
 
-      _rsa_blind (pub, random_ctx, random, s, ri);
-      rsa_compute_root(key, s, s);
-      _rsa_unblind (pub, s, ri);
+      _rsa_blind (pub, random_ctx, random, m, ri);
+      rsa_compute_root(key, s, m);
 
-      mpz_clear (ri);
+      if (rsa_verify_res(pub, s, m) == 0)
+        ret = 0;
+      else
+        ret = 1;
 
-      return 1;
+      _rsa_unblind (pub, s, ri);
+      mpz_clear (ri);
     }
   else
     {
       mpz_set_ui(s, 0);
-      return 0;
+      ret = 0;
     }    
+  mpz_clear(m);
+  return ret;
 }
-- 
2.4.3


["0002-testsuite-Added-tests-for-rsa_pkcs1_sign_tr.patch" (text/x-patch)]

From 38f70b8e9f825218a9152f00db1d327b2e2ff4dd Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 10:43:13 +0200
Subject: [PATCH 2/2] testsuite: Added tests for rsa_pkcs1_sign_tr()

---
 testsuite/Makefile.in   |   2 +-
 testsuite/rsa-sign-tr.c | 137 ++++++++++++++++++++++++++++++++++++++++++++++++
 testsuite/testutils.c   |  42 +++++++++++++++
 testsuite/testutils.h   |   7 +++
 4 files changed, 187 insertions(+), 1 deletion(-)
 create mode 100644 testsuite/rsa-sign-tr.c

diff --git a/testsuite/Makefile.in b/testsuite/Makefile.in
index 426fe1a..6711628 100644
--- a/testsuite/Makefile.in
+++ b/testsuite/Makefile.in
@@ -35,7 +35,7 @@ TS_NETTLE_SOURCES = aes-test.c arcfour-test.c arctwo-test.c \
 TS_HOGWEED_SOURCES = sexp-test.c sexp-format-test.c \
 		     rsa2sexp-test.c sexp2rsa-test.c \
 		     bignum-test.c random-prime-test.c \
-		     pkcs1-test.c \
+		     pkcs1-test.c rsa-sign-tr.c \
 		     rsa-test.c rsa-encrypt-test.c rsa-keygen-test.c \
 		     dsa-test.c dsa-keygen-test.c \
 		     curve25519-dh-test.c \
diff --git a/testsuite/rsa-sign-tr.c b/testsuite/rsa-sign-tr.c
new file mode 100644
index 0000000..211dcde
--- /dev/null
+++ b/testsuite/rsa-sign-tr.c
@@ -0,0 +1,137 @@
+#include "testutils.h"
+
+#define MSG1 ((uint8_t*)"None so blind as those who will not see")
+#define MSG2 ((uint8_t*)"Fortune knocks once at every man's door")
+
+void
+test_main(void)
+{
+  struct rsa_public_key pub;
+  struct rsa_private_key key;
+
+  mpz_t expected;
+  
+  mpz_init(expected);
+  
+  rsa_private_key_init(&amp;key);
+  rsa_public_key_init(&amp;pub);
+
+  test_rsa_set_key_1(&amp;pub, &amp;key);
+  
+  /* Test signatures */
+  mpz_set_str(expected,
+	      "5a1d95b71a244dec17887b3fa4502439fd9d868ee12f716fbb53b2"
+	      "e7ca60e6922bfdb893cd62dba8e16ca7a4374962d407b6137b4322"
+	      "c76331588e087c823162349e40bb0cca762c7f253ea46141f88118"
+	      "78788b0759e2c880a089ecbdf447ea02ffa504336cb65bd79f20e1"
+	      "3d9af6ac5ac49656fa5cc06cae4f9df510",
+	      16);
+
+  test_rsa_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);
+
+  mpz_set_str(expected,
+	      "86114b62c2d22e2c9b075852df18dfb60c2f86ae8c4a852aff5db7"
+	      "164984b1ca3752ae0c1174604ceb46bc72870e87687e298210b88b"
+	      "48d0c5ac039c94a40349aaea1399aa60d953697916fbe5020c6751"
+	      "060e114588a9ef14751326432d564863d4e11e1e73dabd1f628c6e"
+	      "8866f8072d2a2dfd10d716d5d07a6ee57", 16);
+
+  test_rsa_tr(&amp;pub, &amp;key, sizeof(MSG2)-1, MSG2, expected);
+
+  /* 777-bit key, generated by
+   *
+   *   lsh-keygen -a rsa -l 777 -f advanced-hex
+   *
+   * Interesting because the size of n doesn't equal the sum of the
+   * sizes of p and q. 
+   *
+   * (private-key (rsa-pkcs1
+   *        (n #013b04440e3eef25 d51c738d508a7fa8 b3445180c342af0f
+   *            4cb5a789047300e2 cfc5c5450974cfc2 448aeaaa7f43c374
+   *            c9a3b038b181f2d1 0f1a2327fd2c087b a49bf1086969fd2c
+   *            d1df3fd69f81fa4b 162cc8bbb363fc95 b7b24b9c53d0c67e
+   *            f52b#)
+   *        (e #3f1a012d#)
+   *        (d #f9bae89dacca6cca c21e0412b4df8355 6fe7c5322bbae8ad
+   *            3f11494fd12bc076 d4a7da3050fe109d 2074db09cc6a93b4
+   *            745479522558379e a0ddfa74f86c9e9e a22c3b0e93d51447
+   *            0feb38105dd35395 63b91ee32776f40c 67b2a175690f7abb
+   *            25#)
+   *        (p #0b73c990eeda0a2a 2c26416052c85560 0c5c0f5ce86a8326
+   *            166acea91786237a 7ff884e66dbfdd3a ab9d9801414c1506
+   *            8b#)
+   *        (q #1b81c19a62802a41 9c99283331b0badb 08eb0c25ffce0fbf
+   *            50017850036f32f3 2132a845b91a5236 61f7b451d587383f
+   *            e1#)
+   *        (a #0a912fc93a6cca6b 3521725a3065b3be 3c9745e29c93303d
+   *            7d29316c6cafa4a2 89945f964fcdea59 1f9d248b0b6734be
+   *            c9#)
+   *        (b #1658eca933251813 1eb19c77aba13d73 e0b8f4ce986d7615
+   *            764c6b0b03c18146 46b7f332c43e05c5 351e09006979ca5b
+   *            05#)
+   *        (c #0114720dace7b27f 2bf2850c1804869f 79a0aad0ec02e6b4
+   *            05e1831619db2f10 bb9b6a8fd5c95df2 eb78f303ea0c0cc8
+   *            06#)))
+   */
+  
+  mpz_set_str(pub.n,
+	      "013b04440e3eef25" "d51c738d508a7fa8" "b3445180c342af0f"
+	      "4cb5a789047300e2" "cfc5c5450974cfc2" "448aeaaa7f43c374"
+	      "c9a3b038b181f2d1" "0f1a2327fd2c087b" "a49bf1086969fd2c"
+	      "d1df3fd69f81fa4b" "162cc8bbb363fc95" "b7b24b9c53d0c67e"
+	      "f52b", 16);
+  
+  mpz_set_str(pub.e, "3f1a012d", 16);
+
+  ASSERT (rsa_public_key_prepare(&amp;pub));
+  
+  mpz_set_str(key.p,
+	      "0b73c990eeda0a2a" "2c26416052c85560" "0c5c0f5ce86a8326"
+	      "166acea91786237a" "7ff884e66dbfdd3a" "ab9d9801414c1506"
+	      "8b", 16);
+  
+  mpz_set_str(key.q,
+	      "1b81c19a62802a41" "9c99283331b0badb" "08eb0c25ffce0fbf"
+	      "50017850036f32f3" "2132a845b91a5236" "61f7b451d587383f"
+	      "e1", 16);
+  
+  mpz_set_str(key.a,
+	      "0a912fc93a6cca6b" "3521725a3065b3be" "3c9745e29c93303d"
+	      "7d29316c6cafa4a2" "89945f964fcdea59" "1f9d248b0b6734be"
+	      "c9", 16);
+  
+  mpz_set_str(key.b,
+	      "1658eca933251813" "1eb19c77aba13d73" "e0b8f4ce986d7615"
+	      "764c6b0b03c18146" "46b7f332c43e05c5" "351e09006979ca5b"
+	      "05", 16);
+  
+  mpz_set_str(key.c,
+	      "0114720dace7b27f" "2bf2850c1804869f" "79a0aad0ec02e6b4"
+	      "05e1831619db2f10" "bb9b6a8fd5c95df2" "eb78f303ea0c0cc8"
+	      "06", 16);
+
+  ASSERT (rsa_private_key_prepare(&amp;key));
+  ASSERT (pub.size == key.size);
+
+  /* Test signatures */
+  mpz_set_str(expected,
+	      "63629074879115869fbe830c7cd28ac7fb87df06312572428ba412"
+	      "f730f1f88e1f26cd60955a7ff81743bb0f8a0ebb4a05ad621544b3"
+	      "2d189b436f753de1dcdf9d29ae048585f1408397dcf9381324498e"
+	      "c7df9d35f7b221ec1a2a9e426e07ca8b", 16);
+
+  test_rsa_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);
+
+  /* Test sha1 signature */
+  mpz_set_str(expected,
+	      "9f87de78ee3c6df00444b290aef88765c8367a166e3aeb7e4de0fb"
+	      "94a38a48452902f6cd5ebefbd1eaa095ca855e565c1d95c4d8ef2d"
+	      "3962a4c707001e1e2112028bda4c78d2d303b11b6cae33a777fd4d"
+	      "96d766be5e1bff00defc7628a8a7e8a0", 16);
+
+  test_rsa_tr(&amp;pub, &amp;key, sizeof(MSG2)-1, MSG2, expected);
+
+  rsa_private_key_clear(&amp;key);
+  rsa_public_key_clear(&amp;pub);
+  mpz_clear(expected);
+}
diff --git a/testsuite/testutils.c b/testsuite/testutils.c
index 1ef04c9..efbbc93 100644
--- a/testsuite/testutils.c
+++ b/testsuite/testutils.c
@@ -765,6 +765,48 @@ test_rsa_set_key_1(struct rsa_public_key *pub,
 }
 
 void
+test_rsa_tr(struct rsa_public_key *pub,
+	     struct rsa_private_key *key,
+	     unsigned di_length,
+	     const uint8_t *di,
+	     mpz_t expected)
+{
+  mpz_t signature;
+  struct knuth_lfib_ctx lfib;
+  
+  knuth_lfib_init(&amp;lfib, 1111);
+
+  mpz_init(signature);
+
+  ASSERT(rsa_pkcs1_sign_tr(pub, key, 
+  		    &amp;lfib, (nettle_random_func *) knuth_lfib_random,
+		    di_length, di, signature));
+
+  if (verbose)
+    {
+      fprintf(stderr, "rsa-pkcs1-tr signature: ");
+      mpz_out_str(stderr, 16, signature);
+      fprintf(stderr, "\nrsa-pkcs1-tr expected: ");
+      mpz_out_str(stderr, 16, expected);
+      fprintf(stderr, "\n");
+    }
+
+  ASSERT (mpz_cmp(signature, expected) == 0);
+
+  /* Try bad data */
+  ASSERT (!rsa_pkcs1_verify(pub, 16, "The magick words", signature));
+
+  /* Try correct data */
+  ASSERT (rsa_pkcs1_verify(pub, di_length, di, signature));
+
+  /* Try bad signature */
+  mpz_combit(signature, 17);
+  ASSERT (!rsa_pkcs1_verify(pub, di_length, di, signature));
+
+  mpz_clear(signature);
+}
+
+void
 test_rsa_md5(struct rsa_public_key *pub,
 	     struct rsa_private_key *key,
 	     mpz_t expected)
diff --git a/testsuite/testutils.h b/testsuite/testutils.h
index 405f89f..c43c70b 100644
--- a/testsuite/testutils.h
+++ b/testsuite/testutils.h
@@ -190,6 +190,13 @@ test_rsa_set_key_1(struct rsa_public_key *pub,
 		   struct rsa_private_key *key);
 
 void
+test_rsa_tr(struct rsa_public_key *pub,
+	     struct rsa_private_key *key,
+	     unsigned di_length,
+	     const uint8_t *di,
+	     mpz_t expected);
+
+void
 test_rsa_md5(struct rsa_public_key *pub,
 	     struct rsa_private_key *key,
 	     mpz_t expected);
-- 
2.4.3


["0001-doc-mention-rsa_pkcs1_sign_tr-and-rsa_pkcs1_verify.patch" (text/x-patch)]

From cb4c2839e2b2df12d6fd29fe481d7c2d688ff92d Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 11:55:19 +0200
Subject: [PATCH] doc: mention rsa_pkcs1_sign_tr() and rsa_pkcs1_verify()

---
 nettle.texinfo | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/nettle.texinfo b/nettle.texinfo
index 7fe2471..2bcdb2e 100644
--- a/nettle.texinfo
+++ b/nettle.texinfo
@@ -3646,7 +3646,14 @@ There is currently no support for using SHA224 or SHA384 with
 @acronym{RSA} signatures, since there's no gain in either computation
 time nor message size compared to using SHA256 and SHA512, respectively.
 
-Creation and verification of signatures is done with the following functions:
+Creation and verification of signatures is recommended to be done with the following \
functions. +They provide a side-channel (fault and timing) resistant implementation.
+@deftypefun int rsa_pkcs1_sign_tr(const struct rsa_public_key *@var{pub}, const \
struct rsa_private_key *@var{key}, void *@var{random_ctx}, nettle_random_func \
*@var{random}, size_t @var{length}, const uint8_t *@var{digest_info}, mpz_t @var{s}); \
+@deftypefunx int rsa_pkcs1_verify(const struct rsa_public_key *@var{key}, size_t \
@var{length}, const uint8_t *digest_info, const mpz_t @var{signature}); +
+
+Other functions are also available but cannot be used by application that require
+a side-channel silent implementation. These are listed below.
 
 @deftypefun int rsa_md5_sign (const struct rsa_private_key *@var{key}, struct \
md5_ctx *@var{hash}, mpz_t @var{signature})  @deftypefunx int rsa_sha1_sign (const \
struct rsa_private_key *@var{key}, struct sha1_ctx *@var{hash}, mpz_t \
                @var{signature})
-- 
2.4.3



</body></email><email><emailId>20150903104810</emailId><senderName>Florian Weimer</senderName><senderEmail>fweimer@redhat.com</senderEmail><timestampReceived>2015-09-03 10:48:10-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On 09/03/2015 11:56 AM, Nikos Mavrogiannopoulos wrote:
&gt; That verifies the output of the timing-resistant version of the
&gt; signing function, to make it also fault-resistant.

Doesn't this leave the miscomputed signature in the output parameter, so
that it would still be used by a caller which ignores the return value?

-- 
Florian Weimer / Red Hat Product Security

</body></email><email><emailId>20150903110145</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-09-03 11:01:45-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On Thu, Sep 3, 2015 at 12:48 PM, Florian Weimer &lt;fweimer@redhat.com&gt; wrote:
&gt; On 09/03/2015 11:56 AM, Nikos Mavrogiannopoulos wrote:
&gt;&gt; That verifies the output of the timing-resistant version of the
&gt;&gt; signing function, to make it also fault-resistant.
&gt; Doesn't this leave the miscomputed signature in the output parameter, so
&gt; that it would still be used by a caller which ignores the return value?

Correct, it would be better to set to zero on failure.

</body></email><email><emailId>20150904064925</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-04 06:49:25-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Said that, there is rsa_pkcs1_sign_tr() which is supposed to be the
&gt; side-channel resistant version of rsa_pkcs1_sign() and can have this
&gt; additional check with no changes.

What about rsa_decrypt_tr? Does it also need this check? Attacks are a
bit harder since even with known plaintext, there's padding that is
supposed to be random. But I imagine it's possible with improved attacks
that either work with partial knowledge, or exploit weeknesses in the
randomness used for padding.

&gt; I attach a small patch which verifies the output of this signing
&gt; function.

Thanks. Some comments below.

&gt; Niels, what about the rest of the functions? 

Not sure, maybe we can try to deprecate the signing functions. I guess
it's possible to "fix" them by recomputing the public key from the
private key, but that's a bit awkward, and if the point is to guard
against incorrect computations using secret data, maybe one shouldn't
trust that computation either.

&gt; @@ -46,23 +66,31 @@ rsa_pkcs1_sign_tr(const struct rsa_public_key *pub,
&gt; 	          size_t length, const uint8_t *digest_info,
&gt; 	          mpz_t s)
&gt; {
&gt; -  mpz_t ri;
&gt; +  mpz_t ri, m;
&gt; +  int ret;
&gt; +
&gt; +  mpz_init(m);
&gt; 
&gt; -  if (pkcs1_rsa_digest_encode (s, key-&gt;size, length, digest_info))
&gt; +  if (pkcs1_rsa_digest_encode (m, key-&gt;size, length, digest_info))
&gt; {
&gt; mpz_init (ri);
&gt; 
&gt; -      _rsa_blind (pub, random_ctx, random, s, ri);
&gt; -      rsa_compute_root(key, s, s);
&gt; -      _rsa_unblind (pub, s, ri);
&gt; +      _rsa_blind (pub, random_ctx, random, m, ri);
&gt; +      rsa_compute_root(key, s, m);
&gt; 
&gt; -      mpz_clear (ri);
&gt; +      if (rsa_verify_res(pub, s, m) == 0)
&gt; +        ret = 0;
&gt; +      else
&gt; +        ret = 1;
&gt; 
&gt; -      return 1;
&gt; +      _rsa_unblind (pub, s, ri);
&gt; +      mpz_clear (ri);
&gt; }

Maybe factor out a function rsa_compute_root_tr (in particular, that
would be useful if we want the same check in rsa_decrypt_tr). And as
Florian pointed out, it seems reasonable to set s = 0 on all failure
cases.

I've consided if maybe we can just abort() if the check fails, but
since we do have a return value, we can just as well use that. And the
check can trigger also for an invalid private key, and in that case, an
abort() is maybe a bit too unfriendly.

&gt; --- /dev/null
&gt; +++ b/testsuite/rsa-sign-tr.c
&gt; @@ -0,0 +1,137 @@
&gt; +#include "testutils.h"
&gt; +
&gt; +#define MSG1 ((uint8_t*)"None so blind as those who will not see")
&gt; +#define MSG2 ((uint8_t*)"Fortune knocks once at every man's door")
&gt; +
[...]
&gt; +  test_rsa_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);

If this is the only use of test_rsa_tr, maybe put it directly in this
file. And it's not obvious from the name if it tests signing or
encryption or both.

&gt; --- a/testsuite/testutils.c
&gt; +++ b/testsuite/testutils.c
&gt; @@ -765,6 +765,48 @@ test_rsa_set_key_1(struct rsa_public_key *pub,
&gt; }
&gt; 
&gt; void
&gt; +test_rsa_tr(struct rsa_public_key *pub,
&gt; +	     struct rsa_private_key *key,
&gt; +	     unsigned di_length,
&gt; +	     const uint8_t *di,
&gt; +	     mpz_t expected)
&gt; +{
&gt; +  mpz_t signature;
&gt; +  struct knuth_lfib_ctx lfib;
&gt; +  
&gt; +  knuth_lfib_init(&amp;lfib, 1111);
&gt; +
&gt; +  mpz_init(signature);
&gt; +
&gt; +  ASSERT(rsa_pkcs1_sign_tr(pub, key, 
&gt; +  		    &amp;lfib, (nettle_random_func *) knuth_lfib_random,
&gt; +		    di_length, di, signature));
&gt; +
&gt; +  if (verbose)
&gt; +    {
&gt; +      fprintf(stderr, "rsa-pkcs1-tr signature: ");
&gt; +      mpz_out_str(stderr, 16, signature);
&gt; +      fprintf(stderr, "\nrsa-pkcs1-tr expected: ");
&gt; +      mpz_out_str(stderr, 16, expected);
&gt; +      fprintf(stderr, "\n");
&gt; +    }
&gt; +
&gt; +  ASSERT (mpz_cmp(signature, expected) == 0);
&gt; +
&gt; +  /* Try bad data */
&gt; +  ASSERT (!rsa_pkcs1_verify(pub, 16, "The magick words", signature));
&gt; +
&gt; +  /* Try correct data */
&gt; +  ASSERT (rsa_pkcs1_verify(pub, di_length, di, signature));
&gt; +
&gt; +  /* Try bad signature */
&gt; +  mpz_combit(signature, 17);
&gt; +  ASSERT (!rsa_pkcs1_verify(pub, di_length, di, signature));

It would be good to also do a test with an invalid private key, e.g,
using p+2 instead of p. That should trigger the new check, so that
rsa_pkcs1_sign_tr returns failure and sets s == 0.

&gt; --- a/nettle.texinfo
&gt; +++ b/nettle.texinfo
&gt; @@ -3646,7 +3646,14 @@ There is currently no support for using SHA224 or SHA384 \
&gt; with @acronym{RSA} signatures, since there's no gain in either computation
&gt; time nor message size compared to using SHA256 and SHA512, respectively.
&gt; 
&gt; -Creation and verification of signatures is done with the following functions:
&gt; +Creation and verification of signatures is recommended to be done with the \
&gt; following functions. +They provide a side-channel (fault and timing) resistant \
&gt; implementation. +@deftypefun int rsa_pkcs1_sign_tr(const struct rsa_public_key \
&gt; *@var{pub}, const struct rsa_private_key *@var{key}, void *@var{random_ctx}, \
&gt; nettle_random_func *@var{random}, size_t @var{length}, const uint8_t \
&gt; *@var{digest_info}, mpz_t @var{s}); +@deftypefunx int rsa_pkcs1_verify(const struct \
&gt; rsa_public_key *@var{key}, size_t @var{length}, const uint8_t *digest_info, const \
&gt; mpz_t @var{signature}); +

I wasn't aware that these functions lacked documentation. Good catch. I
think we need to say something about the digest_info argument. 

I think the rsa_pkcs1_verify function should move to the other verify
functions (and be at the top of that list, if it's the recommended one).
Side-channel resistance isn't relevant for verify.

And there's an @end deftypefun missing, isn't it?

(We may also need some public functions for constructing digest_infos,
a bit like pkcs1_rsa_sha256_encode. But the current internal functions
don't fit well with rsa_pkcs1_sign_tr. So the "CRT-hardening" fixes
shouldn't block on that).

&gt; +Other functions are also available but cannot be used by application that require
&gt; +a side-channel silent implementation. These are listed below.

For improved side-channel silence, one could also let rsa_compute_root
use mpz_powm_sec if available. But the current GMP plans are to not try
to provide side-schannel silent functions on the mpz level (mpz_powm_sec
is an exception), so to really take advantage of GMP improvements in
side-channel silence, one would need to move to using the lower-level
mpn interface.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150904151128</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-09-04 15:11:28-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On Fri, Sep 4, 2015 at 8:49 AM, Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:
&gt; &gt; Said that, there is rsa_pkcs1_sign_tr() which is supposed to be the
&gt; &gt; side-channel resistant version of rsa_pkcs1_sign() and can have this
&gt; &gt; additional check with no changes.
&gt; What about rsa_decrypt_tr? Does it also need this check? Attacks are a
&gt; bit harder since even with known plaintext, there's padding that is
&gt; supposed to be random. But I imagine it's possible with improved attacks
&gt; that either work with partial knowledge, or exploit weeknesses in the
&gt; randomness used for padding.

The issue with signatures is that you send or store the output once
calculated and that can be observed by an adversary. When decrypting I
don't think the threat model is the same. At least for the purposes of
TLS protecting decryption wouldn't add anything.

&gt; Maybe factor out a function rsa_compute_root_tr (in particular, that
&gt; would be useful if we want the same check in rsa_decrypt_tr).

I don't think that would be necessary (see above for the decrypt function).

&gt; &gt; +  /* Try bad signature */
&gt; &gt; +  mpz_combit(signature, 17);
&gt; &gt; +  ASSERT (!rsa_pkcs1_verify(pub, di_length, di, signature));
&gt; 
&gt; It would be good to also do a test with an invalid private key, e.g,
&gt; using p+2 instead of p. That should trigger the new check, so that
&gt; rsa_pkcs1_sign_tr returns failure and sets s == 0.

Good idea.

&gt; &gt; --- a/nettle.texinfo
&gt; &gt; +++ b/nettle.texinfo
&gt; &gt; @@ -3646,7 +3646,14 @@ There is currently no support for using SHA224 or SHA384 \
&gt; &gt; with @acronym{RSA} signatures, since there's no gain in either computation
&gt; &gt; time nor message size compared to using SHA256 and SHA512, respectively.
&gt; &gt; 
&gt; &gt; -Creation and verification of signatures is done with the following functions:
&gt; &gt; +Creation and verification of signatures is recommended to be done with the \
&gt; &gt; following functions. +They provide a side-channel (fault and timing) resistant \
&gt; &gt; implementation. +@deftypefun int rsa_pkcs1_sign_tr(const struct rsa_public_key \
&gt; &gt; *@var{pub}, const struct rsa_private_key *@var{key}, void *@var{random_ctx}, \
&gt; &gt; nettle_random_func *@var{random}, size_t @var{length}, const uint8_t \
&gt; &gt; *@var{digest_info}, mpz_t @var{s}); +@deftypefunx int rsa_pkcs1_verify(const \
&gt; &gt; struct rsa_public_key *@var{key}, size_t @var{length}, const uint8_t \
&gt; &gt; *digest_info, const mpz_t @var{signature}); +
&gt; I wasn't aware that these functions lacked documentation. Good catch. I
&gt; think we need to say something about the digest_info argument.


&gt; I think the rsa_pkcs1_verify function should move to the other verify
&gt; functions (and be at the top of that list, if it's the recommended one).

Would that make sense if we deprecate everything else? I thought that
everything else is deprecated first should be listed the recommended
functions, rather than trying to look for them within a very long list
of deprecated functions.

&gt; Side-channel resistance isn't relevant for verify.

I made that clear.

&gt; (We may also need some public functions for constructing digest_infos,
&gt; a bit like pkcs1_rsa_sha256_encode. But the current internal functions
&gt; don't fit well with rsa_pkcs1_sign_tr. So the "CRT-hardening" fixes
&gt; shouldn't block on that).

That would be indeed useful (though unrelated with this patch set).

&gt; &gt; +Other functions are also available but cannot be used by application that \
&gt; &gt; require +a side-channel silent implementation. These are listed below.
&gt; For improved side-channel silence, one could also let rsa_compute_root
&gt; use mpz_powm_sec if available. But the current GMP plans are to not try
&gt; to provide side-schannel silent functions on the mpz level (mpz_powm_sec
&gt; is an exception), so to really take advantage of GMP improvements in
&gt; side-channel silence, one would need to move to using the lower-level
&gt; mpn interface.

That's pretty sad. It means that applications couldn't take advantage
of that without being rewritten.

In any case the attached patch set should address all your comments.

regards,
Nikos


["0001-Enhanced-rsa_pkcs1_sign_tr-to-protect-against-HW-sof.patch" (text/x-patch)]

From 9a59ad5a3d96bde3be81c9542328403a958a442d Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 10:20:37 +0200
Subject: [PATCH 1/3] Enhanced rsa_pkcs1_sign_tr() to protect against
 HW/software errors

That verifies the output of the timing-resistant version of the
signing function, to make it also fault-resistant.
---
 rsa-pkcs1-sign-tr.c | 49 ++++++++++++++++++++++++++++++++++++++++---------
 1 file changed, 40 insertions(+), 9 deletions(-)

diff --git a/rsa-pkcs1-sign-tr.c b/rsa-pkcs1-sign-tr.c
index 0f3a5a2..f2b3e45 100644
--- a/rsa-pkcs1-sign-tr.c
+++ b/rsa-pkcs1-sign-tr.c
@@ -34,11 +34,31 @@
 #if HAVE_CONFIG_H
 # include "config.h"
 #endif
-
 #include "rsa.h"
 
 #include "pkcs1.h"
 
+/* Checks for any errors done in the RSA computation. That avoids
+ * attacks which rely on faults on hardware, or even software MPI
+ * implementation. */
+static int
+rsa_verify_res(const struct rsa_public_key *pub,
+	       mpz_t s, mpz_t m)
+{
+  mpz_t t;
+  int res;
+
+  mpz_init(t);
+
+  mpz_powm(t, s, pub-&gt;e, pub-&gt;n);
+
+  res = !mpz_cmp(m, t);
+
+  mpz_clear(t);
+  return res;
+}
+
+/* Side-channel resistant version of rsa_pkcs1_sign() */
 int
 rsa_pkcs1_sign_tr(const struct rsa_public_key *pub,
   	          const struct rsa_private_key *key,
@@ -46,23 +66,34 @@ rsa_pkcs1_sign_tr(const struct rsa_public_key *pub,
 	          size_t length, const uint8_t *digest_info,
    	          mpz_t s)
 {
-  mpz_t ri;
+  mpz_t ri, m;
+  int ret;
+
+  mpz_init(m);
 
-  if (pkcs1_rsa_digest_encode (s, key-&gt;size, length, digest_info))
+  if (pkcs1_rsa_digest_encode (m, key-&gt;size, length, digest_info))
     {
       mpz_init (ri);
 
-      _rsa_blind (pub, random_ctx, random, s, ri);
-      rsa_compute_root(key, s, s);
-      _rsa_unblind (pub, s, ri);
+      _rsa_blind (pub, random_ctx, random, m, ri);
+      rsa_compute_root(key, s, m);
 
-      mpz_clear (ri);
+      if (rsa_verify_res(pub, s, m) == 0)
+        {
+          mpz_set_ui(s, 0);
+          ret = 0;
+        }
+      else
+        ret = 1;
 
-      return 1;
+      _rsa_unblind (pub, s, ri);
+      mpz_clear (ri);
     }
   else
     {
       mpz_set_ui(s, 0);
-      return 0;
+      ret = 0;
     }    
+  mpz_clear(m);
+  return ret;
 }
-- 
2.4.3


["0002-testsuite-Added-tests-for-rsa_pkcs1_sign_tr.patch" (text/x-patch)]

From 363c217483f7d92e77d251317642434b5e76e9f0 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 10:43:13 +0200
Subject: [PATCH 2/3] testsuite: Added tests for rsa_pkcs1_sign_tr()

---
 testsuite/Makefile.in   |   2 +-
 testsuite/rsa-sign-tr.c | 194 ++++++++++++++++++++++++++++++++++++++++++++++++
 testsuite/testutils.h   |   7 ++
 3 files changed, 202 insertions(+), 1 deletion(-)
 create mode 100644 testsuite/rsa-sign-tr.c

diff --git a/testsuite/Makefile.in b/testsuite/Makefile.in
index 426fe1a..6711628 100644
--- a/testsuite/Makefile.in
+++ b/testsuite/Makefile.in
@@ -35,7 +35,7 @@ TS_NETTLE_SOURCES = aes-test.c arcfour-test.c arctwo-test.c \
 TS_HOGWEED_SOURCES = sexp-test.c sexp-format-test.c \
 		     rsa2sexp-test.c sexp2rsa-test.c \
 		     bignum-test.c random-prime-test.c \
-		     pkcs1-test.c \
+		     pkcs1-test.c rsa-sign-tr.c \
 		     rsa-test.c rsa-encrypt-test.c rsa-keygen-test.c \
 		     dsa-test.c dsa-keygen-test.c \
 		     curve25519-dh-test.c \
diff --git a/testsuite/rsa-sign-tr.c b/testsuite/rsa-sign-tr.c
new file mode 100644
index 0000000..fbe8e5c
--- /dev/null
+++ b/testsuite/rsa-sign-tr.c
@@ -0,0 +1,194 @@
+#include "testutils.h"
+#include "knuth-lfib.h"
+#include "nettle-internal.h"
+
+#define MSG1 ((uint8_t*)"None so blind as those who will not see")
+#define MSG2 ((uint8_t*)"Fortune knocks once at every man's door")
+
+static void
+test_rsa_sign_tr(struct rsa_public_key *pub,
+	     struct rsa_private_key *key,
+	     unsigned di_length,
+	     const uint8_t *di,
+	     mpz_t expected)
+{
+  mpz_t signature;
+  struct knuth_lfib_ctx lfib;
+  
+  knuth_lfib_init(&amp;lfib, 1111);
+
+  mpz_init(signature);
+
+  /* Try bad private key */
+  mpz_add_ui(key-&gt;p, key-&gt;p, 2);
+
+  ASSERT(!rsa_pkcs1_sign_tr(pub, key, 
+  		    &amp;lfib, (nettle_random_func *) knuth_lfib_random,
+		    di_length, di, signature));
+
+  mpz_sub_ui(key-&gt;p, key-&gt;p, 2);
+
+  ASSERT(!mpz_cmp_ui(signature, 0));
+
+  /* Try the good private key */
+  ASSERT(rsa_pkcs1_sign_tr(pub, key, 
+  		    &amp;lfib, (nettle_random_func *) knuth_lfib_random,
+		    di_length, di, signature));
+
+  if (verbose)
+    {
+      fprintf(stderr, "rsa-pkcs1-tr signature: ");
+      mpz_out_str(stderr, 16, signature);
+      fprintf(stderr, "\nrsa-pkcs1-tr expected: ");
+      mpz_out_str(stderr, 16, expected);
+      fprintf(stderr, "\n");
+    }
+
+  ASSERT (mpz_cmp(signature, expected) == 0);
+
+  /* Try bad data */
+  ASSERT (!rsa_pkcs1_verify(pub, 16, (void*)"The magick words", signature));
+
+  /* Try correct data */
+  ASSERT (rsa_pkcs1_verify(pub, di_length, di, signature));
+
+  /* Try bad signature */
+  mpz_combit(signature, 17);
+  ASSERT (!rsa_pkcs1_verify(pub, di_length, di, signature));
+
+  mpz_clear(signature);
+}
+
+
+void
+test_main(void)
+{
+  struct rsa_public_key pub;
+  struct rsa_private_key key;
+
+  mpz_t expected;
+  
+  mpz_init(expected);
+  
+  rsa_private_key_init(&amp;key);
+  rsa_public_key_init(&amp;pub);
+
+  test_rsa_set_key_1(&amp;pub, &amp;key);
+  
+  /* Test signatures */
+  mpz_set_str(expected,
+	      "5a1d95b71a244dec17887b3fa4502439fd9d868ee12f716fbb53b2"
+	      "e7ca60e6922bfdb893cd62dba8e16ca7a4374962d407b6137b4322"
+	      "c76331588e087c823162349e40bb0cca762c7f253ea46141f88118"
+	      "78788b0759e2c880a089ecbdf447ea02ffa504336cb65bd79f20e1"
+	      "3d9af6ac5ac49656fa5cc06cae4f9df510",
+	      16);
+
+  test_rsa_sign_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);
+
+  mpz_set_str(expected,
+	      "86114b62c2d22e2c9b075852df18dfb60c2f86ae8c4a852aff5db7"
+	      "164984b1ca3752ae0c1174604ceb46bc72870e87687e298210b88b"
+	      "48d0c5ac039c94a40349aaea1399aa60d953697916fbe5020c6751"
+	      "060e114588a9ef14751326432d564863d4e11e1e73dabd1f628c6e"
+	      "8866f8072d2a2dfd10d716d5d07a6ee57", 16);
+
+  test_rsa_sign_tr(&amp;pub, &amp;key, sizeof(MSG2)-1, MSG2, expected);
+
+  /* 777-bit key, generated by
+   *
+   *   lsh-keygen -a rsa -l 777 -f advanced-hex
+   *
+   * Interesting because the size of n doesn't equal the sum of the
+   * sizes of p and q. 
+   *
+   * (private-key (rsa-pkcs1
+   *        (n #013b04440e3eef25 d51c738d508a7fa8 b3445180c342af0f
+   *            4cb5a789047300e2 cfc5c5450974cfc2 448aeaaa7f43c374
+   *            c9a3b038b181f2d1 0f1a2327fd2c087b a49bf1086969fd2c
+   *            d1df3fd69f81fa4b 162cc8bbb363fc95 b7b24b9c53d0c67e
+   *            f52b#)
+   *        (e #3f1a012d#)
+   *        (d #f9bae89dacca6cca c21e0412b4df8355 6fe7c5322bbae8ad
+   *            3f11494fd12bc076 d4a7da3050fe109d 2074db09cc6a93b4
+   *            745479522558379e a0ddfa74f86c9e9e a22c3b0e93d51447
+   *            0feb38105dd35395 63b91ee32776f40c 67b2a175690f7abb
+   *            25#)
+   *        (p #0b73c990eeda0a2a 2c26416052c85560 0c5c0f5ce86a8326
+   *            166acea91786237a 7ff884e66dbfdd3a ab9d9801414c1506
+   *            8b#)
+   *        (q #1b81c19a62802a41 9c99283331b0badb 08eb0c25ffce0fbf
+   *            50017850036f32f3 2132a845b91a5236 61f7b451d587383f
+   *            e1#)
+   *        (a #0a912fc93a6cca6b 3521725a3065b3be 3c9745e29c93303d
+   *            7d29316c6cafa4a2 89945f964fcdea59 1f9d248b0b6734be
+   *            c9#)
+   *        (b #1658eca933251813 1eb19c77aba13d73 e0b8f4ce986d7615
+   *            764c6b0b03c18146 46b7f332c43e05c5 351e09006979ca5b
+   *            05#)
+   *        (c #0114720dace7b27f 2bf2850c1804869f 79a0aad0ec02e6b4
+   *            05e1831619db2f10 bb9b6a8fd5c95df2 eb78f303ea0c0cc8
+   *            06#)))
+   */
+  
+  mpz_set_str(pub.n,
+	      "013b04440e3eef25" "d51c738d508a7fa8" "b3445180c342af0f"
+	      "4cb5a789047300e2" "cfc5c5450974cfc2" "448aeaaa7f43c374"
+	      "c9a3b038b181f2d1" "0f1a2327fd2c087b" "a49bf1086969fd2c"
+	      "d1df3fd69f81fa4b" "162cc8bbb363fc95" "b7b24b9c53d0c67e"
+	      "f52b", 16);
+  
+  mpz_set_str(pub.e, "3f1a012d", 16);
+
+  ASSERT (rsa_public_key_prepare(&amp;pub));
+  
+  mpz_set_str(key.p,
+	      "0b73c990eeda0a2a" "2c26416052c85560" "0c5c0f5ce86a8326"
+	      "166acea91786237a" "7ff884e66dbfdd3a" "ab9d9801414c1506"
+	      "8b", 16);
+  
+  mpz_set_str(key.q,
+	      "1b81c19a62802a41" "9c99283331b0badb" "08eb0c25ffce0fbf"
+	      "50017850036f32f3" "2132a845b91a5236" "61f7b451d587383f"
+	      "e1", 16);
+  
+  mpz_set_str(key.a,
+	      "0a912fc93a6cca6b" "3521725a3065b3be" "3c9745e29c93303d"
+	      "7d29316c6cafa4a2" "89945f964fcdea59" "1f9d248b0b6734be"
+	      "c9", 16);
+  
+  mpz_set_str(key.b,
+	      "1658eca933251813" "1eb19c77aba13d73" "e0b8f4ce986d7615"
+	      "764c6b0b03c18146" "46b7f332c43e05c5" "351e09006979ca5b"
+	      "05", 16);
+  
+  mpz_set_str(key.c,
+	      "0114720dace7b27f" "2bf2850c1804869f" "79a0aad0ec02e6b4"
+	      "05e1831619db2f10" "bb9b6a8fd5c95df2" "eb78f303ea0c0cc8"
+	      "06", 16);
+
+  ASSERT (rsa_private_key_prepare(&amp;key));
+  ASSERT (pub.size == key.size);
+
+  /* Test signatures */
+  mpz_set_str(expected,
+	      "63629074879115869fbe830c7cd28ac7fb87df06312572428ba412"
+	      "f730f1f88e1f26cd60955a7ff81743bb0f8a0ebb4a05ad621544b3"
+	      "2d189b436f753de1dcdf9d29ae048585f1408397dcf9381324498e"
+	      "c7df9d35f7b221ec1a2a9e426e07ca8b", 16);
+
+  test_rsa_sign_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);
+
+  /* Test sha1 signature */
+  mpz_set_str(expected,
+	      "9f87de78ee3c6df00444b290aef88765c8367a166e3aeb7e4de0fb"
+	      "94a38a48452902f6cd5ebefbd1eaa095ca855e565c1d95c4d8ef2d"
+	      "3962a4c707001e1e2112028bda4c78d2d303b11b6cae33a777fd4d"
+	      "96d766be5e1bff00defc7628a8a7e8a0", 16);
+
+  test_rsa_sign_tr(&amp;pub, &amp;key, sizeof(MSG2)-1, MSG2, expected);
+
+  rsa_private_key_clear(&amp;key);
+  rsa_public_key_clear(&amp;pub);
+  mpz_clear(expected);
+}
diff --git a/testsuite/testutils.h b/testsuite/testutils.h
index 405f89f..c43c70b 100644
--- a/testsuite/testutils.h
+++ b/testsuite/testutils.h
@@ -190,6 +190,13 @@ test_rsa_set_key_1(struct rsa_public_key *pub,
 		   struct rsa_private_key *key);
 
 void
+test_rsa_tr(struct rsa_public_key *pub,
+	     struct rsa_private_key *key,
+	     unsigned di_length,
+	     const uint8_t *di,
+	     mpz_t expected);
+
+void
 test_rsa_md5(struct rsa_public_key *pub,
 	     struct rsa_private_key *key,
 	     mpz_t expected);
-- 
2.4.3


["0003-doc-mention-rsa_pkcs1_sign_tr-and-rsa_pkcs1_verify.patch" (text/x-patch)]

From f932d48c010a0b87260df8757183f6f68b32a726 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 3 Sep 2015 11:55:19 +0200
Subject: [PATCH 3/3] doc: mention rsa_pkcs1_sign_tr() and rsa_pkcs1_verify()

---
 nettle.texinfo | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/nettle.texinfo b/nettle.texinfo
index 7fe2471..bdad236 100644
--- a/nettle.texinfo
+++ b/nettle.texinfo
@@ -3646,7 +3646,15 @@ There is currently no support for using SHA224 or SHA384 with
 @acronym{RSA} signatures, since there's no gain in either computation
 time nor message size compared to using SHA256 and SHA512, respectively.
 
-Creation and verification of signatures is done with the following functions:
+Creation and verification of signatures is recommended to be done with the following \
functions. +The functions with a '_tr' suffix provide a side-channel (fault and \
timing) resistant implementation when relevant. +@deftypefun int \
rsa_pkcs1_sign_tr(const struct rsa_public_key *@var{pub}, const struct \
rsa_private_key *@var{key}, void *@var{random_ctx}, nettle_random_func *@var{random}, \
size_t @var{length}, const uint8_t *@var{digest_info}, mpz_t @var{s}); +@deftypefunx \
int rsa_decrypt_tr(const struct rsa_public_key *@var{pub}, const struct \
rsa_private_key *@var{key}, void *@var{random_ctx}, nettle_random_func *@var{random}, \
size_t *@var{length}, uint8_t *@var{message}, const mpz_t @var{gibberish}); \
+@deftypefunx int rsa_pkcs1_verify(const struct rsa_public_key *@var{key}, size_t \
@var{length}, const uint8_t *digest_info, const mpz_t @var{signature}); +@end \
deftypefun +
+Other functions are also available but cannot be used by application that require
+a side-channel silent implementation. These are listed below.
 
 @deftypefun int rsa_md5_sign (const struct rsa_private_key *@var{key}, struct \
md5_ctx *@var{hash}, mpz_t @var{signature})  @deftypefunx int rsa_sha1_sign (const \
struct rsa_private_key *@var{key}, struct sha1_ctx *@var{hash}, mpz_t \
                @var{signature})
-- 
2.4.3



</body></email><email><emailId>20150907202653</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-07 20:26:53-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; In any case the attached patch set should address all your comments.

Thanks.

&gt; From 9a59ad5a3d96bde3be81c9542328403a958a442d Mon Sep 17 00:00:00 2001
&gt; From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
&gt; Date: Thu, 3 Sep 2015 10:20:37 +0200
&gt; Subject: [PATCH 1/3] Enhanced rsa_pkcs1_sign_tr() to protect against
&gt;  HW/software errors

Applied (not yet pushed, though).

&gt; From 363c217483f7d92e77d251317642434b5e76e9f0 Mon Sep 17 00:00:00 2001
&gt; From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
&gt; Date: Thu, 3 Sep 2015 10:43:13 +0200
&gt; Subject: [PATCH 2/3] testsuite: Added tests for rsa_pkcs1_sign_tr()

Applied with some tweaks, see below.

&gt; ---
&gt;  testsuite/Makefile.in   |   2 +-
&gt;  testsuite/rsa-sign-tr.c | 194 ++++++++++++++++++++++++++++++++++++++++++++++++
&gt;  testsuite/testutils.h   |   7 ++
&gt;  3 files changed, 202 insertions(+), 1 deletion(-)
&gt;  create mode 100644 testsuite/rsa-sign-tr.c
&gt;
&gt; diff --git a/testsuite/Makefile.in b/testsuite/Makefile.in
&gt; index 426fe1a..6711628 100644
&gt; --- a/testsuite/Makefile.in
&gt; +++ b/testsuite/Makefile.in
&gt; @@ -35,7 +35,7 @@ TS_NETTLE_SOURCES = aes-test.c arcfour-test.c arctwo-test.c \
&gt;  TS_HOGWEED_SOURCES = sexp-test.c sexp-format-test.c \
&gt;  		     rsa2sexp-test.c sexp2rsa-test.c \
&gt;  		     bignum-test.c random-prime-test.c \
&gt; -		     pkcs1-test.c \
&gt; +		     pkcs1-test.c rsa-sign-tr.c \
&gt;  		     rsa-test.c rsa-encrypt-test.c rsa-keygen-test.c \
&gt;  		     dsa-test.c dsa-keygen-test.c \
&gt;  		     curve25519-dh-test.c \

This needs a make test-rules, to also update the included
.test-rules.make.

I also renamed the file to rsa-sign-tr-test.c, for consistency with the
other tests.

&gt; diff --git a/testsuite/rsa-sign-tr.c b/testsuite/rsa-sign-tr.c
&gt; new file mode 100644
&gt; index 0000000..fbe8e5c
&gt; --- /dev/null
&gt; +++ b/testsuite/rsa-sign-tr.c
&gt; @@ -0,0 +1,194 @@
&gt; +#include "testutils.h"
&gt; +#include "knuth-lfib.h"
&gt; +#include "nettle-internal.h"
&gt; +
&gt; +#define MSG1 ((uint8_t*)"None so blind as those who will not see")
&gt; +#define MSG2 ((uint8_t*)"Fortune knocks once at every man's door")

[...]

&gt; +  test_rsa_sign_tr(&amp;pub, &amp;key, sizeof(MSG1)-1, MSG1, expected);

sizeof here returns sizeof (uint8_t *), which isn't what you want...
I'll fix (not done yet).

&gt; --- a/testsuite/testutils.h
&gt; +++ b/testsuite/testutils.h
&gt; @@ -190,6 +190,13 @@ test_rsa_set_key_1(struct rsa_public_key *pub,
&gt;  		   struct rsa_private_key *key);
&gt;  
&gt;  void
&gt; +test_rsa_tr(struct rsa_public_key *pub,
&gt; +	     struct rsa_private_key *key,
&gt; +	     unsigned di_length,
&gt; +	     const uint8_t *di,
&gt; +	     mpz_t expected);
&gt; +
&gt; +void

This looks like is a leftover from the previous version of the patch? I
dropped this part.

&gt; From f932d48c010a0b87260df8757183f6f68b32a726 Mon Sep 17 00:00:00 2001
&gt; From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
&gt; Date: Thu, 3 Sep 2015 11:55:19 +0200
&gt; Subject: [PATCH 3/3] doc: mention rsa_pkcs1_sign_tr() and rsa_pkcs1_verify()

I haven't gotten to the docs yet. 

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150910211322</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-10 21:13:22-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Niels, what about the rest of the functions? They can protect from
&gt; neither timing nor fault attacks. 

I'm considering adding _tr versions on all of them (currently 8
functions). They're going to be just a few lines each, if they use a
common helper function like (untested)

  int
  rsa_compute_root_tr(const struct rsa_public_key *pub,
  		      const struct rsa_private_key *key,
  		      void *random_ctx, nettle_random_func *random,
  		      mpz_t x, const mpz_t m)
  {
    int res;
    mpz_t t, c, ri;
  
    mpz_init (t);
    mpz_init (c);
  
    _rsa_blind (pub, random_ctx, random, c, t, m);
  
    rsa_compute_root (key, c, c);
  
    mpz_powm(t, c, pub-&gt;e, pub-&gt;n);
    res = (mpz_cmp(m, t) == 0);
  
    if (res)
      _rsa_unblind (pub, x, t, c);
    else
      mpz_set_ui (x, 0);
  
    mpz_clear (c);
    mpz_clear (ri);
  
    return res;
  }

(possibly zeroing of x on failure could be left to the caller, current
signature functions also have the error case of pkcs1_rsa_*_encode
failing, and set the result to zero in that case. Another reasonable
alternative could be to simply leave the result variable unchanged on
failure, but I think that requires an additional mpz temporary).

To make it neater, the _rsa_blind and _rsa_unblind functions need an
additional argument, but they are clearly marked as internal so I don't
think that should cause any problems.

What do you think?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150911084047</emailId><senderName>Florian Weimer</senderName><senderEmail>fweimer@redhat.com</senderEmail><timestampReceived>2015-09-11 08:40:47-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On 09/10/2015 11:13 PM, Niels Möller wrote:

&gt; To make it neater, the _rsa_blind and _rsa_unblind functions need an
&gt; additional argument, but they are clearly marked as internal so I don't
&gt; think that should cause any problems.

Do you mean they are private because they have leading underscore?

They are listed in the installed header file, after all, and they are
exported from the DSO as well.

-- 
Florian Weimer / Red Hat Product Security

</body></email><email><emailId>20150911093037</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-11 09:30:37-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Florian Weimer &lt;fweimer@redhat.com&gt; writes:

&gt; Do you mean they are private because they have leading underscore?

The leading underscore is a hint. They are private because they are not
documented in the manual, and in the header file, they are clearly
marked as internal functions.

&gt; They are listed in the installed header file, after all, and they are
&gt; exported from the DSO as well.

There's no attempt to technically prevent applications from accessing
internal functions (which might be a bit old fashioned).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150915191308</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-15 19:13:08-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I'm considering adding _tr versions on all of them (currently 8
&gt; functions). They're going to be just a few lines each, if they use a
&gt; common helper function

I've pushed ongoing work to the branch rsa-crt-hardening.

&gt; To make it neater, the _rsa_blind and _rsa_unblind functions need an
&gt; additional argument, but they are clearly marked as internal so I don't
&gt; think that should cause any problems.

And those two functions are now static (file-local) on that branch. 

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150917192759</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-17 19:27:59-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I've pushed ongoing work to the branch rsa-crt-hardening.

And now I've added a couple of new functions. Any comments before I
merge this to the master branch? ChangeLog entries below.

The idea is that when we add documentation for the new functions it is
easier to discourage use of the old RSA signature functions, which date
back to 2003.

Regards,
/Niels

2015-09-17  Niels Möller  &lt;nisse@lysator.liu.se&gt;

	    * rsa-md5-sign-tr.c (rsa_md5_sign_tr, rsa_md5_sign_digest_tr): New
	    file, new functions.
	    * rsa-sha1-sign-tr.c (rsa_sha1_sign_tr, rsa_sha1_sign_digest_tr):
	    Likewise.
	    * rsa-sha256-sign-tr.c (rsa_sha256_sign_tr)
	    (rsa_sha256_sign_digest_tr): Likewise.
	    * rsa-sha512-sign-tr.c (rsa_sha512_sign_tr)
	    (rsa_sha512_sign_digest_tr): Likewise.
	    * rsa.h: Added corresponding prototypes.
	    * Makefile.in (hogweed_SOURCES): Added new files.
	    * testsuite/testutils.c (SIGN): Extend macro to test new
	    functions, and the rsa_*_sign_digest functions. Updated callers.

2015-09-14  Niels Möller  &lt;nisse@lysator.liu.se&gt;

	    * rsa-sign-tr.c (rsa_blind, rsa_unblind): Moved here, made static,
	    dropped leading underscore.
	    * rsa-blind.c: Deleted file.
	    * rsa.h: Deleted coresponding declarations.

	    * rsa-decrypt-tr.c (rsa_decrypt_tr): Use rsa_compute_root_tr.
	    Mainly for simplicity and consistency, I'm not aware of any CRT
	    fault attacks on RSA decryption.

	    * testsuite/rsa-encrypt-test.c (test_main): Added test with
	    invalid private key.

	    * rsa-sign-tr.c (rsa_compute_root_tr): New file and function.
	    * rsa.h: Declare it.
	    * rsa-pkcs1-sign-tr.c (rsa_pkcs1_sign_tr): Use rsa_compute_root_tr.
	    (rsa_verify_res): Deleted, replaced by rsa_compute_root_tr.
	    * testsuite/rsa-sign-tr-test.c (test_rsa_sign_tr): Check that
	    signature argument is unchanged on failure.
	    * Makefile.in (hogweed_SOURCES): Added rsa-sign-tr.c.

2015-09-13  Niels Möller  &lt;nisse@lysator.liu.se&gt;

	    * rsa-blind.c (_rsa_blind, _rsa_unblind): Separate source and
	    destination arguments. Updated callers.


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150918094247</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-09-18 09:42:47-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On Tue, Sep 15, 2015 at 9:13 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt; nisse@lysator.liu.se (Niels M=C3=B6ller) writes:
&gt;&gt; I'm considering adding _tr versions on all of them (currently 8
&gt;&gt; functions). They're going to be just a few lines each, if they use a
&gt;&gt; common helper function
&gt; I've pushed ongoing work to the branch rsa-crt-hardening.
&gt;&gt; To make it neater, the _rsa_blind and _rsa_unblind functions need an
&gt;&gt; additional argument, but they are clearly marked as internal so I don't
&gt;&gt; think that should cause any problems.
&gt; And those two functions are now static (file-local) on that branch.

I think the best approach is not to export such functions at all if
they are not intended to be used. Now it is too late though for that.
By the time functions are exported (via the map file), they are part
of the ABI. Breaking the ABI it for a security fix is not that nice.

regards,
Nikos

</body></email><email><emailId>20150918094409</emailId><senderName>Florian Weimer</senderName><senderEmail>fweimer@redhat.com</senderEmail><timestampReceived>2015-09-18 09:44:09-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On 09/18/2015 11:42 AM, Nikos Mavrogiannopoulos wrote:
&gt; On Tue, Sep 15, 2015 at 9:13 PM, Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:
&gt;&gt; nisse@lysator.liu.se (Niels Möller) writes:
&gt;&gt;&gt; I'm considering adding _tr versions on all of them (currently 8
&gt;&gt;&gt; functions). They're going to be just a few lines each, if they use a
&gt;&gt;&gt; common helper function
&gt;&gt; I've pushed ongoing work to the branch rsa-crt-hardening.
&gt;&gt;&gt; To make it neater, the _rsa_blind and _rsa_unblind functions need an
&gt;&gt;&gt; additional argument, but they are clearly marked as internal so I don't
&gt;&gt;&gt; think that should cause any problems.
&gt;&gt; And those two functions are now static (file-local) on that branch.
&gt; 
&gt; I think the best approach is not to export such functions at all if
&gt; they are not intended to be used. Now it is too late though for that.
&gt; By the time functions are exported (via the map file), they are part
&gt; of the ABI. Breaking the ABI it for a security fix is not that nice.

Yes, for distributions, it would be best if the functions remain
exported until there is a soname bump for another reason.

-- 
Florian Weimer / Red Hat Product Security

</body></email><email><emailId>20150918111849</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-09-18 11:18:49-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; I think the best approach is not to export such functions at all if
&gt; they are not intended to be used.

I can understand that point of view, but it's not going to happen to
Nettle any time soon.

&gt; Breaking the ABI it for a security fix is not that nice.

It's possible to do a "security fix-only" release which only enables crt
hardening for rsa_pkcs1_sign_tr (basically, your patch from a few weeks
ago). Do you think that is motivated? In that case, I agree that we
shouldn't make any incompatible changes to internal but visible
functions.

My plan has been to *not* do any bug-fix-only relase, but do do a new
regular release reasonably soon, including the crt-related improvements,
the updated sha3, and possibly some other minor improvements.

As for _rsa_blind, my thinking is that it's a bit bad to change it's
behaviour not because it will break applications that misuse internal
functions, but because it might break such applications in unovious
ways. So I'm now leaning towards simply removing those functions (making
them static), which should offending applications fail obviously, with a
link failure.

We made similar changes fairly recently (pkcs1_signature_prefix, dropped
in the 2.5 release three years ago), and as far as I remember, there
were no big problems with that.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150918120327</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-09-18 12:03:27-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On Fri, Sep 18, 2015 at 1:18 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;&gt; I think the best approach is not to export such functions at all if
&gt;&gt; they are not intended to be used.
&gt; I can understand that point of view, but it's not going to happen to
&gt; Nettle any time soon.
&gt;&gt; Breaking the ABI it for a security fix is not that nice.
&gt; It's possible to do a "security fix-only" release which only enables crt
&gt; hardening for rsa_pkcs1_sign_tr (basically, your patch from a few weeks
&gt; ago). Do you think that is motivated? In that case, I agree that we
&gt; shouldn't make any incompatible changes to internal but visible
&gt; functions.
&gt; My plan has been to *not* do any bug-fix-only relase, but do do a new
&gt; regular release reasonably soon, including the crt-related improvements,
&gt; the updated sha3, and possibly some other minor improvements.

That seems reasonable, but still it doesn't change the fact that this
will be a bug fix release, as it will include bug fixes :)

&gt; As for _rsa_blind, my thinking is that it's a bit bad to change it's
&gt; behaviour not because it will break applications that misuse internal
&gt; functions, but because it might break such applications in unovious
&gt; ways. So I'm now leaning towards simply removing those functions (making
&gt; them static), which should offending applications fail obviously, with a
&gt; link failure.

Why break them at all? The issue is that if you don't bump the so
version some programs will stop working in a distribution if nettle is
upgraded. Why not make a new symbol which is kept internal, and the
old symbol remains exported and is simply a wrapper to the new symbol
that keeps compatibility?

&gt; We made similar changes fairly recently (pkcs1_signature_prefix, dropped
&gt; in the 2.5 release three years ago), and as far as I remember, there
&gt; were no big problems with that.

I think the usage and visibility of nettle has changed much since
then. However, it can be that there is no user of this function, or
there may be a single user of which you'll break his already shipped
program. There is no way you can tell how may programs rely on that.
That's why I don't see a reason to break the ABI within a non major
release. You may mark this function (and all the other internals) as
deprecated [0], and plan for retiring them in the next so version
bump. Doing it earlier you take a bet which may or may not affect some
users of nettle.

regards,
Nikos

[0]. Using __attribute__ ((__deprecated__))

</body></email><email><emailId>20151013172320</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-10-13 17:23:20-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

I've haven't had much time for nettle hacking the last few weeks. 

My plan now is to merge the changes on the "rsa-crt-hardening" branch,
except that I will keep the old _rsa_blind and _rsa_unblind unchanged
(and unused, since the new code uses slightly different and static
versions), and clearly mark them as deprecated in the header file.

Regards,
/Niels





-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151022073840</emailId><senderName>Florian Weimer</senderName><senderEmail>fweimer@redhat.com</senderEmail><timestampReceived>2015-10-22 07:38:40-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

On 10/13/2015 07:23 PM, Niels Möller wrote:
&gt; I've haven't had much time for nettle hacking the last few weeks. 
&gt; 
&gt; My plan now is to merge the changes on the "rsa-crt-hardening" branch,
&gt; except that I will keep the old _rsa_blind and _rsa_unblind unchanged
&gt; (and unused, since the new code uses slightly different and static
&gt; versions), and clearly mark them as deprecated in the header file.

Sounds good to me.

Florian


</body></email><email><emailId>20151115204955</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-11-15 20:49:55-0400</timestampReceived><subject>Re: RSA-CRT hardening</subject><body>

Florian Weimer &lt;fweimer@redhat.com&gt; writes:

&gt; On 10/13/2015 07:23 PM, Niels Möller wrote:
&gt;&gt; I've haven't had much time for nettle hacking the last few weeks. 
&gt;&gt; 
&gt;&gt; My plan now is to merge the changes on the "rsa-crt-hardening" branch,
&gt;&gt; except that I will keep the old _rsa_blind and _rsa_unblind unchanged
&gt;&gt; (and unused, since the new code uses slightly different and static
&gt;&gt; versions), and clearly mark them as deprecated in the header file.
&gt;
&gt; Sounds good to me.

Done and pushed now.

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150812150524</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-12 15:05:24-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; The attached two patches update SHA3 to the final published version.

Thanks! Sorry I've been a bit silent during the summer, I've been on a
long and partly offline vacation, and I'm going off again tomorrow and
over the weekend.

I really appreciate your work on sha3, it's pretty important. I'll
review the patches when I get back.

A question for the list: Is there any use of the current sha3 code
(which is the hash algorithm at the time keccak won the sha3
competition)? Do we need to keep some kind of support for that
algorithm, or can we just drop it and do standard sha3 only?

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150813083540</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-13 08:35:40-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Wed, Aug 12, 2015 at 5:05 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;
&gt;&gt; The attached two patches update SHA3 to the final published version.
&gt;
&gt; Thanks! Sorry I've been a bit silent during the summer, I've been on a
&gt; long and partly offline vacation, and I'm going off again tomorrow and
&gt; over the weekend.
&gt; I really appreciate your work on sha3, it's pretty important. I'll
&gt; review the patches when I get back.
&gt; A question for the list: Is there any use of the current sha3 code
&gt; (which is the hash algorithm at the time keccak won the sha3
&gt; competition)? Do we need to keep some kind of support for that
&gt; algorithm, or can we just drop it and do standard sha3 only?

Not for my use cases. What I worry most is how would applications detect th=
e
correct sha3 being in place? Would there be a new definition in the header
or should applications check the nettle version number? (if it is the latte=
r
it means that I cannot have a hot fix in Fedora for example, unless there i=
s
a new release).

regards,
Nikos

</body></email><email><emailId>20150819102455</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-19 10:24:55-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; The attached two patches update SHA3 to the final published version.

&gt; --- a/testsuite/sha3-224-test.c
&gt; +++ b/testsuite/sha3-224-test.c
&gt; @@ -1,775 +1,1259 @@
&gt;  #include "testutils.h"
&gt;  
&gt;  void
&gt; -test_main(void)
&gt; +test_main (void)
&gt;  {
&gt;    /* Extracted from ShortMsgKAT_224.txt using sha3.awk. */
&gt; -  test_hash(&amp;nettle_sha3_224, /* 0 octets */
&gt; -	    SHEX(""),
&gt; -	    SHEX("F71837502BA8E10837BDD8D365ADB85591895602FC552B48B7390ABD"));

Did you create the testcases in the same way, using sha3.awk? Where are
the updated ShortMsgKAT_*.txt files? Or did you use some other method? 

&gt; diff --git a/sha3.c b/sha3.c
&gt; index 84bc7ea..24581db 100644
&gt; --- a/sha3.c
&gt; +++ b/sha3.c
&gt; @@ -94,7 +94,7 @@ _sha3_pad (struct sha3_state *state,
&gt;  	   unsigned block_size, uint8_t *block, unsigned pos)
&gt;  {
&gt;    assert (pos &lt; block_size);
&gt; -  block[pos++] = 1;
&gt; +  block[pos++] = 6;
&gt;  
&gt;    memset (block + pos, 0, block_size - pos);
&gt;    block[block_size - 1] |= 0x80;

Looks simple enough ;-) As I understand it, after a quick look at the
final spec, message padding used to be the bit pattern 100...001, and
now it's 01100..001, where the initial "01" are spcific to using the
Keccac permutation for SHA3, for "domain separation".

Have NIST published a summary of their changes?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150819111413</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-19 11:14:13-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Not for my use cases. What I worry most is how would applications detect the
&gt; correct sha3 being in place? 

I'm not sure how it should be handled. If we think of it as a bugfix,
the soname would be the same, and some applications using sha3 might want
some runtime check. For the serpent byteorder fix (nettle-2.2), we
didn't bump the soname.

The important question is, what applications are using Nettle's current
sha3 code? https://codesearch.debian.net/search?q=sha3_[0-9]*_update
finds only the Haskell bindings. Are there any Haskell people on this
list who can comment on any need for bug-compatibility?

&gt; Would there be a new definition in the header
&gt; or should applications check the nettle version number?

For compile-time check, we could add an

#define NETTLE_SHA3_NIST 1

in sha3.h. Would that be of any help for applications? For runtime
checks, I think the simple (but not very beautiful) way is to hash the
empty string and look at the output.

&gt; (if it is the latter
&gt; it means that I cannot have a hot fix in Fedora for example, unless there is
&gt; a new release).

I'm afraid it will cause confusion to fix this without increasing
the version number in some way. Do you think that a nettle-3.2 release
(with fixed sha3, and a couple of other smaller changes) is needed soon?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150819130634</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-19 13:06:34-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Wed, Aug 19, 2015 at 12:24 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; =
wrote:

&gt; Did you create the testcases in the same way, using sha3.awk? Where are
&gt; the updated ShortMsgKAT_*.txt files? Or did you use some other method?

I used sha3.awk, and then run indent.

&gt; Looks simple enough ;-) As I understand it, after a quick look at the
&gt; final spec, message padding used to be the bit pattern 100...001, and
&gt; now it's 01100..001, where the initial "01" are spcific to using the
&gt; Keccac permutation for SHA3, for "domain separation".
&gt; Have NIST published a summary of their changes?

Didn't find any.

regards,
Nikos

</body></email><email><emailId>20150819130909</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-19 13:09:09-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Wed, Aug 19, 2015 at 1:14 PM, Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;
&gt;&gt; Not for my use cases. What I worry most is how would applications detect the
&gt;&gt; correct sha3 being in place?
&gt; I'm not sure how it should be handled. If we think of it as a bugfix,
&gt; the soname would be the same, and some applications using sha3 might want
&gt; some runtime check. For the serpent byteorder fix (nettle-2.2), we
&gt; didn't bump the soname.

No I also don't think we need to bump the soname.
nettle_version_major() and nettle_version_minor() could be used for
runtime checks.

&gt; The important question is, what applications are using Nettle's current
&gt; sha3 code? https://codesearch.debian.net/search?q=sha3_[0-9]*_update
&gt; finds only the Haskell bindings. Are there any Haskell people on this
&gt; list who can comment on any need for bug-compatibility?
&gt;&gt; Would there be a new definition in the header
&gt;&gt; or should applications check the nettle version number?
&gt; For compile-time check, we could add an
&gt; #define NETTLE_SHA3_NIST 1

That would be best.

&gt; in sha3.h. Would that be of any help for applications? For runtime
&gt; checks, I think the simple (but not very beautiful) way is to hash the
&gt; empty string and look at the output.

I wouldn't really want applications to do that. The best would be to
depend on nettle 3.2 and if they really want compatibility with 3.1
then they should use the nettle_version_xxx() functions.

&gt; I'm afraid it will cause confusion to fix this without increasing
&gt; the version number in some way. Do you think that a nettle-3.2 release
&gt; (with fixed sha3, and a couple of other smaller changes) is needed soon?

That would be really helpful.

regards,
Nikos

</body></email><email><emailId>20150822173356</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-22 17:33:56-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; On Wed, Aug 19, 2015 at 12:24 PM, Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:
&gt;
&gt;&gt; Did you create the testcases in the same way, using sha3.awk? Where are
&gt;&gt; the updated ShortMsgKAT_*.txt files? Or did you use some other method?
&gt;
&gt; I used sha3.awk, and then run indent.

I'd like to include a link to the testvectors used for input. Where did
you get the updated ShortMsgKAT_*.txt?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150824073828</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-24 07:38:28-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Sat, Aug 22, 2015 at 7:33 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt;&gt; On Wed, Aug 19, 2015 at 12:24 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.s=
e&gt; wrote:
&gt;&gt;&gt; Did you create the testcases in the same way, using sha3.awk? Where are
&gt;&gt;&gt; the updated ShortMsgKAT_*.txt files? Or did you use some other method?
&gt;&gt; I used sha3.awk, and then run indent.
&gt; I'd like to include a link to the testvectors used for input. Where did
&gt; you get the updated ShortMsgKAT_*.txt?

I believe I took them from: http://keccak.noekeon.org/files.html

regards,
Nikos

</body></email><email><emailId>20150824080742</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-24 08:07:42-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; I believe I took them from: http://keccak.noekeon.org/files.html

The latest testvectors I find there are
http://keccak.noekeon.org/KeccakKAT-3.zip, which seem to be the old
version, SHA3-256("") ==
C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470.

Hmm. Looks like the updated testvectors now live at at
https://github.com/gvanas/KeccakCodePackage/tree/master/TestVectors

E.g.,
https://github.com/gvanas/KeccakCodePackage/blob/master/TestVectors/ShortMsgKAT_SHA3-256.txt
says that SHA3-256("") ==
A7FFC6F8BF1ED76651C14756A061D662F580FF4DE43B49FA82D80A4B80F8434A.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150825194918</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-25 19:49:18-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; The attached two patches update SHA3 to the final published version.

Committed and pushed now. Thanks!

I reformatted the testsuite files, to get saner diffs to the previous
version. I also added a define NETTLE_SHA3_FIPS202 to sha3.h.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150826074314</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-08-26 07:43:14-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

On Tue, Aug 25, 2015 at 9:49 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;&gt; The attached two patches update SHA3 to the final published version.
&gt; Committed and pushed now. Thanks!
&gt; I reformatted the testsuite files, to get saner diffs to the previous
&gt; version. I also added a define NETTLE_SHA3_FIPS202 to sha3.h.

I was wondering whether we should also add an HMAC API for SHA3. While
it is easy to do a MAC from SHA-3 only HMAC is defined in FIPS202.
Attached you'll find an initial patch, but unfortunately I could find
no test vectors to verify.

regards,
Nikos

["0001-Added-helper-functions-for-HMAC-SHA3.patch" (text/x-patch)]

From 8415362cbc1de8b22a220f4bfefe876aa67fa1bc Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Wed, 26 Aug 2015 09:33:59 +0200
Subject: [PATCH] Added helper functions for HMAC-SHA3

---
 Makefile.in     |  1 +
 hmac-sha3-224.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++
 hmac-sha3-256.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++
 hmac-sha3-384.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++
 hmac-sha3-512.c | 60 +++++++++++++++++++++++++++++++++++++++++++++++
 hmac.h          | 72 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 313 insertions(+)
 create mode 100644 hmac-sha3-224.c
 create mode 100644 hmac-sha3-256.c
 create mode 100644 hmac-sha3-384.c
 create mode 100644 hmac-sha3-512.c

diff --git a/Makefile.in b/Makefile.in
index 1bb750d..cd2a491 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -106,6 +106,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
 		 gosthash94.c gosthash94-meta.c \
 		 hmac.c hmac-md5.c hmac-ripemd160.c hmac-sha1.c \
 		 hmac-sha224.c hmac-sha256.c hmac-sha384.c hmac-sha512.c \
+		 hmac-sha3-224.c hmac-sha3-256.c hmac-sha3-384.c hmac-sha3-512.c \
 		 knuth-lfib.c \
 		 md2.c md2-meta.c md4.c md4-meta.c \
 		 md5.c md5-compress.c md5-compat.c md5-meta.c \
diff --git a/hmac-sha3-224.c b/hmac-sha3-224.c
new file mode 100644
index 0000000..47a0289
--- /dev/null
+++ b/hmac-sha3-224.c
@@ -0,0 +1,60 @@
+/* hmac-sha3-224.c
+
+   HMAC-SHA3-224 message authentication code.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "hmac.h"
+
+void
+hmac_sha3_224_set_key(struct hmac_sha3_224_ctx *ctx,
+		    size_t key_length, const uint8_t *key)
+{
+  HMAC_SET_KEY(ctx, &amp;nettle_sha3_224, key_length, key);
+}
+
+void
+hmac_sha3_224_digest(struct hmac_sha3_224_ctx *ctx,
+		   size_t length, uint8_t *digest)
+{
+  HMAC_DIGEST(ctx, &amp;nettle_sha3_224, length, digest);
+}
+
+void
+hmac_sha3_224_update(struct hmac_sha3_224_ctx *ctx,
+		   size_t length, const uint8_t *data)
+{
+  sha3_224_update(&amp;ctx-&gt;state, length, data);
+}
+
diff --git a/hmac-sha3-256.c b/hmac-sha3-256.c
new file mode 100644
index 0000000..9dc4932
--- /dev/null
+++ b/hmac-sha3-256.c
@@ -0,0 +1,60 @@
+/* hmac-sha3-256.c
+
+   HMAC-SHA3-256 message authentication code.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "hmac.h"
+
+void
+hmac_sha3_256_set_key(struct hmac_sha3_256_ctx *ctx,
+		    size_t key_length, const uint8_t *key)
+{
+  HMAC_SET_KEY(ctx, &amp;nettle_sha3_256, key_length, key);
+}
+
+void
+hmac_sha3_256_digest(struct hmac_sha3_256_ctx *ctx,
+		   size_t length, uint8_t *digest)
+{
+  HMAC_DIGEST(ctx, &amp;nettle_sha3_256, length, digest);
+}
+
+void
+hmac_sha3_256_update(struct hmac_sha3_256_ctx *ctx,
+		   size_t length, const uint8_t *data)
+{
+  sha3_256_update(&amp;ctx-&gt;state, length, data);
+}
+
diff --git a/hmac-sha3-384.c b/hmac-sha3-384.c
new file mode 100644
index 0000000..b010f41
--- /dev/null
+++ b/hmac-sha3-384.c
@@ -0,0 +1,60 @@
+/* hmac-sha3-384.c
+
+   HMAC-SHA3-384 message authentication code.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "hmac.h"
+
+void
+hmac_sha3_384_set_key(struct hmac_sha3_384_ctx *ctx,
+		    size_t key_length, const uint8_t *key)
+{
+  HMAC_SET_KEY(ctx, &amp;nettle_sha3_384, key_length, key);
+}
+
+void
+hmac_sha3_384_digest(struct hmac_sha3_384_ctx *ctx,
+		   size_t length, uint8_t *digest)
+{
+  HMAC_DIGEST(ctx, &amp;nettle_sha3_384, length, digest);
+}
+
+void
+hmac_sha3_384_update(struct hmac_sha3_384_ctx *ctx,
+		   size_t length, const uint8_t *data)
+{
+  sha3_384_update(&amp;ctx-&gt;state, length, data);
+}
+
diff --git a/hmac-sha3-512.c b/hmac-sha3-512.c
new file mode 100644
index 0000000..e4dc75b
--- /dev/null
+++ b/hmac-sha3-512.c
@@ -0,0 +1,60 @@
+/* hmac-sha3-512.c
+
+   HMAC-SHA3-512 message authentication code.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "hmac.h"
+
+void
+hmac_sha3_512_set_key(struct hmac_sha3_512_ctx *ctx,
+		    size_t key_length, const uint8_t *key)
+{
+  HMAC_SET_KEY(ctx, &amp;nettle_sha3_512, key_length, key);
+}
+
+void
+hmac_sha3_512_digest(struct hmac_sha3_512_ctx *ctx,
+		   size_t length, uint8_t *digest)
+{
+  HMAC_DIGEST(ctx, &amp;nettle_sha3_512, length, digest);
+}
+
+void
+hmac_sha3_512_update(struct hmac_sha3_512_ctx *ctx,
+		   size_t length, const uint8_t *data)
+{
+  sha3_512_update(&amp;ctx-&gt;state, length, data);
+}
+
diff --git a/hmac.h b/hmac.h
index 40a8e77..6f04466 100644
--- a/hmac.h
+++ b/hmac.h
@@ -40,6 +40,7 @@
 #include "ripemd160.h"
 #include "sha1.h"
 #include "sha2.h"
+#include "sha3.h"
 
 #ifdef __cplusplus
 extern "C" {
@@ -68,6 +69,16 @@ extern "C" {
 #define hmac_sha512_set_key nettle_hmac_sha512_set_key
 #define hmac_sha512_update nettle_hmac_sha512_update
 #define hmac_sha512_digest nettle_hmac_sha512_digest
+#define hmac_sha3_224_set_key nettle_hmac_sha3_224_set_key
+#define hmac_sha3_224_digest nettle_hmac_sha3_224_digest
+#define hmac_sha3_256_set_key nettle_hmac_sha3_256_set_key
+#define hmac_sha3_256_update nettle_hmac_sha3_256_update
+#define hmac_sha3_256_digest nettle_hmac_sha3_256_digest
+#define hmac_sha3_384_set_key nettle_hmac_sha3_384_set_key
+#define hmac_sha3_384_digest nettle_hmac_sha3_384_digest
+#define hmac_sha3_512_set_key nettle_hmac_sha3_512_set_key
+#define hmac_sha3_512_update nettle_hmac_sha3_512_update
+#define hmac_sha3_512_digest nettle_hmac_sha3_512_digest
 
 void
 hmac_set_key(void *outer, void *inner, void *state,
@@ -203,6 +214,67 @@ void
 hmac_sha384_digest(struct hmac_sha512_ctx *ctx,
 		   size_t length, uint8_t *digest);
 
+/* SHA-3 */
+
+struct hmac_sha3_256_ctx HMAC_CTX(struct sha3_256_ctx);
+
+void
+hmac_sha3_256_set_key(struct hmac_sha3_256_ctx *ctx,
+		    size_t key_length, const uint8_t *key);
+
+void
+hmac_sha3_256_update(struct hmac_sha3_256_ctx *ctx,
+		   size_t length, const uint8_t *data);
+
+void
+hmac_sha3_256_digest(struct hmac_sha3_256_ctx *ctx,
+		   size_t length, uint8_t *digest);
+
+/* hmac-sha224 */
+struct hmac_sha3_224_ctx HMAC_CTX(struct sha3_224_ctx);
+
+void
+hmac_sha3_224_set_key(struct hmac_sha3_224_ctx *ctx,
+		    size_t key_length, const uint8_t *key);
+
+void
+hmac_sha3_224_update(struct hmac_sha3_224_ctx *ctx,
+		   size_t length, const uint8_t *data);
+
+void
+hmac_sha3_224_digest(struct hmac_sha3_224_ctx *ctx,
+		   size_t length, uint8_t *digest);
+
+/* hmac-sha512 */
+struct hmac_sha3_512_ctx HMAC_CTX(struct sha3_512_ctx);
+
+void
+hmac_sha3_512_set_key(struct hmac_sha3_512_ctx *ctx,
+		    size_t key_length, const uint8_t *key);
+
+void
+hmac_sha3_512_update(struct hmac_sha3_512_ctx *ctx,
+		   size_t length, const uint8_t *data);
+
+void
+hmac_sha3_512_digest(struct hmac_sha3_512_ctx *ctx,
+		   size_t length, uint8_t *digest);
+
+/* hmac-sha384 */
+struct hmac_sha3_384_ctx HMAC_CTX(struct sha3_384_ctx);
+
+void
+hmac_sha3_384_set_key(struct hmac_sha3_384_ctx *ctx,
+		    size_t key_length, const uint8_t *key);
+
+void
+hmac_sha3_384_update(struct hmac_sha3_384_ctx *ctx,
+		   size_t length, const uint8_t *data);
+
+void
+hmac_sha3_384_digest(struct hmac_sha3_384_ctx *ctx,
+		   size_t length, uint8_t *digest);
+
 #ifdef __cplusplus
 }
 #endif
-- 
2.4.3



</body></email><email><emailId>20150826082934</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-08-26 08:29:34-0400</timestampReceived><subject>Re: [PATCH] sha3 update</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; I was wondering whether we should also add an HMAC API for SHA3. While
&gt; it is easy to do a MAC from SHA-3 only HMAC is defined in FIPS202.

Technically, it makes more sense to do sha3-based mac without hmac. 
But if hmac-sha3 is the standardized way, we might need to support that.
I guess there aren't any applications of hmac-sha3 yet?

In Sec 7. "Conformance" in FIPS202, it says that HMAC is "One of the
approved uses of cryptographic hash functions", and then it specifies
the block sizes for the sha3 hashes (Table 3) so that hmac is well defined.

But I don't read that as recommending that anyone should use hmac-sha3.
And I think this table was added in response to one of the comments
(http://csrc.nist.gov/groups/ST/hash/sha-3/documents/fips202_comments/Rombouts_Peter_FIPS202_Comments.pdf)


&gt; Attached you'll find an initial patch, but unfortunately I could find
&gt; no test vectors to verify.

Maybe implementation of hmac-sha3 could wait until there's some
specification of it including test vectors?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150314113905</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-14 11:39:05-0400</timestampReceived><subject>Re: memeql_sec</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt; Is the compiler optimized code for that for loop faster or slower than a
&gt; loop suming the differentials?

Not sure. But I don't think performance is very important here, the
function is going to be used on pretty small inputs.

&gt;     volatile unsigned char d;
&gt;     for (d = 0; ap &gt;= a; ap--, bp--)
&gt;       d += (*ap - *bp);

I don't think that is correct, since d may wrap around to zero. One
would need to accumulate into a larger variable, something like

  unsigned d;
  for (d = 0; ap &gt;= a; ap--, bp--)
     d += (uint8_t)(*ap - *bp);

which, if unsigned int is 32 bits, would be correct for n up to 2^24. (I
think the cast necessary, to avoid values being promoted to *signed*
int). Using | is simpler and more robust.

&gt; NP: That would allow this function to take the uint8_t that most of
&gt; nettle operates with.

Like memxor, this function tries to mimic the conventions of the libc
mem* functions, not nettle's conventions.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150314114527</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-14 11:45:27-0400</timestampReceived><subject>Re: memeql_sec</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; nettle_memcmp?

I'd prefer to avoid "memcmp" in the name, since the return value is very
different from libc memcmp. Nettle's function returns 1 for equality,
and 0 for inequality. So the name should associate with equality.

"sec" in the name is a gmp convention for side-channel silent functions,
where it's usually a prefix, e.g., mpn_sec_mul. But it is used mainly
when there is some "non-sec" function computing the same thing but with
side-channel leaks.

&gt; nettle/mem.h, which will include memxor, memcmp, and memset?

Makes sense. Or memory.h, or memops.h.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150128205515</emailId><senderName>Joachim_Strömbergson</senderName><senderEmail>joachim@secworks.se</senderEmail><timestampReceived>2015-01-28 20:55:15-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Aloha!

Niels Möller wrote:
&gt; * OCB mode. Is it a good idea to try to get this into the release? I 
&gt; don't think patents are a problem, but I've mailed sflc, and it
&gt; would be nice to get their opinion too. Needs not just the code, but
&gt; also test cases and documentation.

IANAL, but License 1 for OCB should be very much in line with nettle:
http://web.cs.ucdavis.edu/~rogaway/ocb/license.htm

The problem I have with it is that it specifies Open-Source _Software_
implementations. Since I work on open source HW implementations I would
like to do OCB and that limitation is a bit of a problem.

OCB seems to be a very nice alternative/completent to GCM and CCM.

- -- 
Med vänlig hälsning, Yours

Joachim Strömbergson - Alltid i harmonisk svängning.
========================================================================
 Joachim Strömbergson          Secworks AB          joachim@secworks.se
========================================================================
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBCAAGBQJUyUyzAAoJEF3cfFQkIuyNnIMP/03bPkb56ayj++WCQVDZfQzq
OZLnz5oMZwSXCqhpy3/hU2PPbMndP3MUZ1QLNixbRUODniOMkQPILhGvSZsSss73
/urRoU+fopRYbSU+r4c4cWD2KgHDIkq6Ec01Y0fRErM1oidpmHQdKTh819H9wLqu
Ba7b9Vpe5Fbchyl7HqkvP5z2yUGInNzPOaU8UI7cH2UI8JOg1UUOdIvZysFny4GY
WhEY8fOwvqGpt2X5MWN3lg4FrXBrCofRyLEl5tJGMtx4RzivqxlcM2N2Zn2EPQDJ
h9SOJFRMY2Vbs6yGoFo6uass6mUr5hesNTsy4Ks3sMtoZ7OTv9WAuSGhhrkdffNN
ky9Wh/hz5SNEkpWReNkP3RDYKr0eLnbe+M7pmQVXGLD3+/IGiKNu5w1QzizmdqwK
uBSwauybtgFxGrxXV2YBJp4zkwBrNH0V1BfP+CavyjcUIxcxe6mhsBKhObgM2Acn
kDQi8uBmjjnXcdwl/F2d2pEGwksRrRCk/ZSfRbDg/lsvJvC+kCTFYBXPLyQX0Awq
ko77l7l9XQ0dnpAIqA6I6kSrzZvh4M7KSY3ZVmyPa3CvMsjIVHGE0DanOG43OcI4
+fvP1CGbxJOkHuSkS56ErXRlshcS3BXpTz0SLggzfk0zUwx7oBK2Q5T1U4sgXUZO
SuL7MiRzCU3u4jWd/+Db
=HAAq
-----END PGP SIGNATURE-----

</body></email><email><emailId>20150128211509</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-28 21:15:09-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

Joachim Strömbergson &lt;joachim@secworks.se&gt; writes:

&gt; IANAL, but License 1 for OCB should be very much in line with nettle:
&gt; http://web.cs.ucdavis.edu/~rogaway/ocb/license.htm
&gt;
&gt; The problem I have with it is that it specifies Open-Source _Software_
&gt; implementations. Since I work on open source HW implementations I would
&gt; like to do OCB and that limitation is a bit of a problem.

I also noticed that, but it's an unlikely problem for nettle. In theory
I guess one could tart from a C implementation in nettle and translate
it to verilog/vhdl code for a hardware design, but I suspect that's not
a good way to do it.

I see another potential problem. We allow proprietary programs to link
with Nettle (under LGPLv3 terms). As far as I understand, such a program
can't be sold or distributed without negotiating a separate patent
license. Which seems a bit contrary to the spirit og the LGPL.

But I don't fully understand the implications of the patent language in
the GPLv3, section 11. Is the extra patent license requirement a problem
for LGPL distribution of Nettle? Or does it mean that it's only a
problem for the party distributing the proprietary (or free but
non-public) stuff, who must arrange that his/her patent license is
properly extended to comply with the GPLv3 text?

&gt; OCB seems to be a very nice alternative/completent to GCM and CCM.

How does it compare to EAX, which is also very nice and simple. Is OCB
faster than EAX? (I haven't yet digested the definition of OCB).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150129030357</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 03:03:57-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

On 29/01/2015 9:35 a.m., Niels Möller wrote:
&gt; Looking at http://www.lysator.liu.se/~nisse/nettle/plan.html, the most
&gt; important things are done. I think documentation is the only item left
&gt; which is both important and requires several hours of work.
&gt; 

&gt; * Base64 with other alphabets. A patch was posted to the list some month
&gt;   ago, I had some comments, and then it seems to have stalled. If it's
&gt;   desirable to break the ABI to implement it, 3.1 may be the last chance
&gt;   for some years time.
&gt; 

Sorry for the stall, I will prioritize re-working it as todays task.

Amos

</body></email><email><emailId>20150129065512</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-29 06:55:12-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

On Wed, 2015-01-28 at 21:35 +0100, Niels Möller wrote:
&gt; Looking at http://www.lysator.liu.se/~nisse/nettle/plan.html, the most
&gt; important things are done. I think documentation is the only item left
&gt; which is both important and requires several hours of work.
&gt; * Versioned symbols. I think this is complete, I just have forgotten to
&gt;   merge that branch.
&gt; * Base64 with other alphabets. A patch was posted to the list some month
&gt;   ago, I had some comments, and then it seems to have stalled. If it's
&gt;   desirable to break the ABI to implement it, 3.1 may be the last chance
&gt;   for some years time.
&gt; * OCB mode. Is it a good idea to try to get this into the release? I
&gt;   don't think patents are a problem, but I've mailed sflc, and it would
&gt;   be nice to get their opinion too. Needs not just the code, but also
&gt;   test cases and documentation.
&gt; * Also OFB mode has been requested, used by openpgp, iirc.
&gt; Anything else I've missed? And which of the above items are important?

For me OCB is low priority. The draft has been defined now and it could
take years before it translates to something I could include in gnutls.
Chacha with poly (not in the list above) however is more important to me
to implement the final draft (on the current state the algorithm is
fixed, only typos and other non-essential parts can be changed)
https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-08

&gt; There are a lot of things that could be better optimized, including the
&gt; curve25519 code and the aesni code, but I don't think the release should
&gt; be delayed for that.

I also believe so. If I can rely on that ABI, I'll release gnutls 3.4.0
based on 3.1.

regards,
Nikos





</body></email><email><emailId>20150129081817</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-29 08:18:17-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; For me OCB is low priority.

Ok, let's leave ocb for now (I will still consider it if someone else
writes a complete patch, including testcases and docs, in time for the
release).

&gt; Chacha with poly (not in the list above) however is more important to me
&gt; to implement the final draft (on the current state the algorithm is
&gt; fixed, only typos and other non-essential parts can be changed)
&gt; https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-08

Thanks for the reminder. I agree that makes a lot of sense for 3.1. You
have done some work to update of Nettle's implementation, but I don't
remember the status?

It would be nice if the interface makes it possible to implement the
other variants, like what's used in openssh, and nacl (or maybe nacl is
using salsa20 rather than chacha?)?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150129083931</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-29 08:39:31-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

On Thu, Jan 29, 2015 at 9:18 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt;&gt; Chacha with poly (not in the list above) however is more important to me
&gt;&gt; to implement the final draft (on the current state the algorithm is
&gt;&gt; fixed, only typos and other non-essential parts can be changed)
&gt;&gt; https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-08
&gt; Thanks for the reminder. I agree that makes a lot of sense for 3.1. You
&gt; have done some work to update of Nettle's implementation, but I don't
&gt; remember the status?

I don't think I have anything. I remember I had an initial patch for
the issues in
https://www.mail-archive.com/nettle-bugs@lists.lysator.liu.se/msg01109.html
but didn't pass the test vectors. I can't find it patch though.

&gt; It would be nice if the interface makes it possible to implement the
&gt; other variants, like what's used in openssh, and nacl (or maybe nacl is
&gt; using salsa20 rather than chacha?)?

Is it final then that openssh will not use the updated draft?

regards,
Nikos

</body></email><email><emailId>20150129090302</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-29 09:03:02-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; I don't think I have anything. I remember I had an initial patch for
&gt; the issues in
&gt; https://www.mail-archive.com/nettle-bugs@lists.lysator.liu.se/msg01109.html
&gt; but didn't pass the test vectors. I can't find it patch though.

I'm adding it to plan.html, so I don't forget it.

&gt; Is it final then that openssh will not use the updated draft?

No idea. There have been no recent discussions on the ietf ssh list, and
I don't follow openssh development.

But the ssh protocol is a bit special, since it encrypts the packet
length field. With cacha-poly1305, I think it's natural to use the left
over bits of block 0 and xor them to the packet length, but iirc openssh
used a separately keyed chacha instance instead.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150202195241</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-02-02 19:52:41-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt;
&gt;&gt; For me OCB is low priority.
&gt;
&gt; Ok, let's leave ocb for now (I will still consider it if someone else
&gt; writes a complete patch, including testcases and docs, in time for the
&gt; release).
&gt;
&gt;&gt; Chacha with poly (not in the list above) however is more important to me
&gt;&gt; to implement the final draft (on the current state the algorithm is
&gt;&gt; fixed, only typos and other non-essential parts can be changed)
&gt;&gt; https://tools.ietf.org/html/draft-irtf-cfrg-chacha20-poly1305-08
&gt;
&gt; Thanks for the reminder. I agree that makes a lot of sense for 3.1. You
&gt; have done some work to update of Nettle's implementation, but I don't
&gt; remember the status?

Patch below (and also in the "chacha96"-branch in the public repo). Any
comments before I merge it? In particular, is chacha_set_nonce96 a good
name and function?

Regards,
/Niels

diff --git a/ChangeLog b/ChangeLog
index 00007fe..9fd2d8f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,19 @@
+2015-01-30  Niels Möller  &lt;nisse@lysator.liu.se&gt;
+
+	Update chacha-poly1305 for draft-irtf-cfrg-chacha20-poly1305-08.
+	* chacha-poly1305.h (CHACHA_POLY1305_NONCE_SIZE): Increase to 12
+	bytes, i.e., CHACHA_NONCE96_SIZE.
+	* chacha-poly1305.c (chacha_poly1305_set_nonce): Use
+	chacha_set_nonce96.
+	(poly1305_pad): New function.
+	(chacha_poly1305_encrypt): Use poly1305_pad.
+	(chacha_poly1305_digest): Call poly1305_pad, and format length
+	fields as a single poly1305 block.
+
+	* chacha-set-nonce.c (chacha_set_nonce96): New function.
+	* chacha.h (CHACHA_NONCE96_SIZE): New constant.
+	* testsuite/chacha-test.c: Add test for chacha with 96-bit nonce.
+
 2015-01-27  Niels Möller  &lt;nisse@lysator.liu.se&gt;
 
 	* ecc.h: Deleted declarations of unused itch functions. Moved
diff --git a/chacha-poly1305.c b/chacha-poly1305.c
index 35c4bfe..c5109b8 100644
--- a/chacha-poly1305.c
+++ b/chacha-poly1305.c
@@ -2,7 +2,7 @@
 
    AEAD mechanism based on chacha and poly1305.
 
-   Copyright (C) 2014 Niels Möller
+   Copyright (C) 2014, 2015 Niels Möller
 
    This file is part of GNU Nettle.
 
@@ -31,6 +31,20 @@
    not, see http://www.gnu.org/licenses/.
 */
 
+/* This implements chacha-poly1305 according to
+   draft-irtf-cfrg-chacha20-poly1305-08. The inputs to poly1305 are:
+
+     associated data
+     zero padding
+     ciphertext
+     zero padding
+     length of associated data (64-bit, little endian)
+     length of ciphertext (64-bit, little endian)
+
+   where the padding fields are 0-15 zero bytes, filling up to a
+   16-byte boundary.
+*/
+
 #if HAVE_CONFIG_H
 # include "config.h"
 #endif
@@ -62,7 +76,7 @@ chacha_poly1305_set_nonce (struct chacha_poly1305_ctx *ctx,
     uint8_t subkey[32];
   } u;
 
-  chacha_set_nonce (&amp;ctx-&gt;chacha, nonce);
+  chacha_set_nonce96 (&amp;ctx-&gt;chacha, nonce);
   /* Generate authentication key */
   _chacha_core (u.x, ctx-&gt;chacha.state, CHACHA_ROUNDS);
   poly1305_set_key (&amp;ctx-&gt;poly1305, u.subkey);  
@@ -84,6 +98,17 @@ poly1305_update (struct chacha_poly1305_ctx *ctx,
   MD_UPDATE (ctx, length, data, COMPRESS, (void) 0);
 }
 
+static void
+poly1305_pad (struct chacha_poly1305_ctx *ctx)
+{
+  if (ctx-&gt;index)
+    {
+      memset (ctx-&gt;block + ctx-&gt;index, 0,
+	      POLY1305_BLOCK_SIZE - ctx-&gt;index);
+      _poly1305_block(&amp;ctx-&gt;poly1305, ctx-&gt;block, 1);
+      ctx-&gt;index = 0;
+    }
+}
 void
 chacha_poly1305_update (struct chacha_poly1305_ctx *ctx,
 			size_t length, const uint8_t *data)
@@ -102,12 +127,8 @@ chacha_poly1305_encrypt (struct chacha_poly1305_ctx *ctx,
     return;
 
   assert (ctx-&gt;data_size % CHACHA_POLY1305_BLOCK_SIZE == 0);
-  if (!ctx-&gt;data_size)
-    {
-      uint8_t buf[8];
-      LE_WRITE_UINT64 (buf, ctx-&gt;auth_size);
-      poly1305_update (ctx, sizeof(buf), buf);
-    }
+  poly1305_pad (ctx);
+
   chacha_crypt (&amp;ctx-&gt;chacha, length, dst, src);
   poly1305_update (ctx, length, dst);
   ctx-&gt;data_size += length;
@@ -121,12 +142,8 @@ chacha_poly1305_decrypt (struct chacha_poly1305_ctx *ctx,
     return;
 
   assert (ctx-&gt;data_size % CHACHA_POLY1305_BLOCK_SIZE == 0);
-  if (!ctx-&gt;data_size)
-    {
-      uint8_t buf[8];
-      LE_WRITE_UINT64 (buf, ctx-&gt;auth_size);
-      poly1305_update (ctx, sizeof(buf), buf);
-    }
+  poly1305_pad (ctx);
+
   poly1305_update (ctx, length, src);
   chacha_crypt (&amp;ctx-&gt;chacha, length, dst, src);
   ctx-&gt;data_size += length;
@@ -136,27 +153,14 @@ void
 chacha_poly1305_digest (struct chacha_poly1305_ctx *ctx,
 			size_t length, uint8_t *digest)
 {
-  uint8_t buf[8];
-  if (!ctx-&gt;data_size)
-    {
-      LE_WRITE_UINT64 (buf, ctx-&gt;auth_size);
-      poly1305_update (ctx, sizeof(buf), buf);
-    }
-  LE_WRITE_UINT64 (buf, ctx-&gt;data_size);
-  poly1305_update (ctx, sizeof(buf), buf);
+  uint8_t buf[16];
 
-  /* Final bytes. FIXME: Duplicated in poly1305_aes128.c */
-  if (ctx-&gt;index &gt; 0)
-    {
-      assert (ctx-&gt;index &lt; POLY1305_BLOCK_SIZE);
+  poly1305_pad (ctx);
+  LE_WRITE_UINT64 (buf, ctx-&gt;auth_size);
+  LE_WRITE_UINT64 (buf + 8, ctx-&gt;data_size);
 
-      ctx-&gt;block[ctx-&gt;index] = 1;
-      memset (ctx-&gt;block + ctx-&gt;index + 1,
-	      0, POLY1305_BLOCK_SIZE - 1 - ctx-&gt;index);
+  _poly1305_block (&amp;ctx-&gt;poly1305, buf, 1);
 
-      _poly1305_block (&amp;ctx-&gt;poly1305, ctx-&gt;block, 0);
-    }
-  
   poly1305_digest (&amp;ctx-&gt;poly1305, &amp;ctx-&gt;s);
   memcpy (digest, &amp;ctx-&gt;s.b, length);
 }
diff --git a/chacha-poly1305.h b/chacha-poly1305.h
index 9c2688b..ce40b77 100644
--- a/chacha-poly1305.h
+++ b/chacha-poly1305.h
@@ -53,7 +53,7 @@ extern "C" {
 #define CHACHA_POLY1305_BLOCK_SIZE 64
 /* FIXME: Any need for 128-bit variant? */
 #define CHACHA_POLY1305_KEY_SIZE 32
-#define CHACHA_POLY1305_NONCE_SIZE CHACHA_NONCE_SIZE
+#define CHACHA_POLY1305_NONCE_SIZE CHACHA_NONCE96_SIZE
 #define CHACHA_POLY1305_DIGEST_SIZE 16
 
 struct chacha_poly1305_ctx
diff --git a/chacha-set-nonce.c b/chacha-set-nonce.c
index e73babc..607f176 100644
--- a/chacha-set-nonce.c
+++ b/chacha-set-nonce.c
@@ -59,3 +59,12 @@ chacha_set_nonce(struct chacha_ctx *ctx, const uint8_t *nonce)
   ctx-&gt;state[14] = LE_READ_UINT32(nonce + 0);
   ctx-&gt;state[15] = LE_READ_UINT32(nonce + 4);
 }
+
+void
+chacha_set_nonce96(struct chacha_ctx *ctx, const uint8_t *nonce)
+{
+  ctx-&gt;state[12] = 0;
+  ctx-&gt;state[13] = LE_READ_UINT32(nonce + 0);
+  ctx-&gt;state[14] = LE_READ_UINT32(nonce + 4);
+  ctx-&gt;state[15] = LE_READ_UINT32(nonce + 8);
+}
diff --git a/chacha.h b/chacha.h
index 41df707..3f08283 100644
--- a/chacha.h
+++ b/chacha.h
@@ -45,6 +45,7 @@ extern "C" {
 /* Name mangling */
 #define chacha_set_key nettle_chacha_set_key
 #define chacha_set_nonce nettle_chacha_set_nonce
+#define chacha_set_nonce96 nettle_chacha_set_nonce96
 #define chacha_crypt nettle_chacha_crypt
 #define _chacha_core _nettle_chacha_core
 
@@ -52,6 +53,7 @@ extern "C" {
 #define CHACHA_KEY_SIZE 32
 #define CHACHA_BLOCK_SIZE 64
 #define CHACHA_NONCE_SIZE 8
+#define CHACHA_NONCE96_SIZE 12
 
 #define _CHACHA_STATE_LENGTH 16
 
@@ -78,6 +80,9 @@ void
 chacha_set_nonce(struct chacha_ctx *ctx, const uint8_t *nonce);
 
 void
+chacha_set_nonce96(struct chacha_ctx *ctx, const uint8_t *nonce);
+
+void
 chacha_crypt(struct chacha_ctx *ctx, size_t length, 
              uint8_t *dst, const uint8_t *src);
 
diff --git a/testsuite/chacha-poly1305-test.c b/testsuite/chacha-poly1305-test.c
index 2f320f3..313e822 100644
--- a/testsuite/chacha-poly1305-test.c
+++ b/testsuite/chacha-poly1305-test.c
@@ -4,13 +4,30 @@
 void
 test_main(void)
 {
-  /* From draft-agl-tls-chacha20poly1305-04 */
+  /* From draft-irtf-cfrg-chacha20-poly1305-08 */
   test_aead (&amp;nettle_chacha_poly1305, NULL,
-	     SHEX("4290bcb154173531f314af57f3be3b50"
-		  "06da371ece272afa1b5dbdd1100a1007"),	/* key */
-	     SHEX("87e229d4500845a079c0"),		/* auth data */
-	     SHEX("86d09974840bded2a5ca"),		/* plain text */
-	     SHEX("e3e446f7ede9a19b62a4"),		/* ciphertext */
-	     SHEX("cd7cf67be39c794a"),			/* nonce */
-	     SHEX("677dabf4e3d24b876bb284753896e1d6"));	/* tag */
+	     SHEX("8081828384858687 88898a8b8c8d8e8f"
+		  "9091929394959697 98999a9b9c9d9e9f"),
+	     SHEX("50515253c0c1c2c3 c4c5c6c7"),
+	     SHEX("4c61646965732061 6e642047656e746c"
+		  "656d656e206f6620 74686520636c6173"
+		  "73206f6620273939 3a20496620492063"
+		  "6f756c64206f6666 657220796f75206f"
+		  "6e6c79206f6e6520 74697020666f7220"
+		  "7468652066757475 72652c2073756e73"
+		  "637265656e20776f 756c642062652069"
+		  "742e"),
+	     SHEX("d31a8d34648e60db7b86afbc53ef7ec2"
+		  "a4aded51296e08fea9e2b5a736ee62d6"
+		  "3dbea45e8ca9671282fafb69da92728b"
+		  "1a71de0a9e060b2905d6a5b67ecd3b36"
+		  "92ddbd7f2d778b8c9803aee328091b58"
+		  "fab324e4fad675945585808b4831d7bc"
+		  "3ff4def08e4b7a9de576d26586cec64b"
+		  "6116"),
+	     /* The draft splits the nonce into a "common part" and an
+		iv, and it seams the "common part" is the first 4
+		bytes. */
+	     SHEX("0700000040414243 44454647"),
+	     SHEX("1ae10b594f09e26a 7e902ecbd0600691"));
 }
diff --git a/testsuite/chacha-test.c b/testsuite/chacha-test.c
index 8c5630d..9edb941 100644
--- a/testsuite/chacha-test.c
+++ b/testsuite/chacha-test.c
@@ -44,20 +44,30 @@ test_chacha(const struct tstring *key, const struct tstring *nonce,
 
   ASSERT (key-&gt;length == CHACHA_KEY_SIZE);
   chacha_set_key (&amp;ctx, key-&gt;data);
-  ASSERT (nonce-&gt;length == CHACHA_NONCE_SIZE);
 
   if (rounds == 20)
     {
       uint8_t *data = xalloc (expected-&gt;length + 2);
-      data++;
       size_t length;
+      data++;
 
       for (length = 1; length &lt;= expected-&gt;length; length++)
 	{
 	  data[-1] = 17;
 	  memset (data, 0, length);
 	  data[length] = 17;
-	  chacha_set_nonce(&amp;ctx, nonce-&gt;data);
+	  if (nonce-&gt;length == CHACHA_NONCE_SIZE)
+	    chacha_set_nonce(&amp;ctx, nonce-&gt;data);
+	  else if (nonce-&gt;length == CHACHA_NONCE96_SIZE)
+	    {
+	      chacha_set_nonce96(&amp;ctx, nonce-&gt;data);
+	      /* Use initial counter 1, for
+		 draft-irtf-cfrg-chacha20-poly1305-08 test cases. */
+	      ctx.state[12]++;
+	    }
+	  else
+	    die ("Bad nonce size %u.\n", (unsigned) nonce-&gt;length);
+
 	  chacha_crypt (&amp;ctx, length, data, data);
 
 	  ASSERT (data[-1] == 17);
@@ -84,6 +94,7 @@ test_chacha(const struct tstring *key, const struct tstring *nonce,
 	 numbers of rounds. */
       uint32_t out[_CHACHA_STATE_LENGTH];
       ASSERT (expected-&gt;length == CHACHA_BLOCK_SIZE);
+      ASSERT (nonce-&gt;length == CHACHA_NONCE_SIZE);
 
       chacha_set_nonce(&amp;ctx, nonce-&gt;data);
       _chacha_core (out, ctx.state, rounds);
@@ -622,4 +633,14 @@ test_main(void)
 		   "ae2c4c90225ba9ea 14d518f55929dea0"
 		   "98ca7a6ccfe61227 053c84e49a4a3332"),
 	      20);
+
+  /* From draft-irtf-cfrg-chacha20-poly1305-08, with 96-bit nonce */
+  test_chacha(SHEX("0001020304050607 08090a0b0c0d0e0f"
+		   "1011121314151617 18191a1b1c1d1e1f"),
+	      SHEX("000000090000004a 00000000"),
+	      SHEX("10f1e7e4d13b5915 500fdd1fa32071c4"
+		   "c7d1f4c733c06803 0422aa9ac3d46c4e"
+		   "d2826446079faa09 14c2d705d98b02a2"
+		   "b5129cd1de164eb9 cbd083e8a2503c4e"),
+	      20);
 }


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150317140214</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-17 14:02:14-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; I went this path, and now there is a version.h which defines,
&gt; NETTLE_VERSION (combo), NETTLE_VERSION_MAJOR and NETTLE_VERSION_MINOR.

Thanks.

&gt; --- /dev/null
&gt; +++ b/version.h.in
...
&gt; +#ifndef NETTLE_VERSION_H_INCLUDED
&gt; +#define NETTLE_VERSION_H_INCLUDED
&gt; +
&gt; +#include "nettle-types.h"

Why this include?

&gt; +/* The combined version in hex */
&gt; +#define NETTLE_VERSION @NUMBER_VERSION@

Any motivation for this particular grouping, and the corresponding

  AC_SUBST([NUMBER_VERSION], `printf "0x%02x%02x" $MAJOR_VERSION $MINOR_VERSION`)

Is it a common convention with other libraries? Is there some reason it
has to be a hex literal, and not just constructed as

  #define NETTLE_VERSION (((NETTLE_VERSION_MAJOR) &lt;&lt; 8) | (NETTLE_VERSION_MINOR))

which should produce the same integer? My gut feeling is still that it
is better to leave the construction of a combined version number to the
applications that need it.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150317145915</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-17 14:59:15-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

On Tue, Mar 17, 2015 at 3:02 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt;&gt; +#include "nettle-types.h"
&gt; Why this include?

Not needed.

&gt;&gt; +/* The combined version in hex */
&gt;&gt; +#define NETTLE_VERSION @NUMBER_VERSION@
&gt; Any motivation for this particular grouping, and the corresponding
&gt;
&gt;   AC_SUBST([NUMBER_VERSION], `printf "0x%02x%02x" $MAJOR_VERSION $MINOR_V=
ERSION`)
&gt;
&gt; Is it a common convention with other libraries? Is there some reason it
&gt; has to be a hex literal, and not just constructed as
&gt;   #define NETTLE_VERSION (((NETTLE_VERSION_MAJOR) &lt;&lt; 8) | (NETTLE_VERSION=
_MINOR))
&gt; which should produce the same integer? My gut feeling is still that it
&gt; is better to leave the construction of a combined version number to the
&gt; applications that need it.

I see that in gcc and every application uses different ways to detect
its version. Most code is copy paste from others projects, some nasty
some pretty good. Is there a reason not to simplify things for the
developers? It is just a preprocessor macro it doesn't take any space.
Anyway for my purposes I only need the major part to distinguish
between 2 and 3, I'll drop the combined macro if you don't want it.

regards,
Nikos

</body></email><email><emailId>20150318075451</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-18 07:54:51-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; Anyway for my purposes I only need the major part to distinguish
&gt; between 2 and 3, I'll drop the combined macro if you don't want it.

I think I'd prefer to drop the combined version number for now. We can
add it later if we find (1) a concrete use-case, and (2) an established
or otherwise desirable convention on precisely how to combine the
version numbers.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150318084709</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-18 08:47:09-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

Attached.

On Wed, Mar 18, 2015 at 8:54 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt;
&gt;&gt; Anyway for my purposes I only need the major part to distinguish
&gt;&gt; between 2 and 3, I'll drop the combined macro if you don't want it.
&gt;
&gt; I think I'd prefer to drop the combined version number for now. We can
&gt; add it later if we find (1) a concrete use-case, and (2) an established
&gt; or otherwise desirable convention on precisely how to combine the
&gt; version numbers.
&gt;
&gt; Regards,
&gt; /Niels
&gt;
&gt; --
&gt; Niels M=F6ller. PGP-encrypted email is preferred. Keyid C0B98E26.
&gt; Internet email is subject to wholesale government surveillance.
&gt; _______________________________________________
&gt; nettle-bugs mailing list
&gt; nettle-bugs@lists.lysator.liu.se
&gt; http://lists.lysator.liu.se/mailman/listinfo/nettle-bugs

["0001-Added-version.h-with-library-versioning-information.patch" (text/x-diff)]

From 2e88f4d745c6539e647174c1af3701b87174b4ed Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Tue, 17 Mar 2015 13:12:13 +0100
Subject: [PATCH] Added version.h with library versioning information

---
 Makefile.in  |  2 +-
 configure.ac |  7 ++++++-
 version.h.in | 49 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 56 insertions(+), 2 deletions(-)
 create mode 100644 version.h.in

diff --git a/Makefile.in b/Makefile.in
index abba3cd..e39fd15 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -195,7 +195,7 @@ HEADERS = aes.h arcfour.h arctwo.h asn1.h blowfish.h \
 	  md5.h md5-compat.h \
 	  memxor.h \
 	  nettle-meta.h nettle-types.h \
-	  pbkdf2.h \
+	  pbkdf2.h version.h \
 	  pgp.h pkcs1.h realloc.h ripemd160.h rsa.h \
 	  salsa20.h sexp.h \
 	  serpent.h sha.h sha1.h sha2.h sha3.h twofish.h \
diff --git a/configure.ac b/configure.ac
index 51ab3b3..56f6909 100644
--- a/configure.ac
+++ b/configure.ac
@@ -16,6 +16,11 @@ LIBNETTLE_MINOR=0
 LIBHOGWEED_MAJOR=4
 LIBHOGWEED_MINOR=0
 
+MAJOR_VERSION=`echo $PACKAGE_VERSION | sed 's/\(.*\)\..*/\1/g'`
+MINOR_VERSION=`echo $PACKAGE_VERSION | sed 's/.*\.\(.*\)/\1/g'`
+AC_SUBST([MAJOR_VERSION])
+AC_SUBST([MINOR_VERSION])
+
 AC_CANONICAL_HOST
 
 # Command line options
@@ -895,7 +900,7 @@ if test x$GCC = xyes ; then
 # inttypes.h.
 fi
 
-AC_CONFIG_FILES([config.make config.m4 Makefile bignum.h])
+AC_CONFIG_FILES([config.make config.m4 Makefile bignum.h version.h])
 AC_CONFIG_FILES([tools/Makefile testsuite/Makefile examples/Makefile])
 AC_CONFIG_FILES([nettle.pc hogweed.pc libnettle.map libhogweed.map])
 
diff --git a/version.h.in b/version.h.in
new file mode 100644
index 0000000..036aaf7
--- /dev/null
+++ b/version.h.in
@@ -0,0 +1,49 @@
+/* version.h
+
+   Information about library version.
+
+   Copyright (C) 2015 Red Hat, Inc.
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#ifndef NETTLE_VERSION_H_INCLUDED
+#define NETTLE_VERSION_H_INCLUDED
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+/* Individual version numbers in decimal */
+#define NETTLE_VERSION_MAJOR @MAJOR_VERSION@
+#define NETTLE_VERSION_MINOR @MINOR_VERSION@
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* NETTLE_VERSION_H_INCLUDED */
-- 
2.1.0



</body></email><email><emailId>20150730225039</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-07-30 22:50:39-0400</timestampReceived><subject>Re: Helping out</subject><body>

On Wed, Jul 29, 2015 at 9:41 AM, andy lawrence &lt;ajlawrence@acm.org&gt; wrote:
&gt; Hello,
&gt; I am interested in helping out with the development of Nettle. Are there
&gt; any small projects I could undertake to get started?

Most likely Niels has his own ideas, but nettle related projects that
could be of use in gnutls are:
1. Addition of an API for the RSASSA-PSS a signing scheme (described in rfc3447)
2. Improvements of the AESNI implementation (currently it is too slow
and gnutls ships another implementation)
3. Usage of the intel pclmul instruction to optimize the GCM mode
4. Addition of OCB encryption mode (as in draft-zauner-tls-aes-ocb-03)
5. Addition of brainpool curves (quite large project - curves
described in rfc5639)

regards,
Nikos

</body></email><email><emailId>20150621173816</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-06-21 17:38:16-0400</timestampReceived><subject>Re: Two issues found by Address sanitizer</subject><body>

Tomáš Chvátal &lt;tchvatal@suse.com&gt; writes:

&gt; we at suse ran address sanitizer against libnettle and found two bugs [1][2].

Thanks for the report, and sorry for the late reply.

&gt; The first one is easy to fix (simple off by one) and thus we already have the 
&gt; patch (see attachment 0001-...).

In the bug report, please include information about

1. which version of Nettle you used, and

2. what error you believe you are fixing.

I guess this issue is fixed in the latest version, but not in 2.7.1. You
may want to backport the same fix, see
https://git.lysator.liu.se/nettle/nettle/commit/abf3870cba401bc797676cdee84fea0091a2a581

&gt; The second one is about memory leaks, and it would be better if someone more 
&gt; aware of the source took a look wether and how to fix it.

This looks like the program eccdata doesn't free its storage before
exit. This is a program used at build time to generate ecc-related
tables.

I'd accept patches to fix this, but I don't think it's very important. I
think the nicest way is to add a function ecc_curve_clear to deallocate
all storage, and add a call 

  ecc_curve_clear (&amp;ecc); 

at the end of the main function.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150624035712</emailId><senderName>Mark H Weaver</senderName><senderEmail>mhw@netris.org</senderEmail><timestampReceived>2015-06-24 03:57:12-0400</timestampReceived><subject>Re: dlopen nettle-3.1 built with --enable-fat leads to SIGSEGV</subject><body>

nisse@lysator.liu.se (Niels M=C3=B6ller) writes:

&gt; Is RTLD_NOW part of the problem (i.e., does it work if you change the
&gt; test program to use RTLD_LAZY and then call nettle_memxor)?

I haven't tried this, because in order to solve my original problem
(gstreamer is unable to load the gst-libav plugin in GNU Guix on x86_64)
this workaround would have to be applied to gstreamer to work around a
problem in nettle.  I'd rather fix the problem in nettle itself.

&gt; * Undefine HAVE_LINK_IFUNC, falling back to the non-ifunc code.

This is what I ended up doing for GNU Guix, and it has solved all of the
problems for me.

    Thanks!
      Mark

</body></email><email><emailId>20150502102341</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-05-02 10:23:41-0400</timestampReceived><subject>Re: nettle-3.1 transition and symbol versions</subject><body>

On 2/05/2015 8:47 p.m., Niels Möller wrote:
&gt; Now we see some transition problems,
&gt; https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=784009, and it's going
&gt; to also hit other distributions than debian.
&gt; 
&gt; Would it make sense to issue a nettle-2.7.2, which is nettle-2.7.1 +
&gt; symbol versions? There's at least one bugfix which could be backported
&gt; if we do another 2.7.x:
&gt; 
&gt; 2014-06-30  Niels Möller  &lt;nisse@lysator.liu.se&gt;
&gt; 
&gt; 	* camellia-absorb.c: Include &lt;limits.h&gt;, needed for correct use of
&gt; 	HAVE_NATIVE_64_BIT. Reported and debugged by Magnus Holmgren.
&gt; 
&gt; Regards,
&gt; /Niels
&gt; 

IMHO, Its the sort of thing that is better provided upstream than left
to get messy.

Amos

</body></email><email><emailId>20150512211950</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-05-12 21:19:50-0400</timestampReceived><subject>Re: Version API</subject><body>

Elliot Saba &lt;staticfloat@gmail.com&gt; writes:

&gt; The patch looks perfect. Thank you!

Perfect or not, it's now pushed to the repository.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150528033208</emailId><senderName>Daniel Kahn Gillmor</senderName><senderEmail>dkg@fifthhorseman.net</senderEmail><timestampReceived>2015-05-28 03:32:08-0400</timestampReceived><subject>Re: Bug#783699: nettle-dev is not Multi-Arch compatible</subject><body>

On Sat 2015-05-23 04:37:40 -0400, Niels Möller wrote:
&gt; The issue is that there are some differences in generated nettle header
&gt; files depending on architecture and compiler version.

If the differences are significant (e.g. if there are structs,
functions, or #defines that are declared differently based on
architecture and compiler version) then we can also just ship the .h
files in /usr/include/${ARCH_TRIPLE}/nettle/ instead of
/usr/include/nettle/.  This can make the nettle-dev package
co-installable across architectures. (e.g. nettle-dev:i386 could be
installed alongside nettle-dev:amd64 without the files colliding, since
they're at different places in the filesystem)

Take a look at the libgpg-error-dev package in debian, which ships its
header files in the multi-arch include directories.

since nettle is using pkg-config instead of some kind of
/usr/bin/nettle-config script, and pkg-config is already multi-arched,
nettle-dev could do even better at being multi-arch compatible than
libgpg-error-dev.

That said, if there are no significant differences in any of the
architectures that debian supports, i don't think that embedding the
exact version of the compiler used to generate the .h files is actually
useful, and it would be great to reduce superfluous variance.

      --dkg

</body></email><email><emailId>20150401052903</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-01 05:29:03-0400</timestampReceived><subject>Re: nettle-3.1rc2</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt; If this mp_limb_t type being long is a generic thing it is likely
&gt; affecting other 32-bit OS with mini-gmp in the same way.

I don't think it's a very general problem. First, that assembly code
expects a particular size of mp_limb_t affects only the few
architectures for which Nettle includes any assembly code. Second, the
problem was a 64-bit platform using a 32-bit unsigned long. As far as
I'm aware, 64-bit windows is fairly unique in this choice of ABI (and
there have been a couple of other workarounds related to that).

Anyway, the current mechanism, marking assembly files with the expected
GMP_NUMB_BITS, can be added to other assembly files if the need arises.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150403082506</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-03 08:25:06-0400</timestampReceived><subject>Re: nettle-3.1rc3</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I've made an rc3 tarball. 
&gt;
&gt;    http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc3.tar.gz
&gt;    http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc3.tar.gz.sig

I haven't seen much feedback. Please test, and report failures as well
as successes. I'm not aware of any issues in rc3. I have done some
successful testing on

  x86_64 GNU/Linux (64- and 32-bit),

  x86_64 FreeBSD (64-bit only, since support for 32-bit toolchain tends
  to be broken)

  ARM GNU/Linux (32-bit only)

  Sparc Solaris (64-bit and 32-bit, compiling with gcc)

  x86_64 MS Windows (64-bit and 32-bit, using mingw and wine)

So missing testing includes MacOS tests, tests on any real MS Windows
systems, and any testing with non-gcc compilers.

I will be partly offline over the Easter weekend, and also away from my
release signing keys. I will therefore cut the release on Tuesday April
7, most likely in the evening (European time).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150413095935</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-13 09:59:35-0400</timestampReceived><subject>Re: ANNOUNCE: Nettle-3.1</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I'm happy to announce a new version of GNU Nettle, a low-level
&gt; cryptographics library.

I've now seen my first bug report on nettle-3.1. Seems I got shell
quoting wrong in the last-minute fix for w64 and mini-gmp. I've checked
in a fix. I'll have to do a nettle-3.1.1 bugfix release in a week or so
(I need to test that this fix doesn't break on w64). Any other issues?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150422170010</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-22 17:00:10-0400</timestampReceived><subject>Re: bug against .short value</subject><body>

dongsheng zhang &lt;dongsheng.zhang@oracle.com&gt; writes:

&gt; Solaris doesn't take .short value, but instead only takes .value value.
&gt; We thus cannot compile the following file:
&gt; nettle-3.1/x86_64/gcm-hash8.asm

I've checked in a fix. Can you try to check out

  https://git.lysator.liu.se/nettle/nettle.git

and test if it solves the problem? You need to run the script
./.boostrap before configure and make.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150424202151</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-24 20:21:51-0400</timestampReceived><subject>ANNOUNCE: Nettle-3.1.1</subject><body>


I've made another release of GNU Nettle, a low-level
cryptographics library, to fix bugs reported for Nettle 3.1.

The Nettle home page can be found at
http://www.lysator.liu.se/~nisse/nettle/, and the manual at
http://www.lysator.liu.se/~nisse/nettle/nettle.html.

NEWS for the Nettle 3.1.1 release

	This release fixes a couple of non-critical bugs.

	Bug fixes:

	* By accident, nettle-3.1 disabled the assembly code for the
	  secp_224r1 and secp_521r1 elliptic curves on all x86_64
	  configurations, making signature operations on those curves
	  10%-30% slower. This code is now re-enabled.

	* The x86_64 assembly implementation of gcm hashing has been
          fixed to work with the Sun/Oracle assembler.

	The shared library names are libnettle.so.6.1 and
	libhogweed.so.4.1, with sonames still libnettle.so.6 and
	libhogweed.so.4. It is intended to be fully binary compatible
	with nettle-3.1.

Available at:

  https://ftp.gnu.org/gnu/nettle/nettle-3.1.1.tar.gz
  ftp://ftp.gnu.org/gnu/nettle/nettle-3.1.1.tar.gz
  http://www.lysator.liu.se/~nisse/archive/nettle-3.1.1.tar.gz
  ftp://ftp.lysator.liu.se/pub/security/lsh/nettle-3.1.1.tar.gz (soon)

Happy hacking,
/Niels Möller

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


[Attachment #3 (application/pgp-signature)]

</body></email><email><emailId>20150621141744</emailId><senderName>Mark H Weaver</senderName><senderEmail>mhw@netris.org</senderEmail><timestampReceived>2015-06-21 14:17:44-0400</timestampReceived><subject>dlopen nettle-3.1 built with --enable-fat leads to SIGSEGV</subject><body>

The following test program leads to SIGSEGV in 'get_x86_features' while
loading libnettle.so from nettle-3.1 built with --enable-fat:

--8&lt;---------------cut here---------------start-------------&gt;8---
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;dlfcn.h&gt;

int main (int argc, char *argv[])
{
  void *handle;
  
  handle = dlopen ("libnettle.so", RTLD_NOW);
  if (!handle)
    {
      fprintf (stderr, "%s\n", dlerror ());
      exit (EXIT_FAILURE);
    }
  dlclose (handle);
  exit (EXIT_SUCCESS);
}
--8&lt;---------------cut here---------------end---------------&gt;8---

Here's the backtrace:

--8&lt;---------------cut here---------------start-------------&gt;8---
#0  0x0000000000009006 in ?? ()
#1  0x00007ffff73f6a37 in get_x86_features (features=&lt;synthetic pointer&gt;) at \
fat-x86_64.c:94 #2  fat_init () at fat-x86_64.c:133
#3  0x00007ffff7412475 in nettle_memxor_resolve () at fat-x86_64.c:185
#4  0x00007ffff7de8c41 in elf_machine_rela (reloc=0x7ffff73f5170, \
reloc=0x7ffff73f5170, skip_ifunc=0, reloc_addr_arg=&lt;optimized out&gt;,   \
version=&lt;optimized out&gt;, sym=0x7ffff73ee2d0, map=0x601050) at \
../sysdeps/x86_64/dl-machine.h:286 #5  elf_dynamic_do_Rela (skip_ifunc=0, lazy=0, \
nrelative=&lt;optimized out&gt;, relsize=&lt;optimized out&gt;, reladdr=&lt;optimized out&gt;, \
map=0x601050) at do-rel.h:137 #6  _dl_relocate_object (scope=&lt;optimized out&gt;, \
reloc_mode=reloc_mode@entry=0, consider_profiling=&lt;optimized out&gt;, \
consider_profiling@entry=0)  at dl-reloc.c:264
#7  0x00007ffff7defb36 in dl_open_worker (a=a@entry=0x7fffffffcea8) at dl-open.c:418
#8  0x00007ffff7deb704 in _dl_catch_error (objname=objname@entry=0x7fffffffce98, \
errstring=errstring@entry=0x7fffffffcea0,   mallocedp=mallocedp@entry=0x7fffffffce97, \
operate=operate@entry=0x7ffff7def800 &lt;dl_open_worker&gt;, \
args=args@entry=0x7fffffffcea8) at dl-error.c:187 #9  0x00007ffff7def2db in _dl_open \
(file=0x4009f4 "libnettle.so", mode=-2147483646, caller_dlopen=&lt;optimized out&gt;, \
nsid=-2, argc=1, argv=0x7fffffffd1f8,   env=0x7fffffffd208) at dl-open.c:652
#10 0x00007ffff7bd9fab in dlopen_doit (a=a@entry=0x7fffffffd0c0) at dlopen.c:66
#11 0x00007ffff7deb704 in _dl_catch_error (objname=0x7ffff7ddc0f0 &lt;last_result+16&gt;, \
errstring=0x7ffff7ddc0f8 &lt;last_result+24&gt;,   mallocedp=0x7ffff7ddc0e8 \
&lt;last_result+8&gt;, operate=0x7ffff7bd9f50 &lt;dlopen_doit&gt;, args=0x7fffffffd0c0) at \
dl-error.c:187 #12 0x00007ffff7bda55d in _dlerror_run \
(operate=operate@entry=0x7ffff7bd9f50 &lt;dlopen_doit&gt;, args=args@entry=0x7fffffffd0c0) \
at dlerror.c:163 #13 0x00007ffff7bda041 in __dlopen (file=&lt;optimized out&gt;, \
mode=&lt;optimized out&gt;) at dlopen.c:87 #14 0x0000000000400924 in main ()
--8&lt;---------------cut here---------------end---------------&gt;8---

The SIGSEGV happens in the following call:

  _nettle_cpuid (0, cpuid_data);

The problem appears to be that the PLT entry for '_nettle_cpuid' has not
yet been initialized when 'fat_init' is called via
'nettle_memxor_resolve':

--8&lt;---------------cut here---------------start-------------&gt;8---
mhw@jojen:~$ LD_LIBRARY_PATH=$HOME/.guix-profile/lib gdb ./test
GNU gdb (GDB) 7.9.1
Copyright (C) 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-unknown-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
&lt;http://www.gnu.org/software/gdb/documentation/&gt;.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from ./test...(no debugging symbols found)...done.
(gdb) directory /home/mhw/nettle-3.1
Source directories searched: /home/mhw/nettle-3.1:$cdir:$cwd
(gdb) run
Starting program: /home/mhw/test 

Program received signal SIGSEGV, Segmentation fault.
0x0000000000009006 in ?? ()
(gdb) up
#1  0x00007ffff73f6a37 in get_x86_features (features=&lt;synthetic pointer&gt;) at \
                fat-x86_64.c:94
warning: Source file is more recent than executable.
94	      _nettle_cpuid (0, cpuid_data);
(gdb) break 94
Breakpoint 1 at 0x7ffff73f6a1f: file fat-x86_64.c, line 94.
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/mhw/test 

Breakpoint 1, fat_init () at fat-x86_64.c:133
warning: Source file is more recent than executable.
133	  get_x86_features (&amp;features);
(gdb) si
0x00007ffff73f6a24 in get_x86_features (features=&lt;synthetic pointer&gt;) at \
fat-x86_64.c:94 94	      _nettle_cpuid (0, cpuid_data);
(gdb) 
96		features-&gt;vendor = X86_INTEL;
(gdb) 
94	      _nettle_cpuid (0, cpuid_data);
(gdb) 
95	      if (memcmp (cpuid_data + 1, "Genu" "ntel" "ineI", 12) == 0)
(gdb) 
94	      _nettle_cpuid (0, cpuid_data);
(gdb) 
0x00007ffff73f6000 in _nettle_cpuid@plt () from \
/home/mhw/.guix-profile/lib/libnettle.so (gdb) disassemble /m 0x00007ffff73f6000
Dump of assembler code for function _nettle_cpuid@plt:
=&gt; 0x00007ffff73f6000 &lt;+0&gt;:	jmpq   *0x22c722(%rip)        # 0x7ffff7622728 \
&lt;_nettle_cpuid@got.plt&gt;  0x00007ffff73f6006 &lt;+6&gt;:	pushq  $0x26
   0x00007ffff73f600b &lt;+11&gt;:	jmpq   0x7ffff73f5d90
End of assembler dump.
(gdb) disassemble /m 0x7ffff7622728
Dump of assembler code for function _nettle_cpuid@got.plt:
   0x00007ffff7622728 &lt;+0&gt;:	(bad)  
   0x00007ffff7622729 &lt;+1&gt;:	nop
   0x00007ffff762272a &lt;+2&gt;:	add    %al,(%rax)
   0x00007ffff762272c &lt;+4&gt;:	add    %al,(%rax)
   0x00007ffff762272e &lt;+6&gt;:	add    %al,(%rax)
End of assembler dump.
(gdb) si
0x0000000000009006 in ?? ()
(gdb)
--8&lt;---------------cut here---------------end---------------&gt;8---

This is a problem for GNU Guix because 'gstreamer' loads its modules
using the glib function 'g_module_open' (based on 'dlopen') and the
'gst-libav' module is linked with nettle.  This breaks 'gst-libav' on
x86_64.

Details
=======
System type: x86_64-unknown-linux-gnu
nettle-3.1 compiled with:
  gcc-4.8.4
  binutils-2.25
  glibc-2.21

Nettle configure flags:
  CONFIG_SHELL=/gnu/store/wxcgfy43r6lmxhm2m7xk1vsgyddhx3y0-bash-4.3.33/bin/bash
  SHELL=/gnu/store/wxcgfy43r6lmxhm2m7xk1vsgyddhx3y0-bash-4.3.33/bin/bash
  --prefix=/gnu/store/k0bhgy2l5kj1hp2vxx3ys42pn4kr599h-nettle-3.1
  --enable-fast-install
  --enable-fat
  LDFLAGS=-Wl,-rpath=/gnu/store/k0bhgy2l5kj1hp2vxx3ys42pn4kr599h-nettle-3.1/lib

Here's the build log for the nettle used in the above tests:

  http://hydra.gnu.org/build/381502/log/raw

If needed, I can explain how to reproduce this exact environment using
GNU Guix.

     Mark


</body></email><email><emailId>20150621175620</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-06-21 17:56:20-0400</timestampReceived><subject>Re: dlopen nettle-3.1 built with --enable-fat leads to SIGSEGV</subject><body>

Mark H Weaver &lt;mhw@netris.org&gt; writes:

&gt; The SIGSEGV happens in the following call:
&gt;
&gt;   _nettle_cpuid (0, cpuid_data);
&gt;
&gt; The problem appears to be that the PLT entry for '_nettle_cpuid' has not
&gt; yet been initialized when 'fat_init' is called via
&gt; 'nettle_memxor_resolve':

Sounds pretty bad... We really need to fix this in one way or the other.
I'm not 100% sure I understand what's going on, but from your gdb
session, I think I agree with your analysis.

I havent't seen any documentation explaing precisely what one can and
cannot do in an ifunc resolver. Do you know?

Is RTLD_NOW part of the problem (i.e., does it work if you change the
test program to use RTLD_LAZY and then call nettle_memxor)? If RTLD_NOW
either

1. resolved all normal (i.e., not ifunc) symbols first, before calling
   the ifunc resolvers, or

2. first initialized the plt entries in the same way as for RTLD_LAZY,
   and then replace the entries by resolving one symbol at a time.

Some things you could try,

* Undefine HAVE_LINK_IFUNC, falling back to the non-ifunc code.

* Declare _nettle_cpuid as having visibility hidden (then I think the
  call should not jump via the plt). Might need corresponding pseudo-ops
  also in x86_64/fat/cpuid.asm, I'm not sure.

We'd really need to ask some glibc guru about the ordering. To me, it
seems like a bug if ifunc resolver functions can't call any other functions
symbols in the library.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150622060426</emailId><senderName>Mark H Weaver</senderName><senderEmail>mhw@netris.org</senderEmail><timestampReceived>2015-06-22 06:04:26-0400</timestampReceived><subject>Re: dlopen nettle-3.1 built with --enable-fat leads to SIGSEGV</subject><body>

nisse@lysator.liu.se (Niels M=C3=B6ller) writes:
&gt; * Declare _nettle_cpuid as having visibility hidden (then I think the
&gt;   call should not jump via the plt). Might need corresponding pseudo-ops
&gt;   also in x86_64/fat/cpuid.asm, I'm not sure.

I tried this idea first, and that allowed the _nettle_cpuid call to
succeed.  However, it then crashed in the call to 'memcmp' on the next
line, again due to an uninitialized PLT entry.

More later...

    Mark

</body></email><email><emailId>20150622065342</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-06-22 06:53:42-0400</timestampReceived><subject>Re: dlopen nettle-3.1 built with --enable-fat leads to SIGSEGV</subject><body>

Mark H Weaver &lt;mhw@netris.org&gt; writes:

&gt; I tried this idea first, and that allowed the _nettle_cpuid call to
&gt; succeed.  However, it then crashed in the call to 'memcmp' on the next
&gt; line, again due to an uninitialized PLT entry.

If we can't even call libc functions, that makes things more
difficult... I'll mail libc-help.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150501150954</emailId><senderName>Elliot Saba</senderName><senderEmail>staticfloat@gmail.com</senderEmail><timestampReceived>2015-05-01 15:09:54-0400</timestampReceived><subject>Version API</subject><body>

Hello there, I saw the recent addition of the version #define's, which are
great, but a runtime function that I can call to find out libnettle's API
is essential for dynamic bindings.

I maintain the Julia language bindings for Nettle
&lt;https://github.com/staticfloat/Nettle.jl&gt; which loads the dynamic library
and generates methods to use Nettle's cryptographic functions on the fly.
This process does not use header files, it's similar to Python's ctypes
functionality, and thus knowing which API version we're dealing with by
only using the dynamic library itself is necessary.  Most other projects
have some method or other for determining this, as you guys have already
discussed, but simply placing the information into a header file is not
sufficient for this use case.

Is this something it would be possible to support?

Thanks!
-E

</body></email><email><emailId>20150501190537</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-05-01 19:05:37-0400</timestampReceived><subject>Re: Version API</subject><body>

Elliot Saba &lt;staticfloat@gmail.com&gt; writes:

&gt; I maintain the Julia language bindings for Nettle
&gt; &lt;https://github.com/staticfloat/Nettle.jl&gt; which loads the dynamic library
&gt; and generates methods to use Nettle's cryptographic functions on the fly.

Nice!

&gt; This process does not use header files, it's similar to Python's ctypes
&gt; functionality, and thus knowing which API version we're dealing with by
&gt; only using the dynamic library itself is necessary.

To some degree, I imagine you can solve the problem by looking up the
symbols of interest using dlsym, and skip generation of corresponding
julia methods if the symbol doesn't exist (but that won't help when
there are incompatible changes to the behaviour) . You might also want
to use the list

  extern const struct nettle_hash * const nettle_hashes[];

(declared in nettle-meta.h).

&gt; Most other projects
&gt; have some method or other for determining this, as you guys have already
&gt; discussed, but simply placing the information into a header file is not
&gt; sufficient for this use case.

I understand that a runtime method to look up the version of nettle can
be useful in some cases. What level of detail do you need? Some
alternatives:

1. Functions just returning the corresponding version.h values, like

     int nettle_version_major (void)
     { return NETTLE_VERSION_MAJOR; }

     int nettle_version_minor (void)
     { return NETTLE_VERSION_MINOR; }

2. Some struct including version numbers and possibly other configure
   information,

     struct nettle_version_info
     {
       int major;
       int minor;
       ...
     };

     extern const struct nettle_version_info nettle_version;

It's no big deal to add something like this, but I'm not sure what's
really needed.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150501190919</emailId><senderName>Elliot Saba</senderName><senderEmail>staticfloat@gmail.com</senderEmail><timestampReceived>2015-05-01 19:09:19-0400</timestampReceived><subject>Re: Version API</subject><body>

Hello there!  Thank you for your quick response:

Right now, the way we're trying to solve this is by using dlsym() to look
for functions that are included in one API version, and not another.  This
isn't quite as easy as using a version number, but is what we will do to
tell the difference between, e.g. 2.7.1 and 3.0.0.

Either of your solutions will work here, I have no preference.  And we are
indeed generating functions and types from within Julia, on the fly, based
on the entries of nettle_hashes[].  Fun times!
-E

On Fri, May 1, 2015 at 12:05 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; w=
rote:

&gt; Elliot Saba &lt;staticfloat@gmail.com&gt; writes:
&gt;
&gt; &gt; I maintain the Julia language bindings for Nettle
&gt; &gt; &lt;https://github.com/staticfloat/Nettle.jl&gt; which loads the dynamic
&gt; library
&gt; &gt; and generates methods to use Nettle's cryptographic functions on the fl=
y.
&gt;
&gt; Nice!
&gt;
&gt; &gt; This process does not use header files, it's similar to Python's ctypes
&gt; &gt; functionality, and thus knowing which API version we're dealing with by
&gt; &gt; only using the dynamic library itself is necessary.
&gt;
&gt; To some degree, I imagine you can solve the problem by looking up the
&gt; symbols of interest using dlsym, and skip generation of corresponding
&gt; julia methods if the symbol doesn't exist (but that won't help when
&gt; there are incompatible changes to the behaviour) . You might also want
&gt; to use the list
&gt;
&gt;   extern const struct nettle_hash * const nettle_hashes[];
&gt;
&gt; (declared in nettle-meta.h).
&gt;
&gt; &gt; Most other projects
&gt; &gt; have some method or other for determining this, as you guys have alread=
y
&gt; &gt; discussed, but simply placing the information into a header file is not
&gt; &gt; sufficient for this use case.
&gt;
&gt; I understand that a runtime method to look up the version of nettle can
&gt; be useful in some cases. What level of detail do you need? Some
&gt; alternatives:
&gt;
&gt; 1. Functions just returning the corresponding version.h values, like
&gt;
&gt;      int nettle_version_major (void)
&gt;      { return NETTLE_VERSION_MAJOR; }
&gt;
&gt;      int nettle_version_minor (void)
&gt;      { return NETTLE_VERSION_MINOR; }
&gt;
&gt; 2. Some struct including version numbers and possibly other configure
&gt;    information,
&gt;
&gt;      struct nettle_version_info
&gt;      {
&gt;        int major;
&gt;        int minor;
&gt;        ...
&gt;      };
&gt;
&gt;      extern const struct nettle_version_info nettle_version;
&gt;
&gt; It's no big deal to add something like this, but I'm not sure what's
&gt; really needed.
&gt;
&gt; Regards,
&gt; /Niels
&gt;
&gt; --
&gt; Niels M=C3=B6ller. PGP-encrypted email is preferred. Keyid C0B98E26.
&gt; Internet email is subject to wholesale government surveillance.
&gt;

</body></email><email><emailId>20150501203617</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-05-01 20:36:17-0400</timestampReceived><subject>Re: Version API</subject><body>

Elliot Saba &lt;staticfloat@gmail.com&gt; writes:

&gt; Right now, the way we're trying to solve this is by using dlsym() to look
&gt; for functions that are included in one API version, and not another.  This
&gt; isn't quite as easy as using a version number, but is what we will do to
&gt; tell the difference between, e.g. 2.7.1 and 3.0.0.

Too bad there's no easy way (as far as I'm aware) to query the soname of
a library opened with dlopen.

&gt; Either of your solutions will work here, I have no preference.

Below is a possible patch. Feedback appreciated.

It's about the simplest interface I can think of. One could use a plain
constant, "extern const int nettle_version_major;" instead of the
functions. Or use unsigned instead of int. But a function is perhaps
more conventional.

Maybe one should also have functions returning the shared library
version numbers? To adapt to ABI incompatibilities, the major shared
library number (which is part of the soname) is likely the most useful
piece of information.

And there's currently no "patch-level" version number, i.e. the final .1
in 3.1.1, neither in this patch, nor in version.h. It could be added if
there are any use-cases for that.

Regards,
/Niels

diff --git a/Makefile.in b/Makefile.in
index 08efb7d..1bb750d 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -133,6 +133,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
 		 umac-nh.c umac-nh-n.c umac-l2.c umac-l3.c \
 		 umac-poly64.c umac-poly128.c umac-set-key.c \
 		 umac32.c umac64.c umac96.c umac128.c \
+		 version.c \
 		 write-be32.c write-le32.c write-le64.c \
 		 yarrow256.c yarrow_key_event.c
 
diff --git a/testsuite/.test-rules.make b/testsuite/.test-rules.make
index 5d79320..aaab7a7 100644
--- a/testsuite/.test-rules.make
+++ b/testsuite/.test-rules.make
@@ -100,6 +100,9 @@ serpent-test$(EXEEXT): serpent-test.$(OBJEXT)
 twofish-test$(EXEEXT): twofish-test.$(OBJEXT)
 	$(LINK) twofish-test.$(OBJEXT) $(TEST_OBJS) -o twofish-test$(EXEEXT)
 
+version-test$(EXEEXT): version-test.$(OBJEXT)
+	$(LINK) version-test.$(OBJEXT) $(TEST_OBJS) -o version-test$(EXEEXT)
+
 knuth-lfib-test$(EXEEXT): knuth-lfib-test.$(OBJEXT)
 	$(LINK) knuth-lfib-test.$(OBJEXT) $(TEST_OBJS) -o knuth-lfib-test$(EXEEXT)
 
diff --git a/testsuite/Makefile.in b/testsuite/Makefile.in
index 6bc1907..f5264ba 100644
--- a/testsuite/Makefile.in
+++ b/testsuite/Makefile.in
@@ -23,7 +23,7 @@ TS_NETTLE_SOURCES = aes-test.c arcfour-test.c arctwo-test.c \
 		    sha384-test.c sha512-test.c sha512-224-test.c sha512-256-test.c \
 		    sha3-permute-test.c sha3-224-test.c sha3-256-test.c \
 		    sha3-384-test.c sha3-512-test.c \
-		    serpent-test.c twofish-test.c \
+		    serpent-test.c twofish-test.c version-test.c \
 		    knuth-lfib-test.c \
 		    cbc-test.c ctr-test.c gcm-test.c eax-test.c ccm-test.c \
 		    poly1305-test.c chacha-poly1305-test.c \
diff --git a/testsuite/version-test.c b/testsuite/version-test.c
new file mode 100644
index 0000000..a472e3b
--- /dev/null
+++ b/testsuite/version-test.c
@@ -0,0 +1,41 @@
+/* version-test.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#include "testutils.h"
+
+void
+test_main (void)
+{
+  /* This also checks that we don't by accident link with a different
+     version of nettle which is installed on the system. */
+  ASSERT (nettle_version_major () == NETTLE_VERSION_MAJOR);
+  ASSERT (nettle_version_minor () == NETTLE_VERSION_MINOR);
+}
diff --git a/version.c b/version.c
new file mode 100644
index 0000000..836f4eb
--- /dev/null
+++ b/version.c
@@ -0,0 +1,48 @@
+/* version.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "version.h"
+
+int
+nettle_version_major (void)
+{
+  return NETTLE_VERSION_MAJOR;
+}
+
+int
+nettle_version_minor (void)
+{
+  return NETTLE_VERSION_MINOR;
+}
diff --git a/version.h.in b/version.h.in
index 447e933..cf429f2 100644
--- a/version.h.in
+++ b/version.h.in
@@ -3,6 +3,7 @@
    Information about library version.
 
    Copyright (C) 2015 Red Hat, Inc.
+   Copyright (C) 2015 Niels Möller
 
    This file is part of GNU Nettle.
 
@@ -50,6 +51,12 @@ extern "C" {
 # define GMP_NUMB_BITS @GMP_NUMB_BITS@
 #endif
 
+int
+nettle_version_major (void);
+
+int
+nettle_version_minor (void);
+
 #ifdef __cplusplus
 }
 #endif

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150501204141</emailId><senderName>Elliot Saba</senderName><senderEmail>staticfloat@gmail.com</senderEmail><timestampReceived>2015-05-01 20:41:41-0400</timestampReceived><subject>Re: Version API</subject><body>

The patch looks perfect. Thank you!

On Fri, May 1, 2015, 13:36 Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:

&gt; Elliot Saba &lt;staticfloat@gmail.com&gt; writes:
&gt;
&gt; &gt; Right now, the way we're trying to solve this is by using dlsym() to look
&gt; &gt; for functions that are included in one API version, and not another.
&gt; This
&gt; &gt; isn't quite as easy as using a version number, but is what we will do to
&gt; &gt; tell the difference between, e.g. 2.7.1 and 3.0.0.
&gt;
&gt; Too bad there's no easy way (as far as I'm aware) to query the soname of
&gt; a library opened with dlopen.
&gt;
&gt; &gt; Either of your solutions will work here, I have no preference.
&gt;
&gt; Below is a possible patch. Feedback appreciated.
&gt;
&gt; It's about the simplest interface I can think of. One could use a plain
&gt; constant, "extern const int nettle_version_major;" instead of the
&gt; functions. Or use unsigned instead of int. But a function is perhaps
&gt; more conventional.
&gt;
&gt; Maybe one should also have functions returning the shared library
&gt; version numbers? To adapt to ABI incompatibilities, the major shared
&gt; library number (which is part of the soname) is likely the most useful
&gt; piece of information.
&gt;
&gt; And there's currently no "patch-level" version number, i.e. the final .1
&gt; in 3.1.1, neither in this patch, nor in version.h. It could be added if
&gt; there are any use-cases for that.
&gt;
&gt; Regards,
&gt; /Niels
&gt;
&gt; diff --git a/Makefile.in b/Makefile.in
&gt; index 08efb7d..1bb750d 100644
&gt; --- a/Makefile.in
&gt; +++ b/Makefile.in
&gt; @@ -133,6 +133,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
&gt;                  umac-nh.c umac-nh-n.c umac-l2.c umac-l3.c \
&gt;                  umac-poly64.c umac-poly128.c umac-set-key.c \
&gt;                  umac32.c umac64.c umac96.c umac128.c \
&gt; +                version.c \
&gt;                  write-be32.c write-le32.c write-le64.c \
&gt;                  yarrow256.c yarrow_key_event.c
&gt;
&gt; diff --git a/testsuite/.test-rules.make b/testsuite/.test-rules.make
&gt; index 5d79320..aaab7a7 100644
&gt; --- a/testsuite/.test-rules.make
&gt; +++ b/testsuite/.test-rules.make
&gt; @@ -100,6 +100,9 @@ serpent-test$(EXEEXT): serpent-test.$(OBJEXT)
&gt;  twofish-test$(EXEEXT): twofish-test.$(OBJEXT)
&gt;         $(LINK) twofish-test.$(OBJEXT) $(TEST_OBJS) -o
&gt; twofish-test$(EXEEXT)
&gt;
&gt; +version-test$(EXEEXT): version-test.$(OBJEXT)
&gt; +       $(LINK) version-test.$(OBJEXT) $(TEST_OBJS) -o
&gt; version-test$(EXEEXT)
&gt; +
&gt;  knuth-lfib-test$(EXEEXT): knuth-lfib-test.$(OBJEXT)
&gt;         $(LINK) knuth-lfib-test.$(OBJEXT) $(TEST_OBJS) -o
&gt; knuth-lfib-test$(EXEEXT)
&gt;
&gt; diff --git a/testsuite/Makefile.in b/testsuite/Makefile.in
&gt; index 6bc1907..f5264ba 100644
&gt; --- a/testsuite/Makefile.in
&gt; +++ b/testsuite/Makefile.in
&gt; @@ -23,7 +23,7 @@ TS_NETTLE_SOURCES = aes-test.c arcfour-test.c
&gt; arctwo-test.c \
&gt;                     sha384-test.c sha512-test.c sha512-224-test.c
&gt; sha512-256-test.c \
&gt;                     sha3-permute-test.c sha3-224-test.c sha3-256-test.c \
&gt;                     sha3-384-test.c sha3-512-test.c \
&gt; -                   serpent-test.c twofish-test.c \
&gt; +                   serpent-test.c twofish-test.c version-test.c \
&gt;                     knuth-lfib-test.c \
&gt;                     cbc-test.c ctr-test.c gcm-test.c eax-test.c ccm-test.c
&gt; \
&gt;                     poly1305-test.c chacha-poly1305-test.c \
&gt; diff --git a/testsuite/version-test.c b/testsuite/version-test.c
&gt; new file mode 100644
&gt; index 0000000..a472e3b
&gt; --- /dev/null
&gt; +++ b/testsuite/version-test.c
&gt; @@ -0,0 +1,41 @@
&gt; +/* version-test.c
&gt; +
&gt; +   Copyright (C) 2015 Niels Möller
&gt; +
&gt; +   This file is part of GNU Nettle.
&gt; +
&gt; +   GNU Nettle is free software: you can redistribute it and/or
&gt; +   modify it under the terms of either:
&gt; +
&gt; +     * the GNU Lesser General Public License as published by the Free
&gt; +       Software Foundation; either version 3 of the License, or (at your
&gt; +       option) any later version.
&gt; +
&gt; +   or
&gt; +
&gt; +     * the GNU General Public License as published by the Free
&gt; +       Software Foundation; either version 2 of the License, or (at your
&gt; +       option) any later version.
&gt; +
&gt; +   or both in parallel, as here.
&gt; +
&gt; +   GNU Nettle is distributed in the hope that it will be useful,
&gt; +   but WITHOUT ANY WARRANTY; without even the implied warranty of
&gt; +   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
&gt; +   General Public License for more details.
&gt; +
&gt; +   You should have received copies of the GNU General Public License and
&gt; +   the GNU Lesser General Public License along with this program.  If
&gt; +   not, see http://www.gnu.org/licenses/.
&gt; +*/
&gt; +
&gt; +#include "testutils.h"
&gt; +
&gt; +void
&gt; +test_main (void)
&gt; +{
&gt; +  /* This also checks that we don't by accident link with a different
&gt; +     version of nettle which is installed on the system. */
&gt; +  ASSERT (nettle_version_major () == NETTLE_VERSION_MAJOR);
&gt; +  ASSERT (nettle_version_minor () == NETTLE_VERSION_MINOR);
&gt; +}
&gt; diff --git a/version.c b/version.c
&gt; new file mode 100644
&gt; index 0000000..836f4eb
&gt; --- /dev/null
&gt; +++ b/version.c
&gt; @@ -0,0 +1,48 @@
&gt; +/* version.c
&gt; +
&gt; +   Copyright (C) 2015 Niels Möller
&gt; +
&gt; +   This file is part of GNU Nettle.
&gt; +
&gt; +   GNU Nettle is free software: you can redistribute it and/or
&gt; +   modify it under the terms of either:
&gt; +
&gt; +     * the GNU Lesser General Public License as published by the Free
&gt; +       Software Foundation; either version 3 of the License, or (at your
&gt; +       option) any later version.
&gt; +
&gt; +   or
&gt; +
&gt; +     * the GNU General Public License as published by the Free
&gt; +       Software Foundation; either version 2 of the License, or (at your
&gt; +       option) any later version.
&gt; +
&gt; +   or both in parallel, as here.
&gt; +
&gt; +   GNU Nettle is distributed in the hope that it will be useful,
&gt; +   but WITHOUT ANY WARRANTY; without even the implied warranty of
&gt; +   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
&gt; +   General Public License for more details.
&gt; +
&gt; +   You should have received copies of the GNU General Public License and
&gt; +   the GNU Lesser General Public License along with this program.  If
&gt; +   not, see http://www.gnu.org/licenses/.
&gt; +*/
&gt; +
&gt; +#if HAVE_CONFIG_H
&gt; +# include "config.h"
&gt; +#endif
&gt; +
&gt; +#include "version.h"
&gt; +
&gt; +int
&gt; +nettle_version_major (void)
&gt; +{
&gt; +  return NETTLE_VERSION_MAJOR;
&gt; +}
&gt; +
&gt; +int
&gt; +nettle_version_minor (void)
&gt; +{
&gt; +  return NETTLE_VERSION_MINOR;
&gt; +}
&gt; diff --git a/version.h.in b/version.h.in
&gt; index 447e933..cf429f2 100644
&gt; --- a/version.h.in
&gt; +++ b/version.h.in
&gt; @@ -3,6 +3,7 @@
&gt;     Information about library version.
&gt;
&gt;     Copyright (C) 2015 Red Hat, Inc.
&gt; +   Copyright (C) 2015 Niels Möller
&gt;
&gt;     This file is part of GNU Nettle.
&gt;
&gt; @@ -50,6 +51,12 @@ extern "C" {
&gt;  # define GMP_NUMB_BITS @GMP_NUMB_BITS@
&gt;  #endif
&gt;
&gt; +int
&gt; +nettle_version_major (void);
&gt; +
&gt; +int
&gt; +nettle_version_minor (void);
&gt; +
&gt;  #ifdef __cplusplus
&gt;  }
&gt;  #endif
&gt;
&gt; --
&gt; Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
&gt; Internet email is subject to wholesale government surveillance.
&gt;

</body></email><email><emailId>20150314122251</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-03-14 12:22:51-0400</timestampReceived><subject>Re: memeql_sec</subject><body>

On 15/03/2015 12:39 a.m., Niels Möller wrote:
&gt; Amos Jeffries writes:
&gt; 
&gt;&gt; Is the compiler optimized code for that for loop faster or slower than a
&gt;&gt; loop suming the differentials?
&gt; 
&gt; Not sure. But I don't think performance is very important here, the
&gt; function is going to be used on pretty small inputs.
&gt; 
&gt;&gt;     volatile unsigned char d;
&gt;&gt;     for (d = 0; ap &gt;= a; ap--, bp--)
&gt;&gt;       d += (*ap - *bp);
&gt; 
&gt; I don't think that is correct, since d may wrap around to zero. One
&gt; would need to accumulate into a larger variable, something like
&gt; 
&gt;   unsigned d;
&gt;   for (d = 0; ap &gt;= a; ap--, bp--)
&gt;      d += (uint8_t)(*ap - *bp);
&gt; 
&gt; which, if unsigned int is 32 bits, would be correct for n up to 2^24. (I
&gt; think the cast necessary, to avoid values being promoted to *signed*
&gt; int). Using | is simpler and more robust.

Aha! Thank you.


AYJ


</body></email><email><emailId>20150523083740</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-05-23 08:37:40-0400</timestampReceived><subject>Re: Bug#783699: nettle-dev is not Multi-Arch compatible</subject><body>

[I'm cross-posting to the nettle list and a debian bug, so please take
care when replying]

The issue is that there are some differences in generated nettle header
files depending on architecture and compiler version.

Francois Gouget &lt;fgouget@free.fr&gt; writes:

&gt; Here is a proposed patch for the compiler version issue in nettle-stdint.h:
&gt;
&gt; $ cat debian/patches/multiarch.patch 
&gt; --- a/aclocal.m4
&gt; +++ b/aclocal.m4
&gt; @@ -857,7 +857,7 @@
&gt;  fi # shortcircut to system "stdint.h"
&gt;  # ------------------ PREPARE VARIABLES ------------------------------
&gt;  if test "$GCC" = "yes" ; then
&gt; -ac_cv_stdint_message="using gnu compiler "`$CC --version | head -1` 
&gt; +ac_cv_stdint_message="using gnu compiler $CC" 
&gt;  else
&gt;  ac_cv_stdint_message="using $CC"
&gt;  fi

If we go this path, maybe just drop the conditional and unconditionally
print "using $CC"? I'm not sure about the reason for displaying the
version, but I guess some older gcc versions did stdint and/or
inttypes.h differently.

If you have the time, it would be helpful to look at the latest version
of AX_CREATE_STDINT_H (from autoconf archive) and see if it does
anything differently. Nettle uses a pretty old version (which seems to
work fine).

&gt; For GMP_NUMB_BITS here are some thoughts:

You must understand that nettle defines GMP_NUMB_BITS only if configured
with --enable-mini-gmp. This configuration is not intended to be
compatible with anything else, and should never be installed on a normal
debian system. It's intended for small embedded systems which needs to
verify digital signatures, but which consider the real libgmp too large.

&gt;  * Is it really necessary to install version.h?
&gt;    IMHO the right place for other packages to figure out library versions is through
&gt;    some scripting in the configure script rather than through a
&gt;    header.

This has been requested by users. Not everyone uses autoconf. And it's
very common practice, I think both gmp and gnutls have similar version
defines.

&gt;  * GMP_NUMB_BITS is already defined by libgmp-dev in gmp.h. More
&gt;  preceisely

Exactly, and when not configuring with --enable-mini-gmp, that's the
definitions which is used.

Getting into the details, Nettle's definition of GMP_NUMB_BITS
conceptually belongs in mini-gmp.h. However, mini-gmp is a standalone
package which doesn't use autoconf. And it has to be a preprocessor
*constant*, so definiting it like sizeof(unsigned long) * CHAR_BIT won't
cut it, since the preprocessor doesn't understand sizeof.

Therefore the definition, for the --enable-mini-gmp configuration which
needs it, should be in a nettle include file. Then the cleanest way
would be to omit the definition completely when not using
--enable-mini-gmp. I haven't done that, because it would make the
substitution logic harder, and because I was thinking that

  #define NETTLE_USE_MINI_GMP 0
  #if NETTLE_USE_MINI_GMP
  # define GMP_NUMB_BITS 64
  #endif

is harmless whatever value appears in the second define. If it helps, I
guess this could be changed into the architecture independent

  #define NETTLE_USE_MINI_GMP 0
  #if NETTLE_USE_MINI_GMP
  # define GMP_NUMB_BITS the moon is made of green cheese
  #endif

Opinions?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150421173001</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-04-21 17:30:01-0400</timestampReceived><subject>Re: bug against .short value</subject><body>

dongsheng zhang &lt;dongsheng.zhang@oracle.com&gt; writes:

&gt; Solaris doesn't take .short value, but instead only takes .value value.
&gt; We thus cannot compile the following file:
&gt; nettle-3.1/x86_64/gcm-hash8.asm

I see. From some testing, it seems that GNU as treats all of .short,
.word, .value and .2byte as aliases, defining 16-bit constants.

We currently use .short, and that breaks x86_64 builds using the
Sun/Oracle assembler. Does anyone know which of ".word", ".value" and
".2byte" is more portable (.value sounds very unspecific to me)? I'd
prefer to use a pseudo op supported by all relevant x86_64 assemblers,
and not have to add a configure test for this.

I think the relevant assemblers are GNU as (including older versions),
Sun/Oracle as, and the assembler used with clang on freebsd.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150316203359</emailId><senderName>Martin Sebor</senderName><senderEmail>msebor@redhat.com</senderEmail><timestampReceived>2015-03-16 20:33:59-0400</timestampReceived><subject>test failures on powerpc64le-redhat-linux</subject><body>


Running Nettle 3.0 tests on a powerpc64le RHEL 7.1 box shows
the two failures below.  The cause is in the second definition
of the HAVE_NATIVE_64_BIT configuration macro:

   $ grep HAVE_NATIVE_64_BIT config.*
   config.h:# define HAVE_NATIVE_64_BIT 1
   config.h:# define HAVE_NATIVE_64_BIT (SIZEOF_LONG * CHAR_BIT &gt;= 64)

The macro relies on the CHAR_BIT macro being defined at the
point of its expansion. Uses of HAVE_NATIVE_64_BIT of the form

   #if !HAVE_NATIVE_64_BIT

in files that don't include &lt;limits.h&gt; (and thus don't have
the CHAR_BIT macro defined) end up compiling the conditional
blocks that are intended to be included only when the target
has no native support for 64 bit arithmetic.  One such file
that comes into play in the failing tests is camellia-absorb.c.
Since powerpc64le obviously does have such support, the code
is unnecessary and, as it turns out, introduces errors.

Once &lt;limits.h&gt; is included all of Nettle's tests pass even
on powerpc64le-redhat-linux.

Martin

...
Encrypt failed:
Input:
0123456789abcdef fedcba9876543210

Output:
df51fc645013f77c 25c472e2871f742a

Expected:
6767313854966973 0857065648eabe43

/src/nettle-3.0/run-tests: line 57: 46381 Aborted                 "$1"
$testflags
FAIL: camellia
...
Assert failed: /src/nettle-3.0/testsuite/testutils.c:513:
MEMEQ(digest-&gt;length, buffer, digest-&gt;data)
/src/nettle-3.0/run-tests: line 57: 49811 Aborted                 "$1"
$testflags
FAIL: gcm
...
====================
2 of 55 tests failed
====================

</body></email><email><emailId>20150226100302</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-02-26 10:03:02-0400</timestampReceived><subject>curve25519 and eddsa</subject><body>

I've just pushed some documentation for the curve25519 and eddsa
functions. This raises a few questions on the current interfaces.

1. Should ecc-curves.h really declare nettle_curve25519? Its' not needed
   for any of the documented functions, except for obscurities like
   doing ecdsa (not eddsa) over the curve. It could be moved to
   ecc-internal, or be marked as internal in some other way. Perhaps
   renaming to _nettle_ed25519 would be appropriate.

2. curve25519_mul should be changed to have a void return type (an
   earlier implementation failed for inputs which didn't correspond to
   points on the curve, but instead were points on its twist). But the
   current implementation, using the Montgomery ladder, doesn't care and
   computes a well defined result for all inputs.

3. struct ed25519_private_key and struct ed25519_public_key include
   compile-time constant limb arrays. At least for the public key, this
   will imply an ABI break if/when we switch to a base 2^51
   representations for GF(2^255 - 19). So maybe switch to dynamic
   allocation for struct ed25519_public_key, or both structs?

4. There's no function to generate eddsa key pairs. To generate a
   private key, use a random 32-octet string. To get the corresponding
   public key, one can call ed25519_set_private_key, and copy the pub
   element of the struct. This needs some additional documentation or
   maybe some additional function.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150325224429</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-25 22:44:29-0400</timestampReceived><subject>Getting closer to nettle-3.1</subject><body>

I think the remaining items on
http://www.lysator.liu.se/~nisse/nettle/plan.html aren't very urgent,
and can be postponed.

Discussed recently, but not on that list, is mem_equalp (or whatever it
should be called). That's also not very urgent.

I plan to move NETTLE_USE_MINI_GMP from bignum.h to version.h, and drop
bignum.h.in. It should be enough with one configure-generated header
like that. It also has the advantage that version.h actually gets used
during the build. That change touches a couple of files, so I don't want
to check that in tonight.

Anyway, I think it's time to get into final testing. I've done some
tests on freebsd, revealing one real bug (triggered only when compiled
with the ancient gcc version freebsd keeps in /usr/bin). And I've made
some fixes to what gets included by make dist.

I hope to be able to create a nettle-3.1rc1.tar.gz in a day or two.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150326054022</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-26 05:40:22-0400</timestampReceived><subject>Re: Getting closer to nettle-3.1</subject><body>

On Wed, 2015-03-25 at 23:44 +0100, Niels Möller wrote:
&gt; I think the remaining items on
&gt; http://www.lysator.liu.se/~nisse/nettle/plan.html aren't very urgent,
&gt; and can be postponed.
&gt; 
&gt; Discussed recently, but not on that list, is mem_equalp (or whatever it
&gt; should be called). That's also not very urgent.
&gt; 
&gt; I plan to move NETTLE_USE_MINI_GMP from bignum.h to version.h, and drop
&gt; bignum.h.in. It should be enough with one configure-generated header
&gt; like that. It also has the advantage that version.h actually gets used
&gt; during the build. That change touches a couple of files, so I don't want
&gt; to check that in tonight.

What I'm wondering about that is that it will break all the openwrt
software depending on mini-gmp. Wouldn't it make sense to keep API
compatibility by having bignum.h include version.h?

regards,
Nikos



</body></email><email><emailId>20150308134145</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-08 13:41:45-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt;&gt; 1. Should ecc-curves.h really declare nettle_curve25519? Its' not needed
&gt;&gt;    for any of the documented functions, except for obscurities like
&gt;&gt;    doing ecdsa (not eddsa) over the curve. It could be moved to
&gt;&gt;    ecc-internal, or be marked as internal in some other way. Perhaps
&gt;&gt;    renaming to _nettle_ed25519 would be appropriate.
&gt;
&gt; A symbol that is not used can only cause issues. Using however,
&gt; _nettle_ed25519 would still export the symbol with the current ld
&gt; script.

It is used internally, but application code doesn't need it for any of
the documented functions (with the obscure exception mentioned above).

Hmm. For now, I think I'd prefer to move the declaration to
ecc-internal.h. And maybe rethink how if and how we should do a unified
interface for ecc operations on different types of curves.

&gt;&gt; 2. curve25519_mul should be changed to have a void return type (an
&gt;&gt;    earlier implementation failed for inputs which didn't correspond to
&gt;&gt;    points on the curve, but instead were points on its twist). But the
&gt;&gt;    current implementation, using the Montgomery ladder, doesn't care and
&gt;&gt;    computes a well defined result for all inputs.
&gt;
&gt; No idea about this, do you think that a future re-implementation could
&gt; need an error code?

Not sure. Maybe if there's a significant speedup. There's some potential
when optimizing the twisted edwards point operations, but the coordiante
transformation also has a cost, so I think it is unlikely to beat the
montgomery ladder by a large margin.

&gt;&gt; 3. struct ed25519_private_key and struct ed25519_public_key include
&gt;&gt;    compile-time constant limb arrays. At least for the public key, this
&gt;&gt;    will imply an ABI break if/when we switch to a base 2^51
&gt;&gt;    representations for GF(2^255 - 19). So maybe switch to dynamic
&gt;&gt;    allocation for struct ed25519_public_key, or both structs?
&gt;
&gt; I'm not familiar with the other representations, but could there be a
&gt; one-size fits all structure?

Maybe. On 64-bit machines, the base 2^51 bit trick expands each
coordinate from 4 to 5 words. On second thought, that conversion could
be done when the point is used, the cost should be negligible compared
to the scalar multiplication.

Let me think aloud.

It's not obvious how much to cache in struct ed25519_public_key. The
external public key is in compressed form: The y-coordinate and the lest
significant bit of the x coordinate, 256 bits total. It must be
decompressed by recovering the x coordinate. This is done by
ed25519_sha512_set_public_key, and the result is stored in struct
ed25519_public_key. And the function returns failure if decompression
fails.

When the key is used in ed25519_sha512_verify, there are additional
computations that depend on the public key only. The point is used for a
scalar multiplication, where the scalar depends on the message. Then the
point is expanded into extended coordinates, and a lookup table with 16
entries (2^ECC_MUL_A_EH_BITS). This is currently not cached.

I imagine it's an unusual case is to verify lots of signatures with the
same key. So one could go to the other extreme and not cache anything at
all, eliminate struct ed25519_public_key, and let ed25519_sha512_verify
take the compressed public key a input.

In the other hand, *signing* several messages using the same key seems
like a common use case, e.g., an ssh or tls server signing the
keyexchange handshake for each connection/session. The work done by
ed25519_sha512_set_private_key includes an expensive scalar
multiplication. But this is needed only for computing the corresponding
public key, which is added into the hashing of the message. So maybe one
could have the following simpler ed25519 interface, representing all
keys as strings of ED25519_KEY_SIZE octets:

  void
  ed25519_sha512_public_key (uint8_t *pub, const uint8_t *priv);

  void
  ed25519_sha512_sign (const uint8_t *priv, const uint8_t *pub,
                       size_t length, const uint8_t *msg,
                       uint8_t *signature);

  int
  ed25519_sha512_verify (const uint8_t *pub,
                         size_t length, const uint8_t *msg,
                         const uint8_t *signature);

That the public key is an input to ed25519_sha512_sign means that it
needs only a single scalar multiplication, and it's up to the caller to
compute and possibly cache the needed public key. One could even allow
pub to be NULL, and in that case recompute it (which makes the signing
take twice the time).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150310224733</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-10 22:47:33-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt;&gt; 2. curve25519_mul should be changed to have a void return type (an
&gt;&gt;    earlier implementation failed for inputs which didn't correspond to
&gt;&gt;    points on the curve, but instead were points on its twist). But the
&gt;&gt;    current implementation, using the Montgomery ladder, doesn't care and
&gt;&gt;    computes a well defined result for all inputs.
&gt;
&gt; No idea about this, do you think that a future re-implementation could
&gt; need an error code?

I've done this change now. In the documentation, I now say that the
output is undefined for inputs on the twist curve. Which I think is fine
for diffie-hellman: if you don't trust your partner to do his/her part
of the diffie-hellman exchange correctly (and authenticate the messages
you receive), you can't expect the generated session key to be secure or
useful, no matter how curve25519_mul computes the shared secret.

After optimizing the twisted edwards point operations, one could try the
alternative implementation using a (somewhat expensive) change of
coordinates to the twisted edwards curve, followed by a scalar
multiplication there (which should be slightly faster than the
Montgomery ladder), and then a change back to the original coordinates.

It seems questionable that can be faster, and unlikely that it's going
to be singificantly faster. So if that strategy is ruled out by
benchmarks, we can document that the output for all possible inputs is
what's computed by the Montgomery ladder.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150311090858</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-11 09:08:58-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

On Tue, Mar 10, 2015 at 11:47 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wro=
te:
&gt;&gt;&gt; 2. curve25519_mul should be changed to have a void return type (an
&gt;&gt;&gt;    earlier implementation failed for inputs which didn't correspond to
&gt;&gt;&gt;    points on the curve, but instead were points on its twist). But the
&gt;&gt;&gt;    current implementation, using the Montgomery ladder, doesn't care an=
d
&gt;&gt;&gt;    computes a well defined result for all inputs.
&gt;&gt; No idea about this, do you think that a future re-implementation could
&gt;&gt; need an error code?
&gt; I've done this change now. In the documentation, I now say that the
&gt; output is undefined for inputs on the twist curve. Which I think is fine
&gt; for diffie-hellman: if you don't trust your partner to do his/her part
&gt; of the diffie-hellman exchange correctly (and authenticate the messages
&gt; you receive), you can't expect the generated session key to be secure or
&gt; useful, no matter how curve25519_mul computes the shared secret.

I only follow in the high level, but wouldn't it be better for this
function to be allowed fail if there are cases could fail? Even if the
current version doesn't, a future version could detect a broken peer
(but not malicious) and that is better than just ignoring it.

regards,
Nikos

</body></email><email><emailId>20150311200544</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-11 20:05:44-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; I only follow in the high level, but wouldn't it be better for this
&gt; function to be allowed fail if there are cases could fail? Even if the
&gt; current version doesn't, a future version could detect a broken peer
&gt; (but not malicious) and that is better than just ignoring it.

I think it's a desirable property of curve25519, as implemented using
the Montgomery ladder, that no "point validation" is needed (even if I
don't understand the fine details in why point validation is needed for
many other curves). So

1. I like the interface with no return value, and I'd like to keep it
   unless there's some *significant* performance gain using some other
   method. And every eliminated return value makes the Nettle API
   simpler.

2. I think it is unlikely that the Montgomery method will be beaten. I
   discussed it briefly with djb before switching to the current
   implementation. The thing is that with twisted Edwards, an addition
   (8M) or a doubling (3M + 4S) is significantly faster than one step of
   the Montgomery ladder (5M + 4S). But for a scalar multiply we need
   255 doublings + a bunch of additions (sligthly more than 64, with a
   4-bit window size) + cost of point decompression + cost of
   side-channel silent table lookups. And the total is likely higher
   than for the 255 Montgomery steps in the current implementation.

It's just that I'm a bit anxious to commit to using Montgomery ladder in
future versions until I have done some benchmarks of my own. Maybe I
should stop worrying about that, and document the output fully for all
possible inputs? In the unlikely case that it turns out later to be a
mistake, we *can* do an API break and fix it later.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150311200844</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-11 20:08:44-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; It's not obvious how much to cache in struct ed25519_public_key.

[...]

&gt; So maybe one
&gt; could have the following simpler ed25519 interface, representing all
&gt; keys as strings of ED25519_KEY_SIZE octets:
&gt;
&gt;   void
&gt;   ed25519_sha512_public_key (uint8_t *pub, const uint8_t *priv);
&gt;
&gt;   void
&gt;   ed25519_sha512_sign (const uint8_t *priv, const uint8_t *pub,
&gt;                        size_t length, const uint8_t *msg,
&gt;                        uint8_t *signature);
&gt;
&gt;   int
&gt;   ed25519_sha512_verify (const uint8_t *pub,
&gt;                          size_t length, const uint8_t *msg,
&gt;                          const uint8_t *signature);
&gt;
&gt; That the public key is an input to ed25519_sha512_sign means that it
&gt; needs only a single scalar multiplication, and it's up to the caller to
&gt; compute and possibly cache the needed public key. One could even allow
&gt; pub to be NULL, and in that case recompute it (which makes the signing
&gt; take twice the time).

Any comments or opinions on the eddsa interface? I'd like to come to some
conclusion fairly soon.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150311201516</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-11 20:15:16-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

On Wed, 2015-03-11 at 21:08 +0100, Niels Möller wrote:

&gt; &gt;   void
&gt; &gt;   ed25519_sha512_public_key (uint8_t *pub, const uint8_t *priv);
&gt; &gt;
&gt; &gt;   void
&gt; &gt;   ed25519_sha512_sign (const uint8_t *priv, const uint8_t *pub,
&gt; &gt;                        size_t length, const uint8_t *msg,
&gt; &gt;                        uint8_t *signature);
&gt; &gt;
&gt; &gt;   int
&gt; &gt;   ed25519_sha512_verify (const uint8_t *pub,
&gt; &gt;                          size_t length, const uint8_t *msg,
&gt; &gt;                          const uint8_t *signature);
&gt; &gt;
&gt; &gt; That the public key is an input to ed25519_sha512_sign means that it
&gt; &gt; needs only a single scalar multiplication, and it's up to the caller to
&gt; &gt; compute and possibly cache the needed public key. One could even allow
&gt; &gt; pub to be NULL, and in that case recompute it (which makes the signing
&gt; &gt; take twice the time).
&gt; Any comments or opinions on the eddsa interface? I'd like to come to some
&gt; conclusion fairly soon.

None from me. As it is now this algorithm has no real world usage (non
standardized), so I cannot say whether this API is good or not. It looks
reasonable, but unless we have any standard using it's purely
theoretical. I'd say go for it, and if needed later we add another API.

regards,
Nikos



</body></email><email><emailId>20150312075736</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-12 07:57:36-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; but unless we have any standard using it's purely
&gt; theoretical. I'd say go for it, and if needed later we add another API.

At least we're working on standardization... See
https://datatracker.ietf.org/doc/draft-josefsson-eddsa-ed25519/

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150312082223</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-12 08:22:23-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

On Thu, Mar 12, 2015 at 8:57 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt;&gt; but unless we have any standard using it's purely
&gt;&gt; theoretical. I'd say go for it, and if needed later we add another API.
&gt; At least we're working on standardization... See
&gt; https://datatracker.ietf.org/doc/draft-josefsson-eddsa-ed25519/

That's nice. If this is supposed to be used in certificates, an OID as
well as some guidance on how to store the keys in ECPoint format will
be required. I'm not sure whether this should be done on this
document, but should be done somewhere :)

regards,
Nikos

</body></email><email><emailId>20150326213705</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-26 21:37:05-0400</timestampReceived><subject>nettle-3.1rc1</subject><body>

Available now, at

  http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc1.tar.gz
  http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc1.tar.gz.sig

There's also a corresponding tag in the repo (except that the suffix
"rc1" on the package version in configure.ac is not committed).

All testing and proof-reading highly appreciated.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150328101810</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-03-28 10:18:10-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

On Thu, 2015-03-26 at 22:37 +0100, Niels Möller wrote:
&gt; Available now, at
&gt; 
&gt;   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc1.tar.gz
&gt;   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc1.tar.gz.sig
&gt; 
&gt; There's also a corresponding tag in the repo (except that the suffix
&gt; "rc1" on the package version in configure.ac is not committed).

Thanks. I've added the chacha ciphersuites into gnutls, and run the TLS
benchmarks (with AES acceleration disabled):
                RSA_AES_128_GCM_SHA256  84.49 MB/sec
                       RSA_AES_128_CCM  65.35 MB/sec
                 RSA_CHACHA20_POLY1305  200.33 MB/sec

When AESNI/PCLMUL are enabled:
                RSA_AES_128_GCM_SHA256  1.19 GB/sec
                       RSA_AES_128_CCM  0.27 GB/sec
                 RSA_CHACHA20_POLY1305  0.20 GB/sec

I guess chacha will be good for smaller systems which have no hw AES
acceleration.

One small comment. I liked the ccm_encrypt_message() in ccm.h and would
be nice if it would be come the default interface provided by all AEAD
ciphers in nettle.

regards,
Nikos



</body></email><email><emailId>20150328161735</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-28 16:17:35-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; Thanks. I've added the chacha ciphersuites into gnutls, and run the TLS
&gt; benchmarks (with AES acceleration disabled):
&gt;                 RSA_AES_128_GCM_SHA256  84.49 MB/sec
&gt;                        RSA_AES_128_CCM  65.35 MB/sec
&gt;                  RSA_CHACHA20_POLY1305  200.33 MB/sec
&gt;
&gt; When AESNI/PCLMUL are enabled:
&gt;                 RSA_AES_128_GCM_SHA256  1.19 GB/sec
&gt;                        RSA_AES_128_CCM  0.27 GB/sec
&gt;                  RSA_CHACHA20_POLY1305  0.20 GB/sec
&gt;
&gt; I guess chacha will be good for smaller systems which have no hw AES
&gt; acceleration.

Or if you suspect that your communication partners will advertise aes
support, but have no hw aes.

Also, note that GCM has a pretty large per session memory footprint, so
if you have lots of simultaneous sessions, I'd expect cache misses could
reduce performance quite a lot compared what you'd expect from the
benchmark numbers.

&gt; One small comment. I liked the ccm_encrypt_message() in ccm.h and would
&gt; be nice if it would be come the default interface provided by all AEAD
&gt; ciphers in nettle.

I think we should add something like

  void
  aead_encrypt_message(const stuct nettle_aead *, void *ctx,
                       size_t nlength, const uint8_t *nonce,
                       size_t alength, const uint8_t *adata,
                       size_t clength, uint8_t *dst, const uint8_t *src);
  
  
  int
  aead_decrypt_message(const stuct nettle_aead *, void *ctx,
                       size_t nlength, const uint8_t *nonce,
                       size_t alength, const uint8_t *adata,
                       size_t mlength, uint8_t *dst, const uint8_t *src);

And there could be wrapper functions/macros for particular aead algorithms as
well, so the user doesn't have to care about the struct nettle_aead.

Patches welcome. But that will be for a later release.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150330195605</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-30 19:56:05-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; All testing and proof-reading highly appreciated.

I've now done some more testing on x86_64 freebsd and arm gnu/linux (in
addition to my main development platform, gnu/linux x86_64, and fixed a
couple of mostly configure-related bugs.

Then I tried windows cross compilation using mingw. w64 seems to fail
several tests (at least according to wine). Likely ABI issues in some of
the assembly files. Good news is that it seems 64-bit wine works out of
the box with debian jessie.

For w32, a build with --disable-shared --enable-mini-gmp passes all the
tests but the symbols-test, when I run the testsuite using wine32
(package "wine32", arch "i386"), but for a shared library build, for
some reason I can't get it to find the dll files. I have to dig further
on that.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150331050346</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-31 05:03:46-0400</timestampReceived><subject>nettle-3.1rc2</subject><body>

I've made an rc2 tarball, fixing known issues, except for the w64
problems which I haven't had time to debug yet.

   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc2.tar.gz
   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc2.tar.gz.sig

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150401045722</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-04-01 04:57:22-0400</timestampReceived><subject>Re: nettle-3.1rc2</subject><body>

On 1/04/2015 6:35 a.m., Niels Möller wrote:
&gt; nisse@lysator.liu.se (Niels Möller) writes:
&gt; 
&gt;&gt; I've made an rc2 tarball, fixing known issues, except for the w64
&gt;&gt; problems which I haven't had time to debug yet.
&gt; 
&gt; I think I have found the w64 problem. It breaks with mini-gmp.
&gt; 
&gt; The problem is, x86_64 assembly files like, e.g, x86_64/ecc-244-modp.asm
&gt; assumes that GMP_NUMB_BITS == 64. And when building with mini-gmp,
&gt; mp_limb_t is unsigned long, and with the microsoft w64 ABI, that's a
&gt; 32-bit type, so we get GMP_NUMB_BITS == 32.
&gt; 
&gt; I think the correct way is to add some markup to the assembly files
&gt; saying what value of GMP_NUMB_BITS they need, and exclude files which
&gt; expect a value different from the one detected by configure.

Sounds like a good idea to me.

If this mp_limb_t type being long is a generic thing it is likely
affecting other 32-bit OS with mini-gmp in the same way.

Amos


</body></email><email><emailId>20150331063411</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-03-31 06:34:11-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

On Mon, Mar 30, 2015 at 9:56 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; nisse@lysator.liu.se (Niels M=F6ller) writes:
&gt;&gt; All testing and proof-reading highly appreciated.
&gt; I've now done some more testing on x86_64 freebsd and arm gnu/linux (in
&gt; addition to my main development platform, gnu/linux x86_64, and fixed a
&gt; couple of mostly configure-related bugs.
&gt; Then I tried windows cross compilation using mingw. w64 seems to fail
&gt; several tests (at least according to wine). Likely ABI issues in some of
&gt; the assembly files. Good news is that it seems 64-bit wine works out of
&gt; the box with debian jessie.

Something that I just noticed is that chacha_poly1305_encrypt()
returns a void value. However this function is limited to 2^32 data
which is not really an expected upper bound. Shouldn't the encrypt
function return an int instead and notify callers of overflow?

regards,
Nikos

</body></email><email><emailId>20150331072207</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-31 07:22:07-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Something that I just noticed is that chacha_poly1305_encrypt()
&gt; returns a void value. However this function is limited to 2^32 data
&gt; which is not really an expected upper bound.

At least the limit ought to be documented, and maybe backed up by an
assert. I hesitate to add a return value for this.

Where do you see a 2^32 limit? If I remember this correctly, it uses
chacha with 96 bit nonce and 32 bit counter, where counter 0 is used for
key setup. So this limits the message size to (2^32-1)*64, appr. 250 GB.
If there is any smaller limit, that's likely a bug.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150312084734</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-12 08:47:34-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; That's nice. If this is supposed to be used in certificates, an OID as
&gt; well as some guidance on how to store the keys in ECPoint format will
&gt; be required.

I hope Simon knows more about that. An object identifier for the
algorithm is definitely needed. If at all possible, I think public keys
should be represented as plain strings of 32 octets, with no additional
wrapping. It's very intentional that the eddsa paper defines all inputs
and outputs as octet strings, with no structure that applications or
protocols should care about.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150312133211</emailId><senderName>James Cloos</senderName><senderEmail>cloos@jhcloos.com</senderEmail><timestampReceived>2015-03-12 13:32:11-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

&gt;&gt;&gt;&gt;&gt; "NM" == Niels Möller &lt;nisse@lysator.liu.se&gt; writes:

NM&gt; An object identifier for the algorithm is definitely needed. If at
NM&gt; all possible, I think public keys should be represented as plain
NM&gt; strings of 32 octets, with no additional wrapping.

I'm sure there will be some disagreement from those with something to
sell.  There always is.  But one does hope sense will win out and the
above will win.

-JimC
-- 
James Cloos &lt;cloos@jhcloos.com&gt;         OpenPGP: 0x997A9F17ED7DAEA6

</body></email><email><emailId>20150317115933</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-17 11:59:33-0400</timestampReceived><subject>Re: test failures on powerpc64le-redhat-linux</subject><body>

Martin Sebor &lt;msebor@redhat.com&gt; writes:

&gt; One such file
&gt; that comes into play in the failing tests is camellia-absorb.c.
&gt; Since powerpc64le obviously does have such support, the code
&gt; is unnecessary and, as it turns out, introduces errors.

I added an #include &lt;limits.h&gt; to camellia-absorb.c last June, after the
same problem had been tracked down by Magnus Holmgren, starting from
failing tests on the debian s390x build machines.

I should mention this bugfix in the NEWS file for 3.1.

If you have found any additional other file(s) which are missing a
required limits.h include, I'd like to know.

And the primary problem is not a bad value of HAVE_NATIVE_64_BIT in
itself (that should only affect performance). What really breaks
camellia is that HAVE_NATIVE_64_BIT is evaluated differently in
cammellia-absorb.c and camellia-crypt-internal.c, since the subkeys are
processed slightly differently in the two cases.

The special case for x86_64 in config.h is intended only for 64-bit MS
windows builds. At least, that's the only 64-bit system I'm aware of
where unsigned long is not a 64-bit type.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150319100107</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-03-19 10:01:07-0400</timestampReceived><subject>patch: added missing dist files</subject><body>

["0001-added-missing-dist-files.patch" (text/x-diff)]

From 389b07ad547e2007dd970cee302ed40d4f846525 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Thu, 19 Mar 2015 10:59:37 +0100
Subject: [PATCH] added missing dist files

---
 Makefile.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/Makefile.in b/Makefile.in
index dbe03f4..2a5c442 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -216,6 +216,7 @@ DISTFILES = $(SOURCES) $(HEADERS) getopt.h getopt_int.h \
 	.bootstrap run-tests \
 	aclocal.m4 configure.ac \
 	configure stamp-h.in bignum.h.in \
+	libnettle.map.in libhogweed.map.in \
 	config.guess config.sub install-sh texinfo.tex \
 	config.h.in config.m4.in config.make.in	Makefile.in \
 	README AUTHORS COPYING.LESSERv3 COPYINGv2 COPYINGv3 \
-- 
2.1.0



</body></email><email><emailId>20150319185740</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-19 18:57:40-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; Attached.

Both patches applied now.

Thanks!

/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150319192520</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-19 19:25:20-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt;   void
&gt;   ed25519_sha512_public_key (uint8_t *pub, const uint8_t *priv);
&gt;
&gt;   void
&gt;   ed25519_sha512_sign (const uint8_t *priv, const uint8_t *pub,
&gt;                        size_t length, const uint8_t *msg,
&gt;                        uint8_t *signature);
&gt;
&gt;   int
&gt;   ed25519_sha512_verify (const uint8_t *pub,
&gt;                          size_t length, const uint8_t *msg,
&gt;                          const uint8_t *signature);

I've made this change now (except that I switched the argument order of
ed25519_sha512_sign). I think it's the simplest interface that is
reasonably efficient. If there is any need for higher performance in the
case of many signature verify operations using the same public key, a
new function could be added later.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150326060829</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-26 06:08:29-0400</timestampReceived><subject>Re: Getting closer to nettle-3.1</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; Wouldn't it make sense to keep API compatibility by having bignum.h
&gt; include version.h?

Yes, it has to do that. bignum.h needs the NETTLE_USE_MINI_GMP define.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150331083803</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-03-31 08:38:03-0400</timestampReceived><subject>Re: nettle-3.1rc1</subject><body>

On Tue, Mar 31, 2015 at 9:22 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt;&gt; Something that I just noticed is that chacha_poly1305_encrypt()
&gt;&gt; returns a void value. However this function is limited to 2^32 data
&gt;&gt; which is not really an expected upper bound.
&gt; At least the limit ought to be documented, and maybe backed up by an
&gt; assert. I hesitate to add a return value for this.
&gt; Where do you see a 2^32 limit? If I remember this correctly, it uses
&gt; chacha with 96 bit nonce and 32 bit counter, where counter 0 is used for
&gt; key setup. So this limits the message size to (2^32-1)*64, appr. 250 GB.
&gt; If there is any smaller limit, that's likely a bug.

Indeed I meant 2^32 operations. My current hard drives are larger than
250 GB so I guess that is not a terrible limit. For gnutls it doesn't
matter much as we encrypt per packet which are small, but if any
applications use nettle to encrypt large files will trigger that. An
assert() while is better than nothing it means a crash in the
application that will attempt to encrypt that data, and I'm not sure
that applications should be responsible for counting the data they
input to individual ciphers. The limits change per cipher, and nettle
already has a counter.

regards,
Nikos

</body></email><email><emailId>20150331173520</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-31 17:35:20-0400</timestampReceived><subject>Re: nettle-3.1rc2</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I've made an rc2 tarball, fixing known issues, except for the w64
&gt; problems which I haven't had time to debug yet.

I think I have found the w64 problem. It breaks with mini-gmp.

The problem is, x86_64 assembly files like, e.g, x86_64/ecc-244-modp.asm
assumes that GMP_NUMB_BITS == 64. And when building with mini-gmp,
mp_limb_t is unsigned long, and with the microsoft w64 ABI, that's a
32-bit type, so we get GMP_NUMB_BITS == 32.

I think the correct way is to add some markup to the assembly files
saying what value of GMP_NUMB_BITS they need, and exclude files which
expect a value different from the one detected by configure.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150331212833</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-03-31 21:28:33-0400</timestampReceived><subject>Re: nettle-3.1rc3</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I think the correct way is to add some markup to the assembly files
&gt; saying what value of GMP_NUMB_BITS they need, and exclude files which
&gt; expect a value different from the one detected by configure.

Fixed now. Interestingly, it's only moduli which are represented as an
*odd* number of 32-bit limbs which fail. I.e., secp_224r1 and
secp_521_r1. For an even number of 32-bit limbs, it's the same size, and
they represent the same integer when interpreted as 64-bit limbs (since
GMP and mini-gmp uses little endian order of the limbs), and x86 doesn't
require aligned reads.

I've made an rc3 tarball. 

   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc3.tar.gz
   http://www.lysator.liu.se/~nisse/archive/nettle-3.1rc3.tar.gz.sig

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150205200933</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-02-05 20:09:33-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Patch below (and also in the "chacha96"-branch in the public repo). Any
&gt; comments before I merge it? In particular, is chacha_set_nonce96 a good
&gt; name and function?

Merged now. I've also merged the versioned-symbols branch.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150210214250</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-02-10 21:42:50-0400</timestampReceived><subject>Re: [PATCH v3] Please add base-64 URL-safe alphabet</subject><body>

On 11/02/2015 10:24 a.m., Niels Möller wrote:
&gt; Amos Jeffries writes:
&gt; 
&gt;&gt; The attached patch implements a proposed API/ABI extension adding
&gt;&gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt;&gt; Safe Alphabet"
&gt; 
&gt; Committed now, with some edits. Thanks!
&gt; 
&gt; I also added a
&gt; 
&gt;   struct nettle_armor nettle_base64_url;
&gt; 
&gt; Looking at the base64_{en,de}code_ctx, maybe one could micro-optimize
&gt; them while at it, like changing
&gt; 
&gt;   struct base64_decode_ctx
&gt;   {
&gt;     unsigned word;
&gt;     unsigned bits;
&gt;     unsigned padding;
&gt;     const signed char *table;
&gt;   };
&gt; 
&gt; (typically 16 bytes on 32-bit machines, 24 (incl. alignment padding) on
&gt; 64-bit machines) to
&gt; 
&gt;   struct base64_decode_ctx
&gt;   {
&gt;     const signed char *table;
&gt;     unsigned short word;
&gt;     unsigned char bits;
&gt;     unsigned char padding;
&gt;   };
&gt; 
&gt; which would reduce the size to 8 and 16 bytes, respectively. At least, I
&gt; think it's prettier to put the large pointer first in the struct.
&gt; 

Agreed. I will leave that commit to you though since you seem to already
have the patch above.

Amos


</body></email><email><emailId>20150227170202</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-02-27 17:02:02-0400</timestampReceived><subject>Re: curve25519 and eddsa</subject><body>

On Thu, 2015-02-26 at 11:03 +0100, Niels Möller wrote:
&gt; I've just pushed some documentation for the curve25519 and eddsa
&gt; functions. This raises a few questions on the current interfaces.
&gt; 
&gt; 1. Should ecc-curves.h really declare nettle_curve25519? Its' not needed
&gt;    for any of the documented functions, except for obscurities like
&gt;    doing ecdsa (not eddsa) over the curve. It could be moved to
&gt;    ecc-internal, or be marked as internal in some other way. Perhaps
&gt;    renaming to _nettle_ed25519 would be appropriate.

A symbol that is not used can only cause issues. Using however,
_nettle_ed25519 would still export the symbol with the current ld
script.

&gt; 2. curve25519_mul should be changed to have a void return type (an
&gt;    earlier implementation failed for inputs which didn't correspond to
&gt;    points on the curve, but instead were points on its twist). But the
&gt;    current implementation, using the Montgomery ladder, doesn't care and
&gt;    computes a well defined result for all inputs.

No idea about this, do you think that a future re-implementation could
need an error code?

&gt; 3. struct ed25519_private_key and struct ed25519_public_key include
&gt;    compile-time constant limb arrays. At least for the public key, this
&gt;    will imply an ABI break if/when we switch to a base 2^51
&gt;    representations for GF(2^255 - 19). So maybe switch to dynamic
&gt;    allocation for struct ed25519_public_key, or both structs?

I'm not familiar with the other representations, but could there be a
one-size fits all structure?

regards,
Nikos



</body></email><email><emailId>20150112100409</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-12 10:04:09-0400</timestampReceived><subject>Re: patch: define API version number</subject><body>

On Sun, Jan 11, 2015 at 3:14 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; I'd prefer either a separate file nettle/version.h, or some file like
&gt; nettle-typs.h included in all other nettle headers. And if we let
&gt; configure generate a header file, it makes some sense to also move the
&gt; definition of NETTLE_USE_MINI_GMP there, and move back from bignum-h-in
&gt; to bignum.h.
&gt; And I'm also not sure I like the way major and minor numbers are
&gt; combined into a single value. Can't they be kept separate, say
&gt; NETTLE_VERSION, NETTLE_MINOR_VERSION, NETTLE_PATCHLEVEL or so?
&gt; What do other packages do? E.g., gcc uses
&gt;   $ echo | cpp -dM -E - |grep GNUC
&gt;   #define __GNUC_PATCHLEVEL__ 2
&gt;   #define __GNUC__ 4
&gt;   #define __GNUC_MINOR__ 7

I needed the version check in order to have two versions of a program,
one for the pre-3 API and one for the post. Having only two
definitions would make the complete version check harder. However, if
both approaches are present it would be best. For the two definitions
approach it would also make sense to associate some guarrantees for
them, otherwise using them wouldn't provide much benefit.

&gt; Maybe there should also be correspondingglobal symbols, so that version
&gt; can be checked also at runtime?

libgcrypt defines gcry_check_version() which is a good version checker
for runtime. However, given the low-level nature of nettle, I'm not
sure whether having such a function would provide much. Such runtime
checks are nice on high level APIs which may have an additional
feature in some version (e.g. for gcry_cipher_open one could have a
runtime check for a particular algorithm). For nettle, the API and ABI
are so low-level one can simply check for the specific function.

https://www.gnupg.org/documentation/manuals/gcrypt/Initializing-the-library=
.html

regards,
Nikos

</body></email><email><emailId>20150112123051</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-12 12:30:51-0400</timestampReceived><subject>Re: Intel aes instructions</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; No idea. The openssl code I currently use in gnutls, doesn't utilize
&gt; the AES instructions. It outputs sequences of:
&gt; .byte   102,15,56,220,248
&gt; .byte   102,68,15,56,220,192
&gt; for these instructions.

That's a reasonable fallback (gmp does something similar for some
instructions). But I'd still like to know the right way to do it...

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150116154729</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-16 15:47:29-0400</timestampReceived><subject>Re: Fat library support (was: Re: Intel aes instructions)</subject><body>

On Tue, Jan 13, 2015 at 11:34 AM, Nikos Mavrogiannopoulos
&lt;n.mavrogiannopoulos@gmail.com&gt; wrote:
&gt; On Tue, Jan 13, 2015 at 11:20 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; w=
rote:
&gt;&gt; nisse@lysator.liu.se (Niels M=F6ller) writes:
&gt;&gt;&gt; Clearly, this will be more useful after adding support for
&gt;&gt;&gt; fat binaries, detecting presence of these instructions at runtime.
&gt;&gt;
&gt;&gt; I've now had a first go at fat-library support. Checked in on the branch
&gt;&gt; fat-library. See
&gt;&gt; https://git.lysator.liu.se/nettle/nettle/blob/fat-library/x86_64/fat/fat=
.c

A quick and dirty patch to enable SSE2 instructions for memxor() on
Intel CPUs is attached.
I tried to follow the logic in the fat.c file, but I may have missed
something. I've not added memxor3() because it is actually slower with
SSE2.

SSE2:
            memxor     aligned 26081.83
            memxor   unaligned 25893.69

No-SSE2:
            memxor     aligned 17806.94
            memxor   unaligned 16581.48

regards,
Nikos

["0001-Select-SSE2-XOR-when-on-Intel-x86-64.patch" (text/plain-diff)]

From f3e529a40fa376a9ce73a229fa223655504a1ac5 Mon Sep 17 00:00:00 2001
From: Nikos Mavrogiannopoulos &lt;nmav@redhat.com&gt;
Date: Fri, 16 Jan 2015 16:43:23 +0100
Subject: [PATCH] Select SSE2 XOR when on Intel x86-64

---
 x86_64/fat/fat.c      |  33 +++++++
 x86_64/fat/memxor.asm | 250 ++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 283 insertions(+)
 create mode 100644 x86_64/fat/memxor.asm

diff --git a/x86_64/fat/fat.c b/x86_64/fat/fat.c
index 3585cf5..e892537 100644
--- a/x86_64/fat/fat.c
+++ b/x86_64/fat/fat.c
@@ -36,6 +36,7 @@
 #include &lt;assert.h&gt;
 #include &lt;stdio.h&gt;
 #include &lt;stdlib.h&gt;
+#include &lt;string.h&gt;
 
 #include "nettle-types.h"
 
@@ -96,6 +97,12 @@ aes_crypt_internal_func _aes_decrypt IFUNC ("_aes_decrypt_resolve");
 aes_crypt_internal_func _nettle_aes_decrypt_x86_64;
 aes_crypt_internal_func _nettle_aes_decrypt_aesni;
 
+typedef void *(memxor_func)(void *dst_in, const void *src_in, size_t n);
+
+memxor_func nettle_memxor IFUNC ("_memxor_resolve");
+memxor_func _nettle_memxor_x86_64;
+memxor_func _nettle_memxor_sse2;
+
 #if HAVE_LINK_IFUNC
 #define _aes_encrypt_init NULL
 #define _aes_decrypt_init NULL
@@ -106,6 +113,7 @@ static aes_crypt_internal_func _aes_decrypt_init;
 
 static aes_crypt_internal_func *_aes_encrypt_vec = _aes_encrypt_init;
 static aes_crypt_internal_func *_aes_decrypt_vec = _aes_decrypt_init;
+static memxor_func *_memxor_vec = _nettle_memxor_x86_64;
 
 /* This function should usually be called only once, at startup. But
    it is idempotent, and on x86, pointer updates are atomic, so
@@ -144,6 +152,16 @@ fat_init (void)
       _aes_encrypt_vec = _nettle_aes_encrypt_x86_64;
       _aes_decrypt_vec = _nettle_aes_decrypt_x86_64;
     }
+
+  _nettle_cpuid (0, cpuid_data);
+  if (memcmp(&amp;cpuid_data[1], "Genu", 4) == 0 &amp;&amp;
+      memcmp(&amp;cpuid_data[3], "ineI", 4) == 0 &amp;&amp;
+      memcmp(&amp;cpuid_data[2], "ntel", 4) == 0) {
+      if (verbose)
+	fprintf (stderr, "libnettle: intel SSE2 will be used for XOR.\n");
+      _memxor_vec = _nettle_memxor_sse2;
+  }
+
   /* FIXME: We ought to use some thread-aware memory barrier before
      setting the initialized flag. For now, just do another cpuinfo
      call to get some synchronization. */
@@ -179,6 +197,15 @@ _aes_decrypt_resolve (void)
   return (void_func *) _aes_decrypt_vec;
 }
 
+static void_func *
+_memxor_resolve (void)
+{
+  if (getenv ("NETTLE_FAT_VERBOSE"))
+    fprintf (stderr, "libnettle: _memxor_resolve\n");
+  fat_init ();
+  return (void_func *) _memxor_vec;
+}
+
 #else /* !HAVE_LINK_IFUNC */
 
 /* We need wrapper functions jumping via the function pointer. */
@@ -226,4 +253,10 @@ _aes_decrypt_init (unsigned rounds, const uint32_t *keys,
   _aes_decrypt (rounds, keys, T, length, dst, src);
 }
 
+void *
+memxor(void *dst_in, const void *src_in, size_t n)
+{
+  return _memxor_vec (dst_in, src_in, n);
+}
+
 #endif /* !HAVE_LINK_IFUNC */
diff --git a/x86_64/fat/memxor.asm b/x86_64/fat/memxor.asm
new file mode 100644
index 0000000..118447a
--- /dev/null
+++ b/x86_64/fat/memxor.asm
@@ -0,0 +1,250 @@
+C x86_64/memxor.asm
+
+ifelse(&lt;
+   Copyright (C) 2010, 2014, Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+&gt;)
+
+C Register usage:
+define(&lt;DST&gt;, &lt;%rax&gt;) C Originally in %rdi
+define(&lt;SRC&gt;, &lt;%rsi&gt;)
+define(&lt;N&gt;, &lt;%rdx&gt;)
+define(&lt;TMP&gt;, &lt;%r8&gt;)
+define(&lt;TMP2&gt;, &lt;%r9&gt;)
+define(&lt;CNT&gt;, &lt;%rdi&gt;)
+define(&lt;S0&gt;, &lt;%r11&gt;)
+define(&lt;S1&gt;, &lt;%rdi&gt;) C Overlaps with CNT 
+
+	.file "memxor.asm"
+
+	.text
+
+	C memxor(void *dst, const void *src, size_t n)
+	C 	          %rdi               %rsi      %rdx
+	ALIGN(16)
+
+PROLOGUE(_nettle_memxor_x86_64)
+	W64_ENTRY(3, 0)
+
+	test	N, N
+	C Get number of unaligned bytes at the end
+	C %rdi is used as CNT, %rax as DST and as return value
+	mov	%rdi, %rax
+	jz	.Ldone
+	add 	N, CNT
+	and	$7, CNT
+	
+	jz	.Laligned
+
+	cmp	$8, N
+	jc	.Lfinal_next
+
+	C FIXME: Instead of this loop, could try cmov with memory
+	C destination, as a sequence of one 8-bit, one 16-bit and one
+	C 32-bit operations. (Except that cmov can't do 8-bit ops, so
+	C that step has to use a conditional).
+.Lalign_loop:
+	
+	sub	$1, N
+	movb	(SRC, N), LREG(TMP)
+	xorb	LREG(TMP), (DST, N)
+	sub	$1, CNT
+	jnz	.Lalign_loop
+
+.Laligned:
+
+	C Next destination word is -8(DST, N)
+	C Setup for unrolling
+	test	$8, N
+	jz	.Lword_next
+
+	sub	$8, N
+	jz	.Lone_word
+
+	mov	(SRC, N), TMP
+	xor	TMP, (DST, N)
+	
+	jmp	.Lword_next
+
+	ALIGN(16)
+
+.Lword_loop:
+	mov	8(SRC, N), TMP
+	mov	(SRC, N), TMP2
+	xor	TMP, 8(DST, N)
+	xor	TMP2, (DST, N)
+
+.Lword_next:
+	sub	$16, N
+	ja	.Lword_loop	C Not zero and no carry
+	jnz	.Lfinal
+
+	C Final operation is word aligned
+	mov	8(SRC, N), TMP
+	xor	TMP, 8(DST, N)
+	
+.Lone_word:
+	mov	(SRC, N), TMP
+	xor	TMP, (DST, N)
+
+	W64_EXIT(3, 0)
+	ret
+
+.Lfinal:
+	add	$15, N
+
+.Lfinal_loop:
+	movb	(SRC, N), LREG(TMP)
+	xorb	LREG(TMP), (DST, N)
+.Lfinal_next:
+	sub	$1, N
+	jnc	.Lfinal_loop
+
+.Ldone:
+	W64_EXIT(3, 0)
+	ret
+
+EPILOGUE(_nettle_memxor_x86_64)
+
+PROLOGUE(_nettle_memxor_sse2)
+	W64_ENTRY(3, 0)
+
+	test	N, N
+	C Get number of unaligned bytes at the end
+	C %rdi is used as CNT, %rax as DST and as return value
+	mov	%rdi, %rax
+	jz	.SLdone
+	add 	N, CNT
+	and	$7, CNT
+	
+	jz	.SLaligned
+
+	cmp	$8, N
+	jc	.SLfinal_next
+
+	C FIXME: Instead of this loop, could try cmov with memory
+	C destination, as a sequence of one 8-bit, one 16-bit and one
+	C 32-bit operations. (Except that cmov can't do 8-bit ops, so
+	C that step has to use a conditional).
+.SLalign_loop:
+	
+	sub	$1, N
+	movb	(SRC, N), LREG(TMP)
+	xorb	LREG(TMP), (DST, N)
+	sub	$1, CNT
+	jnz	.SLalign_loop
+
+.SLaligned:
+	cmp	$16, N
+	jnc	.SLsse2_case
+
+	C Next destination word is -8(DST, N)
+	C Setup for unrolling
+	test	$8, N
+	jz	.SLword_next
+
+	sub	$8, N
+	jz	.SLone_word
+
+	mov	(SRC, N), TMP
+	xor	TMP, (DST, N)
+	
+	jmp	.SLword_next
+
+	ALIGN(16)
+
+.SLword_loop:
+	mov	8(SRC, N), TMP
+	mov	(SRC, N), TMP2
+	xor	TMP, 8(DST, N)
+	xor	TMP2, (DST, N)
+
+.SLword_next:
+	sub	$16, N
+	ja	.SLword_loop	C Not zero and no carry
+	jnz	.SLfinal
+
+	C Final operation is word aligned
+	mov	8(SRC, N), TMP
+	xor	TMP, 8(DST, N)
+	
+.SLone_word:
+	mov	(SRC, N), TMP
+	xor	TMP, (DST, N)
+
+	W64_EXIT(3, 0)
+	ret
+
+.SLfinal:
+	add	$15, N
+
+.SLfinal_loop:
+	movb	(SRC, N), LREG(TMP)
+	xorb	LREG(TMP), (DST, N)
+.SLfinal_next:
+	sub	$1, N
+	jnc	.SLfinal_loop
+
+.SLdone:
+	W64_EXIT(3, 0)
+	ret
+
+.SLsse2_case:
+	lea	(DST, N), TMP
+	test	$8, TMP
+	jz	.SLsse2_next
+	sub	$8, N
+	mov	(SRC, N), TMP
+	xor	TMP, (DST, N)
+	jmp	.SLsse2_next
+
+	ALIGN(16)
+.SLsse2_loop:
+	movdqu	(SRC, N), %xmm0
+	movdqa	(DST, N), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	%xmm1, (DST, N)
+.SLsse2_next:
+	sub	$16, N
+	ja	.SLsse2_loop
+	
+	C FIXME: See if we can do a full word first, before the
+	C byte-wise final loop.
+	jnz	.SLfinal		
+
+	C Final operation is aligned
+	movdqu	(SRC), %xmm0
+	movdqa	(DST), %xmm1
+	pxor	%xmm0, %xmm1
+	movdqa	%xmm1, (DST)
+
+	W64_EXIT(3, 0)
+	ret
+
+EPILOGUE(_nettle_memxor_sse2)
+
-- 
2.1.0



</body></email><email><emailId>20150124122207</emailId><senderName>Martin Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-24 12:22:07-0400</timestampReceived><subject>[PATCH 1/2] arm: Add .arch directives for armv6</subject><body>

This allows building these files as part of a fat build, even if
the assembler by default targets a lower architecture version.
---
 arm/v6/aes-decrypt-internal.asm | 2 ++
 arm/v6/aes-encrypt-internal.asm | 2 ++
 arm/v6/sha1-compress.asm        | 1 +
 arm/v6/sha256-compress.asm      | 1 +
 4 files changed, 6 insertions(+)

diff --git a/arm/v6/aes-decrypt-internal.asm b/arm/v6/aes-decrypt-internal.asm
index 28d8f6f..3eab3eb 100644
--- a/arm/v6/aes-decrypt-internal.asm
+++ b/arm/v6/aes-decrypt-internal.asm
@@ -30,6 +30,8 @@ ifelse(&lt;
    not, see http://www.gnu.org/licenses/.
 &gt;) 
 
+	.arch armv6
+
 include_src(&lt;arm/aes.m4&gt;)
 
 define(&lt;PARAM_ROUNDS&gt;, &lt;r0&gt;)
diff --git a/arm/v6/aes-encrypt-internal.asm b/arm/v6/aes-encrypt-internal.asm
index f7f4769..e4fa25d 100644
--- a/arm/v6/aes-encrypt-internal.asm
+++ b/arm/v6/aes-encrypt-internal.asm
@@ -30,6 +30,8 @@ ifelse(&lt;
    not, see http://www.gnu.org/licenses/.
 &gt;) 
 
+	.arch armv6
+
 include_src(&lt;arm/aes.m4&gt;)
 
 C	Benchmarked at at 706, 870, 963 cycles/block on cortex A9,
diff --git a/arm/v6/sha1-compress.asm b/arm/v6/sha1-compress.asm
index fc1ebf0..59d6297 100644
--- a/arm/v6/sha1-compress.asm
+++ b/arm/v6/sha1-compress.asm
@@ -31,6 +31,7 @@ ifelse(&lt;
 &gt;) 
 
 	.file "sha1-compress.asm"
+	.arch armv6
 
 define(&lt;STATE&gt;, &lt;r0&gt;)
 define(&lt;INPUT&gt;, &lt;r1&gt;)
diff --git a/arm/v6/sha256-compress.asm b/arm/v6/sha256-compress.asm
index 93c12b1..7560778 100644
--- a/arm/v6/sha256-compress.asm
+++ b/arm/v6/sha256-compress.asm
@@ -31,6 +31,7 @@ ifelse(&lt;
 &gt;) 
 
 	.file "sha256-compress.asm"
+	.arch armv6
 
 define(&lt;STATE&gt;, &lt;r0&gt;)
 define(&lt;INPUT&gt;, &lt;r1&gt;)
-- 
1.9.3 (Apple Git-50)


</body></email><email><emailId>20150124122208</emailId><senderName>Martin Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-24 12:22:08-0400</timestampReceived><subject>[PATCH 2/2] gitignore: Add a missing entry for ecc-25519.h</subject><body>

---
 .gitignore | 1 +
 1 file changed, 1 insertion(+)

diff --git a/.gitignore b/.gitignore
index 2b16f4c..4370caa 100644
--- a/.gitignore
+++ b/.gitignore
@@ -50,6 +50,7 @@ core
 /ecc-256.h
 /ecc-384.h
 /ecc-521.h
+/ecc-25519.h
 /nettle.aux
 /nettle.cp
 /nettle.cps
-- 
1.9.3 (Apple Git-50)


</body></email><email><emailId>20150125202116</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-25 20:21:16-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Martin Storsjö &lt;martin@martin.st&gt; writes:

&gt; I noticed that arm/v6/sha1-compress and arm/v6/sha256-compress aren't
&gt; hooked up in fat builds yet - is that intentional?

Fixed now. On the master branch, where everything is merged now.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150127123019</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-27 12:30:19-0400</timestampReceived><subject>Re: ecc.h vs ecc-internal.h</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; And everything below ecc_size_j in ecc.h should be removed.

Done now. If it turns out these functions were useful, working public
versions of them could be reintroduced later. I also added an underscore
prefix on the affected symbols, which should make any use of them fail
also at link time.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150128202311</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-28 20:23:11-0400</timestampReceived><subject>Re: OCB mode</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; On Tue, 2015-01-27 at 22:53 +0100, Niels Möller wrote:
&gt; &gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; About the release... Since you added the fat, would it include AESNI
&gt; &gt; &gt; +PCLMUL?
&gt; &gt; 
&gt; &gt; AESNI is in. If you have the time, it would be interesting if you could
&gt; &gt; benchmark it against the gnutls code. The nettle implementation is
&gt; &gt; pretty basic, maybe it could be sped up a bit by unrolling or by caching
&gt; &gt; subkeys in registers.
&gt; 
&gt; Currently the numbers I get with the current implementation:
&gt; $ ./gnutls-cli --benchmark-ciphers
&gt; AES-128-CBC-SHA1 0.41 GB/sec
&gt; AES-128-CBC-SHA256 0.27 GB/sec
&gt; AES-128-GCM 3.02 GB/sec
&gt; 
&gt; If I use nettle's only
&gt; $ GNUTLS_CPUID_OVERRIDE=0x1 ./gnutls-cli --benchmark-ciphers
&gt; AES-128-CBC-SHA1 0.29 GB/sec
&gt; AES-128-CBC-SHA256 188.68 MB/sec
&gt; AES-128-GCM 0.29 GB/sec
&gt; 
&gt; (I verified that nettle detects aesni)

Ok, so it's a factor 1.4 for the first two. And even with aesni, it seems
aes is a lot of work compared to the sha1 or sha256 mac ("-SHA1" means
HMAC-SHA1, right?).

&gt; Unrelated but I realized that I also have overrides for non-AESNI
&gt; systems which use this implementation by Mike Hamburg:
&gt; https://github.com/openssl/openssl/blob/e0fc7961c4fbd27577fb519d9aea2dc788742715/crypto/aes/asm/vpaes-x86_64.pl
&gt;  
&gt; This takes advantage of SSSE3 and is faster while being constant time as
&gt; well.

Constant time definitely is a good feature. Impressing that it can be
done *and* be faster.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150129075325</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-29 07:53:25-0400</timestampReceived><subject>Re: Please add base-64 URL-safe alphabet</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt;&gt; I think the base64url decoding functions, and its table, should be put
&gt;&gt; in its own object file. Maybe static linking is obscure these days, but
&gt;&gt; it's desirable that if one uses only the standard base64 alphabet, one
&gt;&gt; shouldn't get dependencies causing the linker to drag in tables for
&gt;&gt; other alphabets.
&gt;&gt; 
&gt;
&gt; Are you sure you want that?
&gt;
&gt; Except for the init function and table the remainder of the code is all
&gt; shared. Separating the tables from the code means we would end up with
&gt; +4 files just holding lookup tables and have to move the table
&gt; symbols/pointers into a .h.

The idea is that the tables should be statically defined in the file
that use it. (I think you did it like that in the updated patch).

&gt;&gt; I think this works, but only because the ENCODE macro which refers to
&gt;&gt; the name "encode_table" now gets a local variable, instead of the global
&gt;&gt; table in the old code. At a casual look, the local variable appears
&gt;&gt; unused. I think it's easier to understand if this dependency where made
&gt;&gt; more explicit.
&gt;
&gt; Would you like that done as code documentation, manually unrolling
&gt; ENCODE, or replacing it with a static function?

I think a simple and clear way is to add the table as an argument to the
ENCODE macro.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150210212407</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-02-10 21:24:07-0400</timestampReceived><subject>Re: [PATCH v3] Please add base-64 URL-safe alphabet</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt; The attached patch implements a proposed API/ABI extension adding
&gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt; Safe Alphabet"

Committed now, with some edits. Thanks!

I also added a

  struct nettle_armor nettle_base64_url;

Looking at the base64_{en,de}code_ctx, maybe one could micro-optimize
them while at it, like changing

  struct base64_decode_ctx
  {
    unsigned word;
    unsigned bits;
    unsigned padding;
    const signed char *table;
  };

(typically 16 bytes on 32-bit machines, 24 (incl. alignment padding) on
64-bit machines) to

  struct base64_decode_ctx
  {
    const signed char *table;
    unsigned short word;
    unsigned char bits;
    unsigned char padding;
  };

which would reduce the size to 8 and 16 bytes, respectively. At least, I
think it's prettier to put the large pointer first in the struct.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150129093550</emailId><senderName>Joachim_Strömbergson</senderName><senderEmail>joachim@secworks.se</senderEmail><timestampReceived>2015-01-29 09:35:50-0400</timestampReceived><subject>Re: nettle-3.1 loose ends</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256

Aloha!

Niels Möller wrote:
&gt; I also noticed that, but it's an unlikely problem for nettle. In
&gt; theory I guess one could tart from a C implementation in nettle and
&gt; translate it to verilog/vhdl code for a hardware design, but I
&gt; suspect that's not a good way to do it.

Sorry, my bad. I didn't imply that the constraint had anything to do
with Nettle, just my personal problem with it. I am involved in open
source hardware projects where these issues appears.

- -- 
Med vänlig hälsning, Yours

Joachim Strömbergson - Alltid i harmonisk svängning.
========================================================================
 Joachim Strömbergson          Secworks AB          joachim@secworks.se
========================================================================
-----BEGIN PGP SIGNATURE-----
Version: GnuPG/MacGPG2 v2
Comment: GPGTools - http://gpgtools.org
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/

iQIcBAEBCAAGBQJUyf72AAoJEF3cfFQkIuyNmBAP/1s9m2wkz/xPT77TIUjQijdb
WxPvNbNK++sJQ+D4yK6K6knL6OPOC3hjZwFQGbF+AFkcK9nVjSaJqkd6tQnmWdWZ
iPz7eB9qpgxmI+FA6F4/9gflifLAVZh185w7oQkyL41lekSdfs6fjp06nefX3mAh
8H4CdyzDOnliglLpOHW8Jz9ASnVo+DcgtBu/XKFwilFqtPzjU5JO3UqpS9Ooka4D
Tk/Ex3tOpMH2sIvEIGKyIPxjlu0zEncsV5uNasXgx8V9L/PLs/JCbuJGukhedHgx
o9a5A5wJfnfBofHu5NH4w56Zr+Il+on2fQAxFPR37aXD3dxIutiXRAmB1gr4Iada
MlZfBoq98izibYTVGN06XzYrDg/53fuJk36DrfVgnwWz5QKmE80Y2WiA2rug7wgk
5lpVi06nONKfPnTAqP9ZsC0hubji59+mc6bxeE0RH4N6/2zm0fT4aA7B97eD4lNm
ZqGi9VNldusIpIO2GaRyzOqrCC4KSB8AxYjP/gWX6oc66Biw3ADqI1vumqejLw16
c+p5aW40G1DIUSaGB+Kxk9nKcP3gCuemp5cWWtRVGCk8pdRbPZWY7xfKIBKlI7qI
8BSjkvgUmgfVKelDAcUUMRbogcrZ8MSLhTy1IKL3lrj8c2jZMy2sywOpKyX4GCHw
ruv0U+rwb0Fcy6Iq16k4
=FEC6
-----END PGP SIGNATURE-----

</body></email><email><emailId>20150129134147</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 13:41:47-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

On 30/01/2015 1:27 a.m., Niels Möller wrote:
&gt; Amos Jeffries writes:
&gt; 
&gt;&gt; I have added a fuzz tester that runs a set of randomly generated strings
&gt;&gt; past the default encoder and decoder, then the extended one.
&gt; 
&gt; Nice. It would be good with a couple of short manual examples as well. A
&gt; pity that RFC 4648 doesn't include any testvectors for base64url. (Or am
&gt; I missing something? Simon?)
&gt; 
&gt;&gt;  - if you have a better random generator you would like to use please
&gt;&gt; let me know where to find a code example or docs for it.
&gt; 
&gt; I'd suggest using lfib_knuth generator in nettle. And maybe you already
&gt; to that, but it's good to randomize also the length of the data.
&gt; 

Aha. Thank you. I missed that in the docs. (Kudos to the person who
designed that function set, its probably the most lovely I've seen in a
long while.)

Yes I was randomizing the length, which actually turned out to be the
assert problem. rand()%N-4 [vs. rand()%(N-4)] will eventualy become
negative and break tha stack. The consistency in the face of changing
seed values has also confirmed my aversion to staying with rand() for
the final version.

It would seem worthwhile adding some additional compiler flags to add
things like stack protectors specifically for the unit tests to catch
other mistakes like mine.


&gt;&gt; The test and the coders seem to be working fine. Except that when I
&gt;&gt; increase the *count* of fuzz test run it asserts regular as clockwork on
&gt;&gt; the 950th loop:
&gt;&gt;
&gt;&gt;  base64-test: base64-encode.c:96: _base64_encode_raw: Assertion `in ==
&gt;&gt; src' failed.
&gt; 
&gt; This needs investigation. Have you run the tests under valgrind? ("make
&gt; check EMULATOR='$(VALGRIND)'")?
&gt; 
&gt;&gt; Do you wish me to remove base64_encode_group entirely?
&gt; 
&gt; No, not at this time (it's used in one place, in the unfinished openpgp
&gt; code).
&gt; 
&gt; Regards,
&gt; /Niels
&gt; 

Okay. v3 patch about to follow.

Amos

</body></email><email><emailId>20150111142710</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-11 14:27:10-0400</timestampReceived><subject>Intel aes instructions</subject><body>

I've just pushed new aes code using intel's aesni instructions.
See

https://git.lysator.liu.se/nettle/nettle/blob/530014f3f811d9018ec83a8748fdbcd45e8ccc5d/x86_64/aesni/aes-encrypt-internal.asm


It gave a speedup of almost 10 times on the haswell machine where I
tested it (and in addition, it should avoid sidechannel leaks in those
functions). Clearly, this will be more useful after adding support for
fat binaries, detecting presence of these instructions at runtime. For
now, it has to be enabled explicitly with the configure argument
--enable-x86-aesni.

I have one question, on how to enable support for these instructions in
the assembler. For now I added a pseudo-op

	.arch bdver2

and that seems to work, but it's a bit too specific for my taste. I
would have preferred something like .arch generic64,aes, but I couldn't
get that to work. So what's the right way to do this?

I haven't played with the corresponding arch flags to gcc, but I'd
prefer do declare within the .asm file itself which instruction set it
is intended for.

Feedback on the actual assembler code is also appreciated, of course.
It's pretty basic, a dozen lines, no unrolling or other cleverness.

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150113102039</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-13 10:20:39-0400</timestampReceived><subject>Fat library support (was: Re: Intel aes instructions)</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Clearly, this will be more useful after adding support for
&gt; fat binaries, detecting presence of these instructions at runtime.

I've now had a first go at fat-library support. Checked in on the branch
fat-library. See
https://git.lysator.liu.se/nettle/nettle/blob/fat-library/x86_64/fat/fat.c

Configuration is a bit clumsy and should probably be reorganized when as
functions are added, but it seems to work. Except that I try to make it
more verbose if NETTLE_FAT_VERBOSE is set in the environment, but on the
machine where I tested static library build, there's no output. Maybe
the initialization is this case is done before stderr is setup properly.
There may be some remaining problems in getting the Makefiles and
configure to work with machine-specific files which are C rather than
assembly code.

Let me quote the initial comment in fat.c:

/* Fat library initialization works as follows. The main function is
   fat_init. It tries to do initialization only once, but since it is
   idempotent and pointer updates are atomic on x86_64, there's no
   harm if it is in some cases called multiple times from several
   threads.

   The fat_init function checks the cpuid flags, and sets function
   pointers, e.g, _aes_encrypt_vec, to point to the appropriate
   implementation.

   To get everything hooked in, we use a belt-and-suspenders approach.

   When compiling with gcc, we try to register a constructor function
   which calls fat_init as soon as the library is loaded. If this is
   unavailable or non-working, we instead arrange fat_init to be
   called on demand.

   For the actual indirection, there are two cases. 

   If ifunc support is available, function pointers are statically
   initialized to NULL, and we register resolver functions, e.g.,
   _aes_encrypt_resolve, which calls fat_init, and then returns the
   function pointer, e.g., the value of _aes_encrypt_vec.

   If ifunc is not available, we have to define a wrapper function to
   jump via the function pointer. (FIXME: For internal calls, we could
   do this as a macro instead). We statically initialize each function
   pointer to point to a special initialization function, e.g.,
   _aes_encrypt_init, which calls fat_init, and then invokes the right
   function. This way, all pointers are setup correctly at the first
   call to any fat function.
*/

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150113105219</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-13 10:52:19-0400</timestampReceived><subject>Re: Fat library support</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On 13/01/2015 11:34 p.m., Nikos Mavrogiannopoulos wrote:
&gt; On Tue, Jan 13, 2015 at 11:20 AM, Niels Möller wrote:
&gt;&gt; (Niels Möller) writes:
&gt;&gt;&gt; Clearly, this will be more useful after adding support for fat
&gt;&gt;&gt; binaries, detecting presence of these instructions at runtime.
&gt;&gt; 
&gt;&gt; I've now had a first go at fat-library support. Checked in on the
&gt;&gt; branch fat-library. See 
&gt;&gt; https://git.lysator.liu.se/nettle/nettle/blob/fat-library/x86_64/fat/fat.c
&gt;
&gt;&gt; 
&gt; Looks nice. About the __attribute__((constructor)), you are 
&gt; restricting it to GNUC only, while it seems to be available more 
&gt; widely. In gnutls I use it unconditionally except for sun.
&gt; 
&gt; #ifdef __sun # pragma init(fat_constructor) # define _CONSTRUCTOR 
&gt; #else # define _CONSTRUCTOR __attribute__((constructor)) #endif
&gt; 
&gt; 
&gt; It's early, but it would be nice if the arm neon code was part of
&gt; fat as well.
&gt; 

FYI: the recent BSD versions require clang/llvm build support these days.

AYJ

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v2.0.22 (MingW32)

iQEcBAEBAgAGBQJUtPjjAAoJELJo5wb/XPRj54cH/3SghuMt8Jl0J4Ri55whJHQy
k/l35uPrh/3sDy2l25+79M16y+Mh1hE+ZuBPyYpJHREc3iXaX4McR3i2Esm7g6Xy
oDC8nKlxYhXbHvYt2yDS/ui6Ze9Usp4Kvp+RVMHc2rNZmE90OE6nhix5H0sIUwnc
EmM5lXmzqdbEDmfqDkOG1exTfIZzaxudfSCc5wXqVc/SV832ZFkxZ84iNksu9eVE
pz7WFyoeRi68ZRKzgmhYByBqExksBrxZYZldTH+9HYFfeBw+KyFSTJPPMQEOhJXG
RTt8Kb8JiGt6JVVPp1E09U64Xatmqxo6Z6+uiiP88uFzPgv9ylpKua4XbWO4yBM=
=3/z+
-----END PGP SIGNATURE-----

</body></email><email><emailId>20150113105935</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-13 10:59:35-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Tue, Jan 13, 2015 at 11:52 AM, Amos Jeffries &lt;squid3@treenet.co.nz&gt; wrote:
&gt;&gt; It's early, but it would be nice if the arm neon code was part of
&gt;&gt; fat as well.
&gt; FYI: the recent BSD versions require clang/llvm build support these days.

That's the main reason I enable the constructor attribute
unconditionally. It is supported by clang as well.

regards,
Nikos

</body></email><email><emailId>20150126083549</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-26 08:35:49-0400</timestampReceived><subject>ecc.h vs ecc-internal.h</subject><body>

I'm about to remove a lot of the internal declarations from ecc.h, and
move the ones which still are needed to ecc-internal.h. Problem is that
most of these functions work only with particular curve types, and are
typically installed in function pointers in struct ecc_curve. If they
really are needed as public functions, they must be reimplemented to
jump via the appropriate function pointer.

And some, like most or all of the corresponding itch functions, are not
even defined anywhere anymore (replaced by macros in ecc-internal.h, and
fields in struct ecc_curve).

ecc_size_j is a borderline case, not sure if it should be public (if so,
it should probably be renamed, and not mean "convert to jacobian
coordinates", but "convert to whatever internal representation is
appropriate for the curve".

And everything below ecc_size_j in ecc.h should be removed.

Any objections? Any function applications are relying on?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20150127141502</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-27 14:15:02-0400</timestampReceived><subject>Re: OCB mode</subject><body>

On Fri, Jun 20, 2014 at 6:59 PM, Daniel Kahn Gillmor
&lt;dkg@fifthhorseman.net&gt; wrote:
&gt;&gt;  What do you think of having OCB mode in nettle? I particularly like
&gt;&gt; OCB due to it's simplicity and performance comparing to GCM/CCM,
&gt; I'd love to see OCB made available in nettle for these exact reasons.

To revive this discussion, it seems that there is a proposal to add OCB in TLS.
https://tools.ietf.org/html/draft-zauner-tls-aes-ocb-00

</body></email><email><emailId>20150129045132</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 04:51:32-0400</timestampReceived><subject>[PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

RFC 4648 (https://tools.ietf.org/html/rfc4648) standardizes two
Base-64 alphabets. Nettle currently only supports the traditional
base-64 alphabet from section 4.

There is growing use amongst new protocol definitions and extensions,
particularly in the HTTP area for the URL-safe extension alphabet
instead of the classical Base-64 alphabet.

The attached patch implements a proposed API/ABI extension adding
support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
Safe Alphabet"

For the standardized alphabets external code simply calls the init()
function relevant to the alphabet it is needing to encode/decode with.
The library internally uses the context to select which lookup table to
use for later base64 function calls.

For custom or non-standard alphabets a pointer to the alphabet lookup
table is included in the encode/decode contexts. External code can
memset() a context to empty and provide the alphabet lookup table pointer.


Amos Jeffries
Treehouse Networks Ltd.

PS, I have also removed the dead code wrappend in "#if 0" rather than
updating it.

["base-64_extended_mk2.patch" (text/plain)]

diff --git a/Makefile.in b/Makefile.in
index 2a940f9..48cce47 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -81,6 +81,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
 		 arctwo.c arctwo-meta.c blowfish.c \
 		 base16-encode.c base16-decode.c base16-meta.c \
 		 base64-encode.c base64-decode.c base64-meta.c \
+		 base64url-encode.c base64url-decode.c \
 		 buffer.c buffer-init.c \
 		 camellia-crypt-internal.c camellia-table.c \
 		 camellia-absorb.c camellia-invert-key.c \
diff --git a/base64-decode.c b/base64-decode.c
index f622baa..69a1133 100644
--- a/base64-decode.c
+++ b/base64-decode.c
@@ -43,7 +43,7 @@
 #define TABLE_END -3
 
 static const signed char
-decode_table[0x100] =
+default_decode_table[0x100] =
 {
   /* White space is HT, VT, FF, CR, LF and SPC */
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1, 
@@ -68,6 +68,7 @@ void
 base64_decode_init(struct base64_decode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = default_decode_table;
 }
 
 int
@@ -76,8 +77,7 @@ base64_decode_single(struct base64_decode_ctx *ctx,
 		     uint8_t src)
 {
   int data;
-  
-  data = decode_table[src];
+  data = ctx-&gt;alphabet[src];
 
   switch(data)
     {
diff --git a/base64-encode.c b/base64-encode.c
index 313c512..2bc2908 100644
--- a/base64-encode.c
+++ b/base64-encode.c
@@ -38,16 +38,24 @@
 
 #include "base64.h"
 
-static const uint8_t encode_table[64] =
+static const uint8_t default_encode_table[64] =
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   "abcdefghijklmnopqrstuvwxyz"
   "0123456789+/";
 
-#define ENCODE(x) (encode_table[0x3F &amp; (x)])
+#define ENCODE(x) (ctx-&gt;alphabet[0x3F &amp; (x)])
 
 void
 base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
 {
+  struct base64_encode_ctx ctx;
+  base64_encode_init(&amp;ctx);
+  _base64_encode_raw(&amp;cxt, dst, length, src);
+}
+
+static void
+_base64_encode_raw(struct base64_encode_ctx *ctx, uint8_t *dst, size_t length, const uint8_t *src)
+{
   const uint8_t *in = src + length;
   uint8_t *out = dst + BASE64_ENCODE_RAW_LENGTH(length);
 
@@ -87,53 +95,12 @@ base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
   assert(out == dst);
 }
 
-#if 0
-unsigned 
-base64_encode(uint8_t *dst,
-	      unsigned src_length,
-	      const uint8_t *src)
-{
-  unsigned dst_length = BASE64_ENCODE_RAW_LENGTH(src_length);
-  unsigned n = src_length / 3;
-  unsigned left_over  = src_length % 3;
-  unsigned done = 0;
-  
-  if (left_over)
-    {
-      const uint8_t *in = src + n * 3;
-      uint8_t *out = dst + dst_length;
-
-      switch(left_over)
-	{
-	case 1:
-	  *--out = '=';
-	  *--out = ENCODE(in[0] &lt;&lt; 4);
-	  break;
-	  
-	case 2:
-	  *--out = ENCODE( in[1] &lt;&lt; 2);
-	  *--out = ENCODE((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4));
-	  break;
-
-	default:
-	  abort();
-	}
-      *--out = ENCODE(in[0] &gt;&gt; 2);
-
-      done = 4;
-    }
-  base64_encode_raw(n, dst, src);
-  done += n * 4;
-
-  assert(done == dst_length);
-
-  return done;
-}
-#endif
-
 void
 base64_encode_group(uint8_t *dst, uint32_t group)
 {
+  struct base64_encode ctx;
+  base64_encode_init(&amp;ctx);
+
   *dst++ = ENCODE(group &gt;&gt; 18);
   *dst++ = ENCODE(group &gt;&gt; 12);
   *dst++ = ENCODE(group &gt;&gt; 6);
@@ -144,6 +111,7 @@ void
 base64_encode_init(struct base64_encode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = default_encode_table;
 }
 
 /* Encodes a single byte. */
@@ -196,7 +164,7 @@ base64_encode_update(struct base64_encode_ctx *ctx,
     {
       assert(!(bulk % 3));
       
-      base64_encode_raw(dst + done, bulk, src);
+      _base64_encode_raw(ctx, dst + done, bulk, src);
       done += BASE64_ENCODE_RAW_LENGTH(bulk);
       src += bulk;
       left = left_over;
diff --git a/base64.h b/base64.h
index a6fb823..21381d2 100644
--- a/base64.h
+++ b/base64.h
@@ -42,12 +42,14 @@ extern "C" {
 
 /* Name mangling */
 #define base64_encode_init nettle_base64_encode_init
+#define base64url_encode_init nettle_base64url_encode_init
 #define base64_encode_single nettle_base64_encode_single
 #define base64_encode_update nettle_base64_encode_update
 #define base64_encode_final nettle_base64_encode_final
 #define base64_encode_raw nettle_base64_encode_raw
 #define base64_encode_group nettle_base64_encode_group
 #define base64_decode_init nettle_base64_decode_init
+#define base64url_decode_init nettle_base64url_decode_init
 #define base64_decode_single nettle_base64_decode_single
 #define base64_decode_update nettle_base64_decode_update
 #define base64_decode_final nettle_base64_decode_final
@@ -73,11 +75,17 @@ struct base64_encode_ctx
 {
   unsigned word;   /* Leftover bits */
   unsigned bits;  /* Number of bits, always 0, 2, or 4. */
+  const uint8_t *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_encode_init(struct base64_encode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_encode_init(struct base64_encode_ctx *ctx);
+
 /* Encodes a single byte. Returns amount of output (always 1 or 2). */
 size_t
 base64_encode_single(struct base64_encode_ctx *ctx,
@@ -123,11 +131,17 @@ struct base64_decode_ctx
 
   /* Number of padding characters encountered */
   unsigned padding;
+  const signed char *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_decode_init(struct base64_decode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_decode_init(struct base64_decode_ctx *ctx);
+
 /* Decodes a single byte. Returns amount of output (0 or 1), or -1 on
  * errors. */
 int
diff --git a/base64url-decode.c b/base64url-decode.c
index e69de29..5b1a802 100644
--- a/base64url-decode.c
+++ b/base64url-decode.c
@@ -0,0 +1,65 @@
+/* base64url-decode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const signed char
+urlextended_decode_table[0x100] =
+{
+  /* White space is HT, VT, FF, CR, LF and SPC */
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
+  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -3, -1, -1,
+  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
+  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+};
+
+void
+base64url_decode_init(struct base64_decode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = urlextended_decode_table;
+}
diff --git a/base64url-encode.c b/base64url-encode.c
index e69de29..1f1eab7 100644
--- a/base64url-encode.c
+++ b/base64url-encode.c
@@ -0,0 +1,48 @@
+/* base64url-encode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const uint8_t urlextended_encode_table[64] =
+  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+  "abcdefghijklmnopqrstuvwxyz"
+  "0123456789-_";
+
+void
+base64url_encode_init(struct base64_encode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = urlextended_encode_table;
+}


</body></email><email><emailId>20150129061019</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 06:10:19-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

On 29/01/2015 5:51 p.m., Amos Jeffries wrote:
&gt; RFC 4648 (https://tools.ietf.org/html/rfc4648) standardizes two
&gt; Base-64 alphabets. Nettle currently only supports the traditional
&gt; base-64 alphabet from section 4.
&gt; 
&gt; There is growing use amongst new protocol definitions and extensions,
&gt; particularly in the HTTP area for the URL-safe extension alphabet
&gt; instead of the classical Base-64 alphabet.
&gt; 
&gt; The attached patch implements a proposed API/ABI extension adding
&gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt; Safe Alphabet"
&gt; 
&gt; For the standardized alphabets external code simply calls the init()
&gt; function relevant to the alphabet it is needing to encode/decode with.
&gt; The library internally uses the context to select which lookup table to
&gt; use for later base64 function calls.
&gt; 
&gt; For custom or non-standard alphabets a pointer to the alphabet lookup
&gt; table is included in the encode/decode contexts. External code can
&gt; memset() a context to empty and provide the alphabet lookup table pointer.
&gt; 
&gt; 
&gt; Amos Jeffries
&gt; Treehouse Networks Ltd.
&gt; 
&gt; PS, I have also removed the dead code wrappend in "#if 0" rather than
&gt; updating it.
&gt; 

Meh Nix that earlier patch. Here is an updated version without the
stupid syntax errors.

This passes the base64 unit tests, but there are no specific tests for
the difference in lookup tables (and no test vectors in the RFC either).
If you want some added I can look at adding some.


Amos


["base-64_extended_mk3.patch" (text/plain)]

diff --git a/Makefile.in b/Makefile.in
index 2a940f9..48cce47 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -81,6 +81,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
 		 arctwo.c arctwo-meta.c blowfish.c \
 		 base16-encode.c base16-decode.c base16-meta.c \
 		 base64-encode.c base64-decode.c base64-meta.c \
+		 base64url-encode.c base64url-decode.c \
 		 buffer.c buffer-init.c \
 		 camellia-crypt-internal.c camellia-table.c \
 		 camellia-absorb.c camellia-invert-key.c \
diff --git a/base64-decode.c b/base64-decode.c
index f622baa..b603930 100644
--- a/base64-decode.c
+++ b/base64-decode.c
@@ -43,7 +43,7 @@
 #define TABLE_END -3
 
 static const signed char
-decode_table[0x100] =
+default_decode_table[0x100] =
 {
   /* White space is HT, VT, FF, CR, LF and SPC */
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1, 
@@ -68,6 +68,7 @@ void
 base64_decode_init(struct base64_decode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = default_decode_table;
 }
 
 int
@@ -75,9 +76,7 @@ base64_decode_single(struct base64_decode_ctx *ctx,
 		     uint8_t *dst,
 		     uint8_t src)
 {
-  int data;
-  
-  data = decode_table[src];
+  int data = ctx-&gt;alphabet[src];
 
   switch(data)
     {
diff --git a/base64-encode.c b/base64-encode.c
index 313c512..d249607 100644
--- a/base64-encode.c
+++ b/base64-encode.c
@@ -38,16 +38,26 @@
 
 #include "base64.h"
 
-static const uint8_t encode_table[64] =
+static void _base64_encode_raw(struct base64_encode_ctx *ctx, uint8_t *dst, size_t \
length, const uint8_t *src); +
+static const uint8_t default_encode_table[64] =
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   "abcdefghijklmnopqrstuvwxyz"
   "0123456789+/";
 
-#define ENCODE(x) (encode_table[0x3F &amp; (x)])
+#define ENCODE(X) (ctx-&gt;alphabet[0x3F &amp; (X)])
 
 void
 base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
 {
+  struct base64_encode_ctx ctx;
+  base64_encode_init(&amp;ctx);
+  _base64_encode_raw(&amp;ctx, dst, length, src);
+}
+
+void
+_base64_encode_raw(struct base64_encode_ctx *ctx, uint8_t *dst, size_t length, const \
uint8_t *src) +{
   const uint8_t *in = src + length;
   uint8_t *out = dst + BASE64_ENCODE_RAW_LENGTH(length);
 
@@ -87,53 +97,13 @@ base64_encode_raw(uint8_t *dst, size_t length, const uint8_t \
*src)  assert(out == dst);
 }
 
-#if 0
-unsigned 
-base64_encode(uint8_t *dst,
-	      unsigned src_length,
-	      const uint8_t *src)
-{
-  unsigned dst_length = BASE64_ENCODE_RAW_LENGTH(src_length);
-  unsigned n = src_length / 3;
-  unsigned left_over  = src_length % 3;
-  unsigned done = 0;
-  
-  if (left_over)
-    {
-      const uint8_t *in = src + n * 3;
-      uint8_t *out = dst + dst_length;
-
-      switch(left_over)
-	{
-	case 1:
-	  *--out = '=';
-	  *--out = ENCODE(in[0] &lt;&lt; 4);
-	  break;
-	  
-	case 2:
-	  *--out = ENCODE( in[1] &lt;&lt; 2);
-	  *--out = ENCODE((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4));
-	  break;
-
-	default:
-	  abort();
-	}
-      *--out = ENCODE(in[0] &gt;&gt; 2);
-
-      done = 4;
-    }
-  base64_encode_raw(n, dst, src);
-  done += n * 4;
-
-  assert(done == dst_length);
-
-  return done;
-}
-#endif
-
 void
 base64_encode_group(uint8_t *dst, uint32_t group)
 {
+  struct base64_encode_ctx ctxBase;
+  struct base64_encode_ctx *ctx = 
+  base64_encode_init(ctx);
+
   *dst++ = ENCODE(group &gt;&gt; 18);
   *dst++ = ENCODE(group &gt;&gt; 12);
   *dst++ = ENCODE(group &gt;&gt; 6);
@@ -144,6 +114,7 @@ void
 base64_encode_init(struct base64_encode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = default_encode_table;
 }
 
 /* Encodes a single byte. */
@@ -196,7 +167,7 @@ base64_encode_update(struct base64_encode_ctx *ctx,
     {
       assert(!(bulk % 3));
       
-      base64_encode_raw(dst + done, bulk, src);
+      _base64_encode_raw(ctx, dst + done, bulk, src);
       done += BASE64_ENCODE_RAW_LENGTH(bulk);
       src += bulk;
       left = left_over;
diff --git a/base64.h b/base64.h
index a6fb823..21381d2 100644
--- a/base64.h
+++ b/base64.h
@@ -42,12 +42,14 @@ extern "C" {
 
 /* Name mangling */
 #define base64_encode_init nettle_base64_encode_init
+#define base64url_encode_init nettle_base64url_encode_init
 #define base64_encode_single nettle_base64_encode_single
 #define base64_encode_update nettle_base64_encode_update
 #define base64_encode_final nettle_base64_encode_final
 #define base64_encode_raw nettle_base64_encode_raw
 #define base64_encode_group nettle_base64_encode_group
 #define base64_decode_init nettle_base64_decode_init
+#define base64url_decode_init nettle_base64url_decode_init
 #define base64_decode_single nettle_base64_decode_single
 #define base64_decode_update nettle_base64_decode_update
 #define base64_decode_final nettle_base64_decode_final
@@ -73,11 +75,17 @@ struct base64_encode_ctx
 {
   unsigned word;   /* Leftover bits */
   unsigned bits;  /* Number of bits, always 0, 2, or 4. */
+  const uint8_t *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_encode_init(struct base64_encode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_encode_init(struct base64_encode_ctx *ctx);
+
 /* Encodes a single byte. Returns amount of output (always 1 or 2). */
 size_t
 base64_encode_single(struct base64_encode_ctx *ctx,
@@ -123,11 +131,17 @@ struct base64_decode_ctx
 
   /* Number of padding characters encountered */
   unsigned padding;
+  const signed char *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_decode_init(struct base64_decode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_decode_init(struct base64_decode_ctx *ctx);
+
 /* Decodes a single byte. Returns amount of output (0 or 1), or -1 on
  * errors. */
 int
diff --git a/base64url-decode.c b/base64url-decode.c
index e69de29..5b1a802 100644
--- a/base64url-decode.c
+++ b/base64url-decode.c
@@ -0,0 +1,65 @@
+/* base64url-decode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const signed char
+urlextended_decode_table[0x100] =
+{
+  /* White space is HT, VT, FF, CR, LF and SPC */
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
+  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -3, -1, -1,
+  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
+  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+};
+
+void
+base64url_decode_init(struct base64_decode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = urlextended_decode_table;
+}
diff --git a/base64url-encode.c b/base64url-encode.c
index e69de29..1f1eab7 100644
--- a/base64url-encode.c
+++ b/base64url-encode.c
@@ -0,0 +1,48 @@
+/* base64url-encode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const uint8_t urlextended_encode_table[64] =
+  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+  "abcdefghijklmnopqrstuvwxyz"
+  "0123456789-_";
+
+void
+base64url_encode_init(struct base64_encode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = urlextended_encode_table;
+}



</body></email><email><emailId>20150129080848</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-29 08:08:48-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt; The attached patch implements a proposed API/ABI extension adding
&gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt; Safe Alphabet"

Thanks. I have some comments below. Also, testcases are essential (and I
suspect that the definition of base64_encode_group is not really
accepted by the compiler).

&gt; For the standardized alphabets external code simply calls the init()
&gt; function relevant to the alphabet it is needing to encode/decode with.
&gt; The library internally uses the context to select which lookup table to
&gt; use for later base64 function calls.

Or we could introduce a generalized init function, if that need arises.

&gt; -#define ENCODE(x) (encode_table[0x3F &amp; (x)])
&gt; +#define ENCODE(x) (ctx-&gt;alphabet[0x3F &amp; (x)])

I think

  #define ENCODE(alphabet, x) ((alphabet)[0x3F &amp; (x)])

is better, not relying on "ctx" variable being defined where the macro
is used.

&gt;  void
&gt;  base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
&gt;  {
&gt; +  struct base64_encode_ctx ctx;
&gt; +  base64_encode_init(&amp;ctx);
&gt; +  _base64_encode_raw(&amp;cxt, dst, length, src);
&gt; +}

I think it would be better to let _base64_encode_raw take the alphabet
as an argument. base64_encode_raw would then be simply

  void
  base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
  {
    _base64_encode_raw(default_encode_table, dst, length, src);
  }

&gt;  void
&gt;  base64_encode_group(uint8_t *dst, uint32_t group)
&gt;  {
&gt; +  struct base64_encode ctx;
&gt; +  base64_encode_init(&amp;ctx);
&gt; +
&gt;    *dst++ = ENCODE(group &gt;&gt; 18);
&gt;    *dst++ = ENCODE(group &gt;&gt; 12);
&gt;    *dst++ = ENCODE(group &gt;&gt; 6);
&gt; @@ -144,6 +111,7 @@ void

And similarly here, I think it would be better to not use any ctx
struct, and instead do

	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 18);
	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 12);
	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 6);

(And this function is of questionable utility...)

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150129112137</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 11:21:37-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

On 29/01/2015 9:08 p.m., Niels Möller wrote:
&gt; Amos Jeffries writes:
&gt; 
&gt;&gt; The attached patch implements a proposed API/ABI extension adding
&gt;&gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt;&gt; Safe Alphabet"
&gt; 
&gt; Thanks. I have some comments below. Also, testcases are essential (and I
&gt; suspect that the definition of base64_encode_group is not really
&gt; accepted by the compiler).

I have added a fuzz tester that runs a set of randomly generated strings
past the default encoder and decoder, then the extended one.


I am using rand() to generate 1020 input octets each loop then for each
alphabet: encode checking the output lengths match the crypted string
length, decode checking for success, then compare the round-trip output
matches the original input.
 - if you have a better random generator you would like to use please
let me know where to find a code example or docs for it.

I've tested the unit test itself in a few ways:
* eyeball comparison of several base64 vs base64url crypted strings to
verify they match modulo the different alphabet characters.
* eyeball check to ensure the fuzz does include the alphabet unique
characters fairly often.
* inverting test assertions to verify the checks are asserting on the
right boundary conditions
* growing the fuzz length and count form small to large values checking
for consistent pass/fail.
* seeding rand() with different fixed values, and leaving default seed
value.


The test and the coders seem to be working fine. Except that when I
increase the *count* of fuzz test run it asserts regular as clockwork on
the 950th loop:

 base64-test: base64-encode.c:96: _base64_encode_raw: Assertion `in ==
src' failed.

&gt; 
&gt;&gt; For the standardized alphabets external code simply calls the init()
&gt;&gt; function relevant to the alphabet it is needing to encode/decode with.
&gt;&gt; The library internally uses the context to select which lookup table to
&gt;&gt; use for later base64 function calls.
&gt; 
&gt; Or we could introduce a generalized init function, if that need arises.
&gt; 
&gt;&gt; -#define ENCODE(x) (encode_table[0x3F &amp; (x)])
&gt;&gt; +#define ENCODE(x) (ctx-&gt;alphabet[0x3F &amp; (x)])
&gt; 
&gt; I think
&gt; 
&gt;   #define ENCODE(alphabet, x) ((alphabet)[0x3F &amp; (x)])
&gt; 
&gt; is better, not relying on "ctx" variable being defined where the macro
&gt; is used.
&gt; 
&gt;&gt;  void
&gt;&gt;  base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
&gt;&gt;  {
&gt;&gt; +  struct base64_encode_ctx ctx;
&gt;&gt; +  base64_encode_init(&amp;ctx);
&gt;&gt; +  _base64_encode_raw(&amp;cxt, dst, length, src);
&gt;&gt; +}
&gt; 
&gt; I think it would be better to let _base64_encode_raw take the alphabet
&gt; as an argument. base64_encode_raw would then be simply
&gt; 
&gt;   void
&gt;   base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
&gt;   {
&gt;     _base64_encode_raw(default_encode_table, dst, length, src);
&gt;   }
&gt; 
&gt;&gt;  void
&gt;&gt;  base64_encode_group(uint8_t *dst, uint32_t group)
&gt;&gt;  {
&gt;&gt; +  struct base64_encode ctx;
&gt;&gt; +  base64_encode_init(&amp;ctx);
&gt;&gt; +
&gt;&gt;    *dst++ = ENCODE(group &gt;&gt; 18);
&gt;&gt;    *dst++ = ENCODE(group &gt;&gt; 12);
&gt;&gt;    *dst++ = ENCODE(group &gt;&gt; 6);

Okay, done all that.

&gt;&gt; @@ -144,6 +111,7 @@ void
&gt; 
&gt; And similarly here, I think it would be better to not use any ctx
&gt; struct, and instead do
&gt; 
&gt; 	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 18);
&gt; 	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 12);
&gt; 	*dst++ = ENCODE(default_encode_table, group &gt;&gt; 6);
&gt; 
&gt; (And this function is of questionable utility...)
&gt; 

Do you wish me to remove base64_encode_group entirely?

Cheers
Amos

</body></email><email><emailId>20150129122757</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-29 12:27:57-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>

Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:

&gt; I have added a fuzz tester that runs a set of randomly generated strings
&gt; past the default encoder and decoder, then the extended one.

Nice. It would be good with a couple of short manual examples as well. A
pity that RFC 4648 doesn't include any testvectors for base64url. (Or am
I missing something? Simon?)

&gt;  - if you have a better random generator you would like to use please
&gt; let me know where to find a code example or docs for it.

I'd suggest using lfib_knuth generator in nettle. And maybe you already
to that, but it's good to randomize also the length of the data.

&gt; The test and the coders seem to be working fine. Except that when I
&gt; increase the *count* of fuzz test run it asserts regular as clockwork on
&gt; the 950th loop:
&gt;
&gt;  base64-test: base64-encode.c:96: _base64_encode_raw: Assertion `in ==
&gt; src' failed.

This needs investigation. Have you run the tests under valgrind? ("make
check EMULATOR='$(VALGRIND)'")?

&gt; Do you wish me to remove base64_encode_group entirely?

No, not at this time (it's used in one place, in the unfinished openpgp
code).

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150129125304</emailId><senderName>Simon Josefsson</senderName><senderEmail>simon@josefsson.org</senderEmail><timestampReceived>2015-01-29 12:53:04-0400</timestampReceived><subject>Re: [PATCH v2] Please add base-64 URL-safe alphabet</subject><body>


nisse@lysator.liu.se (Niels M=F6ller) writes:

&gt; Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:
&gt;
&gt;&gt; I have added a fuzz tester that runs a set of randomly generated strings
&gt;&gt; past the default encoder and decoder, then the extended one.
&gt;
&gt; Nice. It would be good with a couple of short manual examples as well. A
&gt; pity that RFC 4648 doesn't include any testvectors for base64url. (Or am
&gt; I missing something? Simon?)

No, there aren't any -- you can s/+/-/g and s,/,_,g the base64 test
vectors.  Btw, if you produce more complete test vectors, I'd be
interested in adding them to some future update of that document.

/Simon

["signature.asc" (application/pgp-signature)]

</body></email><email><emailId>20150129033048</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 03:30:48-0400</timestampReceived><subject>Re: Please add base-64 URL-safe alphabet</subject><body>

On 13/12/2014 7:49 a.m., Niels Möller wrote:
&gt; Amos Jeffries &lt;squid3@treenet.co.nz&gt; writes:
&gt; 
&gt; &gt; The attached patch implements a proposed API/ABI extension adding
&gt; &gt; support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
&gt; &gt; Safe Alphabet"
&gt; 
&gt; Thanks. It makes sense to me to add support for this in one way or the
&gt; other.
&gt; 
&gt; &gt; External code simply calls the init() function relevant to the
&gt; &gt; alphabet it is needing to encode/decode with. The library internally
&gt; &gt; uses the context to select which lookup table to use for later base64
&gt; &gt; function calls.
&gt; 
&gt; Passing the alphabet to the init function and recording it in the context
&gt; is nice in some ways, but it breaks the ABI (since the size of the
&gt; context struct is part of the ABI). Now, maybe we have to break the ABI
&gt; for 3.1 anyway, to introduce versioned symbols. I don't yet know for
&gt; sure if an soname change is necessary or not.
&gt; 
&gt; The alternative to storing this in the context, is to introduce some
&gt; general encoding/decoding functions which support arbitrary alphabets and
&gt; take the needed table as an additional argument. Then base64_* and
&gt; base64url_* would be simple wrapper functions passing the right table.
&gt; 
&gt; &gt; The base64_encode_raw() and base64_encode_group() functions which do
&gt; &gt; not use contexts are left untouched for now.
&gt; 
&gt; Both functions are undocumented, so we can consider changing them if
&gt; neeed. As for encode_group, that seems to be used only in the openpgp code
&gt; which is not really in a working state. So we can probably ignore that one.
&gt; 
&gt; But base64_encode_raw is used by the main encoding function,
&gt; base64_encode_update. So to support other alphabets one either needs to
&gt; pass some kind of alphabet argument to base64_encode_raw, or introduce a
&gt; new function with such an argument.
&gt; 
&gt; Does anyone know if applications are using base64_encode_raw, despite
&gt; it's status as undocumented?
&gt; 
&gt; &gt; +/* which alphabet to use */
&gt; &gt; +#define BASE64_ALPHABET 0
&gt; &gt; +#define BASE64URL_ALPHABET 1
&gt; 
&gt; I think I'd prefer to avoid an enumeration of available alphabets. And
&gt; in the API you sketch, applications will never use these constants,
&gt; right?

Yes.

&gt; 
&gt; &gt; /* Base64 encoding */
&gt; &gt; 
&gt; &gt; /* Maximum length of output for base64_encode_update. NOTE: Doesn't
&gt; &gt; @@ -73,11 +79,17 @@ struct base64_encode_ctx
&gt; &gt; {
&gt; &gt; unsigned word;   /* Leftover bits */
&gt; &gt; unsigned bits;  /* Number of bits, always 0, 2, or 4. */
&gt; &gt; +  unsigned alphabet; /* which alphabet to use for encoding */
&gt; &gt; };
&gt; 
&gt; Assuming we go with adding stuff to the context struct, I'd prefer to
&gt; add a pointer directly to the alphabet (and for decoding, a pointer
&gt; directly to the lookup table). So we don't need any switch on an
&gt; alphabet enum.
&gt; 
&gt; &gt; diff --git a/base64-decode.c b/base64-decode.c
&gt; &gt; index f622baa..fbaf54f 100644
&gt; &gt; --- a/base64-decode.c
&gt; &gt; +++ b/base64-decode.c
&gt; &gt; @@ -43,7 +43,7 @@
&gt; &gt; #define TABLE_END -3
&gt; &gt; 
&gt; &gt; static const signed char
&gt; &gt; -decode_table[0x100] =
&gt; &gt; +default_decode_table[0x100] =
&gt; &gt; {
&gt; &gt; /* White space is HT, VT, FF, CR, LF and SPC */
&gt; &gt; -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1, 
&gt; &gt; @@ -64,10 +64,40 @@ decode_table[0x100] =
&gt; &gt; -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; };
&gt; &gt; 
&gt; &gt; +static const signed char
&gt; &gt; +urlextended_decode_table[0x100] =
&gt; &gt; +{
&gt; &gt; +  /* White space is HT, VT, FF, CR, LF and SPC */
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
&gt; &gt; +  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -3, -1, -1,
&gt; &gt; +  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
&gt; &gt; +  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
&gt; &gt; +  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
&gt; &gt; +  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
&gt; &gt; +};
&gt; &gt; +
&gt; 
&gt; I think the base64url decoding functions, and its table, should be put
&gt; in its own object file. Maybe static linking is obscure these days, but
&gt; it's desirable that if one uses only the standard base64 alphabet, one
&gt; shouldn't get dependencies causing the linker to drag in tables for
&gt; other alphabets.
&gt; 

Are you sure you want that?

Except for the init function and table the remainder of the code is all
shared. Separating the tables from the code means we would end up with
+4 files just holding lookup tables and have to move the table
symbols/pointers into a .h.


&gt; &gt; void
&gt; &gt; base64_decode_init(struct base64_decode_ctx *ctx)
&gt; &gt; {
&gt; &gt; ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
&gt; &gt; +  ctx-&gt;alphabet = BASE64_ALPHABET;
&gt; &gt; +}
&gt; &gt; +
&gt; &gt; +void
&gt; &gt; +base64url_decode_init(struct base64_decode_ctx *ctx)
&gt; &gt; +{
&gt; &gt; +  ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
&gt; &gt; +  ctx-&gt;alphabet = BASE64URL_ALPHABET;
&gt; &gt; }
&gt; 
&gt; And then the assignment of ctx-&gt;alphabet would be
&gt; 
&gt; ctx-&gt;table = base64_decode_table;
&gt; 
&gt; and
&gt; 
&gt; ctx-&gt;table = base64url_decode_table;
&gt; 
&gt; in the respective init functions.
&gt; 
&gt; &gt; int
&gt; &gt; @@ -76,8 +106,11 @@ base64_decode_single(struct base64_decode_ctx *ctx,
&gt; &gt; 		     uint8_t src)
&gt; &gt; {
&gt; &gt; int data;
&gt; &gt; -  
&gt; &gt; -  data = decode_table[src];
&gt; &gt; +
&gt; &gt; +  if (ctx-&gt;alphabet == BASE64URL_ALPHABET)
&gt; &gt; +    data = urlextended_decode_table[src];
&gt; &gt; +  else
&gt; &gt; +    data = default_decode_table[src];
&gt; 
&gt; And this piece of code would then simplify to
&gt; 
&gt; data = ctx-&gt;table[src];
&gt; 
&gt; &gt; @@ -155,6 +171,7 @@ base64_encode_single(struct base64_encode_ctx *ctx,
&gt; &gt; unsigned done = 0;
&gt; &gt; unsigned word = ctx-&gt;word &lt;&lt; 8 | src;
&gt; &gt; unsigned bits = ctx-&gt;bits + 8;
&gt; &gt; +  const uint8_t *encode_table = (ctx-&gt;alphabet == BASE64URL_ALPHABET ? \
&gt; &gt; urlextended_encode_table : default_encode_table); 
&gt; &gt; while (bits &gt;= 6)
&gt; &gt; {
&gt; 
&gt; I think this works, but only because the ENCODE macro which refers to
&gt; the name "encode_table" now gets a local variable, instead of the global
&gt; table in the old code. At a casual look, the local variable appears
&gt; unused. I think it's easier to understand if this dependency where made
&gt; more explicit.

Would you like that done as code documentation, manually unrolling
ENCODE, or replacing it with a static function?

&gt; 
&gt; Finally, are there other alphabets that are in use? You have
&gt; mentioned, earlier, the alphabet used for crypt(3) (where is that
&gt; documented???), and iirc, SRP files also use some unusual alphabet for
&gt; base64.
&gt; 
&gt; Maybe we should make it reasonably easy to let applications supply
&gt; custom alphabets? This should be almost trivial for encoding, while for
&gt; decoding, we would either need to document the format of the lookup
&gt; table, or provide a function to generate a decoding table for a given
&gt; alphabet.

When the alphabet pointer is stored in the context the caller is able to
change that however and whenever they wish. For my first submission I
thought that was slightly too dangerous to propose.

But if you are happy to do it, then it resolves both the enumeration
existence and the ability for callers to use custom alphabets.


Amos


</body></email><email><emailId>20150127184023</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-27 18:40:23-0400</timestampReceived><subject>Re: OCB mode</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; To revive this discussion, it seems that there is a proposal to add OCB in TLS.
&gt; https://tools.ietf.org/html/draft-zauner-tls-aes-ocb-00

I guess we need to get into release mode soon (I'll send another message
to try to sort out loose ends), but it might be possible to to ocb. I've
had a quick look at RFC7253. According to wikipedia
(https://en.wikipedia.org/wiki/OCB_mode), that is "OCB2", is that the
relevant version?

Has the ietf discussion clarified the patent issues?

I'm going to mail fsf lawyers about the patent license
(http://web.cs.ucdavis.edu/~rogaway/ocb/license1.pdf), I suspect they're
not compatible with the LGPL.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150127185822</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-27 18:58:22-0400</timestampReceived><subject>Re: OCB mode</subject><body>

On Tue, 2015-01-27 at 19:40 +0100, Niels Möller wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt; 
&gt; &gt; To revive this discussion, it seems that there is a proposal to add OCB in TLS.
&gt; &gt; https://tools.ietf.org/html/draft-zauner-tls-aes-ocb-00
&gt; 
&gt; I guess we need to get into release mode soon (I'll send another message
&gt; to try to sort out loose ends), but it might be possible to to ocb. I've
&gt; had a quick look at RFC7253. According to wikipedia
&gt; (https://en.wikipedia.org/wiki/OCB_mode), that is "OCB2", is that the
&gt; relevant version?
&gt; 
&gt; Has the ietf discussion clarified the patent issues?
&gt; 
&gt; I'm going to mail fsf lawyers about the patent license
&gt; (http://web.cs.ucdavis.edu/~rogaway/ocb/license1.pdf), I suspect they're
&gt; not compatible with the LGPL.

It is that one:
https://tools.ietf.org/html/rfc7253

Let me know if you get some reply from FSF. In that case I'd recommend
against standardizing OCB in the IETF TLS WG.

regards,
Nikos



</body></email><email><emailId>20150127190108</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-27 19:01:08-0400</timestampReceived><subject>Re: OCB mode</subject><body>

On Tue, 2015-01-27 at 19:58 +0100, Nikos Mavrogiannopoulos wrote:

&gt; &gt; I guess we need to get into release mode soon (I'll send another message
&gt; &gt; to try to sort out loose ends), but it might be possible to to ocb. I've
&gt; &gt; had a quick look at RFC7253. According to wikipedia
&gt; &gt; (https://en.wikipedia.org/wiki/OCB_mode), that is "OCB2", is that the
&gt; &gt; relevant version?
&gt; &gt; 
&gt; &gt; Has the ietf discussion clarified the patent issues?
&gt; &gt; 
&gt; &gt; I'm going to mail fsf lawyers about the patent license
&gt; &gt; (http://web.cs.ucdavis.edu/~rogaway/ocb/license1.pdf), I suspect they're
&gt; &gt; not compatible with the LGPL.
&gt; 
&gt; It is that one:
&gt; https://tools.ietf.org/html/rfc7253
&gt; 
&gt; Let me know if you get some reply from FSF. In that case I'd recommend
&gt; against standardizing OCB in the IETF TLS WG.

In the case it is not compatible with LGPL.

About the release... Since you added the fat, would it include AESNI
+PCLMUL? If yes that would reduce significantly the assembly shipped in
gnutls (only the padlock functions would remain).

regards,
Nikos



</body></email><email><emailId>20150127215342</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-27 21:53:42-0400</timestampReceived><subject>Re: OCB mode</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; About the release... Since you added the fat, would it include AESNI
&gt; +PCLMUL?

AESNI is in. If you have the time, it would be interesting if you could
benchmark it against the gnutls code. The nettle implementation is
pretty basic, maybe it could be sped up a bit by unrolling or by caching
subkeys in registers.

Haven't looked carefully at pclmul, so I don't know how difficult it is
to make use of it.

&gt; If yes that would reduce significantly the assembly shipped in
&gt; gnutls (only the padlock functions would remain).

I guess padlock code could be ported over to Nettle, if it's still
relevant.

Ah, and currently Nettle has aesni support only for x86_64, not 32-bit
x86.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150127230147</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-27 23:01:47-0400</timestampReceived><subject>Re: OCB mode</subject><body>

On Tue, 2015-01-27 at 22:53 +0100, Niels Möller wrote:
&gt; Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:
&gt; 
&gt; &gt; About the release... Since you added the fat, would it include AESNI
&gt; &gt; +PCLMUL?
&gt; 
&gt; AESNI is in. If you have the time, it would be interesting if you could
&gt; benchmark it against the gnutls code. The nettle implementation is
&gt; pretty basic, maybe it could be sped up a bit by unrolling or by caching
&gt; subkeys in registers.

Currently the numbers I get with the current implementation:
$ ./gnutls-cli --benchmark-ciphers
     AES-128-CBC-SHA1 0.41 GB/sec
     AES-128-CBC-SHA256 0.27 GB/sec
     AES-128-GCM 3.02 GB/sec

If I use nettle's only
$ GNUTLS_CPUID_OVERRIDE=0x1 ./gnutls-cli --benchmark-ciphers
     AES-128-CBC-SHA1 0.29 GB/sec
     AES-128-CBC-SHA256 188.68 MB/sec
     AES-128-GCM 0.29 GB/sec

(I verified that nettle detects aesni)

The GCM part heavily depends on pclmul so it's only listed for
completeness. AES-CBC is quite slower though.

I don't know if it helps, but the code I currently use for AESNI is:
https://github.com/openssl/openssl/blob/e0fc7961c4fbd27577fb519d9aea2dc788742715/crypto/aes/asm/aesni-x86_64.pl


Unrelated but I realized that I also have overrides for non-AESNI
systems which use this implementation by Mike Hamburg:
https://github.com/openssl/openssl/blob/e0fc7961c4fbd27577fb519d9aea2dc788742715/crypto/aes/asm/vpaes-x86_64.pl


This takes advantage of SSSE3 and is faster while being constant time as
well.

&gt; Haven't looked carefully at pclmul, so I don't know how difficult it is
&gt; to make use of it.

No idea either. I can only provide a link to the existing code I use
which is:
https://github.com/openssl/openssl/blob/c1669e1c205dc8e695fb0c10a655f434e758b9f7/crypto/modes/asm/ghash-x86_64.pl
 which provides low level functions used to implement GCM in:
https://gitorious.org/gnutls/gnutls/source/eabf1f27d255577bad60d302abf46a969848fcd7:lib/accelerated/x86/aes-gcm-x86-pclmul.c#L61


&gt; &gt; If yes that would reduce significantly the assembly shipped in
&gt; &gt; gnutls (only the padlock functions would remain).
&gt; I guess padlock code could be ported over to Nettle, if it's still
&gt; relevant.

That would be of course ideal. I can hardly help with that though...

regards,
Nikos


</body></email><email><emailId>20150126101725</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-26 10:17:25-0400</timestampReceived><subject>Re: ecc.h vs ecc-internal.h</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Any function applications are relying on?

Replying to myself. A quick seach for "ecc_.*_itch" on
http://codesearch.debian.net/results/ shows no matches outside of nettle
(and there's no safe way to use the functions in questions without
calling the corresponding itch function). So I wouldn't expect any
problems with removing all of this from the public header.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150113112212</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-13 11:22:12-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Looks nice. About the __attribute__((constructor)), you are
&gt; restricting it to GNUC only, while it seems to be available more
&gt; widely.

I do have a configure check, setting HAVE_GCC_ATTRIBUTE, based on
compiling a test program using __attribute__((noreturn)). Maybe I could
use that, and the __sun hack? I know both intel and llvm compilers
attempt to be gcc compatible (sometimes too compatible, I've heard some
versions of the intel compiler added __GNUC__ as a predefined...).

Ideally it would be nice with a configure test that checks that
constructors actually work, but that's hard to do when cross compiling.

&gt; It's early, but it would be nice if the arm neon code was part of fat as well.

Sure, that's the next step, once I have a structure I think is workable.
Does anyone have a pointer to how to check cpu capabilities on ARM?

Another question: We need some kind of memory barrier when writing
and/or reading the initialized flag. The (unlikely) failure case is a
thread reading the initialized flag, getting 1, and then reading one of
the function pointers, and getting a too old value.

What barrier-instruction(s) should be used, on x86_64 and ARM? It's
probably easiest to add any needed sychronization functions to
cpuid.asm, to avoid relying on compiler-specific features.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150113121112</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-13 12:11:12-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Tue, 13 Jan 2015, Niels Möller wrote:

&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt; 
&gt; &gt; It's early, but it would be nice if the arm neon code was part of fat 
&gt; &gt; as well.
&gt; 
&gt; Sure, that's the next step, once I have a structure I think is workable.
&gt; Does anyone have a pointer to how to check cpu capabilities on ARM?

Yes - and it's a bit hairy. (I've got a TL;DR version halfway down.)

There's no direct CPU instruction for it, contrary to x86. One way of 
detecting it via pure code, is trying to execute the tested instructions, 
and catching the SIGILL (or similar on other platforms) in case it isn't 
supported. (Touching signal handlers from within a library isn't necessary 
a nice thing to do, though.)

Short of trying to run the instructions, some OSes provide this info in 
another way - Linux is the main case here.


Before going into the Linux case, note that iOS doesn't have such a 
mechanism, but it isn't really needed there. On iOS, all armv7 
configurations include support for NEON, so if you can assemble NEON 
instructions you don't need any detection. Since this platform uses fat 
binaries, you could have a separate armv6 slice of your binary (and that's 
the main way of doing it here - instead of enabling things at runtime 
within one binary, include separate slices for each intended 
configurations). The recent Xcode tools no longer support building for 
armv6 though, and App Store doesn't accept such submissions any longer.

Similarly for Windows Phone (and WinRT), the tools assume a platform with 
armv7 including NEON, so this doesn't require any detection. If you'd want 
to use more exotic instructions that aren't available in this baseline, 
you'd probably need to have detection via SIGILL/exception handlers.


On Linux, you can open /proc/self/auxv and parse this relatively easily, 
and check for HWCAP_NEON. This has got the drawback that recent Android 
kernels may block access to this file [1].

Instead of opening this file, you could use the getauxval function to get 
the same auxillary vector. Since this function isn't universally 
available, you'd also need to check whether you can use it at all (or load 
it using dlsym). In particular, it has only been available for a relative 
short time on Android, so you can't rely on it there.

The final fallback is parsing /proc/cpuinfo, which always should work. You 
can pretty easily find the Features line and look for the features. The 
line ends with a space, so you can use something as simple as
strstr(line, " neon ") to parse it.

The gotcha about /proc/cpuinfo is that it is different for ARMv8 kernels - 
features like neon, which were optional on ARMv7, aren't optional any 
longer and thus are omitted. To handle this, you can either parse the "CPU 
architecture" field, and if this is &gt;= 8, assume neon, or you can look for 
the "asimd" feature which is printed, which means the same.

To simplify running old 32 bit binaries, the Android ARMv8 kernels have an 
extra compatibility feature for this, readding the "neon" keyword there. 
[2] [3] This extra compatibility isn't available in upstream kernels 
though so it can't be relied on (it was proposed in [4] but not merged 
yet).


TL;DR - it's mostly only necessary on linux. The simplest solution which 
works everywhere is parsing /proc/cpuinfo.


[1] http://b.android.com/43055 
[2] https://android.googlesource.com/kernel/common/+/cba0c6b2913c0d075a7434025f5dc29cd813707f%5E%21/
 [3] https://android.googlesource.com/kernel/common/+/3868e7f8d47992922756d1aa6590f0d556c669b8%5E%21/
 [4] http://marc.info/?l=linux-arm-kernel&amp;m=139087240101974



Example of /proc/cpuinfo from a pandaboard:

Processor       : ARMv7 Processor rev 10 (v7l)
processor       : 0
BogoMIPS        : 1392.74

processor       : 1
BogoMIPS        : 1363.33

Features        : swp half thumb fastmult vfp edsp thumbee neon vfpv3 tls
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x2
CPU part        : 0xc09
CPU revision    : 10

Hardware        : OMAP4 Panda board
Revision        : 0020
Serial          : 0000000000000000

&gt; From a Nexus 9:
Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
processor       : 0
processor       : 1
Features        : fp asimd aes pmull sha1 sha2 crc32
CPU implementer : 0x4e
CPU architecture: AArch64
CPU variant     : 0x0
CPU part        : 0x000
CPU revision    : 0

Hardware        : Flounder
Revision        : 0000
Serial          : 0000000000000000
MTS version     : 33410787

&gt; From a Nexus 9, read from a 32 bit process:
Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
processor       : 0
processor       : 1
Features        : fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult vfp edsp \
neon vfpv3 tlsi vfpv4 idiva idivt CPU implementer : 0x4e
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0x000
CPU revision    : 0

Hardware        : Flounder
Revision        : 0000
Serial          : 0000000000000000
MTS version     : 33410787





Finally, a few examples on all of this from other libraries:

libvpx, catching illegal instruction exceptions on windows platforms, and 
parsing /proc/cpuinfo: 
http://git.chromium.org/gitweb/?p=webm/libvpx.git;a=blob;f=vpx_ports/arm_cpudetect.c;h=8a4b8af964


libav, trying /proc/self/auxv, falling back to /proc/cpuinfo:
https://git.libav.org/?p=libav.git;a=blob;f=libavutil/arm/cpu.c;h=8bdaa884

OpenH264, with very minimal parsing of /proc/cpuinfo (and a bunch of other 
things):
https://github.com/cisco/openh264/blob/34661f1d8/codec/common/src/cpu.cpp#L250

The Android cpufeatures library (which tries /proc/self/auxv, tries 
loading getauxval, and falls back to /proc/cpuinfo):
https://android.googlesource.com/platform/ndk/+/13a99c7f/sources/android/cpufeatures/cpu-features.c


x264, catching SIGILL:
http://git.videolan.org/?p=x264.git;a=blob;f=common/cpu.c;h=cad5f2c2e9

// Martin


</body></email><email><emailId>20150113121552</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-13 12:15:52-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Tue, Jan 13, 2015 at 12:22 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wro=
te:
&gt; Another question: We need some kind of memory barrier when writing
&gt; and/or reading the initialized flag. The (unlikely) failure case is a
&gt; thread reading the initialized flag, getting 1, and then reading one of
&gt; the function pointers, and getting a too old value.
&gt; What barrier-instruction(s) should be used, on x86_64 and ARM? It's
&gt; probably easiest to add any needed sychronization functions to
&gt; cpuid.asm, to avoid relying on compiler-specific features.

Is that really needed? I mean you are setting these values at the construct=
or,
that is prior to any thread being created, and there shouldn't be
multiple CPUs to
worry about.

regards,
Nikos

</body></email><email><emailId>20150113124304</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-13 12:43:04-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; Is that really needed? I mean you are setting these values at the constructor,
&gt; that is prior to any thread being created, and there shouldn't be
&gt; multiple CPUs to
&gt; worry about.

If the constructor thing works, it's no problem. And if ifunc is
supported, I don't know how that really works, but I imagine the dynamic
loader serializes calls to the resolver functions, and that whatever
magic is used in the case of static libraries also is no problem.

So remains the case of no C extensions, where the initialization is
hooked in via the initial values of all function pointers (the way it's
done in GMP). Here, all bets on the timing of calls are off, the
application can spawn multiple threads, and have the threads all call
nettle for the first time.

So the problem is a bit obscure, but I think if we just replace
initialized = 1 by _nettle_synchronous_write (&amp;initialized, 1),
implemented as

  _nettle_synchronous_write:
	mfence
	movl	%esi, (%rdi)
	mfence

it will be safe in all cases.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150113125213</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-13 12:52:13-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Martin Storsjö &lt;martin@martin.st&gt; writes:

&gt; On Tue, 13 Jan 2015, Niels Möller wrote:
&gt;
&gt;&gt; Sure, that's the next step, once I have a structure I think is workable.
&gt;&gt; Does anyone have a pointer to how to check cpu capabilities on ARM?
&gt;
&gt; Yes - and it's a bit hairy. (I've got a TL;DR version halfway down.)

Thanks a lot. Sounds like easiest to just parse /proc/cpuinfo.

I should also say that I'd like to add some environment variable to
override the cpu detection, mainly for testing and benchmarking. I'm
thinking that maybe I should use glibc's getenv_secure (which always
returns NULL in setuid processes and the like).

&gt; The gotcha about /proc/cpuinfo is that it is different for ARMv8
&gt; kernels - 
&gt; features like neon, which were optional on ARMv7, aren't optional any
&gt; longer and thus are omitted. To handle this, you can either parse the
&gt; "CPU architecture" field, and if this is &gt;= 8, assume neon, or you can
&gt; look for the "asimd" feature which is printed, which means the same.

I was going to say that there's no support for arm64 yet, but I take it
this applies to arm64-systems running 32-bit binaries.

&gt; From a Nexus 9:
&gt; Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
&gt; Features        : fp asimd aes pmull sha1 sha2 crc32
&gt; CPU implementer : 0x4e
&gt; CPU architecture: AArch64

&gt; From a Nexus 9, read from a 32 bit process:
&gt; Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
&gt; Features : fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult
&gt; vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt
&gt; CPU architecture: 8

Are you saying that the CPU Architecture: line in /proc/cpuinfo will
look different depending on whether the process that opened (or read???)
/proc/cpuinfo was 32-bit or 64-bit? I had no idea...

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150113131728</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-13 13:17:28-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Tue, 13 Jan 2015, Niels Möller wrote:

&gt; Martin Storsjö &lt;martin@martin.st&gt; writes:
&gt;
&gt;&gt; On Tue, 13 Jan 2015, Niels Möller wrote:
&gt;&gt;
&gt;&gt;&gt; Sure, that's the next step, once I have a structure I think is workable.
&gt;&gt;&gt; Does anyone have a pointer to how to check cpu capabilities on ARM?
&gt;&gt;
&gt;&gt; Yes - and it's a bit hairy. (I've got a TL;DR version halfway down.)
&gt;
&gt; Thanks a lot. Sounds like easiest to just parse /proc/cpuinfo.
&gt;
&gt; I should also say that I'd like to add some environment variable to
&gt; override the cpu detection, mainly for testing and benchmarking. I'm
&gt; thinking that maybe I should use glibc's getenv_secure (which always
&gt; returns NULL in setuid processes and the like).

That sounds sensible. I guess you don't support Windows Phone and such 
(yet), but it may be good to keep in mind that getenv(3) isn't available 
in such environments at all. See e.g. 
http://git.chromium.org/gitweb/?p=webm/libvpx.git;a=commitdiff;h=20babf6d9d 
for a case of working around this.

&gt;&gt; The gotcha about /proc/cpuinfo is that it is different for ARMv8
&gt;&gt; kernels -
&gt;&gt; features like neon, which were optional on ARMv7, aren't optional any
&gt;&gt; longer and thus are omitted. To handle this, you can either parse the
&gt;&gt; "CPU architecture" field, and if this is &gt;= 8, assume neon, or you can
&gt;&gt; look for the "asimd" feature which is printed, which means the same.
&gt;
&gt; I was going to say that there's no support for arm64 yet, but I take it
&gt; this applies to arm64-systems running 32-bit binaries.

Exactly - that's why it's a bit problematic - even if you don't care about 
64 bit ARM yet, the existing detection may need to be adjusted slightly. 
Code that parses /proc/self/auxv will work just fine, and Android has 
added extra compatibility to their arm64 kernels, but for 32 bit binaries 
on normal linux systems this would be an issue. (Android haven't really 
"announced" this extra compatibility either, they did update their own 
cpufeatures library and recommend people to update it.)

Updating cpuinfo parsing to account for this isn't too hard though: 
https://git.libav.org/?p=libav.git;a=commitdiff;h=7b0c7c916

So this is mainly an issue if you have old code parsing /proc/cpuinfo that 
you haven't gotten to updating.

&gt;&gt; From a Nexus 9:
&gt;&gt; Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
&gt;&gt; Features        : fp asimd aes pmull sha1 sha2 crc32
&gt;&gt; CPU implementer : 0x4e
&gt;&gt; CPU architecture: AArch64
&gt;
&gt;&gt; From a Nexus 9, read from a 32 bit process:
&gt;&gt; Processor       : NVIDIA Denver 1.0 rev 0 (aarch64)
&gt;&gt; Features : fp asimd aes pmull sha1 sha2 crc32 wp half thumb fastmult
&gt;&gt; vfp edsp neon vfpv3 tlsi vfpv4 idiva idivt
&gt;&gt; CPU architecture: 8
&gt;
&gt; Are you saying that the CPU Architecture: line in /proc/cpuinfo will
&gt; look different depending on whether the process that opened (or read???)
&gt; /proc/cpuinfo was 32-bit or 64-bit? I had no idea...

Yes, if the process that opens /proc/cpuinfo is a 32 bit process, it lists 
a bit more features, and changes "CPU architecture" from "AArch64" to "8". 
This is an Android extension, to make sure that old binaries with cpu 
feature detection not aware of ARMv8 will still detect NEON on such 
devices, while vanilla kernels only will print the "normal" version of 
this (the one you see in 64 bit mode) regardless of the calling process 
type. (/proc/self/auxv does look different depending on the process 
bitness as well, even in vanilla kernels.)

See the two android kernel commits I linked in the previous mail, for info 
about this extra compatibility feature.

// Martin

</body></email><email><emailId>20150113163726</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-13 16:37:26-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Another question: We need some kind of memory barrier when writing
&gt; and/or reading the initialized flag. The (unlikely) failure case is a
&gt; thread reading the initialized flag, getting 1, and then reading one of
&gt; the function pointers, and getting a too old value.

After discussing this on another forum, I've been told that the x86
architecture is strongly ordered (as long as one doesn't use certain
instructions, like "non-temporal store"). So a plain store to a volatile
int should to, with no memory barriers.

Case of ARM will be different, since it has a weaker memory model.

See also http://lwn.net/Articles/252110/

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150116211814</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-16 21:18:14-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; A quick and dirty patch to enable SSE2 instructions for memxor() on
&gt; Intel CPUs is attached.
&gt; I tried to follow the logic in the fat.c file, but I may have missed
&gt; something. I've not added memxor3() because it is actually slower with
&gt; SSE2.

Cool!

&gt; SSE2:
&gt;             memxor     aligned 26081.83
&gt;             memxor   unaligned 25893.69
&gt;
&gt; No-SSE2:
&gt;             memxor     aligned 17806.94
&gt;             memxor   unaligned 16581.48

How confident are you that the intel vs amd check is the right way
to enable sse2? I guess we could add check on the particular cpu model
later, if needed. Which model(s) did you benchmark on?

It would be nice in a way if we could share code with x86_64/memxor.asm.
E.g., by defining x86_64/fat/memxor-1.asm and x86_64/fat/memxor-2.asm
which each include the same file with a different setting of USE_SSE2.

But I haven't looked at that carefully, it might be better to have a
unified x86_64/fat/memxor.asm with two entry points, like you do.

I've also been considering m4 hacks to let a single fat .asm file
include multiple other .asm files, or including the same file twice,
without labels or m4 definitions colliding, but I'm not sure that's
worth the effort. The foo-1.asm, foo-2.asm, ... scheme is a bit
inelegant, but it is easy to understand.

&gt; +  _nettle_cpuid (0, cpuid_data);
&gt; +  if (memcmp(&amp;cpuid_data[1], "Genu", 4) == 0 &amp;&amp;
&gt; +      memcmp(&amp;cpuid_data[3], "ineI", 4) == 0 &amp;&amp;
&gt; +      memcmp(&amp;cpuid_data[2], "ntel", 4) == 0) {

This could also be written as a single memcmp call, or 3 comparisons of
integers.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150116220738</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-16 22:07:38-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Fri, 2015-01-16 at 22:18 +0100, Niels Möller wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt; 
&gt; &gt; A quick and dirty patch to enable SSE2 instructions for memxor() on
&gt; &gt; Intel CPUs is attached.
&gt; &gt; I tried to follow the logic in the fat.c file, but I may have missed
&gt; &gt; something. I've not added memxor3() because it is actually slower with
&gt; &gt; SSE2.
&gt; 
&gt; Cool!
&gt; 
&gt; &gt; SSE2:
&gt; &gt;             memxor     aligned 26081.83
&gt; &gt;             memxor   unaligned 25893.69
&gt; &gt;
&gt; &gt; No-SSE2:
&gt; &gt;             memxor     aligned 17806.94
&gt; &gt;             memxor   unaligned 16581.48
&gt; 
&gt; How confident are you that the intel vs amd check is the right way
&gt; to enable sse2? I guess we could add check on the particular cpu model
&gt; later, if needed. Which model(s) did you benchmark on?

The benchmarks (if it is same as the older code I've sent you few years
ago), have been done on intel i7, i5 and a xeon. In all of them there
was an improvement. The benchmark above is on i7.

About that not improving on AMD I have no more data than what I've wrote
you last time (which was few years ago). No idea if newer AMD processors
behave better.

&gt; It would be nice in a way if we could share code with x86_64/memxor.asm.
&gt; E.g., by defining x86_64/fat/memxor-1.asm and x86_64/fat/memxor-2.asm
&gt; which each include the same file with a different setting of USE_SSE2.
&gt; But I haven't looked at that carefully, it might be better to have a
&gt; unified x86_64/fat/memxor.asm with two entry points, like you do.
&gt; I've also been considering m4 hacks to let a single fat .asm file
&gt; include multiple other .asm files, or including the same file twice,
&gt; without labels or m4 definitions colliding, but I'm not sure that's
&gt; worth the effort. The foo-1.asm, foo-2.asm, ... scheme is a bit
&gt; inelegant, but it is easy to understand.

I didn't like the duplication of code either. I'm not very skilled in
m4, but I though that x86_64/ could include the fat variant and use the
non-sse2 variant.

The code in fat.c is quite elaborate on the cases it handles. The more
functions added the more unmanageable the code will become. Would it
make sense to restrict that support to the systems where ifunc is
available? Then the addition of new optimized functions becomes very
simple.

regards,
Nikos


["patch.txt" (patch.txt)]

diff --git a/x86_64/fat/fat.c b/x86_64/fat/fat.c
index 3585cf5..e6fb76e 100644
--- a/x86_64/fat/fat.c
+++ b/x86_64/fat/fat.c
@@ -74,12 +74,10 @@
    call to any fat function.
 */
 
-#if HAVE_LINK_IFUNC
-# define IFUNC(resolve) __attribute__ ((ifunc (resolve)))
-#else
-# define IFUNC(resolve)
-#endif
 
+#define IFUNC(resolve) __attribute__ ((ifunc (resolve)))
+
+static void fat_init (void);
 void _nettle_cpuid (uint32_t input, uint32_t regs[4]);
 
 typedef void void_func (void);
@@ -88,24 +86,34 @@ typedef void aes_crypt_internal_func (unsigned rounds, const uint32_t *keys,
 				      const struct aes_table *T,
 				      size_t length, uint8_t *dst,
 				      const uint8_t *src);
-aes_crypt_internal_func _aes_encrypt IFUNC ("_aes_encrypt_resolve");
-aes_crypt_internal_func _nettle_aes_encrypt_x86_64;
-aes_crypt_internal_func _nettle_aes_encrypt_aesni;
-
-aes_crypt_internal_func _aes_decrypt IFUNC ("_aes_decrypt_resolve");
-aes_crypt_internal_func _nettle_aes_decrypt_x86_64;
-aes_crypt_internal_func _nettle_aes_decrypt_aesni;
-
-#if HAVE_LINK_IFUNC
-#define _aes_encrypt_init NULL
-#define _aes_decrypt_init NULL
-#else
-static aes_crypt_internal_func _aes_encrypt_init;
-static aes_crypt_internal_func _aes_decrypt_init;
-#endif
 
-static aes_crypt_internal_func *_aes_encrypt_vec = _aes_encrypt_init;
-static aes_crypt_internal_func *_aes_decrypt_vec = _aes_decrypt_init;
+/* name: the name of the function to be overriden
+ * type: the type of the function (e.g. aes_crypt_internal_func)
+ * var: specify an implementation of it; the symbol _nettle_name_var should exist
+ */
+#define DEFINE_FAT_FUNC(name, type) \
+	type name IFUNC(#name"_resolve"); \
+	static type * name##_vec = NULL; \
+	static void_func * name##_resolve(void) { \
+	  if (getenv ("NETTLE_FAT_VERBOSE")) \
+	    fprintf (stderr, "libnettle: "#name"_resolve\n"); \
+	fat_init(); \
+	return (void_func *) name##_vec; \
+	}
+
+#define DEFINE_FAT_FUNC_VAR(name, type, var) \
+	type _nettle##name##_##var;
+
+#define ENABLE_FAT_FUNC_VAR(name, var) \
+	name##_vec = _nettle##name##_##var;
+
+DEFINE_FAT_FUNC(_aes_encrypt, aes_crypt_internal_func);
+DEFINE_FAT_FUNC_VAR(_aes_encrypt, aes_crypt_internal_func, x86_64);
+DEFINE_FAT_FUNC_VAR(_aes_encrypt, aes_crypt_internal_func, aesni);
+
+DEFINE_FAT_FUNC(_aes_decrypt, aes_crypt_internal_func);
+DEFINE_FAT_FUNC_VAR(_aes_decrypt, aes_crypt_internal_func, x86_64);
+DEFINE_FAT_FUNC_VAR(_aes_decrypt, aes_crypt_internal_func, aesni);
 
 /* This function should usually be called only once, at startup. But
    it is idempotent, and on x86, pointer updates are atomic, so
@@ -134,15 +142,15 @@ fat_init (void)
     {
       if (verbose)
 	fprintf (stderr, "libnettle: aes instructions available.\n");
-      _aes_encrypt_vec = _nettle_aes_encrypt_aesni;
-      _aes_decrypt_vec = _nettle_aes_decrypt_aesni;
+      ENABLE_FAT_FUNC_VAR(_aes_encrypt, aesni);
+      ENABLE_FAT_FUNC_VAR(_aes_decrypt, aesni);
     }
   else
     {
       if (verbose)
 	fprintf (stderr, "libnettle: aes instructions not available.\n");
-      _aes_encrypt_vec = _nettle_aes_encrypt_x86_64;
-      _aes_decrypt_vec = _nettle_aes_decrypt_x86_64;
+      ENABLE_FAT_FUNC_VAR(_aes_encrypt, x86_64);
+      ENABLE_FAT_FUNC_VAR(_aes_decrypt, x86_64);
     }
   /* FIXME: We ought to use some thread-aware memory barrier before
      setting the initialized flag. For now, just do another cpuinfo
@@ -159,71 +167,3 @@ fat_constructor (void)
 }
 #endif
 
-#if HAVE_LINK_IFUNC
-
-static void_func *
-_aes_encrypt_resolve (void)
-{
-  if (getenv ("NETTLE_FAT_VERBOSE"))
-    fprintf (stderr, "libnettle: _aes_encrypt_resolve\n");
-  fat_init ();
-  return (void_func *) _aes_encrypt_vec;
-}
-
-static void_func *
-_aes_decrypt_resolve (void)
-{
-  if (getenv ("NETTLE_FAT_VERBOSE"))
-    fprintf (stderr, "libnettle: _aes_decrypt_resolve\n");
-  fat_init ();
-  return (void_func *) _aes_decrypt_vec;
-}
-
-#else /* !HAVE_LINK_IFUNC */
-
-/* We need wrapper functions jumping via the function pointer. */
-void
-_aes_encrypt (unsigned rounds, const uint32_t *keys,
-	      const struct aes_table *T,
-	      size_t length, uint8_t *dst,
-	      const uint8_t *src)
-{
-  _aes_encrypt_vec (rounds, keys, T, length, dst, src);
-}
-
-static void
-_aes_encrypt_init (unsigned rounds, const uint32_t *keys,
-		   const struct aes_table *T,
-		   size_t length, uint8_t *dst,
-		   const uint8_t *src)
-{
-  if (getenv ("NETTLE_FAT_VERBOSE"))
-    fprintf (stderr, "libnettle: _aes_encrypt_init\n");
-  fat_init ();
-  assert (_aes_encrypt_vec != _aes_encrypt_init);
-  _aes_encrypt (rounds, keys, T, length, dst, src);
-}
-
-void
-_aes_decrypt (unsigned rounds, const uint32_t *keys,
-	      const struct aes_table *T,
-	      size_t length, uint8_t *dst,
-	      const uint8_t *src)
-{
-  _aes_decrypt_vec (rounds, keys, T, length, dst, src);
-}
-
-static void
-_aes_decrypt_init (unsigned rounds, const uint32_t *keys,
-		   const struct aes_table *T,
-		   size_t length, uint8_t *dst,
-		   const uint8_t *src)
-{
-  if (getenv ("NETTLE_FAT_VERBOSE"))
-    fprintf (stderr, "libnettle: _aes_decrypt_init\n");
-  fat_init ();
-  assert (_aes_decrypt_vec != _aes_decrypt_init);
-  _aes_decrypt (rounds, keys, T, length, dst, src);
-}
-
-#endif /* !HAVE_LINK_IFUNC */


</body></email><email><emailId>20150117084208</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-17 08:42:08-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; The benchmarks (if it is same as the older code I've sent you few years
&gt; ago), have been done on intel i7, i5 and a xeon. In all of them there
&gt; was an improvement. The benchmark above is on i7.
&gt;
&gt; About that not improving on AMD I have no more data than what I've wrote
&gt; you last time (which was few years ago). No idea if newer AMD processors
&gt; behave better.

I don't remember much of this benchmarking (and things may have changed,
anyway). I think I'm going to add an environment variable to override
the cpu detection, so different variants can be checked easily at
runtime. So we'll see later on if some finer granularity is needed.

&gt; I didn't like the duplication of code either. I'm not very skilled in
&gt; m4, but I though that x86_64/ could include the fat variant and use the
&gt; non-sse2 variant.

I think I'd prefer to do it the other way around, with memxor-1.asm and
memxor-2.asm both including x86_64/memxor.asm, just defining USE_SSE2
differently. With little actual code under fat/. Do you see any problem
with that approach?

&gt; The code in fat.c is quite elaborate on the cases it handles. The more
&gt; functions added the more unmanageable the code will become. Would it
&gt; make sense to restrict that support to the systems where ifunc is
&gt; available? Then the addition of new optimized functions becomes very
&gt; simple.

I agree that as more functions are added, we need some macros for the
boilerplate code. But I think that can be done without dropping support
for the non-ifunc systems. Basically, use an alternative definition of
your DEFINE_FAT_FUNC which defines a wrapper function and an init
function, instead of a resolver function.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150117084840</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-17 08:48:40-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Sat, 2015-01-17 at 09:42 +0100, Niels Möller wrote:

&gt; &gt; I didn't like the duplication of code either. I'm not very skilled in
&gt; &gt; m4, but I though that x86_64/ could include the fat variant and use the
&gt; &gt; non-sse2 variant.
&gt; I think I'd prefer to do it the other way around, with memxor-1.asm and
&gt; memxor-2.asm both including x86_64/memxor.asm, just defining USE_SSE2
&gt; differently. With little actual code under fat/. Do you see any problem
&gt; with that approach?

No (but no idea how to implement it).

&gt; &gt; The code in fat.c is quite elaborate on the cases it handles. The more
&gt; &gt; functions added the more unmanageable the code will become. Would it
&gt; &gt; make sense to restrict that support to the systems where ifunc is
&gt; &gt; available? Then the addition of new optimized functions becomes very
&gt; &gt; simple.
&gt; I agree that as more functions are added, we need some macros for the
&gt; boilerplate code. But I think that can be done without dropping support
&gt; for the non-ifunc systems. Basically, use an alternative definition of
&gt; your DEFINE_FAT_FUNC which defines a wrapper function and an init
&gt; function, instead of a resolver function.

I realized that non-ifunc systems are desirable, or windows support goes
away. I couldn't make wrapper functions using macros. What I'm thinking
is a perl script which auto-generates the wrapper functions by reading
fat.c and the header files. What would you think of that?

regards,
Nikos



</body></email><email><emailId>20150117095527</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-17 09:55:27-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; On Sat, 2015-01-17 at 09:42 +0100, Niels Möller wrote:
&gt;
&gt;&gt; I think I'd prefer to do it the other way around, with memxor-1.asm and
&gt;&gt; memxor-2.asm both including x86_64/memxor.asm, just defining USE_SSE2
&gt;&gt; differently. With little actual code under fat/. Do you see any problem
&gt;&gt; with that approach?
&gt;
&gt; No (but no idea how to implement it).

Pushed in now.

&gt; I realized that non-ifunc systems are desirable, or windows support goes
&gt; away. I couldn't make wrapper functions using macros. What I'm thinking
&gt; is a perl script which auto-generates the wrapper functions by reading
&gt; fat.c and the header files. What would you think of that?

Let me give it a try using the C preprocessor first.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150117220733</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-17 22:07:33-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Let me give it a try using the C preprocessor first.

Done now, starting from your macros.

Argument lists have to be passed both with and without types, which
looks a bit ugly, but I think it's good enough. E.g, this is the code
specific to _aes_encrypt:

DECLARE_FAT_FUNC(_nettle_aes_encrypt, aes_crypt_internal_func)
DECLARE_FAT_FUNC_VAR(aes_encrypt, aes_crypt_internal_func, x86_64)
DECLARE_FAT_FUNC_VAR(aes_encrypt, aes_crypt_internal_func, aesni)

DEFINE_FAT_FUNC(_nettle_aes_encrypt, void,
		(unsigned rounds, const uint32_t *keys,
		 const struct aes_table *T,
		 size_t length, uint8_t *dst,
		 const uint8_t *src),
		(rounds, keys, T, length, dst, src))

The nice thing is that these definitions are not arch-specific, so the
macros could be moved to fat.h and reused when writing fat-arm.c.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150117230436</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-17 23:04:36-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I think I'm going to add an environment variable to override
&gt; the cpu detection, so different variants can be checked easily at
&gt; runtime.

Say we add a secure_getenv("NETTLE_FAT_OVERRIDE") in the fat
initialization. What should it look like? Some alternatives:

1. Specify substitute values to replace result of the cpuid calls?

2. A list of feature keywords?

3. A list of function:variant, where each entry specifies an override
   for the particular function?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150118072950</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-01-18 07:29:50-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Sun, 2015-01-18 at 00:04 +0100, Niels Möller wrote:
&gt; nisse@lysator.liu.se (Niels Möller) writes:
&gt; 
&gt; &gt; I think I'm going to add an environment variable to override
&gt; &gt; the cpu detection, so different variants can be checked easily at
&gt; &gt; runtime.
&gt; 
&gt; Say we add a secure_getenv("NETTLE_FAT_OVERRIDE") in the fat
&gt; initialization. What should it look like? Some alternatives:
&gt; 1. Specify substitute values to replace result of the cpuid calls?
&gt; 2. A list of feature keywords?
&gt; 3. A list of function:variant, where each entry specifies an override
&gt;    for the particular function?

For gnutls I have an environment variable which is interpreted as an
alternative CPUID. E.g. you can put a flag with the following in
GNUTLS_CPUID_OVERRIDE:
  0x1: Disable all run-time detected optimizations
  0x2: Enable AES-NI  
  0x4: Enable SSSE3
  0x8: Enable PCLMUL
  0x100000: Enable VIA padlock
  0x200000: Enable VIA PHE
  0x400000: Enable VIA PHE SHA512





</body></email><email><emailId>20150119205456</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-19 20:54:56-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; It's early, but it would be nice if the arm neon code was part of fat as well.

I've pushed a start for fat binary support on arm. A complication, not
yet handled, is that for some functions (in fact, all neon-related code,
I think), the runtime choice is between the C implementation and an
assembly implementation. So we need some additional name mangling to do,
e.g,

  #define sha3_permute _nettle_sha3_permute_c

during the compilation of sha3-permute.c. Just a question on where to
configure that. Maybe one could add something like

#ifdef FAT_RENAME
#include FAT_RENAME
#endif

and substitute FAT_RENAME in config.h, e.g., to fat-arm-rename.h. Hmm,
or maybe it's good enough to just check the HAVE_NATIVE_foo. (In the case
of non-fat builds, when that define is set, the file with the C
implementation is never compiled at all).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150119210721</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-19 21:07:21-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Mon, 19 Jan 2015, Niels Möller wrote:

&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt;
&gt;&gt; It's early, but it would be nice if the arm neon code was part of fat as well.
&gt;
&gt; I've pushed a start for fat binary support on arm.

Unfortunately I don't have much opinion on the other things you mentioned 
in your mail, but I did have a brief look at the arm feature detection.

I see you're looking at the CPU architecture field as well. There's a big 
gotcha related to that one; some ARMv6 CPUs report CPU architecture: 7. 
See http://code.google.com/p/android/issues/detail?id=10812 and 
https://android.googlesource.com/platform/ndk/+/13a99c7f/sources/android/cpufeatures/cpu-features.c 
(lines 716-737) for more details about this. (Unfortunately I don't have 
any better pointers to the kernel source/discussions for an explanation of 
this.)

For example a raspberry pi has got the following /proc/cpuinfo:

processor       : 0
model name      : ARMv6-compatible processor rev 7 (v6l)
Features        : swp half thumb fastmult vfp edsp java tls
CPU implementer : 0x41
CPU architecture: 7
CPU variant     : 0x0
CPU part        : 0xb76
CPU revision    : 7

Hardware        : BCM2708
Revision        : 0002
Serial          : 00000000d605188c


If you only need to decide whether to enable ARMv6 specific instructions, 
it should be just fine, but in case you'd use it for enabling ARMv7 stuff 
as well, you'd need some sort of workaround for this.

// Martin

</body></email><email><emailId>20150119220247</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-19 22:02:47-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Martin Storsjö &lt;martin@martin.st&gt; writes:

&gt; I see you're looking at the CPU architecture field as well. There's a
&gt; big gotcha related to that one; some ARMv6 CPUs report CPU
&gt; architecture: 7.

Oops. To get it right, maybe one have to look up the "CPU part" field
(and "CPU implementor"?) in a table.

But currently, it's used only to check for existence of armv6
instructions. I don't remember all the details, but one of the
instructions seems to be uxtb, used in the aes code.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150121204023</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-21 20:40:23-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; Say we add a secure_getenv("NETTLE_FAT_OVERRIDE") in the fat
&gt; initialization. What should it look like? Some alternatives:

Implemented (for systems that have secure_getenv). Syntax as follows:
The value is a comma separated list. Entries are either single keywords,
e.g., "neon" or "aesni", or keyword:value, e.g., "vendor:intel" or
"arch:7".

Setting NETTLE_FAT_VERBOSE displays the the values used in the same
format.

If the environment variable is set, it completely overrides automatic
detection.

It's a bit unclear if it works with static libraries.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150121205815</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-21 20:58:15-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I've pushed a start for fat binary support on arm.

And now some more, including choice between C and neon implementations
(currently there's neon code for salsa20, sha512, sha3, and umac).

Testing appreciated.

I haven't done the memory barrier thing yet, it appears to be more
complicated than I had hoped. The manual I have say that the dmb
instruction (data memory barrier) is available only with armv7 and
later. And that armv6 uses writes to CP15 registers (I haven't yet tried
to figure what that means out, or if this method works also on later
versions).

For pre armv6, maybe memory was strongly ordered, or there where no
multi-processor support at all?

So it seems we may need some arch type detection to find out if and how
to do a memory barrier!

I've had a quick look at what linux does
(https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/arch/arm/include/asm/barrier.h),
and it seems messy.

I wonder if there's some different approach to get C compiler, C library
or the kernel do a memory barrier for us? I'd prefer to not link with
any thread libraries.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150123201544</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-23 20:15:44-0400</timestampReceived><subject>Re: Fat library support</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I haven't done the memory barrier thing yet, it appears to be more
&gt; complicated than I had hoped. The manual I have say that the dmb
&gt; instruction (data memory barrier) is available only with armv7 and
&gt; later. And that armv6 uses writes to CP15 registers (I haven't yet tried
&gt; to figure what that means out, or if this method works also on later
&gt; versions).

I think I've found a simple solution. I deleted the initialized flag in
fat_init, instead I let each caller read the particular function pointer
it is interested in, and check if it is already properly initialized or
not. I.e., check if the current value equals its static initializer, and
if so, call fat_init.

This way, store order consistency between threads no longer matters, and
we won't need any memory barriers.

I'd like to merge this code on the master branch soon. It would be nice
if anyone else could give it a little testing, in particular on various
ARM devices. I've tested it on a few different x86_64 pc:s and an ARMv7
pandaboard, all running gnu/linux.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150124121215</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-24 12:12:15-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Fri, 23 Jan 2015, Niels Möller wrote:

&gt; nisse@lysator.liu.se (Niels Möller) writes:
&gt;
&gt;&gt; I haven't done the memory barrier thing yet, it appears to be more
&gt;&gt; complicated than I had hoped. The manual I have say that the dmb
&gt;&gt; instruction (data memory barrier) is available only with armv7 and
&gt;&gt; later. And that armv6 uses writes to CP15 registers (I haven't yet tried
&gt;&gt; to figure what that means out, or if this method works also on later
&gt;&gt; versions).
&gt;
&gt; I think I've found a simple solution. I deleted the initialized flag in
&gt; fat_init, instead I let each caller read the particular function pointer
&gt; it is interested in, and check if it is already properly initialized or
&gt; not. I.e., check if the current value equals its static initializer, and
&gt; if so, call fat_init.
&gt;
&gt; This way, store order consistency between threads no longer matters, and
&gt; we won't need any memory barriers.
&gt;
&gt; I'd like to merge this code on the master branch soon. It would be nice
&gt; if anyone else could give it a little testing, in particular on various
&gt; ARM devices. I've tested it on a few different x86_64 pc:s and an ARMv7
&gt; pandaboard, all running gnu/linux.

I tested it on a raspberry pi (ARMv6), and it seems to work pretty much as 
intended - I was able to do a fat build with neon, while executing the 
testsuite works (so the detection seems to work as intended).

I also tested building for ARMv5 using the android NDK, and I noted that 
arm/v6/aes*.asm require a ".arch armv6" at the start, otherwise they fail 
to assemble in that configuration. (The neon sources seem to have ".fpu 
neon" similarly already. I'm not sure if some of the neon source perhaps 
would require an ".arch armv7-a" as well, but they did seem to build just 
fine in my test so perhaps it isn't necessary.)

To test this for yourself in case you're interested, add 
&lt;ndk&gt;/toolchains/arm-linux-androideabi-4.6/prebuilt/*x86*/bin to your 
path, configure with this line:
SYSROOT=&lt;ndk&gt;/platforms/android-3/arch-arm/
CC="arm-linux-androideabi-gcc --sysroot=$SYSROOT" 
CXX="arm-linux-androideabi-g++ --sysroot=$SYSROOT" ./configure 
--host=arm-linux-gnueabi --enable-fat

Other than that, building with --enable-fat does seem to do the right 
thing - much better than the current setup. (E.g. currently, if 
cross-compiling for raspberry pi, it fails to enable the v6 routines, 
since the host triplet is arm-bcm2708hardfp-linux-gnueabi even though it's 
a armv6 device. When building on such a device, config.guess gives 
armv6l-unknown-linux-gnueabihf instead.)


I take it you've tested building for windows? Although the x86 detection 
should be much simpler, so it's only the absence of ifunc that'd be tested 
there.

// Martin

</body></email><email><emailId>20150124122558</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-24 12:25:58-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Wed, 21 Jan 2015, Niels Möller wrote:

&gt; nisse@lysator.liu.se (Niels Möller) writes:
&gt;
&gt;&gt; I've pushed a start for fat binary support on arm.
&gt;
&gt; And now some more, including choice between C and neon implementations
&gt; (currently there's neon code for salsa20, sha512, sha3, and umac).

I noticed that arm/v6/sha1-compress and arm/v6/sha256-compress aren't 
hooked up in fat builds yet - is that intentional?

&gt; For pre armv6, maybe memory was strongly ordered, or there where no
&gt; multi-processor support at all?

AFAIK there was no multiprocessor support before that at all. But your 
latest solution seems to be simple and robust enough, and simple is always 
good.

// Martin

</body></email><email><emailId>20150124172912</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-24 17:29:12-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Martin Storsjö &lt;martin@martin.st&gt; writes:

&gt; I tested it on a raspberry pi (ARMv6), and it seems to work pretty
&gt; much as intended - I was able to do a fat build with neon, while
&gt; executing the testsuite works (so the detection seems to work as
&gt; intended).

Good.

&gt; I also tested building for ARMv5 using the android NDK, and I noted
&gt; that arm/v6/aes*.asm require a ".arch armv6" at the start, otherwise
&gt; they fail to assemble in that configuration.

I'll apply that patch.

&gt; To test this for yourself in case you're interested, add
&gt; &lt;ndk&gt;/toolchains/arm-linux-androideabi-4.6/prebuilt/*x86*/bin to your
&gt; path, configure with this line:

I have some experience in building things for android. But it's a bit of
a hassle to get the testsuite over to a device for testing.

&gt; Other than that, building with --enable-fat does seem to do the right
&gt; thing - much better than the current setup. (E.g. currently, if
&gt; cross-compiling for raspberry pi, it fails to enable the v6 routines,
&gt; since the host triplet is arm-bcm2708hardfp-linux-gnueabi even though
&gt; it's a armv6 device. When building on such a device, config.guess
&gt; gives armv6l-unknown-linux-gnueabihf instead.)

To me, that sounds like the crosscompiler setup is a bit strange. It
ought to be possible to configure with
--host=armv6l-unknown-linux-gnueabihf, and still get the right cross
tools, right?

&gt; I take it you've tested building for windows?

I can cross compile for 32-bit and 64-bit windows, but my wine setup
doesn't support 64-bit executables. So testing on x86_64 windows (and
macosx) is appreciated.

Thanks a lot for the testing,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150124173015</emailId><senderName>Niels =?iso-8859-1?Q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-01-24 17:30:15-0400</timestampReceived><subject>Re: Fat library support</subject><body>

Martin Storsjö &lt;martin@martin.st&gt; writes:

&gt; I noticed that arm/v6/sha1-compress and arm/v6/sha256-compress aren't
&gt; hooked up in fat builds yet - is that intentional?

No, that's unintentional. I should fix it.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20150124173700</emailId><senderName>Martin_Storsjö</senderName><senderEmail>martin@martin.st</senderEmail><timestampReceived>2015-01-24 17:37:00-0400</timestampReceived><subject>Re: Fat library support</subject><body>

On Sat, 24 Jan 2015, Niels Möller wrote:

&gt; Martin Storsjö &lt;martin@martin.st&gt; writes:
&gt;
&gt;&gt; Other than that, building with --enable-fat does seem to do the right
&gt;&gt; thing - much better than the current setup. (E.g. currently, if
&gt;&gt; cross-compiling for raspberry pi, it fails to enable the v6 routines,
&gt;&gt; since the host triplet is arm-bcm2708hardfp-linux-gnueabi even though
&gt;&gt; it's a armv6 device. When building on such a device, config.guess
&gt;&gt; gives armv6l-unknown-linux-gnueabihf instead.)
&gt;
&gt; To me, that sounds like the crosscompiler setup is a bit strange. It
&gt; ought to be possible to configure with
&gt; --host=armv6l-unknown-linux-gnueabihf, and still get the right cross
&gt; tools, right?

Yeah, it'd just require a bit more typing (setting CC/CXX manually). But 
it's no big issue anyway since the option for fat builds takes care of it 
nicely.

// Martin

</body></email><email><emailId>20150113103436</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-13 10:34:36-0400</timestampReceived><subject>Re: Fat library support (was: Re: Intel aes instructions)</subject><body>

On Tue, Jan 13, 2015 at 11:20 AM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wro=
te:
&gt; nisse@lysator.liu.se (Niels M=F6ller) writes:
&gt;&gt; Clearly, this will be more useful after adding support for
&gt;&gt; fat binaries, detecting presence of these instructions at runtime.
&gt;
&gt; I've now had a first go at fat-library support. Checked in on the branch
&gt; fat-library. See
&gt; https://git.lysator.liu.se/nettle/nettle/blob/fat-library/x86_64/fat/fat.=
c

Looks nice. About the __attribute__((constructor)), you are
restricting it to GNUC only, while it seems to be available more
widely.
In gnutls I use it unconditionally except for sun.

#ifdef __sun
# pragma init(fat_constructor)
# define _CONSTRUCTOR
#else
# define _CONSTRUCTOR __attribute__((constructor))
#endif


It's early, but it would be nice if the arm neon code was part of fat as we=
ll.

regards,
Nikos

</body></email><email><emailId>20150112104545</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-01-12 10:45:45-0400</timestampReceived><subject>Re: Intel aes instructions</subject><body>

On Sun, Jan 11, 2015 at 3:27 PM, Niels M=F6ller &lt;nisse@lysator.liu.se&gt; wrot=
e:
&gt; I've just pushed new aes code using intel's aesni instructions.
&gt; See
&gt;
&gt; https://git.lysator.liu.se/nettle/nettle/blob/530014f3f811d9018ec83a8748f=
dbcd45e8ccc5d/x86_64/aesni/aes-encrypt-internal.asm
&gt; It gave a speedup of almost 10 times on the haswell machine where I
&gt; tested it (and in addition, it should avoid sidechannel leaks in those
&gt; functions). Clearly, this will be more useful after adding support for
&gt; fat binaries, detecting presence of these instructions at runtime. For
&gt; now, it has to be enabled explicitly with the configure argument
&gt; --enable-x86-aesni.
&gt; I have one question, on how to enable support for these instructions in
&gt; the assembler. For now I added a pseudo-op
&gt;         .arch bdver2

No idea. The openssl code I currently use in gnutls, doesn't utilize
the AES instructions. It outputs sequences of:
.byte   102,15,56,220,248
.byte   102,68,15,56,220,192
for these instructions. That way they have the code compiled on any
system, and the ones with aesni get to execute it. While it works, it
requires to do the assembler's job though.

https://github.com/openssl/openssl/blob/69d5747f90136aa026a96204f26ab39549d=
fc69b/crypto/aes/asm/aesni-x86_64.pl

regards,
Nikos

</body></email><email><emailId>20150129134925</emailId><senderName>Amos Jeffries</senderName><senderEmail>squid3@treenet.co.nz</senderEmail><timestampReceived>2015-01-29 13:49:25-0400</timestampReceived><subject>[PATCH v3] Please add base-64 URL-safe alphabet</subject><body>

RFC 4648 (https://tools.ietf.org/html/rfc4648) standardizes two
Base-64 alphabets. Nettle currently only supports the traditional
base-64 alphabet from section 4.

There is growing use amongst new protocol definitions and extensions,
particularly in the HTTP area for the URL-safe extension alphabet
instead of the classical Base-64 alphabet.

The attached patch implements a proposed API/ABI extension adding
support for RFC 4648 section 5 "Base 64 Encoding with URL and Filename
Safe Alphabet"

For the standardized alphabets external code simply calls the init()
function relevant to the alphabet it is needing to encode/decode with.
The library internally uses the context to select which lookup table to
use for later base64 function calls.

For custom or non-standard alphabets a pointer to the alphabet lookup
table is included in the encode/decode contexts. External code can
memset() a context to empty and provide the alphabet lookup table pointer.

Addtionally this patch adds a simple fuzz unit test for both Base-64 and
Base-64 URL extended alphabet encoders and decoders.


Amos Jeffries
Treehouse Networks Ltd.

PS, I have also removed the dead code wrappend in "#if 0" rather than
updating it.

["base-64_extended_mk3.patch" (text/plain)]

diff --git a/Makefile.in b/Makefile.in
index 2a940f9..48cce47 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -81,6 +81,7 @@ nettle_SOURCES = aes-decrypt-internal.c aes-decrypt.c \
 		 arctwo.c arctwo-meta.c blowfish.c \
 		 base16-encode.c base16-decode.c base16-meta.c \
 		 base64-encode.c base64-decode.c base64-meta.c \
+		 base64url-encode.c base64url-decode.c \
 		 buffer.c buffer-init.c \
 		 camellia-crypt-internal.c camellia-table.c \
 		 camellia-absorb.c camellia-invert-key.c \
diff --git a/base64-decode.c b/base64-decode.c
index f622baa..b603930 100644
--- a/base64-decode.c
+++ b/base64-decode.c
@@ -43,7 +43,7 @@
 #define TABLE_END -3
 
 static const signed char
-decode_table[0x100] =
+default_decode_table[0x100] =
 {
   /* White space is HT, VT, FF, CR, LF and SPC */
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1, 
@@ -68,6 +68,7 @@ void
 base64_decode_init(struct base64_decode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = default_decode_table;
 }
 
 int
@@ -75,9 +76,7 @@ base64_decode_single(struct base64_decode_ctx *ctx,
 		     uint8_t *dst,
 		     uint8_t src)
 {
-  int data;
-  
-  data = decode_table[src];
+  int data = ctx-&gt;alphabet[src];
 
   switch(data)
     {
diff --git a/base64-encode.c b/base64-encode.c
index 313c512..aaa6fa5 100644
--- a/base64-encode.c
+++ b/base64-encode.c
@@ -38,16 +38,24 @@
 
 #include "base64.h"
 
-static const uint8_t encode_table[64] =
+static void _base64_encode_raw(const char *alphabet, uint8_t *dst, size_t length, \
const uint8_t *src); +
+static const uint8_t default_encode_table[64] =
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   "abcdefghijklmnopqrstuvwxyz"
   "0123456789+/";
 
-#define ENCODE(x) (encode_table[0x3F &amp; (x)])
+#define ENCODE(alphabet,x) ((alphabet)[0x3F &amp; (x)])
 
 void
 base64_encode_raw(uint8_t *dst, size_t length, const uint8_t *src)
 {
+  _base64_encode_raw(default_encode_table, dst, length, src);
+}
+
+void
+_base64_encode_raw(const char *alphabet, uint8_t *dst, size_t length, const uint8_t \
*src) +{
   const uint8_t *in = src + length;
   uint8_t *out = dst + BASE64_ENCODE_RAW_LENGTH(length);
 
@@ -61,89 +69,46 @@ base64_encode_raw(uint8_t *dst, size_t length, const uint8_t \
*src)  {
 	case 1:
 	  *--out = '=';
-	  *--out = ENCODE(in[0] &lt;&lt; 4);
+	  *--out = ENCODE(alphabet, (in[0] &lt;&lt; 4));
 	  break;
 	  
 	case 2:
-	  *--out = ENCODE( in[1] &lt;&lt; 2);
-	  *--out = ENCODE((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4));
+	  *--out = ENCODE(alphabet, (in[1] &lt;&lt; 2));
+	  *--out = ENCODE(alphabet, ((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4)));
 	  break;
 
 	default:
 	  abort();
 	}
-      *--out = ENCODE(in[0] &gt;&gt; 2);
+      *--out = ENCODE(alphabet, (in[0] &gt;&gt; 2));
     }
   
   while (in &gt; src)
     {
       in -= 3;
-      *--out = ENCODE( in[2]);
-      *--out = ENCODE((in[1] &lt;&lt; 2) | (in[2] &gt;&gt; 6));
-      *--out = ENCODE((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4));
-      *--out = ENCODE( in[0] &gt;&gt; 2);      
+      *--out = ENCODE(alphabet, (in[2]));
+      *--out = ENCODE(alphabet, ((in[1] &lt;&lt; 2) | (in[2] &gt;&gt; 6)));
+      *--out = ENCODE(alphabet, ((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4)));
+      *--out = ENCODE(alphabet, (in[0] &gt;&gt; 2));
     }
   assert(in == src);
   assert(out == dst);
 }
 
-#if 0
-unsigned 
-base64_encode(uint8_t *dst,
-	      unsigned src_length,
-	      const uint8_t *src)
-{
-  unsigned dst_length = BASE64_ENCODE_RAW_LENGTH(src_length);
-  unsigned n = src_length / 3;
-  unsigned left_over  = src_length % 3;
-  unsigned done = 0;
-  
-  if (left_over)
-    {
-      const uint8_t *in = src + n * 3;
-      uint8_t *out = dst + dst_length;
-
-      switch(left_over)
-	{
-	case 1:
-	  *--out = '=';
-	  *--out = ENCODE(in[0] &lt;&lt; 4);
-	  break;
-	  
-	case 2:
-	  *--out = ENCODE( in[1] &lt;&lt; 2);
-	  *--out = ENCODE((in[0] &lt;&lt; 4) | (in[1] &gt;&gt; 4));
-	  break;
-
-	default:
-	  abort();
-	}
-      *--out = ENCODE(in[0] &gt;&gt; 2);
-
-      done = 4;
-    }
-  base64_encode_raw(n, dst, src);
-  done += n * 4;
-
-  assert(done == dst_length);
-
-  return done;
-}
-#endif
-
 void
 base64_encode_group(uint8_t *dst, uint32_t group)
 {
-  *dst++ = ENCODE(group &gt;&gt; 18);
-  *dst++ = ENCODE(group &gt;&gt; 12);
-  *dst++ = ENCODE(group &gt;&gt; 6);
-  *dst++ = ENCODE(group);
+  *dst++ = ENCODE(default_encode_table, (group &gt;&gt; 18));
+  *dst++ = ENCODE(default_encode_table, (group &gt;&gt; 12));
+  *dst++ = ENCODE(default_encode_table, (group &gt;&gt; 6));
+  *dst++ = ENCODE(default_encode_table, group);
 }
 
 void
 base64_encode_init(struct base64_encode_ctx *ctx)
 {
   ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = default_encode_table;
 }
 
 /* Encodes a single byte. */
@@ -159,7 +124,7 @@ base64_encode_single(struct base64_encode_ctx *ctx,
   while (bits &gt;= 6)
     {
       bits -= 6;
-      dst[done++] = ENCODE(word &gt;&gt; bits);
+      dst[done++] = ENCODE(ctx-&gt;alphabet, (word &gt;&gt; bits));
     }
 
   ctx-&gt;bits = bits;
@@ -196,7 +161,7 @@ base64_encode_update(struct base64_encode_ctx *ctx,
     {
       assert(!(bulk % 3));
       
-      base64_encode_raw(dst + done, bulk, src);
+      _base64_encode_raw(ctx-&gt;alphabet, dst + done, bulk, src);
       done += BASE64_ENCODE_RAW_LENGTH(bulk);
       src += bulk;
       left = left_over;
@@ -224,7 +189,7 @@ base64_encode_final(struct base64_encode_ctx *ctx,
   
   if (bits)
     {
-      dst[done++] = ENCODE(ctx-&gt;word &lt;&lt; (6 - ctx-&gt;bits));
+      dst[done++] = ENCODE(ctx-&gt;alphabet, (ctx-&gt;word &lt;&lt; (6 - ctx-&gt;bits)));
       for (; bits &lt; 6; bits += 2)
 	dst[done++] = '=';
 
diff --git a/base64.h b/base64.h
index a6fb823..21381d2 100644
--- a/base64.h
+++ b/base64.h
@@ -42,12 +42,14 @@ extern "C" {
 
 /* Name mangling */
 #define base64_encode_init nettle_base64_encode_init
+#define base64url_encode_init nettle_base64url_encode_init
 #define base64_encode_single nettle_base64_encode_single
 #define base64_encode_update nettle_base64_encode_update
 #define base64_encode_final nettle_base64_encode_final
 #define base64_encode_raw nettle_base64_encode_raw
 #define base64_encode_group nettle_base64_encode_group
 #define base64_decode_init nettle_base64_decode_init
+#define base64url_decode_init nettle_base64url_decode_init
 #define base64_decode_single nettle_base64_decode_single
 #define base64_decode_update nettle_base64_decode_update
 #define base64_decode_final nettle_base64_decode_final
@@ -73,11 +75,17 @@ struct base64_encode_ctx
 {
   unsigned word;   /* Leftover bits */
   unsigned bits;  /* Number of bits, always 0, 2, or 4. */
+  const uint8_t *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_encode_init(struct base64_encode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_encode_init(struct base64_encode_ctx *ctx);
+
 /* Encodes a single byte. Returns amount of output (always 1 or 2). */
 size_t
 base64_encode_single(struct base64_encode_ctx *ctx,
@@ -123,11 +131,17 @@ struct base64_decode_ctx
 
   /* Number of padding characters encountered */
   unsigned padding;
+  const signed char *alphabet; /* which alphabet to use for encoding */
 };
 
+/* initialize encoding context for base-64 */
 void
 base64_decode_init(struct base64_decode_ctx *ctx);
 
+/* initialize encoding context for base-64 with URL safe extended alphabet */
+void
+base64url_decode_init(struct base64_decode_ctx *ctx);
+
 /* Decodes a single byte. Returns amount of output (0 or 1), or -1 on
  * errors. */
 int
diff --git a/base64url-decode.c b/base64url-decode.c
index e69de29..5b1a802 100644
--- a/base64url-decode.c
+++ b/base64url-decode.c
@@ -0,0 +1,65 @@
+/* base64url-decode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const signed char
+urlextended_decode_table[0x100] =
+{
+  /* White space is HT, VT, FF, CR, LF and SPC */
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1,
+  52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -3, -1, -1,
+  -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,
+  15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63,
+  -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
+  41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
+};
+
+void
+base64url_decode_init(struct base64_decode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = ctx-&gt;padding = 0;
+  ctx-&gt;alphabet = urlextended_decode_table;
+}
diff --git a/base64url-encode.c b/base64url-encode.c
index e69de29..1f1eab7 100644
--- a/base64url-encode.c
+++ b/base64url-encode.c
@@ -0,0 +1,48 @@
+/* base64url-encode.c
+
+   Copyright (C) 2015 Niels Möller
+
+   This file is part of GNU Nettle.
+
+   GNU Nettle is free software: you can redistribute it and/or
+   modify it under the terms of either:
+
+     * the GNU Lesser General Public License as published by the Free
+       Software Foundation; either version 3 of the License, or (at your
+       option) any later version.
+
+   or
+
+     * the GNU General Public License as published by the Free
+       Software Foundation; either version 2 of the License, or (at your
+       option) any later version.
+
+   or both in parallel, as here.
+
+   GNU Nettle is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   General Public License for more details.
+
+   You should have received copies of the GNU General Public License and
+   the GNU Lesser General Public License along with this program.  If
+   not, see http://www.gnu.org/licenses/.
+*/
+
+#if HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include "base64.h"
+
+static const uint8_t urlextended_encode_table[64] =
+  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+  "abcdefghijklmnopqrstuvwxyz"
+  "0123456789-_";
+
+void
+base64url_encode_init(struct base64_encode_ctx *ctx)
+{
+  ctx-&gt;word = ctx-&gt;bits = 0;
+  ctx-&gt;alphabet = urlextended_encode_table;
+}
diff --git a/testsuite/base64-test.c b/testsuite/base64-test.c
index 1633521..8215978 100644
--- a/testsuite/base64-test.c
+++ b/testsuite/base64-test.c
@@ -1,5 +1,56 @@
 #include "testutils.h"
 #include "base64.h"
+#include "knuth-lfib.h"
+
+static void
+test_fuzz_once(struct base64_encode_ctx *ctxEncode, struct base64_decode_ctx \
*ctxDecode, int fuzz_length, uint8_t const * const pattern_in) +{
+  size_t decoded_len;
+  uint8_t pattern_crypt[2048];
+  uint8_t pattern_out[2048];
+
+  memset(pattern_out, 0, sizeof(pattern_out));
+  memset(pattern_crypt, 0, sizeof(pattern_crypt));
+
+  ASSERT(base64_encode_update(ctxEncode, pattern_crypt, fuzz_length, pattern_in) == \
strlen(pattern_crypt)); +  ASSERT(base64_encode_final(ctxEncode, \
&amp;pattern_crypt[strlen(pattern_crypt)]) &lt;= BASE64_ENCODE_FINAL_LENGTH); +
+  decoded_len = 0;
+  ASSERT(base64_decode_update(ctxDecode, &amp;decoded_len, pattern_out, \
strlen(pattern_crypt), pattern_crypt) == 1); +  ASSERT(base64_decode_final(ctxDecode) \
== 1); +
+  ASSERT(MEMEQ(1024, pattern_in, pattern_out));
+}
+
+static void
+test_fuzz(void)
+{
+  /* Fuzz a round-trip through both encoder and decoder */
+  struct base64_encode_ctx ctxEncode;
+  struct base64_decode_ctx ctxDecode;
+  int l;
+  size_t fuzz_length;
+  uint8_t pattern_in[1024];
+
+  struct knuth_lfib_ctx ctxRandom;
+  knuth_lfib_init(&amp;ctxRandom, 39854);
+
+  for (l = 0; l &lt; 100000; ++l) {
+    memset(pattern_in, 0, sizeof(pattern_in));
+    fuzz_length = knuth_lfib_get(&amp;ctxRandom) % (sizeof(pattern_in)-4);
+    /* fuzz_length could be 0, which is fine we need to test that case too */
+    knuth_lfib_random(&amp;ctxRandom, fuzz_length, pattern_in);
+
+    base64_encode_init(&amp;ctxEncode);
+    base64_decode_init(&amp;ctxDecode);
+    test_fuzz_once(&amp;ctxEncode, &amp;ctxDecode, fuzz_length, pattern_in);
+
+    base64url_encode_init(&amp;ctxEncode);
+    base64url_decode_init(&amp;ctxDecode);
+    test_fuzz_once(&amp;ctxEncode, &amp;ctxDecode, fuzz_length, pattern_in);
+  }
+
+}
 
 void
 test_main(void)
@@ -45,4 +96,6 @@ test_main(void)
     
     ASSERT(MEMEQ(9, buffer, "HelloG8=x"));
   }
+
+  test_fuzz();
 }



</body></email><email><emailId>20151022073728</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-10-22 07:37:28-0400</timestampReceived><subject>Travel plans</subject><body>

I'm going to be in San Francisco and Mountain View the next two weeks.
I don't know if we have any list members in the area, but if so, I'd be
happy to meet up over a coffee or beer.

When I'm back home I'll start working at google's Stockholm office. I
guess there might be some initial obstacles, but the plan is that I'll
keep hacking on Nettle as a mostly spare-time project, like I've been
doing for the past few years.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20151202162702</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-02 16:27:02-0400</timestampReceived><subject>SIGILL on armv7</subject><body>

Hi,
 It was reported that nettle crashes with SIGILL on an armv7 system.
I've gather some info from the report [0], but let me know if you need
anything else. My hunch is that this is neon related, and that the
system that was used for compilation supported it but the final system
doesn't. I'll disable neon support in the fedora builds and see how it
works out.

The instruction that fails is:

(gdb) x/i$pc
=&gt; 0xb6647af8 &lt;_nettle_salsa20_core+8&gt;: vldmia  r12, {d20-d25}

And the backtrace is:

(gdb) backtrace
#0  _nettle_salsa20_core () at salsa20-core-internal.s:58
#1  0xb6647db4 in nettle_salsa20r12_crypt (ctx=ctx@entry=0xb6cc7f40
&lt;nonce_ctx&gt;,
    length=&lt;optimized out&gt;, length@entry=29, c=c@entry=0x7f67ce83 "",
m=m@entry=0x7f67ce83 "")
    at salsa20r12-crypt.c:65
#2  0xb6c9b1e0 in wrap_nettle_rnd_nonce (_ctx=&lt;optimized out&gt;, datasize=29,
data=0x7f67ce83)
    at rnd.c:302
#3  wrap_nettle_rnd (_ctx=&lt;optimized out&gt;, level=level@entry=0,
data=0x7f67ce83,
    datasize=datasize@entry=29) at rnd.c:321
#4  0xb6bcdd2c in _gnutls_rnd (len=29, data=&lt;optimized out&gt;,
level=GNUTLS_RND_NONCE)
    at ./random.h:37
#5  create_tls_random (dst=&lt;optimized out&gt;) at gnutls_handshake.c:205
#6  0xb6bce0e0 in _gnutls_set_client_random (session=&lt;optimized out&gt;,
rnd=&lt;optimized out&gt;)
    at gnutls_handshake.c:230
#7  0xb6bcf460 in send_client_hello (again=&lt;optimized out&gt;, session=0x7f67ce38)
    at gnutls_handshake.c:2039
#8  send_hello (session=session@entry=0x7f67ce38, again=&lt;optimized out&gt;)
    at gnutls_handshake.c:2249
#9  0xb6bd2ca4 in handshake_client (session=0x7f67ce38) at
gnutls_handshake.c:2732
#10 gnutls_handshake (session=0x7f67ce38) at gnutls_handshake.c:2583
#11 0xb6f9a9d8 in cstp_handshake (vpninfo=vpninfo@entry=0x7f58ccf8, init=64,
init@entry=1)
    at gnutls.c:2250
#12 0xb6f9aff8 in openconnect_open_https (vpninfo=vpninfo@entry=0x7f58ccf8) at
gnutls.c:2227
#13 0xb6f7cc70 in do_https_request (vpninfo=vpninfo@entry=0x7f58ccf8,
method=0xb6f9f700 "POST",
    method@entry=0xb6ffec80 &lt;__stack_chk_guard&gt; "",
    request_body_type=request_body_type@entry=0xb6f9fa28
"application/x-www-form-urlencoded",
    request_body=request_body@entry=0x7f58d480, form_buf=0xbefff25c,
form_buf@entry=0x1bb,
    fetch_redirect=fetch_redirect@entry=0) at http.c:875
#14 0xb6f8d1a0 in cstp_obtain_cookie (vpninfo=&lt;optimized out&gt;) at auth.c:1238
#15 0x7f559508 in main (argc=0, argv=0x0) at main.c:1388


[0]. The full report: https://bugzilla.redhat.com/show_bug.cgi?id=1287298#c10


regards,
Nikos

</body></email><email><emailId>20151201214827</emailId><senderName>andy lawrence</senderName><senderEmail>ajlawrence@acm.org</senderEmail><timestampReceived>2015-12-01 21:48:27-0400</timestampReceived><subject>RSASSA-PSS API</subject><body>

Hello,

I have been thinking about implementing RSASSA-PSS in Nettle.

I would like to propose the following API for performing and verifying
signatures:

diff --git a/rsa.h b/rsa.h
&gt; index 6d2574b..b9faffe 100644
&gt; --- a/rsa.h
&gt; +++ b/rsa.h
&gt; @@ -35,6 +35,7 @@
&gt;  #define NETTLE_RSA_H_INCLUDED
&gt;
&gt;  #include "nettle-types.h"
&gt; +#include "nettle-meta.h"
&gt;  #include "bignum.h"
&gt;
&gt;  #include "md5.h"
&gt; @@ -188,6 +189,27 @@ int
&gt;  rsa_private_key_prepare(struct rsa_private_key *key);
&gt;
&gt;
&gt; +/* PSS style signatures */
&gt; +int
&gt; +rsa_pss_sign(const struct rsa_private_key *key,
&gt; +        size_t length, const uint8_t *digest_info,
&gt; +        mpz_t s, const struct nettle_hash *hash_func,
&gt; +        size_t salt_length, const uint8_t *salt);
&gt; +
&gt; +int
&gt; +rsa_pss_sign_tr(const struct rsa_public_key *pub,
&gt; +                const struct rsa_private_key *key,
&gt; +              void *random_ctx, nettle_random_func *random,
&gt; +              size_t length, const uint8_t *digest_info,
&gt; +                 mpz_t s, const struct nettle_hash *hash_func,
&gt; +              size_t salt_length, const uint8_t *salt);
&gt; +
&gt; +int
&gt; +rsa_pss_verify(const struct rsa_public_key *key,
&gt; +         size_t length, const uint8_t *digest_info,
&gt; +         const mpz_t signature, const struct nettle_hash *hash_func,
&gt; +         size_t salt_length);
&gt; +
&gt;  /* PKCS#1 style signatures */
&gt;  int
&gt;  rsa_pkcs1_sign(const struct rsa_private_key *key,
&gt;

It is fairly similar to PKCS#1 API but with the addition of a hash function
and salt. If this sounds reasonable then I will have a go at writing the
implementations.

Best wishes,

Andrew Lawrence

</body></email><email><emailId>20151202203311</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-02 20:33:11-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

andy lawrence &lt;ajlawrence@acm.org&gt; writes:

&gt; I have been thinking about implementing RSASSA-PSS in Nettle.

Thanks. As I said earlier, I haven't looked at PSS for a long time, so
please excuse my ignorance. I would also like to ask if we have any list
members who are more familiar with it and willing to help with code
review? (Otherwise, I'll just have to read up on it, of course).

Are there any particular application or protocol you have in mind which
needs pss?

&gt;&gt; +/* PSS style signatures */
&gt;&gt; +int
&gt;&gt; +rsa_pss_sign(const struct rsa_private_key *key,
&gt;&gt; +        size_t length, const uint8_t *digest_info,
&gt;&gt; +        mpz_t s, const struct nettle_hash *hash_func,
&gt;&gt; +        size_t salt_length, const uint8_t *salt);

Try as far as possible to be consistent with the argument order in the
pkcs1 functions. I think length, digest_info and signature should be the
final three arguments (for all three functions). There are no simple
rules here, but I tend to put constant things like the hash algorithm
early, and per-message data, like the salt, later.

What's the salt? If it's supposed to be randomly generated by the
signing application, I think it's better to pass in a randomness source
to the signature function (similarly to dsa and ecdsa, and the _tr RSA
functions).

We're also in a process to promote the _tr functions and deprecate the
older ones. Maybe we should do *only* the _tr version for the new pss
code?

&gt;&gt; +int
&gt;&gt; +rsa_pss_verify(const struct rsa_public_key *key,
&gt;&gt; +         size_t length, const uint8_t *digest_info,
&gt;&gt; +         const mpz_t signature, const struct nettle_hash *hash_func,
&gt;&gt; +         size_t salt_length);

It looks like the salt_length is an algorithm parameter; the verifier
has to know it to be able to verify a signature? Is it usually packaged
together with the signature, or is it agreed upon in advance?

And speaking of parameters, is the hash function above required to be
the same as the one encoded into the asn.1 digest_info and used to hash
the message? If so, maybe we shouldn't make the interface flexible
enough to allow different hash functions?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151203095536</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-03 09:55:36-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

On Wed, Dec 2, 2015 at 9:33 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; wr=
ote:
&gt; andy lawrence &lt;ajlawrence@acm.org&gt; writes:
&gt;&gt; I have been thinking about implementing RSASSA-PSS in Nettle.
&gt; Thanks. As I said earlier, I haven't looked at PSS for a long time, so
&gt; please excuse my ignorance. I would also like to ask if we have any list
&gt; members who are more familiar with it and willing to help with code
&gt; review? (Otherwise, I'll just have to read up on it, of course).
&gt; Are there any particular application or protocol you have in mind which
&gt; needs pss?

X.509 certificate signing (I've seen certificates signed with
RSASSA-PSS) and in the future, TLS 1.3 will be using it.

</body></email><email><emailId>20151203141123</emailId><senderName>andy lawrence</senderName><senderEmail>ajlawrence@acm.org</senderEmail><timestampReceived>2015-12-03 14:11:23-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

I was looking for a security project to work on and saw that
implementing RSA-PSS in was listed on the GNUTLS website.

I will attempt to make the argument order consistent.

Yes the salt is supposed to be randomly generated by the signing
application. I will modify the function definition to include a
randomness source as you have suggested.

I agree in that it will be less work to only implement the _tr
versions of rsa-pss. I do not know what the consumers of Nettle want
so this decision is better taken by you. There may be some reason to
use the older version.

The verifier has to know the salt length in order to recover the salt
and verify the signature. It is usually packaged together with the
signature in the algorithm parameters:

RSASSA-PSS-params ::= SEQUENCE {
          hashAlgorithm      [0] HashAlgorithm    DEFAULT sha1,
          maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1,
          saltLength         [2] INTEGER          DEFAULT 20,
          trailerField       [3] TrailerField     DEFAULT trailerFieldBC
      }

As seen in the above parameters, it should be possible to choose both
the hash algorithm for the message and the hash algorithm for the mask
generation function. I had envisaged the one currently specified in
the function definition being used for the MGF. The choice of this
hash function is independent of the one used to hash the message. I
was planning on following the convention with the existing RSA code
and supplying a pile of different functions, one for each hash
algorithm. Do you have a suggestion on how to prevent this repetition?

Best wishes,

Andrew Lawrence


On Wed, Dec 2, 2015 at 8:33 PM, Niels Möller &lt;nisse@lysator.liu.se&gt; wrote:

&gt; andy lawrence &lt;ajlawrence@acm.org&gt; writes:
&gt;
&gt; &gt; I have been thinking about implementing RSASSA-PSS in Nettle.
&gt;
&gt; Thanks. As I said earlier, I haven't looked at PSS for a long time, so
&gt; please excuse my ignorance. I would also like to ask if we have any list
&gt; members who are more familiar with it and willing to help with code
&gt; review? (Otherwise, I'll just have to read up on it, of course).
&gt;
&gt; Are there any particular application or protocol you have in mind which
&gt; needs pss?
&gt;
&gt; &gt;&gt; +/* PSS style signatures */
&gt; &gt;&gt; +int
&gt; &gt;&gt; +rsa_pss_sign(const struct rsa_private_key *key,
&gt; &gt;&gt; +        size_t length, const uint8_t *digest_info,
&gt; &gt;&gt; +        mpz_t s, const struct nettle_hash *hash_func,
&gt; &gt;&gt; +        size_t salt_length, const uint8_t *salt);
&gt;
&gt; Try as far as possible to be consistent with the argument order in the
&gt; pkcs1 functions. I think length, digest_info and signature should be the
&gt; final three arguments (for all three functions). There are no simple
&gt; rules here, but I tend to put constant things like the hash algorithm
&gt; early, and per-message data, like the salt, later.
&gt;
&gt; What's the salt? If it's supposed to be randomly generated by the
&gt; signing application, I think it's better to pass in a randomness source
&gt; to the signature function (similarly to dsa and ecdsa, and the _tr RSA
&gt; functions).
&gt;
&gt; We're also in a process to promote the _tr functions and deprecate the
&gt; older ones. Maybe we should do *only* the _tr version for the new pss
&gt; code?
&gt;
&gt; &gt;&gt; +int
&gt; &gt;&gt; +rsa_pss_verify(const struct rsa_public_key *key,
&gt; &gt;&gt; +         size_t length, const uint8_t *digest_info,
&gt; &gt;&gt; +         const mpz_t signature, const struct nettle_hash *hash_func,
&gt; &gt;&gt; +         size_t salt_length);
&gt;
&gt; It looks like the salt_length is an algorithm parameter; the verifier
&gt; has to know it to be able to verify a signature? Is it usually packaged
&gt; together with the signature, or is it agreed upon in advance?
&gt;
&gt; And speaking of parameters, is the hash function above required to be
&gt; the same as the one encoded into the asn.1 digest_info and used to hash
&gt; the message? If so, maybe we shouldn't make the interface flexible
&gt; enough to allow different hash functions?
&gt;
&gt; Regards,
&gt; /Niels
&gt;
&gt; --
&gt; Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
&gt; Internet email is subject to wholesale government surveillance.
&gt;

</body></email><email><emailId>20151208062451</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-08 06:24:51-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; X.509 certificate signing (I've seen certificates signed with
&gt; RSASSA-PSS) and in the future, TLS 1.3 will be using it.

I see. Do you how x.509 and tls-1.3 handles the salt length? Is it
prespecified, like in the definition of a tls cipher suite, or bundled
with the public key, or included with each signature?

Regards,
/Niels


-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151208063355</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-08 06:33:55-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

andy lawrence &lt;ajlawrence@acm.org&gt; writes:

&gt; I agree in that it will be less work to only implement the _tr
&gt; versions of rsa-pss. I do not know what the consumers of Nettle want
&gt; so this decision is better taken by you. There may be some reason to
&gt; use the older version.

Start with the _tr version then.

&gt; RSASSA-PSS-params ::= SEQUENCE {
&gt;           hashAlgorithm      [0] HashAlgorithm    DEFAULT sha1,
&gt;           maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1,
&gt;           saltLength         [2] INTEGER          DEFAULT 20,
&gt;           trailerField       [3] TrailerField     DEFAULT trailerFieldBC
&gt;       }

Is this for a signature on arbitrary data, or in the context of x.509?
If a signature is always packed up in some asn.1 structure, we should
perhaps use that representation in the interface, instead of a plain
mpz_t.

&gt; As seen in the above parameters, it should be possible to choose both
&gt; the hash algorithm for the message and the hash algorithm for the mask
&gt; generation function.

But at least the hashAlgorithm above is required to be the same as
inside the digestInfo?

&gt; I had envisaged the one currently specified in
&gt; the function definition being used for the MGF.

Make sense to me, until there's some actual use of different MGF.

&gt; I was planning on following the convention with the existing RSA code
&gt; and supplying a pile of different functions, one for each hash
&gt; algorithm. Do you have a suggestion on how to prevent this repetition?

Try to write the helper functions needed to make each of the
hash-specific functions small and trivial. One could even define some
shared macro to expand to the function definition, but that's probably
not worth the effort.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151202195321</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-02 19:53:21-0400</timestampReceived><subject>Re: SIGILL on armv7</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt;  It was reported that nettle crashes with SIGILL on an armv7 system.
&gt; I've gather some info from the report [0], but let me know if you need
&gt; anything else.

It would be good to know how nettle was built, configure flags,
configure output, etc. And which version.

&gt; My hunch is that this is neon related, and that the system that was
&gt; used for compilation supported it but the final system doesn't.

That's a possible explanation, by default neon would be enabled if it's
supported on the build system.

&gt; I'll disable neon support in the fedora builds and see how it
&gt; works out.

For a binary distribution, it should be built with --disable-arm-neon,
or --enable-fat. If the failing library *was* built with --enable-fat,
there might be some problem with the run-time detection.

Let me know if it solves the problem.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151203095202</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-03 09:52:02-0400</timestampReceived><subject>Re: SIGILL on armv7</subject><body>

On Wed, Dec 2, 2015 at 8:53 PM, Niels M=C3=B6ller &lt;nisse@lysator.liu.se&gt; wr=
ote:
&gt;&gt;  It was reported that nettle crashes with SIGILL on an armv7 system.
&gt;&gt; I've gather some info from the report [0], but let me know if you need
&gt;&gt; anything else.
&gt; It would be good to know how nettle was built, configure flags,
&gt; configure output, etc. And which version.
&gt;&gt; My hunch is that this is neon related, and that the system that was
&gt;&gt; used for compilation supported it but the final system doesn't.
&gt; That's a possible explanation, by default neon would be enabled if it's
&gt; supported on the build system.
&gt;&gt; I'll disable neon support in the fedora builds and see how it
&gt;&gt; works out.
&gt; For a binary distribution, it should be built with --disable-arm-neon,

Done that and it fixed the issue. The user had no neon support in the CPU.

&gt; or --enable-fat. If the failing library *was* built with --enable-fat,
&gt; there might be some problem with the run-time detection.

I plan to use --enable-fat on fedora. I seem to have some issues with
3.1.1 (crashes on x86_64) when a "hardened" build is enabled
(https://fedoraproject.org/wiki/Changes/Harden_All_Packages). I will
investigate further.

regards,
Nikos

</body></email><email><emailId>20151203184218</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-03 18:42:18-0400</timestampReceived><subject>Re: SIGILL on armv7</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt; I plan to use --enable-fat on fedora. I seem to have some issues with
&gt; 3.1.1 (crashes on x86_64) when a "hardened" build is enabled
&gt; (https://fedoraproject.org/wiki/Changes/Harden_All_Packages). I will
&gt; investigate further.

It also seems using ifunc is generally flaky (in particular, crashes
with RTLD_NOW). So that's disabled on the master branch.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151208220814</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-12-08 22:08:14-0400</timestampReceived><subject>Re: RSASSA-PSS API</subject><body>

On Tue, 2015-12-08 at 07:24 +0100, Niels Möller wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt; 
&gt; &gt; X.509 certificate signing (I've seen certificates signed with
&gt; &gt; RSASSA-PSS) and in the future, TLS 1.3 will be using it.
&gt; 
&gt; I see. Do you how x.509 and tls-1.3 handles the salt length? Is it
&gt; prespecified, like in the definition of a tls cipher suite, or 
&gt; bundled with the public key, or included with each signature?

In PKIX it is part of the certificate parameters:
https://tools.ietf.org/html/rfc4055#section-3

I have not checked the TLS 1.3 draft but I'd expect something similar.

regards,
Nikos


</body></email><email><emailId>20151209080930</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-09 08:09:30-0400</timestampReceived><subject>Re: nettle + rsa crt fix</subject><body>

Nikos Mavrogiannopoulos &lt;nmav@gnutls.org&gt; writes:

&gt; The SHA3 fix, but I think that's already in.

It is, including some documentation updates.

I also received a report of an ecc secp256r1 miscomputation the other
day, which I have been able to reproduce and want to fix.

(And RSA PSS will have to wait until after the release).

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151211061433</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-11 06:14:33-0400</timestampReceived><subject>ecc-256r1 miscomputation</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; I also received a report of an ecc secp256r1 miscomputation the other
&gt; day, which I have been able to reproduce and want to fix.

I have fixed two bugs in the 64-bit C implementation of ecc_256_modp and
ecc_256_modq, in ecc-256.c. It was carry propagation in unlikely cases
not done right. These functions are a bit too hairy for their own good,
maybe they ought to be rewritten using a simpler reduction scheme
(they're not very preformance critical, but they should be kept
side-channel silent).

It's not obviously exploitable, in the sense that it makes
it easy to get ecdsa_verify to accept forged signatures, but not obvious
doesn't imply not possible, of course.

I have let additional mod tests run overnight, and I haven't uncovered
any problems in any of the other ecc curves, so the known bugs affect
only nettle_secp_256r1.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151212204858</emailId><senderName>Hanno =?UTF-8?B?QsO2Y2s=?=</senderName><senderEmail>hanno@hboeck.de</senderEmail><timestampReceived>2015-12-12 20:48:58-0400</timestampReceived><subject>secp256 calculation bug (already fixed)</subject><body>

This is a MIME-formatted message.  If you see this text it means that your
E-mail software does not support MIME-formatted messages.

[Attachment #2 (multipart/mixed)]


Hi,

I had reported this privately to Niels Möller, but I'm re-sending it
here so it's publicly available and archived. (Niels didn't think it's
neccesary to keep this private.)

The attached example will show a bug in the nistp256 point
multiplication of nettle. It compiles a certain curve point with 1
which should not change the coordinates, however it does.

Was fixed here:
https://git.lysator.liu.se/nettle/nettle/commit/c71d2c9d20eeebb985e3872e4550137209e3ce4d


-- 
Hanno Böck
http://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: BBB51E42

[Attachment #5 (text/x-c++src)]

#include &lt;stdio.h&gt;
#include &lt;gmp.h&gt;
#include &lt;nettle/ecc.h&gt;
#include &lt;nettle/ecc-curve.h&gt;

#define XCOORD "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFF001C2C00"
#define YCOORD "9731275B8E973CEAFD8ABF5A6E16A177F05A345114FBC7527B3A60BC65FE606A"


int main(int argc, char *argv[]) {
	mpz_t x, y, rx, ry, gmul;
	struct ecc_point point, result;
	struct ecc_scalar gs1;
	char* outx;

	mpz_init_set_str(x, XCOORD, 16);
	mpz_init_set_str(y, YCOORD, 16);
	mpz_init_set_str(gmul, "1", 16);

	gmp_printf("input x:  %ZX\n", x);
	gmp_printf("input y:  %ZX\n", y);
	gmp_printf("scalar:   %ZX\n\n", gmul);

	ecc_point_init(&amp;point, &amp;nettle_secp_256r1);
	if (ecc_point_set(&amp;point, x, y) == 0) { printf("point not on curve\n"); return -1; }

	ecc_scalar_init(&amp;gs1, &amp;nettle_secp_256r1);
	if (ecc_scalar_set(&amp;gs1, gmul) ==0) { printf ("scalar out of range\n"); return -1; }

	ecc_point_init(&amp;result, &amp;nettle_secp_256r1);
	ecc_point_mul(&amp;result, &amp;gs1, &amp;point);

	mpz_init(rx);
	mpz_init(ry);
	ecc_point_get(&amp;result, rx, ry);
	gmp_asprintf(&amp;outx, "%ZX", rx);

	printf("output x: %s\n", outx);

	if (strcmp(outx, XCOORD)!=0) printf("Output and input don't match!\n");

	return 0;
}

[Attachment #6 (application/pgp-signature)]

</body></email><email><emailId>20151215225050</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-15 22:50:50-0400</timestampReceived><subject>Re: Miscalculations on secp384 curve</subject><body>

nisse@lysator.liu.se (Niels Möller) writes:

&gt; So most likely an unlikely carry which is mishandled. I'll dig further.

I've checked in a fix. For the curious, the reduction for the
secp384r1 prime (aka nist 384) is done left-to-right (i.e., no
Montgomery representation) based on the identity

  B^6 = B^2 + 2^32(B-1) + 1 (mod p)

where B is my shorthand for 2^64, the bignum base, so B^6 = 2^384. The
B-1 factor corresponds to a subtraction like

    U5 U4 U3 U2 U1 U0  0
  -    U5 U4 U3 U2 U1 U0
  ----------------------

applied to the most signifiacnt half of the 12-limb (768-bit) input to
the reduction.

Clearly, this can never underflow. The result is folded into lower limbs
(a shift of 32 bits is needed too, either before or after the
subtraction).

Now, one folding eliminates only four limbs out of six needed, so we need
folding twice, starting with folding the top two limbs. The old code
splits the above subtraction into the two subtractions,

    U5 U4      U3 U2 U1 U0  0
  -    U5    - U4 U3 U2 U1 U0
  -------    ----------------

with the high one (on the left) is done first. But now the second one
(on the right) *can* underflow. This negative carry is added to other
positive carries in the folding process, but the net carry at that
position can turn out to be negative, and that's what happened in
Hanno's test case.

The code tried to allow for a negative carry by sign extension and stuff
in the logic for the carry folding, but apparantly got that wrong, and
possibly with other problems too if adding this negative carry in turn
causes an underflow.

I reorganised the code to split U4 in upper and lower halves earlier,
U4 = H 2^32 + L, and instead do the two subtractions

    U5 H&lt;&lt;32            L U3 U2 U1 U0  0
  -       U5 H&lt;&lt;32     -   L U3 U2 U1 U0
  ----------------    ----------------

where neither subtraction can underflow. And then there's only positive
carries to worry about in the rest of the folding process.

I intend to extend the test program testsuite/ecc-mod-test to be able to
do test runs for many hours using random seeding.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151204150407</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>n.mavrogiannopoulos@gmail.com</senderEmail><timestampReceived>2015-12-04 15:04:07-0400</timestampReceived><subject>nettle + rsa crt fix</subject><body>

Hi,
 Given this issue in openssl [0] , I think the issue of software
errors helping retrieve an RSA key seems less and less foreign. Given
its repercussions if such an issue exists (RSA private keys can be
retrieved) would it make sense to have a bug fix release with that?

regards,
Nikos

[0]. https://blog.fuzzing-project.org/31-Fuzzing-Math-miscalculations-in-OpenSSLs-BN_mod_exp-CVE-2015-3193.html



</body></email><email><emailId>20151211101905</emailId><senderName>Hanno =?UTF-8?B?QsO2Y2s=?=</senderName><senderEmail>hanno@hboeck.de</senderEmail><timestampReceived>2015-12-11 10:19:05-0400</timestampReceived><subject>Miscalculations on secp384 curve</subject><body>

This is a MIME-formatted message.  If you see this text it means that your
E-mail software does not support MIME-formatted messages.

[Attachment #2 (multipart/mixed)]


Hi,

Attached is an example elliptic curve multiplication that will produce
a wrong result in nettle.

It's a multiplication of these coordinates
23000000000000000000000000000000000000000000000000110011C2DD0000000000000000000
46BE3FEF75FCA4BD52CE28EC3F1483A05EE154965B05282F9029E14277409908C0EBAAD2CA5449FFA61FEC78473816BC
with this scalar
23000000000000C1DD3FF800E83E2CACA1010A21


The example code will do the calculation with both openssl and nettle
and will produce different results (I have verified the result
with nss, which produces the same result as openssl).

Compile with
gcc nettle-nistp384-miscalc.c -lhogweed -lgmp  -lcrypto

-- 
Hanno Böck
http://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: BBB51E42

[Attachment #5 (text/x-c++src)]

#include &lt;stdio.h&gt;
#include &lt;gmp.h&gt;
#include &lt;nettle/ecc.h&gt;
#include &lt;nettle/ecc-curve.h&gt;
#include &lt;openssl/bn.h&gt;
#include &lt;openssl/ec.h&gt;
#include &lt;openssl/obj_mac.h&gt;

#define XCOORD "23000000000000000000000000000000000000000000000000110011C2DD0000000000000000000000000000"
 #define YCOORD "46BE3FEF75FCA4BD52CE28EC3F1483A05EE154965B05282F9029E14277409908C0EBAAD2CA5449FFA61FEC78473816BC"
 #define SCALAR "23000000000000C1DD3FF800E83E2CACA1010A21"

int main() {
	mpz_t x, y, gmul;
	struct ecc_point point, result;
	struct ecc_scalar gs1;
	BIGNUM *ox = BN_new(), *oy = BN_new(), *scal = BN_new();
	EC_GROUP *curve;
	EC_POINT *p1;
	BN_CTX *ctx = BN_CTX_new();


	mpz_init_set_str(x, XCOORD, 16);
	mpz_init_set_str(y, YCOORD, 16);
	mpz_init_set_str(gmul, SCALAR, 16);

	gmp_printf("input x:  %ZX\n", x);
	gmp_printf("input y:  %ZX\n", y);
	gmp_printf("scalar:   %ZX\n\n", gmul);

	ecc_point_init(&amp;point, &amp;nettle_secp_384r1);
	if (ecc_point_set(&amp;point, x, y) == 0) { printf("point not on curve\n"); return -1; }
	ecc_scalar_init(&amp;gs1, &amp;nettle_secp_384r1);
	if (ecc_scalar_set(&amp;gs1, gmul) ==0) { printf ("scalar out of range\n"); return -1; }
	ecc_point_init(&amp;result, &amp;nettle_secp_384r1);
	ecc_point_mul(&amp;result, &amp;gs1, &amp;point);

	ecc_point_get(&amp;result, x, y);
	gmp_printf("nettle out x:  %ZX\n", x);
	gmp_printf("nettle out y:  %ZX\n\n", y);


	curve = EC_GROUP_new_by_curve_name(NID_secp384r1);
	p1 = EC_POINT_new(curve);

	BN_hex2bn(&amp;ox, XCOORD);
	BN_hex2bn(&amp;oy, YCOORD);
	BN_hex2bn(&amp;scal, SCALAR);
	if (EC_POINT_set_affine_coordinates_GFp(curve, p1, ox, oy, ctx) != 1) {printf("error \
creating point\n");return -2; }  if (EC_POINT_is_on_curve(curve, p1, ctx) != 1) { \
printf("point not on curve\n");return -3;}

	EC_POINT_mul(curve, p1, 0, p1, scal, ctx);
	EC_POINT_get_affine_coordinates_GFp(curve, p1, ox, oy, ctx);

	printf("openssl out x: %s\nopenssl out y: %s\n", BN_bn2hex(ox), BN_bn2hex(oy));
}


[Attachment #6 (application/pgp-signature)]

</body></email><email><emailId>20151211105225</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-11 10:52:25-0400</timestampReceived><subject>Re: Miscalculations on secp384 curve</subject><body>

Hanno Böck &lt;hanno@hboeck.de&gt; writes:

&gt; Attached is an example elliptic curve multiplication that will produce
&gt; a wrong result in nettle.
&gt;
&gt; It's a multiplication of these coordinates
&gt; 23000000000000000000000000000000000000000000000000110011C2DD0000000000000000000
&gt; 46BE3FEF75FCA4BD52CE28EC3F1483A05EE154965B05282F9029E14277409908C0EBAAD2CA5449FFA61FEC78473816BC
&gt; with this scalar
&gt; 23000000000000C1DD3FF800E83E2CACA1010A21

Thanks. I'll look into this.

On which platform do you see the problem?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151211121121</emailId><senderName>Hanno =?UTF-8?B?QsO2Y2s=?=</senderName><senderEmail>hanno@hboeck.de</senderEmail><timestampReceived>2015-12-11 12:11:21-0400</timestampReceived><subject>Re: Miscalculations on secp384 curve</subject><body>

This is a MIME-formatted message.  If you see this text it means that your
E-mail software does not support MIME-formatted messages.


On Fri, 11 Dec 2015 11:52:25 +0100
nisse@lysator.liu.se (Niels Möller) wrote:

&gt; On which platform do you see the problem?

64 bit x86. Just tested in a Debian 32 bit VM and there the problem
doesn't appear, so it seems this is a 64 bit specific problem.


-- 
Hanno Böck
http://hboeck.de/

mail/jabber: hanno@hboeck.de
GPG: BBB51E42

[Attachment #3 (application/pgp-signature)]

</body></email><email><emailId>20151211205909</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-11 20:59:09-0400</timestampReceived><subject>Re: Miscalculations on secp384 curve</subject><body>

Hanno Böck &lt;hanno@hboeck.de&gt; writes:

&gt; It's a multiplication of these coordinates
&gt; 23000000000000000000000000000000000000000000000000110011C2DD0000000000000000000
&gt; 46BE3FEF75FCA4BD52CE28EC3F1483A05EE154965B05282F9029E14277409908C0EBAAD2CA5449FFA61FEC78473816BC
&gt;  with this scalar
&gt; 23000000000000C1DD3FF800E83E2CACA1010A21

I've tracked this down to a miscomputation in the x86_64 assembly
implementation of ecc_384_mod. If I add a testcase for the problematic
value, the failure looks like

  m-&gt;mod p failed: bit_size = 384
  a   = 4c9000000000000000000000000000000000000000000000004a604db486e00000000000000000 \
0000000000000000000000121025be29575adb2c8ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
  t   = fffffffffb37000004c90121025be29575b258cddb4d1404e0116e00098d59fb29853804d67f6e000000000004c8ffff \
(bad)  ref = fffffffffb37000004c90121025be29575b258cddb4d1404e0116e00098d59fa29853803d67f6e000000000104c8fffe
  Aborted (core dumped)
  FAIL: ecc-mod

So most likely an unlikely carry which is mishandled. I'll dig further.

I don't know what tool you use to search for these problems, but if you
are able to run it in additional configurations, the following x86_64
nettle configurations would be helpful (assuming 64-bit you're doing now
is the compiler's default).

  ./configure
  ./configure --disable-assembler
  ./configure CC='gcc -m32' CXX='g++ -m32'

(If you reuse the nettle build tree, remember make distclean before you
reconfigure).

Also testing on (32-bit) ARM would be helpful, to exercise the corresponding
ARM assembly code.

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.


</body></email><email><emailId>20151208062215</emailId><senderName>Niels =?utf-8?Q?M=C3=B6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2015-12-08 06:22:15-0400</timestampReceived><subject>Re: nettle + rsa crt fix</subject><body>

Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:

&gt;  Given this issue in openssl [0] , I think the issue of software
&gt; errors helping retrieve an RSA key seems less and less foreign. Given
&gt; its repercussions if such an issue exists (RSA private keys can be
&gt; retrieved) would it make sense to have a bug fix release with that?

You're absolutely right that release is overdue, we've been talking
about it since September at least.

I haven't checked carefully, but I think the main missing piece is
documentation for the new functions (I have a patch from you including
some docs, but I haven't gotten to that yet, and a bunch of new
functions have been added since then).

Anything else?

Regards,
/Niels

-- 
Niels Möller. PGP-encrypted email is preferred. Keyid C0B98E26.
Internet email is subject to wholesale government surveillance.

</body></email><email><emailId>20151208220431</emailId><senderName>Nikos Mavrogiannopoulos</senderName><senderEmail>nmav@gnutls.org</senderEmail><timestampReceived>2015-12-08 22:04:31-0400</timestampReceived><subject>Re: nettle + rsa crt fix</subject><body>

On Tue, 2015-12-08 at 07:22 +0100, Niels Möller wrote:
&gt; Nikos Mavrogiannopoulos &lt;n.mavrogiannopoulos@gmail.com&gt; writes:
&gt; 
&gt; &gt;  Given this issue in openssl [0] , I think the issue of software
&gt; &gt; errors helping retrieve an RSA key seems less and less foreign. 
&gt; &gt; Given
&gt; &gt; its repercussions if such an issue exists (RSA private keys can be
&gt; &gt; retrieved) would it make sense to have a bug fix release with that?
&gt; 
&gt; You're absolutely right that release is overdue, we've been talking
&gt; about it since September at least.
&gt; I haven't checked carefully, but I think the main missing piece is
&gt; documentation for the new functions (I have a patch from you 
&gt; including
&gt; some docs, but I haven't gotten to that yet, and a bunch of new
&gt; functions have been added since then).
&gt; Anything else?

The SHA3 fix, but I think that's already in.

regards,
Nikos


</body></email></emails>