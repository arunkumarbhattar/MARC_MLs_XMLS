<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20021002204049</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-10-02 20:40:49-0400</timestampReceived><subject>Ping</subject><body>

Foo?

</body></email><email><emailId>20021002223856</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-10-02 22:38:56-0400</timestampReceived><subject>ANNOUNCE: Nettle-1.6</subject><body>

NEWS for the 1.6 release

	Optimized assembler implementations of aes, for sparc and x86.

	The aes interface has changed slightly. The function
	aes_set_key is no more. Instead one has to use
	aes_set_encrypt_key or aes_set_decrypt_key. Sorry about that. 

	New example programs, rsa-keygen, rsa-sign and rsa-verify,
	located in the examples directory.

	New configure option --enable-shared, which builds a shared
	library. Not tested.

	New experimental features, including sexp parsing and
	formatting, and changes to base64 encoding and decoding. The
	interfaces to these functions are subject to change, and are
	documented only in the source code.

I'll appreciate comments on the new things, in particular the
--enable-shared option, and the new sexp functions, which probably can
be simplified a little.

I've also created a nettle mailing list, see &lt;URL:
http://lists.lysator.liu.se/mailman/listinfo/nettle-bugs&gt; for
subscription information. I expect it to be a low-volume list.
Further announcements of nettle releases will be sent to that list,
and probably not to the lsh or the gcrypt lists.

nettle-1.6 is available at

  http://www.lysator.liu.se/~nisse/archive
  ftp://ftp.lysator.liu.se/pub/security/lsh

Happy hacking,
/Niels MÃ¶ller

</body></email><email><emailId>20021019121726</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-10-19 12:17:26-0400</timestampReceived><subject>base64</subject><body>

I've reorganized the base64 code again. The goal has been to support
*both* simple "one-shot" encoding, and streamed operation. The
declarations from the new base64.h are included below. For the actual
code, see the cvs repository
(http://cvs.lysator.liu.se/viewcvs/viewcvs.cgi/lsh/src/nettle/?cvsroot=lsh).

Comments are welcome.
/Niels


#define BASE64_BINARY_BLOCK_SIZE 3
#define BASE64_TEXT_BLOCK_SIZE 4

/* Base64 encoding */

/* Maximum length of output for base64_encode_update. NOTE: Doesn't
 * include any padding that base64_encode_final may add. */
/* We have at most 4 buffered bits, and a total of (4 + length * 8) bits. */
#define BASE64_ENCODE_LENGTH(length) (((length) * 8 + 4)/6)

/* Maximum lengbth of output generated by base64_encode_final. */
#define BASE64_ENCODE_FINAL_LENGTH 3

/* Exact length of output generated by base64_encode_raw, including
 * padding. */
#define BASE64_ENCODE_RAW_LENGTH(length) ((((length) + 2)/3)*4)

struct base64_encode_ctx
{
  unsigned word;   /* Leftover bits */
  unsigned bits;  /* Number of bits, always 0, 2, or 4. */
};

void
base64_encode_init(struct base64_encode_ctx *ctx);

/* Encodes a single byte. Returns amoutn of output (always 1 or 2). */
unsigned
base64_encode_single(struct base64_encode_ctx *ctx,
		     uint8_t *dst,
		     uint8_t src);

/* Returns the number of output characters. DST should point to an
 * area of size at least BASE64_ENCODE_LENGTH(length). */
unsigned
base64_encode_update(struct base64_encode_ctx *ctx,
		     uint8_t *dst,
		     unsigned length,
		     const uint8_t *src);

/* DST should point to an area of size at least
 * BASE64_ENCODE_FINAL_SIZE */
unsigned
base64_encode_final(struct base64_encode_ctx *ctx,
		    uint8_t *dst);

/* Lower level functions */

/* Encodes a string in one go, including any padding at the end.
 * Generates exactly BASE64_ENCODE_RAW_LENGTH(length) bytes of output.
 * Supports overlapped operation, if src &lt;= dst. */
void
base64_encode_raw(uint8_t *dst, unsigned length, const uint8_t *src);

void
base64_encode_group(uint8_t *dst, uint32_t group);


/* Base64 decoding */

/* Maximum length of output for base64_decode_update. */
/* We have at most 6 buffered bits, and a total of (length + 1) * 6 bits. */
#define BASE64_DECODE_LENGTH(length) ((((length) + 1) * 6) / 8)

struct base64_decode_ctx
{
  enum
    {
      BASE64_DECODE_OK,
      BASE64_DECODE_ERROR,
      BASE64_DECODE_END
    } status; 
  unsigned word;   /* Leftover bits */
  unsigned bits;   /* Number buffered bits */
};

void
base64_decode_init(struct base64_decode_ctx *ctx);

/* Returns the number of output characters. DST should point to an
 * area of size at least BASE64_DECODE_LENGTH(length). */
unsigned
base64_decode_update(struct base64_decode_ctx *ctx,
		     uint8_t *dst,
		     unsigned length,
		     const uint8_t *src);

/* Returns 1 on success. */
int
base64_decode_status(struct base64_decode_ctx *ctx);

#endif /* NETTLE_BASE64_H_INCLUDED */

</body></email><email><emailId>20021101073726</emailId><senderName>James Ralston</senderName><senderEmail>qralston+ml.nettle-bugs@andrew.cmu.edu</senderEmail><timestampReceived>2002-11-01 07:37:26-0400</timestampReceived><subject>problems with --enable-shared</subject><body>

I tried building nettle 1.6 with --enabled-shared on Red Hat Linux 8.0
on x86.

The command to build the shared library doesn't get the soname or the
filename correct:

    gcc  -shared -Wl,-soname=libnettle.so. aes_p.o [...] nettle-openssl_p.o -o \
libnettle.so

The attached patch fixes the problem.

The example programs are built like this:

    [...] ../libnettle.a -lcrypto -lgmp

In order to test the shared libraries, that needs to be something like
this:

    [...] -L.. -lnettle -lcrypto -lgmp

That will work even if a shared library wasn't build.  The example
programs will need to be invoked with LD_LIBRARY_PATH set
appropriately.

However, when I tested linking one of the example programs with the
shared library, it failed:

gcc  -I.. -g -O2 -ggdb3 -Wall -W   -Wmissing-prototypes -Wmissing-declarations \
-Wstrict-prototypes   -Wpointer-arith -Wbad-function-cast -Wnested-externs   -o \
                rsa-keygen  rsa-keygen.o io.o -L.. -lnettle -lcrypto -lgmp
../libnettle.so: undefined reference to `memxor'
collect2: ld returned 1 exit status

I haven't had time to look at this one any further...

Regards,

-- 
James Ralston, Information Technology
Software Engineering Institute
Carnegie Mellon University, Pittsburgh, PA, USA


["nettle-1.6-shared.patch" (TEXT/PLAIN)]

--- nettle-1.6/Makefile.in.shared	2002-10-02 15:40:08.000000000 -0400
+++ nettle-1.6/Makefile.in	2002-11-01 02:26:35.000000000 -0500
@@ -74,6 +74,8 @@
 RANLIB = @RANLIB@
 RSA_EXAMPLES = @RSA_EXAMPLES@
 SHLIBCFLAGS = @SHLIBCFLAGS@
+SHLIBMAJOR = @SHLIBMAJOR@
+SHLIBMINOR = @SHLIBMINOR@
 SHLIBFILE = @SHLIBFILE@
 SHLIBFORLINK = @SHLIBFORLINK@
 SHLIBINSTALL = @SHLIBINSTALL@
--- nettle-1.6/configure.ac.shared	2002-10-02 12:33:39.000000000 -0400
+++ nettle-1.6/configure.ac	2002-11-01 02:25:44.000000000 -0500
@@ -92,8 +92,8 @@
 
 SHLIBCFLAGS="-fpic"
 SHLIBFORLINK=libnettle.so
-SHLIBSONAME='$(SHLIBFORLINK).$(MAJOR)'
-SHLIBFILE='$(SHLIBSONAME).$(MINOR)'
+SHLIBSONAME='$(SHLIBFORLINK).$(SHLIBMAJOR)'
+SHLIBFILE='$(SHLIBSONAME).$(SHLIBMINOR)'
 SHLIBLINK='$(CC) $(LDFLAGS) -shared -Wl,-soname=$(SHLIBSONAME)'
 
 echo "enable_shared: $enable_shared"
@@ -107,6 +107,8 @@
 fi
 
 AC_SUBST(SHLIBCFLAGS)
+AC_SUBST(SHLIBMAJOR)
+AC_SUBST(SHLIBMINOR)
 AC_SUBST(SHLIBFORLINK)
 AC_SUBST(SHLIBSONAME)
 AC_SUBST(SHLIBFILE)


</body></email><email><emailId>20021217034019</emailId><senderName>James Ralston</senderName><senderEmail>qralston+ml.nettle-bugs@andrew.cmu.edu</senderEmail><timestampReceived>2002-12-17 03:40:19-0400</timestampReceived><subject>problems with --disable-public-key</subject><body>


--On Friday, December 13, 2002 09:44:49 +0100 Niels M=F6ller
&lt;nisse@lysator.liu.se&gt; wrote:
&gt; If making nettle fails when there's no GMP available, that's
&gt; definitely a bug.  Please provide error messages, version info etc.

See the attached files.

I'm not what type of fix to suggest--multiple files break if GMP
and/or public key support isn't available...

Regards,
James

["config.log.gz" (application/x-gzip)]
["configure.log.gz" (application/x-gzip)]
["make.log.gz" (application/x-gzip)]

</body></email><email><emailId>20021101103226</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-11-01 10:32:26-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:

&gt; I tried building nettle 1.6 with --enabled-shared on Red Hat Linux 8.0
&gt; on x86.

Thanks for testing this.

&gt; The command to build the shared library doesn't get the soname or the
&gt; filename correct:
&gt; 
&gt;     gcc  -shared -Wl,-soname=libnettle.so. aes_p.o [...] nettle-openssl_p.o -o libnettle.so
&gt; 
&gt; The attached patch fixes the problem.

I've applied the patch.

There seems to be one more problem with that command line:
nettle-openssl_p.o should probably not be included in the shared
library. It is used only for benchmarking against openssl, and
including it in the shared library will make the entire library depend
on openssl, which isn't good. Perhaps the file should simply be moved
out of the library and down into the examples directory. The same will
apply whenever I add similar glue code for libgcrypt.

&gt; The example programs are built like this:
&gt; 
&gt;     [...] ../libnettle.a -lcrypto -lgmp
&gt; 
&gt; In order to test the shared libraries, that needs to be something like
&gt; this:
&gt; 
&gt;     [...] -L.. -lnettle -lcrypto -lgmp

Fixed.

&gt; That will work even if a shared library wasn't build.  The example
&gt; programs will need to be invoked with LD_LIBRARY_PATH set
&gt; appropriately.

And I added a line to the testsuite and examples Makefiles to set
LD_LIBRARY_PATH when running the tests. Actually, I set it to
../.lib, and install a link from .lib/libnettle.so.0 to libnettle.so.

&gt; ../libnettle.so: undefined reference to `memxor'

memxor should be included in the library, via LIBOBJS, but that didn't
happen. Fixed.

Can you try getting the current nettle from cvs and check if that
works? It should be something like

  cvs -d :pserver:anonymous@cvs.lysator.liu.se:/cvsroot/lsh co nettle
  cd nettle
  ./.bootstrap &amp;&amp; configure --enable-shared &amp;&amp; make &amp;&amp; make check

(You may not want to install it, I won't promise that the current
nettle is compatible with 1.6 nor with the next released version).

Thanks,
/Niels

</body></email><email><emailId>20021108001207</emailId><senderName>James Ralston</senderName><senderEmail>qralston+ml.nettle-bugs@andrew.cmu.edu</senderEmail><timestampReceived>2002-11-08 00:12:07-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

On 2002-11-01 (Friday) at 11:32:26+0100 Niels MÃ¶ller &lt;nisse@lysator.liu.se&gt; wrote:

&gt; Thanks for testing this.

Not a problem; thanks for all of your work on lsh/nettle.

&gt; There seems to be one more problem with that command line:
&gt; nettle-openssl_p.o should probably not be included in the shared
&gt; library.  It is used only for benchmarking against openssl, and
&gt; including it in the shared library will make the entire library
&gt; depend on openssl, which isn't good.

Agreed.  (I was a bit surprised when I noticed the dependency, but I
wasn't sure why it was there.)

&gt; Perhaps the file should simply be moved out of the library and down
&gt; into the examples directory.  The same will apply whenever I add
&gt; similar glue code for libgcrypt.

That seems like a reasonable solution.

&gt; Can you try getting the current nettle from cvs and check if that
&gt; works?

I found one problem (a simple variable renaming error); the enclosed
patch fixes it.

With the patch, as of today, current CVS works fine (with both
--enabled-shared and --disabled-shared) on Red Hat Linux 8.0 (x86
architecture; gcc 3.2).

I also tried to compile on Sun Solaris 8 (sparc; SunPro 5.2
2000/09/11), but the SunPro CC doesn't ISO C99 non-constant
initializers:

source='des-compat.c' object='des-compat.o' libtool=no \
depfile='.deps/des-compat.Po' tmpdepfile='.deps/des-compat.TPo' \
depmode=none /bin/bash ./depcomp \
/opt/SUNWspro/bin/cc -DHAVE_CONFIG_H -I. -I. -I.      -g -c `test -f 'des-compat.c' \
|| echo './'`des-compat.c "des-compat.c", line 64: non-constant initializer: op \
"NAME" "des-compat.c", line 64: non-constant initializer: op "NAME"
"des-compat.c", line 64: non-constant initializer: op "NAME"
"des-compat.c", line 145: non-constant initializer: op "NAME"
"des-compat.c", line 145: non-constant initializer: op "NAME"
"des-compat.c", line 145: non-constant initializer: op "NAME"
cc: acomp failed for des-compat.c
*** Error code 2
make: Fatal error: Command failed for target `des-compat.o'
Current working directory /tmp/qralston/nettle.CVS-2002-11-07
*** Error code 1
make: Fatal error: Command failed for target `all-recursive'
Current working directory /tmp/qralston/nettle.CVS-2002-11-07
*** Error code 1
make: Fatal error: Command failed for target `all'

If compatibility with SunPro CC is desired, I'll go ahead and
construct a patch to work around its limitation; let me know.

&gt; (You may not want to install it, I won't promise that the current
&gt; nettle is compatible with 1.6 nor with the next released version).

Thanks for the warning.  (I don't plan to use it in production; I was
mostly just interested in testing it out.)

Regards,
James


["nettle.CVS-2002-11-07-dsa-bits.patch" (text/plain)]

--- nettle.CVS-2002-11-07/testsuite/testutils.c.dsa-bits	2002-10-30 15:59:04.000000000 -0500
+++ nettle.CVS-2002-11-07/testsuite/testutils.c	2002-11-07 18:30:13.000000000 -0500
@@ -529,7 +529,7 @@
   mpz_init(t);
 
   ASSERT(mpz_sizeinbase(pub-&gt;q, 2) == 160);
-  ASSERT(mpz_sizeinbase(pub-&gt;p, 2) &gt;= DSA_MINIMUM_BITS);
+  ASSERT(mpz_sizeinbase(pub-&gt;p, 2) &gt;= DSA_MIN_P_BITS);
   
   ASSERT(mpz_probab_prime_p(pub-&gt;p, 10));
 


</body></email><email><emailId>20021212075015</emailId><senderName>James Ralston</senderName><senderEmail>qralston+ml.nettle-bugs@andrew.cmu.edu</senderEmail><timestampReceived>2002-12-12 07:50:15-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

--On Friday, November 08, 2002 10:12:37 +0100 Niels MÃ¶ller
nisse@lysator.liu.se&gt; wrote:

&gt; James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:
&gt; 
&gt; &gt; I also tried to compile on Sun Solaris 8 (sparc; SunPro 5.2
&gt; &gt; 2000/09/11), but the SunPro CC doesn't ISO C99 non-constant
&gt; &gt; initializers:
&gt; 
&gt; Fixed now, I hope. It's annoying that some compilers handle only
&gt; constant aggregate initializers, but I guess we just have to live
&gt; with that.  Nettle is intended to be portable to any system with an
&gt; ANSI-C compiler.

Well, I gave it another shot on Solaris 8, using a fresh CVS checkout
that I grabbed at 2002-12-12T02:25-0500.  AFAICT, the non-constant
aggregate initializers are no longer a problem.

Is it your intent to have nettle require GNU MP?  I don't have it
installed on this particular Solaris box; as a result, anything that
includes rsa.h fails to compile, because rsa.h unconditionally
includes &lt;gmp.h&gt;.

Regards,
James


</body></email><email><emailId>20021212083107</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-12-12 08:31:07-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:

&gt; Is it your intent to have nettle require GNU MP?

The idea is that the publickey algorithms require GMP. So if you
compile on a system without GNU MP that more or less implies
--disable-public-key. And then the rsa functions are unavailable.

&gt; I don't have it installed on this particular Solaris box; as a
&gt; result, anything that includes rsa.h fails to compile, because rsa.h
&gt; unconditionally includes &lt;gmp.h&gt;.

If it avoided the inclusion of "gmp.h", and the program *uses* some
rsa function, then it would just fail at link time instead. GMP is
needed for rsa.

There is actually one unfortunate sideeffect of the gmp dependency,
when using the shared library: If you write a program that uses only
the symmetric functions of nettle (i.e. no rsa), and you link
dynamically, and nettle was compiled with public key support, then you
need to link with GMP as well, even if it won't be used. With static
linking, only object files that are referred to are dragged into the
executable, so if one doesn't call any (funcction in some) object file
that in turn calls GMP, there's no need to link with GMP. Dynamic
linking doesn't look at individual object files, it's an
all-or-nothing thing.

Suggestions on how to improve this situation is appreciated.

Regards,
/Niels

</body></email><email><emailId>20021213080853</emailId><senderName>James Ralston</senderName><senderEmail>qralston+ml.nettle-bugs@andrew.cmu.edu</senderEmail><timestampReceived>2002-12-13 08:08:53-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

--On Thursday, December 12, 2002 09:31:07 +0100 Niels M=F6ller
&lt;nisse@lysator.liu.se&gt; wrote:

&gt; If it avoided the inclusion of "gmp.h", and the program *uses* some
&gt; rsa function, then it would just fail at link time instead.  GMP is
&gt; needed for rsa.

But --disable-public-key doesn't make it so that GMP isn't needed, and
configure won't abort if it fails to detect GMP.

I don't have any strong opinions on whether GMP is needed.  But if it
*is* needed, then configure should die if it can't find GMP, rather
than giving the builder the illusion that typing "make" can actually
succeed.  ;)

&gt; If you write a program that uses only the symmetric functions of
&gt; nettle (i.e. no rsa), and you link dynamically, and nettle was
&gt; compiled with public key support, then you need to link with GMP as
&gt; well, even if it won't be used.  With static linking, only object
&gt; files that are referred to are dragged into the executable, so if
&gt; one doesn't call any (function in some) object file that in turn
&gt; calls GMP, there's no need to link with GMP.  Dynamic linking
&gt; doesn't look at individual object files, it's an all-or-nothing
&gt; thing.

True; this is the price one pays for the advantages gained by dynamic
linking.

&gt; Suggestions on how to improve this situation is appreciated.

Alas, I know of no easy solution.

The general "solution" (and I use that term lightly) for this problem
is to isolate the functions that have dependencies on other libraries
in another (separate) library; e.g., libnettle and libnettle_pubkey.
But in the vast majority of cases, this "solution" is far more trouble
than it's worth.

On the bright side, modern packaging systems (RPM, .deb, et. al.) tend
to push the responsibility of dealing with stacked dynamic linking
dependencies onto the packager, and away from end users of the
package.

James


</body></email><email><emailId>20021213084449</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-12-13 08:44:49-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:

&gt; I don't have any strong opinions on whether GMP is needed.  But if it
&gt; *is* needed, then configure should die if it can't find GMP, rather
&gt; than giving the builder the illusion that typing "make" can actually
&gt; succeed.  ;)

Ah, it seems I misunderstood you, I thought "anything that includes
rsa.h fails to compile, because rsa.h unconditionally includes
&lt;gmp.h&gt;" referred to some other program *using* nettle, not files that
are part of nettle.

If making nettle fails when there's no GMP available, that's
definitely a bug. Please provide error messages, version info etc.

The intended behaviour in this case is to build a nettle library
without any public-key support.

Regards,
/Niels

</body></email><email><emailId>20021230223736</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-12-30 22:37:36-0400</timestampReceived><subject>Re: problems with --disable-public-key</subject><body>

James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:

&gt; I'm not what type of fix to suggest--multiple files break if GMP
&gt; and/or public key support isn't available...

I've now checked in the following changes,

2002-12-30  Niels MÃ¶ller  &lt;nisse@cuckoo.hack.org&gt;

	* testsuite/rsa2sexp-test.c: Don't include rsa.h (done by
	testutils.h, if enabled).
	* testsuite/sexp2rsa-test.c: Likewise.

	* rsa-decrypt.c: Make compilation conditional on WITH_PUBLIC_KEY.
	* rsa-encrypt.c: Likewise.
	* rsa-compat.c: Likewise.

Please try the cvs version and see if it works better. (For now, I've
only tried with --disable-public-key, and checking that no files try
including rsa.h or dsa.h. I haven't actually tried uninstalling gmp).

Thanks for the report, and a happy new year,
/Niels

</body></email><email><emailId>20021108091237</emailId><senderName>Niels =?iso-8859-1?q?M=F6ller?=</senderName><senderEmail>nisse@lysator.liu.se</senderEmail><timestampReceived>2002-11-08 09:12:37-0400</timestampReceived><subject>Re: problems with --enable-shared</subject><body>

James Ralston &lt;qralston+ml.nettle-bugs@andrew.cmu.edu&gt; writes:

&gt; On 2002-11-01 (Friday) at 11:32:26+0100 Niels MÃ¶ller &lt;nisse@lysator.liu.se&gt; wrote:
&gt; &gt; ... about nettle-openssl.c ...

&gt; &gt; Perhaps the file should simply be moved out of the library and down
&gt; &gt; into the examples directory.  The same will apply whenever I add
&gt; &gt; similar glue code for libgcrypt.
&gt; 
&gt; That seems like a reasonable solution.

Moved now.

&gt; I found one problem (a simple variable renaming error); the enclosed
&gt; patch fixes it.

Fixed. For some reason my testutils.c file wasn't recompiled since I
made that change.

&gt; I also tried to compile on Sun Solaris 8 (sparc; SunPro 5.2
&gt; 2000/09/11), but the SunPro CC doesn't ISO C99 non-constant
&gt; initializers:

Fixed now, I hope. It's annoying that some compilers handle only
constant aggregate initializers, but I guess we just have to live with
that. Nettle is intended to be portable to any system with an ANSI-C
compiler.

Regards,
/Niels

</body></email></emails>