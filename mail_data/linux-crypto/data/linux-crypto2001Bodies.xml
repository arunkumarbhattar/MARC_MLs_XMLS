<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20010607075052</emailId><senderName>"Louis Lam"</senderName><senderEmail>lsauchun@hotmail.com</senderEmail><timestampReceived>2001-06-07 07:50:52-0400</timestampReceived><subject>modularization of ppdd encryption module.</subject><body>

Hi,

PPDD driver can be compiled as a kernel module and loaded on demand. The 
bfcrypt however is still in the kernel.

Is is necessary to keep the algorithm compiled with the kernel? What are the 
complications if the algorithm were to be compiled with the ppdd driver 
itself?

Is there a difference between driver code that is compiled with the kernel 
or as a separate module? If it is compiled as a separate module, can it be 
swapped from memory?

Thanks in Advance

Louis Lam
_________________________________________________________________________
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010616141509</emailId><senderName>Pedro Diaz Jimenez</senderName><senderEmail>pdiaz88@terra.es</senderEmail><timestampReceived>2001-06-16 14:15:09-0400</timestampReceived><subject>Kernel International patch for 2.2.19?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi all,

Does anyone knows if there is avaible such patch?. If not, could I use 2.2.18?

thanks!

Pedro 
- -- 

/*
 * Pedro Diaz Jimenez
 * pdiaz88@terra.es 
 * pdiaz@acm.asoc.fi.upm.es
 *
 * Wanna see how 100000! looks like?:
 * http://acm.asoc.fi.upm.es/~pdiaz/fact_100.000
 * 
 * La sabiduria me persigue, pero yo soy mas rapido
 * 
 * "Las artes marciales son parte de una filosof√≠a,
 *  no deben ser consideradas un arma. Y por eso,
 *  recuerda: No hay nada como un buen revolver"
 *    Les Luthiers, Iniciacion a las Artes Marciales
 *
 */

Random quote:
- -------------

Are you sure the back door is locked?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.4 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7K4WMnu53feEYxlERAoOPAJwKBUv1fq/G+3tHlnhSDenu4FNu1QCfT4eC
uXVSCU1cAJ0p9YrTpZgoqu8=
=A1gI
-----END PGP SIGNATURE-----

["my pgp key" (application/pgp-keys)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010104081936</emailId><senderName>Pierre PEIFFER</senderName><senderEmail>ppe@sxb.bsf.alcatel.fr</senderEmail><timestampReceived>2001-01-04 08:19:36-0400</timestampReceived><subject>Problem with DES</subject><body>

Hello everybody and happy new year !

    I have problem with DES, I use kernel patch 2.2.17.10 with kernel
2.2.13 and I have the following problem:
    losetup return "ioctl: LOOP_SET_STATUS: Invalid argument".

    Since rijndael encryption works very well and since a message "Use
of DES is deprecated", I was worrying if DES is still well supported and
maintained ?

    If yes (as I supposed), let me give you more info. I have everything
about loopback file and cryptography set as kernel modules(des,
loop_gen, cryptoapi, and loop). And when running losetup, all this
modules are well inserted, then I supposed my /etc/conf.module is right.

    I just have a look in /var/log/message and I have an error
"modprobe: Can't locate module loop-xfer-2", but I supposed this is not
a real error and has something to do with the cipher number of DES,
right ? (And then in /var/log/messages, I have a message such as
"Registered des (2)...")

    Then I have a look in the kernel code in order to trace the problem.
And I first see than in loop.c, in function loop_set_status, it is
"loop_init_xfer" which return -EINVAL

    In this function, we go in function in loop_gen_init2 (from
loop_gen.c) which call "des_set_key" which return -1. And this is the
problem, but I can't say why it returns -1.

    Has someone any idea ? Because I am a little bit "wedged", since I
haven't more idea...

    Many thank's  to everybody who can help me and to all other for
having read my mail !

    Pierre


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010208024834</emailId><senderName>Pascal Brisset</senderName><senderEmail>pascal.brisset@wanadoo.fr</senderEmail><timestampReceived>2001-02-08 02:48:34-0400</timestampReceived><subject>Re: 2.4.1-ac5 - The loopback hang saga continues (not me ?)</subject><body>

FYI following hints from the linux-crypto mailing-list archives, I am
using the following configuration :

linux-2.4.0
patch-int-2.4.0.3
http://www.kernel.org/pub/linux/kernel/people/axboe/patches/2.4.0/loop-1.gz
http://www.kernel.org/pub/linux/kernel/people/axboe/patches/2.4.0/loop-bdev-inc-1.gz
util-linux-2.10o
Documentation/crypto/util-linux-2.10o.patch

I setup an encrypted 2097152000 byte loopback partition and moved
800MB of data there, including a 90MB file.

My only problems are:
- rc.d/init.d/S01reboot sometimes fails to unmount partitions with
  loop files on them (this already happened with 2.2.17).
- losetup after losetup -d sometimes fails.

-- Pascal


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010307124230</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-07 12:42:30-0400</timestampReceived><subject>what is this ?</subject><body>

Hi !

what is cipher-18 ?

all works fine but i get a error msg : cant locate module cipher-18, what do
i have forgotten ?)
Kernel 2.2.18


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010402181715</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-04-02 18:17:15-0400</timestampReceived><subject>Re: ...unofficial 2.4.3 int patch...</subject><body>

On Sat, Mar 31, 2001 at 07:12:10PM +0200, Herbert Valerio Riedel wrote:
&gt; hello,
&gt; 
&gt; ...since I was quite bored, I've put up a patch, which should apply
&gt; cleanly to the 2.4.3final linux kernel source...
&gt; 
&gt; ..this patch also contains Christoph's cleanups that went over this list
&gt; some time ago....
&gt; 
&gt; I've tried to fix the blowfish cipher bug, by checking if the keysize
&gt; is among the supported ones exported through /proc/crypto/blowfish*
&gt; 

Thanks for this fix.  

I've put out a 2.4.3.1 with the above changes, as well as an updated
util-linux patch.  As some of you may know, the loopback device code
in linux 2.4.1 and 2.4.2 was buggy.  Version 2.4.3 includes fixes from
Jens Axboe which, to my knowledge, has  eliminated all known bugs.
Because of the bugs in 2.4.1 and 2.4.2, there were no kerneli releases
for those kernels.  

The ChangeLog for 2.4.3.1 is as follows:

2001-04-02 Alexander Kjeldaas &lt;astor@fast.no&gt;

        * International kernel patch 2.4.3.1 released.

2001-03-31 Herbert Valerio Riedel &lt;hvr@gnu.org&gt;

        * Added keylength checks in blowfish_set_key.

2001-03-13 Sebastian Klemke &lt;packet@teenix.int.convergence.de&gt;

        * Updated util-linux patch to 2.11a/b.

2001-02-13 Christoph Hellwig &lt;hch@caldera.de&gt;

        * Moved all initialization to the newstyle module_{init,exit}
        version. Removed one proc support function from cryptoapi.c that
        now exists in 2.2.18.

2001-??-?? Martin Aumuel &lt;lists@reserv.at&gt;
        
        * gen-cbc.h decrypt didn't honour the atomic flag.



As usual, this patch is available from:

ftp://ftp.kernel.org/pub/linux/kernel/crypto/

and mirrors.

astor


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010502234840</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-05-02 23:48:40-0400</timestampReceived><subject>2.4.x crypto incompatible with 2.2.x crypto</subject><body>

Anyone determined yet why 2.4.x blowfish loopback crypto can't read 2.2.x
blowfish loopback crypto?

Is it a bug with the IV or a bug with keysize or what?

(I'm using CONFIG_BLK_DEV_LOOP_USE_REL_BLOCK on 2.2.x, so that's not the
problem)

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010402185052</emailId><senderName>David Lambert</senderName><senderEmail>dave_lambert@fbcc.com</senderEmail><timestampReceived>2001-04-02 18:50:52-0400</timestampReceived><subject>Re: ...unofficial 2.4.3 int patch...</subject><body>

Thanks for all the hard work in getting to this point for 2.4.3. I have a 
question regarding backward compatibility of the utils. Are the 2.4.3 utils 
patches suitable for mount on 2.2.18 systems? I ask this because my 
development system is a dual boot 2.2.18/2.4.x right now.

Thanks again,

David Lambert

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010402201531</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-04-02 20:15:31-0400</timestampReceived><subject>Re: ...unofficial 2.4.3 int patch...</subject><body>

On Mon, Apr 02, 2001 at 01:50:52PM -0500, David Lambert wrote:
&gt; Thanks for all the hard work in getting to this point for 2.4.3. I have a 
&gt; question regarding backward compatibility of the utils. Are the 2.4.3 utils 
&gt; patches suitable for mount on 2.2.18 systems? I ask this because my 
&gt; development system is a dual boot 2.2.18/2.4.x right now.
&gt; 

The patch is supposed to be compatible.  To accomplish compatibility,
the patch first tries to pass new-style arguments to the ioctl.  When
this fails, it tries to pass old-style arguments.

astor


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010404035753</emailId><senderName>Jon Masters</senderName><senderEmail>jonathan@jonmasters.org</senderEmail><timestampReceived>2001-04-04 03:57:53-0400</timestampReceived><subject>Re: ...unofficial 2.4.3 int patch...</subject><body>

Hi,
	I have applied the kerneli 2.4.3.1 patch to a clean 2.4.3 source
without trouble and have built a patched util-linux however attempting
to run losetup as:

losetup-crypto -e rc6 /dev/loop0 /dev/hd&lt;drive number&gt;

results only in either a seg fault or non fatal oops but the loop device
used cannot be used again until a reboot.

Here's part of a trace:

(Line numbers added obviously)

---begin---
0	open("/dev/hdg6", O_RDWR|0x8000)        = 3
1	open("/dev/loop1", O_RDWR|0x8000)       = 4
2	mlockall(0x3, 0x4)                      = 0
3	ioctl(4, LOOP_SET_FD, 0x3)              = -1 ENOSYS (Function
	not implemented)
4	ioctl(4, LOOP_SET_FD, 0x3)              = 0
5	ioctl(4, LOOP_SET_STATUS &lt;unfinished ...&gt;
6	+++ killed by SIGSEGV +++
---end---

Line 3 would seem to indicate that I am doing something wrong.

Has anyone else had problems? If not can people please suggest things
for me to try in order to help sort this out...

This patched losetup also seems to work on 2.2.18 with serpent. I wish
to use rc6 however no option appears in that box's kernel config for
this - although losetup doesn't complain about a lack of rc6 until after
it has requested a password.

I'm afraid that I was using a much older kernel for a lot of crypto
until recently and then was unable to use crypto at all for a while on
my main desktop box so a lot of things have changed since I last looked
at this - I apologise for not being up to speed on what's happening.

--jcm

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010104092150</emailId><senderName>Pierre PEIFFER</senderName><senderEmail>ppe@sxb.bsf.alcatel.fr</senderEmail><timestampReceived>2001-01-04 09:21:50-0400</timestampReceived><subject>Re: Problem with DES</subject><body>

Pierre PEIFFER wrote:

&gt; Hello everybody and happy new year !
&gt;
&gt;     I have problem with DES, I use kernel patch 2.2.17.10 with kernel
&gt; 2.2.13 and I have the following problem:
&gt;     losetup return "ioctl: LOOP_SET_STATUS: Invalid argument".
&gt;
&gt;     Since rijndael encryption works very well and since a message "Use
&gt; of DES is deprecated", I was worrying if DES is still well supported and
&gt; maintained ?
&gt;
&gt;     If yes (as I supposed), let me give you more info. I have everything
&gt; about loopback file and cryptography set as kernel modules(des,
&gt; loop_gen, cryptoapi, and loop). And when running losetup, all this
&gt; modules are well inserted, then I supposed my /etc/conf.module is right.
&gt;
&gt;     I just have a look in /var/log/message and I have an error
&gt; "modprobe: Can't locate module loop-xfer-2", but I supposed this is not
&gt; a real error and has something to do with the cipher number of DES,
&gt; right ? (And then in /var/log/messages, I have a message such as
&gt; "Registered des (2)...")
&gt;
&gt;     Then I have a look in the kernel code in order to trace the problem.
&gt; And I first see than in loop.c, in function loop_set_status, it is
&gt; "loop_init_xfer" which return -EINVAL
&gt;
&gt;     In this function, we go in function in loop_gen_init2 (from
&gt; loop_gen.c) which call "des_set_key" which return -1. And this is the
&gt; problem, but I can't say why it returns -1.

I have more info, it returns -1 because of a "bad parity in key". What does
it mean ? Is there a constraint on the key or the "init" value given to
losetup ? Hummm, I'm a little bit lost, I don't understand...

&gt;
&gt;
&gt;     Has someone any idea ? Because I am a little bit "wedged", since I
&gt; haven't more idea...
&gt;
&gt;     Many thank's  to everybody who can help me and to all other for
&gt; having read my mail !
&gt;
&gt;     Pierre
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010618203154</emailId><senderName>Andrea Mazzoleni</senderName><senderEmail>am@mediacom.it</senderEmail><timestampReceived>2001-06-18 20:31:54-0400</timestampReceived><subject>Question regarding the linux loopAES disk encryption.</subject><body>

I have a doubt regarding the use of the SHA hash functions 
in the loopAES implementation.

The thing that look strange to me is that the passphares is always hashed 
with the a double sized SHA.
For example for the AES-256, the passphrase is hashed with the SHA-512, and
the resulting digest is truncated to 256 bit.

Why isn't used directly a hash with the correct size ?

If the reason is the `birthday' attack, I don't understand how in this
special case (hashing a passphrase to get a key) a birthday attack may
reduce the security. 
And also when I truncate the result of the SHA-512 to 256 bit I 
have effectively created a new hash algorithm of 256 bit. And a birthday
attack like the original SHA-256 should be possible.

-- 
Andrea Mazzoleni &lt;am@mediacom.it&gt;
935A 2D3C 5C70 BCD6 CB0C  ED89 7C19 4321 6340 3F6D

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010619152757</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-06-19 15:27:57-0400</timestampReceived><subject>Re: Question regarding the linux loopAES disk encryption.</subject><body>

Andrea Mazzoleni wrote:
&gt; I have a doubt regarding the use of the SHA hash functions
&gt; in the loopAES implementation.
&gt; 
&gt; The thing that look strange to me is that the passphares is always hashed
&gt; with the a double sized SHA.
&gt; For example for the AES-256, the passphrase is hashed with the SHA-512, and
&gt; the resulting digest is truncated to 256 bit.
&gt; 
&gt; Why isn't used directly a hash with the correct size ?
&gt; 
&gt; If the reason is the `birthday' attack, I don't understand how in this
&gt; special case (hashing a passphrase to get a key) a birthday attack may
&gt; reduce the security.
&gt; And also when I truncate the result of the SHA-512 to 256 bit I
&gt; have effectively created a new hash algorithm of 256 bit. And a birthday
&gt; attack like the original SHA-256 should be possible.

Because SHA-512 provides only about 256 bits of security against collision
attacks. SHA-256 provides only about 128 bits. For more information:

    http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010626215123</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-06-26 21:51:23-0400</timestampReceived><subject>kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

Hello all,

does anyone around here know if kernel international patches will be available soon \
again? I realy miss those for 2.2.19, 2.4.4, 2.4.5. Alexander Kjeldaas used to read \
this mailing list, hope he is still around somewhere to answer?

Peter Holtland




------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010709233100</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 23:31:00-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu:

        Let us stay focused on bugs, and not latency issues. After all, I am
running a laptop with no other users (but me) on it, so performance is not
going to sway the bulk of crypto users whom are individuals unless the
performance hit is grossly unacceptable, obviously not if no one has
mentioned it yet.

        Are you arguing that my issuing an mkfs with the proper block size,
the I-patch would still be a time bomb?

        Well, I do hope that Mr. Riedel (nor Mr. Kjeldaas) is not ignoring
your work, and I do hope that you would be willing to help them integrate it
within if they were trying to do so.

        I am sure Mr. Riedel and Mr. Kjeldaas will respond soon, and I do
hope they are willing to accept your assistance in such an integration and
bug resolution process.

        Now on the issue of "fatware" as you note, I disagree predicated
more on a philosophical issue, that the integration of crypto into the
kernel will be cause for more people to leverage it across a greater number
of applications. I also do not "just want" loop aes I want it all. Crypto
for PPP, Crypto for logon passwords, Crypto for whatever.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:24 PM

-----Original Message-----
From: root@Misty.com [mailto:root@Misty.com]On Behalf Of Jari Ruusu
Sent: Monday, July 09, 2001 2:39 PM
To: stuart@bh90210.net
Cc: Dale Amon; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt;
&gt;         You keep claiming that the I-patch is broken, but in reality, it
is
&gt; only broken with regard to SMP users. I would venture to guess that you
are
&gt; speaking about a very minute community of users whom are thus attempting
to
&gt; use Crypto patches on SMP boxes, however I do appreciate your desire to
warn
&gt; that community of potential hazards.

Wrong. The block size thing is a time bomb. Just follow the links I posted
earlier. Non-re-entrant ciphers also means that cryptoapi kills the
scheduling latency of high priority realtime tasks on UP.

&gt;         Nevertheless, it does seem that you have almost a tone of
arrogance
&gt; or religious divergence to using the I-patch / crypto API. Mr. Riedel has
&gt; indicated on several occasions his desire to access and service the
"BROKEN"
&gt; (as you state) code sections in an effort to subvert the bugs you
proclaim.
&gt; Do you have some commercial interest in simply continuing to rant and rave
&gt; about these bugs, or you have a true desire to assist in a team effort to
&gt; effectuate a solution? Granted I appreciate that your free time is your
free
&gt; and you can do as you wish with it, but I am saddened by seeing several
&gt; technical experts having such trouble to work together.

If Mr. Riedel ignores stuff that I send to him, that can hardly be my fault.

And regarding assisting int. crypto patch development, Mr. Kjeldaas said
"no" to my improvements and fixes to int. crypto patch. So, I built a better
one.

I don't have any commercial intrests on loop-AES.

&gt;         My final suggestion and conclusion is that if you and Mr. Riedel
&gt; could work out your personal and philosophical differences and
cooperatively
&gt; work to resolve the I-patch issues you would be doing a grand service to a
&gt; fair community of people. Why not take the advantages of your AES Loop
&gt; software, and blend it into the I-patch while working to resolve current
&gt; I-patch issues as well. I personally will go so far as to say thank you
(in
&gt; advance) and well after you would complete such an effort.

See my previous comment.

Mr Tener, why don't you audit both loop-AES and int. crypto patch. You will
soon realize meaning of fatware, and that it just does not belong in kernel.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709233808</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@crosswinds.net</senderEmail><timestampReceived>2001-07-09 23:38:08-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Johannknecht, et al.: By having a website like
Stuart&gt; "kerneli.org", and having it linked up to kernel.org (an
Stuart&gt; official kernel site), people are getting a very powerful and
Stuart&gt; distinct message that the I-patch is in fact an official
Stuart&gt; release. That is why people see it how they do. If you do not
Stuart&gt; think there is an "official" crypto stuff kernel, go look at the
Stuart&gt; site. Anyone whom went to see it for the first time would a very
Stuart&gt; strong feeling its official, so I think your being a bit
Stuart&gt; obstinate to think otherwise.

Well, considering that they have the following text on the page...
,----
| The International Kernel Patch is not endorsed by Linus Torvalds and
| should therefore not be considered to be part of the official Linux kernel
| source.
`----

Granted, it is a couple pages down, and buried in some other text.
Perhaps they should make it more prominent.

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7SkBBZRhU33H9o38RAkjIAKDGrZQEGVlvjnx/lEMLrGbQ8xLPngCfXlvp
U47sBkYabMfE3u7s/L1N7O4=
=1Qk2
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709234502</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-09 23:45:02-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt; b) IV problem: well this can easily be worked around by issuing a mkfs
&gt; command specifying a block size which is conducive (4096 I think, or 512 I
&gt; forget which) to the I-patch

Fine if you use ext2. Other fs (iso9660) don't support variable block
size.

&gt; Oh my, look what happened, no more bugs! Can it be? Maybe the I-patch is not
&gt; broken!

Except that i-patch 2.4 can't read crypto writen by i-patch 2.2, and
nobody can quite seem to figure out why...

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709234945</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-09 23:49:45-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         Are you arguing that my issuing an mkfs with the proper block size,
&gt; the I-patch would still be a time bomb?

And your solution for fs with non variable block size is... ?

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000347</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:03:47-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Chan:

        Honestly, even though I know [now] that it is not an official patch,
I never learned that from the web site, and have never even see the line you
speak of, so I agree with you.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 5:02 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hubert Chan
Sent: Monday, July 09, 2001 4:38 PM
To: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Johannknecht, et al.: By having a website like
Stuart&gt; "kerneli.org", and having it linked up to kernel.org (an
Stuart&gt; official kernel site), people are getting a very powerful and
Stuart&gt; distinct message that the I-patch is in fact an official
Stuart&gt; release. That is why people see it how they do. If you do not
Stuart&gt; think there is an "official" crypto stuff kernel, go look at the
Stuart&gt; site. Anyone whom went to see it for the first time would a very
Stuart&gt; strong feeling its official, so I think your being a bit
Stuart&gt; obstinate to think otherwise.

Well, considering that they have the following text on the page...
,----
| The International Kernel Patch is not endorsed by Linus Torvalds and
| should therefore not be considered to be part of the official Linux kernel
| source.
`----

Granted, it is a couple pages down, and buried in some other text.
Perhaps they should make it more prominent.

- --
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7SkBBZRhU33H9o38RAkjIAKDGrZQEGVlvjnx/lEMLrGbQ8xLPngCfXlvp
U47sBkYabMfE3u7s/L1N7O4=
=1Qk2
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000549</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:05:49-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu:

	If IV was 512-byte based, how would this resolve the issue for CD-ROM
users?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 5:05 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Jari Ruusu
Sent: Monday, July 09, 2001 2:02 PM
To: Herbert Valerio Riedel
Cc: Dale Amon; IT3 Stuart B. Tener, USNR-R; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

Herbert Valerio Riedel wrote:
&gt; On Mon, 9 Jul 2001, Jari Ruusu wrote:
&gt; &gt; patch-int-2.4.6.bz2 available from HVR's web site is still the same time
&gt; &gt; bomb waiting to explode as patch-int-2.4.3.1.bz2.
&gt; &gt;
&gt; &gt; Have you actually audited that code?
&gt; &gt;
&gt; &gt; I have audited some of it. Conclusion: BROKEN
&gt;
&gt; ...do you mind sharing your thoughts with us? :-)
&gt; but please, don't tell me again, to give up on the crypto API... ;-)
&gt;
&gt; since I'm quite determined to fix all problems, it would be usefull to
&gt; have a definite list of them...
&gt;
&gt; btw, the non-reentrant part has been almost fixed... but it's not
&gt; released yet.
&gt;
&gt; if you are refering to the IV overflow, that's going to be addressed as
&gt; well rsn...
&gt;
&gt; as to the patch-int vs cryptoapi, the patch-int-2.4.6.bz2 actually nothing
&gt; more than a patch-int-2.4.3.1 applied against a 2.4.6...
&gt;
&gt; so they are both the same...

Just like I said, same time bomb.

Known problems, at this time:
1)  IV has be 512 byte based, each 512 byte chunk must be independent
2)  non-re-entrant ciphers
3)  Follow this thread, there is a patch:
    http://marc.theaimsgroup.com/?l=linux-kernel&amp;m=99314207620322&amp;w=2

All of the above problems are fixed in loop-AES.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000804</emailId><senderName>"Mr. Shannon Aldinger"</senderName><senderEmail>god@yinyang.hjsoft.com</senderEmail><timestampReceived>2001-07-10 00:08:04-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Mon, 9 Jul 2001, Dan Hollis wrote:

&gt; &gt; Oh my, look what happened, no more bugs! Can it be? Maybe the I-patch is not
&gt; &gt; broken!
&gt;
&gt; Except that i-patch 2.4 can't read crypto writen by i-patch 2.2, and
&gt; nobody can quite seem to figure out why...
&gt;

Just to jump in here, I haven't read the full thread. Could it have
something to do with the fact that linux-2.4.x stock supports LFS?
Linux-2.2.x didn't out of the box, so 64-bit vs 32-bit for file lengths,
might be something to rule out...

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: Made with pgp4pine 1.75

iEYEARECAAYFAjtKR28ACgkQwtU6L/A4vVBv8ACgqIl/gQx/wQTErrumLtRbgrXL
3AkAoJFfoh4ZZNDxtzgp7itdCwlMoOXC
=4YMt
-----END PGP SIGNATURE-----



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710002437</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:24:37-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Dan, et al.:

	Obviously there is no solution in the instant, but this does not make the
crypto "broken" as Mr. Ruusu tends to try to make us all believe. Granted,
it has wrinkles needing to be worked out. But most people use ext2 (granted
I am doing some testing with ReiserFS, but am most likely going to wait for
ext3 since it is ext2 compatible, and FIPS and Partition Magic can deal with
ext2), so I fail to see a problem. If you need support for a different
filesystem, then yes, you will need a different solution. However, selling
this issue, as "I-patch is broken" is complete rubbish.

	Granted on a certain level I agree with you, I would like the I-patch to
support different block sizes, as I would like to create an encrypted file,
which could be copied to CD-ROM for backup or offline storage reasons.

	Lastly, I have not been running a 2.2 kernel for some time, and also have
never even tried crypto when I did run it, so I cant appreciate your problem
as much, but why not just get some extra space and convert everything? Copy
from a 2.2 encrypted filesystem to a clear filesystem then back to a 2.4
encrypted filesystem.



Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:55 PM

-----Original Message-----
From: Dan Hollis [mailto:goemon@anime.net]
Sent: Monday, July 09, 2001 4:50 PM
To: IT3 Stuart B. Tener, USNR-R
Cc: Jari Ruusu; Dale Amon; linux-crypto@nl.linux.org
Subject: RE: Announce loop-AES-v1.3b file crypto package

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         Are you arguing that my issuing an mkfs with the proper block
size,
&gt; the I-patch would still be a time bomb?

And your solution for fs with non variable block size is... ?

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710003408</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-10 00:34:08-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt; 	Lastly, I have not been running a 2.2 kernel for some time, and also have
&gt; never even tried crypto when I did run it, so I cant appreciate your problem
&gt; as much, but why not just get some extra space and convert everything?

"just get some extra space"?

This sounds a lot like "just buy (more ram|faster cpu|etc)",  this is the
microsoft answer to fix a problem that is purely in software.

In any case what about the user who has 100's of gb's on slow removeable
storage (zip, cdr, etc)... tough shit I suppose? In the case of cdr the
conversion could end up being very, very expensive indeed -- not just the
media but the time involved.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710003816</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:38:16-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Hollis:

        Well, that is a separate story and completely different from what
you mentioned. You presented a personal issue you needed assistance with and
I tried to help you out. Now you are angry because IO provided a solution,
and it does not meet your broadest imaginable needs.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 5:36 PM

-----Original Message-----
From: Dan Hollis [mailto:goemon@anime.net]
Sent: Monday, July 09, 2001 5:34 PM
To: IT3 Stuart B. Tener, USNR-R
Cc: Jari Ruusu; Dale Amon; linux-crypto@nl.linux.org
Subject: RE: Announce loop-AES-v1.3b file crypto package

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;       Lastly, I have not been running a 2.2 kernel for some time, and also
have
&gt; never even tried crypto when I did run it, so I cant appreciate your
problem
&gt; as much, but why not just get some extra space and convert everything?

"just get some extra space"?

This sounds a lot like "just buy (more ram|faster cpu|etc)",  this is the
microsoft answer to fix a problem that is purely in software.

In any case what about the user who has 100's of gb's on slow removeable
storage (zip, cdr, etc)... tough shit I suppose? In the case of cdr the
conversion could end up being very, very expensive indeed -- not just the
media but the time involved.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710005337</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-10 00:53:37-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         Well, that is a separate story and completely different from what
&gt; you mentioned. You presented a personal issue you needed assistance with and
&gt; I tried to help you out. Now you are angry because IO provided a solution,
&gt; and it does not meet your broadest imaginable needs.

Im not angry at all, im just pointing out that your solution is not a
solution at all -- it is a microsoft "solution", or more like a
dilbert-style "solution".

Current i-patch is not totally broken but it *is* extremely flawed. No
amount of billgates-style handwaving and "mkfs workarounds" will make the
current bugs simply evaporate.

Only a discussion of the current bugs and examination of the code will fix
things. Sticking your head in the sand and pretending the bugs
(dont exist|will magically disappear) wont help the situation.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710010951</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 01:09:51-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Hollis:

	I think you misread what I said I am offering a workaround. However, I
would love to see all these issues resolved. I am simply saying that these
issues are not justification to say it is "broken" as Mr. Ruusu does, and
that it can be usable in many circumstances. Sure, with bugs, certain
configurations do not work, and resolving the bugs is best.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 6:04 PM

-----Original Message-----
From: Dan Hollis [mailto:goemon@anime.net]
Sent: Monday, July 09, 2001 5:54 PM
To: IT3 Stuart B. Tener, USNR-R
Cc: Jari Ruusu; Dale Amon; linux-crypto@nl.linux.org
Subject: RE: Announce loop-AES-v1.3b file crypto package

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         Well, that is a separate story and completely different from what
&gt; you mentioned. You presented a personal issue you needed assistance with
and
&gt; I tried to help you out. Now you are angry because IO provided a solution,
&gt; and it does not meet your broadest imaginable needs.

Im not angry at all, im just pointing out that your solution is not a
solution at all -- it is a microsoft "solution", or more like a
dilbert-style "solution".

Current i-patch is not totally broken but it *is* extremely flawed. No
amount of billgates-style handwaving and "mkfs workarounds" will make the
current bugs simply evaporate.

Only a discussion of the current bugs and examination of the code will fix
things. Sticking your head in the sand and pretending the bugs
(dont exist|will magically disappear) wont help the situation.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710090244</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-07-10 09:02:44-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sunday 08 July 2001 18:44, peter k. wrote:
&lt;snip&gt;
&gt; &gt; &gt; it is not, for example, i just generated that *using my brain*:
&gt; &gt; &gt; "s4k1f62rni7q"
&gt; &gt; &gt; tell me why it isnt random!!!
&lt;snip&gt;

And why should we use the brain if we have

$ head -c16 /dev/random | md5sum

or 

$ head -c16 /dev/random | mimencode

??

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710092843</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-10 09:28:43-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt; 
&gt;         Let us stay focused on bugs, and not latency issues. After all, I am
&gt; running a laptop with no other users (but me) on it, so performance is not
&gt; going to sway the bulk of crypto users whom are individuals unless the
&gt; performance hit is grossly unacceptable, obviously not if no one has
&gt; mentioned it yet.

CD quality audio does not tolerate large delays in scheduling.

&gt;         Are you arguing that my issuing an mkfs with the proper block size,
&gt; the I-patch would still be a time bomb?

mkfs, fsck and other user level tools do not currently set the block size
variable (which resides in kernel RAM). Even when mounting (kernel code
executing) the superblock is read using a default block size. Shit hits the
fan when disk is read with different block size from what was used to write
it.
 
&gt;         Now on the issue of "fatware" as you note, I disagree predicated
&gt; more on a philosophical issue, that the integration of crypto into the
&gt; kernel will be cause for more people to leverage it across a greater number
&gt; of applications. I also do not "just want" loop aes I want it all. Crypto
&gt; for PPP, Crypto for logon passwords, Crypto for whatever.

What exactly does international crypto patch offer besides encrypted
loopback and bloat that nobody uses? Read the source, man.

&gt;         If IV was 512-byte based, how would this resolve the issue for CD-ROM
&gt; users?

512 byte based IV would recalculate new IV and restart the CBC chaining
after every 512 bytes transferred.

&gt;         A better solution (IMHO) would be to create an I-patch that does not choke
&gt; on most distributions, and does not REQUIRE the Linus kernel to work.

You just described what loop-AES does, and does it well. This is from
loop-AES README file: "This package does *not* modify your kernel in any
way, so you are free to use kernels of your choice, with or without cool
patches."

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710161524</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 16:15:24-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu:

	So your saying if your playing a CD on the laptop at the same time as doing
work, the CD will get funky, hmmmm....okay.

Well, the IV problem is being resolved, so lets put that to the side for the
moment, and review the solution when it comes forth very soon.

	I do admit that doing certain things in user-space vs. kernel-space does
have some advantages, and certain can make installation and maintenance
easier, however, I would hope the crypto API would find implementation
across the kernel for doing some of things addressed in the email posted
today (encrypting swap space, etc.).


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Tuesday, July 10, 2001 3:23 AM

-----Original Message-----
From: root@Misty.com [mailto:root@Misty.com]On Behalf Of Jari Ruusu
Sent: Tuesday, July 10, 2001 2:29 AM
To: stuart@bh90210.net
Cc: Dale Amon; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt;
&gt;         Let us stay focused on bugs, and not latency issues. After all, I
am
&gt; running a laptop with no other users (but me) on it, so performance is not
&gt; going to sway the bulk of crypto users whom are individuals unless the
&gt; performance hit is grossly unacceptable, obviously not if no one has
&gt; mentioned it yet.

CD quality audio does not tolerate large delays in scheduling.

&gt;         Are you arguing that my issuing an mkfs with the proper block
size,
&gt; the I-patch would still be a time bomb?

mkfs, fsck and other user level tools do not currently set the block size
variable (which resides in kernel RAM). Even when mounting (kernel code
executing) the superblock is read using a default block size. Shit hits the
fan when disk is read with different block size from what was used to write
it.

&gt;         Now on the issue of "fatware" as you note, I disagree predicated
&gt; more on a philosophical issue, that the integration of crypto into the
&gt; kernel will be cause for more people to leverage it across a greater
number
&gt; of applications. I also do not "just want" loop aes I want it all. Crypto
&gt; for PPP, Crypto for logon passwords, Crypto for whatever.

What exactly does international crypto patch offer besides encrypted
loopback and bloat that nobody uses? Read the source, man.

&gt;         If IV was 512-byte based, how would this resolve the issue for
CD-ROM
&gt; users?

512 byte based IV would recalculate new IV and restart the CBC chaining
after every 512 bytes transferred.

&gt;         A better solution (IMHO) would be to create an I-patch that does
not choke
&gt; on most distributions, and does not REQUIRE the Linus kernel to work.

You just described what loop-AES does, and does it well. This is from
loop-AES README file: "This package does *not* modify your kernel in any
way, so you are free to use kernels of your choice, with or without cool
patches."

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710173513</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@crosswinds.net</senderEmail><timestampReceived>2001-07-10 17:35:13-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Mr. Tener

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Chan: Honestly, even though I know [now] that it is not an
Stuart&gt; official patch, I never learned that from the web site, and have
Stuart&gt; never even see the line you speak of, so I agree with you.

Sorry, I can't tell if, when you say "have never even see[n] the line
you speak of," if you mean that you still do not see it (i.e. couldn't
find it), or if you never saw it before I pointed it out.  Just in case,
it's the second paragraph of the section "What is the International
Kernel Patch".

Anyways, I suspect that the reason the web page is the way it is, is
historical; when it was created, it was the only crypto patch available
for Linux, and pretty much anyone encrypting their filesystem used it.
So it was as close to being "official" as you could get without actually
being in the kernel itself.  (Note: my knowledge of the history of such
things is unverified.  Don't quote me on this.)

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7SzzQZRhU33H9o38RAv2eAJ4xT7zZ5GlgUNLyHVT6gomsrSk2zwCgk1Kf
Yt2AI50i4JUQj959pGx02CM=
=YMF8
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708185516</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-07-08 18:55:16-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, 8 Jul 2001, Michael H. Warfield wrote:
&gt; 	Why not write a perl script or something to read from /dev/random
&gt; and generate random numbers?

Note that the FreeS/WAN distribution includes such a program (assuming
that what you want is hex digits), called "ranbits".

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708195916</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 19:59:16-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; 3) You're still making the false assumption that your brain is
&gt; a good random number generator.  It's not.  No matter which way you
&gt; cut it, your brain is biased.  "Oh, an "A" would look pretty here."
&gt; Since you are within your own brain, you are NOT an unbiased observer
&gt; of it's workings and (by a little information theory) are incapable
&gt; of judging (or even understanding) fully it's own workings.  The best
&gt; you could do is use some outside influence (dice, cards, /dev/random,
&gt; etc) to provide random input to your though processes and you would
&gt; still impose your own biases on the process with no way to detect those
&gt; biases.  Whether or not your brain would be a good random number
&gt; generator (and I believe that the weight of opinion is that it would not
&gt; be), you are incapable of judging whether it would be simply because
&gt; you would not see your own biases.  You can't judge it's randomness
&gt; based on some proceedure you propose to imploy.  You can only judge
&gt; it through impartial, unbiased, testing of the output it generates.
&gt; You can't do that for yourself.
&gt;
i agree but i can still tell that i choose my random characters with the
least possible bias ;)
but i also understand that using the brain for generating random passwords
isnt a solution which should be generally suggested in crypto readmes as it
really depends on the person who is doing it how random the output is

&gt; But that would REALLY be getting off topic here and this thread
&gt; has probably gone on for much longer than is productive.

yes, and i suggest we make two conclusions from it:
(1) there should be a password howto included in loop-AES [and future
international kernel patches]
(2) maybe there should be a prog written which creates passwords for the
user using /dev/random and it could be also included in loop-AES [and future
international kernel patches]




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708212320</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-07-08 21:23:20-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "peter" == peter k &lt;spam-goes-to-dev-null@gmx.net&gt; writes:

peter&gt; it is not, for example, i just generated that *using my brain*:
peter&gt; "s4k1f62rni7q" tell me why it isnt random!!!

It may be random, but it is not _uniformly_ random.  It's the same
reason you wouldn't want to use a biased coin to generate a random bit
pattern.  It would still be random, but it would be biased.

The brain is biased.  The sequence "abcdefghijkl" might be output by a
random string generator (and in fact that particular string would have
the same probability of occurring as "s4k1f62rni7q"), but no one would
write out that string if they were trying to be random.  You'd try to
avoid strings which seem to have too many patterns.

Another example: ask a few friends to pick a number between 1 and 4.
They are most likely to pick 3.  Ask a few friends to pick a vegetable.
They are most likely to say carrot.  The brain seems to be heavily
biased towards these.

If you are asked to type random keys on your keyboard, most of the
letter pairs in that string would probably come from opposite ends of
the keyboard (e.g. one character would come from the left end, and the
next would come from the right end).

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7SM8zZRhU33H9o38RAntDAJ9unhN3LbMTP/Lvcc3uG8epWXgKBQCfcPS6
tbI008Vup5bunJoAI5ZXysk=
=vbFu
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708235912</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 23:59:12-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter:

	I do not know what the other people on this mailing list believe, but it
seems that you are looking for some level of validation in using the
shortcuts you insist on implementing. Now I for one, do not care if you
employ the methodologies you speak of (using your brain to generate random
characters), because I do not believe that I care if your data is safe,
since its yours and not mine. However, in terms of facts, it is clear that
the brain is not a valid random character generator as juxtaposed against
/dev/random or other devices; no matter what you argue or think, that is
demonstrated by theological, statistical, and physics theory depending whom
you ask.

	The fact that you think your thoughts are random does not make them random.
As I explained earlier, if you take the Wall Street Journal use the 3 verb
from the first article in the first column everyday, that word will appear
random, but once we see the word is taken from as an article (imposing a
segment of order in and of itself), then the word is not random. So to are
our thoughts, and individual thought may appear random from day to day, or
hour to hour, but the overall morality and rules by which we live, supersede
that randomness and apply order to it (i.e. you live by certain rules, like
never stealing, raping, pillaging, or drinking liquid you know to be
radioactive).

	Now since your data is your data, you may protect it (or not as the case
may be) in anyway you choose, and our validation of your methods is not
required for you to do so. Matter of fact I am giving you my permission to
use your own methods of generating random characters with your brain, if it
makes you feel any better. Yet, I do think that if you feel you are going to
provide some sort of argument for the brain being a random character
generator of any validity beyond those known to be higher level random
character generators, you are stuck presenting factual based evidence to
outweigh the already immense level of statistical data evidencing the
contrary to your belief. You have not yet to date presented any such
evidentiary material to contradict the position supported by scientists,
theologians, and physicists worldwide.

	Presuming for a moment that you desire to be more of an "appliance
operator" than "technical operator" when it comes to crypto, that is fine.
But, crypto has (and most likely always will be) more of a "roll your own"
sort of issue. There is no right or wrong way to choose a pass phrase, only
a more secure or less secure method. Your methods tend to lean in the
direction of being less secure, which as I have stated is fine if that meets
your own requirements. But, if you want the warm and fuzzy of knowing you
have created a crypto position with respect to your data which is very
strong, you are misleading yourself if you believe what you are about to do
is secure in a strong manner.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 4:27 PM

-----Original Message-----
From: peter k. [mailto:spam-goes-to-dev-null@gmx.net]
Sent: Sunday, July 08, 2001 6:24 AM
To: stuart@bh90210.net
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

 &gt; It is not random, because, people cannot have random thoughts. The Zohar
&gt; (the text on Jewish mysticism) says we receive only thoughts, which will
&gt; help us correct ourselves into better people, or do a job to help others
&gt; around us correct themselves. Thus, nothing we think or do is random, but
is
&gt; programmed for our own correction we must work to achieve in each lifetime
&gt; as inscribed by G-D.
 your brain is a bunch of billiards of neurons which work together in a huge
biochemical reaction, there is much randomness (note that its not the main
part, otherwise you couldnt be intelligent) because its a reaction between
so many parts

&gt; However, events (not thoughts) have much more random nature to them. While
&gt; even events (from G-Ds view) are not random, to use their sequence and
&gt; placement seems so, providing a level of randomness sufficient for the
&gt; purposes at hand. However, according to Kabbalah (Jewish Mysticism, and
the
&gt; "new" physics), there is no randomness in the world at all. The new
physics
&gt; says that it was a random strike of lightening which first created life,
&gt; but, how can we say life's creation (a monumentus occasion in world
history)
&gt; could have been random if we believe in g-d?
i do not believe in god, sorry but nobody managed to prove its existence yet
while we have already lots of proves for the big bang [i could mention
*lots* of arguments againts the existence of 'god' but this shouldnt get a
religious discussion]

&gt; Therefore, it is the appearance of randomness we are looking for, and such
&gt; appearance needs to come from events so unrelated that we cannot access
the
&gt; attributes to "de randomize" their reconnection. Thus if you pick the 3rd
&gt; verb printed in the front page of the wall street journal every day, the
9th
&gt; adjective, and the 20th preposition, they are so unrelated that we presume
&gt; them random. Yet in fact, those words are not random, they are part of an
&gt; order (the article we are reading) which is unrelated to the more grand
&gt; random nature we see in picking those words. So to are our thoughts, when
&gt; you think our thoughts are random, your are not viewing them from G-Ds
view.
&gt; Since G-Ds work is far less random than the words appearing in the Wall
&gt; Street Journal, do you think it safe to use human thought to protect your
&gt; data?
thats the same process i use to generate random characters using my brain, i
pick each letter randomly out of my thoughts but its better because you cant
read my brain if you know that my passphrases came from there like you can
do with the wallstreet journal

&gt; Remember, we have power and ability beyond even our own comprehension. So,
&gt; if you randomly picked 5 numbers every day, after a year, you would see a
&gt; pattern. One which you didn't even realize, but was always there. Our
brains
&gt; can do things we don't realize, and that is at the influence of G-D. We
are
&gt; not good randomization engines.

well, searching for patterns in random numbers created by a human over a
year is a good idea, but i still dont think that you would find any patterns
which would allow you to predict the next random number you would generate
as you have different thoughts every day, hour, even evey second which are
influenced by the randomness of your brain and by everything you see, hear
and feel which is usually random
and dont forget that we were originally talking about encryption! if someone
wants to crack my AES128 encrypted drive he doesnt know any passwords i
created so he cant know any patterns in my thoughts if they really exist and
so he wont be able to guess the 40 random characters!



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709013212</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 01:32:12-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter:

	Placing the FAQ for the creation of pass phrases into the documentation for
either the I-patch or the Loop AES stuff would be a good idea, I agree. I
would prefer it to be converted to SGML format first though, so it could be
regenerated in PostScript format and printed on my Apple LaserWriter
printer! And yes, the printer is ages olde, and it still works, and I hate
Apples for the most part believe it or not!

	I am willing to write a C program to generate passwords, however, there are
experts far beyond my limited skill level whom can create a set of rules for
the software to follow. If someone gives me that exact set of rules, I am
offering to develop the software you request.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 6:29 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of peter k.
Sent: Sunday, July 08, 2001 12:59 PM
To: Michael H. Warfield
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt; 3) You're still making the false assumption that your brain is
&gt; a good random number generator.  It's not.  No matter which way you
&gt; cut it, your brain is biased.  "Oh, an "A" would look pretty here."
&gt; Since you are within your own brain, you are NOT an unbiased observer
&gt; of it's workings and (by a little information theory) are incapable
&gt; of judging (or even understanding) fully it's own workings.  The best
&gt; you could do is use some outside influence (dice, cards, /dev/random,
&gt; etc) to provide random input to your though processes and you would
&gt; still impose your own biases on the process with no way to detect those
&gt; biases.  Whether or not your brain would be a good random number
&gt; generator (and I believe that the weight of opinion is that it would not
&gt; be), you are incapable of judging whether it would be simply because
&gt; you would not see your own biases.  You can't judge it's randomness
&gt; based on some proceedure you propose to imploy.  You can only judge
&gt; it through impartial, unbiased, testing of the output it generates.
&gt; You can't do that for yourself.
&gt;
i agree but i can still tell that i choose my random characters with the
least possible bias ;)
but i also understand that using the brain for generating random passwords
isnt a solution which should be generally suggested in crypto readmes as it
really depends on the person who is doing it how random the output is

&gt; But that would REALLY be getting off topic here and this thread
&gt; has probably gone on for much longer than is productive.

yes, and i suggest we make two conclusions from it:
(1) there should be a password howto included in loop-AES [and future
international kernel patches]
(2) maybe there should be a prog written which creates passwords for the
user using /dev/random and it could be also included in loop-AES [and future
international kernel patches]




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709013859</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 01:38:59-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter, et al.:

	As I have said in previous posts, having the core of the crypto API (absent
the actual modules that do the encryption) in the core kernel (non I-patch)
makes sense. The regular kernel could be distributed with dummy modules that
do no encryption, that just pass back the same clear text they were passed,
thus unifying the two kernel source trees. Then only creation of specific
"plug-in" encryption modules would be necessary, with people just going and
replacing the dummy modules with real encryption modules for each type of
encryption so written.

	Perhaps, have a single module inclusive of all the encryption technologies
developed thus far would further reduce confusion. If we had, a single
module that needed to be replaced (from the alleged dummy one the regular
kernel would provide) which had all the encryption technologies in it, then
using the I-patch would get much simpler.

	I still don't know what is broken in the I-patch.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 6:35 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of peter k.
Sent: Sunday, July 08, 2001 11:02 AM
To: Herbert Valerio Riedel
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt; the international crypto patch has received a bit of criticism few months
&gt; ago, so I became a bit unmotivated...
&gt;
&gt; ...but if there is enough demand I would work on it again and try to fix
&gt; some of the bigger show stoppers, but I don't want to replace Alexander
&gt; Kjeldaas if he's still working on the official international crypto patch,
&gt; and maybe he has already some unreleased fixes waiting...
&gt;
&gt; the plans were, if I remember correctly, to make the crypto api that
&gt; generic as to allow other kernelspace projects making use of encryption,
&gt; most prominently network encryption projects, to use the crypto api as a
&gt; common cipher repository... or to put it in other words, to implement
&gt; kernel encryption services, maybe even allow support for ciphers
&gt; implemented in hardware...

IMHO there HAS TO BE full crypto stuff in the kernel and full support for
encrypting file systems as those features are very useful
if the current international crypto patch isnt ok then there should be a new
one created, but not having crypto features officially in the kernel sux =(



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709013916</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 01:39:16-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu:

	I get the distinct sense that you feel that by choosing the "International
Patch" I am somehow attempting to defame or ignore your work. Mr. Adam
Warner and you seem to be of very differing opinions. I question why you say
the International Patch is broken. I am using the new "2.4.6" version of it
(with a 2.4.6 kernel under Mandrake 8).

a) It installed flawlessly (though I did install the standard Linus version
of 2.4.6 kernel first)
b) I created a loop back device with it, and in fact was able to mkreiserfs
on the device, mount it, and write data to it with crypto above the
mkreiserfs

I am not trying to argue your intelligence or be condescending, but the fact
that you may know (for fact perhaps) that something is broken in the
International Patch, I just wonder what it is? Perhaps the broken portion is
a portion I am not using.

So, I ask then, how is the International Patch broken if I (a newbie to
using this software) was able to accomplish its implementation and use? As
well, why is there very little warning against the installation of the patch
from people on other crypto lists (I searched www.dejanews.com)?

	Can someone tell me:

a) What is broken (specifically)
b) What versions are known (test) to have such failures
c) How definitively does it impact the operation of the remainder of the
I-patch?
d) Why create simply another piece of software as a work around (Loop AES
package) when Mr. Ruusu and others could work with the authors of the
I-patch to effectuate a power and bug-free release with additional features?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 4:09 PM

-----Original Message-----
From: root@Misty.com [mailto:root@Misty.com]On Behalf Of Jari Ruusu
Sent: Sunday, July 08, 2001 6:04 AM
To: stuart@bh90210.net
Subject: Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;         I claim the first amendment rights (a reference to the US
constitution for
&gt; foreign nationals) of a newbie, to have no clear idea of exactly what is
&gt; best for my own good!

That was rather obvious (to everyone who care and audit what they run) since
you decided to use the broken international crypto patch regardless of your
awareness of loop-AES' existance.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709020122</emailId><senderName>mr sam jooky</senderName><senderEmail>mrsamjooky@operamail.com</senderEmail><timestampReceived>2001-07-09 02:01:22-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt;===== Original Message From mr sam jooky &lt;mrsamjooky@operamail.com&gt; =====
Easy forms of added randomness are radio static
fed to your sound card. There is also a program
from David Wagner at UCB that uses the discrepencies
between the left and right channels of sound card
while filtering out the background noise (I thought
it could be beneficial oh well I guess most of it
comes from chips with regular noise patterns).
Typing into the keyboard to add entropy to /dev/random
is quite good but not the same as very chaotic events.
Its a question of shortcuts vs the chase is better
than the catch. Obviously junk in junk out, so if your
not able or willing to put the time into building the
foundation of your encrypted stream.. Depending on what
data you are sending for example: top of every page has
your known name and address as a header. This weakness
could lower the amount of combinations to brute force
by another factor... Time to go out and get applied
cryptography and start reading I guess

-------------------------------------------
The Fastest Browser on Earth now for FREE!!
Download Opera 5 for Windows now! Get it at
http://www.opera.com/download/
-------------------------------------------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709053426</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@crosswinds.net</senderEmail><timestampReceived>2001-07-09 05:34:26-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

(OK, I'll try this again, since the first attempt didn't seem to be
successful.  Probably because I sent it using a different e-mail address
from the one I used to subscribe to the list.)

&gt;&gt;&gt;&gt;&gt; "peter" == peter k &lt;spam-goes-to-dev-null@gmx.net&gt; writes:

peter&gt; it is not, for example, i just generated that *using my brain*:
peter&gt; "s4k1f62rni7q" tell me why it isnt random!!!

It may be random, but it is not _uniformly_ random.  It's the same
reason you wouldn't want to use a biased coin to generate a random bit
pattern.  It would still be random, but it would be biased.

The brain is biased.  The sequence "abcdefghijkl" might be output by a
random string generator (and in fact that particular string would have
the same probability of occurring as "s4k1f62rni7q"), but no one would
write out that string if they were trying to be random.  You'd try to
avoid strings which seem to have too many patterns.  Now a bias against
"abcdefghijkl" could arguably be a good thing, but there are a lot of
other biases that I'm not aware of that a psychologist could probably
come up with.  Just a guess, but I bet the starting character of a
password would be biased towards certain characters.  "a" would probably
be the least common starting letter.

Another example: ask a few friends to pick a number between 1 and 4.
They are most likely to pick 3.  Ask a few friends to pick a vegetable.
They are most likely to say carrot.  The brain seems to be heavily
biased towards these.

If you are asked to type random keys on your keyboard, most of the
letter pairs in that string would probably come from opposite ends of
the keyboard (e.g. one character would come from the left end, and the
next would come from the right end).

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7SUJfZRhU33H9o38RAulKAJ9DMWUmTTLdy1gYYuCi0Q7qDjUkRQCbBvGi
n2b+qYBbomiYys/Gza2MVh4=
=PoXC
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709060406</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 06:04:06-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Wreski:

        For whatever reason, I could not download it. When clicked "save" in
the adobe menue within my browser, it claimed, "A file I/O error has
occurred. The file connection timed out." However, I did this just after it
said "done" in the lower left of my Internet Explorer browser! I was sitting
there babysitting it to finish. Do you have an FTP link for it?

        In addition, I noticed the table of contents paged looked somewhat
weird perhaps that was the issue.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 11:00 PM

-----Original Message-----
From: dave@mastermind.inside.guardiandigital.com
[mailto:dave@mastermind.inside.guardiandigital.com]On Behalf Of Dave Wreski
Sent: Saturday, July 07, 2001 6:09 PM
To: stuart@bh90210.net
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;
&gt; Dear Sir:
&gt;
&gt;         Do you know if there is a PDF version of this FAQ?

It may not be the prettiest, but a little html2ps and ps2pdf works
wonders sometimes:

http://www.linuxsecurity.com/resource_files/cryptography/passphrase-faq.pdf

Regards,
Dave

--
Dave Wreski
Corporate Manager                           Guardian Digital, Inc.
(201) 934-9230                Pioneering.  Open Source.  Security.
dave@guardiandigital.com            http://www.guardiandigital.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709102409</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-09 10:24:09-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"peter k." wrote:
&gt; (1) there should be a password howto included in loop-AES [and future
&gt; international kernel patches]

Code and documentation is welcome. You know my email address.

&gt; (2) maybe there should be a prog written which creates passwords for the
&gt; user using /dev/random and it could be also included in loop-AES [and future
&gt; international kernel patches]

dd if=/dev/random bs=15 count=1 2&gt;/dev/null | uuencode -m /dev/stdout | tail -2 | tac | tail -1

Latest version is currently loop-AES-v1.3c

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709102835</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-09 10:28:35-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt; 
&gt;         I get the distinct sense that you feel that by choosing the "International
&gt; Patch" I am somehow attempting to defame or ignore your work. Mr. Adam
&gt; Warner and you seem to be of very differing opinions. I question why you say
&gt; the International Patch is broken. I am using the new "2.4.6" version of it
&gt; (with a 2.4.6 kernel under Mandrake 8).
&gt; 
&gt; a) It installed flawlessly (though I did install the standard Linus version
&gt; of 2.4.6 kernel first)
&gt; b) I created a loop back device with it, and in fact was able to mkreiserfs
&gt; on the device, mount it, and write data to it with crypto above the
&gt; mkreiserfs
&gt; 
&gt; I am not trying to argue your intelligence or be condescending, but the fact
&gt; that you may know (for fact perhaps) that something is broken in the
&gt; International Patch, I just wonder what it is? Perhaps the broken portion is
&gt; a portion I am not using.
&gt; 
&gt; So, I ask then, how is the International Patch broken if I (a newbie to
&gt; using this software) was able to accomplish its implementation and use? As
&gt; well, why is there very little warning against the installation of the patch
&gt; from people on other crypto lists (I searched www.dejanews.com)?
&gt; 
&gt;         Can someone tell me:
&gt; 
&gt; a) What is broken (specifically)
&gt; b) What versions are known (test) to have such failures
&gt; c) How definitively does it impact the operation of the remainder of the
&gt; I-patch?
&gt; d) Why create simply another piece of software as a work around (Loop AES
&gt; package) when Mr. Ruusu and others could work with the authors of the
&gt; I-patch to effectuate a power and bug-free release with additional features?

http://mail.nl.linux.org/linux-crypto/2001-06/msg00014.html
http://www.cs.helsinki.fi/linux/linux-kernel/2001-26/0589.html
http://mail.nl.linux.org/linux-crypto/2001-07/msg00010.html

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709103806</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-09 10:38:06-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 06:39:16PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; a) It installed flawlessly (though I did install the standard Linus version
&gt; of 2.4.6 kernel first)
&gt; b) I created a loop back device with it, and in fact was able to mkreiserfs
&gt; on the device, mount it, and write data to it with crypto above the
&gt; mkreiserfs
&gt; 

Likewise, I have been using the 2.4.3 international patch
and running multiple machines with reiserfs on top of a
crypto loopback on top of a raw raid1 set for over 4 months
and have had no problem.

I have applied the international patches and built kernels
for a large number of machines, from laptops to desktop to
servers, all without pain or bother.

I have had exactly zero trouble with the international
patches except for the cases where they seriously lagged
mainstream kernel release.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709192748</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-09 19:27:48-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; &gt; (2) maybe there should be a prog written which creates passwords for the
&gt; &gt; user using /dev/random and it could be also included in loop-AES [and
future
&gt; &gt; international kernel patches]
&gt;
&gt; dd if=/dev/random bs=15 count=1 2&gt;/dev/null | uuencode -m /dev/stdout |
tail -2 | tac | tail -1

that outputs very bad stuff like "A+Y="


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709201623</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-09 20:16:23-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

Dale Amon wrote:
&gt; On Sun, Jul 08, 2001 at 06:39:16PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; &gt; a) It installed flawlessly (though I did install the standard Linus version
&gt; &gt; of 2.4.6 kernel first)
&gt; &gt; b) I created a loop back device with it, and in fact was able to mkreiserfs
&gt; &gt; on the device, mount it, and write data to it with crypto above the
&gt; &gt; mkreiserfs
&gt; &gt;
&gt; 
&gt; Likewise, I have been using the 2.4.3 international patch
&gt; and running multiple machines with reiserfs on top of a
&gt; crypto loopback on top of a raw raid1 set for over 4 months
&gt; and have had no problem.
&gt; 
&gt; I have applied the international patches and built kernels
&gt; for a large number of machines, from laptops to desktop to
&gt; servers, all without pain or bother.
&gt; 
&gt; I have had exactly zero trouble with the international
&gt; patches except for the cases where they seriously lagged
&gt; mainstream kernel release.

patch-int-2.4.6.bz2 available from HVR's web site is still the same time
bomb waiting to explode as patch-int-2.4.3.1.bz2.

Have you actually audited that code?

I have audited some of it. Conclusion: BROKEN

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709202931</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-09 20:29:31-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, Jari Ruusu wrote:

&gt; Dale Amon wrote:
&gt; &gt; On Sun, Jul 08, 2001 at 06:39:16PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; &gt; &gt; a) It installed flawlessly (though I did install the standard Linus version
&gt; &gt; &gt; of 2.4.6 kernel first)
&gt; &gt; &gt; b) I created a loop back device with it, and in fact was able to mkreiserfs
&gt; &gt; &gt; on the device, mount it, and write data to it with crypto above the
&gt; &gt; &gt; mkreiserfs
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; Likewise, I have been using the 2.4.3 international patch
&gt; &gt; and running multiple machines with reiserfs on top of a
&gt; &gt; crypto loopback on top of a raw raid1 set for over 4 months
&gt; &gt; and have had no problem.
&gt; &gt;
&gt; &gt; I have applied the international patches and built kernels
&gt; &gt; for a large number of machines, from laptops to desktop to
&gt; &gt; servers, all without pain or bother.
&gt; &gt;
&gt; &gt; I have had exactly zero trouble with the international
&gt; &gt; patches except for the cases where they seriously lagged
&gt; &gt; mainstream kernel release.
&gt;
&gt; patch-int-2.4.6.bz2 available from HVR's web site is still the same time
&gt; bomb waiting to explode as patch-int-2.4.3.1.bz2.
&gt;
&gt; Have you actually audited that code?
&gt;
&gt; I have audited some of it. Conclusion: BROKEN

...do you mind sharing your thoughts with us? :-)
but please, don't tell me again, to give up on the crypto API... ;-)

since I'm quite determined to fix all problems, it would be usefull to
have a definite list of them...

btw, the non-reentrant part has been almost fixed... but it's not
released yet.

if you are refering to the IV overflow, that's going to be addressed as
well rsn...

as to the patch-int vs cryptoapi, the patch-int-2.4.6.bz2 actually nothing
more than a patch-int-2.4.3.1 applied against a 2.4.6...

so they are both the same...

greetings,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707185746</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-07 18:57:46-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 09:01:56PM +1000, Stephen Robert Norris wrote:
&gt; On Sat, Jul 07, 2001 at 04:48:56AM -0400, Michael H. Warfield wrote:
&gt; &gt; On Sat, Jul 07, 2001 at 05:43:28PM +1000, Stephen Robert Norris wrote:
&gt; &gt; &gt; &gt; 	But that still doesn't buy you as much entropy as using a
&gt; &gt; &gt; &gt; longer passphrase that is mnemonic and easier to remember.  Even if
&gt; &gt; &gt; &gt; you ASSUME that you can use totally random characters, that only
&gt; &gt; &gt; &gt; approaches 7 bits per character (but can never reach it) and is
&gt; &gt; &gt; &gt; still less than the strength of a well formed 20 character mnemonic
&gt; &gt; &gt; &gt; pass phrase that's easier to remember.

&gt; &gt; &gt; Is this really true? According to Shnier's book, English text has
&gt; &gt; &gt; about 1.5 bits of entropy/letter - a random password has about 6,
&gt; &gt; &gt; so your passphrase will have to be a good deal longer, even with mis-spelt
&gt; &gt; &gt; words...

&gt; &gt; 	Read carefully what I said.  I said that "even if you ASSUME
&gt; &gt; that you can use totally random characters, that only approaches
&gt; &gt; 7 bits".  That means that it never reaches it.  If you disallow all
&gt; &gt; control characters, you lose another "1/2 bit" and a little white
&gt; &gt; space, a few fragments more.  If you were to ASSUME totally random
&gt; &gt; printing characters, then you end up with something slightly less
&gt; &gt; 96 characters (95) which is about half way between 6 bits and 7 bits.
&gt; &gt; You CAN (in some cases) use control characters in passphrases but not
&gt; &gt; in all cases (^A, ^B - probably, ^S, ^Q - I think not :-) ), so that
&gt; &gt; only helps a little and gets you a little closer (approaches) to 7.
&gt; &gt; The real point is that it's a BAD ASSUMPTION and you can never really
&gt; &gt; reach 7 bits, so 6 is more realistic (and is why that's what I used
&gt; &gt; in my first message).

&gt; I'm not sure what the point of this is - _I_ said it was about 6, so
&gt; you're arguing I'm wrong, because it's a bit _higher_? Which supports
&gt; the original point.

	Ok...  I think we are both in "violent agreement" on this point.
I also stated 6 bits in my original message, so there is where we stand.
I wasn't arguing that you were "wrong" on the 6.  I had even stated 6
in a previous message and used very specific language on the 7.  I
was questioning your statement about that being wrong.  You weren't clear
on what you were objecting to.  So I guess I wasn't sure what your point
was.

&gt; Let's say we get 10 characters at 6 bits/character = 60 bits.

&gt; Let's be generous and say it's 2 bits/character for our modified English
&gt; phrase - that means we need a 30 character passphrase.

	Now here is where you are now invalid.  The 1.5 bits is for
English text and I don't know anyone who is arguing for English text.
My argument was to use a mnemonic passphrase comprising mispellings,
numerical substitutions (oh, I left out odd ball capitalizations) and
strange punctuation.  That does NOT relate to 1.5 bits nor even for
2 bits.  In fact, it should be well over 3 bits of entropy and still be
mnemonic in nature.  The "break even" point would be at effective
3 bits per character and then the advantage still remains that it
is mnemonic for the user.  I'm rather good at coming up with passphrases
that John the Ripper and Crack and L0phCrack have consistantly failed
to break, but they are all still mnemonic (and long).  In many cases,
they are not even mnemonic to recite but are mnemonic to type (touch
typing patterns) and that's a whole 'nother ball of wax.

&gt; I guess my point is that saying it has to be at least 20 characters
&gt; is meaningless; I can come up with 10 character passwords that
&gt; have vastly more entropy than a 20 character English passphrase 
&gt; (60 vs 30 bits).

	But we are not talking about a plain English TEXT passphrase.
You are misapplying the reference of 1.5 bits per character in English
text to something that is only mnemonically related to it.  That is
what's inappropriate here.

	Since there is not a real good measure for what would be a
mnemonic passphrase which is not plain text English, I'm not even sure
how to approach the statistical modeling necessary to come up with a
good figure for the entropy in non-plain-text-english mnemonic passphrases,
but I will venture this as a guess...  For every plaintext passphrases,
there must exists a large number of related, non-plain-text passphrases
which can be related through transposition, substitution, distortion, and
other mechanisms.  It's only necessary to devise one alternative
passphrase option for each character position to increase the effective
entropy by one bit.  You can achieve this by a random mix of capitalizations
alone (you just have to remember the sequence of capitals on your pass
phrase).  That takes us to 2.5 bits there alone.  Four alternatives per
character would yield two additional bits.  Substituting numbers and
punctuation into the plain text English accomplishes that.  This is all
within the realm of possibility (although some combinations of those
distortions would become a reach).  The mnemonic remains and the distortions
are merely perterbations on the mnemonic.

&gt; It seems that the 20 is really an arbitrary number that just happens to
&gt; suit the way _some people_ like to chose passphrases...

	Actually, I think that what was being argued was that 10 was
insufficient.  The original poster was not asking if 20 was sufficient,
he was asking if 10 wasn't sufficient.  IMHO...  10 is not sufficient.
The discussion is not over 20, it's over 10.

	Whether 20 is sufficient or not, depends on your use, but it's
better than 10.  Arguing that 10 characters is insufficient is NOT arguing
that 20 is sufficient.  20 might be, with decent complexity checkers and
it might not be if it were a clear plaintext passphrase.  It might be
total overkill if you are diciplined and have a good enough memory for
high entropy shorter passwords.  Certainly 60 bits (10 characters * 6 bits)
is not safe from brute force attacks unless it is protected by other
mechanisms.

	Ppdd wants TWO 24 character passphrases (48 characters or more
total).  Is that sufficient?  Probably, in most cases.  :-)  Is it better
than 20?  Yeah, I think so, maybe...  Does it have any bearing what so
ever on whether or not 10 characters is insufficient?  No.

	The argument was over the sufficiency of 10 characters.
Long term, non-volitile, crypto protected by only 60 bits worth of
"key" is subject to being brute force attacked given sufficient
time, equipment, and incentive on the part of the attacker.  You
really REALLY want to protect it?  You don't use 60 bits.

&gt; 	Stephen

&gt; -- 
&gt; Stephen Norris	  srn@fn.com.au
&gt; Farrow Norris Pty Ltd	+61 417 243 239

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707194141</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-07 19:41:41-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; Actually, I think that what was being argued was that 10 was
&gt; insufficient.  The original poster was not asking if 20 was sufficient,
&gt; he was asking if 10 wasn't sufficient.  IMHO...  10 is not sufficient.
&gt; The discussion is not over 20, it's over 10.
&gt;
&gt; Whether 20 is sufficient or not, depends on your use, but it's
&gt; better than 10.  Arguing that 10 characters is insufficient is NOT arguing
&gt; that 20 is sufficient.  20 might be, with decent complexity checkers and
&gt; it might not be if it were a clear plaintext passphrase.  It might be
&gt; total overkill if you are diciplined and have a good enough memory for
&gt; high entropy shorter passwords.  Certainly 60 bits (10 characters * 6
bits)
&gt; is not safe from brute force attacks unless it is protected by other
&gt; mechanisms.
&gt;
&gt; Ppdd wants TWO 24 character passphrases (48 characters or more
&gt; total).  Is that sufficient?  Probably, in most cases.  :-)  Is it better
&gt; than 20?  Yeah, I think so, maybe...  Does it have any bearing what so
&gt; ever on whether or not 10 characters is insufficient?  No.
&gt;
&gt; The argument was over the sufficiency of 10 characters.
&gt; Long term, non-volitile, crypto protected by only 60 bits worth of
&gt; "key" is subject to being brute force attacked given sufficient
&gt; time, equipment, and incentive on the part of the attacker.  You
&gt; really REALLY want to protect it?  You don't use 60 bits.
&gt;

well, how much time and what equipment would you need for bruteforcing a 10
byte pw? 3 years of ASCI White? ;) [note that im not talkin about
distributed computing which is able to decrypt stuff protected by 10 bytes
of course] ... and what about 20 bytes then?
10 bytes of a-z and 0-9 thats 36^10=3,656,158,440,062,976 possible
passwords...

hmm, i'll use 20 bytes and AES128 anyway, but again: is that the minimal
length or is it really enough? what about 15 bytes?




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707214800</emailId><senderName>Stephen Robert Norris</senderName><senderEmail>srn@fn.com.au</senderEmail><timestampReceived>2001-07-07 21:48:00-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 02:57:46PM -0400, Michael H. Warfield wrote:
&gt; &gt; I guess my point is that saying it has to be at least 20 characters
&gt; &gt; is meaningless; I can come up with 10 character passwords that
&gt; &gt; have vastly more entropy than a 20 character English passphrase 
&gt; &gt; (60 vs 30 bits).
&gt; 
&gt; 	But we are not talking about a plain English TEXT passphrase.
&gt; You are misapplying the reference of 1.5 bits per character in English
&gt; text to something that is only mnemonically related to it.  That is
&gt; what's inappropriate here.
&gt; 
&gt; 	Since there is not a real good measure for what would be a
&gt; mnemonic passphrase which is not plain text English, I'm not even sure
&gt; how to approach the statistical modeling necessary to come up with a
&gt; good figure for the entropy in non-plain-text-english mnemonic passphrases,
&gt; but I will venture this as a guess...  For every plaintext passphrases,
&gt; there must exists a large number of related, non-plain-text passphrases
&gt; which can be related through transposition, substitution, distortion, and
&gt; other mechanisms.  It's only necessary to devise one alternative
&gt; passphrase option for each character position to increase the effective
&gt; entropy by one bit.  You can achieve this by a random mix of capitalizations
&gt; alone (you just have to remember the sequence of capitals on your pass
&gt; phrase).  That takes us to 2.5 bits there alone.  Four alternatives per
&gt; character would yield two additional bits.  Substituting numbers and
&gt; punctuation into the plain text English accomplishes that.  This is all
&gt; within the realm of possibility (although some combinations of those
&gt; distortions would become a reach).  The mnemonic remains and the distortions
&gt; are merely perterbations on the mnemonic.
&gt; 
&gt; &gt; It seems that the 20 is really an arbitrary number that just happens to
&gt; &gt; suit the way _some people_ like to chose passphrases...
&gt; 
&gt; 	Actually, I think that what was being argued was that 10 was
&gt; insufficient.  The original poster was not asking if 20 was sufficient,
&gt; he was asking if 10 wasn't sufficient.  IMHO...  10 is not sufficient.
&gt; The discussion is not over 20, it's over 10.
&gt; 
&gt; 	Whether 20 is sufficient or not, depends on your use, but it's
&gt; better than 10.  Arguing that 10 characters is insufficient is NOT arguing
&gt; that 20 is sufficient.  20 might be, with decent complexity checkers and
&gt; it might not be if it were a clear plaintext passphrase.  It might be
&gt; total overkill if you are diciplined and have a good enough memory for
&gt; high entropy shorter passwords.  Certainly 60 bits (10 characters * 6 bits)
&gt; is not safe from brute force attacks unless it is protected by other
&gt; mechanisms.
&gt; 
&gt; 	Ppdd wants TWO 24 character passphrases (48 characters or more
&gt; total).  Is that sufficient?  Probably, in most cases.  :-)  Is it better
&gt; than 20?  Yeah, I think so, maybe...  Does it have any bearing what so
&gt; ever on whether or not 10 characters is insufficient?  No.
&gt; 
&gt; 	The argument was over the sufficiency of 10 characters.
&gt; Long term, non-volitile, crypto protected by only 60 bits worth of
&gt; "key" is subject to being brute force attacked given sufficient
&gt; time, equipment, and incentive on the part of the attacker.  You
&gt; really REALLY want to protect it?  You don't use 60 bits.

The last sentence is the point, I guess. 10 is too small. 20 is too small
unless it's completely random (120 bits). 80 is too small for plain English.

In general, the passphrase should contain at least as much entropy as the
key, or it's easier to brute force the passphrase than the key.

Sorry this has turned into something of an argument - really I should have
just made that point and left the discussion.

To the original poster: If you're using 256 bit AES, you should have
at least 256 bits of entropy in the passphrase - so for a completely
random alphanumeric passphrase, that's about 45 characters. For a section
of normal English it's about 170. For "randomised" English (for lack
of a better term) it's somewhere inbetween.

Now, what do people really use? Do they write them down? I store my
passphrases in a Palm encrypted under another passphrase.

	Stephen
-- 
Stephen Norris	  srn@fn.com.au
Farrow Norris Pty Ltd	+61 417 243 239

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010707233140</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-07 23:31:40-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Dear list members:

	I must admit I find a great deal of this entire thread to be rather
entertaining. Unless I am mistaken, I watched two people just spend several
emails arguing over typing five characters at one point. How it is possible
you can have the time to care about cryptography to the extent to install
and use it, but not have the time to care to remember or type an additional
5 characters, when its YOUR OWN DATA you are protecting, is far beyond the
scope of my comprehension.

	What is wrong with English sentences when mixed random words?

Example: "My friend Albert is a big putz! Grapes!" &lt;- this is easy to
remember, and it has 40 characters. I am curious if anyone has written a
script or C program to translate English text into English/numerical text
(hello to h3ll0).


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 4:24 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Stephen Robert Norris
Sent: Saturday, July 07, 2001 2:48 PM
To: Stephen Robert Norris; peter k.; Michael H. Warfield; Jari Ruusu;
linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Sat, Jul 07, 2001 at 02:57:46PM -0400, Michael H. Warfield wrote:
&gt; &gt; I guess my point is that saying it has to be at least 20 characters
&gt; &gt; is meaningless; I can come up with 10 character passwords that
&gt; &gt; have vastly more entropy than a 20 character English passphrase
&gt; &gt; (60 vs 30 bits).
&gt;
&gt;       But we are not talking about a plain English TEXT passphrase.
&gt; You are misapplying the reference of 1.5 bits per character in English
&gt; text to something that is only mnemonically related to it.  That is
&gt; what's inappropriate here.
&gt;
&gt;       Since there is not a real good measure for what would be a
&gt; mnemonic passphrase which is not plain text English, I'm not even sure
&gt; how to approach the statistical modeling necessary to come up with a
&gt; good figure for the entropy in non-plain-text-english mnemonic
passphrases,
&gt; but I will venture this as a guess...  For every plaintext passphrases,
&gt; there must exists a large number of related, non-plain-text passphrases
&gt; which can be related through transposition, substitution, distortion, and
&gt; other mechanisms.  It's only necessary to devise one alternative
&gt; passphrase option for each character position to increase the effective
&gt; entropy by one bit.  You can achieve this by a random mix of
capitalizations
&gt; alone (you just have to remember the sequence of capitals on your pass
&gt; phrase).  That takes us to 2.5 bits there alone.  Four alternatives per
&gt; character would yield two additional bits.  Substituting numbers and
&gt; punctuation into the plain text English accomplishes that.  This is all
&gt; within the realm of possibility (although some combinations of those
&gt; distortions would become a reach).  The mnemonic remains and the
distortions
&gt; are merely perterbations on the mnemonic.
&gt;
&gt; &gt; It seems that the 20 is really an arbitrary number that just happens to
&gt; &gt; suit the way _some people_ like to chose passphrases...
&gt;
&gt;       Actually, I think that what was being argued was that 10 was
&gt; insufficient.  The original poster was not asking if 20 was sufficient,
&gt; he was asking if 10 wasn't sufficient.  IMHO...  10 is not sufficient.
&gt; The discussion is not over 20, it's over 10.
&gt;
&gt;       Whether 20 is sufficient or not, depends on your use, but it's
&gt; better than 10.  Arguing that 10 characters is insufficient is NOT arguing
&gt; that 20 is sufficient.  20 might be, with decent complexity checkers and
&gt; it might not be if it were a clear plaintext passphrase.  It might be
&gt; total overkill if you are diciplined and have a good enough memory for
&gt; high entropy shorter passwords.  Certainly 60 bits (10 characters * 6
bits)
&gt; is not safe from brute force attacks unless it is protected by other
&gt; mechanisms.
&gt;
&gt;       Ppdd wants TWO 24 character passphrases (48 characters or more
&gt; total).  Is that sufficient?  Probably, in most cases.  :-)  Is it better
&gt; than 20?  Yeah, I think so, maybe...  Does it have any bearing what so
&gt; ever on whether or not 10 characters is insufficient?  No.
&gt;
&gt;       The argument was over the sufficiency of 10 characters.
&gt; Long term, non-volitile, crypto protected by only 60 bits worth of
&gt; "key" is subject to being brute force attacked given sufficient
&gt; time, equipment, and incentive on the part of the attacker.  You
&gt; really REALLY want to protect it?  You don't use 60 bits.

The last sentence is the point, I guess. 10 is too small. 20 is too small
unless it's completely random (120 bits). 80 is too small for plain English.

In general, the passphrase should contain at least as much entropy as the
key, or it's easier to brute force the passphrase than the key.

Sorry this has turned into something of an argument - really I should have
just made that point and left the discussion.

To the original poster: If you're using 256 bit AES, you should have
at least 256 bits of entropy in the passphrase - so for a completely
random alphanumeric passphrase, that's about 45 characters. For a section
of normal English it's about 170. For "randomised" English (for lack
of a better term) it's somewhere inbetween.

Now, what do people really use? Do they write them down? I store my
passphrases in a Palm encrypted under another passphrase.

        Stephen
--
Stephen Norris    srn@fn.com.au
Farrow Norris Pty Ltd   +61 417 243 239


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707233346</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-07 23:33:46-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Dear list members:

        I must admit I find a great deal of this entire thread to be rather
entertaining. Unless I am mistaken, I watched two people just spend several
emails arguing over typing five characters at one point. How it is possible
you can have the time to care about cryptography to the extent to install
and use it, but not have the time to care to remember or type an additional
5 characters, when its YOUR OWN DATA you are protecting, is far beyond the
scope of my comprehension.

        What is wrong with English sentences when mixed random words?

        Example: "The telephone is a useful invention! Grapes!" &lt;- this is
easy to remember, and it has 44 characters. I am curious if anyone has
written a script or C program to translate English text into
English/numerical text (hello to h3ll0).


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 4:24 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Stephen Robert Norris
Sent: Saturday, July 07, 2001 2:48 PM
To: Stephen Robert Norris; peter k.; Michael H. Warfield; Jari Ruusu;
linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Sat, Jul 07, 2001 at 02:57:46PM -0400, Michael H. Warfield wrote:
&gt; &gt; I guess my point is that saying it has to be at least 20 characters
&gt; &gt; is meaningless; I can come up with 10 character passwords that
&gt; &gt; have vastly more entropy than a 20 character English passphrase
&gt; &gt; (60 vs 30 bits).
&gt;
&gt;       But we are not talking about a plain English TEXT passphrase.
&gt; You are misapplying the reference of 1.5 bits per character in English
&gt; text to something that is only mnemonically related to it.  That is
&gt; what's inappropriate here.
&gt;
&gt;       Since there is not a real good measure for what would be a
&gt; mnemonic passphrase which is not plain text English, I'm not even sure
&gt; how to approach the statistical modeling necessary to come up with a
&gt; good figure for the entropy in non-plain-text-english mnemonic
passphrases,
&gt; but I will venture this as a guess...  For every plaintext passphrases,
&gt; there must exists a large number of related, non-plain-text passphrases
&gt; which can be related through transposition, substitution, distortion, and
&gt; other mechanisms.  It's only necessary to devise one alternative
&gt; passphrase option for each character position to increase the effective
&gt; entropy by one bit.  You can achieve this by a random mix of
capitalizations
&gt; alone (you just have to remember the sequence of capitals on your pass
&gt; phrase).  That takes us to 2.5 bits there alone.  Four alternatives per
&gt; character would yield two additional bits.  Substituting numbers and
&gt; punctuation into the plain text English accomplishes that.  This is all
&gt; within the realm of possibility (although some combinations of those
&gt; distortions would become a reach).  The mnemonic remains and the
distortions
&gt; are merely perterbations on the mnemonic.
&gt;
&gt; &gt; It seems that the 20 is really an arbitrary number that just happens to
&gt; &gt; suit the way _some people_ like to chose passphrases...
&gt;
&gt;       Actually, I think that what was being argued was that 10 was
&gt; insufficient.  The original poster was not asking if 20 was sufficient,
&gt; he was asking if 10 wasn't sufficient.  IMHO...  10 is not sufficient.
&gt; The discussion is not over 20, it's over 10.
&gt;
&gt;       Whether 20 is sufficient or not, depends on your use, but it's
&gt; better than 10.  Arguing that 10 characters is insufficient is NOT arguing
&gt; that 20 is sufficient.  20 might be, with decent complexity checkers and
&gt; it might not be if it were a clear plaintext passphrase.  It might be
&gt; total overkill if you are diciplined and have a good enough memory for
&gt; high entropy shorter passwords.  Certainly 60 bits (10 characters * 6
bits)
&gt; is not safe from brute force attacks unless it is protected by other
&gt; mechanisms.
&gt;
&gt;       Ppdd wants TWO 24 character passphrases (48 characters or more
&gt; total).  Is that sufficient?  Probably, in most cases.  :-)  Is it better
&gt; than 20?  Yeah, I think so, maybe...  Does it have any bearing what so
&gt; ever on whether or not 10 characters is insufficient?  No.
&gt;
&gt;       The argument was over the sufficiency of 10 characters.
&gt; Long term, non-volitile, crypto protected by only 60 bits worth of
&gt; "key" is subject to being brute force attacked given sufficient
&gt; time, equipment, and incentive on the part of the attacker.  You
&gt; really REALLY want to protect it?  You don't use 60 bits.

The last sentence is the point, I guess. 10 is too small. 20 is too small
unless it's completely random (120 bits). 80 is too small for plain English.

In general, the passphrase should contain at least as much entropy as the
key, or it's easier to brute force the passphrase than the key.

Sorry this has turned into something of an argument - really I should have
just made that point and left the discussion.

To the original poster: If you're using 256 bit AES, you should have
at least 256 bits of entropy in the passphrase - so for a completely
random alphanumeric passphrase, that's about 45 characters. For a section
of normal English it's about 170. For "randomised" English (for lack
of a better term) it's somewhere inbetween.

Now, what do people really use? Do they write them down? I store my
passphrases in a Palm encrypted under another passphrase.

        Stephen
--
Stephen Norris    srn@fn.com.au
Farrow Norris Pty Ltd   +61 417 243 239


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708003151</emailId><senderName>Stephen Robert Norris</senderName><senderEmail>srn@fn.com.au</senderEmail><timestampReceived>2001-07-08 00:31:51-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 04:33:46PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Dear list members:
&gt; 
&gt;         I must admit I find a great deal of this entire thread to be rather
&gt; entertaining. Unless I am mistaken, I watched two people just spend several
&gt; emails arguing over typing five characters at one point. How it is possible
&gt; you can have the time to care about cryptography to the extent to install
&gt; and use it, but not have the time to care to remember or type an additional
&gt; 5 characters, when its YOUR OWN DATA you are protecting, is far beyond the
&gt; scope of my comprehension.
&gt; 
&gt;         What is wrong with English sentences when mixed random words?
&gt; 
&gt;         Example: "The telephone is a useful invention! Grapes!" &lt;- this is
&gt; easy to remember, and it has 44 characters. I am curious if anyone has
&gt; written a script or C program to translate English text into
&gt; English/numerical text (hello to h3ll0).

I couldn't agree more.

However, your example is an extremely good example of what not to do.

It's 45 characters long. The first 36 are definately "normal english
text" - let's assign them 2 bits each (72 bits).

The rest is harder - let's pretend it's worth 3 bits each (24 bits). So that's
a total of 96 bits protecting your key...

Now, in reality it's easier than this - after all, an attacker can
try letters &amp; punctuation first, and you even obey normal capital placing
rules, so that simplifies things.

It's not a good passphrase. A random 10 character one might well be better!

I think my general complaint is that people's intuition about what makes
a good passphrase is bad :)

	Stephen

-- 
Stephen Norris	  srn@fn.com.au
Farrow Norris Pty Ltd	+61 417 243 239

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010708003434</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 00:34:34-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Norris, et al.:

	I claim the first amendment rights (a reference to the US constitution for
foreign nationals) of a newbie, to have no clear idea of exactly what is
best for my own good!

	That being said, and with all this clearly exact knowledge with regard to
pass phrases, what is the link to the pass phrase FAQ? Perhaps that will get
me more grounded in what is best.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 5:31 PM

-----Original Message-----
From: Stephen Robert Norris [mailto:srn@fn.com.au]
Sent: Saturday, July 07, 2001 5:32 PM
To: IT3 Stuart B. Tener, USNR-R
Cc: srn@fn.com.au; peter k.; Michael H. Warfield; Jari Ruusu;
linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Sat, Jul 07, 2001 at 04:33:46PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Dear list members:
&gt;
&gt;         I must admit I find a great deal of this entire thread to be
rather
&gt; entertaining. Unless I am mistaken, I watched two people just spend
several
&gt; emails arguing over typing five characters at one point. How it is
possible
&gt; you can have the time to care about cryptography to the extent to install
&gt; and use it, but not have the time to care to remember or type an
additional
&gt; 5 characters, when its YOUR OWN DATA you are protecting, is far beyond the
&gt; scope of my comprehension.
&gt;
&gt;         What is wrong with English sentences when mixed random words?
&gt;
&gt;         Example: "The telephone is a useful invention! Grapes!" &lt;- this is
&gt; easy to remember, and it has 44 characters. I am curious if anyone has
&gt; written a script or C program to translate English text into
&gt; English/numerical text (hello to h3ll0).

I couldn't agree more.

However, your example is an extremely good example of what not to do.

It's 45 characters long. The first 36 are definately "normal english
text" - let's assign them 2 bits each (72 bits).

The rest is harder - let's pretend it's worth 3 bits each (24 bits). So
that's
a total of 96 bits protecting your key...

Now, in reality it's easier than this - after all, an attacker can
try letters &amp; punctuation first, and you even obey normal capital placing
rules, so that simplifies things.

It's not a good passphrase. A random 10 character one might well be better!

I think my general complaint is that people's intuition about what makes
a good passphrase is bad :)

        Stephen

--
Stephen Norris    srn@fn.com.au
Farrow Norris Pty Ltd   +61 417 243 239


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708005026</emailId><senderName>Dave Wreski</senderName><senderEmail>dave@guardiandigital.com</senderEmail><timestampReceived>2001-07-08 00:50:26-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt;         That being said, and with all this clearly exact knowledge with regard to
&gt; pass phrases, what is the link to the pass phrase FAQ? Perhaps that will get
&gt; me more grounded in what is best.

The passphrase FAQ: (from alt.security or alt.pgp some years ago, I
believe)

http://www.linuxsecurity.com/resource_files/cryptography/passphrase-faq.html

Dave

--
Dave Wreski
Corporate Manager                           Guardian Digital, Inc.
(201) 934-9230                Pioneering.  Open Source.  Security.
dave@guardiandigital.com            http://www.guardiandigital.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708010003</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 01:00:03-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Dear Sir:

	Do you know if there is a PDF version of this FAQ?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 5:59 PM

-----Original Message-----
From: dave@mastermind.inside.guardiandigital.com
[mailto:dave@mastermind.inside.guardiandigital.com]On Behalf Of Dave Wreski
Sent: Saturday, July 07, 2001 5:50 PM
To: stuart@bh90210.net
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt;         That being said, and with all this clearly exact knowledge with
regard to
&gt; pass phrases, what is the link to the pass phrase FAQ? Perhaps that will
get
&gt; me more grounded in what is best.

The passphrase FAQ: (from alt.security or alt.pgp some years ago, I
believe)

http://www.linuxsecurity.com/resource_files/cryptography/passphrase-faq.html

Dave

--
Dave Wreski
Corporate Manager                           Guardian Digital, Inc.
(201) 934-9230                Pioneering.  Open Source.  Security.
dave@guardiandigital.com            http://www.guardiandigital.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708010858</emailId><senderName>Dave Wreski</senderName><senderEmail>dave@guardiandigital.com</senderEmail><timestampReceived>2001-07-08 01:08:58-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; Dear Sir:
&gt; 
&gt;         Do you know if there is a PDF version of this FAQ?

It may not be the prettiest, but a little html2ps and ps2pdf works
wonders sometimes:

http://www.linuxsecurity.com/resource_files/cryptography/passphrase-faq.pdf

Regards,
Dave

--
Dave Wreski
Corporate Manager                           Guardian Digital, Inc.
(201) 934-9230                Pioneering.  Open Source.  Security.
dave@guardiandigital.com            http://www.guardiandigital.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708015443</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-08 01:54:43-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 10:31:51AM +1000, Stephen Robert Norris wrote:
&gt; 
&gt; It's not a good passphrase. A random 10 character one might well be better!
&gt; 
&gt; I think my general complaint is that people's intuition about what makes
&gt; a good passphrase is bad :)

Here's an algorithm for choosing a strong pass phrase,
in case people are curious for one that's demonstrably
pretty strong[1].  Comments and corrections welcome.

1) Copy all words between 5 and 10 characters long
   from the /usr/share/dict/american-english file in a
   Debian system.  This procedure gives me 35,479 words,
   or about 15 bits of entropy per word provided they are
   chosen truly randomly.

   You might have to localize this procedure to your own
   system.  Just remember entropy == base 2 logarithm of
   number of choices iff they are truly unpredictable.

2) Select 5 words at random from the list.  Use /dev/random
   or another known good source of entropy.

3) Before each of the words, place a digit from one to
   eight.  Again, these should be chosen at random.

4) Add a space between words (this doesn't contribute
   entropy but helps readability if you want to write
   the passphrase down in your completely offline,
   double-secret hidey-hole, and seems to make the phrase
   easier for humans to remember--based on informal,
   empirical testing I have conducted).

   You'll now have a passphrase something like this:

   "5tornado 5archiver 1nightcap 8Haifa 7ballad"

   Such a passphrase has roughly 90 bits of entropy given
   a known choice of construction algorithm, since each
   random word choice contributes 15 bits and each random
   digit (one of eight) contributes 3 bits.

   The rationale for the numbers is to keep natural
   language word frequency from coming into play very much,
   as it might if someone were testing spaced-out English
   words without knowing your selection algorithm.

   =&gt; Ninety bits puts you well into "they'll break in
   and bug your keyboard first" territory provided your
   algorithms and other security factors are good.

5) Don't tell anyone you're using this algorithm.
   This will add more bits of entropy to your passphrase
   as a whole, since this passphrase space will become
   one of many that must be searched.

[1] Actually I'm grubbing for few more bits of entropy by
not revealing my _actual_ passphrase selection algorithm;
this is a variant :-).

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708030330</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 03:03:30-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Touloumtzis, et al.:

	Some ideas to increase entropy:

1) Randomizing the location of the number within each word add more entropy?
I noticed you consistently placed the number at the beginning of every word
2) Randomizing the capitalization change anything?
3) Random non-alphanumeric characters in random positions of each of the
words help?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 7:58 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Mike Touloumtzis
Sent: Saturday, July 07, 2001 6:55 PM
To: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Sun, Jul 08, 2001 at 10:31:51AM +1000, Stephen Robert Norris wrote:
&gt;
&gt; It's not a good passphrase. A random 10 character one might well be
better!
&gt;
&gt; I think my general complaint is that people's intuition about what makes
&gt; a good passphrase is bad :)

Here's an algorithm for choosing a strong pass phrase,
in case people are curious for one that's demonstrably
pretty strong[1].  Comments and corrections welcome.

1) Copy all words between 5 and 10 characters long
   from the /usr/share/dict/american-english file in a
   Debian system.  This procedure gives me 35,479 words,
   or about 15 bits of entropy per word provided they are
   chosen truly randomly.

   You might have to localize this procedure to your own
   system.  Just remember entropy == base 2 logarithm of
   number of choices iff they are truly unpredictable.

2) Select 5 words at random from the list.  Use /dev/random
   or another known good source of entropy.

3) Before each of the words, place a digit from one to
   eight.  Again, these should be chosen at random.

4) Add a space between words (this doesn't contribute
   entropy but helps readability if you want to write
   the passphrase down in your completely offline,
   double-secret hidey-hole, and seems to make the phrase
   easier for humans to remember--based on informal,
   empirical testing I have conducted).

   You'll now have a passphrase something like this:

   "5tornado 5archiver 1nightcap 8Haifa 7ballad"

   Such a passphrase has roughly 90 bits of entropy given
   a known choice of construction algorithm, since each
   random word choice contributes 15 bits and each random
   digit (one of eight) contributes 3 bits.

   The rationale for the numbers is to keep natural
   language word frequency from coming into play very much,
   as it might if someone were testing spaced-out English
   words without knowing your selection algorithm.

   =&gt; Ninety bits puts you well into "they'll break in
   and bug your keyboard first" territory provided your
   algorithms and other security factors are good.

5) Don't tell anyone you're using this algorithm.
   This will add more bits of entropy to your passphrase
   as a whole, since this passphrase space will become
   one of many that must be searched.

[1] Actually I'm grubbing for few more bits of entropy by
not revealing my _actual_ passphrase selection algorithm;
this is a variant :-).

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708043617</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-08 04:36:17-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; Mr. Touloumtzis, et al.:
&gt; 
&gt;         Some ideas to increase entropy:
&gt; 
&gt; 1) Randomizing the location of the number within each word add more entropy?
&gt; I noticed you consistently placed the number at the beginning of every word

An extra 2 to 3 bits per word, but harder to remember.

&gt; 2) Randomizing the capitalization change anything?

One bit per letter, harder to remember.

&gt; 3) Random non-alphanumeric characters in random positions of each of the
&gt; words help?

Quite a lot -- if it's one of 16 characters in one of four positions, that's
6 extra bits per word -- but likely very hard to remember.
 
&gt; Very Respectfully,
&gt; 
&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt; 
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt; 
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt; 
&gt; Saturday, July 07, 2001 7:58 PM
&gt; 
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Mike Touloumtzis
&gt; Sent: Saturday, July 07, 2001 6:55 PM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: Announce loop-AES-v1.3b file crypto package
&gt; 
&gt; On Sun, Jul 08, 2001 at 10:31:51AM +1000, Stephen Robert Norris wrote:
&gt; &gt;
&gt; &gt; It's not a good passphrase. A random 10 character one might well be
&gt; better!
&gt; &gt;
&gt; &gt; I think my general complaint is that people's intuition about what makes
&gt; &gt; a good passphrase is bad :)
&gt; 
&gt; Here's an algorithm for choosing a strong pass phrase,
&gt; in case people are curious for one that's demonstrably
&gt; pretty strong[1].  Comments and corrections welcome.
&gt; 
&gt; 1) Copy all words between 5 and 10 characters long
&gt;    from the /usr/share/dict/american-english file in a
&gt;    Debian system.  This procedure gives me 35,479 words,
&gt;    or about 15 bits of entropy per word provided they are
&gt;    chosen truly randomly.
&gt; 
&gt;    You might have to localize this procedure to your own
&gt;    system.  Just remember entropy == base 2 logarithm of
&gt;    number of choices iff they are truly unpredictable.
&gt; 
&gt; 2) Select 5 words at random from the list.  Use /dev/random
&gt;    or another known good source of entropy.
&gt; 
&gt; 3) Before each of the words, place a digit from one to
&gt;    eight.  Again, these should be chosen at random.
&gt; 
&gt; 4) Add a space between words (this doesn't contribute
&gt;    entropy but helps readability if you want to write
&gt;    the passphrase down in your completely offline,
&gt;    double-secret hidey-hole, and seems to make the phrase
&gt;    easier for humans to remember--based on informal,
&gt;    empirical testing I have conducted).
&gt; 
&gt;    You'll now have a passphrase something like this:
&gt; 
&gt;    "5tornado 5archiver 1nightcap 8Haifa 7ballad"
&gt; 
&gt;    Such a passphrase has roughly 90 bits of entropy given
&gt;    a known choice of construction algorithm, since each
&gt;    random word choice contributes 15 bits and each random
&gt;    digit (one of eight) contributes 3 bits.
&gt; 
&gt;    The rationale for the numbers is to keep natural
&gt;    language word frequency from coming into play very much,
&gt;    as it might if someone were testing spaced-out English
&gt;    words without knowing your selection algorithm.
&gt; 
&gt;    =&gt; Ninety bits puts you well into "they'll break in
&gt;    and bug your keyboard first" territory provided your
&gt;    algorithms and other security factors are good.
&gt; 
&gt; 5) Don't tell anyone you're using this algorithm.
&gt;    This will add more bits of entropy to your passphrase
&gt;    as a whole, since this passphrase space will become
&gt;    one of many that must be searched.
&gt; 
&gt; [1] Actually I'm grubbing for few more bits of entropy by
&gt; not revealing my _actual_ passphrase selection algorithm;
&gt; this is a variant :-).
&gt; 
&gt; miket
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708083739</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 08:37:39-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Ms. Harris, et al.:

        Given such a methodology as described below: we start at 90bits of
entropy, where do we end of if we fully implement this strategy?

        As well, where do we end up if we create 5 pass phrases using the
rules below, and each week we rotate from one of the five pass phrases?
Exactly where do we end up?

        I am thinking of writing a piece of software (in C) to generate such
passwords, has anyone thought about doing this? To do it I would need to
draw an exact set of rules for the software to follow, can we narrow it down
a bit, so that I can do this?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 1:31 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Sandy Harris
Sent: Saturday, July 07, 2001 9:36 PM
To: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;
&gt; Mr. Touloumtzis, et al.:
&gt;
&gt;         Some ideas to increase entropy:
&gt;
&gt; 1) Randomizing the location of the number within each word add more
entropy?
&gt; I noticed you consistently placed the number at the beginning of every
word

An extra 2 to 3 bits per word, but harder to remember.

&gt; 2) Randomizing the capitalization change anything?

One bit per letter, harder to remember.

&gt; 3) Random non-alphanumeric characters in random positions of each of the
&gt; words help?

Quite a lot -- if it's one of 16 characters in one of four positions, that's
6 extra bits per word -- but likely very hard to remember.

&gt; Very Respectfully,
&gt;
&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt;
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt;
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt;
&gt; Saturday, July 07, 2001 7:58 PM
&gt;
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Mike Touloumtzis
&gt; Sent: Saturday, July 07, 2001 6:55 PM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: Announce loop-AES-v1.3b file crypto package
&gt;
&gt; On Sun, Jul 08, 2001 at 10:31:51AM +1000, Stephen Robert Norris wrote:
&gt; &gt;
&gt; &gt; It's not a good passphrase. A random 10 character one might well be
&gt; better!
&gt; &gt;
&gt; &gt; I think my general complaint is that people's intuition about what makes
&gt; &gt; a good passphrase is bad :)
&gt;
&gt; Here's an algorithm for choosing a strong pass phrase,
&gt; in case people are curious for one that's demonstrably
&gt; pretty strong[1].  Comments and corrections welcome.
&gt;
&gt; 1) Copy all words between 5 and 10 characters long
&gt;    from the /usr/share/dict/american-english file in a
&gt;    Debian system.  This procedure gives me 35,479 words,
&gt;    or about 15 bits of entropy per word provided they are
&gt;    chosen truly randomly.
&gt;
&gt;    You might have to localize this procedure to your own
&gt;    system.  Just remember entropy == base 2 logarithm of
&gt;    number of choices iff they are truly unpredictable.
&gt;
&gt; 2) Select 5 words at random from the list.  Use /dev/random
&gt;    or another known good source of entropy.
&gt;
&gt; 3) Before each of the words, place a digit from one to
&gt;    eight.  Again, these should be chosen at random.
&gt;
&gt; 4) Add a space between words (this doesn't contribute
&gt;    entropy but helps readability if you want to write
&gt;    the passphrase down in your completely offline,
&gt;    double-secret hidey-hole, and seems to make the phrase
&gt;    easier for humans to remember--based on informal,
&gt;    empirical testing I have conducted).
&gt;
&gt;    You'll now have a passphrase something like this:
&gt;
&gt;    "5tornado 5archiver 1nightcap 8Haifa 7ballad"
&gt;
&gt;    Such a passphrase has roughly 90 bits of entropy given
&gt;    a known choice of construction algorithm, since each
&gt;    random word choice contributes 15 bits and each random
&gt;    digit (one of eight) contributes 3 bits.
&gt;
&gt;    The rationale for the numbers is to keep natural
&gt;    language word frequency from coming into play very much,
&gt;    as it might if someone were testing spaced-out English
&gt;    words without knowing your selection algorithm.
&gt;
&gt;    =&gt; Ninety bits puts you well into "they'll break in
&gt;    and bug your keyboard first" territory provided your
&gt;    algorithms and other security factors are good.
&gt;
&gt; 5) Don't tell anyone you're using this algorithm.
&gt;    This will add more bits of entropy to your passphrase
&gt;    as a whole, since this passphrase space will become
&gt;    one of many that must be searched.
&gt;
&gt; [1] Actually I'm grubbing for few more bits of entropy by
&gt; not revealing my _actual_ passphrase selection algorithm;
&gt; this is a variant :-).
&gt;
&gt; miket
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708091135</emailId><senderName>mr sam jooky</senderName><senderEmail>mrsamjooky@operamail.com</senderEmail><timestampReceived>2001-07-08 09:11:35-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

I was thinking that a company or other similar group who was
really concerned about randomness could purchase a mobile
driven by a fan and have the video from such fed to a
computer (the quantizing of the video supposedly adds to
the randomness). Then unique CDs could be ripped with seeds
or passphrases based on this high source of entropy and 
distributed from said trusted source. I guess there is the
question of once the source is comprimised then everyone
within the distribution looses, yet another reason to leave 
a live WEB cam running hehe

-------------------------------------------
The Fastest Browser on Earth now for FREE!!
Download Opera 5 for Windows now! Get it at
http://www.opera.com/download/
-------------------------------------------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708112720</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 11:27:20-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; Here's an algorithm for choosing a strong pass phrase,
&gt; in case people are curious for one that's demonstrably
&gt; pretty strong[1].  Comments and corrections welcome.
&gt;
&gt; 1) Copy all words between 5 and 10 characters long
&gt;    from the /usr/share/dict/american-english file in a
&gt;    Debian system.  This procedure gives me 35,479 words,
&gt;    or about 15 bits of entropy per word provided they are
&gt;    chosen truly randomly.
&gt;
&gt;    You might have to localize this procedure to your own
&gt;    system.  Just remember entropy == base 2 logarithm of
&gt;    number of choices iff they are truly unpredictable.
&gt;
&gt; 2) Select 5 words at random from the list.  Use /dev/random
&gt;    or another known good source of entropy.
&gt;
&gt; 3) Before each of the words, place a digit from one to
&gt;    eight.  Again, these should be chosen at random.
&gt;
&gt; 4) Add a space between words (this doesn't contribute
&gt;    entropy but helps readability if you want to write
&gt;    the passphrase down in your completely offline,
&gt;    double-secret hidey-hole, and seems to make the phrase
&gt;    easier for humans to remember--based on informal,
&gt;    empirical testing I have conducted).
&gt;
&gt;    You'll now have a passphrase something like this:
&gt;
&gt;    "5tornado 5archiver 1nightcap 8Haifa 7ballad"
&gt;
&gt;    Such a passphrase has roughly 90 bits of entropy given
&gt;    a known choice of construction algorithm, since each
&gt;    random word choice contributes 15 bits and each random
&gt;    digit (one of eight) contributes 3 bits.
&gt;
&gt;    The rationale for the numbers is to keep natural
&gt;    language word frequency from coming into play very much,
&gt;    as it might if someone were testing spaced-out English
&gt;    words without knowing your selection algorithm.
&gt;
&gt;    =&gt; Ninety bits puts you well into "they'll break in
&gt;    and bug your keyboard first" territory provided your
&gt;    algorithms and other security factors are good.
&gt;
&gt; 5) Don't tell anyone you're using this algorithm.
&gt;    This will add more bits of entropy to your passphrase
&gt;    as a whole, since this passphrase space will become
&gt;    one of many that must be searched.
&gt;
&gt; [1] Actually I'm grubbing for few more bits of entropy by
&gt; not revealing my _actual_ passphrase selection algorithm;
&gt; this is a variant :-).
&gt;

what do you think about my new method?
1) take a piece of paper and a pencil
2) write down 30 or 40 random characters of a-z and 0-9 using your brain as
a random character generator, i think thats the best and cheapest one you
can get ;)
you can also try using upper- and lowercase characters, maybe you'll be able
to learn them too.....but 30 characters of a-z and 0-9 are already 180 bits
which should be enough for AES128, right?
3) divide your new passphrase into parts of 5 characters which makes it easy
for you to memorize each part as a 'word', you can also use more characters
per part if your memory is better but you have to learn each part as a
'word' otherwise its harder to learn it
4) while you are learning the passphrase, hide the piece of paper somewhere
where nobody will find it, shouldn't be difficult for some days
5) after you've learned it, destroy the paper and flush it down the toilet
6) repeat your passphrase every day even after learning it so you won't
forget it!

i think thats definitely the best method as i just found out that its quite
easy to learn 30 random characters ;)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627123552</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-06-27 12:35:52-0400</timestampReceived><subject>Announce loop-AES-v1.3b file crypto package</subject><body>

In short: If file crypto is all you need, this package is a hassle free
replacement for international crypto patch.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. The AES cipher can be used to encrypt local file systems
and disk partitions. For more information about compiling and using the
driver, see the README file in the package.

Features:
- No source modifications to kernel. No patch hassles when a new version of
  kernel is released.
- Works with 2.4, 2.2 and 2.0 kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.

Changes since previous release:
- Mount and losetup programs now understand -p option to read password from
  file descriptor instead of terminal.
- Cipher tests now integrated into Makefile.
- Optional kernel 2.4 patch version included for those people who prefer not
  to use modules.
- Data corrupting bug with LVM has been fixed (kernel 2.4 only). Thanks to
  David Dodge for this bugfix.

I recommend that kernel 2.4 users upgrade to this version, especially if you
need encrypted loop devices on top of LVM. No need to upgrade if you use
older 2.2 or 2.0 kernels, unless you need the -p option of losetup or mount
program.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3b.tar.bz2
    md5sum a2c219436ae1679d869c8f3e9c69f1b9

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3b.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010706192634</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-06 19:26:34-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; In short: If file crypto is all you need, this package is a hassle free
&gt; replacement for international crypto patch.
&gt;
&gt; This package provides loadable Linux kernel module (loop.o) that has AES
&gt; cipher built-in. The AES cipher can be used to encrypt local file systems
&gt; and disk partitions. For more information about compiling and using the
&gt; driver, see the README file in the package.
&gt;
&gt; Features:
&gt; - No source modifications to kernel. No patch hassles when a new version
of
&gt;   kernel is released.
&gt; - Works with 2.4, 2.2 and 2.0 kernels.
&gt; - AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
&gt; - Passwords hashed with SHA-256, SHA-384 or SHA-512.
&gt; - 512 byte based IV. IV is immune to variations in transfer size and does
&gt;   not depend on file system block size.

i saw that in the readme: "Password string has a minimum length of 20
characters."
aren't 10 byte passwords enough? i dont like having to learn 20 byte
passwords =(

and which encryption type do you suggest? AES, AES128, AES192 or AES256?





Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707012312</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-07 01:23:12-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Fri, Jul 06, 2001 at 09:26:34PM +0200, peter k. wrote:
&gt; &gt; In short: If file crypto is all you need, this package is a hassle free
&gt; &gt; replacement for international crypto patch.

&gt; &gt; This package provides loadable Linux kernel module (loop.o) that has AES
&gt; &gt; cipher built-in. The AES cipher can be used to encrypt local file systems
&gt; &gt; and disk partitions. For more information about compiling and using the
&gt; &gt; driver, see the README file in the package.

&gt; &gt; Features:
&gt; &gt; - No source modifications to kernel. No patch hassles when a new version
&gt; of
&gt; &gt;   kernel is released.
&gt; &gt; - Works with 2.4, 2.2 and 2.0 kernels.
&gt; &gt; - AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
&gt; &gt; - Passwords hashed with SHA-256, SHA-384 or SHA-512.
&gt; &gt; - 512 byte based IV. IV is immune to variations in transfer size and does
&gt; &gt;   not depend on file system block size.

&gt; i saw that in the readme: "Password string has a minimum length of 20
&gt; characters."
&gt; aren't 10 byte passwords enough? i dont like having to learn 20 byte
&gt; passwords =(

	No, 10 byte passwords are NOT enough.  Given that they are
printable ascii characters and subject to a variety of other entropy
reducing issues, a password "byte" is probably only worth about 6
bits of entropy, maybe (probably) less.  That gives you only about
60 bits of strength against brute force.  Not enough...

	Rule of thumb...  (although all "rules of thumb are bad since
they lead to guessible patterns.)  Pass WORD is bad.  Pass PHRASE is
better.  Make it several words with number substitutions and odd
punctuation.  Make at LEAST one word misspelled, especially if the
mispelling is one of the numbers.  (Example: Wizard -&gt; W122@rd!).
The sillier (or obnoxious, or obscene) the better (easier to remember,
harder to guess).  Basic mnemonics.  You won't forget and
1t_wi11-b3=@.B1111t)H! t0 gu3ss..!  (it will be a bitch to guess) :-)

&gt; and which encryption type do you suggest? AES, AES128, AES192 or AES256?


&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707014113</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-07 01:41:13-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>


&gt; &gt; i saw that in the readme: "Password string has a minimum length of 20
&gt; &gt; characters."
&gt; &gt; aren't 10 byte passwords enough? i dont like having to learn 20 byte
&gt; &gt; passwords =(
&gt;
&gt; No, 10 byte passwords are NOT enough.  Given that they are
&gt; printable ascii characters and subject to a variety of other entropy
&gt; reducing issues, a password "byte" is probably only worth about 6
&gt; bits of entropy, maybe (probably) less.  That gives you only about
&gt; 60 bits of strength against brute force.  Not enough...
&gt;
&gt; Rule of thumb...  (although all "rules of thumb are bad since
&gt; they lead to guessible patterns.)  Pass WORD is bad.  Pass PHRASE is
&gt; better.  Make it several words with number substitutions and odd
&gt; punctuation.  Make at LEAST one word misspelled, especially if the
&gt; mispelling is one of the numbers.  (Example: Wizard -&gt; W122@rd!).
&gt; The sillier (or obnoxious, or obscene) the better (easier to remember,
&gt; harder to guess).  Basic mnemonics.  You won't forget and
&gt; 1t_wi11-b3=@.B1111t)H! t0 gu3ss..!  (it will be a bitch to guess) :-)

well, im usually using passwords like "4wj8s06bj2" or "7e1t91436g", not any
english or whatever words!!
so if i would have to learn a 20 byte password in that format it would be
like "v1872cqad730lbsq53i8" or "0v7g25y0mp49n26yrntb" and learning that isnt
easy, is it? ;)




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707020332</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-07 02:03:32-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 03:41:13AM +0200, peter k. wrote:

&gt; &gt; &gt; i saw that in the readme: "Password string has a minimum length of 20
&gt; &gt; &gt; characters."
&gt; &gt; &gt; aren't 10 byte passwords enough? i dont like having to learn 20 byte
&gt; &gt; &gt; passwords =(

&gt; &gt; No, 10 byte passwords are NOT enough.  Given that they are
&gt; &gt; printable ascii characters and subject to a variety of other entropy
&gt; &gt; reducing issues, a password "byte" is probably only worth about 6
&gt; &gt; bits of entropy, maybe (probably) less.  That gives you only about
&gt; &gt; 60 bits of strength against brute force.  Not enough...

&gt; &gt; Rule of thumb...  (although all "rules of thumb are bad since
&gt; &gt; they lead to guessible patterns.)  Pass WORD is bad.  Pass PHRASE is
&gt; &gt; better.  Make it several words with number substitutions and odd
&gt; &gt; punctuation.  Make at LEAST one word misspelled, especially if the
&gt; &gt; mispelling is one of the numbers.  (Example: Wizard -&gt; W122@rd!).
&gt; &gt; The sillier (or obnoxious, or obscene) the better (easier to remember,
&gt; &gt; harder to guess).  Basic mnemonics.  You won't forget and
&gt; &gt; 1t_wi11-b3=@.B1111t)H! t0 gu3ss..!  (it will be a bitch to guess) :-)

&gt; well, im usually using passwords like "4wj8s06bj2" or "7e1t91436g", not any
&gt; english or whatever words!!
&gt; so if i would have to learn a 20 byte password in that format it would be
&gt; like "v1872cqad730lbsq53i8" or "0v7g25y0mp49n26yrntb" and learning that isnt
&gt; easy, is it? ;)

	But that still doesn't buy you as much entropy as using a
longer passphrase that is mnemonic and easier to remember.  Even if
you ASSUME that you can use totally random characters, that only
approaches 7 bits per character (but can never reach it) and is
still less than the strength of a well formed 20 character mnemonic
pass phrase that's easier to remember.

	BTW...  Count yourself LUCKY!  The $#@$#@$#@ ppdd encryption
package requires TWO 24-character passphrases!  That package has some
major advantages over the loopback packages like this, because it
encrypts a "session key" (a random key that you don't really control)
which allows for a "master key" and a "working key", each of which can
decrypt the session key that unlocks the drive.  Another advantage to
that package is encrypting the root drive (anyone work out how to do
that with this package?).

	Now...  Note...  That's two 24-character passphrases for EACH
master key and each working key.  You have to enter BOTH passphrases
of either the master key or the working key to unlock the drive.

	I'm looking at taking advantage of the two passphrase system
to generate a boot CD with one passphrase and a "smart card" with the
other passphrase, requiring that you have both to boot the system or
even access the root file system (the PIN on the smart card makes it
even tougher to bust even with the exposed passphrase on the CD).

	The MAJOR disadvantages to his system is some pedantic requirements
on block sizes, restriction to ext2(3) and major problems with the 2.4.x
kernels.

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707074328</emailId><senderName>Stephen Robert Norris</senderName><senderEmail>srn@fn.com.au</senderEmail><timestampReceived>2001-07-07 07:43:28-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Fri, Jul 06, 2001 at 10:03:32PM -0400, Michael H. Warfield wrote:
&gt; On Sat, Jul 07, 2001 at 03:41:13AM +0200, peter k. wrote:
&gt; 
&gt; &gt; &gt; &gt; i saw that in the readme: "Password string has a minimum length of 20
&gt; &gt; &gt; &gt; characters."
&gt; &gt; &gt; &gt; aren't 10 byte passwords enough? i dont like having to learn 20 byte
&gt; &gt; &gt; &gt; passwords =(
&gt; 
&gt; &gt; &gt; No, 10 byte passwords are NOT enough.  Given that they are
&gt; &gt; &gt; printable ascii characters and subject to a variety of other entropy
&gt; &gt; &gt; reducing issues, a password "byte" is probably only worth about 6
&gt; &gt; &gt; bits of entropy, maybe (probably) less.  That gives you only about
&gt; &gt; &gt; 60 bits of strength against brute force.  Not enough...
&gt; 
&gt; &gt; &gt; Rule of thumb...  (although all "rules of thumb are bad since
&gt; &gt; &gt; they lead to guessible patterns.)  Pass WORD is bad.  Pass PHRASE is
&gt; &gt; &gt; better.  Make it several words with number substitutions and odd
&gt; &gt; &gt; punctuation.  Make at LEAST one word misspelled, especially if the
&gt; &gt; &gt; mispelling is one of the numbers.  (Example: Wizard -&gt; W122@rd!).
&gt; &gt; &gt; The sillier (or obnoxious, or obscene) the better (easier to remember,
&gt; &gt; &gt; harder to guess).  Basic mnemonics.  You won't forget and
&gt; &gt; &gt; 1t_wi11-b3=@.B1111t)H! t0 gu3ss..!  (it will be a bitch to guess) :-)
&gt; 
&gt; &gt; well, im usually using passwords like "4wj8s06bj2" or "7e1t91436g", not any
&gt; &gt; english or whatever words!!
&gt; &gt; so if i would have to learn a 20 byte password in that format it would be
&gt; &gt; like "v1872cqad730lbsq53i8" or "0v7g25y0mp49n26yrntb" and learning that isnt
&gt; &gt; easy, is it? ;)
&gt; 
&gt; 	But that still doesn't buy you as much entropy as using a
&gt; longer passphrase that is mnemonic and easier to remember.  Even if
&gt; you ASSUME that you can use totally random characters, that only
&gt; approaches 7 bits per character (but can never reach it) and is
&gt; still less than the strength of a well formed 20 character mnemonic
&gt; pass phrase that's easier to remember.

Is this really true? According to Shnier's book, English text has
about 1.5 bits of entropy/letter - a random password has about 6,
so your passphrase will have to be a good deal longer, even with mis-spelt
words...

Mind you, I always use pass phrases when I can - but I whack in random
digits &amp; punctuation to keep it interesting...

	Stephen
-- 
Stephen Norris	  srn@fn.com.au
Farrow Norris Pty Ltd	+61 417 243 239

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010707084856</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-07 08:48:56-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 05:43:28PM +1000, Stephen Robert Norris wrote:
&gt; On Fri, Jul 06, 2001 at 10:03:32PM -0400, Michael H. Warfield wrote:
&gt; &gt; On Sat, Jul 07, 2001 at 03:41:13AM +0200, peter k. wrote:
&gt; &gt; 
&gt; &gt; &gt; &gt; &gt; i saw that in the readme: "Password string has a minimum length of 20
&gt; &gt; &gt; &gt; &gt; characters."
&gt; &gt; &gt; &gt; &gt; aren't 10 byte passwords enough? i dont like having to learn 20 byte
&gt; &gt; &gt; &gt; &gt; passwords =(
&gt; &gt; 
&gt; &gt; &gt; &gt; No, 10 byte passwords are NOT enough.  Given that they are
&gt; &gt; &gt; &gt; printable ascii characters and subject to a variety of other entropy
&gt; &gt; &gt; &gt; reducing issues, a password "byte" is probably only worth about 6
&gt; &gt; &gt; &gt; bits of entropy, maybe (probably) less.  That gives you only about
&gt; &gt; &gt; &gt; 60 bits of strength against brute force.  Not enough...
&gt; &gt; 
&gt; &gt; &gt; &gt; Rule of thumb...  (although all "rules of thumb are bad since
&gt; &gt; &gt; &gt; they lead to guessible patterns.)  Pass WORD is bad.  Pass PHRASE is
&gt; &gt; &gt; &gt; better.  Make it several words with number substitutions and odd
&gt; &gt; &gt; &gt; punctuation.  Make at LEAST one word misspelled, especially if the
&gt; &gt; &gt; &gt; mispelling is one of the numbers.  (Example: Wizard -&gt; W122@rd!).
&gt; &gt; &gt; &gt; The sillier (or obnoxious, or obscene) the better (easier to remember,
&gt; &gt; &gt; &gt; harder to guess).  Basic mnemonics.  You won't forget and
&gt; &gt; &gt; &gt; 1t_wi11-b3=@.B1111t)H! t0 gu3ss..!  (it will be a bitch to guess) :-)
&gt; &gt; 
&gt; &gt; &gt; well, im usually using passwords like "4wj8s06bj2" or "7e1t91436g", not any
&gt; &gt; &gt; english or whatever words!!
&gt; &gt; &gt; so if i would have to learn a 20 byte password in that format it would be
&gt; &gt; &gt; like "v1872cqad730lbsq53i8" or "0v7g25y0mp49n26yrntb" and learning that isnt
&gt; &gt; &gt; easy, is it? ;)
&gt; &gt; 
&gt; &gt; 	But that still doesn't buy you as much entropy as using a
&gt; &gt; longer passphrase that is mnemonic and easier to remember.  Even if
&gt; &gt; you ASSUME that you can use totally random characters, that only
&gt; &gt; approaches 7 bits per character (but can never reach it) and is
&gt; &gt; still less than the strength of a well formed 20 character mnemonic
&gt; &gt; pass phrase that's easier to remember.

&gt; Is this really true? According to Shnier's book, English text has
&gt; about 1.5 bits of entropy/letter - a random password has about 6,
&gt; so your passphrase will have to be a good deal longer, even with mis-spelt
&gt; words...

	Read carefully what I said.  I said that "even if you ASSUME
that you can use totally random characters, that only approaches
7 bits".  That means that it never reaches it.  If you disallow all
control characters, you lose another "1/2 bit" and a little white
space, a few fragments more.  If you were to ASSUME totally random
printing characters, then you end up with something slightly less
96 characters (95) which is about half way between 6 bits and 7 bits.
You CAN (in some cases) use control characters in passphrases but not
in all cases (^A, ^B - probably, ^S, ^Q - I think not :-) ), so that
only helps a little and gets you a little closer (approaches) to 7.
The real point is that it's a BAD ASSUMPTION and you can never really
reach 7 bits, so 6 is more realistic (and is why that's what I used
in my first message).

&gt; Mind you, I always use pass phrases when I can - but I whack in random
&gt; digits &amp; punctuation to keep it interesting...

	Second part of the statement "is still less than the strength
of a 20 character mnemonic pass phrase" you have to go back to my
earlier message.  I also said to use misspelling and odd numbers and
punctuation, so that's not "English text".  So it sounds like we are
in strong agreement here.  So what's the "Is this really true" question?

&gt; 	Stephen
&gt; -- 
&gt; Stephen Norris	  srn@fn.com.au
&gt; Farrow Norris Pty Ltd	+61 417 243 239

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707103347</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-07 10:33:47-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>


&gt; &gt; well, im usually using passwords like "4wj8s06bj2" or "7e1t91436g", not
any
&gt; &gt; english or whatever words!!
&gt; &gt; so if i would have to learn a 20 byte password in that format it would
be
&gt; &gt; like "v1872cqad730lbsq53i8" or "0v7g25y0mp49n26yrntb" and learning that
isnt
&gt; &gt; easy, is it? ;)
&gt;
&gt; But that still doesn't buy you as much entropy as using a
&gt; longer passphrase that is mnemonic and easier to remember.  Even if
&gt; you ASSUME that you can use totally random characters, that only
&gt; approaches 7 bits per character (but can never reach it) and is
&gt; still less than the strength of a well formed 20 character mnemonic
&gt; pass phrase that's easier to remember.
&gt;

ok, then i'll use a 20 byte password =/
btw, are 20 bytes enough or only the minimum? lol
and are there some docs on the security of all those ciphers like AES,
serpent, whatever?
for example, when using that 20 byte password with AES, whats the
probability that someone will be able to decrypt it without bruteforcing for
years?
im still trying to find out whats the best cipher / encryption package (like
kernli, loop-AES) to use for getting the maximum security [with the shortest
passwords even maybe?] ;)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707105923</emailId><senderName>Stephen Robert Norris</senderName><senderEmail>srn@fn.com.au</senderEmail><timestampReceived>2001-07-07 10:59:23-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 04:48:56AM -0400, Michael H. Warfield wrote:
&gt; On Sat, Jul 07, 2001 at 05:43:28PM +1000, Stephen Robert Norris wrote:
&gt; &gt; &gt; 	But that still doesn't buy you as much entropy as using a
&gt; &gt; &gt; longer passphrase that is mnemonic and easier to remember.  Even if
&gt; &gt; &gt; you ASSUME that you can use totally random characters, that only
&gt; &gt; &gt; approaches 7 bits per character (but can never reach it) and is
&gt; &gt; &gt; still less than the strength of a well formed 20 character mnemonic
&gt; &gt; &gt; pass phrase that's easier to remember.
&gt; 
&gt; &gt; Is this really true? According to Shnier's book, English text has
&gt; &gt; about 1.5 bits of entropy/letter - a random password has about 6,
&gt; &gt; so your passphrase will have to be a good deal longer, even with mis-spelt
&gt; &gt; words...
&gt; 
&gt; 	Read carefully what I said.  I said that "even if you ASSUME
&gt; that you can use totally random characters, that only approaches
&gt; 7 bits".  That means that it never reaches it.  If you disallow all
&gt; control characters, you lose another "1/2 bit" and a little white
&gt; space, a few fragments more.  If you were to ASSUME totally random
&gt; printing characters, then you end up with something slightly less
&gt; 96 characters (95) which is about half way between 6 bits and 7 bits.
&gt; You CAN (in some cases) use control characters in passphrases but not
&gt; in all cases (^A, ^B - probably, ^S, ^Q - I think not :-) ), so that
&gt; only helps a little and gets you a little closer (approaches) to 7.
&gt; The real point is that it's a BAD ASSUMPTION and you can never really
&gt; reach 7 bits, so 6 is more realistic (and is why that's what I used
&gt; in my first message).

I'm not sure what the point of this is - _I_ said it was about 6, so
you're arguing I'm wrong, because it's a bit _higher_? Which supports
the original point.

Let's say we get 10 characters at 6 bits/character = 60 bits.

Let's be generous and say it's 2 bits/character for our modified English
phrase - that means we need a 30 character passphrase.

I guess my point is that saying it has to be at least 20 characters
is meaningless; I can come up with 10 character passwords that
have vastly more entropy than a 20 character English passphrase 
(60 vs 30 bits).

It seems that the 20 is really an arbitrary number that just happens to
suit the way _some people_ like to chose passphrases...

	Stephen

-- 
Stephen Norris	  srn@fn.com.au
Farrow Norris Pty Ltd	+61 417 243 239

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010708113723</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-07-08 11:37:23-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, 8 Jul 2001, peter k. wrote:

&gt; 2) write down 30 or 40 random characters of a-z and 0-9 using your brain as
&gt; a random character generator, i think thats the best and cheapest one you
&gt; can get ;)

the human brain is a quite poor entropy-source.
use the real stuff.

Gruss,
  Hauke

-- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708114816</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 11:48:16-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>


&gt; &gt; 2) write down 30 or 40 random characters of a-z and 0-9 using your brain
as
&gt; &gt; a random character generator, i think thats the best and cheapest one
you
&gt; &gt; can get ;)
&gt;
&gt; the human brain is a quite poor entropy-source.
&gt; use the real stuff.

what!!? well, this could be true but then it only applies to people with low
intelligence!
i bet both of us can write down 30 random characters without any relation
between them so whats the problem about that??!!



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708120916</emailId><senderName>Stephen Robert Norris</senderName><senderEmail>srn@fn.com.au</senderEmail><timestampReceived>2001-07-08 12:09:16-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 01:48:16PM +0200, peter k. wrote:
&gt; 
&gt; &gt; &gt; 2) write down 30 or 40 random characters of a-z and 0-9 using your brain
&gt; as
&gt; &gt; &gt; a random character generator, i think thats the best and cheapest one
&gt; you
&gt; &gt; &gt; can get ;)
&gt; &gt;
&gt; &gt; the human brain is a quite poor entropy-source.
&gt; &gt; use the real stuff.
&gt; 
&gt; what!!? well, this could be true but then it only applies to people with low
&gt; intelligence!
&gt; i bet both of us can write down 30 random characters without any relation
&gt; between them so whats the problem about that??!!

I can't tell whether this is meant to be a joke or not!

I hope it is. People are _really_ bad at picking random things - try
an experiment - ask a group of people to pick a random number. You'll be
surprised...

	Stephen
-- 
Stephen Norris	  srn@fn.com.au
Farrow Norris Pty Ltd	+61 417 243 239

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010708123241</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 12:32:41-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt;&gt; what!!? well, this could be true but then it only applies to people with
low
&gt;&gt; intelligence!
&gt;&gt; i bet both of us can write down 30 random characters without any relation
&gt;&gt; between them so whats the problem about that??!!
&gt;
&gt;I can't tell whether this is meant to be a joke or not!
&gt;
&gt;I hope it is. People are _really_ bad at picking random things - try
&gt;an experiment - ask a group of people to pick a random number. You'll be
&gt;surprised...

it is not, for example, i just generated that *using my brain*:
"s4k1f62rni7q"
tell me why it isnt random!!!



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708125143</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 12:51:43-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter:

	It is not random, because, people cannot have random thoughts. The Zohar
(the text on Jewish mysticism) says we receive only thoughts, which will
help us correct ourselves into better people, or do a job to help others
around us correct themselves. Thus, nothing we think or do is random, but is
programmed for our own correction we must work to achieve in each lifetime
as inscribed by G-D.

	However, events (not thoughts) have much more random nature to them. While
even events (from G-Ds view) are not random, to use their sequence and
placement seems so, providing a level of randomness sufficient for the
purposes at hand. However, according to Kabbalah (Jewish Mysticism, and the
"new" physics), there is no randomness in the world at all. The new physics
says that it was a random strike of lightening which first created life,
but, how can we say life's creation (a monumentus occasion in world history)
could have been random if we believe in g-d?

	Therefore, it is the appearance of randomness we are looking for, and such
appearance needs to come from events so unrelated that we cannot access the
attributes to "de randomize" their reconnection. Thus if you pick the 3rd
verb printed in the front page of the wall street journal every day, the 9th
adjective, and the 20th preposition, they are so unrelated that we presume
them random. Yet in fact, those words are not random, they are part of an
order (the article we are reading) which is unrelated to the more grand
random nature we see in picking those words. So to are our thoughts, when
you think our thoughts are random, your are not viewing them from G-Ds view.
Since G-Ds work is far less random than the words appearing in the Wall
Street Journal, do you think it safe to use human thought to protect your
data?

	Remember, we have power and ability beyond even our own comprehension. So,
if you randomly picked 5 numbers every day, after a year, you would see a
pattern. One which you didn't even realize, but was always there. Our brains
can do things we don't realize, and that is at the influence of G-D. We are
not good randomization engines.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 5:36 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of peter k.
Sent: Sunday, July 08, 2001 5:33 AM
To: srn@fn.com.au
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt;&gt; what!!? well, this could be true but then it only applies to people with
low
&gt;&gt; intelligence!
&gt;&gt; i bet both of us can write down 30 random characters without any relation
&gt;&gt; between them so whats the problem about that??!!
&gt;
&gt;I can't tell whether this is meant to be a joke or not!
&gt;
&gt;I hope it is. People are _really_ bad at picking random things - try
&gt;an experiment - ask a group of people to pick a random number. You'll be
&gt;surprised...

it is not, for example, i just generated that *using my brain*:
"s4k1f62rni7q"
tell me why it isnt random!!!



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708132337</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 13:23:37-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

 &gt; It is not random, because, people cannot have random thoughts. The Zohar
&gt; (the text on Jewish mysticism) says we receive only thoughts, which will
&gt; help us correct ourselves into better people, or do a job to help others
&gt; around us correct themselves. Thus, nothing we think or do is random, but
is
&gt; programmed for our own correction we must work to achieve in each lifetime
&gt; as inscribed by G-D.
 your brain is a bunch of billiards of neurons which work together in a huge
biochemical reaction, there is much randomness (note that its not the main
part, otherwise you couldnt be intelligent) because its a reaction between
so many parts

&gt; However, events (not thoughts) have much more random nature to them. While
&gt; even events (from G-Ds view) are not random, to use their sequence and
&gt; placement seems so, providing a level of randomness sufficient for the
&gt; purposes at hand. However, according to Kabbalah (Jewish Mysticism, and
the
&gt; "new" physics), there is no randomness in the world at all. The new
physics
&gt; says that it was a random strike of lightening which first created life,
&gt; but, how can we say life's creation (a monumentus occasion in world
history)
&gt; could have been random if we believe in g-d?
i do not believe in god, sorry but nobody managed to prove its existence yet
while we have already lots of proves for the big bang [i could mention
*lots* of arguments againts the existence of 'god' but this shouldnt get a
religious discussion]

&gt; Therefore, it is the appearance of randomness we are looking for, and such
&gt; appearance needs to come from events so unrelated that we cannot access
the
&gt; attributes to "de randomize" their reconnection. Thus if you pick the 3rd
&gt; verb printed in the front page of the wall street journal every day, the
9th
&gt; adjective, and the 20th preposition, they are so unrelated that we presume
&gt; them random. Yet in fact, those words are not random, they are part of an
&gt; order (the article we are reading) which is unrelated to the more grand
&gt; random nature we see in picking those words. So to are our thoughts, when
&gt; you think our thoughts are random, your are not viewing them from G-Ds
view.
&gt; Since G-Ds work is far less random than the words appearing in the Wall
&gt; Street Journal, do you think it safe to use human thought to protect your
&gt; data?
thats the same process i use to generate random characters using my brain, i
pick each letter randomly out of my thoughts but its better because you cant
read my brain if you know that my passphrases came from there like you can
do with the wallstreet journal

&gt; Remember, we have power and ability beyond even our own comprehension. So,
&gt; if you randomly picked 5 numbers every day, after a year, you would see a
&gt; pattern. One which you didn't even realize, but was always there. Our
brains
&gt; can do things we don't realize, and that is at the influence of G-D. We
are
&gt; not good randomization engines.

well, searching for patterns in random numbers created by a human over a
year is a good idea, but i still dont think that you would find any patterns
which would allow you to predict the next random number you would generate
as you have different thoughts every day, hour, even evey second which are
influenced by the randomness of your brain and by everything you see, hear
and feel which is usually random
and dont forget that we were originally talking about encryption! if someone
wants to crack my AES128 encrypted drive he doesnt know any passwords i
created so he cant know any patterns in my thoughts if they really exist and
so he wont be able to guess the 40 random characters!



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708160944</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-08 16:09:44-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 02:32:41PM +0200, peter k. wrote:
&gt; &gt;&gt; what!!? well, this could be true but then it only applies to people with
&gt; low
&gt; &gt;&gt; intelligence!
&gt; &gt;&gt; i bet both of us can write down 30 random characters without any relation
&gt; &gt;&gt; between them so whats the problem about that??!!

&gt; &gt;I can't tell whether this is meant to be a joke or not!

&gt; &gt;I hope it is. People are _really_ bad at picking random things - try
&gt; &gt;an experiment - ask a group of people to pick a random number. You'll be
&gt; &gt;surprised...

&gt; it is not, for example, i just generated that *using my brain*:
&gt; "s4k1f62rni7q"
&gt; tell me why it isnt random!!!

	It contains no upper case letters and no punctuation.  It is
not random in the sense that it obeys a rule that improves the ability
to crack the password.

&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708162518</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-08 16:25:18-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"peter k." wrote:

&gt; &gt;I hope it is. People are _really_ bad at picking random things - try
&gt; &gt;an experiment - ask a group of people to pick a random number. You'll be
&gt; &gt;surprised...
&gt; 
&gt; it is not, for example, i just generated that *using my brain*:
&gt; "s4k1f62rni7q"
&gt; tell me why it isnt random!!!

Your string has 12 characters, perhaps from a set of about 32
(lowercase + digits) or 64 (both cases + digits) choices, so there
could be 5 or 6 bits of randomness per character, 60 to 72 bits
overall.

Experiments have actually been run on this. Ask a bunch of people to
generate random strings, then do statistical analysis of the strings.
The analysis shows them falling far short of full randomness.

Suppose you use such strings as passwords and I don my Black Hat and
try to crack them. If you're using a high-quality random source, I
have more work to do, on average, than if you used humans and I use
statistical info on human biases to guide my search.

I'm not sure how large this effect is, but it is there.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708164443</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 16:44:43-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; &gt; &gt;I hope it is. People are _really_ bad at picking random things - try
&gt; &gt; &gt;an experiment - ask a group of people to pick a random number. You'll
be
&gt; &gt; &gt;surprised...
&gt; &gt;
&gt; &gt; it is not, for example, i just generated that *using my brain*:
&gt; &gt; "s4k1f62rni7q"
&gt; &gt; tell me why it isnt random!!!
&gt;
&gt; Your string has 12 characters, perhaps from a set of about 32
&gt; (lowercase + digits) or 64 (both cases + digits) choices, so there
&gt; could be 5 or 6 bits of randomness per character, 60 to 72 bits
&gt; overall.
&gt;
&gt; Experiments have actually been run on this. Ask a bunch of people to
&gt; generate random strings, then do statistical analysis of the strings.
&gt; The analysis shows them falling far short of full randomness.
&gt;
&gt; Suppose you use such strings as passwords and I don my Black Hat and
&gt; try to crack them. If you're using a high-quality random source, I
&gt; have more work to do, on average, than if you used humans and I use
&gt; statistical info on human biases to guide my search.
&gt;
&gt; I'm not sure how large this effect is, but it is there.

i dont think that this effect can be large, there are too many things which
influence the way you choose random characters and i use a very long time
for choosing them (like 10 minutes for 30 bytes) which should prevent me
from using my biases =/

all this mess with crypto is making me go nuts, first internal crypto patch
doesnt work so i have to use loop AES, then it says "at least 20 bytes
passwords" but i dont know in what format they should be and how i should
create them
i still invite anyone to tell me if a 30 byte a-z and 0-9 password created
using my brain as a random character generator is enough for AES128 or what
i should use for creating the damn thing and how long it has to be




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708170935</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-08 17:09:35-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 06:44:43PM +0200, peter k. wrote:
	[...]

&gt; all this mess with crypto is making me go nuts, first internal crypto patch
&gt; doesnt work so i have to use loop AES, then it says "at least 20 bytes
&gt; passwords" but i dont know in what format they should be and how i should
&gt; create them

	Well, I, for one, would love to know if there is any intention
on fixing the problems in the kerneli stuff.  I'm also now avoiding it
and playing with the loop AES package for that reason.

&gt; i still invite anyone to tell me if a 30 byte a-z and 0-9 password created
&gt; using my brain as a random character generator is enough for AES128 or what
&gt; i should use for creating the damn thing and how long it has to be

	Well, a-z and 0-9 gives you 36 characters.  That's slightly over 5
bits, if, and only if, it's truely random (which is highly questionable).
That would give you 150 bits which exceeds the 128 bit hash in AES128.  So
on a purely numeric basis, if you are willing to trust your selection
process (which you appear to be willing to do) I would have to say that
your passphrase appears to have more entropy than the actual hash key and
would be stronger to a brute force attack.

	No one can tell you if this is "enough" because now one can tell
if using YOUR brain as a random number generator is sufficient (MINE
certainly is NOT) and we don't know what your criterion of "enough"
is.  "Enough" for what?  I can only state assumptions (assuming that
it's truely random) and compare strengths in the crypto.  Those have the
conditions defined.  Your question of "enough" does not have the
conditions truely defined for a definitive answer.

	At best, using your brain as a random number generator can only
approach a true random number generator.  Which then begs the question
"Why don't you just use a true random number generator?"

	Why not write a perl script or something to read from /dev/random
and generate random numbers?  If there is something objectionable to
doing than and preferential to using your brain, I can guarantee that
you have just proven that using your brain is NOT a random number generator
(by the very nature of that preference).

&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708174542</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-08 17:45:42-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, 8 Jul 2001, Michael H. Warfield wrote:
&gt; On Sun, Jul 08, 2001 at 06:44:43PM +0200, peter k. wrote:
&gt; 	[...]
&gt;
&gt;&gt; all this mess with crypto is making me go nuts, first internal crypto patch
&gt;&gt; doesnt work so i have to use loop AES, then it says "at least 20 bytes
&gt; 	Well, I, for one, would love to know if there is any intention
&gt; on fixing the problems in the kerneli stuff.  I'm also now avoiding it
&gt; and playing with the loop AES package for that reason.

the international crypto patch has received a bit of criticism few months
ago, so I became a bit unmotivated...

...but if there is enough demand I would work on it again and try to fix
some of the bigger show stoppers, but I don't want to replace Alexander
Kjeldaas if he's still working on the official international crypto patch,
and maybe he has already some unreleased fixes waiting...

the plans were, if I remember correctly, to make the crypto api that
generic as to allow other kernelspace projects making use of encryption,
most prominently network encryption projects, to use the crypto api as a
common cipher repository... or to put it in other words, to implement
kernel encryption services, maybe even allow support for ciphers
implemented in hardware...

... :)
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708175438</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 17:54:38-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; At best, using your brain as a random number generator can only
&gt; approach a true random number generator.  Which then begs the question
&gt; "Why don't you just use a true random number generator?"
&gt;
&gt; Why not write a perl script or something to read from /dev/random
&gt; and generate random numbers?  If there is something objectionable to
&gt; doing than and preferential to using your brain, I can guarantee that
&gt; you have just proven that using your brain is NOT a random number
generator
&gt; (by the very nature of that preference).

/dev/random is only pseudo-random, isnt it? i'd have to buy a hardware
random number generator if i wanted it to be as random as my brain!?
and then the script is on my hd so an attacker knows how the password was
generated, how long it is, what kind of characters it contains, etc, isnt
that bad?
besides, im too lazy for coding such a perl script, i would rather download
a nice password generator from somewhere ;)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708180147</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-08 18:01:47-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; the international crypto patch has received a bit of criticism few months
&gt; ago, so I became a bit unmotivated...
&gt;
&gt; ...but if there is enough demand I would work on it again and try to fix
&gt; some of the bigger show stoppers, but I don't want to replace Alexander
&gt; Kjeldaas if he's still working on the official international crypto patch,
&gt; and maybe he has already some unreleased fixes waiting...
&gt;
&gt; the plans were, if I remember correctly, to make the crypto api that
&gt; generic as to allow other kernelspace projects making use of encryption,
&gt; most prominently network encryption projects, to use the crypto api as a
&gt; common cipher repository... or to put it in other words, to implement
&gt; kernel encryption services, maybe even allow support for ciphers
&gt; implemented in hardware...

IMHO there HAS TO BE full crypto stuff in the kernel and full support for
encrypting file systems as those features are very useful
if the current international crypto patch isnt ok then there should be a new
one created, but not having crypto features officially in the kernel sux =(



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708184314</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-08 18:43:14-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 07:54:38PM +0200, peter k. wrote:
&gt; &gt; At best, using your brain as a random number generator can only
&gt; &gt; approach a true random number generator.  Which then begs the question
&gt; &gt; "Why don't you just use a true random number generator?"
&gt; &gt;
&gt; &gt; Why not write a perl script or something to read from /dev/random
&gt; &gt; and generate random numbers?  If there is something objectionable to
&gt; &gt; doing than and preferential to using your brain, I can guarantee that
&gt; &gt; you have just proven that using your brain is NOT a random number
&gt; generator
&gt; &gt; (by the very nature of that preference).

&gt; /dev/random is only pseudo-random, isnt it? i'd have to buy a hardware
&gt; random number generator if i wanted it to be as random as my brain!?
&gt; and then the script is on my hd so an attacker knows how the password was
&gt; generated, how long it is, what kind of characters it contains, etc, isnt
&gt; that bad?
&gt; besides, im too lazy for coding such a perl script, i would rather download
&gt; a nice password generator from somewhere ;)

	1) As it so happens, a pseudo random number generator would
probably be better since it pretty much guarentees a uniform distribution
of results (which is actually a measurement of the effectiveness of the
generator) which a true random number generator would not.  The difference
is subtle and whether you consider a true random number generator
superior to a pseudo random number generator depends on your application
and preferences.  For these purposes, it probably doesn't make a whole
heck of a lot of difference.

	2) /dev/random is closer to a true random number generator
since it gathers entropy from a number of disrelated sources (interrupts,
keystrokes, system calls, timers, etc, etc) than it is to a pseudo
random number generator (which is generally based on a mathematically
algorithm).  Since much of the entropy from /dev/random comes from
hardware sources, you're not going to get much better, short of a
random number generator based on diode junction quantum noise or
radioactive decay.

	3) You're still making the false assumption that your brain is
a good random number generator.  It's not.  No matter which way you
cut it, your brain is biased.  "Oh, an "A" would look pretty here."
Since you are within your own brain, you are NOT an unbiased observer
of it's workings and (by a little information theory) are incapable
of judging (or even understanding) fully it's own workings.  The best
you could do is use some outside influence (dice, cards, /dev/random,
etc) to provide random input to your though processes and you would
still impose your own biases on the process with no way to detect those
biases.  Whether or not your brain would be a good random number
generator (and I believe that the weight of opinion is that it would not
be), you are incapable of judging whether it would be simply because
you would not see your own biases.  You can't judge it's randomness
based on some proceedure you propose to imploy.  You can only judge
it through impartial, unbiased, testing of the output it generates.
You can't do that for yourself.

	Although...  Now that I think about it, it would be amusing to
subject you to some of the "randomness" tests that pseudo random number
generators are subjected to.  Let's see...  Generate 10,000,000 random
16-bit integers and let's test the distribution for uniform randomness...
That might give us a start.  :-)

	I found it interesting that you assumed that /dev/random was
a pseudo random number generator.  There are many good pseudo random
number generators implimented in software algorithms alone (one could
argue that all of them are).  There is no need for a device in /dev,
or any kernel interaction at all, to impliment a pseudo random number
generator.  Most of those are simple libraries of functions.  Just
initialize with some see value and extract to your hearts content.
The fact that pseudo random number generators can be implimented as
libraries of functions alone, should have told you that /dev/random
was something significantly different, since it's not.

	/dev/random is an entropy gathering device and an entropy
pool.  When it runs out of entropy, you actually block on the device
until the driver has a chance to accumulate more from the various sources
within the kernel.  That's not a pseudo random process taking place.
Now, you can question the randomness of the various sources of entropy.
I won't argue about that.  I'll only argue that the driver has been
subjected to various tests for randomness and other crypto packages
find /dev/random type devices preferable to other sources, especially
pseudo random devices.

	I would take the random output from /dev/random over your brain,
or my brain, or any brain at any time.  The brain is NOT random.  It
IS chaotic.  There is a subtle, but significant, difference which a
little study of fractal theory and chaos theory would illuminate for you.

	But that would REALLY be getting off topic here and this thread
has probably gone on for much longer than is productive.

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709210155</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-09 21:01:55-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Mon, 9 Jul 2001, Jari Ruusu wrote:
&gt; &gt; patch-int-2.4.6.bz2 available from HVR's web site is still the same time
&gt; &gt; bomb waiting to explode as patch-int-2.4.3.1.bz2.
&gt; &gt;
&gt; &gt; Have you actually audited that code?
&gt; &gt;
&gt; &gt; I have audited some of it. Conclusion: BROKEN
&gt; 
&gt; ...do you mind sharing your thoughts with us? :-)
&gt; but please, don't tell me again, to give up on the crypto API... ;-)
&gt; 
&gt; since I'm quite determined to fix all problems, it would be usefull to
&gt; have a definite list of them...
&gt; 
&gt; btw, the non-reentrant part has been almost fixed... but it's not
&gt; released yet.
&gt; 
&gt; if you are refering to the IV overflow, that's going to be addressed as
&gt; well rsn...
&gt; 
&gt; as to the patch-int vs cryptoapi, the patch-int-2.4.6.bz2 actually nothing
&gt; more than a patch-int-2.4.3.1 applied against a 2.4.6...
&gt; 
&gt; so they are both the same...

Just like I said, same time bomb.

Known problems, at this time:
1)  IV has be 512 byte based, each 512 byte chunk must be independent
2)  non-re-entrant ciphers
3)  Follow this thread, there is a patch:
    http://marc.theaimsgroup.com/?l=linux-kernel&amp;m=99314207620322&amp;w=2

All of the above problems are fixed in loop-AES.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709210223</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 21:02:23-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Riedel:

        I think publishing the code (even if partially completed) will help
stimulate people to evaluate what direction it is going in, and what is
being worked on. In addition, perhaps, maybe, you will have to do a little
less work if someone actually goes and fixes a bug for you! Absent the
possibility of an ego the size of Mars (just kidding you don't seem
egotistical), I am sure you would appreciate the help!


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 1:59 PM

-----Original Message-----
From: Herbert Valerio Riedel [mailto:hvr@hvrlab.org]
Sent: Monday, July 09, 2001 1:30 PM
To: Jari Ruusu
Cc: Dale Amon; IT3 Stuart B. Tener, USNR-R; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Mon, 9 Jul 2001, Jari Ruusu wrote:

&gt; Dale Amon wrote:
&gt; &gt; On Sun, Jul 08, 2001 at 06:39:16PM -0700, IT3 Stuart B. Tener, USNR-R
wrote:
&gt; &gt; &gt; a) It installed flawlessly (though I did install the standard Linus
version
&gt; &gt; &gt; of 2.4.6 kernel first)
&gt; &gt; &gt; b) I created a loop back device with it, and in fact was able to
mkreiserfs
&gt; &gt; &gt; on the device, mount it, and write data to it with crypto above the
&gt; &gt; &gt; mkreiserfs
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; Likewise, I have been using the 2.4.3 international patch
&gt; &gt; and running multiple machines with reiserfs on top of a
&gt; &gt; crypto loopback on top of a raw raid1 set for over 4 months
&gt; &gt; and have had no problem.
&gt; &gt;
&gt; &gt; I have applied the international patches and built kernels
&gt; &gt; for a large number of machines, from laptops to desktop to
&gt; &gt; servers, all without pain or bother.
&gt; &gt;
&gt; &gt; I have had exactly zero trouble with the international
&gt; &gt; patches except for the cases where they seriously lagged
&gt; &gt; mainstream kernel release.
&gt;
&gt; patch-int-2.4.6.bz2 available from HVR's web site is still the same time
&gt; bomb waiting to explode as patch-int-2.4.3.1.bz2.
&gt;
&gt; Have you actually audited that code?
&gt;
&gt; I have audited some of it. Conclusion: BROKEN

...do you mind sharing your thoughts with us? :-)
but please, don't tell me again, to give up on the crypto API... ;-)

since I'm quite determined to fix all problems, it would be usefull to
have a definite list of them...

btw, the non-reentrant part has been almost fixed... but it's not
released yet.

if you are refering to the IV overflow, that's going to be addressed as
well rsn...

as to the patch-int vs cryptoapi, the patch-int-2.4.6.bz2 actually nothing
more than a patch-int-2.4.3.1 applied against a 2.4.6...

so they are both the same...

greetings,
--
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709210231</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 21:02:31-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu:

        You keep claiming that the I-patch is broken, but in reality, it is
only broken with regard to SMP users. I would venture to guess that you are
speaking about a very minute community of users whom are thus attempting to
use Crypto patches on SMP boxes, however I do appreciate your desire to warn
that community of potential hazards.

        Nevertheless, it does seem that you have almost a tone of arrogance
or religious divergence to using the I-patch / crypto API. Mr. Riedel has
indicated on several occasions his desire to access and service the "BROKEN"
(as you state) code sections in an effort to subvert the bugs you proclaim.
Do you have some commercial interest in simply continuing to rant and rave
about these bugs, or you have a true desire to assist in a team effort to
effectuate a solution? Granted I appreciate that your free time is your free
and you can do as you wish with it, but I am saddened by seeing several
technical experts having such trouble to work together.

        Your point regarding the 2.4.6 patch being a "rehash" of the 2.4.3.1
patch with no real fixes is well taken, I personally did not realize that,
but it is useful to know.

        For the most part I think most users here would love to see a fully
kernel integrated crypto solution which covers the entire OS as a whole,
leveraging crypto technology all throughout Linux. I believe this is why
people are trying to continue to work or figure out what you seem to know
about what is broken pursuant to the I-patch.

        My final suggestion and conclusion is that if you and Mr. Riedel
could work out your personal and philosophical differences and cooperatively
work to resolve the I-patch issues you would be doing a grand service to a
fair community of people. Why not take the advantages of your AES Loop
software, and blend it into the I-patch while working to resolve current
I-patch issues as well. I personally will go so far as to say thank you (in
advance) and well after you would complete such an effort.

        As well I would hope that Mr. Riedel would also post (on the web or
mailing list) his work thus far so it can be evaluated by people such as
yourself so we can all participate in the development effort, even if it is
not yet completely finished to date. This will most likely stimulate a more
comfortable environment for us all to work on changes and patches for the
I-patch. Perhaps an online CVS tree would help so we call can track and
participate in the effort to resolve these issues.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 1:33 PM

-----Original Message-----
From: root@Misty.com [mailto:root@Misty.com]On Behalf Of Jari Ruusu
Sent: Monday, July 09, 2001 1:16 PM
To: Dale Amon
Cc: IT3 Stuart B. Tener, USNR-R; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

Dale Amon wrote:
&gt; On Sun, Jul 08, 2001 at 06:39:16PM -0700, IT3 Stuart B. Tener, USNR-R
wrote:
&gt; &gt; a) It installed flawlessly (though I did install the standard Linus
version
&gt; &gt; of 2.4.6 kernel first)
&gt; &gt; b) I created a loop back device with it, and in fact was able to
mkreiserfs
&gt; &gt; on the device, mount it, and write data to it with crypto above the
&gt; &gt; mkreiserfs
&gt; &gt;
&gt;
&gt; Likewise, I have been using the 2.4.3 international patch
&gt; and running multiple machines with reiserfs on top of a
&gt; crypto loopback on top of a raw raid1 set for over 4 months
&gt; and have had no problem.
&gt;
&gt; I have applied the international patches and built kernels
&gt; for a large number of machines, from laptops to desktop to
&gt; servers, all without pain or bother.
&gt;
&gt; I have had exactly zero trouble with the international
&gt; patches except for the cases where they seriously lagged
&gt; mainstream kernel release.

patch-int-2.4.6.bz2 available from HVR's web site is still the same time
bomb waiting to explode as patch-int-2.4.3.1.bz2.

Have you actually audited that code?

I have audited some of it. Conclusion: BROKEN

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709210925</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 21:09:25-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter:

I did not try Mr. Ruusu's command line code. However, I am curious about
something, are you arguing that the output was too few characters to be
useful as strong pass phrase, or that you just didn't like the difficulty
factor to remembering such output?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 2:07 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of peter k.
Sent: Monday, July 09, 2001 12:28 PM
To: Jari Ruusu
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt; &gt; (2) maybe there should be a prog written which creates passwords for the
&gt; &gt; user using /dev/random and it could be also included in loop-AES [and
future
&gt; &gt; international kernel patches]
&gt;
&gt; dd if=/dev/random bs=15 count=1 2&gt;/dev/null | uuencode -m /dev/stdout |
tail -2 | tac | tail -1

that outputs very bad stuff like "A+Y="


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709211740</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-09 21:17:40-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         You keep claiming that the I-patch is broken, but in reality, it is
&gt; only broken with regard to SMP users.

The biggest problem I have with the I-patch is that it is totally broken
in regards to backwards compatability. loopfs made with I-patch 2.2 are
totally unreadable under 2.4. What scares me here is that the I-patch
authors have stated they have no idea why!!

That alone is enough to make me wary of the current I-patch ;)

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709212218</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-09 21:22:18-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; I did not try Mr. Ruusu's command line code. However, I am curious about
&gt; something, are you arguing that the output was too few characters to be
&gt; useful as strong pass phrase, or that you just didn't like the difficulty
&gt; factor to remembering such output?

it was often too few characters and if it made a long output it was
difficult to remember
and it doesnt use 0-9 often i think
its output is just too random ;)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709212850</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-09 21:28:50-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; Just like I said, same time bomb.
&gt;
&gt; Known problems, at this time:
&gt; 1)  IV has be 512 byte based, each 512 byte chunk must be independent
&gt; 2)  non-re-entrant ciphers
&gt; 3)  Follow this thread, there is a patch:
&gt;     http://marc.theaimsgroup.com/?l=linux-kernel&amp;m=99314207620322&amp;w=2
&gt;
&gt; All of the above problems are fixed in loop-AES.

well then go fix them in I-patch and make your AES able to plug into it so
it can be released together with the I-patch

why dont you understand that its necessary to have 'official' crypto stuff
for the kernel rather than telling everyone who asks for crypto that the
official crypto sux and that he should use loop-AES?!!?




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709213326</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-07-09 21:33:26-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:

&gt;         You keep claiming that the I-patch is broken, but in reality, it is
&gt; only broken with regard to SMP users. I would venture to guess that you are

i am using the int-patch on 2.2.x series kernel for quite some time now, 
also on SMP boxes, without any operational problem.

but i have to admit that i am currently evaluating loopAES as a
replacement since i am quite fed up with manually merging lots of
rejected chunks when trying to apply the int-patch on anything 
but a vanilla kernel. 
(non-vanilla code i am currently using in different combinations: 
 usagi, mipsel-kernel, xfs, reiserfs, freeswan)

the main advantage of the loopAES code is imho that it does only
do minor changes to the kernelcode and strictly sticks to its own 
turf (aka loop.c). 

next thing on the list for trying is HVRs repackaged int-patch
which does look a lot better than the original patchmess.

Gruss,
  Hauke

-- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709213852</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-09 21:38:52-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt; 
&gt;         You keep claiming that the I-patch is broken, but in reality, it is
&gt; only broken with regard to SMP users. I would venture to guess that you are
&gt; speaking about a very minute community of users whom are thus attempting to
&gt; use Crypto patches on SMP boxes, however I do appreciate your desire to warn
&gt; that community of potential hazards.

Wrong. The block size thing is a time bomb. Just follow the links I posted
earlier. Non-re-entrant ciphers also means that cryptoapi kills the
scheduling latency of high priority realtime tasks on UP.
 
&gt;         Nevertheless, it does seem that you have almost a tone of arrogance
&gt; or religious divergence to using the I-patch / crypto API. Mr. Riedel has
&gt; indicated on several occasions his desire to access and service the "BROKEN"
&gt; (as you state) code sections in an effort to subvert the bugs you proclaim.
&gt; Do you have some commercial interest in simply continuing to rant and rave
&gt; about these bugs, or you have a true desire to assist in a team effort to
&gt; effectuate a solution? Granted I appreciate that your free time is your free
&gt; and you can do as you wish with it, but I am saddened by seeing several
&gt; technical experts having such trouble to work together.

If Mr. Riedel ignores stuff that I send to him, that can hardly be my fault.

And regarding assisting int. crypto patch development, Mr. Kjeldaas said
"no" to my improvements and fixes to int. crypto patch. So, I built a better
one.

I don't have any commercial intrests on loop-AES.

&gt;         My final suggestion and conclusion is that if you and Mr. Riedel
&gt; could work out your personal and philosophical differences and cooperatively
&gt; work to resolve the I-patch issues you would be doing a grand service to a
&gt; fair community of people. Why not take the advantages of your AES Loop
&gt; software, and blend it into the I-patch while working to resolve current
&gt; I-patch issues as well. I personally will go so far as to say thank you (in
&gt; advance) and well after you would complete such an effort.

See my previous comment.

Mr Tener, why don't you audit both loop-AES and int. crypto patch. You will
soon realize meaning of fatware, and that it just does not belong in kernel.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709214113</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-07-09 21:41:13-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Mon, 9 Jul 2001, peter k. wrote:

&gt; why dont you understand that its necessary to have 'official' crypto stuff
&gt; for the kernel rather than telling everyone who asks for crypto that the
&gt; official crypto sux and that he should use loop-AES?!!?

why dont you understand that there is no "official" crypto stuff?
who decides which of the varying implementations is the "official" one? 
so far none of them got integrated into the main kernel tree.

the loopAES package actualy is a "fix" for the main problem of the
int-patch (ie the problems when applying it), if you can live
with the reduced featureset (ie all you want is loopback-encryption).

(this is getting a religious discussion. i still prefer the "less
 code"-strategy.)

Gruss,
  Hauke

-- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709215608</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-09 21:56:08-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Tue, 10 Jul 2001, Jari Ruusu wrote:
&gt; The block size thing is a time bomb.

This particular problem has blown up in my face several times. :(
Fortunately, I now know how to defuse it :D

But it's best if this problem didn't exist in the first place. It's such
an obvious problem I can't understand why it exists at all any more.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709215609</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-09 21:56:09-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; &gt; why dont you understand that its necessary to have 'official' crypto
stuff
&gt; &gt; for the kernel rather than telling everyone who asks for crypto that the
&gt; &gt; official crypto sux and that he should use loop-AES?!!?
&gt;
&gt; why dont you understand that there is no "official" crypto stuff?
&gt; who decides which of the varying implementations is the "official" one?
&gt; so far none of them got integrated into the main kernel tree.

from the view of a user, official is what you can download from
kernel(i).org
a user wants to be able to go to kernel(i).org, download a kernel, compile
it with crypto support, setup &amp; mount a loopback device and hide his
important files, p0rn, whatsoever there without taking care if he is using
the right crypto package!
so this should be made possible IMHO instead of creating 1000 crypto
packages each with its own advantages and disadvantages and all that kernel
patching/compiling/installing mess



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709232512</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 23:25:12-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Johannknecht, et al.:

	By having a website like "kerneli.org", and having it linked up to
kernel.org (an official kernel site), people are getting a very powerful and
distinct message that the I-patch is in fact an official release. That is
why people see it how they do. If you do not think there is an "official"
crypto stuff kernel, go look at the site. Anyone whom went to see it for the
first time would a very strong feeling its official, so I think your being a
bit obstinate to think otherwise.

	I (and I presume others) am a miss as to why if code can be written
independently of the kernel, why no one can integrate it into the kernel.
After all, I OWN MY COMPUTER, and if feel that a kernel patch outweighs only
have a single piece of functionality (just loop back aes) then it is my
choice to make. Nevertheless, we should get whatever "fixes" you speak of
integrated into the I-patch as well.

	Whatever strategy you choose "less-code" or "more kernel", the choices
ought to exist for individuals to make, that is my point. In addition, those
choices ought to be integrated into the I-patch.

	Now how terrible is the I-patch? Well let us evaluate the issues:

a) You must have SMP to appreciate the re-entrant code problem, and even if
that were not true, as per the author of the I-patch, it will soon be
resolved in the next release
b) IV problem: well this can easily be worked around by issuing a mkfs
command specifying a block size which is conducive (4096 I think, or 512 I
forget which) to the I-patch

Oh my, look what happened, no more bugs! Can it be? Maybe the I-patch is not
broken!


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:12 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hauke Johannknecht
Sent: Monday, July 09, 2001 2:41 PM
To: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Mon, 9 Jul 2001, peter k. wrote:

&gt; why dont you understand that its necessary to have 'official' crypto stuff
&gt; for the kernel rather than telling everyone who asks for crypto that the
&gt; official crypto sux and that he should use loop-AES?!!?

why dont you understand that there is no "official" crypto stuff?
who decides which of the varying implementations is the "official" one?
so far none of them got integrated into the main kernel tree.

the loopAES package actualy is a "fix" for the main problem of the
int-patch (ie the problems when applying it), if you can live
with the reduced featureset (ie all you want is loopback-encryption).

(this is getting a religious discussion. i still prefer the "less
 code"-strategy.)

Gruss,
  Hauke

--
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709232517</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 23:25:17-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter:

	For once I agree with you.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:22 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of peter k.
Sent: Monday, July 09, 2001 2:56 PM
To: linux-crypto@nl.linux.org
Cc: Hauke Johannknecht
Subject: Re: Announce loop-AES-v1.3b file crypto package

&gt; &gt; why dont you understand that its necessary to have 'official' crypto
stuff
&gt; &gt; for the kernel rather than telling everyone who asks for crypto that the
&gt; &gt; official crypto sux and that he should use loop-AES?!!?
&gt;
&gt; why dont you understand that there is no "official" crypto stuff?
&gt; who decides which of the varying implementations is the "official" one?
&gt; so far none of them got integrated into the main kernel tree.

from the view of a user, official is what you can download from
kernel(i).org
a user wants to be able to go to kernel(i).org, download a kernel, compile
it with crypto support, setup &amp; mount a loopback device and hide his
important files, p0rn, whatsoever there without taking care if he is using
the right crypto package!
so this should be made possible IMHO instead of creating 1000 crypto
packages each with its own advantages and disadvantages and all that kernel
patching/compiling/installing mess



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711201321</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-11 20:13:21-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sat, Jul 07, 2001 at 08:03:30PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Touloumtzis, et al.:
&gt; 
&gt; 	Some ideas to increase entropy:
&gt; 
&gt; 1) Randomizing the location of the number within each word add more entropy?
&gt; I noticed you consistently placed the number at the beginning of every word
&gt; 2) Randomizing the capitalization change anything?
&gt; 3) Random non-alphanumeric characters in random positions of each of the
&gt; words help?

Hello Mr. Tener,

Sandy Harris already responded to this, so I'll mostly just agree
with him: these things all add entropy, but (IMHO) they disrupt the
balance between getting enough entropy and being able to remember
the passphrase.  The simple "number + word" combination has the
advantage that remembering each element of the passphrase just
means remembering the number and the word.

In practice, this often means remembering the word and relying on
memory's inherent associativity to bring the number along.  When you
start "tacking on" more information in each group, I think it would
start getting harder to remember out of proportion to the amount
of entropy added.

For example, randomly putting the number at the beginning or end of
the word only adds 5 bits of entropy to the passphrase construction
algorithm, as Sandy pointed out; if you use 8 punctuation characters
in addition to the 8 numbers, that's only another 5 bits (16 values
instead of 8 only add 1 bit of entropy).  In contrast, adding
another number + letter pair adds 18, and would probably be easier
to remember.

Generating strong passphrase data is easy; just choose a truly
random value N bits long.  The challenge is in constructing a useful
mapping from the space of N-bit strings to the space of character
strings which can (a) be typed, and (b) be memorized.

In my previous mail, I neglected to mention another advantage of
random-word-selection algorithms and similar approaches, as opposed
to trying to come up with unguessable natural language passphrases:
it's much safer to split the passphrase in half (thus requiring two
people to be present to type in the two halves) if you don't use
natural language.  In order to be able to split a passphrase P into
two substrings P1 and P2, you want the conditional probablility of
P1 given P2 to be the same as the probability of P1, and vice versa.
In other words, you don't want any redundancy across the split.

In a random word selection algorithm, you can safely split between
words, since the selection of each word is independent from the
others.  For example, you could generate a 10-word+number phrase
given the algorithm I described and give 5 words to each person.
Each of those people would still have to confront a 90 bit search
space to get the other person's half (that is, they would have to
brute force it).  In contrast, natural language strings contain
redundancy that often spans the length of the string (even if it's
an entire document, in the case of well-known documents), making
such a simple split very unsafe.

As an example: suppose your passphrase selection algorithm was
to interleave word-by-word four lines chosen independently and at
random from the complete works of Shakespeare.  This would result in
obnoxiously long passphrases, but they would be reasonably strong
(about 70 bits of entropy) because Shakespeare wrote a heck of a
lot :-).

However, you couldn't split such a phrase into two substrings
safely; at least one of the recipients (both, if it's a 1/2-1/2
split) would be able to compute the entire passphrase trivially,
since there is so much redundancy within the phrase.  You can split
such a phrase safely by generating a random string R and using [R,
XOR(passphrase, R)] as the split, but I'm assuming you want each
of the people to be able to memorize her half.

Of course, the Right Way to do this (and the only way to do
it if your requirements are more involved) is to use an M-of-N
secret splitting algorithm.  But a simple substring split can
be convenient, for example in an office context where people are
basically considered trustworthy, but where you still want to have
two people present to generate a signature for a software release.

regards,
miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711214228</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-11 21:42:28-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Sun, Jul 08, 2001 at 01:37:39AM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Ms. Harris, et al.:
&gt; 
&gt; Given such a methodology as described below: we start at 90bits of
&gt; entropy, where do we end of if we fully implement this strategy?

You can have as many bits as you want if you're willing to use a
long enough passphrase.  At a certain point you'll have to start
writing them down, though.  This is probably OK if you're the average
forgetful Joe and the risk of irrevocably losing your data outweighs
the risk of someone violating the physical security of your home,
office safe deposit box, etc. order to get the passphrase.

It's not a good idea if you're a hard-core cypherpunk, are at risk
of law enforcement investigation or intrusive subpoena, or are just
playing with crypto because it's fun and don't have any important
data under encryption :-).

&gt; As well, where do we end up if we create 5 pass phrases using the
&gt; rules below, and each week we rotate from one of the five pass phrases?
&gt; Exactly where do we end up?

Each passphrase is independent of all others, and should be secure.
Choosing how often to rotate passphrases is something else entirely;
it depends on your assessment of risk of compromise as a function
of time, severity of compromise, and risk associated with passphrase
changes.  I can't really comment on that.

&gt; 
&gt;         I am thinking of writing a piece of software (in C) to generate such
&gt; passwords, has anyone thought about doing this? To do it I would need to
&gt; draw an exact set of rules for the software to follow, can we narrow it down
&gt; a bit, so that I can do this?

A program that implements the algorithm I described is attached.
It would be cool if folks on the list would check it over for
correctness.  This implementation loads the whole dictionary into
memory so be careful with those really huge dictionaries :-).

miket

["passphrase.c" (text/x-csrc)]

/*
 * passphrase.c: Generate a random passphrase which can
 *               probably be memorized.
 *
 * Copyright 2001 Michael P. Touloumtzis.
 *
 * Available under the "BSD license":
 *
 * Permission is hereby granted, free of charge, to any
 * person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in
 * the Software without restriction, including without
 * limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice
 * shall be included in all copies or substantial portions
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL MICHAEL P.
 * TOULOUMTZIS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include &lt;assert.h&gt;
#include &lt;errno.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;inttypes.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;

#define NUM_OUTPUT_WORDS 5
#define WORD_LENGTH_MIN 5
#define WORD_LENGTH_MAX 10

#define DICT_RANDOM_BITS 15
#define DICT_RANDOM_COUNT (1 &lt;&lt; DICT_RANDOM_BITS)
#define DICT_RANDOM_MASK (DICT_RANDOM_COUNT - 1)

static char *exename;
static char *wordlist [DICT_RANDOM_COUNT];
static size_t wordlistsize = sizeof wordlist / sizeof *wordlist;

static FILE *ro_fopen(const char *pathname);
static int ro_open(const char *pathname);
static ssize_t xread(int fd, void *buf, size_t count);
static ssize_t xaread(int fd, void *buf, size_t count);
static char *xstrdup(const char *s);

/* load word array from word-per-line dictionary */
static void load_words(const char *dictname)
{
	char buf [128];	/* longer than any word */
	FILE *dict;
	size_t i = 0;

	dict = ro_fopen(dictname);
	while (i &lt; wordlistsize &amp;&amp; fgets(buf, sizeof buf, dict)) {
		size_t len;
		char *ptr;

		assert(strlen(buf) &lt; sizeof buf);
		if ((ptr = strchr(buf, '\n')))
			*ptr = '\0';
		len = strlen(buf);
		if (len &gt;= WORD_LENGTH_MIN &amp;&amp; len &lt;= WORD_LENGTH_MAX)
			wordlist[i++] = xstrdup(buf);
	}
	if (i != wordlistsize) {
		fprintf(stderr, "%s: not enough words in %s between %d "
				"and %d letters long.\n%s: (need %d)\n",
				exename, dictname, WORD_LENGTH_MIN,
				WORD_LENGTH_MAX, exename, wordlistsize);
		exit(EXIT_FAILURE);
	}
}

/* read-only stream open or die */
static FILE *ro_fopen(const char *pathname)
{
	FILE *stream;
	if (!(stream = fopen(pathname, "r"))) {
		perror("fopen");
		fprintf(stderr, "%s: can't open %s for reading\n",
			exename, pathname);
		exit(EXIT_FAILURE);
	}
	return stream;
}

/* read-only fd open or die */
static int ro_open(const char *pathname)
{
	int fd;
	if ((fd = open(pathname, O_RDONLY)) == -1) {
		perror("open");
		fprintf(stderr, "%s: can't open %s for reading\n",
			exename, pathname);
		exit(EXIT_FAILURE);
	}
	return fd;
}

/* read or die, ignore interruptions */
ssize_t xread(int fd, void *buf, size_t count)
{
	ssize_t retval;
	do {
		retval = read(fd, buf, count);
	} while ((retval &lt; 0) &amp;&amp; (errno == EINTR));
	if (retval &lt; 0) {
		perror("read");
		exit(EXIT_FAILURE);
	}
	return retval;
}

/* read entire buffer or die */
ssize_t xaread(int fd, void *buf, size_t count)
{
	unsigned char *cbuf = buf;
	int nread = 1, remain;
	for (remain = count; nread &amp;&amp; remain; remain -= nread)
		cbuf += (nread = xread(fd, cbuf, remain));
	return count;
}

/* duplicate string or die */
static char *xstrdup(const char *s)
{
	char *d = strdup(s);
	if (!d) {
		fprintf(stderr, "%s: virtual memory exhausted\n", exename);
		exit(EXIT_FAILURE);
	}
	return d;
}


int main(int argc, char *argv[])
{
	int i, rfd;
	char *ptr;

	exename = (ptr = strrchr(argv[0], '/')) ? (ptr+1) : argv[0];
	if (argc != 2) {
		fprintf(stderr, "%s: usage: '%s &lt;path-to-dictionary&gt;'\n",
			exename, exename);
		exit(EXIT_FAILURE);
	}
	rfd = ro_open("/dev/random");
	load_words(argv[1]);

	for (i=NUM_OUTPUT_WORDS; i; --i) {
		const char *word;
		uint32_t rbits;

		/* get 32 random bits */
		xaread(rfd, &amp;rbits, sizeof rbits);

		/* choose + print random word and number */
		word = wordlist[rbits &amp; DICT_RANDOM_MASK];
		assert(DICT_RANDOM_BITS + 3 &lt;= 32);
		rbits &gt;&gt;= DICT_RANDOM_BITS;
		printf("%d%s%c", (rbits &amp; 7) + 1, word, (i == 1) ? '\n' : ' ');
	}
	return 0;
}


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010711221000</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-11 22:10:00-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Miket:

	It really made no sense to me to here you say that having as many bits as
you want is not a safe thing to do as juxtaposed against a backdrop of
security for purposes of a threat of law enforcement investigation,
intrusive subpoena or just playing with crypto. I presume you meant that
there must be a minimum number of bits to have. I personally am not breaking
the law, nor am I worried about being served with any intrusive subpoena,
but I do believe in having a level of encryption able to be stronger than
what would be subvertable by average law enforcement only as a bar to
measure up against how strong my encryption methodology and implementation
is.

	Are you saying that the implementations of crypto this group is using are
not strong enough to subvert even law enforcement? I would tend to disagree
with that, since the NSA is using AES! I think you had better think again
about what you just said, I doubt anyone will take those words too
seriously.

	I think that without having to learn a great deal about the rules of
entropy weighting, and such, a nice thing to do would be to determine (I
think Peter will wonder about this too), what would provide a strong and
usable encryption standard for appliance operator users? I am not so into
crypto that I care to learn all about entropy and such, I am interested in
learning some basic rules, which I can apply to using these technologies.

a) What encryption standard is strongest, and can be used to not slow my
work down to such a point that I start to dislike using the encryption at
all? I will presume that AES falls into this category
b) What rules ought we follow to generate a useful pass phrase, which will
keep us secure? I do not intend to write it down, I will learn it, no matter
how difficult, because it is important to me, and I will make a task of
memorizing the phrase, period.

I can understand the frustration Peter is experiencing, as this group spends
so much time on the most intricate details of every topic. After hearing of
all these bugs, problems, debates, and such, I am beginning to think it is
unlikely I can really implement a useful encryption standard under Linux,
and am resigned to using what W2K has built in. But, all I know is I am
scared to use the I-patch cause it seems to have bugs I don't understand
clearly (the "IV" bug), Crypto API is perhaps in a development stage right
now, and so may or may not be debugged at this point (hmm, do we trust our
valuable data to such software?) and the loop-aes driver (if we use it), I
am not sure how to choose a pass phrase which will render it protective, and
not hackable cause I used a bad pass phrase, that is where I am.

	Now I do wish to participate in the development of the Crypto API such that
it can support hardware I may choose to use (an "e-token" which will soon
have Linux drivers that work and such).

	What do you advise?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 2:53 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Mike Touloumtzis
Sent: Wednesday, July 11, 2001 2:42 PM
To: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.3b file crypto package

On Sun, Jul 08, 2001 at 01:37:39AM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Ms. Harris, et al.:
&gt;
&gt; Given such a methodology as described below: we start at 90bits of
&gt; entropy, where do we end of if we fully implement this strategy?

You can have as many bits as you want if you're willing to use a
long enough passphrase.  At a certain point you'll have to start
writing them down, though.  This is probably OK if you're the average
forgetful Joe and the risk of irrevocably losing your data outweighs
the risk of someone violating the physical security of your home,
office safe deposit box, etc. order to get the passphrase.

It's not a good idea if you're a hard-core cypherpunk, are at risk
of law enforcement investigation or intrusive subpoena, or are just
playing with crypto because it's fun and don't have any important
data under encryption :-).

&gt; As well, where do we end up if we create 5 pass phrases using the
&gt; rules below, and each week we rotate from one of the five pass phrases?
&gt; Exactly where do we end up?

Each passphrase is independent of all others, and should be secure.
Choosing how often to rotate passphrases is something else entirely;
it depends on your assessment of risk of compromise as a function
of time, severity of compromise, and risk associated with passphrase
changes.  I can't really comment on that.

&gt;
&gt;         I am thinking of writing a piece of software (in C) to generate
such
&gt; passwords, has anyone thought about doing this? To do it I would need to
&gt; draw an exact set of rules for the software to follow, can we narrow it
down
&gt; a bit, so that I can do this?

A program that implements the algorithm I described is attached.
It would be cool if folks on the list would check it over for
correctness.  This implementation loads the whole dictionary into
memory so be careful with those really huge dictionaries :-).

miket


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711230152</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-11 23:01:52-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

&gt; It really made no sense to me to here you say that having as many bits as
&gt; you want is not a safe thing to do as juxtaposed against a backdrop of
&gt; security for purposes of a threat of law enforcement investigation,
&gt; intrusive subpoena or just playing with crypto. I presume you meant that
&gt; there must be a minimum number of bits to have. I personally am not
breaking
&gt; the law, nor am I worried about being served with any intrusive subpoena,
&gt; but I do believe in having a level of encryption able to be stronger than
&gt; what would be subvertable by average law enforcement only as a bar to
&gt; measure up against how strong my encryption methodology and implementation
&gt; is.
&gt;
&gt; Are you saying that the implementations of crypto this group is using are
&gt; not strong enough to subvert even law enforcement? I would tend to
disagree
&gt; with that, since the NSA is using AES! I think you had better think again
&gt; about what you just said, I doubt anyone will take those words too
&gt; seriously.
&gt;
&gt; I think that without having to learn a great deal about the rules of
&gt; entropy weighting, and such, a nice thing to do would be to determine (I
&gt; think Peter will wonder about this too), what would provide a strong and
&gt; usable encryption standard for appliance operator users? I am not so into
&gt; crypto that I care to learn all about entropy and such, I am interested in
&gt; learning some basic rules, which I can apply to using these technologies.

yep, i want the best possible encryption, i won't use anything which says
"this can't be decrypted by normal people but the government is able to"
if there is someone / some computer (ASCI White for example) who / which
can decrypt a certain crypto (in a sufficient amount of time of course),
using it
is pointless!

&gt; a) What encryption standard is strongest, and can be used to not slow my
&gt; work down to such a point that I start to dislike using the encryption at
&gt; all? I will presume that AES falls into this category

it would be also interesting to know the differences between AES, AES128
AES256, etc
and it would be a good idea to include some kind of list [in our future
fixed I-patch]
with all ciphers compared on, for example, how long it will take to decrypt
them with ASCI White, how fast they are, etc

&gt; b) What rules ought we follow to generate a useful pass phrase, which will
&gt; keep us secure? I do not intend to write it down, I will learn it, no
matter
&gt; how difficult, because it is important to me, and I will make a task of
&gt; memorizing the phrase, period.
and of course there should be some application which follows these rules and
generates passwords for the user ;)

&gt; I can understand the frustration Peter is experiencing, as this group
spends
&gt; so much time on the most intricate details of every topic. After hearing
of
&gt; all these bugs, problems, debates, and such, I am beginning to think it is
&gt; unlikely I can really implement a useful encryption standard under Linux,
&gt; and am resigned to using what W2K has built in. But, all I know is I am
&gt; scared to use the I-patch cause it seems to have bugs I don't understand
&gt; clearly (the "IV" bug), Crypto API is perhaps in a development stage right
&gt; now, and so may or may not be debugged at this point (hmm, do we trust our
&gt; valuable data to such software?) and the loop-aes driver (if we use it), I
&gt; am not sure how to choose a pass phrase which will render it protective,
and
&gt; not hackable cause I used a bad pass phrase, that is where I am.

as im assuming that some of the major targets of linux developers are
creating something
much better than windows and competing against microsoft i already was about
to write in
one of my previous mails that you guys (jari for example) should focus on
creating *one*
working and easy to configure crypto package instead of creating 1000
different ones which
are "outside of the kernel" and quarreling about whose crypto package is the
best!
if there is no good crypto support available in the kernel people will just
use the crypto features
winXP will have built in! (me for example, i have one box whose hd is almost
completely
dedicated to crypto so it'll be easy for me to move to winXP!)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712005657</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-12 00:56:57-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Wed, Jul 11, 2001 at 03:10:00PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Miket:
&gt; 
&gt; It really made no sense to me to here you say that having as many
&gt; bits as you want is not a safe thing to do as juxtaposed against a
&gt; backdrop of security for purposes of a threat of law enforcement
&gt; investigation, intrusive subpoena or just playing with crypto. I
&gt; presume you meant that there must be a minimum number of bits to
&gt; have. I personally am not breaking the law, nor am I worried about
&gt; being served with any intrusive subpoena, but I do believe in
&gt; having a level of encryption able to be stronger than what would
&gt; be subvertable by average law enforcement only as a bar to measure
&gt; up against how strong my encryption methodology and implementation
&gt; is.
&gt;
&gt; Are you saying that the implementations of crypto this group is
&gt; using are not strong enough to subvert even law enforcement? I
&gt; would tend to disagree with that, since the NSA is using AES! I
&gt; think you had better think again about what you just said, I doubt
&gt; anyone will take those words too seriously.

Sorry, I guess I misunderstood your question.  When I said "you can
have as many bits as you want" I meant that there is no limit on
the amount of passphrase entropy you can generate using the method
I described.  In terms of the question "what key length is safe for a
symmetric crypto algorithm?" you are not alone in your frustration;
one of the complaints about the FIPS for AES is that NIST provides
for 128, 192, and 256 bit keys without any guidelines on when you
should use which.

Here is my understanding of the situation:

-- All of the following symmetric encryption algorithms are currently
   believed to have no practical attacks given good key selection:
   AES, IDEA, Blowfish, Twofish, 3DES (DESede), CAST5, CAST-256,
   MARS, Serpent (there are more, too, but I think this covers the
   really common ones).  If you are using one of these algorithms and
   your key selection is good, it is going to be much easier to use
   other methods than decryption to get at your data (for example,
   law enforcement agencies would try to surveil your monitor,
   bug your keyboard, or search your belongings for written pass
   phrases before they would try to crack such data).

-- AES is not needed because 3DES is insecure; it's needed mainly
   because 3DES is _slow_, especially in software.  AES is about
   eight times faster in software.  The most important security
   consideration in AES is the move to a 128-bit block size, making
   attacks against ECB mode usage harder, but this is not a big
   deal for most cipher users (e.g. loopback FS in Linux uses CBC
   mode which is not vulnerable in the same way).

-- A 64-bit key is not safe.  The worldwide RC5-64 project on
   distributed.net has made it 52% of the way through a brute
   force search of a 64-bit keyspace.  With today's technology this
   took over 1300 days with thousands of computers participating,
   but the fact that it's feasible at all means that this is not
   a good choice going forward.

-- A 128-bit key is well beyond any current means of brute force
   search.  In fact, most people are pretty comfortable with 3DES,
   which has a 112-bit effective key length.  Anything above 128
   bits is gravy.  No one nowadays has any good reason to design a
   cipher with fewer than 128 bit keys (although there are evil
   reasons ;-).

-- If you're using a passphrase with a symmetric algorithm, the
   way things work is that your passphrase is passed through a
   cryptographic hash function like MD5 or SHA-1.  The entropy of
   the resulting key depends on the entropy of the pass phrase going
   in (and the quality of the hashes, but these two are considered
   pretty good for this purpose; I personally favor SHA-1).

Here's how I decide what algorithm to use:

-- For really long term data I use AES-256.  Speed is not an issue
   on a PC nowadays, and AES-256 gives not only a longer key,
   but also more rounds.  I may not be getting the full effect
   (passphrases with 256 bits of entropy are long, and most systems
   still aren't using hashes with 256-bit outputs, although some
   new SHA variants have been standardized with outputs that long).
   Still, given CPU speeds today, I don't see any reason _not_
   to use AES-256 given the choice.

-- I assume 3DES or any of the above public, well-peer-reviewed
   128-bit+ algorithms are safe barring a qualitative (not merely
   quantitative) improvement in cryptanalytic technology.  Lots of
   smart cards, etc. are probably going to use 128-bit, 10-round
   AES for performance reasons; I won't doubt their security on
   those grounds.

-- I avoid using Skipjack (80 bit key, not a common algorithm
   anyway, and there are other reasons to mistrust it :-) on down.
   The main context in which weak ciphers come up these days is
   Web sites that want to use pathetic key sizes with SSL; you can
   disable the small key sizes in your browser.

Here's how I decide how long and complex a passphrase to use:

-- For login passwords (like for SSH remote logins) I try to have
   about 56 bits of entropy or so, on the grounds that I'll detect
   someone trying to brute force the keyspace long before they
   discover the password.

-- For encrypted filesystems (of which I don't currently have any)
   I would try to use passwords that are 80+ bits, but I wouldn't be
   really anal about 128 bits of entropy.  Filesystem contents are
   not public, so if you start to get worried you could re-encrypt
   with a stronger passphrase.

-- For GPG email and other things that might be accessible in
   Internet archives essentially forever, I feel safe starting at
   128 bits.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712010901</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 01:09:01-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Peter, et al.:

Well Said!

	The problem is that while I am interested to participate in the building
and planning of these technologies (techie point of view), I also have
customers and such that I would like to implement them for. I cannot even
think of that, until I have some easy rules and such to follow for them to
generate pass phrases and know which algorithm are usable for them.

	I would like to be able to give them a software which generates pass
phrases for them. I will look at miket's software (see his post, and my
following replies).


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 6:06 PM

 -----Original Message-----
From: 	peter k. [mailto:spam-goes-to-dev-null@gmx.net]
Sent:	Wednesday, July 11, 2001 4:02 PM
To:	stuart@bh90210.net
Cc:	linux-crypto@nl.linux.org
Subject:	Re: Announce loop-AES-v1.3b file crypto package

&gt; It really made no sense to me to here you say that having as many bits as
&gt; you want is not a safe thing to do as juxtaposed against a backdrop of
&gt; security for purposes of a threat of law enforcement investigation,
&gt; intrusive subpoena or just playing with crypto. I presume you meant that
&gt; there must be a minimum number of bits to have. I personally am not
breaking
&gt; the law, nor am I worried about being served with any intrusive subpoena,
&gt; but I do believe in having a level of encryption able to be stronger than
&gt; what would be subvertable by average law enforcement only as a bar to
&gt; measure up against how strong my encryption methodology and implementation
&gt; is.
&gt;
&gt; Are you saying that the implementations of crypto this group is using are
&gt; not strong enough to subvert even law enforcement? I would tend to
disagree
&gt; with that, since the NSA is using AES! I think you had better think again
&gt; about what you just said, I doubt anyone will take those words too
&gt; seriously.
&gt;
&gt; I think that without having to learn a great deal about the rules of
&gt; entropy weighting, and such, a nice thing to do would be to determine (I
&gt; think Peter will wonder about this too), what would provide a strong and
&gt; usable encryption standard for appliance operator users? I am not so into
&gt; crypto that I care to learn all about entropy and such, I am interested in
&gt; learning some basic rules, which I can apply to using these technologies.

yep, i want the best possible encryption, i won't use anything which says
"this can't be decrypted by normal people but the government is able to"
if there is someone / some computer (ASCI White for example) who / which
can decrypt a certain crypto (in a sufficient amount of time of course),
using it
is pointless!

&gt; a) What encryption standard is strongest, and can be used to not slow my
&gt; work down to such a point that I start to dislike using the encryption at
&gt; all? I will presume that AES falls into this category

it would be also interesting to know the differences between AES, AES128
AES256, etc
and it would be a good idea to include some kind of list [in our future
fixed I-patch]
with all ciphers compared on, for example, how long it will take to decrypt
them with ASCI White, how fast they are, etc

&gt; b) What rules ought we follow to generate a useful pass phrase, which will
&gt; keep us secure? I do not intend to write it down, I will learn it, no
matter
&gt; how difficult, because it is important to me, and I will make a task of
&gt; memorizing the phrase, period.
and of course there should be some application which follows these rules and
generates passwords for the user ;)

&gt; I can understand the frustration Peter is experiencing, as this group
spends
&gt; so much time on the most intricate details of every topic. After hearing
of
&gt; all these bugs, problems, debates, and such, I am beginning to think it is
&gt; unlikely I can really implement a useful encryption standard under Linux,
&gt; and am resigned to using what W2K has built in. But, all I know is I am
&gt; scared to use the I-patch cause it seems to have bugs I don't understand
&gt; clearly (the "IV" bug), Crypto API is perhaps in a development stage right
&gt; now, and so may or may not be debugged at this point (hmm, do we trust our
&gt; valuable data to such software?) and the loop-aes driver (if we use it), I
&gt; am not sure how to choose a pass phrase which will render it protective,
and
&gt; not hackable cause I used a bad pass phrase, that is where I am.

as im assuming that some of the major targets of linux developers are
creating something
much better than windows and competing against microsoft i already was about
to write in
one of my previous mails that you guys (jari for example) should focus on
creating *one*
working and easy to configure crypto package instead of creating 1000
different ones which
are "outside of the kernel" and quarreling about whose crypto package is the
best!
if there is no good crypto support available in the kernel people will just
use the crypto features
winXP will have built in! (me for example, i have one box whose hd is almost
completely
dedicated to crypto so it'll be easy for me to move to winXP!)




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712015223</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-12 01:52:23-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Thu, Jul 12, 2001 at 01:01:52AM +0200, peter k. wrote:
&gt; 
&gt; it would be also interesting to know the differences between AES,
&gt; AES128 AES256, etc and it would be a good idea to include some kind of
&gt; list [in our future fixed I-patch] with all ciphers compared on, for
&gt; example, how long it will take to decrypt them with ASCI White, how
&gt; fast they are, etc

As far as is known by the public cryptographic community, none of
the AES variants can be broken, so the attacker must do a brute
force search of a keyspace with at least 2^128 values.

Even a 128 bit brute force search (the smallest key size of any
AES variant) is far beyond the capabilities of any supercomputer
in existence.  Ability to break a 128 bit cipher in our lifetimes
will take a revolution in technology, not just improvements to the
current tech.

AES128 (the fastest AES variant) is less than twice as fast as AES256
(the slowest AES variant).  A recent desktop (say, PIII 1GHz) should
be able to do AES256 at more than 100Mbit/s.

If you want a list of "good" (i.e. currently considered unbreakable
by anyone on earth, now or in the foreseeable future) symmetric
encryption algorithms, install GnuPG, run 'gpg --version', and look
at the 'Cipher:' line.  This list omits some algorithms like IDEA
that are patented and thus unimplemented in GnuPG.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712015740</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 01:57:40-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Touloumtzis:

	After reading your email I have surmised the following facts:

a) AES is a safe choice to use
b) a safe choice would be to use a key of 256-bits or greater (as this will
work for email, filesystems, long term public data, and SSH login passwords,
etc.), I will choose 128 for the moment, unless I am told a faster key will
not damage noticeably the speed with witch a filesystem or other device can
be read and written to given the additional overhead of the encryption
technology

As well in paragraph three of your reply you state "AES is not needed
because 3DES is insecure; it's needed mainly because 3DES is _slow_,
especially in software." This statement appears to absolutely make little
sense. First of all if 3DES is insecure as you state, why are you the only
person saying so? As well, if we give you the benefit of the doubt and
presume for the moment (and I disagree) that 3DES is insecure, why does that
make AES "not needed"!?! If 3DES is insecure, from my purview, it would make
AES MORE NEEDED!?!?! You then go on to state that AES is needed because 3DES
is slow in software, but 3DES runs independently of AES, and there two (as I
understand) are separate algorithms. Hmm, guess I really didn't get you on
that one.

	The software that you publish before (which I have yet to review), does it
compile under Linux? As well, does it generate usable pass phrases to work
with AES-128 or AES-256 viably?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 6:31 PM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Mike Touloumtzis
Sent:	Wednesday, July 11, 2001 5:57 PM
To:	linux-crypto@nl.linux.org
Subject:	Re: Announce loop-AES-v1.3b file crypto package

On Wed, Jul 11, 2001 at 03:10:00PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Miket:
&gt;
&gt; It really made no sense to me to here you say that having as many
&gt; bits as you want is not a safe thing to do as juxtaposed against a
&gt; backdrop of security for purposes of a threat of law enforcement
&gt; investigation, intrusive subpoena or just playing with crypto. I
&gt; presume you meant that there must be a minimum number of bits to
&gt; have. I personally am not breaking the law, nor am I worried about
&gt; being served with any intrusive subpoena, but I do believe in
&gt; having a level of encryption able to be stronger than what would
&gt; be subvertable by average law enforcement only as a bar to measure
&gt; up against how strong my encryption methodology and implementation
&gt; is.
&gt;
&gt; Are you saying that the implementations of crypto this group is
&gt; using are not strong enough to subvert even law enforcement? I
&gt; would tend to disagree with that, since the NSA is using AES! I
&gt; think you had better think again about what you just said, I doubt
&gt; anyone will take those words too seriously.

Sorry, I guess I misunderstood your question.  When I said "you can
have as many bits as you want" I meant that there is no limit on
the amount of passphrase entropy you can generate using the method
I described.  In terms of the question "what key length is safe for a
symmetric crypto algorithm?" you are not alone in your frustration;
one of the complaints about the FIPS for AES is that NIST provides
for 128, 192, and 256 bit keys without any guidelines on when you
should use which.

Here is my understanding of the situation:

-- All of the following symmetric encryption algorithms are currently
   believed to have no practical attacks given good key selection:
   AES, IDEA, Blowfish, Twofish, 3DES (DESede), CAST5, CAST-256,
   MARS, Serpent (there are more, too, but I think this covers the
   really common ones).  If you are using one of these algorithms and
   your key selection is good, it is going to be much easier to use
   other methods than decryption to get at your data (for example,
   law enforcement agencies would try to surveil your monitor,
   bug your keyboard, or search your belongings for written pass
   phrases before they would try to crack such data).

-- AES is not needed because 3DES is insecure; it's needed mainly
   because 3DES is _slow_, especially in software.  AES is about
   eight times faster in software.  The most important security
   consideration in AES is the move to a 128-bit block size, making
   attacks against ECB mode usage harder, but this is not a big
   deal for most cipher users (e.g. loopback FS in Linux uses CBC
   mode which is not vulnerable in the same way).

-- A 64-bit key is not safe.  The worldwide RC5-64 project on
   distributed.net has made it 52% of the way through a brute
   force search of a 64-bit keyspace.  With today's technology this
   took over 1300 days with thousands of computers participating,
   but the fact that it's feasible at all means that this is not
   a good choice going forward.

-- A 128-bit key is well beyond any current means of brute force
   search.  In fact, most people are pretty comfortable with 3DES,
   which has a 112-bit effective key length.  Anything above 128
   bits is gravy.  No one nowadays has any good reason to design a
   cipher with fewer than 128 bit keys (although there are evil
   reasons ;-).

-- If you're using a passphrase with a symmetric algorithm, the
   way things work is that your passphrase is passed through a
   cryptographic hash function like MD5 or SHA-1.  The entropy of
   the resulting key depends on the entropy of the pass phrase going
   in (and the quality of the hashes, but these two are considered
   pretty good for this purpose; I personally favor SHA-1).

Here's how I decide what algorithm to use:

-- For really long term data I use AES-256.  Speed is not an issue
   on a PC nowadays, and AES-256 gives not only a longer key,
   but also more rounds.  I may not be getting the full effect
   (passphrases with 256 bits of entropy are long, and most systems
   still aren't using hashes with 256-bit outputs, although some
   new SHA variants have been standardized with outputs that long).
   Still, given CPU speeds today, I don't see any reason _not_
   to use AES-256 given the choice.

-- I assume 3DES or any of the above public, well-peer-reviewed
   128-bit+ algorithms are safe barring a qualitative (not merely
   quantitative) improvement in cryptanalytic technology.  Lots of
   smart cards, etc. are probably going to use 128-bit, 10-round
   AES for performance reasons; I won't doubt their security on
   those grounds.

-- I avoid using Skipjack (80 bit key, not a common algorithm
   anyway, and there are other reasons to mistrust it :-) on down.
   The main context in which weak ciphers come up these days is
   Web sites that want to use pathetic key sizes with SSL; you can
   disable the small key sizes in your browser.

Here's how I decide how long and complex a passphrase to use:

-- For login passwords (like for SSH remote logins) I try to have
   about 56 bits of entropy or so, on the grounds that I'll detect
   someone trying to brute force the keyspace long before they
   discover the password.

-- For encrypted filesystems (of which I don't currently have any)
   I would try to use passwords that are 80+ bits, but I wouldn't be
   really anal about 128 bits of entropy.  Filesystem contents are
   not public, so if you start to get worried you could re-encrypt
   with a stronger passphrase.

-- For GPG email and other things that might be accessible in
   Internet archives essentially forever, I feel safe starting at
   128 bits.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712015752</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-12 01:57:52-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Wed, Jul 11, 2001 at 06:52:23PM -0700, Mike Touloumtzis wrote:
&gt; On Thu, Jul 12, 2001 at 01:01:52AM +0200, peter k. wrote:

&gt; &gt; it would be also interesting to know the differences between AES,
&gt; &gt; AES128 AES256, etc and it would be a good idea to include some kind of
&gt; &gt; list [in our future fixed I-patch] with all ciphers compared on, for
&gt; &gt; example, how long it will take to decrypt them with ASCI White, how
&gt; &gt; fast they are, etc

&gt; As far as is known by the public cryptographic community, none of
&gt; the AES variants can be broken, so the attacker must do a brute
&gt; force search of a keyspace with at least 2^128 values.

&gt; Even a 128 bit brute force search (the smallest key size of any
&gt; AES variant) is far beyond the capabilities of any supercomputer
&gt; in existence.  Ability to break a 128 bit cipher in our lifetimes
&gt; will take a revolution in technology, not just improvements to the
&gt; current tech.

&gt; AES128 (the fastest AES variant) is less than twice as fast as AES256
&gt; (the slowest AES variant).  A recent desktop (say, PIII 1GHz) should
&gt; be able to do AES256 at more than 100Mbit/s.

&gt; If you want a list of "good" (i.e. currently considered unbreakable
&gt; by anyone on earth, now or in the foreseeable future) symmetric
&gt; encryption algorithms, install GnuPG, run 'gpg --version', and look
&gt; at the 'Cipher:' line.  This list omits some algorithms like IDEA
&gt; that are patented and thus unimplemented in GnuPG.

	Unless you are like most of us and have it loaded as a module
for compatibility with certain other versions of PGP.  Then IDEA shows
up as well.  :-)

&gt; miket
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712021249</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-12 02:12:49-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Wed, Jul 11, 2001 at 09:57:52PM -0400, Michael H. Warfield wrote:
&gt; 
&gt; 	Unless you are like most of us and have it loaded as a module
&gt; for compatibility with certain other versions of PGP.  Then IDEA shows
&gt; up as well.  :-)

I used to.  Then I decided I could derive more righteous enjoyment
by bouncing IDEA-encrypted PGP messages with an explanation of the
patent issue :-).

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712025122</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-12 02:51:22-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

On Wed, Jul 11, 2001 at 06:57:40PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; 
&gt; As well in paragraph three of your reply you state "AES is not needed
&gt; because 3DES is insecure; it's needed mainly because 3DES is _slow_,
&gt; especially in software." This statement appears to absolutely make little
&gt; sense. First of all if 3DES is insecure as you state, why are you the only
&gt; person saying so? As well, if we give you the benefit of the doubt and
&gt; presume for the moment (and I disagree) that 3DES is insecure, why does that
&gt; make AES "not needed"!?! If 3DES is insecure, from my purview, it would make
&gt; AES MORE NEEDED!?!?! You then go on to state that AES is needed because 3DES
&gt; is slow in software, but 3DES runs independently of AES, and there two (as I
&gt; understand) are separate algorithms. Hmm, guess I really didn't get you on
&gt; that one.

You misunderstand me.  "AES is not needed because 3DES is insecure"
should be read as "3DES is still considered secure, so insecurity
of the current standard is not the reason for the AES process".

3DES is in fact a very safe choice if you don't care about speed
or smartcard/tamper-resistant implementations; it has withstood a
much longer period of public scrutiny than AES.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712033052</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-12 03:30:52-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3b file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; Mr. Touloumtzis:
&gt; 
&gt;         After reading your email I have surmised the following facts:
&gt; 
&gt; a) AES is a safe choice to use

Right.

&gt; b) a safe choice would be to use a key of 256-bits or greater (as this will
&gt; work for email, filesystems, long term public data, and SSH login passwords,
&gt; etc.),

128 is likely enough. A bunch of well-known cryptographers did a paper a few
years back on key sizes:
http://www.counterpane.com/keylength.html
They suggested a 90-bit minimum, in 1996.

If Moore's Law holds and computers double their performance every 18 months,
then you need one more key bit every 18 months. 128 bits should be secure
until 2047. 3DES (112-bit work factor for meet-in-the middle attack) until
2023.

Another way to look at it is in the FreeS/WAN glossary entry for "brute force":
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute

| ... the EFF's DES Cracker searches a 56-bit key space in an average
| of a few days. Let us assume an attacker that can find a 64-bit key (256 times
| harder) by brute force search in a second (a few hundred thousand times faster).
| For a 96-bit key, that attacker needs 2^32 seconds, just over a century.
| Against a 128-bit key, he needs 2^32 centuries or about 400,000,000,000 years.
| Your data is then obviously secure against brute force attacks. Even if our
| estimate of the attacker's speed is off by a factor of a million, it still
| takes him 400,000 years to crack a message.

That said, I'd take the 256-bit version and the large safety margin.

Ross Anderson's excellent book "Security Engineering"
http://www.cl.cam.ac.uk/~rja14/book.html
recommends using 256-bit keys for AES.

&gt; I will choose 128 for the moment, unless I am told a faster key will
&gt; not damage noticeably the speed with witch a filesystem or other device can
&gt; be read and written to given the additional overhead of the encryption
&gt; technology

The extra overhead is not huge. AES varies the number of rounds with the
key size. 10 for 128-bit keys, 16 for 256-bit. Encryption speed depends
directly on the number of rounds, so 256-bit AES is 1.6 times as expensive
as 128-bit. Against brute force it's 2^128 times as secure!
 
&gt; As well in paragraph three of your reply you state "AES is not needed
&gt; because 3DES is insecure; it's needed mainly because 3DES is _slow_,
&gt; especially in software." This statement appears to absolutely make little
&gt; sense.

What I think he meant was:

The reason we need AES is not that 3DES is insecure (it isn't), but that
3DES is slow.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712034426</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 03:44:26-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Touloumtzis:

	I am sorry I misunderstood you, it just did not really seem clear to me,
thank you for your clarification.

	After having read Mr. Harris' reply to my commentary, I plan to implement
an AES-256bit encryption technology for use with my files and encryption of
logon and other areas.

	However, if I choose a pass phrase, say five randomly chosen words (five to
seven characters each) preceded by a random number in each case, then do you
perceive that AES would be fast enough to not inhibit the use of the
computer for doing normal work when applied against a file placed on an
already existent filesystem?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 8:35 PM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Mike Touloumtzis
Sent:	Wednesday, July 11, 2001 7:51 PM
To:	linux-crypto@nl.linux.org
Subject:	Re: Announce loop-AES-v1.3b file crypto package

On Wed, Jul 11, 2001 at 06:57:40PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt;
&gt; As well in paragraph three of your reply you state "AES is not needed
&gt; because 3DES is insecure; it's needed mainly because 3DES is _slow_,
&gt; especially in software." This statement appears to absolutely make little
&gt; sense. First of all if 3DES is insecure as you state, why are you the only
&gt; person saying so? As well, if we give you the benefit of the doubt and
&gt; presume for the moment (and I disagree) that 3DES is insecure, why does
that
&gt; make AES "not needed"!?! If 3DES is insecure, from my purview, it would
make
&gt; AES MORE NEEDED!?!?! You then go on to state that AES is needed because
3DES
&gt; is slow in software, but 3DES runs independently of AES, and there two (as
I
&gt; understand) are separate algorithms. Hmm, guess I really didn't get you on
&gt; that one.

You misunderstand me.  "AES is not needed because 3DES is insecure"
should be read as "3DES is still considered secure, so insecurity
of the current standard is not the reason for the AES process".

3DES is in fact a very safe choice if you don't care about speed
or smartcard/tamper-resistant implementations; it has withstood a
much longer period of public scrutiny than AES.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712035041</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 03:50:41-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Harris:

        This clears things up for me in a big way.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 8:44 PM

 -----Original Message-----
From:   owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Sandy Harris
Sent:   Wednesday, July 11, 2001 8:31 PM
To:     linux-crypto@nl.linux.org
Subject:        Re: Announce loop-AES-v1.3b file crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;
&gt; Mr. Touloumtzis:
&gt;
&gt;         After reading your email I have surmised the following facts:
&gt;
&gt; a) AES is a safe choice to use

Right.

&gt; b) a safe choice would be to use a key of 256-bits or greater (as this
will
&gt; work for email, filesystems, long term public data, and SSH login
passwords,
&gt; etc.),

128 is likely enough. A bunch of well-known cryptographers did a paper a few
years back on key sizes:
http://www.counterpane.com/keylength.html
They suggested a 90-bit minimum, in 1996.

If Moore's Law holds and computers double their performance every 18 months,
then you need one more key bit every 18 months. 128 bits should be secure
until 2047. 3DES (112-bit work factor for meet-in-the middle attack) until
2023.

Another way to look at it is in the FreeS/WAN glossary entry for "brute
force":
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute

| ... the EFF's DES Cracker searches a 56-bit key space in an average
| of a few days. Let us assume an attacker that can find a 64-bit key (256
times
| harder) by brute force search in a second (a few hundred thousand times
faster).
| For a 96-bit key, that attacker needs 2^32 seconds, just over a century.
| Against a 128-bit key, he needs 2^32 centuries or about 400,000,000,000
years.
| Your data is then obviously secure against brute force attacks. Even if
our
| estimate of the attacker's speed is off by a factor of a million, it still
| takes him 400,000 years to crack a message.

That said, I'd take the 256-bit version and the large safety margin.

Ross Anderson's excellent book "Security Engineering"
http://www.cl.cam.ac.uk/~rja14/book.html
recommends using 256-bit keys for AES.

&gt; I will choose 128 for the moment, unless I am told a faster key will
&gt; not damage noticeably the speed with witch a filesystem or other device
can
&gt; be read and written to given the additional overhead of the encryption
&gt; technology

The extra overhead is not huge. AES varies the number of rounds with the
key size. 10 for 128-bit keys, 16 for 256-bit. Encryption speed depends
directly on the number of rounds, so 256-bit AES is 1.6 times as expensive
as 128-bit. Against brute force it's 2^128 times as secure!

&gt; As well in paragraph three of your reply you state "AES is not needed
&gt; because 3DES is insecure; it's needed mainly because 3DES is _slow_,
&gt; especially in software." This statement appears to absolutely make little
&gt; sense.

What I think he meant was:

The reason we need AES is not that 3DES is insecure (it isn't), but that
3DES is slow.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010626220157</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-06-26 22:01:57-0400</timestampReceived><subject>Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

On Tue, 26 Jun 2001, holtland Last Name wrote:

&gt; Hello all,
&gt;

&gt; does anyone around here know if kernel international patches will be
&gt; available soon again? I realy miss those for 2.2.19, 2.4.4, 2.4.5.
&gt; Alexander Kjeldaas used to read this mailing list, hope he is still
&gt; around somewhere to answer?

as far as 2.4.x is concerned, the existing patch for 2.4.3 should still
work,

you may want to take a look at

http://www.hvrlab.org/pub/crypto/

too, for a 'repackaged' version of the internation crypto patch

(btw, I've been using the repackaged version without any problems for some
months now in a box running  XFS on top of encrypted loop on LVM
over 3 x ~50 gig hardisks...)

&gt; Peter Holtland

ps: should there be problems with applying the older 2.4.3 patch over a
recent 2.4.x kernel... I could create a cleaned up patch next week or
so...

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627001405</emailId><senderName>"Gregory T. Norris"</senderName><senderEmail>haphazard@socket.net</senderEmail><timestampReceived>2001-06-27 00:14:05-0400</timestampReceived><subject>Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

The 2.4.3 patch seems to do fine, but there are a few rejects against
the 2.4.5 Makefile... nothing particularly difficult to correct.  If
anyone wants it, I'd be willing to email the cleaned up version.

On Wed, Jun 27, 2001 at 12:01:57AM +0200, Herbert Valerio Riedel wrote:
&gt; ps: should there be problems with applying the older 2.4.3 patch over
&gt; a recent 2.4.x kernel... I could create a cleaned up patch next week
&gt; or so...

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010627013931</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-06-27 01:39:31-0400</timestampReceived><subject>RE: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

Mr. Norris, et al.:

I am planning to do a reinstall and reformat of my hard drive with regard to
my Linux (RedHat 7.1) installation. I have kernel 2.4.2 going right now, and
would like to add the crypto stuff while having the latest 2.4.5 kernel. I
am contemplating either using the XFS (SGI XFS project) journaling file
system or the ReiserFS. I am leaning towards XFS as I understand it's a bit
better in quality and speed at the moment.

	Can you also provide instructions on what I must do to patch the kernel (I
have been a bit of an appliance operator when it comes to Linux admin stuff,
though am a Solaris Admin of 15 years). I have been spoiled only doing
kernel upgrades when RH produces a new rpm! Obviously if I get into the
crypto stuff those days are gone.

	I am not so familiar with loop back filesystems, so I am going to ask a few
questions. I ask these questions as I understand both the crypto filesystems
and compressing filesystems are predicated upon the loop back filesystem
technology. I am interested in crypto first, compression second. Has anyone
looked at including compression as a feature with any of the crypto
filesystems (bz/gz compression technologies are free and predeveloped
already).

a) If I use a crypto filesystem predicated on a loop back filesystem
technology, does that mean that the crypto filesystem can overlay on top of
any other filesystem (Linux filesystems I mean, not NTFS or the like) I am
using for normal system usage (ext2fs, ext3fs, ReiserFS, XFS, etc..)?
b) Are crypto filesystems normally able to be used on root partitions (this
is not a requirement for me, but a preference)?
c) If I would like to use a compressing filesystem, and presuming (as I
understand) that none of the crypto filesystems have compression integrated
within as a feature, then which ought to overlay the JFS first, the
compressing filesystem or the crypto?
d) Are there any other issues I ought to consider?
e) I hold security clearances in the military (US Navy Reserves, part time
military) and would like to understand the impact of using these
technologies as juxtaposed against that fact?
f) I am also an international traveler, and would like to understand the
impact of using these technologies as juxtaposed against US law,
International, and EU Community law?
g) Any caveats you can suggest to prevent me from making any major mistakes?
h) What level of encryption (bits) is sufficient to provide a speedy but
secure environment for my filesystems (512MB ram, PIII/1GHz system)?

If you choose to send any instructions to me, please try to presume a low
level of administrative experience with respect to Linux (as I said I am a
seasoned Unix Admin, so I am sure I'll catch on quick).

Thank you (list members) in advance for your time and consideration
regarding the instant issues.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Tuesday, June 26, 2001 6:23 PM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Gregory T. Norris
Sent:	Tuesday, June 26, 2001 5:14 PM
To:	linux-crypto@nl.linux.org
Subject:	Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?

 &lt;&lt; File: ATT00018.dat &gt;&gt; The 2.4.3 patch seems to do fine, but there are a
few rejects against
the 2.4.5 Makefile... nothing particularly difficult to correct.  If
anyone wants it, I'd be willing to email the cleaned up version.

On Wed, Jun 27, 2001 at 12:01:57AM +0200, Herbert Valerio Riedel wrote:
&gt; ps: should there be problems with applying the older 2.4.3 patch over
&gt; a recent 2.4.x kernel... I could create a cleaned up patch next week
&gt; or so...


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627013947</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-06-27 01:39:47-0400</timestampReceived><subject>RE: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

Mr. Norris, et al.:

I am planning to do a reinstall and reformat of my hard drive with regard to
my Linux (RedHat 7.1) installation. I have kernel 2.4.2 going right now, and
would like to add the crypto stuff while having the latest 2.4.5 kernel. I
am contemplating either using the XFS (SGI XFS project) journaling file
system or the ReiserFS. I am leaning towards XFS as I understand it's a bit
better in quality and speed at the moment.

	Can you also provide instructions on what I must do to patch the kernel (I
have been a bit of an appliance operator when it comes to Linux admin stuff,
though am a Solaris Admin of 15 years). I have been spoiled only doing
kernel upgrades when RH produces a new rpm! Obviously if I get into the
crypto stuff those days are gone.

	I am not so familiar with loop back filesystems, so I am going to ask a few
questions. I ask these questions as I understand both the crypto filesystems
and compressing filesystems are predicated upon the loop back filesystem
technology. I am interested in crypto first, compression second. Has anyone
looked at including compression as a feature with any of the crypto
filesystems (bz/gz compression technologies are free and predeveloped
already).

a) If I use a crypto filesystem predicated on a loop back filesystem
technology, does that mean that the crypto filesystem can overlay on top of
any other filesystem (Linux filesystems I mean, not NTFS or the like) I am
using for normal system usage (ext2fs, ext3fs, ReiserFS, XFS, etc..)?
b) Are crypto filesystems normally able to be used on root partitions (this
is not a requirement for me, but a preference)?
c) If I would like to use a compressing filesystem, and presuming (as I
understand) that none of the crypto filesystems have compression integrated
within as a feature, then which ought to overlay the JFS first, the
compressing filesystem or the crypto?
d) Are there any other issues I ought to consider?
e) I hold security clearances in the military (US Navy Reserves, part time
military) and would like to understand the impact of using these
technologies as juxtaposed against that fact?
f) I am also an international traveler, and would like to understand the
impact of using these technologies as juxtaposed against US law,
International, and EU Community law?
g) Any caveats you can suggest to prevent me from making any major mistakes?
h) What level of encryption (bits) is sufficient to provide a speedy but
secure environment for my filesystems (512MB ram, PIII/1GHz system)?

If you choose to send any instructions to me, please try to presume a low
level of administrative experience with respect to Linux (as I said I am a
seasoned Unix Admin, so I am sure I'll catch on quick).

Thank you (list members) in advance for your time and consideration
regarding the instant issues.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Tuesday, June 26, 2001 6:23 PM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Gregory T. Norris
Sent:	Tuesday, June 26, 2001 5:14 PM
To:	linux-crypto@nl.linux.org
Subject:	Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?

 &lt;&lt; File: ATT00018.dat &gt;&gt; The 2.4.3 patch seems to do fine, but there are a
few rejects against
the 2.4.5 Makefile... nothing particularly difficult to correct.  If
anyone wants it, I'd be willing to email the cleaned up version.

On Wed, Jun 27, 2001 at 12:01:57AM +0200, Herbert Valerio Riedel wrote:
&gt; ps: should there be problems with applying the older 2.4.3 patch over
&gt; a recent 2.4.x kernel... I could create a cleaned up patch next week
&gt; or so...


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627081359</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-06-27 08:13:59-0400</timestampReceived><subject>Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

Herbert Valerio Riedel wrote:
&gt; as far as 2.4.x is concerned, the existing patch for 2.4.3 should still
&gt; work,
&gt; 
&gt; you may want to take a look at
&gt; 
&gt; http://www.hvrlab.org/pub/crypto/
&gt; 
&gt; too, for a 'repackaged' version of the internation crypto patch
&gt; 
&gt; (btw, I've been using the repackaged version without any problems for some
&gt; months now in a box running  XFS on top of encrypted loop on LVM
&gt; over 3 x ~50 gig hardisks...)

You are still using the same broken non re-entrant api in re-entrant code
path in your cryptoapi-2.4.3-hvr5. Same as in international crypto patch.

Have a nice day.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010619190855</emailId><senderName>Andrea Mazzoleni</senderName><senderEmail>am@mediacom.it</senderEmail><timestampReceived>2001-06-19 19:08:55-0400</timestampReceived><subject>Re: Question regarding the linux loopAES disk encryption.</subject><body>

On Tue, Jun 19, 2001 at 06:27:57PM +0300, Jari Ruusu wrote:
&gt; Because SHA-512 provides only about 256 bits of security against collision
&gt; attacks. SHA-256 provides only about 128 bits.

This is true if you don't truncate the hash.
If you truncate the 512 bits hash to 256 bits (for the AES-256), the
resulting hash is subject of a collision attack (also known as `birthday'
attack) like any other 256 bits hash.

This is exactly like the SHA-384 which is only a truncated version of 
the SHA-512. The SHA-384 has only 192 bits of security against collision
attack, NOT 256.

I'm not a cryptographer, so I can be wrong. However, this is that I 
understand from that I read.

-- 
Andrea Mazzoleni &lt;am@mediacom.it&gt;
935A 2D3C 5C70 BCD6 CB0C  ED89 7C19 4321 6340 3F6D

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010619191857</emailId><senderName>John Rapp</senderName><senderEmail>jlrapp@sdsc.edu</senderEmail><timestampReceived>2001-06-19 19:18:57-0400</timestampReceived><subject>Re: Question regarding the linux loopAES disk encryption.</subject><body>

On Tue, 19 Jun 2001, Jari Ruusu wrote:

&gt; Andrea Mazzoleni wrote:
&gt; &gt; And also when I truncate the result of the SHA-512 to 256 bit I
&gt; &gt; have effectively created a new hash algorithm of 256 bit. And a birthday
&gt; &gt; attack like the original SHA-256 should be possible.
&gt;
&gt; Because SHA-512 provides only about 256 bits of security against collision
&gt; attacks. SHA-256 provides only about 128 bits. For more information:
&gt;
&gt;     http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf

While it's true that SHA-512 may give only 256 bits of security, that's a
problem with hashing in general (birthday attacks), not a problem with the
algorithm. So when you combine them into 256 bits, you're actually getting 128
bits of security (which really should be enough anyways, in most cases...).

The main reason I thought he was doing this was because there is no SHA-128
(I believe the lowest is 160 for birthday attack reasons), and that XOR'ing the
halves of a 256 bit hash together was the only way he could get a 128 bit key
without doing some munging that might ruin the hash's security. Likewise with
the 192 bit versions. Switching back to a 256 bit hash for his 256 bit key might
increase security, but in theory what he's doing should be just as collision
resistant as a 256 bit hash.

Of course I've never actually used Jari's stuff, but this is what I gather from
what I've heard about it. I must say his package looks very nice, and sounds
easy to use. Maybe one of these days I'll make something worth encrypting and
try it :P


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010619214913</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-06-19 21:49:13-0400</timestampReceived><subject>Re: Question regarding the linux loopAES disk encryption.</subject><body>

Andrea Mazzoleni wrote:
&gt; This is true if you don't truncate the hash.
&gt; If you truncate the 512 bits hash to 256 bits (for the AES-256), the
&gt; resulting hash is subject of a collision attack (also known as `birthday'
&gt; attack) like any other 256 bits hash.
&gt; 
&gt; This is exactly like the SHA-384 which is only a truncated version of
&gt; the SHA-512. The SHA-384 has only 192 bits of security against collision
&gt; attack, NOT 256.

I was wrong about the collision attack, as Marc Mutz pointed out in a
private mail. The SHA-256/384/512 hashes as used in loop-AES are not subject
to collision attack.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010619214943</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-06-19 21:49:43-0400</timestampReceived><subject>Re: Question regarding the linux loopAES disk encryption.</subject><body>

John Rapp wrote:
&gt; While it's true that SHA-512 may give only 256 bits of security, that's a
&gt; problem with hashing in general (birthday attacks), not a problem with the
&gt; algorithm. So when you combine them into 256 bits, you're actually getting 128
&gt; bits of security (which really should be enough anyways, in most cases...).

As Marc Mutz pointed out in a private mail, the SHA-256/384/512 hashes as
used in loop-AES is are not subject to collision attack, so this 512 -&gt; 128
bit thing does not apply.

&gt; The main reason I thought he was doing this was because there is no SHA-128
&gt; (I believe the lowest is 160 for birthday attack reasons), and that XOR'ing the
&gt; halves of a 256 bit hash together was the only way he could get a 128 bit key
&gt; without doing some munging that might ruin the hash's security. Likewise with
&gt; the 192 bit versions. Switching back to a 256 bit hash for his 256 bit key might
&gt; increase security, but in theory what he's doing should be just as collision
&gt; resistant as a 256 bit hash.
&gt; 
&gt; Of course I've never actually used Jari's stuff, but this is what I gather from
&gt; what I've heard about it. I must say his package looks very nice, and sounds
&gt; easy to use. Maybe one of these days I'll make something worth encrypting and
&gt; try it :P

When I wrote the util-linux patch in loop-AES, I wrongly assumed that the
hashes would be subject to collision attack. For that reason, I used longer
hashes and only used the first half of the resulting hash as a key.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010625060825</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-06-25 06:08:25-0400</timestampReceived><subject>encryption / compression / JFS</subject><body>

List members:

	I am currently using the ext2fs under RH7.1 running kernel 2.4.2-2. I am
considering the implementation of either the SGI XFS or ReiserFS journaling
file system ("JFS"), I plan to try XFS first. One of the issues I am
concerned with in the implementation of either, is if it will allow (a) "on
the fly compression"; and (b) "on the fly encryption". Now, I am aware of
software which operates on a file by file level to do either of those (gzip,
or crypt (crude for encryption I know but a good example), but I am talking
about encryption or compression on a filesystem level. I was told that using
the loopback filesystem addtional layers of filesystem can be added to yield
these sorts of "on the fly" addtions.

	Predicated on a choice of either JFS  (XFS or ReiserFS, I know there is
also ext3fs, but it doesn't really work yet I hear), what are the best
methods to assure on the fly compression and also encryption of the highest
order of magnitude.

        Thank you for your time and consideration in advance.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, June 24, 2001 10:39 PM



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627082217</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-06-27 08:22:17-0400</timestampReceived><subject>RE: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?</subject><body>

List members:

	I am not sure what is being said here, but I patched my kernel (2.4.2) with
the 2.4.3.1 international patch (as advised) and was unable to get access to
rijndael encryption. Did I do something wrong? Must I update to 2.4.5? If so
what do I use to patch that kernel? Does anyone have any decent instructions
for beginner?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, June 27, 2001 1:20 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Jari Ruusu
Sent:	Wednesday, June 27, 2001 1:14 AM
To:	Herbert Valerio Riedel
Cc:	holtland Last Name; linux-crypto@nl.linux.org
Subject:	Re: kernel international patches for 2.2.19 2.4.4 2.4.5 soon?

Herbert Valerio Riedel wrote:
&gt; as far as 2.4.x is concerned, the existing patch for 2.4.3 should still
&gt; work,
&gt;
&gt; you may want to take a look at
&gt;
&gt; http://www.hvrlab.org/pub/crypto/
&gt;
&gt; too, for a 'repackaged' version of the internation crypto patch
&gt;
&gt; (btw, I've been using the repackaged version without any problems for some
&gt; months now in a box running  XFS on top of encrypted loop on LVM
&gt; over 3 x ~50 gig hardisks...)

You are still using the same broken non re-entrant api in re-entrant code
path in your cryptoapi-2.4.3-hvr5. Same as in international crypto patch.

Have a nice day.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010627125556</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-06-27 12:55:56-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3b file crypto package</subject><body>

Mr. Ruusu, et al.:

I am going to try this, but I am curious what the advantages and
disadvantages of Kernel modification are.

	While I am looking for encryption over a filesystem, (I plan to run some
journaling filesystem, encrypt, and then journal on the encrypted look back
device again); I would like to also have a compressing filesystem as well.
Would integration of compression be a difficult task to implement within the
scope of the loop.o which allows encrypting filesystems?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, June 27, 2001 5:52 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Jari Ruusu
Sent:	Wednesday, June 27, 2001 5:36 AM
To:	linux-crypto@nl.linux.org
Subject:	Announce loop-AES-v1.3b file crypto package

In short: If file crypto is all you need, this package is a hassle free
replacement for international crypto patch.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. The AES cipher can be used to encrypt local file systems
and disk partitions. For more information about compiling and using the
driver, see the README file in the package.

Features:
- No source modifications to kernel. No patch hassles when a new version of
  kernel is released.
- Works with 2.4, 2.2 and 2.0 kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.

Changes since previous release:
- Mount and losetup programs now understand -p option to read password from
  file descriptor instead of terminal.
- Cipher tests now integrated into Makefile.
- Optional kernel 2.4 patch version included for those people who prefer not
  to use modules.
- Data corrupting bug with LVM has been fixed (kernel 2.4 only). Thanks to
  David Dodge for this bugfix.

I recommend that kernel 2.4 users upgrade to this version, especially if you
need encrypted loop devices on top of LVM. No need to upgrade if you use
older 2.2 or 2.0 kernels, unless you need the -p option of losetup or mount
program.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3b.tar.bz2
    md5sum a2c219436ae1679d869c8f3e9c69f1b9

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3b.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010502200034</emailId><senderName>"Son Ho Jin"</senderName><senderEmail>jin@gaganan.com</senderEmail><timestampReceived>2001-05-02 20:00:34-0400</timestampReceived><subject>I got it</subject><body>

 Hey, lu
 
 Sorry, it took longer than i expected but I found the site, it's
 
  http://www.multiopen.com
  
  the site will make your web surfing very convenient.
  
  
 And here goes one more, it's
 
  http://www.mysimon.com 
  
  this one will help your online shopping    
  
  Get to the site and mail me after
 
  bye~

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010503130227</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-05-03 13:02:27-0400</timestampReceived><subject>Re: 2.4.x crypto incompatible with 2.2.x crypto</subject><body>

Dan Hollis wrote:
&gt; Anyone determined yet why 2.4.x blowfish loopback crypto can't read 2.2.x
&gt; blowfish loopback crypto?
&gt; 
&gt; Is it a bug with the IV or a bug with keysize or what?
&gt; 
&gt; (I'm using CONFIG_BLK_DEV_LOOP_USE_REL_BLOCK on 2.2.x, so that's not the
&gt; problem)

This is known problem with Alexander Kjeldaas' international crypto patch.
IV computation is based on block size of the underlying filesystem and
transfer size being exactly one block. In most cases (but not always) 2.2
kernels do that, so it mostly works for 2.2 kernels. However, 2.4 kernels
often prefer PAGE_CACHE_SIZE size transfers, so your data is nuked.

If you don't want to play russian roulette with your data, you should
consider using loop-AES package. loop-AES package does AES enryption with
128, 192 and 256 bit keysizes, and is immune to variations in transfer size
and does not depend on filesystem block size.

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.1b.tar.bz2
    md5sum 61e521a383ce9a90c3f7b98bcf789813

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.1b.tar.bz2.sign
    http://members.surfeu.fi/ce6c8edf/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010507123157</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-05-07 12:31:57-0400</timestampReceived><subject>Announce: loop-AES-v1.2d file crypto package</subject><body>

In short: If file crypto is all you need, this package is a hassle free
replacement for Alexander Kjeldaas' international crypto patch.

This package provides a loadable Linux kernel module (loop.o) that has AES
cipher built-in. The AES cipher can be used to encrypt local filesystems and
disk partitions. For more information about compiling and using the driver,
see the README file in the package.

Changes since previous release:
- Newer AES cipher implementation from Dr Brian Gladman, with precomputed
  lookup tables and little speed improvement.
- Support for old 2.0 kernels.
- Makefile now runs "depmod -a" instead of "depmod" after installing
  loop.o driver.

Features:
- No source modifications to kernel. No patch hassles when a new version of
  kernel is released.
- Works with 2.0, 2.2 and 2.4 kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on filesystem block size.

Note to existing users: All previous releases should work fine. Only the
"depmod -a" change in the Makefile is a bugfix, and even that does not
affect loop driver, but may affect other modules in non-standard locations.

bzip2 compressed tarball is here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.2d.tar.bz2
    md5sum dd889db409d87e959311f419a99ef5ba

PGP signature file, my public key, and fingerprint here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.2d.tar.bz2.sign
    http://members.surfeu.fi/ce6c8edf/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010508220538</emailId><senderName>David Bryson</senderName><senderEmail>dbryson@du.edu</senderEmail><timestampReceived>2001-05-08 22:05:38-0400</timestampReceived><subject>status of the todo page</subject><body>

I noticed that the todo list at kerneli.org is a bit outdated, how many
of these issues are/have been worked on?  What's left still?  I'd like
to learn a bit about the ikp so that write some things to make it easier
to use ( my experience was a little frustrating ).
thanks,
Dave

-- 
http://www.geekcode.com
-----BEGIN GEEK CODE BLOCK-----
Version: 3.12
GCS d-- s+: a-- C++++ UL+++ P+ L+++ E+++ W++ N o K- w-- 
O- M+ V PS+ PE Y PGP++ t+ 5 X-- R tv- b++ DI D++ 
G e++ h+ r++ y+ 
------END GEEK CODE BLOCK------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510204342</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-05-10 20:43:42-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, May 10, 2001 at 01:14:43PM -0700, Dan Hollis wrote:
&gt; On Thu, 10 May 2001, Herbert Valerio Riedel wrote:
&gt; &gt; the reason you see the problems only on the first mkfs time is, because,
&gt; &gt; as soon as you mount the fs, the kernel changes the transfer block size...
&gt; &gt; and from that moment on, it stays there (unless the kernel has reason to
&gt; &gt; change it again...)
&gt; 
&gt; long term solution would be to make the crypto use 512 byte block size and
&gt; coalesce to kernel transfer size... then it would be blocksize
&gt; independent?
&gt; 
&gt; -Dan
&gt; 
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Hmm... I will just toss in my two cents.

I know precious little about the details of the linux filesystem, but
I have a generic suggestion.

Obviously it is possible to 'stack' filesystem related layers between
the raw device and the high level filesystem interface.

Things like logical volume management and software raid and NFS and
the loop-back device system, as well as the virutal mememory system.

Is it possible to simply design, either as a patch or in the kernel,
this 'coalesce' layer as an independent entity?  Separate the problem
of block size &amp; addressing from the media.  Can the LVM or loop device
do this already?  Where would the documentation on that be?

For small, portable, encrypted filesystems contained in a file on a
'normal filesysem' such a layer could be used.  For encrypting access
to a raw partition, such a layer might be optional.

Also, what (if anything) is it that prevents the crypto plugin from
being a pure loadable module?  Right now the loopAES requires
disabling the normal loop module and recompiling the entire kernel
before making the modified loop module.  If it is not possible to make
a pure module (that can be added to any compiled kernel), then perhaps
the core kernel modules or interface needs to be enhanced to allow
this.  If such a change does not hurt the core kernel, perhaps it
could be mainlined, allowing future crypto development to plug into
compiled kernels.

This thought was inspired from seeing it mentioned somewhere, whether
to expand the kernel module interface to accomodate future security
related modules as external add-ons, instead of having to patch the
core kernel.

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010511031052</emailId><senderName>Tad Truex</senderName><senderEmail>tad@oldtools.org</senderEmail><timestampReceived>2001-05-11 03:10:52-0400</timestampReceived><subject>Solved: Problems encrypting disk partitions in 2.4.3</subject><body>


On Thu, 10 May 2001, Dale Amon wrote:

&gt; There are two things I've noticed. I've on occasion had to
&gt; do the mkfs TWICE.

Bingo!  I knew it was something simple (although ever so slightly
non-intuitive).

Thanks to everyone who responded and especially to Jari for his very
insightful comments...  (for those of you who aren't native speakers of
English, that last bit was sarcastic).

Turns out Dale had it right.  I suspect that setting the block size from
the mke2fs command line would also work just fine.

Cheers,
Tad



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010519174907</emailId><senderName>"Adam Langley"</senderName><senderEmail>agl@linuxpower.org</senderEmail><timestampReceived>2001-05-19 17:49:07-0400</timestampReceived><subject>Re: loop-AES package reliability</subject><body>

On Fri, May 18, 2001 at 09:59:37AM -0500, David Lambert wrote:
&gt; I am a newbie to the crypto world and am in the process migrating my systems 
&gt; from 2.2.18 kernel to 2.4.x and am considering replacing the international 
&gt; crypto patch with the loop-AES package from Jari Ruusu. Does anyone have 
&gt; experience with the maturity/reliability of this package? Any comments please.

Stock 2.4.4 - all ok here

AGL

-- 
Join in the new game that's sweeping the country.  It's called "Bureaucracy". \
Everybody stands in a circle.  The first person to do anything loses.


[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010521111152</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-05-21 11:11:52-0400</timestampReceived><subject>Re: serpent loopback crypto "EXT2-fs: group descriptors corrupted"</subject><body>

[moved from linux-kernel to linux-crypto]

&gt; &gt; i created a 10mb file called .enc2 with random data and ran "#
losetup -e
&gt; &gt; serpent -k 128 /dev/loop0 /mnt/hda7/.enc2"
&gt; &gt; then i ran "# mke2fs /dev/loop0" and tried to "# mount /dev/loop0 /enc".
but
&gt; &gt; i get the following error messages when trying to mount:
&gt; &gt;
&gt; &gt; May 19 21:32:10 HOST2 kernel: EXT2-fs error (device loop(7,0)):
&gt; &gt; ext2_check_descriptors: Block bitmap for group 16 not in group (block
0)!
&gt; &gt; May 19 21:32:10 HOST2 kernel: EXT2-fs: group descriptors corrupted !
&gt; &gt;
&gt; &gt; im using kernel 2.4.4 patched with crypto patch 2.4.3.1 [and util linux
&gt; &gt; 2.11a patched with the patch from that crypto patch]
&gt; &gt; i also got the same errors with a 2gb file and by creating the loop
device
&gt; &gt; directly on my 19.5gb /dev/hda7
&gt; &gt; i tried a few times again and sometimes the encrypted loopback fs works
&gt; &gt; perfectly, sometimes the error occurs!?
&gt; &gt; anyone got an idea what this is!? i will supply more information on
request
&gt;
&gt; International crypto patch is misdesigned and broken, period. If you don't
&gt; want to play russian roulette with your data, you should consider using
&gt; loop-AES package. loop-AES announcement is here:
&gt;
&gt;     http://mail.nl.linux.org/linux-crypto/2001-05/msg00003.html

maybe you could tell me why exactly loop-AES is more secure than the
international crypto patch? ;)

- peter k.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010404112507</emailId><senderName>Dejan Muhamedagic</senderName><senderEmail>dejan@xsoft.at</senderEmail><timestampReceived>2001-04-04 11:25:07-0400</timestampReceived><subject>Re: ...unofficial 2.4.3 int patch...</subject><body>

Hi,

This is a rather old issue.  Both blowfish and rc6 exhibit this
behaviour.  So far nobody offered a clue on what's going on.  You
should be able to find a thread in the lists archives.

Cheers.

Dejan

On Wed, Apr 04, 2001 at 04:57:53AM +0100, Jon Masters wrote:
&gt; Hi,
&gt; 	I have applied the kerneli 2.4.3.1 patch to a clean 2.4.3 source
&gt; without trouble and have built a patched util-linux however attempting
&gt; to run losetup as:
&gt; 
&gt; losetup-crypto -e rc6 /dev/loop0 /dev/hd&lt;drive number&gt;
&gt; 
&gt; results only in either a seg fault or non fatal oops but the loop device
&gt; used cannot be used again until a reboot.
&gt; 
&gt; Here's part of a trace:
&gt; 
&gt; (Line numbers added obviously)
&gt; 
&gt; ---begin---
&gt; 0	open("/dev/hdg6", O_RDWR|0x8000)        = 3
&gt; 1	open("/dev/loop1", O_RDWR|0x8000)       = 4
&gt; 2	mlockall(0x3, 0x4)                      = 0
&gt; 3	ioctl(4, LOOP_SET_FD, 0x3)              = -1 ENOSYS (Function
&gt; 	not implemented)
&gt; 4	ioctl(4, LOOP_SET_FD, 0x3)              = 0
&gt; 5	ioctl(4, LOOP_SET_STATUS &lt;unfinished ...&gt;
&gt; 6	+++ killed by SIGSEGV +++
&gt; ---end---
&gt; 
&gt; Line 3 would seem to indicate that I am doing something wrong.
&gt; 
&gt; Has anyone else had problems? If not can people please suggest things
&gt; for me to try in order to help sort this out...
&gt; 
&gt; This patched losetup also seems to work on 2.2.18 with serpent. I wish
&gt; to use rc6 however no option appears in that box's kernel config for
&gt; this - although losetup doesn't complain about a lack of rc6 until after
&gt; it has requested a password.
&gt; 
&gt; I'm afraid that I was using a much older kernel for a lot of crypto
&gt; until recently and then was unable to use crypto at all for a while on
&gt; my main desktop box so a lot of things have changed since I last looked
&gt; at this - I apologise for not being up to speed on what's happening.
&gt; 
&gt; --jcm
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

-- 
Dejan Muhamedagic                      mailto:dejan@xsoft.at
Xsoft GmbH                               http://www.xsoft.at
Modecenterstr. 14, 1030 Vienna, Austria    +43 1 7963636 676

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010404162742</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@gnu.org</senderEmail><timestampReceived>2001-04-04 16:27:42-0400</timestampReceived><subject>(unofficial) linux-int-2.4.3.1-hvr1</subject><body>


...this patch may fix problems for ciphers which prefer to segfault
instead of encrypting data ;)
(actually the fix consists of enforcing the key length to be one of
those advertised through the /proc-fs, otherwise returning -EINVAL)

it's supposed to be applied on top of linux-int-2.4.3.1

..some minor cosmetic (harmless) cleanups are included too...

...get it at
http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr1.gz

greetings,
--
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010404181948</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-04 18:19:48-0400</timestampReceived><subject>(unofficial) linux-int-2.4.3.1-hvr2</subject><body>

On Wed, 4 Apr 2001, Herbert Valerio Riedel wrote:
&gt; http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr1.gz

well, some typo slipped through... rendering the rc6 cipher unusable...

try the following one instead if u need rc6
http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr2.gz

...
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010406104803</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-06 10:48:03-0400</timestampReceived><subject>IV calculation, blocksize (and CBC type encryptions) in loop.c</subject><body>

hello...

On Thu, 5 Apr 2001, Jens Axboe wrote:
&gt; On Thu, Apr 05 2001, Herbert Valerio Riedel wrote:
&gt; &gt; I've had success w/ your lvm-stack-1 patch on my system...
&gt; &gt; (next thing I'll testing will be w/ the real crypto patch)
&gt; Ok, good so far.

well... after some hours of code reading and experimenting I'm a bit stuck
with the next problem: the blocksize in the loop's transfer function...

I've got this one problem:

for encryption to work, especially the cbc variants (which are the only
one supported for loop encryption by the newest crypt patch), I need to
read the data block with the same block length, which it was written
with....

e.g. since user space programs aren't able to set the blocksize on loop
devices, they use the last active blocksize for that loop device.

on the other hand kernel space code is able to set blocksize... or at
least it seems so...
(btw, does loop_get_bs() return always the same blocksize... ?)

I've noticed that kernelspace filesystem code is able to do so... what

I've tried: I modified transfer_none() to spit out the arguments it got
passed, then I set up a loop device (about 1 gig large), then I created a
filesystem with mke2fs, making sure a blocksize greater than BLOCK_SIZE
was used, then I tried to sync/flush the buffer cache, and then I mounted
that filesystem... (using XFS shows the problem even better, since that
filesystem uses different blocksizes for the different sections)

$ losetup /dev/loop0 /dev/hda1

$ mke2fs -b 4096 /dev/loop0
this showed transfer's were done with size % 1024 == 0...

$ [...flush/sync buffers...]

$ mount /dev/loop0 /mnt/foo
this showed that transfer's were done mostly with size % 4096 == 0
and real_block % 4 == 0

$ umount /dev/loop0

$ mke2fs -b 4096 /dev/loop0
now all transfer's have size % 4096 == 0 and real_block % 4 == 0...

(btw, trying to set the blocksize by ioctl() from user space fails...)

now I could just workaround that problem, by operating on smaller blocks
in the transfer_function, and incrementing that IV by myself...
but then another problem is, that the IV calculation
breaks if the blocksize is set below 1024 byte, and only partial blocks
(as those blocksizes on which IV calculation relays) get processed... :-/

it's quite a mess :-(

you can test for yourself the effects, by making the transfer_xor
scrambling key depending on the real_block argument... (w/o having to
apply the full crypto patches...)

any ideas how to get IV+cbc based crypto 'fixed'?
(btw, I'm talking about block device backed loop setup's, no lvm
involved... just /dev/hda1...)

I hope I've succeeded explaining the problem clear enough...

greetings,
--


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010411124949</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-04-11 12:49:49-0400</timestampReceived><subject>Re: Still have the open(2) problem</subject><body>

Okay, I have got util-linux working with files larger than
2 gig. I tested it with a 4G twofish loopback with ext2 to 
be precise.

The problem is one that might be in the cracks between the
util-linux dist and the crypto patches. You have to modify
MCONFIG to include the -D_FILE_OFFSET_BITS=64 in the Compiler FLAGS:

	   CFLAGS    := -g $(CFLAGS) $(OPT) -I$(LIB) $(WARNFLAGS) \
				$(CURSESFLAGS) $(SLANGFLAGS) \
				-DSBINDIR=\"$(SBINDIR)\" \
				-DUSRSBINDIR=\"$(USRSBINDIR)\" \
				-DLOGDIR=\"$(LOGDIR)\" \
				-DVARPATH=\"$(VARPATH)\" \
				-DLOCALEDIR=\"$(LOCALEDIR)\" \
				-D_FILE_OFFSET_BITS=64

And of course you have to apply the util-linux patches from 
linux/Documentation/crypto/ 

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010509200437</emailId><senderName>Tad Truex</senderName><senderEmail>tad@oldtools.org</senderEmail><timestampReceived>2001-05-09 20:04:37-0400</timestampReceived><subject>Problems encrypting disk partitions in 2.4.3</subject><body>


Greetings,

I have been trying to get loopback encryption working with the 2.4.3
patches.  I applied the pathes to a fresh copy of the kernel source and a
fresh copy of util-linux-2.11b.  Both sets of patches applied cleanly.
Everything seems to build OK.   When I tested it on a regular file (using
128 bit serpent) it seemed to work just fine.  When I attempted it on a
disk partition, it croaked with the following message.

[root@bailey mount]# ./mount -t ext2 /dev/loop0 /mnt
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems


(This is the patched mount from the 2.11b release of util-linux).  Is it
obvious that I missed something, or is the 2.4 series not quite ready
(this worked quite reliably under the 2.2.17 kernel I have been using).


Thanks,
Tad

PS - Here is a complete transcript of the events leading to the preceding
message.

[root@bailey mount]# losetup -e serpent /dev/loop0 /dev/hdc6
Available keysizes (bits): 128 192 256
Keysize: 128
Password :
[root@bailey mount]# mke2fs /dev/loop0
mke2fs 1.18, 11-Nov-1999 for EXT2 FS 0.5b, 95/08/09
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
1281696 inodes, 2560060 blocks
128003 blocks (5.00%) reserved for the super user
First data block=0
79 block groups
32768 blocks per group, 32768 fragments per group
16224 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Writing inode tables: done
Writing superblocks and filesystem accounting information: done
[root@bailey mount]# ./mount -t ext2 /dev/loop0 /mnt
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510151443</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-05-10 15:14:43-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Wed, May 09, 2001 at 04:04:37PM -0400, Tad Truex wrote:
&gt; 
&gt; Greetings,
&gt; 
&gt; I have been trying to get loopback encryption working with the 2.4.3
&gt; patches.  I applied the pathes to a fresh copy of the kernel source and a
&gt; fresh copy of util-linux-2.11b.  Both sets of patches applied cleanly.
&gt; Everything seems to build OK.   When I tested it on a regular file (using
&gt; 128 bit serpent) it seemed to work just fine.  When I attempted it on a
&gt; disk partition, it croaked with the following message.
&gt; 
&gt; [root@bailey mount]# ./mount -t ext2 /dev/loop0 /mnt
&gt; mount: wrong fs type, bad option, bad superblock on /dev/loop0,
&gt;        or too many mounted file systems
&gt; 
&gt; 
&gt; (This is the patched mount from the 2.11b release of util-linux).  Is it
&gt; obvious that I missed something, or is the 2.4 series not quite ready
&gt; (this worked quite reliably under the 2.2.17 kernel I have been using).
&gt; 

There are two things I've noticed. I've on occasion had to
do the mkfs TWICE. 

	      dd if=/dev/zero of=/dev/md0 bs=1k count=17639128
	      losetup -e twofish /dev/loop0 /dev/md0
	      Password:
	      Init (up to 16 hex digits):
	      mkfs -t ext2 /dev/loop0 
	      mount -t ext2 /dev/loop0 /mnt
	      losetup -d /dev/loop0

and redo the losetup and mkfs. Search me...

Also, if you are doing large file systems... I have 
tried to get a patch to a number of people about a problem
with the 2.11b, but no one ever answered.

The patches are missing a very important compiler switch that allows
us to work with files larger than 2GB. Edit the file MCONFIG and
modify the CFLAGS value to include -D_FILE_OFFSET_BITS=64:

           CFLAGS    := -g $(CFLAGS) $(OPT) -I$(LIB) $(WARNFLAGS) \
                                $(CURSESFLAGS) $(SLANGFLAGS) \
                                -DSBINDIR=\"$(SBINDIR)\" \
                                -DUSRSBINDIR=\"$(USRSBINDIR)\" \
                                -DLOGDIR=\"$(LOGDIR)\" \
                                -DVARPATH=\"$(VARPATH)\" \
                                -DLOCALEDIR=\"$(LOCALEDIR)\" \
                                -D_FILE_OFFSET_BITS=64


-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510162252</emailId><senderName>Richard Polton</senderName><senderEmail>richard.polton@morganstanley.com</senderEmail><timestampReceived>2001-05-10 16:22:52-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

Wasn't there a bug in the loopback driver which surfaced in 2.4.0 and
was fixed in early 2.4.4-pre?

Dale Amon wrote:

&gt; On Wed, May 09, 2001 at 04:04:37PM -0400, Tad Truex wrote:
&gt; &gt;
&gt; &gt; Greetings,
&gt; &gt;
&gt; &gt; I have been trying to get loopback encryption working with the 2.4.3
&gt; &gt; patches.  I applied the pathes to a fresh copy of the kernel source and a
&gt; &gt; fresh copy of util-linux-2.11b.  Both sets of patches applied cleanly.
&gt; &gt; Everything seems to build OK.   When I tested it on a regular file (using
&gt; &gt; 128 bit serpent) it seemed to work just fine.  When I attempted it on a
&gt; &gt; disk partition, it croaked with the following message.
&gt; &gt;
&gt; &gt; [root@bailey mount]# ./mount -t ext2 /dev/loop0 /mnt
&gt; &gt; mount: wrong fs type, bad option, bad superblock on /dev/loop0,
&gt; &gt;        or too many mounted file systems
&gt; &gt;
&gt; &gt;
&gt; &gt; (This is the patched mount from the 2.11b release of util-linux).  Is it
&gt; &gt; obvious that I missed something, or is the 2.4 series not quite ready
&gt; &gt; (this worked quite reliably under the 2.2.17 kernel I have been using).
&gt; &gt;
&gt;
&gt; There are two things I've noticed. I've on occasion had to
&gt; do the mkfs TWICE.
&gt;
&gt;               dd if=/dev/zero of=/dev/md0 bs=1k count=17639128
&gt;               losetup -e twofish /dev/loop0 /dev/md0
&gt;               Password:
&gt;               Init (up to 16 hex digits):
&gt;               mkfs -t ext2 /dev/loop0
&gt;               mount -t ext2 /dev/loop0 /mnt
&gt;               losetup -d /dev/loop0
&gt;
&gt; and redo the losetup and mkfs. Search me...
&gt;
&gt; Also, if you are doing large file systems... I have
&gt; tried to get a patch to a number of people about a problem
&gt; with the 2.11b, but no one ever answered.
&gt;
&gt; The patches are missing a very important compiler switch that allows
&gt; us to work with files larger than 2GB. Edit the file MCONFIG and
&gt; modify the CFLAGS value to include -D_FILE_OFFSET_BITS=64:
&gt;
&gt;            CFLAGS    := -g $(CFLAGS) $(OPT) -I$(LIB) $(WARNFLAGS) \
&gt;                                 $(CURSESFLAGS) $(SLANGFLAGS) \
&gt;                                 -DSBINDIR=\"$(SBINDIR)\" \
&gt;                                 -DUSRSBINDIR=\"$(USRSBINDIR)\" \
&gt;                                 -DLOGDIR=\"$(LOGDIR)\" \
&gt;                                 -DVARPATH=\"$(VARPATH)\" \
&gt;                                 -DLOCALEDIR=\"$(LOCALEDIR)\" \
&gt;                                 -D_FILE_OFFSET_BITS=64
&gt;
&gt; --
&gt; ------------------------------------------------------
&gt; Use Linux: A computer        Dale Amon, CEO/MD
&gt; is a terrible thing          Village Networking Ltd
&gt; to waste.                    Belfast, Northern Ireland
&gt; ------------------------------------------------------
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510172030</emailId><senderName>Tad Truex</senderName><senderEmail>tad@oldtools.org</senderEmail><timestampReceived>2001-05-10 17:20:30-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, 10 May 2001, Richard Polton wrote:

&gt; Wasn't there a bug in the loopback driver which surfaced in 2.4.0 and
&gt; was fixed in early 2.4.4-pre?
&gt;

There was a patch from 2.4.3 to 2.4.4 for loop.c I reversed it and applied
it to my 2.4.3 source tree.  It didn't help.  It is entirely possible that
the 2.4.4 patch required other unrelated changes from the 2.4.4 tree to
work correctly which is why it didn't solve my problem.

One thing I noticed from Dale's message is that I have slightly different
response from the 2.11b losetup when trying twofish.  His

              losetup -e twofish /dev/loop0 /dev/md0
              Password:
              Init (up to 16 hex digits):

appears to prompt for a seed, mine

		losetup -e twofish /dev/loop0 /dev/hdc6
		Available keysizes (bits): 128 192 256
		Keysize: 128
		Password :

prompts for a keysize.  I am sure that mine is the 2.11b version of
losetup.  Maybe that is the problem?  Perhaps I need to go back to an
earlier version?  Might I have missed a compile option?


Any thoughts?

Thanks for the responses so far!

/Tad





Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510181807</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-05-10 18:18:07-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, May 10, 2001 at 01:20:30PM -0400, Tad Truex wrote:
&gt; On Thu, 10 May 2001, Richard Polton wrote:
&gt; &gt; Wasn't there a bug in the loopback driver which surfaced in 2.4.0 and
&gt; &gt; was fixed in early 2.4.4-pre?

I'm using 2.4.3 + int patches.

&gt; appears to prompt for a seed, mine
&gt; prompts for a keysize.  I am sure that mine is the 2.11b version of
&gt; losetup.  Maybe that is the problem?  Perhaps I need to go back to an
&gt; earlier version?  Might I have missed a compile option?

My fault. The example I pulled from my notes was an older version. The
prompt you see is the same one I get.

I've had it working (seemingly) fine for a month or so. And I've been
trying to get some discussion going on the issues of running crypto
on "bare metal" vs doing it on top of an fs although I think the
bare metal is fine.

I only so the "unusual" behavior the first time I did the
mkfs. And I may not have seen it at all when I changed to
reiserfs.

But if you want a large disk you do have to patch that MCONFIG
file before you make your losetup and friends. Otherwise you
can't deal with large files systems. 

The current debian *standard* 2.11b has the crypto support 
compiled in... I haven't checked in a month to see if they
added the MCONFIG change in CFLAGS. I emailed both the
debian and the util-linux maintainers on this and never
heard from either of them.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010518145937</emailId><senderName>David Lambert</senderName><senderEmail>dave_lambert@fbcc.com</senderEmail><timestampReceived>2001-05-18 14:59:37-0400</timestampReceived><subject>loop-AES package reliability</subject><body>

I am a newbie to the crypto world and am in the process migrating my systems 
from 2.2.18 kernel to 2.4.x and am considering replacing the international 
crypto patch with the loop-AES package from Jari Ruusu. Does anyone have 
experience with the maturity/reliability of this package? Any comments please.

Thanks,

Dave.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010405123829</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-04-05 12:38:29-0400</timestampReceived><subject>Still have the open(2) problem</subject><body>

I still get an open(2) failure on a plain 3gb file
created by dd if=/dev/zero.

I'm running a 2.4.3i now, no probs with the install;
even got freeswan 1.9 patches to go in.

loop7 patches must be in the release because an attempt
to add them says they are already there.

So I *still* can't open a big file from my own code, not
even a plain one let alone a loopback.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010413121017</emailId><senderName></senderName><senderEmail>conferencing</senderEmail><timestampReceived>2001-04-13 12:10:17-0400</timestampReceived><subject>RE: thankyou                         32364</subject><body>

&lt;HTML&gt;
&lt;BODY&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Take \
Control Of Your Conference Calls&lt;/TITLE&gt;&lt;META http-equiv=Content-Type \
content="text/html; charset=windows-1252"&gt;&lt;META content="MSHTML 5.50.4134.100" \
name=GENERATOR&gt;&lt;/HEAD&gt;&lt;BODY vLink=#c0c0c0 link=#c0c0c0 bgColor=#000000 \
leftMargin=0&gt;&lt;PRE&gt;&lt;FONT face=arial,helvetica&gt;&lt;HEAD&gt;&lt;META \
content=FrontPage.Editor.Document name=ProgId&gt;&lt;DIV align=center&gt;&lt;CENTER&gt;&lt;TABLE \
height=789 cellSpacing=0 cellPadding=0 width=602 border=0&gt;&lt;TBODY&gt;&lt;TR vAlign=top&gt;&lt;TD \
width=602 height=452&gt;&lt;DIV align=center&gt;&lt;TABLE width=470 border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P \
align=center&gt;&lt;FONT color=#0000ff size=7&gt;&lt;B&gt;&lt;FONT color=999999 size=6&gt;Why Pay More For \
Your &lt;/FONT&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;FONT color=#999999 size=6&gt;&lt;B&gt;Conference \
Calls?&lt;/B&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;TABLE width=352 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P align=center&gt;&lt;FONT color=#ff0000 size=5&gt;Only &lt;U&gt;&lt;B&gt;.18 \
Cents &lt;/B&gt;&lt;/U&gt;per minute (Including long \
distance!)&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;No setup fees&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;No contracts or monthly \
fees&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;Call anytime, \
from anywhere, to anywhere&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 \
size=3&gt;&lt;B&gt;International Dial In 18 cents per minute&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;Connects up to 100 \
participants&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 \
size=3&gt;&lt;B&gt;Operator Help available \
24/7&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;DIV align=center&gt;&lt;TABLE width=424 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;DIV align=center&gt;&lt;FONT color=#ff0000 size=6&gt;&lt;B&gt;&lt;FONT \
size=5&gt;Get the best quality, the easiest to use,&lt;/FONT&gt;&lt;/B&gt;&lt;/FONT&gt; &lt;FONT \
color=#ff0000 size=5&gt;&lt;B&gt;and lowest rate in the \
industry.&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;TABLE width=300 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD height=73&gt;&lt;DIV align=center&gt;&lt;P align=center&gt;&lt;FONT \
color=#999999 size=4&gt;If you like saving money, fill out the form below and one of our \
consultants will contact \
you.&lt;/FONT&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt;&lt;DIV \
align=center&gt;&lt;P align=center&gt;&lt;FONT color=#ff0000 size=2&gt;Required Input \
Field&lt;/FONT&gt;&lt;FONT color=#ff0000 size=2&gt;*&lt;/FONT&gt;&lt;/P&gt;&lt;TABLE cellSpacing=0 \
borderColorDark=#333300 cellPadding=3 width=600 \
borderColorLight=#ffffcc&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;FORM \
action="mailto:inbox001@excite.com?subject=Conference_Inquiry" method=post \
encType=text/plain&gt;&lt;DIV align=center&gt;&lt;TABLE width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Name*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT name=NAME&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" color=#ff0000 size=2&gt;Web Address*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT \
color=#ff0000&gt;&lt;INPUT value=http:// name=URL&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Company Name*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=COMPANY_NAME&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT \
face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;State&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD \
width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT size=2 name=STATE&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Business Phone*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=BUS_PHONE&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT \
face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Home \
Phone&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT name=HOME_PHONE&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" color=#ff0000 size=2&gt;E-mail*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT \
color=#ff0000&gt;&lt;INPUT name=EMAIL&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV \
align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Type of \
Business&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=TYPE_OF_BUSINESS&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;BR&gt;¬†¬†¬†¬†¬†¬†¬†&amp;nbs \
p;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&lt;DIV \
align=center&gt;&lt;INPUT type=submit value="Submit Information" name=submit&gt;&lt;P \
align=center&gt;&lt;/BR&gt;&lt;B&gt;&lt;/BR&gt;&lt;FONT color=999999 face="Arial, Helvetica, sans-serif" \
size=5&gt;&lt;P align=center&gt;This could be your ad!&lt;/FONT&gt;&lt;/B&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" size=2&gt;&lt;BR&gt;&lt;A href="mailto:market202@excite.com?subject=Direct \
Marketing"&gt;&lt;FONT color=ff0000&gt;Click here to e-mail us your contact \
info&lt;/A&gt;.&lt;/FONT&gt;&lt;/P&gt;&lt;P align=center&gt;&lt;FONT face="Arial, Helvetica, sans-serif" \
color=#999999 size=1&gt;This email is to those persons that have contacted Conference \
Calls for Less regarding available services or product information  If this email is \
reaching you in error and you feel that you have not contacted us, &lt;A \
href="mailto:rem0ve.@excite.com?subject=Remove_Conference"&gt;click here&lt;/A&gt;. We \
apologize and will gladly remove you from our mailing \
list.&lt;/FONT&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/BODY&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010408142957</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@gnu.org</senderEmail><timestampReceived>2001-04-08 14:29:57-0400</timestampReceived><subject>announce: linux-int-2.4.3.1-hvr3</subject><body>

hello,

*WARNING* experimental *WARNING*

...this patch (on top of the official international crypto
patch-int-2.4.3.1) fixes some problems I've been experiencing with
the IV calculation in loop.c, which have some annoying consequences; 
(say, you wanted to move around images among medias with
different block sizes, e.g. burn an file backed image to a cdrom, then
you'll surely have fun mounting directly that cdrom block device... 
but there are problems even creating the image from user space, and
then having the blocksize changed in kernel space by some filesystem
implementation... there were other issues too...)

the approach I've taken to 'fix' this comprises two changes,

1. using a base of 512 (aka sector size) for IV calculation, instead
of the former way, to take the actual blocksize of the underlying media.

2. breaking up the encoding of a buffer into 512 byte chunks (if
needed) and incrementing the IV in transfer_cryptoapi()

(3. returning -EINVAL if trying to setup an offset into the loop data
 % 512 != 0  -- since that would break... unless somebody completely
rewrites loop.c...)

as to the experimental-warning issued at the beginning of this mail,
as you may already have noticed, this changes will make your old
encrypted storages unusable, due to the new IV calculation...

http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr3.gz

PS: something not related to this patch, -- I've noticed SMP related
data corruption, I suspect having the IV unlocked in the shared cipher
context may lead to race conditions... (maybe the IV should be passed
on a per-call basis in order to avoid spinlocks...)

greetings,
--
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010409021004</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-09 02:10:04-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

Herbert Valerio Riedel wrote:
&gt; hello,
&gt; 
&gt; *WARNING* experimental *WARNING*
&gt; 
&gt; ...this patch (on top of the official international crypto
&gt; patch-int-2.4.3.1) fixes some problems I've been experiencing with
&gt; the IV calculation in loop.c, which have some annoying consequences;
&gt; (say, you wanted to move around images among medias with
&gt; different block sizes, e.g. burn an file backed image to a cdrom, then
&gt; you'll surely have fun mounting directly that cdrom block device...
&gt; but there are problems even creating the image from user space, and
&gt; then having the blocksize changed in kernel space by some filesystem
&gt; implementation... there were other issues too...)
&gt; 
&gt; the approach I've taken to 'fix' this comprises two changes,
&gt; 
&gt; 1. using a base of 512 (aka sector size) for IV calculation, instead
&gt; of the former way, to take the actual blocksize of the underlying media.
&gt; 
&gt; 2. breaking up the encoding of a buffer into 512 byte chunks (if
&gt; needed) and incrementing the IV in transfer_cryptoapi()
&gt; 
&gt; (3. returning -EINVAL if trying to setup an offset into the loop data
&gt;  % 512 != 0  -- since that would break... unless somebody completely
&gt; rewrites loop.c...)
&gt; 
&gt; as to the experimental-warning issued at the beginning of this mail,
&gt; as you may already have noticed, this changes will make your old
&gt; encrypted storages unusable, due to the new IV calculation...
&gt; 
&gt; http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr3.gz
&gt; 
&gt; PS: something not related to this patch, -- I've noticed SMP related
&gt; data corruption, I suspect having the IV unlocked in the shared cipher
&gt; context may lead to race conditions... (maybe the IV should be passed
&gt; on a per-call basis in order to avoid spinlocks...)

Below is part of your patch, pay particular attention to line 348.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


@@ -258,6 +280,12 @@
                                        lo-&gt;lo_device);
 }
 
+static inline unsigned long loop_get_iv(struct loop_device *lo,
+                                       unsigned long sector)
+{
+       return sector - (lo-&gt;lo_offset &gt;&gt; IV_SECTOR_BITS);
                   ^^^^^^ LINE 348 - CORRUPTION ?
+}
+
 static int lo_send(struct loop_device *lo, struct buffer_head *bh, int bsize,
                   loff_t pos)
 {
@@ -275,7 +303,7 @@

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421220618</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-21 22:06:18-0400</timestampReceived><subject>international crypto patch as non-kernel-patch...</subject><body>

hello!

I've played around a bit, and I came to the conclusion, that we actually
don't need it anymore to have the international crypto patch as an
kernel-patch, if only modules are used...

It can be build completely externally (access to the kernel includes is
needed for compilation though...)... and inserted into a running
unpatched 2.4.x kernel... sounds great, doesn't it?

I'll try package it for general use...

...any comments so far?

there's only one issue I'm fighting with... that damned broken IV
calculation... :-/

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421230536</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-21 23:05:36-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, 22 Apr 2001, Herbert Valerio Riedel wrote:
&gt; there's only one issue I'm fighting with... that damned broken IV
&gt; calculation... :-/

Is this why 2.4 blowfish crypto won't work with 2.2 blowfish crypto?

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421232102</emailId><senderName>Andi Kleen</senderName><senderEmail>ak@suse.de</senderEmail><timestampReceived>2001-04-21 23:21:02-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sat, Apr 21, 2001 at 04:05:36PM -0700, Dan Hollis wrote:
&gt; On Sun, 22 Apr 2001, Herbert Valerio Riedel wrote:
&gt; &gt; there's only one issue I'm fighting with... that damned broken IV
&gt; &gt; calculation... :-/
&gt; 
&gt; Is this why 2.4 blowfish crypto won't work with 2.2 blowfish crypto?

I don't know anything about the "blowfish crypto" you use, the following
is a generic statement.

The encrypted on disk files are incompatible if the crypto module used
the 2.2 IV directly. You can write a 2.4 crypt module that can still
read 2.2 files, but it needs some changes -- it needs to manually remap
the relative numbers via bmap to absolute. 2.2 passed absolute block numbers, 
which was really broken, 2.4 switched to relative logical block numbers
(which still have some problems, but are not too bad).


-Andi

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423143338</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@gnu.org</senderEmail><timestampReceived>2001-04-23 14:33:38-0400</timestampReceived><subject>Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

hello!

short version:
   this is the international crypto patch, which is built outside of
   the kernel source tree. you don't even have to reboot (unless your
   kernel didn't have loop devices enabled, or some other unthought
   situation exists... :)

As a response to Jari's loop-AES crypto filter for the loop back
device, which claims to be hassle free since no kernel modification is
needed; I've repackaged the all known international crypto patch,
which according to some people suffers from the need to patch the
kernel in order to make use of it and thus may not be ever get into
the kernel since there are still some countries where laws don't
support an individuals need for privacy.

This (re)package has only one major drawback, crypto can only built as
modules so far and it supports only kernel 2.4.3 and later so far... 

If you are interested you can get it from

http://www.hvrlab.org/pub/crypto/cryptoapi-2.4.3-hvr4.tar.gz

...as usual, backup your data before playing around with it... :-)

ps: there is an optional patch against loop.[ch] contained, which
fixes current IV calculation bugs and introduces a selectable sector
based IV calculation mode.

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010424114005</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-24 11:40:05-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

Herbert Valerio Riedel wrote:
&gt; short version:
&gt; this is the international crypto patch, which is built outside of
&gt; the kernel source tree. you don't even have to reboot (unless your
&gt; kernel didn't have loop devices enabled, or some other unthought
&gt; situation exists... :)
&gt; 
&gt; As a response to Jari's loop-AES crypto filter for the loop back
&gt; device, which claims to be hassle free since no kernel modification is
&gt; needed; I've repackaged the all known international crypto patch,
&gt; which according to some people suffers from the need to patch the
&gt; kernel in order to make use of it and thus may not be ever get into
&gt; the kernel since there are still some countries where laws don't
&gt; support an individuals need for privacy.
&gt; 
&gt; This (re)package has only one major drawback, crypto can only built as
&gt; modules so far and it supports only kernel 2.4.3 and later so far...

linux-2.4.3-cryptoapi-hvr4/drivers/block/loop.c lines 270...279 after your
kernel patch:

static int lo_read_actor(read_descriptor_t * desc, struct page *page, unsigned long \
offset, unsigned long size) {
	char *kaddr;
	unsigned long count = desc-&gt;count;
	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
	struct loop_device *lo = p-&gt;lo;
	unsigned long IV = loop_get_iv(lo, (page-&gt;index * PAGE_CACHE_SIZE + offset - \
                lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS);
                                            \
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  if (size &gt; count)
		size = count;

Have you tested that code with partitions or files that are larger than
4 gigs? On systems where int is 32 bits, that computation overflows.

If you want 512 byte based IV computation without modifying your kernel at
all, you can use the loop.o module from my loop-AES package. I haven't tried
using your modules based cryptoapi and my loop-AES drivers together, but I
don't see any obvious reason why they couldn't be used simultaneously.

My loop-AES package is here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.1b.tar.bz2
    md5sum 61e521a383ce9a90c3f7b98bcf789813

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010423114813</emailId><senderName>Emil</senderName><senderEmail>emil@la.mine.nu</senderEmail><timestampReceived>2001-04-23 11:48:13-0400</timestampReceived><subject>Self-destruct password</subject><body>

Has anyone though of adding a second password to the encryption
mechanism that will wipe clean the whole partition/file ?

In this way if someone forces you to give him the password to
access your private data you can provide him the self-destruct
password instead. He won't be able to tell which is the
right password until he tries it and then it will be to late.

-- 
								Regards,
								Emil
--
All those people I've killed...nothin' personal

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423130801</emailId><senderName>Chris Smith</senderName><senderEmail>csmith@ericksonaircrane.com</senderEmail><timestampReceived>2001-04-23 13:08:01-0400</timestampReceived><subject>RE: Self-destruct password</subject><body>

I love the idea.  Just seems that it would be a little hard to test/debug if
you have to wipe the system to test it.

Chris.

&gt; -----Original Message-----
&gt; From:	Emil [SMTP:emil@la.mine.nu]
&gt; Sent:	Monday, April 23, 2001 4:48 AM
&gt; To:	Jari Ruusu
&gt; Cc:	linux-crypto@nl.linux.org
&gt; Subject:	Self-destruct password
&gt; 
&gt; Has anyone though of adding a second password to the encryption
&gt; mechanism that will wipe clean the whole partition/file ?
&gt; 
&gt; In this way if someone forces you to give him the password to
&gt; access your private data you can provide him the self-destruct
&gt; password instead. He won't be able to tell which is the
&gt; right password until he tries it and then it will be to late.
&gt; 
&gt; -- 
&gt; 								Regards,
&gt; 								Emil
&gt; --
&gt; All those people I've killed...nothin' personal
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423132343</emailId><senderName>Ingo Oeser</senderName><senderEmail>ingo.oeser@informatik.tu-chemnitz.de</senderEmail><timestampReceived>2001-04-23 13:23:43-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, Apr 23, 2001 at 06:08:01AM -0700, Chris Smith wrote:
&gt; &gt; From:	Emil [SMTP:emil@la.mine.nu]
&gt; &gt; Has anyone though of adding a second password to the encryption
&gt; &gt; mechanism that will wipe clean the whole partition/file ?
&gt; I love the idea.  Just seems that it would be a little hard to test/debug if
&gt; you have to wipe the system to test it.

User Mode Linux[1] comes to mind here...

No problem testing it there. Even more fun is possible there ;-)

e.g. people use it to develop file systems or playing VM games.

Emil: Just go ahead implementing this.

PS: Quoting repaired.

Regards

Ingo Oeser

[1] http://user-mode-linux.sourceforge.net/
-- 
10.+11.03.2001 - 3. Chemnitzer LinuxTag &lt;http://www.tu-chemnitz.de/linux/tag&gt;
         &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;     been there and had much fun   &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423133224</emailId><senderName>"Bill Rugolsky Jr."</senderName><senderEmail>rugolsky@ead.dsa.com</senderEmail><timestampReceived>2001-04-23 13:32:24-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, Apr 23, 2001 at 06:08:01AM -0700, Chris Smith wrote:
&gt; I love the idea.  Just seems that it would be a little hard to test/debug if
&gt; you have to wipe the system to test it.
 
Use Jeff Dike's user-mode-linux -- restore your filesystem image with "cp".
It is even merged in Alan's tree now ... :-)

Regards,

   Bill Rugolsky

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423133556</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-04-23 13:35:56-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

I have a slightly differenct question.  How does one change the pass
phrase of an encrypted volume?

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423140753</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-23 14:07:53-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, 23 Apr 2001, Chris Kuklewicz wrote:

&gt; I have a slightly differenct question.  How does one change the pass
&gt; phrase of an encrypted volume?
you have to reencrypt the whole volume... by a complete backup with the
old passphrase, and a restore with the new one...

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423152618</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-04-23 15:26:18-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, Apr 23, 2001 at 04:07:53PM +0200, Herbert Valerio Riedel wrote:
&gt; On Mon, 23 Apr 2001, Chris Kuklewicz wrote:
&gt; 
&gt; &gt; I have a slightly differenct question.  How does one change the pass
&gt; &gt; phrase of an encrypted volume?
&gt; you have to reencrypt the whole volume... by a complete backup with the
&gt; old passphrase, and a restore with the new one...
&gt; 

You should be able to change passwords quite simply by losetuping two
versions of the encrypted volume - one device with the old password
and one device with the new password.  Then dding from the old device
to the new device.

astor

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423190011</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-23 19:00:11-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, 23 Apr 2001, Alexander S A Kjeldaas wrote:
&gt; You should be able to change passwords quite simply by losetuping two
&gt; versions of the encrypted volume - one device with the old password
&gt; and one device with the new password.  Then dding from the old device
&gt; to the new device.

In theory, it should be possible to write a standalone program to convert
the passphrases of a encrypted volume "in-place", yes?

It would read each block using old passphrase, and write it using the new
one.

Of course, there are extra variables such as the block size... :-(

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423200148</emailId><senderName>Stefan Schlott</senderName><senderEmail>stefan.schlott@informatik.uni-ulm.de</senderEmail><timestampReceived>2001-04-23 20:01:48-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, Apr 23, 2001 at 07:48:13AM -0400, Emil wrote:
&gt; Has anyone though of adding a second password to the encryption
&gt; mechanism that will wipe clean the whole partition/file ?
imho this can't work - at some point, the driver will have to determine
which password was given. This check could be done by a stand-alone
program too, rendering this kind of protection useless against serious
attacks.

Stefan.

-- 
*--- please cut here... -------------------------------------- thanks! ---*
|-&gt; E-Mail: stefan.schlott@informatik.uni-ulm.de    PGP-Key: 0x2F36F4FE &lt;-|
| It's stupid cryptography, but the sort of thing you'd expect out of     |
| Microsoft.                                                              |
|   -- Bruce Schneier on the "NSA key", CryptoGram 09'1999                |
*-------------------------------------------------------------------------*

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423201330</emailId><senderName>Tim Walberg</senderName><senderEmail>tewalberg@mediaone.net</senderEmail><timestampReceived>2001-04-23 20:13:30-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

And what do you do should you have a power failure half-way
through, unless you do some very careful checkpointing, and
other such safeguards...? I think the 'use two loopback
devices and dd from one to the other' concept is probably
about the best answer to this.


			tw


On 04/23/2001 12:00 -0700, Dan Hollis wrote:
&gt;&gt;	On Mon, 23 Apr 2001, Alexander S A Kjeldaas wrote:
&gt;&gt;	&gt; You should be able to change passwords quite simply by losetuping two
&gt;&gt;	&gt; versions of the encrypted volume - one device with the old password
&gt;&gt;	&gt; and one device with the new password.  Then dding from the old device
&gt;&gt;	&gt; to the new device.
&gt;&gt;	
&gt;&gt;	In theory, it should be possible to write a standalone program to convert
&gt;&gt;	the passphrases of a encrypted volume "in-place", yes?
&gt;&gt;	
&gt;&gt;	It would read each block using old passphrase, and write it using the new
&gt;&gt;	one.
&gt;&gt;	
&gt;&gt;	Of course, there are extra variables such as the block size... :-(
&gt;&gt;	
&gt;&gt;	-Dan
&gt;&gt;	
&gt;&gt;	
&gt;&gt;	Linux-crypto:  cryptography in and on the Linux system
&gt;&gt;	Archive:       http://mail.nl.linux.org/linux-crypto/
End of included message



-- 
+--------------------------+------------------------------+
| Tim Walberg              | tewalberg@mediaone.net       |
| 828 Marshall Ct.         | www.concentric.net/~twalberg |
| Palatine, IL 60074       |                              |
+--------------------------+------------------------------+

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010423201749</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-23 20:17:49-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, 23 Apr 2001, Tim Walberg wrote:
&gt; And what do you do should you have a power failure half-way
&gt; through, unless you do some very careful checkpointing, and
&gt; other such safeguards...?

The same as you do with ext2 in general, I think.

Virtually *nothing* in the current kernel has checkpointing or any other
safeguards.

You can toast *unencrypted* ext2 filesystems with a badly timed power
outage.

I think that's why we use UPSes.

Anyway, your argument is akin to "its dangerous, so we shouldnt allow it
to be done".

So let's remove fdisk, and root access. Both of those are equally
dangerous.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010425140527</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-25 14:05:27-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

hi,

On Tue, 24 Apr 2001, Jari Ruusu wrote:
&gt; linux-2.4.3-cryptoapi-hvr4/drivers/block/loop.c lines 270...279 after your
&gt; kernel patch:
&gt; 
&gt; static int lo_read_actor(read_descriptor_t * desc, struct page *page, unsigned long \
&gt; offset, unsigned long size) {
&gt; 	char *kaddr;
&gt; 	unsigned long count = desc-&gt;count;
&gt; 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
&gt; 	struct loop_device *lo = p-&gt;lo;
&gt; 	unsigned long IV = loop_get_iv(lo, (page-&gt;index * PAGE_CACHE_SIZE + offset - \
&gt; lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS); \
&gt; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  if (size &gt; count)
&gt; 		size = count;
&gt; 
&gt; Have you tested that code with partitions or files that are larger than
&gt; 4 gigs? On systems where int is 32 bits, that computation overflows.
you're right, I actually had it right in the first place, but stupidly
rewrote it to overflow C:-)

it should have been more or less:

unsigned long IV = loop_get_iv(lo,
  page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
  + (offset - lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS));


I'll be fixed in cryptoapi-2.4.3-hvr6 (see http://www.hvrlab.org/crypto/)

oh, and btw, it should only concern file backed loop's... block devices,
as partitions, should have worked fine...

&gt; If you want 512 byte based IV computation without modifying your kernel at
&gt; all, you can use the loop.o module from my loop-AES package. I haven't tried
&gt; using your modules based cryptoapi and my loop-AES drivers together, but I
&gt; don't see any obvious reason why they couldn't be used simultaneously.

erm... I've looked at your patch... you do just the same thing as I do, as
it concerns 'changing the kernel'... but you do it in a 'static' way... I
want it to be changeable at runtime... and letting the way open to add
more IV calculation variants in the future, which every filter can choose
among at initialization...

&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010426104758</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-26 10:47:58-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Tue, 24 Apr 2001, Jari Ruusu wrote:
&gt; &gt; Have you tested that code with partitions or files that are larger than
&gt; &gt; 4 gigs? On systems where int is 32 bits, that computation overflows.
&gt; you're right, I actually had it right in the first place, but stupidly
&gt; rewrote it to overflow C:-)
&gt; 
&gt; it should have been more or less:
&gt; 
&gt; unsigned long IV = loop_get_iv(lo,
&gt; page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
&gt; + (offset - lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS));

I hope not exactly like that. What happens when "lo-&gt;lo_offset" is larger
than "offset". Oops. Besides, the + operator takes precedence over the &gt;&gt;
operator on the third line.

&gt; &gt; If you want 512 byte based IV computation without modifying your kernel at
&gt; &gt; all, you can use the loop.o module from my loop-AES package. I haven't tried
&gt; &gt; using your modules based cryptoapi and my loop-AES drivers together, but I
&gt; &gt; don't see any obvious reason why they couldn't be used simultaneously.
&gt; 
&gt; erm... I've looked at your patch... you do just the same thing as I do, as
&gt; it concerns 'changing the kernel'... but you do it in a 'static' way... I
&gt; want it to be changeable at runtime... and letting the way open to add
&gt; more IV calculation variants in the future, which every filter can choose
&gt; among at initialization...

Have you ever observed the sizes of the transfer requests? The sizes of
transfer requests change on the fly (and I'm not not talking about the last
partial block of a file). Meaning, any IV computation that depends on the
block size of a filesystem, is broken and must die! We do not have an option
here.

Just for the record, loop-AES package does 512 byte based IV and does not
care about filesystem block size. loop-AES package does not change kernel
sources and is almost immune to kernel source changes made by distro
vendors. Look, here I'm building loop-AES on almost vanilla 2.2.19aa2.

# make LINUX_SOURCE=/usr/src/linux-2.2.19aa2
cd /usr/src/linux-2.2.19aa2 &amp;&amp; make SUBDIRS=/root/loop-AES-v1.1b modules
make[1]: Entering directory `/usr/src/linux-2.2.19aa2'
make -C  /root/loop-AES-v1.1b CFLAGS="-Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE" MAKING_MODULES=1 modules make[2]: Entering \
directory `/root/loop-AES-v1.1b' cc -D__KERNEL__ -I/usr/src/linux-2.2.19aa2/include \
-Wall -Wstrict-prototypes -O2 -fomit-frame-pointer -fno-strict-aliasing -pipe \
-fno-strength-reduce -mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 \
-malign-jumps=2 -malign-functions=2 -DCPU=686 -DMODULE -c aes-glue.c -o aes-glue.o cc \
-D__KERNEL__ -I/usr/src/linux-2.2.19aa2/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE -c rijndael.c -o rijndael.o rm -f \
patched-loop.c cp /usr/src/linux-2.2.19aa2/drivers/block/loop.c patched-loop.c
patch -p0 -l --dry-run &lt; loop.c-2.2.diff || cp loop.c-2.2.original patched-loop.c
patching file `patched-loop.c'
patch -p0 -l &lt; loop.c-2.2.diff
patching file `patched-loop.c'
cc -D__KERNEL__ -I/usr/src/linux-2.2.19aa2/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE -DEXPORT_SYMTAB -c patched-loop.c -o \
patched-loop.o ld -m elf_i386 -r patched-loop.o aes-glue.o rijndael.o -o loop.o
mkdir -p /lib/modules/2.2.19aa2/block
cp -p loop.o /lib/modules/2.2.19aa2/block
depmod
sync
make[2]: Leaving directory `/root/loop-AES-v1.1b'
make[1]: Leaving directory `/usr/src/linux-2.2.19aa2'

Result: Working loop.o module with AES cipher built in, and 512 byte IV.

Here I'm building loop-AES on 2.2.19aa2-bad where I intentionally changed
loop.c in a way that makes the loop-AES patch fail, but Makefile has a
working plan B.

# make LINUX_SOURCE=/usr/src/linux-2.2.19aa2-bad
cd /usr/src/linux-2.2.19aa2-bad &amp;&amp; make SUBDIRS=/root/loop-AES-v1.1b modules
make[1]: Entering directory `/usr/src/linux-2.2.19aa2-bad'
make -C  /root/loop-AES-v1.1b CFLAGS="-Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE" MAKING_MODULES=1 modules make[2]: Entering \
directory `/root/loop-AES-v1.1b' cc -D__KERNEL__ \
-I/usr/src/linux-2.2.19aa2-bad/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE -c aes-glue.c -o aes-glue.o cc -D__KERNEL__ \
-I/usr/src/linux-2.2.19aa2-bad/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE -c rijndael.c -o rijndael.o rm -f \
patched-loop.c cp /usr/src/linux-2.2.19aa2-bad/drivers/block/loop.c patched-loop.c
patch -p0 -l --dry-run &lt; loop.c-2.2.diff || cp loop.c-2.2.original patched-loop.c
patching file `patched-loop.c'
Hunk #1 FAILED at 256.
1 out of 2 hunks FAILED -- saving rejects to patched-loop.c.rej
patch -p0 -l &lt; loop.c-2.2.diff
patching file `patched-loop.c'
cc -D__KERNEL__ -I/usr/src/linux-2.2.19aa2-bad/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -fno-strength-reduce \
-mpreferred-stack-boundary=2 -march=i686 -malign-loops=2 -malign-jumps=2 \
-malign-functions=2 -DCPU=686 -DMODULE -DEXPORT_SYMTAB -c patched-loop.c -o \
patched-loop.o ld -m elf_i386 -r patched-loop.o aes-glue.o rijndael.o -o loop.o
mkdir -p /lib/modules/2.2.19aa2/block
cp -p loop.o /lib/modules/2.2.19aa2/block
depmod
sync
make[2]: Leaving directory `/root/loop-AES-v1.1b'
make[1]: Leaving directory `/usr/src/linux-2.2.19aa2-bad'

Result: Working loop.o module with AES cipher built in, and 512 byte IV.

Here I'm building loop-AES on vanilla 2.4.3-ac14.

# make LINUX_SOURCE=/usr/src/linux-2.4.3-ac14
cd /usr/src/linux-2.4.3-ac14 &amp;&amp; make SUBDIRS=/root/loop-AES-v1.1b modules
make[1]: Entering directory `/usr/src/linux-2.4.3-ac14'
make -C  /root/loop-AES-v1.1b CFLAGS="-D__KERNEL__ \
-I/usr/src/linux-2.4.3-ac14/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE" MAKING_MODULES=1 modules make[2]: Entering directory \
`/root/loop-AES-v1.1b' gcc -D__KERNEL__ -I/usr/src/linux-2.4.3-ac14/include -Wall \
-Wstrict-prototypes -O2 -fomit-frame-pointer -fno-strict-aliasing -pipe \
-mpreferred-stack-boundary=2 -march=i686 -DMODULE -c aes-glue.c -o aes-glue.o gcc \
-D__KERNEL__ -I/usr/src/linux-2.4.3-ac14/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE -c rijndael.c -o rijndael.o rm -f patched-loop.c
cp /usr/src/linux-2.4.3-ac14/drivers/block/loop.c patched-loop.c
patch -p0 -l --dry-run &lt; loop.c-2.4.diff || cp loop.c-2.4.original patched-loop.c
patching file `patched-loop.c'
patch -p0 -l &lt; loop.c-2.4.diff
patching file `patched-loop.c'
gcc -D__KERNEL__ -I/usr/src/linux-2.4.3-ac14/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE -DEXPORT_SYMTAB -c patched-loop.c -o patched-loop.o ld -m \
elf_i386 -r patched-loop.o aes-glue.o rijndael.o -o loop.o mkdir -p \
/lib/modules/2.4.3-ac14/block cp -p loop.o /lib/modules/2.4.3-ac14/block
depmod
sync
make[2]: Leaving directory `/root/loop-AES-v1.1b'
make[1]: Leaving directory `/usr/src/linux-2.4.3-ac14'

Result: Working loop.o module with AES cipher built in, and 512 byte IV.

Here I'm building loop-AES on 2.4.3-ac14-hvr5 with your kernel patch
cryptoapi-2.4.3-hvr5/doc/loop-iv-2.4.3.patch applied, which makes the
loop-AES patch fail, but Makefile has a working plan B.

# make LINUX_SOURCE=/usr/src/linux-2.4.3-ac14-hvr5
cd /usr/src/linux-2.4.3-ac14-hvr5 &amp;&amp; make SUBDIRS=/root/loop-AES-v1.1b modules
make[1]: Entering directory `/usr/src/linux-2.4.3-ac14-hvr5'
make -C  /root/loop-AES-v1.1b CFLAGS="-D__KERNEL__ \
-I/usr/src/linux-2.4.3-ac14-hvr5/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE" MAKING_MODULES=1 modules make[2]: Entering directory \
`/root/loop-AES-v1.1b' gcc -D__KERNEL__ -I/usr/src/linux-2.4.3-ac14-hvr5/include \
-Wall -Wstrict-prototypes -O2 -fomit-frame-pointer -fno-strict-aliasing -pipe \
-mpreferred-stack-boundary=2 -march=i686 -DMODULE -c aes-glue.c -o aes-glue.o gcc \
-D__KERNEL__ -I/usr/src/linux-2.4.3-ac14-hvr5/include -Wall -Wstrict-prototypes -O2 \
-fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE -c rijndael.c -o rijndael.o rm -f patched-loop.c
cp /usr/src/linux-2.4.3-ac14-hvr5/drivers/block/loop.c patched-loop.c
patch -p0 -l --dry-run &lt; loop.c-2.4.diff || cp loop.c-2.4.original patched-loop.c
patching file `patched-loop.c'
Hunk #1 FAILED at 181.
Hunk #2 FAILED at 232.
Hunk #3 FAILED at 466.
Hunk #4 succeeded at 519 (offset 17 lines).
Hunk #5 succeeded at 1000 (offset 1 line).
Hunk #6 succeeded at 1030 (offset 17 lines).
3 out of 6 hunks FAILED -- saving rejects to patched-loop.c.rej
patch -p0 -l &lt; loop.c-2.4.diff
patching file `patched-loop.c'
gcc -D__KERNEL__ -I/usr/src/linux-2.4.3-ac14-hvr5/include -Wall -Wstrict-prototypes \
-O2 -fomit-frame-pointer -fno-strict-aliasing -pipe -mpreferred-stack-boundary=2 \
-march=i686 -DMODULE -DEXPORT_SYMTAB -c patched-loop.c -o patched-loop.o ld -m \
elf_i386 -r patched-loop.o aes-glue.o rijndael.o -o loop.o mkdir -p \
/lib/modules/2.4.3-ac14/block cp -p loop.o /lib/modules/2.4.3-ac14/block
depmod
sync
make[2]: Leaving directory `/root/loop-AES-v1.1b'
make[1]: Leaving directory `/usr/src/linux-2.4.3-ac14-hvr5'

Result: Working loop.o module with AES cipher built in, and 512 byte IV.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010426113535</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-04-26 11:35:35-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

I could not tell from the cornucopia of examples you prvided whether
this part of the loop-AES README still accurate :

Instructions for building replacement loop.o driver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Before you attempt to build replacement loop.o driver, you *must* configure
and compile your kernel so that CONFIG_MODULES=y and CONFIG_BLK_DEV_LOOP=n.
Also, CONFIG_KMOD=y is recommended but not required. Configuring your kernel
so that loop driver is built-in (CONFIG_BLK_DEV_LOOP=y) or module
(CONFIG_BLK_DEV_LOOP=m) will *not* work.

-------

Is it?

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010426123758</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-26 12:37:58-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

hello!

On Thu, 26 Apr 2001, Jari Ruusu wrote:
&gt; Herbert Valerio Riedel wrote:
&gt; &gt; On Tue, 24 Apr 2001, Jari Ruusu wrote:
&gt; &gt; it should have been more or less:
&gt; &gt;
&gt; &gt; unsigned long IV = loop_get_iv(lo,
&gt; &gt;   page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
&gt; &gt;   + (offset - lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS));
&gt; I hope not exactly like that. What happens when "lo-&gt;lo_offset" is larger
&gt; than "offset". Oops. Besides, the + operator takes precedence over the &gt;&gt;
&gt; operator on the third line.
...you are right again :-)

do you have any objections about...

unsigned long IV = loop_get_iv(lo,
   page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
   + (offset &gt;&gt; LO_IV_SECTOR_BITS)
   - (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS));


...then? ;-)

the assumption is, offset % LO_IV_SECTOR_BITS == 0
this calculation may overflow anyway... for file sizes around terabytes or
so I guess... but another thing is, that every IV calculation should
overflow at the same boundary... since it's just an IV value...

(maybe that calculation should be done in a 64bit domain anyway)

&gt; Have you ever observed the sizes of the transfer requests? The sizes of
&gt; transfer requests change on the fly (and I'm not not talking about the last
&gt; partial block of a file). Meaning, any IV computation that depends on the
&gt; block size of a filesystem, is broken and must die! We do not have an option
&gt; here.
I know that issue, I've already pointed that out some time ago, but there
are compatibility problems as well, at first I thought the international
crypto patch was the only filter to make use of that IV, but then I
learned there were a few others as well...
(btw, the int crypto patch had the compatibility option for absolute block
numbers for quite some time too... just for the sake of compatibility...)

and btw, many people seem to be quite happy with their non-512 based IV
encrypted volumes... so why forcing them to switch?

btw, depending on the filesystem using the loop device, and the underlying
file or device, the transfer requests size may be constant... e.g. at 4k
blocks... but other filesystems, such as XFS do have different sections
with different blocksizes... they clearly break things...

breaking up transfers into 512 bytes _everytime_ isn't a solution
either... it is unefficient, especially for filters not making use of the
IV at all...

&gt; Just for the record, loop-AES package does 512 byte based IV and does not
&gt; care about filesystem block size. loop-AES package does not change kernel
&gt; sources and is almost immune to kernel source changes made by distro
&gt; vendors. Look, here I'm building loop-AES on almost vanilla 2.2.19aa2.
:-)

what I'm trying to say, you just take the kernel's loop.c, patch it to do
512 byte IV calculation (and 512 byte requests) and requiring the user to
load it... you actually require the user to not have the loop.c device
compiled into the kernel... and when your loop module is loaded into the
kernel the stock loop module can't be at the same time... it's an XOR
solution...

[..build log...]
&gt; Here I'm building loop-AES on 2.2.19aa2-bad where I intentionally changed
&gt; loop.c in a way that makes the loop-AES patch fail, but Makefile has a
&gt; working plan B.

[..build log2..]
&gt;
&gt; Result: Working loop.o module with AES cipher built in, and 512 byte IV.
&gt;
&gt; Here I'm building loop-AES on vanilla 2.4.3-ac14.
&gt;
[...yet another build log...]
&gt;
&gt; Result: Working loop.o module with AES cipher built in, and 512 byte IV.
&gt;
&gt; Here I'm building loop-AES on 2.4.3-ac14-hvr5 with your kernel patch
&gt; cryptoapi-2.4.3-hvr5/doc/loop-iv-2.4.3.patch applied, which makes the
&gt; loop-AES patch fail, but Makefile has a working plan B.

[...guess what...]

&gt; Result: Working loop.o module with AES cipher built in, and 512 byte IV.

two different minds -- two different approaches :-)

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010426182714</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-26 18:27:14-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

Chris Kuklewicz wrote:
&gt; I could not tell from the cornucopia of examples you prvided whether
&gt; this part of the loop-AES README still accurate :
&gt; 
&gt; Instructions for building replacement loop.o driver
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&gt; Before you attempt to build replacement loop.o driver, you *must* configure
&gt; and compile your kernel so that CONFIG_MODULES=y and CONFIG_BLK_DEV_LOOP=n.
&gt; Also, CONFIG_KMOD=y is recommended but not required. Configuring your kernel
&gt; so that loop driver is built-in (CONFIG_BLK_DEV_LOOP=y) or module
&gt; (CONFIG_BLK_DEV_LOOP=m) will *not* work.
&gt; 
&gt; -------
&gt; 
&gt; Is it?

Yes it is.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010426182822</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-26 18:28:22-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

Herbert Valerio Riedel wrote:
&gt; do you have any objections about...
&gt; 
&gt; unsigned long IV = loop_get_iv(lo,
&gt;    page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
&gt;    + (offset &gt;&gt; LO_IV_SECTOR_BITS)
&gt;    - (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS));
&gt; 
&gt; ...then? ;-)

Looks fine.

&gt; &gt; Have you ever observed the sizes of the transfer requests? The sizes of
&gt; &gt; transfer requests change on the fly (and I'm not not talking about the last
&gt; &gt; partial block of a file). Meaning, any IV computation that depends on the
&gt; &gt; block size of a filesystem, is broken and must die! We do not have an option
&gt; &gt; here.
&gt; I know that issue, I've already pointed that out some time ago, but there
&gt; are compatibility problems as well, at first I thought the international
&gt; crypto patch was the only filter to make use of that IV, but then I
&gt; learned there were a few others as well...
&gt; (btw, the int crypto patch had the compatibility option for absolute block
&gt; numbers for quite some time too... just for the sake of compatibility...)
&gt; 
&gt; and btw, many people seem to be quite happy with their non-512 based IV
&gt; encrypted volumes... so why forcing them to switch?

They are time bombs. Can you be sure that upper layers in the kernel won't
pass a transfer size that is not same as filesystem block size? I have seen
that happen. If you haven't, you have been lucky. I'd rather not depend on
luck.

&gt; btw, depending on the filesystem using the loop device, and the underlying
&gt; file or device, the transfer requests size may be constant... e.g. at 4k
&gt; blocks... but other filesystems, such as XFS do have different sections
&gt; with different blocksizes... they clearly break things...
&gt; 
&gt; breaking up transfers into 512 bytes _everytime_ isn't a solution
&gt; either... it is unefficient, especially for filters not making use of the
&gt; IV at all...

There is no point to limit transfers to 512 bytes. Transfer function just
needs to increment the original IV and reinitialize the cipher block
chaining process after every 512 bytes transferred.

&gt; &gt; Just for the record, loop-AES package does 512 byte based IV and does not
&gt; &gt; care about filesystem block size. loop-AES package does not change kernel
&gt; &gt; sources and is almost immune to kernel source changes made by distro
&gt; &gt; vendors. Look, here I'm building loop-AES on almost vanilla 2.2.19aa2.
&gt; :-)
&gt; 
&gt; what I'm trying to say, you just take the kernel's loop.c, patch it to do
&gt; 512 byte IV calculation (and 512 byte requests) and requiring the user to
&gt; load it... you actually require the user to not have the loop.c device
&gt; compiled into the kernel... and when your loop module is loaded into the
&gt; kernel the stock loop module can't be at the same time... it's an XOR
&gt; solution...

Transfer size is not altered, see previous comment. No need for user to load
the loop.o module, kmod does that automatically if CONFIG_KMOD=y. Build
instructions in a README file say that loop must be disabled the kernel
config for this externally compiled loop.o to work at all.

&gt; two different minds -- two different approaches :-)

Ok.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421232603</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-21 23:26:03-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, 22 Apr 2001, Andi Kleen wrote:
&gt; On Sat, Apr 21, 2001 at 04:05:36PM -0700, Dan Hollis wrote:
&gt; &gt; On Sun, 22 Apr 2001, Herbert Valerio Riedel wrote:
&gt; &gt; &gt; there's only one issue I'm fighting with... that damned broken IV
&gt; &gt; &gt; calculation... :-/
&gt; &gt; Is this why 2.4 blowfish crypto won't work with 2.2 blowfish crypto?
&gt; I don't know anything about the "blowfish crypto" you use, the following
&gt; is a generic statement.

Ok, i'll say it this way:

Stock linux 2.2.17 + patch-int-2.2.17.7 blowfish loopback ext2 cannot
be read with stock linux 2.4.3 + patch-int-2.4.3.1

Better?

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421234031</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-21 23:40:31-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sat, 21 Apr 2001, Dan Hollis wrote:

&gt; On Sun, 22 Apr 2001, Andi Kleen wrote:
&gt; &gt; On Sat, Apr 21, 2001 at 04:05:36PM -0700, Dan Hollis wrote:
&gt; &gt; &gt; On Sun, 22 Apr 2001, Herbert Valerio Riedel wrote:
&gt; &gt; &gt; &gt; there's only one issue I'm fighting with... that damned broken IV
&gt; &gt; &gt; &gt; calculation... :-/
&gt; &gt; &gt; Is this why 2.4 blowfish crypto won't work with 2.2 blowfish crypto?
&gt; &gt; I don't know anything about the "blowfish crypto" you use, the following
&gt; &gt; is a generic statement.
&gt;
&gt; Ok, i'll say it this way:
&gt;
&gt; Stock linux 2.2.17 + patch-int-2.2.17.7 blowfish loopback ext2 cannot
&gt; be read with stock linux 2.4.3 + patch-int-2.4.3.1
&gt;
&gt; Better?

btw, regarding your 160 keylen problem; that's an error in the
patch-int-2.4.3.1, which can be fixed by applying

http://www.hvrlab.org/pub/crypto/patch-int-2.4.3.1-hvr2.gz

(don't use the -hvr3 variant, which surely won't help in your case)

on top of patch-int-2.4.3.1 ...

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010422075048</emailId><senderName>Andrew McGuinness</senderName><senderEmail>andrew_mcguinness@bigfoot.com</senderEmail><timestampReceived>2001-04-22 07:50:48-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

Quoting Andi Kleen &lt;ak@suse.de&gt;:

&gt; On Sat, Apr 21, 2001 at 04:05:36PM -0700, Dan Hollis wrote:
&gt; &gt; On Sun, 22 Apr 2001, Herbert Valerio Riedel wrote:
&gt; &gt; &gt; there's only one issue I'm fighting with... that damned broken IV
&gt; &gt; &gt; calculation... :-/
&gt; &gt; 
&gt; &gt; Is this why 2.4 blowfish crypto won't work with 2.2 blowfish crypto?
&gt; 
&gt; I don't know anything about the "blowfish crypto" you use, the following
&gt; is a generic statement.
&gt; 
&gt; The encrypted on disk files are incompatible if the crypto module used
&gt; the 2.2 IV directly. You can write a 2.4 crypt module that can still
&gt; read 2.2 files, but it needs some changes -- it needs to manually remap
&gt; the relative numbers via bmap to absolute. 2.2 passed absolute block
&gt; numbers, 
&gt; which was really broken, 2.4 switched to relative logical block numbers
&gt; (which still have some problems, but are not too bad).
&gt; 

That's not quite right, is it?  2.2 had a compile-time CONFIG_ option to
use relative block numbers, which I thought most people used.

--
Andrew McGuinness     Luton, UK        andrew_mcguinness@bigfoot.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010422111540</emailId><senderName>Andi Kleen</senderName><senderEmail>ak@suse.de</senderEmail><timestampReceived>2001-04-22 11:15:40-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, Apr 22, 2001 at 07:50:48AM +0000, Andrew McGuinness wrote:
&gt; That's not quite right, is it?  2.2 had a compile-time CONFIG_ option to
&gt; use relative block numbers, which I thought most people used.

Check your facts.  The standard kernel hasn't.

-Andi

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010422120233</emailId><senderName>Christoph Hellwig</senderName><senderEmail>hch@ns.caldera.de</senderEmail><timestampReceived>2001-04-22 12:02:33-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, Apr 22, 2001 at 01:15:40PM +0200, Andi Kleen wrote:
&gt; On Sun, Apr 22, 2001 at 07:50:48AM +0000, Andrew McGuinness wrote:
&gt; &gt; That's not quite right, is it?  2.2 had a compile-time CONFIG_ option to
&gt; &gt; use relative block numbers, which I thought most people used.
&gt; 
&gt; Check your facts.  The standard kernel hasn't.

The standard kernel hasn't crypto at all...

	Christoph

-- 
Whip me.  Beat me.  Make me maintain AIX.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010422120935</emailId><senderName>Andi Kleen</senderName><senderEmail>ak@suse.de</senderEmail><timestampReceived>2001-04-22 12:09:35-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, Apr 22, 2001 at 02:02:33PM +0200, Christoph Hellwig wrote:
&gt; On Sun, Apr 22, 2001 at 01:15:40PM +0200, Andi Kleen wrote:
&gt; &gt; On Sun, Apr 22, 2001 at 07:50:48AM +0000, Andrew McGuinness wrote:
&gt; &gt; &gt; That's not quite right, is it?  2.2 had a compile-time CONFIG_ option to
&gt; &gt; &gt; use relative block numbers, which I thought most people used.
&gt; &gt; 
&gt; &gt; Check your facts.  The standard kernel hasn't.
&gt; 
&gt; The standard kernel hasn't crypto at all...

It doesn't need to.
It has an interface where you can easily load loopback filter modules without 
any patches.

-Andi

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010409075923</emailId><senderName>Jens Axboe</senderName><senderEmail>axboe@suse.de</senderEmail><timestampReceived>2001-04-09 07:59:23-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

On Sun, Apr 08 2001, Herbert Valerio Riedel wrote:
&gt; hello,
&gt; 
&gt; *WARNING* experimental *WARNING*

[snip]

Mind doing a stock kernel loop diff only, I'll take a look and
integrate it then? Thanks.

-- 
Jens Axboe


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010409130826</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-09 13:08:26-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

hello,

On Mon, 9 Apr 2001, Jari Ruusu wrote:
&gt; Below is part of your patch, pay particular attention to line 348.
&gt;
&gt; Regards,
&gt; Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
&gt;
&gt;
&gt; @@ -258,6 +280,12 @@
&gt;                                         lo-&gt;lo_device);
&gt;  }
&gt;
&gt; +static inline unsigned long loop_get_iv(struct loop_device *lo,
&gt; +                                       unsigned long sector)
&gt; +{
&gt; +       return sector - (lo-&gt;lo_offset &gt;&gt; IV_SECTOR_BITS);
&gt;                    ^^^^^^ LINE 348 - CORRUPTION ?
&gt; +}
&gt; +
&gt;  static int lo_send(struct loop_device *lo, struct buffer_head *bh, int bsize,
&gt;                    loff_t pos)
&gt;  {
&gt; @@ -275,7 +303,7 @@

sorry, I don't see your point...

the return value is supposed to be the sector address minus the offset
expressed in sectors...

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010409232325</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-09 23:23:25-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Mon, 9 Apr 2001, Jari Ruusu wrote:
&gt; &gt; +static inline unsigned long loop_get_iv(struct loop_device *lo,
&gt; &gt; +                                       unsigned long sector)
&gt; &gt; +{
&gt; &gt; +       return sector - (lo-&gt;lo_offset &gt;&gt; IV_SECTOR_BITS);
&gt; &gt;                    ^^^^^^ LINE 348 - CORRUPTION ?
&gt; &gt; +}
&gt; &gt; +
&gt; 
&gt; sorry, I don't see your point...
&gt; 
&gt; the return value is supposed to be the sector address minus the offset
&gt; expressed in sectors...

So, you anchor the IV beginning to "lo-&gt;lo_offset". But, what happens when
someone losetups a hard drive partition with a different offset than what
was used before? Unreadable data, that what. I'm not saying that is a normal
thing to do. If IV beginning is anchored to the beginning of a partition or
file, data would be readable no matter what offset is used.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010410221456</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-10 22:14:56-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

hello! :-)

On Tue, 10 Apr 2001, Jari Ruusu wrote:
&gt; Herbert Valerio Riedel wrote:
&gt; &gt; On Mon, 9 Apr 2001, Jari Ruusu wrote:
&gt; &gt; &gt; +static inline unsigned long loop_get_iv(struct loop_device *lo,
&gt; &gt; &gt; +                                       unsigned long sector)
&gt; &gt; &gt; +{
&gt; &gt; &gt; +       return sector - (lo-&gt;lo_offset &gt;&gt; IV_SECTOR_BITS);
&gt; &gt; &gt;                    ^^^^^^ LINE 348 - CORRUPTION ?
&gt; &gt; &gt; +}
&gt; &gt; &gt; +
&gt; &gt; sorry, I don't see your point...
&gt; &gt; the return value is supposed to be the sector address minus the offset
&gt; &gt; expressed in sectors...

&gt; So, you anchor the IV beginning to "lo-&gt;lo_offset". But, what happens when
&gt; someone losetups a hard drive partition with a different offset than what
&gt; was used before? Unreadable data, that what. I'm not saying that is a normal
&gt; thing to do. If IV beginning is anchored to the beginning of a partition or
&gt; file, data would be readable no matter what offset is used.

mmmh... ok, that's the way it was calculated in the past... it has its
merits... but it has it's faults too...

as a sidenote, you have to use an offset being a multiple of the the
media blocksize, since otherwise your argument isn't valid, due to
unreadable data...

then, if I created some partitions on my harddisk, and losetup those
partitions... then I happen do something, which I would say either, that
it was a normal thing to do ;), and I backed up the whole device,...
say, to a cdrw, or something like that, or just any device where
partitions aren't supported,
then I could just use the starting partition offset as the offset argument
and have completely readable data... as opposed to your case...

so, tell me, which way of interpreting an offset is the 'right' one? :-)

(since this new IV calculation breaks everything, we can take the
opportunity to change the offset semantics too... just in case your
argument was, to stick with the old way of doing things, assuming they
were done right.. :-)

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010411184322</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-11 18:43:22-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Tue, 10 Apr 2001, Jari Ruusu wrote:
&gt; &gt; So, you anchor the IV beginning to "lo-&gt;lo_offset". But, what happens when
&gt; &gt; someone losetups a hard drive partition with a different offset than what
&gt; &gt; was used before? Unreadable data, that what. I'm not saying that is a normal
&gt; &gt; thing to do. If IV beginning is anchored to the beginning of a partition or
&gt; &gt; file, data would be readable no matter what offset is used.
&gt; 
&gt; mmmh... ok, that's the way it was calculated in the past... it has its
&gt; merits... but it has it's faults too...
&gt; 
&gt; as a sidenote, you have to use an offset being a multiple of the the
&gt; media blocksize, since otherwise your argument isn't valid, due to
&gt; unreadable data...
&gt; 
&gt; then, if I created some partitions on my harddisk, and losetup those
&gt; partitions... then I happen do something, which I would say either, that
&gt; it was a normal thing to do ;), and I backed up the whole device,...
&gt; say, to a cdrw, or something like that, or just any device where
&gt; partitions aren't supported,
&gt; then I could just use the starting partition offset as the offset argument
&gt; and have completely readable data... as opposed to your case...

You have a valid point here.

&gt; so, tell me, which way of interpreting an offset is the 'right' one? :-)
&gt; 
&gt; (since this new IV calculation breaks everything, we can take the
&gt; opportunity to change the offset semantics too... just in case your
&gt; argument was, to stick with the old way of doing things, assuming they
&gt; were done right.. :-)

You do it your way, and I do it my way.

I have been doing my own crypto for years (just implementing standard
algorithms, not creating them). I was using TripleDES until last Sunday,
when I decided to switch to AES. I have included a bzip2 compressed tar
archive of what I use now. It has some very good features:

1)  No modifications to kernel. No patch hassles when a new version of
    kernel comes out.
2)  Works with 2.2 and 2.4 kernels.
3)  AES cipher is built-in. No /etc/modules.conf alias hassles.

Take a look if you want. For those that don't like attachments, its here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.0c.tar.bz2
    md5sum 8ec3ae621d8a2d7f35cfffd896d040e5

There is still a bug in the official 2.4.3 (Axboe, wake up) loop driver as
well as your 2.4.3-int1-hvr3 in the IV calculation in situations where
"lo-&gt;lo_offset" is non-zero. Look at my patch loop.c-2.4.diff in the
tarball, fourth hunk in the patch. You use "rbh-&gt;b_rsector" when you really
should be using "bh-&gt;b_rsector".

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
["loop-AES-v1.0c.tar.bz2" (application/octet-stream)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010411190636</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-11 19:06:36-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

Jari Ruusu wrote:
&gt; There is still a bug in the official 2.4.3 (Axboe, wake up) loop driver as
&gt; well as your 2.4.3-int1-hvr3 in the IV calculation in situations where
&gt; "lo-&gt;lo_offset" is non-zero. Look at my patch loop.c-2.4.diff in the
&gt; tarball, fourth hunk in the patch. You use "rbh-&gt;b_rsector" when you really
&gt; should be using "bh-&gt;b_rsector".

Correction: no bug in 2.4.3-int1-hvr3. Sorry.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010411200252</emailId><senderName>Jens Axboe</senderName><senderEmail>axboe@suse.de</senderEmail><timestampReceived>2001-04-11 20:02:52-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

On Wed, Apr 11 2001, Jari Ruusu wrote:
&gt; There is still a bug in the official 2.4.3 (Axboe, wake up) loop driver as
&gt; well as your 2.4.3-int1-hvr3 in the IV calculation in situations where
&gt; "lo-&gt;lo_offset" is non-zero. Look at my patch loop.c-2.4.diff in the
&gt; tarball, fourth hunk in the patch. You use "rbh-&gt;b_rsector" when you really
&gt; should be using "bh-&gt;b_rsector".

Look, I rewrote loop to make it work again. Plus make it a lot faster.
Anything beyond that -- to be honest, I don't really care. Feel free to
send me patches and I'll include it, the b_rsector noted above is
obviously correct and I've merged it.

-- 
Jens Axboe


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010412102015</emailId><senderName>Emil Laurentiu</senderName><senderEmail>emil@la.mine.nu</senderEmail><timestampReceived>2001-04-12 10:20:15-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

On 11 April 2001, Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; wrote:
&gt; 1)  No modifications to kernel. No patch hassles when a new version of
&gt;     kernel comes out.
&gt; 2)  Works with 2.2 and 2.4 kernels.
&gt; 3)  AES cipher is built-in. No /etc/modules.conf alias hassles.

... and if you want to be able to use passwords shorter than 20 chars
and without limiting the password's character sets:
... you may just replace the util-linux patch in Jari's package with
the attached one that uses the same hash function (rmd160) as in the 
international kernel patch.

-- 
								Regards,
								Emil
--
So many things to compile and segfault... so little time. 

["util-linux-2.11a.diff" (text/plain)]

diff -urN util-linux-2.11a/mount/Makefile util-linux-2.11a-new/mount/Makefile
--- util-linux-2.11a/mount/Makefile	Sun Mar  4 19:38:53 2001
+++ util-linux-2.11a-new/mount/Makefile	Thu Apr 12 05:10:23 2001
@@ -24,7 +24,7 @@
 
 MAYBE = pivot_root swapoff
 
-LO_OBJS = lomount.o $(LIB)/xstrncpy.o
+LO_OBJS = lomount.o rmd160.o $(LIB)/xstrncpy.o
 NFS_OBJS = nfsmount.o nfsmount_xdr.o nfsmount_clnt.o
 GEN_FILES = nfsmount.h nfsmount_xdr.c nfsmount_clnt.c
 
@@ -57,7 +57,7 @@
 main_losetup.o: lomount.c
 	$(COMPILE) -DMAIN lomount.c -o $@
 
-losetup: main_losetup.o $(LIB)/xstrncpy.o
+losetup: main_losetup.o rmd160.o $(LIB)/xstrncpy.o
 	$(LINK) $^ -o $@
 
 mount.o umount.o nfsmount.o losetup.o fstab.o realpath.o sundries.o: sundries.h
diff -urN util-linux-2.11a/mount/lomount.c util-linux-2.11a-new/mount/lomount.c
--- util-linux-2.11a/mount/lomount.c	Sun Mar  4 19:27:59 2001
+++ util-linux-2.11a-new/mount/lomount.c	Thu Apr 12 05:45:36 2001
@@ -27,6 +27,7 @@
 
 #include "loop.h"
 #include "lomount.h"
+#include "rmd160.h"
 #include "xstrncpy.h"
 #include "nls.h"
 
@@ -34,6 +35,8 @@
 extern char *xstrdup (const char *s);	/* not: #include "sundries.h" */
 extern void error (const char *fmt, ...);	/* idem */
 
+#define LO_CRYPT_AES    16
+
 #ifdef LOOP_SET_FD
 struct crypt_type_struct {
 	int id;
@@ -42,7 +45,7 @@
 	{ LO_CRYPT_NONE, "no" },
 	{ LO_CRYPT_NONE, "none" },
 	{ LO_CRYPT_XOR, "xor" },
-	{ LO_CRYPT_DES, "DES" },
+	{ LO_CRYPT_AES, "AES" },
 	{ -1, NULL   }
 };
 
@@ -195,12 +198,15 @@
 	return 0;
 }
 
+#define HASHLENGTH 20
+
 int
 set_loop (const char *device, const char *file, int offset,
 	  const char *encryption, int *loopro) {
 	struct loop_info loopinfo;
-	int fd, ffd, mode, i;
+	int fd, ffd, mode;
 	char *pass;
+        char keybits[HASHLENGTH];
 
 	mode = (*loopro ? O_RDONLY : O_RDWR);
 	if ((ffd = open (file, mode)) &lt; 0) {
@@ -249,23 +255,17 @@
 		xstrncpy (loopinfo.lo_encrypt_key, pass, LO_KEY_SIZE);
 		loopinfo.lo_encrypt_key_size = strlen(loopinfo.lo_encrypt_key);
 		break;
-	case LO_CRYPT_DES:
+	case LO_CRYPT_AES:  /* AES */
 		pass = getpass (_("Password: "));
-		strncpy (loopinfo.lo_encrypt_key, pass, 8);
-		loopinfo.lo_encrypt_key[8] = 0;
-		loopinfo.lo_encrypt_key_size = 8;
-		pass = getpass (_("Init (up to 16 hex digits): "));
-		for (i = 0; i &lt; 16 &amp;&amp; pass[i]; i++)
-			if (isxdigit (pass[i])) {
-				loopinfo.lo_init[i &gt;&gt; 3] |= (pass[i] &gt; '9' ?
-				  (islower (pass[i]) ? toupper (pass[i]) :
-				   pass[i])-'A'+10 : pass[i]-'0') &lt;&lt; (i&amp;7) * 4;
-			} else {
-				fprintf (stderr, _("Non-hex digit '%c'.\n"),
-					 pass[i]);
-				return 1;
-			}
-		break;
+                /* use the rmd160 function to generate a 20 bytes hash */
+                rmd160_hash_buffer(keybits,pass,strlen(pass));
+                /* zero unencrypted passwords in memory */
+                memset( pass, 0, strlen(pass) );
+		loopinfo.lo_encrypt_key_size = 16;               /* 128 bits */
+                memcpy((char*)loopinfo.lo_encrypt_key,keybits,16);
+                /* zero hash (source) in memory */
+                memset( keybits, 0, HASHLENGTH );
+                break;
 	default:
 		fprintf (stderr,
 			 _("Don't know how to get key for encryption system %d\n"),
@@ -281,6 +281,7 @@
 		perror ("ioctl: LOOP_SET_STATUS");
 		return 1;
 	}
+	memset(loopinfo.lo_encrypt_key, 0, sizeof(loopinfo.lo_encrypt_key));
 	close (fd);
 	close (ffd);
 	if (verbose &gt; 1)
diff -urN util-linux-2.11a/mount/losetup.8 util-linux-2.11a-new/mount/losetup.8
--- util-linux-2.11a/mount/losetup.8	Fri Aug 11 07:11:30 2000
+++ util-linux-2.11a-new/mount/losetup.8	Thu Apr 12 04:02:14 2001
@@ -1,4 +1,4 @@
-.TH LOSETUP 8 "Nov 24 1993" "Linux" "MAINTENANCE COMMANDS"
+.TH LOSETUP 8 "Apr 8 2001" "Linux" "MAINTENANCE COMMANDS"
 .SH NAME
 losetup \- set up and control loop devices
 .SH SYNOPSIS
@@ -36,11 +36,8 @@
 .PD 0
 .IP \fBXOR\fP
 use a simple XOR encryption.
-.IP \fBDES\fP
-use DES encryption. DES encryption is only available if the optional
-DES package has been added to the kernel. DES encryption uses an additional
-start value that is used to protect passwords against dictionary
-attacks.
+.IP \fBAES\fP
+use AES encryption.
 .PD
 .RE
 .IP "\fB\-o \fIoffset\fP"
@@ -69,9 +66,8 @@
 .nf
 .IP
 dd if=/dev/zero of=/file bs=1k count=100
-losetup -e des /dev/loop0 /file
+losetup -e AES /dev/loop0 /file
 Password:
-Init (up to 16 hex digits):
 mkfs -t ext2 /dev/loop0 100
 mount -t ext2 /dev/loop0 /mnt
  ...
@@ -86,7 +82,7 @@
 .LP
 .fi
 .SH RESTRICTION
-DES encryption is painfully slow. On the other hand, XOR is terribly weak.
+AES encryption is slow. On the other hand, XOR is terribly weak.
 .SH AUTHORS
 .nf
 Original version: Theodore Ts'o &lt;tytso@athena.mit.edu&gt;
diff -urN util-linux-2.11a/mount/rmd160.c util-linux-2.11a-new/mount/rmd160.c
--- util-linux-2.11a/mount/rmd160.c	Wed Dec 31 19:00:00 1969
+++ util-linux-2.11a-new/mount/rmd160.c	Thu Apr 12 05:08:31 2001
@@ -0,0 +1,532 @@
+/* rmd160.c  -	RIPE-MD160
+ *	Copyright (C) 1998 Free Software Foundation, Inc.
+ */
+
+/* This file was part of GnuPG. Modified for use within the Linux
+ * mount utility by Marc Mutz &lt;Marc@Mutz.com&gt;. None of this code is
+ * by myself. I just removed everything that you don't need when all
+ * you want to do is to use rmd160_hash_buffer().
+ * My comments are marked with (mm).  */
+
+/* GnuPG is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * GnuPG is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA */
+
+#include &lt;string.h&gt; /* (mm) for memcpy */
+#include &lt;endian.h&gt; /* (mm) for BIG_ENDIAN and BYTE_ORDER */
+#include "rmd160.h"
+
+/* (mm) these are used by the original GnuPG file. In order to modify
+ * that file not too much, we keep the notations. maybe it would be
+ * better to include linux/types.h and typedef __u32 to u32 and __u8
+ * to byte?  */
+typedef unsigned int u32; /* taken from e.g. util-linux's minix.h */
+typedef unsigned char byte;
+
+typedef struct {
+    u32  h0,h1,h2,h3,h4;
+    u32  nblocks;
+    byte buf[64];
+    int  count;
+} RMD160_CONTEXT;
+
+/****************
+ * Rotate a 32 bit integer by n bytes
+ */
+#if defined(__GNUC__) &amp;&amp; defined(__i386__)
+static inline u32
+rol( u32 x, int n)
+{
+	__asm__("roll %%cl,%0"
+		:"=r" (x)
+		:"0" (x),"c" (n));
+	return x;
+}
+#else
+  #define rol(x,n) ( ((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))) )
+#endif
+
+/*********************************
+ * RIPEMD-160 is not patented, see (as of 25.10.97)
+ *   http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
+ * Note that the code uses Little Endian byteorder, which is good for
+ * 386 etc, but we must add some conversion when used on a big endian box.
+ *
+ *
+ * Pseudo-code for RIPEMD-160
+ *
+ * RIPEMD-160 is an iterative hash function that operates on 32-bit words.
+ * The round function takes as input a 5-word chaining variable and a 16-word
+ * message block and maps this to a new chaining variable. All operations are
+ * defined on 32-bit words. Padding is identical to that of MD4.
+ *
+ *
+ * RIPEMD-160: definitions
+ *
+ *
+ *   nonlinear functions at bit level: exor, mux, -, mux, -
+ *
+ *   f(j, x, y, z) = x XOR y XOR z		  (0 &lt;= j &lt;= 15)
+ *   f(j, x, y, z) = (x AND y) OR (NOT(x) AND z)  (16 &lt;= j &lt;= 31)
+ *   f(j, x, y, z) = (x OR NOT(y)) XOR z	  (32 &lt;= j &lt;= 47)
+ *   f(j, x, y, z) = (x AND z) OR (y AND NOT(z))  (48 &lt;= j &lt;= 63)
+ *   f(j, x, y, z) = x XOR (y OR NOT(z))	  (64 &lt;= j &lt;= 79)
+ *
+ *
+ *   added constants (hexadecimal)
+ *
+ *   K(j) = 0x00000000	    (0 &lt;= j &lt;= 15)
+ *   K(j) = 0x5A827999	   (16 &lt;= j &lt;= 31)	int(2**30 x sqrt(2))
+ *   K(j) = 0x6ED9EBA1	   (32 &lt;= j &lt;= 47)	int(2**30 x sqrt(3))
+ *   K(j) = 0x8F1BBCDC	   (48 &lt;= j &lt;= 63)	int(2**30 x sqrt(5))
+ *   K(j) = 0xA953FD4E	   (64 &lt;= j &lt;= 79)	int(2**30 x sqrt(7))
+ *   K'(j) = 0x50A28BE6     (0 &lt;= j &lt;= 15)      int(2**30 x cbrt(2))
+ *   K'(j) = 0x5C4DD124    (16 &lt;= j &lt;= 31)      int(2**30 x cbrt(3))
+ *   K'(j) = 0x6D703EF3    (32 &lt;= j &lt;= 47)      int(2**30 x cbrt(5))
+ *   K'(j) = 0x7A6D76E9    (48 &lt;= j &lt;= 63)      int(2**30 x cbrt(7))
+ *   K'(j) = 0x00000000    (64 &lt;= j &lt;= 79)
+ *
+ *
+ *   selection of message word
+ *
+ *   r(j)      = j		      (0 &lt;= j &lt;= 15)
+ *   r(16..31) = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
+ *   r(32..47) = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
+ *   r(48..63) = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
+ *   r(64..79) = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
+ *   r0(0..15) = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
+ *   r0(16..31)= 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
+ *   r0(32..47)= 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
+ *   r0(48..63)= 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
+ *   r0(64..79)= 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
+ *
+ *
+ *   amount for rotate left (rol)
+ *
+ *   s(0..15)  = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
+ *   s(16..31) = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
+ *   s(32..47) = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
+ *   s(48..63) = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
+ *   s(64..79) = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
+ *   s'(0..15) = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
+ *   s'(16..31)= 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
+ *   s'(32..47)= 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
+ *   s'(48..63)= 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
+ *   s'(64..79)= 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
+ *
+ *
+ *   initial value (hexadecimal)
+ *
+ *   h0 = 0x67452301; h1 = 0xEFCDAB89; h2 = 0x98BADCFE; h3 = 0x10325476;
+ *							h4 = 0xC3D2E1F0;
+ *
+ *
+ * RIPEMD-160: pseudo-code
+ *
+ *   It is assumed that the message after padding consists of t 16-word blocks
+ *   that will be denoted with X[i][j], with 0 &lt;= i &lt;= t-1 and 0 &lt;= j &lt;= 15.
+ *   The symbol [+] denotes addition modulo 2**32 and rol_s denotes cyclic left
+ *   shift (rotate) over s positions.
+ *
+ *
+ *   for i := 0 to t-1 {
+ *	 A := h0; B := h1; C := h2; D = h3; E = h4;
+ *	 A' := h0; B' := h1; C' := h2; D' = h3; E' = h4;
+ *	 for j := 0 to 79 {
+ *	     T := rol_s(j)(A [+] f(j, B, C, D) [+] X[i][r(j)] [+] K(j)) [+] E;
+ *	     A := E; E := D; D := rol_10(C); C := B; B := T;
+ *	     T := rol_s'(j)(A' [+] f(79-j, B', C', D') [+] X[i][r'(j)]
+						       [+] K'(j)) [+] E';
+ *	     A' := E'; E' := D'; D' := rol_10(C'); C' := B'; B' := T;
+ *	 }
+ *	 T := h1 [+] C [+] D'; h1 := h2 [+] D [+] E'; h2 := h3 [+] E [+] A';
+ *	 h3 := h4 [+] A [+] B'; h4 := h0 [+] B [+] C'; h0 := T;
+ *   }
+ */
+
+/* Some examples:
+ * ""                    9c1185a5c5e9fc54612808977ee8f548b2258d31
+ * "a"                   0bdc9d2d256b3ee9daae347be6f4dc835a467ffe
+ * "abc"                 8eb208f7e05d987a9b044a8e98c6b087f15a0bfc
+ * "message digest"      5d0689ef49d2fae572b881b123a85ffa21595f36
+ * "a...z"               f71c27109c692c1b56bbdceb5b9d2865b3708dbc
+ * "abcdbcde...nopq"     12a053384a9c0c88e405a06c27dcf49ada62eb2b
+ * "A...Za...z0...9"     b0e20b6e3116640286ed3a87a5713079b21f5189
+ * 8 times "1234567890"  9b752e45573d4b39f4dbd3323cab82bf63326bfb
+ * 1 million times "a"   52783243c1697bdbe16d37f97f68f08325dc1528
+ */
+
+
+static void
+rmd160_init( RMD160_CONTEXT *hd )
+{
+    hd-&gt;h0 = 0x67452301;
+    hd-&gt;h1 = 0xEFCDAB89;
+    hd-&gt;h2 = 0x98BADCFE;
+    hd-&gt;h3 = 0x10325476;
+    hd-&gt;h4 = 0xC3D2E1F0;
+    hd-&gt;nblocks = 0;
+    hd-&gt;count = 0;
+}
+
+
+
+/****************
+ * Transform the message X which consists of 16 32-bit-words
+ */
+static void
+transform( RMD160_CONTEXT *hd, byte *data )
+{
+    u32 a,b,c,d,e,aa,bb,cc,dd,ee,t;
+  #if BYTE_ORDER == BIG_ENDIAN
+    u32 x[16];
+    { int i;
+      byte *p2, *p1;
+      for(i=0, p1=data, p2=(byte*)x; i &lt; 16; i++, p2 += 4 ) {
+	p2[3] = *p1++;
+	p2[2] = *p1++;
+	p2[1] = *p1++;
+	p2[0] = *p1++;
+      }
+    }
+  #else
+   #if 0
+    u32 *x =(u32*)data;
+   #else
+    /* this version is better because it is always aligned;
+     * The performance penalty on a 586-100 is about 6% which
+     * is acceptable - because the data is more local it might
+     * also be possible that this is faster on some machines.
+     * This function (when compiled with -02 on gcc 2.7.2)
+     * executes on a 586-100 (39.73 bogomips) at about 1900kb/sec;
+     * [measured with a 4MB data and "gpgm --print-md rmd160"] */
+    u32 x[16];
+    memcpy( x, data, 64 );
+   #endif
+  #endif
+
+
+#define K0  0x00000000
+#define K1  0x5A827999
+#define K2  0x6ED9EBA1
+#define K3  0x8F1BBCDC
+#define K4  0xA953FD4E
+#define KK0 0x50A28BE6
+#define KK1 0x5C4DD124
+#define KK2 0x6D703EF3
+#define KK3 0x7A6D76E9
+#define KK4 0x00000000
+#define F0(x,y,z)   ( (x) ^ (y) ^ (z) )
+#define F1(x,y,z)   ( ((x) &amp; (y)) | (~(x) &amp; (z)) )
+#define F2(x,y,z)   ( ((x) | ~(y)) ^ (z) )
+#define F3(x,y,z)   ( ((x) &amp; (z)) | ((y) &amp; ~(z)) )
+#define F4(x,y,z)   ( (x) ^ ((y) | ~(z)) )
+#define R(a,b,c,d,e,f,k,r,s) do { t = a + f(b,c,d) + k + x[r]; \
+				  a = rol(t,s) + e;	       \
+				  c = rol(c,10);	       \
+				} while(0)
+
+    /* left lane */
+    a = hd-&gt;h0;
+    b = hd-&gt;h1;
+    c = hd-&gt;h2;
+    d = hd-&gt;h3;
+    e = hd-&gt;h4;
+    R( a, b, c, d, e, F0, K0,  0, 11 );
+    R( e, a, b, c, d, F0, K0,  1, 14 );
+    R( d, e, a, b, c, F0, K0,  2, 15 );
+    R( c, d, e, a, b, F0, K0,  3, 12 );
+    R( b, c, d, e, a, F0, K0,  4,  5 );
+    R( a, b, c, d, e, F0, K0,  5,  8 );
+    R( e, a, b, c, d, F0, K0,  6,  7 );
+    R( d, e, a, b, c, F0, K0,  7,  9 );
+    R( c, d, e, a, b, F0, K0,  8, 11 );
+    R( b, c, d, e, a, F0, K0,  9, 13 );
+    R( a, b, c, d, e, F0, K0, 10, 14 );
+    R( e, a, b, c, d, F0, K0, 11, 15 );
+    R( d, e, a, b, c, F0, K0, 12,  6 );
+    R( c, d, e, a, b, F0, K0, 13,  7 );
+    R( b, c, d, e, a, F0, K0, 14,  9 );
+    R( a, b, c, d, e, F0, K0, 15,  8 );
+    R( e, a, b, c, d, F1, K1,  7,  7 );
+    R( d, e, a, b, c, F1, K1,  4,  6 );
+    R( c, d, e, a, b, F1, K1, 13,  8 );
+    R( b, c, d, e, a, F1, K1,  1, 13 );
+    R( a, b, c, d, e, F1, K1, 10, 11 );
+    R( e, a, b, c, d, F1, K1,  6,  9 );
+    R( d, e, a, b, c, F1, K1, 15,  7 );
+    R( c, d, e, a, b, F1, K1,  3, 15 );
+    R( b, c, d, e, a, F1, K1, 12,  7 );
+    R( a, b, c, d, e, F1, K1,  0, 12 );
+    R( e, a, b, c, d, F1, K1,  9, 15 );
+    R( d, e, a, b, c, F1, K1,  5,  9 );
+    R( c, d, e, a, b, F1, K1,  2, 11 );
+    R( b, c, d, e, a, F1, K1, 14,  7 );
+    R( a, b, c, d, e, F1, K1, 11, 13 );
+    R( e, a, b, c, d, F1, K1,  8, 12 );
+    R( d, e, a, b, c, F2, K2,  3, 11 );
+    R( c, d, e, a, b, F2, K2, 10, 13 );
+    R( b, c, d, e, a, F2, K2, 14,  6 );
+    R( a, b, c, d, e, F2, K2,  4,  7 );
+    R( e, a, b, c, d, F2, K2,  9, 14 );
+    R( d, e, a, b, c, F2, K2, 15,  9 );
+    R( c, d, e, a, b, F2, K2,  8, 13 );
+    R( b, c, d, e, a, F2, K2,  1, 15 );
+    R( a, b, c, d, e, F2, K2,  2, 14 );
+    R( e, a, b, c, d, F2, K2,  7,  8 );
+    R( d, e, a, b, c, F2, K2,  0, 13 );
+    R( c, d, e, a, b, F2, K2,  6,  6 );
+    R( b, c, d, e, a, F2, K2, 13,  5 );
+    R( a, b, c, d, e, F2, K2, 11, 12 );
+    R( e, a, b, c, d, F2, K2,  5,  7 );
+    R( d, e, a, b, c, F2, K2, 12,  5 );
+    R( c, d, e, a, b, F3, K3,  1, 11 );
+    R( b, c, d, e, a, F3, K3,  9, 12 );
+    R( a, b, c, d, e, F3, K3, 11, 14 );
+    R( e, a, b, c, d, F3, K3, 10, 15 );
+    R( d, e, a, b, c, F3, K3,  0, 14 );
+    R( c, d, e, a, b, F3, K3,  8, 15 );
+    R( b, c, d, e, a, F3, K3, 12,  9 );
+    R( a, b, c, d, e, F3, K3,  4,  8 );
+    R( e, a, b, c, d, F3, K3, 13,  9 );
+    R( d, e, a, b, c, F3, K3,  3, 14 );
+    R( c, d, e, a, b, F3, K3,  7,  5 );
+    R( b, c, d, e, a, F3, K3, 15,  6 );
+    R( a, b, c, d, e, F3, K3, 14,  8 );
+    R( e, a, b, c, d, F3, K3,  5,  6 );
+    R( d, e, a, b, c, F3, K3,  6,  5 );
+    R( c, d, e, a, b, F3, K3,  2, 12 );
+    R( b, c, d, e, a, F4, K4,  4,  9 );
+    R( a, b, c, d, e, F4, K4,  0, 15 );
+    R( e, a, b, c, d, F4, K4,  5,  5 );
+    R( d, e, a, b, c, F4, K4,  9, 11 );
+    R( c, d, e, a, b, F4, K4,  7,  6 );
+    R( b, c, d, e, a, F4, K4, 12,  8 );
+    R( a, b, c, d, e, F4, K4,  2, 13 );
+    R( e, a, b, c, d, F4, K4, 10, 12 );
+    R( d, e, a, b, c, F4, K4, 14,  5 );
+    R( c, d, e, a, b, F4, K4,  1, 12 );
+    R( b, c, d, e, a, F4, K4,  3, 13 );
+    R( a, b, c, d, e, F4, K4,  8, 14 );
+    R( e, a, b, c, d, F4, K4, 11, 11 );
+    R( d, e, a, b, c, F4, K4,  6,  8 );
+    R( c, d, e, a, b, F4, K4, 15,  5 );
+    R( b, c, d, e, a, F4, K4, 13,  6 );
+
+    aa = a; bb = b; cc = c; dd = d; ee = e;
+
+    /* right lane */
+    a = hd-&gt;h0;
+    b = hd-&gt;h1;
+    c = hd-&gt;h2;
+    d = hd-&gt;h3;
+    e = hd-&gt;h4;
+    R( a, b, c, d, e, F4, KK0,	5,  8);
+    R( e, a, b, c, d, F4, KK0, 14,  9);
+    R( d, e, a, b, c, F4, KK0,	7,  9);
+    R( c, d, e, a, b, F4, KK0,	0, 11);
+    R( b, c, d, e, a, F4, KK0,	9, 13);
+    R( a, b, c, d, e, F4, KK0,	2, 15);
+    R( e, a, b, c, d, F4, KK0, 11, 15);
+    R( d, e, a, b, c, F4, KK0,	4,  5);
+    R( c, d, e, a, b, F4, KK0, 13,  7);
+    R( b, c, d, e, a, F4, KK0,	6,  7);
+    R( a, b, c, d, e, F4, KK0, 15,  8);
+    R( e, a, b, c, d, F4, KK0,	8, 11);
+    R( d, e, a, b, c, F4, KK0,	1, 14);
+    R( c, d, e, a, b, F4, KK0, 10, 14);
+    R( b, c, d, e, a, F4, KK0,	3, 12);
+    R( a, b, c, d, e, F4, KK0, 12,  6);
+    R( e, a, b, c, d, F3, KK1,	6,  9);
+    R( d, e, a, b, c, F3, KK1, 11, 13);
+    R( c, d, e, a, b, F3, KK1,	3, 15);
+    R( b, c, d, e, a, F3, KK1,	7,  7);
+    R( a, b, c, d, e, F3, KK1,	0, 12);
+    R( e, a, b, c, d, F3, KK1, 13,  8);
+    R( d, e, a, b, c, F3, KK1,	5,  9);
+    R( c, d, e, a, b, F3, KK1, 10, 11);
+    R( b, c, d, e, a, F3, KK1, 14,  7);
+    R( a, b, c, d, e, F3, KK1, 15,  7);
+    R( e, a, b, c, d, F3, KK1,	8, 12);
+    R( d, e, a, b, c, F3, KK1, 12,  7);
+    R( c, d, e, a, b, F3, KK1,	4,  6);
+    R( b, c, d, e, a, F3, KK1,	9, 15);
+    R( a, b, c, d, e, F3, KK1,	1, 13);
+    R( e, a, b, c, d, F3, KK1,	2, 11);
+    R( d, e, a, b, c, F2, KK2, 15,  9);
+    R( c, d, e, a, b, F2, KK2,	5,  7);
+    R( b, c, d, e, a, F2, KK2,	1, 15);
+    R( a, b, c, d, e, F2, KK2,	3, 11);
+    R( e, a, b, c, d, F2, KK2,	7,  8);
+    R( d, e, a, b, c, F2, KK2, 14,  6);
+    R( c, d, e, a, b, F2, KK2,	6,  6);
+    R( b, c, d, e, a, F2, KK2,	9, 14);
+    R( a, b, c, d, e, F2, KK2, 11, 12);
+    R( e, a, b, c, d, F2, KK2,	8, 13);
+    R( d, e, a, b, c, F2, KK2, 12,  5);
+    R( c, d, e, a, b, F2, KK2,	2, 14);
+    R( b, c, d, e, a, F2, KK2, 10, 13);
+    R( a, b, c, d, e, F2, KK2,	0, 13);
+    R( e, a, b, c, d, F2, KK2,	4,  7);
+    R( d, e, a, b, c, F2, KK2, 13,  5);
+    R( c, d, e, a, b, F1, KK3,	8, 15);
+    R( b, c, d, e, a, F1, KK3,	6,  5);
+    R( a, b, c, d, e, F1, KK3,	4,  8);
+    R( e, a, b, c, d, F1, KK3,	1, 11);
+    R( d, e, a, b, c, F1, KK3,	3, 14);
+    R( c, d, e, a, b, F1, KK3, 11, 14);
+    R( b, c, d, e, a, F1, KK3, 15,  6);
+    R( a, b, c, d, e, F1, KK3,	0, 14);
+    R( e, a, b, c, d, F1, KK3,	5,  6);
+    R( d, e, a, b, c, F1, KK3, 12,  9);
+    R( c, d, e, a, b, F1, KK3,	2, 12);
+    R( b, c, d, e, a, F1, KK3, 13,  9);
+    R( a, b, c, d, e, F1, KK3,	9, 12);
+    R( e, a, b, c, d, F1, KK3,	7,  5);
+    R( d, e, a, b, c, F1, KK3, 10, 15);
+    R( c, d, e, a, b, F1, KK3, 14,  8);
+    R( b, c, d, e, a, F0, KK4, 12,  8);
+    R( a, b, c, d, e, F0, KK4, 15,  5);
+    R( e, a, b, c, d, F0, KK4, 10, 12);
+    R( d, e, a, b, c, F0, KK4,	4,  9);
+    R( c, d, e, a, b, F0, KK4,	1, 12);
+    R( b, c, d, e, a, F0, KK4,	5,  5);
+    R( a, b, c, d, e, F0, KK4,	8, 14);
+    R( e, a, b, c, d, F0, KK4,	7,  6);
+    R( d, e, a, b, c, F0, KK4,	6,  8);
+    R( c, d, e, a, b, F0, KK4,	2, 13);
+    R( b, c, d, e, a, F0, KK4, 13,  6);
+    R( a, b, c, d, e, F0, KK4, 14,  5);
+    R( e, a, b, c, d, F0, KK4,	0, 15);
+    R( d, e, a, b, c, F0, KK4,	3, 13);
+    R( c, d, e, a, b, F0, KK4,	9, 11);
+    R( b, c, d, e, a, F0, KK4, 11, 11);
+
+
+    t	   = hd-&gt;h1 + d + cc;
+    hd-&gt;h1 = hd-&gt;h2 + e + dd;
+    hd-&gt;h2 = hd-&gt;h3 + a + ee;
+    hd-&gt;h3 = hd-&gt;h4 + b + aa;
+    hd-&gt;h4 = hd-&gt;h0 + c + bb;
+    hd-&gt;h0 = t;
+}
+
+
+/* Update the message digest with the contents
+ * of INBUF with length INLEN.
+ */
+static void
+rmd160_write( RMD160_CONTEXT *hd, byte *inbuf, size_t inlen)
+{
+    if( hd-&gt;count == 64 ) { /* flush the buffer */
+	transform( hd, hd-&gt;buf );
+	hd-&gt;count = 0;
+	hd-&gt;nblocks++;
+    }
+    if( !inbuf )
+	return;
+    if( hd-&gt;count ) {
+	for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
+	    hd-&gt;buf[hd-&gt;count++] = *inbuf++;
+	rmd160_write( hd, NULL, 0 );
+	if( !inlen )
+	    return;
+    }
+
+    while( inlen &gt;= 64 ) {
+	transform( hd, inbuf );
+	hd-&gt;count = 0;
+	hd-&gt;nblocks++;
+	inlen -= 64;
+	inbuf += 64;
+    }
+    for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
+	hd-&gt;buf[hd-&gt;count++] = *inbuf++;
+}
+
+/* The routine terminates the computation
+ */
+
+static void
+rmd160_final( RMD160_CONTEXT *hd )
+{
+    u32 t, msb, lsb;
+    byte *p;
+
+    rmd160_write(hd, NULL, 0); /* flush */;
+
+    msb = 0;
+    t = hd-&gt;nblocks;
+    if( (lsb = t &lt;&lt; 6) &lt; t ) /* multiply by 64 to make a byte count */
+	msb++;
+    msb += t &gt;&gt; 26;
+    t = lsb;
+    if( (lsb = t + hd-&gt;count) &lt; t ) /* add the count */
+	msb++;
+    t = lsb;
+    if( (lsb = t &lt;&lt; 3) &lt; t ) /* multiply by 8 to make a bit count */
+	msb++;
+    msb += t &gt;&gt; 29;
+
+    if( hd-&gt;count &lt; 56 ) { /* enough room */
+	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad */
+	while( hd-&gt;count &lt; 56 )
+	    hd-&gt;buf[hd-&gt;count++] = 0;  /* pad */
+    }
+    else { /* need one extra block */
+	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad character */
+	while( hd-&gt;count &lt; 64 )
+	    hd-&gt;buf[hd-&gt;count++] = 0;
+	rmd160_write(hd, NULL, 0);  /* flush */;
+	memset(hd-&gt;buf, 0, 56 ); /* fill next block with zeroes */
+    }
+    /* append the 64 bit count */
+    hd-&gt;buf[56] = lsb	   ;
+    hd-&gt;buf[57] = lsb &gt;&gt;  8;
+    hd-&gt;buf[58] = lsb &gt;&gt; 16;
+    hd-&gt;buf[59] = lsb &gt;&gt; 24;
+    hd-&gt;buf[60] = msb	   ;
+    hd-&gt;buf[61] = msb &gt;&gt;  8;
+    hd-&gt;buf[62] = msb &gt;&gt; 16;
+    hd-&gt;buf[63] = msb &gt;&gt; 24;
+    transform( hd, hd-&gt;buf );
+
+    p = hd-&gt;buf;
+  #if BYTE_ORDER == BIG_ENDIAN
+    #define X(a) do { *p++ = hd-&gt;h##a	   ; *p++ = hd-&gt;h##a &gt;&gt; 8;	\
+		      *p++ = hd-&gt;h##a &gt;&gt; 16; *p++ = hd-&gt;h##a &gt;&gt; 24; } while(0)
+  #else /* little endian */
+    #define X(a) do { *(u32*)p = hd-&gt;h##a ; p += 4; } while(0)
+  #endif
+    X(0);
+    X(1);
+    X(2);
+    X(3);
+    X(4);
+  #undef X
+}
+
+/****************
+ * Shortcut functions which puts the hash value of the supplied buffer
+ * into outbuf which must have a size of 20 bytes.
+ */
+void
+rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length )
+{
+    RMD160_CONTEXT hd;
+
+    rmd160_init( &amp;hd );
+    rmd160_write( &amp;hd, (byte*)buffer, length );
+    rmd160_final( &amp;hd );
+    memcpy( outbuf, hd.buf, 20 );
+}
diff -urN util-linux-2.11a/mount/rmd160.h util-linux-2.11a-new/mount/rmd160.h
--- util-linux-2.11a/mount/rmd160.h	Wed Dec 31 19:00:00 1969
+++ util-linux-2.11a-new/mount/rmd160.h	Thu Apr 12 05:08:31 2001
@@ -0,0 +1,9 @@
+#ifndef RMD160_H
+#define RMD160_H
+
+void
+rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length );
+
+#endif /*RMD160_H*/
+
+

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010413095611</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-13 09:56:11-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

Emil Laurentiu wrote:
&gt; On 11 April 2001, Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; wrote:
&gt; &gt; 1)  No modifications to kernel. No patch hassles when a new version of
&gt; &gt;     kernel comes out.
&gt; &gt; 2)  Works with 2.2 and 2.4 kernels.
&gt; &gt; 3)  AES cipher is built-in. No /etc/modules.conf alias hassles.
&gt; 
&gt; ... and if you want to be able to use passwords shorter than 20 chars
&gt; and without limiting the password's character sets:
&gt; ... you may just replace the util-linux patch in Jari's package with
&gt; the attached one that uses the same hash function (rmd160) as in the
&gt; international kernel patch.

Enforcing minimum password length of 20 characters is a good feature. If
someone is trying to brute force your password, 20 characters is a *major*
obstacle. Five or six characters is not.

How many bits of useable key material does rmd160 provide?  80?

Does anyone know of GPL licenced implementation of SHA-256, SHA-384 or
SHA-512? SHA-256 should provide 128 bits of useable key material.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010416052447</emailId><senderName>Emil Laurentiu</senderName><senderEmail>emil@la.mine.nu</senderEmail><timestampReceived>2001-04-16 05:24:47-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

On 13 April 2001, Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; wrote:
&gt; Enforcing minimum password length of 20 characters is a good feature. If
&gt; someone is trying to brute force your password, 20 characters is a *major*
&gt; obstacle. Five or six characters is not.
I perfectly agree with you, but the user should have the liberty of choice.
My passwords are somewhere between 12 to 18 characters including special
characters.

&gt; Does anyone know of GPL licenced implementation of SHA-256, SHA-384 or
&gt; SHA-512? SHA-256 should provide 128 bits of useable key material.

I found two:
SHA-256/384/512 (http://www.aarongifford.com/computers/sha.html)
BeeCrypt (http://www.virtualunlimited.com/products/beecrypt/)

I've verified both against the test vectors published at:
	http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf
The first has a BSD license and the second a LGPL one.
I've adapted the former and included it as yet another alternative
to patch util-linux. Mapping the 32 bytes hash to the 16 bytes
encryption key is done by xoring the two halves (diff attached).

As a side note, if someone wants to store an encrypted partition on
a CD you may create a 650M file, mkfs.ext2 it, encrypt it, store 
you data and then use cdrecord to burn that file DIRECTLY as an 
image to the CD. You may then mount your CD with:
	mount -t ext2 -o loop,encryption=AES /dev/cdrom /mount_point
On some CD units you may have to previously mount/unmount a normal 
ISO9660 CD. If you don't write anything on the CD label it might fool
other people to disregard it because there will be no ISO9660 filesystem 
on it and it will look like a burned CD failure.

I encourage everyone to use non-readily available encryption techniques
including your own changes. AES looks (to me) suspiciously to quickly 
adopted so feel free to replace it.

Also keep in mind that good encryption algorithms are not everything because an
attacker will always chose the easiest way to recover your data. One way would
be to record your keystrokes. So seal your keyboard and check the seal
regularly, keep your computer without the cover so you can spot any inside
added device, don't use APM bios functions because the BIOS can be easily
flashed with trojaned versions. Also don't forget about TEMPEST and don't
display data on a CRT monitor when you see vans with parabolic antennas close
to your house.

I have an alarm with an infrared detector in the room where I have my
computers.  The remote control for the alarm (and the pair circuit inside the
base station) have been replaced with other one-time key-lock chips because you
may never know what backdoor codes this alarms have.
Some call me paranoic but I really don't care ;-)

-- 
								Regards,
								Emil
--
If nothing ever sticks to TEFLON, how do they make TEFLON stick to the pan?

["util-linux-2.11a.diff" (text/plain)]

diff -urN util-linux-2.11a/mount/Makefile util-linux-2.11a-new/mount/Makefile
--- util-linux-2.11a/mount/Makefile	Sun Mar  4 19:38:53 2001
+++ util-linux-2.11a-new/mount/Makefile	Mon Apr 16 00:22:24 2001
@@ -24,7 +24,7 @@
 
 MAYBE = pivot_root swapoff
 
-LO_OBJS = lomount.o $(LIB)/xstrncpy.o
+LO_OBJS = lomount.o sha256.o $(LIB)/xstrncpy.o
 NFS_OBJS = nfsmount.o nfsmount_xdr.o nfsmount_clnt.o
 GEN_FILES = nfsmount.h nfsmount_xdr.c nfsmount_clnt.c
 
@@ -57,7 +57,7 @@
 main_losetup.o: lomount.c
 	$(COMPILE) -DMAIN lomount.c -o $@
 
-losetup: main_losetup.o $(LIB)/xstrncpy.o
+losetup: main_losetup.o sha256.o $(LIB)/xstrncpy.o
 	$(LINK) $^ -o $@
 
 mount.o umount.o nfsmount.o losetup.o fstab.o realpath.o sundries.o: sundries.h
diff -urN util-linux-2.11a/mount/lomount.c util-linux-2.11a-new/mount/lomount.c
--- util-linux-2.11a/mount/lomount.c	Sun Mar  4 19:27:59 2001
+++ util-linux-2.11a-new/mount/lomount.c	Sun Apr 15 23:44:02 2001
@@ -27,6 +27,7 @@
 
 #include "loop.h"
 #include "lomount.h"
+#include "sha256.h"
 #include "xstrncpy.h"
 #include "nls.h"
 
@@ -34,6 +35,8 @@
 extern char *xstrdup (const char *s);	/* not: #include "sundries.h" */
 extern void error (const char *fmt, ...);	/* idem */
 
+#define LO_CRYPT_AES    16
+
 #ifdef LOOP_SET_FD
 struct crypt_type_struct {
 	int id;
@@ -42,7 +45,7 @@
 	{ LO_CRYPT_NONE, "no" },
 	{ LO_CRYPT_NONE, "none" },
 	{ LO_CRYPT_XOR, "xor" },
-	{ LO_CRYPT_DES, "DES" },
+	{ LO_CRYPT_AES, "AES" },
 	{ -1, NULL   }
 };
 
@@ -199,7 +202,7 @@
 set_loop (const char *device, const char *file, int offset,
 	  const char *encryption, int *loopro) {
 	struct loop_info loopinfo;
-	int fd, ffd, mode, i;
+	int fd, ffd, mode;
 	char *pass;
 
 	mode = (*loopro ? O_RDONLY : O_RDWR);
@@ -249,22 +252,26 @@
 		xstrncpy (loopinfo.lo_encrypt_key, pass, LO_KEY_SIZE);
 		loopinfo.lo_encrypt_key_size = strlen(loopinfo.lo_encrypt_key);
 		break;
-	case LO_CRYPT_DES:
-		pass = getpass (_("Password: "));
-		strncpy (loopinfo.lo_encrypt_key, pass, 8);
-		loopinfo.lo_encrypt_key[8] = 0;
-		loopinfo.lo_encrypt_key_size = 8;
-		pass = getpass (_("Init (up to 16 hex digits): "));
-		for (i = 0; i &lt; 16 &amp;&amp; pass[i]; i++)
-			if (isxdigit (pass[i])) {
-				loopinfo.lo_init[i &gt;&gt; 3] |= (pass[i] &gt; '9' ?
-				  (islower (pass[i]) ? toupper (pass[i]) :
-				   pass[i])-'A'+10 : pass[i]-'0') &lt;&lt; (i&amp;7) * 4;
-			} else {
-				fprintf (stderr, _("Non-hex digit '%c'.\n"),
-					 pass[i]);
-				return 1;
-			}
+	case LO_CRYPT_AES:  /* AES */
+		pass = getpass( _( "Password: " ) );
+		{
+		  sha256Param   shap;
+		  unsigned char keybits[32], *k;
+		  int           i;
+		
+		  /* use the sha256 function to generate a 16 bytes hash */
+		  sha256Reset( &amp;shap );
+		  sha256Update( &amp;shap, pass, strlen( pass ) );
+		  sha256Digest( &amp;shap, ( u_int32_t * ) keybits );
+		  /* zero unencrypted passwords in memory */
+		  memset( pass, 0, strlen( pass ) );
+		  k = ( unsigned char * ) loopinfo.lo_encrypt_key;
+		  for ( i = 0; i &lt; 16; i++ )
+		    k[i] = keybits[i] ^ keybits[i + 16];
+		  /* zero hash in memory */
+		  memset( keybits, 0, 32 );
+		  loopinfo.lo_encrypt_key_size = 16;	/* 128 bits */
+		}
 		break;
 	default:
 		fprintf (stderr,
@@ -281,6 +288,7 @@
 		perror ("ioctl: LOOP_SET_STATUS");
 		return 1;
 	}
+	memset(loopinfo.lo_encrypt_key, 0, sizeof(loopinfo.lo_encrypt_key));
 	close (fd);
 	close (ffd);
 	if (verbose &gt; 1)
diff -urN util-linux-2.11a/mount/losetup.8 util-linux-2.11a-new/mount/losetup.8
--- util-linux-2.11a/mount/losetup.8	Fri Aug 11 07:11:30 2000
+++ util-linux-2.11a-new/mount/losetup.8	Sun Apr 15 23:24:07 2001
@@ -1,4 +1,4 @@
-.TH LOSETUP 8 "Nov 24 1993" "Linux" "MAINTENANCE COMMANDS"
+.TH LOSETUP 8 "Apr 8 2001" "Linux" "MAINTENANCE COMMANDS"
 .SH NAME
 losetup \- set up and control loop devices
 .SH SYNOPSIS
@@ -36,11 +36,8 @@
 .PD 0
 .IP \fBXOR\fP
 use a simple XOR encryption.
-.IP \fBDES\fP
-use DES encryption. DES encryption is only available if the optional
-DES package has been added to the kernel. DES encryption uses an additional
-start value that is used to protect passwords against dictionary
-attacks.
+.IP \fBAES\fP
+use AES encryption.
 .PD
 .RE
 .IP "\fB\-o \fIoffset\fP"
@@ -69,9 +66,8 @@
 .nf
 .IP
 dd if=/dev/zero of=/file bs=1k count=100
-losetup -e des /dev/loop0 /file
+losetup -e AES /dev/loop0 /file
 Password:
-Init (up to 16 hex digits):
 mkfs -t ext2 /dev/loop0 100
 mount -t ext2 /dev/loop0 /mnt
  ...
@@ -86,7 +82,7 @@
 .LP
 .fi
 .SH RESTRICTION
-DES encryption is painfully slow. On the other hand, XOR is terribly weak.
+AES encryption is slow. On the other hand, XOR is terribly weak.
 .SH AUTHORS
 .nf
 Original version: Theodore Ts'o &lt;tytso@athena.mit.edu&gt;
diff -urN util-linux-2.11a/mount/sha256.c util-linux-2.11a-new/mount/sha256.c
--- util-linux-2.11a/mount/sha256.c	Wed Dec 31 19:00:00 1969
+++ util-linux-2.11a-new/mount/sha256.c	Sun Apr 15 22:56:39 2001
@@ -0,0 +1,271 @@
+/*
+ * sha256.c
+ *
+ * SHA-256 hash function, code
+ *
+ * Copyright (c) 2000, 2001 Virtual Unlimited B.V.
+ *
+ * Author: Bob Deblier &lt;bob@virtualunlimited.com&gt;
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include "sha256.h"
+
+static const u_int32_t k[64] = {
+  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
+  0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
+  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
+  0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
+  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
+  0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
+  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
+  0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
+  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
+  0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
+  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
+};
+
+static const u_int32_t hinit[8] = {
+  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c,
+  0x1f83d9ab, 0x5be0cd19
+};
+
+inline        u_int32_t
+swapu32( u_int32_t n )
+{
+  return ( ( ( n &amp; 0xffU ) &lt;&lt; 24 ) |
+      ( ( n &amp; 0xff00U ) &lt;&lt; 8 ) |
+      ( ( n &amp; 0xff0000U ) &gt;&gt; 8 ) | ( ( n &amp; 0xff000000U ) &gt;&gt; 24 ) );
+}
+
+int
+sha256Reset( register sha256Param * p )
+{
+  int           i;
+
+  for ( i = 0; i &lt; 8; i++ )
+    p-&gt;h[i] = hinit[i];
+  for ( i = 0; i &lt; 64; i++ )
+    p-&gt;data[i] = 0;
+  p-&gt;length = 0;
+  p-&gt;offset = 0;
+  return 0;
+}
+
+#ifndef ROTR32
+# define ROTR32(x, s) (((x) &gt;&gt; (s)) | ((x) &lt;&lt; (32 - (s))))
+#endif
+
+#define R(x,s)  ((x) &gt;&gt; (s))
+#define S(x,s) ROTR32(x, s)
+
+#define CH(x,y,z) ((x&amp;(y^z))^z)
+#define MAJ(x,y,z) (((x|y)&amp;z)|(x&amp;y))
+#define SIG0(x)	(S(x,2) ^ S(x,13) ^ S(x,22))
+#define SIG1(x)	(S(x,6) ^ S(x,11) ^ S(x,25))
+#define sig0(x) (S(x,7) ^ S(x,18) ^ R(x,3))
+#define sig1(x) (S(x,17) ^ S(x,19) ^ R(x,10))
+
+#define ROUND(a,b,c,d,e,f,g,h,w,k)	\
+	temp = h + SIG1(e) + CH(e,f,g) + k + w;	\
+	h = temp + SIG0(a) + MAJ(a,b,c);	\
+	d += temp
+
+void
+sha256Process( register sha256Param * p )
+{
+  register u_int32_t a, b, c, d, e, f, g, h, temp;
+  register u_int32_t *w;
+  register u_int8_t t;
+
+#if BYTE_ORDER == BIG_ENDIAN
+  w = p-&gt;data + 16;
+#else
+  w = p-&gt;data;
+  t = 16;
+  while ( t-- )
+  {
+    register u_int32_t temp = swapu32( *w );
+
+    *( w++ ) = temp;
+  }
+#endif
+
+  t = 48;
+  while ( t-- )
+  {
+    register u_int32_t temp = sig1( w[-2] ) + w[-7] + sig0( w[-15] ) + w[-16];
+
+    *( w++ ) = temp;
+  }
+
+  w = p-&gt;data;
+
+  a = p-&gt;h[0];
+  b = p-&gt;h[1];
+  c = p-&gt;h[2];
+  d = p-&gt;h[3];
+  e = p-&gt;h[4];
+  f = p-&gt;h[5];
+  g = p-&gt;h[6];
+  h = p-&gt;h[7];
+
+  ROUND( a, b, c, d, e, f, g, h, w[0], k[0] );
+  ROUND( h, a, b, c, d, e, f, g, w[1], k[1] );
+  ROUND( g, h, a, b, c, d, e, f, w[2], k[2] );
+  ROUND( f, g, h, a, b, c, d, e, w[3], k[3] );
+  ROUND( e, f, g, h, a, b, c, d, w[4], k[4] );
+  ROUND( d, e, f, g, h, a, b, c, w[5], k[5] );
+  ROUND( c, d, e, f, g, h, a, b, w[6], k[6] );
+  ROUND( b, c, d, e, f, g, h, a, w[7], k[7] );
+  ROUND( a, b, c, d, e, f, g, h, w[8], k[8] );
+  ROUND( h, a, b, c, d, e, f, g, w[9], k[9] );
+  ROUND( g, h, a, b, c, d, e, f, w[10], k[10] );
+  ROUND( f, g, h, a, b, c, d, e, w[11], k[11] );
+  ROUND( e, f, g, h, a, b, c, d, w[12], k[12] );
+  ROUND( d, e, f, g, h, a, b, c, w[13], k[13] );
+  ROUND( c, d, e, f, g, h, a, b, w[14], k[14] );
+  ROUND( b, c, d, e, f, g, h, a, w[15], k[15] );
+  ROUND( a, b, c, d, e, f, g, h, w[16], k[16] );
+  ROUND( h, a, b, c, d, e, f, g, w[17], k[17] );
+  ROUND( g, h, a, b, c, d, e, f, w[18], k[18] );
+  ROUND( f, g, h, a, b, c, d, e, w[19], k[19] );
+  ROUND( e, f, g, h, a, b, c, d, w[20], k[20] );
+  ROUND( d, e, f, g, h, a, b, c, w[21], k[21] );
+  ROUND( c, d, e, f, g, h, a, b, w[22], k[22] );
+  ROUND( b, c, d, e, f, g, h, a, w[23], k[23] );
+  ROUND( a, b, c, d, e, f, g, h, w[24], k[24] );
+  ROUND( h, a, b, c, d, e, f, g, w[25], k[25] );
+  ROUND( g, h, a, b, c, d, e, f, w[26], k[26] );
+  ROUND( f, g, h, a, b, c, d, e, w[27], k[27] );
+  ROUND( e, f, g, h, a, b, c, d, w[28], k[28] );
+  ROUND( d, e, f, g, h, a, b, c, w[29], k[29] );
+  ROUND( c, d, e, f, g, h, a, b, w[30], k[30] );
+  ROUND( b, c, d, e, f, g, h, a, w[31], k[31] );
+  ROUND( a, b, c, d, e, f, g, h, w[32], k[32] );
+  ROUND( h, a, b, c, d, e, f, g, w[33], k[33] );
+  ROUND( g, h, a, b, c, d, e, f, w[34], k[34] );
+  ROUND( f, g, h, a, b, c, d, e, w[35], k[35] );
+  ROUND( e, f, g, h, a, b, c, d, w[36], k[36] );
+  ROUND( d, e, f, g, h, a, b, c, w[37], k[37] );
+  ROUND( c, d, e, f, g, h, a, b, w[38], k[38] );
+  ROUND( b, c, d, e, f, g, h, a, w[39], k[39] );
+  ROUND( a, b, c, d, e, f, g, h, w[40], k[40] );
+  ROUND( h, a, b, c, d, e, f, g, w[41], k[41] );
+  ROUND( g, h, a, b, c, d, e, f, w[42], k[42] );
+  ROUND( f, g, h, a, b, c, d, e, w[43], k[43] );
+  ROUND( e, f, g, h, a, b, c, d, w[44], k[44] );
+  ROUND( d, e, f, g, h, a, b, c, w[45], k[45] );
+  ROUND( c, d, e, f, g, h, a, b, w[46], k[46] );
+  ROUND( b, c, d, e, f, g, h, a, w[47], k[47] );
+  ROUND( a, b, c, d, e, f, g, h, w[48], k[48] );
+  ROUND( h, a, b, c, d, e, f, g, w[49], k[49] );
+  ROUND( g, h, a, b, c, d, e, f, w[50], k[50] );
+  ROUND( f, g, h, a, b, c, d, e, w[51], k[51] );
+  ROUND( e, f, g, h, a, b, c, d, w[52], k[52] );
+  ROUND( d, e, f, g, h, a, b, c, w[53], k[53] );
+  ROUND( c, d, e, f, g, h, a, b, w[54], k[54] );
+  ROUND( b, c, d, e, f, g, h, a, w[55], k[55] );
+  ROUND( a, b, c, d, e, f, g, h, w[56], k[56] );
+  ROUND( h, a, b, c, d, e, f, g, w[57], k[57] );
+  ROUND( g, h, a, b, c, d, e, f, w[58], k[58] );
+  ROUND( f, g, h, a, b, c, d, e, w[59], k[59] );
+  ROUND( e, f, g, h, a, b, c, d, w[60], k[60] );
+  ROUND( d, e, f, g, h, a, b, c, w[61], k[61] );
+  ROUND( c, d, e, f, g, h, a, b, w[62], k[62] );
+  ROUND( b, c, d, e, f, g, h, a, w[63], k[63] );
+
+  p-&gt;h[0] += a;
+  p-&gt;h[1] += b;
+  p-&gt;h[2] += c;
+  p-&gt;h[3] += d;
+  p-&gt;h[4] += e;
+  p-&gt;h[5] += f;
+  p-&gt;h[6] += g;
+  p-&gt;h[7] += h;
+}
+
+int
+sha256Update( register sha256Param * p, const u_int8_t * data, int size )
+{
+  register int  proclength;
+
+  p-&gt;length += size;
+  while ( size &gt; 0 )
+  {
+    proclength = ( ( p-&gt;offset + size ) &gt; 64 ) ? ( 64 - p-&gt;offset ) : size;
+    memcpy( ( ( u_int8_t * ) p-&gt;data ) + p-&gt;offset, data, proclength );
+    size -= proclength;
+    data += proclength;
+    p-&gt;offset += proclength;
+
+    if ( p-&gt;offset == 64 )
+    {
+      sha256Process( p );
+      p-&gt;offset = 0;
+    }
+  }
+  return 0;
+}
+
+static void
+sha256Finish( register sha256Param * p )
+{
+  register u_int8_t *ptr = ( ( u_int8_t * ) p-&gt;data ) + p-&gt;offset++;
+
+  *( ptr++ ) = 0x80;
+
+  if ( p-&gt;offset &gt; 56 )
+  {
+    while ( p-&gt;offset++ &lt; 64 )
+      *( ptr++ ) = 0;
+
+    sha256Process( p );
+    p-&gt;offset = 0;
+  }
+
+  ptr = ( ( u_int8_t * ) p-&gt;data ) + p-&gt;offset;
+  while ( p-&gt;offset++ &lt; 56 )
+    *( ptr++ ) = 0;
+
+#if BYTE_ORDER == BIG_ENDIAN
+  p-&gt;data[14] = ( ( u_int32_t ) ( p-&gt;length &gt;&gt; 29 ) );
+  p-&gt;data[15] = ( ( u_int32_t ) ( ( p-&gt;length &lt;&lt; 3 ) &amp; 0xffffffff ) );
+#else
+  p-&gt;data[14] = swapu32( ( u_int32_t ) ( p-&gt;length &gt;&gt; 29 ) );
+  p-&gt;data[15] = swapu32( ( u_int32_t ) ( ( p-&gt;length &lt;&lt; 3 ) &amp; 0xffffffff ) );
+#endif
+
+  sha256Process( p );
+  p-&gt;offset = 0;
+}
+
+int
+sha256Digest( register sha256Param * p, u_int32_t * data )
+{
+  int           i;
+
+  sha256Finish( p );
+  for ( i = 0; i &lt; 8; i++ )
+#if BYTE_ORDER == BIG_ENDIAN
+    *data++ = p-&gt;h[i];
+#else
+    *data++ = swapu32( p-&gt;h[i] );
+#endif
+  sha256Reset( p );
+  return 0;
+}
diff -urN util-linux-2.11a/mount/sha256.h util-linux-2.11a-new/mount/sha256.h
--- util-linux-2.11a/mount/sha256.h	Wed Dec 31 19:00:00 1969
+++ util-linux-2.11a-new/mount/sha256.h	Sun Apr 15 22:52:41 2001
@@ -0,0 +1,50 @@
+/*
+ * sha256.h
+ *
+ * SHA-256 hash function, header
+ *
+ * Copyright (c) 2000, 2001 Virtual Unlimited B.V.
+ *
+ * Author: Bob Deblier &lt;bob@virtualunlimited.com&gt;
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#ifndef _SHA256_H
+#define _SHA256_H
+
+#if HAVE_STRING_H
+#include &lt;string.h&gt;
+#endif
+
+#include &lt;sys/bitypes.h&gt;
+#include &lt;endian.h&gt;
+
+typedef struct
+{
+  u_int32_t     h[8];
+  u_int32_t     data[64];
+  u_int64_t     length;
+  u_int8_t      offset;
+}
+sha256Param;
+
+void          sha256Process( sha256Param * );
+int           sha256Reset( sha256Param * );
+int           sha256Update( sha256Param *, const u_int8_t *, int );
+int           sha256Digest( sha256Param *, u_int32_t * );
+
+#endif

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010406102004</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-06 10:20:04-0400</timestampReceived><subject>Re: Still have the open(2) problem</subject><body>

Dale Amon wrote:
&gt; I still get an open(2) failure on a plain 3gb file
&gt; created by dd if=/dev/zero.
&gt; 
&gt; I'm running a 2.4.3i now, no probs with the install;
&gt; even got freeswan 1.9 patches to go in.
&gt; 
&gt; loop7 patches must be in the release because an attempt
&gt; to add them says they are already there.
&gt; 
&gt; So I *still* can't open a big file from my own code, not
&gt; even a plain one let alone a loopback.

You need:
1)  LFS capable kernel: 2.2.18aa2, 2.2.19aa1, 2.4.X or whatever
2)  glibc 2.1.3 or later compiled against LFS kernel headers
3)  Application compiled with -D_FILE_OFFSET_BITS=64

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010409133943</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-04-09 13:39:43-0400</timestampReceived><subject>Re: Still have the open(2) problem</subject><body>

On Fri, Apr 06, 2001 at 01:20:04PM +0300, Jari Ruusu wrote:

&gt; 3)  Application compiled with -D_FILE_OFFSET_BITS=64

Thank you, thank you, thank you!

It never crossed my mind that you might have to use a
special compiler flag to do it, and even though I posted
the complete test source and command lines I used, no
one commented on this until now.

Again, Thank you, thank you, thank you!

And now, on to deeper losetup problems!

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010518162045</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-05-18 16:20:45-0400</timestampReceived><subject>Re: loop-AES package reliability</subject><body>

On Fri, 18 May 2001, David Lambert wrote:

&gt; I am a newbie to the crypto world and am in the process migrating my systems 
&gt; from 2.2.18 kernel to 2.4.x and am considering replacing the international 
&gt; crypto patch with the loop-AES package from Jari Ruusu. Does anyone have 
&gt; experience with the maturity/reliability of this package? Any comments please.

i am using it here with a 2.4.4-xfs + usagi patches.
rocksolid stable so far.

Gruss,
  Hauke

-- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010519112726</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-05-19 11:27:26-0400</timestampReceived><subject>Re: loop-AES package reliability</subject><body>

David Lambert wrote:
&gt; I am a newbie to the crypto world and am in the process migrating my systems
&gt; from 2.2.18 kernel to 2.4.x and am considering replacing the international
&gt; crypto patch with the loop-AES package from Jari Ruusu. Does anyone have
&gt; experience with the maturity/reliability of this package? Any comments please.

There are no known problems with loop-AES.

loop-AES used to be loop-TripleDES for many years. loop-TripleDES was block
length doubled triple DES. loop-TripleDES has never failed, and neither has
loop-AES.

The AES cipher in loop-AES as well as SHA-256/384/512 hashes match all
published test vectors I could find.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510192327</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-05-10 19:23:27-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>


btw, I've tried to bring to attention this issue some weeks ago,
I even posted a package based on the international crypto patch,
of which cryptoapi-2.4.3-hvr5.tar.gz is the latest one (I should really
get to finish up a new one...)

take a look at it at

http://www.hvrlab.org/pub/crypto/

if you want...

the reason you see the problems only on the first mkfs time is, because,
as soon as you mount the fs, the kernel changes the transfer block size...
and from that moment on, it stays there (unless the kernel has reason to
change it again...)

see also the README file in the above mentioned package for more
information on this issue...

On Thu, 10 May 2001, Dale Amon wrote:
[...]
&gt; I only so the "unusual" behavior the first time I did the
&gt; mkfs. And I may not have seen it at all when I changed to
&gt; reiserfs.

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510194550</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-05-10 19:45:50-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

Herbert Valerio Riedel wrote:
&gt; btw, I've tried to bring to attention this issue some weeks ago,
&gt; I even posted a package based on the international crypto patch,
&gt; of which cryptoapi-2.4.3-hvr5.tar.gz is the latest one (I should really
&gt; get to finish up a new one...)
&gt; 
&gt; take a look at it at
&gt; 
&gt; http://www.hvrlab.org/pub/crypto/
&gt; 
&gt; if you want...
&gt; 
&gt; the reason you see the problems only on the first mkfs time is, because,
&gt; as soon as you mount the fs, the kernel changes the transfer block size...
&gt; and from that moment on, it stays there (unless the kernel has reason to
&gt; change it again...)
&gt; 
&gt; see also the README file in the above mentioned package for more
&gt; information on this issue...
&gt; 
&gt; On Thu, 10 May 2001, Dale Amon wrote:
&gt; [...]
&gt; &gt; I only so the "unusual" behavior the first time I did the
&gt; &gt; mkfs. And I may not have seen it at all when I changed to
&gt; &gt; reiserfs.

And, if someone wants a totally hassle free solution, loop-AES package is
immune to variations in transfer size. Alexander Kjeldaas' patch is
misdesigned and broken, period.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510195057</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-05-10 19:50:57-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, 10 May 2001, Jari Ruusu wrote:
&gt; And, if someone wants a totally hassle free solution, loop-AES package is
&gt; immune to variations in transfer size. Alexander Kjeldaas' patch is
&gt; misdesigned and broken, period.

...you don't miss any opportunity to mention this, do you? ;-)

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510200344</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-05-10 20:03:44-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Thu, 10 May 2001, Jari Ruusu wrote:
&gt; &gt; And, if someone wants a totally hassle free solution, loop-AES package is
&gt; &gt; immune to variations in transfer size. Alexander Kjeldaas' patch is
&gt; &gt; misdesigned and broken, period.
&gt; 
&gt; ...you don't miss any opportunity to mention this, do you? ;-)

People keep fighting with Alexander Kjeldaas' patch for no reason. If they
knew it was broken, they would not be wasting their time (and data) with it.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510201443</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-05-10 20:14:43-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, 10 May 2001, Herbert Valerio Riedel wrote:
&gt; the reason you see the problems only on the first mkfs time is, because,
&gt; as soon as you mount the fs, the kernel changes the transfer block size...
&gt; and from that moment on, it stays there (unless the kernel has reason to
&gt; change it again...)

long term solution would be to make the crypto use 512 byte block size and
coalesce to kernel transfer size... then it would be blocksize
independent?

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510201617</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-05-10 20:16:17-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, 10 May 2001, Dan Hollis wrote:

&gt; On Thu, 10 May 2001, Herbert Valerio Riedel wrote:
&gt; &gt; the reason you see the problems only on the first mkfs time is, because,
&gt; &gt; as soon as you mount the fs, the kernel changes the transfer block size...
&gt; &gt; and from that moment on, it stays there (unless the kernel has reason to
&gt; &gt; change it again...)
&gt;
&gt; long term solution would be to make the crypto use 512 byte block size and
&gt; coalesce to kernel transfer size... then it would be blocksize
&gt; independent?

exactly... (assuming 512 bytes are the smallest possible blocksize...)

-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010510203050</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-05-10 20:30:50-0400</timestampReceived><subject>Re: Problems encrypting disk partitions in 2.4.3</subject><body>

On Thu, 10 May 2001, Herbert Valerio Riedel wrote:
&gt; On Thu, 10 May 2001, Dan Hollis wrote:
&gt; &gt; long term solution would be to make the crypto use 512 byte block size and
&gt; &gt; coalesce to kernel transfer size... then it would be blocksize
&gt; &gt; independent?
&gt; exactly... (assuming 512 bytes are the smallest possible blocksize...)

Floppy disks can go down to 128 byte sectors, but I don't know how the
kernel handles this at the block level. I don't even know if the linux
floppy driver supports 128 byte sectors :-)

In any case I think VFS is limited to smallest block size of 512 bytes, so
this should be a safe assumption...

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010413121040</emailId><senderName></senderName><senderEmail>conferencing</senderEmail><timestampReceived>2001-04-13 12:10:40-0400</timestampReceived><subject>RE: thankyou                         32364</subject><body>

&lt;HTML&gt;
&lt;BODY&gt;
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Take \
Control Of Your Conference Calls&lt;/TITLE&gt;&lt;META http-equiv=Content-Type \
content="text/html; charset=windows-1252"&gt;&lt;META content="MSHTML 5.50.4134.100" \
name=GENERATOR&gt;&lt;/HEAD&gt;&lt;BODY vLink=#c0c0c0 link=#c0c0c0 bgColor=#000000 \
leftMargin=0&gt;&lt;PRE&gt;&lt;FONT face=arial,helvetica&gt;&lt;HEAD&gt;&lt;META \
content=FrontPage.Editor.Document name=ProgId&gt;&lt;DIV align=center&gt;&lt;CENTER&gt;&lt;TABLE \
height=789 cellSpacing=0 cellPadding=0 width=602 border=0&gt;&lt;TBODY&gt;&lt;TR vAlign=top&gt;&lt;TD \
width=602 height=452&gt;&lt;DIV align=center&gt;&lt;TABLE width=470 border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P \
align=center&gt;&lt;FONT color=#0000ff size=7&gt;&lt;B&gt;&lt;FONT color=999999 size=6&gt;Why Pay More For \
Your &lt;/FONT&gt;&lt;/B&gt;&lt;/FONT&gt;&lt;FONT color=#999999 size=6&gt;&lt;B&gt;Conference \
Calls?&lt;/B&gt;&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;TABLE width=352 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;P align=center&gt;&lt;FONT color=#ff0000 size=5&gt;Only &lt;U&gt;&lt;B&gt;.18 \
Cents &lt;/B&gt;&lt;/U&gt;per minute (Including long \
distance!)&lt;/FONT&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;UL&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;No setup fees&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;No contracts or monthly \
fees&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;Call anytime, \
from anywhere, to anywhere&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 \
size=3&gt;&lt;B&gt;International Dial In 18 cents per minute&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV \
align=left&gt;&lt;FONT color=999999 size=3&gt;&lt;B&gt;Connects up to 100 \
participants&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;LI&gt;&lt;DIV align=left&gt;&lt;FONT color=999999 \
size=3&gt;&lt;B&gt;Operator Help available \
24/7&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/LI&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;/UL&gt;&lt;DIV align=center&gt;&lt;TABLE width=424 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;DIV align=center&gt;&lt;FONT color=#ff0000 size=6&gt;&lt;B&gt;&lt;FONT \
size=5&gt;Get the best quality, the easiest to use,&lt;/FONT&gt;&lt;/B&gt;&lt;/FONT&gt; &lt;FONT \
color=#ff0000 size=5&gt;&lt;B&gt;and lowest rate in the \
industry.&lt;/B&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;TABLE width=300 \
border=0&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD height=73&gt;&lt;DIV align=center&gt;&lt;P align=center&gt;&lt;FONT \
color=#999999 size=4&gt;If you like saving money, fill out the form below and one of our \
consultants will contact \
you.&lt;/FONT&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/DIV&gt;&lt;/BLOCKQUOTE&gt;&lt;/BLOCKQUOTE&gt;&lt;DIV \
align=center&gt;&lt;P align=center&gt;&lt;FONT color=#ff0000 size=2&gt;Required Input \
Field&lt;/FONT&gt;&lt;FONT color=#ff0000 size=2&gt;*&lt;/FONT&gt;&lt;/P&gt;&lt;TABLE cellSpacing=0 \
borderColorDark=#333300 cellPadding=3 width=600 \
borderColorLight=#ffffcc&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD&gt;&lt;FORM \
action="mailto:inbox001@excite.com?subject=Conference_Inquiry" method=post \
encType=text/plain&gt;&lt;DIV align=center&gt;&lt;TABLE width="100%"&gt;&lt;TBODY&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Name*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT name=NAME&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" color=#ff0000 size=2&gt;Web Address*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT \
color=#ff0000&gt;&lt;INPUT value=http:// name=URL&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Company Name*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=COMPANY_NAME&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT \
face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;State&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD \
width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT size=2 name=STATE&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD \
width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 \
size=2&gt;Business Phone*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=BUS_PHONE&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT \
face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Home \
Phone&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT name=HOME_PHONE&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV align=right&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" color=#ff0000 size=2&gt;E-mail*&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT \
color=#ff0000&gt;&lt;INPUT name=EMAIL&gt; &lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;TR&gt;&lt;TD width="49%"&gt;&lt;DIV \
align=right&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Type of \
Business&lt;/FONT&gt;&lt;/DIV&gt;&lt;/TD&gt;&lt;TD width="51%"&gt;&lt;FONT color=#ff0000&gt;&lt;INPUT \
name=TYPE_OF_BUSINESS&gt; \
&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;P&gt;&lt;BR&gt;¬†¬†¬†¬†¬†¬†¬†&amp;nbs \
p;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&lt;DIV \
align=center&gt;&lt;INPUT type=submit value="Submit Information" name=submit&gt;&lt;P \
align=center&gt;&lt;/BR&gt;&lt;B&gt;&lt;/BR&gt;&lt;FONT color=999999 face="Arial, Helvetica, sans-serif" \
size=5&gt;&lt;P align=center&gt;This could be your ad!&lt;/FONT&gt;&lt;/B&gt;&lt;FONT face="Arial, Helvetica, \
sans-serif" size=2&gt;&lt;BR&gt;&lt;A href="mailto:market202@excite.com?subject=Direct \
Marketing"&gt;&lt;FONT color=ff0000&gt;Click here to e-mail us your contact \
info&lt;/A&gt;.&lt;/FONT&gt;&lt;/P&gt;&lt;P align=center&gt;&lt;FONT face="Arial, Helvetica, sans-serif" \
color=#999999 size=1&gt;This email is to those persons that have contacted Conference \
Calls for Less regarding available services or product information.  If this email is \
reaching you in error and you feel that you have not contacted us, &lt;A \
href="mailto:rem0ve.@excite.com?subject=Remove_Conference"&gt;click here&lt;/A&gt;. We \
apologize and will gladly remove you from our mailing \
list.&lt;/FONT&gt;&lt;/P&gt;&lt;/DIV&gt;&lt;/DIV&gt;&lt;/BODY&gt;

&lt;/BODY&gt;
&lt;/HTML&gt;




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010416184702</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-16 18:47:02-0400</timestampReceived><subject>Announce loop-AES-v1.1b file crypto package</subject><body>

In short: If file crypto is all you need, this package is a hassle free
replacement for Alexander Kjeldaas' international crypto patch.

Features:
- No modifications to kernel. No patch hassles when a new version of kernel
  comes out.
- Works with 2.2 and 2.4 kernels.
- AES cipher is built-in. No /etc/modules.conf alias hassles.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.

This package provides a loadable Linux kernel module that has AES cipher
built-in. The AES cipher can be used to encrypt filesystems and disk
partitions.

This package does *not* modify your kernel in any way, so you are free to
use kernels of your choice, with or without cool patches. This package
*should* work with all past, present, and future 2.2 kernels. This package
*propably* works with 2.4 kernels (2.4.3 or later). This package has not
been tested on SMP systems.

The AES cipher is used in CBC (cipher block chaining) mode.

Password string has a minimum length of 20 characters. If encryption type is
specified as AES128, password string is hashed with SHA-256, and 128 bit AES
encryption is used. If encryption type is specified as AES192, password
string is hashed with SHA-384, and 192 bit AES encryption is used. If
encryption type is specified as AES256, password string is hashed with
SHA-512, and 256 bit AES encryption is used. (Note to existing users:
password setup with the old scheme is and will be supported.)

For more information about compiling and using the driver, see the README
file in the package.

A bzip2 compressed tarball is here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.1b.tar.bz2
    md5sum 61e521a383ce9a90c3f7b98bcf789813

A PGP signature file, my public key, and fingerprint here:

    http://members.surfeu.fi/ce6c8edf/loop-AES-v1.1b.tar.bz2.sign
    http://members.surfeu.fi/ce6c8edf/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010416185902</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-04-16 18:59:02-0400</timestampReceived><subject>Re: announce: linux-int-2.4.3.1-hvr3</subject><body>

[Sorry, if you receive this twice. I had problems with outgoing mail]

Emil Laurentiu wrote:
&gt; &gt; Does anyone know of GPL licenced implementation of SHA-256, SHA-384 or
&gt; &gt; SHA-512? SHA-256 should provide 128 bits of useable key material.
&gt; 
&gt; I found two:
&gt; SHA-256/384/512 (http://www.aarongifford.com/computers/sha.html)
&gt; BeeCrypt (http://www.virtualunlimited.com/products/beecrypt/)
&gt; 
&gt; I've verified both against the test vectors published at:
&gt;         http://csrc.nist.gov/cryptval/shs/sha256-384-512.pdf
&gt; The first has a BSD license and the second a LGPL one.
&gt; I've adapted the former and included it as yet another alternative
&gt; to patch util-linux. Mapping the 32 bytes hash to the 16 bytes
&gt; encryption key is done by xoring the two halves (diff attached).

I wish I had received this message sooner. I spent yesterday and today
coding my own implementation of SHA-256, SHA-384 and SHA-512.
Announcement follows shortly.

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010417054435</emailId><senderName>xcp</senderName><senderEmail>xcp@brewt.org</senderEmail><timestampReceived>2001-04-17 05:44:35-0400</timestampReceived><subject>problems making patched util-linux-2.11b</subject><body>

I am trying to make the patched utilities for the loopback encryption
according to the howto at sourceforge.  I'm using slackware-current with
gcc 2.95.3 and glibc-2.2.2, with a 2.4.3 kernel on a smp x86 box.

I have checked that /usr/include/linux and /usr/include/asm are symlinks to
include/linux and include/asm-i386.

Here is the output from ./configure after cleaning patching with the
latest patch:

configuring util-linux-2.11b

You have &lt;scsi/scsi.h&gt;
You have &lt;linux/blkpg.h&gt;
You have &lt;linux/kd.h&gt;
You have &lt;locale.h&gt;
You have &lt;langinfo.h&gt;
You have &lt;sys/user.h&gt;
You have &lt;asm/types.h&gt;
You have inet_aton()
You have fsync()
You have getdomainname()
You have nanosleep()
You have personality()
You have updwtmp()
You don't need &lt;linux/tqueue.h&gt;
You have &lt;term.h&gt;
You have ncurses. Using &lt;ncurses/curses.h&gt;.
You have termcap
You need -lcrypt
You have &lt;libintl.h&gt; and gettext()
Assuming that you want to enable NLS support.
(Otherwise, edit defines.h and remove the line with ENABLE_NLS)
You have __progname
You have &lt;pty.h&gt; and openpty()
You have wide character support
You have __NR_pivot_root
You have a tm_gmtoff field in struct tm
Your rpcgen seems to work

setproctitle.o builds normally, then when I cd to mount/ and try 'make
losetup mount umount' it barfs the following errors:

cc -c -O -pipe -O2 -m486 -fomit-frame-pointer -I../lib -Wall
-Wmissing-prototypes -Wstrict-prototypes -I/usr/include/ncurses -DNCH=0
-D_FILE_OFFSET_BITS=64 -DSBINDIR=\"/sbin\" -DUSRSBINDIR=\"/usr/sbin\"
-DLOGDIR=\"/var/log\" -DVARPATH=\"/var\" -DLOCALEDIR=\"/usr/share/locale\"
-DHAVE_NFS -DMAIN lomount.c -o main_losetup.o
lomount.c:34: loop.h: No such file or directory
lomount.c:99: warning: `struct loop_info' declared inside parameter list
lomount.c:99: warning: its scope is only this definition or declaration,
which is probably not what you want.
lomount.c:525: conflicting types for `set_loop'
lomount.h:3: previous declaration of `set_loop'
lomount.c: In function `name_to_id':
lomount.c:730: `crypt_type_tbl' undeclared (first use in this function)
lomount.c:730: (Each undeclared identifier is reported only once
lomount.c:730: for each function it appears in.)
lomount.c: In function `id_to_name':
lomount.c:743: `crypt_type_tbl' undeclared (first use in this function)
lomount.c: At top level:
lomount.c:99: warning: `set_loop_passwd' declared `static' but never
defined
lomount.c:694: warning: `get_cipher_info' defined but not used
lomount.c:726: warning: `name_to_id' defined but not used
lomount.c:740: warning: `id_to_name' defined but not used
make: *** [main_losetup.o] Error 1

Am I doing something wrong?  Does the 'You need -lcrypt' in the configure
step have anything to do with it, or does the 2.4 kernel just not work
with the loopback encryption yet?

Please cc me as I am not on the list.
Thank you.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010417131500</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-04-17 13:15:00-0400</timestampReceived><subject>Questions about new kernels</subject><body>

Current;y I run 2.2.18 with the international kernel crypto patch.

I won't be able to move to 2.4.x until MIT moves there this summer.

But I would like th security fixes in 2.2.19. So I want to ask about
the new 2.2.19 kernel.  Has anyone tested the patch on this yet?  Any
luck?

Also, Redhat has added NFS v3 along with its new stock 2.2.19 release.
Has anyone been adventurous enough to try adding crypto to that?

And in a final question, how compatible is a filesystem between 2.2.x
and 2.4.x?  ( With AES to be specific ).

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010420160044</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-04-20 16:00:44-0400</timestampReceived><subject>Re: problems with kerneli patch?</subject><body>

I've got a crypto loopback running directly on a /dev/md0
partition and then the file system on top of that. I'm
interested in what the feelings of others are on the
trade offs of doing it this way.

Is there something to be gained by adding a file system
layer between the /dev/md0 and the loopback file as far
as error recovery is concerned?

Do I actually gain performance (as I am guessing currently
that I do) by eliminating one layer?

It's just a plaything right now, but I'd be interested
in some feedback on the wisdom of it before I actually
use this on something important. So just to reiterated:

                               fs
	  fs                c. loopback
	c. loopback  vs        fs
	 raid1                raid1
	disk disk           disk disk

where fs = ext2 until this evening when I replace it
with reiserfs.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010421001203</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-21 00:12:03-0400</timestampReceived><subject>kernel 2.2 blowfish loopback not compatible with 2.4</subject><body>

blowfish loopback on 2.2 cannot be read back with 2.4, why?

on 2.4, 160bits keylength on blowfish doesn't seem to work, although
losetup lists it as a valid keylength.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010422125927</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-04-22 12:59:27-0400</timestampReceived><subject>Re: international crypto patch as non-kernel-patch...</subject><body>

On Sun, 22 Apr 2001, Andi Kleen wrote:
&gt; On Sun, Apr 22, 2001 at 07:50:48AM +0000, Andrew McGuinness wrote:
&gt; &gt; That's not quite right, is it?  2.2 had a compile-time CONFIG_ option to
&gt; &gt; use relative block numbers, which I thought most people used.
&gt; Check your facts.  The standard kernel hasn't.

patch-int-2.2.17.7 has got the CONFIG_BLK_DEV_LOOP_USE_REL_BLOCK which
passes relative block numbers as the IV, but patch-int-2.4.3.1 is
still completely unable to read blowfish crypto written in 2.2 with this
option enabled.

so it seems, the problem lies elsewhere.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010423162115</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-04-23 16:21:15-0400</timestampReceived><subject>Re: DELIVERY FAILURE: User Steven_Dodge</subject><body>

On Mon, 23 Apr 2001, Emil wrote:

&gt; Your message
&gt; 
&gt;   Subject: Self-destruct password
&gt; 
&gt; was not delivered to:
&gt; 
&gt;   Steven_Dodge@mta01.amdahl.com

OK, all Amdahl subscribers have been unsubscribed. If they
cannot even get their email system to correctly bounce to
the listmaster only ...

regards,

Rik
--
Virtual memory is like a game you can't win;
However, without VM there's truly nothing to lose...

		http://www.surriel.com/
http://www.conectiva.com/	http://distro.conectiva.com.br/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010424000223</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-04-24 00:02:23-0400</timestampReceived><subject>announce, cryptoapi-2.4.3-hvr5</subject><body>

hello again...

I've cleaned up a few things, since the -hvr4 release...

http://www.hvrlab.org/pub/crypto/cryptoapi-2.4.3-hvr5.tar.gz

greetings,
-- 
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010425145544</emailId><senderName>Ahmed Warsame</senderName><senderEmail>awarsame@bbm.ca</senderEmail><timestampReceived>2001-04-25 14:55:44-0400</timestampReceived><subject>NTOP for Redhat</subject><body>

I tried to install my Linux Redhat the Network Monitoring system call Ntop
and the following messages is what I am getting each time I execute make.

I thought Libpcap is what is needed and I installed but it did not help.

Can any body out there help me whit this.

The following is the message that I am receiving form the system
installations

Thanks

creating config.h
config.h is unchanged
make  all-recursive
make[1]: Entering directory `/etc/ntop/ntop-1.3.1'
Making all in gdchart0.94b
make[2]: Entering directory `/etc/ntop/ntop-1.3.1/gdchart0.94b'
cc -Igd1.3 -I. -g -c gdc.c
cc -Igd1.3 -I. -g -c gdchart.c
cc -g -c price_conv.c
cc -Igd1.3 -I. -g -c gdc_pie.c
cd gd1.3 ; make -f Makefile libgd.a
make[3]: Entering directory `/etc/ntop/ntop-1.3.1/gdchart0.94b/gd1.3'
cc -O   -c -o gd.o gd.c
cc -O   -c -o gdfontt.o gdfontt.c
cc -O   -c -o gdfonts.o gdfonts.c
cc -O   -c -o gdfontmb.o gdfontmb.c
cc -O   -c -o gdfontl.o gdfontl.c
cc -O   -c -o gdfontg.o gdfontg.c
rm -f libgd.a
ar rc libgd.a gd.o gdfontt.o gdfonts.o gdfontmb.o \
        gdfontl.o gdfontg.o
make[3]: Leaving directory `/etc/ntop/ntop-1.3.1/gdchart0.94b/gd1.3'
make[2]: Leaving directory `/etc/ntop/ntop-1.3.1/gdchart0.94b'
Making all in .
make[2]: Entering directory `/etc/ntop/ntop-1.3.1'
/bin/sh ./libtool --mode=compile gcc -DHAVE_CONFIG_H -I. -I./gdchart0.94b
-I/usr/include/pcap    -g -O2 -pipe -c admin.c
mkdir .libs
gcc -DHAVE_CONFIG_H -I. -I./gdchart0.94b -I/usr/include/pcap -g -O2 -pipe -c
admin.c  -fPIC -DPIC -o .libs/admin.lo
In file included from admin.c:23:
ntop.h:380: pcap.h: No such file or directory
In file included from admin.c:23:
ntop.h:465: field `h' has incomplete type
ntop.h:567: parse error before `pcap_t'
ntop.h:567: warning: no semicolon at end of struct or union
ntop.h:572: `filter' redeclared as different kind of symbol
/usr/include/ncurses.h:447: previous declaration of `filter'
ntop.h:655: parse error before `}'
ntop.h:655: warning: data definition has no type or storage class
ntop.h:1083: field `fcode' has incomplete type
ntop.h:1277: field `h' has incomplete type
In file included from ntop.h:1534,
                 from admin.c:23:
globals-core.h:38: parse error before `device'
globals-core.h:38: warning: data definition has no type or storage class
make[2]: *** [admin.lo] Error 1
make[2]: Leaving directory `/etc/ntop/ntop-1.3.1'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/etc/ntop/ntop-1.3.1'
make: *** [all-recursive-am] Error 2

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010427043046</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-04-27 04:30:46-0400</timestampReceived><subject>ADMIN:  spamfilter</subject><body>

Hi,

the new spamfilters on NL.linux.org seem to work well, but in
order to make them better I'll need your help on one small thing.

If you receive any spam, please forward it to  spam@nl.linux.org;
I'll take some "characteristic sentences" from the spam messages
and will add it to the spamfilter repository so none of those spams
will ever make it to the mailing lists.


In case you want to use the spamfilter repository for any of your
own sites, feel free to get it by anonymous CVS:

$ cvs -d :pserver:cvs@nl.linux.org:/home/CVS login
password: cvs
$ cvs -d :pserver:cvs@nl.linux.org:/home/CVS checkout spamfilter

Currently it only implements automatic rebuilding of majordomo.cf,
but scripts to do filtering for procmail and other programs are
very much appreciated ;)


Spam bait address:  aardvark@nl.linux.org
(early in alphabet, nice little spam-digging piggy)

regards,

Rik
--
Virtual memory is like a game you can't win;
However, without VM there's truly nothing to lose...

http://www.surriel.com/		http://distro.conectiva.com/

Send all your spam to aardvark@nl.linux.org (spam digging piggy)




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010427071926</emailId><senderName>Andrew McGuinness</senderName><senderEmail>andrew_mcguinness@bigfoot.com</senderEmail><timestampReceived>2001-04-27 07:19:26-0400</timestampReceived><subject>Re: Announce: cryptoapi-2.4.3 [aka international crypto (non-)patch]</subject><body>

Quoting Herbert Valerio Riedel &lt;hvr@hvrlab.org&gt;:

&gt; hello!
&gt; 
&gt; On Thu, 26 Apr 2001, Jari Ruusu wrote:
&gt; &gt; Herbert Valerio Riedel wrote:
&gt; &gt; &gt; On Tue, 24 Apr 2001, Jari Ruusu wrote:
&gt; &gt; &gt; it should have been more or less:
&gt; &gt; &gt;
&gt; &gt; &gt; unsigned long IV = loop_get_iv(lo,
&gt; &gt; &gt;   page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
&gt; &gt; &gt;   + (offset - lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS));
&gt; &gt; I hope not exactly like that. What happens when "lo-&gt;lo_offset" is
&gt; larger
&gt; &gt; than "offset". Oops. Besides, the + operator takes precedence over the
&gt; &gt;&gt;
&gt; &gt; operator on the third line.
&gt; ...you are right again :-)
&gt; 
&gt; do you have any objections about...
&gt; 
&gt; unsigned long IV = loop_get_iv(lo,
&gt;    page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; LO_IV_SECTOR_BITS)
&gt;    + (offset &gt;&gt; LO_IV_SECTOR_BITS)
&gt;    - (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS));
&gt; 
&gt; 
&gt; ...then? ;-)
&gt; 
&gt; the assumption is, offset % LO_IV_SECTOR_BITS == 0
&gt; this calculation may overflow anyway... for file sizes around terabytes
&gt; or
&gt; so I guess... but another thing is, that every IV calculation should
&gt; overflow at the same boundary... since it's just an IV value...
&gt; 
&gt; (maybe that calculation should be done in a 64bit domain anyway)
&gt; 
&gt; &gt; Have you ever observed the sizes of the transfer requests? The sizes
&gt; of
&gt; &gt; transfer requests change on the fly (and I'm not not talking about the
&gt; last
&gt; &gt; partial block of a file). Meaning, any IV computation that depends on
&gt; the
&gt; &gt; block size of a filesystem, is broken and must die! We do not have an
&gt; option
&gt; &gt; here.
&gt; I know that issue, I've already pointed that out some time ago, but
&gt; there
&gt; are compatibility problems as well, at first I thought the international
&gt; crypto patch was the only filter to make use of that IV, but then I
&gt; learned there were a few others as well...
&gt; (btw, the int crypto patch had the compatibility option for absolute
&gt; block
&gt; numbers for quite some time too... just for the sake of
&gt; compatibility...)
&gt; 
&gt; and btw, many people seem to be quite happy with their non-512 based IV
&gt; encrypted volumes... so why forcing them to switch?
&gt; 
&gt; btw, depending on the filesystem using the loop device, and the
&gt; underlying
&gt; file or device, the transfer requests size may be constant... e.g. at 4k
&gt; blocks... but other filesystems, such as XFS do have different sections
&gt; with different blocksizes... they clearly break things...
&gt; 
&gt; breaking up transfers into 512 bytes _everytime_ isn't a solution
&gt; either... it is unefficient, especially for filters not making use of
&gt; the
&gt; IV at all...
&gt; 

It would help the compatibility if there were a conversion program for old
volumes to the new style.  I was going to try writing one, but I don't think
you can call the international crypto patch functions from a user-space 
program.  Would it be possible to put ifdefs in the code so you could compile
the transfer functions as user space functions?

--
Andrew McGuinness     Luton, UK        andrew_mcguinness@bigfoot.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010427152047</emailId><senderName>Robert Varga</senderName><senderEmail>nite@hq.alert.sk</senderEmail><timestampReceived>2001-04-27 15:20:47-0400</timestampReceived><subject>Re: Self-destruct password</subject><body>

On Mon, Apr 23, 2001 at 07:48:13AM -0400, Emil wrote:
&gt; Has anyone though of adding a second password to the encryption
&gt; mechanism that will wipe clean the whole partition/file ?
&gt; 
&gt; In this way if someone forces you to give him the password to
&gt; access your private data you can provide him the self-destruct
&gt; password instead. He won't be able to tell which is the
&gt; right password until he tries it and then it will be to late.

Great idea, yet can you make sure the attacker enters the key to your
vanilla utilities and not to his/hers modified ones ? 'Cause those need only
to check the phrase, not erase the data.

Your idea would work in a situation when the attacker knows little to
nothing about the way you protect your data (e.g. he sits in front of "Enter
password" prompt)

-- 
Kind regards,
Robert Varga
------------------------------------------------------------------------------
n@hq.sk                                          http://hq.sk/~nite/gpgkey.txt
 

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010428221531</emailId><senderName></senderName><senderEmail>bzf</senderEmail><timestampReceived>2001-04-28 22:15:31-0400</timestampReceived><subject></subject><body>

patch 2.4.3.1
Hi,
I have two small problems:
- I can't find  option
CONFIG_BLK_DEV_LOOP_USE_REL_BLOCKS (use rel. block 
numbers)
in patch version 2.4.*. It was in all patches to  2.2.*.
It isn't needed in new versions of kernel (I'm trying 2.4.4)?

-cipher-serpent.c: In function `serpent_set_key':
cipher-serpent.c:468: warning: suggest parentheses around 
arithmetic in operand of |
In file included from digest-md5.c:16:
md5c.c:149: warning: static declaration for `MD5Init' follows non-
static
md5c.c:166: warning: static declaration for `MD5Update' follows 
non-static
md5c.c:206: warning: static declaration for `MD5Final' follows non-
static


Thanks a lot
BzF

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010305210843</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-03-05 21:08:43-0400</timestampReceived><subject>Re: Loading secure binaries?</subject><body>

On Mon, 26 Feb 2001, Ian S. Nelson wrote:

&gt; I'm working on an embedded Linux project and the issue of security is
&gt; starting to surface and it's beginning to look kind of interesting.
&gt;
&gt; Is there any plans with Linux-crypto or some other project that somebody
&gt; knows of to allow the loading of secure binaries?

This have been discussed here earlier, and I do not think there are
any such plans. Before any such scheme is implemented, it's allways
important to consider what they are meant to protect against. More on
this later.

&gt;
&gt; I was thinking of a scheme like this:
&gt;
&gt;     there would be a new linux executable loader, perhaps one of the
&gt; misc binary loaders or an ELF hack, you'd want it to reside inside the
&gt; kernel though.
&gt;
&gt;     Then add a new system call to provide a key to the kernel.  This
&gt; could be pulled down off the internet or out of a secure piece of
&gt; hardware.  In some applications it could be something the user provides
&gt; at login time.
&gt;
&gt;     Then the new binaries would be AES/IDEA/DES encrypted with that key
&gt; and the new loader would use that key to decrypt them at load time.

It's a bit unclear what you want to protect against. Some threats i
can think about for networked embedded systems is:

- The binaries/data are transefered/updated via the network, and
  an attacker should not be able to steal data or programs by
  listening to the network, or being a man in the middle. This
  is best protected by SSL, SSH or some other network encryption
  protocol.

- Prevent people with physical access to the device to get any
  unautorized access. This could also be archived by disk encryption.
  This is already done in the kernel for whole partitions.
  A filesystem with one key per user (or anything similar) would be
  more direct on the target, but is it necessary.

- Prevent intruders from executing malicious code. A signing/verification
  scheme will be the right thing to in that case. Possibly combined with
  disk encryption.

In some case, a scheme like the one I think you describes will be usefull.
It's known that attackes have got unathorised access to systems by
replacing modules by their own, that can give permanent root acces,
backdors etc. This scheme requires somebody to accept each and every
executable/module to be executed on the system. This is in practice
awkward executables on a workstation, but for systems where the number of
executable is more controllable, like for embedded systems or kernel
modules, it's archivable.

&gt; Anybody know of something like this?  A logical extension would be to
&gt; embed GPG into the kernel and then you could execute signed and
&gt; encrypted binaries but that seems like overkill for what we're doing, we
&gt; just don't want a few key pieces of code to ever be decrypted anywhere
&gt; other than SDRAM.

Not the whole of GPG, but such a scheme require asymetric crypto to be
inserted into the kernel, and it will require some work, but it's
absolutly archivable, the question is whether it will make systems so much
more secure that it's worth the effort.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010307200853</emailId><senderName>Andrew McDonald</senderName><senderEmail>andrew@mcdonald.org.uk</senderEmail><timestampReceived>2001-03-07 20:08:53-0400</timestampReceived><subject>Re: what is this ?</subject><body>

On Wed, Mar 07, 2001 at 01:42:30PM +0100, Morbid Angel wrote:
&gt; 
&gt; what is cipher-18 ?
&gt; 
&gt; all works fine but i get a error msg : cant locate module cipher-18,
&gt; what do i have forgotten ?)
&gt; Kernel 2.2.18

You need the appropriate aliases in your /etc/modules.conf file.
Cipher 18 is AES, for which you probably want:
alias cipher-18 rijndael

This allows modprobe to automatically load the required module.

The crypto patch for 2.4.x uses a different method, which avoids the
need for these aliases.


Andrew
-- 
Andrew McDonald
E-mail: andrew@mcdonald.org.uk
http://www.mcdonald.org.uk/andrew/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010308193332</emailId><senderName>Roman Drahtmueller</senderName><senderEmail>draht@suse.de</senderEmail><timestampReceived>2001-03-08 19:33:32-0400</timestampReceived><subject>Re: still problems with SuSE 2.2.18 Kernel + patch.int.2.2.18.3</subject><body>

&gt; &gt; Hi !
&gt; &gt;
&gt; &gt; If i patch the Suse 2.2.18 Kernel with the Patch.int.2.2.18.3 i get this
&gt; &gt; errors :
&gt; &gt;
&gt;
&gt; Probably because SuSE have modified the kernel the delivers with their
&gt; distro, and did it in a way that is incompatible with the kerneli, i.e
&gt; modified it on a place kerneli modifies it as well. If you try the
&gt; standard kernel from kernel.org, things should work fine.

There are indeed changes in the SuSE kernels, mainly additional drivers
(which are not contained in the mainstream kernel) as well as newer
drivers and last-minute bugfixes. It is very well possible that some small
things need to be patched by hand for the thing to succeed.

Anyway, we're working on integrating the kerneli patches to our
distribution kernel.


Thanks,
Roman.
-- 
 -                                                                      -
| Roman Drahtm√ºller      &lt;draht@suse.de&gt; //          "Caution: Cape does |
  SuSE GmbH - Security           Phone: //       not enable user to fly."
| N√ºrnberg, Germany     +49-911-740530 // (Batman Costume warning label) |
 -                                                                      -


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010309121200</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-03-09 12:12:00-0400</timestampReceived><subject>Re: "clean" 2.2.18 src and still problems !!! :((</subject><body>

Morbid Angel wrote:
&lt;snip&gt; 
&gt; (patch-int-2.2.18.3)
&lt;snip&gt;
&gt; 1. if i do losetup -e idea /dev/loop0 /mycryptofile it asks for the keysize
&lt;snip&gt;

This cannot be. To the best of my knowledge, 2.2.18.3 does not ask for
the keysize. You are using 2.2.18.4pre, or you have patched util-linux
with the patch from 2.2.18.4pre.

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010309135954</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-03-09 13:59:54-0400</timestampReceived><subject>Re: Still seeing large file problem</subject><body>

I might also add to my previously posted data that tar
and other apps are accessing large files with no problem.
It's only the code I'm compiling on the machine, ie
like losetup with the crypt patches (from which that little
test prog was lifted near verbatim) that seem to be having
the problem.

Difficult to make any progress working on the loopback
problem until I've got this sorted. Any help or ideas would
be much appreciated.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010309151627</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-09 15:16:27-0400</timestampReceived><subject>hmmm problems with patch for util-linux</subject><body>

hmmm i tryied to patch util-linux (one more time clean sources)

but after this: 

user$ ./configure
user$ make -C lib setproctitle.o

i got this error msg's :

make: Entering directory `user/src/util-linux-2.10o/lib'
Makefile:1 : ../make_include: No such file or directory
make: *** No rule to make target `../make_include'. Stop.
make: Leaving directory `/usr/src/util-linux-2.10o/lib'


why ?


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010310110750</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-10 11:07:50-0400</timestampReceived><subject>still problems</subject><body>

hmmm the other error it was my mistake

but now i have problems with make mount (make losetup and umount works fine)

i get this :

cc -c -O -pipe -O2 -m486 -fomit-frame-pointer -I../lib -Wall -Wmissing-proto
types -Wstrict-prototypes -DNCH=1  -DSBINDIR=\"/sbin\" -DUSRSBINDIR=\"/usr/s
bin\" -DLOGDIR=\"/var/log\" -DVARPATH=\"/var\" -DLOCALEDIR=\"/usr/share/loca
le\" -DHAVE_NFS nfsmount.c
nfsmount.c: In function `nfsmount':
nfsmount.c:647: `NFS_FHSIZE' undeclared (first use in this function)
nfsmount.c:647: (Each undeclared identifier is reported only once
nfsmount.c:647: for each function it appears in.)
nfsmount.c:665: warning: unreachable code at beginning of switch statement
nfsmount.c:699: `NFS_PORT' undeclared (first use in this function)
make: *** [nfsmount.o] Error 1

what can i do ?


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010327090351</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-03-27 09:03:51-0400</timestampReceived><subject>Re: problems with kerneli patch?</subject><body>

Marc Mutz wrote:
&gt; 
&gt; Robert Varga wrote:
&gt; &gt;
&gt; &lt;snip&gt;
&gt; &gt; Could somebody summarize the known problems and wether they are being worked
&gt; &gt; on? If not, I could take a look at them.
&gt; &lt;snip&gt;
&gt; 
&gt; Do you mean conceptional or implementation-dependent?
&gt; 
&gt; For the first, a starting point would be - of course - Applied
&gt; Cryptography by B. Schneier. There is quite an extensive references
&gt; section there, but the book is now more than six years old.
&gt; 
&gt; For the second, here's a list of bug/inconvenients for the linux
&gt; loopback device crypto and the cryptoapi, as far as i know and recall
&gt; them:
&gt; 
&gt; - 2G limit in the loopback device
&gt;   (2.2+2.4, axboe maybe has a patch for 2.4?)
&gt; - deadlocks in the loopback device
&gt;   (2.4, axboe has a patch)
&gt; - blowfish (and other ciphers) have endian-issues (2.2+2.4)
&gt;   This is mostly because
&gt;   a. no-one has really defined what the ciphers should
&gt;      return and accept (cryptoapi)
&gt;   b. the authors of ciphers often did not pay attention
&gt;      themselves
&gt;   c. no-one has tested the ciphers (due to a.)
&gt; - blowfish (and others) have a problem with demand-module
&gt;   loading (2.2.18.4pre+2.4)
&gt; 
&gt; For the third point: Alex, Gisle, should we define the input and output
&gt; of *_{en,de}crypt functions to expect/provide an octet stream? Then all
&gt; endian issues (except bit-endianess, which is a non-issue on platforms
&gt; Linux runs on) go away. One then has to check (like Brian Gladman did in
&gt; his paper on the subject he submitted to the AES comments last year) the
&gt; papers and check the implementations in the kernel against that.
&gt; 
&gt; Additions to this list are welcome.

There is no 2G loopback limit on Andrea Arcangeli's kernel 2.2.18aa2. See
below. The TripleDES cipher stuff is my own (no international crypto patch
applied), but it makes no difference in my opinion.


ace486:/root/tt7 # dd if=/dev/zero of=zz1 bs=1024 count=6291456
6291456+0 records in
6291456+0 records out
ace486:/root/tt7 # ls -l
total 6297612
-rw-r--r--    1 root     root     6442450944 Mar 27 09:07 zz1
ace486:/root/tt7 # losetup -e TripleDES /dev/loop3 zz1
Password: 
ace486:/root/tt7 # mkfs -t ext2 /dev/loop3
mke2fs 1.18, 11-Nov-1999 for EXT2 FS 0.5b, 95/08/09
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
786432 inodes, 1572864 blocks
78643 blocks (5.00%) reserved for the super user
First data block=0
48 block groups
32768 blocks per group, 32768 fragments per group
16384 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736

Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done
ace486:/root/tt7 # mount -t ext2 /dev/loop3 /mnt2
ace486:/root/tt7 # ls -l ../big1
-rw-r--r--    1 root     root     1385140224 Mar 25 19:58 ../big1
ace486:/root/tt7 # df /mnt2
Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/loop3             6192704        20   5878112   0% /mnt2
ace486:/root/tt7 # cat ../big1 ../big1 ../big1 ../big1 &gt;/mnt2/zz2
ace486:/root/tt7 # ls -l /mnt2
total 5416016
drwxr-xr-x    2 root     root        16384 Mar 27 09:09 lost+found
-rw-r--r--    1 root     root     5540560896 Mar 27 10:19 zz2
ace486:/root/tt7 # umount /mnt2
ace486:/root/tt7 # losetup -d /dev/loop3
ace486:/root/tt7 # losetup -e TripleDES /dev/loop2 zz1
Password: 
ace486:/root/tt7 # mount -t ext2 /dev/loop2 /mnt2
ace486:/root/tt7 # ls -l /mnt2
total 5416016
drwxr-xr-x    2 root     root        16384 Mar 27 09:09 lost+found
-rw-r--r--    1 root     root     5540560896 Mar 27 10:19 zz2
ace486:/root/tt7 # cat /mnt2/zz2 | md5sum
2c5cc22dd03c527fe1e8136d0fa0bd89
ace486:/root/tt7 # cat ../big1 ../big1 ../big1 ../big1 | md5sum
2c5cc22dd03c527fe1e8136d0fa0bd89
ace486:/root/tt7 # df /mnt2
Filesystem           1k-blocks      Used Available Use% Mounted on
/dev/loop2             6192704   5416020    462112  92% /mnt2
ace486:/root/tt7 # uname -a
Linux ace486 2.2.18aa2 #1 Fri Feb 9 21:13:56 EET 2001 i686 unknown


Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010330151837</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-03-30 15:18:37-0400</timestampReceived><subject>Re: problems with 2.4.0 kernal and int patch</subject><body>

On Sun, Mar 25, 2001 at 09:35:13PM +0200, Gisle S{lensminde wrote:
&gt; mount DVD images on harddisk. I think Jens Axboe is working on the
&gt; problem, and have a patch for it. (But I as far as I know he don't
&gt; subscribe to this list)
&gt; 
&gt; http://www.kernel.org/pub/linux/kernel/people/axboe/patches/
&gt; 

I presume you mean the loop7 patch against 2.4.3pre1?

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010331171210</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@gnu.org</senderEmail><timestampReceived>2001-03-31 17:12:10-0400</timestampReceived><subject>...unofficial 2.4.3 int patch...</subject><body>

hello,

...since I was quite bored, I've put up a patch, which should apply
cleanly to the 2.4.3final linux kernel source...

..this patch also contains Christoph's cleanups that went over this list
some time ago....

I've tried to fix the blowfish cipher bug, by checking if the keysize
is among the supported ones exported through /proc/crypto/blowfish*

I haven't been able to test compatibility with old encrypted images,
since this is the first 2.4. kernel which seems to have fixed that
nasty loopback deadlock thingy...

http://www.hvrlab.org/pub/crypto/patch-2.4.3int-0.gz

--
Herbert Valerio Riedel      /     Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: AC2A CD57 A5C8 A1CB 0A18  DA95 CB0B DB23 60B6 16F5


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010201141857</emailId><senderName>Dejan Muhamedagic</senderName><senderEmail>dejan@xsoft.at</senderEmail><timestampReceived>2001-02-01 14:18:57-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Hello,

I've put together a tiny script to check ciphers.  On my box only
blowfish and rc6 make the losetup segfault.  You'll find the
script attached.  It has not been thoroughly tested but it should
be OK.

Michael Driscoll reported that he can use the cipher after it has
been insmod-ed.  It is not the case here:  it doesn't matter if I
do an insmod first or not, losetup always segfaults when trying to
initialize the modules.  I also pinpointed the same ioctl where
losetup segfaults:

lomount.c:362:       (void) ioctl (fd, LOOP_SET_STATUS, loopinfo);

On Wed, Jan 31, 2001 at 05:13:21PM +0000, Marc Mutz wrote:
&gt; Dejan Muhamedagic wrote:
&gt; &gt; 
&gt; &gt; I'll try to clarify:
&gt; &gt; 
&gt; &gt; 1.  It is a segfault (in losetup).  No oopses.
&gt; &gt; 
&gt; 
&gt; I had that, too. When trying to losetup in 2.2.18.4pre1, which uses the
&gt; same techniques as 2.4.x.y. I was also using Blowfish.

Well, I'm not sure whether this is an oops too or not.  It does
occur in the kernel space, but it doesn't say Oops :)  Can
somebody clarify on the terminology which should be used?

&gt; &gt; 2.  The kernel (2.4.0) seems to be OK.  loop devices work fine.
&gt; 
&gt; Don't you see the loop device hangs reported by other people? Or do you
&gt; have Jens Axboe's loop-3 patch applied?

Loop devices work fine here.  I have no idea about the patch
though.  The utils are stock util-linux-2.10o (i.e. from
ftp.kernel.org) with the crypto patch applied.

&gt; &gt; 4.  All ciphers are compiled as modules.
&gt; 
&gt; dto.
&gt; 
&gt; &gt; So, I can switch to IDEA.  Is it advisable to use this cipher in a
&gt; &gt; production?  Any reports about its stability?  About the
&gt; &gt; international patch?  Or should I stay put with the v2.2.x kernels
&gt; &gt; for the time being?
&gt; &lt;snip&gt; 
&gt; 
&gt; You should try to use serpent. You can use it free of charge (unlike
&gt; IDEA, for which you must pay royalties if used commercially).

Thanks.  I'll give it a try.

&gt; Also, if someone out there could test through the ciphers and check
&gt; which of them make losetup segfault, this would be much appreciated. I'm
&gt; still stuck w/ 2.2.x, but will reboot into 2.2.18.4pre1 and strace
&gt; losetup.

Here are my results:

kernel: 2.4.0
intpatch: 2.4.0.3
utils: 2.10o
libc6: 2.2 (debian v2.2-6)

hobbes:~# ./testcrypto 
start testing aes
Password :
Password :
end testing aes
start testing blowfish
./testcrypto: line 14:  2066 Segmentation fault      losetup -k 128 -e $crypto $loopdev crypto.fs
oopsie
start testing dfc
Password :
Password :
end testing dfc
start testing idea
Password :
Password :
end testing idea
start testing mars
Password :
Password :
end testing mars
start testing rc5
Password :
Password :
end testing rc5
start testing rc6
./testcrypto: line 14:  2176 Segmentation fault      losetup -k 128 -e $crypto $loopdev crypto.fs
oopsie
start testing serpent
Password :
Password :
end testing serpent
start testing twofish
Password :
Password :
end testing twofish

I'd advise rebooting after running the script.

Cheers.

Dejan

-- 
Dejan Muhamedagic                      mailto:dejan@xsoft.at
Xsoft GmbH                               http://www.xsoft.at
Modecenterstr. 14, 1030 Vienna, Austria    +43 1 7963636 676


#
LOOPDEVS="0 1 2 3 4 5 6"
function getloopdev {
	for i in $LOOPDEVS; do
		if losetup /dev/loop$i 2&gt;&amp;1 | grep -qs "No such device"; then
			echo /dev/loop$i
			return
		fi
	done
}

function testcr {
	[ ! -f crypto.fs -o ! -f secret.md5 ] &amp;&amp; {
		echo please create secret.md5 and/or crypto.fs
		echo secret.md5: data used for testing
		echo crypto.fs: a container-file for the filesystem
		return
	}
	crypto=$1
	loopdev=`getloopdev`
	[ -z "$loopdev" ] &amp;&amp; {
		echo &gt;&amp;2 sorry, no loop devices available
		return
	}
	echo start testing $crypto
	losetup -k 128 -e $crypto $loopdev crypto.fs
	if [ $? -ne 0 ]; then
		echo oopsie; return
	fi
	mke2fs $loopdev &gt;/dev/null 2&gt;&amp;1
	mount $loopdev /mnt
	cp secret.md5 /mnt
	umount /mnt
	losetup -d $loopdev
	if [ $? -ne 0 ]; then
		echo oopsie
		return
	fi
	losetup -k 128 -e $crypto $loopdev crypto.fs
	if [ $? -ne 0 ]; then
		echo oopsie
		return
	fi
	mount $loopdev /mnt
	cmp secret.md5 /mnt/secret.md5
	umount /mnt
	losetup -d $loopdev
	echo end testing $crypto
}
[ ! -f crypto.fs ] &amp;&amp; {
	dd if=/dev/zero of=crypto.fs bs=1k count=256 || {
		echo sorry, not able to create crypto.fs
		exit
	}
}
testcr aes
testcr blowfish
testcr dfc
testcr idea
testcr mars
testcr rc5
testcr rc6
testcr serpent
testcr twofish

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010208010208</emailId><senderName>Billy Harvey</senderName><senderEmail>billy.harvey@thrillseeker.net</senderEmail><timestampReceived>2001-02-08 01:02:08-0400</timestampReceived><subject>Re: 2.4.1-ac5 - The loopback hang saga continues</subject><body>

 &gt; It appears that the loopback-hang parasite is alive and well in 2.4.1-ac5.
 &gt; I've done several tests and I thus provide the following information:
 &gt; 
 &gt; The bug is independent of UP or SMP configured.. it hung both ways, but the
 &gt; box itself is UP.
 &gt; 
 &gt; It appears to hang when internal buffers get filled. The way I see it, copying
 &gt; files from disk to the loopback device (which is a file on the same disk)
 &gt; begins to read from the disk. When the internal read buffer is full, the
 &gt; kernel's queued writes start activating and the data gets copied to the
 &gt; loopback file. This process repeats over and over, as it should normally.
 &gt; 
 &gt; Sometimes however, during a read from the disk, it fills up its buffers and
 &gt; then never makes the accompanying write. In fact, the entire device freezes on
 &gt; the read.
 &gt; 
 &gt; I was able to lessen the frequency of hanging by using the -v flag and tapping
 &gt; ^S and ^Q to temporarily 'pause' copying. This ensures that the read buffer
 &gt; will never become full to the point where it could cause the hang, and appears
 &gt; to work -- until it came across the libc.a file. There was no way to pause it
 &gt; here because nothing is being outputted to the screen while it's copying
 &gt; libc.a. Unfortunately, it fills the buffer too quick and hangs 100% every time.
 &gt; The disk is totally nonresponsive at this point, and a hard reset is necessary.
 &gt; 
 &gt; I hope this helps anyone who is still tracking down the loopback problem.
 &gt; 
 &gt; Regards,
 &gt;  Byron
 &gt; 
 &gt; -- 
 &gt; Byron Stanoszek                         Ph: (330) 644-3059

I can confirm this.  The system totally locks when this occurs.  I let
it sit all night when it did this the last time, and it didn't
recover.

It requires a large file transfer to usually invoke it.

Billy

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010208050349</emailId><senderName>Dejan Muhamedagic</senderName><senderEmail>dejan@xsoft.at</senderEmail><timestampReceived>2001-02-08 05:03:49-0400</timestampReceived><subject>Re: 2.4.1-ac5 - The loopback hang saga continues (not me ?)</subject><body>

The same here.  I have had no problems with either 2.4.0 or 2.4.1,
and I don't even have the Axboe's patch applied.  Which makes me
wonder where is the problem.

I am also using encryption (patch-int-2.4.0.3, idea cipher) and
util-linux-2.10o.  The container file is not as big, only 256MB
with 65MB of data, and the largest file is ~30MB.  I had to
convert from the blowfish and used dump|restore.  There were no
problems whatsoever.

Dejan

On Thu, Feb 08, 2001 at 03:48:34AM +0100, Pascal Brisset wrote:
&gt; FYI following hints from the linux-crypto mailing-list archives, I am
&gt; using the following configuration :
&gt; 
&gt; linux-2.4.0
&gt; patch-int-2.4.0.3
&gt; http://www.kernel.org/pub/linux/kernel/people/axboe/patches/2.4.0/loop-1.gz
&gt; http://www.kernel.org/pub/linux/kernel/people/axboe/patches/2.4.0/loop-bdev-inc-1.gz
&gt; util-linux-2.10o
&gt; Documentation/crypto/util-linux-2.10o.patch
&gt; 
&gt; I setup an encrypted 2097152000 byte loopback partition and moved
&gt; 800MB of data there, including a 90MB file.
&gt; 
&gt; My only problems are:
&gt; - rc.d/init.d/S01reboot sometimes fails to unmount partitions with
&gt;   loop files on them (this already happened with 2.2.17).
&gt; - losetup after losetup -d sometimes fails.
&gt; 
&gt; -- Pascal
&gt; 
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010209002620</emailId><senderName>Olaf Titz</senderName><senderEmail>olaf@bigred.inka.de</senderEmail><timestampReceived>2001-02-09 00:26:20-0400</timestampReceived><subject>Endianness issues in Blowfish and IDEA</subject><body>

I'm developing a version of CIPE which will use the modular crypto
API. From my first interoperability tests, it looks like both the
Blowfish and the IDEA modules in the current international kernel get
endian-ness in their encryption functions wrong.

CIPE historically uses Blowfish in little-endian mode. With that I
mean that the plaintext/ciphertext blocks are assumed to consist of
two 32-bit units which are fetched and stored in little-endian order.[1]
This was a result of a misunderstanding and following coding error on
my part, and it has been preserved for compatibility - I now use a
Blowfish implementation which gives the choice of little and big
endian mode and CIPE uses the little-endian one.

This means it can not talk to a regular Blowfish which by the spec
is big-endian. But it does talk to the crypto API cipher-blowfish
module, so the latter looks to me to be against the spec. Indeed, the
blowfish_encrypt routine in cipher-blowfish.c converts its data like
this:

input is const u8 *in8
this is assigned to u32 *in_blk = (u32 *)in8;
the rounds have this assignment
        yl = *(in_blk++);
        yr = *(in_blk++);
The internal variables yl, yr are supposed to be in native byte order.
Because the input is assumed to big endian, here the canonicalization
is missing. This is the same error I made with my Blowfish and I
suspect/fear it is rather common in other implementations.[2]

I know well what the author meant by the comment "This function
mustn't respect endianness", because I once ran into the same trap ;-)
Nevertheless, it is not correct. The code as it is assumes native byte
order for the plaintext/ciphertext blocks and thus will not
interoperate between big-endian and little-endian hosts.

Another problem appears to exist in the cipher-idea module: the
ideaCipher function explicitly swaps bytes in the input for
non-little-endian hosts (#ifndef LITTLE_ENDIAN_HOST), iow.
canonicalizes to little-endian, which is just the wrong direction.
This has to be a coding mistake, as even the comment at the head of
the file talks about big-endianness.

Other implementations of IDEA (e.g. the one found in OpenSSL, see the
file crypto/idea/idea_lcl.h) seem to agree with me[3] that IDEA is
assumed big-endian, too. This means the code will interoperate with
itself on any host, but not with other IDEA implementations.

As long as this is only used for encrypted file systems,
interoperability is not that vital, but for networking this will have
to be fixed somehow.

Olaf

[1] or in other words, the Blowfish encrypt routine has an initial and
final permutation of the bytes 01234567 -&gt; 32107654.

[2] OpenSSL does it right, although the code is extremely non-obvious.

[3] It is nowhere explicitly specified, but the reference
implementation I adapted for CIPE has ntohs conversions.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010213002957</emailId><senderName>Christoph Hellwig</senderName><senderEmail>hch@caldera.de</senderEmail><timestampReceived>2001-02-13 00:29:57-0400</timestampReceived><subject>[PATCH] cleanups for patch-int-2.4.0-3</subject><body>

Hi Astor,

this patch moves all the initialization for the kerneli-patch
to the newstyle module_{init,exit} version.  It does also work
for 2.2.18, the most recent Linux 2.2 version, so I don't think
it causes branching headaches.  Once requiring 2.2.18 one proc
support function in cryptoapi.c can also be removed.

	Christoph

-- 
Of course it doesn't work. We've performed a software upgrade.


diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-aes.c \
                linux/crypto/cipher-aes.c
--- linux-2.4.2-pre3/crypto/cipher-aes.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-aes.c	Sun Feb 11 23:52:37 2001
@@ -424,11 +424,7 @@
 struct cipher_implementation aes_cbc;
 
 
-#ifdef MODULE
-	int __init init_module(void)
-#else
-	int __init init_rijndael(void)
-#endif
+static int __init init_rijndael(void)
 {
         gen_tabs();
 	memcpy(&amp;aes_ecb, &amp;rijndael_ecb, sizeof(struct cipher_implementation));
@@ -449,8 +445,7 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_rijndael(void)
 {
 #ifdef CONFIG_CIPHER_RIJNDAEL
 	if (unregister_cipher(&amp;rijndael_ecb))
@@ -463,5 +458,6 @@
 	if (unregister_cipher(&amp;aes_cbc))
 		printk(KERN_WARNING "Couldn't unregister aes-cbc encryption\n");
 }
-#endif
 
+module_init(init_rijndael);
+module_exit(cleanup_rijndael);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-blowfish.c \
                linux/crypto/cipher-blowfish.c
--- linux-2.4.2-pre3/crypto/cipher-blowfish.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-blowfish.c	Sun Feb 11 23:53:19 2001
@@ -491,11 +491,7 @@
 	INIT_CIPHER_OPS(blowfish)
 };
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_blowfish(void)
-#endif
+static int __init init_blowfish(void)
 {
     if (register_cipher(&amp;blowfish_ecb))
         printk(KERN_WARNING "Couldn't register blowfish-ecb encryption\n");
@@ -505,12 +501,13 @@
     return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_blowfish(void)
 {
 	if (unregister_cipher(&amp;blowfish_ecb))
 		printk(KERN_WARNING "Couldn't unregister blowfish-ecb encryption\n");
 	if (unregister_cipher(&amp;blowfish_cbc))
 		printk(KERN_WARNING "Couldn't unregister blowfish-cbc encryption\n");
 }
-#endif
+
+module_init(init_blowfish);
+module_exit(cleanup_blowfish);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-des-ede3.c \
                linux/crypto/cipher-des-ede3.c
--- linux-2.4.2-pre3/crypto/cipher-des-ede3.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-des-ede3.c	Mon Feb 12 00:42:32 2001
@@ -1303,11 +1303,7 @@
 	INIT_CIPHER_OPS(des_ede3)
 };
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_des_ede3(void)
-#endif
+static int __init init_des_ede3(void)
 {
     if (register_cipher(&amp;des_ede3_ecb))
         printk(KERN_WARNING "Couldn't register des_ede3-ecb encryption\n");
@@ -1317,12 +1313,13 @@
     return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_des_ede3(void)
 {
 	if (unregister_cipher(&amp;des_ede3_ecb))
 		printk(KERN_WARNING "Couldn't unregister des_ede3-ecb encryption\n");
 	if (unregister_cipher(&amp;des_ede3_cbc))
 		printk(KERN_WARNING "Couldn't unregister des_ede3-cbc encryption\n");
 }
-#endif
+
+module_init(init_des_ede3);
+module_exit(cleanup_des_ede3);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-des.c \
                linux/crypto/cipher-des.c
--- linux-2.4.2-pre3/crypto/cipher-des.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-des.c	Sun Feb 11 23:54:40 2001
@@ -1216,11 +1216,7 @@
 	INIT_CIPHER_OPS(des)
 };
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_des(void)
-#endif
+static int __init init_des(void)
 {
     if (register_cipher(&amp;des_ecb))
         printk(KERN_WARNING "Couldn't register des-ecb encryption\n");
@@ -1230,12 +1226,13 @@
     return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_des(void)
 {
 	if (unregister_cipher(&amp;des_ecb))
 		printk(KERN_WARNING "Couldn't unregister des-ecb encryption\n");
 	if (unregister_cipher(&amp;des_cbc))
 		printk(KERN_WARNING "Couldn't unregister des-cbc encryption\n");
 }
-#endif
+
+module_init(init_des);
+module_exit(cleanup_des);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-dfc.c \
                linux/crypto/cipher-dfc.c
--- linux-2.4.2-pre3/crypto/cipher-dfc.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-dfc.c	Sun Feb 11 23:55:27 2001
@@ -464,11 +464,7 @@
 };
 
 
-#ifdef MODULE
-	int __init init_module(void)
-#else
-	int __init init_dfc(void)
-#endif
+static int __init init_dfc(void)
 {
 	if (register_cipher(&amp;dfc_ecb))
 		printk(KERN_WARNING "Couldn't register dfc-ecb encryption\n");
@@ -478,13 +474,13 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_dfc(void)
 {
 	if (unregister_cipher(&amp;dfc_ecb))
 		printk(KERN_WARNING "Couldn't unregister dfc-ecb encryption\n");
 	if (unregister_cipher(&amp;dfc_cbc))
 		printk(KERN_WARNING "Couldn't unregister dfc-cbc encryption\n");
 }
-#endif
 
+module_init(init_dfc);
+module_exit(cleanup_dfc);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-idea.c \
                linux/crypto/cipher-idea.c
--- linux-2.4.2-pre3/crypto/cipher-idea.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-idea.c	Sun Feb 11 23:56:16 2001
@@ -391,11 +391,7 @@
 	INIT_CIPHER_OPS(idea)
 };
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_idea(void)
-#endif
+static int __init init_idea(void)
 {
     if (register_cipher(&amp;idea_ecb))
         printk(KERN_WARNING "Couldn't register idea-ecb encryption\n");
@@ -404,12 +400,13 @@
     return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_idea(void)
 {
 	if (unregister_cipher(&amp;idea_ecb))
 		printk(KERN_WARNING "Couldn't unregister idea-ecb encryption\n");
 	if (unregister_cipher(&amp;idea_cbc))
 		printk(KERN_WARNING "Couldn't unregister idea-cbc encryption\n");
 }
-#endif
+
+module_init(init_idea);
+module_exit(cleanup_idea);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-mars.c \
                linux/crypto/cipher-mars.c
--- linux-2.4.2-pre3/crypto/cipher-mars.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-mars.c	Sun Feb 11 23:57:12 2001
@@ -454,11 +454,7 @@
 };
 
 
-#ifdef MODULE
-	int __init init_module(void)
-#else
-	int __init init_mars(void)
-#endif
+static int __init init_mars(void)
 {
 	if (register_cipher(&amp;mars_ecb))
 		printk(KERN_WARNING "Couldn't register mars-ecb encryption\n");
@@ -468,12 +464,13 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_mars(void)
 {
 	if (unregister_cipher(&amp;mars_ecb))
 		printk(KERN_WARNING "Couldn't unregister mars-ecb encryption\n");
 	if (unregister_cipher(&amp;mars_cbc))
 		printk(KERN_WARNING "Couldn't unregister mars-cbc encryption\n");
 }
-#endif
+
+module_init(init_mars);
+module_exit(cleanup_mars);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-rc5.c \
                linux/crypto/cipher-rc5.c
--- linux-2.4.2-pre3/crypto/cipher-rc5.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-rc5.c	Sun Feb 11 23:58:00 2001
@@ -209,11 +209,7 @@
 };
 
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_rc5(void)
-#endif
+static int __init init_rc5(void)
 {
     if (register_cipher(&amp;rc5_ecb))
         printk(KERN_WARNING "Couldn't register RC5-ecb encryption\n");
@@ -223,12 +219,13 @@
     return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_rc5(void)
 {
 	if (unregister_cipher(&amp;rc5_ecb))
 		printk(KERN_WARNING "Couldn't unregister RC5_ecb encryption\n");
 	if (unregister_cipher(&amp;rc5_cbc))
 		printk(KERN_WARNING "Couldn't unregister RC5-cbc encryption\n");
 }
-#endif
+
+module_init(init_rc5);
+module_exit(cleanup_rc5);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-rc6.c \
                linux/crypto/cipher-rc6.c
--- linux-2.4.2-pre3/crypto/cipher-rc6.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-rc6.c	Sun Feb 11 23:58:45 2001
@@ -193,11 +193,7 @@
 	INIT_CIPHER_OPS(rc6)
 };
 
-#ifdef MODULE
-	int __init init_module(void)
-#else
-	int __init init_rc6(void)
-#endif
+static int __init init_rc6(void)
 {
 	if (register_cipher(&amp;rc6_ecb))
 		printk(KERN_WARNING "Couldn't register rc6-ecb encryption\n");
@@ -207,12 +203,13 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_rc6(void)
 {
 	if (unregister_cipher(&amp;rc6_ecb))
 		printk(KERN_WARNING "Couldn't unregister rc6-ecb encryption\n");
 	if (unregister_cipher(&amp;rc6_cbc))
 		printk(KERN_WARNING "Couldn't unregister rc6-cbc encryption\n");
 }
-#endif
+
+module_init(init_rc6);
+module_exit(cleanup_rc6);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-serpent.c \
                linux/crypto/cipher-serpent.c
--- linux-2.4.2-pre3/crypto/cipher-serpent.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-serpent.c	Sun Feb 11 23:59:27 2001
@@ -1027,11 +1027,7 @@
 	INIT_CIPHER_OPS(serpent)
 };
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init init_serpent(void)
-#endif
+static int __init init_serpent(void)
 {
 	if (register_cipher(&amp;serpent_ecb))
 		printk(KERN_WARNING "Couldn't register serpent-ecb encryption\n");
@@ -1041,13 +1037,13 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void __exit cleanup_serpent(void)
 {
 	if (unregister_cipher(&amp;serpent_ecb))
 		printk(KERN_WARNING "Couldn't unregister serpent-ecb encryption\n");
 	if (unregister_cipher(&amp;serpent_cbc))
 		printk(KERN_WARNING "Couldn't unregister serpent-cbc encryption\n");
 }
-#endif
 
+module_init(init_serpent);
+module_exit(cleanup_serpent);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cipher-twofish.c \
                linux/crypto/cipher-twofish.c
--- linux-2.4.2-pre3/crypto/cipher-twofish.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cipher-twofish.c	Mon Feb 12 00:00:55 2001
@@ -442,11 +442,7 @@
 	INIT_CIPHER_OPS(twofish)
 };
 
-#ifdef MODULE
-        int __init init_module(void)
-#else
-        int __init init_twofish(void)
-#endif
+static int __init init_twofish(void)
 {
         if (register_cipher(&amp;twofish_ecb))
 	        printk(KERN_WARNING "Couldn't register twofish-ecb encryption\n");
@@ -456,8 +452,7 @@
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void)
+static void cleanup_twofish(void)
 {
         if (unregister_cipher(&amp;twofish_ecb))
 	        printk(KERN_WARNING "Couldn't unregister twofish-ecb encryption\n");
@@ -465,4 +460,5 @@
 	        printk(KERN_WARNING "Couldn't unregister twofish-cbc encryption\n");
 }
 
-#endif
+module_init(init_twofish);
+module_exit(cleanup_twofish);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/cryptoapi.c \
                linux/crypto/cryptoapi.c
--- linux-2.4.2-pre3/crypto/cryptoapi.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/cryptoapi.c	Mon Feb 12 00:05:06 2001
@@ -6,9 +6,6 @@
  * 2000-10-15 Harald Welte &lt;laforge@gnumonks.org&gt;
  * 		- ported to Linux 2.4 
  * 
- * This module is still using old 2.2 module_init/exit semantics for
- * backwards compatibility - HW
- *
  * Copyright 1998 by Alexander Kjeldaas. Redistribution of this file
  * is permitted under the GNU Public License.
  */
@@ -58,8 +55,8 @@
 			int count, int *eof, void *data);
 #endif
 
-LIST_HEAD(ciphers);
-LIST_HEAD(digests);
+static LIST_HEAD(ciphers);
+static LIST_HEAD(digests);
 
 static struct transform_group transforms[MAX_TRANSFORM] = {
 	/* digest */
@@ -76,40 +73,7 @@
 	}
 };
 
-#ifdef CONFIG_PROC_FS
-#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,2,18)
-/* We have to emulate the 2.4 function proc_mkdir, because it is not
- * present in 2.2 - HW */
-static struct proc_dir_entry *
-proc_mkdir(const char *name, struct proc_dir_entry *parent)
-{
-	struct proc_dir_entry *ent = NULL;
-	const char *fn = name;
-	int len;
-
-	if (!parent)
-		parent = &amp;proc_root;
-	len = strlen(fn);
-
-	ent = kmalloc(sizeof(struct proc_dir_entry) + len + 1, GFP_KERNEL);
-	if (!ent)
-		goto out;
-	memset(ent, 0, sizeof(struct proc_dir_entry));
-	memcpy(((char *) ent) + sizeof(*ent), fn, len + 1);
-	ent-&gt;name = ((char *) ent) + sizeof(*ent);
-	ent-&gt;namelen = len;
-	ent-&gt;ops = NULL;
-	ent-&gt;nlink = 2;
-	ent-&gt;mode = S_IFDIR | S_IRUGO | S_IXUGO;
-
-	proc_register(parent, ent);
-
-out:
-	return ent;
-}
-#endif
-
-#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,3,0)
+#if LINUX_VERSION_CODE &lt; KERNEL_VERSION(2,3,0) &amp;&amp; defined(CONFIG_PROC_FS)
 static struct proc_dir_entry *
 create_proc_read_entry(const char *name,
 		       mode_t mode, struct proc_dir_entry *base, 
@@ -124,7 +88,6 @@
 }
 
 #endif
-#endif
 
 
 /**
@@ -459,11 +422,8 @@
 #endif
 
 
-#ifdef MODULE
-int __init init_module(void)
-#else
-int __init cryptoapi_init(void)
-#endif
+static int __init
+init_cryptoapi(void)
 {
 	int i;
 
@@ -475,52 +435,11 @@
 			proc_mkdir(transforms[i].tg_name, proc_crypto);
 	}
 #endif
-	
-#ifdef CONFIG_DIGEST_MD5
-	init_md5();
-#endif
-#ifdef CONFIG_DIGEST_SHA1
-        init_sha1();
-#endif
-#ifdef CONFIG_CIPHER_AES
-	init_rijndael();
-#endif
-#ifdef CONFIG_CIPHER_TWOFISH
-	init_twofish();
-#endif
-#ifdef CONFIG_CIPHER_SERPENT
-	init_serpent();
-#endif
-#ifdef CONFIG_CIPHER_RC5
-	init_rc5();
-#endif
-#ifdef CONFIG_CIPHER_RC6
-	init_rc6();
-#endif
-#ifdef CONFIG_CIPHER_MARS
-	init_mars();
-#endif
-#ifdef CONFIG_CIPHER_DFC
-	init_dfc();
-#endif
-#ifdef CONFIG_CIPHER_BLOWFISH
-	init_blowfish();
-#endif
-#ifdef CONFIG_CIPHER_IDEA
-	init_idea();
-#endif
-#ifdef CONFIG_CIPHER_DES
-	init_des();
-#endif
-#ifdef CONFIG_CIPHER_DES_EDE3
-	init_des_ede3();
-#endif
-
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module(void) 
+static void __exit
+cleanup_cryptoapi(void) 
 {
 	int i;
 
@@ -533,7 +452,9 @@
 #endif
 
 }
-#endif
+
+module_init(init_cryptoapi);
+module_exit(cleanup_cryptoapi);
 
 
 EXPORT_SYMBOL(find_transform_by_name);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/digest-md5.c \
                linux/crypto/digest-md5.c
--- linux-2.4.2-pre3/crypto/digest-md5.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/digest-md5.c	Mon Feb 12 00:01:42 2001
@@ -85,20 +85,17 @@
 	INIT_DIGEST_OPS(md5)
 };
 
-#ifdef MODULE
-#define init_md5 init_module
-#endif
-
-int __init init_md5 (void)
+static int __init init_md5 (void)
 {
 	printk ("MD5 Message Digest Algorithm (c) RSA Systems, Inc\n");
 	register_digest (&amp;md5);
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module (void)
+static void __exit cleanup_md5 (void)
 {
 	unregister_digest (&amp;md5);
 }
-#endif
+
+module_init(init_md5);
+module_exit(cleanup_md5);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/crypto/digest-sha1.c \
                linux/crypto/digest-sha1.c
--- linux-2.4.2-pre3/crypto/digest-sha1.c	Mon Feb 12 00:06:37 2001
+++ linux/crypto/digest-sha1.c	Mon Feb 12 00:02:24 2001
@@ -84,19 +84,16 @@
 	INIT_DIGEST_OPS(sha1)
 };
 
-#ifdef MODULE
-#define init_sha1 init_module
-#endif
-
-int __init init_sha1 (void)
+static int __init init_sha1 (void)
 {
 	register_digest (&amp;sha1);
 	return 0;
 }
 
-#ifdef MODULE
-void cleanup_module (void)
+static void __exit cleanup_sha1 (void)
 {
 	unregister_digest (&amp;sha1);
 }
-#endif
+
+module_init(init_sha1);
+module_exit(cleanup_sha1);
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/include/linux/crypto.h \
                linux/include/linux/crypto.h
--- linux-2.4.2-pre3/include/linux/crypto.h	Mon Feb 12 00:06:37 2001
+++ linux/include/linux/crypto.h	Mon Feb 12 00:05:59 2001
@@ -249,31 +249,6 @@
 int unregister_cipher(struct cipher_implementation *ci);
 int unregister_digest(struct digest_implementation *ci);
  
-/* System initialization */
-extern int cryptoapi_init(void);
-
-/* Cipher implementations */
-
-extern int init_cast256(void);
-extern int init_crypton(void);
-extern int init_serpent(void);
-extern int init_mars(void);
-extern int init_rc5(void);
-extern int init_rc6(void);
-extern int init_dfc(void);
-extern int init_rijndael(void);
-extern int init_blowfish(void);
-extern int init_twofish(void);
-extern int init_idea(void);
-extern int init_des(void);
-extern int init_des_ede3(void);
-
-
-/* Digest implementations */
-
-extern int init_md5(void);
-extern int init_sha1(void);
-
 
 /* Utility macros */
 
diff -uNr --exclude-from=dontdiff linux-2.4.2-pre3/init/main.c linux/init/main.c
--- linux-2.4.2-pre3/init/main.c	Mon Feb 12 00:06:37 2001
+++ linux/init/main.c	Sun Feb 11 23:51:29 2001
@@ -67,10 +67,6 @@
 #include &lt;asm/smp.h&gt;
 #endif
 
-#ifdef CONFIG_CRYPTO
-#include &lt;linux/crypto.h&gt;
-#endif
-
 /*
  * Versions of gcc older than that listed below may actually compile
  * and link okay, but the end product can have subtle run time bugs.
@@ -730,11 +726,6 @@
 	filesystem_setup();
 
 
-#ifdef CONFIG_CRYPTO
-	/* .. crypto .. */
-	cryptoapi_init();
-#endif
-
 #ifdef CONFIG_IRDA
 	irda_device_init(); /* Must be done after protocol initialization */
 #endif

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010219170737</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-02-19 17:07:37-0400</timestampReceived><subject>timeline for 2.4.1 patches?</subject><body>

Just curious. I'd like to use reiserfs on a large
file system I have to set up soon.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010220054123</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-02-20 05:41:23-0400</timestampReceived><subject>problems</subject><body>

Hi !

Im new in this Mailing List ! I can't speak english very well but i hope u
all can understand what i mean ! :)))

I have 2 Problems:

With 2.2.18 Kernel
I get error messages : "modprobe: Can't locate module sipher-18"
I use IDEA compiled in Kernel (not as a module)
But all works ok with 12GB big crypted file

With 2.4.0 Kernel
If i do "losetup -e idea ..." with my 12GB crypted file i get ever this
error msg "File to large" !

Can someone help me ?

Bye


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010308155527</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-08 15:55:27-0400</timestampReceived><subject>still problems with SuSE 2.2.18 Kernel + patch.int.2.2.18.3</subject><body>

Hi !

If i patch the Suse 2.2.18 Kernel with the Patch.int.2.2.18.3 i get this
errors :

Hunk #1 FAILED at 3
Hunk #2 FAILED at 11
2 out of 2 hunks FAILED -- saving rejects to file net/Config.in.rej

Config.in.rej :

***************
*** 3,8 ****
  #
  mainmenu_option next_comment
  comment 'Networking options'
  tristate 'Packet socket' CONFIG_PACKET
  bool 'Kernel/User netlink socket' CONFIG_NETLINK
  if [ "$CONFIG_NETLINK" = "y" ]; then
--- 3,9 ----
  #
  mainmenu_option next_comment
  comment 'Networking options'
+ source net/cipe/Config.in
  tristate 'Packet socket' CONFIG_PACKET
  bool 'Kernel/User netlink socket' CONFIG_NETLINK
  if [ "$CONFIG_NETLINK" = "y" ]; then
***************
*** 10,15 ****
    tristate 'Netlink device emulation' CONFIG_NETLINK_DEV
  fi
  bool 'Network firewalls' CONFIG_FIREWALL
  bool 'Socket Filtering'  CONFIG_FILTER
  tristate 'Unix domain sockets' CONFIG_UNIX
  bool 'TCP/IP networking' CONFIG_INET
--- 11,19 ----
    tristate 'Netlink device emulation' CONFIG_NETLINK_DEV
  fi
  bool 'Network firewalls' CONFIG_FIREWALL
+ if [ "$CONFIG_FIREWALL" = "y" ]; then
+   bool 'Network security (ENskip support)' CONFIG_NET_SECURITY
+ fi
  bool 'Socket Filtering'  CONFIG_FILTER
  tristate 'Unix domain sockets' CONFIG_UNIX
  bool 'TCP/IP networking' CONFIG_INET

can someone say me what is this ?


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010308214147</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-08 21:41:47-0400</timestampReceived><subject>"clean" 2.2.18 src and still problems !!! :((</subject><body>

so i took a "clean" (without any patches) 2.2.18 Kernel source and i have
patched it with the int patch (patch-int-2.2.18.3)
i haven't got any error messages

in the "make menuconfig" in the "crypto options" i have set :
Crypto support &lt;*&gt;
Crypto ciphers &lt;*&gt;
IDEA cipher &lt;*&gt;

but :

1. if i do losetup -e idea /dev/loop0 /mycryptofile it asks for the keysize
and (!) 2 times for the password
   than i can see on console 10 : modprobe: cant find cipher-18

   and all works fine after that

2. if i make the AES cipher as a module in the "Crypto options" and put this
line into /etc/modules.conf :
   "alias cipher-18 rijndael" and do "losetup -e idea /dev/loop0
/mycryptofile" , it asks for the keysize and only 1 time
   for the password but i cant access the crypted file with "mount -t ext2
/dev/loop0 /dir" it says "mount: wrong fs type
   ,bad option, bad superblock on /dev/loop0, or to many mounted file
systems"


WHY ?

PS: sorry for my english but i hope you understand what i mean , else ask me


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010307174930</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-03-07 17:49:30-0400</timestampReceived><subject>Still seeing large file problem</subject><body>

Still having problems with 2G files. I can create a multigig file of 
zeroes file for my loopback, but I'm running into problems
when I try to open it. I wrote a small test prog that repro's
my problem and I've tried everything I can think of.

I'm hoping there is something obvious and stupid and easily fixed :-)

kernel: 2.4.0 with 2.4.0.3 int patches
	Linux starbase2 2.4.0 #5 SMP Wed Feb 14 19:22:54 GMT 2001 i686 unknown

libc6:  libc6-dev_2.2.2-1_i386.deb
	libc6_2.2.2-1_i386.deb

dist:	debian sid, bleeding edge current

Test program:
-------------- test.c
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;

main () {
  const char *file = "/bigloop";
  int mode = O_RDONLY;
  int ffd;
  
  ffd = open (file, mode);
  if (ffd &lt; 0) {
    perror (file);
    exit (1);
  }
  exit (0);
}
------------

test run:
	# gcc -g test.c -o test
	# ./test
	/bigloop: File too large


test file:
	# ls -lg /bigloop
	-rw-rw-r--    1 root     root     2252800000 Feb 26 14:59 /bigloop


strace of test:

root@starbase2:/home/amon# strace ./test
execve("./test", ["./test"], [/* 20 vars */]) = 0
uname({sys="Linux", node="starbase2", ...}) = 0
brk(0)                                  = 0x8049630
open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(0x3, 0xbffff02c)                = 0
old_mmap(NULL, 43259, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40017000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0$\320\1"..., 1024) = 1024
fstat64(0x3, 0xbffff074)                = 0
old_mmap(NULL, 1108036, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40022000
mprotect(0x40127000, 38980, PROT_NONE)  = 0
old_mmap(0x40127000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x104000) \
= 0x40127000 old_mmap(0x4012d000, 14404, PROT_READ|PROT_WRITE, \
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x4012d000 close(3)                     \
= 0 munmap(0x40017000, 43259)               = 0
getpid()                                = 13901
open("/bigloop", O_RDONLY)              = -1 EFBIG (File too large)
write(2, "/bigloop: File too large\n", 25/bigloop: File too large
) = 25
_exit(1)                                = ?

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010325215157</emailId><senderName>Robert Varga</senderName><senderEmail>nite@hq.alert.sk</senderEmail><timestampReceived>2001-03-25 21:51:57-0400</timestampReceived><subject>problems with kerneli patch?</subject><body>

Hi everybody

I've been on this list for a while, and I could see there are still
problems. I am planning to use the crypto API to extend the Ext2 to support
per-file encryption and other cute stuff.

Could somebody summarize the known problems and wether they are being worked
on? If not, I could take a look at them.

-- 
Kind regards,
Robert Varga
------------------------------------------------------------------------------
n@hq.sk                                          http://hq.sk/~nite/gpgkey.txt
 

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010316212336</emailId><senderName>"Morbid Angel"</senderName><senderEmail>mangel@gmx.de</senderEmail><timestampReceived>2001-03-16 21:23:36-0400</timestampReceived><subject>problems with 2.4.0 kernal and int patch</subject><body>

Hi !

i have problems with Kernel 2.4.0 and INT patch

i have done all like it is written in the howto
and it all was succesfull

but if i want mount my crypted file i get ever "File to large"
my crypto file is 12GB big, but i know the 2.4.0 kernel can "work" with
files &gt;2GB

why do i get this error message ?
what can i do ?



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010319152023</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-03-19 15:20:23-0400</timestampReceived><subject>Re: problems with 2.4.0 kernal and int patch</subject><body>

Morbid Angel wrote:
&gt; 
&gt; Hi !
&gt; 
&gt; i have problems with Kernel 2.4.0 and INT patch
&gt; 
&gt; i have done all like it is written in the howto
&gt; and it all was succesfull
&gt; 
&gt; but if i want mount my crypted file i get ever "File to large"
&gt; my crypto file is 12GB big, but i know the 2.4.0 kernel can "work" with
&gt; files &gt;2GB
&gt; 
&gt; why do i get this error message ?
&gt; what can i do ?
&gt; 
&lt;snip&gt;

Shrink the crypted file to a reasonable size. I honestly cannot imagine
needing that much encrypted space at all. When you go through what you
want to put into it one by one, you'll most probably see that there's no
point in putting so much stuff into it. Personally, I used up to 2G,
mostly because I was putting my complete email traffic there (with all
the mailing lists I am subscribed to). But that's nonsense. Everybody
can see your email when you send it or when you use PGP, you don't need
to encrypt it a second time.

It suffices to put one's .netscape, .pgp, .gnupg etc there. My encrypted
space is now much smaller.

Also, if you really care about your data and want it protected, you
won't put so much stuff in it, not even mentioning stuff that everybody
knows, because of known-plaintext attacks. If you use blowfish, I would
not dare to encrypt that much data under a single key, because of the
birthday attack, whose 'magic number', ie. the size of data where equal
ciphertext blocks will occur with probability 1/2, is about 2^32 blocks,
ie. 32GByte.

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010323203952</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-03-23 20:39:52-0400</timestampReceived><subject>Re: problems with 2.4.0 kernal and int patch</subject><body>

On Mon, Mar 19, 2001 at 03:20:23PM +0000, Marc Mutz wrote:
&gt; Morbid Angel wrote:
&gt; &gt; 
&gt; &gt; Hi !
&gt; &gt; 
&gt; &gt; i have problems with Kernel 2.4.0 and INT patch
&gt; &gt; 
&gt; &gt; i have done all like it is written in the howto
&gt; &gt; and it all was succesfull
&gt; &gt; 
&gt; &gt; but if i want mount my crypted file i get ever "File to large"
&gt; &gt; my crypto file is 12GB big, but i know the 2.4.0 kernel can "work" with
&gt; &gt; files &gt;2GB
&gt; &gt; 
&gt; &gt; why do i get this error message ?
&gt; &gt; what can i do ?
&gt; &gt; 
&gt; &lt;snip&gt;
&gt; 
&gt; Shrink the crypted file to a reasonable size. I honestly cannot imagine
&gt; needing that much encrypted space at all. When you go through what you
&gt; want to put into it one by one, you'll most probably see that there's no
&gt; point in putting so much stuff into it. Personally, I used up to 2G,
&gt; mostly because I was putting my complete email traffic there (with all
&gt; the mailing lists I am subscribed to). But that's nonsense. Everybody
&gt; can see your email when you send it or when you use PGP, you don't need
&gt; to encrypt it a second time.
&gt; 
&gt; It suffices to put one's .netscape, .pgp, .gnupg etc there. My encrypted
&gt; space is now much smaller.
&gt; 
&gt; Also, if you really care about your data and want it protected, you
&gt; won't put so much stuff in it, not even mentioning stuff that everybody
&gt; knows, because of known-plaintext attacks. If you use blowfish, I would
&gt; not dare to encrypt that much data under a single key, because of the
&gt; birthday attack, whose 'magic number', ie. the size of data where equal
&gt; ciphertext blocks will occur with probability 1/2, is about 2^32 blocks,
&gt; ie. 32GByte.
&gt; 
&gt; Marc

However I also still have the problem and have not seen an answer
back to my debug query (help begging missive) on the issue.

In my own case it simply is not possible to "make it smaller". I need a
very large secure file system and it is not for a personal computer. There 
are reasons, but if I told you I'd have to shred you :-)

I can't help think that there are other secure system projects blocked on 
this same requirement.

I really want to get this issue sorted, and I've gone into gdb and
I've written the test file that shows the issue must be in either
the kernel or libraries associated with the open() call, not 
specifically in the loop back or crypto.

Also, is Gisle coming back or is there any sign of someone doing
a 2.4.2 int patch? The 2.4.0 still applies, but...

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010325193513</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-03-25 19:35:13-0400</timestampReceived><subject>Re: problems with 2.4.0 kernal and int patch</subject><body>

On Fri, 23 Mar 2001, Dale Amon wrote:

&gt; On Mon, Mar 19, 2001 at 03:20:23PM +0000, Marc Mutz wrote:
&gt; &gt; Morbid Angel wrote:
&gt; &gt; &gt;
&gt;
&gt; However I also still have the problem and have not seen an answer
&gt; back to my debug query (help begging missive) on the issue.
&gt;
&gt; In my own case it simply is not possible to "make it smaller". I need a
&gt; very large secure file system and it is not for a personal computer. There
&gt; are reasons, but if I told you I'd have to shred you :-)
&gt;
&gt; I can't help think that there are other secure system projects blocked on
&gt; this same requirement.
&gt;
&gt; I really want to get this issue sorted, and I've gone into gdb and
&gt; I've written the test file that shows the issue must be in either
&gt; the kernel or libraries associated with the open() call, not
&gt; specifically in the loop back or crypto.

The 2GB problem on loopback devices (that not is part of kerneli) is
a wellknown problem. Since this is a deep kernel problem, the kernel
list is a better place for this issue. There are people working on
this problem, but they don't read this list. This problem impacts
much more than crypto partitions. It is for example not possible to
mount disk images &gt; 2 GB. This makes it hard or impossible to
mount DVD images on harddisk. I think Jens Axboe is working on the
problem, and have a patch for it. (But I as far as I know he don't
subscribe to this list)

http://www.kernel.org/pub/linux/kernel/people/axboe/patches/

The patches are not included in the mianstream kernel yet, and
I don't know whether that breaks something else, but you can try.

&gt; Also, is Gisle coming back or is there any sign of someone doing
&gt; a 2.4.2 int patch? The 2.4.0 still applies, but...

:-)

I have not upgraded to 2.4 yet, since my computer is too slow for
that. I have ordered a new computer, so maybe in the future sometime, but
don't hold your breath.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010326135839</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-03-26 13:58:39-0400</timestampReceived><subject>Re: problems with kerneli patch?</subject><body>

Robert Varga wrote:
&gt; 
&lt;snip&gt;
&gt; Could somebody summarize the known problems and wether they are being worked
&gt; on? If not, I could take a look at them.
&lt;snip&gt; 

Do you mean conceptional or implementation-dependent?

For the first, a starting point would be - of course - Applied
Cryptography by B. Schneier. There is quite an extensive references
section there, but the book is now more than six years old.

For the second, here's a list of bug/inconvenients for the linux
loopback device crypto and the cryptoapi, as far as i know and recall
them:

- 2G limit in the loopback device
  (2.2+2.4, axboe maybe has a patch for 2.4?)
- deadlocks in the loopback device
  (2.4, axboe has a patch)
- blowfish (and other ciphers) have endian-issues (2.2+2.4)
  This is mostly because
  a. no-one has really defined what the ciphers should
     return and accept (cryptoapi)
  b. the authors of ciphers often did not pay attention
     themselves
  c. no-one has tested the ciphers (due to a.)
- blowfish (and others) have a problem with demand-module
  loading (2.2.18.4pre+2.4)

For the third point: Alex, Gisle, should we define the input and output
of *_{en,de}crypt functions to expect/provide an octet stream? Then all
endian issues (except bit-endianess, which is a non-issue on platforms
Linux runs on) go away. One then has to check (like Brian Gladman did in
his paper on the subject he submitted to the AES comments last year) the
papers and check the implementations in the kernel against that.

Additions to this list are welcome.

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010327080951</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-03-27 08:09:51-0400</timestampReceived><subject>Re: problems with kerneli patch?</subject><body>

On Mon, Mar 26, 2001 at 01:58:39PM +0000, Marc Mutz wrote:
&gt; Robert Varga wrote:
&gt; &gt; 
&gt; &lt;snip&gt;
&gt; &gt; Could somebody summarize the known problems and wether they are being worked
&gt; &gt; on? If not, I could take a look at them.
&gt; &lt;snip&gt; 
&gt; 
&gt; Do you mean conceptional or implementation-dependent?
&gt; 
&gt; For the first, a starting point would be - of course - Applied
&gt; Cryptography by B. Schneier. There is quite an extensive references
&gt; section there, but the book is now more than six years old.
&gt; 
&gt; For the second, here's a list of bug/inconvenients for the linux
&gt; loopback device crypto and the cryptoapi, as far as i know and recall
&gt; them:
&gt; 
&gt; - 2G limit in the loopback device
&gt;   (2.2+2.4, axboe maybe has a patch for 2.4?)
&gt; - deadlocks in the loopback device
&gt;   (2.4, axboe has a patch)
&gt; - blowfish (and other ciphers) have endian-issues (2.2+2.4)
&gt;   This is mostly because
&gt;   a. no-one has really defined what the ciphers should
&gt;      return and accept (cryptoapi)
&gt;   b. the authors of ciphers often did not pay attention
&gt;      themselves
&gt;   c. no-one has tested the ciphers (due to a.)
&gt; - blowfish (and others) have a problem with demand-module
&gt;   loading (2.2.18.4pre+2.4)
&gt; 
&gt; For the third point: Alex, Gisle, should we define the input and output
&gt; of *_{en,de}crypt functions to expect/provide an octet stream? 

Yes we should and we do - at least in the 2.4 patch.  The interface is
right but some implementations are still wrong.

astor

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010307183015</emailId><senderName>"George Milliken"</senderName><senderEmail>gmilliken@farm9.com</senderEmail><timestampReceived>2001-03-07 18:30:15-0400</timestampReceived><subject>RE: Still seeing large file problem</subject><body>

remove

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Dale Amon
Sent: Wednesday, March 07, 2001 9:50 AM
To: linux-crypto
Subject: Still seeing large file problem


Still having problems with 2G files. I can create a multigig file of
zeroes file for my loopback, but I'm running into problems
when I try to open it. I wrote a small test prog that repro's
my problem and I've tried everything I can think of.

I'm hoping there is something obvious and stupid and easily fixed :-)

kernel: 2.4.0 with 2.4.0.3 int patches
	Linux starbase2 2.4.0 #5 SMP Wed Feb 14 19:22:54 GMT 2001 i686 unknown

libc6:  libc6-dev_2.2.2-1_i386.deb
	libc6_2.2.2-1_i386.deb

dist:	debian sid, bleeding edge current

Test program:
-------------- test.c
#include &lt;stdio.h&gt;
#include &lt;errno.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;fcntl.h&gt;

main () {
  const char *file = "/bigloop";
  int mode = O_RDONLY;
  int ffd;

  ffd = open (file, mode);
  if (ffd &lt; 0) {
    perror (file);
    exit (1);
  }
  exit (0);
}
------------

test run:
	# gcc -g test.c -o test
	# ./test
	/bigloop: File too large


test file:
	# ls -lg /bigloop
	-rw-rw-r--    1 root     root     2252800000 Feb 26 14:59 /bigloop


strace of test:

root@starbase2:/home/amon# strace ./test
execve("./test", ["./test"], [/* 20 vars */]) = 0
uname({sys="Linux", node="starbase2", ...}) = 0
brk(0)                                  = 0x8049630
open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or
directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat64(0x3, 0xbffff02c)                = 0
old_mmap(NULL, 43259, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40017000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0$\320\1"..., 1024) =
1024
fstat64(0x3, 0xbffff074)                = 0
old_mmap(NULL, 1108036, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40022000
mprotect(0x40127000, 38980, PROT_NONE)  = 0
old_mmap(0x40127000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3,
0x104000) = 0x40127000
old_mmap(0x4012d000, 14404, PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x4012d000
close(3)                                = 0
munmap(0x40017000, 43259)               = 0
getpid()                                = 13901
open("/bigloop", O_RDONLY)              = -1 EFBIG (File too large)
write(2, "/bigloop: File too large\n", 25/bigloop: File too large
) = 25
_exit(1)                                = ?

--
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010308182721</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-03-08 18:27:21-0400</timestampReceived><subject>Re: still problems with SuSE 2.2.18 Kernel + patch.int.2.2.18.3</subject><body>

Morbid Angel wrote:
&gt; 
&gt; Hi !
&gt; 
&gt; If i patch the Suse 2.2.18 Kernel with the Patch.int.2.2.18.3 i get this
&gt; errors :
&gt; 
&gt; Hunk #1 FAILED at 3
&gt; Hunk #2 FAILED at 11
&gt; 2 out of 2 hunks FAILED -- saving rejects to file net/Config.in.rej
&gt; 
&lt;snip&gt; 
&gt; can someone say me what is this ?
&lt;snip&gt;

Don't know, because in the .rej file there is no hint as to why the
patch fails. But you can safely ignore this error if you don't want cipe
or ENSkip in the kernel build process (I would not recommend ENskip at
all and CIPE can be build from outside the kernel source tree). If you
want resolve this error, simply insert the lines marked with '+' at the
beginning into their respective places between the existing lines in
net/Config.in, the rm *.orig *.rej.

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010308191956</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-03-08 19:19:56-0400</timestampReceived><subject>Re: still problems with SuSE 2.2.18 Kernel + patch.int.2.2.18.3</subject><body>

On Thu, 8 Mar 2001, Morbid Angel wrote:

&gt; Hi !
&gt;
&gt; If i patch the Suse 2.2.18 Kernel with the Patch.int.2.2.18.3 i get this
&gt; errors :
&gt;

Probably because SuSE have modified the kernel the delivers with their
distro, and did it in a way that is incompatible with the kerneli, i.e
modified it on a place kerneli modifies it as well. If you try the
standard kernel from kernel.org, things should work fine.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010221170125</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-02-21 17:01:25-0400</timestampReceived><subject>Re: crypto loopback fs stuff</subject><body>

I'm forwarding this on as it seems highly relevant to the
problems a number of us are seeing:

On Wed, Feb 21, 2001 at 11:52:13AM -0500, Brian S. Julin wrote:
&gt; 
&gt; Hi, I'm not on the crypto list but I have some
&gt; info that probably should be posted there, so if
&gt; you'd do me the favor, thanks.
&gt; 
&gt; I was having similar problems to the one you described
&gt; on the linux-crypto list, except I was using small
&gt; partitions/files and when the mke2fs hung, it would only
&gt; sit in the D state, it would not crash the kernel and
&gt; did not generate a segfault.  This was with both
&gt; SCSI and IDE drives, so it's definitely not driver
&gt; problems.
&gt; 
&gt; So I got the lastest greatest bleeding edge kernel
&gt; and applied Jens Axboe's loop-4 patch to it, and I
&gt; had the same result.  I mailed Jens, and he said
&gt; to wait and give the upcoming loop-5 a try, which I did.  
&gt; loop-5 (and loop-5B) got rid of the mke2fs problem, but 
&gt; the machine now hangs mount in the D state when using
&gt; crypt (nonencrypted loopback seems to work fine.)
&gt; 
&gt; Jens says he thinks he's fixed what he can of the
&gt; loop driver, and that he may look at it further, but 
&gt; this particular problem is probably in the crypto 
&gt; stuff.  It will probably require someone deep into 
&gt; the loop_gen crypto driver to fix it; until then,
&gt; assume things are just totally broken.
&gt; 
&gt; If anyone wants their problem reports to be "meaningful",
&gt; I would recommend patching Linus's 2.4.X-preY releases
&gt; with Jen's latest loop patch (go to where you get your
&gt; kernel and cd ../people/axboe/patches).
&gt; 
&gt; As things now stand on my system:
&gt; 
&gt; AES -- refuses to mount
&gt; Blowfish -- segfaults losetup, div0
&gt; serpent, rc5, twofish -- /bin/mount hands in D state
&gt; rc6 -- segfaults losetup, EIP=0
&gt; 
&gt; Note also if you are using funny block sizes, Alan Cox
&gt; mentioned something about fixing ext2fs block size
&gt; detection in 2.4.1-ac20
&gt; 
&gt; --
&gt; Brian
&gt; 

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010221181601</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-02-21 18:16:01-0400</timestampReceived><subject>Roundup of 2.4 kerneli problems and call for developers (was: Re: max</subject><body>

pacman wrote:
&gt; 
&lt;snip&gt;
&gt; kernel config ist attached.
&lt;snip&gt; 
(You don't need to base64-encode a plain text file, just send it as
7but, and additionally, you could use
grep -Ev '^$|^#' /usr/src/linux/.config | sed s/^CONFIG_//
to remove the noise. Thanks)

If this problem occurs only with partitions &gt;2G, I think this is a 32bit
issue. I don't know if this is a kernli issue or an incompatibility
between loop-5 and kerneli.

This mail is titled "... and call for developers". I think we could very
well use some additional ones...

So I'd like to point all of you that have problems with kerneli in 2.4
(or want to become a developer) to the following:

2.4 (and 2.2.18.4pre) patches use a new architecture both in module
loading and the loopback crypto driver. The "stable" version on 2.2. is
still 2.2.18.3; on 2.4.x such a thing does not exist, yet. It is hard to
develop something when the underlying arthitecture is deeply buggy and
the bug is not considered serious enough to be fixed before 2.4.0 :-(

Known problems (w/ fixes if avaliable)

a. loop.c is buggy in all 2.4.x kernels, resulting in a complete system
hang when accessing the loop device for some time/amount of data. Lens
Axboe has a loop-5 patch[1] but AFAIK this reworks the loop device
heavily. Don't expect a loop-5 patched kernel to work with the kerneli
patch that was written for 2.4.x vanilla. There is no kerneli that I
know of that is taylored to loop-5.

b. previous versions of losetup/mount had the ciphername-number
translation table hardcoded into them. That meant re-compiling them
whenever a cipher changed or was added. BAD. This was changed in a way
that makes losetup/mount independent of the installed drivers: The IOCTL
to setup the loop_gen driver was changed to take a ciphername instead of
an (internal) ciphernumber as parameter. The name-&gt;number conversion is
now done in the kernel via find_cipher_by_name(). Also, there were
changes in the module loading code in cryptoapi.c. That has two
implications:

b1. Early versions of the 2.4.x patches were unable to handle the
old-style IOCTL. You'd get "LOOP_SET_STATUS: Invalid argument" messages
if that was the case. 2.4.0.3 has this fixed.

b2. (I guess) The module loading code has still a bug, causing losetup
to segfault. This comes up when you demand-load blowfish (and other
ciphers) the first time. Workaround: Load the modules before you run
losetup.

The problem is that I am not running 2.4.x. I do run 2.2.18.4pre1, but I
am not into the new design to debug the "losetup segfaults" error. If
there is someone that is a better C/Unix programmer than I am (which is
easy to accomplish), I'd appreciate if he or she took a look at the
code. It is not much code and quite independent of everything else in
the kernel except the loop device. I worked my way into the (old)
sources in a few hour's time so there should likely be people out there
that can do this in less than an hour.

This project certainly lacks developers, because Gisle has just finished
his/her (heck, I don't even know Gisle's sex!?) master thesis (or so I
understand) and is likely gone job-hunting, /me is just starting his
diploma thesis (finally :-) and Astor seems to be wrapped up in work,
too.

If you can help, you're welcome...

Marc

[1] ftp.kernel.org/pub/linux/kernel/people/axboe/&lt;kernelversion&gt;/loop-5*
-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010219214128</emailId><senderName>pacman</senderName><senderEmail>pacman@bierkasten.org</senderEmail><timestampReceived>2001-02-19 21:41:28-0400</timestampReceived><subject>max size of a partition</subject><body>

hi,
i have problems with the encryption of my partition (28gb). i always get a kernel \
panic while i create. if the partition has a size of 2gb it works perfectly. so is \
there a limit of the size? and if, is there a workaround or a solution to solve this \
problem.

---

Sincerly
Michael Walle

In den Rohrwiesen 1a
66440 Blieskastel
Deutschland
pacman@bierkasten.org
http://pacman.yi.org

---

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010220014807</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-02-20 01:48:07-0400</timestampReceived><subject>Re: max size of a partition</subject><body>

pacman wrote:
&gt; 
&gt; hi,
&gt; i have problems with the encryption of my partition (28gb). i always get a kernel \
&gt; panic while i create. if the partition has a size of 2gb it works perfectly. so is \
&gt; there a limit of the size? and if, is there a workaround or a solution to solve \
&gt; this problem. 
&lt;snip&gt;

What kernel version?
Please describe your setup more _detailed_ (exact commands, entries in
fstab, you know...)

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010220155047</emailId><senderName>Pacman</senderName><senderEmail>cia_pacman@gmx.net</senderEmail><timestampReceived>2001-02-20 15:50:47-0400</timestampReceived><subject>Re: max size of a partition</subject><body>

i tried kernel ver 2.4.0 with reiserfs patch (3.6.25), -ac12, 2.4.1, -ac18 all with \
                crypto patch 2.4.0.3.
/etc/fstab:
/dev/hda8 /mnt/crypto   ext2    defaults,noauto,loop,encryption=aes,user 0 0

what i did:
losetup (patched ver. s)
losetup -e aes /dev/loop0 /dev/hda8
mke2fs /dev/loop0 ==&gt; kernel panic if hda &gt; 2gb

kernel config ist attached.

-- 

Sincerly
Michael Walle

In den Rohrwiesen 1a
66440 Blieskastel
Deutschland
pacman@bierkasten.org
http://pacman.yi.org

---


On Tue, 20 Feb 2001 01:48:07 +0000
Marc Mutz &lt;Marc@Mutz.com&gt; wrote:

&gt; pacman wrote:
&gt; &gt; 
&gt; &gt; hi,
&gt; &gt; i have problems with the encryption of my partition (28gb). i always get a kernel \
&gt; &gt; panic while i create. if the partition has a size of 2gb it works perfectly. so \
&gt; &gt; is there a limit of the size? and if, is there a workaround or a solution to \
&gt; &gt; solve this problem. 
&gt; &lt;snip&gt;
&gt; 
&gt; What kernel version?
&gt; Please describe your setup more _detailed_ (exact commands, entries in
&gt; fstab, you know...)
&gt; 
&gt; Marc
&gt; 
&gt; -- 
&gt; Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
&gt; University of Bielefeld, Dep. of Mathematics / Dep. of Physics
&gt; 
&gt; PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)
&gt; 
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


["kernelconfig" (application/octet-stream)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010220163138</emailId><senderName>pacman</senderName><senderEmail>pacman@bierkasten.org</senderEmail><timestampReceived>2001-02-20 16:31:38-0400</timestampReceived><subject>Re: max size of a partition</subject><body>

i tried kernel ver 2.4.0 with reiserfs patch (3.6.25), -ac12, 2.4.1, -ac18 all with \
                crypto patch 2.4.0.3.
/etc/fstab:
/dev/hda8 /mnt/crypto   ext2    defaults,noauto,loop,encryption=aes,user 0 0

what i did:
losetup (patched ver. s)
losetup -e aes /dev/loop0 /dev/hda8
mke2fs /dev/loop0 ==&gt; kernel panic if hda &gt; 2gb

kernel config ist attached.

-- 

Sincerly
Michael Walle

In den Rohrwiesen 1a
66440 Blieskastel
Deutschland
pacman@bierkasten.org
http://pacman.yi.org

---


On Tue, 20 Feb 2001 01:48:07 +0000
Marc Mutz &lt;Marc@Mutz.com&gt; wrote:

&gt; pacman wrote:
&gt; &gt; 
&gt; &gt; hi,
&gt; &gt; i have problems with the encryption of my partition (28gb). i always get a kernel \
&gt; &gt; panic while i create. if the partition has a size of 2gb it works perfectly. so \
&gt; &gt; is there a limit of the size? and if, is there a workaround or a solution to \
&gt; &gt; solve this problem. 
&gt; &lt;snip&gt;
&gt; 
&gt; What kernel version?
&gt; Please describe your setup more _detailed_ (exact commands, entries in
&gt; fstab, you know...)
&gt; 
&gt; Marc
&gt; 
&gt; -- 
&gt; Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
&gt; University of Bielefeld, Dep. of Mathematics / Dep. of Physics
&gt; 
&gt; PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)
&gt; 
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010220163809</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-02-20 16:38:09-0400</timestampReceived><subject>Re: max size of a partition</subject><body>

I sent this to Mark earlier and forgot to cc the list.
Additionally, I have since tried it a second time after
installing a slightly different kernel and going to the
absolute most recent bleeding debian edge with a sid
dist update.

Results are the same within experimental error :-)

Machine locked up while writing inodes in a mkfs, but
this time got further:

host1:/etc/ssh# mkfs -t ext2 /dev/loop0
mke2fs 1.19, 13-Jul-2000 for EXT2 FS 0.5b, 95/08/09
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
2240224 inodes, 4480096 blocks
224004 blocks (5.00%) reserved for the super user
First data block=0
137 block groups
32768 blocks per group, 32768 fragments per group
16352 inodes per group
Superblock backups stored on blocks: 
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
        4096000

Writing inode tables: 120/137

I do not yet have any info on what the final state of
the machine is; it is off in a dusty corner of an NSP
on the other side of town...

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------


Date: Tue, 20 Feb 2001 12:52:56 +0000
From: Dale Amon &lt;amon@vnl.com&gt;
To: Marc Mutz &lt;Marc@Mutz.com&gt;
Cc: bhughes@vnl.com
Subject: Re: max size of a partition
Message-ID: &lt;20010220125254.F16525@vnl.com&gt;
References: &lt;20010219224128.4f4c7677.pacman@bierkasten.org&gt; \
                &lt;3A91CCD7.A8059C02@Mutz.com&gt;
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.3.12i
In-Reply-To: &lt;3A91CCD7.A8059C02@Mutz.com&gt;; from Marc@Mutz.com on Tue, Feb 20, 2001 at \
                01:48:07AM +0000
X-Operating-System: Linux, the choice of a GNU generation

On Tue, Feb 20, 2001 at 01:48:07AM +0000, Marc Mutz wrote:
&gt; pacman wrote:
&gt; &gt; 
&gt; &gt; hi,
&gt; &gt; i have problems with the encryption of my partition (28gb). i always get a kernel \
&gt; &gt; panic while i create. if the partition has a size of 2gb it works perfectly. so \
&gt; &gt; is there a limit of the size? and if, is there a workaround or a solution to \
&gt; &gt; solve this problem. 
&gt; What kernel version?
&gt; Please describe your setup more _detailed_ (exact commands, entries in
&gt; fstab, you know...)
&gt; 

Hot off the presses as it were: I may be having a similar problem.
The 2.4.0 kernel is monolithic and has the 3rd international patch 
set applied; I built and installed losetup, mount and umount applying
the o patch set to version q (which applied with offsets).

All of the above were built on a local machine that has developer tools.
The target system does not. (well it has some tools, but they will 
eventually be removed as well.)

The losetup worked fine:

	losetup -e thecipher /dev/loop0 /dev/md0

Then I started the mkfs:

host1:/etc# mkfs -t ext2 -c -v /dev/loop0
mke2fs 1.19, 13-Jul-2000 for EXT2 FS 0.5b, 95/08/09
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
2240224 inodes, 4480096 blocks
224004 blocks (5.00%) reserved for the super user
First data block=0
137 block groups
32768 blocks per group, 32768 fragments per group
16352 inodes per group
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000

Running command: badblocks -b 4096 -s /dev/loop0 4480096
Checking for bad blocks (read-only test): done
Writing inode tables:  10/137

                        Stopped dead about here...


The raw raid partition /dev/md0 is 18GB with two drives in RAID1
configuration. It was initialized to zero before any of the above
was done.

I had someone check the machine (on the other side of town) and the best I could
was that the console messages said that it tried to kill kernel idle task;
this was followed by a kernel panic.

I realize that doing a loopback crypto on a raw RAID1 
might be a bit unusual, but I see no reason it should not
work and it eliminates an unnecessary layer of abstraction
(unless someone can tell me a good reason why I should layer

	disks -&gt; raid -&gt; ext2 -&gt; loopback file -&gt; ext2

instead of

	disks -&gt; raid -&gt; raw device loopback -&gt; ext2

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010222133744</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-02-22 13:37:44-0400</timestampReceived><subject>Re: max size of a partition</subject><body>

FWIW: Last night I built a 2.4.2 pre5 kernel in this
patching order:

	* 2.4.1 base
	* 2.4.2 pre5 patch set
	* loop-5B patches
	* 2.4.0.3 international patch set

It compiled and booted without error. Now as to whether
it can *do* anything, I can't say yet because it was
a bit on the late side when I got to the boot up test.

So if nothing else, the patches cohabitate without
blatent outwardly noticeable problems...

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010226231058</emailId><senderName>"Ian S. Nelson"</senderName><senderEmail>ian.nelson@echostar.com</senderEmail><timestampReceived>2001-02-26 23:10:58-0400</timestampReceived><subject>Loading secure binaries?</subject><body>

I'm working on an embedded Linux project and the issue of security is
starting to surface and it's beginning to look kind of interesting.

Is there any plans with Linux-crypto or some other project that somebody
knows of to allow the loading of secure binaries?

I was thinking of a scheme like this:

    there would be a new linux executable loader, perhaps one of the
misc binary loaders or an ELF hack, you'd want it to reside inside the
kernel though.

    Then add a new system call to provide a key to the kernel.  This
could be pulled down off the internet or out of a secure piece of
hardware.  In some applications it could be something the user provides
at login time.

    Then the new binaries would be AES/IDEA/DES encrypted with that key
and the new loader would use that key to decrypt them at load time.

Anybody know of something like this?  A logical extension would be to
embed GPG into the kernel and then you could execute signed and
encrypted binaries but that seems like overkill for what we're doing, we
just don't want a few key pieces of code to ever be decrypted anywhere
other than SDRAM.

thanks,
Ian


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010101140954</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-01-01 14:09:54-0400</timestampReceived><subject>Re: Patch for losetup</subject><body>


On Sun, 31 Dec 2000, Jan-Benedict Glaw wrote:

&gt; &gt; +       { LO_CRYPT_RIJNDAEL, "rijndael", 16},
&gt; &gt; +       { LO_CRYPT_AES, "aes", 16},

&lt;snip&gt;

&gt; &gt; +#define LO_CRYPT_AES      18
&gt;                              ^^--- You better define this to 16, right?


You confuse the keylength with the cipher identifer. The two first
definitions define the keylength used by the loopback device, which is 16
bytes or 128 bits. The second is the identifer for AES, which is 18 in the
current version of kerneli. The identifer for rijndael is (by coincident)
16, and that mey be confusing.

Also, rijndael and AES has different identifers, but is in fact the
same thing, and use the same code for encipherment, so inserting 16
would work if you selected "AES available under the rijndael name"
when configuring the kernel, and not otherwise.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010104112633</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-01-04 11:26:33-0400</timestampReceived><subject>Re: Problem with DES</subject><body>

On Thu, 4 Jan 2001, Pierre PEIFFER wrote:

&gt; Pierre PEIFFER wrote:
&gt;
&gt; &gt; Hello everybody and happy new year !
&gt; &gt;
&gt; &gt;     I have problem with DES, I use kernel patch 2.2.17.10 with kernel
&gt; &gt; 2.2.13 and I have the following problem:
&gt; &gt;     losetup return "ioctl: LOOP_SET_STATUS: Invalid argument".
&gt; &gt;
&gt; &gt;     Since rijndael encryption works very well and since a message "Use
&gt; &gt; of DES is deprecated", I was worrying if DES is still well supported and
&gt; &gt; maintained ?

Not really. DES is not considered secure by today's standards, and
it's not maintained in kerneli. Unless you have an old
DES-encrypted partition, you should not use it, since there's
ciphers that is both faster and more secure than DES. Your problems
regarding the key indicated that you not have such a partition. :-)

Your problem is that you for DES (unlike the other cipher inkl 3DES)
must specify the key in hexadecimal, and the key must have the
parity bits correctly set. For the other ciphers, it's sufficient
to enter a passphrase, which then is hashed into the actual key.
To calculate the parity is not that easy, but since DES is deprecated
nobody have bothered to fix this problem. I don't even know if DES
works, since I never bothered to calculate a key with correct
parity manually. For 3DES the parity is calculated automatically.

If you have an old DES-encrypted partition somewhere, I can help you.
Otherwise I recoment either Rijndael/AES, serpent or blowfish.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010105102451</emailId><senderName>Emil Laurentiu</senderName><senderEmail>emil@la.mine.nu</senderEmail><timestampReceived>2001-01-05 10:24:51-0400</timestampReceived><subject>Re: AES</subject><body>

On 3 January 2001, Gisle S{lensminde &lt;gisle@ii.uib.no&gt; wrote:
&gt; No - many of the algorithms supports longer keysizes, like serpent, rc6
&gt; and blowfish, but you miss one point IMHO. Currently we use a passphrase
&gt; to generate the key, and it's unlikely that the passphrase contains
&gt; more than 128 bits of entropy. Allowing longer keys will probably only
&gt; give false impression of security. Then it's a bad thing to break
&gt; compatibility, like your patch will do for several ciphers.

You are right. I haven't thought about this aspect.


&gt; I fully agree with here. Could you submit a patch that _only_ does this,
&gt; and keeps the keysizes for the other ciphers untouched.

You have the patch that doesn't break the compatibly attached.

Although we all are going to switch to 2.4.0 aren't we ? ;-)

-- 
								Regards,
								Emil
--
Out of my mind - back in 5 minutes.

["patch-int-2.2.18.4.diff" (text/plain)]

diff -urN linux-2.2.18/Documentation/crypto/faq.txt \
                linux-2.2.18-cr/Documentation/crypto/faq.txt
--- linux-2.2.18/Documentation/crypto/faq.txt	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/Documentation/crypto/faq.txt	Tue Jan  2 02:42:51 2001
@@ -50,11 +50,13 @@
 alias loop-xfer-gen-0 loop_gen
 alias loop-xfer-gen-10 loop_gen
 alias cipher-2 des
+alias cipher-3 twofish
 alias cipher-4 blowfish
 alias cipher-6 idea
 alias cipher-7 serp6f
 alias cipher-8 mars6
 alias cipher-11 rc62
+alias cipher-12 des_ede3
 alias cipher-15 dfc2
 alias cipher-16 rijndael
 alias cipher-17 rc5
diff -urN linux-2.2.18/Documentation/crypto/util-linux-2.10r.int.patch \
                linux-2.2.18-cr/Documentation/crypto/util-linux-2.10r.int.patch
--- linux-2.2.18/Documentation/crypto/util-linux-2.10r.int.patch	Wed Dec 31 19:00:00 \
                1969
+++ linux-2.2.18-cr/Documentation/crypto/util-linux-2.10r.int.patch	Tue Jan  2 \
02:40:13 2001 @@ -0,0 +1,797 @@
+diff -urN util-linux-2.10r/mount/Makefile util-linux-2.10r-cr/mount/Makefile
+--- util-linux-2.10r/mount/Makefile	Fri Aug 11 17:25:26 2000
++++ util-linux-2.10r-cr/mount/Makefile	Sun Dec 31 02:47:21 2000
+@@ -28,7 +28,7 @@
+ GEN_FILES = nfsmount.h nfsmount_xdr.c nfsmount_clnt.c
+ 
+ # comment these out if you are not compiling in loop support
+-LO_OBJS=lomount.o
++LO_OBJS=lomount.o rmd160.o
+ 
+ all: $(PROGS)
+ 
+@@ -59,7 +59,7 @@
+ losetup.o: lomount.c
+ 	$(COMPILE) -DMAIN lomount.c -o $@
+ 
+-losetup: losetup.o
++losetup: losetup.o rmd160.o
+ 	$(LINK) $^ -o $@
+ 
+ mount.o umount.o nfsmount.o losetup.o fstab.o realpath.o sundries.o: sundries.h
+diff -urN util-linux-2.10r/mount/lomount.c util-linux-2.10r-cr/mount/lomount.c
+--- util-linux-2.10r/mount/lomount.c	Sat Aug  5 11:52:28 2000
++++ util-linux-2.10r-cr/mount/lomount.c	Tue Jan  2 02:14:06 2001
+@@ -27,6 +27,7 @@
+ 
+ #include "loop.h"
+ #include "lomount.h"
++#include "rmd160.h"
+ #include "nls.h"
+ 
+ extern int verbose;
+@@ -34,15 +35,30 @@
+ extern void error (const char *fmt, ...);	/* idem */
+ 
+ #ifdef LOOP_SET_FD
++/* maximum key length has been used */
+ struct crypt_type_struct {
+ 	int id;
+ 	char *name;
++	int keylength;
+ } crypt_type_tbl[] = {
+-	{ LO_CRYPT_NONE, "no" },
+-	{ LO_CRYPT_NONE, "none" },
+-	{ LO_CRYPT_XOR, "xor" },
+-	{ LO_CRYPT_DES, "DES" },
+-	{ -1, NULL   }
++	{ LO_CRYPT_NONE, "no", 0 },
++	{ LO_CRYPT_NONE, "none", 0 },
++	{ LO_CRYPT_XOR, "xor", 0 },
++/*	{ LO_CRYPT_DES, "DES", 8 }, */
++	{ LO_CRYPT_FISH2, "twofish", 20 }, /* max 32 */
++	{ LO_CRYPT_BLOW, "blowfish", 20 }, /* max 32 */
++	{ LO_CRYPT_CAST128, "cast128", 16 },
++	{ LO_CRYPT_IDEA, "idea", 16 },
++	{ LO_CRYPT_SERPENT, "serpent", 16 },
++	{ LO_CRYPT_MARS, "mars", 16 },
++	{ LO_CRYPT_RC6, "rc6", 16 },
++	{ LO_CRYPT_DES_EDE3, "DES_EDE3", 24 },
++/*	{ LO_CRYPT_CAST256, "cast256", 32 }, */
++	{ LO_CRYPT_DFC, "dfc", 16 }, /* max 32 */
++	{ LO_CRYPT_RIJNDAEL, "rijndael", 16 }, /* max 32 */
++	{ LO_CRYPT_RIJNDAEL, "AES", 16 }, /* max 32 */
++	{ LO_CRYPT_RC5, "rc5", 32 },
++	{ -1, NULL,0   }
+ };
+ 
+ static int 
+@@ -167,12 +183,18 @@
+ 	return 0;
+ }
+ 
++#define HASHLENGTH 20
++#define PASSWDBUFFLEN 130 /* getpass returns only max. 128 bytes, see man getpass \
*/ ++
+ int
+ set_loop (const char *device, const char *file, int offset,
+ 	  const char *encryption, int *loopro) {
+ 	struct loop_info loopinfo;
+ 	int fd, ffd, mode, i;
++	int keylength;
+ 	char *pass;
++	char keybits[2*HASHLENGTH]; 
++	char passwdbuff[PASSWDBUFFLEN];
+ 
+ 	mode = (*loopro ? O_RDONLY : O_RDWR);
+ 	if ((ffd = open (file, mode)) &lt; 0) {
+@@ -224,6 +246,7 @@
+ 		loopinfo.lo_encrypt_key_size = strlen(loopinfo.lo_encrypt_key);
+ 		break;
+ 	case LO_CRYPT_DES:
++		printf(_("WARNING: Use of DES is depreciated.\n"));
+ 		pass = getpass (_("Password: "));
+ 		strncpy (loopinfo.lo_encrypt_key, pass, 8);
+ 		loopinfo.lo_encrypt_key[8] = 0;
+@@ -240,6 +263,39 @@
+ 				return 1;
+ 			}
+ 		break;
++	case LO_CRYPT_FISH2:
++	case LO_CRYPT_BLOW:
++	case LO_CRYPT_CAST128:
++	case LO_CRYPT_IDEA:
++	case LO_CRYPT_SERPENT:
++	case LO_CRYPT_MARS:
++	case LO_CRYPT_RC6:
++	case LO_CRYPT_DES_EDE3:
++	case LO_CRYPT_CAST256:
++	case LO_CRYPT_DFC:
++	case LO_CRYPT_RIJNDAEL:
++	case LO_CRYPT_RC5:
++		pass = getpass("Password: ");
++		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
++		passwdbuff[0] = 'A';
++                /* use the rmd160 function twice to generate a 40 bytes hash */
++		rmd160_hash_buffer(keybits,pass,strlen(pass));
++		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
++                /* zero unencrypted passwords in memory */
++                memset( pass, 0, strlen(pass) ); 
++                memset( passwdbuff, 0, PASSWDBUFFLEN ); 
++		keylength=0;
++		for(i=0; crypt_type_tbl[i].id != -1; i++){
++		         if(loopinfo.lo_encrypt_type == crypt_type_tbl[i].id){
++			         keylength = crypt_type_tbl[i].keylength;
++				 break;
++			 }
++		}
++		loopinfo.lo_encrypt_key_size=keylength;
++		memcpy((char*)loopinfo.lo_encrypt_key,keybits,keylength);
++                /* zero hash (source) in memory */
++                memset( keybits, 0, keylength ); 
++		break;
+ 	default:
+ 		fprintf (stderr,
+ 			 _("Don't know how to get key for encryption system %d\n"),
+@@ -324,11 +380,18 @@
+ 
+ static void
+ usage(void) {
++	struct crypt_type_struct *c;
+ 	fprintf(stderr, _("usage:\n\
+   %s loop_device                                      # give info\n\
+   %s -d loop_device                                   # delete\n\
+   %s [ -e encryption ] [ -o offset ] loop_device file # setup\n"),
+ 		progname, progname, progname);
++	fprintf(stderr, "    where encryption is one of:\n");
++	c = &amp;crypt_type_tbl[0];
++	while(c-&gt;name) {
++		fprintf(stderr, "       %s\n", c-&gt;name);
++		c++;
++	}
+ 	exit(1);
+ }
+ 
+diff -urN util-linux-2.10r/mount/losetup.8 util-linux-2.10r-cr/mount/losetup.8
+--- util-linux-2.10r/mount/losetup.8	Fri Aug 11 07:11:30 2000
++++ util-linux-2.10r-cr/mount/losetup.8	Tue Jan  2 02:39:38 2001
+@@ -36,11 +36,51 @@
+ .PD 0
+ .IP \fBXOR\fP
+ use a simple XOR encryption.
+-.IP \fBDES\fP
+-use DES encryption. DES encryption is only available if the optional
+-DES package has been added to the kernel. DES encryption uses an additional
+-start value that is used to protect passwords against dictionary
+-attacks.
++.IP \fBBlowfish\fP
++use Blowfish encryption. Blowfish encryption is only available if you
++are using the international kernel and Blowfish encryption has been
++enabled in the Crypto API.
++.IP \fBTwofish\fP
++use Twofish encryption. Twofish encryption is only available if you are
++using the international kernel and Twofish encryption has been enabled
++in the Crypto API. Module loop_fish2 should be used rather than loop_gen.
++.IP \fBCAST128\fP
++use CAST128 encryption. CAST128 encryption is only available if you are
++using the international kernel and CAST128 encryption has been enabled
++in the Crypto API. Module loop_cast should be used rather than loop_gen.
++.IP \fBDES_EDE3\fP
++use DES_EDE3 (triple DES) encryption. DES_EDE3 encryption is only 
++available if you are using the international kernel and triple DES 
++encryption has been enabled in the Crypto API. 
++.IP \fBAES (Rijndael)\fP
++use AES (Rijndael) encryption. The Rijndael encryption is the 
++Advanced Encryption Standard winner and is only available if you
++are using the international kernel and AES (Rijndael) has been
++enabled in the Crypto API.
++.IP \fBDFC\fP
++use DFC encryption. DFC encryption is only available if you
++are using the international kernel and DFC encryption has been
++enabled in the Crypto API.
++.IP \fBIDEA\fP
++use IDEA encryption. IDEA encryption is only available if you
++are using the international kernel and IDEA encryption has been
++enabled in the Crypto API.
++.IP \fBMARS\fP
++use MARS encryption. MARS encryption is only available if you
++are using the international kernel and MARS encryption has been
++enabled in the Crypto API.
++.IP \fBRC5\fP
++use RC5 encryption. RC5 encryption is only available if you
++are using the international kernel and RC5 encryption has been
++enabled in the Crypto API.
++.IP \fBRC6\fP
++use RC6 encryption. RC6 encryption is only available if you
++are using the international kernel and RC6 encryption has been
++enabled in the Crypto API.
++.IP \fBSerpent\fP
++use Serpent encryption. Serpent encryption is only available if you
++are using the international kernel and Serpent encryption has been
++enabled in the Crypto API.
+ .PD
+ .RE
+ .IP "\fB\-o \fIoffset\fP"
+@@ -58,6 +98,7 @@
+ .SH FILES
+ .nf
+ /dev/loop0,/dev/loop1,...   loop devices (major=7)
++/proc/crypto/cipher/*       available ciphers
+ .fi
+ .SH EXAMPLE
+ If you are using the loadable module you must have the module loaded
+@@ -69,9 +110,8 @@
+ .nf
+ .IP
+ dd if=/dev/zero of=/file bs=1k count=100
+-losetup -e des /dev/loop0 /file
++losetup -e blowfish /dev/loop0 /file
+ Password:
+-Init (up to 16 hex digits):
+ mkfs -t ext2 /dev/loop0 100
+ mount -t ext2 /dev/loop0 /mnt
+  ...
+@@ -85,8 +125,12 @@
+ # rmmod loop
+ .LP
+ .fi
+-.SH RESTRICTION
+-DES encryption is painfully slow. On the other hand, XOR is terribly weak.
++.SH RESTRICTIONS
++DES encryption is painfully slow. On the other hand, XOR is terribly
++weak. Both are insecure nowadays. Some ciphers require a licence for
++you to be allowed to use them.
++.SH BUGS
++CAST, DES, RC5 and Twofish are currently broken and cannot be used.
+ .SH AUTHORS
+ .nf
+ Original version: Theodore Ts'o &lt;tytso@athena.mit.edu&gt;
+diff -urN util-linux-2.10r/mount/rmd160.c util-linux-2.10r-cr/mount/rmd160.c
+--- util-linux-2.10r/mount/rmd160.c	Wed Dec 31 19:00:00 1969
++++ util-linux-2.10r-cr/mount/rmd160.c	Sun Dec 31 02:47:21 2000
+@@ -0,0 +1,532 @@
++/* rmd160.c  -	RIPE-MD160
++ *	Copyright (C) 1998 Free Software Foundation, Inc.
++ */
++
++/* This file was part of GnuPG. Modified for use within the Linux
++ * mount utility by Marc Mutz &lt;Marc@Mutz.com&gt;. None of this code is
++ * by myself. I just removed everything that you don't need when all
++ * you want to do is to use rmd160_hash_buffer().
++ * My comments are marked with (mm).  */
++
++/* GnuPG is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License as published by
++ * the Free Software Foundation; either version 2 of the License, or
++ * (at your option) any later version.
++ *
++ * GnuPG is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not, write to the Free Software
++ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA */
++
++#include &lt;string.h&gt; /* (mm) for memcpy */
++#include &lt;endian.h&gt; /* (mm) for BIG_ENDIAN and BYTE_ORDER */
++#include "rmd160.h"
++
++/* (mm) these are used by the original GnuPG file. In order to modify
++ * that file not too much, we keep the notations. maybe it would be
++ * better to include linux/types.h and typedef __u32 to u32 and __u8
++ * to byte?  */
++typedef unsigned int u32; /* taken from e.g. util-linux's minix.h */
++typedef unsigned char byte;
++
++typedef struct {
++    u32  h0,h1,h2,h3,h4;
++    u32  nblocks;
++    byte buf[64];
++    int  count;
++} RMD160_CONTEXT;
++
++/****************
++ * Rotate a 32 bit integer by n bytes
++ */
++#if defined(__GNUC__) &amp;&amp; defined(__i386__)
++static inline u32
++rol( u32 x, int n)
++{
++	__asm__("roll %%cl,%0"
++		:"=r" (x)
++		:"0" (x),"c" (n));
++	return x;
++}
++#else
++  #define rol(x,n) ( ((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))) )
++#endif
++
++/*********************************
++ * RIPEMD-160 is not patented, see (as of 25.10.97)
++ *   http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
++ * Note that the code uses Little Endian byteorder, which is good for
++ * 386 etc, but we must add some conversion when used on a big endian box.
++ *
++ *
++ * Pseudo-code for RIPEMD-160
++ *
++ * RIPEMD-160 is an iterative hash function that operates on 32-bit words.
++ * The round function takes as input a 5-word chaining variable and a 16-word
++ * message block and maps this to a new chaining variable. All operations are
++ * defined on 32-bit words. Padding is identical to that of MD4.
++ *
++ *
++ * RIPEMD-160: definitions
++ *
++ *
++ *   nonlinear functions at bit level: exor, mux, -, mux, -
++ *
++ *   f(j, x, y, z) = x XOR y XOR z		  (0 &lt;= j &lt;= 15)
++ *   f(j, x, y, z) = (x AND y) OR (NOT(x) AND z)  (16 &lt;= j &lt;= 31)
++ *   f(j, x, y, z) = (x OR NOT(y)) XOR z	  (32 &lt;= j &lt;= 47)
++ *   f(j, x, y, z) = (x AND z) OR (y AND NOT(z))  (48 &lt;= j &lt;= 63)
++ *   f(j, x, y, z) = x XOR (y OR NOT(z))	  (64 &lt;= j &lt;= 79)
++ *
++ *
++ *   added constants (hexadecimal)
++ *
++ *   K(j) = 0x00000000	    (0 &lt;= j &lt;= 15)
++ *   K(j) = 0x5A827999	   (16 &lt;= j &lt;= 31)	int(2**30 x sqrt(2))
++ *   K(j) = 0x6ED9EBA1	   (32 &lt;= j &lt;= 47)	int(2**30 x sqrt(3))
++ *   K(j) = 0x8F1BBCDC	   (48 &lt;= j &lt;= 63)	int(2**30 x sqrt(5))
++ *   K(j) = 0xA953FD4E	   (64 &lt;= j &lt;= 79)	int(2**30 x sqrt(7))
++ *   K'(j) = 0x50A28BE6     (0 &lt;= j &lt;= 15)      int(2**30 x cbrt(2))
++ *   K'(j) = 0x5C4DD124    (16 &lt;= j &lt;= 31)      int(2**30 x cbrt(3))
++ *   K'(j) = 0x6D703EF3    (32 &lt;= j &lt;= 47)      int(2**30 x cbrt(5))
++ *   K'(j) = 0x7A6D76E9    (48 &lt;= j &lt;= 63)      int(2**30 x cbrt(7))
++ *   K'(j) = 0x00000000    (64 &lt;= j &lt;= 79)
++ *
++ *
++ *   selection of message word
++ *
++ *   r(j)      = j		      (0 &lt;= j &lt;= 15)
++ *   r(16..31) = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
++ *   r(32..47) = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
++ *   r(48..63) = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
++ *   r(64..79) = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
++ *   r0(0..15) = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
++ *   r0(16..31)= 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
++ *   r0(32..47)= 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
++ *   r0(48..63)= 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
++ *   r0(64..79)= 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
++ *
++ *
++ *   amount for rotate left (rol)
++ *
++ *   s(0..15)  = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
++ *   s(16..31) = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
++ *   s(32..47) = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
++ *   s(48..63) = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
++ *   s(64..79) = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
++ *   s'(0..15) = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
++ *   s'(16..31)= 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
++ *   s'(32..47)= 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
++ *   s'(48..63)= 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
++ *   s'(64..79)= 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
++ *
++ *
++ *   initial value (hexadecimal)
++ *
++ *   h0 = 0x67452301; h1 = 0xEFCDAB89; h2 = 0x98BADCFE; h3 = 0x10325476;
++ *							h4 = 0xC3D2E1F0;
++ *
++ *
++ * RIPEMD-160: pseudo-code
++ *
++ *   It is assumed that the message after padding consists of t 16-word blocks
++ *   that will be denoted with X[i][j], with 0 &lt;= i &lt;= t-1 and 0 &lt;= j &lt;= 15.
++ *   The symbol [+] denotes addition modulo 2**32 and rol_s denotes cyclic left
++ *   shift (rotate) over s positions.
++ *
++ *
++ *   for i := 0 to t-1 {
++ *	 A := h0; B := h1; C := h2; D = h3; E = h4;
++ *	 A' := h0; B' := h1; C' := h2; D' = h3; E' = h4;
++ *	 for j := 0 to 79 {
++ *	     T := rol_s(j)(A [+] f(j, B, C, D) [+] X[i][r(j)] [+] K(j)) [+] E;
++ *	     A := E; E := D; D := rol_10(C); C := B; B := T;
++ *	     T := rol_s'(j)(A' [+] f(79-j, B', C', D') [+] X[i][r'(j)]
++						       [+] K'(j)) [+] E';
++ *	     A' := E'; E' := D'; D' := rol_10(C'); C' := B'; B' := T;
++ *	 }
++ *	 T := h1 [+] C [+] D'; h1 := h2 [+] D [+] E'; h2 := h3 [+] E [+] A';
++ *	 h3 := h4 [+] A [+] B'; h4 := h0 [+] B [+] C'; h0 := T;
++ *   }
++ */
++
++/* Some examples:
++ * ""                    9c1185a5c5e9fc54612808977ee8f548b2258d31
++ * "a"                   0bdc9d2d256b3ee9daae347be6f4dc835a467ffe
++ * "abc"                 8eb208f7e05d987a9b044a8e98c6b087f15a0bfc
++ * "message digest"      5d0689ef49d2fae572b881b123a85ffa21595f36
++ * "a...z"               f71c27109c692c1b56bbdceb5b9d2865b3708dbc
++ * "abcdbcde...nopq"     12a053384a9c0c88e405a06c27dcf49ada62eb2b
++ * "A...Za...z0...9"     b0e20b6e3116640286ed3a87a5713079b21f5189
++ * 8 times "1234567890"  9b752e45573d4b39f4dbd3323cab82bf63326bfb
++ * 1 million times "a"   52783243c1697bdbe16d37f97f68f08325dc1528
++ */
++
++
++static void
++rmd160_init( RMD160_CONTEXT *hd )
++{
++    hd-&gt;h0 = 0x67452301;
++    hd-&gt;h1 = 0xEFCDAB89;
++    hd-&gt;h2 = 0x98BADCFE;
++    hd-&gt;h3 = 0x10325476;
++    hd-&gt;h4 = 0xC3D2E1F0;
++    hd-&gt;nblocks = 0;
++    hd-&gt;count = 0;
++}
++
++
++
++/****************
++ * Transform the message X which consists of 16 32-bit-words
++ */
++static void
++transform( RMD160_CONTEXT *hd, byte *data )
++{
++    u32 a,b,c,d,e,aa,bb,cc,dd,ee,t;
++  #if BYTE_ORDER == BIG_ENDIAN
++    u32 x[16];
++    { int i;
++      byte *p2, *p1;
++      for(i=0, p1=data, p2=(byte*)x; i &lt; 16; i++, p2 += 4 ) {
++	p2[3] = *p1++;
++	p2[2] = *p1++;
++	p2[1] = *p1++;
++	p2[0] = *p1++;
++      }
++    }
++  #else
++   #if 0
++    u32 *x =(u32*)data;
++   #else
++    /* this version is better because it is always aligned;
++     * The performance penalty on a 586-100 is about 6% which
++     * is acceptable - because the data is more local it might
++     * also be possible that this is faster on some machines.
++     * This function (when compiled with -02 on gcc 2.7.2)
++     * executes on a 586-100 (39.73 bogomips) at about 1900kb/sec;
++     * [measured with a 4MB data and "gpgm --print-md rmd160"] */
++    u32 x[16];
++    memcpy( x, data, 64 );
++   #endif
++  #endif
++
++
++#define K0  0x00000000
++#define K1  0x5A827999
++#define K2  0x6ED9EBA1
++#define K3  0x8F1BBCDC
++#define K4  0xA953FD4E
++#define KK0 0x50A28BE6
++#define KK1 0x5C4DD124
++#define KK2 0x6D703EF3
++#define KK3 0x7A6D76E9
++#define KK4 0x00000000
++#define F0(x,y,z)   ( (x) ^ (y) ^ (z) )
++#define F1(x,y,z)   ( ((x) &amp; (y)) | (~(x) &amp; (z)) )
++#define F2(x,y,z)   ( ((x) | ~(y)) ^ (z) )
++#define F3(x,y,z)   ( ((x) &amp; (z)) | ((y) &amp; ~(z)) )
++#define F4(x,y,z)   ( (x) ^ ((y) | ~(z)) )
++#define R(a,b,c,d,e,f,k,r,s) do { t = a + f(b,c,d) + k + x[r]; \
++				  a = rol(t,s) + e;	       \
++				  c = rol(c,10);	       \
++				} while(0)
++
++    /* left lane */
++    a = hd-&gt;h0;
++    b = hd-&gt;h1;
++    c = hd-&gt;h2;
++    d = hd-&gt;h3;
++    e = hd-&gt;h4;
++    R( a, b, c, d, e, F0, K0,  0, 11 );
++    R( e, a, b, c, d, F0, K0,  1, 14 );
++    R( d, e, a, b, c, F0, K0,  2, 15 );
++    R( c, d, e, a, b, F0, K0,  3, 12 );
++    R( b, c, d, e, a, F0, K0,  4,  5 );
++    R( a, b, c, d, e, F0, K0,  5,  8 );
++    R( e, a, b, c, d, F0, K0,  6,  7 );
++    R( d, e, a, b, c, F0, K0,  7,  9 );
++    R( c, d, e, a, b, F0, K0,  8, 11 );
++    R( b, c, d, e, a, F0, K0,  9, 13 );
++    R( a, b, c, d, e, F0, K0, 10, 14 );
++    R( e, a, b, c, d, F0, K0, 11, 15 );
++    R( d, e, a, b, c, F0, K0, 12,  6 );
++    R( c, d, e, a, b, F0, K0, 13,  7 );
++    R( b, c, d, e, a, F0, K0, 14,  9 );
++    R( a, b, c, d, e, F0, K0, 15,  8 );
++    R( e, a, b, c, d, F1, K1,  7,  7 );
++    R( d, e, a, b, c, F1, K1,  4,  6 );
++    R( c, d, e, a, b, F1, K1, 13,  8 );
++    R( b, c, d, e, a, F1, K1,  1, 13 );
++    R( a, b, c, d, e, F1, K1, 10, 11 );
++    R( e, a, b, c, d, F1, K1,  6,  9 );
++    R( d, e, a, b, c, F1, K1, 15,  7 );
++    R( c, d, e, a, b, F1, K1,  3, 15 );
++    R( b, c, d, e, a, F1, K1, 12,  7 );
++    R( a, b, c, d, e, F1, K1,  0, 12 );
++    R( e, a, b, c, d, F1, K1,  9, 15 );
++    R( d, e, a, b, c, F1, K1,  5,  9 );
++    R( c, d, e, a, b, F1, K1,  2, 11 );
++    R( b, c, d, e, a, F1, K1, 14,  7 );
++    R( a, b, c, d, e, F1, K1, 11, 13 );
++    R( e, a, b, c, d, F1, K1,  8, 12 );
++    R( d, e, a, b, c, F2, K2,  3, 11 );
++    R( c, d, e, a, b, F2, K2, 10, 13 );
++    R( b, c, d, e, a, F2, K2, 14,  6 );
++    R( a, b, c, d, e, F2, K2,  4,  7 );
++    R( e, a, b, c, d, F2, K2,  9, 14 );
++    R( d, e, a, b, c, F2, K2, 15,  9 );
++    R( c, d, e, a, b, F2, K2,  8, 13 );
++    R( b, c, d, e, a, F2, K2,  1, 15 );
++    R( a, b, c, d, e, F2, K2,  2, 14 );
++    R( e, a, b, c, d, F2, K2,  7,  8 );
++    R( d, e, a, b, c, F2, K2,  0, 13 );
++    R( c, d, e, a, b, F2, K2,  6,  6 );
++    R( b, c, d, e, a, F2, K2, 13,  5 );
++    R( a, b, c, d, e, F2, K2, 11, 12 );
++    R( e, a, b, c, d, F2, K2,  5,  7 );
++    R( d, e, a, b, c, F2, K2, 12,  5 );
++    R( c, d, e, a, b, F3, K3,  1, 11 );
++    R( b, c, d, e, a, F3, K3,  9, 12 );
++    R( a, b, c, d, e, F3, K3, 11, 14 );
++    R( e, a, b, c, d, F3, K3, 10, 15 );
++    R( d, e, a, b, c, F3, K3,  0, 14 );
++    R( c, d, e, a, b, F3, K3,  8, 15 );
++    R( b, c, d, e, a, F3, K3, 12,  9 );
++    R( a, b, c, d, e, F3, K3,  4,  8 );
++    R( e, a, b, c, d, F3, K3, 13,  9 );
++    R( d, e, a, b, c, F3, K3,  3, 14 );
++    R( c, d, e, a, b, F3, K3,  7,  5 );
++    R( b, c, d, e, a, F3, K3, 15,  6 );
++    R( a, b, c, d, e, F3, K3, 14,  8 );
++    R( e, a, b, c, d, F3, K3,  5,  6 );
++    R( d, e, a, b, c, F3, K3,  6,  5 );
++    R( c, d, e, a, b, F3, K3,  2, 12 );
++    R( b, c, d, e, a, F4, K4,  4,  9 );
++    R( a, b, c, d, e, F4, K4,  0, 15 );
++    R( e, a, b, c, d, F4, K4,  5,  5 );
++    R( d, e, a, b, c, F4, K4,  9, 11 );
++    R( c, d, e, a, b, F4, K4,  7,  6 );
++    R( b, c, d, e, a, F4, K4, 12,  8 );
++    R( a, b, c, d, e, F4, K4,  2, 13 );
++    R( e, a, b, c, d, F4, K4, 10, 12 );
++    R( d, e, a, b, c, F4, K4, 14,  5 );
++    R( c, d, e, a, b, F4, K4,  1, 12 );
++    R( b, c, d, e, a, F4, K4,  3, 13 );
++    R( a, b, c, d, e, F4, K4,  8, 14 );
++    R( e, a, b, c, d, F4, K4, 11, 11 );
++    R( d, e, a, b, c, F4, K4,  6,  8 );
++    R( c, d, e, a, b, F4, K4, 15,  5 );
++    R( b, c, d, e, a, F4, K4, 13,  6 );
++
++    aa = a; bb = b; cc = c; dd = d; ee = e;
++
++    /* right lane */
++    a = hd-&gt;h0;
++    b = hd-&gt;h1;
++    c = hd-&gt;h2;
++    d = hd-&gt;h3;
++    e = hd-&gt;h4;
++    R( a, b, c, d, e, F4, KK0,	5,  8);
++    R( e, a, b, c, d, F4, KK0, 14,  9);
++    R( d, e, a, b, c, F4, KK0,	7,  9);
++    R( c, d, e, a, b, F4, KK0,	0, 11);
++    R( b, c, d, e, a, F4, KK0,	9, 13);
++    R( a, b, c, d, e, F4, KK0,	2, 15);
++    R( e, a, b, c, d, F4, KK0, 11, 15);
++    R( d, e, a, b, c, F4, KK0,	4,  5);
++    R( c, d, e, a, b, F4, KK0, 13,  7);
++    R( b, c, d, e, a, F4, KK0,	6,  7);
++    R( a, b, c, d, e, F4, KK0, 15,  8);
++    R( e, a, b, c, d, F4, KK0,	8, 11);
++    R( d, e, a, b, c, F4, KK0,	1, 14);
++    R( c, d, e, a, b, F4, KK0, 10, 14);
++    R( b, c, d, e, a, F4, KK0,	3, 12);
++    R( a, b, c, d, e, F4, KK0, 12,  6);
++    R( e, a, b, c, d, F3, KK1,	6,  9);
++    R( d, e, a, b, c, F3, KK1, 11, 13);
++    R( c, d, e, a, b, F3, KK1,	3, 15);
++    R( b, c, d, e, a, F3, KK1,	7,  7);
++    R( a, b, c, d, e, F3, KK1,	0, 12);
++    R( e, a, b, c, d, F3, KK1, 13,  8);
++    R( d, e, a, b, c, F3, KK1,	5,  9);
++    R( c, d, e, a, b, F3, KK1, 10, 11);
++    R( b, c, d, e, a, F3, KK1, 14,  7);
++    R( a, b, c, d, e, F3, KK1, 15,  7);
++    R( e, a, b, c, d, F3, KK1,	8, 12);
++    R( d, e, a, b, c, F3, KK1, 12,  7);
++    R( c, d, e, a, b, F3, KK1,	4,  6);
++    R( b, c, d, e, a, F3, KK1,	9, 15);
++    R( a, b, c, d, e, F3, KK1,	1, 13);
++    R( e, a, b, c, d, F3, KK1,	2, 11);
++    R( d, e, a, b, c, F2, KK2, 15,  9);
++    R( c, d, e, a, b, F2, KK2,	5,  7);
++    R( b, c, d, e, a, F2, KK2,	1, 15);
++    R( a, b, c, d, e, F2, KK2,	3, 11);
++    R( e, a, b, c, d, F2, KK2,	7,  8);
++    R( d, e, a, b, c, F2, KK2, 14,  6);
++    R( c, d, e, a, b, F2, KK2,	6,  6);
++    R( b, c, d, e, a, F2, KK2,	9, 14);
++    R( a, b, c, d, e, F2, KK2, 11, 12);
++    R( e, a, b, c, d, F2, KK2,	8, 13);
++    R( d, e, a, b, c, F2, KK2, 12,  5);
++    R( c, d, e, a, b, F2, KK2,	2, 14);
++    R( b, c, d, e, a, F2, KK2, 10, 13);
++    R( a, b, c, d, e, F2, KK2,	0, 13);
++    R( e, a, b, c, d, F2, KK2,	4,  7);
++    R( d, e, a, b, c, F2, KK2, 13,  5);
++    R( c, d, e, a, b, F1, KK3,	8, 15);
++    R( b, c, d, e, a, F1, KK3,	6,  5);
++    R( a, b, c, d, e, F1, KK3,	4,  8);
++    R( e, a, b, c, d, F1, KK3,	1, 11);
++    R( d, e, a, b, c, F1, KK3,	3, 14);
++    R( c, d, e, a, b, F1, KK3, 11, 14);
++    R( b, c, d, e, a, F1, KK3, 15,  6);
++    R( a, b, c, d, e, F1, KK3,	0, 14);
++    R( e, a, b, c, d, F1, KK3,	5,  6);
++    R( d, e, a, b, c, F1, KK3, 12,  9);
++    R( c, d, e, a, b, F1, KK3,	2, 12);
++    R( b, c, d, e, a, F1, KK3, 13,  9);
++    R( a, b, c, d, e, F1, KK3,	9, 12);
++    R( e, a, b, c, d, F1, KK3,	7,  5);
++    R( d, e, a, b, c, F1, KK3, 10, 15);
++    R( c, d, e, a, b, F1, KK3, 14,  8);
++    R( b, c, d, e, a, F0, KK4, 12,  8);
++    R( a, b, c, d, e, F0, KK4, 15,  5);
++    R( e, a, b, c, d, F0, KK4, 10, 12);
++    R( d, e, a, b, c, F0, KK4,	4,  9);
++    R( c, d, e, a, b, F0, KK4,	1, 12);
++    R( b, c, d, e, a, F0, KK4,	5,  5);
++    R( a, b, c, d, e, F0, KK4,	8, 14);
++    R( e, a, b, c, d, F0, KK4,	7,  6);
++    R( d, e, a, b, c, F0, KK4,	6,  8);
++    R( c, d, e, a, b, F0, KK4,	2, 13);
++    R( b, c, d, e, a, F0, KK4, 13,  6);
++    R( a, b, c, d, e, F0, KK4, 14,  5);
++    R( e, a, b, c, d, F0, KK4,	0, 15);
++    R( d, e, a, b, c, F0, KK4,	3, 13);
++    R( c, d, e, a, b, F0, KK4,	9, 11);
++    R( b, c, d, e, a, F0, KK4, 11, 11);
++
++
++    t	   = hd-&gt;h1 + d + cc;
++    hd-&gt;h1 = hd-&gt;h2 + e + dd;
++    hd-&gt;h2 = hd-&gt;h3 + a + ee;
++    hd-&gt;h3 = hd-&gt;h4 + b + aa;
++    hd-&gt;h4 = hd-&gt;h0 + c + bb;
++    hd-&gt;h0 = t;
++}
++
++
++/* Update the message digest with the contents
++ * of INBUF with length INLEN.
++ */
++static void
++rmd160_write( RMD160_CONTEXT *hd, byte *inbuf, size_t inlen)
++{
++    if( hd-&gt;count == 64 ) { /* flush the buffer */
++	transform( hd, hd-&gt;buf );
++	hd-&gt;count = 0;
++	hd-&gt;nblocks++;
++    }
++    if( !inbuf )
++	return;
++    if( hd-&gt;count ) {
++	for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
++	    hd-&gt;buf[hd-&gt;count++] = *inbuf++;
++	rmd160_write( hd, NULL, 0 );
++	if( !inlen )
++	    return;
++    }
++
++    while( inlen &gt;= 64 ) {
++	transform( hd, inbuf );
++	hd-&gt;count = 0;
++	hd-&gt;nblocks++;
++	inlen -= 64;
++	inbuf += 64;
++    }
++    for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
++	hd-&gt;buf[hd-&gt;count++] = *inbuf++;
++}
++
++/* The routine terminates the computation
++ */
++
++static void
++rmd160_final( RMD160_CONTEXT *hd )
++{
++    u32 t, msb, lsb;
++    byte *p;
++
++    rmd160_write(hd, NULL, 0); /* flush */;
++
++    msb = 0;
++    t = hd-&gt;nblocks;
++    if( (lsb = t &lt;&lt; 6) &lt; t ) /* multiply by 64 to make a byte count */
++	msb++;
++    msb += t &gt;&gt; 26;
++    t = lsb;
++    if( (lsb = t + hd-&gt;count) &lt; t ) /* add the count */
++	msb++;
++    t = lsb;
++    if( (lsb = t &lt;&lt; 3) &lt; t ) /* multiply by 8 to make a bit count */
++	msb++;
++    msb += t &gt;&gt; 29;
++
++    if( hd-&gt;count &lt; 56 ) { /* enough room */
++	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad */
++	while( hd-&gt;count &lt; 56 )
++	    hd-&gt;buf[hd-&gt;count++] = 0;  /* pad */
++    }
++    else { /* need one extra block */
++	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad character */
++	while( hd-&gt;count &lt; 64 )
++	    hd-&gt;buf[hd-&gt;count++] = 0;
++	rmd160_write(hd, NULL, 0);  /* flush */;
++	memset(hd-&gt;buf, 0, 56 ); /* fill next block with zeroes */
++    }
++    /* append the 64 bit count */
++    hd-&gt;buf[56] = lsb	   ;
++    hd-&gt;buf[57] = lsb &gt;&gt;  8;
++    hd-&gt;buf[58] = lsb &gt;&gt; 16;
++    hd-&gt;buf[59] = lsb &gt;&gt; 24;
++    hd-&gt;buf[60] = msb	   ;
++    hd-&gt;buf[61] = msb &gt;&gt;  8;
++    hd-&gt;buf[62] = msb &gt;&gt; 16;
++    hd-&gt;buf[63] = msb &gt;&gt; 24;
++    transform( hd, hd-&gt;buf );
++
++    p = hd-&gt;buf;
++  #if BYTE_ORDER == BIG_ENDIAN
++    #define X(a) do { *p++ = hd-&gt;h##a	   ; *p++ = hd-&gt;h##a &gt;&gt; 8;	\
++		      *p++ = hd-&gt;h##a &gt;&gt; 16; *p++ = hd-&gt;h##a &gt;&gt; 24; } while(0)
++  #else /* little endian */
++    #define X(a) do { *(u32*)p = hd-&gt;h##a ; p += 4; } while(0)
++  #endif
++    X(0);
++    X(1);
++    X(2);
++    X(3);
++    X(4);
++  #undef X
++}
++
++/****************
++ * Shortcut functions which puts the hash value of the supplied buffer
++ * into outbuf which must have a size of 20 bytes.
++ */
++void
++rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length )
++{
++    RMD160_CONTEXT hd;
++
++    rmd160_init( &amp;hd );
++    rmd160_write( &amp;hd, (byte*)buffer, length );
++    rmd160_final( &amp;hd );
++    memcpy( outbuf, hd.buf, 20 );
++}
+diff -urN util-linux-2.10r/mount/rmd160.h util-linux-2.10r-cr/mount/rmd160.h
+--- util-linux-2.10r/mount/rmd160.h	Wed Dec 31 19:00:00 1969
++++ util-linux-2.10r-cr/mount/rmd160.h	Sun Dec 31 02:47:21 2000
+@@ -0,0 +1,9 @@
++#ifndef RMD160_H
++#define RMD160_H
++
++void
++rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length );
++
++#endif /*RMD160_H*/
++
++
diff -urN linux-2.2.18/include/linux/crypto.h linux-2.2.18-cr/include/linux/crypto.h
--- linux-2.2.18/include/linux/crypto.h	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/include/linux/crypto.h	Mon Jan  1 17:14:35 2001
@@ -41,8 +41,8 @@
 #define CIPHER_CAST256  14
 #define CIPHER_DFC      15
 #define CIPHER_RIJNDAEL 16
+#define CIPHER_AES      16
 #define CIPHER_RC5      17
-#define CIPHER_AES      18
 #define MAX_CIPHER	20
 #define CIPHER_CBC    0x00010000
 
diff -urN linux-2.2.18/include/linux/loop.h linux-2.2.18-cr/include/linux/loop.h
--- linux-2.2.18/include/linux/loop.h	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/include/linux/loop.h	Mon Jan  1 17:21:11 2001
@@ -105,8 +105,9 @@
 #define LO_CRYPT_CAST256  14
 #define LO_CRYPT_DFC      15
 #define LO_CRYPT_RIJNDAEL 16
+#define LO_CRYPT_AES      16
 #define LO_CRYPT_RC5      17
 #define MAX_LO_CRYPT      20
 
 #ifdef __KERNEL__
 /* Support for loadable transfer modules */


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010106142156</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-06 14:21:56-0400</timestampReceived><subject>Re: patches &amp; Linux Encryption HOWTO</subject><body>

On Fri, Jan 05, 2001 at 10:18:08PM +0100, Christoph Hertel wrote:
&gt; Hello everyone,
&gt; 
&gt; I did not find a reference to the archive of this ML in the 'Linux
&gt; Encryption HOWTO', so if I ask questions asked before consider my first
&gt; suggestion and add a link/hint in section 1.4 "Mailing List".
&gt; 
&gt; Now for my beginner's question: I have a Debian system running with the
&gt; package util-linux 2.10q-1. The changelog.Debian.gz states for version
&gt; 2.10d-5:
&gt; * Included patch from "J.H.M. Dassen (Ray)" &lt;jhm@cistron.nl&gt;:
&gt;   - Restored enhanced losetup(8) manpage.
&gt;   - Restored encrypted filesystem support, by applying util-linux-2.9w from 
&gt;     patch-int-2.2.13.3.gz as found on ftp.kerneli.org (modified to work with 
&gt;     Debian's kernel-patch-int's crypto.h).
&gt;   (closes: #54657)
&gt; Does this mean that I can skip section 4.2 "Patching the util-linux
&gt; source" in the HOWTO? If yes, then please add a comment to the HOWTO.
&gt; What is "Debian's kernel-patch-int's crypto.h"? Is there a special patch
&gt; for Debian?
&gt; 

If you plan on using features (esp new ciphers) introduced in a patch
later than 2.2.13.3, you'll want to patch util-linux yourself.

Also, soon there will be changes in how losetup talks to the kernel
that hopefully should end the need to change util-linux whenever a
cipher is added to the kernel.

&gt; Next Question: Kernel 2.2.14 is running very smoothly on my machine, I
&gt; have a slow 33.6 modem and [etc.] -&gt; I don't want to update my kernel to
&gt; 2.2.18 (or whatever is out there, or even 2.4.0). May I use the 2.2.17.6
&gt; crypto patch or do I have to use the 2.2.14.x? Yes, the HOWTO says "It
&gt; should apply without rejects to all recent 2.2.1x kernels." But I'm
&gt; afraid of messing things up.
&gt; 

You should be able to patch 2.2.14 with the 2.2.17.x patches.  No
guarantees though.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107143245</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-07 14:32:45-0400</timestampReceived><subject>Re: patches; problems w/ AES, Twofish + losetup</subject><body>

On Sun, Jan 07, 2001 at 12:19:50PM +0100, Christoph Hertel wrote:
&gt; * Alexander S A Kjeldaas [2001-01-06]:
&gt; 
&gt; &gt; &gt; Does this mean that I can skip section 4.2 "Patching the util-linux
&gt; &gt; &gt; source" in the HOWTO?
&gt; &gt; If you plan on using features (esp new ciphers) introduced in a patch
&gt; &gt; later than 2.2.13.3, you'll want to patch util-linux yourself.
&gt; I patched it and the make failed; the HOWTO seems to have the answer:
&gt; 
&gt; "If the make step fails, check that /usr/include/linux and
&gt; /usr/include/asm resp. are symlinks to include/linux and
&gt; include/asm-arch resp. Some distributions (e.g. Debian) only have a copy
&gt; of the kernel include there. If you change the kernel, they
&gt; become outdated."
&gt; 
&gt; What is meant by "include/linux and include/asm-arch"? I chose
&gt; /usr/src/linux/include/linux/ and /usr/src/linux/include/asm; the latter
&gt; points to asm-i386 (I have a PPro).  The make didn't complain. Is it
&gt; about right what I did? Or should I change it now back to the original
&gt; state?
&gt; 

It's up to you.  These directories contain kernel header files, and
they should generally have kernel headers that represent kernel
interfaces that your currently running kernel supports.  So just
leaving them as you've changed them is probably ok.

On the other hand, I think it's possible to patch util-linux into
looking for kernel-headers in a specific place instead of
/usr/include/linux.  So that's an alternative - cleaner IMO.  But
generally - don't bother about this.. you're fine.

&gt; &gt; You should be able to patch [linux] 2.2.14 with the [linux-int]
&gt; &gt; 2.2.17.x patches.  No guarantees though.
&gt; I patched a 2.2.16 kernel with the 2.2.18.3 int_patch and
&gt; util-linux-2.10q with the util-linux-2.10o.int.patch; configure
&gt; complained:
&gt; "You don't have &lt;linux/blkpg.h&gt;"
&gt; "You don't have __NR_pivot_root"
&gt; "Your rpcgen output does not compile"
&gt; 

Don't know what these messages mean.

&gt; And strange things are happening:
&gt; /home/chh# losetup -e Twofish /dev/loop0 cryptotest   
&gt; Password :
&gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; /home/chh# losetup -e AES /dev/loop0 cryptotest 
&gt; Unsupported encryption type AES
&gt; /home/chh# losetup -e Rijndael /dev/loop0 cryptotest 
&gt; Unsupported encryption type Rijndael
&gt; /home/chh# losetup -e Blowfish /dev/loop0 cryptotest 
&gt; Password :
&gt; The last one worked, but I compiled my kernel with AES, Twofish and
&gt; Blowfish (CONFIG_CIPHER_AES=m, CONFIG_CIPHER_TWOFISH=m,
&gt; CONFIG_CIPHER_BLOWFISH=m, but "# CONFIG_CIPHER_RIJNDAEL is not set")
&gt; 

I always use lower-case names.  From the top of my head I'm not sure
that it works with mixed-case (I'll have to fix that I think).

&gt; modprobe complains in my logs:
&gt; modprobe: modprobe: Can't locate module loop-xfer-3                                 \
&gt;                 
&gt; modprobe: modprobe: Can't locate module cipher-3
&gt; 
&gt; kern.log only said:
&gt; kernel: cryptoapi: Registered blowfish (4)                                          \
&gt;                 
&gt; kernel: cryptoapi: Registered blowfish-cbc (65540) 
&gt; 
&gt; in /var/log/ksymoops/20010107112329.modules (the last one):
&gt; blowfish                8608   0 (autoclean) (unused)                               \
&gt;  loop_gen                1312   1 (autoclean)                                       \
&gt;  cryptoapi               1872   2 (autoclean) [blowfish loop_gen]                   \
&gt;  loop                    8032   2 (autoclean) [loop_gen]
&gt; 
&gt; my modules.conf has all the modules:
&gt; alias loop-xfer-3       loop_fish2                                              
&gt; alias cipher-3          fish2                                                   
&gt; alias cipher-4          blowfish
&gt; alias cipher-16         rijndael
&gt; 
&gt; and they are, where they should be in /lib/modules/2.2.16:
&gt; 10104 Jan  6 15:21 blowfish.o
&gt; 18148 Jan  6 15:21 rijndael.o
&gt; 40564 Jan  6 15:21 twofish.o
&gt; 

You cipher-3 alias is wrong - it should point to twofish, not fish2.

&gt; 
&gt; However, all the other things seem to work (mounting, writing to, moving
&gt; the crypto-file, etc.). Thanks for all your help!
&gt; 

That's good to hear. :-)

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010105211808</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-01-05 21:18:08-0400</timestampReceived><subject>patches &amp; Linux Encryption HOWTO</subject><body>

Hello everyone,

I did not find a reference to the archive of this ML in the 'Linux
Encryption HOWTO', so if I ask questions asked before consider my first
suggestion and add a link/hint in section 1.4 "Mailing List".

Now for my beginner's question: I have a Debian system running with the
package util-linux 2.10q-1. The changelog.Debian.gz states for version
2.10d-5:
* Included patch from "J.H.M. Dassen (Ray)" &lt;jhm@cistron.nl&gt;:
  - Restored enhanced losetup(8) manpage.
  - Restored encrypted filesystem support, by applying util-linux-2.9w from 
    patch-int-2.2.13.3.gz as found on ftp.kerneli.org (modified to work with 
    Debian's kernel-patch-int's crypto.h).
  (closes: #54657)
Does this mean that I can skip section 4.2 "Patching the util-linux
source" in the HOWTO? If yes, then please add a comment to the HOWTO.
What is "Debian's kernel-patch-int's crypto.h"? Is there a special patch
for Debian?

Next Question: Kernel 2.2.14 is running very smoothly on my machine, I
have a slow 33.6 modem and [etc.] -&gt; I don't want to update my kernel to
2.2.18 (or whatever is out there, or even 2.4.0). May I use the 2.2.17.6
crypto patch or do I have to use the 2.2.14.x? Yes, the HOWTO says "It
should apply without rejects to all recent 2.2.1x kernels." But I'm
afraid of messing things up.

That's for now. Nevertheless I found typos:
* section 1.3 "Aims of this document":
"These efford(t?)s are"
"Kjeldaas ( astor@fast.no) in" (space in front of email-address).
* section 4.3 "Making an Encrypted Folder"
"home dire(c)tory of"
"Just make sure it contains no data and replace the filename ~/.config
in the following discussion" (is ~/.config meant, or ~/.crypto ?)
* section 4.1 "Configuring the Kernel"
"The help texts as well as the glossary at the end of this document will
help you with that" (the ciphers are not discussed in the glossary)
* section 4.4 "Automagically Encrypting the Home Directory with `EHD''"
"If you are interested, give my(e?) a call."
* section 6.1.1 "How can I encrypt swap?"
"See the sections on individual approaches below." (there's nothing
below?)


Btw, great job with the HOWTO and all! Thanks! I'm not a native speaker
and sometimes very confused, so please excuse anything wrong above :-)


Christoph

p.s. Are there any plans to replace/merge the "Loopback Encrypted
Filesystem HOWTO" with the "Linux Encryption HOWTO"? The former was the
first HOWTO I found on this topic, but it seems to be outdated and not
actively maintained anymore.
-- 
PGP (GnuPG) encrypted mail welcome! (Key 0xBAC8E4D5)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107111950</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-01-07 11:19:50-0400</timestampReceived><subject>Re: patches; problems w/ AES, Twofish + losetup</subject><body>

* Alexander S A Kjeldaas [2001-01-06]:

&gt; &gt; Does this mean that I can skip section 4.2 "Patching the util-linux
&gt; &gt; source" in the HOWTO?
&gt; If you plan on using features (esp new ciphers) introduced in a patch
&gt; later than 2.2.13.3, you'll want to patch util-linux yourself.
I patched it and the make failed; the HOWTO seems to have the answer:

"If the make step fails, check that /usr/include/linux and
/usr/include/asm resp. are symlinks to include/linux and
include/asm-arch resp. Some distributions (e.g. Debian) only have a copy
of the kernel include there. If you change the kernel, they
become outdated."

What is meant by "include/linux and include/asm-arch"? I chose
/usr/src/linux/include/linux/ and /usr/src/linux/include/asm; the latter
points to asm-i386 (I have a PPro).  The make didn't complain. Is it
about right what I did? Or should I change it now back to the original
state?

&gt; You should be able to patch [linux] 2.2.14 with the [linux-int]
&gt; 2.2.17.x patches.  No guarantees though.
I patched a 2.2.16 kernel with the 2.2.18.3 int_patch and
util-linux-2.10q with the util-linux-2.10o.int.patch; configure
complained:
"You don't have &lt;linux/blkpg.h&gt;"
"You don't have __NR_pivot_root"
"Your rpcgen output does not compile"

And strange things are happening:
/home/chh# losetup -e Twofish /dev/loop0 cryptotest   
Password :
ioctl: LOOP_SET_STATUS: Invalid argument
/home/chh# losetup -e AES /dev/loop0 cryptotest 
Unsupported encryption type AES
/home/chh# losetup -e Rijndael /dev/loop0 cryptotest 
Unsupported encryption type Rijndael
/home/chh# losetup -e Blowfish /dev/loop0 cryptotest 
Password :
The last one worked, but I compiled my kernel with AES, Twofish and
Blowfish (CONFIG_CIPHER_AES=m, CONFIG_CIPHER_TWOFISH=m,
CONFIG_CIPHER_BLOWFISH=m, but "# CONFIG_CIPHER_RIJNDAEL is not set")

modprobe complains in my logs:
modprobe: modprobe: Can't locate module loop-xfer-3                                   \
                
modprobe: modprobe: Can't locate module cipher-3

kern.log only said:
kernel: cryptoapi: Registered blowfish (4)                                            \
                
kernel: cryptoapi: Registered blowfish-cbc (65540) 

in /var/log/ksymoops/20010107112329.modules (the last one):
blowfish                8608   0 (autoclean) (unused)                                 \
 loop_gen                1312   1 (autoclean)                                         \
 cryptoapi               1872   2 (autoclean) [blowfish loop_gen]                     \
 loop                    8032   2 (autoclean) [loop_gen]

my modules.conf has all the modules:
alias loop-xfer-3       loop_fish2                                              
alias cipher-3          fish2                                                   
alias cipher-4          blowfish
alias cipher-16         rijndael

and they are, where they should be in /lib/modules/2.2.16:
10104 Jan  6 15:21 blowfish.o
18148 Jan  6 15:21 rijndael.o
40564 Jan  6 15:21 twofish.o


However, all the other things seem to work (mounting, writing to, moving
the crypto-file, etc.). Thanks for all your help!


Christoph
-- 
PGP (GnuPG) encrypted mail welcome! (Key 0xBAC8E4D5)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010107195943</emailId><senderName></senderName><senderEmail>ernst.molitor</senderEmail><timestampReceived>2001-01-07 19:59:43-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

Dear Alexander, 

thank you very much for your patch, which you've been so kind as to
supply faster than I could have imagined, and which works like a charm
on my Linux box. Now, both old and newly created encrypted file
systems work fine under Linux-2.4.0...

Again, thank you very much.

Best regards,

Ernst

&gt;It's a bug in the util-linux patch.  For "old" ciphers (i.e. twofish,
&gt;blowfish and others that worked in previous versions of util-linux),
&gt;it will try to use the LOOP_SET_STATUS ioctl wrongly.
&gt;
&gt;The attached patch should hopefully fix that by first trying the
&gt;new-style ioctl, and then falling back to the old-style ioctl if it
&gt;didn't work.
&gt;
&gt;astor
&gt; 
&gt; [...]

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107213318</emailId><senderName>Ton Hospel</senderName><senderEmail>linux-crypto@ton.iguana.be</senderEmail><timestampReceived>2001-01-07 21:33:18-0400</timestampReceived><subject>Re: util-linux patch bug: too long password</subject><body>

In article &lt;20010107185251.B85325@midten.fast.no&gt;,
	Alexander S A Kjeldaas &lt;Alexander.Kjeldaas@fast.no&gt; writes:
&gt; On Sun, Jan 07, 2001 at 06:22:53PM +0100, Martin Douda wrote:
&gt;&gt; Hi,
&gt;&gt; I'm mailing to you as to mainitainer of kernel international patches. 
&gt;&gt; In current (2.4.0.1) crypto patch is patch for util-linux, containing this
&gt;&gt; lines:
&gt;&gt; 
&gt;&gt; +	case LO_CRYPT_FISH2:
&gt;&gt; +	case LO_CRYPT_BLOW:
&gt;&gt; +	case LO_CRYPT_IDEA:
&gt;&gt; +	case LO_CRYPT_CAST128:
&gt;&gt; +		pass = xgetpass(pfd, _("Password :"));
&gt;&gt; +		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
&gt;&gt; +		passwdbuff[0] = 'A';
&gt;&gt; +		rmd160_hash_buffer(keybits,pass,strlen(pass));
&gt;&gt; +		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
&gt;&gt; 
&gt;&gt; As you probably know, strncpy will not terminate copyied string with \0
&gt;&gt; when copying string of size PASSWDBUFFLEN-1. This may cause strlen(pass)
&gt;&gt; and rmd160_hash_buffer read after end of passwdbuff.
&gt;&gt; 
&gt; 
&gt; Yup, that's a bug.  Thanks for auditing the code!  The bug appears to
&gt; be duplicated in the LO_CRYPT_CRYPTOAPI case statement too.
&gt; 
&gt; astor
&gt; 
In general, just avoid strncpy at all, it being an almost useless
function. It is not guaranteed to 0 terminate, and does (for most
apps) utterly useless zeroing of the whole buffer if the string is
short. Just do a strlen/length check/memcpy/add 0 combo

PS: notice that the last line looks wrong if the copy to passwdbuff
    truncated pass.

I THINK it should be something like (completely untested):

    case LO_CRYPT_FISH2:
    case LO_CRYPT_BLOW:
    case LO_CRYPT_IDEA:
    case LO_CRYPT_CAST128:
            pass = xgetpass(pfd, _("Password :"));
            len  = strlen(pass);
            rmd160_hash_buffer(keybits,pass,len);

            passwdbuff[0] = 'A';
            if (len &gt; PASSWDBUFFLEN-2) len = PASSWDBUFFLEN-2;
            memcpy(passwdbuff+1, pass, len);
            passwdbuff[++len] = 0;
            rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,len);

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010105220756</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-05 22:07:56-0400</timestampReceived><subject>New patches out for 2.2 and 2.4.</subject><body>

Two new patches are out - 2.2.18.4pre1 and 2.4.0.1, available at:
ftp://ftp.kernel.org/pub/linux/kernel/v2.4/
ftp://ftp.kernel.org/pub/linux/kernel/people/astor/v2.2/

This patch includes most of the changes I wanted to have done before
switching to 2.4.  There are no more cipher or digest IDs in this
patch.  This means there is no longer any need to have util-linux in
synch with the kernel.  Names of ciphers are passed as a string from
user-land.  Also cipher_implementations now have both atomic and
non-atomic versions of encrypt/decrypt/set_key as discussed on the
list earlier.  When calling

ci_atomic = find_cipher_by_name("somecipher-cbc", 1);
...
ci_atomic-&gt;encrypt_atomic(...);

there is a second argument that specifies whether you need to use the
atomic functions.  When set to 1, find_cipher_by_name is required to
return a cipher_implementation that supports this (i.e. a software
cipher).  All the ciphers currently support this.

All the ciphers have been renamed since they are now loaded based on
their names.  So

find_cipher_by_name("somecipher-cbc", 0);

will look for the following modules until somecipher-cbc is found or
all options have been exhausted:
 cipher-somecipher-cbc
 cipher-somecipher
 cipher
..byebye to /etc/modules.conf hell.

The util-linux patch probably needs some cleanups still, but I wanted
to get this out.

Oh, and this patch requires you to recompile util-linux.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107172253</emailId><senderName>Martin Douda</senderName><senderEmail>martin@douda.net</senderEmail><timestampReceived>2001-01-07 17:22:53-0400</timestampReceived><subject>util-linux patch bug: too long password</subject><body>

Hi,
I'm mailing to you as to mainitainer of kernel international patches. 
In current (2.4.0.1) crypto patch is patch for util-linux, containing this
lines:

+	case LO_CRYPT_FISH2:
+	case LO_CRYPT_BLOW:
+	case LO_CRYPT_IDEA:
+	case LO_CRYPT_CAST128:
+		pass = xgetpass(pfd, _("Password :"));
+		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
+		passwdbuff[0] = 'A';
+		rmd160_hash_buffer(keybits,pass,strlen(pass));
+		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);

As you probably know, strncpy will not terminate copyied string with \0
when copying string of size PASSWDBUFFLEN-1. This may cause strlen(pass)
and rmd160_hash_buffer read after end of passwdbuff.

I thing this should fix it.

			Martin

--- linux/Documentation/crypto/util-linux-2.10o.patch.orig	Sun Jan  7 14:46:42 2001
+++ linux/Documentation/crypto/util-linux-2.10o.patch	Sun Jan  7 18:20:19 2001
@@ -229,7 +229,8 @@
 +	case LO_CRYPT_IDEA:
 +	case LO_CRYPT_CAST128:
 +		pass = xgetpass(pfd, _("Password :"));
-+		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
++		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-2);
++		passwdbuff[PASSWDBUFFLEN-1]='\0';
 +		passwdbuff[0] = 'A';
 +		rmd160_hash_buffer(keybits,pass,strlen(pass));
 +		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);





--------------------------------------------------------------------------------
                              Martin "MaD" Douda
WEB: http://martin.douda.net/   PHONE:+420603752779   ICQ# 86467013
EMAIL: &lt;martin@douda.net&gt;, &lt;mad@gate.mobil.cz&gt; (160 characters only)
PGP:ID=0x6FE43023 Fingerprint:E495 11DA EF6E 0DD6 965A 54F3 888E CC9E 6FE4 3023


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010110144603</emailId><senderName>ds</senderName><senderEmail>xk@leguin.org.uk</senderEmail><timestampReceived>2001-01-10 14:46:03-0400</timestampReceived><subject>2.2.x and 2.4.0 kerneli</subject><body>

hi,
	I made another attempt getting 2.2.x crypto images working under 
2.4.0 but have failed again.  Running modprobe on cipher-serpent locks 
up teh system enough so that it cannot be used but no OOPS appears. 
This happens with the old and new util-linux.  What's the problem?
I noticed that there's no loop_gen atleast in my install, has it been 
removed or could this be the problem in my case?

	Also, the www.kerneli.org webpage looks out of date since it 
doesn't even give a link to this mailing list, heh.

Thanks

-David Sobon.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010110094206</emailId><senderName>Pierre PEIFFER</senderName><senderEmail>ppe@sxb.bsf.alcatel.fr</senderEmail><timestampReceived>2001-01-10 09:42:06-0400</timestampReceived><subject>make xconfig doesn't work</subject><body>

Hello,

    With patch 2.2.17.10, "make xconfig" doesn't work (applied with kernel
2.2.13). I have the following error:

&lt;&lt;
cat header.tk &gt;&gt; ./kconfig.tk
./tkparse-sparc-solaris2.6 &lt; ../arch/i386/config.in &gt;&gt; kconfig.tk
drivers/block/Config.in: 106: unknown command
make[1]: *** [kconfig.tk] Error 1
&gt;&gt;

    (but "make menuconfig" works well)
    I supposed "define_string" is the problem... Do you know how to solve this
? (Although this is not a big problem, I know...)

    Pierre


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010114151131</emailId><senderName>Andrew McDonald</senderName><senderEmail>andrew@mcdonald.org.uk</senderEmail><timestampReceived>2001-01-14 15:11:31-0400</timestampReceived><subject>patch-int-2.4.0.2 and SMP</subject><body>

There appears to be a problem with compiling the crypto patch for an
SMP system. modprobe'ing a cipher module reliably locks up the system
(no oops). The sequence of commands:
# modprobe cryptoapi
# modprobe cipher-aes
is the simplest way to show this.

Compiling the same kernel, but with SMP disabled, does not exhibit this
problem. I haven't had any problems with the vanilla 2.4.0 kernel on
the same SMP (BP6 + dual Celeron) box.

Anybody else able to confirm this? I haven't started poking round to
see if I can see the problem. I haven't seen it happen with
2.2.18+crypto.


Andrew
-- 
Andrew McDonald
E-mail: andrew@mcdonald.org.uk
http://www.mcdonald.org.uk/andrew/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010110193215</emailId><senderName>Martin MaD Douda</senderName><senderEmail>martin@douda.net</senderEmail><timestampReceived>2001-01-10 19:32:15-0400</timestampReceived><subject>Re: 2.2.x and 2.4.0 kerneli</subject><body>


Try do download 2.4 crypto patch from
ftp://ftp.kernel.org/pub/linux/kernel/crypto/ (or similar).

			Martin



On Wed, 10 Jan 2001, ds wrote:

&gt; hi,
&gt; 	I made another attempt getting 2.2.x crypto images working under 
&gt; 2.4.0 but have failed again.  Running modprobe on cipher-serpent locks 
&gt; up teh system enough so that it cannot be used but no OOPS appears. 
&gt; This happens with the old and new util-linux.  What's the problem?
&gt; I noticed that there's no loop_gen atleast in my install, has it been 
&gt; removed or could this be the problem in my case?
&gt; 
&gt; 	Also, the www.kerneli.org webpage looks out of date since it 
&gt; doesn't even give a link to this mailing list, heh.
&gt; 
&gt; Thanks
&gt; 
&gt; -David Sobon.
&gt; 

--------------------------------------------------------------------------------
                              Martin "MaD" Douda
WEB: http://martin.douda.net/   PHONE:+420603752779   ICQ# 86467013
EMAIL: &lt;martin@douda.net&gt;, &lt;mad@gate.mobil.cz&gt; (160 characters only)
PGP:ID=0x6FE43023 Fingerprint:E495 11DA EF6E 0DD6 965A 54F3 888E CC9E 6FE4 3023
--------------------------------------------------------------------------------
The only thing good about "standards" in computer science is that there are so
many to choose from.



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107175251</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-07 17:52:51-0400</timestampReceived><subject>Re: util-linux patch bug: too long password</subject><body>

On Sun, Jan 07, 2001 at 06:22:53PM +0100, Martin Douda wrote:
&gt; Hi,
&gt; I'm mailing to you as to mainitainer of kernel international patches. 
&gt; In current (2.4.0.1) crypto patch is patch for util-linux, containing this
&gt; lines:
&gt; 
&gt; +	case LO_CRYPT_FISH2:
&gt; +	case LO_CRYPT_BLOW:
&gt; +	case LO_CRYPT_IDEA:
&gt; +	case LO_CRYPT_CAST128:
&gt; +		pass = xgetpass(pfd, _("Password :"));
&gt; +		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
&gt; +		passwdbuff[0] = 'A';
&gt; +		rmd160_hash_buffer(keybits,pass,strlen(pass));
&gt; +		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
&gt; 
&gt; As you probably know, strncpy will not terminate copyied string with \0
&gt; when copying string of size PASSWDBUFFLEN-1. This may cause strlen(pass)
&gt; and rmd160_hash_buffer read after end of passwdbuff.
&gt; 

Yup, that's a bug.  Thanks for auditing the code!  The bug appears to
be duplicated in the LO_CRYPT_CRYPTOAPI case statement too.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010114222540</emailId><senderName>Andrew McDonald</senderName><senderEmail>andrew@mcdonald.org.uk</senderEmail><timestampReceived>2001-01-14 22:25:40-0400</timestampReceived><subject>atomicity of digest implementations in 2.4.0.2</subject><body>

Hi all,

The software implementations of ciphers are all marked as atomic, but
the digests algorithms are not.

It looks, to me, like there is a missing
di-&gt;trans.t_atomicapi = 1;
from register_digest.

Any comments?

Thanks,

Andrew
-- 
Andrew McDonald
E-mail: andrew@mcdonald.org.uk
http://www.mcdonald.org.uk/andrew/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010112173525</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-01-12 17:35:25-0400</timestampReceived><subject>Re: problems w/ AES &amp; Twofish modules + losetup</subject><body>

It's been a week now since my last posting, so in short:
I compiled a 2.2.16 kernel with a 2.2.18.3 int_patch and modules for
AES, Twofish and Blowfish. Only the Blowfish part is working.

* Alexander S A Kjeldaas [2001-01-07]:
&gt; On Sun, Jan 07, 2001 at 12:19:50PM +0100, Christoph Hertel wrote:
&gt; &gt; /home/chh# losetup -e Twofish /dev/loop0 cryptotest   
&gt; &gt; Password :
&gt; &gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; &gt; /home/chh# losetup -e AES /dev/loop0 cryptotest 
&gt; &gt; Unsupported encryption type AES
&gt; &gt; /home/chh# losetup -e Rijndael /dev/loop0 cryptotest 
&gt; &gt; Unsupported encryption type Rijndael
&gt; I always use lower-case names.  From the top of my head I'm not sure
&gt; that it works with mixed-case (I'll have to fix that I think).
I tried it lowercase and it doesn't work (same messages).

&gt; &gt; alias cipher-3          fish2                                                   
&gt; You cipher-3 alias is wrong - it should point to twofish, not fish2.
I changed it, it doesn't work.

The original crypto-aliases coming with Debian modutils (2.3.23-2) are:
# Crypto modules (see http://www.kerneli.org/)
alias loop-xfer-gen-0   loop_gen
alias loop-xfer-3     loop_fish2
alias loop-xfer-gen-10  loop_gen
alias cipher-2          des
alias cipher-3          fish2
alias cipher-4          blowfish
alias cipher-6          idea
alias cipher-7          serp6f
alias cipher-8          mars6
alias cipher-11         rc62
alias cipher-15         dfc2
alias cipher-16         rijndael
alias cipher-17         rc5

With these, blowfish works, modprobe complains about not finding
locate-xfer-3 and cipher-3 (when I try Twofish) and doesn't say anything
for Rijndael (twofish and rijndael modules aren't loaded, too).

According to the HOWTO I removed cipher-3 and added instead "alias
cipher-9 twofish". I also removed loop-xfer-3 (which was source of
modprobe-complains). The effect is, that modprobe doesn't complain
anymore and the kernel says:
kernel: cryptoapi: Registered twofish (9)
kernel: cryptoapi: Registered twofish-cbc (65545)
That's new, that's good, something happened, the twofish modules got
loaded! Unfortunately, losetup is still complaining like before (see
above).

So, where can I get the-one-and-only (TM) cipher-aliases? Is there
anybody with crypto-modules out there? What's in your modules.conf?

This whole module-alias-thingy is a complete black box to me. Can
somebody give me a link to an explanatory text, or is this nothing for
somebody who couldn't get any infos regarding my question out of
/usr/src/linux/Documentation/modules.txt and 'man modules.conf'?


Thanks for your help.

Christoph
-- 
PGP (GnuPG) encrypted mail welcome! (Key 0xBAC8E4D5)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010115133355</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-15 13:33:55-0400</timestampReceived><subject>New patch out - 2.4.0.3</subject><body>

patch-int-2.4.0.3 is out.  

ftp://ftp.kernel.org/pub/linux/kernel/crypto/v2.4/

Jari Ruusu noted that gen-cbc.h's decryption algorithm didn't support
in-place decryption.  This has an effect on 2.4 kernels since they do
in-place decryption (however not always as crypto loopback seems to
work "2nd time around" - maybe there are some caching issues).

Some of the problems that have been reported were definitively due to
this bug. There has also been a lot of fixes to the util-linux patch.

My current bug-list/feature-request-list relative to 2.4.0.3 is as
follows:

 o -e none needed for losetup [FIXED]
 o devices larger than 2^31-&lt;small number&gt; hangs.
 o keylength can not be specified in fstab
 o losetup using a device as backing store hangs [2.4.0 bug, axboe's
   loop fixes might help]
 o With 2.4.0.2 modules are not loaded correctly the first time 
	[FIXED? - maybe related to gen-cbc.h bug?]
 o Deadlock in 2.4.0.2 after writing some data (36MB).
 o insmoding idea cipher  - kernel freezes immediately
 o Bug in blowfish_set_key - accepts any key size.
 o make xconfig doesn't work. (define_string not implemented) [PATCH exists]

ChangeLog:

2001-01-15 Alexander Kjeldaas &lt;astor@fast.no&gt;

        * International kernel patch 2.4.0.3 released.

        * cbc-decryption is buggy for in-place decryption.  Bug identified by
        Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;.

        * faq.txt updates.

        * man-page updates for util-linux
        
2001-01-15 Martin Douda &lt;martin@douda.net&gt;

        * proper null-termination of passwords in util-linux patch.

2001-01-15 Frank Heckenbach &lt;frank@g-n-u.de&gt;

        * util-linux fixes:
                * --keybits didn't work properly
                * ioctl invokation bug
                * -e none not needed

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010116234911</emailId><senderName>Martin Aumueller</senderName><senderEmail>lists@reserv.at</senderEmail><timestampReceived>2001-01-16 23:49:11-0400</timestampReceived><subject>Bug in crypto/gen-cbc.h?</subject><body>

Hi!

As far as I can see the atomic flag is not honoured when
doing an atomic cbc decryption. The code in crypto/gen-cbc.h
reads:
      if (current-&gt;need_resched) {
         schedule();
      }

But it should perhaps be changed to:
      if (!atomic &amp;&amp; current-&gt;need_resched) {
         schedule();
      }

Martin




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010130090333</emailId><senderName>Dejan Muhamedagic</senderName><senderEmail>dejan@xsoft.at</senderEmail><timestampReceived>2001-01-30 09:03:33-0400</timestampReceived><subject>segfault on kernel v2.4.0</subject><body>

Hello,

Trying to migrate to the new kernel v2.4.0, but I'm failing
to get ciphers to work.  The cipher segfaults :(  It doesn't
matter trying to use the file encrypted with ciphers from
v2.2.17 or creating a new one.

I hope you will find the information attached at the bottom
of the message useful.

Cheers.

Dejan

-- 
Dejan Muhamedagic                      mailto:dejan@xsoft.at
Xsoft GmbH                               http://www.xsoft.at
Modecenterstr. 14, 1030 Vienna, Austria    +43 1 7963636 676

--------------------------------------------------
patch: patch-int-2.4.0.3.bz2
libc6: v2.2

# insmod -V
insmod version 2.4.1
# gcc --version
2.95.2
# ldd --version
ldd (GNU libc) 2.2

from syslog:

Jan 29 00:39:24 hobbes kernel: loop: enabling 8 loop devices
Jan 29 00:39:51 hobbes kernel: divide error: 0000
Jan 29 00:39:51 hobbes kernel: CPU:    0
Jan 29 00:39:51 hobbes kernel: EIP:    0010:[cs46xx:InitArray+314522/152496206]
Jan 29 00:39:51 hobbes kernel: EFLAGS: 00010246
Jan 29 00:39:51 hobbes kernel: eax: 00000001   ebx: d11aff3c   ecx: 00000000   edx: \
                00000000
Jan 29 00:39:51 hobbes kernel: esi: 00000400   edi: 00000000   ebp: d11afe10   esp: \
                d11afde8
Jan 29 00:39:51 hobbes kernel: ds: 0018   es: 0018   ss: 0018
Jan 29 00:39:51 hobbes kernel: Process losetup (pid: 1098, stackpage=d11af000)
Jan 29 00:39:51 hobbes kernel: Stack: d4c8a120 d222e000 d4c8a120 d11afe08 c1557700 \
                00000246 d222e07c d222e034 
Jan 29 00:39:51 hobbes kernel:        00000001 c0126749 d11afe2c d4c86485 d222e000 \
                d11aff3c 00000000 00000000 
Jan 29 00:39:51 hobbes kernel:        d11afedc d11afe9c d4c8c1eb d222e000 d11aff3c \
                00000000 d222e000 d4c8dd3c 
Jan 29 00:39:51 hobbes kernel: Call Trace: [cs46xx:InitArray+320520/152490208] \
[cs46xx:InitArray+320520/152490208] [kmalloc+109/160] \
[cs46xx:InitArray+305005/152505723] [cs46xx:InitArray+328915/152481813] \
                [cs46xx:InitArray+335908/152474820] \
                [cs46xx:InitArray+331589/152479139] 
Jan 29 00:39:51 hobbes kernel:        [cs46xx:InitArray+332151/152478577] \
[cs46xx:InitArray+332821/152477907] [blkdev_ioctl+40/56] [sys_ioctl+363/388] \
                [system_call+51/56] 
Jan 29 00:39:51 hobbes kernel: 
Jan 29 00:39:51 hobbes kernel: Code: f7 7d 10 0f b6 1c 19 c1 e3 18 89 5d ec 8b 5d 0c \
0f b6 04 1a  [...]
Jan 29 03:28:01 hobbes kernel: loop: enabling 8 loop devices
Jan 29 03:28:01 hobbes kernel: cipher-blowfish-cbccipher-blowfish&lt;6&gt;cryptoapi: \
                Registered blowfish-ecb (0)
Jan 29 03:28:01 hobbes kernel: cryptoapi: Registered blowfish-cbc (65536)
Jan 29 03:28:01 hobbes kernel: divide error: 0000
Jan 29 03:28:01 hobbes kernel: CPU:    0
Jan 29 03:28:01 hobbes kernel: EIP:    \
                0010:[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-304718/96]
                
Jan 29 03:28:01 hobbes kernel: EFLAGS: 00010246
Jan 29 03:28:01 hobbes kernel: eax: 00000001   ebx: cfce7f3c   ecx: 00000000   edx: \
                00000000
Jan 29 03:28:01 hobbes kernel: esi: 00000400   edi: 00000000   ebp: cfce7e10   esp: \
                cfce7de8
Jan 29 03:28:01 hobbes kernel: ds: 0018   es: 0018   ss: 0018
Jan 29 03:28:01 hobbes kernel: Process losetup (pid: 68, stackpage=cfce7000)
Jan 29 03:28:01 hobbes kernel: Stack: d4c36120 d3702000 d4c36120 cfce7e08 c1557700 \
                00000246 d370207c d3702034 
Jan 29 03:28:01 hobbes kernel:        00000001 c0126749 cfce7e2c d4c2f485 d3702000 \
                cfce7f3c 00000000 00000000 
Jan 29 03:28:01 hobbes kernel:        cfce7edc cfce7e9c d4c311eb d3702000 cfce7f3c \
                00000000 d3702000 d4c32d3c 
Jan 29 03:28:01 hobbes kernel: Call Trace: \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-298720/96] \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-298720/96] \
[kmalloc+109/160] [ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-326523/96] \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-318997/96] \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-312004/96] \
                [ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-316323/96] \
                
Jan 29 03:28:01 hobbes kernel:        \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-315761/96] \
[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-315091/96] \
                [blkdev_ioctl+40/56] [sys_ioctl+363/388] [system_call+51/56] 
Jan 29 03:28:01 hobbes kernel: 
Jan 29 03:28:01 hobbes kernel: Code: f7 7d 10 0f b6 1c 19 c1 e3 18 89 5d ec 8b 5d 0c \
0f b6 04 1a 

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010130153626</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-01-30 15:36:26-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

I have no kernel debugging experience.  There is documentation.  See
/usr/src/linux/REPORTING-BUGS and
/usr/src/linux/Documentation/oops-tracing.txt, the latter is really
helpful here.


On Tue, Jan 30, 2001 at 10:03:33AM +0100, Dejan Muhamedagic wrote:
&gt; Hello,
&gt; 
&gt; Trying to migrate to the new kernel v2.4.0, but I'm failing
&gt; to get ciphers to work.  The cipher segfaults :(  It doesn't

I think segfualt is the wrong jargon here.

&gt; matter trying to use the file encrypted with ciphers from
&gt; v2.2.17 or creating a new one.
&gt; 
&gt; I hope you will find the information attached at the bottom
&gt; of the message useful.
&gt; 

Try compiling as loadable modules, instead of compiling it into
the kernel.  Did you try a 2.4.0 kernel with the *same* config
options but without the crypto patch?  You should.

&gt; # insmod -V
&gt; insmod version 2.4.1
&gt; # gcc --version
&gt; 2.95.2
&gt; # ldd --version
&gt; ldd (GNU libc) 2.2
&gt; 
&gt; from syslog:
&gt; 
&gt; Jan 29 00:39:24 hobbes kernel: loop: enabling 8 loop devices
&gt; Jan 29 00:39:51 hobbes kernel: divide error: 0000
&gt; Jan 29 00:39:51 hobbes kernel: CPU:    0
&gt; Jan 29 00:39:51 hobbes kernel: EIP:    0010:[cs46xx:InitArray+314522/152496206]
                                               ^^^^^^
That is a sound driver

&gt; Jan 29 03:28:01 hobbes kernel: cryptoapi: Registered blowfish-cbc (65536)
&gt; Jan 29 03:28:01 hobbes kernel: divide error: 0000
&gt; Jan 29 03:28:01 hobbes kernel: CPU:    0
&gt; Jan 29 03:28:01 hobbes kernel: EIP:    \
&gt; 0010:[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-304718/96]

That is a PCMCIA driver, (which I do not have)

So if it is a bug in the crypto patch, it is a bug that stomps on
other parts of the kernel, causing the ooops to show up in your sound
driver and PCMCIA driver.

Or...it is a problem in your sound driver and PCMCIA driver.

Again,

Try to build a clean 2.4.0 or 2.4.1 kernel with the same options, but
without crypto.

When you add a crypto patch, try using modules.

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131000135</emailId><senderName>Dejan Muhamedagic</senderName><senderEmail>dejan@xsoft.at</senderEmail><timestampReceived>2001-01-31 00:01:35-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

I'll try to clarify:

1.  It is a segfault (in losetup).  No oopses.

2.  The kernel (2.4.0) seems to be OK.  loop devices work fine.
Other stuff as well, i.e. sound, pcmcia network.  Furthermore, I
tested the IDEA cipher and it seems to be OK.  So, it is only the
Blowfish code being troubled.

3.  With or without other modules, or in single-user mode, the
same thing happens.  I agree that the log is weird, but I'm no
kernel expert either (what on earth has a cipher module to do with
the pcmcia?).  Also, when I try the same by removing all other
modules previously, in syslog there is a referrence to the
ipchains module :)

4.  All ciphers are compiled as modules.

So, I can switch to IDEA.  Is it advisable to use this cipher in a
production?  Any reports about its stability?  About the
international patch?  Or should I stay put with the v2.2.x kernels
for the time being?

Thanks.

Dejan

On Tue, Jan 30, 2001 at 10:36:26AM -0500, Chris Kuklewicz wrote:
&gt; I have no kernel debugging experience.  There is documentation.  See
&gt; /usr/src/linux/REPORTING-BUGS and
&gt; /usr/src/linux/Documentation/oops-tracing.txt, the latter is really
&gt; helpful here.
&gt; 
&gt; On Tue, Jan 30, 2001 at 10:03:33AM +0100, Dejan Muhamedagic wrote:
&gt; &gt; Hello,
&gt; &gt; 
&gt; &gt; Trying to migrate to the new kernel v2.4.0, but I'm failing
&gt; &gt; to get ciphers to work.  The cipher segfaults :(  It doesn't
&gt; 
&gt; I think segfualt is the wrong jargon here.
&gt; 
&gt; &gt; matter trying to use the file encrypted with ciphers from
&gt; &gt; v2.2.17 or creating a new one.
&gt; &gt; 
&gt; &gt; I hope you will find the information attached at the bottom
&gt; &gt; of the message useful.
&gt; &gt; 
&gt; 
&gt; Try compiling as loadable modules, instead of compiling it into
&gt; the kernel.  Did you try a 2.4.0 kernel with the *same* config
&gt; options but without the crypto patch?  You should.
&gt; 
&gt; &gt; # insmod -V
&gt; &gt; insmod version 2.4.1
&gt; &gt; # gcc --version
&gt; &gt; 2.95.2
&gt; &gt; # ldd --version
&gt; &gt; ldd (GNU libc) 2.2
&gt; &gt; 
&gt; &gt; from syslog:
&gt; &gt; 
&gt; &gt; Jan 29 00:39:24 hobbes kernel: loop: enabling 8 loop devices
&gt; &gt; Jan 29 00:39:51 hobbes kernel: divide error: 0000
&gt; &gt; Jan 29 00:39:51 hobbes kernel: CPU:    0
&gt; &gt; Jan 29 00:39:51 hobbes kernel: EIP:    0010:[cs46xx:InitArray+314522/152496206]
&gt; ^^^^^^
&gt; That is a sound driver
&gt; 
&gt; &gt; Jan 29 03:28:01 hobbes kernel: cryptoapi: Registered blowfish-cbc (65536)
&gt; &gt; Jan 29 03:28:01 hobbes kernel: divide error: 0000
&gt; &gt; Jan 29 03:28:01 hobbes kernel: CPU:    0
&gt; &gt; Jan 29 03:28:01 hobbes kernel: EIP:    \
&gt; &gt; 0010:[ds:__insmod_ds_O/lib/modules/2.4.0/kernel/drivers/pcmcia/ds.o_+-304718/96]
&gt; 
&gt; That is a PCMCIA driver, (which I do not have)
&gt; 
&gt; So if it is a bug in the crypto patch, it is a bug that stomps on
&gt; other parts of the kernel, causing the ooops to show up in your sound
&gt; driver and PCMCIA driver.
&gt; 
&gt; Or...it is a problem in your sound driver and PCMCIA driver.
&gt; 
&gt; Again,
&gt; 
&gt; Try to build a clean 2.4.0 or 2.4.1 kernel with the same options, but
&gt; without crypto.
&gt; 
&gt; When you add a crypto patch, try using modules.
&gt; 
&gt; -- 
&gt; Chris
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

-- 
Dejan Muhamedagic                      mailto:dejan@xsoft.at
Xsoft GmbH                               http://www.xsoft.at
Modecenterstr. 14, 1030 Vienna, Austria    +43 1 7963636 676

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131002309</emailId><senderName>Michael Driscoll</senderName><senderEmail>fenris@ulf.edgemail.com</senderEmail><timestampReceived>2001-01-31 00:23:09-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

On Wed, Jan 31, 2001 at 01:01:35AM +0100, Dejan Muhamedagic wrote:
&gt; I'll try to clarify:
&gt; 
&gt; 1.  It is a segfault (in losetup).  No oopses.
&gt; 
&gt; 2.  The kernel (2.4.0) seems to be OK.  loop devices work fine.
&gt; Other stuff as well, i.e. sound, pcmcia network.  Furthermore, I
&gt; tested the IDEA cipher and it seems to be OK.  So, it is only the
&gt; Blowfish code being troubled.
&gt; 
&gt; 3.  With or without other modules, or in single-user mode, the
&gt; same thing happens.  I agree that the log is weird, but I'm no
&gt; kernel expert either (what on earth has a cipher module to do with
&gt; the pcmcia?).  Also, when I try the same by removing all other
&gt; modules previously, in syslog there is a referrence to the
&gt; ipchains module :)
&gt; 
&gt; 4.  All ciphers are compiled as modules.
&gt; 
&gt; So, I can switch to IDEA.  Is it advisable to use this cipher in a
&gt; production?  Any reports about its stability?  About the
&gt; international patch?  Or should I stay put with the v2.2.x kernels
&gt; for the time being?

I get the same problem (using blowfish with a loopback ext2 filesystem).

sudo losetup -e blowfish -k 160 /dev/loop0 ~/encrypted-fs
(losetup segfaults here)
(/dev/loop0 becomes unusable, further attempts get an EBUSY)

Then I try:
sudo losetup -e blowfish -k 160 /dev/loop1 ~/encrypted-fs
                                ^^^^^^^^^^

And it works fine (ie. only the first attempt to losetup segfaults).

Everything is modular in this kernel, except for some things like ext2 which
I need to boot.

And now that I look at my logs, I am also getting an oops when I try
to load blowfish:

Jan 30 17:14:07 diva kernel: loop: enabling 8 loop devices
Jan 30 17:14:08 diva modprobe: modprobe: Can't locate module cipher-blowfish-cbcJan \
30 17:14:08 diva kernel: cipher-blowfish-cbccipher-blowfish&lt;6&gt;cryptoapi: Registered \
                blowfish-ecb (0)
Jan 30 17:14:08 diva kernel: cryptoapi: Registered blowfish-cbc (65536)
Jan 30 17:14:08 diva kernel: divide error: 0000
Jan 30 17:14:08 diva kernel: CPU:    0
Jan 30 17:14:08 diva kernel: EIP:    \
                0010:[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+138251/14622137]
Jan 30 17:14:08 diva kernel: EFLAGS: 00010246
Jan 30 17:14:08 diva kernel: eax: 00000001   ebx: c618bf44   ecx: 00000000   edx: \
                00000000
Jan 30 17:14:08 diva kernel: esi: 00000000   edi: 00000400   ebp: 00000000   esp: \
                c618bdf8
Jan 30 17:14:08 diva kernel: ds: 0018   es: 0018   ss: 0018
Jan 30 17:14:08 diva kernel: Process losetup (pid: 431, stackpage=c618b000)
Jan 30 17:14:08 diva kernel: Stack: c88d2100 c745e000 c88d2100 fffffff4 c618be18 \
                c0231180 c745e07c c745e034
Jan 30 17:14:08 diva kernel:        c7f87480 c1236800 c88cb459 c745e000 c618bf44 \
                00000000 00000000 c618bee4
Jan 30 17:14:08 diva kernel:        c88cd1c8 c745e000 c618bf44 00000000 c745e000 \
                c88ced5c 00000012 00000000
Jan 30 17:14:08 diva kernel: Call Trace: \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+144288/14616100] \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+144288/14616100] \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+116473/14643915] \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+124008/14636380] \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+131068/14629320] \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+126662/14633726] \
                [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+127209/14633179]
Jan 30 17:14:08 diva kernel:        \
[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+127914/14632474] [blkdev_ioctl+40/56] \
                [sys_ioctl+363/388] [system_call+51/56]
Jan 30 17:14:08 diva kernel:
Jan 30 17:14:08 diva kernel: Code: f7 fd 0f b6 1c 19 c1 e3 18 89 5c 24 14 8b 5c 24 30 \
0f b6 04

My sound driver is ALSA's YMFPCI.

So it looks like there is a problem in the blowfish init code?

Now that I know this is a blowfish problem I can reformat using AES or
something, I'm glad to know there is a workaround.

-- 
Michael Driscoll
fenris@ulf.edgemail.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131010420</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-01-31 01:04:20-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

&gt; Everything is modular in this kernel, except for some things like ext2 which
&gt; I need to boot.
&gt; 
&gt; And now that I look at my logs, I am also getting an oops when I try
&gt; to load blowfish:
&gt; 
&gt; Jan 30 17:14:07 diva kernel: loop: enabling 8 loop devices
&gt; Jan 30 17:14:08 diva modprobe: modprobe: Can't locate module cipher-blowfish-cbcJan \
&gt; 30 17:14:08 diva kernel: cipher-blowfish-cbccipher-blowfish&lt;6&gt;cryptoapi: Registered \
&gt;                 blowfish-ecb (0)
&gt; Jan 30 17:14:08 diva kernel: cryptoapi: Registered blowfish-cbc (65536)
&gt; Jan 30 17:14:08 diva kernel: divide error: 0000
&gt; Jan 30 17:14:08 diva kernel: CPU:    0
&gt; Jan 30 17:14:08 diva kernel: EIP:    \
&gt;                 0010:[snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+138251/14622137]
&gt; Jan 30 17:14:08 diva kernel: EFLAGS: 00010246
&gt; Jan 30 17:14:08 diva kernel: eax: 00000001   ebx: c618bf44   ecx: 00000000   edx: \
&gt;                 00000000
&gt; Jan 30 17:14:08 diva kernel: esi: 00000000   edi: 00000400   ebp: 00000000   esp: \
&gt;                 c618bdf8
&gt; Jan 30 17:14:08 diva kernel: ds: 0018   es: 0018   ss: 0018
&gt; Jan 30 17:14:08 diva kernel: Process losetup (pid: 431, stackpage=c618b000)
&gt; Jan 30 17:14:08 diva kernel: Stack: c88d2100 c745e000 c88d2100 fffffff4 c618be18 \
&gt;                 c0231180 c745e07c c745e034
&gt; Jan 30 17:14:08 diva kernel:        c7f87480 c1236800 c88cb459 c745e000 c618bf44 \
&gt;                 00000000 00000000 c618bee4
&gt; Jan 30 17:14:08 diva kernel:        c88cd1c8 c745e000 c618bf44 00000000 c745e000 \
&gt;                 c88ced5c 00000012 00000000
&gt; Jan 30 17:14:08 diva kernel: Call Trace: \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+144288/14616100] \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+144288/14616100] \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+116473/14643915] \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+124008/14636380] \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+131068/14629320] \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+126662/14633726] \
&gt;                 [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+127209/14633179]
&gt; Jan 30 17:14:08 diva kernel:        \
&gt; [snd-seq-midi:__insmod_snd-seq-midi_S.bss_L32+127914/14632474] [blkdev_ioctl+40/56] \
&gt;                 [sys_ioctl+363/388] [system_call+51/56]
&gt; Jan 30 17:14:08 diva kernel:
&gt; Jan 30 17:14:08 diva kernel: Code: f7 fd 0f b6 1c 19 c1 e3 18 89 5c 24 14 8b 5c 24 \
&gt; 30 0f b6 04 
&gt; My sound driver is ALSA's YMFPCI.
&gt; 
&gt; So it looks like there is a problem in the blowfish init code?

Reboot.  Then lsmod to see there are no crypto modules.  Then modprobe
or insmod the blowfish module (as root).  Look at the error log, look
at lsmod.  Did that trigger it?  Now try losteup....

I suspect that the port of crypto patch to the 2.4.x module system
does something bad.  I would be surprised if only one crypto module
was bad, but I am not a developer for this project....

&gt; Now that I know this is a blowfish problem I can reformat using AES
&gt; or something, I'm glad to know there is a workaround.

Hmmm...I am just a user (kernel 2.2.18).  But I do not think you can
change encryption in place.  You may have to create a second
filesystem and copy over the data.

If have no data, then this is trivial...

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131020754</emailId><senderName>Michael Driscoll</senderName><senderEmail>fenris@ulf.edgemail.com</senderEmail><timestampReceived>2001-01-31 02:07:54-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

On Tue, Jan 30, 2001 at 08:04:20PM -0500, Chris Kuklewicz wrote:
&gt; Reboot.  Then lsmod to see there are no crypto modules.  Then modprobe
&gt; or insmod the blowfish module (as root).  Look at the error log, look
&gt; at lsmod.  Did that trigger it?  Now try losteup....

Thanks for the tip.  I found that if "modprobe cipher-blowfish" was
manually performed before the "losetup -e blowfish" then everything would
run fine; I only seem to get the segfault+kernelfault when losetup tries
to modprobe the blowfish cipher automatically.

Here are the cases I tried:

modprobe cipher-blowfish
losetup
=&gt; no problem

modprobe cipher-blowfish
modprobe loop
losetup
=&gt; no problem

modprobe loop
losetup
=&gt; segfault

/* no manual modprobes */
losetup
=&gt; segfault

modprobe cryptoapi
losetup
=&gt; segfault


Also, could the following lines be significant?  This is what I see when
I get the segfault:

Jan 30 18:43:26 diva kernel: loop: enabling 8 loop devices
Jan 30 18:43:26 diva modprobe: modprobe: Can't locate module cipher-blowfish-cbc
Jan 30 18:43:27 diva kernel: cipher-blowfish-cbccipher-blowfish&lt;6&gt;cryptoapi: Registered blowfish-ecb (0)
Jan 30 18:43:27 diva kernel: cryptoapi: Registered blowfish-cbc (65536)
Jan 30 18:43:27 diva kernel: divide error: 0000

Note the corruption in the second and third line (I realize it might be a
harmless race in syslog as well).

And here is what it looks like when I enable the modules "by hand":

Jan 30 18:26:54 diva kernel: loop: enabling 8 loop devices
Jan 30 18:27:16 diva kernel: cryptoapi: Registered blowfish-ecb (0)
Jan 30 18:27:16 diva kernel: cryptoapi: Registered blowfish-cbc (65536)

&gt; Hmmm...I am just a user (kernel 2.2.18).  But I do not think you can
&gt; change encryption in place.  You may have to create a second
&gt; filesystem and copy over the data.

(This is exactly what I meant, creating a new fs and copying everything
from the old to the new)

PS. 2.4.1+patch-int-2.4.0.3 still shows these segfaults.

-- 
Michael Driscoll
fenris@ulf.edgemail.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010131082545</emailId><senderName>Lars Gaarden</senderName><senderEmail>larsg@trustix.com</senderEmail><timestampReceived>2001-01-31 08:25:45-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Michael Driscoll wrote:

&gt; Also, could the following lines be significant?  This is what I see when
&gt; I get the segfault:
&gt; 
&gt; Jan 30 18:43:26 diva kernel: loop: enabling 8 loop devices
&gt; Jan 30 18:43:26 diva modprobe: modprobe: Can't locate module cipher-blowfish-cbc
&gt; Jan 30 18:43:27 diva kernel: cipher-blowfish-cbccipher-blowfish&lt;6&gt;cryptoapi: \
&gt;                 Registered blowfish-ecb (0)
&gt; Jan 30 18:43:27 diva kernel: cryptoapi: Registered blowfish-cbc (65536)
&gt; Jan 30 18:43:27 diva kernel: divide error: 0000

What is in your /etc/modules.conf?

Try adding:
alias cipher-blowfish-cbc cipher-blowfish
alias cipher-blowfish-ebc cipher-blowfish


-- 
LarsG

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131143153</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-01-31 14:31:53-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Again, I am not a developer on this project.  But I do have more ideas
on collecting data:

&gt; modprobe loop
&gt; losetup
&gt; =&gt; segfault

If you use strace, e.g. "strace losetup ...", does the output help you
isolate an offending syscall?  Note: strace is pretty easy to use, see
the man page.

If you compare the strace output with output where you preloaded
blowfish and avoided the segfault, then it might help locate a failing
syscall, if there is one.

Or try running gdb on losetup (perhaps also recompile losetup with -g
for debugging).  Note: you need to know some gdb (or front end to gdb)
to do this.  This isolates other errors, such as dereferencing null
pointers and dividing by zero.

Again, using gdb to compare where losetup failed with the case where
blowfish is preloaded may help.

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010131171321</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-01-31 17:13:21-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Dejan Muhamedagic wrote:
&gt; 
&gt; I'll try to clarify:
&gt; 
&gt; 1.  It is a segfault (in losetup).  No oopses.
&gt; 

I had that, too. When trying to losetup in 2.2.18.4pre1, which uses the
same techniques as 2.4.x.y. I was also using Blowfish.

&gt; 2.  The kernel (2.4.0) seems to be OK.  loop devices work fine.

Don't you see the loop device hangs reported by other people? Or do you
have Jens Axboe's loop-3 patch applied?

&gt; 4.  All ciphers are compiled as modules.

dto.

&gt; So, I can switch to IDEA.  Is it advisable to use this cipher in a
&gt; production?  Any reports about its stability?  About the
&gt; international patch?  Or should I stay put with the v2.2.x kernels
&gt; for the time being?
&lt;snip&gt; 

You should try to use serpent. You can use it free of charge (unlike
IDEA, for which you must pay royalties if used commercially).

Also, if someone out there could test through the ciphers and check
which of them make losetup segfault, this would be much appreciated. I'm
still stuck w/ 2.2.x, but will reboot into 2.2.18.4pre1 and strace
losetup.

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010131175902</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-01-31 17:59:02-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Chris Kuklewicz wrote:
&gt; 
&lt;snip&gt;
&gt; If you use strace, e.g. "strace losetup ...", does the output help you
&gt; isolate an offending syscall?  Note: strace is pretty easy to use, see
&gt; the man page.
&lt;snip&gt;

As announced in a previous mail, I'm seeing exactly this in
2.2.18.4pre1. Attached is the strace output for "losetup -e blowfish
/dev/loop0 .crypto".

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)

["losetup.bf.strace;" (text/plain)]

execve("/sbin/losetup.new", ["losetup.new", "-e", "blowfish", "/dev/loop0", \
".crypto"], [/* 52 vars */]) = 0 brk(0)                                  = 0x804f0cc
open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=0, st_size=0, ...})   = 0
mmap(0, 36771, PROT_READ, MAP_PRIVATE, 3, 0) = 0x4000d000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
mmap(0, 4096, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40016000
munmap(0x40016000, 4096)                = 0
mmap(0, 706992, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40016000
mprotect(0x400b0000, 76208, PROT_NONE)  = 0
mmap(0x400b0000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x99000) = \
0x400b0000 mmap(0x400b6000, 51632, PROT_READ|PROT_WRITE, \
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x400b6000 close(3)                     \
= 0 munmap(0x4000d000, 36771)               = 0
personality(PER_LINUX)                  = 0
getpid()                                = 529
brk(0)                                  = 0x804f0cc
brk(0x804f104)                          = 0x804f104
brk(0x8050000)                          = 0x8050000
open("/usr/share/locale/locale.alias", O_RDONLY) = 3
fstat(3, {st_mode=0, st_size=0, ...})   = 0
mmap(0, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x4000d000
read(3, "# Locale name alias data base.\n"..., 4096) = 2032
read(3, "", 4096)                       = 0
close(3)                                = 0
munmap(0x4000d000, 4096)                = 0
open("/usr/share/i18n/locale.alias", O_RDONLY) = -1 ENOENT (No such file or \
directory) open("/usr/share/locale/de_DE/LC_CTYPE", O_RDONLY) = 3
fstat(3, {st_mode=0, st_size=0, ...})   = 0
mmap(0, 10428, PROT_READ, MAP_PRIVATE, 3, 0) = 0x4000d000
close(3)                                = 0
open(".crypto", O_RDWR)                 = 3
open("/dev/loop0", O_RDWR)              = 4
mlockall(0x3, 0, 0x4, 0x3, 0xbffff794)  = 0
ioctl(4, LOOP_SET_FD, 0x3)              = 0
ioctl(4, LOOP_SET_STATUS, 0xbffff6dc)   = -1 EINVAL (Invalid argument)
open("/proc/crypto/cipher/blowfish-cbc", O_RDONLY) = -1 ENOENT (No such file or \
directory) ioctl(4, LOOP_SET_STATUS, 0xbffff708)   = -1 ENOSYS (Function not \
implemented) ioctl(4, LOOP_SET_STATUS, 0xbffff708)   = -1 ENOSYS (Function not \
implemented) ioctl(4, LOOP_SET_STATUS, 0xbffff708)   = -1 ENOSYS (Function not \
implemented) ioctl(4, LOOP_SET_STATUS, 0xbffff708)   = -1 ENOSYS (Function not \
implemented) ioctl(4, LOOP_SET_STATUS &lt;unfinished ...&gt;
+++ killed by SIGSEGV +++


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010112183250</emailId><senderName>Chris Kuklewicz</senderName><senderEmail>chrisk@mit.edu</senderEmail><timestampReceived>2001-01-12 18:32:50-0400</timestampReceived><subject>Re: problems w/ AES &amp; Twofish modules + losetup</subject><body>

I went through the same issues last month with losetup.
I have kernel 2.2.18 and patch-int-2.2.18.3.gz

I have twofish &amp; aes working.

This is my modules.conf:
http://web.mit.edu/chrisk/www/modules.conf


This is my slightly modified patch to util-linux:
http://web.mit.edu/chrisk/www/util-linux-2.10r.int.patch

-- 
Chris

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010106025919</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-06 02:59:19-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

On Fri, Jan 05, 2001 at 11:07:56PM +0100, Alexander S A Kjeldaas wrote:
&gt; Two new patches are out - 2.2.18.4pre1 and 2.4.0.1, available at:
&gt; ftp://ftp.kernel.org/pub/linux/kernel/v2.4/

The above should read
ftp://ftp.kernel.org/pub/linux/kernel/crypto/v2.4/

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010106190101</emailId><senderName>Billy Harvey</senderName><senderEmail>billy.harvey@thrillseeker.net</senderEmail><timestampReceived>2001-01-06 19:01:01-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

 &gt; &gt; Two new patches are out - 2.2.18.4pre1 and 2.4.0.1, available at:
...
 &gt; ftp://ftp.kernel.org/pub/linux/kernel/crypto/v2.4/
 &gt; Alexander

Alexander,

I've successfully installed the 2.4.0.1 patch, and applied and
installed the util-linux patch.  The loopback encryption appears to
work to a point, and then lock the system up.  I've been only using
AES with 128 bit key so far.

This appears to happen under load, but is inconsistent.  If I start
the encrypted loopback while many other tasks are ongoing, leaving
little real memory, it appears to happen quicker.  The first occurence
was during the "mkfs -t ext2" phase, but that went successfully after
rebooting and only starting that process over.  The second occured
during the copy of several thousand files to the encrypted loop
(2GBytes in size).  About halfway through the copy process the system
locked again.

Rebooting and retrying was successful.  Creating a new loop and
copying the same files back also worked fine.

The lock appears to be at the kernel level, as everything freezes
solid, including the digital clock I have running.

Billy

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010106191851</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-06 19:18:51-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

On Sat, Jan 06, 2001 at 02:01:01PM -0500, Billy Harvey wrote:
&gt;
&gt; Alexander,
&gt; 
&gt; I've successfully installed the 2.4.0.1 patch, and applied and
&gt; installed the util-linux patch.  The loopback encryption appears to
&gt; work to a point, and then lock the system up.  I've been only using
&gt; AES with 128 bit key so far.
&gt; 
&gt; This appears to happen under load, but is inconsistent.  If I start
&gt; the encrypted loopback while many other tasks are ongoing, leaving
&gt; little real memory, it appears to happen quicker.  The first occurence
&gt; was during the "mkfs -t ext2" phase, but that went successfully after
&gt; rebooting and only starting that process over.  The second occured
&gt; during the copy of several thousand files to the encrypted loop
&gt; (2GBytes in size).  About halfway through the copy process the system
&gt; locked again.
&gt; 
&gt; Rebooting and retrying was successful.  Creating a new loop and
&gt; copying the same files back also worked fine.
&gt; 
&gt; The lock appears to be at the kernel level, as everything freezes
&gt; solid, including the digital clock I have running.
&gt; 

Could you try this without using encryption?

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010106215217</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-01-06 21:52:17-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

Billy Harvey wrote:
&gt; 
&lt;snip&gt;
&gt; I've successfully installed the 2.4.0.1 patch, and applied and
&gt; installed the util-linux patch.  The loopback encryption appears to
&gt; work to a point, and then lock the system up.  I've been only using
&gt; AES with 128 bit key so far.
&lt;snip&gt;

This is a known bug. It's on Ted's todo list (linux24.sourceforge.net)
in section (to do, but no showstopper). This is why it is still there. A
fix exists, but isn't merged would probably be the better section,
because there is a patch by Jens Axboe that seems to fix the problem.
But then agian, they may not be sure _why_ it fixes it:

Jens Axboe wrote:
&gt; 
&gt; On Wed, Jan 03 2001, William Stearns wrote:
&gt; &gt; Good day, all,
&gt; &gt;       This is just meant as an informational message, not a complaint.
&gt; &gt; Ted, could you note that this still exists on 2.4.0-test13-pre7 in the
&gt; &gt; todo page?  Many thanks.
&gt; &gt;
&gt; &gt; [1.] One line summary of the problem:
&gt; &gt;       Loopback filesystem writes still hang on 2.4.0-test13-pre7.
&gt; 
&gt; Could you try with this patch:
&gt; 
&gt; *.kernel.org/pub/linux/kernel/people/axboe/patches/2.4-prerelease/loop-remap-2
&gt; 
&gt; it survives 10 runs of your script and dbench abuse etc. If there are still
&gt; problems, I'd like to know... Should be faster too :-)
&gt; 
&gt; --
&gt; * Jens Axboe &lt;axboe@suse.de&gt;
&gt; * SuSE Labs
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-kernel" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; Please read the FAQ at http://www.tux.org/lkml/


-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107105253</emailId><senderName>"Dr. Ernst Molitor"</senderName><senderEmail>molitor@mibi02.meb.uni-bonn.de</senderEmail><timestampReceived>2001-01-07 10:52:53-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

Dear Alexander, 

thank you very much for your work on kernel-int, which is most
valuable.

With the 2.4.0.1 patch and the util-linux patch applied to
util-linux...[or].tar.gz, I'm able to create and use new encrypted
file systems via loop, but I seem unable to access those created under
the latest 2.2.17 kernel-int patches. Trying to mount with, e.g.,

	 mount -t ext2 -oloop,encryption=blowfish .crypto crypto

will lead to a passphrase dialog, then exit with an error message
like 

   ioctl: LOOP_SET_STATUS ...

Trying one of the cipher names that appear in /proc/crypto/ciphers
works fine for newly added ciphers, only, as far as I can see; 
using the full name (that is, with -cbc or -ecb added), leads to
error messages all the time ("cipher not supported"), regardless of
how I try to escape the dash from being interpreted as an option 
lead in by the shell...

I'd very much appreciate a hint on what my mistake could be...

Best regards,

Ernst

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107143709</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-07 14:37:09-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

On Sun, Jan 07, 2001 at 11:52:53AM +0100, Dr. Ernst Molitor wrote:
&gt; Dear Alexander, 
&gt; 
&gt; thank you very much for your work on kernel-int, which is most
&gt; valuable.
&gt; 
&gt; With the 2.4.0.1 patch and the util-linux patch applied to
&gt; util-linux...[or].tar.gz, I'm able to create and use new encrypted
&gt; file systems via loop, but I seem unable to access those created under
&gt; the latest 2.2.17 kernel-int patches. Trying to mount with, e.g.,
&gt; 
&gt; 	 mount -t ext2 -oloop,encryption=blowfish .crypto crypto
&gt; 
&gt; will lead to a passphrase dialog, then exit with an error message
&gt; like 
&gt; 
&gt;    ioctl: LOOP_SET_STATUS ...
&gt; 
&gt; Trying one of the cipher names that appear in /proc/crypto/ciphers
&gt; works fine for newly added ciphers, only, as far as I can see; 
&gt; using the full name (that is, with -cbc or -ecb added), leads to
&gt; error messages all the time ("cipher not supported"), regardless of
&gt; how I try to escape the dash from being interpreted as an option 
&gt; lead in by the shell...
&gt; 
&gt; I'd very much appreciate a hint on what my mistake could be...
&gt; 

It's a bug in the util-linux patch.  For "old" ciphers (i.e. twofish,
blowfish and others that worked in previous versions of util-linux),
it will try to use the LOOP_SET_STATUS ioctl wrongly.

The attached patch should hopefully fix that by first trying the
new-style ioctl, and then falling back to the old-style ioctl if it
didn't work.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

["util-linux.diff" (text/plain)]

diff -urN util-linux-2.10o.int3/mount/lomount.c util-linux-2.10o.int2/mount/lomount.c
--- util-linux-2.10o.int3/mount/lomount.c	Sun Jan  7 03:32:14 2001
+++ util-linux-2.10o.int2/mount/lomount.c	Sun Jan  7 03:36:30 2001
@@ -44,6 +44,7 @@
 extern char *xstrdup (const char *s);	/* not: #include "sundries.h" */
 extern void error (const char *fmt, ...);	/* idem */
 
+
 struct cipher_info
 {
 	const char *name;
@@ -53,38 +54,13 @@
 	int key_schedule_size;
 };
 
-
-static int get_cipher_info(const char *name, struct cipher_info *res)
-{
-	char path[PATH_MAX];
-	char buf[2000];
-	FILE *f;
-	struct {
-		int *out;
-		const char *prefix;
-	} fields[] = {{&amp;res-&gt;blocksize, "blocksize:"},
-		      {&amp;res-&gt;keysize_mask, "keysize_mask:"},
-		      {&amp;res-&gt;ivsize, "ivsize:"},
-		      {&amp;res-&gt;key_schedule_size, "key_schedule_size:"}};
-	snprintf(path, sizeof(path), "/proc/crypto/cipher/%s", name);
-	f = fopen(path, "r");
-	while(f &amp;&amp; fgets(buf, sizeof(buf), f)) {
-		int i;
-		for (i = 0; i &lt; sizeof(fields)/sizeof(fields[0]); i++) {
-			int len = strlen(fields[i].prefix);
-			if (strncmp(buf, fields[i].prefix, len) == 0) {
-				*fields[i].out = strtoul(&amp;buf[len+1], NULL, 0);
-				break;
-			}
-		}
-		
-	}
-	if (!f) 
-		return -1;
-	return 0;
-}
-
-
+static int set_loop_passwd(struct loop_info *_loopinfo, int pfd, int keysz,
+			   const char *encryption, int fd, int ffd);
+static int get_cipher_info(const char *name, struct cipher_info *res);
+static int name_to_id(const char *name);
+#ifdef MAIN
+static char *id_to_name(int id);
+#endif
 
 #ifdef LOOP_SET_FD
 struct crypt_type_struct {
@@ -103,29 +79,7 @@
 	{ -1, NULL,0   }
 };
 
-static int 
-crypt_type (const char *name) {
-	int i;
-
-	if (name) {
-		for (i = 0; crypt_type_tbl[i].id != -1; i++)
-			if (!strcasecmp (name, crypt_type_tbl[i].name))
-				return crypt_type_tbl[i].id;
-	}
-	return LO_CRYPT_CRYPTOAPI;
-}
-
 #ifdef MAIN
-static char *
-crypt_name (int id) {
-	int i;
-
-	for (i = 0; crypt_type_tbl[i].id != -1; i++)
-		if (id == crypt_type_tbl[i].id)
-			return crypt_type_tbl[i].name;
-	return "undefined";
-}
-
 static int
 show_loop (char *device) {
 	struct loop_info loopinfo;
@@ -147,7 +101,7 @@
 	printf (_("%s: [%04x]:%ld (%s) offset %d, %s encryption\n"),
 		device, loopinfo.lo_device, loopinfo.lo_inode,
 		loopinfo.lo_name, loopinfo.lo_offset,
-		crypt_name (loopinfo.lo_encrypt_type));
+		id_to_name(loopinfo.lo_encrypt_type));
 	close (fd);
 
 	return 0;
@@ -213,12 +167,12 @@
 		error(_(
 		    "mount: Could not find any loop device, and, according to %s,\n"
 		    "       this kernel does not know about the loop device.\n"
-		    "       (If so, then recompile or `insmod loop.o'.)"),
+		    "       (If so, then recompile or `modprobe loop'.)"),
 		      PROC_DEVICES);
 	    else
 		error(_(
 		    "mount: Could not find any loop device. Maybe this kernel does not know\n"
-		    "       about the loop device (then recompile or `insmod loop.o'), or\n"
+		    "       about the loop device (then recompile or `modprobe loop'), or\n"
 		    "       maybe /dev/loop# has the wrong major number?"));
 	} else
 		error(_("mount: could not find any free loop device"));
@@ -270,12 +224,7 @@
 set_loop (const char *device, const char *file, int offset,
 	  const char *encryption, int pfd, int keysz, int *loopro) {
 	struct loop_info loopinfo;
-	int fd, ffd, mode, i;
-	int keylength;
-	char *pass;
-	char keybits[2*HASHLENGTH]; 
-	char passwdbuff[PASSWDBUFFLEN];
-	struct cipher_info info;
+	int fd, ffd, mode, tried_old;
 
 	mode = (*loopro ? O_RDONLY : O_RDWR);
 	if ((ffd = open (file, mode)) &lt; 0) {
@@ -293,14 +242,10 @@
 	*loopro = (mode == O_RDONLY);
 
 	memset (&amp;loopinfo, 0, sizeof (loopinfo));
-	strncpy (loopinfo.lo_name, file, LO_NAME_SIZE);
+	snprintf(loopinfo.lo_name, sizeof(loopinfo.lo_name),
+		 "%s-cbc", encryption);
 	loopinfo.lo_name[LO_NAME_SIZE - 1] = 0;
-	if (encryption &amp;&amp; (loopinfo.lo_encrypt_type = crypt_type (encryption))
-	    &lt; 0) {
-		fprintf (stderr, _("Unsupported encryption type %s\n"),
-			 encryption);
-		return 1;
-	}
+	loopinfo.lo_encrypt_type = LO_CRYPT_CRYPTOAPI;
 	loopinfo.lo_offset = offset;
 
 #ifdef MCL_FUTURE  
@@ -315,29 +260,75 @@
 		exit(1);
 	}
 #endif
+	
+	if (ioctl (fd, LOOP_SET_FD, ffd) &lt; 0) {
+		perror ("ioctl: LOOP_SET_FD");
+		return 1;
+	}
 
-	switch (loopinfo.lo_encrypt_type) {
+	tried_old = 0;
+again:
+	set_loop_passwd(&amp;loopinfo, pfd, keysz, encryption, fd, ffd);
+	
+	if (ioctl (fd, LOOP_SET_STATUS, &amp;loopinfo) &lt; 0) {
+		/* Try again with old-style LO_CRYPT_XX if
+                   new-style LO_CRYPT_CRYPTOAPI ioctl didn't work */
+		if (tried_old) {
+			error("The cipher does not exist, or a cipher module "
+			      "needs to be loaded into the kernel");
+			perror ("ioctl: LOOP_SET_STATUS");
+			goto out_ioctl;
+		}
+		strncpy (loopinfo.lo_name, file, LO_NAME_SIZE);
+		loopinfo.lo_name[LO_NAME_SIZE - 1] = 0;
+		loopinfo.lo_encrypt_type = name_to_id (encryption);
+		tried_old = 1;
+		goto again;
+	}
+	close (fd);
+	close (ffd);
+	if (verbose &gt; 1)
+		printf(_("set_loop(%s,%s,%d): success\n"),
+		       device, file, offset);
+	return 0;
+out_ioctl:
+	(void) ioctl (fd, LOOP_CLR_FD, 0);
+	return 1;
+}
+
+int
+set_loop_passwd(struct loop_info *loopinfo, int pfd, int keysz, 
+		const char *encryption, int fd, int ffd)
+{
+	int i;
+	int keylength;
+	char *pass;
+	char keybits[2*HASHLENGTH]; 
+	char passwdbuff[PASSWDBUFFLEN];
+	struct cipher_info info;
+
+	switch (loopinfo-&gt;lo_encrypt_type) {
 	case LO_CRYPT_NONE:
-		loopinfo.lo_encrypt_key_size = 0;
+		loopinfo-&gt;lo_encrypt_key_size = 0;
 		break;
 	case LO_CRYPT_XOR:
           /* WARNING: xgetpass() can return massive amounts of data,
            * not only 128 bytes like the original getpass(3) */
 		pass = xgetpass (pfd,_("Password: "));
-		strncpy (loopinfo.lo_encrypt_key, pass, LO_KEY_SIZE);
-		loopinfo.lo_encrypt_key[LO_KEY_SIZE - 1] = 0;
-		loopinfo.lo_encrypt_key_size = strlen(loopinfo.lo_encrypt_key);
+		strncpy (loopinfo-&gt;lo_encrypt_key, pass, LO_KEY_SIZE);
+		loopinfo-&gt;lo_encrypt_key[LO_KEY_SIZE - 1] = 0;
+		loopinfo-&gt;lo_encrypt_key_size = strlen(loopinfo-&gt;lo_encrypt_key);
 		break;
 	case LO_CRYPT_DES:
 		printf(_("WARNING: Use of DES is depreciated.\n"));
 		pass = xgetpass (pfd,_("Password: "));
-		strncpy (loopinfo.lo_encrypt_key, pass, 8);
-		loopinfo.lo_encrypt_key[8] = 0;
-		loopinfo.lo_encrypt_key_size = 8;
+		strncpy (loopinfo-&gt;lo_encrypt_key, pass, 8);
+		loopinfo-&gt;lo_encrypt_key[8] = 0;
+		loopinfo-&gt;lo_encrypt_key_size = 8;
 		pass = getpass (_("Init (up to 16 hex digits): "));
 		for (i = 0; i &lt; 16 &amp;&amp; pass[i]; i++)
 			if (isxdigit (pass[i])) {
-				loopinfo.lo_init[i &gt;&gt; 3] |= (pass[i] &gt; '9' ?
+				loopinfo-&gt;lo_init[i &gt;&gt; 3] |= (pass[i] &gt; '9' ?
 				  (islower (pass[i]) ? toupper (pass[i]) :
 				   pass[i])-'A'+10 : pass[i]-'0') &lt;&lt; (i&amp;7) * 4;
 			} else {
@@ -355,28 +346,21 @@
 		passwdbuff[0] = 'A';
 		rmd160_hash_buffer(keybits,pass,strlen(pass));
 		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
-		memcpy((char*)loopinfo.lo_encrypt_key,keybits,2*HASHLENGTH);
+		memcpy((char*)loopinfo-&gt;lo_encrypt_key,keybits,2*HASHLENGTH);
 		keylength=0;
 		for(i=0; crypt_type_tbl[i].id != -1; i++){
-		         if(loopinfo.lo_encrypt_type == crypt_type_tbl[i].id){
+		         if(loopinfo-&gt;lo_encrypt_type == crypt_type_tbl[i].id){
 			         keylength = crypt_type_tbl[i].keylength;
 				 break;
 			 }
 		}
-		loopinfo.lo_encrypt_key_size=keylength;
+		loopinfo-&gt;lo_encrypt_key_size=keylength;
 		break;
 	case LO_CRYPT_CRYPTOAPI:
-		snprintf(loopinfo.lo_name, sizeof(loopinfo.lo_name),
-			 "%s-cbc", encryption);
-		loopinfo.lo_name[LO_NAME_SIZE - 1] = 0;
 		/* Give the kernel an opportunity to load the cipher */
-		(void) ioctl (fd, LOOP_SET_FD, ffd);
 		(void) ioctl (fd, LOOP_SET_STATUS, &amp;loopinfo);
-		(void) ioctl (fd, LOOP_CLR_FD, 0);
-		if (get_cipher_info(loopinfo.lo_name, &amp;info) &lt; 0) {
-			error("The cipher does not exist, or a cipher module "
-			      "needs to be loaded into the kernel");
-			goto out_ioctl;
+		if (get_cipher_info(loopinfo-&gt;lo_name, &amp;info) &lt; 0) {
+			return 1;
 		}
 		if (keysz &gt; 0 &amp;&amp;
 		    !((1 &lt;&lt; ((keysz / 8) - 1)) &amp; info.keysize_mask)) {
@@ -392,8 +376,7 @@
 			char keysize[200];
 			printf("Available keysizes (bits): ");
 			for (; i &lt; 32; i++) {
-				if (info.keysize_mask &amp; (1 &lt;&lt; i) &amp;&amp;
-				    8*(i+1) &lt;= 160) {
+				if (info.keysize_mask &amp; (1 &lt;&lt; i)) {
 					printf("%d ", 8*(i+1));
 					available = 1;
 				}
@@ -411,36 +394,23 @@
 		passwdbuff[0] = 'A';
 		rmd160_hash_buffer(keybits,pass,strlen(pass));
 		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
-		memcpy((char*)loopinfo.lo_encrypt_key,keybits,2*HASHLENGTH);
+		memcpy((char*)loopinfo-&gt;lo_encrypt_key,keybits,2*HASHLENGTH);
 
-		loopinfo.lo_encrypt_key_size=keysz/8;
+		loopinfo-&gt;lo_encrypt_key_size=keysz/8;
 
 		break;
 	default:
 		fprintf (stderr,
 			 _("Don't know how to get key for encryption system %d\n"),
-			 loopinfo.lo_encrypt_type);
-		return 1;
-	}
-	if (ioctl (fd, LOOP_SET_FD, ffd) &lt; 0) {
-		perror ("ioctl: LOOP_SET_FD");
+			 loopinfo-&gt;lo_encrypt_type);
 		return 1;
 	}
-	if (ioctl (fd, LOOP_SET_STATUS, &amp;loopinfo) &lt; 0) {
-		perror ("ioctl: LOOP_SET_STATUS");
-		goto out_ioctl;
-	}
-	close (fd);
-	close (ffd);
-	if (verbose &gt; 1)
-		printf(_("set_loop(%s,%s,%d): success\n"),
-		       device, file, offset);
-	return 0;
-out_ioctl:
-	(void) ioctl (fd, LOOP_CLR_FD, 0);
-	return 1;
+        return 0;
 }
 
+
+
+
 int 
 del_loop (const char *device) {
 	int fd;
@@ -638,3 +608,60 @@
 }
 #endif
 #endif
+
+static int get_cipher_info(const char *name, struct cipher_info *res)
+{
+	char path[PATH_MAX];
+	char buf[2000];
+	FILE *f;
+	struct {
+		int *out;
+		const char *prefix;
+	} fields[] = {{&amp;res-&gt;blocksize, "blocksize:"},
+		      {&amp;res-&gt;keysize_mask, "keysize_mask:"},
+		      {&amp;res-&gt;ivsize, "ivsize:"},
+		      {&amp;res-&gt;key_schedule_size, "key_schedule_size:"}};
+	snprintf(path, sizeof(path), "/proc/crypto/cipher/%s", name);
+	f = fopen(path, "r");
+	while(f &amp;&amp; fgets(buf, sizeof(buf), f)) {
+		int i;
+		for (i = 0; i &lt; sizeof(fields)/sizeof(fields[0]); i++) {
+			int len = strlen(fields[i].prefix);
+			if (strncmp(buf, fields[i].prefix, len) == 0) {
+				*fields[i].out = strtoul(&amp;buf[len+1], NULL, 0);
+				break;
+			}
+		}
+		
+	}
+	if (!f) 
+		return -1;
+	return 0;
+}
+
+
+static int 
+name_to_id(const char *name) 
+{
+	int i;
+
+	if (name) {
+		for (i = 0; crypt_type_tbl[i].id != -1; i++)
+			if (!strcasecmp (name, crypt_type_tbl[i].name))
+				return crypt_type_tbl[i].id;
+	}
+	return LO_CRYPT_CRYPTOAPI;
+}
+
+#ifdef MAIN
+static char *
+id_to_name(int id) {
+	int i;
+
+	for (i = 0; crypt_type_tbl[i].id != -1; i++)
+		if (id == crypt_type_tbl[i].id)
+			return crypt_type_tbl[i].name;
+	return "undefined";
+}
+#endif
+

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010107145247</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-07 14:52:47-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

On Sat, Jan 06, 2001 at 09:52:17PM +0000, Marc Mutz wrote:
&gt; 
&gt; This is a known bug. It's on Ted's todo list (linux24.sourceforge.net)
&gt; in section (to do, but no showstopper). This is why it is still there. A
&gt; fix exists, but isn't merged would probably be the better section,
&gt; because there is a patch by Jens Axboe that seems to fix the problem.
&gt; But then agian, they may not be sure _why_ it fixes it:
&gt; 

Thanks for the pointer. It seemed to work briefly, but then it started
oopsing on me during LOOP_SET_FD (inode-&gt;i_bdev was NULL for some
reason).  I'll try some more today. 

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010107150006</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-07 15:00:06-0400</timestampReceived><subject>Re: New patches out for 2.2 and 2.4.</subject><body>

On Sun, Jan 07, 2001 at 03:37:09PM +0100, Alexander S A Kjeldaas wrote:

[..]
&gt; The attached patch should hopefully fix that by first trying the
&gt; new-style ioctl, and then falling back to the old-style ioctl if it
&gt; didn't work.
&gt; 

The patch should be applied on top of the one in 2.4.0.1.  I've also
put out a new patch 2.4.0.2 with the updated util-linux patch.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010111083404</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-11 08:34:04-0400</timestampReceived><subject>Re: 2.2.x and 2.4.0 kerneli</subject><body>

On Wed, Jan 10, 2001 at 02:46:03PM +0000, ds wrote:
&gt; hi,
&gt; 	I made another attempt getting 2.2.x crypto images working under 
&gt; 2.4.0 but have failed again.  Running modprobe on cipher-serpent locks 
&gt; up teh system enough so that it cannot be used but no OOPS appears. 
&gt; This happens with the old and new util-linux.  What's the problem?
&gt; I noticed that there's no loop_gen atleast in my install, has it been 
&gt; removed or could this be the problem in my case?
&gt; 

loop_gen.c was removed.  It is now much simplified and part of loop.c.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010111140729</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-01-11 14:07:29-0400</timestampReceived><subject>RPMs available for a kerneli-patched 2.4.0 kernel</subject><body>

Hi there,

I have just built a set of RPM packages for Mandrake Linux, using the latest 
Mandrake-cooker 2.4.0 kernel and the kerneli patch.

These RPMs can be downloaded from 
ftp://ftp.i-quake.com/pub/linux/kernel-crypto/Mandrake-unofficial/

They have been announced in the french open-crypto mailing-list.
(http://sympa.i-quake.com/wws/info/open-crypto)

They have been announced as well on the www.geocities.com/openpgp website.

You may wish to have a look at the announcement in the mailing-list Web 
archive (maybe with the help of babelfish translator, it's in french ;-)

Please feel free to announce their existence, and/or mirror them on other ftp 
sites if you wish.

Best regards.

-- 
Michel Bouissou - OpenPGP DH/DSS ID 0x5C2BEE8F
michel@bouissou.net
Offrez-vous un v√©ritable syst√®me d'exploitation: Linux ;-)
(Vous n'avez vraiment plus *aucune* excuse √† subir Winchoze)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010111150709</emailId><senderName>Pierre PEIFFER</senderName><senderEmail>ppe@sxb.bsf.alcatel.fr</senderEmail><timestampReceived>2001-01-11 15:07:09-0400</timestampReceived><subject>Re: make xconfig doesn't work</subject><body>

Pierre PEIFFER wrote:

&gt; Hello,
&gt;
&gt;     With patch 2.2.17.10, "make xconfig" doesn't work (applied with kernel
&gt; 2.2.13). I have the following error:
&gt;
&gt; &lt;&lt;
&gt; cat header.tk &gt;&gt; ./kconfig.tk
&gt; ./tkparse-sparc-solaris2.6 &lt; ../arch/i386/config.in &gt;&gt; kconfig.tk
&gt; drivers/block/Config.in: 106: unknown command
&gt; make[1]: *** [kconfig.tk] Error 1
&gt; &gt;&gt;
&gt;
&gt;     (but "make menuconfig" works well)
&gt;     I supposed "define_string" is the problem... Do you know how to solve this
&gt; ? (Although this is not a big problem, I know...)

In case of someone is interested, I've tried to correct it by modifying
the
Config.in file (The patch is at the  end of this mail).
I think (I'm not completly sure) it has the expected behaviour.
To add the "define_string" support in the tkparser seems to be a little
bit more
complex...

Bye.

    Pierre

106c106
&lt;       define_string CONFIG_BLK_DEV_LOOP_GEN_SEL $CONFIG_CIPHERS
---
&gt;       define_bool CONFIG_BLK_DEV_LOOP_GEN_SEL m
108c108,112
&lt;       define_string CONFIG_BLK_DEV_LOOP_GEN_SEL $CONFIG_BLK_DEV_LOOP
---
&gt;       if [ "$CONFIG_BLK_DEV_LOOP" = "m" ]; then
&gt;         define_bool CONFIG_BLK_DEV_LOOP_GEN_SEL m
&gt;       else
&gt;         define_bool CONFIG_BLK_DEV_LOOP_GEN_SEL y
&gt;       fi

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010113123046</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-01-13 12:30:46-0400</timestampReceived><subject>corrections</subject><body>

correction:
When using losetup, I BOTH of the lines
alias cipher-3          twofish
alias cipher-9          twofish
in my modules.conf to get the twofish module loaded.

If I just load the module with 'modprobe twofish', the last line is
enough. With modprobe I can also load rijndael and it gets loaded.
So the problem seems to be with losetup.

Should I try to aply util-linux-2.10o.int.patch on a util-linux-2.10o? I
aplied it to an util-linux 2.10q. Or is there somewhere a new patch out
there?  


Christoph

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010113133915</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-01-13 13:39:15-0400</timestampReceived><subject>Re: problems w/ AES + losetup</subject><body>

* Chris Kuklewicz [2001-01-12]:
&gt; I have twofish &amp; aes working. This is my slightly modified patch to
&gt; util-linux:
Thank you very much! Twofish is now working, unfortunately aes isn't.
At least the module is loaded. I don't have the abilities to follow your
changes in the source code (or even read+understand the source code), so
I guess I wait for "changes in how losetup talks to the kernel that
hopefully should end the need to change util-linux whenever a cipher is
added to the kernel" (astor spoke)

Thanks for all your work and time


Christoph
-- 
PGP (GnuPG) encrypted mail welcome! (Key 0xBAC8E4D5)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010114155254</emailId><senderName>Andrew McDonald</senderName><senderEmail>andrew@mcdonald.org.uk</senderEmail><timestampReceived>2001-01-14 15:52:54-0400</timestampReceived><subject>Re: patch-int-2.4.0.2 and SMP</subject><body>

On Sun, Jan 14, 2001 at 03:11:31PM +0000, Andrew McDonald wrote:
&gt; There appears to be a problem with compiling the crypto patch for an
&gt; SMP system. modprobe'ing a cipher module reliably locks up the system
&gt; (no oops). The sequence of commands:
&gt; # modprobe cryptoapi
&gt; # modprobe cipher-aes
&gt; is the simplest way to show this.

Following up to my own question, it looks like the lock-up is occuring
in register_transform (in cryptoapi.c), sticking some debugs in:
        crypto_debug("going to lock\n");
        write_lock(&amp;ti-&gt;t_group-&gt;tg_lock);
        crypto_debug("list_add\n");
        list_add(&amp;ti-&gt;t_list, ti-&gt;t_group-&gt;tg_head);
        crypto_debug("going to unlock\n");
"going to lock" appears, and then the kernel locks up.

I'm not clear what the problem is though at the moment. I presume the
lock is a no-op on UP systems.


Andrew
-- 
Andrew McDonald
E-mail: andrew@mcdonald.org.uk
http://www.mcdonald.org.uk/andrew/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010115071529</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-15 07:15:29-0400</timestampReceived><subject>Re: atomicity of digest implementations in 2.4.0.2</subject><body>

On Sun, Jan 14, 2001 at 10:25:40PM +0000, Andrew McDonald wrote:
&gt; Hi all,
&gt; 
&gt; The software implementations of ciphers are all marked as atomic, but
&gt; the digests algorithms are not.
&gt; 
&gt; It looks, to me, like there is a missing
&gt; di-&gt;trans.t_atomicapi = 1;
&gt; from register_digest.
&gt; 
&gt; Any comments?
&gt; 

Yes it's missing.  It should be added like for ciphers, but we
discussed this for ciphers first.

Btw, good to see StegFS being maintained. :-)

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010115072836</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-15 07:28:36-0400</timestampReceived><subject>Re: problems w/ AES &amp; Twofish modules + losetup</subject><body>

On Fri, Jan 12, 2001 at 06:35:25PM +0100, Christoph Hertel wrote:
&gt; 
&gt; So, where can I get the-one-and-only (TM) cipher-aliases? Is there
&gt; anybody with crypto-modules out there? What's in your modules.conf?
&gt; 

I don't have anything in modules.conf (or actually, I run debian on my
compile box so I have the old debian-patched /etc/modules.conf, but I
don't _need_ to have anything in /etc/modules.conf anymore). In the
2.4.x patch and the 2.2.18pre patches the need for entries in
modules.conf has been removed.  When the 2.4.x patch has stabilized
somewhat there will be a 2.2.x patch that uses this new scheme too.

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010115193552</emailId><senderName>Martin MaD Douda</senderName><senderEmail>martin@douda.net</senderEmail><timestampReceived>2001-01-15 19:35:52-0400</timestampReceived><subject>Re: New patch out - 2.4.0.3</subject><body>

&gt; 2001-01-15 Martin Douda &lt;martin@douda.net&gt;
&gt; 
&gt;         * proper null-termination of passwords in util-linux patch.

Oops. Still not good. I've missed this:

    rmd160_hash_buffer(keybits+HASHLEN,passwdbuff,strlen(pass)+1);

Correct form is:

    rmd160_hash_buffer(...........,strlen(passwdbuff));


passwdbuff does not have srtlen(pass)+1 chars, but just 
strlen(passwdbuff) chars.

--------------------------------------------------------------------------------
                              Martin "MaD" Douda
WEB: http://martin.douda.net/   PHONE:+420603752779   ICQ# 86467013
EMAIL: &lt;martin@douda.net&gt;, &lt;mad@gate.mobil.cz&gt; (160 characters only)
PGP:ID=0x6FE43023 Fingerprint:E495 11DA EF6E 0DD6 965A 54F3 888E CC9E 6FE4 3023
--------------------------------------------------------------------------------
I am a computer, dumber than any human and smarter than an administrator.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010117073850</emailId><senderName>Alexander S A Kjeldaas</senderName><senderEmail>alexander.kjeldaas@fast.no</senderEmail><timestampReceived>2001-01-17 07:38:50-0400</timestampReceived><subject>Re: Bug in crypto/gen-cbc.h?</subject><body>

On Wed, Jan 17, 2001 at 12:49:11AM +0100, Martin Aumueller wrote:
&gt; Hi!
&gt; 
&gt; As far as I can see the atomic flag is not honoured when
&gt; doing an atomic cbc decryption. The code in crypto/gen-cbc.h
&gt; reads:
&gt;       if (current-&gt;need_resched) {
&gt;          schedule();
&gt;       }
&gt; 
&gt; But it should perhaps be changed to:
&gt;       if (!atomic &amp;&amp; current-&gt;need_resched) {
&gt;          schedule();
&gt;       }
&gt; 

You're right. Fixed.

astor

-- 
Alexander Kjeldaas                Mail:  astor@fast.no
finger astor@master.kernel.org for OpenPGP key.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010129203646</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-01-29 20:36:46-0400</timestampReceived><subject>hp.com removed</subject><body>

Hi,

since I got completely unusable bounce messages from the hp.com
domain (absolutely no clue to figure out the bouncing address)
I have removed all hp.com subscribers from the list.

regards,

Rik
--
Virtual memory is like a game you can't win;
However, without VM there's truly nothing to lose...

		http://www.surriel.com/
http://www.conectiva.com/	http://distro.conectiva.com.br/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010131183048</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-01-31 18:30:48-0400</timestampReceived><subject>[PATCH] fix keysize/keybits handling of mount</subject><body>

Hi Astor!

The -k resp. parameter to mount was not working (the 'k' was missing
from the list of option characters in getopt). I removed that switch. It
should really be something you can stuff into /etc/fstab and therefore
it needs to be an option to be supplied via '-o'. So now there is a
keysize= option you can put into the options column of fstab(5) or
specify on the command line via '-o'. Additionally, it error()'s if
someone gives the keysize option w/o giving the encryption option, too.
Please check that if clause carfully. I don't know what I was doing
there... 

This patch is completely untested, I did not even check if it compiles,
but I modelled this option along the offset option, so there should be
no big mistakes.

It's relative to a util-linux2.10r, patched with the util-linux patch
from 2.2.18.4pre1.

Please consider applying (after testing :-).

Marc

-- 
Marc Mutz &lt;Marc@Mutz.com&gt;     http://EncryptionHOWTO.sourceforge.net/
University of Bielefeld, Dep. of Mathematics / Dep. of Physics

PGP-keyID's:   0xd46ce9ab (RSA), 0x7ae55b9e (DSS/DH)

["util-linux.add.keysize.option.patch;" (text/plain)]

--- util-linux-2.10r/mount/mount.c.orig	Mon Jan 15 18:59:53 2001
+++ util-linux-2.10r/mount/mount.c	Wed Jan 31 19:19:00 2001
@@ -113,9 +113,6 @@
 /* Contains the fd no. to read the passphrase from, if any */
 static int pfd = -1;
 
-/* Contains the preferred keysize in bits we want to use */
-static int keysz = 0;
-
 /* Map from -o and fstab option strings to the flag argument to mount(2).  */
 struct opt_map {
   const char *opt;		/* option name */
@@ -192,7 +189,7 @@
 };
 
 static char *opt_loopdev, *opt_vfstype, *opt_offset, *opt_encryption,
-  *opt_speed;
+  *opt_keysize, *opt_speed;
 
 static struct string_opt_map {
   char *tag;
@@ -203,6 +200,7 @@
   { "vfs=",	1, &amp;opt_vfstype },
   { "offset=",	0, &amp;opt_offset },
   { "encryption=", 0, &amp;opt_encryption },
+  { "keysize=", 0, &amp;opt_keysize },
   { "speed=", 0, &amp;opt_speed },
   { NULL, 0, NULL }
 };
@@ -536,7 +534,7 @@
 static int
 loop_check(char **spec, char **type, int *flags,
 	   int *loop, char **loopdev, char **loopfile) {
-  int looptype, offset;
+  int looptype, offset, keysize;
 
   /*
    * In the case of a loop mount, either type is of the form lo@/dev/loop5
@@ -561,6 +559,9 @@
       *type = opt_vfstype;
   }
 
+  if (*opt_keysize &amp;&amp; !*opt_encryption)
+    error(_("mount: you cannot specify a keysize without specifying encryption"));
+
   *loop = ((*flags &amp; MS_LOOP) || *loopdev || opt_offset || opt_encryption);
   *loopfile = *spec;
 
@@ -579,8 +580,9 @@
       if (verbose)
 	printf(_("mount: going to use the loop device %s\n"), *loopdev);
       offset = opt_offset ? strtoul(opt_offset, NULL, 0) : 0;
+      keysize = opt_keysize ? strtoul(opt_keysize, NULL, 0) : 0;
       if (set_loop (*loopdev, *loopfile, offset, opt_encryption, pfd, 
-		    keysz, &amp;loopro)) {
+		    keysize, &amp;loopro)) {
 	if (verbose)
 	  printf(_("mount: failed setting up loop device\n"));
 	return EX_FAIL;
@@ -1294,7 +1296,6 @@
 	{ "rw", 0, 0, 'w' },
 	{ "options", 1, 0, 'o' },
 	{ "pass-fd", 1, 0, 'p' },
-	{ "keybits", 1, 0, 'k' },
 	{ "types", 1, 0, 't' },
 	{ "bind", 0, 0, 128 },
 	{ "replace", 0, 0, 129 },
@@ -1341,7 +1342,6 @@
 	char *options = NULL, *spec, *node;
 	char *volumelabel = NULL;
 	char *passfd = NULL;
-	char *keysize = NULL;
 	char *uuid = NULL;
 	string_list types = NULL;
 	struct mntentchn *mc;
@@ -1377,9 +1377,6 @@
 		case 'h':		/* help */
 			usage (stdout, 0);
 			break;
-		case 'k':
-			keysize = optarg;
-			break;
 		case 'l':
 			list_with_volumelabel = 1;
 			break;
@@ -1485,8 +1482,6 @@
 
 	if (passfd &amp;&amp; sscanf(passfd,"%d",&amp;pfd) != 1)
 	        die (EX_USAGE, _("mount: argument to --pass-fd or -p must be a number"));
-	if (keysize &amp;&amp; sscanf(keysize,"%d",&amp;keysz) != 1)
-	        die (EX_USAGE, _("mount: argument to --keybits or -k must be a number"));
 
 	switch (argc+specseen) {
 	case 0:

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010131193350</emailId><senderName>Michael Driscoll</senderName><senderEmail>fenris@ulf.edgemail.com</senderEmail><timestampReceived>2001-01-31 19:33:50-0400</timestampReceived><subject>Re: segfault on kernel v2.4.0</subject><body>

Thanks for the help, Chris.  I hope somebody finds this enlightening:

On Wed, Jan 31, 2001 at 09:31:53AM -0500, Chris Kuklewicz wrote:
&gt; Again, I am not a developer on this project.  But I do have more ideas
&gt; on collecting data:
&gt; 
&gt; &gt; modprobe loop
&gt; &gt; losetup
&gt; &gt; =&gt; segfault
&gt; 
&gt; If you use strace, e.g. "strace losetup ...", does the output help you
&gt; isolate an offending syscall?  Note: strace is pretty easy to use, see
&gt; the man page.
&gt; 
&gt; If you compare the strace output with output where you preloaded
&gt; blowfish and avoided the segfault, then it might help locate a failing
&gt; syscall, if there is one.

Right, I have included some straces.  I was unable to get a stack trace
with gdb, even after making sure symbols were left in and compiling
without optimizations.  Perhaps after faulting, the kernel was forcibly
killing the program and I was unable to get a stack trace? (Not sure).

NOTE: I usually use the util-linux patch of 2.4.0.2 because the 2.4.0.3
patch of losetup segfaults *every* time no matter what I do and I can't
get at my data.  I've compiled and straced the 2.4.0.3 version too,
but I don't have a 'working' strace for that one.

First:  strace of segfaulting losetup (2.4.0.2 patch):
=======================================================
execve("/sbin/losetup", ["losetup", "-e", "blowfish", "-k", "160", "/dev/loop0", \
"/home/fenris/.crypt.fs"], [/* 54 vars */]) = 0 brk(0)                                \
= 0x804db3c open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or \
directory) open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=43338, ...}) = 0
mmap(NULL, 43338, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40018000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@\321\1"..., 1024) = 1024
fstat(3, {st_mode=S_IFREG|0755, st_size=4842269, ...}) = 0
mmap(NULL, 1116292, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40023000
mprotect(0x4012a000, 39044, PROT_NONE)  = 0
mmap(0x4012a000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x106000) = \
0x4012a000 mmap(0x40130000, 14468, PROT_READ|PROT_WRITE, \
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x40130000 close(3)                     \
= 0 munmap(0x40018000, 43338)               = 0
getpid()                                = 333
brk(0)                                  = 0x804db3c
brk(0x804db64)                          = 0x804db64
brk(0x804e000)                          = 0x804e000
open("/home/fenris/.crypt.fs", O_RDWR)  = 3
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = 4
mlockall(0x3, 0xffffffff)               = 0
ioctl(4, LOOP_SET_FD, 0x3)              = 0
ioctl(4, LOOP_SET_STATUS, 0xbffff58c)   = -1 EINVAL (Invalid argument)
open("/proc/crypto/cipher/blowfish-cbc", O_RDONLY) = -1 ENOENT (No such file or \
directory)

XXXXXXXXXXXXXXXX ABOVE LINE IS WHERE DIFFERENCES START XXXXXXXXXXXXXXXXXXXXX

ioctl(4, LOOP_SET_STATUS, 0xbffff5c0)   = -1 ENOSYS (Function not implemented)
ioctl(4, LOOP_SET_STATUS, 0xbffff5c0)   = -1 ENOSYS (Function not implemented)
ioctl(4, LOOP_SET_STATUS &lt;unfinished ...&gt;
+++ killed by SIGSEGV +++
=======================================================

strace of successful losetup (2.4.0.2) by modprobing blowfish first:
=======================================================
execve("/sbin/losetup", ["losetup", "-e", "blowfish", "-k", "160", "/dev/loop0", \
".crypt.fs"], [/* 59 vars */]) = 0 brk(0)                                  = \
0x804db9c open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or \
directory) open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=43338, ...}) = 0
mmap(NULL, 43338, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40018000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@\321\1"..., 1024) = 1024
fstat(3, {st_mode=S_IFREG|0755, st_size=4842269, ...}) = 0
mmap(NULL, 1116292, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40023000
mprotect(0x4012a000, 39044, PROT_NONE)  = 0
mmap(0x4012a000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x106000) = \
0x4012a000 mmap(0x40130000, 14468, PROT_READ|PROT_WRITE, \
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x40130000 close(3)                     \
= 0 munmap(0x40018000, 43338)               = 0
getpid()                                = 1559
brk(0)                                  = 0x804db9c
brk(0x804dbc4)                          = 0x804dbc4
brk(0x804e000)                          = 0x804e000
open(".crypt.fs", O_RDWR)               = 3
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = 4
mlockall(0x3, 0xffffffff)               = 0
ioctl(4, LOOP_SET_FD, 0x3)              = 0
ioctl(4, LOOP_SET_STATUS, 0xbffff46c)   = -1 EINVAL (Invalid argument)
open("/proc/crypto/cipher/blowfish-cbc", O_RDONLY) = 5

XXXXXXXXXXXXXXXX ABOVE LINE IS WHERE DIFFERENCES START XXXXXXXXXXXXXXXXXXXXX

fstat(5, {st_mode=S_IFREG|0444, st_size=0, ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x40018000
read(5, "cipher_name:       blowfish-cbc\n"..., 1024) = 153
read(5, "", 1024)                       = 0
open("/dev/tty", O_RDWR|O_CREAT|O_TRUNC, 0666) = 6
ioctl(6, TCGETS, {B38400 opost isig icanon echo ...}) = 0
ioctl(6, SNDCTL_TMR_CONTINUE, {B38400 opost -isig icanon -echo ...}) = 0
fstat(6, {st_mode=S_IFCHR|0666, st_rdev=makedev(5, 0), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x40019000
ioctl(6, TCGETS, {B38400 opost -isig icanon -echo ...}) = 0
write(6, "Password :", 10)              = 10
read(6, "XXXXXXXXXX\n", 4096)              = XX
write(6, "\n", 1)                       = 1
ioctl(6, SNDCTL_TMR_CONTINUE, {B38400 opost isig icanon echo ...}) = 0
close(6)                                = 0
munmap(0x40019000, 4096)                = 0
ioctl(4, LOOP_SET_STATUS, 0xbffff4a0)   = 0
close(4)                                = 0
close(3)                                = 0
_exit(0)                                = ?
=======================================================

strace of losetup (2.4.0.3) segfault:
=======================================================
execve("/sbin/losetup", ["losetup", "-e", "blowfish", "-k", "160", "/dev/loop0", \
"/home/fenris/.crypt.fs"], [/* 59 vars */]) = 0 brk(0)                                \
= 0x8050028 open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or \
directory) open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=43338, ...}) = 0
mmap(NULL, 43338, PROT_READ, MAP_PRIVATE, 3, 0) = 0x40018000
close(3)                                = 0
open("/lib/libc.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0@\321\1"..., 1024) = 1024
fstat(3, {st_mode=S_IFREG|0755, st_size=4842269, ...}) = 0
mmap(NULL, 1116292, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40023000
mprotect(0x4012a000, 39044, PROT_NONE)  = 0
mmap(0x4012a000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x106000) = \
0x4012a000 mmap(0x40130000, 14468, PROT_READ|PROT_WRITE, \
MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x40130000 close(3)                     \
= 0 munmap(0x40018000, 43338)               = 0
getpid()                                = 373
brk(0)                                  = 0x8050028
brk(0x8050050)                          = 0x8050050
brk(0x8051000)                          = 0x8051000
open("/home/fenris/.crypt.fs", O_RDWR)  = 3
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = -1 ENOSYS (Function not implemented)
open("/dev/loop0", O_RDWR)              = 4
mlockall(0x3, 0xffffffff)               = 0
ioctl(4, LOOP_SET_FD, 0x3)              = 0
ioctl(4, LOOP_SET_STATUS, 0xbffff488)   = -1 ENOSYS (Function not implemented)
ioctl(4, LOOP_SET_STATUS, 0xbffff488)   = -1 ENOSYS (Function not implemented)
ioctl(4, LOOP_SET_STATUS &lt;unfinished ...&gt;
+++ killed by SIGSEGV +++
=======================================================

-- 
Michael Driscoll
fenris@ulf.edgemail.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010102082625</emailId><senderName>Emil Laurentiu</senderName><senderEmail>emil@la.mine.nu</senderEmail><timestampReceived>2001-01-02 08:26:25-0400</timestampReceived><subject>Re: AES</subject><body>

On 23 November 2000, John Kennedy &lt;jk@csuchico.edu&gt; wrote:
&gt; On Mon, Nov 06, 2000 at 10:34:54AM +0100, Marc Mutz wrote:
&gt; &gt; Emil wrote:
&gt; &gt; &gt; util-linux-2.10o.int.patch still doesn't include the AES encryption
&gt; &gt; &gt; Anyone plans to do it ?
&gt; &gt; 
&gt; &gt; You can easily add it to the list of known ciphers in
&gt; &gt; util-linux/mount/lomount.c
&gt; &gt; Then re-compile both mount and losetup.

I have compiled the international patch for the latest util-linux-2.10r
It has the AES included and small modifications like zeroing the password
and the hash once they are passed to the encryption loop structure.

Also note that the sizes of keys for some encryption types have been
modified to use the maximum available keysize. 

(WARNING: This will prevent you from decrypting your partitions/files 
if the keysize has changed so better decrypt everything before applying 
this patch!!!)

Another change is in the definitions for AES and RIJNDAEL which should be
the same since it's the same encryption method with 2 different names.
In this case AES = RIJNDAEL = 16. Choosing different numbers will break things.

I have intensively tested the AES encryption with loop devices and all worked
fine. Other encryption types have been only briefly tested.


Attached is the patch that should be applied AFTER the patch-int-2.2.18.3

-- 
								Regards,
								Emil
--
When all the cars are running towards you, means you're on the opposite lane.

["patch-int-2.2.18.4.diff" (text/plain)]

diff -urN linux-2.2.18/Documentation/crypto/faq.txt \
                linux-2.2.18-cr/Documentation/crypto/faq.txt
--- linux-2.2.18/Documentation/crypto/faq.txt	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/Documentation/crypto/faq.txt	Tue Jan  2 02:42:51 2001
@@ -50,11 +50,13 @@
 alias loop-xfer-gen-0 loop_gen
 alias loop-xfer-gen-10 loop_gen
 alias cipher-2 des
+alias cipher-3 twofish
 alias cipher-4 blowfish
 alias cipher-6 idea
 alias cipher-7 serp6f
 alias cipher-8 mars6
 alias cipher-11 rc62
+alias cipher-12 des_ede3
 alias cipher-15 dfc2
 alias cipher-16 rijndael
 alias cipher-17 rc5
diff -urN linux-2.2.18/Documentation/crypto/util-linux-2.10r.int.patch \
                linux-2.2.18-cr/Documentation/crypto/util-linux-2.10r.int.patch
--- linux-2.2.18/Documentation/crypto/util-linux-2.10r.int.patch	Wed Dec 31 19:00:00 \
                1969
+++ linux-2.2.18-cr/Documentation/crypto/util-linux-2.10r.int.patch	Tue Jan  2 \
02:40:13 2001 @@ -0,0 +1,797 @@
+diff -urN util-linux-2.10r/mount/Makefile util-linux-2.10r-cr/mount/Makefile
+--- util-linux-2.10r/mount/Makefile	Fri Aug 11 17:25:26 2000
++++ util-linux-2.10r-cr/mount/Makefile	Sun Dec 31 02:47:21 2000
+@@ -28,7 +28,7 @@
+ GEN_FILES = nfsmount.h nfsmount_xdr.c nfsmount_clnt.c
+ 
+ # comment these out if you are not compiling in loop support
+-LO_OBJS=lomount.o
++LO_OBJS=lomount.o rmd160.o
+ 
+ all: $(PROGS)
+ 
+@@ -59,7 +59,7 @@
+ losetup.o: lomount.c
+ 	$(COMPILE) -DMAIN lomount.c -o $@
+ 
+-losetup: losetup.o
++losetup: losetup.o rmd160.o
+ 	$(LINK) $^ -o $@
+ 
+ mount.o umount.o nfsmount.o losetup.o fstab.o realpath.o sundries.o: sundries.h
+diff -urN util-linux-2.10r/mount/lomount.c util-linux-2.10r-cr/mount/lomount.c
+--- util-linux-2.10r/mount/lomount.c	Sat Aug  5 11:52:28 2000
++++ util-linux-2.10r-cr/mount/lomount.c	Tue Jan  2 02:14:06 2001
+@@ -27,6 +27,7 @@
+ 
+ #include "loop.h"
+ #include "lomount.h"
++#include "rmd160.h"
+ #include "nls.h"
+ 
+ extern int verbose;
+@@ -34,15 +35,30 @@
+ extern void error (const char *fmt, ...);	/* idem */
+ 
+ #ifdef LOOP_SET_FD
++/* maximum key length has been used */
+ struct crypt_type_struct {
+ 	int id;
+ 	char *name;
++	int keylength;
+ } crypt_type_tbl[] = {
+-	{ LO_CRYPT_NONE, "no" },
+-	{ LO_CRYPT_NONE, "none" },
+-	{ LO_CRYPT_XOR, "xor" },
+-	{ LO_CRYPT_DES, "DES" },
+-	{ -1, NULL   }
++	{ LO_CRYPT_NONE, "no", 0 },
++	{ LO_CRYPT_NONE, "none", 0 },
++	{ LO_CRYPT_XOR, "xor", 0 },
++/*	{ LO_CRYPT_DES, "DES", 8 }, */
++	{ LO_CRYPT_FISH2, "twofish", 32 },
++	{ LO_CRYPT_BLOW, "blowfish", 32 },
++	{ LO_CRYPT_CAST128, "cast128", 16 },
++	{ LO_CRYPT_IDEA, "idea", 16 },
++	{ LO_CRYPT_SERPENT, "serpent", 16 },
++	{ LO_CRYPT_MARS, "mars", 16 },
++	{ LO_CRYPT_RC6, "rc6", 16 },
++	{ LO_CRYPT_DES_EDE3, "DES_EDE3", 24 },
++/*	{ LO_CRYPT_CAST256, "cast256", 32 }, */
++	{ LO_CRYPT_DFC, "dfc", 32 },
++	{ LO_CRYPT_RIJNDAEL, "rijndael", 32 },
++	{ LO_CRYPT_RIJNDAEL, "AES", 32 },
++	{ LO_CRYPT_RC5, "rc5", 32 },
++	{ -1, NULL,0   }
+ };
+ 
+ static int 
+@@ -167,12 +183,18 @@
+ 	return 0;
+ }
+ 
++#define HASHLENGTH 20
++#define PASSWDBUFFLEN 130 /* getpass returns only max. 128 bytes, see man getpass \
*/ ++
+ int
+ set_loop (const char *device, const char *file, int offset,
+ 	  const char *encryption, int *loopro) {
+ 	struct loop_info loopinfo;
+ 	int fd, ffd, mode, i;
++	int keylength;
+ 	char *pass;
++	char keybits[2*HASHLENGTH]; 
++	char passwdbuff[PASSWDBUFFLEN];
+ 
+ 	mode = (*loopro ? O_RDONLY : O_RDWR);
+ 	if ((ffd = open (file, mode)) &lt; 0) {
+@@ -224,6 +246,7 @@
+ 		loopinfo.lo_encrypt_key_size = strlen(loopinfo.lo_encrypt_key);
+ 		break;
+ 	case LO_CRYPT_DES:
++		printf(_("WARNING: Use of DES is depreciated.\n"));
+ 		pass = getpass (_("Password: "));
+ 		strncpy (loopinfo.lo_encrypt_key, pass, 8);
+ 		loopinfo.lo_encrypt_key[8] = 0;
+@@ -240,6 +263,39 @@
+ 				return 1;
+ 			}
+ 		break;
++	case LO_CRYPT_FISH2:
++	case LO_CRYPT_BLOW:
++	case LO_CRYPT_CAST128:
++	case LO_CRYPT_IDEA:
++	case LO_CRYPT_SERPENT:
++	case LO_CRYPT_MARS:
++	case LO_CRYPT_RC6:
++	case LO_CRYPT_DES_EDE3:
++	case LO_CRYPT_CAST256:
++	case LO_CRYPT_DFC:
++	case LO_CRYPT_RIJNDAEL:
++	case LO_CRYPT_RC5:
++		pass = getpass("Password: ");
++		strncpy(passwdbuff+1,pass,PASSWDBUFFLEN-1);
++		passwdbuff[0] = 'A';
++                /* use the rmd160 function twice to generate a 40 bytes hash */
++		rmd160_hash_buffer(keybits,pass,strlen(pass));
++		rmd160_hash_buffer(keybits+HASHLENGTH,passwdbuff,strlen(pass)+1);
++                /* zero unencrypted passwords in memory */
++                memset( pass, 0, strlen(pass) ); 
++                memset( passwdbuff, 0, PASSWDBUFFLEN ); 
++		keylength=0;
++		for(i=0; crypt_type_tbl[i].id != -1; i++){
++		         if(loopinfo.lo_encrypt_type == crypt_type_tbl[i].id){
++			         keylength = crypt_type_tbl[i].keylength;
++				 break;
++			 }
++		}
++		loopinfo.lo_encrypt_key_size=keylength;
++		memcpy((char*)loopinfo.lo_encrypt_key,keybits,keylength);
++                /* zero hash (source) in memory */
++                memset( keybits, 0, keylength ); 
++		break;
+ 	default:
+ 		fprintf (stderr,
+ 			 _("Don't know how to get key for encryption system %d\n"),
+@@ -324,11 +380,18 @@
+ 
+ static void
+ usage(void) {
++	struct crypt_type_struct *c;
+ 	fprintf(stderr, _("usage:\n\
+   %s loop_device                                      # give info\n\
+   %s -d loop_device                                   # delete\n\
+   %s [ -e encryption ] [ -o offset ] loop_device file # setup\n"),
+ 		progname, progname, progname);
++	fprintf(stderr, "    where encryption is one of:\n");
++	c = &amp;crypt_type_tbl[0];
++	while(c-&gt;name) {
++		fprintf(stderr, "       %s\n", c-&gt;name);
++		c++;
++	}
+ 	exit(1);
+ }
+ 
+diff -urN util-linux-2.10r/mount/losetup.8 util-linux-2.10r-cr/mount/losetup.8
+--- util-linux-2.10r/mount/losetup.8	Fri Aug 11 07:11:30 2000
++++ util-linux-2.10r-cr/mount/losetup.8	Tue Jan  2 02:39:38 2001
+@@ -36,11 +36,51 @@
+ .PD 0
+ .IP \fBXOR\fP
+ use a simple XOR encryption.
+-.IP \fBDES\fP
+-use DES encryption. DES encryption is only available if the optional
+-DES package has been added to the kernel. DES encryption uses an additional
+-start value that is used to protect passwords against dictionary
+-attacks.
++.IP \fBBlowfish\fP
++use Blowfish encryption. Blowfish encryption is only available if you
++are using the international kernel and Blowfish encryption has been
++enabled in the Crypto API.
++.IP \fBTwofish\fP
++use Twofish encryption. Twofish encryption is only available if you are
++using the international kernel and Twofish encryption has been enabled
++in the Crypto API. Module loop_fish2 should be used rather than loop_gen.
++.IP \fBCAST128\fP
++use CAST128 encryption. CAST128 encryption is only available if you are
++using the international kernel and CAST128 encryption has been enabled
++in the Crypto API. Module loop_cast should be used rather than loop_gen.
++.IP \fBDES_EDE3\fP
++use DES_EDE3 (triple DES) encryption. DES_EDE3 encryption is only 
++available if you are using the international kernel and triple DES 
++encryption has been enabled in the Crypto API. 
++.IP \fBAES (Rijndael)\fP
++use AES (Rijndael) encryption. The Rijndael encryption is the 
++Advanced Encryption Standard winner and is only available if you
++are using the international kernel and AES (Rijndael) has been
++enabled in the Crypto API.
++.IP \fBDFC\fP
++use DFC encryption. DFC encryption is only available if you
++are using the international kernel and DFC encryption has been
++enabled in the Crypto API.
++.IP \fBIDEA\fP
++use IDEA encryption. IDEA encryption is only available if you
++are using the international kernel and IDEA encryption has been
++enabled in the Crypto API.
++.IP \fBMARS\fP
++use MARS encryption. MARS encryption is only available if you
++are using the international kernel and MARS encryption has been
++enabled in the Crypto API.
++.IP \fBRC5\fP
++use RC5 encryption. RC5 encryption is only available if you
++are using the international kernel and RC5 encryption has been
++enabled in the Crypto API.
++.IP \fBRC6\fP
++use RC6 encryption. RC6 encryption is only available if you
++are using the international kernel and RC6 encryption has been
++enabled in the Crypto API.
++.IP \fBSerpent\fP
++use Serpent encryption. Serpent encryption is only available if you
++are using the international kernel and Serpent encryption has been
++enabled in the Crypto API.
+ .PD
+ .RE
+ .IP "\fB\-o \fIoffset\fP"
+@@ -58,6 +98,7 @@
+ .SH FILES
+ .nf
+ /dev/loop0,/dev/loop1,...   loop devices (major=7)
++/proc/crypto/cipher/*       available ciphers
+ .fi
+ .SH EXAMPLE
+ If you are using the loadable module you must have the module loaded
+@@ -69,9 +110,8 @@
+ .nf
+ .IP
+ dd if=/dev/zero of=/file bs=1k count=100
+-losetup -e des /dev/loop0 /file
++losetup -e blowfish /dev/loop0 /file
+ Password:
+-Init (up to 16 hex digits):
+ mkfs -t ext2 /dev/loop0 100
+ mount -t ext2 /dev/loop0 /mnt
+  ...
+@@ -85,8 +125,12 @@
+ # rmmod loop
+ .LP
+ .fi
+-.SH RESTRICTION
+-DES encryption is painfully slow. On the other hand, XOR is terribly weak.
++.SH RESTRICTIONS
++DES encryption is painfully slow. On the other hand, XOR is terribly
++weak. Both are insecure nowadays. Some ciphers require a licence for
++you to be allowed to use them.
++.SH BUGS
++CAST, DES, RC5 and Twofish are currently broken and cannot be used.
+ .SH AUTHORS
+ .nf
+ Original version: Theodore Ts'o &lt;tytso@athena.mit.edu&gt;
+diff -urN util-linux-2.10r/mount/rmd160.c util-linux-2.10r-cr/mount/rmd160.c
+--- util-linux-2.10r/mount/rmd160.c	Wed Dec 31 19:00:00 1969
++++ util-linux-2.10r-cr/mount/rmd160.c	Sun Dec 31 02:47:21 2000
+@@ -0,0 +1,532 @@
++/* rmd160.c  -	RIPE-MD160
++ *	Copyright (C) 1998 Free Software Foundation, Inc.
++ */
++
++/* This file was part of GnuPG. Modified for use within the Linux
++ * mount utility by Marc Mutz &lt;Marc@Mutz.com&gt;. None of this code is
++ * by myself. I just removed everything that you don't need when all
++ * you want to do is to use rmd160_hash_buffer().
++ * My comments are marked with (mm).  */
++
++/* GnuPG is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License as published by
++ * the Free Software Foundation; either version 2 of the License, or
++ * (at your option) any later version.
++ *
++ * GnuPG is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program; if not, write to the Free Software
++ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA */
++
++#include &lt;string.h&gt; /* (mm) for memcpy */
++#include &lt;endian.h&gt; /* (mm) for BIG_ENDIAN and BYTE_ORDER */
++#include "rmd160.h"
++
++/* (mm) these are used by the original GnuPG file. In order to modify
++ * that file not too much, we keep the notations. maybe it would be
++ * better to include linux/types.h and typedef __u32 to u32 and __u8
++ * to byte?  */
++typedef unsigned int u32; /* taken from e.g. util-linux's minix.h */
++typedef unsigned char byte;
++
++typedef struct {
++    u32  h0,h1,h2,h3,h4;
++    u32  nblocks;
++    byte buf[64];
++    int  count;
++} RMD160_CONTEXT;
++
++/****************
++ * Rotate a 32 bit integer by n bytes
++ */
++#if defined(__GNUC__) &amp;&amp; defined(__i386__)
++static inline u32
++rol( u32 x, int n)
++{
++	__asm__("roll %%cl,%0"
++		:"=r" (x)
++		:"0" (x),"c" (n));
++	return x;
++}
++#else
++  #define rol(x,n) ( ((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))) )
++#endif
++
++/*********************************
++ * RIPEMD-160 is not patented, see (as of 25.10.97)
++ *   http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
++ * Note that the code uses Little Endian byteorder, which is good for
++ * 386 etc, but we must add some conversion when used on a big endian box.
++ *
++ *
++ * Pseudo-code for RIPEMD-160
++ *
++ * RIPEMD-160 is an iterative hash function that operates on 32-bit words.
++ * The round function takes as input a 5-word chaining variable and a 16-word
++ * message block and maps this to a new chaining variable. All operations are
++ * defined on 32-bit words. Padding is identical to that of MD4.
++ *
++ *
++ * RIPEMD-160: definitions
++ *
++ *
++ *   nonlinear functions at bit level: exor, mux, -, mux, -
++ *
++ *   f(j, x, y, z) = x XOR y XOR z		  (0 &lt;= j &lt;= 15)
++ *   f(j, x, y, z) = (x AND y) OR (NOT(x) AND z)  (16 &lt;= j &lt;= 31)
++ *   f(j, x, y, z) = (x OR NOT(y)) XOR z	  (32 &lt;= j &lt;= 47)
++ *   f(j, x, y, z) = (x AND z) OR (y AND NOT(z))  (48 &lt;= j &lt;= 63)
++ *   f(j, x, y, z) = x XOR (y OR NOT(z))	  (64 &lt;= j &lt;= 79)
++ *
++ *
++ *   added constants (hexadecimal)
++ *
++ *   K(j) = 0x00000000	    (0 &lt;= j &lt;= 15)
++ *   K(j) = 0x5A827999	   (16 &lt;= j &lt;= 31)	int(2**30 x sqrt(2))
++ *   K(j) = 0x6ED9EBA1	   (32 &lt;= j &lt;= 47)	int(2**30 x sqrt(3))
++ *   K(j) = 0x8F1BBCDC	   (48 &lt;= j &lt;= 63)	int(2**30 x sqrt(5))
++ *   K(j) = 0xA953FD4E	   (64 &lt;= j &lt;= 79)	int(2**30 x sqrt(7))
++ *   K'(j) = 0x50A28BE6     (0 &lt;= j &lt;= 15)      int(2**30 x cbrt(2))
++ *   K'(j) = 0x5C4DD124    (16 &lt;= j &lt;= 31)      int(2**30 x cbrt(3))
++ *   K'(j) = 0x6D703EF3    (32 &lt;= j &lt;= 47)      int(2**30 x cbrt(5))
++ *   K'(j) = 0x7A6D76E9    (48 &lt;= j &lt;= 63)      int(2**30 x cbrt(7))
++ *   K'(j) = 0x00000000    (64 &lt;= j &lt;= 79)
++ *
++ *
++ *   selection of message word
++ *
++ *   r(j)      = j		      (0 &lt;= j &lt;= 15)
++ *   r(16..31) = 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8
++ *   r(32..47) = 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12
++ *   r(48..63) = 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2
++ *   r(64..79) = 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
++ *   r0(0..15) = 5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12
++ *   r0(16..31)= 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2
++ *   r0(32..47)= 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13
++ *   r0(48..63)= 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14
++ *   r0(64..79)= 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
++ *
++ *
++ *   amount for rotate left (rol)
++ *
++ *   s(0..15)  = 11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8
++ *   s(16..31) = 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12
++ *   s(32..47) = 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5
++ *   s(48..63) = 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12
++ *   s(64..79) = 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
++ *   s'(0..15) = 8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6
++ *   s'(16..31)= 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11
++ *   s'(32..47)= 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5
++ *   s'(48..63)= 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8
++ *   s'(64..79)= 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
++ *
++ *
++ *   initial value (hexadecimal)
++ *
++ *   h0 = 0x67452301; h1 = 0xEFCDAB89; h2 = 0x98BADCFE; h3 = 0x10325476;
++ *							h4 = 0xC3D2E1F0;
++ *
++ *
++ * RIPEMD-160: pseudo-code
++ *
++ *   It is assumed that the message after padding consists of t 16-word blocks
++ *   that will be denoted with X[i][j], with 0 &lt;= i &lt;= t-1 and 0 &lt;= j &lt;= 15.
++ *   The symbol [+] denotes addition modulo 2**32 and rol_s denotes cyclic left
++ *   shift (rotate) over s positions.
++ *
++ *
++ *   for i := 0 to t-1 {
++ *	 A := h0; B := h1; C := h2; D = h3; E = h4;
++ *	 A' := h0; B' := h1; C' := h2; D' = h3; E' = h4;
++ *	 for j := 0 to 79 {
++ *	     T := rol_s(j)(A [+] f(j, B, C, D) [+] X[i][r(j)] [+] K(j)) [+] E;
++ *	     A := E; E := D; D := rol_10(C); C := B; B := T;
++ *	     T := rol_s'(j)(A' [+] f(79-j, B', C', D') [+] X[i][r'(j)]
++						       [+] K'(j)) [+] E';
++ *	     A' := E'; E' := D'; D' := rol_10(C'); C' := B'; B' := T;
++ *	 }
++ *	 T := h1 [+] C [+] D'; h1 := h2 [+] D [+] E'; h2 := h3 [+] E [+] A';
++ *	 h3 := h4 [+] A [+] B'; h4 := h0 [+] B [+] C'; h0 := T;
++ *   }
++ */
++
++/* Some examples:
++ * ""                    9c1185a5c5e9fc54612808977ee8f548b2258d31
++ * "a"                   0bdc9d2d256b3ee9daae347be6f4dc835a467ffe
++ * "abc"                 8eb208f7e05d987a9b044a8e98c6b087f15a0bfc
++ * "message digest"      5d0689ef49d2fae572b881b123a85ffa21595f36
++ * "a...z"               f71c27109c692c1b56bbdceb5b9d2865b3708dbc
++ * "abcdbcde...nopq"     12a053384a9c0c88e405a06c27dcf49ada62eb2b
++ * "A...Za...z0...9"     b0e20b6e3116640286ed3a87a5713079b21f5189
++ * 8 times "1234567890"  9b752e45573d4b39f4dbd3323cab82bf63326bfb
++ * 1 million times "a"   52783243c1697bdbe16d37f97f68f08325dc1528
++ */
++
++
++static void
++rmd160_init( RMD160_CONTEXT *hd )
++{
++    hd-&gt;h0 = 0x67452301;
++    hd-&gt;h1 = 0xEFCDAB89;
++    hd-&gt;h2 = 0x98BADCFE;
++    hd-&gt;h3 = 0x10325476;
++    hd-&gt;h4 = 0xC3D2E1F0;
++    hd-&gt;nblocks = 0;
++    hd-&gt;count = 0;
++}
++
++
++
++/****************
++ * Transform the message X which consists of 16 32-bit-words
++ */
++static void
++transform( RMD160_CONTEXT *hd, byte *data )
++{
++    u32 a,b,c,d,e,aa,bb,cc,dd,ee,t;
++  #if BYTE_ORDER == BIG_ENDIAN
++    u32 x[16];
++    { int i;
++      byte *p2, *p1;
++      for(i=0, p1=data, p2=(byte*)x; i &lt; 16; i++, p2 += 4 ) {
++	p2[3] = *p1++;
++	p2[2] = *p1++;
++	p2[1] = *p1++;
++	p2[0] = *p1++;
++      }
++    }
++  #else
++   #if 0
++    u32 *x =(u32*)data;
++   #else
++    /* this version is better because it is always aligned;
++     * The performance penalty on a 586-100 is about 6% which
++     * is acceptable - because the data is more local it might
++     * also be possible that this is faster on some machines.
++     * This function (when compiled with -02 on gcc 2.7.2)
++     * executes on a 586-100 (39.73 bogomips) at about 1900kb/sec;
++     * [measured with a 4MB data and "gpgm --print-md rmd160"] */
++    u32 x[16];
++    memcpy( x, data, 64 );
++   #endif
++  #endif
++
++
++#define K0  0x00000000
++#define K1  0x5A827999
++#define K2  0x6ED9EBA1
++#define K3  0x8F1BBCDC
++#define K4  0xA953FD4E
++#define KK0 0x50A28BE6
++#define KK1 0x5C4DD124
++#define KK2 0x6D703EF3
++#define KK3 0x7A6D76E9
++#define KK4 0x00000000
++#define F0(x,y,z)   ( (x) ^ (y) ^ (z) )
++#define F1(x,y,z)   ( ((x) &amp; (y)) | (~(x) &amp; (z)) )
++#define F2(x,y,z)   ( ((x) | ~(y)) ^ (z) )
++#define F3(x,y,z)   ( ((x) &amp; (z)) | ((y) &amp; ~(z)) )
++#define F4(x,y,z)   ( (x) ^ ((y) | ~(z)) )
++#define R(a,b,c,d,e,f,k,r,s) do { t = a + f(b,c,d) + k + x[r]; \
++				  a = rol(t,s) + e;	       \
++				  c = rol(c,10);	       \
++				} while(0)
++
++    /* left lane */
++    a = hd-&gt;h0;
++    b = hd-&gt;h1;
++    c = hd-&gt;h2;
++    d = hd-&gt;h3;
++    e = hd-&gt;h4;
++    R( a, b, c, d, e, F0, K0,  0, 11 );
++    R( e, a, b, c, d, F0, K0,  1, 14 );
++    R( d, e, a, b, c, F0, K0,  2, 15 );
++    R( c, d, e, a, b, F0, K0,  3, 12 );
++    R( b, c, d, e, a, F0, K0,  4,  5 );
++    R( a, b, c, d, e, F0, K0,  5,  8 );
++    R( e, a, b, c, d, F0, K0,  6,  7 );
++    R( d, e, a, b, c, F0, K0,  7,  9 );
++    R( c, d, e, a, b, F0, K0,  8, 11 );
++    R( b, c, d, e, a, F0, K0,  9, 13 );
++    R( a, b, c, d, e, F0, K0, 10, 14 );
++    R( e, a, b, c, d, F0, K0, 11, 15 );
++    R( d, e, a, b, c, F0, K0, 12,  6 );
++    R( c, d, e, a, b, F0, K0, 13,  7 );
++    R( b, c, d, e, a, F0, K0, 14,  9 );
++    R( a, b, c, d, e, F0, K0, 15,  8 );
++    R( e, a, b, c, d, F1, K1,  7,  7 );
++    R( d, e, a, b, c, F1, K1,  4,  6 );
++    R( c, d, e, a, b, F1, K1, 13,  8 );
++    R( b, c, d, e, a, F1, K1,  1, 13 );
++    R( a, b, c, d, e, F1, K1, 10, 11 );
++    R( e, a, b, c, d, F1, K1,  6,  9 );
++    R( d, e, a, b, c, F1, K1, 15,  7 );
++    R( c, d, e, a, b, F1, K1,  3, 15 );
++    R( b, c, d, e, a, F1, K1, 12,  7 );
++    R( a, b, c, d, e, F1, K1,  0, 12 );
++    R( e, a, b, c, d, F1, K1,  9, 15 );
++    R( d, e, a, b, c, F1, K1,  5,  9 );
++    R( c, d, e, a, b, F1, K1,  2, 11 );
++    R( b, c, d, e, a, F1, K1, 14,  7 );
++    R( a, b, c, d, e, F1, K1, 11, 13 );
++    R( e, a, b, c, d, F1, K1,  8, 12 );
++    R( d, e, a, b, c, F2, K2,  3, 11 );
++    R( c, d, e, a, b, F2, K2, 10, 13 );
++    R( b, c, d, e, a, F2, K2, 14,  6 );
++    R( a, b, c, d, e, F2, K2,  4,  7 );
++    R( e, a, b, c, d, F2, K2,  9, 14 );
++    R( d, e, a, b, c, F2, K2, 15,  9 );
++    R( c, d, e, a, b, F2, K2,  8, 13 );
++    R( b, c, d, e, a, F2, K2,  1, 15 );
++    R( a, b, c, d, e, F2, K2,  2, 14 );
++    R( e, a, b, c, d, F2, K2,  7,  8 );
++    R( d, e, a, b, c, F2, K2,  0, 13 );
++    R( c, d, e, a, b, F2, K2,  6,  6 );
++    R( b, c, d, e, a, F2, K2, 13,  5 );
++    R( a, b, c, d, e, F2, K2, 11, 12 );
++    R( e, a, b, c, d, F2, K2,  5,  7 );
++    R( d, e, a, b, c, F2, K2, 12,  5 );
++    R( c, d, e, a, b, F3, K3,  1, 11 );
++    R( b, c, d, e, a, F3, K3,  9, 12 );
++    R( a, b, c, d, e, F3, K3, 11, 14 );
++    R( e, a, b, c, d, F3, K3, 10, 15 );
++    R( d, e, a, b, c, F3, K3,  0, 14 );
++    R( c, d, e, a, b, F3, K3,  8, 15 );
++    R( b, c, d, e, a, F3, K3, 12,  9 );
++    R( a, b, c, d, e, F3, K3,  4,  8 );
++    R( e, a, b, c, d, F3, K3, 13,  9 );
++    R( d, e, a, b, c, F3, K3,  3, 14 );
++    R( c, d, e, a, b, F3, K3,  7,  5 );
++    R( b, c, d, e, a, F3, K3, 15,  6 );
++    R( a, b, c, d, e, F3, K3, 14,  8 );
++    R( e, a, b, c, d, F3, K3,  5,  6 );
++    R( d, e, a, b, c, F3, K3,  6,  5 );
++    R( c, d, e, a, b, F3, K3,  2, 12 );
++    R( b, c, d, e, a, F4, K4,  4,  9 );
++    R( a, b, c, d, e, F4, K4,  0, 15 );
++    R( e, a, b, c, d, F4, K4,  5,  5 );
++    R( d, e, a, b, c, F4, K4,  9, 11 );
++    R( c, d, e, a, b, F4, K4,  7,  6 );
++    R( b, c, d, e, a, F4, K4, 12,  8 );
++    R( a, b, c, d, e, F4, K4,  2, 13 );
++    R( e, a, b, c, d, F4, K4, 10, 12 );
++    R( d, e, a, b, c, F4, K4, 14,  5 );
++    R( c, d, e, a, b, F4, K4,  1, 12 );
++    R( b, c, d, e, a, F4, K4,  3, 13 );
++    R( a, b, c, d, e, F4, K4,  8, 14 );
++    R( e, a, b, c, d, F4, K4, 11, 11 );
++    R( d, e, a, b, c, F4, K4,  6,  8 );
++    R( c, d, e, a, b, F4, K4, 15,  5 );
++    R( b, c, d, e, a, F4, K4, 13,  6 );
++
++    aa = a; bb = b; cc = c; dd = d; ee = e;
++
++    /* right lane */
++    a = hd-&gt;h0;
++    b = hd-&gt;h1;
++    c = hd-&gt;h2;
++    d = hd-&gt;h3;
++    e = hd-&gt;h4;
++    R( a, b, c, d, e, F4, KK0,	5,  8);
++    R( e, a, b, c, d, F4, KK0, 14,  9);
++    R( d, e, a, b, c, F4, KK0,	7,  9);
++    R( c, d, e, a, b, F4, KK0,	0, 11);
++    R( b, c, d, e, a, F4, KK0,	9, 13);
++    R( a, b, c, d, e, F4, KK0,	2, 15);
++    R( e, a, b, c, d, F4, KK0, 11, 15);
++    R( d, e, a, b, c, F4, KK0,	4,  5);
++    R( c, d, e, a, b, F4, KK0, 13,  7);
++    R( b, c, d, e, a, F4, KK0,	6,  7);
++    R( a, b, c, d, e, F4, KK0, 15,  8);
++    R( e, a, b, c, d, F4, KK0,	8, 11);
++    R( d, e, a, b, c, F4, KK0,	1, 14);
++    R( c, d, e, a, b, F4, KK0, 10, 14);
++    R( b, c, d, e, a, F4, KK0,	3, 12);
++    R( a, b, c, d, e, F4, KK0, 12,  6);
++    R( e, a, b, c, d, F3, KK1,	6,  9);
++    R( d, e, a, b, c, F3, KK1, 11, 13);
++    R( c, d, e, a, b, F3, KK1,	3, 15);
++    R( b, c, d, e, a, F3, KK1,	7,  7);
++    R( a, b, c, d, e, F3, KK1,	0, 12);
++    R( e, a, b, c, d, F3, KK1, 13,  8);
++    R( d, e, a, b, c, F3, KK1,	5,  9);
++    R( c, d, e, a, b, F3, KK1, 10, 11);
++    R( b, c, d, e, a, F3, KK1, 14,  7);
++    R( a, b, c, d, e, F3, KK1, 15,  7);
++    R( e, a, b, c, d, F3, KK1,	8, 12);
++    R( d, e, a, b, c, F3, KK1, 12,  7);
++    R( c, d, e, a, b, F3, KK1,	4,  6);
++    R( b, c, d, e, a, F3, KK1,	9, 15);
++    R( a, b, c, d, e, F3, KK1,	1, 13);
++    R( e, a, b, c, d, F3, KK1,	2, 11);
++    R( d, e, a, b, c, F2, KK2, 15,  9);
++    R( c, d, e, a, b, F2, KK2,	5,  7);
++    R( b, c, d, e, a, F2, KK2,	1, 15);
++    R( a, b, c, d, e, F2, KK2,	3, 11);
++    R( e, a, b, c, d, F2, KK2,	7,  8);
++    R( d, e, a, b, c, F2, KK2, 14,  6);
++    R( c, d, e, a, b, F2, KK2,	6,  6);
++    R( b, c, d, e, a, F2, KK2,	9, 14);
++    R( a, b, c, d, e, F2, KK2, 11, 12);
++    R( e, a, b, c, d, F2, KK2,	8, 13);
++    R( d, e, a, b, c, F2, KK2, 12,  5);
++    R( c, d, e, a, b, F2, KK2,	2, 14);
++    R( b, c, d, e, a, F2, KK2, 10, 13);
++    R( a, b, c, d, e, F2, KK2,	0, 13);
++    R( e, a, b, c, d, F2, KK2,	4,  7);
++    R( d, e, a, b, c, F2, KK2, 13,  5);
++    R( c, d, e, a, b, F1, KK3,	8, 15);
++    R( b, c, d, e, a, F1, KK3,	6,  5);
++    R( a, b, c, d, e, F1, KK3,	4,  8);
++    R( e, a, b, c, d, F1, KK3,	1, 11);
++    R( d, e, a, b, c, F1, KK3,	3, 14);
++    R( c, d, e, a, b, F1, KK3, 11, 14);
++    R( b, c, d, e, a, F1, KK3, 15,  6);
++    R( a, b, c, d, e, F1, KK3,	0, 14);
++    R( e, a, b, c, d, F1, KK3,	5,  6);
++    R( d, e, a, b, c, F1, KK3, 12,  9);
++    R( c, d, e, a, b, F1, KK3,	2, 12);
++    R( b, c, d, e, a, F1, KK3, 13,  9);
++    R( a, b, c, d, e, F1, KK3,	9, 12);
++    R( e, a, b, c, d, F1, KK3,	7,  5);
++    R( d, e, a, b, c, F1, KK3, 10, 15);
++    R( c, d, e, a, b, F1, KK3, 14,  8);
++    R( b, c, d, e, a, F0, KK4, 12,  8);
++    R( a, b, c, d, e, F0, KK4, 15,  5);
++    R( e, a, b, c, d, F0, KK4, 10, 12);
++    R( d, e, a, b, c, F0, KK4,	4,  9);
++    R( c, d, e, a, b, F0, KK4,	1, 12);
++    R( b, c, d, e, a, F0, KK4,	5,  5);
++    R( a, b, c, d, e, F0, KK4,	8, 14);
++    R( e, a, b, c, d, F0, KK4,	7,  6);
++    R( d, e, a, b, c, F0, KK4,	6,  8);
++    R( c, d, e, a, b, F0, KK4,	2, 13);
++    R( b, c, d, e, a, F0, KK4, 13,  6);
++    R( a, b, c, d, e, F0, KK4, 14,  5);
++    R( e, a, b, c, d, F0, KK4,	0, 15);
++    R( d, e, a, b, c, F0, KK4,	3, 13);
++    R( c, d, e, a, b, F0, KK4,	9, 11);
++    R( b, c, d, e, a, F0, KK4, 11, 11);
++
++
++    t	   = hd-&gt;h1 + d + cc;
++    hd-&gt;h1 = hd-&gt;h2 + e + dd;
++    hd-&gt;h2 = hd-&gt;h3 + a + ee;
++    hd-&gt;h3 = hd-&gt;h4 + b + aa;
++    hd-&gt;h4 = hd-&gt;h0 + c + bb;
++    hd-&gt;h0 = t;
++}
++
++
++/* Update the message digest with the contents
++ * of INBUF with length INLEN.
++ */
++static void
++rmd160_write( RMD160_CONTEXT *hd, byte *inbuf, size_t inlen)
++{
++    if( hd-&gt;count == 64 ) { /* flush the buffer */
++	transform( hd, hd-&gt;buf );
++	hd-&gt;count = 0;
++	hd-&gt;nblocks++;
++    }
++    if( !inbuf )
++	return;
++    if( hd-&gt;count ) {
++	for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
++	    hd-&gt;buf[hd-&gt;count++] = *inbuf++;
++	rmd160_write( hd, NULL, 0 );
++	if( !inlen )
++	    return;
++    }
++
++    while( inlen &gt;= 64 ) {
++	transform( hd, inbuf );
++	hd-&gt;count = 0;
++	hd-&gt;nblocks++;
++	inlen -= 64;
++	inbuf += 64;
++    }
++    for( ; inlen &amp;&amp; hd-&gt;count &lt; 64; inlen-- )
++	hd-&gt;buf[hd-&gt;count++] = *inbuf++;
++}
++
++/* The routine terminates the computation
++ */
++
++static void
++rmd160_final( RMD160_CONTEXT *hd )
++{
++    u32 t, msb, lsb;
++    byte *p;
++
++    rmd160_write(hd, NULL, 0); /* flush */;
++
++    msb = 0;
++    t = hd-&gt;nblocks;
++    if( (lsb = t &lt;&lt; 6) &lt; t ) /* multiply by 64 to make a byte count */
++	msb++;
++    msb += t &gt;&gt; 26;
++    t = lsb;
++    if( (lsb = t + hd-&gt;count) &lt; t ) /* add the count */
++	msb++;
++    t = lsb;
++    if( (lsb = t &lt;&lt; 3) &lt; t ) /* multiply by 8 to make a bit count */
++	msb++;
++    msb += t &gt;&gt; 29;
++
++    if( hd-&gt;count &lt; 56 ) { /* enough room */
++	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad */
++	while( hd-&gt;count &lt; 56 )
++	    hd-&gt;buf[hd-&gt;count++] = 0;  /* pad */
++    }
++    else { /* need one extra block */
++	hd-&gt;buf[hd-&gt;count++] = 0x80; /* pad character */
++	while( hd-&gt;count &lt; 64 )
++	    hd-&gt;buf[hd-&gt;count++] = 0;
++	rmd160_write(hd, NULL, 0);  /* flush */;
++	memset(hd-&gt;buf, 0, 56 ); /* fill next block with zeroes */
++    }
++    /* append the 64 bit count */
++    hd-&gt;buf[56] = lsb	   ;
++    hd-&gt;buf[57] = lsb &gt;&gt;  8;
++    hd-&gt;buf[58] = lsb &gt;&gt; 16;
++    hd-&gt;buf[59] = lsb &gt;&gt; 24;
++    hd-&gt;buf[60] = msb	   ;
++    hd-&gt;buf[61] = msb &gt;&gt;  8;
++    hd-&gt;buf[62] = msb &gt;&gt; 16;
++    hd-&gt;buf[63] = msb &gt;&gt; 24;
++    transform( hd, hd-&gt;buf );
++
++    p = hd-&gt;buf;
++  #if BYTE_ORDER == BIG_ENDIAN
++    #define X(a) do { *p++ = hd-&gt;h##a	   ; *p++ = hd-&gt;h##a &gt;&gt; 8;	\
++		      *p++ = hd-&gt;h##a &gt;&gt; 16; *p++ = hd-&gt;h##a &gt;&gt; 24; } while(0)
++  #else /* little endian */
++    #define X(a) do { *(u32*)p = hd-&gt;h##a ; p += 4; } while(0)
++  #endif
++    X(0);
++    X(1);
++    X(2);
++    X(3);
++    X(4);
++  #undef X
++}
++
++/****************
++ * Shortcut functions which puts the hash value of the supplied buffer
++ * into outbuf which must have a size of 20 bytes.
++ */
++void
++rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length )
++{
++    RMD160_CONTEXT hd;
++
++    rmd160_init( &amp;hd );
++    rmd160_write( &amp;hd, (byte*)buffer, length );
++    rmd160_final( &amp;hd );
++    memcpy( outbuf, hd.buf, 20 );
++}
+diff -urN util-linux-2.10r/mount/rmd160.h util-linux-2.10r-cr/mount/rmd160.h
+--- util-linux-2.10r/mount/rmd160.h	Wed Dec 31 19:00:00 1969
++++ util-linux-2.10r-cr/mount/rmd160.h	Sun Dec 31 02:47:21 2000
+@@ -0,0 +1,9 @@
++#ifndef RMD160_H
++#define RMD160_H
++
++void
++rmd160_hash_buffer( char *outbuf, const char *buffer, size_t length );
++
++#endif /*RMD160_H*/
++
++
diff -urN linux-2.2.18/include/linux/crypto.h linux-2.2.18-cr/include/linux/crypto.h
--- linux-2.2.18/include/linux/crypto.h	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/include/linux/crypto.h	Mon Jan  1 17:14:35 2001
@@ -41,8 +41,8 @@
 #define CIPHER_CAST256  14
 #define CIPHER_DFC      15
 #define CIPHER_RIJNDAEL 16
+#define CIPHER_AES      16
 #define CIPHER_RC5      17
-#define CIPHER_AES      18
 #define MAX_CIPHER	20
 #define CIPHER_CBC    0x00010000
 
diff -urN linux-2.2.18/include/linux/loop.h linux-2.2.18-cr/include/linux/loop.h
--- linux-2.2.18/include/linux/loop.h	Tue Jan  2 02:49:29 2001
+++ linux-2.2.18-cr/include/linux/loop.h	Mon Jan  1 17:21:11 2001
@@ -105,8 +105,9 @@
 #define LO_CRYPT_CAST256  14
 #define LO_CRYPT_DFC      15
 #define LO_CRYPT_RIJNDAEL 16
+#define LO_CRYPT_AES      16
 #define LO_CRYPT_RC5      17
-#define MAX_LO_CRYPT	20
+#define MAX_LO_CRYPT	  20
 
 #ifdef __KERNEL__
 /* Support for loadable transfer modules */


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010103161647</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-01-03 16:16:47-0400</timestampReceived><subject>Re: AES</subject><body>

On Tue, 2 Jan 2001, Emil Laurentiu wrote:

&gt; On 23 November 2000, John Kennedy &lt;jk@csuchico.edu&gt; wrote:
&gt; &gt; On Mon, Nov 06, 2000 at 10:34:54AM +0100, Marc Mutz wrote:
&gt; &gt; &gt; Emil wrote:
&gt; &gt; &gt; &gt; util-linux-2.10o.int.patch still doesn't include the AES encryption
&gt; &gt; &gt; &gt; Anyone plans to do it ?
&gt; &gt; &gt;
&gt; &gt; &gt; You can easily add it to the list of known ciphers in
&gt; &gt; &gt; util-linux/mount/lomount.c
&gt; &gt; &gt; Then re-compile both mount and losetup.
&gt;
&gt; I have compiled the international patch for the latest util-linux-2.10r
&gt; It has the AES included and small modifications like zeroing the password
&gt; and the hash once they are passed to the encryption loop structure.

Cool!

&gt; Also note that the sizes of keys for some encryption types have been
&gt; modified to use the maximum available keysize.

No - many of the algorithms supports longer keysizes, like serpent, rc6
and blowfish, but you miss one point IMHO. Currently we use a passphrase
to generate the key, and it's unlikely that the passphrase contains
more than 128 bits of entropy. Allowing longer keys will probably only
give false impression of security. Then it's a bad thing to break
compatibility, like your patch will do for several ciphers.

Another thing for Rijndael is that the number of round increase with
longer keys, so a 256 bit key needs 14 rounds, while an 128 bit key
only need 10 or 12, and as long as a 256 bit key don't increase security,
I see no reason to use one. This is a minor point, though.

If a better scheme for key management is developed, it's a different
matter, but then we must also develop a new way of initialising the
loop device, and can then decide which keylength to use.

&gt; (WARNING: This will prevent you from decrypting your partitions/files
&gt; if the keysize has changed so better decrypt everything before applying
&gt; this patch!!!)
&gt;
&gt; Another change is in the definitions for AES and RIJNDAEL which should be
&gt; the same since it's the same encryption method with 2 different names.
&gt; In this case AES = RIJNDAEL = 16. Choosing different numbers will break things.

I fully agree with here. Could you submit a patch that _only_ does this,
and keeps the keysizes for the other ciphers untouched.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707031507</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-07 03:15:07-0400</timestampReceived><subject>Patching 2.4.6--help fixing 1 hunk that failed</subject><body>

Hi all,

While I'm new to the list I'm aware of the archive and discussions. I
don't need friendly advice that I should be using Jari's loopAES :-)

OK, when I try and patch 2.4.6 with the international patch 2.4.3.1 I
get this reject:

patch -p1 -s &lt; patch-int-2.4.3.1
1 out of 3 hunks FAILED -- saving rejects to file Makefile.rej

(-s is silent unless there is a reject. A very useful option that only
shows when there are patching problems)

The contents of Makefile.rej are:

***************
*** 118,130 ****
  
  CORE_FILES	=kernel/kernel.o mm/mm.o fs/fs.o ipc/ipc.o
  NETWORKS	=net/network.o
  DRIVERS		=drivers/block/block.o \
  		 drivers/char/char.o \
  		 drivers/misc/misc.o \
  		 drivers/net/net.o \
  		 drivers/media/media.o
  LIBS		=$(TOPDIR)/lib/lib.a
- SUBDIRS		=kernel drivers mm fs net ipc lib
  
  DRIVERS-n :=
  DRIVERS-y :=
--- 118,131 ----
  
  CORE_FILES	=kernel/kernel.o mm/mm.o fs/fs.o ipc/ipc.o
  NETWORKS	=net/network.o
+ CRYPTO		=crypto/crypto.o
  DRIVERS		=drivers/block/block.o \
  		 drivers/char/char.o \
  		 drivers/misc/misc.o \
  		 drivers/net/net.o \
  		 drivers/media/media.o
  LIBS		=$(TOPDIR)/lib/lib.a
+ SUBDIRS		=kernel drivers mm fs net ipc lib crypto
  
  DRIVERS-n :=
  DRIVERS-y :=


--------------------------------------------------------

Now I know little about fixing patch rejects. So any newbie advice would
be appreciated. It appears the Makefile cannot be successfully patched. 

Here's the relevant section of the Makefile:


CORE_FILES	=kernel/kernel.o mm/mm.o fs/fs.o ipc/ipc.o
NETWORKS	=net/network.o

LIBS		=$(TOPDIR)/lib/lib.a
SUBDIRS		=kernel drivers mm fs net ipc lib

DRIVERS-n :=
DRIVERS-y :=
DRIVERS-m :=
DRIVERS-  :=

DRIVERS-$(CONFIG_ACPI) += drivers/acpi/acpi.o
DRIVERS-$(CONFIG_PARPORT) += drivers/parport/driver.o
DRIVERS-y += drivers/char/char.o \
	drivers/block/block.o \
	drivers/misc/misc.o \
	drivers/net/net.o \
	drivers/media/media.o


-----------------------------

Does this mean the patch failed because someone decided to move the
DRIVERS section?

If we fix this should we send the fix to Alexander Kjeldaas so he can
upload a new 2.4.6 patch without rejects to here:

http://www.kernel.org/pub/linux/kernel/crypto/v2.4/

In what form would such a submission look like? Would we send the
complete fixed Makefile or a patch for the official 2.4.6 Makefile?

Many thanks,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010728044313</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-28 04:43:13-0400</timestampReceived><subject>Those damn army brats!</subject><body>

List members:

	Well they were at it again! Those damn army brats "General
Problems", "Kernel Bug", and "Major Hair-Pulling" came knocking on my door.
Why you ask? Good question!

	In order to get ahead of the curve this millennium I have decided to
begin my "Y3K" (Year 3000) testing well in advance. In so doing, and since I
now run the 2.4.7 version of the kernel, I took a piece of software which I
had from the Y2K days, and re-worked it a bit. I have included the
timetravel-2.1 version (good with kernels circa 2.1 / pre year 2000), as
well as the "2.4.7" version (which I re-wrote).

	Problem is that, while the software (as far as I can see) is
properly debugged, I can not test it. Why you asked? Some silly compile flag
is not working properly and is stopping me from compiling it, and I can not
for the life of me freaking figure it out! Can anyone offer up any ideas?

	By the way, if anyone has any free time, and wants to add some code,
or suggest any ideas, I am considering to add code to read the programs from
a file /etc/datemod rather than having to do an insmod for each program
which one is doing testing for.

	Of course, I know that it may seem that this is a bit out of the
security/crypto realm, but, I suppose if someone were interesting in
defeating a time based software protection scheme, this software would also
accomplish that task. Knowing that we are all the moral people that we are,
I am just mentioning this (of course) as an exercise in theory, for
educational purposes.


  


Very Respectfully, 

Stuart Blake Tener, IT3, USNR-R, N3GWG 
Beverly Hills, California
VTU 1904G (Volunteer Training Unit) 
stuart@bh90210.net 
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043 
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859 

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!) 

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL. 

Friday, July 27, 2001 9:26 PM


["winmail.dat" (application/ms-tnef)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929145423</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-29 14:54:23-0400</timestampReceived><subject>Announce loop-AES-v1.4e file/swap crypto package</subject><body>

In short: If file and swap crypto is all you need, this package is a hassle
free replacement for international crypto patch and HVR's cryptoapi.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. AES cipher can be used to encrypt local file systems and
disk partitions. For more information about compiling and using the driver,
see the README file in the package.

Features:
- GPL license.
- No source modifications to kernel. No patch hassles when you are upgrading
  your kernel.
- Works with all recent 2.4, 2.2 and 2.0 kernels, including distro vendor
  kernels. Encrypted disk images are compatible across all supported
  kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.
- Device backed (partition backed) loop is capable of encrypting swap on 2.4
  kernels.

Changes since previous release:
- Execute depmod only if target was currently running kernel.
- loop.c-2.4.original updated to Linus' 2.4.10 + fixes from 2.4.9-ac16, with
  ifdefs so it compiles on older kernels as well.
- Rest of AES finalist cipher names added to util-linux patch.
- External encryption module locking bug is fixed (kernel 2.2 only,
  backported kernel 2.4 fix). This bug did not affect loop-AES operation at
  all.
- Password seeds can be used to slow down dictionary attacks. "-S XXX"
  option added to losetup, and "-o pseed=XXX" option added to mount.
- For device backed loops, allocate pages only from private pool during run
  time (kernel 2.4 only). This eases stress on the VM as some of them can't
  handle stress too well.

Note to people upgrading from version v1.4d to v1.4e: Loop-AES-v1.4d used
pre-allocated pages in addition to run time allocated pages. Loop-AES-v1.4e
and later rely solely on pre-allocated pages and don't allocate additional
pages at run time at all. If you have set up a non-default 'lo_prealloc'
value, please make sure to adjust it as needed. Values smaller than 50 are
not recommended, as that is likely to cause slow disk access.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4e.tar.bz2
    md5sum 0561fdc04ae0b6a8330006fbe20796f5

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4e.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011104180321</emailId><senderName></senderName><senderEmail>ingo.oeser</senderEmail><timestampReceived>2001-11-04 18:03:21-0400</timestampReceived><subject>ADMIN: Majordomo -&gt; Listar</subject><body>


the lists have been converted from Majordomo to Listar,
this should be transparent for all normal operation, the
only thing changed is the "Sender:" header, which now
points to &lt;listname&gt;-bounce@nl.linux.org so bounces are
handled automatically and the list owner doesn't get them
all.

This warning message is mostly sent so people can adjust
their mailfilter if needed.

regards,

Rik
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011204090605</emailId><senderName></senderName><senderEmail>stephen.thompson</senderEmail><timestampReceived>2001-12-04 09:06:05-0400</timestampReceived><subject>CryptoApi and kernel 2.4.14</subject><body>

Hello All,

I am trying to compile the API on a 2.4.14 machine. The loop.c has been
patched to make it load correctly. Now when I try to compile the API I get
the following:


ferengi:/usr/src/cryptoapi-2.4.7.0# make
Making all in api
make[1]: Entering directory `/usr/src/cryptoapi-2.4.7.0/api'
gcc -I../include -D__KERNEL__ -DMODULE -DUSE_LO_IV_MODE_SECTOR
-I/usr/src/linux-2.4.14/include -Wall -Wstrict-prototypes -Wno-trigraphs -O2
-fomit-frame-pointer -fno-strict-aliasing -fno-common -pipe
-mpreferred-stack-boundary=2 -march=i686 -malign-functions=4  -DMODVERSIONS
-include /usr/src/linux-2.4.14/include/linux/modversions.h -o cryptoapi.o -c
cryptoapi.c
cryptoapi.c:466: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: data definition has no type or storage class
cryptoapi.c:467: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: data definition has no type or storage class
cryptoapi.c:468: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: data definition has no type or storage class
cryptoapi.c:469: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: data definition has no type or storage class
cryptoapi.c:470: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: data definition has no type or storage class
cryptoapi.c:471: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: data definition has no type or storage class
cryptoapi.c:472: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: data definition has no type or storage class
make[1]: *** [cryptoapi.o] Error 1
make[1]: Leaving directory `/usr/src/cryptoapi-2.4.7.0/api'
make: *** [all-recursive] Error 1


If I need to get a patch, could someone point me to where?


Thanks.

Stephen.



-------------------------------------------------------------------------------------------


Copyright material and/or confidential and/or privileged information may be contained \
in this e-mail and any attached documents.  The material and information is intended \
for the use of the intended addressee only.  If you are not the intended addressee, \
or the person responsible for delivering it to the intended addressee, you may not \
copy, disclose, distribute, disseminate or deliver it to anyone else or use it in any \
unauthorised manner or take or omit to take any action in reliance on it. To do so is \
prohibited and may be unlawful.   The views expressed in this e-mail may not be \
official policy but the personal views of the originator.  If you receive this e-mail \
in error, please advise the sender immediately by using the reply facility in your \
e-mail software, or contact postmaster@bmwfin.com.  Please also delete this e-mail \
and all documents attached immediately.   Many thanks for your co-operation.

BMW Financial Services (GB) Limited is registered in England and Wales under company \
number 01288537. Registered Offices : Europa House, Bartley Way, Hook, Hants, RG27 \
                9UF
------------------------------------------------------------------------------------------
                
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010901143659</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-01 14:36:59-0400</timestampReceived><subject>2.4.8</subject><body>

    So now that I've installed the cryptoapi-2.4.7 on the 2.4.7 kernel,
is it okay to apply the 2.4.8 (or later) kernel patches over that?

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930104250</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-09-30 10:42:50-0400</timestampReceived><subject>Re: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

&gt; - Password seeds can be used to slow down dictionary attacks. "-S XXX"
&gt;   option added to losetup, and "-o pseed=XXX" option added to mount.

could you explain us how this is used by AES and also put that into the
readme when
you release the next version of loop-aes? how much does a password seed
increase
security?

and, would it be a good idea to use for example 128 bytes of urandom data
(and i wouldnt save it to disk of course) as the seed when encrypting swap?



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930131328</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-30 13:13:28-0400</timestampReceived><subject>Re: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

"peter k." wrote:
&gt; &gt; - Password seeds can be used to slow down dictionary attacks. "-S XXX"
&gt; &gt;   option added to losetup, and "-o pseed=XXX" option added to mount.
&gt; 
&gt; could you explain us how this is used by AES and also put that into the
&gt; readme when
&gt; you release the next version of loop-aes? how much does a password seed
&gt; increase
&gt; security?

Password seed is appended to user supplied password before password is
hashed using SHA-256 one way hash. For example, if seed is:

    IrzWg/8z211G4PI4l/pA

And user supplied (bad and guessable) password is:

    quick brown fox jumped over lazy dog

Resulting string that would be hashed:

    quick brown fox jumped over lazy dogIrzWg/8z211G4PI4l/pA

That's bad news to an attacker, because he would have to start recomputing
the hashes of the 500 billion known strings he has in his dictionary _after_
he has access to your password seed. And, if another partition has a
different seed, guess what... recompute again.

&gt; and, would it be a good idea to use for example 128 bytes of urandom data
&gt; (and i wouldnt save it to disk of course) as the seed when encrypting swap?

Seed is only useful to slow down dictionary attacks. It does not increase
security if a password is already random and unguessable.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930180324</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-30 18:03:24-0400</timestampReceived><subject>Re: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

On Sunday 30 September 2001 12:42, peter k. wrote:
&lt;snip&gt;
&gt; and, would it be a good idea to use for example 128 bytes of urandom
&gt; data (and i wouldnt save it to disk of course) as the seed when
&gt; encrypting swap?
&lt;snip&gt;

No. When you encyrpt swap, you should use a new key everytime you swpon 
(and maybe even rekey periodically, say, every few days). You should 
use a full keylength bits' key with full entropy. If you do this, you 
don't need a seed. (and even if you did, 128 _bits_ would be more than 
enough). Also, the seed need not be secret (and can't be). It must be 
random, though, so you'd better use /dev/random instead of urandom...

Marc

-- 
Military justice is to justice what military music is to music.
                                                  -- Groucho Marx


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930193537</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-30 19:35:37-0400</timestampReceived><subject>RE: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

Mr. Ruusu:

	So if I understand you correctly, it is the "seed" which is allowing us to
choose our own less secure phrases, and the seed makes it that much tougher?
So buy using the longest "bitwise" seed we can, we are more able to feel
comfortable with lower entropy phrases?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, September 30, 2001 12:33 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Jari Ruusu
Sent: Sunday, September 30, 2001 6:13 AM
To: peter k.
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.4e file/swap crypto package

"peter k." wrote:
&gt; &gt; - Password seeds can be used to slow down dictionary attacks. "-S XXX"
&gt; &gt;   option added to losetup, and "-o pseed=XXX" option added to mount.
&gt;
&gt; could you explain us how this is used by AES and also put that into the
&gt; readme when
&gt; you release the next version of loop-aes? how much does a password seed
&gt; increase
&gt; security?

Password seed is appended to user supplied password before password is
hashed using SHA-256 one way hash. For example, if seed is:

    IrzWg/8z211G4PI4l/pA

And user supplied (bad and guessable) password is:

    quick brown fox jumped over lazy dog

Resulting string that would be hashed:

    quick brown fox jumped over lazy dogIrzWg/8z211G4PI4l/pA

That's bad news to an attacker, because he would have to start recomputing
the hashes of the 500 billion known strings he has in his dictionary _after_
he has access to your password seed. And, if another partition has a
different seed, guess what... recompute again.

&gt; and, would it be a good idea to use for example 128 bytes of urandom data
&gt; (and i wouldnt save it to disk of course) as the seed when encrypting
swap?

Seed is only useful to slow down dictionary attacks. It does not increase
security if a password is already random and unguessable.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930203235</emailId><senderName>Andrew McGuinness</senderName><senderEmail>a.mcguinness@ntlworld.com</senderEmail><timestampReceived>2001-09-30 20:32:35-0400</timestampReceived><subject>RE: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

Quoting "IT3 Stuart B. Tener, USNR-R" &lt;stuart@bh90210.net&gt;:

&gt; Mr. Ruusu:
&gt; 
&gt; 	So if I understand you correctly, it is the "seed" which is allowing us
&gt; to
&gt; choose our own less secure phrases, and the seed makes it that much
&gt; tougher?
&gt; So buy using the longest "bitwise" seed we can, we are more able to feel
&gt; comfortable with lower entropy phrases?
&gt; 

I believe what we are talking about is called a "salt" in the literature.  It
does not have any effect on the difficulty of attacking a single target
(because the attacker knows the salt) but it removes an economy of scale
that can be used when trying to break any one of a large number of targets
simultaneously: precomputing the hashes of a large number of possible
passphrases.

If you do a search for "cryptographic salt", you'll probably find a fuller
description of the concept.

In short, it is a good feature to have, but it is not the same as having
a better passphrase, except in certain circumstances.

In particular, it does not need to be very large to have the effect of
eliminating the only attack it is useful against, so there is no real
advantage to making it larger.

--
Andrew McGuinness     Luton, UK             a.mcguinness@ntlworld.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930203736</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-30 20:37:36-0400</timestampReceived><subject>Re: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;         So if I understand you correctly, it is the "seed" which is allowing us to
&gt; choose our own less secure phrases, and the seed makes it that much tougher?
&gt; So buy using the longest "bitwise" seed we can, we are more able to feel
&gt; comfortable with lower entropy phrases?

Seed prevents an attacker from precomputing hashes of every dictionary
string he has in _advance_. Seed _slows_ down dictionary attack as an
attacker would have to recompute the hashes for each different seed, and he
can't even start doing that until he knows your seed.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011001181338</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-01 18:13:38-0400</timestampReceived><subject>RE: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

Mark, et al.:

	As I have asked before, I think it would be useful if we had some sort of
FAQ which states some of these issues and "should do it this way"
recommendations. Several months back there was a very deep exchange on
entropy, as well. Can we not put this all together in some centralized place
so people can review it and update it? If web space is the issue, I can
provide that.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, October 01, 2001 10:48 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Marc Mutz
Sent:	Sunday, September 30, 2001 11:03 AM
To:	peter k.
Cc:	linux-crypto@nl.linux.org
Subject:	Re: Announce loop-AES-v1.4e file/swap crypto package

On Sunday 30 September 2001 12:42, peter k. wrote:
&lt;snip&gt;
&gt; and, would it be a good idea to use for example 128 bytes of urandom
&gt; data (and i wouldnt save it to disk of course) as the seed when
&gt; encrypting swap?
&lt;snip&gt;

No. When you encyrpt swap, you should use a new key everytime you swpon
(and maybe even rekey periodically, say, every few days). You should
use a full keylength bits' key with full entropy. If you do this, you
don't need a seed. (and even if you did, 128 _bits_ would be more than
enough). Also, the seed need not be secret (and can't be). It must be
random, though, so you'd better use /dev/random instead of urandom...

Marc

--
Military justice is to justice what military music is to music.
                                                  -- Groucho Marx


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010728044358</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-28 04:43:58-0400</timestampReceived><subject>Those damn army brats!</subject><body>

List members:

	Well they were at it again! Those damn army brats "General
Problems", "Kernel Bug", and "Major Hair-Pulling" came knocking on my door.
Why you ask? Good question!

	In order to get ahead of the curve this millennium I have decided to
begin my "Y3K" (Year 3000) testing well in advance. In so doing, and since I
now run the 2.4.7 version of the kernel, I took a piece of software which I
had from the Y2K days, and re-worked it a bit. I have included the
timetravel-2.1 version (good with kernels circa 2.1 / pre year 2000), as
well as the "2.4.7" version (which I re-wrote).

	Problem is that, while the software (as far as I can see) is
properly debugged, I can not test it. Why you asked? Some silly compile flag
is not working properly and is stopping me from compiling it, and I can not
for the life of me freaking figure it out! Can anyone offer up any ideas?

	By the way, if anyone has any free time, and wants to add some code,
or suggest any ideas, I am considering to add code to read the programs from
a file /etc/datemod rather than having to do an insmod for each program
which one is doing testing for.

	Of course, I know that it may seem that this is a bit out of the
security/crypto realm, but, I suppose if someone were interesting in
defeating a time based software protection scheme, this software would also
accomplish that task. Knowing that we are all the moral people that we are,
I am just mentioning this (of course) as an exercise in theory, for
educational purposes.


  


Very Respectfully, 

Stuart Blake Tener, IT3, USNR-R, N3GWG 
Beverly Hills, California
VTU 1904G (Volunteer Training Unit) 
stuart@bh90210.net 
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043 
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859 

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!) 

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL. 

Friday, July 27, 2001 9:26 PM


["winmail.dat" (application/ms-tnef)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010730093709</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-07-30 09:37:09-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday 28 July 2001 06:43, IT3 Stuart B. Tener, USNR-R wrote:
&lt;snip&gt;
&gt; 	In order to get ahead of the curve this millennium I have decided to
&gt; begin my "Y3K" (Year 3000) testing well in advance. In so doing, and
&gt; since I now run the 2.4.7 version of the kernel, I took a piece of
&gt; software which I had from the Y2K days, and re-worked it a bit. I
&gt; have included the timetravel-2.1 version (good with kernels circa 2.1
&gt; / pre year 2000), as well as the "2.4.7" version (which I re-wrote).
&lt;snip&gt;

OK:

a. This is totally OT for this list
b. You're not using MIME attachments, but proprietary Windows stuff. If 
you want us to even look at it, use MIME.
c. All 32bit-time_t Unices will stop working properly in 2038. That's 
due to the way they internally store the time (in secs since 1-1-1970 
0:00 GMT). So anything resembling Y3K testing is completely bogus 
anyway.
d. You don't need to send three copies of your message. One would have 
sufficed.

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7ZUai3oWD+L2/6DgRAkdAAJ9M+uqa7jYzkH7wfXoj2uIhKyMgTACgkvnJ
UBAeuq+mXCBd7jcJykimocQ=
=rboa
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010730094805</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-30 09:48:05-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

Mr. Mutz:

a) Not necessarily off topic, as it could be a security problem if dates
were not working problem with software
b) I have "mime" checked in Outlook 2000, and under "encode text using: " it
gives me three "sub-choices": (a) none (b) quoted printable (c) base64,
which one will work best for you?
c) Alright 2038 testing
d) I had no idea nor any intention to send 3 copies, I have no concept of
how that happened


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 30, 2001 2:41 AM

-----Original Message-----
From: Marc Mutz [mailto:Marc.Mutz@uni-bielefeld.de]
Sent: Monday, July 30, 2001 4:36 AM
To: IT3 Stuart B. Tener, USNR-R; linux-crypto@nl.linux.org
Subject: Re: Those damn army brats!

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday 28 July 2001 06:43, IT3 Stuart B. Tener, USNR-R wrote:
&lt;snip&gt;
&gt;       In order to get ahead of the curve this millennium I have decided to
&gt; begin my "Y3K" (Year 3000) testing well in advance. In so doing, and
&gt; since I now run the 2.4.7 version of the kernel, I took a piece of
&gt; software which I had from the Y2K days, and re-worked it a bit. I
&gt; have included the timetravel-2.1 version (good with kernels circa 2.1
&gt; / pre year 2000), as well as the "2.4.7" version (which I re-wrote).
&lt;snip&gt;

OK:

a. This is totally OT for this list
b. You're not using MIME attachments, but proprietary Windows stuff. If
you want us to even look at it, use MIME.
c. All 32bit-time_t Unices will stop working properly in 2038. That's
due to the way they internally store the time (in secs since 1-1-1970
0:00 GMT). So anything resembling Y3K testing is completely bogus
anyway.
d. You don't need to send three copies of your message. One would have
sufficed.

Marc

- --
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7ZUai3oWD+L2/6DgRAkdAAJ9M+uqa7jYzkH7wfXoj2uIhKyMgTACgkvnJ
UBAeuq+mXCBd7jcJykimocQ=
=rboa
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010730095515</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-30 09:55:15-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

On Mon, 30 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt; d) I had no idea nor any intention to send 3 copies, I have no concept of
&gt; how that happened

X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This would be a pretty good clue.

-Dan

-- 
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010730100623</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-30 10:06:23-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

Mr. Hollis:

	Are you saying I am in need of a patch or update? The Microsoft website
says I am up to date. Why do you say that?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 30, 2001 3:05 AM

-----Original Message-----
From: Dan Hollis [mailto:goemon@anime.net]
Sent: Monday, July 30, 2001 2:55 AM
To: IT3 Stuart B. Tener, USNR-R
Cc: Marc Mutz; linux-crypto@nl.linux.org
Subject: RE: Those damn army brats!

On Mon, 30 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt; d) I had no idea nor any intention to send 3 copies, I have no concept of
&gt; how that happened

X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2911.0)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This would be a pretty good clue.

-Dan

--
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010730104132</emailId><senderName>Jan-Benedict Glaw</senderName><senderEmail>jbglaw@lug-owl.de</senderEmail><timestampReceived>2001-07-30 10:41:32-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

On Mon, Jul 30, 2001 at 03:06:23AM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Hollis:
&gt; 
&gt; 	Are you saying I am in need of a patch or update? The Microsoft website
&gt; says I am up to date. Why do you say that?

You should generally fetch up with the traditional ways in writing
an email:

- Use some email program that is known to produce standard emails:
	- The textual part should be "Text-Only", with no HTML or
	  MS Word help written.
	- Attachments should be MIME encoded (choose e.g. base64)
	- When replying to an email, *always* start your writing
	  *under* the old email. Remove all (old) parts you don't
	  replay to.
	- Keep signatures short. No more than about 3 lines
	- Keep lines short. No more than about 70 characters, then
	  press RETURN.
- Outlook generally was written as a groupware product communicating
  with a proprietary protocol to an Exchange Server. Please use a
  program written to write Emails, not Word Documents. So don't
  use Outlook for emails. Use Eudora or Netscape (if you want to
  remain at Windows). They will do the job in a better way...

MfG, JBG

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010730180734</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@fibrespeed.net</senderEmail><timestampReceived>2001-07-30 18:07:34-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

&gt; a. This is totally OT for this list
Probably very true.

&gt; b. You're not using MIME attachments, but proprietary Windows stuff. If 
&gt; you want us to even look at it, use MIME.

Yes, actually, his message was perfectly MIME compliant.  Read the source.

&gt; c. All 32bit-time_t Unices will stop working properly in 2038. That's 
&gt; due to the way they internally store the time (in secs since 1-1-1970 
&gt; 0:00 GMT). So anything resembling Y3K testing is completely bogus 
&gt; anyway.

You haven't dealt with TAI dates yet?


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802143306</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-02 14:33:06-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

TXIuIEdsYXc6DQoNCglJIGFtIG5vdyBwcm9kdWNpbmcgZW1haWxzIGluICJQbGFpbiBUZXh0IiBm
b3JtYXQgYXMgY29uZmlndXJlZCB3aXRoaW4gT3V0bG9vayAyMDAwLiBNeSBhdHRhY2htZW50IHdh
cyBNSU1FISBJIGRvbid0IHdoYXQgYW55b25lIHNhaWQsIGJ1dCBpdCBpcyBNSU1FLCBhbmQgSSBr
bm93IGl0IHdhcywgY2F1c2UgSSBoYXZlIHNlbnQgTUlNRSBtZXNzYWdlIGJlZm9yZSBhbmQgaXRz
IGZpbmUuIFRoZSBvbmx5IHBlb3BsZSB3aG9tIGV2ZXIgaGF2ZSBoYWQgYSBwcm9ibGVtIHdpdGgg
bXkgdXNpbmcgT3V0bG9vayBhcmUgdGhpcyBzaWxseSBlbWFpbCBsaXN0LiBFdmVyeW9uZSBlbHNl
IEkgZW1haWwsIGZyb20gcGVvcGxlIHVzaW5nIFN1bnMsIEhQLCBhbmQgSUJNIHdvcmtzdGF0aW9u
cyBkb2Vzbid0IG1vYW4gYW5kIGNvbXBsYWluIHRoaXMgbXVjaC4NCg0KCUkgQU0gTk9UIENIQU5H
SU5HIEVNQUlMIENMSUVOVFMhPyEgRXZlcnkgZnJpY2tpbmcgdXNlciBpbiB0aGUgd29ybGQgaXMg
ZmluZSB3aXRoIE91dGxvb2sgZXhjZXB0IHRoaXMgZ3JvdXAsIHdlbGwgaXRzIHRvbyBiYWQsIHRo
YXQgd2hhdCBJIHVzZSBiZWNhdXNlIEkgYW0gYSBjb25zdWx0YW50IGFuZCBteSBjbGllbnRzIGRl
bWFuZCB0aGF0IHRoZXkgcmVjZWl2ZSBjZXJ0YWluIHRoaW5ncyBpbiBSaWNoIFRleHQgYW5kIG90
aGVyIHN1Y2ggZm9ybWF0cy4gRG8gSSBuZWVkIHRvIHJ1biB0byBlbWFpbCBjbGllbnRzPyBLZWVw
IHRvIGFkZHJlc3MgYm9va3M/IEV0Yz8gTm8sIHRoYXQgaXMgbm90IG1vcmUgY29udmVuaWVudCBh
bmQgaXQgaXMgbm90IGhhcHBlbmluZywgc28geW91IGFsbCBjYW4gd2lzaCB1bnRpbCB0aGUgc2t5
IHR1cm5zIGdyZWVuIGFuZCB0aGUgZ3Jhc3MgYmx1ZSwgYnV0IEkgYW0gbm90IGNoYW5naW5nIGFu
IGVtYWlsIGNsaWVudCB3aGVuIGl0IHN1cHBvcnRzIGFsbCB0aGUgc3RhbmRhcmRzIGFuZCB3b3Jr
cyBwZXJmZWN0bHkgd2VsbC4NCg0KCUlmIHlvdSB0ZWxsIG1lIHdoYXQgc3RhbmRhcmRzIGFuZCB0
aGluZ3MgdG8gY29tcGx5IHdpdGgsIEkgd2lsbCB0cnkgdG8gZmlndXJlIG91dCBob3cgdG8gY29u
ZmlndXJlIE91dGxvb2sgMjAwMCB0byBkbyBpdC4gQnV0IHRoYXQncyBpdCwgSSBhbSBub3QgY2hh
bmdpbmcgZW1haWwgY2xpZW50cyBiZWNhdXNlIHlvdSBkb24ndCBsaWtlIGl0LiBJbiB0aGUgVVMg
d2UgaGF2ZSBhbiBvbGRlIG1pbGl0YXJ5IHNheWluZywgInlvdXIgcmVxdWVzdCB3aWxsIGJlIHBs
YWNlZCBpbiBmaWxlIDEzIiAoZmlsZSAxMyBpcyBjaXJjdWxhciwgbGluZWQgd2l0aCBhIHBsYXN0
aWMgbGluZXIgYW5kIGlzIGVtcHRpZWQgdXN1YWxseSBhdCB0aGUgZW5kIG9mIGRheSBpZiB5b3Ug
Z2V0IG15IG1lYW5pbmcpLg0KDQoJTm93IGlmIHlvdSB0ZWxsIG1lIGhvdyB0byBjb25maWd1cmUg
bXkgT3V0bG9vayB0byBwcm9kdWNlIGEgcGFydGljdWxhciB0eXBlIG9mIGF0dGFjaG1lbnQgd2hp
Y2ggaXQgY2FuLCBhbmQgZG9lcyBzdXBwb3J0IEFMTCBJbnRlcm5ldCBSRkNzIHdpdGggcmVnYXJk
IHRvIGVtYWlsIChhcyB3ZWxsIGFzIGV4Y2hhbmdlIGNvbXBsaWFudCBlbWFpbCksIHRoZW4gSSB3
aWxsIGRvIHNvLg0KDQoJTGlzdGVuIG15IGZyaWVuZCwgSSBkb24ndCBydW4gZWxtIGFueW1vcmUs
IEkgdXNlIGEgZGlmZmVyZW50IGNsaWVudCwgaWYgeW91IGRvbid0IGxpa2UgdGhlIHdheSBPdXRs
b29rIDIwMDAgd29ya3MsIHlvdSByZWFsbHkgaGF2ZSB0d28gY2hvaWNlcy4gVGhlIGZpcnN0IGlz
IHNlbmRpbmcgYSBsZXR0ZXIgdG8gTXIuIEJpbGwsIGFuZCB0ZWxsIGhpbSB3aGF0IHlvdSB0aGlu
ayBoZSBuZWVkcyB0byBjaGFuZ2UgaW4gdGhlIHByb2R1Y3QuIFRoZSBvdGhlciAod2hpY2ggSSBo
YXZlIG5vIHRpbWUgdG8gZG8pIGlzIHRvIGdldCBPZmZpY2UgRGV2ZWxvcG1lbnQgUGFja2FnZSwg
YW5kIHdyaXRlIGEgdGVtcGxhdGUgd2hpY2ggcGxhY2VzIG15IHNpZ25hdHVyZSBmaWxlIGF0IHRo
ZSBib3R0b20gYWZ0ZXIgdGhlIHJlcGx5IHRvIGVtYWlsLCBwbGFjZXMgbGl0dGxlICI+ICIgaW4g
ZnJvbnQgb2YgdGhlIGVtYWlsLCBhbmQgZm9ybWF0cyBpdCB0aGUgd2F5IHlvdSBsaWtlLiBUaGlz
IGNhbiBiZSBkb25lIHdpdGggdGhlIE9mZmljZSBEZXZlbG9wbWVudCBQYWNrYWdlLCBzbyBpZiBp
dCB1cHNldHMgeW91IHRoYXQgbXVjaCwgdGhlcmUgaXMgeW91ciBhbnN3ZXIhIExldCBtZSBrbm93
IHdoZW4geW91IGhhdmUgZGVidWdnZWQgdGhlIHRlbXBsYXRlIGFuZCBWQiBzY3JpcHQgY29kZSwg
c2VuZCBtZSBhIHppcCBmaWxlIHdpdGggaW5zdGFsbGF0aW9uIGluc3RydWN0aW9ucywgYW5kIEkn
bGwgdXNlIGl0LiBJIGFtIGFuIGVhc3kgZ29pbmcgZ3V5LCBhcyBsb25nIGFzIHlvdSBkb24ndCBl
eHBlY3QgbWUgdG8gZG8gYW55dGhpbmcgd2hpY2ggd2lsbCBpbmNvbnZlbmllbmNlIG15c2VsZiBm
b3IgeW91ciBwcmVmZXJlbmNlLiBJZiB5b3Ugd2FudCB0byB3cml0ZSBtZSB0aGF0IHN0dWZmLCBJ
J2QgbG92ZSB0byBnbyBiYWNrIHRvIHNlbmRpbmcgZW1haWwgInRoZSBvbGRlIHdheSIuIEJ1dCBt
eSBlbWFpbCBjbGllbnQgY3VycmVudGx5IGRvZXNuJ3QgZG8gaXQuDQoNCg0KVmVyeSBSZXNwZWN0
ZnVsbHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVy
bHkgSGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQp
IA0Kc3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBC
b3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1
KS0zMzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0K
DQpUZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3
LmVmYXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJW
RSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KVGh1cnNkYXksIEF1
Z3VzdCAwMiwgMjAwMSA3OjE0IEFNDQoNCiAtLS0tLU9yaWdpbmFsIE1lc3NhZ2UtLS0tLQ0KRnJv
bTogCW93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcgW21haWx0bzpvd25lci1saW51eC1j
cnlwdG9AbmwubGludXgub3JnXSAgT24gQmVoYWxmIE9mIEphbi1CZW5lZGljdCBHbGF3DQpTZW50
OglNb25kYXksIEp1bHkgMzAsIDIwMDEgMzo0MiBBTQ0KVG86CWxpbnV4LWNyeXB0b0BubC5saW51
eC5vcmcNClN1YmplY3Q6CVJlOiBUaG9zZSBkYW1uIGFybXkgYnJhdHMhDQoNCk9uIE1vbiwgSnVs
IDMwLCAyMDAxIGF0IDAzOjA2OjIzQU0gLTA3MDAsIElUMyBTdHVhcnQgQi4gVGVuZXIsIFVTTlIt
UiB3cm90ZToNCj4gTXIuIEhvbGxpczoNCj4gDQo+IAlBcmUgeW91IHNheWluZyBJIGFtIGluIG5l
ZWQgb2YgYSBwYXRjaCBvciB1cGRhdGU/IFRoZSBNaWNyb3NvZnQgd2Vic2l0ZQ0KPiBzYXlzIEkg
YW0gdXAgdG8gZGF0ZS4gV2h5IGRvIHlvdSBzYXkgdGhhdD8NCg0KWW91IHNob3VsZCBnZW5lcmFs
bHkgZmV0Y2ggdXAgd2l0aCB0aGUgdHJhZGl0aW9uYWwgd2F5cyBpbiB3cml0aW5nDQphbiBlbWFp
bDoNCg0KLSBVc2Ugc29tZSBlbWFpbCBwcm9ncmFtIHRoYXQgaXMga25vd24gdG8gcHJvZHVjZSBz
dGFuZGFyZCBlbWFpbHM6DQoJLSBUaGUgdGV4dHVhbCBwYXJ0IHNob3VsZCBiZSAiVGV4dC1Pbmx5
Iiwgd2l0aCBubyBIVE1MIG9yDQoJICBNUyBXb3JkIGhlbHAgd3JpdHRlbi4NCgktIEF0dGFjaG1l
bnRzIHNob3VsZCBiZSBNSU1FIGVuY29kZWQgKGNob29zZSBlLmcuIGJhc2U2NCkNCgktIFdoZW4g
cmVwbHlpbmcgdG8gYW4gZW1haWwsICphbHdheXMqIHN0YXJ0IHlvdXIgd3JpdGluZw0KCSAgKnVu
ZGVyKiB0aGUgb2xkIGVtYWlsLiBSZW1vdmUgYWxsIChvbGQpIHBhcnRzIHlvdSBkb24ndA0KCSAg
cmVwbGF5IHRvLg0KCS0gS2VlcCBzaWduYXR1cmVzIHNob3J0LiBObyBtb3JlIHRoYW4gYWJvdXQg
MyBsaW5lcw0KCS0gS2VlcCBsaW5lcyBzaG9ydC4gTm8gbW9yZSB0aGFuIGFib3V0IDcwIGNoYXJh
Y3RlcnMsIHRoZW4NCgkgIHByZXNzIFJFVFVSTi4NCi0gT3V0bG9vayBnZW5lcmFsbHkgd2FzIHdy
aXR0ZW4gYXMgYSBncm91cHdhcmUgcHJvZHVjdCBjb21tdW5pY2F0aW5nDQogIHdpdGggYSBwcm9w
cmlldGFyeSBwcm90b2NvbCB0byBhbiBFeGNoYW5nZSBTZXJ2ZXIuIFBsZWFzZSB1c2UgYQ0KICBw
cm9ncmFtIHdyaXR0ZW4gdG8gd3JpdGUgRW1haWxzLCBub3QgV29yZCBEb2N1bWVudHMuIFNvIGRv
bid0DQogIHVzZSBPdXRsb29rIGZvciBlbWFpbHMuIFVzZSBFdWRvcmEgb3IgTmV0c2NhcGUgKGlm
IHlvdSB3YW50IHRvDQogIHJlbWFpbiBhdCBXaW5kb3dzKS4gVGhleSB3aWxsIGRvIHRoZSBqb2Ig
aW4gYSBiZXR0ZXIgd2F5Li4uDQoNCk1mRywgSkJHDQoNCkxpbnV4LWNyeXB0bzogIGNyeXB0b2dy
YXBoeSBpbiBhbmQgb24gdGhlIExpbnV4IHN5c3RlbQ0KQXJjaGl2ZTogICAgICAgaHR0cDovL21h
aWwubmwubGludXgub3JnL2xpbnV4LWNyeXB0by8NCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802143340</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-02 14:33:40-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

DQpNci4gQmFiY29jazoNCg0KCUkgdGhvdWdodCB0aGUgbWVzc2FnZSB3YXMgTUlNRSBjb21wbGlh
bnQgY2F1c2UgSSBjaGVja2VkIGFuZCBhbGwgdGhlIHJpZ2h0IGJveGVzIHdlcmUgdGlja2VkIG9m
ZiE/ISBUbyBtYW55IGNvbXBsYWluZXJzIG9uIHRoaXMgbGlzdCwgbm90IGVub3VnaCBkb2Vycy4N
Cg0KCVdoYXQgYXJlICJUQUkgZGF0ZXMiPw0KDQoNClZlcnkgUmVzcGVjdGZ1bGx5LCANCg0KU3R1
YXJ0IEJsYWtlIFRlbmVyLCBJVDMsIFVTTlItUiwgTjNHV0cgDQpCZXZlcmx5IEhpbGxzLCBDYWxp
Zm9ybmlhDQpWVFUgMTkwNEcgKFZvbHVudGVlciBUcmFpbmluZyBVbml0KSANCnN0dWFydEBiaDkw
MjEwLm5ldCANCndlc3QgY29hc3Q6ICgzMTApLTM1OC0wMjAyIFAuTy4gQm94IDE2MDQzLCBCZXZl
cmx5IEhpbGxzLCBDQSA5MDIwOS0yMDQzIA0KZWFzdCBjb2FzdDogKDIxNSktMzM4LTYwMDUgUC5P
LiBCb3ggNDU4NTksIFBoaWxhZGVscGhpYSwgUEEgMTkxNDktNTg1OSANCg0KVGVsZWNvcGllcjog
KDQxOSktNzE1LTYwNzMgZmF4IHRvIGVtYWlsIGdhdGV3YXkgdmlhIHd3dy5lZmF4LmNvbSAoaXQn
cyBmcmVlISkgDQoNCkpPSU4gVEhFIFVTIE5BVlkgUkVTRVJWRSwgU0VSVkUgWU9VUiBDT1VOVFJZ
LCBBTkQgQkVORUZJVCBGUk9NIElUIEFMTC4gDQoNClRodXJzZGF5LCBBdWd1c3QgMDIsIDIwMDEg
NzozMCBBTQ0KDQogLS0tLS1PcmlnaW5hbCBNZXNzYWdlLS0tLS0NCkZyb206IAlvd25lci1saW51
eC1jcnlwdG9AbmwubGludXgub3JnIFttYWlsdG86b3duZXItbGludXgtY3J5cHRvQG5sLmxpbnV4
Lm9yZ10gIE9uIEJlaGFsZiBPZiBNaWNoYWVsIFQuIEJhYmNvY2sNClNlbnQ6CU1vbmRheSwgSnVs
eSAzMCwgMjAwMSAxMTowOCBBTQ0KVG86CWxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcNClN1Ympl
Y3Q6CVJlOiBUaG9zZSBkYW1uIGFybXkgYnJhdHMhDQoNCj4gYS4gVGhpcyBpcyB0b3RhbGx5IE9U
IGZvciB0aGlzIGxpc3QNClByb2JhYmx5IHZlcnkgdHJ1ZS4NCg0KPiBiLiBZb3UncmUgbm90IHVz
aW5nIE1JTUUgYXR0YWNobWVudHMsIGJ1dCBwcm9wcmlldGFyeSBXaW5kb3dzIHN0dWZmLiBJZiAN
Cj4geW91IHdhbnQgdXMgdG8gZXZlbiBsb29rIGF0IGl0LCB1c2UgTUlNRS4NCg0KWWVzLCBhY3R1
YWxseSwgaGlzIG1lc3NhZ2Ugd2FzIHBlcmZlY3RseSBNSU1FIGNvbXBsaWFudC4gIFJlYWQgdGhl
IHNvdXJjZS4NCg0KPiBjLiBBbGwgMzJiaXQtdGltZV90IFVuaWNlcyB3aWxsIHN0b3Agd29ya2lu
ZyBwcm9wZXJseSBpbiAyMDM4LiBUaGF0J3MgDQo+IGR1ZSB0byB0aGUgd2F5IHRoZXkgaW50ZXJu
YWxseSBzdG9yZSB0aGUgdGltZSAoaW4gc2VjcyBzaW5jZSAxLTEtMTk3MCANCj4gMDowMCBHTVQp
LiBTbyBhbnl0aGluZyByZXNlbWJsaW5nIFkzSyB0ZXN0aW5nIGlzIGNvbXBsZXRlbHkgYm9ndXMg
DQo+IGFueXdheS4NCg0KWW91IGhhdmVuJ3QgZGVhbHQgd2l0aCBUQUkgZGF0ZXMgeWV0Pw0KDQoN
CkxpbnV4LWNyeXB0bzogIGNyeXB0b2dyYXBoeSBpbiBhbmQgb24gdGhlIExpbnV4IHN5c3RlbQ0K
QXJjaGl2ZTogICAgICAgaHR0cDovL21haWwubmwubGludXgub3JnL2xpbnV4LWNyeXB0by8NCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802164128</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-08-02 16:41:28-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Monday 30 July 2001 20:07, Michael T. Babcock wrote:
&gt; &gt; a. This is totally OT for this list
&gt;
&gt; Probably very true.
&gt;
&gt; &gt; b. You're not using MIME attachments, but proprietary Windows
&gt; &gt; stuff. If you want us to even look at it, use MIME.
&gt;
&gt; Yes, actually, his message was perfectly MIME compliant.  Read the
&gt; source.
&lt;snip&gt;

OK, please show me the RFC that defines application/ms-tnef :-)

Marc

- --
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7aZ4u3oWD+L2/6DgRAsUTAKDAeoT/K+F89sG4r7khA5OlIsq+VQCfUmTn
64P0Ob7eJgT6hEGPXUiA9CY=
=NiI4
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802182051</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@fibrespeed.net</senderEmail><timestampReceived>2001-08-02 18:20:51-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

&gt; &gt; Yes, actually, his message was perfectly MIME compliant.  Read the
&gt; &gt; source.
&gt; &lt;snip&gt;
&gt;
&gt; OK, please show me the RFC that defines application/ms-tnef :-)

You might want to be silent instead of sounding foolish.

application/ms-tnef is the type of data within a segment of the MIME
message.
The message is MIME compliant -- perfectly so.  It began and ended with
proper MIME separators and defined the data types of each of the sections of
the message, including the plaintext version your mail reader should have
presented you with.  If I'm not mistaken, the ms-tnef section may have even
been
labelled as alternative content; not as an attachment.

MIME compliance has _nothing_ to do with the data inside the MIME sections
if they are properly separated and labelled.  Your complaint is likely that
his mail
reader sends a second copy of the E-mail in a non-ASCII format; properly
MIME encapsulated.  If so, that is a potentially valid complaint, but has
little to
nothing to do with its MIME compliance.

Why don't _you_ read the RFCs?
--
Michael T. Babcock
CTO, FibreSpeed


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707094400</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-07 09:44:00-0400</timestampReceived><subject>Re: Patching 2.4.6--help fixing 1 hunk that failed</subject><body>


well, I've cleaned up the 2.4.3.1, it should apply cleanly to a vanilla
2.4.6 linux kernel, I've put up the patch as patch-int-2.4.6.{bz2,gz} to

http://www.hvrlab.org/pub/crypto/

I've also taken the time to make a maintenaince release of the cryptoapi
re-packagement of the international crypto patch (and includes some
small cleanups still to be merged into the patch-version)

known problems with the international crypto patch on 2.4.x:

*) non-reentrant --&gt; don't use it on SMP (unless you can enforce
non-parallel execution of the transfer functions)
if you want to do some work on it, please go ahead; I can tell you where
you should begin to look at...

*) transfer block size dependend IV size (there is a fix for this one in
the cryptoapi re-package, see the included README file for more about it)

I hope alexander is still around... :-/

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010901150730</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-01 15:07:30-0400</timestampReceived><subject>Re: 2.4.8</subject><body>

On Sat, Sep 01, 2001 at 09:36:59AM -0500, Harmon Seaver wrote:
&gt;     So now that I've installed the cryptoapi-2.4.7 on the 2.4.7 kernel,
&gt; is it okay to apply the 2.4.8 (or later) kernel patches over that?

Hmmm. I think most people bring a kernel up to current
before adding additional patches. I doubt anyone
bothers to check funny orderings on the update. At the
very least you will probably get a few hunks applied at
some offset.

Might work, but if it doesn't, go back and do the
patching in order against a clean source tree.

My personal preference is

	1 standard kernel version update patches
	2 crypto api
	3 freeswan

If there are other patches I want to use, I'll usually
apply them between 1 and 2 if they're fairly general,
or after 3 if they are fairly specific.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010902082410</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-02 08:24:10-0400</timestampReceived><subject>RE: 2.4.9</subject><body>

TWFzc2ltbzoNCg0KCUkgYW0gcnVubmluZyAyLjQuOSAobWFuZHJha2UgcmVsZWFzZSksIGRvIHlv
dSB0aGluayB0aGUga2VybmVsIHBhdGNoIHdvdWxkIHdvcmsgd2l0aCB0aGF0Pw0KDQoNClZlcnkg
UmVzcGVjdGZ1bGx5LCANCg0KU3R1YXJ0IEJsYWtlIFRlbmVyLCBJVDMsIFVTTlItUiwgTjNHV0cg
DQpCZXZlcmx5IEhpbGxzLCBDYWxpZm9ybmlhDQpWVFUgMTkwNEcgKFZvbHVudGVlciBUcmFpbmlu
ZyBVbml0KSANCnN0dWFydEBiaDkwMjEwLm5ldCANCndlc3QgY29hc3Q6ICgzMTApLTM1OC0wMjAy
IFAuTy4gQm94IDE2MDQzLCBCZXZlcmx5IEhpbGxzLCBDQSA5MDIwOS0yMDQzIA0KZWFzdCBjb2Fz
dDogKDIxNSktMzM4LTYwMDUgUC5PLiBCb3ggNDU4NTksIFBoaWxhZGVscGhpYSwgUEEgMTkxNDkt
NTg1OSANCg0KVGVsZWNvcGllcjogKDQxOSktNzE1LTYwNzMgZmF4IHRvIGVtYWlsIGdhdGV3YXkg
dmlhIHd3dy5lZmF4LmNvbSAoaXQncyBmcmVlISkgDQoNCkpPSU4gVEhFIFVTIE5BVlkgUkVTRVJW
RSwgU0VSVkUgWU9VUiBDT1VOVFJZLCBBTkQgQkVORUZJVCBGUk9NIElUIEFMTC4gDQoNClN1bmRh
eSwgU2VwdGVtYmVyIDAyLCAyMDAxIDE6MjMgQU0NCg0KLS0tLS1PcmlnaW5hbCBNZXNzYWdlLS0t
LS0NCkZyb206IG93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcgW21haWx0bzpvd25lci1s
aW51eC1jcnlwdG9AbmwubGludXgub3JnXU9uIEJlaGFsZiBPZiBtYXhpbTY1QGlud2luZC5pdA0K
U2VudDogU2F0dXJkYXksIFNlcHRlbWJlciAwMSwgMjAwMSAxMjowMSBQTQ0KVG86IGxpbnV4LWNy
eXB0b0BubC5saW51eC5vcmcNClN1YmplY3Q6IDIuNC45DQoNCkkgaGF2ZSBpbnN0YWxsZWQgMi40
LjcgY3J5cHRvYXBpIG9uIGEgdmlyZ2luIGxpbnV4IGtlcm5lbCAyLjQuOSBzb3VyY2UNCndpdGhv
dXQgcHJvYmxlbS4uLi5pdCBzZWVtIHRvIGJlIGZpbmUuDQoNCg0KTWFzc2ltbw0KDQpQLlMuIHdp
dGggZ2NjIDIuOS4zDQoNCkxpbnV4LWNyeXB0bzogIGNyeXB0b2dyYXBoeSBpbiBhbmQgb24gdGhl
IExpbnV4IHN5c3RlbQ0KQXJjaGl2ZTogICAgICAgaHR0cDovL21haWwubmwubGludXgub3JnL2xp
bnV4LWNyeXB0by8NCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010902233911</emailId><senderName>Joe</senderName><senderEmail>sparky@ptw.com</senderEmail><timestampReceived>2001-09-02 23:39:11-0400</timestampReceived><subject>Thank You For A Great Product!</subject><body>

Dear Developers,

               I would like to firstoff thank you for such a great product, I 
myself have attempted to write a filesystem encryption layer for Linux, but 
yours seems way more advanced than I would ever be able to accomplish alone. 
I was wondering if there was a project guideline or project goals list? I am 
wishing to take part in active development of this project and hopefully to 
contribute some ideas. I looked over the sourceforge page and couldn't find 
anything of the sort, but if it does exist, I would greatly appreciate 
getting pointed to the right area. I have experience in gpgme and gcrypt 
programming and am very excited and anxious to help out this project as much 
as I can!

    Joe Diorio
    President - Tweaker Tech (tweakertech.com)

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010904004321</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-09-04 00:43:21-0400</timestampReceived><subject>Re: Announce loop-AES-v1.4d file/swap crypto package</subject><body>

On 2001-09-03, Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; wrote:

&gt; - Device backed (partition backed) loop is capable of encrypting swap
&gt; on 2.4  kernels.
[snip]
&gt; - On 2.4 kernels, device backed loop maintains private pre-allocated
&gt; pool of  RAM pages that are used when kernel is totally out of free
&gt; RAM. This  change also fixes stock loop.c sin of sleeping in
&gt; make_request_fn(). 
&gt; Kernel 2.4 users who want to encrypt swap partitions should upgrade to
&gt; this version. No need to upgrade if you use older 2.2 or 2.0 kernels.

Yay!  Thank you!

--
Hank Leininger &lt;hlein@progressive-comp.com&gt; 
/me pencils in some time to rebuild his laptop

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010904081231</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-04 08:12:31-0400</timestampReceived><subject>Re: files bigger than 2 Gb</subject><body>


are you using the latest util-linux (and patch)?

see

ftp://ftp.kernel.org/pub/linux/kernel/people/hvr/

please tell me whether it helps...

(you'll also need a glibc not too old...)

On Mon, 3 Sep 2001 maxim65@inwind.it wrote:
&gt; Now I'm using cryptoapi with loops of 2Gb .I would like to make it
&gt; bigger than 2Gb but when i try to create cryptofile bigger than that
&gt; value  I get error message " file too large "
&gt;
&gt; Is there same body than know if there is a way to do it?
&gt;
&gt; Thanks in advance
&gt;
&gt; Massimo
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt;

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010904150427</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-09-04 15:04:27-0400</timestampReceived><subject>announce: TNG-Series patches</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

On Tue, 4 Sep 2001, Herbert Valerio Riedel wrote:

&gt; Since having kernel modules is not always a good idea, I've started to put
&gt; together a handmade kernel patch...

oh, while we are at it...

i have compiled an "uxac" patch for 2.4 that combines the (u)sagi-patches
(currently containing the ipv6-enhancements, cryptoapi-code and the
 IABG ipsec6 code), (x)fs, loop(A)ES and (C)IPE.

Patches as well as the "used raw patches" can be found at
	http://www.walledcity.de/linux/TNG/kernel/

people running qmail might also be interested in the "taw6" patch
that combines TLS, SMTP-AUTH, wildmat and IPv6. the taw6 patch and
other v6 patches for djb-tools can be found at
	http://www.walledcity.de/linux/TNG/djb/

in both cases the v6-part can be simply disabled, usual kernelconfig
in the first, editing cc-conf and removing the -DINET6 in the second.

if anyone is interested in a v6 tunnel to his static v4 address to
play around with this wonderful protocol that makes ipsec mandatory,
just send me a mail.

comments, suggestions, diffs and references to TLS-Setups for other
MUAs welcome.

Gruss,
  Hauke

- -- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO5Ttf3O2fBh4VhzZAQFVZwf/ZUWuZSASGlHWLKJZt6DTWGUtR4TzYiPF
S8yX3LEjK+Z/qkX8SMvuAPiSHsIiSjiWZzQzjSFMWyd7KO4tXN5i1Hvy+7Gfg95M
DHFOj3iLEyjkoeGATUtEXzXiuoZPEIL9KSiZwo0km9JFt67S+l+hToryxUEgKlgK
DWOiR/N5+X20yKE6+CQwtCezXmPfFdbsaTJ1gyUVLJqTRkQU/JT7trJTCqBQN5O6
JS/0Z1KO6uoW1TnI9jMWN5eRNMM+O7dMmO80I/1zBTC35Wf3jDe02TwJuKgWjrk4
4QzbwAl7roKoTJOPlkoFJz/+xP1yBXrHa9ivdspEhq/Xbh0cGnuE6Q==
=5Sxj
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906123754</emailId><senderName>"John J. Lee"</senderName><senderEmail>jjl@pobox.com</senderEmail><timestampReceived>2001-09-06 12:37:54-0400</timestampReceived><subject>Why no mainline kernel crypto? (was: Re: I-patch problem statement</subject><body>

On Thu, 6 Sep 2001, Jari Ruusu wrote:
[...]
&gt; There are places where crypto can't go, but Linux must go. I don't like it,
&gt; but I can understand keeping crypto out of mainline kernel.

But logically, the only thing that is required is that the crypto and
non-crypto branches are kept separate.  It would fit this requirement just
as well to have crypto in the mainline kernel, and a separate non-crypto
kernel maintained, presumably with rather less effort than is currently
required to maintain the crypto code separately.  So why is the situation
as it is?  I don't know how kernel development works, perhaps somebody
here who is more knowledgeable than me would like to comment.

Of course, if things were to be organised in this way, somebody would have
to maintain the non-crypto kernel, and I guess it might be harder to find
people to do that than it currently is to find people (ie people on this
group!) to maintain the separate crypto patch(es? -- I'm not up-to-date on
how it works atm).  I suppose there are two groups of candidate
maintainers: people who want to get crypto into the mainline kernel who
might promise to maintain a non-crypto patch (or un-patch, more like), and
people who live in countries with restrictive crypto laws.

Another argument that might be put forward is that the countries with
restrictive laws on this aren't just dictatorships and communist countries
but also major users of linux in the west like (still?) France.  I think
this argument is specious given the relative ease of removing crypto
support compared to adding it.

I guess my main point is that it is much easier to break something than to
make it work, so maintaining a non-crypto branch would be far easier than
maintaining a crypto patch.


John


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907080312</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-07 08:03:12-0400</timestampReceived><subject>another IV_MODE_SECTOR question</subject><body>

On Fri, Sep 07, 2001 at 01:51:14AM -0500, Rob McGee wrote:
&gt; While I'm here, and rather than write another post, I'd like to address

Ah, but silly me, I have one more question. Playing with it some more, I
applied the 2.4.6 patch to my kernel loop driver (2.4.9, but it applied
cleanly.) Then I recompiled the loop.o (it's a module) compiled the
cryptoapi-2.4.7.0 again, make install, depmod, modprobe cryptoloop (kmod
is enabled too.)

Now I can't access my encrypted loop file which was created under the
kerneli 2.4.3.1 patch. Is this to be expected?

Anyway, that's no worry, because I can easily switch back to the other
loop.o and cryptoapi modules, and I don't really need that loop file.
But I'm really not clear on what is the tradeoff in using
--enable-iv-mode-sector vs. not using it. If I gain universal access to
files on alternate media, that's great. What do I lose besides a little
backward compatibility? Or is that it?

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010901185943</emailId><senderName></senderName><senderEmail>maxim65</senderEmail><timestampReceived>2001-09-01 18:59:43-0400</timestampReceived><subject>2.4.9</subject><body>

I have installed 2.4.7 cryptoapi on a virgin linux kernel 2.4.9 source
without problem....it seem to be fine.


Massimo

P.S. with gcc 2.9.3

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010903164322</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-03 16:43:22-0400</timestampReceived><subject>Announce loop-AES-v1.4d file/swap crypto package</subject><body>

[linux-kernel also CC'd due to recent encrypted swap discussion]

In short: If file and swap crypto is all you need, this package is a hassle
free replacement for international crypto patch and HVR's crypto-api.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. The AES cipher can be used to encrypt local file systems
and disk partitions. For more information about compiling and using the
driver, see the README file in the package.

Features:
- GPL license.
- No source modifications to kernel. No patch hassles when you are upgrading
  your kernel.
- Works with all recent 2.4, 2.2 and 2.0 kernels, including distro vendor
  kernels. Encrypted disk images are compatible across all supported
  kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.
- Device backed (partition backed) loop is capable of encrypting swap on 2.4
  kernels.

Changes since previous release:
- Little speed optimization in aes-glue.c
- External encryption module locking bug is fixed (kernel 2.4 only). This
  bug did not affect loop-AES operation at all. This fix is from Ingo
  Rohloff.
- On 2.4 kernels, device backed loop maintains private pre-allocated pool of
  RAM pages that are used when kernel is totally out of free RAM. This
  change also fixes stock loop.c sin of sleeping in make_request_fn().

Kernel 2.4 users who want to encrypt swap partitions should upgrade to this
version. No need to upgrade if you use older 2.2 or 2.0 kernels.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4d.tar.bz2
    md5sum 404f82796bacc479deb266f13ec260b8

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4d.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010903124340</emailId><senderName></senderName><senderEmail>maxim65</senderEmail><timestampReceived>2001-09-03 12:43:40-0400</timestampReceived><subject>files bigger than 2 Gb</subject><body>

Now I'm using cryptoapi with loops of 2Gb .I would like to make it
bigger than 2Gb but when i try to create cryptofile bigger than that
value  I get error message " file too large "

Is there same body than know if there is a way to do it?

Thanks in advance

Massimo

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011204152112</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-12-04 15:21:12-0400</timestampReceived><subject>Re: CryptoApi and kernel 2.4.14</subject><body>

&gt; I am trying to compile the API on a 2.4.14 machine. The loop.c has been
&gt; patched to make it load correctly. Now when I try to compile the API I get
&gt; the following:

Try the 2.4.10 cryptoapi patches instead.

-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011203141505</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-03 14:15:05-0400</timestampReceived><subject>[Fwd: RFC(ry): breaking loop.c's IV calculation]</subject><body>

fyi

-----Forwarded Message-----

From: Herbert Valerio Riedel &lt;hvr@hvrlab.org&gt;
To: Andrea Arcangeli &lt;andrea@suse.de&gt;
Cc: Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;, axboe@suse.de, marcelo@conectiva.com.br, \
                linux-kernel@vger.kernel.org
Subject: RFC(ry): breaking loop.c's IV calculation
Date: 03 Dec 2001 15:12:42 +0100

On Sun, 2001-12-02 at 23:46, Andrea Arcangeli wrote:
&gt; &gt; &gt; &gt; ps: any chance to get a sector-based-IV calculation (instead of the
&gt; &gt; &gt; &gt; actual broken soft blocksize based one) into loop.c?!?
&gt; &gt; &gt; I can extract all loop.c bug fixes from loop-AES, excluding AES cipher, if
&gt; &gt; &gt; someone wants them. Well, I can include AES cipher too, but that would
&gt; &gt; &gt; royally piss-off the cryptoapi people.
&gt; &gt; ..maybe :-))
&gt; &gt; 
&gt; &gt; &gt; Does anyone want the bug fixes? Jens? Marcelo?
&gt; &gt; I hope jens &amp; andrea still remember the motivation this IV thing... :-)

&gt; Of course I remeber. I still vote for breaking the IV API and to avoid
&gt; the compatibility cruft. Please post to l-k the patch to change the IV
&gt; granularity from the softblocksize to 512 fixed describing our
&gt; discussion, so if anybody really cares about the current IV API he will
&gt; have a chance to complain before we post the patch for inclusion to
&gt; Marcelo and Linus.
 
&gt; &gt; btw, I don't care, whether my backward-compatible (or 
&gt; &gt; 'toothpaste-back-into-tube'-approach as jari 
&gt; &gt; would call it ;) patch gets approved or whether a radical switch to sector 
&gt; &gt; based IV calculation as jari proposes gets accepted...
&gt; &gt; 
&gt; &gt; we just need a consistent IV metric, regardless of the underlying medium 
&gt; &gt; (/dev/cdrom,/dev/fd0,/dev/hda,...) or any involved layers (lvm, md, ...)
&gt; 
&gt; Indeed.

well, I've put one patch together (it still needs (constructive)
auditing though! jari?) here it is (it's against 2.4.16's loop.[ch])

(also available as /pub/linux/kernel/people/hvr/loop2-iv-2.4.16.patch)

Index: drivers/block/loop.c
===================================================================
RCS file: /cvs/linux-2.4-xfs/linux/drivers/block/loop.c,v
retrieving revision 1.43
diff -u -r1.43 loop.c
--- drivers/block/loop.c	2001/11/20 18:59:02	1.43
+++ drivers/block/loop.c	2001/12/03 15:03:36
@@ -85,7 +85,7 @@
  * Transfer functions
  */
 static int transfer_none(struct loop_device *lo, int cmd, char *raw_buf,
-			 char *loop_buf, int size, int real_block)
+			 char *loop_buf, int size, loop_iv_t IV)
 {
 	if (raw_buf != loop_buf) {
 		if (cmd == READ)
@@ -98,7 +98,7 @@
 }
 
 static int transfer_xor(struct loop_device *lo, int cmd, char *raw_buf,
-			char *loop_buf, int size, int real_block)
+			char *loop_buf, int size, loop_iv_t IV)
 {
 	char	*in, *out, *key;
 	int	i, keysize;
@@ -186,7 +186,7 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+		const loop_iv_t IV = (index &lt;&lt; (PAGE_CACHE_SHIFT - LOOP_IV_SECTOR_BITS)) + (offset \
&gt;&gt; LOOP_IV_SECTOR_BITS);  int transfer_result;
 
 		size = PAGE_CACHE_SIZE - offset;
@@ -244,7 +244,7 @@
 	unsigned long count = desc-&gt;count;
 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
 	struct loop_device *lo = p-&gt;lo;
-	int IV = page-&gt;index * (PAGE_CACHE_SIZE/p-&gt;bsize) + offset/p-&gt;bsize;
+	const loop_iv_t IV = (page-&gt;index &lt;&lt; (PAGE_CACHE_SHIFT - LOOP_IV_SECTOR_BITS)) + \
(offset &gt;&gt; LOOP_IV_SECTOR_BITS);  
 	if (size &gt; count)
 		size = count;
@@ -296,20 +296,6 @@
 	return bs;
 }
 
-static inline unsigned long loop_get_iv(struct loop_device *lo,
-					unsigned long sector)
-{
-	int bs = loop_get_bs(lo);
-	unsigned long offset, IV;
-
-	IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
-	offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
-	if (offset &gt;= bs)
-		IV++;
-
-	return IV;
-}
-
 static int do_bh_filebacked(struct loop_device *lo, struct buffer_head *bh, int rw)
 {
 	loff_t pos;
@@ -455,7 +441,7 @@
 {
 	struct buffer_head *bh = NULL;
 	struct loop_device *lo;
-	unsigned long IV;
+	loop_iv_t IV;
 
 	if (!buffer_locked(rbh))
 		BUG();
@@ -502,7 +488,7 @@
 	 * piggy old buffer on original, and submit for I/O
 	 */
 	bh = loop_get_buffer(lo, rbh);
-	IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+	IV = rbh-&gt;b_rsector + (lo-&gt;lo_offset &gt;&gt; LOOP_IV_SECTOR_BITS);
 	if (rw == WRITE) {
 		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
 		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
@@ -539,7 +525,7 @@
 		bh-&gt;b_end_io(bh, !ret);
 	} else {
 		struct buffer_head *rbh = bh-&gt;b_private;
-		unsigned long IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+		const loop_iv_t IV = rbh-&gt;b_rsector + (lo-&gt;lo_offset &gt;&gt; LOOP_IV_SECTOR_BITS);
 
 		ret = lo_do_transfer(lo, READ, bh-&gt;b_data, rbh-&gt;b_data,
 				     bh-&gt;b_size, IV);
Index: include/linux/loop.h
===================================================================
RCS file: /cvs/linux-2.4-xfs/linux/include/linux/loop.h,v
retrieving revision 1.5
diff -u -r1.5 loop.h
--- include/linux/loop.h	2001/09/21 16:28:50	1.5
+++ include/linux/loop.h	2001/12/03 15:03:36
@@ -17,6 +17,12 @@
 
 #ifdef __KERNEL__
 
+/* definitions for IV metric */
+#define LOOP_IV_SECTOR_BITS 9
+#define LOOP_IV_SECTOR_SIZE (1 &lt;&lt; LO_IV_SECTOR_BITS)
+
+typedef unsigned long loop_iv_t;
+
 /* Possible states of device */
 enum {
 	Lo_unbound,
@@ -24,6 +30,12 @@
 	Lo_rundown,
 };
 
+struct loop_device;
+
+typedef	int (* transfer_proc_t)(struct loop_device *, int cmd,
+				char *raw_buf, char *loop_buf, int size,
+				loop_iv_t IV);
+
 struct loop_device {
 	int		lo_number;
 	int		lo_refcnt;
@@ -32,9 +44,7 @@
 	int		lo_encrypt_type;
 	int		lo_encrypt_key_size;
 	int		lo_flags;
-	int		(*transfer)(struct loop_device *, int cmd,
-				    char *raw_buf, char *loop_buf, int size,
-				    int real_block);
+	transfer_proc_t transfer;
 	char		lo_name[LO_NAME_SIZE];
 	char		lo_encrypt_key[LO_KEY_SIZE];
 	__u32           lo_init[2];
@@ -58,17 +68,13 @@
 	atomic_t		lo_pending;
 };
 
-typedef	int (* transfer_proc_t)(struct loop_device *, int cmd,
-				char *raw_buf, char *loop_buf, int size,
-				int real_block);
-
 static inline int lo_do_transfer(struct loop_device *lo, int cmd, char *rbuf,
-				 char *lbuf, int size, int rblock)
+				 char *lbuf, int size, loop_iv_t IV)
 {
 	if (!lo-&gt;transfer)
 		return 0;
 
-	return lo-&gt;transfer(lo, cmd, rbuf, lbuf, size, rblock);
+	return lo-&gt;transfer(lo, cmd, rbuf, lbuf, size, IV);
 }
 #endif /* __KERNEL__ */
 
@@ -122,6 +128,8 @@
 #define LO_CRYPT_IDEA     6
 #define LO_CRYPT_DUMMY    9
 #define LO_CRYPT_SKIPJACK 10
+#define LO_CRYPT_AES      16   /* loop-AES */
+#define LO_CRYPT_CRYPTOAPI 18  /* international crypto patch */
 #define MAX_LO_CRYPT	20
 
 #ifdef __KERNEL__
@@ -129,7 +137,7 @@
 struct loop_func_table {
 	int number; 	/* filter type */ 
 	int (*transfer)(struct loop_device *lo, int cmd, char *raw_buf,
-			char *loop_buf, int size, int real_block);
+			char *loop_buf, int size, loop_iv_t IV);
 	int (*init)(struct loop_device *, struct loop_info *); 
 	/* release is called from loop_unregister_transfer or clr_fd */
 	int (*release)(struct loop_device *); 

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011128094121</emailId><senderName>Gabor Gludovatz</senderName><senderEmail>ggabor@sopron.hu</senderEmail><timestampReceived>2001-11-28 09:41:21-0400</timestampReceived><subject>CryptoAPI problems</subject><body>

Hi,

I'm having problems with using CryptoAPI. Here are the commands I used:

roadrunner:/mnt# dd if=/dev/zero of=x bs=1M count=25
25+0 records in
25+0 records out
roadrunner:/mnt# losetup -e blowfish /dev/loop0 /mnt/x
Available keysizes (bits): 128 160 192 256
Keysize: 256
Password :
roadrunner:/mnt# losetup /dev/loop0
/dev/loop0: [0301]:185852 (blowfish-cbc) offset 0, undefined encryption
roadrunner:/mnt# mke2fs /dev/loop0
[...] (seems to be okay)
roadrunner:/mnt# mount /dev/loop0 /mnt/tmp0
EXT2-fs error (device loop(7,0)): ext2_check_descriptors: Block bitmap for
group 0 not in group (block 1085197902)!
EXT2-fs: group descriptors corrupted!
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems
roadrunner:/mnt#

Any idea?


-- 
 Gabor Gludovatz &lt;ggabor@sopron.hu&gt; http://www.sopron.hu/~ggabor/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011208171821</emailId><senderName>"Michael Zhu"</senderName><senderEmail>mylinuxk@yahoo.ca</senderEmail><timestampReceived>2001-12-08 17:18:21-0400</timestampReceived><subject>About the crypto patch</subject><body>

Hi, I download a International Kernel Patch from =
http://www.kernel.org/pub/linux/kernel/crypto/v2.4/ . But how can I open =
it. The patch file is "patch-int-2.4.0.1.gz". After I open it using the =
WinZip, there is only a patch-int-2.4.0.1 file. I couldn't open it. What =
is wrong?

Michael

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=gb2312" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.3315.2870" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hi, I download a International Kernel 
Patch¬†from &lt;A 
href="http://www.kernel.org/pub/linux/kernel/crypto/v2.4/"&gt;http://www.kernel.org/pub/linux/kernel/crypto/v2.4/&lt;/A&gt;¬†. \
 But how can I open it. The patch file is "patch-int-2.4.0.1.gz". After I open it 
using the WinZip, there is only a patch-int-2.4.0.1 file. I couldn't open it. 
What is wrong?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Michael&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011207135308</emailId><senderName></senderName><senderEmail>ragnagock</senderEmail><timestampReceived>2001-12-07 13:53:08-0400</timestampReceived><subject>CryptoAPI 2.4.7.0</subject><body>

Hi,

I' trying to get the modules version running but it doesn't work.

When compiling I get the warning (api/cryptoloop.c):
  LO_CRYPT_CRYPTOAPI not (yet) defined in kernel header.
Do I have to worry becaise I forgot sth.?

The bigger problem is: depmod doesn't like the modules (unresolved
depenencies).
The function names have endings with numbers and 4 character codes.

btw: I'm working on an initrd to decrypt "/", "/boot" and all others before
init is called to have a completely encrypted harddisk.
Now I just need a working CryptoAPI (and loopback...).

Regards, Dirk

-- 
GMX - Die Kommunikationsplattform im Internet.
http://www.gmx.net

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213115617</emailId><senderName>Newsmail</senderName><senderEmail>newsmail@satimex.tvnet.hu</senderEmail><timestampReceived>2001-12-13 11:56:17-0400</timestampReceived><subject>a question about ciphers</subject><body>

hello everybody, I'm quite new in encryption, but I want to encrypt some 
complete partitions on my pc. actually I see many cipher types I can use, 
but I dont know which one to choose. I heard that 3des is very slow, cpu 
intensive cipher. well this is the more I know about them. somebody could 
help me which cipher to choose, which is the faster, what about their 
caracterisiques, or at least give me an url where I can find description of 
them?
thx
Greg

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213135949</emailId><senderName>Newsmail</senderName><senderEmail>newsmail@satimex.tvnet.hu</senderEmail><timestampReceived>2001-12-13 13:59:49-0400</timestampReceived><subject>some other questions</subject><body>

thx Marc, and Robert for your answers, could you tell me what the block 
size means? what is the difference between aes128 and aes256 for exemple, 
is it related to the 'deepness' of encryption?
btw I have more than 3 gig to encrypt, if I encrypt than I encrypt 
everything :), so blowfish doesnt support more than 3 gigs lets say, so 
Marc you recommend Serpent?
greg

ps: if I want to use patch-int-2.4.16.2, do I have to install the hrv or 
jari loop pacthes or these are included in 2.4.16.2?

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213125640</emailId><senderName>Pierre PEIFFER</senderName><senderEmail>pierre.peiffer@sxb.bsf.alcatel.fr</senderEmail><timestampReceived>2001-12-13 12:56:40-0400</timestampReceived><subject>DES_EDE3</subject><body>

Hi,

    I just have a short question: is DES3 crypto still working/supported
?
    aes and twofish (for example) works fine....

    I use the latest patch with 2.4.16 kernel (patch-int-2.4.16.2),
latest patch of util-linux...

    But with des3, I have the (classical) error:

[root@]# losetup -e des-ede3 /dev/loop0 initrd.img
Mot de passe :
The cipher does not exist, or a cipher module needs to be loaded into
the kernel
ioctl: LOOP_SET_STATUS: Param√®tre invalide

    All needed modules are inserted...

Pierre

Note: for loop patch (hvr and jari), what are the differences between
the both patch ? And which one do you recommand to use ?

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213211528</emailId><senderName>Newsmail</senderName><senderEmail>newsmail@satimex.tvnet.hu</senderEmail><timestampReceived>2001-12-13 21:15:28-0400</timestampReceived><subject>aes again</subject><body>

well Marc you said I dont have to use AES256, but well even if I dun use it 
I'M interested in the difference between the 128. simple question, more 
easy to break 128 than 256?
I read at loop-aes readme that for keys over 20 caracters it uses aes192, 
and over 40 caracters it uses 256. why is that?
greg

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213162836</emailId><senderName>Damian Gerow</senderName><senderEmail>damian@sentex.net</senderEmail><timestampReceived>2001-12-13 16:28:36-0400</timestampReceived><subject>crypto basics</subject><body>

After following the brief discussion this morning about Blowfish, Twofish, 
Serpent, and AES, I've realized that I don't know nearly what I had hoped I 
did when it came to encryption.  Does anyone have a link (or a document 
they can post on the web) that points to the basics of encryption?  And I 
don't mean like 'Encryption is when you take what you wrote (plaintext) and 
enrypt it so that nobody can read it (ciphertext).'  I'm looking for 
something a little more advanced -- that would explain block sizes, CBC, 
EBC, and their relative strengths and weaknesses.

And (what I'd really like to see) does anyone know of a complete rundown of 
all the ciphers that are available in the kernel?  The help was just enough 
to whet my appetite -- and I'm really curious to see why AES is ... not 
well liked.

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213140158</emailId><senderName></senderName><senderEmail>ananddinakar</senderEmail><timestampReceived>2001-12-13 14:01:58-0400</timestampReceived><subject>SEAL</subject><body>

Hi

How secure is SEAL? It looks excellent for encrypting data with file hooks. 
Especially since the keystream is independent of the plaintext
Am I right? Must I take permission before using it?

Can anyone give me a link to some cryptanalysis info for SEAL?

Regards, anand.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219032048</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 03:20:48-0400</timestampReceived><subject>Vulnerability in encrypted loop device for Linux</subject><body>

Hello,

The text attached describes what i believe to be a security hole in 
the encrypted loop device for linux. Because of it an 
attacker is able to modify the content of the encrypted device
without being detected. This text proposes to fix the hole by 
authenticating the device.

comments are welcome

ps: version in html, pdf and ps can be found in http://www.off.net/~jme



["loopdev_vul.txt" (text/plain)]

                Vulnerability in encrypted loop device for Linux

                           Jerome Etienne jme@off.net

Abstract

   This text describes a security hole i found in encrypted loop device for
   Linux. An attacker is able to modify the content of the encrypted device
   without being detected (see section 2). This text proposes to fix the hole
   by authenticating the device (see section 3).

1  Threat model

   Encrypting a disk device aims to protect against a off-line attacker who
   would be able to access the disk between 2 legitimate mounts.

   It isn't against an attacker who has access to the running computer when
   the encrypted device is mounted as either (i) the attacker is root and it
   can access the encrypted device anyway or (ii) he is an unprivileged user
   and can be stopped with Unix's right management (i.e. user/group).

2  Attack description

   The vulnerability of encrypted loop device is due to its lack of
   authentication. The aim of encryption is to make the data unreadable for
   anybody who doesn't know the key. It doesn't prevent an attacker from
   modifying the data. People assume that an attacker won't do it because the
   attacker wouldn't be able to choose the resulting clear text. But this
   section shows that modifying the cypher text data may be interesting even
   if the attacker ignores the resulting clear text and moreover that he can
   choose it to some extends.

   This attack is only applicable to device storing data which are reused
   across mounts: most file-system (e.g. ext2, reiserfs, ext3) but not swap.

  2.1  To insert random data

   If the attacker modifies the cipher text without choosing the resulting
   clear text, it will likely produce random data. The legitimate user won't
   detect the modification and will use them as if they were valid. As they
   likely appears random, it will result of a Denial of Service (aka DoS).

  2.2  To insert chosen data

   The encryption mode used by encrypted loop device is CBC[oST81,sec 5.3].
   CBC allows cut/past attacks i.e. the attacker can cut encrypted data from
   one part of the device and paste them in another location. As both data
   sections have been encrypted by the same key, the clear text won't be
   completely random data.

   This lack of authentication isn't a CBC flaw. Authentication isn't
   considered a aim of the encryption mode, so most modes (e.g. ECB, CFB,
   OFB) doesn't authenticate the data. To use another mode would be flawed in
   the same way except if they explicitly protect against forgery. Recently
   some modes including authentication popped up to speed up the encryption /
   authentication couple but as far as i know they are all patented.

   In very short, encrypting with CBC is Cn=Enc(Cn-1 xor Pn) where Enc(x) is
   encrypting x, Pn is the nth block of plain text and Cn the nth block of
   cipher text. For the first block, Cn-1 is an Initial vector (aka IV) which
   may be public and must be unique for a given key. The decryption is Pn =
   Dec(Cn) xor Cn-1. See [oST81,sec 5.3] for a longer description of CBC.

   If the attacker copies s blocks from the location m to n (aka
   [Cn,...,Cn+s-1] == [Cm,...,Cm+s-1]), Pn+1 up to Pn+s-1 will the same as
   Pm+1 to Pm+s-1 and Pn will likely appears random. Cn (i.e. Cm) will be
   decrypted as Pn = Dec(Cm) xor Cn-1 but Cm-1 and Cn-1 are different so Pn
   will likely appears random. Nevertheless Pn+1 = Dec(Cn+1) xor Cn =
   Dec(Cm+1) xor Cm = Pm+1, so Pn+1=Pm+1. So if the attacker has an idea of
   the content of a group of blocks in the device, he can copy them to the
   Nth block, thus it can choose the content of it without being detected.

   As an file-system isn't designed to appears random, its content may be
   predictable to some extents (e.g. common directories and files, inode,
   superblock). The attacker may use such informations to guess the contents
   and do a knowledgeable cut/past. For example, an attacker knowing the
   location of a password file may replace a password by another one which is
   already known.

3  Proposed fixes

   We propose 2 types of fixes: one which authenticate at mount time (see
   section 3.1) and the other which authenticates at the cluster level (see
   section 3.2). The choice between the two (see section 3.4) is a user
   matter as it mostly depends on the access pattern on the encrypted device.

   In the proposed fixes, the authentication is a MAC computed over the
   encrypted device. The MAC is HMAC[KBC97] combined with a configured hash
   function, preferably a well studied one such as SHA1[oST95] or MD5[Riv92].
   The MAC secret key is derived from the pass-phrase via PKCS-5 key
   derivations ([Kal00,sec 5.1]).

  3.1  Authenticating at mount time

   As we need to authenticate the device across mounts and not while it is
   mounted (see section 1), it is sufficient to authenticate the whole device
   during mount operations. It slows down mount operations but they are
   rather infrequent so we consider the trade-off delay/security acceptable.
   The MAC is verified during mount operations and generated during unmount
   operations. It isn't supposed to be valid while the device is mounted.

   The MAC generation is done when unmounting the device. The MAC is computed
   over all the sectors of the device and the result is appended in the
   device file after all the sectors.

   The MAC verification is done when mounting the device. The MAC is computed
   over all the sectors of the device. If the result is equal to the MAC
   appended to the block device, the verification succeed, else it failed.
   The verification may fail (i) if an attacker attempted to modify the
   device during 2 legitimates mounts or (ii) if the device hasn't been
   cleanly unmounted (e.g. computer crash). It is impossible to automatically
   distinguish both cases with certainty. So if the verification fails, the
   user is notified and the mount operation may be stopped depending on
   configuration.

  3.2  Authenticating at cluster level

   To authenticate the whole device at mount time, may be considered
   prohibitive by some users, so this section describe an alternative which
   authenticate the device at the cluster level. A cluster is a group of one
   or more sectors, the exact number depends on configuration. In this case,
   the MAC is verified each time a cluster is read from the disk and
   generated at each write.

   If the device isn't cleanly unmounted, the authentication of one or more
   cluster may fail (e.g. the super block). This case will be detected at
   mount time. But if an attacker forges data in the device, it will be
   detected only when the user read the modified data. The kernel will read
   the forged cluster and the authentication will fail. It may report it with
   a printk with a rate limitor, it isn't clean but i don't see any better
   way.

  3.3  MAC location

   Currently the encrypted loop file-system is stored in a regular file of a
   hosting file-system. Its size is a multiple of a sector size (i.e. 512
   byte). The MAC could be stored in a separate file or included in the
   regular file. To store the MAC in a separate file, generates problems
   while managing the loop device file (e.g. copy, backup). The administrator
   must not forget to copy the MAC file when he copies the device file, else
   the copied device won't be usable anymore. To store the MAC in the same
   file as the clusters doesn't has this disadvantage.

  3.4  Comparison

   To authenticate at the cluster level will increase the access time of each
   cluster but won't affect mount operation. The exact increase depends on
   the MAC and encryption algorithms. As a rule of thumb, MAC algorithms are
   typically 3 times faster than encryption ones so the time dedicated to
   cryptography for each block will increase by around 30%. To authenticate
   at mount time will largely slow down the mount operations but won't affect
   every access once mounted.

   The authentication at mount time will detect forgery at mount time,
   whereas the alternative detects it only when the forged cluster is read,
   possibly a long time after the modification. Users may consider that it is
   easier to diagnose who forged it if they have a better idea of when the
   attack occurred.

   To authenticate the whole device at mount time requires a single MAC per
   device, so the space overhead (typically 16 byte) is negligible compared
   to the device's size. To authenticate at the cluster level requires a MAC
   per cluster, it is significantly more but some people may consider it
   still negligible, especially with cheap disks.

   The choice between the two mostly depends on the access pattern on the
   encrypted device. If the device is used for interactive purpose, the
   increased access latency may be unsuitable. If the access latency is
   important or if every block is frequently modified, to authenticate only
   once at mount time may be more interesting. If the user can't stand long
   mount operations, to authenticate at cluster level will be more suitable.
   As only the final user knows the type access made on his encrypted device,
   he should be the one able to choose between the two.

4  Acknowledgments

   Thanks to Andy Kleen and Phil Swan for their useful comments.

5  Conclusion

   This text described an vulnerability in encrypted loop device which allows
   an attacker to modify the encrypted device without being detected (see
   section 2). We propose a fix which authenticate the whole device during
   mount operation (see section 3.1). This fix slows down mount operations
   but we consider the trade-off longer delay vs additional security very
   reasonable as mount operations are rather infrequent. We propose another
   fix which authenticate at cluster level for people who can't stand long
   mount operation. The choice between the two is a final user matter.

   The authentication may be optionally disabled thus if an user considers
   the trade-off delay/security not in favor of security, he may choose to be
   vulnerable to this attack and disable it. Nevertheless the author thinks
   encrypted loop device must be secure by default.

References

   [Kal00]
           B. Kaliski. Pkcs 5: Password-based cryptography specification
           version 2.0. Request For Comment (Informational) RFC2898,
           September 2000.

   [KBC97]
           H. Krawczyk, M. Bellare, and R. Canetti. Hmac: Keyed-hashing for
           message authentication. Request For Comment (Informational)
           RFC2104, February 1997.

   [oST81]
           National Institute of Standards and Technology. implementing and
           using the nbs data encryption standard. Federal information
           processing standards fips74, April 1981.

   [oST95]
           National Institute of Standards and Technology. Secure hash
           standard. Federal information processing standards fips180-1,
           April 1995.

   [Riv92]
           R. Rivest. The md5 message-digest algorithm. Request For Comment
           (Informational) RFC1321, April 1992.

     ----------------------------------------------------------------------

   File translated from TEX by TTH, version 2.87.
   On 18 Dec 2001, 22:20.

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011226220358</emailId><senderName>Zygo Blaxell</senderName><senderEmail>umsfalfb@umail.furryterror.org</senderEmail><timestampReceived>2001-12-26 22:03:58-0400</timestampReceived><subject>Cryptoapi on 2.4.17 (2 patches)</subject><body>

[Attachment #2 (multipart/mixed)]


I have two patches, one for cryptoAPI (current CVS) and one for the
Linux kernel (2.4.17).  

The cryptoapi patch fixes a silly symbol name bug.  The
patch for the Linux kernel changes the default lo_iv_mode to
LO_IV_MODE_SECTOR--otherwise, the patch is just a straightforward port
of the patch in cryptoapi/doc in cryptoavi CVS.

I noticed that there doesn't seem to be a way to set lo_iv_mode from
user-space, not even with a module or kernel command-line parameter.
Is this just one of those features that isn't implemented yet, or did
I miss something?

The patches seem to work:  I can swap on an rc6 encrypted partition
using the patches, and I can create an ext2 filesystem on an rc6 loopback
file, copy some data to it, unmount, losetup -d, losetup -e, mount it
again, and _still access the data afterwards_.  Whee!

This still doesn't completely work for encrypted swap because somebody
(who shall remain nameless, but whose name rhymes with socks) seems to
have "lost" the kreclaimd kernel thread.  I thought I would try to get 
someone else to look at this before tackling that problem...


["p1" (text/plain)]

? tests/.deps
? tests/Makefile
? tests/Makefile.in
Index: api/cryptoloop.c
===================================================================
RCS file: /cvsroot/cryptoapi/cryptoapi/api/cryptoloop.c,v
retrieving revision 1.4
diff -u -r1.4 cryptoloop.c
--- api/cryptoloop.c	2001/12/14 23:38:49	1.4
+++ api/cryptoloop.c	2001/12/26 21:30:57
@@ -44,7 +44,7 @@
 # error you need at least kernel 2.4.3 -- unless you know exacty what you are doing
 #endif
 
-#if !defined(LOOP_IV_SECTOR_SIZE)
+#if !defined(LO_IV_SECTOR_SIZE)
 # error you need to to patch your loop.c driver
 #endif
 
@@ -85,10 +85,10 @@
   struct cipher_context *cx;
 
   /* encryption breaks for non sector aligned offsets */
-  if (info-&gt;lo_offset % LOOP_IV_SECTOR_SIZE) 
+  if (info-&gt;lo_offset % LO_IV_SECTOR_SIZE) 
     goto out;
 
-  lx-&gt;blocksize = LOOP_IV_SECTOR_SIZE;
+  lx-&gt;blocksize = LO_IV_SECTOR_SIZE;
   lx-&gt;debug = 0;
 
   strncpy(cipher, info-&gt;lo_name, LO_NAME_SIZE);
@@ -163,7 +163,7 @@
     out = raw_buf;
   }
 
-  IV /= blocksize / LOOP_IV_SECTOR_SIZE;
+  IV /= blocksize / LO_IV_SECTOR_SIZE;
 
 #if defined(CRYPTOLOOP_DEBUG)
   if (lx-&gt;debug)
@@ -203,7 +203,7 @@
   switch (cmd) {
   case CRYPTOLOOP_SET_BLKSIZE:
     printk (KERN_DEBUG "cryptoloop: switch to blocksize %d requested\n", *arg_int);
-    if (*arg_int &gt;= 0 &amp;&amp; (*arg_int % LOOP_IV_SECTOR_SIZE == 0))
+    if (*arg_int &gt;= 0 &amp;&amp; (*arg_int % LO_IV_SECTOR_SIZE == 0))
       {
         lx-&gt;blocksize = *arg_int;
         err = 0;

["p2" (text/plain)]

--- /home/zblaxell/linux/p3-laptop/kernel-source-2.4.17-zb-p3-laptop-zb2001122605/drivers/block/loop.c	Fri \
                Dec 21 12:41:53 2001
+++ drivers/block/loop.c	Wed Dec 26 13:59:05 2001
@@ -36,6 +36,9 @@
  * Al Viro too.
  * Jens Axboe &lt;axboe@suse.de&gt;, Nov 2000
  *
+ * Fixed and made IV calculation customizable by lo_iv_mode
+ * Herbert Valerio Riedel &lt;hvr@gnu.org&gt;, Apr 2001
+ *
  * Still To Fix:
  * - Advisory locking is ignored here. 
  * - Should use an own CAP_* category instead of CAP_SYS_ADMIN 
@@ -168,6 +171,43 @@
 					lo-&gt;lo_device);
 }
 
+static inline int loop_get_bs(struct loop_device *lo)
+{
+	int bs = 0;
+
+	if (blksize_size[MAJOR(lo-&gt;lo_device)])
+		bs = blksize_size[MAJOR(lo-&gt;lo_device)][MINOR(lo-&gt;lo_device)];
+	if (!bs)
+		bs = BLOCK_SIZE;	
+
+	return bs;
+}
+
+static inline unsigned long loop_get_iv(struct loop_device *lo,
+					unsigned long sector)
+{
+	unsigned long offset, IV;
+	int bs;
+
+	switch (lo-&gt;lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
+			IV = sector + (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS);
+			break;
+
+		default:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");
+		case LO_IV_MODE_DEFAULT:
+			bs = loop_get_bs(lo);
+			IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
+			offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
+			if (offset &gt;= bs)
+				IV++;
+			break;
+	}
+
+	return IV;
+}
+
 static int lo_send(struct loop_device *lo, struct buffer_head *bh, int bsize,
 		   loff_t pos)
 {
@@ -186,7 +226,7 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+                unsigned long IV = loop_get_iv(lo, (pos - lo-&gt;lo_offset) &gt;&gt; \
LO_IV_SECTOR_BITS);  int transfer_result;
 
 		size = PAGE_CACHE_SIZE - offset;
@@ -244,7 +284,10 @@
 	unsigned long count = desc-&gt;count;
 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
 	struct loop_device *lo = p-&gt;lo;
-	int IV = page-&gt;index * (PAGE_CACHE_SIZE/p-&gt;bsize) + offset/p-&gt;bsize;
+	unsigned long IV = loop_get_iv(lo,
+		((page-&gt;index &lt;&lt;  (PAGE_CACHE_SHIFT - LO_IV_SECTOR_BITS))
+		+ (offset &gt;&gt; LO_IV_SECTOR_BITS)
+		- (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS)));
 
 	if (size &gt; count)
 		size = count;
@@ -284,32 +327,6 @@
 	return desc.error;
 }
 
-static inline int loop_get_bs(struct loop_device *lo)
-{
-	int bs = 0;
-
-	if (blksize_size[MAJOR(lo-&gt;lo_device)])
-		bs = blksize_size[MAJOR(lo-&gt;lo_device)][MINOR(lo-&gt;lo_device)];
-	if (!bs)
-		bs = BLOCK_SIZE;	
-
-	return bs;
-}
-
-static inline unsigned long loop_get_iv(struct loop_device *lo,
-					unsigned long sector)
-{
-	int bs = loop_get_bs(lo);
-	unsigned long offset, IV;
-
-	IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
-	offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
-	if (offset &gt;= bs)
-		IV++;
-
-	return IV;
-}
-
 static int do_bh_filebacked(struct loop_device *lo, struct buffer_head *bh, int rw)
 {
 	loff_t pos;
@@ -677,6 +694,7 @@
 	lo-&gt;lo_backing_file = file;
 	lo-&gt;transfer = NULL;
 	lo-&gt;ioctl = NULL;
+	lo-&gt;lo_iv_mode = LO_IV_MODE_SECTOR;
 	figure_loop_size(lo);
 	lo-&gt;old_gfp_mask = inode-&gt;i_mapping-&gt;gfp_mask;
 	inode-&gt;i_mapping-&gt;gfp_mask = GFP_NOIO;


[Attachment #7 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011219105143</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-19 10:51:43-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Tue, 18 Dec 2001, Jerome Etienne wrote:

&gt; Hello,
&gt;
&gt; The text attached describes what i believe to be a security hole in
&gt; the encrypted loop device for linux. Because of it an
&gt; attacker is able to modify the content of the encrypted device
&gt; without being detected. This text proposes to fix the hole by
&gt; authenticating the device.
&gt;
&gt; comments are welcome
&gt;
&gt; ps: version in html, pdf and ps can be found in http://www.off.net/~jme
&gt;

Yes, this is a problem with loopback crypto. The problem is that the
loopback interface assume that it's length preserving, and that make
insertion of a MAC difficult. Calculating a MAC at mount/unmount will
except taking long time, also fail to differ between tampering and
a power failure. This may make the MAC useless in a security perspective.
Power failures is so much more common than attacks, that user will ignore
it when an attack comes. A cluster level MAC will not be length
preserving, and that will be a problem with loopback. Well, other with
more in depth knowledge of the block device part of the kernel should
comment on this. My proposal is that a secure file system is the right way
to go. In a file system, meta data like MACs is no problem, and features
like per-user encryption can be inserted.

A furter note:

An attacker can do the following. If byte i in disk block Ck is
modified, the the blocks from i and out is modified. if k = floor(i/8)
then C0 .. Cn is replaced by C0 .. Ck-1 | Dk .. Dn, where D express the
new cipher blocks. Reinserting Ck .. Cn can't be detected.

This will also work if you get a collision between CBC blocks, like
described earlier on this list. Then the data after the two cipher blocks
can be exchanged.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011226233011</emailId><senderName>"Harmon S. Nine"</senderName><senderEmail>hnine@netarx.com</senderEmail><timestampReceived>2001-12-26 23:30:11-0400</timestampReceived><subject>Problems trying to use cryptoapi-2.4.7.0 with 2.4.17 kernel</subject><body>

Hi all.

I'm having a problem trying to build cryptoapi-2.4.7.0 for the 2.4.17 
kernel.  It has something to do with the EXPORT_SYMBOL macro.  I'm using 
the Debian distribution on a 686 system.  Thought I'd see if anyone 
knows a quick fix before I go digging ...

Here's the output from the "make" command in the cryptoapi-2.4.7.0 
directory:

---- BEGIN OUTPUT ---
alice:/usr/src/cryptoapi-2.4.7.0# make
Making all in api
make[1]: Entering directory `/usr/src/cryptoapi-2.4.7.0/api'
gcc -I../include -D__KERNEL__ -DMODULE  
-I/usr/src/kernel-source-2.4.17/include -Wall -Wstrict-prototypes 
-Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common 
-pipe -mpreferred-stack-boundary=2 -march=i686  -DMODVERSIONS -include 
/usr/src/kernel-source-2.4.17/include/linux/modversions.h -o cryptoapi.o 
-c cryptoapi.c
cryptoapi.c:466: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: data definition has no type or storage class
cryptoapi.c:467: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: data definition has no type or storage class
cryptoapi.c:468: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: data definition has no type or storage class
cryptoapi.c:469: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: data definition has no type or storage class
cryptoapi.c:470: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: data definition has no type or storage class
cryptoapi.c:471: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: data definition has no type or storage class
cryptoapi.c:472: parse error before 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: type defaults to `int' in declaration of 
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: data definition has no type or storage class
make[1]: *** [cryptoapi.o] Error 1
make[1]: Leaving directory `/usr/src/cryptoapi-2.4.7.0/api'
make: *** [all-recursive] Error 1
alice:/usr/src/cryptoapi-2.4.7.0#
---- END OUTPUT ---

TIA

-- Harmon



-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011226223715</emailId><senderName>Zygo Blaxell</senderName><senderEmail>umsfalfb@umail.furryterror.org</senderEmail><timestampReceived>2001-12-26 22:37:15-0400</timestampReceived><subject>Crypto on root filesystem</subject><body>

I've been looking for a better solution for encrypted loopback root
filesystems.  The current strategy used by cryptoapi and loop-AES seems
to be:

	1.  Boot on an initrd

	2.  On the initrd, load crypto modules (unless already built in)

	3.  losetup -e ... /dev/loop0 /dev/hda1 

	4.  Swap roots, exit, let kernel exec /sbin/init

Unfortunately, this has one major problem:  it seems to be impossible
to get rid of the RAM disk afterwards, because the filesystem on the RAM
disk is in use (due to the /dev device inode used for losetup).
This means that whatever RAM is used for the RAM disk is lost forever.
Encrypted root is most useful on laptops, where RAM is scarce, expensive,
or both...so this plan sucks.

What I'd like to do is build all the crypto stuff into the kernel (which
is not new) as well as the equivalent of losetup and some mechanism for
stacking a loop device on top of a physical device that does not require
a /dev inode.  Additional support for salting the passphrase using some
handy nearby data would be nice, but not essential.

Has anyone done such a thing?  Does anyone intend to?


-- 
Zygo Blaxell (Laptop) &lt;zblaxell@feedme.hungrycats.org&gt;
GPG = D13D 6651 F446 9787 600B AD1E CCF3 6F93 2823 44AD

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011227171658</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@cybershamanix.com</senderEmail><timestampReceived>2001-12-27 17:16:58-0400</timestampReceived><subject>SUSE</subject><body>

  Seems like there was some discussion about SUSE before, but I deleted
it, I guess (and where are the archives anyhow?) but I've recently
become intrigued by SUSE, especially since finding out that they support
an encrypted file system on the install, and am probably going to make
it my next system, after many years of redhat and a bit of debian.
   Any comments on SUSE's cfs?

-- 
Harmon Seaver
CyberShamanix
http://www.cybershamanix.com
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011226230212</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-26 23:02:12-0400</timestampReceived><subject>Re: Crypto on root filesystem</subject><body>

On Wed, 2001-12-26 at 23:37, Zygo Blaxell wrote:
&gt; I've been looking for a better solution for encrypted loopback root
&gt; filesystems.  The current strategy used by cryptoapi and loop-AES seems
&gt; to be:
&gt; 
&gt; 	1.  Boot on an initrd
&gt; 
&gt; 	2.  On the initrd, load crypto modules (unless already built in)
&gt; 
&gt; 	3.  losetup -e ... /dev/loop0 /dev/hda1 
&gt; 
&gt; 	4.  Swap roots, exit, let kernel exec /sbin/init
&gt; 
&gt; Unfortunately, this has one major problem:  it seems to be impossible
&gt; to get rid of the RAM disk afterwards, because the filesystem on the RAM
&gt; disk is in use (due to the /dev device inode used for losetup).
&gt; This means that whatever RAM is used for the RAM disk is lost forever.

haven't tried myself, but at least with 2.4 kernels, there's the
pivot_root() system call, which should swap the root and making it
possible to unmount the ramdisk...

I'd recommend taking a look at redhat's mkinitrd package, which contains
'nash', some kind of self-contained mini-shell, which includes the few
necessary commads usually used on initrd's... and add support to it for
getting a passphrase (+ hash it) and other encryption paramters... 

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011227111909</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-12-27 11:19:09-0400</timestampReceived><subject>Re: Crypto on root filesystem</subject><body>

Zygo Blaxell wrote:
&gt; I've been looking for a better solution for encrypted loopback root
&gt; filesystems.  The current strategy used by cryptoapi and loop-AES seems
&gt; to be:
&gt; 
&gt;         1.  Boot on an initrd
&gt; 
&gt;         2.  On the initrd, load crypto modules (unless already built in)
&gt; 
&gt;         3.  losetup -e ... /dev/loop0 /dev/hda1
&gt; 
&gt;         4.  Swap roots, exit, let kernel exec /sbin/init
&gt; 
&gt; Unfortunately, this has one major problem:  it seems to be impossible
&gt; to get rid of the RAM disk afterwards, because the filesystem on the RAM
&gt; disk is in use (due to the /dev device inode used for losetup).
&gt; This means that whatever RAM is used for the RAM disk is lost forever.
&gt; Encrypted root is most useful on laptops, where RAM is scarce, expensive,
&gt; or both...so this plan sucks.

Have you looked at size of loop-AES' initrd.gz? It's only about 1.6 KB
compressed and 15 KB uncompressed. Initrd remains unmountable, but 15 KB of
unuseable kernel RAM not something to cry about, is it?

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011227185812</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-12-27 18:58:12-0400</timestampReceived><subject>Re: Crypto on root filesystem</subject><body>

"IT3 Stuart Blake Tener, USNR-R" wrote:
&gt; While having a 15k initrd.gz in memory doesn't bother me a bit, I was of
&gt; the understanding that there was a new way (root pivot, or chroot, I am by
&gt; no means an expert in that area) to effectively "pull the rug out from under
&gt; roots feet", and switch to a new root, thus displacing the olde one into
&gt; oblivion. Is this an accurate estimation of the technologies, which are now
&gt; existent with respect to this issue?

Loop-AES' build-initrd.sh supports both old change_root and new pivot_root
methods of changing to encrypted root. Reason why old initrd can't be
unmounted in both cases is that a device (the encrypted root) on it has been
losetup'ed and is busy until that device is un-losetup'ed.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011228184727</emailId><senderName>Zygo Blaxell</senderName><senderEmail>umsfalfb@umail.furryterror.org</senderEmail><timestampReceived>2001-12-28 18:47:27-0400</timestampReceived><subject>Re: Crypto on root filesystem</subject><body>

In article &lt;1009407732.13013.4.camel@janus.txd.hvrlab.org&gt;,
Herbert Valerio Riedel  &lt;hvr@hvrlab.org&gt; wrote:
&gt;haven't tried myself, but at least with 2.4 kernels, there's the
&gt;pivot_root() system call, which should swap the root and making it
&gt;possible to unmount the ramdisk...

When you do 'losetup ... /dev/loop /dev/bar' then mount something on
/dev/loop, you cannot umount the filesystem containing /dev/loop until
after you 'losetup -d /dev/loop'.  If /dev/loop is mounted as root,
you can't 'losetup -d /dev/loop' until after you're close to being
finished running the kernel.

Another problem with this initrd-can-do-everything theory is that in
practice the damn thing breaks on every second kernel release.  I've lost
count of how many times I've encountered fatal kernel oopses when trying
to initrd or pivot_root with a root RAMdisk that must be writable and
cannot be freed when /linuxrc exits.  A number of the 2.2.x kernels have
made it out the door with initrd and RAMdisk memory management support
sufficiently broken that the system crashes soon after boot, or can't
even losetup at all.  Strangely enough, initrd always works just well
enough for Red Hat to load their SCSI driver modules.  Hmmm...

Sometimes when I'm running my laptop on a battery, miles from home,
rebuilding my laptop's initrd with the help of a bootable rescue CD,
I wonder if I'm the only person on the planet who actually _uses_ this
crypto stuff.  :-/

&gt;I'd recommend taking a look at redhat's mkinitrd package, which contains
&gt;'nash', some kind of self-contained mini-shell, which includes the few
&gt;necessary commads usually used on initrd's... and add support to it for
&gt;getting a passphrase (+ hash it) and other encryption paramters...=20

Yes, the initrd can be made very small, but it still takes up 16K of RAM
plus the code to implement RAMdisk and minix fs, and the extra bootloader
configuration to load the RAMdisk, and some miscellaneous black magic
to find the losetup utility and its runtime dependencies.  It's more
of an administrative headache than a size headache on modern machines,
but the combined size of all of these components is still significant
for a boot floppy or an older laptop.

On the other hand, simply linking the important parts of losetup into
the kernel takes up less than one K, and there are space savings in
other places:  the kernel-space losetup code can share cryptoapi's digest
functions, initrd and minix FS can be dropped from the kernel image, and
the kernel-space losetup code can go in an __init section to be discarded
after use.  There are none of the administrative headaches associated
with extra cleartext partitions or initrd's (although your bootloader
might need to specify ciphers, keysizes, and physical devices on the
kernel command-line).

We already have direct kernel support for root on various common
non-physical-device cases including RAID, NFS, RAM disk, and separate
boot/root floppies with a prompt to change media between them.  These
are all common and useful cases where direct kernel support is justified.
I think root on cryptoloop support is a straightforward addition to those.

-- 
Zygo Blaxell (Laptop) &lt;zblaxell@feedme.hungrycats.org&gt;
GPG = D13D 6651 F446 9787 600B AD1E CCF3 6F93 2823 44AD
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011226233404</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-26 23:34:04-0400</timestampReceived><subject>Re: Problems trying to use cryptoapi-2.4.7.0 with 2.4.17 kernel</subject><body>

On Thu, 2001-12-27 at 00:30, Harmon S. Nine wrote:
&gt; Hi all.
&gt; 
&gt; I'm having a problem trying to build cryptoapi-2.4.7.0 for the 2.4.17 
&gt; kernel.  It has something to do with the EXPORT_SYMBOL macro.  I'm using 
&gt; the Debian distribution on a 686 system.  Thought I'd see if anyone 
&gt; knows a quick fix before I go digging ...
&gt; 
&gt; Here's the output from the "make" command in the cryptoapi-2.4.7.0 
&gt; directory:

quick fix:

change the gcc line at the beginning of Makefile.common.in to contain
-DEXPORT_SYMTAB ...


# $Id: Makefile.common.in,v 1.4 2001/10/19 17:52:59 hvr Exp $

# dynamic modules
$(KMODULES): %.o: %.c
        $(KCC) -I$(top_srcdir)/include -D__KERNEL__ -DMODULE -DEXPORT_SYMTAB \
$(KCPPFLAGS) $(KCFLAGS) -o $@ -c $&lt;

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142


[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011219112537</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-19 11:25:37-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, 19 Dec 2001, Gisle S{lensminde wrote:

&gt;
&gt; Yes, this is a problem with loopback crypto. The problem is that the
&gt; loopback interface assume that it's length preserving, and that make
&gt; insertion of a MAC difficult.

The problem can partially be solved in a length preseving way. Before
the data is encrypted a so called 'all or nothing transform' is applied
to the data. That is a length preseving function f(x) -&gt; y such that
modification to any block in y to y', will make f-1(y') be different
from x in all blocks. Ronald Rivest have made a paper on this.

Ronald Rivest himself propose one such mode based on a block cipher.
Another possible transform is to use DFFT (discrete fast Fourier transform
as f, and IDFFT (the inverse) as f-1. If E(k,v,P) encrypts a block with IV v,
and D(k,v,C) decrypts it, encryption is changed to  C = E(k,v,f(P)),
and decryption to P = f-1(D(k,v,C)). This transform will make it
hard to insert chosen ciphertexts, like  Jerome Etienne's paper describes.

It will not solve all problems. That is teoretically impossible
without adding redundancy.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219132142</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 13:21:42-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, Dec 19, 2001 at 09:28:09AM +0000, Andrew McGuinness wrote:
&gt; It seems to me the "cut/paste" attack won't work, as different disk blocks
&gt; are encrypted with different IV values - the IV is derived from the
&gt; block number - so the same ciphertext encrypts
&gt; to different plaintext if you move it to a different block.
&gt; 
&gt; Am I missing something here? 

the cut/paste is independant of the IV. you can read the 
bellovin paper (find the ref at the end of my text)
about it which give a longer explaination
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219132912</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 13:29:12-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, Dec 19, 2001 at 11:51:43AM +0100, Gisle S{lensminde wrote:
&gt; Yes, this is a problem with loopback crypto. The problem is that the
&gt; loopback interface assume that it's length preserving, 

can you explain the rationnal behind such assumption ?

&gt; and that make
&gt; insertion of a MAC difficult. Calculating a MAC at mount/unmount will
&gt; except taking long time, also fail to differ between tampering and
&gt; a power failure. This may make the MAC useless in a security perspective.

i disagree. as a user, i may know if my computer uncleanly umount 
a partition (e.g. i was in front of it when it crashed).
so when i reboot it, i know it was a unclean mount and not a attack.

&gt; Power failures is so much more common than attacks, that user will ignore
&gt; it when an attack comes. A cluster level MAC will not be length
&gt; preserving, and that will be a problem with loopback. Well, other with
&gt; more in depth knowledge of the block device part of the kernel should
&gt; comment on this. My proposal is that a secure file system is the right way
&gt; to go. In a file system, meta data like MACs is no problem, and features
&gt; like per-user encryption can be inserted.
&gt; 
&gt; A furter note:
&gt; 
&gt; An attacker can do the following. If byte i in disk block Ck is
&gt; modified, the the blocks from i and out is modified. if k = floor(i/8)
&gt; then C0 .. Cn is replaced by C0 .. Ck-1 | Dk .. Dn, where D express the
&gt; new cipher blocks. Reinserting Ck .. Cn can't be detected.
&gt; 
&gt; This will also work if you get a collision between CBC blocks, like
&gt; described earlier on this list. Then the data after the two cipher blocks
&gt; can be exchanged.

i dont understand your note
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219133244</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 13:32:44-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, Dec 19, 2001 at 12:25:37PM +0100, Gisle S{lensminde wrote:
&gt; It will not solve all problems. That is teoretically impossible
&gt; without adding redundancy.

we agree, that authentication is impossible without adding redundancy.
but i dont see why it is required to keep the same size

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219135942</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-19 13:59:42-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 19 December 2001 04:20, Jerome Etienne wrote:
&lt;snip&gt;
&gt; The text attached describes what i believe to be a security hole in
&gt; the encrypted loop device for linux. Because of it an
&gt; attacker is able to modify the content of the encrypted device
&gt; without being detected. This text proposes to fix the hole by
&gt; authenticating the device.
&lt;snip&gt;

IMO, this is nothing new. What you try to tell us is that encryption 
doesn't guarantee integrety. It doesn't, encryption provides only 
confidentiality. This is well-known and it's probably the first thing 
that's discussed in any cryptography textbook, chaper "modes of 
encryption". It's also well-known that CBC in the form used in kerneli, 
doesn't provide intergrety. No-one I know ever claimed that encrypted 
loop devices are immune to undetected alteration.

Given, nobody ever explicitly told the user, either.

I also strongly agree that having the encrypted filesystem MAC'ed would 
be a nice thing to have and you are the first (to my knowledge) to come 
forward with this idea.

But to call this a vulnerability is a bit far-featched, I think.

As a workaround, users could use GnuPG (or PGP if you want) to create a 
detached signature of the /dev/loop device after unmounting and to 
check this signature before mounting. If I'm not mistaken you can even 
leave the file lying around, since the MAC is then signed with your 
secret PGP key anyway.

Marc

- -- 
FTAA's anti-circumvention provisions represent US imperialism at its
worst. They seek to impose restrictive laws on both the US and other
countries, in order to prevent established US businesses from facing
both domestic and foreign competition.
              -- EFF FTAA Alert:
                 Stop Hollywood Forcing Technology Ban on 34 Countries
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8IJ1P3oWD+L2/6DgRAnh7AKCgdwx2xZZ33jdspBQJy4tCIZCHHACgy1R6
dvTWSGoxubwtuM0npIhaSo8=
=hPBO
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219140255</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 14:02:55-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, Dec 19, 2001 at 02:59:42PM +0100, Marc Mutz wrote:
&gt; But to call this a vulnerability is a bit far-featched, I think.

according to me, it is a vulnerabilty because user expects security
from it and in my opinion, an attacker being able to successfully
modify the device is a hole in the security.
 
&gt; As a workaround, users could use GnuPG (or PGP if you want) to create a 
&gt; detached signature of the /dev/loop device after unmounting and to 
&gt; check this signature before mounting. If I'm not mistaken you can even 
&gt; leave the file lying around, since the MAC is then signed with your 
&gt; secret PGP key anyway.

using PGP/GPG would be another way to authenticate the device, less 
self-contained but it will works.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219140905</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-19 14:09:05-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, 19 Dec 2001, Jerome Etienne wrote:

&gt; On Wed, Dec 19, 2001 at 11:51:43AM +0100, Gisle S{lensminde wrote:
&gt; &gt; Yes, this is a problem with loopback crypto. The problem is that the
&gt; &gt; loopback interface assume that it's length preserving,
&gt;
&gt; can you explain the rationnal behind such assumption ?

My impression about the loopback interface, is that it is supposed to
be a 1:1 mapping fom the raw disk to the loopback. The traditional
use of the loopback interface (without encryption) have been used for
such things as mounting cd images without burning it to a CD.
Filesystems and other usages of disk partition may assume things
about the underlaying media. It shoudn't but before I know that
I'm a bit skeptical to breaking the 1:1 relationship present in
the loopback interface. That's the reason for stating that I don't
know too much about the block device part of the kernel. I tried
to discuss potential problems. I Not having a block size divisible by
512 can make problems for many file systems, so the MAC should not
be stored at the end of each block anyway.

A block cluster approch would be preferable, since that don't require
scanning the disk on every mount/unmount. What about a block containing
a 128 bit HMAC-SHA1 of the preceding.

Anyway - I would prefere an encrypted filesystem rather than the loopback
device.

&gt; &gt; and that make
&gt; &gt; insertion of a MAC difficult. Calculating a MAC at mount/unmount will
&gt; &gt; except taking long time, also fail to differ between tampering and
&gt; &gt; a power failure. This may make the MAC useless in a security perspective.
&gt;
&gt; i disagree. as a user, i may know if my computer uncleanly umount
&gt; a partition (e.g. i was in front of it when it crashed).
&gt; so when i reboot it, i know it was a unclean mount and not a attack.

My experience is that users don't know this, and that it should be taken
into account when making cryptosystems.

&lt;note sniped&gt;
&gt; i dont understand your note
&gt;

Maybe not well explained but it means that a tail of the disk block
(the i last bytes, possibly the whole block) of a modified disk block can
be replaced by the ciphertext from before the modification, and unlike
your attack there will be no blocks of random garbage in this case.

I can try to expalin it better, but that will take some more time.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)



-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219141356</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-19 14:13:56-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

On Wed, 19 Dec 2001, Gisle S{lensminde wrote:


&gt; A block cluster approch would be preferable, since that don't require
&gt; scanning the disk on every mount/unmount. What about a block containing
&gt; a 128 bit HMAC-SHA1 of the preceding.

I should have written:

A block cluster approch would be preferable, since that don't require
scanning the disk on every mount/unmount. What about a block containing
a 128 bit HMAC-SHA1 of the preceding 31 blocks + itself.

Moral: Proofread befor you post.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219141842</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-19 14:18:42-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 19 December 2001 14:29, Jerome Etienne wrote:
&gt; On Wed, Dec 19, 2001 at 11:51:43AM +0100, Gisle S{lensminde wrote:
&gt; &gt; Yes, this is a problem with loopback crypto. The problem is that
&gt; &gt; the loopback interface assume that it's length preserving,
&gt;
&gt; can you explain the rationnal behind such assumption ?
&lt;snip&gt;

Loopback transforms are block transformations. They act upon the blocks 
of a block device. You cannot alter the size of blocks

Well, theoretically, you could make the input block size different from 
the output block size, but since both the HD's and the linux kernel 
have hard-coded (a minimum of) 512 byte blocks, you could only increase 
or decrease those sizes by an amount of at least 512 bytes. Worse: 
block sizes are assumed to be powers of 2 (except in special cases like 
audio CD's which aren't handled by the normal block device layers, 
AFAIK). So you can't go and take e.g. 32k clusters and append to each 
one a 512 byte block to hold the MAC.

Marc

- -- 
The road is still long. Thank you everybody. Thanks to all who make an
effort on behalf of democracy in China. They have come. Goodbye.
              -- last EMail of Huang Qi, webmaster of 6-4tianwang.com,
                 sentenced in China for posting Party-critical texts.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8IKHC3oWD+L2/6DgRAiRkAKDg48bAwRYjycpfdtZHh0xlL+czpgCgz3fp
TMyvDtepyZXp7sEJDONAmv0=
=CHPi
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011215111845</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-15 11:18:45-0400</timestampReceived><subject>Re: SEAL</subject><body>

On Thu, 13 Dec 2001 AnandDinakar@aol.com wrote:

&gt; Hi
&gt;
&gt; How secure is SEAL? It looks excellent for encrypting data with file hooks.
&gt; Especially since the keystream is independent of the plaintext
&gt; Am I right?

The fact that the keystream is plaintext independant is a problem. That
means that the ciphertext (ie the disk) can be trivially broken if the
same key is used for encrypting two or more blocks, or if the data is
modified, and an attacker can read the data before and after the change.
That means that a new key must be used for each block. That can be done by
concatenating  the key with an IV and redo the key schedule for each
block. You would also need to make a new IV for each time the block
is modified, e.g by having a modification counter for each block.
the SEAL key schedule is quite heavy. Stream ciphers is more suited for
encryption of truly sequential data like network connections. In fact
RC4 is used for most SSL sites.

&gt; Must I take permission before using it?

If you have plans using it in the US, you must ask IBM for permission,
since they have patented it. Also SEAL is several algorithms. You have
both SEAL 1.0, SEAL 2.0 and SEAL 3.0. I think 1.0 and 2.0 is broken.
Seal 3.0 is quite new, and as far as I know not broken.

&gt; Can anyone give me a link to some cryptanalysis info for SEAL?

Helena Handschuh and Henri Gilbert found an attack on SEAL 1.0 and 2.0.
Then IBM made SEAL 3.0. to fix the cipher. There was also a paper on
the Fast software encryption 2001 workshop, but I don't have the
procedings, so I don't know what that paper says.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213162917</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-12-13 16:29:17-0400</timestampReceived><subject>Re: crypto basics</subject><body>

Hi,

Quoting Damian Gerow (damian@sentex.net):
&lt;snip some&gt;
&gt; Does anyone have a link (or a document they can post on the web) that points 
&gt; to the basics of encryption?  
&lt;snip some more&gt;

Go out to your local Good Bookstore and buy 'Applied Cryptography'. I know
it's not an online text, but you won't regret it. The sci.crypt faq is quite
ok as well, and has lots of links and references.

&gt; And (what I'd really like to see) does anyone know of a complete rundown of 
&gt; all the ciphers that are available in the kernel?  The help was just enough 
&gt; to whet my appetite -- and I'm really curious to see why AES is ... not 
&gt; well liked.
Did you actually check out the AES candidate analisys document ? Apart from
that, all of the cyphers used in the kernel are open, well-documented, and a
*truckload* of information can be found about them using just google.
I suggest you try that one first, then ask here if you have any
linux-related questions/remarks about it :)

Greets,
	Robert

-- 
				Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
                		&lt;zarq&gt; wiggy, wat dacht je van 127.48.112.89
   &lt;Typh&gt; ### Process 0 (host  127.48.112.89) terminated with return code 69
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213165644</emailId><senderName>"Bolten, Dierk"</senderName><senderEmail>bolten@iwe.rwth-aachen.de</senderEmail><timestampReceived>2001-12-13 16:56:44-0400</timestampReceived><subject>Re: crypto basics</subject><body>

Quoting Damian Gerow (damian@sentex.net):
&lt;snip some&gt;
&gt; Does anyone have a link (or a document they can post on the web) that
points 
&gt; to the basics of encryption?  
&lt;snip some more&gt;

Hi!

Besides "Applied Cryptography", check out "The handbook of applied
cryptography" which can be found
completely online under http://www.cacr.math.uwaterloo.ca/hac/. Things like
ecb,cbc, block ciphers, hash functions, etc are explained in depth. A good
starting point is also the FAQ of RSA (found at
http://www.rsasecurity.com/rsalabs/faq/index.html).

Cheers,
Dierk


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213165653</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-12-13 16:56:53-0400</timestampReceived><subject>Re: crypto basics</subject><body>

Damian Gerow wrote:
&gt; 
&gt; ...  Does anyone have a link (or a document
&gt; they can post on the web) that points to the basics of encryption? ...

Try the FAQs tutorials listed in the FreeS/WAN (IPsec encrypted tunnels
for LInux) documentation:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/web.html#crypto.link

There's also a glossary with many links to other glossaries:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html 

and a bibliography:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/biblio.html

All these links point to 1.91 versions of docs, which are currently the
latest version on the web. FreeS/WAN is actually at 1.94, but there are
some web site admin problems so I don't know when up to date docs will
appear on the web.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213165904</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-13 16:59:04-0400</timestampReceived><subject>Re: crypto basics</subject><body>

On Thu, Dec 13, 2001 at 11:28:36AM -0500, Damian Gerow wrote:
&gt; After following the brief discussion this morning about Blowfish, Twofish, 
&gt; Serpent, and AES, I've realized that I don't know nearly what I had hoped I 
&gt; did when it came to encryption.  Does anyone have a link (or a document 
&gt; they can post on the web) that points to the basics of encryption?  And I 
&gt; don't mean like 'Encryption is when you take what you wrote (plaintext) and 
&gt; enrypt it so that nobody can read it (ciphertext).'  I'm looking for 
&gt; something a little more advanced -- that would explain block sizes, CBC, 
&gt; EBC, and their relative strengths and weaknesses.

you can look at  http://www.cacr.math.uwaterloo.ca/hac/. it is 
a serious book for free. it is very clear. it contains non basic stuff
but you may skip them in the first reading
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011214143247</emailId><senderName>Jeff Moyer</senderName><senderEmail>moyer@missioncriticallinux.com</senderEmail><timestampReceived>2001-12-14 14:32:47-0400</timestampReceived><subject>Re: crypto basics</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

==&gt; Regarding crypto basics; Damian Gerow &lt;damian@sentex.net&gt; adds:

damian&gt; After following the brief discussion this morning about Blowfish,
damian&gt; Twofish, Serpent, and AES, I've realized that I don't know nearly
damian&gt; what I had hoped I did when it came to encryption.  Does anyone
damian&gt; have a link (or a document they can post on the web) that points to
damian&gt; the basics of encryption?  And I don't mean like 'Encryption is

I've always found the FAQ's on usenet to be very comprehensive.  Try
looking for the sci.crypt FAQ on your favorite news server.

- -Jeff
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: Processed by Mailcrypt 3.5.6 and Gnu Privacy Guard &lt;http://www.gnupg.org/&gt;

iEYEARECAAYFAjwaDZQACgkQH/inyh944bRRUwCgsDZtWOKCtJGFbUPot9v3kpCh
eHIAn2A6ptGznH7nNQV0m0P6MafUsoJO
=jXbe
-----END PGP SIGNATURE-----
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213213104</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-12-13 21:31:04-0400</timestampReceived><subject>Re: aes again</subject><body>

Newsmail wrote:
&gt; well Marc you said I dont have to use AES256, but well even if I dun use it
&gt; I'M interested in the difference between the 128. simple question, more
&gt; easy to break 128 than 256?
&gt; I read at loop-aes readme that for keys over 20 caracters it uses aes192,
&gt; and over 40 caracters it uses 256. why is that?
&gt; greg

Just use AES128 encryption type, and loop-AES will use AES-128 cipher
regardless of passphrase length. Encryption type AES (without numbers) will
select cipher AES-128, AES-192 or AES-256 based on passphrase length.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213220135</emailId><senderName>Newsmail</senderName><senderEmail>newsmail@satimex.tvnet.hu</senderEmail><timestampReceived>2001-12-13 22:01:35-0400</timestampReceived><subject>Re: aes again</subject><body>

ok, I understand, but could you explain the difference maybe in speed or 
security between aes256 and aes128?
greg

&gt;Just use AES128 encryption type, and loop-AES will use AES-128 cipher
&gt;regardless of passphrase length. Encryption type AES (without numbers) will
&gt;select cipher AES-128, AES-192 or AES-256 based on passphrase length.
&gt;
&gt;Regards,
&gt;Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213152430</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-13 15:24:30-0400</timestampReceived><subject>Re: some other questions</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 13 December 2001 14:59, Newsmail wrote:
&gt; thx Marc, and Robert for your answers, could you tell me what the
&gt; block size means?

Block ciphers do encryption and decryption on blocks of bit (hence the 
name). blowfish operates on 64bit-blocks, All AES candidates operate on 
128bit blocks.

&gt; what is the difference between aes128 and aes256
&gt; for exemple, is it related to the 'deepness' of encryption?

Here, 128/256 is the key length. You won't need 256, stay with 128.

&gt; btw I have more than 3 gig to encrypt, if I encrypt than I encrypt
&gt; everything :), so blowfish doesnt support more than 3 gigs lets say,

Well, blowfish happily encrypts arbitary volumes of data, but you have 
to limit the amount of data encrypted under a single key becuase else 
you can make it easier for attackers.

Consider partitioning your data in 2G chunks. Then encrypt each 
partition with another key. Voila - you're done.

&gt; so Marc you recommend Serpent?
&lt;snip&gt;

As well as any other of the ones I mentioned.

&gt; ps: if I want to use patch-int-2.4.16.2, do I have to install the hrv
&gt; or jari loop pacthes or these are included in 2.4.16.2?
&lt;snip&gt;

Dunno. Check the archives for announcements.

Marc

- -- 
"Similia similibus currentur"
           -- Bush's new motto in fighting terrorism.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8GMgu3oWD+L2/6DgRAltbAJwJslLvNLcNdOtViZsSfnsr7eTPUwCfQ2e8
8oVqlcLMswqd+2ZR2ZoXk4s=
=jewb
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213123603</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-12-13 12:36:03-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

Hi,

Quoting Newsmail (newsmail@satimex.tvnet.hu):
&gt; hello everybody, I'm quite new in encryption, but I want to encrypt some 
&gt; complete partitions on my pc. actually I see many cipher types I can use, 
&gt; but I dont know which one to choose. I heard that 3des is very slow, cpu 
&gt; intensive cipher. well this is the more I know about them. somebody could 
&gt; help me which cipher to choose, which is the faster, what about their 
&gt; caracterisiques, or at least give me an url where I can find description of 
&gt; them?
Most of the cyphers supported are AES candidates, the other cyphers are
proven/wellknown/'older' ones. The AES candidates are pretty well analysed,
and this analysis is documented (i don't recall where the documents reside,
i only have a paper version here). Rijndael 'won' the AES run; this means it
was decided to be a good cypher for general use. The analysis document is
more specific on the usage of the various cyphers for various tasks.
You should make your decision based on performance, strength and
proven-ness; as long as you keep the rule 'encrypt it strong enough to make
the cost of decrypting more expensive than the data itself' in mind you'll
be fine :) (ofcourse keeping future technological advances in the back of
your head).

Greets,
	Robert

-- 
			      Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
		All extremists should be taken out and shot.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213130920</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-13 13:09:20-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 13 December 2001 12:56, Newsmail wrote:
&gt; hello everybody, I'm quite new in encryption, but I want to encrypt
&gt; some complete partitions on my pc. actually I see many cipher types I
&gt; can use, but I dont know which one to choose. I heard that 3des is
&gt; very slow, cpu intensive cipher.
&lt;snip&gt;

The question boils down to twofish, blowfish, serpent and aes.

blowfish is fast and has quite a long track record. I'd use it if it 
wasn't for the 64bit blocksize. In fact, I do use it ;-)
The blocksize isn't an issue if you enrypt only modest volumes of data 
under a single key (like you should!) Several hundred MB are OK. But 
don't go beyond 2 or 3 GB.

serpent is quite fast (but more because the implementation is fast and 
the others aren't) and considered very secure. It's a 128bit block 
cipher so you don't need to think about upper limits on data encrypted 
under a single key.

twofish is not quite as fast, but deemed trustworthy and secure by 
experts in the field. It's also 128bit. Bruce Schneier fans would use 
this (or blowfish).

I don't know much about the speed of aes, but obviously it's the 
standard cipher nowadays and chosen by NIST although it isn't a US 
product ;-) So either it has some design flaws that NSA knows about and 
the rest of the world doesn't or it is so secure that even NSA didn't 
find a hole ;-)  Anyway, I'd be careful with this one, but mostly 
because I don't know anything about the quality of the implementation.

As I said earlier, I've used blowfish all over and it never failed me...
But beware of the size limitations.

Marc

- -- 
If privacy is outlawed, only outlaws will have privacy.
                                                    -- Phil Zimmermann
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8GKiA3oWD+L2/6DgRAhTFAJ9+N6tAHsYgrVO8G6rLlCpOA7h+LACePxtf
NUgMJ5l/ClVaV7NskJXFJ0Q=
=RLDz
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213141416</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-13 14:14:16-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

&gt; blowfish is fast and has quite a long track record. I'd use it if it 
&gt; wasn't for the 64bit blocksize. In fact, I do use it ;-)
&gt; The blocksize isn't an issue if you enrypt only modest volumes of data 
&gt; under a single key (like you should!) Several hundred MB are OK. But 
&gt; don't go beyond 2 or 3 GB.

what are the detail of the problem with blowfish beyond 2 or 3GB ?
 
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213151918</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-13 15:19:18-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 13 December 2001 15:14, Jerome Etienne wrote:
&gt; &gt; blowfish is fast and has quite a long track record. I'd use it if
&gt; &gt; it wasn't for the 64bit blocksize. In fact, I do use it ;-)
&gt; &gt; The blocksize isn't an issue if you enrypt only modest volumes of
&gt; &gt; data under a single key (like you should!) Several hundred MB are
&gt; &gt; OK. But don't go beyond 2 or 3 GB.
&gt;
&gt; what are the detail of the problem with blowfish beyond 2 or 3GB ?

Birthday attack. Equal ciphertexts are being generated. Actually, the 
boundary is 32G, but it's best to stay away from it.

Marc

- -- 
History teaches that grave threats to liberty often come in times of
urgency, when constitutional rights seem too extravagant to endure.
                                  -- Justice Thurgood Marshall, 1989
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8GMb23oWD+L2/6DgRAiQ7AJ9uZGuGOJdH3+EwMnxlSBdEFmj2PQCfTE2L
HrkVcY6sOQL+sICsV1IiWfo=
=vOOk
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213160206</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-13 16:02:06-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, Dec 13, 2001 at 04:19:18PM +0100, Marc Mutz wrote:
&gt; &gt; &gt; blowfish is fast and has quite a long track record. I'd use it if
&gt; &gt; &gt; it wasn't for the 64bit blocksize. In fact, I do use it ;-)
&gt; &gt; &gt; The blocksize isn't an issue if you enrypt only modest volumes of
&gt; &gt; &gt; data under a single key (like you should!) Several hundred MB are
&gt; &gt; &gt; OK. But don't go beyond 2 or 3 GB.
&gt; &gt;
&gt; &gt; what are the detail of the problem with blowfish beyond 2 or 3GB ?
&gt; 
&gt; Birthday attack. Equal ciphertexts are being generated. Actually, the 
&gt; boundary is 32G, but it's best to stay away from it.

suppose you are the attacker and get data encrypted with a block cipher,
two or more cipher texts block are equal, which information did get 
from it ?
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213161148</emailId><senderName>Pascal Junod</senderName><senderEmail>pascal.junod@epfl.ch</senderEmail><timestampReceived>2001-12-13 16:11:48-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, 13 Dec 2001, Jerome Etienne wrote:

&gt; suppose you are the attacker and get data encrypted with a block cipher,
&gt; two or more cipher texts block are equal, which information did get
&gt; from it ?


If the encryption mode is ECB, you know that both plaintexts are equal.
If the encryption mode is CBC, you know some information about the XOR of
two plaintexts.

There exists similar attacks for OFB and CFB, which retrieve some
(Shannon) information.

A+

Pascal

-- 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Pascal Junod, pascal.junod@epfl.ch                                 *
* Security and Cryptography Laboratory (LASEC)                       *
* INF 240, EPFL, CH-1015 Lausanne, Switzerland  ++41 (0)21 693 76 17 *
* Mont√©tan 13, CH-1004 Lausanne                 ++41 (0)79 617 28 57 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213162932</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-13 16:29:32-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 13 December 2001 17:02, Jerome Etienne wrote:
&lt;snip&gt;
&gt; suppose you are the attacker and get data encrypted with a block
&gt; cipher, two or more cipher texts block are equal, which information
&gt; did get from it ?
&lt;snip&gt;

Cryptography isn't compatible with common sense. Read a good book about 
it, then come back. Sorry.

Marc

- -- 
Eternal vigilance is the price of liberty   -- Thomas Jefferson
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8GNds3oWD+L2/6DgRAvK/AJ9ZnPqb1uzdtr8t71NEt48U++Ii2gCgn4qj
spxh9xHsE/QJLCRSyx7x+tk=
=VwBQ
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213163207</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-13 16:32:07-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, Dec 13, 2001 at 05:11:48PM +0100, Pascal Junod wrote:
&gt; On Thu, 13 Dec 2001, Jerome Etienne wrote:
&gt; 
&gt; &gt; suppose you are the attacker and get data encrypted with a block cipher,
&gt; &gt; two or more cipher texts block are equal, which information did get
&gt; &gt; from it ?
&gt; 
&gt; 
&gt; If the encryption mode is ECB, you know that both plaintexts are equal.
&gt; If the encryption mode is CBC, you know some information about the XOR of
&gt; two plaintexts.

thanks.
just to check i get it... according to my understanding, cbc encryption
is Cn = Enc( Cn-1 xor Pn ) and C'n = Enc( C'n-1 xor P'n ).
if Cn == C'n, the attacker knows that Cn-1 xor Pn == C'n-1 xor Pn-1
and  Pn xor P'n == Cn xor Cn-1. As Cn-1 and C'n-1 are known,
he knows exactly the value of Pn xor P'n.

is it correct ? do you have any reference where i could learn more 
about it ?
 
&gt; There exists similar attacks for OFB and CFB, which retrieve some
&gt; (Shannon) information.
&gt; 
&gt; A+
&gt; 
&gt; Pascal
&gt; 
&gt; -- 
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&gt; * Pascal Junod, pascal.junod@epfl.ch                                 *
&gt; * Security and Cryptography Laboratory (LASEC)                       *
&gt; * INF 240, EPFL, CH-1015 Lausanne, Switzerland  ++41 (0)21 693 76 17 *
&gt; * Mont√©tan 13, CH-1004 Lausanne                 ++41 (0)79 617 28 57 *
&gt; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&gt; 
&gt; -
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213164312</emailId><senderName>Pascal Junod</senderName><senderEmail>pascal.junod@epfl.ch</senderEmail><timestampReceived>2001-12-13 16:43:12-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, 13 Dec 2001, Jerome Etienne wrote:

&gt; is it correct ? do you have any reference where i could learn more
&gt; about it ?

Yes, it is correct.

The history of this attack is quite strange: it was known for a long
time by a few crypto people (you can find a reference in Lars Knudsen's
PhD thesis, written in 1994, for instance), but until quite recently, it
was not known in a larger public. Now, everybody seems to know about it
:-)

See for instance http://lasecwww.epfl.ch/birthday.shtml for some details
about its implementation.

A+

Pascal

-- 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Pascal Junod, pascal.junod@epfl.ch                                 *
* Security and Cryptography Laboratory (LASEC)                       *
* INF 240, EPFL, CH-1015 Lausanne, Switzerland  ++41 (0)21 693 76 17 *
* Mont√©tan 13, CH-1004 Lausanne                 ++41 (0)79 617 28 57 *
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213165057</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-12-13 16:50:57-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

Jerome Etienne wrote:
&gt; 
&gt; &gt; blowfish is fast and has quite a long track record. I'd use it if it
&gt; &gt; wasn't for the 64bit blocksize. In fact, I do use it ;-)
&gt; &gt; The blocksize isn't an issue if you enrypt only modest volumes of data
&gt; &gt; under a single key (like you should!) Several hundred MB are OK. But
&gt; &gt; don't go beyond 2 or 3 GB.
&gt; 
&gt; what are the detail of the problem with blowfish beyond 2 or 3GB ?

For any cipher, an attacker gets some information whenever two ciphertext
blocks are the same. You want to keep the probability of this low, so you
need to change keys often enough to do that.

A rule of thumb for how often is 2 to the (blocksize/2) blocks. With a
64-bit blocksize (Blowfish, 3DES, CAST, IDEA, ...), keep it well under
2^32 blocks (32 gigs of text). Keeping it under 2 or 3 gigs is more
conservative, likely a good idea.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213165253</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-13 16:52:53-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, Dec 13, 2001 at 05:29:32PM +0100, Marc Mutz wrote:
&gt; Cryptography isn't compatible with common sense. Read a good book about 
&gt; it, then come back. Sorry.

you wrote in another email

&gt; Birthday attack. Equal ciphertexts are being generated. Actually, the
&gt; boundary is 32G, but it's best to stay away from it.

you mean books like handbook of applied cryptography[1] which 
explains that birthday attack doesnt have any boundary to
32Gbyte (square root of the space, 2^64 for blowfish).
It is probabilistic and can occur with as few as two cipher
text block (even it is less likely).
The usual example 'if you have sqrt(n) block of n bit containing
random value, the probability to have 2 blocks equal is 0.5' is an 
oversimplication to ease understanding. 

sincerely sorry to play this loosy game...

1. available for free at http://www.cacr.math.uwaterloo.ca/hac/
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011205130744</emailId><senderName></senderName><senderEmail>stephen.thompson</senderEmail><timestampReceived>2001-12-05 13:07:44-0400</timestampReceived><subject>RE: CryptoAPI problems</subject><body>

I find that formatting it twice works.

-----Original Message-----
From: Gabor Gludovatz [mailto:ggabor@sopron.hu]
Sent: 28 November 2001 09:41
To: linux-crypto@nl.linux.org
Subject: CryptoAPI problems


Hi,

I'm having problems with using CryptoAPI. Here are the commands I used:

roadrunner:/mnt# dd if=/dev/zero of=x bs=1M count=25
25+0 records in
25+0 records out
roadrunner:/mnt# losetup -e blowfish /dev/loop0 /mnt/x
Available keysizes (bits): 128 160 192 256
Keysize: 256
Password :
roadrunner:/mnt# losetup /dev/loop0
/dev/loop0: [0301]:185852 (blowfish-cbc) offset 0, undefined encryption
roadrunner:/mnt# mke2fs /dev/loop0
[...] (seems to be okay)
roadrunner:/mnt# mount /dev/loop0 /mnt/tmp0
EXT2-fs error (device loop(7,0)): ext2_check_descriptors: Block bitmap for
group 0 not in group (block 1085197902)!
EXT2-fs: group descriptors corrupted!
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems
roadrunner:/mnt#

Any idea?


-- 
 Gabor Gludovatz &lt;ggabor@sopron.hu&gt; http://www.sopron.hu/~ggabor/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


-------------------------------------------------------------------------------------------


Copyright material and/or confidential and/or privileged information may be contained \
in this e-mail and any attached documents.  The material and information is intended \
for the use of the intended addressee only.  If you are not the intended addressee, \
or the person responsible for delivering it to the intended addressee, you may not \
copy, disclose, distribute, disseminate or deliver it to anyone else or use it in any \
unauthorised manner or take or omit to take any action in reliance on it. To do so is \
prohibited and may be unlawful.   The views expressed in this e-mail may not be \
official policy but the personal views of the originator.  If you receive this e-mail \
in error, please advise the sender immediately by using the reply facility in your \
e-mail software, or contact postmaster@bmwfin.com.  Please also delete this e-mail \
and all documents attached immediately.   Many thanks for your co-operation.

BMW Financial Services (GB) Limited is registered in England and Wales under company \
number 01288537. Registered Offices : Europa House, Bartley Way, Hook, Hants, RG27 \
                9UF
------------------------------------------------------------------------------------------
                
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011205131559</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-05 13:15:59-0400</timestampReceived><subject>RE: CryptoAPI problems</subject><body>

On Wed, 2001-12-05 at 14:07, Stephen.Thompson@bmwfin.com wrote:
&gt; I find that formatting it twice works.

the reason of which btw has to do with soft blocksize;
(which get's changed when you mount it the first time, and then stays
that way when re-mkfs'ing...)

I highly recommend to switch to 512byte IV calculation (which will
become the default for the int. patch) in order to avoid such problems..

regards,
--=20
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011204153155</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-12-04 15:31:55-0400</timestampReceived><subject>Re: [Fwd: RFC(ry): breaking loop.c's IV calculation]</subject><body>

Minor problem with the patch. Since it matches on SUBLEVEL, it fails
against 2.4.16 whereas it actually could have succeeded otherwise.
This is of course easy to fix by hand, but it made my kernel building
script fall right over in confusion :-)

Makefile.rej:

***************
*** 1,7 ****
  VERSION = 2
  PATCHLEVEL = 4
  SUBLEVEL = 15
- EXTRAVERSION =-greased-turkey
  
  KERNELRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
  
--- 1,7 ----
  VERSION = 2
  PATCHLEVEL = 4
  SUBLEVEL = 15
+ EXTRAVERSION =-crypto-greased-turkey
  
  KERNELRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
  
-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011204164133</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-04 16:41:33-0400</timestampReceived><subject>ANNOUNCE: (BETA!) international kernel patch for 2.4.16 available!</subject><body>


*WARNING* this is meant for the brave ones (read beta-testers ;), which
want to do some tests, and hopefully report back any problems they
encounter!

I assume everyone interested already knows what the international patch
is for; and if not then maybe it's better to wait for the final version
of this patch which will get a more informative announcement... :-)

if you head over to {ftp,www}.kernel.org in
/pub/linux/kernel/people/hvr/testing/

you'll find 

*) patch-int-2.4.16.0.{bz2,gz}

a patch that contains:
- the cryptographic kernel API layer
- cryptographic ciphers (aes, twofish, mars, rc6, serpent, dfc,
  blowfish, idea, rc5, 3des, des)
- digest algorithms (md5, sha1)
- cryptographic loop filter module ('cryptoloop')

this patch needs _one_ of the following two patches to be applied in
order to make use of (i.e. compile) the cryptoloop module...

*) loop-jari-2.4.16.0.patch

jari's loop patch (slightly modified +++) featuring:

- IV computed in 512 byte units.
- Make device backed loop work with swap by pre-allocating pages.
- External encryption module locking bug fixed (from Ingo Rohloff).
- Get rid of the loop_get_bs() crap.
- grab_cache_page() return value handled properly, avoids Oops.
- No more illegal messing with BH_Dirty flag.
- No more illegal sleeping in generic_make_request().
- Loops can be set-up properly when root partition is still mounted ro.
- Default soft block size is set properly for file backed loops.
- kmalloc() error case handled properly.

+++ added 2 #defines and 1 typedef to loop.h for cryptoloop.c

*) loop-hvr-2.4.16.0.patch

my patch, with only the following functional improvement:

- IV computed in 512 byte units.


...

ps: the reason for kerneli.org being down or the lack of development of
the int. patch is NOT caused by any government intervention...

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011205131844</emailId><senderName></senderName><senderEmail>stephen.thompson</senderEmail><timestampReceived>2001-12-05 13:18:44-0400</timestampReceived><subject>RE: CryptoAPI problems</subject><body>

Interesting.. Thanks for the info.

Regards,

Stephen.


-----Original Message-----
From: Herbert Valerio Riedel [mailto:hvr@hvrlab.org]
Sent: 05 December 2001 13:16
To: Stephen.Thompson@bmwfin.com
Cc: linux-crypto@nl.linux.org
Subject: RE: CryptoAPI problems


On Wed, 2001-12-05 at 14:07, Stephen.Thompson@bmwfin.com wrote:
&gt; I find that formatting it twice works.

the reason of which btw has to do with soft blocksize;
(which get's changed when you mount it the first time, and then stays
that way when re-mkfs'ing...)

I highly recommend to switch to 512byte IV calculation (which will
become the default for the int. patch) in order to avoid such problems..

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142


-------------------------------------------------------------------------------------------


Copyright material and/or confidential and/or privileged information may be contained \
in this e-mail and any attached documents.  The material and information is intended \
for the use of the intended addressee only.  If you are not the intended addressee, \
or the person responsible for delivering it to the intended addressee, you may not \
copy, disclose, distribute, disseminate or deliver it to anyone else or use it in any \
unauthorised manner or take or omit to take any action in reliance on it. To do so is \
prohibited and may be unlawful.   The views expressed in this e-mail may not be \
official policy but the personal views of the originator.  If you receive this e-mail \
in error, please advise the sender immediately by using the reply facility in your \
e-mail software, or contact postmaster@bmwfin.com.  Please also delete this e-mail \
and all documents attached immediately.   Many thanks for your co-operation.

BMW Financial Services (GB) Limited is registered in England and Wales under company \
number 01288537. Registered Offices : Europa House, Bartley Way, Hook, Hants, RG27 \
                9UF
------------------------------------------------------------------------------------------
                
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011206161733</emailId><senderName>Norbert Sendetzky</senderName><senderEmail>norbert@linuxnetworks.de</senderEmail><timestampReceived>2001-12-06 16:17:33-0400</timestampReceived><subject>Crypto API doc</subject><body>

Hi all

Is there documentation about the linux crypto api available?
If so, where can I find it.


Norbert
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011208171159</emailId><senderName>"Michael Zhu"</senderName><senderEmail>mylinuxk@yahoo.ca</senderEmail><timestampReceived>2001-12-08 17:11:59-0400</timestampReceived><subject>About loop device</subject><body>

Hello,everyone, where can I find some information about how to write a =
loop device driver? What is the principal of the loop device. I am not =
very clear about this. I want to do some operations to the data of the =
floppy disk. When read from the floppy disk I decrypt the data. When =
write to the floppy disk I encrypt the data.  I just don't know how to =
implement this.  I need a loop device? What is the main function of the =
loop deivce?

Thank you very much. I really appreciate your help.

Michael

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=gb2312" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.3315.2870" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hello,everyone, where can I find some information 
about how to write a loop device driver? What is the principal of the loop 
device. I am not very clear about this. I want to do some operations to the data 
of the floppy disk. When read from the floppy disk I decrypt the data. When 
write to the floppy disk I encrypt the data.¬† I just don't know how to 
implement this.¬† I need a loop device? What is the main function of the 
loop deivce?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Thank you very much. I really appreciate your 
help.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Michael&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;

_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011208222149</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-12-08 22:21:49-0400</timestampReceived><subject>Re: About the crypto patch</subject><body>

On Sat, Dec 08, 2001 at 12:15:33PM -0800, Michael Zhu wrote:
&gt; Hi, I download a International Kernel Patch from \
&gt; http://www.kernel.org/pub/linux/kernel/crypto/v2.4/ . But how can I open it. The \
&gt; patch file is "patch-int-2.4.0.1.gz". After I open it using the WinZip, there is \
&gt; only a patch-int-2.4.0.1 file. I couldn't open it. What is wrong? 

What I think is wrong is that you have a very, very great deal of
learning to do. 

A linux kernel patch is just a text file, a diff between
the source tree of a standard linux kernel and a kernel modified
for crypto.

I would suggest that you first:

	* Install linux on a computer
	* Learn how to build your own kernel from source
	* Learn how to use the patch and diff utilities
	* Come back and talk to us in about 6 months after
	  you understand the basics.

I can sympathize with the enormous learning curve you
face, but there is very little I or anyone else on this
list could do for you until you've learned a bit more.

Hint number one: a Linux operating system source patch is 
of absolutely no use at all on a Windows operating system.

Go forth and study.

-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011210015034</emailId><senderName>"Michael Zhu"</senderName><senderEmail>apiggyjj@yahoo.ca</senderEmail><timestampReceived>2001-12-10 01:50:34-0400</timestampReceived><subject>About Stackable File System Interface For Linux</subject><body>

Hello, everyone, I have a question about stackable file system interface =
for linux.

I want to implement a encryption file system on a floppy disk, say =
/dev/fd0, in Linux. I mean I just want to secure the data on the floppy =
disk.  This encryption file system can hook all the access to the floppy =
disk. But in my wrapfs I don't know how to identify whether the =
read/write operations is from/to the floppy disk. I mean how can I =
combine the wrapfs driver with the floppy disk device so that I can do =
some en/decryption to the data on the floppy disk. Can I identify this =
by the "dentry" or "inode" structure?

In fact I think I just need to implement a simple hook driver rather =
than a whole file system. But this hook driver is layered with the file =
system.

Thanks in advance. Any help or advice will be appreciated.

Michael

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=gb2312" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.3315.2870" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hello, everyone, I have a question about stackable 
file system interface for linux.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;I want to implement a encryption file system on a 
floppy disk, say /dev/fd0, in Linux. I mean I just want to secure the data on 
the floppy disk.¬† This encryption file system can hook all the access to 
the floppy disk. But in my wrapfs I don't know how to identify whether the 
read/write operations is from/to the floppy disk. I mean how can I combine the 
wrapfs driver with the floppy disk device so that I can do some en/decryption to 
the data on the floppy disk. Can I identify this by the "dentry" or "inode" 
structure?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;In fact I think I just need to implement a simple 
hook driver rather than a whole file system. But this hook driver is layered 
with the file system.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;Thanks in advance. Any help or advice will be appreciated.&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;Michael&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;

_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011211103658</emailId><senderName></senderName><senderEmail>ananddinakar</senderEmail><timestampReceived>2001-12-11 10:36:58-0400</timestampReceived><subject>swap encryption</subject><body>

Hi,
I have a patch for mm/page_io.c::rw_page_base(..) that encrypts swap i/o.

It works fine, BUT I couldnt keep the i/o async.

Can anyone please tell me at how to encrypt swap keeping i/o async?
thanx - anand
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213025042</emailId><senderName>Gong Zeng</senderName><senderEmail>gong_zeng@yahoo.com</senderEmail><timestampReceived>2001-12-13 02:50:42-0400</timestampReceived><subject>Problem compiling util0linux (with crypto) under Debian 2.2r4 (potato)</subject><body>

Hi,
I am compiling the crypto options into kernel under Debian 2.2r4 (potato) ( 
I followed the instructions in the HOWTO).  The kernel part was a breeze 
but when I tried to compile util-linux, I ran into compilation errors:

cc -c -O -pipe -O2 -m486 -fomit-frame-pointer -I../lib
-Wall -Wmissing-prototypes -Wstrict-prototypes -DNCH=1
  -DSBINDIR=\"/sbin\" -DUSRSBINDIR=\"/usr/sbin\"
-DLOGDIR=\"/var/log\" -DVARPATH=\"/var\"
-DLOCALEDIR=\"/usr/share/locale\" -DHAVE_NFS lomount.c
lomount.c:50: `LO_CRYPT_SERPENT' undeclared here (not
in a function)
lomount.c:50: initializer element is not constant
lomount.c:50: (near initialization for
`crypt_type_tbl[7].id')
lomount.c:51: `LO_CRYPT_MARS' undeclared here (not in
a function)
lomount.c:51: initializer element is not constant
lomount.c:51: (near initialization for
`crypt_type_tbl[8].id')
lomount.c:52: `LO_CRYPT_RC6' undeclared here (not in a
function)
lomount.c:52: initializer element is not constant
lomount.c:52: (near initialization for
`crypt_type_tbl[9].id')
lomount.c:53: `LO_CRYPT_DES_EDE3' undeclared here (not
in a function)
lomount.c:53: initializer element is not constant
lomount.c:53: (near initialization for
`crypt_type_tbl[10].id')
lomount.c:54: `LO_CRYPT_DFC' undeclared here (not in a
function)
lomount.c:54: initializer element is not constant
lomount.c:54: (near initialization for
`crypt_type_tbl[11].id')
lomount.c: In function `set_loop':
lomount.c:292: `LO_CRYPT_SERPENT' undeclared (first
use in this function)
lomount.c:292: (Each undeclared identifier is reported
only once
lomount.c:292: for each function it appears in.)
lomount.c:293: `LO_CRYPT_MARS' undeclared (first use
in this function)
lomount.c:294: `LO_CRYPT_RC6' undeclared (first use in
this function)
lomount.c:295: `LO_CRYPT_DES_EDE3' undeclared (first
use in this function)
lomount.c:296: `LO_CRYPT_DFC' undeclared (first use in
this function)
make[1]: *** [lomount.o] Error 1
make[1]: Leaving directory
`/usr/src/util-linux-2.10s/mount'
make: *** [all] Error 1

I had done this before (in SuSE 6.4) without a hitch
using exactly the same kernel and util-linux version.
I am sure I am missing some files.  But what files?

I am using kernel 2.2.18, patch-int-2.2.18.3 and
util-linux-2.10s.  All of them downloaded from ftp.kernel.org.

Thanks in advance for any advice.

GZ

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213034914</emailId><senderName>"Michael Zhu"</senderName><senderEmail>apiggyjj@yahoo.ca</senderEmail><timestampReceived>2001-12-13 03:49:14-0400</timestampReceived><subject>Communication between two modules</subject><body>

Hello,everyone, I have some questions about Linux file system and block =
device.

First, you know for the block device there is a blk_dev table which is =
indexed by the major number of the block device. The register_blkdev() =
function is used to insert a new entry into this blk_dev table. How can =
I access to this table in my kernel module? The reason why I want to =
access to this table is I want to access some specific Block Device =
Driver Descriptor so that I can access to the request queue of that =
block device, such as floppy disk device. This table is a global =
variable?

Second, whether two kernel modules can communicate with each other or =
not? For example, can my own kernel module communicate with the floppy =
block device? And how? I want to intercept the read/write operations to =
the floppy block device. I mean I want to hook all the read/write =
operations to the floppy block device in my kernel module.

Third, I know that the kernel statically allocates a fixed number of =
request descriptors to handle all the requests for block devices. There =
are NR_REQUEST descriptors (usually 128) stored in the all_requests =
array (This is from the book "Understanding the Linux Kernel" by Daniel =
P. Bovet&amp;Marco Cesati. P403). How can I access this all_requests array? =
I need to access the request descriptor of the floppy disk device.

Last one, about the ll_rw_block() function.  How can I intercept this =
function in my kernel module? Can I get the function pointer of this =
function in my module?

Any idea will be appreciated.

Michael

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=gb2312" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.3315.2870" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Hello,everyone, I have some questions about Linux 
file system and block device.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;First, you know for the block device there is a 
blk_dev table which is indexed by the major number of the block device. The 
register_blkdev() function is used to insert a new entry into this blk_dev 
table. How can I access to this table in my kernel module? The reason why I want 
to access to this table is I want to access some specific Block Device Driver 
Descriptor so that I can access to the request queue of that block device, such 
as floppy disk device. This table is a global variable?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Second, whether two kernel modules can communicate 
with each other or not? For example, can my own kernel module communicate with 
the floppy block device? And how? I want to intercept the read/write operations 
to the floppy block device. I mean I want to hook all the read/write operations 
to the floppy block device in my kernel module.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Third, I know that the kernel statically allocates 
a fixed number of request descriptors to handle all the requests for block 
devices. There are NR_REQUEST descriptors (usually 128) stored in the 
all_requests array (This is from the book "Understanding the Linux Kernel" by 
Daniel P. Bovet&amp;Marco Cesati. P403). How can I access this all_requests 
array? I need to access the request descriptor of the floppy disk 
device.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Last one, about the ll_rw_block() function.¬† 
How can I intercept this function in my kernel module? Can I get the function 
pointer of this function in my module?&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Any idea will be appreciated.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial 
size=2&gt;Michael&lt;/FONT&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;

_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011213102615</emailId><senderName></senderName><senderEmail>ragnagock</senderEmail><timestampReceived>2001-12-13 10:26:15-0400</timestampReceived><subject>Re: CryptoAPI 2.4.7.0</subject><body>

This is a MIME encapsulated multipart message -
please use a MIME-compliant e-mail program to open it.

Dies ist eine mehrteilige Nachricht im MIME-Format -
bitte verwenden Sie zum Lesen ein MIME-konformes Mailprogramm.


I solved the problem.

I used the 2.4.9 Kernel which only compiled with SMP. That's why
the CryptoAPI function calls had endings like _Rsmp_2346a53.
So depmod didn't find them (dunno why).
Kernel 2.4.10 compiles without SMP -&gt; no problems with depmod.

&gt; please use the following patches for the meantime;
&gt; 
&gt; http://ftp.kernel.org/pub/linux/kernel/people/hvr/testing/
&gt; 
&gt; as to your insmod problem; seems to be a modversions problem...
&gt; 
&gt; On Fri, 2001-12-07 at 14:53, ragnagock@gmx.de wrote:
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; I' trying to get the modules version running but it doesn't work.
&gt; &gt; 
&gt; &gt; When compiling I get the warning (api/cryptoloop.c):
&gt; &gt;   LO_CRYPT_CRYPTOAPI not (yet) defined in kernel header.
&gt; &gt; Do I have to worry because I forgot sth.?
&gt; &gt; 
&gt; &gt; The bigger problem is: depmod doesn't like the modules (unresolved
&gt; &gt; depenencies).
&gt; &gt; The function names have endings with numbers and 4 character codes.
&gt; &gt; 
&gt; &gt; btw: I'm working on an initrd to decrypt "/", "/boot" and all others
before
&gt; &gt; init is called to have a completely encrypted harddisk.
&gt; &gt; Now I just need a working CryptoAPI (and loopback...).
&gt; &gt; 
&gt; &gt; Regards, Dirk
&gt; &gt; 
&gt; &gt; -- 
&gt; &gt; GMX - Die Kommunikationsplattform im Internet.
&gt; &gt; http://www.gmx.net
&gt; &gt; 
&gt; &gt; -
&gt; &gt; Linux-crypto:  cryptography in and on the Linux system
&gt; &gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; -- 
&gt; Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
&gt; Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
&gt; GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
&gt; 4142
&gt; 

-- 
GMX - Die Kommunikationsplattform im Internet.
http://www.gmx.net
[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011213170518</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-12-13 17:05:18-0400</timestampReceived><subject>Re: a question about ciphers</subject><body>

On Thu, 13 Dec 2001, Pascal Junod wrote:
&gt; &gt; two or more cipher texts block are equal, which information did get
&gt; &gt; from it ?
&gt; 
&gt; If the encryption mode is ECB, you know that both plaintexts are equal.
&gt; If the encryption mode is CBC, you know some information about the XOR of
&gt; two plaintexts.

Note that this is not inherently a disaster; it merely supplies some help
to a good cryptanalyst.

Nor does it suddenly start happening at a particular size of data.  As the
size grows, it merely becomes increasingly likely that such equal cipher
blocks will show up.  For a 64-bit block, the chance of at least one
repetition goes to certainty only at 2^64+1 blocks, but is near certainty
long before that, because of the classical "birthday paradox".  But
there's no point along the way where it suddenly increases, no "boundary"
where a previously-good cipher suddenly becomes disastrously vulnerable. 

Limiting 64-bit ciphers to total ciphertexts of a few gigabytes is a wise
general precaution, but it is not an ironclad necessity.  The reduction in
cipher strength from going, say, a factor of ten beyond that is small. 

                                                          Henry Spencer
                                                       henry@spsystems.net

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011213173859</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-13 17:38:59-0400</timestampReceived><subject>Re: some other questions</subject><body>

On Thu, 2001-12-13 at 14:59, Newsmail wrote:
&gt; ps: if I want to use patch-int-2.4.16.2, do I have to install the hrv or 
&gt; jari loop pacthes
either one or the other; if you try to apply both you'll get patch
errors...

btw, you don't actually need to patch the loop driver if you don't need
the loop cryptographic filter (cryptoloop) -- and yes, there's sense
using the the patch-int without the cryptoloop ;-) -- but if you need
it, you'll have to patch, otherwise compilation of cryptoloop.c will
fail...

&gt; or these are included in 2.4.16.2?
no, I've decided to keep them separate from the patch-int itself, in
order to let the user decide which patch he want's to use, and also to
have the part more likely to patch-failures separated, as it modifies
the kernel's loop.[ch] sources, which are subject to change...

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011213180820</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-13 18:08:20-0400</timestampReceived><subject>Re: DES_EDE3</subject><body>

hello,

On Thu, 2001-12-13 at 13:56, Pierre PEIFFER wrote:
&gt;     I just have a short question: is DES3 crypto still working/supported
&gt; ?

it should... as it is needed for the IPSEC and NFSv4 projects which make
use of the crypto api...

&gt;     aes and twofish (for example) works fine....
&gt; 
&gt;     I use the latest patch with 2.4.16 kernel (patch-int-2.4.16.2),
&gt; latest patch of util-linux...
&gt; 
&gt;     But with des3, I have the (classical) error:
&gt; 
&gt; [root@]# losetup -e des-ede3 /dev/loop0 initrd.img
plase try 'des_ede3'; if you look at /proc/crypto/ciphers/ that's the
name it registers itself with... thanks for noting this, the loadable
module name, should have used an underscore as well... will be fixed for
the next release;

&gt; Pierre
&gt; 
&gt; Note: for loop patch (hvr and jari), what are the differences between
&gt; the both patch ? And which one do you recommand to use ?
well, jari's patch adresses various issues, and is supposed to have
undergone quite some testing by being a vital part of the loop-AES
package; (see the last patch-int announcement)

my patch is quite minimalistic, I've rewritten it to only address the IV
calculation and some cosmetic stuff; it still needs testing against
non-simple setups

both patches should lead to the same on disc format in combination with
the cryptoloop... if they don't then it's a bug...

btw, it should also be possible to use loop-AES and cryptoloop at the
same time; it's just a matter of adding 3 lines (2 #defines and 1
typedef to the loop.h header, after having been patched by loop-AES)
that way you should be able to convert your volumes from patch-int
encrypted volumes to loop-AES volumes and the other way round...
(as long as both use 512byte IV's ... if they don't you'll have to use
one or two additional steps... but you should definitely get rid of
non-512 byte IV's... as it becomes harder with every release to keep
support for it..)

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011213222413</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-13 22:24:13-0400</timestampReceived><subject>Re: aes again</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 13 December 2001 23:01, Newsmail wrote:
&gt; ok, I understand, but could you explain the difference maybe in speed
&gt; or security between aes256 and aes128?
&lt;snip&gt;

Well, aes256's key is 2x as long as aes128's. There are some minor 
changes in the way the cipher is calculated, IIRC, but that's not going 
to increase or decreases security.

Just the key is 2x as long, which means that a brute-force attack is 
even more unlikely to succeed (even with 128 bits and the billionfold 
computing power of all processors on earth it will take you the 
multiple age of the universe to search a 128 bits keyspace). And don't 
come up with the old argument about processors getting faster all the 
time. Search for 12GHz in this list's archive to see that there are 
physics limits to the upper computing power of the universe and a 
256bit key is well over which can safely deemed possible in the next 
hundred years.

Note, however that you'd had to type a 200 character (english text) 
passphrase to actually use this keyspace. For 128bit keys you already 
have to type in a 100 char english, 32 char random hexadecimal or 22 
random base64-chars passphrase. And I mean random in the sense of 
/dev/random, not as in "ape and keyboard"...

&gt; &gt;Just use AES128 encryption type, and loop-AES will use AES-128

ACK.

Marc

- -- 
The DMCA is unconstitutional, but they don't care. Until it's ruled
unconstitutional, they've won. If they can scare software companies,
ISPs, programmers, and T-shirt manufacturers [...] into submission,
they've won for another day. The entertainment industry is fighting a
holding action, and fear, uncertainty, and doubt are their weapons. We
need to win this, and we need to win it quickly. Every day we don't
win is a loss.                 -- Bruce Schneier, Crypto-Gram Aug 2001
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8GSqN3oWD+L2/6DgRAoWlAJ9ttaXqejGE0jVFeuunfe7/3ZMiUwCg9b3E
qY0Fug3oJPCzKu+1mD9nP+U=
=KY8e
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011214175615</emailId><senderName>David Bryson</senderName><senderEmail>dbryson@du.edu</senderEmail><timestampReceived>2001-12-14 17:56:15-0400</timestampReceived><subject>Re: crypto basics</subject><body>

I've found several books to be more than helpful and incredibly
interesting regarding crypology and the history of:

Applied Cryptography by Bruce Schenier - a classic, and must read

The Code Book by Simon Singh(sp?) - great info for an overview of the
history of crypto, and explanations of some algorithms

The Codebreakers by David Kahn - the original book on the history of
crypto(traditional crypto), i'm about 200 pages into it and it's
awesome, it explains ciphers very well

Crypto by Stephen Levy - the history of modern crypto, basically the
last 30 years, more in depth than the code book on recent crypto, very
little technical info, but still good

I forget where i got this link, but it was from a friend, it has a lot
of crypto examples, tutorials, and especiall source code: 
http://crypto.radiusnet.net/archive/

Hope that helps, if nothing else the history books will give you a
better understanding of crypto through it's evolution over the
centuries.
Dave


On Thu, 2001-12-13 at 09:28, Damian Gerow wrote:
&gt; After following the brief discussion this morning about Blowfish,
Twofish, 
&gt; Serpent, and AES, I've realized that I don't know nearly what I had
hoped I 
&gt; did when it came to encryption.  Does anyone have a link (or a document 
&gt; they can post on the web) that points to the basics of encryption?  And
I 
&gt; don't mean like 'Encryption is when you take what you wrote (plaintext)
and 
&gt; enrypt it so that nobody can read it (ciphertext).'  I'm looking for 
&gt; something a little more advanced -- that would explain block sizes, CBC, 
&gt; EBC, and their relative strengths and weaknesses.
&gt; 
&gt; And (what I'd really like to see) does anyone know of a complete rundown
of 
&gt; all the ciphers that are available in the kernel?  The help was just
enough 
&gt; to whet my appetite -- and I'm really curious to see why AES is ... not 
&gt; well liked.
&gt; 
&gt; -
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; 

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011216172512</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-12-16 17:25:12-0400</timestampReceived><subject>Re: SEAL</subject><body>

On Sat, 15 Dec 2001, Gisle S{lensminde wrote:

&gt; On Thu, 13 Dec 2001 AnandDinakar@aol.com wrote:
&gt;
&gt; The fact that the keystream is plaintext independant is a problem. That
&gt; means that the ciphertext (ie the disk) can be trivially broken if the
&gt; same key is used for encrypting two or more blocks, or if the data is
&gt; modified, and an attacker can read the data before and after the change.

This above unprecise. The problem with stream ciphers like SEAL that adds
a keystream to a sequence, is that they are trivially broken if two or
more plaintexts are encrypted with the same keystream. Basic cryptology
knowledge in other words.

--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011216214538</emailId><senderName>Newsmail</senderName><senderEmail>newsmail@satimex.tvnet.hu</senderEmail><timestampReceived>2001-12-16 21:45:38-0400</timestampReceived><subject>questions about cipher speeds ---&gt;</subject><body>

well I read this about cipher speeds in that
http://crypto.radiusnet.net/archive/aes/aes-performance.pdf review, 
concerning Twofish:
Twhofish is the fastest AES candidate on Pentium (and other 32 bit cpus) 
and second faster on Pentium Por/Pentium II.  Its key setup is about 
average, however for applications where key setup is a large factor in 
encryption speed (for small amount of text) there are alternate 
implementations of twofish that trade of encryption speed for key setup speed.
well, as I saw in that review, they made benchmarks about key setup speeds. 
is there somebody who could tell me what is key setup actually? so if we 
talk about my 10-20 gigs of HD to be encrypted, do I have to be concerned 
about key setup speed? or when do I have to be concerned? what is key setup 
exactly? :D
greg,
thx in advance

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011217000727</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-12-17 00:07:27-0400</timestampReceived><subject>Re: questions about cipher speeds ---&gt; http://crypto.radiusnet.net/archive/aes/aes-performance.pdf</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday 16 December 2001 22:45, Newsmail wrote:
&lt;snip&gt;
&gt; is there somebody who could tell
&gt; me what is key setup actually?

http://www.counterpane.com/twofish.html

&gt; so if we talk about my 10-20 gigs of
&gt; HD to be encrypted, do I have to be concerned about key setup speed?

No.

&gt; or when do I have to be concerned?

Never, as along as you're doing file encryption.

&gt; what is key setup exactly? :D
&lt;snip&gt;

See above URL.

Marc

- -- 
It has become fashionable in the post Cold War world to label
opponents as terrorists [...]. By doing so, the authorities instill
within society a culture of fear, leading people to accept that their
rights (and the rights of others) be trampled on for the sake of the
common good. In other words, it justifies the loss of privacy and a
state of surveillance they would otherwise not accept. Both communism
and fascism were examples of this technique used to perfection.
                  -- John Horvath: The Internet: A Terrorist Network?
                     Telepolis 2001/08/22 (#9350)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE8HTc/3oWD+L2/6DgRAmPyAKDv0X8mBsKUDzPtvqDue5JUMSke+QCcDmkQ
Z6hK8qru2bFu0tWjaIhCfl4=
=0VJq
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011219142517</emailId><senderName>Jerome Etienne</senderName><senderEmail>jme@off.net</senderEmail><timestampReceived>2001-12-19 14:25:17-0400</timestampReceived><subject>Re: Vulnerability in encrypted loop device for Linux</subject><body>

i forgot to send this reply to the list...

On Wed, Dec 19, 2001 at 03:09:05PM +0100, Gisle S{lensminde wrote:
&gt; My impression about the loopback interface, is that it is supposed to
&gt; be a 1:1 mapping fom the raw disk to the loopback. The traditional
&gt; use of the loopback interface (without encryption) have been used for
&gt; such things as mounting cd images without burning it to a CD.
&gt; Filesystems and other usages of disk partition may assume things
&gt; about the underlaying media. It shoudn't but before I know that
&gt; I'm a bit skeptical to breaking the 1:1 relationship present in
&gt; the loopback interface. That's the reason for stating that I don't
&gt; know too much about the block device part of the kernel. I tried
&gt; to discuss potential problems. I Not having a block size divisible by
&gt; 512 can make problems for many file systems, so the MAC should not
&gt; be stored at the end of each block anyway.
&gt; 
&gt; A block cluster approch would be preferable, since that don't require
&gt; scanning the disk on every mount/unmount. What about a block containing
&gt; a 128 bit HMAC-SHA1 of the preceding.

It is the choice of the implementors to decide where to put the 
authentication result.

&gt; &gt; i disagree. as a user, i may know if my computer uncleanly umount
&gt; &gt; a partition (e.g. i was in front of it when it crashed).
&gt; &gt; so when i reboot it, i know it was a unclean mount and not a attack.
&gt; 
&gt; My experience is that users don't know this, and that it should be taken
&gt; into account when making cryptosystems.

my experience is different. even window users are aware that a computer
crash require to fsck it on reboot because they see it (scandisk/chkdsk)
on the screen while rebooting (here i take an example of window users 
because they are on average less knowledgeable than unix ones, not 
because of any religion war)
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011222171831</emailId><senderName>Pascal Schuppli</senderName><senderEmail>pschuppli@phar.ch</senderEmail><timestampReceived>2001-12-22 17:18:31-0400</timestampReceived><subject>Kernel Oops on accessing looped CD-RW</subject><body>

Hi everyone 

I'm using a vanilla-2.4.14 kernel, patched with the sgi 2.4.14-xfs
patch, then patched with the 2.4.10 crypto-api patch. Things work great
as long as I stay on my hard drives. I create an aes-encrypted
ext2-container, it works fine no matter where I move it to. Then I burn
it to CD-RW. I losetup and mount the CD, and it still works. Then I try
to access a file (using ee), and get the following: 

kernel: Unable to handle kernel NULL pointer dereference at virtual
address 00000000 
kernel:  printing eip: 
kernel: c01b9fbe 
kernel: *pde = 00000000 
kernel: Oops: 0000 
kernel: CPU:    0 
kernel: EIP:    0010:[cdrom_pc_intr+462/464]    Not tainted 
kernel: EFLAGS: 00010202 
kernel: eax: cff2e200   ebx: 00000034   ecx: 0000000d   edx: 0000000d 
kernel: esi: 00000000   edi: c02e9718   ebp: c02e9600   esp: c873fcd8 
kernel: ds: 0018   es: 0018   ss: 0018 
kernel: Process ee (pid: 840, stackpage=c873f000) 
kernel: Stack: 00000800 00000004 cff2e200 00000059 00000202 cff2e200
00000000 00000000 
kernel:        0000000d 00000000 c02e9718 c02e9200 00000000 00000400
00000000 c02e9000 
kernel:        c01ba1e7 cff2e200 00000800 cff2e200 cff34370 c142d560
cff34320 00000000 
Call Trace: [cdrom_write_intr+119/624]
[intel_i830_insert_entries+48/160] [direct_check_left+4/32]
[sys_gettimeofday+79/160] [dentry_open+184/400] 
kernel:    [get_chrfops+209/224] [ext2_make_empty+199/272]
[load_inode_bitmap+267/480] [chrdev_open+26/80] [get_empty_filp+83/256]
[write_unlocked_buffers+4/64] 
kernel:    [swap_out+176/1152] [unmap_fixup+101/304]
[ext2_new_inode+331/1312] [load_inode_bitmap+156/480]
[unmap_fixup+261/304] [build_mmap_rb+36/96] 
kernel:    [invalidate_inode_pages+27/144] [truncate_list_pages+293/352]
[truncate_list_pages+92/352] [sys_ftruncate+14/336] [do_signal+451/668] 
kernel: Code: f3 a5 f6 c3 02 74 02 66 a5 f6 c3 01 74 01 a4 0f b7 90 92
00 

The stack trace looks to me as if it's file system stuff, not crypto,
that goes wrong, and in fact this also happens when I use an unencrypted
container, but it must have something to do with the loop device. Has
anyone had similar problems when working with CD's? I browsed through
the mailing list archives and didn't find anything.

BTW, is there a loop device mailing list? I am aware that this mailing
list is concerned with crypto loop, and I guess my problem is only
partially related to it (though I don't know yet whether this also
happens with the vanilla-kernel loop device - will recompile without
crypto patch applied and see if it still oops' as soon as I find some
time)

I'd be grateful for any pointers.

Pascal 

-- 
Two men walked into a bar. The third one ducked.

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011225140635</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-12-25 14:06:35-0400</timestampReceived><subject>Announce loop-AES-v1.5b file/swap crypto package</subject><body>

Changes since previous release:
- Added second util-linux patch from Michael K. Johnson that adds -O option
  to mount and umount programs.
- Added build-initrd.sh enhancements from Hauke Johannknecht.
- Fixed ancient loop.c off-by-one bug in offset computation (2.2 and 2.0
  kernels only).
- loop.c-2.4.original updated with fixes from 2.4.17.
- Added optimized assembler implementation of AES cipher for Pentium or
  better x86 processors.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.5b.tar.bz2
    md5sum 811aa2edb2ecd9fbce8f4ceb77d18336

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.5b.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011226225438</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-12-26 22:54:38-0400</timestampReceived><subject>Re: Cryptoapi on 2.4.17 (2 patches)</subject><body>

hello!

On Wed, 2001-12-26 at 23:03, Zygo Blaxell wrote:
&gt; I have two patches, one for cryptoAPI (current CVS) and one for the
&gt; Linux kernel (2.4.17).  
first of all, thanks for getting involved! :-)
 
&gt; The cryptoapi patch fixes a silly symbol name bug.  The
well, that's due to the WIP state of the CVS... I was in the midst of
back-porting the development I did for the new int. patches at
http://www.kernel.org/pub/linux/kernel/people/hvr/testing/
when this time-consuming christmas event started becoming unignorable...
C;-)
 
&gt; patch for the Linux kernel changes the default lo_iv_mode to
&gt; LO_IV_MODE_SECTOR--otherwise, the patch is just a straightforward port
&gt; of the patch in cryptoapi/doc in cryptoavi CVS.

 
&gt; I noticed that there doesn't seem to be a way to set lo_iv_mode from
&gt; user-space, not even with a module or kernel command-line parameter.
&gt; Is this just one of those features that isn't implemented yet, or did
&gt; I miss something?
the 'unimplemented'-choice applies;
but there's more... I'm glad you picked up the issue again, since it was
again starting to fall into oblivion... :-/

there are two different approaches, the first one I tried, was the one
seen in the cryptoapi-packaging, i.e. backward compatible; un-aware
loop-filters would get the old (broken) iv metric, while aware filters
could aktivate the 512-byte metric...
this approach was deemed an ugly 'toothpaste-back-to-tube' approach, but
it tried not to break old filters...
a few weeks ago, I retried to bring the issue on, in order to get the
patches somehow included into the mainstream-kernel; all parties agreed
that we could as well break the old iv-mode, and just default to the
better 'new' one... that way old filters may break the on-disk format,
but they will automatically become iv-safe; and if one really cares, you
can calculate the old iv from the new iv (just see the new int.patch and
cryptoloop_cfg below...)... BUT... as of now (2.4.17), the kernel still
uses the old IV scheme... it seems I'm not very good at being annoying
enough in order to get patches into the kernel... ;-)

well, if you take a look at the above mentioned testing-directory,
you'll find a cryptoloop_cfg.c which is some kind of user-space tool for
controlling the iv metric somewhat... it's more or less a hack, which
only works (if at all) when used in conjunction with the loop-hvr patch
(and the latest patch-int in that directory) the tool's provided for
converting your old non-512-iv metric encrypted volumes to more flexible
'atomar-sector-sized'-iv encrypted ones by doing something like
(untested --&gt; make backups before trying it at home... or keep both
pieces...)

# losetup -e ...  /dev/loop0 /dev/blockdev
# cryptoloop_cfg /dev/loop0 --set-blksize 0
    if you happen to know the previously used iv size, then use that one
    instead of '0' which uses the transfer chunks' size as iv size...
    also verify /dev/loop0 contains a properly decrypted content!
    mounting it would be a good idea, because the soft blocksize is set
    by the filesystem code -- this is needed when using '0' as
    --set-blksize arg!!!...]
# losetup -e ... /dev/loop1 /dev/blockdev
    that's for the new encrypted data, you can use the chance to change
    encryption parameters as well... i.e. another cipher or
    passphrase...
    and now for the important step: (make sure the filesystem isn't
    mounted anymore)
# dd if=/dev/loop0 of=/dev/loop1
    this will take some time... it will decrypt the data per /dev/loop0
    and encrypt it through /dev/loop1 back to /dev/blockdev
    on-the-fly... (you could use also different /dev/blockdev's if you
    don't trust this procedure...)
# losetup -d /dev/loop0
    unloop /dev/loop0...
    ...now you should have completed the conversion... /dev/loop1 should
    contain your unencrypted data... and /dev/blockdev the new encrypted
    view of it...

&gt; The patches seem to work:  I can swap on an rc6 encrypted partition
&gt; using the patches, and I can create an ext2 filesystem on an rc6 loopback
&gt; file, copy some data to it, unmount, losetup -d, losetup -e, mount it
&gt; again, and _still access the data afterwards_.  Whee!
...well, if it wasn't so, you'd have implemented some kind of data
shredder... *g*

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011227153509</emailId><senderName>"Harmon S. Nine"</senderName><senderEmail>hnine@netarx.com</senderEmail><timestampReceived>2001-12-27 15:35:09-0400</timestampReceived><subject>Re: Problems trying to use cryptoapi-2.4.7.0 with 2.4.17 kernel</subject><body>

This works :-)

One minor detail.  The "depmod" and "modprobe" steps seem only to work 
when the "cryptoapi" directory is
placed under "/lib/modules/&lt;kernel-version&gt;/kernel", at least for 2.4.17 
and the like.

Also, the "modprobe" step (or "insmod", if the modules are installed 
manually) complains loudly that the
module will "taint" the kernel because it has "no license":

root:/# modprobe cryptoloop
Warning: loading /lib/modules/2.4.17-686/kernel/cryptoapi/cryptoloop.o 
will taint the kernel: no license

What is this about?


All ciphers (except des, which is deprecated anyway) appear to be 
working! :-)
Thanks for the extra security!

Cheers.
-- Harmon


Herbert Valerio Riedel wrote:

&gt; On Thu, 2001-12-27 at 00:30, Harmon S. Nine wrote:
&gt; 
&gt; &gt; Hi all.
&gt; &gt; 
&gt; &gt; I'm having a problem trying to build cryptoapi-2.4.7.0 for the 2.4.17 
&gt; &gt; kernel.  It has something to do with the EXPORT_SYMBOL macro.  I'm using 
&gt; &gt; the Debian distribution on a 686 system.  Thought I'd see if anyone 
&gt; &gt; knows a quick fix before I go digging ...
&gt; &gt; 
&gt; &gt; Here's the output from the "make" command in the cryptoapi-2.4.7.0 
&gt; &gt; directory:
&gt; &gt; 
&gt; 
&gt; quick fix:
&gt; 
&gt; change the gcc line at the beginning of Makefile.common.in to contain
&gt; -DEXPORT_SYMTAB ...
&gt; 
&gt; 
&gt; # $Id: Makefile.common.in,v 1.4 2001/10/19 17:52:59 hvr Exp $
&gt; 
&gt; # dynamic modules
&gt; $(KMODULES): %.o: %.c
&gt; $(KCC) -I$(top_srcdir)/include -D__KERNEL__ -DMODULE -DEXPORT_SYMTAB $(KCPPFLAGS) \
&gt; $(KCFLAGS) -o $@ -c $&lt; 
&gt; regards,
&gt; 



-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>200112281847270</emailId><senderName>Zygo Blaxell</senderName><senderEmail>umsfalfb@umail.furryterror.org</senderEmail><timestampReceived>2001-12-28 18:47:27-0400</timestampReceived><subject>Re: Crypto on root filesystem</subject><body>

In article &lt;1009407732.13013.4.camel@janus.txd.hvrlab.org&gt;,
Herbert Valerio Riedel  &lt;hvr@hvrlab.org&gt; wrote:
&gt;haven't tried myself, but at least with 2.4 kernels, there's the
&gt;pivot_root() system call, which should swap the root and making it
&gt;possible to unmount the ramdisk...

When you do 'losetup ... /dev/loop /dev/bar' then mount something on
/dev/loop, you cannot umount the filesystem containing /dev/loop until
after you 'losetup -d /dev/loop'.  If /dev/loop is mounted as root,
you can't 'losetup -d /dev/loop' until after you're close to being
finished running the kernel.

Another problem with this initrd-can-do-everything theory is that in
practice the damn thing breaks on every second kernel release.  I've lost
count of how many times I've encountered fatal kernel oopses when trying
to initrd or pivot_root with a root RAMdisk that must be writable and
cannot be freed when /linuxrc exits.  A number of the 2.2.x kernels have
made it out the door with initrd and RAMdisk memory management support
sufficiently broken that the system crashes soon after boot, or can't
even losetup at all.  Strangely enough, initrd always works just well
enough for Red Hat to load their SCSI driver modules.  Hmmm...

Sometimes when I'm running my laptop on a battery, miles from home,
rebuilding my laptop's initrd with the help of a bootable rescue CD,
I wonder if I'm the only person on the planet who actually _uses_ this
crypto stuff.  :-/

&gt;I'd recommend taking a look at redhat's mkinitrd package, which contains
&gt;'nash', some kind of self-contained mini-shell, which includes the few
&gt;necessary commads usually used on initrd's... and add support to it for
&gt;getting a passphrase (+ hash it) and other encryption paramters...=20

Yes, the initrd can be made very small, but it still takes up 16K of RAM
plus the code to implement RAMdisk and minix fs, and the extra bootloader
configuration to load the RAMdisk, and some miscellaneous black magic
to find the losetup utility and its runtime dependencies.  It's more
of an administrative headache than a size headache on modern machines,
but the combined size of all of these components is still significant
for a boot floppy or an older laptop.

On the other hand, simply linking the important parts of losetup into
the kernel takes up less than one K, and there are space savings in
other places:  the kernel-space losetup code can share cryptoapi's digest
functions, initrd and minix FS can be dropped from the kernel image, and
the kernel-space losetup code can go in an __init section to be discarded
after use.  There are none of the administrative headaches associated
with extra cleartext partitions or initrd's (although your bootloader
might need to specify ciphers, keysizes, and physical devices on the
kernel command-line).

We already have direct kernel support for root on various common
non-physical-device cases including RAID, NFS, RAM disk, and separate
boot/root floppies with a prompt to change media between them.  These
are all common and useful cases where direct kernel support is justified.
I think root on cryptoloop support is a straightforward addition to those.

-- 
Zygo Blaxell (Laptop) &lt;zblaxell@feedme.hungrycats.org&gt;
GPG = D13D 6651 F446 9787 600B AD1E CCF3 6F93 2823 44AD
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011231160840</emailId><senderName>Roman Drahtmueller</senderName><senderEmail>draht@suse.de</senderEmail><timestampReceived>2001-12-31 16:08:40-0400</timestampReceived><subject>Re: SUSE</subject><body>

&gt;
&gt;   Seems like there was some discussion about SUSE before, but I deleted
&gt; it, I guess (and where are the archives anyhow?) but I've recently
&gt; become intrigued by SUSE, especially since finding out that they support
&gt; an encrypted file system on the install, and am probably going to make
&gt; it my next system, after many years of redhat and a bit of debian.
&gt;    Any comments on SUSE's cfs?

:-) It works, and it does so pretty nicely. There may be plenty of room
for improvement what the creation of a crypted loopback device is
concerned, especially wrt the graphical user interface (yast2).

Roman.
-- 
 -                                                                      -
| Roman Drahtm√ºller      &lt;draht@suse.de&gt; // "You don't need eyes to see, |
  SuSE GmbH - Security           Phone: //             you need vision!"
| N√ºrnberg, Germany     +49-911-740530 //           Maxi Jazz, Faithless |
 -                                                                      -

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011102135618</emailId><senderName>Pavel Machek</senderName><senderEmail>pavel@suse.cz</senderEmail><timestampReceived>2001-11-02 13:56:18-0400</timestampReceived><subject>Re: [ACPI] Re: ACPI + loop(AES) + swsusp</subject><body>

Hi!

&gt; &gt; Given your point about security, wouldn't it be nice if there were yet
&gt; &gt; another flag to indicate that encrypted partitions should just be
&gt; &gt; turned off on suspend?
&gt; &gt; 
&gt; &gt; This is more useful than it sounds -- not all partitions are mounted all
&gt; &gt; the time.  It might actually be convenient if you don't want to
&gt; &gt; accidentally leave a partition accessible when you walk away from a
&gt; &gt; machine and forget to losetup -d, or whatever.
&gt; 
&gt; Like Sean Neakums pointed out in earlier post to linux-crypto list, just
&gt; forcing unmount or losetup -d is not really an option. Maybe just checking
&gt; for encrypted loops in userspace _before_ starting suspend is a better
&gt; solution. Something like this:

Agreed. Decision if keys should go to disk is user decision (btw they *do*
go to disk if BIOS is used to suspend-to-disk; some notebooks do s-t-d 
automagially on battery fail), so it has to be userspace.
								Pavel
-- 
Philips Velo 1: 1"x4"x8", 300gram, 60, 12MB, 40bogomips, linux, mutt,
details at http://atrey.karlin.mff.cuni.cz/~pavel/velo/index.html.

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011103223110</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-11-03 22:31:10-0400</timestampReceived><subject>ADMIN:  Majordomo -&gt; Listar</subject><body>

Hi,

the lists have been converted from Majordomo to Listar,
this should be transparent for all normal operation, the
only thing changed is the "Sender:" header, which now
points to &lt;listname&gt;-bounce@nl.linux.org so bounces are
handled automatically and the list owner doesn't get them
all.

This warning message is mostly sent so people can adjust
their mailfilter if needed.

regards,

Rik
-- 
DMCA, SSSCA, W3C?  Who cares?  http://thefreeworld.net/

http://www.surriel.com/		http://distro.conectiva.com/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011104180324</emailId><senderName></senderName><senderEmail>ingo.oeser</senderEmail><timestampReceived>2001-11-04 18:03:24-0400</timestampReceived><subject>ADMIN: Majordomo -&gt; Listar</subject><body>


the lists have been converted from Majordomo to Listar,
this should be transparent for all normal operation, the
only thing changed is the "Sender:" header, which now
points to &lt;listname&gt;-bounce@nl.linux.org so bounces are
handled automatically and the list owner doesn't get them
all.

This warning message is mostly sent so people can adjust
their mailfilter if needed.

regards,

Rik
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011105123327</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-05 12:33:27-0400</timestampReceived><subject>Re: loop-AES problems with RedHat 7.2</subject><body>

Jonas Larsson wrote:
&gt; I don't have "CONFIG_BLK_DEV_LOOP is N", I have "# CONFIG_BLK_DEV_LOOP is
&gt; not set" but I suppose that is ok.

That's ok.

&gt; Anyway, I will try "make modules_install" after the kernel compilation:
&gt; 
&gt; # find /lib/modules/ -name "loop.o"
&gt; /lib/modules/2.4.9-13/kernel/drivers/block/loop.o
&gt; /lib/modules/2.4.9-13custom/block/loop.o
&gt; 
&gt; (2.4.9-13custom was created by "make" with loop-AES.)

What does command "uname -r" output?

If the output is "2.4.9-13", you have built loop.o module for kernel version
"2.4.9-13custom" and you are still running kernel "2.4.9-13". Please install
your newly compiled kernel and newly compiled modules, then you are running
a kernel loop.o was compiled for.

&gt; # cd /usr/src/linux-2.4.9-13
&gt; # make modules_install
&gt; [...]
&gt; 
&gt; But the "loop.o" didn't got removed:
&gt; 
&gt; # find /lib/modules/ -name "loop.o"
&gt; /lib/modules/2.4.9-13/kernel/drivers/block/loop.o
&gt; /lib/modules/2.4.9-13custom/block/loop.o

Kernel's Makefile tried to remove
/lib/modules/2.4.9-13custom/kernel/drivers/block/loop.o

It was not there, so it was not removed.

&gt; The question is, do I dare to use it since the "6 out of 29 hunks FAILED"
&gt; with "make" and loop-AES seem to me a bit scary... but the "Test results ok"
&gt; above looks nice anyway...

Those errors came from "patch --dry-run" and are harmless. Makefile is just
trying to detect whether a patch applies or not. For more information type
"man patch".

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011106232141</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-11-06 23:21:41-0400</timestampReceived><subject>Crypto API status</subject><body>

Herbert: Your newest patches seem to be for 2.4.10. Any
updates in the pipeline or are you swamped with work?

-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011107013944</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-07 01:39:44-0400</timestampReceived><subject>Announce loop-AES-v1.4g file/swap crypto package</subject><body>

In short: If file and swap crypto is all you need, this package is a hassle
free replacement for international crypto patch and HVR's cryptoapi.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. AES cipher can be used to encrypt local file systems and
disk partitions. For more information about compiling and using the driver,
see the README file in the package.

Features:
- GPL license.
- No source modifications to kernel. No patch hassles when you are upgrading
  your kernel.
- Works with all recent 2.4, 2.2 and 2.0 kernels, including distro vendor
  kernels. Encrypted disk images are compatible across all supported
  kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.
- Device backed (partition backed) loop is capable of encrypting swap on 2.4
  kernels.

Changes since previous release:
- Fix ancient loop bug that prevented rw losetuping/mounting device backed
  loop if looped to device node resided on ro mounted filesystem.
- Remove old wrong loop.o automatically on 2.4 kernels.
- Makefile now prints currently running kernel version and what kernel
  version module was compiled for.
- Add a workaround for deactivate_page() that vanished in 2.4.14.
- loop.c-2.4.original updated with fixes from 2.4.14.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4g.tar.bz2
    md5sum 59ebac4d286b20d5feaf8625dc195726

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4g.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011104190515</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-11-04 19:05:15-0400</timestampReceived><subject>loop-AES problems with RedHat 7.2</subject><body>

Hello,

I try to build loop-AES-v1.4f (latest) on a RedHat 7.2 Linux i686.
Unfortunately the "make tests" failes:

# make tests
dd if=/dev/zero of=test-file1 bs=1024 count=10
10+0 records in
10+0 records out
cp test-file1 test-file3
echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
ioctl: LOOP_SET_STATUS: Invalid argument
make: *** [tests] Error 1

:-(

This is my steps to get to this point:

Installed the kernel-source rpms for 2.4.9-13 (latest).
Got the RedHat 7.2 .config:

# cp -a /usr/src/linux-2.4.9-13/configs/kernel-2.4.9-i686.config \
  /usr/src/linux-2.4.9-13/.config

# cd /usr/src/linux-2.4.9-13
# make xconfig

[Changed CONFIG_BLK_DEV_LOOP=n (by mouseclicking :)]
[Save and exit]

Checked that I did the right thing:
# grep CONFIG_BLK_DEV_LOOP /usr/src/linux-2.4.9-13/.config
# CONFIG_BLK_DEV_LOOP is not set

# make dep
# make bzImage
# make modules

The last two steps may not have been needed but I did it just to be sure.

# cd /tmp
# tar xjf /tmp/loop-AES-v1.4f.tar.bz2
# cd loop-AES-v1.4f
# make clean
rm -f *.o *.orig *.rej patched-loop.[ch] test-file[1234]

Now time for building:

# make
cd /lib/modules/2.4.9-13/build &amp;&amp; make SUBDIRS=/tmp/loop-AES-v1.4f modules
make[1]: Entering directory `/usr/src/linux-2.4.9-13'
make -C  /tmp/loop-AES-v1.4f CFLAGS="-D__KERNEL__ 
-I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes -Wno-trigraphs 
-O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common -Wno-unused -pipe 
-mpreferred-stack-boundary=2 -march=i686 -DMODULE -DMODVERSIONS -include 
/usr/src/linux-2.4.9-13/include/linux/modversions.h" MAKING_MODULES=1 
modules
make[2]: Entering directory `/tmp/loop-AES-v1.4f'
rm -f *.o *.orig *.rej patched-loop.[ch] test-file[1234]
rm -f patched-loop.[ch]
cp /usr/src/linux-2.4.9-13/drivers/block/loop.c patched-loop.c
*** BEGINNING OF SECTION TO IGNORE PATCH ERRORS ***
patch -p0 -l -f --dry-run &lt; loop.c-2.4.diff || cp loop.c-2.4.original 
patched-loop.c
patching file patched-loop.c
Hunk #1 succeeded at 53 (offset 4 lines).
Hunk #2 succeeded at 87 with fuzz 1 (offset 2 lines).
Hunk #3 FAILED at 130.
Hunk #4 succeeded at 157 with fuzz 1 (offset 1 line).
Hunk #5 succeeded at 413 (offset 2 lines).
Hunk #6 FAILED at 431.
Hunk #7 succeeded at 461 (offset 3 lines).
Hunk #8 succeeded at 479 (offset 2 lines).
Hunk #9 succeeded at 488 (offset 3 lines).
Hunk #10 succeeded at 516 with fuzz 2 (offset 12 lines).
Hunk #11 succeeded at 516 (offset 4 lines).
Hunk #12 succeeded at 538 (offset 11 lines).
Hunk #13 FAILED at 546.
Hunk #14 succeeded at 548 (offset -5 lines).
Hunk #15 FAILED at 573.
Hunk #16 FAILED at 605.
Hunk #17 succeeded at 662 (offset 11 lines).
Hunk #18 succeeded at 780 (offset 1 line).
Hunk #19 FAILED at 838.
Hunk #20 succeeded at 956 (offset 54 lines).
Hunk #21 succeeded at 1017 (offset 1 line).
Hunk #22 succeeded at 1113 (offset 50 lines).
Hunk #23 succeeded at 1076 (offset 1 line).
Hunk #24 succeeded at 1136 (offset 50 lines).
Hunk #25 succeeded at 1100 (offset 1 line).
Hunk #26 succeeded at 1181 (offset 48 lines).
Hunk #27 succeeded at 1176 (offset 1 line).
Hunk #28 succeeded at 1238 (offset 48 lines).
Hunk #29 succeeded at 1207 (offset 1 line).
6 out of 29 hunks FAILED -- saving rejects to file patched-loop.c.rej
*** END OF SECTION TO IGNORE PATCH ERRORS ***
patch -p0 -l -f &lt; loop.c-2.4.diff
patching file patched-loop.c
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes 
-Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common 
-Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE 
-DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h  
-DDO_GENERIC_FILE_READ_5_PARAMS -DEXPORT_SYMTAB -c patched-loop.c
-o patched-loop.o
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes 
-Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common 
-Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE 
-DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h  
-DDO_GENERIC_FILE_READ_5_PARAMS -c aes-glue.c -o aes-glue.o
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes 
-Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common 
-Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE 
-DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h  
-DDO_GENERIC_FILE_READ_5_PARAMS -c aes.c -o aes.o
ld -m elf_i386 -r patched-loop.o aes-glue.o aes.o -o loop.o
mkdir -p /lib/modules/2.4.9-13custom/block
cp -p loop.o /lib/modules/2.4.9-13custom/block
sync
make[2]: Leaving directory `/tmp/loop-AES-v1.4f'
make[1]: Leaving directory `/usr/src/linux-2.4.9-13'

Hmm... 6 out of 29 patchhunks failed... maybe not that good :-(

Time for building new mount, umount and losetup:

# tar xjf /tmp/util-linux-2.11l.tar.bz2
# cd util-linux-2.11l
# patch -p1 &lt;../util-linux-2.11l.diff
patching file mount/Makefile
patching file mount/lomount.c
patching file mount/losetup.8
patching file mount/mount.8
patching file mount/mount.c
patching file mount/sha512.c
patching file mount/sha512.h
# make
[...] Seemed to be ok.
# cd mount
# install -m 4755 -o root mount umount /bin
# install -m 755 losetup /sbin
# rm -f /usr/share/man/man8/{mount,umount,losetup}.8.gz
# install -m 644 mount.8 umount.8 losetup.8 /usr/share/man/man8
# cd ../..

Now for the failing test:

# make tests
dd if=/dev/zero of=test-file1 bs=1024 count=10
10+0 records in
10+0 records out
cp test-file1 test-file3
echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
ioctl: LOOP_SET_STATUS: Invalid argument
make: *** [tests] Error 1

Any ideas?


Best regards,

    Jonas

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011106224845</emailId><senderName></senderName><senderEmail>mail@joerg-winne.de</senderEmail><timestampReceived>2001-11-06 22:48:45-0400</timestampReceived><subject>Where is kerneli.org</subject><body>

Hi all,

some months ago I tried out the crypto thing with a 2.2.18 kernel. So far
everything went fine. Now I want to upgrade to an 2.4.x kernel. Following
the same approach, I wanted to download the international Patches from
ftp.kerneli.org - but the Domain kerneli.org does no longer exist.

So where can I find recent patches or are they no longer needed. I didn't
find the options in the kernel-configuration.

Thanks in advance for any help.
Sincerely
Joerg

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011111101052</emailId><senderName>"Stephen J. Thompson"</senderName><senderEmail>stephen@cass-ltd.co.uk</senderEmail><timestampReceived>2001-11-11 10:10:52-0400</timestampReceived><subject>FStab and CryptoAPI</subject><body>

Hello all,

I am trying to allow my users to mount a cryptoapi'ed partition. I have in my 
fstab file the following:

/dev/hdb2	/home/stephen/encrypted	reiserfs	
user,noauto,loop,encryption=twofish,keybits=256	0	0

I have screwed something up, when I enter the command: mount encrypted/ (the 
dir to mount)

I am asked for the keysize (Which I enter) and then the password. (I enter 
this also).

Then I get an error message:
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems

Any ideas?

Thanks.

Stephen.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011113223547</emailId><senderName>Hugh Daniel</senderName><senderEmail>hugh@road.xisp.net</senderEmail><timestampReceived>2001-11-13 22:35:47-0400</timestampReceived><subject>Bad Discrimination</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

  Cool, from the email bounce I just got (below) I will guess that
Crypto on Linux is only the purview of the obedient and well tracked
in the Dossier Society.
  That getting email to where it's going is less important then the
email be Politically Correct and that in the long run we want
goverments making the net 'pure' and safe rather then doing the hard
work of writing good MUA's.
  Oh, and that free and/or anonymous speech is not very valued by you
folks.

  No wonder I have never paid any attention to your Linux Cryto
list...

		||ugh Daniel
		hugh@freeswan.org

			Systems Testing &amp; Project mis-Management
			The Linux FreeS/WAN Project
			http://www.freeswan.org



- ------- Forwarded Message

Return-Path: MAILER-DAEMON@ecotone.toad.com
Delivery-Date: Tue Nov 13 13:10:46 2001
Return-Path: &lt;&gt;
Received: from toad.com (toad.com [140.174.2.1])
	by ecotone.toad.com (8.8.7/8.8.7) with ESMTP id NAA30724
	for &lt;hugh@ecotone.syzygy.com&gt;; Tue, 13 Nov 2001 13:10:46 -0800
Received: from localhost (localhost) by toad.com (8.7.5/8.7.3) with internal id \
                OAA07611; Tue, 13 Nov 2001 14:21:56 -0800 (PST)
Date: Tue, 13 Nov 2001 14:21:56 -0800 (PST)
From: Mail Delivery Subsystem &lt;MAILER-DAEMON@toad.com&gt;
Subject: Returned mail: User unknown
Message-Id: &lt;200111132221.OAA07611@toad.com&gt;
To: hugh@toad.com
MIME-Version: 1.0
Content-Type: multipart/report; report-type=delivery-status;
	boundary="OAA07611.1005690116/toad.com"
Auto-Submitted: auto-generated (failure)

This is a MIME-encapsulated message

- - --OAA07611.1005690116/toad.com

The original message was received at Tue, 13 Nov 2001 14:21:45 -0800 (PST)
from hugh@localhost

   ----- The following addresses have delivery notifications -----
listar@nl.linux.org  (unrecoverable error)

   ----- Transcript of session follows -----
... while talking to humbolt.nl.linux.org.:
&lt;&lt;&lt; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
&lt;&lt;&lt; 550-If you feel we mistreat you, do contact us.
&lt;&lt;&lt; 550 Ask HELP for our contact information.
... while talking to pentafluge.infradead.org.:
&gt; &gt; &gt; RCPT To:&lt;listar@nl.linux.org&gt;
&lt;&lt;&lt; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
&lt;&lt;&lt; 550 mail from 140.174.2.1 rejected: administrative prohibition (host is \
blacklisted) 550 listar@nl.linux.org... User unknown

- - --OAA07611.1005690116/toad.com
Content-Type: message/delivery-status

Reporting-MTA: dns; toad.com
Arrival-Date: Tue, 13 Nov 2001 14:21:45 -0800 (PST)

Final-Recipient: RFC822; listar@nl.linux.org
Action: failed
Status: 5.2.0
Remote-MTA: DNS; pentafluge.infradead.org
Diagnostic-Code: SMTP; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
Last-Attempt-Date: Tue, 13 Nov 2001 14:21:56 -0800 (PST)

- - --OAA07611.1005690116/toad.com
Content-Type: message/rfc822

Return-Path: hugh
Received: (from hugh@localhost) by toad.com (8.7.5/8.7.3) id OAA07607 for \
                listar@nl.linux.org; Tue, 13 Nov 2001 14:21:45 -0800 (PST)
Date: Tue, 13 Nov 2001 14:21:45 -0800 (PST)
From: Hugh Daniel &lt;hugh&gt;
Message-Id: &lt;200111132221.OAA07607@toad.com&gt;
To: listar@nl.linux.org

subscribe linux-crypto@nl.linux.org

- - --OAA07611.1005690116/toad.com--

- ------- End of Forwarded Message


-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia
Charset: noconv
Comment: For the matching public key, finger the Reply-To: address.

iQCVAwUBO/GfilZpdJR7FBQRAQGV0QQAuBzl7lXjrJVFcECYK9K/HDOg5vDVhSfw
m/yPkQnY4a+ejPxm7Mgs/QB/QFmMGDjbUsoQq3T3N0vVmCfvwjkK9JZlAC+bma0v
pw5AV9CGrc5dvIh/lg5irYZRdOsLGcjgAwBHxR/xVIXztScnmLxrL4HDy5wCrDdK
zn7Orl+OyNI=
=eXNb
-----END PGP SIGNATURE-----
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011122085946</emailId><senderName>"Kostas Psarras"</senderName><senderEmail>psarras@dataways.gr</senderEmail><timestampReceived>2001-11-22 08:59:46-0400</timestampReceived><subject>Root partition encryption</subject><body>

Could someone clarify what Jari means in the 8th step of the README by:
"
Reboot system from rescue floppy / cdrom / other partition on your
    system, so that the partition you are about to encrypt is _not_ mounted.
    Note: you must use loop-AES' loop.o module and loop-AES modified losetup
    program for this.

        insmod loop
        losetup -e AES128 /dev/loop5 /dev/hda2
        dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
        sync
        mount -t ext2 /dev/loop5 /mnt
"

I mean what is needed to do the trick? Perhaps a disk with 3 partitions?

I think i have to build (besides /boot and / partitions) a rescue disk
with same kernel version of my / so the loop-2.4.7.o can be used . . .

Is that right?

Kostas.


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011121121742</emailId><senderName>Pierre</senderName><senderEmail>pbedel@wanadoo.fr</senderEmail><timestampReceived>2001-11-21 12:17:42-0400</timestampReceived><subject>util-linux-2.11m won't compile on RH7.1</subject><body>

Hi,

I am trying to install loop-AES-v1.4g on Redhat 7.1. I have a properly configured \
kernel, I compiled loop-AES and am trying to patch losetup, mount and umount. However \
I receive an error during compilation :

In file included from cytune.c:58:
/usr/include/linux/tqueue.h:39: field `list' has incomplete type
/usr/include/linux/tqueue.h: In function `queue_task':
/usr/include/linux/tqueue.h:87: warning: implicit declaration of function \
                `list_add_tail'
/usr/include/linux/tqueue.h: In function `run_task_queue':
/usr/include/linux/tqueue.h:102: warning: implicit declaration of function \
                `list_empty'
/usr/include/linux/tqueue.h:102: dereferencing pointer to incomplete type
make[1]: *** [cytune.o] Error 1
make[1]: Leaving directory `/usr/src/util-linux-2.11m/sys-utils'
make: *** [all] Error 1

Has this happened to anyone else, any clues ???

Thanks,

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011124144643</emailId><senderName>Noll Janos</senderName><senderEmail>johnzero-nlcrypto@johnzero.hu</senderEmail><timestampReceived>2001-11-24 14:46:43-0400</timestampReceived><subject>what's going on?</subject><body>

Hi!

 What's going on with Linux Crypto?

 - www.kerneli.org is nonexistant
 - the ftp.kernel.org/pub/linux/crypto/v2.4 patches are only up to
   kernel version 2.4.3 (which is rather old)
 - the ftp.kernel.org/pub/linux/kernel/people/hvr patches are only up
   to kernel version 2.4.10 (also not very up to date)

 So, where are the maintained patches?

 Has cryptography been banned?


| Noll Janos &lt;johnzero@johnzero.hu&gt; | http://www.johnzero.hu |

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011126011357</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-26 01:13:57-0400</timestampReceived><subject>demonstration of the file corruption problem (fwd)</subject><body>

here are the detail of a simple demonstration of the corruption. i really
hope i'm doing something wrong so i can simply fix it.

- brett

---------- Forwarded message ----------
Date: Sun, 25 Nov 2001 17:00:12 -0800 (PST)
From: beldridg@best.com
To: linux-crypto@nl.linux.org
Cc: beldridg@best.com
Subject: demonstration of the file corruption problem

i sent an earlier message, but i'm not sure if it got through. here are
more details.

i'm running 2.4.16pre1 with the latest cryptoapi patch and
CONFIG_CRYPTOLOO_512IV=y.

the script below clearly demonstrates the file corruption problems:


1. [root@rush beldridg]# losetup -e blowfish /dev/loop0 .inbox
   Available keysizes (bits): 128 160 192 256
   Keysize: 128
   Password:


2. [root@rush beldridg]# mke2fs /dev/loop0
   mke2fs 1.23, 15-Aug-2001 for EXT2 FS 0.5b, 95/08/09

   run again just to make sure:

   [root@rush beldridg]# mke2fs /dev/loop0
   mke2fs 1.23, 15-Aug-2001 for EXT2 FS 0.5b, 95/08/09

3. [root@rush beldridg]# losetup -d /dev/loop0

4. [root@rush beldridg]# mount -o loop,encryption=blowfish .inbox
   mail/testing
   Available keysizes (bits): 128 160 192 256
   Keysize: 128
   Password:

5. copy a random file (note the first two fail because they try using
   reserved inodes):

   [root@rush beldridg]# cp /tmp/install.log mail/testing/
   cp: cannot create regular file `mail/testing/install.log': Input/output
   error
   [root@rush beldridg]# cp /tmp/install.log mail/testing/
   cp: cannot create regular file `mail/testing/install.log': Input/output
   error

   then this one works:

   [root@rush beldridg]# cp /tmp/install.log mail/testing/

6. [root@rush beldridg]# md5sum mail/testing/install.log
   8173590ad0ecaa4bb3f20c574176466e  mail/testing/install.log

7. [root@rush beldridg]# sync
   [root@rush beldridg]# umount mail/testing
   [root@rush beldridg]# mount -o loop,encryption=blowfish .inbox
   mail/testing
   Available keysizes (bits): 128 160 192 256
   Keysize: 128
   Password:

8. [root@rush beldridg]# md5sum mail/testing/install.log
   402c6bb5db8a720b762b19dcfdc2c4ce  mail/testing/install.log



Note the two different md5sum values.


thanks,

- brett "praying and hoping for a stable 2.4.x kernel with
         crypto at some point"





-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011126081503</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-11-26 08:15:03-0400</timestampReceived><subject>Re: demonstration of the file corruption problem (fwd)</subject><body>

hello!

On Mon, 2001-11-26 at 02:13, beldridg@pobox.com wrote:
&gt; here are the detail of a simple demonstration of the corruption. i really
&gt; hope i'm doing something wrong so i can simply fix it.

as I can read from the next mail, you are using a file backed loop
device; this may be affected by the kernel bug jari mentioned in his
last loop-aes announcement, I'll take a look at it asap (but I've got a
few exams to prepare for right now... so if anyone have time to
investigate, please step forward!)

ps: I finally got into contact with Alexander (more precisely, he
reached me), thus we can expect some official resolution of the intl
patch projects future... stay tuned for more...

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011126135518</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-26 13:55:18-0400</timestampReceived><subject>Re: demonstration of the file corruption problem (fwd)</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Mon, 2001-11-26 at 02:13, beldridg@pobox.com wrote:
&gt; &gt; here are the detail of a simple demonstration of the corruption. i really
&gt; &gt; hope i'm doing something wrong so i can simply fix it.
&gt; 
&gt; as I can read from the next mail, you are using a file backed loop
&gt; device; this may be affected by the kernel bug jari mentioned in his
&gt; last loop-aes announcement, I'll take a look at it asap (but I've got a
&gt; few exams to prepare for right now... so if anyone have time to
&gt; investigate, please step forward!)

Herbert,

The cryptoapi file backed loop bug is a result of you doing your new
"toothpaste back into tube" IV computation in in lo_read_actor(), and old
"time bomb" IV computation in lo_send().

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011124185438</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-11-24 18:54:38-0400</timestampReceived><subject>Re: what's going on?</subject><body>

hello!

On Sat, 2001-11-24 at 15:46, Noll Janos wrote:
&gt;  What's going on with Linux Crypto?
 
&gt;  - www.kerneli.org is nonexistant
well, the domain has expired in august :-(
Alexander Kjeldaas was the billing contact and seems to have vanished...
something serious must have been happend, as he seems to have
disappeared suddenly from earth :-/
(anyone knows anything about this??)

&gt;  - the ftp.kernel.org/pub/linux/crypto/v2.4 patches are only up to
&gt;    kernel version 2.4.3 (which is rather old)
yes, that's since I don't dare yet to put anything official out, unless
I know what's happened with alex...

&gt;  - the ftp.kernel.org/pub/linux/kernel/people/hvr patches are only up
&gt;    to kernel version 2.4.10 (also not very up to date)
ok, that was caused by me being busy with university; if you look again
you'll find something fresher...

warning about 2.4.15/2.5.0:
http://slashdot.org/articles/01/11/24/1711245.shtml

I hope I'll find some more time to do some serious programming again, as
there's still some stuff on the TODO list...

&gt;  So, where are the maintained patches?
in kernel/people/hvr for the meantime...
 
&gt;  Has cryptography been banned?
I hope not! ;-)

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011125142741</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-11-25 14:27:41-0400</timestampReceived><subject>Re: what's going on?</subject><body>

On Sat, Nov 24, 2001 at 07:54:38PM +0100, Herbert Valerio Riedel wrote:
&gt; &gt;  - the ftp.kernel.org/pub/linux/kernel/people/hvr patches are only up
&gt; &gt;    to kernel version 2.4.10 (also not very up to date)
&gt; ok, that was caused by me being busy with university; if you look again
&gt; you'll find something fresher...

Ah, you were supposed to tell me so I could test it for you! ;-)
 
&gt; warning about 2.4.15/2.5.0:
&gt; http://slashdot.org/articles/01/11/24/1711245.shtml

OUCH!!!
amon dives for cover as a dead duck kernel falls and misses him

And I'll be sure to do my testing on 2.4.13... 2.4.14 has
some compile probs on loop.c under some circumstances.
 
-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011121155751</emailId><senderName>Pierre</senderName><senderEmail>pbedel@wanadoo.fr</senderEmail><timestampReceived>2001-11-21 15:57:51-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

Please don't take into account my previous mail. My mind wasn't working yet!

However for those it may interest, my changes to the loop-AES-v1.4g README file are \
the following :

    cd util-linux-2.11m
&lt;insert&gt;
    ./configure	# Otherwise it looked for &lt;linux/tqueue.h&gt; which breaks my \
compilation &lt;/insert&gt;
    patch -p1 &lt;../util-linux-2.11m.diff
    make
    cd mount
    install -m 4755 -o root mount umount /bin
    install -m 755 losetup /sbin
&lt;   rm -f /usr/man/man8/{mount,umount,losetup}.8.gz
&lt;   install -m 644 mount.8 umount.8 losetup.8 /usr/man/man8
&gt; rm -f /usr/share/man/man8/{mount,umount,losetup}.8.gz
&gt; install -m 644 mount.8 umount.8 losetup.8 /usr/share/man/man8

I also had to purge my /var/cache/man/cat[0-9]/ directories in order to bring up the \
new updated manpages..

--Pierre

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011127184312</emailId><senderName>Friedrisch Muller</senderName><senderEmail>friedrischm@yahoo.com</senderEmail><timestampReceived>2001-11-27 18:43:12-0400</timestampReceived><subject>loop-aes problems under RedHat Linux 7.2</subject><body>

Hi, 

I got problems with loop-aes v1.4h and
util-linux-2.11m . I have read and done everything
that stands in the README of loop-aes v1.4h and
created an encrypted fs of /dev/hdb1 with AES-256.
That seem to work just perfect, thanks alot Jari!

The problem is that I did build new mount, umount,
losetup binaries and they do cause me trouble during
bootup of my RedHat 7.2 Linux box. I get this error
during bootup: 

Mounting local filesystems:  mount: invalid option --
O
&lt;Here comes usage for mount.&gt;

Then the init pukes ugly messages like "no such file:
/var/lock/subsys/syslog, ipchains, ..." and the
like... after timeouts of like 10 minutes system
finally comes up and I then need to start the services
(like syslog) manually. (The path /var/lock/subsys/ is
correct so I am abit confused with the above
error-messages.)

If I switch to the original binaries of mount, umount,
losetup and reboots the system there are no problems.
But then I need to (ofcourse) switch to the loop-aes
versions of mount, umount, losetup to be able to mount
my encrypted partitions and then it works perfect.

When examing the man-pages of the old and the new
mount I see that the "-O" switch isn't there anymore
so I suppose that is the problem. Any idea how to fix
this? (Not fun to switch binaries during every
reboot).

I think this line in /etc/rc.sysinit causes the
problem:

action $"Mounting local filesystems: " mount -a -t
nonfs,smbfs,ncpfs -O no_netdev

Can I change this line in some way to come away from
the "-O" parameter?


Any help with this would be really nice... :)


Regards, 

    Friedrisch

__________________________________________________
Do You Yahoo!?
Yahoo! GeoCities - quick and easy web site hosting, just $8.95/month.
http://geocities.yahoo.com/ps/info1
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011128120722</emailId><senderName></senderName><senderEmail>stephen.thompson</senderEmail><timestampReceived>2001-11-28 12:07:22-0400</timestampReceived><subject>Kernel 2.4.14 and CryptoAPI</subject><body>

Hello All,

I am running 2.4.14 and tried to compile the API. All I get is pages full of
errors and no module. Is there a patch I need to apply? If so can someone
point me in the direction of a http site (no ftp access here.) with it on.

Thanks.

Stephen.



-------------------------------------------------------------------------------------------


Copyright material and/or confidential and/or privileged information may be contained \
in this e-mail and any attached documents.  The material and information is intended \
for the use of the intended addressee only.  If you are not the intended addressee, \
or the person responsible for delivering it to the intended addressee, you may not \
copy, disclose, distribute, disseminate or deliver it to anyone else or use it in any \
unauthorised manner or take or omit to take any action in reliance on it. To do so is \
prohibited and may be unlawful.   The views expressed in this e-mail may not be \
official policy but the personal views of the originator.  If you receive this e-mail \
in error, please advise the sender immediately by using the reply facility in your \
e-mail software, or contact postmaster@bmwfin.com.  Please also delete this e-mail \
and all documents attached immediately.   Many thanks for your co-operation.

BMW Financial Services (GB) Limited is registered in England and Wales under company \
number 01288537. Registered Offices : Europa House, Bartley Way, Hook, Hants, RG27 \
                9UF
------------------------------------------------------------------------------------------
                
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011128165339</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-28 16:53:39-0400</timestampReceived><subject>Re: Kernel 2.4.14 and CryptoAPI</subject><body>

On Wed, 28 Nov 2001 Stephen.Thompson@bmwfin.com wrote:

&gt; I am running 2.4.14 and tried to compile the API. All I get is pages
&gt; full of errors and no module. Is there a patch I need to apply? If so
&gt; can someone point me in the direction of a http site (no ftp access
&gt; here.) with it on.

if you sent the error messages it would help. i have a suspicion that it
is due to the Makefile not doing a -DEXPORT_SYMTAB.

one way to fix is to modify the Makefile for cryptoloop and cryptoapi to
do the above.

the other way is to simply modify cryptoapi.c and cryptoloop.c to add the
following near the EXPORT_SYMBOL section of the code:

  MODULE_LICENSE("GPL");

these changes are in the latest patch from hvr.


- brett

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011128091014</emailId><senderName>Friedrisch Muller</senderName><senderEmail>mulfri@excite.com</senderEmail><timestampReceived>2001-11-28 09:10:14-0400</timestampReceived><subject>loop-aes problems under RedHat Linux 7.2</subject><body>

Hi, 

I got problems with loop-aes v1.4h and
util-linux-2.11m . I have read and done everything
that stands in the README of loop-aes v1.4h and
created an encrypted fs of /dev/hdb1 with AES-256.
That seem to work just perfect, thanks alot Jari!

The problem is that I did build new mount, umount,
losetup binaries and they do cause me trouble during
bootup of my RedHat 7.2 Linux box. I get this error
during bootup: 

Mounting local filesystems:  mount: invalid option -- O
&lt;Here comes usage for mount.&gt;

Then the init pukes ugly messages like "no such file:
/var/lock/subsys/syslog, ipchains, ..." and the
like... after timeouts of like 10 minutes system
finally comes up and I then need to start the services
(like syslog) manually. (The path /var/lock/subsys/ is
correct so I am abit confused with the above
error-messages.)

If I switch to the original binaries of mount, umount,
losetup and reboots the system there are no problems.
But then I need to (ofcourse) switch to the loop-aes
versions of mount, umount, losetup to be able to mount
my encrypted partitions and then it works perfect.

When examing the man-pages of the old and the new
mount I see that the "-O" switch isn't there anymore
so I suppose that is the problem. Any idea how to fix
this? (Not fun to switch binaries during every
reboot).

I think this line in /etc/rc.sysinit causes the
problem:

action $"Mounting local filesystems: " mount -a -t
nonfs,smbfs,ncpfs -O no_netdev

Can I change this line in some way to come away from
the "-O" parameter?


Any help with this would be really nice... :)


Regards, 

    Friedrisch





_______________________________________________________
http://inbox.excite.com


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011128164710</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-28 16:47:10-0400</timestampReceived><subject>Re: loop-aes problems under RedHat Linux 7.2</subject><body>

hi,

On Wed, 28 Nov 2001, Friedrisch Muller wrote:

&gt; Mounting local filesystems:  mount: invalid option -- O &lt;Here comes
&gt; usage for mount.&gt;

this is the problem i mentioned the other day. redhat has patched mount to
add a few new options.

therefore, you have at least three options:

 1. modify the startup script to remove the mount commands that deal
    with nodev

 2. i think jari is going to incorporate the netdev patch into his
    patch. then you can repatch and rebuild mount, etc.

 3. i have an untested modified redhat nodev patch which should apply
    cleanly after jari's patch. it is attached. just pply this patch
    and rebuild mount, etc.


- brett

["mount-2.11m-netdev.patch" (TEXT/PLAIN)]

--- mount/mount.c.orig	Mon Nov 26 08:27:39 2001
+++ mount/mount.c	Mon Nov 26 08:42:07 2001
@@ -37,6 +37,8 @@
  * 2000-05-11 Mark A. Peloquin &lt;peloquin@us.ibm.com&gt;
  * - check_special_mountprog now returns correct status
  * 2000-11-08 aeb: accept nonnumeric uid=, gid= options
+ * 2001-07-13 Michael K. Johnson &lt;johnsonm@redhat.com&gt;
+ * - implemented -a -O
  */
 
 #include &lt;unistd.h&gt;
@@ -122,10 +124,11 @@
 #define MS_USERS	0x40000000
 #define MS_USER		0x20000000
 #define MS_OWNER	0x10000000
+#define MS_NETDEV	0x00020000
 #define MS_LOOP		0x00010000
 
 /* Options that we keep the mount system call from seeing.  */
-#define MS_NOSYS	(MS_NOAUTO|MS_USERS|MS_USER|MS_LOOP)
+#define MS_NOSYS	(MS_NOAUTO|MS_USERS|MS_USER|MS_NETDEV|MS_LOOP)
 
 /* Options that we keep from appearing in the options field in the mtab.  */
 #define MS_NOMTAB	(MS_REMOUNT|MS_NOAUTO|MS_USERS|MS_USER)
@@ -158,6 +161,7 @@
   { "nouser",	0, 1, MS_USER	},	/* Forbid ordinary user to mount */
   { "owner",	0, 0, MS_OWNER  },	/* Let the owner of the device mount */
   { "noowner",	0, 1, MS_OWNER  },	/* Device owner has no special privs */
+  { "_netdev",  0, 0, MS_NETDEV },      /* Device accessibly only via network */
   /* add new options here */
 #ifdef MS_NOSUB
   { "sub",	0, 1, MS_NOSUB	},	/* allow submounts */
@@ -1180,7 +1184,7 @@
 #define DISKMAJOR(m)	(((int) m) &amp; ~0xf)
 
 static int
-mount_all (char *types, char *options) {
+mount_all (char *types, char *options, char *test_opts) {
      struct mntentchn *mc, *mc0, *mtmp;
      int status = 0;
      struct stat statbuf;
@@ -1201,6 +1205,7 @@
      mc0 = fstab_head();
      for (mc = mc0-&gt;nxt; mc &amp;&amp; mc != mc0; mc = mc-&gt;nxt) {
 	  if (matching_type (mc-&gt;m.mnt_type, types)
+              &amp;&amp; matching_opts (mc-&gt;m.mnt_opts, test_opts)
 	      &amp;&amp; !streq (mc-&gt;m.mnt_dir, "/")
 	      &amp;&amp; !streq (mc-&gt;m.mnt_dir, "root")) {
 	       if (mounted (mc-&gt;m.mnt_fsname, mc-&gt;m.mnt_dir)) {
@@ -1308,6 +1313,7 @@
 	{ "read-write", 0, 0, 'w' },
 	{ "rw", 0, 0, 'w' },
 	{ "options", 1, 0, 'o' },
+        { "test-opts", 1, 0, 'O' },
 	{ "types", 1, 0, 't' },
 	{ "bind", 0, 0, 128 },
 	{ "replace", 0, 0, 129 },
@@ -1330,7 +1336,7 @@
 	  "So far the informational part. Next the mounting.\n"
 	  "The command is `mount [-t fstype] something somewhere'.\n"
 	  "Details found in /etc/fstab may be omitted.\n"
-	  "       mount -a                 : mount all stuff from /etc/fstab\n"
+	  "       mount -a [-t|-O] ...     : mount all stuff from /etc/fstab\n"
 	  "       mount device             : mount device at the known place\n"
 	  "       mount directory          : mount known device here\n"
 	  "       mount -t type dev dir    : ordinary mount command\n"
@@ -1354,7 +1360,7 @@
 int
 main (int argc, char *argv[]) {
 	int c, result = 0, specseen;
-	char *options = NULL, *spec, *node;
+	char *options = NULL, *test_opts = NULL, *spec, *node;
 	char *volumelabel = NULL;
 	char *uuid = NULL;
 	char *types = NULL;
@@ -1377,7 +1383,7 @@
 	initproctitle(argc, argv);
 #endif
 
-	while ((c = getopt_long (argc, argv, "afFhlL:no:p:rsU:vVwt:",
+	while ((c = getopt_long (argc, argv, "afFhlL:no:O:p:rsU:vVwt:",
 				 longopts, NULL)) != EOF) {
 		switch (c) {
 		case 'a':		/* mount everything in fstab */
@@ -1407,6 +1413,12 @@
 			else
 				options = xstrdup(optarg);
 			break;
+                case 'O':               /* with -t: mount only if (not) opt */
+                        if (test_opts)
+                                test_opts = xstrconcat3(test_opts, ",", optarg);
+                        else
+                                test_opts = xstrdup(optarg);
+                        break;
 		case 'p':               /* read passphrase from given fd */
 			{ extern int passFD_number; sscanf(optarg, "%d", &amp;passFD_number); }
 			break;
@@ -1501,7 +1513,7 @@
 	switch (argc+specseen) {
 	case 0:
 		/* mount -a */
-		result = mount_all (types, options);
+		result = mount_all (types, options, test_opts);
 		if (result == 0 &amp;&amp; verbose)
 			error(_("nothing was mounted"));
 		break;
--- mount/sundries.c.netdev	Mon Jun 11 08:18:54 2001
+++ mount/sundries.c	Mon Jul 16 15:58:35 2001
@@ -185,6 +185,83 @@
      return no;
 }
 
+/* Returns 1 if needle found or noneedle not found in haystack
+ * Otherwise returns 0
+ */
+static int
+check_option(const char *haystack, const char *needle) {
+     const char *p, *r;
+     int len, needle_len, this_len;
+     int no;
+
+     no = 0;
+     if (!strncmp(needle, "no", 2)) {
+	  no = 1;
+	  needle += 2;
+     }
+     needle_len = strlen(needle);
+     len = strlen(haystack);
+
+     for (p = haystack; p &lt; haystack+len; p++) {
+	  r = strchr(p, ',');
+	  if (r) {
+	       this_len = r-p;
+	  } else {
+	       this_len = strlen(p);
+	  }
+	  if (this_len != needle_len) {
+	       p += this_len;
+	       continue;
+	  }
+	  if (strncmp(p, needle, this_len) == 0)
+	       return !no; /* foo or nofoo was found */
+	  p += this_len;
+     }
+
+     return no;  /* foo or nofoo was not found */
+}
+
+
+/* Returns 1 if each of the test_opts options agrees with the entire
+ * list of options.
+ * Returns 0 if any noopt is found in test_opts and opt is found in options.
+ * Returns 0 if any opt is found in test_opts but is not found in options.
+ * Unlike fs type matching, nonetdev,user and nonetdev,nouser have
+ * DIFFERENT meanings; each option is matched explicitly as specified.
+ */
+int
+matching_opts (const char *options, const char *test_opts) {
+     const char *p, *r;
+     char *q;
+     int len, this_len;
+
+     if (test_opts == NULL)
+	  return 1;
+
+     len = strlen(test_opts);
+     q = alloca(len+1);
+     if (q == NULL)
+          die (EX_SYSERR, _("not enough memory"));
+     
+     for (p = test_opts; p &lt; test_opts+len; p++) {
+	  r = strchr(p, ',');
+	  if (r) {
+	       this_len = r-p;
+	  } else {
+	       this_len = strlen(p);
+	  }
+	  if (!this_len) continue; /* if two ',' appear in a row */
+	  strncpy(q, p, this_len);
+	  q[this_len] = '\0';
+	  if (!check_option(options, q))
+	       return 0; /* any match failure means failure */
+	  p += this_len;
+     }
+
+     /* no match failures in list means success */
+     return 1;
+}
+
 /* Make a canonical pathname from PATH.  Returns a freshly malloced string.
    It is up the *caller* to ensure that the PATH is sensible.  i.e.
    canonicalize ("/dev/fd0/.") returns "/dev/fd0" even though ``/dev/fd0/.''
--- mount/mount.8.orig	Mon Nov 26 08:45:51 2001
+++ mount/mount.8	Mon Nov 26 08:52:00 2001
@@ -35,6 +35,7 @@
 .\" 990111, aeb: documented /sbin/mount.smbfs
 .\" 990730, Yann Droneaud &lt;lch@multimania.com&gt;: updated page
 .\" 991214, Elrond &lt;Elrond@Wunder-Nett.org&gt;: added some docs on devpts
+.\" 010714, Michael K. Johnson &lt;johnsonm@redhat.com&gt; added -O
 .\" 010725, Nikita Danilov &lt;NikitaDanilov@Yahoo.COM&gt;: reiserfs options
 .\"
 .TH MOUNT 8 "May 23 2001" "Linux 2.0" "Linux Programmer's Manual"
@@ -43,7 +44,7 @@
 .SH SYNOPSIS
 .BI "mount [\-lhV]"
 .LP
-.BI "mount \-a [\-fFnrsvw] [\-t " vfstype ]
+.BI "mount \-a [\-fFnrsvw] [\-t " vfstype ] [\-O " optlist ]
 .br
 .BI "mount [\-fnrsvw] [\-o " options " [,...]] " "device " | " dir"
 .br
@@ -138,12 +139,12 @@
 (i) The command
 .RS
 .br
-.BI "mount \-a [-t" " type" ]
+.BI "mount \-a [\-t" " type" ] [\-O " optlist ]
 .RE
 (usually given in a bootscript) causes all file systems mentioned in
 .I fstab
-(of the proper type) to be mounted as indicated, except for those
-whose line contains the
+(of the proper type and/or having or not having the proper options)
+to be mounted as indicated, except for those whose line contains the
 .B noauto
 keyword. Adding the
 .B \-F
@@ -441,6 +442,67 @@
 .IR ext .
 .RE
 .TP
+.B \-O
+Used in conjunction with
+.BR \-a ,
+to limit the set of filesystems to which the
+.B \-a
+is applied.  Like
+.B \-t
+in this regard except that it is useless except in the context of
+.B \-a .
+For example, the command:
+.RS
+.RS
+.B "mount \-a \-O no_netdev"
+.RE
+mounts all file systems except those which have the option
+.I _netdev
+specified in the options field in the
+.I /etc/fstab
+file.
+
+It is different from
+.B \-t
+in that each option is matched exactly; a leading
+.B no
+at the beginning of one option does not negate the rest.  That is, while 
+.RS
+.B "mount \-a \-t nomsdos,ext"
+.RE
+mounts filesystems that are neither msdos nor ext (the
+.B no
+applies to both msdos and ext2 filesystem types),
+.RS
+.B "mount \-a \-O no_netdev,user"
+.RE
+mounts all filesystems that do
+.I not
+have the
+.B _netdev
+option and
+.I do
+have the
+.B user
+option.  In order to specify
+.IR "neither _netdev nor user options" ,
+use:
+.RS
+.B "mount \-a \-O no_netdev,nouser"
+.RE
+
+The
+.B \-t
+and
+.B \-O
+options are cumulative in effect; that is, the command
+.RS
+.B "mount \-a \-t ext2 \-O _netdev"
+.RE
+mounts all ext2 filesystems with the _netdev option, not all filesystems
+that are either ext2 or have the _netdev option specified.
+.RE
+.TP
 .B \-o
 Options are specified with a
 .B \-o
@@ -474,6 +536,11 @@
 .B exec
 Permit execution of binaries.
 .TP
+.B _netdev
+The filesystem resides on a device that requires network access
+(used to prevent the system from attempting to mount these filesystems
+until the network has been enabled on the system).
+.TP
 .B noatime
 Do not update inode access times on this file system (e.g, for faster
 access on the news spool to speed up news servers).
--- mount/fstab.5.orig	Mon Nov 26 08:52:48 2001
+++ mount/fstab.5	Mon Nov 26 08:55:20 2001
@@ -38,6 +38,7 @@
 .\" Wed Jul 26 00:00:00 1995: Updated some nfs stuff, joey@infodrom.north.de
 .\" Tue Apr  2 00:38:28 1996: added info about "noauto", "user", etc.
 .\" Tue Jun 15 20:02:18 1999: added LABEL and UUID
+.\" Sat Jul 14 2001: Michael K. Johnson &lt;johnsonm@redhat.com&gt; added -O
 .\"
 .TH FSTAB 5 "15 June 1999" "Linux 2.2" "Linux Programmer's Manual"
 .SH NAME
@@ -151,9 +152,12 @@
 For documentation on all nfs-specific options have a look at
 .BR nfs (5).
 Common for all types of file system are the options ``noauto''
-(do not mount when "mount -a" is given, e.g., at boot time), ``user''
-(allow a user to mount), and ``owner''
-(allow device owner to mount). For more details, see
+(do not mount when "mount -a" is given, e.g., at boot time), 
+``user'' (allow a user to mount),
+``owner'' (allow device owner to mount), and
+``_netdev'' (device requires network to be available).
+The ``owner'' and ``_netdev'' options are Linux-specific.
+For more details, see
 .BR mount (8).
 
 The fifth field,
--- mount/sundries.h.orig	Mon Nov 26 08:56:39 2001
+++ mount/sundries.h	Mon Nov 26 08:57:03 2001
@@ -25,6 +25,7 @@
 char *realpath (const char *path, char *resolved_path);
 void error (const char *fmt, ...);
 int matching_type (const char *type, const char *types);
+int matching_opts (const char *options, const char *test_opts);
 void *xmalloc (size_t size);
 char *xstrdup (const char *s);
 char *xstrndup (const char *s, int n);
--- mount/umount.c.orig	Mon Nov 26 08:57:44 2001
+++ mount/umount.c	Mon Nov 26 09:02:36 2001
@@ -23,6 +23,7 @@
  *               in mtab, try them all, with last one tried first
  *             - Differentiate "user" and "users" key words in fstab
  * 001202: aeb - remove at most one line from /etc/mtab
+ * 010716: Michael K. Johnson &lt;johnsonm@redhat.com&gt;: -a -O
  * 010914: Jamie Strandboge - use tcp if that was used for mount
  * 011005: hch - add lazy umount support
  */
@@ -415,7 +416,7 @@
    in any case it's important to umount mtab entries in reverse order
    to mount, e.g. /usr/spool before /usr.  */
 static int
-umount_all (char *types) {
+umount_all (char *types, char *test_opts) {
      struct mntentchn *mc, *hd;
      int errors = 0;
 
@@ -423,7 +424,8 @@
      if (!hd-&gt;prev)
 	  die (2, _("umount: cannot find list of filesystems to unmount"));
      for (mc = hd-&gt;prev; mc != hd; mc = mc-&gt;prev) {
-	  if (matching_type (mc-&gt;m.mnt_type, types)) {
+          if (matching_type (mc-&gt;m.mnt_type, types)
+              &amp;&amp; matching_opts (mc-&gt;m.mnt_opts, test_opts)) {
 	       errors |= umount_one (mc-&gt;m.mnt_fsname, mc-&gt;m.mnt_dir,
 				     mc-&gt;m.mnt_type, mc-&gt;m.mnt_opts, mc);
 	  }
@@ -440,6 +442,7 @@
   { "force", 0, 0, 'f' },
   { "help", 0, 0, 'h' },
   { "no-mtab", 0, 0, 'n' },
+  { "test-opts", 1, 0, 'O' },
   { "verbose", 0, 0, 'v' },
   { "version", 0, 0, 'V' },
   { "read-only", 0, 0, 'r' },
@@ -451,7 +454,7 @@
 usage (FILE *fp, int n)
 {
   fprintf (fp, _("Usage: umount [-hV]\n"
-	       "       umount -a [-f] [-r] [-n] [-v] [-t vfstypes]\n"
+	       "       umount -a [-f] [-r] [-n] [-v] [-t vfstypes] [-O opts]\n"
 	       "       umount [-f] [-r] [-n] [-v] special | node...\n"));
   exit (n);
 }
@@ -584,7 +587,7 @@
 main (int argc, char *argv[]) {
 	int c;
 	int all = 0;
-	char *types = NULL;
+	char *types = NULL, *test_opts = NULL;
 	int result = 0;
 
 	sanitize_env();
@@ -592,7 +595,7 @@
 	bindtextdomain(PACKAGE, LOCALEDIR);
 	textdomain(PACKAGE);
 
-	while ((c = getopt_long (argc, argv, "adfhlnrt:vV",
+	while ((c = getopt_long (argc, argv, "adfhlnO:rt:vV",
 				 longopts, NULL)) != EOF)
 		switch (c) {
 		case 'a':		/* umount everything */
@@ -614,6 +617,9 @@
 		case 'n':		/* do not write in /etc/mtab */
 			++nomtab;
 			break;
+                case 'O':               /* specify file system options */
+                        test_opts = optarg;
+                        break;
 		case 'r':		/* remount read-only if umount fails */
 			++remount;
 			break;
@@ -645,7 +651,7 @@
 	if (all) {
 		if (types == NULL)
 			types = "noproc";
-		result = umount_all (types);
+		result = umount_all (types, test_opts);
 	} else if (argc &lt; 1) {
 		usage (stderr, 2);
 	} else while (argc--) {
--- mount/umount.8.orig	Mon Nov 26 09:03:24 2001
+++ mount/umount.8	Mon Nov 26 09:04:32 2001
@@ -29,7 +29,7 @@
 .SH SYNOPSIS
 .BI "umount [\-hV]"
 .LP
-.BI "umount -a [\-dflnrv] [\-t " vfstype ]
+.BI "umount -a [\-nrv] [\-t " vfstype "] [\-O " options ]
 .br
 .BI "umount [\-dflnrv] " "dir " | " device " [...]
 .SH DESCRIPTION
@@ -90,6 +90,15 @@
 .B no
 to specify the file system types on which no action should be taken.
 .TP
+.BI \-O " options"
+Indicate that the actions should only be taken on file systems with
+the specified options in
+.IR /etc/fstab .
+More than option type may be specified in a comma separated
+list.  Each option can be prefixed with
+.B no
+to specify options for which no action should be taken.
+.TP
 .B \-f
 Force unmount (in case of an unreachable NFS system).
 (Requires kernel 2.1.116 or later.)

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011121193627</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-21 19:36:27-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

Pierre wrote:
&gt; However for those it may interest, my changes to the loop-AES-v1.4g README
&gt; file are the following :
&gt; 
&gt;     cd util-linux-2.11m
&gt; &lt;insert&gt;
&gt;     ./configure # Otherwise it looked for &lt;linux/tqueue.h&gt; which breaks my
&gt;                   compilation
&gt; &lt;/insert&gt;
&gt;     patch -p1 &lt;../util-linux-2.11m.diff
&gt;     make
&gt;     cd mount
&gt;     install -m 4755 -o root mount umount /bin
&gt;     install -m 755 losetup /sbin
&gt; &lt;   rm -f /usr/man/man8/{mount,umount,losetup}.8.gz
&gt; &lt;   install -m 644 mount.8 umount.8 losetup.8 /usr/man/man8
&gt; &gt;   rm -f /usr/share/man/man8/{mount,umount,losetup}.8.gz
&gt; &gt;   install -m 644 mount.8 umount.8 losetup.8 /usr/share/man/man8
&gt; 
&gt; I also had to purge my /var/cache/man/cat[0-9]/ directories in order to
&gt; bring up the new updated manpages..

About the util-linux compile problem, did you try to compile a virgin
util-linux source or tampered one? Util-linux Makefile is set up so that if
"defines.h" file does not exits, make runs ./configure for you. Virgin
util-linux tarball does not come with "defines.h" file.

/usr/share/man is preferred place to put man pages, but most setups search
/usr/man before /usr/share/man. It's up to you to decide.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011122092121</emailId><senderName>Pierre</senderName><senderEmail>pbedel@wanadoo.fr</senderEmail><timestampReceived>2001-11-22 09:21:21-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

On Wed, 21 Nov 2001, Jari Ruusu wrote:

&gt; &gt; However for those it may interest, my changes to the loop-AES-v1.4g README
&gt; &gt; file are the following :
&gt; &gt; 
&gt; &gt; cd util-linux-2.11m
&gt; &gt; ./configure
&gt; &gt; patch -p1 &lt;../util-linux-2.11m.diff
&gt; &gt; make
&gt; &gt; cd mount
&gt; &gt; install -m 4755 -o root mount umount /bin
&gt; &gt; install -m 755 losetup /sbin
&gt; &gt; &lt;   rm -f /usr/man/man8/{mount,umount,losetup}.8.gz
&gt; &gt; &lt;   install -m 644 mount.8 umount.8 losetup.8 /usr/man/man8
&gt; &gt; &gt; rm -f /usr/share/man/man8/{mount,umount,losetup}.8.gz
&gt; &gt; &gt; install -m 644 mount.8 umount.8 losetup.8 /usr/share/man/man8
&gt; 
&gt; About the util-linux compile problem, did you try to compile a virgin
&gt; util-linux source or tampered one? Util-linux Makefile is set up so that if
&gt; "defines.h" file does not exits, make runs ./configure for you. Virgin
&gt; util-linux tarball does not come with "defines.h" file.
&gt; 

Yep, however when configure is run from 'make', I get the following output :

You don't have &lt;scsi/scsi.h&gt;
You have &lt;linux/blkpg.h&gt;
You have &lt;linux/kd.h&gt;
You have &lt;locale.h&gt;
You have &lt;langinfo.h&gt;
You have &lt;sys/user.h&gt;
You have &lt;asm/types.h&gt;
You don't have inet_aton()
You don't have fsync()
You don't have getdomainname()
You don't have nanosleep()
You don't have personality()
You don't have updwtmp()
You need &lt;linux/tqueue.h&gt;
You have &lt;term.h&gt;
You have ncurses. Using &lt;ncurses/curses.h&gt;.
You don't have termcap
You need -lcrypt
You don't have &lt;libintl.h&gt;
You don't have __progname
You don't have &lt;pty.h&gt; and openpty()
You don't have wide character support
You don't have __NR_pivot_root
You don't have a tm_gmtoff field in struct tm
Your rpcgen seems to work

which doesn't coincide with the results I get when installing a clean util-linux and \
manually running configure :

You have &lt;scsi/scsi.h&gt;
You have &lt;linux/blkpg.h&gt;
You have &lt;linux/kd.h&gt;
You have &lt;locale.h&gt;
You have &lt;langinfo.h&gt;
You have &lt;sys/user.h&gt;
You have &lt;asm/types.h&gt;
You have inet_aton()
You have fsync()
You have getdomainname()
You have nanosleep()
You have personality()
You have updwtmp()
You don't need &lt;linux/tqueue.h&gt;
You have &lt;term.h&gt;
You have ncurses. Using &lt;ncurses/curses.h&gt;.
You have termcap
You need -lcrypt
You have &lt;libintl.h&gt; and gettext()
Assuming that you want to enable NLS support.
(Otherwise, edit defines.h and remove the line with ENABLE_NLS)
You have __progname
You have &lt;pty.h&gt; and openpty()
You have wide character support
You have __NR_pivot_root
You have a tm_gmtoff field in struct tm
Your rpcgen seems to work

The &lt;linux/tqueue.h&gt; is the line that stopped me from compiling properly.

--Pierre
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011122153037</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-22 15:30:37-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

Pierre wrote:
&gt; On Wed, 21 Nov 2001, Jari Ruusu wrote:
&gt; &gt; About the util-linux compile problem, did you try to compile a virgin
&gt; &gt; util-linux source or tampered one? Util-linux Makefile is set up so that if
&gt; &gt; "defines.h" file does not exits, make runs ./configure for you. Virgin
&gt; &gt; util-linux tarball does not come with "defines.h" file.
&gt; &gt;
&gt; 
&gt; Yep, however when configure is run from 'make', I get the following output :
&gt; 
&gt; You don't have &lt;scsi/scsi.h&gt;
&gt; You have &lt;linux/blkpg.h&gt;
&gt; You have &lt;linux/kd.h&gt;
&gt; You have &lt;locale.h&gt;
&gt; You have &lt;langinfo.h&gt;
&gt; You have &lt;sys/user.h&gt;
&gt; You have &lt;asm/types.h&gt;
&gt; You don't have inet_aton()
&gt; You don't have fsync()
&gt; You don't have getdomainname()
&gt; You don't have nanosleep()
&gt; You don't have personality()
&gt; You don't have updwtmp()
&gt; You need &lt;linux/tqueue.h&gt;
&gt; You have &lt;term.h&gt;
&gt; You have ncurses. Using &lt;ncurses/curses.h&gt;.
&gt; You don't have termcap
&gt; You need -lcrypt
&gt; You don't have &lt;libintl.h&gt;
&gt; You don't have __progname
&gt; You don't have &lt;pty.h&gt; and openpty()
&gt; You don't have wide character support
&gt; You don't have __NR_pivot_root
&gt; You don't have a tm_gmtoff field in struct tm
&gt; Your rpcgen seems to work
&gt; 
&gt; which doesn't coincide with the results I get when installing a clean
&gt; util-linux and manually running configure :
&gt; 
&gt; You have &lt;scsi/scsi.h&gt;
&gt; You have &lt;linux/blkpg.h&gt;
&gt; You have &lt;linux/kd.h&gt;
&gt; You have &lt;locale.h&gt;
&gt; You have &lt;langinfo.h&gt;
&gt; You have &lt;sys/user.h&gt;
&gt; You have &lt;asm/types.h&gt;
&gt; You have inet_aton()
&gt; You have fsync()
&gt; You have getdomainname()
&gt; You have nanosleep()
&gt; You have personality()
&gt; You have updwtmp()
&gt; You don't need &lt;linux/tqueue.h&gt;
&gt; You have &lt;term.h&gt;
&gt; You have ncurses. Using &lt;ncurses/curses.h&gt;.
&gt; You have termcap
&gt; You need -lcrypt
&gt; You have &lt;libintl.h&gt; and gettext()
&gt; Assuming that you want to enable NLS support.
&gt; (Otherwise, edit defines.h and remove the line with ENABLE_NLS)
&gt; You have __progname
&gt; You have &lt;pty.h&gt; and openpty()
&gt; You have wide character support
&gt; You have __NR_pivot_root
&gt; You have a tm_gmtoff field in struct tm
&gt; Your rpcgen seems to work
&gt; 
&gt; The &lt;linux/tqueue.h&gt; is the line that stopped me from compiling properly.

It looks like that tests requiring C compiler fail if ./configure is started
from Makefile. It could be an environment variable issue or executable path
issue. What C compiler(s) do you have installed and under what name(s)?

Anyway, I added the "./configure" to loop-AES README so that this can be
avoided in the future.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011122161324</emailId><senderName>Pierre</senderName><senderEmail>pbedel@wanadoo.fr</senderEmail><timestampReceived>2001-11-22 16:13:24-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

On Thu, 22 Nov 2001, Jari Ruusu wrote:
&gt; It looks like that tests requiring C compiler fail if ./configure is started
&gt; from Makefile. It could be an environment variable issue or executable path
&gt; issue. What C compiler(s) do you have installed and under what name(s)?
&gt; 
&gt; Anyway, I added the "./configure" to loop-AES README so that this can be
&gt; avoided in the future.
&gt; 
&gt; Regards,
&gt; Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
&gt; 
I sticked with the (unefficient) RH gcc version 2.96 20000731 (Red Hat Linux 7.1 \
2.96-81) which is pointed to by cc and egcs-2.91.66 19990314/Linux (egcs-1.1.2 \
release) wich is pointed to by kgcc. My path is \
PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:/root/bin


Hope this helps,
--Pierre
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011122201303</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-22 20:13:03-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

[re-sending, sorry if you receive this twice. I did not receive a copy of this
and nothing showed up on archives]

Pierre wrote:
&gt; On Wed, 21 Nov 2001, Jari Ruusu wrote:
&gt; &gt; About the util-linux compile problem, did you try to compile a virgin
&gt; &gt; util-linux source or tampered one? Util-linux Makefile is set up so that if
&gt; &gt; "defines.h" file does not exits, make runs ./configure for you. Virgin
&gt; &gt; util-linux tarball does not come with "defines.h" file.
&gt; &gt;
&gt; 
&gt; Yep, however when configure is run from 'make', I get the following output :
&gt; 
&gt; You don't have &lt;scsi/scsi.h&gt;
&gt; You have &lt;linux/blkpg.h&gt;
&gt; You have &lt;linux/kd.h&gt;
&gt; You have &lt;locale.h&gt;
&gt; You have &lt;langinfo.h&gt;
&gt; You have &lt;sys/user.h&gt;
&gt; You have &lt;asm/types.h&gt;
&gt; You don't have inet_aton()
&gt; You don't have fsync()
&gt; You don't have getdomainname()
&gt; You don't have nanosleep()
&gt; You don't have personality()
&gt; You don't have updwtmp()
&gt; You need &lt;linux/tqueue.h&gt;
&gt; You have &lt;term.h&gt;
&gt; You have ncurses. Using &lt;ncurses/curses.h&gt;.
&gt; You don't have termcap
&gt; You need -lcrypt
&gt; You don't have &lt;libintl.h&gt;
&gt; You don't have __progname
&gt; You don't have &lt;pty.h&gt; and openpty()
&gt; You don't have wide character support
&gt; You don't have __NR_pivot_root
&gt; You don't have a tm_gmtoff field in struct tm
&gt; Your rpcgen seems to work
&gt; 
&gt; which doesn't coincide with the results I get when installing a clean
&gt; util-linux and manually running configure :
&gt; 
&gt; You have &lt;scsi/scsi.h&gt;
&gt; You have &lt;linux/blkpg.h&gt;
&gt; You have &lt;linux/kd.h&gt;
&gt; You have &lt;locale.h&gt;
&gt; You have &lt;langinfo.h&gt;
&gt; You have &lt;sys/user.h&gt;
&gt; You have &lt;asm/types.h&gt;
&gt; You have inet_aton()
&gt; You have fsync()
&gt; You have getdomainname()
&gt; You have nanosleep()
&gt; You have personality()
&gt; You have updwtmp()
&gt; You don't need &lt;linux/tqueue.h&gt;
&gt; You have &lt;term.h&gt;
&gt; You have ncurses. Using &lt;ncurses/curses.h&gt;.
&gt; You have termcap
&gt; You need -lcrypt
&gt; You have &lt;libintl.h&gt; and gettext()
&gt; Assuming that you want to enable NLS support.
&gt; (Otherwise, edit defines.h and remove the line with ENABLE_NLS)
&gt; You have __progname
&gt; You have &lt;pty.h&gt; and openpty()
&gt; You have wide character support
&gt; You have __NR_pivot_root
&gt; You have a tm_gmtoff field in struct tm
&gt; Your rpcgen seems to work
&gt; 
&gt; The &lt;linux/tqueue.h&gt; is the line that stopped me from compiling properly.

It looks like that tests requiring C compiler fail if ./configure is started
from Makefile. It could be an environment variable issue or executable path
issue. What C compiler(s) do you have installed and under what name(s)?

Anyway, I added the "./configure" to loop-AES README so that this can be
avoided in the future.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011122202544</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-22 20:25:44-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

Pierre wrote:
&gt; On Thu, 22 Nov 2001, Jari Ruusu wrote:
&gt; &gt; It looks like that tests requiring C compiler fail if ./configure is started
&gt; &gt; from Makefile. It could be an environment variable issue or executable path
&gt; &gt; issue. What C compiler(s) do you have installed and under what name(s)?
&gt; &gt;
&gt; &gt; Anyway, I added the "./configure" to loop-AES README so that this can be
&gt; &gt; avoided in the future.
&gt; &gt;
&gt; &gt; Regards,
&gt; &gt; Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
&gt; &gt;
&gt; I sticked with the (unefficient) RH gcc version 2.96 20000731 (Red Hat
&gt; Linux 7.1 2.96-81) which is pointed to by cc and egcs-2.91.66
&gt; 19990314/Linux (egcs-1.1.2 release) wich is pointed to by kgcc.
&gt; My path is
&gt; PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/kerberos/sbin:/usr/kerberos/bin:
&gt; /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:
&gt; /root/bin

Some duplication in PATH but looks ok to me.

What do these commands output?

    whereis gcc
    whereis cc
    whereis kgcc

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011123083631</emailId><senderName>Pierre</senderName><senderEmail>pbedel@wanadoo.fr</senderEmail><timestampReceived>2001-11-23 08:36:31-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

On Thu, 22 Nov 2001, Jari Ruusu wrote:

&gt; Pierre wrote:
&gt; &gt; On Thu, 22 Nov 2001, Jari Ruusu wrote:
&gt; &gt; &gt; It looks like that tests requiring C compiler fail if ./configure is started
&gt; &gt; &gt; from Makefile. It could be an environment variable issue or executable path
&gt; &gt; &gt; issue. What C compiler(s) do you have installed and under what name(s)?
&gt; &gt; &gt;
&gt; &gt; &gt; Anyway, I added the "./configure" to loop-AES README so that this can be
&gt; &gt; &gt; avoided in the future.
&gt; &gt; &gt;
&gt; &gt; &gt; Regards,
&gt; &gt; &gt; Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
&gt; &gt; &gt;
&gt; &gt; I sticked with the (unefficient) RH gcc version 2.96 20000731 (Red Hat
&gt; &gt; Linux 7.1 2.96-81) which is pointed to by cc and egcs-2.91.66
&gt; &gt; 19990314/Linux (egcs-1.1.2 release) wich is pointed to by kgcc.
&gt; &gt; My path is
&gt; &gt; PATH=/usr/local/sbin:/usr/sbin:/sbin:/usr/kerberos/sbin:/usr/kerberos/bin:
&gt; &gt; /usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:
&gt; &gt; /root/bin
&gt; 
&gt; Some duplication in PATH but looks ok to me.
&gt; 
&gt; What do these commands output?
&gt; 
&gt;     whereis gcc
gcc: /usr/bin/gcc /usr/share/man/man1/gcc.1.gz

&gt;     whereis cc
cc: /usr/bin/cc

&gt;     whereis kgcc
kgcc: /usr/bin/kgcc

--Pierre
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011122153007</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-22 15:30:07-0400</timestampReceived><subject>Re: Root partition encryption</subject><body>

Kostas Psarras wrote:
&gt; Could someone clarify what Jari means in the 8th step of the README by:
&gt; "
&gt; Reboot system from rescue floppy / cdrom / other partition on your
&gt;     system, so that the partition you are about to encrypt is _not_ mounted.
&gt;     Note: you must use loop-AES' loop.o module and loop-AES modified losetup
&gt;     program for this.
&gt; 
&gt;         insmod loop
&gt;         losetup -e AES128 /dev/loop5 /dev/hda2
&gt;         dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
&gt;         sync
&gt;         mount -t ext2 /dev/loop5 /mnt
&gt; "
&gt; 
&gt; I mean what is needed to do the trick? Perhaps a disk with 3 partitions?
&gt; 
&gt; I think i have to build (besides /boot and / partitions) a rescue disk
&gt; with same kernel version of my / so the loop-2.4.7.o can be used . . .
&gt; 
&gt; Is that right?

Yes, you need to boot from floppy, and you need a loop.o module that matches
your boot floppy kernel. Kernel version on the boot floppy does not matter
(any 2.2.x or 2.4.x should work) as long as loop.o module is compiled for
that kernel.

Easiest way to do that is to use existing boot floppy with some kernel. You
need that kernel's source and .config to compile a new loop.o module for
that kernel.

1)  Install boot disk kernel source and .config somewhere

2)  Check that CONFIG_MODULES is Y and CONFIG_BLK_DEV_LOOP is not Y in
    .config file. If they are not like that, you have to replace the kernel
    on the boot floppy.

3)  Recompile kernel without installing:

    make oldconfig
    make dep &amp;&amp; make clean &amp;&amp; make bzImage
    make modules

4)  Mount an "extra" ext2 formatted floppy on /floppy

5)  cd to loop-AES directory

6)  Build loop.o module for that kernel by typing:

    make LINUX_SOURCE=/path/to/kernel/dir INSTALL_MOD_PATH=/floppy

7)  Copy loop-AES enhanced losetup to floppy. There may be library
    dependency problems with boot disk C library. Statically linked losetup
    program avoids such troubles.

    cp /sbin/losetup /floppy

8)  Unmount floppy

9)  Boot from original boot floppy (or floppies)

10) Mount "extra" floppy on /floppy

11) Manually load loop.o driver to kernel:

    insmod /floppy/lib/modules/*/block/loop.o

12) Proceed with "/floppy/losetup" and "dd" as explained in loop-AES README

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011113225537</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-11-13 22:55:37-0400</timestampReceived><subject>Re: Bad Discrimination</subject><body>

On Tue, 13 Nov 2001, Hugh Daniel wrote:

&gt; Cool, from the email bounce I just got (below) I will guess that
&gt; Crypto on Linux is only the purview of the obedient and well tracked
&gt; in the Dossier Society.

Now if you stop flaming and READ the bounce in more detail,
you'll see it contains a URL:

http://orbz.org/b.php?140.174.2.1

This url not only shows that the host is an open mail relay,
but, if we click through to the URL below, that that mail
server is being actively (ab)used by spammers:

http://spamcop.net/w3m?action=checkblock&amp;ip=140.174.2.1

The solution is for toad.com to fix their mailserver so
it cannot be used for spam relay.

&gt; No wonder I have never paid any attention to your Linux Cryto
&gt; list...

I bet that you'd be paying even less attention if
NL.linux.org didn't have any anti-spam measures and
the list was 90% spam.

regards,

Rik van Riel


&gt; - ------- Forwarded Message
&gt; 
&gt; Return-Path: MAILER-DAEMON@ecotone.toad.com
&gt; Delivery-Date: Tue Nov 13 13:10:46 2001
&gt; Return-Path: &lt;&gt;
&gt; Received: from toad.com (toad.com [140.174.2.1])
&gt; 	by ecotone.toad.com (8.8.7/8.8.7) with ESMTP id NAA30724
&gt; 	for &lt;hugh@ecotone.syzygy.com&gt;; Tue, 13 Nov 2001 13:10:46 -0800
&gt; Received: from localhost (localhost) by toad.com (8.7.5/8.7.3) with internal id \
&gt;                 OAA07611; Tue, 13 Nov 2001 14:21:56 -0800 (PST)
&gt; Date: Tue, 13 Nov 2001 14:21:56 -0800 (PST)
&gt; From: Mail Delivery Subsystem &lt;MAILER-DAEMON@toad.com&gt;
&gt; Subject: Returned mail: User unknown
&gt; Message-Id: &lt;200111132221.OAA07611@toad.com&gt;
&gt; To: hugh@toad.com
&gt; MIME-Version: 1.0
&gt; Content-Type: multipart/report; report-type=delivery-status;
&gt; 	boundary="OAA07611.1005690116/toad.com"
&gt; Auto-Submitted: auto-generated (failure)
&gt; 
&gt; This is a MIME-encapsulated message
&gt; 
&gt; - - --OAA07611.1005690116/toad.com
&gt; 
&gt; The original message was received at Tue, 13 Nov 2001 14:21:45 -0800 (PST)
&gt; from hugh@localhost
&gt; 
&gt; ----- The following addresses have delivery notifications -----
&gt; listar@nl.linux.org  (unrecoverable error)
&gt; 
&gt; ----- Transcript of session follows -----
&gt; ... while talking to humbolt.nl.linux.org.:
&gt; &lt;&lt;&lt; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
&gt; &lt;&lt;&lt; 550-If you feel we mistreat you, do contact us.
&gt; &lt;&lt;&lt; 550 Ask HELP for our contact information.
&gt; ... while talking to pentafluge.infradead.org.:
&gt; &gt; &gt; &gt; RCPT To:&lt;listar@nl.linux.org&gt;
&gt; &lt;&lt;&lt; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
&gt; &lt;&lt;&lt; 550 mail from 140.174.2.1 rejected: administrative prohibition (host is \
&gt; blacklisted) 550 listar@nl.linux.org... User unknown
&gt; 
&gt; - - --OAA07611.1005690116/toad.com
&gt; Content-Type: message/delivery-status
&gt; 
&gt; Reporting-MTA: dns; toad.com
&gt; Arrival-Date: Tue, 13 Nov 2001 14:21:45 -0800 (PST)
&gt; 
&gt; Final-Recipient: RFC822; listar@nl.linux.org
&gt; Action: failed
&gt; Status: 5.2.0
&gt; Remote-MTA: DNS; pentafluge.infradead.org
&gt; Diagnostic-Code: SMTP; 550-Open relay.  Please see http://orbz.org/?140.174.2.1
&gt; Last-Attempt-Date: Tue, 13 Nov 2001 14:21:56 -0800 (PST)
&gt; 
&gt; - - --OAA07611.1005690116/toad.com
&gt; Content-Type: message/rfc822
&gt; 
&gt; Return-Path: hugh
&gt; Received: (from hugh@localhost) by toad.com (8.7.5/8.7.3) id OAA07607 for \
&gt;                 listar@nl.linux.org; Tue, 13 Nov 2001 14:21:45 -0800 (PST)
&gt; Date: Tue, 13 Nov 2001 14:21:45 -0800 (PST)
&gt; From: Hugh Daniel &lt;hugh&gt;
&gt; Message-Id: &lt;200111132221.OAA07607@toad.com&gt;
&gt; To: listar@nl.linux.org
&gt; 
&gt; subscribe linux-crypto@nl.linux.org
&gt; 
&gt; - - --OAA07611.1005690116/toad.com--
&gt; 
&gt; - ------- End of Forwarded Message
&gt; 
&gt; 
&gt; -----BEGIN PGP SIGNATURE-----
&gt; Version: 2.6.3ia
&gt; Charset: noconv
&gt; Comment: For the matching public key, finger the Reply-To: address.
&gt; 
&gt; iQCVAwUBO/GfilZpdJR7FBQRAQGV0QQAuBzl7lXjrJVFcECYK9K/HDOg5vDVhSfw
&gt; m/yPkQnY4a+ejPxm7Mgs/QB/QFmMGDjbUsoQq3T3N0vVmCfvwjkK9JZlAC+bma0v
&gt; pw5AV9CGrc5dvIh/lg5irYZRdOsLGcjgAwBHxR/xVIXztScnmLxrL4HDy5wCrDdK
&gt; zn7Orl+OyNI=
&gt; =eXNb
&gt; -----END PGP SIGNATURE-----
&gt; 

Rik
-- 
Shortwave goes a long way:  irc.starchat.net  #swl

http://www.surriel.com/		http://distro.conectiva.com/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011113230438</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-11-13 23:04:38-0400</timestampReceived><subject>Re: Bad Discrimination</subject><body>

Le Mardi 13 Novembre 2001 23:55, Rik van Riel a √©crit :
&gt;
&gt; Now if you stop flaming and READ the bounce in more detail,
&gt; you'll see it contains a URL:
&gt;
&gt; http://orbz.org/b.php?140.174.2.1
&gt;
&gt; This url not only shows that the host is an open mail relay,

Using ORBZ is Good Karma (TM). I use it on my servers, and am glad to see 
that this ML uses it too.

If the mail server you're mailing thru is broken and thus listed as so, 
please complain to its admin, not to the people who don't want to receive 
tons of spam transmitted thru broken MTAs.

Best regards.

-- 
Michel Bouissou &lt;michel@bouissou.net&gt; OpenPGP ID 0x5C2BEE8F
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011114000516</emailId><senderName>Hugh Daniel</senderName><senderEmail>hugh@road.xisp.net</senderEmail><timestampReceived>2001-11-14 00:05:16-0400</timestampReceived><subject>Re: Bad Discrimination</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

  Rik (and everyone else), this is an emotional land mine that we have
stepped into.  Worse I knew exactly what I was doing when I triggered
it.  I did it because your actions (along with MANY others) I believe
are wrong and leading our network community down a path that ends in a
sort of Happy Politically Correct Fascist Hell.  Or maybe, if your a
Government or similar control group, a Pristine safely Regulated
Heaven.
  If you and others continue along these lines of filtering email it
will end up with a world where the US Post Office will controls all
email, it will be safe (no crypto or anthrax content!) and it will be
full of USPS blessed SPAM.  Likely it will be a crime to filter or
even mark the SPAM.

  You will end up loosing, painfully loosing, no matter which way
things go.  The spammers are BUYING entire ISP's so that they can spam
away.  While you folks are breaking email transport, trashing
important anonymising email forwarding and helping encourage
governments in planning to filter 'bad' content.

  Remember, that in the long run that commercial advertising will never
be considered 'bad' content, while my (and maybe your...) political
views will be.  Thanks to your actions likely rather sooner.

  I am also upset that a list talking about crypto would filter
possible list members based on IP address.  That's really lame, IP
addresses are like numbers at the deli counter, just a way of getting
some order placed.  The least you could do is only allow subscriptions
to folks who can sign their requests.

  I see a conflict in having a list about crypto that wants to keep
some folks (me in this case) out due to how they behave on the net.  I
presume that you also filter out all Arabs (as of 9/11) as well?
There is a cognitive clash somewhere here in your supporting crypto
but not supporting pseudonyms (open relays) access to the crypto
lists.

  Rik, I know exactly what your bounce was about.  I even wasted my
time to read it and confirm that it was the evil I thought it was,
BEFORE I send my first missive.  I could easily have gone to another
machine and subscribed to the list. But that is not the right thing
to do, as it leaves you folks out there screwing up the net and
inviting in government's to solve your problems.

  I bitched (yes, even flamed!) as it was the right thing to do.

  Building secure and stable systems is very important to me, the
discrimination you implement is soft and easy and in the long run not
just pointless but damaging to Personal Liberty.

  Freedom is hard.  We have to build better tools (MUA's not censor
ware in the MTA's) rather then act like most of our fathers and
mothers and just ban what we don't like, because someone else higher
up in the power structures your building will always end up with
control of of the list of banned books...er...email.

		||ugh Daniel
		hugh@freeswan.org

			Systems Testing &amp; Project mis-Management
			The Linux FreeS/WAN Project
			http://www.freeswan.org

-----BEGIN PGP SIGNATURE-----
Version: 2.6.3ia
Charset: noconv
Comment: For the matching public key, finger the Reply-To: address.

iQCVAwUBO/G1O1ZpdJR7FBQRAQGydgQA4wdC2NsrTneCOoSaOieTcBYAseKW5RoA
LVwk13HDnmQ+uK05AfiQl4aleZcK3VRa/IpkdKQ25UBU5+YJL6hjBRjI1991FWew
S7lOxYDrNI2BDSgg0KEx+NuGhvzM6y1Z0wpU3E4YGMP5gL+TpRfCNpTZzqkOWVfR
khThpw1rxKk=
=Zpod
-----END PGP SIGNATURE-----
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011114001230</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-11-14 00:12:30-0400</timestampReceived><subject>Re: Bad Discrimination</subject><body>

On Tue, 13 Nov 2001, Hugh Daniel wrote:

&gt;   Rik, I know exactly what your bounce was about.

&gt;   I bitched (yes, even flamed!) as it was the right thing to do.

*shrug*

Remember that your bandwidth is still being stolen
by spammers, though considering the above I guess
you might also think it's ok for spammers to use your
bandwidth with you paying for it ...

For the evidence, see:
http://spamcop.net/w3m?action=checkblock&amp;ip=140.174.2.1
http://orbz.org/b.php?140.174.2.1

kind regards,

Rik
-- 
Shortwave goes a long way:  irc.starchat.net  #swl

http://www.surriel.com/		http://distro.conectiva.com/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>200111111010520</emailId><senderName>"Stephen J. Thompson"</senderName><senderEmail>stephen@cass-ltd.co.uk</senderEmail><timestampReceived>2001-11-11 10:10:52-0400</timestampReceived><subject>FStab and CryptoAPI</subject><body>

Hello all,

I am trying to allow my users to mount a cryptoapi'ed partition. I have in my 
fstab file the following:

/dev/hdb2	/home/stephen/encrypted	reiserfs	
user,noauto,loop,encryption=twofish,keybits=256	0	0

I have screwed something up, when I enter the command: mount encrypted/ (the 
dir to mount)

I am asked for the keysize (Which I enter) and then the password. (I enter 
this also).

Then I get an error message:
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
       or too many mounted file systems

Any ideas?

Thanks.

Stephen.
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011111143457</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-11-11 14:34:57-0400</timestampReceived><subject>Re: FStab and CryptoAPI</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday 11 November 2001 11:10, Stephen J. Thompson wrote:
&lt;snip&gt;
&gt; Then I get an error message:
&gt; mount: wrong fs type, bad option, bad superblock on /dev/loop0,
&gt;        or too many mounted file systems
&lt;snip&gt;

This normally means that you mistyped the passphrase, either at mount 
time or at creation time.

Marc

- -- 
It's good fortune for the government that the masses don't think.
                                                         -- Adolf Hitler
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE77oyR3oWD+L2/6DgRAnoNAKCqf+o2MkBTmtuwIXf41jxTcu9E/ACg0YkI
BI+GeoCzA+jByxKYQjRbpRQ=
=oCsQ
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011111163947</emailId><senderName>"Stephen J. Thompson"</senderName><senderEmail>stephen@cass-ltd.co.uk</senderEmail><timestampReceived>2001-11-11 16:39:47-0400</timestampReceived><subject>Re: FStab and CryptoAPI</subject><body>

Hello,

I have checked that, I can mount it ok under the root account. 

Regards,

Stephen.


On Sunday 11 Nov 2001 2:34 pm, Marc Mutz wrote:
&gt; On Sunday 11 November 2001 11:10, Stephen J. Thompson wrote:
&gt; &lt;snip&gt;
&gt;
&gt; &gt; Then I get an error message:
&gt; &gt; mount: wrong fs type, bad option, bad superblock on /dev/loop0,
&gt; &gt;        or too many mounted file systems
&gt;
&gt; &lt;snip&gt;
&gt;
&gt; This normally means that you mistyped the passphrase, either at mount
&gt; time or at creation time.
&gt;
&gt; Marc
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011112103612</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-11-12 10:36:12-0400</timestampReceived><subject>Re: FStab and CryptoAPI</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday 11 November 2001 17:39, Stephen J. Thompson wrote:
&lt;snip&gt;
&gt; I have checked that, I can mount it ok under the root account.
&lt;snip&gt;

Then this looks like a permission problem. You can strace the mount 
command and compare the result with a successful attempt under root.
This should give you an idea of where it fails.

Another idea: Does modprobe'ing the cipher module before attempting the 
mount work?

Marc

- -- 
We have once again come full circle on the same basic question of
privacy on the Internet. If you have privacy, so does the person
sending around terrorist documents. And of course, we wouldn't want
that now, would we? [...] But what if governments, concerned about
mounting public pressure, decided to label protesters at the next WTO
roundtable, World Bank meeting, or G-8 summit as terrorists?
                  -- John Horvath: The Internet: A Terrorist Network?
                     Telepolis 2001/08/22 (#9350)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE778L63oWD+L2/6DgRAnMlAKCPADYAa3HpCG5xUV/TF6g66nm7OgCeLd+e
IVnisdjSbw+L/lJuz+9ooc8=
=HQVG
-----END PGP SIGNATURE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011106230602</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-11-06 23:06:02-0400</timestampReceived><subject>Re: Where is kerneli.org</subject><body>

On Wed, Nov 07, 2001 at 12:49:23AM +0100, mail@joerg-winne.de wrote:
&gt; So where can I find recent patches or are they no longer needed. I didn't
&gt; find the options in the kernel-configuration.
&gt; 

Just try ftp.kernel.org

	/pub/linux/kernel/crypto

There might also be some patches in 

	/pub/linux/kernel/people/hvr

-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011104223548</emailId><senderName>"Paul Hilton"</senderName><senderEmail>paul_hilton@yahoo.com</senderEmail><timestampReceived>2001-11-04 22:35:48-0400</timestampReceived><subject>Re: loop-AES problems with RedHat 7.2</subject><body>

FWIW:
I got the same error with Red Hat 7.1 with a 2.4.3-12 kernel,
I discovered that one of the crypto modules was not being
loaded automatically, loading them manually solved the
problem.

----- Original Message -----
From: "Jonas Larsson" &lt;jonas53@hotmail.com&gt;
To: &lt;linux-crypto@nl.linux.org&gt;
Sent: Sunday, November 04, 2001 2:05 PM
Subject: loop-AES problems with RedHat 7.2


&gt; Hello,
&gt;
&gt; I try to build loop-AES-v1.4f (latest) on a RedHat 7.2 Linux i686.
&gt; Unfortunately the "make tests" failes:
&gt;
&gt; # make tests
&gt; dd if=/dev/zero of=test-file1 bs=1024 count=10
&gt; 10+0 records in
&gt; 10+0 records out
&gt; cp test-file1 test-file3
&gt; echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
&gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; make: *** [tests] Error 1
&gt;
&gt; :-(
&gt;
&gt; This is my steps to get to this point:
&gt;
&gt; Installed the kernel-source rpms for 2.4.9-13 (latest).
&gt; Got the RedHat 7.2 .config:
&gt;
&gt; # cp -a /usr/src/linux-2.4.9-13/configs/kernel-2.4.9-i686.config \
&gt;   /usr/src/linux-2.4.9-13/.config
&gt;
&gt; # cd /usr/src/linux-2.4.9-13
&gt; # make xconfig
&gt;
&gt; [Changed CONFIG_BLK_DEV_LOOP=n (by mouseclicking :)]
&gt; [Save and exit]
&gt;
&gt; Checked that I did the right thing:
&gt; # grep CONFIG_BLK_DEV_LOOP /usr/src/linux-2.4.9-13/.config
&gt; # CONFIG_BLK_DEV_LOOP is not set
&gt;
&gt; # make dep
&gt; # make bzImage
&gt; # make modules
&gt;
&gt; The last two steps may not have been needed but I did it just to be sure.
&gt;
&gt; # cd /tmp
&gt; # tar xjf /tmp/loop-AES-v1.4f.tar.bz2
&gt; # cd loop-AES-v1.4f
&gt; # make clean
&gt; rm -f *.o *.orig *.rej patched-loop.[ch] test-file[1234]
&gt;
&gt; Now time for building:
&gt;
&gt; # make
&gt; cd /lib/modules/2.4.9-13/build &amp;&amp; make SUBDIRS=/tmp/loop-AES-v1.4f modules
&gt; make[1]: Entering directory `/usr/src/linux-2.4.9-13'
&gt; make -C  /tmp/loop-AES-v1.4f CFLAGS="-D__KERNEL__
&gt; -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes -Wno-trigraphs
&gt; -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common -Wno-unused -pip
e
&gt; -mpreferred-stack-boundary=2 -march=i686 -DMODULE -DMODVERSIONS -include
&gt; /usr/src/linux-2.4.9-13/include/linux/modversions.h" MAKING_MODULES=1
&gt; modules
&gt; make[2]: Entering directory `/tmp/loop-AES-v1.4f'
&gt; rm -f *.o *.orig *.rej patched-loop.[ch] test-file[1234]
&gt; rm -f patched-loop.[ch]
&gt; cp /usr/src/linux-2.4.9-13/drivers/block/loop.c patched-loop.c
&gt; *** BEGINNING OF SECTION TO IGNORE PATCH ERRORS ***
&gt; patch -p0 -l -f --dry-run &lt; loop.c-2.4.diff || cp loop.c-2.4.original
&gt; patched-loop.c
&gt; patching file patched-loop.c
&gt; Hunk #1 succeeded at 53 (offset 4 lines).
&gt; Hunk #2 succeeded at 87 with fuzz 1 (offset 2 lines).
&gt; Hunk #3 FAILED at 130.
&gt; Hunk #4 succeeded at 157 with fuzz 1 (offset 1 line).
&gt; Hunk #5 succeeded at 413 (offset 2 lines).
&gt; Hunk #6 FAILED at 431.
&gt; Hunk #7 succeeded at 461 (offset 3 lines).
&gt; Hunk #8 succeeded at 479 (offset 2 lines).
&gt; Hunk #9 succeeded at 488 (offset 3 lines).
&gt; Hunk #10 succeeded at 516 with fuzz 2 (offset 12 lines).
&gt; Hunk #11 succeeded at 516 (offset 4 lines).
&gt; Hunk #12 succeeded at 538 (offset 11 lines).
&gt; Hunk #13 FAILED at 546.
&gt; Hunk #14 succeeded at 548 (offset -5 lines).
&gt; Hunk #15 FAILED at 573.
&gt; Hunk #16 FAILED at 605.
&gt; Hunk #17 succeeded at 662 (offset 11 lines).
&gt; Hunk #18 succeeded at 780 (offset 1 line).
&gt; Hunk #19 FAILED at 838.
&gt; Hunk #20 succeeded at 956 (offset 54 lines).
&gt; Hunk #21 succeeded at 1017 (offset 1 line).
&gt; Hunk #22 succeeded at 1113 (offset 50 lines).
&gt; Hunk #23 succeeded at 1076 (offset 1 line).
&gt; Hunk #24 succeeded at 1136 (offset 50 lines).
&gt; Hunk #25 succeeded at 1100 (offset 1 line).
&gt; Hunk #26 succeeded at 1181 (offset 48 lines).
&gt; Hunk #27 succeeded at 1176 (offset 1 line).
&gt; Hunk #28 succeeded at 1238 (offset 48 lines).
&gt; Hunk #29 succeeded at 1207 (offset 1 line).
&gt; 6 out of 29 hunks FAILED -- saving rejects to file patched-loop.c.rej
&gt; *** END OF SECTION TO IGNORE PATCH ERRORS ***
&gt; patch -p0 -l -f &lt; loop.c-2.4.diff
&gt; patching file patched-loop.c
&gt;
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes
&gt; -Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common
&gt; -Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE
&gt; -DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h
&gt; -DDO_GENERIC_FILE_READ_5_PARAMS -DEXPORT_SYMTAB -c patched-loop.c
&gt; -o patched-loop.o
&gt;
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes
&gt; -Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common
&gt; -Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE
&gt; -DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h
&gt; -DDO_GENERIC_FILE_READ_5_PARAMS -c aes-glue.c -o aes-glue.o
&gt;
gcc -D__KERNEL__ -I/usr/src/linux-2.4.9-13/include -Wall -Wstrict-prototypes
&gt; -Wno-trigraphs -O2 -fomit-frame-pointer -fno-strict-aliasing -fno-common
&gt; -Wno-unused -pipe -mpreferred-stack-boundary=2 -march=i686 -DMODULE
&gt; -DMODVERSIONS -include /usr/src/linux-2.4.9-13/include/linux/modversions.h
&gt; -DDO_GENERIC_FILE_READ_5_PARAMS -c aes.c -o aes.o
&gt; ld -m elf_i386 -r patched-loop.o aes-glue.o aes.o -o loop.o
&gt; mkdir -p /lib/modules/2.4.9-13custom/block
&gt; cp -p loop.o /lib/modules/2.4.9-13custom/block
&gt; sync
&gt; make[2]: Leaving directory `/tmp/loop-AES-v1.4f'
&gt; make[1]: Leaving directory `/usr/src/linux-2.4.9-13'
&gt;
&gt; Hmm... 6 out of 29 patchhunks failed... maybe not that good :-(
&gt;
&gt; Time for building new mount, umount and losetup:
&gt;
&gt; # tar xjf /tmp/util-linux-2.11l.tar.bz2
&gt; # cd util-linux-2.11l
&gt; # patch -p1 &lt;../util-linux-2.11l.diff
&gt; patching file mount/Makefile
&gt; patching file mount/lomount.c
&gt; patching file mount/losetup.8
&gt; patching file mount/mount.8
&gt; patching file mount/mount.c
&gt; patching file mount/sha512.c
&gt; patching file mount/sha512.h
&gt; # make
&gt; [...] Seemed to be ok.
&gt; # cd mount
&gt; # install -m 4755 -o root mount umount /bin
&gt; # install -m 755 losetup /sbin
&gt; # rm -f /usr/share/man/man8/{mount,umount,losetup}.8.gz
&gt; # install -m 644 mount.8 umount.8 losetup.8 /usr/share/man/man8
&gt; # cd ../..
&gt;
&gt; Now for the failing test:
&gt;
&gt; # make tests
&gt; dd if=/dev/zero of=test-file1 bs=1024 count=10
&gt; 10+0 records in
&gt; 10+0 records out
&gt; cp test-file1 test-file3
&gt; echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
&gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; make: *** [tests] Error 1
&gt;
&gt; Any ideas?
&gt;
&gt;
&gt; Best regards,
&gt;
&gt;     Jonas
&gt;
&gt; _________________________________________________________________
&gt; H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se
&gt;
&gt; -
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011104232548</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-04 23:25:48-0400</timestampReceived><subject>Re: loop-AES problems with RedHat 7.2</subject><body>

Jonas Larsson wrote:
&gt; I try to build loop-AES-v1.4f (latest) on a RedHat 7.2 Linux i686.
&gt; Unfortunately the "make tests" failes:
&gt; 
&gt; # make tests
&gt; dd if=/dev/zero of=test-file1 bs=1024 count=10
&gt; 10+0 records in
&gt; 10+0 records out
&gt; cp test-file1 test-file3
&gt; echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
&gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; make: *** [tests] Error 1

You probably have 2 loop.o modules in /lib/modules/`uname -r`/ tree.

Can you try "make modules_install" after compiling your kernel. "make
modules_install" is supposed to remove the old wrong loop.o module if
CONFIG_BLK_DEV_LOOP is N.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011105045313</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-11-05 04:53:13-0400</timestampReceived><subject>Re: loop-AES problems with RedHat 7.2</subject><body>

&gt; &gt; I try to build loop-AES-v1.4f (latest) on a RedHat 7.2 Linux i686.
&gt; &gt; Unfortunately the "make tests" failes:
&gt; &gt;
&gt; &gt; # make tests
&gt; &gt; dd if=/dev/zero of=test-file1 bs=1024 count=10
&gt; &gt; 10+0 records in
&gt; &gt; 10+0 records out
&gt; &gt; cp test-file1 test-file3
&gt; &gt; echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
&gt; &gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; &gt; make: *** [tests] Error 1
&gt;
&gt;You probably have 2 loop.o modules in /lib/modules/`uname -r`/ tree.
&gt;
&gt;Can you try "make modules_install" after compiling your kernel. "make
&gt;modules_install" is supposed to remove the old wrong loop.o module if
&gt;CONFIG_BLK_DEV_LOOP is N.

I don't have "CONFIG_BLK_DEV_LOOP is N", I have "# CONFIG_BLK_DEV_LOOP is 
not set" but I suppose that is ok.

Anyway, I will try "make modules_install" after the kernel compilation:

# find /lib/modules/ -name "loop.o"
/lib/modules/2.4.9-13/kernel/drivers/block/loop.o
/lib/modules/2.4.9-13custom/block/loop.o

(2.4.9-13custom was created by "make" with loop-AES.)

# cd /usr/src/linux-2.4.9-13
# make modules_install
[...]

But the "loop.o" didn't got removed:

# find /lib/modules/ -name "loop.o"
/lib/modules/2.4.9-13/kernel/drivers/block/loop.o
/lib/modules/2.4.9-13custom/block/loop.o

So since it still is there I removed it by hand:

# mv /lib/modules/2.4.9-13/kernel/drivers/block/loop.o /tmp/

# find /lib/modules/ -name "loop.o"
/lib/modules/2.4.9-13custom/block/loop.o

No "loop.o" is loaded so far:

# lsmod
Module                  Size  Used by
nfs                    79872   4  (autoclean)
lockd                  53168   1  (autoclean) [nfs]
sunrpc                 64816   1  (autoclean) [nfs lockd]
binfmt_misc             6448   1
autofs                 11584   2  (autoclean)
3c59x                  26496   1
ipchains               39392   0
usb-uhci               21696   0  (unused)
usbcore                51808   1  [usb-uhci]
ext3                   62480   7
jbd                    41056   7  [ext3]

Now for the "make tests" again:

# make tests
dd if=/dev/zero of=test-file1 bs=1024 count=10
10+0 records in
10+0 records out
cp test-file1 test-file3
echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
/dev/loop7: No such device or address
make: *** [tests] Error 1

:-(

But then... :-) I read Paul Hilton's comment "I discovered that one of the 
crypto modules was not being loaded automatically, loading them manually 
solved the problem.".

So I tried that:

# insmod /lib/modules/2.4.9-13custom/block/loop.o

# lsmod
Module                  Size  Used by
loop                   41296   0  (unused)
nfs                    79872   5  (autoclean)
lockd                  53168   1  (autoclean) [nfs]
sunrpc                 64816   1  (autoclean) [nfs lockd]
binfmt_misc             6448   1
autofs                 11584   2  (autoclean)
3c59x                  26496   1
ipchains               39392   0
usb-uhci               21696   0  (unused)
usbcore                51808   1  [usb-uhci]
ext3                   62480   7
jbd                    41056   7  [ext3]

# make tests
dd if=/dev/zero of=test-file1 bs=1024 count=10
10+0 records in
10+0 records out
cp test-file1 test-file3
echo 12345678901234567890 | losetup -p 0 -e AES128 /dev/loop7 test-file1
dd if=/dev/zero of=/dev/loop7 bs=1024 count=10 conv=notrunc
10+0 records in
10+0 records out
dd if=/dev/loop7 of=test-file4 bs=10240 count=1
1+0 records in
1+0 records out
losetup -d /dev/loop7
md5sum test-file1 &gt;test-file2
echo "d1ebb2873aec9cee47835c45ebdbb507  test-file1" | cmp test-file2 -
cmp test-file3 test-file4
echo 12345678901234567890 | losetup -p 0 -e AES192 /dev/loop7 test-file1
dd if=/dev/zero of=/dev/loop7 bs=1024 count=10 conv=notrunc
10+0 records in
10+0 records out
dd if=/dev/loop7 of=test-file4 bs=10240 count=1
1+0 records in
1+0 records out
losetup -d /dev/loop7
md5sum test-file1 &gt;test-file2
echo "1ed138ff36b688fd46031cb7b8a24e55  test-file1" | cmp test-file2 -
cmp test-file3 test-file4
echo 12345678901234567890 | losetup -p 0 -e AES256 /dev/loop7 test-file1
dd if=/dev/zero of=/dev/loop7 bs=1024 count=10 conv=notrunc
10+0 records in
10+0 records out
dd if=/dev/loop7 of=test-file4 bs=10240 count=1
1+0 records in
1+0 records out
losetup -d /dev/loop7
md5sum test-file1 &gt;test-file2
echo "818fa5f242bd2ff55244acbde0e9fd8f  test-file1" | cmp test-file2 -
cmp test-file3 test-file4
rm -f test-file[1234]
*** Test results ok ***

Whoa, it seem to be ok! :-)

The question is, do I dare to use it since the "6 out of 29 hunks FAILED" 
with "make" and loop-AES seem to me a bit scary... but the "Test results ok" 
above looks nice anyway...


Best regards,

     Jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011107122321</emailId><senderName>Greg Louis</senderName><senderEmail>glouis@dynamicro.on.ca</senderEmail><timestampReceived>2001-11-07 12:23:21-0400</timestampReceived><subject>loop-AES-v1.4g kernel diff for linux-2.4.13-ac8</subject><body>

On 20011028 (Sun) at 0758:09 -0500, Greg Louis wrote:
&gt; The kernel-2.4.diff patch in Jari Ruusu's loop-AES-v1.4f applies
&gt; against the linux-2.4.13-ac2 tree with just one reject in loop.c

Same goes for loop-AES-v1.4g vs 2.4.13-ac8.  The fix is trivial to
apply manually, but anyone interested is welcome to the result (on the
usual understanding of if-it-breaks-you-get-to-keep-both-pieces, of
course).

http://www.bgl.nu/loop-AES-v1.4g-kernel-2.4.13-ac8.diff.gz

--=20
| G r e g  L o u i s          | gpg public key:      |
|   http://www.bgl.nu/~glouis |   finger greg@bgl.nu |

Header information for this message
(included within the PGP envelope for security reasons):
Subject: loop-AES-v1.4g kernel diff for linux-2.4.13-ac8
     To: Linux Crypto &lt;linux-crypto@nl.linux.org&gt;
   From: Greg Louis &lt;glouis@dynamicro.on.ca&gt;

[Attachment #3 (application/pgp-signature)]
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011111150414</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-11-11 15:04:14-0400</timestampReceived><subject>RE: Where is kerneli.org</subject><body>

Hello,

&gt; but the Domain kerneli.org does no longer exist.
&gt; 
The domain still exists. it even still has a nameserver at ns.kerneli.org. There is \
however no website and ftp server anymore from kerneli.org.

browse the mailinglist posts at for more information
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

P



------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011111153819</emailId><senderName>Chuck</senderName><senderEmail>wazoo@freeshell.org</senderEmail><timestampReceived>2001-11-11 15:38:19-0400</timestampReceived><subject>help</subject><body>

help
-- 
--
wazoo@freeshell.org
http://wazoo.freeshell.org
-------------------------------
GPG Key B110DF6F 2001-08-08 Chuck &lt;wazoo@sdf.lonestar.org&gt;
Key fingerprint = B9EC DF29 E120 5414 77C4  1E6E 6642 9D68 B110 DF6F
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011112160709</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-12 16:07:09-0400</timestampReceived><subject>Re: FStab and CryptoAPI</subject><body>

On Sun, 11 Nov 2001, Stephen J. Thompson wrote:

&gt; I have checked that, I can mount it ok under the root account.

probably a permissions problem. check the ownerships and permissions on
both the /home/stephen/encrypted directory and the /dev/hdb2 device.


- brett


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011114003635</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-11-14 00:36:35-0400</timestampReceived><subject>Re: Bad Discrimination</subject><body>

On Tue, Nov 13, 2001 at 04:05:16PM -0800, Hugh Daniel wrote:
&gt;   Freedom is hard.  We have to build better tools (MUA's not censor
&gt; ware in the MTA's) rather then act like most of our fathers and
&gt; mothers and just ban what we don't like, because someone else higher
&gt; up in the power structures your building will always end up with
&gt; control of of the list of banned books...er...email.

I have the freedom to accept or reject any mail I so
choose.

I am currently running about 50-75% rejections on my 
own server due to spammers who attempt to use me to send
not ones, not twos but THOUSANDS of trash addresses.

If you like swimming in spam, you are free to do so.

I choose not to. I am free to do so. So is Rik.

-- 
------------------------------------------------------
    Nuke bin Laden:           Dale Amon, CEO/MD
  improve the global          Islandone Society
     gene pool.               www.islandone.org
------------------------------------------------------
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011119114657</emailId><senderName></senderName><senderEmail>gnufnork@hetdigitalegat.nl</senderEmail><timestampReceived>2001-11-19 11:46:57-0400</timestampReceived><subject>CryptoAPI user space library</subject><body>

Hello,

Are there plans to make the CryptoAPI usable from user space? Currently,
OpenSSL duplicates most of the algorithms, which is a waste of memory IMO
And, in case of harware accelerated cryptography drivers in the kernel,
it's useful too.
Or is it already possible and am I missing something?

greetings
Wladimir


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011121214148</emailId><senderName>Rik van Riel</senderName><senderEmail>riel@conectiva.com.br</senderEmail><timestampReceived>2001-11-21 21:41:48-0400</timestampReceived><subject>ADMIN:  LSG2 web interface</subject><body>

Please reply to me personally and not to the list, thank you.
=============================================================

Hi,

today I finally put Listar's web interface online; using
this interface users can subscribe, unsubscribe and set
various flags on themselves, like DIGEST mode ...

This web interface is linked from the mail archive pages
and put under SSL:

	https://mail.nl.linux.org/cgi-bin/lsg2.cgi

kind regards,

Rik
-- 
Shortwave goes a long way:  irc.starchat.net  #swl

http://www.surriel.com/		http://distro.conectiva.com/

--
List-owners:   list for mailing list owners on NL.linux.org
Archive:       http://mail.nl.linux.org/list-owners/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>200111221530070</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-22 15:30:07-0400</timestampReceived><subject>Re: Root partition encryption</subject><body>

Kostas Psarras wrote:
&gt; Could someone clarify what Jari means in the 8th step of the README by:
&gt; "
&gt; Reboot system from rescue floppy / cdrom / other partition on your
&gt;     system, so that the partition you are about to encrypt is _not_ mounted.
&gt;     Note: you must use loop-AES' loop.o module and loop-AES modified losetup
&gt;     program for this.
&gt; 
&gt;         insmod loop
&gt;         losetup -e AES128 /dev/loop5 /dev/hda2
&gt;         dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
&gt;         sync
&gt;         mount -t ext2 /dev/loop5 /mnt
&gt; "
&gt; 
&gt; I mean what is needed to do the trick? Perhaps a disk with 3 partitions?
&gt; 
&gt; I think i have to build (besides /boot and / partitions) a rescue disk
&gt; with same kernel version of my / so the loop-2.4.7.o can be used . . .
&gt; 
&gt; Is that right?

Yes, you need to boot from floppy, and you need a loop.o module that matches
your boot floppy kernel. Kernel version on the boot floppy does not matter
(any 2.2.x or 2.4.x should work) as long as loop.o module is compiled for
that kernel.

Easiest way to do that is to use existing boot floppy with some kernel. You
need that kernel's source and .config to compile a new loop.o module for
that kernel.

1)  Install boot disk kernel source and .config somewhere

2)  Check that CONFIG_MODULES is Y and CONFIG_BLK_DEV_LOOP is not Y in
    .config file. If they are not like that, you have to replace the kernel
    on the boot floppy.

3)  Recompile kernel without installing:

    make oldconfig
    make dep &amp;&amp; make clean &amp;&amp; make bzImage
    make modules

4)  Mount an "extra" ext2 formatted floppy on /floppy

5)  cd to loop-AES directory

6)  Build loop.o module for that kernel by typing:

    make LINUX_SOURCE=/path/to/kernel/dir INSTALL_MOD_PATH=/floppy

7)  Copy loop-AES enhanced losetup to floppy. There may be library
    dependency problems with boot disk C library. Statically linked losetup
    program avoids such troubles.

    cp /sbin/losetup /floppy

8)  Unmount floppy

9)  Boot from original boot floppy (or floppies)

10) Mount "extra" floppy on /floppy

11) Manually load loop.o driver to kernel:

    insmod /floppy/lib/modules/*/block/loop.o

12) Proceed with "/floppy/losetup" and "dd" as explained in loop-AES README

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011123180810</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-23 18:08:10-0400</timestampReceived><subject>Re: util-linux-2.11m won't compile on RH7.1</subject><body>

Pierre wrote:
&gt; On Thu, 22 Nov 2001, Jari Ruusu wrote:
&gt; &gt; What do these commands output?
&gt; &gt;
&gt; &gt;     whereis gcc
&gt; gcc: /usr/bin/gcc /usr/share/man/man1/gcc.1.gz
&gt; 
&gt; &gt;     whereis cc
&gt; cc: /usr/bin/cc
&gt; 
&gt; &gt;     whereis kgcc
&gt; kgcc: /usr/bin/kgcc

Above looks ok to me.

Can you patch your ./configure with included patch, run 2 tests, and mail me
outputs privately (or at least relevant parts)? Run each test on freshly
untarred util-linux source (plus patch).

    make         2&gt;&amp;1| tee ../test1-output.txt
    ./configure  2&gt;&amp;1| tee ../test2-output.txt

--- configure.old	Tue Jun 19 21:27:24 2001
+++ configure	Fri Nov 23 19:34:59 2001
@@ -1,4 +1,6 @@
 #!/bin/sh
+set -v
+set -x
 # Configure script for util-linux - aeb, 990205
 #
 # We need to find out the following things:
@@ -56,8 +58,8 @@
 
 DEFS=
 LIBS=
-compile='$CC $CFLAGS $DEFS conftest.c -o conftest $LIBS &gt;/dev/null 2&gt;&amp;1'
-static_compile='$CC -static $DEFS conftest.c -o conftest $LIBS &gt;/dev/null 2&gt;&amp;1'
+compile='$CC $CFLAGS $DEFS conftest.c -o conftest $LIBS'
+static_compile='$CC -static $DEFS conftest.c -o conftest $LIBS'
 eval COMPILE='"'$compile'"'
 export COMPILE
 
Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011124193803</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-24 19:38:03-0400</timestampReceived><subject>Announce loop-AES-v1.4h file/swap crypto package</subject><body>

Changes since previous release:
- Ugly macros cleaned from kernel-2.4.diff
- Add conditional reschedule to NONE and XOR transfers.
- build-initrd.sh modified to work with non-modular kernel.
- Fixed kernel 2.4 file backed loop page alloc error handling bug.

I have good news and bad news. Good news is that this version fixes a nasty
bug in stock 2.4 loop.c driver. For those people who hack kernel source, the
bug is called "broken grab_cache_page() return value check", and it only
affects file backed loops. Bad news is that same bug exists in kernel 2.4.15
sources in more than 20 places. OUCH!

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4h.tar.bz2
    md5sum fe0c1fe640b00af804f389f22ab1ce8c

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4h.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011125181759</emailId><senderName>Michael Peddemors</senderName><senderEmail>michael@wizard.ca</senderEmail><timestampReceived>2001-11-25 18:17:59-0400</timestampReceived><subject>Re: what's going on?</subject><body>

My suggestion is that you use 2.4.14.. it has cleaned up the best.. Just
remove the two offending deactivate lines from loop.c and it works
fine..

On Sun, 2001-11-25 at 06:27, Dale Amon wrote:
&gt; On Sat, Nov 24, 2001 at 07:54:38PM +0100, Herbert Valerio Riedel wrote:
&gt; &gt; &gt;  - the ftp.kernel.org/pub/linux/kernel/people/hvr patches are only up
&gt; &gt; &gt;    to kernel version 2.4.10 (also not very up to date)
&gt; &gt; ok, that was caused by me being busy with university; if you look again
&gt; &gt; you'll find something fresher...
&gt; 
&gt; Ah, you were supposed to tell me so I could test it for you! ;-)
&gt;  
&gt; &gt; warning about 2.4.15/2.5.0:
&gt; &gt; http://slashdot.org/articles/01/11/24/1711245.shtml
&gt; 
&gt; OUCH!!!
&gt; amon dives for cover as a dead duck kernel falls and misses him
&gt; 
&gt; And I'll be sure to do my testing on 2.4.13... 2.4.14 has
&gt; some compile probs on loop.c under some circumstances.
&gt;  
-- 
"Catch the Magic of Linux..."
--------------------------------------------------------
Michael Peddemors - Senior Consultant
LinuxAdministration - Internet Services
NetworkServices - Programming - Security
Wizard IT Services http://www.wizard.ca
Linux Support Specialist - http://www.linuxmagic.com
--------------------------------------------------------
(604)589-0037 Beautiful British Columbia, Canada

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011126010856</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-26 01:08:56-0400</timestampReceived><subject>problems with 2.4.16pre1 with new patches (fwd)</subject><body>

trying again from a (hopefully) system that can get through the spam
filter.

---------- Forwarded message ----------
Date: Sun, 25 Nov 2001 12:56:52 -0800 (PST)
From: beldridg@pobox.com
To: linux-crypto@nl.linux.org
Cc: beldridg@pobox.com
Subject: problems with 2.4.16pre1 with new patches

hi,

i'm having file corruption problems. i'm using 2.4.16pre1 with the
cryptoapi patches posted by hvr on 11/24.

i always applied the loop patches and built with --enable-iv-mode-sector
prior to this.

with the new patches, should i enable the option  use 512-blocks for IV
calculation?

here are the errors from my kernel log file. i really want to use the
kernel crypto because it is so much faster than cfs; however, i can't get
it to be stable.

thanks for any insight.


Nov 25 12:40:44 rush kernel: EXT2-fs error (device loop(7,0)):
ext2_check_page: bad entry in directory #11: directory entry across blocks
- offset=0, inode=1936681463, rec_len=8308, name_len=91
Nov 25 12:40:44 rush kernel: EXT2-fs error (device loop(7,0)):
ext2_check_page: bad entry in directory #11: directory entry across blocks
- offset=4096, inode=1937073646, rec_len=29300, name_len=121
Nov 25 12:40:44 rush kernel: EXT2-fs error (device loop(7,0)):
ext2_check_page: bad entry in directory #11: unaligned directory entry -
offset=8192, inode=544105697, rec_len=8243, name_len=108
Nov 25 12:40:59 rush kernel: EXT2-fs error (device loop(7,0)):
ext2_new_inode: reserved inode or inode &gt; inodes count - block_group =
0,inode=1
Nov 25 12:40:59 rush kernel: EXT2-fs error (device loop(7,0)):
ext2_new_inode: reserved inode or inode &gt; inodes count - block_group =
0,inode=4
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1765355582, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1114001999, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1816745305, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=961558586, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1765355582, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1114001999, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=1816745305, limit=20000
Nov 25 12:40:59 rush kernel: attempt to access beyond end of device
Nov 25 12:40:59 rush kernel: 07:00: rw=0, want=961558586, limit=20000
(12:51:44)[beldridg@rush block]$


- brett



-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011126231225</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-11-26 23:12:25-0400</timestampReceived><subject>Re: demonstration of the file corruption problem (fwd)</subject><body>

hi,

On Mon, 26 Nov 2001, Jari Ruusu wrote:

&gt; The cryptoapi file backed loop bug is a result of you doing your new
&gt; "toothpaste back into tube" IV computation in in lo_read_actor(), and
&gt; old "time bomb" IV computation in lo_send().

this is potentially correct; however it works for 2.4.14 and the loop.c
patch from hvr hasn't changed (at least as far as i can tell).

i really need to step back from the problem since i've been doing too much
with too many different patches lately.

i have tested loop-AES and it seems to work well with 2.4.16pre1 (with the
small caveat that RH 7.2 has a new mount option patch (nodev) which
doesn't get applied with your patch - therefore boot scripts for mounting
filesystems fail. i actually hand applied the RH patch on top of yours and
have a diff somewhere if anybody wants it).

i can't do much more testing until next week. if anybody has any clues i'm
all ears.


- brett

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011127083136</emailId><senderName>"binhcv"</senderName><senderEmail>binhcv@dts.com.vn</senderEmail><timestampReceived>2001-11-27 08:31:36-0400</timestampReceived><subject>May you help me ?</subject><body>

Dear ,sir

May you help me ?.

I installed linux release 7.0 (Kernel 2.2.16-22smp).
But i can't insert network adapters.(3com 3c90x).
when i enter command : Ifconfig eth0 
message report :           eth0     Link encap:Ethernet  HWaddr 00:00:00:00:00:00
                                               inet addr :10.10.10.244 Bcast \
                10.10.10.255 Mask:255.255.255.0
                                               BROADCAST RUNNING MTU:1500 Metric :1
                                               RX packets :0 errord:0 dropped:0 \
                overruns:0 frame:0  
                                               TX packets :0 errord:0 dropped:0 \
                overruns:0 carrier:0 
                                                collisions:0 txqueuelen:100
                                                Base address:0xd800
When i enter command : Ifconfig eth0 up
message report :           SIOCSIFFAGS :No such device
 

Bye,


[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&gt;
&lt;HTML&gt;&lt;HEAD&gt;
&lt;META content="text/html; charset=iso-8859-1" http-equiv=Content-Type&gt;
&lt;META content="MSHTML 5.00.2014.210" name=GENERATOR&gt;
&lt;STYLE&gt;&lt;/STYLE&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;Dear ,sir&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;May¬†you help me ?.&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;I installed linux release 7.0 (Kernel 
2.2.16-22smp).&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;But i can't insert network adapters.(3com 
3c90x).&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;when i enter command : &lt;STRONG&gt;Ifconfig eth0 
&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;message report 
&gt; ¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† 
eth0¬†¬†¬†¬† Link encap:Ethernet¬† &lt;STRONG&gt;HWaddr 
00:00:00:00:00:00&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬†inet addr :10.10.10.244 Bcast 10.10.10.255 
Mask:255.255.255.0&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬†&lt;STRONG&gt;BROADCAST&lt;/STRONG&gt; RUNNING MTU:1500 
Metric :1&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial 
size=2&gt;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&amp; \
nbsp;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&amp;nb \
sp;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†RX \
 packets :0 errord:0 dropped:0 overruns:0 frame:0¬†¬†&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial 
size=2&gt;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&amp; \
nbsp;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†&amp;nb \
sp;¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†TX \
 packets :0 errord:0 dropped:0 overruns:0 carrier:0 &lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† collisions:0 txqueuelen:100&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† ¬†¬†¬† ¬†¬†¬† 
¬†¬†¬† ¬†¬†¬† Base address:0xd800&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;When i enter command : &lt;STRONG&gt;Ifconfig eth0 
up&lt;/STRONG&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;message report :¬†¬†¬† 
¬†¬†¬† ¬†¬†¬†SIOCSIFFAGS :No such device&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial size=2&gt;&lt;/FONT&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;¬†&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT face=Arial 
size=2&gt;Bye,&lt;/FONT&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;


-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011127234333</emailId><senderName>"Ryan M. McConahy"</senderName><senderEmail>jfanonymous@yahoo.com</senderEmail><timestampReceived>2001-11-27 23:43:33-0400</timestampReceived><subject>Moving from 2.2 to 2.4</subject><body>

Hello! I used the encrypted-fs from 2.2, with patch-int-2.2.18.3,
and DES_EDE3 encryption on a 128mb fs. The encryption was done
with losetup.  I want to use 2.4, and got 2.4.15, patched it with
the HVR patch, but can't get the encrypted fs to work with it. Do
I select "use 512-blocks for IV calculation"? I think I tried it
both ways.

Thanks for any help,

Ryan M. McConahy

BTW, I really like having the crypto built into my kernel, not seperately
as modules.




_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011128101200</emailId><senderName>Gabor Gludovatz</senderName><senderEmail>ggabor@sopron.hu</senderEmail><timestampReceived>2001-11-28 10:12:00-0400</timestampReceived><subject>CryptoAPI problems</subject><body>


forgot to write:
I use Linux 2.4.15, CryptoAPI 2.4.7, util-linux 2.11l (patched)

-- 
 Gabor Gludovatz &lt;ggabor@sopron.hu&gt; http://www.sopron.hu/~ggabor/

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011128191635</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-11-28 19:16:35-0400</timestampReceived><subject>Re: loop-aes problems under RedHat Linux 7.2</subject><body>

[ re-sending, sorry if you receive this twice ]

beldridg@pobox.com wrote:
&gt; On Wed, 28 Nov 2001, Friedrisch Muller wrote:
&gt; &gt; Mounting local filesystems:  mount: invalid option -- O &lt;Here comes
&gt; &gt; usage for mount.&gt;
&gt; 
&gt; this is the problem i mentioned the other day. redhat has patched mount to
&gt; add a few new options.
&gt; 
&gt; therefore, you have at least three options:
&gt; 
&gt;  1. modify the startup script to remove the mount commands that deal
&gt;     with nodev
&gt; 
&gt;  2. i think jari is going to incorporate the netdev patch into his
&gt;     patch. then you can repatch and rebuild mount, etc.
&gt; 
&gt;  3. i have an untested modified redhat nodev patch which should apply
&gt;     cleanly after jari's patch. it is attached. just pply this patch
&gt;     and rebuild mount, etc.
&gt; 
&gt; - brett

Brett's patch appears to have CR-LF damage at line ends.

I have attached a patch that adds missing -O option to mount and umount.
Just uncompress the util-linux-2.11m-2.diff.bz2 file and drop it to
loop-AES-v1.4h directory. Below is a patch for the README file, which says
that you have to apply two util-linux patches before compiling util-linux.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


--- ../loop-AES-v1.4h/README	Sat Nov 24 20:23:37 2001
+++ README	Wed Nov 28 19:36:24 2001
@@ -1,4 +1,4 @@
-Written by Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;, November 24 2001
+Written by Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;, November 28 2001
 
 Copyright 2001 by Jari Ruusu.
 Redistribution of this file is permitted under the GNU Public License.
@@ -142,6 +142,7 @@
     bzip2 -d -c util-linux-2.11m.tar.bz2 | tar xvf -
     cd util-linux-2.11m
     patch -p1 &lt;../util-linux-2.11m.diff
+    patch -p1 &lt;../util-linux-2.11m-2.diff
     ./configure
     make
     cd mount
@@ -149,6 +150,9 @@
     install -m 755 losetup /sbin
     rm -f /usr/man/man8/{mount,umount,losetup}.8.gz
     install -m 644 mount.8 umount.8 losetup.8 /usr/man/man8
+    rm -f /usr/man/man5/fstab.5.gz
+    install -m 644 fstab.5 /usr/man/man5
+    mandb
     cd ../..
 
 
@@ -525,3 +529,6 @@
 
 util-linux-2.11?.diff       Util-linux patch that adds support for AES
                             cipher.
+
+util-linux-2.11?-2.diff     Util-linux patch that adds support for -O mount
+                            option. Some distros need this, some don't.
["util-linux-2.11m-2.diff.bz2" (application/octet-stream)]
["util-linux-2.11m-2.diff.bz2.sign" (text/plain)]

-----BEGIN PGP MESSAGE-----
Version: 2.6.3ia
Comment: http://loop-aes.sourceforge.net/PGP-public-key.asc

iQCVAwUAPAUipDMKg0M6Ig9RAQFB2QP/b/mXiNlXDVKI2rvryGClENIPbe8oJPTI
XrlZtpicLdLy/hnD7dhJ8tXbATNsx8lallERvRNYsssGKjvqlfk3iQTBXSA3I1lF
abodYQt6FyTEUyUgiFeS1/95m/M5ZwRsSSFxrcR1JBnfjLZiTsDn8Xn7lX283BCw
ewdmdMDhqu0=
=dWBP
-----END PGP MESSAGE-----

-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011129091430</emailId><senderName></senderName><senderEmail>stephen.thompson</senderEmail><timestampReceived>2001-11-29 09:14:30-0400</timestampReceived><subject>RE: Kernel 2.4.14 and CryptoAPI</subject><body>

Hello,

I tried your suggestions, I am not sure how to edit the Makefile, but I did
edit the source and it made no difference. I enclose the error messages.


ferengi:/usr/src/cryptoapi-2.4.7.0# make
Making all in api
make[1]: Entering directory `/usr/src/cryptoapi-2.4.7.0/api'
gcc -I../include -D__KERNEL__ -DMODULE -DUSE_LO_IV_MODE_SECTOR
-I/usr/src/linux-2.4.14/include -Wall -Wstrict-prototypes -Wno-trigraphs -O2
-fomit-frame-pointer -fno-strict-aliasing -fno-common -pipe
-mpreferred-stack-boundary=2 -march=i686 -malign-functions=4  -DMODVERSIONS
-include /usr/src/linux-2.4.14/include/linux/modversions.h -o cryptoapi.o -c
cryptoapi.c
cryptoapi.c:466: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:466: warning: data definition has no type or storage class
cryptoapi.c:467: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:467: warning: data definition has no type or storage class
cryptoapi.c:468: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:468: warning: data definition has no type or storage class
cryptoapi.c:469: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:469: warning: data definition has no type or storage class
cryptoapi.c:470: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:470: warning: data definition has no type or storage class
cryptoapi.c:471: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:471: warning: data definition has no type or storage class
cryptoapi.c:472: parse error before
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: type defaults to `int' in declaration of
`this_object_must_be_defined_as_export_objs_in_the_Makefile'
cryptoapi.c:472: warning: data definition has no type or storage class
make[1]: *** [cryptoapi.o] Error 1
make[1]: Leaving directory `/usr/src/cryptoapi-2.4.7.0/api'
make: *** [all-recursive] Error 1


Thanks.

Stephen.


-----Original Message-----
From: beldridg@pobox.com [mailto:beldridg@pobox.com]
Sent: 28 November 2001 16:54
To: Stephen.Thompson@bmwfin.com
Cc: linux-crypto@nl.linux.org; beldridg@pobox.com
Subject: Re: Kernel 2.4.14 and CryptoAPI


On Wed, 28 Nov 2001 Stephen.Thompson@bmwfin.com wrote:

&gt; I am running 2.4.14 and tried to compile the API. All I get is pages
&gt; full of errors and no module. Is there a patch I need to apply? If so
&gt; can someone point me in the direction of a http site (no ftp access
&gt; here.) with it on.

if you sent the error messages it would help. i have a suspicion that it
is due to the Makefile not doing a -DEXPORT_SYMTAB.

one way to fix is to modify the Makefile for cryptoloop and cryptoapi to
do the above.

the other way is to simply modify cryptoapi.c and cryptoloop.c to add the
following near the EXPORT_SYMBOL section of the code:

  MODULE_LICENSE("GPL");

these changes are in the latest patch from hvr.


- brett


-------------------------------------------------------------------------------------------


Copyright material and/or confidential and/or privileged information may be contained \
in this e-mail and any attached documents.  The material and information is intended \
for the use of the intended addressee only.  If you are not the intended addressee, \
or the person responsible for delivering it to the intended addressee, you may not \
copy, disclose, distribute, disseminate or deliver it to anyone else or use it in any \
unauthorised manner or take or omit to take any action in reliance on it. To do so is \
prohibited and may be unlawful.   The views expressed in this e-mail may not be \
official policy but the personal views of the originator.  If you receive this e-mail \
in error, please advise the sender immediately by using the reply facility in your \
e-mail software, or contact postmaster@bmwfin.com.  Please also delete this e-mail \
and all documents attached immediately.   Many thanks for your co-operation.

BMW Financial Services (GB) Limited is registered in England and Wales under company \
number 01288537. Registered Offices : Europa House, Bartley Way, Hook, Hants, RG27 \
                9UF
------------------------------------------------------------------------------------------
                
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011130123645</emailId><senderName>niels -</senderName><senderEmail>nielselburg@yahoo.de</senderEmail><timestampReceived>2001-11-30 12:36:45-0400</timestampReceived><subject>problems aking util-linux-2.11d</subject><body>


while building util-linux-211d on a smp x86, with
kernel 2.4.12 and cryptoapi-2.4.7.0 i get the
following error message: 
instructions taken from the linux encryption howto.
/usr/include/linux and /usr/include/asm are symlinks
to kernel tree.

$ make losetup mount umount
cc -c -O9 -funroll-loops -ffast-math -malign-double
-mcpu=pentiumpro -march=pent
iumpro -fomit-frame-pointer -fno-exceptions -pipe -O2
-m486 -fomit-frame-pointer
 -I../lib -Wall -Wmissing-prototypes
-Wstrict-prototypes -DNCH=1  -D_FILE_OFFSET
_BITS=64 -DSBINDIR=\"/sbin\"
-DUSRSBINDIR=\"/usr/sbin\" -DLOGDIR=\"/var/log\" -D
VARPATH=\"/var\" -DLOCALEDIR=\"/usr/share/locale\"
-DHAVE_NFS -DMAIN lomount.c -
o main_losetup.o
lomount.c:34: loop.h: No such file or directory
lomount.c:99: warning: `struct loop_info' declared
inside parameter list
lomount.c:99: warning: its scope is only this
definition or declaration, which i
s probably not what you want.
lomount.c:525: conflicting types for `set_loop'
lomount.h:3: previous declaration of `set_loop'
lomount.c: In function `name_to_id':
lomount.c:730: `crypt_type_tbl' undeclared (first use
in this function)
lomount.c:730: (Each undeclared identifier is reported
only once
lomount.c:730: for each function it appears in.)
lomount.c: In function `id_to_name':
lomount.c:743: `crypt_type_tbl' undeclared (first use
in this function)
lomount.c: At top level:
lomount.c:99: warning: `set_loop_passwd' declared
`static' but never defined
lomount.c:694: warning: `get_cipher_info' defined but
not used
lomount.c:726: warning: `name_to_id' defined but not
used
lomount.c:740: warning: `id_to_name' defined but not
used
make: *** [main_losetup.o] Error 1


__________________________________________________________________

Gesendet von Yahoo! Mail - http://mail.yahoo.de
Ihre E-Mail noch individueller? - http://domains.yahoo.de
-
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011001044748</emailId><senderName>"Antropov Anton"</senderName><senderEmail>anton.antropov@kamatel.ru</senderEmail><timestampReceived>2001-10-01 04:47:48-0400</timestampReceived><subject>RE: Possible to determine crypto-type from crypted file?</subject><body>

&gt; &gt; &gt; Is it possible to determine what crypto-type (aes, twofish, blowfish,
&gt; &gt; &gt; etc) that has been used to crypt a file by just looking in the file
&gt; &gt; &gt; examining its content?

&gt; &gt; No.

&gt; How can you be so sure about this? Can your refer to some document 
&gt; proving/stating that?

It is prooved by the way modern cryptoalgorythms are working on.
If you have mixed and permutated bits how can you know what type
of algorytnms was used without successfull atacks and/or without
knowing the original (plain) text?

Only special header or signature can show it but I am sure they are
not used due to security reason.

Regards,
Anton Antropov.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003092435</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-03 09:24:35-0400</timestampReceived><subject>RE: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

To whom it shall concern:

	I attempted to install and use the Mandrake 8.1 RPMs for the crypto API and
ran into a few issues I am curious about.

1) Are you supposed to get error messages like "already installed" when
doing this?
2) I read the documentation readme that came with the RPMs I downloaded, but
what is the name of the file that has the documentation in the "Doc"
directory in /usr/src/linux?
3) The Binary RPMs (of the kernel) were not usable to me, as I have my root
partition using ReiserFS and these binaries were built absent that module.
However, now that I have to rebuild the kernel (which I don't mind), how do
I verify that all the crypto patches are in place in the source tree?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, October 03, 2001 2:21 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Marc Mutz
Sent: Sunday, September 30, 2001 11:03 AM
To: peter k.
Cc: linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.4e file/swap crypto package

On Sunday 30 September 2001 12:42, peter k. wrote:
&lt;snip&gt;
&gt; and, would it be a good idea to use for example 128 bytes of urandom
&gt; data (and i wouldnt save it to disk of course) as the seed when
&gt; encrypting swap?
&lt;snip&gt;

No. When you encyrpt swap, you should use a new key everytime you swpon
(and maybe even rekey periodically, say, every few days). You should
use a full keylength bits' key with full entropy. If you do this, you
don't need a seed. (and even if you did, 128 _bits_ would be more than
enough). Also, the seed need not be secret (and can't be). It must be
random, though, so you'd better use /dev/random instead of urandom...

Marc

--
Military justice is to justice what military music is to music.
                                                  -- Groucho Marx


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003105018</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-10-03 10:50:18-0400</timestampReceived><subject>Re: big problems after 2.4.10</subject><body>

Rob McGee wrote:
&gt; FWIW, I'm running 2.4.10 with a loop.o crafted from the old 2.4.6 patch.
&gt; I didn't use HVR's new patch; I just discarded the patch reject. I have
&gt; not yet tried any encrypted filesystem, but I am using the encryption of
&gt; swap (yes, against HVR's advice. :) So far no problems noted here.

Maybe you should be using loop-AES. No kernel source modifications required
and it works with swap.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003210745</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-10-03 21:07:45-0400</timestampReceived><subject>Re: Reversing the MDK Kernel patches</subject><body>

Le Mercredi 3 Octobre 2001 22:41, IT3 Stuart B. Tener, USNR-R a √©crit :
&gt;
&gt; 	How do I reverse the kernel patches (RPMs) in what order and with what
&gt; options, if I am interested in returning to a stock kernel for Mandrake
&gt; 8.1?

Normally, if you have followed the instructions for installation, you still 
have your standard kernel installed, and can just select it from LILO, and 
boot it anytime, and even define it as default in your lilo.conf file if you 
wish.

Now, if you want to uninstall everything back to its original state, I would 
suggest:

1) Uninstall the cryptoapi package using "rpm -e &lt;package_name&gt;"

2) Check with "rpm -qa | grep -i kernel" which kernel elements you have 
installed on your system, uninstall all the "kernel-something-crypto" 
packages using "rpm -e &lt;package_name&gt; [...]"

3) Check the symlinks in /boot so they aren't broken and point to the correct 
vmlinuz, System.map, etc.

4) Check lilo.conf, edit it, and re-run lilo. CHECK THAT EVERYTHING WENT OK 
for lilo reinstallation.

5) Reinstall the kernel-headers package from Mandrake, and optionally 
reinstall other packages you may want (kernel-source, kernel-doc, 
kernel-pcmcia...)

6) You may want to "downgrade" your mount and losetup packages, possibly by 
using "rpm -Uvh --oldpackage losetup&lt;version_to_reinstall&gt; 
mount&lt;version_to_reinstall&gt;"

You should be done by then.

Some notes: The only tricky part, as usual, is the replacement of the kernel. 
Do *NOT* reboot until you are sure that you have a usable kernel installed 
and that lilo.conf has been set accordingly, and "lilo" has been re-ran.

You don't really *need* to downgrade kernel, losetup and mount. If you just 
want to get rid of the cryptoapi, you can just uninstall the cryptoapi RPM.

Hope this helps.

Regards.

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011002161520</emailId><senderName></senderName><senderEmail>beldridg@pobox.com</senderEmail><timestampReceived>2001-10-02 16:15:20-0400</timestampReceived><subject>big problems after 2.4.10</subject><body>

i recently upgraded to 2.4.10 and applied the new loop.c patches by
herbert.

when i mounted an encrypted filesystem, i got quite a suprise. files were
owned by odd uids and some were _very_ large and one was even a character
device. here are some examples of the directory listing (i've removed file
names)

?--Srws-wT    1 50757    users    2374319912 Apr  7  2000
dr-srw---T    1 35441    users    406876523 Sep 17 17:19
-rw-r--r--    1 beldridg users       38400 Sep 17 17:19
-rw-r--r--    1 beldridg users       37376 Sep 23 09:16
-rwxr--r--    1 beldridg users       87552 Apr 20  1999
?rwxr--rw-    4 beldridg users        1024 Oct 11  2000 &lt;directory&gt;
?rwsr--rw-    4 103      users        1024 Mar 12  2001 &lt;directory&gt;
-rwxr-x-wx    1 beldridg users      156160 Aug  8 18:49
-rw-r--r--    1 beldridg users      164860 Dec 21  2000
-rwxr--r--    1 beldridg users      108032 Nov 20  2000
drwxr-xr-x    2 root     root        12288 Aug 16 17:40 lost+found
-rw-r--r--    1 beldridg users       34816 Sep 24 10:54
-rwxr--r--    1 beldridg users       36864 Aug 17 16:23
crwsr--rw-    8 xfs      users    160, 252 Sep  7 09:19 &lt;directory&gt;
drwxr-xr-x    4 beldridg users        1024 Aug 12 09:11 &lt;directory&gt;
?-ws--x--T    2 30056    users    3233623296 Aug 16 17:50



any ideas before i revert to 2.4.9?


- brett


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003204125</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-03 20:41:25-0400</timestampReceived><subject>Reversing the MDK Kernel patches</subject><body>

Dear Mr. Bouissou:

	How do I reverse the kernel patches (RPMs) in what order and with what
options, if I am interested in returning to a stock kernel for Mandrake 8.1?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, October 03, 2001 1:40 PM



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011002183839</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-10-02 18:38:39-0400</timestampReceived><subject>Re: big problems after 2.4.10</subject><body>

On Tue, Oct 02, 2001 at 09:15:20AM -0700, beldridg@pobox.com wrote:
&gt; i recently upgraded to 2.4.10 and applied the new loop.c patches by
&gt; herbert.
&gt; 
&gt; when i mounted an encrypted filesystem, i got quite a suprise. files were
&gt; owned by odd uids and some were _very_ large and one was even a character
&gt; device. here are some examples of the directory listing (i've removed file
&gt; [snip]
&gt; 
&gt; any ideas before i revert to 2.4.9?

I would make a copy of it (the unmounted filesystem container) and try
fsck. Then I would try booting the old 2.4.9 again to find out if the
problem is in the filesystem or in the cryptoapi/loop drivers.

FWIW, I'm running 2.4.10 with a loop.o crafted from the old 2.4.6 patch.
I didn't use HVR's new patch; I just discarded the patch reject. I have
not yet tried any encrypted filesystem, but I am using the encryption of
swap (yes, against HVR's advice. :) So far no problems noted here.

I've been working toward the goal of encrypting my entire /home
partition, then maybe eventually going for the initrd and encrypting /.
But I had some problems reading some filesystems created with 2.4.9 and
cryptoapi both with and without IV_MODE_SECTOR, so I'm not brave enough
to proceed yet. :) (This was when still using 2.4.9.)

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004113041</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-10-04 11:30:41-0400</timestampReceived><subject>Re: pbuilder</subject><body>

I see that the .7 version is out. Haven't heard back
yet whether you want my other patches or not, the ones
for handling alternate dist script args for debootstrap.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003005000</emailId><senderName></senderName><senderEmail>beldridg@best.com</senderEmail><timestampReceived>2001-10-03 00:50:00-0400</timestampReceived><subject>Re: big problems after 2.4.10</subject><body>

On Tue, 2 Oct 2001, Rob McGee wrote:

&gt; I would make a copy of it (the unmounted filesystem container) and try
&gt; fsck.

interesting. i did fsck it under 2.4.9. maybe i'll boot into 2.4.10 and
fsck it again - although it shouldn't make a difference.

&gt; Then I would try booting the old 2.4.9 again to find out if the
&gt; problem is in the filesystem or in the cryptoapi/loop drivers.

everything still works in 2.4.9.

just out of curiosity, has anybody tried using 2.2.x with the cryptoapi
patch. the more i run 2.4.x, the more i think i should just wait a while
for it to get stable.

&gt; I've been working toward the goal of encrypting my entire /home
&gt; partition, then maybe eventually going for the initrd and encrypting
&gt; /. But I had some problems reading some filesystems created with 2.4.9
&gt; and cryptoapi both with and without IV_MODE_SECTOR, so I'm not brave
&gt; enough to proceed yet. :) (This was when still using 2.4.9.)

much braver than i. :)

- brett


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004120344</emailId><senderName>Antti =?ISO-8859-1?Q?Koskim=E4ki?=</senderName><senderEmail>kossuh@sci.fi</senderEmail><timestampReceived>2001-10-04 12:03:44-0400</timestampReceived><subject>up-to-date HOWTO/FAQ ?</subject><body>


I've been searching the web for up-to-date version of Linux disk
encryption howto, with no luck.

Does anyone know if there is one ?

Could someone build one ?

Another thing would be up-to-date FAQ for this mailing-list, or at least
seachable archive. Is there such anywhere ?

This mailing-list is best source of information I could find so far.

--
Antti Koskimaki, a.k.a. andy


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003010543</emailId><senderName>"George Milliken"</senderName><senderEmail>gmilliken@farm9.com</senderEmail><timestampReceived>2001-10-03 01:05:43-0400</timestampReceived><subject>RE: big problems after 2.4.10</subject><body>

On a clear disk you can fsck forever.....

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of beldridg@best.com
Sent: Tuesday, October 02, 2001 5:50 PM
To: Rob McGee
Cc: linux-crypto@nl.linux.org
Subject: Re: big problems after 2.4.10


On Tue, 2 Oct 2001, Rob McGee wrote:

&gt; I would make a copy of it (the unmounted filesystem container) and try
&gt; fsck.

interesting. i did fsck it under 2.4.9. maybe i'll boot into 2.4.10 and
fsck it again - although it shouldn't make a difference.

&gt; Then I would try booting the old 2.4.9 again to find out if the
&gt; problem is in the filesystem or in the cryptoapi/loop drivers.

everything still works in 2.4.9.

just out of curiosity, has anybody tried using 2.2.x with the cryptoapi
patch. the more i run 2.4.x, the more i think i should just wait a while
for it to get stable.

&gt; I've been working toward the goal of encrypting my entire /home
&gt; partition, then maybe eventually going for the initrd and encrypting
&gt; /. But I had some problems reading some filesystems created with 2.4.9
&gt; and cryptoapi both with and without IV_MODE_SECTOR, so I'm not brave
&gt; enough to proceed yet. :) (This was when still using 2.4.9.)

much braver than i. :)

- brett


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004144205</emailId><senderName>"William A.(Andy) Adamson"</senderName><senderEmail>andros@umich.edu</senderEmail><timestampReceived>2001-10-04 14:42:05-0400</timestampReceived><subject>des-cbc</subject><body>

hello

i just joined the list. i'm writing the RPCSEC_GSS code for the linux kernel 
NFS v4 rpc layer. we have based our NFS v4 work on the linux 2.4.4 kernel. 
i've applied the linux 2.4.3.1 patch and smoke tested the sha1 and md5 
implementations.

i need kernel crypto - each rpcsec_gss packet that arrives at the NFSv4 client 
or server has to calculate a packet verifier (whether privacy or integrity are 
used or not).  for kerberos v5 which is the first gss mechanism i'm 
implementing, the default method of constructing and verifying the verifier is 
to first perform an md5 digest on the data, and then encrypt it using des in 
cbc mode.

i note that there is a des-cbc cipher_implementation structure declared in 
cipher-des.c, but i am unable to find the des_cbc_encrypt/decrypt functions 
refered to by the structure.

is because they are not yet implemented? is there any code i could bleed on? i 
plan to pull down the mit_des_cbc_encrypt() function from the mit kerberos 5 
1.2.1 source ../lib/crypto/f_cbc.c which wraps des_encrypt in the cbc mode 
just to get something working....

any info would be helpful

thanks

--&gt;Andy Adamson

see http://www.citi.umich.edu/projects/nfsv4 for NFSv4 info
and http://www.citi.umcih.edu/u/andros - my home page.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009172508</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-09 17:25:08-0400</timestampReceived><subject>packet-tracking vulnerabilities (was Re: Dutch Government...)</subject><body>

On Tue, 9 Oct 2001, Michael T. Babcock wrote:
&gt; Incidentally, do these attacks apply to traffic analysis of IPSEC 
&gt; connections using something like FreeS/WAN?

Yes.  It's harder if there is other traffic using the same IPsec
connection, but there might not be. 

The FreeS/WAN project is investigating adding small amounts of automatic
padding, to at least obscure the packet sizes some.  (The IPsec protocols
already have provisions for this, fortunately.)

It's harder for us to do anything about timing.  At the network layer, we
don't have much information about what the application is doing, and we're
reluctant to deliberately delay packets which may not benefit.

Introducing dummy traffic would have to be done with great care and some
kind of adaptive strategy, and we don't have any good ideas about the
details at the moment.  Moreover, dummy traffic doesn't really eliminate
this signal path -- it just adds background noise, which makes things
harder for the eavesdropper but not impossible.

The nice thing about the Silicon Defense technique (assuming I've
understood it correctly -- I haven't yet examined their code) is that it
actually eliminates the signal path completely, by fitting the real
traffic into the dummy traffic.  At first glance, I don't think there's
any reasonable general-purpose way for the network layer to do that.

Given that the only really touchy area is passwords, which are a tiny
fraction of all network traffic, it seems reasonable to seek long-term
solutions at or near the application layer, where it's easier to recognize
the situations needing special attention.  In particular, it's really dumb
to have passwords going across a character at a time, when there is no
character-by-character interaction involved. 

                                                          Henry Spencer
                                                       henry@spsystems.net






Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009193435</emailId><senderName>"Bill Rugolsky Jr."</senderName><senderEmail>rugolsky@ead.dsa.com</senderEmail><timestampReceived>2001-10-09 19:34:35-0400</timestampReceived><subject>Re: Keystroke timing (was Re: Dutch Government wants to regulate strong cryptography)</subject><body>

On Tue, Oct 09, 2001 at 08:08:13PM +0200, Gisle S{lensminde wrote:
&gt; The ssh protocol already send passwords as a single block as far as I can
&gt; remember from last time I read the protocol specification. There will
&gt; however be a problem with keystroke timing unless you type a password on
&gt; the machine you log in to. That is if you log in a root "su" or in some
&gt; other way types a password. Now a lot people will do exactly. Most
&gt; sysadmins will not log on remotely directly as root, and so this attack
&gt; will be possible. Other people have sugested to insert random junk
&gt; packets to disrupt such trafic analysis.
&gt; 
&gt; There are however several other possible ways to make it hard to get
&gt; useful keystroke timing. One is the one already mentioned, to collect the
&gt; whole password before sending it. That could be done by detecting the
&gt; password terminal mode (which is when the character you type not are
&gt; displayed, like su and telnet and - yes ssh does).

Or if using X (or even gpm?) you can just paste in the password from a
selection.  The selection doesn't even need to be visible -- a simple
Tcl/Tk (or similar) script will let you type a (blinded) password and
make the text the default selection.  You paste, then clear the
selection.

Regards,

   Bill Rugolsky

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009192104</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-10-09 19:21:04-0400</timestampReceived><subject>problems compiling patched util-linux-2.10o</subject><body>

Hi everyone,

after a stupid mistake, I need to access an old encrypted fs which was
encrypted using twofish and the int-patched kernel2.2.18 and util-linux.

I restored my old system: I boot with my old 2.2.18 kernel (with
int_patch 2.2.18; all original modules are available and in place), have
the old patched source in /usr/src/linux, have /usr/include/asm and
/usr/include/linux linked to /usr/src/linux/inlcude... (Debian
system...) My old fstab is available, just like the file with the
encrypted fs in it.

What's left are mount/umount/losetup (I DON'T have a Backup on this
one). I therefore patched util-linux-2.10o with
/usr/src/linux/Documentation/crypto/util-linux-2.10o.int.patch -- no
problems here.

./configure says:
You have inet_aton()
You have &lt;scsi/scsi.h&gt;
You don't have &lt;linux/blkpg.h&gt;
You don't need &lt;linux/tqueue.h&gt;
You have &lt;linux/kd.h&gt;
You have &lt;term.h&gt;
You have ncurses. Using &lt;ncurses.h&gt;.
You have termcap
You need -lcrypt
You have &lt;locale.h&gt;
You have &lt;libintl.h&gt; and gettext()
Assuming that you want to enable NLS support.
(Otherwise, edit defines.h and remove the line with ENABLE_NLS)
You have &lt;langinfo.h&gt;
You have __progname
You have &lt;pty.h&gt; and openpty()
You have wide character support
You have nanosleep()
You have personality()
You don't have __NR_pivot_root
You have a tm_gmtoff field in struct tm
Your rpcgen seems to work

And when I say "make losetup mount umount" a few files are compiled and
this error message is displayed:

nfsmount.c: In function `nfsmount':
nfsmount.c:534: warning: implicit declaration of function ime'
nfsmount.c:647: `NFS_FHSIZE' undeclared (first use in this function)
nfsmount.c:647: (Each undeclared identifier is reported only once
nfsmount.c:647: for each function it appears in.)
nfsmount.c:665: warning: unreachable code at beginning of switch
statement
nfsmount.c:699: `NFS_PORT' undeclared (first use in this function)
make: *** [nfsmount.o] Error 1

I don't really know what's wrong. It should be exactly the setup I had
when I originally setup this whole crypto stuff. I don't have much
knowldedge of C, but could this be a problem with an up-to-date libc?

I need to get those mount and umount binaries to mount that filesystem.
Do you have ANY ideas what to do, what's missing. Would it work if
someone would send me his twofish-aware (u)mount-binaries?



Please don't hesitate to ask me me anything about the problem. I
desperately need some sleep and may not put myself clear in the above
text.. :-)

THANKS for your thoughts about my problems

Christoph

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928195308</emailId><senderName>"Paul Hilton"</senderName><senderEmail>paul_hilton@yahoo.com</senderEmail><timestampReceived>2001-09-28 19:53:08-0400</timestampReceived><subject>International Crypto Standalone - can't install</subject><body>

I am trying to install Herbert Riedel's International Crypto Standalone
cryptoapi-2.4.7.0

I have Red Hat 7.1, I updated the kernel, the kernel source and the kernel
headers
with RPMs from Red Hat to 2.4.3-12. I did not recompile the kernel.

I installed (it looked succesful - how can I tell?) util-linux-2.11i patched
by
util-linux-2.11b.patch from the crypto package. An unencrypted loopback
filesystem works fine.

depmod fails for unresolved references, first for loads of things, then with
depmod -F /boot/System.map
for just loop_register_transfer and loop_unregister_transfer from loop.c

I don't understand why I need to specify /boot/System.map, and I have no
idea why stuff from loop.c would be missing.

I appreciate that the problem is probably simple, but I have RTFM and I
can't
seem to find the problem, any ideas?


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009105717</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-09 10:57:17-0400</timestampReceived><subject>Dutch Government wants to regulate strong cryptography</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi!

The story (en):
http://www.heise.de/tp/english/inhalt/te/9763/1.html

Marc

- -- 
It is truly ironic that the United States, once the beacon for
promoting the principles of freedom of expression, is now
systematically infecting other countries with this dangerous public
policy choice [the DMCA] that will restrict more speech than any law
before it.    -- EFF FTAA Alert:
                 Stop Hollywood Forcing Technology Ban on 34 Countries
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7wvSN3oWD+L2/6DgRAj7vAJ9aUMPp6jPuleM+a6f4chPsnQQ8jQCgy3k4
9bZ7NNVU7OYtOuAVLXYrjMU=
=hlBR
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005030750</emailId><senderName>Antti =?ISO-8859-1?Q?Koskim=E4ki?=</senderName><senderEmail>kossuh@sci.fi</senderEmail><timestampReceived>2001-10-05 03:07:50-0400</timestampReceived><subject>encrypting the whole disk / all the data</subject><body>


Simple question: How do I guarantee that not a single bit of my
essential data is written non-crypted on my Linux (laptop-)box ? 

Swap is trivial - it just has to be encrypted :) and Jari has provided
good-looking boot-scripts for that. Is loop-AES currently the only one
managing swap ?

Then root-filesystem.

If I want simply the root-filesystem encrypted, what are my options ?

Another solution that comes into my mind is mounting root etc. read-only. The
problem arises with logging, i.e. /var. If I need it encrypted it seems to
me that problem is quite analog to encrypting the whole root-filesystem.
On the other hand I could use RAM-disk to avoid boot-time problems but
then I have to use RAM-disk all the way, am I right ?

For performance reasons I would prefer the read-only-like solutions.

--
Antti Koskimaki


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011012133637</emailId><senderName>Juergen Mueller</senderName><senderEmail>juergen@consultant.com</senderEmail><timestampReceived>2001-10-12 13:36:37-0400</timestampReceived><subject>Old mailings // Patch for latest kernels</subject><body>

Hi!

I'm wondering if there is an archive of all the postings on this list. 
I'm looking for the kerneli.org website and the patches for the late(st)
kernels (&gt;=2.4.7). kerneli.org doesn't seem to exist any more.

Cheers
Juergen

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005184947</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-10-05 18:49:47-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

Antti Koskim√§ki wrote:
&gt; Simple question: How do I guarantee that not a single bit of my
&gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; 
&gt; Swap is trivial - it just has to be encrypted :) and Jari has provided
&gt; good-looking boot-scripts for that. Is loop-AES currently the only one
&gt; managing swap ?
&gt; 
&gt; Then root-filesystem.
&gt; 
&gt; If I want simply the root-filesystem encrypted, what are my options ?
&gt; 
&gt; Another solution that comes into my mind is mounting root etc. read-only. The
&gt; problem arises with logging, i.e. /var. If I need it encrypted it seems to
&gt; me that problem is quite analog to encrypting the whole root-filesystem.
&gt; On the other hand I could use RAM-disk to avoid boot-time problems but
&gt; then I have to use RAM-disk all the way, am I right ?
&gt; 
&gt; For performance reasons I would prefer the read-only-like solutions.

Encrypting root partition requires a small unencrypted /boot partition.
Everything else (root, swap and other partitions) can be encrypted. Kernels
and tools required to boot kernels reside in the /boot partition.

To encrypt root partition, I have attached a shell script that builds a
small "initrd" ram-disk that works with 2.2 and 2.4 kernels. To use it, do
something like this:

1)  Backup all important data before experimenting.

2)  Recompile kernel. These are required: CONFIG_BLK_DEV_RAM=y
    CONFIG_BLK_DEV_RAM_SIZE=4096 CONFIG_BLK_DEV_INITRD=y CONFIG_MINIX_FS=y

        cd /usr/src/linux-2.4.10-ac4
        make distclean
        cp ../somewhere/.config .config
        make config
        make dep &amp;&amp; make clean &amp;&amp; make bzlilo
        make modules &amp;&amp; make modules_install

3)  Compile loop-AES loop.o module

        cd ../loop-AES-v1.4e
        make LINUX_SOURCE=/usr/src/linux-2.4.10-ac4

4)  Copy kernel specific loop.o to /boot

        cp -p /lib/modules/2.4.10-ac4/block/loop.o /boot/loop-2.4.10-ac4.o

    Note: you need to have a kernel version specific loop.o module in /boot
    directory for every kernel you intend to use.

5)  Edit build-initrd.sh to match your setup. At least set BOOTDEV, BOOTTYPE
    and CRYPTROOT variables to correct values.

6)  Edit /etc/lilo.conf (or whatever) and set these: root=/dev/ram1
    initrd=/boot/initrd.gz

7)  Build a new /boot/initrd.gz and run lilo (or whatever)

        ./build-initrd.sh
        lilo

    Note: /boot/initrd.gz is supposed to be small (1.6 KB on my systems).
    All other utilities (loop-KERNELRELEASE.o module, insmod, losetup and
    possibly glibc) are copied to /boot directory. Glibc is not copied if
    both insmod and losetup are statically linked.

8)  Reboot system from rescue floppy / cdrom / other partition on your
    system, so that the partition you are about to encrypt is _not_ mounted.
    Note: you must use loop-AES' loop.o module and loop-AES modified losetup
    program for this.

        insmod loop
        losetup -e AES128 /dev/loop5 /dev/hda2
        dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
        sync
        mount -t ext2 /dev/loop5 /mnt

9)  Edit root partition entry in /mnt/etc/fstab file. Replace old /dev/hda2
    with /dev/loop5 (or whatever you are using).

10) Clean up and reboot

        umount /mnt
        losetup -d /dev/loop5
        sync
        shutdown -r now

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
["build-initrd.sh" (application/x-sh)]

#!/bin/bash
#
#  build-initrd.sh
#
#  Written by Jari Ruusu, October 5 2001
#
#  Copyright 2001 by Jari Ruusu.
#  Redistribution of this file is permitted under the GNU Public License.
#
#
#  kernel .config :  CONFIG_BLK_DEV_RAM=y
#                    CONFIG_BLK_DEV_RAM_SIZE=4096
#                    CONFIG_BLK_DEV_INITRD=y
#                    CONFIG_MINIX_FS=y
#
#  /etc/lilo.conf :  root=/dev/ram1
#                    initrd=/boot/initrd.gz
#
#  usage :  ./build-initrd.sh
#           lilo
#           cp -p /lib/modules/`uname -r`/block/loop.o /boot/loop-`uname -r`.o
#

# normal /boot partition
BOOTDEV=/dev/hda1

# /boot partition type
BOOTTYPE=ext2

# encrypted root partition
CRYPTROOT=/dev/hda2

# encryption type (AES128 / AES192 / AES256) of root partition
CIPHERTYPE=AES128

# optional password seed for root partition
#PSEED="-S XXXXXX"

# encrypted root loop device index (0 ... 7), 5 == /dev/loop5
# _must_ match /etc/fstab entry:   /dev/loop5  /  ext2  defaults,xxxx  0  1
ROOTLOOPINDEX=5

# temporary loop device index used in this script, 7 == /dev/loop7
TEMPLOOPINDEX=7


set -e
cat - &lt;&lt;EOF &gt;tmp-c-$$.c

#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/mount.h&gt;
#include &lt;sys/utsname.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;

void strCat(char *d, char *s)
{
    while(*d) d++;
    while(*s) *d++ = *s++;
    *d = 0;
}

void wrStr(char *s)
{
    char *p = s;
    int x = 0;

    while(*p) p++, x++;
    write(1, s, x);
}

int exeWait(char *p)
{
    int x, y;
    char *a[50], *e[1];

    if(!(x = fork())) {
        while(*p &amp;&amp; (x &lt; ((sizeof(a) / sizeof(char *)) - 1))) {  
            a[x++] = p;
            while(*p &amp;&amp; (*p != ' ') &amp;&amp; (*p != '\t')) p++;
            while((*p == ' ') || (*p == '\t')) *p++ = 0;
        }
        e[0] = a[x] = 0;
        if(x) execve(a[0], &amp;a[0], &amp;e[0]);
        _exit(1); 
    }
    waitpid(x, &amp;y, 0);
    if(!WIFEXITED(y) || (WEXITSTATUS(y) != 0)) {
        wrStr("Command \""); wrStr(p); wrStr("\" returned error\n");
        return(1);
    }
    return(0);
}

void _start()
{
    int x;
    struct utsname un;
    char buf[300];

    if(mount("none", "/proc", "proc", MS_MGC_VAL, 0)) {
        wrStr("Mounting /proc failed\n");
        goto fail3;
    }
    /* this intentionally mounts /boot partion as /lib */
    if(mount("${BOOTDEV}", "/lib", "${BOOTTYPE}", MS_MGC_VAL | MS_RDONLY, 0)) {
        wrStr("Mounting ${BOOTDEV} as /lib failed\n");
        goto fail2;
    }

    uname(&amp;un);
    buf[0] = 0;
    strCat(buf, "/lib/insmod -o loop /lib/loop-");
    strCat(buf, &amp;un.release[0]);
    strCat(buf, ".o");
    if(exeWait(buf)) goto fail1;

    wrStr("\nEncrypted file system, please supply correct password to continue\n\n");
    buf[0] = 0;
    strCat(buf, "/lib/losetup -e ${CIPHERTYPE} ${PSEED} /dev/loop${ROOTLOOPINDEX} ${CRYPTROOT}");
    if(exeWait(buf)) goto fail1;
    wrStr("\n");

    if((x = open("/proc/sys/kernel/real-root-dev", O_WRONLY, 0)) == -1) {
        wrStr("Unable to open real-root-dev\n");
        goto fail1;
    }
    write(x, "0x70${ROOTLOOPINDEX}\n", 6);
    close(x);

fail1:
    umount("/lib");
fail2:
    umount("/proc");
fail3:
    _exit(0);
}
EOF

gcc -Wall -O2 -s -static -nostartfiles -pipe tmp-c-$$.c -o tmp-c-$$
rm -f tmp-c-$$.[co]

x=`cat tmp-c-$$ | wc -c`
y=`expr ${x} + 1023`
x=`expr ${y} / 1024`
y=`expr ${x} + 12`

dd if=/dev/zero of=tmp-i-$$ bs=1024 count=${y}
losetup /dev/loop${TEMPLOOPINDEX} tmp-i-$$
mkfs -t minix -i 32 /dev/loop${TEMPLOOPINDEX}
losetup -d /dev/loop${TEMPLOOPINDEX}
mkdir tmp-d-$$
mount -t minix tmp-i-$$ tmp-d-$$ -o loop=/dev/loop${TEMPLOOPINDEX}
cd tmp-d-$$

mkdir dev proc lib
mv ../tmp-c-$$ linuxrc

mknod dev/console c 5 1
mknod dev/tty c 5 0
mknod dev/tty1 c 4 1
mknod dev/null c 1 3
mknod dev/zero c 1 5
mknod dev/ram1 b 1 1
mknod dev/loop${ROOTLOOPINDEX} b 7 ${ROOTLOOPINDEX}

function maybeMakeDiskNode
{
    x=$3
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ; do
        for y in ${BOOTDEV} ${CRYPTROOT} ; do
            if [ ${y} == /dev/$1${i} ] ; then
                mknod dev/$1${i} b $2 ${x}
            fi
        done
        x=`expr ${x} + 1`
    done
    return
}
maybeMakeDiskNode hda 3 1
maybeMakeDiskNode hdb 3 65
maybeMakeDiskNode hdc 22 1
maybeMakeDiskNode hdd 22 65
maybeMakeDiskNode sda 8 1
maybeMakeDiskNode sdb 8 17
maybeMakeDiskNode sdc 8 33
maybeMakeDiskNode sdd 8 49

cd ..
df tmp-d-$$
umount tmp-d-$$
rmdir tmp-d-$$
sync ; sync ; sync
gzip -9 tmp-i-$$
mv tmp-i-$$.gz /boot/initrd.gz
ls -l /boot/initrd.gz

y=0
for x in /sbin/insmod /sbin/losetup ; do
    cp -p ${x} /boot
    set +e
    file ${x} | grep -q "statically linked"
    if [ ! $? == 0 ] ; then
        y=1
    fi
    set -e
done
if [ ${y} == 1 ] ; then
    cp -p /lib/ld-linux.so.2 /lib/libc.so.6 /boot
fi
if [ ! -d /initrd ] ; then
    mkdir /initrd
fi

sync
exit 0

["build-initrd.sh.sign" (text/plain)]

-----BEGIN PGP MESSAGE-----
Version: 2.6.3ia
Comment: http://loop-aes.sourceforge.net/PGP-public-key.asc

iQCVAwUAO73z4jMKg0M6Ig9RAQFRnwP8DdNma2TaYFRrrbrZO96GB7FYHA+hw66j
FmMGeFwpW0OEH0HjOD04W8wMGMl0wXA/6K5KGPNfFHTY0NJhGH+k1ojJSAGlfPY9
lHIUVxwepJ4tF+yg5Ve0MJ1hCz9/TGBqiHUpgsV6iIqrYZrXZw0yjmoPHjw8Ktvz
epXuj3YTX/o=
=8Y9W
-----END PGP MESSAGE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011005190207</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-05 19:02:07-0400</timestampReceived><subject>RE: encrypting the whole disk / all the data</subject><body>

Mr. Ruusu:

	I am curious if you think it would be possible to modify lilo, in order to
allow for a even the kernel to be encrypted for boot?

	As well, I think all of this is going to be moot soon, as ReiserFS (which I
personally use as my filesystem, even for root partitions), will have an
encryption API for it by SEP 2002. Thus, at some point, filesystem
encryption will be indigenous to the ReiserFS, and would only become
requisite of a developer writing an implementation of an algorithm following
their API structure.

	I would wonder how you would feel about modifying your code to work with
ReiserFS once the API is properly documented?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, October 05, 2001 11:51 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Jari Ruusu
Sent: Friday, October 05, 2001 11:50 AM
To: Antti Koskim√§ki
Cc: linux-crypto@nl.linux.org
Subject: Re: encrypting the whole disk / all the data

Antti Koskim√§ki wrote:
&gt; Simple question: How do I guarantee that not a single bit of my
&gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt;
&gt; Swap is trivial - it just has to be encrypted :) and Jari has provided
&gt; good-looking boot-scripts for that. Is loop-AES currently the only one
&gt; managing swap ?
&gt;
&gt; Then root-filesystem.
&gt;
&gt; If I want simply the root-filesystem encrypted, what are my options ?
&gt;
&gt; Another solution that comes into my mind is mounting root etc. read-only.
The
&gt; problem arises with logging, i.e. /var. If I need it encrypted it seems to
&gt; me that problem is quite analog to encrypting the whole root-filesystem.
&gt; On the other hand I could use RAM-disk to avoid boot-time problems but
&gt; then I have to use RAM-disk all the way, am I right ?
&gt;
&gt; For performance reasons I would prefer the read-only-like solutions.

Encrypting root partition requires a small unencrypted /boot partition.
Everything else (root, swap and other partitions) can be encrypted. Kernels
and tools required to boot kernels reside in the /boot partition.

To encrypt root partition, I have attached a shell script that builds a
small "initrd" ram-disk that works with 2.2 and 2.4 kernels. To use it, do
something like this:

1)  Backup all important data before experimenting.

2)  Recompile kernel. These are required: CONFIG_BLK_DEV_RAM=y
    CONFIG_BLK_DEV_RAM_SIZE=4096 CONFIG_BLK_DEV_INITRD=y CONFIG_MINIX_FS=y

        cd /usr/src/linux-2.4.10-ac4
        make distclean
        cp ../somewhere/.config .config
        make config
        make dep &amp;&amp; make clean &amp;&amp; make bzlilo
        make modules &amp;&amp; make modules_install

3)  Compile loop-AES loop.o module

        cd ../loop-AES-v1.4e
        make LINUX_SOURCE=/usr/src/linux-2.4.10-ac4

4)  Copy kernel specific loop.o to /boot

        cp -p /lib/modules/2.4.10-ac4/block/loop.o /boot/loop-2.4.10-ac4.o

    Note: you need to have a kernel version specific loop.o module in /boot
    directory for every kernel you intend to use.

5)  Edit build-initrd.sh to match your setup. At least set BOOTDEV, BOOTTYPE
    and CRYPTROOT variables to correct values.

6)  Edit /etc/lilo.conf (or whatever) and set these: root=/dev/ram1
    initrd=/boot/initrd.gz

7)  Build a new /boot/initrd.gz and run lilo (or whatever)

        ./build-initrd.sh
        lilo

    Note: /boot/initrd.gz is supposed to be small (1.6 KB on my systems).
    All other utilities (loop-KERNELRELEASE.o module, insmod, losetup and
    possibly glibc) are copied to /boot directory. Glibc is not copied if
    both insmod and losetup are statically linked.

8)  Reboot system from rescue floppy / cdrom / other partition on your
    system, so that the partition you are about to encrypt is _not_ mounted.
    Note: you must use loop-AES' loop.o module and loop-AES modified losetup
    program for this.

        insmod loop
        losetup -e AES128 /dev/loop5 /dev/hda2
        dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
        sync
        mount -t ext2 /dev/loop5 /mnt

9)  Edit root partition entry in /mnt/etc/fstab file. Replace old /dev/hda2
    with /dev/loop5 (or whatever you are using).

10) Clean up and reboot

        umount /mnt
        losetup -d /dev/loop5
        sync
        shutdown -r now

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005194150</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-05 19:41:50-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 05 October 2001 05:07, Antti Koskim√§ki wrote:
&gt; Simple question: How do I guarantee that not a single bit of my
&gt; essential data is written non-crypted on my Linux (laptop-)box ?
&lt;snip&gt;

Encrypt the users' and root's homes, and swap, if used:
/home
/root
swap

If you spool sensitive data, encrypt /var, too.

&gt; Then root-filesystem.

What for? Multiple GB's of almost-known plaintext encrypted under a 
single key just makes it easier for an attacker. You should only 
encrypt what's secret. Your /usr surely isn't!

Marc

- -- 
In July, [...] the FBI arrested a Russian computer security researcher
who had presented a paper on the strengths and weaknesses of software
used to protect electronic books. Dmitry Sklyarov [...] landed in jail
because the Digital Millennium Copyright Act (DMCA) makes publishing
critical research on this technology a more serious offense than
publishing nuclear weapon designs.
                               -- Bruce Schneier, Crypto-Gram Aug 2001
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7vgz+3oWD+L2/6DgRAnlaAJ4tVONQArSzX3eTNEl8KvYyDTFZMACgwDoi
rmlUkPMM8EAF6BgxUc3PvCA=
=mvHE
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006063045</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-10-06 06:30:45-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

On Fri, Oct 05, 2001 at 09:41:50PM +0200, Marc Mutz wrote:
&gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; &lt;snip&gt;
&gt; &gt; Then root-filesystem.
&gt; 
&gt; What for? Multiple GB's of almost-known plaintext encrypted under a 
&gt; single key just makes it easier for an attacker. You should only 
&gt; encrypt what's secret. Your /usr surely isn't!

That is a good point, but not the only way of looking at it. My thoughts
in wanting to encrypt the root filesystem are that an attacker would
have to spend a lot of energy to get at useless data.

I figure that the TLA's have taken multiple GB's of fully-known
plaintext, and they have done a lot of research looking for ways to
crack all the known algorithms. If that hasn't taught them how to do it,
my /usr isn't going to help them. Or if it *has* worked and they know
how to break my algorithm, they'll get my data anyway, and I might as
well hide my needles[1] in a bigger haystack.

    Rob - /dev/rob0

[1] No, there are no needles. :) For those of you who are not native
English speakers, that is a common idiom to describe a difficult search.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006064609</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-06 06:46:09-0400</timestampReceived><subject>RE: encrypting the whole disk / all the data</subject><body>

Mr. McGee:

	Mr. Mutz's commentary is not complete accurate in its basis for logic.
After all, if one has three partitions, with three different pass phrases,
with only one partition truly being the one with the date (/home /usr and
/), then we enhance the choice the would be cracker must make in which
partition to start with first. He also must then crack (perhaps) 3 pass
phrases before he gets your data!

	Lastly, if you use loop-aes, and encrypt the root partition, then the
cracker must get access to root first, and then get access to the loop-aes
file by breaking its pass phrase. Sorry Mr. Mutz, but that doesn't sound
like less security to me at all.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, October 05, 2001 11:40 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Rob McGee
Sent: Friday, October 05, 2001 11:31 PM
To: linux-crypto@nl.linux.org
Subject: Re: encrypting the whole disk / all the data

On Fri, Oct 05, 2001 at 09:41:50PM +0200, Marc Mutz wrote:
&gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; &lt;snip&gt;
&gt; &gt; Then root-filesystem.
&gt;
&gt; What for? Multiple GB's of almost-known plaintext encrypted under a
&gt; single key just makes it easier for an attacker. You should only
&gt; encrypt what's secret. Your /usr surely isn't!

That is a good point, but not the only way of looking at it. My thoughts
in wanting to encrypt the root filesystem are that an attacker would
have to spend a lot of energy to get at useless data.

I figure that the TLA's have taken multiple GB's of fully-known
plaintext, and they have done a lot of research looking for ways to
crack all the known algorithms. If that hasn't taught them how to do it,
my /usr isn't going to help them. Or if it *has* worked and they know
how to break my algorithm, they'll get my data anyway, and I might as
well hide my needles[1] in a bigger haystack.

    Rob - /dev/rob0

[1] No, there are no needles. :) For those of you who are not native
English speakers, that is a common idiom to describe a difficult search.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006103246</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-10-06 10:32:46-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

[sorry if you are receiving this twice, re-sending due to fact that
 linux-crypto mailing list did not send me a copy of previous mail]

Antti Koskim√§ki wrote:
&gt; Simple question: How do I guarantee that not a single bit of my
&gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; 
&gt; Swap is trivial - it just has to be encrypted :) and Jari has provided
&gt; good-looking boot-scripts for that. Is loop-AES currently the only one
&gt; managing swap ?
&gt; 
&gt; Then root-filesystem.
&gt; 
&gt; If I want simply the root-filesystem encrypted, what are my options ?
&gt; 
&gt; Another solution that comes into my mind is mounting root etc. read-only. The
&gt; problem arises with logging, i.e. /var. If I need it encrypted it seems to
&gt; me that problem is quite analog to encrypting the whole root-filesystem.
&gt; On the other hand I could use RAM-disk to avoid boot-time problems but
&gt; then I have to use RAM-disk all the way, am I right ?
&gt; 
&gt; For performance reasons I would prefer the read-only-like solutions.

Encrypting root partition requires a small unencrypted /boot partition.
Everything else (root, swap and other partitions) can be encrypted. Kernels
and tools required to boot kernels reside in the /boot partition.

To encrypt root partition, I have attached a shell script that builds a
small "initrd" ram-disk that works with 2.2 and 2.4 kernels. To use it, do
something like this:

1)  Backup all important data before experimenting.

2)  Recompile kernel. These are required: CONFIG_BLK_DEV_RAM=y
    CONFIG_BLK_DEV_RAM_SIZE=4096 CONFIG_BLK_DEV_INITRD=y CONFIG_MINIX_FS=y

        cd /usr/src/linux-2.4.10-ac4
        make distclean
        cp ../somewhere/.config .config
        make config
        make dep &amp;&amp; make clean &amp;&amp; make bzlilo
        make modules &amp;&amp; make modules_install

3)  Compile loop-AES loop.o module

        cd ../loop-AES-v1.4e
        make LINUX_SOURCE=/usr/src/linux-2.4.10-ac4

4)  Copy kernel specific loop.o to /boot

        cp -p /lib/modules/2.4.10-ac4/block/loop.o /boot/loop-2.4.10-ac4.o

    Note: you need to have a kernel version specific loop.o module in /boot
    directory for every kernel you intend to use.

5)  Edit build-initrd.sh to match your setup. At least set BOOTDEV, BOOTTYPE
    and CRYPTROOT variables to correct values.

6)  Edit /etc/lilo.conf (or whatever) and set these: root=/dev/ram1
    initrd=/boot/initrd.gz

7)  Build a new /boot/initrd.gz and run lilo (or whatever)

        ./build-initrd.sh
        lilo

    Note: /boot/initrd.gz is supposed to be small (1.6 KB on my systems).
    All other utilities (loop-KERNELRELEASE.o module, insmod, losetup and
    possibly glibc) are copied to /boot directory. Glibc is not copied if
    both insmod and losetup are statically linked.

8)  Reboot system from rescue floppy / cdrom / other partition on your
    system, so that the partition you are about to encrypt is _not_ mounted.
    Note: you must use loop-AES' loop.o module and loop-AES modified losetup
    program for this.

        insmod loop
        losetup -e AES128 /dev/loop5 /dev/hda2
        dd if=/dev/hda2 of=/dev/loop5 bs=8192 conv=notrunc
        sync
        mount -t ext2 /dev/loop5 /mnt

9)  Edit root partition entry in /mnt/etc/fstab file. Replace old /dev/hda2
    with /dev/loop5 (or whatever you are using).

10) Clean up and reboot

        umount /mnt
        losetup -d /dev/loop5
        sync
        shutdown -r now

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
["build-initrd.sh" (application/x-sh)]

#!/bin/bash
#
#  build-initrd.sh
#
#  Written by Jari Ruusu, October 5 2001
#
#  Copyright 2001 by Jari Ruusu.
#  Redistribution of this file is permitted under the GNU Public License.
#
#
#  kernel .config :  CONFIG_BLK_DEV_RAM=y
#                    CONFIG_BLK_DEV_RAM_SIZE=4096
#                    CONFIG_BLK_DEV_INITRD=y
#                    CONFIG_MINIX_FS=y
#
#  /etc/lilo.conf :  root=/dev/ram1
#                    initrd=/boot/initrd.gz
#
#  usage :  ./build-initrd.sh
#           lilo
#           cp -p /lib/modules/`uname -r`/block/loop.o /boot/loop-`uname -r`.o
#

# normal /boot partition
BOOTDEV=/dev/hda1

# /boot partition type
BOOTTYPE=ext2

# encrypted root partition
CRYPTROOT=/dev/hda2

# encryption type (AES128 / AES192 / AES256) of root partition
CIPHERTYPE=AES128

# optional password seed for root partition
#PSEED="-S XXXXXX"

# encrypted root loop device index (0 ... 7), 5 == /dev/loop5
# _must_ match /etc/fstab entry:   /dev/loop5  /  ext2  defaults,xxxx  0  1
ROOTLOOPINDEX=5

# temporary loop device index used in this script, 7 == /dev/loop7
TEMPLOOPINDEX=7


set -e
cat - &lt;&lt;EOF &gt;tmp-c-$$.c

#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;
#include &lt;sys/mount.h&gt;
#include &lt;sys/utsname.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;

void strCat(char *d, char *s)
{
    while(*d) d++;
    while(*s) *d++ = *s++;
    *d = 0;
}

void wrStr(char *s)
{
    char *p = s;
    int x = 0;

    while(*p) p++, x++;
    write(1, s, x);
}

int exeWait(char *p)
{
    int x, y;
    char *a[50], *e[1];

    if(!(x = fork())) {
        while(*p &amp;&amp; (x &lt; ((sizeof(a) / sizeof(char *)) - 1))) {  
            a[x++] = p;
            while(*p &amp;&amp; (*p != ' ') &amp;&amp; (*p != '\t')) p++;
            while((*p == ' ') || (*p == '\t')) *p++ = 0;
        }
        e[0] = a[x] = 0;
        if(x) execve(a[0], &amp;a[0], &amp;e[0]);
        _exit(1); 
    }
    waitpid(x, &amp;y, 0);
    if(!WIFEXITED(y) || (WEXITSTATUS(y) != 0)) {
        wrStr("Command \""); wrStr(p); wrStr("\" returned error\n");
        return(1);
    }
    return(0);
}

void _start()
{
    int x;
    struct utsname un;
    char buf[300];

    if(mount("none", "/proc", "proc", MS_MGC_VAL, 0)) {
        wrStr("Mounting /proc failed\n");
        goto fail3;
    }
    /* this intentionally mounts /boot partion as /lib */
    if(mount("${BOOTDEV}", "/lib", "${BOOTTYPE}", MS_MGC_VAL | MS_RDONLY, 0)) {
        wrStr("Mounting ${BOOTDEV} as /lib failed\n");
        goto fail2;
    }

    uname(&amp;un);
    buf[0] = 0;
    strCat(buf, "/lib/insmod -o loop /lib/loop-");
    strCat(buf, &amp;un.release[0]);
    strCat(buf, ".o");
    if(exeWait(buf)) goto fail1;

    wrStr("\nEncrypted file system, please supply correct password to continue\n\n");
    buf[0] = 0;
    strCat(buf, "/lib/losetup -e ${CIPHERTYPE} ${PSEED} /dev/loop${ROOTLOOPINDEX} ${CRYPTROOT}");
    if(exeWait(buf)) goto fail1;
    wrStr("\n");

    if((x = open("/proc/sys/kernel/real-root-dev", O_WRONLY, 0)) == -1) {
        wrStr("Unable to open real-root-dev\n");
        goto fail1;
    }
    write(x, "0x70${ROOTLOOPINDEX}\n", 6);
    close(x);

fail1:
    umount("/lib");
fail2:
    umount("/proc");
fail3:
    _exit(0);
}
EOF

gcc -Wall -O2 -s -static -nostartfiles -pipe tmp-c-$$.c -o tmp-c-$$
rm -f tmp-c-$$.[co]

x=`cat tmp-c-$$ | wc -c`
y=`expr ${x} + 1023`
x=`expr ${y} / 1024`
y=`expr ${x} + 12`

dd if=/dev/zero of=tmp-i-$$ bs=1024 count=${y}
losetup /dev/loop${TEMPLOOPINDEX} tmp-i-$$
mkfs -t minix -i 32 /dev/loop${TEMPLOOPINDEX}
losetup -d /dev/loop${TEMPLOOPINDEX}
mkdir tmp-d-$$
mount -t minix tmp-i-$$ tmp-d-$$ -o loop=/dev/loop${TEMPLOOPINDEX}
cd tmp-d-$$

mkdir dev proc lib
mv ../tmp-c-$$ linuxrc

mknod dev/console c 5 1
mknod dev/tty c 5 0
mknod dev/tty1 c 4 1
mknod dev/null c 1 3
mknod dev/zero c 1 5
mknod dev/ram1 b 1 1
mknod dev/loop${ROOTLOOPINDEX} b 7 ${ROOTLOOPINDEX}

function maybeMakeDiskNode
{
    x=$3
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ; do
        for y in ${BOOTDEV} ${CRYPTROOT} ; do
            if [ ${y} == /dev/$1${i} ] ; then
                mknod dev/$1${i} b $2 ${x}
            fi
        done
        x=`expr ${x} + 1`
    done
    return
}
maybeMakeDiskNode hda 3 1
maybeMakeDiskNode hdb 3 65
maybeMakeDiskNode hdc 22 1
maybeMakeDiskNode hdd 22 65
maybeMakeDiskNode sda 8 1
maybeMakeDiskNode sdb 8 17
maybeMakeDiskNode sdc 8 33
maybeMakeDiskNode sdd 8 49

cd ..
df tmp-d-$$
umount tmp-d-$$
rmdir tmp-d-$$
sync ; sync ; sync
gzip -9 tmp-i-$$
mv tmp-i-$$.gz /boot/initrd.gz
ls -l /boot/initrd.gz

y=0
for x in /sbin/insmod /sbin/losetup ; do
    cp -p ${x} /boot
    set +e
    file ${x} | grep -q "statically linked"
    if [ ! $? == 0 ] ; then
        y=1
    fi
    set -e
done
if [ ${y} == 1 ] ; then
    cp -p /lib/ld-linux.so.2 /lib/libc.so.6 /boot
fi
if [ ! -d /initrd ] ; then
    mkdir /initrd
fi

sync
exit 0


["build-initrd.sh.sign" (text/plain)]

-----BEGIN PGP MESSAGE-----
Version: 2.6.3ia
Comment: http://loop-aes.sourceforge.net/PGP-public-key.asc

iQCVAwUAO73z4jMKg0M6Ig9RAQFRnwP8DdNma2TaYFRrrbrZO96GB7FYHA+hw66j
FmMGeFwpW0OEH0HjOD04W8wMGMl0wXA/6K5KGPNfFHTY0NJhGH+k1ojJSAGlfPY9
lHIUVxwepJ4tF+yg5Ve0MJ1hCz9/TGBqiHUpgsV6iIqrYZrXZw0yjmoPHjw8Ktvz
epXuj3YTX/o=
=8Y9W
-----END PGP MESSAGE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011006111945</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-10-06 11:19:45-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

&gt;What for? Multiple GB's of almost-known plaintext encrypted under a
&gt;single key just makes it easier for an attacker. You should only
&gt;encrypt what's secret. Your /usr surely isn't!

Aren't you thinking of the old times cryptos where one could use frequency 
analysis of the characters used in the encrypted text and then put up a 
table and compare to the apropriate language character frequency to find out 
what each character most probably would represent? In that case more data 
will make the analyse easier.

But in todays cryptos as far as I know (I may be wrong here) the more data 
you have doesn't make it easier to decrypt the content.


Best regards,

    Jonap

&gt;
&gt;Marc
&gt;
&gt;- --
&gt;In July, [...] the FBI arrested a Russian computer security researcher
&gt;who had presented a paper on the strengths and weaknesses of software
&gt;used to protect electronic books. Dmitry Sklyarov [...] landed in jail
&gt;because the Digital Millennium Copyright Act (DMCA) makes publishing
&gt;critical research on this technology a more serious offense than
&gt;publishing nuclear weapon designs.
&gt;                                -- Bruce Schneier, Crypto-Gram Aug 2001
&gt;-----BEGIN PGP SIGNATURE-----
&gt;Version: GnuPG v1.0.6 (GNU/Linux)
&gt;Comment: For info see http://www.gnupg.org
&gt;
&gt;iD8DBQE7vgz+3oWD+L2/6DgRAnlaAJ4tVONQArSzX3eTNEl8KvYyDTFZMACgwDoi
&gt;rmlUkPMM8EAF6BgxUc3PvCA=
&gt;=mvHE
&gt;-----END PGP SIGNATURE-----
&gt;
&gt;
&gt;Linux-crypto:  cryptography in and on the Linux system
&gt;Archive:       http://mail.nl.linux.org/linux-crypto/


_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006164432</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-10-06 16:44:32-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

On 2001-10-05, Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; wrote:

&gt; On Friday 05 October 2001 05:07, Antti Koskim√§ki wrote:
&gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
[snip]
&gt; &gt; Then root-filesystem.

&gt; What for? Multiple GB's of almost-known plaintext encrypted under a
&gt; single key just makes it easier for an attacker. You should only
&gt; encrypt what's secret. Your /usr surely isn't!

Not speaking for Antti, but I'm concerned not just with "someone could
steal the hard drive out of my laptop" but also "someone could steal the
hard drive out of my laptop, trojan some important binaries in any
non-encrypted partitions I have, then put it back, waiting for me to use it
again and leak key material, run privileged tools while the encrypted
filesystems are mounted, etc, and then steal it again."

To provide at least some protection from that, you need some assurance of
the integrity of, basically, everything.  Plaintext /boot and encrypted
everything else still isn't good enough, as the kernel / initrd could be
swapped out by a malicious party.  So, boot off a write-once CDROM with
your handwriting on it (and/or which you carry seperate from the
laptop--the business-card CDs would be good for this) and encrypt
*everything* on the hard drive.  Wouldn't hurt to also do fscks and md5sum
checking of system binaries after the hard drive is losetup, too, since
though they may not be able to do much they can surely scribble over
things.

--
Hank Leininger &lt;hlein@progressive-comp.com&gt; 
Then, of course, you're still trusting your BIOS, keyboard, EM
radiation...  

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006164932</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-06 16:49:32-0400</timestampReceived><subject>RE: encrypting the whole disk / all the data</subject><body>

Mr. Leininger:

	Now this idea has some merit! How would one make such a CD? For me, I would
wish such a CD to have both a patched version of the Kernel as well as being
inclusive of loop-aes code. Any ideas what the design specifications for
such a disc would be?

	I have never made even an unencrypted bootable CD for Linux, but would love
to know how to do so, for purposes of protecting my files and forcing an
encrypted boot environment.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, October 06, 2001 9:44 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hank Leininger
Sent: Saturday, October 06, 2001 9:45 AM
To: linux-crypto@nl.linux.org
Subject: Re: encrypting the whole disk / all the data

On 2001-10-05, Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; wrote:

&gt; On Friday 05 October 2001 05:07, Antti Koskim√§ki wrote:
&gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
[snip]
&gt; &gt; Then root-filesystem.

&gt; What for? Multiple GB's of almost-known plaintext encrypted under a
&gt; single key just makes it easier for an attacker. You should only
&gt; encrypt what's secret. Your /usr surely isn't!

Not speaking for Antti, but I'm concerned not just with "someone could
steal the hard drive out of my laptop" but also "someone could steal the
hard drive out of my laptop, trojan some important binaries in any
non-encrypted partitions I have, then put it back, waiting for me to use it
again and leak key material, run privileged tools while the encrypted
filesystems are mounted, etc, and then steal it again."

To provide at least some protection from that, you need some assurance of
the integrity of, basically, everything.  Plaintext /boot and encrypted
everything else still isn't good enough, as the kernel / initrd could be
swapped out by a malicious party.  So, boot off a write-once CDROM with
your handwriting on it (and/or which you carry seperate from the
laptop--the business-card CDs would be good for this) and encrypt
*everything* on the hard drive.  Wouldn't hurt to also do fscks and md5sum
checking of system binaries after the hard drive is losetup, too, since
though they may not be able to do much they can surely scribble over
things.

--
Hank Leininger &lt;hlein@progressive-comp.com&gt;
Then, of course, you're still trusting your BIOS, keyboard, EM
radiation...

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006174013</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-10-06 17:40:13-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

On Sat, Oct 06, 2001 at 09:49:32AM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Leininger:

&gt; 	Now this idea has some merit! How would one make such a CD? For me, I would
&gt; wish such a CD to have both a patched version of the Kernel as well as being
&gt; inclusive of loop-aes code. Any ideas what the design specifications for
&gt; such a disc would be?

&gt; 	I have never made even an unencrypted bootable CD for Linux, but would love
&gt; to know how to do so, for purposes of protecting my files and forcing an
&gt; encrypted boot environment.

	There are several such projects including the LNX-BBC (Linux Bootable
Business Card) project which has several links to several others.  LNX-BBC
is an outgrowth of the LinuxCare Rescue BBC which still exists at LinuxCare.
There is also the Linux-PLAC (Portable Linux Auditing CD).

	http://www.lnx-bbc.org
	http://www.sourceforge.org/projects/cdbased
	http://innominate.org/~pape/rescueCD/
	http://www.knopper.net/knoppix/
	http://open-projects.linuxcare.com/BBC
	http://www.kernel.org/pub/dist/superrescue/
	http://sourceforge.net/projects/plac/

	And that's just a few examples...  All can be readily modified.

	Business Card sized and shaped CD-Rs can be had for about $.50 USD
each in quantities of 100 from a couple of media suppliers.  I bought a
stack of 100 (with sleaves) for $49.00 (plus way too much shipping) a couple
of months ago.  They hold about 50Meg uncompressed.  With the cloop,
compressed loopback file system, most of the BBCs have about 150 Meg of
software on them.

	My preference is to use a combination of one of the above BBCs,
modified for my encryption of choice, and then store the keys on a smart-card
or Smart-Media card and encrypt the whole damn drive.  Then you have to have
the boot CD plus the Smart-Media card plus any optional password to boot
the system up at all.  SmartCards and Smart-Media cards fit in a wallet
real nice and the BBC's fit in a shirt pocket.

&gt; Very Respectfully,

&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; Beverly Hills, California
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt; 
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt; 
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt; 
&gt; Saturday, October 06, 2001 9:44 AM
&gt; 
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hank Leininger
&gt; Sent: Saturday, October 06, 2001 9:45 AM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: encrypting the whole disk / all the data
&gt; 
&gt; On 2001-10-05, Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; wrote:
&gt; 
&gt; &gt; On Friday 05 October 2001 05:07, Antti Koskim√§ki wrote:
&gt; &gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; [snip]
&gt; &gt; &gt; Then root-filesystem.
&gt; 
&gt; &gt; What for? Multiple GB's of almost-known plaintext encrypted under a
&gt; &gt; single key just makes it easier for an attacker. You should only
&gt; &gt; encrypt what's secret. Your /usr surely isn't!
&gt; 
&gt; Not speaking for Antti, but I'm concerned not just with "someone could
&gt; steal the hard drive out of my laptop" but also "someone could steal the
&gt; hard drive out of my laptop, trojan some important binaries in any
&gt; non-encrypted partitions I have, then put it back, waiting for me to use it
&gt; again and leak key material, run privileged tools while the encrypted
&gt; filesystems are mounted, etc, and then steal it again."
&gt; 
&gt; To provide at least some protection from that, you need some assurance of
&gt; the integrity of, basically, everything.  Plaintext /boot and encrypted
&gt; everything else still isn't good enough, as the kernel / initrd could be
&gt; swapped out by a malicious party.  So, boot off a write-once CDROM with
&gt; your handwriting on it (and/or which you carry seperate from the
&gt; laptop--the business-card CDs would be good for this) and encrypt
&gt; *everything* on the hard drive.  Wouldn't hurt to also do fscks and md5sum
&gt; checking of system binaries after the hard drive is losetup, too, since
&gt; though they may not be able to do much they can surely scribble over
&gt; things.
&gt; 
&gt; --
&gt; Hank Leininger &lt;hlein@progressive-comp.com&gt;
&gt; Then, of course, you're still trusting your BIOS, keyboard, EM
&gt; radiation...

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006201446</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-10-06 20:14:46-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

On Sat, Oct 06, 2001 at 12:44:32PM -0400, Hank Leininger wrote:
&gt; Not speaking for Antti, but I'm concerned not just with "someone could
&gt; steal the hard drive out of my laptop" but also "someone could steal the
&gt; hard drive out of my laptop, trojan some important binaries in any
&gt; non-encrypted partitions I have, then put it back, waiting for me to use it
&gt; again and leak key material, run privileged tools while the encrypted
&gt; filesystems are mounted, etc, and then steal it again."
&gt; 
&gt; To provide at least some protection from that, you need some assurance of
&gt; the integrity of, basically, everything.  Plaintext /boot and encrypted
&gt; everything else still isn't good enough, as the kernel / initrd could be
&gt; swapped out by a malicious party.  So, boot off a write-once CDROM with

Interesting discussion. As a low-tech way of doing this, you could make
a small DOS partition -- 3MB should be enough -- and use "pgp -c" to
secure your kernel. Decrypt the kernel then boot with loadlin.exe. Once
in GNU/Linux you can go back and verify the integrity of the kernel and
the DOS binaries (pgp and loadlin, as well as the OS files). This
verification could be automated by a script.

Wiping the DOS partition would be a good idea, because an attacker could
potentially recover your unencrypted kernel image, and with that could
possibly get your pgp -c passphrase. The wiping and restoration of the
partition could also be scripted.

This could be done with a bootable diskette instead of a partition, but
in that case you would need a DOS ramdrive to hold the decrypted kernel
and loadlin.exe. There may be issues with loadlin and the memory manager
needed for the ramdrive, though (I've never tried it.)

With loadlin you're limited to about 1MB compressed kernel image. No big
monolithic kernels -- you have to make it modular. This shouldn't be a
barrier for anyone yet, because most drivers can be used as modules.

Anyway, I just wanted to throw out an idea for those of us who still use
our old pre-CD-ROM laptops (portable dinosaurs. :)

&gt; Then, of course, you're still trusting your BIOS, keyboard, EM
&gt; radiation...  

And if your opponents have that kind of will and capability they are
probably working for a TLA. That of course gives them many other "brute
force" methods of password "recovery" (I love how thieves use that word
to describe what they do.)

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006224937</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-06 22:49:37-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday 06 October 2001 13:19, Jonas Larsson wrote:
&lt;snip&gt;
&gt; But in todays cryptos as far as I know (I may be wrong here) the more
&gt; data you have doesn't make it easier to decrypt the content.
&lt;snip&gt;

You are (sorry :-).
Please look up "known-plaintext-attack" in your favorite Cryptography 
handbook.
And look at the attacks presented against the AES candidates (all papers 
available from somewhere on www.nist.gov/aes): There surely are KPA's 
among them.

Marc

- -- 
I am Bush of USA. You will be pacified. Resistance is futile.  
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7v4qC3oWD+L2/6DgRAq3TAJ9t0Vusm+7RhhtgmXJbUaSm9Hz6MQCg64vK
ialJWWAXL6UevKlai0Go4Vg=
=xayj
-----END PGP SIGNATURE-----



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007021616</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-07 02:16:16-0400</timestampReceived><subject>RE: encrypting the whole disk / all the data</subject><body>

Mr. McGee:

	I appreciate your ingenuity, but I for one have a top of the line Inspiron
8000, and if its configuration were not high enough to support what I
needed, I would just upgrade it. I have never, and will never, use outdated
hardware. I prefer having the right tool for the job, every time I have to
do work.

	It is this very mentality of supporting hardware from the Stone Age, which
has made the kernel source code in Linux so freaking large. Every single
time I update my kernel (and I only use the updates from Mandrake), I am
resolved to either being forced to patch the kernel (I prefer not to do
this), and always load source for a million and one 386s, 486s, CD-ROM
drives that even the most ostentatious of computer museums cannot find. All
in the name of being able to stick out our tongues, and say, can W2K/PRO
boot on a 386/16 MHz computer? Linux can. So freaking what, I say. I believe
that if someone wants modern day software, they ought to come to terms with
the fact they need modern day hardware. It sounds condescending and perhaps
arrogant, but it is a fact.

	I have no problem with people continuing to add features for example to
Linux for the 386 and 486 platform, I just think their ought to be a kernel
you can get which is absent all that stupid fluff.

	Anyway back to the facts, I have no intention of doing some as you suggest
for several reasons:

(1) It demonstrates what security algorithm I am using, NOT SMART TO DO
(2) If the decrypted kernel is not a kernel at all, and g-d forbid, is a
piece of software which talks directly to the hard disk controller, and
proceeds to format my hard drive, then I screwed over again, NOT SMART TO
DO;
(3) Encryption algorithms are supposed to authenticate the kernel, why have
to do that twice? Also a waste!
(4) There are drivers I use in my kernel that are NOT In module form yet,
despite your presumption that everything useful is (EVMS, the competitor to
LVM, is not modular yet), thus this solution fails again!
(5) I don't have any idea what a "TLA" is, but I prefer a secure method over
a less secure method. Kind of silly to employ AES and such, if your going to
leave a whole (the unprotected kernel in the DOS partition, which anyone can
replace with any kernel, that is designed to be loaded by loadlin) in the
system!
(6) My computer is as of yet, not setup to use smart cards. However, if I
were to employ a system like that (and I am considering it), I would choose
to use one of these $300 finger print card readers which goes in a pcmcia
card slot.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, October 06, 2001 6:58 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Rob McGee
Sent: Saturday, October 06, 2001 1:15 PM
To: linux-crypto@nl.linux.org
Subject: Re: encrypting the whole disk / all the data

On Sat, Oct 06, 2001 at 12:44:32PM -0400, Hank Leininger wrote:
&gt; Not speaking for Antti, but I'm concerned not just with "someone could
&gt; steal the hard drive out of my laptop" but also "someone could steal the
&gt; hard drive out of my laptop, trojan some important binaries in any
&gt; non-encrypted partitions I have, then put it back, waiting for me to use
it
&gt; again and leak key material, run privileged tools while the encrypted
&gt; filesystems are mounted, etc, and then steal it again."
&gt;
&gt; To provide at least some protection from that, you need some assurance of
&gt; the integrity of, basically, everything.  Plaintext /boot and encrypted
&gt; everything else still isn't good enough, as the kernel / initrd could be
&gt; swapped out by a malicious party.  So, boot off a write-once CDROM with

Interesting discussion. As a low-tech way of doing this, you could make
a small DOS partition -- 3MB should be enough -- and use "pgp -c" to
secure your kernel. Decrypt the kernel then boot with loadlin.exe. Once
in GNU/Linux you can go back and verify the integrity of the kernel and
the DOS binaries (pgp and loadlin, as well as the OS files). This
verification could be automated by a script.

Wiping the DOS partition would be a good idea, because an attacker could
potentially recover your unencrypted kernel image, and with that could
possibly get your pgp -c passphrase. The wiping and restoration of the
partition could also be scripted.

This could be done with a bootable diskette instead of a partition, but
in that case you would need a DOS ramdrive to hold the decrypted kernel
and loadlin.exe. There may be issues with loadlin and the memory manager
needed for the ramdrive, though (I've never tried it.)

With loadlin you're limited to about 1MB compressed kernel image. No big
monolithic kernels -- you have to make it modular. This shouldn't be a
barrier for anyone yet, because most drivers can be used as modules.

Anyway, I just wanted to throw out an idea for those of us who still use
our old pre-CD-ROM laptops (portable dinosaurs. :)

&gt; Then, of course, you're still trusting your BIOS, keyboard, EM
&gt; radiation...

And if your opponents have that kind of will and capability they are
probably working for a TLA. That of course gives them many other "brute
force" methods of password "recovery" (I love how thieves use that word
to describe what they do.)

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007030753</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-07 03:07:53-0400</timestampReceived><subject>RE: encrypting the whole disk / all the data</subject><body>

Mr. Warfield:

	Hmm, Very interesting! I Intend to pursue that avenue and see if I can
construct such a thing. I will most likely begin using CD-RWs, but I was
interested in where to get business card CDRs anyway, so I do totally
appreciate the information.




Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

All commentary made in public email lists, usenet news groups, website
forums, or other such forums, exclusive of email conversations begun outside
of such a forum is (C)(P) Stuart Tener, unless otherwise clearly the work of
another (i.e. quotations of another's email or usenet comments). Such
quotations and any copyrights afforded them are the property of the person
being quoted. Emails and notices published in a public forum are sometimes
presumed to be in the public domain. My comments are copyrighted, I am
choosing to publish them for free, however noticing you that I am desirous
of retaining all other copyright rights as protected under appropriate US
and International copyright law. In the spirit of promoting engineering and
intellectual enrichment, you may quote me absent specific permission as long
as my commentary is quoted in full and its entirety.

Saturday, October 06, 2001 8:05 PM

-----Original Message-----
From: Michael H. Warfield [mailto:mhw@wittsend.com]
Sent: Saturday, October 06, 2001 10:40 AM
To: IT3 Stuart B. Tener, USNR-R
Cc: Hank Leininger; linux-crypto@nl.linux.org
Subject: Re: encrypting the whole disk / all the data

On Sat, Oct 06, 2001 at 09:49:32AM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Leininger:

&gt;       Now this idea has some merit! How would one make such a CD? For me,
I would
&gt; wish such a CD to have both a patched version of the Kernel as well as
being
&gt; inclusive of loop-aes code. Any ideas what the design specifications for
&gt; such a disc would be?

&gt;       I have never made even an unencrypted bootable CD for Linux, but
would love
&gt; to know how to do so, for purposes of protecting my files and forcing an
&gt; encrypted boot environment.

        There are several such projects including the LNX-BBC (Linux
Bootable
Business Card) project which has several links to several others.  LNX-BBC
is an outgrowth of the LinuxCare Rescue BBC which still exists at LinuxCare.
There is also the Linux-PLAC (Portable Linux Auditing CD).

        http://www.lnx-bbc.org
        http://www.sourceforge.org/projects/cdbased
        http://innominate.org/~pape/rescueCD/
        http://www.knopper.net/knoppix/
        http://open-projects.linuxcare.com/BBC
        http://www.kernel.org/pub/dist/superrescue/
        http://sourceforge.net/projects/plac/

        And that's just a few examples...  All can be readily modified.

        Business Card sized and shaped CD-Rs can be had for about $.50 USD
each in quantities of 100 from a couple of media suppliers.  I bought a
stack of 100 (with sleaves) for $49.00 (plus way too much shipping) a couple
of months ago.  They hold about 50Meg uncompressed.  With the cloop,
compressed loopback file system, most of the BBCs have about 150 Meg of
software on them.

        My preference is to use a combination of one of the above BBCs,
modified for my encryption of choice, and then store the keys on a
smart-card
or Smart-Media card and encrypt the whole damn drive.  Then you have to have
the boot CD plus the Smart-Media card plus any optional password to boot
the system up at all.  SmartCards and Smart-Media cards fit in a wallet
real nice and the BBC's fit in a shirt pocket.

&gt; Very Respectfully,

&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; Beverly Hills, California
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt;
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt;
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt;
&gt; Saturday, October 06, 2001 9:44 AM
&gt;
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hank Leininger
&gt; Sent: Saturday, October 06, 2001 9:45 AM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: encrypting the whole disk / all the data
&gt;
&gt; On 2001-10-05, Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; wrote:
&gt;
&gt; &gt; On Friday 05 October 2001 05:07, Antti Koskim√§ki wrote:
&gt; &gt; &gt; Simple question: How do I guarantee that not a single bit of my
&gt; &gt; &gt; essential data is written non-crypted on my Linux (laptop-)box ?
&gt; [snip]
&gt; &gt; &gt; Then root-filesystem.
&gt;
&gt; &gt; What for? Multiple GB's of almost-known plaintext encrypted under a
&gt; &gt; single key just makes it easier for an attacker. You should only
&gt; &gt; encrypt what's secret. Your /usr surely isn't!
&gt;
&gt; Not speaking for Antti, but I'm concerned not just with "someone could
&gt; steal the hard drive out of my laptop" but also "someone could steal the
&gt; hard drive out of my laptop, trojan some important binaries in any
&gt; non-encrypted partitions I have, then put it back, waiting for me to use
it
&gt; again and leak key material, run privileged tools while the encrypted
&gt; filesystems are mounted, etc, and then steal it again."
&gt;
&gt; To provide at least some protection from that, you need some assurance of
&gt; the integrity of, basically, everything.  Plaintext /boot and encrypted
&gt; everything else still isn't good enough, as the kernel / initrd could be
&gt; swapped out by a malicious party.  So, boot off a write-once CDROM with
&gt; your handwriting on it (and/or which you carry seperate from the
&gt; laptop--the business-card CDs would be good for this) and encrypt
&gt; *everything* on the hard drive.  Wouldn't hurt to also do fscks and md5sum
&gt; checking of system binaries after the hard drive is losetup, too, since
&gt; though they may not be able to do much they can surely scribble over
&gt; things.
&gt;
&gt; --
&gt; Hank Leininger &lt;hlein@progressive-comp.com&gt;
&gt; Then, of course, you're still trusting your BIOS, keyboard, EM
&gt; radiation...

        Mike
--
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007034037</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-10-07 03:40:37-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

On 6 October 2001, IT3 Stuart B. Tener, USNR-R &lt;stuart@bh90210.net&gt; wrote:
&gt; 	Now this idea has some merit! How would one make such a CD? For me, I would
&gt; wish such a CD to have both a patched version of the Kernel as well as being
&gt; inclusive of loop-aes code. Any ideas what the design specifications for
&gt; such a disc would be?
&gt; 
&gt; 	I have never made even an unencrypted bootable CD for Linux, but would love
&gt; to know how to do so, for purposes of protecting my files and forcing an
&gt; encrypted boot environment.

There is a package in the Debian distribution called "bootcd" which
does this. It is basically a collection of 3 shell scripts that assist
you in creating a Linux bootable CD. I'm using this for my rescue CD.
Unlike other rescue packages this one has the advantage to mount the
whole CD filesystem which gives you unlimited space for your tools.
I have a fully configured Linux with all development packages on a single CD
and still have some 200M of free space.

# bootcd - run your system from cd without need for disks.
# 
# Copy your running Debian System on CD with the command bootcdwrite. If your
# system has no CD-Writer you can build a bootcd via NFS on a remote System with
# CD-Writer. When you run your system from CD you do not need any disks. All
# changes will be done in ram. To reuse this changes at next boottime you can
# save them on FLOPPY with the command bootcdflopcp. If booting from your
# CD-drive is not supported, booting from FLOPPY is possible. It is possible to
# install a new system from the running CD with the command bootcd2disk.
# Bootcd2disk can also find a target disk, format it and make it bootable
# automatically.

-- 
								Regards,
								Emil
--
What's the point having bad manners if you don't use them?!?

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009122500</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-10-09 12:25:00-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

&gt; It is truly ironic that the United States, once the beacon for
&gt; promoting the principles of freedom of expression, is now
&gt; systematically infecting other countries with this dangerous public
&gt; policy choice [the DMCA] that will restrict more speech than any law
&gt; before it.

This is an issue that has to be actively fought back. In my opinion the best
way to do it is to tell anyone you know about cryptography.  Most people are
not even aware of the availably of cryptography or have wrong concepts like
"everything can be broken by security agencies, so why bother encrypting
anything". Once the people discover how easy is for them to use encryption and
the advantages deriving from using it they will start everyday use and will
teach others. I always take time to give short introductions about ciphers,
public keys (a.s.o) to everyone who wants to listen. Keep in mind that the more
people use encryption, the more difficult will be for others to spy you. At
some point, whoever they are and whatever their resources are they will be
overwhelmed.

On the other hand don't keep encrypted files, keep rather encrypted partitions
and also keep your free disk space filled with random data. Nobody will then
be able to prove that you have encrypted data on your computer because they will
just look like random noise. If you want to communicate encrypted data on the
Internet make use of steganography (there are hundreds of IRC mp3/jpeg/mpeg
channels where you may exchange your data through IRC robots that always do 
peer to peer connections and nobody will be able to tell who is the recipient
of your messages from those 94 people who downloaded that p0rn).

For your regular email use relays on which you have at least a local account if
not root. If you have root access use VPNs (I found CIPE very handy) or write
your own encrypted relay software that listens to some port and resends your
mails on port 25. Alternatively openssl/ssh can be used to tunnel pop3 and smtp
protocols.  Using relays has the advantage of decoupling you (and your personal
computer) from your emails. Use many relays randomly chosen with as many users
as you can find (hacked computers are preferred ;-). 

Don't make the life of peoples who try to spy on you easy.

-- 
								Regards,
								Emil
--
Hackers have kernel knowledge.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009131746</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-10-09 13:17:46-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, Oct 09, 2001 at 03:25:00PM +0300, Emil wrote:
&gt; For your regular email use relays on which you have at least a local account if
&gt; not root. If you have root access use VPNs (I found CIPE very handy) or write
&gt; your own encrypted relay software that listens to some port and resends your
&gt; mails on port 25. Alternatively openssl/ssh can be used to tunnel pop3 and smtp
&gt; protocols.  Using relays has the advantage of decoupling you (and your personal
&gt; computer) from your emails. Use many relays randomly chosen with as many users
&gt; as you can find (hacked computers are preferred ;-). 
&gt; 

There appears to be an exploitable weakness in ssh 
right now. Characters are transmitted as fast as
typed; interpacket timings carry probabilistic data
on which character pairs were typed.

An Israeli student has done a paper on how to use a
hidden markov model to extract root passwords.

Oh, and the iniitial packets sizes in a root logon
have a detectable signature.

See http://comnet.technion.ac.il/~cn19s01/

If anyone knows the guys working on ssh, make sure
they are aware of this. I tried getting email through
the web site but there was no good address there and
I have not gotten a reply.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009134447</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-10-09 13:44:47-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

Hi,

Quoting Dale Amon (amon@vnl.com):
&gt; There appears to be an exploitable weakness in ssh 
&gt; right now. Characters are transmitted as fast as
&gt; typed; interpacket timings carry probabilistic data
&gt; on which character pairs were typed.
iirc there actually are two vulnerabilities; the ability to make
statistically supported guesses about password length, and guesses about
password _content_; both in the initial ssh password exchange, and in
password exchanges in _new_ ssh sessions from an existing ssh session.

&gt; If anyone knows the guys working on ssh, make sure
&gt; they are aware of this. I tried getting email through
&gt; the web site but there was no good address there and
&gt; I have not gotten a reply.
They are aware of it, and there are patches. I don't recall which versions
actually have these patches, or where they can be found.
Just FYI.

Greets,
	Robert

-- 
			      Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
	     Fighting for peace is like screwing for virginity.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009145413</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-10-09 14:54:13-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, Oct 09, 2001 at 03:44:47PM +0200, Robert van der Meulen wrote:
&gt; Hi,

&gt; Quoting Dale Amon (amon@vnl.com):
&gt; &gt; There appears to be an exploitable weakness in ssh 
&gt; &gt; right now. Characters are transmitted as fast as
&gt; &gt; typed; interpacket timings carry probabilistic data
&gt; &gt; on which character pairs were typed.
&gt; iirc there actually are two vulnerabilities; the ability to make
&gt; statistically supported guesses about password length, and guesses about
&gt; password _content_; both in the initial ssh password exchange, and in
&gt; password exchanges in _new_ ssh sessions from an existing ssh session.

	Also in other commands run in an ssh session.  For instances,
running "su" is two chars with echo in and a password prompt back out
with several chars without echo in again.  Password success or failure
can be determined from subsequent prompts and reentries.  Unique enough
that you can spot it in traffic and guess that the dude ran su and you
have a good guess on the length (number of keystrokes) and content
(clustered heuristics based on timing) of the root password.  Accumulate
a few instances and your guesses get better.  Pretty slick.  Strongest
recommendation I've seen for switching to OPIE/SKEY.

&gt; &gt; If anyone knows the guys working on ssh, make sure
&gt; &gt; they are aware of this. I tried getting email through
&gt; &gt; the web site but there was no good address there and
&gt; &gt; I have not gotten a reply.
&gt; They are aware of it, and there are patches. I don't recall which versions
&gt; actually have these patches, or where they can be found.
&gt; Just FYI.

	Yeah, I've seen some comments and a patch or two on the OpenSSH
mailing list and some chatter on the SSH mailing list.  I think you could
find a patch, which includes some time randomizers and some idle time
packets, just by searching archives on the mailings lists for the last
couple of months.

&gt; Greets,
&gt; 	Robert
&gt; 
&gt; -- 
&gt; 			      Linux Generation
&gt;    encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
&gt; 	     Fighting for peace is like screwing for virginity.
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009150103</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@web.fibrespeed.net</senderEmail><timestampReceived>2001-10-09 15:01:03-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, Oct 09, 2001 at 10:54:13AM -0400, Michael H. Warfield wrote:
&gt; On Tue, Oct 09, 2001 at 03:44:47PM +0200, Robert van der Meulen wrote:
&gt; 	Yeah, I've seen some comments and a patch or two on the OpenSSH
&gt; mailing list and some chatter on the SSH mailing list.  I think you could
&gt; find a patch, which includes some time randomizers and some idle time
&gt; packets, just by searching archives on the mailings lists for the last
&gt; couple of months.

I'd be interested in any such patches you might be able to dig up or know of.  An \
idle random-packet generator would be quite interesting, especially if it meant that \
the two sides sometimes acknowledged (echo'd) the packets and other times didn't, to \
simulate interactive and non-interactive packets.  It would have to send the packets \
sometimes individually like random key strokes, and other times in chunks like an X \
application.

If anyone here knows of any cryptographers that have actually looked at these types \
                of traffic analysis attacks and preventative measures, feel free to \
                post links.
-- 
Michael T. Babcock
CTO, FibreSpeed Ltd.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011009151427</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-10-09 15:14:27-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

	I probably shouldn't quote and entire message from another
mailing list....  But, it's short...  Attached at the bottow is the
entire message posted the other day to the openssh-unix-dev mailing
list &lt;openssh-unix-dev@mindrot.org&gt;.  A few of the URL's are included
in-line.

On Tue, Oct 09, 2001 at 11:01:03AM -0400, Michael T. Babcock wrote:
&gt; On Tue, Oct 09, 2001 at 10:54:13AM -0400, Michael H. Warfield wrote:
&gt; &gt; On Tue, Oct 09, 2001 at 03:44:47PM +0200, Robert van der Meulen wrote:
&gt; &gt; 	Yeah, I've seen some comments and a patch or two on the OpenSSH
&gt; &gt; mailing list and some chatter on the SSH mailing list.  I think you could
&gt; &gt; find a patch, which includes some time randomizers and some idle time
&gt; &gt; packets, just by searching archives on the mailings lists for the last
&gt; &gt; couple of months.

&gt; I'd be interested in any such patches you might be able to dig up or
	know of.  An idle random-packet generator would be quite
	interesting, especially if it meant that the two sides
	sometimes acknowledged (echo'd) the packets and other times
	didn't, to simulate interactive and non-interactive packets.
	It would have to send the packets sometimes individually like
	random key strokes, and other times in chunks like an X application.

	&lt;Your line wrap didn't&gt;

	http://www.silicondefense.com/software/ssh/ssh-2.9.2-diffs
	http://www.silicondefense.com/software/ssh/opens3h-2.9p2.tar.gz

&gt; If anyone here knows of any cryptographers that have actually looked
	at these types of traffic analysis attacks and preventative
	measures, feel free to post links.

	http://paris.cs.berkeley.edu/~dawnsong/ssh-timing.html

&gt; -- 
&gt; Michael T. Babcock
&gt; CTO, FibreSpeed Ltd.
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!

===== Begin Forwarded Message from &lt;openssh-unix-dev@mindrot.org&gt; =====

&gt; From owner-openssh-unix-dev@mindrot.org  Fri Oct  5 21:23:13 2001
Return-Path: &lt;owner-openssh-unix-dev@mindrot.org&gt;
Message-ID: &lt;3BBE5CB6.A5788E59@silicondefense.com&gt;
Date: Fri, 05 Oct 2001 18:21:58 -0700
From: "C. Jason Coit" &lt;jasonc@silicondefense.com&gt;
To: openssh-unix-dev@mindrot.org
Subject: Defeating Timing Attacks
Sender: owner-openssh-unix-dev@mindrot.org

Hello,

In response to the timing analysis attacks presented by Dawn Song et.
al. in her paper http://paris.cs.berkeley.edu/~dawnsong/ssh-timing.html
we
at Silicon Defense developed a patch for openssh to avoid such
measures.  

Timing Analysis Evasion changes were developed by C. Jason Coit and Roel
Jonkman of Silicon Defense.

These changes cause SSH to send packets unless request not to, exactly
every 50 ms.  IF no data is ready to be sent, SSH will send a bogus
packet with 16 bytes of data (which is the same size as most
keystrokes).  Thus someone performing timing analysis cannot determine
the inter keystroke timing of a user.  SSH will send bogus data for
about 1 second after the last keystroke.  This both increases the
difficulty of determining exact password lengths and conserves bandwidth
when a user is idle (e.g. taking a coffee break).  Both the Server and
the Client exhibit this behavior and yet our code places no limit on the
data rate(i.e. if the server needs to respond with large amounts of data
it will be able to do so with large packets and without the 50 ms timing
constraint).  

The patch is currently for openssh 2.9.2 only (should not be hard to
port) and is available below as well as on the Silicon Defense web site 

http://www.silicondefense.com/software/ssh/ssh-2.9.2-diffs

There is also a tarbal version of the the patched 2.9.2 openssh code
available for download.

http://www.silicondefense.com/software/ssh/opens3h-2.9p2.tar.gz

--

+--                                             --+
|        C. Jason Coit Programmer/Analyst         |
| *Silicon Defense - Technical Support for Snort* |
|        http://www.silicondefense.com/           |
+--                                              -+


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009152540</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@web.fibrespeed.net</senderEmail><timestampReceived>2001-10-09 15:25:40-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, Oct 09, 2001 at 11:14:27AM -0400, Michael H. Warfield wrote:
&gt; These changes cause SSH to send packets unless request not to, exactly
&gt; every 50 ms.  IF no data is ready to be sent, SSH will send a bogus
&gt; packet with 16 bytes of data (which is the same size as most
&gt; keystrokes).  Thus someone performing timing analysis cannot determine
&gt; the inter keystroke timing of a user.

I'm not a professional cryptographer by any means, but my math experience tells me \
that it shouldn't be hard to analyse such traffic and remove the packets that are \
exactly 50ms apart.  Random timings would make life more difficult.

For reference, envelopes designed to make reading the contents more difficult do not \
have a pattern of dots or lines on the insides, but relatively random strokes that \
could look like any typed character.  This makes reading the contents \
                near-impossible.
-- 
Michael T. Babcock
http://www.fibrespeed.net/~mbabcock/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011009153210</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-09 15:32:10-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, 9 Oct 2001, Michael T. Babcock wrote:
&gt; I'm not a professional cryptographer by any means, but my math 
&gt; experience tells me that it shouldn't be hard to analyse such traffic 
&gt; and remove the packets that are exactly 50ms apart.  Random timings 
&gt; would make life more difficult.

The wording is a bit confusing, but on careful reading, it sounds like
those 50ms packets are also used to convey the real keystrokes, i.e. while
the user is typing (and for 1s afterward) you see *only* the 50ms packets,
nothing else. 

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009161131</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@web.fibrespeed.net</senderEmail><timestampReceived>2001-10-09 16:11:31-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

On Tue, Oct 09, 2001 at 11:32:10AM -0400, Henry Spencer wrote:
&gt; The wording is a bit confusing, but on careful reading, it sounds like
&gt; those 50ms packets are also used to convey the real keystrokes, i.e. while
&gt; the user is typing (and for 1s afterward) you see *only* the 50ms packets,
&gt; nothing else. 

I haven't looked at the patch(es) in question yet either, so I shouldn't say much \
;-).  However, if you're correct, specific timings for all keystrokes would indeed \
make timing analysis difficult.  The part that half-worried me was the ability for an \
attacker to watch for non-echoed vs. echoed commands (like password prompts).  I'm \
assuming the patch may also include a system to time the response packets and fill in \
random response packets to those timed fake packets.

Incidentally, do these attacks apply to traffic analysis of IPSEC connections using \
                something like FreeS/WAN?
-- 
Michael T. Babcock
CTO, FibreSpeed Ltd.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011009230312</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-10-09 23:03:12-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

Hi,

Quoting Michael H. Warfield (mhw@wittsend.com):
&gt; a few instances and your guesses get better.  Pretty slick.  Strongest
&gt; recommendation I've seen for switching to OPIE/SKEY.
I've been using some home-modified patches enabling openSSH for opie
authentication for a couple of months now, and it works pretty well.
The extra 'hassle' involved is quite doable, and even an advantage when you
login multiple times to the same machine at the same time; you just generate
multiple subsequent responses. This means a possible attacker does have some
extra time to sniff/van-eck the second response and use it before you can.
You do notice directly, though ;)

Greets,
	Robert
-- 
			      Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
	     Fighting for peace is like screwing for virginity.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928220637</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-28 22:06:37-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

Le Vendredi 28 Septembre 2001 21:53, Paul Hilton a √©crit :
&gt; 
&gt; I have Red Hat 7.1, I updated the kernel, the kernel source and the kernel
&gt; headers with RPMs from Red Hat to 2.4.3-12. I did not recompile the kernel.

I'm not sure if my cryptoapi-standalone RPMs will be compatable with your 
2.4.3 kernel, but it might, and as it's only the matter of installing an RPM, 
you might want to give it a try...

It was made for Mandrake 8.1, but the standalone version might work with a 
2.4.3 kernel on a RedHat as well...

Take a look at the documentaion file at:
ftp://ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/cryptoapi-2.4.7.0-2.4.8_26.README.txt


Then you would only need the following 3 small RPMs from the same FTP:
losetup-2.11h-2mdk2crypto.i586.rpm
mount-2.11h-2mdk2crypto.i586.rpm
cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm

I'm reasonably confident that the losetup and mount RPMs should be OK on your 
system.

For the cryptoapi standalone, due to your kernel version, you will have to 
move the kernel modules by hand after installation, into the correct 
/lib/modules/&lt;version&gt;/cryptoapi directory for your kernel.

Then, I can't tell if it will work or not, but it may be worth giving it a 
try...

Good luck ;-)

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929131605</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-29 13:16:05-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

I have the same system (RedHat 7.1, 2.4.3-12) and didn't manage to do that 
&gt; -(

----------------------------------------------

# uname -a
Linux myhost 2.4.3-12 #1 Fri Jun 8 15:05:56 EDT 2001 i686 unknown

# cd 
/nfs/mirror/ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/

# rpm -Uvh mount-2.11h-2mdk2crypto.i586.rpm
Preparing...                ########################################### 
[100%]
   1:mount                  ########################################### 
[100%]

# rpm -Uvh losetup-2.11h-2mdk2crypto.i586.rpm
Preparing...                ########################################### 
[100%]
   1:losetup                ########################################### 
[100%]

# rpm -Uvh cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm
Preparing...                ########################################### 
[100%]
   1:cryptoapi-standalone   ########################################### 
[100%]
depmod: *** Unresolved symbols in 
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o
depmod: *** Unresolved symbols in 
/lib/modules/2.4.3-12/cryptoapi/cryptoloop.o

# modprobe cryptoloop
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
create_proc_entry_R79ff647f
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
remove_proc_entry_R7e0bcf0f
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
proc_mkdir_Rb6104054
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: insmod 
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o failed
/lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: insmod cryptoloop failed

----------------------------------------------

Maybe I should try to rebuild the SRPMS?


Best regards,
-Jonap


&gt; From: Michel Bouissou &lt;michel@bouissou.net&gt;
&gt; To: "Paul Hilton" &lt;paul_hilton@yahoo.com&gt;, &lt;linux-crypto@nl.linux.org&gt;
&gt; Subject: Re: International Crypto Standalone - can't install
&gt; Date: Sat, 29 Sep 2001 00:06:37 +0200
&gt; 
&gt; Le Vendredi 28 Septembre 2001 21:53, Paul Hilton a √©crit :
&gt; &gt; 
&gt; &gt; I have Red Hat 7.1, I updated the kernel, the kernel source and the 
&gt; kernel
&gt; &gt; headers with RPMs from Red Hat to 2.4.3-12. I did not recompile the 
&gt; kernel.
&gt; 
&gt; I'm not sure if my cryptoapi-standalone RPMs will be compatable with your
&gt; 2.4.3 kernel, but it might, and as it's only the matter of installing an 
&gt; RPM,
&gt; you might want to give it a try...
&gt; 
&gt; It was made for Mandrake 8.1, but the standalone version might work with a
&gt; 2.4.3 kernel on a RedHat as well...
&gt; 
&gt; Take a look at the documentaion file at:
&gt; ftp://ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/cryptoapi-2.4.7.0-2.4.8_26.README.txt
&gt;  
&gt; Then you would only need the following 3 small RPMs from the same FTP:
&gt; losetup-2.11h-2mdk2crypto.i586.rpm
&gt; mount-2.11h-2mdk2crypto.i586.rpm
&gt; cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm
&gt; 
&gt; I'm reasonably confident that the losetup and mount RPMs should be OK on 
&gt; your
&gt; system.
&gt; 
&gt; For the cryptoapi standalone, due to your kernel version, you will have to
&gt; move the kernel modules by hand after installation, into the correct
&gt; /lib/modules/&lt;version&gt;/cryptoapi directory for your kernel.
&gt; 
&gt; Then, I can't tell if it will work or not, but it may be worth giving it a
&gt; try...
&gt; 
&gt; Good luck ;-)
&gt; 
&gt; --
&gt; michel@bouissou.net
&gt; OpenPGP DH/DSS ID 0x5C2BEE8F
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011001181547</emailId><senderName>"Paul Hilton"</senderName><senderEmail>paul_hilton@yahoo.com</senderEmail><timestampReceived>2001-10-01 18:15:47-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

Michel,

Thanks for your reply,

I tried it, (cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm)
and it generated exactly the same errors as my original attempt
using the cryptoapi-2.4.7.0 I tried before, depmod -a fails with all the
same
unresolved references.

losetup and mount were not a problem.

Regards,
Paul Hilton

----- Original Message -----
From: "Michel Bouissou" &lt;michel@bouissou.net&gt;
To: "Paul Hilton" &lt;paul_hilton@yahoo.com&gt;; &lt;linux-crypto@nl.linux.org&gt;
Sent: Friday, September 28, 2001 6:06 PM
Subject: Re: International Crypto Standalone - can't install


&gt; Le Vendredi 28 Septembre 2001 21:53, Paul Hilton a √©crit :
&gt; &gt;
&gt; &gt; I have Red Hat 7.1, I updated the kernel, the kernel source and the
kernel
&gt; &gt; headers with RPMs from Red Hat to 2.4.3-12. I did not recompile the
kernel.
&gt;
&gt; I'm not sure if my cryptoapi-standalone RPMs will be compatable with your
&gt; 2.4.3 kernel, but it might, and as it's only the matter of installing an
RPM,
&gt; you might want to give it a try...
&gt;
&gt; It was made for Mandrake 8.1, but the standalone version might work with a
&gt; 2.4.3 kernel on a RedHat as well...
&gt;
&gt; Take a look at the documentaion file at:
&gt;
ftp://ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPM
S/cryptoapi-2.4.7.0-2.4.8_26.README.txt
&gt;
&gt; Then you would only need the following 3 small RPMs from the same FTP:
&gt; losetup-2.11h-2mdk2crypto.i586.rpm
&gt; mount-2.11h-2mdk2crypto.i586.rpm
&gt; cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm
&gt;
&gt; I'm reasonably confident that the losetup and mount RPMs should be OK on
your
&gt; system.
&gt;
&gt; For the cryptoapi standalone, due to your kernel version, you will have to
&gt; move the kernel modules by hand after installation, into the correct
&gt; /lib/modules/&lt;version&gt;/cryptoapi directory for your kernel.
&gt;
&gt; Then, I can't tell if it will work or not, but it may be worth giving it a
&gt; try...
&gt;
&gt; Good luck ;-)
&gt;
&gt; --
&gt; michel@bouissou.net
&gt; OpenPGP DH/DSS ID 0x5C2BEE8F
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011002105605</emailId><senderName>Tom Molesworth</senderName><senderEmail>tmolesworth@gnr.com</senderEmail><timestampReceived>2001-10-02 10:56:05-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

On Sat, Sep 29, 2001 at 01:16:05PM +0000, Jonas Larsson wrote:
&gt; # modprobe cryptoloop
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
&gt; create_proc_entry_R79ff647f
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
&gt; remove_proc_entry_R7e0bcf0f
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: unresolved symbol 
&gt; proc_mkdir_Rb6104054
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: insmod 
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o failed
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o: insmod cryptoloop failed

Looks like you have "include module version numbers" turned on in
cryptoapi, and off in the kernel - or the other way 'round. Try
recompiling the kernel and cryptoapi with the "kernel module
versions" turned off.

cheers,

Tom.

Tom Molesworth &lt;tmolesworth@gnr.com&gt;
DNS Head Developer
The Global Name Registry 
Tel: +44 (0) 207 025 2218
Fax: +44 (0) 207 242 9105

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009230833</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-10-09 23:08:33-0400</timestampReceived><subject>Re: problems compiling patched util-linux-2.10o</subject><body>

Hi,

Quoting Christoph Hertel (c.hertel@usa.net):
&gt; What's left are mount/umount/losetup (I DON'T have a Backup on this
&gt; one). I therefore patched util-linux-2.10o with
&gt; /usr/src/linux/Documentation/crypto/util-linux-2.10o.int.patch -- no
&gt; problems here.
I noticed you're running Debian.
The util-linux included in the latest debian versions (testing or unstable)
contain losetup/mount/umount versions with the crypto hooks included.

&gt; I need to get those mount and umount binaries to mount that filesystem.
&gt; Do you have ANY ideas what to do, what's missing. Would it work if
&gt; someone would send me his twofish-aware (u)mount-binaries?
Use the testing/unstable util-linux package, and try again ;)

BTW, just a hint; if you're using Debian with the kernel-patch-int package
(which includes the 'original' international kernel patch from kerneli.org),
i strongly suggest you switch to either loop-aes or cryptoapi.
I currently maintain kernel-patch-int for Debian, but i'm going to phase
that out, drop it completely, and build packages for loop-aes/cryptoapi
instead.

Greets,
	Robert

-- 
			      Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
		     When all your wishes are granted,
	  many of your dreams will be destroyed. -- Marilyn Manson

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011010001027</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-10-10 00:10:27-0400</timestampReceived><subject>Re: problems compiling patched util-linux-2.10o</subject><body>

On Tue, Oct 09, 2001 at 09:21:04PM +0200, Christoph Hertel wrote:
&gt; And when I say "make losetup mount umount" a few files are compiled and

This may not be the problem, I don't know. But I did it differently. I
went into the "lib" directory and did "make" there. Then I went into the
mount directory (../mount to be precise) and did "make" again.

Did your make go into the lib directory and compile anything? If not my
approach might be worth a try.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009173723</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-09 17:37:23-0400</timestampReceived><subject>Re: packet-tracking vulnerabilities (was Re: Dutch Government...)</subject><body>

I wrote:
&gt; &gt; Incidentally, do these attacks apply to traffic analysis of IPSEC 
&gt; &gt; connections using something like FreeS/WAN?
&gt; 
&gt; Yes.  It's harder if there is other traffic using the same IPsec
&gt; connection, but there might not be.

Oops, one thing I forgot to mention:  it's also a bit harder because IPsec
always pads the packet out to the block size of the encryption algorithm,
even if no extra padding is added, and the information about *how much*
padding is present is hidden inside the encryption.  So even without extra
padding, packet sizes are known only modulo 8 (all currently-common
ciphers use 8-byte blocks), which will make it rather harder to do things
like identifying the "su" command by packet size. 

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009174027</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-09 17:40:27-0400</timestampReceived><subject>Re: packet-tracking vulnerabilities (was Re: Dutch Government...)</subject><body>

I wrote:
&gt; ...packet sizes are known only modulo 8...

Sloppy wording on my part, now that I think of it, but you get the idea:
the bottom three bits of the packet size are not visible.  (With AES this
will rise to four, since it uses 16-byte blocks.)

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009175018</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@web.fibrespeed.net</senderEmail><timestampReceived>2001-10-09 17:50:18-0400</timestampReceived><subject>Re: packet-tracking vulnerabilities (was Re: Dutch Government...)</subject><body>

On Tue, Oct 09, 2001 at 01:25:08PM -0400, Henry Spencer wrote:
&gt; The nice thing about the Silicon Defense technique (assuming I've
&gt; understood it correctly -- I haven't yet examined their code) is that it
&gt; actually eliminates the signal path completely, by fitting the real
&gt; traffic into the dummy traffic.  At first glance, I don't think there's
&gt; any reasonable general-purpose way for the network layer to do that.

You mentioned the padding used by IPSEC in another message, and this is
probably a help.  However, perhaps specifying internally that packets
should only go out at specific intervals which are adjusted for volume
would be plausible?  I'm talking very low delays here; on the level of
a few milliseconds, but enough to take timing resolution out of the
equation in some cases.

If we haven't seen a packet to be encrypted in one second, holding it
until the next 10ms mark is fine.  If we've seen a packet in the last
second but not in the last 100ms, send the packet out on the next 2ms
marker, etc.

&gt; Given that the only really touchy area is passwords, which are a tiny
&gt; fraction of all network traffic, it seems reasonable to seek long-term
&gt; solutions at or near the application layer, where it's easier to recognize
&gt; the situations needing special attention.  In particular, it's really dumb
&gt; to have passwords going across a character at a time, when there is no
&gt; character-by-character interaction involved. 

Unfortunately, this isn't just a change to 'su' or some such interactive
application, but to the terminal application being used.  If I'm 'ssh'ing
into a remote machine on which I run 'su', ssh doesn't 'know' that that
application doesn't need my keystrokes until the newline.  If there were
some terminal emulation way of communicating "line at a time" mode, with
echo on or off for input, it would help.
-- 
Michael T. Babcock
CTO, FibreSpeed Ltd.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004174202</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-04 17:42:02-0400</timestampReceived><subject>Re: des-cbc</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 04 October 2001 16:42, William A.(Andy) Adamson wrote:
&lt;snip&gt;
&gt; i need kernel crypto - each rpcsec_gss packet that arrives at the
&gt; NFSv4 client or server has to calculate a packet verifier (whether
&gt; privacy or integrity are used or not).  for kerberos v5 which is the
&gt; first gss mechanism i'm implementing, the default method of
&gt; constructing and verifying the verifier is to first perform an md5
&gt; digest on the data, and then encrypt it using des in cbc mode.

Is there really no other cipher option than DES? It's broken, you know. 
FreeSWAN is deliberately explcuding it, even though it's part of the 
standard. I wouldn't support it in new projects.

&gt; i note that there is a des-cbc cipher_implementation structure
&gt; declared in cipher-des.c, but i am unable to find the
&gt; des_cbc_encrypt/decrypt functions refered to by the structure.

IIRC, they're auto-generated. The cipher module just provides the 
"encrypt a single block" function and a cpp-macro implements functions 
that can encrypt data using different modes.

&gt; is because they are not yet implemented? is there any code i could
&gt; bleed on? i plan to pull down the mit_des_cbc_encrypt() function from
&gt; the mit kerberos 5 1.2.1 source ../lib/crypto/f_cbc.c which wraps
&gt; des_encrypt in the cbc mode just to get something working....
&lt;snip&gt;

I don't know whether the DES implementation in the kderneli patch does 
work or not. maybe you should just test it. For loopback-encryption it 
doesn't work, but that is due to the way it expects it key, which 
losetup doesn't support.

Marc

- -- 
Eternal vigilance is the price of liberty   -- Thomas Jefferson
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7vJ9q3oWD+L2/6DgRAu9+AJ4hZoaVRr1+GkCLvobkOPXdd0x1/QCgsN/X
rb+vXpjHYB3x3SZP1V9C3uU=
=c31u
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004195339</emailId><senderName>"Janusz A. Urbanowicz"</senderName><senderEmail>alex@bofh.torun.pl</senderEmail><timestampReceived>2001-10-04 19:53:39-0400</timestampReceived><subject>Re: des-cbc</subject><body>

[BMarc Mutz wrote/napisa¬≥[a]/schrieb:
-- Start of PGP signed section.
&gt; On Thursday 04 October 2001 16:42, William A.(Andy) Adamson wrote:
&gt; &lt;snip&gt;
&gt; &gt; i need kernel crypto - each rpcsec_gss packet that arrives at the
&gt; &gt; NFSv4 client or server has to calculate a packet verifier (whether
&gt; &gt; privacy or integrity are used or not).  for kerberos v5 which is the
&gt; &gt; first gss mechanism i'm implementing, the default method of
&gt; &gt; constructing and verifying the verifier is to first perform an md5
&gt; &gt; digest on the data, and then encrypt it using des in cbc mode.
&gt; 
&gt; Is there really no other cipher option than DES? It's broken, you know.
&gt; FreeSWAN is deliberately explcuding it, even though it's part of the
&gt; standard. I wouldn't support it in new projects.

I wouldn't dare to call DES broken. It is the most researched algorithm we
have, with the only weakness of key size (which is cured by using 3DES).

Alex
-- 
C _-=-_ H| Janusz A. Urbanowicz | ALEX3-RIPE | SF-F Framling |         |   *  	
 ; (_O : +-------------------------------------------------------------+ --+~|	
 ! &amp;~) ? | P¬≥yn¬±√¶ chc√™ na Wsch√≥d, za Suez, gdzie jest dobrem ka¬øde z¬≥o | l_|/	
A ~-=-~ O| Gdzie przykaza√± brak dziesi√™ciu, a pi√¶ mo¬øna a¬ø po dno;     |   |   

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004202010</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-10-04 20:20:10-0400</timestampReceived><subject>Re: des-cbc</subject><body>

On Thu, 4 Oct 2001, William A.(Andy) Adamson wrote:

&gt; hello
&gt;
&gt; i just joined the list. i'm writing the RPCSEC_GSS code for the linux kernel
&gt; NFS v4 rpc layer. we have based our NFS v4 work on the linux 2.4.4 kernel.
&gt; i've applied the linux 2.4.3.1 patch and smoke tested the sha1 and md5
&gt; implementations.
&gt;
&gt; i need kernel crypto - each rpcsec_gss packet that arrives at the NFSv4 client
&gt; or server has to calculate a packet verifier (whether privacy or integrity are
&gt; used or not).  for kerberos v5 which is the first gss mechanism i'm
&gt; implementing, the default method of constructing and verifying the verifier is
&gt; to first perform an md5 digest on the data, and then encrypt it using des in
&gt; cbc mode.
&gt;
&gt; i note that there is a des-cbc cipher_implementation structure declared in
&gt; cipher-des.c, but i am unable to find the des_cbc_encrypt/decrypt functions
&gt; refered to by the structure.
&gt;
&gt; is because they are not yet implemented? is there any code i could bleed on? i
&gt; plan to pull down the mit_des_cbc_encrypt() function from the mit kerberos 5
&gt; 1.2.1 source ../lib/crypto/f_cbc.c which wraps des_encrypt in the cbc mode
&gt; just to get something working....
&gt;
&gt; any info would be helpful

I have some problems understanding what you try to do. Do you:

1) Try to use the cryproapi to do your task.
or
2) Try to use lowlevel routines directly.

Alternative 2 is not possible with the current code, since the lowlevel
encrytion routines are static.

Also, you should kow that the DES implementation in kerneli requires
the parity bits of the key to be correctly set. The 3des cipher don't.
It's possible to change the key schedule of DES to fix this problem,
otherwise you myst fix the parity bits yourself. The parity bits makes
no sense in software implementations (and in few HW implementations IMHO)

&gt;
&gt; thanks
&gt;
&gt; --&gt;Andy Adamson
&gt;
&gt; see http://www.citi.umich.edu/projects/nfsv4 for NFSv4 info
&gt; and http://www.citi.umcih.edu/u/andros - my home page.
&gt;
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt;

-- 
--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004210527</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-04 21:05:27-0400</timestampReceived><subject>Re: des-cbc</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 04 October 2001 21:53, Janusz A. Urbanowicz wrote:
&lt;snip&gt;
&gt; &gt; Is there really no other cipher option than DES? It's broken, you
&gt; &gt; know. FreeSWAN is deliberately explcuding it, even though it's part
&gt; &gt; of the standard. I wouldn't support it in new projects.
&gt;
&gt; I wouldn't dare to call DES broken. It is the most researched
&gt; algorithm we have, with the only weakness of key size (which is cured
&gt; by using 3DES).
&lt;snip&gt;

Exactly. DES's functionality has been broken by EFF's DEScracker. It 
isn't secure anymore. It is broken. 3DES isn't though. But you were 
talking of DES.

Marc

- -- 
Nie wird so viel gelogen wie vor der Wahl, w√§hrend des Kriegs und nach
der Jagd                                          -- Otto von Bismarck
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7vM8X3oWD+L2/6DgRAvX6AKCTBehMfnb81+FY2WuA/ncgUU3MSgCgiGgE
c8RQG9Zy6ESAav3Mv7IGizo=
=X8K7
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005150941</emailId><senderName>"William A.(Andy) Adamson"</senderName><senderEmail>andros@umich.edu</senderEmail><timestampReceived>2001-10-05 15:09:41-0400</timestampReceived><subject>Re: des-cbc</subject><body>


&gt; On Thursday 04 October 2001 16:42, William A.(Andy) Adamson wrote:
&gt; &lt;snip&gt;
&gt; &gt; i need kernel crypto - each rpcsec_gss packet that arrives at the
&gt; &gt; NFSv4 client or server has to calculate a packet verifier (whether
&gt; &gt; privacy or integrity are used or not).  for kerberos v5 which is the
&gt; &gt; first gss mechanism i'm implementing, the default method of
&gt; &gt; constructing and verifying the verifier is to first perform an md5
&gt; &gt; digest on the data, and then encrypt it using des in cbc mode.
&gt; 
&gt; Is there really no other cipher option than DES? It's broken, you know. 
&gt; FreeSWAN is deliberately explcuding it, even though it's part of the 
&gt; standard. I wouldn't support it in new projects.

kerberos v5 still uses des as a default, so it must be implemented.


&gt; &gt; i note that there is a des-cbc cipher_implementation structure
&gt; &gt; declared in cipher-des.c, but i am unable to find the
&gt; &gt; des_cbc_encrypt/decrypt functions refered to by the structure.
&gt; 
&gt; IIRC, they're auto-generated. The cipher module just provides the 
&gt; "encrypt a single block" function and a cpp-macro implements functions 
&gt; that can encrypt data using different modes.

ok. i'll look for the auto-generated interface. thanks.


&gt; &gt; is because they are not yet implemented? is there any code i could
&gt; &gt; bleed on? i plan to pull down the mit_des_cbc_encrypt() function from
&gt; &gt; the mit kerberos 5 1.2.1 source ../lib/crypto/f_cbc.c which wraps
&gt; &gt; des_encrypt in the cbc mode just to get something working....
&gt; &lt;snip&gt;
&gt; 
&gt; I don't know whether the DES implementation in the kderneli patch does 
&gt; work or not. maybe you should just test it. For loopback-encryption it 
&gt; doesn't work, but that is due to the way it expects it key, which 
&gt; losetup doesn't support.
&gt; 
&gt; Marc
&gt; 
&gt; - -- 
&gt; Eternal vigilance is the price of liberty   -- Thomas Jefferson
&gt; -----BEGIN PGP SIGNATURE-----
&gt; Version: GnuPG v1.0.6 (GNU/Linux)
&gt; Comment: For info see http://www.gnupg.org
&gt; 
&gt; iD8DBQE7vJ9q3oWD+L2/6DgRAu9+AJ4hZoaVRr1+GkCLvobkOPXdd0x1/QCgsN/X
&gt; rb+vXpjHYB3x3SZP1V9C3uU=
&gt; =c31u
&gt; -----END PGP SIGNATURE-----
&gt; 
&gt; 



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005153806</emailId><senderName>"William A.(Andy) Adamson"</senderName><senderEmail>andros@umich.edu</senderEmail><timestampReceived>2001-10-05 15:38:06-0400</timestampReceived><subject>Re: des-cbc</subject><body>

&gt; On Thu, 4 Oct 2001, William A.(Andy) Adamson wrote:
&gt; 
&gt; &gt; hello
&gt; &gt; 
&gt; &gt; i just joined the list. i'm writing the RPCSEC_GSS code for the linux kernel
&gt; &gt; NFS v4 rpc layer. we have based our NFS v4 work on the linux 2.4.4 kernel.
&gt; &gt; i've applied the linux 2.4.3.1 patch and smoke tested the sha1 and md5
&gt; &gt; implementations.
&gt; &gt; 
&gt; &gt; i need kernel crypto - each rpcsec_gss packet that arrives at the NFSv4 client
&gt; &gt; or server has to calculate a packet verifier (whether privacy or integrity are
&gt; &gt; used or not).  for kerberos v5 which is the first gss mechanism i'm
&gt; &gt; implementing, the default method of constructing and verifying the verifier is
&gt; &gt; to first perform an md5 digest on the data, and then encrypt it using des in
&gt; &gt; cbc mode.
&gt; &gt; 
&gt; &gt; i note that there is a des-cbc cipher_implementation structure declared in
&gt; &gt; cipher-des.c, but i am unable to find the des_cbc_encrypt/decrypt functions
&gt; &gt; refered to by the structure.
&gt; &gt; 
&gt; &gt; is because they are not yet implemented? is there any code i could bleed on? i
&gt; &gt; plan to pull down the mit_des_cbc_encrypt() function from the mit kerberos 5
&gt; &gt; 1.2.1 source ../lib/crypto/f_cbc.c which wraps des_encrypt in the cbc mode
&gt; &gt; just to get something working....
&gt; &gt; 
&gt; &gt; any info would be helpful
&gt; 
&gt; I have some problems understanding what you try to do. Do you:
&gt; 
&gt; 1) Try to use the cryproapi to do your task.
&gt; or
&gt; 2) Try to use lowlevel routines directly.

i'm using the cryptoapi from the 2.4.3.1 patch - looking up des-cbc using 
find_cipher_by_name() and following the example code in crypto/testing/speed.c 
cipher_correct() using cipher_implementation function pointers. in thd des_cbc 
cipher_implementation struct, the INIT_CIPHER_OPS(des) gives function pointers 
to des_encrypt(), which i can find in cipher-des.c. 
INIT_CIPHER_BLOCKOPS(des_cbc) gives function pointers to des_cbc_encrypt() 
which i couldn't find anywhere. i want to look at the code in order to 
determine what if any pre-processing needs to be done to match kerberos v5. i 
now see that the des_cbc_encrypt and associated functions are generated by 
cpp, i can move forward.


&gt; Alternative 2 is not possible with the current code, since the lowlevel
&gt; encrytion routines are static.
&gt; 
&gt; Also, you should kow that the DES implementation in kerneli requires
&gt; the parity bits of the key to be correctly set. The 3des cipher don't.
&gt; It's possible to change the key schedule of DES to fix this problem,
&gt; otherwise you myst fix the parity bits yourself. The parity bits makes
&gt; no sense in software implementations (and in few HW implementations IMHO)

thanks for the info. is cryptoapi-2.4.10.diff (from kernel.org .../people/hvr) the \
best 2.4 kernel patch to be using?

--&gt;Andy



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011005210706</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-10-05 21:07:06-0400</timestampReceived><subject>Re: des-cbc</subject><body>

"Janusz A. Urbanowicz" wrote:

&gt; &gt; Is there really no other cipher option than DES? It's broken, you know.
&gt; &gt; FreeSWAN is deliberately explcuding it, even though it's part of the
&gt; &gt; standard. I wouldn't support it in new projects.
&gt; 
&gt; I wouldn't dare to call DES broken. It is the most researched algorithm we
&gt; have, with the only weakness of key size (which is cured by using 3DES).

Single DES has been literally broken several times. If you don't want to call
it "broken", perhaps "weak", or "insecure" or "obsolete"?

There's a fairly detailed discussion in the FreeS/WAN documentation:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/politics.html#desnotsecure

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005211459</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-10-05 21:14:59-0400</timestampReceived><subject>Re: des-cbc</subject><body>

On Fri, 5 Oct 2001, Sandy Harris wrote:
&gt; Single DES has been literally broken several times.

No it hasnt.

"broken" implies an exploit other than brute force is possible.

Single DES is only weak because of its keylength.

Brute force attacks work against ANY algorithm of short keylength.

DES certainly isn't any weaker than any other cypher of the same keylength.

-Dan
-- 
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011005235744</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-05 23:57:44-0400</timestampReceived><subject>RE: des-cbc</subject><body>

Crypto list members:

	The very honest to g-d truth is not that DES is weak due to a short key
length, or even broken (which is a lie, it has never been cracked). Its key
length would not be considered short if we were all running 1MHz Z80s again.
Key length is a determining factor only when the technology of effectuating
a brute force attack in a short period of time has become a low cost choice.

	Everyone now is saying 3DES is strong, but will we consider it strong in 3
years? Even if the algorithm is never found to have been cracked? Of course
we will, by then we will all have 12GHz processors, and 3DES will seem the
same joke that DES is now.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, October 05, 2001 4:52 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Dan Hollis
Sent: Friday, October 05, 2001 2:15 PM
To: Sandy Harris
Cc: linux-crypto@nl.linux.org
Subject: Re: des-cbc

On Fri, 5 Oct 2001, Sandy Harris wrote:
&gt; Single DES has been literally broken several times.

No it hasnt.

"broken" implies an exploit other than brute force is possible.

Single DES is only weak because of its keylength.

Brute force attacks work against ANY algorithm of short keylength.

DES certainly isn't any weaker than any other cypher of the same keylength.

-Dan
--
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006001939</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-06 00:19:39-0400</timestampReceived><subject>RE: des-cbc</subject><body>

On Fri, 5 Oct 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Key length is a determining factor only when the technology of effectuating
&gt; a brute force attack in a short period of time has become a low cost choice.

Correct.  Which is definitely true for single DES.  It may not be "broken"
in an abstract technical sense, but in a practical sense it's hopelessly
vulnerable and should not be used for anything that matters.  If it's
worth taking the trouble to encrypt your files, it's worth using a
stronger algorithm. 

&gt; 	Everyone now is saying 3DES is strong, but will we consider it strong 
&gt; in 3 years? Even if the algorithm is never found to have been cracked?

Yes.  Even assuming a (somewhat difficult) meet-in-the-middle attack,
3DES's strength against brute-force key search is is 72057594037927936
times (that is, 2^56 times) the strength of 1DES.  That is not a factor
that a few years of computer evolution will overcome.  A century from now,
the question will need closer examination, but right now it is not a
realistic concern. 

&gt; Of course
&gt; we will, by then we will all have 12GHz processors, and 3DES will seem the
&gt; same joke that DES is now.

No.  It will take much more than 12GHz to accomplish that.  The ability
to do arithmetic is useful in such discussions.

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006002003</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-10-06 00:20:03-0400</timestampReceived><subject>RE: des-cbc</subject><body>

On Fri, 5 Oct 2001, IT3 Stuart B. Tener, USNR-R wrote:

&gt; 	Everyone now is saying 3DES is strong, but will we consider it
&gt; strong in 3 years? Even if the algorithm is never found to have been
&gt; cracked? Of course we will, by then we will all have 12GHz processors,
&gt; and 3DES will seem the same joke that DES is now.

really?

3DES a joke in 3 years. i'll take you up on that.

read the report by matt blaze, etc. on how long key length must be to
protect info for a given number of years against brute force given the
increase in computing horsepower and given a specific budget:

http://www.crypto.com/papers/keylength.txt

here is a summary:

"Therefore, to provide adequate protection against the most serious
threats --- well-funded commercial enterprises or government intelligence
agencies --- keys used to protect data today should be at least 75 bits
long. To protect information adequately for the next 20 years in the face
of expected advances in computing power, keys in newly-deployed systems
should be at least 90 bits long."



- brett


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006004741</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-10-06 00:47:41-0400</timestampReceived><subject>Re: des-cbc</subject><body>

On Fri, Oct 05, 2001 at 05:07:06PM -0400, Sandy Harris wrote:
&gt; "Janusz A. Urbanowicz" wrote:

&gt; &gt; &gt; Is there really no other cipher option than DES? It's broken, you know.
&gt; &gt; &gt; FreeSWAN is deliberately explcuding it, even though it's part of the
&gt; &gt; &gt; standard. I wouldn't support it in new projects.

&gt; &gt; I wouldn't dare to call DES broken. It is the most researched algorithm we
&gt; &gt; have, with the only weakness of key size (which is cured by using 3DES).

&gt; Single DES has been literally broken several times. If you don't want to call
&gt; it "broken", perhaps "weak", or "insecure" or "obsolete"?

	No.  None of the above.

	Simply "inadequate".  There may be things for which is it
"adequate", that I can not judge.  For what we want to do now, in
IPSec and securing data and transmissions and transactions, it simple
is not up to the task.  It has never been "broken", it simply is no longer
up to the tasks.  "Weak" implies an absolute measure of "strength" and,
in fact, the issue is relative.  It's strong compared to rot13 (which
Adobe used in Ebooks) but pitiful compared to AES or IDEA.  Calling it
insecure requires the definition of what framework.  I don't quite think
I will argue with obsolete, since I agree that better options exist
and I know of no real good reason to stick WITH DES, as long as you have
the choice, so I guess that implies obsolete.  But the bottom line is that
it is simply inadequate for what we want to use a crypto algorithm for.
But "inadequate" is a word that does not meet the requirements of the
"argument by label and declaration" crowd.

&gt; There's a fairly detailed discussion in the FreeS/WAN documentation:
&gt; http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/politics.html#desnotsecure

	FreeSwan issues are political, not technical.  Hence the continuing
ban on US contributions to the FreeSwan project to the continuing detriment
to their credibility.  (Sorry, Sandy, can't pass up a decent opportunity
for a "low blow".)

&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006005847</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-10-06 00:58:47-0400</timestampReceived><subject>Re: des-cbc</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
 
&gt; Crypto list members:
&gt; 
&gt; The very honest to g-d truth is not that DES is weak due to a short key length,

Nonsense. Inadequate key size is the only known practical problem with DES.
Differential and linear cryptanalysis both break it faster than brute force
in theory, but neither is a practical attack.

The DES keylength was arguably too short when it was designed. Diffie and
Hellman published a paper in 1977 showing that a keysearch machine that
would break DES in about 9 hours could be built for $20 million.

&gt; or even broken (which is a lie, it has never been cracked).

Sure it has:
http://www.eff.org/descracker.html
http://www.distributed.net/pressroom/DESII-1-PR.html

The EFF machine was essentially the same design as Diffie and Hellman's,
cost $200-odd thousand, and broke DES in 57 hours.

&gt; Its key
&gt; length would not be considered short if we were all running 1MHz Z80s again.
&gt; Key length is a determining factor only when the technology of effectuating
&gt; a brute force attack in a short period of time has become a low cost choice.
&gt; 
&gt;         Everyone now is saying 3DES is strong, but will we consider it strong in 3
&gt; years? Even if the algorithm is never found to have been cracked? Of course
&gt; we will, by then we will all have 12GHz processors, and 3DES will seem the
&gt; same joke that DES is now.

You don't appear to understand the math. For one explanation, see:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute

Going from 1 MHz to 12 GHz is a factor of 12,000. 14 extra key bits make
a cipher 2^14, about 16,000, times harder to brute force. At least against
brute force keysearch, 3DES is strong enough.

A meet-in-the-middle attack breaks 3DES in 2^112 encryptions, but that is
almost certainly large enough to be safe. Also, the attack requires some
absurd amount of memory.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006011117</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-10-06 01:11:17-0400</timestampReceived><subject>Re: des-cbc</subject><body>

On Fri, 5 Oct 2001, Sandy Harris wrote:
&gt; &gt; or even broken (which is a lie, it has never been cracked).
&gt; Sure it has:
&gt; http://www.eff.org/descracker.html
&gt; http://www.distributed.net/pressroom/DESII-1-PR.html

Quit playing stupid word games.

DES has been bruteforced, which is the case for ANY ALGORITHM OF SHORT KEY
LENGTH.

DES algorithm has never been CRACKED. Unlike some other algorithms...

Give it up. Bruteforcing is NOT cracking.

-Dan
-- 
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006063958</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-06 06:39:58-0400</timestampReceived><subject>RE: des-cbc</subject><body>

Mr. Harris:

	First off, I'll thank you to quote me in my entirety if you plan to do
that, otherwise don't quote me at all. You simply left off the pertinent
parts of my initial argument, then in the second paragraph you said just
what I said, that the key length was too short.

	I admit I don't understand the difference between "Inadequate key size is
the only known practical problem with DES", and the fact that I stated that
the key length "being short" is relative to the amount of time it takes to
use a brute force attack. Your own justification of 3DES articulates that it
is strong predicated on what you feel the processing power will be in 3
years!

	Perhaps your arguments about a 12GHz machines being fast enough are true,
but what if those 12GHz machines are worth $50 a pop by then, and someone
uses 500 of them at one time in a Linux cluster? The impact of a high
capacity machine does not mean that any person encouraged to break a key
family via brute force, will do so with a single machine!


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, October 05, 2001 11:30 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Sandy Harris
Sent: Friday, October 05, 2001 5:59 PM
To: linux-crypto@nl.linux.org
Subject: Re: des-cbc

"IT3 Stuart B. Tener, USNR-R" wrote:

&gt; Crypto list members:
&gt;
&gt; The very honest to g-d truth is not that DES is weak due to a short key
length,

Nonsense. Inadequate key size is the only known practical problem with DES.
Differential and linear cryptanalysis both break it faster than brute force
in theory, but neither is a practical attack.

The DES keylength was arguably too short when it was designed. Diffie and
Hellman published a paper in 1977 showing that a keysearch machine that
would break DES in about 9 hours could be built for $20 million.

&gt; or even broken (which is a lie, it has never been cracked).

Sure it has:
http://www.eff.org/descracker.html
http://www.distributed.net/pressroom/DESII-1-PR.html

The EFF machine was essentially the same design as Diffie and Hellman's,
cost $200-odd thousand, and broke DES in 57 hours.

&gt; Its key
&gt; length would not be considered short if we were all running 1MHz Z80s
again.
&gt; Key length is a determining factor only when the technology of
effectuating
&gt; a brute force attack in a short period of time has become a low cost
choice.
&gt;
&gt;         Everyone now is saying 3DES is strong, but will we consider it
strong in 3
&gt; years? Even if the algorithm is never found to have been cracked? Of
course
&gt; we will, by then we will all have 12GHz processors, and 3DES will seem the
&gt; same joke that DES is now.

You don't appear to understand the math. For one explanation, see:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute

Going from 1 MHz to 12 GHz is a factor of 12,000. 14 extra key bits make
a cipher 2^14, about 16,000, times harder to brute force. At least against
brute force keysearch, 3DES is strong enough.

A meet-in-the-middle attack breaks 3DES in 2^112 encryptions, but that is
almost certainly large enough to be safe. Also, the attack requires some
absurd amount of memory.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011006081045</emailId><senderName>Andrew McGuinness</senderName><senderEmail>a.mcguinness@ntlworld.com</senderEmail><timestampReceived>2001-10-06 08:10:45-0400</timestampReceived><subject>RE: des-cbc</subject><body>

Quoting "IT3 Stuart B. Tener, USNR-R" &lt;stuart@bh90210.net&gt;:


&gt; 	Perhaps your arguments about a 12GHz machines being fast enough are
&gt; true,
&gt; but what if those 12GHz machines are worth $50 a pop by then, and
&gt; someone
&gt; uses 500 of them at one time in a Linux cluster? The impact of a high
&gt; capacity machine does not mean that any person encouraged to break a key
&gt; family via brute force, will do so with a single machine!
&gt; 

Oh dear.  As several people have pointed out, 3DES is 2^56 times harder
to brute-force than DES

making the machines 100 times faster brings that down to about 2^49

using 500 machines will bring that down to 2^40

If you made the machines 100 MILLION times faster, and used 500 MILLION
of them, you would be getting close to the ability anyone has to break
1DES today.

This is very easy to calculate - look up "exponential" in a textbook, and
you'll stop throwing "500" around as if it were a big number in this
context

&gt; 
&gt; Very Respectfully,
&gt; 
&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; Beverly Hills, California
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt; 
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt; 
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt; 
&gt; Friday, October 05, 2001 11:30 PM
&gt; 
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Sandy Harris
&gt; Sent: Friday, October 05, 2001 5:59 PM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: des-cbc
&gt; 
&gt; "IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; &gt; Crypto list members:
&gt; &gt;
&gt; &gt; The very honest to g-d truth is not that DES is weak due to a short
&gt; key
&gt; length,
&gt; 
&gt; Nonsense. Inadequate key size is the only known practical problem with
&gt; DES.
&gt; Differential and linear cryptanalysis both break it faster than brute
&gt; force
&gt; in theory, but neither is a practical attack.
&gt; 
&gt; The DES keylength was arguably too short when it was designed. Diffie
&gt; and
&gt; Hellman published a paper in 1977 showing that a keysearch machine that
&gt; would break DES in about 9 hours could be built for $20 million.
&gt; 
&gt; &gt; or even broken (which is a lie, it has never been cracked).
&gt; 
&gt; Sure it has:
&gt; http://www.eff.org/descracker.html
&gt; http://www.distributed.net/pressroom/DESII-1-PR.html
&gt; 
&gt; The EFF machine was essentially the same design as Diffie and Hellman's,
&gt; cost $200-odd thousand, and broke DES in 57 hours.
&gt; 
&gt; &gt; Its key
&gt; &gt; length would not be considered short if we were all running 1MHz Z80s
&gt; again.
&gt; &gt; Key length is a determining factor only when the technology of
&gt; effectuating
&gt; &gt; a brute force attack in a short period of time has become a low cost
&gt; choice.
&gt; &gt;
&gt; &gt;         Everyone now is saying 3DES is strong, but will we consider it
&gt; strong in 3
&gt; &gt; years? Even if the algorithm is never found to have been cracked? Of
&gt; course
&gt; &gt; we will, by then we will all have 12GHz processors, and 3DES will seem
&gt; the
&gt; &gt; same joke that DES is now.
&gt; 
&gt; You don't appear to understand the math. For one explanation, see:
&gt; http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute
&gt; 
&gt; Going from 1 MHz to 12 GHz is a factor of 12,000. 14 extra key bits make
&gt; a cipher 2^14, about 16,000, times harder to brute force. At least
&gt; against
&gt; brute force keysearch, 3DES is strong enough.
&gt; 
&gt; A meet-in-the-middle attack breaks 3DES in 2^112 encryptions, but that
&gt; is
&gt; almost certainly large enough to be safe. Also, the attack requires some
&gt; absurd amount of memory.
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; 
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; 



--
Andrew McGuinness     Luton, UK             a.mcguinness@ntlworld.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007030517</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-07 03:05:17-0400</timestampReceived><subject>RE: des-cbc</subject><body>

Mr. Harris:

        I do not intend to use Microsoft Outlook in any other manner than
its default manner in terms of quoting text. But I will tell you that I
myself do not appreciate the way it functions, and am forced to use it until
Evolution (which I have much hope for) can read ".pst" files, and be
compatible with MS Exchange calendaring functions which I use extensively on
my clients servers. When that functionality exists, I will join you in
cursing Outlook. Doing all the editing involved as you request is simply
just too much work.

        How about this, since my text is my writing, perhaps I ought say
this. I do not place my words in the public domain. I as their author am
choosing to publish them free, while still reserving all redistribution
rights. You sir, are granted a license to redistribute and republish my
words (in a public electronic forum), if each paragraph and sentence is
reproduced in its entirety, and by doing so you grant a full and complete
reciprocal license to do so with your words. I do not care where between
them you insert your commentary, but I do respectfully request that you
reproduce the entirety of what I say. That being said, the email client I
use no long has anything to do with how you may think you can control my
creative works (my words), strictly US and International copyright law shall
control. If you so choose to reply even once publicly to a statement I make,
then you also agree to give permission to publish publicly all responses you
may give, even if you do so privately at some point later concerning the
same conversation. This is a specific license, constructed specifically for
you, as all copyright holders are allowed to license differently to as many
parties as they wish their works.

        You in fact argued that you quoted me in my entirety, but I would
remind you that you did not. If you did, where is the text, which follows
the comma after "The very honest to g-d truth is not that DES is weak due to
a short key length,". I would not mind if you had put the remainder of the
sentence below the commentary. That would be okay, but you have deleted the
remainder of that sentence. See the reply you sent below under "&gt; &gt; Crypto
list members:" down below. When you published that reply, it was absent
completely, portions of my words. How you break up my text in replying I do
not care, but providing it all, I feel is quite important and request via
the license provided above, that you do.

        Now, in response to your other questions about my reading the
article, yes I did. However, you are not taking potential advances of
technology into account. In 5 years, we all may have machines with 10 12GHz
processors in them, and perhaps there will be contests not unlike those
sponsored by the EFF, where millions of computers simultaneously worked to
crack a phrase. Perhaps other advances in technology will exceed our current
expectations. I am just saying that its ridiculous to presume an encryption
algorithm will be good for a set amount of time, when we have no way to
gauge technology. This theory of doubling every 18 months is far from true
is just that, a theory; and may well prove to be invalid in 3 months anyway.
What if Intel and AMD decide their business plans are requisite of churning
out 2x current speeds every 3 months? Then what? I would say that from a
year and a half ago (given the AMD chips, at speeds of 1.7GHz) that a 450MHz
to 500MHz machine is 3 to 4 times in that same time period, and that is now!
What will the advancement rate be like in a year? How is the advancement of
SMP systems and clustering juxtaposed against that paper? No mention was
made about that! Respectfully, I do not agree with the paper you provided.
It makes assumptions which are not based in predictable scientific fact, and
even if so, cannot be shown to be an accurate predictor for the future.

        You did quote me out of context, and that is why I complained. If
you include all my words that is one thing, you did not. Remember it is
impossible to be accused of quoting anyone out of context, if you provide
all their words.

        If the short key length in your words, "is not an issue that
matters", then perhaps you can tell me why you argued it in the first place?
        I am choosing to republish this too the list, as I feel that there
is information here of good publish use, and am desirous of sharing that
commentary with the Linux crypto community at large, for proper peer review.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, October 06, 2001 7:17 PM

-----Original Message-----
From: Sandy Harris [mailto:sandy@storm.ca]
Sent: Saturday, October 06, 2001 11:07 AM
To: stuart@bh90210.net
Subject: Re: des-cbc

"IT3 Stuart B. Tener, USNR-R" wrote:

Replying off-list since I feel there's nothing of general interest to be
discussed here.

If you feel this discussion belongs on the list, you have my permission to
quote me there.

&gt; Mr. Harris:
&gt;
&gt;         First off, I'll thank you to quote me in my entirety if you plan
to do
&gt; that, otherwise don't quote me at all.

Not a chance. I'll quote enough to give context, no more.

See the mailing list ettiquette FAQ:
http://www.gweep.ca/~edmonds/usenet/ml-etiquette.html
In particular, the section on quoting:
http://www.gweep.ca/~edmonds/usenet/ml-etiquette.html#SECTION000900000000000
00000

Note, incidentally, that it recommends strongly against the quoting style
you are using, with your reply at the top followed by the entire message
you are replying to.

If, in snipping a post I'm replying to, I quote you out of context, complain
then. It is certainly not my intention to distort what you say.

As it happens, I did quote the entire message I was replying to in this
case,
so I don't know what you are complaining about.

&gt; You simply left off the pertinent
&gt; parts of my initial argument, then in the second paragraph you said just
&gt; what I said, that the key length was too short.
&gt;
&gt;         I admit I don't understand the difference between "Inadequate key
size is
&gt; the only known practical problem with DES", and the fact that I stated
that
&gt; the key length "being short" is relative to the amount of time it takes to
&gt; use a brute force attack.

I don't think there's a difference that matters there.

&gt; Your own justification of 3DES articulates that it
&gt; is strong predicated on what you feel the processing power will be in 3
&gt; years!

I cannot see how you got that notion out of anything I've said.

&gt; Perhaps your arguments about a 12GHz machines being fast enough are true,
&gt; but what if those 12GHz machines are worth $50 a pop by then, and someone
&gt; uses 500 of them at one time in a Linux cluster? The impact of a high
&gt; capacity machine does not mean that any person encouraged to break a key
&gt; family via brute force, will do so with a single machine!

You still haven't understood the math here. Did you read the URL I pointed
to?

Using 500 machines makes search roughly 500 times faster. Every extra key
bit doubles the number of possible keys so adding 9 key bits makes the
brute force search problem 2^9 = 512 times harder.

Enough key bits (perhaps as few as 100, certainly less than 256) make the
search impractical for any computer, or any combination of computers, that
anyone  is the least bit likely to build in this century.

Use a million machines at 1000 GHZ each. That's 1 million times one million
or 10^12 times faster than a single 1 MHz machine.
10^3 = 1000 &lt; 1024 = 2^10 so 10^12 is less than 2^40.

Your million fast machines can break a 96-bit key by brute force about as
fast as a single 1 MHz machine can break DES. The problem is 2^40 times
harder and you have roughly 2^40 times as much power.

Against a 128-bit cipher, they take 2^32 &gt; 4 billion times as long.

Against adequate key length, neither machine speed nor number of machines
matters a damn for brute force attacks. You just cannot win when the math
is exponential and working against you.

&gt; Very Respectfully,
&gt;
&gt; Stuart Blake Tener, IT3, USNR-R, N3GWG
&gt; Beverly Hills, California
&gt; VTU 1904G (Volunteer Training Unit)
&gt; stuart@bh90210.net
&gt; west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
&gt; east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859
&gt;
&gt; Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
&gt; free!)
&gt;
&gt; JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.
&gt;
&gt; Friday, October 05, 2001 11:30 PM
&gt;
&gt; -----Original Message-----
&gt; From: owner-linux-crypto@nl.linux.org
&gt; [mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Sandy Harris
&gt; Sent: Friday, October 05, 2001 5:59 PM
&gt; To: linux-crypto@nl.linux.org
&gt; Subject: Re: des-cbc
&gt;
&gt; "IT3 Stuart B. Tener, USNR-R" wrote:
&gt;
&gt; &gt; Crypto list members:
&gt; &gt;
&gt; &gt; The very honest to g-d truth is not that DES is weak due to a short key
&gt; length,
&gt;
&gt; Nonsense. Inadequate key size is the only known practical problem with
DES.
&gt; Differential and linear cryptanalysis both break it faster than brute
force
&gt; in theory, but neither is a practical attack.
&gt;
&gt; The DES keylength was arguably too short when it was designed. Diffie and
&gt; Hellman published a paper in 1977 showing that a keysearch machine that
&gt; would break DES in about 9 hours could be built for $20 million.
&gt;
&gt; &gt; or even broken (which is a lie, it has never been cracked).
&gt;
&gt; Sure it has:
&gt; http://www.eff.org/descracker.html
&gt; http://www.distributed.net/pressroom/DESII-1-PR.html
&gt;
&gt; The EFF machine was essentially the same design as Diffie and Hellman's,
&gt; cost $200-odd thousand, and broke DES in 57 hours.
&gt;
&gt; &gt; Its key
&gt; &gt; length would not be considered short if we were all running 1MHz Z80s
&gt; again.
&gt; &gt; Key length is a determining factor only when the technology of
&gt; effectuating
&gt; &gt; a brute force attack in a short period of time has become a low cost
&gt; choice.
&gt; &gt;
&gt; &gt;         Everyone now is saying 3DES is strong, but will we consider it
&gt; strong in 3
&gt; &gt; years? Even if the algorithm is never found to have been cracked? Of
&gt; course
&gt; &gt; we will, by then we will all have 12GHz processors, and 3DES will seem
the
&gt; &gt; same joke that DES is now.
&gt;
&gt; You don't appear to understand the math. For one explanation, see:
&gt;
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#brute
&gt;
&gt; Going from 1 MHz to 12 GHz is a factor of 12,000. 14 extra key bits make
&gt; a cipher 2^14, about 16,000, times harder to brute force. At least against
&gt; brute force keysearch, 3DES is strong enough.
&gt;
&gt; A meet-in-the-middle attack breaks 3DES in 2^112 encryptions, but that is
&gt; almost certainly large enough to be safe. Also, the attack requires some
&gt; absurd amount of memory.
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007115948</emailId><senderName>Ton Hospel</senderName><senderEmail>linux-crypto@ton.iguana.be</senderEmail><timestampReceived>2001-10-07 11:59:48-0400</timestampReceived><subject>Re: des-cbc</subject><body>

In article &lt;NBBBJHKIOKPKOGOEPEDPKECODOAA.stuart@bh90210.net&gt;,
	"IT3 Stuart B. Tener, USNR-R" &lt;stuart@bh90210.net&gt; writes:
&gt; Mr. Harris:
&gt; 
&gt;         I do not intend to use Microsoft Outlook in any other manner than
&gt; its default manner in terms of quoting text. But I will tell you that I
&gt; myself do not appreciate the way it functions, and am forced to use it until
&gt; Evolution (which I have much hope for) can read ".pst" files, and be
&gt; compatible with MS Exchange calendaring functions which I use extensively on
&gt; my clients servers. When that functionality exists, I will join you in
&gt; cursing Outlook. Doing all the editing involved as you request is simply
&gt; just too much work.
&gt; 
&gt;         How about this, since my text is my writing, perhaps I ought say
&gt; this. I do not place my words in the public domain. I as their author am
&gt; choosing to publish them free, while still reserving all redistribution
&gt; rights. You sir, are granted a license to redistribute and republish my
&gt; words (in a public electronic forum), if each paragraph and sentence is
&gt; reproduced in its entirety, and by doing so you grant a full and complete
&gt; reciprocal license to do so with your words. I do not care where between

Could we please have this guy removed from the mailinglist ?

His quoting style has always been terrible, but i never considered it worth
protesting about. But now he is basically declaring it illegal to have his
posts archived (his license does not allow that (yet ?), and trying to put
implicit restrictions on the way you are allowed to answer him.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007135714</emailId><senderName>Andrew McGuinness</senderName><senderEmail>a.mcguinness@ntlworld.com</senderEmail><timestampReceived>2001-10-07 13:57:14-0400</timestampReceived><subject>Re: des-cbc</subject><body>

Quoting Ton Hospel &lt;linux-crypto@ton.iguana.be&gt;:

&gt; In article &lt;NBBBJHKIOKPKOGOEPEDPKECODOAA.stuart@bh90210.net&gt;,
&gt; 	"IT3 Stuart B. Tener, USNR-R" &lt;stuart@bh90210.net&gt; writes:
&gt; &gt; Mr. Harris:
&gt; &gt; 
&gt; &gt;         I do not intend to use Microsoft Outlook in any other manner
&gt; than
&gt; &gt; its default manner in terms of quoting text. But I will tell you that
&gt; I
&gt; &gt; myself do not appreciate the way it functions, and am forced to use it
&gt; until
[ ... ]
&gt; 
&gt; Could we please have this guy removed from the mailinglist ?
&gt; 
He went in my killfile this morning.

$ cat .procmail/rc.killfile
:0:
* ^From: .*IT3 Stuart B\. Tener, USNR-R
/dev/null

&gt; His quoting style has always been terrible, but i never considered it
&gt; worth
&gt; protesting about. But now he is basically declaring it illegal to have
&gt; his
&gt; posts archived (his license does not allow that (yet ?), and trying to
&gt; put
&gt; implicit restrictions on the way you are allowed to answer him.
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt; 



--
Andrew McGuinness     Luton, UK             a.mcguinness@ntlworld.com

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011007171723</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-10-07 17:17:23-0400</timestampReceived><subject>RE: des-cbc</subject><body>

Mr. Hospel, et al.:

	You can ignore the license, its just the idea that people have the nerve to
complain that I use outlook, it is so outrageous. I am sorry, but that is
the email client I am forced to use as I have many customers which force me
to use the calendaring and other functions which are tied to the email.

	I am sorry, a lot of people on here are Linux bigots, and while I do dearly
love Linux, and would like nothing more than to see the day when the entire
World replaces Microsoft OSes with Linux, that has not happened as yet, and
I am stuck using this software.

	However, I said that to make a point. To show that these demands and
constant harassment as to the software I choose are equally as outrageous. I
would far prefer outlook to function as Mr. Harris desires it to, but it
doesn't and that is that.

If it makes you all feel any better, you can consider the license revoked,
but it's the point, that people such chutzpah to tell someone else to change
their email client! I DON'T HAVE A CHOICE! I HATE OUTLOOK! I use it because
my clients DEMAND it, and I am not resolved to have several email clients in
force at one time.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, October 07, 2001 10:11 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Ton Hospel
Sent: Sunday, October 07, 2001 5:00 AM
To: linux-crypto@nl.linux.org
Subject: Re: des-cbc

In article &lt;NBBBJHKIOKPKOGOEPEDPKECODOAA.stuart@bh90210.net&gt;,
        "IT3 Stuart B. Tener, USNR-R" &lt;stuart@bh90210.net&gt; writes:
&gt; Mr. Harris:
&gt;
&gt;         I do not intend to use Microsoft Outlook in any other manner than
&gt; its default manner in terms of quoting text. But I will tell you that I
&gt; myself do not appreciate the way it functions, and am forced to use it
until
&gt; Evolution (which I have much hope for) can read ".pst" files, and be
&gt; compatible with MS Exchange calendaring functions which I use extensively
on
&gt; my clients servers. When that functionality exists, I will join you in
&gt; cursing Outlook. Doing all the editing involved as you request is simply
&gt; just too much work.
&gt;
&gt;         How about this, since my text is my writing, perhaps I ought say
&gt; this. I do not place my words in the public domain. I as their author am
&gt; choosing to publish them free, while still reserving all redistribution
&gt; rights. You sir, are granted a license to redistribute and republish my
&gt; words (in a public electronic forum), if each paragraph and sentence is
&gt; reproduced in its entirety, and by doing so you grant a full and complete
&gt; reciprocal license to do so with your words. I do not care where between

Could we please have this guy removed from the mailinglist ?

His quoting style has always been terrible, but i never considered it worth
protesting about. But now he is basically declaring it illegal to have his
posts archived (his license does not allow that (yet ?), and trying to put
implicit restrictions on the way you are allowed to answer him.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003013443</emailId><senderName></senderName><senderEmail>beldridg@best.com</senderEmail><timestampReceived>2001-10-03 01:34:43-0400</timestampReceived><subject>RE: big problems after 2.4.10</subject><body>

On Tue, 2 Oct 2001, George Milliken wrote:

&gt; On a clear disk you can fsck forever.....

agreed. i'm pretty sure it's not a problem with disk or file structure.

- brett


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011003042309</emailId><senderName>Rainer Ellinger</senderName><senderEmail>rainer.ellinger@web.de</senderEmail><timestampReceived>2001-10-03 04:23:09-0400</timestampReceived><subject>Re: big problems after 2.4.10</subject><body>

beldridg@pobox.com wrote:

&gt; when i mounted an encrypted filesystem, i got quite a suprise. 
&gt; ?--Srws-wT    1 50757    users    2374319912 Apr  7  2000
&gt; dr-srw---T    1 35441    users    406876523 Sep 17 17:19

Don't write to the device in that state. You'll going to destroy data!

This is the output if you've the right key, but you're using a different
IV (Initialisation Vector) calculation. IV handling differs between 2.2
intern. patch, 2.4 intern. patch and 2.4 hvr int. patch. The only way
would be a backup with the old method and restore to a drive using the
new software version (probably having mcrypt somewhere in the backup
pipe ;-)

-- 
rainer@ellinger.de

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004122350</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-10-04 12:23:50-0400</timestampReceived><subject>Re: pbuilder</subject><body>

On Thu, Oct 04, 2001 at 12:30:41PM +0100, Dale Amon wrote:
&gt; I see that the .7 version is out. Haven't heard back

Ooops.... wrong mail list! :-)

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011004173324</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-04 17:33:24-0400</timestampReceived><subject>Re: up-to-date HOWTO/FAQ ?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 04 October 2001 14:03, Antti Koskim√§ki wrote:
&gt; I've been searching the web for up-to-date version of Linux disk
&gt; encryption howto, with no luck.

The Encryption-HOWTO is still quite accurate. It's not that so much has 
changed since the last release, only that 2.4 is now possible and 
there's loop-AES as a lightweight replacement. And the current 
kerneli-patches are now at people/hvr, instead of crypto/2.x, in the 
kernel.org tree.

&gt; This mailing-list is best source of information I could find so far.

It's supposed to be :-)

Marc

- -- 
I consider the terrorist attacks on September 11th to be an attack
against America's ideals. If our freedoms erode because of those
attacks, then the terrorists have won.
                            -- Bruce Schneier, Crypto-Gram 09/2001
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7vJ1k3oWD+L2/6DgRApwlAKClWdGHxOFpDCacAsJDIj0mKzMM3QCgrN0l
eLdc3S+ptbAOVK+c/MKsZfA=
=Cj2z
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011008131030</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-08 13:10:30-0400</timestampReceived><subject>Re: des-cbc</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi!

I'm kind of the founder of this mailing-list, so you better listen now:

On Sunday 07 October 2001 19:17, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Hospel, et al.:
&gt;
&gt; 	You can ignore the license, its just the idea that people have the
&gt; nerve to complain that I use outlook, it is so outrageous. I am
&gt; sorry, but that is the email client I am forced to use as I have many
&gt; customers which force me to use the calendaring and other functions
&gt; which are tied to the email.

It is _not_ the sole fact that you use Outlook what makes people here 
complaining. I think it is a combination of the following things (at 
least it is for _me_):

a. You are constantly violating nettiquette on this list through:
  a1. Quoting the entire mail without referring to the quoted material
  a2. Including an overly long signature with (wrt. to this list) 
      useless contact information.
b. What's worth, you respond to polite requests to change that by 
   pretending to be a dumb "what's that pointer for?" user with an "I 
   don't change defaults" or "I'm forced to leave the settings as they 
   are" attitude.
c. You show off your ignorance in discussions with people working in the 
   field of cryptgraphy and pretend to comprehend what they say while 
   obviously failing to do so. For a nice example, see the "12GHz" 
   discussion.

You are specifically _not_ attacked here because you use Windows (or 
Outlook for that matter).

Sorry, I can't believe you are unable to find the switch that disables 
the automatic quoting of the entire message. You are simply too lazy to 
cut the quote down to what's essential.

=&gt; In netscape, see Preferences-&gt;Mail&amp;Newsgroups-&gt;Messages
   -&gt;Automatically quote the original message when replying.

I can't believe you are unable to find the switch in outlook that 
disables the Reply-To header, which is equal to your From: header and 
thus superfluous. Again, you are too lazy to do this.

=&gt; In netscape, see Preferences-&gt;Mail&amp;Newsgroups-&gt;Identity
   -&gt;Reply-To address (only needed if different from email address) (!!)

If I see one more complaint from _you_ about the other list members, I 
will make sure you're removed from this list.

End of official part.

As to the 12Ghz discussion:

You should read at least "Applied Cryptography" if you want to make 
educated statements on crypto. Most cryptography is about math and esp. 
about probability and probability very often counters "common sense".

Brute-forcing &gt;100bit keys reaches physical limits quickly.
Let's do some crazy assumptions:
Assume every atom in the universe could test 1/(Planck time) keys per 
unit time and you had all of them at your command.

Age of the Universe (upper consensus limit): 18*10^9 yrs
Mass of the Universe (in hydrogen atoms): 4*10^78
Planck time: 5.3906*10^-44 sec

Now put this together:
1/(5.3906*10^-44)*4*10^78 keys/sec
= 4/5.3906 *10^(44+78) keys/sec
\approx 1*10^122 keys/sec
= 1*18*60*60*24*356*10^9*10^122 keys/age of universe
\approx 5.5*10^8*10^(9+122) keys/age
= 5.5*10^139 keys/age
\approx 10^140 keys/age
\approx 2^(140*3) keys/age
= 2^420 keys/age

So if you had all this computing power at your fingertips, and you tried 
breaking a key since the big bang; had the key owner thought wisely and 
selected a 512bits key (symmetric, that is; asymmetric is a completely 
different story!), you'd have a 
one-in-a-thousand-billion-billion-billion-billion-billion-billion-billion-billion-billion 
chance of having cracked that single key already.

Now, 512 is of course much larger than 100, but the assumptions were 
extraordinarily oversized (a single atom would be a more powerful 
computer than onehundret-thousand-billion-billion-billion Teraflop 
computers combined; testing a key would take _one_ operation, etc).

You should be able to follow the computation with real timeframes (say, 
100 yrs) and less oversized numbers of computers (say, only the number 
of atoms the _earth_ consists of) and computer power (say, the 
millionfold current combined power of all processors intel and AMD 
manufactured this year).

Marc

- -- 
I am Bush of USA. You will be pacified. Resistance is futile.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7wcIq3oWD+L2/6DgRAhxoAKDwoT1hpP0Ye3dr0MdOPOKNbQZN3ACgvtJI
f1qWhiQjIMOCrlmXiJhPDqg=
=X9r5
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009135900</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-10-09 13:59:00-0400</timestampReceived><subject>JAP</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hi!

I'd like to use the recent crypto-regulation proposals to point anyone 
interested to the BSI-sponsored AN.ON project, which aims at making web 
surfing non-traceable (it's essentially onion-routing, but they don't 
call it like that due to the patent problems).

Since a few days ago, they finally provide three-mix cascades:

http://anon.inf.tu-dresden.de (pages available in de, en)

You can set up your own mixes, too. If you want to make one publicly 
available, you have to sign a declaration that you don't keep log files 
et cetera.

Would be cool if some oss sites with good connectivity joined the 
network.

Marc

- -- 
Silent leges inter arma      -- Cicero
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7wx3c3oWD+L2/6DgRAqGnAJ9U5gO5hTXSpnt4MDql7THKWOxMeACfa/9v
ag4s/lth8GPOBx6cxneGS38=
=FK54
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009180813</emailId><senderName>Gisle S{lensminde</senderName><senderEmail>gisle@ii.uib.no</senderEmail><timestampReceived>2001-10-09 18:08:13-0400</timestampReceived><subject>Keystroke timing (was Re: Dutch Government wants to regulate strong</subject><body>

On Tue, 9 Oct 2001, Michael T. Babcock wrote:

&gt; On Tue, Oct 09, 2001 at 11:14:27AM -0400, Michael H. Warfield wrote:
&gt; &gt; These changes cause SSH to send packets unless request not to, exactly
&gt; &gt; every 50 ms.  IF no data is ready to be sent, SSH will send a bogus
&gt; &gt; packet with 16 bytes of data (which is the same size as most
&gt; &gt; keystrokes).  Thus someone performing timing analysis cannot determine
&gt; &gt; the inter keystroke timing of a user.
&gt; 
&gt; I'm not a professional cryptographer by any means, but my math experience tells me \
&gt; that it shouldn't be hard to analyse such traffic and remove the packets that are \
&gt; exactly 50ms apart.  Random timings would make life more difficult. 
&gt; For reference, envelopes designed to make reading the contents more difficult do \
&gt; not have a pattern of dots or lines on the insides, but relatively random strokes \
&gt; that could look like any typed character.  This makes reading the contents \
&gt; near-impossible. 

The ssh protocol already send passwords as a single block as far as I can
remember from last time I read the protocol specification. There will
however be a problem with keystroke timing unless you type a password on
the machine you log in to. That is if you log in a root "su" or in some
other way types a password. Now a lot people will do exactly. Most
sysadmins will not log on remotely directly as root, and so this attack
will be possible. Other people have sugested to insert random junk
packets to disrupt such trafic analysis.

There are however several other possible ways to make it hard to get
useful keystroke timing. One is the one already mentioned, to collect the
whole password before sending it. That could be done by detecting the
password terminal mode (which is when the character you type not are
displayed, like su and telnet and - yes ssh does).

This could be in addition to the timing regularisation patch, that also
will protect normal typing. Ideally such regularisation should be in the
terminal itself, since otherwise, every terminal based system have to
fix this separately.


--
Gisle S√¶lensminde ( gisle@ii.uib.no )

With sufficient thrust, pigs fly just fine. However, this is not
necessarily a good idea. It is hard to be sure where they are going
to land, and it could be dangerous sitting under them as they fly
overhead. (from RFC 1925)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011009190330</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-10-09 19:03:30-0400</timestampReceived><subject>Re: packet-tracking vulnerabilities (was Re: Dutch Government...)</subject><body>

On Tue, 9 Oct 2001, Michael T. Babcock wrote:
&gt; If we haven't seen a packet to be encrypted in one second, holding it
&gt; until the next 10ms mark is fine.  If we've seen a packet in the last
&gt; second but not in the last 100ms, send the packet out on the next 2ms
&gt; marker, etc.

Hmm, it's conceivable, but it would take some careful examination of the
problem to decide what the rules should be (and whether there is a rule
which will solve the problem without messing up other things). 

&gt; &gt; ...In particular, it's really dumb
&gt; &gt; to have passwords going across a character at a time, when there is no
&gt; &gt; character-by-character interaction involved. 
&gt; 
&gt; Unfortunately, this isn't just a change to 'su' or some such interactive
&gt; application, but to the terminal application being used.  If I'm 'ssh'ing
&gt; into a remote machine on which I run 'su', ssh doesn't 'know' that that
&gt; application doesn't need my keystrokes until the newline.  If there were
&gt; some terminal emulation way of communicating "line at a time" mode, with
&gt; echo on or off for input, it would help.

Uh, the Telnet protocol has had such a facility for a decade (Telnet
Linemode Option, RFC 1184), and I believe all modern implementations
support it; certainly Linux's telnet does.  There is no fundamental reason
why SSH couldn't do something similar.  Indeed, my impression is that it
already does, although I may be wrong. 

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011009201151</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-10-09 20:11:51-0400</timestampReceived><subject>Re: Keystroke timing (was Re: Dutch Government wants to regulate strong cryptography)</subject><body>

On Tue, Oct 09, 2001 at 03:34:35PM -0400, Bill Rugolsky Jr. wrote:
&gt; Or if using X (or even gpm?) you can just paste in the password from a
&gt; selection.  The selection doesn't even need to be visible -- a simple
&gt; Tcl/Tk (or similar) script will let you type a (blinded) password and
&gt; make the text the default selection.  You paste, then clear the
&gt; selection.

For the severely paranoid though, the cut/paste buffers
might well end up on the swap disk, whereas most properly
written password entry routines prevent swapout.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011010181210</emailId><senderName></senderName><senderEmail>beldridg</senderEmail><timestampReceived>2001-10-10 18:12:10-0400</timestampReceived><subject>fix to compile with 2.4.11</subject><body>

due to the changes in the kernel-module-license-checking whatever, i think
you need to do something like the following (line breaks might screw up
the patch):

(11:09:46)[beldridg@rush cryptoapi-2.4.7.0]$ diff api/Makefile.orig api/Makefile
200c200
&lt;       $(KCC) -I$(top_srcdir)/include -D__KERNEL__ -DMODULE $(KCPPFLAGS) $(KCFLAGS) \
                -o $@ -c $&lt;
---
&gt; $(KCC) -I$(top_srcdir)/include -D__KERNEL__ -DMODULE -DEXPORT_SYMTAB $(KCPPFLAGS) \
&gt; $(KCFLAGS) -o $@ -c $&lt;



- brett



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20011010194036</emailId><senderName>Christoph Hertel</senderName><senderEmail>c.hertel@usa.net</senderEmail><timestampReceived>2001-10-10 19:40:36-0400</timestampReceived><subject>Re: problems compiling patched util-linux-2.10o</subject><body>

Hello everybody who tried to helped me,

Thank You very much! It's such a good feeling to see those files again
:-)

Thanks to Emil (off-list reply) and Rob -- with both of your help I
could compile mount, but then it wouldn't mount the encrypted fs; said
something about "couldn't lock memory".

Just getting the Debian mount package wasn't enough either -- I needed
the crypto-modules. The new mount wouldn't work with 2.2.18, so I had to
compile an int-patched 2.4.3 kernel. IT WORKED! Thanks to you, Robert, I
didn't have to patch&amp;compile util-linux again.


Well, thanks again to everyone

Christoph - sleepy, but happy

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011010194758</emailId><senderName>"Paul Hilton"</senderName><senderEmail>paul_hilton@yahoo.com</senderEmail><timestampReceived>2001-10-10 19:47:58-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

Thanks for the suggestions Michel,
I reverted to the version from sourceforge,
but this time I built my own 2.4.3-12 kernel, and installed util-linux and
crypto as modules,
things went much better with a 'fresh' kernel, and it all works ok (after
several rebuilds
of the kernel when I got things wrong).
The patch for util-linux was the wrong version, but seemed to cope OK (2.11l
patched by a 2.11b patch) with only a failure to update a documentation
file..
Crypto now works fine, and I shall persue trying to
get the fixed block size working, so I can write it to a CD.

Thanks,

Paul Hilton


_________________________________________________________
Do You Yahoo!?
Get your free @yahoo.com address at http://mail.yahoo.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011010231919</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-10-10 23:19:19-0400</timestampReceived><subject>Re: Dutch Government wants to regulate strong cryptography</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Michael" == Michael H Warfield &lt;mhw@wittsend.com&gt; writes:

[...]

Michael&gt; Also in other commands run in an ssh session.  For instances,
Michael&gt; running "su" is two chars with echo in and a password prompt
Michael&gt; back out with several chars without echo in again.
                                     ^^^^^^^^^^^^^^^^^^^^^
IIRC, this is one of the problems with SSH1 that was fixed in SSH2.
SSH2 will always send back an echo packet, even if it's just a dummy
packet.

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7xNd1ZRhU33H9o38RAra0AKCC9n0wF+NlhfOO6ViuFKfindOYegCfdVMb
KKtLf/cfXV5rDtaaQ/PRroE=
=/yGI
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011011120538</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-10-11 12:05:38-0400</timestampReceived><subject>Re: encrypting the whole disk / all the data</subject><body>

Jari Ruusu wrote:
&gt; To encrypt root partition, I have attached a shell script that builds a
&gt; small "initrd" ram-disk that works with 2.2 and 2.4 kernels. To use it, do
&gt; something like this:
[snip]
&gt; 7)  Build a new /boot/initrd.gz and run lilo (or whatever)
&gt; 
&gt;         ./build-initrd.sh
&gt;         lilo

Original script that I posted here on Fri 05 Oct 2001 21:49:47 +0300,
created a initrd with sloppy access permissions: untrusted users could have
read access to devices they should not have access.

Workaround is to add "umask 077" to the script before it creates any device
nodes or to just run the script like this:

    ( umask 077 &amp;&amp; ./build-initrd.sh )

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011012143112</emailId><senderName>Robert van der Meulen</senderName><senderEmail>rvdm@wiretrip.org</senderEmail><timestampReceived>2001-10-12 14:31:12-0400</timestampReceived><subject>Re: Old mailings // Patch for latest kernels</subject><body>

Hi,

Quoting Juergen Mueller (juergen@consultant.com):
&gt; I'm wondering if there is an archive of all the postings on this list. 
&gt; I'm looking for the kerneli.org website and the patches for the late(st)
&gt; kernels (&gt;=2.4.7). kerneli.org doesn't seem to exist any more.
Wow, a self-answering question!

Look here:
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

You can find crypto patches for newer kernels at cryptoapi.sourceforge.net.
Afaik kerneli.org is still available, but the international kernel patch
itself is being phased out, and replaced by cryptoapi.

Greets,
	Robert

-- 
			      Linux Generation
   encrypted mail preferred. finger rvdm@debian.org for my GnuPG/PGP key.
		"All Bibles are man-made." -- Thomas Edison

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011027121725</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-10-27 12:17:25-0400</timestampReceived><subject>Announce loop-AES-v1.4f file/swap crypto package</subject><body>

In short: If file and swap crypto is all you need, this package is a hassle
free replacement for international crypto patch and HVR's cryptoapi.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. AES cipher can be used to encrypt local file systems and
disk partitions. For more information about compiling and using the driver,
see the README file in the package.

Features:
- GPL license.
- No source modifications to kernel. No patch hassles when you are upgrading
  your kernel.
- Works with all recent 2.4, 2.2 and 2.0 kernels, including distro vendor
  kernels. Encrypted disk images are compatible across all supported
  kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.
- Device backed (partition backed) loop is capable of encrypting swap on 2.4
  kernels.

Changes since previous release:
- Use newly added KERNELRELEASE in kernel 2.0 modules install path.
- build-initrd.sh shell script included to build /boot/initrd.gz that can be
  used when root partition is encrypted.
- Default blocksize computation of file backed loop now shrinks blocksize
  only if necessary. Previous default was hardcoded 1024.
- Add a workaround for 5 parameter do_generic_file_read()
- loop.c-2.4.original updated to Alan Cox's 2.4.13-ac2, with ifdefs so it
  compiles on older kernels as well.

Of above changes only "workaround for 5 parameter do_generic_file_read()" is
a bugfix. Loop-AES claims to work with all stable kernels, yet previous
versions failed to compile on recent RedHat enhanced 2.4 kernels. This
version fixes such compile problems. No need to upgrade if you are using 2.2
or 2.0 kernels.
  
bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4f.tar.bz2
    md5sum 746d68510e71aa83b7ab4c35130ad5d7

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.4f.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20011028125810</emailId><senderName>Greg Louis</senderName><senderEmail>glouis@dynamicro.on.ca</senderEmail><timestampReceived>2001-10-28 12:58:10-0400</timestampReceived><subject>loop-AES-v1.4f kernel diff for linux-2.4.13-ac2</subject><body>

The kernel-2.4.diff patch in Jari Ruusu's loop-AES-v1.4f applies
against the linux-2.4.13-ac2 tree with just one reject in loop.c, so it
was trivial to add that fix manually and re-diff against loop.c in
2.4.13-ac2.  The resulting kernel.diff applies cleanly (albeit with an
offset in the Configure.help file that I didn't bother about), and
seems to be working ok for me (ymmv of course).  It's a bit bulky to
mail to the list, but anyone interested is welcome to it:

http://www.bgl.nu/loop-AES-v1.4f-kernel-2.4.13-ac2.diff.gz

-- 
| G r e g  L o u i s          | gpg public key:      |
|   http://www.bgl.nu/~glouis |   finger greg@bgl.nu |

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010904093113</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-04 09:31:13-0400</timestampReceived><subject>announce; monolithic versions of the cryptoapi branch!</subject><body>


Since having kernel modules is not always a good idea, I've started to put
together a handmade kernel patch...

in ftp://ftp.kernel.org/pub/linux/kernel/people/hvr/ you'll find

 cryptoapi-2.4.10-pre4-xfs.diff.bz2/gz

which is taken against the SGI/XFS enhanced 2.4.10-pre4 kernel version;
and

 cryptoapi-2.4.8.diff.bz2/gz

which has been diff'ed against a plain 2.4.8 (it should apply with minor
problems against later kernel versions as well)

I haven't done much testing yet with those patch versions of the cryptoapi
branch, but I don't expect any major problems as the code itself is the
same as the cryptoapi module versions; (either it works from the
beginning, or maybe you'll get a kernel panic when booting or setting up
the cryptodevice...); If you got scared by this statement, then just don't
apply this patch :-)

If you experience any problems, please report them so I can fix them... :-)

ps: there's also a new util-linux-2.11i.patch in that directory, which
includes some contributed fixes/improvements, regarding the keybits
option passing for mount(8)

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906071043</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-06 07:10:43-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>


just to let you know, what the crypto patch code status is in at the
moment;

On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; There are two known definite bugs, a backward compatibility
&gt; issue and at least two general complainst on the table.
&gt;
&gt; 	* BUG: block size problem
&gt; 	  Has a current work around, Herbert has stated
&gt; 	  he will soon have it fixed in code.
fixed, if you enable the 512-byte IV option
(btw, I've seen the latest recent kernels added the blocksize set/get
ioctl's... just as a sidenote...)

&gt; 	* BUG: SMP issue
&gt; 	  None of us has had to deal with it, but Herbert
&gt; 	  has stated he will have it fixed in code soon.
fixed

&gt; 	* 2.2 not readable on 2.4
&gt; 	  Question: is this really unknown or are the systems
&gt; 	  in question ones that were set up with the old
&gt; 	  absolute block number problem? If not, perhaps
&gt; 	  it is an issue for study using a small test case.
&gt; 	  Is there anyone here who is actually a
&gt; 	  mathematician/cryptographer?
a user space tool will allow to convert to the new IV/blocksize scheme...

&gt; 	* performance loss due to non-reentrancy
&gt; 	  Presumably if Herbert fixes the SMP issue, he
&gt; 	  sorts this as well. I might note that I play
&gt; 	  my Mozart CD on this laptop while editing on a
&gt; 	  loopback AES partition and have no problems.
fixed as well; can someone confirm this?
(the scheduling issue, was actually just a one-liner; a change from atomic
to non-atomic en/de-crypting loop...)

&gt; 	* kernel bloat. This is probably a non-issue. Linus
&gt; 	  will at some point go for hooks into the kernel
&gt; 	  for encryption support. The API for that will perhaps
&gt; 	  be influenced by kerneli but that will not be the
&gt; 	  final word. I do suspect it will have great influence
&gt; 	  because everyone is using the new util-linux which
&gt; 	  supports the new api for loopback encryption types.
&gt; 	  In that sense we are already main stream.
&gt; 	  (The util-linux support is mainstream debian now)
btw, I don't see any major kernel bloat;
the actual implementation does dynamic allocation of cipher modules,
and uses strings for identification; instead of having to use some magic
number IDs... (see also the mknod problem and devfs; which can be regarded
as kernel bloat as well... actually the whole kernel is bloat... why do we
use at all a virtual machine abstraction layer instead of coding directly
without any underlying OS?!? ;-)

&gt; I'm pretty sure I remember a kernel discussion on some of
&gt; the issues and there is a desire to have one single crypto
&gt; API that is available for all purposes, loopback fs or other.

&gt; While loopAES is very nice for now, and perhaps some of the code
&gt; will find its' way into the kernel, I don't see that as the
&gt; likely way things will go for 2.6.x. I'm very sure that a
&gt; loopback module will not contain its' own crypto. It will share
&gt; it with other tools and applications. We are not going to see
&gt; 5 loadable modules providing different services each with its'
&gt; own implimentation of AES.

...and that's what the cryptoapi patch tries to accomplish...
the loopback module has been separated from the crypto transfer
function...

the CIPE project wants to make use of the cryptoapi as well;

another subsystem; virtual memory encryption, can make use of the
cryptoapi as well...

we really need to unify all those crypto related kernel space projects;
otherwise linus surely won't let them go into the kernel (at least I
expect this, judging from the past ;-)

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907065114</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-07 06:51:14-0400</timestampReceived><subject>cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

Hi all,

I'm new to the list (but I've read a couple of months of the archives if
that counts.) Formerly I used the kerneli 2.4.3.1 patch, until some
unknown disaster recently ate my root fs. I had my 2.4.3 crypto modules
backed up -- on an encrypted loop file, of course. :) So I upgraded to
2.4.9 and stumbled upon HVR's work. Thanks, Herbert!

I read what's there about the IV_MODE_SECTOR issue, and I think I
understand it but am not sure. With this enabled, a loop file will use a
block size of 512 bytes for the cryptoapi, and a copy of a loop file
will work no matter what the block size of the media it is on, and of
the media where it was created. Without it, if you create an encrypted
loop file on an ext2fs with a 1024 block size, a copy of that file can
only be mounted if it is on media with an identical block size.

Is that it? Or is it the block size of the filesystem inside the loop
file which is significant? See, I am wanting to make some encrypted CD's
which of course I would prefer to be able to mount directly from the CD.
And I want them to be accessible in the future, of course, even if I'm
using ext9fs with 40MB blocks on my 900TB turbo-optic storage device.
(I'll still want to look at the pictures of my kids from AD 2001, even
when the CD-ROM format is insignificant and outdated.)

While I'm here, and rather than write another post, I'd like to address
some comments to Jari. I think your project is excellent! It does make
sense to have a different approach in a competing project. But as
someone else commented, I would prefer to see at least one other
algorithm available.

I'm no cryptographer nor mathematician, but ISTM that having only one
algorithm potentially helps an attacker, because there's only that one
to contend with. You can look at the system and see which project is in
use, and if it's Loop-AES you know with high probability that any large
incomprehensible file could be an AES loop container. But if its Crypto
API, you have to consider all the alternatives too. And in the crypto
world you have to think about the future: algorithms might be cracked,
computing power might make brute force attacks feasible.

I hope to see both projects do very well while maintaining the highest
possible cryptographic strength. Whose is "ahead" of the other doesn't
really interest me except insofar as one's advances might also help the
other project. In a competition like this, we're all on the same side:
the only real enemy is the one who might want to read our data.

Jari, I personally would be more interested in your project with the
choice of at least one other algorithm, and if it could coexist with
the kernel's loop driver. The latter issue would better fit in with your
project's vision; a user could perhaps carry removable media with a loop
file, and be able to access it on almost any machine. How about if it
could be done all in user space, even without root access? Then you
would have an important distinction from Crypto API!

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010915195555</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-15 19:55:55-0400</timestampReceived><subject>RFC: increased interest for cryptographic software?</subject><body>


...hope this is not too off-topic...

...this maybe just coincidence and/or caused by other reasons (maybe some
well read web referee?)... but it seems that after the US-event of
09/11/2001 the accesses went up for 2 prominent cryptographic linux
packages; are we getting more paranoid?

see

loop-aes
https://sourceforge.net/project/stats/?group_id=28891

cryptoapi
https://sourceforge.net/project/stats/?group_id=30957

..any ideas?

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010919055758</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-19 05:57:58-0400</timestampReceived><subject>cryptoapi and kmod</subject><body>

What do you have to put in your modules.conf to have kmod load the
cryptoloop module?

Thanks,
    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010919201135</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-19 20:11:35-0400</timestampReceived><subject>cryptoapi and swap</subject><body>

I haven't read where anyone has done this yet, but it is quite simple to
use CryptoAPI for swap devices. Looking back at the list archives I see
that this is very similar to Jari's scheme for swap encryption with
Loop-AES. Here's how I did it:
1.  # dd if=/dev/zero of=/SWAP bs=1M count=64
2.  # dd if=/dev/urandom bs=1 count=32 2&gt; /dev/null | \
    uuencode -m - | cut -c8-29 | tail -2 | head -1 | \
    losetup -e aes -k256 -p0 /dev/loop7 /SWAP
3.  # mkswap /dev/loop7
4.  # swapon -p1 /dev/loop7

And there you have 64MB of encrypted swap. You could run it from a
startup script. You can even use a device, such as a disk partition, in
place of the /SWAP file; just omit the first command. (You also wouldn't
need the first command for an existing swap file.) Oh, and I suppose I
forgot to put "modprobe cryptoloop" as the real first command.

Jari mentioned a potential problem of /dev/urandom lacking in entropy at
boot time. I thought of a partial solution to that: make a script to
swapoff and do it over again, and run it daily, from root's crontab
(preferably at a non-busy time, of course.) Then you would only be
vulnerable for the first day after booting.

Notes and questions: Line 2 is ugly, running four separate processes to
generate the password! Does anyone have any suggestions to improve it?
Also note that I used 256-bit AES. For my use speed would be more
important than top security, so should I perhaps use Blowfish? What key
length would be best? Does the number of characters in the password (see
that I have used 22) matter?

You get a complaint from swapon -v if your /dev/loop* permissions aren't
right. Mine (Slackware 8.0) was root:root 0644, and swapon said it ought
to be 0660.

I don't suppose you would get away with having these swap devices listed
in your fstab. That would all depend upon what point in your startup
sequence that the "swapon -a" command runs. It should work if you put
the other commands first.

Jari mentioned having some reliability problems with his. I haven't had
a chance to test mine out yet. Under a light load it's doing fine with
loop7 (the /SWAP file) and loop6 (a disk partition) as encrypted swap
devices, while I also have another disk partition of unencrypted swap.

Comments and suggestions will be appreciated. As always, thanks to HVR
and Jari and others who are developing cryptographic software.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010919212614</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-19 21:26:14-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

Rob McGee wrote:
&gt; I haven't read where anyone has done this yet, but it is quite simple to
&gt; use CryptoAPI for swap devices. Looking back at the list archives I see
&gt; that this is very similar to Jari's scheme for swap encryption with
&gt; Loop-AES. Here's how I did it:

I do not recommend using cryptoapi for encrypted swap. It has nasties like
sleeping in make_request_fn() and potential memory allocation deadlock, both
of which should not affect non-swap use.
 
&gt; Jari mentioned a potential problem of /dev/urandom lacking in entropy at
&gt; boot time. I thought of a partial solution to that: make a script to
&gt; swapoff and do it over again, and run it daily, from root's crontab
&gt; (preferably at a non-busy time, of course.) Then you would only be
&gt; vulnerable for the first day after booting.

Here is my latest version, have fun:
---------------- cut here ----------------
#!/bin/sh
# Run this script somewhere in your startup scripts _after_ random
# number generator has been initialized and /usr has been mounted.
# (md5sum, uuencode, tail and head programs usually reside in /usr/bin/)

# encrypted swap partition
SWAPDEVICE=/dev/hda666

# loop device name
LOOPDEV=/dev/loop6

MD=`dd if=${SWAPDEVICE} bs=4096 count=10 2&gt;/dev/null | md5sum`
for X in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ; do
    dd if=/dev/zero of=${SWAPDEVICE} bs=4096 count=10 conv=notrunc 2&gt;/dev/null
    sync
done
UR=`dd if=/dev/urandom bs=18 count=1 2&gt;/dev/null \
    | uuencode -m - | tail -2 | head -1`
DT=`date '+%s'`
echo ${MD}${UR}${DT} | losetup -p 0 -e AES128 ${LOOPDEV} ${SWAPDEVICE}
MD=
UR=
DT=
dd if=/dev/zero of=${LOOPDEV} bs=4096 count=10 conv=notrunc 2&gt;/dev/null
sync
mkswap ${LOOPDEV}
sync
swapon ${LOOPDEV}
---------------- cut here ----------------

&gt; Jari mentioned having some reliability problems with his. I haven't had
&gt; a chance to test mine out yet. Under a light load it's doing fine with
&gt; loop7 (the /SWAP file) and loop6 (a disk partition) as encrypted swap
&gt; devices, while I also have another disk partition of unencrypted swap.

Reliability problems were (and are) kernel 2.4 instability problems under
insane workloads. All 2.4 kernels that I have tested under insane workloads,
fail without any crypto or loop loaded or installed. That happens with
Andrea's new VM too. No reliability problems with loop-AES itself.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920102955</emailId><senderName>Greg Louis</senderName><senderEmail>glouis@dynamicro.on.ca</senderEmail><timestampReceived>2001-09-20 10:29:55-0400</timestampReceived><subject>Re: [PPDD] loop-AES-v1.4d file/swap crypto package</subject><body>

It would seem to make sense to ask the author of loop-AES directly for
his comments.  Jari?

(FWIW I too switched from PPDD to loop-AES because of needing 2.4
support now-and-in-a-hurry.  It has worked for me on kernels from
somewhere around 2.4.4 through 2.4.9-ac10; I don't use it for root or
swap so I can't comment on that.)

On 20010920 (Thu) at 1114:48 +0200, Allan Latham wrote:
&gt; A quick look at this seems to show the following (pls confirm this anyone):
&gt; 
&gt; 1. The whole of the data is encrypted with a single key
&gt; 2. There is no mean to change the key
&gt; 3. CBC is used on 512 byte blocks
&gt; 4. The key is derived directly from a password with a seed
&gt; 
&gt; If this is true then a very large amount of material is being encrypted with
&gt; the same key. It is not only the size of the partition but also every backup
&gt; copy of this that an attacker gets his hands on over the entire life of the
&gt; data.
&gt; 
&gt; Much of that data is known - the filesystem structure is known and a lot of
&gt; the internal pointers are null. This represents a very large anount of known
&gt; plaintext. I'm not saying the encryption method can be cracked, only that it
&gt; is wise to minimse the material an attacker gets.
&gt; 
&gt; The use of CBC (the IV is derived from the block number) means that if an
&gt; attacker gets hold of a "before" and "after" copy of the partition he can to
&gt; some extent see what has changed. If the same block in both copies differs
&gt; after a certain byte he can be sure that the first change in the block was
&gt; within the cyphertext block at that point. Again this is valuable
&gt; information for an attacker.
&gt; 
&gt; PPDD uses several random generated keys to encrypt the data on the disc. It
&gt; uses the key derived from the passphrase to encrypt these keys.
&gt; 
&gt; PPDD "scrambles" the whole of a 512 byte block before encryption in such a
&gt; way that the iv for this action is kept secret in the same way as the
&gt; encryption keys and that the scrambling action diffuses a change in any one
&gt; byte throughout the block. If an attacker gets a "before" and "after" copy
&gt; he can see that a 512 byte block has changed but has no idea where in the
&gt; block the change took place.
&gt; 
&gt; These aspects may or may not be of concern to you depending on your needs.
&gt; It may also be possible to put these type of changes into loop-aes or to
&gt; hack the ppdd encryption mechanism into loop-aes to replace that currently
&gt; used.
&gt; 
&gt; I would be pleased if someone could just read the code and confirm point 4
&gt; above. If true this is a serious problem. It allows a dictionary attack in
&gt; reasonable time - and a twenty character pass phrase especially one using
&gt; plain language words is no protection against this.
&gt; 
&gt; Best regards to you all
&gt; 
&gt; Allan
&gt; 
&gt; 
&gt; ----- Original Message -----
&gt; From: "Matilainen Panu (NBI/Helsinki)" &lt;panu.matilainen@nokia.com&gt;
&gt; To: &lt;ppdd@linux01.gwdg.de&gt;
&gt; Sent: Thursday, September 20, 2001 10:15 AM
&gt; Subject: Re: [PPDD] loop-AES-v1.4d file/swap crypto package
&gt; 
&gt; 
&gt; &gt; ..one more unfortunate thing about it is that it doesn't support changing
&gt; &gt; passwords :(
&gt; &gt;
&gt; &gt; - Panu -
&gt; &gt;
&gt; &gt; On Thu, 20 Sep 2001, ext Michael H. Warfield wrote:
&gt; &gt;
&gt; &gt; &gt; On Wed, Sep 19, 2001 at 03:06:01PM -0300, Adriano Freitas wrote:
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; Hi all,
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; I was looking for other works in crypto file system and I found
&gt; &gt; &gt; this
&gt; &gt; &gt; &gt; one, but I havent had time to test it yet, but it seens to work fine
&gt; &gt; &gt; as
&gt; &gt; &gt; &gt; ppdd.
&gt; &gt; &gt;
&gt; &gt; &gt; [...]
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; For more info, go to
&gt; &gt; &gt; &gt; http://mail.nl.linux.org/linux-crypto/2001-09/msg00006.html
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; Could someone test it and put some feedback here?
&gt; &gt; &gt;
&gt; &gt; &gt; I'm not using it specifically for encrypted swap but I am using
&gt; &gt; &gt; it for encrypted file systems and it works really well.  I switched to
&gt; &gt; &gt; it from using ppdd because of the 2.4 support issue (I now require
&gt; &gt; &gt; several 2.4 features) and the fact that it supports any file system
&gt; &gt; &gt; and not just ext2/ext3.
&gt; &gt; &gt;
&gt; &gt; &gt; One thing that it lacks is a conversion utility (encrypt in
&gt; &gt; &gt; place)
&gt; &gt; &gt; like ppdd has.  You have to create your encrypted file system and then
&gt; &gt; &gt; copy your files to it.  For things like encrypting and ISO fs, that
&gt; &gt; &gt; means
&gt; &gt; &gt; creating the unencrypted image and then "dd'ing" that to the encryption
&gt; &gt; &gt; loopback device.  That amounts to three copies of all the data (the
&gt; &gt; &gt; original, the ISO image, and then then encrypted ISO image).  But ppdd
&gt; &gt; &gt; doesn't support encrypted ISO file systems at all, so that's no loss
&gt; &gt; &gt; there, either.
&gt; &gt; &gt;
&gt; &gt; &gt; Another disadvantage is that it replaces the loop-back device
&gt; &gt; &gt; rather than works in parallel.  That may not matter much, but it might
&gt; &gt; &gt; if you want them in parallel but separate.  Not an issue with me.
&gt; &gt; &gt;
&gt; &gt; &gt; Given sufficiently strong pass phrases, it shouldn't be any less
&gt; &gt; &gt; secure.  It does lack the master phrase / working phrase feature, but
&gt; &gt; &gt; I wasn't using that anyways.  :-/
&gt; &gt; &gt;
&gt; &gt; &gt; Other than the ppddinit with encrypting in place, does anyone
&gt; &gt; &gt; know of any other advantages that would weigh in favor of ppdd?
&gt; &gt; &gt;
&gt; &gt; &gt; BTW...  I also have not used loop-AES to encrypt the root
&gt; &gt; &gt; device,
&gt; &gt; &gt; yet.  But I see no reason why it shouldn't work and it seems easier to
&gt; &gt; &gt; set up than ppdd.
&gt; &gt; &gt;
&gt; &gt; &gt; Another advantage is that it's very much in line with the
&gt; &gt; &gt; crypto-api
&gt; &gt; &gt; stuff that's shaping up and may eventually (hopefully) get merged in as
&gt; &gt; &gt; that straightens up.  Linus has expressed an interest (when I spoke with
&gt; &gt; &gt; him at LinuxWorld in New York a while back) of eventually getting crypto
&gt; &gt; &gt; in the kernel itself and the crypto-api is a strong contender so that
&gt; &gt; &gt; multiple projects (loop-back fs, IPSec, etc) can access the crypto
&gt; &gt; &gt; routines.
&gt; &gt; &gt;
&gt; &gt; &gt; &gt; []'s
&gt; &gt; &gt;
&gt; &gt; &gt; Mike
&gt; &gt; &gt;
&gt; &gt;
&gt; &gt; --
&gt; &gt;
&gt; &gt;

-- 
| G r e g  L o u i s          | gpg public key:      |
|   http://www.bgl.nu/~glouis |   finger greg@bgl.nu |

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920202955</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-20 20:29:55-0400</timestampReceived><subject>RE: [Evms-devel] Root on LV</subject><body>

Mr. Corry, et al.:

	I am a member of a mailing list "linux-crypto" which currently has people
working on both a kernel modification, as well as a man Mr. Jari Ruusu whom
has written his own loop-back based encrypting system.

	I am thinking that Mr. Ruusu's solution might well be able to be molded
into a plug-in for EVMS. Perhaps if there is interest in the crypto
community, they will see the great possibility of running EVMS and having a
plug-in for it. Then encryption would be available for any filesystem being
used when EVMS (a logical volume manager) is running.

	I look forward contributing to the development of EVMS.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Thursday, September 20, 2001 1:23 PM

-----Original Message-----
From: Kevin Corry [mailto:corryk@us.ibm.com]
Sent: Thursday, September 20, 2001 12:49 PM
To: stuart@bh90210.net
Cc: evms-devel@lists.sourceforge.net
Subject: Re: [Evms-devel] Root on LV

On Thursday 20 September 2001 14:10, you wrote:
&gt; Mr. Pratt, et al.:
&gt;
&gt;       Actually, I just found out (via an email from Hans Reiser) that
ReiserFS
&gt; will be inclusive of encryption by 30 SEP 01 (as someone funded the
&gt; development predicated on its readiness by that date), and compression is
&gt; on its way for ReiserFS. While this is a temporary / partial solution, a
&gt; compression / encryption solution on the EVMS level would apply to other
&gt; EVMS controlled filesystems which are absent an implementation of either
&gt; compression or encryption. I plan to use ReiserFS in the mean time for the
&gt; most part anyway.

Yes, I'd say we definitely agree with you. Being able to encrypt at the
block
device level has significant advantages over doing so at the filesystem
level
(the foremost being that encryption only has to be implemented in one place,
not multiple places). The problem is that none of the EVMS group members
have
any experience with encryption. Thus, we would really need to have someone
with this kind of experience write this plugin. There are obviously current
methods for encrypting block devices using loopback, and I hope we are able
to enlist the help of some of the people who have worked on that project.

-Kevin


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925222746</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-25 22:27:46-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocationfailed</subject><body>

Hank Leininger wrote:
&gt; This seems to help, but I still get oops's.  The "losetup; mke2fs" test
&gt; of a 23GB partition now gets further than it did before--instead of
&gt; dying while inode tables are written, it dies while writing superblocks
&gt; / FS accounting information.  Interestingly this time it did *not* log a
&gt; '0-order allocation' error first.  The oops was very similar, but not
&gt; identical; here it is:

Can you try this patch then, against original v1.4d

    cd loop-AES-v1.4d
    patch -p0 &lt; filename
    make

Also, add this line to your /etc/modules.conf

    options loop lo_prealloc=150

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


--- loop.c-2.4.diff.old	Sun Sep  2 21:33:01 2001
+++ loop.c-2.4.diff	Wed Sep 26 01:16:00 2001
@@ -261,12 +261,12 @@
 +        memset(bh, 0, sizeof(struct buffer_head));
 +        bh-&gt;b_page = p;
 +    } else {
-+        bh = kmem_cache_alloc(bh_cachep, SLAB_ATOMIC);
++        bh = 0; /* kmem_cache_alloc(bh_cachep, SLAB_ATOMIC); */
 +        if(!bh) {
 +            return((struct buffer_head *)0);
 +        }
 +        memset(bh, 0, sizeof(struct buffer_head));
-+        bh-&gt;b_page = alloc_page(GFP_ATOMIC);
++        bh-&gt;b_page = 0; /* alloc_page(GFP_ATOMIC); */
 +        if(!bh-&gt;b_page) {
 +            kmem_cache_free(bh_cachep, bh);
 +            return((struct buffer_head *)0);


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925161215</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-09-25 16:12:15-0400</timestampReceived><subject>loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocation failed (gfp=0x20/0) from c882256e</subject><body>

yesterday i configured my box to use swap over loop-AES....
if i cat /dev/zero &gt; blah now on another loop-AES encrypted device (not on
the swap device of course) "__alloc_pages: 0-order allocation failed
(gfp=0x20/0) from c882256e" starts and keeps appearing when the kernel wants
to start swapping until it panics within the process of the loop device i
was cat'ing to....i guess this error is caused by loop-AES behavior (happens
with 2.4.9 and 2.4.10, i didnt try any other ones) and you know what should
cause it so i didnt write down the stuff which shows up when the kernel
crashes...[in other words i was too lazy]...if you need it or further
information, just ask me......




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926161408</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-26 16:14:08-0400</timestampReceived><subject>[Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>


***   M I R R O R S   W A N T E D   ***


[Announce] New cryptoapi RPM packages for Mandrake 8.1

Hello,

I have compiled ready-for-use RPM packages for Linux cryptoapi,
for Linux-Mandrake 8.1

These packages bring cryptoapi support to Linux, for on-the-fly
encrypted filesystems, a feature comparable to what tools like
Scramdisk or PGPDisk do on other proprietary OSes.

These packages come in 2 flavours:

- 1 "light" installation consisting of 3 small RPMS for losetup, mount, and
cryptoapi-standalone, which can be installed without touching the kernel on
a Vanilla Mandrake 8.1

- 1 "complete" installation consisting of RPMs for losetup, mount, and
cryptoapi-ivmode, plus a complete series of kernel 2.4.8-26 packages, patched
and rebuilt to allow iv-mode-sector support for loopback encrypted 
filesystems.

The first set of packages is light to download and install, but encrypted
volume created with it may not be portable from one device to another.

The 2nd set of packages is more complete, and allows encrypted volumes to be
portable, but it is much bigger to download and a little more complex to
install.

These packages are experimental and non-official, they are not
supported by Mandrakesoft.

This packages were made on a Mandrake 8.1rc1 system and are fully
compatable with it. They should be as well compatable with the official
Mandrake 8.1 upcoming release.
They may also be compatable with recent RedHats, but this is yet untested.


The documentation file describing these packages in detail is available at:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/
cryptoapi-2.4.7.0-2.4.8_26.README.txt


******************************************************************************
The cryptoapi RPMs and related packages are available from:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/
******************************************************************************

If you wish to mirror these packages on other FTP sites, please feel free
to do so.

There is no "home" web page related to this RPM build.

Please refer to the Sourceforge Cryptoapi page at:
http://sourceforge.net/projects/cryptoapi/

******************************************************************************

Your feedback and comments are welcome.

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010927223209</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-27 22:32:09-0400</timestampReceived><subject>AES or Twofish the best crypto?</subject><body>

Hi (I'm new to the list and I apologize for stupid questions),

I've read throuh the documentation that I did find in 
cryptoapi-2.4.7.0.tar.gz, especially the file 
cryptoapi-2.4.7.0/doc/Configure.help.inc .

For me it seems like either the AES or Twofish crypto with the maximum 
keylength of 256 bits is probably the _most_ secure choise. For me the 
security strength is _much_ more important than the speed of read/write to 
the fs.

Any coments?

-jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926172448</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-26 17:24:48-0400</timestampReceived><subject>RPM for LOOP-AES? / RPMs for new MDK stuff</subject><body>

Mr. Bouissou:

Do you plan to place the RPMs on the sourceforge site?

	Any possibility of seeing an RPM for LOOP-AES (source/binary)?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, September 26, 2001 10:22 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Michel Bouissou
Sent: Wednesday, September 26, 2001 9:14 AM
To: linux-crypto@nl.linux.org
Subject: [Announce] New cryptoapi RPM packages for Mandrake 8.1


***   M I R R O R S   W A N T E D   ***


[Announce] New cryptoapi RPM packages for Mandrake 8.1

Hello,

I have compiled ready-for-use RPM packages for Linux cryptoapi,
for Linux-Mandrake 8.1

These packages bring cryptoapi support to Linux, for on-the-fly
encrypted filesystems, a feature comparable to what tools like
Scramdisk or PGPDisk do on other proprietary OSes.

These packages come in 2 flavours:

- 1 "light" installation consisting of 3 small RPMS for losetup, mount, and
cryptoapi-standalone, which can be installed without touching the kernel on
a Vanilla Mandrake 8.1

- 1 "complete" installation consisting of RPMs for losetup, mount, and
cryptoapi-ivmode, plus a complete series of kernel 2.4.8-26 packages,
patched
and rebuilt to allow iv-mode-sector support for loopback encrypted
filesystems.

The first set of packages is light to download and install, but encrypted
volume created with it may not be portable from one device to another.

The 2nd set of packages is more complete, and allows encrypted volumes to be
portable, but it is much bigger to download and a little more complex to
install.

These packages are experimental and non-official, they are not
supported by Mandrakesoft.

This packages were made on a Mandrake 8.1rc1 system and are fully
compatable with it. They should be as well compatable with the official
Mandrake 8.1 upcoming release.
They may also be compatable with recent RedHats, but this is yet untested.


The documentation file describing these packages in detail is available at:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/
cryptoapi-2.4.7.0-2.4.8_26.README.txt


****************************************************************************
**
The cryptoapi RPMs and related packages are available from:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/
****************************************************************************
**

If you wish to mirror these packages on other FTP sites, please feel free
to do so.

There is no "home" web page related to this RPM build.

Please refer to the Sourceforge Cryptoapi page at:
http://sourceforge.net/projects/cryptoapi/

****************************************************************************
**

Your feedback and comments are welcome.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925023155</emailId><senderName></senderName><senderEmail>beldridg@best.com</senderEmail><timestampReceived>2001-09-25 02:31:55-0400</timestampReceived><subject>new version of loop.c patch</subject><body>

hi,

it looks like the loop.c patch hasn't been integrated into 2.4.10.

the current patch applies with rejects so i can go and resolve those if
necessary.

herbert - are you going to put out a new patch for loop.c?



thanks,

- brett



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925115727</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-09-25 11:57:27-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

On 24 September 2001, beldridg@best.com &lt;beldridg@best.com&gt; wrote:
&gt; it looks like the loop.c patch hasn't been integrated into 2.4.10.

You may of course correct this little problem yourself (just remove the
--dry-run option from the patch line and then apply the rejected file
by hand.

For the lazy people here you have the new diff file

-- 
								Regards,
								Emil
--
"Can you imagine the silence if everyone said only what he knows?" - K.Capek

["loop.c-2.4.diff" (text/plain)]

--- loop.c-2.4.original	Mon Sep 24 09:40:19 2001
+++ patched-loop.c	Mon Sep 24 09:43:03 2001
@@ -185,7 +185,7 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+		int IV = index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
 		size = PAGE_CACHE_SIZE - offset;
 		if (size &gt; len)
 			size = len;
@@ -236,7 +236,7 @@
 	unsigned long count = desc-&gt;count;
 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
 	struct loop_device *lo = p-&gt;lo;
-	int IV = page-&gt;index * (PAGE_CACHE_SIZE/p-&gt;bsize) + offset/p-&gt;bsize;
+	int IV = page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
 
 	if (size &gt; count)
 		size = count;
@@ -494,7 +494,7 @@
 	 * piggy old buffer on original, and submit for I/O
 	 */
 	bh = loop_get_buffer(lo, rbh);
-	IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+	IV = bh-&gt;b_rsector;
 	if (rw == WRITE) {
 		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
 		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
@@ -531,7 +531,7 @@
 		bh-&gt;b_end_io(bh, !ret);
 	} else {
 		struct buffer_head *rbh = bh-&gt;b_private;
-		unsigned long IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+		unsigned int IV = bh-&gt;b_rsector;
 
 		ret = lo_do_transfer(lo, READ, bh-&gt;b_data, rbh-&gt;b_data,
 				     bh-&gt;b_size, IV);
@@ -1034,6 +1034,7 @@
 	for (i = 0; i &lt; max_loop; i++)
 		register_disk(NULL, MKDEV(MAJOR_NR, i), 1, &amp;lo_fops, 0);
 
+	{ extern int init_module_aes(void); init_module_aes(); }
 	printk(KERN_INFO "loop: loaded (max %d devices)\n", max_loop);
 	return 0;
 
@@ -1047,6 +1048,7 @@
 
 void loop_exit(void) 
 {
+	{ extern void cleanup_module_aes(void); cleanup_module_aes(); }
 	devfs_unregister(devfs_handle);
 	if (devfs_unregister_blkdev(MAJOR_NR, "loop"))
 		printk(KERN_WARNING "loop: cannot unregister blkdev\n");

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010927182408</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-27 18:24:08-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

On Tue, Sep 25, 2001 at 02:57:27PM +0300, Emil wrote:
&gt; On 24 September 2001, beldridg@best.com &lt;beldridg@best.com&gt; wrote:
&gt; &gt; it looks like the loop.c patch hasn't been integrated into 2.4.10.
&gt; 
&gt; You may of course correct this little problem yourself (just remove the
&gt; --dry-run option from the patch line and then apply the rejected file
&gt; by hand.
&gt; 
&gt; For the lazy people here you have the new diff file

Lazy may be true. But in my case I'm also (over-)cautious and quite
clueless when it comes to reading code. This hunk:

&gt; --- loop.c-2.4.original	Mon Sep 24 09:40:19 2001
&gt; +++ patched-loop.c	Mon Sep 24 09:43:03 2001
&gt; [snip]
&gt; @@ -1034,6 +1034,7 @@
&gt;  	for (i = 0; i &lt; max_loop; i++)
&gt;  		register_disk(NULL, MKDEV(MAJOR_NR, i), 1, &amp;lo_fops, 0);
&gt;  
&gt; +	{ extern int init_module_aes(void); init_module_aes(); }
&gt;  	printk(KERN_INFO "loop: loaded (max %d devices)\n", max_loop);
&gt;  	return 0;
&gt;  
&gt; @@ -1047,6 +1048,7 @@
&gt;  
&gt;  void loop_exit(void) 
&gt;  {
&gt; +	{ extern void cleanup_module_aes(void); cleanup_module_aes(); }
&gt;  	devfs_unregister(devfs_handle);
&gt;  	if (devfs_unregister_blkdev(MAJOR_NR, "loop"))
&gt;  		printk(KERN_WARNING "loop: cannot unregister blkdev\n");

... does not seem to be in HVR's loop.c patch. And the "_module_aes"
makes me think that this diff is actually for Loop-AES.

Here's the loop.c.rej I got:

***************
*** 474,482 ****
  	/*
  	 * piggy old buffer on original, and submit for I/O
  	 */
  	bh = loop_get_buffer(lo, rbh);
  	bh-&gt;b_private = rbh;
- 	IV = loop_get_iv(lo, bh-&gt;b_rsector);
  	if (rw == WRITE) {
  		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
  		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
--- 492,502 ----
  	/*
  	 * piggy old buffer on original, and submit for I/O
  	 */
+ 	IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+ 
  	bh = loop_get_buffer(lo, rbh);
  	bh-&gt;b_private = rbh;
+ 
  	if (rw == WRITE) {
  		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
  		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
(EOF)

Looking in loop.c I see this:

*** 511,521 ***
	/*
	 * piggy old buffer on original, and submit for I/O
	 */
	bh = loop_get_buffer(lo, rbh);
	IV = loop_get_iv(lo, rbh-&gt;b_rsector);
	if (rw == WRITE) {
		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
				   bh-&gt;b_size, IV))
			goto err;
	}

It has the same "IV = ..." line as the "+" line in the .rej shows, but
in a slightly different order. And the "bh-&gt;b_private = rbh;" line isn't
there. However, I do find it up on line 452.

I'm sure this is trivially simple to many of you, but I really do not
know what to do with this loop.c.rej. My guess would be that it's not
needed at all.

Later I will try compiling it to see if it works, but that will take
awhile -- all I have is a P166. I will probably get a reply from the
list before this thing can finish the job. :)

Thank you,
    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928115650</emailId><senderName>Florian Schmitt</senderName><senderEmail>florian@galois.de</senderEmail><timestampReceived>2001-09-28 11:56:50-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

&gt; Later I will try compiling it to see if it works, but that will take
&gt; awhile -- all I have is a P166. I will probably get a reply from the
&gt; list before this thing can finish the job. :)

I made a patch which *seems* to work. But I'm absolutely clueless if I did the Right Thing (tm)...
So use it on your own risk. Please don't blame me if it eats your disk.

Flo
["loop.c-2.4.10.patch" (text/x-diff)]

--- loop.c	Thu Sep 27 16:39:10 2001
+++ loop.c	Fri Sep 28 11:37:11 2001
@@ -36,6 +36,9 @@
  * Al Viro too.
  * Jens Axboe &lt;axboe@suse.de&gt;, Nov 2000
  *
+ * Fixed and made IV calculation customizable by lo_iv_mode
+ * Herbert Valerio Riedel &lt;hvr@gnu.org&gt;, Apr 2001
+ *
  * Still To Fix:
  * - Advisory locking is ignored here. 
  * - Should use an own CAP_* category instead of CAP_SYS_ADMIN 
@@ -168,6 +171,43 @@
 					lo-&gt;lo_device);
 }
 
+static inline int loop_get_bs(struct loop_device *lo)
+{
+	int bs = 0;
+
+	if (blksize_size[MAJOR(lo-&gt;lo_device)])
+		bs = blksize_size[MAJOR(lo-&gt;lo_device)][MINOR(lo-&gt;lo_device)];
+	if (!bs)
+		bs = BLOCK_SIZE;	
+
+	return bs;
+}
+
+static inline unsigned long loop_get_iv(struct loop_device *lo,
+					unsigned long sector)
+{
+	unsigned long offset, IV;
+	int bs;
+
+	switch (lo-&gt;lo_iv_mode) {
+		case LO_IV_MODE_SECTOR:
+			IV = sector + (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS);
+			break;
+
+		default:
+			printk (KERN_WARNING "loop: unexpected lo_iv_mode\n");
+		case LO_IV_MODE_DEFAULT:
+			bs = loop_get_bs(lo);
+			IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
+			offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
+			if (offset &gt;= bs)
+				IV++;
+			break;
+	}
+
+	return IV;
+}
+
 static int lo_send(struct loop_device *lo, struct buffer_head *bh, int bsize,
 		   loff_t pos)
 {
@@ -185,7 +225,8 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+		unsigned long IV = loop_get_iv(lo, (pos - lo-&gt;lo_offset) &gt;&gt; LO_IV_SECTOR_BITS);
+
 		size = PAGE_CACHE_SIZE - offset;
 		if (size &gt; len)
 			size = len;
@@ -236,7 +277,10 @@
 	unsigned long count = desc-&gt;count;
 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
 	struct loop_device *lo = p-&gt;lo;
-	int IV = page-&gt;index * (PAGE_CACHE_SIZE/p-&gt;bsize) + offset/p-&gt;bsize;
+	unsigned long IV = loop_get_iv(lo,
+		((page-&gt;index &lt;&lt;  (PAGE_CACHE_SHIFT - LO_IV_SECTOR_BITS))
+		+ (offset &gt;&gt; LO_IV_SECTOR_BITS)
+		- (lo-&gt;lo_offset &gt;&gt; LO_IV_SECTOR_BITS)));
 
 	if (size &gt; count)
 		size = count;
@@ -276,32 +320,6 @@
 	return desc.error;
 }
 
-static inline int loop_get_bs(struct loop_device *lo)
-{
-	int bs = 0;
-
-	if (blksize_size[MAJOR(lo-&gt;lo_device)])
-		bs = blksize_size[MAJOR(lo-&gt;lo_device)][MINOR(lo-&gt;lo_device)];
-	if (!bs)
-		bs = BLOCK_SIZE;	
-
-	return bs;
-}
-
-static inline unsigned long loop_get_iv(struct loop_device *lo,
-					unsigned long sector)
-{
-	int bs = loop_get_bs(lo);
-	unsigned long offset, IV;
-
-	IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
-	offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
-	if (offset &gt;= bs)
-		IV++;
-
-	return IV;
-}
-
 static int do_bh_filebacked(struct loop_device *lo, struct buffer_head *bh, int rw)
 {
 	loff_t pos;
@@ -493,8 +511,11 @@
 	/*
 	 * piggy old buffer on original, and submit for I/O
 	 */
-	bh = loop_get_buffer(lo, rbh);
 	IV = loop_get_iv(lo, rbh-&gt;b_rsector);
+	
+	bh = loop_get_buffer(lo, rbh);
+        bh-&gt;b_private = rbh;	
+        
 	if (rw == WRITE) {
 		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
 		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
@@ -663,6 +684,7 @@
 	lo-&gt;lo_backing_file = file;
 	lo-&gt;transfer = NULL;
 	lo-&gt;ioctl = NULL;
+	lo-&gt;lo_iv_mode = LO_IV_MODE_DEFAULT;
 	figure_loop_size(lo);
 	lo-&gt;old_gfp_mask = inode-&gt;i_mapping-&gt;gfp_mask;
 	inode-&gt;i_mapping-&gt;gfp_mask = GFP_NOIO;
@@ -672,7 +694,7 @@
 		bs = blksize_size[MAJOR(lo_device)][MINOR(lo_device)];
 	if (!bs)
 		bs = BLOCK_SIZE;
-
+	  
 	set_blocksize(dev, bs);
 
 	lo-&gt;lo_bh = lo-&gt;lo_bhtail = NULL;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929091307</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-29 09:13:07-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

On Fri, 2001-09-28 at 13:56, Florian Schmitt wrote:
&gt; &gt; Later I will try compiling it to see if it works, but that will take
&gt; &gt; awhile -- all I have is a P166. I will probably get a reply from the
&gt; &gt; list before this thing can finish the job. :)
&gt; 
&gt; I made a patch which *seems* to work. But I'm absolutely clueless if I did the Right Thing (tm)...
&gt; So use it on your own risk. Please don't blame me if it eats your disk.

I've put up an actualized loop-iv-2.4.10.patch

http://www.kernel.org/pub/linux/kernel/people/hvr/

fyi, just ignoring the rejects would have been the right thing,
since what the failed hunk was supposed to fix, has been already fixed
in 2.4.10... :-)

another nice thing is, that the other 2.4.10 changes to loop.c allow us
to get rid of one buffer-allocate+copy-overhead, by the use of
LO_FLAGS_BH_REMAP, so we can use in-place encryption...

now I've got only to audit the ciphers to check, whether they are safe
regarding in-place operation...

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929114614</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-29 11:46:14-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

[Attachment #2 (multipart/alternative)]


On Sat, 2001-09-29 at 11:13, Herbert Valerio Riedel wrote:

&gt; another nice thing is, that the other 2.4.10 changes to loop.c allow us
&gt; to get rid of one buffer-allocate+copy-overhead, by the use of
&gt; LO_FLAGS_BH_REMAP, so we can use in-place encryption...
&gt; 
&gt; now I've got only to audit the ciphers to check, whether they are safe
&gt; regarding in-place operation...

ps: this should allow swap encryption over loop devices, without the
need for pre-allocated buffers as worked around in loop-AES...

jari, can you confirm this? :-)

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #5 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 TRANSITIONAL//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=UTF-8"&gt;
  &lt;META NAME="GENERATOR" CONTENT="GtkHTML/0.13.99"&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;On Sat, 2001-09-29 at 11:13, Herbert Valerio Riedel wrote:&lt;pre&gt;&lt;FONT \
COLOR="#737373"&gt;&gt; another nice thing is, that the other 2.4.10 changes to loop.c \
allow us&lt;/FONT&gt; &lt;FONT COLOR="#737373"&gt;&gt; to get rid of one \
buffer-allocate+copy-overhead, by the use of&lt;/FONT&gt; &lt;FONT COLOR="#737373"&gt;&gt; \
LO_FLAGS_BH_REMAP, so we can use in-place encryption...&lt;/FONT&gt; &lt;FONT \
COLOR="#737373"&gt;&gt; &lt;/FONT&gt; &lt;FONT COLOR="#737373"&gt;&gt; now I've got only to audit \
the ciphers to check, whether they are safe&lt;/FONT&gt; &lt;FONT COLOR="#737373"&gt;&gt; \
regarding in-place operation...&lt;/FONT&gt;&lt;/pre&gt;ps: this should allow swap encryption \
over loop devices, without the need for pre-allocated buffers as worked around in \
loop-AES...&lt;br&gt; &lt;br&gt;
jari, can you confirm this? :-)&lt;br&gt;
&lt;TABLE CELLSPACING="0" CELLPADDING="0" WIDTH="100%"&gt;
&lt;TR&gt;
&lt;TD&gt;
&lt;pre&gt;-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142&lt;/pre&gt;&lt;/TD&gt;
&lt;/TR&gt;
&lt;/TABLE&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;


[Attachment #6 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929145401</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-29 14:54:01-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

&gt; Herbert Valerio Riedel wrote:
&gt; On Sat, 2001-09-29 at 11:13, Herbert Valerio Riedel wrote:
&gt; 
&gt; &gt; another nice thing is, that the other 2.4.10 changes to loop.c allow us
&gt; &gt; to get rid of one buffer-allocate+copy-overhead, by the use of
&gt; &gt; LO_FLAGS_BH_REMAP, so we can use in-place encryption...
&gt; &gt;
&gt; &gt; now I've got only to audit the ciphers to check, whether they are safe
&gt; &gt; regarding in-place operation...
&gt; 
&gt; ps: this should allow swap encryption over loop devices, without the need
&gt; for pre-allocated buffers as worked around in loop-AES...
&gt;
&gt; jari, can you confirm this? :-)

In-place encryption won't work for swap-out path, sorry. VM often swaps out
something AND still wants to use original unmodified data.

I learned that the hard way!  :-)

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010927133620</emailId><senderName>zentara</senderName><senderEmail>zentara@gypsyfarm.com</senderEmail><timestampReceived>2001-09-27 13:36:20-0400</timestampReceived><subject>newbie question on sha1 and md5</subject><body>

Hi,

I have applied the 2.4.8 kernel patch, as advertised on this list, to
use the crypto-api
on my linux machine. I couldn't get the standard distribution to work,
so I
had to rely on the patch; but it works great.

My only question is:
How do you use the Digest-MD-5 and the Digest-SHA1 functions?
I built them into the kernel, and they report registration on boot,
but how do I actually use them? I know how to use the md5sum and
sha1sum utilities that come with Suse, but what trick is there to using
the cryptoapi versions built into a kernel?

Thanks.
---------------------------------------------------------------
NetZero Platinum
Only $9.95 per month!
Sign up in September to win one of 30 Hawaiian Vacations for 2!
http://my.netzero.net/s/signup?r=platinum&amp;refcd=PT97

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929095740</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-29 09:57:40-0400</timestampReceived><subject>Re: newbie question on sha1 and md5</subject><body>

hi...

On Thu, 2001-09-27 at 15:36, zentara wrote:
&gt; I have applied the 2.4.8 kernel patch, as advertised on this list, to
&gt; use the crypto-api
&gt; on my linux machine. I couldn't get the standard distribution to work,
&gt; so I
&gt; had to rely on the patch; but it works great.
...that's what the patch is (also) for... ;-)
 
&gt; My only question is:
&gt; How do you use the Digest-MD-5 and the Digest-SHA1 functions?
&gt; I built them into the kernel, and they report registration on boot,
&gt; but how do I actually use them? I know how to use the md5sum and
&gt; sha1sum utilities that come with Suse, but what trick is there to using
&gt; the cryptoapi versions built into a kernel?

they are meant to be used from kernel space; you'd have to write some
kernel module/routines that make use of them...

afaik there's no known project/application which makes use of them
yet... a possible use would be to make the random generator use the
digests...

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929142647</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-29 14:26:47-0400</timestampReceived><subject>Re: newbie question on sha1 and md5</subject><body>

On Thursday 27 September 2001 15:36, zentara wrote:
&lt;snip&gt;
&gt; I built them into the kernel, and they report registration on boot,
&gt; but how do I actually use them? I know how to use the md5sum and
&gt; sha1sum utilities that come with Suse, but what trick is there to
&gt; using the cryptoapi versions built into a kernel?
&lt;snip&gt;

They're for use by in-kernel modules. They're not for use by usespace. 
if you need userspace crypto, use gcrypt (and until that is stable 
openssl).

Marc

-- 
The intensity and complexity of life, attendant upon advancing
civilization, have rendered necessary some retreat from the world, and
man, under the refining influence of culture, has become more
sensitive to publicity, so that solitude and privacy have become more
essential to the individual; but modern enterprise and invention have,
through invasions upon his privacy, subjected him to mental pain and
distress, far greater than could be inflicted by mere bodily injury.
       -- S.D. Warren/L.D. Brandeis:
          The Right to Privacy, Harvard Law Review vol.IV, no.5 (1890)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929151024</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-29 15:10:24-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

On Sat, 2001-09-29 at 16:54, Jari Ruusu wrote:
&gt; &gt; ps: this should allow swap encryption over loop devices, without the need
&gt; &gt; for pre-allocated buffers as worked around in loop-AES...
&gt; &gt;
&gt; &gt; jari, can you confirm this? :-)
&gt; In-place encryption won't work for swap-out path, sorry. VM often swaps out
&gt; something AND still wants to use original unmodified data.
damn... forgot about that one... well would have been too elegant to be
true :-)
 
&gt; I learned that the hard way!  :-)
btw, it's mentioned in that bsd swapspace paper as well...

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929183631</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-29 18:36:31-0400</timestampReceived><subject>RE: new version of loop.c patch</subject><body>

Jari:

I am a bit confused as to what you mean with this message. What is "in place
encryption"? Your previous message says that loop-aes in fact does do
encrypted swap. Can you give us some information on how that might otherwise
work?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, September 29, 2001 9:29 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Jari Ruusu
Sent: Saturday, September 29, 2001 7:54 AM
To: Herbert Valerio Riedel
Cc: linux-crypto@nl.linux.org
Subject: Re: new version of loop.c patch

&gt; Herbert Valerio Riedel wrote:
&gt; On Sat, 2001-09-29 at 11:13, Herbert Valerio Riedel wrote:
&gt;
&gt; &gt; another nice thing is, that the other 2.4.10 changes to loop.c allow us
&gt; &gt; to get rid of one buffer-allocate+copy-overhead, by the use of
&gt; &gt; LO_FLAGS_BH_REMAP, so we can use in-place encryption...
&gt; &gt;
&gt; &gt; now I've got only to audit the ciphers to check, whether they are safe
&gt; &gt; regarding in-place operation...
&gt;
&gt; ps: this should allow swap encryption over loop devices, without the need
&gt; for pre-allocated buffers as worked around in loop-AES...
&gt;
&gt; jari, can you confirm this? :-)

In-place encryption won't work for swap-out path, sorry. VM often swaps out
something AND still wants to use original unmodified data.

I learned that the hard way!  :-)

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926215405</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-26 21:54:05-0400</timestampReceived><subject>Re: RPM for LOOP-AES? / RPMs for new MDK stuff</subject><body>

Le Mercredi 26 Septembre 2001 19:24, vous avez √©crit :
&gt;
&gt; Do you plan to place the RPMs on the sourceforge site?

I'll be glad if the project admin for cryptoapi wants to mirror my RPMs on 
the project official page, yes.

But that's up to him ;-)

&gt; 	Any possibility of seeing an RPM for LOOP-AES (source/binary)?

Well, I don't know the loop-aes stuff well, but I've taken a quick look at it.

As far as I understand, what it does is just a subset of what cryptoapi does, 
so I don't feel the urge of RPMing it. But I may miss some point.

According to the README of loop-aes, it necessitates to recompile the kernel 
just to remove kernel original loop device support. That would mean either to 
create again a number of kernel binary RPM packages just for changing this 
very little configuration option (and I'm reluctant to do so...), or rely on 
loop-aes users to recompile their kernel by themselves...

And I feel that if the users feel comfortable enough to recompile the kernel 
by themselves, they don't really need a RPM for loop-aes, they can built its 
binary by themselves as well...

The matter is always with the kernel. For cryptoapi, I have built 100+ 
megabytes of RPMs including different flavours of the kernel with SRPMS, just 
for a little patch which source is about 2 KB...

And the cryptoapi binary RPM is only about 200 KB, and losetup + mount 
patched binary RPMs are about 100 KB total.

That makes 300 KB of real meat, but a total of 100+ MB of RPMs because the 
kernel has to be there as well :-(((

I really hope the iv-mode-sector patch will integrate the vanilla kernel 
soon!!!

Building the complete set of kernel RPMs took about 5-6 hours of compilation 
on my machine, and used more than 500 MB of temporary space on my disk... Now 
you may understand why I'm reluctant to do it every couple of days ;-)

Best regards.

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928075754</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-28 07:57:54-0400</timestampReceived><subject>RE: RPM for LOOP-AES? / RPMs for new MDK stuff</subject><body>

Mr. Bouissou:

	Perhaps you will feel compelled to publish your RPM generating scripts. If
you do, you may find people uploading RPMs that they built out of work they
had to do anyway in using the crpytoapi stuff.

	I am still curious, how Microsoft is able to distribute their operating
system with crypto APIs in it, and Linux is not! This is crazy! What are we
doing wrong?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, September 28, 2001 12:55 AM

-----Original Message-----
From: Michel Bouissou [mailto:michel@bouissou.net]
Sent: Wednesday, September 26, 2001 2:54 PM
To: stuart@bh90210.net; linux-crypto@nl.linux.org
Subject: Re: RPM for LOOP-AES? / RPMs for new MDK stuff

Le Mercredi 26 Septembre 2001 19:24, vous avez √©crit :
&gt;
&gt; Do you plan to place the RPMs on the sourceforge site?

I'll be glad if the project admin for cryptoapi wants to mirror my RPMs on
the project official page, yes.

But that's up to him ;-)

&gt;       Any possibility of seeing an RPM for LOOP-AES (source/binary)?

Well, I don't know the loop-aes stuff well, but I've taken a quick look at
it.

As far as I understand, what it does is just a subset of what cryptoapi
does,
so I don't feel the urge of RPMing it. But I may miss some point.

According to the README of loop-aes, it necessitates to recompile the kernel
just to remove kernel original loop device support. That would mean either
to
create again a number of kernel binary RPM packages just for changing this
very little configuration option (and I'm reluctant to do so...), or rely on
loop-aes users to recompile their kernel by themselves...

And I feel that if the users feel comfortable enough to recompile the kernel
by themselves, they don't really need a RPM for loop-aes, they can built its
binary by themselves as well...

The matter is always with the kernel. For cryptoapi, I have built 100+
megabytes of RPMs including different flavours of the kernel with SRPMS,
just
for a little patch which source is about 2 KB...

And the cryptoapi binary RPM is only about 200 KB, and losetup + mount
patched binary RPMs are about 100 KB total.

That makes 300 KB of real meat, but a total of 100+ MB of RPMs because the
kernel has to be there as well :-(((

I really hope the iv-mode-sector patch will integrate the vanilla kernel
soon!!!

Building the complete set of kernel RPMs took about 5-6 hours of compilation
on my machine, and used more than 500 MB of temporary space on my disk...
Now
you may understand why I'm reluctant to do it every couple of days ;-)

Best regards.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928094224</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-28 09:42:24-0400</timestampReceived><subject>Re: RPM for LOOP-AES? / RPMs for new MDK stuff</subject><body>

Le Vendredi 28 Septembre 2001 09:57, IT3 Stuart B. Tener, USNR-R a √©crit :
&gt;
&gt; 	Perhaps you will feel compelled to publish your RPM generating scripts

There is no unpublished "RPM generation script". Each RPM build is controlled 
by a ".spec" file that describes what sources and patches are required, how 
to install the sources and apply the patches, how to compile, and what to 
include in the final binary RPM, plus possible installation scripts that 
should be executed before or after the installation of the binary RPM.

For each RPM package I have made, I have provided in the SRPMS directory of 
the FTP site the ".src.rpm" file that includes all the sources and scripts 
used in building the RPM, and that includes the .spec file.

If you take one of these .src.rpm files and install it on your system, you 
will find that all the needed sources will be installed in your 
/usr/src/RPM/SOURCES directory, while the .spec files will be installed in 
the /usr/src/RPM/SPECS directory.

Starting from there, you can recompile your own binary RPMs for yourself 
(using the "rpm -ba &lt;specfile&gt; command") or perform any changes you wish in 
the .spec file and sources, i.e. for adding your own patches or source 
modification, and recreate RPMs from there.

So, there's no secret and I haven't kept any single byte of code or script 
for myself, which wouldn't be on the FTP site.

&gt; 	I am still curious, how Microsoft is able to distribute their operating
&gt; system with crypto APIs in it, and Linux is not! This is crazy! What are we
&gt; doing wrong?

Actually, most Linux distros already come with quite a lot of crypto stuff. 
Mandrake, for example, comes with GnuPG, OpenSSL, SSH, IPSec, etc...

But Mandrake doesn't yet include the cryptoapi, and that's why I created 
these additional RPM packages.

Let's hope that the next official Mandrake release will include it as well.

There's no "better crypto" in MS products compared to what you can find in 
Linux distros, and I wouldn't rely a single second on "MS crypto" which is 
provided without source code and that many peope consider to be probably 
insecure or backdoored.

On the other hand, all crypto included in Linux is Open Source code, the 
complete sources are provided, and if ever you do not trust the crypto 
binairies provided, you are free to review source code by yourself, and 
recompile your own binaries on your own system.
And that is *much* preferable from a security standpoint.

Regards.

-- 
Michel Bouissou - OpenPGP DH/DSS ID 0x5C2BEE8F
michel@bouissou.net
Faites plaisir √† votre ordinateur:
Offrez-lui un pingouin !

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010927233406</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-27 23:34:06-0400</timestampReceived><subject>Re: AES or Twofish the best crypto?</subject><body>

On Thu, Sep 27, 2001 at 10:32:09PM +0000, Jonas Larsson wrote:
&gt; For me it seems like either the AES or Twofish crypto with the maximum 
&gt; keylength of 256 bits is probably the _most_ secure choise. For me the 
&gt; security strength is _much_ more important than the speed of read/write to 
&gt; the fs.
&gt; 
&gt; Any coments?

How do you measure security? Most cryptographers (and I doubt there are
any on this list) say that time and analysis will increase their trust
in a given algorithm. Neither AES nor Twofish has been around that long.
The venerable and slow old 3DES has, and it has defied all attackers.
IDEA has probably been around long enough to have earned trust. Blowfish
is getting there, if not there already.

Somewhere recently I read a slightly outdated page which described all
the main algorithms in layman's terms, and included plenty of cites of
respected cryptographers' opinions. Sorry, I don't know the URL.

At that time (pre-AES) it definitely did not recommend Rijndael nor
Twofish. However, it did point out that the AES winner would be likely
to receive lots of scrutiny, so in time Rijndael (AES) might be seen as
an excellent choice.

I personally feel more secure even with XOR. :) That's because I don't
see the TLA's as being in a likely threat model for my data. If the move
to outlaw encryption succeeds, I'll certainly want to increase my
encryption strength. Right now I'm blissfully using Blowfish for most
loop containers, but I throw in other algorithms to be different. :)

I definitely believe that the longer keylengths you choose, the better,
no matter what algorithm is employed. But again, this is only a lay
opinion. You should look to places such as counterpane.com (Schneier's
company) for better answers.

    Rob - /dev/rob0


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926162327</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-26 16:23:27-0400</timestampReceived><subject>RE: [Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Mr. Bouissou:

	I went to the site, and I am not sure from the filenames which RPMs to
download. If I am going to (in the next week) upgrade to Mandrake 8.1 (from
8.0), which RPMS do I need?

	Can you create a Mandrake 8.1 directory and put the RPMs in it?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, September 26, 2001 9:20 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Michel Bouissou
Sent: Wednesday, September 26, 2001 9:14 AM
To: linux-crypto@nl.linux.org
Subject: [Announce] New cryptoapi RPM packages for Mandrake 8.1


***   M I R R O R S   W A N T E D   ***


[Announce] New cryptoapi RPM packages for Mandrake 8.1

Hello,

I have compiled ready-for-use RPM packages for Linux cryptoapi,
for Linux-Mandrake 8.1

These packages bring cryptoapi support to Linux, for on-the-fly
encrypted filesystems, a feature comparable to what tools like
Scramdisk or PGPDisk do on other proprietary OSes.

These packages come in 2 flavours:

- 1 "light" installation consisting of 3 small RPMS for losetup, mount, and
cryptoapi-standalone, which can be installed without touching the kernel on
a Vanilla Mandrake 8.1

- 1 "complete" installation consisting of RPMs for losetup, mount, and
cryptoapi-ivmode, plus a complete series of kernel 2.4.8-26 packages,
patched
and rebuilt to allow iv-mode-sector support for loopback encrypted
filesystems.

The first set of packages is light to download and install, but encrypted
volume created with it may not be portable from one device to another.

The 2nd set of packages is more complete, and allows encrypted volumes to be
portable, but it is much bigger to download and a little more complex to
install.

These packages are experimental and non-official, they are not
supported by Mandrakesoft.

This packages were made on a Mandrake 8.1rc1 system and are fully
compatable with it. They should be as well compatable with the official
Mandrake 8.1 upcoming release.
They may also be compatable with recent RedHats, but this is yet untested.


The documentation file describing these packages in detail is available at:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/
cryptoapi-2.4.7.0-2.4.8_26.README.txt


****************************************************************************
**
The cryptoapi RPMs and related packages are available from:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/
****************************************************************************
**

If you wish to mirror these packages on other FTP sites, please feel free
to do so.

There is no "home" web page related to this RPM build.

Please refer to the Sourceforge Cryptoapi page at:
http://sourceforge.net/projects/cryptoapi/

****************************************************************************
**

Your feedback and comments are welcome.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926162502</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-26 16:25:02-0400</timestampReceived><subject>RE: [Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Mr. Bouissou:

        Does the RPM also patch the source tree? So, I presume you are
distributing a binary kernel, but if the kernel needs customization does
your RPM effect the source tree so a kernel can be recompiled?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, September 26, 2001 9:24 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Michel Bouissou
Sent: Wednesday, September 26, 2001 9:14 AM
To: linux-crypto@nl.linux.org
Subject: [Announce] New cryptoapi RPM packages for Mandrake 8.1


***   M I R R O R S   W A N T E D   ***


[Announce] New cryptoapi RPM packages for Mandrake 8.1

Hello,

I have compiled ready-for-use RPM packages for Linux cryptoapi,
for Linux-Mandrake 8.1

These packages bring cryptoapi support to Linux, for on-the-fly
encrypted filesystems, a feature comparable to what tools like
Scramdisk or PGPDisk do on other proprietary OSes.

These packages come in 2 flavours:

- 1 "light" installation consisting of 3 small RPMS for losetup, mount, and
cryptoapi-standalone, which can be installed without touching the kernel on
a Vanilla Mandrake 8.1

- 1 "complete" installation consisting of RPMs for losetup, mount, and
cryptoapi-ivmode, plus a complete series of kernel 2.4.8-26 packages,
patched
and rebuilt to allow iv-mode-sector support for loopback encrypted
filesystems.

The first set of packages is light to download and install, but encrypted
volume created with it may not be portable from one device to another.

The 2nd set of packages is more complete, and allows encrypted volumes to be
portable, but it is much bigger to download and a little more complex to
install.

These packages are experimental and non-official, they are not
supported by Mandrakesoft.

This packages were made on a Mandrake 8.1rc1 system and are fully
compatable with it. They should be as well compatable with the official
Mandrake 8.1 upcoming release.
They may also be compatable with recent RedHats, but this is yet untested.


The documentation file describing these packages in detail is available at:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/
cryptoapi-2.4.7.0-2.4.8_26.README.txt


****************************************************************************
**
The cryptoapi RPMs and related packages are available from:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/
****************************************************************************
**

If you wish to mirror these packages on other FTP sites, please feel free
to do so.

There is no "home" web page related to this RPM build.

Please refer to the Sourceforge Cryptoapi page at:
http://sourceforge.net/projects/cryptoapi/

****************************************************************************
**

Your feedback and comments are welcome.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926165939</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-26 16:59:39-0400</timestampReceived><subject>RE: [Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Mr. Bouissou:

            Never mind! Boy did I make a mistake. I realized your directory
structure, and have also found the README. Now I am clear on it, and have
downloaded it all.

            - Make a backup copy of the following files, in case you would
need them back:
            - /sbin/losetup
            - /bin/mount
            - /bin/umount

        Correct me if I am wrong, but I think if an RPM is built with that
in mind, the RPM can actually make the backups for you in a more automated
manner, no? This way the RPM installation would create the backups leaving
less room for mistakes on installation.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, September 26, 2001 9:47 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Michel Bouissou
Sent: Wednesday, September 26, 2001 9:14 AM
To: linux-crypto@nl.linux.org
Subject: [Announce] New cryptoapi RPM packages for Mandrake 8.1


***   M I R R O R S   W A N T E D   ***


[Announce] New cryptoapi RPM packages for Mandrake 8.1

Hello,

I have compiled ready-for-use RPM packages for Linux cryptoapi,
for Linux-Mandrake 8.1

These packages bring cryptoapi support to Linux, for on-the-fly
encrypted filesystems, a feature comparable to what tools like
Scramdisk or PGPDisk do on other proprietary OSes.

These packages come in 2 flavours:

- 1 "light" installation consisting of 3 small RPMS for losetup, mount, and
cryptoapi-standalone, which can be installed without touching the kernel on
a Vanilla Mandrake 8.1

- 1 "complete" installation consisting of RPMs for losetup, mount, and
cryptoapi-ivmode, plus a complete series of kernel 2.4.8-26 packages,
patched
and rebuilt to allow iv-mode-sector support for loopback encrypted
filesystems.

The first set of packages is light to download and install, but encrypted
volume created with it may not be portable from one device to another.

The 2nd set of packages is more complete, and allows encrypted volumes to be
portable, but it is much bigger to download and a little more complex to
install.

These packages are experimental and non-official, they are not
supported by Mandrakesoft.

This packages were made on a Mandrake 8.1rc1 system and are fully
compatable with it. They should be as well compatable with the official
Mandrake 8.1 upcoming release.
They may also be compatable with recent RedHats, but this is yet untested.


The documentation file describing these packages in detail is available at:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/RPMS/
cryptoapi-2.4.7.0-2.4.8_26.README.txt


****************************************************************************
**
The cryptoapi RPMs and related packages are available from:
ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/
****************************************************************************
**

If you wish to mirror these packages on other FTP sites, please feel free
to do so.

There is no "home" web page related to this RPM build.

Please refer to the Sourceforge Cryptoapi page at:
http://sourceforge.net/projects/cryptoapi/

****************************************************************************
**

Your feedback and comments are welcome.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926195700</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-26 19:57:00-0400</timestampReceived><subject>Re: [Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Le Mercredi 26 Septembre 2001 18:59, vous avez √©crit :
&gt; Mr. Bouissou:
&gt;
&gt;             Never mind! Boy did I make a mistake. I realized your directory
&gt; structure, and have also found the README. Now I am clear on it, and have
&gt; downloaded it all.

Yes, I hope the README answered the questions you asked in your 2 previous 
messages.

&gt;             - Make a backup copy of the following files, in case you would
&gt; need them back:
&gt;             - /sbin/losetup
&gt;             - /bin/mount
&gt;             - /bin/umount
&gt;
&gt;         Correct me if I am wrong, but I think if an RPM is built with that
&gt; in mind, the RPM can actually make the backups for you in a more automated
&gt; manner, no? This way the RPM installation would create the backups leaving
&gt; less room for mistakes on installation.

RPMs usually makes backups only for configuration files, which may be 
user-modified, but not for binary files, which aren't supposed to change.

Should you have a problem with a non-working binary when you install a RPM, 
you would only need to "downgrade" to the RPM from your original distro to 
solve the problem.

But, Oooops! What about mount ?

mount is absolutely necessary to be able to mount your filesystems, and, if 
you have a problem with your "current" mount, you might be unable to mount 
the filesystem (possibly CD-Rom) on which resides the RPM you'd need to 
downgrade...

So, the choice of manually copying your "original" mount in the same 
directory, to another name (i.e. mount-original) protects you, because if 
ever your new "mount" fails, you still can directly use "mount-original" 
instead...

It's quite improbable that you might encounter a problem with this patched 
mount version anyway, but I found it preferable to be careful with this.

Hope this helps.

Best regards.

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925163700</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-09-25 16:37:00-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocation failed (gfp=0x20/0) from c882256e</subject><body>

On 2001-09-25, "peter k." &lt;spam-goes-to-dev-null@gmx.net&gt; wrote:

&gt; yesterday i configured my box to use swap over loop-AES....
&gt; if i cat /dev/zero &gt; blah now on another loop-AES encrypted device (not
&gt; on the swap device of course) "__alloc_pages: 0-order allocation failed
&gt; (gfp=0x20/0) from c882256e" starts and keeps appearing when the kernel
&gt; wants to start swapping until it panics within the process of the loop
&gt; device i was cat'ing to....i guess this error is caused by loop-AES

Funny, I was just about to post about something similar...

I've found that I cannot use the latest loop-AES on 2.4.9 (at least) with a
partition-backed loop device larger than 2 GB.  The stock loop driver in
2.4.9 works fine with large (dozens of GBs) loop devices, but the loop-AES
driver causes kernel panics.  Using loop-AES, losetup'ing (with or without
encryption) a 10-20 GB partition and then trying to mke2fs /dev/loop0 will
result in a panic.  A 2 GB partition is rock solid.  A 2.2 GB partition
will successfully mkfs and mount, but then trying to dd if=/dev/zero
of=/mnt/testfile will cause a panic once the file passes the 2 GB mark.

The one log entry that manages to be syslogged is:

Sep 25 11:49:14 rover kernel: __alloc_pages: 0-order allocation failed. 

Here's an oops hand-copied and run through ksymoops (and unfortunately
line-wrapped a bit):

unable to handle kernel paging request at virtual address fffffffc
*pde = 00001063
EIP:    0010:[&lt;c01103c3&gt;]
Using defaults from ksymoops -t elf32-i386 -a i386
EFLAGS: 00010017
eax: c0435948   ebx: 00000000   ecx: 00000001   edx: c043594c
esi: c0435948   edi: fffffff8   ebp: c96fbdac   esp: c96fbd90
ds: 0018   es: 0018   ss: 0018
Process loop0 (pid: 145, stackpage=c96fb000)
Stack: c0435900 c0435948 00000002 c043594c 00000001 00000086 00000003 \
								00000001
       c012d7bb cb3f28c0 c96d9000 d091a3b7 c0435900 00000001 cb3f28c0 \
								c14694e0
       c0187a7d cb3f28c0 00000001 c14694e0 00000002 c146a060 c02c5460 \
								c019329a
Call Trace: [&lt;c012d7bb&gt;] [&lt;d091a3b7&gt;] [&lt;c0187a7d&gt;] [&lt;c019329a&gt;] \
							[&lt;c0197948&gt;]
   [&lt;c0194af7&gt;] [&lt;c01978e0&gt;] [&lt;c0107cef&gt;] [&lt;c0107e4e&gt;] [&lt;c0106b94&gt;] \
							[&lt;d091cc06&gt;]
   [&lt;d091bee8&gt;] [&lt;d091ad62&gt;] [&lt;c0105454&gt;]
Code: 8b 4f 04 8b 1b 8b 01 85 45 fc 74 51 31 c0 9c 5e fa c7 01 00

&gt;&gt;EIP; c01103c2 &lt;__wake_up+32/a8&gt;   &lt;=====
Trace; c012d7ba &lt;end_buffer_io_sync+3e/48&gt;
Trace; d091a3b6 &lt;[loop]loop_end_io_transfer_wr+2a/5c&gt;
Trace; c0187a7c &lt;end_that_request_first+60/bc&gt;
Trace; c019329a &lt;ide_end_request+5a/90&gt;
Trace; c0197948 &lt;ide_dma_intr+68/a8&gt;
Trace; c0194af6 &lt;ide_intr+fa/150&gt;
Trace; c01978e0 &lt;ide_dma_intr+0/a8&gt;
Trace; c0107cee &lt;handle_IRQ_event+2e/58&gt;
Trace; c0107e4e &lt;do_IRQ+6e/b0&gt;
Trace; c0106b94 &lt;ret_from_intr+0/6&gt;
Trace; d091cc06 &lt;[loop]aes_encrypt+836/ff0&gt;
Trace; d091bee8 &lt;[loop]transfer_aes+1f8/250&gt;
Trace; d091ad62 &lt;[loop]loop_thread+2da/438&gt;
Trace; c0105454 &lt;kernel_thread+28/38&gt;
Code;  c01103c2 &lt;__wake_up+32/a8&gt;
0000000000000000 &lt;_EIP&gt;:
Code;  c01103c2 &lt;__wake_up+32/a8&gt;   &lt;=====
   0:   8b 4f 04                  mov    0x4(%edi),%ecx   &lt;=====
Code;  c01103c4 &lt;__wake_up+34/a8&gt;
   3:   8b 1b                     mov    (%ebx),%ebx
Code;  c01103c6 &lt;__wake_up+36/a8&gt;
   5:   8b 01                     mov    (%ecx),%eax
Code;  c01103c8 &lt;__wake_up+38/a8&gt;
   7:   85 45 fc                  test   %eax,0xfffffffc(%ebp)
Code;  c01103cc &lt;__wake_up+3c/a8&gt;
   a:   74 51                     je     5d &lt;_EIP+0x5d&gt; c011041e \
						&lt;__wake_up+8e/a8&gt;
Code;  c01103ce &lt;__wake_up+3e/a8&gt;
   c:   31 c0                     xor    %eax,%eax
Code;  c01103d0 &lt;__wake_up+40/a8&gt;
   e:   9c                        pushf  
Code;  c01103d0 &lt;__wake_up+40/a8&gt;
   f:   5e                        pop    %esi
Code;  c01103d2 &lt;__wake_up+42/a8&gt;
  10:   fa                        cli    
Code;  c01103d2 &lt;__wake_up+42/a8&gt;
  11:   c7 01 00 00 00 00         movl   $0x0,(%ecx)

This is a laptop running 2.4.9 stock, ne2000-clone pcmcia NIC, no APM or
other stuff enabled, plus loop-AES-v1.4d and patched util-linux 2.11i. 
I'll test 2.2.19 as soon as I can, but since the stock loop.c driver in 2.4
doesn't cause this, I expect results to be the same :(

--
Hank Leininger &lt;hlein@progressive-comp.com&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925190823</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-25 19:08:23-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocation</subject><body>

Hank Leininger wrote:
&gt; On 2001-09-25, "peter k." &lt;spam-goes-to-dev-null@gmx.net&gt; wrote:
&gt; 
&gt; &gt; yesterday i configured my box to use swap over loop-AES....
&gt; &gt; if i cat /dev/zero &gt; blah now on another loop-AES encrypted device (not
&gt; &gt; on the swap device of course) "__alloc_pages: 0-order allocation failed
&gt; &gt; (gfp=0x20/0) from c882256e" starts and keeps appearing when the kernel
&gt; &gt; wants to start swapping until it panics within the process of the loop
&gt; &gt; device i was cat'ing to....i guess this error is caused by loop-AES
&gt; 
&gt; Funny, I was just about to post about something similar...
&gt; 
&gt; I've found that I cannot use the latest loop-AES on 2.4.9 (at least) with a
&gt; partition-backed loop device larger than 2 GB.  The stock loop driver in
&gt; 2.4.9 works fine with large (dozens of GBs) loop devices, but the loop-AES
&gt; driver causes kernel panics.  Using loop-AES, losetup'ing (with or without
&gt; encryption) a 10-20 GB partition and then trying to mke2fs /dev/loop0 will
&gt; result in a panic.  A 2 GB partition is rock solid.  A 2.2 GB partition
&gt; will successfully mkfs and mount, but then trying to dd if=/dev/zero
&gt; of=/mnt/testfile will cause a panic once the file passes the 2 GB mark.

Can both of you try this patch, and try to repeat the problem.

    cd loop-AES-v1.4d
    patch -p0 &lt; filename
    make

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


--- loop.c-2.4.diff.old	Sun Sep  2 21:33:01 2001
+++ loop.c-2.4.diff	Tue Sep 25 21:51:28 2001
@@ -261,12 +261,12 @@
 +        memset(bh, 0, sizeof(struct buffer_head));
 +        bh-&gt;b_page = p;
 +    } else {
-+        bh = kmem_cache_alloc(bh_cachep, SLAB_ATOMIC);
++        bh = kmem_cache_alloc(bh_cachep, SLAB_NOIO);
 +        if(!bh) {
 +            return((struct buffer_head *)0);
 +        }
 +        memset(bh, 0, sizeof(struct buffer_head));
-+        bh-&gt;b_page = alloc_page(GFP_ATOMIC);
++        bh-&gt;b_page = alloc_page(GFP_NOIO);
 +        if(!bh-&gt;b_page) {
 +            kmem_cache_free(bh_cachep, bh);
 +            return((struct buffer_head *)0);


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925203409</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-09-25 20:34:09-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocation</subject><body>

On Tue, 25 Sep 2001, Jari Ruusu wrote:

&gt; Hank Leininger wrote:
&gt; &gt; I've found that I cannot use the latest loop-AES on 2.4.9 (at least)
&gt; &gt; with a partition-backed loop device larger than 2 GB.  The stock
[snip]
&gt; Can both of you try this patch, and try to repeat the problem.
[snip]
&gt; -+        bh-&gt;b_page = alloc_page(GFP_ATOMIC);
&gt; ++        bh-&gt;b_page = alloc_page(GFP_NOIO);

This seems to help, but I still get oops's.  The "losetup; mke2fs" test
of a 23GB partition now gets further than it did before--instead of
dying while inode tables are written, it dies while writing superblocks
/ FS accounting information.  Interestingly this time it did *not* log a
'0-order allocation' error first.  The oops was very similar, but not
identical; here it is:

unable to handle kernel paging request at virtual address fffffffc
*pde = 00001063
EIP:    0010:[&lt;c01103c3&gt;]
Using defaults from ksymoops -t elf32-i386 -a i386
EFLAGS: 00010017
eax: c04a1de8   ebx: 00000000   ecx: 00000001   edx: c04a1dec
esi: c04a1de8   edi: fffffff8   ebp: cedabdac   esp: c96fbd90
ds: 0018   es: 0018   ss: 0018
Process loop0 (pid: 138, stackpage=c96fb000)
Stack: c04a1da0 c04a1de8 00000002 c04a1dec 00000001 00000086 00000003 00000001
       c012d7bb c1d68e60 ced5e000 d091a3b7 c04a1da0 00000001 c1d68e60 c1466380
       c0187a7d c1d68e60 00000001 c1466380 00000082 c146a060 c02c5460 c019329a
Call Trace: [&lt;c012d7bb&gt;] [&lt;d091a3b7&gt;] [&lt;c0187a7d&gt;] [&lt;c019329a&gt;] [&lt;c0197948&gt;]
   [&lt;c0194af7&gt;] [&lt;c01978e0&gt;] [&lt;c0107cef&gt;] [&lt;c0107e4e&gt;] [&lt;c0106b94&gt;] [&lt;d091d21b&gt;]
   [&lt;d091bee8&gt;] [&lt;d091a4d9&gt;] [&lt;c0105454&gt;]
Code: 8b 4f 04 8b 1b 8b 01 85 45 fc 74 51 31 c0 9c 5e fa c7 01 00

&gt;&gt;EIP; c01103c2 &lt;__wake_up+32/a8&gt;   &lt;=====
Trace; c012d7ba &lt;end_buffer_io_sync+3e/48&gt;
Trace; d091a3b6 &lt;[loop]loop_end_io_transfer_wr+2a/5c&gt;
Trace; c0187a7c &lt;end_that_request_first+60/bc&gt;
Trace; c019329a &lt;ide_end_request+5a/90&gt;
Trace; c0197948 &lt;ide_dma_intr+68/a8&gt;
Trace; c0194af6 &lt;ide_intr+fa/150&gt;
Trace; c01978e0 &lt;ide_dma_intr+0/a8&gt;
Trace; c0107cee &lt;handle_IRQ_event+2e/58&gt;
Trace; c0107e4e &lt;do_IRQ+6e/b0&gt;
Trace; c0106b94 &lt;ret_from_intr+0/6&gt;
Trace; d091d21a &lt;[loop]aes_encrypt+e4a/ff0&gt;
Trace; d091bee8 &lt;[loop]transfer_aes+1f8/250&gt;
Trace; d091a4d8 &lt;[loop]loop_get_buffer+b4/154&gt;
Trace; c0105454 &lt;kernel_thread+28/38&gt;
Code;  c01103c2 &lt;__wake_up+32/a8&gt;
0000000000000000 &lt;_EIP&gt;:
Code;  c01103c2 &lt;__wake_up+32/a8&gt;   &lt;=====
   0:   8b 4f 04                  mov    0x4(%edi),%ecx   &lt;=====
Code;  c01103c4 &lt;__wake_up+34/a8&gt;
   3:   8b 1b                     mov    (%ebx),%ebx
Code;  c01103c6 &lt;__wake_up+36/a8&gt;
   5:   8b 01                     mov    (%ecx),%eax
Code;  c01103c8 &lt;__wake_up+38/a8&gt;
   7:   85 45 fc                  test   %eax,0xfffffffc(%ebp)
Code;  c01103cc &lt;__wake_up+3c/a8&gt;
   a:   74 51                     je     5d &lt;_EIP+0x5d&gt; c011041e &lt;__wake_up+8e/a8&gt;
Code;  c01103ce &lt;__wake_up+3e/a8&gt;
   c:   31 c0                     xor    %eax,%eax
Code;  c01103d0 &lt;__wake_up+40/a8&gt;
   e:   9c                        pushf
Code;  c01103d0 &lt;__wake_up+40/a8&gt;
   f:   5e                        pop    %esi
Code;  c01103d2 &lt;__wake_up+42/a8&gt;
  10:   fa                        cli
Code;  c01103d2 &lt;__wake_up+42/a8&gt;
  11:   c7 01 00 00 00 00         movl   $0x0,(%ecx)

I'll save you some diff'ing:

-eax: c0435948   ebx: 00000000   ecx: 00000001   edx: c043594c
-esi: c0435948   edi: fffffff8   ebp: c96fbdac   esp: c96fbd90
+eax: c04a1de8   ebx: 00000000   ecx: 00000001   edx: c04a1dec
+esi: c04a1de8   edi: fffffff8   ebp: cedabdac   esp: c96fbd90

-Trace; d091cc06 &lt;[loop]aes_encrypt+836/ff0&gt;
+Trace; d091d21a &lt;[loop]aes_encrypt+e4a/ff0&gt;

-Trace; d091ad62 &lt;[loop]loop_thread+2da/438&gt;
+Trace; d091a4d8 &lt;[loop]loop_get_buffer+b4/154&gt;


Hank Leininger &lt;hlein@progressive-comp.com&gt;
E407 AEF4 761E D39C D401  D4F4 22F8 EF11 861A A6F1


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920211152</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-09-20 21:11:52-0400</timestampReceived><subject>Re: [Evms-devel] Root on LV</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

[...]

Stuart&gt; -----Original Message----- From: Kevin Corry
Stuart&gt; [mailto:corryk@us.ibm.com] Sent: Thursday, September 20, 2001
Stuart&gt; 12:49 PM To: stuart@bh90210.net Cc:
Stuart&gt; evms-devel@lists.sourceforge.net Subject: Re: [Evms-devel] Root
Stuart&gt; on LV

Stuart&gt; On Thursday 20 September 2001 14:10, you wrote:
&gt;&gt; Mr. Pratt, et al.:
&gt;&gt; 
&gt;&gt; Actually, I just found out (via an email from Hans Reiser) that
&gt; ReiserFS
&gt;&gt; will be inclusive of encryption by 30 SEP 01 (as someone funded the

[...]

I think that you are a year off.  You are talking about Reiser4 which
will be available September 30, 2002.  (How they can predict the date so
accurately, with over a year intervening, I do not know.)  Reiser4 will
include support for plugins, one of which will be encryption.

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7qluTZRhU33H9o38RAukPAJ90ElNgh/MsasdTOJx5ffIE6cqSeACgptgn
dZqVx8W6qCLw12V9qj7VJNQ=
=x4Et
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920225507</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-20 22:55:07-0400</timestampReceived><subject>RE: [Evms-devel] Root on LV</subject><body>

Mr. Chan:

	I just sent an email off to Mr. Reiser asking him which "30 SEP" he was
talking about.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Thursday, September 20, 2001 3:54 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hubert Chan
Sent: Thursday, September 20, 2001 2:12 PM
To: linux-crypto@nl.linux.org
Subject: Re: [Evms-devel] Root on LV

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

[...]

Stuart&gt; -----Original Message----- From: Kevin Corry
Stuart&gt; [mailto:corryk@us.ibm.com] Sent: Thursday, September 20, 2001
Stuart&gt; 12:49 PM To: stuart@bh90210.net Cc:
Stuart&gt; evms-devel@lists.sourceforge.net Subject: Re: [Evms-devel] Root
Stuart&gt; on LV

Stuart&gt; On Thursday 20 September 2001 14:10, you wrote:
&gt;&gt; Mr. Pratt, et al.:
&gt;&gt;
&gt;&gt; Actually, I just found out (via an email from Hans Reiser) that
&gt; ReiserFS
&gt;&gt; will be inclusive of encryption by 30 SEP 01 (as someone funded the

[...]

I think that you are a year off.  You are talking about Reiser4 which
will be available September 30, 2002.  (How they can predict the date so
accurately, with over a year intervening, I do not know.)  Reiser4 will
include support for plugins, one of which will be encryption.

- --
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7qluTZRhU33H9o38RAukPAJ90ElNgh/MsasdTOJx5ffIE6cqSeACgptgn
dZqVx8W6qCLw12V9qj7VJNQ=
=x4Et
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010922014447</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-09-22 01:44:47-0400</timestampReceived><subject>Re: [Evms-devel] Root on LV</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Chan: I just sent an email off to Mr. Reiser asking him
Stuart&gt; which "30 SEP" he was talking about.

I got my info from the Namesys webpage: www.namesys.com or
www.reiserfs.com (a pretty ugly web page, if you ask me).  And after you
scroll past the mass of logos (or if you have a huge monitor, you won't
have to), you'll see the Reiser4 pre-announcement.

I'm also on the reiserfs mailing list, and I can tell you that there is
absolutely no discussion about Reiser4.

Or you could use the pessimist's method: it just has too much neat stuff
to be released in 9 days. ;-)

But if Reiser decides to release a year early, I'm not one to
complain. ;-)

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7q+ztZRhU33H9o38RAv9GAJ9CUITVVqFOzxRI0ITkCuDAHKUkmwCfRCGF
bwiUPsP1P8uAXoPOHf/eJMg=
=AZli
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010922014516</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-09-22 01:45:16-0400</timestampReceived><subject>Re: [Evms-devel] Root on LV</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Chan: I just sent an email off to Mr. Reiser asking him
Stuart&gt; which "30 SEP" he was talking about.

I got my info from the Namesys webpage: www.namesys.com or
www.reiserfs.com (a pretty ugly web page, if you ask me).  And after you
scroll past the mass of logos (or if you have a huge monitor, you won't
have to), you'll see the Reiser4 pre-announcement.

I'm also on the reiserfs mailing list, and I can tell you that there is
absolutely no discussion about Reiser4.

Or you could use the pessimist's method: it just has too much neat stuff
to be released in 9 days. ;-)

But if Reiser decides to release a year early, I'm not one to
complain. ;-)

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7q+ztZRhU33H9o38RAv9GAJ9CUITVVqFOzxRI0ITkCuDAHKUkmwCfRCGF
bwiUPsP1P8uAXoPOHf/eJMg=
=AZli
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010919222047</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-19 22:20:47-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

On Wed, Sep 19, 2001 at 03:11:35PM -0500, Rob McGee wrote:
&gt; 1.  # dd if=/dev/zero of=/SWAP bs=1M count=64

I think we've been over this before, but perhaps a return...
I also usually use /dev/zero to init the fs, however doesn't
this necessarily mean that when blocks are written under
crypto, those blocks will stick out like sore thumbs to
someone who wants to actually try to recover data?

I see that Jarl overwrites with zeroes 20 times on startup
in an attempt to destroy information from the previous
session; however reboot time would seem a bit late to
do this. Many machines never power down except for a 
hardware change or kernel update. Even my home workstation
hasn't been rebooted in 10 days.

Perhaps there should be a stop script in which the 
"overwrite ten times" occurs instead/also.

Is there any *practicable* way to randomize the swap
file contents before we losetup?

Another question: if you run this script and there is
a swap space already created, your password will go
into it, so you had better make sure this is the
first swap on. This would catch either script.

Second point; when you have multiple swap spaces are
the later ones actually getting used or are they just
cathing overflow? I've not looked closely, but when I
was having a serious memory leak problem with xplanetbg
I added swap spaces and it looked very much like thay
filled sequentially. In other words Rob, can you
confirm that swapping to your crypto swap space actually
occured? Did you try to swapoff the noncrypto one?

And last, a not specifically crypto question.... does
anyone know a way to include a swap *file* in /etc/fstab?
Or do you always have to do it in boot scripts? I've 
looked around and never found any other way to do it.
(obviously you cannot create a loopback mount in fstab,
but could do the losetup early in boot and name it in
fstab)

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920030848</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-20 03:08:48-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

On Wed, Sep 19, 2001 at 11:20:47PM +0100, Dale Amon wrote:
&gt; &gt; 1.  # dd if=/dev/zero of=/SWAP bs=1M count=64
&gt; 
&gt; I think we've been over this before, but perhaps a return...
&gt; I also usually use /dev/zero to init the fs, however doesn't
&gt; this necessarily mean that when blocks are written under
&gt; crypto, those blocks will stick out like sore thumbs to
&gt; someone who wants to actually try to recover data?

I understand your point, but over time I don't think it will matter,
because each boot (or running of the cron script) will reinitialise the
device with a new password.

But since I rarely exceed 40MB or so of swap in use, I should probably
format my swap partitions (which formerly were unencrypted) with output
from /dev/random or urandom. And in that case you probably wouldn't be
able to tell where the written blocks end and the random output starts
(unless of course you were keeping records of the state of the swap
device between initialisations, which would not be practical for an
attacker to manage.)

Of course an attacker can assume that the first blocks are the encrypted
ones, because every reinitialisation probably has the kswapd start at
the beginning of the device. Now *that* would be a good idea: rewrite
kswapd to keep a pointer (where to start writing in the device) between
sessions on a particular device. (Of course if the pointer is maintained
in a file on disk, you are back to the same place WRT security concerns.
Unless you randomise the pointer in your shutdown, that is. :)

&gt; I see that Jarl overwrites with zeroes 20 times on startup
&gt; in an attempt to destroy information from the previous
&gt; session; however reboot time would seem a bit late to

To me (at least thinking about my own threat model) this kind of caution
doesn't seem necessary. The most common "brute force" attack is to apply
brutality to someone who refuses to divulge his passphrase. Since in the
case of the swap devices, I wouldn't even know my own passphrase, I am
immune from that kind of attack. (They can get brutal, but they won't
get the passphrase.)

My threat model is not the TLA spooks; it's incredibly stupid and
incompetent local thugs. They're probably not even smart enough to hire
a good consultant. :) Maybe if you think you're likely to arouse the
interest of a national gov't, these extra precautions would be worth the
effort and inconvenience.

&gt; do this. Many machines never power down except for a 
&gt; hardware change or kernel update. Even my home workstation
&gt; hasn't been rebooted in 10 days.

That's why I like the idea of reinitializing the encrypted swap daily.
New passphrases bury the needle deeper in the haystack. Realistically,
even if important information can be found on the swap device, it won't
be a simple matter to distinguish WHICH bits are important. Suppose my
PGP passphrase is there. Unless it's somehow flagged ("Hey look, the
following string is this poor dumb guy's $PGPPASS!" :) there are still
many possible strings among that data.

This reminds me of another thing I like about how this loop encryption
works. The losetup and cipher driver do not tell you if you've made a
mistake. You don't find out until you try to access the filesystem (or
whatever is on the device.) That would complicate the job of a brute
force attacker.

&gt; Perhaps there should be a stop script in which the 
&gt; "overwrite ten times" occurs instead/also.

A good, but potentially inconvenient idea. That could make shutdowns
take a lot longer. But if your security is worth it ...

&gt; Is there any *practicable* way to randomize the swap
&gt; file contents before we losetup?

Again, I think this only needs to be done once, so that's practicable.

&gt; Another question: if you run this script and there is
&gt; a swap space already created, your password will go
&gt; into it, so you had better make sure this is the
&gt; first swap on. This would catch either script.

My cron script will take down the swap devices (I will have two) one at
a time. swapoff checks the pages and writes any which are worth keeping
to the other device. When that is finished the device is detached,
reencrypted with a new password, mkswap'ed and reactivated. Then the
process is repeated for the other device.

I don't have that one written yet, but it should be pretty simple (most
of the same stuff I have in rc.local already.)

&gt; Second point; when you have multiple swap spaces are
&gt; the later ones actually getting used or are they just
&gt; cathing overflow? I've not looked closely, but when I

This is configurable by setting the priority. If you don't specify the
priority I think each new swap device has lower priority, which means it
gets started when the previous one is full.

The trick is to specify identical priorities for your swap devices. I
don't know if it matters what number you use. I use "1" for all of mine,
and they are all being used.
    # swapon -s
    Filename                    Type            Size    Used    Priority
    /dev/loop7                  partition       65528   3244    1
    /dev/loop5                  partition       124984  84      1
    /dev/loop6                  partition       64504   3236    1
The loop7 device was the SWAP file and loop6 was the partition in my
original example. At the time of activating those two, swap use in the
other partition was abou 24MB, and when I swapoff'ed it, 5 and 6 each
inherited a little more than 3MB. Then I losetup'ed that partition as
loop5 and activated it. Since then the few new swap pages have been
distributed about equally among all three.

&gt; was having a serious memory leak problem with xplanetbg
&gt; I added swap spaces and it looked very much like thay
&gt; filled sequentially. In other words Rob, can you
&gt; confirm that swapping to your crypto swap space actually
&gt; occured? Did you try to swapoff the noncrypto one?

After making that post I did that, then walked away from the machine. It
hasn't had much demand since then. As you see I have 84KB (21 pages) in
use on the last unencrypted one.

&gt; And last, a not specifically crypto question.... does
&gt; anyone know a way to include a swap *file* in /etc/fstab?

Of course. Simply use the filename in place of the device name. Be sure
that the filesystem it's on is mounted before the "swapon -a" in your
boot sequence.

Note that this only applies to an unencrypted swap file. An encrypted
one would have to be addressed by the name of its loop device.

&gt; (obviously you cannot create a loopback mount in fstab,
&gt; but could do the losetup early in boot and name it in
&gt; fstab)

That's how I'm planning to try it. Actually I think I will disable the
distro's "swapon -a" and put it after my losetup commands in rc.local.

Here's what it looks like for now:
    ### 2001/09/19: encrypted swap devices
    # load the main cryptoapi module
    modprobe cryptoloop
    # swap partitions hda4 hdc2
    for PART in a4 c2
    do
    # loop devices 6 &amp; 7
      for DEV in 6 7
      do
        dd if=/dev/urandom bs=1 count=32 2&gt; /dev/null | \
        uuencode -m - | cut -c8-29 | tail -2 | head -1 | \
        losetup -e blowfish -k128 -p0 /dev/loop$DEV /dev/hd$PART
        mkswap /dev/hd$PART
      done
    done
    # activate swap devices
    swapon -a

We'll see how that does. I haven't tested it yet but it looks like it
should work. :)

Thanks for the reply, Dale.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920104431</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-20 10:44:31-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 20 September 2001 05:08, Rob McGee wrote:
&lt;snip&gt;
&gt; I understand your point, but over time I don't think it will matter,
&gt; because each boot (or running of the cron script) will reinitialise
&gt; the device with a new password.
&gt;
&gt; But since I rarely exceed 40MB or so of swap in use, I should
&gt; probably format my swap partitions (which formerly were unencrypted)
&gt; with output from /dev/random or urandom.

Do you know how long it takes /dev/random to create 40Mbytes of 
entropy?? You don't want to wait a few days to boot, won't you?
Even /dev/urandom will take up to a few minutes for 40M. AND: It will 
deplete your entropy pool! You don't want that.

Also, I don't think it matters much whether the attacker can see which 
blocks have been written to.

The most important problem in encrypting swap is that either
1. the entropy pool isn't filled on bootup.
- -or-
2. the attacker possibly has access to the internal state of the entropy 
pool because the startup-scripts loaded /dev/random with initial data.

The best way is to maybe force a fsck of some (small) partitions 
_before_ swapon to give the entropy pool time to fill. Or use a small 
bonnie seek run. Then you use (this is my command for this)
head -c18 /dev/random | mimencode | losetup &lt;...&gt; -p0 &lt;...&gt;
to initialize the loop device. (the 18 is to get rid of the trailing ==; 
if you use 192 bit keys, you can just say 24).
You are on the absolute save side when using 128 bit keys. This, too, 
will save you entropy.

The idea of regular (every day; 12 h; depending on you usage of swap) 
re-keying is a good one.

Marc
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7qeT33oWD+L2/6DgRAj/GAJ4lBw8hlw4H/8MIrGQKO+1oss7aNwCfXTlW
yBptEPVytD8O/PbaUWmTAZk=
=orec
-----END PGP SIGNATURE-----


o/

_

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920111109</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-09-20 11:11:09-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

On 20 September 2001, Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; wrote:
&gt; Do you know how long it takes /dev/random to create 40Mbytes of 
&gt; entropy?? You don't want to wait a few days to boot, won't you?
&gt; Even /dev/urandom will take up to a few minutes for 40M. AND: It will 
&gt; deplete your entropy pool! You don't want that.

If you want to write pseudo-random data fast you may use one program
thread to create the random data with a PRNG and another thread which
writes the random data to disk at full speed. Have a look at
http://hungrycats.org/~zblaxell/projects/randstream/randstream.html

As for encrypting the swap, I choosed not to use any swap at all.
I have just bought more memory since it is so cheap.

-- 
								Regards,
								Emil
--
The FBI doesn't want to read encrypted documents, they want to read YOUR
encrypted documents.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920124237</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-20 12:42:37-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

Dale Amon wrote:
&gt; I see that Jarl overwrites with zeroes 20 times on startup
&gt; in an attempt to destroy information from the previous
&gt; session; however reboot time would seem a bit late to
&gt; do this. Many machines never power down except for a
&gt; hardware change or kernel update. Even my home workstation
&gt; hasn't been rebooted in 10 days.

My script reads a md5sum of first 40 KB of previously encrypted swap and
uses that as additional entropy for _new_ swap encryption key. 20 overwrites
are there to fade out existing traces of that data so that entropy for _new_
key can not be recovered. Later on in the script, that same 40 KB is
overwritten once more using encrypted "zero" data, and possibly at runtime
with encrypted "swap" data.
 
&gt; Perhaps there should be a stop script in which the
&gt; "overwrite ten times" occurs instead/also.

No need for that. Swap data is encrypted using unknown key.

&gt; Is there any *practicable* way to randomize the swap
&gt; file contents before we losetup?

No need to do that. Only data that gets written to swap needs to be
encrypted. It does not matter if an attacker knows which sectors were
written as long as one is using a strong algorithm.

&gt; Another question: if you run this script and there is
&gt; a swap space already created, your password will go
&gt; into it, so you had better make sure this is the
&gt; first swap on. This would catch either script.

losetup/mount programs lock their RAM so that they cannot be swapped.
Shells, uuencode and other programs do not.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920142032</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-20 14:20:32-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

On Thu, Sep 20, 2001 at 03:42:37PM +0300, Jari Ruusu wrote:
&gt; My script reads a md5sum of first 40 KB of previously encrypted swap and
&gt; uses that as additional entropy for _new_ swap encryption key. 20 overwrites
&gt; are there to fade out existing traces of that data so that entropy for _new_
&gt; key can not be recovered. Later on in the script, that same 40 KB is
&gt; overwritten once more using encrypted "zero" data, and possibly at runtime
&gt; with encrypted "swap" data.
&gt; 

Good point. I missed that. Presumably then, the encryption algorithm 
can be relied on not to give away any information if the entire contents 
are initially the same?

&gt; &gt; Perhaps there should be a stop script in which the
&gt; &gt; "overwrite ten times" occurs instead/also.
&gt; No need for that. Swap data is encrypted using unknown key.

Only depends on your paranoia level. But I'd probably pass on it
myself and agree with you.
 
&gt; No need to do that. Only data that gets written to swap needs to be
&gt; encrypted. It does not matter if an attacker knows which sectors were
&gt; written as long as one is using a strong algorithm.

It's all a matter of how much you give away. Practically you
are right; but a little bit of info here, a little bit there,
and who knows?
 
&gt; losetup/mount programs lock their RAM so that they cannot be swapped.
&gt; Shells, uuencode and other programs do not.

Which says that the output of the set of pipes might show
up in swap memory if swap is enabled at the time this happens.
Again, it's not a likely thing because this will have to happen
before mountall.sh start time, and there would be no swap...

Hmmm. but does previously used memory get zeroed before another
task gets it? If so even the previously pinned traces could 
end up in swap.
 
-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010915210419</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-15 21:04:19-0400</timestampReceived><subject>Re: RFC: increased interest for cryptographic software?</subject><body>

On Sat, Sep 15, 2001 at 09:55:55PM +0200, Herbert Valerio Riedel wrote:
&gt; ...this maybe just coincidence and/or caused by other reasons (maybe some
&gt; well read web referee?)... but it seems that after the US-event of
&gt; 09/11/2001 the accesses went up for 2 prominent cryptographic linux
&gt; packages; are we getting more paranoid?

I guess that depends how you define "paranoid". If paranoia is
unrealistic fear, then no, we're not more paranoid.

The spooks have been saying for a long time that they "need" to be able
to read everyone's e-mail and stored data to make sure we're not
"terrorists". (Terrorist: a person outside the [US] political power
structure who uses violence or threats to achieve political goals. Note
how meaningless this definition is, because the vast majority of
politically-motivated violence is committed by police authorities and
military organizations.)

This event is over 99% likely to strengthen their position. I wouldn't
be surprised to see encryption outlawed (except for gov't-approved and
-crackable systems) in the USA as a result of this. Already I've read
several news accounts which allege that the perpetrators used e-mail
encryption. The prevailing attitude is of blind trust of authorities;
that if you're not doing anything "wrong" you don't have anything to
worry about WRT gov't surveillance.

As you might guess I don't have any trust of authorities. So I don't
consider it paranoid to want to encrypt; it's just prudent. If you don't
protect your data now, soon it will be more difficult -- maybe even
impossible -- to do so.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010915215600</emailId><senderName>Keith Clayton</senderName><senderEmail>keith@claytons.org</senderEmail><timestampReceived>2001-09-15 21:56:00-0400</timestampReceived><subject>Re: RFC: increased interest for cryptographic software?</subject><body>

Maybe just increasingly concerned that our right-wing politicians are
going to attempt to pass laws restricting crypto further and make it
easier to intercept and read/listen to electronic communications.  In
fact US senators have already proposed requiring backdoors in crypto for
law enforcement (senator from NH) as well as allowing for interception
of net traffic without warrant (Senator Feinstein as one of the
authors).

I'd strongly recommend US citizens write their representatives and
express their desire that our elected officials stop, think and don't
respond to this week's events in a knee-jerk fashion.  As the DMCA has
shown, its very difficult to overturn bad legislation once it has
passed.

Its amazing how fast some people will lay aside civil liberties in order
to gain some "perceived" security.  The short-sightedness of our (US)
politicians and the general US public never ceases to amaze me.

Sorry, hope this isn't even further off-topic though it is important
that we try to strike down any pending anti-crypto legislation before it
gains momentum.


Cheers,
Keith

On Sat, 2001-09-15 at 12:55, Herbert Valerio Riedel wrote:
&gt; 
&gt; ...hope this is not too off-topic...
&gt; 
&gt; ...this maybe just coincidence and/or caused by other reasons (maybe some
&gt; well read web referee?)... but it seems that after the US-event of
&gt; 09/11/2001 the accesses went up for 2 prominent cryptographic linux
&gt; packages; are we getting more paranoid?
&gt; 
&gt; see
&gt; 
&gt; loop-aes
&gt; https://sourceforge.net/project/stats/?group_id=28891
&gt; 
&gt; cryptoapi
&gt; https://sourceforge.net/project/stats/?group_id=30957
&gt; 
&gt; ..any ideas?
&gt; 
&gt; regards,
-- 
&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;
Keith Clayton
keith@claytons.org

"If you don't trust me with your source code,
            why should I trust you with my computer?"

GPG key: http://home.pacbell.net/clay-ton/keith_public_key.html         
         http://www.keyserver.net                             
 
GPG fingerprint: 33FF 1D80 4562 1600 4BAB  5018 BCB7 635C B0CC 99EE


[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010918073632</emailId><senderName>Jim Breton</senderName><senderEmail>jamesb-lists@alongtheway.com</senderEmail><timestampReceived>2001-09-18 07:36:32-0400</timestampReceived><subject>Re: RFC: increased interest for cryptographic software?</subject><body>

On Sat, Sep 15, 2001 at 02:56:00PM -0700, Keith Clayton wrote:
&gt; Maybe just increasingly concerned that our right-wing politicians are
&gt; going to attempt to pass laws restricting crypto further and make it
&gt; easier to intercept and read/listen to electronic communications.  In
&gt; fact US senators have already proposed requiring backdoors in crypto for
&gt; law enforcement (senator from NH) as well as allowing for interception
&gt; of net traffic without warrant (Senator Feinstein as one of the
&gt; authors).

Your characterization of it as a "right-wing" affinity is false.

For instance, your example of Dianne Feinstein: she is widely known as a
liberal, left-wing politician.

I'm afraid assholes can exist on both sides.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907165108</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-07 16:51:08-0400</timestampReceived><subject>Re: cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

Rob McGee wrote:
&gt; I'm no cryptographer nor mathematician, but ISTM that having only one
&gt; algorithm potentially helps an attacker, because there's only that one
&gt; to contend with. You can look at the system and see which project is in
&gt; use, and if it's Loop-AES you know with high probability that any large
&gt; incomprehensible file could be an AES loop container. But if its Crypto
&gt; API, you have to consider all the alternatives too. And in the crypto
&gt; world you have to think about the future: algorithms might be cracked,
&gt; computing power might make brute force attacks feasible.

Encryption type is almost always specified in /etc/fstab options, so even
when multiple algorithms are used, an attacker would know the algorithm
anyway. Security comes from keeping the _key_ secret (but you knew that).

&gt; Jari, I personally would be more interested in your project with the
&gt; choice of at least one other algorithm, and if it could coexist with
&gt; the kernel's loop driver.

Loop-AES' loop.o module is a replacement for kernel's loop.o module. It does
everything standard loop driver does, and that includes letting other modules
register new cipher transfer functions. Only AES transfer is pre-registered.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907175946</emailId><senderName>markus</senderName><senderEmail>kingdome@t-online.de</senderEmail><timestampReceived>2001-09-07 17:59:46-0400</timestampReceived><subject>Re: cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

On Friday 07 September 2001 18:51, Jari Ruusu wrote:
&gt; Rob McGee wrote:
&gt; &gt; I'm no cryptographer nor mathematician, but ISTM that having only one
&gt; &gt; algorithm potentially helps an attacker, because there's only that one
&gt; &gt; to contend with. You can look at the system and see which project is in
&gt; &gt; use, and if it's Loop-AES you know with high probability that any large
&gt; &gt; incomprehensible file could be an AES loop container. But if its Crypto
&gt; &gt; API, you have to consider all the alternatives too. And in the crypto
&gt; &gt; world you have to think about the future: algorithms might be cracked,
&gt; &gt; computing power might make brute force attacks feasible.
&gt;
&gt; Encryption type is almost always specified in /etc/fstab options, so even
&gt; when multiple algorithms are used, an attacker would know the algorithm
&gt; anyway. Security comes from keeping the _key_ secret (but you knew that).

Real cryptographical security is when when it isn¬¥t possible to crack even if 
You know the encrytion algortihm (how the safe works) and the cipher text 
(loop file).
So, there is nothing wrong with it - and everything else is just a version of 
hiding information and not part of (the core of) cryptography.

Sincerely,
Markus Beck

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907181722</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-07 18:17:22-0400</timestampReceived><subject>Re: cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

On Fri, 7 Sep 2001, Rob McGee wrote:
&gt; I read what's there about the IV_MODE_SECTOR issue, and I think I
&gt; understand it but am not sure. With this enabled, a loop file will use a
&gt; block size of 512 bytes for the cryptoapi, and a copy of a loop file
&gt; will work no matter what the block size of the media it is on, and of
&gt; the media where it was created. Without it, if you create an encrypted
&gt; loop file on an ext2fs with a 1024 block size, a copy of that file can
&gt; only be mounted if it is on media with an identical block size.

&gt; Is that it? Or is it the block size of the filesystem inside the loop
&gt; file which is significant? See, I am wanting to make some encrypted CD's
&gt; which of course I would prefer to be able to mount directly from the CD.
&gt; And I want them to be accessible in the future, of course, even if I'm
&gt; using ext9fs with 40MB blocks on my 900TB turbo-optic storage device.
&gt; (I'll still want to look at the pictures of my kids from AD 2001, even
&gt; when the CD-ROM format is insignificant and outdated.)

the 512byte IV mode guarantees, that you can create a loop device on a
file or partition which can have any underlying blocksize (as long as it's
a multiple of 512 bytes) and be able to transfer it to any other medium
that has the same or any other blocksize (% 512 == 0 &amp;&amp; &gt; 0) and be able
out-of-the-box to set the encrypted loop up again...

another way to accomplish this kind of portability would be to stack two
loop devices on each other, which would lead to a 1024 byte based IV;
or the loop device could be set to a specific blocksize... each of these
alternative approaches has pros and cons...

Jari's loop-AES uses 512 byte IV calculation as well.

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907195152</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-07 19:51:52-0400</timestampReceived><subject>RE: cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

SGVyYmVydDoNCg0KCUhvdyBkaWZmaWN1bHQgd291bGQgaXQgYmUgdG8gcG9zdCBhIGRvY3VtZW50
IGxpc3RpbmcgYWxsIHRoZSBsaW1pdGF0aW9ucyBhbmQgYWR2YW50YWdlcyBvZiBib3RoIHNvZnR3
YXJlIHBhY2thZ2VzIChJLXBhdGggYW5kIGxvb3AtYWVzKT8gSSB0aGluayBzdWNoIGEgZG9jdW1l
bnQgd291bGQgcHJvdmlkZSBhIGZhaXIgdmlldyB0byBhbGwgdXNlcnMuIEkgZG9uJ3Qga25vdyBh
Ym91dCBvdGhlcnMsIGJ1dCwgSSBhbSBub3Qgc28gdGVjaG5pY2FsIHdpdGggYWxsIHRoZXNlIG90
aGVyIGlzc3Vlcy4gSSBhbSBxdWl0ZSBsb3N0LCBhbmQgc2VlIG5vdGhpbmcgYnV0IHBvc3RzIGV2
ZXJ5IGRheSBhYm91dCBwcm9ibGVtcyBvciBpc3N1ZXMgd2l0aCBib3RoIHNvZnR3YXJlIHBhY2th
Z2VzLg0KDQoJQ2FuIHNvbWVvbmUgcG9zdCBhIGNvbXBsZXRlIGNsYXJpZmljYXRpb24gYXMgdG8g
Ym90aCBzeXN0ZW1zPw0KDQoNClZlcnkgUmVzcGVjdGZ1bGx5LCANCg0KU3R1YXJ0IEJsYWtlIFRl
bmVyLCBJVDMsIFVTTlItUiwgTjNHV0cgDQpCZXZlcmx5IEhpbGxzLCBDYWxpZm9ybmlhDQpWVFUg
MTkwNEcgKFZvbHVudGVlciBUcmFpbmluZyBVbml0KSANCnN0dWFydEBiaDkwMjEwLm5ldCANCndl
c3QgY29hc3Q6ICgzMTApLTM1OC0wMjAyIFAuTy4gQm94IDE2MDQzLCBCZXZlcmx5IEhpbGxzLCBD
QSA5MDIwOS0yMDQzIA0KZWFzdCBjb2FzdDogKDIxNSktMzM4LTYwMDUgUC5PLiBCb3ggNDU4NTks
IFBoaWxhZGVscGhpYSwgUEEgMTkxNDktNTg1OSANCg0KVGVsZWNvcGllcjogKDQxOSktNzE1LTYw
NzMgZmF4IHRvIGVtYWlsIGdhdGV3YXkgdmlhIHd3dy5lZmF4LmNvbSAoaXQncyBmcmVlISkgDQoN
CkpPSU4gVEhFIFVTIE5BVlkgUkVTRVJWRSwgU0VSVkUgWU9VUiBDT1VOVFJZLCBBTkQgQkVORUZJ
VCBGUk9NIElUIEFMTC4gDQoNCkZyaWRheSwgU2VwdGVtYmVyIDA3LCAyMDAxIDEyOjQ5IFBNDQoN
Cg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906090812</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-06 09:08:12-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 06 September 2001 09:10, Herbert Valerio Riedel wrote: 
&lt;snip&gt; 
&gt; ...and that's what the cryptoapi patch tries to accomplish... 
&gt; the loopback module has been separated from the crypto transfer 
&gt; function... 
&gt; 
&gt; the CIPE project wants to make use of the cryptoapi as well; 
&gt; 
&gt; another subsystem; virtual memory encryption, can make use of the 
&gt; cryptoapi as well... 
&gt; 
 
- - encrypted swap, which would be really nice, esp. since it requires no key \
management (you just grab a random number from the kernel's entropy pool on each \
swapon)   
- - make drivers/char/random.c use the kerneli digest routines. 
 
&gt; we really need to unify all those crypto related kernel space 
&gt; projects; otherwise linus surely won't let them go into the kernel 
&gt; (at least I expect this, judging from the past ;-) 
 
ACK. 
 
Marc 
 
- --  
The Commission and Member States are urged to devise appropriate  measures to \
promote, develop and manufacture European encryption  technology and software and \
above all to support projects aimed at  developing user-friendly open-source \
encryption software.  -- EuroParl. Temp. Committee on the ECHELON Interception System \
                http://www.europarl.eu.int/tempcom/echelon/pdf/prechelon_en.pdf   
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7l3V03oWD+L2/6DgRAqI4AJ0XiW0Y4sTgteWyjkpwnNFyJQpoyACg/Ne4
jbmYXrQnX/Y0fGuNsT4tEQE=
=IioW
-----END PGP SIGNATURE-----
i√∏!:√µuA1:174:14:48:02    

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010906115115</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-06 11:51:15-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

Herbert Valerio Riedel wrote:
&gt; just to let you know, what the crypto patch code status is in at the
&gt; moment;

You forgot to mention the "sleeping in the make_request_fn()" bug, which is
a real NO-NO, and can cause a panic().
 
&gt; On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; &gt;       * kernel bloat. This is probably a non-issue. Linus
&gt; &gt;         will at some point go for hooks into the kernel
&gt; &gt;         for encryption support. The API for that will perhaps
&gt; &gt;         be influenced by kerneli but that will not be the
&gt; &gt;         final word. I do suspect it will have great influence
&gt; &gt;         because everyone is using the new util-linux which
&gt; &gt;         supports the new api for loopback encryption types.
&gt; &gt;         In that sense we are already main stream.
&gt; &gt;         (The util-linux support is mainstream debian now)
&gt; btw, I don't see any major kernel bloat;
&gt; the actual implementation does dynamic allocation of cipher modules,
&gt; and uses strings for identification; instead of having to use some magic
&gt; number IDs... (see also the mknod problem and devfs; which can be regarded
&gt; as kernel bloat as well... actually the whole kernel is bloat... why do we
&gt; use at all a virtual machine abstraction layer instead of coding directly
&gt; without any underlying OS?!? ;-)

Crypto-api is the bloat as it is just an unnecessary layer slowing things
down. If someone is unable to do string to magic number conversion in
userspace, it is no excuse to do that in kernel.

&gt; &gt; I'm pretty sure I remember a kernel discussion on some of
&gt; &gt; the issues and there is a desire to have one single crypto
&gt; &gt; API that is available for all purposes, loopback fs or other.
&gt; 
&gt; &gt; While loopAES is very nice for now, and perhaps some of the code
&gt; &gt; will find its' way into the kernel, I don't see that as the
&gt; &gt; likely way things will go for 2.6.x. I'm very sure that a
&gt; &gt; loopback module will not contain its' own crypto. It will share
&gt; &gt; it with other tools and applications. We are not going to see
&gt; &gt; 5 loadable modules providing different services each with its'
&gt; &gt; own implimentation of AES.

Loop-AES kernel patch version (kernel-2.4.diff) exports three fully
re-entrant functions for everyone to use:

void aes_set_key(aes_context *, const unsigned char [], const int, const int);
void aes_encrypt(const aes_context *,const unsigned char [],unsigned char []);
void aes_decrypt(const aes_context *,const unsigned char [],unsigned char []);

&gt; another subsystem; virtual memory encryption, can make use of the
&gt; cryptoapi as well...

There is no need to modify VM. Device backed loop-AES-v1.4d can handle
swapping just fine.

&gt; we really need to unify all those crypto related kernel space projects;
&gt; otherwise linus surely won't let them go into the kernel (at least I
&gt; expect this, judging from the past ;-)

There are places where crypto can't go, but Linux must go. I don't like it,
but I can understand keeping crypto out of mainline kernel.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906115135</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-06 11:51:35-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

Marc Mutz wrote:
&gt; On Thursday 06 September 2001 09:10, Herbert Valerio Riedel wrote:
&gt; &gt; another subsystem; virtual memory encryption, can make use of the
&gt; &gt; cryptoapi as well...
&gt; 
&gt; - - encrypted swap, which would be really nice, esp. since it requires no
&gt; key management (you just grab a random number from the kernel's entropy
&gt; pool on each swapon)

HVR is still playing catch-up as loop-AES-v1.4d does encrypted swap already.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906125139</emailId><senderName>Robert Varga</senderName><senderEmail>nite@hq.alert.sk</senderEmail><timestampReceived>2001-09-06 12:51:39-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Thu, Sep 06, 2001 at 02:51:15PM +0300, Jari Ruusu wrote:
&gt; Herbert Valerio Riedel wrote:
&gt; &gt; just to let you know, what the crypto patch code status is in at the
&gt; &gt; moment;
&gt; 
&gt; You forgot to mention the "sleeping in the make_request_fn()" bug, which is
&gt; a real NO-NO, and can cause a panic().
&gt;  
&gt; &gt; On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; &gt; &gt;       * kernel bloat. This is probably a non-issue. Linus
&gt; &gt; &gt;         will at some point go for hooks into the kernel
&gt; &gt; &gt;         for encryption support. The API for that will perhaps
&gt; &gt; &gt;         be influenced by kerneli but that will not be the
&gt; &gt; &gt;         final word. I do suspect it will have great influence
&gt; &gt; &gt;         because everyone is using the new util-linux which
&gt; &gt; &gt;         supports the new api for loopback encryption types.
&gt; &gt; &gt;         In that sense we are already main stream.
&gt; &gt; &gt;         (The util-linux support is mainstream debian now)
&gt; &gt; btw, I don't see any major kernel bloat;
&gt; &gt; the actual implementation does dynamic allocation of cipher modules,
&gt; &gt; and uses strings for identification; instead of having to use some magic
&gt; &gt; number IDs... (see also the mknod problem and devfs; which can be regarded
&gt; &gt; as kernel bloat as well... actually the whole kernel is bloat... why do we
&gt; &gt; use at all a virtual machine abstraction layer instead of coding directly
&gt; &gt; without any underlying OS?!? ;-)
&gt; 
&gt; Crypto-api is the bloat as it is just an unnecessary layer slowing things
&gt; down. If someone is unable to do string to magic number conversion in
&gt; userspace, it is no excuse to do that in kernel.

A couple questions:
Is encrypted loopback the only place in kernel where encryption can be used?
Is AES the only cipher worthy enough to be used ?
Is it better to have aes_set_key, des_set_key, and probably quite a few others
rather than:

struct crypto_ctx *ctx = crypto_newctx("aes");
crypto_setkey(ctx, "blahblah");
crypto_encrypt(ctx, dest, src, len);
?

Reason why I'm asking this is I'm working on per-file encryption support for
ext2 and I would really hate to limit its users to single encryption algorithm
(and hashing for that matter).

&lt;flame&gt;
Do you think of VFS as "kernel bloat" ?
&lt;/flame&gt;

-- 
Kind regards,
Robert Varga
------------------------------------------------------------------------------
n@hq.sk                                          http://hq.sk/~nite/gpgkey.txt
 

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010906183602</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-06 18:36:02-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

Robert Varga wrote:
&gt; A couple questions:
&gt; Is encrypted loopback the only place in kernel where encryption can be used?

No. But loop driver has a good interface for different ciphers. Crypto-api
for loop devices adds an extra unnecessary layer. Small and fast is
beautiful.

&gt; Is AES the only cipher worthy enough to be used ?

How many ciphers does one need? One good one will fill most peoples' needs.

&gt; Is it better to have aes_set_key, des_set_key, and probably quite a few others
&gt; rather than:
&gt; 
&gt; struct crypto_ctx *ctx = crypto_newctx("aes");
&gt; crypto_setkey(ctx, "blahblah");
&gt; crypto_encrypt(ctx, dest, src, len);
&gt; ?

Above code is AES specific (since you hardcoded the string "aes"), so yes.
:-)

Using low-level functions (aes_set_key(), aes_encrypt(), and aes_decrypt())
directly gives programmer more flexibility over block chaining and
initialization issues. It would be silly to expect crypto_encrypt() to
support all possible weirdo setups. Operation of aes_encrypt() will not
change. Code calling aes_encrypt() may change to adapt to different
situations: running in Linux kernel, userspace, or other operating systems,
whatever.

&gt; &lt;flame&gt;
&gt; Do you think of VFS as "kernel bloat" ?
&gt; &lt;/flame&gt;

No.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906203311</emailId><senderName>"Janusz A. Urbanowicz"</senderName><senderEmail>alex@bofh.torun.pl</senderEmail><timestampReceived>2001-09-06 20:33:11-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jari Ruusu wrote/napisa¬≥[a]/schrieb:
&gt; &gt; Is AES the only cipher worthy enough to be used ?
&gt; 
&gt; How many ciphers does one need? One good one will fill most peoples' needs.

What if tomorrow some cryptographer will publish cheap, practical attack on
AES? This is unlikely but possible.

I'm impressed with your patch and I intent touse it but in this
situation I'm stuck with a weak algorithm. In other crypto applications I
can switch to always-safe and well researched 3DES. In your patch I can't do
this.

&gt; &gt; Is it better to have aes_set_key, des_set_key, and probably quite a few others
&gt; &gt; rather than:
&gt; &gt; 
&gt; &gt; struct crypto_ctx *ctx = crypto_newctx("aes");
&gt; &gt; crypto_setkey(ctx, "blahblah");
&gt; &gt; crypto_encrypt(ctx, dest, src, len);
&gt; &gt; ?
&gt; 
&gt; Above code is AES specific (since you hardcoded the string "aes"), so yes.
&gt; :-)
&gt; 
&gt; Using low-level functions (aes_set_key(), aes_encrypt(), and aes_decrypt())
&gt; directly gives programmer more flexibility over block chaining and
&gt; initialization issues. It would be silly to expect crypto_encrypt() to
&gt; support all possible weirdo setups. Operation of aes_encrypt() will not
&gt; change. Code calling aes_encrypt() may change to adapt to different
&gt; situations: running in Linux kernel, userspace, or other operating systems,
&gt; whatever.

Change of cipher algorithm is not a 'weirdo setup requirement'.

Alex
- -- 
Janusz A. Urbanowicz | ALEX3-RIPE | SF-Framling | Thawte Web Of Trust Notary

Gdy daj√™ biednym chleb, nazywaj¬± mnie ¬∂wi√™tym. Gdy pytam, 
dlaczego biedni nie maj¬± chleba, nazywaj¬± mnie komunist¬±. - abp. Helder Camara
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: Dalsze informacje znajduj¬± si√™ na http://www.gnupg.org/

iEYEARECAAYFAjuX3X8ACgkQTfkBjn4ugD23SwCgs5JO+kubPuR+zcWnUWGRAu+w
3K0An2UDvpT9OzlO4hk3/zqYiJo5ptMG
=07rm
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906203315</emailId><senderName>"Janusz A. Urbanowicz"</senderName><senderEmail>alex@bofh.torun.pl</senderEmail><timestampReceived>2001-09-06 20:33:15-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jari Ruusu wrote/napisa¬≥[a]/schrieb:
&gt; &gt; Is AES the only cipher worthy enough to be used ?
&gt; 
&gt; How many ciphers does one need? One good one will fill most peoples' needs.

What if tomorrow some cryptographer will publish cheap, practical attack on
AES? This is unlikely but possible.

I'm impressed with your patch and I intent touse it but in this
situation I'm stuck with a weak algorithm. In other crypto applications I
can switch to always-safe and well researched 3DES. In your patch I can't do
this.

&gt; &gt; Is it better to have aes_set_key, des_set_key, and probably quite a few others
&gt; &gt; rather than:
&gt; &gt; 
&gt; &gt; struct crypto_ctx *ctx = crypto_newctx("aes");
&gt; &gt; crypto_setkey(ctx, "blahblah");
&gt; &gt; crypto_encrypt(ctx, dest, src, len);
&gt; &gt; ?
&gt; 
&gt; Above code is AES specific (since you hardcoded the string "aes"), so yes.
&gt; :-)
&gt; 
&gt; Using low-level functions (aes_set_key(), aes_encrypt(), and aes_decrypt())
&gt; directly gives programmer more flexibility over block chaining and
&gt; initialization issues. It would be silly to expect crypto_encrypt() to
&gt; support all possible weirdo setups. Operation of aes_encrypt() will not
&gt; change. Code calling aes_encrypt() may change to adapt to different
&gt; situations: running in Linux kernel, userspace, or other operating systems,
&gt; whatever.

Change of cipher algorithm is not a 'weirdo setup requirement'.

Alex
- -- 
Janusz A. Urbanowicz | ALEX3-RIPE | SF-Framling | Thawte Web Of Trust Notary

Gdy daj√™ biednym chleb, nazywaj¬± mnie ¬∂wi√™tym. Gdy pytam, 
dlaczego biedni nie maj¬± chleba, nazywaj¬± mnie komunist¬±. - abp. Helder Camara
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: Dalsze informacje znajduj¬± si√™ na http://www.gnupg.org/

iEYEARECAAYFAjuX3X8ACgkQTfkBjn4ugD23SwCgs5JO+kubPuR+zcWnUWGRAu+w
3K0An2UDvpT9OzlO4hk3/zqYiJo5ptMG
=07rm
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906203440</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-09-06 20:34:40-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Thu, 6 Sep 2001, Jari Ruusu wrote:
&gt; &gt; Is AES the only cipher worthy enough to be used ?
&gt; How many ciphers does one need? One good one will fill most peoples' needs.

Some ciphers are better for certain situations and applications than
others. Also: some ciphers are implemented in hardware, others not (eg
3DES). Better to be open-ended design than closed one.

-Dan

-- 
[-] Omae no subete no kichi wa ore no mono da. [-]


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906222855</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-06 22:28:55-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 06 September 2001 13:51, Jari Ruusu wrote: 
&lt;snip&gt; 
&gt; HVR is still playing catch-up as loop-AES-v1.4d does encrypted swap 
&gt; already. 
&lt;snip&gt; 
 
Jari, you will not make friends with being so bold all the time. You know, as an open \
source developer, your only reward is the respect of the fellow developers and the \
thanks of happy users. Don't sacrifice the former by aggeressively advertizing your \
patch, repeatedly stating that it is so superior. As a matter of fact, instead of \
complaining about the bugs in kerneli, it behoves you to provide patches to fix \
'em...   
Marc 
 
- --  
We have once again come full circle on the same basic question of 
privacy on the Internet. If you have privacy, so does the person 
sending around terrorist documents. And of course, we wouldn't want 
that now, would we? [...] But what if governments, concerned about 
mounting public pressure, decided to label protesters at the next WTO 
roundtable, World Bank meeting, or G-8 summit as terrorists? 
                  -- John Horvath: The Internet: A Terrorist Network? 
                     Telepolis 2001/08/22 (#9350) 
 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7mC953oWD+L2/6DgRAuyTAJ4g0cg/A12h4cQ9KIQmndHy1t3nEwCcC12u
s54kDKD3T24H8VUYOHjkTr0=
=Y7J/
-----END PGP SIGNATURE-----
√ø√ø√ø‚Äö	@ N3A√ñC¬Æ√∏"S‚Ç¨k

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010907050802</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-07 05:08:02-0400</timestampReceived><subject>RE: I-patch problem statement (update)</subject><body>

TXIuIFJ1dXN1Og0KDQoJRm9yZ2l2ZSBtZSBmb3IgYmVpbmcgc28gYmx1bnQsIGJ1dCBkYXJlIEkg
c3RhdGUgd2UgYXJlIG5vdCBkZWFsaW5nIHdpdGgga2VybmVsIGJsb2F0LCBidXQgaW4gZmFjdCAi
ZWdvIGJsb2F0IiBhbmQgImFycm9nYW5jZSBibG9hdCIuDQoNCglPbmNlIGFnYWluLCBJIHdvdWxk
IHRoaW5rIGNhcmVmdWxseSBhYm91dCBhbiBvbGRlIEpld2lzaCBwcm92ZXJiIG15IGZhdGhlciBv
bmNlIHNhaWQsICJQZW9wbGUgd2hvbSBzcGVhayBvdXQgb2YgYm90aCBzaWRlcyBvZiB0aGVpciBt
b3V0aCBvZnRlbiBzdGljayB0aGVpciBmb290IGluIHRoZWlyIG1vdXRoLiBBZnRlciBhbGwsIGhv
dyBkbyB5b3UgdGhpbmsgdGhleSBnZXQgdGhlaXIgbW91dGhzIGJpZyBlbm91Z2ggdG8gdGFsayBv
dXQgYm90aCBzaWRlcz8gVGhleSBzdHJldGNoIGl0IHdoZW4gdGhleSBwdXQgdGhlaXIgZm9vdCBp
biB0aGVpciBtb3V0aCIuIEkgYW0gbm90IHNheWluZyB0aGlzIHByb3ZlcmIgYXBwbGllcyB0byB5
b3UgTXIuIFJ1dXN1LCBidXQgaXQgZG9lcyBzZWVtIHRvIGZpdCB0aGUgc2l0dWF0aW9uLCBkb2Vz
IGl0IG5vdD8NCg0KCVdoYXRldmVyIGhhcyBjYXVzZWQgeW91IHRvIGFmZml4ICJuZWVkIiB0byBw
dWJsaWMgZG9tYWluIEdQTCBzdHlsZSBzb2Z0d2FyZT8gUGVyaGFwcyB5b3UgY2FuIGV4cGxhaW4g
d2h5IHdlIG5lZWQgc3VwcG9ydCBmb3IgdGhlIGkzODYgaW4gTGludXguIElzIGFueW9uZSB1c2lu
ZyBpMzg2IHBsYXRmb3JtIGVuIG1hc3NlIHRvIHN1cHBvcnQgTGludXg/IE9mIGNvdXJzZSBub3Qs
IGJ1dCB3ZSBkbyBpdCBiZWNhdXNlIHdlIGNhbiwgYmVjYXVzZSBvZiBvdXIgYWJpbGl0eSB0byBh
Y2hpZXZlIHN1Y2ggdGVjaG5pY2FsIGV4Y2VsbGVuY2UgZW5hYmxlcyB1cyB0b28gY29udGludWUg
dG8gaW5jcmVhc2UgdGhlIGNhcGFiaWxpdGllcyBvZiBMaW51eCBldmVuIG9uIGFuIGkzODYuIFRo
ZSBlbnRpcmUgTGludXggZGV2ZWxvcG1lbnQgY29yZSAod29ybGR3aWRlKSBhbmQgb3RoZXIgR1BM
IGJhc2VkIHByb2plY3RzLCBhcmUgYWxsIGRvaW5nIHdoYXQgdGhleSBhcmUgZG9pbmcgZm9yIGZ1
biwgYW5kIHRvIGRlbW9uc3RyYXRlIHRoZSB0ZWNobmljYWwgY2FwYWJpbGl0aWVzIG9mIHRoZSBk
ZXZlbG9wZXJzIGFuZCB0aGUgaGFyZHdhcmUgLyBzb2Z0d2FyZSBhcmNoaXRlY3R1cmVzIGVtcGxv
eWVkLiBJIGFtIHN1cmUgc29tZSBvZiB0aGUgcGVvcGxlIGFyZSB3cml0aW5nIGNvZGUgdG8gZW5o
YW5jZSB0aGVpciBvd24gZWdvIGFzIHdlbGwgKHdoYXQgSSByZWZlciB0byBhcyAiZWdvIGJsb2F0
IikuDQoNCkluIHJldHJvc3BlY3QsIHBlcmhhcHMgSSBhbSB3cm9uZy4gcGVyaGFwcyB5b3UgZG9u
J3QgaGF2ZSBlZ28gYmxvYXQuIEluIGZhY3QsIGlmIHlvdSB3ZXJlIGludGVyZXN0ZWQgaW4gc2lt
cGx5IGRldmVsb3BpbmcgYSBwcm9kdWN0IHRvIG91dCBkbyB0aGUgSS1wYXRjaCwgaXQgd291bGQg
bm90IGJlIGRlZmljaWVudCBhbnkgb2YgdGhlIEktcGF0Y2hlcyBjYXBhYmlsaXRpZXMsIG5vdyB3
b3VsZCBpdD8gQ29udmVyc2VseSBwZXJoYXBzIHRoZSByZWFzb24geW91IGFyZSB0b3V0aW5nIHlv
dXIgc29sdXRpb24gc28gc3Ryb25nbHkgaXMgYmVjYXVzZSB5b3Ugd2FudCB0byByZWZvY3VzIHRo
ZSBkZWZpY2llbmN5IGlzc3VlcyBvbiB0aGUgSS1wYXRjaCB3aGVuIGluIGZhY3QgZGVlcCBkb3du
IHlvdSBhcmUgYXdhcmUgaXQgaXMgeW91ciBwcm9kdWN0IHdoaWNoIG1heSBhbHNvIChpbiBjb21w
YXJpc29uIHRvIHRoZSBJLXBhdGNoLCBhIGNvbXBhcmlzb24geW91IGFyZSBjb250aW51aW5nIHRv
IGZvcmNlIHBlb3BsZSB0byBtYWtlIHdpdGggeW91ciBzdGF0ZW1lbnRzKSBpcyBhYnNlbnQgZnVu
Y3Rpb25hbGl0eSB0aGUgSS1wYXRjaCBoYXMuDQoNCglCZXNpZGVzLCBpZiB5b3Ugd2VyZSB0cnVs
eSB0cnlpbmcgdG8gb3V0IGRvIHBlb3BsZSwgeW91IHdvdWxkIGhhdmUgZml4ZWQgdGhlIEktcGF0
Y2ggYSB3aGlsZSBiYWNrLiBJbnN0ZWFkLCB5b3UgbGVhdmUgdXMgdG8gYmVsaWV2ZSB0aGF0IHNv
bWVob3cgeW91ciBzb2Z0d2FyZSBpcyBiZXR0ZXIuIFdoeT8gQmVjYXVzZSBpdCBkb2VzIG5vdCBk
byBhbGwgdGhlIGVuY3J5cHRpb25zLCB0aGUgSS1wYXRjaCBkb2VzLiBTZXZlcmFsIHBlb3BsZSBo
YXZlIGluIGZhY3QgY29tbWVudGVkIGFzIHRvIHRoZSBsYWNrIG9mIGRpdmVyc2l0eSBpbiB0ZXJt
cyBvZiBhbGdvcml0aG1zLCB3aGljaCB5b3VyIHNvbHV0aW9uIGZhaWxzIHRvIHByb3ZpZGUuIE5v
dyB5b3UgYXJlIHdlbGNvbWUgdG8gc2F5LCBJIGRvIG5vdCBjYXJlIHRvIHdyaXRlIHdoYXQgSSBo
YXZlIG5vdCB3cml0dGVuIHRodXMgZmFyLCBidXQgdGhlbiB5b3Ugd2lsbCB1bmRlcnN0YW5kIHdo
eSBwZW9wbGUgYXJlIHVzaW5nIGEgZGlmZmVyZW50IHNvbHV0aW9uIGFzIHdlbGwuIFdoYXQgZG9l
cyB0aGlzIG1lYW4/IEl0IG1lYW5zIHBlb3BsZSwgbWF5IGluIGZhY3QgYmUgZGVzaXJvdXMgb2Yg
aW1wbGVtZW50aW5nIHlvdXIgaWRlYXMgYnV0IGNhbm5vdCwgZHVlIHRvIGxpbWl0YXRpb24uIElm
IGluIGZhY3QgeW91IHdpc2ggdG8gd3JpdGUgY29kZSBpbiBvcmRlciBmb3Igb3RoZXJzIHRvIHVz
ZSBpdCwgYW5kIG5vdCBhcyBhbiBleGVyY2lzZSBpbiBleGVtcGxpZmljYXRpb24sIHlvdSBtdXN0
IGNvbnNpZGVyIHRoZSBjb21tZW50YXJ5IGV4YWN0ZWQgYnkgeW91ciB1c2VyIGJhc2UuDQoNCglQ
ZXJoYXBzIEkgaGF2ZSBhIGNsaWVudCB0aGF0IGhhcyBhIGNvbXBhbnkgcG9saWN5IG9mIHVzaW5n
IHN0cmljdGx5IERFUy4gSSBjYW5ub3QgdXNlIHlvdXIgZHJpdmVyLCBubyBtYXR0ZXIgaG93IHN1
cGVyaW9yIGl0IG1pZ2h0IGJlIGluIGl0cyBkZXNpZ24uIElmIHlvdSBhcmUgZ29pbmcgdG8gY2xh
aW0gdGhhdCB0aGUgSS1wYXRjaCBpcyBzbyBzaWduaWZpY2FudGx5IGRlZmljaWVudCBpbiBpdHMg
Y2FwYWJpbGl0aWVzLCBob3cgYWJvdXQgYXQgbGVhc3QgcHJvdmlkaW5nIHNvZnR3YXJlIHdoaWNo
IGhhcyBubyBsZXNzIHRoZSBhZHZhbnRhZ2VzIG9mIHRoZSBJLXBhdGNoIGJlZm9yZSBtYWtpbmcg
c3VjaCBzdGF0ZW1lbnRzLg0KDQoJV2hpbGUgSSBhZ3JlZSBvbmUgZ29vZCBjaXBoZXIgd2lsbCBm
aXQgbW9zdCBwZW9wbGUncyBuZWVkcywgSSBkaXNhZ3JlZSB0aGF0IHlvdSBvdWdodCB0byBiZSB0
aGUgb25lIHRvIGNob29zZSBpdC4gSW4gdGhpcyB3b3JsZCBvZiBwb3dlcmZ1bCBmcmVlIEdQTCBz
b2Z0d2FyZSwgc2lsbHkgbWUsIEkgcHJlZmVyIHRvIGJlIHRoZSBvbmUgdGhhdCBjaG9vc2UgdGhl
IG9uZSBnb29kIGNpcGhlciB0aGF0IGZpdHMgbXkgbmVlZHMuIFNvLCBhYnNlbnQgeW91ciBzb2Z0
d2FyZSBiZWluZyB1cGRhdGVkIHRvIHByb3ZpZGUgdGhhdCBmbGV4aWJpbGl0eSwgd2hhdCBkbyB5
b3UgcmVjb21tZW5kPyBUaGUgSS1wYXRjaD8gSXQgaXMgaW4gZmFjdCBteSBwb2xpY3kgYXMgYSBj
b25zdWx0YW50LCB0byBhbHdheXMgY29tcGVsIG15IGNsaWVudHMgdG8gZG9uYXRlIHRvIHRoZSBh
dXRob3JzIG9mIEdQTCBzdHlsZSBzb2Z0d2FyZSBpZiBpdCBpcyBiZWluZyB1c2VkIGZvciBjb21t
ZXJjaWFsIHB1cnBvc2VzLCBldmVuIGlmIG5vdCByZXF1ZXN0ZWQuIEkgZG8gbm90IChpbiB0aGUg
aW5zdGFudCkgaGF2ZSBhIGNsaWVudCBmaXR0aW5nIHRoaXMgbW9sZCwgYnV0IGhhZCBjbGllbnRz
IHdpdGggc3VjaCBwb2xpY2llcyBiZWZvcmUgSSBrbmV3IG9mIHlvdXIgc29mdHdhcmUgZXZlbiBl
eGlzdGluZy4NCg0KCU9mIGNvdXJzZSwgdGhlIHRydWUgZWdvIG1hbmlhYyB3b3VsZCBub3QgbWlz
cyBvdXQgb24gc3VjaCBhbiBvcHBvcnR1bml0eSBhcyBpcyBwcmVzZW50ZWQgaGVyZS4gQWZ0ZXIg
YWxsLCB3aGF0IGJldHRlciB3YXkgdG8gcHJvdmUgdGhlIHByb2JsZW1zIHdpdGggdGhlIEktcGF0
Y2ggYnV0IHRvIGZpeCB0aGVtLCBvciB3cml0ZSB5b3VyIG93biBrZXJuZWwgcGF0Y2g/DQoNCkhv
d2V2ZXIsIGlmIGluIGZhY3QgaXQgaXMgeW91ciBvd24gY29nbml0aXZlIGRlZmljaWVuY2llcyAo
SSBhbSBub3Qgc2F5aW5nIGl0IGlzLCBidXQgImlmIGl0IGlzIikgd2hpY2ggcHJldmVudCB5b3Ug
ZnJvbSBoZWxwaW5nIHRvIGltcHJvdmUgdGhlIEktcGF0Y2gsIG9yIGFkZCBjaXBoZXJzIHRvIHlv
dXIgc29mdHdhcmUsIG9yIGV2ZW4gd3JpdGUgeW91ciBvd24ga2VybmVsIHBhdGNoLCB0aGVuIGlu
IGZhY3QgSSBodW1ibHkgYXBvbG9naXplIGZvciBhbGwgSSBoYXZlIHNhaWQsIGFic2VudCB0aGF0
IGZhY3QsIEkgd291bGQgcmVxdWVzdCB0aGF0IHlvdSB0aGluayBhYm91dCB3aGF0IEkgKGFuZCBv
dGhlcnMpIGhhdmUgc2FpZCBhYm91dCB3aGF0IHdlIGFyZSBsb29raW5nIGZvci4gV2hhdCBib2dn
bGVzIHRoZSBtaW5kIChmb3IgbWUpLCBpcyB0aGF0IHNvbWVvbmUgKHlvdSkgd2hvbSBJIHRoaW5r
IGlzIHNvIHZlcnkgaW50ZWxsaWdlbnQsIHNlZW1zIHRvIG1pc3MgdGhlIHBvaW50IGFzIHRvIHdo
YXQgcGVvcGxlIHdhbnQgaW4gYSBMaW51eCBiYXNlZCBjaXBoZXIgc29mdHdhcmUsIHdoaWxlIGlu
c2lzdGluZyB0aGUgZW50aXJlIHRpbWUsIGl0IHVzIHdob20gcmVhbGx5IGFyZSBkZXNpcmluZyB0
aGUgd3JvbmcgdGhpbmcsIG5vdCB5b3Ugd2hvbSBpcyBub3QgcHJvdmlkaW5nIHRoZSBzb2Z0d2Fy
ZSB3ZSB3aXNoIHRvIGhhdmUuIE5vdyBubyBvbmUgaXMgc2F5aW5nIGl0cyB5b3VyIGpvYiBpbiB0
aGUgd29ybGQgdG8gd3JpdGUgdGhlIGJlc3QgZW5jcnlwdGlvbiBzb2Z0d2FyZSBmb3IgTGludXgg
YXMgYSBnaWZ0IHRvIHVzIGFsbCwgYnV0LCBpZiB5b3Ugd2lzaCB0byBwdXJwb3J0IHRoZSBhZHZh
bnRhZ2Ugb2YgeW91cnMgb2YgeW91ciBzb2Z0d2FyZSwgYW5kIEkgdGhpbmsgd2UgYXJlIGFsbCB3
aWxsaW5nIHRvIGNvbnNpZGVyIGl0cyB1c2UgKGV2ZW4gaW4gcmVzcGVjdCBvZiBpdHMgYXV0aG9y
J3MgZWdvIGFuZCBhcnJvZ2FuY2UgYmxvYXQpLCB5b3UgZXhwZWN0IHNvbWUgbGV2ZWwgb2YgcmVx
dWVzdCBmb3IgZmVhdHVyZXMgYW5kIGNvbXBhcmlzb24gYXMgeW91IHNlZW0gdG8gYmUgY29udGlu
dWluZyB0byBmb3JjZSB0aGUgY29tcGFyYXRpdmUgaXNzdWUuDQoNCg0KVmVyeSBSZXNwZWN0ZnVs
bHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVybHkg
SGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQpIA0K
c3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3gg
MTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1KS0z
MzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0KDQpU
ZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVm
YXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZ
T1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KVGh1cnNkYXksIFNlcHRl
bWJlciAwNiwgMjAwMSA2OjEzIFBNDQoNCi0tLS0tT3JpZ2luYWwgTWVzc2FnZS0tLS0tDQpGcm9t
OiBvd25lci1saW51eC1jcnlwdG9AbmwubGludXgub3JnIFttYWlsdG86b3duZXItbGludXgtY3J5
cHRvQG5sLmxpbnV4Lm9yZ11PbiBCZWhhbGYgT2YgSmFyaSBSdXVzdQ0KU2VudDogVGh1cnNkYXks
IFNlcHRlbWJlciAwNiwgMjAwMSAxMTozNiBBTQ0KVG86IFJvYmVydCBWYXJnYQ0KQ2M6IGxpbnV4
LWNyeXB0b0BubC5saW51eC5vcmcNClN1YmplY3Q6IFJlOiBJLXBhdGNoIHByb2JsZW0gc3RhdGVt
ZW50ICh1cGRhdGUpDQoNClJvYmVydCBWYXJnYSB3cm90ZToNCj4gQSBjb3VwbGUgcXVlc3Rpb25z
Og0KPiBJcyBlbmNyeXB0ZWQgbG9vcGJhY2sgdGhlIG9ubHkgcGxhY2UgaW4ga2VybmVsIHdoZXJl
IGVuY3J5cHRpb24gY2FuIGJlIHVzZWQ/DQoNCk5vLiBCdXQgbG9vcCBkcml2ZXIgaGFzIGEgZ29v
ZCBpbnRlcmZhY2UgZm9yIGRpZmZlcmVudCBjaXBoZXJzLiBDcnlwdG8tYXBpDQpmb3IgbG9vcCBk
ZXZpY2VzIGFkZHMgYW4gZXh0cmEgdW5uZWNlc3NhcnkgbGF5ZXIuIFNtYWxsIGFuZCBmYXN0IGlz
DQpiZWF1dGlmdWwuDQoNCj4gSXMgQUVTIHRoZSBvbmx5IGNpcGhlciB3b3J0aHkgZW5vdWdoIHRv
IGJlIHVzZWQgPw0KDQpIb3cgbWFueSBjaXBoZXJzIGRvZXMgb25lIG5lZWQ/IE9uZSBnb29kIG9u
ZSB3aWxsIGZpbGwgbW9zdCBwZW9wbGVzJyBuZWVkcy4NCg0KPiBJcyBpdCBiZXR0ZXIgdG8gaGF2
ZSBhZXNfc2V0X2tleSwgZGVzX3NldF9rZXksIGFuZCBwcm9iYWJseSBxdWl0ZSBhIGZldyBvdGhl
cnMNCj4gcmF0aGVyIHRoYW46DQo+DQo+IHN0cnVjdCBjcnlwdG9fY3R4ICpjdHggPSBjcnlwdG9f
bmV3Y3R4KCJhZXMiKTsNCj4gY3J5cHRvX3NldGtleShjdHgsICJibGFoYmxhaCIpOw0KPiBjcnlw
dG9fZW5jcnlwdChjdHgsIGRlc3QsIHNyYywgbGVuKTsNCj4gPw0KDQpBYm92ZSBjb2RlIGlzIEFF
UyBzcGVjaWZpYyAoc2luY2UgeW91IGhhcmRjb2RlZCB0aGUgc3RyaW5nICJhZXMiKSwgc28geWVz
Lg0KOi0pDQoNClVzaW5nIGxvdy1sZXZlbCBmdW5jdGlvbnMgKGFlc19zZXRfa2V5KCksIGFlc19l
bmNyeXB0KCksIGFuZCBhZXNfZGVjcnlwdCgpKQ0KZGlyZWN0bHkgZ2l2ZXMgcHJvZ3JhbW1lciBt
b3JlIGZsZXhpYmlsaXR5IG92ZXIgYmxvY2sgY2hhaW5pbmcgYW5kDQppbml0aWFsaXphdGlvbiBp
c3N1ZXMuIEl0IHdvdWxkIGJlIHNpbGx5IHRvIGV4cGVjdCBjcnlwdG9fZW5jcnlwdCgpIHRvDQpz
dXBwb3J0IGFsbCBwb3NzaWJsZSB3ZWlyZG8gc2V0dXBzLiBPcGVyYXRpb24gb2YgYWVzX2VuY3J5
cHQoKSB3aWxsIG5vdA0KY2hhbmdlLiBDb2RlIGNhbGxpbmcgYWVzX2VuY3J5cHQoKSBtYXkgY2hh
bmdlIHRvIGFkYXB0IHRvIGRpZmZlcmVudA0Kc2l0dWF0aW9uczogcnVubmluZyBpbiBMaW51eCBr
ZXJuZWwsIHVzZXJzcGFjZSwgb3Igb3RoZXIgb3BlcmF0aW5nIHN5c3RlbXMsDQp3aGF0ZXZlci4N
Cg0KPiA8ZmxhbWU+DQo+IERvIHlvdSB0aGluayBvZiBWRlMgYXMgImtlcm5lbCBibG9hdCIgPw0K
PiA8L2ZsYW1lPg0KDQpOby4NCg0KUmVnYXJkcywNCkphcmkgUnV1c3UgPGphcmkucnV1c3VAcHAu
aW5ldC5maT4NCg0KDQpMaW51eC1jcnlwdG86ICBjcnlwdG9ncmFwaHkgaW4gYW5kIG9uIHRoZSBM
aW51eCBzeXN0ZW0NCkFyY2hpdmU6ICAgICAgIGh0dHA6Ly9tYWlsLm5sLmxpbnV4Lm9yZy9saW51
eC1jcnlwdG8vDQo=


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907081049</emailId><senderName>Robert Varga</senderName><senderEmail>nite@hq.alert.sk</senderEmail><timestampReceived>2001-09-07 08:10:49-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Thu, Sep 06, 2001 at 09:36:02PM +0300, Jari Ruusu wrote:
&gt; Robert Varga wrote:
&gt; &gt; Is AES the only cipher worthy enough to be used ?
&gt; 
&gt; How many ciphers does one need? One good one will fill most peoples' needs.

Let's not get into this ;-( This is a "How many OSes does one need" type of question ;-)
It has been discussed, flamed, grilled, baked and cooked innumerable times.

&gt; &gt; Is it better to have aes_set_key, des_set_key, and probably quite a few others
&gt; &gt; rather than:
&gt; &gt; 
&gt; &gt; struct crypto_ctx *ctx = crypto_newctx("aes");
&gt; &gt; crypto_setkey(ctx, "blahblah");
&gt; &gt; crypto_encrypt(ctx, dest, src, len);
&gt; &gt; ?
&gt; 
&gt; Above code is AES specific (since you hardcoded the string "aes"), so yes.
&gt; :-)

sure :-))) same way I hardcoded the encryption key to "blahblah" ;-)))

&gt; Using low-level functions (aes_set_key(), aes_encrypt(), and aes_decrypt())
&gt; directly gives programmer more flexibility over block chaining and
&gt; initialization issues. It would be silly to expect crypto_encrypt() to
&gt; support all possible weirdo setups. Operation of aes_encrypt() will not

Not all. More than one. And they need not be weird.

&gt; change. Code calling aes_encrypt() may change to adapt to different
&gt; situations: running in Linux kernel, userspace, or other operating systems,
&gt; whatever.
&gt; 
&gt; &gt; &lt;flame&gt;
&gt; &gt; Do you think of VFS as "kernel bloat" ?
&gt; &gt; &lt;/flame&gt;
&gt; 
&gt; No.

So instead of writing cipher-specific code all over the place, wouldn't it be
better to have some kind of crypto-VFS ?

Yes, I know I am moving away rapidly from loopback encryption. It is a nice feature,
but generally not really usable on multi-user machines.

-- 
Kind regards,
Robert Varga
------------------------------------------------------------------------------
n@hq.sk                                          http://hq.sk/~nite/gpgkey.txt
 

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010907133427</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-07 13:34:27-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

[ replying to multiple persons in same email ]

Robert Varga wrote:
&gt; On Thu, Sep 06, 2001 at 09:36:02PM +0300, Jari Ruusu wrote:
&gt; &gt; Above code is AES specific (since you hardcoded the string "aes"), so yes.
&gt; &gt; :-)
&gt; 
&gt; sure :-))) same way I hardcoded the encryption key to "blahblah" ;-)))

Exactly  :-)
 
&gt; So instead of writing cipher-specific code all over the place, wouldn't it be
&gt; better to have some kind of crypto-VFS ?

If the API provided pointers to low-level functions, it might be usable
for all sorts of use, and be fast too. Something like this:

    encrypt_function1 = crypto_get_ecrypt_function("aes", 128, 128);
    encrypt_function2 = crypto_get_ecrypt_function("fish2", 128, 128);
    do {
        (*encrypt_function1)(ctx1, from, to);
        [snip]
        (*encrypt_function2)(ctx2, to, to);
        [snip]
        if(current-&gt;need_resched) schedule();
    } while(--x);

&gt; Yes, I know I am moving away rapidly from loopback encryption. It is a nice feature,
&gt; but generally not really usable on multi-user machines.

Yep. Loop encryption is useful on laptops that are easily lost or stolen.

=======================================

Marc Mutz wrote:
&gt; Jari, you will not make friends with being so bold all the time. You know,
&gt; as an open source developer, your only reward is the respect of the fellow
&gt; developers and the thanks of happy users. Don't sacrifice the former by
&gt; aggeressively advertizing your patch, repeatedly stating that it is so
&gt; superior. As a matter of fact, instead of complaining about the bugs in
&gt; kerneli, it behoves you to provide patches to fix 'em...

When Alexander Kjeldaas was maintaining kerneli patch, he said "no" to my
enhancements. HVR has largely ignored what I send him, so I don't expect him
to act any different now.

HVR is free to merge the fixes from loop-AES if he so wishes.

Marc, as long as you and rest of kerneli/crypto-api clan don't even admit
that loop-AES exists, I reserve the right to "advertise" loop-AES.

=======================================

"Janusz A. Urbanowicz" wrote:
&gt; What if tomorrow some cryptographer will publish cheap, practical attack
&gt; on AES? This is unlikely but possible.

If that happens, loop-twofish is born.

&gt; I'm impressed with your patch and I intent touse it but in this
&gt; situation I'm stuck with a weak algorithm. In other crypto applications I
&gt; can switch to always-safe and well researched 3DES. In your patch I can't do
&gt; this.

In previous life, loop-AES used to be loop-TripleDES for years. There was
nothing wrong with that, except that is was slow. loop-TripleDES was not
publically available. I made loop-AES publically available after I swithed
the cipher from 3DES to AES.

&gt; Change of cipher algorithm is not a 'weirdo setup requirement'.

By weirdo I meant unusual initialization and block chaining stuff.

=======================================

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Forgive me for being so blunt, but dare I state we are not dealing with
&gt; kernel bloat, but in fact "ego bloat" and "arrogance bloat".

Opinions vary.

&gt; Conversely perhaps the reason you are touting your solution so strongly is
&gt; because you want to refocus the deficiency issues on the I-patch when in
&gt; fact deep down you are aware it is your product which may also (in
&gt; comparison to the I-patch, a comparison you are continuing to force people
&gt; to make with your statements) is absent functionality the I-patch has.

What? Are you asking me NOT to make loop bugs public?

The "absent functionality" of loop-AES is unnecessary bloat that I don't
want in loop-AES. Loop-AES is small by desing, and that means less bugs and
less code to audit.

&gt; Besides, if you were truly trying to out do people, you would have fixed
&gt; the I-patch a while back.

I do not maintain i-patch or HVR crypto-api. I maintain loop-AES. What is
wrong with little competition? At least then people have a choice.

&gt; While I agree one good cipher will fit most people's needs, I disagree
&gt; that you ought to be the one to choose it.

I am not forcing anyone to use loop-AES.

&gt; However, if in fact it is your own cognitive deficiencies (I am not saying
&gt; it is, but "if it is") which prevent you from helping to improve the
&gt; I-patch, or add ciphers to your software, or even write your own kernel
&gt; patch, then in fact I humbly apologize for all I have said, absent that
&gt; fact, I would request that you think about what I (and others) have said
&gt; about what we are looking for.

As I said before, I do not maintain i-patch or HVR crypto-api.

Kernel patch version of loop-AES, -p option for losetup/mount, encrypted
swap were _all_ requested by loop-AES users. I added them because they were
requested and made a lot of sense.

You, Stuart, have requested me to add some shitty Winblows support, and I
have replied that I won't do that. That does not count as "cognitive
deficiency".

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907150953</emailId><senderName>"Janusz A. Urbanowicz"</senderName><senderEmail>alex@bofh.torun.pl</senderEmail><timestampReceived>2001-09-07 15:09:53-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

Jari Ruusu wrote/napisa¬≥[a]/schrieb:
&gt; "Janusz A. Urbanowicz" wrote:
&gt; &gt; What if tomorrow some cryptographer will publish cheap, practical attack
&gt; &gt; on AES? This is unlikely but possible.
&gt; 
&gt; If that happens, loop-twofish is born.

And all users are forced to repatch, recompile, reboot and repent. This is
broken. Algorithm-switch should be possible without such severe system
modification (yes, patching kernel and rebooting may be a problem on
RL productivity servers).

&gt; &gt; I'm impressed with your patch and I intent touse it but in this
&gt; &gt; situation I'm stuck with a weak algorithm. In other crypto applications I
&gt; &gt; can switch to always-safe and well researched 3DES. In your patch I can't do
&gt; &gt; this.
&gt; 
&gt; In previous life, loop-AES used to be loop-TripleDES for years. There was
&gt; nothing wrong with that, except that is was slow. loop-TripleDES was not
&gt; publically available. I made loop-AES publically available after I swithed
&gt; the cipher from 3DES to AES.

Oh, sure. And I have want to use, and have a license for IDEA[1]? Or
blowfish? Or CAST? I do not ask you to include these ciphers. I only say
that it is a very bad idea to hardcode one algorithm you personally think is
best.

[1] I don't need it - here you can't patent algorithms.
-- 
Janusz A. Urbanowicz | ALEX3-RIPE | SF-Framling | Thawte Web Of Trust Notary

Gdy daj√™ biednym chleb, nazywaj¬± mnie ¬∂wi√™tym. Gdy pytam, 
dlaczego biedni nie maj¬± chleba, nazywaj¬± mnie komunist¬±. - abp. Helder Camara

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907165148</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-07 16:51:48-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

"Janusz A. Urbanowicz" wrote:
&gt; Jari Ruusu wrote/napisa¬≥[a]/schrieb:
&gt; &gt; "Janusz A. Urbanowicz" wrote:
&gt; &gt; &gt; What if tomorrow some cryptographer will publish cheap, practical attack
&gt; &gt; &gt; on AES? This is unlikely but possible.
&gt; &gt;
&gt; &gt; If that happens, loop-twofish is born.
&gt; 
&gt; And all users are forced to repatch, recompile, reboot and repent. This is
&gt; broken. Algorithm-switch should be possible without such severe system
&gt; modification (yes, patching kernel and rebooting may be a problem on
&gt; RL productivity servers).

[snip]

&gt; Oh, sure. And I have want to use, and have a license for IDEA[1]? Or
&gt; blowfish? Or CAST? I do not ask you to include these ciphers. I only say
&gt; that it is a very bad idea to hardcode one algorithm you personally think is
&gt; best.

Nothing prevents you from using other cipher modules with loop-AES. Only the
AES transfer is built-in and pre-registered.
 
Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907180657</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-07 18:06:57-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>


[stripped down CC list]

On Fri, 7 Sep 2001, Jari Ruusu wrote:
&gt;&gt; So instead of writing cipher-specific code all over the place, wouldn't it be
&gt;&gt; better to have some kind of crypto-VFS ?
&gt; If the API provided pointers to low-level functions, it might be usable
&gt; for all sorts of use, and be fast too. Something like this:
&gt;
&gt;     encrypt_function1 = crypto_get_ecrypt_function("aes", 128, 128);
&gt;     encrypt_function2 = crypto_get_ecrypt_function("fish2", 128, 128);
&gt;     do {
&gt;         (*encrypt_function1)(ctx1, from, to);
&gt;         [snip]
&gt;         (*encrypt_function2)(ctx2, to, to);
&gt;         [snip]
&gt;         if(current-&gt;need_resched) schedule();
&gt;     } while(--x);

if you look close enough, the cryptoapi already provides you with pointers
to low-level encryption functions; and it provides also pointers to
possibly optimized versions of the common ECB and CBC schemes... but keep
in mind, the the cryptoapi is not yet finished completely, some features
need a bit of polishing...

anyway, as I notice you propose a function like
crypto_get_ecrypt_function(), which implies that you seem to promote a
identification of cipher algos by string, and the use of a cipher
context... doesn't sound much different than what the crypto api does :-)

I'm trying to bring the crypto API closer to what might be convenient for
programmers; that's why some months ago I tried to gather some
wishes/requirements for a re-design (if needed at all)...

&gt; =======================================

&gt; When Alexander Kjeldaas was maintaining kerneli patch, he said "no" to my
&gt; enhancements. HVR has largely ignored what I send him, so I don't expect him
&gt; to act any different now.
you haven't send me any patches/enhancements as far as I know; and the
criticism you sent me about the cryptoapi hasn't been ignored;
I've fixed most of the problems you mentioned in the past;

ok, I ignored actually one thing; namely your request/recommendation to
let cryptoapi die...

&gt; HVR is free to merge the fixes from loop-AES if he so wishes.
thanks :-)

&gt; Marc, as long as you and rest of kerneli/crypto-api clan don't even admit
&gt; that loop-AES exists, I reserve the right to "advertise" loop-AES.
I didn't know anyone here would ignore the existence of loop-AES...
actually judging from the recent mailing list traffic the opposite seems
to be the case ;-)

btw, I've never told anyone not to use your patch, nor that it was crap or
anything like that... on the contrary, there's even a link on
http://cryptoapi.sourceforge.net/ linking to your project...

&gt; =======================================

&gt; What? Are you asking me NOT to make loop bugs public?
he surely is not... maybe he's just trying to tell you not print t-shirts
having the bugs listed and running around with them... ;-)

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907212024</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-07 21:20:24-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 07 September 2001 20:06, Herbert Valerio Riedel wrote: 
&lt;snip&gt; 
&gt; &gt; Marc, as long as you and rest of kerneli/crypto-api clan don't even 
&gt; &gt; admit that loop-AES exists, I reserve the right to "advertise" 
&gt; &gt; loop-AES. 
&gt; 
&gt; I didn't know anyone here would ignore the existence of loop-AES... 
&gt; actually judging from the recent mailing list traffic the opposite 
&gt; seems to be the case ;-) 
&gt; 
&gt; btw, I've never told anyone not to use your patch, nor that it was 
&gt; crap or anything like that... on the contrary, there's even a link on 
&gt; http://cryptoapi.sourceforge.net/ linking to your project... 
&lt;snip&gt; 
 
I can only guess that this refers to the Encryption-HOWTO. If that's the case, plase, \
Jari, have a look at the last date of the last release, then look at what I'm doing \
now (Kmail) and feel free to send a patch with text for loop-AES to me.   
Marc 
 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7mXJs3oWD+L2/6DgRAi2UAKCDCDUeTzE5+uRL1rTZuvQN6h+i1wCgnkVQ
hZcBz0HcDS629ja5AaT29MA=
=HBbO
-----END PGP SIGNATURE-----

@@@0haC¬∏TuA	@

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010910141832</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-10 14:18:32-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Thu, Sep 06, 2001 at 09:10:43AM +0200, Herbert Valerio Riedel wrote:
&gt; 
&gt; just to let you know, what the crypto patch code status is in at the
&gt; moment;
&gt; 
&gt; &gt; 	* BUG: block size problem
&gt; fixed, if you enable the 512-byte IV option
&gt; (btw, I've seen the latest recent kernels added the blocksize set/get

Have you been following the discussion between Linus, HPA and
others on changes to the way virtual/physical blocks are being
handled? It might have a positive impact on us by means of
making the whole low level VFS services cleaner and faster.

&gt; ioctl's... just as a sidenote...)
&gt; &gt; 	* kernel bloat. This is probably a non-issue. Linus
&gt; btw, I don't see any major kernel bloat;

Neither did I, I was just passing along complaints aired by
others.

&gt; &gt; I'm pretty sure I remember a kernel discussion on some of
&gt; &gt; the issues and there is a desire to have one single crypto
&gt; &gt; API that is available for all purposes, loopback fs or other.
&gt; 
&gt; we really need to unify all those crypto related kernel space projects;
&gt; otherwise linus surely won't let them go into the kernel (at least I
&gt; expect this, judging from the past ;-)
&gt; 

Note that the security people are doing something similar and
unifying behind the LIDS patches. Even SELINUX has been 
rewritten to work as a module that uses them, as are some of 
the other projects.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010910143644</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-10 14:36:44-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Fri, Sep 07, 2001 at 10:10:49AM +0200, Robert Varga wrote:
&gt; &gt; How many ciphers does one need? One good one will fill most peoples' needs.
&gt; 
&gt; Let's not get into this ;-( This is a "How many OSes does one need" type of question ;-)
&gt; It has been discussed, flamed, grilled, baked and cooked innumerable times.

Indeed. I will be the one to decide which cipher is used on which project and
have little interest in having the choice made for me.
 
&gt; So instead of writing cipher-specific code all over the place, wouldn't it be
&gt; better to have some kind of crypto-VFS ?
&gt; 

I think there will be something more general than that
required. We have user space encryption proliferating
across the board and there is no earthly way any of us
can certify all of them as being properly implimented.

I would much rather have one or more very well beaten
on modules that supply encryption services to all the
security services. Note that we need encryption in
IPv6 too; and for FreeSWAN, and for MIT's SFS, and
for ssh, and for PAM, and for who knows what else...

It's not *just* a file system issue.

I'd propose that we want a kernel module somewhat
like ALSO or the like into which one just plugs in
whatever algorithm one wants in their kernel and
which makes those available as a service to whatever
tools need them.

This also allows for hardware level encryption to be
handled transparently by hardware and the service
made available to all possible users of that service.

We've become way too focused on just the issue of
crypto file systems. That is indeed an important
issue, but it is only one corner of the crypto services
domain.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010905091529</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-05 09:15:29-0400</timestampReceived><subject>RE: announce; monolithic versions of the cryptoapi branch!</subject><body>

TXIuIFJpZWRlbDoNCg0KCVBlcmhhcHMgd2UgY291bGQgaGF2ZSBhbiB1cGRhdGUgdG8gdGhlIGxp
c3QgYXMgdG8gd2hhdCB0aGUgc3RhdHVzIG9mIGJ1Z3MgYW5kIGZlYXR1cmVzIGFyZSBpbiB0aGUg
Y3VycmVudCByZWxlYXNlPyBJIHdvdWxkIGxvdmUgdG8gc2VlbSBzb21lIGRlZmluaXRpdmUgZG9j
dW1lbnRhdGlvbiBhcyB0byB3aGF0IGlzIGluIHByb2dyZXNzLCB3aGF0IHRoZSBwYXRjaCBpcyBp
bmNsdXNpdmUgb2YsIGV0Yy4NCg0KCUlzIHRoaXMgYSBwb3NzaWJpbGl0eT8NCg0KCVdpdGggYWxs
IHRoZSBkaXNjdXNzaW9uIG9mIHBhdGNoZXMgYW5kIHdvcmtpbmcgdnMuIG5vdCB3b3JraW5nLCBt
b25vbGl0aGljLCBldGMuLCBJIGFtIGxlYW5pbmcgbW9yZSBhbmQgbW9yZSB0b3dhcmRzIGp1c3Qg
dXNpbmcgSmFyaSdzIGNvZGUuIEl0IGRvZXMgc2VlbSBhIGJpdCBlYXNpZXIgdG8gZGVhbCB3aXRo
IGdpdmVuIHNvIG1hbnkgb2YgdGhlIGtlcm5lbCBpc3N1ZXMuDQoNCglJIHdvdWxkIGVuam95IHNl
ZWluZyBhIHByb2plY3Qgc3RhdHVzIChpbiBmdWxsKSBwcmlvciB0byBtYWtpbmcgdGhhdCBkZWNp
c2lvbi4NCg0KDQpWZXJ5IFJlc3BlY3RmdWxseSwgDQoNClN0dWFydCBCbGFrZSBUZW5lciwgSVQz
LCBVU05SLVIsIE4zR1dHIA0KQmV2ZXJseSBIaWxscywgQ2FsaWZvcm5pYQ0KVlRVIDE5MDRHIChW
b2x1bnRlZXIgVHJhaW5pbmcgVW5pdCkgDQpzdHVhcnRAYmg5MDIxMC5uZXQgDQp3ZXN0IGNvYXN0
OiAoMzEwKS0zNTgtMDIwMiBQLk8uIEJveCAxNjA0MywgQmV2ZXJseSBIaWxscywgQ0EgOTAyMDkt
MjA0MyANCmVhc3QgY29hc3Q6ICgyMTUpLTMzOC02MDA1IFAuTy4gQm94IDQ1ODU5LCBQaGlsYWRl
bHBoaWEsIFBBIDE5MTQ5LTU4NTkgDQoNClRlbGVjb3BpZXI6ICg0MTkpLTcxNS02MDczIGZheCB0
byBlbWFpbCBnYXRld2F5IHZpYSB3d3cuZWZheC5jb20gKGl0J3MgZnJlZSEpIA0KDQpKT0lOIFRI
RSBVUyBOQVZZIFJFU0VSVkUsIFNFUlZFIFlPVVIgQ09VTlRSWSwgQU5EIEJFTkVGSVQgRlJPTSBJ
VCBBTEwuIA0KDQpXZWRuZXNkYXksIFNlcHRlbWJlciAwNSwgMjAwMSAyOjExIEFNDQoNCiAtLS0t
LU9yaWdpbmFsIE1lc3NhZ2UtLS0tLQ0KRnJvbTogCW93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51
eC5vcmcgW21haWx0bzpvd25lci1saW51eC1jcnlwdG9AbmwubGludXgub3JnXSAgT24gQmVoYWxm
IE9mIEhlcmJlcnQgVmFsZXJpbyBSaWVkZWwNClNlbnQ6CVR1ZXNkYXksIFNlcHRlbWJlciAwNCwg
MjAwMSAyOjMxIEFNDQpUbzoJbGludXgtY3J5cHRvQG5sLmxpbnV4Lm9yZw0KU3ViamVjdDoJYW5u
b3VuY2U7IG1vbm9saXRoaWMgdmVyc2lvbnMgb2YgdGhlIGNyeXB0b2FwaSBicmFuY2ghDQoNCg0K
U2luY2UgaGF2aW5nIGtlcm5lbCBtb2R1bGVzIGlzIG5vdCBhbHdheXMgYSBnb29kIGlkZWEsIEkn
dmUgc3RhcnRlZCB0byBwdXQNCnRvZ2V0aGVyIGEgaGFuZG1hZGUga2VybmVsIHBhdGNoLi4uDQoN
CmluIGZ0cDovL2Z0cC5rZXJuZWwub3JnL3B1Yi9saW51eC9rZXJuZWwvcGVvcGxlL2h2ci8geW91
J2xsIGZpbmQNCg0KIGNyeXB0b2FwaS0yLjQuMTAtcHJlNC14ZnMuZGlmZi5iejIvZ3oNCg0Kd2hp
Y2ggaXMgdGFrZW4gYWdhaW5zdCB0aGUgU0dJL1hGUyBlbmhhbmNlZCAyLjQuMTAtcHJlNCBrZXJu
ZWwgdmVyc2lvbjsNCmFuZA0KDQogY3J5cHRvYXBpLTIuNC44LmRpZmYuYnoyL2d6DQoNCndoaWNo
IGhhcyBiZWVuIGRpZmYnZWQgYWdhaW5zdCBhIHBsYWluIDIuNC44IChpdCBzaG91bGQgYXBwbHkg
d2l0aCBtaW5vcg0KcHJvYmxlbXMgYWdhaW5zdCBsYXRlciBrZXJuZWwgdmVyc2lvbnMgYXMgd2Vs
bCkNCg0KSSBoYXZlbid0IGRvbmUgbXVjaCB0ZXN0aW5nIHlldCB3aXRoIHRob3NlIHBhdGNoIHZl
cnNpb25zIG9mIHRoZSBjcnlwdG9hcGkNCmJyYW5jaCwgYnV0IEkgZG9uJ3QgZXhwZWN0IGFueSBt
YWpvciBwcm9ibGVtcyBhcyB0aGUgY29kZSBpdHNlbGYgaXMgdGhlDQpzYW1lIGFzIHRoZSBjcnlw
dG9hcGkgbW9kdWxlIHZlcnNpb25zOyAoZWl0aGVyIGl0IHdvcmtzIGZyb20gdGhlDQpiZWdpbm5p
bmcsIG9yIG1heWJlIHlvdSdsbCBnZXQgYSBrZXJuZWwgcGFuaWMgd2hlbiBib290aW5nIG9yIHNl
dHRpbmcgdXANCnRoZSBjcnlwdG9kZXZpY2UuLi4pOyBJZiB5b3UgZ290IHNjYXJlZCBieSB0aGlz
IHN0YXRlbWVudCwgdGhlbiBqdXN0IGRvbid0DQphcHBseSB0aGlzIHBhdGNoIDotKQ0KDQpJZiB5
b3UgZXhwZXJpZW5jZSBhbnkgcHJvYmxlbXMsIHBsZWFzZSByZXBvcnQgdGhlbSBzbyBJIGNhbiBm
aXggdGhlbS4uLiA6LSkNCg0KcHM6IHRoZXJlJ3MgYWxzbyBhIG5ldyB1dGlsLWxpbnV4LTIuMTFp
LnBhdGNoIGluIHRoYXQgZGlyZWN0b3J5LCB3aGljaA0KaW5jbHVkZXMgc29tZSBjb250cmlidXRl
ZCBmaXhlcy9pbXByb3ZlbWVudHMsIHJlZ2FyZGluZyB0aGUga2V5Yml0cw0Kb3B0aW9uIHBhc3Np
bmcgZm9yIG1vdW50KDgpDQoNCnJlZ2FyZHMsDQotLSANCkhlcmJlcnQgVmFsZXJpbyBSaWVkZWwg
ICAgICAgLyAgICBQaG9uZTogKEVVUk9QRSkgKzQzLTEtNTg4MDEtMTg4NDANCkVtYWlsOiBodnJA
aHZybGFiLm9yZyAgICAgICAvICAgIEZpbmdlciBodnJAZ251Lm9yZyBmb3IgR251UEcgUHVibGlj
IEtleQ0KR251UEcgS2V5IEZpbmdlcnByaW50OiA3QkI5IDJENkMgRDQ4NSBDRTY0IDQ3NDggIDVG
NjUgNDk4MSBFMDY0IDg4M0YgNDE0Mg0KDQoNCkxpbnV4LWNyeXB0bzogIGNyeXB0b2dyYXBoeSBp
biBhbmQgb24gdGhlIExpbnV4IHN5c3RlbQ0KQXJjaGl2ZTogICAgICAgaHR0cDovL21haWwubmwu
bGludXgub3JnL2xpbnV4LWNyeXB0by8NCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906031119</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-06 03:11:19-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

    Okay, I took a virgin 2.4.9 source tree and applied the 2.4.10pre4
patch to it. Then I applied the cryptoapi-2.4.10-pre4-xfs.diff patch to
that, and, after configuring (this time will all the crypto stuff in the
kernel rather than modules, and "yes" to all of them except DES), and
compiled, booted -- seems to work okay, except I find no mention of
crypto in /var/log/messages from the boot like there was before.  I also
installed util-linux-2.11i.
      Anyway, so, since obviously we don't have to modprobe cryptoloop,
I just try  "losetup -e blowfish (or twofish, or aes, or whatever)
/dev/loop0 /my file". For each of them, I get a "Unsupported encryption
type blowfish " or whatever I try to use.  Hmm. Doing a man losetup, I
see it still only lists the same 3 crappy old dinosaurs, so, what the
heck -- I try des, even tho I didn't even put that in as a module. That
gets accepted, then it asks for my password and I give it one, then it
says "Init (up to 16 hex digits):" and I'm not sure what to put in
there. What is this?
    But obviously something is not working -- why is des accepted and
nothing else? The FAQ says that I need a new losetup, but I've got the
latest one. To be sure, I go to RedHat and download their latest losetup
rpm which is 2.11b and install that -- same thing.


--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010906064547</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-06 06:45:47-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>


1.) I hope you also fixed some minor rejects you may have gotten in the
    top-level Makefile (that's a nasty difference between the -XFS branch
    and the plain linux kernel) otherwise the crypto/crypto.o might not
    get linked into the kernel image, and then you won't see any message
    regarding crypto initialization in dmesg(8)

    for non-XFS kernels I provided the patch against 2.4.8 which may apply
    to 2.4.9 and later as well... guess I'll have to re-diff against some
    newer kernel in order to avoid confusion... ;-)

2.) you need to patch your util-linux-2.11i with the patch contained in
    the same directory, where you got the crypto patch from... maybe one
    should make ready to use rpms of the patched util-linux stuff... even
    if IMHO you shouldn't trust binaries you didn't compile yourself.....

On Wed, 5 Sep 2001, Harmon Seaver wrote:

&gt;     Okay, I took a virgin 2.4.9 source tree and applied the 2.4.10pre4
&gt; patch to it. Then I applied the cryptoapi-2.4.10-pre4-xfs.diff patch to
&gt; that, and, after configuring (this time will all the crypto stuff in the
&gt; kernel rather than modules, and "yes" to all of them except DES), and
&gt; compiled, booted -- seems to work okay, except I find no mention of
&gt; crypto in /var/log/messages from the boot like there was before.  I also
&gt; installed util-linux-2.11i.
&gt;       Anyway, so, since obviously we don't have to modprobe cryptoloop,
&gt; I just try  "losetup -e blowfish (or twofish, or aes, or whatever)
&gt; /dev/loop0 /my file". For each of them, I get a "Unsupported encryption
&gt; type blowfish " or whatever I try to use.  Hmm. Doing a man losetup, I
&gt; see it still only lists the same 3 crappy old dinosaurs, so, what the
&gt; heck -- I try des, even tho I didn't even put that in as a module. That
&gt; gets accepted, then it asks for my password and I give it one, then it
&gt; says "Init (up to 16 hex digits):" and I'm not sure what to put in
&gt; there. What is this?
&gt;     But obviously something is not working -- why is des accepted and
&gt; nothing else? The FAQ says that I need a new losetup, but I've got the
&gt; latest one. To be sure, I go to RedHat and download their latest losetup
&gt; rpm which is 2.11b and install that -- same thing.

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907031847</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-07 03:18:47-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

      Okay, got the makefile fixed (I think) and it compiles and boots
and loads all the crypto at boot like it should. I also chose the IV
mode sector, although now I'm not sure that was a good idea.  Also
patched util-linux and now losetup can work with all the cyphers. Still
seems to be some problems, however. I did a test run with just the
examples on the losetup man page:

&gt;               dd if=/dev/zero of=/file bs=1k count=100
&gt;               losetup -e blowfish /dev/loop0 /file
&gt;               Password :
&gt;               mkfs -t ext2 /dev/loop0 100
&gt;
&gt;                 mount -t ext2 /dev/loop0 /mnt
&gt;

   except I used aes and chose a 128 bit key. Mounted it okay and could
read and write to it. Unmounted it and tried to mkreiserfs on it, but
reiser said it was too small and that wouldn't work.
        So then I did a losetup -d on it and started over, this time
with a bs=100K count=512, but now I get a kernel error like someone else
had mentioned a bit a go,

&gt; Sep  6 14:22:18 cybershamanix kernel: Unable to handle kernel NULL pointer deref
&gt; erence at virtual address 00000000
&gt; Sep  6 14:22:18 cybershamanix kernel:  printing eip:
&gt; Sep  6 14:22:18 cybershamanix kernel: c027aa97
&gt; Sep  6 14:22:18 cybershamanix kernel: *pde = 00000000
&gt; Sep  6 14:22:18 cybershamanix kernel: Oops: 0000
&gt; Sep  6 14:22:18 cybershamanix kernel: CPU:    0
&gt; Sep  6 14:22:18 cybershamanix kernel: EIP:    0010:[blowfish_set_key+231/432]
&gt; Sep  6 14:22:18 cybershamanix kernel: EFLAGS: 00010282
&gt; Sep  6 14:22:18 cybershamanix kernel: eax: 00000000   ebx: 00000004   ecx: 9b878
&gt; 3a8   edx: 00000000
&gt; Sep  6 14:22:18 cybershamanix kernel: esi: 00000000   edi: 00000011   ebp: c5f69
&gt; f2c   esp: c5f69df0
&gt; Sep  6 14:22:18 cybershamanix kernel: ds: 0018   es: 0018   ss: 0018
&gt; Sep  6 14:22:18 cybershamanix kernel: Process losetup (pid: 2428, stackpage=c5f6
&gt; 9000)
&gt; Sep  6 14:22:18 cybershamanix kernel: Stack: c5f86a1c 00000000 c0107020 c5f86014
&gt;  c5f8605c c5f86014 c0309820 c5f86a1c
&gt; Sep  6 14:22:19 cybershamanix kernel:        c0309820 c5f69ef9 c5f86000 c5f69ecc
&gt;  c0275cf6 c5f86000 c5f69f2c 00000020
&gt; Sep  6 14:22:19 cybershamanix kernel:        00000000 c0275ee7 c5f86000 c5f69f2c
&gt;  00000020 c5f86000 00000000 fffffff4
&gt; Sep  6 14:22:19 cybershamanix kernel: Call Trace: [ret_from_intr+0/7] [default_s
&gt; et_key+22/32] [cryptoapi_status+151/208] [loop_init_xfer+40/80] [loop_set_status
&gt; +233/448]
&gt; Sep  6 14:22:19 cybershamanix kernel:    [lo_ioctl+440/448] [blkdev_ioctl+38/64]
&gt;  [sys_ioctl+115/416] [system_call+51/64]
&gt; Sep  6 14:22:19 cybershamanix kernel:
&gt; Sep  6 14:22:19 cybershamanix kernel: Code: 8b 04 96 31 c8 89 04 96 89 da 89 d0
&gt; 8b 4d d8 c1 fa 1f 41 f7
&gt;
and, if I try to run losetup of any kind, even losetup -d on the loop0,
or on a loop1 instead, that term session locks up. I can't even kill the
old losetup job from another term session, have to reboot to get rid of
them.
      So, is my klutziness in setting it up or the IV, or what?



--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907042613</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-07 04:26:13-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

     Hmm, to follow up on my previous post, it seems that the problem is
not
when I tried using aes as I thought, that was the one that worked
originally,
and after that I had tried blowfish -- and it is blowfish that blows it.
I just
created two different loop devices with aes and everything went fine, at
least
with the 128 bit key. Made one of 3000k and was able to create a
reiserfs file
system on that and mount it okay.


--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907155914</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-07 15:59:14-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

       Interestingly, even tho the losetup man page says that twofish is
broken, I was able to create a loop device with twofish and mount it
okay. So far I've tried aes, serpent, and twofish with success, but
blowfish is definitely broken.
       Any idea what the man page means about twofish being broken?

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907184803</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-07 18:48:03-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

On Fri, Sep 07, 2001 at 10:59:14AM -0500, Harmon Seaver wrote:
&gt;        Interestingly, even tho the losetup man page says that twofish is
&gt; broken, I was able to create a loop device with twofish and mount it
&gt; okay. So far I've tried aes, serpent, and twofish with success, but
&gt; blowfish is definitely broken.

My now-defunct loop container (which was created under kerneli's 2.4.3.1
patch) was blowfish, and it was readable by cryptoapi-2.4.7.0 until I
recompiled my loop.o and the cryptoapi modules for IV_MODE_SECTOR.
Perhaps blowfish will work without IV_MODE_SECTOR?

I haven't yet had time to retry it.

&gt;        Any idea what the man page means about twofish being broken?

No, but coding generally moves a lot faster than documentation. :)

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907190509</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-07 19:05:09-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 07 September 2001 17:59, Harmon Seaver wrote: 
&gt;        Interestingly, even tho the losetup man page says that twofish 
&gt; is broken, I was able to create a loop device with twofish and mount 
&gt; it okay. So far I've tried aes, serpent, and twofish with success, 
&gt; but blowfish is definitely broken. 
&gt;        Any idea what the man page means about twofish being broken? 
 
The man page is outdated. It refers to the old loop_2fish.o module. 
 
Marc 
 
- --  
With the collapse of the puppet regime nine years ago, a gloomy and 
bleak religious domination has prevailed in [Afghanistan]; our ruined 
and destroyed homeland has fallen into the claws of the rabid 
fundamentalists; and all its assets and belongings have been burnt in 
the flames of religious tyranny. 
    -- "28th April is gloomier than 27th of April" 
       RAWA statement on the black day of Apr 28, http://www.rawa.org 
 
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7mWgM3oWD+L2/6DgRAlEiAKCK7bDP4ESTRYj9pK/oQSHO7DPk5wCfRAYT
IYDniCWa2JZsMhn+BGcV/Vs=
=SHy+
-----END PGP SIGNATURE-----
t affect the decoder, only the encoder. H

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907203943</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-07 20:39:43-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

     Ahh, kgcc fixes the blowfish problem -- great! Although compiling with
kgcc died several times with "fatal errors" due to a problem with the new
3.01 cpp, it seemed to work out with just restarting "make bzImage".  Hmm, I
was using kgcc before, because RedHat's 7.0 gcc was so broken, but thought
gcc 3.01 would fix things, guess not. I also notice that the kgcc kernel is a
bit smaller - 1132870 vs 1173975.


Herbert Valerio Riedel wrote:

&gt; On Fri, 7 Sep 2001, Harmon Seaver wrote:
&gt;
&gt; &gt;        No unusual setup, except reiserfs (but others tell me they aren't
&gt; &gt; having any problem with reiserfs and crypto), it's a Cyrix 6x86L-200+
&gt; &gt; process on an Asus T97-E mb w/128 megs of RAM.  Redhat 7.0, 3.01 gcc.
&gt; &gt;       I just tried serpent, and that worked okay.
&gt;
&gt; ..did you use the 3.01 gcc for kernel compilation? :-/
&gt;
&gt; what gcc arguments were used for compilation?
&gt;
&gt; if so, could you try kgcc? I just want to be sure it's not that the
&gt; problem...
&gt;
&gt; btw, it seems there's some NULL pointer while setting the crypto key,
&gt; judging from your stackdump...
&gt;
&gt; --
&gt; Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
&gt; Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
&gt; GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010907205225</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-07 20:52:25-0400</timestampReceived><subject>Re: announce; monolithic versions of the cryptoapi branch!</subject><body>

On Fri, 7 Sep 2001, Harmon Seaver wrote:

&gt;      Ahh, kgcc fixes the blowfish problem -- great! Although compiling with
&gt; kgcc died several times with "fatal errors" due to a problem with the new
&gt; 3.01 cpp, it seemed to work out with just restarting "make bzImage".  Hmm, I
&gt; was using kgcc before, because RedHat's 7.0 gcc was so broken, but thought
&gt; gcc 3.01 would fix things, guess not. I also notice that the kgcc kernel is a
&gt; bit smaller - 1132870 vs 1173975.

On redhat 7.1 systems it's advisable to use either the kgcc (egcs-2.91.66)
or update the gcc package (2.96) to the latest errata update rpm
(as of now gcc-2.96-85)...

btw, lazy as I am, I have taken the gcc-3.01 RPMs available from the
roswell redhat beta, installs cleanly without interfering with the other
compiler versions on your system... (I just had to recompile the binutils
src.rpm)...

see also the NOTE contained in the XFS linux-kernel toplevel Makefile:

...
CC              = $(CROSS_COMPILE)gcc
#===== NOTE =====
#  egcs-2.91.66 is the recommended compiler version for building XFS.
#  Most of the XFS developers are using that particular version for
#  development, testing, and performance analysis work, and it will
#  generate a functional XFS kernel (some versions of gcc will not) -
#  uncomment the following line to force that gcc version to be used:
#CC             = $(CROSS_COMPILE)gcc -V egcs-2.91.66
#  On early versions of RedHat 7.x, kgcc is the recommended compiler
#  for building the kernel (kgcc is the same as egcs-2.91.66) - if
#  you use such a distribution and wish to use kgcc, uncomment this:
#CC             = $(CROSS_COMPILE)kgcc
#  The default gcc with RedHat 7.1 (gcc-2.96-81) also appears to
#  generate good code, earlier versions of 2.96 are however an
#  unknown quantity and not recommended.
CPP             = $(CC) -E
...


-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010910153711</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-10 15:37:11-0400</timestampReceived><subject>Re: I-patch problem statement (update)</subject><body>

On Mon, Sep 10, 2001 at 03:18:32PM +0100, Dale Amon wrote:
&gt; Note that the security people are doing something similar and
&gt; unifying behind the LIDS patches. Even SELINUX has been 

Excuse while I re-engage brain. The LSM patches I mean.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010914222609</emailId><senderName>arbonline</senderName><senderEmail>arbonline@yahoo.com</senderEmail><timestampReceived>2001-09-14 22:26:09-0400</timestampReceived><subject>Bug in sha1c.c</subject><body>

Hello,

There is a bug in sha1c.c that makes that sha1c.c output an incorrect 
message digest if -O2 ins't enabled. These is because in &lt;string.h&gt; only 
is defined __LITTLE_ENDIAN if &lt;bits/string2.h&gt; is included. This only 
happens when -O is set. I suggest to include &lt;endian.h&gt; in sha1c.c to 
fix the bug.

Ian Blanes.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010915223156</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-09-15 22:31:56-0400</timestampReceived><subject>[FYI] (Fwd) Please make stable NON-US homes for strong crypto</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

offtopic (or not) like the rest of the current discussion.

i hereby offer mirroring service for projects on servers operated
by different legal entities in different european cities on
different backbones.

projects interested in getting mirrored or people interested in
offering additional mirror capacity, just send me a mail.
please consider using PGP.

Gruss,
  Hauke

- -- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf

- ------- Forwarded message follows -------
To:             	cryptography@wasabisystems.com, gnu@toad.com
Subject:        	Please make stable NON-US homes for strong crypto projects
Date sent:      	Sat, 15 Sep 2001 00:32:12 -0700
From:           	John Gilmore &lt;gnu@toad.com&gt;

It's clear that the US administration is putting out feelers to
again ban publication of strong encryption.  See:
  http://www.wired.com/news/politics/0,1283,46816,00.html

The evil gnomes who keep advancing unconstitutional US anti-crypto
policies know that the current hysteria in Congress and the
Administration will not last forever.  So they will probably move very
quickly -- within a week is my guess -- to re-control encryption,
either by a unilateral action of the Administration (by amending the
Export Administration Regulations), or by stuffing a rider onto some
so-called "emergency" bill in Congress.

They maneuvered very carefully in the Bernstein case such that there
is no outstanding injunction against violating the Constitution this
way -- and even no binding 9th-Circuit precedent that tells them it's
unconstitutional to do so.  They know in their hearts that numerous
judges have found it unconstitutional, but they have proven throughout
the seven-year history of the case that they don't give a damn about
the Constitution.  Which means it may take weeks, months or years for
civil liberties workers to get a judge to roll back any such action.
Not just days.  We won the case, but they squirmed out of any
permanent restrictions -- so far.

The US government has a new mania for wiretapping everyone in case
they might be a terrorist.  There's already two bills in Congress to
make it trivial for them to wiretap anybody on flimsy excuses, and to
retroactively justify their precipitous act of rolling Carnivore boxes
into major ISPs this week and demanding, without legal authority, that
they be put at the heart of the networks.  See:
  http://www.politechbot.com/docs/cta.091401.html

Even more than before, we will need good encryption tools, merely to
maintain privacy for law-abiding citizens, political activists, and
human rights workers.  (In the current hysteria, mere messages
advocating peace or Constitutional rights might best be encrypted.)
The European Parliament also recently recommended that European
communications be routinely encrypted to protect them from pervasive
US Echelon wiretaps.

Some US developers, who thought such a reversal would never happen,
have built or maintained a number of good open source encryption tools
in the United States, and may not have lined up solid foreign
maintainers or home sites.

LET'S FIX THAT!  We need volunteers in many countries to mirror
current distributions, CVS trees, etc.  We need volunteers to also act
as maintainers, accepting patches and integrating them into solid
releases.

(Note that too many countries have pledged to stand toe-to-toe with
the US while they march off to make war on somebody they can't figure
out who it is yet.  If you live in one of those countries, you may
suddenly find that your own crypto regs have been sneakily altered.
Take care that each useful package has maintainers and distribution
points in diverse countries.)

I haven't kept close track of which packages are in danger.  I
suggest that people nominate packages on this mailing list, and that
others immediately grab mirror copies of them as they are nominated.
And that some of those who mirror them keep quiet, in case hysterical
governments make a concerted effort to stamp out all copies and/or all
major distribution sites.  If you aren't the quiet type, then *AFTER*
IMMEDIATELY PULLING A COPY OF THE CODE OUTSIDE US JURISDICTION,
announce your mirror on this mailing list.

We freedom-loving US citizens have had to rely on the freedom-loving
citizens of saner countries, to do the work of making strong
encryption, for many years.  We had a brief respite, which we will
eventually resume for good.  In the meantime, please let me apologize
for my countrymen and for my government, for asking you to shoulder
most of the burden again.  Thank you so much.

 John Gilmore

PS: Companies with proprietary encryption packages might consider
immediately open-sourcing and exporting their encryption add-ins, so
their customers can still get them from overseas archives.  Or taking
other actions to safeguard the privacy and integrity of their
customers' data and their society's infrastructure.  I also advise
that they lobby like hell to keep privacy and integrity legal in the
US.



- ---------------------------------------------------------------------
The Cryptography Mailing List Unsubscribe by sending "unsubscribe
cryptography" to majordomo@wasabisystems.com
- ------- End of forwarded message -------
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO6PW33O2fBh4VhzZAQEIbggArfO0y50rK1+thZDu7tG2IZbAIyTPjgf0
9B/Cwkk4eZ3QKa9RinvOMMkGtgcJkJdxL9JS/6pLCS0K9MTwGoUtqgLH3PywEohx
7l09NjSWzLYnWR+61tKFkddNNZB+/N9Y49iTH2XukwpYpvndL0b1JfzAGeYAOjr1
8r6g7jkG4nRcSnbnq1G+H0e93ZVza5V6ftyDUCXIVY8IXf7ja34eEa3uUJPr1Nga
i7Xbf72q7v3oiUxO+epKI6+V+vEJE3wB31B+0os6klNU6RqpNh09tFU3/Ow7EK57
Ei17NbMEF5U2994sIHEMFcM1M3pcbCnWsVFBslg/S3Y59fYfjkHOwA==
=FgzA
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010917201847</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-17 20:18:47-0400</timestampReceived><subject>RE: cryptoapi-2.4.7.0: IV_MODE_SECTOR confusion</subject><body>

TGlzdCBtZW1iZXJzOg0KDQoJVG8gYWxsIG15IEpld2lzaCB0cmliYWwgYnJvdGhlcnMsIGhhdmUg
YSB3b25kZXJmdWwgUm9zaCBIYXNoYW5haCENCg0KCUJ5IHRoZSB3YXksIGhhcyBhbnlvbmUgZXZl
ciBhc2tlZCBob3cgTWljcm9zb2Z0IGlzIGFibGUgdG8gZXhwb3J0IGEgY3J5cHRvIEFQSSBpbiBX
aW5kb3cgMjAwMCwgYW5kIExpbnV4IGNhbm5vdD8NCg0KDQpWZXJ5IFJlc3BlY3RmdWxseSwgDQoN
ClN0dWFydCBCbGFrZSBUZW5lciwgSVQzLCBVU05SLVIsIE4zR1dHIA0KQmV2ZXJseSBIaWxscywg
Q2FsaWZvcm5pYQ0KVlRVIDE5MDRHIChWb2x1bnRlZXIgVHJhaW5pbmcgVW5pdCkgDQpzdHVhcnRA
Ymg5MDIxMC5uZXQgDQp3ZXN0IGNvYXN0OiAoMzEwKS0zNTgtMDIwMiBQLk8uIEJveCAxNjA0Mywg
QmV2ZXJseSBIaWxscywgQ0EgOTAyMDktMjA0MyANCmVhc3QgY29hc3Q6ICgyMTUpLTMzOC02MDA1
IFAuTy4gQm94IDQ1ODU5LCBQaGlsYWRlbHBoaWEsIFBBIDE5MTQ5LTU4NTkgDQoNClRlbGVjb3Bp
ZXI6ICg0MTkpLTcxNS02MDczIGZheCB0byBlbWFpbCBnYXRld2F5IHZpYSB3d3cuZWZheC5jb20g
KGl0J3MgZnJlZSEpIA0KDQpKT0lOIFRIRSBVUyBOQVZZIFJFU0VSVkUsIFNFUlZFIFlPVVIgQ09V
TlRSWSwgQU5EIEJFTkVGSVQgRlJPTSBJVCBBTEwuIA0KDQpNb25kYXksIFNlcHRlbWJlciAxNywg
MjAwMSAxOjE3IFBNDQoNCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010917210507</emailId><senderName>David =?iso-8859-1?q?G=FCmbel?=</senderName><senderEmail>david.guembel@gmx.de</senderEmail><timestampReceived>2001-09-17 21:05:07-0400</timestampReceived><subject>Mirror offer for crypto/stego developers and authors (Was: Re: [FYI] (Fwd) Please make stable NON-US</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello,



On Sunday, 16. September 2001 00:31, you (Hauke Johannknecht) wrote:
&gt; i hereby offer mirroring service for projects on servers operated
&gt; by different legal entities in different european cities on
&gt; different backbones.

I'd like to make a similar offer to any developer and/or author of 
cryptographic and/or steganographic software or other related material 
(HOWTOs , books etc.). We are setting up a mirror at University of Tuebingen 
in Germany, which is eventually going to have a reasonable amount of HDD 
space (~10 GB, perhaps more) and HTTP access (eventually CVS for developers) 
for that purpose. Anybody who's interested should simply drop me a line (best 
would be PGP-encrypted, see header).



Regards,



David 


- -- 
"Those who desire to give up Freedom in order to gain Security, 
will not have, nor do they deserve, either one."
 -- T. Jefferson
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: http://david-guembel.de/webpgp.html

iD8DBQE7pmWDcWkuqYXk/uwRAgFpAJwPE1o2r+lKbXrdiQ5AxL7VdKePVQCgiByJ
8NSBV+OzkyskFs1I4JKpdUo=
=BzVs
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010918131043</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-09-18 13:10:43-0400</timestampReceived><subject>Re: RFC: increased interest for cryptographic software?</subject><body>

       A much more realistic term would be fascist, which fits both Dubbya
and Swinestein. Fascism, of course, is "national socialism" which essentially
characterizes both parties, and which, especially in regard to these two,
carries the statist authoritarian overtones shown so clearly in their basic
characters.


Jim Breton wrote:

&gt; On Sat, Sep 15, 2001 at 02:56:00PM -0700, Keith Clayton wrote:
&gt; &gt; Maybe just increasingly concerned that our right-wing politicians are
&gt; &gt; going to attempt to pass laws restricting crypto further and make it
&gt; &gt; easier to intercept and read/listen to electronic communications.  In
&gt; &gt; fact US senators have already proposed requiring backdoors in crypto for
&gt; &gt; law enforcement (senator from NH) as well as allowing for interception
&gt; &gt; of net traffic without warrant (Senator Feinstein as one of the
&gt; &gt; authors).
&gt;
&gt; Your characterization of it as a "right-wing" affinity is false.
&gt;
&gt; For instance, your example of Dianne Feinstein: she is widely known as a
&gt; liberal, left-wing politician.
&gt;
&gt; I'm afraid assholes can exist on both sides.
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010919073045</emailId><senderName>"Karl, Marten"</senderName><senderEmail>marten.karl@lfk.eads.net</senderEmail><timestampReceived>2001-09-19 07:30:45-0400</timestampReceived><subject>RE: cryptoapi and kmod</subject><body>

Hello Rob.

&gt; What do you have to put in your modules.conf to have kmod load the
&gt; cryptoloop module?

I did not succeded with this. So I load that modules in boot.local.

Maybe this helps for working. But I am looking a better answer, too.

Best regards
Marten

Dipl.-Ing. Marten KARL  | EADS Deutschland GmbH
Tel:   D-731-392-4816   | EADS/LFK
Fax:   D-731-392-3097   | Manager IT Ulm
EFax:  D-731-392-204816 | Woerthstrasse 85
Mobil: D-175-3635862    | D-89077 Ulm
Achtung, geaenderte E-MAIL-Adresse:
      mailto:marten.karl@lfk.eads.net

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920162150</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-09-20 16:21:50-0400</timestampReceived><subject>Re: cryptoapi and swap</subject><body>

btw, IMHO using loop back for swap is not ideal, it's just a generic
approach (some may even regard it a hack :-)... maybe something like the
bsd folks are doing would be more appropriate; see the following paper 
for an interesting read...

http://www.openbsd.org/papers/swapencrypt.ps

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F
4142

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010920165953</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-20 16:59:53-0400</timestampReceived><subject>Re: [PPDD] loop-AES-v1.4d file/swap crypto package</subject><body>

Greg Louis wrote:
&gt; It would seem to make sense to ask the author of loop-AES directly for
&gt; his comments.  Jari?
&gt; 
&gt; On 20010920 (Thu) at 1114:48 +0200, Allan Latham wrote:
&gt; &gt; A quick look at this seems to show the following (pls confirm this anyone):
&gt; &gt;
&gt; &gt; 1. The whole of the data is encrypted with a single key

Correct.

&gt; &gt; 2. There is no mean to change the key

dd if=/dev/loop0 of=/dev/loop1

&gt; &gt; 3. CBC is used on 512 byte blocks

Correct.

&gt; &gt; 4. The key is derived directly from a password with a seed

User supplied password is hashed using SHA-256 and output of that hash is
used as encryption key.

&gt; &gt; I would be pleased if someone could just read the code and confirm point 4
&gt; &gt; above. If true this is a serious problem. It allows a dictionary attack in
&gt; &gt; reasonable time - and a twenty character pass phrase especially one using
&gt; &gt; plain language words is no protection against this.

A dictionary attack against PPDD should not be any different. One just has
to decrypt twice: once the master key and then some known plaintext using
decrypted "generated key". OTOH, I may be wrong here, I have't read PPDD
code at all.

&gt; &gt; &gt; On Thu, 20 Sep 2001, ext Michael H. Warfield wrote:
&gt; &gt; &gt; &gt; Another disadvantage is that it replaces the loop-back device
&gt; &gt; &gt; &gt; rather than works in parallel.  That may not matter much, but it might
&gt; &gt; &gt; &gt; if you want them in parallel but separate.  Not an issue with me.

This is really a FAQ. The loop driver in loop-AES _is_ your kernel's loop
driver with known bugs fixed and AES cipher pre-registered. It does
everything an unmodified loop driver would do.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010920213330</emailId><senderName>Davide Giunchi</senderName><senderEmail>gdavide@mclink.it</senderEmail><timestampReceived>2001-09-20 21:33:30-0400</timestampReceived><subject>problem with cryptoapi-2.4.7.0 mounting crypto fs</subject><body>


Hi all.
I'm using a Debian unstable (upgraded to 3 weeks ago) with kernel 2.4.7, i've 
installed cryptoapi and patched+installed util-linux (someone tell me that 
util-linux included in debian unstable are already patched... but i've 
recompiled it anyway).
Now i try to create and use a crypto fs:

# modproble cryptoloop 
# dd if=/dev/zero of=/file bs=1k count=100
# losetup -e blowfish /dev/loop0 /file
 i select 256 bit and a passhprase
# mkfs -t ext2 /dev/loop0 100
in the next step i get the error
# mount -t ext2 /dev/loop0 /crypto/
mount: wrong fs type, bad option, bad superblock on /dev/loop0,
or too many mounted file systems

so when i try to mount the fs it doen't prompt for a password and i cannot 
mount the filesystem.
What can i do?

Regards.
Davide.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010922081950</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-22 08:19:50-0400</timestampReceived><subject>RE: [Evms-devel] Root on LV</subject><body>

Mr. Chan:

	I just got a message from Hans Reiser, it is in fact 30 SEP 2002 as you
stated. It was I whom misunderstood him.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, September 22, 2001 1:18 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hubert Chan
Sent: Friday, September 21, 2001 6:45 PM
To: linux-crypto@nl.linux.org
Subject: Re: [Evms-devel] Root on LV

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Stuart" == IT3 Stuart B Tener, USNR-R &lt;stuart@bh90210.net&gt; writes:

Stuart&gt; Mr. Chan: I just sent an email off to Mr. Reiser asking him
Stuart&gt; which "30 SEP" he was talking about.

I got my info from the Namesys webpage: www.namesys.com or
www.reiserfs.com (a pretty ugly web page, if you ask me).  And after you
scroll past the mass of logos (or if you have a huge monitor, you won't
have to), you'll see the Reiser4 pre-announcement.

I'm also on the reiserfs mailing list, and I can tell you that there is
absolutely no discussion about Reiser4.

Or you could use the pessimist's method: it just has too much neat stuff
to be released in 9 days. ;-)

But if Reiser decides to release a year early, I'm not one to
complain. ;-)

- --
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7q+ztZRhU33H9o38RAv9GAJ9CUITVVqFOzxRI0ITkCuDAHKUkmwCfRCGF
bwiUPsP1P8uAXoPOHf/eJMg=
=AZli
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010924054601</emailId><senderName>"Viktoras Rynkevicius"</senderName><senderEmail>vikas@humanoid.net</senderEmail><timestampReceived>2001-09-24 05:46:01-0400</timestampReceived><subject>Fw: please help</subject><body>


&gt;
&gt; Hello,
&gt;
&gt; I downloaded crypto patch and it doesn't work for me. Please help me to
&gt; understand what i doing bad:
&gt;
&gt; I downloaded international crypto patch: patch-int-2.4.3.1
&gt; I downloaded file-utils-11i
&gt; I downloaded kernel-2.4.9
&gt;
&gt; Then I patched kernel source, using command
&gt; #patch -p1 &lt; patch*
&gt;
&gt; Manualy corrected *.rej (Makefile)
&gt; #make xconfig (added crypto support, AES cipher is in kernel support)
&gt; #make clean
&gt; #make bzImage
&gt; #make modules
&gt; #make modules_install
&gt; copyed kernel at boot folder
&gt;
&gt; patched util-linux-.11i(no *.rej files)
&gt; compiled and make install
&gt;
&gt; Edited '/etc/fstab', adding an entry for mount point as follows:
&gt; /dev/loop0 /mnt/crypt ext2 user,noauto,rw,loop 0 0
&gt;
&gt; After reboot
&gt; [root@www /root]# losetup -e aes /dev/loop0 /etc/cryptfile
&gt; Available keysizes (bits): 128 192 256
&gt; Keysize: 128
&gt; Password :
&gt; The cipher does not exist, or a cipher module needs to be loaded into the
&gt; kernel
&gt; ioctl: LOOP_SET_STATUS: Invalid argument
&gt; [root@www /root]#
&gt;
&gt; Same situation when patching kernel 2.2.17: ioctl: LOOP_SET_STATUS:
Invalid
&gt; argument.
&gt; What I did wrong? Sorry if that question is too stupid and I skipped
&gt; something what is written in readme.
&gt;
&gt; Viktoras Rynkevicius
&gt; Lithuania, Vilnius
&gt;
&gt;
&gt; P.S.: Sorry for my poor english.
&gt;
&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010925224450</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-09-25 22:44:50-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocationfailed</subject><body>

On Wed, 26 Sep 2001, Jari Ruusu wrote:

&gt; Can you try this patch then, against original v1.4d
&gt;
&gt; -+        bh = kmem_cache_alloc(bh_cachep, SLAB_ATOMIC);
&gt; ++        bh = 0; /* kmem_cache_alloc(bh_cachep, SLAB_ATOMIC); */

Heh, I think I see what you are doing ;)

Well, this seems to work!  I was able to losetup ; mkfs ; mount, and am
now looping over some dd if=/dev/zero of=foo.$A runs to fill/touch more
of the disk; will follow with some bonnie's and such.  This is probably
only a temporary workaround but it works for me.

Thanks for the quick test-fixes!

Hank Leininger &lt;hlein@progressive-comp.com&gt;
E407 AEF4 761E D39C D401  D4F4 22F8 EF11 861A A6F1


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926072534</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-26 07:25:34-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order</subject><body>

Hank Leininger wrote:
&gt; Heh, I think I see what you are doing ;)
&gt; 
&gt; Well, this seems to work!  I was able to losetup ; mkfs ; mount, and am
&gt; now looping over some dd if=/dev/zero of=foo.$A runs to fill/touch more
&gt; of the disk; will follow with some bonnie's and such.  This is probably
&gt; only a temporary workaround but it works for me.
&gt; 
&gt; Thanks for the quick test-fixes!

First patch made memory allocations less aggressive. Second patch removed
runtime memory allocations completely, and relied solely on pre-allocated
pages. So, 2.4.9 VM goes south under intense memory allocation storms.

Hank, if it isn't too inconvenient, can you test unmodified loop-AES-v1.4d
with kernels 2.4.9-ac10 (not the newer -ac15) and 2.4.10aa1, both of which
have different VM than 2.4.9. Patches are here:

ftp://ftp.kernel.org/pub/linux/kernel/people/alan/linux-2.4/2.4.9/
ftp://ftp.kernel.org/pub/linux/kernel/people/andrea/kernels/v2.4/

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926121751</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-09-26 12:17:51-0400</timestampReceived><subject>Re: loop-AES 1.4d crypto swap =&gt; __alloc_pages: 0-order allocationfailed  (gfp=0x20/0) from c882256e</subject><body>

 did that and it works now!

&gt; Can you try this patch then, against original v1.4d
&gt; 
&gt;     cd loop-AES-v1.4d
&gt;     patch -p0 &lt; filename
&gt;     make
&gt; 
&gt; Also, add this line to your /etc/modules.conf
&gt; 
&gt;     options loop lo_prealloc=150
&gt; 
&gt; Regards,
&gt; Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
&gt; 
&gt; 
&gt; --- loop.c-2.4.diff.old Sun Sep  2 21:33:01 2001
&gt; +++ loop.c-2.4.diff Wed Sep 26 01:16:00 2001
&gt; @@ -261,12 +261,12 @@
&gt;  +        memset(bh, 0, sizeof(struct buffer_head));
&gt;  +        bh-&gt;b_page = p;
&gt;  +    } else {
&gt; -+        bh = kmem_cache_alloc(bh_cachep, SLAB_ATOMIC);
&gt; ++        bh = 0; /* kmem_cache_alloc(bh_cachep, SLAB_ATOMIC); */
&gt;  +        if(!bh) {
&gt;  +            return((struct buffer_head *)0);
&gt;  +        }
&gt;  +        memset(bh, 0, sizeof(struct buffer_head));
&gt; -+        bh-&gt;b_page = alloc_page(GFP_ATOMIC);
&gt; ++        bh-&gt;b_page = 0; /* alloc_page(GFP_ATOMIC); */
&gt;  +        if(!bh-&gt;b_page) {
&gt;  +            kmem_cache_free(bh_cachep, bh);
&gt;  +            return((struct buffer_head *)0);
&gt; 

 


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926205947</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-26 20:59:47-0400</timestampReceived><subject>RE: [Announce] New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Mr. Bouissou:

	I understood all of what you said (prior to your saying it actually), I was
just proposing that as a convenience to people installing it, that the RPM
backup the binary file for the user as a precaution against the user
forgetting to or improperly doing so.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, September 26, 2001 1:58 PM

-----Original Message-----
From: Michel Bouissou [mailto:michel@bouissou.net]
Sent: Wednesday, September 26, 2001 12:57 PM
To: stuart@bh90210.net; linux-crypto@nl.linux.org
Subject: Re: [Announce] New cryptoapi RPM packages for Mandrake 8.1

Le Mercredi 26 Septembre 2001 18:59, vous avez √©crit :
&gt; Mr. Bouissou:
&gt;
&gt;             Never mind! Boy did I make a mistake. I realized your
directory
&gt; structure, and have also found the README. Now I am clear on it, and have
&gt; downloaded it all.

Yes, I hope the README answered the questions you asked in your 2 previous
messages.

&gt;             - Make a backup copy of the following files, in case you would
&gt; need them back:
&gt;             - /sbin/losetup
&gt;             - /bin/mount
&gt;             - /bin/umount
&gt;
&gt;         Correct me if I am wrong, but I think if an RPM is built with that
&gt; in mind, the RPM can actually make the backups for you in a more automated
&gt; manner, no? This way the RPM installation would create the backups leaving
&gt; less room for mistakes on installation.

RPMs usually makes backups only for configuration files, which may be
user-modified, but not for binary files, which aren't supposed to change.

Should you have a problem with a non-working binary when you install a RPM,
you would only need to "downgrade" to the RPM from your original distro to
solve the problem.

But, Oooops! What about mount ?

mount is absolutely necessary to be able to mount your filesystems, and, if
you have a problem with your "current" mount, you might be unable to mount
the filesystem (possibly CD-Rom) on which resides the RPM you'd need to
downgrade...

So, the choice of manually copying your "original" mount in the same
directory, to another name (i.e. mount-original) protects you, because if
ever your new "mount" fails, you still can directly use "mount-original"
instead...

It's quite improbable that you might encounter a problem with this patched
mount version anyway, but I found it preferable to be careful with this.

Hope this helps.

Best regards.

--
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929110621</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-29 11:06:21-0400</timestampReceived><subject>Possible to determine crypto-type from crypted file?</subject><body>

Hi,

Is it possible to determine what crypto-type (aes, twofish, blowfish, etc) 
that has been used to crypt a file by just looking in the file examining its 
content?

If not it maybe would be possible to increase security be allowing many 
different crypto-types in the system and create a small script used for 
seting up the crypto-loop that takes the crypto-type as an arg:

Script "loop":
----------------------------------------
#!/bin/sh
if [ -z "$1" ]; then
    echo "Usage: $0 &lt;crypto-type&gt;"
    exit 0
fi
losetup -e $1 /dev/loop0 /.cryptfile
mount /.cryptfile /mnt/mycrypt
----------------------------------------

Any comments?

-Jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929213953</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-09-29 21:39:53-0400</timestampReceived><subject>Re: Possible to determine crypto-type from crypted file?</subject><body>

On Saturday 29 September 2001 13:06, Jonas Larsson wrote:
&lt;snip&gt;
&gt; Is it possible to determine what crypto-type (aes, twofish, blowfish,
&gt; etc) that has been used to crypt a file by just looking in the file
&gt; examining its content?

No.

&gt; If not it maybe would be possible to increase security be allowing
&gt; many different crypto-types in the system and create a small script
&gt; used for seting up the crypto-loop that takes the crypto-type as an
&gt; arg:
&lt;snip&gt;

This doesn't make the system more secure than using different (good) 
keys. And if one of the ciphers gets broken tomorrow, you'd best 
inplace-convert your loop devices to another cipher and _destroy_ all 
backups made with the old one.

Marc

-- 
I am Bush of USA. You will be pacified. Resistance is futile.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930012257</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-30 01:22:57-0400</timestampReceived><subject>Re: Possible to determine crypto-type from crypted file?</subject><body>

&gt; &gt; Is it possible to determine what crypto-type (aes, twofish, blowfish,
&gt; &gt; etc) that has been used to crypt a file by just looking in the file
&gt; &gt; examining its content?
&gt;
&gt;No.

How can you be so sure about this? Can your refer to some document 
proving/stating that?


&gt; &gt; If not it maybe would be possible to increase security be allowing
&gt; &gt; many different crypto-types in the system and create a small script
&gt; &gt; used for seting up the crypto-loop that takes the crypto-type as an
&gt; &gt; arg:
&gt;&lt;snip&gt;
&gt;
&gt;This doesn't make the system more secure than using different (good)
&gt;keys.

Ofcourse I suppose that one uses good keys. What I meant was that if you 
don't know what chipher that has been used then you have to try many 
different ways for attacking the crypto.

As far as I know you have to use quite different ways to attack cryptos that 
have been crypted with different chiphers. I think that may take much longer 
time since you don't know for sure what way to use for attacking the crypto.


Best regards,

Jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929111326</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-29 11:13:26-0400</timestampReceived><subject>Start crypted volumes at bootup?</subject><body>

Hi,

Have anyone managed to startup crypted volumes during bootup? I mean it 
would be nice during bootup to be asked a question for the pw (and maybe 
also the crypto-type). Then the system would mount all the filesystems (/, 
/etc, /var, ..., etc) encrypted. That would be cool, wouldn't it? :)

If there are problems to use this for the root-partition in maybe would be 
easier to do it for locations like /etc and /var ? I mean you could use 
symlinks for e.g. /etc pointing to the loop-mounted crypt-file.

Any comments?

-Jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930212749</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-30 21:27:49-0400</timestampReceived><subject>RE: Start crypted volumes at bootup? / LM8.1 Upgrade (make xconfig)</subject><body>

Linux Crypto users:

        I am going to attack my Linux Mandrake 8.1 upgrade first (its partly
finished), when completed, I will attempt to then add the crypto stuff. I
just saw a thumb print identification hardware (pcmcia) from [I think]
Identicator. Has anyone had experience with this device? G-D only knows if
it is supported by Linux! But, I am at current a bit more concerned about my
W2K security, as I have other good choices for Linux.

        One addition issue:


Since having upgraded Mandrake from 8.0 to 8.1 [on my laptop / Dell], I have
the following issue (I still have a second computer to upgrade):

I am interested to find out, when I do a "make xconfig", I cannot at all see
which options are ticked off or not since having upgraded my Mandrake to
8.1. Has anyone noticed this issue? Any way it can be worked around? They
used to be lick red or blue or something check marks, now its all but
impossible to see the marks in the options on "make xconfig" windows.

The only thing visibly ticked off at the moment is mwah!

Linux-Mandrake 8.1 currently installed (FINAL, not RC1).





Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, September 30, 2001 2:24 PM

-----Original Message-----
From: Hauke Johannknecht [mailto:ash@ash.de]
Sent: Sunday, September 30, 2001 12:57 PM
To: IT3 Stuart B. Tener, USNR-R
Cc: Jonas Larsson; linux-crypto@nl.linux.org
Subject: RE: Start crypted volumes at bootup?

-----BEGIN PGP SIGNED MESSAGE-----

On Sun, 30 Sep 2001, IT3 Stuart B. Tener, USNR-R wrote:

&gt;       How do you create such a beast?

take a look at
        /usr/src/linux/Documentation/initrd.txt

also some distributions (at least SuSE) uses an initrd by
default (for loading scsi-modules afair), so it should be trivial
to add the crypto-modules and modified losetup/mount there.

if anyone is going to try this i would be glad to help in
exchange for half a page of writeup/howto or even a simple
shell-history snippet about this.

Gruss,
  Hauke

- --
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO7d5AXO2fBh4VhzZAQFIpgf+IxwSTn9XwSP8KwTbUpJ9JVGjQIZLWgvY
/fCqrewkGiGWH8VfpHLAdyqM/bFLShIFXvZxBAnCw4kQS/TD5T72tCDAgHTFo9rh
kjdiBvx0I613+SkJyKzKX7dGmjqhzEvuUTsS04eh5WeRv5vxy4b5FEsrBA3QvLsY
DtT4viiddSa1eR+hwzrxY/nPK98K3AmgvsXEIps7w2pbZqMxuRKDJJ9VuiUr35c1
jwYOHX2av48iyb+sOl1rvi77suMwHWl0NzPMAuqAsS6UgbQyw6d/fOdGqFB5riqF
Fa+CljDk79jfD7eLuz31LCBINqu5fmuumWsS78rrgDQ1xH+SX+TWXQ==
=zFc9
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930220424</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-30 22:04:24-0400</timestampReceived><subject>Re: Start crypted volumes at bootup? / LM8.1 Upgrade (make xconfig)</subject><body>

On Sun, Sep 30, 2001 at 02:27:49PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; I am interested to find out, when I do a "make xconfig", I cannot at all see
&gt; which options are ticked off or not since having upgraded my Mandrake to
&gt; 8.1. Has anyone noticed this issue? Any way it can be worked around? They

"make menuconfig" :)

Seriously, Stuart, an issue like that is probably in the configuration
of your window manager, and it could be almost anything. And it would be
way off-topic here -- you might want to take it to the Mandrake user
forums or newsgroups.

I have and use X, but I really prefer "make menuconfig" in the console.
I'll bet I spend half or more of my computer time at the good old Linux
console. Good luck.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930220948</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-30 22:09:48-0400</timestampReceived><subject>RE: Start crypted volumes at bootup? / LM8.1 Upgrade (make xconfig)</subject><body>

Mr. McGee, et al.:

	Yeah, it is off topic. However, there are so many intelligent minds here, I
figured I would give it a go. I know to use "make menuconfig", but I have a
customer. One who paid me to upgrade his system, and he is now asking me why
he paid to loose functionality. I cannot give him that answer, but I may end
up having to reduce what I charged him to upgrade his system, which I prefer
not to do.

	As soon as I figure out which file in the GNOME configuration sets those
sort of options, I am going to play with it. Still doing research though. I
am not an expert at GNOME configuration tidbits, but I am going to attack it
from that perspective.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, September 30, 2001 3:04 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Rob McGee
Sent: Sunday, September 30, 2001 3:04 PM
To: linux-crypto@nl.linux.org
Subject: Re: Start crypted volumes at bootup? / LM8.1 Upgrade (make xconfig)

On Sun, Sep 30, 2001 at 02:27:49PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; I am interested to find out, when I do a "make xconfig", I cannot at all
see
&gt; which options are ticked off or not since having upgraded my Mandrake to
&gt; 8.1. Has anyone noticed this issue? Any way it can be worked around? They

"make menuconfig" :)

Seriously, Stuart, an issue like that is probably in the configuration
of your window manager, and it could be almost anything. And it would be
way off-topic here -- you might want to take it to the Mandrake user
forums or newsgroups.

I have and use X, but I really prefer "make menuconfig" in the console.
I'll bet I spend half or more of my computer time at the good old Linux
console. Good luck.

    Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929125736</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-09-29 12:57:36-0400</timestampReceived><subject>Re: Start crypted volumes at bootup?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

On Sat, 29 Sep 2001, Jonas Larsson wrote:

&gt; If there are problems to use this for the root-partition in maybe would be
&gt; easier to do it for locations like /etc and /var ? I mean you could use

use an initrd that asks for passphrase of the root-device.

Gruss,
  Hauke

- -- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO7XFQ3O2fBh4VhzZAQGLaAgAioqUff8d4C/1YqYo/QzxpaLnSKc6YzqR
RmadqWNl39sdcfh0SjdrxKGMShMxFYActjxcrGfmA8M7ZRMCypGtLJGVEVqLDKa9
aYzAdilK7yzyb2mgF+CeR1i+W2pftJvgvu2BAg7aPEyXB3XjllGrJHDr7Pf1Jm4r
hI6ddKMfrnJRnTkPBVUXWLOpwhARQ10rp2NX8fEoslitYIoDPGCInU37VZ3myEoa
v+5VZyPv2mgQxfKbhdZk+FI/0aNuk48YBlNRjZcDK9GP8E68LeYjuUwM46ccmdhF
M3q0gHNgxdvlujiUaFqtj5CblIkzJMoUIV4T3SuEE5Ycz7ATLaOhlg==
=r3po
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930194159</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-30 19:41:59-0400</timestampReceived><subject>RE: Start crypted volumes at bootup?</subject><body>

Mr. Johannknecht:

	How do you create such a beast?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, September 30, 2001 12:41 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Hauke Johannknecht
Sent: Saturday, September 29, 2001 5:58 AM
To: Jonas Larsson
Cc: linux-crypto@nl.linux.org
Subject: Re: Start crypted volumes at bootup?

-----BEGIN PGP SIGNED MESSAGE-----

On Sat, 29 Sep 2001, Jonas Larsson wrote:

&gt; If there are problems to use this for the root-partition in maybe would be
&gt; easier to do it for locations like /etc and /var ? I mean you could use

use an initrd that asks for passphrase of the root-device.

Gruss,
  Hauke

- --
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO7XFQ3O2fBh4VhzZAQGLaAgAioqUff8d4C/1YqYo/QzxpaLnSKc6YzqR
RmadqWNl39sdcfh0SjdrxKGMShMxFYActjxcrGfmA8M7ZRMCypGtLJGVEVqLDKa9
aYzAdilK7yzyb2mgF+CeR1i+W2pftJvgvu2BAg7aPEyXB3XjllGrJHDr7Pf1Jm4r
hI6ddKMfrnJRnTkPBVUXWLOpwhARQ10rp2NX8fEoslitYIoDPGCInU37VZ3myEoa
v+5VZyPv2mgQxfKbhdZk+FI/0aNuk48YBlNRjZcDK9GP8E68LeYjuUwM46ccmdhF
M3q0gHNgxdvlujiUaFqtj5CblIkzJMoUIV4T3SuEE5Ycz7ATLaOhlg==
=r3po
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010926212403</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-26 21:24:03-0400</timestampReceived><subject>Re: cryptoapi RPM packages for Mandrake 8.1</subject><body>

Le Mercredi 26 Septembre 2001 22:59, Stuart Blake Tener a √©crit :
&gt;
&gt; 	I understood all of what you said (prior to your saying it actually), I
&gt; was just proposing that as a convenience to people installing it, that the
&gt; RPM backup the binary file for the user as a precaution against the user
&gt; forgetting to or improperly doing so.

Yes, it is surely a good idea.

The matter is that I'm not a RPM guru, and I don't know how to do it, and 
couldn't find time to study it more in depth.

There are surely a number of things that could easily be improved in my RPMs, 
especially in the "cryptoapi" ones that were made "quick and dirty" and built 
from scratch.

The kernel RPMs and losetup / mount RPMs are very close (read: identical) in 
their features to the original Mandrake ones, except for the addition of a 
supplementary little patch.

I am anyway confident about the mount and losetup packages, that nobody 
should actually need the backup of the previous binaries, even though it's 
always better having it.

If some RPM knowledgeable folk out there wishes to help and wants to rework 
on my RPM spec files to make them a little more polished, I would appreciate 
it much.

I've built these RPMs myself because I know many people around me that are 
okay to install a couple of RPMs even if they need to copy or move a couple 
of files by hand, while they wouldn't dare to try and patch and recompile a 
kernel or misc system utilities.

That's the purpose for which I built the RPMs: for helping out in such a 
situation.
It's quite imperfect, but yet it works and I hope it can help.
But, due to the inherent complexity of setting up a loopback encrypted volume 
with the current system, I think anyway that people that wouldn't feel 
comfortable copying a couple of files should stay away from it ;-)))

Best regards.

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010927224548</emailId><senderName>"Jonas Larsson"</senderName><senderEmail>jonas53@hotmail.com</senderEmail><timestampReceived>2001-09-27 22:45:48-0400</timestampReceived><subject>Configure problems 2.4.10 (newbie)</subject><body>

Hi,

I'm trying to build the cryptoapi for the latest kernel 2.4.10 .

$ tar xzf cryptoapi-2.4.7.0.tar.gz
$ cd cryptoapi-2.4.7.0
$ tar xzf /nfs/mirror/kernel/v2.4/linux-2.4.10.tar.gz

Acording to README it should be possible to do "./configure":

$ ./configure
loading cache ./config.cache
checking for a BSD compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking whether make sets ${MAKE}... yes
checking for working aclocal... found
checking for working autoconf... found
checking for working automake... found
checking for working autoheader... found
checking for working makeinfo... missing
checking for gcc... gcc
checking whether the C compiler (gcc  ) works... yes
checking whether the C compiler (gcc  ) is a cross-compiler... no
checking whether we are using GNU C... yes
checking whether gcc accepts -g... yes
checking how to run the C preprocessor... gcc -E
checking for gmake... gmake
checking for kernel include tree... configure: error: no suitable configured 
kernel include tree found

Maybe I need to pass the PATH to the kernel?

$ ./configure --with-linux=./linux --with-linux-include=./linux/include
loading cache ./config.cache
checking for a BSD compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking whether make sets ${MAKE}... yes
checking for working aclocal... found
checking for working autoconf... found
checking for working automake... found
checking for working autoheader... found
checking for working makeinfo... missing
checking for gcc... gcc
checking whether the C compiler (gcc  ) works... yes
checking whether the C compiler (gcc  ) is a cross-compiler... no
checking whether we are using GNU C... yes
checking whether gcc accepts -g... yes
checking how to run the C preprocessor... gcc -E
checking for gmake... gmake
checking for kernel include tree... configure: error: no suitable configured 
kernel include tree found

Sorry for the stupid question but I really don't known how to continue... :(

-Jonap

_________________________________________________________________
H√§mta MSN Explorer kostnadsfritt p√• http://explorer.msn.se


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928020622</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-09-28 02:06:22-0400</timestampReceived><subject>Re: AES or Twofish the best crypto?</subject><body>

Rob McGee wrote:
&gt; 
&gt; On Thu, Sep 27, 2001 at 10:32:09PM +0000, Jonas Larsson wrote:
&gt; &gt; For me it seems like either the AES or Twofish crypto with the maximum
&gt; &gt; keylength of 256 bits is probably the _most_ secure choise. For me the
&gt; &gt; security strength is _much_ more important than the speed of read/write to
&gt; &gt; the fs.
&gt; &gt;
&gt; &gt; Any coments?
&gt; 
&gt; How do you measure security? Most cryptographers (and I doubt there are
&gt; any on this list) say that time and analysis will increase their trust
&gt; in a given algorithm. Neither AES nor Twofish has been around that long.

However, all the AES candidates got heavily analysed during the AES process
and the people involved included many of the world's top cryptographers.

&gt; The venerable and slow old 3DES has, and it has defied all attackers.

Yes, but it is slow in software. DES was designed for hardware. Schneier
gives numbers indicating ciphers like CAST-128 or Blowfish have over a
3-to-1 speed advantage over DES, so nearly 10-to-1 over 3DES.

&gt; IDEA has probably been around long enough to have earned trust.

Perhaps, but it has license restrictions that I think rule it out.

&gt; Blowfish is getting there, if not there already.

I'd trust Blowfish or CAST-128. Both are used in quite a few products,
both were designed to resist the differential and linear attacks
devbeloped against DES, both have some theory behind them and have
withstood a lot of analysis. As I see it, they are the best of their
generation -- post-DES, pre-AES.
 
&gt; Somewhere recently I read a slightly outdated page which described all
&gt; the main algorithms in layman's terms, and included plenty of cites of
&gt; respected cryptographers' opinions. Sorry, I don't know the URL.

Not in layman's terms, but a good site:
http://www.ii.uib.no/~larsr/bc.html

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928103753</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-28 10:37:53-0400</timestampReceived><subject>RE: RPM for LOOP-AES? / RPMs for new MDK stuff</subject><body>

Mr. Bouissou:

	I was referring to the fact that there is an encrypted disk capability,
which is built into Windows, while Linux has no such built-in facility.
Windows does have a built in crypto API and we do not. We need to include a
standardized API, this way people can develop applications for it, and the
end administrator (or user) can just drop in the encryption algorithm they
want, and everything functions smoothly.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, September 28, 2001 3:34 AM

-----Original Message-----
From: Michel Bouissou [mailto:michel@bouissou.net]
Sent: Friday, September 28, 2001 2:42 AM
To: stuart@bh90210.net; linux-crypto@nl.linux.org
Subject: Re: RPM for LOOP-AES? / RPMs for new MDK stuff

Le Vendredi 28 Septembre 2001 09:57, IT3 Stuart B. Tener, USNR-R a √©crit :
&gt;
&gt;       Perhaps you will feel compelled to publish your RPM generating
scripts

There is no unpublished "RPM generation script". Each RPM build is
controlled
by a ".spec" file that describes what sources and patches are required, how
to install the sources and apply the patches, how to compile, and what to
include in the final binary RPM, plus possible installation scripts that
should be executed before or after the installation of the binary RPM.

For each RPM package I have made, I have provided in the SRPMS directory of
the FTP site the ".src.rpm" file that includes all the sources and scripts
used in building the RPM, and that includes the .spec file.

If you take one of these .src.rpm files and install it on your system, you
will find that all the needed sources will be installed in your
/usr/src/RPM/SOURCES directory, while the .spec files will be installed in
the /usr/src/RPM/SPECS directory.

Starting from there, you can recompile your own binary RPMs for yourself
(using the "rpm -ba &lt;specfile&gt; command") or perform any changes you wish in
the .spec file and sources, i.e. for adding your own patches or source
modification, and recreate RPMs from there.

So, there's no secret and I haven't kept any single byte of code or script
for myself, which wouldn't be on the FTP site.

&gt;       I am still curious, how Microsoft is able to distribute their
operating
&gt; system with crypto APIs in it, and Linux is not! This is crazy! What are
we
&gt; doing wrong?

Actually, most Linux distros already come with quite a lot of crypto stuff.
Mandrake, for example, comes with GnuPG, OpenSSL, SSH, IPSec, etc...

But Mandrake doesn't yet include the cryptoapi, and that's why I created
these additional RPM packages.

Let's hope that the next official Mandrake release will include it as well.

There's no "better crypto" in MS products compared to what you can find in
Linux distros, and I wouldn't rely a single second on "MS crypto" which is
provided without source code and that many peope consider to be probably
insecure or backdoored.

On the other hand, all crypto included in Linux is Open Source code, the
complete sources are provided, and if ever you do not trust the crypto
binairies provided, you are free to review source code by yourself, and
recompile your own binaries on your own system.
And that is *much* preferable from a security standpoint.

Regards.

--
Michel Bouissou - OpenPGP DH/DSS ID 0x5C2BEE8F
michel@bouissou.net
Faites plaisir √† votre ordinateur:
Offrez-lui un pingouin !


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010928113014</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-28 11:30:14-0400</timestampReceived><subject>New cryptoapi RPM packages for Mandrake 8.1</subject><body>

Hello,

I have performed some minor updates on the Mandrake-cryptoapi
packages available from:

ftp.i-quake.com/pub/crypto/linux/cryptoapi/mandrake-unofficial/8.1/


The updates are:

- Updated documentation file: cryptoapi-2.4.7.0-2.4.8_26.README.txt

- Updated "standalone" version, rebuilt agains the 2.4.8-26mdk kernel:
     cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm.sig
     (no functional changes over the previous one)

- Updated "losetup" and "mount" utilities, now allowing the specification
     of the key length in /etc/fstab:
     losetup-2.11h-2mdk2crypto.i586.rpm
     mount-2.11h-2mdk2crypto.i586.rpm

- Updated source RPMS for these packages in the SRPMS directory
- Updated GnuPG detached signatures for all added/replaced files


The modified files and packages are quite small, and the big kernel
packages have been left untouched. So, no big downloads if you had
the previous version and just want to get the updates/changes.


If you wish to mirror these packages on other FTP sites, please feel free
to do so.

Your feedback and comments are welcome.

-- 
Michel Bouissou - OpenPGP DH/DSS ID 0x5C2BEE8F
michel@bouissou.net

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929142116</emailId><senderName>Michel Bouissou</senderName><senderEmail>michel@bouissou.net</senderEmail><timestampReceived>2001-09-29 14:21:16-0400</timestampReceived><subject>Re: International Crypto Standalone - can't install</subject><body>

Le Samedi 29 Septembre 2001 15:16, Jonas Larsson a √©crit :
&gt; I have the same system (RedHat 7.1, 2.4.3-12) and didn't manage to do that
&gt;
&gt; # uname -a
&gt; Linux myhost 2.4.3-12 #1 Fri Jun 8 15:05:56 EDT 2001 i686 unknown
&gt;
&gt; # rpm -Uvh mount-2.11h-2mdk2crypto.i586.rpm
&gt; Preparing...                ###########################################
&gt; [100%]
&gt;    1:mount                  ###########################################
&gt; [100%]
&gt;
&gt; # rpm -Uvh losetup-2.11h-2mdk2crypto.i586.rpm
&gt; Preparing...                ###########################################
&gt; [100%]
&gt;    1:losetup                ###########################################
&gt; [100%]

So far, so good... these losetup and mount look happy with your system.


&gt; # rpm -Uvh cryptoapi-standalone-2.4.7.0-2.4.8_26mdk1crypto.i586.rpm
&gt; Preparing...                ###########################################
&gt; [100%]
&gt;    1:cryptoapi-standalone   ###########################################
&gt; [100%]
&gt; depmod: *** Unresolved symbols in
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoapi.o
&gt; depmod: *** Unresolved symbols in
&gt; /lib/modules/2.4.3-12/cryptoapi/cryptoloop.o

Now, you should check where the modules got installed.

They probably got installed under /lib/modules/2.4.8-26mdk/cryptoapi, and 
then you would need to move this "cryptoapi" directory manually int he 
modules directory for your own kernel, probably something like 
/lib/modules/2.4.3-12/cryptoapi

...then run depmod -a

If it still complains about unresolved symbols, then my cryptoapi packages 
may indeed be incompatible with your kernel version.

In such a case, you may want to try to rebuild it from the SRPM, in the hope 
that recompiling with your own kernel will fix this.
Before recompiling, you may want to edit the "spec" file for the cryptoapi 
package, to replace the installation location and package version with your 
own kernel's.
Also check that your kernel-headers and kernel-source packages are installed 
before trying to rebuild the cryptoapi.

You probably don't need to recompile losetup and mount, as they seemed happy.

If recompiling cryptoapi doesn't work, then it is probably uncompatible with 
the 2.4.3 series kernel, and then you would need a 2.4.7 or 2.4.8 kernel to 
get it working...

Please keep me posted with your results.

Good luck. ;-)

-- 
michel@bouissou.net
OpenPGP DH/DSS ID 0x5C2BEE8F
Si vous pr√©f√©rez que votre e-mail priv√© reste... priv√©.
Utilisez GnuPG: http://www.geocities.com/openpgp

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929184731</emailId><senderName>Greg Louis</senderName><senderEmail>glouis@dynamicro.on.ca</senderEmail><timestampReceived>2001-09-29 18:47:31-0400</timestampReceived><subject>Making a 2.4.9-ac kernel diff for loop-AES-2.4-1.4e</subject><body>

(Jari, you don't want to know about this so hit D now ;-)

There are just three hunks of the kernel-2.4.diff patch against 2.4.10
that don't apply to 2.4.9-ac17.  They're relatively easy to apply by
hand, but replacing the entire loop.c section of Jari's kernel patch
with this diff could save 2.4.9-ac users that trouble.  The three hunks
that have changed have been proofread but only very lightly tested, so
caution is urged.

--- linux-2.4.9-ac17-vanilla/drivers/block/loop.c	Sat Sep 29 14:05:22 2001
+++ linux-2.4.9ac17/drivers/block/loop.c	Sat Sep 29 13:42:32 2001
@@ -49,6 +49,15 @@
  *   problem above. Encryption modules that used to rely on the old scheme
  *   should just call -&gt;i_mapping-&gt;bmap() to calculate the physical block
  *   number.
+ *
+ * AES transfer added. IV is now passed as (512 byte) sector number.
+ * Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;, May 18 2001
+ *
+ * External encryption module locking bug fixed.
+ * Ingo Rohloff &lt;rohloff@in.tum.de&gt;, June 21 2001
+ *
+ * Make device backed loop work with swap (pre-allocated buffers + queue rewrite).
+ * Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;, September 2 2001
  */ 
 
 #include &lt;linux/config.h&gt;
@@ -72,11 +81,11 @@
 #include &lt;asm/uaccess.h&gt;
 
 #include &lt;linux/loop.h&gt;		
+#include &lt;linux/aes.h&gt;
 
 #define MAJOR_NR LOOP_MAJOR
 
 static int max_loop = 8;
-static struct loop_device *loop_dev;
 static int *loop_sizes;
 static int *loop_blksizes;
 static devfs_handle_t devfs_handle;      /*  For the directory */
@@ -140,12 +149,351 @@
 	init: xor_status
 }; 	
 
+#if CONFIG_BLK_DEV_LOOP_AES
+int transfer_aes(struct loop_device *lo, int cmd, char *raw_buf,
+          char *loop_buf, int size, int devSect)
+{
+    register int        x;
+    union {
+        u_int32_t       w[8];
+        unsigned char   b[32];
+    } iv;
+
+    if(!size || (size &amp; 511)) {
+        return -EINVAL;
+    }
+    if(cmd == READ) {
+        while(size) {
+            iv.w[0] = cpu_to_le32(devSect);
+            iv.w[3] = iv.w[2] = iv.w[1] = 0;
+            x = 16;
+            do {
+                memcpy(&amp;iv.b[16], raw_buf, 16);
+                aes_decrypt((aes_context *)lo-&gt;key_data, raw_buf, loop_buf);
+                *((u_int32_t *)(&amp;loop_buf[ 0])) ^= iv.w[0];
+                *((u_int32_t *)(&amp;loop_buf[ 4])) ^= iv.w[1];
+                *((u_int32_t *)(&amp;loop_buf[ 8])) ^= iv.w[2];
+                *((u_int32_t *)(&amp;loop_buf[12])) ^= iv.w[3];
+                raw_buf += 16;
+                loop_buf += 16;
+                memcpy(&amp;iv.b[0], raw_buf, 16);
+                aes_decrypt((aes_context *)lo-&gt;key_data, raw_buf, loop_buf);
+                *((u_int32_t *)(&amp;loop_buf[ 0])) ^= iv.w[4];
+                *((u_int32_t *)(&amp;loop_buf[ 4])) ^= iv.w[5];
+                *((u_int32_t *)(&amp;loop_buf[ 8])) ^= iv.w[6];
+                *((u_int32_t *)(&amp;loop_buf[12])) ^= iv.w[7];
+                raw_buf += 16;
+                loop_buf += 16;
+                if(current-&gt;need_resched) schedule();
+            } while(--x);
+            size -= 512;
+            devSect++;
+        }
+    } else {
+        while(size) {
+            iv.w[0] = cpu_to_le32(devSect);
+            iv.w[3] = iv.w[2] = iv.w[1] = 0;
+            x = 16;
+            do {
+                iv.w[0] ^= *((u_int32_t *)(&amp;loop_buf[ 0]));
+                iv.w[1] ^= *((u_int32_t *)(&amp;loop_buf[ 4]));
+                iv.w[2] ^= *((u_int32_t *)(&amp;loop_buf[ 8]));
+                iv.w[3] ^= *((u_int32_t *)(&amp;loop_buf[12]));
+                aes_encrypt((aes_context *)lo-&gt;key_data, &amp;iv.b[0], raw_buf);
+                memcpy(&amp;iv.b[0], raw_buf, 16);
+                loop_buf += 16;
+                raw_buf += 16;
+                iv.w[0] ^= *((u_int32_t *)(&amp;loop_buf[ 0]));
+                iv.w[1] ^= *((u_int32_t *)(&amp;loop_buf[ 4]));
+                iv.w[2] ^= *((u_int32_t *)(&amp;loop_buf[ 8]));
+                iv.w[3] ^= *((u_int32_t *)(&amp;loop_buf[12]));
+                aes_encrypt((aes_context *)lo-&gt;key_data, &amp;iv.b[0], raw_buf);
+                memcpy(&amp;iv.b[0], raw_buf, 16);
+                loop_buf += 16;
+                raw_buf += 16;
+                if(current-&gt;need_resched) schedule();
+            } while(--x);
+            size -= 512;
+            devSect++;
+        }
+    }
+    return(0);
+}
+
+int keySetup_aes(struct loop_device *lo, struct loop_info *info)
+{
+    lo-&gt;key_data = (aes_context *) kmalloc(sizeof(aes_context), GFP_KERNEL);
+    if(!lo-&gt;key_data) return(-ENOMEM);
+
+    aes_set_key((aes_context *)lo-&gt;key_data, &amp;info-&gt;lo_encrypt_key[0],
+            info-&gt;lo_encrypt_key_size, 0);
+    memset(&amp;info-&gt;lo_encrypt_key[0], 0, sizeof(info-&gt;lo_encrypt_key));
+    return(0);
+}
+
+int keyClean_aes(struct loop_device *lo)
+{
+    if(lo-&gt;key_data) {
+        memset(lo-&gt;key_data, 0, sizeof(aes_context));
+        kfree(lo-&gt;key_data);
+        lo-&gt;key_data = 0;
+    }
+    return(0);
+}
+
+static struct loop_func_table funcs_aes = { 
+    number:     LO_CRYPT_AES,
+    transfer:   transfer_aes,
+    init:       keySetup_aes,
+    release:    keyClean_aes
+};
+#endif /* CONFIG_BLK_DEV_LOOP_AES */
+
 /* xfer_funcs[0] is special - its release function is never called */ 
 struct loop_func_table *xfer_funcs[MAX_LO_CRYPT] = {
 	&amp;none_funcs,
-	&amp;xor_funcs  
+	&amp;xor_funcs,
+#if CONFIG_BLK_DEV_LOOP_AES
+	[LO_CRYPT_AES] = &amp;funcs_aes,
+#endif
 };
 
+/*
+ *  First number of 'lo_prealloc' is the default number of RAM pages
+ *  to pre-allocate for each device backed loop. Every (configured)
+ *  device backed loop pre-allocates this amount of RAM pages unless
+ *  later 'lo_prealloc' numbers provide an override. 'lo_prealloc'
+ *  overrides are defined in pairs: loop_index,number_of_pages
+ */
+static int lo_prealloc[9] = { 125, 999, 0, 999, 0, 999, 0, 999, 0 };
+#define LO_PREALLOC_MIN 4    /* minimum user defined pre-allocated RAM pages */
+#define LO_PREALLOC_MAX 512  /* maximum user defined pre-allocated RAM pages */
+
+#ifdef MODULE
+MODULE_PARM(lo_prealloc, "1-9i");
+MODULE_PARM_DESC(lo_prealloc, "Number of pre-allocated pages [,index,pages]...");
+#else
+static int __init lo_prealloc_setup(char *str)
+{
+    int x, y, z;
+
+    for(x = 0; x &lt; (sizeof(lo_prealloc) / sizeof(int)); x++) {
+        z = get_option(&amp;str, &amp;y);
+        if(z &gt; 0) lo_prealloc[x] = y;
+        if(z &lt; 2) break;
+    }
+    return 1;
+}
+__setup("lo_prealloc=", lo_prealloc_setup);
+#endif
+
+typedef struct {
+    struct loop_device   lo_orig;
+    struct buffer_head   *lo_bhQue2;
+    struct buffer_head   *lo_bhFree;
+    int                  lo_bhFlsh;
+    int                  lo_bhNeed;
+    wait_queue_head_t    lo_bhWait;
+} LoDevExt;
+static LoDevExt *loop_dev;
+
+#define bhQue0(r) ((r)-&gt;lo_bh)
+#define bhQue1(r) ((r)-&gt;lo_bhtail)
+#define bhQue2(r) (((LoDevExt *)(r))-&gt;lo_bhQue2)
+#define bhFree(r) (((LoDevExt *)(r))-&gt;lo_bhFree)
+#define bhFlsh(r) (((LoDevExt *)(r))-&gt;lo_bhFlsh)
+#define bhNeed(r) (((LoDevExt *)(r))-&gt;lo_bhNeed)
+#define bhWait(r) (((LoDevExt *)(r))-&gt;lo_bhWait)
+
+typedef struct {
+    struct buffer_head  **q0;
+    struct buffer_head  **q1;
+    struct buffer_head  **q2;
+    int                 x0;    
+    int                 x1;    
+    int                 x2;    
+} QueLookUpTable;
+
+static void loop_prealloc_cleanup(struct loop_device *lo)
+{
+    struct buffer_head *bh;
+
+    while((bh = bhFree(lo))) {
+        __free_page(bh-&gt;b_page);
+        bhFree(lo) = bh-&gt;b_reqnext;
+        bh-&gt;b_reqnext = NULL;
+        kmem_cache_free(bh_cachep, bh);
+    }
+}
+
+static int loop_prealloc_init(struct loop_device *lo, int pgCnt)
+{
+    struct buffer_head *bh;
+    int x;
+
+    for(x = 0; x &lt; pgCnt; x++) {
+        bh = kmem_cache_alloc(bh_cachep, SLAB_KERNEL);
+        if(!bh) {
+            loop_prealloc_cleanup(lo);
+            return(1);
+        }
+        bh-&gt;b_page = alloc_page(GFP_KERNEL);
+        if(!bh-&gt;b_page) {
+            bh-&gt;b_reqnext = NULL;
+            kmem_cache_free(bh_cachep, bh);
+            loop_prealloc_cleanup(lo);
+            return(1);
+        }
+        bh-&gt;b_reqnext = bhFree(lo);
+        bhFree(lo) = bh;
+    }
+    return(0);
+}
+
+static void loop_add_queue_last(struct loop_device *lo, struct buffer_head *bh, \
struct buffer_head **q) +{
+    unsigned long flags;
+
+    spin_lock_irqsave(&amp;lo-&gt;lo_lock, flags);
+    if(*q) {
+        bh-&gt;b_reqnext = (*q)-&gt;b_reqnext;
+        (*q)-&gt;b_reqnext = bh;
+    } else {
+        bh-&gt;b_reqnext = bh;
+    }
+    *q = bh;
+    spin_unlock_irqrestore(&amp;lo-&gt;lo_lock, flags);
+
+    if(waitqueue_active(&amp;bhWait(lo))) {
+        wake_up_interruptible(&amp;bhWait(lo));
+    }
+}
+
+static void loop_add_queue_first(struct loop_device *lo, struct buffer_head *bh, \
struct buffer_head **q) +{
+    spin_lock_irq(&amp;lo-&gt;lo_lock);
+    if(*q) {
+        bh-&gt;b_reqnext = (*q)-&gt;b_reqnext;
+        (*q)-&gt;b_reqnext = bh;
+    } else {
+        bh-&gt;b_reqnext = bh;
+        *q = bh;
+    }
+    spin_unlock_irq(&amp;lo-&gt;lo_lock);
+}
+
+static struct buffer_head *loop_get_bh(struct loop_device *lo, int *listNr, \
QueLookUpTable *qt) +{
+    struct buffer_head *bh = NULL, *last;
+
+    spin_lock_irq(&amp;lo-&gt;lo_lock);
+    if((last = *qt-&gt;q0)) {
+        bh = last-&gt;b_reqnext;
+        if(bh == last) {
+            *qt-&gt;q0 = NULL;
+        } else {
+            last-&gt;b_reqnext = bh-&gt;b_reqnext;
+        }
+        bh-&gt;b_reqnext = NULL;
+        *listNr = qt-&gt;x0;
+    } else if((last = *qt-&gt;q1)) {
+        bh = last-&gt;b_reqnext;
+        if(bh == last) {
+            *qt-&gt;q1 = NULL;
+        } else {
+            last-&gt;b_reqnext = bh-&gt;b_reqnext;
+        }
+        bh-&gt;b_reqnext = NULL;
+        *listNr = qt-&gt;x1;
+    } else if((last = *qt-&gt;q2)) {
+        bh = last-&gt;b_reqnext;
+        if(bh == last) {
+            *qt-&gt;q2 = NULL;
+        } else {
+            last-&gt;b_reqnext = bh-&gt;b_reqnext;
+        }
+        bh-&gt;b_reqnext = NULL;
+        *listNr = qt-&gt;x2;
+    }
+    spin_unlock_irq(&amp;lo-&gt;lo_lock);
+    return bh;
+}
+
+static void loop_put_buffer(struct loop_device *lo, struct buffer_head *b)
+{
+    unsigned long flags;
+    int wk;
+
+    spin_lock_irqsave(&amp;lo-&gt;lo_lock, flags);
+    b-&gt;b_reqnext = bhFree(lo);
+    bhFree(lo) = b;
+    wk = bhNeed(lo);
+    spin_unlock_irqrestore(&amp;lo-&gt;lo_lock, flags);
+
+    if(wk &amp;&amp; waitqueue_active(&amp;bhWait(lo))) {
+        wake_up_interruptible(&amp;bhWait(lo));
+    }
+}
+
+static void loop_end_io_transfer_wr(struct buffer_head *bh, int uptodate)
+{
+    struct loop_device *lo = (struct loop_device *)(&amp;loop_dev[MINOR(bh-&gt;b_dev)]);
+    struct buffer_head *rbh = bh-&gt;b_private;
+
+    rbh-&gt;b_reqnext = NULL;
+    rbh-&gt;b_end_io(rbh, uptodate);
+    loop_put_buffer(lo, bh);
+    if(atomic_dec_and_test(&amp;lo-&gt;lo_pending)) {
+        wake_up_interruptible(&amp;bhWait(lo));
+    }
+}
+
+static void loop_end_io_transfer_rd(struct buffer_head *bh, int uptodate)
+{
+    struct loop_device *lo = (struct loop_device *)(&amp;loop_dev[MINOR(bh-&gt;b_dev)]);
+
+    if(!uptodate) {
+        loop_end_io_transfer_wr(bh, uptodate);
+    } else {
+        loop_add_queue_last(lo, bh, &amp;bhQue0(lo));
+    }
+}
+
+static struct buffer_head *loop_get_buffer(struct loop_device *lo,
+                       struct buffer_head *rbh, int fromThread, int rw)
+{
+    struct buffer_head *bh;
+    struct page *p;
+    unsigned long flags;
+
+    spin_lock_irqsave(&amp;lo-&gt;lo_lock, flags);
+    bh = bhFree(lo);
+    if(bh) {
+        bhFree(lo) = bh-&gt;b_reqnext;
+        if(fromThread) bhNeed(lo) = 0;
+    } else {
+        if(fromThread) bhNeed(lo) = 1;
+    }
+    spin_unlock_irqrestore(&amp;lo-&gt;lo_lock, flags);
+    if(!bh) return((struct buffer_head *)0);
+
+    p = bh-&gt;b_page;
+    memset(bh, 0, sizeof(struct buffer_head));
+    bh-&gt;b_page = p;
+
+    bh-&gt;b_private = rbh;
+    bh-&gt;b_size = rbh-&gt;b_size;
+    bh-&gt;b_dev = rbh-&gt;b_rdev;
+    bh-&gt;b_rdev = lo-&gt;lo_device;
+    bh-&gt;b_state = (1 &lt;&lt; BH_Req) | (1 &lt;&lt; BH_Mapped) | (1 &lt;&lt; BH_Lock);
+    bh-&gt;b_data = page_address(bh-&gt;b_page);
+    bh-&gt;b_end_io = (rw == WRITE) ? loop_end_io_transfer_wr : \
loop_end_io_transfer_rd; +    bh-&gt;b_rsector = rbh-&gt;b_rsector + (lo-&gt;lo_offset &gt;&gt; 9);
+    init_waitqueue_head(&amp;bh-&gt;b_wait);
+
+    return bh;
+}
+
 #define MAX_DISK_SIZE 1024*1024*1024
 
 static int compute_loop_size(struct loop_device *lo, struct dentry * lo_dentry, \
kdev_t lodev) @@ -165,8 +513,7 @@
 					lo-&gt;lo_device);
 }
 
-static int lo_send(struct loop_device *lo, struct buffer_head *bh, int bsize,
-		   loff_t pos)
+static int lo_send(struct loop_device *lo, struct buffer_head *bh, loff_t pos)
 {
 	struct file *file = lo-&gt;lo_backing_file; /* kudos to NFsckingS */
 	struct address_space *mapping = file-&gt;f_dentry-&gt;d_inode-&gt;i_mapping;
@@ -184,7 +531,7 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+		int IV = index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
 		size = PAGE_CACHE_SIZE - offset;
 		if (size &gt; len)
 			size = len;
@@ -207,7 +554,6 @@
 		len -= size;
 		offset = 0;
 		index++;
-		pos += size;
 		UnlockPage(page);
 		deactivate_page(page);
 		page_cache_release(page);
@@ -231,7 +577,6 @@
 struct lo_read_data {
 	struct loop_device *lo;
 	char *data;
-	int bsize;
 };
 
 static int lo_read_actor(read_descriptor_t * desc, struct page *page, unsigned long \
offset, unsigned long size) @@ -240,7 +585,7 @@
 	unsigned long count = desc-&gt;count;
 	struct lo_read_data *p = (struct lo_read_data*)desc-&gt;buf;
 	struct loop_device *lo = p-&gt;lo;
-	int IV = page-&gt;index * (PAGE_CACHE_SIZE/p-&gt;bsize) + offset/p-&gt;bsize;
+	int IV = page-&gt;index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
 
 	if (size &gt; count)
 		size = count;
@@ -259,8 +604,7 @@
 	return size;
 }
 
-static int lo_receive(struct loop_device *lo, struct buffer_head *bh, int bsize,
-		      loff_t pos)
+static int lo_receive(struct loop_device *lo, struct buffer_head *bh, loff_t pos)
 {
 	struct lo_read_data cookie;
 	read_descriptor_t desc;
@@ -268,7 +612,6 @@
 
 	cookie.lo = lo;
 	cookie.data = bh-&gt;b_data;
-	cookie.bsize = bsize;
 	desc.written = 0;
 	desc.count = bh-&gt;b_size;
 	desc.buf = (char*)
@@ -280,32 +623,6 @@
 	return desc.error;
 }
 
-static inline int loop_get_bs(struct loop_device *lo)
-{
-	int bs = 0;
-
-	if (blksize_size[MAJOR(lo-&gt;lo_device)])
-		bs = blksize_size[MAJOR(lo-&gt;lo_device)][MINOR(lo-&gt;lo_device)];
-	if (!bs)
-		bs = BLOCK_SIZE;	
-
-	return bs;
-}
-
-static inline unsigned long loop_get_iv(struct loop_device *lo,
-					unsigned long sector)
-{
-	int bs = loop_get_bs(lo);
-	unsigned long offset, IV;
-
-	IV = sector / (bs &gt;&gt; 9) + lo-&gt;lo_offset / bs;
-	offset = ((sector % (bs &gt;&gt; 9)) &lt;&lt; 9) + lo-&gt;lo_offset % bs;
-	if (offset &gt;= bs)
-		IV++;
-
-	return IV;
-}
-
 static int do_bh_filebacked(struct loop_device *lo, struct buffer_head *bh, int rw)
 {
 	loff_t pos;
@@ -314,129 +631,17 @@
 	pos = ((loff_t) bh-&gt;b_rsector &lt;&lt; 9) + lo-&gt;lo_offset;
 
 	if (rw == WRITE)
-		ret = lo_send(lo, bh, loop_get_bs(lo), pos);
+		ret = lo_send(lo, bh, pos);
 	else
-		ret = lo_receive(lo, bh, loop_get_bs(lo), pos);
+		ret = lo_receive(lo, bh, pos);
 
 	return ret;
 }
 
-static void loop_put_buffer(struct buffer_head *bh)
-{
-	if (bh) {
-		__free_page(bh-&gt;b_page);
-		kmem_cache_free(bh_cachep, bh);
-	}
-}
-
-/*
- * Add buffer_head to back of pending list
- */
-static void loop_add_bh(struct loop_device *lo, struct buffer_head *bh)
-{
-	unsigned long flags;
-
-	spin_lock_irqsave(&amp;lo-&gt;lo_lock, flags);
-	if (lo-&gt;lo_bhtail) {
-		lo-&gt;lo_bhtail-&gt;b_reqnext = bh;
-		lo-&gt;lo_bhtail = bh;
-	} else
-		lo-&gt;lo_bh = lo-&gt;lo_bhtail = bh;
-	spin_unlock_irqrestore(&amp;lo-&gt;lo_lock, flags);
-
-	up(&amp;lo-&gt;lo_bh_mutex);
-}
-
-/*
- * Grab first pending buffer
- */
-static struct buffer_head *loop_get_bh(struct loop_device *lo)
-{
-	struct buffer_head *bh;
-
-	spin_lock_irq(&amp;lo-&gt;lo_lock);
-	if ((bh = lo-&gt;lo_bh)) {
-		if (bh == lo-&gt;lo_bhtail)
-			lo-&gt;lo_bhtail = NULL;
-		lo-&gt;lo_bh = bh-&gt;b_reqnext;
-		bh-&gt;b_reqnext = NULL;
-	}
-	spin_unlock_irq(&amp;lo-&gt;lo_lock);
-
-	return bh;
-}
-
-/*
- * when buffer i/o has completed. if BH_Dirty is set, this was a WRITE
- * and lo-&gt;transfer stuff has already been done. if not, it was a READ
- * so queue it for the loop thread and let it do the transfer out of
- * b_end_io context (we don't want to do decrypt of a page with irqs
- * disabled)
- */
-static void loop_end_io_transfer(struct buffer_head *bh, int uptodate)
-{
-	struct loop_device *lo = &amp;loop_dev[MINOR(bh-&gt;b_dev)];
-
-	if (!uptodate || test_bit(BH_Dirty, &amp;bh-&gt;b_state)) {
-		struct buffer_head *rbh = bh-&gt;b_private;
-
-		rbh-&gt;b_end_io(rbh, uptodate);
-		if (atomic_dec_and_test(&amp;lo-&gt;lo_pending))
-			up(&amp;lo-&gt;lo_bh_mutex);
-		loop_put_buffer(bh);
-	} else
-		loop_add_bh(lo, bh);
-}
-
-static struct buffer_head *loop_get_buffer(struct loop_device *lo,
-					   struct buffer_head *rbh)
-{
-	struct buffer_head *bh;
-
-	do {
-		bh = kmem_cache_alloc(bh_cachep, SLAB_NOIO);
-		if (bh)
-			break;
-
-		run_task_queue(&amp;tq_disk);
-		schedule_timeout(HZ);
-	} while (1);
-	memset(bh, 0, sizeof(*bh));
-
-	bh-&gt;b_size = rbh-&gt;b_size;
-	bh-&gt;b_dev = rbh-&gt;b_rdev;
-	spin_lock_irq(&amp;lo-&gt;lo_lock);
-	bh-&gt;b_rdev = lo-&gt;lo_device;
-	spin_unlock_irq(&amp;lo-&gt;lo_lock);
-	bh-&gt;b_state = (1 &lt;&lt; BH_Req) | (1 &lt;&lt; BH_Mapped) | (1 &lt;&lt; BH_Lock);
-
-	/*
-	 * easy way out, although it does waste some memory for &lt; PAGE_SIZE
-	 * blocks... if highmem bounce buffering can get away with it,
-	 * so can we :-)
-	 */
-	do {
-		bh-&gt;b_page = alloc_page(GFP_NOIO);
-		if (bh-&gt;b_page)
-			break;
-
-		run_task_queue(&amp;tq_disk);
-		schedule_timeout(HZ);
-	} while (1);
-
-	bh-&gt;b_data = page_address(bh-&gt;b_page);
-	bh-&gt;b_end_io = loop_end_io_transfer;
-	bh-&gt;b_rsector = rbh-&gt;b_rsector + (lo-&gt;lo_offset &gt;&gt; 9);
-	init_waitqueue_head(&amp;bh-&gt;b_wait);
-
-	return bh;
-}
-
 static int loop_make_request(request_queue_t *q, int rw, struct buffer_head *rbh)
 {
-	struct buffer_head *bh = NULL;
+	struct buffer_head *bh;
 	struct loop_device *lo;
-	unsigned long IV;
 
 	if (!buffer_locked(rbh))
 		BUG();
@@ -444,7 +649,7 @@
 	if (MINOR(rbh-&gt;b_rdev) &gt;= max_loop)
 		goto out;
 
-	lo = &amp;loop_dev[MINOR(rbh-&gt;b_rdev)];
+	lo = (struct loop_device *)(&amp;loop_dev[MINOR(rbh-&gt;b_rdev)]);
 	spin_lock_irq(&amp;lo-&gt;lo_lock);
 	if (lo-&gt;lo_state != Lo_bound)
 		goto inactive;
@@ -469,36 +674,31 @@
 	 * file backed, queue for loop_thread to handle
 	 */
 	if (lo-&gt;lo_flags &amp; LO_FLAGS_DO_BMAP) {
-		/*
-		 * rbh locked at this point, noone else should clear
-		 * the dirty flag
-		 */
-		if (rw == WRITE)
-			set_bit(BH_Dirty, &amp;rbh-&gt;b_state);
-		loop_add_bh(lo, rbh);
+		loop_add_queue_last(lo, rbh, (rw == WRITE) ? &amp;bhQue1(lo) : &amp;bhQue0(lo));
 		return 0;
 	}
 
 	/*
 	 * piggy old buffer on original, and submit for I/O
+	 * device backed, start reads now, queue writes for thread to handle
 	 */
-	bh = loop_get_buffer(lo, rbh);
-	bh-&gt;b_private = rbh;
-	IV = loop_get_iv(lo, bh-&gt;b_rsector);
-	if (rw == WRITE) {
-		set_bit(BH_Dirty, &amp;bh-&gt;b_state);
-		if (lo_do_transfer(lo, WRITE, bh-&gt;b_data, rbh-&gt;b_data,
-				   bh-&gt;b_size, IV))
-			goto err;
+	if(rw == READ) {
+		bh = loop_get_buffer(lo, rbh, 0, rw);
+	} else {
+		bh = NULL;
+	}
+	if(!bh) {
+		/* just queue request and let thread handle alloc later */
+		loop_add_queue_last(lo, rbh, (rw == WRITE) ? &amp;bhQue1(lo) : &amp;bhQue2(lo));
+		return 0;
 	}
-
 	generic_make_request(rw, bh);
 	return 0;
 
 err:
-	if (atomic_dec_and_test(&amp;lo-&gt;lo_pending))
-		up(&amp;lo-&gt;lo_bh_mutex);
-	loop_put_buffer(bh);
+	if (atomic_dec_and_test(&amp;lo-&gt;lo_pending)) {
+		wake_up_interruptible(&amp;bhWait(lo));
+	}
 out:
 	buffer_IO_error(rbh);
 	return 0;
@@ -507,41 +707,23 @@
 	goto out;
 }
 
-static inline void loop_handle_bh(struct loop_device *lo,struct buffer_head *bh)
-{
-	int ret;
-
-	/*
-	 * For block backed loop, we know this is a READ
-	 */
-	if (lo-&gt;lo_flags &amp; LO_FLAGS_DO_BMAP) {
-		int rw = !!test_and_clear_bit(BH_Dirty, &amp;bh-&gt;b_state);
-
-		ret = do_bh_filebacked(lo, bh, rw);
-		bh-&gt;b_end_io(bh, !ret);
-	} else {
-		struct buffer_head *rbh = bh-&gt;b_private;
-		unsigned long IV = loop_get_iv(lo, rbh-&gt;b_rsector);
-
-		ret = lo_do_transfer(lo, READ, bh-&gt;b_data, rbh-&gt;b_data,
-				     bh-&gt;b_size, IV);
-
-		rbh-&gt;b_end_io(rbh, !ret);
-		loop_put_buffer(bh);
-	}
-}
-
 /*
- * worker thread that handles reads/writes to file backed loop devices,
- * to avoid blocking in our make_request_fn. it also does loop decrypting
- * on reads for block backed loop, as that is too heavy to do from
- * b_end_io context where irqs may be disabled.
+ * worker thread that handles all encryption and decryption.
  */
 static int loop_thread(void *data)
 {
 	struct loop_device *lo = data;
-	struct buffer_head *bh;
+	struct buffer_head *bh, *xbh;
+	int x, rw, qi = 0, flushcnt = 0;
+	wait_queue_t waitq;
+	QueLookUpTable qt[4] = {
+		{ &amp;bhQue0(lo), &amp;bhQue1(lo), &amp;bhQue2(lo), 0, 1, 2 },
+		{ &amp;bhQue2(lo), &amp;bhQue0(lo), &amp;bhQue1(lo), 2, 0, 1 },
+		{ &amp;bhQue0(lo), &amp;bhQue2(lo), &amp;bhQue1(lo), 0, 2, 1 },
+		{ &amp;bhQue1(lo), &amp;bhQue0(lo), &amp;bhQue2(lo), 1, 0, 2 }
+	};
 
+	init_waitqueue_entry(&amp;waitq, current);  
 	daemonize();
 	exit_files(current);
 
@@ -566,27 +748,101 @@
 	up(&amp;lo-&gt;lo_sem);
 
 	for (;;) {
-		down_interruptible(&amp;lo-&gt;lo_bh_mutex);
+		add_wait_queue(&amp;bhWait(lo), &amp;waitq);
+		for(;;) {
+			set_current_state(TASK_INTERRUPTIBLE);
+			if(!atomic_read(&amp;lo-&gt;lo_pending)) break;
+
+			x = 0;
+			spin_lock_irq(&amp;lo-&gt;lo_lock);
+			if(bhQue0(lo)) {
+				x = 1;
+			} else if(bhQue1(lo) || bhQue2(lo)) {
+				/* file backed works too because bhNeed(lo) == 0 */
+				if(bhFree(lo) || !bhNeed(lo)) x = 1;
+			}
+			spin_unlock_irq(&amp;lo-&gt;lo_lock);
+			if(x) break;
+
+			schedule();
+		}
+		current-&gt;state = TASK_RUNNING;
+		remove_wait_queue(&amp;bhWait(lo), &amp;waitq);
+
 		/*
-		 * could be upped because of tear-down, not because of
+		 * could be woken because of tear-down, not because of
 		 * pending work
 		 */
-		if (!atomic_read(&amp;lo-&gt;lo_pending))
-			break;
+		if(!atomic_read(&amp;lo-&gt;lo_pending)) break;
+
+		/*
+		 * read queues using alternating order to prevent starvation
+		 */
+		bh = loop_get_bh(lo, &amp;x, &amp;qt[++qi &amp; 3]);
+		if(!bh) continue;
+
+		/*
+		 *  x  list tag    usage(buffer-allocated)
+		 * --- --------    -----------------------
+		 *  0  bhQue0(lo)  dev-read(y) / file-read
+		 *  1  bhQue1(lo)  dev-write(n) / file-write
+		 *  2  bhQue2(lo)  dev-read(n)
+		 */
+		rw = (x == 1) ? WRITE : READ;
+		if((x &gt;= 1) &amp;&amp; !(lo-&gt;lo_flags &amp; LO_FLAGS_DO_BMAP)) {
+			/* loop_make_request didn't allocate a buffer, do that now */
+			xbh = loop_get_buffer(lo, bh, 1, rw);
+			if(!xbh) {
+				run_task_queue(&amp;tq_disk);
+				flushcnt = 0;
+				loop_add_queue_first(lo, bh, (rw == WRITE) ? &amp;bhQue1(lo) : &amp;bhQue2(lo));
+				/* bhNeed(lo) should be 1 now, go back to sleep */
+				continue;
+			}
+			if(rw == WRITE) {
+				if(lo_do_transfer(lo, WRITE, xbh-&gt;b_data, bh-&gt;b_data, xbh-&gt;b_size, \
xbh-&gt;b_rsector)) { +					loop_put_buffer(lo, xbh);
+					buffer_IO_error(bh);
+					atomic_dec(&amp;lo-&gt;lo_pending);
+					continue;
+				}
+			}
+			generic_make_request(rw, xbh);
+
+			/* start I/O if there are no more requests lacking buffers */
+			x = 0;
+			spin_lock_irq(&amp;lo-&gt;lo_lock);
+			if(!bhQue1(lo) &amp;&amp; !bhQue2(lo)) x = 1;
+			spin_unlock_irq(&amp;lo-&gt;lo_lock);
+			if(x || (++flushcnt &gt;= bhFlsh(lo))) {
+				run_task_queue(&amp;tq_disk);
+				flushcnt = 0;
+			}
 
-		bh = loop_get_bh(lo);
-		if (!bh) {
-			printk("loop: missing bh\n");
+			/* request not completely processed yet */
 			continue;
 		}
-		loop_handle_bh(lo, bh);
+		if(lo-&gt;lo_flags &amp; LO_FLAGS_DO_BMAP) {
+			/* request is for file backed device */
+			x = do_bh_filebacked(lo, bh, rw);
+			bh-&gt;b_reqnext = NULL;
+			bh-&gt;b_end_io(bh, !x);
+		} else {
+			/* device backed read has completed, do decrypt now */
+			xbh = bh-&gt;b_private;
+			/* must not use bh-&gt;b_rsector as IV, as it may be modified by LVM at this point \
*/ +			/* instead, recompute IV from original request */
+			x = lo_do_transfer(lo, READ, bh-&gt;b_data, xbh-&gt;b_data, bh-&gt;b_size, xbh-&gt;b_rsector \
+ (lo-&gt;lo_offset &gt;&gt; 9)); +			xbh-&gt;b_reqnext = NULL;
+			xbh-&gt;b_end_io(xbh, !x);
+			loop_put_buffer(lo, bh);
+		}
 
 		/*
-		 * upped both for pending work and tear-down, lo_pending
+		 * woken both for pending work and tear-down, lo_pending
 		 * will hit zero then
 		 */
-		if (atomic_dec_and_test(&amp;lo-&gt;lo_pending))
-			break;
+		if(atomic_dec_and_test(&amp;lo-&gt;lo_pending)) break;
 	}
 
 	up(&amp;lo-&gt;lo_sem);
@@ -620,7 +876,22 @@
 	if (!(file-&gt;f_mode &amp; FMODE_WRITE))
 		lo_flags |= LO_FLAGS_READ_ONLY;
 
+	bhFree(lo) = bhQue2(lo) = bhQue1(lo) = bhQue0(lo) = NULL;
+	bhNeed(lo) = bhFlsh(lo) = 0;
+	init_waitqueue_head(&amp;bhWait(lo));
 	if (S_ISBLK(inode-&gt;i_mode)) {
+		int i, x = lo_prealloc[0];
+		for(i = 1; i &lt; (sizeof(lo_prealloc) / sizeof(int)); i += 2) {
+			if(lo_prealloc[i+1] &amp;&amp; (lo-&gt;lo_number == lo_prealloc[i])) {
+				x = lo_prealloc[i+1];
+				break;
+			}
+		}
+		bhFlsh(lo) = (x * 3) / 4;
+		if(loop_prealloc_init(lo, x)) {
+			error = -ENOMEM;
+			goto out_putf;
+		}
 		lo_device = inode-&gt;i_rdev;
 	} else if (S_ISREG(inode-&gt;i_mode)) {
 		struct address_space_operations *aops = inode-&gt;i_mapping-&gt;a_ops;
@@ -664,9 +935,9 @@
 	if (!bs)
 		bs = BLOCK_SIZE;
 
+	if(S_ISREG(inode-&gt;i_mode)) bs = BLOCK_SIZE;
 	set_blocksize(dev, bs);
 
-	lo-&gt;lo_bh = lo-&gt;lo_bhtail = NULL;
 	kernel_thread(loop_thread, lo, CLONE_FS | CLONE_FILES | CLONE_SIGHAND);
 	down(&amp;lo-&gt;lo_sem);
 
@@ -724,12 +995,14 @@
 
 	spin_lock_irq(&amp;lo-&gt;lo_lock);
 	lo-&gt;lo_state = Lo_rundown;
-	if (atomic_dec_and_test(&amp;lo-&gt;lo_pending))
-		up(&amp;lo-&gt;lo_bh_mutex);
+	if(atomic_dec_and_test(&amp;lo-&gt;lo_pending)) {
+		wake_up_interruptible(&amp;bhWait(lo));
+	}
 	spin_unlock_irq(&amp;lo-&gt;lo_lock);
 
 	down(&amp;lo-&gt;lo_sem);
 
+	loop_prealloc_cleanup(lo);
 	lo-&gt;lo_backing_file = NULL;
 
 	loop_release_xfer(lo);
@@ -836,7 +1109,7 @@
 	dev = MINOR(inode-&gt;i_rdev);
 	if (dev &gt;= max_loop)
 		return -ENODEV;
-	lo = &amp;loop_dev[dev];
+	lo = (struct loop_device *)(&amp;loop_dev[dev]);
 	down(&amp;lo-&gt;lo_ctl_mutex);
 	switch (cmd) {
 	case LOOP_SET_FD:
@@ -879,7 +1152,7 @@
 static int lo_open(struct inode *inode, struct file *file)
 {
 	struct loop_device *lo;
-	int	dev, type;
+	int	dev;
 
 	if (!inode)
 		return -EINVAL;
@@ -891,13 +1164,9 @@
 	if (dev &gt;= max_loop)
 		return -ENODEV;
 
-	lo = &amp;loop_dev[dev];
+	lo = (struct loop_device *)(&amp;loop_dev[dev]);
 	MOD_INC_USE_COUNT;
 	down(&amp;lo-&gt;lo_ctl_mutex);
-
-	type = lo-&gt;lo_encrypt_type; 
-	if (type &amp;&amp; xfer_funcs[type] &amp;&amp; xfer_funcs[type]-&gt;lock)
-		xfer_funcs[type]-&gt;lock(lo);
 	lo-&gt;lo_refcnt++;
 	up(&amp;lo-&gt;lo_ctl_mutex);
 	return 0;
@@ -906,7 +1175,7 @@
 static int lo_release(struct inode *inode, struct file *file)
 {
 	struct loop_device *lo;
-	int	dev, type;
+	int	dev;
 
 	if (!inode)
 		return 0;
@@ -919,13 +1188,9 @@
 	if (dev &gt;= max_loop)
 		return 0;
 
-	lo = &amp;loop_dev[dev];
+	lo = (struct loop_device *)(&amp;loop_dev[dev]);
 	down(&amp;lo-&gt;lo_ctl_mutex);
-	type = lo-&gt;lo_encrypt_type;
 	--lo-&gt;lo_refcnt;
-	if (xfer_funcs[type] &amp;&amp; xfer_funcs[type]-&gt;unlock)
-		xfer_funcs[type]-&gt;unlock(lo);
-
 	up(&amp;lo-&gt;lo_ctl_mutex);
 	MOD_DEC_USE_COUNT;
 	return 0;
@@ -955,11 +1220,13 @@
 int loop_unregister_transfer(int number)
 {
 	struct loop_device *lo; 
+	int x, type;
 
 	if ((unsigned)number &gt;= MAX_LO_CRYPT)
 		return -EINVAL; 
-	for (lo = &amp;loop_dev[0]; lo &lt; &amp;loop_dev[max_loop]; lo++) { 
-		int type = lo-&gt;lo_encrypt_type;
+	for(x = 0; x &lt; max_loop; x++) {
+		lo = (struct loop_device *)(&amp;loop_dev[x]);
+		type = lo-&gt;lo_encrypt_type;
 		if (type == number) { 
 			xfer_funcs[type]-&gt;release(lo);
 			lo-&gt;transfer = NULL; 
@@ -995,7 +1262,7 @@
 			      S_IFBLK | S_IRUSR | S_IWUSR | S_IRGRP,
 			      &amp;lo_fops, NULL);
 
-	loop_dev = kmalloc(max_loop * sizeof(struct loop_device), GFP_KERNEL);
+	loop_dev = kmalloc(max_loop * sizeof(LoDevExt), GFP_KERNEL);
 	if (!loop_dev)
 		return -ENOMEM;
 
@@ -1010,8 +1277,8 @@
 	blk_queue_make_request(BLK_DEFAULT_QUEUE(MAJOR_NR), loop_make_request);
 
 	for (i = 0; i &lt; max_loop; i++) {
-		struct loop_device *lo = &amp;loop_dev[i];
-		memset(lo, 0, sizeof(struct loop_device));
+		struct loop_device *lo = (struct loop_device *)(&amp;loop_dev[i]);
+		memset(lo, 0, sizeof(LoDevExt));
 		init_MUTEX(&amp;lo-&gt;lo_ctl_mutex);
 		init_MUTEX_LOCKED(&amp;lo-&gt;lo_sem);
 		init_MUTEX_LOCKED(&amp;lo-&gt;lo_bh_mutex);
@@ -1026,13 +1293,18 @@
 	for (i = 0; i &lt; max_loop; i++)
 		register_disk(NULL, MKDEV(MAJOR_NR, i), 1, &amp;lo_fops, 0);
 
+	for(i = 0; i &lt; (sizeof(lo_prealloc) / sizeof(int)); i += 2) {
+		if(!lo_prealloc[i]) continue;
+		if(lo_prealloc[i] &lt; LO_PREALLOC_MIN) lo_prealloc[i] = LO_PREALLOC_MIN;
+		if(lo_prealloc[i] &gt; LO_PREALLOC_MAX) lo_prealloc[i] = LO_PREALLOC_MAX;
+	}
 	printk(KERN_INFO "loop: loaded (max %d devices)\n", max_loop);
 	return 0;
 
-out_sizes:
-	kfree(loop_dev);
 out_blksizes:
 	kfree(loop_sizes);
+out_sizes:
+	kfree(loop_dev);
 	printk(KERN_ERR "loop: ran out of memory\n");
 	return -ENOMEM;
 }


-- 
&gt; G r e g  L o u i s          | gpg public key:      |
&gt; http://www.bgl.nu/~glouis |   finger greg@bgl.nu |

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010929203514</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-09-29 20:35:14-0400</timestampReceived><subject>Re: new version of loop.c patch</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; I am a bit confused as to what you mean with this message. What is "in place
&gt; encryption"? Your previous message says that loop-aes in fact does do
&gt; encrypted swap. Can you give us some information on how that might otherwise
&gt; work?

In-place encryption == ciphertext overwrites original plaintext in memory.

Loop-AES and HVR cryptoapi use separate buffers for ciphertext and plaintext
so that original plaintext is not overwritten.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010929210413</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-09-29 21:04:13-0400</timestampReceived><subject>Re: newbie question on sha1 and md5</subject><body>

On Sat, Sep 29, 2001 at 04:26:47PM +0200, Marc Mutz wrote:
&gt; On Thursday 27 September 2001 15:36, zentara wrote:
&gt; &lt;snip&gt;
&gt; &gt; I built them into the kernel, and they report registration on boot,
&gt; &gt; but how do I actually use them? I know how to use the md5sum and
&gt; &gt; sha1sum utilities that come with Suse, but what trick is there to
&gt; &gt; using the cryptoapi versions built into a kernel?
&gt; &lt;snip&gt;
&gt; 
&gt; They're for use by in-kernel modules. They're not for use by usespace. 
&gt; if you need userspace crypto, use gcrypt (and until that is stable 
&gt; openssl).
&gt; 

Another option is to look at the source code for
losetup and doc's for HVR's API and then modify the sources
yourself. You could probably discuss this with the
debian maintainer of the package about making it mainstream
debian; if done with compile switches if might even go
upstream to the the current author of the code base for
the applications of interest.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930061225</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-09-30 06:12:25-0400</timestampReceived><subject>Re: Possible to determine crypto-type from crypted file?</subject><body>

Jonas Larsson wrote:
&gt; 
&gt; &gt; &gt; Is it possible to determine what crypto-type (aes, twofish, blowfish,
&gt; &gt; &gt; etc) that has been used to crypt a file by just looking in the file
&gt; &gt; &gt; examining its content?
&gt; &gt;
&gt; &gt;No.
&gt; 
&gt; How can you be so sure about this? Can your refer to some document
&gt; proving/stating that?

Any good crypto will look like random garbage. The better it is, the
closer to apparent randomness it will appear.  Any non-randomness
gives an attacker a lever to crack it. This may or may not matter in
practice, but it is definitely a weakness in theory.

There's a whole bunch of math about the relation between crypto and
randomness, but I've only looked at a little of it and some of that
was over my head, so I won't try to talk about it.

So any two good algorithms will both produce apparently completely
random stuff. So you cannot distinguish the two.

One fairly well-known example is from the British attacks on the
German Enigma machine in WW II. One property of the machine was 
that no letter could ever encrypt to itself. Any other letter in
the alphabet, but not itself.

An analyst noticed that one moderately long message used every
letter except 'L'. A German doing some testing had just hit the
L key a few 100 times. This is a fairly small non-randomness, but
it was valuable to the Brits. I forget whether it gave them that
day's key or more knowledge of machine internals or what, but I
do recall that it produced some sort of breakthrough.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930195646</emailId><senderName>Hauke Johannknecht</senderName><senderEmail>ash@ash.de</senderEmail><timestampReceived>2001-09-30 19:56:46-0400</timestampReceived><subject>RE: Start crypted volumes at bootup?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----

On Sun, 30 Sep 2001, IT3 Stuart B. Tener, USNR-R wrote:

&gt; 	How do you create such a beast?

take a look at
	/usr/src/linux/Documentation/initrd.txt

also some distributions (at least SuSE) uses an initrd by
default (for loading scsi-modules afair), so it should be trivial
to add the crypto-modules and modified losetup/mount there.

if anyone is going to try this i would be glad to help in
exchange for half a page of writeup/howto or even a simple
shell-history snippet about this.

Gruss,
  Hauke

- -- 
Hauke Johannknecht        Berlin / Germany        HJ422-RIPE
Use PGP ! -&gt; lynx -dump http://www.ash.de/ash.asc | pgp -kaf
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iQEVAwUBO7d5AXO2fBh4VhzZAQFIpgf+IxwSTn9XwSP8KwTbUpJ9JVGjQIZLWgvY
/fCqrewkGiGWH8VfpHLAdyqM/bFLShIFXvZxBAnCw4kQS/TD5T72tCDAgHTFo9rh
kjdiBvx0I613+SkJyKzKX7dGmjqhzEvuUTsS04eh5WeRv5vxy4b5FEsrBA3QvLsY
DtT4viiddSa1eR+hwzrxY/nPK98K3AmgvsXEIps7w2pbZqMxuRKDJJ9VuiUr35c1
jwYOHX2av48iyb+sOl1rvi77suMwHWl0NzPMAuqAsS6UgbQyw6d/fOdGqFB5riqF
Fa+CljDk79jfD7eLuz31LCBINqu5fmuumWsS78rrgDQ1xH+SX+TWXQ==
=zFc9
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930212150</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-09-30 21:21:50-0400</timestampReceived><subject>RE: Announce loop-AES-v1.4e file/swap crypto package</subject><body>

Mr. Ruusu:

	So a 256-bit (or greater) hash adds an immense level of power to the pass
phrase then!


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, September 30, 2001 2:21 PM

-----Original Message-----
From: root@monster.misty.com [mailto:root@monster.misty.com]On Behalf Of
Jari Ruusu
Sent: Sunday, September 30, 2001 1:38 PM
To: stuart@bh90210.net
Cc: peter k.; linux-crypto@nl.linux.org
Subject: Re: Announce loop-AES-v1.4e file/swap crypto package

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;         So if I understand you correctly, it is the "seed" which is
allowing us to
&gt; choose our own less secure phrases, and the seed makes it that much
tougher?
&gt; So buy using the longest "bitwise" seed we can, we are more able to feel
&gt; comfortable with lower entropy phrases?

Seed prevents an attacker from precomputing hashes of every dictionary
string he has in _advance_. Seed _slows_ down dictionary attack as an
attacker would have to recompute the hashes for each different seed, and he
can't even start doing that until he knows your seed.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010930223148</emailId><senderName>Rob McGee</senderName><senderEmail>rob0@runbox.com</senderEmail><timestampReceived>2001-09-30 22:31:48-0400</timestampReceived><subject>Re: Start crypted volumes at bootup? / LM8.1 Upgrade (make xconfig)</subject><body>

On Sun, Sep 30, 2001 at 03:09:48PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Yeah, it is off topic. However, there are so many intelligent minds here, I
&gt; figured I would give it a go.

No problem. Maybe somebody will come along who knows.

&gt; I know to use "make menuconfig", but I have a
&gt; customer. One who paid me to upgrade his system, and he is now asking me why
&gt; he paid to loose functionality. I cannot give him that answer, but I may end
&gt; up having to reduce what I charged him to upgrade his system, which I prefer
&gt; not to do.

My philosophy, both as a consultant and an end-user, is "if it ain't
broke don't fix it." But I sure understand the temptation, since you can
upgrade so frequently and cheaply (as opposed to MS charging US$90 for
minor incremental upgrades to Windows) to stay on the cutting edge.

I guess that's why they call it "cutting edge" -- you get cut. :)

   Rob - /dev/rob0

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802193519</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-08-02 19:35:19-0400</timestampReceived><subject>Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Michael" == Michael T Babcock &lt;mbabcock@fibrespeed.net&gt; writes:

&gt;&gt; &gt; Yes, actually, his message was perfectly MIME compliant.  Read the
&gt;&gt; &gt; source.  &lt;snip&gt;
&gt;&gt; 
&gt;&gt; OK, please show me the RFC that defines application/ms-tnef :-)

Michael&gt; You might want to be silent instead of sounding foolish.

Michael&gt; application/ms-tnef is the type of data within a segment of the
Michael&gt; MIME message.  The message is MIME compliant -- perfectly so.

RFC2046, section 6 (Experimental Media Type Values):
,----
| Any format without a rigorous and public definition must be named with
| an "X-" prefix...
`----

I believe that is what Marc was referring to.

So the MIME type should have been called "application/x-ms-tnef".

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/651854DF71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7aat0ZRhU33H9o38RAtdOAJ9laphseoBHYDi7UPw9NafTWbTvWACfbeiu
PzFOo7zoCfxNc8GFKm+jRFI=
=AoYo
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805135959</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-08-05 13:59:59-0400</timestampReceived><subject>[Fwd: Re: Announce loop-AES-v1.3b file crypto package]</subject><body>

Message for an old thread, found sitting here unsent.

"IT3 Stuart B. Tener, USNR-R" wrote:

&gt;         I think that without having to learn a great deal about the rules of
&gt; entropy weighting, and such, a nice thing to do would be to determine (I
&gt; think Peter will wonder about this too), what would provide a strong and
&gt; usable encryption standard for appliance operator users? I am not so into
&gt; crypto that I care to learn all about entropy and such, I am interested in
&gt; learning some basic rules, which I can apply to using these technologies.

One basic, and often distinctly inconvenient, rule is the old "chain is as
strong as its weakest link" line. 

For example, if an attacker can guess your passphrase in some practical
(depending on attacker resources) number of tries, then he has an attack,
no matter how strong everything else is. On the other hand, if your
passphrase is impossible to remember so you write it down, then there's
another possible attack.
  
&gt; a) What encryption standard is strongest, and can be used to not slow my
&gt; work down to such a point that I start to dislike using the encryption at
&gt; all? I will presume that AES falls into this category

It certainly should be. The process was open and public, many of the
world's best-known cryptographers were involved, and no-one found holes.
Of course, there are no guarantees.

&gt; b) What rules ought we follow to generate a useful pass phrase, which will
&gt; keep us secure?

Basically, it has to be something you can remember perfectly, but guessing
it must be impractical for an attacker. 

Entropy is just a measure of how  hard that guessing is. For example, saying
a passphrase has 20 bits of entropy can mean there are 2^20 possibilities,
all equally likley. Or perhaps there are more possibilities, but with some
bias in their likelyhoods so the search is only 2^20 hard.

Normal English text has little entropy, certainly under 3 bits/character,
so almost any meaningful chunk of English is a bad passphrase. Any other
language is likely just as bad. Mixing languages should make an attack
a little harder.

Any choice from a short list provides little entropy if the attacker
can be expected to discover the list. There are &lt; 64 US states, so
&lt; 6 bits per state name.  

A well-known quote is worse than random text. An attacker might construct
a list of, say, the 1000 best-known quotes in English and try them all.
Or even 100,000. If the attacker knows the target's politics, taste in
music or favorite authors, that knowledge can guide the search.

Anything the attacker can reasonably discover -- your date of birth,
social security number, ... -- cannot be counted on to provide much
entropy.

The suggestion that started this thread -- using randomly-chosen words
from a long list so you get about 15 bits per word, then adding a few
other little fiddles to get a passphrase with 90-bit entropy -- is a
good one.

People have used mangled quotes. Instead of following on predictably
(zero entorpy) from "Now is the time for all good men ...", use
"yesterday is the motorcycle for some bleeding wombats to ...".
Correctly chosen, such a sequence can be memorable and improbable.

However, it might not be all that hard to write a program to generate
these mangled versions, given a list of quotes, a dictionary and a 
set of replacement rules. The rules might say, for example, that a noun
can only be replaced with another noun

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010806071715</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-08-06 07:17:15-0400</timestampReceived><subject>Re: Questions about implementation.</subject><body>

On Mon, 6 Aug 2001, lam wai wm wrote:

&gt; Hi all,
&gt;
&gt; I'm a student who want to implement a kernel module with the
&gt; functionality of linux/crypto.h.  I have read the program in
&gt; the directory of testing and I try to place some code in the
&gt; kernel module.  But when I compile the kernel module, it prompt
&gt; me that.
&gt;
&gt; tester2.c:125: warning: implicit declaration of function
&gt; `cryptoapi_init'
&gt; tester2.c:127: warning: implicit declaration of function
&gt; `find_cipher_by_id'

are you compiling within kernel space? i.e. is __KERNEL__ defined?

&gt; And I've tried to look for the function of "find_cipher_by_id"
&gt; in the source code, but I could not find it.  Would you please
&gt; tell me where can I look for it.

it's defined in crypto.h and implemented in cryptoapi.c

btw, I'd really recommend you to take a look at
http://cryptoapi.sourceforge.net/ as well... since that branch is more
up to date...

&gt; In the kernel module that I'm implementating, could you give
&gt; some advices/pointers to me that I can implement the kernel
&gt; module with the functionality of crypto.h.  Because I've stuck
&gt; for serveral days and try to solve it, but I still have no idea
&gt; how can I rememdy these problems.

if you want you can send me parts of your sourcecode, so I can tell you
exactly what's wrong...

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805233703</emailId><senderName>lam wai wm</senderName><senderEmail>00028911@brookes.ac.uk</senderEmail><timestampReceived>2001-08-05 23:37:03-0400</timestampReceived><subject>Questions about implementation.</subject><body>

Hi all,

I'm a student who want to implement a kernel module with the 
functionality of linux/crypto.h.  I have read the program in 
the directory of testing and I try to place some code in the 
kernel module.  But when I compile the kernel module, it prompt 
me that.

tester2.c:125: warning: implicit declaration of function 
`cryptoapi_init'
tester2.c:127: warning: implicit declaration of function 
`find_cipher_by_id'

And I've tried to look for the function of "find_cipher_by_id" 
in the source code, but I could not find it.  Would you please 
tell me where can I look for it.

In the kernel module that I'm implementating, could you give 
some advices/pointers to me that I can implement the kernel 
module with the functionality of crypto.h.  Because I've stuck 
for serveral days and try to solve it, but I still have no idea 
how can I rememdy these problems.


Thanks, thanks a lot

marco.





Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802190629</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-08-02 19:06:29-0400</timestampReceived><subject>[OT] Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 02 August 2001 20:20, Michael T. Babcock wrote:
&gt; &gt; &gt; Yes, actually, his message was perfectly MIME compliant.  Read
&gt; &gt; &gt; the source.
&gt; &gt;
&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; &gt; OK, please show me the RFC that defines application/ms-tnef :-)
&gt;
&gt; You might want to be silent instead of sounding foolish.
&gt;
&gt; application/ms-tnef is the type of data within a segment of the MIME
&gt; message.

Of course.

&gt; The message is MIME compliant -- perfectly so.  It began and ended
&gt; with proper MIME separators and defined the data types of each of the
&gt; sections of the message, including the plaintext version your mail
&gt; reader should have presented you with.

Yes, this is correct.

&gt; If I'm not mistaken, the
&gt; ms-tnef section may have even been
&gt; labelled as alternative content; not as an attachment.
&gt;

Here you are wrong. It's actually multipart/mixed. He attached an 
example program or something like that. But instead of using the MIME 
way (attaching single files in a nested multipart/mixed or 
multipart/related body part), he used the Win way: application/ms-tnef, 
which KMail, being a compliant MIME mailer, interprets as 
application/octet-stream.

This is where my criticism started (that I can't read the attachment 
because it's some win-proprietary stuff instead of plain MIME).

&gt; MIME compliance has _nothing_ to do with the data inside the MIME
&gt; sections if they are properly separated and labelled.

Also this is correct.

&gt; Your complaint
&gt; is likely that his mail
&gt; reader sends a second copy of the E-mail in a non-ASCII format;
&gt; properly MIME encapsulated.

No, it's that he sends attachments in a win-proprietary format instead 
of in multiparts's (I must admit that I haven't got a clue about what 
application/ms-tnef is; I guess it's some kind of archive format or so).

&gt; If so, that is a potentially valid
&gt; complaint, but has little to
&gt; nothing to do with its MIME compliance.
&gt;

I must admit that labelling it "not MIME compliant" was a bit 
oversimplified. Please excuse me. I hope I have made clear what I 
meant, now.

&gt; Why don't _you_ read the RFCs?

I have. Bet that I have ;-)

&gt; --
&gt; Michael T. Babcock
&gt; CTO, FibreSpeed
&lt;snip&gt;

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7acCD3oWD+L2/6DgRAjLIAKDmXsxeFbbffBBGr8+TnWfwT1ePqQCgiLsd
QvBa59w4tX5tNLapT0ecuiA=
=cLv9
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010804181149</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-04 18:11:49-0400</timestampReceived><subject>Announce loop-AES-v1.3d file crypto package</subject><body>

In short: If file crypto is all you need, this package is a hassle free
replacement for international crypto patch.

This package provides loadable Linux kernel module (loop.o) that has AES
cipher built-in. The AES cipher can be used to encrypt local file systems
and disk partitions. For more information about compiling and using the
driver, see the README file in the package.

Features:
- No source modifications to kernel. No patch hassles when a new version of
  kernel is released.
- Works with 2.4, 2.2 and 2.0 kernels.
- AES cipher is used in CBC mode. Supports 128, 192 and 256 bit keys.
- Passwords hashed with SHA-256, SHA-384 or SHA-512.
- 512 byte based IV. IV is immune to variations in transfer size and does
  not depend on file system block size.

Changes since previous release:
- loop.c-2.4.original updated to Alan Cox's 2.4.7-ac5 version (ext3
  changes), and Makefile updated to compile that version on older kernels as
  well.

Kernel 2.4 users who use file backed loop devices on ext3 filesystem AND
your kernel IS NOT stock Linus or Alan kernel, should upgrade to this
version. No need to upgrade if you use older 2.2 or 2.0 kernels.

bzip2 compressed tarball is here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3d.tar.bz2
    md5sum 9480d6e6a1ebe96ee7499fd8cb4eaffa

PGP signature file, my public key, and fingerprint here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3d.tar.bz2.sign
    http://loop-aes.sourceforge.net/PGP-public-key.asc
    1024/3A220F51 5B 4B F9 BB D3 3F 52 E9  DB 1D EB E3 24 0E A9 DD

Regards, 
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010811063435</emailId><senderName>"Adam J. Richter"</senderName><senderEmail>adam@yggdrasil.com</senderEmail><timestampReceived>2001-08-11 06:34:35-0400</timestampReceived><subject>Suggested kerneli changes</subject><body>

	I would like to suggest the following kerneli changes, which
I am willing to implement if contributions from a US citizen are
considered OK by the kerneli maintainer, and if the reaction to them
is generally positive.

	1. I want to make the Initial Value change that I described in
	   my previous email so that the IV is independent of both
	   machine page size and device block size.

	2. I want to change cryptoapi so that loop devices can be
	   configued by ioctl's that use strings rather that cipher
	   ID's and that allow for information like key length to
	   be retrieved by the ioctl.  That way user level programs
	   like losetup will not have to be updated to reflect the
	   specific set of ciphers available in the kernel cryptoapi
	   patch, and the kernel could automatically try to load the
	   cipher-foo module when it is asked to configure an unknown
	   cipher "foo" (with the usual precaustions about bogus
	   module names).  It should be easier to get the smaller change
	   accepted in util_linux.

	3. I want to separate the resulting core cryptoapi code
	   from the ciphers.  The cryptoapi core would then be more
	   manageable patch, which we should campaign to get included
	   into the standard Linux kernels.  The ciphers could be
	   distributed as one or more separate packages that could
	   build as standalone modules without needing to patch
	   the kernel.

	Does this plan look OK?

Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104
adam@yggdrasil.com     \ /                  San Jose, California 95129-1034
+1 408 261-6630         | g g d r a s i l   United States of America
fax +1 408 261-6631      "Free Software For The Rest Of Us."

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010811062330</emailId><senderName>"Adam J. Richter"</senderName><senderEmail>adam@yggdrasil.com</senderEmail><timestampReceived>2001-08-11 06:23:30-0400</timestampReceived><subject>Standardizing encrypted device formats</subject><body>


	I have recently set up a couple of my computers to run with
an encrypted loopback root filesystem (with a small unencrypted
/boot partition that does some fancy initial ramdisk machinations).
I have done this both with loop-AES and with the kerneli patches,
once I saw Jari Ruusu's comment about the problem with cryptoapi
being that its initial value calcuations are dependent on block size.

	I believe that Jari addresses this initial value problem
in his loop-AES code with the following change to drivers/block/loop.c:

@@ -181,7 +273,7 @@
 	len = bh-&gt;b_size;
 	data = bh-&gt;b_data;
 	while (len &gt; 0) {
-		int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
+		int IV = index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
 		size = PAGE_CACHE_SIZE - offset;
 		if (size &gt; len)

	...and a few other places with essentially the same change.

	The problem with Jari's formula is that it will give different
initial values on architectures with a different PAGE_CACHE_SIZE.

	I propose that we adopt a formula of the initial value being
the low 32 bits of:  (byte_offset + (byte_offset&gt;&gt;32)).

	In other words, the calculation in the above patch would
become something like this, which I am just typing in without testing:

	u32 IV = (index&gt;&gt;PAGE_CACHE_SHIFT) + offset +
		(index &lt;&lt; (32-PAGE_CACHE_SHIFT));

	I would really like to see this standardized quickly, because
changing formats would be a really pain once a lot of people start
running completely encrypted systems.

Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104
adam@yggdrasil.com     \ /                  San Jose, California 95129-1034
+1 408 261-6630         | g g d r a s i l   United States of America
fax +1 408 261-6631      "Free Software For The Rest Of Us."

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010811094158</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-11 09:41:58-0400</timestampReceived><subject>Re: Standardizing encrypted device formats</subject><body>

"Adam J. Richter" wrote:
&gt;         I have recently set up a couple of my computers to run with
&gt; an encrypted loopback root filesystem (with a small unencrypted
&gt; /boot partition that does some fancy initial ramdisk machinations).
&gt; I have done this both with loop-AES and with the kerneli patches,
&gt; once I saw Jari Ruusu's comment about the problem with cryptoapi
&gt; being that its initial value calcuations are dependent on block size.
&gt; 
&gt;         I believe that Jari addresses this initial value problem
&gt; in his loop-AES code with the following change to drivers/block/loop.c:
&gt; 
&gt; @@ -181,7 +273,7 @@
&gt;         len = bh-&gt;b_size;
&gt;         data = bh-&gt;b_data;
&gt;         while (len &gt; 0) {
&gt; -               int IV = index * (PAGE_CACHE_SIZE/bsize) + offset/bsize;
&gt; +               int IV = index * (PAGE_CACHE_SIZE &gt;&gt; 9) + (offset &gt;&gt; 9);
&gt;                 size = PAGE_CACHE_SIZE - offset;
&gt;                 if (size &gt; len)
&gt; 
&gt;         ...and a few other places with essentially the same change.
&gt; 
&gt;         The problem with Jari's formula is that it will give different
&gt; initial values on architectures with a different PAGE_CACHE_SIZE.

IV computation in loop-AES is correct. IV is computed in 512 byte units
regardless or PAGE_CACHE_SIZE, meaning that each 512 byte chunk has unique
IV. This is optimal because minimum addressable unit on block devices is 512
bytes.

&gt;         I propose that we adopt a formula of the initial value being
&gt; the low 32 bits of:  (byte_offset + (byte_offset&gt;&gt;32)).
&gt; 
&gt;         In other words, the calculation in the above patch would
&gt; become something like this, which I am just typing in without testing:
&gt; 
&gt;         u32 IV = (index&gt;&gt;PAGE_CACHE_SHIFT) + offset +
&gt;                 (index &lt;&lt; (32-PAGE_CACHE_SHIFT));
&gt; 
&gt;         I would really like to see this standardized quickly, because
&gt; changing formats would be a really pain once a lot of people start
&gt; running completely encrypted systems.

Your proposition does not make sense, sorry. Everyone dealing with loop IV
(at least me, Herbert Valerio Riedel, Jens Axboe and Andrea Arcangeli)
agree that 512 byte units is the best solution.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805003835</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-08-05 00:38:35-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

On 2001-08-04, Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; wrote:

&gt; This package provides loadable Linux kernel module (loop.o) that has
&gt; AES cipher built-in. The AES cipher can be used to encrypt local file
&gt; systems and disk partitions. For more information about compiling and
&gt; using the driver, see the README file in the package.

My laptop really wants swsusp (suspend to swap), which of course wants to
be encrypted.  There's a long-standing caveat that using loop-encryption
for a swap partition will blow up (memory allocations are done in the
encrypt+write out path, which will die when we are swapping).  However,
it's not clear to me if this is a problem with the 'crypto-api' patches or
not (for instance, ppdd is supposed to be able to handle it, so it's
probably not a problem with the basic loop.o driver).  Do you know if
loop-AES does/should have a problem with encrypted swap?  Or if, even
better, it's tested and known to work?  

Thanks,

Hank Leininger &lt;hlein@progressive-comp.com&gt; 
Who is too lazy to just set this up &amp; beat on it until smoke comes out.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010813105232</emailId><senderName>S√∏ren Kongstad</senderName><senderEmail>kongstad@kongstad.net</senderEmail><timestampReceived>2001-08-13 10:52:32-0400</timestampReceived><subject>Cant compile cryptoapi from CVS in cryptoapi.sourceforge.net</subject><body>

Hi
I am rather new in linux programming, and I am having problems with compiling 
the CVS source for cryptoapi. There is no configure file in the CVS archive, 
and I dont know enough to edit the "old" configure file.

I specifically want to try to compile the tests in the tests directory, to 
see how to use the api in "real life", and have tried to include  the "tests" 
directory in the source found in http://www.hvrlab.org/pub/crypto/. I have 
come as far as making testcip.o but I do not know what to link against to 
make it work.

I made testcip with this command - executed in the tests directory:
 gcc  -I../include -I./ testcip.c -o testcip.o     

Any help would be appreciated


S√∏ren Kongstad

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010815222932</emailId><senderName>lam wai wm</senderName><senderEmail>00028911@brookes.ac.uk</senderEmail><timestampReceived>2001-08-15 22:29:32-0400</timestampReceived><subject>Question about implementation</subject><body>

Hi all,

I'm the student who want to encrypt, decrypt some data in 
kernel mode.  I've stuck for serveral days, but I still cannot 
figure it out why I can't really encrypt the data.  Could you 
please point out what's problem that I've made.

Thanks so much.

Code:

#define __KERNEL__
#define MODULE
#include &lt;linux/module.h&gt;

#ifdef CONFIG_KMOD
#include &lt;linux/kmod.h&gt;
#endif

#include &lt;linux/string.h&gt;
//#include &lt;linux/mm.h&gt;

#include &lt;linux/init.h&gt;
#include &lt;linux/config.h&gt;
#include &lt;linux/kernel.h&gt;
#include &lt;linux/malloc.h&gt;
#include &lt;linux/crypto.h&gt;
#include &lt;asm-i386/types.h&gt;
#include &lt;linux/inet.h&gt;

#define DEBUG

struct cipher_context *cx;
struct cipher_implementation *ci;
unsigned char key1[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00};

void dump_u32_buffer(u32 *buf, int number)
{
	int i;

	for(i=0;i&lt;number;i++)
	{
		printk("%08x ",buf[i]);
		if(i &amp;&amp; ((i+1)%4)==0)
			printk("\n");
		else
			printk("     ");
	}
	if((i%4)!=0)
		printk("\n");
}


static int init_cipher()
{
  char plain_text[11] = "readline26\n";
  char * cipher_text = NULL;
  __u32 input1 = 0;
  __u32 output1 = 0;


  ci = find_cipher_by_name("rijndael-ecb", 1);
  if (!ci) {
    printk("Find cipher error.\n");
    return 1;
  }

  if ( (cx = (struct cipher_context *) kmalloc(sizeof(struct 
cipher_context), GFP_KERNEL)) == NULL) {
    printk("Creation of cipher_context failed..\n");
    return 1;
  }

  cx = ci-&gt;realloc_context(NULL, ci, sizeof(key1));
  cx-&gt;ci = ci;
  ci-&gt;wipe_context(cx);
  ci-&gt;set_key(cx, key1, sizeof(key1));
  printk("%s\n", plain_text);
  input1 = (__u32)plain_text;
  printk("B4 Encrypt:\n");
  dump_u32_buffer(&amp;input1, sizeof(input1));
  ci-&gt;encrypt(cx, (u8 *)&amp;input1, (u8 *) &amp;output1, 
sizeof(&amp;input1));
  printk("\nEncrypt:\n");
  dump_u32_buffer(&amp;output1, sizeof(output1)); 
  ci-&gt;decrypt(cx, (u8 *)&amp;output1, (u8 *) &amp;input1, 
sizeof(&amp;input1));
  printk("\nDecrypt:\n");
  dump_u32_buffer(&amp;input1, sizeof(input1));
  printk("\nString :\n");
  cipher_text = (char *)
  printk("%s\n", (char*)input1);
  return 0;
}

static int __init init(void)
{
  printk("Init..\n");
#ifdef DEBUG

  while(MOD_IN_USE)
    MOD_DEC_USE_COUNT;
  MOD_INC_USE_COUNT;
#endif
  return init_cipher();
}

static void __exit fini(void)
{
  kfree(cx-&gt;keyinfo);
  kfree(cx);
  printk("Finish..\n");
}

module_init(init);
module_exit(fini);


Very respectfully,
marco.



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010816084614</emailId><senderName>"Surena K.D."</senderName><senderEmail>surenakd@hotmail.com</senderEmail><timestampReceived>2001-08-16 08:46:14-0400</timestampReceived><subject>incompatibility problem, please help</subject><body>

Hi

I have used crypto-api to encrypt my files under kernel 2.4.3. Now i can not 
use them under kernel 2.2.18. how can i make my archives useable under 
2.2.18?



_________________________________________________________________
Get your FREE download of MSN Explorer at http://explorer.msn.com/intl.asp


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010819112844</emailId><senderName>Roger Luethi</senderName><senderEmail>rl@hellgate.ch</senderEmail><timestampReceived>2001-08-19 11:28:44-0400</timestampReceived><subject>Can anybody please confirm?</subject><body>

Hi there

I have come across a problem with linux-crypto and I thought I'd ask
if the problem exists for others as well.

So here we go:

modprobe cipher-aes
dd if=/dev/urandom of=/tmp/test bs=1M count=1
losetup -e aes /dev/loop0 /tmp/test
mke2fs -b 2048 /dev/loop0
mount /dev/loop0 /mnt

If this fails for you -- that's the problem. I know how to work around
it, I think I know pretty well what is going wrong internally, and
I am currently working on a proper solution.

My solution involves changes to the kernel, to losetup, _and_ the
e2fsprogs, so if somebody knows a more simple fix -- please let
me know.

Otherwise, I'd like to hear if others are experiencing this behavior
and consider this a problem, too.

TIA,

roger

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010829185639</emailId><senderName></senderName><senderEmail>mclinden</senderEmail><timestampReceived>2001-08-29 18:56:39-0400</timestampReceived><subject>Unencrypting file system</subject><body>


Excuse me if the answer is obvious but this is one of these cases where I
cannot afford to make a mistake. I need to unencrypt a file system for the
purposes of moving it. The data on it is dynamic but I can, if need be, put
the system into single user mode to do this. The question is, what is the
best way to convert to an unencrypted file system? I'm using the 2.4.3
release.

Thanks in advance.

Sean McLinden



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010829094435</emailId><senderName>Aminudin Khalid</senderName><senderEmail>aminudin@mimos.my</senderEmail><timestampReceived>2001-08-29 09:44:35-0400</timestampReceived><subject>no password prompt</subject><body>

Hi,

I have compiled and run my linux-2.2.18 + crypto API . I've done all the
setting as explained in the Linux Disk Encryption How-To. Well , it
works  but I thinks there is something wrong because I am not prompted
when mounting the /dev/loop0 . What is the problem here ?

I 've done all .

insmod loop.o
insmod loop_fish2.o
losetup -e twofish /dev/loop0  ~user/.crypto      ####  (+ password)
mke2fs /dev/loop0
mkdir  ~/crypto
mount  -t ext2 /dev/loop0 ~user/crypto  ###( The /dev/loop0 could be
mounted without password  )


Thanks. Hopefully  somebody can explain this to me .


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010830152519</emailId><senderName></senderName><senderEmail>maxim65</senderEmail><timestampReceived>2001-08-30 15:25:19-0400</timestampReceived><subject>kernel error</subject><body>

I'm using kernel with crypto loopback from 2.4.3 patched until attual
kernel release 2.4.9 with no problem except the bugs that we know.
I have a dual processor pIII with gcc 3.01 compiler.
I tryed to patch it to cryptoapi 2.4.7.1: I configured cryptomodules
(2.4.7.1) for 512 size blocks without error and the same for the
installation.Than at the last I have patched the kernel for the 512 bit
size block, all without error, except for the frequently warnig of gcc
3.01.
Than , after have done the setup of loopback without any error I tryed
to format it with mke2fs -b 1024 /dev/loop0 and I got an hard kernel
error, here the kernel message


Unable to handle kernel paging request at virtual address 00001000
*pde = 00000000
Oops: 0000
CPU:    1
EIP:    0010:[&lt;d0874933&gt;]
EFLAGS: 00010296
eax: cff23000   ebx: c9800000   ecx: c9800000   edx: 00001000
esi: c9800000   edi: 00001000   ebp: 00001000   esp: c6883eb8
ds: 0018   es: 0018   ss: 0018
Process loop0 (pid: 2479, stackpage=c6883000)
Stack: c0bbbb80 00000002 cc291ae0 00000001 cc291ae0 cc170000 c9800000
d086c4e0
       00001000 cf857000 d086c500 cff23000 c9800000 cc170000 00001000
00000001
       00001000 d086e147 cff23000 c9800000 cc170000 00001000 00001000
c13361d0
Call Trace: [&lt;d086c4e0&gt;] [&lt;d086c500&gt;] [&lt;d086e147&gt;] [&lt;d086e507&gt;]
[&lt;d086e85e&gt;]
   [&lt;d086ee53&gt;] [&lt;c0106f2e&gt;] [&lt;d086ed40&gt;] [&lt;c01055e6&gt;] [&lt;d086ed40&gt;]

Code: 8b 02 83 ed 10 8b 5c 24 34 89 44 24 08 8b 42 04 89 44 24 0


Someone know what happened?

Thanks in advance

Massimo


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010831051632</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-08-31 05:16:32-0400</timestampReceived><subject>Reiserfs?</subject><body>

    I've got cryptoapi-2.4.7.0 installed, except I'm still figuring out
what I'm going to do with util-linux. I'd already compiled a 2.4.7
kernel ( I was running 2.4.9 tho) and booted it after installing
cryptoapi, and everything seems okay thus far.
     However, I just started wondering if this is going to work with my
reiserfs file system. I've got everything reiserfs except /boot.

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010831163453</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-31 16:34:53-0400</timestampReceived><subject>RE: Reiserfs?</subject><body>

TXIuIFNlYXZlcjoNCg0KCUFyZSB5b3Ugc2F5aW5nIHRoaXMgcGF0Y2ggZG9lc24ndCB3b3JrIHdp
dGggMi40Ljk/DQoNCg0KVmVyeSBSZXNwZWN0ZnVsbHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIs
IElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVybHkgSGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0
RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQpIA0Kc3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBj
b2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkw
MjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1KS0zMzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhp
bGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0KDQpUZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBm
YXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVmYXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9J
TiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZS
T00gSVQgQUxMLiANCg0KRnJpZGF5LCBBdWd1c3QgMzEsIDIwMDEgOTozMyBBTQ0KDQotLS0tLU9y
aWdpbmFsIE1lc3NhZ2UtLS0tLQ0KRnJvbTogb3duZXItbGludXgtY3J5cHRvQG5sLmxpbnV4Lm9y
ZyBbbWFpbHRvOm93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51eC5vcmddT24gQmVoYWxmIE9mIEhh
cm1vbiBTZWF2ZXINClNlbnQ6IFRodXJzZGF5LCBBdWd1c3QgMzAsIDIwMDEgMTA6MTcgUE0NClRv
OiBsaW51eC1jcnlwdG9AbmwubGludXgub3JnDQpTdWJqZWN0OiBSZWlzZXJmcz8NCg0KICAgIEkn
dmUgZ290IGNyeXB0b2FwaS0yLjQuNy4wIGluc3RhbGxlZCwgZXhjZXB0IEknbSBzdGlsbCBmaWd1
cmluZyBvdXQNCndoYXQgSSdtIGdvaW5nIHRvIGRvIHdpdGggdXRpbC1saW51eC4gSSdkIGFscmVh
ZHkgY29tcGlsZWQgYSAyLjQuNw0Ka2VybmVsICggSSB3YXMgcnVubmluZyAyLjQuOSB0aG8pIGFu
ZCBib290ZWQgaXQgYWZ0ZXIgaW5zdGFsbGluZw0KY3J5cHRvYXBpLCBhbmQgZXZlcnl0aGluZyBz
ZWVtcyBva2F5IHRodXMgZmFyLg0KICAgICBIb3dldmVyLCBJIGp1c3Qgc3RhcnRlZCB3b25kZXJp
bmcgaWYgdGhpcyBpcyBnb2luZyB0byB3b3JrIHdpdGggbXkNCnJlaXNlcmZzIGZpbGUgc3lzdGVt
LiBJJ3ZlIGdvdCBldmVyeXRoaW5nIHJlaXNlcmZzIGV4Y2VwdCAvYm9vdC4NCg0KLS0NCkhhcm1v
biBTZWF2ZXIsIE1MSVMNCkN5YmVyU2hhbWFuaXgNCldvcmsgOTIwLTIwMy05NjMzICAgaHNlYXZl
ckBjeWJlcnNoYW1hbml4LmNvbQ0KSG9tZSA5MjAtMjMzLTU4MjAgaHNlYXZlckBhbWVyaXRlY2gu
bmV0DQpodHRwOi8vd3d3LmN5YmVyc2hhbWFuaXguY29tL3Jlc3VtZS5odG1sDQoNCg0KDQpMaW51
eC1jcnlwdG86ICBjcnlwdG9ncmFwaHkgaW4gYW5kIG9uIHRoZSBMaW51eCBzeXN0ZW0NCkFyY2hp
dmU6ICAgICAgIGh0dHA6Ly9tYWlsLm5sLmxpbnV4Lm9yZy9saW51eC1jcnlwdG8vDQo=


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010819120855</emailId><senderName>"Adam J. Richter"</senderName><senderEmail>adam@yggdrasil.com</senderEmail><timestampReceived>2001-08-19 12:08:55-0400</timestampReceived><subject>Re: Can anybody please confirm?</subject><body>

	[I am cc'ing this to linux-crypto just so everyone can know
somebody has responded.  I know most of the linux-crypto readers already
know the answer.]

&gt;mke2fs -b 2048 /dev/loop0
&gt;mount /dev/loop0 /mnt
...disaster.

	Perhaps we need a FAQ entry for the initial value problem.
The loop device defaults to some initial block size other than
2048, and "mk2efs -b 2048" is not enough to change that.  I believe
you could use "blockdev --setbsz 2048 /dev/loop/0" to set it before
you do the mke2fs, although you can get the same effect by first
trying to mount it with ext2 (and failing) and then doing the
mke2fs and trying to mount it again.  The better solution is to
build cryptoapi with ./configure --enable-iv-mode-sector.  Look
for "IV_MODE_SECTOR" in the README in the top level cryptoapi
source directory.

Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104
adam@yggdrasil.com     \ /                  San Jose, California 95129-1034
+1 408 261-6630         | g g d r a s i l   United States of America
fax +1 408 261-6631      "Free Software For The Rest Of Us."

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010816085826</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-16 08:58:26-0400</timestampReceived><subject>Re: incompatibility problem, please help</subject><body>

"Surena K.D." wrote:
&gt; I have used crypto-api to encrypt my files under kernel 2.4.3. Now i can not
&gt; use them under kernel 2.2.18. how can i make my archives useable under
&gt; 2.2.18?

Loop-AES works with 2.4, 2.2 and 2.0 kernels:

    http://mail.nl.linux.org/linux-crypto/2001-08/msg00011.html

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010816102759</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-16 10:27:59-0400</timestampReceived><subject>RE: incompatibility problem, please help</subject><body>

U3VyZW5hIEsuRC46DQoNCglXaGlsZSBJIHJlc3BlY3QgTXIuIFJ1dXN1J3MgcHJvZ3JhbW1pbmcg
YWJpbGl0eSwgaGUgc2VlbXMgdG8gdmVyeSBvZnRlbiBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGhlIHRo
aW5rcyB5b3VyIGFza2luZyBhbmQgbm90IHRoZSBvbmUgYWN0dWFsbHkgZW50aXRsZWQgd2l0aGlu
IHRoZSBzY29wZSBvZiB0aGUgdGV4dC4gUGVyaGFwcyBNci4gUnV1c3UgbWlzc2VkIHRoZSBwYXJ0
IG9mIHlvdXIgcXVlc3Rpb24gd2hlcmUgeW91IG1lbnRpb25lZCB5b3Ugd2VyZSBhbHJlYWR5IHVz
aW5nIGNyeXB0by1hcGksIEkgZG9uJ3Qga25vdy4gSGUgaGFzIGEgc29sdXRpb24gd2hpY2ggd2ls
bCB3b3JrLCBidXQgaG93IHRvIGNvbnRpbnVlIHVzaW5nIHdoYXQgeW91IGhhdmUgZGVwbG95ZWQg
YW5kIHRvIHJlc29sdmUgeW91ciBjdXJyZW50IGlzc3VlIGhlIGRpZCBub3QgYWRkcmVzcy4NCg0K
SSBhbSBzdXJlIHNvbWVvbmUgd2lsbCBnaXZlIHlvdSBhbiBleHBsYW5hdGlvbi4gSSB3YXMgbm90
IHVzaW5nIHRoZSBjcnlwdG8tYXBpIChJLXBhdGNoKSB3aGVuIHRoZSBrZXJuZWwgcmVsZWFzZSB5
b3Ugd2VyZSByZWZlcmVuY2luZyB3YXMgaW4gZm9yY2UuDQoNCg0KVmVyeSBSZXNwZWN0ZnVsbHks
IA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVybHkgSGls
bHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQpIA0Kc3R1
YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYw
NDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1KS0zMzgt
NjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0KDQpUZWxl
Y29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVmYXgu
Y29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VS
IENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KVGh1cnNkYXksIEF1Z3VzdCAx
NiwgMjAwMSAzOjI0IEFNDQoNCi0tLS0tT3JpZ2luYWwgTWVzc2FnZS0tLS0tDQpGcm9tOiBvd25l
ci1saW51eC1jcnlwdG9AbmwubGludXgub3JnIFttYWlsdG86b3duZXItbGludXgtY3J5cHRvQG5s
LmxpbnV4Lm9yZ11PbiBCZWhhbGYgT2YgSmFyaSBSdXVzdQ0KU2VudDogVGh1cnNkYXksIEF1Z3Vz
dCAxNiwgMjAwMSAxOjU4IEFNDQpUbzogU3VyZW5hIEsuRC4NCkNjOiBsaW51eC1jcnlwdG9Abmwu
bGludXgub3JnDQpTdWJqZWN0OiBSZTogaW5jb21wYXRpYmlsaXR5IHByb2JsZW0sIHBsZWFzZSBo
ZWxwDQoNCiJTdXJlbmEgSy5ELiIgd3JvdGU6DQo+IEkgaGF2ZSB1c2VkIGNyeXB0by1hcGkgdG8g
ZW5jcnlwdCBteSBmaWxlcyB1bmRlciBrZXJuZWwgMi40LjMuIE5vdyBpIGNhbiBub3QNCj4gdXNl
IHRoZW0gdW5kZXIga2VybmVsIDIuMi4xOC4gaG93IGNhbiBpIG1ha2UgbXkgYXJjaGl2ZXMgdXNl
YWJsZSB1bmRlcg0KPiAyLjIuMTg/DQoNCkxvb3AtQUVTIHdvcmtzIHdpdGggMi40LCAyLjIgYW5k
IDIuMCBrZXJuZWxzOg0KDQogICAgaHR0cDovL21haWwubmwubGludXgub3JnL2xpbnV4LWNyeXB0
by8yMDAxLTA4L21zZzAwMDExLmh0bWwNCg0KUmVnYXJkcywNCkphcmkgUnV1c3UgPGphcmkucnV1
c3VAcHAuaW5ldC5maT4NCg0KTGludXgtY3J5cHRvOiAgY3J5cHRvZ3JhcGh5IGluIGFuZCBvbiB0
aGUgTGludXggc3lzdGVtDQpBcmNoaXZlOiAgICAgICBodHRwOi8vbWFpbC5ubC5saW51eC5vcmcv
bGludXgtY3J5cHRvLw0K


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010816173049</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-16 17:30:49-0400</timestampReceived><subject>Re: incompatibility problem, please help</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; While I respect Mr. Ruusu's programming ability, he seems to very often
&gt; answer the question he thinks your asking and not the one actually
&gt; entitled within the scope of the text. Perhaps Mr. Ruusu missed the part
&gt; of your question where you mentioned you were already using crypto-api, I
&gt; don't know. He has a solution which will work, but how to continue using
&gt; what you have deployed and to resolve your current issue he did not
&gt; address.

Stuart, you missed my point which was that 2.2 kernels don't have tools to
reliably interoperate with 2.4 crypto-api disk images. I pointed the
original poster to a solution where he can use the same encrypted disk
images with 2.2 and 2.4 kernels.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805065432</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-05 06:54:32-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

Hank Leininger wrote:
&gt; My laptop really wants swsusp (suspend to swap), which of course wants to
&gt; be encrypted.  There's a long-standing caveat that using loop-encryption
&gt; for a swap partition will blow up (memory allocations are done in the
&gt; encrypt+write out path, which will die when we are swapping).  However,
&gt; it's not clear to me if this is a problem with the 'crypto-api' patches or
&gt; not (for instance, ppdd is supposed to be able to handle it, so it's
&gt; probably not a problem with the basic loop.o driver).  Do you know if
&gt; loop-AES does/should have a problem with encrypted swap?  Or if, even
&gt; better, it's tested and known to work?

Loop-AES does the alloc/release, so it can't be used to encrypt swap.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805065655</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-05 06:56:55-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3d file crypto package</subject><body>

TXIuIFJ1dXN1Og0KDQoJUmVjZW50bHkgSSBoYXZlIGJlZ3VuIHRvIGNvbnNpZGVyIHRoZSBpbXBs
ZW1lbnRhdGlvbiBvZiB5b3VyIGxvb3AtYWVzIGFzIGl0IHNlZW1zIHRoYXQgd29yayBvbiB0aGUg
SS1wYXRjaCBoYXMgY29tZSB0byBhIGhhbHQsIGFuZCBzdGlsbCBkb2VzIG5vdCBzZWVtIHRvIGhh
dmUgdGhlIGRlc2lnbiBsaW1pdGF0aW9ucyB5b3Ugc3Bva2Ugb2YgcmVtb3ZlZCB0byBkYXRlLg0K
DQoJSSBhbSBjdXJpb3VzIGlmIHlvdXIgbG9vcC1hZXMgdmlydHVhbCBmaWxlc3lzdGVtIGNhbiBi
ZSByZXNpemVkIGF0IGFsbCBpbiBhbnl3YXk/IFN1cHBvc2UgSSBjcmVhdGUgYSAxR0IgZW5jcnlw
dGVkIGRpc2ssIGFuZCBuZWVkIHRvIGV4cGFuZCBpdCBieSA1MDBNQiwgaXMgdGhhdCBwb3NzaWJs
ZSBpbiBhICJwYXJ0aXRpb24gbWFnaWMiIHN0eWxlIHdheT8gSSBrbm93IHBhcnRpdGlvbiBtYWdp
YyBpcyBub3QgZ29pbmcgdG8gZG8gaXQgKGZvciBhIHBsZXRob3JhIG9mIHJlYXNvbnMpLCBidXQg
ZG8geW91IHBsYW4gYSB1dGlsaXR5IHRvIGRvIGp1c3QgdGhhdCAoZ3JvdyBhbiBlbmNyeXB0ZWQg
ZHJpdmUpIGlmIHRoZSB1bmRlcmx5aW5nIGhhcmQgd2FyZSBkZXZpY2UgaGFzIHNwYWNlIGF2YWls
YWJsZT8NCg0KDQpWZXJ5IFJlc3BlY3RmdWxseSwgDQoNClN0dWFydCBCbGFrZSBUZW5lciwgSVQz
LCBVU05SLVIsIE4zR1dHIA0KQmV2ZXJseSBIaWxscywgQ2FsaWZvcm5pYQ0KVlRVIDE5MDRHIChW
b2x1bnRlZXIgVHJhaW5pbmcgVW5pdCkgDQpzdHVhcnRAYmg5MDIxMC5uZXQgDQp3ZXN0IGNvYXN0
OiAoMzEwKS0zNTgtMDIwMiBQLk8uIEJveCAxNjA0MywgQmV2ZXJseSBIaWxscywgQ0EgOTAyMDkt
MjA0MyANCmVhc3QgY29hc3Q6ICgyMTUpLTMzOC02MDA1IFAuTy4gQm94IDQ1ODU5LCBQaGlsYWRl
bHBoaWEsIFBBIDE5MTQ5LTU4NTkgDQoNClRlbGVjb3BpZXI6ICg0MTkpLTcxNS02MDczIGZheCB0
byBlbWFpbCBnYXRld2F5IHZpYSB3d3cuZWZheC5jb20gKGl0J3MgZnJlZSEpIA0KDQpKT0lOIFRI
RSBVUyBOQVZZIFJFU0VSVkUsIFNFUlZFIFlPVVIgQ09VTlRSWSwgQU5EIEJFTkVGSVQgRlJPTSBJ
VCBBTEwuIA0KDQpTYXR1cmRheSwgQXVndXN0IDA0LCAyMDAxIDExOjU0IFBNDQoNCiAtLS0tLU9y
aWdpbmFsIE1lc3NhZ2UtLS0tLQ0KRnJvbTogCW93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51eC5v
cmcgW21haWx0bzpvd25lci1saW51eC1jcnlwdG9AbmwubGludXgub3JnXSAgT24gQmVoYWxmIE9m
IEphcmkgUnV1c3UNClNlbnQ6CVNhdHVyZGF5LCBBdWd1c3QgMDQsIDIwMDEgMTE6MTIgQU0NClRv
OglsaW51eC1jcnlwdG9AbmwubGludXgub3JnDQpTdWJqZWN0OglBbm5vdW5jZSBsb29wLUFFUy12
MS4zZCBmaWxlIGNyeXB0byBwYWNrYWdlDQoNCkluIHNob3J0OiBJZiBmaWxlIGNyeXB0byBpcyBh
bGwgeW91IG5lZWQsIHRoaXMgcGFja2FnZSBpcyBhIGhhc3NsZSBmcmVlDQpyZXBsYWNlbWVudCBm
b3IgaW50ZXJuYXRpb25hbCBjcnlwdG8gcGF0Y2guDQoNClRoaXMgcGFja2FnZSBwcm92aWRlcyBs
b2FkYWJsZSBMaW51eCBrZXJuZWwgbW9kdWxlIChsb29wLm8pIHRoYXQgaGFzIEFFUw0KY2lwaGVy
IGJ1aWx0LWluLiBUaGUgQUVTIGNpcGhlciBjYW4gYmUgdXNlZCB0byBlbmNyeXB0IGxvY2FsIGZp
bGUgc3lzdGVtcw0KYW5kIGRpc2sgcGFydGl0aW9ucy4gRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJv
dXQgY29tcGlsaW5nIGFuZCB1c2luZyB0aGUNCmRyaXZlciwgc2VlIHRoZSBSRUFETUUgZmlsZSBp
biB0aGUgcGFja2FnZS4NCg0KRmVhdHVyZXM6DQotIE5vIHNvdXJjZSBtb2RpZmljYXRpb25zIHRv
IGtlcm5lbC4gTm8gcGF0Y2ggaGFzc2xlcyB3aGVuIGEgbmV3IHZlcnNpb24gb2YNCiAga2VybmVs
IGlzIHJlbGVhc2VkLg0KLSBXb3JrcyB3aXRoIDIuNCwgMi4yIGFuZCAyLjAga2VybmVscy4NCi0g
QUVTIGNpcGhlciBpcyB1c2VkIGluIENCQyBtb2RlLiBTdXBwb3J0cyAxMjgsIDE5MiBhbmQgMjU2
IGJpdCBrZXlzLg0KLSBQYXNzd29yZHMgaGFzaGVkIHdpdGggU0hBLTI1NiwgU0hBLTM4NCBvciBT
SEEtNTEyLg0KLSA1MTIgYnl0ZSBiYXNlZCBJVi4gSVYgaXMgaW1tdW5lIHRvIHZhcmlhdGlvbnMg
aW4gdHJhbnNmZXIgc2l6ZSBhbmQgZG9lcw0KICBub3QgZGVwZW5kIG9uIGZpbGUgc3lzdGVtIGJs
b2NrIHNpemUuDQoNCkNoYW5nZXMgc2luY2UgcHJldmlvdXMgcmVsZWFzZToNCi0gbG9vcC5jLTIu
NC5vcmlnaW5hbCB1cGRhdGVkIHRvIEFsYW4gQ294J3MgMi40LjctYWM1IHZlcnNpb24gKGV4dDMN
CiAgY2hhbmdlcyksIGFuZCBNYWtlZmlsZSB1cGRhdGVkIHRvIGNvbXBpbGUgdGhhdCB2ZXJzaW9u
IG9uIG9sZGVyIGtlcm5lbHMgYXMNCiAgd2VsbC4NCg0KS2VybmVsIDIuNCB1c2VycyB3aG8gdXNl
IGZpbGUgYmFja2VkIGxvb3AgZGV2aWNlcyBvbiBleHQzIGZpbGVzeXN0ZW0gQU5EDQp5b3VyIGtl
cm5lbCBJUyBOT1Qgc3RvY2sgTGludXMgb3IgQWxhbiBrZXJuZWwsIHNob3VsZCB1cGdyYWRlIHRv
IHRoaXMNCnZlcnNpb24uIE5vIG5lZWQgdG8gdXBncmFkZSBpZiB5b3UgdXNlIG9sZGVyIDIuMiBv
ciAyLjAga2VybmVscy4NCg0KYnppcDIgY29tcHJlc3NlZCB0YXJiYWxsIGlzIGhlcmU6DQoNCiAg
ICBodHRwOi8vbG9vcC1hZXMuc291cmNlZm9yZ2UubmV0L2xvb3AtQUVTLXYxLjNkLnRhci5iejIN
CiAgICBtZDVzdW0gOTQ4MGQ2ZTZhMWViZTk2ZWU3NDk5ZmQ4Y2I0ZWFmZmENCg0KUEdQIHNpZ25h
dHVyZSBmaWxlLCBteSBwdWJsaWMga2V5LCBhbmQgZmluZ2VycHJpbnQgaGVyZToNCg0KICAgIGh0
dHA6Ly9sb29wLWFlcy5zb3VyY2Vmb3JnZS5uZXQvbG9vcC1BRVMtdjEuM2QudGFyLmJ6Mi5zaWdu
DQogICAgaHR0cDovL2xvb3AtYWVzLnNvdXJjZWZvcmdlLm5ldC9QR1AtcHVibGljLWtleS5hc2MN
CiAgICAxMDI0LzNBMjIwRjUxIDVCIDRCIEY5IEJCIEQzIDNGIDUyIEU5ICBEQiAxRCBFQiBFMyAy
NCAwRSBBOSBERA0KDQpSZWdhcmRzLCANCkphcmkgUnV1c3UgPGphcmkucnV1c3VAcHAuaW5ldC5m
aT4NCg0KTGludXgtY3J5cHRvOiAgY3J5cHRvZ3JhcGh5IGluIGFuZCBvbiB0aGUgTGludXggc3lz
dGVtDQpBcmNoaXZlOiAgICAgICBodHRwOi8vbWFpbC5ubC5saW51eC5vcmcvbGludXgtY3J5cHRv
Lw0K


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805070753</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-05 07:07:53-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; I am curious if your loop-aes virtual filesystem can be resized at all in
&gt; anyway? Suppose I create a 1GB encrypted disk, and need to expand it by
&gt; 500MB, is that possible in a "partition magic" style way? I know partition
&gt; magic is not going to do it (for a plethora of reasons), but do you plan a
&gt; utility to do just that (grow an encrypted drive) if the underlying hard
&gt; ware device has space available?

Loop-AES is not a filesystem. It is a loop device with built in AES
encryption. If you expand the underlying partition or file, the loop device
will grow accordingly. Of course, loop device must not be mounted at time of
expansion.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805073819</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-05 07:38:19-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3d file crypto package</subject><body>

TXIuIFJ1dXN1Og0KDQoJR2VuZXJhbCBxdWVzdGlvbnM6DQoNCmEpIFByZXN1bWluZyB0aGF0IEkg
Y3JlYXRlIGEgbG9vcC1hZXMgZGV2aWNlIGFuZCBwbGFjZSBOVEZTIG9uIHRoZSBkZXZpY2UuIERv
IHlvdSBwbGFuIGEgV2luZG93cyAyMDAwIGltcGxlbWVudGF0aW9uIG9mIGxvb3AtYWVzIGF0IGFs
bCwgc3VjaCB0aGF0IGxvb3AtYWVzIGVuY3J5cHRlZCBmaWxlcyBjb3VsZCBiZSBkZWNyeXB0ZWQg
dW5kZXIgVzJLICh0aGVyZSBhcmUgZHJpdmVycyBmb3IgVzJLIHRvIHJlYWQgZXh0MiBmaWxlc3lz
dGVtcyBhbHNvKT8gSSByZWNlbnRseSB3YXMgdG9sZCBvZiBhIHByb2R1Y3QgY2FsbGVkICJCZXN0
Q3J5cHQiICh5ZWFoIGl0IGlzIGNvbW1lcmNpYWwsIGJ1dCBpdCBkb2VzIGFsc28gd29yaywgaXMg
bm90IGJhZGx5IG92ZXIgcHJpY2VkIGVpdGhlcikuDQpiKSBTaW5jZSBsb29wLWFlcyBpcyBhbiBl
bmNyeXB0aW9uIGxheWVyIGJldHdlZW4gdGhlIE9TIGFuZCBmaWxlc3lzdGVtLCBob3cgbXVjaCBv
dmVyaGVhZCBkbyB5b3Ugc3VzcGVjdCBpdCB3aWxsIHBsYWNlIHVwb24gYSBmaWxlc3lzdGVtIHRv
IGRvIGl0cyBlbmNyeXB0aW9uIHdvcms/DQoNCglXZWxsIGxldCBtZSBhc2sgeW91IGFib3V0IGEg
c2NlbmFyaW8gdGhlbjoNCg0KYSkgTE9PUC1BRVMgaXMgaW1wbGVtZW50ZWQNCmIpIEEgZmlsZXN5
c3RlbSBpcyBwbGFjZWQgb250byBhIGxvb3AgZGV2aWNlDQpjKSBXb250IGluY3JlYXNpbmcgdGhl
IHNpemUgb2YgdGhlIHBoeXNpY2FsIGZpbGUgYWZmZWN0IHRoZSBlbmNyeXB0aW9uPw0KZCkgSG93
IHdvdWxkIHN1Y2ggYW4gaW5jcmVhc2UgaW4gdGhlIGZpbGUgc2l6ZSBiZSBhY2NvbXBsaXNoZWQ/
DQplKSBJZiBpdCB3YXMgYWNjb21wbGlzaGVkICh3aXRoIFJlaXNlckZTIGluc3RhbGxlZCksIFJl
aXNlckZTIGNhbiBleHBhbmQgaXRzZWxmIHRvIGVuY29tcGFzcyB0aGUgbmV3IHBoeXNpY2FsIHNw
YWNlDQoNCg0KVmVyeSBSZXNwZWN0ZnVsbHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywg
VVNOUi1SLCBOM0dXRyANCkJldmVybHkgSGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9s
dW50ZWVyIFRyYWluaW5nIFVuaXQpIA0Kc3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDog
KDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIw
NDMgDQplYXN0IGNvYXN0OiAoMjE1KS0zMzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxw
aGlhLCBQQSAxOTE0OS01ODU5IA0KDQpUZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8g
ZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVmYXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUg
VVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQg
QUxMLiANCg0KU3VuZGF5LCBBdWd1c3QgMDUsIDIwMDEgMTI6MTQgQU0NCg0KIC0tLS0tT3JpZ2lu
YWwgTWVzc2FnZS0tLS0tDQpGcm9tOiAJcm9vdEBtb25zdGVyLm1pc3R5LmNvbSBbbWFpbHRvOnJv
b3RAbW9uc3Rlci5taXN0eS5jb21dICBPbiBCZWhhbGYgT2YgSmFyaSBSdXVzdQ0KU2VudDoJU3Vu
ZGF5LCBBdWd1c3QgMDUsIDIwMDEgMTI6MDggQU0NClRvOglzdHVhcnRAYmg5MDIxMC5uZXQNCkNj
OglsaW51eC1jcnlwdG9AbmwubGludXgub3JnDQpTdWJqZWN0OglSZTogQW5ub3VuY2UgbG9vcC1B
RVMtdjEuM2QgZmlsZSBjcnlwdG8gcGFja2FnZQ0KDQoiSVQzIFN0dWFydCBCLiBUZW5lciwgVVNO
Ui1SIiB3cm90ZToNCj4gSSBhbSBjdXJpb3VzIGlmIHlvdXIgbG9vcC1hZXMgdmlydHVhbCBmaWxl
c3lzdGVtIGNhbiBiZSByZXNpemVkIGF0IGFsbCBpbg0KPiBhbnl3YXk/IFN1cHBvc2UgSSBjcmVh
dGUgYSAxR0IgZW5jcnlwdGVkIGRpc2ssIGFuZCBuZWVkIHRvIGV4cGFuZCBpdCBieQ0KPiA1MDBN
QiwgaXMgdGhhdCBwb3NzaWJsZSBpbiBhICJwYXJ0aXRpb24gbWFnaWMiIHN0eWxlIHdheT8gSSBr
bm93IHBhcnRpdGlvbg0KPiBtYWdpYyBpcyBub3QgZ29pbmcgdG8gZG8gaXQgKGZvciBhIHBsZXRo
b3JhIG9mIHJlYXNvbnMpLCBidXQgZG8geW91IHBsYW4gYQ0KPiB1dGlsaXR5IHRvIGRvIGp1c3Qg
dGhhdCAoZ3JvdyBhbiBlbmNyeXB0ZWQgZHJpdmUpIGlmIHRoZSB1bmRlcmx5aW5nIGhhcmQNCj4g
d2FyZSBkZXZpY2UgaGFzIHNwYWNlIGF2YWlsYWJsZT8NCg0KTG9vcC1BRVMgaXMgbm90IGEgZmls
ZXN5c3RlbS4gSXQgaXMgYSBsb29wIGRldmljZSB3aXRoIGJ1aWx0IGluIEFFUw0KZW5jcnlwdGlv
bi4gSWYgeW91IGV4cGFuZCB0aGUgdW5kZXJseWluZyBwYXJ0aXRpb24gb3IgZmlsZSwgdGhlIGxv
b3AgZGV2aWNlDQp3aWxsIGdyb3cgYWNjb3JkaW5nbHkuIE9mIGNvdXJzZSwgbG9vcCBkZXZpY2Ug
bXVzdCBub3QgYmUgbW91bnRlZCBhdCB0aW1lIG9mDQpleHBhbnNpb24uDQoNClJlZ2FyZHMsDQpK
YXJpIFJ1dXN1IDxqYXJpLnJ1dXN1QHBwLmluZXQuZmk+DQo=


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805084454</emailId><senderName>Hank Leininger</senderName><senderEmail>hlein@progressive-comp.com</senderEmail><timestampReceived>2001-08-05 08:44:54-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

On Sun, 5 Aug 2001, Jari Ruusu wrote:

&gt; Hank Leininger wrote:
&gt; &gt; probably not a problem with the basic loop.o driver).  Do you know if
&gt; &gt; loop-AES does/should have a problem with encrypted swap?  Or if, even
&gt; &gt; better, it's tested and known to work?
&gt;
&gt; Loop-AES does the alloc/release, so it can't be used to encrypt swap.

Bummer :(  How hard would this be to change; do you have any plans to
support it?  If I ask really nicely?  (Is it even possible--perhaps the
ability to allocate/release memory is what helps it be fully reentrant,
etc, not depending on static buffers, and so this can't be changed?)

Looks like it's Loop-AES for filesystems and ppdd for swap.  Messy :(
[ That is, assuming ppdd's encrypted-swap support works as advertized. ]

Thanks,

Hank Leininger &lt;hlein@progressive-comp.com&gt;


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805164201</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-05 16:42:01-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; a) Presuming that I create a loop-aes device and place NTFS on the device.
&gt;    Do you plan a Windows 2000 implementation of loop-aes at all, such that
&gt;    loop-aes encrypted files could be decrypted under W2K (there are
&gt;    drivers for W2K to read ext2 filesystems also)? I recently was told of
&gt;    a product called "BestCrypt" (yeah it is commercial, but it does also
&gt;    work, is not badly over priced either).

No Winblows support from me.

&gt; b) Since loop-aes is an encryption layer between the OS and filesystem,
&gt;    how much overhead do you suspect it will place upon a filesystem to do
&gt;    its encryption work?

Loop device is a layer between filesystem and disk driver. Software
encryption has some overhead, but on my primary system speed of AES is
faster than what my disk can transfer.

&gt; a) LOOP-AES is implemented
&gt; b) A filesystem is placed onto a loop device
&gt; c) Wont increasing the size of the physical file affect the encryption?

No.

&gt; d) How would such an increase in the file size be accomplished?

man dd

&gt; e) If it was accomplished (with ReiserFS installed), ReiserFS can expand
&gt;    itself to encompass the new physical space

Thats right.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010805164222</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-05 16:42:22-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

Hank Leininger wrote:
&gt; On Sun, 5 Aug 2001, Jari Ruusu wrote:
&gt; &gt; Loop-AES does the alloc/release, so it can't be used to encrypt swap.
&gt; 
&gt; Bummer :(  How hard would this be to change; do you have any plans to
&gt; support it?  If I ask really nicely?  (Is it even possible--perhaps the
&gt; ability to allocate/release memory is what helps it be fully reentrant,
&gt; etc, not depending on static buffers, and so this can't be changed?)

Well, if loop driver has no right to modify the original data in-place and
does not have right to allocate buffer to hold the encrypted data, what can
you do?

Patches are welcome.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010806041321</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-06 04:13:21-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3d file crypto package</subject><body>

TXIuIFJ1dXN1Og0KDQoJSSB1bmRlcnN0YW5kIHlvdSBtYXkgbm90IGJlIGluIGEgcG9zaXRpb24g
KGFzIHBlciB0aW1lIHRvIGRvIGl0IG9yIGhhdmUgYSBrbm93bGVkZ2ViYXNlIHByb2dyYW1taW5n
LXdpc2Ugd2l0aCByZWdhcmQgdG8gdGhlIHdpbmRvd3MgQVBJIC8gZmlsZXN5c3RlbSBpbXBsZW1l
bnRhdGlvbikgdG8gZGV2ZWxvcCBzdWNoIGEgcHJvZHVjdCAod2luZG93cyB2ZXJzaW9uKSwgaG93
ZXZlciBJIHdvdWxkIGxpa2UgdG8gYmUgYWJsZSB0byBidXJuIGEgZmlsZSB0byBhIENELVJPTSwg
YW5kIGtub3cgSSBjb3VsZCBhY2Nlc3MgaXQgZnJvbSBlaXRoZXIgTGludXggb3IgV2luZG93cy4N
Cg0KCUkgd2lsbCBzYXkgdGhhdCBtYW55IExpbnV4IGJhc2VkIG1haWxpbmcgbGlzdHMgYW5kIHN1
Y2ggZmluZCBpdCB2ZXJ5IGVhc3kgdG8gaGF0ZSBNaWNyb3NvZnQgYW5kIHRoZWlyIE9TZXMsIGFu
ZCBJIGRvbid0IGNhcmUgZm9yIHRoZW0gdG9vIG11Y2ggZWl0aGVyLiBIb3dldmVyLCBJIGRvIG5l
ZWQgdG8gYmUgYWJsZSB0byBpbnRlcmFjdCB3aXRoIHRoZW0sIGFzIEkgZG8gY29tcHV0ZXIgd29y
ayBmb3IgYSBsaXZpbmcuIEkgd291bGQgd29uZGVyIGhvdyB5b3Ugd291bGQgZmVlbCBhYm91dCBz
b21lIGF0dGVtcHRpbmcgdG8gaW1wbGVtZW50IHlvdXIgY29kZSB1bmRlciBXaW5kb3dzIGluIG9y
ZGVyIHRvIHByb3ZpZGUgYSBtZWNoYW5pc20gdG8gYWNoaWV2aW5nIGhhdmluZyBhbiBlbmNyeXB0
ZWQgQ0QtUk9NIHdpdGggYSBkYXRhIGZpbGUgb24gaXQgd2hpY2ggY2FuIGJlIHJlYWQgb24gZWl0
aGVyIExpbnV4IG9yIFdpbmRvd3MuIFdlIGNhbiBoYXRlIHRoZSBXaW5kb3dzIE9TIGFsbCB3ZSB3
YW50LCBidXQgcmVhbGl0eSBpcyB3ZSBtdXN0IGRlYWwgd2l0aCBpdC4NCg0KCVdpdGggcmVnYXJk
IHRvIG15IG90aGVyIHF1ZXN0aW9ucywgSSBhbSBwcmVzdW1pbmcgdGhlbiB0aGF0IHdoYXQgeW91
IGFyZSBzYXlpbmcgaXMgdGhhdCBpZiBJIGNyZWF0ZSBhIDUwME1CIGZpbGUsIG1vdW50IGl0IHdp
dGggbG9vcC1hZXMsIGFuZCBkbyBhbiBpbml0aWFsaXphdGlvbiBvZiBSZWlzZXJGUyBvbiBpdC4g
QW5kIHRoZW4gZXh0ZW5kIHRoZSBsZW5ndGggb2YgdGhlIGZpbGUsIFJlaXNlckZTIChhbmQgbG9v
cC1hZXMpIHdpbGwgYmUgYWJsZSB0byBleHRlbmQgaXRzIGZpbGVzeXN0ZW0gYW5kIGFsbG93IG1l
IHRvIHRha2UgYWR2YW50YWdlIG9mIHRoZSBnYWluZWQgc3BhY2U/DQoNCglBbm90aGVyIHF1ZXN0
aW9uIGlzIGhvdyBkaWZmaWN1bHQgaXMgaXQgdG8gY29tYmluZSBjb21wcmVzc2lvbiB3aXRoIGVu
Y3J5cHRpb24/IEluIG90aGVyIHdvcmRzLCB3b3VsZCBpdCBiZSBwb3NzaWJsZSB0byBtb2RpZnkg
bG9vcC1hZXMgdG8gYWxzbyBiZSBhYmxlIHRvIGFwcGx5IGNvbXByZXNzaW9uIGFnYWluc3QgdGhl
IGVuY3J5cHRlZCBkYXRhPw0KDQoNClZlcnkgUmVzcGVjdGZ1bGx5LCANCg0KU3R1YXJ0IEJsYWtl
IFRlbmVyLCBJVDMsIFVTTlItUiwgTjNHV0cgDQpCZXZlcmx5IEhpbGxzLCBDYWxpZm9ybmlhDQpW
VFUgMTkwNEcgKFZvbHVudGVlciBUcmFpbmluZyBVbml0KSANCnN0dWFydEBiaDkwMjEwLm5ldCAN
Cndlc3QgY29hc3Q6ICgzMTApLTM1OC0wMjAyIFAuTy4gQm94IDE2MDQzLCBCZXZlcmx5IEhpbGxz
LCBDQSA5MDIwOS0yMDQzIA0KZWFzdCBjb2FzdDogKDIxNSktMzM4LTYwMDUgUC5PLiBCb3ggNDU4
NTksIFBoaWxhZGVscGhpYSwgUEEgMTkxNDktNTg1OSANCg0KVGVsZWNvcGllcjogKDQxOSktNzE1
LTYwNzMgZmF4IHRvIGVtYWlsIGdhdGV3YXkgdmlhIHd3dy5lZmF4LmNvbSAoaXQncyBmcmVlISkg
DQoNCkpPSU4gVEhFIFVTIE5BVlkgUkVTRVJWRSwgU0VSVkUgWU9VUiBDT1VOVFJZLCBBTkQgQkVO
RUZJVCBGUk9NIElUIEFMTC4gDQoNClN1bmRheSwgQXVndXN0IDA1LCAyMDAxIDExOjI4IEFNDQoN
CiAtLS0tLU9yaWdpbmFsIE1lc3NhZ2UtLS0tLQ0KRnJvbTogCXJvb3RAbW9uc3Rlci5taXN0eS5j
b20gW21haWx0bzpyb290QG1vbnN0ZXIubWlzdHkuY29tXSAgT24gQmVoYWxmIE9mIEphcmkgUnV1
c3UNClNlbnQ6CVN1bmRheSwgQXVndXN0IDA1LCAyMDAxIDk6NDIgQU0NClRvOglzdHVhcnRAYmg5
MDIxMC5uZXQNCkNjOglsaW51eC1jcnlwdG9AbmwubGludXgub3JnDQpTdWJqZWN0OglSZTogQW5u
b3VuY2UgbG9vcC1BRVMtdjEuM2QgZmlsZSBjcnlwdG8gcGFja2FnZQ0KDQoiSVQzIFN0dWFydCBC
LiBUZW5lciwgVVNOUi1SIiB3cm90ZToNCj4gYSkgUHJlc3VtaW5nIHRoYXQgSSBjcmVhdGUgYSBs
b29wLWFlcyBkZXZpY2UgYW5kIHBsYWNlIE5URlMgb24gdGhlIGRldmljZS4NCj4gICAgRG8geW91
IHBsYW4gYSBXaW5kb3dzIDIwMDAgaW1wbGVtZW50YXRpb24gb2YgbG9vcC1hZXMgYXQgYWxsLCBz
dWNoIHRoYXQNCj4gICAgbG9vcC1hZXMgZW5jcnlwdGVkIGZpbGVzIGNvdWxkIGJlIGRlY3J5cHRl
ZCB1bmRlciBXMksgKHRoZXJlIGFyZQ0KPiAgICBkcml2ZXJzIGZvciBXMksgdG8gcmVhZCBleHQy
IGZpbGVzeXN0ZW1zIGFsc28pPyBJIHJlY2VudGx5IHdhcyB0b2xkIG9mDQo+ICAgIGEgcHJvZHVj
dCBjYWxsZWQgIkJlc3RDcnlwdCIgKHllYWggaXQgaXMgY29tbWVyY2lhbCwgYnV0IGl0IGRvZXMg
YWxzbw0KPiAgICB3b3JrLCBpcyBub3QgYmFkbHkgb3ZlciBwcmljZWQgZWl0aGVyKS4NCg0KTm8g
V2luYmxvd3Mgc3VwcG9ydCBmcm9tIG1lLg0KDQo+IGIpIFNpbmNlIGxvb3AtYWVzIGlzIGFuIGVu
Y3J5cHRpb24gbGF5ZXIgYmV0d2VlbiB0aGUgT1MgYW5kIGZpbGVzeXN0ZW0sDQo+ICAgIGhvdyBt
dWNoIG92ZXJoZWFkIGRvIHlvdSBzdXNwZWN0IGl0IHdpbGwgcGxhY2UgdXBvbiBhIGZpbGVzeXN0
ZW0gdG8gZG8NCj4gICAgaXRzIGVuY3J5cHRpb24gd29yaz8NCg0KTG9vcCBkZXZpY2UgaXMgYSBs
YXllciBiZXR3ZWVuIGZpbGVzeXN0ZW0gYW5kIGRpc2sgZHJpdmVyLiBTb2Z0d2FyZQ0KZW5jcnlw
dGlvbiBoYXMgc29tZSBvdmVyaGVhZCwgYnV0IG9uIG15IHByaW1hcnkgc3lzdGVtIHNwZWVkIG9m
IEFFUyBpcw0KZmFzdGVyIHRoYW4gd2hhdCBteSBkaXNrIGNhbiB0cmFuc2Zlci4NCg0KPiBhKSBM
T09QLUFFUyBpcyBpbXBsZW1lbnRlZA0KPiBiKSBBIGZpbGVzeXN0ZW0gaXMgcGxhY2VkIG9udG8g
YSBsb29wIGRldmljZQ0KPiBjKSBXb250IGluY3JlYXNpbmcgdGhlIHNpemUgb2YgdGhlIHBoeXNp
Y2FsIGZpbGUgYWZmZWN0IHRoZSBlbmNyeXB0aW9uPw0KDQpOby4NCg0KPiBkKSBIb3cgd291bGQg
c3VjaCBhbiBpbmNyZWFzZSBpbiB0aGUgZmlsZSBzaXplIGJlIGFjY29tcGxpc2hlZD8NCg0KbWFu
IGRkDQoNCj4gZSkgSWYgaXQgd2FzIGFjY29tcGxpc2hlZCAod2l0aCBSZWlzZXJGUyBpbnN0YWxs
ZWQpLCBSZWlzZXJGUyBjYW4gZXhwYW5kDQo+ICAgIGl0c2VsZiB0byBlbmNvbXBhc3MgdGhlIG5l
dyBwaHlzaWNhbCBzcGFjZQ0KDQpUaGF0cyByaWdodC4NCg0KUmVnYXJkcywNCkphcmkgUnV1c3Ug
PGphcmkucnV1c3VAcHAuaW5ldC5maT4NCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010807014953</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-07 01:49:53-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3d file crypto package</subject><body>

TXIuIFJ1dXN1Og0KDQogICAgICAgIFRoYW5rIHlvdSBmb3IgeW91ciB0aW1lIGFuZCBjb25zaWRl
cmF0aW9uIHJlZ2FyZGluZyBsb29wLWFlcy4gU29tZW9uZSB0b2xkIG1lIGFib3V0IGEgcGFja2Fn
ZSBjYWxsZWQgIkJlc3RDcnlwdCIgZnJvbSBKZXRpY28sIEluYy4sIGFuZCB0aGlzIGlzIHRoZSBz
b3J0IG9mIGZ1bmN0aW9uYWxpdHkgSSBhbSBsb29raW5nIGZvci4gQWN0dWFsbHksIEkgYmVsaWV2
ZSB0aGV5IHVzZSB0aGUgc2FtZSBBRVMgc3R1ZmYgdGhhdCB5b3UgZG8sIGFuZCB0aGV5IHdvcmsg
d2l0aCB0aGUgV2luZG93cyBlbnZpcm9ubWVudCBhbmQgTGludXguIE1hdHRlciBvZiBmYWN0IHRo
ZXkgc2F5IHRoYXQgYSAiY29udGFpbmVyIiBjYW4gYmUgZGlyZWN0bHkgY29waWVkIGZyb20gTGlu
dXggdG8gV2luZG93cyBhbmQgYmFjayBhZ2FpbiwgdW5tb2RpZmllZCBhbmQgYmUgcmVhZCBieSBl
aXRoZXIgT1MhPyEgTm93IHRoYXQgaXMgd2hhdCBJIGNhbGwgY29tcGF0aWJpbGl0eSBhbmQgdHJh
bnNwb3J0YWJpbGl0eSENCg0KICAgICAgICBHcmFudGVkIHRoZWlyIHNvZnR3YXJlIGlzIGNvbW1l
cmNpYWwsIGFuZCB3aWxsIGNvc3QgYSBmZXcgZG9sbGFycywgYnV0IHRoYXQgaXMgbm90IGFsd2F5
cyB0aGUgZW5kIG9mIHRoZSB3b3JsZC4gSSBjYW4gdGVsbCB5b3UsIEkgd291bGQgcmF0aGVyIGhh
dmUgZG9uYXRlZCBtb25leSB0b3dhcmRzIHlvdXIgcHJvamVjdCBhbmQgc2VlbiBsb29wLWFlcyBy
dW4gdW5kZXIgV2luZG93cywgYnV0IEkgdW5kZXJzdGFuZCB5b3UgZG8gbm90IGhhdmUgdGhlIHJl
c291cmNlcyB0byBkbyBzdWNoIGEgdGhpbmcuDQoNCiAgICAgICAgV2l0aCB5b3VyIHBlcm1pc3Np
b24sIEkgd291bGQgbGlrZSB0byBrbm93IGlmIHlvdSB3b3VsZCBtaW5kIGlmIEkgY2lyY3VsYXRl
ZCB5b3VyIHNvZnR3YXJlIGFtb25nc3Qgd2luZG93cyBwcm9ncmFtbWVycyB0byBzZWUgaWYgc29t
ZW9uZSB3aXRoIGEgYmFja2dyb3VuZCBpbiBXaW5kb3dzLCBhbmQgd2l0aCB0aGUgc2FtZSBrbm93
bGVkZ2ViYXNlIHlvdSBoYXZlIHdvdWxkIGJlIGludGVyZXN0ZWQgaW4gcmV3b3JraW5nIGEgd2lu
ZG93cyB2ZXJzaW9uLg0KDQoNClZlcnkgUmVzcGVjdGZ1bGx5LA0KDQpTdHVhcnQgQmxha2UgVGVu
ZXIsIElUMywgVVNOUi1SLCBOM0dXRw0KQmV2ZXJseSBIaWxscywgQ2FsaWZvcm5pYQ0KVlRVIDE5
MDRHIChWb2x1bnRlZXIgVHJhaW5pbmcgVW5pdCkNCnN0dWFydEBiaDkwMjEwLm5ldA0Kd2VzdCBj
b2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkw
MjA5LTIwNDMNCmVhc3QgY29hc3Q6ICgyMTUpLTMzOC02MDA1IFAuTy4gQm94IDQ1ODU5LCBQaGls
YWRlbHBoaWEsIFBBIDE5MTQ5LTU4NTkNCg0KVGVsZWNvcGllcjogKDQxOSktNzE1LTYwNzMgZmF4
IHRvIGVtYWlsIGdhdGV3YXkgdmlhIHd3dy5lZmF4LmNvbSAoaXQncyBmcmVlISkNCg0KSk9JTiBU
SEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00g
SVQgQUxMLg0KDQpNb25kYXksIEF1Z3VzdCAwNiwgMjAwMSA2OjM5IFBNDQoNCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010807093408</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-07 09:34:08-0400</timestampReceived><subject>Re: Announce loop-AES-v1.3d file crypto package</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; Mr. Ruusu:
&gt; With your permission, I would like to know if you would mind if I
&gt; circulated your software amongst windows programmers to see if someone
&gt; with a background in Windows, and with the same knowledgebase you have
&gt; would be interested in reworking a windows version.

Loop-AES is licensed under GPL. GPL gives you right to use, modify and
distribute it as long as you don't violate the terms of the license.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802190948</emailId><senderName>David =?iso-8859-1?q?G=FCmbel?=</senderName><senderEmail>david.guembel@gmx.de</senderEmail><timestampReceived>2001-08-02 19:09:48-0400</timestampReceived><subject>[OT] Re: Those damn army brats!</subject><body>

Hello,


On Thursday,  2. August 2001 20:20, Michael T. Babcock wrote:
&gt; &gt; &gt; Yes, actually, his message was perfectly MIME compliant.  Read the
&gt; &gt; &gt; source.
&gt; &gt;
&gt; &gt; &lt;snip&gt;
&gt; &gt;
&gt; &gt; OK, please show me the RFC that defines application/ms-tnef :-)
&gt;
&gt; You might want to be silent instead of sounding foolish.
&gt;
&gt; application/ms-tnef is the type of data within a segment of the MIME
&gt; message.
&gt; The message is MIME compliant -- perfectly so.  It began and ended with
&gt; proper MIME separators and defined the data types of each of the sections
&gt; of the message, including the plaintext version your mail reader should
&gt; have presented you with.  If I'm not mistaken, the ms-tnef section may have
&gt; even been
&gt; labelled as alternative content; not as an attachment.

As far as I get ist, what Marc (and others) is complaining about is the 
message &lt;NBBBJHKIOKPKOGOEPEDPCEFCDMAA.stuart@bh90210.net&gt;, sent on "Fri, 27 
Jul 2001 21:43:58 -0700". That one was of type "multipart/mixed". 
The "application/ms-tnef"-section therefore was not (and also should not have 
been) "labelled as alternative content". 

The question of this message being MIME-compliant or not is not exactly the 
point. But when I read RFC 1341, it says:

            The
            process  of  defining  new  content-subtypes,  then,  is not
            intended to be a mechanism for  imposing  restrictions,  but
            simply  a  mechanism  for publicizing the usages. There are,
            therefore,  two  acceptable  mechanisms  for  defining   new
            Content-Type subtypes:

                 1.  Private values (starting  with  "X-")  may  be
                      defined  bilaterally  between two cooperating
                      agents  without   outside   registration   or
                      standardization.

                 2.   New  standard  values  must  be   documented,
                      registered  with,  and  approved  by IANA, as
                      described in Appendix F.  Where intended  for
                      public  use,  the  formats they refer to must
                      also be defined by a published specification,
                      and possibly offered for standardization.


As I would guess (but don't exactly know) that MS has not taken step 2, the 
second (binary) part of the message schuld have had the 
application/octet-stream content type and have the MS-specific stuff done in 
a private header field, as stated in:

            7.8  Experimental Content-Type Values

            A Content-Type value beginning with the characters "X-" is a
            private  value,  to  be  used  by consenting mail systems by
            mutual agreement.  Any format without a rigorous and  public
            definition  must  be named with an "X-" prefix, and publicly
            specified  values  shall  never  begin  with  "X-".  


Most important and entirely independent of the MIME-compliancy of the message 
is the fact that you simply cannot send your data (source code in this case?) 
encoded in a proprietary format only readable with proprietary software to a 
list that deals with aspects of an operating system for which _no_ software 
exists that can read the format. You should really stick to the usual way of 
distributing code - make (compressed) tarballs. Which the sender did in a 
second message(see &lt;NBBBJHKIOKPKOGOEPEDPGEGDDMAA.stuart@bh90210.net&gt; ).

Another thing is that it would have been much better to upload the tarball to 
some place in the WWW and simply point interested parties to its URL. 
Distributing binary data of whichever size to a whole bunch of people of 
which you can tell that a maximum of five to ten percent will one day 
possibly look into it. Although 7 kb is not too much, I personally would 
consider it impolite. As says RFC 1855:

| Don't send large files to mailing lists when Uniform Resource Locators 
| (URLs) or pointers to ftp-able versions will do. If you want to send it as 
| multiple files, be sure to follow the culture of the group. If you don't
| know what that is, ask. 



Regards,



David G√ºmbel




-- 
"UNIX is basically a simple operating system, but you have to be a genius to 
understand the simplicity."
 -- Dennis Ritchie

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802194328</emailId><senderName>David =?iso-8859-1?q?G=FCmbel?=</senderName><senderEmail>david.guembel@gmx.de</senderEmail><timestampReceived>2001-08-02 19:43:28-0400</timestampReceived><subject>Re: [OT] Re: Those damn army brats!</subject><body>

On Thursday,  2. August 2001 21:09, David G√ºmbel wrote:

[a lot of stuff]
&gt; As I would guess (but don't exactly know) that MS has not taken step 2, the
&gt; second (binary) part of the message schuld have had the
&gt; application/octet-stream content type and have the MS-specific stuff done
&gt; in a private header field, as stated in:

The "private header field" part of that statement is nonsense. H.Chan is 
right, of course. And please replace "schuld" with "should" in your mind :-)


Regards,



David G√ºmbel
-- 
"Black holes are where god is dividing by zero."

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802195204</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@fibrespeed.net</senderEmail><timestampReceived>2001-08-02 19:52:04-0400</timestampReceived><subject>Re: [OT] Re: Those damn army brats!</subject><body>

&gt; Most important and entirely independent of the MIME-compliancy of the
message

... that is all I cared about in my response -- "... entirely independant of
..." -- now
Marc did point out that the attachment wasn't readable to non-MS mail
readers,
and this is correct (and was the part of my response labelled as 'if I'm not
mistaken'),
which I was.

&gt; Another thing is that it would have been much better to upload the tarball
to
&gt; some place in the WWW and simply point interested parties to its URL.

Unfortunately, URI-based peer-to-peer doesn't exist in a way that allows us
to
share large files on an on-demand basis yet without these types of decisions
being
made.  Hopefully they will be in the future ...

For example: p2pfile://mbabcock@fibrespeed.net/shared/source01.tar.gz
--
Michael T. Babcock


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802210541</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-08-02 21:05:41-0400</timestampReceived><subject>[OT] Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Thursday 02 August 2001 21:35, Hubert Chan wrote:
&lt;snip&gt;
&gt; RFC2046, section 6 (Experimental Media Type Values):
&gt; ,----
&gt;
&gt; | Any format without a rigorous and public definition must be named
&gt; | with an "X-" prefix...
&gt;
&gt; `----
&gt;
&gt; I believe that is what Marc was referring to.
&gt;
&gt; So the MIME type should have been called "application/x-ms-tnef".
&lt;snip&gt;

Actually, they (MS) registered ms-tnef with IANA, but as 
application/vnd.ms-tnef.
http://www.isi.edu/in-notes/iana/assignments/media-types/application/vnd.ms-tnef

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7adxd3oWD+L2/6DgRArpCAJwIzdIsstqD0sffkH+yYefxMl1RswCgh+E2
KElluJRuVOHCZjGN1oGSgkE=
=vIfu
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010802222342</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-08-02 22:23:42-0400</timestampReceived><subject>Re: [OT] Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Marc" == Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; writes:

Marc&gt; On Thursday 02 August 2001 21:35, Hubert Chan wrote: &lt;snip&gt;
&gt;&gt; RFC2046, section 6 (Experimental Media Type Values):
&gt;&gt; ,----
&gt;&gt; | Any format without a rigorous and public definition must be named
&gt;&gt; | with an "X-" prefix...
&gt;&gt; `----
&gt;&gt; 
&gt;&gt; I believe that is what Marc was referring to.
&gt;&gt; 
&gt;&gt; So the MIME type should have been called "application/x-ms-tnef".
Marc&gt; &lt;snip&gt;

Marc&gt; Actually, they (MS) registered ms-tnef with IANA, but as
Marc&gt; application/vnd.ms-tnef.
http://www.isi.edu/in-notes/iana/assignments/media-types/application/vnd.ms-tnef

Hmm.  The RFC says that the format needs a "public definition".  Does
this "public definition" mean the definition included in the referenced
page?  Or does it mean that the file format itself has to have a public
definition?  Judging from all the registered application/vnd.* types,
I'm guessing the former (though I'd much more prefer the latter).

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/651854DF71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7adLiZRhU33H9o38RAtLgAJ99sIUnBR6KZcGkQCcc45C4RlpFsQCfYVC8
Pi0yGfvwdbCpcyzeqqgmprE=
=eC8v
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010806105714</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-08-06 10:57:14-0400</timestampReceived><subject>Re: [OT] Re: Those damn army brats!</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Friday 03 August 2001 00:23, Hubert Chan wrote:
&gt; &gt;&gt;&gt;&gt;&gt; "Marc" == Marc Mutz &lt;Marc.Mutz@uni-bielefeld.de&gt; writes:
&lt;snip&gt;
&gt; Hmm.  The RFC says that the format needs a "public definition".
&lt;snip&gt;

rfc2048 has all the gory details. Esp. Sect. 2.1

Marc

- -- 
The intensity and complexity of life, attendant upon advancing 
civilization, have rendered necessary some retreat from the world, and 
man, under the refining influence of culture, has become more sensitive 
to publicity, so that solitude and privacy have become more essential 
to the individual; but modern enterprise and invention have, through 
invasions upon his privacy, subjected him to mental pain and distress, 
far greater than could be inflicted by mere bodily injury.
S.D. Warren/L.D. Brandeis: The Right to Privacy, Harvard Law Review 
vol.IV, no.5 (1890)
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7bpPP3oWD+L2/6DgRAgTmAKCp7XvumiZuZaM16Elgk+S6J2unKwCfXCuo
jImQL43BrQVfn6nTJorRCBM=
=Oy99
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010807112600</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-07 11:26:00-0400</timestampReceived><subject>RE: Announce loop-AES-v1.3d file crypto package</subject><body>

TXIuIFJ1dXN1Og0KDQoJWWVzLCBJIGFtIGF3YXJlIG9mIHRoYXQuIEkganVzdCB0aG91Z2h0IGl0
IHBvbGl0ZSB0byBhc2sgeW91IGluIGFkdmFuY2UuDQoNCg0KVmVyeSBSZXNwZWN0ZnVsbHksIA0K
DQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVybHkgSGlsbHMs
IENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQpIA0Kc3R1YXJ0
QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYwNDMs
IEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1KS0zMzgtNjAw
NSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0KDQpUZWxlY29w
aWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVmYXguY29t
IChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VSIENP
VU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KVHVlc2RheSwgQXVndXN0IDA3LCAy
MDAxIDQ6MjMgQU0NCg0KLS0tLS1PcmlnaW5hbCBNZXNzYWdlLS0tLS0NCkZyb206IHJvb3RAbW9u
c3Rlci5taXN0eS5jb20gW21haWx0bzpyb290QG1vbnN0ZXIubWlzdHkuY29tXU9uIEJlaGFsZiBP
ZiBKYXJpIFJ1dXN1DQpTZW50OiBUdWVzZGF5LCBBdWd1c3QgMDcsIDIwMDEgMjozNCBBTQ0KVG86
IHN0dWFydEBiaDkwMjEwLm5ldA0KQ2M6IGxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcNClN1Ympl
Y3Q6IFJlOiBBbm5vdW5jZSBsb29wLUFFUy12MS4zZCBmaWxlIGNyeXB0byBwYWNrYWdlDQoNCiJJ
VDMgU3R1YXJ0IEIuIFRlbmVyLCBVU05SLVIiIHdyb3RlOg0KPiBNci4gUnV1c3U6DQo+IFdpdGgg
eW91ciBwZXJtaXNzaW9uLCBJIHdvdWxkIGxpa2UgdG8ga25vdyBpZiB5b3Ugd291bGQgbWluZCBp
ZiBJDQo+IGNpcmN1bGF0ZWQgeW91ciBzb2Z0d2FyZSBhbW9uZ3N0IHdpbmRvd3MgcHJvZ3JhbW1l
cnMgdG8gc2VlIGlmIHNvbWVvbmUNCj4gd2l0aCBhIGJhY2tncm91bmQgaW4gV2luZG93cywgYW5k
IHdpdGggdGhlIHNhbWUga25vd2xlZGdlYmFzZSB5b3UgaGF2ZQ0KPiB3b3VsZCBiZSBpbnRlcmVz
dGVkIGluIHJld29ya2luZyBhIHdpbmRvd3MgdmVyc2lvbi4NCg0KTG9vcC1BRVMgaXMgbGljZW5z
ZWQgdW5kZXIgR1BMLiBHUEwgZ2l2ZXMgeW91IHJpZ2h0IHRvIHVzZSwgbW9kaWZ5IGFuZA0KZGlz
dHJpYnV0ZSBpdCBhcyBsb25nIGFzIHlvdSBkb24ndCB2aW9sYXRlIHRoZSB0ZXJtcyBvZiB0aGUg
bGljZW5zZS4NCg0KUmVnYXJkcywNCkphcmkgUnV1c3UgPGphcmkucnV1c3VAcHAuaW5ldC5maT4N
Cg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010811144912</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-08-11 14:49:12-0400</timestampReceived><subject>Re: Suggested kerneli changes</subject><body>

hello,

On Fri, 10 Aug 2001, Adam J. Richter wrote:
&gt; 	I would like to suggest the following kerneli changes, which
&gt; I am willing to implement if contributions from a US citizen are
&gt; considered OK by the kerneli maintainer, and if the reaction to them
&gt; is generally positive.
[..]
&gt; 	Does this plan look OK?
?

it sounds as if you are suggesting things which have been
already accomplished...

please take a closer look at http://cryptoapi.sourceforge.net/... you
might recognize some of your suggestions more or less implemented
already...

btw, the cryptoapi is not ready yet for being proposed for kernel
inclusion yet, it's still work in progress...

the IV calculation thing on the other hand has already been proposed,
and we hope, that it will go in real soon now...

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010812044103</emailId><senderName>"Adam J. Richter"</senderName><senderEmail>adam@yggdrasil.com</senderEmail><timestampReceived>2001-08-12 04:41:03-0400</timestampReceived><subject>Re: Standardizing encrypted device formats</subject><body>

Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt; writes:
&gt;IV computation in loop-AES is correct. IV is computed in 512 byte units
&gt;regardless or PAGE_CACHE_SIZE, meaning that each 512 byte chunk has unique
&gt;IV. This is optimal because minimum addressable unit on block devices is 512
&gt;bytes.

	You're right.  I botched the math.  Your calculation produces
the same initial values on systems with a different PAGE_CACHE_SIZE
because the value of the page number will change accordingly.  I
should have tried to include a calculation of an example before claiming
there was a problem.  I apologize for making a misguided posting.

Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104
adam@yggdrasil.com     \ /                  San Jose, California 95129-1034
+1 408 261-6630         | g g d r a s i l   United States of America
fax +1 408 261-6631      "Free Software For The Rest Of Us."

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010812164155</emailId><senderName>"John.J.Lee"</senderName><senderEmail>jjl@pobox.com</senderEmail><timestampReceived>2001-08-12 16:41:55-0400</timestampReceived><subject>Unsupported encryption type</subject><body>


I've used the i-kernel for years now, but I'm having trouble installing it
on a laptop I'm using.  I patched the standard 2.2.18 kernel with the
2.2.18-3 i-kernel patch, compiled and booted and created a file to store
the data with no problems, but:

$ losetup -e serpent /dev/loop3 ./.cryptfile
Unsupported encryption type serpent

I've tried the obvious spelling variations ('serpent', 'Serpent', etc.)
and tried using AES instead, tried recompiling util-linux (2.10p) and
reinstalling mount, umount, losetup.  No joy.  All the encryption stuff
is compiled into the kernel (not as modules), and in my syslog is the
following

[...]
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered rijndael (16)
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered rijndael-cbc (65552)
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered aes (18)
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered aes-cbc (65554)
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered serpent (7)
Aug 11 19:23:34 tosh kernel: cryptoapi: Registered serpent (65543)
[...]

I looked, and /proc/crypto{cipher,digest} are there, with aes, aes-cbc,
serpent, serpent-cbc, etc.  I'm using progeny debian 1.0.  I did remember
to point the util-linux configure script at the right kernel headers.

Do I need a more recent util-linux?  I coulnd't see anything in the
(util-linux) changelog that related to that.

Thanks for any help


John


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010812233838</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-12 23:38:38-0400</timestampReceived><subject>ScramDisk</subject><body>

TXIuIFJ1dXN1LCBldCBhbC46DQoNCglJIGFtIGF3YXJlIHRoYXQgeW91IGFyZSBub3QgaW4gYSBw
b3NpdGlvbiB0byBhZGFwdCB5b3VyIGxvb3AtYWVzIHNvZnR3YXJlIHRvIHJ1biB1bmRlciBXaW5k
b3dzLiBIb3dldmVyLCBJIGFtIGN1cmlvdXMgaG93IGRpZmZpY3VsdCBpdCBtaWdodCBiZSB0byBh
ZGFwdCBpdCB0byB3b3JrIGluIGEgbWFubmVyIGNvbmR1Y2l2ZSB0byBiZWluZyBjb21wYXRpYmxl
IHdpdGggdGhlICJjb250YWluZXIiIGZvcm1hdCB3aGljaCBzY3JhbWRpc2sgdXNlcy4gVGhlIGlk
ZWEgYmVpbmcsIHRoYXQgeW91ciBsb29wLWFlcyBzb2Z0d2FyZSBjb3VsZCB3b3JrIGFzIGl0IGRv
ZXMgbm93LCBvciBvcHRpb25hbGx5IGluIGEgbWFubmVyIHRvIGJlIGFibGUgdG8gcmVhZCBzY3Jh
bWRpc2sgY3JlYXRlZCAiY29udGFpbmVycyIgdW5kZXIgTGludXguDQoNCglXaGlsZSBJIGtub3cg
bG9vcC1hZXMgKGFjdHVhbGx5IGEgbWlzbGVhZGluZyBuYW1lLCBhcyBpdCBhcHBhcmVudGx5IHN1
cHBvcnRzIG90aGVyIGVuY3J5cHRpdmUgdGVjaG5pcXVlcykgZG9lcyBzdXBwb3J0IEFFUywgYW5k
IHNjcmFtZGlzayBkb2VzIG5vdCwgcGVyaGFwcyBpdCBjb3VsZCBzdGlsbCBiZSBhZGFwdGVkIGZv
ciB1c2luZyB0aGUgYWxnb3JpdGhtcyB3aGljaCBzY3JhbWRpc2sgZG9lcyB1c2UuIEFzIHdlbGws
IEkgdGhpbmsgaXQgcmVhc29uYWJsZSB0byBwcmVzdW1lIHRoYXQgc2NyYW1kaXNrIHdpbGwgc3Vw
cG9ydCBBRVMgaW4gdGhlIG5lYXIgdG8gY2xvc2UgZnV0dXJlLg0KDQoJQnkgdGhlIHdheSwgSSB3
b3VsZCBiZSBjdXJpb3VzIHRvIGhlcmUgZnJvbSB0aGUgZGV2ZWxvcGVycyBvZiB0aGUgSS1QYXRj
aCBhcyB0byB3aGV0aGVyIHRoYXQgY291bGQgYmUgYWRhcHRlZCB0byByZWFkIHRoZXNlIHNjcmFt
ZGlzayBmb3JtYXR0ZWQgY29udGFpbmVycyBhcyB3ZWxsLg0KDQoNCglUaGUgVVJMIGlzIGh0dHA6
Ly93d3cuc2NyYW1kaXNrLmNsYXJhLm5ldC8NCg0KDQpWZXJ5IFJlc3BlY3RmdWxseSwgDQoNClN0
dWFydCBCbGFrZSBUZW5lciwgSVQzLCBVU05SLVIsIE4zR1dHIA0KQmV2ZXJseSBIaWxscywgQ2Fs
aWZvcm5pYQ0KVlRVIDE5MDRHIChWb2x1bnRlZXIgVHJhaW5pbmcgVW5pdCkgDQpzdHVhcnRAYmg5
MDIxMC5uZXQgDQp3ZXN0IGNvYXN0OiAoMzEwKS0zNTgtMDIwMiBQLk8uIEJveCAxNjA0MywgQmV2
ZXJseSBIaWxscywgQ0EgOTAyMDktMjA0MyANCmVhc3QgY29hc3Q6ICgyMTUpLTMzOC02MDA1IFAu
Ty4gQm94IDQ1ODU5LCBQaGlsYWRlbHBoaWEsIFBBIDE5MTQ5LTU4NTkgDQoNClRlbGVjb3BpZXI6
ICg0MTkpLTcxNS02MDczIGZheCB0byBlbWFpbCBnYXRld2F5IHZpYSB3d3cuZWZheC5jb20gKGl0
J3MgZnJlZSEpIA0KDQpKT0lOIFRIRSBVUyBOQVZZIFJFU0VSVkUsIFNFUlZFIFlPVVIgQ09VTlRS
WSwgQU5EIEJFTkVGSVQgRlJPTSBJVCBBTEwuIA0KDQpTdW5kYXksIEF1Z3VzdCAxMiwgMjAwMSA0
OjMxIFBNDQoNCg==


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010813123015</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-08-13 12:30:15-0400</timestampReceived><subject>Re: Cant compile cryptoapi from CVS in cryptoapi.sourceforge.net</subject><body>


I've released cryptoapi-2.4.7.0 right now;
you can download the source tarball from the projects' file section on
sourceforge;

after unpacking, just do a

./configure --enable-test-tools

to enable building of the test_cipher tool;

it's main use for now is to test the ciphers against known test vectors
and it is used by the test_vektor.sh;

On Mon, 13 Aug 2001, S√∏ren Kongstad wrote:

&gt; Hi
&gt; I am rather new in linux programming, and I am having problems with compiling
&gt; the CVS source for cryptoapi. There is no configure file in the CVS archive,
&gt; and I dont know enough to edit the "old" configure file.
&gt;
&gt; I specifically want to try to compile the tests in the tests directory, to
&gt; see how to use the api in "real life", and have tried to include  the "tests"
&gt; directory in the source found in http://www.hvrlab.org/pub/crypto/. I have
&gt; come as far as making testcip.o but I do not know what to link against to
&gt; make it work.
&gt;
&gt; I made testcip with this command - executed in the tests directory:
&gt;  gcc  -I../include -I./ testcip.c -o testcip.o
&gt;
&gt; Any help would be appreciated
&gt;
&gt;
&gt; S√∏ren Kongstad
&gt;
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/
&gt;

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010813180656</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-13 18:06:56-0400</timestampReceived><subject>RE: I-Patch current status?</subject><body>

TXIuIFJpZWRlbDoNCg0KCVdoYXQgaXMgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBJLVBhdGNo
IGluIGdlbmVyYWwgKGFuZCB3aXRoIHJlZ2FyZCB0byBpc3N1ZXMgZGlzY3Vzc2VkIGJ5IE1yLiBS
dXVzdSBpbiB0aGUgcGFzdCk/DQoNCglXaGF0IGlzIHRoZSBjdXJyZW50IHN0YXR1cyBvZiB0aGUg
SS1QYXRjaCB3aXRoIHJlZ2FyZCB0byBrZXJuZWwgMi40Ljg/DQoNCglXb3VsZCBpdCBiZSBkaWZm
aWN1bHQgZm9yIHRoZSBJLVBhdGNoIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzb21lIFdpbmRvd3Mg
Zm9ybWF0ICJjb250YWluZXIiIHR5cGUgZmlsZSAoc3VjaCBhcyBzY3JhbWRpc2spLCBzaW5jZSBs
b29wLWFlcyBkb2Vzbid0IGxvb2sgbGlrZSBpdCB3aWxsIGV2ZXIgYmUgY29tcGF0aWJsZSB3aXRo
IGFueXRoaW5nIGVsc2U/IFNpbmNlIGxvb3AtYWVzIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55
IHdpbmRvd3MgZm9ybWF0IHN0dWZmLCBpdHMgcmVhbGx5IG1ha2UgaXQgYSBsZXNzIHZpYWJsZSBz
b2x1dGlvbiBmb3IgaW1wbGVtZW50YXRpb24uDQoNCg0KVmVyeSBSZXNwZWN0ZnVsbHksIA0KDQpT
dHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyANCkJldmVybHkgSGlsbHMsIENh
bGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5nIFVuaXQpIA0Kc3R1YXJ0QGJo
OTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIgUC5PLiBCb3ggMTYwNDMsIEJl
dmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0OiAoMjE1KS0zMzgtNjAwNSBQ
Lk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01ODU5IA0KDQpUZWxlY29waWVy
OiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2aWEgd3d3LmVmYXguY29tIChp
dCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZFLCBTRVJWRSBZT1VSIENPVU5U
UlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KTW9uZGF5LCBBdWd1c3QgMTMsIDIwMDEg
MTE6MDEgQU0NCg0K


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010814142140</emailId><senderName>Reimavuo Sami</senderName><senderEmail>sami.reimavuo@dnafinland.fi</senderEmail><timestampReceived>2001-08-14 14:21:40-0400</timestampReceived><subject>foobar</subject><body>

subscribe linux-crypto


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010815041411</emailId><senderName>Chris Schadl</senderName><senderEmail>cschadl@satan.org.uk</senderEmail><timestampReceived>2001-08-15 04:14:11-0400</timestampReceived><subject>kerneli patch broken in recent kernels?</subject><body>

I've been trying (so far with little success) to get the kerneli patches
working with my system.  Unfortunatley, the kerneli patches apparently
haven't been updated for some time now (since 2.4.3) and as I am using kernel
2.4.8 this seems to be a bit of a problem.  However, I was able to find a
hacked patch that supposedly works with newer kernels
(http://www.mattm.f9.co.uk/cryptopatch/patch-int-2.4.7.gz).  The patch
applied cleanly, and I was able to recompile my kernel and utils-linux
succesfully.  However, when I try to mount an encrypted partition, the mount
fails and I get the following errors in my syslog:

Aug 14 21:55:45 lain kernel: attempt to access beyond end of device
Aug 14 21:55:45 lain kernel: 07:00 rw=0, want 10241, limit 10240
Aug 14 21:55:45 lain kernel: EXT2-fs: unable to read group descriptors

That's when I use blowfish as the cipher.  Using AES I get the following:

Aug 14 22:03:31 lain kernel: EXT2-fs error (device loop(7,0)):
ext2_check_descriptors: Block bitmap for group 0 not in group (block
3573131651)!
Aug 14 22:03:31 lain kernel: EXT2-fs: group descriptors corrupted!

Has anyone been able to get kerneli to work with 2.4.8?  (or any newer kernel
for that matter?)  I've been hearing that kerneli is hopelessly broken at the
moment and to not even bother with it.  If anyone here could help straighten
this out, I'd really appriciate it.

-- 
Chris Schadl
cschadl@satan.org.uk


[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010815072657</emailId><senderName>"Adam J. Richter"</senderName><senderEmail>adam@yggdrasil.com</senderEmail><timestampReceived>2001-08-15 07:26:57-0400</timestampReceived><subject>cryptoapi-2.4.7.0 works!</subject><body>

Herbert Valerio Riedel &lt;hvr@hvrlab.org&gt; wrote:
&gt;I've released cryptoapi-2.4.7.0 right now;
&gt;you can download the source tarball from the projects' file section on
&gt;sourceforge;

	Great!  I now have two notebook computers running cryptoloop
AES root partitions using cryptoapi-2.4.7.0 with the initial value
patch.  (Yes, I am prepared to decrypt and reencrypt if the underlying
cryptoloop format changes and reinstall if the power goes out during
that operation.)  It feels like a slight hardware downgrade when there
is a lot of disk activity, and is unnoticible at all other times.
Psychologically, though, I have a substantial feeling of relief at
having my data encrypted.

	Your new release does just about everything I want, and is
organized in a very convenient way.  I believe this arrangement will
make encrypted loopback devices much more widely used.  Thank you so
much for your work on it.

	Here are four minor bits of feedback to your excellent work:

	1. The only bug that I have found so far is very minor: for some
unknown reason, the automatic loading of cipher modules by name seems
to happen too late for the cipher to be found.  I have not yet debugged
this.  Here is an example of what I am talking about:

# losetup -e aes /dev/loop/5 /tmp/junk 
The cipher does not exist, or a cipher module needs to be loaded into the kernel
ioctl: LOOP_SET_STATUS: Invalid argument
# losetup -e aes /dev/loop/5 /tmp/junk 
Available keysizes (bits): 128 192 256 
Keysize: 256
Password :
#

	2. The util-linux patch could use some cleanup, which I
will attend to if nobody beats me to it.  In particular:

     		a. The additional "old style" numeric cipher codes
		   that the patch add to lomount.c are not supported
		   by either cryptoapi-2.4.7.0 or any of Linus's kernels,
		   so they should be deleted.  Right?  This is what confused
		   me before into thinking that the current cryptoapi
		   did not allow selection of ciphers by name.

		b. I have added a system("modprobe cryptoloop") at a point
		   in lomount.c, which is the other piece of module loading
		   that is necessary to make everything work without the
		   user ever having to know that any of this is implemented
		   in a loadable module.  Here is the simple patch:

--- util-linux/mount/lomount.c~ Tue Aug 14 02:47:26 2001
+++ util-linux/mount/lomount.c  Tue Aug 14 22:07:54 2001
@@ -344,6 +344,7 @@
 again:
        set_loop_passwd(&amp;loopinfo, pfd, keysz, encryption, fd, ffd);
 
+       system("modprobe -s -k cryptoloop");
        if (ioctl (fd, LOOP_SET_STATUS, &amp;loopinfo) &lt; 0) {
                /* Try again with old-style LO_CRYPT_XX if
                    new-style LO_CRYPT_CRYPTOAPI ioctl didn't work */


	3. I have made a small cleanup to shrink the module
autoloading code in cryptoapi/api/cryptoapi.c by six lines.  (The bug
I described in item #1 is the same with or without this patch.)
Here is the patch:

--- cryptoapi/api/cryptoapi.c.orig	Tue Aug 14 23:28:48 2001
+++ cryptoapi/api/cryptoapi.c	Tue Aug 14 23:31:59 2001
@@ -115,16 +115,19 @@
 	struct list_head *tmp;
 	struct transform_group *tg;
 #ifdef CONFIG_KMOD
-	int mod_try = 0;
 	char module_name[200];
 	char *p;
-retry:
 #endif
 
 	if (tgroup &gt;= MAX_TRANSFORM)
 		return NULL;
 	tg = &amp;transforms[tgroup];
 
+#ifdef CONFIG_KMOD
+	sprintf(module_name, "%s-%s-", tg-&gt;tg_name, name);
+retry:
+#endif
+
 	read_lock(&amp;tg-&gt;tg_lock);
 	for (tmp = tg-&gt;tg_head-&gt;next; tmp != tg-&gt;tg_head; tmp = tmp-&gt;next) {
 		struct transform_implementation *t;
@@ -138,13 +141,6 @@
 	}
 	read_unlock(&amp;tg-&gt;tg_lock);
 #ifdef CONFIG_KMOD
-	if (mod_try == 0) {
-		mod_try = 1;
-		sprintf(module_name, "%s-%s", tg-&gt;tg_name, name);
-		printk(KERN_DEBUG "cryptoapi: trying %s\n", module_name);
-		request_module(module_name);
-		goto retry;
-	}
 	/* We try loading more and more general modules in succession.
 	 * For example, if the module_name initially is set to
 	 * "cipher-blowfish-cbc", we first try a module called


	4. It would help maximize distribution of this software, if,
at some point, it were divided into separate packages to accomodate
legal and distribution policy distinctions.  For example, cryptoapi
without the ciphers may be legal to import into countries where the
ciphers of any serious key length require further permission from the
government, or it may just simplify import/export paperwork.  So, that
part would probably be adopted into even the tamest distributions if
it were separate.  Among the ciphers, there is also a distinction
between countries where the idea cipher patent is legal and where it
is not.  So, distributing the idea cipher separately would help
distributions that want to include "official" sources, but for legal
or product definition reasons do not want to distribute software
covered by the idea software patent.

Adam J. Richter     __     ______________   4880 Stevens Creek Blvd, Suite 104
adam@yggdrasil.com     \ /                  San Jose, California 95129-1034
+1 408 261-6630         | g g d r a s i l   United States of America
fax +1 408 261-6631      "Free Software For The Rest Of Us."


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010815235919</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-08-15 23:59:19-0400</timestampReceived><subject>Re: Question about implementation</subject><body>

On Wed, 15 Aug 2001, lam wai wm wrote:

&gt; Hi all,
&gt;
&gt; I'm the student who want to encrypt, decrypt some data in
&gt; kernel mode.  I've stuck for serveral days, but I still cannot
&gt; figure it out why I can't really encrypt the data.  Could you
&gt; please point out what's problem that I've made.

well, you messed up pointers :-)

&gt; static int init_cipher()
&gt; {
&gt;   char plain_text[11] = "readline26\n";
[..]
&gt;   __u32 input1 = 0;
[..]
&gt;   input1 = (__u32)plain_text;
[..]
&gt;   dump_u32_buffer(&amp;input1, sizeof(input1));
&gt;   ci-&gt;encrypt(cx, (u8 *)&amp;input1, (u8 *) &amp;output1, sizeof(&amp;input1));

...see what I mean?

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010816174156</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-16 17:41:56-0400</timestampReceived><subject>RE: incompatibility problem, please help</subject><body>

TXIuIFJ1dXN1Og0KDQoJSSBkb24ndCBxdWVzdGlvbiB0aGUgZmFjdCB0aGF0IHlvdSBtYXkgcGVy
ZmVjdGx5IGJlIGNvcnJlY3QgaW4geW91ciBhc3Nlc3NtZW50IGFuZCB2ZXJ5IGFjY3VyYXRlIGlu
IHlvdXIgdGVjaG5pY2FsIGFuc3dlciwgSSBqdXN0IG1lYW4gdG8gc2F5IHRoYXQgaWYgSSBkaWRu
J3QgcmVhbGl6ZSB0aGF0IHdhcyB3aGF0IHlvdSBtZWFudCwgaXQgaXMgYWxzbyBwb3NzaWJsZSBv
dGhlcnMgZGlkIG5vdCBlaXRoZXIuIEkgZG91YnQgYW55b25lIHdhcyBhYmxlIHRvIHJlYWQgdGhh
dCBtZWFuaW5nIG91dCBvZiB5b3VyIGluaXRpYWwgcmVwbHkuDQoNCglJIGtub3cgKGFzIEkgc29t
ZXRpbWVzIGRvIHRoZSBzYW1lIHRoZSB0aGluZykgdGhhdCB3aGVuIHlvdSBoYXZlIGEgaGlnaCBv
cmRlciBjb21tYW5kIG9mIGEgdGVjaG5pY2FsIHN1YmplY3QsIHNvbWV0aW1lcyB5b3UganVzdCAi
c2VlIiB0aGUgcmlnaHQgYW5zd2VyLCBhbmQgZm9yZ2V0IHRvIGV4cGxhaW4gYWxsIHRoZSByZWFz
b25pbmcuIEkgaGF2ZSBub3QgYmVlbiBhcm91bmQgdGhlIGNyeXB0by1hcGkgc28gbG9uZyAoYXMg
bXkgcmVwbHkgaW5kaWNhdGVkKSB0byBrbm93IGl0cyBjb21wYXRpYmlsaXR5IGhpc3Rvcnkgd2l0
aCBvbGRlciBrZXJuZWxzLiBJdCBpcyBxdWl0ZSBwb3NzaWJsZSB0aGUgcG9zdGVyIHN0YW5kcyBm
cm9tIGEgc2ltaWxhciBwb2ludCBvZiB2aWV3Lg0KDQoJVG8ganVzdCB0ZWxsIHNvbWVvbmUgdG8g
dXNlIHlvdXIgc29mdHdhcmUgY2FuIHNvdW5kIGFycm9nYW50IG9yIGVnb3Rpc3RpY2FsLCBob3dl
dmVyLCBpbmNsdXNpb24gb2YgcGVyZmVjdGx5IHZhbGlkIHRlY2huaWNhbCByZWFzb25pbmcgd2h5
IHRoZSBjcnlwdG8tYXBpIHdpbGwgbm90IHdvcmsgaXMgYSBzb3VuZCB0ZWNobmljYWwgZXZhbHVh
dGlvbiBhbmQgYSBzb2x1dGlvbi4gQSBmaW5lIGxpbmUgcGVyaGFwcywgYnV0IGFzIEkgYW0gc3Vy
ZSB5b3UgYXJlIGF3YXJlIGEgc2luZ2xlIEVuZ2xpc2ggc2VudGVuY2UgY2FuIHNvbWV0aW1lcyBt
YWtlIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHdoaWNoIG9mIHRoZSBhYm92ZSBpcyBwZXJjZWl2
ZWQgYnkgeW91ciBpbnRlbmRlZCByZWFkZXIocykgb2Ygc3VjaCBhIHBvc3QuDQoNCg0KVmVyeSBS
ZXNwZWN0ZnVsbHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBOM0dXRyAN
CkJldmVybHkgSGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRyYWluaW5n
IFVuaXQpIA0Kc3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4LTAyMDIg
UC5PLiBCb3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0IGNvYXN0
OiAoMjE1KS0zMzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAxOTE0OS01
ODU5IA0KDQpUZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0ZXdheSB2
aWEgd3d3LmVmYXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBSRVNFUlZF
LCBTRVJWRSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0KVGh1cnNk
YXksIEF1Z3VzdCAxNiwgMjAwMSAxMDozMiBBTQ0KDQotLS0tLU9yaWdpbmFsIE1lc3NhZ2UtLS0t
LQ0KRnJvbTogcm9vdEBtb25zdGVyLm1pc3R5LmNvbSBbbWFpbHRvOnJvb3RAbW9uc3Rlci5taXN0
eS5jb21dT24gQmVoYWxmIE9mIEphcmkgUnV1c3UNClNlbnQ6IFRodXJzZGF5LCBBdWd1c3QgMTYs
IDIwMDEgMTA6MzEgQU0NClRvOiBzdHVhcnRAYmg5MDIxMC5uZXQNCkNjOiBsaW51eC1jcnlwdG9A
bmwubGludXgub3JnDQpTdWJqZWN0OiBSZTogaW5jb21wYXRpYmlsaXR5IHByb2JsZW0sIHBsZWFz
ZSBoZWxwDQoNCiJJVDMgU3R1YXJ0IEIuIFRlbmVyLCBVU05SLVIiIHdyb3RlOg0KPiBXaGlsZSBJ
IHJlc3BlY3QgTXIuIFJ1dXN1J3MgcHJvZ3JhbW1pbmcgYWJpbGl0eSwgaGUgc2VlbXMgdG8gdmVy
eSBvZnRlbg0KPiBhbnN3ZXIgdGhlIHF1ZXN0aW9uIGhlIHRoaW5rcyB5b3VyIGFza2luZyBhbmQg
bm90IHRoZSBvbmUgYWN0dWFsbHkNCj4gZW50aXRsZWQgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUg
dGV4dC4gUGVyaGFwcyBNci4gUnV1c3UgbWlzc2VkIHRoZSBwYXJ0DQo+IG9mIHlvdXIgcXVlc3Rp
b24gd2hlcmUgeW91IG1lbnRpb25lZCB5b3Ugd2VyZSBhbHJlYWR5IHVzaW5nIGNyeXB0by1hcGks
IEkNCj4gZG9uJ3Qga25vdy4gSGUgaGFzIGEgc29sdXRpb24gd2hpY2ggd2lsbCB3b3JrLCBidXQg
aG93IHRvIGNvbnRpbnVlIHVzaW5nDQo+IHdoYXQgeW91IGhhdmUgZGVwbG95ZWQgYW5kIHRvIHJl
c29sdmUgeW91ciBjdXJyZW50IGlzc3VlIGhlIGRpZCBub3QNCj4gYWRkcmVzcy4NCg0KU3R1YXJ0
LCB5b3UgbWlzc2VkIG15IHBvaW50IHdoaWNoIHdhcyB0aGF0IDIuMiBrZXJuZWxzIGRvbid0IGhh
dmUgdG9vbHMgdG8NCnJlbGlhYmx5IGludGVyb3BlcmF0ZSB3aXRoIDIuNCBjcnlwdG8tYXBpIGRp
c2sgaW1hZ2VzLiBJIHBvaW50ZWQgdGhlDQpvcmlnaW5hbCBwb3N0ZXIgdG8gYSBzb2x1dGlvbiB3
aGVyZSBoZSBjYW4gdXNlIHRoZSBzYW1lIGVuY3J5cHRlZCBkaXNrDQppbWFnZXMgd2l0aCAyLjIg
YW5kIDIuNCBrZXJuZWxzLg0KDQpSZWdhcmRzLA0KSmFyaSBSdXVzdSA8amFyaS5ydXVzdUBwcC5p
bmV0LmZpPg0K


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010819181137</emailId><senderName>Roger Luethi</senderName><senderEmail>rl@hellgate.ch</senderEmail><timestampReceived>2001-08-19 18:11:37-0400</timestampReceived><subject>Re: Can anybody please confirm? (SOLVED)</subject><body>

Herbert Valerio Riedel's iv-mode-sector changes (which I didn't know
but have been hanging around on sourceforge for quite a while) fix
the problem. Thanks a lot!

roger

On Sun, Aug 19, 2001 at 01:28:44PM +0200, Roger Luethi wrote:
&gt; Hi there
&gt; 
&gt; I have come across a problem with linux-crypto and I thought I'd ask
&gt; if the problem exists for others as well.
&gt; 
&gt; So here we go:
&gt; 
&gt; modprobe cipher-aes
&gt; dd if=/dev/urandom of=/tmp/test bs=1M count=1
&gt; losetup -e aes /dev/loop0 /tmp/test
&gt; mke2fs -b 2048 /dev/loop0
&gt; mount /dev/loop0 /mnt
&gt; 
&gt; If this fails for you -- that's the problem. I know how to work around
&gt; it, I think I know pretty well what is going wrong internally, and
&gt; I am currently working on a proper solution.
&gt; 
&gt; My solution involves changes to the kernel, to losetup, _and_ the
&gt; e2fsprogs, so if somebody knows a more simple fix -- please let
&gt; me know.
&gt; 
&gt; Otherwise, I'd like to hear if others are experiencing this behavior
&gt; and consider this a problem, too.
&gt; 
&gt; TIA,
&gt; 
&gt; roger
&gt; 
&gt; Linux-crypto:  cryptography in and on the Linux system
&gt; Archive:       http://mail.nl.linux.org/linux-crypto/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010819194745</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-08-19 19:47:45-0400</timestampReceived><subject>RE: Can anybody please confirm?</subject><body>

TXIuIFJpY2h0ZXI6DQoNCglJcyB0aGUgRkFRIG9uIHNvdXJjZWZvcmdlIGFzIHdlbGw/DQoNCg0K
VmVyeSBSZXNwZWN0ZnVsbHksIA0KDQpTdHVhcnQgQmxha2UgVGVuZXIsIElUMywgVVNOUi1SLCBO
M0dXRyANCkJldmVybHkgSGlsbHMsIENhbGlmb3JuaWENClZUVSAxOTA0RyAoVm9sdW50ZWVyIFRy
YWluaW5nIFVuaXQpIA0Kc3R1YXJ0QGJoOTAyMTAubmV0IA0Kd2VzdCBjb2FzdDogKDMxMCktMzU4
LTAyMDIgUC5PLiBCb3ggMTYwNDMsIEJldmVybHkgSGlsbHMsIENBIDkwMjA5LTIwNDMgDQplYXN0
IGNvYXN0OiAoMjE1KS0zMzgtNjAwNSBQLk8uIEJveCA0NTg1OSwgUGhpbGFkZWxwaGlhLCBQQSAx
OTE0OS01ODU5IA0KDQpUZWxlY29waWVyOiAoNDE5KS03MTUtNjA3MyBmYXggdG8gZW1haWwgZ2F0
ZXdheSB2aWEgd3d3LmVmYXguY29tIChpdCdzIGZyZWUhKSANCg0KSk9JTiBUSEUgVVMgTkFWWSBS
RVNFUlZFLCBTRVJWRSBZT1VSIENPVU5UUlksIEFORCBCRU5FRklUIEZST00gSVQgQUxMLiANCg0K
U3VuZGF5LCBBdWd1c3QgMTksIDIwMDEgMTI6NDQgUE0NCg0KLS0tLS1PcmlnaW5hbCBNZXNzYWdl
LS0tLS0NCkZyb206IG93bmVyLWxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcgW21haWx0bzpvd25l
ci1saW51eC1jcnlwdG9AbmwubGludXgub3JnXU9uIEJlaGFsZiBPZiBBZGFtIEouIFJpY2h0ZXIN
ClNlbnQ6IFN1bmRheSwgQXVndXN0IDE5LCAyMDAxIDU6MDkgQU0NClRvOiBybEBoZWxsZ2F0ZS5j
aA0KQ2M6IGxpbnV4LWNyeXB0b0BubC5saW51eC5vcmcNClN1YmplY3Q6IFJlOiBDYW4gYW55Ym9k
eSBwbGVhc2UgY29uZmlybT8NCg0KICAgICAgICBbSSBhbSBjYydpbmcgdGhpcyB0byBsaW51eC1j
cnlwdG8ganVzdCBzbyBldmVyeW9uZSBjYW4ga25vdw0Kc29tZWJvZHkgaGFzIHJlc3BvbmRlZC4g
IEkga25vdyBtb3N0IG9mIHRoZSBsaW51eC1jcnlwdG8gcmVhZGVycyBhbHJlYWR5DQprbm93IHRo
ZSBhbnN3ZXIuXQ0KDQo+bWtlMmZzIC1iIDIwNDggL2Rldi9sb29wMA0KPm1vdW50IC9kZXYvbG9v
cDAgL21udA0KLi4uZGlzYXN0ZXIuDQoNCiAgICAgICAgUGVyaGFwcyB3ZSBuZWVkIGEgRkFRIGVu
dHJ5IGZvciB0aGUgaW5pdGlhbCB2YWx1ZSBwcm9ibGVtLg0KVGhlIGxvb3AgZGV2aWNlIGRlZmF1
bHRzIHRvIHNvbWUgaW5pdGlhbCBibG9jayBzaXplIG90aGVyIHRoYW4NCjIwNDgsIGFuZCAibWsy
ZWZzIC1iIDIwNDgiIGlzIG5vdCBlbm91Z2ggdG8gY2hhbmdlIHRoYXQuICBJIGJlbGlldmUNCnlv
dSBjb3VsZCB1c2UgImJsb2NrZGV2IC0tc2V0YnN6IDIwNDggL2Rldi9sb29wLzAiIHRvIHNldCBp
dCBiZWZvcmUNCnlvdSBkbyB0aGUgbWtlMmZzLCBhbHRob3VnaCB5b3UgY2FuIGdldCB0aGUgc2Ft
ZSBlZmZlY3QgYnkgZmlyc3QNCnRyeWluZyB0byBtb3VudCBpdCB3aXRoIGV4dDIgKGFuZCBmYWls
aW5nKSBhbmQgdGhlbiBkb2luZyB0aGUNCm1rZTJmcyBhbmQgdHJ5aW5nIHRvIG1vdW50IGl0IGFn
YWluLiAgVGhlIGJldHRlciBzb2x1dGlvbiBpcyB0bw0KYnVpbGQgY3J5cHRvYXBpIHdpdGggLi9j
b25maWd1cmUgLS1lbmFibGUtaXYtbW9kZS1zZWN0b3IuICBMb29rDQpmb3IgIklWX01PREVfU0VD
VE9SIiBpbiB0aGUgUkVBRE1FIGluIHRoZSB0b3AgbGV2ZWwgY3J5cHRvYXBpDQpzb3VyY2UgZGly
ZWN0b3J5Lg0KDQpBZGFtIEouIFJpY2h0ZXIgICAgIF9fICAgICBfX19fX19fX19fX19fXyAgIDQ4
ODAgU3RldmVucyBDcmVlayBCbHZkLCBTdWl0ZSAxMDQNCmFkYW1AeWdnZHJhc2lsLmNvbSAgICAg
XCAvICAgICAgICAgICAgICAgICAgU2FuIEpvc2UsIENhbGlmb3JuaWEgOTUxMjktMTAzNA0KKzEg
NDA4IDI2MS02NjMwICAgICAgICAgfCBnIGcgZCByIGEgcyBpIGwgICBVbml0ZWQgU3RhdGVzIG9m
IEFtZXJpY2ENCmZheCArMSA0MDggMjYxLTY2MzEgICAgICAiRnJlZSBTb2Z0d2FyZSBGb3IgVGhl
IFJlc3QgT2YgVXMuIg0KDQpMaW51eC1jcnlwdG86ICBjcnlwdG9ncmFwaHkgaW4gYW5kIG9uIHRo
ZSBMaW51eCBzeXN0ZW0NCkFyY2hpdmU6ICAgICAgIGh0dHA6Ly9tYWlsLm5sLmxpbnV4Lm9yZy9s
aW51eC1jcnlwdG8vDQo=


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010820174202</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-08-20 17:42:02-0400</timestampReceived><subject>Encrypted swap for 2.4 kernels using loop-AES</subject><body>

I have attached a new version of loop.c-2.4.diff to this mail. Just
uncompress the .gz file and put it to loop-AES-v1.3d directory. Then type
"make" to compile a new loop.o module.

The most important change to loop driver is to pre-allocate a specified
amount of RAM pages for loop driver's swap emergency use. Even if kernel
runs totally out of free RAM, swapper daemon can still swap to loop device
because loop device will have guaranteed buffers it needs to do the
encryption and decryption. Guaranteed buffers are only available for device
backed (partition backed) loop devices. You must specify the number of RAM
pages to reserve and the loop device numbers that you use for swapping, by
passing the loop.o module a "lo_swap" parameter like this:

    insmod loop lo_swap=X1,Y1[,X2,Y2[,X3,Y3[,X4,Y4]]] 

Where Xn is the number of RAM pages to allocate and reserve, and Yn is the
loop device index. On x86 systems page size is 4 Kbytes, some other
architectures have 8 Kbyte page sizes. This example (on x86 architecture)
would reserve 32 * 4 Kbytes of RAM to loop device /dev/loop6 :

    insmod loop lo_swap=32,6

On my debian system I used a startup script like the one below, and put it
on /etc/rcS.d/S56encrypted-swap.sh so it executes automatically at startup.
If you use the script below, make sure you set the SWAPDEVICE and LOOPINDEX
variables to correct values. Also, make sure to disable your swap partitions
in your /etc/fstab.

--------------------- cut here --------------------- 
#!/bin/sh
#
# Run this script somewhere in your startup scripts _after_ random
# number generator has been initialized and /usr has been mounted.
# (uuencode, tail and head programs usually reside in /usr/bin/)
# Note: if you loop mount something (root or /home) before running this
# script, the insmod line must be moved to execute prior to such mounts

# encrypted swap partition
SWAPDEVICE=/dev/hda666

# number of reserved pages for swap emergency pool
PAGECOUNT=32

# loop device index
LOOPINDEX=6

# loop device name without index, /dev/loop/ for devfs
LOOPBASE=/dev/loop

insmod loop lo_swap=${PAGECOUNT},${LOOPINDEX}
dd if=/dev/urandom bs=18 count=1 2&gt;/dev/null \
    | uuencode -m - | tail -2 | head -1 \
    | losetup -p 0 -e AES128 ${LOOPBASE}${LOOPINDEX} ${SWAPDEVICE}
mkswap ${LOOPBASE}${LOOPINDEX}
swapon ${LOOPBASE}${LOOPINDEX}
--------------------- cut here --------------------- 

One thing that I am not entirely happy with above script is that the amount
of entropy in kernel's PRNG may be quite low at early stages of boot. The
fact that PRNG state is saved to disk on shutdown, and reloaded at boot,
does not give much confidence. If the disk file that is used to store PRNG
state is not encrypted, it may be possible to recover internal state of PRNG
and swap encryption keys as well. The best solution is probably to encrypt
root partition, and maintain PRNG state across shutdowns in a file somewhere
on encrypted root partition.

This is still experimental, so don't install this on production systems yet.
However, if you have a spare test system, and are willing to test this, I
would very much like to receive feedback. This patch makes swap on loop work
even if kernel is totally out of RAM, but it does not fix the VM bugs
present in current 2.4 kernels. I tried a couple of 2.4 kernels (Linus'
2.4.9, Alan's 2.4.8-ac7 and Andrea's 2.4.9aa3) and all of them failed my
torture tests, even when swapping directly to disk partition and no loop
driver was loaded. Just to prove that my test hardware was okay, I ran my
(unencrypted) torture tests on Andrea's 2.2.19aa2 kernel as well. That
kernel survived my torture tests.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;
["loop.c-2.4.diff.gz" (application/x-gzip)]
["loop.c-2.4.diff.gz.sign" (text/plain)]

-----BEGIN PGP MESSAGE-----
Version: 2.6.3ia
Comment: http://loop-aes.sourceforge.net/PGP-public-key.asc

iQCVAwUAO4E4bTMKg0M6Ig9RAQGRwAP/R1A908qIUz6yOLT/S1Kzudp27CdQW2hY
FytHysObKpJUHEGM8Vnqv4ZUFmevBxToEVX0ampII/1SjVkcgyC+5J9e9hafXWsl
0lOhnJmnKlCYknFdo1wS8hk6JqR76oJ0aLxRmD/mMoGnnlpSj8EfXYAFf6YgsrOq
KQD8LDW3+2s=
=UPip
-----END PGP MESSAGE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010821201125</emailId><senderName>"Morten Liebach"</senderName><senderEmail>morten@hotpost.dk</senderEmail><timestampReceived>2001-08-21 20:11:25-0400</timestampReceived><subject></subject><body>

subscribe linux-crypto

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010829095435</emailId><senderName>"Karl, Marten"</senderName><senderEmail>marten.karl@lfk.eads.net</senderEmail><timestampReceived>2001-08-29 09:54:35-0400</timestampReceived><subject>RE: no password prompt</subject><body>

Hello.

&gt; I have compiled and run my linux-2.2.18 + crypto API . I've 
&gt; done all the
&gt; setting as explained in the Linux Disk Encryption How-To. Well , it
&gt; works  but I thinks there is something wrong because I am not prompted
&gt; when mounting the /dev/loop0 . What is the problem here ?
&gt; 
&gt; I 've done all .
&gt; 
&gt; insmod loop.o
&gt; insmod loop_fish2.o
&gt; losetup -e twofish /dev/loop0  ~user/.crypto      ####  (+ password)
&gt; mke2fs /dev/loop0
&gt; mkdir  ~/crypto
&gt; mount  -t ext2 /dev/loop0 ~user/crypto  ###( The /dev/loop0 could be
&gt; mounted without password  )

You give the password to the system while executing the program losetup.
In this moment the loop-device an the file are connected. The cryptogaphic
system ist set up with the key and the encryption and decryptio can work.
The key ist stored in the loop-device.
you do not have to put the password in again.
So do not leave the file and the loop-device connected, while not working
with it. Everybody with the rights (at least root) can access your secrect
information in den file.

I hope this hels.

Bye
Marten

Dipl.-Ing. Marten KARL  | EADS Deutschland GmbH
Tel:   D-731-392-4816   | EADS/LFK
Fax:   D-731-392-3097   | Manager IT Ulm
EFax:  D-731-392-204816 | Woerthstrasse 85
Mobil: D-175-3635862    | D-89077 Ulm
Achtung, geaenderte E-MAIL-Adresse:
      mailto:marten.karl@lfk.eads.net

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010830011204</emailId><senderName>Marc Mutz</senderName><senderEmail>marc.mutz@uni-bielefeld.de</senderEmail><timestampReceived>2001-08-30 01:12:04-0400</timestampReceived><subject>Re: Unencrypting file system</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 29 August 2001 20:56, mclinden@informed.net wrote:
&gt; Excuse me if the answer is obvious but this is one of these cases
&gt; where I cannot afford to make a mistake. I need to unencrypt a file
&gt; system for the purposes of moving it. The data on it is dynamic but I
&gt; can, if need be, put the system into single user mode to do this. The
&gt; question is, what is the best way to convert to an unencrypted file
&gt; system? I'm using the 2.4.3 release.
&lt;snip&gt;

I assume you use the kerneli patches.

You can losetup the source cryptfile, but not mount it. Then losetup 
the target cryptfile; also don't mount it. Let's call /dev/loop1 the 
source and /dev/loop2 the destination. Do

dd if=/dev/loop1 of=/dev/loop2 bs=4k

bs should be &lt;= the blocksize of your (source) underlying filesystem.

Marc

- -- 
The sickening fundamentalists [Talibans] brought a misery on our
people that few people, even those under other fascist and
bloodthirsty religious or non-religious regimes have ever faced. But
unfortunately the world is silent even in the face of all these crimes
and cruelties.
    -- "28th April is gloomier than 27th of April"
       RAWA statement on the black day of Apr 28, http://www.rawa.org
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7jZLk3oWD+L2/6DgRAi3BAKCJ+JYl+ZdUxlkT/qFA5Ugzz0cZsACg0iCz
zsvkCkS+I1CU0ypcrtGJ33E=
=SZnS
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010830164959</emailId><senderName>Rainer Ellinger</senderName><senderEmail>rainer.ellinger@web.de</senderEmail><timestampReceived>2001-08-30 16:49:59-0400</timestampReceived><subject>Re: kernel error</subject><body>

maxim65@inwind.it wrote:

&gt; Call Trace: [&lt;d086c4e0&gt;] [&lt;d086c500&gt;] [&lt;d086e147&gt;] [&lt;d086e507&gt;]
&gt; [&lt;d086e85e&gt;]

These numbers doesn't help. They are individual for your kernel.
Please use "man ksymoops" to learn more about this issue.

It's not implicitly the loop-patch causing this. Every patch modifying
the block-layer is a good candidate. I had a quite similar problem with
crypto-loop and xfs some revisions ago.

-- 
rainer.ellinger@web.de

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010831025753</emailId><senderName>David Burrows</senderName><senderEmail>crypto@emp.net.au</senderEmail><timestampReceived>2001-08-31 02:57:53-0400</timestampReceived><subject>testing results</subject><body>

Hi all,

I've just been having a play with cryptoapi-2.4.7.0.  First of all, it
seems to work great even on the Cyrix 5x86 100mhz that I tested it on! :P

A few minor things which have already been noted like having to manually
load the modules.

Also, using the AES cipher seems to work fine.  I can copy files onto an
encrypted loopback file, but when i try to execute perl scripts (as root
with all the x bits set) I get permission denied.  If I run perl and pass
the script as an argument it seems to work.  Using the RC5 cipher instead
seems to alleviate the problem. (weird)

Some details about my test platform are: 2.4.9 kernel and Debian Sid
distribution (unstable/dev).

And now for a quick q which hopefully isn't a FAQ.  Can 2.4.x series
kernels be used to boot off an encrypted root fs?  If so, how can this be
achieved or is there any documentation that could help me here?

Thanks in advance for your time,

David Burrows

Senior Developer

Enterprise Management Projects

------------------------------
Telephone	+61 7 55633125
GSM		+61 413 910680
Fax		+61 7 55633125
Website		www.emp.net.au
------------------------------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010831195129</emailId><senderName>Harmon Seaver</senderName><senderEmail>hseaver@ameritech.net</senderEmail><timestampReceived>2001-08-31 19:51:29-0400</timestampReceived><subject>Re: Reiserfs?</subject><body>

      I don't know if it works with 2.4.9 or not, haven't tried it. I assumed that, \
since it was named "2.4.7" that it was meant to work with the 2.4.7 kernel. There \
also is, according to the reiserfs website (www.namesys.com) a problem with reiserfs \
and 2.4.9, so I figured I might as well just stick with 2.4.7 for the moment to \
minimize problems getting it all up and running.


"IT3 Stuart B. Tener, USNR-R" wrote:

&gt; Mr. Seaver:
&gt; 
&gt; Are you saying this patch doesn't work with 2.4.9?
&gt; 

--
Harmon Seaver, MLIS
CyberShamanix
Work 920-203-9633   hseaver@cybershamanix.com
Home 920-233-5820 hseaver@ameritech.net
http://www.cybershamanix.com/resume.html



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010707100433</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-07 10:04:33-0400</timestampReceived><subject>Re: Patching 2.4.6--help fixing 1 hunk that failed</subject><body>

On 07 Jul 2001 11:44:00 +0200, Herbert Valerio Riedel wrote:
&gt; 
&gt; well, I've cleaned up the 2.4.3.1, it should apply cleanly to a vanilla
&gt; 2.4.6 linux kernel, I've put up the patch as patch-int-2.4.6.{bz2,gz} to
&gt; 
&gt; http://www.hvrlab.org/pub/crypto/
&gt; 
&gt; I've also taken the time to make a maintenaince release of the cryptoapi
&gt; re-packagement of the international crypto patch (and includes some
&gt; small cleanups still to be merged into the patch-version)
&gt; 
&gt; known problems with the international crypto patch on 2.4.x:
&gt; 
&gt; *) non-reentrant --&gt; don't use it on SMP (unless you can enforce
&gt; non-parallel execution of the transfer functions)
&gt; if you want to do some work on it, please go ahead; I can tell you where
&gt; you should begin to look at...

...said Herbert to the guy who needed help to fix a hunk failure :-)

Thanks for the info. So what would you recommend for a guy with a Dual
Celeron? Loop-AES ;-) (can anyone let me know if Loop-AES is SMP safe?)

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707102326</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-07 10:23:26-0400</timestampReceived><subject>RE: Crypto Choices</subject><body>

On 07 Jul 2001 00:28:23 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Dear Sir:
&gt; 
&gt; 1) I just downloaded/compiled/installed the 2.4.6 kernel from
&gt; (http://www.kernel.org/pub/linux/kernel/v2.4/); I am standardizing on using
&gt; the kernel.org kernel distributions from this day forward, no matter what
&gt; distribution of Linux I use
&gt; 2) I am going to grab the crypto patches from
&gt; (http://www.kernel.org/pub/linux/kernel/crypto/v2.4/); and install them
&gt; later tonight
&gt; 3) I will download and read
&gt; http://encryptionhowto.sourceforge.net/Encryption-HOWTO.html

&gt; 	Normally a raw partition would have a filesystem placed on it, my initial
&gt; presumptions were you then place encryption on the filesystem, and I have
&gt; now learned that after adding encryption a filesystem must be laid down
&gt; again, thus adding a second layer of filesystem. I do not see the need for
&gt; this, and have been advised that it is better to encrypt a raw partition,
&gt; and then place a filesystem on top of the encrypted raw partition. Do I
&gt; understand you correctly? Presuming what I understand is what you were
&gt; recommending; do you see any problem with the filesystem that is going to
&gt; overlay the encryption being a ReiserFS filesystem?

Yes you do not need an underlying filesystem. Let me give you an
example:

Say /dev/hda2 is a spare partition that you want to encrypt.

First you are supposed to put random data on the partition (this takes a
while):

dd if=/dev/urandom of=/dev/hda2

then you create an encrypted loop device on that partition:

losetup -e &lt;ciphername&gt; /dev/loop0 /dev/hda2

Then you format it (you wanted to try reiserfs):

mkreiserfs /dev/loop0

Then you mount it:

mkdir /encrypted
mount -t reiserfs /dev/loop0 /encrypted

OK now unmount it:

umount /dev/loop0
losetup -d /dev/loop0

And so on, see the HOWTO. If you did it right (and added the right
entries to fstab) you will be asked for your password the next time you
go to mount the partition.

&gt; 	If I understand all that you are saying with regard to the above; then I am
&gt; presuming all I must do is wait for a resolution to the issues with in
&gt; pursuit of patching 2.4.6, and I will be on my way.

Yep, though Loop-AES is looking superior at this stage :-) I wasn't
aware of the international kernel patch SMP issues (so am now open to
advice about this).

Regards,
Adam


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010701051110</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-01 05:11:10-0400</timestampReceived><subject>Crypto Choices</subject><body>

Crypto users:

	I have decided (for the moment) to standardize on the Mandrake 8.0
distribution of Linux for my installation. I have also read much more about
the "International Patch" and its capabilities, and simply having an
encrypted filesystem is not enough for me now. While that is the first and
foremost issue I wish to tackle at the moment, I am interested in why some
people the think the entire International Patch is garbage, and useless. I
am told it does work to some extent.

	In the Mandrake arena, does anyone know of a site which is keeping
patches and such going for Mandrake folks? Does anyone know what Mandrakes
position on supporting crypto will be in current and future releases (as
Debian is rumored to be supporting crypto now).

	I have gotten a spare HD to use as a "development" HD for this
crypto project.

	I started by downloading the 2.4.5 source for Mandrake's kernel, and
am going to build it once I get the crypto filesystem stuff working
(rebuilding mount, umount, losetup, and loop.o currently).


Very Respectfully, 

Stuart Blake Tener, IT3, USNR-R, N3GWG 
VTU 1904G (Volunteer Training Unit) 
stuart@bh90210.net 
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043 
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859 

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!) 

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL. 

Saturday, June 30, 2001 10:06 PM


["winmail.dat" (application/ms-tnef)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010709102909</emailId><senderName>"Bolten, Dierk"</senderName><senderEmail>bolten@iwe.rwth-aachen.de</senderEmail><timestampReceived>2001-07-09 10:29:09-0400</timestampReceived><subject>password on smart-cards</subject><body>

Hi!

I followed the discussion a little, and wanted to point you guys to a
program I wrote for the iButton smart-card. It is a PAM module
that authenticates users by a challenge/response approach using RSA. The
private key is generated and stored on the iButton, the public
part is stored on the computer (in /etc/iButton.conf). If a user wants to
authenticate to the system, a random number is generated and encrypted using
the public key. This is then sent to the iButton. The iButton decrypts it
(using the private key) and sends the SHA-1 hash of it back. The host also
calculates the SHA-1, if they match : PAM_SUCESS and login is allowed. 

The tool consists of a C configuration tool, the pam-module and a Java
applet to be executed on the iButton. _Now_ the interesting part for the
ongoing discussion: I also included support to store a 200 character long
password on the iButton. It is also possible to let this password be
generated randomly on the iButton. (The iButton comes with a random number
generator implemented, it measures the thermal noise across some resistor,
so that should give you fairly good random numbers!). I initially wanted
this password to be used as the password for the crypto-loopback device, but
I never had time to implement this. I think this should be farily easy to
do. Mount and losetup would need to be patched slightly.

I would like to do this myself, but in the moment I'm too busy with my PhD.
But somebody of you guys might want to have a look on it and do the
necessary changes to mount, etc. If somebody wants to do it, I would be
happy to get a working patch mailed, so that I can include it into the tar
file. 200 characters (not letters but of type char, i.e. 1- 255) should be
good enough for a password and no need to memorize them!

Anyways, the tar -file can be found under
:http://www-users.rwth-aachen.de/dierk.bolten/pam_ibutton.html

Hope you find it interesting. 

Cheers,
Dierk


Institute of Materials in Electrical Engineering 
    and Information Technology II
Sommerfeldstr. 24, 52074 Aachen
voice: ++49-241-80 7822
fax: ++49-241-8888 300
email: bolten@iwe.rwth-aachen.de
web: http://www.iwe.rwth-aachen.de


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709231512</emailId><senderName>"Tim R. Young"</senderName><senderEmail>try@lyang.net</senderEmail><timestampReceived>2001-07-09 23:15:12-0400</timestampReceived><subject>README confusing in loop-AES-v1.2d</subject><body>

Hi,

This is an excerpt from README in loop-AES-v1.2d:

Before you attempt to build replacement loop.o driver, you *must* configure
and compile your kernel so that CONFIG_MODULES=y and CONFIG_BLK_DEV_LOOP=n.
Also, CONFIG_KMOD=y is recommended but not required (kernel 2.0 doesn't have
CONFIG_KMOD, set CONFIG_KERNELD=y instead). Configuring your kernel so that
loop driver is built-in (CONFIG_BLK_DEV_LOOP=y) or module
(CONFIG_BLK_DEV_LOOP=m) will *not* work.

Do I need to set
CONFIG_BLK_DEV_LOOP=n
or
CONFIG_BLK_DEV_LOOP=y
?

I guess it should be CONFIG_BLK_DEV_LOOP=m?

The first and last sentences are conflicting.

- T.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710121028</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-10 12:10:28-0400</timestampReceived><subject>I-patch problem statement</subject><body>

There are two known definite bugs, a backward compatibility
issue and at least two general complainst on the table.

	* BUG: block size problem
	  Has a current work around, Herbert has stated
	  he will soon have it fixed in code.

	* BUG: SMP issue
	  None of us has had to deal with it, but Herbert
	  has stated he will have it fixed in code soon.

	* 2.2 not readable on 2.4
	  Question: is this really unknown or are the systems
	  in question ones that were set up with the old
	  absolute block number problem? If not, perhaps 
	  it is an issue for study using a small test case.
	  Is there anyone here who is actually a 
	  mathematician/cryptographer?

	* performance loss due to non-reentrancy
	  Presumably if Herbert fixes the SMP issue, he
	  sorts this as well. I might note that I play
	  my Mozart CD on this laptop while editing on a
	  loopback AES partition and have no problems.

	* kernel bloat. This is probably a non-issue. Linus
	  will at some point go for hooks into the kernel
	  for encryption support. The API for that will perhaps
	  be influenced by kerneli but that will not be the
	  final word. I do suspect it will have great influence
	  because everyone is using the new util-linux which
	  supports the new api for loopback encryption types.
	  In that sense we are already main stream.
	  (The util-linux support is mainstream debian now)

I'm pretty sure I remember a kernel discussion on some of
the issues and there is a desire to have one single crypto
API that is available for all purposes, loopback fs or other.

While loopAES is very nice for now, and perhaps some of the code
will find its' way into the kernel, I don't see that as the
likely way things will go for 2.6.x. I'm very sure that a 
loopback module will not contain its' own crypto. It will share
it with other tools and applications. We are not going to see
5 loadable modules providing different services each with its'
own implimentation of AES.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711075921</emailId><senderName>Tuukka Toivonen</senderName><senderEmail>tuukkat@ees2.oulu.fi</senderEmail><timestampReceived>2001-07-11 07:59:21-0400</timestampReceived><subject>problems with crypto and 2.4.3</subject><body>

I patched my 2.4.0 kernel up to 2.4.3 and applied 
-rw-r--r--    1 root     ftp        274007 Jul  6 18:34 patch-int-2.4.3.1.bz2
this patch. Everything seemed to be ok after compiling and installing the
new kernel. Then I downloaded
-rw-r--r--    1 tuukkat  tuukkat   1299742 Jul 11 10:41 util-linux-2.11b.tar.gz
and applied
-rw-r--r--    1 root     root        46208 Jul  6 18:41 util-linux-2.11b.patch
and compilation went fine. Copied binaries in their places, but I get

[root@s-inf-pc24 /]# losetup -e blowfish /dev/loop0 /.crypto
Available keysizes (bits): 128 160 192 256 
Keysize: 160
Password :
Password :
The cipher does not exist, or a cipher module needs to be loaded into the
kernel
ioctl: LOOP_SET_STATUS: Invalid argument

[root@s-inf-pc24 /]# cat /proc/modules 
loop                    8576   0 (autoclean)
parport_pc             14192   1 (autoclean)
lp                      5360   0 (autoclean) (unused)
parport                15936   1 (autoclean) [parport_pc lp]
cipher-blowfish         9344   0 (unused)
cryptoapi               2784   2 [cipher-blowfish]
nls_iso8859-1           2864  22 (autoclean)
...

I also tried other ciphers with same results. This is redhat 6.2 and
libc-2.1.3.so. AMD Athlon 800 MHz, 256 MB main memory. I'm using devfs (if
that matters).


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710140647</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-10 14:06:47-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>


great, I was about to write up a similiar list :-)
so now I'll just have to add some comments of mine...

just to clarify something in advance:

1. there is the 'official' kerneli crypto patch, which _still_ suffers
from most of the mentioned problems,

2. I've started a new branch, named the cryptoapi
re-package/distribution/whatever, which is based on the international
crypto patch, and tries to adress the current problems, while giving the
oppurtunity to experiment on new approaches. the plan is to either merge
back features of it to the official kerneli patch, or maybe to switch
entirely to it if it should become reasonable.

the cryptoapi distro started as a proof-of-concept, that modularizing it
almost completely can be done, in order to defeat the
patch-hassle-annoyance argument. so actually this re-packaging does surely
doesn't _change_ the kernel source more, as the loop-AES approach does.

I'd like to keep open the development to this cryptoapi project, in order
to stimulate the exchange of information; and in order to monitor changes
which go in by more eyes...

so, I've registered at sourceforge while heavy discussions went on here;
http://sourceforge.net/projects/cryptoapi/

On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; 	* BUG: block size problem
&gt; 	  Has a current work around, Herbert has stated
&gt; 	  he will soon have it fixed in code.
this one has been fixed, or better, I've already implemented a workaround
quite some weeks ago, it's been available in the cryptoapi branch, but
this one requires to modify the existing kernel loop.c module, (just like
loop-AES does, btw!!)

&gt; 	* BUG: SMP issue
&gt; 	  None of us has had to deal with it, but Herbert
&gt; 	  has stated he will have it fixed in code soon.
it's fixed in CVS already, this one does not require any change to the
kernel source. (actually 'fixed' does mean, it works now, but I'm not
satisfied completely with the end result in terms of design)

I haven't actually done many tests of it yet, just some stress testing on
a SMP box, like many concurrent reads/writes on a fully threaded,
variable blocksize filesystem, i.e. kernel compiles on XFS, unpacking and
diffing kernel sources and alike...

&gt; 	* 2.2 not readable on 2.4
&gt; 	  Question: is this really unknown or are the systems
&gt; 	  in question ones that were set up with the old
&gt; 	  absolute block number problem? If not, perhaps
&gt; 	  it is an issue for study using a small test case.
&gt; 	  Is there anyone here who is actually a
&gt; 	  mathematician/cryptographer?
this one is to be addressed by the planned user space tools (see lateron)
I believe the reason to be the blocksize/IV calculation btw.
I would have already investigated it, if I had the hardware/hdspace/time
to install various kernel &amp; partitions without caring about losing data
while experimenting...

&gt; 	* performance loss due to non-reentrancy
&gt; 	  Presumably if Herbert fixes the SMP issue, he
&gt; 	  sorts this as well. I might note that I play
&gt; 	  my Mozart CD on this laptop while editing on a
&gt; 	  loopback AES partition and have no problems.
since no (spin)locks are involved in the actual fix in CVS, I do not
expect major perfomance impact with this...

&gt; 	* kernel bloat. This is probably a non-issue. Linus
&gt; 	  will at some point go for hooks into the kernel
&gt; 	  for encryption support. The API for that will perhaps
&gt; 	  be influenced by kerneli but that will not be the
&gt; 	  final word. I do suspect it will have great influence
&gt; 	  because everyone is using the new util-linux which
&gt; 	  supports the new api for loopback encryption types.
&gt; 	  In that sense we are already main stream.
&gt; 	  (The util-linux support is mainstream debian now)
the actual cryptoapi, without the ciphers and loop encryption module is
quite small, I wouldn't call a ~5k module to be any major kernel bloat...

something actually planned, but not implemented yet, is a user space suit
of cryptoapi tools for:

*) converting between different
   ciphers/passphrases/blocksizes/block chaining modes
  (this should include a way to migrate from 2.2 encrypted volumes and
   2.4. non-512 based encyrption to the to-become-default 2.4-512-byte based
   encryption style)

&gt; I'm pretty sure I remember a kernel discussion on some of
&gt; the issues and there is a desire to have one single crypto
&gt; API that is available for all purposes, loopback fs or other.

&gt; While loopAES is very nice for now, and perhaps some of the code
&gt; will find its' way into the kernel, I don't see that as the
&gt; likely way things will go for 2.6.x. I'm very sure that a
&gt; loopback module will not contain its' own crypto. It will share
&gt; it with other tools and applications. We are not going to see
&gt; 5 loadable modules providing different services each with its'
&gt; own implimentation of AES.

...which leads to a request (for comment) I have;

what do you (all who feel interested) thing, should (not) a crypto API
allow/provide for? before doing any major redsign, it's required to know
what the ones who might use it would want it to look like... :-)
maybe the actual api is already ok, and doesn't need any redesign, but
only cleanup..

I'll give some points to start arguing with: :)

what to provide:

*) providing a general (kernel space) service for ciphers (block and
   stream), digests and closely related cryptographic algorithms.

*) /proc interface (already available)

*) dynamic selection/loading of ciphers by strings (enums require
   recompilation when a new cipher is added and are less unique, string
   based identification may need a few more bytes for storage and logic, but it
   pays off in terms of flexibility); fits well with /proc interface

*) support for algos implemented in hardware (the actual API has already
   provisions for atomic and non-atomic encryption functions, and sw vs.
   hw based implementations)

*) syscalls to allow user space to encrypt data by cryptoapi (n.b. is
   surely not efficient, but rather meant for the case, where the user
   space wants to make use of hardware implementation, or maybe to test
   the ciphers)

*)

which other subsystems can benefit from this:

*) encrypted network encapsulation (see cipe and freeswan)

*) encrypting loop filter (that's the only known use of the cryptoapi as
   of now)

*) filesystems with integrated encryption support (CFS perhaps?)

*) swapspace encryption, or for the paranoid ones, encrypting (part of
the) RAM :)

*) any other ideas?

it should be noted, that other things, such as smartcards used for
authentification should be done in userspace since it's not required
to at all to be done in kernelspace... IMHO
(e.g. pam modules, enhanced util-linux tools)

greetings,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711132320</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-11 13:23:20-0400</timestampReceived><subject>Discussion of differences between loop-AES and cryptoapi in respect</subject><body>

On Tue, 10 Jul 2001, Jari Ruusu wrote:
&gt; Herbert Valerio Riedel wrote:
&gt; &gt; On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; &gt; &gt;       * BUG: block size problem
&gt; &gt; &gt;         Has a current work around, Herbert has stated
&gt; &gt; &gt;         he will soon have it fixed in code.
&gt; &gt; this one has been fixed, or better, I've already implemented a workaround
&gt; &gt; quite some weeks ago, it's been available in the cryptoapi branch, but
&gt; &gt; this one requires to modify the existing kernel loop.c module, (just like
&gt; &gt; loop-AES does, btw!!)
&gt;
&gt; Wrong! Loop-AES does not modify your kernel sources. It modifies a copy of
&gt; your kernel's loop.c in its own compile directory.

sorry, I haven't made it clear enough, what I'm trying to say, which is:

both, loop-AES and the (optionally) applicable workaround-patch included
in the cryptoapi distribution, work, by modifying a loop.c

whether this loop.c is still located in the kernel source tree, or has
been copied out of it does not really care, it's just a minor detail IMHO.
both methods can be interchanged, it's just a matter of makefile rules and
use of scripts (n.b. I haven't implemented any automated way of
applying the workaround-patch to the kernel source or a copy of the
loop.c)

anyway, what's common in the end result, both packages lead to a loop.o,
and both require to use this one instead of the original loop.o, because
all this loop.o variants are meant as _replacements_ of the original
loop.o (there are resource conflicts, cause both claim to provide the
/dev/loop? devices)

so actually you can't use more than 1 of the 3 loop.o flavours, vanilla
loop.o, loop-AES and loop-cryptoapi at the same time.

while I'm at it, I'd like to discuss how the loop-AES and cryptoapi differ
in modifying loop.c (n.b. that's the branched int-patch variant I'm
working on, so this comparison may be a bit biased, but I'll try to avoid
it, please correct me where I fail to) btw, the discussion is based on the
2.4.x kernel.

loop-AES (loop-AES-v1.3c/loop.c-2.4.diff):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

the core loop.c changes consists in a radical change of the blocksize
dependent IV calculation, the changes are kept to a minimum (which can be
regarded a good thing), it has also been taken care to avoid overflows in
the multiply/divisions involved.

what I'm not sure about, is the reason of the addition of

    if(S_ISREG(inode-&gt;i_mode)) bs = BLOCK_SIZE;

since BLOCK_SIZE is defined to be (1 &lt;&lt; 10) in fs.h

finally, code to initialize the aes module have been hardcoded into loop.c
this is IMHO a rather static approach, since unflexible, if it wasn't for
this one, the modified loop.c could be easily used as drop in replacament
for the cryptoapi, but nevertheless it might be possible to use cryptoapi
with minor adaptions with the loop-AES modified loop-AES' loop.o. I'll
investigate this one a little bit more, this might finally allow for
backporting the cryptoapi to 2.2 by making use of jari's 2.2
modifications.

cryptoapi (loop-iv-2.4.6.patch):
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

compared to the simple approach to just adapt loop.c to change from var
blocksize to a fixed 512byte calculation base, I've tried to do a more
generic one, conserving the old IV calculation scheme for backward
compatibility
(actually, my first fix was to do just as loop-AES does, to simply replace
the variable blocksize IV calcualtion, by 512 byte IV calcs, but when
trying to submit this one to the actual kernel developers concerned with
maintaining the loop.c driver, it was rejected, due to its non-backward
compatible approach, so I agreed to design a more flexible approach, which
is why the loop.c modification becomes a bit more complicated at the first
sight -- btw, I haven't officially submitted the new approach yet for
kernel inclusion since then again...)

ok, now for what I've actually done:

I've added an variable to loop_device, in order to set the requested
IV calculation mode, for old code (i.e. filter functions) nothing changes,
they still get the original calculation methode, and everyones happy.
but for new code, aware of the new interface property, it is able to
choose among LO_IV_MODE_DEFAULT and LO_IV_MODE_SECTOR (512byte based)
maybe in future there is need for other block sizes (2048 for CDROM
devices for instance). based on this property, all IV calculations are
affected to either conform to the device block size or to a fixed 512
block size.

except for this, there is nothing crypto specific added (no
initialization of any cryptographic module or whatsoever)

how the rest compares
~~~~~~~~~~~~~~~~~~~~~

when comparing both packages, I realized they are quite similiar in shape;

*)  both modify a loop.c,

*)  both have a 'glue' layer for providing the transfer filter
    function to loop device, i.e. aes-glue.c 'module' maps to
    cryptoloop.c

*)  loop-AES' aes.c can be seen as specialized case (don't take me too
    literal here please) of an AES cipher. whereas the cryptapi's loop
    filter makes use of the cryptoapi framework to chose among the
    available (not even required to be known in advance) cipher
    algorithms.

the last item shows alrady where the packages have their main difference;
the cryptoapi approach tries to be flexible and let the user chose what he
wants, wheras the loop-AES approach is more to be seen as a specialized
case, offering only the most essential features in a non-modular way
(I'm refering to the fact, that loop-AES features a loop.o which get's
linked in the aes-glue and the actual aes cipher, whereas the cryptoapi
subdivides every reasonable component into it's own module -- it's
completely ok for loop-AES to chose this monolithic approach, since there
actually no need for splitting it up, due to the restricte set of
applications, i.e. only one cipher used for loop filter only)

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710203800</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-10 20:38:00-0400</timestampReceived><subject>(AES) loopback crypto questions</subject><body>

1) if an attacker has got some files which are on an (AES) encrypted device,
will he be able to decrypt the whole device?

2) is it a good idea to run "cat /dev/zero &gt; zero.file; shred -uv zero.file"
on (AES) encrypted devices to overwrite all free space with random data [to
remove any encrypted data which is left from deleted files from the device
behind the loopback device and confuse attackers]?

the brackets in "(AES)" mean that i'd like to know if the answer applies to
AES only or also other cyphers (i guess so?)



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707185330</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-07 18:53:30-0400</timestampReceived><subject>Using Crypto under LM8+2.4.6</subject><body>

To whom it shall concern:

dd if=/dev/urandom of=test count=5000
losetup -e blowfish /dev/loop0 ./test (I also tried "AES", that failed too)
I enter 128, and the password "123" (just for testing, I know better)

I get the following error message:

The cipher does not exist, or a cipher module needs to be loaded into the
kernel ioctl: LOOP_SET_STATUS: Invalid argument

I went into the /lib/modules/kernel/crypto directory and did an insmod on
every ".o" file in there, still get the above message!

I also patched util-linux-2.11g using the util-linux-2.11b patch (and yes it
seemed to have worked okay). I built and installed the entire package.

As well, perhaps someone can help me: I am not so conversant on using
/etc/modules.conf;

I would like these modules to get loaded automatically when needed as well,
I have a modem driver, which I want to do the same, cant get that to work
either (ltmodem, for using "linmodems")


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 11:49 AM



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010713150412</emailId><senderName>"John Bass"</senderName><senderEmail>john.bass@johnbass.co.uk</senderEmail><timestampReceived>2001-07-13 15:04:12-0400</timestampReceived><subject>Kernel 2.4.6 and crypto 2.4.3.1 will not mount file systems</subject><body>

Hello,

I'm running kernel 2.4.6 patched with the crypto patch 2.4.3.1 but after
building a 10M file, encrypting it with AES, making the file system.... it
will not mount. I get the following message. Are there any known fixes?

Jul 13 15:57:21 ariane kernel: cipher-aes-cbccipher-aes&lt;6&gt;cryptoapi:
Registered aes-ecb (0)
Jul 13 15:57:21 ariane kernel: cryptoapi: Registered aes-cbc (65536)
Jul 13 15:58:26 ariane kernel: EXT2-fs error (device loop(7,0)):
ext2_check_descriptors: Block bitmap for group 0 not in group (block
3488652124)!
Jul 13 15:58:26 ariane kernel: EXT2-fs: group descriptors corrupted !

John


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010716090343</emailId><senderName>"Urs Stettler"</senderName><senderEmail>mma@e-wideweb.com</senderEmail><timestampReceived>2001-07-16 09:03:43-0400</timestampReceived><subject>WARNING!!! DON'T READ THIS IF YOU DON'T LIKE MONEY</subject><body>

WOW THIS REALLY WORKS!!!

Dear Friend &amp; Future Millionaire:

AS SEEN ON NATIONAL TV:
Making over half a million dollars every 4-5 months from your home for 
an investment of only $25 U.S. Dollars expense one time.
THANKS TO THE COMPUTER AGE AND THE INTERNET!!
============================================
BE A MILLIONAIRE LIKE THE OTHERS WITH IN A YEAR!!!
Before you say "BULL" please read the following. This is the letter you
have beeen hearing about on the news lately. Due to the populartity of
this letter on the inernet , A national weekly news program recently 
devoted an entire show to the investigation of this program described
below, to see
if it really can make people money. The show also investigated wheather 
or not the program was legal. Their findings proved once and for all that
there are absolutely NO LAWS
prohibiting the participation in the program and if people can follow the 
simple instrucyions, they are bound to make some mega bucks with only
$25 out of pocket cost". DUE TO THE RECENT INCREASE OF 
POPULARITY &amp; RESPECT THIS PROGRAM HAS ATTANED,
IT IS CURRENTLY WORKING BETTER THAN EVER.
This is what one had to say:"Thanks to this profitable opportunity, I
was approached many times before but each time I pased on it. I am 
so glad I finally joined to see what one could expect in return for the
minimal effort and money required. To my astonishment, I recieved total
$610,470.00 in 21 weeks, with money still comming in."
Pam Hedland, Fort Lee New Jersey.
============================================
Here is another testimonial:  "This program has been around for a long
time but I never believed in it. But one day when I recieved this again 
in the mail I decided to gamble my $25 on it. I followed the simple 
instructions and walaa.....3 weeks later the money started to come in.
First month I only made $240.00 but the next two months I made 
a total of $290,000.00. So far in the past 8 months by re-entering the 
program, I have made over $710,000.00 and I am playing it again. The
key to success in this program is to follow the the simple steps and NOT 
change anything." More testimonials later but first.

=====PRINT THIS NOW FOR YOUR FUTURE REFERANCE=========
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
If you would like to make at least $500,000 every 4 to 5 months easily and
comfortably, please read the following...THEN READ IT AGAIN and 
AGAIN!!!
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
FOLLOW THE SIMPLE INSTRUCTIONS BELOW AND YOUR 
FINANCIAL
DREAMS WILL COME TRUE, GUARANTEED! 
 
INSTRUCTIONS
=====Order all 5 reports shown on the list below=====
For each report, send $5 CASH ,THE NAME &amp; NUMBER OF THE 
REPORTYOU ARE ORDERINGand YOUR E-MAIL ADDRESS to the person 
whose name appears ON THAT LIST next to the report. MAKE SURE YOUR 
RETURN ADDRESS IS ON THE ENVELOPE TOP LEFT CORNER in case of any 
mail problems.
===When you place your order, make sure you order each of the 5 reports.
You will need all 5 reports so that you can save them on your computer
and resell them. YOUR TOTAL COST $5 X 5=$25.00.
Within a few days you will recieve, via e-mail, each of the five reports
from 
these 5 different individuals. Save them on your computer so they will be
accessible for you to send to the 1000's of people who will order them
from you. Also make a floppy of these reports and keep it on your desk in
case something happens to your computer.

IMPORTANT-DO NOT  alter the names of the peple who are listed next
to each report, or their sequence on the list, in any way, other than what
is
instructed below in step "1 through 6" or you will lose out on the majority
of your porfits, Once you understand the way this works you will also see
how it does not work if you change it. Remember, this method has been 
tested, and if you alter it, it will NOT work!!! People have tried to put
there
friends/relatives names on all five thinking they could get all the money. 
But it does not work this way. Believe us, we have all tried to be greedy
and 
then nothing happened. So DO NOT try to change anything other than what is 
instructed. Because if you do it will not work for you.
Remember, honesty reaps the reward!!!!

1....After you have ordered all 5 reports , take this advertisement and
REMOVE the name &amp; address of the person in REPORT # 5. This person 
has made it through the cycle and is no doubt counting there fortunes.
2.... Move the name &amp; address in REPORT #4 down To REPORT #5.
3.... MOVE the name &amp; address in REPORT #3 down To REPORT #4.
4.... MOVE the name &amp; address in REPORT #2 down To REPORT #3.
5.... MOVE the name &amp; address in REPORT #1 down To REPORT #2.
6.... Insert YOUR name &amp; address in the REPORT #1 Position. PLEASE 
MAKE SURE you copy every name &amp; address ACCURATELY!
==============================================
**** Take this entire letter ,with the modified list of names, and save it
on 
your computer. DO NOT MAKE ANY OTHER CHANGES.
Save this on a disk as well just in case if you loose any data. To assist
you with
marketing your business on the internet, the 5 reports you purchase will 
provide you with invaluable marketing information which includes how to
send 
bulk e-mails legally, where to find thousands of free classified ads and
much 
more.
.
There are 2 Primary methods to get this venture going:
METHOD # 1: BY SENDING BULK E-MAIL LEGALLY
================================================
Let's say that you decide to start small, just to see how it goes, and we
will
assume You and those involved send out only 5,000 e-mails each. Let's
also assume that the mailing recieve only a 0.2% response (the response
could be much better but lets just say it is only 0.2% also many people
will send out hundreds of thousands of e-mails instead of only 5,000 each).
Continuing with this example , you send out only 5,000 e-mails. With a 
0.2% response, that is only 10 orders for report #1. Those 10 people
responded 
by sending out 5,000 e-mails each for a total of 50,000. Out of those 
50,000 e-mails only 0.2% responded with orders. That = 100 people responded 
and ordered Report #2.

Those 100 people mail out 5,000 e-mails for a total of 500,000 e-mails.
The 0.2% response to that is 1000 orders for Report #3.
Those 1000 people send out 5,000 e-mails each for a total of 5 million e-
mails sent out. The 0.2% response to that is 10,000 orders for Report #4.
Those 10,000 people send out 5,000 e-mails  each for a total of 
50,000,000 (50 million) e-mails. The 0.2% response to that is 100,000
orders for Report
#5 THAT'S 100,000 ORDERS TIMES $5 EACH=$555,000 ( half million).

Your total income in this example is: 1.....$50 + 2.....$500 + 3.....$5,000
+ 
4.....$50.000 + 5.....$500,000.......Grand Total=$555,550.00

NUMBERS DONT LIE. GET A PENCIL &amp; PAPER AND FIGURE IT OUT
THE WORST POSSIBLE RESPONSES AND NO MATTER HOW YOU
CALCULATE IT, YOU WILL STILL MAKE A LOT OF MONEY!!
================================================
REMEMBER FRIEND THIS IS ASSUMING ONLY 10 PEOPLE 
ORDER OUT OF 5,000 YOU MAILED TO.
Dare to think  for a monment what would happen if everyone or half or 
even one 4th of those people 100,000 e-mails each or more? There are 
over 150million people on the internet worldwide and counting. Believe 
me, many people will do just that, and more!

METHOD #2 : BY PLACING FREE ADS ON THE INTERNET
================================================
ADVERTISING ON THE NET IS VERY VERY INEXPENSIVE and there 
are hundreds of FREE places to advertise. Placing a lot of free ads on the
internet will 
easily get a larger response. We strongly suggest you start with Method# 
1 and add Method #2 as you go along . For every $5 you recieve , all you
have to do is e-mail them the Report they ordered. That's it. Always 
provide same day service on all orders.
This will guarantee that the e-mail they send out, with your name and 
address on it, will be prompt because they can not advertise until they 
recieve the report.
===========AVAILABLE REPORTS========================
ORDER EACH REPORT BY ITS NUMBER &amp; NAME ONLY. Notes:
Always send $5 cash (U.S. CURRENCY) for each Report. Checks NOT
accepted. Make sure the cash is concealed by rapping it in at least 2 
sheets of paper. On one of those sheets of paper, Write the NUMBER &amp; the 
NAME of the report you are ordering, YOUR E-MAIL ADDRESS and your name
and postal address.
PLACE YOUR ORDER FOR THESE REPORTS NOW:
================================================
REPORT # 1:" the Insider's Guide to Advertising for Free on the Net"
Order Report #1 from:

U. Stettler
Langackerstr. 165
CH-8704 Herrliberg
Switzerland
____________________________________________________________
REPORT #2" The Insider's Guide to Sending Bulk e-mail on the Net"
Order Report #2 from:

B. Collins
155 East Beaver Creek Rd.
Unit 24, Suite 235
Richmond Hill, Ontario
L4B 2N1
Canada 
____________________________________________________________
REPORT #3:" Secret to Multilevel marketing on the net"
Order Report #3 from:


R.Robinson
14612 Friar st.#5
VanNuys CA, 91411
USA

_____________________________________________________________
REPORT #4:" How to Become a Millionaire Utilizing MLM &amp; the Net"
Order Report #4 from:


Randall Williams 
401 Stocks Dairy Road 
Leesburg Georgia 31763 
USA 

____________________________________________________________
REPORT #5: "How to Send Out One Million e-mails for Free"
Order Report #5 from:

Dario Va 
16541 Blatt Blvd #206 
Weston, FL 33326 
U.S.A. 
_____________________________________________________________   
$$$$$$$$$YOUR SUCCESS GUIDELINES$$$$$$$$$$$$$$$$$
Follow these guildelines to guarantee your success:
===If you do not receive at least 10 orders for Report #1 within 2 
weeks, continue sending e-mails until you do.
===After you have recieved 10 orders, 2 to 3 weeks after that you
should receive 100 orders  or more for REPORT #2. If you did not,
continue advertising or sending e-mails untill you do.
===Once you received 100 or more orders for Report #2, YOU 
CAN RELAX, because the system is already working for you, and the 
cash will continue to roll in! THIS IS IMPORTANT TO REMEMBER:
every time your name is moved down the list, you are placed in front 
of a different report.

You can KEEP TRACK of your PROGRESS by watching which report 
people are ordering from you. IF YOU WANT TO GENERATE MORE 
INCOME SEND ANOTHER BATCH OF E-MAILS AND START
THE WHOLE PROCESS AGAIN.
There is NO LIMIT to the income you can generate from this business!!!
================================================
FOLLOWING IS A NOTE FROM THE ORIGINATOR OF THIS 
PROGRAM:
You have just received information that can give you finiancial freedom for 
the rest of your life, with NO RISK and just A LITTLE BIT OF EFFORT.you 
can make more money in the next few weeks and months than you ever
imagined. 
follow the program EXACTLY AS INSTRUCTED. Do Not change it in any way. It
works
exceedingly well as it is now. Remember to e-mail a copy of this exciting
report after you have put 
your name and address in the Report #1 and moved the others to 
#2.......#5 as instructed above. One of the peole you send this to may send
out
100,000 or more e-mails and your name will be on every one of them.
Remember though, the more you send out the more potiential customers
you will reach. So my friend, I have given you the ideas, information,
materials and 
opportunity to become financially independent ITS UP TO YOU NOW!

============MORE TESTIMONIALS=======================
"My name is Mitchell, My wife Jody ad I live in Chicago. I am an 
accountant with a major U.S. Corparation and I make pretty good money.
When I received this program I grumbled  to Jody about receiving" junk
mail". I made fun of the whole thing , spouting my knowledge of the 
population and percentages involved. I "knew" it wouldn't work. Jody
totally ignored
my supposed intelligence and a few days later she jumped in with both 
feet. I made merciless fun of her, and was ready to lay the ol "I told you
so" on 
her when the thing didnt work. Well , the laugh was on me ,Within 3 
weeks she had received 50 responses. Within the next 45 days she had 
received total $147,200.00.......all cash! I was shocked. I have joined
Jody 
in her" hobby".
Mitchell Wolf M.D., Chicago Illinois
================================================
"Not being the gambling type , it took me several weeks to make up my
mind to participate in this plan. But conservative that i am, I decided that
 the initial investment was so little that there was just no way that I
wouldn't get enough orders to at least get my money back". "I was
surprised when I found my medium size post office box crammed with
orders. I made $319,210.00 in the first 12 weeks. The nice thing about 
this deal is that it does not matter where people live. There simply isn't a
better investment with a faster return and so big"
Dan Sondstrom, Alberta Canada
================================================
"I had received this program before. I deleted it, but later I wondered
if I should have given it a try. Of course, I had no idea who to contact to
get  another copy, so I had to wait until I was e-mailed again by someone 
else......11 months passed then it luckily came again.....I did not
delete this one! I made more than $490,000 on my first try and all the
the money came within 22 weeks."
Susan De Suza, New York, N.Y.
================================================
"It really is a great opportunity to make relatively easy money with
little cost to you. I followed the simple instructions carefully and
within 10 days the money started to come in. My first month I made 
$20,560.00 and by the end of the third month my total cash count was
$362,840.00. Life is beautiful, Thanx to the internet.".
Fred Dellaca, Westport New Zealand
================================================
ORDER YUR REPORTS TODAY AND GET STARTED ON
"YOUR" ROAD TO FINANCIAL FREEDOM!
================================================
If you have any questions of the legality of this program, contact the 
Office of Associate Director for Marketing Practices, Federal Trade 
Commission
Bureau of Consumer Protection, Washington ,D.C. 





This is a one time mailing and you will not be contacted 
again. Should you chose to have your name completely eliminated
from our data-base, you can press the respond button and type 
"remove" on the subject line.




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721025316</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-07-21 02:53:16-0400</timestampReceived><subject>bug list int.2.4.x ?</subject><body>

Hello all,

where can i find a list of most incompatible bugs between
int.2.2.x and int.2.4.x ?

thank you!

H.



------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010723002535</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-23 00:25:35-0400</timestampReceived><subject>FreeBSD + Crypto</subject><body>

List members:

        I am well aware of all the trumpeting of FUD about distributing
crypto with any Linux kernel, but, can anyone explain how the FreeBSD folks
(whom presumably don't like US Federal law enforcement poking about up their
rectums anymore than we do) are getting away with supplying crypto on their
CD-ROM?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 22, 2001 5:23 PM



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010724041407</emailId><senderName>Aaron Dale</senderName><senderEmail>xercist@stratius.com</senderEmail><timestampReceived>2001-07-24 04:14:07-0400</timestampReceived><subject>problems with 2.4.3.1 patch over 2.4.* with AES</subject><body>

Hello,

I have a filesystem encrypted with AES, 192 bit key. I'm not sure what went
wrong, but one day I was unable to mount the filesystem. It may have been an
update in util-linux, a new kernel, who knows (I update a lot :P).

Anyway, I can't get to my files! If anyone could help me mount the filesystem
I would be much appreciative. Here's the problem:

in fstab:
/data/secure.fs /data/secure     ext2   defaults,noauto,loop,encryption=aes,user  0   0

[22:08:34] [root@xernet] [data]% mount /data/secure
The cipher does not exist, or a cipher module needs to be loaded into the kernel
ioctl: LOOP_SET_STATUS: Invalid argument
[22:08:53] [root@xernet] [data]% modprobe cipher-aes
[22:09:10] [root@xernet] [data]% mount /data/secure
Available keysizes (bits): 128 192 256 
Keysize: 192
Password :
The cipher does not exist, or a cipher module needs to be loaded into the kernel
ioctl: LOOP_SET_STATUS: Invalid argument

It will do the same thing if i losetup -e aes /dev/loop0 /data/secure.fs

util-linux is version 2.11g-4 from debian/sid. I don't know if this needs to be
patched, nor where I would be able to find such a patch.

The kernel is 2.4.7, which I just compiled. The same thing happens on any kernel
I've tried (including 2.4.3), so I don't think this is the problem. 

Please help me out, these are important files that I should have backed up! :)

Aaron Dale

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010723012009</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-07-23 01:20:09-0400</timestampReceived><subject>Re: FreeBSD + Crypto</subject><body>

On Sun, 22 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         I am well aware of all the trumpeting of FUD about distributing
&gt; crypto with any Linux kernel, but, can anyone explain how the FreeBSD folks
&gt; (whom presumably don't like US Federal law enforcement poking about up their
&gt; rectums anymore than we do) are getting away with supplying crypto on their
&gt; CD-ROM?

The key issue is the difference between capability and intent.  There is
no doubt that the recent liberalization of parts of the US export rules
could be reversed tomorrow by the stroke of a bureaucrat's pen.  There is
no obvious intent to do this... but intentions are notoriously hard to
assess, and have been known to change.

Code containing contributions from US authors, however slight, is subject
to US export rules forevermore.  There is no practical way to free it from
them.  So moving crypto code into the body of stuff maintained by a
US-based group is an irrevocable act, whose consequences could be massive
headaches if the US rules ever change for the worse. 

So the question is, which is more important to you:  convenience today, or
precautions against worst-case future possibilities?  Some people think
it's worth wearing a condom, and some don't... 

There are also some issues of support.  One area the recent relaxation of
rules has *not* affected is technical assistance:  private correspondence
with foreigners about technical issues of crypto requires case-by-case
prior approval from the government, even if the crypto in question is
freely exportable.  Yes, really.

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010723013520</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-23 01:35:20-0400</timestampReceived><subject>RE: FreeBSD + Crypto</subject><body>

Mr. Spencer:

	Fair enough! I figured the answer was based on FUD rather than US
constitutional law or current administrative practice.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 22, 2001 6:34 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Henry Spencer
Sent: Sunday, July 22, 2001 6:20 PM
To: linux-crypto@nl.linux.org
Subject: Re: FreeBSD + Crypto

On Sun, 22 Jul 2001, IT3 Stuart B. Tener, USNR-R wrote:
&gt;         I am well aware of all the trumpeting of FUD about distributing
&gt; crypto with any Linux kernel, but, can anyone explain how the FreeBSD
folks
&gt; (whom presumably don't like US Federal law enforcement poking about up
their
&gt; rectums anymore than we do) are getting away with supplying crypto on
their
&gt; CD-ROM?

The key issue is the difference between capability and intent.  There is
no doubt that the recent liberalization of parts of the US export rules
could be reversed tomorrow by the stroke of a bureaucrat's pen.  There is
no obvious intent to do this... but intentions are notoriously hard to
assess, and have been known to change.

Code containing contributions from US authors, however slight, is subject
to US export rules forevermore.  There is no practical way to free it from
them.  So moving crypto code into the body of stuff maintained by a
US-based group is an irrevocable act, whose consequences could be massive
headaches if the US rules ever change for the worse.

So the question is, which is more important to you:  convenience today, or
precautions against worst-case future possibilities?  Some people think
it's worth wearing a condom, and some don't...

There are also some issues of support.  One area the recent relaxation of
rules has *not* affected is technical assistance:  private correspondence
with foreigners about technical issues of crypto requires case-by-case
prior approval from the government, even if the crypto in question is
freely exportable.  Yes, really.

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721131010</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-21 13:10:10-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

holtland Last Name wrote:
&gt; where can i find a list of most incompatible bugs between
&gt; int.2.2.x and int.2.4.x ?

Known problems with international crypto patch:

1)  IV is block size based. When block size changes -&gt; IV changes and shit
    hits the fan. This block size insanity is a real time bomb.
    - Study kernel sources how block sizes are used in filesystems and
      elsewhere. Grep kernel sources for set_blocksize().
    - Study kernel sources how IV is computed in loop.c

    When mounting a file system (ext2 for example), a superblock must be
    read from disk. Superblock contains the block size of the file system.
    To read the superblock without corrupting any data, following items are
    needed:

    a)  Encrypted data on the disk... Yep, got that.
    b)  Encryption key... Yep, got that too.
    c)  Sector offset of superblock, needed for IV calculation... Yep.
    d)  Blocksize, needed for IV calculation... Blocksize? Hello?

2)  International crypto patch ciphers are non-re-entrant. Non-re-entrant
    code in re-entrant code path -&gt; data corruption.
    - Study kernel sources how IV is passed to ciphers. Start by reading
      source of transfer_cryptoapi()

3)  General bloat that does not belong in the kernel.

4)  Kernel patch approach targets only small subset of kernels in use. With
    international crypto patch, you have to select your kernel to match the
    patch. With completely modular solution like loop-AES, you select your
    kernel, and crypto adapts to your choice. This reason alone is enough to
    justify existence of loop-AES.

5)  Bad scheduling latency. Code should release control of CPU if operating
    system schedules a higher priority process to run.

6)  If ciphers are built as modules, cipher module locking is broken. This
    bug does not exist is ciphers are linked to kernel.

Take a look at loop-AES. It is a superior replacement for international
crypto patch, and you can download it from here:

    http://loop-aes.sourceforge.net/loop-AES-v1.3c.tar.bz2

Loop-AES does not suffer from any of the bugs mentioned above, and works
with 2.4, 2.2 and 2.0 kernels.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721143411</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-07-21 14:34:11-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Jari,

can you _please_ stop these shameless plugs and spam-like advertizing 
for your patch? The poster asked for incompatibilities between 2.2.x 
and 2.4.x international kernel patches.

Answer that or keep quiet.

Marc

On Saturday 21 July 2001 15:10, Jari Ruusu wrote:
&gt; holtland Last Name wrote:
&gt; &gt; where can i find a list of most incompatible bugs between
&gt; &gt; int.2.2.x and int.2.4.x ?
&gt;
&gt; Known problems with international crypto patch:
&lt;snip&gt;
&gt; Take a look at loop-AES. It is a superior replacement for
&gt; international crypto patch, and you can download it from here:
&gt;
&gt;     http://loop-aes.sourceforge.net/loop-AES-v1.3c.tar.bz2
&gt;
&gt; Loop-AES does not suffer from any of the bugs mentioned above, and
&gt; works with 2.4, 2.2 and 2.0 kernels.
&lt;snip&gt;

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7Wa6l3oWD+L2/6DgRAq3gAJ9HLNKzVV5TyzQsO6diG0UfPRGTUACfSJnt
He11D6NQqXefDrbIupe28QE=
=Nz8v
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721145657</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-07-21 14:56:57-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

On 21 July 2001, Marc Mutz &lt;Marc@Mutz.com&gt; wrote:
&gt; can you _please_ stop these shameless plugs and spam-like advertizing 
&gt; for your patch? The poster asked for incompatibilities between 2.2.x 
&gt; and 2.4.x international kernel patches.

Personally I think Jari is doing a very good thing in "advertising"
the patch he wrote because it educates people and shows them alternative
ways of using encryption in Linux.

-- 
								Regards,
								Emil
--
"The reasonable man adapts himself to the world; the unreasonable one
persists in trying to adapt the world to himself.  Therefore all progress
depends on the unreasonable man."				   - Shaw

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721203627</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-07-21 20:36:27-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

Hello,

What bugs mentioned by Jari are also incompatible bugs between
int2.2.x and 2.4.x?

I don't mind Jari mentioned the option to use loop-AES instead of
the int. kernel patches.
It's been months since the int patches were updated to the latest kernel versions and bugs were removed!
shame shame shame!!!

regards, H.



------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721221915</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-07-21 22:19:15-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday 21 July 2001 22:36, holtland Last Name wrote:
&lt;snip&gt;
&gt; I don't mind Jari mentioned the option to use loop-AES instead of
&gt; the int. kernel patches.
&gt; It's been months since the int patches were updated to the latest
&gt; kernel versions and bugs were removed! shame shame shame!!!
&lt;snip&gt;

That's not true. Herbert did some fixing and updating. Yes, the 
'official' patch wasn't updated, but if the maintainer disappears and 
another one steps up to do the job this is just as well - that's why 
open source is superior to closed source.

Herbert replied to your last message to this list about a month ago, so 
I don't need to tell you where you find his patches.

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7Whtp3oWD+L2/6DgRAn7+AKCvuG0vMPbEK+Y4bj3hQJmzcxn5nQCg6M/x
+SyVZOwDUtRSg1vN685PMIk=
=fK+H
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010721230640</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-07-21 23:06:40-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

&gt;&gt;&gt;&gt;&gt; "Emil" == Emil  &lt;el@la.mine.nu&gt; writes:

Emil&gt; On 21 July 2001, Marc Mutz &lt;Marc@Mutz.com&gt; wrote:
Marc&gt; can you _please_ stop these shameless plugs and spam-like
Marc&gt; advertizing for your patch? The poster asked for incompatibilities
Marc&gt; between 2.2.x and 2.4.x international kernel patches.

Emil&gt; Personally I think Jari is doing a very good thing in
Emil&gt; "advertising" the patch he wrote because it educates people and
Emil&gt; shows them alternative ways of using encryption in Linux.

Personally, it's not the advertising that bugs me, but rather the way
that he does it.  I agree that telling people about his module is
important, but at least do it in a more friendly manner.

It is customary (at least in most of the other mailing lists and
newsgroups that I hang out in) to at least mention that you are the
author of the package that you are advertising.  Often, this is preceded
by a shameless plug warning.

Also, he could start by answering the person's question, before pointing
out the faults in the kerneli patch.  (Although the subject line is a
bit misleading -- to the OP: next time, try to choose a more descriptive
subject line, such as "incompatabilities between int.2.4.x and int.2.2.x?")

Jari, please be careful how you write your e-mails, as you sometimes
come off sounding like a jerk.  (Warning: I am not saying you are a
jerk.  Just some (but not all) of your e-mails make you sound like one.)
Some people might not mind it, but it turns a lot of people off.

-- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/651854DF71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010722023850</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-07-22 02:38:50-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

Hello,

In response to Marc:
&gt; &gt; It's been months since the int patches were updated to the latest
&gt; &gt; kernel versions and bugs were removed! shame shame shame!!!
&gt; 
&gt; That's not true. Herbert did some fixing and updating. Yes, the 
&gt; 'official' patch wasn't updated, but if the maintainer disappears and 
&gt; another one steps up to do the job this is just as well - that's why 
&gt; open source is superior to closed source.

I was referring to the official kerneli patches.

I'm glad Herbert did this job. I disagree it is 'just as well' because  many people \
wil probably not find the patches made by Herbert. It is not that widely known he \
made those. Even if the old official patches work on newer kernels I think many \
people won't use them because of security risks and should know there are aditional \
patches besides the official ones.

I hope Herbert can contact Alexander to see if they can merge the code
to make the official patches up-to-date and give his work more credit
and attention?
(Just wishfull thinking to make even those people happy who can't find the patches \
made by Herbert and are not daring to use the old official patches on their newer \
kernels)

&gt; Herbert replied to your last message to this list about a month ago, so 
&gt; I don't need to tell you where you find his patches.
&gt; 

I'm well aware of this. But thank you for the reminder.

I'm just looking for a good complete buglist. There is no official one
in public.


regards,

H.



------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010722062648</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@geek.com</senderEmail><timestampReceived>2001-07-22 06:26:48-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "holtland" == holtland Last Name &lt;holtland@my-deja.com&gt; writes:

holtland&gt; I hope Herbert can contact Alexander to see if they can merge
holtland&gt; the code to make the official patches up-to-date and give his
holtland&gt; work more credit and attention?  (Just wishfull thinking to
holtland&gt; make even those people happy who can't find the patches made
holtland&gt; by Herbert and are not daring to use the old official patches
holtland&gt; on their newer kernels)

I think that, at least, the kerneli web page should include links to
both Herbert's and Jari's code.  The easier both of these projects can
be found, the better off we are.

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/651854DF71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7WnICZRhU33H9o38RAlPNAKC9X29aOBbXWhUOcZAqIG0k9J23wACglFHj
YxCDWvfnTsGu2icnEUX6Gpk=
=O1Fi
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010722094549</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-22 09:45:49-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

Marc Mutz wrote:
&gt; can you _please_ stop these shameless plugs and spam-like advertizing
&gt; for your patch? The poster asked for incompatibilities between 2.2.x
&gt; and 2.4.x international kernel patches.
&gt; 
&gt; Answer that or keep quiet.

Jari Ruusu wrote:
&gt; 1)  IV is block size based. When block size changes -&gt; IV changes and shit
&gt;     hits the fan. This block size insanity is a real time bomb.
&gt;     - Study kernel sources how block sizes are used in filesystems and
&gt;       elsewhere. Grep kernel sources for set_blocksize().
&gt;     - Study kernel sources how IV is computed in loop.c
&gt; 
&gt;     When mounting a file system (ext2 for example), a superblock must be
&gt;     read from disk. Superblock contains the block size of the file system.
&gt;     To read the superblock without corrupting any data, following items are
&gt;     needed:
&gt; 
&gt;     a)  Encrypted data on the disk... Yep, got that.
&gt;     b)  Encryption key... Yep, got that too.
&gt;     c)  Sector offset of superblock, needed for IV calculation... Yep.
&gt;     d)  Blocksize, needed for IV calculation... Blocksize? Hello?

Above means:
- If reads do not start at same offset as writes were performed earlier -&gt;
  wrong IV -&gt; data corruption.
- If reads are longer than writes were earlier -&gt; wrong IV in middle of read
  -&gt; data corruption.
- If block size is not same as when writes done -&gt; wrong IV -&gt; data
  corruption.

International crypto patch makes a lot of assumptions about how file systems
access the disk, including assumption that block size newer changes. Many of
these assumptions are just NOT TRUE and cause data corruption and
INCOMPATIBLE behavior. It is just a broken design, period.

Sorry if stating facts annoys you.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010722164014</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-07-22 16:40:14-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Sunday 22 July 2001 08:26, Hubert Chan wrote:
&lt;snip&gt;
&gt; I think that, at least, the kerneli web page should include links to
&gt; both Herbert's and Jari's code.  The easier both of these projects
&gt; can be found, the better off we are.
&lt;snip&gt;

Hm, probably difficult, since Alex seems to respond no longer to EMail. 
If Herbert really wants to take over maintainance, it's probably easier 
to just contact HPA and say that and get a hvr/ directory in people/ 
and write access to crypto/ (all relative to 
ftp.kerbel.org/pub/linux/kernel/)

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7WwH+3oWD+L2/6DgRArMkAJ0dW8GksE8lQdGro4vrZE783zYFOQCg3Rf5
GmxyGZikohgOWqBu9EG92kg=
=Z0Ys
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010722204002</emailId><senderName>"holtland Last Name"</senderName><senderEmail>holtland@my-deja.com</senderEmail><timestampReceived>2001-07-22 20:40:02-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>

Hello,

Sorry for not posting in direct reply.

&lt;snip&gt;
&gt; I think that, at least, the kerneli web page should include links to
&gt; both Herbert's and Jari's code.  The easier both of these projects
&gt; can be found, the better off we are.

Hm, probably difficult, since Alex seems to respond no longer to EMail. 
If Herbert really wants to take over maintainance, it's probably easier 
to just contact HPA and say that and get a hvr/ directory in people/ 
and write access to crypto/ (all relative to 
ftp.kerbel.org/pub/linux/kernel/)
&lt;snip&gt;

I know Alexander does read his mail from time to time.
It would be fair to at least warn him somebody likes to take over
some work before doing so.

regards,
H.



------------------------------------------------------------
--== Sent via Deja.com ==--
http://www.deja.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010713151253</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-13 15:12:53-0400</timestampReceived><subject>Re: Kernel 2.4.6 and crypto 2.4.3.1 will not mount file systems</subject><body>

On Fri, 13 Jul 2001, John Bass wrote:

&gt; Hello,
&gt;
&gt; I'm running kernel 2.4.6 patched with the crypto patch 2.4.3.1 but after
&gt; building a 10M file, encrypting it with AES, making the file system.... it
&gt; will not mount. I get the following message. Are there any known fixes?
&gt;
&gt; Jul 13 15:57:21 ariane kernel: cipher-aes-cbccipher-aes&lt;6&gt;cryptoapi:
&gt; Registered aes-ecb (0)
&gt; Jul 13 15:57:21 ariane kernel: cryptoapi: Registered aes-cbc (65536)
&gt; Jul 13 15:58:26 ariane kernel: EXT2-fs error (device loop(7,0)):
&gt; ext2_check_descriptors: Block bitmap for group 0 not in group (block
&gt; 3488652124)!
&gt; Jul 13 15:58:26 ariane kernel: EXT2-fs: group descriptors corrupted !

known issue... it's the variable blocksize IV calculation syndrome

the simple solution, (but hacky)

repeat the mke2fs and mount commands,
since the blocksize was changed by trying to mount the image, which
affects the encryption...

the better solution, switch to 512byte IV calculation mode...
either use the cryptoapi-branch of the international crypto patch or
loop-AES, depending on whether you want an improved int-patch approach or
just a specific but compact solution...

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010713151913</emailId><senderName>"John Bass"</senderName><senderEmail>john.bass@johnbass.co.uk</senderEmail><timestampReceived>2001-07-13 15:19:13-0400</timestampReceived><subject>RE: Kernel 2.4.6 and crypto 2.4.3.1 will not mount file systems</subject><body>

Hello,

Where do I find both/either?

John

-----Original Message-----
From: Herbert Valerio Riedel [mailto:hvr@hvrlab.org]
Sent: 13 July 2001 16:13
To: John Bass
Cc: linux-crypto@nl.linux.org
Subject: Re: Kernel 2.4.6 and crypto 2.4.3.1 will not mount file systems


On Fri, 13 Jul 2001, John Bass wrote:

&gt; Hello,
&gt;
&gt; I'm running kernel 2.4.6 patched with the crypto patch 2.4.3.1 but after
&gt; building a 10M file, encrypting it with AES, making the file system.... it
&gt; will not mount. I get the following message. Are there any known fixes?
&gt;
&gt; Jul 13 15:57:21 ariane kernel: cipher-aes-cbccipher-aes&lt;6&gt;cryptoapi:
&gt; Registered aes-ecb (0)
&gt; Jul 13 15:57:21 ariane kernel: cryptoapi: Registered aes-cbc (65536)
&gt; Jul 13 15:58:26 ariane kernel: EXT2-fs error (device loop(7,0)):
&gt; ext2_check_descriptors: Block bitmap for group 0 not in group (block
&gt; 3488652124)!
&gt; Jul 13 15:58:26 ariane kernel: EXT2-fs: group descriptors corrupted !

known issue... it's the variable blocksize IV calculation syndrome

the simple solution, (but hacky)

repeat the mke2fs and mount commands,
since the blocksize was changed by trying to mount the image, which
affects the encryption...

the better solution, switch to 512byte IV calculation mode...
either use the cryptoapi-branch of the international crypto patch or
loop-AES, depending on whether you want an improved int-patch approach or
just a specific but compact solution...

--
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708001737</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-08 00:17:37-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

Did you compile in all the relevant kernel options? (Loopback, enable
loopback encryption, the separate set of crypto options?)

The howto is very well set out.

Adam





Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708003500</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-08 00:35:00-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Warner, et al.:

	Well, I believe so. However, later tonight I will try to post a copy of my
".config" so you can review it. Which FAQ are you speaking of? If you mean
the one that comes with the documentation for the patch, I have read it
"FAQ.txt" or whatever it is called.

	From a "newbies" point of view, why can we implement any of the following
ideas?

Does the crypto package work in connection with the encryption of passwords
stored in /etc/passwd at all? If not, is such functionality planned?

In order to address the ability to simplify the installation of
cryptographic technology into the Linux kernel, and exact a more integrated
cooperative functionality between cryptographic technology and the areas
within the Linux kernel where it could be leveraged, I am curious why the
skeleton of the cryptographic technology is not integrated into the main
("non International kernel"), and thus only forcing the addition of
encryption modules for encryption be usable.

	Let me explain further.....

	We have to patch "mount" and "unmount", why? Why not place the code for
doing the cryptographic work permanently into those programs, and supply
(with the "non International Kernel") dummy encryption modules which simply
return the text they were passed, thus doing no work. Then in order to add
cryptographic ability to a particular release, all that would be necessary
was to replace the dummy modules with real working ones?

	Just an idea.....


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Saturday, July 07, 2001 5:21 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Adam Warner
Sent: Saturday, July 07, 2001 5:18 PM
To: linux-crypto@nl.linux.org
Subject: Re: Using Crypto under LM8+2.4.6

Did you compile in all the relevant kernel options? (Loopback, enable
loopback encryption, the separate set of crypto options?)

The howto is very well set out.

Adam





Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708013214</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-08 01:32:14-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

On 07 Jul 2001 17:35:00 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner, et al.:
&gt; 
&gt; 	Well, I believe so. However, later tonight I will try to post a copy of my
&gt; ".config" so you can review it. Which FAQ are you speaking of? If you mean
&gt; the one that comes with the documentation for the patch, I have read it
&gt; "FAQ.txt" or whatever it is called.

Stuart, I probably won't be reviewing it. You have to take the time to
read though the new menu options when you are compiling a new kernel. I
like using the menuconfig interface (make menuconfig in /usr/src/linux).
BTW I said "HOWTO" (by Marc Mutz):
http://encryptionhowto.sourceforge.net/

Just remember it was written from the perspective of the 2.2 kernel.

&gt; 	From a "newbies" point of view, why can we implement any of the following
&gt; ideas?
&gt; 
&gt; Does the crypto package work in connection with the encryption of passwords
&gt; stored in /etc/passwd at all? If not, is such functionality planned?

The whole point of encryption is that it hopefully keeps data safe when
people _bypass_ the operating system authenication controls (e.g. by
having physical access to your computer). If you care enough about your
data to encrypt it you don't want the operating system storing a copy of
your password in whatever form.

&lt;snip&gt;

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010708095155</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-08 09:51:55-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

On 07 Jul 2001 19:57:09 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner:
&gt; 
&gt; 	I since turned on every menue option in the "menuconfig" relative to crypto
&gt; (mind you all in "M" or module selected mode), still the same problem. What
&gt; could I try next?

Stuart, I've never had any problems (but I've never created modules
either). This is the best kernel compile advice I can give:

In Crypto options:
Select Crypto support
Select Crypto ciphers
Select ciphers of choice
Might as well also select the SHA-1 digest algorithm.

In Block Devices (I suspect you missed this):
Select Loopback device support
Select Loopback encryption support

If it still doesn't work then I'm lost for advice.

&gt; 	I am sorry, I must have been unclear in order to solicit the response you
&gt; sent. What I was referring to was integrating the crypto package into the
&gt; passwd program. Currently password stored in /etc/passwd are stored using
&gt; Unix cryptographic methods. I would rather use AES for example to encrypt
&gt; the passwords (login passwords, I mean) in the /etc/passwd. What I meant was
&gt; to leverage strong encryption where weak encryption is used right now to
&gt; encrypt password (as is done normally) in the /etc/passwd file.

My understanding is MD5 password hashes can already be used. That's
pretty strong. Plus with shadow passwords even the encrypted passwords
aren't displayed in /etc/passwd (just an "x"). In other words there is
no longer any problem to solve nor any encryption necessary in
/etc/passwd. /etc/shadow can only be read by root.

I'm not sure how long it would take to crack an MD5 password but it
wouldn't be pretty. But you'd need root privileges to even see them!

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709022509</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 02:25:09-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Warner, et al.:

	I recently checked my Linux configuration, and noticed that I hadn't ticked
off the experimental crypto box under the loop back device. Now I was able
to use the losetup to do crypto. Why does everyone say its broken? Seems to
have worked for me (using the 2.4.6 kernel + 2.4.6 kernel I-patch). Am I
missing something here?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 7:23 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Adam Warner
Sent: Sunday, July 08, 2001 2:52 AM
To: linux-crypto@nl.linux.org
Subject: RE: Using Crypto under LM8+2.4.6

On 07 Jul 2001 19:57:09 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner:
&gt;
&gt;       I since turned on every menue option in the "menuconfig" relative to
crypto
&gt; (mind you all in "M" or module selected mode), still the same problem.
What
&gt; could I try next?

Stuart, I've never had any problems (but I've never created modules
either). This is the best kernel compile advice I can give:

In Crypto options:
Select Crypto support
Select Crypto ciphers
Select ciphers of choice
Might as well also select the SHA-1 digest algorithm.

In Block Devices (I suspect you missed this):
Select Loopback device support
Select Loopback encryption support

If it still doesn't work then I'm lost for advice.

&gt;       I am sorry, I must have been unclear in order to solicit the
response you
&gt; sent. What I was referring to was integrating the crypto package into the
&gt; passwd program. Currently password stored in /etc/passwd are stored using
&gt; Unix cryptographic methods. I would rather use AES for example to encrypt
&gt; the passwords (login passwords, I mean) in the /etc/passwd. What I meant
was
&gt; to leverage strong encryption where weak encryption is used right now to
&gt; encrypt password (as is done normally) in the /etc/passwd file.

My understanding is MD5 password hashes can already be used. That's
pretty strong. Plus with shadow passwords even the encrypted passwords
aren't displayed in /etc/passwd (just an "x"). In other words there is
no longer any problem to solve nor any encryption necessary in
/etc/passwd. /etc/shadow can only be read by root.

I'm not sure how long it would take to crack an MD5 password but it
wouldn't be pretty. But you'd need root privileges to even see them!

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709031733</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-09 03:17:33-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

On 08 Jul 2001 19:25:09 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner, et al.:
&gt; 
&gt; 	I recently checked my Linux configuration, and noticed that I hadn't ticked
&gt; off the experimental crypto box under the loop back device. Now I was able
&gt; to use the losetup to do crypto. Why does everyone say its broken? Seems to
&gt; have worked for me (using the 2.4.6 kernel + 2.4.6 kernel I-patch). Am I
&gt; missing something here?

Glad I could help. By the way I noted that you should do this the first
time around:

"Did you compile in all the relevant kernel options? (Loopback, enable
loopback encryption, the separate set of crypto options?)"

Regards,
Adam

PS: Thanks Jari for the info that Loop-AES is SMP safe.




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709032558</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 03:25:58-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Warner:

	What is the problem with the I-patch though?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 8:22 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Adam Warner
Sent: Sunday, July 08, 2001 8:18 PM
To: linux-crypto@nl.linux.org
Subject: RE: Using Crypto under LM8+2.4.6

On 08 Jul 2001 19:25:09 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner, et al.:
&gt;
&gt;       I recently checked my Linux configuration, and noticed that I hadn't
ticked
&gt; off the experimental crypto box under the loop back device. Now I was able
&gt; to use the losetup to do crypto. Why does everyone say its broken? Seems
to
&gt; have worked for me (using the 2.4.6 kernel + 2.4.6 kernel I-patch). Am I
&gt; missing something here?

Glad I could help. By the way I noted that you should do this the first
time around:

"Did you compile in all the relevant kernel options? (Loopback, enable
loopback encryption, the separate set of crypto options?)"

Regards,
Adam

PS: Thanks Jari for the info that Loop-AES is SMP safe.




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709033808</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-09 03:38:08-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

On 08 Jul 2001 20:25:58 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner:
&gt; 
&gt; 	What is the problem with the I-patch though?

It was posted the other day by Herbert Valerio Riedel:

known problems with the international crypto patch on 2.4.x:

*) non-reentrant --&gt; don't use it on SMP (unless you can enforce
non-parallel execution of the transfer functions)
if you want to do some work on it, please go ahead; I can tell you where
you should begin to look at...

*) transfer block size dependend IV size (there is a fix for this one in
the cryptoapi re-package, see the included README file for more about
it)

---

This will be enough to help you find all the heated conversations using
google/google groups/linux-crypto archive.

Regards,
Adam


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709034717</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 03:47:17-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Warner, et al.:

	I read that, and from what Jari makes it seem like the I-patch is garbage.
Its not then, firstly I have a laptop, I do not have SMP!

	Secondly, the IV size issue can be subverted by using two loop devices (I
know that), absent those two issues, it seems as if it works and is a very
viable solution.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Sunday, July 08, 2001 8:41 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Adam Warner
Sent: Sunday, July 08, 2001 8:38 PM
To: linux-crypto@nl.linux.org
Subject: RE: Using Crypto under LM8+2.4.6

On 08 Jul 2001 20:25:58 -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; Mr. Warner:
&gt;
&gt;       What is the problem with the I-patch though?

It was posted the other day by Herbert Valerio Riedel:

known problems with the international crypto patch on 2.4.x:

*) non-reentrant --&gt; don't use it on SMP (unless you can enforce
non-parallel execution of the transfer functions)
if you want to do some work on it, please go ahead; I can tell you where
you should begin to look at...

*) transfer block size dependend IV size (there is a fix for this one in
the cryptoapi re-package, see the included README file for more about
it)

---

This will be enough to help you find all the heated conversations using
google/google groups/linux-crypto archive.

Regards,
Adam


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709124038</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-09 12:40:38-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

On Sat, Jul 07, 2001 at 05:35:00PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt; 	We have to patch "mount" and "unmount", why? Why not place the code for
&gt; doing the cryptographic work permanently into those programs, and supply
&gt; (with the "non International Kernel") dummy encryption modules which simply
&gt; return the text they were passed, thus doing no work. Then in order to add
&gt; cryptographic ability to a particular release, all that would be necessary
&gt; was to replace the dummy modules with real working ones?
&gt; 

This has been done in the debian sid distribution. I worked
with the fellow doing the util-linux package to get the LFS
fix into the mainstream: he had already mainstreamed the
crypto patches.

I do not know if this is in the woody dist yet or not.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709233605</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 23:36:05-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Amon, et al.:

	A better solution (IMHO) would be to create an I-patch that does not choke
on most distributions, and does not REQUIRE the Linus kernel to work.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:35 PM

-----Original Message-----
From: Dale Amon [mailto:amon@angusbay.vnl.com]On Behalf Of Dale Amon
Sent: Monday, July 09, 2001 5:41 AM
To: IT3 Stuart B. Tener, USNR-R
Cc: linux-crypto@nl.linux.org
Subject: Re: Using Crypto under LM8+2.4.6

On Sat, Jul 07, 2001 at 05:35:00PM -0700, IT3 Stuart B. Tener, USNR-R wrote:
&gt;       We have to patch "mount" and "unmount", why? Why not place the code
for
&gt; doing the cryptographic work permanently into those programs, and supply
&gt; (with the "non International Kernel") dummy encryption modules which
simply
&gt; return the text they were passed, thus doing no work. Then in order to add
&gt; cryptographic ability to a particular release, all that would be necessary
&gt; was to replace the dummy modules with real working ones?
&gt;

This has been done in the debian sid distribution. I worked
with the fellow doing the util-linux package to get the LFS
fix into the mainstream: he had already mainstreamed the
crypto patches.

I do not know if this is in the woody dist yet or not.

--
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709235705</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-09 23:57:05-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

&gt; A better solution (IMHO) would be to create an I-patch that does not choke
&gt; on most distributions, and does not REQUIRE the Linus kernel to work.

well, imho the best solution would be to completely integrate crypto into
all kernels, especially into the linus one as it at least seems as the
official one to the most users....
afaik the only problem about that is that crypto isnt allowed in all
countries which was the cause of creating the I-patch, if crypto was
integrated into the kernel the whole thing would be illegal in those
countries....
i would just solve it like that: put some script "patch-crypto" into the
kernel tree so the user can download "crypto.tar.bz2" if crypto is allowed
in his country and then just run "patch-crypto crypto.tar.bz2" which will do
*all* the patching of the kernel



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000207</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:02:07-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Peter:

        There is a "one-better" solution. If the kernel were integrated with
all the links to have crypto, and dummy crypto modules were supplied (that
did nothing with the clear text, basically passing back exactly what it
receives), then all that would be necessary is to replace the bogus modules
with real modules to gain crypto abilities.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 5:00 PM

-----Original Message-----
From: peter k. [mailto:spam-goes-to-dev-null@gmx.net]
Sent: Monday, July 09, 2001 4:57 PM
To: stuart@bh90210.net
Cc: linux-crypto@nl.linux.org
Subject: Re: Using Crypto under LM8+2.4.6

&gt; A better solution (IMHO) would be to create an I-patch that does not choke
&gt; on most distributions, and does not REQUIRE the Linus kernel to work.

well, imho the best solution would be to completely integrate crypto into
all kernels, especially into the linus one as it at least seems as the
official one to the most users....
afaik the only problem about that is that crypto isnt allowed in all
countries which was the cause of creating the I-patch, if crypto was
integrated into the kernel the whole thing would be illegal in those
countries....
i would just solve it like that: put some script "patch-crypto" into the
kernel tree so the user can download "crypto.tar.bz2" if crypto is allowed
in his country and then just run "patch-crypto crypto.tar.bz2" which will do
*all* the patching of the kernel


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000456</emailId><senderName>"spambox"</senderName><senderEmail>spambox@gmx.li</senderEmail><timestampReceived>2001-07-10 00:04:56-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

&gt;         There is a "one-better" solution. If the kernel were integrated
with
&gt; all the links to have crypto, and dummy crypto modules were supplied (that
&gt; did nothing with the clear text, basically passing back exactly what it
&gt; receives), then all that would be necessary is to replace the bogus
modules
&gt; with real modules to gain crypto abilities.

"modules" &lt;= not everyone likes modules so the tree should be patched so
that everyone can compile it to whatever he likes ;)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710001122</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 00:11:22-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Spambox:

I understand where you are coming from, but I don't agree. Patching a kernel
is not a simple process when juxtaposed against all the different
distributions out there. As well there really isn't any disadvantage to
modules. Nevertheless, even so, lets consider this:

        Even if what you did was have the code in the main kernel tree,
patching in the actual algorithms after the function definition and before
the "return statement" would be quite a simple process, since every kernel
would look the same (when unpatched) no matter what distribution you had.
Since presumably most of the different distributions are not writing or
putzing with the part of the kernel at all.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 5:08 PM

-----Original Message-----
From: spambox [mailto:spambox@gmx.li]
Sent: Monday, July 09, 2001 5:05 PM
To: stuart@bh90210.net
Cc: linux-crypto@nl.linux.org
Subject: Re: Using Crypto under LM8+2.4.6

&gt;         There is a "one-better" solution. If the kernel were integrated
with
&gt; all the links to have crypto, and dummy crypto modules were supplied (that
&gt; did nothing with the clear text, basically passing back exactly what it
&gt; receives), then all that would be necessary is to replace the bogus
modules
&gt; with real modules to gain crypto abilities.

"modules" &lt;= not everyone likes modules so the tree should be patched so
that everyone can compile it to whatever he likes ;)


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710002922</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-10 00:29:22-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

&gt; I understand where you are coming from, but I don't agree. Patching a
kernel
&gt; is not a simple process when juxtaposed against all the different
&gt; distributions out there. As well there really isn't any disadvantage to
&gt; modules. Nevertheless, even so, lets consider this:

well, i guess like 95% of the linus kernel can be compiled into it so why
not conform to that standard? not conforming imho might even result in our
future new I-patch being just like the old one: not used by anyone as it is
too "outside" of the normal kernel and to difficult to install



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710020839</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-10 02:08:39-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:

&gt;         There is a "one-better" solution. If the kernel were integrated with
&gt; all the links to have crypto, and dummy crypto modules were supplied (that
&gt; did nothing with the clear text, basically passing back exactly what it
&gt; receives), then all that would be necessary is to replace the bogus modules
&gt; with real modules to gain crypto abilities.

The problem here is not technical. The problem is export laws that prevent US,
and perhaps some other, distributions from shipping with crypto included. e.g.
for FreeS/WAN IPSEC, we have this in the docs:

http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/intro.html#products

| Unfortunately the export laws of some countries restrict the distribution of
| strong cryptography. FreeS/WAN is therefore not in the standard Linux kernel
| and not in all CD or web distributions.
|
| Full Linux distributions
|
| FreeS/WAN is included in various general-purpose Linux distributions from
| countries (shown in brackets) with more sensible laws:
|
|    European versions of SuSE Linux (Germany) 
|    Conectiva (Brazil) 
|    the server edition of Corel Linux (Canada) 
|    the Polish(ed) Linux Distribution (Poland) 
|    Trustix Secure Linux (Norway)
|
| Firewall distributions   
| ...
| Firewall and VPN products
| ...

The same reasons apply to encrypting file systems, the international patch,
in fact anything that uses strong crypto. Conectiva ship with FreeS/WAN,
SSH, I think file encryption, ..., but kernel.org and US companies have
difficulty doing that.

US and other export laws have undergone some changes recently, and kernel.org
now carries the international patch. However, there are still restrictions
and it is still not clear that we can do the Right Thing, put strong crypto
in the standard kernel and therefore have it available to all Linux users
without fuss.

Your solution with dummy modules does not work, because the writers of the
export laws excluded that approach. Any "crypto-shaped hole", any interface
designed to make adding cryptography easy, is covered by those laws.

For discussion, see:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/politics.html#politics

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710031304</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-10 03:13:04-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Ms. Harris:

        I thought the Bernstein case said that public domain research
development for ciphers maybe published and exported?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 7:45 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Sandy Harris
Sent: Monday, July 09, 2001 7:09 PM
To: linux-crypto@nl.linux.org
Subject: Re: Using Crypto under LM8+2.4.6

"IT3 Stuart B. Tener, USNR-R" wrote:

&gt;         There is a "one-better" solution. If the kernel were integrated
with
&gt; all the links to have crypto, and dummy crypto modules were supplied (that
&gt; did nothing with the clear text, basically passing back exactly what it
&gt; receives), then all that would be necessary is to replace the bogus
modules
&gt; with real modules to gain crypto abilities.

The problem here is not technical. The problem is export laws that prevent
US,
and perhaps some other, distributions from shipping with crypto included.
e.g.
for FreeS/WAN IPSEC, we have this in the docs:

http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/intro.html#products

| Unfortunately the export laws of some countries restrict the distribution
of
| strong cryptography. FreeS/WAN is therefore not in the standard Linux
kernel
| and not in all CD or web distributions.
|
| Full Linux distributions
|
| FreeS/WAN is included in various general-purpose Linux distributions from
| countries (shown in brackets) with more sensible laws:
|
|    European versions of SuSE Linux (Germany)
|    Conectiva (Brazil)
|    the server edition of Corel Linux (Canada)
|    the Polish(ed) Linux Distribution (Poland)
|    Trustix Secure Linux (Norway)
|
| Firewall distributions
| ...
| Firewall and VPN products
| ...

The same reasons apply to encrypting file systems, the international patch,
in fact anything that uses strong crypto. Conectiva ship with FreeS/WAN,
SSH, I think file encryption, ..., but kernel.org and US companies have
difficulty doing that.

US and other export laws have undergone some changes recently, and
kernel.org
now carries the international patch. However, there are still restrictions
and it is still not clear that we can do the Right Thing, put strong crypto
in the standard kernel and therefore have it available to all Linux users
without fuss.

Your solution with dummy modules does not work, because the writers of the
export laws excluded that approach. Any "crypto-shaped hole", any interface
designed to make adding cryptography easy, is covered by those laws.

For discussion, see:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/politics.html#polit
ics

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710175610</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-10 17:56:10-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:

&gt; Ms. Harris:

(Mr., actually :-)
 
&gt;         I thought the Bernstein case said that public domain research
&gt; development for ciphers maybe published and exported?

My understanding is that it is more complex than that. The international 
agreement on such things:
http://www.fitug.de/news/wa/index.html
says:

|    The Lists do not control "software" which is either: 
|
|      1.Generally available to the public by . . . retail . . . or 
|      2."In the public domain". 

so "public domain" software should be completely exempt from export
controls. The glossary for that document defines "In the public domain" as:

|    . . . "technology" or "software" which has been made available without
|         restrictions upon its further dissemination. 
|
|    N.B. Copyright restrictions do not remove "technology" or "software"
|    from being "in the public domain".

so GPL software seems to be "public domain" by their definition.

Despite being a signatory to that agreement, the US government has chosen
to restrict export of public domain cryptography software.

The question of whether code is public domain or not is irrelevant in the
Bernstein case:
http://www.eff.org/bernstein/

That case revolves around the argument that code is speech, used for
communication among programmers, and therefore protected by the First
Amendment to the US Constitution. If I understand it correctly, they
are arguing that the cryptography export laws are unconstitutional and
should be overturned completely.

The gov't lost twice in the Bernstein case, first in lower court then
again on appeal. At that point, they changed some export regulations
-- you can now export public domain source code with only a requirement
to notify the gov't. -- and asked for a new hearing.

That still doesn't match the international agreement, which says the
export restrictions don't apply to public domain code period. Nor does
it make it entirely clear whether a US-baased company can ship a Linux
distribution with strong crypto in object-code form.

The Bernstein/EFF position is that the law is still unconstitutional
and should still be struck down.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712180505</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@crosswinds.net</senderEmail><timestampReceived>2001-07-12 18:05:05-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Sandy" == Sandy Harris &lt;sandy@storm.ca&gt; writes:

Sandy&gt; "IT3 Stuart B. Tener, USNR-R" wrote:
&gt;&gt; There is a "one-better" solution. If the kernel were integrated with
&gt;&gt; all the links to have crypto, and dummy crypto modules were supplied
&gt;&gt; (that did nothing with the clear text, basically passing back exactly
&gt;&gt; what it receives), then all that would be necessary is to replace the
&gt;&gt; bogus modules with real modules to gain crypto abilities.

Sandy&gt; The problem here is not technical. The problem is export laws
Sandy&gt; that prevent US, and perhaps some other, distributions from
Sandy&gt; shipping with crypto included.

And don't forget the countries where crypto code is illegal to possess.

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7TebMZRhU33H9o38RAtydAKC5kYFvLJj9wlgODL6418yPIUmx7wCfRTJa
c8S3cgvFuFYeL9fQdRIKA8s=
=ndJd
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712180641</emailId><senderName>Hubert Chan</senderName><senderEmail>hackerhue@crosswinds.net</senderEmail><timestampReceived>2001-07-12 18:06:41-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Adam" == Adam Warner &lt;lists@consulting.net.nz&gt; writes:

Adam&gt; The whole point of encryption is that it hopefully keeps data safe
Adam&gt; when people _bypass_ the operating system authenication controls
Adam&gt; (e.g. by having physical access to your computer). If you care
Adam&gt; enough about your data to encrypt it you don't want the operating
Adam&gt; system storing a copy of your password in whatever form.

Could you not password-protect your keyfile, like gnupg and ssh do?

- -- 
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7TecdZRhU33H9o38RAjjiAJ0S1+YMOFUAQ1g4tTXuADgs7pJyTQCgqdZP
+jmIrBijOEbublgQf3c1aRU=
=QOKT
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712182218</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 18:22:18-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Harris, Mr. Chan, et al.:

	I must question if either of you actually even read what I posted, because
your response absolutely makes no sense relative to the commentary I
scripted.

I would request you re-read my posting below, particularly, the section
which says, "dummy crypto modules were supplied (that did nothing with the
clear text, basically passing back exactly what it receives), then all that
would be necessary is to replace the bogus modules with real modules to gain
crypto abilities."

	I would have thought that, you would understand this to mean that if you
ship Linux to a target country, and it had an AES-128 module compiled into
the kernel which in fact did not perform any encryption service but just
returned the clear text it was passed absent any modification to it, how
would this be illegal in countries which disallow the importation or
exportation of such technologies? If then a target user was in a country
which did allow the importation of such technologies, then he could replace
the dummy modules with a real encryption module which passes back cipher
text not clear text.

	In other words (at least in the USA), you can call a piece of software an
encryption software, but if in fact it does NOT encryption the code it is
supposed to, you did not export or import encryption code. One of the
predicating factors is that it must in fact actually achieve the goal of
encrypting the clear text and not just return the clear text unmodified or
the Federal Government can charge you no violation of any criminal act.

	Why do all that? To insure an integration of a crypto API into the standard
kernel distribution, which would not force all this modification to take
place. As well, then a person would need only replace "dummy" encryption
modules with real encryption modules, if allow by local legislation to do
so.

	Export laws do not prevent the API from being inclusive to Linux, they
prevent the actually encryption code from being in Linux, period.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Thursday, July 12, 2001 11:11 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Hubert Chan
Sent:	Thursday, July 12, 2001 11:05 AM
To:	linux-crypto@nl.linux.org
Subject:	Re: Using Crypto under LM8+2.4.6

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Sandy" == Sandy Harris &lt;sandy@storm.ca&gt; writes:

Sandy&gt; "IT3 Stuart B. Tener, USNR-R" wrote:
&gt;&gt; There is a "one-better" solution. If the kernel were integrated with
&gt;&gt; all the links to have crypto, and dummy crypto modules were supplied
&gt;&gt; (that did nothing with the clear text, basically passing back exactly
&gt;&gt; what it receives), then all that would be necessary is to replace the
&gt;&gt; bogus modules with real modules to gain crypto abilities.

Sandy&gt; The problem here is not technical. The problem is export laws
Sandy&gt; that prevent US, and perhaps some other, distributions from
Sandy&gt; shipping with crypto included.

And don't forget the countries where crypto code is illegal to possess.

- --
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7TebMZRhU33H9o38RAtydAKC5kYFvLJj9wlgODL6418yPIUmx7wCfRTJa
c8S3cgvFuFYeL9fQdRIKA8s=
=ndJd
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712182233</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 18:22:33-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Harris, Mr. Chan, et al.:

	I must question if either of you actually even read what I posted, because
your response absolutely makes no sense relative to the commentary I
scripted.

I would request you re-read my posting below, particularly, the section
which says, "dummy crypto modules were supplied (that did nothing with the
clear text, basically passing back exactly what it receives), then all that
would be necessary is to replace the bogus modules with real modules to gain
crypto abilities."

	I would have thought that, you would understand this to mean that if you
ship Linux to a target country, and it had an AES-128 module compiled into
the kernel which in fact did not perform any encryption service but just
returned the clear text it was passed absent any modification to it, how
would this be illegal in countries which disallow the importation or
exportation of such technologies? If then a target user was in a country
which did allow the importation of such technologies, then he could replace
the dummy modules with a real encryption module which passes back cipher
text not clear text.

	In other words (at least in the USA), you can call a piece of software an
encryption software, but if in fact it does NOT encryption the code it is
supposed to, you did not export or import encryption code. One of the
predicating factors is that it must in fact actually achieve the goal of
encrypting the clear text and not just return the clear text unmodified or
the Federal Government can charge you no violation of any criminal act.

	Why do all that? To insure an integration of a crypto API into the standard
kernel distribution, which would not force all this modification to take
place. As well, then a person would need only replace "dummy" encryption
modules with real encryption modules, if allow by local legislation to do
so.

	Export laws do not prevent the API from being inclusive to Linux, they
prevent the actually encryption code from being in Linux, period.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Thursday, July 12, 2001 11:11 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Hubert Chan
Sent:	Thursday, July 12, 2001 11:05 AM
To:	linux-crypto@nl.linux.org
Subject:	Re: Using Crypto under LM8+2.4.6

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

&gt;&gt;&gt;&gt;&gt; "Sandy" == Sandy Harris &lt;sandy@storm.ca&gt; writes:

Sandy&gt; "IT3 Stuart B. Tener, USNR-R" wrote:
&gt;&gt; There is a "one-better" solution. If the kernel were integrated with
&gt;&gt; all the links to have crypto, and dummy crypto modules were supplied
&gt;&gt; (that did nothing with the clear text, basically passing back exactly
&gt;&gt; what it receives), then all that would be necessary is to replace the
&gt;&gt; bogus modules with real modules to gain crypto abilities.

Sandy&gt; The problem here is not technical. The problem is export laws
Sandy&gt; that prevent US, and perhaps some other, distributions from
Sandy&gt; shipping with crypto included.

And don't forget the countries where crypto code is illegal to possess.

- --
Hubert Chan &lt;hackerhue@geek.com&gt; - http://www.geocities.com/hubertchan/
PGP/GnuPG key: 1024D/71FDA37F
Fingerprint: 6CC5 822D 2E55 494C 81DD  6F2C 6518 54DF 71FD A37F
Key available at wwwkeys.pgp.net.   Please encrypt *all* e-mail to me.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7TebMZRhU33H9o38RAtydAKC5kYFvLJj9wlgODL6418yPIUmx7wCfRTJa
c8S3cgvFuFYeL9fQdRIKA8s=
=ndJd
-----END PGP SIGNATURE-----


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712192127</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-12 19:21:27-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; Mr. Harris, Mr. Chan, et al.:
&gt; 
&gt;         I must question if either of you actually even read what I posted, because
&gt; your response absolutely makes no sense relative to the commentary I
&gt; scripted.

Yes, I read it :-)
 
&gt; Why do all that? To insure an integration of a crypto API into the standard
&gt; kernel distribution, which would not force all this modification to take
&gt; place. As well, then a person would need only replace "dummy" encryption
&gt; modules with real encryption modules, if allow by local legislation to do
&gt; so.
&gt; 
&gt;  Export laws do not prevent the API from being inclusive to Linux, they
&gt; prevent the actually encryption code from being in Linux, period.

You're assuming the laws make sense. Various gov'ts, particularly the US
but they're by no means the only one, have been doing senseless things in
this area for decades.

Did you read my post? :-)

| Your solution with dummy modules does not work, because the writers of the
| export laws excluded that approach. Any "crypto-shaped hole", any interface
| designed to make adding cryptography easy, is covered by those laws.

That is based on my understanding of current regulations, in the US and
elsewhere. I believe it is correct, based on various documents I've read
and conversations I've had in several years of following the controversy.

I certainly agree that a good crypto API should be in the standard kernel
distribution. I am far from convinced that current US laws allow this.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712194049</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-12 19:40:49-0400</timestampReceived><subject>RE: Using Crypto under LM8+2.4.6</subject><body>

Mr. Harris:

	Particularly what section of the Code of Federal Regulations, or what rule
are you referring to? I cannot research the law from your words. Please
direct me to the precise piece of legislation you are referring too, and the
government agency responsible for its implementation and execution.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Thursday, July 12, 2001 12:35 PM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Sandy Harris
Sent:	Thursday, July 12, 2001 12:21 PM
To:	linux-crypto@nl.linux.org
Subject:	Re: Using Crypto under LM8+2.4.6

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt;
&gt; Mr. Harris, Mr. Chan, et al.:
&gt;
&gt;         I must question if either of you actually even read what I posted,
because
&gt; your response absolutely makes no sense relative to the commentary I
&gt; scripted.

Yes, I read it :-)

&gt; Why do all that? To insure an integration of a crypto API into the
standard
&gt; kernel distribution, which would not force all this modification to take
&gt; place. As well, then a person would need only replace "dummy" encryption
&gt; modules with real encryption modules, if allow by local legislation to do
&gt; so.
&gt;
&gt;  Export laws do not prevent the API from being inclusive to Linux, they
&gt; prevent the actually encryption code from being in Linux, period.

You're assuming the laws make sense. Various gov'ts, particularly the US
but they're by no means the only one, have been doing senseless things in
this area for decades.

Did you read my post? :-)

| Your solution with dummy modules does not work, because the writers of the
| export laws excluded that approach. Any "crypto-shaped hole", any
interface
| designed to make adding cryptography easy, is covered by those laws.

That is based on my understanding of current regulations, in the US and
elsewhere. I believe it is correct, based on various documents I've read
and conversations I've had in several years of following the controversy.

I certainly agree that a good crypto API should be in the standard kernel
distribution. I am far from convinced that current US laws allow this.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711094729</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-11 09:47:29-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Tue, Jul 10, 2001 at 10:38:00PM +0200, peter k. wrote:
&gt; 1) if an attacker has got some files which are on an (AES) encrypted device,
&gt; will he be able to decrypt the whole device?

It might help slightly, ie Known Plaintext Attack, but probably not a lot.
 
&gt; 2) is it a good idea to run "cat /dev/zero &gt; zero.file; shred -uv zero.file"
&gt; on (AES) encrypted devices to overwrite all free space with random data [to
&gt; remove any encrypted data which is left from deleted files from the device
&gt; behind the loopback device and confuse attackers]?

Depends on your paranoia level. If you think your key was compromised
you might do something like this; I don't see why'd you zero before
shredding. Personally I prefer wipe. Slow, but fairly certain.

In the passed I zeroed my loopbacks; but I like the idea of using /dev/random
for the job... although the thought of doing that over 10-20GB gives me
thoughts of going on vacation for 2 weeks while it runs.
 
&gt; the brackets in "(AES)" mean that i'd like to know if the answer applies to
&gt; AES only or also other cyphers (i guess so?)

Depends on the size of the keyspace. I imagine you get more
information from a known plaintext attack if the keyspace is
smaller, ie as in DES-56 or other low quality cipher.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711111748</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-07-11 11:17:48-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On 11 July 2001, Dale Amon &lt;amon@vnl.com&gt; wrote:
&gt; In the passed I zeroed my loopbacks; but I like the idea of using /dev/random
&gt; for the job... although the thought of doing that over 10-20GB gives me
&gt; thoughts of going on vacation for 2 weeks while it runs.

A good compromise between speed and the use of random data to overwrite your
sensitive data is to use 3 different threads: one gathers entropy from
random events, the other feeds this entropy into a pseudo-random number
generator and the last writes the data to disk. In this way you get the
maximum speed that your hardware can provide. It's almost the speed of
dd if=/dev/zero. Have a look at the following URL:

http://hungrycats.org/~zblaxell/projects/randstream/randstream.html


-- 
								Regards,
								Emil
--
What's the point having bad manners if you don't use them?!?

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711114030</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-11 11:40:30-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, Jul 11, 2001 at 02:17:48PM +0300, Emil wrote:
&gt; http://hungrycats.org/~zblaxell/projects/randstream/randstream.html

Thanks, I'll take a look.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711115623</emailId><senderName>Marc Mutz</senderName><senderEmail>marc@mutz.com</senderEmail><timestampReceived>2001-07-11 11:56:23-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Wednesday 11 July 2001 13:40, Dale Amon wrote:
&gt; On Wed, Jul 11, 2001 at 02:17:48PM +0300, Emil wrote:
&gt; &gt; http://hungrycats.org/~zblaxell/projects/randstream/randstream.html
&gt;
&gt; Thanks, I'll take a look.

You can use /dev/urandom. It will fall back to using a (strong) PRNG, 
but will totally deplete your entropy-pool before doing so.

Marc

- -- 
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7THbK3oWD+L2/6DgRAnIWAKDPoMsh+VK6W2ei92s7WBwYOfKgiQCgtlHY
1N55Hq/QYduTITJKN2uZH+k=
=NhuA
-----END PGP SIGNATURE-----

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711122821</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-11 12:28:21-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>


----- Original Message -----
From: "Dale Amon" &lt;amon@vnl.com&gt;
To: &lt;linux-crypto@nl.linux.org&gt;
Sent: Wednesday, July 11, 2001 11:47 AM
Subject: Re: (AES) loopback crypto questions


&gt; On Tue, Jul 10, 2001 at 10:38:00PM +0200, peter k. wrote:
&gt; &gt; 1) if an attacker has got some files which are on an (AES) encrypted
device,
&gt; &gt; will he be able to decrypt the whole device?
&gt;
&gt; It might help slightly, ie Known Plaintext Attack, but probably not a lot.
&gt;
&gt; &gt; 2) is it a good idea to run "cat /dev/zero &gt; zero.file; shred -uv
zero.file"
&gt; &gt; on (AES) encrypted devices to overwrite all free space with random data
[to
&gt; &gt; remove any encrypted data which is left from deleted files from the
device
&gt; &gt; behind the loopback device and confuse attackers]?
&gt;
&gt; Depends on your paranoia level. If you think your key was compromised
&gt; you might do something like this; I don't see why'd you zero before
&gt; shredding. Personally I prefer wipe. Slow, but fairly certain.

the cat /dev/zero is only used to get a file which is as big as the left
freespace on the device, i could also have used "cat /dev/urandom &gt;
random.file; rm -f random.file" without shred but shred is much faster than
cat /dev/urandom ;)

&gt; In the passed I zeroed my loopbacks; but I like the idea of using
/dev/random
&gt; for the job... although the thought of doing that over 10-20GB gives me
&gt; thoughts of going on vacation for 2 weeks while it runs.

isnt overwriting it with zero dangerous? or at least worse than random?

&gt; &gt; the brackets in "(AES)" mean that i'd like to know if the answer applies
to
&gt; &gt; AES only or also other cyphers (i guess so?)
&gt;
&gt; Depends on the size of the keyspace. I imagine you get more
&gt; information from a known plaintext attack if the keyspace is
&gt; smaller, ie as in DES-56 or other low quality cipher.



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711172453</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-11 17:24:53-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>



&gt; On Tue, Jul 10, 2001 at 10:38:00PM +0200, peter k. wrote:
&gt; &gt; 1) if an attacker has got some files which are on an (AES) encrypted
device,
&gt; &gt; will he be able to decrypt the whole device?
&gt;
&gt; It might help slightly, ie Known Plaintext Attack, but probably not a lot.
&gt;

can a known plaintext attack be made impossible by creating 2 loopback
crypto devices, one on the other one? for example:

losetup -e AES128 /dev/loop0 /dev/hdb
losetup -e AES128 /dev/loop1 /dev/loop0
mount -t ext2 /dev/loop1 /mnt/crypto




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711174045</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-11 17:40:45-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, Jul 11, 2001 at 07:24:53PM +0200, peter k. wrote:
&gt; can a known plaintext attack be made impossible by creating 2 loopback
&gt; crypto devices, one on the other one? for example:
&gt; 

This boils down to f(k2, f(k1,x)) where x is the known
plaintext and k1 and k2 are the two symmetric keys.

You would need a real cryptographer to answer this
question. But I'll hazard a couple guesses and make
a few wild statements:

1) If there is known plaintext you always decrease the
security by some small amount.

2) Good ciphers depend on non-linearities, so even a totally
known plaintext probably does not hand you the original
key on a platter.

3) Encrypting sequentially with two different symmetric
keys of 256 bits will have an end result that has a
security of 256 &lt;= equivkeysize &lt;= 512.

Two is a copout that says I haven't a clue if it will
make it better, but I'm certain it won't be worse and
it's conceivable it could be as effective as doubling
the keysize and encrypting once.

This is all just my own mathematical intuition: you 
really need a mathematician to give a definitive answer.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711174830</emailId><senderName>Tim Walberg</senderName><senderEmail>twalberg@mindspring.com</senderEmail><timestampReceived>2001-07-11 17:48:30-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On 07/11/2001 18:40 +0100, Dale Amon wrote:
&gt;&gt;	3) Encrypting sequentially with two different symmetric
&gt;&gt;	keys of 256 bits will have an end result that has a
&gt;&gt;	security of 256 &lt;= equivkeysize &lt;= 512.
&gt;&gt;	


This is not always true; there are known cases where, due
to weaknesses in algorithms, encrypting twice may actually
be weaker than encrypting once - i.e. you may end up with
equivkeysize &lt; 256. This really depends on the algorithm
and the choice of keys, though (many algorithms have certain
keys that are weaker than others, as well).



-- 
twalberg@mindspring.com

[Attachment #3 (application/pgp-signature)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email><email><emailId>20010711204351</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-11 20:43:51-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, Jul 11, 2001 at 12:48:30PM -0500, Tim Walberg wrote:
&gt; On 07/11/2001 18:40 +0100, Dale Amon wrote:
&gt; &gt;&gt;	3) Encrypting sequentially with two different symmetric
&gt; &gt;&gt;	keys of 256 bits will have an end result that has a
&gt; &gt;&gt;	security of 256 &lt;= equivkeysize &lt;= 512.

&gt; 
&gt; This is not always true; there are known cases where, due
&gt; to weaknesses in algorithms, encrypting twice may actually
&gt; be weaker than encrypting once - i.e. you may end up with
&gt; equivkeysize &lt; 256. This really depends on the algorithm
&gt; and the choice of keys, though (many algorithms have certain
&gt; keys that are weaker than others, as well).

	Actually, it's worse than that.  Review Bruce Schneier's comments
on 3-DES and "meet in the middle" attacks.  Even crypto systems which
do not exhibit a compound weakening are likely to be vulnerable to meet
in the middle attacks that amount to them only being twice as strong
(257 bits in this case) as the single encryption.  A "double DES"
would only have the equivalent strength of roughly 57 bits (for two
rounds of 56 bit DES) where as 3-DES defeats the meet in the middle
attack resulting in 112 bit strenght for EDE two key mode or 168 bits
where all three keys are independent.

&gt; -- 
&gt; twalberg@mindspring.com


	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711213031</emailId><senderName>Henry Spencer</senderName><senderEmail>henry@spsystems.net</senderEmail><timestampReceived>2001-07-11 21:30:31-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, 11 Jul 2001, Michael H. Warfield wrote:
&gt; ...A "double DES"
&gt; would only have the equivalent strength of roughly 57 bits (for two
&gt; rounds of 56 bit DES) where as 3-DES defeats the meet in the middle
&gt; attack resulting in 112 bit strenght for EDE two key mode or 168 bits
&gt; where all three keys are independent.

Small correction:  it's 112 bits either way.  Even with three independent
keys, a meet-in-the-middle attack remains possible, but one side of the
attack has to deal with a pair of DES keys rather than just one.  The
difference between 56 and 112 is between costs of the order $100k and
costs that even NSA (probably) can't afford. 

                                                          Henry Spencer
                                                       henry@spsystems.net


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711215012</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-11 21:50:12-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, Jul 11, 2001 at 10:47:29AM +0100, Dale Amon wrote:
&gt;
&gt; On Tue, Jul 10, 2001 at 10:38:00PM +0200, peter k. wrote:
&gt; &gt;
&gt; &gt; 1) if an attacker has got some files which are on an (AES)
&gt; &gt; encrypted device, will he be able to decrypt the whole device?
&gt; 
&gt; It might help slightly, ie Known Plaintext Attack, but probably
&gt; not a lot.

If your cipher is vulnerable to a known plaintext attack much
faster than brute force, you should be using a better cipher.
Such an attack would be considered by cryptographers to be a
"break" of the cipher.

Computatational immunity to _chosen_ plaintext attacks is a
sine qua non of a good cipher.

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711220016</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-11 22:00:16-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>


&gt; If your cipher is vulnerable to a known plaintext attack much
&gt; faster than brute force, you should be using a better cipher.
&gt; Such an attack would be considered by cryptographers to be a
&gt; "break" of the cipher.
&gt; 
&gt; Computatational immunity to _chosen_ plaintext attacks is a
&gt; sine qua non of a good cipher.

is AES immune to chosen plaintext attacks?



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711232113</emailId><senderName>Mike Touloumtzis</senderName><senderEmail>miket@bluemug.com</senderEmail><timestampReceived>2001-07-11 23:21:13-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Thu, Jul 12, 2001 at 12:00:16AM +0200, peter k. wrote:
&gt; 
&gt; &gt; If your cipher is vulnerable to a known plaintext attack much
&gt; &gt; faster than brute force, you should be using a better cipher.
&gt; &gt; Such an attack would be considered by cryptographers to be a
&gt; &gt; "break" of the cipher.
&gt; &gt; 
&gt; &gt; Computatational immunity to _chosen_ plaintext attacks is a
&gt; &gt; sine qua non of a good cipher.
&gt; 
&gt; is AES immune to chosen plaintext attacks?

Yes, as far as anyone knows :-).  There are attacks
on reduced round variants (IIRC there is a 2^32 space,
2^63 time attack on 6-round AES, which may be the best
yet presented).  The original paper presenting Rijndael
as an AES candidate described the "Square attack" (Square
is an earlier cipher by Daemen and Rijmen), which is a
chosen-plaintext attack against 6 rounds in 2^32 space
and 2^72 time.

Full AES uses 10, 12, or 14 rounds depending on the length
of key and block sizes; there is no known attack on it.
Rijndael/AES is not the strongest-seeming of the historical
AES candidates; I think Bruce Schneier's prediction was
that a successful attack (i.e. better than brute force)
would be found on at least 10-round Rijndael before its
expected 30 year lifetime is up, but that the attack would
have no practical significance (e.g. it would be a chosen
plaintext attack requiring 2^96 plaintexts or something
like that).

miket

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712014408</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-12 01:44:08-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Wed, Jul 11, 2001 at 05:30:31PM -0400, Henry Spencer wrote:
&gt; On Wed, 11 Jul 2001, Michael H. Warfield wrote:
&gt; &gt; ...A "double DES"
&gt; &gt; would only have the equivalent strength of roughly 57 bits (for two
&gt; &gt; rounds of 56 bit DES) where as 3-DES defeats the meet in the middle
&gt; &gt; attack resulting in 112 bit strenght for EDE two key mode or 168 bits
&gt; &gt; where all three keys are independent.

&gt; Small correction:  it's 112 bits either way.  Even with three independent
&gt; keys, a meet-in-the-middle attack remains possible, but one side of the
&gt; attack has to deal with a pair of DES keys rather than just one.  The
&gt; difference between 56 and 112 is between costs of the order $100k and
&gt; costs that even NSA (probably) can't afford. 

	Welll....  As long as we are picking nits, that's roughly 113
bits due to the double encryption to perform the meet in the middle
attack.  That, plus the massive amount of memory required...  But we
are picking nits...  :-)  I think we both made the point about the double
encryption.  :-)

&gt;                                                           Henry Spencer
&gt;                                                        henry@spsystems.net

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712101343</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-12 10:13:43-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

&gt; Stephen wrote:
&gt; On Wed, Jul 11, 2001 at 06:40:45PM +0100, Dale Amon wrote:
&gt; &gt; 3) Encrypting sequentially with two different symmetric
&gt; &gt; keys of 256 bits will have an end result that has a
&gt; &gt; security of 256 &lt;= equivkeysize &lt;= 512.
&gt; 
&gt; The worst (and most obvious) example would be two algorithms X, Y where
&gt; X(P) -&gt; C
&gt; and
&gt; Y(C) -&gt; P
&gt; 

First, I'm finding this one of the more interesting discussions
that I've seen here, so in that spirit of friendly (and
perhaps insufficiently knowledgeable) argument for the fun of it...

Not to disagree too much, but I was assuming

	y = f(k1,f(k2,x)

where k1 != k2 and f(k,x) is the same in both cases. I
avoided  saying 

	y = f(k, g(k,x))

because as you point out, you can define f and g as 
inverses. I am also assuming symmetric keys.

Most writers seem to be saying that reapplication of the
same algorithm gains you 1b. I'm not sure I followed why
any of the common ciphers would lose bits by applying
them twice with different keys.

I accept that mainstream ciphers are fairly immune to
a known plaintext attack; I do know there was some 
discussion of this sort of attack against DES some
years back that put banks at risk.

Can you really say with confidence that if an attacker
knows a few megabytes of content on your encrypted disk
that they actually gain zero information about the
encryption key? Is this mathematically provable?

I'm not even suggesting enough information to break the
key, only whether the search space of possible values has
been constrained in any way at all.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712115329</emailId><senderName>"Michael H. Warfield"</senderName><senderEmail>mhw@wittsend.com</senderEmail><timestampReceived>2001-07-12 11:53:29-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Thu, Jul 12, 2001 at 11:13:43AM +0100, Dale Amon wrote:

&gt; First, I'm finding this one of the more interesting discussions
&gt; that I've seen here, so in that spirit of friendly (and
&gt; perhaps insufficiently knowledgeable) argument for the fun of it...

&gt; Not to disagree too much, but I was assuming

&gt; 	y = f(k1,f(k2,x)

&gt; where k1 != k2 and f(k,x) is the same in both cases. I
&gt; avoided  saying 

&gt; 	y = f(k, g(k,x))

&gt; because as you point out, you can define f and g as 
&gt; inverses. I am also assuming symmetric keys.

&gt; Most writers seem to be saying that reapplication of the
&gt; same algorithm gains you 1b. I'm not sure I followed why
&gt; any of the common ciphers would lose bits by applying
&gt; them twice with different keys.

	Most of them don't lose bits but, if you have a known plaintext
situation, you have a condition for a "meet in the middle" attack where
you attack the crypto system from both ends, encrypting the plaintext
with K2 and decrypting with K1 searching for matching results in the
middle.  Bruce Schneier covers this attack in "Applied Cryptography"
in discussing 3-DES and why a double application of DES is not significantly
stronger than a single application.  With enough memory, you effectively
only gain one bit of strength (you double the difficulty of busting it)
over the single encryption.

	So your example of:

 	y = f(k1,f(k2,x))

	Where k1 and k2 are two independent keys of length (n).

	Is only roughly equivalent to:

	y = f(Ka,x)

	Where ka is a key of length (n+1), not (2*n).

&gt; I accept that mainstream ciphers are fairly immune to
&gt; a known plaintext attack; I do know there was some 
&gt; discussion of this sort of attack against DES some
&gt; years back that put banks at risk.

&gt; Can you really say with confidence that if an attacker
&gt; knows a few megabytes of content on your encrypted disk
&gt; that they actually gain zero information about the
&gt; encryption key? Is this mathematically provable?

	Say with confidence, I think so.  Mathematically provable,
possibly, possibly not.  Math involves assumptions.  As long as
products of large primes are unfactorable, RSA will remain
unbreakable.  Does that prove it's unbreakable?  (Maybe) What happens
if a miracle occurs and some new profound revolution in mathematics
takes place?  (Oppss)  Would I say with confidence that it's secure?
(Yes)  Could I be wrong?  (Stop snickering)

&gt; I'm not even suggesting enough information to break the
&gt; key, only whether the search space of possible values has
&gt; been constrained in any way at all.

	That's what the cryptoanalysts are for...

&gt; -- 
&gt; ------------------------------------------------------
&gt; Use Linux: A computer        Dale Amon, CEO/MD
&gt; is a terrible thing          Village Networking Ltd
&gt; to waste.                    Belfast, Northern Ireland
&gt; ------------------------------------------------------

	Mike
-- 
 Michael H. Warfield    |  (770) 985-6132   |  mhw@WittsEnd.com
  (The Mad Wizard)      |  (678) 463-0932   |  http://www.wittsend.com/mhw/
  NIC whois:  MHW9      |  An optimist believes we live in the best of all
 PGP Key: 0xDF1DD471    |  possible worlds.  A pessimist is sure of it!


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712122557</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-12 12:25:57-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

On Thu, Jul 12, 2001 at 07:53:29AM -0400, Michael H. Warfield wrote:
&gt; 	Most of them don't lose bits but, if you have a known plaintext
&gt; situation, you have a condition for a "meet in the middle" attack where
&gt; you attack the crypto system from both ends, encrypting the plaintext
&gt; with K2 and decrypting with K1 searching for matching results in the
&gt; middle.  Bruce Schneier covers this attack in "Applied Cryptography"

One of those "must have books". I've heard about it for years. Maybe I
should wander the Dublin bookshops this weekend :-)

&gt; in discussing 3-DES and why a double application of DES is not significantly
&gt; stronger than a single application.  With enough memory, you effectively
&gt; only gain one bit of strength (you double the difficulty of busting it)
&gt; over the single encryption.
&gt; 
&gt; 	So your example of:
&gt; 
&gt;  	y = f(k1,f(k2,x))
&gt; 
&gt; 	Where k1 and k2 are two independent keys of length (n).
&gt; 
&gt; 	Is only roughly equivalent to:
&gt; 
&gt; 	y = f(Ka,x)
&gt; 
&gt; 	Where ka is a key of length (n+1), not (2*n).

So I was not really wrong in suggesting in my original
post that for a given keysize, applied twice,

	128 &lt;= effective keysize &lt;= 256

or better stated

	n &lt;= eks &lt;= 2n

It's just that the results fall at the bottom end.

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711194037</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-11 19:40:37-0400</timestampReceived><subject>Re: Discussion of differences between loop-AES and cryptoapi in</subject><body>

Herbert Valerio Riedel wrote:
&gt; what I'm not sure about, is the reason of the addition of
&gt; 
&gt;     if(S_ISREG(inode-&gt;i_mode)) bs = BLOCK_SIZE;
&gt; 
&gt; since BLOCK_SIZE is defined to be (1 &lt;&lt; 10) in fs.h

File backed loop device on 4k block size ext2 filesystem:

debian:/root # dd if=/dev/zero of=file1 bs=1024 count=10
10+0 records in
10+0 records out
debian:/root # losetup /dev/loop0 file1
debian:/root # dd if=/dev/zero of=/dev/loop0 bs=1024 count=10 conv=notrunc
dd: /dev/loop0: No space left on device                   &lt;=====ERROR=====
9+0 records in
8+0 records out
debian:/root # tune2fs -l /dev/hda1 2&gt;&amp;1| grep "Block size"
Block size:               4096
debian:/root # uname -a
Linux debian 2.4.6-pre5 #1 Thu Jun 21 14:27:25 EEST 2001 i686 unknown

Loop driver in kernel 2.4.5 is ok, loop driver in 2.4.6 is not.
 
&gt; finally, code to initialize the aes module have been hardcoded into loop.c
&gt; this is IMHO a rather static approach, since unflexible, if it wasn't for
&gt; this one, the modified loop.c could be easily used as drop in replacament
&gt; for the cryptoapi, but nevertheless it might be possible to use cryptoapi
&gt; with minor adaptions with the loop-AES modified loop-AES' loop.o. I'll
&gt; investigate this one a little bit more, this might finally allow for
&gt; backporting the cryptoapi to 2.2 by making use of jari's 2.2
&gt; modifications.

Your code uses loop_register_transfer(). I see no obvious reasons why
loop-AES' loop.o would prevent your code from registering cipher id 18
(LO_CRYPT_CRYPTOAPI). Only id 16 (LO_CRYPT_AES) is preregistered.

&gt; *)  loop-AES' aes.c can be seen as specialized case (don't take me too
&gt;     literal here please) of an AES cipher. whereas the cryptapi's loop
&gt;     filter makes use of the cryptoapi framework to chose among the
&gt;     available (not even required to be known in advance) cipher
&gt;     algorithms.

loop-AES' aes.[ch] are as portable as code can be. They work in Linux
kernel, Linux userspace, FreeBSD, OpenBSD, just about anywhere. They can
also be easily tested against published test vectors in userspace.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710155556</emailId><senderName>Ingo Oeser</senderName><senderEmail>ingo.oeser@informatik.tu-chemnitz.de</senderEmail><timestampReceived>2001-07-10 15:55:56-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>

On Tue, Jul 10, 2001 at 04:06:47PM +0200, Herbert Valerio Riedel wrote:
&gt; *) providing a general (kernel space) service for ciphers (block and
&gt;    stream), digests and closely related cryptographic algorithms.
 
 *) Provide them all in-place or provide at least in-place
    _variants_ of the ciphers
 
&gt; *) dynamic selection/loading of ciphers by strings (enums require
&gt;    recompilation when a new cipher is added and are less unique, string
&gt;    based identification may need a few more bytes for storage and logic, but it
&gt;    pays off in terms of flexibility); fits well with /proc interface
 
Good idea. Since recompiling user space for providing new drivers
is a clear lack of flexibility in every kind of user&lt;-&gt;kernel
space interfaces. 

This is a design BUG to be fixed, no "feature" to be considered!

&gt; *) support for algos implemented in hardware (the actual API has already
&gt;    provisions for atomic and non-atomic encryption functions, and sw vs.
&gt;    hw based implementations)

Or support for (crypto) co-processors. I'm building an API for
DSPs attached to hosts at the moment and crypto is one of our
possible applications. Looking forward to integreate them.

&gt; *) syscalls to allow user space to encrypt data by cryptoapi (n.b. is
&gt;    surely not efficient, but rather meant for the case, where the user
&gt;    space wants to make use of hardware implementation, or maybe to test
&gt;    the ciphers)

Or another idea: Have the ciphers available for compilation into
user space tools without any change. Or at least have an
established library using these modules without any lack of
speed. After all, they are just normal ELF objects ;-)

&gt; which other subsystems can benefit from this:
&gt; 
&gt; *) encrypted network encapsulation (see cipe and freeswan)
&gt; 
&gt; *) encrypting loop filter (that's the only known use of the cryptoapi as
&gt;    of now)
&gt; 
&gt; *) filesystems with integrated encryption support (CFS perhaps?)
&gt; 
&gt; *) swapspace encryption, or for the paranoid ones, encrypting (part of
&gt; the) RAM :)

This all would be easier to implement with in-place encryption,
a flag stating, that this page is encrypted and a special
mapping handling this.

Regards

Ingo Oeser
-- 
Use ReiserFS to get a faster fsck and Ext2 to fsck slowly and gently.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710183528</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-10 18:35:28-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>

On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; 	* 2.2 not readable on 2.4
&gt; 	  Question: is this really unknown or are the systems
&gt; 	  in question ones that were set up with the old
&gt; 	  absolute block number problem? If not, perhaps
&gt; 	  it is an issue for study using a small test case.

I'm the one who reported this problem. I can state with one hundred
percent certainty that they were set up with relative block number system.
I dont think anyone in their right mind would setup any crypto fs with
absolute block numbers anymore.

It may be related to the fact that losetup no longer seems to be able to
setup the same keylength under 2.4 (where it is variable) as it did under
2.2 (where it is fixed).

Anyone can easily test this case.

&gt; 	* performance loss due to non-reentrancy
&gt; 	  Presumably if Herbert fixes the SMP issue, he
&gt; 	  sorts this as well. I might note that I play
&gt; 	  my Mozart CD on this laptop while editing on a
&gt; 	  loopback AES partition and have no problems.

Try copying from one loopback'd fs to another loopback'd fs. It magnifies
the problem VERY obvious.

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710183823</emailId><senderName>Dan Hollis</senderName><senderEmail>goemon@anime.net</senderEmail><timestampReceived>2001-07-10 18:38:23-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>

On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; We are not going to see 5 loadable modules providing different services
&gt; each with its' own implimentation of AES.

It is interesting to note that many drivers contain their own copy of
tables (eg crc32, others) which are duplicated over and over and over in
numerous other drivers.

Consolidating such tables would not only reduce bloat but would also
reduce error -- some drivers have contained erroneous crc tables(!)

-Dan


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710185337</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-10 18:53:37-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>

Herbert Valerio Riedel wrote:
&gt; On Tue, 10 Jul 2001, Dale Amon wrote:
&gt; &gt;       * BUG: block size problem
&gt; &gt;         Has a current work around, Herbert has stated
&gt; &gt;         he will soon have it fixed in code.
&gt; this one has been fixed, or better, I've already implemented a workaround
&gt; quite some weeks ago, it's been available in the cryptoapi branch, but
&gt; this one requires to modify the existing kernel loop.c module, (just like
&gt; loop-AES does, btw!!)

Wrong! Loop-AES does not modify your kernel sources. It modifies a copy of
your kernel's loop.c in its own compile directory.
 
Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707025319</emailId><senderName>Adam Warner</senderName><senderEmail>lists@consulting.net.nz</senderEmail><timestampReceived>2001-07-07 02:53:19-0400</timestampReceived><subject>Re: Crypto Choices</subject><body>


Hi Stuart,

Just joined the list so inline responding is difficult.

You wrote:

	I have decided (for the moment) to standardize on the Mandrake 8.0
distribution of Linux for my installation. I have also read much more
about the "International Patch" and its capabilities, and simply having
an encrypted filesystem is not enough for me now. While that is the
first and foremost issue I wish to tackle at the moment, I am interested
in why some people the think the entire International Patch is garbage,
and useless. I am told it does work to some extent.

I reply:

It is not garbage and useless. My advice would be to encrypt a separate
partition. Then you don't have to worry about the underlying filesystem
(because there won't be any).

You wrote:

	In the Mandrake arena, does anyone know of a site which is keeping
patches and such going for Mandrake folks? Does anyone know what
Mandrakes position on supporting crypto will be in current and future
releases (as Debian is rumored to be supporting crypto now).

I reply:

It's pretty much irrelevant. You're the one who has to patch the kernel
and do whatever else in necessary as set out here:

http://encryptionhowto.sourceforge.net/Encryption-HOWTO.html

You may want to consider the overall security of your distribution of
choice though. I trust Debian or Redhat to provide security patches in a
timely manner.

&gt;I have gotten a spare HD to use as a "development" HD for this crypto
project.

Good. Then it will be easy to create a spare partition for testing.


You wrote:

I started by downloading the 2.4.5 source for Mandrake's kernel, and
am going to build it once I get the crypto filesystem stuff working
(rebuilding mount, umount, losetup, and loop.o currently).


I reply:

First mistake. You want to start with the "official" Linus kernel source
available from here:

http://www.kernel.org/pub/linux/kernel/v2.4/

And then patch the kernel using the patch available from here:

http://www.kernel.org/pub/linux/kernel/crypto/v2.4/

See my next post. I'm sure someone will be able to help with the
resulting patching failure.

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010707072823</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-07 07:28:23-0400</timestampReceived><subject>RE: Crypto Choices</subject><body>

Dear Sir:

1) I just downloaded/compiled/installed the 2.4.6 kernel from
(http://www.kernel.org/pub/linux/kernel/v2.4/); I am standardizing on using
the kernel.org kernel distributions from this day forward, no matter what
distribution of Linux I use
2) I am going to grab the crypto patches from
(http://www.kernel.org/pub/linux/kernel/crypto/v2.4/); and install them
later tonight
3) I will download and read
http://encryptionhowto.sourceforge.net/Encryption-HOWTO.html

You referred to using a raw partition, perhaps I am not articulating my
ideas properly, or worse not understand your response due to my own
technical lack with regard to the crypto stuff (I am a "crypto" newbie, but
do have 15 years of Unix Admin experience).

	Normally a raw partition would have a filesystem placed on it, my initial
presumptions were you then place encryption on the filesystem, and I have
now learned that after adding encryption a filesystem must be laid down
again, thus adding a second layer of filesystem. I do not see the need for
this, and have been advised that it is better to encrypt a raw partition,
and then place a filesystem on top of the encrypted raw partition. Do I
understand you correctly? Presuming what I understand is what you were
recommending; do you see any problem with the filesystem that is going to
overlay the encryption being a ReiserFS filesystem?

	If I understand all that you are saying with regard to the above; then I am
presuming all I must do is wait for a resolution to the issues with in
pursuit of patching 2.4.6, and I will be on my way.

	One person spoke in an email previously of using a smartcard and a pass
phrase. I would like to expand on that a bit, and ask if anyone has thought
of or tried using one of these USB or parallel port "eeprom" devices, which
allows you to read it using a password. I have two USB ports on my laptop,
and think that using two USB "keys" would be a nice way to avoid typing, and
have a healthy level of security (or one USB key and one smartcard, etc.)

Understanding I have not yet looked at the source to the International
Patches, I wonder how difficult would it be have a "single location" to add
code to pass a key read from a smart card or other device to the rest of the
International Patch (or its entire API) for use whenever it needed the key.

	Predicated upon such a technology, we might even be able to integrate into
the kernel a methodology of checking for a smart card's presence in general,
thus taking an action (locking the keyboard, blanking the video display,
hibernating the entire machine, etc.) upon detection that the user had
removed the smart card, or USB device from the computer. Imagine, you are
using the computer, your done, so you just pull your smart card or USB key
out of its location, and the computer hibernates, shuts down, or just locks
the keyboard and blanks the screen automatically!

	I am a laptop user, and currently do not have a manner to read smart cards
on my laptop. Although, if I did have a manner to read smart cards on my
laptop, it would be cool, since I am eventually going to get issued a smart
card ID badge from the US Department of Defense ("US DOD") anyway (I am a
Navy Reservist). That would make a wonderful key, as no one worldwide ought
have the same information on it as me, as part of the information is medical
history. I was told at one point, that the US DOD had chosen some sort of
non-standard standard (it is a government standard, but not industry
standard as I understand) to use with their smartcards. Is this true? Can an
industry standard smartcard reader read a US DOD smartcard? Is it possible
that if a US DOD smartcard was placed in an industry standard smartcard
reader, that it would read the card dependably although never in an
unencrypted manner, thus a user could use the encrypted data read as a key
as well?

	Presuming for the sake of argument that I had a "SecureID" token (one with
the changing numbers on it), is there a way to use it as a key for the
crypto package?


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Friday, July 06, 2001 11:30 PM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Adam Warner
Sent: Friday, July 06, 2001 7:53 PM
To: linux-crypto@nl.linux.org
Subject: Re: Crypto Choices


Hi Stuart,

Just joined the list so inline responding is difficult.

You wrote:

        I have decided (for the moment) to standardize on the Mandrake 8.0
distribution of Linux for my installation. I have also read much more
about the "International Patch" and its capabilities, and simply having
an encrypted filesystem is not enough for me now. While that is the
first and foremost issue I wish to tackle at the moment, I am interested
in why some people the think the entire International Patch is garbage,
and useless. I am told it does work to some extent.

I reply:

It is not garbage and useless. My advice would be to encrypt a separate
partition. Then you don't have to worry about the underlying filesystem
(because there won't be any).

You wrote:

        In the Mandrake arena, does anyone know of a site which is keeping
patches and such going for Mandrake folks? Does anyone know what
Mandrakes position on supporting crypto will be in current and future
releases (as Debian is rumored to be supporting crypto now).

I reply:

It's pretty much irrelevant. You're the one who has to patch the kernel
and do whatever else in necessary as set out here:

http://encryptionhowto.sourceforge.net/Encryption-HOWTO.html

You may want to consider the overall security of your distribution of
choice though. I trust Debian or Redhat to provide security patches in a
timely manner.

&gt;I have gotten a spare HD to use as a "development" HD for this crypto
project.

Good. Then it will be easy to create a spare partition for testing.


You wrote:

I started by downloading the 2.4.5 source for Mandrake's kernel, and
am going to build it once I get the crypto filesystem stuff working
(rebuilding mount, umount, losetup, and loop.o currently).


I reply:

First mistake. You want to start with the "official" Linus kernel source
available from here:

http://www.kernel.org/pub/linux/kernel/v2.4/

And then patch the kernel using the patch available from here:

http://www.kernel.org/pub/linux/kernel/crypto/v2.4/

See my next post. I'm sure someone will be able to help with the
resulting patching failure.

Regards,
Adam



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709095459</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 09:54:59-0400</timestampReceived><subject>Bulding the crypto partition</subject><body>

Crypto list members:

        Here is what I did to create my crypto partition, anyone have any
recommendations?

a) dd if=/dev/urandom of=/dev/hda3 bs=524288
b) losetup /dev/loop0 /dev/hda3
c) losetup -e aes -k 256 /dev/loop1 /dev/loop0
d) entered my pass phrase
e) mkreiserfs /dev/loop1
f) mount /dev/loop1 /home

I am not sure that this is the best way for me to do my encryption. I would
like to be able to a "dd" backup of the entire partition, but, if doing so
would foul the encrypted partition on restore, I am prepared to create a
file (the same size as the /dev/hda3 partition), and do the encryption into
the file. Can I do a "dd" backup the way I set it up above?

        Currently I backup by doing:

        hdparm -d1 -c3 -m16 -X66 -k1 /dev/hda
        hdparm -d1 -c3 -m16 -X66 -k1 /dev/hdc
dd if=/dev/hda of=/dev/hdc bs=524288

/dev/hda1 19GB W2K
/dev/hda2   3GB Linux (root partition)
/dev/hda3   7GB Linux (/home)

        IBM 32GB 2.5" HD


Questions, predicated on steps a-f above:

a) If I wish to change the pass phrase I choose above, what must I do?
b) How do I automatically mount the partition when I boot up now?
c) When (in the boot up process) will it ask me for the pass phrase when I
am booting up?
d) Automated boot up (eventually) would be something I would like, so, how
difficult will it be for me to interface reading the pass phrase off a USB
"token" plugged into the back of the system, and passing that pass phrase to
the Crypto API?
e) Would it be hard to modify the Crypto API to get the pass phrase from a
hardware device (haven't look at the crypto API source as yet)?

If someone provides a concise set of rules, I will write a software to
generate pass phrases at random.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 2:24 AM


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709112307</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-09 11:23:07-0400</timestampReceived><subject>RE: password on smart-cards</subject><body>

Mr. Bolten:

	Actually, Aladdin sells a product called the "etoken", and it has rsa-1024
algorithm built into it.

	I would love to look at your code, and try to adapt it to allow a user to
log in using the Aladdin USB key fob. As well, I would not mind trying to
adapt (or work with the authors to adapt) the Crypto API to support such a
key. It completely allows for automation of opening up a system.

	Imagine this:

	You plug the Aladdin into your laptop, and boot up Linux, they logs you on,
the key also is used as a pass phrase for mounting crypto partitions etc.
Amazing, no? I would like to get one of their software development kits, as
CD9 now includes Linux drivers. Forget the possibilities of using it with
W2K to do logging on (and not having to type a password) as well.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 09, 2001 4:18 AM

-----Original Message-----
From: owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]On Behalf Of Bolten, Dierk
Sent: Monday, July 09, 2001 3:29 AM
To: linux-crypto@nl.linux.org
Subject: password on smart-cards

Hi!

I followed the discussion a little, and wanted to point you guys to a
program I wrote for the iButton smart-card. It is a PAM module
that authenticates users by a challenge/response approach using RSA. The
private key is generated and stored on the iButton, the public
part is stored on the computer (in /etc/iButton.conf). If a user wants to
authenticate to the system, a random number is generated and encrypted using
the public key. This is then sent to the iButton. The iButton decrypts it
(using the private key) and sends the SHA-1 hash of it back. The host also
calculates the SHA-1, if they match : PAM_SUCESS and login is allowed.

The tool consists of a C configuration tool, the pam-module and a Java
applet to be executed on the iButton. _Now_ the interesting part for the
ongoing discussion: I also included support to store a 200 character long
password on the iButton. It is also possible to let this password be
generated randomly on the iButton. (The iButton comes with a random number
generator implemented, it measures the thermal noise across some resistor,
so that should give you fairly good random numbers!). I initially wanted
this password to be used as the password for the crypto-loopback device, but
I never had time to implement this. I think this should be farily easy to
do. Mount and losetup would need to be patched slightly.

I would like to do this myself, but in the moment I'm too busy with my PhD.
But somebody of you guys might want to have a look on it and do the
necessary changes to mount, etc. If somebody wants to do it, I would be
happy to get a working patch mailed, so that I can include it into the tar
file. 200 characters (not letters but of type char, i.e. 1- 255) should be
good enough for a password and no need to memorize them!

Anyways, the tar -file can be found under
:http://www-users.rwth-aachen.de/dierk.bolten/pam_ibutton.html

Hope you find it interesting.

Cheers,
Dierk


Institute of Materials in Electrical Engineering
    and Information Technology II
Sommerfeldstr. 24, 52074 Aachen
voice: ++49-241-80 7822
fax: ++49-241-8888 300
email: bolten@iwe.rwth-aachen.de
web: http://www.iwe.rwth-aachen.de


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709130013</emailId><senderName></senderName><senderEmail>conference</senderEmail><timestampReceived>2001-07-09 13:00:13-0400</timestampReceived><subject>Your Monthly Update!                         24607</subject><body>

&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Take Control Of Your Conference Calls&lt;/TITLE&gt;
&lt;META http-equiv=Content-Type content="text/html; charset=windows-1252"&gt;
&lt;META content="MSHTML 5.50.4134.600" name=GENERATOR&gt;&lt;/HEAD&gt;
&lt;BODY vLink=#c0c0c0 link=#c0c0c0 bgColor=#000000 leftMargin=0&gt;&lt;FONT
face=arial,helvetica&gt;
&lt;P&gt;
&lt;CENTER&gt;
&lt;TABLE width=600 border=0&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD align=middle&gt;&lt;B&gt;&lt;FONT color=#999999 size=6&gt;Long Distance
      Conferencing&lt;BR&gt;Only &lt;U&gt;18 Cents&lt;/U&gt; Per
Minute&lt;/B&gt;&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;FONT color=#ff0000 size=5&gt;&lt;B&gt;Connects Up To 100 Participants!&lt;/B&gt;&lt;/FONT&gt;
&lt;P&gt;
&lt;TABLE width=350 border=0&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD&gt;&lt;FONT color=#999999 size=3&gt;&lt;B&gt;
      &lt;LI&gt;No setup fees
      &lt;LI&gt;No contracts or monthly fees
      &lt;LI&gt;Call anytime, from anywhere, to anywhere
      &lt;LI&gt;International Dial In 18 cents per minute
      &lt;LI&gt;Simplicity in set up and administration
      &lt;LI&gt;Operator Help available 24/7 &lt;/B&gt;&lt;/FONT&gt;&lt;/LI&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;
&lt;TABLE width=500 border=0&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD align=middle&gt;&lt;FONT color=#ff0000 size=60&gt;&lt;B&gt;&lt;FONT size=5&gt;Get the best
      quality, the easiest to use, and lowest rate in the
      industry.&lt;/B&gt;&lt;/FONT&gt;&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;
&lt;TABLE width=400 border=0&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD align=middle&gt;&lt;FONT color=#999999 size=4&gt;If you like saving money, fill
      out the form below and one of our consultants will contact
  you.&lt;/FONT&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;&lt;FONT color=#999999 size=2&gt;Required Input Field&lt;FONT color=#ff0000
size=2&gt;*&lt;/FONT&gt;&lt;/FONT&gt;
&lt;P&gt;
&lt;TABLE cellSpacing=0 borderColorDark=#333300 cellPadding=3 width=600
borderColorLight=#ffffcc&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD align=middle&gt;
      &lt;FORM action=mailto:inbox255@excite.com?subject=Conference_Inquiry
      method=post encType=text/plain&gt;
      &lt;TABLE width="100%"&gt;
        &lt;TBODY&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000
          size=2&gt;Name*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=NAME&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Web
            Address*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT value=http:// name=URL&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Company
            Name*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=COMPANY_NAME&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;
            State*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT size=2 name=STATE&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Business
            Phone*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=BUS_PHONE&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Home
            Phone&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=HOME_PHONE&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Email
            Address*&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=EMAIL&gt;&lt;/TD&gt;&lt;/TR&gt;
        &lt;TR&gt;
          &lt;TD align=right width="50%"&gt;&lt;FONT
            face="Arial, Helvetica, sans-serif" color=#ff0000 size=2&gt;Type of
            Business&lt;/FONT&gt;&lt;/TD&gt;
          &lt;TD&gt;&lt;INPUT name=TYPE_OF_BUSINESS&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
      &lt;P&gt;&lt;INPUT type=submit value="Submit Information" name=submit&gt;
    &lt;/FORM&gt;&lt;/P&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;
&lt;P&gt;
	&lt;P align=center&gt;&lt;FONT color=999999 face="Arial, Helvetica, sans-serif" size=5&gt;
	This could be your ad!&lt;/FONT&gt;&lt;/B&gt;&lt;FONT face="Arial, Helvetica, sans-serif" size=2&gt;
	&lt;BR&gt;&lt;A href="mailto:inbox855@excite.com?subject=Direct Marketing"&gt;
	&lt;FONT color=ff0000&gt;Click here to e-mail us your contact info&lt;/A&gt;.&lt;/FONT&gt;&lt;/P&gt;
&lt;TABLE width=500&gt;
  &lt;TBODY&gt;
  &lt;TR&gt;
    &lt;TD align=middle&gt;&lt;FONT face="Arial, Helvetica, sans-serif" color=#999999
      size=1&gt;This email is to those persons that have contacted Conference Calls
      for Less regarding available services or product information. If this
      email is reaching you in error and you feel that you have not contacted
      us, &lt;FONT color=#666666&gt;&lt;A
      href="mailto:rem0venow@excite.com?subject=Remove_Conferencing"&gt;Click
      here&lt;/A&gt;&lt;/FONT&gt;. We will gladly remove you from our mailing
      list.&lt;/FONT&gt;&lt;BR&gt;&lt;/TD&gt;&lt;/TR&gt;&lt;/TBODY&gt;&lt;/TABLE&gt;&lt;/P&gt;&lt;/CENTER&gt;&lt;/FONT&gt;&lt;/BODY&gt;&lt;/HTML&gt;




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709172717</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-09 17:27:17-0400</timestampReceived><subject>work on international kernel crypto add-on</subject><body>


well... since there still seems to be some demand for the int. crypto...

&gt;&gt;         Can someone tell me:
&gt;&gt;
&gt;&gt; a) What is broken (specifically)
&gt;&gt; b) What versions are known (test) to have such failures
&gt;&gt; c) How definitively does it impact the operation of the remainder of the
&gt;&gt; I-patch?
&gt;&gt; d) Why create simply another piece of software as a work around (Loop AES
&gt;&gt; package) when Mr. Ruusu and others could work with the authors of the
&gt;&gt; I-patch to effectuate a power and bug-free release with additional features?
&gt;
&gt; http://mail.nl.linux.org/linux-crypto/2001-06/msg00014.html
&gt; http://www.cs.helsinki.fi/linux/linux-kernel/2001-26/0589.html
&gt; http://mail.nl.linux.org/linux-crypto/2001-07/msg00010.html

...the main showstopper, i.e. the non-reentrant code, should have been
fixed, I'm still doing stress tests, but I'm optimistic to have solved
this one... I'll release cryptoapi-2.4.6-hvr2 as soon as I've finished
ensuring I didn't break any major thing...

what's left is the need to do aesthetic stuff, and a bit of optimizations,
the re-inclusion of the cipher vector testsuite, and the option to
integrate the cryptoapi into a monolithic, i.e. non-modular, kernel...

also the creation of user space tools for converting encrypted volumes to
other encryptions/passphrases are planned...

I've mailed alex in order to coordinate with him, I'm still waiting for a
reply, in the meantime I'll do some further development, before officially
announcing this 'new' effort to bring life again into the international
crypto linux kernel add-on...

I've setup a CVS repository, and there'll be some webspace to host this
project, since my time is restricted, I _really_ hope to get some help for
this project, so if you want to have the international crypto
patch(/add-on) maintained, step forward and help to
improve/maintain/test/document it... there are plenty of tasks available
for everyone... :)

ps: the crypto api is not bloated at all, the modules are far below
 100k ;-)

...this is on ia/32 btw:

core:

-rw-rw-r--    1 hvr      hvr          6524 Jul  9 18:58 cryptoapi.o
-rw-rw-r--    1 hvr      hvr          2816 Jul  9 18:58 cryptoloop.o

ciphers:

-rw-rw-r--    1 hvr      hvr         20948 Jul  9 18:58 cipher-aes.o
-rw-rw-r--    1 hvr      hvr         10420 Jul  9 18:58 cipher-blowfish.o
-rw-rw-r--    1 hvr      hvr         15560 Jul  9 18:58 cipher-des-ede3.o
-rw-rw-r--    1 hvr      hvr         14880 Jul  9 18:58 cipher-des.o
-rw-rw-r--    1 hvr      hvr          6676 Jul  9 18:58 cipher-dfc.o
-rw-rw-r--    1 hvr      hvr          4112 Jul  9 18:58 cipher-dummy.o
-rw-rw-r--    1 hvr      hvr          5564 Jul  9 18:58 cipher-idea.o
-rw-rw-r--    1 hvr      hvr         12224 Jul  9 18:58 cipher-mars.o
-rw-rw-r--    1 hvr      hvr          4864 Jul  9 18:58 cipher-rc5.o
-rw-rw-r--    1 hvr      hvr          6784 Jul  9 18:58 cipher-rc6.o
-rw-rw-r--    1 hvr      hvr         14232 Jul  9 18:58 cipher-serpent.o
-rw-rw-r--    1 hvr      hvr         37156 Jul  9 18:58 cipher-twofish.o

regards,
-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709225039</emailId><senderName>"Tim R. Young"</senderName><senderEmail>try@lyang.net</senderEmail><timestampReceived>2001-07-09 22:50:39-0400</timestampReceived><subject></subject><body>

subscribe linux-crypto try@lyang.net

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010709233525</emailId><senderName>Emil</senderName><senderEmail>el@la.mine.nu</senderEmail><timestampReceived>2001-07-09 23:35:25-0400</timestampReceived><subject>Re: README confusing in loop-AES-v1.2d</subject><body>

On 9 July 2001, Tim R. Young &lt;try@lyang.net&gt; wrote:
&gt; Before you attempt to build replacement loop.o driver, you *must* configure
&gt; and compile your kernel so that CONFIG_MODULES=y and CONFIG_BLK_DEV_LOOP=n.
&gt; Also, CONFIG_KMOD=y is recommended but not required (kernel 2.0 doesn't have
&gt; CONFIG_KMOD, set CONFIG_KERNELD=y instead). Configuring your kernel so that
&gt; loop driver is built-in (CONFIG_BLK_DEV_LOOP=y) or module
&gt; (CONFIG_BLK_DEV_LOOP=m) will *not* work.
&gt; 
&gt; Do I need to set
&gt; CONFIG_BLK_DEV_LOOP=n
&gt; or
&gt; CONFIG_BLK_DEV_LOOP=y
&gt; ?
&gt; 
&gt; I guess it should be CONFIG_BLK_DEV_LOOP=m?
&gt; 
&gt; The first and last sentences are conflicting.

CONFIG_BLK_DEV_LOOP=n

I guess for some people even if you use '*' to underline the 'not' word
is not enough.

-- 
								Regards,
								Emil
--
"The reasonable man adapts himself to the world; the unreasonable one
persists in trying to adapt the world to himself.  Therefore all progress
depends on the unreasonable man."				   - Shaw

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710000954</emailId><senderName>"peter k."</senderName><senderEmail>spam-goes-to-dev-null@gmx.net</senderEmail><timestampReceived>2001-07-10 00:09:54-0400</timestampReceived><subject>spambox == me</subject><body>

sorry, accidently used the wrong mail address



Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710092744</emailId><senderName>JML</senderName><senderEmail>jlyon@iprimus.com.au</senderEmail><timestampReceived>2001-07-10 09:27:44-0400</timestampReceived><subject>unsuscribe</subject><body>

unsuscribe please


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010710185347</emailId><senderName>Dale Amon</senderName><senderEmail>amon@vnl.com</senderEmail><timestampReceived>2001-07-10 18:53:47-0400</timestampReceived><subject>Re: I-patch problem statement</subject><body>

On Tue, Jul 10, 2001 at 11:38:23AM -0700, Dan Hollis wrote:
&gt; It is interesting to note that many drivers contain their own copy of
&gt; tables (eg crc32, others) which are duplicated over and over and over in
&gt; numerous other drivers.
&gt; 
&gt; Consolidating such tables would not only reduce bloat but would also
&gt; reduce error -- some drivers have contained erroneous crc tables(!)

I remember seeing one of those tables inside the util-linux
source code as well!

-- 
------------------------------------------------------
Use Linux: A computer        Dale Amon, CEO/MD
is a terrible thing          Village Networking Ltd
to waste.                    Belfast, Northern Ireland
------------------------------------------------------

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010711091314</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-11 09:13:14-0400</timestampReceived><subject>RE: problems with crypto and 2.4.3</subject><body>

Dear Sir or Ma'am:

	I have several suggestions to make, and I hope they help with your issues.
I had severe trouble trying to make the 2.4.3.1 patch work with my RH
installation (or Mandrake, an RH derivative).

	First of all I have been a supporter of RedHat for the longest time, due
mostly in part to IBM's support of RedHat, and it has been a supported
distribution from most of the major software vendors (Oracle, Informix,
etc.). However, recently I downloaded Linux-Mandrake 8.0, and have been
extremely pleasantly surprised. It is a very "GUIized" Linux, and is very
easy to administer and manage. If you like RedHat, this is RedHat on
steroids. I initially switched as I wanted to try the ReiserFS JFS, and then
I liked the OS in general. Even though most likely at this juncture I am
eventually going to run ext3 as my JFS, I still am planning to stick with
Mandrake once I verify that the Oracle install I am going try will work.

	Even though I hate the idea, I switched from the distributions kernel to a
standard "Linus" kernel from kernel.org, and further moved to 2.4.6 which
has been working quite well. Once I did this, I was able to install and use
the 2.4.6 I-patch (International Patch), which as I am sure you are now
aware from reading the list is the subject of a hot debate as to its future
and how it will be repaired and reworked to be made better.

	Eventually, after making sure I had all the right options "ticked" off in
the "make xmenuconfig" screens, I was able to use crypto. I am now worried
about its stability until some further patches come out as a result of the
blocking factor issues, but once the patches stabilize in the next week or
two, I intend to run it full boat.

	Another option is the loop-AES software, which, while I am not using at the
moment, since I do not NEED crypto right now, I will wait for the patch. But
I am sure Mr. Ruusu will contact you off list to tell you about it, since he
is its author.


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's
free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Wednesday, July 11, 2001 1:05 AM

 -----Original Message-----
From: 	owner-linux-crypto@nl.linux.org
[mailto:owner-linux-crypto@nl.linux.org]  On Behalf Of Tuukka Toivonen
Sent:	Wednesday, July 11, 2001 12:59 AM
To:	linux-crypto@nl.linux.org
Subject:	problems with crypto and 2.4.3

I patched my 2.4.0 kernel up to 2.4.3 and applied
-rw-r--r--    1 root     ftp        274007 Jul  6 18:34
patch-int-2.4.3.1.bz2
this patch. Everything seemed to be ok after compiling and installing the
new kernel. Then I downloaded
-rw-r--r--    1 tuukkat  tuukkat   1299742 Jul 11 10:41
util-linux-2.11b.tar.gz
and applied
-rw-r--r--    1 root     root        46208 Jul  6 18:41
util-linux-2.11b.patch
and compilation went fine. Copied binaries in their places, but I get

[root@s-inf-pc24 /]# losetup -e blowfish /dev/loop0 /.crypto
Available keysizes (bits): 128 160 192 256
Keysize: 160
Password :
Password :
The cipher does not exist, or a cipher module needs to be loaded into the
kernel
ioctl: LOOP_SET_STATUS: Invalid argument

[root@s-inf-pc24 /]# cat /proc/modules
loop                    8576   0 (autoclean)
parport_pc             14192   1 (autoclean)
lp                      5360   0 (autoclean) (unused)
parport                15936   1 (autoclean) [parport_pc lp]
cipher-blowfish         9344   0 (unused)
cryptoapi               2784   2 [cipher-blowfish]
nls_iso8859-1           2864  22 (autoclean)
...

I also tried other ciphers with same results. This is redhat 6.2 and
libc-2.1.3.so. AMD Athlon 800 MHz, 256 MB main memory. I'm using devfs (if
that matters).


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712104915</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-12 10:49:15-0400</timestampReceived><subject>Re: Discussion of differences between loop-AES and cryptoapi in</subject><body>

Jari Ruusu wrote:
&gt; Herbert Valerio Riedel wrote:
&gt; &gt; finally, code to initialize the aes module have been hardcoded into loop.c
&gt; &gt; this is IMHO a rather static approach, since unflexible, if it wasn't for
&gt; &gt; this one, the modified loop.c could be easily used as drop in replacament
&gt; &gt; for the cryptoapi, but nevertheless it might be possible to use cryptoapi
&gt; &gt; with minor adaptions with the loop-AES modified loop-AES' loop.o. I'll
&gt; &gt; investigate this one a little bit more, this might finally allow for
&gt; &gt; backporting the cryptoapi to 2.2 by making use of jari's 2.2
&gt; &gt; modifications.
&gt; 
&gt; Your code uses loop_register_transfer(). I see no obvious reasons why
&gt; loop-AES' loop.o would prevent your code from registering cipher id 18
&gt; (LO_CRYPT_CRYPTOAPI). Only id 16 (LO_CRYPT_AES) is preregistered.

I forgot one thing: if a cipher module is separated from loop driver code,
cipher module locking is completely broken. This is a bug in Linus released
loop.c code. In loop-AES, the AES cipher code and 'main' loop code are
linked together, so this bug does not affect the AES cipher in loop-AES.
Things go wrong only if external non-AES cipher module is registered.

This bug was reported to linux-kernel mailing list by Ingo Rohloff on 21
June 2001. Subject was "Loop encryption module locking bug (linux-2.4.5)."
Just seach LKML archives to read about it.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712140711</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-12 14:07:11-0400</timestampReceived><subject>Re: (AES) loopback crypto questions</subject><body>

"Michael H. Warfield" wrote:

&gt; ... if you have a known plaintext
&gt; situation, you have a condition for a "meet in the middle" attack where
&gt; you attack the crypto system from both ends, encrypting the plaintext
&gt; with K2 and decrypting with K1 searching for matching results in the
&gt; middle.  Bruce Schneier covers this attack in "Applied Cryptography"
&gt; ...

One online explanation is:
http://www.freeswan.org/freeswan_trees/freeswan-1.91/doc/glossary.html#meet

For others, follow the "other crypto glossaries" links at the top of that
file.

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010712220046</emailId><senderName>Sandy Harris</senderName><senderEmail>sandy@storm.ca</senderEmail><timestampReceived>2001-07-12 22:00:46-0400</timestampReceived><subject>Re: Using Crypto under LM8+2.4.6</subject><body>

"IT3 Stuart B. Tener, USNR-R" wrote:
&gt; 
&gt; Mr. Harris:
&gt; 
&gt;         Particularly what section of the Code of Federal Regulations, or what rule
&gt; are you referring to? I cannot research the law from your words. Please
&gt; direct me to the precise piece of legislation you are referring too, and the
&gt; government agency responsible for its implementation and execution.

In the US, it is the Bureau of Export Administration (BXA) in the Commerce Dep't.
http://www.bxa.doc.gov/Encryption/

They took over from the State Department's ITAR (international Traffic in Arms
Regulation) section a few years vack. 

The EFF's document archive on the issue is:
http://www.eff.org/Privacy/ITAR_export/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010713171239</emailId><senderName>Jari Ruusu</senderName><senderEmail>jari.ruusu@pp.inet.fi</senderEmail><timestampReceived>2001-07-13 17:12:39-0400</timestampReceived><subject>Re: Kernel 2.4.6 and crypto 2.4.3.1 will not mount file systems</subject><body>

John Bass wrote:
&gt; Where do I find both/either?

loop-AES:   http://loop-aes.sourceforge.net/
cryptoapi:  http://www.hvrlab.org/pub/crypto/

I recommend loop-AES, as it is the most hassle free solution available.

Regards,
Jari Ruusu &lt;jari.ruusu@pp.inet.fi&gt;

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010716123753</emailId><senderName></senderName><senderEmail>gshekar</senderEmail><timestampReceived>2001-07-16 12:37:53-0400</timestampReceived><subject>Re: WARNING!!! DON'T READ THIS IF YOU DON'T LIKE MONEY</subject><body>

Don't  send this kind of junk mails on linux-crypto list please !!

Regards
  Girish


"Urs Stettler" &lt;mma@e-wideweb.com&gt; on 07/16/2001 05:03:43 AM

Please respond to mma@e-wideweb.com

To:   "linux-crypto@nl.linux.org" &lt;linux-crypto@nl.linux.org&gt;
cc:    (bcc: Girish C Shekar/India/IBM)
Subject:  WARNING!!! DON'T READ THIS IF YOU DON'T LIKE MONEY




WOW THIS REALLY WORKS!!!

Dear Friend &amp; Future Millionaire:

AS SEEN ON NATIONAL TV:
Making over half a million dollars every 4-5 months from your home for
an investment of only $25 U.S. Dollars expense one time.
THANKS TO THE COMPUTER AGE AND THE INTERNET!!
============================================
BE A MILLIONAIRE LIKE THE OTHERS WITH IN A YEAR!!!
Before you say "BULL" please read the following. This is the letter you
have beeen hearing about on the news lately. Due to the populartity of
this letter on the inernet , A national weekly news program recently
devoted an entire show to the investigation of this program described
below, to see
if it really can make people money. The show also investigated wheather
or not the program was legal. Their findings proved once and for all that
there are absolutely NO LAWS
prohibiting the participation in the program and if people can follow the
simple instrucyions, they are bound to make some mega bucks with only
$25 out of pocket cost". DUE TO THE RECENT INCREASE OF
POPULARITY &amp; RESPECT THIS PROGRAM HAS ATTANED,
IT IS CURRENTLY WORKING BETTER THAN EVER.
This is what one had to say:"Thanks to this profitable opportunity, I
was approached many times before but each time I pased on it. I am
so glad I finally joined to see what one could expect in return for the
minimal effort and money required. To my astonishment, I recieved total
$610,470.00 in 21 weeks, with money still comming in."
Pam Hedland, Fort Lee New Jersey.
============================================
Here is another testimonial:  "This program has been around for a long
time but I never believed in it. But one day when I recieved this again
in the mail I decided to gamble my $25 on it. I followed the simple
instructions and walaa.....3 weeks later the money started to come in.
First month I only made $240.00 but the next two months I made
a total of $290,000.00. So far in the past 8 months by re-entering the
program, I have made over $710,000.00 and I am playing it again. The
key to success in this program is to follow the the simple steps and NOT
change anything." More testimonials later but first.

=====PRINT THIS NOW FOR YOUR FUTURE REFERANCE=========
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
If you would like to make at least $500,000 every 4 to 5 months easily and
comfortably, please read the following...THEN READ IT AGAIN and
AGAIN!!!
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
FOLLOW THE SIMPLE INSTRUCTIONS BELOW AND YOUR
FINANCIAL
DREAMS WILL COME TRUE, GUARANTEED!

INSTRUCTIONS
=====Order all 5 reports shown on the list below=====
For each report, send $5 CASH ,THE NAME &amp; NUMBER OF THE
REPORTYOU ARE ORDERINGand YOUR E-MAIL ADDRESS to the person
whose name appears ON THAT LIST next to the report. MAKE SURE YOUR
RETURN ADDRESS IS ON THE ENVELOPE TOP LEFT CORNER in case of any
mail problems.
===When you place your order, make sure you order each of the 5 reports.
You will need all 5 reports so that you can save them on your computer
and resell them. YOUR TOTAL COST $5 X 5=$25.00.
Within a few days you will recieve, via e-mail, each of the five reports
from
these 5 different individuals. Save them on your computer so they will be
accessible for you to send to the 1000's of people who will order them
from you. Also make a floppy of these reports and keep it on your desk in
case something happens to your computer.

IMPORTANT-DO NOT  alter the names of the peple who are listed next
to each report, or their sequence on the list, in any way, other than what
is
instructed below in step "1 through 6" or you will lose out on the majority
of your porfits, Once you understand the way this works you will also see
how it does not work if you change it. Remember, this method has been
tested, and if you alter it, it will NOT work!!! People have tried to put
there
friends/relatives names on all five thinking they could get all the money.
But it does not work this way. Believe us, we have all tried to be greedy
and
then nothing happened. So DO NOT try to change anything other than what is
instructed. Because if you do it will not work for you.
Remember, honesty reaps the reward!!!!

1....After you have ordered all 5 reports , take this advertisement and
REMOVE the name &amp; address of the person in REPORT # 5. This person
has made it through the cycle and is no doubt counting there fortunes.
2.... Move the name &amp; address in REPORT #4 down To REPORT #5.
3.... MOVE the name &amp; address in REPORT #3 down To REPORT #4.
4.... MOVE the name &amp; address in REPORT #2 down To REPORT #3.
5.... MOVE the name &amp; address in REPORT #1 down To REPORT #2.
6.... Insert YOUR name &amp; address in the REPORT #1 Position. PLEASE
MAKE SURE you copy every name &amp; address ACCURATELY!
==============================================
**** Take this entire letter ,with the modified list of names, and save it
on
your computer. DO NOT MAKE ANY OTHER CHANGES.
Save this on a disk as well just in case if you loose any data. To assist
you with
marketing your business on the internet, the 5 reports you purchase will
provide you with invaluable marketing information which includes how to
send
bulk e-mails legally, where to find thousands of free classified ads and
much
more.
.
There are 2 Primary methods to get this venture going:
METHOD # 1: BY SENDING BULK E-MAIL LEGALLY
================================================
Let's say that you decide to start small, just to see how it goes, and we
will
assume You and those involved send out only 5,000 e-mails each. Let's
also assume that the mailing recieve only a 0.2% response (the response
could be much better but lets just say it is only 0.2% also many people
will send out hundreds of thousands of e-mails instead of only 5,000 each).
Continuing with this example , you send out only 5,000 e-mails. With a
0.2% response, that is only 10 orders for report #1. Those 10 people
responded
by sending out 5,000 e-mails each for a total of 50,000. Out of those
50,000 e-mails only 0.2% responded with orders. That = 100 people responded
and ordered Report #2.

Those 100 people mail out 5,000 e-mails for a total of 500,000 e-mails.
The 0.2% response to that is 1000 orders for Report #3.
Those 1000 people send out 5,000 e-mails each for a total of 5 million e-
mails sent out. The 0.2% response to that is 10,000 orders for Report #4.
Those 10,000 people send out 5,000 e-mails  each for a total of
50,000,000 (50 million) e-mails. The 0.2% response to that is 100,000
orders for Report
#5 THAT'S 100,000 ORDERS TIMES $5 EACH=$555,000 ( half million).

Your total income in this example is: 1.....$50 + 2.....$500 + 3.....$5,000
+
4.....$50.000 + 5.....$500,000.......Grand Total=$555,550.00

NUMBERS DONT LIE. GET A PENCIL &amp; PAPER AND FIGURE IT OUT
THE WORST POSSIBLE RESPONSES AND NO MATTER HOW YOU
CALCULATE IT, YOU WILL STILL MAKE A LOT OF MONEY!!
================================================
REMEMBER FRIEND THIS IS ASSUMING ONLY 10 PEOPLE
ORDER OUT OF 5,000 YOU MAILED TO.
Dare to think  for a monment what would happen if everyone or half or
even one 4th of those people 100,000 e-mails each or more? There are
over 150million people on the internet worldwide and counting. Believe
me, many people will do just that, and more!

METHOD #2 : BY PLACING FREE ADS ON THE INTERNET
================================================
ADVERTISING ON THE NET IS VERY VERY INEXPENSIVE and there
are hundreds of FREE places to advertise. Placing a lot of free ads on the
internet will
easily get a larger response. We strongly suggest you start with Method#
1 and add Method #2 as you go along . For every $5 you recieve , all you
have to do is e-mail them the Report they ordered. That's it. Always
provide same day service on all orders.
This will guarantee that the e-mail they send out, with your name and
address on it, will be prompt because they can not advertise until they
recieve the report.
===========AVAILABLE REPORTS========================
ORDER EACH REPORT BY ITS NUMBER &amp; NAME ONLY. Notes:
Always send $5 cash (U.S. CURRENCY) for each Report. Checks NOT
accepted. Make sure the cash is concealed by rapping it in at least 2
sheets of paper. On one of those sheets of paper, Write the NUMBER &amp; the
NAME of the report you are ordering, YOUR E-MAIL ADDRESS and your name
and postal address.
PLACE YOUR ORDER FOR THESE REPORTS NOW:
================================================
REPORT # 1:" the Insider's Guide to Advertising for Free on the Net"
Order Report #1 from:

U. Stettler
Langackerstr. 165
CH-8704 Herrliberg
Switzerland
____________________________________________________________
REPORT #2" The Insider's Guide to Sending Bulk e-mail on the Net"
Order Report #2 from:

B. Collins
155 East Beaver Creek Rd.
Unit 24, Suite 235
Richmond Hill, Ontario
L4B 2N1
Canada
____________________________________________________________
REPORT #3:" Secret to Multilevel marketing on the net"
Order Report #3 from:


R.Robinson
14612 Friar st.#5
VanNuys CA, 91411
USA

_____________________________________________________________
REPORT #4:" How to Become a Millionaire Utilizing MLM &amp; the Net"
Order Report #4 from:


Randall Williams
401 Stocks Dairy Road
Leesburg Georgia 31763
USA

____________________________________________________________
REPORT #5: "How to Send Out One Million e-mails for Free"
Order Report #5 from:

Dario Va
16541 Blatt Blvd #206
Weston, FL 33326
U.S.A.
_____________________________________________________________
$$$$$$$$$YOUR SUCCESS GUIDELINES$$$$$$$$$$$$$$$$$
Follow these guildelines to guarantee your success:
===If you do not receive at least 10 orders for Report #1 within 2
weeks, continue sending e-mails until you do.
===After you have recieved 10 orders, 2 to 3 weeks after that you
should receive 100 orders  or more for REPORT #2. If you did not,
continue advertising or sending e-mails untill you do.
===Once you received 100 or more orders for Report #2, YOU
CAN RELAX, because the system is already working for you, and the
cash will continue to roll in! THIS IS IMPORTANT TO REMEMBER:
every time your name is moved down the list, you are placed in front
of a different report.

You can KEEP TRACK of your PROGRESS by watching which report
people are ordering from you. IF YOU WANT TO GENERATE MORE
INCOME SEND ANOTHER BATCH OF E-MAILS AND START
THE WHOLE PROCESS AGAIN.
There is NO LIMIT to the income you can generate from this business!!!
================================================
FOLLOWING IS A NOTE FROM THE ORIGINATOR OF THIS
PROGRAM:
You have just received information that can give you finiancial freedom for
the rest of your life, with NO RISK and just A LITTLE BIT OF EFFORT.you
can make more money in the next few weeks and months than you ever
imagined.
follow the program EXACTLY AS INSTRUCTED. Do Not change it in any way. It
works
exceedingly well as it is now. Remember to e-mail a copy of this exciting
report after you have put
your name and address in the Report #1 and moved the others to
#2.......#5 as instructed above. One of the peole you send this to may send
out
100,000 or more e-mails and your name will be on every one of them.
Remember though, the more you send out the more potiential customers
you will reach. So my friend, I have given you the ideas, information,
materials and
opportunity to become financially independent ITS UP TO YOU NOW!

============MORE TESTIMONIALS=======================
"My name is Mitchell, My wife Jody ad I live in Chicago. I am an
accountant with a major U.S. Corparation and I make pretty good money.
When I received this program I grumbled  to Jody about receiving" junk
mail". I made fun of the whole thing , spouting my knowledge of the
population and percentages involved. I "knew" it wouldn't work. Jody
totally ignored
my supposed intelligence and a few days later she jumped in with both
feet. I made merciless fun of her, and was ready to lay the ol "I told you
so" on
her when the thing didnt work. Well , the laugh was on me ,Within 3
weeks she had received 50 responses. Within the next 45 days she had
received total $147,200.00.......all cash! I was shocked. I have joined
Jody
in her" hobby".
Mitchell Wolf M.D., Chicago Illinois
================================================
"Not being the gambling type , it took me several weeks to make up my
mind to participate in this plan. But conservative that i am, I decided
that
 the initial investment was so little that there was just no way that I
wouldn't get enough orders to at least get my money back". "I was
surprised when I found my medium size post office box crammed with
orders. I made $319,210.00 in the first 12 weeks. The nice thing about
this deal is that it does not matter where people live. There simply isn't
a
better investment with a faster return and so big"
Dan Sondstrom, Alberta Canada
================================================
"I had received this program before. I deleted it, but later I wondered
if I should have given it a try. Of course, I had no idea who to contact to
get  another copy, so I had to wait until I was e-mailed again by someone
else......11 months passed then it luckily came again.....I did not
delete this one! I made more than $490,000 on my first try and all the
the money came within 22 weeks."
Susan De Suza, New York, N.Y.
================================================
"It really is a great opportunity to make relatively easy money with
little cost to you. I followed the simple instructions carefully and
within 10 days the money started to come in. My first month I made
$20,560.00 and by the end of the third month my total cash count was
$362,840.00. Life is beautiful, Thanx to the internet.".
Fred Dellaca, Westport New Zealand
================================================
ORDER YUR REPORTS TODAY AND GET STARTED ON
"YOUR" ROAD TO FINANCIAL FREEDOM!
================================================
If you have any questions of the legality of this program, contact the
Office of Associate Director for Marketing Practices, Federal Trade
Commission
Bureau of Consumer Protection, Washington ,D.C.





This is a one time mailing and you will not be contacted
again. Should you chose to have your name completely eliminated
from our data-base, you can press the respond button and type
"remove" on the subject line.




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/




Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010723105700</emailId><senderName>Herbert Valerio Riedel</senderName><senderEmail>hvr@hvrlab.org</senderEmail><timestampReceived>2001-07-23 10:57:00-0400</timestampReceived><subject>Re: bug list int.2.4.x ?</subject><body>


I still hope that alex get's back some time...

But I'm willing to take over the maintainance for the meantime, as the
actual state (very serious bugs indeed) of the int crypto patch really
can't be let the way it is :-/

On Sun, 22 Jul 2001, Marc Mutz wrote:
&gt; On Sunday 22 July 2001 08:26, Hubert Chan wrote:
&gt; &lt;snip&gt;
&gt; &gt; I think that, at least, the kerneli web page should include links to
&gt; &gt; both Herbert's and Jari's code.  The easier both of these projects
&gt; &gt; can be found, the better off we are.
&gt; &lt;snip&gt;
&gt;
&gt; Hm, probably difficult, since Alex seems to respond no longer to EMail.
&gt; If Herbert really wants to take over maintainance, it's probably easier
&gt; to just contact HPA and say that and get a hvr/ directory in people/
&gt; and write access to crypto/ (all relative to
&gt; ftp.kerbel.org/pub/linux/kernel/)
&gt;
&gt; Marc

-- 
Herbert Valerio Riedel       /    Phone: (EUROPE) +43-1-58801-18840
Email: hvr@hvrlab.org       /    Finger hvr@gnu.org for GnuPG Public Key
GnuPG Key Fingerprint: 7BB9 2D6C D485 CE64 4748  5F65 4981 E064 883F 4142


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010723135857</emailId><senderName>"Michael T. Babcock"</senderName><senderEmail>mbabcock@fibrespeed.net</senderEmail><timestampReceived>2001-07-23 13:58:57-0400</timestampReceived><subject>Re: FreeBSD + Crypto</subject><body>

I've stayed out of this issue for the most part, but I'd like to question
you
on a couple of these points.  I'm not asking you to accept American code
(as a Canadian), but I'd like you to prove your stance a bit better.

&gt; Code containing contributions from US authors, however slight, is subject
&gt; to US export rules forevermore. There is no practical way to free it from
&gt; them.

Can you cite me some evidence for this?  Export is an event, not a status,
for
the country from which an object was exported.  If I purchase a US-made
car and the US decides that it is illegal to export vehicles to Canada, they
will
have no way to get me to send my car back to them, nor will my car become
illegal to use in Canada or the US, unless another specific law to that
effect
were enacted.

Also, as a possibility, what if a US citizen were to contribute code to and
assign
its Copyright to an external export-legal group (like a Canadian
organisation)?
Would that code's US origin have any future bearing on its use?

&gt; There are also some issues of support.  One area the recent relaxation of
&gt; rules has *not* affected is technical assistance:  private correspondence
&gt; with foreigners about technical issues of crypto requires case-by-case
&gt; prior approval from the government, even if the crypto in question is
&gt; freely exportable.  Yes, really.

This _is_ an issue in my mind.  A large issue too.  I think, however, were
code to be otherwise allowed from US contributors, that it would simply
have to be well documented and commented on at the time of contribution,
and on a case-by-case basis decide whether it should be accepted or if it
would require too much support (a patch vs. a new feature / plug-in).
--
Michael T. Babcock
http://www.fibrespeed.net/~mbabcock/


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010724062909</emailId><senderName>Konrad Wawruch</senderName><senderEmail>kwaw@7bulls.com</senderEmail><timestampReceived>2001-07-24 06:29:09-0400</timestampReceived><subject>Re: problems with 2.4.3.1 patch over 2.4.* with AES</subject><body>


&gt; I have a filesystem encrypted with AES, 192 bit key. I'm not sure what went
&gt; wrong, but one day I was unable to mount the filesystem. It may have been an
&gt; update in util-linux, a new kernel, who knows (I update a lot :P).
&gt; 
&gt; Anyway, I can't get to my files! If anyone could help me mount the filesystem
&gt; I would be much appreciative. Here's the problem:

[...]

Have you added modules description to /etc/module.conf (or however this
file is called in your distribution)? I had similarily looking problem
with upgrade from Slackware 7.1 to Slackware 8.0 (though I had only
IOCTL message errors).

Regards,

Konrad Wawruch
7bulls.com S.A.
kwaw@7bulls.com


Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010729161604</emailId><senderName>Tom Murphy</senderName><senderEmail>freyason@yahoo.com</senderEmail><timestampReceived>2001-07-29 16:16:04-0400</timestampReceived><subject>Encrypting disks</subject><body>

Hello,

   I'm new to the list. Sorry about the strange subscribe message
earlier. I pasted to the wrong address.I have a question about
encrypting whole disks and a problem I had.

   I patched my 2.4.7 kernel with the latest int'l kernel patch
and I'm not sure how much bearing that has, but I would like to 
mount an entire disk (in my case /dev/hda1) as encrypted rather than
using a file. The problem I had was there was a power outtage,
and the encrypted disk was forceably unmounted. When I rebooted
and tried to mount it, I got loads of illegal blocks and inode
errors. In short, the entire partition got trashed. Is this because
I was mounting the entire disk rather than a file? This is how I had
set it up:

losetup -e aes -k 256 /dev/loop0 /dev/hda
&lt;entered in password&gt;
mkfs.ext2 -m 0 /dev/loop0
&lt;makes the ext2 partition just fine&gt;
&lt;copy data to the partition&gt;

system is acting just fine with the partition. It is on an
automounter so it unmounts it when it's not needed.. HOWEVER...

10 days later.. machine loses power. I boot up, the clear partitions
fsck alright. When I do the losetup and attempt to mount, I get errors
that the drive has to be checked. So I fsck it. What appears
to happen is, the files still seem to be there, but garbage appears
in the beginning of all of them. Some of the files are extremely
garbled and I end up having to wipe the entire partition.

Is there a way to prevent this from happening? I'd really like to
use the encyption, but not if it's going to be unstable like this.

Thanks!

Tom

__________________________________________________
Do You Yahoo!?
Make international calls for as low as $.04/minute with Yahoo! Messenger
http://phonecard.yahoo.com/

Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/

</body></email><email><emailId>20010731024933</emailId><senderName>"IT3 Stuart B. Tener, USNR-R"</senderName><senderEmail>stuart@bh90210.net</senderEmail><timestampReceived>2001-07-31 02:49:33-0400</timestampReceived><subject>RE: Those damn army brats!</subject><body>

[Attachment #2 (text/plain)]

List members:

	Here is the file. And it ought be in mime format now.


Very Respectfully, 

Stuart Blake Tener, IT3, USNR-R, N3GWG 
Beverly Hills, California
VTU 1904G (Volunteer Training Unit) 
stuart@bh90210.net 
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043 
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859 

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's free!) 

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL. 

Monday, July 30, 2001 7:45 PM

-----Original Message-----
From: IT3 Stuart B. Tener, USNR-R [mailto:stuart@bh90210.net]
Sent: Monday, July 30, 2001 2:48 AM
To: Marc Mutz; linux-crypto@nl.linux.org
Subject: RE: Those damn army brats!

Mr. Mutz:

a) Not necessarily off topic, as it could be a security problem if dates were not \
working problem with software b) I have "mime" checked in Outlook 2000, and under \
"encode text using: " it gives me three "sub-choices": (a) none (b) quoted printable \
(c) base64, which one will work best for you? c) Alright 2038 testing
d) I had no idea nor any intention to send 3 copies, I have no concept of how that \
happened


Very Respectfully,

Stuart Blake Tener, IT3, USNR-R, N3GWG
Beverly Hills, California
VTU 1904G (Volunteer Training Unit)
stuart@bh90210.net
west coast: (310)-358-0202 P.O. Box 16043, Beverly Hills, CA 90209-2043
east coast: (215)-338-6005 P.O. Box 45859, Philadelphia, PA 19149-5859

Telecopier: (419)-715-6073 fax to email gateway via www.efax.com (it's free!)

JOIN THE US NAVY RESERVE, SERVE YOUR COUNTRY, AND BENEFIT FROM IT ALL.

Monday, July 30, 2001 2:41 AM

-----Original Message-----
From: Marc Mutz [mailto:Marc.Mutz@uni-bielefeld.de]
Sent: Monday, July 30, 2001 4:36 AM
To: IT3 Stuart B. Tener, USNR-R; linux-crypto@nl.linux.org
Subject: Re: Those damn army brats!

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

On Saturday 28 July 2001 06:43, IT3 Stuart B. Tener, USNR-R wrote:
&lt;snip&gt;
&gt; In order to get ahead of the curve this millennium I have decided to
&gt; begin my "Y3K" (Year 3000) testing well in advance. In so doing, and
&gt; since I now run the 2.4.7 version of the kernel, I took a piece of
&gt; software which I had from the Y2K days, and re-worked it a bit. I
&gt; have included the timetravel-2.1 version (good with kernels circa 2.1
&gt; / pre year 2000), as well as the "2.4.7" version (which I re-wrote).
&lt;snip&gt;

OK:

a. This is totally OT for this list
b. You're not using MIME attachments, but proprietary Windows stuff. If
you want us to even look at it, use MIME.
c. All 32bit-time_t Unices will stop working properly in 2038. That's
due to the way they internally store the time (in secs since 1-1-1970
0:00 GMT). So anything resembling Y3K testing is completely bogus
anyway.
d. You don't need to send three copies of your message. One would have
sufficed.

Marc

- --
Marc Mutz &lt;Marc@Mutz.com&gt;
http://marc.mutz.com/
http://www.mathematik.uni-bielefeld.de/~mmutz/
http://EncryptionHOWTO.sourceforge.net/
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.0.6 (GNU/Linux)
Comment: For info see http://www.gnupg.org

iD8DBQE7ZUai3oWD+L2/6DgRAkdAAJ9M+uqa7jYzkH7wfXoj2uIhKyMgTACgkvnJ
UBAeuq+mXCBd7jcJykimocQ=
=rboa
-----END PGP SIGNATURE-----


["timetravel-2.4.7.tar.gz" (application/x-gzip)]
Linux-crypto:  cryptography in and on the Linux system
Archive:       http://mail.nl.linux.org/linux-crypto/


</body></email></emails>