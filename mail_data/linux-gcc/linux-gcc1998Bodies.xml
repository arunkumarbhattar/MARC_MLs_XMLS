<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>19980904175406</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-09-04 17:54:06-0400</timestampReceived><subject>binutils 2.9.1.0.11 is released.</subject><body>

&gt; 
&gt; Thanks for looking into egcs for Linux/Alpha. I have so far been
&gt; unsuccessful in getting omniORB2 to run on Linux/Alpha. Different snapshots
&gt; seem to manifest different problems. The latest one I tried pre-egcs1.1
&gt; 980824 again behaves differently. A simple omniORB2 example core dump in
&gt; the global ctors.
&gt; 

Richard and I have got DWARF2 EH working on Linux/Alpha. I am doing
some final testing now. But the exception frame optimization in gas
has a bug. I fixed it in 2.9.1.0.11 with a kludge. If you use DWARF2
EH and gas, you need to disable the exception frame optimization or
get binutils 2.9.1.0.11 until Ian finds a real fix.

Thanks.


H.J.
---
This is the beta release of binutils 2.9.1.0.11 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, an alpha bug fix and an exception frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception happens.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

I am planing to release this to the public as the final public release
for binutils 2.9.1.0.x based on binutils 2.9.1 and the current 16-bit
x86 assembler changes. The future release will be based on the binutils
snapshot, which has a different approach for 16-bit x86 assembly code.
Please test it as much as you can.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.11 to hjl@lucon.org.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.11.tar.gz. Source code.
2. binutils-2.9.1.0.10-2.9.1.0.11.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.11-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.11-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.11-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.11-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.11-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.11-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
09/04/98

</body></email><email><emailId>19980903213839</emailId><senderName>Rob Dale</senderName><senderEmail>rob@nb.net</senderEmail><timestampReceived>1998-09-03 21:38:39-0400</timestampReceived><subject>Re: binutils 2.9.1.0.11 is released.</subject><body>

Are there any plans to add my 3DNow! patch?
http://www.nb.net/~rob/amd/amd.html

-- 
Robert Dale

   "arrest this man he talks in maths"
                          RADIOHEAD OK COMPUTER



H.J. Lu wrote:
&gt; 
&gt; &gt;
&gt; &gt; Thanks for looking into egcs for Linux/Alpha. I have so far been
&gt; &gt; unsuccessful in getting omniORB2 to run on Linux/Alpha. Different snapshots
&gt; &gt; seem to manifest different problems. The latest one I tried pre-egcs1.1
&gt; &gt; 980824 again behaves differently. A simple omniORB2 example core dump in
&gt; &gt; the global ctors.
&gt; &gt;
&gt; 
&gt; Richard and I have got DWARF2 EH working on Linux/Alpha. I am doing
&gt; some final testing now. But the exception frame optimization in gas
&gt; has a bug. I fixed it in 2.9.1.0.11 with a kludge. If you use DWARF2
&gt; EH and gas, you need to disable the exception frame optimization or
&gt; get binutils 2.9.1.0.11 until Ian finds a real fix.
&gt; 
&gt; Thanks.
&gt; 
&gt; H.J.
&gt; ---
&gt; This is the beta release of binutils 2.9.1.0.11 for Linux, which is
&gt; based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
&gt; changes, an alpha bug fix and an exception frame optimization bug fix.
&gt; 
&gt; Due to the exception frame optimization bug fix, it is highly
&gt; recommended that you recompile all your C++ codes. Otherwise,
&gt; exception handling may not work right when an exception happens.
&gt; 
&gt; Since I no longer have machine running libc 5, starting from this
&gt; release, there will be no pre-compiled binaries for libc 5.
&gt; 
&gt; I am planing to release this to the public as the final public release
&gt; for binutils 2.9.1.0.x based on binutils 2.9.1 and the current 16-bit
&gt; x86 assembler changes. The future release will be based on the binutils
&gt; snapshot, which has a different approach for 16-bit x86 assembly code.
&gt; Please test it as much as you can.
&gt; 
&gt; There was some problem on Linux/alpha. The binaries generated by the
&gt; new binituls may not run correctly on Linux/alpha. It turned out it was
&gt; a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
&gt; and glibc 2.0.7 should be ok.
&gt; 
&gt; This release should work on linux/x86/alpha. There are some ELF bug
&gt; fixes. But I don't know if it fixes all the bugs reported on
&gt; linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
&gt; I'd like to release it to public soon. Please test it as much as you
&gt; can.
&gt; 
&gt; Please report any bugs related to binutils 2.9.1.0.11 to hjl@lucon.org.
&gt; 
&gt; Changes from binutils 2.9.1.0.10:
&gt; 
&gt; 1. Fix an exception frame optimization bug.
&gt; 
&gt; Changes from binutils 2.9.1.0.9:
&gt; 
&gt; 1. Fix another -Bsymbolic bug for Linux/alpha.
&gt; 
&gt; Changes from binutils 2.9.1.0.7:
&gt; 
&gt; 1. Fix -Bsymbolic for Linux/alpha.
&gt; 2. Fix a 16bit x86 gas bug.
&gt; 
&gt; Changes from binutils 2.9.1.0.6:
&gt; 
&gt; 1. Fix various ARM bugs.
&gt; 
&gt; Changes from binutils 2.9.1.0.5:
&gt; 
&gt; 1. A MIPS assembler ".align" bug is fixed.
&gt; 2. bfd.h, bfd.h and bfdlink.h are included in the binary package.
&gt; 
&gt; Changes from binutils 2.9.1.0.4:
&gt; 
&gt; 1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
&gt; fixed.
&gt; 
&gt; IMPORTANT:
&gt; The .plt format that the Alpha was using was not thread safe.  So I
&gt; changed it.  The new format is *not* binary compatible with the old,
&gt; thus you must use glibc 2.0.4 to get an ld.so that can understand it.
&gt; 
&gt; Note that the new ld.so knows how to deal with the old .plt format, so
&gt; old libraries will still work, but they should be relinked eventually
&gt; for performance reasons.
&gt; 
&gt; The file list:
&gt; 
&gt; 1. binutils-2.9.1.0.11.tar.gz. Source code.
&gt; 2. binutils-2.9.1.0.10-2.9.1.0.11.diff.gz. Patch against the previous
&gt;    beta source code.
&gt; 3. binutils-2.9.1.0.11-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
&gt;    for libc 6 (glibc 2.0.5c or above).
&gt; 4. binutils-2.9.1.0.11-alpha.tar.gz. Precompiled Linux/alpha binaries
&gt;    for glibc 2.0.7 or above.
&gt; 
&gt; The primary ftp sites for the compiler/C library:
&gt; 
&gt; 1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
&gt; 2. ftp://sunsite.unc.edu/pub/Linux/GCC
&gt; 
&gt; The beta directory is in private/tofu under the GCC directory.
&gt; 
&gt; Most of my stuff can also be found at
&gt; 
&gt;    ftp://ftp.yggdrasil.com/private/hjl
&gt;    ftp://ftp.kernel.org/pub/linux/devel/gcc
&gt; 
&gt; To install the binary package, please follow the procedure very closely.
&gt; Please backup/save all the files you are instructed to delete and you
&gt; should do
&gt; 
&gt;         gzip -dc binutils-2.9.1.0.11-glibc.x86.tar.gz | tar tvvf -
&gt; or
&gt;         gzip -dc binutils-2.9.1.0.11-alpha.tar.gz | tar tvvf -
&gt; 
&gt; to see what is in there.
&gt; 
&gt; Please do back up before you remove things.
&gt; 
&gt; To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
&gt; 
&gt; 1. su root
&gt; 2. cd /
&gt; 3. rm -f /usr/bin/encaps /usr/bin/nm
&gt; 4. gzip -dc binutils-2.9.1.0.11-glibc.x86.tar.gz | tar xvvf -
&gt; 5. ldconfig
&gt; 
&gt; Now you have the new gas/binutils under /usr/bin and
&gt; /usr/ix86-linuxaout/bin. You have to use
&gt; 
&gt; /usr/ix86-linuxaout/bin/as
&gt; 
&gt; and
&gt; 
&gt; /usr/ix86-linuxaout/bin/ld -m i386linux
&gt; 
&gt; if you want to use a.out as and ld directly.
&gt; 
&gt; To install for alpha, PLEASE DO
&gt; 
&gt; 1. su root
&gt; 2. cd /
&gt; 3. gzip -dc binutils-2.9.1.0.11-alpha.tar.gz | tar xvvf -
&gt; 4. ldconfig
&gt; 
&gt; I have changed the target names for Linux/x86 and Linux/x86 (a.out)
&gt; to ix86-linux and ix86-linuxaout respectively. The precompiled
&gt; binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
&gt; You should make appropriate symbolic links if you have a different
&gt; name for the Linux/x86 target, like i586-unknown-linux.
&gt; 
&gt; The target name for Linux/alpha is alpha-linux. The precompiled alpha
&gt; binaries are installed under /usr/alpha-linux. You should make
&gt; appropriate symbolic links if you have a different name for the
&gt; Linux/alpha target, like alpha-redhat-linux.
&gt; 
&gt; If you have an old linux library in the a.out format and you cannot
&gt; obtain the newer version in the ELF format for whatever reason, you
&gt; can try "objcopy --remove-leading-char" on the a.out library and see
&gt; if it can link with your code in ELF.
&gt; 
&gt; Thanks.
&gt; 
&gt; H.J. Lu
&gt; hjl@lucon.org
&gt; 09/04/98

</body></email><email><emailId>19980908221421</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-09-08 22:14:21-0400</timestampReceived><subject>Re: SIGSEGV</subject><body>

&gt; I need to make some driver to run a Graphics card which resides
&gt; at address 0XD0000
&gt; 
&gt; To test the access to this address I made the following short 
&gt; program:
&gt; 
&gt; #include &lt;stdio.h&gt;
&gt; 
&gt; void main()
&gt; {
&gt; 
&gt; 	unsigned char *pt;
&gt; 	unsigned char mem;
&gt; 	
&gt; 	pt = (unsigned char*)(0xD0000);
&gt; 
&gt; 	mem = *pt;			// HERE IS WHERE THE ERROR MESSAGE OCCURES :-(
&gt; 
&gt; }
&gt; 
&gt; 
&gt; 
&gt; When ever I run it i get the " Segmentation Fault. Core Dumped"
&gt;  error message and a core dump file is created.
&gt; 
&gt; A fast gdb session shows" Program received signal SIGSEGV,
&gt; Segmentation Fault"!
&gt; 
&gt; I always believed that Linux does not use SEGMENTS. Is/are
&gt; there any switches in the compiler that I have to set in order
&gt; to correct this problem?
&gt; 
&gt; I compile like "gcc -m486 -g  test.c"

Although you did not mention your platform, I assume it is x86, since you
refer to segments.  Yes, it's correct that the sort of memory segmentation
that you refer to has been outdated since Intel's 386 chip was released,

There is a much bigger problem here.  You are trying to access a (as far
as the OS is concerened) random memory location.  In most cases writing to
a random memory location would cause your computer to crash.  Thanks to
modern memory protection, and OSes that take advantage of it such as
Linux, instead of your system hanging or otherwise going crazy you only
get a segmentation fault, and the offending program is terminated.

This is 100% proper behavior, and if it didn't do this, your computer
would crash every time any program you ran had the slightest bug in it.

To make a long story short: you can't access the card the way that you're
doing above.  I recommend you take a look at svgalib, or GGI, or one of
the X servers if you'd like to program your graphics card.  If you are
using a proprietary device for which no driver already exists, you'll need
to look into how to write your own device driver.

</body></email><email><emailId>19980908054058</emailId><senderName>Tony Nugent</senderName><senderEmail>tony@usq.edu.au</senderEmail><timestampReceived>1998-09-08 05:40:58-0400</timestampReceived><subject>strange time zone behaviour by linux on windoze partition</subject><body>

System:	i386 RedHat 5.1 (glibc6)

I have not seen this problem myself, but I am passing this on as I am the
linux support person here at USQ.  This is what has been described to me,
and I haven't a clue as to why this is happening.  However, I suspect that
it could be a glibc issue...

When linux boots up and uses the system time, it all looks ok.  We are
GMT+10 hours here (Queensland Australia), and the bios clock is set at the
local time.  /etc/localtime is a symlink pointing to the correct
/usr/share/zoneinfo/ file.

Write a file to a vfat-mounted dos partition with linux and the timestamps
look good - the correct (current) time as would be expected.  (Of course,
same for timestamps on new files on the linux filesystem).

Boot into windows and the timestamps on any of these files are 10 hours
behind!

Create new files with the current timestamp with windose and all looks
good.  But boot into linux and look at those files -- they are 10 hours
ahead!  (Which means thay can be set for a time in the future).

This is obviously a problem related to the local time difference, but what
is going on?

Is windows at fault, or linux?  Or have we just discovered the secrets of a
time-travel machine?? :-)

Thanks for any clues as to what could be going on and how to prevent this
from happening.

This querkiness is totally screwing up some scripts that are designed to
use file timestamps to keep in sync files that need to be kept on both
partitions.

Many thanks for any help.

Cheers                                                         .
Tony  __________  Tony Nugent            &gt;&gt; - Linux -  &lt;&lt;  _--_|\
 / / / / __/ __ \ linux@usq.edu.au       &gt;&gt; UNIX power &lt;&lt; /     *\
/ /_/ /\ \/ /_/ / Tony.Nugent@usq.edu.au &gt;&gt;  on a pc!  &lt;&lt; \_.--._/
\____/___/\___\_\ UNIX Systems Officer, Faculty of Science      v
 University of Southern Queensland, Toowoomba Oueensland Australia
-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-=*#*=-

</body></email><email><emailId>19980904174454</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-09-04 17:44:54-0400</timestampReceived><subject>New libg++ and no more libg++ from H.J.</subject><body>

&gt; 
&gt; Could somebody comment the following:
&gt; 
&gt; In
&gt; 
&gt; http://egcs.cygnus.com/egcs-1.1/caveats.html
&gt; 
&gt; in the text:
&gt; egcs has an integrated libstdc++, but does not have an integrated
&gt; libg++. Furthermore old libg++ releases will not work with egcs; HJ Lu
&gt; has made a libg++ snapshot available which may work with egcs.
&gt; 
&gt; reference to libg++ snapshot is linked to
&gt; 
&gt; ftp://ftp.yggdrasil.com/private/hjl/libg++-2.8.1-980828.tar.gz
&gt; 

No more libg++ from me. Please use libg++ from Manfred. I put a copy
at

ftp://ftp.yggdrasil.com/private/hjl/libg++-2.8.1.2.tar.gz
ftp://ftp.kernel.org/pub/linux/devel/gcc/libg++-2.8.1.2.tar.gz


H.J.

</body></email><email><emailId>19980914113930</emailId><senderName>Nicolas Dotal</senderName><senderEmail>nicolas@ft.net</senderEmail><timestampReceived>1998-09-14 11:39:30-0400</timestampReceived><subject>SIGFPE Problem</subject><body>





   The program ephem_4.28 by Elwood Charles Downey is available at
   ftp.funet.fi - 128.214.248.6 under /pub/astro/progs/unix.
   It computes positions of Moon and planets with a fair accuracy.

   It offers a vi-like, comfortable interface.

   This program runs fine on a SUN Sparc IPX I may access, with
   two little modifications in io.c and time.c.

   My concern is that it does not on Linux 1.2.3 ( dating 1996 ),
   but halts on " Floating-Point errors ".

   The hardware is a Cyrix ( Pentium-like ) processor.

   I tried to trace the execution and I think this happens around
   circum.c, on a SIGFPE signal.

   However, if I know approximatively WHERE is the problem, I don't
   know at all HOW to solve it.

   So, it would be very kind of you to have a look at this problem
   or to give me other directions to search.

   Best regards,


   Nicolas, Paris, FRANCE.

</body></email><email><emailId>19980916151000</emailId><senderName>Michael Lausch</senderName><senderEmail>mla@gams.co.at</senderEmail><timestampReceived>1998-09-16 15:10:00-0400</timestampReceived><subject>shared library question</subject><body>

Hi!

I'm trying to build a shared lib which does some initialization
when it's loaded the first time.

void __mylib_init(void) __attribute((__section__ ".init"));

void
__mylib_init(void)
{
 ;
}

When i load the library with dl_open this function is executed, but
before the function returns, the program gets a SIGSEGV somewhere in
__DTOR_END__. 

my environ:
 ld --version
GNU ld 2.9.1

gcc --version
2.7.2.3

glibc 2.0.7

Redhat 5.1 installtion.

What am i doing wrong? Or is it just a memory or stack curroption
somewhere?
--
Michael Lausch/g.a.m.s. edv dienstleistungen gmbh
See my web page &lt;http://www.gams.net/~mla&gt; or query PGP key server for PGP key.
"Reality is that which, when you stop believing in it, doesn't go away".
                -- Philip K. Dick

</body></email><email><emailId>19980910022426</emailId><senderName>Alexandre Oliva</senderName><senderEmail>oliva@dcc.unicamp.br</senderEmail><timestampReceived>1998-09-10 02:24:26-0400</timestampReceived><subject>Re: New libg++ and no more libg++ from H.J.</subject><body>


H J Lu &lt;hjl@lucon.org&gt; writes:

&gt; ftp://ftp.yggdrasil.com/private/hjl/libg++-2.8.1.2.tar.gz

Looks like it will only configure correctly if the shell supports `!'
to negate the result of a pipeline.  Here's a patch.

-- 
Alexandre Oliva
mailto:oliva@dcc.unicamp.br mailto:aoliva@acm.org
http://www.dcc.unicamp.br/~oliva
Universidade Estadual de Campinas, SP, Brasil

["libg++-2.8.1.2.diff" (application/octet-stream)]

</body></email><email><emailId>19980910123511</emailId><senderName></senderName><senderEmail>nbecker</senderEmail><timestampReceived>1998-09-10 12:35:11-0400</timestampReceived><subject>Re: New libg++ and no more libg++ from H.J.</subject><body>

The new libg++ installs differently and is numbered differently than
those from H.J.  Are we definately committing to this new scheme?

</body></email><email><emailId>19980918141042</emailId><senderName>Kev</senderName><senderEmail>klmitch@mit.edu</senderEmail><timestampReceived>1998-09-18 14:10:42-0400</timestampReceived><subject>Re: buf report</subject><body>

&gt; problem:  i have linux box with X Windows. i have been using kernel 2.0.35
&gt; compiled with gcc version 2.7.2.3. then i made update of gcc from version
&gt; 2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,

There's your problem; don't compile the 2.0 kernels with gcc &gt; 2.7.2.3.
-- 
Kevin L. Mitchell &lt;klmitch@mit.edu&gt;
-------------------------  -. .---- --.. ..- -..-  --------------------------
http://web.mit.edu/klmitch/www/              (PGP5 keys availiable from here)
   DSS Key ID ED0DB34E: D9BF 0E74 FDCB 43F5 C597  878F 9455 EC24 ED0D B34E
   DH  Key ID 2A2C31D4: 1A77 4BA5 9E32 14AE 87DA  9FEC 7106 FC62 2A2C 31D4

</body></email><email><emailId>19980917100739</emailId><senderName>holotko</senderName><senderEmail>micros50@computer.net</senderEmail><timestampReceived>1998-09-17 10:07:39-0400</timestampReceived><subject>Using new/delets in C++ Constructors/Destructors...</subject><body>


Lets say I have a class "foo"and within a constructor for this class I
wish to use "new" to allocate memory space. For example:

class foo
{
   private:
      char *c;

   public:
      foo()                                          // constructor
       { c = new char [LEN + 1]; }

};

Of course there would be other member functions.  Now lets say I write
a program in which I create and use objects of class foo. When I am
finished using those objects I want to deallocate the memory which was
allocated when the object was constructed. To accomplish this can I
just simply write a destructor which, in it's simplest form might look
like this:

   ~foo()
     { delete c; }

Would this work? and, if so, how would I call this destructor when the
object is no longer needed, or would this be done automatically at
some point??

Any help would be appreciated. Pardon my ignorance of this topic but,
I am in the process of trying to debug a small program which seems to
be leaking memory from somewhere and the program utilizes a
significant amount of C++ code.(I am curently in the learning stages
of C++).


Thanks,

/John &lt;micros50@computer.net&gt;

--
email: micros50@computer.net
Local mailserver  , remote

</body></email><email><emailId>19980917133748</emailId><senderName>Ivan Keberlein</senderName><senderEmail>keberlein@darkstart.ctl.ml.org</senderEmail><timestampReceived>1998-09-17 13:37:48-0400</timestampReceived><subject>Re: Using new/delets in C++ Constructors/Destructors...</subject><body>

holotko wrote:

&gt; Lets say I have a class "foo"and within a constructor for this class I
&gt; wish to use "new" to allocate memory space. For example:
&gt;
&gt; class foo
&gt; {
&gt;    private:
&gt;       char *c;
&gt;
&gt;    public:
&gt;       foo()                                          // constructor
&gt;        { c = new char [LEN + 1]; }
&gt;
&gt; };
&gt;
&gt; Of course there would be other member functions.  Now lets say I write
&gt; a program in which I create and use objects of class foo. When I am
&gt; finished using those objects I want to deallocate the memory which was
&gt; allocated when the object was constructed. To accomplish this can I
&gt; just simply write a destructor which, in it's simplest form might look
&gt; like this:
&gt;
&gt;    ~foo()
&gt;      { delete c; }
&gt;

This quite right !

&gt; Would this work? and, if so, how would I call this destructor when the
&gt; object is no longer needed, or would this be done automatically at
&gt; some point??

Suppose you declate an object of class "foo" like this:
            foo *MyFooObject = new foo;      // Construcor is done
             ....
             delete MyFooObject;                    // Destructor is done

             ....

Destructor will be called when you will  do "delete MyFooObject"

</body></email><email><emailId>19980917145805</emailId><senderName>John Alvord</senderName><senderEmail>jalvo@cloud9.net</senderEmail><timestampReceived>1998-09-17 14:58:05-0400</timestampReceived><subject>Re: Using new/delets in C++ Constructors/Destructors...</subject><body>




On Thu, 17 Sep 1998, holotko wrote:

&gt; 
&gt; Lets say I have a class "foo"and within a constructor for this class I
&gt; wish to use "new" to allocate memory space. For example:
&gt; 
&gt; class foo
&gt; {
&gt;    private:
&gt;       char *c;
&gt; 
&gt;    public:
&gt;       foo()                                          // constructor
&gt;        { c = new char [LEN + 1]; }
&gt; 
&gt; };
&gt; 
&gt; Of course there would be other member functions.  Now lets say I write
&gt; a program in which I create and use objects of class foo. When I am
&gt; finished using those objects I want to deallocate the memory which was
&gt; allocated when the object was constructed. To accomplish this can I
&gt; just simply write a destructor which, in it's simplest form might look
&gt; like this:
&gt; 
&gt;    ~foo()
&gt;      { delete c; }
     { delete [] c;}
is required since c is an array. 
&gt; 
&gt; Would this work? and, if so, how would I call this destructor when the
&gt; object is no longer needed, or would this be done automatically at
&gt; some point??
&gt; 
 It depends. If you allocate the object file a file scope definitions or
on the stack, it will be automatically destroyed and the destructor will
run. If you allocated it via a new, then you are responsible for
delete-ing it.

john alvord

CDs @ http://www.cruzio.com/~billpeet/MusicByCandlelight

</body></email><email><emailId>19980917203713</emailId><senderName>Andre Majorel</senderName><senderEmail>amajorel@teaser.fr</senderEmail><timestampReceived>1998-09-17 20:37:13-0400</timestampReceived><subject>Re: Using new/delets in C++ Constructors/Destructors...</subject><body>

At 10:07 1998.09.17 +0000, holotko wrote:

&gt;   ~foo()
&gt;     { delete c; }

Right, except that you should use "delete[] c;".
For more info, you can read the section 16 of the C++ FAQ at :

  http://www.cerfnet.com/~mpcline/c++-faq-lite/

Also mirrored at (among others) :

  http://www.cs.bham.ac.uk/~jdm/CPP/index.html

HTH.


André Majorel
amajorel@teaser.fr
http://www.teaser.fr/~amajorel/

</body></email><email><emailId>19980918154305</emailId><senderName>Peter Hanecak</senderName><senderEmail>hany@fornax.elf.stuba.sk</senderEmail><timestampReceived>1998-09-18 15:43:05-0400</timestampReceived><subject>buf report</subject><body>

hello,

i'll take it stright:

problem:  i have linux box with X Windows. i have been using kernel 2.0.35
compiled with gcc version 2.7.2.3. then i made update of gcc from version
2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,
modules, ... as when previously compiling). after all that my X do not runs.
i include startx output when using XFree86-SVGA-3.3.2.3-18.i386.rpm and when
using xsvga.rpm (from suse). when starting X, some process produce core
file.

here's (i hope) relevant system info:
gcc-c++-2.8.1-1
gcc-2.8.1-1
glibc-2.0.7-21
glibc-devel-2.0.7-23
XFree86-3.3.2.3-18
XFree86-libs-3.3.2.3-18


								Hany

===============================================================================
= Hany                             =       oo  oo oooooo oo  oo oo  oo        =
= hanecak@elf.stuba.sk             =       oooooo oo  oo ooo oo oooooo        =
= http://fornax.elf.stuba.sk/~hany =       oo  oo oo  oo oo ooo   oo          =
===============================================================================

["startx-xsvga_2035.out" (TEXT/PLAIN)]



XFree86 Version 3.3.2.3 / X Window System
(protocol Version 11, revision 0, vendor release 6300)
Release Date: July 15 1998
	If the server is older than 6-12 months, or if your card is newer
	than the above date, look for a newer version before reporting
	problems.  (see http://www.XFree86.Org/FAQ)
Operating System: Linux 2.0.33 i686 [ELF] 
Configured drivers:
  SVGA: server for SVGA graphics adaptors (Patchlevel 0):
      NV1, STG2000, RIVA128, ET4000, ET4000W32, ET4000W32i,
      ET4000W32i_rev_b, ET4000W32i_rev_c, ET4000W32p, ET4000W32p_rev_a,
      ET4000W32p_rev_b, ET4000W32p_rev_c, ET4000W32p_rev_d, ET6000, ET6100,
      et3000, pvga1, wd90c00, wd90c10, wd90c30, wd90c24, wd90c31, wd90c33,
      gvga, ati, sis86c201, sis86c202, sis86c205, tvga8200lx, tvga8800cs,
      tvga8900b, tvga8900c, tvga8900cl, tvga8900d, tvga9000, tvga9000i,
      tvga9100b, tvga9200cxr, tgui9400cxi, tgui9420, tgui9420dgi,
      tgui9430dgi, tgui9440agi, cyber9320, tgui9660, tgui9680, tgui9682,
      tgui9685, cyber9382, cyber9385, cyber9388, cyber9397, cyber9520,
      3dimage975, 3dimage985, clgd5420, clgd5422, clgd5424, clgd5426,
      clgd5428, clgd5429, clgd5430, clgd5434, clgd5436, clgd5446, clgd5480,
      clgd5462, clgd5464, clgd5465, clgd6205, clgd6215, clgd6225, clgd6235,
      clgd7541, clgd7542, clgd7543, clgd7548, clgd7555, ncr77c22, ncr77c22e,
      cpq_avga, mga2064w, mga1064sg, mga2164w, mga2164w AGP, oti067, oti077,
      oti087, oti037c, al2101, ali2228, ali2301, ali2302, ali2308, ali2401,
      cl6410, cl6412, cl6420, cl6440, video7, ark1000vl, ark1000pv,
      ark2000pv, ark2000mt, mx, realtek, AP6422, AT24, AT3D, s3_virge,
      s3_svga, ct65520, ct65525, ct65530, ct65535, ct65540, ct65545,
      ct65546, ct65548, ct65550, ct65554, ct65555, ct68554, ct64200,
      ct64300, generic
(using VT number 7)

XF86Config: /usr/X11R6/lib/X11/XF86Config
(**) stands for supplied, (--) stands for probed/default values
(**) XKB: keycodes: "xfree86"
(**) XKB: types: "default"
(**) XKB: compat: "default"
(**) XKB: symbols: "us(pc101)"
(**) XKB: geometry: "pc"
(**) XKB: rules: "xfree86"
(**) XKB: model: "pc101"
(**) XKB: layout: "us"
(**) Mouse: type: Microsoft, device: /dev/mouse, baudrate: 1200
(**) Mouse: buttons: 3, 3 button emulation (timeout: 50ms)
(**) SVGA: Graphics device ID: "My Video Card"
(**) SVGA: Monitor ID: "My Monitor"
(--) SVGA: Invalid vertical timing for mode "400x300". Deleted.
Warning: The directory "/usr/X11R6/lib/X11/fonts/100dpi/" does not exist.
         Entry deleted from font path.
(**) FontPath set to \
"/usr/X11R6/lib/X11/fonts/misc/,/usr/X11R6/lib/X11/fonts/Type1/,/usr/X11R6/lib/X11/fon \
ts/Speedo/,/usr/X11R6/lib/X11/fonts/75dpi/,/usr/X11R6/lib/X11/fonts/ISO-8859-2/100dpi: \
unscaled,/usr/X11R6/lib/X11/fonts/ISO-8859-2/100dpi,/usr/X11R6/lib/X11/fonts/ISO-8859- \
2/75dpi:unscaled,/usr/X11R6/lib/X11/fonts/ISO-8859-2/75dpi,/usr/X11R6/lib/X11/fonts/ISO-8859-2/misc:unscaled,/usr/X11R6/lib/X11/fonts/ISO-8859-2/misc"
                
_X11TransSocketUNIXConnect: Can't connect: errno = 111
giving up.

xinit:  Connection refused (errno 111):  unable to connect to X server

xinit:  No such process (errno 3):  Server error.


["startx-xfSVGA_2035.out" (TEXT/PLAIN)]



XFree86 Version 3.3.2.3 / X Window System
(protocol Version 11, revision 0, vendor release 6300)
Release Date: July 15 1998
	If the server is older than 6-12 months, or if your card is newer
	than the above date, look for a newer version before reporting
	problems.  (see http://www.XFree86.Org/FAQ)
Operating System: Linux 2.0.34 i686 [ELF] 
Configured drivers:
  SVGA: server for SVGA graphics adaptors (Patchlevel 0):
      NV1, STG2000, RIVA128, ET4000, ET4000W32, ET4000W32i,
      ET4000W32i_rev_b, ET4000W32i_rev_c, ET4000W32p, ET4000W32p_rev_a,
      ET4000W32p_rev_b, ET4000W32p_rev_c, ET4000W32p_rev_d, ET6000, ET6100,
      et3000, pvga1, wd90c00, wd90c10, wd90c30, wd90c24, wd90c31, wd90c33,
      gvga, ati, sis86c201, sis86c202, sis86c205, tvga8200lx, tvga8800cs,
      tvga8900b, tvga8900c, tvga8900cl, tvga8900d, tvga9000, tvga9000i,
      tvga9100b, tvga9200cxr, tgui9400cxi, tgui9420, tgui9420dgi,
      tgui9430dgi, tgui9440agi, cyber9320, tgui9660, tgui9680, tgui9682,
      tgui9685, cyber9382, cyber9385, cyber9388, cyber9397, cyber9520,
      3dimage975, 3dimage985, clgd5420, clgd5422, clgd5424, clgd5426,
      clgd5428, clgd5429, clgd5430, clgd5434, clgd5436, clgd5446, clgd5480,
      clgd5462, clgd5464, clgd5465, clgd6205, clgd6215, clgd6225, clgd6235,
      clgd7541, clgd7542, clgd7543, clgd7548, clgd7555, ncr77c22, ncr77c22e,
      cpq_avga, mga2064w, mga1064sg, mga2164w, mga2164w AGP, oti067, oti077,
      oti087, oti037c, al2101, ali2228, ali2301, ali2302, ali2308, ali2401,
      cl6410, cl6412, cl6420, cl6440, video7, ark1000vl, ark1000pv,
      ark2000pv, ark2000mt, mx, realtek, AP6422, AT24, AT3D, s3_virge,
      s3_svga, ct65520, ct65525, ct65530, ct65535, ct65540, ct65545,
      ct65546, ct65548, ct65550, ct65554, ct65555, ct68554, ct64200,
      ct64300, generic
(using VT number 7)

XF86Config: /usr/X11R6/lib/X11/XF86Config
(**) stands for supplied, (--) stands for probed/default values
(**) XKB: keycodes: "xfree86"
(**) XKB: types: "default"
(**) XKB: compat: "default"
(**) XKB: symbols: "us(pc101)"
(**) XKB: geometry: "pc"
(**) XKB: rules: "xfree86"
(**) XKB: model: "pc101"
(**) XKB: layout: "us"
(**) Mouse: type: Microsoft, device: /dev/mouse, baudrate: 1200
(**) Mouse: buttons: 3
(**) SVGA: Graphics device ID: "My Video Card"
(**) SVGA: Monitor ID: "My Monitor"
(--) SVGA: Mode "640x480" needs hsync freq of 36.46 kHz. Deleted.
(--) SVGA: Mode "800x600" needs hsync freq of 37.88 kHz. Deleted.
(--) SVGA: Mode "800x600" needs hsync freq of 48.08 kHz. Deleted.
(--) SVGA: Mode "1024x768" needs hsync freq of 48.36 kHz. Deleted.
(--) SVGA: Mode "1024x768" needs hsync freq of 56.48 kHz. Deleted.
(--) SVGA: Mode "1024x768" needs hsync freq of 62.50 kHz. Deleted.
(--) SVGA: Mode "1280x1024" needs hsync freq of 64.25 kHz. Deleted.
(--) SVGA: Mode "1280x1024" needs hsync freq of 78.86 kHz. Deleted.
(--) SVGA: Mode "1280x1024" needs hsync freq of 81.13 kHz. Deleted.
(--) SVGA: Mode "320x240" needs hsync freq of 39.38 kHz. Deleted.
(--) SVGA: Invalid vertical timing for mode "400x300". Deleted.
(--) SVGA: Mode "400x300" needs hsync freq of 37.88 kHz. Deleted.
(--) SVGA: Mode "400x300" needs hsync freq of 48.08 kHz. Deleted.
(--) SVGA: Mode "480x300" needs hsync freq of 37.80 kHz. Deleted.
(--) SVGA: Mode "480x300" needs hsync freq of 39.56 kHz. Deleted.
(--) SVGA: Mode "480x300" needs hsync freq of 48.00 kHz. Deleted.
Warning: The directory "/usr/X11R6/lib/X11/fonts/100dpi/" does not exist.
         Entry deleted from font path.
(**) FontPath set to \
"/usr/X11R6/lib/X11/fonts/misc/,/usr/X11R6/lib/X11/fonts/Type1/,/usr/X11R6/lib/X11/fonts/Speedo/,/usr/X11R6/lib/X11/fonts/75dpi/"
                
_X11TransSocketUNIXConnect: Can't connect: errno = 111
giving up.

xinit:  Connection refused (errno 111):  unable to connect to X server

xinit:  No such process (errno 3):  Server error.



</body></email><email><emailId>19980918164343</emailId><senderName>Harald Koenig</senderName><senderEmail>koenig@tat.physik.uni-tuebingen.de</senderEmail><timestampReceived>1998-09-18 16:43:43-0400</timestampReceived><subject>Re: buf report</subject><body>

On Sep 18, Peter Hanecak wrote:

&gt; hello,
&gt; 
&gt; i'll take it stright:
&gt; 
&gt; problem:  i have linux box with X Windows. i have been using kernel 2.0.35
&gt; compiled with gcc version 2.7.2.3. then i made update of gcc from version
&gt; 2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,
&gt; modules, ... as when previously compiling). after all that my X do not runs.
&gt; i include startx output when using XFree86-SVGA-3.3.2.3-18.i386.rpm and when
&gt; using xsvga.rpm (from suse). when starting X, some process produce core
&gt; file.

read XFree86 FAQ Q.E10


Harald
--
All SCSI disks will from now on                     ___       _____
be required to send an email notice                0--,|    /OOOOOOO\
24 hours prior to complete hardware failure!      &lt;_/  /  /OOOOOOOOOOO\
                                                    \  \/OOOOOOOOOOOOOOO\
                                                      \ OOOOOOOOOOOOOOOOO|//
Harald Koenig,                                         \/\/\/\/\/\/\/\/\/
Inst.f.Theoret.Astrophysik                              //  /     \\  \
koenig@tat.physik.uni-tuebingen.de                     ^^^^^       ^^^^^

</body></email><email><emailId>19980918174409</emailId><senderName>Alan Cox</senderName><senderEmail>alan@lxorguk.ukuu.org.uk</senderEmail><timestampReceived>1998-09-18 17:44:09-0400</timestampReceived><subject>Re: buf report</subject><body>

&gt; problem:  i have linux box with X Windows. i have been using kernel 2.0.35
&gt; compiled with gcc version 2.7.2.3. then i made update of gcc from version
&gt; 2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,

Dont

Linux 2.0.x does not support being compiled with gcc 2.8.x or egcs. Use
gcc 2.7.2.*

</body></email><email><emailId>19980918180642</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-09-18 18:06:42-0400</timestampReceived><subject>Re: buf report</subject><body>

&gt; i'll take it stright:
&gt; problem:  i have linux box with X Windows. i have been using kernel 2.0.35
&gt; compiled with gcc version 2.7.2.3. then i made update of gcc from version
&gt; 2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,
&gt; modules, ... as when previously compiling). after all that my X do not runs.
&gt; i include startx output when using XFree86-SVGA-3.3.2.3-18.i386.rpm and when
&gt; using xsvga.rpm (from suse). when starting X, some process produce core
&gt; file.

There are a number of problems caused by newer versions of gcc with the
Linux kernel.  Although gcc 2.7 is horribly out of date (by my view), no
one much feels like messing with the 2.0.x tree much.  The new development
tree (2.1.x) is supposedly completely compatible with gcc 2.8 and, better
yet, egcs 1.1.

SuSe does have a web page with some patches for 2.0.x and gcc &gt; 2.7, at:
http://www.suse.de/~florian/kernel+egcs.html
I tried it and found that it fixed the core dump I was getting whenever I
used isapnp as well as the X problem you mention above, but I still got
some strange happenings (coredumps from smbmount, and other random stuff
dependant on kernel-level stuff).

Moral of the story, IMO, is to just a) keep your old kernel, or b) keep
gcc 2.7 around for compiling your kernel.  'Tis a shame - egcs seems much
better at optimizing.  Just hang on for 2.2 if you don't want to bother
with a dev kernel and everything should be cool.

</body></email><email><emailId>19980910145646</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-09-10 14:56:46-0400</timestampReceived><subject>Re: New libg++ and no more libg++ from H.J.</subject><body>

&gt; 
&gt; The new libg++ installs differently and is numbered differently than
&gt; those from H.J.  Are we definately committing to this new scheme?
&gt; 

Mine was 2.8.2. The new one was 2.8.1.2. It is not a very big deal.
Either way is fine with me. FYI, libg++ uses my interface change.
It should not be a problem for C++ binaries linked with shared
libg++ even if you remove libg++-2-libc6.0-1-2.8.2.so.

-- 
H.J. Lu (hjl@gnu.org)

</body></email><email><emailId>19980911133919</emailId><senderName>Alexandre Oliva</senderName><senderEmail>oliva@dcc.unicamp.br</senderEmail><timestampReceived>1998-09-11 13:39:19-0400</timestampReceived><subject>Re: New libg++ and no more libg++ from H.J.</subject><body>

Manfred Hollstein &lt;manfred@s-direktnet.de&gt; writes:

&gt; Alexandre, on which kind of system using which shell did you observe this
&gt; behaviour?

[`!' not working to negate the exit status of a pipe]

Do you want the full list?  :-)

On Solaris 2.[56], SunOS 4.1.3, IRIX 5.2, IRIX 6.3 and DEC OSF1 4.0,
always with /bin/sh

It would only work on GNU/Linux and other systems that have `bash' in
/bin/sh

-- 
Alexandre Oliva
mailto:oliva@dcc.unicamp.br mailto:aoliva@acm.org
http://www.dcc.unicamp.br/~oliva
Universidade Estadual de Campinas, SP, Brasil

</body></email><email><emailId>19980908125821</emailId><senderName>Dave Mielke</senderName><senderEmail>davem@cpu2311.adsl.bellglobal.com</senderEmail><timestampReceived>1998-09-08 12:58:21-0400</timestampReceived><subject>Re: strange time zone behaviour by linux on windoze partition</subject><body>

Have you checked "/etc/sysconfig/clock" to insure that "UTC" is "false"? 

-- 
Dave Mielke       | Phone: 1-613-726-0014
856 Grenon Avenue | Email: dmielke@sympatico.ca
Ottawa, Ontario   |
Canada  K2B 6G3   |

</body></email><email><emailId>19980906124835</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-09-06 12:48:35-0400</timestampReceived><subject>[egcs-1.1b] make -k check error</subject><body>

Dear Sir,

I'm trying out egcs-1.1b in i586-pc-linux-gnu w/ Linux 2.1.115, 
GLIBC 2.0.94. `make bootstrap' is passed. But when `make -k check',
some errors occur:


		=== libio tests ===  (same error in gcc g++ g77 test etc.)

Schedule of variations:
    unix

Running target unix
Using /usr/share/dejagnu/baseboards/unix.exp as board description file for target.
Using /usr/share/dejagnu/config/unix.exp as generic interface file for target.
Using ../../../../libio/testsuite/config/default.exp as tool-and-target-specific interface file.
Running ../../../../libio/testsuite/libio.tests/hounddog.exp ...
open(slave pty): bad file number
parent sync byte write: broken pipe
make[3]: *** [just-check] Error 255

My system seems to be Unix98 compliant (in pty's aspect, I've
made all ptys and /dev/ptmx, /dev/pts respectively following the
instructions in linux/Documentation/devices.txt). Thanks very much.


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19980908210138</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-09-08 21:01:38-0400</timestampReceived><subject>binutils 2.9.1.0.12 is released.</subject><body>

Hi,

I'd like to release binutils 2.9.1.0.12 to Linux this weekend. Please
test it as much as you can.

Thanks.


-- 
H.J. Lu (hjl@gnu.org)
----
This is the beta release of binutils 2.9.1.0.12 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, an alpha bug fix and an exception frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

I am planing to release this to the public as the final public release
for binutils 2.9.1.0.x based on binutils 2.9.1 and the current 16-bit
x86 assembler changes. The future release will be based on the binutils
snapshot, which has a different approach for 16-bit x86 assembly code.
Please test it as much as you can.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.12 to hjl@lucon.org.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.12.tar.gz. Source code.
2. binutils-2.9.1.0.11-2.9.1.0.12.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.12-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.12-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.12-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.12-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.12-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.12-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
09/08/98

</body></email><email><emailId>19980909051653</emailId><senderName>"Alex VonYonkers"</senderName><senderEmail>alex@sandlabs.com</senderEmail><timestampReceived>1998-09-09 05:16:53-0400</timestampReceived><subject>SIGSEGV</subject><body>


Dan, I have this problem and I do not know if it has been corrected 
for in the newer version of GCC for Linux. I am running GCC
version 2.7.2.1 on an old Compaq XE560 (pentium/60MhZ) with
4OMBytes of RAM and 500MBytes of HD: The Linux Version is
2.0.29 of SlackWare 3.2


Here is a copy of my post to alt.os.linux.slakware

===============================================
Please forgive me if this is not the corect group to post my 
question.
If this is the case perhaps somebody could show me the correct path
:-)
I posted here because I use the Slakware Linux Package.

Here is my problem:

I need to make some driver to run a Graphics card which resides
at address 0XD0000

To test the access to this address I made the following short 
program:

#include &lt;stdio.h&gt;

void main()
{

	unsigned char *pt;
	unsigned char mem;
	
	pt = (unsigned char*)(0xD0000);

	mem = *pt;			// HERE IS WHERE THE ERROR MESSAGE OCCURES :-(

}



When ever I run it i get the " Segmentation Fault. Core Dumped"
 error message and a core dump file is created.

A fast gdb session shows" Program received signal SIGSEGV,
Segmentation Fault"!

I always believed that Linux does not use SEGMENTS. Is/are
there any switches in the compiler that I have to set in order
to correct this problem?

I compile like "gcc -m486 -g  test.c"


Any help will be appreciated.
comm-man




===============================================

A partial copy of 

The Linux GCC HOWTO

Daniel Barlow
&lt;dan@detached.demon.co.uk&gt;

v1.17, 28 February 1996 

Internal compiler error: cc1 got fatal signal 11 

Signal 11 is SIGSEGV, or `segmentation violation'. Usually it means 
that the program got its pointers confused and tried to write to 
memory
it didn't own. So, it could be a gcc bug. 

gcc is however, a well tested and reliable piece of software, for the 
most part. It also uses a large number of complex data structures, 
and an
awful lot of pointers. In short, it's the pickiest RAM tester 
commonly available. If you can't duplicate the bug --- if it doesn't 
stop in the
same place when you restart the compilation --- it's almost certainly 
a problem with your hardware (CPU, memory, motherboard or cache).
Don't claim it as a bug because your computer passes the power-on 
checks or runs Windows ok or whatever; these `tests' are commonly and
rightly held to be worthless. And don't claim it's a bug because a 
kernel compile always stops during `make zImage' --- of course it 
will!
`make zImage' is probably compiling over 200 files; we're looking for 
a slightly smaller place than that. 

If you can duplicate the bug, and (better) can produce a short 
program that exhibits it, you can submit it as a bug report to the 
FSF, or to the
linux-gcc mailing list. See the gcc documentation for details of 
exactly what information they need. 
Alex
Making Internet Possible
Alex@sandlabs.com
http://www.sandlabs.com

</body></email><email><emailId>19980909185611</emailId><senderName>Eric W !  Biederman</senderName><senderEmail>ebiederm@inetnebr.com</senderEmail><timestampReceived>1998-09-09 18:56:11-0400</timestampReceived><subject>Re: strange time zone behaviour by linux on windoze partition</subject><body>

&gt;&gt;&gt;&gt;&gt; "TN" == Tony Nugent &lt;tony@usq.edu.au&gt; writes:

TN&gt; System:	i386 RedHat 5.1 (glibc6)
TN&gt; I have not seen this problem myself, but I am passing this on as I am the
TN&gt; linux support person here at USQ.  This is what has been described to me,
TN&gt; and I haven't a clue as to why this is happening.  However, I suspect that
TN&gt; it could be a glibc issue...

TN&gt; When linux boots up and uses the system time, it all looks ok.  We are
TN&gt; GMT+10 hours here (Queensland Australia), and the bios clock is set at the
TN&gt; local time.  /etc/localtime is a symlink pointing to the correct
TN&gt; /usr/share/zoneinfo/ file.

TN&gt; Write a file to a vfat-mounted dos partition with linux and the timestamps
TN&gt; look good - the correct (current) time as would be expected.  (Of course,
TN&gt; same for timestamps on new files on the linux filesystem).

TN&gt; Boot into windows and the timestamps on any of these files are 10 hours
TN&gt; behind!

TN&gt; Create new files with the current timestamp with windose and all looks
TN&gt; good.  But boot into linux and look at those files -- they are 10 hours
TN&gt; ahead!  (Which means thay can be set for a time in the future).

TN&gt; This is obviously a problem related to the local time difference, but what
TN&gt; is going on?

TN&gt; Is windows at fault, or linux?  Or have we just discovered the secrets of a
TN&gt; time-travel machine?? :-)

Looking at 2.0.32 this is what I see.
The kernel keeps track of the local time, which is set bye the
system call settimeofday.

When a fat filesystem date is converted to a unix date minuteswest minutes are added
to the time.

When a unix date is converted to a fat filesystem date minuteswest are subtracted
from the current time.

So it appears that the linux kernel has the wrong idea of the local time zone, a la
minueswest.

As I understand it the first call to settimeofday that includes time zone 
information must have the correct time zone set, to give linux the proper
system time (from the real time clock).  So the time zone got set
right at least once.  
For machines with clocks in UTC the first call to settimeofday with a
time zone specified must not set a time zone offset (minuteswest).

All further calls to settimeofday (with a time zone specified) just
affect the kernel's notion of local time.

So a call to settimeofday with an appropriate time zone value should
fix the problem.  Why this doesn't happen automatically I don't know.

I hope this helps,
Eric

</body></email><email><emailId>19980909215052</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-09-09 21:50:52-0400</timestampReceived><subject>disabling warnings</subject><body>


Is there a simple way to turn off a given warning in gcc?  Some of them
are covered by -W options, but not all of them.  I'm thinking there must
be a #pragma for doing this, but it's not mentioned in the info page or
the man page.  I'm using egcs 1.1b.
(The specific ones I'm trying to get rid of right now are:
warning: `class Foo' only defines a private destructor and has no friends
warning: taking address of temporary
however I'd like to be able to turn off a given warning at will..)

</body></email><email><emailId>19980910145933</emailId><senderName>Socrate</senderName><senderEmail>raduf@staff.tuiasi.ro</senderEmail><timestampReceived>1998-09-10 14:59:33-0400</timestampReceived><subject></subject><body>


Hi!

Two weeks ago I erase my old RedHat 4.2 and I install RedHat 5.1 on my
machine. I choose to install all packages, and the installation was out of
any problem.

Next time when I logging in as user and I tried to compile a project of
mine for the school which compiled well until then, I met the following
error (cut &amp; paste) from the screen:


[radu@home /home/radu/dev/dc/UDC/EasyString]$ make

Building libraries: EasyString done.
Building example(s): exString.cc/usr/bin/ld: warning: libstdc++.so.2.7.2,
needed by /local/share/lib/libEasyString.so, may conflict with
libstdc++.so.2.8
done.


I entered as root, I checked and I saw that two installed packages could
be the source of the error:
libg++-2.7.2.8-9.i386.rpm, owner of the file /usr/lib/libstdc++.so.2.7.2
and
libstdc++-2.8.0-8.i386.rpm, owner of the file /usr/lib/libstdc++.so.2.8.

I uninstalled the first one (the older one) with the following command:
[root@home /mnt/cdrom/RedHat/RPMS]# rpm -e libg++-2.7.2.8-9; ldconfig
and all was ok. Then I tried to compile again my project:


[radu@home /home/radu/dev/dc/UDC/EasyString]$ make

Building libraries: EasyString done.
Building example(s): exString.cc/usr/bin/ld: warning: libg++.so.2.7.2,
needed by /local/share/lib/libEasyString.so, not found (try using --rpath)
/usr/bin/ld: warning: libstdc++.so.2.7.2, needed by
/local/share/lib/libEasyString.so, not found (try using --rpath)
 done.


I tried then to install agian and to uninstall the other package (the newer
one), but it cannot be uninstalled becouse of some dependencies.

Can anybody help me and tell me what's wrong? What can I do to finish my
project? It's really a conflict between these two libs or my makefile are
wrong, even before RH 5.1 my makefiles works well? I attached my project to
this message.

Thx a lot,
  Socrate

["EasyString.tgz" (APPLICATION/octet-stream)]

</body></email><email><emailId>19980911151327</emailId><senderName>Davide Libenzi</senderName><senderEmail>dlibenzi@maticad.it</senderEmail><timestampReceived>1998-09-11 15:13:27-0400</timestampReceived><subject>RedHat optimized pricing algorithm bug ( for clients only ) ...</subject><body>

I've found a bug in RedHat billing algorithm :


#define MAX_TIMES    8
#define CLIENT_FOOL_CNT    2

double    client_billing (int client_id, char * card_no, double price)
{

    int ii,
        times = MAX_TIMES * (double) rand() / (double) RAND_MAX;
    double total = 0.0;

    for (ii = 0; ii &lt; times; ii++)
    {
        charge_credit_card(card_no, price);

        if (client_angry(client_id))
            break;

        total += price;
    }

    if (ii &gt; CLIENT_FOOL_CNT)
        push_client_in_fools(client_id);

    return (total);

}

BE ADVISED !!!


This is an example of how to aid the Linux movement.

</body></email><email><emailId>19980911153951</emailId><senderName>Manfred Hollstein</senderName><senderEmail>manfred@s-direktnet.de</senderEmail><timestampReceived>1998-09-11 15:39:51-0400</timestampReceived><subject>Re: New libg++ and no more libg++ from H.J.</subject><body>

On nil, 10 September 1998, 02:24:26, oliva@dcc.unicamp.br wrote:

 &gt; H J Lu &lt;hjl@lucon.org&gt; writes:
 &gt; 
 &gt; &gt; ftp://ftp.yggdrasil.com/private/hjl/libg++-2.8.1.2.tar.gz
 &gt; 
 &gt; Looks like it will only configure correctly if the shell supports `!'
 &gt; to negate the result of a pipeline.  Here's a patch.
 &gt; 
 &gt; -- 
 &gt; Alexandre Oliva
 &gt; mailto:oliva@dcc.unicamp.br mailto:aoliva@acm.org
 &gt; http://www.dcc.unicamp.br/~oliva
 &gt; Universidade Estadual de Campinas, SP, Brasil
 &gt;
 &gt; --- libg++/configure.in.orig	Tue Sep  8 10:31:54 1998
 &gt; +++ libg++/configure.in	Wed Sep  9 02:06:54 1998
 &gt; @@ -211,7 +211,8 @@
 &gt;  
 &gt;  # Get lgpl.texinfo
 &gt;  if [ ! -f ${topsrcdir}/texinfo/lgpl.texinfo ] ; then
 &gt; -  if ! ln -s ${topsrcdir}/libg++/texinfo/lgpl.texinfo . ; then
 &gt; +  if ln -s ${topsrcdir}/libg++/texinfo/lgpl.texinfo . ; then :
 &gt; +  else
 &gt;      cp ${topsrcdir}/libg++/texinfo/lgpl.texinfo .
 &gt;    fi
 &gt;  fi

Alexandre, on which kind of system using which shell did you observe this
behaviour?

manfred

</body></email><email><emailId>19980912071945</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-09-12 07:19:45-0400</timestampReceived><subject>egcs 2.91.57 installed, but...</subject><body>

Dear Sir,

I've successfully compiled egcs 2.91.57 on Linux 2.1.115 and GLIBC 2.0.95.
However, not everything is well done. All simple codes, like
	#include &lt;stdio.h&gt;
	main() { puts("Hello world."); }
are statically linked so that are huge in space. And trying adding 
-shared in compilation, a larger binary is generated with segmentation 
error in execusion.

BTW, the newly installed GLIBC 2.0.95 seems to be a bit unstable for some
reason(s) I never know. Old binaries can be executed properly, but newly 
compiled expect 5.26.0 (compiled both with GLIBC 2.0.94 and .95) caused 
segmentation fault.

There seems no hardware problems, 'cause all versions of GLIBC (2.0.6, 
2.0.94) and egcs (1.0.2, 1.0.3) ran very well with all versions of Linux 
kernel (most minor patches &lt; 2.1.115). Binutils is 2.9.1.0.12. 

I configured egcs 2.91.57 as
  ../configure --prefix=/usr --enable-shared --with-gnu-as --with-gnu-ld 
  --enable-threads --enable-version-specific-runtime-libs
and `make bootstrap' was properly done.

Thanks for helping, and following is the output of config.guess file you 
asked to be sent to you:

i586-pc-linux-gnu


.e'osai ko sarji la lojban.	==&gt; Please support the logical language.
co'o mi'e lindjy,min.		==&gt; Goodbye, I'm Lin Zhe Min.
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19980912072903</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-09-12 07:29:03-0400</timestampReceived><subject>expect 5.26.0 compiled by egcs-2.91.57 w/ GLIBC 2.0.95</subject><body>

The output of strace:

brk(0)                                  = 0x806c354
open("/etc/ld.so.preload", O_RDONLY)    = -1 ENOENT (No such file or directory)
open("/usr/lib/i586/mmx/libtcl8.0.so", O_RDONLY) = -1 ENOENT (No such file or directory)
stat("/usr/lib/i586/mmx", 0xbffff30c)   = -1 ENOENT (No such file or directory)
open("/usr/lib/i586/libtcl8.0.so", O_RDONLY) = -1 ENOENT (No such file or directory)
stat("/usr/lib/i586", 0xbffff30c)       = -1 ENOENT (No such file or directory)
open("/usr/lib/mmx/libtcl8.0.so", O_RDONLY) = -1 ENOENT (No such file or directory)
stat("/usr/lib/mmx", 0xbffff30c)        = -1 ENOENT (No such file or directory)
open("/usr/lib/libtcl8.0.so", O_RDONLY) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3"..., 4096) = 4096
mmap(0, 797740, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x40014000
mprotect(0x400cf000, 31788, PROT_NONE)  = 0
mmap(0x400cf000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0xba000) = 0x400cf000
mmap(0x400d5000, 7212, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|0x20, 4294967295, 0) = 0x400d5000
close(3)                                = 0
open("/usr/lib/libdl.so.2", O_RDONLY)   = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY)      = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=10166, ...}) = 0
mmap(0, 10166, PROT_READ, MAP_PRIVATE, 3, 0) = 0x400d7000
close(3)                                = 0
open("/lib/libdl.so.2", O_RDONLY)       = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3"..., 4096) = 4096
mmap(0, 11300, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x400da000
mprotect(0x400dc000, 3108, PROT_NONE)   = 0
mmap(0x400dc000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x1000) = 0x400dc000
close(3)                                = 0
open("/usr/lib/libm.so.6", O_RDONLY)    = -1 ENOENT (No such file or directory)
open("/lib/libm.so.6", O_RDONLY)        = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3"..., 4096) = 4096
mmap(0, 112608, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x400dd000
mprotect(0x400f8000, 2016, PROT_NONE)   = 0
mmap(0x400f8000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x1a000) = 0x400f8000
close(3)                                = 0
open("/usr/lib/libutil.so.1", O_RDONLY) = -1 ENOENT (No such file or directory)
open("/lib/libutil.so.1", O_RDONLY)     = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3"..., 4096) = 4096
mmap(0, 9664, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x400f9000
mprotect(0x400fb000, 1472, PROT_NONE)   = 0
mmap(0x400fb000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0x1000) = 0x400fb000
close(3)                                = 0
open("/usr/lib/libc.so.6", O_RDONLY)    = -1 ENOENT (No such file or directory)
open("/lib/libc.so.6so.6", O_RDONLY)    = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3"..., 4096) = 4096
mmap(0, 929952, PROT_READ|PROT_EXEC, MAP_PRIVATE, 3, 0) = 0x400fc000
mprotect(0x401d8000, 28832, PROT_NONE)  = 0
mmap(0x401d8000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED, 3, 0xdb000) = 0x401d8000
mmap(0x401dd000, 8352, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|0x20, 4294967295, 0) = 0x401dd000
close(3)                                = 0
mprotect(0x40014000, 765952, PROT_READ|PROT_WRITE) = 0
mprotect(0x40014000, 765952, PROT_READ|PROT_EXEC) = 0
--- SIGSEGV (Segmentation fault) ---
+++ killed by SIGSEGV +++



.e'osai ko sarji la lojban.	==&gt; Please support the logical language.
co'o mi'e lindjy,min.		==&gt; Goodbye, I'm Lin Zhe Min.
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19980912074443</emailId><senderName>Martin von Loewis</senderName><senderEmail>martin@mira.isdn.cs.tu-berlin.de</senderEmail><timestampReceived>1998-09-12 07:44:43-0400</timestampReceived><subject>Re: hello</subject><body>

&gt; Yes, I figured that out already :) The thing which interests me is if 
&gt; it's a new standard, or a bug in compiler?

It's not a new standard, it's the first C++ standard ever (ISO 14882).
It defines that the specific syntactic construct is a
ctor-initializer, which is defined in [class.base.init]/1:

ctor­initializer:
          : mem­initializer­list

mem­initializer­list:
          mem­initializer
          mem­initializer , mem­initializer­list

mem­initializer:
          mem­initializer­id ( expression­list-opt )

mem­initializer­id:
          ::-opt nested­name­specifier-opt class­name
          identifier

(different lines indicate alternatives, -opt indicates that the item
can be omitted). So you can use a scoped name only when initializing
base classes, not for members. The scope is meant only for
pathological cases, like

struct SomeName{
  SomeName(int){};
};

struct Derived:SomeName{
  int SomeName;
  Derived(int a, int b): ::SomeName(a), SomeName(b) {}
};

&gt; And if it's new, then what other new requirements I should be prepared 
&gt; to meet in my code?

g++ conforms to that standard better with every release, please read
the cp/NEWS file for changes.

&gt; And for me this message looks really crazy in this place. He probably 
&gt; want's something from the initialization "window(NULL)"... (this is the 
&gt; only conversion). But wouldn't it look strange with a 
&gt; "window((chtype*)NULL)", or sth? :-Q

The null-pointer constant in C++ is '0' (it is also 0 in ANSI C). NULL
is still supported for backward-compatibility, but has an
implementation-defined semantics. So you should write

   window(0)

Regards,
Martin

</body></email><email><emailId>19980914164404</emailId><senderName>Liviu Daia</senderName><senderEmail>daia@stoilow.imar.ro</senderEmail><timestampReceived>1998-09-14 16:44:04-0400</timestampReceived><subject>Re: SIGFPE Problem</subject><body>

On 14 September 1998, Nicolas Dotal &lt;nicolas@ft.net&gt; wrote:
&gt; 
&gt;    The program ephem_4.28 by Elwood Charles Downey is available at
&gt;    ftp.funet.fi - 128.214.248.6 under /pub/astro/progs/unix.
&gt;    It computes positions of Moon and planets with a fair accuracy.
&gt; 
&gt;    It offers a vi-like, comfortable interface.

    There's also an X version with a Motif interface (called, surprise,
"xephem") at Downey's home page:

	http://iraf.noao.edu/~ecdowney/xephem.html

    Much nicer IMO. :-)

&gt;    This program runs fine on a SUN Sparc IPX I may access, with two
&gt;    little modifications in io.c and time.c.
&gt;
&gt;    My concern is that it does not on Linux 1.2.3 ( dating 1996 ), but
&gt;    halts on " Floating-Point errors ".
&gt;
&gt;    The hardware is a Cyrix ( Pentium-like ) processor.
&gt;
&gt;    I tried to trace the execution and I think this happens around
&gt;    circum.c, on a SIGFPE signal.
&gt;
&gt;    However, if I know approximatively WHERE is the problem, I don't
&gt;    know at all HOW to solve it.
&gt;
&gt;    So, it would be very kind of you to have a look at this problem or
&gt;    to give me other directions to search.

    Well, I've been running version 3.0 here for more than an year,
without any problem whatsoever.  But anyway, you might consider
reporting that directly to the author (his address is in the README
file).

    Regards,

    Liviu

-- 
Dr. Liviu Daia                   e-mail:   daia@stoilow.imar.ro
Institute of Mathematics         web page: http://www.imar.ro/~daia
of the Romanian Academy          PGP key:  finger daia@stoilow.imar.ro

</body></email><email><emailId>19980915201623</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-09-15 20:16:23-0400</timestampReceived><subject>iostream header</subject><body>

Hello !!!

AFAIK there should be some compiler variables in iostream header. Like:

			left
			right
			.
			.
			.

But if you make a program like:

#include &lt;iostream.h&gt;

int main()
{
	value = 10;
	cout &lt;&lt; left &lt;&lt; value;
	return 0;
}

then it will report an error about a new variable called left. WHY???
I'm using gcc-2.7.2.1-2.
TNX!
				
								Bye.

                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19980917203355</emailId><senderName>Martin von Loewis</senderName><senderEmail>martin@mira.isdn.cs.tu-berlin.de</senderEmail><timestampReceived>1998-09-17 20:33:55-0400</timestampReceived><subject>Re: shared library question</subject><body>

&gt; What am i doing wrong? Or is it just a memory or stack curroption
&gt; somewhere?

The .init section contains pointers to initialization functions, not
the initialization functions themselves. To achieve what you want,
say

void __mylib_init(void) __attribute((constructor));

void
__mylib_init(void)
{
 ;
}

Hope this helps,
Martin

</body></email><email><emailId>19980918160114</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-09-18 16:01:14-0400</timestampReceived><subject>binutils 2.9.1.0.13 is released.</subject><body>

This release fixes an alpha bug and a PPC bug.


-- 
H.J. Lu (hjl@gnu.org)
---
This is the beta release of binutils 2.9.1.0.13 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

I am planing to release this to the public as the final public release
for binutils 2.9.1.0.x based on binutils 2.9.1 and the current 16-bit
x86 assembler changes. The future release will be based on the binutils
snapshot, which has a different approach for 16-bit x86 assembly code.
Please test it as much as you can.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.13 to hjl@lucon.org.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.13.tar.gz. Source code.
2. binutils-2.9.1.0.12-2.9.1.0.13.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.13-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.13-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.13-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.13-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.13-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.13-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
09/17/98

</body></email><email><emailId>19980919093458</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-09-19 09:34:58-0400</timestampReceived><subject>Re: buf report</subject><body>

On Fri, 18 Sep 1998, Kev wrote:

&gt; &gt; problem:  i have linux box with X Windows. i have been using kernel 2.0.35
&gt; &gt; compiled with gcc version 2.7.2.3. then i made update of gcc from version
&gt; &gt; 2.7.2.3 to version 2.8.1 . then i recompiled my kernel (same options,
&gt; 
&gt; There's your problem; don't compile the 2.0 kernels with gcc &gt; 2.7.2.3.
&gt; -- 
Hello !!!

You can fix this by applaying the ioport.c to 2.0.x kernels from 2.1.7x =&lt;

			
								Bye.



                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19980920235113</emailId><senderName>David Holland</senderName><senderEmail>dholland@cs.toronto.edu</senderEmail><timestampReceived>1998-09-20 23:51:13-0400</timestampReceived><subject>Enforcing symbol existence at link time</subject><body>

% cat foo.c
void foo() { blah(); }
% gcc -c foo.c
% gcc -shared -Wl,-soname,libfoo.so.0 foo.o -lc -o libfoo.so
% nm libfoo.so
[stuff]
         U blah
% cat bar.c
main() { foo(); }
% gcc -c bar.c
% gcc bar.o libfoo.so -o bar
% ./bar
./bar: can't resolve symbol 'blah'
%

Note that if you leave off the -lc when creating the library, it
detects the missing symbol when linking bar. I'm not sure I understand
the point of this behavior - shouldn't it always detect the missing
symbol when linking bar, whether or not the library DT_NEEDs anything?

The main question is, though, how do I build libfoo.so so that when I
have an undefined symbol that the -lc doesn't resolve, it complains
*then* rather than later on?

I remember being told during an earlier round of ELF wars that it was
possible, but I can't find the archives and can't find anything
promising in the ld man page or source.


-- 
   - David A. Holland             | (please continue to send non-list mail to
     dholland@cs.utoronto.ca      | dholland@hcs.harvard.edu. yes, I moved.)

     Any netkit mail should be sent to netbug@ftp.uk.linux.org, not me.

</body></email><email><emailId>19980923004136</emailId><senderName>Graham Knopp</senderName><senderEmail>graham@zimm.ucsf.edu</senderEmail><timestampReceived>1998-09-23 00:41:36-0400</timestampReceived><subject>gcc bug w/ "system" function</subject><body>


gcc version 2.7.2.3, Red Hat 5.0

We are experiencing a strange bug when calling the "system" function,
using simple
system commands like mv.

Code like:
system("cp a b");

creates b, but as an empty file.

Or:
system("mv a b");

creates an empty file b, correctly removing a.

However, these work on the command line.

Any ideas?  The verbose gcc output files - maybe the linking is
faulty?

Thanks for your help,

graham

Here is the verbose compiler output:

reading specs from /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/specs
gcc version 2.7.2.3
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/cpp -lang-c -v -undef
-D__GNUC__=2
-D__GNUC_MINOR__=7 -D__ELF__ -Dunix -Di386 -Dlinux -D__ELF__ -D__unix__
-D__i386__ -D__linux__ -D__unix -D__i386 -D__linux -Asystem(unix)
-Asystem(posix) -Acpu(i386) -Amachine(i386) AbsDiff.c /tmp/cca14247.i
GNU CPP version 2.7.2.3 (i386 Linux/ELF)
#include "..." search starts here:
#include &lt;...&gt; search starts here:
 /usr/local/include
 /usr/i386-redhat-linux/include
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/include
 /usr/include
End of search list.
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/cc1 /tmp/cca14247.i -quiet
-dumpbase AbsDiff.c -version -o /tmp/cca14247.s
GNU C version 2.7.2.3 (i386 Linux/ELF) compiled by GNU C version
2.7.2.3.
 as -V -Qy -o /tmp/cca142471.o /tmp/cca14247.s
GNU assembler version 2.8.1 (i686-pc-linux-gnu), using BFD version
linux-2.8.1.0.1
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/cpp -lang-c -v -undef
-D__GNUC__=2
-D__GNUC_MINOR__=7 -D__ELF__ -Dunix -Di386 -Dlinux -D__ELF__ -D__unix__
-D__i386__ -D__linux__ -D__unix -D__i386 -D__linux -Asystem(unix)
-Asystem(posix) -Acpu(i386) -Amachine(i386) Allocd.c /tmp/cca14247.i
GNU CPP version 2.7.2.3 (i386 Linux/ELF)
#include "..." search starts here:
#include &lt;...&gt; search starts here:
 /usr/local/include
 /usr/i386-redhat-linux/include
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/include
 /usr/include
End of search list. /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/cc1
/tmp/cca14247.i -quiet
-dumpbase Allocd.c -version -o /tmp/cca14247.s
GNU C version 2.7.2.3 (i386 Linux/ELF) compiled by GNU C version
2.7.2.3.
 as -V -Qy -o /tmp/cca142472.o /tmp/cca14247.s
GNU assembler version 2.8.1 (i686-pc-linux-gnu), using BFD version
linux-2.8.1.0.1
 /usr/lib/gcc-lib/i386-redhat-linux/2.7.2.3/cpp -lang-c -v -undef
-D__GNUC__=2
-D__GNUC_MINOR__=7 -D__ELF__ -Dunix -Di386 -Dlinux -D__ELF__ -D__unix__
-D__i386__ -D__linux__ -D__unix -D__i386 -D__linux -Asystem(unix)
-Asystem(posix) -Acpu(i386) -Amachine(i386) Allocdp.c /tmp/cca14247.i
et cetera


Graham P. Knopp, Ph.D.                 		 |                 
UNIX Systems Administrator                       |  "I'm already there.
Dill Research Group                    		 |   It's just mileage."
University of California San Francisco 	         |                       
graham@zimm.ucsf.edu                             |   - le courier du bois

</body></email><email><emailId>19980924000033</emailId><senderName>Mike Rushford</senderName><senderEmail>rushford@wenet.net</senderEmail><timestampReceived>1998-09-24 00:00:33-0400</timestampReceived><subject>Help compiling GCC please</subject><body>

I am trying to upgrade from gcc 2.7.2.1 to gcc 2.8.1 in order to compile
and run a test version of glibc2. I have a problem when I do a make
compare and the INSTALL says I need to get errors resolved before
installing the new gcc. Could someone please point me to a HOWTO or web
page that will help me make a successful compile of gcc? If someone
thinks they could help and want to see the compare error please let me
know and I will send it to you..




Thanks

--
Mike
rushford@wenet.net
http://www.hooked.net/~tvs/eyes/
http://sunmil1.uml.edu/tvs/members/mike_rushford.gif

"If a cluttered desk signs a cluttered mind,
 Of what, then, is an empty desk a sign?" -- Albert Einstein.

</body></email><email><emailId>19980925161933</emailId><senderName>holotko</senderName><senderEmail>micros50@computer.net</senderEmail><timestampReceived>1998-09-25 16:19:33-0400</timestampReceived><subject>Re: Using new/delets in C++ Constructors/Destructors...</subject><body>

&gt;

To all those who commented on this question I just want to say Thank You
for all your help, pointers, insights, and knowledge. My knowledge of C++
constructors/destructors has vastly improved thanks to all the help and I
have successfully solved the problem which I was working on. Thanks...

/John &lt;micros50@computer.net&gt;


&gt; Lets say I have a class "foo"and within a constructor for this class I
&gt; wish to use "new" to allocate memory space. For example:
&gt;
&gt; class foo
&gt; {
&gt;    private:
&gt;       char *c;
&gt;
&gt;    public:
&gt;       foo()                                          // constructor
&gt;        { c = new char [LEN + 1]; }
&gt;
&gt; };
&gt;
&gt; Of course there would be other member functions.  Now lets say I write
&gt; a program in which I create and use objects of class foo. When I am
&gt; finished using those objects I want to deallocate the memory which was
&gt; allocated when the object was constructed. To accomplish this can I
&gt; just simply write a destructor which, in it's simplest form might look
&gt; like this:
&gt;
&gt;    ~foo()
&gt;      { delete c; }
&gt;
&gt; Would this work? and, if so, how would I call this destructor when the
&gt; object is no longer needed, or would this be done automatically at
&gt; some point??
&gt;
&gt; Any help would be appreciated. Pardon my ignorance of this topic but,
&gt; I am in the process of trying to debug a small program which seems to
&gt; be leaking memory from somewhere and the program utilizes a
&gt; significant amount of C++ code.(I am curently in the learning stages
&gt; of C++).
&gt;
&gt; Thanks,
&gt;
&gt; /John &lt;micros50@computer.net&gt;
&gt;
&gt; --
&gt; email: micros50@computer.net
&gt; Local mailserver  , remote

--
email: micros50@computer.net
Local mailserver  , remote

</body></email><email><emailId>19980925181314</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-09-25 18:13:14-0400</timestampReceived><subject>ios:: members</subject><body>

Hello !!!

How to write a program that will display all ios:: members? Or can you
tell me all ios:: members (not C++ compliant)? I'm asking this because I'm
having some problems with boolalpha and noboolalpha! Anyone has a
suggestion?

								Bye.

                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19980926035929</emailId><senderName>Rob Dale</senderName><senderEmail>rob@nb.net</senderEmail><timestampReceived>1998-09-26 03:59:29-0400</timestampReceived><subject>[PATCH] 3DNow! for binutils-2.9.1.0.12</subject><body>

This was quick and dirty...
...does not work, but close.

Get it at http://www.nb.net/~rob/amd/amd.html

Robert Dale

</body></email><email><emailId>19980929195645</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-09-29 19:56:45-0400</timestampReceived><subject>Re: log2l missing from libm.so.6</subject><body>

&gt;&gt;&gt;&gt;&gt; Sid Boyce writes:

 &gt; Whilst compiling kvoicecontrol, I had an undefined error on log2l. It's defined
 &gt; in libc.so.5 and it's in /usr/lib/libm.a, so it seems this is an oversight.
It's not in glibc 2.0.7 - and therefore it's also not in libm.a from
glibc 2.0.7!
 &gt; 	I'm using egcs-1.0.3a, glibc-2.0.7-20 RPM's. Is this an oversight or fixed in a
 &gt; later level. I'd need a precompiled binary as both of my systems give sig11 on
 &gt; egcs compilation, either it's dashed bad luck that the DIMM's on one machine are
 &gt; bad and the SIM's on the other likewise, but I suspect it may be to do with the
 &gt; Cyrix CPU's.
 &gt; 	/usr/include/math.h has .......
 &gt; extern __CONSTVALUE __long_double_t log2l __P ((__long_double_t __x));
That math.h doesn't come from glibc-2.0.7-20, you should install the
devel package also!

log2l will be in glibc 2.1.  For now just use log.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19980929203311</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-09-29 20:33:11-0400</timestampReceived><subject>difference</subject><body>

Hello !!!

What's such a big difference between ios:: fixed and ios::scientific???


								Bye.

                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19981202011313</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-12-02 01:13:13-0400</timestampReceived><subject>Floating point exceptions</subject><body>


Recently a co-worker of mine needed to enable floating point exceptions in
order to track down an obscure math bug somewhere in the large application
we're working on.  His attempts to do this under his development
environment (MS Windows + MS "Developer Studio") not only crashed his
debugger, but also his entire system.  He asked me to try to track down
the bug on my system, which is Linux 2.0.33 + egcs 1.1 + gdb 4.17.0.4.

It took me a while to determine how to do this, and unfortunately it is
highly platform dependant, and not built into gdb at all.  However the few
people I showed it to were very excited (eg, "wow, I've always wanted to
know how to do that!") so I'm going to post it here in case others were
interested.

Anyhow...

As you'd expect any sort of floating point exception thrown by the
processor gets translated by the OS into SIGFPE, aka Arithmatic exception.
(type "info signal SIGFPE" at the gdb prompt)  So it's actually an OS
issue and not a debugger issue.  (It would be nice if someone could
integrate this into gdb so that you could enable or disable it at will
rather than having to recompile your program whenever you wanted to enable
the exception.  Of course, the code would be quite ugly if you wanted to
keep it cross platform - a mass of #ifdef's.)

My main hint was seeing how FreeBSD does it, from this post:

http://www.freebsd.org/cgi/getmsg.cgi?fetch=642373+645610+/usr/local/www/db/text/1998/freebsd-questions/19980816.freebsd-questions


As it turns out, this is one area that FreeBSD kicks Linux's ass.  Their
method is both platform independant and much cleaner.

Digging around in the include directories, I discovered fpu_control.h.
Glancing into it I learned that:

a) I'd need different code to enable exceptions depending on my processor
b) as of my system (which is a bit out of date, being 2.0.33 and libc5)
only i386 and 68000 have fpu_control functions availible.

Anyhow, all you need to do to enable floating point exceptions (causing a
SIGFPE to be thrown) is include fpu_control.h and add the line:

  __setfpucw(0x1372);

There are actually #define's for the various types of exceptions (divide
by zero, NaN (such as sqrt(-1), etc) in the i386/fpu_control.h, although I
didn't have much luck trying to composite them.  The above seems to enable
all of them.

If I get some time, and presuming someone hasn't already done this in the
development kernels, I may steal the FreeBSD interface and slap it in
there so as to make things a little more reasonable to use.  But in the
meantime you can catch your Inf's and NaN's using the simple code change
above.  (gdb already catches SIGFPE by default, so you don't need to do
anything there)

Hope this is useful to someone.


</body></email><email><emailId>19981005163716</emailId><senderName>"Ronald F. Guilmette"</senderName><senderEmail>rfg@monkeys.com</senderEmail><timestampReceived>1998-10-05 16:37:16-0400</timestampReceived><subject>A problem with /usr/include/linux/un.h</subject><body>


Who should I talk to if I want to get the ANSI/ISO C violation contained in
the file:

	/usr/include/linux/un.h

fixed?

P.S.  The problem I am speaking of is a zero-length array declaration.  That's
not permitted by ANSI/ISO C, and indeed, gcc balks at compiling anything that
includes this header file when -pedantic-errors is being used.  (I am in fact
trying to compile something which includes &lt;sys/un.h&gt; which in turn includes
&lt;linux/un.h&gt;.)

P.P.S.  I am currently running kernel version 2.0.34.

</body></email><email><emailId>19981005213245</emailId><senderName>Florian Weimer</senderName><senderEmail>fw@cygnus.stuttgart.netsurf.de</senderEmail><timestampReceived>1998-10-05 21:32:45-0400</timestampReceived><subject>Re: A problem with /usr/include/linux/un.h</subject><body>

"Ronald F. Guilmette" &lt;rfg@monkeys.com&gt; writes:

&gt; P.P.S.  I am currently running kernel version 2.0.34.

It's fixed in 2.1.124 (most probably already earlier).  If you aren't
doing kernel development, you should include `sys/un.h' anyway, which
contains an ANSI-conforming struct declaration (at least with
glibc-2.0.7).

</body></email><email><emailId>19981104065506</emailId><senderName>Vladas Lapinskas</senderName><senderEmail>lapinskas@mail.iae.lt</senderEmail><timestampReceived>1998-11-04 06:55:06-0400</timestampReceived><subject>iscntrl() and locales problem</subject><body>

	Hello!

	I have a problem with iscntrl() function when I'm trying to use
Russian locales. All russian letters treated as control one, no metter
what locales are. Is it just my problem or a bug in iscntrl() realisation?

	Here is a test programm, which takes a string and check each
letter with iscntrl(). It works right with English letters, but all
Russian ones (after the '-' ) looks like control.
	I've tested this programm on Linux RH4.2, RH5.0, SuSE4.4,
Debian2.0 - with the same result.
	Might be I'm doing something wrong? Could anyone check this
programm with Russian (koi-8) locales and tell me what the results are?
	Thank you in advance!

-----------------------------------------------------------------------

#include &lt;ctype.h&gt;
#include &lt;stdio.h&gt;

void main (void){
    unsigned char * test = "Test - ðÒÏ×ÅÒËÁ";

    printf("Char\t-\tIs Control?\n");
    
    for(;*test;test++)
        if (iscntrl(*test))
	    printf("%c\t-\tYes\n",*test);
	else
	    printf("%c\t-\tNo\n",*test);
}
	
----------------------------------------------------------------------

---
Vladas Lapinskas, mailto:lapinskas@mail.iae.lt

</body></email><email><emailId>19981202073223</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-02 07:32:23-0400</timestampReceived><subject>glibc 2.0.105</subject><body>

Hi,

The next test release is available at

	ftp://alpha.gnu.org/gnu
and
	ftp://sourceware.cygnus.com/pub/glibc

There are the files

	glibc-2.0.105.tar.gz
and
	glibc-linuxthreads-2.0.105.tar.gz

available.

The main changes are various bug fixes, documentation updates and so
on.  We have some updates for the Hurd port (which could work now) and
a number of changes for Linux/MIPS (which probably still has some
problem).

For all the other supported platforms all should be ok if you use the
right tools.  I think we have only very few open bug report in the
database and there is as far as I remember none anymore which will be
fixed before 2.1.  I.e., there are a few bugs left but these are to
big to big fixed now.

All this means 2.0.105 is again a step closer to the release.  Please
test it so that we can finally publish 2.1 with some confidence.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981213013843</emailId><senderName></senderName><senderEmail>reyzell79</senderEmail><timestampReceived>1998-12-13 01:38:43-0400</timestampReceived><subject>C++</subject><body>

I hope you don't mind my asking you a question concerning C++

Do you know how I would save a picture I've drawn on the screen in memory
so I'd be able to close the program and re-open it and recall that picture.  I
only know how to store in the dynamic memory which gets deleted when I 
close the program. (I'm using Borland C++ in dos and the functions getimage() 
and putimage() )

Thanks for you time.  Sorry if I've bothered you.
from Harvo Jones

</body></email><email><emailId>19981216103341</emailId><senderName>Paumann Mario</senderName><senderEmail>m.paumann@apa.at</senderEmail><timestampReceived>1998-12-16 10:33:41-0400</timestampReceived><subject>GCC,glibc, g++, libstdc++ ?</subject><body>

Hi !

  I'm just trying to rebuild parts of my Linux development
environment (based on an old slackware) and migrate
to some new compiler and libraries. As I looked around
I got confused about existing versions and versions to
use.

If I'm asking FAQs please excuse my incompetence
and point me to the FAQ or HOWTO or whatever.
I haven't found any similar by now.

1. GCC
What's up with GCC now ? There is a gcc 2.7.2.3 which
is still used with distributions although there exists
GCC 2.8.1. Is it true that GCC 2.8.x produces symbols
which are incompatible with 2.7.2.3 so that it impossible
to link 2.8.x compiled programs with 2.7.x libs ?
Or which reasons exists that the linux community
hasn't migrated to 2.8.x. Will it be possible to migrate
to egcs without recompiling the hole system ?
I've installed 2.7.2.3 on my system without any patches.
Is this correct or does there exist some patches which
I should use.

2. glibc
I just migrated to glibc 2.0.6. Most of my system is still
using libc5 but with every compilation it gets more glibc-like.
Everything seems fine here. But in the glibc-howto there
is an advice that I have to recompile g++,libstdc++ because
they are using the libc math lib. This leads to the next problem...

3. G++,libstdc++
The most confusing part which I can't keep track of.
I am not able to compile the g++ 2.7.2 and g++ 2.8.0 library.
It aborts with compilation errors.
So I tried to look what Redhat uses. They are still using
libg++2.7.2 with (unofficial?) Patches to 2.7.2.8. Which
aren't available anymore on the official places (tsx).
But these patches didn't make the compilation errors go away.
I know that g++ is the old library and shouldn't be used
with new projects. But there are still many apps out there
which are based on g++.
Can/Should I use g++/libstc++ 2.8.x with gcc 2.7.2.3 ?

Any help out there ?

Thanx, mario

</body></email><email><emailId>19981216230825</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-16 23:08:25-0400</timestampReceived><subject>glibc 2.0.107</subject><body>

Hi,

Yet another test release of glibc is available at

	ftp://sourceware.cygnus.com/pub/glibc
and
	ftp://alpha.gnu.org/gnu

You can find the files

	glibc-2.0.107.tar.gz
	glibc-crypt-2.0.107.tar.gz
	glibc-linuxthreads-2.0.107.tar.gz

If somebody makes patches I'll load them up as well.

This release is hopefully another step towards a stable release.
We've fixed a few problems but not much was reported after the last
test release.

Give it a try and let me know about the results.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981217054723</emailId><senderName>The Lost Wizard</senderName><senderEmail>astlew@l-w.net</senderEmail><timestampReceived>1998-12-17 05:47:23-0400</timestampReceived><subject>Not using libstdc++</subject><body>

I'm trying to build a program which uses the core C++ language but does
not use libstdc++ (i.e. I don't need iostream and friends.) The way I'm
reading the documentation, I should be able to compile the following
program using "g++ -nodefaultlibs -lgcc":

======
void main()
{
    int *value;

    value = new int;

    *value = 2;

    delete value;
}

======

It intentionally does nothing, but it should compile, should it not? I am
using gcc 2.8.1 on Linux 2.1.129. Any insights would be appreciated. (I'm
assuming that if I were to use anything like "exit()", I would need to add
-lc to the command line)

Thanks in advance.

William Astle

------------------------------
Floppity, floppity, flip
The mouse on the mobius strip;
    The strip revolved,
    The mouse dissolved
In a chronodimensional skip.
------------------------------

</body></email><email><emailId>19981218230938</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-12-18 23:09:38-0400</timestampReceived><subject>glibc-2.0.107 problems</subject><body>

Hi,
   I've been trying to keep in touch with the development releases of
glibc but I've been having problems.

First, a request.  It would help a lot if diffs could be posted.  My
ISP only allows 2 hours of online time per day and it can take longer
than this to download the whole sources to this half of the world.
Consequently, by the time I manage to download one set of sources the
next version has sometimes been released...

Second, one problem which I've been having for the last few releases
has been with the symbol __nss_db_open.  I posted a message about this
on 21 November.  I haven't looked into the root cause of the failure
but I get the following when doing 'make check':

/usr/src/lib/glibc/glibc-2.0.107/i686-pc-linux-gnulibc1/posix/globtest: error in \
loading shared libraries: \
/usr/src/lib/glibc/glibc-2.0.107/i686-pc-linux-gnulibc1/nss/libnss_db.so.2: symbol \
__nss_db_open, version GLIBC_2.1 not defined in file libdb.so.3 with link time \
reference

The symbol is actually defined but without any version.  There
shouldn't be anything funny about my system; I don't specify any
options apart from the standard ones when building glibc and the
system I build glibc on is so far little more than a SuSE 5.3
distribution.

With 2.0.107 I chose to ignore this error and see what would happen if
I installed the libs.  After fixing a few problems such as wrong '*/specs'
for egcs-2.91.58 and the configuration of ldconfig, the libs seem to be
working so far...


Cheers,
       Bill
 

-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------


</body></email><email><emailId>19981219192751</emailId><senderName>The Lost Wizard</senderName><senderEmail>astlew@l-w.net</senderEmail><timestampReceived>1998-12-19 19:27:51-0400</timestampReceived><subject>C++ and Glibc</subject><body>

Has anyone managed to make libstdc++ compile with glibc 2.0.108? If I
happen to have missed an obvious source of information, point me in that
direction and I'll go away.

William Astle

------------------------------
Floppity, floppity, flip
The mouse on the mobius strip;
    The strip revolved,
    The mouse dissolved
In a chronodimensional skip.
------------------------------

</body></email><email><emailId>19981222135057</emailId><senderName>CyberPsychotic</senderName><senderEmail>mlists@gizmo.kyrnet.kg</senderEmail><timestampReceived>1998-12-22 13:50:57-0400</timestampReceived><subject>LD_PRELOAD and original lib. functions.</subject><body>

Hello people,
 I am trying to write a library, which shall be loaded via LD_PRELOAD and
replace several original libc functions. (for example, I want to have my
fopen function, which would make some additional checks/logs).

Now the problem is how would I call the original routine within my
library?
 the only thing I have figured out, is something like:


static void initialise(void)
{
        void *lib;

        if (orig_fopen)
                return;

        lib = dlopen("libc.so.6", RTLD_NOW);
        orig_fopen = dlsym(lib, "fopen");
}


FILE *fopen(... ..)
{
        initialise();

        fprintf(stderr, "fopen() called\n");

        return (*orig_fopen)(t);
}

but maybe there's an easier way?


--
fygrave@tigerteam.net		http://www.kalug.lug.net

</body></email><email><emailId>19981222155036</emailId><senderName>Eric W !  Biederman</senderName><senderEmail>ebiederm+eric@ccr.net</senderEmail><timestampReceived>1998-12-22 15:50:36-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>

&gt;&gt;&gt;&gt;&gt; "CP" == CyberPsychotic  &lt;mlists@gizmo.kyrnet.kg&gt; writes:

CP&gt; Hello people,
CP&gt;  I am trying to write a library, which shall be loaded via LD_PRELOAD and
CP&gt; replace several original libc functions. (for example, I want to have my
CP&gt; fopen function, which would make some additional checks/logs).

Considering that your name, etc seems to have computer cracker written
all over it I'm not very comfortable giving you advise.

However since I believe the best way to tighten security is to make
all of the places public knowledge, and that this is a good question 
here goes.

CP&gt; Now the problem is how would I call the original routine within my
CP&gt; library?
CP&gt;  the only thing I have figured out, is something like:


orig_fopen = dlsym(RTLD_NEXT, "fopen");	

Is a much better construction because with a little care
multiple redirectors of the same function can nest.

Don't forget to watch out for the aliases _fopen etc. 
That the libc designers seems to through in just to make life fun.

Eric

</body></email><email><emailId>19981222180313</emailId><senderName>Artur Skawina</senderName><senderEmail>skawina@usa.net</senderEmail><timestampReceived>1998-12-22 18:03:13-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>

CyberPsychotic wrote:
&gt; 
&gt;  I am trying to write a library, which shall be loaded via LD_PRELOAD and
&gt; replace several original libc functions. (for example, I want to have my
&gt; fopen function, which would make some additional checks/logs).
&gt; 
&gt; Now the problem is how would I call the original routine within my
&gt; library?


#include &lt;dlfcn.h&gt;      // dlsym

   // Pointers to the original libc functions. Initialized in _init().

static int  (*org_setsockopt)(int s, int level, int optname, const void *optval, int optlen);

   // Setup everything, or exit() if an error occurs.

int _init( void )
{
   // find the address of the original libc function.
   
   org_setsockopt = dlsym( RTLD_NEXT, "setsockopt" );
   if ( !org_setsockopt )
      fatalerr( "Original 'setsockopt()' not found.\n" );
      
   return 0;
}

int setsockopt( int s, int level, int optname, const void *optval, int optlen )
{
   { ...your code... }
   
   return org_setsockopt( s, level, optname, optval, optlen );
}

</body></email><email><emailId>19981222191711</emailId><senderName>Aaron M !  Ucko</senderName><senderEmail>amu@mit.edu</senderEmail><timestampReceived>1998-12-22 19:17:11-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>

CyberPsychotic &lt;mlists@gizmo.kyrnet.kg&gt; writes:

&gt; Now the problem is how would I call the original routine within my
&gt; library?

	if (!orig_fopen)
		orig_fopen = dlsym(RTLD_NEXT, "fopen");

should do what you want.  (RTLD_NEXT isn't documented in the dlsym
manpage, just in &lt;dlfcn.h&gt;, which says

/* If the first argument of `dlsym' is set to RTLD_NEXT the run-time
   address of the symbol called NAME in the next shared object is
   returned.  The "next" relation is defined by the order the shared
   objects were loaded.  */
#define RTLD_NEXT       ((void *) -1l)
)

</body></email><email><emailId>19981223154554</emailId><senderName>CyberPsychotic</senderName><senderEmail>mlists@gizmo.kyrnet.kg</senderEmail><timestampReceived>1998-12-23 15:45:54-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>

Greetings,


~ 	if (!orig_fopen)
~ 		orig_fopen = dlsym(RTLD_NEXT, "fopen");
~ 
~ should do what you want.  (RTLD_NEXT isn't documented in the dlsym
~ manpage, just in &lt;dlfcn.h&gt;, which says
~ 
~ /* If the first argument of `dlsym' is set to RTLD_NEXT the run-time
~    address of the symbol called NAME in the next shared object is
~    returned.  The "next" relation is defined by the order the shared
~    objects were loaded.  */
~ #define RTLD_NEXT       ((void *) -1l)
~ )
~ 
so If I would load say 3 libraries ahead, which would have the same
routines defined, I will get them in back-order the libraries were loaded,
by calling dlsym(RTLD_NEXT,"routine")  3 times. Sounds neat to me. Thanks
for the hints.




--
fygrave@tigerteam.net		http://www.kalug.lug.net

</body></email><email><emailId>19981223154940</emailId><senderName>CyberPsychotic</senderName><senderEmail>mlists@gizmo.kyrnet.kg</senderEmail><timestampReceived>1998-12-23 15:49:40-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>


~ Considering that your name, etc seems to have computer cracker written
~ all over it I'm not very comfortable giving you advise.
~

*uch*..:) why would you think so?:) not all psychos are crackers, just
like not all crackers are psychos. That's rather an attitude and the point
were certain mentality has derrived.
 
~ CP&gt; Now the problem is how would I call the original routine within my
~ CP&gt; library?
~ CP&gt;  the only thing I have figured out, is something like:
~ 
~ 
~ orig_fopen = dlsym(RTLD_NEXT, "fopen");	
~ 
~ Is a much better construction because with a little care
~ multiple redirectors of the same function can nest.
~ 

yeah. So I could get rid of other libraries, if they would "wrap" the
function.

~ Don't forget to watch out for the aliases _fopen etc. 
~ That the libc designers seems to through in just to make life fun.
~ 

yeap. Thanks for the hint.

--
fygrave@tigerteam.net		http://www.kalug.lug.net

</body></email><email><emailId>19981219001907</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-12-19 00:19:07-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

According to Ulrich Drepper:

&gt; I couldn't reproduce it when you first described it and I cannot do it
&gt; now.  What does readelf report for the versions in libnss_db.so.2?  It
&gt; should look like this:

hmmm, readelf doesn't appear to be with SuSE 5.3 or on the InfoMagic
June 98 developer's resource disks but I do have a copy on my old machine:

  &gt; readelf -v
  Readelf v1.2
  &gt; ls -l `which readelf`
  -rwxr-xr-x   1 root     root        56200 Jun 26  1995 /usr/bin/readelf

This looks a bit old, but...

  &gt; readelf libnss_db.so.2
  Invalid dynamic tag 0x6ffffffc 0xfc8
  Invalid dynamic tag 0x6ffffffd 0x2
  Invalid dynamic tag 0x6ffffffe 0x1000
  Invalid dynamic tag 0x6fffffff 0x3
  Invalid dynamic tag 0x6ffffff0 0xf24
  Shared library: [libdb.so.3] 1
  Shared library: [libnss_files.so.2] 1
  Shared library: [libc.so.6] 1
  Library soname: [libnss_db.so.2]

So I guess I need to find a new version...

I notice that Yggdrasil announced some time ago that they have readelf-1.3,
so I'll try to download that...


&gt; My guess in any case is that the binutils are not adequate.  Get HJ's
&gt; last version, announced in many places.

I try to keep up with the latest of HJ's binutils.  In fact I installed
binutils-2.9.1.0.19a a few minutes before I built glibc-2.0.107:

  &gt; ls -l `which ld`
  -rwxr-xr-x   2 root     root       612128 Dec 17 15:16 /usr/bin/ld
  &gt; ld -v
  GNU ld version 2.9.1 (with BFD 2.9.1.0.19)



-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------

</body></email><email><emailId>19981219002603</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-19 00:26:03-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; First, a request.  It would help a lot if diffs could be posted.

If you wait a bit you normally can get patches.  On the machine I have
access to all the old tarballs I don't have enough disk space.
Therefore I ask for patches in the announcement and within a few hours
I normally get them.

&gt; Second, one problem which I've been having for the last few releases
&gt; has been with the symbol __nss_db_open.

I couldn't reproduce it when you first described it and I cannot do it
now.  What does readelf report for the versions in libnss_db.so.2?  It
should look like this:


Version needs section '.gnu.version_r' contains 3 entries:
 Addr: 0x001128  Offset: 0x001128  Link to section: 3 (.dynstr)
  000000: Version: 1  File: libdb.so.3  Cnt: 1
  0x0010: Name: GLIBC_2.1  Flags: none  Version: 5
  0x0020: Version: 1  File: libnss_files.so.2  Cnt: 1
  0x0030: Name: GLIBC_2.0  Flags: none  Version: 4
  0x0040: Version: 1  File: libc.so.6  Cnt: 1
  0x0050: Name: GLIBC_2.0  Flags: none  Version: 3


My guess in any case is that the binutils are not adequate.  Get HJ's
last version, announced in many places.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981219011008</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-12-19 01:10:08-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

According to Ulrich Drepper:
&gt; I couldn't reproduce it when you first described it and I cannot do it
&gt; now.  What does readelf report for the versions in libnss_db.so.2?  It
&gt; should look like this:

I got readelf-1.3 from the Yggdrasil 'bleeding edge' archive but
although it seems to be current as at June 98, the sources in it are
dated September 96.  None of the options gives results which are
formatted like those in your message.  Does this mean that there
is a newer version of readelf buried in some other archive?  If so,
can you tell me where?


-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------

</body></email><email><emailId>19981219013012</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-12-19 01:30:12-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

According to Ulrich Drepper:
&gt; Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:
&gt; 
&gt; &gt; hmmm, readelf doesn't appear to be with SuSE 5.3 or on the InfoMagic
&gt; &gt; June 98 developer's resource disks but I do have a copy on my old machine:
&gt; 
&gt; Update to a recent binutils version and you'll have it.
&gt; 

I'm confused.  binutils-2.9.1.0.19a is the latest version isn't it?

  # cd /usr/src/bin/binutils/binutils-2.9.1.0.19a
  # find -name 'readelf*'
  # grep -i readelf `find . -type f`
  # ls -R | wc
     2819    2736   27846
  #

So there is no file called readelf or readelf*, and readelf is not
mentioned in any source file or binary.  As I mentioned, I try to keep
up with binutils releases and the normal install process of binutils
has never installed a readelf for me.

I don't keep really old versions of binutils around, but:

  # tar tvfz binutils-2.9.1.0.3.tar.gz | grep -i readelf
  #

So what gives?  Am I doing something really stupid?

-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------

</body></email><email><emailId>19981219014337</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-19 01:43:37-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; hmmm, readelf doesn't appear to be with SuSE 5.3 or on the InfoMagic
&gt; June 98 developer's resource disks but I do have a copy on my old machine:

Update to a recent binutils version and you'll have it.

&gt; This looks a bit old, but...
&gt; 
&gt;   &gt; readelf libnss_db.so.2
&gt;   Invalid dynamic tag 0x6ffffffc 0xfc8

This is probably Eric's original version.  I've extended to program
significatnly to deal with all the ELF extensions.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981217025500</emailId><senderName>"Jason P Schanuel"</senderName><senderEmail>jason@gobills.com</senderEmail><timestampReceived>1998-12-17 02:55:00-0400</timestampReceived><subject>Re: glibc 2.0.107</subject><body>

Sorry doesn't compile here:

egcs is 1.1.1 and my msgfmt is out of date 0.10 (where do I get a newer
version?).
I moved /usr/include to /usr/include.old and made the normal asm and
linux links in a clean /usr/include.

CC=egcs
/usr/src/glibc-2.0.107/configure --enable-add-ons=crypt,linuxthreads --p
refix=/usr --host=i686-pc-linux-gnu

egcs
../sysdeps/unix/sysv/linux/msgsnd.c -c -O -Wall -Winline -Wstrict-protot
ypes -Wwrite-strings -g      -I../include -I. -I/tmp/glibc/sysvipc -I.. 
-I../libio  -I/tmp/glibc -I../sysdeps/i386/elf -I../crypt/sysdeps/unix -
I../linuxthreads/sysdeps/unix/sysv/linux -I../linuxthreads/sysdeps/pthre
ad -I../linuxthreads/sysdeps/unix/sysv -I../linuxthreads/sysdeps/unix -I
../linuxthreads/sysdeps/i386/i686 -I../linuxthreads/sysdeps/i386 -I../li
nuxthreads/sysdeps/pthread/no-cmpxchg -I../sysdeps/unix/sysv/linux/i386/
i686 -I../sysdeps/unix/sysv/linux/i386 -I../sysdeps/unix/sysv/linux -I..
/sysdeps/gnu -I../sysdeps/unix/common -I../sysdeps/unix/mman -I../sysdep
s/unix/inet -I../sysdeps/unix/sysv/i386 -I../sysdeps/unix/sysv -I../sysd
eps/unix/i386 -I../sysdeps/unix -I../sysdeps/posix -I../sysdeps/i386/i68
6 -I../sysdeps/i386/i486 -I../sysdeps/libm-i387/i686 -I../sysdeps/i386/f
pu -I../sysdeps/libm-i387 -I../sysdeps/i386 -I../sysdeps/wordsize-32 -I.
./sysdeps/ieee754 -I../sysdeps/libm-ieee754 -I../sysdeps/generic/elf -I.
./sysdeps/generic   -D_LIBC_REENTRANT -include
nclude/libc-symbols.h     -o /tmp/glibc/sysvipc/msgsnd.o
../sysdeps/unix/sysv/linux/msgsnd.c: In function `msgsnd':
../sysdeps/unix/sysv/linux/msgsnd.c:33: `IPCOP_msgsnd' undeclared (first
use in this function)
../sysdeps/unix/sysv/linux/msgsnd.c:33: (Each undeclared identifier is
reported only once
../sysdeps/unix/sysv/linux/msgsnd.c:33: for each function it appears
in.)
../sysdeps/unix/sysv/linux/msgsnd.c:33: warning: `resultvar' might be
used uninitialized in this function
make[2]: *** [/tmp/glibc/sysvipc/msgsnd.o] Error 1
make[2]: Leaving directory `/usr/src/glibc-2.0.107/sysvipc'
make[1]: *** [sysvipc/subdir_lib] Error 2
make[1]: Leaving directory `/usr/src/glibc-2.0.107'
make: *** [all] Error 2

Hope this helps,
   Jason P Schanuel

-----Original Message-----
From: Ulrich Drepper &lt;drepper@cygnus.com&gt;
To: GNU libc testers &lt;libc-alpha@cygnus.com&gt;; VGER gcc list
&lt;linux-gcc@vger.rutgers.edu&gt;
Date: Wednesday, December 16, 1998 6:55 PM
Subject: glibc 2.0.107


:Hi,
:
:Yet another test release of glibc is available at
:
: ftp://sourceware.cygnus.com/pub/glibc
:and
: ftp://alpha.gnu.org/gnu
:
:You can find the files
:
: glibc-2.0.107.tar.gz
: glibc-crypt-2.0.107.tar.gz
: glibc-linuxthreads-2.0.107.tar.gz
:
:If somebody makes patches I'll load them up as well.
:
:This release is hopefully another step towards a stable release.
:We've fixed a few problems but not much was reported after the last
:test release.
:
:Give it a try and let me know about the results.
:
:--
:---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
:Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
:Cygnus Solutions `--' drepper at cygnus.com   `------------------------
:

</body></email><email><emailId>19981217030434</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-17 03:04:34-0400</timestampReceived><subject>Re: glibc 2.0.107</subject><body>

"Jason P Schanuel" &lt;jason@gobills.com&gt; writes:

&gt; egcs is 1.1.1 and my msgfmt is out of date 0.10 (where do I get a newer
&gt; version?).

	Ftp://alpha.gnu.org/gnu

&gt; I moved /usr/include to /usr/include.old and made the normal asm and
&gt; linux links in a clean /usr/include.

With glibc 2.1 this is not necessary anymore.

&gt; ../sysdeps/unix/sysv/linux/msgsnd.c: In function `msgsnd':
&gt; ../sysdeps/unix/sysv/linux/msgsnd.c:33: `IPCOP_msgsnd' undeclared (first
&gt; use in this function)

Yes, I know meanwhile.  Thie stupid CVS lost a file.  I append it
below.  Simply place it in include/bits/ipc.h and you should be fine.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#include_next &lt;bits/ipc.h&gt;

__BEGIN_DECLS

/* The actual system call: all functions are multiplexed by this.  */
extern int __syscall_ipc __P ((int __call, int __first, int __second,
			       int __third, void *__ptr));

__END_DECLS


/* The codes for the functions to use the multiplexer `__syscall_ipc'.  */
#define IPCOP_semop	 1
#define IPCOP_semget	 2
#define IPCOP_semctl	 3
#define IPCOP_msgsnd	11
#define IPCOP_msgrcv	12
#define IPCOP_msgget	13
#define IPCOP_msgctl	14
#define IPCOP_shmat	21
#define IPCOP_shmdt	22
#define IPCOP_shmget	23
#define IPCOP_shmctl	24

</body></email><email><emailId>19981214160156</emailId><senderName>Przemek Borys</senderName><senderEmail>pborys@p-soft.silesia.linux.org.pl</senderEmail><timestampReceived>1998-12-14 16:01:56-0400</timestampReceived><subject>C++</subject><body>

[Offtopic]

EHLO !
&gt; I hope you don't mind my asking you a question concerning C++ 
&gt; Do you know how I would save a picture I've drawn on the screen in
&gt; memory so I'd be able to close the program and re-open it and recall
&gt; that picture.  I only know how to store in the dynamic memory which
&gt; gets deleted when I close the program.

Save this data to the disk.

-- 
____\___\___
(_(\|,|_|,|_  Gassho! [http://dione.ids.pl/~pborys][mr MUA home]
    |   | |.  [teksty o zen,programowaniu,moje sf,xfaq_pl, inne]

</body></email><email><emailId>19981104163346</emailId><senderName>Jungshik Shin</senderName><senderEmail>jshin@pantheon.yale.edu</senderEmail><timestampReceived>1998-11-04 16:33:46-0400</timestampReceived><subject>Re: iscntrl() and locales problem</subject><body>

On Wed, 4 Nov 1998, Vladas Lapinskas wrote:

&gt; 	Here is a test programm, which takes a string and check each
&gt; letter with iscntrl(). It works right with English letters, but all
&gt; Russian ones (after the '-' ) looks like control.
&gt; 	I've tested this programm on Linux RH4.2, RH5.0, SuSE4.4,
&gt; Debian2.0 - with the same result.

  RH 4.2 may not work at all. However, in RH 5.0 it'd have worked
if you had done it right. What's wrong with your program?
How could you expect it to work right without invoking 'setlocale()'?
Two lines have to be added to your program as shown below. 

   Hope this would help,

      Jungshik Shin

&gt; -----------------------------------------------------------------------
&gt; 
&gt; #include &lt;ctype.h&gt;
&gt; #include &lt;stdio.h&gt;
  #include &lt;locale.h&gt;       &lt;---------- 
&gt; 
&gt; void main (void){
&gt;     unsigned char * test = "Test - Russian String";

      setlocale(LC_ALL, ""); &lt;----------------
&gt; 
&gt;     printf("Char\t-\tIs Control?\n");
&gt;     
&gt;     for(;*test;test++)
&gt;         if (iscntrl(*test))
&gt; 	    printf("%c\t-\tYes\n",*test);
&gt; 	else
&gt; 	    printf("%c\t-\tNo\n",*test);
&gt; }

</body></email><email><emailId>19981005220303</emailId><senderName>Wolfram Gloger</senderName><senderEmail>wmglo@dent.med.uni-muenchen.de</senderEmail><timestampReceived>1998-10-05 22:03:03-0400</timestampReceived><subject>Re: A problem with /usr/include/linux/un.h</subject><body>

&gt; P.S.  The problem I am speaking of is a zero-length array declaration.  That's
&gt; not permitted by ANSI/ISO C, and indeed, gcc balks at compiling anything that
&gt; includes this header file when -pedantic-errors is being used.  (I am in fact
&gt; trying to compile something which includes &lt;sys/un.h&gt; which in turn includes
&gt; &lt;linux/un.h&gt;.)

Maybe you should upgrade to glibc-2, where sys/un.h appears to be a
stand-alone file.  However, I'm pretty sure you won't be able to
compile much with -pedantic-errors, as several include files use the
nice gcc features.

Regards,
Wolfram.
-- 
`Surf the sea, not double-u three...'
wmglo@dent.med.uni-muenchen.de

</body></email><email><emailId>19981202152153</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-02 15:21:53-0400</timestampReceived><subject>Re: glibc 2.0.105</subject><body>

&gt; 
&gt; All this means 2.0.105 is again a step closer to the release.  Please
&gt; test it so that we can finally publish 2.1 with some confidence.
&gt; 

I am still running the POSIX test. I saw some more failures. I am
investigating them now.

-- 
H.J. Lu (hjl@gnu.org)

</body></email><email><emailId>19981205051111</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-05 05:11:11-0400</timestampReceived><subject>binutils 2.9.1.0.17 is released.</subject><body>

Hi,

I'd like to release 2.9.1.0.17 to public on Sunday if I don't hear
any serious problems.

Thanks.


-- 
H.J. Lu (hjl@gnu.org)
---
I thought 2.9.1.0.16 was the be final release for binutils 2.9.1.0.x.
But it turned out that there were some serious bugs in 2.9.1.0.16. So
here is 2.9.1.0.17.

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can. Thanks.

This is the beta release of binutils 2.9.1.0.17 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.17 to hjl@lucon.org.

Changes from binutils 2.9.1.0.16:

1. Some Linux/Sparc64 patches.
2. A shared library linking patch.
3. Update cplus-dem.c from egcs 1.1.1 release.

Changes from binutils 2.9.1.0.15:

1. Update cplus-dem.c from egcs 1.1.1 prerelease.
2. Fix ARM bugs.
3. Fix MIPS/ELF bugs.
4. Fix an objdump bug.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.17.tar.gz. Source code.
2. binutils-2.9.1.0.16-2.9.1.0.17.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.17-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.17-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.17-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.17-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.17-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.17-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
12/04/98

</body></email><email><emailId>19981205154901</emailId><senderName>Przemek Borys</senderName><senderEmail>pborys@p-soft.silesia.linux.org.pl</senderEmail><timestampReceived>1998-12-05 15:49:01-0400</timestampReceived><subject>problem with g++/gcc</subject><body>

EHLO!

I have a question maybe not directly connected with gcc, but...
A friend asked me if there is some problem with compilation of ncurses 
based programs on g++ (on gcc it's fine). (She works on Debian 2.0)
Here is a simple code:

#include &lt;ncurses.h&gt;
#include &lt;stdio.h&gt;

void main()
{
	chtype znak;	
	initscr();
	znak = mvinch(5,5);
	endwin();
	printf ("%d\n", znak);
}		

Compiled with gcc it works fine; with g++ it dumps a segmentation fault.
Is it g++'s fault or ncurses's?

-- 
____\___\___
(_(\|,|_|,|_  Gassho! [http://dione.ids.pl/~pborys][mr MUA home]
    |   | |.  [teksty o zen,programowaniu,moje sf,xfaq_pl, inne]

</body></email><email><emailId>19981208030221</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-08 03:02:21-0400</timestampReceived><subject>glibc 2.0.106</subject><body>

Hi,

The next and one of the last test releases of glibc is available at

	ftp://sourceware.cygnus.com/pub/glibc
and
	ftp://alpha.gnu.org/gnu

The libc tarball itself and the LinuxThreads add-on are available.
Old crypt add-ons can be used.

We've mainly fixed details accept for Hurd where glibc 2.1 is
hopefully becoming usable now.

Please give it a try and send some feedback.  I usually give one or
two replies which I don't think corresponds to the number of people
using the library.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981208212759</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-08 21:27:59-0400</timestampReceived><subject>binutils 2.9.1.0.18 is releaseed</subject><body>

An ELF bug is fixed. Please test it as much as you can. I'd like
to release to public ASAP.

BTW, sunsite.unc.edu has no disk space and ftp.yggdrasil.com
is down. Please use ftp.kernel.org and tsx-11.mit.edu.

Thanks.


-- 
H.J. Lu (hjl@gnu.org)
--
I thought 2.9.1.0.17 was the be final release for binutils 2.9.1.0.x.
But it turned out that there were some serious bugs in 2.9.1.0.17. So
here is 2.9.1.0.18.

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can. Thanks.

This is the beta release of binutils 2.9.1.0.18 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.18 to hjl@lucon.org.

Changes from binutils 2.9.1.0.17:

1. An ELF bug fix.

Changes from binutils 2.9.1.0.16:

1. Some Linux/Sparc64 patches.
2. A shared library linking patch.
3. Update cplus-dem.c from egcs 1.1.1 release.

Changes from binutils 2.9.1.0.15:

1. Update cplus-dem.c from egcs 1.1.1 prerelease.
2. Fix ARM bugs.
3. Fix MIPS/ELF bugs.
4. Fix an objdump bug.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.18.tar.gz. Source code.
2. binutils-2.9.1.0.17-2.9.1.0.18.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.18-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.18-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.18-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.18-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.18-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.18-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
12/08/98

</body></email><email><emailId>19981212033253</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-12 03:32:53-0400</timestampReceived><subject>gdb 4.17.0.6 is released.</subject><body>

Hi, Folks,

This is the beta release of gdb 4.17.0.6, which is based on gdb 4.17
plus Linux/x86 hardware watchpoint/FPU, glibc 2.0 pthread and Linux/PPC
support. You need linux 2.0.35 or above, or 2.1.xx to get the x86 FPU
to work correctly. The Linux/x86 binary works with all recent kernels
and C libraries, and the x86 FPU support is enabled at the run-time,
depending on the kernel version.

Please report any bugs related to gdb 4.17.0.6 to hjl@lucon.org.

Problems:

Because most of system calls in glibc 2 are written in assembly without
frame pointer, gdb may not be able to debug nor get stack trace system
calls on glibc-based 2 systems. Due to this, "make check" may fail in

FAIL: gdb.base/a1-selftest.exp: backtrace through signal handler

with glibc 2.

Also, it is normal to see 

FAIL: gdb.base/interrupt.exp: continue (timeout)
FAIL: gdb.base/interrupt.exp: echo data (timeout)

if there is

XPASS: gdb.base/interrupt.exp: send_gdb end of file

Changes from gdb 4.17.0.5:

1. Support for glibc 2.0 pthread. It doesn't work with glibc 2.1.
2. The Linux/PPC support.
3. The Linux/Sparc support. Untested.

Changes from gdb 4.17.0.4:

1. Fix the Intel FPU tag code handling.

Changes from gdb 4.17.0.3:

1. Fix testcases for FPU.
2. Fix x86 hardware watchpoint support.

Changes from gdb 4.17.0.2:

1. Fake FP registers on older kernels.

Changes from gdb 4.17:

1. Linux/x86 FPU support is added. You can debug floating point numbers
   just like integers.
2. x86 hardware watchpoint is extended to long long, double and long
   double.
3. More information on x86 CPU status register.
4. Fix a bug when reading beyond the memory boundary.

The file list:

1. gdb-4.17-4.17.0.6.diff.gz. Patch against gdb 4.17.
2. gdb-4.17.0.5-4.17.0.6.diff.gz. Patch against gdb 4.17.0.5.
3. gdb-4.17.0.6.x86.gz. Precompiled Linux/x86 statically linked binary.
4. gdb-4.17.0.6.spec. A RPM spec file for RedHat 5.2.

The ftp sites for my gdb patches:

ftp://ftp.yggdrasil.com/private/hjl
ftp://ftp.kernel.org/pub/linux/devel/gcc

gdb 4.17 source code is available at

ftp://ftp.gnu.org/pub/gnu

To install the precompiled binary,

# gunzp gdb-4.17.0.6.x86.gz
# cp gdb-4.17.0.6.x86 /usr/bin/gdb


H.J.
hjl@gnu.org
12/11/98

</body></email><email><emailId>19981212040658</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-12 04:06:58-0400</timestampReceived><subject>binutils 2.9.1.0.19 is released.</subject><body>

binutils 2.9.1.0.19 is needed for my libgcc localized patch against
egcs.


-- 
H.J. Lu (hjl@gnu.org)
---
I thought 2.9.1.0.18 was the be final release for binutils 2.9.1.0.x.
But it turned out that there were some serious bugs in 2.9.1.0.18. So
here is 2.9.1.0.19.

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can. Thanks.

This is the beta release of binutils 2.9.1.0.19 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.19 to hjl@lucon.org.

Changes from binutils 2.9.1.0.18:

1. Allow '.' in the middle of a symbol name for the versioning script.

Changes from binutils 2.9.1.0.17:

1. An ELF bug fix.

Changes from binutils 2.9.1.0.16:

1. Some Linux/Sparc64 patches.
2. A shared library linking patch.
3. Update cplus-dem.c from egcs 1.1.1 release.

Changes from binutils 2.9.1.0.15:

1. Update cplus-dem.c from egcs 1.1.1 prerelease.
2. Fix ARM bugs.
3. Fix MIPS/ELF bugs.
4. Fix an objdump bug.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.19.tar.gz. Source code.
2. binutils-2.9.1.0.18-2.9.1.0.19.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.19-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.19-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.19-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.19-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.19-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.19-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
12/11/98

</body></email><email><emailId>19981215021517</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-15 02:15:17-0400</timestampReceived><subject>binutils 2.9.1.0.19a is released.</subject><body>

Hi,

I released it to public today.


-- 
H.J. Lu (hjl@gnu.org)
---
I thought 2.9.1.0.19 was the be final release for binutils 2.9.1.0.x.
But it turned out that there were some serious bugs in 2.9.1.0.19. So
here is 2.9.1.0.19a.

There is no difference between x86 and alpha binaries. I just renamed
them from 2.9.1.0.19 to 2.9.1.0.19a.

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can. Thanks.

This is the beta release of binutils 2.9.1.0.19a for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.19a to hjl@lucon.org.

Changes from binutils 2.9.1.0.19:

1. A PPC DWARF2 EH patch for gas.

Changes from binutils 2.9.1.0.18:

1. Allow '.' in the middle of a symbol name for the versioning script.

Changes from binutils 2.9.1.0.17:

1. An ELF bug fix.

Changes from binutils 2.9.1.0.16:

1. Some Linux/Sparc64 patches.
2. A shared library linking patch.
3. Update cplus-dem.c from egcs 1.1.1 release.

Changes from binutils 2.9.1.0.15:

1. Update cplus-dem.c from egcs 1.1.1 prerelease.
2. Fix ARM bugs.
3. Fix MIPS/ELF bugs.
4. Fix an objdump bug.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.19a.tar.gz. Source code.
2. binutils-2.9.1.0.19-2.9.1.0.19a.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.19a-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.19a-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.19a-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.19a-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.19a-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.19a-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
12/15/98

</body></email><email><emailId>19981216083739</emailId><senderName>holotko</senderName><senderEmail>micros50@computer.net</senderEmail><timestampReceived>1998-12-16 08:37:39-0400</timestampReceived><subject>Re: C++</subject><body>


Reyzell79@aol.com wrote:
&gt; 
&gt; I hope you don't mind my asking you a question concerning C++
&gt; 
&gt; Do you know how I would save a picture I've drawn on the screen in memory
&gt; so I'd be able to close the program and re-open it and recall that picture.  I
&gt; only know how to store in the dynamic memory which gets deleted when I
&gt; close the program. (I'm using Borland C++ in dos and the functions getimage()
&gt; and putimage() )
&gt; 
&gt; Thanks for you time.  Sorry if I've bothered you.
&gt; from Harvo Jones

This is a Unix programming list.
I am sure that there are functions available in the Borland C++
Graphics library that will readilly accomplish what you are trying to
do. Which ones you need exactly I do not know. You'd probably be
better off going to a discussion list that deals with topics in
Dos/Windows C/C++ programming. You'll probably find more people on
such a list who are readilly familiar with the Borland C/C++ libraries
and functions. This list deals mainly with the gcc/g++ compiler and
related topics involving Unix/Linux C &amp; C++ programmingand related
topics under Unix.

Good Luck


-- 
email: micros50@computer.net
Local mailserver &lt;landreau.ruffe.edu&gt; , remote &lt;ns.computer.net&gt;
["micros50.vcf" (text/x-vcard)]

</body></email><email><emailId>19981216183626</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-12-16 18:36:26-0400</timestampReceived><subject>Re: GCC,glibc, g++, libstdc++ ?</subject><body>

&gt; 1. GCC
&gt; What's up with GCC now ? There is a gcc 2.7.2.3 which
&gt; is still used with distributions although there exists
&gt; GCC 2.8.1. Is it true that GCC 2.8.x produces symbols
&gt; which are incompatible with 2.7.2.3 so that it impossible
&gt; to link 2.8.x compiled programs with 2.7.x libs ?
&gt; Or which reasons exists that the linux community
&gt; hasn't migrated to 2.8.x. Will it be possible to migrate
&gt; to egcs without recompiling the hole system ?
&gt; I've installed 2.7.2.3 on my system without any patches.
&gt; Is this correct or does there exist some patches which
&gt; I should use.

Here's the deal:

2.7 is probably still the most "standard".  For instance, it is the only
version which the Linux stable kernel (2.0.x) works properly with.  (This
series of kernels relied on a bug in 2.7 to work properly, funny as that
is.)

2.8 is better than 2.7 because it has a lot of fixes and improvements over
2.7, especially in the area of C++.  A lot of problems I had debugging
C++ programs went away in this version.  Also, they introduce RTTI (run
time type thingy) which you can probably find more about on a web
search.  It causes C++ (and probably Objective-C, although I don't
use it) objects to store their type at run time.  You can read more about
this by doing a web search for RTTI.  Yes, this makes gcc 2.8 libraries and
object archives incompatible with 2.7 stuff - UNLESS you use -no-rtti (which
you should probably do anyways if you're not really using it, since it
introduces a little bit of extra overhead).

In my humble opinion, however, you should forget about both of these
and go with egcs 1.1.1, which can be considered gcc 2.91.60.  It has all the
things gcc 2.8 has but better, and is actively maintained by the good folks
at Cygnus.  I was about to tear my hair out with the bugs in gdb 4.16 and
gcc 2.8 related to C++ development; now I'm fat and happy using egcs 1.1.1
and gdb 4.17.  Go to egcs.cygnus.com for more info.

(BTW, SuSE has some patches on their website which will make the stable
linux kernel work semi-properly when compiled with egcs.  I'd keep 2.7
around for compiling your kernel, however.)

&gt; Can/Should I use g++/libstc++ 2.8.x with gcc 2.7.2.3 ?

This was also a source of major confusion, and a problem I never
managed to sort out.  Again, it was magically fixed when I went
to egcs.

</body></email><email><emailId>19981217051850</emailId><senderName>"Jason P Schanuel"</senderName><senderEmail>jason@gobills.com</senderEmail><timestampReceived>1998-12-17 05:18:50-0400</timestampReceived><subject>Re: glibc 2.0.107</subject><body>

Hi,

   glibc-2.0.108 fails the 'make check' tests for me:

make -j 4 -C iconvdata tests
make[2]: Entering directory `/usr/src/glibc-2.0.108/iconvdata'
cp gconv-modules /tmp/glibc/iconvdata/gconv-modules
/bin/sh -e run-iconv-test.sh /tmp/glibc &gt;
/tmp/glibc/iconvdata/iconv-test.out
make[2]: *** [/tmp/glibc/iconvdata/iconv-test.out] Error 1
make[2]: Leaving directory `/usr/src/glibc-2.0.108/iconvdata'
make[1]: *** [iconvdata/tests] Error 2
make[1]: Leaving directory `/usr/src/glibc-2.0.108'
make: *** [check] Error 2
gobills@linux2:/tmp/glibc$



root@linux2:/tmp/glibc/iconvdata# less iconv-test.out
ISO-8859-1 -&gt; UTF8 -&gt; ISO-8859-1 ok
ISO-8859-2 -&gt; UCS4 -&gt; ISO-8859-2 ok
ISO-8859-2 -&gt; UTF8 -&gt; ISO-8859-2 ok
ISO-8859-3 -&gt; UTF8 -&gt; ISO-8859-3 ok
ISO-8859-4 -&gt; UTF8 -&gt; ISO-8859-4 ok
ISO-8859-5 -&gt; UTF8 -&gt; ISO-8859-5 ok
ISO-8859-6 -&gt; UTF8 -&gt; ISO-8859-6 ok
ISO-8859-7 -&gt; UTF8 -&gt; ISO-8859-7 ok
ISO-8859-8 -&gt; UTF8 -&gt; ISO-8859-8 ok
ISO-8859-9 -&gt; UTF8 -&gt; ISO-8859-9 ok
ISO-8859-10 -&gt; UCS2 -&gt; ISO-8859-10 ok
ISO-8859-10 -&gt; UTF8 -&gt; ISO-8859-10 ok
ANSI_X3.4-1968 -&gt; UTF8 -&gt; ANSI_X3.4-1968 ok
BS_4730 -&gt; UTF8 -&gt; BS_4730 ok
CSA_Z243.4-1985-1 -&gt; UCS2 -&gt; CSA_Z243.4-1985-1 ok
CSA_Z243.4-1985-2 -&gt; UCS4 -&gt; CSA_Z243.4-1985-2 ok
DIN_66003 -&gt; UTF8 -&gt; DIN_66003 ok
DS_2089 -&gt; UTF8 -&gt; DS_2089 ok
ES -&gt; UTF8 -&gt; ES ok
ES2 -&gt; UTF8 -&gt; ES2 ok
GB_1988-80 -&gt; UTF8 -&gt; GB_1988-80 ok
IT -&gt; UTF8 -&gt; IT ok
JIS_C6220-1969-RO -&gt; UTF8 -&gt; JIS_C6220-1969-RO ok
JIS_C6229-1984-B -&gt; UTF8 -&gt; JIS_C6229-1984-B ok
JUS_I.B1.002 -&gt; UTF8 -&gt; JUS_I.B1.002 ok
KSC5636 -&gt; UTF8 -&gt; KSC5636 ok
MSZ_7795.3 -&gt; UTF8 -&gt; MSZ_7795.3 ok
NC_NC00-10 -&gt; UTF8 -&gt; NC_NC00-10 ok
NF_Z_62-010 -&gt; UTF8 -&gt; NF_Z_62-010 ok
*** conversion from NF_Z_62-010_1973 to UTF8 failed
NS_4551-1 -&gt; UTF8 -&gt; NS_4551-1 ok
NS_4551-2 -&gt; UTF8 -&gt; NS_4551-2 ok
PT -&gt; UTF8 -&gt; PT ok
PT2 -&gt; UTF8 -&gt; PT2 ok
SEN_850200_B -&gt; UTF8 -&gt; SEN_850200_B ok
SEN_850200_C -&gt; UTF8 -&gt; SEN_850200_C ok
KOI-8 -&gt; UTF8 -&gt; KOI-8 ok
KOI8-R -&gt; UTF8 -&gt; KOI8-R ok
CP1250 -&gt; UTF8 -&gt; CP1250 ok
CP1251 -&gt; UTF8 -&gt; CP1251 ok
CP1252 -&gt; UTF8 -&gt; CP1252 ok
CP1253 -&gt; UTF8 -&gt; CP1253 ok
CP1254 -&gt; UTF8 -&gt; CP1254 ok
CP1255 -&gt; UTF8 -&gt; CP1255 ok
CP1256 -&gt; UTF8 -&gt; CP1256 ok
CP1257 -&gt; UTF8 -&gt; CP1257 ok
ISO-2022-KR -&gt; UTF8 -&gt; ISO-2022-KR ok
EUC-KR -&gt; UTF8 -&gt; EUC-KR ok
~
root@linux2:/tmp/glibc/iconvdata#


Hope this helps,
   Jason P Schanuel

</body></email><email><emailId>19981218005445</emailId><senderName>Burak Serdar</senderName><senderEmail>bserdar@intrex.net</senderEmail><timestampReceived>1998-12-18 00:54:45-0400</timestampReceived><subject>Re: Not using libstdc++</subject><body>

You should at least use a library for the C++ runtime support. I am not sure
whether -lgcc will supply these functions for you. You should be able to
compile this program, but most probably you will get some linker errors for
the missing functions.

The Lost Wizard wrote:

&gt; I'm trying to build a program which uses the core C++ language but does
&gt; not use libstdc++ (i.e. I don't need iostream and friends.) The way I'm
&gt; reading the documentation, I should be able to compile the following
&gt; program using "g++ -nodefaultlibs -lgcc":
&gt;
&gt; ======
&gt; void main()
&gt; {
&gt;     int *value;
&gt;
&gt;     value = new int;
&gt;
&gt;     *value = 2;
&gt;
&gt;     delete value;
&gt; }
&gt;
&gt; ======
&gt;
&gt; It intentionally does nothing, but it should compile, should it not? I am
&gt; using gcc 2.8.1 on Linux 2.1.129. Any insights would be appreciated. (I'm
&gt; assuming that if I were to use anything like "exit()", I would need to add
&gt; -lc to the command line)
&gt;
&gt; Thanks in advance.
&gt;
&gt; William Astle
&gt;
&gt; ------------------------------
&gt; Floppity, floppity, flip
&gt; The mouse on the mobius strip;
&gt;     The strip revolved,
&gt;     The mouse dissolved
&gt; In a chronodimensional skip.
&gt; ------------------------------

</body></email><email><emailId>19981218185846</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-18 18:58:46-0400</timestampReceived><subject>Re: i686 (PentiumPro) Optimizer Bug</subject><body>

&gt; 
&gt; &gt; Hi,
&gt; &gt; 
&gt; &gt; I am looking into your bug report
&gt; &gt; 
&gt; &gt; http://www.cygnus.com/ml/egcs-bugs/1998-Nov/0476.html
&gt; &gt; 
&gt; &gt; I don't have a real fix yet. But I did find a bug in reg-stack.c which
&gt; &gt; would silently generate incorrect code. This patch is a sanity check
&gt; &gt; and it will cause compiler to abort on your testcase instead of
&gt; &gt; generating buggy asm code. I will work on a real fix when I find more
&gt; &gt; time.
&gt; &gt; 
&gt; &gt; Thanks.
&gt; 
&gt; 

Hi,

This is a patch for egcs 1.1.1 which fixes the bug

http://www.cygnus.com/ml/egcs-bugs/1998-Nov/0476.html

The detailed analysises can be found at

http://www.cygnus.com/ml/egcs-bugs/1998-Dec/0475.html
http://www.cygnus.com/ml/egcs-bugs/1998-Dec/0481.html

If you are using floating point with Pentium Pro optimization, I
strongly encourage you to give this patch a try.

Thanks.


-- 
H.J. Lu (hjl@gnu.org)
---
Fri Dec 18 06:57:12 1998  H.J. Lu  (hjl@gnu.org)

	* reg-stack.c (subst_stack_regs_pat): Abort if the destination
	of a FP conditional move is not on the FP register stack.

	* config/i386/i386.md (movsfcc, movdfcc, movxfcc): Make sure the
	target is among the sources.
	(movsfcc+1, movsfcc+2, movsfcc+3, movsfcc+4, movsfcc+5, movdfcc+1,
	movdfcc+2, movdfcc+3, movdfcc+4, movdfcc+5, movxfcc+1, movxfcc+2,
	movxfcc+3, movxfcc+4, movxfcc+5): Disallow patterns where the target
	is not among the sources.

	* config/i386/i386.c (output_fp_conditional_move): Remove the
	third alternative.

diff -x CVS -x c-gperf.h -upr /home/work/misc/gnu/import/egcs/gcc/config/i386/i386.c \
                ./config/i386/i386.c
--- /home/work/misc/gnu/import/egcs/gcc/config/i386/i386.c	Wed Jul 29 07:35:38 1998
+++ ./config/i386/i386.c	Fri Dec 18 09:06:53 1998
@@ -5208,12 +5208,6 @@ output_fp_conditional_move (which_altern
       output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);
       break;
 
-    case 2:
-      /* r &lt;- cond ? r : arg */
-      output_asm_insn (AS2 (fcmov%F1,%2,%0), operands);
-      output_asm_insn (AS2 (fcmov%f1,%3,%0), operands);
-      break;
-
     default:
       abort ();
     }
diff -x CVS -x c-gperf.h -upr /home/work/misc/gnu/import/egcs/gcc/config/i386/i386.md \
                ./config/i386/i386.md
--- /home/work/misc/gnu/import/egcs/gcc/config/i386/i386.md	Thu Jul 30 08:11:16 1998
+++ ./config/i386/i386.md	Fri Dec 18 08:47:30 1998
@@ -7383,6 +7383,15 @@ byte_xor_operation:
   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)
     FAIL;
 
+  /* We have to make sure that the target is among the sources so
+     that it is on the register stack. */
+  if (!rtx_equal_p (operands[0], operands[2])
+      &amp;&amp; !rtx_equal_p (operands[0], operands[3]))
+    {
+      emit_insn (gen_movsf (operands[0], operands[2]));
+      operands[2] = operands[0];
+    }
+
   /* The floating point conditional move instructions don't directly
      support conditions resulting from a signed integer comparison. */
 
@@ -7411,36 +7420,36 @@ byte_xor_operation:
 }")
 
 (define_insn ""
-  [(set (match_operand:SF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:SF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:SF (match_operator 1 "comparison_operator" 
-	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m,q,m")
-		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn,qmn,qn")])
-	      (match_operand:SF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:SF 5 "register_operand" "0,0,f,f,f,f")))]
+	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m")
+		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn")])
+	      (match_operand:SF 4 "register_operand" "f,f,0,0")
+	      (match_operand:SF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_insn ""
-  [(set (match_operand:SF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:SF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:SF (match_operator 1 "comparison_operator" 
-		[(match_operand 2 "nonimmediate_operand" "r,m,r,m,r,m")
-		 (match_operand 3 "general_operand" "rmi,ri,rmi,ri,rmi,ri")])
-	      (match_operand:SF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:SF 5 "register_operand" "0,0,f,f,f,f")))]
+		[(match_operand 2 "nonimmediate_operand" "r,m,r,m")
+		 (match_operand 3 "general_operand" "rmi,ri,rmi,ri")])
+	      (match_operand:SF 4 "register_operand" "f,f,0,0")
+	      (match_operand:SF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE &amp;&amp; GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_split
-  [(set (match_operand:SF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:SF 0 "register_operand" "=f,f")
 	(if_then_else:SF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (const_int 0)])
-		      (match_operand:SF 3 "register_operand" "f,0,f")
-		      (match_operand:SF 4 "register_operand" "0,f,f")))]
+		      (match_operand:SF 3 "register_operand" "f,0")
+		      (match_operand:SF 4 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0)
 	(match_dup 2))
@@ -7450,12 +7459,12 @@ byte_xor_operation:
   "")
 
 (define_split
-  [(set (match_operand:SF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:SF 0 "register_operand" "=f,f")
 	(if_then_else:SF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (match_operand 3 "general_operand" "")])
-		      (match_operand:SF 4 "register_operand" "f,0,f")
-		      (match_operand:SF 5 "register_operand" "0,f,f")))]
+		      (match_operand:SF 4 "register_operand" "f,0")
+		      (match_operand:SF 5 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0) (compare (match_dup 2) (match_dup 3)))
    (set (match_dup 0)
@@ -7464,11 +7473,11 @@ byte_xor_operation:
   "")
 
 (define_insn ""
-  [(set (match_operand:SF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:SF 0 "register_operand" "=f,f")
 	(if_then_else:SF (match_operator 1 "comparison_operator" 
 				[(cc0) (const_int 0)])
-		      (match_operand:SF 2 "register_operand" "f,0,f")
-		      (match_operand:SF 3 "register_operand" "0,f,f")))]
+		      (match_operand:SF 2 "register_operand" "f,0")
+		      (match_operand:SF 3 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   "* return output_fp_conditional_move (which_alternative, operands);")
 
@@ -7485,6 +7494,15 @@ byte_xor_operation:
   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)
     FAIL;
 
+  /* We have to make sure that the target is among the sources so
+     that it is on the register stack. */
+  if (!rtx_equal_p (operands[0], operands[2])
+      &amp;&amp; !rtx_equal_p (operands[0], operands[3]))
+    {
+      emit_insn (gen_movdf (operands[0], operands[2]));
+      operands[2] = operands[0];
+    }
+
   /* The floating point conditional move instructions don't directly
      support conditions resulting from a signed integer comparison. */
 
@@ -7513,36 +7531,36 @@ byte_xor_operation:
 }")
 
 (define_insn ""
-  [(set (match_operand:DF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:DF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:DF (match_operator 1 "comparison_operator" 
-	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m,q,m")
-		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn,qmn,qn")])
-	      (match_operand:DF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:DF 5 "register_operand" "0,0,f,f,f,f")))]
+	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m")
+		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn")])
+	      (match_operand:DF 4 "register_operand" "f,f,0,0")
+	      (match_operand:DF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_insn ""
-  [(set (match_operand:DF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:DF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:DF (match_operator 1 "comparison_operator" 
-	      [(match_operand 2 "nonimmediate_operand" "r,m,r,m,r,m")
-		(match_operand 3 "general_operand" "rmi,ri,rmi,ri,rmi,ri")])
-	      (match_operand:DF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:DF 5 "register_operand" "0,0,f,f,f,f")))]
+	      [(match_operand 2 "nonimmediate_operand" "r,m,r,m")
+		(match_operand 3 "general_operand" "rmi,ri,rmi,ri")])
+	      (match_operand:DF 4 "register_operand" "f,f,0,0")
+	      (match_operand:DF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE &amp;&amp; GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_split
-  [(set (match_operand:DF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:DF 0 "register_operand" "=f,f")
 	(if_then_else:DF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (const_int 0)])
-		      (match_operand:DF 3 "register_operand" "f,0,f")
-		      (match_operand:DF 4 "register_operand" "0,f,f")))]
+		      (match_operand:DF 3 "register_operand" "f,0")
+		      (match_operand:DF 4 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0)
 	(match_dup 2))
@@ -7552,12 +7570,12 @@ byte_xor_operation:
   "")
 
 (define_split
-  [(set (match_operand:DF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:DF 0 "register_operand" "=f,f")
 	(if_then_else:DF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (match_operand 3 "general_operand" "")])
-		      (match_operand:DF 4 "register_operand" "f,0,f")
-		      (match_operand:DF 5 "register_operand" "0,f,f")))]
+		      (match_operand:DF 4 "register_operand" "f,0")
+		      (match_operand:DF 5 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0) (compare (match_dup 2) (match_dup 3)))
    (set (match_dup 0)
@@ -7566,11 +7584,11 @@ byte_xor_operation:
   "")
 
 (define_insn ""
-  [(set (match_operand:DF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:DF 0 "register_operand" "=f,f")
 	(if_then_else:DF (match_operator 1 "comparison_operator" 
 				[(cc0) (const_int 0)])
-		      (match_operand:DF 2 "register_operand" "f,0,f")
-		      (match_operand:DF 3 "register_operand" "0,f,f")))]
+		      (match_operand:DF 2 "register_operand" "f,0")
+		      (match_operand:DF 3 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   "* return output_fp_conditional_move (which_alternative, operands);")
 
@@ -7587,6 +7605,15 @@ byte_xor_operation:
   if (GET_MODE_CLASS (GET_MODE (i386_compare_op0)) != MODE_INT)
     FAIL;
 
+  /* We have to make sure that the target is among the sources so
+     that it is on the register stack. */
+  if (!rtx_equal_p (operands[0], operands[2])
+      &amp;&amp; !rtx_equal_p (operands[0], operands[3]))
+    {
+      emit_insn (gen_movxf (operands[0], operands[2]));
+      operands[2] = operands[0];
+    }
+
   /* The floating point conditional move instructions don't directly
      support conditions resulting from a signed integer comparison. */
 
@@ -7615,36 +7642,36 @@ byte_xor_operation:
 }")
 
 (define_insn ""
-  [(set (match_operand:XF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:XF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:XF (match_operator 1 "comparison_operator" 
-	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m,q,m")
-		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn,qmn,qn")])
-	      (match_operand:XF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:XF 5 "register_operand" "0,0,f,f,f,f")))]
+	      [(match_operand:QI 2 "nonimmediate_operand" "q,m,q,m")
+		(match_operand:QI 3 "general_operand" "qmn,qn,qmn,qn")])
+	      (match_operand:XF 4 "register_operand" "f,f,0,0")
+	      (match_operand:XF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_insn ""
-  [(set (match_operand:XF 0 "register_operand" "=f,f,f,f,f,f")
+  [(set (match_operand:XF 0 "register_operand" "=f,f,f,f")
 	(if_then_else:XF (match_operator 1 "comparison_operator" 
-	      [(match_operand 2 "nonimmediate_operand" "r,m,r,m,r,m")
-		(match_operand 3 "general_operand" "rmi,ri,rmi,ri,rmi,ri")])
-	      (match_operand:XF 4 "register_operand" "f,f,0,0,f,f")
-	      (match_operand:XF 5 "register_operand" "0,0,f,f,f,f")))]
+	      [(match_operand 2 "nonimmediate_operand" "r,m,r,m")
+		(match_operand 3 "general_operand" "rmi,ri,rmi,ri")])
+	      (match_operand:XF 4 "register_operand" "f,f,0,0")
+	      (match_operand:XF 5 "register_operand" "0,0,f,f")))]
   "TARGET_CMOVE &amp;&amp; GET_MODE_CLASS (GET_MODE (operands[2])) == MODE_INT
     &amp;&amp; GET_CODE (operands[1]) != LT &amp;&amp; GET_CODE (operands[1]) != LE
     &amp;&amp; GET_CODE (operands[1]) != GE &amp;&amp; GET_CODE (operands[1]) != GT"
   "#")
 
 (define_split
-  [(set (match_operand:XF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:XF 0 "register_operand" "=f,f")
 	(if_then_else:XF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (const_int 0)])
-		      (match_operand:XF 3 "register_operand" "f,0,f")
-		      (match_operand:XF 4 "register_operand" "0,f,f")))]
+		      (match_operand:XF 3 "register_operand" "f,0")
+		      (match_operand:XF 4 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0)
 	(match_dup 2))
@@ -7654,12 +7681,12 @@ byte_xor_operation:
   "")
 
 (define_split
-  [(set (match_operand:XF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:XF 0 "register_operand" "=f,f")
 	(if_then_else:XF (match_operator 1 "comparison_operator" 
 				[(match_operand 2 "nonimmediate_operand" "")
 				 (match_operand 3 "general_operand" "")])
-		      (match_operand:XF 4 "register_operand" "f,0,f")
-		      (match_operand:XF 5 "register_operand" "0,f,f")))]
+		      (match_operand:XF 4 "register_operand" "f,0")
+		      (match_operand:XF 5 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   [(set (cc0) (compare (match_dup 2) (match_dup 3)))
    (set (match_dup 0)
@@ -7668,11 +7695,11 @@ byte_xor_operation:
   "")
 
 (define_insn ""
-  [(set (match_operand:XF 0 "register_operand" "=f,f,f")
+  [(set (match_operand:XF 0 "register_operand" "=f,f")
 	(if_then_else:XF (match_operator 1 "comparison_operator" 
 				[(cc0) (const_int 0)])
-		      (match_operand:XF 2 "register_operand" "f,0,f")
-		      (match_operand:XF 3 "register_operand" "0,f,f")))]
+		      (match_operand:XF 2 "register_operand" "f,0")
+		      (match_operand:XF 3 "register_operand" "0,f")))]
   "TARGET_CMOVE &amp;&amp; reload_completed"
   "* return output_fp_conditional_move (which_alternative, operands);")
 
diff -x CVS -x c-gperf.h -upr /home/work/misc/gnu/import/egcs/gcc/reg-stack.c \
                ./reg-stack.c
--- /home/work/misc/gnu/import/egcs/gcc/reg-stack.c	Thu Oct  8 12:10:13 1998
+++ ./reg-stack.c	Wed Dec 16 14:45:00 1998
@@ -2349,6 +2349,10 @@ subst_stack_regs_pat (insn, regstack, pa
 	break;
 
       case IF_THEN_ELSE:
+	/* dest has to be on stack. */
+	if (get_hard_regnum (regstack, *dest) &lt; FIRST_STACK_REG)
+	  abort ();
+
 	/* This insn requires the top of stack to be the destination. */
 
 	/* If the comparison operator is an FP comparison operator,
@@ -2402,9 +2406,7 @@ subst_stack_regs_pat (insn, regstack, pa
 	      }
 	}
 
-	/* Make dest the top of stack.  Add dest to regstack if not present. */
-	if (get_hard_regnum (regstack, *dest) &lt; FIRST_STACK_REG)
-	  regstack-&gt;reg[++regstack-&gt;top] = REGNO (*dest);	
+	/* Make dest the top of stack. */
 	SET_HARD_REG_BIT (regstack-&gt;reg_set, REGNO (*dest));
 	replace_reg (dest, FIRST_STACK_REG);
 


</body></email><email><emailId>19981219020425</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-19 02:04:25-0400</timestampReceived><subject>Re: glibc-2.0.107 problems</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; I got readelf-1.3 from the Yggdrasil 'bleeding edge' archive but
&gt; although it seems to be current as at June 98, the sources in it are
&gt; dated September 96.  None of the options gives results which are
&gt; formatted like those in your message.  Does this mean that there
&gt; is a newer version of readelf buried in some other archive?  If so,
&gt; can you tell me where?

I've explained this already.  These are Eric's versions.  My changes
are only in the version distributed with GNU binutils.  Get the latest
binutils and you should be set.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981220115824</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-12-20 11:58:24-0400</timestampReceived><subject>Re: C++ and Glibc</subject><body>

&gt;&gt;&gt;&gt;&gt; The Lost Wizard writes:

 &gt; Has anyone managed to make libstdc++ compile with glibc 2.0.108? If I
 &gt; happen to have missed an obvious source of information, point me in that
 &gt; direction and I'll go away.
RTFM.  The glibc FAQ which comes with 2.0.108 answers the following question:
2.21.	What do I need for C++ development?

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981220194505</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-12-20 19:45:05-0400</timestampReceived><subject>gdb 4.17.0.8 is released.</subject><body>

&gt; At any rate, you'll find below the patches that change the signal used
&gt; to report dead children.  The patches are against the current working
&gt; sources on anoncvs@glibc.cygnus.com.  I haven't been able to test them

I will give it a try.

&gt; on my home machine, but will test them tomorrow at work.  I'll also
&gt; test what happens with gdb.  Maybe the extra signals don't break
&gt; anything, just causing gdb to rescan the set of running threads
&gt; unnecessarily.
&gt; 

I have made gdb 4.17.0.8. Please check this gdb with your linuxthreads.
The precompiled static x86 binary should support both glibc 2.0 and 2.1
pthreads. But I think a bug in glibc 2.1 pthread breaks gdb.

Thanks.


H.J.
---
Hi, Folks,

This is the beta release of gdb 4.17.0.8, which is based on gdb 4.17
plus Linux/x86 hardware watchpoint/FPU, glibc 2 pthread and Linux/PPC
support. You need linux 2.0.35 or above, or 2.1.xx to get the x86 FPU
to work correctly. The Linux/x86 binary works with all recent kernels
and C libraries, and the x86 FPU support is enabled at the run-time,
depending on the kernel version.

Please report any bugs related to gdb 4.17.0.8 to hjl@lucon.org.

Problems:

Because most of system calls in glibc 2 are written in assembly without
frame pointer, gdb may not be able to debug nor get stack trace system
calls on glibc-based 2 systems. Due to this, "make check" may fail in

FAIL: gdb.base/a1-selftest.exp: backtrace through signal handler

with glibc 2.

Also, it is normal to see 

FAIL: gdb.base/interrupt.exp: continue (timeout)
FAIL: gdb.base/interrupt.exp: echo data (timeout)

if there is

XPASS: gdb.base/interrupt.exp: send_gdb end of file

Changes from gdb 4.17.0.6:

1. Support for glibc 2.1 pthread. But it doesn't work, probably due
to the CLONE_PTRACE change to pthread in glibc 2.1.
2. Add support for the older Linux C libraries.
3. Add -static support for glibc 2.1.

Changes from gdb 4.17.0.5:

1. Support for glibc 2.0 pthread. It doesn't work with glibc 2.1.
2. The Linux/PPC support.
3. The Linux/Sparc support. Untested.

Changes from gdb 4.17.0.4:

1. Fix the Intel FPU tag code handling.

Changes from gdb 4.17.0.3:

1. Fix testcases for FPU.
2. Fix x86 hardware watchpoint support.

Changes from gdb 4.17.0.2:

1. Fake FP registers on older kernels.

Changes from gdb 4.17:

1. Linux/x86 FPU support is added. You can debug floating point numbers
   just like integers.
2. x86 hardware watchpoint is extended to long long, double and long
   double.
3. More information on x86 CPU status register.
4. Fix a bug when reading beyond the memory boundary.

The file list:

1. gdb-4.17-4.17.0.8.diff.gz. Patch against gdb 4.17.
2. gdb-4.17.0.6-4.17.0.8.diff.gz. Patch against gdb 4.17.0.6.
3. gdb-4.17.0.8.x86.gz. Precompiled Linux/x86 statically linked binary.
4. gdb-4.17.0.8.spec. A RPM spec file for RedHat 5.2.

The ftp sites for my gdb patches:

ftp://ftp.yggdrasil.com/private/hjl
ftp://ftp.kernel.org/pub/linux/devel/gcc

gdb 4.17 source code is available at

ftp://ftp.gnu.org/pub/gnu

To install the precompiled binary,

# gunzp gdb-4.17.0.8.x86.gz
# cp gdb-4.17.0.8.x86 /usr/bin/gdb


H.J.
hjl@gnu.org
12/20/98

</body></email><email><emailId>19981222132506</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-12-22 13:25:06-0400</timestampReceived><subject>[GLIBC 2.0.108] make check error</subject><body>

When make check:

make[2]: Entering directory `/src/glibc-2.0.108/iconvdata'
cp gconv-modules /src/glibc-2.0.108/linux/iconvdata/gconv-modules
/bin/sh -e run-iconv-test.sh /src/glibc-2.0.108/linux &gt; 
/src/glibc-2.0.108/linux/iconvdata/iconv-test.out
run-iconv-test.sh: line 89: 30731 Erreur de segmentation. $PROG -f $t -t 
$to -o
$temp2 $temp1
make[2]: *** [/src/glibc-2.0.108/linux/iconvdata/iconv-test.out] Error 1
make[2]: Leaving directory `/src/glibc-2.0.108/iconvdata'



.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981223160155</emailId><senderName>CyberPsychotic</senderName><senderEmail>mlists@gizmo.kyrnet.kg</senderEmail><timestampReceived>1998-12-23 16:01:55-0400</timestampReceived><subject>Re: LD_PRELOAD and original lib. functions.</subject><body>

~ 
~ int _init( void )
~ {
~    // find the address of the original libc function.

oops. That's what I've missed. Thanks for the point. :) didn't think I
could override _init. (compiling with -nostdlib didn't come in mind).

thanks again to everyone who responded.

regards
   Fyodor
--
fygrave@tigerteam.net		http://www.kalug.lug.net

</body></email><email><emailId>19981226112512</emailId><senderName>Markus Kossmann</senderName><senderEmail>markus.kossmann@inka.de</senderEmail><timestampReceived>1998-12-26 11:25:12-0400</timestampReceived><subject>glibc-2.0.108 and dejagnu-19981224</subject><body>

dejagnu-19981224 fails to compile on a glibc-2.0.108 linux-2.1.132
system with :
make[2]: Entering directory
`/usr/local/src/ftp/gdb/dejagnu-19981224/tcl/unix'
gcc -c -g -O2  -I./../generic -I. -DHAVE_GETCWD=1 -DHAVE_OPENDIR=1
-DHAVE_STRSTR=1 -DHAVE_STRTOL=1 -DHAVE_TMPNAM=1 -DHAVE_WAITPID=1
-DHAVE_UNISTD_H=1 -DUSE_TERMIOS=1 -DHAVE_SYS_TIME_H=1
-DTIME_WITH_SYS_TIME=1 -DHAVE_TM_ZONE=1 -DHAVE_TM_GMTOFF=1
-DHAVE_TIMEZONE_VAR=1 -DHAVE_TIMEZONE_DECL=1 -DHAVE_ST_BLKSIZE=1
-DSTDC_HEADERS=1 -DNEED_MATHERR=1 -DHAVE_SIGNED_CHAR=1
-DHAVE_SYS_IOCTL_H=1        -DTCL_SHLIB_EXT=\".so\"
./../generic/tclPosixStr.c
./../generic/tclPosixStr.c: In function `Tcl_ErrnoId':
./../generic/tclPosixStr.c:340: duplicate case value
./../generic/tclPosixStr.c:328: this is the first entry for that value
./../generic/tclPosixStr.c: In function `Tcl_ErrnoMsg':
./../generic/tclPosixStr.c:787: duplicate case value
./../generic/tclPosixStr.c:775: this is the first entry for that value
This is caused by the following Code in tclPosixStr.c
[...]
switch (err)
[...]
#ifdef ENOTSUP
        case ENOTSUP: return "ENOTSUP";
#endif
#ifdef ENOTTY
        case ENOTTY: return "ENOTTY";
#endif
#ifdef ENOTUNIQ
        case ENOTUNIQ: return "ENOTUNIQ";
#endif
#ifdef ENXIO
        case ENXIO: return "ENXIO";
#endif
#ifdef EOPNOTSUPP
        case EOPNOTSUPP: return "EOPNOTSUPP";
#endif
#ifdef EPERM
        case EPERM: return "EPERM";
#endif
[...]
and  the following define in 
&lt;bits/errno.h&gt;:
[...]
/* Linux has no ENOTSUP error code.  */
# define ENOTSUP EOPNOTSUPP

/* Linux also has no ECANCELED error code.  Since it is not used here
   we define it to an invalid value.  */
# define ECANCELED      125
[...]

What to fix here ?
The glibc headers ( remove the #define or #define it to an invalid value
like for ECANCELED )
or the tcl code coming with dejagnu  ( don´t assume that the makro
values are unique) ?
--
Markus Kossmann                                    
markus.kossmann@inka.de

</body></email><email><emailId>19981229061929</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-12-29 06:19:29-0400</timestampReceived><subject>glibc 2.0.109</subject><body>

Hi,

Another test release is available at

	ftp://sourceware.cygnus.com/pub/glibc
and
	ftp://alpha.gnu.org/gnu

There is a tarball for the libc itself and the LinuxThreads add-on as
well as a diff.

There are no interesting user visible changes but we fixed of course
some bugs.  The LinuxThreads changes might be interesting since they
fixed a few deadlock situations (i.e., where the library itself ended
up in a deadlock state).

Please give it a try and let me know.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981230052321</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-12-30 05:23:21-0400</timestampReceived><subject>glibc-2.0.109 and bugs</subject><body>


(1) In case nobody else got this, here is an error message which I got after
building glibc-2.0.109:

  make  -C iconvdata tests
  make[2]: Entering directory `/usr/src/lib/glibc/glibc-2.0.109/iconvdata'
  cp gconv-modules /usr/src/lib/glibc/glibc-2.0.109/i686-pc-linux-gnulibc1/iconvdata/gconv-modules
  /bin/sh -e run-iconv-test.sh \
/usr/src/lib/glibc/glibc-2.0.109/i686-pc-linux-gnulibc1 &gt; \
/usr/src/lib/glibc/glibc-2.0.109/i686-pc-linux-gnulibc1/iconvdata/iconv-test.out  \
/usr/src/lib/glibc/glibc-2.0.109/i686-pc-linux-gnulibc1/iconv/iconv_prog: conversion \
from `NF_Z_62-010_1973' to `UTF8' not supported  make[2]: *** \
[/usr/src/lib/glibc/glibc-2.0.109/i686-pc-linux-gnulibc1/iconvdata/iconv-test.out] \
Error 1  make[2]: Target `tests' not remade because of errors.
  make[1]: *** [iconvdata/tests] Error 2
  make[2]: Leaving directory `/usr/src/lib/glibc/glibc-2.0.109/iconvdata'

(2) The error message which I reported with earlier versions of glibc
disappeared after I installed glibc-2.0.108.  Running the tests on
glibc-2.0.108 then resulted in no error report.  I suspect that the
problem was that the test was picking up an already installed lib
rather than the fresh-built one.  This would explain why nobody else
was reporting the error.  It seems that it is probably a bug in the
test routines.

(3) The appears to be a minor bug in the documentation.  The FAQ
section 4.3 advises: "making a symlink to /usr/share/zoneinfo/NAME
(NAME is the returned value from tzselect) from the file
/etc/localtime".  With the glibc which gets built on my system (no
funny options), the location for the link (i.e. where the glibc
functions are actually looking) is /usr/etc/.  This seems to
me to be the logical place to put it because the data is in the
/usr tree.

(4) I got no response to my previous message on glibc, so I still
don't know where to find an up-to-date 'readelf'.  Help.


Cheers,
       Bill Metzenthen


-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------


</body></email><email><emailId>19981102041305</emailId><senderName>"T.R Anand"</senderName><senderEmail>anand@darkstar.tatainfotech.co.in</senderEmail><timestampReceived>1998-11-02 04:13:05-0400</timestampReceived><subject>Difference between archives and shared libraries.</subject><body>

Thanks a lot.
I got the whole concept clear now about archived and shared libraries.
anand.
-----------------------------------------------------------------------------
  T.R.ANAND.             E-mail: anand@darkstar.tatainfotech.co.in 
  Software Engineer		 rajagopalan.thillavillagam@tatainfotech.com
  ATG,Network Security
  Tata Infotech Ltd.
------------------------------------------------------------------------------

</body></email><email><emailId>19981105033909</emailId><senderName>Jungshik Shin</senderName><senderEmail>jshin@pantheon.yale.edu</senderEmail><timestampReceived>1998-11-05 03:39:09-0400</timestampReceived><subject>Re: iscntrl() and locales problem</subject><body>

On Thu, 5 Nov 1998, Sergey Podushkin wrote:

&gt; Jungshik Shin wrote:
&gt; &gt; 
&gt; &gt; On Wed, 4 Nov 1998, Vladas Lapinskas wrote:
&gt; &gt; 
&gt; &gt; &gt;       Here is a test programm, which takes a string and check each
&gt; &gt; &gt; letter with iscntrl(). It works right with English letters, but all
&gt; &gt; &gt; Russian ones (after the '-' ) looks like control.

&gt; &gt; How could you expect it to work right without invoking 'setlocale()'?
&gt; &gt; Two lines have to be added to your program as shown below.

&gt; &gt;   #include &lt;locale.h&gt;       &lt;----------
&gt; &gt;       setlocale(LC_ALL, ""); &lt;----------------

&gt; Yes. 
&gt; But setlocale() call, i think, should be following:
&gt; setlocale(LC_ALL, "ru_RU");
&gt; And you must have locale defined on your system with command:
&gt; 
&gt; # localedef -i ru_RU -f KOI-8 ru_RU

  Well, quite naturally, I assumed that he'd tested his program with the
environment variable LANG(or LC_CTYPE) set to ru_RU (actually, this
is NOT a good name because it leaves ambiguous what encoding/codeset is
used for ru_RU) and the corresponding locale compiled and placed in the
correct directory.  It'd better be ru_RU.koi-8r or  ru_RU.iso8859_5
depending on which codeset/encoding is used. (Only
"lang_territory.codeset" format  can specify fully locale)

    Jungshik Shin

</body></email><email><emailId>19981106012944</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-06 01:29:44-0400</timestampReceived><subject>glibc-2.0.100</subject><body>

Hi,

I've uploaded the latest release for glibc-2.0.100 to

	ftp://alpha.gnu.org/gnu

Beside the main tarball there is also a new linuxthreads add-on.

The fixes mainly include cleanups to the headers, fixes various
compliance problems, some more or less major bug fixes and a few
optimizations.

All in total another step into a stable release.

As always, please let me know about success and failures.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981111041123</emailId><senderName>Eric W !  Biederman</senderName><senderEmail>ebiederm+eric@ccr.net</senderEmail><timestampReceived>1998-11-11 04:11:23-0400</timestampReceived><subject>Re: bug in multiplication with x86 (gcc 2.7.2.3)</subject><body>

&gt;&gt;&gt;&gt;&gt; "CL" == christophe leroy &lt;christophe.leroy5@capway.com&gt; writes:

CL&gt; (Please CC anwsers to me as I'm not a linux-gcc subscriber)
CL&gt; Here is the c source:

CL&gt; long long mul(long a,long b)
CL&gt; {
CL&gt;   return a*b;
CL&gt; }

CL&gt; Here is the broken generated assembler source.
CL&gt; Imul doesnt give a 64 bits result when used with two operands.
Which is correct.

Your code should give a 32 bit result promoted to a 64 bit result.

That is the definition in C.
C unfortunantely doesn't have a widening multiplication.

You can cast to long long before you do your multiplication and get a 
64 bit result.  The generated assembly unfortunantely isn't too good.

Eric

</body></email><email><emailId>19981111093028</emailId><senderName>DAVID BALAZIC</senderName><senderEmail>david.balazic@uni-mb.si</senderEmail><timestampReceived>1998-11-11 09:30:28-0400</timestampReceived><subject>Re: Problems with upgrade to libc6</subject><body>

&gt;How to compile and link programs with the old libc5 ?
&gt; The hint in the gnulibc2-HOWTO  suggests using the -I ( and some other )
&gt;options to use the old include files , but it still links with libc5.

That is a typo , it still links with libc6 !


BTW : I noticed that redhat is shipping gnu-libc-2.0.7 , but the
lastest version on ftp.gnu.org is 2.0.6 ? ( except pre versions and 2.0.9x )


--
David Balazic , student
E-mail   : 1stein@writeme.com     |     living in  sLOVEnija
home page: http://surf.to/stein
Computer: Amiga 1200 + Quantum LPS-340AT
--

</body></email><email><emailId>19981114015140</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-14 01:51:40-0400</timestampReceived><subject>glibc 2.0.101</subject><body>

Hi,

The next test release of glibc 2.1 is available at

	ftp://alpha.gnu.org/gnu/glibc-2.0.101.tar.gz
and
	ftp://alpha.gnu.org/gnu/glibc-linuxthreads-2.0.101.tar.gz

I still don't have again the possibilities to create a diff so if
somebody creates one I'll upload it.

The crypt add-on has not changed so still get the 2.0.96 version.
Outside the US use

	http://www.ozemail.com.au/~geoffk/pgp/glibc-crypt-2.0.96.tar.gz

The changes are quite small.  Some more changes to make the headers
more standard compliant, a few new Linux kernel header replacements,
several bugs in the time code are fixed, some changes to get in sync
with the latest ISO C 9x decisions, and a few optimizations here and
there.

For platforms != ix86|m68k the inclusion of math.h shouldn't cause any
warnings anymore as I've disabled the declaration of the long double
functions.


As usual, please let me know whether it works or not.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981114040155</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-14 04:01:55-0400</timestampReceived><subject>glibc 2.0.102</subject><body>

Hi,

Due to a last minute change I made to 2.0.101 (I know, shouldn't be
done) I introduced a bug.  I've uploaded

	ftp://alpha.gnu.org/gnu/glibc-2.0.102.tar.gz

and a patch from 2.0.101.

Sorry for the inconvenience.

There were also some reports about problems with make after create
libm.so.  If you run into this problem (I don't) and you don't want to
fix this (I would appreciate this) you can work around the problem by
creating an empty file

	&lt;builddir&gt;/math/.os

&lt;builddir&gt; is the path to the directory where you build the library.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981116120920</emailId><senderName>Jane Reno</senderName><senderEmail>jane_re@yahoo.com</senderEmail><timestampReceived>1998-11-16 12:09:20-0400</timestampReceived><subject></subject><body>







_________________________________________________________
DO YOU YAHOO!?
Get your free @yahoo.com address at http://mail.yahoo.com

</body></email><email><emailId>19981116172503</emailId><senderName>Michael Meissner</senderName><senderEmail>meissner@cygnus.com</senderEmail><timestampReceived>1998-11-16 17:25:03-0400</timestampReceived><subject>Re: gdb</subject><body>

On Mon, Nov 16, 1998 at 06:03:08AM -0500, Mark Gray wrote:
&gt; &lt;ggallup@aloha.unl.edu&gt; writes:
&gt; 
&gt; &gt; 
&gt; &gt; On Sun, 15 Nov 1998, Iztok Polanic wrote:
&gt; &gt; 
&gt; &gt; &gt; I would really like to know how I can use gdb. I had many cores and I will
&gt; &gt; &gt; have them more, but I don't know how to examin the core files. Can
&gt; &gt; &gt; someone please give me some examples or a good tutorial on this subject?
&gt; &gt; &gt; And please don't tell me to use help in the gdb program, because it
&gt; &gt; &gt; doesn't help me.
&gt; &gt; 
&gt; &gt; The GNU "info" pages give an extensive description of the debugger and how
&gt; &gt; to use it with core files.  On my Slackware system I type 'info gdb'.
&gt; &gt; There is a lot of information there.
&gt; &gt; 
&gt; &gt; Good Luck, 
&gt; 
&gt; Just wanted to add:   once you are in gdb you can type "help" and get
&gt; help on all the commands.  (Read the info pages first though.)  Using
&gt; gdb within emacs is especially nice -- the other major editors jed,
&gt; joe, xwpe, vi(?) etc also have interface hooks to gdb.

Also, hard copy versions of the gdb documentation are available from the Free
Software Foundation, which helps cover some of their costs.  Quoting from the
gdb documentation:

	Published by the Free Software Foundation
	59 Temple Place - Suite 330
	Boston, MA 02111-1307 USA
	Printed copies are available for $20 each.
	ISBN 1-882114-11-6

The order form is available at:

	http://www.gnu.ai.mit.edu/order/order.html

-- 
Michael Meissner, Cygnus Solutions (Massachusetts office)
4th floor, 955 Massachusetts Avenue, Cambridge, MA 02139, USA
meissner@cygnus.com,	617-354-5416 (office),	617-354-7161 (fax)

</body></email><email><emailId>19981117053125</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-11-17 05:31:25-0400</timestampReceived><subject>binutils 2.9.1.0.16 is released.</subject><body>

I thought 2.9.1.0.15 was the be final release for binutils 2.9.1.0.x.
But it turned out that there were some serious bugs in 2.9.1.0.15. So
here is 2.9.1.0.16.

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can. Thanks.

This is the beta release of binutils 2.9.1.0.16 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.16 to hjl@lucon.org.

Changes from binutils 2.9.1.0.15:

1. Update cplus-dem.c from egcs 1.1.1 prerelease.
2. Fix ARM bugs.
3. Fix MIPS/ELF bugs.
4. Fix an objdump bug.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.16.tar.gz. Source code.
2. binutils-2.9.1.0.15-2.9.1.0.16.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.16-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.16-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.16-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.16-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.16-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.16-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
11/16/98

</body></email><email><emailId>19981117134634</emailId><senderName>0Matthias Warmbold</senderName><senderEmail>matthias.warmbold@dts.de</senderEmail><timestampReceived>1998-11-17 13:46:34-0400</timestampReceived><subject>regcomp</subject><body>

Hello
I hope this posting can be deliver....

What is wrong at the following c-code?


#include &lt;EingabeKlasse.h&gt;


main(){
  int hallo;
  char *name;
  regex_t *compiliert; 
  regmatch_t *zuruck;
  char STring[]="hallo1";
  char REgu[]="^h\(al).*(1)$";

  if( ( compiliert  = ( regex_t *) malloc(sizeof(regex_t))) == 0 )
    printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");
  if( ( zuruck  = ( regmatch_t *) malloc(sizeof(regmatch_t[2]))) == 0 )
    printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");

  hallo = regcomp(compiliert,REgu    , REG_EXTENDED);

   switch(hallo){
   case 0:
       printf("O.K Ausdruck kompiliert!\n");
       break;
   case REG_BADRPT:
     /* Invalid use of repetition operators such  as  using
      * '*' as the first character.
      */
   case REG_BADBR:
     /* 
      *......
    */
   default:
    printf("Fehler beim recomp\n");
    break;
   }     

    // W H A T  I S  W R O N G?
    // Please give me an example with subexpression-matching ;-). 
    if(regexec(compiliert,STring,0,NULL,REG_NOTBOL))
       printf("Fehler beim auswerten\n");
 
   regfree(compiliert);
    //free(compiliert);
 
 
}
				  

--

**************************************************************************
Matthias Warmbold
Tel.:0521/891380

mwarmbol@fhzinfo.fh-bielefeld.de
oder  Matthias.Warmbold@dts.de
*************************************************************************

</body></email><email><emailId>19981118101235</emailId><senderName>Iain Bate</senderName><senderEmail>iain.bate@cs.york.ac.uk</senderEmail><timestampReceived>1998-11-18 10:12:35-0400</timestampReceived><subject>Query about portables</subject><body>

I realise that this might not be quite the right e-mail list for a
query, but was wondering if anyone could help me anyway. I have a
portable with a two battery option. Is there any way to make linux, apm
etc. recognise the fact I have two batteries. When I use apm it only
monitors the battery the computer is currently using. The reason seems
to be that /proc/apm only monitors one battery. I would be grateful for
any help provided. 

Regards

Iain

</body></email><email><emailId>19981119030715</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-11-19 03:07:15-0400</timestampReceived><subject>gdb 4.17.0.5 is released.</subject><body>

Hi,

While looking at the egcs 1.1.1 PPro bug report:

http://www.cygnus.com/ml/egcs-bugs/1998-Nov/0476.html

I found a bug in my gdb 4.17.0.4. With gdb 4.17.0.5, it
is quite easy to see what is going on in FPU:

(gdb) b 52
Breakpoint 1 at 0x8048582: file ppro.c, line 52.
(gdb) r
Starting program: /home/hjl/bugs/gcc/ppro/opt/a.out 

Breakpoint 1, main () at ppro.c:52
52              if (diff &gt; maxd)        /* record maximum difference */
(gdb) p/x $pc
$2 = 0x8048582
(gdb) disass 0x8048580 0x8048588
Dump of assembler code from 0x8048580 to 0x8048588:
0x8048580 &lt;main+176&gt;:   fabs   
0x8048582 &lt;main+178&gt;:   fcomi  %st(2),%st
0x8048584 &lt;main+180&gt;:   jbe    0x804858a &lt;main+186&gt;
0x8048586 &lt;main+182&gt;:   fstp   %st(2)
End of assembler dump.
(gdb) info float
     st0: 0x3fff8000000000000000  Valid Normal 1
     st1: 0x00000000000000000000  Zero  Zero   0
     st2: 0x00000000000000000000  Empty Zero   0
     st3: 0x00000000000000000000  Empty Zero   0
     st4: 0x00000000000000000000  Empty Zero   0
     st5: 0x00000000000000000000  Empty Zero   0
     st6: 0x00000000000000000000  Empty Zero   0
     st7: 0x3fff8000000000000000  Empty Normal 1
   fctrl:     0x037f 64 bit; NEAR; mask INVAL DENOR DIVZ OVERF UNDER LOS;
   fstat:     0x3000 flags 0000; top 6; 
    ftag:     0x4fff
     fip: 0x08048580
     fcs: 0x01e10023
  fopoff: 0x00000000
  fopsel:     0x002b
(gdb) si
0x8048584       52              if (diff &gt; maxd)        /* record maximum difference */
(gdb) info float
     st0: 0x3fff8000000000000000  Valid Normal 1
     st1: 0x00000000000000000000  Zero  Zero   0
     st2: 0x00000000000000000000  Empty Zero   0
     st3: 0x00000000000000000000  Empty Zero   0
     st4: 0x00000000000000000000  Empty Zero   0
     st5: 0x00000000000000000000  Empty Zero   0
     st6: 0x00000000000000000000  Empty Zero   0
     st7: 0x3fff8000000000000000  Empty Normal 1
   fctrl:     0x037f 64 bit; NEAR; mask INVAL DENOR DIVZ OVERF UNDER LOS;
   fstat:     0x3041 flags 0000; top 6; excep INVAL STACK
    ftag:     0x4fff
     fip: 0x08048582
     fcs: 0x03f20023
  fopoff: 0x00000000
  fopsel:     0x002b
(gdb)

As you can see, the code generated by egcs 1.1.1 causes
an FPU stack overflow. It looks like

0x8048582 &lt;main+178&gt;:   fcomi  %st(2),%st

is the problem since there are only st0 and st1 on the stack,
but it tries to access st2.


-- 
H.J. Lu (hjl@gnu.org)
---
Hi, Folks,

This is the beta release of gdb 4.17.0.5, which is based on gdb 4.17
plus x86 hardware watchpoint and FPU support. You need linux 2.0.35
or above, or 2.1.xx to get the x86 FPU to work correctly. The Linux/x86
binary works with all recent kernels and C libraries, and the x86 FPU
support is enabled at the run-time, depending on the kernel version.

Please report any bugs related to gdb 4.17.0.5 to hjl@lucon.org.

Problems:

Because most of system calls in glibc 2 are written in assembly without
frame pointer, gdb may not be able to debug nor get stack trace system
calls on glibc-based 2 systems. Due to this, "make check" may fail in

FAIL: gdb.base/a1-selftest.exp: backtrace through signal handler

with glibc 2.

Also, it is normal to see 

FAIL: gdb.base/interrupt.exp: continue (timeout)
FAIL: gdb.base/interrupt.exp: echo data (timeout)

if there is

XPASS: gdb.base/interrupt.exp: send_gdb end of file

Changes from gdb 4.17.0.4:

1. Fix the Intel FPU tag code handling.

Changes from gdb 4.17.0.3:

1. Fix testcases for FPU.
2. Fix x86 hardware watchpoint support.

Changes from gdb 4.17.0.2:

1. Fake FP registers on older kernels.

Changes from gdb 4.17:

1. Linux/x86 FPU support is added. You can debug floating point numbers
   just like integers.
2. x86 hardware watchpoint is extended to long long, double and long
   double.
3. More information on x86 CPU status register.
4. Fix a bug when reading beyond the memory boundary.

The file list:

1. gdb-4.17-4.17.0.5.diff.gz. Patch against gdb 4.17.
2. gdb-4.17.0.4-4.17.0.5.diff.gz. Patch against gdb 4.17.0.4.
3. gdb-4.17.0.5.x86.gz. Precompiled Linux/x86 statically linked binary.

The ftp sites for my gdb patches:

ftp://ftp.yggdrasil.com/private/hjl
ftp://ftp.kernel.org/pub/linux/devel/gcc

gdb 4.17 source code is available at

ftp://ftp.gnu.org/pub/gnu

To install the precompiled binary,

# gunzp gdb-4.17.0.5.x86.gz
# cp gdb-4.17.0.5.x86 /usr/bin/gdb


H.J.
hjl@gnu.org
11/18/98

</body></email><email><emailId>19981120154158</emailId><senderName>Joe Keane</senderName><senderEmail>jgk@jgk.org</senderEmail><timestampReceived>1998-11-20 15:41:58-0400</timestampReceived><subject>Re: Problems with glibc, libstdc++ and libpthread</subject><body>

&gt;there might be a problem with glibc and libstdc++ (version 2.7.2.8) in
&gt;combination with libpthread.

The latter two don't work together at all.  They both play some trick
with storing information past the end of a FILE structure.

I found a simple solution: don't link with libstdc++.  Many programs
use some C++ internally but don't require the fancy library functions.
This is almost as cool as writing in C.

</body></email><email><emailId>19981121022859</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-21 02:28:59-0400</timestampReceived><subject>glibc 2.0.103</subject><body>

Hi,

I've uploaded to

	ftp://alpha.gnu.org/gnu

the files

	glibc-2.0.103.tar.gz
and
	glibc-linuxthreads-2.0.103.tar.gz

which contain (surprise!) the 2.0.103 test release for glibc.

I think we've fixed the problems reported since 2.0.102 so give it a
try.  The only real problem left known to me seems to be a bit of
incompatibility from 2.0 when it comes to streams.  We'll handle that.

Major changes since last week:
- general cleanup
- incorporate latest PPC changes (no reported error in the testsuite anymore!)
- better patch for RPC DOS
- glibc should now be select()-free
- better add-on support
- add host.conf support
- fixed some severe bugs in the interaction between LinuxThreads and the libc


I got in the last time reports about some programs which used the
symbols starting with an underscore which were available in glibc 2.0.
People, the leading underscore means these are internal symbols and
must not be used.  There are only very few exceptions.  Never use
them.  In future this will be enforced automatically since these
symbols are not anymore exported.  For existing programs with this
problem you can either recompile them or in some cases (if there is a
counterpart without the lading underscores) edit the binary and change
__XXX into XXX.  This is reported to be working with at least one X
server.


As usual, let me know about success and failures.

Thanks,

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981121070013</emailId><senderName></senderName><senderEmail>sarmadys@sanat.shirazu.ac.ir</senderEmail><timestampReceived>1998-11-21 07:00:13-0400</timestampReceived><subject>Re: regcomp</subject><body>

Hi ,

I have been C programmer for years ( Dos , Win API , MFC ) but I am
newcommer in Unix . I have many questions but I have not a good source
available so I ask 3 questions here. 
Beforehand , thank you for your answere.

1- How can I send a text as a mail . 

2- Are Berkely sockets and TLI something like MFC &amp; OWL .If it is so ,
   which is supported in linux gcc.

3- I have been assigned a project for my course ie . I must design a
   listserver . Can anyone tell me how &amp; where I am to start.
   

With best wishes.
   
-------------------------------------------------
  Siamak Sarmady (sarmadys@sanat.shirazu.ac.ir)
  P.O.Box 1625,Science College,Shiraz,Iran.
-------------------------------------------------

</body></email><email><emailId>19981110191937</emailId><senderName>"christophe leroy"</senderName><senderEmail>christophe.leroy5@capway.com</senderEmail><timestampReceived>1998-11-10 19:19:37-0400</timestampReceived><subject>bug in multiplication with x86 (gcc 2.7.2.3)</subject><body>

(Please CC anwsers to me as I'm not a linux-gcc subscriber)

Here is the c source:

long long mul(long a,long b)
{
  return a*b;
}

Here is the broken generated assembler source.
Imul doesnt give a 64 bits result when used with two operands.
And things done after imul are strange

	.type	 mul,@function
mul:
	pushl %ebp
	movl %esp,%ebp
	pushl %ebx
	movl 8(%ebp),%edx
	imull 12(%ebp),%edx
	movl %edx,%ecx
	movl %ecx,%ebx
	sarl $31,%ebx
	movl %ecx,%eax
	movl %ebx,%edx
	movl -4(%ebp),%ebx
	movl %ebp,%esp
	popl %ebp
	ret

Here is a modified source that works far better

	.type	 mul,@function
mul:
	pushl %ebp
	movl %esp,%ebp
	xorl %edx,%edx
	movl 8(%ebp),%eax
	imull 12(%ebp)
	movl %ebp,%esp
	popl %ebp
	ret

christophe leroy

</body></email><email><emailId>19981110123038</emailId><senderName>DAVID BALAZIC</senderName><senderEmail>david.balazic@uni-mb.si</senderEmail><timestampReceived>1998-11-10 12:30:38-0400</timestampReceived><subject>Problems with upgrade to libc6</subject><body>

I recently upgraded my libc5 based system to libc6.

I dowloaded the gnu libc 2.04 binaries and installed them.
Then I installed the egcs-for-libc6 binaries ( 1.0.3 ).
Then I DLed the gnu libc 2.0.6 sources and compiled them.

It seem to work OK, except the following :

How to compile and link programs with the old libc5 ?
 The hint in the gnulibc2-HOWTO  suggests using the -I ( and some other )
options to use the old include files , but it still links with libc5.


Some dynamic libraries are linked with libc5, so if I compile a program 
that uses them , then ldd reports that the exe is using libc6 and libc5 !

Example : 
compile mtr-0.28 , it uses libncurses.
libncurses.so is ( dynamicaly ) linked with libc5,
the compiler links mtr ( dynamicaly ) with libc6.
The final executable then uses both libc5 and libc6 and crashes on startup.

plz help
--
David Balazic , student
E-mail   : 1stein@writeme.com     |     living in  sLOVEnija
home page: http://surf.to/stein
Computer: Amiga 1200 + Quantum LPS-340AT
--

</body></email><email><emailId>19981118094153</emailId><senderName>Gerald Kuehne</senderName><senderEmail>kuehne@informatik.uni-mannheim.de</senderEmail><timestampReceived>1998-11-18 09:41:53-0400</timestampReceived><subject>Problems with glibc, libstdc++ and libpthread</subject><body>


Hi,

I have the following problem when compiling and starting the
"program" test.cc (see below):

$c++ test.cc -lpthread
$a.out
Segmentation fault

test.cc:

#include &lt;stdio.h&gt;

int main()
{
  FILE* f = fopen("/proc/cpuinfo", "r");
  if (ferror(f))
    exit(1);
    
  return 0;
}

The program compiled without -lpthread runs fine. I am using gcc 2.7.2.3
with glibc-2.0.7. While I have no problems when using gcc instead of g++,
there might be a problem with glibc and libstdc++ (version 2.7.2.8) in
combination with libpthread. 

ldd a.out returns:

        libpthread.so.0 =&gt; /lib/libpthread.so.0 (0x40003000)
        libstdc++.so.2.7.2 =&gt; /usr/lib/libstdc++.so.2.7.2 (0x40044000)
        libm.so.6 =&gt; /lib/libm.so.6 (0x4007e000)
        libc.so.6 =&gt; /lib/libc.so.6 (0x40099000)
        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00000000)

I tried egcs with libstdc++.2.8.1 and had no problems - but I have to get
gcc2.7.2.3 running.

Thanks for your help
Gerald

</body></email><email><emailId>19981118005201</emailId><senderName>Edwin Grubbs</senderName><senderEmail>egrubbs@cymitar.net</senderEmail><timestampReceived>1998-11-18 00:52:01-0400</timestampReceived><subject>Re: regcomp</subject><body>

The first problem is with the regular expression:

   char REgu[]="^h\(al).*(1)$";

If you call regcomp with the flag REG_EXTENDED, then the line should be

   char REgu[]="^h(al).*(1)$";

without the backslash. Under REG_EXTENDED, parentheses indicate subgroups
without being escaped. Without the REG_EXTENDED flag, Posix Basic Regular
Expression syntax is used thus causing parentheses to be literals
instead of enclosing subgroups unless they preceded by a backslash '\'.
Because C tries to escape the character following a backslash, you must
use double backslashes to insert a backslash into a string. Therefore, the
regular expression:

^h(al).*(1)$

must be placed in the following form in C code:
  
    char REgu[]="^h\\(al\\).*\\(1\\)$";

if the REG_EXTENDED flag is not used.

Also, in order to match the beginning-of-line symbol '^', regexec cannot
be called with the flag REG_NOTBOL, which indicates that the beginning of
the string is not the beginning of the line.

    if(regexec(compiliert,STring,0,NULL,REG_NOTBOL))

		should be

    if(regexec(compiliert,STring,0,NULL, 0))

On Tue, 17 Nov 1998, 0Matthias Warmbold wrote:

&gt; What is wrong at the following c-code?
&gt; 
&gt; 
&gt; #include &lt;EingabeKlasse.h&gt;
&gt; 
&gt; 
&gt; main(){
&gt;   int hallo;
&gt;   char *name;
&gt;   regex_t *compiliert; 
&gt;   regmatch_t *zuruck;
&gt;   char STring[]="hallo1";
&gt;   char REgu[]="^h\(al).*(1)$";
&gt; 
&gt;   if( ( compiliert  = ( regex_t *) malloc(sizeof(regex_t))) == 0 )
&gt;     printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");
&gt;   if( ( zuruck  = ( regmatch_t *) malloc(sizeof(regmatch_t[2]))) == 0 )
&gt;     printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");
&gt; 
&gt;   hallo = regcomp(compiliert,REgu    , REG_EXTENDED);
&gt; 
&gt;    switch(hallo){
&gt;    case 0:
&gt;        printf("O.K Ausdruck kompiliert!\n");
&gt;        break;
&gt;    case REG_BADRPT:
&gt;      /* Invalid use of repetition operators such  as  using
&gt;       * '*' as the first character.
&gt;       */
&gt;    case REG_BADBR:
&gt;      /* 
&gt;       *......
&gt;     */
&gt;    default:
&gt;     printf("Fehler beim recomp\n");
&gt;     break;
&gt;    }     
&gt; 
&gt;     // W H A T  I S  W R O N G?
&gt;     // Please give me an example with subexpression-matching ;-). 
&gt;     if(regexec(compiliert,STring,0,NULL,REG_NOTBOL))
&gt;        printf("Fehler beim auswerten\n");
&gt;  
&gt;    regfree(compiliert);
&gt;     //free(compiliert);
&gt;  
&gt;  
&gt; }

_________________________________________________________
Edwin Grubbs, Chief Software Engineer  Main: 210-892-4000
Cymitar Technology Group, Inc.       Direct: 210-892-4006
Lorene Office Plaza                     Fax: 210-892-4329
9828 Lorene Lane                 &lt;http://www.cymitar.com&gt;
San Antonio, TX 78216-4450          &lt;egrubbs@cymitar.com&gt;
_________________________________________________________

</body></email><email><emailId>19981118104713</emailId><senderName>0Matthias Warmbold</senderName><senderEmail>matthias.warmbold@dts.de</senderEmail><timestampReceived>1998-11-18 10:47:13-0400</timestampReceived><subject>Re: regcomp</subject><body>

Am Wed, 18 Nov 1998 schrieb Edwin Grubbs:
&gt;
O.K. Thanks for your answer :-).
But now I've another question:
In the gnu-libc-manual :

" Any unused struc
       ture elements will contain the value  --&gt; ""-1"".

       The  regmatch_t  structure  which is the type of pmatch is
       defined in regex.h.

              typedef struct
              {
                regoff_t rm_so;
                regoff_t rm_eo;
              } regmatch_t;

       Each rm_so element that is not -1 indicates the start off
       set of the next largest substring match within the string."

But I don't get -1 if the pattern not matches :-(
Here my Programm:

main(){
  int hallo;
  regex_t *compiliert; 
  regmatch_t *zuruck;
  char STring[]="AB#?C1234";
  char REgu[]="([A-Za-z])..([0-9]{1,2})";
  size_t       n_match = 5;

  if( ( compiliert  = ( regex_t *) malloc(sizeof(regex_t))) == 0 )
    printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");

  if( ( zuruck  = ( regmatch_t *) calloc(n_match,sizeof(regmatch_t))) == 0 )
    printf("Nicht genuegend Speicher um den Promt zu inizialisieren\n");

  hallo = regcomp(compiliert,REgu    , REG_EXTENDED);

   switch(hallo){
  ......
    }
    if(regexec(compiliert,STring,n_match,zuruck,0))
       printf("Fehler beim auswerten\n");
   
 for(int i = 0; i&lt;n_match;i++){
      printf("\nzuruck[%d]-&gt;rm_so = %d \n"
	     "zuruck[%d]-&gt;rm_eo = %d \n",
	     i,zuruck[i].rm_so,
	     i,zuruck[i].rm_eo);
    }
    printf("STring = %s\n",
	   STring);
    regfree(compiliert);
    free(zuruck);
 
 
}
				  
//@}

And I got the following output:
matthias@Matthias:/home/matthias/home/test/sun/sst
[Wed Nov 18] &gt; ./RegulaererAusdruck
O.K Ausdruck kompiliert!


zuruck[4]-&gt;rm_so = 0
zuruck[4]-&gt;rm_eo = 134534176

zuruck[0]-&gt;rm_so = 4 --&gt; String[4] = C
zuruck[0]-&gt;rm_eo = 9 --&gt; String[9] = 4

zuruck[1]-&gt;rm_so = 4 --&gt; String[4] = C
zuruck[1]-&gt;rm_eo = 5 --&gt; String[5] = C

zuruck[2]-&gt;rm_so = 7 --&gt; String[7] = 3
zuruck[2]-&gt;rm_eo = 9 --&gt; String[9] = 4

zuruck[3]-&gt;rm_so = 24 --&gt;  I expected -1
zuruck[3]-&gt;rm_eo = 16 --&gt;  I expected -1    

zuruck[4]-&gt;rm_so = 0  --&gt;  I expected -1
zuruck[4]-&gt;rm_eo = 134534176  --&gt;  I expected -1

STring = AB#?C1234 
REgu[]="([A-Za-z])..([0-9]{1,2})";

Bye.
--

**************************************************************************
Matthias Warmbold
Tel.:0521/891380
oder Tagsueber: 05221/101-126
Email:
mwarmbol@fhzinfo.fh-bielefeld.de
oder  Matthias.Warmbold@dts.de
*************************************************************************

</body></email><email><emailId>19981121070312</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-21 07:03:12-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; /usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/posix/globtest: error in \
&gt; loading shared libraries: \
&gt; /usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/nss/libnss_db.so.2: symbol \
&gt; __nss_db_open, version GLIBC_2.1 not defined in file libdb.so.3 with link time \
&gt; reference 
&gt; I haven't looked to see exactly where things are going wrong, but __nss_db_open

Can you give me the complete command line?  I guess that the library
path is incomplete.  You're probably the first who has db mentioned in
the nsswitch.conf file.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------


</body></email><email><emailId>19981124044855</emailId><senderName>"Sreedevi D."</senderName><senderEmail>sreedevi@jnana.cdotb.ernet.in</senderEmail><timestampReceived>1998-11-24 04:48:55-0400</timestampReceived><subject>Cross compiler problems</subject><body>


Hello!
  I am working on a cross-compiler for Motorola 68k on linux ( Pentinum as
Host). We are compiling the Protocol software to be run on an embedded
system.
      The embedded structures are aligned to even boundaries even if 
we specify -fpack-struct. I tried using __attribute__ ((packed)) also.
But, there is no effect.

Can Anybody send Ur suggestions, please?

Sreedevi D.
Research Engineer,
C-DOT,
Bangalore-52

     

</body></email><email><emailId>19981130151453</emailId><senderName>r00t the LiNuXeRRR</senderName><senderEmail>linux@lcjdap.soroscj.ro</senderEmail><timestampReceived>1998-11-30 15:14:53-0400</timestampReceived><subject>vga=5 lilo boot video mode</subject><body>

---------- Forwarded message ----------
Date: Tue, 24 Nov 1998 22:51:12 +0200 (EET)
From: RedHat Linux lists &lt;rhll@lcjdap.soroscj.ro&gt;
To: redhat-install-list@redhat.com, apollo-list@redhat.com,
     manhattan-list@redhat.com
Subject: vga=5 lilo boo video mode

	I just installed RedHat 5.2 (kernel 2.0.36 final), enabled vga=5
Console: colour VGA+ 80x34 as I usually do, and everithing is O.K. until it
finished loading the kernel then somewhere around these lines in the
init scripts it turns to 80/29... ARGHHH! I hate that!!!
I mut fix it but I dunno how?! Please help me.

&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;
Starting kerneld, version 2.1.85 (pid 34)
Checking filesystems.
Parallelizing fsck version 1.12 (9-Jul-98)
Checking all file systems.
----------------------------------
Mounting local filesystems.
Turning on user and group quotas for local filesystems
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;

</body></email><email><emailId>19981117073213</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-11-17 07:32:13-0400</timestampReceived><subject>Problems building 2.0.102</subject><body>


A few days ago, I aquired a new machine.  I've installed the SuSE 5.3
distribution on it as a starting point and I'm now trying to bring
it closer to the bleeding edge.

I've tried a couple of times to compile glibc-2.0.102 but each time
I've been stopped at sysvipc/ftok.c.  The problem is that the type
'key_t' hasn't been defined.  As far as I can see, the only place
where it gets defined is in posix/sys/types.h, which isn't included
directly or indirectly by ftok.c.

I think that the only relevent parts of my setup are:
     i686-pc-linux-gmulibc1
     kernel headers are linux-2.1.128

Anyone know how to get around this one?


-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------

</body></email><email><emailId>19981117190450</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-17 19:04:50-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; I've tried a couple of times to compile glibc-2.0.102 but each time
&gt; I've been stopped at sysvipc/ftok.c.  The problem is that the type
&gt; 'key_t' hasn't been defined.  As far as I can see, the only place
&gt; where it gets defined is in posix/sys/types.h, which isn't included
&gt; directly or indirectly by ftok.c.

The file sysvipc/sys/ipc.h includes sysdeps/gnu/bits/ipc.h which
includes posix/sys/types.h which defines key_t (based in __key_t).
Take a look at the generated ftok.d file to see what's going wrong.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981118110618</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-11-18 11:06:18-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

Ulrich Drepper wrote:

&gt; The file sysvipc/sys/ipc.h includes sysdeps/gnu/bits/ipc.h which
&gt; includes posix/sys/types.h which defines key_t (based in __key_t).
&gt; Take a look at the generated ftok.d file to see what's going wrong.

Here is what the output from gcc -E says:

# grep bits/ipc.h ftok.I
# 1 "../sysdeps/unix/sysv/linux/bits/ipc.h" 1

and then looking at sysvipc/sys/ipc.h:

# ls -l sysvipc/sys/ipc.h
-rw-r--r--   1 sys      users        1375 Nov 26  1997 sysvipc/sys/ipc.h

# grep "#include" sysvipc/sys/ipc.h
#include &lt;features.h&gt;
#include &lt;bits/ipc.h&gt;

Here is the way the Makefile compiles ftok.c:

gcc ftok.c -c -O -Wall -Winline -Wstrict-prototypes -Wwrite-strings -g      \
-I../include -I. -I/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/sysvipc \
-I.. -I../libio  -I/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1 \
-I../sysdeps/i386/elf -I../crypt/sysdeps/unix \
-I../linuxthreads/sysdeps/unix/sysv/linux -I../linuxthreads/sysdeps/pthread \
-I../linuxthreads/sysdeps/unix/sysv -I../linuxthreads/sysdeps/unix \
-I../linuxthreads/sysdeps/i386/i686 -I../linuxthreads/sysdeps/i386 \
-I../linuxthreads/sysdeps/pthread/no-cmpxchg -I../sysdeps/unix/sysv/linux/i386/i686 \
-I../sysdeps/unix/sysv/linux/i386 -I../sysdeps/unix/sysv/linux -I../sysdeps/gnu \
-I../sysdeps/unix/common -I../sysdeps/unix/mman -I../sysdeps/unix/inet \
-I../sysdeps/unix/sysv/i386 -I../sysdeps/unix/sysv -I../sysdeps/unix/i386 \
-I../sysdeps/unix -I../sysdeps/posix -I../sysdeps/i386/i686 -I../sysdeps/i386/i486 \
-I../sysdeps/libm-i387/i686 -I../sysdeps/i386/fpu -I../sysdeps/libm-i387 \
-I../sysdeps/i386 -I../sysdeps/wordsize-32 -I../sysdeps/ieee754 \
-I../sysdeps/libm-ieee754 -I../sysdeps/generic/elf -I../sysdeps/generic   \
-D_LIBC_REENTRANT -include ../include/libc-symbols.h     -o \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/sysvipc/ftok.o

i.e. the wrong bits/ipc.h gets included because of the order of the
Include switches.

So, two possible problems occur to me immediately: either 'config' has
failed and generated an incorrect list of include directives, or the file
'sysdeps/unix/sysv/linux/bits/ipc.h' shouldn't be there; I made the
sources from:

  7480811 Sep 21 12:30 glibc-2.0.96.tar.gz
   147993 Oct  8 01:53 glibc-2.0.96-2.0.97.diff.gz
    83700 Oct 15 07:58 glibc-2.0.97-2.0.98.diff.gz
   161478 Oct 24 12:55 glibc-2.0.98-2.0.99.diff.gz
   133097 Nov 12 08:29 glibc-2.0.99-2.0.100.diff.gz
     1794 Nov 14 15:01 glibc-2.0.101-2.0.102.diff.gz
    63858 Nov 14 17:52 glibc-2.0.100-2.0.101.diff.gz

So, any ideas about what went wrong?


Cheers,
       Bill


-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------


</body></email><email><emailId>19981118224139</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-11-18 22:41:39-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

Bill Metzenthen &lt;billm@melbpc.org.au&gt; writes:

&gt; # grep bits/ipc.h ftok.I
&gt; # 1 "../sysdeps/unix/sysv/linux/bits/ipc.h" 1

There is no such file anymore.  Did you used patch to update your
sources and forgot to add the -E option?  The file
../sysdeps/unix/sysv/linux/bits/ipc.h in your sources is probably
empty.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981121060402</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-11-21 06:04:02-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

Ulrich Drepper &lt;drepper@cygnus.com&gt; wrote:

&gt; There is no such file anymore.  Did you used patch to update your
&gt; sources and forgot to add the -E option?  The file
&gt; ../sysdeps/unix/sysv/linux/bits/ipc.h in your sources is probably
&gt; empty.

Whoops!  I should have thought of this, but it's a long time since
the non-deleted file problem last bit me (I have a feeling that I
had 'patch' default to -E on my old machine -- I'll have to check).
Sorry for wasting peoples' time on this.

I seem to be able to build 2.0.102 o.k. now, but there is a problem
with 'make check', I get this error when 'make' is doing 'make -C posix tests':

/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/posix/globtest: error in \
loading shared libraries: \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/nss/libnss_db.so.2: symbol \
__nss_db_open, version GLIBC_2.1 not defined in file libdb.so.3 with link time \
reference

I haven't looked to see exactly where things are going wrong, but __nss_db_open
is defined in the libs, although without any GLIBC_x.x attached:

    # nm -o db2/*.so | grep nss_db_open
    db2/libdb.so:00011864 T __nss_db_open

I've tried this with a couple of versions of egcs and binutils but I
get the same results.

Any comments?

-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------


</body></email><email><emailId>19981121065030</emailId><senderName>Bill Metzenthen</senderName><senderEmail>billm@melbpc.org.au</senderEmail><timestampReceived>1998-11-21 06:50:30-0400</timestampReceived><subject>Re: Problems building 2.0.102</subject><body>

According to Ulrich Drepper:
&gt; 
&gt; Can you give me the complete command line?  I guess that the library
&gt; path is incomplete.  You're probably the first who has db mentioned in
&gt; the nsswitch.conf file.
&gt; 

Sure, here's the commands immediately preceding:

gcc -nostdlib -nostartfiles -o \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/posix/globtest  \
-Wl,-dynamic-linker=/lib/ld-linux.so.2  \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/csu/crt1.o \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/csu/crti.o `gcc \
--print-file-name=crtbegin.o` \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/posix/globtest.o  \
-Wl,-rpath-link=/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1:/usr/src/lib/g \
libc/glibc-2.0.102/i686-pc-linux-gnulibc1/math:/usr/src/lib/glibc/glibc-2.0.102/i686-p \
c-linux-gnulibc1/elf:/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/nss:/usr/ \
src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/nis:/usr/src/lib/glibc/glibc-2.0.10 \
2/i686-pc-linux-gnulibc1/db2:/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/r \
t:/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/resolv:/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/linuxthreads \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/libc.so.6 \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/libc_nonshared.a -lgcc `gcc \
--print-file-name=crtend.o` \
                /usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/csu/crtn.o
/bin/sh -e globtest.sh /usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/ \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/elf/ \  ld-linux.so.2
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/posix/globtest: error in \
loading shared libraries: \
/usr/src/lib/glibc/glibc-2.0.102/i686-pc-linux-gnulibc1/nss/libnss_db.so.2: symbol \
__nss_db_open, version GLIBC_2.1 not defined in file libdb.so.3 with link time \
reference

Those lines are extremely long, I hope they get through the mail system...

-- 
-----------------------------------------------------------------------------
Bill Metzenthen        | See http://www.suburbia.net/~billm/ for information
billm@melbpc.org.au    | on an 80x87 FPU emulator, using floating point
billm@suburbia.net     | (particularly on Linux), and code for manipulating
Melbourne, Australia   | the floating point environment on 80x86 Linux.
-----------------------------------------------------------------------------


</body></email><email><emailId>19981115202228</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-11-15 20:22:28-0400</timestampReceived><subject>gdb</subject><body>

Hello !!!

I would really like to know how I can use gdb. I had many cores and I will
have them more, but I don't know how to examin the core files. Can
someone please give me some examples or a good tutorial on this subject?
And please don't tell me to use help in the gdb program, because it
doesn't help me.

TNX!

								Bye. 

                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19981115225944</emailId><senderName></senderName><senderEmail>ggallup@aloha.unl.edu</senderEmail><timestampReceived>1998-11-15 22:59:44-0400</timestampReceived><subject>Re: gdb</subject><body>

On Sun, 15 Nov 1998, Iztok Polanic wrote:

&gt; I would really like to know how I can use gdb. I had many cores and I will
&gt; have them more, but I don't know how to examin the core files. Can
&gt; someone please give me some examples or a good tutorial on this subject?
&gt; And please don't tell me to use help in the gdb program, because it
&gt; doesn't help me.

The GNU "info" pages give an extensive description of the debugger and how
to use it with core files.  On my Slackware system I type 'info gdb'.
There is a lot of information there.

Good Luck, 

Gordon A. Gallup                          Dept. of Physics and Astronomy
University of Nebraska-Lincoln            Lincoln, NE 68588-0111
Voice: (402)472-1230                      FAX: (402)472-2879
http://www.unl.edu/physics/

</body></email><email><emailId>19981116110308</emailId><senderName>Mark Gray</senderName><senderEmail>markgray@iago.nac.net</senderEmail><timestampReceived>1998-11-16 11:03:08-0400</timestampReceived><subject>Re: gdb</subject><body>

&lt;ggallup@aloha.unl.edu&gt; writes:

&gt; 
&gt; On Sun, 15 Nov 1998, Iztok Polanic wrote:
&gt; 
&gt; &gt; I would really like to know how I can use gdb. I had many cores and I will
&gt; &gt; have them more, but I don't know how to examin the core files. Can
&gt; &gt; someone please give me some examples or a good tutorial on this subject?
&gt; &gt; And please don't tell me to use help in the gdb program, because it
&gt; &gt; doesn't help me.
&gt; 
&gt; The GNU "info" pages give an extensive description of the debugger and how
&gt; to use it with core files.  On my Slackware system I type 'info gdb'.
&gt; There is a lot of information there.
&gt; 
&gt; Good Luck, 

Just wanted to add:   once you are in gdb you can type "help" and get
help on all the commands.  (Read the info pages first though.)  Using
gdb within emacs is especially nice -- the other major editors jed,
joe, xwpe, vi(?) etc also have interface hooks to gdb.


&gt; Gordon A. Gallup                          Dept. of Physics and Astronomy
&gt; University of Nebraska-Lincoln            Lincoln, NE 68588-0111
&gt; Voice: (402)472-1230                      FAX: (402)472-2879
&gt; http://www.unl.edu/physics/
&gt; 
&gt; 

</body></email><email><emailId>19981001202426</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-10-01 20:24:26-0400</timestampReceived><subject>binutils 2.9.1.0.14 is released.</subject><body>

This is the beta release of binutils 2.9.1.0.14 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

I am planing to release this to the public as the final public release
for binutils 2.9.1.0.x based on binutils 2.9.1 and the current 16-bit
x86 assembler changes. The future release will be based on the binutils
snapshot, which has a different approach for 16-bit x86 assembly code.
Please test it as much as you can.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.14 to hjl@lucon.org.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.14.tar.gz. Source code.
2. binutils-2.9.1.0.13-2.9.1.0.14.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.14-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.14-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.14-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.14-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.14-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.14-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
10/01/98

</body></email><email><emailId>19981002075541</emailId><senderName>Vasili Goutas Kernel Hacker</senderName><senderEmail>vgo@ratio.de</senderEmail><timestampReceived>1998-10-02 07:55:41-0400</timestampReceived><subject>HELP linking driver written in C++</subject><body>

Hi,

I´m writing a Linux device driver in C++ and have some problems by
linking.
Because the Linux kernel "speeks" only C and C++ compiled objects
differs
in some things, I write my source insite a ´Extern "C" { }´ declaration.

This works fine till now.
I divide my driver into several modules, each one in an other directory.

One module contains of 1-3 classes.
I compile each class with ´cc -c -O3 ...´ and link the modules by ´ld
-Ur ... -o all.o´,
so at the end I link them all together with
´ld -Ur .../A/all.o .../B/all.o ..../C/all.o -o driver.o´
When I want to insert this object into the kernel by ´insmod driver.o´ I
get a lot of
´unresolved symbols´.

 -Some of them are inline functions which for some reason are not
compiled in even I use
  the ´-O3´ and ´-finline-functions´ Option.

 -Some other are function names which are declared ´virtual´ in a base
class.

 -In this base class there are also some ´static´ members which for some
reasons also are
  unresolved symbols.

The base class loocks like this:
class base
 {
  static unsigned char xx;
  static unsigned char yy;
  static unsigned char zz;
  ...
 protected:
 ...
 public:
  base( void );
  virtual ~base( void );
 };
some other classes are devived from base

class derived : protected base
 {
  int a;
  char b;
  ...
 protected:
  virtual init( void );
  ...
 public:
  derived( void );
  virtual ~derived( void );
 };

end then finaly some classes on which I work on inherits from derived
class finalA : protected derived
 {
  ...
 };
class finalB : protected derived
 {
  ...
 };

so when one of the final classes changes the static members of the base
class
I want to se this changes in all of the final classes.
Another way may be global variables, I know, but why does this not work?



An other unresolved symbol is the __buildin_new operator of C++. How is
the library called
which contains the C++ new operator? I link my objects against g++ and
stdc++ whith
´ld -Ur driver.o -lg++ -lstdc++´ but ´new´ is still missing.

Last but not least the symbol ´__divdi3´ is also unknown, and I don´t
know where it comes from.
Maybe its a function call of division in the math lib.

I hope posting this in news groups and mailing lists will reach enough
experience developer
and some of you can help me.

Any Ideas are welcome

TIA
Vasili Goutas

please CC to vgo@ratio.de

--

**********************************************************************
*  Vasili Goutas                            RATIO Entwicklungen GmbH *
*  P:+49-(0)40-369007-37                          Admiralitätstr. 59 *
*  F:+49-(0)40-369007-25                             D-20459 Hamburg *
*  Email: mailto:vgo@ratio.de                                        *
**********************************************************************

</body></email><email><emailId>19981006063247</emailId><senderName>Lei Miao</senderName><senderEmail>leim@nswbc.nsw.edu.au</senderEmail><timestampReceived>1998-10-06 06:32:47-0400</timestampReceived><subject>memory problems &amp; tools?</subject><body>

I want to know if there are any tools out there that can detect
the misuse of memory in C programs. I am currently debugging
an application that has lots of these holes in it. I am running
into a strange problem. GDB shows that the application core dumped
in 
		chunk_alloc(ar_ptr=0x8089d48, nb=16) at malloc.c:2607

called from malloc().

I added some debugging code into the source code and was able to
see all the memory allocation and deallocation activities. The same
piece of code that called the malloc got executed several times and
only crashed once (ie. the previous invocations did not result in
core dumps). I checked the memory log generated by my debug code
and all seems to be fine, no memory leaks, no deallocation of bad
memory etc. 

The code contains a lot of string operations, I am wondering whether
things like running off boundaries of strings could have side-effects
that cause the malloc() to fail.

By the way, I used something called Purify before (on HP-UX) which
could be used to detect memory problems in an application. Is there
something similar for Linux. 

Many thanks,
Lei

</body></email><email><emailId>19981006194812</emailId><senderName>Iztok Polanic</senderName><senderEmail>ssdipola@guest.arnes.si</senderEmail><timestampReceived>1998-10-06 19:48:12-0400</timestampReceived><subject>c/c++ list</subject><body>

Hello !!!

Can you please point me to a C/C++ mailing list. I was searching thru
AltaVista, I asked on redhat-list, but no luck. 
Please help!!!!!

								Bye. 

                                          //////
      xxxxxx                             ( o o )
      xx  xx           /------------oOO-----O-----OOo------------\
      xx  xx           |           From: Iztok Polanic           |
       xxxx            |  E-mail: Iztok.Polanic1@guest.arnes.si  |
      xx  xx           |      WWW: http://kotzi.home.ml.org      |
     xx    xx          |            http://www.intering.si       |
    xx      xx         |           ICQ: Kotzi =&gt; *12556824*      |
                       \-----------------------------------------/

</body></email><email><emailId>19981005215427</emailId><senderName>Lei Miao</senderName><senderEmail>leim@nswbc.nsw.edu.au</senderEmail><timestampReceived>1998-10-05 21:54:27-0400</timestampReceived><subject>Debugger?</subject><body>

Hi,

I am just wondering if there exist debuggers that are more user-friendly
than gdb. I am trying to debug a program and at present I am just using
printf's to show program progress. It would be nicer if I could step through
the code and inspect variable contents etc. I used to use Borland C compilers
with the IDE. Is there something similar for Linux?

Much thanks,
Lei
PS: Please reply via email to leim@nswbc.nsw.edu.au

</body></email><email><emailId>19981011195357</emailId><senderName>"Peter T. Breuer"</senderName><senderEmail>ptb@it.uc3m.es</senderEmail><timestampReceived>1998-10-11 19:53:57-0400</timestampReceived><subject>luv it. libm.so.5.0.9 gcc 2.8.*</subject><body>

Just had to post this while it's on my screen. I'll check what's messed
up vis a vis libraries or brain and so on in a mo'

      26              if (n &lt;= 0) 
      (gdb) n
      28              dbln= n;
      (gdb) n
      29              msd = (long)log10(dbln); /* truncate */
      (gdb) disp dbln
      6: dbln = 2
      (gdb) displ msd
      7: msd = 0
      (gdb) n
      30              if (msd &lt;= 0)
      7: msd = 288                      &lt;---!!!!!!!!!!!!!!!!!!
      6: dbln = 2

And it used to work just fine the last time I tried this kind of thing ..
(sigh). Obviously I've messed up, now where? Let's start trying different
gcc, different kernel, different libc .. I could be some time. First, let's
back down gcc ...


Peter

</body></email><email><emailId>19981012052136</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-10-12 05:21:36-0400</timestampReceived><subject>[GLIBC 2.0.97] things to be recompiled?</subject><body>

Hi.

I've installed GLIBC 2.0.97 on the base of GLIBC 2.0.95, binutils 
2.9.1.0.14. After binutils are installed, there are many c++ codes and 
share libraries to be rebuilt, but g++ runs well. But when GLIBC 2.0.97 
is installed, gcc runs well and binaries are okay, though, g++ denies to 
compile a thing with following messages (more than one)

/usr/lib/gcc-lib/i586-pc-linux-gnu/egcs-2.91.57/libstdc++.so: undefined 
reference to `_IO_file_seekoff@@GLIBC_2.0'

I noticed that old /lib/libc-2.0.95.so, only _IO_file_seekoff is defined 
while in /lib/libc-2.0.97.so, _IO_file_seekoff@@GLIBC_2.1 and 
_IO_file_seekoff@GLIBC_2.0 are both defined. So I guess linker just 
cannot find proper symbol to be linked with... 

I'd ask: is this okay? Should I rebuild binutils or egcs? Or it's another 
flaw when making GLIBC 2.0.97 ? (I guess not.. Things are properly done 
under the instructions of INSTALL file). Thanks for a resolution. :)


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981016023844</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-10-16 02:38:44-0400</timestampReceived><subject>[GLIBC 2.0.97/98] make check</subject><body>

Hi, Ulrich and all,

When I compile both GLIBC 2.0.97/98, I use the "suggested method" in 
INSTALL file, i.e., ./configure, make a new /usr/include and make symbol 
links, make, make check, make dvi, and then make install with 
install_root, then tar/untar new files over old files. However in make check
section both versions of GLIBC meet problem in stdlib/isomac.c and
posix/annexc.c, with error messages like the following one:

/src/glibc-2.0.97/stdlib/isomac.c:74: stdio.h: Aucun fichier ou 
répertoire de ce type.
/src/glibc-2.0.97/stdlib/isomac.c:75: stdlib.h: Aucun fichier ou 
répertoire de ce type.
/src/glibc-2.0.97/stdlib/isomac.c:76: string.h: Aucun fichier ou 
répertoire de ce type.

The solution that I `make install install_root=...' before `make check'.


My install process may be wrong, but that looks quite logical (if you 
need to use old headers, you cannot check the new one). So, comments?

BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
i586-pc-linux-gnu (in some canonical way..:Q)


===== Another report of `make dvi'

I use tex version 3.14159 (C version 6.1) (actually it's a virtex).
`make dvi' always generates a error message in following sequence:
==
! Undefined control sequence.
@XThe Lame Way to Locale Data-title ...onv}: It@s
                                                  portable but @dots {}
@refx ...}@fi @fi @fi @else @csname X#1@endcsname
                                                  @fi #2
@xrefX ...x {#1-snt}@space @fi }[@printednodename
                                                  ],@space @turnoffactive 
@p...
l.56285 ...SO):  @ref{The Lame Way to Locale Data}
                                                  .
==
Not knowing why.


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981022093613</emailId><senderName>"Andris Pavenis"</senderName><senderEmail>pavenis@lanet.lv</senderEmail><timestampReceived>1998-10-22 09:36:13-0400</timestampReceived><subject>Problems building dinamically linked executables</subject><body>

Hi!

In last time I have problems building dinamically linked executables.

System:	P200MMX,
			Linux distribution used: Slackware 3.5 (many packages updated)
			Linux kernel 2.0.36pre15
			egcs-1.1 release
			binutils-2.9.1.0.15 (I tested also earlier versions)
			ld.so.1.9.9

I met similar problems with different packages in last time:
			building packages from gnome-0.30
			building latest development snapshot of egcs (2.92.16 19981019)
			now building latest update of SVGALIB 

Building libraries (a fragment from output from make)

gcc -s -shared -Wl,-soname,libvga.so.1 \
  -o libvga.so.1.3.1 vga.o vgadraw.o vgaclear.o vgaline.o vgapix.o vgapal.o \
  vgacol.o vgamodesel.o vgamisc.o vgadump.o vgaconvplanar.o vgaaccel.o \
  timing.o vgaregs.o interface.o accel.o vgabgpage.o vgabgvt.o vgapci.o \
  mouse/mouse.o joystick/joystick.o keyboard/keyboard.o ramdac/ramdac.o \
  ramdac/normal.o ramdac/attdacs.o ramdac/sierra.o ramdac/icw.o \
  ramdac/s3dacs.o ramdac/IBMRGB52x.o clockchip/icd2061a.o vgadrv.o \ 
  regextr.o modetab.o et4000.o vgahico.o  cirrus.o tvga8900.o oak.o egadrv.o \
  mach32.o s3.o et3000.o gvga6400.o ark.o ati.o ali.o mach64.o chips.o \
  apm.o vesa.o lrmi.o nv3.o mx.o et6000.o -lm

gcc -s -shared -Wl,-soname,libvgagl.so.1 -o libvgagl.so.1.3.1 \
  grlib.o driver.o line.o palette.o scale.o text.o font8x8.o cbitmap.o mem.o 


Building demo programs:

make[1]: Entering directory `/usr/src/svgalib-1.3.1/demos'
gcc -O2 -v -s -o fun fun.c -lvgagl -lvga
Reading specs from /usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57/specs
gcc version egcs-2.91.57 19980901 (egcs-1.1 release)
 /usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57/cpp -lang-c -v -undef -
D__GNUC__=2 -D__GNUC_MINOR__=91 -D__ELF__ -Dunix -Dlinux -D__ELF__ -
D__unix__ -D__linux__ -D__unix -D__linux -Asystem(posix) -D__OPTIMIZE__ -
Asystem(unix) -Acpu(i386) -Amachine(i386) -Di386 -D__i386 -D__i386__ -Di586 -
Dpentium -D__i586 -D__i586__ -D__pentium -D__pentium__ fun.c 
/tmp/ccIDcnOa.i
GNU CPP version egcs-2.91.57 19980901 (egcs-1.1 release) (i386 Linux/ELF)
#include "..." search starts here:
#include &lt;...&gt; search starts here:
 /usr/local/include
 /usr/i586-pc-linux-gnulibc1/include
 /usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57/include
 /usr/include
End of search list.
 /usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57/cc1 /tmp/ccIDcnOa.i -quiet -
dumpbase fun.c -O2 -version -o /tmp/ccymOGRg.s
GNU C version egcs-2.91.57 19980901 (egcs-1.1 release) (i586-pc-linux-gnulibc1) 
compiled by GNU C version egcs-2.91.57 19980901 (egcs-1.1 release).
fun.c: In function `main':
fun.c:462: warning: return type of `main' is not `int'
 /usr/i586-pc-linux-gnulibc1/bin/as -V -Qy -o /tmp/cc8Dj88g.o /tmp/ccymOGRg.s
GNU assembler version 2.9.1 (i586-pc-linux-gnulibc1), using BFD version 
2.9.1.0.15
 /usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57/collect2 -m elf_i386 -dynamic-
linker /lib/ld-linux.so.1 -o fun -s /usr/lib/crt1.o /usr/lib/crti.o /usr/lib/gcc-lib/i586-pc-
linux-gnulibc1/egcs-2.91.57/crtbegin.o -L/usr/local/qt/lib -L/usr/X11/lib -
L/usr/lib/gcc-lib/i586-pc-linux-gnulibc1/egcs-2.91.57 -L/usr/i586-pc-linux-
gnulibc1/lib /tmp/cc8Dj88g.o -lvgagl -lvga -lgcc -lc -lgcc /usr/lib/gcc-lib/i586-pc-
linux-gnulibc1/egcs-2.91.57/crtend.o /usr/lib/crtn.o
/lib/libm.so.5: undefined reference to `__getfpucw'
collect2: ld returned 1 exit status
make[1]: *** [fun] Error 1
make[1]: Leaving directory `/usr/src/svgalib-1.3.1/demos'
make[1]: Entering directory `/usr/src/svgalib-1.3.1/threeDKit'
make[1]: Nothing to be done for `all'.
make[1]: Leaving directory `/usr/src/svgalib-1.3.1/threeDKit'


I tested __getfpucw is in libc.so.5.4.46

Looks that problems appears if command for building shared library
contains '-lsomething' .

Andris

</body></email><email><emailId>19981019180315</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-10-19 18:03:15-0400</timestampReceived><subject>floats</subject><body>


A friend and I were messing around with floats in gcc (egcs 1.1b, to be
exact).  I dislike the 'f' notation for float constants, eg:

   float val = 10.0f;

and prefer to leave off a type specifier, so that the compiler can choose
the best precision:

   float val = 10.0;

Much to my surprise, however, this is slower!  Here's the test we ran:

main()
{
        int i;
        float x = 0;

        for (i = 0; i &lt; 10000000; i++)
                x += 0.1f;       // change the 'f' here

        return x;
}

Compiling with -O3, I get the follow results on my PII-450/libc5 system:

ea:~&gt; time a.out
0.180u 0.000s 0:00.18 100.0%    0+0k 0+0io 47pf+0w
ea:~&gt; time a.out
0.070u 0.000s 0:00.06 116.6%    0+0k 0+0io 46pf+0w

The first case is without the trailing 'f'.  The second case is with.  We
got similar results trying both glibc2 systems as well as different
operations (multiply, etc).  On AMD K-6 systems the effect is even more
pronounced.

Searching the gcc info pages for 'precision' turns up:

`-fallow-single-precision'
     Do not promote single precision math operations to double
     precision, even when compiling with `-traditional'.

     Traditional K&amp;R C promotes all floating point operations to double
     precision, regardless of the sizes of the operands.   On the
     architecture for which you are compiling, single precision may be
     faster than double precision.   If you must use `-traditional',
     but want to use single precision operations when the operands are
     single precision, use this option.   This option has no effect
     when compiling with ANSI or GNU C conventions (the default).

Hmmm, it says it's the default, but okay.  We tried compiling with -O3 and
-fallow-single-precision.  This seems to have no effect whatsoever.
We also randomly tried -ffast-math, but this also has no effect on the
times.

What's going on here?  How can I get gcc to use the fastest precision
based on platform?  I suppose we could write a little post processing
script which would go through and tack on f's if FLOAT_IS_FASTEST (or
something) is defined...but this seems pretty lame, especially for a super
cross-platform app.

Any ideas?

</body></email><email><emailId>19981025194840</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-25 19:48:40-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>



&gt;&gt;&gt;&gt;&gt; Peter Schuller writes:

 &gt; Hi!
 &gt; While I'm at it, I might aswell ask a second question.

 &gt; Since installing a new Linux system I've so far come across two instances where
 &gt; ld has complained about libraries not being found, even though they should be.
 &gt; The first one was with libXpm, and the second with libgdbm (I think that's what
 &gt; it's called - the one vim uses).

 &gt; Here's the story; I've got /usr/X11R6/lib, and other directories, in my
 &gt; LD_LIBRARY_PATH, and they're mentioned in /etc/ld.so.conf.

 &gt; /usr/X11R6/lib contains many libraries, two of them are libXpm and libSM.
 &gt; I tried to compile XFMail, which uses both, and it failed - ld complained about
 &gt; -lXpm: no such file or directory. The weird thing is that -lSM is mentioned
 &gt; *before* -lXpm on the command line, and it doesn't complain about that!

 &gt; The instance with libgdbm was similiar, only this time it was vim I tried to
 &gt; compile.

 &gt; I've been moving around libXpm and doing variations on the commandline - but to
 &gt; no avail.

 &gt; ldconfig -v reports it finding libXpm. And, here comes the *really* weird part
 &gt; - applications dynamically linked with libXpm work - no problem, ld seems to be
 &gt; the only application having problems with it.

 &gt; For example, xfmail (for which I *finally* found a glibc compatible binary)
 &gt; works just great - and it links to libXpm. Here's the output of 'ldd xfmail':

 &gt;         libnsl.so.1 =&gt; /lib/libnsl.so.1 (0x4000e000)
 &gt;         libdb.so.2 =&gt; /lib/libdb.so.2 (0x40014000)
 &gt;         libforms.so.0.88 =&gt; /usr/X11R6/lib/libforms.so.0.88 (0x40022000)
 &gt;         libXpm.so.4 =&gt; /usr/X11R6/lib/libXpm.so.4 (0x4009e000)
 &gt;         libSM.so.6 =&gt; /usr/X11R6/lib/libSM.so.6 (0x400ac000)
 &gt;         libICE.so.6 =&gt; /usr/X11R6/lib/libICE.so.6 (0x400b5000)
 &gt;         libX11.so.6 =&gt; /usr/X11R6/lib/libX11.so.6 (0x400ca000)
 &gt;         libm.so.6 =&gt; /lib/libm.so.6 (0x4016d000)
 &gt;         libc.so.6 =&gt; /lib/libc.so.6 (0x40186000)
 &gt;         /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x40000000)   

 &gt; What could cause this? One particular library not being found, even though
 &gt; other libraries in the same direcotory work fine, and the problem only
 &gt; happending when using ld to top it all off...

There're two different situations when dynamic libraries are used -
and you seem to not differentiate between them:

2) At run-time:  A binary that is linked against dynamic libraries
   finds those dynamic libraries via LD_LIBRARY_PATH, ld.so.conf or
   via a compile-time path.  This is done by the dynamic linker ld.so
   (also known as ld-linux.so) at run time.
1) At link-time: For linking a library you've got to specify the
   directory via -L on the link command line, e.g. -L /usr/X11R6/lib.
   This is done by the linker ld.  If you specify -lXpm, ld searches
   in some default directories, e.g. /usr/lib, and in the directories
   specified by -L before -lXpm for libXpm.so and libXpm.a.  Just pass 
   --verbose to the linker line (if you call ld via gcc, pass
   -Wl,--verbose) to see where ld is looking for which libraries.

Don't mix these situations.  LD_LIBRARY_PATH has nothing at all to do
with the normal linker, it's a runtime environment flag.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981027201138</emailId><senderName>"Peter Dyer"</senderName><senderEmail>pdyer@dial.pipex.com</senderEmail><timestampReceived>1998-10-27 20:11:38-0400</timestampReceived><subject>Error compiling glibc-2.0.99</subject><body>

I compiled glibc-2.0.98 OK but when compiling 2.0.99 with kernel =
1.2.126, glibc-2.0.98 and binutils-2.9.1.0.15 I get the following:-

make[2]: Entering directory `/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'
/usr/src/redhat/BUILD/glibc-2.0.99/objc/elf/ld-linux.so.2 --library-path =
/usr/src/redhat/BUILD/glibc-2.0.99/objc:/usr/src/redhat/BUILD/glibc-2.0.9=
9/objc/math:/usr/src/redhat/BUILD/glibc-2.0.99/objc/elf:/usr/src/redhat/B=
UILD/glibc-2.0.99/objc/nss:/usr/src/redhat/BUILD/glibc-2.0.99/objc/nis:/u=
sr/src/redhat/BUILD/glibc-2.0.99/objc/db2:/usr/src/redhat/BUILD/glibc-2.0=
.99/objc/rt:/usr/src/redhat/BUILD/glibc-2.0.99/objc/resolv:/usr/src/redha=
t/BUILD/glibc-2.0.99/objc/linuxthreads =
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/rpcgen -c =
rpcsvc/bootparam.x -o =
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.T
make[2]: *** =
[/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.stmp] =
Segmentation fault (core dumped)
make[2]: Leaving directory `/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'

Any ideas??

Peter Dyer

[Attachment #3 (text/html)]

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD W3 HTML//EN"&gt;
&lt;HTML&gt;
&lt;HEAD&gt;

&lt;META content=text/html;charset=iso-8859-1 http-equiv=Content-Type&gt;
&lt;META content='"MSHTML 4.72.3110.7"' name=GENERATOR&gt;
&lt;/HEAD&gt;
&lt;BODY bgColor=#ffffff&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;I compiled glibc-2.0.98 OK but when compiling 
2.0.99 with kernel 1.2.126, glibc-2.0.98 and binutils-2.9.1.0.15 I get the 
following:-&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;make[2]: Entering directory 
`/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'&lt;BR&gt;/usr/src/redhat/BUILD/glibc-2.0.99/objc/elf/ld-linux.so.2 \
                
--library-path 
/usr/src/redhat/BUILD/glibc-2.0.99/objc:/usr/src/redhat/BUILD/glibc-2.0.99/objc/math:/ \
usr/src/redhat/BUILD/glibc-2.0.99/objc/elf:/usr/src/redhat/BUILD/glibc-2.0.99/objc/nss \
:/usr/src/redhat/BUILD/glibc-2.0.99/objc/nis:/usr/src/redhat/BUILD/glibc-2.0.99/objc/d \
b2:/usr/src/redhat/BUILD/glibc-2.0.99/objc/rt:/usr/src/redhat/BUILD/glibc-2.0.99/objc/resolv:/usr/src/redhat/BUILD/glibc-2.0.99/objc/linuxthreads \
                
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/rpcgen -c rpcsvc/bootparam.x -o 
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.T&lt;BR&gt;make[2]: *** 
[/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.stmp] Segmentation 
fault (core dumped)&lt;BR&gt;make[2]: Leaving directory 
`/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'&lt;BR&gt;&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Any ideas??&lt;/FONT&gt;&lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;&lt;/FONT&gt; &lt;/DIV&gt;
&lt;DIV&gt;&lt;FONT color=#000000 size=2&gt;Peter Dyer&lt;/FONT&gt;&lt;/DIV&gt;&lt;/BODY&gt;&lt;/HTML&gt;



</body></email><email><emailId>19981028150040</emailId><senderName>holotko</senderName><senderEmail>micros50@computer.net</senderEmail><timestampReceived>1998-10-28 15:00:40-0400</timestampReceived><subject>Passing arguments to functions</subject><body>

I saw something the other day which, after all the years I have been
working with C. I had never seen before, (or at least never paid much
attention to). The idea involved passing arguments to functions by
reference, so that a reference to the variable/argument is passed to
the function and thus, as a side effect the function can modify the
value at that reference. I had ALWAYS done this (or at least simulated
this) by using pointers, but the other day I saw it done without
pointers as follows:

   #include &lt;iostream.h&gt;

   void changetemp( float&amp; );

   int main()
    {
      float temp = 25;
      
      cout &lt;&lt; "temp is: " &lt;&lt; temp &lt;&lt; " deg F \n";
      changetemp(temp);
      cout &lt;&lt; "temp is now: " &lt;&lt; temp &lt;&lt; "deg F \n");
      
     exit(0);
    }

    void changetemp( float&amp; tmp )
     {
       tmp += 5;
      }
Is there any advantage to this approach over using pointers? Also,
this ONLY seems to work under C++, it does not work in C. Using
pointers works in both C &amp; C++. Was this implemented in C++ as a means
of getting around the need to use pointers? Pardon my ignorance but I
am still in the learning stages with respect to C++.

Normally I would accomplish the same thing via pointers, like so:

   changetemp( &amp; temp );  // pass the adress of the value to function.

  void changetemp( float *tmp )
    {
       *tmp += 5;
     }


Sincerely,

/John &lt;micros50@computer.net&gt;

Programmer, Consultant, Administrator, and Professional Lunatic.

</body></email><email><emailId>19981029161039</emailId><senderName>Thanate Dhirasakdanon</senderName><senderEmail>boat@control.ee.eng.chula.ac.th</senderEmail><timestampReceived>1998-10-29 16:10:39-0400</timestampReceived><subject>can't compile glibc-2.0.99</subject><body>

Hi,
	When I try compiling glibc-2.0.99 I got the
	following compilation error in 
	sysdeps/unix/sysv/linux/i386/sigaction.c:

/home/boat/bin/gcc ../sysdeps/unix/sysv/linux/i386/sigaction.c -c -O9
-Wall -Winline -Wstrict-prototypes -Wwrite-strings -g0
-mpentium  -fomit-frame-pointer -g0 -O99
-fomit-frame-pointer -D__USE_STRING_INLINES
   -I../include -I. -I/usr/home/boat/build-glibc/signal -I.. -I../libio
-I/usr/home/boat/build-glibc -I../sysdeps/i386/elf -I../crypt/sysdeps/unix
-I../linuxthreads/sysdeps/unix/sysv/linux
-I../linuxthreads/sysdeps/pthread -I../linuxthreads/sysdeps/unix/sysv
-I../linuxthreads/sysdeps/unix -I../linuxthreads/sysdeps/i386/i586
-I../linuxthreads/sysdeps/i386
-I../linuxthreads/sysdeps/pthread/no-cmpxchg
-I../sysdeps/unix/sysv/linux/i386 -I../sysdeps/unix/sysv/linux
-I../sysdeps/gnu -I../sysdeps/unix/common -I../sysdeps/unix/mman
-I../sysdeps/unix/inet -I../sysdeps/unix/sysv/i386 -I../sysdeps/unix/sysv
-I../sysdeps/unix/i386 -I../sysdeps/unix -I../sysdeps/posix
-I../sysdeps/i386/i586 -I../sysdeps/i386/i486 -I../sysdeps/i386/fpu
-I../sysdeps/libm-i387 -I../sysdeps/i386 -I../sysdeps/wordsize-32
-I../sysdeps/ieee754 -I../sysdeps/libm-ieee754 -I../sysdeps/generic/elf
-I../sysdeps/generic   -D_LIBC_REENTRANT -include
../include/libc-symbols.h     -o
/usr/home/boat/build-glibc/signal/sigaction.o
../sysdeps/unix/sysv/linux/i386/sigaction.c: In function `__sigaction':
../sysdeps/unix/sysv/linux/i386/sigaction.c:68: `__NR_rt_sigaction'
undeclared (first use in this function)
../sysdeps/unix/sysv/linux/i386/sigaction.c:68: (Each undeclared
identifier is reported only once
../sysdeps/unix/sysv/linux/i386/sigaction.c:68: for each function it
appears in.)
../sysdeps/unix/sysv/linux/i386/sigaction.c:68: warning: `resultvar' might
be used uninitialized in this function
make[2]: *** [/usr/home/boat/build-glibc/signal/sigaction.o] Error 1
make[2]: Leaving directory `/usr/home/boat/glibc-2.0.99/signal'
make[1]: *** [signal/subdir_lib] Error 2
make[1]: Leaving directory `/usr/home/boat/glibc-2.0.99'
make: *** [all] Error 2


	I'm using kernel-2.0.34, glibc-2.0.7, egcs-1.1.
	Does anyone have any suggestion?

Thanks,
Thanate

</body></email><email><emailId>19981028043606</emailId><senderName>"T.R Anand"</senderName><senderEmail>anand@darkstar.tatainfotech.co.in</senderEmail><timestampReceived>1998-10-28 04:36:06-0400</timestampReceived><subject>Difference between archives and shared libraries.</subject><body>

I am clear about the concepts of shared libraries and know how to use
them.But I would like to know the difference between shared libraries
(i.e *.so files) and archived libraries (i.e. *.a files).While using both
type of libraries the executable produced is dynamically linked why do we
need .a files when .so files can do the job.
i.e
When I do
	gcc main.c -lfoo1
where libfoo1.a ia an archive. the executable a.out produced is 
dynamically linked.

and when I do 
	gcc main.c -lfoo2
where libfoo2.so is a sharable object library the executable a.out
produced in this case is also dynamically linked.

I hope my question is clear.

anand.

-----------------------------------------------------------------------------
  T.R.ANAND.             E-mail: anand@darkstar.tatainfotech.co.in 
  Software Engineer		 rajagopalan.thillavillagam@tatainfotech.com
  ATG,Network Security           
  Tata Infotech Ltd.
  Mumbai-400096
  INDIA
------------------------------------------------------------------------------

</body></email><email><emailId>19981030222720</emailId><senderName>Danny Lu</senderName><senderEmail>ming78@yahoo.com</senderEmail><timestampReceived>1998-10-30 22:27:20-0400</timestampReceived><subject>Is it good idea to strip archive (.a) files?</subject><body>

Hi,
	I notice that, I can strip an archive...
in doing so.. I can save a lot of space.. but I am
wondering.. will it affect the programs that I compile
which uses the library?


Dan




_________________________________________________________
DO YOU YAHOO!?
Get your free @yahoo.com address at http://mail.yahoo.com

</body></email><email><emailId>19981031180915</emailId><senderName>Danny Lu</senderName><senderEmail>ming78@yahoo.com</senderEmail><timestampReceived>1998-10-31 18:09:15-0400</timestampReceived><subject>a way to ignore previous declaration?</subject><body>

Hi,
	I am just wondering if anyone knows how to
ignore the previous delcaration of a function..
say.. in stdio.h there's a "int dprintf(int,char *,...)" delcaration..
and in proto.h it has 
"int dprintf(char *,...)"....  is there a way
that you can ignore the ones that is declared in
stdio.h.. 


tIA

Dan
_________________________________________________________
DO YOU YAHOO!?
Get your free @yahoo.com address at http://mail.yahoo.com

</body></email><email><emailId>19981031013237</emailId><senderName>d</senderName><senderEmail>"his holiness the reverend doktor xenophon fenderson, the carbon</senderEmail><timestampReceived>1998-10-31 01:32:37-0400</timestampReceived><subject>Re: Is it good idea to strip archive (.a) files?</subject><body>

&gt;&gt;&gt;&gt;&gt; "DL" == Danny Lu &lt;ming78@yahoo.com&gt; writes:

    DL&gt; Hi, I notice that, I can strip an archive... in doing so.. I
    DL&gt; can save a lot of space.. but I am wondering.. will it affect
    DL&gt; the programs that I compile which uses the library?

Yup.  You won't be able to link to that archive file any longer.  I
recently posted an article describing libkibo.a, a library with only
one function, "beable()".  After stripping libkibo, I tried to rebuild
my test program:

	$ ll
	total 22
	-rw-------   1 xenophon xenophon       44 Oct 30 18:29 kibo.c
	-rw-------   1 xenophon xenophon       29 Oct 30 18:50 kibo.h
	-rw-------   1 xenophon xenophon     1464 Oct 30 18:30 kibo.o
	-rw-------   1 xenophon xenophon     1608 Oct 30 18:31 libkibo.a
	-rw-------   1 xenophon xenophon      116 Oct 30 18:31 main.c
	-rwx------   1 xenophon xenophon    14257 Oct 30 18:50 test*
	$ strip libkibo.a
	$ ll libkibo.a
	-rw-------   1 xenophon xenophon      788 Oct 30 20:24 libkibo.a
	$ cc -o test main.c -L. -lkibo -lc
	/tmp/ccbzN8p2.o: In function `main':
	main.c(.text+0x2c): undefined reference to `beable'
	main.c(.text+0x30): undefined reference to `beable'
	collect2: ld returned 1 exit status
	$ nm libkibo.a
	kibo.o:
	No symbols in "kibo.o".

Stripping an object file removes the symbol table from the file.
Without the symbol table, the linker will not be able to resolve
references to symbols that exist within the object file.

(For others' benefit: One usually strips a production executable of
symbol information to streamline the file.  For a production
(not debug) executable, symbol information is unnecessary.)

-- 
Rev. Dr. Xenophon Fenderson, the Carbon(d)ated, KSC, DEATH, SubGenius, mhm21x16
Pope, Patron Saint of All Things Plastic fnord, and Salted Litter of r.g.s.b
"Abraham came not to sacrifice, but to know once and for all whether this God
was a god to be trusted and obeyed. No other test would do." (Fall of Hyperion)

</body></email><email><emailId>19981029221857</emailId><senderName>Peter Schuller</senderName><senderEmail>scode_ufp@usa.net</senderEmail><timestampReceived>1998-10-29 22:18:57-0400</timestampReceived><subject>RE: Difference between archives and shared libraries.</subject><body>

&gt; I am clear about the concepts of shared libraries and know how to use
&gt; them.But I would like to know the difference between shared libraries
&gt; (i.e *.so files) and archived libraries (i.e. *.a files).While using both
&gt; type of libraries the executable produced is dynamically linked why do we
&gt; need .a files when .so files can do the job.

If I'm not misstaken, you can't statically link .so:s. Archives you can.

/ Peter Schuller
----------------
E-Mail: scode_ufp@usa.net
Web: http://hem.passagen.se/petersch

</body></email><email><emailId>19981030235258</emailId><senderName>d</senderName><senderEmail>"his holiness the reverend doktor xenophon fenderson, the carbon</senderEmail><timestampReceived>1998-10-30 23:52:58-0400</timestampReceived><subject>Re: Difference between archives and shared libraries.</subject><body>

&gt;&gt;&gt;&gt;&gt; "TRA" == T R Anand &lt;anand@darkstar.tatainfotech.co.in&gt; writes:

    TRA&gt; I would like to know the difference between shared libraries
    TRA&gt; (i.e *.so files) and archived libraries (i.e. *.a files).

I believe you are being confused by the fact that an executable may
be both statically- and dynamically-linked to various and sundry
library files.

&lt;hand-wave gesture="furious"&gt;

Archived libraries (".a") are basically a whole bunch of object files
(".o") cpio-ed together.  When you link against an archive, it is like
you are linking to a whole string of object files.  You are *not*
loading the code at run-time as you need it.  The compiler (well,
linker) actually copies the necessary code from the archive into the
executable.  This is called "statically linking" to something.

You cannot dynamically link to a archived library because the library
executable code lacks the necessary code to make variable and function
memory addresses "position independent".

Say you have main.c, libkibo.a, and libc.so.  main.c calls both the
"beable()" function in libkibo.a and the "printf()" function in
libc.so.

---begin main.c---
#include &lt;stdio.h&gt;
#include "kibo.h"
int main(int argc, char *argv[])
{
	printf("beable(2,2)=%d\n", beable(2,2));
}
---end main.c---

---begin kibo.h---
extern int beable(int, int);
---end kibo.h---

libkibo.a consists of a single object file, kibo.o, which is built
from kibo.c.

---begin kibo.c---
int beable(int a, int b)
{
	return (a+b);
}
---end kibo.c---

To build libkibo.a, we execute the following commands:

	$ cc -c kibo.c
	$ ar rcs libkibo.a kibo.o

(ar is the archiver program.  Options "rcs" means create/update
archive library with replacement.  See the manual page for ar(1) for
the gory details.)

To build test, assuming libkibo.a is in the current working directory,
we execute the following commands:

	$ cc -o test main.c -L. -lkibo -lc

This builds the program test from main.c and links to libkibo.a and
the system's C library.  Executing test gives us the following
(expected) result:

	$ ./test
	beable(2,2)=4

Ok, so it is a pretty trivial program.  You probably knew all this
already.  What you don't know (or don't seem to understand) is that
this program, test, is not dynamically linked to libkibo.a:

	$ ldd ./test
	libc.so.6.1 =&gt; /lib/libc.so.6.1 (0x0000020000006000)
	/lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x0000020001000000)

As you can see above, test is only linked to the C library and the
dynamic library loader (which on my Alpha is ld-linux.so.2).  The code
for the function "beable()" has been copied directly into the
executable by the linker:

	$ nm ./test | grep beable
	0000000120000780 T beable

(The "T" designator means that beable is a text object.  Back in the
glory days, people called program code "text".  The number proceeding
the "T" is the memory address, in hex, of the function.)  So here is a
working example of a program that is both statically linked (function
beable in libkibo.a) AND dynamically linked (printf from the C
library).

&lt;/hand-wave&gt;

Did any of that make sense?

-- 
Rev. Dr. Xenophon Fenderson, the Carbon(d)ated, KSC, DEATH, SubGenius, mhm21x16
Pope, Patron Saint of All Things Plastic fnord, and Salted Litter of r.g.s.b
"Abraham came not to sacrifice, but to know once and for all whether this God
was a god to be trusted and obeyed. No other test would do." (Fall of Hyperion)

</body></email><email><emailId>19981029163449</emailId><senderName>Andris Pavenis</senderName><senderEmail>pavenis@lanet.lv</senderEmail><timestampReceived>1998-10-29 16:34:49-0400</timestampReceived><subject>Re: can't compile glibc-2.0.99</subject><body>



On Thu, 29 Oct 1998, Thanate Dhirasakdanon wrote:

&gt; Hi,
&gt; 	When I try compiling glibc-2.0.99 I got the
&gt; 	following compilation error in 
&gt; 	sysdeps/unix/sysv/linux/i386/sigaction.c:
&gt; 
&gt; /home/boat/bin/gcc ../sysdeps/unix/sysv/linux/i386/sigaction.c -c -O9

&gt; ../sysdeps/unix/sysv/linux/i386/sigaction.c: In function `__sigaction':
&gt; ../sysdeps/unix/sysv/linux/i386/sigaction.c:68: `__NR_rt_sigaction'
&gt; undeclared (first use in this function)

&gt; 	I'm using kernel-2.0.34, glibc-2.0.7, egcs-1.1.
&gt; 	Does anyone have any suggestion?
&gt; 

The same as I got with 2.0.36pre15 and egcs-1.1. The problem is
that as I looked sigaction.c uses system call that present only
in 2.1.XXX (I don't know begining from which number).

So currently glibc-2.0.99 looks incompatible with kernels 2.0.XX

Andris 

</body></email><email><emailId>19981028151843</emailId><senderName>"Mullen, Patrick"</senderName><senderEmail>patrick.mullen@gsc.gte.com</senderEmail><timestampReceived>1998-10-28 15:18:43-0400</timestampReceived><subject>RE: Passing arguments to functions</subject><body>

Reference variables were created in C++.  They are a means of simplifying
pointers.  They are a means of using pointers where you don't have to
dereference the variable.  However, you also lose the power to change
what the reference points to.

They're both good and bad.  Good because they're convenient, bad because
sometimes you forget something is a reference rather than a regular
variable so you may forget that your local changes actually affect the
calling function as well.  This also makes it a pain to follow someone
else's code when they use input parameters as references and modify
them inside the function.  Yes, it's convenient for programming, but
figuring out what someone else was doing with a side effect like this
can be difficult. 


~Patrick

</body></email><email><emailId>19981025201426</emailId><senderName>Peter Schuller</senderName><senderEmail>scode_ufp@usa.net</senderEmail><timestampReceived>1998-10-25 20:14:26-0400</timestampReceived><subject>ld and dynamic libs - ld doesn't find them</subject><body>

Hi!

While I'm at it, I might aswell ask a second question.

Since installing a new Linux system I've so far come across two instances where
ld has complained about libraries not being found, even though they should be.
The first one was with libXpm, and the second with libgdbm (I think that's what
it's called - the one vim uses).

Here's the story; I've got /usr/X11R6/lib, and other directories, in my
LD_LIBRARY_PATH, and they're mentioned in /etc/ld.so.conf.

/usr/X11R6/lib contains many libraries, two of them are libXpm and libSM.
I tried to compile XFMail, which uses both, and it failed - ld complained about
-lXpm: no such file or directory. The weird thing is that -lSM is mentioned
*before* -lXpm on the command line, and it doesn't complain about that!

The instance with libgdbm was similiar, only this time it was vim I tried to
compile.

I've been moving around libXpm and doing variations on the commandline - but to
no avail.

ldconfig -v reports it finding libXpm. And, here comes the *really* weird part
- applications dynamically linked with libXpm work - no problem, ld seems to be
the only application having problems with it.

For example, xfmail (for which I *finally* found a glibc compatible binary)
works just great - and it links to libXpm. Here's the output of 'ldd xfmail':

        libnsl.so.1 =&gt; /lib/libnsl.so.1 (0x4000e000)
        libdb.so.2 =&gt; /lib/libdb.so.2 (0x40014000)
        libforms.so.0.88 =&gt; /usr/X11R6/lib/libforms.so.0.88 (0x40022000)
        libXpm.so.4 =&gt; /usr/X11R6/lib/libXpm.so.4 (0x4009e000)
        libSM.so.6 =&gt; /usr/X11R6/lib/libSM.so.6 (0x400ac000)
        libICE.so.6 =&gt; /usr/X11R6/lib/libICE.so.6 (0x400b5000)
        libX11.so.6 =&gt; /usr/X11R6/lib/libX11.so.6 (0x400ca000)
        libm.so.6 =&gt; /lib/libm.so.6 (0x4016d000)
        libc.so.6 =&gt; /lib/libc.so.6 (0x40186000)
        /lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x40000000)   

What could cause this? One particular library not being found, even though
other libraries in the same direcotory work fine, and the problem only
happending when using ld to top it all off...

/ Peter Schuller
----------------
E-Mail: scode_ufp@usa.net
Web: http://hem.passagen.se/petersch

</body></email><email><emailId>19981026102547</emailId><senderName>Mark Kettenis</senderName><senderEmail>kettenis@wins.uva.nl</senderEmail><timestampReceived>1998-10-26 10:25:47-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

   Date: 	Mon, 26 Oct 1998 11:37:08 +0100 (CET)
   From: Peter Schuller &lt;scode_ufp@usa.net&gt;

   For example, vim that I'm trying to compile. It links to libndbm,
   which is in /usr/lib. ld finds it automatically, without -L, since
   it's a standard location. libgdbm, that is in the same directory,
   /usr/lib, is not found by ld (-lndbm is mentioned on the command
   line *before* -lgdbm).

   Here's the gdbm files in /usr/lib:

   lrwxrwxrwx   1 root     root           16 Oct 22 21:10 libgdbm.so.1
   -&gt; libgdbm.so.1.7.3
   -rw-r--r--   1 root     root        21160 May 22 16:23 libgdbm.so.1.7.3
   lrwxrwxrwx   1 root     root           16 Oct 22 21:10 libgdbm.so.2 -&gt;
   libgdbm.so.1.7.3 

Well, there is no libgdbm.so, which is the file ld is looking for.  If
you really want to link against libgdbm do

   ln -s libgdbm.so libgdbm.so.1.7.3

or run ldconfig.

Mark

</body></email><email><emailId>19981026103708</emailId><senderName>Peter Schuller</senderName><senderEmail>scode_ufp@usa.net</senderEmail><timestampReceived>1998-10-26 10:37:08-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

&gt; There're two different situations when dynamic libraries are used -
&gt; and you seem to not differentiate between them:

No, I didn't know about that. Thanks! But the problem persists :(

For example, vim that I'm trying to compile. It links to libndbm, which is in
/usr/lib. ld finds it automatically, without -L, since it's a standard
location. libgdbm, that is in the same directory, /usr/lib, is not found by ld
(-lndbm is mentioned on the command line *before* -lgdbm).

Here's the gdbm files in /usr/lib:

lrwxrwxrwx   1 root     root           16 Oct 22 21:10 libgdbm.so.1
-&gt; libgdbm.so.1.7.3
-rw-r--r--   1 root     root        21160 May 22 16:23 libgdbm.so.1.7.3
lrwxrwxrwx   1 root     root           16 Oct 22 21:10 libgdbm.so.2 -&gt;
libgdbm.so.1.7.3 

And the ndmb:

lrwxrwxrwx   1 root     root            7 Oct 22 19:21 libndbm.a -&gt; libdb.a
lrwxrwxrwx   1 root     root            8 Oct 22 19:21 libndbm.so -&gt; libdb.so

Which needs:

-rw-r--r--   1 root     root        79722 Jul 17 03:38 libdb.a
lrwxrwxrwx   1 root     root           19 Oct 22 19:21 libdb.so -&gt;
/lib/libdb-2.0.7.so
lrwxrwxrwx   1 root     root           16 Oct 22 19:24 libdb2.so.2 -&gt;
libdb2.so.2.3.16
-rw-r--r--   1 root     root       249604 May  2 16:30 libdb2.so.2.3.16     


Is it at all possible that this is a bug in some util? Or is it just me again,
having missunderstood something.

/ Peter Schuller
----------------
E-Mail: scode_ufp@usa.net
Web: http://hem.passagen.se/petersch

</body></email><email><emailId>19981026105007</emailId><senderName>Wolfram Gloger</senderName><senderEmail>wmglo@dent.med.uni-muenchen.de</senderEmail><timestampReceived>1998-10-26 10:50:07-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

Hello,

&gt; Well, there is no libgdbm.so, which is the file ld is looking for.  If
&gt; you really want to link against libgdbm do
&gt; 
&gt;    ln -s libgdbm.so libgdbm.so.1.7.3

You have the args reversed; try

ln -s libgdbm.so.1.7.3 libgdbm.so

&gt; or run ldconfig.

No !  ldconfig does not (and should not) generate .so links (unless
perhaps the soname of the library ends in `.so', but this should not
happen).  These links must be set up manually or by a package
management system.

Regards,
Wolfram.
-- 
`Surf the sea, not double-u three...'
wmglo@dent.med.uni-muenchen.de

</body></email><email><emailId>19981026135420</emailId><senderName>Mark Kettenis</senderName><senderEmail>kettenis@wins.uva.nl</senderEmail><timestampReceived>1998-10-26 13:54:20-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

   Date: 	26 Oct 1998 10:50:07 -0000
   From: Wolfram Gloger &lt;wmglo@dent.med.uni-muenchen.de&gt;

   Hello,

   &gt; Well, there is no libgdbm.so, which is the file ld is looking for.  If
   &gt; you really want to link against libgdbm do
   &gt; 
   &gt;    ln -s libgdbm.so libgdbm.so.1.7.3

   You have the args reversed; try

   ln -s libgdbm.so.1.7.3 libgdbm.so

You're right of course.

   &gt; or run ldconfig.

   No !  ldconfig does not (and should not) generate .so links (unless
   perhaps the soname of the library ends in `.so', but this should not
   happen).  These links must be set up manually or by a package
   management system.

Right again (I haven't used ldconfig for quite a while, and the only
thing I remember is that ldconfig had the nasty habit of making links
for me).

Sorry for the bad advice.

Mark

</body></email><email><emailId>19981027134958</emailId><senderName>Peter Schuller</senderName><senderEmail>scode_ufp@usa.net</senderEmail><timestampReceived>1998-10-27 13:49:58-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

&gt; Well, there is no libgdbm.so, which is the file ld is looking for.  If
&gt; you really want to link against libgdbm do

Ah! Thanks! I didn't know it looked for .so:s only. It got it to work now...

/ Peter Schuller
----------------
E-Mail: scode_ufp@usa.net
Web: http://hem.passagen.se/petersch

</body></email><email><emailId>19981019204403</emailId><senderName>Michael Meissner</senderName><senderEmail>meissner@cygnus.com</senderEmail><timestampReceived>1998-10-19 20:44:03-0400</timestampReceived><subject>Re: floats</subject><body>

On Mon, Oct 19, 1998 at 11:03:15AM -0700, Adam Wiggins wrote:
&gt; 
&gt; A friend and I were messing around with floats in gcc (egcs 1.1b, to be
&gt; exact).  I dislike the 'f' notation for float constants, eg:
&gt; 
&gt;    float val = 10.0f;
&gt; 
&gt; and prefer to leave off a type specifier, so that the compiler can choose
&gt; the best precision:
&gt; 
&gt;    float val = 10.0;

Wrong.  The ISO C specification specially says that floating point constants
without a trailing suffix (ie, 'f') are 'double'.  No ifs, ands, or buts.

&gt; Much to my surprise, however, this is slower!  Here's the test we ran:
&gt; 
&gt; main()
&gt; {
&gt;         int i;
&gt;         float x = 0;
&gt; 
&gt;         for (i = 0; i &lt; 10000000; i++)
&gt;                 x += 0.1f;       // change the 'f' here
&gt; 
&gt;         return x;
&gt; }
&gt; 
&gt; Compiling with -O3, I get the follow results on my PII-450/libc5 system:
&gt; 
&gt; ea:~&gt; time a.out
&gt; 0.180u 0.000s 0:00.18 100.0%    0+0k 0+0io 47pf+0w
&gt; ea:~&gt; time a.out
&gt; 0.070u 0.000s 0:00.06 116.6%    0+0k 0+0io 46pf+0w
&gt; 
&gt; The first case is without the trailing 'f'.  The second case is with.  We
&gt; got similar results trying both glibc2 systems as well as different
&gt; operations (multiply, etc).  On AMD K-6 systems the effect is even more
&gt; pronounced.
&gt; 
&gt; Searching the gcc info pages for 'precision' turns up:
&gt; 
&gt; `-fallow-single-precision'
&gt;      Do not promote single precision math operations to double
&gt;      precision, even when compiling with `-traditional'.

Note, since the constant is already double, this switch has no effect.
Basically without the trailing suffix, the code becomes:

main()
{
	int i;
	float x = 0;

	for (i = 0; i &lt; 1000000; i++)
	  {
	    double temp = x + 0.1;
	    x = temp;
	  }

	return x;
}

Note, if you had used 1 instead of 0.1, then the compiler would do what you
want, since 1.0 has an exact representation as both float and double.  On the
other hand, 0.1 is not the same, since the computer uses binary internally.
You might want to browse things like numerical methods, floating point, etc. if
this is still fuzzy (ie, adding 0.1 10000000 times does not give you
1000000.0).

&gt;      Traditional K&amp;R C promotes all floating point operations to double
&gt;      precision, regardless of the sizes of the operands.   On the
&gt;      architecture for which you are compiling, single precision may be
&gt;      faster than double precision.   If you must use `-traditional',
&gt;      but want to use single precision operations when the operands are
&gt;      single precision, use this option.   This option has no effect
&gt;      when compiling with ANSI or GNU C conventions (the default).
&gt; 
&gt; Hmmm, it says it's the default, but okay.  We tried compiling with -O3 and
&gt; -fallow-single-precision.  This seems to have no effect whatsoever.
&gt; We also randomly tried -ffast-math, but this also has no effect on the
&gt; times.

As the documentation says, the traditional behavior was to do ALL float
arithmetic in double (this is due in part because C was created for the PDP-11,
and the 11/70 floating point unit was actually faster at double precision).
This means:

	float foo(float a, float b){ return a+b; }

traditionally would be done as:

	float foo(float a, float b){
		double a_temp = (double)a;
		double b_temp = (double)b;
		double r_temp = a_temp + b_temp;
		return (float) r_temp;
	}

&gt; What's going on here?  How can I get gcc to use the fastest precision
&gt; based on platform?  I suppose we could write a little post processing
&gt; script which would go through and tack on f's if FLOAT_IS_FASTEST (or
&gt; something) is defined...but this seems pretty lame, especially for a super
&gt; cross-platform app.

-- 
Michael Meissner, Cygnus Solutions (Massachusetts office)
4th floor, 955 Massachusetts Avenue, Cambridge, MA 02139, USA
meissner@cygnus.com,	617-354-5416 (office),	617-354-7161 (fax)

</body></email><email><emailId>19981019222824</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-10-19 22:28:24-0400</timestampReceived><subject>Re: floats</subject><body>

On Mon, 19 Oct 1998, Michael Meissner wrote:
&gt; On Mon, Oct 19, 1998 at 11:03:15AM -0700, Adam Wiggins wrote:
&gt; &gt; A friend and I were messing around with floats in gcc (egcs 1.1b, to be
&gt; &gt; exact).  I dislike the 'f' notation for float constants, eg:
&gt; &gt; 
&gt; &gt;    float val = 10.0f;
&gt; &gt; 
&gt; &gt; and prefer to leave off a type specifier, so that the compiler can choose
&gt; &gt; the best precision:
&gt; &gt; 
&gt; &gt;    float val = 10.0;
&gt; 
&gt; Wrong.  The ISO C specification specially says that floating point constants
&gt; without a trailing suffix (ie, 'f') are 'double'.  No ifs, ands, or buts.

*nod*, but gcc does a lot of stuff which is not necessarily part of 'standard'
C, such as:

foo(char *s)
{
  char array[strlen(s)+1];
  /* ... */
}

and:

  Foo *foo = new Foo[size](param, param2);

So I was wondering if it added extra functionality to the standard here,
as well.  I take it you are saying 'no', but...(more below)

&gt; &gt; Searching the gcc info pages for 'precision' turns up:
&gt; &gt; 
&gt; &gt; `-fallow-single-precision'
&gt; &gt;      Do not promote single precision math operations to double
&gt; &gt;      precision, even when compiling with `-traditional'.
&gt; &gt;     Traditional K&amp;R C promotes all floating point operations to double
&gt; &gt;     precision, regardless of the sizes of the operands.   On the
&gt; &gt;     architecture for which you are compiling, single precision may be
&gt; &gt;     faster than double precision.   If you must use `-traditional',
&gt; &gt;     but want to use single precision operations when the operands are
&gt; &gt;     single precision, use this option.   This option has no effect
&gt; &gt;     when compiling with ANSI or GNU C conventions (the default).
&gt; 
&gt; Note, since the constant is already double, this switch has no effect.

So I don't understand, then, what this switch does.

It seems to say that -ftraditional will cause all floating point operations to
be promoted to double.  This implies, to me, that without the switch, the
behavior should be otherwise.  Right?

So what I want to know is, what is that other behavior?  Apparently it's no
different, so the switch and all of the accompanying text, above, is
completely lacking in any function whatsoever.  Which makes me wonder what
it is doing there - is this a holdover from older versions of gcc, which
perhaps weren't as strict (by default) to the standard?  If so, does this mean
that an older version of gcc will do what I want?

&gt; Note, if you had used 1 instead of 0.1, then the compiler would do what you
&gt; want, since 1.0 has an exact representation as both float and double.  On the

Yes, and in fact I frequently omit the .0 for this reason.  This doesn't help,
of course, if I want a value which does not fall on an even integer value, and
seems mighty inconsistent that certain numbers would work one way and certain
ones another.

&gt; other hand, 0.1 is not the same, since the computer uses binary internally.
&gt; You might want to browse things like numerical methods, floating point, etc. i
&gt; this is still fuzzy (ie, adding 0.1 10000000 times does not give you
&gt; 1000000.0).

I'm familiar with the binary representations of floating point numbers.  It
still doesn't explain to me why the compiler wouldn't choose to store immediates
with precisions based on the context where they are being used.
Obviously in the case:

  float f = 1.0;

promoting 1.0 to double in order to get a little closer to a 'true' 1.0
isn't going to help.  In addition, consider:

#define PI 3.1415

float Fpi = PI;
double Dpi = PI;

This is something that can't be fixed with sed'ing the source for floating
point constants.

So, does this mean I can expect:

  short i;
  i = 1 + 1;

to translate into:

  short i;
  int j = 1;
  int k = 1;
  i = (short)(j + k);

?

&gt; &gt;      Traditional K&amp;R C promotes all floating point operations to double
&gt; &gt;      precision, regardless of the sizes of the operands.   On the
&gt; &gt;      architecture for which you are compiling, single precision may be
&gt; &gt;      faster than double precision.   If you must use `-traditional',
&gt; &gt;      but want to use single precision operations when the operands are
&gt; &gt;      single precision, use this option.   This option has no effect
&gt; &gt;      when compiling with ANSI or GNU C conventions (the default).
&gt; &gt; 
&gt; &gt; Hmmm, it says it's the default, but okay.  We tried compiling with -O3 and
&gt; &gt; -fallow-single-precision.  This seems to have no effect whatsoever.
&gt; &gt; We also randomly tried -ffast-math, but this also has no effect on the
&gt; &gt; times.
&gt; 
&gt; As the documentation says, the traditional behavior was to do ALL float
&gt; arithmetic in double

...but ONLY if -ftraditional was used, which I am not using!
Thus my confusion.

&gt; (this is due in part because C was created for the PDP-11
&gt; and the 11/70 floating point unit was actually faster at double precision).

Which I totally understand, since I my app has highly critical floating point
speed, so the best (fastest) precision should be chosen.  Unfortunately,
I don't have the luxury of assuming a specific architexture.  It needs to
run maximum speed on 32 and 64 bit x86 processors, 64 bit Alphas, PowerPCs,
Sparcs, and so forth.  Is a 'sed' script and some hardcoded #define's based
on processor type the only way to achieve this?  This seems like a rather
terrible hack for something the compiler could do fairly easily, although
if that's the only way then that is the way I shall do it.

Note I'm not trying to be critical of the authors of gcc or egcs.  I'm
sure they are much more knowledgable than I on this subject; that's why
I'm trying to figure out their thinking on it.  I understand if they
want the default (no switches) compiler to use the standard,
antiquitated as it may be.  But it seems that switches like -O3,
-ffast-math, -fallow-single-precsion, or even -fscrew-traditional should
allow the compiler to choose the much faster, though slightly non-standard,
option.

&gt; traditionally would be done as:
&gt; 
&gt; 	float foo(float a, float b){
&gt; 		double a_temp = (double)a;
&gt; 		double b_temp = (double)b;
&gt; 		double r_temp = a_temp + b_temp;
&gt; 		return (float) r_temp;
&gt; 	}

Ack! :)
Anyhow, you keep saying "traditionally".  Does this mean there is
another possibility, or not?  I would expect that pgcc does something
like this, but again that doesn't help me because x86 is only one of
our target platforms.

Thanks for the reply, and any other info you can share...

</body></email><email><emailId>19981022165745</emailId><senderName>"Andris Pavenis"</senderName><senderEmail>pavenis@lanet.lv</senderEmail><timestampReceived>1998-10-22 16:57:45-0400</timestampReceived><subject>Re: Problems building dinamically linked executables</subject><body>

Date sent:      	Thu, 22 Oct 1998 12:21:03 ric
Subject:        	Re: Problems building dinamically linked executables
From:           	lawson_whitney@juno.com (Lawson A. Whitney)

&gt; Andris,
&gt; 
&gt; Ld is and always has been a one pass linker:  it processes object files
&gt; and libraries in the order it sees them, and if something is left
&gt; undefined at the end that is defined in an earlier library but hadn't
&gt; been referred to when that library was processed, oh well..  (You can
&gt; override that by something like --start group -lc -lm --end group, which
&gt; will keep it in the group until no new undefined symbols come up..)
&gt; 
&gt; I don't know why this particular combination of libraries and makefiles
&gt; should behave just so, but if you want evasive action, just all -lc to
&gt; the end of the ld command line.  I think.
&gt; 

I tried (not with SVGALIB but when building libg++ together with 
egcs-2.92.16 where I had similar problem in tests of libg++):

     - adding '-lc' directly after '-lg++ -lstdc++' does not help;

     - adding '-lm -lc' there fixes the problem. But it is annoying
       to do such things for any Makefile where I'm getting such
       problem as gcc already adds '-lgcc -lc -lgcc' at end of
       command  line when calling linker;

Of course it is wild guess but I suspect some problem with binutils 
or maybe ld.so.1.9.9. I tried also rebuild binutils with gcc-2.7.2.3 to 
exclude any possible problems with egcs-1.1 release, but that 
didn't help.

Andris

</body></email><email><emailId>19981016133959</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-16 13:39:59-0400</timestampReceived><subject>Re: [GLIBC 2.0.97/98] make check</subject><body>

&gt;&gt;&gt;&gt;&gt; Lin Zhe Min writes:

Lin&gt; Hi, Ulrich and all,
Lin&gt; When I compile both GLIBC 2.0.97/98, I use the "suggested method" in 
Lin&gt; INSTALL file, i.e., ./configure, make a new /usr/include and make symbol 
Lin&gt; links, make, make check, make dvi, and then make install with 
Lin&gt; install_root, then tar/untar new files over old files. However in make check
Lin&gt; section both versions of GLIBC meet problem in stdlib/isomac.c and
Lin&gt; posix/annexc.c, with error messages like the following one:

Making a new /usr/include and using install_root shouldn't be
necessary with 2.0.97/98 anymore.  The problems we had should be
solved.

Lin&gt; /src/glibc-2.0.97/stdlib/isomac.c:74: stdio.h: Aucun fichier ou 
Lin&gt; répertoire de ce type.
Lin&gt; /src/glibc-2.0.97/stdlib/isomac.c:75: stdlib.h: Aucun fichier ou 
Lin&gt; répertoire de ce type.
Lin&gt; /src/glibc-2.0.97/stdlib/isomac.c:76: string.h: Aucun fichier ou 
Lin&gt; répertoire de ce type.

Lin&gt; The solution that I `make install install_root=...' before `make check'.


Lin&gt; My install process may be wrong, but that looks quite logical (if you 
Lin&gt; need to use old headers, you cannot check the new one). So, comments?

Lin&gt; BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
Lin&gt; i586-pc-linux-gnu (in some canonical way..:Q)
What is it reporting?

Lin&gt; ===== Another report of `make dvi'

Lin&gt; I use tex version 3.14159 (C version 6.1) (actually it's a virtex).
Lin&gt; `make dvi' always generates a error message in following sequence:
Lin&gt; ==
Lin&gt; ! Undefined control sequence.
Lin&gt; @XThe Lame Way to Locale Data-title ...onv}: It@s
Lin&gt;                                                   portable but @dots {}
Lin&gt; @refx ...}@fi @fi @fi @else @csname X#1@endcsname
Lin&gt;                                                   @fi #2
Lin&gt; @xrefX ...x {#1-snt}@space @fi }[@printednodename
Lin&gt;                                                   ],@space @turnoffactive 
Lin&gt; @p...
Lin&gt; l.56285 ...SO):  @ref{The Lame Way to Locale Data}
Lin&gt;                                                   .
Lin&gt; ==
Lin&gt; Not knowing why.

You might have an old version of texinfo.tex lying around which is
used instead of the version that comes with glibc2.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981016151059</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-10-16 15:10:59-0400</timestampReceived><subject>Re: [GLIBC 2.0.97/98] make check</subject><body>

Gute Nacht. (23.06 jezte!)

&gt; Making a new /usr/include and using install_root shouldn't be
&gt; necessary with 2.0.97/98 anymore.  The problems we had should be
&gt; solved.

Euh.. "should" be resolved? Indeedly I had met the problem (in upgrading 
from 2.0.6 to 2.0.94?) so I do according to the instructions for I can
upgrade those header files safely.

However the case of isomac.c seems to be bogus. It would include some old
header in compilation.

&gt; Lin&gt; BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
&gt; Lin&gt; i586-pc-linux-gnu (in some canonical way..:Q)
&gt; What is it reporting?

Sort of "cannot determine host system type". Only one line w/o explaining 
the reason.

&gt; You might have an old version of texinfo.tex lying around which is
&gt; used instead of the version that comes with glibc2.

I have 2 texinfo.tex files, which I believe the one in teTeX directory is 
used: /usr/share/automake/texinfo.tex and 
/usr/teTeX/texmf/tex/texinfo/texinfo.tex

Is it necessary to copy the one in glibc2 over the one in teTeX dir.?
No instruction tells it, though.


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981016162319</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-16 16:23:19-0400</timestampReceived><subject>Re: [GLIBC 2.0.97/98] make check</subject><body>

&gt;&gt;&gt;&gt;&gt; Lin Zhe Min writes:

 &gt; Gute Nacht. (23.06 jezte!)
&gt;&gt; Making a new /usr/include and using install_root shouldn't be
&gt;&gt; necessary with 2.0.97/98 anymore.  The problems we had should be
&gt;&gt; solved.

 &gt; Euh.. "should" be resolved? Indeedly I had met the problem (in upgrading 
 &gt; from 2.0.6 to 2.0.94?) so I do according to the instructions for I can
 &gt; upgrade those header files safely.
Reread again what I said:  It should be fixed with 2.0.97 - I never
said that it was solved with 2.0.94 (and indeed 2.0.94 had some
problems with make install).

 &gt; However the case of isomac.c seems to be bogus. It would include some old
 &gt; header in compilation.

Lin&gt; BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
Lin&gt; i586-pc-linux-gnu (in some canonical way..:Q)
&gt;&gt; What is it reporting?

 &gt; Sort of "cannot determine host system type". Only one line w/o explaining 
 &gt; the reason.
Then please copy &amp; paste the exact line and try to debug configure.

&gt;&gt; You might have an old version of texinfo.tex lying around which is
&gt;&gt; used instead of the version that comes with glibc2.

 &gt; I have 2 texinfo.tex files, which I believe the one in teTeX directory is 
 &gt; used: /usr/share/automake/texinfo.tex and 
 &gt; /usr/teTeX/texmf/tex/texinfo/texinfo.tex

 &gt; Is it necessary to copy the one in glibc2 over the one in teTeX dir.?
 &gt; No instruction tells it, though.

If you run make dvi, tex will output which texinfo.tex it is using.
Just play around until you find which one is broken.

Without proper error messages I can't help you:-(.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981016174919</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-16 17:49:19-0400</timestampReceived><subject>Re: [GLIBC 2.0.97/98] make check</subject><body>

Lin Zhe Min &lt;ljm@marx.ljm.wownet.net&gt; writes:

&gt; /src/glibc-2.0.97/stdlib/isomac.c:74: stdio.h: Aucun fichier ou 
&gt; répertoire de ce type.
&gt; /src/glibc-2.0.97/stdlib/isomac.c:75: stdlib.h: Aucun fichier ou 
&gt; répertoire de ce type.
&gt; /src/glibc-2.0.97/stdlib/isomac.c:76: string.h: Aucun fichier ou 
&gt; répertoire de ce type.

Are these all messages?  I probably know what's the problem.

&gt; BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
&gt; i586-pc-linux-gnu (in some canonical way..:Q)

You have to investigate this yourself.  The config.guess file hasn't changed.

&gt; I use tex version 3.14159 (C version 6.1) (actually it's a virtex).
&gt; `make dvi' always generates a error message in following sequence:

I've changed the text a bit to avoid this problem.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981012165437</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-12 16:54:37-0400</timestampReceived><subject>Re: [GLIBC 2.0.97] things to be recompiled?</subject><body>

Lin Zhe Min &lt;ljm@marx.ljm.wownet.net&gt; writes:

&gt; I noticed that old /lib/libc-2.0.95.so, only _IO_file_seekoff is defined 
&gt; while in /lib/libc-2.0.97.so, _IO_file_seekoff@@GLIBC_2.1 and 
&gt; _IO_file_seekoff@GLIBC_2.0 are both defined. So I guess linker just 
&gt; cannot find proper symbol to be linked with... 
&gt; 
&gt; I'd ask: is this okay? Should I rebuild binutils or egcs? Or it's another 
&gt; flaw when making GLIBC 2.0.97 ? (I guess not.. Things are properly done 
&gt; under the instructions of INSTALL file). Thanks for a resolution. :)

There are some incompatibilities between the different test releases
of glibc 2.1.  Your's might be one (I cannot say for sure, might also
be a linker problem).  But you only get guaranteed binary compatiblity
for programs linked against glibc 2.0.  Test releases are, ehm, test
releases.  Some things might have been wrong.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981012174324</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-12 17:43:24-0400</timestampReceived><subject>Re: [GLIBC 2.0.97] things to be recompiled?</subject><body>

&gt;&gt;&gt;&gt;&gt; Lin Zhe Min writes:

Lin&gt; Hi.
Lin&gt; I've installed GLIBC 2.0.97 on the base of GLIBC 2.0.95, binutils 
Lin&gt; 2.9.1.0.14. After binutils are installed, there are many c++ codes and 
Lin&gt; share libraries to be rebuilt, but g++ runs well. But when GLIBC 2.0.97 
Lin&gt; is installed, gcc runs well and binaries are okay, though, g++ denies to 
Lin&gt; compile a thing with following messages (more than one)

Lin&gt; /usr/lib/gcc-lib/i586-pc-linux-gnu/egcs-2.91.57/libstdc++.so: undefined 
Lin&gt; reference to `_IO_file_seekoff@@GLIBC_2.0'

Lin&gt; I noticed that old /lib/libc-2.0.95.so, only _IO_file_seekoff is defined 
Lin&gt; while in /lib/libc-2.0.97.so, _IO_file_seekoff@@GLIBC_2.1 and 
Lin&gt; _IO_file_seekoff@GLIBC_2.0 are both defined. So I guess linker just 
Lin&gt; cannot find proper symbol to be linked with... 

Lin&gt; I'd ask: is this okay? Should I rebuild binutils or egcs? Or it's another 
Lin&gt; flaw when making GLIBC 2.0.97 ? (I guess not.. Things are properly done 
Lin&gt; under the instructions of INSTALL file). Thanks for a resolution. :)

Just recompile libstdc++.  The interaction between libstdc++ and glibc 
is rather complicated and a recompilation of libstdc++ is necessary
(see the glibc FAQ) if you upgrade to/from glibc 2.0.x (x&lt;= 96).  I
hope that you don't need to recompile libstdc++ again.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981012222015</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-10-12 22:20:15-0400</timestampReceived><subject>Re: [GLIBC 2.0.97] things to be recompiled?</subject><body>

&gt; There are some incompatibilities between the different test releases
&gt; of glibc 2.1.  Your's might be one (I cannot say for sure, might also
&gt; be a linker problem).  But you only get guaranteed binary compatiblity
&gt; for programs linked against glibc 2.0.  Test releases are, ehm, test
&gt; releases.  Some things might have been wrong.

Recompiling egcs soluted this problem. (And libstdc++ become smaller! 
Thanks Ulrich!) However, I found that KDE programme cannot be compiled 
'cause its cores are all written in C++. Maybe this is rather a linker 
problem... I ain't sure.


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981006003847</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@uswest.net</senderEmail><timestampReceived>1998-10-06 00:38:47-0400</timestampReceived><subject>Re: Debugger?</subject><body>

On Tue, Oct 06, 1998 at 07:54:27AM +1000, Lei Miao pleaded:
% Hi,
% 
% I am just wondering if there exist debuggers that are more user-friendly
% than gdb. I am trying to debug a program and at present I am just using
% printf's to show program progress. It would be nicer if I could step through
% the code and inspect variable contents etc. I used to use Borland C compilers
% with the IDE. Is there something similar for Linux?

There's xgdb, an X front-end to gdb.  Gdb is very powerful, though, and
definitely worth the learning curve.

Kurt

</body></email><email><emailId>19981006004455</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-10-06 00:44:55-0400</timestampReceived><subject>Re: Debugger?</subject><body>

On Tue, 6 Oct 1998, Lei Miao wrote:
&gt; I am just wondering if there exist debuggers that are more user-friendly
&gt; than gdb. I am trying to debug a program and at present I am just using
&gt; printf's to show program progress. It would be nicer if I could step through
&gt; the code and inspect variable contents etc. I used to use Borland C compilers
&gt; with the IDE. Is there something similar for Linux?

There are a number of IDEs and debuggers availible, some of which are
front-ends to gdb, some of which are their own debuggers.  DDD is probably
the nicest graphical one (that graph view *rules*), although it's only a
debugger.  There are a few pretty cool IDEs (some cost money), including a
couple clones of the Borland DOS IDE, which may be what you're looking
for.

Do some searches on freshmeat.net (appindex) and www.linuxapps.com and see
what turns up.  There's also a nice list at:

http://www.xnet.com/~blatura/linapps.shtml


Honestly, though, I've tried most of these, and I always just end up going
back to vim + make + gdb.  It's clean, simple, fast, and almost ubiquious
on UNIX platforms (I move around between a lot of different machines and a
lot of different brands of UNIX).

Adam

</body></email><email><emailId>19981006124850</emailId><senderName>Michael Eyrich</senderName><senderEmail>michey@prz.tu-berlin.de</senderEmail><timestampReceived>1998-10-06 12:48:50-0400</timestampReceived><subject>Re: Debugger?</subject><body>


On Mon, 5 Oct 1998, Adam Wiggins wrote:


| Honestly, though, I've tried most of these, and I always just end up going
| back to vim + make + gdb.  It's clean, simple, fast, and almost ubiquious
| on UNIX platforms (I move around between a lot of different machines and a
| lot of different brands of UNIX).

Not to forget the emacs gdb-mode, showing the current source code line,
allowing to set breakpoints etc.
Of course, it is not as fast as vim, but a nice interface to gdb.


Michael


--
Michael Eyrich, PRZ, TU-Berlin
michey@prz.tu-berlin.de
 

</body></email><email><emailId>19981006131410</emailId><senderName></senderName><senderEmail>ggallup@aloha.unl.edu</senderEmail><timestampReceived>1998-10-06 13:14:10-0400</timestampReceived><subject>Re: Debugger?</subject><body>

On Tue, 6 Oct 1998, Lei Miao wrote:

&gt; Hi,
&gt; 
&gt; I am just wondering if there exist debuggers that are more user-friendly
&gt; than gdb. I am trying to debug a program and at present I am just using
&gt; printf's to show program progress. It would be nicer if I could step through
&gt; the code and inspect variable contents etc. I used to use Borland C compilers
&gt; with the IDE. Is there something similar for Linux?

I've not used it, but there is xxgdb, an X oriented interface for gdb.
Actually, with a little reading of the info pages, gdb is very easy to
use.  The hardest thing to find in there is the method for in cluding
arguments to a program you are trying to debug.  gdb is invoked

gdb &lt;executable_name&gt;

(then after gdb starts) 

run [&lt;arguments&gt;...]

Don't forget to use the -g option on gcc or g77 when compiling.

Good Luck,
 
Gordon A. Gallup                          Dept. of Physics and Astronomy
University of Nebraska-Lincoln            Lincoln, NE 68588-0111
Voice: (402)472-1230                      FAX: (402)472-2879
http://www.unl.edu/physics/

</body></email><email><emailId>19981006080941</emailId><senderName>Kurt Wall</senderName><senderEmail>kwall@uswest.net</senderEmail><timestampReceived>1998-10-06 08:09:41-0400</timestampReceived><subject>Re: memory problems &amp; tools?</subject><body>

On Tue, Oct 06, 1998 at 04:32:47PM +1000, Lei Miao pleaded:
% I want to know if there are any tools out there that can detect
% the misuse of memory in C programs. I am currently debugging
% an application that has lots of these holes in it. I am running
% into a strange problem. GDB shows that the application core dumped
% in 
% 		chunk_alloc(ar_ptr=0x8089d48, nb=16) at malloc.c:2607
% 
% called from malloc().

I believe a package named ElectricFence would do here.

Kurt

</body></email><email><emailId>19981006091736</emailId><senderName>Wolfram Gloger</senderName><senderEmail>wmglo@dent.med.uni-muenchen.de</senderEmail><timestampReceived>1998-10-06 09:17:36-0400</timestampReceived><subject>Re: memory problems &amp; tools?</subject><body>

&gt; On Tue, Oct 06, 1998 at 04:32:47PM +1000, Lei Miao pleaded:
&gt; % I want to know if there are any tools out there that can detect
&gt; % the misuse of memory in C programs. I am currently debugging
&gt; % an application that has lots of these holes in it. I am running
&gt; % into a strange problem. GDB shows that the application core dumped
&gt; % in 
&gt; % 		chunk_alloc(ar_ptr=0x8089d48, nb=16) at malloc.c:2607
&gt; % 
&gt; % called from malloc().
&gt; 
&gt; I believe a package named ElectricFence would do here.

Yes, ElectricFence is excellent -- unfortunately it adds a lot of
overhead.  For a quicker test which may help you detect the overrun as
well, you can try running your app with MALLOC_CHECK_=2 in the
environment.  You will then get a core dump immediately when a
corrupted chunk is detected.

Regards,
Wolfram.
-- 
`Surf the sea, not double-u three...'
wmglo@dent.med.uni-muenchen.de

</body></email><email><emailId>19981006150026</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-06 15:00:26-0400</timestampReceived><subject>Re: memory problems &amp; tools?</subject><body>

Wolfram Gloger &lt;wmglo@dent.med.uni-muenchen.de&gt; writes:

&gt; Yes, ElectricFence is excellent -- unfortunately it adds a lot of
&gt; overhead.  For a quicker test which may help you detect the overrun as
&gt; well, you can try running your app with MALLOC_CHECK_=2 in the
&gt; environment.  You will then get a core dump immediately when a
&gt; corrupted chunk is detected.

MALLOC_CHECK_=2 is half of the answer.  It does not detect leaks.
These canbe found using mcheck().

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981005222948</emailId><senderName>"Ronald F. Guilmette"</senderName><senderEmail>rfg@monkeys.com</senderEmail><timestampReceived>1998-10-05 22:29:48-0400</timestampReceived><subject>Re: A problem with /usr/include/linux/un.h</subject><body>


In message &lt;19981005220303.2315.qmail@md.dent.med.uni-muenchen.de&gt;, you wrote:

&gt;&gt; P.S.  The problem I am speaking of is a zero-length array declaration.  That
&gt;'s
&gt;&gt; not permitted by ANSI/ISO C, and indeed, gcc balks at compiling anything tha
&gt;t
&gt;&gt; includes this header file when -pedantic-errors is being used.  (I am in fac
&gt;t
&gt;&gt; trying to compile something which includes &lt;sys/un.h&gt; which in turn includes
&gt;&gt; &lt;linux/un.h&gt;.)
&gt;
&gt;Maybe you should upgrade to glibc-2, where sys/un.h appears to be a
&gt;stand-alone file.  However, I'm pretty sure you won't be able to
&gt;compile much with -pedantic-errors, as several include files use the
&gt;nice gcc features.

That's OK in the case of *expression related* gcc extensions so long as
all of that non-standard usage is preceded by __extension__ prefixes.

In the case of all other gnu language extensions however, none of those
should be used within system header files.  It just isn't kosher to do that,
and anyone who has done that should undo it asap.

P.S.  Using __asm__ is also OK within system headers files, so none of that
stuff is problematic.  It's just stuff like zero length arrays, variable
length arrays, and other declaration related stuff that creates problems
in system headers files... in particular whenever someone tries to compile
*their* application code with -pedantic or -pedantic-errors.

</body></email><email><emailId>19981006173133</emailId><senderName>Adam Wiggins</senderName><senderEmail>adam@angel.com</senderEmail><timestampReceived>1998-10-06 17:31:33-0400</timestampReceived><subject>Re: memory problems &amp; tools?</subject><body>

On Tue, 6 Oct 1998, Lei Miao wrote:
&gt; I want to know if there are any tools out there that can detect
&gt; the misuse of memory in C programs. I am currently debugging

A ton of 'em.  Check out:

http://www.cs.colorado.edu/homes/zorn/public_html/MallocDebug.html

</body></email><email><emailId>19981006200213</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-06 20:02:13-0400</timestampReceived><subject>glibc-2.0.97</subject><body>

Hi,

I've uploaded to

	ftp://alpha.gnu.org/gnu

sources and diffs (relative to 2.0.96) for glibc 2.0.97.  Not much
changed since 2.0.96, only a few dozend bug fixes and header file
improvements.  The biggest change is that db-1.85 is built and
installed.

Please test it and let me know either way.

Thanks,

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981006231540</emailId><senderName>Andreas Peukert</senderName><senderEmail>andreasp@sydney.sgi.com</senderEmail><timestampReceived>1998-10-06 23:15:40-0400</timestampReceived><subject>Re: c/c++ list</subject><body>

Iztok Polanic wrote:
&gt;
&gt; Hello !!!
&gt;
&gt; Can you please point me to a C/C++ mailing list. I was searching thru
&gt; AltaVista, I asked on redhat-list, but no luck.
&gt; Please help!!!!!
&gt;
&gt;

The list is "linux-c-programming".  Send an email to
Majordomo@vger.rutgers.edu with "subscribe linux-c-programming" as the
body (no quotes).

-- 
andreas peukert, silicon graphics.  email: andreas@sgi.com

</body></email><email><emailId>19981007155420</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-07 15:54:20-0400</timestampReceived><subject>Updated glibc 2.0.96-2.0.97 diff</subject><body>

Hi,

I've uploaded an updated diff from glibc 2.0.96 to 2.0.97.  The one I
made yesterday was incomplete since generate by cvs.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981008160610</emailId><senderName></senderName><senderEmail>ralf</senderEmail><timestampReceived>1998-10-08 16:06:10-0400</timestampReceived><subject>Re: Debugger?</subject><body>

On Mon, Oct 05, 1998 at 06:38:47PM -0600, Kurt Wall wrote:

&gt; % I am just wondering if there exist debuggers that are more user-friendly
&gt; % than gdb. I am trying to debug a program and at present I am just using
&gt; % printf's to show program progress. It would be nicer if I could step through
&gt; % the code and inspect variable contents etc. I used to use Borland C compilers
&gt; % with the IDE. Is there something similar for Linux?
&gt; 
&gt; There's xgdb, an X front-end to gdb.  Gdb is very powerful, though, and
&gt; definitely worth the learning curve.

Emacs' gud mode makes a nice GDB frontend.

  Ralf

</body></email><email><emailId>19981009160937</emailId><senderName>H ! J !  Lu</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>1998-10-09 16:09:37-0400</timestampReceived><subject>binutils 2.9.1.0.15 is released.</subject><body>

Hi,

This should be final release for binutils 2.9.1.0.x based on binutils
2.9.1. I am planning to release to public this weekend. Please test it
as much as you can.

Thanks.

-- 
H.J. Lu (hjl@gnu.org)
---
This is the beta release of binutils 2.9.1.0.15 for Linux, which is
based on binutils 2.9.1 plus Linux/ARM support, some x86 assembler
changes, some PPC bug fixes, some alpha bug fixes and an exception
frame optimization bug fix.

Due to the exception frame optimization bug fix, it is highly
recommended that you recompile all your C++ codes. Otherwise,
exception handling may not work right when an exception is thrown.

Since I no longer have machine running libc 5, starting from this
release, there will be no pre-compiled binaries for libc 5.

There was some problem on Linux/alpha. The binaries generated by the
new binituls may not run correctly on Linux/alpha. It turned out it was
a bug in the alpha dynamic linker in glibc 2.0.6. The current glibc 2.1
and glibc 2.0.7 should be ok.

This release should work on linux/x86/alpha. There are some ELF bug
fixes. But I don't know if it fixes all the bugs reported on
linux/sparc, Linux/MIPS and linux/PPC. I'd like to hear reports on them.
I'd like to release it to public soon. Please test it as much as you
can.

Please report any bugs related to binutils 2.9.1.0.15 to hjl@lucon.org.

Changes from binutils 2.9.1.0.14:

1. Update the program header handling bug fix from the binutils
   snapshot.
2. Added AMD 3DNow! support to disassembler.

Changes from binutils 2.9.1.0.13:

1. An ELF bug fix for program header handling.
2. Added AMD 3DNow! support.
3. Add some vxworks suppport.
4. Fix ld on none-linux platforms.

Changes from binutils 2.9.1.0.12:

1. An ELF/alpha bug fix for creating large shared libraries.
2. An ELF/PPC bug fix.

Changes from binutils 2.9.1.0.11:

1. Use the real fix from Ian for the exception frame optimization bug.

Changes from binutils 2.9.1.0.10:

1. Fix an exception frame optimization bug.

Changes from binutils 2.9.1.0.9:

1. Fix another -Bsymbolic bug for Linux/alpha.

Changes from binutils 2.9.1.0.7:

1. Fix -Bsymbolic for Linux/alpha.
2. Fix a 16bit x86 gas bug.

Changes from binutils 2.9.1.0.6:

1. Fix various ARM bugs.

Changes from binutils 2.9.1.0.5:

1. A MIPS assembler ".align" bug is fixed.
2. bfd.h, bfd.h and bfdlink.h are included in the binary package.

Changes from binutils 2.9.1.0.4:

1. 2 x86 16bit mode assembler bugs, "ret" and "movb $35,0x4(%di)", are
fixed.

IMPORTANT:
The .plt format that the Alpha was using was not thread safe.  So I 
changed it.  The new format is *not* binary compatible with the old,
thus you must use glibc 2.0.4 to get an ld.so that can understand it.

Note that the new ld.so knows how to deal with the old .plt format, so
old libraries will still work, but they should be relinked eventually
for performance reasons.

The file list:

1. binutils-2.9.1.0.15.tar.gz. Source code.
2. binutils-2.9.1.0.14-2.9.1.0.15.diff.gz. Patch against the previous
   beta source code.
3. binutils-2.9.1.0.15-glibc.x86.tar.gz. Precompiled Linux/x86 binaries
   for libc 6 (glibc 2.0.5c or above).
4. binutils-2.9.1.0.15-alpha.tar.gz. Precompiled Linux/alpha binaries
   for glibc 2.0.7 or above.

The primary ftp sites for the compiler/C library:

1. ftp://tsx-11.mit.edu/pub/linux/packages/GCC
2. ftp://sunsite.unc.edu/pub/Linux/GCC

The beta directory is in private/tofu under the GCC directory.
 
Most of my stuff can also be found at

   ftp://ftp.yggdrasil.com/private/hjl
   ftp://ftp.kernel.org/pub/linux/devel/gcc

To install the binary package, please follow the procedure very closely.
Please backup/save all the files you are instructed to delete and you
should do
 
	gzip -dc binutils-2.9.1.0.15-glibc.x86.tar.gz | tar tvvf -
or
	gzip -dc binutils-2.9.1.0.15-alpha.tar.gz | tar tvvf -
 
to see what is in there.
 
Please do back up before you remove things.

To install for libc 6 (glibc 2.0.5c or above), PLEASE DO
 
1. su root
2. cd /
3. rm -f /usr/bin/encaps /usr/bin/nm
4. gzip -dc binutils-2.9.1.0.15-glibc.x86.tar.gz | tar xvvf -
5. ldconfig
 
Now you have the new gas/binutils under /usr/bin and
/usr/ix86-linuxaout/bin. You have to use
 
/usr/ix86-linuxaout/bin/as
 
and
 
/usr/ix86-linuxaout/bin/ld -m i386linux
 
if you want to use a.out as and ld directly.
 
To install for alpha, PLEASE DO
 
1. su root
2. cd /
3. gzip -dc binutils-2.9.1.0.15-alpha.tar.gz | tar xvvf -
4. ldconfig
 
I have changed the target names for Linux/x86 and Linux/x86 (a.out)
to ix86-linux and ix86-linuxaout respectively. The precompiled
binaries are installed under /usr/ix86-linux and /usr/ix86-linuxaout.
You should make appropriate symbolic links if you have a different
name for the Linux/x86 target, like i586-unknown-linux.

The target name for Linux/alpha is alpha-linux. The precompiled alpha
binaries are installed under /usr/alpha-linux. You should make
appropriate symbolic links if you have a different name for the
Linux/alpha target, like alpha-redhat-linux.

If you have an old linux library in the a.out format and you cannot
obtain the newer version in the ELF format for whatever reason, you
can try "objcopy --remove-leading-char" on the a.out library and see
if it can link with your code in ELF.

Thanks.


H.J. Lu
hjl@lucon.org
10/09/98

</body></email><email><emailId>19981012082648</emailId><senderName>"Dr. Michael Weller"</senderName><senderEmail>eowmob@exp-math.uni-essen.de</senderEmail><timestampReceived>1998-10-12 08:26:48-0400</timestampReceived><subject>Re: luv it. libm.so.5.0.9 gcc 2.8.*</subject><body>

On Sun, 11 Oct 1998, Peter T. Breuer wrote:

&gt; Just had to post this while it's on my screen. I'll check what's messed
&gt; up vis a vis libraries or brain and so on in a mo'
&gt; 
&gt;       26              if (n &lt;= 0) 
&gt;       (gdb) n
&gt;       28              dbln= n;
&gt;       (gdb) n
&gt;       29              msd = (long)log10(dbln); /* truncate */
&gt;       (gdb) disp dbln
&gt;       6: dbln = 2
&gt;       (gdb) displ msd
&gt;       7: msd = 0
&gt;       (gdb) n
&gt;       30              if (msd &lt;= 0)
&gt;       7: msd = 288                      &lt;---!!!!!!!!!!!!!!!!!!
&gt;       6: dbln = 2
&gt; 
&gt; And it used to work just fine the last time I tried this kind of thing ..

And you are sure that dbln is really a double as the name suggests. And
you have log10 declared returning double (by #including math.h ??). If
log10 is properly declared with ANSI prototype, log10(n) should work
itself (gcc knows then it has to convert n to double first).

At a first glance, I'd assume you forgot to #include &lt;math.h&gt; which
results in the double return value of log10 being interpreted as int. 

Michael.

--

Michael Weller: eowmob@exp-math.uni-essen.de, eowmob@ms.exp-math.uni-essen.de,
or even mat42b@spi.power.uni-essen.de. If you encounter an eowmob account on
any machine in the net, it's very likely it's me.

</body></email><email><emailId>19981013081058</emailId><senderName>"Ruslan V. Brushkoff"</senderName><senderEmail>rus@snif.te.net.ua</senderEmail><timestampReceived>1998-10-13 08:10:58-0400</timestampReceived><subject>Re: [GLIBC 2.0.97] things to be recompiled?</subject><body>

On Mon, 12 Oct 1998, Lin Zhe Min wrote:

&gt; Hi.

Hi.

[...]

&gt; /usr/lib/gcc-lib/i586-pc-linux-gnu/egcs-2.91.57/libstdc++.so: undefined 
&gt; reference to `_IO_file_seekoff@@GLIBC_2.0'
&gt;

 Yea, I've noticed this too - after recompiling libstdc++ all theze gone 
away.
 
		Rus

</body></email><email><emailId>19981014222557</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-14 22:25:57-0400</timestampReceived><subject>glibc 2.0.98</subject><body>

I've uploaded to

	ftp://alpha.gnu.org/gnu

the next test release for glibc.2.1, named 2.0.98.  Diffs are
available as well.

We've fixed several smaller problems and cleaned up headers and
makefiles a bit.

Give it a try and please analyse compatibility problems with programs
compiled with and for glibc-2.0.  Without analysis we can never be
sure nothing breaks.

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981017083952</emailId><senderName>Lin Zhe Min</senderName><senderEmail>ljm@marx.ljm.wownet.net</senderEmail><timestampReceived>1998-10-17 08:39:52-0400</timestampReceived><subject>Re: [GLIBC 2.0.97/98] make check</subject><body>

On 16 Oct 1998, Ulrich Drepper wrote:

&gt; &gt; /src/glibc-2.0.97/stdlib/isomac.c:76: string.h: Aucun fichier ou 
&gt; &gt; répertoire de ce type.
&gt; Are these all messages?  I probably know what's the problem.

All messages about isomac.c. 

&gt; &gt; BTW, 2.0.98 cannot check my host system type, but 2.0.97 can. That's a 
&gt; &gt; i586-pc-linux-gnu (in some canonical way..:Q)
&gt; You have to investigate this yourself.  The config.guess file hasn't changed.

Okay. I'll try to. However other software which uses autoconf still work 
properly. I'll give you a report then.

&gt; I've changed the text a bit to avoid this problem.

Thanks.


.e'osai ko sarji la lojban.	==&gt; ½Ð¤ä«ùÅÞ¿è»y¨¥¡C
co'o mi'e lindjy,min.		==&gt; ¦A¨£¡A§Ú¬OªL­õ¥Á¡C
Fingerprint20 = CE32 D237 02C0 FE31 FEA9  B858 DE8F AE2D D810 F2D9

</body></email><email><emailId>19981023113404</emailId><senderName>"Andris Pavenis"</senderName><senderEmail>pavenis@lanet.lv</senderEmail><timestampReceived>1998-10-23 11:34:04-0400</timestampReceived><subject>Re: Problems building dinamically linked executables</subject><body>

Hi!

&gt; &gt; 
&gt; &gt; Looks that problems appears if command for building shared library
&gt; &gt; contains '-lsomething' .
&gt; &gt; 
&gt; &gt; Andris
&gt; &gt; 
&gt; Yep.  I made some simple-minded models, but I couldn't get the same sort
&gt; of results.  For a shared library that refers to things in libc and libm,
&gt; if it is not linked with -lm,  to link an executable falls down with
&gt; undefined references to math functions.  But I couldn't get it to fail if
&gt; I used -lm.  
&gt; Script started on Thu Oct 22 17:11:00 1998
&gt; witsend:~$ ldd /lib/libm.so. 
&gt; 	libc.so.6 =&gt; /usr/lib/libc.so.6 (0x4001c000)
&gt; 	/usr/local/lib/ld-linux.so.2 =&gt; /lib/ld-linux.so.2 (0x00000000)
&gt; witsend:~$ ldd /lib/libm.so.5
&gt; 	statically linked
&gt; witsend:~$ exit
&gt; exit
&gt; 
&gt; Script done on Thu Oct 22 17:11:49 1998
&gt; I am using glibc as my main library, but I have libc5 for stuff I haven't
&gt; got round to rebuilding.  My libm.so.5 is probably slackware 3.4, as is
&gt; most of the rest of my system; if yours is similar, perhaps that gives us
&gt; a clue.  If you're determined to stick with libc5, perhaaps you want to
&gt; look into relinking libm with a -lc built in.?
&gt; 

Thanks for hints. I rebuilt libc-5.4.46 (modified elf/Makefile before) and 
this fixes the problem. 

About glibc2:  Slackware 3.5 I'm using is still based on libc-5, so I 	
                     didn't want to build glibc2 yet. Maybe sometimes later

I'm including patch for libc-5.4.46 as I think I'm not only one who can meat this
problem:

-------------------------------------------------------------------------------------------------
--- libc/elf/Makefile~	Mon Jun  8 05:25:55 1998
+++ libc/elf/Makefile	Fri Oct 23 12:32:30 1998
@@ -40,7 +40,10 @@
 		libc) echo $(ELF_SHARED_DIR)/libc$(NYS_DIR_SUFFIX).a $(LIBGCC);;  \
 		libcurses) echo $(ELF_SHARED_DIR)/$$l*.a $(ELF_SHARED_DIR)/libtermcap.so;; \
 		*) echo $(ELF_SHARED_DIR)/$$l.a;; \
-		esac` -Wl,-no-whole-archive; \
+		esac` -Wl,-no-whole-archive \
+		`case $$l in \
+		libm) echo -lc;; \
+		esac`; \
 	  (cd $(ELF_SHARED_DIR); \
 		rm -f $$l.so; \
 		ln -s $$l.so.$$SHLIB_VERSION $$l.so); \
-------------------------------------------------------------------------------------------------

Andris

</body></email><email><emailId>19981023124041</emailId><senderName>Martin von Loewis</senderName><senderEmail>martin@mira.isdn.cs.tu-berlin.de</senderEmail><timestampReceived>1998-10-23 12:40:41-0400</timestampReceived><subject>Re: floats</subject><body>

&gt; So what I want to know is, what is that other behavior?  Apparently it's no
&gt; different, so the switch and all of the accompanying text, above, is
&gt; completely lacking in any function whatsoever.

Please read the documentation again. It says that -ftraditional turns
all *float* operations to double, and that -fallow-single-precision
disables this, ie. leaves float operations as float operations.

Now, as we found,

    float f;
    f = f + 0.1;

is a double operation, as the second argument is double, so the flags
have no effect on this could.

To give you an example of code that *is* affected, consider

   float f=0.1;
   for(i=0;i&lt;1000;i++)
	f = f + f;

Without options, these are float additions. With -ftradtional, these
are double additions. With -ftraditional -fallow-single-precision,
these are float additions, again.

Hope this helps,
Martin

</body></email><email><emailId>19981023232335</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-23 23:23:35-0400</timestampReceived><subject>glibc-2.0.99</subject><body>

Hi,

I've uploaded the sources for glibc-2.0.99 to

	ftp://alpha.gnu.org/gnu/glibc-2.0.99.tar.gz

No diffs this time, I have no diskspace to generate them.  If anybody
wants to make one, drop me a note.

There are also no new linuxthreads and crypt addons, nothing changed.


Changes in the libc include lots of bug fixes (including the one
people found when running the gcc testsuite), several optimizations,
and a complete rewrite of the nscd (which is now much faster).

As usual, please report success and failure.

Thanks,

-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981024025734</emailId><senderName>Ulrich Drepper</senderName><senderEmail>drepper@cygnus.com</senderEmail><timestampReceived>1998-10-24 02:57:34-0400</timestampReceived><subject>glibc-2.0.99 diff</subject><body>

Hi,

Thanks to Tom Rini and Matt McLean there is now also the diff for
glibc 2.0.99 available at

	ftp://alpha.gnu.org/gnu/glibc-2.0.98-2.0.99.diff.gz


-- 
---------------.      drepper at gnu.org  ,-.   1325 Chesapeake Terrace
Ulrich Drepper  \    ,-------------------'   \  Sunnyvale, CA 94089 USA
Cygnus Solutions `--' drepper at cygnus.com   `------------------------

</body></email><email><emailId>19981025201431</emailId><senderName>Peter Schuller</senderName><senderEmail>scode_ufp@usa.net</senderEmail><timestampReceived>1998-10-25 20:14:31-0400</timestampReceived><subject>Newer g++ and exceptions</subject><body>

Hi!

I  recently switched to Debian 2.0, and along with it, egcs-2.90.29 980515
(egcs-1.0.3 release).

It complains about -fhandle-exceptions, and says it's been replaced by
-fexceptions. However, excepions are not working.

For example, after I had done my own implementation of out_of_range (since the
linked complained about it not existing - but it's present in stdexcept.h), I
got the following message about a throw statement:

My command:

g++ -Wall -fhandle-exceptions -o testvect main.o psvector.o

Error output:

main.o: In function `global constructors keyed to main':
main.o(.text+0x3c9): undefined reference to `__register_exceptions'
main.o: In function `__throw':
main.o(.text+0x437): undefined reference to `__find_first_exception_table_match'
main.o(.text+0x469): undefined reference to `__unwind_function'
collect2: ld returned 1 exit status        

Any idea what's wrong? If I'm not misstaken, egcs should support exceptions.

/ Peter Schuller
----------------
E-Mail: scode_ufp@usa.net
Web: http://hem.passagen.se/petersch

</body></email><email><emailId>19981027205606</emailId><senderName>Mark Shadley</senderName><senderEmail>mark@shad.net</senderEmail><timestampReceived>1998-10-27 20:56:06-0400</timestampReceived><subject>Re: ld and dynamic libs - ld doesn't find them</subject><body>

I'm using this sh script to create *.so symlinks if they don't exist.
So far it hasn't broken anything here.  Feel free to use it, throw it
away, or tell me what it might break.


for arg in `find . -regex ".*\.so\..*" -type f | sed 's/^.\///'`
do
  soname=`objdump --all-headers $arg | awk '/SONAME/ {print $2}'`
  so=`echo "$soname" | awk -F. '{print $1"."$2}'`

  if [ ! -e $so ]; then
    if [ -e $soname ]; then
      ln -vs $soname $so
    fi
  fi
done


Mark

</body></email><email><emailId>19981028061535</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-28 06:15:35-0400</timestampReceived><subject>Re: Error compiling glibc-2.0.99</subject><body>

&gt; &gt; &gt; &gt; &gt; Peter Dyer writes:

 &gt; I compiled glibc-2.0.98 OK but when compiling 2.0.99 with kernel 1.2.126, \
glibc-2.0.98 and binutils-2.9.1.0.15 I get the following:-

 &gt; make[2]: Entering directory `/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'
 &gt; /usr/src/redhat/BUILD/glibc-2.0.99/objc/elf/ld-linux.so.2 --library-path \
/usr/src/redhat/BUILD/glibc-2.0.99/objc:/usr/src/redhat/BUILD/glibc-2.0.99/objc/math:/ \
usr/src/redhat/BUILD/glibc-2.0.99/objc/elf:/usr/src/redhat/BUILD/glibc-2.0.99/objc/nss \
:/usr/src/redhat/BUILD/glibc-2.0.99/objc/nis:/usr/src/redhat/BUILD/glibc-2.0.99/objc/d \
b2:/usr/src/redhat/BUILD/glibc-2.0.99/objc/rt:/usr/src/redhat/BUILD/glibc-2.0.99/objc/resolv:/usr/src/redhat/BUILD/glibc-2.0.99/objc/linuxthreads \
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/rpcgen -c rpcsvc/bootparam.x -o \
/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.T  &gt; make[2]: *** \
[/usr/src/redhat/BUILD/glibc-2.0.99/objc/sunrpc/xbootparam.stmp] Segmentation fault \
(core dumped)  &gt; make[2]: Leaving directory \
`/usr/src/redhat/BUILD/glibc-2.0.99/sunrpc'

 &gt; Any ideas??
That's a bug in Linux 2.1.126.  Search for Ralph Baechle's email with
a subject similar to "ldd and ld-linux.so" on linux-kernel and apply
that patch to your kernel.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de


</body></email><email><emailId>19981029132040</emailId><senderName>"Michael Tamm"</senderName><senderEmail>tamm@rz.fhtw-berlin.de</senderEmail><timestampReceived>1998-10-29 13:20:40-0400</timestampReceived><subject>Re: Passing arguments to functions</subject><body>

References were introduced to C++ to get rid of using pointers for passing
params via reference. The normal way for this in C was:

foo(const param_type* param_name);

But in the function foo you always had to write *param_name, and if you call
foo, you had to use the &amp;-operator for the param. If you use a reference
variable, your code becomes more readable (in my opinion). In the end, it is
the same mechanism, BUT:

&gt;   void changetemp( float&amp; );
&gt;
&gt;   int main()
&gt;    {
&gt;      float temp = 25;
&gt;
&gt;      cout &lt;&lt; "temp is: " &lt;&lt; temp &lt;&lt; " deg F \n";
&gt;      changetemp(temp);
&gt;      cout &lt;&lt; "temp is now: " &lt;&lt; temp &lt;&lt; "deg F \n");
&gt;
&gt;     exit(0);
&gt;    }
&gt;
&gt;    void changetemp( float&amp; tmp )
&gt;     {
&gt;       tmp += 5;
&gt;      }


Generally speaking, it is a bad way to use a reference like this (because
you dont really want side effects on the params you pass to a function). The
most often used way, reference variables are used, is:

foo(const param_type&amp; param_name);

With const you ensure that there are no side effects. And if param_type is a
complex struct, you also avoid copying the entire struct to a local stack
object, what could be a time consuming operation. In C++ passing params by
value could be even worse, because the copying is done via the copy
constructor. That could lead to several calls to copy constructor of members
in this class.

What is more, sometimes you have classes with ownerships (like streams). If
you pass such an object via value, the newly created local object in the
function will get the ownership over the stream via the copy constructor. If
you leave the function, the local object is destroyed and therefore its
destructor will be called. This leads to closing the stream. Therefore we
have a side effect, despite of passing the object via value! (This is also a
hard to find error, because your program will only fail, if you try another
operation on the stream, after calling the function, which functioned in a
proper way.)


Michael Tamm
tamm@rz.fhtw-berlin.de

TODO: insert intelligent saying here

</body></email><email><emailId>19981029220800</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@arthur.rhein-neckar.de</senderEmail><timestampReceived>1998-10-29 22:08:00-0400</timestampReceived><subject>Re: can't compile glibc-2.0.99</subject><body>

&gt;&gt;&gt;&gt;&gt; Thanate Dhirasakdanon writes:

 &gt; Hi,
 &gt; 	When I try compiling glibc-2.0.99 I got the
 &gt; 	following compilation error in 
 &gt; 	sysdeps/unix/sysv/linux/i386/sigaction.c:


 &gt; 	I'm using kernel-2.0.34, glibc-2.0.7, egcs-1.1.
 &gt; 	Does anyone have any suggestion?

Using kernel 2.0.34 is the problem.  Get headers from 2.1.100+ and
read the glibc FAQ.  But I think that Ulrich has corrected this
already this so that the next test release of glibc will fix this.

Andreas
-- 
 Andreas Jaeger   aj@arthur.rhein-neckar.de    jaeger@informatik.uni-kl.de
  for pgp-key finger ajaeger@aixd1.rhrk.uni-kl.de

</body></email><email><emailId>19981031074030</emailId><senderName>Eric W !  Biederman</senderName><senderEmail>ebiederm+eric@ccr.net</senderEmail><timestampReceived>1998-10-31 07:40:30-0400</timestampReceived><subject>Re: Difference between archives and shared libraries.</subject><body>

&gt;&gt;&gt;&gt;&gt; "XF" == His Holiness the Reverend Doktor Xenophon Fenderson, the Carbon(d)ated &lt;xenophon@irtnog.org&gt; writes:

XF&gt; You cannot dynamically link to a archived library because the library
XF&gt; executable code lacks the necessary code to make variable and function
XF&gt; memory addresses "position independent".

Close.  Static archives lack the relocation information for variable
and function memory addresses.

The position independence is an additional optimization that can be left
out (which you might want to do for very register heavy code on x86's) that
enables you not need additional memory to store your code when you run multiple
programs pull in your program.

Just to keep the record straight.

Eric

</body></email><email><emailId>19981031115145</emailId><senderName>Matti Aarnio</senderName><senderEmail>matti.aarnio@sonera.fi</senderEmail><timestampReceived>1998-10-31 11:51:45-0400</timestampReceived><subject>Re: Is it good idea to strip archive (.a) files?</subject><body>

"His Holiness the Reverend Doktor Xenophon Fenderson, the Carbon(d)ated"
 &lt;xenophon@irtnog.org&gt; replied thusly about the use of 'strip':
.... 
&gt; Yup.  You won't be able to link to that archive file any longer.  I
&gt; recently posted an article describing libkibo.a, a library with only
&gt; one function, "beable()".  After stripping libkibo, I tried to rebuild
&gt; my test program:
.... 
&gt; Stripping an object file removes the symbol table from the file.
&gt; Without the symbol table, the linker will not be able to resolve
&gt; references to symbols that exist within the object file.

	I suggest you study the effects of various options to strip:
		--strip-debug
		--strip-unneeded
	The default behaviour seems to be:
		--strip-all

	See 'strip --help', and 'man strip'.

&gt; (For others' benefit: One usually strips a production executable of
&gt; symbol information to streamline the file.  For a production
&gt; (not debug) executable, symbol information is unnecessary.)
&gt; -- 
&gt; Rev. Dr. Xenophon Fenderson, the Carbon(d)ated, KSC, DEATH, SubGenius, mhm21x16

/Matti Aarnio &lt;matti.aarnio@sonera.fi&gt;

</body></email><email><emailId>19981031214211</emailId><senderName>Aaron M !  Ucko</senderName><senderEmail>amu@mit.edu</senderEmail><timestampReceived>1998-10-31 21:42:11-0400</timestampReceived><subject>Re: a way to ignore previous declaration?</subject><body>

Danny Lu &lt;ming78@yahoo.com&gt; writes:

&gt; say.. in stdio.h there's a "int dprintf(int,char *,...)" delcaration..
&gt; and in proto.h it has 
&gt; "int dprintf(char *,...)"....  is there a way
&gt; that you can ignore the ones that is declared in
&gt; stdio.h.. 

You can't really do that without stupid preprocessor tricks like
having proto.h

	#define dprintf my_dprintf

before declaring dprintf (in which case you should be sure you include
stdio.h first...)

HTH.

-- 
Aaron M. Ucko, KB1CJC &lt;amu@mit.edu&gt; (finger amu@monk.mit.edu)

</body></email></emails>