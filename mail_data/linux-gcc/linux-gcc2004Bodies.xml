<?xml version="1.0" encoding="utf-8"?>
<emails><email><emailId>20041112225108</emailId><senderName>David Wuertele</senderName><senderEmail>dave-gnus@bfnet.com</senderEmail><timestampReceived>2004-11-12 22:51:08-0400</timestampReceived><subject>gcc cross mips output sizes too big</subject><body>

I've been using crosstool-generated gcc-3.3.3 to build my mipsel
targets, and I find that the file sizes are humungous.  After
stripping the objects, I get file sizes that are up to TWICE as large
as similarly generated gcc-2.96 code.  Do these sizes not look out of
line?

   bytes          gcc-3.3.3 generated files
  -------       --------------------------------
  1884160	/lib/libc-2.3.2.so
  1257472	/lib/libstdc++.so.5.0.5
  1048576	/usr/local/lib/libfreetype.so.1314.0.0.10
  1036288	/bin/busybox
  1011712	/bin/bash

   bytes          gcc-2.96 generated files
  -------       --------------------------------
  1531904	/lib/libc-2.2.4.so
  532480	/lib/libstdc++-3-libc6.2-2-2.10.0.so
  495616	/usr/local/lib/libfreetype.so.1314.0.0.10
  462848	/bin/busybox
  847872	/bin/bash

Compiling with -Os helps, but doesn't get close to the file sizes I
saw with my older cross-compiler.  It seems strange to me that moving
to a newer compiler will reduce the number of programs I can ship in
my little NAND flash.

Is there some way to generate a more efficient cross-compiler?

Thanks,
Dave

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220213548</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 21:35:48-0400</timestampReceived><subject>[PATCH] GCC 3.4.3: libobjc build failure</subject><body>

This patch is for exactly the same issue as described in

http://gcc.gnu.org/ml/gcc/2002-12/msg00033.html

The fix is exactly the same, just another file is the target.  Without
it libobjc fails to build when --with-objc-gc is given to configure.

Please, apply it.


2004-12-21  Denis Zaitsev  &lt;zzz@anda.ru&gt;

	* libobjc/gc.c: Include coretypes.h and tm.h.


--- libobjc/gc.c.orig	2003-05-24 02:04:58.000000000 +0600
+++ libobjc/gc.c	2004-12-21 01:27:00.000000000 +0500
@@ -26,6 +26,8 @@ Boston, MA 02111-1307, USA.  */
    the executable file might be covered by the GNU General Public License.  */
 
 #include "tconfig.h"
+#include "coretypes.h"
+#include "tm.h"
 #include "objc.h"
 #include "encoding.h"
 
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220213836</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 21:38:36-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>


On Dec 20, 2004, at 4:35 PM, Denis Zaitsev wrote:

&gt; This patch is for exactly the same issue as described in
&gt;
&gt; http://gcc.gnu.org/ml/gcc/2002-12/msg00033.html
&gt;
&gt; The fix is exactly the same, just another file is the target.  Without
&gt; it libobjc fails to build when --with-objc-gc is given to configure.

This patch is incorrect as noted before.  I am going to reject it
as it was rejected before.  Again libobjc has no reason to include
these headers.

Thanks,
Andrew Pinski
libobjc maintainer

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220214811</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 21:48:11-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Mon, Dec 20, 2004 at 04:38:36PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 20, 2004, at 4:35 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; This patch is for exactly the same issue as described in
&gt; &gt;
&gt; &gt; http://gcc.gnu.org/ml/gcc/2002-12/msg00033.html
&gt; &gt;
&gt; &gt; The fix is exactly the same, just another file is the target.  Without
&gt; &gt; it libobjc fails to build when --with-objc-gc is given to configure.
&gt; 
&gt; This patch is incorrect as noted before.  I am going to reject it
&gt; as it was rejected before.  Again libobjc has no reason to include
&gt; these headers.

a) The patches from the reference I've noted are already applied.

b) libobjc is not compiled without the new patch.  How should it be
   fixed then?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220215019</emailId><senderName>Zack Weinberg</senderName><senderEmail>zack@codesourcery.com</senderEmail><timestampReceived>2004-12-20 21:50:19-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

At Mon, 20 Dec 2004 16:38:36 -0500,
Andrew Pinski wrote:
&gt; 
&gt; 
&gt; On Dec 20, 2004, at 4:35 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; This patch is for exactly the same issue as described in
&gt; &gt;
&gt; &gt; http://gcc.gnu.org/ml/gcc/2002-12/msg00033.html
&gt; &gt;
&gt; &gt; The fix is exactly the same, just another file is the target.  Without
&gt; &gt; it libobjc fails to build when --with-objc-gc is given to configure.
&gt; 
&gt; This patch is incorrect as noted before.  I am going to reject it
&gt; as it was rejected before.  Again libobjc has no reason to include
&gt; these headers.

The patch is the Wrong Thing in a formal sense.  However, it may be
the correct thing to do in the short term.  libobjc files have been
including coretypes.h and tm.h for a very long time; adding a few more
is not the end of the world, especially not on an old release branch!

zw
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220215352</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 21:53:52-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Dec 20, 2004, at 4:48 PM, Denis Zaitsev wrote:

&gt; On Mon, Dec 20, 2004 at 04:38:36PM -0500, Andrew Pinski wrote:
&gt;&gt;
&gt;&gt; On Dec 20, 2004, at 4:35 PM, Denis Zaitsev wrote:
&gt;&gt;
&gt;&gt;&gt; This patch is for exactly the same issue as described in
&gt;&gt;&gt;
&gt;&gt;&gt; http://gcc.gnu.org/ml/gcc/2002-12/msg00033.html
&gt;&gt;&gt;
&gt;&gt;&gt; The fix is exactly the same, just another file is the target.  
&gt;&gt;&gt; Without
&gt;&gt;&gt; it libobjc fails to build when --with-objc-gc is given to configure.
&gt;&gt;
&gt;&gt; This patch is incorrect as noted before.  I am going to reject it
&gt;&gt; as it was rejected before.  Again libobjc has no reason to include
&gt;&gt; these headers.
&gt;
&gt; a) The patches from the reference I've noted are already applied.
Yes and the patch was submitted before, see
&lt;http://gcc.gnu.org/bugzilla/show_bug.cgi?id=12035&gt;.


&gt; b) libobjc is not compiled without the new patch.  How should it be
&gt;    fixed then?

The uses of the macros are not needed as shown by a "grep -r ."

Does this patch fix the problem for you?

Thanks,
Andrew Pinski


["temp1.diff.txt" (temp1.diff.txt)]

Index: gc.c
===================================================================
RCS file: /cvs/gcc/gcc/libobjc/gc.c,v
retrieving revision 1.6
diff -u -p -r1.6 gc.c
--- gc.c	23 May 2003 20:04:58 -0000	1.6
+++ gc.c	20 Dec 2004 21:51:20 -0000
@@ -40,18 +40,6 @@ Boston, MA 02111-1307, USA.  */
 typedef GC_word word;
 typedef GC_signed_word signed_word;
 
-#if BITS_PER_WORD == 32
-# define LOGWL	5
-# define modWORDSZ(n) ((n) &amp; 0x1f)        /* n mod size of word	    */
-#endif
-
-#if BITS_PER_WORD == 64
-# define LOGWL 6
-# define modWORDSZ(n) ((n) &amp; 0x3f)        /* n mod size of word	    */
-#endif
-
-#define divWORDSZ(n) ((n) &gt;&gt; LOGWL)	   /* divide n by size of word      */
-
 #include &lt;gc_typed.h&gt;
 
 /* The following functions set up in `mask` the corresponding pointers.

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20041220220345</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 22:03:45-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Dec 20, 2004, at 4:53 PM, Andrew Pinski wrote:
&gt;
&gt;&gt; b) libobjc is not compiled without the new patch.  How should it be
&gt;&gt;    fixed then?
&gt;
&gt; The uses of the macros are not needed as shown by a "grep -r ."
&gt;
&gt; Does this patch fix the problem for you?

Actually that patch will not work, sorry about that.

This one is better and should work.


If it does not report the errors please as it will help to fix the
problem.

Thanks,
Andrew Pinski


["temp1.diff.txt" (temp1.diff.txt)]

Index: gc.c
===================================================================
RCS file: /cvs/gcc/gcc/libobjc/gc.c,v
retrieving revision 1.6
diff -u -p -r1.6 gc.c
--- gc.c	23 May 2003 20:04:58 -0000	1.6
+++ gc.c	20 Dec 2004 22:01:27 -0000
@@ -35,22 +35,12 @@ Boston, MA 02111-1307, USA.  */
 #if OBJC_WITH_GC
 
 #include &lt;gc.h&gt;
+#include &lt;limits.h&gt;
 
 /* gc_typed.h uses the following but doesn't declare them */
 typedef GC_word word;
 typedef GC_signed_word signed_word;
-
-#if BITS_PER_WORD == 32
-# define LOGWL	5
-# define modWORDSZ(n) ((n) &amp; 0x1f)        /* n mod size of word	    */
-#endif
-
-#if BITS_PER_WORD == 64
-# define LOGWL 6
-# define modWORDSZ(n) ((n) &amp; 0x3f)        /* n mod size of word	    */
-#endif
-
-#define divWORDSZ(n) ((n) &gt;&gt; LOGWL)	   /* divide n by size of word      */
+#define BITS_PER_WORD (CHAR_BIT * sizeof (word))
 
 #include &lt;gc_typed.h&gt;
 

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20041220220755</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 22:07:55-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Mon, Dec 20, 2004 at 04:53:52PM -0500, Andrew Pinski wrote:

&gt; The uses of the macros are not needed as shown by a "grep -r ."
&gt; 
&gt; Does this patch fix the problem for you?
&gt; 
&gt; Thanks,
&gt; Andrew Pinski
&gt; 

&gt; Index: gc.c
&gt; ===================================================================
&gt; RCS file: /cvs/gcc/gcc/libobjc/gc.c,v
&gt; retrieving revision 1.6
&gt; diff -u -p -r1.6 gc.c
&gt; --- gc.c	23 May 2003 20:04:58 -0000	1.6
&gt; +++ gc.c	20 Dec 2004 21:51:20 -0000
&gt; @@ -40,18 +40,6 @@ Boston, MA 02111-1307, USA.  */
&gt;  typedef GC_word word;
&gt;  typedef GC_signed_word signed_word;
&gt;  
&gt; -#if BITS_PER_WORD == 32
&gt; -# define LOGWL	5
&gt; -# define modWORDSZ(n) ((n) &amp; 0x1f)        /* n mod size of word	    */
&gt; -#endif
&gt; -
&gt; -#if BITS_PER_WORD == 64
&gt; -# define LOGWL 6
&gt; -# define modWORDSZ(n) ((n) &amp; 0x3f)        /* n mod size of word	    */
&gt; -#endif
&gt; -
&gt; -#define divWORDSZ(n) ((n) &gt;&gt; LOGWL)	   /* divide n by size of word      */
&gt; -
&gt;  #include &lt;gc_typed.h&gt;
&gt;  
&gt;  /* The following functions set up in `mask` the corresponding pointers.

The problem is not really here, but there:

line 316 of gc.c:

  size = ROUND (bits_no, BITS_PER_WORD) / BITS_PER_WORD;

So...  Why doesn't your grep show this?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220222621</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 22:26:21-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Mon, Dec 20, 2004 at 05:03:45PM -0500, Andrew Pinski wrote:
&gt;
&gt; This one is better and should work.
&gt;
&gt;
&gt; If it does not report the errors please as it will help to fix the
&gt; problem.

Yes, this patch seems to work, thanks.  But the compiler still
complains about undeclared atoi.  Maybe it worth something to include
&lt;stdlib.h&gt; somewhere?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220223239</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 22:32:39-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Dec 20, 2004, at 5:26 PM, Denis Zaitsev wrote:

&gt; On Mon, Dec 20, 2004 at 05:03:45PM -0500, Andrew Pinski wrote:
&gt;&gt;
&gt;&gt; This one is better and should work.
&gt;&gt;
&gt;&gt;
&gt;&gt; If it does not report the errors please as it will help to fix the
&gt;&gt; problem.
&gt;
&gt; Yes, this patch seems to work, thanks.  But the compiler still
&gt; complains about undeclared atoi.  Maybe it worth something to include
&gt; &lt;stdlib.h&gt; somewhere?

Yes, this is what I applied to both the mainline and the 3.4 branch.

Thanks,
Andrew Pinski

ChangeLog:

	* gc.c: Remove definition of LOGWL, modWORDSZ, and divWORDSZ since
	they are not used.  Include limits.h and stdlib.h.


["temp1.diff.txt" (temp1.diff.txt)]

Index: gc.c
===================================================================
RCS file: /cvs/gcc/gcc/libobjc/gc.c,v
retrieving revision 1.6
diff -u -p -r1.6 gc.c
--- gc.c	23 May 2003 20:04:58 -0000	1.6
+++ gc.c	20 Dec 2004 22:29:44 -0000
@@ -31,26 +31,17 @@ Boston, MA 02111-1307, USA.  */
 
 #include &lt;assert.h&gt;
 #include &lt;string.h&gt;
+#include &lt;stdlib.h&gt;
 
 #if OBJC_WITH_GC
 
 #include &lt;gc.h&gt;
+#include &lt;limits.h&gt;
 
 /* gc_typed.h uses the following but doesn't declare them */
 typedef GC_word word;
 typedef GC_signed_word signed_word;
-
-#if BITS_PER_WORD == 32
-# define LOGWL	5
-# define modWORDSZ(n) ((n) &amp; 0x1f)        /* n mod size of word	    */
-#endif
-
-#if BITS_PER_WORD == 64
-# define LOGWL 6
-# define modWORDSZ(n) ((n) &amp; 0x3f)        /* n mod size of word	    */
-#endif
-
-#define divWORDSZ(n) ((n) &gt;&gt; LOGWL)	   /* divide n by size of word      */
+#define BITS_PER_WORD (CHAR_BIT * sizeof (word))
 
 #include &lt;gc_typed.h&gt;
 

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20041220223549</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 22:35:49-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>


On Dec 20, 2004, at 5:32 PM, Andrew Pinski wrote:

&gt; Yes, this is what I applied to both the mainline and the 3.4 branch.
&gt;
&gt; Thanks,
&gt; Andrew Pinski
&gt;
&gt; ChangeLog:

But with this changelog as I had forgot to put something about
BITS_PER_WORD.

2004-12-20  Andrew Pinski  &lt;pinskia@physics.uc.edu&gt;

         PR libobjc/12035
         * gc.c: Remove definition of LOGWL, modWORDSZ, and divWORDSZ 
since
         they are not used.
         Include limits.h and stdlib.h.
         Define BITS_PER_WORD.

Thanks,
Andrew Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220224637</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 22:46:37-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Mon, Dec 20, 2004 at 05:32:39PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 20, 2004, at 5:26 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; On Mon, Dec 20, 2004 at 05:03:45PM -0500, Andrew Pinski wrote:
&gt; &gt;&gt;
&gt; &gt;&gt; This one is better and should work.
&gt; &gt;&gt;
&gt; &gt;&gt;
&gt; &gt;&gt; If it does not report the errors please as it will help to fix the
&gt; &gt;&gt; problem.
&gt; &gt;
&gt; &gt; Yes, this patch seems to work, thanks.  But the compiler still
&gt; &gt; complains about undeclared atoi.  Maybe it worth something to include
&gt; &gt; &lt;stdlib.h&gt; somewhere?
&gt; 
&gt; Yes, this is what I applied to both the mainline and the 3.4 branch.

Ok.  Does it means that something alike should be applied for the
files, which are including coretypes.h and tm.h for now?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220224817</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-20 22:48:17-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>


On Dec 20, 2004, at 5:46 PM, Denis Zaitsev wrote:

&gt; Ok.  Does it means that something alike should be applied for the
&gt; files, which are including coretypes.h and tm.h for now?

Those are more complex and will not be fixed until 4.1.

-- Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041215121554</emailId><senderName>David Wuertele</senderName><senderEmail>dave-gnus@bfnet.com</senderEmail><timestampReceived>2004-12-15 12:15:54-0400</timestampReceived><subject>Repost: gcc cross mips output sizes too big</subject><body>

It's been a month and I still haven't found any answers.  Anyone here
know why object files have grown significantly since 2.95.3?

I've been using crosstool-generated gcc-3.3.3 to build my mipsel
targets, and I find that the file sizes are ginormous.  After
stripping the objects, I get file sizes that are up to TWICE as large
as similarly generated gcc-2.96 code.  Do these sizes not look out of
line?

   bytes          gcc-3.3.3 generated files
  -------       --------------------------------
  1884160	/lib/libc-2.3.2.so
  1257472	/lib/libstdc++.so.5.0.5
  1048576	/usr/local/lib/libfreetype.so.1314.0.0.10
  1036288	/bin/busybox
  1011712	/bin/bash

   bytes          gcc-2.96 generated files
  -------       --------------------------------
  1531904	/lib/libc-2.2.4.so
  532480	/lib/libstdc++-3-libc6.2-2-2.10.0.so
  495616	/usr/local/lib/libfreetype.so.1314.0.0.10
  462848	/bin/busybox
  847872	/bin/bash

Compiling with -Os helps, but doesn't get close to the file sizes I
saw with my older cross-compiler.  It seems strange to me that moving
to a newer compiler will reduce the number of programs I can ship in
my little NAND flash.

Is there some way to generate a more efficient cross-compiler?

Thanks,
Dave

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041216035515</emailId><senderName>John Richard Moser</senderName><senderEmail>nigelenki@comcast.net</senderEmail><timestampReceived>2004-12-16 03:55:15-0400</timestampReceived><subject>Generating shellcode at compile time</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I need to generate some sort of strcpy()able shell code.  Probably
something to do

_exit(255);

would be quite enough; though more in-depth demonstrations would benefit
from being able to actually display a live exploit.  Something like
calling exec("/bin/bash") for example.

I'm working on an x86-64, but would like to be able to demonstrate
exploits and what PaX and the IBM stack smash protector do to stop them
on x86-64, x86, SPARC, PPC, SPARC64, and PPC64.

In the worst case, each shellcode could be individually created and
passed as a reaction to having the example daemon reveal the host type
(which may be useful in dual-host demonstrations where I could exploit a
PPC with an x86); however, I have not the time nor the need to invest my
time in generating such shellcode myself.

I'm not so sure what I want to do, but _exit(255) is fine for my
regression tests.

- --
All content of all messages exchanged herein are left in the
Public Domain, unless otherwise explicitly stated.

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.6 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFBwQcjhDd4aOud5P8RAl+vAJ40ThT0vaa3iyhCp/EgwsNhYp/8nQCfdVpU
Xv/XTZSogpCMgBI/j0mxqa8=
=5SD4
-----END PGP SIGNATURE-----
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220205923</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-12-20 20:59:23-0400</timestampReceived><subject>The Linux binutils 2.15.94.0.2 is released</subject><body>

This is the beta release of binutils 2.15.94.0.2 for Linux, which is
based on binutils 2004 1220 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.94.0.2 to hjl@lucon.org

and

http://www.sourceware.org/bugzilla/

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches if there are any.

Changes from binutils 2.15.94.0.1:

1. Update from binutils 2004 1220.
2. Fix strip for TLS symbol references.

Changes from binutils 2.15.92.0.2:

1. Update from binutils 2004 1121.
2. Put ia64 .ctors/.dtors sections next to small data section for
Intel ia64 compiler.
3. Fix -Bdynamic/-Bstatic handling for linker script.
4. Provide more information on relocation overflow.
5. Add --sort-section to linker.
6. Support icc 8.1 unwind info in readelf.
7. Fix the infinite loop bug on bad input in the ia64 assembler.
8. Fix ia64 SECREL relocation in linker.
9. Fix a section group memory leak in readelf.

Changes from binutils 2.15.91.0.2:

1. Update from binutils 2004 0927.
2. Work around a section header bug in Intel ia64 compiler.
3. Fix an unwind directive bug in the ia64 assembler.
4. Fix various PPC bugs.
5. Update ARM support.
6. Fix an x86-64 linker warning while building Linux kernel.

Changes from binutils 2.15.91.0.1:

1. Update from binutils 2004 0727.
2. Fix the x86_64 linker to prevent non-PIC code in shared library.
3. Fix the ia64 linker to warn the relotable files which can't be
relaxed.
4. Fix the comdat group support. Allow mix single-member comdat group
with linkonce section.
5. Added --add-needed/--no-add-needed options to linker.
6. Fix the SHF_LINK_ORDER support.
7. Fix the ia64 assembler for multiple sections with the same name and
SHT_IA_64_UNWIND sections.
8. Fix the ia64 assembler for merge section and relaxation.

Changes from binutils 2.15.90.0.3:

1. Update from binutils 2004 0527.
2. Fix -x auto option in the ia64 assembler.
3. Add the AR check in the ia64 assembler.
4. Fix the section group support.
5. Add a new -z relro linker option.
6. Fix an exception section placement bug in linker.
7. Add .serialize.data and .serialize.instruction to the ia64
assembler.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Prescott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.94.0.2.tar.bz2. Source code.
2. binutils-2.15.94.0.1-2.15.94.0.2.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.94.0.2-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.94.0.2-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.94.0.2-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.94.0.2.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
12/20/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041220231430</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-20 23:14:30-0400</timestampReceived><subject>Re: [PATCH] GCC 3.4.3: libobjc build failure</subject><body>

On Mon, Dec 20, 2004 at 05:48:17PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 20, 2004, at 5:46 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; Ok.  Does it means that something alike should be applied for the
&gt; &gt; files, which are including coretypes.h and tm.h for now?
&gt; 
&gt; Those are more complex and will not be fixed until 4.1.

Ok.  Thanks.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228040456</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-28 04:04:56-0400</timestampReceived><subject>Re: [BUG] GCC 3.4-20041224: __attribute__ ((regparm)) misbehaviour</subject><body>

On Mon, Dec 27, 2004 at 10:57:07PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 27, 2004, at 10:54 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; Hmm...  Is it regparm-only related?  And is it something new though?
&gt; &gt; GCC 3.3.x doesnt show this behaviour.

Ok, thanks.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228040804</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-28 04:08:04-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

On Tue, Dec 21, 2004 at 11:06:13PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt; &gt; I mean either of these flags is present in both the exported shell
&gt; &gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt; &gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt; &gt; some results of 'make check':
&gt; 
&gt; I would not doubt this is the -fomit-frame-pointer exception handling
&gt; bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
&gt; See PR 17220 and 6764.

And these are the results for GCC 3.4-20041224:


                === libstdc++ Summary ===

# of expected passes            2373
# of unexpected failures        357
# of expected failures          7


Should I submit the new PR so?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041123001044</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-11-23 00:10:44-0400</timestampReceived><subject>The Linux binutils 2.15.94.0.1 is released</subject><body>

This is the beta release of binutils 2.15.94.0.1 for Linux, which is
based on binutils 2004 1121 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.94.0.1 to hjl@lucon.org

and

http://www.sourceware.org/bugzilla/

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches if there are any.

Changes from binutils 2.15.92.0.2:

1. Update from binutils 2004 1121.
2. Put ia64 .ctors/.dtors sections next to small data section for
Intel ia64 compiler.
3. Fix -Bdynamic/-Bstatic handling for linker script.
4. Provide more information on relocation overflow.
5. Add --sort-section to linker.
6. Support icc 8.1 unwind info in readelf.
7. Fix the infinite loop bug on bad input in the ia64 assembler.
8. Fix ia64 SECREL relocation in linker.
9. Fix a section group memory leak in readelf.

Changes from binutils 2.15.91.0.2:

1. Update from binutils 2004 0927.
2. Work around a section header bug in Intel ia64 compiler.
3. Fix an unwind directive bug in the ia64 assembler.
4. Fix various PPC bugs.
5. Update ARM support.
6. Fix an x86-64 linker warning while building Linux kernel.

Changes from binutils 2.15.91.0.1:

1. Update from binutils 2004 0727.
2. Fix the x86_64 linker to prevent non-PIC code in shared library.
3. Fix the ia64 linker to warn the relotable files which can't be
relaxed.
4. Fix the comdat group support. Allow mix single-member comdat group
with linkonce section.
5. Added --add-needed/--no-add-needed options to linker.
6. Fix the SHF_LINK_ORDER support.
7. Fix the ia64 assembler for multiple sections with the same name and
SHT_IA_64_UNWIND sections.
8. Fix the ia64 assembler for merge section and relaxation.

Changes from binutils 2.15.90.0.3:

1. Update from binutils 2004 0527.
2. Fix -x auto option in the ia64 assembler.
3. Add the AR check in the ia64 assembler.
4. Fix the section group support.
5. Add a new -z relro linker option.
6. Fix an exception section placement bug in linker.
7. Add .serialize.data and .serialize.instruction to the ia64
assembler.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Prescott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.94.0.1.tar.bz2. Source code.
2. binutils-2.15.92.0.2-2.15.94.0.1.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.94.0.1-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.94.0.1-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.94.0.1-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.94.0.1.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
11/22/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228034407</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-28 03:44:07-0400</timestampReceived><subject>[BUG] GCC 3.4-20041224: __attribute__ ((regparm)) misbehaviour</subject><body>

This program:


static
int x(int y)
__attribute__ ((regparm(1)));

static
int x(int y)
{
    return y;
}


can't be compiled with GCC 3.4.4 20041224.  The compiler complains:


y-bug.c:7: error: conflicting types for 'x'
y-bug.c:3: error: previous declaration of 'x' was here
y-bug.c:7: error: conflicting types for 'x'
y-bug.c:3: error: previous declaration of 'x' was here


It seems that it's a bug.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222034219</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-22 03:42:19-0400</timestampReceived><subject>[BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
I mean either of these flags is present in both the exported shell
variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
from gcc/Makefile.  Both the builds was successfull.  And these are
some results of 'make check':


-fno-omit-frame-pointer:

                === libstdc++ Summary ===

# of expected passes            2720
# of unexpected failures        1
# of unexpected successes       1
# of expected failures          6


-fomit-frame-pointer:

                === libstdc++ Summary ===

# of expected passes            2364
# of unexpected failures        357
# of expected failures          7


So, the difference seems to be just huge.  Does it mean some serious
problems GCC has in the hard-fp-less area for x86?  (BTW, it
traditionally has some...)  The tests results for gcc and g++ are
different too, but that differencies are just miserable compared with
those listed.

Other details about the build and check environment:

CFLAGS, CXXFLAGS, BOOT_CFLAGS:

        -pipe
        -O3
        -fno-strength-reduce
        -fno-inline-functions
        -fno-align-functions
        -fno-align-loops
        -fno-align-jumps
        -fno-ident
        -f[no]omit-frame-pointer
        -D__USE_STRING_INLINES
        -mpreferred-stack-boundary=2

configure's args:

        --enable-shared
        --enable-static
        --disable-debug
        --disable-profile
        --disable-nls
        --disable-libtool-lock
        --disable-rpath
        --disable-largefile
        --with-gnu-as
        --with-gnu-ld
        --enable-threads=posix
        --enable-__cxa_atexit
        --enable-languages=c,c++,objc
        --enable-version-specific-runtime-libs
        --enable-clocale
        --enable-objc-gc
        --disable-checking
        --with-gc=simple
        --with-system-zlib
        --with-tune=pentium
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222040613</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-22 04:06:13-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>


On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:

&gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt; I mean either of these flags is present in both the exported shell
&gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt; some results of 'make check':

I would not doubt this is the -fomit-frame-pointer exception handling
bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
See PR 17220 and 6764.

-- Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222043423</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-22 04:34:23-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

On Tue, Dec 21, 2004 at 11:06:13PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt; &gt; I mean either of these flags is present in both the exported shell
&gt; &gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt; &gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt; &gt; some results of 'make check':
&gt; 
&gt; I would not doubt this is the -fomit-frame-pointer exception handling
&gt; bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
&gt; See PR 17220 and 6764.

Ok, I'll try.  Am I understand right, that the versions you've listed
are still unreleased?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222043845</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-22 04:38:45-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>


On Dec 21, 2004, at 11:34 PM, Denis Zaitsev wrote:

&gt; On Tue, Dec 21, 2004 at 11:06:13PM -0500, Andrew Pinski wrote:
&gt;&gt;
&gt;&gt; On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:
&gt;&gt;
&gt;&gt;&gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt;&gt;&gt; I mean either of these flags is present in both the exported shell
&gt;&gt;&gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt;&gt;&gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt;&gt;&gt; some results of 'make check':
&gt;&gt;
&gt;&gt; I would not doubt this is the -fomit-frame-pointer exception handling
&gt;&gt; bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
&gt;&gt; See PR 17220 and 6764.
&gt;
&gt; Ok, I'll try.  Am I understand right, that the versions you've listed
&gt; are still unreleased?

That is correct which is why I also pointed to the bug reports
which talk about the problem a little further but since the fix
is in all of the next releases I am not worried about the problem in
general.

-- Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222201327</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-22 20:13:27-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

On Tue, Dec 21, 2004 at 11:06:13PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt; &gt; I mean either of these flags is present in both the exported shell
&gt; &gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt; &gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt; &gt; some results of 'make check':
&gt; 
&gt; I would not doubt this is the -fomit-frame-pointer exception handling
&gt; bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
&gt; See PR 17220 and 6764.

I'm trying the patches.  Make check is still going and this should
take the couple more hours.  But it's already obvious that nothing has
changed into the something better...  I've a lot of failures for
libstdc++.  The most of them look like:


FAIL: 22_locale/num_get/get/wchar_t/1.cc execution test
FAIL: 22_locale/num_get/get/wchar_t/2.cc execution test
FAIL: 22_locale/num_get/get/wchar_t/3.cc execution test
FAIL: 22_locale/num_get/get/wchar_t/5.cc execution test
FAIL: 22_locale/num_get/get/wchar_t/6.cc execution test
FAIL: 22_locale/num_get/get/wchar_t/9.cc execution test


BTW, as I can see, the test sources are compiling w/o
-fomit-frame-pointer.  And the only optimization is -O2.  And it's
strange by itself.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041222222033</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-22 22:20:33-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

On Thu, Dec 23, 2004 at 01:13:27AM +0500, Denis Zaitsev wrote:
&gt; I'm trying the patches.  Make check is still going and this should
&gt; take the couple more hours.

Ok, it's finushed.  The libstdc++ results are:


# of expected passes            2366
# of unexpected failures        355
# of expected failures          7


There are 2 less failures...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041227211430</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-27 21:14:30-0400</timestampReceived><subject>Re: [BUG] GCC 3.4.3/x86: -fomit-frame-pointer cause a lot of test failures for libstdc++</subject><body>

On Tue, Dec 21, 2004 at 11:06:13PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 21, 2004, at 10:42 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; I've built GCC with -fomit-frame-pointer and -fno-omit-frame-pointer.
&gt; &gt; I mean either of these flags is present in both the exported shell
&gt; &gt; variables CFLAGS and CXXFLAGS and also in the BOOT_CFLAGS variable
&gt; &gt; from gcc/Makefile.  Both the builds was successfull.  And these are
&gt; &gt; some results of 'make check':
&gt; 
&gt; I would not doubt this is the -fomit-frame-pointer exception handling
&gt; bug which was fixed in 3.4.4, 3.3.6, and 4.0.0.
&gt; See PR 17220 and 6764.

And these are the results for GCC 3.4-20041224:


                === libstdc++ Summary ===

# of expected passes            2373
# of unexpected failures        357
# of expected failures          7


So, there are still the same bugs.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228034946</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-28 03:49:46-0400</timestampReceived><subject>Re: [BUG] GCC 3.4-20041224: __attribute__ ((regparm)) misbehaviour</subject><body>


On Dec 27, 2004, at 10:44 PM, Denis Zaitsev wrote:

&gt; This program:
&gt;
&gt;
&gt; static
&gt; int x(int y)
&gt; __attribute__ ((regparm(1)));
&gt;
&gt; static
&gt; int x(int y)
&gt; {
&gt;     return y;
&gt; }
&gt;

No this is not a bug. You need regparm attribute on the function
definition too.

-- Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228035429</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-12-28 03:54:29-0400</timestampReceived><subject>Re: [BUG] GCC 3.4-20041224: __attribute__ ((regparm)) misbehaviour</subject><body>

On Mon, Dec 27, 2004 at 10:49:46PM -0500, Andrew Pinski wrote:
&gt; 
&gt; On Dec 27, 2004, at 10:44 PM, Denis Zaitsev wrote:
&gt; 
&gt; &gt; This program:
&gt; &gt;
&gt; &gt;
&gt; &gt; static
&gt; &gt; int x(int y)
&gt; &gt; __attribute__ ((regparm(1)));
&gt; &gt;
&gt; &gt; static
&gt; &gt; int x(int y)
&gt; &gt; {
&gt; &gt;     return y;
&gt; &gt; }
&gt; &gt;
&gt; 
&gt; No this is not a bug. You need regparm attribute on the function
&gt; definition too.

Hmm...  Is it regparm-only related?  And is it something new though?
GCC 3.3.x doesnt show this behaviour.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041228035707</emailId><senderName>Andrew Pinski</senderName><senderEmail>pinskia@physics.uc.edu</senderEmail><timestampReceived>2004-12-28 03:57:07-0400</timestampReceived><subject>Re: [BUG] GCC 3.4-20041224: __attribute__ ((regparm)) misbehaviour</subject><body>


On Dec 27, 2004, at 10:54 PM, Denis Zaitsev wrote:

&gt; Hmm...  Is it regparm-only related?  And is it something new though?
&gt; GCC 3.3.x doesnt show this behaviour.

Read &lt;http://gcc.gnu.org/ml/gcc/2004-03/msg00039.html&gt;.

-- Pinski

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040303163556</emailId><senderName>"Alicia Rodriguez"</senderName><senderEmail>yvsecmsasc@msn.com</senderEmail><timestampReceived>2004-03-03 16:35:56-0400</timestampReceived><subject>We Are the Best vpSi</subject><body>


The most complete Phar macy Online
We carry all major medds at bargain price
Viggra, Ci ialis, VaIium, Xa naax
Phantermiine, Ulltraam and etc...
SatiisfactIon Gua ranteeed

http://labelhere.com


cgxCsU

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040413004435</emailId><senderName>"Cesar Roth"</senderName><senderEmail>ruefmei@msn.com</senderEmail><timestampReceived>2004-04-13 00:44:35-0400</timestampReceived><subject>SU-per Hu^ge 0ffers OTx</subject><body>


Huge selection of meds available
at attractive prices. 
Highest quality assured.

Try us out today..

http://ceahere.com/?a=444


dEhAl
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040624063406</emailId><senderName>John Richard Moser</senderName><senderEmail>nigelenki@comcast.net</senderEmail><timestampReceived>2004-06-24 06:34:06-0400</timestampReceived><subject>Viability of a New Allocator</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I've been trying to circulate a new idea for a new allocator for some
time now, to replace the current glibc allocator.  It would leave behind
the heap in favor of complex mmap()ing to create what is best described
as a virtual virtual heap-- a completely noncontiguous virtual heap that
acts as a contiguous virtual heap that acts as a real heap.  For our
purposes, we will call a real heap a "real heap," and a virtual virtual
heap "the heap" or just "heap."

The advantages of this are many, mainly that unused pages can be
returned to the system and that memory fragmentation would be reduced in
severity.  The disadvantages are that the code would be more complex.

Any unused, allocated area of memory that touches or crosses a page
boundary is infinite in size under this scheme, and so can be expanded
and utilized, reducing the impact of heap fragmentation.

I believe that this would not only give less memory usage; but also
increase the speed of allocations.  Allocations could be done by
checking the largest finite size unused segment of existing allocations,
and if it's smaller than what you need, using an infinite size fragment.
~   Seaching out an unused, allocated segment to fit an allocation call
would be a shorter operation, because all page-aligned and page-crossing
unused fragments are of inifinite size; and so if a finite size fragment
exists that fits what is needed, it will be found in a smaller, possibly
much smaller list.

The idea was first developed on a bug posted to the Red Hat Sources
Bugzilla; and later refined in a blog, and posted in a Red Hat Linux
Bugzilla bug, and also to libc-alpha.  Those links are as follows:

http://sources.redhat.com/bugzilla/show_bug.cgi?id=167
http://bluefoxicy.blogspot.com/2004_05_01_bluefoxicy_archive.html#108507154064758877
https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=123965
http://sources.redhat.com/ml/libc-alpha/2004-05/msg00216.html

I have no idea how to implement this, although from what I gather it is
feasible.  I believe but can not guarantee that it will give the returns
I expect.  Is anyone interested in this at all?  I don't have the skill
to code it, but if someone could find someone to code it or at least
confirm that it should behave as expected, I'd be grateful.
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFA2nXahDd4aOud5P8RAuFpAJ9wldF6eEe12w0QUS9jHmmTK6DoaQCdEjDl
aT3XERefzLEHZ57jtgPU2FA=
=gZ2e
-----END PGP SIGNATURE-----
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040624151004</emailId><senderName>John Richard Moser</senderName><senderEmail>nigelenki@comcast.net</senderEmail><timestampReceived>2004-06-24 15:10:04-0400</timestampReceived><subject>Re: Email Verification Request</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

linux-c-programming@vger.kernel.org wrote:
| Recently you sent an email message to
linux-c-programming@vger.kernel.org, linux-gcc@vger.kernel.org with the
subject Viability of a New Allocator.
|
| To verify that this is from a really person and not a spammer. All you
need
| to do is simply reply to this message. And any further emails should
simply go
| straight through.
|
| Thank you for helping stop spam.
|
| Email-Verify-Code: 19HkBAHWjmYyY
|

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFA2u7HhDd4aOud5P8RApwsAJ4iYOENQjCNuA0iQD84FSyjH0S2GwCfX3wQ
/+ki0EhkEOpQVRvnbc89MG0=
=zM16
-----END PGP SIGNATURE-----
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040506091206</emailId><senderName>"Sreekandh Iyer"</senderName><senderEmail>sree@asthatech.com</senderEmail><timestampReceived>2004-05-06 09:12:06-0400</timestampReceived><subject>Re: (unknown)</subject><body>

emacs would be a good choice 


On Sun, 09 Feb 2003 16:08:17 +0000, Anant Aneja wrote:

&gt; can anyone suggest a text mode ide for gcc like turbo c++ ide.
&gt; Anant
&gt; 
&gt; 
&gt; 

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040506135509</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-05-06 13:55:09-0400</timestampReceived><subject>Re: build</subject><body>

On Wed, May 05, 2004 at 07:26:17PM +0530, Dominic VP wrote:
&gt; Hi,
&gt; 
&gt; I am having to port linux to a new architecture. This architecture does not
&gt; have gcc ported on to it. This does have an ansi c compiler/as/ld.
&gt; 
&gt; Has anyone has had any experience/success with building linux with an ansi c
&gt; compiler. I know it does not build automagically, but any info on
&gt; deviations/changes/tools would be appreciated a LOT.

to compile the linux kernel only a 'simple' gcc/binutil
version is required ... so the best thing would be to
port just the required parts of gcc/binutils

see here for some details:
http://vserver.13thfloor.at/Stuff/Cross/howto.info

(make sure to compile and install the binutils first)

HTH,
Herbert

PS: I doubt that an ansi compiler (probably not even
    C99) will be able to compile linux kernels ...
PPS: please let me know if you succeed ...
    
&gt; thanks in advance,
&gt; dominique
&gt; 
&gt; 
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040527190215</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-05-27 19:02:15-0400</timestampReceived><subject>The Linux binutils 2.15.91.0.1 is released</subject><body>

This is the beta release of binutils 2.15.91.0.1 for Linux, which is
based on binutils 2004 0527 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.91.0.1 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.15.90.0.3:

1. Update from binutils 2004 0527.
2. Fix -x auto option in the ia64 assembler.
3. Add the AR check in the ia64 assembler.
4. Fix the section group support.
5. Add a new -z relro linker option.
6. Fix an exception section placement bug in linker.
7. Add .serialize.data and .serialize.instruction to the ia64
assembler.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.91.0.1.tar.bz2. Source code.
2. binutils-2.15.90.0.3-2.15.91.0.1.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.91.0.1-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.91.0.1-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.91.0.1-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.91.0.1.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
05/27/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040413162322</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-04-13 16:23:22-0400</timestampReceived><subject>The Linux binutils 2.15.90.0.2 is released</subject><body>

This is the beta release of binutils 2.15.90.0.2 for Linux, which is
based on binutils 2004 0412 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.90.0.2 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.90.0.2.tar.bz2. Source code.
2. binutils-2.15.90.0.1.1-2.15.90.0.2.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.90.0.2-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.90.0.2-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.90.0.2-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.90.0.2.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
04/13/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040101235727</emailId><senderName>Tommy Faasen</senderName><senderEmail>tommy@zwanebloem.nl</senderEmail><timestampReceived>2004-01-01 23:57:27-0400</timestampReceived><subject>BUG: 2.6.0 non fatal recoverable errors crash gcc</subject><body>

Hi,

I'm not subscribed to this newsgroup, but i'll try to read the follow-up 
messages if any.

When my machine is doing big compiles like the kernel or mythtv , 
gcc/g++ crashes.
This happens after syslog tell me  that there is a recoverable error 
(see output below).
This happened several times but I don't know why and what I can do about 
it ..
The machine seems to be very stable, but it could be a hardware problem 
i guess.

I'm using a stock 2.6.0 kernel on a duron 1300 on a via kt133a chipset 
and has 640MB memory, extra information can be found below, if you need 
more information please let me know.


make[2]: *** [asf.o] Error 1
make[2]: Leaving directory `/mnt/diskb/newsan/mythtv-0.13/libs/libavformat'
make[1]: *** [sub-libavformat] Error 2
make[1]: Leaving directory `/mnt/diskb/newsan/mythtv-0.13/libs'
make: *** [sub-libs] Error 2
thuis:/mnt/diskb/newsan/mythtv-0.13#
Message from syslogd@thuis at Thu Jan  1 21:21:12 2004 ...
thuis kernel: MCE: The hardware reports a non fatal, correctable 
incident occurred on CPU 0.

Message from syslogd@thuis at Thu Jan  1 21:21:12 2004 ...
thuis kernel: Bank 0: a600000000000175

thuis:/mnt/diskb/newsan/mythtv-0.13# uname -a
Linux thuis 2.6.0-1-k7 #1 Mon Dec 29 17:23:22 CET 2003 i686 unknown
thuis:/mnt/diskb/newsan/mythtv-0.13# lspci -v
00:00.0 Host bridge: VIA Technologies, Inc. VT8363/8365 [KT133/KM133] 
(rev 03)
        Flags: bus master, medium devsel, latency 8
        Memory at d0000000 (32-bit, prefetchable) [size=128M]
        Capabilities: [a0] AGP version 2.0
        Capabilities: [c0] Power Management version 2

00:01.0 PCI bridge: VIA Technologies, Inc. VT8363/8365 [KT133/KM133 AGP] 
(prog-if 00 [Normal decode])
        Flags: bus master, 66Mhz, medium devsel, latency 0
        Bus: primary=00, secondary=01, subordinate=01, sec-latency=0
        Memory behind bridge: da000000-dbffffff
        Prefetchable memory behind bridge: d8000000-d9ffffff
        Capabilities: [80] Power Management version 2

00:07.0 ISA bridge: VIA Technologies, Inc. VT82C686 [Apollo Super South] 
(rev 40)
        Subsystem: VIA Technologies, Inc. VT82C686/A PCI to ISA Bridge
        Flags: bus master, stepping, medium devsel, latency 0
        Capabilities: [c0] Power Management version 2

00:07.1 IDE interface: VIA Technologies, Inc. Bus Master IDE (rev 06) 
(prog-if 8a [Master SecP PriP])
        Subsystem: VIA Technologies, Inc. Bus Master IDE
        Flags: bus master, medium devsel, latency 32
        I/O ports at c000 [size=16]
        Capabilities: [c0] Power Management version 2

00:07.2 USB Controller: VIA Technologies, Inc. UHCI USB (rev 16) 
(prog-if 00 [UHCI])
        Subsystem: Unknown device 0925:1234
        Flags: bus master, medium devsel, latency 32, IRQ 9
        I/O ports at c400 [size=32]
        Capabilities: [80] Power Management version 2

00:07.3 USB Controller: VIA Technologies, Inc. UHCI USB (rev 16) 
(prog-if 00 [UHCI])
        Subsystem: Unknown device 0925:1234
        Flags: bus master, medium devsel, latency 32, IRQ 9
        I/O ports at c800 [size=32]
        Capabilities: [80] Power Management version 2

00:07.4 Bridge: VIA Technologies, Inc. VT82C686 [Apollo Super ACPI] (rev 40)
        Subsystem: VIA Technologies, Inc. VT82C686 [Apollo Super ACPI]
        Flags: medium devsel
        Capabilities: [68] Power Management version 2

00:07.5 Multimedia audio controller: VIA Technologies, Inc. AC97 Audio 
Controller (rev 50)
        Subsystem: VIA Technologies, Inc.: Unknown device 4511
        Flags: medium devsel, IRQ 10
        I/O ports at cc00 [size=256]
        I/O ports at d000 [size=4]
        I/O ports at d400 [size=4]
        Capabilities: [c0] Power Management version 2

00:09.0 SCSI storage controller: Adaptec AHA-2940U2/W
        Subsystem: Adaptec: Unknown device a180
        Flags: bus master, medium devsel, latency 32, IRQ 11
        BIST result: 00
        I/O ports at d800 [disabled] [size=256]
        Memory at dd200000 (64-bit, non-prefetchable) [size=4K]
        Expansion ROM at &lt;unassigned&gt; [disabled] [size=128K]
        Capabilities: [dc] Power Management version 1

00:0a.0 Ethernet controller: Intel Corp. 82557 [Ethernet Pro 100] (rev 05)
        Subsystem: Compaq Computer Corporation NC3120
        Flags: bus master, medium devsel, latency 32, IRQ 10
        Memory at dd204000 (32-bit, prefetchable) [size=4K]
        I/O ports at dc00 [size=32]
        Memory at dd000000 (32-bit, non-prefetchable) [size=1M]
        Expansion ROM at &lt;unassigned&gt; [disabled] [size=1M]
        Capabilities: [dc] Power Management version 1

00:0b.0 Multimedia video controller: Brooktree Corporation Bt878 (rev 11)
        Subsystem: Hauppauge computer works Inc. WinTV/GO
        Flags: bus master, medium devsel, latency 32, IRQ 9
        Memory at dd201000 (32-bit, prefetchable) [size=4K]
        Capabilities: [44] Vital Product Data
        Capabilities: [4c] Power Management version 2

00:0b.1 Multimedia controller: Brooktree Corporation Bt878 (rev 11)
        Subsystem: Hauppauge computer works Inc. WinTV/GO
        Flags: bus master, medium devsel, latency 32, IRQ 9
        Memory at dd202000 (32-bit, prefetchable) [size=4K]
        Capabilities: [44] Vital Product Data
        Capabilities: [4c] Power Management version 2

00:0c.0 Ethernet controller: Intel Corp. 82557 [Ethernet Pro 100] (rev 05)
        Subsystem: Compaq Computer Corporation NC3120
        Flags: bus master, medium devsel, latency 32, IRQ 10
        Memory at dd203000 (32-bit, prefetchable) [size=4K]
        I/O ports at e000 [size=32]
        Memory at dd100000 (32-bit, non-prefetchable) [size=1M]
        Expansion ROM at &lt;unassigned&gt; [disabled] [size=1M]
        Capabilities: [dc] Power Management version 1

01:00.0 VGA compatible controller: nVidia Corporation Vanta [NV6] (rev 
15) (prog-if 00 [VGA])
        Subsystem: Unknown device 17f2:4010
        Flags: bus master, 66Mhz, medium devsel, latency 248, IRQ 12
        Memory at da000000 (32-bit, non-prefetchable) [size=16M]
        Memory at d8000000 (32-bit, prefetchable) [size=32M]
        Expansion ROM at &lt;unassigned&gt; [disabled] [size=64K]
        Capabilities: [60] Power Management version 1
        Capabilities: [44] AGP version 2.0

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040202213721</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-02-02 21:37:21-0400</timestampReceived><subject>Why __memrchr vs. memrchr ?</subject><body>

Why such a scheme is used in GLIBC:

declare + define __memrchr, and than

# ifdef __USE_GNU
#  define memrchr(s, c, n) __memrchr ((s), (c), (n))
# endif

?  memrchr is not the GNU extension, is it?

Thanks in advance.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040202221723</emailId><senderName>"Dmitry V. Levin"</senderName><senderEmail>ldv@altlinux.org</senderEmail><timestampReceived>2004-02-02 22:17:23-0400</timestampReceived><subject>Re: Why __memrchr vs. memrchr ?</subject><body>

Hi,

On Tue, Feb 03, 2004 at 02:37:21AM +0500, Denis Zaitsev wrote:
&gt; Why such a scheme is used in GLIBC:
&gt; 
&gt; declare + define __memrchr, and than
&gt; 
&gt; # ifdef __USE_GNU
&gt; #  define memrchr(s, c, n) __memrchr ((s), (c), (n))
&gt; # endif
&gt; 
&gt; ?  memrchr is not the GNU extension, is it?

According to memchr(3),
"The memrchr() function is a GNU extension, available since glibc 2.1.91".


-- 
ldv

[Attachment #3 (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040505140817</emailId><senderName>"Dominic VP"</senderName><senderEmail>dominic.vp@globaledgesoft.com</senderEmail><timestampReceived>2004-05-05 14:08:17-0400</timestampReceived><subject>build</subject><body>

Hi,

I am having to port linux to a new architecture. This architecture does not
have gcc ported on to it. This does have an ansi c compiler/as/ld.

Has anyone has had any experience/success with building linux with an ansi c
compiler. I know it does not build automagically, but any info on
deviations/changes/tools would be appreciated a LOT.

thanks in advance,
dominique


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040505141518</emailId><senderName>Jan-Benedict Glaw</senderName><senderEmail>jbglaw@lug-owl.de</senderEmail><timestampReceived>2004-05-05 14:15:18-0400</timestampReceived><subject>Re: build</subject><body>

On Wed, 2004-05-05 19:26:17 +0530, Dominic VP &lt;dominic.vp@globaledgesoft.com&gt;
wrote in message &lt;018401c432a8$bc7fc080$630210ac@dominc&gt;:
&gt; I am having to port linux to a new architecture. This architecture does not
&gt; have gcc ported on to it. This does have an ansi c compiler/as/ld.

Well, the Linux kernel highly depends on some GCC extensions, so you'll
need to make gcc work for your architecture (btw., what arch are you
working on?).

With a lot of luck, Intels compiler (icc) may also produce a working
kernel image, but it'll probably only work for ia32 and ia64 :)

&gt; Has anyone has had any experience/success with building linux with an ansi c
&gt; compiler. I know it does not build automagically, but any info on
&gt; deviations/changes/tools would be appreciated a LOT.

You'd need to work around a lot of gccisms for the Linux kernel. ...and
GNU userland may not easily build with other compilers, too...

MfG, JBG

-- 
   Jan-Benedict Glaw       jbglaw@lug-owl.de    . +49-172-7608481
   "Eine Freie Meinung in  einem Freien Kopf    | Gegen Zensur | Gegen Krieg
    fuer einen Freien Staat voll Freier Bürger" | im Internet! |   im Irak!
   ret = do_actions((curr | FREE_SPEECH) &amp; ~(NEW_COPYRIGHT_LAW | DRM | TCPA));

["signature.asc" (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040203003002</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-02-03 00:30:02-0400</timestampReceived><subject>Re: Why __memrchr vs. memrchr ?</subject><body>

On Tue, Feb 03, 2004 at 01:17:23AM +0300, Dmitry V. Levin wrote:
&gt; Hi,
&gt; 
&gt; On Tue, Feb 03, 2004 at 02:37:21AM +0500, Denis Zaitsev wrote:
&gt; &gt; Why such a scheme is used in GLIBC:
&gt; &gt; 
&gt; &gt; declare + define __memrchr, and than
&gt; &gt; 
&gt; &gt; # ifdef __USE_GNU
&gt; &gt; #  define memrchr(s, c, n) __memrchr ((s), (c), (n))
&gt; &gt; # endif
&gt; &gt; 
&gt; &gt; ?  memrchr is not the GNU extension, is it?
&gt; 
&gt; According to memchr(3),
&gt; "The memrchr() function is a GNU extension, available since glibc 2.1.91".

Oh, I'm sorry.  This fact is omited from the texinfo GLIBC
documentation...

Thanks.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040203060340</emailId><senderName>Andreas Jaeger</senderName><senderEmail>aj@suse.de</senderEmail><timestampReceived>2004-02-03 06:03:40-0400</timestampReceived><subject>Re: Why __memrchr vs. memrchr ?</subject><body>

Denis Zaitsev &lt;zzz@anda.ru&gt; writes:

&gt; On Tue, Feb 03, 2004 at 01:17:23AM +0300, Dmitry V. Levin wrote:
&gt;&gt; Hi,
&gt;&gt; 
&gt;&gt; On Tue, Feb 03, 2004 at 02:37:21AM +0500, Denis Zaitsev wrote:
&gt;&gt; &gt; Why such a scheme is used in GLIBC:
&gt;&gt; &gt; 
&gt;&gt; &gt; declare + define __memrchr, and than
&gt;&gt; &gt; 
&gt;&gt; &gt; # ifdef __USE_GNU
&gt;&gt; &gt; #  define memrchr(s, c, n) __memrchr ((s), (c), (n))
&gt;&gt; &gt; # endif
&gt;&gt; &gt; 
&gt;&gt; &gt; ?  memrchr is not the GNU extension, is it?
&gt;&gt; 
&gt;&gt; According to memchr(3),
&gt;&gt; "The memrchr() function is a GNU extension, available since glibc 2.1.91".
&gt;
&gt; Oh, I'm sorry.  This fact is omited from the texinfo GLIBC
&gt; documentation...

It's in the Library Summary:
`void * memrchr (const void *BLOCK, int C, size_t SIZE)'
     `string.h' (GNU):  *Note Search Functions::.


Andreas
-- 
 Andreas Jaeger, aj@suse.de, http://www.suse.de/~aj
  SuSE Linux AG, Maxfeldstr. 5, 90409 Nürnberg, Germany
   GPG fingerprint = 93A3 365E CE47 B889 DF7F  FED1 389A 563C C272 A126

[Attachment #3 (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040415154824</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-04-15 15:48:24-0400</timestampReceived><subject>The Linux binutils 2.15.90.0.3 is released</subject><body>

This is the beta release of binutils 2.15.90.0.3 for Linux, which is
based on binutils 2004 0415 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.90.0.3 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.90.0.3.tar.bz2. Source code.
2. binutils-2.15.90.0.2-2.15.90.0.3.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.90.0.3-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.90.0.3-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.90.0.3-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.90.0.3.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
04/15/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040419190500</emailId><senderName>"Ramon Glover"</senderName><senderEmail>tlsbabl@hotmail.com</senderEmail><timestampReceived>2004-04-19 19:05:00-0400</timestampReceived><subject>Qualities Pharrmacy pyLzP</subject><body>



Huge selection of meds available
at attractive prices. 
Highest quality assured.

Try us out today..

http://greatadvance.com/track.php?h=MjZ8cm9ubg%3D%3D&amp;cg=1&amp;c=one


apdsF
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040303231332</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-03-03 23:13:32-0400</timestampReceived><subject>The Linux binutils 2.15.90.0.1 is released</subject><body>

This is the beta release of binutils 2.15.90.0.1 for Linux, which is
based on binutils 2004 0303 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.90.0.1 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.90.0.1.tar.bz2. Source code.
2. binutils-2.14.90.0.8-2.15.90.0.1.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.90.0.1-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.90.0.1-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.90.0.1-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.90.0.1.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
03/03/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040304172142</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-03-04 17:21:42-0400</timestampReceived><subject>Re: binutils 2.15.90.0.1 doesn't install as.1 man page</subject><body>

On Wed, Mar 03, 2004 at 09:44:55PM -0300, Fr?d?ric L. W. Meunier wrote:
&gt; But it creates it:
&gt; 
&gt; -rw-r--r--  1 fredlwm fredlwm 36845 2004-03-03 21:28 as.1
&gt; 
&gt; It also happened with 2.14.90.0.8. Attached is my make install
&gt; log.
&gt; 

Some generated fils in binutils 2.15.90.0.1 weren't updated. As the
result, the assembler man page isn't installed. The work around
requires automake 1.8.2 and autoconf 2.59:

# cd gas
# aclocal
# automake --cygnus Makefile
# automake --cygnus doc/Makefile
# autoconf


H.J.
---
This is the beta release of binutils 2.15.90.0.1 for Linux, which is
based on binutils 2004 0303 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.90.0.1 to hjl@lucon.org.

Some generated fils in binutils 2.15.90.0.1 weren't updated. As the
result, the assembler man page isn't installed. The work around
requires automake 1.8.2 and autoconf 2.59:

# cd gas
# aclocal
# automake --cygnus Makefile
# automake --cygnus doc/Makefile
# autoconf

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.90.0.1.tar.bz2. Source code.
2. binutils-2.14.90.0.8-2.15.90.0.1.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.90.0.1-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.90.0.1-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.90.0.1-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.90.0.1.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
03/03/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040306024343</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-03-06 02:43:43-0400</timestampReceived><subject>The Linux binutils 2.15.90.0.1.1 is released</subject><body>

This is the beta release of binutils 2.15.90.0.1.1 for Linux, which is
based on binutils 2004 0303 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.90.0.1.1 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.90.0.1.1.tar.bz2. Source code.
2. binutils-2.15.90.0.1-2.15.90.0.1.1.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.90.0.1.1-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.90.0.1.1-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.90.0.1.1-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.90.0.1.1.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
03/05/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040311102916</emailId><senderName></senderName><senderEmail>bvtu</senderEmail><timestampReceived>2004-03-11 10:29:16-0400</timestampReceived><subject>OIlUvpHW9QhpNbyhU EDHgFSwedFWSGaA28MVSOeHCzr3m</subject><body>


«z ! ¤j ®a  »° §Ö ¨Ó ¤U ¸ü A  ¤ù Åo !


http://home.kimo.com.tw/dbtabcd52


«z ! ¤j ®a  »° §Ö ¨Ó ¤U ¸ü A  ¤ù Åo !


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040311190130</emailId><senderName>"Hilda Nielsen"</senderName><senderEmail>mkucwxustb@hotmail.com</senderEmail><timestampReceived>2004-03-11 19:01:30-0400</timestampReceived><subject>We Are the Best AS</subject><body>



Huge selection of meds available
at attractive prices. 
Highest quality assured.

Try us out today..

http://aliashere.com


A35W
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040314173117</emailId><senderName>"Morgan Drummond"</senderName><senderEmail>bywwxgs@yahoo.com</senderEmail><timestampReceived>2004-03-14 17:31:17-0400</timestampReceived><subject>Biggest Pharmacy 5RseJ</subject><body>




Huge selection of meds available
at attractive prices. 
Highest quality assured.

Try us out today..

http://obhohl.multicountry.com/?dmnpmcxwnopytbplwgzpoafwcfr


AkM
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040324223808</emailId><senderName>"Ingrid Kenney"</senderName><senderEmail>csudfiukm@msn.com</senderEmail><timestampReceived>2004-03-24 22:38:08-0400</timestampReceived><subject>Woww..8o-% 0ff Autoanswer</subject><body>


Loking for quality meds at affordable
price?
We have widest range of meds at very
competitive price.
Money baack guaranteesss...

http://uk.geocities.com/gracia28609darsey18843/


N1F
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040327185817</emailId><senderName>"Bonnie Cisneros"</senderName><senderEmail>urqfgcfgnwx@msn.com</senderEmail><timestampReceived>2004-03-27 18:58:17-0400</timestampReceived><subject>We SelIs all Medss 9M</subject><body>


Huge selection of meds available
at attractive prices. 
Highest quality assured.

Try us out today..

http://futuremakes.com


N4i
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040206000809</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-02-06 00:08:09-0400</timestampReceived><subject>Re: Why __memrchr vs. memrchr ?</subject><body>

On Tue, Feb 03, 2004 at 07:03:40AM +0100, Andreas Jaeger wrote:
&gt; Denis Zaitsev &lt;zzz@anda.ru&gt; writes:
&gt; 
&gt; &gt; On Tue, Feb 03, 2004 at 01:17:23AM +0300, Dmitry V. Levin wrote:
&gt; &gt;&gt; 
&gt; &gt;&gt; According to memchr(3),
&gt; &gt;&gt; "The memrchr() function is a GNU extension, available since glibc 2.1.91".
&gt; &gt;
&gt; &gt; Oh, I'm sorry.  This fact is omited from the texinfo GLIBC
&gt; &gt; documentation...
&gt; 
&gt; It's in the Library Summary:
&gt; `void * memrchr (const void *BLOCK, int C, size_t SIZE)'
&gt;      `string.h' (GNU):  *Note Search Functions::.

Indeed, it's shortly marked as (GNU) here and there.  But that's not
described in the texi manual.  So, below is the tiny patch.  Please,
apply it.


--- manual/string.texi.orig	2004-02-06 05:02:13.000000000 +0500
+++ manual/string.texi	2004-02-06 05:03:47.000000000 +0500
@@ -1625,6 +1625,8 @@ This function is a GNU extension.
 The function @code{memrchr} is like @code{memchr}, except that it searches
 backwards from the end of the block defined by @var{block} and @var{size}
 (instead of forwards from the front).
+
+This function is a GNU extension.
 @end deftypefun
 
 @comment string.h
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040212204407</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-02-12 20:44:07-0400</timestampReceived><subject>Re: GCC 3.3.2: Some bug in the preprocessor?</subject><body>

On Thu, Feb 12, 2004 at 12:34:04PM -0800, Zack Weinberg wrote:
&gt; 
&gt; You cannot use casts in #if.  Your conditionals are read as
&gt; 
&gt; #if (0)0 &gt; -1
&gt; 
&gt; which produces a syntax error;

Oh, ok, thanks.  I've missed the error message...
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040217132654</emailId><senderName>"Maciej W. Rozycki"</senderName><senderEmail>macro@ds2.pg.gda.pl</senderEmail><timestampReceived>2004-02-17 13:26:54-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Fri, 13 Feb 2004, Herbert Poetzl wrote:

&gt;    mips/mips64:
&gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; 	which results in a cc1: error: invalid option 
&gt; 	`cpu=&lt;cpu-here&gt;'

 FYI, this has been addressed in the MIPS CVS tree not so long ago, so
changes are not merged to the mainline yet.  Actually, even the CVS
version isn't fully complete yet -- a small update is still pending
approval.  The problem isn't related to doing a build with cross-tools --
it happens when building natively as well.

 Otherwise, cross-compilation is the usual way of doing builds for MIPS
and it works in general.

-- 
+  Maciej W. Rozycki, Technical University of Gdansk, Poland   +
+--------------------------------------------------------------+
+        e-mail: macro@ds2.pg.gda.pl, PGP key available        +
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040224202337</emailId><senderName>"Errol Gee"</senderName><senderEmail>yfdqdbic@msn.com</senderEmail><timestampReceived>2004-02-24 20:23:37-0400</timestampReceived><subject>Qualities Pharrmacy wHRp46</subject><body>




Loking for quality meds at affordable
price?
We have widest range of meds at very
competitive price.
Money baack guaranteesss...

http://firstcentre.com


66qu
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040226182043</emailId><senderName>"Oliver John"</senderName><senderEmail>szcgiejjbgv@yahoo.com</senderEmail><timestampReceived>2004-02-26 18:20:43-0400</timestampReceived><subject>Vaigrra from $139.95 2aS1</subject><body>



The most complete Phar macy Online
We carry all major medds at bargain price
Viggra, Ci ialis, VaIium, Xa naax
Phantermiine, Ulltraam and etc...
SatiisfactIon Gua ranteeed

http://openmoment.com


2nF

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040102005224</emailId><senderName>Dave Jones</senderName><senderEmail>davej@redhat.com</senderEmail><timestampReceived>2004-01-02 00:52:24-0400</timestampReceived><subject>Re: BUG: 2.6.0 non fatal recoverable errors crash gcc</subject><body>

On Fri, Jan 02, 2004 at 12:57:27AM +0100, Tommy Faasen wrote:

 &gt; I'm not subscribed to this newsgroup, but i'll try to read the follow-up 
 &gt; messages if any.
 &gt; 
 &gt; When my machine is doing big compiles like the kernel or mythtv , 
 &gt; gcc/g++ crashes.
 &gt; This happens after syslog tell me  that there is a recoverable error 
 &gt; (see output below).
 &gt; This happened several times but I don't know why and what I can do about 
 &gt; it ..
 &gt; The machine seems to be very stable, but it could be a hardware problem 
 &gt; i guess.

It is. MCE's are an early sign of hardware going flaky.
Inadequate power, poor cooling etc can also trigger them.

		Dave

-- 
 Dave Jones     http://www.codemonkey.org.uk
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040114050918</emailId><senderName>James Antill</senderName><senderEmail>james@and.org</senderEmail><timestampReceived>2004-01-14 05:09:18-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

Richard Henderson &lt;rth@twiddle.net&gt; writes:

&gt; On Fri, Jan 09, 2004 at 10:11:45AM +0500, Denis Zaitsev wrote:
&gt;&gt;     (r= a[0] - b[0]) &amp;&amp;
&gt;&gt;     (r= a[1] - b[1]) &amp;&amp;
&gt;&gt;     (r= a[2] - b[2]) &amp;&amp;
&gt;&gt;     (r= a[3] - b[3]);
&gt;&gt;     return r;
&gt;&gt; }
&gt;&gt;
&gt;&gt; never do that, as it's not asked to.  Or this kind of optimization is
&gt;&gt; assumed ok for compiler, but just still unimplemented?
&gt;
&gt; Certainly it's ok if it converts.
&gt;
&gt; However, on most targets you'd have to know that a and b are aligned.
&gt; Worse, even for targets like x86 that support unaligned loads you have
&gt; to know for certain that neither a[3] nor b[3] could possibly segv
&gt; when a[0] and b[0] won't.  That condition is trivial when a and b are
&gt; aligned, but otherwise...

 Fair enough, but...

extern int
s(const unsigned char a[static 4], const unsigned char b[static 4])
{
    int r;
    (r= a[0] - b[0]) &amp;&amp;
    (r= a[1] - b[1]) &amp;&amp;
    (r= a[2] - b[2]) &amp;&amp;
    (r= a[3] - b[3]);
    return r;
}

...produces the same code.

-- 
# James Antill -- james@and.org
:0:
* ^From: .*james@and\.org
/dev/null
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040114223004</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-01-14 22:30:04-0400</timestampReceived><subject>The Linux binutils 2.14.90.0.8 is released</subject><body>

This is the beta release of binutils 2.14.90.0.8 for Linux, which is
based on binutils 2004 0114 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.14.90.0.8 to hjl@lucon.org.

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.gz

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches.

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Precott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.14.90.0.8.tar.gz. Source code.
2. binutils-2.14.90.0.7-2.14.90.0.8.diff.gz. Patch against the
   previous beta source code.
3. binutils-2.14.90.0.8-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.14.90.0.8-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.14.90.0.8.tar.gz

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
01/14/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040121224326</emailId><senderName>"Angelita Sherwood"</senderName><senderEmail>m0lxtstych@ahottieiswhatiwant.com</senderEmail><timestampReceived>2004-01-21 22:43:26-0400</timestampReceived><subject>Adventure Awaits  Linux-admin</subject><body>

A mutual friend believes that you two belong together and has set up a
meeting.

Click here to accept the invitation:
http://ahottieiswhatiwant.com/confirm/?oc=53038883


The FREE dating web site CREATED BY WOMEN


Click here if you do not wish to be invited again:
http://ahottieiswhatiwant.com/remove/?oc=53035432

accustom

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040212202958</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-02-12 20:29:58-0400</timestampReceived><subject>GCC 3.3.2: Some bug in the preprocessor?</subject><body>

Look, this defun returns 0, and this is correct:

tst()
{
#if (unsigned)0 &gt; -1
    return 1;
#else
    return 0;
#endif
}

But this one returns 1, and this is incorrect:

tst()
{
#if 0 &gt; (unsigned)-1
    return 1;
#else
    return 0;
#endif
}

What's wrong?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040212203404</emailId><senderName>"Zack Weinberg"</senderName><senderEmail>zack@codesourcery.com</senderEmail><timestampReceived>2004-02-12 20:34:04-0400</timestampReceived><subject>Re: GCC 3.3.2: Some bug in the preprocessor?</subject><body>


You cannot use casts in #if.  Your conditionals are read as

#if (0)0 &gt; -1

which produces a syntax error;

#if 0 &gt; (0)-1

which evaluates as 0 &gt; 0 - 1 which is true.

zw
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214083207</emailId><senderName>"Timothy D. Witham"</senderName><senderEmail>wookie@osdl.org</senderEmail><timestampReceived>2004-02-14 08:32:07-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

 Just to point out that we (OSDL) already do this.

http://www.osdl.org/projects/26lnxstblztn/results/


  We are willing to add more but it is always willing
to look at adding more.

Tim

On Fri, 2004-02-13 at 12:57, Herbert Poetzl wrote:
&gt; Hi Folks!
&gt; 
&gt; I'm currently investigating the requirements/doability
&gt; of a kernel cross compiling test bed/setup, able to do
&gt; automated kernel builds for different architecture,
&gt; just to see if it compiles and later to verify if a 
&gt; given patch breaks that compile on any of the tested
&gt; archs ...
&gt; 
&gt; here a short status, and some issues I ran into so far,
&gt; some of them with solutions, others without, and some
&gt; interesting? observations ...
&gt; 
&gt; I would be happy if somebody who has done similar, or
&gt; knows how to do it properly ;) could comment on that,
&gt; and/or point out possible improvements ...
&gt; 
&gt; TIA,
&gt; Herbert
&gt; 
&gt; 
&gt; 1) CROSS COMPILER / TOOLCHAIN
&gt; 
&gt;    after reading and testing several cross build and
&gt;    toolchain building howtos, I decided to do it a little 
&gt;    different, because I do not need glibc to compile the 
&gt;    kernel ...
&gt; 
&gt;    the result are two .spec files[1], or the commands 
&gt;    used to build an appropriate toolchain ...
&gt;    
&gt;    for the binutils the required commands are:
&gt; 
&gt;    	configure  	    	    	    	    	\
&gt; 		--disable-nls                           \
&gt; 		--prefix=/usr                           \
&gt; 		--mandir=/usr/share/man                 \
&gt; 		--infodir=/usr/share/info               \
&gt; 		--target=${CROSS_ARCH}-linux
&gt;    	make
&gt;    
&gt;    and for the gcc (after the binutils have been
&gt;    installed on the host):
&gt; 
&gt;    	configure  	    	    	    	    	\
&gt; 		--enable-languages=c			\
&gt;         	--disable-nls                           \
&gt; 		--disable-threads			\
&gt; 		--disable-shared			\
&gt; 		--disable-checking			\
&gt;         	--prefix=/usr                           \
&gt;         	--mandir=/usr/share/man                 \
&gt;         	--infodir=/usr/share/info               \
&gt;         	--target=${CROSS_ARCH}-linux
&gt;    	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
&gt; 		-D__gthr_posix_h'
&gt;    
&gt;    where ${CROSS_ARCH} is the target architecture you want
&gt;    to compile the toochain for, in my case, this where one
&gt;    of the following:
&gt; 
&gt;    	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
&gt; 	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64
&gt; 
&gt;   PROBLEMS HERE:
&gt; 
&gt;    I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
&gt;    but soon discovered that gcc-3.3.2 will not be able 
&gt;    to build a cross compiler for some archs like the
&gt;    alpha, ia64, powerpc and even i386 ;) without some
&gt;    modifications[2] but with some help, I got all headers
&gt;    fixed, except for the ia64, which still doesn't work
&gt; 
&gt; 
&gt; 2) KERNEL CROSS COMPILING
&gt; 
&gt;    equipped with the cross compiling toolchains for all
&gt;    but one of the architectures mentioned above, I wrote
&gt;    a little script, which basically does nothing else 
&gt;    but compiling a given kernel for all possible archs.
&gt; 
&gt;    basically this can be accomplished by doing:
&gt; 
&gt; 	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-
&gt; 
&gt; 
&gt;    the first result was harrowing:
&gt; 
&gt; 				2.4.25-pre  2.6.2-rc
&gt;    ----------------------------------------------------
&gt; 	[ARCH alpha/alpha]      succeeded.  succeeded.
&gt; 	[ARCH hppa/parisc]      failed.     failed.
&gt; 	[ARCH hppa64/parisc]    failed.     failed.
&gt; 	[ARCH i386/i386]        succeeded.  succeeded.
&gt; 	[ARCH m68k/m68k]        failed.     failed.
&gt; 	[ARCH mips/mips]        failed.     failed.
&gt; 	[ARCH mips64/mips]      failed.     failed.
&gt; 	[ARCH ppc/ppc]          succeeded.  succeeded.
&gt; 	[ARCH ppc64/ppc64]      failed.     failed.
&gt; 	[ARCH s390/s390]        failed.     failed.
&gt; 	[ARCH sparc/sparc]      failed.     succeeded.
&gt; 	[ARCH sparc64/sparc]    failed.     failed.
&gt; 	[ARCH x86_64/x86_64]    failed.     succeeded.
&gt; 
&gt;    so only alpha, i386 and ppc did work on the first run.
&gt; 
&gt;    what I discovered was, that there IS a big difference
&gt;    between an empty .config file and a non exististing 
&gt;    one, where latter allowed the make oldconfig to work
&gt;    similar to the make defaultconfig available on 2.6,
&gt;    and added some archs (see [3] for details)
&gt; 
&gt;   PROBLEMS &amp; SOLUTIONS HERE:
&gt; 
&gt;    ppc64: 
&gt; 	CROSS32_COMPILE=ppc-linux-  
&gt; 	is needed to make this work as expected.
&gt; 
&gt;    hppa/hppa64: 
&gt; 	seems not to compile without using a very big
&gt; 	patch, which changes a lot inside the kernel
&gt; 
&gt;    mips/mips64:
&gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; 	which results in a cc1: error: invalid option 
&gt; 	`cpu=&lt;cpu-here&gt;'
&gt; 
&gt;    m68k:
&gt; 	fails with a hundred errors in the includes
&gt; 
&gt; 
&gt; 3) CONCLUSIONS
&gt; 
&gt;    it seems that recent kernels (2.4 and 2.6) do not support
&gt;    most of the architectures they contain without heavy
&gt;    patching (haven't tested for arm, sh3/4, ...)
&gt; 
&gt;    building cross compiler toolchains isn't that often done
&gt;    otherwise it would not require such modifications, and
&gt;    the documentation would be up to date ...
&gt; 
&gt;    it seems that with some minor patches and kernel tweaks
&gt;    an automated build is in reach, although some archs seem
&gt;    to break from one release to the other ...
&gt; 
&gt;    the non mainline branches, if they exist are some kernel
&gt;    versions behind the current mainstream kernel, which 
&gt;    might not mean anything ...
&gt; 
&gt; 
&gt; 4) LINKS &amp; REFERENCES
&gt; 
&gt;    [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
&gt; 	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec
&gt; 
&gt;    [2]  http://vserver.13thfloor.at/Stuff/Cross/
&gt; 		gcc-3.3.2-cross-alpha-fix.diff.bz2
&gt; 		gcc-3.3.2-cross-i386-fix.diff.bz2
&gt; 		gcc-3.3.2-cross-ia64-fix.diff.bz2
&gt; 		gcc-3.3.2-cross-powerpc-fix.diff.bz2
&gt; 
&gt;    [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info
&gt; 
&gt;    ia64:	http://www.gelato.unsw.edu.au/kerncomp/
&gt;    mips:	http://www.linux-mips.org/kernel.html
&gt;    hppa:	http://www.parisc-linux.org/kernel/index.html
&gt;    ppc64:	http://linuxppc64.org/
&gt;    	
&gt; 
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
-- 
Timothy D. Witham - Lab Director - wookie@osdl.org
Open Source Development Lab Inc - A non-profit corporation
12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
(503)-626-2455 x11 (office)    (503)-702-2871     (cell)
(503)-626-2436     (fax)

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214130322</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-14 13:03:22-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Sat, Feb 14, 2004 at 12:32:07AM -0800, Timothy D. Witham wrote:
&gt;  Just to point out that we (OSDL) already do this.
&gt; 
&gt; http://www.osdl.org/projects/26lnxstblztn/results/
&gt; 
&gt;   We are willing to add more but it is always willing
&gt; to look at adding more.

thanks, yes, I knew about that, but the thing is, I would
like to use this as automated test (well first step of
an automated test) for linux-vserver[1] development, and 
for that purpose i386/ia64 and ppc/ppc64 is a good start 
but not nearly sufficient, we currently 'support' (or at
least try to ;) the following archs:

  alpha, i386, ia64, mips/64, hppa/64, ppc/64
  sparc/64, s390/x, x86_64, uml

and got an officially assigned syscall number for 

  i386, s390, sparc/64, sh3/4, x86_64

but if you are interested in extending this and making
it available for linux-vserver kernel compile tests
too, I'm willing to help if I can ...

TIA,
Herbert

&gt; Tim
&gt; 
&gt; On Fri, 2004-02-13 at 12:57, Herbert Poetzl wrote:
&gt; &gt; Hi Folks!
&gt; &gt; 
&gt; &gt; I'm currently investigating the requirements/doability
&gt; &gt; of a kernel cross compiling test bed/setup, able to do
&gt; &gt; automated kernel builds for different architecture,
&gt; &gt; just to see if it compiles and later to verify if a 
&gt; &gt; given patch breaks that compile on any of the tested
&gt; &gt; archs ...
&gt; &gt; 
&gt; &gt; here a short status, and some issues I ran into so far,
&gt; &gt; some of them with solutions, others without, and some
&gt; &gt; interesting? observations ...
&gt; &gt; 
&gt; &gt; I would be happy if somebody who has done similar, or
&gt; &gt; knows how to do it properly ;) could comment on that,
&gt; &gt; and/or point out possible improvements ...
&gt; &gt; 
&gt; &gt; TIA,
&gt; &gt; Herbert
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 1) CROSS COMPILER / TOOLCHAIN
&gt; &gt; 
&gt; &gt;    after reading and testing several cross build and
&gt; &gt;    toolchain building howtos, I decided to do it a little 
&gt; &gt;    different, because I do not need glibc to compile the 
&gt; &gt;    kernel ...
&gt; &gt; 
&gt; &gt;    the result are two .spec files[1], or the commands 
&gt; &gt;    used to build an appropriate toolchain ...
&gt; &gt;    
&gt; &gt;    for the binutils the required commands are:
&gt; &gt; 
&gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; 		--disable-nls                           \
&gt; &gt; 		--prefix=/usr                           \
&gt; &gt; 		--mandir=/usr/share/man                 \
&gt; &gt; 		--infodir=/usr/share/info               \
&gt; &gt; 		--target=${CROSS_ARCH}-linux
&gt; &gt;    	make
&gt; &gt;    
&gt; &gt;    and for the gcc (after the binutils have been
&gt; &gt;    installed on the host):
&gt; &gt; 
&gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; 		--enable-languages=c			\
&gt; &gt;         	--disable-nls                           \
&gt; &gt; 		--disable-threads			\
&gt; &gt; 		--disable-shared			\
&gt; &gt; 		--disable-checking			\
&gt; &gt;         	--prefix=/usr                           \
&gt; &gt;         	--mandir=/usr/share/man                 \
&gt; &gt;         	--infodir=/usr/share/info               \
&gt; &gt;         	--target=${CROSS_ARCH}-linux
&gt; &gt;    	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
&gt; &gt; 		-D__gthr_posix_h'
&gt; &gt;    
&gt; &gt;    where ${CROSS_ARCH} is the target architecture you want
&gt; &gt;    to compile the toochain for, in my case, this where one
&gt; &gt;    of the following:
&gt; &gt; 
&gt; &gt;    	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
&gt; &gt; 	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64
&gt; &gt; 
&gt; &gt;   PROBLEMS HERE:
&gt; &gt; 
&gt; &gt;    I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
&gt; &gt;    but soon discovered that gcc-3.3.2 will not be able 
&gt; &gt;    to build a cross compiler for some archs like the
&gt; &gt;    alpha, ia64, powerpc and even i386 ;) without some
&gt; &gt;    modifications[2] but with some help, I got all headers
&gt; &gt;    fixed, except for the ia64, which still doesn't work
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 2) KERNEL CROSS COMPILING
&gt; &gt; 
&gt; &gt;    equipped with the cross compiling toolchains for all
&gt; &gt;    but one of the architectures mentioned above, I wrote
&gt; &gt;    a little script, which basically does nothing else 
&gt; &gt;    but compiling a given kernel for all possible archs.
&gt; &gt; 
&gt; &gt;    basically this can be accomplished by doing:
&gt; &gt; 
&gt; &gt; 	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-
&gt; &gt; 
&gt; &gt; 
&gt; &gt;    the first result was harrowing:
&gt; &gt; 
&gt; &gt; 				2.4.25-pre  2.6.2-rc
&gt; &gt;    ----------------------------------------------------
&gt; &gt; 	[ARCH alpha/alpha]      succeeded.  succeeded.
&gt; &gt; 	[ARCH hppa/parisc]      failed.     failed.
&gt; &gt; 	[ARCH hppa64/parisc]    failed.     failed.
&gt; &gt; 	[ARCH i386/i386]        succeeded.  succeeded.
&gt; &gt; 	[ARCH m68k/m68k]        failed.     failed.
&gt; &gt; 	[ARCH mips/mips]        failed.     failed.
&gt; &gt; 	[ARCH mips64/mips]      failed.     failed.
&gt; &gt; 	[ARCH ppc/ppc]          succeeded.  succeeded.
&gt; &gt; 	[ARCH ppc64/ppc64]      failed.     failed.
&gt; &gt; 	[ARCH s390/s390]        failed.     failed.
&gt; &gt; 	[ARCH sparc/sparc]      failed.     succeeded.
&gt; &gt; 	[ARCH sparc64/sparc]    failed.     failed.
&gt; &gt; 	[ARCH x86_64/x86_64]    failed.     succeeded.
&gt; &gt; 
&gt; &gt;    so only alpha, i386 and ppc did work on the first run.
&gt; &gt; 
&gt; &gt;    what I discovered was, that there IS a big difference
&gt; &gt;    between an empty .config file and a non exististing 
&gt; &gt;    one, where latter allowed the make oldconfig to work
&gt; &gt;    similar to the make defaultconfig available on 2.6,
&gt; &gt;    and added some archs (see [3] for details)
&gt; &gt; 
&gt; &gt;   PROBLEMS &amp; SOLUTIONS HERE:
&gt; &gt; 
&gt; &gt;    ppc64: 
&gt; &gt; 	CROSS32_COMPILE=ppc-linux-  
&gt; &gt; 	is needed to make this work as expected.
&gt; &gt; 
&gt; &gt;    hppa/hppa64: 
&gt; &gt; 	seems not to compile without using a very big
&gt; &gt; 	patch, which changes a lot inside the kernel
&gt; &gt; 
&gt; &gt;    mips/mips64:
&gt; &gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; &gt; 	which results in a cc1: error: invalid option 
&gt; &gt; 	`cpu=&lt;cpu-here&gt;'
&gt; &gt; 
&gt; &gt;    m68k:
&gt; &gt; 	fails with a hundred errors in the includes
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 3) CONCLUSIONS
&gt; &gt; 
&gt; &gt;    it seems that recent kernels (2.4 and 2.6) do not support
&gt; &gt;    most of the architectures they contain without heavy
&gt; &gt;    patching (haven't tested for arm, sh3/4, ...)
&gt; &gt; 
&gt; &gt;    building cross compiler toolchains isn't that often done
&gt; &gt;    otherwise it would not require such modifications, and
&gt; &gt;    the documentation would be up to date ...
&gt; &gt; 
&gt; &gt;    it seems that with some minor patches and kernel tweaks
&gt; &gt;    an automated build is in reach, although some archs seem
&gt; &gt;    to break from one release to the other ...
&gt; &gt; 
&gt; &gt;    the non mainline branches, if they exist are some kernel
&gt; &gt;    versions behind the current mainstream kernel, which 
&gt; &gt;    might not mean anything ...
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 4) LINKS &amp; REFERENCES
&gt; &gt; 
&gt; &gt;    [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
&gt; &gt; 	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec
&gt; &gt; 
&gt; &gt;    [2]  http://vserver.13thfloor.at/Stuff/Cross/
&gt; &gt; 		gcc-3.3.2-cross-alpha-fix.diff.bz2
&gt; &gt; 		gcc-3.3.2-cross-i386-fix.diff.bz2
&gt; &gt; 		gcc-3.3.2-cross-ia64-fix.diff.bz2
&gt; &gt; 		gcc-3.3.2-cross-powerpc-fix.diff.bz2
&gt; &gt; 
&gt; &gt;    [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info
&gt; &gt; 
&gt; &gt;    ia64:	http://www.gelato.unsw.edu.au/kerncomp/
&gt; &gt;    mips:	http://www.linux-mips.org/kernel.html
&gt; &gt;    hppa:	http://www.parisc-linux.org/kernel/index.html
&gt; &gt;    ppc64:	http://linuxppc64.org/
&gt; &gt;    	
&gt; &gt; 
&gt; &gt; -
&gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; -- 
&gt; Timothy D. Witham - Lab Director - wookie@osdl.org
&gt; Open Source Development Lab Inc - A non-profit corporation
&gt; 12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
&gt; (503)-626-2455 x11 (office)    (503)-702-2871     (cell)
&gt; (503)-626-2436     (fax)
&gt; 
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214192541</emailId><senderName>"Timothy D. Witham"</senderName><senderEmail>wookie@osdl.org</senderEmail><timestampReceived>2004-02-14 19:25:41-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

  Well it seems to me it makes more sense to extend rather
than start over.

Tim

On Sat, 2004-02-14 at 05:03, Herbert Poetzl wrote:
&gt; On Sat, Feb 14, 2004 at 12:32:07AM -0800, Timothy D. Witham wrote:
&gt; &gt;  Just to point out that we (OSDL) already do this.
&gt; &gt; 
&gt; &gt; http://www.osdl.org/projects/26lnxstblztn/results/
&gt; &gt; 
&gt; &gt;   We are willing to add more but it is always willing
&gt; &gt; to look at adding more.
&gt; 
&gt; thanks, yes, I knew about that, but the thing is, I would
&gt; like to use this as automated test (well first step of
&gt; an automated test) for linux-vserver[1] development, and 
&gt; for that purpose i386/ia64 and ppc/ppc64 is a good start 
&gt; but not nearly sufficient, we currently 'support' (or at
&gt; least try to ;) the following archs:
&gt; 
&gt;   alpha, i386, ia64, mips/64, hppa/64, ppc/64
&gt;   sparc/64, s390/x, x86_64, uml
&gt; 
&gt; and got an officially assigned syscall number for 
&gt; 
&gt;   i386, s390, sparc/64, sh3/4, x86_64
&gt; 
&gt; but if you are interested in extending this and making
&gt; it available for linux-vserver kernel compile tests
&gt; too, I'm willing to help if I can ...
&gt; 
&gt; TIA,
&gt; Herbert
&gt; 
&gt; &gt; Tim
&gt; &gt; 
&gt; &gt; On Fri, 2004-02-13 at 12:57, Herbert Poetzl wrote:
&gt; &gt; &gt; Hi Folks!
&gt; &gt; &gt; 
&gt; &gt; &gt; I'm currently investigating the requirements/doability
&gt; &gt; &gt; of a kernel cross compiling test bed/setup, able to do
&gt; &gt; &gt; automated kernel builds for different architecture,
&gt; &gt; &gt; just to see if it compiles and later to verify if a 
&gt; &gt; &gt; given patch breaks that compile on any of the tested
&gt; &gt; &gt; archs ...
&gt; &gt; &gt; 
&gt; &gt; &gt; here a short status, and some issues I ran into so far,
&gt; &gt; &gt; some of them with solutions, others without, and some
&gt; &gt; &gt; interesting? observations ...
&gt; &gt; &gt; 
&gt; &gt; &gt; I would be happy if somebody who has done similar, or
&gt; &gt; &gt; knows how to do it properly ;) could comment on that,
&gt; &gt; &gt; and/or point out possible improvements ...
&gt; &gt; &gt; 
&gt; &gt; &gt; TIA,
&gt; &gt; &gt; Herbert
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 1) CROSS COMPILER / TOOLCHAIN
&gt; &gt; &gt; 
&gt; &gt; &gt;    after reading and testing several cross build and
&gt; &gt; &gt;    toolchain building howtos, I decided to do it a little 
&gt; &gt; &gt;    different, because I do not need glibc to compile the 
&gt; &gt; &gt;    kernel ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    the result are two .spec files[1], or the commands 
&gt; &gt; &gt;    used to build an appropriate toolchain ...
&gt; &gt; &gt;    
&gt; &gt; &gt;    for the binutils the required commands are:
&gt; &gt; &gt; 
&gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; 		--disable-nls                           \
&gt; &gt; &gt; 		--prefix=/usr                           \
&gt; &gt; &gt; 		--mandir=/usr/share/man                 \
&gt; &gt; &gt; 		--infodir=/usr/share/info               \
&gt; &gt; &gt; 		--target=${CROSS_ARCH}-linux
&gt; &gt; &gt;    	make
&gt; &gt; &gt;    
&gt; &gt; &gt;    and for the gcc (after the binutils have been
&gt; &gt; &gt;    installed on the host):
&gt; &gt; &gt; 
&gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; 		--enable-languages=c			\
&gt; &gt; &gt;         	--disable-nls                           \
&gt; &gt; &gt; 		--disable-threads			\
&gt; &gt; &gt; 		--disable-shared			\
&gt; &gt; &gt; 		--disable-checking			\
&gt; &gt; &gt;         	--prefix=/usr                           \
&gt; &gt; &gt;         	--mandir=/usr/share/man                 \
&gt; &gt; &gt;         	--infodir=/usr/share/info               \
&gt; &gt; &gt;         	--target=${CROSS_ARCH}-linux
&gt; &gt; &gt;    	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
&gt; &gt; &gt; 		-D__gthr_posix_h'
&gt; &gt; &gt;    
&gt; &gt; &gt;    where ${CROSS_ARCH} is the target architecture you want
&gt; &gt; &gt;    to compile the toochain for, in my case, this where one
&gt; &gt; &gt;    of the following:
&gt; &gt; &gt; 
&gt; &gt; &gt;    	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
&gt; &gt; &gt; 	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64
&gt; &gt; &gt; 
&gt; &gt; &gt;   PROBLEMS HERE:
&gt; &gt; &gt; 
&gt; &gt; &gt;    I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
&gt; &gt; &gt;    but soon discovered that gcc-3.3.2 will not be able 
&gt; &gt; &gt;    to build a cross compiler for some archs like the
&gt; &gt; &gt;    alpha, ia64, powerpc and even i386 ;) without some
&gt; &gt; &gt;    modifications[2] but with some help, I got all headers
&gt; &gt; &gt;    fixed, except for the ia64, which still doesn't work
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 2) KERNEL CROSS COMPILING
&gt; &gt; &gt; 
&gt; &gt; &gt;    equipped with the cross compiling toolchains for all
&gt; &gt; &gt;    but one of the architectures mentioned above, I wrote
&gt; &gt; &gt;    a little script, which basically does nothing else 
&gt; &gt; &gt;    but compiling a given kernel for all possible archs.
&gt; &gt; &gt; 
&gt; &gt; &gt;    basically this can be accomplished by doing:
&gt; &gt; &gt; 
&gt; &gt; &gt; 	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt;    the first result was harrowing:
&gt; &gt; &gt; 
&gt; &gt; &gt; 				2.4.25-pre  2.6.2-rc
&gt; &gt; &gt;    ----------------------------------------------------
&gt; &gt; &gt; 	[ARCH alpha/alpha]      succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH hppa/parisc]      failed.     failed.
&gt; &gt; &gt; 	[ARCH hppa64/parisc]    failed.     failed.
&gt; &gt; &gt; 	[ARCH i386/i386]        succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH m68k/m68k]        failed.     failed.
&gt; &gt; &gt; 	[ARCH mips/mips]        failed.     failed.
&gt; &gt; &gt; 	[ARCH mips64/mips]      failed.     failed.
&gt; &gt; &gt; 	[ARCH ppc/ppc]          succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH ppc64/ppc64]      failed.     failed.
&gt; &gt; &gt; 	[ARCH s390/s390]        failed.     failed.
&gt; &gt; &gt; 	[ARCH sparc/sparc]      failed.     succeeded.
&gt; &gt; &gt; 	[ARCH sparc64/sparc]    failed.     failed.
&gt; &gt; &gt; 	[ARCH x86_64/x86_64]    failed.     succeeded.
&gt; &gt; &gt; 
&gt; &gt; &gt;    so only alpha, i386 and ppc did work on the first run.
&gt; &gt; &gt; 
&gt; &gt; &gt;    what I discovered was, that there IS a big difference
&gt; &gt; &gt;    between an empty .config file and a non exististing 
&gt; &gt; &gt;    one, where latter allowed the make oldconfig to work
&gt; &gt; &gt;    similar to the make defaultconfig available on 2.6,
&gt; &gt; &gt;    and added some archs (see [3] for details)
&gt; &gt; &gt; 
&gt; &gt; &gt;   PROBLEMS &amp; SOLUTIONS HERE:
&gt; &gt; &gt; 
&gt; &gt; &gt;    ppc64: 
&gt; &gt; &gt; 	CROSS32_COMPILE=ppc-linux-  
&gt; &gt; &gt; 	is needed to make this work as expected.
&gt; &gt; &gt; 
&gt; &gt; &gt;    hppa/hppa64: 
&gt; &gt; &gt; 	seems not to compile without using a very big
&gt; &gt; &gt; 	patch, which changes a lot inside the kernel
&gt; &gt; &gt; 
&gt; &gt; &gt;    mips/mips64:
&gt; &gt; &gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; &gt; &gt; 	which results in a cc1: error: invalid option 
&gt; &gt; &gt; 	`cpu=&lt;cpu-here&gt;'
&gt; &gt; &gt; 
&gt; &gt; &gt;    m68k:
&gt; &gt; &gt; 	fails with a hundred errors in the includes
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 3) CONCLUSIONS
&gt; &gt; &gt; 
&gt; &gt; &gt;    it seems that recent kernels (2.4 and 2.6) do not support
&gt; &gt; &gt;    most of the architectures they contain without heavy
&gt; &gt; &gt;    patching (haven't tested for arm, sh3/4, ...)
&gt; &gt; &gt; 
&gt; &gt; &gt;    building cross compiler toolchains isn't that often done
&gt; &gt; &gt;    otherwise it would not require such modifications, and
&gt; &gt; &gt;    the documentation would be up to date ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    it seems that with some minor patches and kernel tweaks
&gt; &gt; &gt;    an automated build is in reach, although some archs seem
&gt; &gt; &gt;    to break from one release to the other ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    the non mainline branches, if they exist are some kernel
&gt; &gt; &gt;    versions behind the current mainstream kernel, which 
&gt; &gt; &gt;    might not mean anything ...
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 4) LINKS &amp; REFERENCES
&gt; &gt; &gt; 
&gt; &gt; &gt;    [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
&gt; &gt; &gt; 	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec
&gt; &gt; &gt; 
&gt; &gt; &gt;    [2]  http://vserver.13thfloor.at/Stuff/Cross/
&gt; &gt; &gt; 		gcc-3.3.2-cross-alpha-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-i386-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-ia64-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-powerpc-fix.diff.bz2
&gt; &gt; &gt; 
&gt; &gt; &gt;    [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info
&gt; &gt; &gt; 
&gt; &gt; &gt;    ia64:	http://www.gelato.unsw.edu.au/kerncomp/
&gt; &gt; &gt;    mips:	http://www.linux-mips.org/kernel.html
&gt; &gt; &gt;    hppa:	http://www.parisc-linux.org/kernel/index.html
&gt; &gt; &gt;    ppc64:	http://linuxppc64.org/
&gt; &gt; &gt;    	
&gt; &gt; &gt; 
&gt; &gt; &gt; -
&gt; &gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; &gt; -- 
&gt; &gt; Timothy D. Witham - Lab Director - wookie@osdl.org
&gt; &gt; Open Source Development Lab Inc - A non-profit corporation
&gt; &gt; 12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
&gt; &gt; (503)-626-2455 x11 (office)    (503)-702-2871     (cell)
&gt; &gt; (503)-626-2436     (fax)
&gt; &gt; 
&gt; &gt; -
&gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
-- 
Timothy D. Witham - Lab Director - wookie@osdl.org
Open Source Development Lab Inc - A non-profit corporation
12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
(503)-626-2455 x11 (office)    (503)-702-2871     (cell)
(503)-626-2436     (fax)

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214220846</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-14 22:08:46-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Sat, Feb 14, 2004 at 11:25:41AM -0800, Timothy D. Witham wrote:
&gt;   Well it seems to me it makes more sense to extend rather
&gt; than start over.

okay, what do you have in mind, how _can_ we extend
that and _how_ could I _use_ that for linux-vserver?

TIA,
Herbert

&gt; Tim
&gt; 
&gt; On Sat, 2004-02-14 at 05:03, Herbert Poetzl wrote:
&gt; &gt; On Sat, Feb 14, 2004 at 12:32:07AM -0800, Timothy D. Witham wrote:
&gt; &gt; &gt;  Just to point out that we (OSDL) already do this.
&gt; &gt; &gt; 
&gt; &gt; &gt; http://www.osdl.org/projects/26lnxstblztn/results/
&gt; &gt; &gt; 
&gt; &gt; &gt;   We are willing to add more but it is always willing
&gt; &gt; &gt; to look at adding more.
&gt; &gt; 
&gt; &gt; thanks, yes, I knew about that, but the thing is, I would
&gt; &gt; like to use this as automated test (well first step of
&gt; &gt; an automated test) for linux-vserver[1] development, and 
&gt; &gt; for that purpose i386/ia64 and ppc/ppc64 is a good start 
&gt; &gt; but not nearly sufficient, we currently 'support' (or at
&gt; &gt; least try to ;) the following archs:
&gt; &gt; 
&gt; &gt;   alpha, i386, ia64, mips/64, hppa/64, ppc/64
&gt; &gt;   sparc/64, s390/x, x86_64, uml
&gt; &gt; 
&gt; &gt; and got an officially assigned syscall number for 
&gt; &gt; 
&gt; &gt;   i386, s390, sparc/64, sh3/4, x86_64
&gt; &gt; 
&gt; &gt; but if you are interested in extending this and making
&gt; &gt; it available for linux-vserver kernel compile tests
&gt; &gt; too, I'm willing to help if I can ...
&gt; &gt; 
&gt; &gt; TIA,
&gt; &gt; Herbert
&gt; &gt; 
&gt; &gt; &gt; Tim
&gt; &gt; &gt; 
&gt; &gt; &gt; On Fri, 2004-02-13 at 12:57, Herbert Poetzl wrote:
&gt; &gt; &gt; &gt; Hi Folks!
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I'm currently investigating the requirements/doability
&gt; &gt; &gt; &gt; of a kernel cross compiling test bed/setup, able to do
&gt; &gt; &gt; &gt; automated kernel builds for different architecture,
&gt; &gt; &gt; &gt; just to see if it compiles and later to verify if a 
&gt; &gt; &gt; &gt; given patch breaks that compile on any of the tested
&gt; &gt; &gt; &gt; archs ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; here a short status, and some issues I ran into so far,
&gt; &gt; &gt; &gt; some of them with solutions, others without, and some
&gt; &gt; &gt; &gt; interesting? observations ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I would be happy if somebody who has done similar, or
&gt; &gt; &gt; &gt; knows how to do it properly ;) could comment on that,
&gt; &gt; &gt; &gt; and/or point out possible improvements ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; TIA,
&gt; &gt; &gt; &gt; Herbert
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 1) CROSS COMPILER / TOOLCHAIN
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    after reading and testing several cross build and
&gt; &gt; &gt; &gt;    toolchain building howtos, I decided to do it a little 
&gt; &gt; &gt; &gt;    different, because I do not need glibc to compile the 
&gt; &gt; &gt; &gt;    kernel ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    the result are two .spec files[1], or the commands 
&gt; &gt; &gt; &gt;    used to build an appropriate toolchain ...
&gt; &gt; &gt; &gt;    
&gt; &gt; &gt; &gt;    for the binutils the required commands are:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; &gt; 		--disable-nls                           \
&gt; &gt; &gt; &gt; 		--prefix=/usr                           \
&gt; &gt; &gt; &gt; 		--mandir=/usr/share/man                 \
&gt; &gt; &gt; &gt; 		--infodir=/usr/share/info               \
&gt; &gt; &gt; &gt; 		--target=${CROSS_ARCH}-linux
&gt; &gt; &gt; &gt;    	make
&gt; &gt; &gt; &gt;    
&gt; &gt; &gt; &gt;    and for the gcc (after the binutils have been
&gt; &gt; &gt; &gt;    installed on the host):
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; &gt; 		--enable-languages=c			\
&gt; &gt; &gt; &gt;         	--disable-nls                           \
&gt; &gt; &gt; &gt; 		--disable-threads			\
&gt; &gt; &gt; &gt; 		--disable-shared			\
&gt; &gt; &gt; &gt; 		--disable-checking			\
&gt; &gt; &gt; &gt;         	--prefix=/usr                           \
&gt; &gt; &gt; &gt;         	--mandir=/usr/share/man                 \
&gt; &gt; &gt; &gt;         	--infodir=/usr/share/info               \
&gt; &gt; &gt; &gt;         	--target=${CROSS_ARCH}-linux
&gt; &gt; &gt; &gt;    	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
&gt; &gt; &gt; &gt; 		-D__gthr_posix_h'
&gt; &gt; &gt; &gt;    
&gt; &gt; &gt; &gt;    where ${CROSS_ARCH} is the target architecture you want
&gt; &gt; &gt; &gt;    to compile the toochain for, in my case, this where one
&gt; &gt; &gt; &gt;    of the following:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
&gt; &gt; &gt; &gt; 	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;   PROBLEMS HERE:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
&gt; &gt; &gt; &gt;    but soon discovered that gcc-3.3.2 will not be able 
&gt; &gt; &gt; &gt;    to build a cross compiler for some archs like the
&gt; &gt; &gt; &gt;    alpha, ia64, powerpc and even i386 ;) without some
&gt; &gt; &gt; &gt;    modifications[2] but with some help, I got all headers
&gt; &gt; &gt; &gt;    fixed, except for the ia64, which still doesn't work
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 2) KERNEL CROSS COMPILING
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    equipped with the cross compiling toolchains for all
&gt; &gt; &gt; &gt;    but one of the architectures mentioned above, I wrote
&gt; &gt; &gt; &gt;    a little script, which basically does nothing else 
&gt; &gt; &gt; &gt;    but compiling a given kernel for all possible archs.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    basically this can be accomplished by doing:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    the first result was harrowing:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 				2.4.25-pre  2.6.2-rc
&gt; &gt; &gt; &gt;    ----------------------------------------------------
&gt; &gt; &gt; &gt; 	[ARCH alpha/alpha]      succeeded.  succeeded.
&gt; &gt; &gt; &gt; 	[ARCH hppa/parisc]      failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH hppa64/parisc]    failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH i386/i386]        succeeded.  succeeded.
&gt; &gt; &gt; &gt; 	[ARCH m68k/m68k]        failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH mips/mips]        failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH mips64/mips]      failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH ppc/ppc]          succeeded.  succeeded.
&gt; &gt; &gt; &gt; 	[ARCH ppc64/ppc64]      failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH s390/s390]        failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH sparc/sparc]      failed.     succeeded.
&gt; &gt; &gt; &gt; 	[ARCH sparc64/sparc]    failed.     failed.
&gt; &gt; &gt; &gt; 	[ARCH x86_64/x86_64]    failed.     succeeded.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    so only alpha, i386 and ppc did work on the first run.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    what I discovered was, that there IS a big difference
&gt; &gt; &gt; &gt;    between an empty .config file and a non exististing 
&gt; &gt; &gt; &gt;    one, where latter allowed the make oldconfig to work
&gt; &gt; &gt; &gt;    similar to the make defaultconfig available on 2.6,
&gt; &gt; &gt; &gt;    and added some archs (see [3] for details)
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;   PROBLEMS &amp; SOLUTIONS HERE:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    ppc64: 
&gt; &gt; &gt; &gt; 	CROSS32_COMPILE=ppc-linux-  
&gt; &gt; &gt; &gt; 	is needed to make this work as expected.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    hppa/hppa64: 
&gt; &gt; &gt; &gt; 	seems not to compile without using a very big
&gt; &gt; &gt; &gt; 	patch, which changes a lot inside the kernel
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    mips/mips64:
&gt; &gt; &gt; &gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; &gt; &gt; &gt; 	which results in a cc1: error: invalid option 
&gt; &gt; &gt; &gt; 	`cpu=&lt;cpu-here&gt;'
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    m68k:
&gt; &gt; &gt; &gt; 	fails with a hundred errors in the includes
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 3) CONCLUSIONS
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    it seems that recent kernels (2.4 and 2.6) do not support
&gt; &gt; &gt; &gt;    most of the architectures they contain without heavy
&gt; &gt; &gt; &gt;    patching (haven't tested for arm, sh3/4, ...)
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    building cross compiler toolchains isn't that often done
&gt; &gt; &gt; &gt;    otherwise it would not require such modifications, and
&gt; &gt; &gt; &gt;    the documentation would be up to date ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    it seems that with some minor patches and kernel tweaks
&gt; &gt; &gt; &gt;    an automated build is in reach, although some archs seem
&gt; &gt; &gt; &gt;    to break from one release to the other ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    the non mainline branches, if they exist are some kernel
&gt; &gt; &gt; &gt;    versions behind the current mainstream kernel, which 
&gt; &gt; &gt; &gt;    might not mean anything ...
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; 4) LINKS &amp; REFERENCES
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
&gt; &gt; &gt; &gt; 	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    [2]  http://vserver.13thfloor.at/Stuff/Cross/
&gt; &gt; &gt; &gt; 		gcc-3.3.2-cross-alpha-fix.diff.bz2
&gt; &gt; &gt; &gt; 		gcc-3.3.2-cross-i386-fix.diff.bz2
&gt; &gt; &gt; &gt; 		gcc-3.3.2-cross-ia64-fix.diff.bz2
&gt; &gt; &gt; &gt; 		gcc-3.3.2-cross-powerpc-fix.diff.bz2
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;    ia64:	http://www.gelato.unsw.edu.au/kerncomp/
&gt; &gt; &gt; &gt;    mips:	http://www.linux-mips.org/kernel.html
&gt; &gt; &gt; &gt;    hppa:	http://www.parisc-linux.org/kernel/index.html
&gt; &gt; &gt; &gt;    ppc64:	http://linuxppc64.org/
&gt; &gt; &gt; &gt;    	
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; -
&gt; &gt; &gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; &gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; &gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; &gt; &gt; -- 
&gt; &gt; &gt; Timothy D. Witham - Lab Director - wookie@osdl.org
&gt; &gt; &gt; Open Source Development Lab Inc - A non-profit corporation
&gt; &gt; &gt; 12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
&gt; &gt; &gt; (503)-626-2455 x11 (office)    (503)-702-2871     (cell)
&gt; &gt; &gt; (503)-626-2436     (fax)
&gt; &gt; &gt; 
&gt; &gt; &gt; -
&gt; &gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; -- 
&gt; Timothy D. Witham - Lab Director - wookie@osdl.org
&gt; Open Source Development Lab Inc - A non-profit corporation
&gt; 12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
&gt; (503)-626-2455 x11 (office)    (503)-702-2871     (cell)
&gt; (503)-626-2436     (fax)
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040216000313</emailId><senderName>Peter Chubb</senderName><senderEmail>peter@chubb.wattle.id.au</senderEmail><timestampReceived>2004-02-16 00:03:13-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

&gt;&gt;&gt;&gt;&gt; "David" == David Mosberger &lt;davidm@napali.hpl.hp.com&gt; writes:

&gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 21:57:43 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:
Herbert&gt; I got all headers fixed, except for the ia64, which still
Herbert&gt; doesn't work

David&gt; Something sounds wrong here. You shouldn't have to patch
David&gt; headers.

David&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can
David&gt; be found here:

David&gt;  http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation

He's trying to use gcc 3.3.2 which isn't packaged in toolchain-source
yet.  And he's running on a RedHat-like system.

And there's currently a problem:  To build gcc you need access to an
appropriate libc6 header package; dpkg-cross refuses to install one
without linux-kernel-headers-cross-ia64; but will also not install
linux-kernel-headers.  You need the patch at
http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=222168

Peter C
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040216214120</emailId><senderName>cliff white</senderName><senderEmail>cliffw@osdl.org</senderEmail><timestampReceived>2004-02-16 21:41:20-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Sat, 14 Feb 2004 14:03:22 +0100
Herbert Poetzl &lt;herbert@13thfloor.at&gt; wrote:

&gt; On Sat, Feb 14, 2004 at 12:32:07AM -0800, Timothy D. Witham wrote:
&gt; &gt;  Just to point out that we (OSDL) already do this.
&gt; &gt; 
&gt; &gt; http://www.osdl.org/projects/26lnxstblztn/results/
&gt; &gt; 
&gt; &gt;   We are willing to add more but it is always willing
&gt; &gt; to look at adding more.
&gt; 
&gt; thanks, yes, I knew about that, but the thing is, I would
&gt; like to use this as automated test (well first step of
&gt; an automated test) for linux-vserver[1] development, and 
&gt; for that purpose i386/ia64 and ppc/ppc64 is a good start 
&gt; but not nearly sufficient, we currently 'support' (or at
&gt; least try to ;) the following archs:
&gt; 
&gt;   alpha, i386, ia64, mips/64, hppa/64, ppc/64
&gt;   sparc/64, s390/x, x86_64, uml
&gt; 
&gt; and got an officially assigned syscall number for 
&gt; 
&gt;   i386, s390, sparc/64, sh3/4, x86_64
&gt; 
&gt; but if you are interested in extending this and making
&gt; it available for linux-vserver kernel compile tests
&gt; too, I'm willing to help if I can ...

We're always grateful for help. Our build engine is called
the Patch Lifecycle Manager, ( http://www.osdl.org/plm-cgi/plm )
and the code is always available either from BK 
( bk://developer.osdl.org/plm ) or as a tarball from Sourceforge
( not CVS ) ( http://sourceforge.net/projects/plm )

Basically, the farm here at OSDL auto-builds 
- each release
- a daily BK snapshot ( from kernel.org ) 
- each new tree from a few maintainers ( -mm, -ac, -mjb, -osdl ) 

We do some cross compiles, using Dan Kegel's fine tools. 

Several things you/we could do:
- You could of course use our stuff to run your compilie farm, we're
	always glad to help. :)
- we always need help with the project. Mailing list is plm-devel@lists.sourceforge.net.
- we're planning on expanding the number of arch's we cross-compile for,
	x86_64 and ppc64 are the next two probable targets. We probably
	wouldn't want to add a lot of other archs doing large compiles,
	but if you have a simple target, we can add quite a few.
	( we noticed you are doing a defconfig. We've done separate config files for those
		builds, to reduce time ) 

hope to hear from you
cliffw

	
&gt; 
&gt; TIA,
&gt; Herbert
&gt; 
&gt; &gt; Tim
&gt; &gt; 
&gt; &gt; On Fri, 2004-02-13 at 12:57, Herbert Poetzl wrote:
&gt; &gt; &gt; Hi Folks!
&gt; &gt; &gt; 
&gt; &gt; &gt; I'm currently investigating the requirements/doability
&gt; &gt; &gt; of a kernel cross compiling test bed/setup, able to do
&gt; &gt; &gt; automated kernel builds for different architecture,
&gt; &gt; &gt; just to see if it compiles and later to verify if a 
&gt; &gt; &gt; given patch breaks that compile on any of the tested
&gt; &gt; &gt; archs ...
&gt; &gt; &gt; 
&gt; &gt; &gt; here a short status, and some issues I ran into so far,
&gt; &gt; &gt; some of them with solutions, others without, and some
&gt; &gt; &gt; interesting? observations ...
&gt; &gt; &gt; 
&gt; &gt; &gt; I would be happy if somebody who has done similar, or
&gt; &gt; &gt; knows how to do it properly ;) could comment on that,
&gt; &gt; &gt; and/or point out possible improvements ...
&gt; &gt; &gt; 
&gt; &gt; &gt; TIA,
&gt; &gt; &gt; Herbert
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 1) CROSS COMPILER / TOOLCHAIN
&gt; &gt; &gt; 
&gt; &gt; &gt;    after reading and testing several cross build and
&gt; &gt; &gt;    toolchain building howtos, I decided to do it a little 
&gt; &gt; &gt;    different, because I do not need glibc to compile the 
&gt; &gt; &gt;    kernel ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    the result are two .spec files[1], or the commands 
&gt; &gt; &gt;    used to build an appropriate toolchain ...
&gt; &gt; &gt;    
&gt; &gt; &gt;    for the binutils the required commands are:
&gt; &gt; &gt; 
&gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; 		--disable-nls                           \
&gt; &gt; &gt; 		--prefix=/usr                           \
&gt; &gt; &gt; 		--mandir=/usr/share/man                 \
&gt; &gt; &gt; 		--infodir=/usr/share/info               \
&gt; &gt; &gt; 		--target=${CROSS_ARCH}-linux
&gt; &gt; &gt;    	make
&gt; &gt; &gt;    
&gt; &gt; &gt;    and for the gcc (after the binutils have been
&gt; &gt; &gt;    installed on the host):
&gt; &gt; &gt; 
&gt; &gt; &gt;    	configure  	    	    	    	    	\
&gt; &gt; &gt; 		--enable-languages=c			\
&gt; &gt; &gt;         	--disable-nls                           \
&gt; &gt; &gt; 		--disable-threads			\
&gt; &gt; &gt; 		--disable-shared			\
&gt; &gt; &gt; 		--disable-checking			\
&gt; &gt; &gt;         	--prefix=/usr                           \
&gt; &gt; &gt;         	--mandir=/usr/share/man                 \
&gt; &gt; &gt;         	--infodir=/usr/share/info               \
&gt; &gt; &gt;         	--target=${CROSS_ARCH}-linux
&gt; &gt; &gt;    	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
&gt; &gt; &gt; 		-D__gthr_posix_h'
&gt; &gt; &gt;    
&gt; &gt; &gt;    where ${CROSS_ARCH} is the target architecture you want
&gt; &gt; &gt;    to compile the toochain for, in my case, this where one
&gt; &gt; &gt;    of the following:
&gt; &gt; &gt; 
&gt; &gt; &gt;    	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
&gt; &gt; &gt; 	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64
&gt; &gt; &gt; 
&gt; &gt; &gt;   PROBLEMS HERE:
&gt; &gt; &gt; 
&gt; &gt; &gt;    I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
&gt; &gt; &gt;    but soon discovered that gcc-3.3.2 will not be able 
&gt; &gt; &gt;    to build a cross compiler for some archs like the
&gt; &gt; &gt;    alpha, ia64, powerpc and even i386 ;) without some
&gt; &gt; &gt;    modifications[2] but with some help, I got all headers
&gt; &gt; &gt;    fixed, except for the ia64, which still doesn't work
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 2) KERNEL CROSS COMPILING
&gt; &gt; &gt; 
&gt; &gt; &gt;    equipped with the cross compiling toolchains for all
&gt; &gt; &gt;    but one of the architectures mentioned above, I wrote
&gt; &gt; &gt;    a little script, which basically does nothing else 
&gt; &gt; &gt;    but compiling a given kernel for all possible archs.
&gt; &gt; &gt; 
&gt; &gt; &gt;    basically this can be accomplished by doing:
&gt; &gt; &gt; 
&gt; &gt; &gt; 	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt;    the first result was harrowing:
&gt; &gt; &gt; 
&gt; &gt; &gt; 				2.4.25-pre  2.6.2-rc
&gt; &gt; &gt;    ----------------------------------------------------
&gt; &gt; &gt; 	[ARCH alpha/alpha]      succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH hppa/parisc]      failed.     failed.
&gt; &gt; &gt; 	[ARCH hppa64/parisc]    failed.     failed.
&gt; &gt; &gt; 	[ARCH i386/i386]        succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH m68k/m68k]        failed.     failed.
&gt; &gt; &gt; 	[ARCH mips/mips]        failed.     failed.
&gt; &gt; &gt; 	[ARCH mips64/mips]      failed.     failed.
&gt; &gt; &gt; 	[ARCH ppc/ppc]          succeeded.  succeeded.
&gt; &gt; &gt; 	[ARCH ppc64/ppc64]      failed.     failed.
&gt; &gt; &gt; 	[ARCH s390/s390]        failed.     failed.
&gt; &gt; &gt; 	[ARCH sparc/sparc]      failed.     succeeded.
&gt; &gt; &gt; 	[ARCH sparc64/sparc]    failed.     failed.
&gt; &gt; &gt; 	[ARCH x86_64/x86_64]    failed.     succeeded.
&gt; &gt; &gt; 
&gt; &gt; &gt;    so only alpha, i386 and ppc did work on the first run.
&gt; &gt; &gt; 
&gt; &gt; &gt;    what I discovered was, that there IS a big difference
&gt; &gt; &gt;    between an empty .config file and a non exististing 
&gt; &gt; &gt;    one, where latter allowed the make oldconfig to work
&gt; &gt; &gt;    similar to the make defaultconfig available on 2.6,
&gt; &gt; &gt;    and added some archs (see [3] for details)
&gt; &gt; &gt; 
&gt; &gt; &gt;   PROBLEMS &amp; SOLUTIONS HERE:
&gt; &gt; &gt; 
&gt; &gt; &gt;    ppc64: 
&gt; &gt; &gt; 	CROSS32_COMPILE=ppc-linux-  
&gt; &gt; &gt; 	is needed to make this work as expected.
&gt; &gt; &gt; 
&gt; &gt; &gt;    hppa/hppa64: 
&gt; &gt; &gt; 	seems not to compile without using a very big
&gt; &gt; &gt; 	patch, which changes a lot inside the kernel
&gt; &gt; &gt; 
&gt; &gt; &gt;    mips/mips64:
&gt; &gt; &gt; 	seem to use the 'obsoleted' -mcpu= option
&gt; &gt; &gt; 	which results in a cc1: error: invalid option 
&gt; &gt; &gt; 	`cpu=&lt;cpu-here&gt;'
&gt; &gt; &gt; 
&gt; &gt; &gt;    m68k:
&gt; &gt; &gt; 	fails with a hundred errors in the includes
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 3) CONCLUSIONS
&gt; &gt; &gt; 
&gt; &gt; &gt;    it seems that recent kernels (2.4 and 2.6) do not support
&gt; &gt; &gt;    most of the architectures they contain without heavy
&gt; &gt; &gt;    patching (haven't tested for arm, sh3/4, ...)
&gt; &gt; &gt; 
&gt; &gt; &gt;    building cross compiler toolchains isn't that often done
&gt; &gt; &gt;    otherwise it would not require such modifications, and
&gt; &gt; &gt;    the documentation would be up to date ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    it seems that with some minor patches and kernel tweaks
&gt; &gt; &gt;    an automated build is in reach, although some archs seem
&gt; &gt; &gt;    to break from one release to the other ...
&gt; &gt; &gt; 
&gt; &gt; &gt;    the non mainline branches, if they exist are some kernel
&gt; &gt; &gt;    versions behind the current mainstream kernel, which 
&gt; &gt; &gt;    might not mean anything ...
&gt; &gt; &gt; 
&gt; &gt; &gt; 
&gt; &gt; &gt; 4) LINKS &amp; REFERENCES
&gt; &gt; &gt; 
&gt; &gt; &gt;    [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
&gt; &gt; &gt; 	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec
&gt; &gt; &gt; 
&gt; &gt; &gt;    [2]  http://vserver.13thfloor.at/Stuff/Cross/
&gt; &gt; &gt; 		gcc-3.3.2-cross-alpha-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-i386-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-ia64-fix.diff.bz2
&gt; &gt; &gt; 		gcc-3.3.2-cross-powerpc-fix.diff.bz2
&gt; &gt; &gt; 
&gt; &gt; &gt;    [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info
&gt; &gt; &gt; 
&gt; &gt; &gt;    ia64:	http://www.gelato.unsw.edu.au/kerncomp/
&gt; &gt; &gt;    mips:	http://www.linux-mips.org/kernel.html
&gt; &gt; &gt;    hppa:	http://www.parisc-linux.org/kernel/index.html
&gt; &gt; &gt;    ppc64:	http://linuxppc64.org/
&gt; &gt; &gt;    	
&gt; &gt; &gt; 
&gt; &gt; &gt; -
&gt; &gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; &gt; -- 
&gt; &gt; Timothy D. Witham - Lab Director - wookie@osdl.org
&gt; &gt; Open Source Development Lab Inc - A non-profit corporation
&gt; &gt; 12725 SW Millikan Way - Suite 400 - Beaverton OR, 97005
&gt; &gt; (503)-626-2455 x11 (office)    (503)-702-2871     (cell)
&gt; &gt; (503)-626-2436     (fax)
&gt; &gt; 
&gt; &gt; -
&gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-kernel" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; Please read the FAQ at  http://www.tux.org/lkml/
&gt; 


-- 
The church is near, but the road is icy.
The bar is far, but i will walk carefully. - Russian proverb
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040216225041</emailId><senderName>Jim Wilson</senderName><senderEmail>wilson@specifixinc.com</senderEmail><timestampReceived>2004-02-16 22:50:41-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Fri, 2004-02-13 at 16:58, David Mosberger wrote:
&gt;   &gt;&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
&gt;   &gt;&gt; found here:
&gt;   &gt;&gt; http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation

I recommend Dan Kegel's page for anyone trying to build a cross compiler
to linux.  See
	http://kegel.com/crosstool
This isn't very hard to follow, and it gives you a properly configured
and built gcc/glibc for the target.

I don't recommend the inhibit_libc trick for building linux crosses.  It
may work well enough for kernel builds, but it will give you a subtly
broken gcc, and that may lead to confusion later.
-- 
Jim Wilson, GNU Tools Support, http://www.SpecifixInc.com

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040108010924</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-01-08 01:09:24-0400</timestampReceived><subject>strcmp is too heavy for its everyday usage...</subject><body>

strcmp is _mostly_ used here and there to check strings for equality
only, not for finding their ordering.  And if we have a function for
this equality check only, it would be a reasonable benefit:

a) for a long strings this function can operate with a whole
   words vs. bytes, which is much faster;

b) for a very short strings, when strcmp and this function can be
   unrolled into a series of a direct bytes comparing, this defun
   don't have to cope with (unsigned char) -&gt; (int) casting for the
   each pair of bytes, so it will be shorter, faster etc.

memcmp is the subject of the question, too.

Any comments?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040108011311</emailId><senderName>Roland McGrath</senderName><senderEmail>roland@redhat.com</senderEmail><timestampReceived>2004-01-08 01:13:11-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

The optimized string functions already do word comparisons when that is
possible and advantageous.  The comparisons to extract the ordering vs just
equality/nonequality are only on the first nonmatching byte.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040108013636</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-01-08 01:36:36-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

On Wed, Jan 07, 2004 at 05:13:11PM -0800, Roland McGrath wrote:

&gt; The optimized string functions already do word comparisons when that
&gt; is possible and advantageous.  The comparisons to extract the
&gt; ordering vs just equality/nonequality are only on the first
&gt; nonmatching byte.

But it's an overhead anyway.  Then, it's bad enough for the inlining.
And then, where is such a strcmp in GLIBC?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040108093004</emailId><senderName>Andreas Schwab</senderName><senderEmail>schwab@suse.de</senderEmail><timestampReceived>2004-01-08 09:30:04-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

Denis Zaitsev &lt;zzz@anda.ru&gt; writes:

&gt; On Wed, Jan 07, 2004 at 05:13:11PM -0800, Roland McGrath wrote:
&gt;
&gt;&gt; The optimized string functions already do word comparisons when that
&gt;&gt; is possible and advantageous.  The comparisons to extract the
&gt;&gt; ordering vs just equality/nonequality are only on the first
&gt;&gt; nonmatching byte.
&gt;
&gt; But it's an overhead anyway.

Rather neglectable, IMHO.

&gt; Then, it's bad enough for the inlining.

If it's inlined then the compiler should be smart enough to discard the
unneded bits.  If not, and the difference is measurable, then the compiler
should be fixed.

Andreas.

-- 
Andreas Schwab, SuSE Labs, schwab@suse.de
SuSE Linux AG, Maxfeldstraße 5, 90409 Nürnberg, Germany
Key fingerprint = 58CA 54C7 6D53 942B 1756  01D3 44D5 214B 8276 4ED5
"And now for something completely different."
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040109051145</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-01-09 05:11:45-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

On Thu, Jan 08, 2004 at 10:30:04AM +0100, Andreas Schwab wrote:
&gt; Denis Zaitsev &lt;zzz@anda.ru&gt; writes:
&gt; 
&gt; &gt; On Wed, Jan 07, 2004 at 05:13:11PM -0800, Roland McGrath wrote:
&gt; &gt;
&gt; &gt;&gt; The optimized string functions already do word comparisons when
&gt; &gt;&gt; that is possible and advantageous.  The comparisons to extract
&gt; &gt;&gt; the ordering vs just equality/nonequality are only on the first
&gt; &gt;&gt; nonmatching byte.
&gt; &gt;
&gt; &gt; But it's an overhead anyway.
&gt; 
&gt; Rather neglectable, IMHO.

Nearly agreed.

&gt; &gt; Then, it's bad enough for the inlining.
&gt; 
&gt; If it's inlined then the compiler should be smart enough to discard
&gt; the unneded bits.  If not, and the difference is measurable, then
&gt; the compiler should be fixed.

GCC is smart enough.  It doesn't do the job thru the best possible
way, but this should and (important!) can really be fixed.  So,
generally I agree again.  But suppose such an example:

extern inline
s(const unsigned char *a, const unsigned char *b)
{
    int r;
    (r= a[0] - b[0]) &amp;&amp;
    (r= a[1] - b[1]) &amp;&amp;
    (r= a[2] - b[2]) &amp;&amp;
    (r= a[3] - b[3]);
    return r;
}

It's a typical inline code for compare 4-byte of mem.  When it is
used, say, in such a context

        s(a,b) ? A() : B();

GCC discards the value of r perfectly, leaving the only code needed
for compare bytes for eq/neq.  But GCC doesn't merge the 4 byte
comparing into single word comparing.  And, as I understand, it will
never do that, as it's not asked to.  Or this kind of optimization is
assumed ok for compiler, but just still unimplemented?

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040109081231</emailId><senderName>Richard Henderson</senderName><senderEmail>rth@twiddle.net</senderEmail><timestampReceived>2004-01-09 08:12:31-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

On Fri, Jan 09, 2004 at 10:11:45AM +0500, Denis Zaitsev wrote:
&gt;     (r= a[0] - b[0]) &amp;&amp;
&gt;     (r= a[1] - b[1]) &amp;&amp;
&gt;     (r= a[2] - b[2]) &amp;&amp;
&gt;     (r= a[3] - b[3]);
&gt;     return r;
&gt; }
&gt; 
&gt; It's a typical inline code for compare 4-byte of mem.  When it is
&gt; used, say, in such a context
&gt; 
&gt;         s(a,b) ? A() : B();
&gt; 
&gt; GCC discards the value of r perfectly, leaving the only code needed
&gt; for compare bytes for eq/neq.  But GCC doesn't merge the 4 byte
&gt; comparing into single word comparing.  And, as I understand, it will
&gt; never do that, as it's not asked to.  Or this kind of optimization is
&gt; assumed ok for compiler, but just still unimplemented?

Certainly it's ok if it converts.

However, on most targets you'd have to know that a and b are aligned.
Worse, even for targets like x86 that support unaligned loads you have
to know for certain that neither a[3] nor b[3] could possibly segv
when a[0] and b[0] won't.  That condition is trivial when a and b are
aligned, but otherwise...

Adding compensation code to deal with the extra conditions that must
be satisfied will probably negate whatever you're hoping to gain here.



r~
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040109084928</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-01-09 08:49:28-0400</timestampReceived><subject>Re: strcmp is too heavy for its everyday usage...</subject><body>

On Fri, Jan 09, 2004 at 12:12:31AM -0800, Richard Henderson wrote:
&gt; On Fri, Jan 09, 2004 at 10:11:45AM +0500, Denis Zaitsev wrote:
&gt; &gt;     (r= a[0] - b[0]) &amp;&amp;
&gt; &gt;     (r= a[1] - b[1]) &amp;&amp;
&gt; &gt;     (r= a[2] - b[2]) &amp;&amp;
&gt; &gt;     (r= a[3] - b[3]);
&gt; &gt;     return r;
&gt; &gt; }
&gt; &gt; 
&gt; &gt; It's a typical inline code for compare 4-byte of mem.  When it is
&gt; &gt; used, say, in such a context
&gt; &gt; 
&gt; &gt;         s(a,b) ? A() : B();
&gt; &gt; 
&gt; &gt; GCC discards the value of r perfectly, leaving the only code needed
&gt; &gt; for compare bytes for eq/neq.  But GCC doesn't merge the 4 byte
&gt; &gt; comparing into single word comparing.  And, as I understand, it will
&gt; &gt; never do that, as it's not asked to.  Or this kind of optimization is
&gt; &gt; assumed ok for compiler, but just still unimplemented?
&gt; 
&gt; Certainly it's ok if it converts.
&gt; 
&gt; However, on most targets you'd have to know that a and b are aligned.
&gt; Worse, even for targets like x86 that support unaligned loads you have
&gt; to know for certain that neither a[3] nor b[3] could possibly segv
&gt; when a[0] and b[0] won't.

Yes, and therefore this code is for memcmp, not for strcmp.  BTW, do I
understand right, that memcmp is free of that problem, as it has the
explicit length argument?  And this arg says implicitly, that the
access for the mem thru all this length is ok?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040213205743</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-13 20:57:43-0400</timestampReceived><subject>Kernel Cross Compiling</subject><body>


Hi Folks!

I'm currently investigating the requirements/doability
of a kernel cross compiling test bed/setup, able to do
automated kernel builds for different architecture,
just to see if it compiles and later to verify if a 
given patch breaks that compile on any of the tested
archs ...

here a short status, and some issues I ran into so far,
some of them with solutions, others without, and some
interesting? observations ...

I would be happy if somebody who has done similar, or
knows how to do it properly ;) could comment on that,
and/or point out possible improvements ...

TIA,
Herbert


1) CROSS COMPILER / TOOLCHAIN

   after reading and testing several cross build and
   toolchain building howtos, I decided to do it a little 
   different, because I do not need glibc to compile the 
   kernel ...

   the result are two .spec files[1], or the commands 
   used to build an appropriate toolchain ...
   
   for the binutils the required commands are:

   	configure  	    	    	    	    	\
		--disable-nls                           \
		--prefix=/usr                           \
		--mandir=/usr/share/man                 \
		--infodir=/usr/share/info               \
		--target=${CROSS_ARCH}-linux
   	make
   
   and for the gcc (after the binutils have been
   installed on the host):

   	configure  	    	    	    	    	\
		--enable-languages=c			\
        	--disable-nls                           \
		--disable-threads			\
		--disable-shared			\
		--disable-checking			\
        	--prefix=/usr                           \
        	--mandir=/usr/share/man                 \
        	--infodir=/usr/share/info               \
        	--target=${CROSS_ARCH}-linux
   	make  TARGET_LIBGCC2_CFLAGS='-Dinhibit_libc  \
		-D__gthr_posix_h'
   
   where ${CROSS_ARCH} is the target architecture you want
   to compile the toochain for, in my case, this where one
   of the following:

   	alpha, hppa, hppa64, i386, ia64, m68k, mips, 
	mips64, ppc, ppc64, s390, sparc, sparc64, x86_64

  PROBLEMS HERE:

   I decided to use binutils 2.14.90.0.8, and gcc 3.3.2,
   but soon discovered that gcc-3.3.2 will not be able 
   to build a cross compiler for some archs like the
   alpha, ia64, powerpc and even i386 ;) without some
   modifications[2] but with some help, I got all headers
   fixed, except for the ia64, which still doesn't work


2) KERNEL CROSS COMPILING

   equipped with the cross compiling toolchains for all
   but one of the architectures mentioned above, I wrote
   a little script, which basically does nothing else 
   but compiling a given kernel for all possible archs.

   basically this can be accomplished by doing:

	make ARCH=&lt;arch&gt; CROSS_COMPILE=&lt;arch&gt;-linux-


   the first result was harrowing:

				2.4.25-pre  2.6.2-rc
   ----------------------------------------------------
	[ARCH alpha/alpha]      succeeded.  succeeded.
	[ARCH hppa/parisc]      failed.     failed.
	[ARCH hppa64/parisc]    failed.     failed.
	[ARCH i386/i386]        succeeded.  succeeded.
	[ARCH m68k/m68k]        failed.     failed.
	[ARCH mips/mips]        failed.     failed.
	[ARCH mips64/mips]      failed.     failed.
	[ARCH ppc/ppc]          succeeded.  succeeded.
	[ARCH ppc64/ppc64]      failed.     failed.
	[ARCH s390/s390]        failed.     failed.
	[ARCH sparc/sparc]      failed.     succeeded.
	[ARCH sparc64/sparc]    failed.     failed.
	[ARCH x86_64/x86_64]    failed.     succeeded.

   so only alpha, i386 and ppc did work on the first run.

   what I discovered was, that there IS a big difference
   between an empty .config file and a non exististing 
   one, where latter allowed the make oldconfig to work
   similar to the make defaultconfig available on 2.6,
   and added some archs (see [3] for details)

  PROBLEMS &amp; SOLUTIONS HERE:

   ppc64: 
	CROSS32_COMPILE=ppc-linux-  
	is needed to make this work as expected.

   hppa/hppa64: 
	seems not to compile without using a very big
	patch, which changes a lot inside the kernel

   mips/mips64:
	seem to use the 'obsoleted' -mcpu= option
	which results in a cc1: error: invalid option 
	`cpu=&lt;cpu-here&gt;'

   m68k:
	fails with a hundred errors in the includes


3) CONCLUSIONS

   it seems that recent kernels (2.4 and 2.6) do not support
   most of the architectures they contain without heavy
   patching (haven't tested for arm, sh3/4, ...)

   building cross compiler toolchains isn't that often done
   otherwise it would not require such modifications, and
   the documentation would be up to date ...

   it seems that with some minor patches and kernel tweaks
   an automated build is in reach, although some archs seem
   to break from one release to the other ...

   the non mainline branches, if they exist are some kernel
   versions behind the current mainstream kernel, which 
   might not mean anything ...


4) LINKS &amp; REFERENCES

   [1]	http://vserver.13thfloor.at/Stuff/Cross/binutils-cross.spec
	http://vserver.13thfloor.at/Stuff/Cross/gcc-cross.spec

   [2]  http://vserver.13thfloor.at/Stuff/Cross/
		gcc-3.3.2-cross-alpha-fix.diff.bz2
		gcc-3.3.2-cross-i386-fix.diff.bz2
		gcc-3.3.2-cross-ia64-fix.diff.bz2
		gcc-3.3.2-cross-powerpc-fix.diff.bz2

   [3]  http://vserver.13thfloor.at/Stuff/Cross/compile.info

   ia64:	http://www.gelato.unsw.edu.au/kerncomp/
   mips:	http://www.linux-mips.org/kernel.html
   hppa:	http://www.parisc-linux.org/kernel/index.html
   ppc64:	http://linuxppc64.org/
   	

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040213213128</emailId><senderName>David Mosberger</senderName><senderEmail>davidm@napali.hpl.hp.com</senderEmail><timestampReceived>2004-02-13 21:31:28-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

&gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 21:57:43 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:

  Herbert&gt; I got all headers fixed, except for the ia64, which still
  Herbert&gt; doesn't work

Something sounds wrong here. You shouldn't have to patch headers.

A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
found here:

 http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation

	--david
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040213214420</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-13 21:44:20-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Fri, Feb 13, 2004 at 01:31:28PM -0800, David Mosberger wrote:
&gt; &gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 21:57:43 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:
&gt; 
&gt;   Herbert&gt; I got all headers fixed, except for the ia64, which still
&gt;   Herbert&gt; doesn't work
&gt; 
&gt; Something sounds wrong here. You shouldn't have to patch headers.
&gt; 
&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
&gt; found here:
&gt; 
&gt;  http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation

that might work with the ia64 libraries and headers,
but it seems to fail, with the headers included in
the gcc tarball, for cross compiling, if you get it
to compile without (g)libc which should not be required
to build the crossgcc and the kernel, I would be very
interested ...

anyway, thanks for the url,
Herbert

&gt; 	--david
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214005856</emailId><senderName>David Mosberger</senderName><senderEmail>davidm@napali.hpl.hp.com</senderEmail><timestampReceived>2004-02-14 00:58:56-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

&gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 22:44:20 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:

  &gt;&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
  &gt;&gt; found here:

  &gt;&gt; http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation

  Herbert&gt; that might work with the ia64 libraries and headers, but it
  Herbert&gt; seems to fail, with the headers included in the gcc
  Herbert&gt; tarball, for cross compiling, if you get it to compile
  Herbert&gt; without (g)libc which should not be required to build the
  Herbert&gt; crossgcc and the kernel, I would be very interested ...

Ah, I see now what you mean.  I suspect that's a setup that's rarely
tested, so I'm not surprised to see some breakage.

Having said that, I got gcc v3.3.3 20031212 (prerelease) to build with
minor tweaks (see patch below).  I'm no GCC-built-environment expert
and I'm quite certain that the patch isn't totally correct, but all
the unwind-related stuff isn't really needed in your case, because
that code only comes into play for exception-handling and C cleanup
handlers.

The unwind-sjlj.c problem should occur on most other platforms too, so
I don't think that problem is ia64-specific.

	--david

Index: gcc/unwind-sjlj.c
===================================================================
RCS file: /cvs/gcc/gcc/gcc/unwind-sjlj.c,v
retrieving revision 1.11.2.2
diff -u -r1.11.2.2 unwind-sjlj.c
--- gcc/unwind-sjlj.c	2 May 2003 21:01:21 -0000	1.11.2.2
+++ gcc/unwind-sjlj.c	14 Feb 2004 00:50:33 -0000
@@ -22,7 +22,9 @@
 #include "tconfig.h"
 #include "tsystem.h"
 #include "unwind.h"
+#ifndef inhibit_libc
 #include "gthr.h"
+#endif
 
 #ifdef __USING_SJLJ_EXCEPTIONS__
 
Index: gcc/unwind.h
===================================================================
RCS file: /cvs/gcc/gcc/gcc/unwind.h,v
retrieving revision 1.7.2.6
diff -u -r1.7.2.6 unwind.h
--- gcc/unwind.h	4 Sep 2003 09:39:44 -0000	1.7.2.6
+++ gcc/unwind.h	14 Feb 2004 00:50:33 -0000
@@ -195,7 +195,9 @@
    compatible with the standard ABI for IA-64, we inline these.  */
 
 #ifdef __ia64__
-#include &lt;stdlib.h&gt;
+# ifndef inhibit_libc
+#  include &lt;stdlib.h&gt;
+# endif
 
 static inline _Unwind_Ptr
 _Unwind_GetDataRelBase (struct _Unwind_Context *_C)
Index: gcc/config/ia64/fde-glibc.c
===================================================================
RCS file: /cvs/gcc/gcc/gcc/config/ia64/fde-glibc.c,v
retrieving revision 1.5
diff -u -r1.5 fde-glibc.c
--- gcc/config/ia64/fde-glibc.c	15 Dec 2001 11:46:51 -0000	1.5
+++ gcc/config/ia64/fde-glibc.c	14 Feb 2004 00:50:34 -0000
@@ -31,6 +31,9 @@
 #ifndef _GNU_SOURCE
 #define _GNU_SOURCE
 #endif
+
+#ifndef inhibit_libc
+
 #include "config.h"
 #include &lt;stddef.h&gt;
 #include &lt;stdlib.h&gt;
@@ -162,3 +165,5 @@
 
   return data.ret;
 }
+
+#endif
Index: gcc/config/ia64/linux.h
===================================================================
RCS file: /cvs/gcc/gcc/gcc/config/ia64/linux.h,v
retrieving revision 1.23
diff -u -r1.23 linux.h
--- gcc/config/ia64/linux.h	3 Sep 2002 21:09:54 -0000	1.23
+++ gcc/config/ia64/linux.h	14 Feb 2004 00:50:34 -0000
@@ -58,7 +58,7 @@
 /* Do code reading to identify a signal frame, and set the frame
    state data appropriately.  See unwind-dw2.c for the structs.  */
 
-#ifdef IN_LIBGCC2
+#ifdef x_IN_LIBGCC2
 #include &lt;signal.h&gt;
 #include &lt;sys/ucontext.h&gt;
 
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214010841</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-14 01:08:41-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Fri, Feb 13, 2004 at 04:58:56PM -0800, David Mosberger wrote:
&gt; &gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 22:44:20 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:
&gt; 
&gt;   &gt;&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
&gt;   &gt;&gt; found here:
&gt; 
&gt;   &gt;&gt; http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation
&gt; 
&gt;   Herbert&gt; that might work with the ia64 libraries and headers, but it
&gt;   Herbert&gt; seems to fail, with the headers included in the gcc
&gt;   Herbert&gt; tarball, for cross compiling, if you get it to compile
&gt;   Herbert&gt; without (g)libc which should not be required to build the
&gt;   Herbert&gt; crossgcc and the kernel, I would be very interested ...
&gt; 
&gt; Ah, I see now what you mean.  I suspect that's a setup that's rarely
&gt; tested, so I'm not surprised to see some breakage.
&gt; 
&gt; Having said that, I got gcc v3.3.3 20031212 (prerelease) to build with
&gt; minor tweaks (see patch below).  I'm no GCC-built-environment expert
&gt; and I'm quite certain that the patch isn't totally correct, but all
&gt; the unwind-related stuff isn't really needed in your case, because
&gt; that code only comes into play for exception-handling and C cleanup
&gt; handlers.
&gt; 
&gt; The unwind-sjlj.c problem should occur on most other platforms too, so
&gt; I don't think that problem is ia64-specific.

ah, thanks, will test it, and maybe upgrade to 3.3.3
if this seems necessary ...

best,
Herbert

&gt; 	--david
&gt; 
&gt; Index: gcc/unwind-sjlj.c
&gt; ===================================================================
&gt; RCS file: /cvs/gcc/gcc/gcc/unwind-sjlj.c,v
&gt; retrieving revision 1.11.2.2
&gt; diff -u -r1.11.2.2 unwind-sjlj.c
&gt; --- gcc/unwind-sjlj.c	2 May 2003 21:01:21 -0000	1.11.2.2
&gt; +++ gcc/unwind-sjlj.c	14 Feb 2004 00:50:33 -0000
&gt; @@ -22,7 +22,9 @@
&gt;  #include "tconfig.h"
&gt;  #include "tsystem.h"
&gt;  #include "unwind.h"
&gt; +#ifndef inhibit_libc
&gt;  #include "gthr.h"
&gt; +#endif
&gt;  
&gt;  #ifdef __USING_SJLJ_EXCEPTIONS__
&gt;  
&gt; Index: gcc/unwind.h
&gt; ===================================================================
&gt; RCS file: /cvs/gcc/gcc/gcc/unwind.h,v
&gt; retrieving revision 1.7.2.6
&gt; diff -u -r1.7.2.6 unwind.h
&gt; --- gcc/unwind.h	4 Sep 2003 09:39:44 -0000	1.7.2.6
&gt; +++ gcc/unwind.h	14 Feb 2004 00:50:33 -0000
&gt; @@ -195,7 +195,9 @@
&gt;     compatible with the standard ABI for IA-64, we inline these.  */
&gt;  
&gt;  #ifdef __ia64__
&gt; -#include &lt;stdlib.h&gt;
&gt; +# ifndef inhibit_libc
&gt; +#  include &lt;stdlib.h&gt;
&gt; +# endif
&gt;  
&gt;  static inline _Unwind_Ptr
&gt;  _Unwind_GetDataRelBase (struct _Unwind_Context *_C)
&gt; Index: gcc/config/ia64/fde-glibc.c
&gt; ===================================================================
&gt; RCS file: /cvs/gcc/gcc/gcc/config/ia64/fde-glibc.c,v
&gt; retrieving revision 1.5
&gt; diff -u -r1.5 fde-glibc.c
&gt; --- gcc/config/ia64/fde-glibc.c	15 Dec 2001 11:46:51 -0000	1.5
&gt; +++ gcc/config/ia64/fde-glibc.c	14 Feb 2004 00:50:34 -0000
&gt; @@ -31,6 +31,9 @@
&gt;  #ifndef _GNU_SOURCE
&gt;  #define _GNU_SOURCE
&gt;  #endif
&gt; +
&gt; +#ifndef inhibit_libc
&gt; +
&gt;  #include "config.h"
&gt;  #include &lt;stddef.h&gt;
&gt;  #include &lt;stdlib.h&gt;
&gt; @@ -162,3 +165,5 @@
&gt;  
&gt;    return data.ret;
&gt;  }
&gt; +
&gt; +#endif
&gt; Index: gcc/config/ia64/linux.h
&gt; ===================================================================
&gt; RCS file: /cvs/gcc/gcc/gcc/config/ia64/linux.h,v
&gt; retrieving revision 1.23
&gt; diff -u -r1.23 linux.h
&gt; --- gcc/config/ia64/linux.h	3 Sep 2002 21:09:54 -0000	1.23
&gt; +++ gcc/config/ia64/linux.h	14 Feb 2004 00:50:34 -0000
&gt; @@ -58,7 +58,7 @@
&gt;  /* Do code reading to identify a signal frame, and set the frame
&gt;     state data appropriately.  See unwind-dw2.c for the structs.  */
&gt;  
&gt; -#ifdef IN_LIBGCC2
&gt; +#ifdef x_IN_LIBGCC2
&gt;  #include &lt;signal.h&gt;
&gt;  #include &lt;sys/ucontext.h&gt;
&gt;  
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214023503</emailId><senderName>Herbert Poetzl</senderName><senderEmail>herbert@13thfloor.at</senderEmail><timestampReceived>2004-02-14 02:35:03-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

On Sat, Feb 14, 2004 at 02:08:41AM +0100, Herbert Poetzl wrote:
&gt; On Fri, Feb 13, 2004 at 04:58:56PM -0800, David Mosberger wrote:
&gt; &gt; &gt;&gt;&gt;&gt;&gt; On Fri, 13 Feb 2004 22:44:20 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:
&gt; &gt; 
&gt; &gt;   &gt;&gt; A recipe for building ia32-&gt;ia64 cross-toolchain on Debian can be
&gt; &gt;   &gt;&gt; found here:
&gt; &gt; 
&gt; &gt;   &gt;&gt; http://www.gelato.unsw.edu.au/IA64wiki/CrossCompilation
&gt; &gt; 
&gt; &gt;   Herbert&gt; that might work with the ia64 libraries and headers, but it
&gt; &gt;   Herbert&gt; seems to fail, with the headers included in the gcc
&gt; &gt;   Herbert&gt; tarball, for cross compiling, if you get it to compile
&gt; &gt;   Herbert&gt; without (g)libc which should not be required to build the
&gt; &gt;   Herbert&gt; crossgcc and the kernel, I would be very interested ...
&gt; &gt; 
&gt; &gt; Ah, I see now what you mean.  I suspect that's a setup that's rarely
&gt; &gt; tested, so I'm not surprised to see some breakage.
&gt; &gt; 
&gt; &gt; Having said that, I got gcc v3.3.3 20031212 (prerelease) to build with
&gt; &gt; minor tweaks (see patch below).  I'm no GCC-built-environment expert
&gt; &gt; and I'm quite certain that the patch isn't totally correct, but all
&gt; &gt; the unwind-related stuff isn't really needed in your case, because
&gt; &gt; that code only comes into play for exception-handling and C cleanup
&gt; &gt; handlers.
&gt; &gt; 
&gt; &gt; The unwind-sjlj.c problem should occur on most other platforms too, so
&gt; &gt; I don't think that problem is ia64-specific.
&gt; 
&gt; ah, thanks, will test it, and maybe upgrade to 3.3.3
&gt; if this seems necessary ...

okay, status update ... thanks to David, ia64 gcc is now
working, I updated the fix for ia64 and made a testrun for
2.4.25-rc2 ...

linux-2.4.25-rc2        config  dep     kernel  modules

ia64/ia64:		OK	OK	FAILED	FAILED

&gt; best,
&gt; Herbert
&gt; 
&gt; &gt; 	--david
&gt; &gt; 
&gt; &gt; Index: gcc/unwind-sjlj.c
&gt; &gt; ===================================================================
&gt; &gt; RCS file: /cvs/gcc/gcc/gcc/unwind-sjlj.c,v
&gt; &gt; retrieving revision 1.11.2.2
&gt; &gt; diff -u -r1.11.2.2 unwind-sjlj.c
&gt; &gt; --- gcc/unwind-sjlj.c	2 May 2003 21:01:21 -0000	1.11.2.2
&gt; &gt; +++ gcc/unwind-sjlj.c	14 Feb 2004 00:50:33 -0000
&gt; &gt; @@ -22,7 +22,9 @@
&gt; &gt;  #include "tconfig.h"
&gt; &gt;  #include "tsystem.h"
&gt; &gt;  #include "unwind.h"
&gt; &gt; +#ifndef inhibit_libc
&gt; &gt;  #include "gthr.h"
&gt; &gt; +#endif
&gt; &gt;  
&gt; &gt;  #ifdef __USING_SJLJ_EXCEPTIONS__
&gt; &gt;  
&gt; &gt; Index: gcc/unwind.h
&gt; &gt; ===================================================================
&gt; &gt; RCS file: /cvs/gcc/gcc/gcc/unwind.h,v
&gt; &gt; retrieving revision 1.7.2.6
&gt; &gt; diff -u -r1.7.2.6 unwind.h
&gt; &gt; --- gcc/unwind.h	4 Sep 2003 09:39:44 -0000	1.7.2.6
&gt; &gt; +++ gcc/unwind.h	14 Feb 2004 00:50:33 -0000
&gt; &gt; @@ -195,7 +195,9 @@
&gt; &gt;     compatible with the standard ABI for IA-64, we inline these.  */
&gt; &gt;  
&gt; &gt;  #ifdef __ia64__
&gt; &gt; -#include &lt;stdlib.h&gt;
&gt; &gt; +# ifndef inhibit_libc
&gt; &gt; +#  include &lt;stdlib.h&gt;
&gt; &gt; +# endif
&gt; &gt;  
&gt; &gt;  static inline _Unwind_Ptr
&gt; &gt;  _Unwind_GetDataRelBase (struct _Unwind_Context *_C)
&gt; &gt; Index: gcc/config/ia64/fde-glibc.c
&gt; &gt; ===================================================================
&gt; &gt; RCS file: /cvs/gcc/gcc/gcc/config/ia64/fde-glibc.c,v
&gt; &gt; retrieving revision 1.5
&gt; &gt; diff -u -r1.5 fde-glibc.c
&gt; &gt; --- gcc/config/ia64/fde-glibc.c	15 Dec 2001 11:46:51 -0000	1.5
&gt; &gt; +++ gcc/config/ia64/fde-glibc.c	14 Feb 2004 00:50:34 -0000
&gt; &gt; @@ -31,6 +31,9 @@
&gt; &gt;  #ifndef _GNU_SOURCE
&gt; &gt;  #define _GNU_SOURCE
&gt; &gt;  #endif
&gt; &gt; +
&gt; &gt; +#ifndef inhibit_libc
&gt; &gt; +
&gt; &gt;  #include "config.h"
&gt; &gt;  #include &lt;stddef.h&gt;
&gt; &gt;  #include &lt;stdlib.h&gt;
&gt; &gt; @@ -162,3 +165,5 @@
&gt; &gt;  
&gt; &gt;    return data.ret;
&gt; &gt;  }
&gt; &gt; +
&gt; &gt; +#endif
&gt; &gt; Index: gcc/config/ia64/linux.h
&gt; &gt; ===================================================================
&gt; &gt; RCS file: /cvs/gcc/gcc/gcc/config/ia64/linux.h,v
&gt; &gt; retrieving revision 1.23
&gt; &gt; diff -u -r1.23 linux.h
&gt; &gt; --- gcc/config/ia64/linux.h	3 Sep 2002 21:09:54 -0000	1.23
&gt; &gt; +++ gcc/config/ia64/linux.h	14 Feb 2004 00:50:34 -0000
&gt; &gt; @@ -58,7 +58,7 @@
&gt; &gt;  /* Do code reading to identify a signal frame, and set the frame
&gt; &gt;     state data appropriately.  See unwind-dw2.c for the structs.  */
&gt; &gt;  
&gt; &gt; -#ifdef IN_LIBGCC2
&gt; &gt; +#ifdef x_IN_LIBGCC2
&gt; &gt;  #include &lt;signal.h&gt;
&gt; &gt;  #include &lt;sys/ucontext.h&gt;
&gt; &gt;  
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-kernel" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; Please read the FAQ at  http://www.tux.org/lkml/
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040214025105</emailId><senderName>David Mosberger</senderName><senderEmail>davidm@napali.hpl.hp.com</senderEmail><timestampReceived>2004-02-14 02:51:05-0400</timestampReceived><subject>Re: Kernel Cross Compiling</subject><body>

&gt;&gt;&gt;&gt;&gt; On Sat, 14 Feb 2004 03:35:03 +0100, Herbert Poetzl &lt;herbert@13thfloor.at&gt; said:

  Herbert&gt; linux-2.4.25-rc2 config dep kernel modules

2.4?  That's pretty hopeless.  2.6 builds out of the box for ia64.

	--david
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040927221743</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-09-27 22:17:43-0400</timestampReceived><subject>The linux binutils 2.15.92.0.2 is released</subject><body>

This is the beta release of binutils 2.15.92.0.2 for Linux, which is
based on binutils 2004 0927 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.92.0.2 to hjl@lucon.org

and

http://www.sourceware.org/bugzilla/

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches if there are any.

Changes from binutils 2.15.91.0.2:

1. Update from binutils 2004 0927.
2. Work around a section header bug in Intel ia64 compiler.
3. Fix an unwind directive bug in the ia64 assembler.
4. Fix various PPC bugs.
5. Update ARM support.
6. Fix an x86-64 linker warning while building Linux kernel.

Changes from binutils 2.15.91.0.1:

1. Update from binutils 2004 0727.
2. Fix the x86_64 linker to prevent non-PIC code in shared library.
3. Fix the ia64 linker to warn the relotable files which can't be
relaxed.
4. Fix the comdat group support. Allow mix single-member comdat group
with linkonce section.
5. Added --add-needed/--no-add-needed options to linker.
6. Fix the SHF_LINK_ORDER support.
7. Fix the ia64 assembler for multiple sections with the same name and
SHT_IA_64_UNWIND sections.
8. Fix the ia64 assembler for merge section and relaxation.

Changes from binutils 2.15.90.0.3:

1. Update from binutils 2004 0527.
2. Fix -x auto option in the ia64 assembler.
3. Add the AR check in the ia64 assembler.
4. Fix the section group support.
5. Add a new -z relro linker option.
6. Fix an exception section placement bug in linker.
7. Add .serialize.data and .serialize.instruction to the ia64
assembler.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Prescott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.92.0.2.tar.bz2. Source code.
2. binutils-2.15.91.0.2-2.15.92.0.2.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.92.0.2-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.92.0.2-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.92.0.2-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.92.0.2.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
09/27/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040704153748</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-04 15:37:48-0400</timestampReceived><subject>x86 D flag: what's its status thru the program?</subject><body>

Is this Direction flag (for the movs instructions) has some assumed
value (say, as after cld)?  I ask because the many program sources
show interesting behaviour: from one side, this flag is always set
before the string insns (cld or std), but from the other side, if the
programs does std then it always does cld after.  So, nobody leaves it
set, but nevertheless, everybody set it clear.  Why?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040824203424</emailId><senderName>Lei Yang</senderName><senderEmail>leiyang@nec-labs.com</senderEmail><timestampReceived>2004-08-24 20:34:24-0400</timestampReceived><subject>Segmentation fault from free()</subject><body>

Hi friends,

I am writing a c code and have been bugged by this segmentation fault 
for a while.

What I did is simply like:

-----------------------------------------------------------------------------------------------------
                
.........
unsigned long blocksize = 2048;
char *in_buffer
char *out_buffer;
if(( in_buffer= malloc(blocksize)) == NULL)
{
fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
return NULL;
}

if(( out_buffer= malloc(2*blocksize)) == NULL)
{
fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
free(in_buffer);
return NULL;
}

loop: until all the data are read from file
{
//read a block of data from a file to in_buffer
// do some data processing with in_buffer
//write the result to out_buffer
//memcpy out_buffer to list
}

free(in_buffer);
free(out_buffer);

return list;
......
-----------------------------------------------------------------------------------------------------------------


I've debugged with gdb to see where the segmentation fault happens, it 
is at free(in_buffer).
I've verified that the value for in_buffer after malloc() and before 
free() is the same. Or in other words, in_buffer is a valid pointer 
allocated by malloc.

And the SF only happens when the file is large, although block size 
could be small.
Means that for both small (2KB) and large(5MB) files, block size are the 
same. However, only large files could cause SF.

Could anyone please point me out what could possibly be the reason?
BTW, pls cc me when you reply, since I am not able to receive emails 
from this list. Thanks a lot!

TIA!
Lei
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html


</body></email><email><emailId>20040824211236</emailId><senderName>Robert Schiele</senderName><senderEmail>rschiele@uni-mannheim.de</senderEmail><timestampReceived>2004-08-24 21:12:36-0400</timestampReceived><subject>Re: Segmentation fault from free()</subject><body>

On Tue, Aug 24, 2004 at 04:34:24PM -0400, Lei Yang wrote:
&gt; Could anyone please point me out what could possibly be the reason?

Cannot say something definitely with incomplete source code.

The bug is not necessarily in the malloc/free pair of this construct.  Likely
you destroyed the heap structure in earlier memory allocation/deallocation
operations (e.g. during list processing).  You may want to check your program
with a memory debugger, e.g. valgrind for i386 platform.

Robert

-- 
Robert Schiele			Tel.: +49-621-181-2517
Dipl.-Wirtsch.informatiker	mailto:rschiele@uni-mannheim.de

[Attachment #3 (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20041030053328</emailId><senderName>Naga Raju</senderName><senderEmail>raj1234@gmail.com</senderEmail><timestampReceived>2004-10-30 05:33:28-0400</timestampReceived><subject>Shared libraries: How to share global variaables?</subject><body>

Is it possible to share global variables such that all applications
which use shared libraries can see the changes made to the global
variables by the other applications.

I use gcc and compiled
      gcc -shared -Wl,-soname,xyz.so.1 -o libxyz.so.1.0 -lxyz2  abc.o

Regards,
Nagaraju.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041030125011</emailId><senderName>Robin Doer</senderName><senderEmail>robin@robind.de</senderEmail><timestampReceived>2004-10-30 12:50:11-0400</timestampReceived><subject>Re: Shared libraries: How to share global variaables?</subject><body>

Am Samstag, 30. Oktober 2004 07:21 schrieb Naga Raju:
&gt; Is it possible to share global variables such that all applications
&gt; which use shared libraries can see the changes made to the global
&gt; variables by the other applications.
&gt;
&gt; I use gcc and compiled
&gt;       gcc -shared -Wl,-soname,xyz.so.1 -o libxyz.so.1.0 -lxyz2  abc.o
&gt;

Well, imho you can use the "extern" keyword.

See the following example:

bash-2.05b$ cat foo.c
const char* foo = "Hello World"; /* Global variable foo */

bash-2.05b$ cat bar.c
#include &lt;stdio.h&gt;

extern const char* foo;

int main(int argc, char* argv[]) {
  printf("%s\n", foo);

  return 0;
}

bash-2.05b$ gcc -shared -Wl,-soname,libfoo.so -o libfoo.so foo.c
bash-2.05b$ gcc -Wall bar.c -L. -lfoo -o bar
bash-2.05b$ ./bar
Hello World

&gt; Regards,
&gt; Nagaraju.

Bye,
Robin

[Attachment #3 (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20041030132543</emailId><senderName>Naga Raju</senderName><senderEmail>raj1234@gmail.com</senderEmail><timestampReceived>2004-10-30 13:25:43-0400</timestampReceived><subject>Re: Shared libraries: How to share global variaables?</subject><body>

Hi Robin,
Thanks for the help.
But my problem is little different.
In the example you have given, I initialized

char foo[100]="";

and in one application I set

application 1:

extern char foo[100];
strcpy(foo,"Test message");
printf("%s",foo);

and in applications 2:
extern char foo[100];
printf("%s",foo);

But application1 disaplays

Test message.

application2:

(No output ..it prints '\0' )

I want application2 to display "Test message"

Why the variables in two applications are different?
Why are they not using the same global variable?

Regards,
Nagaraju



On Sat, 30 Oct 2004 14:50:11 +0200, Robin Doer &lt;robin@robind.de&gt; wrote:
&gt; Am Samstag, 30. Oktober 2004 07:21 schrieb Naga Raju:
&gt; 
&gt; 
&gt; &gt; Is it possible to share global variables such that all applications
&gt; &gt; which use shared libraries can see the changes made to the global
&gt; &gt; variables by the other applications.
&gt; &gt;
&gt; &gt; I use gcc and compiled
&gt; &gt;       gcc -shared -Wl,-soname,xyz.so.1 -o libxyz.so.1.0 -lxyz2  abc.o
&gt; &gt;
&gt; 
&gt; Well, imho you can use the "extern" keyword.
&gt; 
&gt; See the following example:
&gt; 
&gt; bash-2.05b$ cat foo.c
&gt; const char* foo = "Hello World"; /* Global variable foo */
&gt; 
&gt; bash-2.05b$ cat bar.c
&gt; #include &lt;stdio.h&gt;
&gt; 
&gt; extern const char* foo;
&gt; 
&gt; int main(int argc, char* argv[]) {
&gt;  printf("%s\n", foo);
&gt; 
&gt;  return 0;
&gt; }
&gt; 
&gt; bash-2.05b$ gcc -shared -Wl,-soname,libfoo.so -o libfoo.so foo.c
&gt; bash-2.05b$ gcc -Wall bar.c -L. -lfoo -o bar
&gt; bash-2.05b$ ./bar
&gt; Hello World
&gt; 
&gt; &gt; Regards,
&gt; &gt; Nagaraju.
&gt; 
&gt; Bye,
&gt; Robin
&gt; 
&gt; 
&gt;
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040824212507</emailId><senderName>Lei Yang</senderName><senderEmail>leiyang@nec-labs.com</senderEmail><timestampReceived>2004-08-24 21:25:07-0400</timestampReceived><subject>Re: Segmentation fault from free()</subject><body>

Do you mean that something 'free' needs has been destroyed?
Why this wouldn't happen with small files?

THe memory debugger idea is definitely a good one, I'll try that.

Thanks a lot!
Lei

Robert Schiele wrote:
&gt; On Tue, Aug 24, 2004 at 04:34:24PM -0400, Lei Yang wrote:
&gt; 
&gt;&gt;Could anyone please point me out what could possibly be the reason?
&gt; 
&gt; 
&gt; Cannot say something definitely with incomplete source code.
&gt; 
&gt; The bug is not necessarily in the malloc/free pair of this construct.  Likely
&gt; you destroyed the heap structure in earlier memory allocation/deallocation
&gt; operations (e.g. during list processing).  You may want to check your program
&gt; with a memory debugger, e.g. valgrind for i386 platform.
&gt; 
&gt; Robert
&gt; 
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040824214959</emailId><senderName>Robert Schiele</senderName><senderEmail>rschiele@uni-mannheim.de</senderEmail><timestampReceived>2004-08-24 21:49:59-0400</timestampReceived><subject>Re: Segmentation fault from free()</subject><body>

On Tue, Aug 24, 2004 at 05:25:07PM -0400, Lei Yang wrote:
&gt; Do you mean that something 'free' needs has been destroyed?

Free memory has is managed by the heap data structure. If you free an address
twice or free an adress that was never allocated, the data structure will get
corrupted. Often this does occur silently, but in a later state a malloc or
free call with this corrupted data structure might crash your application.

&gt; Why this wouldn't happen with small files?

I don't know your application and thus I am not even sure that this is the
source of your problem. This was just a wild guess as it is a typical error in
such situations.

Robert

-- 
Robert Schiele			Tel.: +49-621-181-2517
Dipl.-Wirtsch.informatiker	mailto:rschiele@uni-mannheim.de

[Attachment #3 (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040825031745</emailId><senderName>joy</senderName><senderEmail>gracecott@sancharnet.in</senderEmail><timestampReceived>2004-08-25 03:17:45-0400</timestampReceived><subject>Re: Segmentation fault from free()</subject><body>

As already said, not much to ay w/o the full source.
However, you have allocated  a 4Kb buffer. possibly
you are reading beyond that limit into some memory space
not belonging to your program and when you try to free it,
you get a segfault. A wild guess, but is possible since you say this is
happening only for large files.

regards,
Joy.M.Monteiro

Lei Yang wrote:

&gt; Hi friends,
&gt; 
&gt; I am writing a c code and have been bugged by this segmentation fault 
&gt; for a while.
&gt; 
&gt; What I did is simply like:
&gt; 
&gt; ----------------------------------------------------------------------------------------------------- \
&gt;  
&gt; .........
&gt; unsigned long blocksize = 2048;
&gt; char *in_buffer
&gt; char *out_buffer;
&gt; if(( in_buffer= malloc(blocksize)) == NULL)
&gt; {
&gt; fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
&gt; return NULL;
&gt; }
&gt; 
&gt; if(( out_buffer= malloc(2*blocksize)) == NULL)
&gt; {
&gt; fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
&gt; free(in_buffer);
&gt; return NULL;
&gt; }
&gt; 
&gt; loop: until all the data are read from file
&gt; {
&gt; //read a block of data from a file to in_buffer
&gt; // do some data processing with in_buffer
&gt; //write the result to out_buffer
&gt; //memcpy out_buffer to list
&gt; }
&gt; 
&gt; free(in_buffer);
&gt; free(out_buffer);
&gt; 
&gt; return list;
&gt; ......
&gt; ----------------------------------------------------------------------------------------------------------------- \
&gt;  
&gt; 
&gt; I've debugged with gdb to see where the segmentation fault happens, it 
&gt; is at free(in_buffer).
&gt; I've verified that the value for in_buffer after malloc() and before 
&gt; free() is the same. Or in other words, in_buffer is a valid pointer 
&gt; allocated by malloc.
&gt; 
&gt; And the SF only happens when the file is large, although block size 
&gt; could be small.
&gt; Means that for both small (2KB) and large(5MB) files, block size are 
&gt; the same. However, only large files could cause SF.
&gt; 
&gt; Could anyone please point me out what could possibly be the reason?
&gt; BTW, pls cc me when you reply, since I am not able to receive emails 
&gt; from this list. Thanks a lot!
&gt; 
&gt; TIA!
&gt; Lei
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe 
&gt; linux-c-programming" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; 

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html


</body></email><email><emailId>20040705132344</emailId><senderName>Lukasz Michal Rak</senderName><senderEmail>l.rak@elka.pw.edu.pl</senderEmail><timestampReceived>2004-07-05 13:23:44-0400</timestampReceived><subject>Re: x86 D flag: what's its status thru the program?</subject><body>


	Hi all!

 The convention is that the D flag in IA32 is cleared. So if you call a
subroutine you have to clear D flag before making call. The subroutine can
change the state of D flag, but before returning the routine has to clear
the D flag.
 Hope I helped.

 Regards,

			Lukasz


&gt; Is this Direction flag (for the movs instructions) has some assumed
&gt; value (say, as after cld)?  I ask because the many program sources
&gt; show interesting behaviour: from one side, this flag is always set
&gt; before the string insns (cld or std), but from the other side, if the
&gt; programs does std then it always does cld after.  So, nobody leaves it
&gt; set, but nevertheless, everybody set it clear.  Why?
&gt; -
&gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; the body of a message to majordomo@vger.kernel.org
&gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt;

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040705162648</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-05 16:26:48-0400</timestampReceived><subject>Re: x86 D flag: what's its status thru the program?</subject><body>

On Mon, Jul 05, 2004 at 03:23:44PM +0200, Lukasz Michal Rak wrote:
&gt; 
&gt; 	Hi all!
&gt; 
&gt;  The convention is that the D flag in IA32 is cleared. So if you call a
&gt; subroutine you have to clear D flag before making call.

Do you mean that 'I have to clear the D flag if I had set it somewhere
before?'  Else what is the sense of the convention?

&gt; The subroutine can change the state of D flag, but before returning
&gt; the routine has to clear the D flag.

If the subroutine can change the flag, that it will violate the
convention, won't it?  And what is the strength of the convention,
again?

&gt;  Hope I helped.

Thanks, but I still don't understand something.  Again: if every
procedure keeps the flag clear at exit, then why the same every
procedure clears it at entry?  In a suspicion, that caller has changed
the flag against the rules?

&gt;  Regards,
&gt; 
&gt; 			Lukasz
&gt; 
&gt; 
&gt; &gt; Is this Direction flag (for the movs instructions) has some assumed
&gt; &gt; value (say, as after cld)?  I ask because the many program sources
&gt; &gt; show interesting behaviour: from one side, this flag is always set
&gt; &gt; before the string insns (cld or std), but from the other side, if the
&gt; &gt; programs does std then it always does cld after.  So, nobody leaves it
&gt; &gt; set, but nevertheless, everybody set it clear.  Why?
&gt; &gt; -
&gt; &gt; To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
&gt; &gt; the body of a message to majordomo@vger.kernel.org
&gt; &gt; More majordomo info at  http://vger.kernel.org/majordomo-info.html
&gt; &gt;
&gt; 
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040705171906</emailId><senderName>Lukasz Michal Rak</senderName><senderEmail>l.rak@elka.pw.edu.pl</senderEmail><timestampReceived>2004-07-05 17:19:06-0400</timestampReceived><subject>Re: x86 D flag: what's its status thru the program?</subject><body>

&gt; &gt;  The convention is that the D flag in IA32 is cleared. So if you call a
&gt; &gt; subroutine you have to clear D flag before making call.
&gt;
&gt; Do you mean that 'I have to clear the D flag if I had set it somewhere
&gt; before?'  Else what is the sense of the convention?
Yes. Other code may assume that D is cleared and for example after calling
your code will not check state of D flag, so if you will left D flag set
this may cause errors.

&gt; &gt; The subroutine can change the state of D flag, but before returning
&gt; &gt; the routine has to clear the D flag.
&gt;
&gt; If the subroutine can change the flag, that it will violate the
&gt; convention, won't it?  And what is the strength of the convention,
&gt; again?
&gt;
Subroutine can change the D flag, but before exiting must clear it.

The convention should make you free from checking the state of flag
and clearing at the beginning of your code.

&gt; &gt;  Hope I helped.
&gt;
&gt; Thanks, but I still don't understand something.  Again: if every
&gt; procedure keeps the flag clear at exit, then why the same every
&gt; procedure clears it at entry?  In a suspicion, that caller has changed
&gt; the flag against the rules?
Just to be sure that the D flag is cleared. The convetion is one thing and
reality other.


Lukasz
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040705190404</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-05 19:04:04-0400</timestampReceived><subject>Re: x86 D flag: what's its status thru the program?</subject><body>

On Mon, Jul 05, 2004 at 07:19:06PM +0200, Lukasz Michal Rak wrote:
&gt; &gt; &gt;  The convention is that the D flag in IA32 is cleared. So if you call a
&gt; &gt; &gt; subroutine you have to clear D flag before making call.
&gt; &gt;
&gt; &gt; Do you mean that 'I have to clear the D flag if I had set it somewhere
&gt; &gt; before?'  Else what is the sense of the convention?
&gt; Yes. Other code may assume that D is cleared and for example after calling
&gt; your code will not check state of D flag, so if you will left D flag set
&gt; this may cause errors.
&gt; 
&gt; &gt; &gt; The subroutine can change the state of D flag, but before returning
&gt; &gt; &gt; the routine has to clear the D flag.
&gt; &gt;
&gt; &gt; If the subroutine can change the flag, that it will violate the
&gt; &gt; convention, won't it?  And what is the strength of the convention,
&gt; &gt; again?
&gt; &gt;
&gt; Subroutine can change the D flag, but before exiting must clear it.
&gt; 
&gt; The convention should make you free from checking the state of flag
&gt; and clearing at the beginning of your code.
&gt; 
&gt; &gt; &gt;  Hope I helped.
&gt; &gt;
&gt; &gt; Thanks, but I still don't understand something.  Again: if every
&gt; &gt; procedure keeps the flag clear at exit, then why the same every
&gt; &gt; procedure clears it at entry?  In a suspicion, that caller has changed
&gt; &gt; the flag against the rules?
&gt; Just to be sure that the D flag is cleared. The convetion is one thing and
&gt; reality other.

Ok.  Thanks!  It's the thing that I didn't understand.  BTW, where is
this convention documented, if either?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20041030144523</emailId><senderName>Jan-Benedict Glaw</senderName><senderEmail>jbglaw@lug-owl.de</senderEmail><timestampReceived>2004-10-30 14:45:23-0400</timestampReceived><subject>Re: Shared libraries: How to share global variaables?</subject><body>

On Sat, 2004-10-30 14:50:11 +0200, Robin Doer &lt;robin@robind.de&gt;
wrote in message &lt;200410301450.15154.robin@robind.de&gt;:
&gt; Am Samstag, 30. Oktober 2004 07:21 schrieb Naga Raju:
&gt; &gt; Is it possible to share global variables such that all applications
&gt; &gt; which use shared libraries can see the changes made to the global
&gt; &gt; variables by the other applications.
&gt; 
&gt; Well, imho you can use the "extern" keyword.
&gt; See the following example:
&gt; bash-2.05b$ cat foo.c
&gt; const char* foo = "Hello World"; /* Global variable foo */
&gt; 
&gt; bash-2.05b$ cat bar.c
&gt; #include &lt;stdio.h&gt;
&gt; 
&gt; extern const char* foo;
&gt; 
&gt; int main(int argc, char* argv[]) {
&gt;   printf("%s\n", foo);
&gt; 
&gt;   return 0;
&gt; }
&gt; 
&gt; bash-2.05b$ gcc -shared -Wl,-soname,libfoo.so -o libfoo.so foo.c
&gt; bash-2.05b$ gcc -Wall bar.c -L. -lfoo -o bar
&gt; bash-2.05b$ ./bar
&gt; Hello World

As stated, the initial author had something different in mind: to have
two programs linking one common shared library in a way that one program
(in it's VM space) changes a (common to both programs) variable and
automagically, this variable also changes in the 2nd program.

Actually, early Windows versions had something like that.

It's possibly to achieve this by some hacks, but I won't tell you how to
do that--it's evil.

Just use shared memory; asking Google for "linux programming shared
memory" will give you some examples and book tips.

MfG, JBG

-- 
Jan-Benedict Glaw       jbglaw@lug-owl.de    . +49-172-7608481             _ O _
"Eine Freie Meinung in  einem Freien Kopf    | Gegen Zensur | Gegen Krieg  _ _ O
 fuer einen Freien Staat voll Freier Bürger" | im Internet! |   im Irak!   O O O
ret = do_actions((curr | FREE_SPEECH) &amp; ~(NEW_COPYRIGHT_LAW | DRM | TCPA));

["signature.asc" (application/pgp-signature)]
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040807142257</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-08-07 14:22:57-0400</timestampReceived><subject>BUG: g++ 3.x.x -fomit-frame-pointer: exception handling doesn't work</subject><body>

Consider the following example:


#include &lt;stdio.h&gt;

int x(int y)
{
    int x= y;
    if (y)
        printf("%d\n", y);
    else
        throw "x";
    return x;
}

main()
{
    try {
        x(0);
    }
    catch (const char *e) {
        puts(e);
    }
    catch (...) {
        puts("cathed");
    }
}


When compiled without -fomit-frame-pointer, it behaves ok: it prints
'x'.  But if compiled with the option, it prints just 'Aborted',
i.e. no exception is catched at all.

A little research shows, that it's stack-related problem (probably,
stack -&gt; dwarf info related): the presence of the printf call in the
x() function makes GCC to allocate the x variable in the 'value'
register, not corrupted by the printf call.  It's %ebx here.  And so,
GCC does push %ebx in the prologue.  And then the exception handling
mechanism dies.  If the stack is unmodified at the moment of 'throw
"x"', then the mechanism is ok.  This is the case, if the printf call
is removed and the x variable is allocated in a 'cheap' register,
which is not needed to be saved in the stack.

And, finally, as far as I understand, when the frame pointer register
is used, all the stack frame questions are resolved thru it and the
problem described just do not arise.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040827202623</emailId><senderName>"Mariano Moreyra"</senderName><senderEmail>moremari@aca.org.ar</senderEmail><timestampReceived>2004-08-27 20:26:23-0400</timestampReceived><subject>RE: Segmentation fault from free()</subject><body>

Are you writting exactly 2048 chars to in_buffer?? Or are you writting
2047??
If you want to write 2048 chars into in_buffer, you have to malloc 2049
bytes, to store the '\0' char.
I know it seems a little stupid observation, but sometimes we let this
stupid errors happen.


Mariano Moreyra



-----Mensaje original-----
De: linux-c-programming-owner@vger.kernel.org
[mailto:linux-c-programming-owner@vger.kernel.org]En nombre de Lei Yang
Enviado el: Martes, 24 de Agosto de 2004 17:34
Para: linux-c-programming@vger.kernel.org; linux-gcc@vger.kernel.org
CC: Lei Yang
Asunto: Segmentation fault from free()


Hi friends,

I am writing a c code and have been bugged by this segmentation fault
for a while.

What I did is simply like:

----------------------------------------------------------------------------
-------------------------
.........
unsigned long blocksize = 2048;
char *in_buffer
char *out_buffer;
if(( in_buffer= malloc(blocksize)) == NULL)
{
fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
return NULL;
}

if(( out_buffer= malloc(2*blocksize)) == NULL)
{
fprintf(stderr, "*** Can't malloc(%ld) forbuffer.\n",blocksize);
free(in_buffer);
return NULL;
}

loop: until all the data are read from file
{
//read a block of data from a file to in_buffer
// do some data processing with in_buffer
//write the result to out_buffer
//memcpy out_buffer to list
}

free(in_buffer);
free(out_buffer);

return list;
......
----------------------------------------------------------------------------
-------------------------------------

I've debugged with gdb to see where the segmentation fault happens, it
is at free(in_buffer).
I've verified that the value for in_buffer after malloc() and before
free() is the same. Or in other words, in_buffer is a valid pointer
allocated by malloc.

And the SF only happens when the file is large, although block size
could be small.
Means that for both small (2KB) and large(5MB) files, block size are the
same. However, only large files could cause SF.

Could anyone please point me out what could possibly be the reason?
BTW, pls cc me when you reply, since I am not able to receive emails
from this list. Thanks a lot!

TIA!
Lei
-
To unsubscribe from this list: send the line "unsubscribe
linux-c-programming" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html


_______________________________________

Importante



El contenido del presente mensaje y el de sus adjuntos, es privado, confidencial y de \
uso exclusivo de los destinatarios a los cuales está dirigído, pudiendo contener \
información legalmente protegida.Queda prohibida la revisión, divulgación, \
publicación, modificación, copia, distribución o acción en relación con esta \
información, por personas o entidades distintas al destinatario.

Las opiniones contenidas son exclusivas de su autor y no representan ni \
necesariamente pueden coincidir con las de la entidad.

La transmisión de e-mails no garantiza que el correo electrónico sea seguro o libre \
de error. En consecuencia, no manifestamos que la información sea completa o precisa. \
Toda información está sujeta a alterarse sin previo aviso.

Si Ud. recibió este mensaje por error, por favor reenvíelo al remitente y destruya \
las copias de papel o grabadas en cualquier medio magnético, que pueda haber \
realizado.

Muchas Gracias.


-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html

</body></email><email><emailId>20040706140507</emailId><senderName>Lukasz Michal Rak</senderName><senderEmail>l.rak@elka.pw.edu.pl</senderEmail><timestampReceived>2004-07-06 14:05:07-0400</timestampReceived><subject>Re: x86 D flag: what's its status thru the program?</subject><body>

On Tue, 6 Jul 2004, Denis Zaitsev wrote:

&gt; On Mon, Jul 05, 2004 at 07:19:06PM +0200, Lukasz Michal Rak wrote:
&gt; &gt; &gt; &gt;  The convention is that the D flag in IA32 is cleared. So if you call a
&gt; &gt; &gt; &gt; subroutine you have to clear D flag before making call.
&gt; &gt; &gt;
&gt; &gt; &gt; Do you mean that 'I have to clear the D flag if I had set it somewhere
&gt; &gt; &gt; before?'  Else what is the sense of the convention?
&gt; &gt; Yes. Other code may assume that D is cleared and for example after calling
&gt; &gt; your code will not check state of D flag, so if you will left D flag set
&gt; &gt; this may cause errors.
&gt; &gt;
&gt; &gt; &gt; &gt; The subroutine can change the state of D flag, but before returning
&gt; &gt; &gt; &gt; the routine has to clear the D flag.
&gt; &gt; &gt;
&gt; &gt; &gt; If the subroutine can change the flag, that it will violate the
&gt; &gt; &gt; convention, won't it?  And what is the strength of the convention,
&gt; &gt; &gt; again?
&gt; &gt; &gt;
&gt; &gt; Subroutine can change the D flag, but before exiting must clear it.
&gt; &gt;
&gt; &gt; The convention should make you free from checking the state of flag
&gt; &gt; and clearing at the beginning of your code.
&gt; &gt;
&gt; &gt; &gt; &gt;  Hope I helped.
&gt; &gt; &gt;
&gt; &gt; &gt; Thanks, but I still don't understand something.  Again: if every
&gt; &gt; &gt; procedure keeps the flag clear at exit, then why the same every
&gt; &gt; &gt; procedure clears it at entry?  In a suspicion, that caller has changed
&gt; &gt; &gt; the flag against the rules?
&gt; &gt; Just to be sure that the D flag is cleared. The convetion is one thing and
&gt; &gt; reality other.
&gt;
&gt; Ok.  Thanks!  It's the thing that I didn't understand.  BTW, where is
&gt; this convention documented, if either?
&gt;
I don't know where it is documented. Maybe in some documents about C
calling convention. I let you know if I will find something.

		Lukasz
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040706191746</emailId><senderName>John Richard Moser</senderName><senderEmail>nigelenki@comcast.net</senderEmail><timestampReceived>2004-07-06 19:17:46-0400</timestampReceived><subject>Objective-C Objects and Locking</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

I'm writing up my own objective-c framework, something to use in place
of OpenStep/Cocoa/etc.  So, I'm in complete control of what happens with
my base object, SVObject (which ironically inherits from Object :).

I'm attempting to implement a swizzling subsystem which allows any
SVObject inheriting object to dynamicly handle swizzle requests safely
and effectively.  Because I want to work in a threaded environment, I
need to lock properly.

What I'm thinking is to use a mutex lock around all members that may not
run during a swizzle and deflect in-swizzle calls to the new swizzle
master.  The current logic I'm pondering is:

- -(void) someMemberThatIsAffected {
~  if ([my_swizzle_lock tryReadLock]) { /*Can we lock?*/
~    /*
~     * We couldn't lock, so we wait for the swizzle lock to become
~     * unlocked, then send the message to whatever swizzled us.
~     */
~    [my_swizzle_lock readLock];
~    [my_swizzle_master someMemberThatIsAffected];
~  }
~  else { /*Or we just complete*/
~    ...
~  }
~  [my_swizzle_lock unlock];
}

A swizzle would -writeLock my_swizzle_lock, so this would detect the lock.

Here's the issue I have:  Looking at this logic, if the entire swizzle
is done between the actual message passing call and the -tryReadLock,
which is quite plausible in an SMP situation, this will fail to detect.
~ Also, the new object may want to pass messages down to this object, so
I can't just feed all messages upwards.

I don't want to abandon the idea of supplying simplistic swizzling;
however, I would have to detect in-progress swizzles reliably.  I can't
think of anything to atomicize, and don't know how to make chunks of
code atomic anyway.

Any thoughts?
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFA6vrZhDd4aOud5P8RAqioAKCOswm5y2OM0ShzROOXvR5R2BEC6QCfW6hQ
Sf/+aJXpdPUkBDsmq3zcJig=
=PyRP
-----END PGP SIGNATURE-----
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040707074435</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-07 07:44:35-0400</timestampReceived><subject>Re: GCC 3.3.2 -Wall affects the code generated...</subject><body>

On Tue, Jul 06, 2004 at 05:20:21PM -0700, Jim Wilson wrote:
&gt; On Tue, 2004-07-06 at 15:46, Denis Zaitsev wrote:
&gt; &gt; I used to assume that everybody has the GLIBC tree.  :)
&gt; 
&gt; I have a glibc src/build tree on my IA-64 machine, but not on my x86
&gt; machine.  I wasn't sure I'd get the right testcase if I tried to
&gt; generate one on a IA-64 machine.  It seemed easier to ask you for one.

Ok.  I understand.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040708171856</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-08 17:18:56-0400</timestampReceived><subject>Re: [new-ra] GCC-3.3.2/x86: some suspicious behaviour</subject><body>

On Thu, Jul 08, 2004 at 05:52:57PM +0100, Paul Brook wrote:
&gt; On Thursday 08 July 2004 17:31, Denis Zaitsev wrote:
&gt; &gt; On Thu, Jul 08, 2004 at 04:46:33PM +0200, Michael Matz wrote:
&gt; &gt; &gt; Hi,
&gt; &gt; &gt;
&gt; &gt; &gt; On Thu, 8 Jul 2004, Denis Zaitsev wrote:
&gt; &gt; &gt; &gt; So, what does these two commands mean:
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; 	movl	%ecx, 16(%esp)
&gt; &gt; &gt; &gt; 	movl	%esi, 20(%esp)
&gt; &gt; &gt;
&gt; &gt; &gt; It means that the compiler wasn't able to optimize them away.  They do no
&gt; &gt; &gt; harm.  FWIW gcc 3.4 or the new-regalloc-branch don't have this problem.
&gt; &gt;
&gt; &gt; They don't harm.  But to optimize _what_?  So, what is the initial
&gt; &gt; meaning of these assignments?  And why they appear only for the double
&gt; &gt; asm statement?
&gt; 
&gt; They're storing the modified values of s and d back into their stack slots 
&gt; after the first asm. The compiler wasn't able to determine that these were 
&gt; dead stores.
&gt; 
&gt; Remove the "extern inline" and compile with -O0. This will show you 
&gt; approximately what the code looks like before optimization.

Yes, this way the variables are really just stored back into their
stack locations.  But in my case:


	movl	20(%esp), %ecx
	movl	16(%esp), %esi
	movl	%ecx, 16(%esp)
	movl	%esi, 20(%esp)


So, the stack slots seem to be swapped.  Why?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040711222847</emailId><senderName>Michel Lespinasse</senderName><senderEmail>walken@zoy.org</senderEmail><timestampReceived>2004-07-11 22:28:47-0400</timestampReceived><subject>Re: Why -fPIC stops some optimization?</subject><body>

On Sat, Jul 10, 2004 at 03:58:01AM +0600, Denis Zaitsev wrote:
&gt; &gt; Try making __n a const and see if it helps. Yes, this is something
&gt; &gt; that gcc should really figure it out by itself.
&gt; 
&gt; This is the same way I'm curing the problem for now.  Making the subst
&gt; variable const or using (z) directly in a statement-expression really
&gt; helps.  But, nevertheless, is this limitation is switch operator
&gt; specific?  Or is it a limit for optimization GCC can do, and it's
&gt; reached faster when the PIC-code is generated?  Or what's wrong?

I can't really help you on this one - I'm just another gcc user.

All I know is, sometimes (often) gcc fails to see that some variable
is only assigned a constant once and never touched anywhere else, and
fails to optimize out that variable as a constant expression. When I
notice this, it's usualy possible to work around the issue by making
that variable a const. I have no idea why gcc does not notice the
obvious by itself though.

Cheers,

-- 
Michel "Walken" Lespinasse
"In this time of war against Osama bin Laden and the oppressive
Taliban regime, we are thankful that OUR leader isn't the spoiled son
of a powerful politician from a wealthy oil family who is supported by
religious fundamentalists, operates through clandestine organizations,
has no respect for the democratic electoral process, bombs innocents,
and uses war to deny people their civil liberties." --The Boondocks
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040728161947</emailId><senderName>"H. J. Lu"</senderName><senderEmail>hjl@lucon.org</senderEmail><timestampReceived>2004-07-28 16:19:47-0400</timestampReceived><subject>The Linux binutils 2.15.91.0.2 is released</subject><body>

This is the beta release of binutils 2.15.91.0.2 for Linux, which is
based on binutils 2004 0727 in CVS on sources.redhat.com plus various
changes. It is purely for Linux.

Please report any bugs related to binutils 2.15.91.0.2 to hjl@lucon.org

and

http://www.sourceware.org/bugzilla/

If you don't use

# rpmbuild -ta binutils-xx.xx.xx.xx.xx.tar.bz2

to compile the Linux binutils, please read patches/README in source
tree to apply Linux patches if there are any.

Changes from binutils 2.15.91.0.1:

1. Update from binutils 2004 0727.
2. Fix the x86_64 linker to prevent non-PIC code in shared library.
3. Fix the ia64 linker to warn the relotable files which can't be
relaxed.
4. Fix the comdat group support. Allow mix single-member comdat group
with linkonce section.
5. Added --add-needed/--no-add-needed options to linker.
6. Fix the SHF_LINK_ORDER support.
7. Fix the ia64 assembler for multiple sections with the same name and
SHT_IA_64_UNWIND sections.
8. Fix the ia64 assembler for merge section and relaxation.

Changes from binutils 2.15.90.0.3:

1. Update from binutils 2004 0527.
2. Fix -x auto option in the ia64 assembler.
3. Add the AR check in the ia64 assembler.
4. Fix the section group support.
5. Add a new -z relro linker option.
6. Fix an exception section placement bug in linker.
7. Add .serialize.data and .serialize.instruction to the ia64
assembler.

Changes from binutils 2.15.90.0.2:

1. Update from binutils 2004 0415.
2. Fix the linker for weak undefined symbol handling.
3. Fix the ELF/Sparc and ELF/Sparc64 linker for statically linking PIC
code.

Changes from binutils 2.15.90.0.1.1:

1. Update from binutils 2004 0412.
2. Add --as-needed/--no-as-needed to linker.
3. Fix -z defs in linker.
4. Always reserve the memory for ia64 dynamic linker.
5. Fix a race condition in ia64 lazy binding.

Changes from binutils 2.15.90.0.1:

1. Fixed an ia64 assembler bug.
2. Install the assembler man page.

Changes from binutils 2.14.90.0.8:

1. Update from binutils 2004 0303.
2. Fixed linker for undefined symbols with non-default visibility.
3. Sped up linker weakdef symbol handling.
4. Fixed mixing ELF32 and ELF64 object files in archive.
5. Added ia64 linker brl optimization.
6. Fixed ia64 linker to disallow invalid dynamic relocations.
7. Fixed DT_TEXTREL handling in ia64 linker.
8. Fixed alignment handling in ia64 assembler.
9. Improved ia64 assembler unwind table handling. 

Changes from binutils 2.14.90.0.7:

1. Update from binutils 2004 0114.
2. Fixed an ia64 assembler unwind table bug. 
3. Better handle IPF linker relaxation overflow.
4. Fixed misc PPC bugs.

Changes from binutils 2.14.90.0.6:

1. Update from binutils 2003 1029.
2. Allow type changes for undefined symbols.
3. Fix EH frame optimization.
4. Fix the check for undefined versioned symbol with wildcard.
5. Support generating code for Itanium.
6. Detect and warn bad symbol index.
7. Update IPF assemebler DV check.

Changes from binutils 2.14.90.0.5:

1. Update from binutils 2003 0820.
2. No longer use section names for ELF section types nor flags.
3. Fix some ELF/IA64 linker bugs.
4. Fix some ELF/ppc bugs.
5. Add archive support to readelf.

Changes from binutils 2.14.90.0.4.1:

1. Update from binutils 2003 0722.
2. Fix an ELF/mips linker bug.
3. Fix an ELF/hpppa linker bug.
4. Fix an ELF/ia64 assembler bug.
5. Fix a linkonce support with C++ debug.
6. A new working C++ demangler.
7. Various alpha, mips, ia64, ... bug fixes.
8. Support for the current gcc and glibc.

Changes from binutils 2.14.90.0.4:
 
1. Fix an ia64 assembler hint@pause bug.
2. Support Intel Prescott New Instructions.

Changes from binutils 2.14.90.0.3:

1. Work around the brain dead libtool.

Changes from binutils 2.14.90.0.2:

1. Update from binutils 2003 0523.
2. Fix 2 ELF visibility bugs.
3. Fix ELF/ppc linker bugs.

Changes from binutils 2.14.90.0.1:

1. Update from binutils 2003 0515.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Add more IAS compatibilities to ia64 assembler.

Changes from binutils 2.13.90.0.20:

1. Update from binutils 2003 0505.
2. Fix various ELF visibility bugs.
3. Fix some ia64 linker bugs.
4. Fix some ia64 assembler bugs.
5. Add some IAS compatibilities to ia64 assembler.
6. Fix ELF common symbol alignment.
7. Fix ELF weak symbol handling.

Changes from binutils 2.13.90.0.18:

1. Update from binutils 2003 0319.
2. Fix an ia64 linker brl relaxation bug.
3. Fix some ELF/ppc linker bugs.

Changes from binutils 2.13.90.0.16:

1. Update from binutils 2003 0121.
2. Fix an ia64 gas bug.
3. Fix some TLS bugs.
4. Fix some ELF/ppc bugs.
5. Fix an ELF/m68k bug.

2. Include /usr/bin/c++filt.
Changes from binutils 2.13.90.0.14:

1. Update from binutils 2002 1126.
2. Include /usr/bin/c++filt.
3. Fix "ld -r" with execption handling.

Changes from binutils 2.13.90.0.10:

1. Update from binutils 2002 1114.
2. Fix ELF/alpha bugs.
3. Fix an ELF/i386 assembler bug.

Changes from binutils 2.13.90.0.4:

1. Update from binutils 2002 1010.
2. More ELF/PPC linker bug fixes.
3. Fix an ELF/alpha linker bug.
4. Fix an ELF/sparc linker bug to support Solaris.
5. More TLS updates.

Changes from binutils 2.13.90.0.3:

1. Update from binutils 2002 0814.
2. Fix symbol versioning bugs for gcc 3.2.
3. Fix mips gas.

Changes from binutils 2.13.90.0.2:

1. Update from binutils 2002 0809.
2. Fix a mips gas compatibility bug.
3. Fix an x86 TLS bfd bug.
4. Fix an x86 PIC gas bug.
5. Improve symbol versioning support.

The file list:

1. binutils-2.15.91.0.2.tar.bz2. Source code.
2. binutils-2.15.91.0.1-2.15.91.0.2.diff.bz2. Patch against the
   previous beta source code.
3. binutils-2.15.91.0.2-1.i386.rpm. IA-32 binary RPM for RedHat EL 3.
4. binutils-2.15.91.0.2-1.ia64.rpm. IA-64 binary RPM for RedHat EL 3.
5. binutils-2.15.91.0.2-1.x86_64.rpm. X64_64 binary RPM for RedHat EL 3.

There is no separate source rpm. You can do

# rpmbuild -ta binutils-2.15.91.0.2.tar.bz2

to create both binary and source rpms.

The primary sites for the beta Linux binutils are:

1. http://www.kernel.org/pub/linux/devel/binutils/

Thanks.


H.J. Lu
hjl@lucon.org
07/28/2004
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040701180303</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-01 18:03:03-0400</timestampReceived><subject>GCC 3.3.2 -Wall affects the code generated...</subject><body>

The long story is such: I was compiling GLIBC 2.3.2 and there is a
file libio/fileops.c which includes iconv/gconv_charset.h.  In this
header an inline function named strip is defined.  And I found that
the object code generated for this function depends of the presence of
-Wall in the list of option to GCC.  (For some reason, GCC can't
inline this function, so it's compiled as just an outline one.)  Is
this a bug in GCC?

Below I include the source code of this strip function and its
assembler generated with and without -Wall.  I can say also, that it
seems that this libio/fileops.c file is kinda 'hard to compile'
source: another tho inline functions can't be inlined (and GCC
complains about that), GCC warns that yet another one function
'declared inline after being called', even though it's not true
(AFAIK) and GCC just silently refuse to do some other optimization
during the compilation.


The source code:


static inline void
strip (char *wp, const char *s)
{
  int slash_count = 0;

  while (*s != '\0')
    {
      if (__isalnum_l (*s, &amp;_nl_C_locobj)
	  || *s == '_' || *s == '-' || *s == '.')
	*wp++ = __toupper_l (*s, &amp;_nl_C_locobj);
      else if (*s == '/')
	{
	  if (++slash_count == 3)
	    break;
	  *wp++ = '/';
	}
      ++s;
    }

  while (slash_count++ &lt; 2)
    *wp++ = '/';

  *wp = '\0';
}


The command line:


gcc fileops.c -c -std=gnu99 -D__USE_STRING_INLINES -O2 -Wall -Winline \
-Wstrict-prototypes -Wwrite-strings -fno-align-functions -fno-align-jumps \
-fno-align-loops -fno-ident -fno-strength-reduce -mcpu=pentium \
-mpreferred-stack-boundary=2 -pipe   -fPIC -g0 -fomit-frame-pointer -fexceptions   \
-I../include -I. -I/home/src/zzz/lib/glibc/bld/libio -I.. -I../libio  \
-I/home/src/zzz/lib/glibc/bld -I../sysdeps/i386/elf \
-I../linuxthreads/sysdeps/unix/sysv/linux/i386 \
-I../linuxthreads/sysdeps/unix/sysv/linux -I../linuxthreads/sysdeps/pthread \
-I../sysdeps/pthread -I../linuxthreads/sysdeps/unix/sysv \
-I../linuxthreads/sysdeps/unix -I../linuxthreads/sysdeps/i386/i586 \
-I../linuxthreads/sysdeps/i386 -I../sysdeps/unix/sysv/linux/i386 \
-I../sysdeps/unix/sysv/linux -I../sysdeps/gnu -I../sysdeps/unix/common \
-I../sysdeps/unix/mman -I../sysdeps/unix/inet -I../sysdeps/unix/sysv/i386 \
-I../sysdeps/unix/sysv -I../sysdeps/unix/i386 -I../sysdeps/unix -I../sysdeps/posix \
-I../sysdeps/i386/i586 -I../sysdeps/i386/i486 -I../sysdeps/i386/fpu -I../sysdeps/i386 \
-I../sysdeps/wordsize-32 -I../sysdeps/ieee754/ldbl-96 -I../sysdeps/ieee754/dbl-64 \
-I../sysdeps/ieee754/flt-32 -I../sysdeps/ieee754 -I../sysdeps/generic/elf \
-I../sysdeps/generic  -I /lib/modules/2.4.24/build/include -D_LIBC_REENTRANT -include \
../include/libc-symbols.h  -DPIC -DSHARED     -D_IO_MTSAFE_IO -o ...


The assembler (-Wall):


strip:
.LFB113:
	pushl	%ebp
.LCFI521:
	xorl	%ebp, %ebp
	pushl	%edi
.LCFI522:
	pushl	%esi
.LCFI523:
	pushl	%ebx
.LCFI524:
	pushl	%edi
.LCFI525:
	call	.L796
.L796:
	popl	%ebx
	addl	$_GLOBAL_OFFSET_TABLE_+[.-.L796], %ebx
	movl	28(%esp), %edi
	movl	24(%esp), %esi
	movb	(%edi), %al
	movb	%al, 3(%esp)
	testb	%al, %al
	je	.L24
.L23:
	movsbl	3(%esp),%edx
	movl	52+_nl_C_locobj@GOTOFF(%ebx), %eax
	testb	$8, (%eax,%edx,2)
	jne	.L13
	cmpb	$95, 3(%esp)
	je	.L13
	cmpb	$45, 3(%esp)
	je	.L13
	cmpb	$46, 3(%esp)
	je	.L13
	cmpb	$47, 3(%esp)
	je	.L794
.L20:
	incl	%edi
	movb	(%edi), %al
	movb	%al, 3(%esp)
	testb	%al, %al
	jne	.L23
.L24:
	movl	%ebp, %eax
	incl	%ebp
	decl	%eax
	jg	.L795
	movb	$47, (%esi)
	incl	%esi
	jmp	.L24
.LCFI526:
.L795:
	movb	$0, (%esi)
	popl	%esi
.LCFI527:
	popl	%ebx
.LCFI528:
	popl	%esi
.LCFI529:
	popl	%edi
.LCFI530:
	popl	%ebp
.LCFI531:
	ret
.L794:
	incl	%ebp
	cmpl	$3, %ebp
	je	.L24
	movb	$47, (%esi)
	incl	%esi
	jmp	.L20
.L13:
	movsbl	3(%esp),%edx
	movl	60+_nl_C_locobj@GOTOFF(%ebx), %eax
	movl	%esi, %ecx
	incl	%esi
	movl	(%eax,%edx,4), %eax
	movb	%al, (%ecx)
	jmp	.L20
.LFE113:
	.size	strip, .-strip
	.type	upstr, @function


The assembler (w/o -Wall):


strip:
.LFB113:
	pushl	%ebp
.LCFI521:
	xorl	%ebp, %ebp
	pushl	%edi
.LCFI522:
	pushl	%esi
.LCFI523:
	pushl	%ebx
.LCFI524:
	pushl	%edi
.LCFI525:
	call	.L797
.L797:
	popl	%ebx
	addl	$_GLOBAL_OFFSET_TABLE_+[.-.L797], %ebx
	movl	28(%esp), %edi
	movl	24(%esp), %esi
	movb	(%edi), %al
	movb	%al, 3(%esp)
	testb	%al, %al
	je	.L10
.L23:
	movsbl	3(%esp),%edx
	movl	52+_nl_C_locobj@GOTOFF(%ebx), %eax
	testb	$8, (%eax,%edx,2)
	jne	.L13
	cmpb	$95, 3(%esp)
	je	.L13
	cmpb	$45, 3(%esp)
	je	.L13
	cmpb	$46, 3(%esp)
	je	.L13
	cmpb	$47, 3(%esp)
	je	.L796
.L20:
	incl	%edi
	movb	(%edi), %al
	movb	%al, 3(%esp)
	testb	%al, %al
	jne	.L23
.L10:
	movl	%ebp, %eax
	incl	%ebp
	decl	%eax
	jle	.L27
.L795:
	movb	$0, (%esi)
	popl	%esi
.LCFI526:
	popl	%ebx
.LCFI527:
	popl	%esi
.LCFI528:
	popl	%edi
.LCFI529:
	popl	%ebp
.LCFI530:
	ret
.L27:
	movl	%ebp, %eax
	movb	$47, (%esi)
	incl	%ebp
	incl	%esi
	decl	%eax
	jle	.L27
	jmp	.L795
.L796:
	incl	%ebp
	cmpl	$3, %ebp
	je	.L10
	movb	$47, (%esi)
	incl	%esi
	jmp	.L20
.L13:
	movsbl	3(%esp),%edx
	movl	60+_nl_C_locobj@GOTOFF(%ebx), %eax
	movl	%esi, %ecx
	incl	%esi
	movl	(%eax,%edx,4), %eax
	movb	%al, (%ecx)
	jmp	.L20
.LFE113:
	.size	strip, .-strip
	.type	upstr, @function


The diff (I omited all the parts that describe only the different
labels):


47,51c47
&lt; 	jg	.L795
&lt; 	movb	$47, (%esi)
&lt; 	incl	%esi
&lt; 	jmp	.L24
&lt; .LCFI526:
---
&gt; 	jle	.L27

65c61,69
&lt; .L794:
---
&gt; .L27:
&gt; 	movl	%ebp, %eax
&gt; 	movb	$47, (%esi)
&gt; 	incl	%ebp
&gt; 	incl	%esi
&gt; 	decl	%eax
&gt; 	jle	.L27
&gt; 	jmp	.L795
&gt; .L796:
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html


</body></email><email><emailId>20040707220643</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-07 22:06:43-0400</timestampReceived><subject>[new-ra] GCC-3.3.2/x86: some suspicious behaviour</subject><body>

This source


extern inline
void *i(void *d, void *s, int n)
{
    __asm__ __volatile__ ( ""
        :"+&amp;c"(n), "+&amp;D"(d), "+&amp;S"(s)
    );
}
void *o(void *d, void *s, int n)
{
    return i(d, s, n);
}


is compiled into that assembler:


o:
	pushl	%edi
	pushl	%esi
	movl	12(%esp), %edi
	movl	16(%esp), %esi
	movl	20(%esp), %ecx
	popl	%esi
	popl	%edi
	ret


Everything looks ok.  But the source modified slightly


extern inline
void *i(void *d, void *s, int n)
{
    __asm__ __volatile__ ( ""
        :"+&amp;c"(n), "+&amp;D"(d), "+&amp;S"(s)
    );
    __asm__ __volatile__ ( ""
        :"+&amp;c"(n), "+&amp;D"(d), "+&amp;S"(s)
    );
}
void *o(void *d, void *s, int n)
{
    return i(d, s, n);
}


is compiled into that assembler:


o:
	pushl	%edi
	pushl	%esi
	movl	12(%esp), %edi
	movl	20(%esp), %ecx
	movl	16(%esp), %esi
	movl	%ecx, 16(%esp)
	movl	%esi, 20(%esp)
	popl	%esi
	popl	%edi
	ret


So, what does these two commands mean:


	movl	%ecx, 16(%esp)
	movl	%esi, 20(%esp)


?  The options for the compiler are:


-O2 -fomit-frame-pointer -fnew-ra


The result is the same for any -O &gt;0 and for -Os.  And the presence of
these suspicious commands are not affected by the frame-pointer
option.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040709150230</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-09 15:02:30-0400</timestampReceived><subject>Why -fPIC stops some optimization?</subject><body>

I have met such a behaviour while compiling GLIBC for x86.  A
construct which suffers looks like:


#define __xyz(x,y,z) ({ \
    ...                 \
    size_t __n= (z);    \
    ...                 \
    switch (__n) {      \
        case ...        \
        ...             \
    }                   \
    ...                 \
})


This macro is intended for use with some constant z
(__builtin_constant_p(z) is true).  And when this macro is used such a
way, GCC should unroll (or what is the word for this?) the switch into
the only branch which is needed.  And GCC does this optimization, but
only not for the -fPIC case.  There GCC emits the whole body for the
switch operator and then does just a jump for the correct branch.
Why?  Or it is some expected misbehaviour for the -fPIC case?

GCC-3.3.2.

Thanks in advance.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040709204550</emailId><senderName>Michel Lespinasse</senderName><senderEmail>walken@zoy.org</senderEmail><timestampReceived>2004-07-09 20:45:50-0400</timestampReceived><subject>Re: Why -fPIC stops some optimization?</subject><body>

On Fri, Jul 09, 2004 at 09:02:30PM +0600, Denis Zaitsev wrote:
&gt; I have met such a behaviour while compiling GLIBC for x86.  A
&gt; construct which suffers looks like:
&gt; 
&gt; 
&gt; #define __xyz(x,y,z) ({ \
&gt;     ...                 \
&gt;     size_t __n= (z);    \
&gt;     ...                 \
&gt;     switch (__n) {      \
&gt;         case ...        \
&gt;         ...             \
&gt;     }                   \
&gt;     ...                 \
&gt; })

I can not comment about your specific case, but in the past I've had a
fairly similar issue with an inline function that had branches and was
supposed to be optimized out to straight-line code at the call site.

Try making __n a const and see if it helps. Yes, this is something
that gcc should really figure it out by itself.

-- 
Michel "Walken" Lespinasse
"In this time of war against Osama bin Laden and the oppressive
Taliban regime, we are thankful that OUR leader isn't the spoiled son
of a powerful politician from a wealthy oil family who is supported by
religious fundamentalists, operates through clandestine organizations,
has no respect for the democratic electoral process, bombs innocents,
and uses war to deny people their civil liberties." --The Boondocks
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040709215801</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-09 21:58:01-0400</timestampReceived><subject>Re: Why -fPIC stops some optimization?</subject><body>

On Fri, Jul 09, 2004 at 01:45:50PM -0700, Michel Lespinasse wrote:
&gt; On Fri, Jul 09, 2004 at 09:02:30PM +0600, Denis Zaitsev wrote:
&gt; &gt; I have met such a behaviour while compiling GLIBC for x86.  A
&gt; &gt; construct which suffers looks like:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; #define __xyz(x,y,z) ({ \
&gt; &gt;     ...                 \
&gt; &gt;     size_t __n= (z);    \
&gt; &gt;     ...                 \
&gt; &gt;     switch (__n) {      \
&gt; &gt;         case ...        \
&gt; &gt;         ...             \
&gt; &gt;     }                   \
&gt; &gt;     ...                 \
&gt; &gt; })
&gt; 
&gt; I can not comment about your specific case, but in the past I've had a
&gt; fairly similar issue with an inline function that had branches and was
&gt; supposed to be optimized out to straight-line code at the call site.
&gt; 
&gt; Try making __n a const and see if it helps. Yes, this is something
&gt; that gcc should really figure it out by itself.

This is the same way I'm curing the problem for now.  Making the subst
variable const or using (z) directly in a statement-expression really
helps.  But, nevertheless, is this limitation is switch operator
specific?  Or is it a limit for optimization GCC can do, and it's
reached faster when the PIC-code is generated?  Or what's wrong?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040708144633</emailId><senderName>Michael Matz</senderName><senderEmail>matz@suse.de</senderEmail><timestampReceived>2004-07-08 14:46:33-0400</timestampReceived><subject>Re: [new-ra] GCC-3.3.2/x86: some suspicious behaviour</subject><body>

Hi,

On Thu, 8 Jul 2004, Denis Zaitsev wrote:

&gt; So, what does these two commands mean:
&gt; 
&gt; 
&gt; 	movl	%ecx, 16(%esp)
&gt; 	movl	%esi, 20(%esp)

It means that the compiler wasn't able to optimize them away.  They do no 
harm.  FWIW gcc 3.4 or the new-regalloc-branch don't have this problem.

&gt; The result is the same for any -O &gt;0 and for -Os.  And the presence of
&gt; these suspicious commands are not affected by the frame-pointer option.


Ciao,
Michael.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040708163119</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-08 16:31:19-0400</timestampReceived><subject>Re: [new-ra] GCC-3.3.2/x86: some suspicious behaviour</subject><body>

On Thu, Jul 08, 2004 at 04:46:33PM +0200, Michael Matz wrote:
&gt; Hi,
&gt; 
&gt; On Thu, 8 Jul 2004, Denis Zaitsev wrote:
&gt; 
&gt; &gt; So, what does these two commands mean:
&gt; &gt; 
&gt; &gt; 
&gt; &gt; 	movl	%ecx, 16(%esp)
&gt; &gt; 	movl	%esi, 20(%esp)
&gt; 
&gt; It means that the compiler wasn't able to optimize them away.  They do no 
&gt; harm.  FWIW gcc 3.4 or the new-regalloc-branch don't have this problem.

They don't harm.  But to optimize _what_?  So, what is the initial
meaning of these assignments?  And why they appear only for the double
asm statement?
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040708165257</emailId><senderName>Paul Brook</senderName><senderEmail>paul@codesourcery.com</senderEmail><timestampReceived>2004-07-08 16:52:57-0400</timestampReceived><subject>Re: [new-ra] GCC-3.3.2/x86: some suspicious behaviour</subject><body>

On Thursday 08 July 2004 17:31, Denis Zaitsev wrote:
&gt; On Thu, Jul 08, 2004 at 04:46:33PM +0200, Michael Matz wrote:
&gt; &gt; Hi,
&gt; &gt;
&gt; &gt; On Thu, 8 Jul 2004, Denis Zaitsev wrote:
&gt; &gt; &gt; So, what does these two commands mean:
&gt; &gt; &gt;
&gt; &gt; &gt;
&gt; &gt; &gt; 	movl	%ecx, 16(%esp)
&gt; &gt; &gt; 	movl	%esi, 20(%esp)
&gt; &gt;
&gt; &gt; It means that the compiler wasn't able to optimize them away.  They do no
&gt; &gt; harm.  FWIW gcc 3.4 or the new-regalloc-branch don't have this problem.
&gt;
&gt; They don't harm.  But to optimize _what_?  So, what is the initial
&gt; meaning of these assignments?  And why they appear only for the double
&gt; asm statement?

They're storing the modified values of s and d back into their stack slots 
after the first asm. The compiler wasn't able to determine that these were 
dead stores.

Remove the "extern inline" and compile with -O0. This will show you 
approximately what the code looks like before optimization.

Paul
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040706204102</emailId><senderName>Jim Wilson</senderName><senderEmail>wilson@specifixinc.com</senderEmail><timestampReceived>2004-07-06 20:41:02-0400</timestampReceived><subject>Re: GCC 3.3.2 -Wall affects the code generated...</subject><body>

Denis Zaitsev wrote:
&gt; header an inline function named strip is defined.  And I found that
&gt; the object code generated for this function depends of the presence of
&gt; -Wall in the list of option to GCC.  

This is probably a bug.  This is a small loop that is being complied 
differently, so this might be a problem with a loop optimizer, or with 
the basic block reorganizer.  I'd guess we have an uninitialized 
variable, or some other kind of memory corruption somewhere.  I don't 
know of any other reason why -Wall would effect the code emitted.

We need a testcase to look at this.  The source you provided can not be 
compiled on its own.  I don't happen to have an x86 GLIBC tree, so I can 
not easily generate my own testcase.  I tried fixing your testcase to 
make it compilable, but nothing interesting happens when using 
gcc-3.3.4.  I suspect that there is a complicated interaction going on 
here, and we actually need the full input file to reproduce the problem, 
rather than just the source for the one function that changes.  Or maybe 
the problem has already been fixed.  I can't tell.
-- 
Jim Wilson, GNU Tools Support, http://www.SpecifixInc.com

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040706211134</emailId><senderName>John Richard Moser</senderName><senderEmail>nigelenki@comcast.net</senderEmail><timestampReceived>2004-07-06 21:11:34-0400</timestampReceived><subject>Re: GCC 3.3.2 -Wall affects the code generated...</subject><body>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1



Jim Wilson wrote:
| Denis Zaitsev wrote:
|

| know of any other reason why -Wall would effect the code emitted.
AFFECT
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.2.4 (GNU/Linux)
Comment: Using GnuPG with Thunderbird - http://enigmail.mozdev.org

iD8DBQFA6xWEhDd4aOud5P8RAgDkAJ94vibaOqcTaSaLawg8LfCFBNqSjwCePPuC
iZEYFTr8NWdZ4zHy6AT+djs=
=qTaC
-----END PGP SIGNATURE-----
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040706224604</emailId><senderName>Denis Zaitsev</senderName><senderEmail>zzz@anda.ru</senderEmail><timestampReceived>2004-07-06 22:46:04-0400</timestampReceived><subject>Re: GCC 3.3.2 -Wall affects the code generated...</subject><body>

On Tue, Jul 06, 2004 at 01:41:02PM -0700, Jim Wilson wrote:
&gt; Denis Zaitsev wrote:
&gt; &gt; header an inline function named strip is defined.  And I found that
&gt; &gt; the object code generated for this function depends of the presence of
&gt; &gt; -Wall in the list of option to GCC.  
&gt; 
&gt; This is probably a bug.  This is a small loop that is being complied 
&gt; differently, so this might be a problem with a loop optimizer, or with 
&gt; the basic block reorganizer.  I'd guess we have an uninitialized 
&gt; variable, or some other kind of memory corruption somewhere.  I don't 
&gt; know of any other reason why -Wall would effect the code emitted.
&gt; 
&gt; We need a testcase to look at this.  The source you provided can not be 
&gt; compiled on its own.  I don't happen to have an x86 GLIBC tree, so I can 
&gt; not easily generate my own testcase.  I tried fixing your testcase to 
&gt; make it compilable, but nothing interesting happens when using 
&gt; gcc-3.3.4.  I suspect that there is a complicated interaction going on 
&gt; here, and we actually need the full input file to reproduce the problem, 
&gt; rather than just the source for the one function that changes.  Or maybe 
&gt; the problem has already been fixed.  I can't tell.

I used to assume that everybody has the GLIBC tree.  :)  So, I can
just sent all the necessary files to you.  And I don't think that this
problem is specific for that function, so there is no sence to try to
reproduce the problem upon that function only.  I have already told,
it seems that a compilation of that file loads GCC too high, and bugs
are popping up.  Compiling that file, GCC just refuse to do some
(other that the inlining) optimization it always does.  I can describe
this problem too, should it help.

And I going to compile and install GCC-3.3.4 myself, so I will try to
compile GLIBC with this GCC and will report the result.
-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email><email><emailId>20040707002021</emailId><senderName>Jim Wilson</senderName><senderEmail>wilson@specifixinc.com</senderEmail><timestampReceived>2004-07-07 00:20:21-0400</timestampReceived><subject>Re: GCC 3.3.2 -Wall affects the code generated...</subject><body>

On Tue, 2004-07-06 at 15:46, Denis Zaitsev wrote:
&gt; I used to assume that everybody has the GLIBC tree.  :)

I have a glibc src/build tree on my IA-64 machine, but not on my x86
machine.  I wasn't sure I'd get the right testcase if I tried to
generate one on a IA-64 machine.  It seemed easier to ask you for one.
-- 
Jim Wilson, GNU Tools Support, http://www.SpecifixInc.com

-
To unsubscribe from this list: send the line "unsubscribe linux-gcc" in
the body of a message to majordomo@vger.kernel.org
More majordomo info at  http://vger.kernel.org/majordomo-info.html
</body></email></emails>